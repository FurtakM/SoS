// export function Attack ( attackers , attackFormula , retreatFormula , captureTanks ) ; var i , j , tag , sol , sci , mech , tanks , veh ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if not attackFormula then
  11: LD_VAR 0 2
  15: NOT
  16: IFFALSE 20
// exit ;
  18: GO 1811
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
  20: LD_ADDR_VAR 0 9
  24: PUSH
  25: LD_VAR 0 1
  29: PPUSH
  30: LD_INT 25
  32: PUSH
  33: LD_INT 1
  35: PUSH
  36: EMPTY
  37: LIST
  38: LIST
  39: PPUSH
  40: CALL_OW 72
  44: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
  45: LD_ADDR_VAR 0 10
  49: PUSH
  50: LD_VAR 0 1
  54: PPUSH
  55: LD_INT 25
  57: PUSH
  58: LD_INT 4
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: PPUSH
  65: CALL_OW 72
  69: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
  70: LD_ADDR_VAR 0 11
  74: PUSH
  75: LD_VAR 0 1
  79: PPUSH
  80: LD_INT 25
  82: PUSH
  83: LD_INT 3
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PPUSH
  90: CALL_OW 72
  94: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
  95: LD_ADDR_VAR 0 12
  99: PUSH
 100: LD_VAR 0 1
 104: PPUSH
 105: LD_INT 21
 107: PUSH
 108: LD_INT 2
 110: PUSH
 111: EMPTY
 112: LIST
 113: LIST
 114: PPUSH
 115: CALL_OW 72
 119: ST_TO_ADDR
// if sci then
 120: LD_VAR 0 10
 124: IFFALSE 161
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 126: LD_VAR 0 10
 130: PPUSH
 131: LD_VAR 0 2
 135: PUSH
 136: LD_INT 2
 138: ARRAY
 139: PUSH
 140: LD_INT 1
 142: ARRAY
 143: PPUSH
 144: LD_VAR 0 2
 148: PUSH
 149: LD_INT 2
 151: ARRAY
 152: PUSH
 153: LD_INT 2
 155: ARRAY
 156: PPUSH
 157: CALL_OW 111
// repeat wait ( 10 ) ;
 161: LD_INT 10
 163: PPUSH
 164: CALL_OW 67
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
 168: LD_ADDR_VAR 0 9
 172: PUSH
 173: LD_VAR 0 1
 177: PPUSH
 178: LD_INT 25
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 72
 192: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
 193: LD_ADDR_VAR 0 10
 197: PUSH
 198: LD_VAR 0 1
 202: PPUSH
 203: LD_INT 25
 205: PUSH
 206: LD_INT 4
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PPUSH
 213: CALL_OW 72
 217: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
 218: LD_ADDR_VAR 0 11
 222: PUSH
 223: LD_VAR 0 1
 227: PPUSH
 228: LD_INT 25
 230: PUSH
 231: LD_INT 3
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 72
 242: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
 243: LD_ADDR_VAR 0 12
 247: PUSH
 248: LD_VAR 0 1
 252: PPUSH
 253: LD_INT 21
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: PPUSH
 263: CALL_OW 72
 267: ST_TO_ADDR
// if sol then
 268: LD_VAR 0 9
 272: IFFALSE 842
// begin for i in sol do
 274: LD_ADDR_VAR 0 6
 278: PUSH
 279: LD_VAR 0 9
 283: PUSH
 284: FOR_IN
 285: IFFALSE 840
// begin tag := GetTag ( i ) ;
 287: LD_ADDR_VAR 0 8
 291: PUSH
 292: LD_VAR 0 6
 296: PPUSH
 297: CALL_OW 110
 301: ST_TO_ADDR
// if not tag then
 302: LD_VAR 0 8
 306: NOT
 307: IFFALSE 416
// begin if GetLives ( i ) = 1000 then
 309: LD_VAR 0 6
 313: PPUSH
 314: CALL_OW 256
 318: PUSH
 319: LD_INT 1000
 321: EQUAL
 322: IFFALSE 338
// SetTag ( i , 1 ) else
 324: LD_VAR 0 6
 328: PPUSH
 329: LD_INT 1
 331: PPUSH
 332: CALL_OW 109
 336: GO 414
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 338: LD_VAR 0 6
 342: PPUSH
 343: LD_VAR 0 2
 347: PUSH
 348: LD_INT 2
 350: ARRAY
 351: PUSH
 352: LD_INT 1
 354: ARRAY
 355: PPUSH
 356: LD_VAR 0 2
 360: PUSH
 361: LD_INT 2
 363: ARRAY
 364: PUSH
 365: LD_INT 2
 367: ARRAY
 368: PPUSH
 369: CALL_OW 297
 373: PUSH
 374: LD_INT 10
 376: GREATER
 377: IFFALSE 414
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 379: LD_VAR 0 6
 383: PPUSH
 384: LD_VAR 0 2
 388: PUSH
 389: LD_INT 2
 391: ARRAY
 392: PUSH
 393: LD_INT 1
 395: ARRAY
 396: PPUSH
 397: LD_VAR 0 2
 401: PUSH
 402: LD_INT 2
 404: ARRAY
 405: PUSH
 406: LD_INT 2
 408: ARRAY
 409: PPUSH
 410: CALL_OW 111
// end else
 414: GO 838
// begin if GetLives ( i ) < 720 then
 416: LD_VAR 0 6
 420: PPUSH
 421: CALL_OW 256
 425: PUSH
 426: LD_INT 720
 428: LESS
 429: IFFALSE 480
// begin SetTag ( i , 0 ) ;
 431: LD_VAR 0 6
 435: PPUSH
 436: LD_INT 0
 438: PPUSH
 439: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 443: LD_VAR 0 6
 447: PPUSH
 448: LD_VAR 0 2
 452: PUSH
 453: LD_INT 2
 455: ARRAY
 456: PUSH
 457: LD_INT 1
 459: ARRAY
 460: PPUSH
 461: LD_VAR 0 2
 465: PUSH
 466: LD_INT 2
 468: ARRAY
 469: PUSH
 470: LD_INT 2
 472: ARRAY
 473: PPUSH
 474: CALL_OW 111
// end else
 478: GO 838
// if tag <= attackFormula [ 1 ] then
 480: LD_VAR 0 8
 484: PUSH
 485: LD_VAR 0 2
 489: PUSH
 490: LD_INT 1
 492: ARRAY
 493: LESSEQUAL
 494: IFFALSE 662
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
 496: LD_VAR 0 6
 500: PPUSH
 501: LD_VAR 0 2
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PUSH
 510: LD_VAR 0 8
 514: ARRAY
 515: PUSH
 516: LD_INT 1
 518: ARRAY
 519: PPUSH
 520: LD_VAR 0 2
 524: PUSH
 525: LD_INT 1
 527: ARRAY
 528: PUSH
 529: LD_VAR 0 8
 533: ARRAY
 534: PUSH
 535: LD_INT 2
 537: ARRAY
 538: PPUSH
 539: CALL_OW 297
 543: PUSH
 544: LD_INT 6
 546: GREATER
 547: IFFALSE 598
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
 549: LD_VAR 0 6
 553: PPUSH
 554: LD_VAR 0 2
 558: PUSH
 559: LD_INT 1
 561: ARRAY
 562: PUSH
 563: LD_VAR 0 8
 567: ARRAY
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_VAR 0 2
 577: PUSH
 578: LD_INT 1
 580: ARRAY
 581: PUSH
 582: LD_VAR 0 8
 586: ARRAY
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: CALL_OW 114
 596: GO 660
// if not FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_dist , i , 10 ] ] ) then
 598: LD_INT 81
 600: PUSH
 601: LD_VAR 0 6
 605: PPUSH
 606: CALL_OW 255
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: PUSH
 615: LD_INT 91
 617: PUSH
 618: LD_VAR 0 6
 622: PUSH
 623: LD_INT 10
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: LIST
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PPUSH
 635: CALL_OW 69
 639: NOT
 640: IFFALSE 660
// SetTag ( i , tag + 1 ) ;
 642: LD_VAR 0 6
 646: PPUSH
 647: LD_VAR 0 8
 651: PUSH
 652: LD_INT 1
 654: PLUS
 655: PPUSH
 656: CALL_OW 109
// end else
 660: GO 838
// begin if captureTanks and FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) then
 662: LD_VAR 0 4
 666: PUSH
 667: LD_INT 81
 669: PUSH
 670: LD_VAR 0 6
 674: PPUSH
 675: CALL_OW 255
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 21
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: LD_INT 50
 696: PUSH
 697: EMPTY
 698: LIST
 699: PUSH
 700: LD_INT 91
 702: PUSH
 703: LD_VAR 0 6
 707: PUSH
 708: LD_INT 10
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: PPUSH
 722: CALL_OW 69
 726: AND
 727: IFFALSE 804
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) else
 729: LD_VAR 0 6
 733: PPUSH
 734: LD_INT 81
 736: PUSH
 737: LD_VAR 0 6
 741: PPUSH
 742: CALL_OW 255
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 21
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: PUSH
 761: LD_INT 50
 763: PUSH
 764: EMPTY
 765: LIST
 766: PUSH
 767: LD_INT 91
 769: PUSH
 770: LD_VAR 0 6
 774: PUSH
 775: LD_INT 10
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: PPUSH
 789: CALL_OW 69
 793: PUSH
 794: LD_INT 1
 796: ARRAY
 797: PPUSH
 798: CALL_OW 120
 802: GO 838
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
 804: LD_VAR 0 6
 808: PPUSH
 809: LD_INT 81
 811: PUSH
 812: LD_INT 1
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PPUSH
 819: CALL_OW 69
 823: PPUSH
 824: LD_VAR 0 6
 828: PPUSH
 829: CALL_OW 74
 833: PPUSH
 834: CALL_OW 115
// end ; end ; end ;
 838: GO 284
 840: POP
 841: POP
// end ; if sci then
 842: LD_VAR 0 10
 846: IFFALSE 1141
// begin if not sol and not mech and retreatFormula then
 848: LD_VAR 0 9
 852: NOT
 853: PUSH
 854: LD_VAR 0 11
 858: NOT
 859: AND
 860: PUSH
 861: LD_VAR 0 3
 865: AND
 866: IFFALSE 938
// begin for i in sci do
 868: LD_ADDR_VAR 0 6
 872: PUSH
 873: LD_VAR 0 10
 877: PUSH
 878: FOR_IN
 879: IFFALSE 934
// begin ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
 881: LD_VAR 0 6
 885: PPUSH
 886: LD_VAR 0 3
 890: PUSH
 891: LD_INT 1
 893: ARRAY
 894: PUSH
 895: LD_INT 1
 897: ARRAY
 898: PPUSH
 899: LD_VAR 0 3
 903: PUSH
 904: LD_INT 1
 906: ARRAY
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: CALL_OW 111
// attackers := attackers diff i ;
 916: LD_ADDR_VAR 0 1
 920: PUSH
 921: LD_VAR 0 1
 925: PUSH
 926: LD_VAR 0 6
 930: DIFF
 931: ST_TO_ADDR
// end ;
 932: GO 878
 934: POP
 935: POP
// end else
 936: GO 1141
// for i in sci do
 938: LD_ADDR_VAR 0 6
 942: PUSH
 943: LD_VAR 0 10
 947: PUSH
 948: FOR_IN
 949: IFFALSE 1139
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 951: LD_VAR 0 6
 955: PPUSH
 956: LD_VAR 0 2
 960: PUSH
 961: LD_INT 2
 963: ARRAY
 964: PUSH
 965: LD_INT 1
 967: ARRAY
 968: PPUSH
 969: LD_VAR 0 2
 973: PUSH
 974: LD_INT 2
 976: ARRAY
 977: PUSH
 978: LD_INT 2
 980: ARRAY
 981: PPUSH
 982: CALL_OW 297
 986: PUSH
 987: LD_INT 10
 989: GREATER
 990: IFFALSE 1029
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
 992: LD_VAR 0 6
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PPUSH
1010: LD_VAR 0 2
1014: PUSH
1015: LD_INT 2
1017: ARRAY
1018: PUSH
1019: LD_INT 2
1021: ARRAY
1022: PPUSH
1023: CALL_OW 111
1027: GO 1137
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
1029: LD_VAR 0 9
1033: PPUSH
1034: LD_INT 3
1036: PUSH
1037: LD_INT 24
1039: PUSH
1040: LD_INT 1000
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: PUSH
1051: LD_INT 91
1053: PUSH
1054: LD_VAR 0 6
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PPUSH
1071: CALL_OW 72
1075: IFFALSE 1137
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
1077: LD_VAR 0 6
1081: PPUSH
1082: LD_VAR 0 9
1086: PPUSH
1087: LD_INT 3
1089: PUSH
1090: LD_INT 24
1092: PUSH
1093: LD_INT 1000
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: LD_INT 91
1106: PUSH
1107: LD_VAR 0 6
1111: PUSH
1112: LD_INT 10
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PPUSH
1124: CALL_OW 72
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 128
1137: GO 948
1139: POP
1140: POP
// end ; if mech then
1141: LD_VAR 0 11
1145: IFFALSE 1793
// begin for i in mech do
1147: LD_ADDR_VAR 0 6
1151: PUSH
1152: LD_VAR 0 11
1156: PUSH
1157: FOR_IN
1158: IFFALSE 1791
// begin tag := GetTag ( i ) ;
1160: LD_ADDR_VAR 0 8
1164: PUSH
1165: LD_VAR 0 6
1169: PPUSH
1170: CALL_OW 110
1174: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
1175: LD_ADDR_VAR 0 13
1179: PUSH
1180: LD_VAR 0 6
1184: PPUSH
1185: CALL_OW 310
1189: ST_TO_ADDR
// if not tag then
1190: LD_VAR 0 8
1194: NOT
1195: IFFALSE 1497
// begin if veh then
1197: LD_VAR 0 13
1201: IFFALSE 1335
// begin if GetLives ( veh ) = 1000 then
1203: LD_VAR 0 13
1207: PPUSH
1208: CALL_OW 256
1212: PUSH
1213: LD_INT 1000
1215: EQUAL
1216: IFFALSE 1232
// SetTag ( i , 1 ) else
1218: LD_VAR 0 6
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: CALL_OW 109
1230: GO 1333
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
1232: LD_VAR 0 13
1236: PPUSH
1237: LD_VAR 0 2
1241: PUSH
1242: LD_INT 3
1244: ARRAY
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_VAR 0 2
1254: PUSH
1255: LD_INT 3
1257: ARRAY
1258: PUSH
1259: LD_INT 2
1261: ARRAY
1262: PPUSH
1263: CALL_OW 297
1267: PUSH
1268: LD_INT 7
1270: GREATER
1271: IFFALSE 1310
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
1273: LD_VAR 0 13
1277: PPUSH
1278: LD_VAR 0 2
1282: PUSH
1283: LD_INT 3
1285: ARRAY
1286: PUSH
1287: LD_INT 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 2
1295: PUSH
1296: LD_INT 3
1298: ARRAY
1299: PUSH
1300: LD_INT 2
1302: ARRAY
1303: PPUSH
1304: CALL_OW 111
1308: GO 1333
// begin ComExitVehicle ( i ) ;
1310: LD_VAR 0 6
1314: PPUSH
1315: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
1319: LD_VAR 0 6
1323: PPUSH
1324: LD_VAR 0 13
1328: PPUSH
1329: CALL_OW 189
// end ; end else
1333: GO 1495
// if GetLives ( i ) < 400 then
1335: LD_VAR 0 6
1339: PPUSH
1340: CALL_OW 256
1344: PUSH
1345: LD_INT 400
1347: LESS
1348: IFFALSE 1403
// begin attackers := attackers diff i ;
1350: LD_ADDR_VAR 0 1
1354: PUSH
1355: LD_VAR 0 1
1359: PUSH
1360: LD_VAR 0 6
1364: DIFF
1365: ST_TO_ADDR
// ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 3
1375: PUSH
1376: LD_INT 1
1378: ARRAY
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_VAR 0 3
1388: PUSH
1389: LD_INT 1
1391: ARRAY
1392: PUSH
1393: LD_INT 2
1395: ARRAY
1396: PPUSH
1397: CALL_OW 111
// end else
1401: GO 1495
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
1403: LD_VAR 0 12
1407: PPUSH
1408: LD_INT 58
1410: PUSH
1411: EMPTY
1412: LIST
1413: PUSH
1414: LD_INT 24
1416: PUSH
1417: LD_INT 1000
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PPUSH
1428: CALL_OW 72
1432: PUSH
1433: LD_VAR 0 6
1437: PPUSH
1438: CALL_OW 314
1442: NOT
1443: AND
1444: IFFALSE 1495
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
1446: LD_VAR 0 6
1450: PPUSH
1451: LD_VAR 0 12
1455: PPUSH
1456: LD_INT 58
1458: PUSH
1459: EMPTY
1460: LIST
1461: PUSH
1462: LD_INT 24
1464: PUSH
1465: LD_INT 250
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PPUSH
1476: CALL_OW 72
1480: PPUSH
1481: LD_VAR 0 6
1485: PPUSH
1486: CALL_OW 74
1490: PPUSH
1491: CALL_OW 120
// end else
1495: GO 1789
// begin if veh and GetLives ( veh ) < 720 then
1497: LD_VAR 0 13
1501: PUSH
1502: LD_VAR 0 13
1506: PPUSH
1507: CALL_OW 256
1511: PUSH
1512: LD_INT 720
1514: LESS
1515: AND
1516: IFFALSE 1567
// begin SetTag ( i , 0 ) ;
1518: LD_VAR 0 6
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
1530: LD_VAR 0 13
1534: PPUSH
1535: LD_VAR 0 2
1539: PUSH
1540: LD_INT 3
1542: ARRAY
1543: PUSH
1544: LD_INT 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 3
1555: ARRAY
1556: PUSH
1557: LD_INT 2
1559: ARRAY
1560: PPUSH
1561: CALL_OW 111
// end else
1565: GO 1789
// if veh then
1567: LD_VAR 0 13
1571: IFFALSE 1789
// if tag <= attackFormula [ 4 ] then
1573: LD_VAR 0 8
1577: PUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 4
1585: ARRAY
1586: LESSEQUAL
1587: IFFALSE 1748
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
1589: LD_VAR 0 13
1593: PPUSH
1594: LD_VAR 0 2
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PUSH
1603: LD_VAR 0 8
1607: ARRAY
1608: PUSH
1609: LD_INT 1
1611: ARRAY
1612: PPUSH
1613: LD_VAR 0 2
1617: PUSH
1618: LD_INT 4
1620: ARRAY
1621: PUSH
1622: LD_VAR 0 8
1626: ARRAY
1627: PUSH
1628: LD_INT 2
1630: ARRAY
1631: PPUSH
1632: CALL_OW 297
1636: PUSH
1637: LD_INT 6
1639: GREATER
1640: IFFALSE 1691
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
1642: LD_VAR 0 13
1646: PPUSH
1647: LD_VAR 0 2
1651: PUSH
1652: LD_INT 4
1654: ARRAY
1655: PUSH
1656: LD_VAR 0 8
1660: ARRAY
1661: PUSH
1662: LD_INT 1
1664: ARRAY
1665: PPUSH
1666: LD_VAR 0 2
1670: PUSH
1671: LD_INT 4
1673: ARRAY
1674: PUSH
1675: LD_VAR 0 8
1679: ARRAY
1680: PUSH
1681: LD_INT 2
1683: ARRAY
1684: PPUSH
1685: CALL_OW 114
1689: GO 1746
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
1691: LD_INT 81
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 91
1703: PUSH
1704: LD_VAR 0 13
1708: PUSH
1709: LD_INT 10
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PPUSH
1721: CALL_OW 69
1725: NOT
1726: IFFALSE 1746
// SetTag ( i , tag + 1 ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_VAR 0 8
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: PPUSH
1742: CALL_OW 109
// end else
1746: GO 1789
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1748: LD_VAR 0 13
1752: PPUSH
1753: LD_INT 81
1755: PUSH
1756: LD_VAR 0 6
1760: PPUSH
1761: CALL_OW 255
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PPUSH
1770: CALL_OW 69
1774: PPUSH
1775: LD_VAR 0 6
1779: PPUSH
1780: CALL_OW 74
1784: PPUSH
1785: CALL_OW 115
// end ; end ;
1789: GO 1157
1791: POP
1792: POP
// end ; until not UnitFilter ( attackers , [ f_placed ] ) ;
1793: LD_VAR 0 1
1797: PPUSH
1798: LD_INT 52
1800: PUSH
1801: EMPTY
1802: LIST
1803: PPUSH
1804: CALL_OW 72
1808: NOT
1809: IFFALSE 161
// end ; end_of_file
1811: LD_VAR 0 5
1815: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
1816: LD_INT 0
1818: PPUSH
// ar_miner := 81 ;
1819: LD_ADDR_EXP 8
1823: PUSH
1824: LD_INT 81
1826: ST_TO_ADDR
// ar_crane := 88 ;
1827: LD_ADDR_EXP 7
1831: PUSH
1832: LD_INT 88
1834: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1835: LD_ADDR_EXP 2
1839: PUSH
1840: LD_INT 89
1842: ST_TO_ADDR
// us_hack := 99 ;
1843: LD_ADDR_EXP 3
1847: PUSH
1848: LD_INT 99
1850: ST_TO_ADDR
// us_artillery := 97 ;
1851: LD_ADDR_EXP 4
1855: PUSH
1856: LD_INT 97
1858: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1859: LD_ADDR_EXP 5
1863: PUSH
1864: LD_INT 91
1866: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
1867: LD_ADDR_EXP 6
1871: PUSH
1872: LD_INT 92
1874: ST_TO_ADDR
// ru_radar := 98 ;
1875: LD_ADDR_EXP 1
1879: PUSH
1880: LD_INT 98
1882: ST_TO_ADDR
// tech_Artillery := 80 ;
1883: LD_ADDR_EXP 9
1887: PUSH
1888: LD_INT 80
1890: ST_TO_ADDR
// tech_RadMat := 81 ;
1891: LD_ADDR_EXP 10
1895: PUSH
1896: LD_INT 81
1898: ST_TO_ADDR
// tech_BasicTools := 82 ;
1899: LD_ADDR_EXP 11
1903: PUSH
1904: LD_INT 82
1906: ST_TO_ADDR
// tech_Cargo := 83 ;
1907: LD_ADDR_EXP 12
1911: PUSH
1912: LD_INT 83
1914: ST_TO_ADDR
// tech_Track := 84 ;
1915: LD_ADDR_EXP 13
1919: PUSH
1920: LD_INT 84
1922: ST_TO_ADDR
// tech_Crane := 85 ;
1923: LD_ADDR_EXP 14
1927: PUSH
1928: LD_INT 85
1930: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1931: LD_ADDR_EXP 15
1935: PUSH
1936: LD_INT 86
1938: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1939: LD_ADDR_EXP 16
1943: PUSH
1944: LD_INT 87
1946: ST_TO_ADDR
// end ;
1947: LD_VAR 0 1
1951: RET
// every 1 do
1952: GO 1954
1954: DISABLE
// InitGlobalVariables ; end_of_file
1955: CALL 1816 0 0
1959: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
1960: LD_VAR 0 2
1964: PUSH
1965: LD_INT 100
1967: EQUAL
1968: IFFALSE 2917
// begin if not StreamModeActive then
1970: LD_EXP 17
1974: NOT
1975: IFFALSE 1985
// StreamModeActive := true ;
1977: LD_ADDR_EXP 17
1981: PUSH
1982: LD_INT 1
1984: ST_TO_ADDR
// if p3 = 0 then
1985: LD_VAR 0 3
1989: PUSH
1990: LD_INT 0
1992: EQUAL
1993: IFFALSE 1999
// InitStreamMode ;
1995: CALL 3075 0 0
// if p3 = 1 then
1999: LD_VAR 0 3
2003: PUSH
2004: LD_INT 1
2006: EQUAL
2007: IFFALSE 2017
// sRocket := true ;
2009: LD_ADDR_EXP 22
2013: PUSH
2014: LD_INT 1
2016: ST_TO_ADDR
// if p3 = 2 then
2017: LD_VAR 0 3
2021: PUSH
2022: LD_INT 2
2024: EQUAL
2025: IFFALSE 2035
// sSpeed := true ;
2027: LD_ADDR_EXP 21
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// if p3 = 3 then
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 3
2042: EQUAL
2043: IFFALSE 2053
// sEngine := true ;
2045: LD_ADDR_EXP 23
2049: PUSH
2050: LD_INT 1
2052: ST_TO_ADDR
// if p3 = 4 then
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 4
2060: EQUAL
2061: IFFALSE 2071
// sSpec := true ;
2063: LD_ADDR_EXP 20
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// if p3 = 5 then
2071: LD_VAR 0 3
2075: PUSH
2076: LD_INT 5
2078: EQUAL
2079: IFFALSE 2089
// sLevel := true ;
2081: LD_ADDR_EXP 24
2085: PUSH
2086: LD_INT 1
2088: ST_TO_ADDR
// if p3 = 6 then
2089: LD_VAR 0 3
2093: PUSH
2094: LD_INT 6
2096: EQUAL
2097: IFFALSE 2107
// sArmoury := true ;
2099: LD_ADDR_EXP 25
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// if p3 = 7 then
2107: LD_VAR 0 3
2111: PUSH
2112: LD_INT 7
2114: EQUAL
2115: IFFALSE 2125
// sRadar := true ;
2117: LD_ADDR_EXP 26
2121: PUSH
2122: LD_INT 1
2124: ST_TO_ADDR
// if p3 = 8 then
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 8
2132: EQUAL
2133: IFFALSE 2143
// sBunker := true ;
2135: LD_ADDR_EXP 27
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// if p3 = 9 then
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 9
2150: EQUAL
2151: IFFALSE 2161
// sHack := true ;
2153: LD_ADDR_EXP 28
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// if p3 = 10 then
2161: LD_VAR 0 3
2165: PUSH
2166: LD_INT 10
2168: EQUAL
2169: IFFALSE 2179
// sFire := true ;
2171: LD_ADDR_EXP 29
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// if p3 = 11 then
2179: LD_VAR 0 3
2183: PUSH
2184: LD_INT 11
2186: EQUAL
2187: IFFALSE 2197
// sRefresh := true ;
2189: LD_ADDR_EXP 30
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// if p3 = 12 then
2197: LD_VAR 0 3
2201: PUSH
2202: LD_INT 12
2204: EQUAL
2205: IFFALSE 2215
// sExp := true ;
2207: LD_ADDR_EXP 31
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// if p3 = 13 then
2215: LD_VAR 0 3
2219: PUSH
2220: LD_INT 13
2222: EQUAL
2223: IFFALSE 2233
// sDepot := true ;
2225: LD_ADDR_EXP 32
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// if p3 = 14 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 14
2240: EQUAL
2241: IFFALSE 2251
// sFlag := true ;
2243: LD_ADDR_EXP 33
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// if p3 = 15 then
2251: LD_VAR 0 3
2255: PUSH
2256: LD_INT 15
2258: EQUAL
2259: IFFALSE 2269
// sKamikadze := true ;
2261: LD_ADDR_EXP 41
2265: PUSH
2266: LD_INT 1
2268: ST_TO_ADDR
// if p3 = 16 then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_INT 16
2276: EQUAL
2277: IFFALSE 2287
// sTroll := true ;
2279: LD_ADDR_EXP 42
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// if p3 = 17 then
2287: LD_VAR 0 3
2291: PUSH
2292: LD_INT 17
2294: EQUAL
2295: IFFALSE 2305
// sSlow := true ;
2297: LD_ADDR_EXP 43
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// if p3 = 18 then
2305: LD_VAR 0 3
2309: PUSH
2310: LD_INT 18
2312: EQUAL
2313: IFFALSE 2323
// sLack := true ;
2315: LD_ADDR_EXP 44
2319: PUSH
2320: LD_INT 1
2322: ST_TO_ADDR
// if p3 = 19 then
2323: LD_VAR 0 3
2327: PUSH
2328: LD_INT 19
2330: EQUAL
2331: IFFALSE 2341
// sTank := true ;
2333: LD_ADDR_EXP 46
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// if p3 = 20 then
2341: LD_VAR 0 3
2345: PUSH
2346: LD_INT 20
2348: EQUAL
2349: IFFALSE 2359
// sRemote := true ;
2351: LD_ADDR_EXP 47
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// if p3 = 21 then
2359: LD_VAR 0 3
2363: PUSH
2364: LD_INT 21
2366: EQUAL
2367: IFFALSE 2377
// sPowell := true ;
2369: LD_ADDR_EXP 48
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// if p3 = 22 then
2377: LD_VAR 0 3
2381: PUSH
2382: LD_INT 22
2384: EQUAL
2385: IFFALSE 2395
// sTeleport := true ;
2387: LD_ADDR_EXP 51
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// if p3 = 23 then
2395: LD_VAR 0 3
2399: PUSH
2400: LD_INT 23
2402: EQUAL
2403: IFFALSE 2413
// sOilTower := true ;
2405: LD_ADDR_EXP 53
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// if p3 = 24 then
2413: LD_VAR 0 3
2417: PUSH
2418: LD_INT 24
2420: EQUAL
2421: IFFALSE 2431
// sShovel := true ;
2423: LD_ADDR_EXP 54
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// if p3 = 25 then
2431: LD_VAR 0 3
2435: PUSH
2436: LD_INT 25
2438: EQUAL
2439: IFFALSE 2449
// sSheik := true ;
2441: LD_ADDR_EXP 55
2445: PUSH
2446: LD_INT 1
2448: ST_TO_ADDR
// if p3 = 26 then
2449: LD_VAR 0 3
2453: PUSH
2454: LD_INT 26
2456: EQUAL
2457: IFFALSE 2467
// sEarthquake := true ;
2459: LD_ADDR_EXP 57
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// if p3 = 27 then
2467: LD_VAR 0 3
2471: PUSH
2472: LD_INT 27
2474: EQUAL
2475: IFFALSE 2485
// sAI := true ;
2477: LD_ADDR_EXP 58
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// if p3 = 28 then
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 28
2492: EQUAL
2493: IFFALSE 2503
// sCargo := true ;
2495: LD_ADDR_EXP 61
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// if p3 = 29 then
2503: LD_VAR 0 3
2507: PUSH
2508: LD_INT 29
2510: EQUAL
2511: IFFALSE 2521
// sDLaser := true ;
2513: LD_ADDR_EXP 62
2517: PUSH
2518: LD_INT 1
2520: ST_TO_ADDR
// if p3 = 30 then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_INT 30
2528: EQUAL
2529: IFFALSE 2539
// sExchange := true ;
2531: LD_ADDR_EXP 63
2535: PUSH
2536: LD_INT 1
2538: ST_TO_ADDR
// if p3 = 31 then
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 31
2546: EQUAL
2547: IFFALSE 2557
// sFac := true ;
2549: LD_ADDR_EXP 64
2553: PUSH
2554: LD_INT 1
2556: ST_TO_ADDR
// if p3 = 32 then
2557: LD_VAR 0 3
2561: PUSH
2562: LD_INT 32
2564: EQUAL
2565: IFFALSE 2575
// sPower := true ;
2567: LD_ADDR_EXP 65
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// if p3 = 33 then
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 33
2582: EQUAL
2583: IFFALSE 2593
// sRandom := true ;
2585: LD_ADDR_EXP 66
2589: PUSH
2590: LD_INT 1
2592: ST_TO_ADDR
// if p3 = 34 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 34
2600: EQUAL
2601: IFFALSE 2611
// sShield := true ;
2603: LD_ADDR_EXP 67
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// if p3 = 35 then
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 35
2618: EQUAL
2619: IFFALSE 2629
// sTime := true ;
2621: LD_ADDR_EXP 68
2625: PUSH
2626: LD_INT 1
2628: ST_TO_ADDR
// if p3 = 36 then
2629: LD_VAR 0 3
2633: PUSH
2634: LD_INT 36
2636: EQUAL
2637: IFFALSE 2647
// sTools := true ;
2639: LD_ADDR_EXP 69
2643: PUSH
2644: LD_INT 1
2646: ST_TO_ADDR
// if p3 = 101 then
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 101
2654: EQUAL
2655: IFFALSE 2665
// sSold := true ;
2657: LD_ADDR_EXP 34
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// if p3 = 102 then
2665: LD_VAR 0 3
2669: PUSH
2670: LD_INT 102
2672: EQUAL
2673: IFFALSE 2683
// sDiff := true ;
2675: LD_ADDR_EXP 35
2679: PUSH
2680: LD_INT 1
2682: ST_TO_ADDR
// if p3 = 103 then
2683: LD_VAR 0 3
2687: PUSH
2688: LD_INT 103
2690: EQUAL
2691: IFFALSE 2701
// sFog := true ;
2693: LD_ADDR_EXP 38
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// if p3 = 104 then
2701: LD_VAR 0 3
2705: PUSH
2706: LD_INT 104
2708: EQUAL
2709: IFFALSE 2719
// sReset := true ;
2711: LD_ADDR_EXP 39
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// if p3 = 105 then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 105
2726: EQUAL
2727: IFFALSE 2737
// sSun := true ;
2729: LD_ADDR_EXP 40
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// if p3 = 106 then
2737: LD_VAR 0 3
2741: PUSH
2742: LD_INT 106
2744: EQUAL
2745: IFFALSE 2755
// sTiger := true ;
2747: LD_ADDR_EXP 36
2751: PUSH
2752: LD_INT 1
2754: ST_TO_ADDR
// if p3 = 107 then
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 107
2762: EQUAL
2763: IFFALSE 2773
// sBomb := true ;
2765: LD_ADDR_EXP 37
2769: PUSH
2770: LD_INT 1
2772: ST_TO_ADDR
// if p3 = 108 then
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 108
2780: EQUAL
2781: IFFALSE 2791
// sWound := true ;
2783: LD_ADDR_EXP 45
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// if p3 = 109 then
2791: LD_VAR 0 3
2795: PUSH
2796: LD_INT 109
2798: EQUAL
2799: IFFALSE 2809
// sBetray := true ;
2801: LD_ADDR_EXP 49
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// if p3 = 110 then
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 110
2816: EQUAL
2817: IFFALSE 2827
// sContamin := true ;
2819: LD_ADDR_EXP 50
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// if p3 = 111 then
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 111
2834: EQUAL
2835: IFFALSE 2845
// sOil := true ;
2837: LD_ADDR_EXP 52
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// if p3 = 112 then
2845: LD_VAR 0 3
2849: PUSH
2850: LD_INT 112
2852: EQUAL
2853: IFFALSE 2863
// sStu := true ;
2855: LD_ADDR_EXP 56
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// if p3 = 113 then
2863: LD_VAR 0 3
2867: PUSH
2868: LD_INT 113
2870: EQUAL
2871: IFFALSE 2881
// sBazooka := true ;
2873: LD_ADDR_EXP 59
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// if p3 = 114 then
2881: LD_VAR 0 3
2885: PUSH
2886: LD_INT 114
2888: EQUAL
2889: IFFALSE 2899
// sMortar := true ;
2891: LD_ADDR_EXP 60
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// if p3 = 115 then
2899: LD_VAR 0 3
2903: PUSH
2904: LD_INT 115
2906: EQUAL
2907: IFFALSE 2917
// sRanger := true ;
2909: LD_ADDR_EXP 70
2913: PUSH
2914: LD_INT 1
2916: ST_TO_ADDR
// end ; if p2 = 101 then
2917: LD_VAR 0 2
2921: PUSH
2922: LD_INT 101
2924: EQUAL
2925: IFFALSE 3053
// begin case p3 of 1 :
2927: LD_VAR 0 3
2931: PUSH
2932: LD_INT 1
2934: DOUBLE
2935: EQUAL
2936: IFTRUE 2940
2938: GO 2947
2940: POP
// hHackUnlimitedResources ; 2 :
2941: CALL 14088 0 0
2945: GO 3053
2947: LD_INT 2
2949: DOUBLE
2950: EQUAL
2951: IFTRUE 2955
2953: GO 2962
2955: POP
// hHackSetLevel10 ; 3 :
2956: CALL 14221 0 0
2960: GO 3053
2962: LD_INT 3
2964: DOUBLE
2965: EQUAL
2966: IFTRUE 2970
2968: GO 2977
2970: POP
// hHackSetLevel10YourUnits ; 4 :
2971: CALL 14306 0 0
2975: GO 3053
2977: LD_INT 4
2979: DOUBLE
2980: EQUAL
2981: IFTRUE 2985
2983: GO 2992
2985: POP
// hHackInvincible ; 5 :
2986: CALL 14754 0 0
2990: GO 3053
2992: LD_INT 5
2994: DOUBLE
2995: EQUAL
2996: IFTRUE 3000
2998: GO 3007
3000: POP
// hHackInvisible ; 6 :
3001: CALL 14865 0 0
3005: GO 3053
3007: LD_INT 6
3009: DOUBLE
3010: EQUAL
3011: IFTRUE 3015
3013: GO 3022
3015: POP
// hHackChangeYourSide ; 7 :
3016: CALL 14922 0 0
3020: GO 3053
3022: LD_INT 7
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3037
3030: POP
// hHackChangeUnitSide ; 8 :
3031: CALL 14964 0 0
3035: GO 3053
3037: LD_INT 8
3039: DOUBLE
3040: EQUAL
3041: IFTRUE 3045
3043: GO 3052
3045: POP
// hHackFog ; end ;
3046: CALL 15065 0 0
3050: GO 3053
3052: POP
// end ; end ;
3053: PPOPN 6
3055: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3056: GO 3058
3058: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3059: LD_STRING initStreamRollete();
3061: PPUSH
3062: CALL_OW 559
// InitStreamMode ;
3066: CALL 3075 0 0
// DefineStreamItems ( ) ;
3070: CALL 3515 0 0
// end ;
3074: END
// function InitStreamMode ; begin
3075: LD_INT 0
3077: PPUSH
// streamModeActive := false ;
3078: LD_ADDR_EXP 17
3082: PUSH
3083: LD_INT 0
3085: ST_TO_ADDR
// normalCounter := 36 ;
3086: LD_ADDR_EXP 18
3090: PUSH
3091: LD_INT 36
3093: ST_TO_ADDR
// hardcoreCounter := 16 ;
3094: LD_ADDR_EXP 19
3098: PUSH
3099: LD_INT 16
3101: ST_TO_ADDR
// sRocket := false ;
3102: LD_ADDR_EXP 22
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// sSpeed := false ;
3110: LD_ADDR_EXP 21
3114: PUSH
3115: LD_INT 0
3117: ST_TO_ADDR
// sEngine := false ;
3118: LD_ADDR_EXP 23
3122: PUSH
3123: LD_INT 0
3125: ST_TO_ADDR
// sSpec := false ;
3126: LD_ADDR_EXP 20
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// sLevel := false ;
3134: LD_ADDR_EXP 24
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// sArmoury := false ;
3142: LD_ADDR_EXP 25
3146: PUSH
3147: LD_INT 0
3149: ST_TO_ADDR
// sRadar := false ;
3150: LD_ADDR_EXP 26
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// sBunker := false ;
3158: LD_ADDR_EXP 27
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// sHack := false ;
3166: LD_ADDR_EXP 28
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// sFire := false ;
3174: LD_ADDR_EXP 29
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// sRefresh := false ;
3182: LD_ADDR_EXP 30
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// sExp := false ;
3190: LD_ADDR_EXP 31
3194: PUSH
3195: LD_INT 0
3197: ST_TO_ADDR
// sDepot := false ;
3198: LD_ADDR_EXP 32
3202: PUSH
3203: LD_INT 0
3205: ST_TO_ADDR
// sFlag := false ;
3206: LD_ADDR_EXP 33
3210: PUSH
3211: LD_INT 0
3213: ST_TO_ADDR
// sKamikadze := false ;
3214: LD_ADDR_EXP 41
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// sTroll := false ;
3222: LD_ADDR_EXP 42
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// sSlow := false ;
3230: LD_ADDR_EXP 43
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// sLack := false ;
3238: LD_ADDR_EXP 44
3242: PUSH
3243: LD_INT 0
3245: ST_TO_ADDR
// sTank := false ;
3246: LD_ADDR_EXP 46
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// sRemote := false ;
3254: LD_ADDR_EXP 47
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// sPowell := false ;
3262: LD_ADDR_EXP 48
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// sTeleport := false ;
3270: LD_ADDR_EXP 51
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// sOilTower := false ;
3278: LD_ADDR_EXP 53
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sShovel := false ;
3286: LD_ADDR_EXP 54
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sSheik := false ;
3294: LD_ADDR_EXP 55
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sEarthquake := false ;
3302: LD_ADDR_EXP 57
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sAI := false ;
3310: LD_ADDR_EXP 58
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sCargo := false ;
3318: LD_ADDR_EXP 61
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sDLaser := false ;
3326: LD_ADDR_EXP 62
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sExchange := false ;
3334: LD_ADDR_EXP 63
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sFac := false ;
3342: LD_ADDR_EXP 64
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sPower := false ;
3350: LD_ADDR_EXP 65
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sRandom := false ;
3358: LD_ADDR_EXP 66
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sShield := false ;
3366: LD_ADDR_EXP 67
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sTime := false ;
3374: LD_ADDR_EXP 68
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// sTools := false ;
3382: LD_ADDR_EXP 69
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// sSold := false ;
3390: LD_ADDR_EXP 34
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// sDiff := false ;
3398: LD_ADDR_EXP 35
3402: PUSH
3403: LD_INT 0
3405: ST_TO_ADDR
// sFog := false ;
3406: LD_ADDR_EXP 38
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// sReset := false ;
3414: LD_ADDR_EXP 39
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// sSun := false ;
3422: LD_ADDR_EXP 40
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// sTiger := false ;
3430: LD_ADDR_EXP 36
3434: PUSH
3435: LD_INT 0
3437: ST_TO_ADDR
// sBomb := false ;
3438: LD_ADDR_EXP 37
3442: PUSH
3443: LD_INT 0
3445: ST_TO_ADDR
// sWound := false ;
3446: LD_ADDR_EXP 45
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// sBetray := false ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
// sContamin := false ;
3462: LD_ADDR_EXP 50
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// sOil := false ;
3470: LD_ADDR_EXP 52
3474: PUSH
3475: LD_INT 0
3477: ST_TO_ADDR
// sStu := false ;
3478: LD_ADDR_EXP 56
3482: PUSH
3483: LD_INT 0
3485: ST_TO_ADDR
// sBazooka := false ;
3486: LD_ADDR_EXP 59
3490: PUSH
3491: LD_INT 0
3493: ST_TO_ADDR
// sMortar := false ;
3494: LD_ADDR_EXP 60
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// sRanger := false ;
3502: LD_ADDR_EXP 70
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// end ;
3510: LD_VAR 0 1
3514: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3515: LD_INT 0
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// result := [ ] ;
3522: LD_ADDR_VAR 0 1
3526: PUSH
3527: EMPTY
3528: ST_TO_ADDR
// if campaign_id = 1 then
3529: LD_OWVAR 69
3533: PUSH
3534: LD_INT 1
3536: EQUAL
3537: IFFALSE 6475
// begin case mission_number of 1 :
3539: LD_OWVAR 70
3543: PUSH
3544: LD_INT 1
3546: DOUBLE
3547: EQUAL
3548: IFTRUE 3552
3550: GO 3616
3552: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3553: LD_ADDR_VAR 0 1
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: LD_INT 4
3563: PUSH
3564: LD_INT 11
3566: PUSH
3567: LD_INT 12
3569: PUSH
3570: LD_INT 15
3572: PUSH
3573: LD_INT 16
3575: PUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 23
3581: PUSH
3582: LD_INT 26
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 101
3598: PUSH
3599: LD_INT 102
3601: PUSH
3602: LD_INT 106
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: ST_TO_ADDR
3614: GO 6473
3616: LD_INT 2
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3696
3624: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3625: LD_ADDR_VAR 0 1
3629: PUSH
3630: LD_INT 2
3632: PUSH
3633: LD_INT 4
3635: PUSH
3636: LD_INT 11
3638: PUSH
3639: LD_INT 12
3641: PUSH
3642: LD_INT 15
3644: PUSH
3645: LD_INT 16
3647: PUSH
3648: LD_INT 22
3650: PUSH
3651: LD_INT 23
3653: PUSH
3654: LD_INT 26
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 101
3670: PUSH
3671: LD_INT 102
3673: PUSH
3674: LD_INT 105
3676: PUSH
3677: LD_INT 106
3679: PUSH
3680: LD_INT 108
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: ST_TO_ADDR
3694: GO 6473
3696: LD_INT 3
3698: DOUBLE
3699: EQUAL
3700: IFTRUE 3704
3702: GO 3780
3704: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3705: LD_ADDR_VAR 0 1
3709: PUSH
3710: LD_INT 2
3712: PUSH
3713: LD_INT 4
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: LD_INT 11
3721: PUSH
3722: LD_INT 12
3724: PUSH
3725: LD_INT 15
3727: PUSH
3728: LD_INT 16
3730: PUSH
3731: LD_INT 22
3733: PUSH
3734: LD_INT 26
3736: PUSH
3737: LD_INT 36
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 101
3754: PUSH
3755: LD_INT 102
3757: PUSH
3758: LD_INT 105
3760: PUSH
3761: LD_INT 106
3763: PUSH
3764: LD_INT 108
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: ST_TO_ADDR
3778: GO 6473
3780: LD_INT 4
3782: DOUBLE
3783: EQUAL
3784: IFTRUE 3788
3786: GO 3872
3788: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3789: LD_ADDR_VAR 0 1
3793: PUSH
3794: LD_INT 2
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: LD_INT 5
3802: PUSH
3803: LD_INT 8
3805: PUSH
3806: LD_INT 11
3808: PUSH
3809: LD_INT 12
3811: PUSH
3812: LD_INT 15
3814: PUSH
3815: LD_INT 16
3817: PUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 23
3823: PUSH
3824: LD_INT 26
3826: PUSH
3827: LD_INT 36
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 101
3846: PUSH
3847: LD_INT 102
3849: PUSH
3850: LD_INT 105
3852: PUSH
3853: LD_INT 106
3855: PUSH
3856: LD_INT 108
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: ST_TO_ADDR
3870: GO 6473
3872: LD_INT 5
3874: DOUBLE
3875: EQUAL
3876: IFTRUE 3880
3878: GO 3980
3880: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3881: LD_ADDR_VAR 0 1
3885: PUSH
3886: LD_INT 2
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 5
3894: PUSH
3895: LD_INT 6
3897: PUSH
3898: LD_INT 8
3900: PUSH
3901: LD_INT 11
3903: PUSH
3904: LD_INT 12
3906: PUSH
3907: LD_INT 15
3909: PUSH
3910: LD_INT 16
3912: PUSH
3913: LD_INT 22
3915: PUSH
3916: LD_INT 23
3918: PUSH
3919: LD_INT 25
3921: PUSH
3922: LD_INT 26
3924: PUSH
3925: LD_INT 36
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 101
3946: PUSH
3947: LD_INT 102
3949: PUSH
3950: LD_INT 105
3952: PUSH
3953: LD_INT 106
3955: PUSH
3956: LD_INT 108
3958: PUSH
3959: LD_INT 109
3961: PUSH
3962: LD_INT 112
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: ST_TO_ADDR
3978: GO 6473
3980: LD_INT 6
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 4108
3988: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: LD_INT 5
4002: PUSH
4003: LD_INT 6
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: LD_INT 11
4011: PUSH
4012: LD_INT 12
4014: PUSH
4015: LD_INT 15
4017: PUSH
4018: LD_INT 16
4020: PUSH
4021: LD_INT 20
4023: PUSH
4024: LD_INT 21
4026: PUSH
4027: LD_INT 22
4029: PUSH
4030: LD_INT 23
4032: PUSH
4033: LD_INT 25
4035: PUSH
4036: LD_INT 26
4038: PUSH
4039: LD_INT 30
4041: PUSH
4042: LD_INT 31
4044: PUSH
4045: LD_INT 32
4047: PUSH
4048: LD_INT 36
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 101
4074: PUSH
4075: LD_INT 102
4077: PUSH
4078: LD_INT 105
4080: PUSH
4081: LD_INT 106
4083: PUSH
4084: LD_INT 108
4086: PUSH
4087: LD_INT 109
4089: PUSH
4090: LD_INT 112
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: ST_TO_ADDR
4106: GO 6473
4108: LD_INT 7
4110: DOUBLE
4111: EQUAL
4112: IFTRUE 4116
4114: GO 4216
4116: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4117: LD_ADDR_VAR 0 1
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 7
4133: PUSH
4134: LD_INT 11
4136: PUSH
4137: LD_INT 12
4139: PUSH
4140: LD_INT 15
4142: PUSH
4143: LD_INT 16
4145: PUSH
4146: LD_INT 20
4148: PUSH
4149: LD_INT 21
4151: PUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 23
4157: PUSH
4158: LD_INT 25
4160: PUSH
4161: LD_INT 26
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: PUSH
4180: LD_INT 101
4182: PUSH
4183: LD_INT 102
4185: PUSH
4186: LD_INT 103
4188: PUSH
4189: LD_INT 105
4191: PUSH
4192: LD_INT 106
4194: PUSH
4195: LD_INT 108
4197: PUSH
4198: LD_INT 112
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: ST_TO_ADDR
4214: GO 6473
4216: LD_INT 8
4218: DOUBLE
4219: EQUAL
4220: IFTRUE 4224
4222: GO 4352
4224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4225: LD_ADDR_VAR 0 1
4229: PUSH
4230: LD_INT 2
4232: PUSH
4233: LD_INT 4
4235: PUSH
4236: LD_INT 5
4238: PUSH
4239: LD_INT 6
4241: PUSH
4242: LD_INT 7
4244: PUSH
4245: LD_INT 8
4247: PUSH
4248: LD_INT 11
4250: PUSH
4251: LD_INT 12
4253: PUSH
4254: LD_INT 15
4256: PUSH
4257: LD_INT 16
4259: PUSH
4260: LD_INT 20
4262: PUSH
4263: LD_INT 21
4265: PUSH
4266: LD_INT 22
4268: PUSH
4269: LD_INT 23
4271: PUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 26
4277: PUSH
4278: LD_INT 30
4280: PUSH
4281: LD_INT 31
4283: PUSH
4284: LD_INT 32
4286: PUSH
4287: LD_INT 36
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 102
4317: PUSH
4318: LD_INT 103
4320: PUSH
4321: LD_INT 105
4323: PUSH
4324: LD_INT 106
4326: PUSH
4327: LD_INT 108
4329: PUSH
4330: LD_INT 109
4332: PUSH
4333: LD_INT 112
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: ST_TO_ADDR
4350: GO 6473
4352: LD_INT 9
4354: DOUBLE
4355: EQUAL
4356: IFTRUE 4360
4358: GO 4496
4360: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4361: LD_ADDR_VAR 0 1
4365: PUSH
4366: LD_INT 2
4368: PUSH
4369: LD_INT 4
4371: PUSH
4372: LD_INT 5
4374: PUSH
4375: LD_INT 6
4377: PUSH
4378: LD_INT 7
4380: PUSH
4381: LD_INT 8
4383: PUSH
4384: LD_INT 11
4386: PUSH
4387: LD_INT 12
4389: PUSH
4390: LD_INT 15
4392: PUSH
4393: LD_INT 16
4395: PUSH
4396: LD_INT 20
4398: PUSH
4399: LD_INT 21
4401: PUSH
4402: LD_INT 22
4404: PUSH
4405: LD_INT 23
4407: PUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 26
4413: PUSH
4414: LD_INT 28
4416: PUSH
4417: LD_INT 30
4419: PUSH
4420: LD_INT 31
4422: PUSH
4423: LD_INT 32
4425: PUSH
4426: LD_INT 36
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 101
4454: PUSH
4455: LD_INT 102
4457: PUSH
4458: LD_INT 103
4460: PUSH
4461: LD_INT 105
4463: PUSH
4464: LD_INT 106
4466: PUSH
4467: LD_INT 108
4469: PUSH
4470: LD_INT 109
4472: PUSH
4473: LD_INT 112
4475: PUSH
4476: LD_INT 114
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: ST_TO_ADDR
4494: GO 6473
4496: LD_INT 10
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4504
4502: GO 4688
4504: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: LD_INT 6
4521: PUSH
4522: LD_INT 7
4524: PUSH
4525: LD_INT 8
4527: PUSH
4528: LD_INT 9
4530: PUSH
4531: LD_INT 10
4533: PUSH
4534: LD_INT 11
4536: PUSH
4537: LD_INT 12
4539: PUSH
4540: LD_INT 13
4542: PUSH
4543: LD_INT 14
4545: PUSH
4546: LD_INT 15
4548: PUSH
4549: LD_INT 16
4551: PUSH
4552: LD_INT 17
4554: PUSH
4555: LD_INT 18
4557: PUSH
4558: LD_INT 19
4560: PUSH
4561: LD_INT 20
4563: PUSH
4564: LD_INT 21
4566: PUSH
4567: LD_INT 22
4569: PUSH
4570: LD_INT 23
4572: PUSH
4573: LD_INT 24
4575: PUSH
4576: LD_INT 25
4578: PUSH
4579: LD_INT 26
4581: PUSH
4582: LD_INT 28
4584: PUSH
4585: LD_INT 30
4587: PUSH
4588: LD_INT 31
4590: PUSH
4591: LD_INT 32
4593: PUSH
4594: LD_INT 36
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 101
4630: PUSH
4631: LD_INT 102
4633: PUSH
4634: LD_INT 103
4636: PUSH
4637: LD_INT 104
4639: PUSH
4640: LD_INT 105
4642: PUSH
4643: LD_INT 106
4645: PUSH
4646: LD_INT 107
4648: PUSH
4649: LD_INT 108
4651: PUSH
4652: LD_INT 109
4654: PUSH
4655: LD_INT 110
4657: PUSH
4658: LD_INT 111
4660: PUSH
4661: LD_INT 112
4663: PUSH
4664: LD_INT 114
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: ST_TO_ADDR
4686: GO 6473
4688: LD_INT 11
4690: DOUBLE
4691: EQUAL
4692: IFTRUE 4696
4694: GO 4888
4696: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4697: LD_ADDR_VAR 0 1
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 3
4707: PUSH
4708: LD_INT 4
4710: PUSH
4711: LD_INT 5
4713: PUSH
4714: LD_INT 6
4716: PUSH
4717: LD_INT 7
4719: PUSH
4720: LD_INT 8
4722: PUSH
4723: LD_INT 9
4725: PUSH
4726: LD_INT 10
4728: PUSH
4729: LD_INT 11
4731: PUSH
4732: LD_INT 12
4734: PUSH
4735: LD_INT 13
4737: PUSH
4738: LD_INT 14
4740: PUSH
4741: LD_INT 15
4743: PUSH
4744: LD_INT 16
4746: PUSH
4747: LD_INT 17
4749: PUSH
4750: LD_INT 18
4752: PUSH
4753: LD_INT 19
4755: PUSH
4756: LD_INT 20
4758: PUSH
4759: LD_INT 21
4761: PUSH
4762: LD_INT 22
4764: PUSH
4765: LD_INT 23
4767: PUSH
4768: LD_INT 24
4770: PUSH
4771: LD_INT 25
4773: PUSH
4774: LD_INT 26
4776: PUSH
4777: LD_INT 28
4779: PUSH
4780: LD_INT 30
4782: PUSH
4783: LD_INT 31
4785: PUSH
4786: LD_INT 32
4788: PUSH
4789: LD_INT 34
4791: PUSH
4792: LD_INT 36
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 101
4830: PUSH
4831: LD_INT 102
4833: PUSH
4834: LD_INT 103
4836: PUSH
4837: LD_INT 104
4839: PUSH
4840: LD_INT 105
4842: PUSH
4843: LD_INT 106
4845: PUSH
4846: LD_INT 107
4848: PUSH
4849: LD_INT 108
4851: PUSH
4852: LD_INT 109
4854: PUSH
4855: LD_INT 110
4857: PUSH
4858: LD_INT 111
4860: PUSH
4861: LD_INT 112
4863: PUSH
4864: LD_INT 114
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: ST_TO_ADDR
4886: GO 6473
4888: LD_INT 12
4890: DOUBLE
4891: EQUAL
4892: IFTRUE 4896
4894: GO 5104
4896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4897: LD_ADDR_VAR 0 1
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: LD_INT 2
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: LD_INT 4
4913: PUSH
4914: LD_INT 5
4916: PUSH
4917: LD_INT 6
4919: PUSH
4920: LD_INT 7
4922: PUSH
4923: LD_INT 8
4925: PUSH
4926: LD_INT 9
4928: PUSH
4929: LD_INT 10
4931: PUSH
4932: LD_INT 11
4934: PUSH
4935: LD_INT 12
4937: PUSH
4938: LD_INT 13
4940: PUSH
4941: LD_INT 14
4943: PUSH
4944: LD_INT 15
4946: PUSH
4947: LD_INT 16
4949: PUSH
4950: LD_INT 17
4952: PUSH
4953: LD_INT 18
4955: PUSH
4956: LD_INT 19
4958: PUSH
4959: LD_INT 20
4961: PUSH
4962: LD_INT 21
4964: PUSH
4965: LD_INT 22
4967: PUSH
4968: LD_INT 23
4970: PUSH
4971: LD_INT 24
4973: PUSH
4974: LD_INT 25
4976: PUSH
4977: LD_INT 26
4979: PUSH
4980: LD_INT 27
4982: PUSH
4983: LD_INT 28
4985: PUSH
4986: LD_INT 30
4988: PUSH
4989: LD_INT 31
4991: PUSH
4992: LD_INT 32
4994: PUSH
4995: LD_INT 33
4997: PUSH
4998: LD_INT 34
5000: PUSH
5001: LD_INT 36
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 101
5042: PUSH
5043: LD_INT 102
5045: PUSH
5046: LD_INT 103
5048: PUSH
5049: LD_INT 104
5051: PUSH
5052: LD_INT 105
5054: PUSH
5055: LD_INT 106
5057: PUSH
5058: LD_INT 107
5060: PUSH
5061: LD_INT 108
5063: PUSH
5064: LD_INT 109
5066: PUSH
5067: LD_INT 110
5069: PUSH
5070: LD_INT 111
5072: PUSH
5073: LD_INT 112
5075: PUSH
5076: LD_INT 113
5078: PUSH
5079: LD_INT 114
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: ST_TO_ADDR
5102: GO 6473
5104: LD_INT 13
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5308
5112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5113: LD_ADDR_VAR 0 1
5117: PUSH
5118: LD_INT 1
5120: PUSH
5121: LD_INT 2
5123: PUSH
5124: LD_INT 3
5126: PUSH
5127: LD_INT 4
5129: PUSH
5130: LD_INT 5
5132: PUSH
5133: LD_INT 8
5135: PUSH
5136: LD_INT 9
5138: PUSH
5139: LD_INT 10
5141: PUSH
5142: LD_INT 11
5144: PUSH
5145: LD_INT 12
5147: PUSH
5148: LD_INT 14
5150: PUSH
5151: LD_INT 15
5153: PUSH
5154: LD_INT 16
5156: PUSH
5157: LD_INT 17
5159: PUSH
5160: LD_INT 18
5162: PUSH
5163: LD_INT 19
5165: PUSH
5166: LD_INT 20
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 23
5177: PUSH
5178: LD_INT 24
5180: PUSH
5181: LD_INT 25
5183: PUSH
5184: LD_INT 26
5186: PUSH
5187: LD_INT 27
5189: PUSH
5190: LD_INT 28
5192: PUSH
5193: LD_INT 30
5195: PUSH
5196: LD_INT 31
5198: PUSH
5199: LD_INT 32
5201: PUSH
5202: LD_INT 33
5204: PUSH
5205: LD_INT 34
5207: PUSH
5208: LD_INT 36
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 101
5246: PUSH
5247: LD_INT 102
5249: PUSH
5250: LD_INT 103
5252: PUSH
5253: LD_INT 104
5255: PUSH
5256: LD_INT 105
5258: PUSH
5259: LD_INT 106
5261: PUSH
5262: LD_INT 107
5264: PUSH
5265: LD_INT 108
5267: PUSH
5268: LD_INT 109
5270: PUSH
5271: LD_INT 110
5273: PUSH
5274: LD_INT 111
5276: PUSH
5277: LD_INT 112
5279: PUSH
5280: LD_INT 113
5282: PUSH
5283: LD_INT 114
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: ST_TO_ADDR
5306: GO 6473
5308: LD_INT 14
5310: DOUBLE
5311: EQUAL
5312: IFTRUE 5316
5314: GO 5528
5316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5317: LD_ADDR_VAR 0 1
5321: PUSH
5322: LD_INT 1
5324: PUSH
5325: LD_INT 2
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: LD_INT 4
5333: PUSH
5334: LD_INT 5
5336: PUSH
5337: LD_INT 6
5339: PUSH
5340: LD_INT 7
5342: PUSH
5343: LD_INT 8
5345: PUSH
5346: LD_INT 9
5348: PUSH
5349: LD_INT 10
5351: PUSH
5352: LD_INT 11
5354: PUSH
5355: LD_INT 12
5357: PUSH
5358: LD_INT 13
5360: PUSH
5361: LD_INT 14
5363: PUSH
5364: LD_INT 15
5366: PUSH
5367: LD_INT 16
5369: PUSH
5370: LD_INT 17
5372: PUSH
5373: LD_INT 18
5375: PUSH
5376: LD_INT 19
5378: PUSH
5379: LD_INT 20
5381: PUSH
5382: LD_INT 21
5384: PUSH
5385: LD_INT 22
5387: PUSH
5388: LD_INT 23
5390: PUSH
5391: LD_INT 24
5393: PUSH
5394: LD_INT 25
5396: PUSH
5397: LD_INT 26
5399: PUSH
5400: LD_INT 27
5402: PUSH
5403: LD_INT 28
5405: PUSH
5406: LD_INT 29
5408: PUSH
5409: LD_INT 30
5411: PUSH
5412: LD_INT 31
5414: PUSH
5415: LD_INT 32
5417: PUSH
5418: LD_INT 33
5420: PUSH
5421: LD_INT 34
5423: PUSH
5424: LD_INT 36
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 101
5466: PUSH
5467: LD_INT 102
5469: PUSH
5470: LD_INT 103
5472: PUSH
5473: LD_INT 104
5475: PUSH
5476: LD_INT 105
5478: PUSH
5479: LD_INT 106
5481: PUSH
5482: LD_INT 107
5484: PUSH
5485: LD_INT 108
5487: PUSH
5488: LD_INT 109
5490: PUSH
5491: LD_INT 110
5493: PUSH
5494: LD_INT 111
5496: PUSH
5497: LD_INT 112
5499: PUSH
5500: LD_INT 113
5502: PUSH
5503: LD_INT 114
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: ST_TO_ADDR
5526: GO 6473
5528: LD_INT 15
5530: DOUBLE
5531: EQUAL
5532: IFTRUE 5536
5534: GO 5748
5536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: LD_INT 1
5544: PUSH
5545: LD_INT 2
5547: PUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 4
5553: PUSH
5554: LD_INT 5
5556: PUSH
5557: LD_INT 6
5559: PUSH
5560: LD_INT 7
5562: PUSH
5563: LD_INT 8
5565: PUSH
5566: LD_INT 9
5568: PUSH
5569: LD_INT 10
5571: PUSH
5572: LD_INT 11
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 13
5580: PUSH
5581: LD_INT 14
5583: PUSH
5584: LD_INT 15
5586: PUSH
5587: LD_INT 16
5589: PUSH
5590: LD_INT 17
5592: PUSH
5593: LD_INT 18
5595: PUSH
5596: LD_INT 19
5598: PUSH
5599: LD_INT 20
5601: PUSH
5602: LD_INT 21
5604: PUSH
5605: LD_INT 22
5607: PUSH
5608: LD_INT 23
5610: PUSH
5611: LD_INT 24
5613: PUSH
5614: LD_INT 25
5616: PUSH
5617: LD_INT 26
5619: PUSH
5620: LD_INT 27
5622: PUSH
5623: LD_INT 28
5625: PUSH
5626: LD_INT 29
5628: PUSH
5629: LD_INT 30
5631: PUSH
5632: LD_INT 31
5634: PUSH
5635: LD_INT 32
5637: PUSH
5638: LD_INT 33
5640: PUSH
5641: LD_INT 34
5643: PUSH
5644: LD_INT 36
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 101
5686: PUSH
5687: LD_INT 102
5689: PUSH
5690: LD_INT 103
5692: PUSH
5693: LD_INT 104
5695: PUSH
5696: LD_INT 105
5698: PUSH
5699: LD_INT 106
5701: PUSH
5702: LD_INT 107
5704: PUSH
5705: LD_INT 108
5707: PUSH
5708: LD_INT 109
5710: PUSH
5711: LD_INT 110
5713: PUSH
5714: LD_INT 111
5716: PUSH
5717: LD_INT 112
5719: PUSH
5720: LD_INT 113
5722: PUSH
5723: LD_INT 114
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: ST_TO_ADDR
5746: GO 6473
5748: LD_INT 16
5750: DOUBLE
5751: EQUAL
5752: IFTRUE 5756
5754: GO 5880
5756: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5757: LD_ADDR_VAR 0 1
5761: PUSH
5762: LD_INT 2
5764: PUSH
5765: LD_INT 4
5767: PUSH
5768: LD_INT 5
5770: PUSH
5771: LD_INT 7
5773: PUSH
5774: LD_INT 11
5776: PUSH
5777: LD_INT 12
5779: PUSH
5780: LD_INT 15
5782: PUSH
5783: LD_INT 16
5785: PUSH
5786: LD_INT 20
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 22
5794: PUSH
5795: LD_INT 23
5797: PUSH
5798: LD_INT 25
5800: PUSH
5801: LD_INT 26
5803: PUSH
5804: LD_INT 30
5806: PUSH
5807: LD_INT 31
5809: PUSH
5810: LD_INT 32
5812: PUSH
5813: LD_INT 33
5815: PUSH
5816: LD_INT 34
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: PUSH
5840: LD_INT 101
5842: PUSH
5843: LD_INT 102
5845: PUSH
5846: LD_INT 103
5848: PUSH
5849: LD_INT 106
5851: PUSH
5852: LD_INT 108
5854: PUSH
5855: LD_INT 112
5857: PUSH
5858: LD_INT 113
5860: PUSH
5861: LD_INT 114
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: ST_TO_ADDR
5878: GO 6473
5880: LD_INT 17
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 6100
5888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: LD_INT 2
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: LD_INT 4
5905: PUSH
5906: LD_INT 5
5908: PUSH
5909: LD_INT 6
5911: PUSH
5912: LD_INT 7
5914: PUSH
5915: LD_INT 8
5917: PUSH
5918: LD_INT 9
5920: PUSH
5921: LD_INT 10
5923: PUSH
5924: LD_INT 11
5926: PUSH
5927: LD_INT 12
5929: PUSH
5930: LD_INT 13
5932: PUSH
5933: LD_INT 14
5935: PUSH
5936: LD_INT 15
5938: PUSH
5939: LD_INT 16
5941: PUSH
5942: LD_INT 17
5944: PUSH
5945: LD_INT 18
5947: PUSH
5948: LD_INT 19
5950: PUSH
5951: LD_INT 20
5953: PUSH
5954: LD_INT 21
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 23
5962: PUSH
5963: LD_INT 24
5965: PUSH
5966: LD_INT 25
5968: PUSH
5969: LD_INT 26
5971: PUSH
5972: LD_INT 27
5974: PUSH
5975: LD_INT 28
5977: PUSH
5978: LD_INT 29
5980: PUSH
5981: LD_INT 30
5983: PUSH
5984: LD_INT 31
5986: PUSH
5987: LD_INT 32
5989: PUSH
5990: LD_INT 33
5992: PUSH
5993: LD_INT 34
5995: PUSH
5996: LD_INT 36
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 101
6038: PUSH
6039: LD_INT 102
6041: PUSH
6042: LD_INT 103
6044: PUSH
6045: LD_INT 104
6047: PUSH
6048: LD_INT 105
6050: PUSH
6051: LD_INT 106
6053: PUSH
6054: LD_INT 107
6056: PUSH
6057: LD_INT 108
6059: PUSH
6060: LD_INT 109
6062: PUSH
6063: LD_INT 110
6065: PUSH
6066: LD_INT 111
6068: PUSH
6069: LD_INT 112
6071: PUSH
6072: LD_INT 113
6074: PUSH
6075: LD_INT 114
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: ST_TO_ADDR
6098: GO 6473
6100: LD_INT 18
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6244
6108: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6109: LD_ADDR_VAR 0 1
6113: PUSH
6114: LD_INT 2
6116: PUSH
6117: LD_INT 4
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 7
6125: PUSH
6126: LD_INT 11
6128: PUSH
6129: LD_INT 12
6131: PUSH
6132: LD_INT 15
6134: PUSH
6135: LD_INT 16
6137: PUSH
6138: LD_INT 20
6140: PUSH
6141: LD_INT 21
6143: PUSH
6144: LD_INT 22
6146: PUSH
6147: LD_INT 23
6149: PUSH
6150: LD_INT 25
6152: PUSH
6153: LD_INT 26
6155: PUSH
6156: LD_INT 30
6158: PUSH
6159: LD_INT 31
6161: PUSH
6162: LD_INT 32
6164: PUSH
6165: LD_INT 33
6167: PUSH
6168: LD_INT 34
6170: PUSH
6171: LD_INT 35
6173: PUSH
6174: LD_INT 36
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 101
6202: PUSH
6203: LD_INT 102
6205: PUSH
6206: LD_INT 103
6208: PUSH
6209: LD_INT 106
6211: PUSH
6212: LD_INT 108
6214: PUSH
6215: LD_INT 112
6217: PUSH
6218: LD_INT 113
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 115
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: ST_TO_ADDR
6242: GO 6473
6244: LD_INT 19
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6252
6250: GO 6472
6252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6253: LD_ADDR_VAR 0 1
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: LD_INT 2
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: LD_INT 4
6269: PUSH
6270: LD_INT 5
6272: PUSH
6273: LD_INT 6
6275: PUSH
6276: LD_INT 7
6278: PUSH
6279: LD_INT 8
6281: PUSH
6282: LD_INT 9
6284: PUSH
6285: LD_INT 10
6287: PUSH
6288: LD_INT 11
6290: PUSH
6291: LD_INT 12
6293: PUSH
6294: LD_INT 13
6296: PUSH
6297: LD_INT 14
6299: PUSH
6300: LD_INT 15
6302: PUSH
6303: LD_INT 16
6305: PUSH
6306: LD_INT 17
6308: PUSH
6309: LD_INT 18
6311: PUSH
6312: LD_INT 19
6314: PUSH
6315: LD_INT 20
6317: PUSH
6318: LD_INT 21
6320: PUSH
6321: LD_INT 22
6323: PUSH
6324: LD_INT 23
6326: PUSH
6327: LD_INT 24
6329: PUSH
6330: LD_INT 25
6332: PUSH
6333: LD_INT 26
6335: PUSH
6336: LD_INT 27
6338: PUSH
6339: LD_INT 28
6341: PUSH
6342: LD_INT 29
6344: PUSH
6345: LD_INT 30
6347: PUSH
6348: LD_INT 31
6350: PUSH
6351: LD_INT 32
6353: PUSH
6354: LD_INT 33
6356: PUSH
6357: LD_INT 34
6359: PUSH
6360: LD_INT 35
6362: PUSH
6363: LD_INT 36
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: LD_INT 101
6406: PUSH
6407: LD_INT 102
6409: PUSH
6410: LD_INT 103
6412: PUSH
6413: LD_INT 104
6415: PUSH
6416: LD_INT 105
6418: PUSH
6419: LD_INT 106
6421: PUSH
6422: LD_INT 107
6424: PUSH
6425: LD_INT 108
6427: PUSH
6428: LD_INT 109
6430: PUSH
6431: LD_INT 110
6433: PUSH
6434: LD_INT 111
6436: PUSH
6437: LD_INT 112
6439: PUSH
6440: LD_INT 113
6442: PUSH
6443: LD_INT 114
6445: PUSH
6446: LD_INT 115
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: ST_TO_ADDR
6470: GO 6473
6472: POP
// end else
6473: GO 6692
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6475: LD_ADDR_VAR 0 1
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 3
6488: PUSH
6489: LD_INT 4
6491: PUSH
6492: LD_INT 5
6494: PUSH
6495: LD_INT 6
6497: PUSH
6498: LD_INT 7
6500: PUSH
6501: LD_INT 8
6503: PUSH
6504: LD_INT 9
6506: PUSH
6507: LD_INT 10
6509: PUSH
6510: LD_INT 11
6512: PUSH
6513: LD_INT 12
6515: PUSH
6516: LD_INT 13
6518: PUSH
6519: LD_INT 14
6521: PUSH
6522: LD_INT 15
6524: PUSH
6525: LD_INT 16
6527: PUSH
6528: LD_INT 17
6530: PUSH
6531: LD_INT 18
6533: PUSH
6534: LD_INT 19
6536: PUSH
6537: LD_INT 20
6539: PUSH
6540: LD_INT 21
6542: PUSH
6543: LD_INT 22
6545: PUSH
6546: LD_INT 23
6548: PUSH
6549: LD_INT 24
6551: PUSH
6552: LD_INT 25
6554: PUSH
6555: LD_INT 26
6557: PUSH
6558: LD_INT 27
6560: PUSH
6561: LD_INT 28
6563: PUSH
6564: LD_INT 29
6566: PUSH
6567: LD_INT 30
6569: PUSH
6570: LD_INT 31
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: LD_INT 33
6578: PUSH
6579: LD_INT 34
6581: PUSH
6582: LD_INT 35
6584: PUSH
6585: LD_INT 36
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PUSH
6626: LD_INT 101
6628: PUSH
6629: LD_INT 102
6631: PUSH
6632: LD_INT 103
6634: PUSH
6635: LD_INT 104
6637: PUSH
6638: LD_INT 105
6640: PUSH
6641: LD_INT 106
6643: PUSH
6644: LD_INT 107
6646: PUSH
6647: LD_INT 108
6649: PUSH
6650: LD_INT 109
6652: PUSH
6653: LD_INT 110
6655: PUSH
6656: LD_INT 111
6658: PUSH
6659: LD_INT 112
6661: PUSH
6662: LD_INT 113
6664: PUSH
6665: LD_INT 114
6667: PUSH
6668: LD_INT 115
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: ST_TO_ADDR
// if result then
6692: LD_VAR 0 1
6696: IFFALSE 6985
// begin normal :=  ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_STRING 
6705: ST_TO_ADDR
// hardcore :=  ;
6706: LD_ADDR_VAR 0 4
6710: PUSH
6711: LD_STRING 
6713: ST_TO_ADDR
// for i = 1 to normalCounter do
6714: LD_ADDR_VAR 0 5
6718: PUSH
6719: DOUBLE
6720: LD_INT 1
6722: DEC
6723: ST_TO_ADDR
6724: LD_EXP 18
6728: PUSH
6729: FOR_TO
6730: IFFALSE 6831
// begin tmp := 0 ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_STRING 0
6739: ST_TO_ADDR
// if result [ 1 ] then
6740: LD_VAR 0 1
6744: PUSH
6745: LD_INT 1
6747: ARRAY
6748: IFFALSE 6813
// if result [ 1 ] [ 1 ] = i then
6750: LD_VAR 0 1
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PUSH
6759: LD_INT 1
6761: ARRAY
6762: PUSH
6763: LD_VAR 0 5
6767: EQUAL
6768: IFFALSE 6813
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6770: LD_ADDR_VAR 0 1
6774: PUSH
6775: LD_VAR 0 1
6779: PPUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_VAR 0 1
6787: PUSH
6788: LD_INT 1
6790: ARRAY
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: CALL_OW 3
6799: PPUSH
6800: CALL_OW 1
6804: ST_TO_ADDR
// tmp := 1 ;
6805: LD_ADDR_VAR 0 2
6809: PUSH
6810: LD_STRING 1
6812: ST_TO_ADDR
// end ; normal := normal & tmp ;
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: LD_VAR 0 3
6822: PUSH
6823: LD_VAR 0 2
6827: STR
6828: ST_TO_ADDR
// end ;
6829: GO 6729
6831: POP
6832: POP
// for i = 1 to hardcoreCounter do
6833: LD_ADDR_VAR 0 5
6837: PUSH
6838: DOUBLE
6839: LD_INT 1
6841: DEC
6842: ST_TO_ADDR
6843: LD_EXP 19
6847: PUSH
6848: FOR_TO
6849: IFFALSE 6954
// begin tmp := 0 ;
6851: LD_ADDR_VAR 0 2
6855: PUSH
6856: LD_STRING 0
6858: ST_TO_ADDR
// if result [ 2 ] then
6859: LD_VAR 0 1
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: IFFALSE 6936
// if result [ 2 ] [ 1 ] = 100 + i then
6869: LD_VAR 0 1
6873: PUSH
6874: LD_INT 2
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PUSH
6882: LD_INT 100
6884: PUSH
6885: LD_VAR 0 5
6889: PLUS
6890: EQUAL
6891: IFFALSE 6936
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6893: LD_ADDR_VAR 0 1
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: LD_INT 2
6905: PPUSH
6906: LD_VAR 0 1
6910: PUSH
6911: LD_INT 2
6913: ARRAY
6914: PPUSH
6915: LD_INT 1
6917: PPUSH
6918: CALL_OW 3
6922: PPUSH
6923: CALL_OW 1
6927: ST_TO_ADDR
// tmp := 1 ;
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_STRING 1
6935: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6936: LD_ADDR_VAR 0 4
6940: PUSH
6941: LD_VAR 0 4
6945: PUSH
6946: LD_VAR 0 2
6950: STR
6951: ST_TO_ADDR
// end ;
6952: GO 6848
6954: POP
6955: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6956: LD_STRING getStreamItemsFromMission("
6958: PUSH
6959: LD_VAR 0 3
6963: STR
6964: PUSH
6965: LD_STRING ","
6967: STR
6968: PUSH
6969: LD_VAR 0 4
6973: STR
6974: PUSH
6975: LD_STRING ")
6977: STR
6978: PPUSH
6979: CALL_OW 559
// end else
6983: GO 6992
// ToLua ( getStreamItemsFromMission("","") ) ;
6985: LD_STRING getStreamItemsFromMission("","")
6987: PPUSH
6988: CALL_OW 559
// end ;
6992: LD_VAR 0 1
6996: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6997: LD_EXP 17
7001: PUSH
7002: LD_EXP 22
7006: AND
7007: IFFALSE 7131
7009: GO 7011
7011: DISABLE
7012: LD_INT 0
7014: PPUSH
7015: PPUSH
// begin enable ;
7016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7017: LD_ADDR_VAR 0 2
7021: PUSH
7022: LD_INT 22
7024: PUSH
7025: LD_OWVAR 2
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 2
7036: PUSH
7037: LD_INT 34
7039: PUSH
7040: LD_INT 7
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 34
7049: PUSH
7050: LD_INT 45
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 34
7059: PUSH
7060: LD_INT 28
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 34
7069: PUSH
7070: LD_INT 47
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PPUSH
7088: CALL_OW 69
7092: ST_TO_ADDR
// if not tmp then
7093: LD_VAR 0 2
7097: NOT
7098: IFFALSE 7102
// exit ;
7100: GO 7131
// for i in tmp do
7102: LD_ADDR_VAR 0 1
7106: PUSH
7107: LD_VAR 0 2
7111: PUSH
7112: FOR_IN
7113: IFFALSE 7129
// begin SetLives ( i , 0 ) ;
7115: LD_VAR 0 1
7119: PPUSH
7120: LD_INT 0
7122: PPUSH
7123: CALL_OW 234
// end ;
7127: GO 7112
7129: POP
7130: POP
// end ;
7131: PPOPN 2
7133: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7134: LD_EXP 17
7138: PUSH
7139: LD_EXP 23
7143: AND
7144: IFFALSE 7228
7146: GO 7148
7148: DISABLE
7149: LD_INT 0
7151: PPUSH
7152: PPUSH
// begin enable ;
7153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: LD_INT 22
7161: PUSH
7162: LD_OWVAR 2
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 32
7173: PUSH
7174: LD_INT 3
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PPUSH
7185: CALL_OW 69
7189: ST_TO_ADDR
// if not tmp then
7190: LD_VAR 0 2
7194: NOT
7195: IFFALSE 7199
// exit ;
7197: GO 7228
// for i in tmp do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: LD_VAR 0 2
7208: PUSH
7209: FOR_IN
7210: IFFALSE 7226
// begin SetLives ( i , 0 ) ;
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 0
7219: PPUSH
7220: CALL_OW 234
// end ;
7224: GO 7209
7226: POP
7227: POP
// end ;
7228: PPOPN 2
7230: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7231: LD_EXP 17
7235: PUSH
7236: LD_EXP 20
7240: AND
7241: IFFALSE 7334
7243: GO 7245
7245: DISABLE
7246: LD_INT 0
7248: PPUSH
// begin enable ;
7249: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7250: LD_ADDR_VAR 0 1
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_OWVAR 2
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: LD_INT 25
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 9
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 8
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PUSH
7315: FOR_IN
7316: IFFALSE 7332
// begin SetClass ( i , 1 ) ;
7318: LD_VAR 0 1
7322: PPUSH
7323: LD_INT 1
7325: PPUSH
7326: CALL_OW 336
// end ;
7330: GO 7315
7332: POP
7333: POP
// end ;
7334: PPOPN 1
7336: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7337: LD_EXP 17
7341: PUSH
7342: LD_EXP 21
7346: AND
7347: PUSH
7348: LD_OWVAR 65
7352: PUSH
7353: LD_INT 7
7355: LESS
7356: AND
7357: IFFALSE 7371
7359: GO 7361
7361: DISABLE
// begin enable ;
7362: ENABLE
// game_speed := 7 ;
7363: LD_ADDR_OWVAR 65
7367: PUSH
7368: LD_INT 7
7370: ST_TO_ADDR
// end ;
7371: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7372: LD_EXP 17
7376: PUSH
7377: LD_EXP 24
7381: AND
7382: IFFALSE 7584
7384: GO 7386
7386: DISABLE
7387: LD_INT 0
7389: PPUSH
7390: PPUSH
7391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: LD_INT 81
7399: PUSH
7400: LD_OWVAR 2
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 21
7411: PUSH
7412: LD_INT 1
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 69
7427: ST_TO_ADDR
// if not tmp then
7428: LD_VAR 0 3
7432: NOT
7433: IFFALSE 7437
// exit ;
7435: GO 7584
// if tmp > 5 then
7437: LD_VAR 0 3
7441: PUSH
7442: LD_INT 5
7444: GREATER
7445: IFFALSE 7457
// k := 5 else
7447: LD_ADDR_VAR 0 2
7451: PUSH
7452: LD_INT 5
7454: ST_TO_ADDR
7455: GO 7467
// k := tmp ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 3
7466: ST_TO_ADDR
// for i := 1 to k do
7467: LD_ADDR_VAR 0 1
7471: PUSH
7472: DOUBLE
7473: LD_INT 1
7475: DEC
7476: ST_TO_ADDR
7477: LD_VAR 0 2
7481: PUSH
7482: FOR_TO
7483: IFFALSE 7582
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_VAR 0 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 4
7503: MOD
7504: PUSH
7505: LD_INT 1
7507: PLUS
7508: PPUSH
7509: CALL_OW 259
7513: PUSH
7514: LD_INT 10
7516: LESS
7517: IFFALSE 7580
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7519: LD_VAR 0 3
7523: PUSH
7524: LD_VAR 0 1
7528: ARRAY
7529: PPUSH
7530: LD_VAR 0 1
7534: PUSH
7535: LD_INT 4
7537: MOD
7538: PUSH
7539: LD_INT 1
7541: PLUS
7542: PPUSH
7543: LD_VAR 0 3
7547: PUSH
7548: LD_VAR 0 1
7552: ARRAY
7553: PPUSH
7554: LD_VAR 0 1
7558: PUSH
7559: LD_INT 4
7561: MOD
7562: PUSH
7563: LD_INT 1
7565: PLUS
7566: PPUSH
7567: CALL_OW 259
7571: PUSH
7572: LD_INT 1
7574: PLUS
7575: PPUSH
7576: CALL_OW 237
7580: GO 7482
7582: POP
7583: POP
// end ;
7584: PPOPN 3
7586: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 25
7596: AND
7597: IFFALSE 7617
7599: GO 7601
7601: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7602: LD_INT 4
7604: PPUSH
7605: LD_OWVAR 2
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 324
7617: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7618: LD_EXP 17
7622: PUSH
7623: LD_EXP 54
7627: AND
7628: IFFALSE 7648
7630: GO 7632
7632: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7633: LD_INT 19
7635: PPUSH
7636: LD_OWVAR 2
7640: PPUSH
7641: LD_INT 0
7643: PPUSH
7644: CALL_OW 324
7648: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7649: LD_EXP 17
7653: PUSH
7654: LD_EXP 26
7658: AND
7659: IFFALSE 7761
7661: GO 7663
7663: DISABLE
7664: LD_INT 0
7666: PPUSH
7667: PPUSH
// begin enable ;
7668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7669: LD_ADDR_VAR 0 2
7673: PUSH
7674: LD_INT 22
7676: PUSH
7677: LD_OWVAR 2
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: LD_INT 34
7691: PUSH
7692: LD_INT 11
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 34
7701: PUSH
7702: LD_INT 30
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if not tmp then
7723: LD_VAR 0 2
7727: NOT
7728: IFFALSE 7732
// exit ;
7730: GO 7761
// for i in tmp do
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: LD_VAR 0 2
7741: PUSH
7742: FOR_IN
7743: IFFALSE 7759
// begin SetLives ( i , 0 ) ;
7745: LD_VAR 0 1
7749: PPUSH
7750: LD_INT 0
7752: PPUSH
7753: CALL_OW 234
// end ;
7757: GO 7742
7759: POP
7760: POP
// end ;
7761: PPOPN 2
7763: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7764: LD_EXP 17
7768: PUSH
7769: LD_EXP 27
7773: AND
7774: IFFALSE 7794
7776: GO 7778
7778: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7779: LD_INT 32
7781: PPUSH
7782: LD_OWVAR 2
7786: PPUSH
7787: LD_INT 0
7789: PPUSH
7790: CALL_OW 324
7794: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7795: LD_EXP 17
7799: PUSH
7800: LD_EXP 28
7804: AND
7805: IFFALSE 7986
7807: GO 7809
7809: DISABLE
7810: LD_INT 0
7812: PPUSH
7813: PPUSH
7814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7815: LD_ADDR_VAR 0 2
7819: PUSH
7820: LD_INT 22
7822: PUSH
7823: LD_OWVAR 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 33
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PPUSH
7846: CALL_OW 69
7850: ST_TO_ADDR
// if not tmp then
7851: LD_VAR 0 2
7855: NOT
7856: IFFALSE 7860
// exit ;
7858: GO 7986
// side := 0 ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 0
7867: ST_TO_ADDR
// for i := 1 to 8 do
7868: LD_ADDR_VAR 0 1
7872: PUSH
7873: DOUBLE
7874: LD_INT 1
7876: DEC
7877: ST_TO_ADDR
7878: LD_INT 8
7880: PUSH
7881: FOR_TO
7882: IFFALSE 7930
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7884: LD_OWVAR 2
7888: PUSH
7889: LD_VAR 0 1
7893: NONEQUAL
7894: PUSH
7895: LD_OWVAR 2
7899: PPUSH
7900: LD_VAR 0 1
7904: PPUSH
7905: CALL_OW 81
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: AND
7914: IFFALSE 7928
// begin side := i ;
7916: LD_ADDR_VAR 0 3
7920: PUSH
7921: LD_VAR 0 1
7925: ST_TO_ADDR
// break ;
7926: GO 7930
// end ;
7928: GO 7881
7930: POP
7931: POP
// if not side then
7932: LD_VAR 0 3
7936: NOT
7937: IFFALSE 7941
// exit ;
7939: GO 7986
// for i := 1 to tmp do
7941: LD_ADDR_VAR 0 1
7945: PUSH
7946: DOUBLE
7947: LD_INT 1
7949: DEC
7950: ST_TO_ADDR
7951: LD_VAR 0 2
7955: PUSH
7956: FOR_TO
7957: IFFALSE 7984
// if Prob ( 60 ) then
7959: LD_INT 60
7961: PPUSH
7962: CALL_OW 13
7966: IFFALSE 7982
// SetSide ( i , side ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 3
7977: PPUSH
7978: CALL_OW 235
7982: GO 7956
7984: POP
7985: POP
// end ;
7986: PPOPN 3
7988: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7989: LD_EXP 17
7993: PUSH
7994: LD_EXP 30
7998: AND
7999: IFFALSE 8118
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8007: LD_ADDR_VAR 0 1
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_OWVAR 2
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 21
8026: PUSH
8027: LD_INT 1
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 3
8036: PUSH
8037: LD_INT 23
8039: PUSH
8040: LD_INT 0
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8116
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8064: LD_VAR 0 1
8068: PPUSH
8069: CALL_OW 257
8073: PUSH
8074: LD_INT 1
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: LD_INT 3
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: IN
8092: IFFALSE 8114
// SetClass ( un , rand ( 1 , 4 ) ) ;
8094: LD_VAR 0 1
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: LD_INT 4
8104: PPUSH
8105: CALL_OW 12
8109: PPUSH
8110: CALL_OW 336
8114: GO 8061
8116: POP
8117: POP
// end ;
8118: PPOPN 1
8120: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8121: LD_EXP 17
8125: PUSH
8126: LD_EXP 29
8130: AND
8131: IFFALSE 8210
8133: GO 8135
8135: DISABLE
8136: LD_INT 0
8138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8139: LD_ADDR_VAR 0 1
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_OWVAR 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 21
8158: PUSH
8159: LD_INT 3
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not tmp then
8175: LD_VAR 0 1
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8210
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8184: LD_VAR 0 1
8188: PUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 12
8201: ARRAY
8202: PPUSH
8203: LD_INT 100
8205: PPUSH
8206: CALL_OW 234
// end ;
8210: PPOPN 1
8212: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8213: LD_EXP 17
8217: PUSH
8218: LD_EXP 31
8222: AND
8223: IFFALSE 8321
8225: GO 8227
8227: DISABLE
8228: LD_INT 0
8230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8231: LD_ADDR_VAR 0 1
8235: PUSH
8236: LD_INT 22
8238: PUSH
8239: LD_OWVAR 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 21
8250: PUSH
8251: LD_INT 1
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: ST_TO_ADDR
// if not tmp then
8267: LD_VAR 0 1
8271: NOT
8272: IFFALSE 8276
// exit ;
8274: GO 8321
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8276: LD_VAR 0 1
8280: PUSH
8281: LD_INT 1
8283: PPUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 12
8293: ARRAY
8294: PPUSH
8295: LD_INT 1
8297: PPUSH
8298: LD_INT 4
8300: PPUSH
8301: CALL_OW 12
8305: PPUSH
8306: LD_INT 3000
8308: PPUSH
8309: LD_INT 9000
8311: PPUSH
8312: CALL_OW 12
8316: PPUSH
8317: CALL_OW 492
// end ;
8321: PPOPN 1
8323: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8324: LD_EXP 17
8328: PUSH
8329: LD_EXP 32
8333: AND
8334: IFFALSE 8354
8336: GO 8338
8338: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8339: LD_INT 1
8341: PPUSH
8342: LD_OWVAR 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 324
8354: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8355: LD_EXP 17
8359: PUSH
8360: LD_EXP 33
8364: AND
8365: IFFALSE 8448
8367: GO 8369
8369: DISABLE
8370: LD_INT 0
8372: PPUSH
8373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8374: LD_ADDR_VAR 0 2
8378: PUSH
8379: LD_INT 22
8381: PUSH
8382: LD_OWVAR 2
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: LD_INT 21
8393: PUSH
8394: LD_INT 3
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PPUSH
8405: CALL_OW 69
8409: ST_TO_ADDR
// if not tmp then
8410: LD_VAR 0 2
8414: NOT
8415: IFFALSE 8419
// exit ;
8417: GO 8448
// for i in tmp do
8419: LD_ADDR_VAR 0 1
8423: PUSH
8424: LD_VAR 0 2
8428: PUSH
8429: FOR_IN
8430: IFFALSE 8446
// SetBLevel ( i , 10 ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 10
8439: PPUSH
8440: CALL_OW 241
8444: GO 8429
8446: POP
8447: POP
// end ;
8448: PPOPN 2
8450: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8451: LD_EXP 17
8455: PUSH
8456: LD_EXP 34
8460: AND
8461: IFFALSE 8572
8463: GO 8465
8465: DISABLE
8466: LD_INT 0
8468: PPUSH
8469: PPUSH
8470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8471: LD_ADDR_VAR 0 3
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_OWVAR 2
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 25
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 69
8506: ST_TO_ADDR
// if not tmp then
8507: LD_VAR 0 3
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8572
// un := tmp [ rand ( 1 , tmp ) ] ;
8516: LD_ADDR_VAR 0 2
8520: PUSH
8521: LD_VAR 0 3
8525: PUSH
8526: LD_INT 1
8528: PPUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: CALL_OW 12
8538: ARRAY
8539: ST_TO_ADDR
// if Crawls ( un ) then
8540: LD_VAR 0 2
8544: PPUSH
8545: CALL_OW 318
8549: IFFALSE 8560
// ComWalk ( un ) ;
8551: LD_VAR 0 2
8555: PPUSH
8556: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8560: LD_VAR 0 2
8564: PPUSH
8565: LD_INT 5
8567: PPUSH
8568: CALL_OW 336
// end ;
8572: PPOPN 3
8574: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8575: LD_EXP 17
8579: PUSH
8580: LD_EXP 35
8584: AND
8585: PUSH
8586: LD_OWVAR 67
8590: PUSH
8591: LD_INT 3
8593: LESS
8594: AND
8595: IFFALSE 8614
8597: GO 8599
8599: DISABLE
// Difficulty := Difficulty + 1 ;
8600: LD_ADDR_OWVAR 67
8604: PUSH
8605: LD_OWVAR 67
8609: PUSH
8610: LD_INT 1
8612: PLUS
8613: ST_TO_ADDR
8614: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8615: LD_EXP 17
8619: PUSH
8620: LD_EXP 36
8624: AND
8625: IFFALSE 8728
8627: GO 8629
8629: DISABLE
8630: LD_INT 0
8632: PPUSH
// begin for i := 1 to 5 do
8633: LD_ADDR_VAR 0 1
8637: PUSH
8638: DOUBLE
8639: LD_INT 1
8641: DEC
8642: ST_TO_ADDR
8643: LD_INT 5
8645: PUSH
8646: FOR_TO
8647: IFFALSE 8726
// begin uc_nation := nation_nature ;
8649: LD_ADDR_OWVAR 21
8653: PUSH
8654: LD_INT 0
8656: ST_TO_ADDR
// uc_side := 0 ;
8657: LD_ADDR_OWVAR 20
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8665: LD_ADDR_OWVAR 29
8669: PUSH
8670: LD_INT 12
8672: PUSH
8673: LD_INT 12
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: ST_TO_ADDR
// hc_agressivity := 20 ;
8680: LD_ADDR_OWVAR 35
8684: PUSH
8685: LD_INT 20
8687: ST_TO_ADDR
// hc_class := class_tiger ;
8688: LD_ADDR_OWVAR 28
8692: PUSH
8693: LD_INT 14
8695: ST_TO_ADDR
// hc_gallery :=  ;
8696: LD_ADDR_OWVAR 33
8700: PUSH
8701: LD_STRING 
8703: ST_TO_ADDR
// hc_name :=  ;
8704: LD_ADDR_OWVAR 26
8708: PUSH
8709: LD_STRING 
8711: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8712: CALL_OW 44
8716: PPUSH
8717: LD_INT 0
8719: PPUSH
8720: CALL_OW 51
// end ;
8724: GO 8646
8726: POP
8727: POP
// end ;
8728: PPOPN 1
8730: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8731: LD_EXP 17
8735: PUSH
8736: LD_EXP 37
8740: AND
8741: IFFALSE 8750
8743: GO 8745
8745: DISABLE
// StreamSibBomb ;
8746: CALL 8751 0 0
8750: END
// export function StreamSibBomb ; var i , x , y ; begin
8751: LD_INT 0
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
// result := false ;
8757: LD_ADDR_VAR 0 1
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// for i := 1 to 16 do
8765: LD_ADDR_VAR 0 2
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_INT 16
8777: PUSH
8778: FOR_TO
8779: IFFALSE 8978
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8781: LD_ADDR_VAR 0 3
8785: PUSH
8786: LD_INT 10
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_INT 30
8794: PUSH
8795: LD_INT 40
8797: PUSH
8798: LD_INT 50
8800: PUSH
8801: LD_INT 60
8803: PUSH
8804: LD_INT 70
8806: PUSH
8807: LD_INT 80
8809: PUSH
8810: LD_INT 90
8812: PUSH
8813: LD_INT 100
8815: PUSH
8816: LD_INT 110
8818: PUSH
8819: LD_INT 120
8821: PUSH
8822: LD_INT 130
8824: PUSH
8825: LD_INT 140
8827: PUSH
8828: LD_INT 150
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 15
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8860: LD_ADDR_VAR 0 4
8864: PUSH
8865: LD_INT 10
8867: PUSH
8868: LD_INT 20
8870: PUSH
8871: LD_INT 30
8873: PUSH
8874: LD_INT 40
8876: PUSH
8877: LD_INT 50
8879: PUSH
8880: LD_INT 60
8882: PUSH
8883: LD_INT 70
8885: PUSH
8886: LD_INT 80
8888: PUSH
8889: LD_INT 90
8891: PUSH
8892: LD_INT 100
8894: PUSH
8895: LD_INT 110
8897: PUSH
8898: LD_INT 120
8900: PUSH
8901: LD_INT 130
8903: PUSH
8904: LD_INT 140
8906: PUSH
8907: LD_INT 150
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: LD_INT 15
8932: PPUSH
8933: CALL_OW 12
8937: ARRAY
8938: ST_TO_ADDR
// if ValidHex ( x , y ) then
8939: LD_VAR 0 3
8943: PPUSH
8944: LD_VAR 0 4
8948: PPUSH
8949: CALL_OW 488
8953: IFFALSE 8976
// begin result := [ x , y ] ;
8955: LD_ADDR_VAR 0 1
8959: PUSH
8960: LD_VAR 0 3
8964: PUSH
8965: LD_VAR 0 4
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: ST_TO_ADDR
// break ;
8974: GO 8978
// end ; end ;
8976: GO 8778
8978: POP
8979: POP
// if result then
8980: LD_VAR 0 1
8984: IFFALSE 9044
// begin ToLua ( playSibBomb() ) ;
8986: LD_STRING playSibBomb()
8988: PPUSH
8989: CALL_OW 559
// wait ( 0 0$14 ) ;
8993: LD_INT 490
8995: PPUSH
8996: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9000: LD_VAR 0 1
9004: PUSH
9005: LD_INT 1
9007: ARRAY
9008: PPUSH
9009: LD_VAR 0 1
9013: PUSH
9014: LD_INT 2
9016: ARRAY
9017: PPUSH
9018: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9022: LD_VAR 0 1
9026: PUSH
9027: LD_INT 1
9029: ARRAY
9030: PPUSH
9031: LD_VAR 0 1
9035: PUSH
9036: LD_INT 2
9038: ARRAY
9039: PPUSH
9040: CALL_OW 429
// end ; end ;
9044: LD_VAR 0 1
9048: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9049: LD_EXP 17
9053: PUSH
9054: LD_EXP 39
9058: AND
9059: IFFALSE 9071
9061: GO 9063
9063: DISABLE
// YouLost (  ) ;
9064: LD_STRING 
9066: PPUSH
9067: CALL_OW 104
9071: END
// every 0 0$1 trigger StreamModeActive and sFog do
9072: LD_EXP 17
9076: PUSH
9077: LD_EXP 38
9081: AND
9082: IFFALSE 9096
9084: GO 9086
9086: DISABLE
// FogOff ( your_side ) ;
9087: LD_OWVAR 2
9091: PPUSH
9092: CALL_OW 344
9096: END
// every 0 0$1 trigger StreamModeActive and sSun do
9097: LD_EXP 17
9101: PUSH
9102: LD_EXP 40
9106: AND
9107: IFFALSE 9135
9109: GO 9111
9111: DISABLE
// begin solar_recharge_percent := 0 ;
9112: LD_ADDR_OWVAR 79
9116: PUSH
9117: LD_INT 0
9119: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9120: LD_INT 10500
9122: PPUSH
9123: CALL_OW 67
// solar_recharge_percent := 100 ;
9127: LD_ADDR_OWVAR 79
9131: PUSH
9132: LD_INT 100
9134: ST_TO_ADDR
// end ;
9135: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9136: LD_EXP 17
9140: PUSH
9141: LD_EXP 41
9145: AND
9146: IFFALSE 9385
9148: GO 9150
9150: DISABLE
9151: LD_INT 0
9153: PPUSH
9154: PPUSH
9155: PPUSH
// begin tmp := [ ] ;
9156: LD_ADDR_VAR 0 3
9160: PUSH
9161: EMPTY
9162: ST_TO_ADDR
// for i := 1 to 6 do
9163: LD_ADDR_VAR 0 1
9167: PUSH
9168: DOUBLE
9169: LD_INT 1
9171: DEC
9172: ST_TO_ADDR
9173: LD_INT 6
9175: PUSH
9176: FOR_TO
9177: IFFALSE 9282
// begin uc_nation := nation_nature ;
9179: LD_ADDR_OWVAR 21
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// uc_side := 0 ;
9187: LD_ADDR_OWVAR 20
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9195: LD_ADDR_OWVAR 29
9199: PUSH
9200: LD_INT 12
9202: PUSH
9203: LD_INT 12
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: ST_TO_ADDR
// hc_agressivity := 20 ;
9210: LD_ADDR_OWVAR 35
9214: PUSH
9215: LD_INT 20
9217: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9218: LD_ADDR_OWVAR 28
9222: PUSH
9223: LD_INT 17
9225: ST_TO_ADDR
// hc_gallery :=  ;
9226: LD_ADDR_OWVAR 33
9230: PUSH
9231: LD_STRING 
9233: ST_TO_ADDR
// hc_name :=  ;
9234: LD_ADDR_OWVAR 26
9238: PUSH
9239: LD_STRING 
9241: ST_TO_ADDR
// un := CreateHuman ;
9242: LD_ADDR_VAR 0 2
9246: PUSH
9247: CALL_OW 44
9251: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9252: LD_VAR 0 2
9256: PPUSH
9257: LD_INT 1
9259: PPUSH
9260: CALL_OW 51
// tmp := tmp ^ un ;
9264: LD_ADDR_VAR 0 3
9268: PUSH
9269: LD_VAR 0 3
9273: PUSH
9274: LD_VAR 0 2
9278: ADD
9279: ST_TO_ADDR
// end ;
9280: GO 9176
9282: POP
9283: POP
// repeat wait ( 0 0$1 ) ;
9284: LD_INT 35
9286: PPUSH
9287: CALL_OW 67
// for un in tmp do
9291: LD_ADDR_VAR 0 2
9295: PUSH
9296: LD_VAR 0 3
9300: PUSH
9301: FOR_IN
9302: IFFALSE 9376
// begin if IsDead ( un ) then
9304: LD_VAR 0 2
9308: PPUSH
9309: CALL_OW 301
9313: IFFALSE 9333
// begin tmp := tmp diff un ;
9315: LD_ADDR_VAR 0 3
9319: PUSH
9320: LD_VAR 0 3
9324: PUSH
9325: LD_VAR 0 2
9329: DIFF
9330: ST_TO_ADDR
// continue ;
9331: GO 9301
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9333: LD_VAR 0 2
9337: PPUSH
9338: LD_INT 3
9340: PUSH
9341: LD_INT 22
9343: PUSH
9344: LD_INT 0
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PPUSH
9355: CALL_OW 69
9359: PPUSH
9360: LD_VAR 0 2
9364: PPUSH
9365: CALL_OW 74
9369: PPUSH
9370: CALL_OW 115
// end ;
9374: GO 9301
9376: POP
9377: POP
// until not tmp ;
9378: LD_VAR 0 3
9382: NOT
9383: IFFALSE 9284
// end ;
9385: PPOPN 3
9387: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9388: LD_EXP 17
9392: PUSH
9393: LD_EXP 42
9397: AND
9398: IFFALSE 9452
9400: GO 9402
9402: DISABLE
// begin ToLua ( displayTroll(); ) ;
9403: LD_STRING displayTroll();
9405: PPUSH
9406: CALL_OW 559
// wait ( 3 3$00 ) ;
9410: LD_INT 6300
9412: PPUSH
9413: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9417: LD_STRING hideTroll();
9419: PPUSH
9420: CALL_OW 559
// wait ( 1 1$00 ) ;
9424: LD_INT 2100
9426: PPUSH
9427: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9431: LD_STRING displayTroll();
9433: PPUSH
9434: CALL_OW 559
// wait ( 1 1$00 ) ;
9438: LD_INT 2100
9440: PPUSH
9441: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9445: LD_STRING hideTroll();
9447: PPUSH
9448: CALL_OW 559
// end ;
9452: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9453: LD_EXP 17
9457: PUSH
9458: LD_EXP 43
9462: AND
9463: IFFALSE 9526
9465: GO 9467
9467: DISABLE
9468: LD_INT 0
9470: PPUSH
// begin p := 0 ;
9471: LD_ADDR_VAR 0 1
9475: PUSH
9476: LD_INT 0
9478: ST_TO_ADDR
// repeat game_speed := 1 ;
9479: LD_ADDR_OWVAR 65
9483: PUSH
9484: LD_INT 1
9486: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9487: LD_INT 35
9489: PPUSH
9490: CALL_OW 67
// p := p + 1 ;
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_VAR 0 1
9503: PUSH
9504: LD_INT 1
9506: PLUS
9507: ST_TO_ADDR
// until p >= 60 ;
9508: LD_VAR 0 1
9512: PUSH
9513: LD_INT 60
9515: GREATEREQUAL
9516: IFFALSE 9479
// game_speed := 4 ;
9518: LD_ADDR_OWVAR 65
9522: PUSH
9523: LD_INT 4
9525: ST_TO_ADDR
// end ;
9526: PPOPN 1
9528: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9529: LD_EXP 17
9533: PUSH
9534: LD_EXP 44
9538: AND
9539: IFFALSE 9685
9541: GO 9543
9543: DISABLE
9544: LD_INT 0
9546: PPUSH
9547: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9548: LD_ADDR_VAR 0 1
9552: PUSH
9553: LD_INT 22
9555: PUSH
9556: LD_OWVAR 2
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 2
9567: PUSH
9568: LD_INT 30
9570: PUSH
9571: LD_INT 0
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 30
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PPUSH
9597: CALL_OW 69
9601: ST_TO_ADDR
// if not depot then
9602: LD_VAR 0 1
9606: NOT
9607: IFFALSE 9611
// exit ;
9609: GO 9685
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9611: LD_ADDR_VAR 0 2
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: LD_INT 1
9623: PPUSH
9624: LD_VAR 0 1
9628: PPUSH
9629: CALL_OW 12
9633: ARRAY
9634: PPUSH
9635: CALL_OW 274
9639: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9640: LD_VAR 0 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 0
9650: PPUSH
9651: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9655: LD_VAR 0 2
9659: PPUSH
9660: LD_INT 2
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9670: LD_VAR 0 2
9674: PPUSH
9675: LD_INT 3
9677: PPUSH
9678: LD_INT 0
9680: PPUSH
9681: CALL_OW 277
// end ;
9685: PPOPN 2
9687: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9688: LD_EXP 17
9692: PUSH
9693: LD_EXP 45
9697: AND
9698: IFFALSE 9795
9700: GO 9702
9702: DISABLE
9703: LD_INT 0
9705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9706: LD_ADDR_VAR 0 1
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_OWVAR 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 23
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: PPUSH
9755: CALL_OW 69
9759: ST_TO_ADDR
// if not tmp then
9760: LD_VAR 0 1
9764: NOT
9765: IFFALSE 9769
// exit ;
9767: GO 9795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9769: LD_VAR 0 1
9773: PUSH
9774: LD_INT 1
9776: PPUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 12
9786: ARRAY
9787: PPUSH
9788: LD_INT 200
9790: PPUSH
9791: CALL_OW 234
// end ;
9795: PPOPN 1
9797: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9798: LD_EXP 17
9802: PUSH
9803: LD_EXP 46
9807: AND
9808: IFFALSE 9887
9810: GO 9812
9812: DISABLE
9813: LD_INT 0
9815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9816: LD_ADDR_VAR 0 1
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_OWVAR 2
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// if not tmp then
9852: LD_VAR 0 1
9856: NOT
9857: IFFALSE 9861
// exit ;
9859: GO 9887
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9861: LD_VAR 0 1
9865: PUSH
9866: LD_INT 1
9868: PPUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: CALL_OW 12
9878: ARRAY
9879: PPUSH
9880: LD_INT 60
9882: PPUSH
9883: CALL_OW 234
// end ;
9887: PPOPN 1
9889: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9890: LD_EXP 17
9894: PUSH
9895: LD_EXP 47
9899: AND
9900: IFFALSE 9999
9902: GO 9904
9904: DISABLE
9905: LD_INT 0
9907: PPUSH
9908: PPUSH
// begin enable ;
9909: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9910: LD_ADDR_VAR 0 1
9914: PUSH
9915: LD_INT 22
9917: PUSH
9918: LD_OWVAR 2
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 61
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 33
9935: PUSH
9936: LD_INT 2
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 69
9952: ST_TO_ADDR
// if not tmp then
9953: LD_VAR 0 1
9957: NOT
9958: IFFALSE 9962
// exit ;
9960: GO 9999
// for i in tmp do
9962: LD_ADDR_VAR 0 2
9966: PUSH
9967: LD_VAR 0 1
9971: PUSH
9972: FOR_IN
9973: IFFALSE 9997
// if IsControledBy ( i ) then
9975: LD_VAR 0 2
9979: PPUSH
9980: CALL_OW 312
9984: IFFALSE 9995
// ComUnlink ( i ) ;
9986: LD_VAR 0 2
9990: PPUSH
9991: CALL_OW 136
9995: GO 9972
9997: POP
9998: POP
// end ;
9999: PPOPN 2
10001: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10002: LD_EXP 17
10006: PUSH
10007: LD_EXP 48
10011: AND
10012: IFFALSE 10152
10014: GO 10016
10016: DISABLE
10017: LD_INT 0
10019: PPUSH
10020: PPUSH
// begin ToLua ( displayPowell(); ) ;
10021: LD_STRING displayPowell();
10023: PPUSH
10024: CALL_OW 559
// uc_side := 0 ;
10028: LD_ADDR_OWVAR 20
10032: PUSH
10033: LD_INT 0
10035: ST_TO_ADDR
// uc_nation := 2 ;
10036: LD_ADDR_OWVAR 21
10040: PUSH
10041: LD_INT 2
10043: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10044: LD_ADDR_OWVAR 37
10048: PUSH
10049: LD_INT 14
10051: ST_TO_ADDR
// vc_engine := engine_siberite ;
10052: LD_ADDR_OWVAR 39
10056: PUSH
10057: LD_INT 3
10059: ST_TO_ADDR
// vc_control := control_apeman ;
10060: LD_ADDR_OWVAR 38
10064: PUSH
10065: LD_INT 5
10067: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10068: LD_ADDR_OWVAR 40
10072: PUSH
10073: LD_INT 29
10075: ST_TO_ADDR
// un := CreateVehicle ;
10076: LD_ADDR_VAR 0 2
10080: PUSH
10081: CALL_OW 45
10085: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10086: LD_VAR 0 2
10090: PPUSH
10091: LD_INT 1
10093: PPUSH
10094: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10098: LD_INT 35
10100: PPUSH
10101: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10105: LD_VAR 0 2
10109: PPUSH
10110: LD_INT 22
10112: PUSH
10113: LD_OWVAR 2
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PPUSH
10122: CALL_OW 69
10126: PPUSH
10127: LD_VAR 0 2
10131: PPUSH
10132: CALL_OW 74
10136: PPUSH
10137: CALL_OW 115
// until IsDead ( un ) ;
10141: LD_VAR 0 2
10145: PPUSH
10146: CALL_OW 301
10150: IFFALSE 10098
// end ;
10152: PPOPN 2
10154: END
// every 0 0$1 trigger StreamModeActive and sStu do
10155: LD_EXP 17
10159: PUSH
10160: LD_EXP 56
10164: AND
10165: IFFALSE 10181
10167: GO 10169
10169: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10170: LD_STRING displayStucuk();
10172: PPUSH
10173: CALL_OW 559
// ResetFog ;
10177: CALL_OW 335
// end ;
10181: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10182: LD_EXP 17
10186: PUSH
10187: LD_EXP 49
10191: AND
10192: IFFALSE 10333
10194: GO 10196
10196: DISABLE
10197: LD_INT 0
10199: PPUSH
10200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10201: LD_ADDR_VAR 0 2
10205: PUSH
10206: LD_INT 22
10208: PUSH
10209: LD_OWVAR 2
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 21
10220: PUSH
10221: LD_INT 1
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: ST_TO_ADDR
// if not tmp then
10237: LD_VAR 0 2
10241: NOT
10242: IFFALSE 10246
// exit ;
10244: GO 10333
// un := tmp [ rand ( 1 , tmp ) ] ;
10246: LD_ADDR_VAR 0 1
10250: PUSH
10251: LD_VAR 0 2
10255: PUSH
10256: LD_INT 1
10258: PPUSH
10259: LD_VAR 0 2
10263: PPUSH
10264: CALL_OW 12
10268: ARRAY
10269: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10270: LD_VAR 0 1
10274: PPUSH
10275: LD_INT 0
10277: PPUSH
10278: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10282: LD_VAR 0 1
10286: PPUSH
10287: LD_OWVAR 3
10291: PUSH
10292: LD_VAR 0 1
10296: DIFF
10297: PPUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 74
10307: PPUSH
10308: CALL_OW 115
// wait ( 0 0$20 ) ;
10312: LD_INT 700
10314: PPUSH
10315: CALL_OW 67
// SetSide ( un , your_side ) ;
10319: LD_VAR 0 1
10323: PPUSH
10324: LD_OWVAR 2
10328: PPUSH
10329: CALL_OW 235
// end ;
10333: PPOPN 2
10335: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10336: LD_EXP 17
10340: PUSH
10341: LD_EXP 50
10345: AND
10346: IFFALSE 10452
10348: GO 10350
10350: DISABLE
10351: LD_INT 0
10353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10354: LD_ADDR_VAR 0 1
10358: PUSH
10359: LD_INT 22
10361: PUSH
10362: LD_OWVAR 2
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: LD_INT 30
10376: PUSH
10377: LD_INT 0
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 30
10386: PUSH
10387: LD_INT 1
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 69
10407: ST_TO_ADDR
// if not depot then
10408: LD_VAR 0 1
10412: NOT
10413: IFFALSE 10417
// exit ;
10415: GO 10452
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10417: LD_VAR 0 1
10421: PUSH
10422: LD_INT 1
10424: ARRAY
10425: PPUSH
10426: CALL_OW 250
10430: PPUSH
10431: LD_VAR 0 1
10435: PUSH
10436: LD_INT 1
10438: ARRAY
10439: PPUSH
10440: CALL_OW 251
10444: PPUSH
10445: LD_INT 70
10447: PPUSH
10448: CALL_OW 495
// end ;
10452: PPOPN 1
10454: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10455: LD_EXP 17
10459: PUSH
10460: LD_EXP 51
10464: AND
10465: IFFALSE 10676
10467: GO 10469
10469: DISABLE
10470: LD_INT 0
10472: PPUSH
10473: PPUSH
10474: PPUSH
10475: PPUSH
10476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_INT 22
10484: PUSH
10485: LD_OWVAR 2
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 21
10496: PUSH
10497: LD_INT 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 69
10512: ST_TO_ADDR
// if not tmp then
10513: LD_VAR 0 5
10517: NOT
10518: IFFALSE 10522
// exit ;
10520: GO 10676
// for i in tmp do
10522: LD_ADDR_VAR 0 1
10526: PUSH
10527: LD_VAR 0 5
10531: PUSH
10532: FOR_IN
10533: IFFALSE 10674
// begin d := rand ( 0 , 5 ) ;
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: LD_INT 0
10542: PPUSH
10543: LD_INT 5
10545: PPUSH
10546: CALL_OW 12
10550: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10551: LD_ADDR_VAR 0 2
10555: PUSH
10556: LD_VAR 0 1
10560: PPUSH
10561: CALL_OW 250
10565: PPUSH
10566: LD_VAR 0 4
10570: PPUSH
10571: LD_INT 3
10573: PPUSH
10574: LD_INT 12
10576: PPUSH
10577: CALL_OW 12
10581: PPUSH
10582: CALL_OW 272
10586: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10587: LD_ADDR_VAR 0 3
10591: PUSH
10592: LD_VAR 0 1
10596: PPUSH
10597: CALL_OW 251
10601: PPUSH
10602: LD_VAR 0 4
10606: PPUSH
10607: LD_INT 3
10609: PPUSH
10610: LD_INT 12
10612: PPUSH
10613: CALL_OW 12
10617: PPUSH
10618: CALL_OW 273
10622: ST_TO_ADDR
// if ValidHex ( x , y ) then
10623: LD_VAR 0 2
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: CALL_OW 488
10637: IFFALSE 10672
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_VAR 0 2
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: LD_INT 3
10656: PPUSH
10657: LD_INT 6
10659: PPUSH
10660: CALL_OW 12
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 483
// end ;
10672: GO 10532
10674: POP
10675: POP
// end ;
10676: PPOPN 5
10678: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10679: LD_EXP 17
10683: PUSH
10684: LD_EXP 52
10688: AND
10689: IFFALSE 10783
10691: GO 10693
10693: DISABLE
10694: LD_INT 0
10696: PPUSH
10697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: LD_INT 22
10705: PUSH
10706: LD_OWVAR 2
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 32
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 21
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: ST_TO_ADDR
// if not tmp then
10745: LD_VAR 0 2
10749: NOT
10750: IFFALSE 10754
// exit ;
10752: GO 10783
// for i in tmp do
10754: LD_ADDR_VAR 0 1
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: FOR_IN
10765: IFFALSE 10781
// SetFuel ( i , 0 ) ;
10767: LD_VAR 0 1
10771: PPUSH
10772: LD_INT 0
10774: PPUSH
10775: CALL_OW 240
10779: GO 10764
10781: POP
10782: POP
// end ;
10783: PPOPN 2
10785: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10786: LD_EXP 17
10790: PUSH
10791: LD_EXP 53
10795: AND
10796: IFFALSE 10862
10798: GO 10800
10800: DISABLE
10801: LD_INT 0
10803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10804: LD_ADDR_VAR 0 1
10808: PUSH
10809: LD_INT 22
10811: PUSH
10812: LD_OWVAR 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 30
10823: PUSH
10824: LD_INT 29
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PPUSH
10835: CALL_OW 69
10839: ST_TO_ADDR
// if not tmp then
10840: LD_VAR 0 1
10844: NOT
10845: IFFALSE 10849
// exit ;
10847: GO 10862
// DestroyUnit ( tmp [ 1 ] ) ;
10849: LD_VAR 0 1
10853: PUSH
10854: LD_INT 1
10856: ARRAY
10857: PPUSH
10858: CALL_OW 65
// end ;
10862: PPOPN 1
10864: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10865: LD_EXP 17
10869: PUSH
10870: LD_EXP 55
10874: AND
10875: IFFALSE 11004
10877: GO 10879
10879: DISABLE
10880: LD_INT 0
10882: PPUSH
// begin uc_side := 0 ;
10883: LD_ADDR_OWVAR 20
10887: PUSH
10888: LD_INT 0
10890: ST_TO_ADDR
// uc_nation := nation_arabian ;
10891: LD_ADDR_OWVAR 21
10895: PUSH
10896: LD_INT 2
10898: ST_TO_ADDR
// hc_gallery :=  ;
10899: LD_ADDR_OWVAR 33
10903: PUSH
10904: LD_STRING 
10906: ST_TO_ADDR
// hc_name :=  ;
10907: LD_ADDR_OWVAR 26
10911: PUSH
10912: LD_STRING 
10914: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10915: LD_INT 1
10917: PPUSH
10918: LD_INT 11
10920: PPUSH
10921: LD_INT 10
10923: PPUSH
10924: CALL_OW 380
// un := CreateHuman ;
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: CALL_OW 44
10937: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10938: LD_VAR 0 1
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10950: LD_INT 35
10952: PPUSH
10953: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10957: LD_VAR 0 1
10961: PPUSH
10962: LD_INT 22
10964: PUSH
10965: LD_OWVAR 2
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PPUSH
10974: CALL_OW 69
10978: PPUSH
10979: LD_VAR 0 1
10983: PPUSH
10984: CALL_OW 74
10988: PPUSH
10989: CALL_OW 115
// until IsDead ( un ) ;
10993: LD_VAR 0 1
10997: PPUSH
10998: CALL_OW 301
11002: IFFALSE 10950
// end ;
11004: PPOPN 1
11006: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11007: LD_EXP 17
11011: PUSH
11012: LD_EXP 57
11016: AND
11017: IFFALSE 11029
11019: GO 11021
11021: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11022: LD_STRING earthquake(getX(game), 0, 32)
11024: PPUSH
11025: CALL_OW 559
11029: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11030: LD_EXP 17
11034: PUSH
11035: LD_EXP 58
11039: AND
11040: IFFALSE 11131
11042: GO 11044
11044: DISABLE
11045: LD_INT 0
11047: PPUSH
// begin enable ;
11048: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11049: LD_ADDR_VAR 0 1
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_OWVAR 2
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 21
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 33
11078: PUSH
11079: LD_INT 3
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: ST_TO_ADDR
// if not tmp then
11096: LD_VAR 0 1
11100: NOT
11101: IFFALSE 11105
// exit ;
11103: GO 11131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11105: LD_VAR 0 1
11109: PUSH
11110: LD_INT 1
11112: PPUSH
11113: LD_VAR 0 1
11117: PPUSH
11118: CALL_OW 12
11122: ARRAY
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 234
// end ;
11131: PPOPN 1
11133: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11134: LD_EXP 17
11138: PUSH
11139: LD_EXP 59
11143: AND
11144: IFFALSE 11285
11146: GO 11148
11148: DISABLE
11149: LD_INT 0
11151: PPUSH
11152: PPUSH
11153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11154: LD_ADDR_VAR 0 3
11158: PUSH
11159: LD_INT 22
11161: PUSH
11162: LD_OWVAR 2
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 25
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: ST_TO_ADDR
// if not tmp then
11190: LD_VAR 0 3
11194: NOT
11195: IFFALSE 11199
// exit ;
11197: GO 11285
// un := tmp [ rand ( 1 , tmp ) ] ;
11199: LD_ADDR_VAR 0 2
11203: PUSH
11204: LD_VAR 0 3
11208: PUSH
11209: LD_INT 1
11211: PPUSH
11212: LD_VAR 0 3
11216: PPUSH
11217: CALL_OW 12
11221: ARRAY
11222: ST_TO_ADDR
// if Crawls ( un ) then
11223: LD_VAR 0 2
11227: PPUSH
11228: CALL_OW 318
11232: IFFALSE 11243
// ComWalk ( un ) ;
11234: LD_VAR 0 2
11238: PPUSH
11239: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11243: LD_VAR 0 2
11247: PPUSH
11248: LD_INT 9
11250: PPUSH
11251: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11255: LD_INT 28
11257: PPUSH
11258: LD_OWVAR 2
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11270: LD_INT 29
11272: PPUSH
11273: LD_OWVAR 2
11277: PPUSH
11278: LD_INT 2
11280: PPUSH
11281: CALL_OW 322
// end ;
11285: PPOPN 3
11287: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11288: LD_EXP 17
11292: PUSH
11293: LD_EXP 60
11297: AND
11298: IFFALSE 11409
11300: GO 11302
11302: DISABLE
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
11307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_INT 22
11315: PUSH
11316: LD_OWVAR 2
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 69
11343: ST_TO_ADDR
// if not tmp then
11344: LD_VAR 0 3
11348: NOT
11349: IFFALSE 11353
// exit ;
11351: GO 11409
// un := tmp [ rand ( 1 , tmp ) ] ;
11353: LD_ADDR_VAR 0 2
11357: PUSH
11358: LD_VAR 0 3
11362: PUSH
11363: LD_INT 1
11365: PPUSH
11366: LD_VAR 0 3
11370: PPUSH
11371: CALL_OW 12
11375: ARRAY
11376: ST_TO_ADDR
// if Crawls ( un ) then
11377: LD_VAR 0 2
11381: PPUSH
11382: CALL_OW 318
11386: IFFALSE 11397
// ComWalk ( un ) ;
11388: LD_VAR 0 2
11392: PPUSH
11393: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11397: LD_VAR 0 2
11401: PPUSH
11402: LD_INT 8
11404: PPUSH
11405: CALL_OW 336
// end ;
11409: PPOPN 3
11411: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11412: LD_EXP 17
11416: PUSH
11417: LD_EXP 61
11421: AND
11422: IFFALSE 11566
11424: GO 11426
11426: DISABLE
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11431: LD_ADDR_VAR 0 2
11435: PUSH
11436: LD_INT 22
11438: PUSH
11439: LD_OWVAR 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 2
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: LD_INT 34
11463: PUSH
11464: LD_INT 12
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 34
11473: PUSH
11474: LD_INT 51
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 34
11483: PUSH
11484: LD_INT 32
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 69
11506: ST_TO_ADDR
// if not tmp then
11507: LD_VAR 0 2
11511: NOT
11512: IFFALSE 11516
// exit ;
11514: GO 11566
// for i in tmp do
11516: LD_ADDR_VAR 0 1
11520: PUSH
11521: LD_VAR 0 2
11525: PUSH
11526: FOR_IN
11527: IFFALSE 11564
// if GetCargo ( i , mat_artifact ) = 0 then
11529: LD_VAR 0 1
11533: PPUSH
11534: LD_INT 4
11536: PPUSH
11537: CALL_OW 289
11541: PUSH
11542: LD_INT 0
11544: EQUAL
11545: IFFALSE 11562
// SetCargo ( i , mat_siberit , 100 ) ;
11547: LD_VAR 0 1
11551: PPUSH
11552: LD_INT 3
11554: PPUSH
11555: LD_INT 100
11557: PPUSH
11558: CALL_OW 290
11562: GO 11526
11564: POP
11565: POP
// end ;
11566: PPOPN 2
11568: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11569: LD_EXP 17
11573: PUSH
11574: LD_EXP 62
11578: AND
11579: IFFALSE 11762
11581: GO 11583
11583: DISABLE
11584: LD_INT 0
11586: PPUSH
11587: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_OWVAR 2
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PPUSH
11605: CALL_OW 69
11609: ST_TO_ADDR
// if not tmp then
11610: LD_VAR 0 2
11614: NOT
11615: IFFALSE 11619
// exit ;
11617: GO 11762
// for i := 1 to 2 do
11619: LD_ADDR_VAR 0 1
11623: PUSH
11624: DOUBLE
11625: LD_INT 1
11627: DEC
11628: ST_TO_ADDR
11629: LD_INT 2
11631: PUSH
11632: FOR_TO
11633: IFFALSE 11760
// begin uc_side := your_side ;
11635: LD_ADDR_OWVAR 20
11639: PUSH
11640: LD_OWVAR 2
11644: ST_TO_ADDR
// uc_nation := nation_american ;
11645: LD_ADDR_OWVAR 21
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// vc_chassis := us_morphling ;
11653: LD_ADDR_OWVAR 37
11657: PUSH
11658: LD_INT 5
11660: ST_TO_ADDR
// vc_engine := engine_siberite ;
11661: LD_ADDR_OWVAR 39
11665: PUSH
11666: LD_INT 3
11668: ST_TO_ADDR
// vc_control := control_computer ;
11669: LD_ADDR_OWVAR 38
11673: PUSH
11674: LD_INT 3
11676: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11677: LD_ADDR_OWVAR 40
11681: PUSH
11682: LD_INT 10
11684: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11685: LD_VAR 0 2
11689: PUSH
11690: LD_INT 1
11692: ARRAY
11693: PPUSH
11694: CALL_OW 310
11698: NOT
11699: IFFALSE 11746
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11701: CALL_OW 45
11705: PPUSH
11706: LD_VAR 0 2
11710: PUSH
11711: LD_INT 1
11713: ARRAY
11714: PPUSH
11715: CALL_OW 250
11719: PPUSH
11720: LD_VAR 0 2
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: PPUSH
11729: CALL_OW 251
11733: PPUSH
11734: LD_INT 12
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 50
11744: GO 11758
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11746: CALL_OW 45
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 51
// end ;
11758: GO 11632
11760: POP
11761: POP
// end ;
11762: PPOPN 2
11764: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11765: LD_EXP 17
11769: PUSH
11770: LD_EXP 63
11774: AND
11775: IFFALSE 11997
11777: GO 11779
11779: DISABLE
11780: LD_INT 0
11782: PPUSH
11783: PPUSH
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11788: LD_ADDR_VAR 0 6
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_OWVAR 2
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 21
11807: PUSH
11808: LD_INT 1
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: LD_INT 3
11817: PUSH
11818: LD_INT 23
11820: PUSH
11821: LD_INT 0
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 69
11841: ST_TO_ADDR
// if not tmp then
11842: LD_VAR 0 6
11846: NOT
11847: IFFALSE 11851
// exit ;
11849: GO 11997
// s1 := rand ( 1 , 4 ) ;
11851: LD_ADDR_VAR 0 2
11855: PUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_INT 4
11861: PPUSH
11862: CALL_OW 12
11866: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11867: LD_ADDR_VAR 0 4
11871: PUSH
11872: LD_VAR 0 6
11876: PUSH
11877: LD_INT 1
11879: ARRAY
11880: PPUSH
11881: LD_VAR 0 2
11885: PPUSH
11886: CALL_OW 259
11890: ST_TO_ADDR
// if s1 = 1 then
11891: LD_VAR 0 2
11895: PUSH
11896: LD_INT 1
11898: EQUAL
11899: IFFALSE 11919
// s2 := rand ( 2 , 4 ) else
11901: LD_ADDR_VAR 0 3
11905: PUSH
11906: LD_INT 2
11908: PPUSH
11909: LD_INT 4
11911: PPUSH
11912: CALL_OW 12
11916: ST_TO_ADDR
11917: GO 11927
// s2 := 1 ;
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11927: LD_ADDR_VAR 0 5
11931: PUSH
11932: LD_VAR 0 6
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: CALL_OW 259
11950: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11951: LD_VAR 0 6
11955: PUSH
11956: LD_INT 1
11958: ARRAY
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_VAR 0 5
11969: PPUSH
11970: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11974: LD_VAR 0 6
11978: PUSH
11979: LD_INT 1
11981: ARRAY
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_VAR 0 4
11992: PPUSH
11993: CALL_OW 237
// end ;
11997: PPOPN 6
11999: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12000: LD_EXP 17
12004: PUSH
12005: LD_EXP 64
12009: AND
12010: IFFALSE 12089
12012: GO 12014
12014: DISABLE
12015: LD_INT 0
12017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12018: LD_ADDR_VAR 0 1
12022: PUSH
12023: LD_INT 22
12025: PUSH
12026: LD_OWVAR 2
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 3
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: ST_TO_ADDR
// if not tmp then
12054: LD_VAR 0 1
12058: NOT
12059: IFFALSE 12063
// exit ;
12061: GO 12089
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12063: LD_VAR 0 1
12067: PUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL_OW 12
12080: ARRAY
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 234
// end ;
12089: PPOPN 1
12091: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12092: LD_EXP 17
12096: PUSH
12097: LD_EXP 65
12101: AND
12102: IFFALSE 12214
12104: GO 12106
12106: DISABLE
12107: LD_INT 0
12109: PPUSH
12110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12111: LD_ADDR_VAR 0 2
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_OWVAR 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 27
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 30
12143: PUSH
12144: LD_INT 26
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 30
12153: PUSH
12154: LD_INT 28
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PPUSH
12171: CALL_OW 69
12175: ST_TO_ADDR
// if not tmp then
12176: LD_VAR 0 2
12180: NOT
12181: IFFALSE 12185
// exit ;
12183: GO 12214
// for i in tmp do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_VAR 0 2
12194: PUSH
12195: FOR_IN
12196: IFFALSE 12212
// SetLives ( i , 1 ) ;
12198: LD_VAR 0 1
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: CALL_OW 234
12210: GO 12195
12212: POP
12213: POP
// end ;
12214: PPOPN 2
12216: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12217: LD_EXP 17
12221: PUSH
12222: LD_EXP 66
12226: AND
12227: IFFALSE 12501
12229: GO 12231
12231: DISABLE
12232: LD_INT 0
12234: PPUSH
12235: PPUSH
12236: PPUSH
// begin i := rand ( 1 , 7 ) ;
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_INT 7
12247: PPUSH
12248: CALL_OW 12
12252: ST_TO_ADDR
// case i of 1 :
12253: LD_VAR 0 1
12257: PUSH
12258: LD_INT 1
12260: DOUBLE
12261: EQUAL
12262: IFTRUE 12266
12264: GO 12276
12266: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12267: LD_STRING earthquake(getX(game), 0, 32)
12269: PPUSH
12270: CALL_OW 559
12274: GO 12501
12276: LD_INT 2
12278: DOUBLE
12279: EQUAL
12280: IFTRUE 12284
12282: GO 12298
12284: POP
// begin ToLua ( displayStucuk(); ) ;
12285: LD_STRING displayStucuk();
12287: PPUSH
12288: CALL_OW 559
// ResetFog ;
12292: CALL_OW 335
// end ; 3 :
12296: GO 12501
12298: LD_INT 3
12300: DOUBLE
12301: EQUAL
12302: IFTRUE 12306
12304: GO 12410
12306: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12307: LD_ADDR_VAR 0 2
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_OWVAR 2
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 25
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PPUSH
12338: CALL_OW 69
12342: ST_TO_ADDR
// if not tmp then
12343: LD_VAR 0 2
12347: NOT
12348: IFFALSE 12352
// exit ;
12350: GO 12501
// un := tmp [ rand ( 1 , tmp ) ] ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: LD_VAR 0 2
12361: PUSH
12362: LD_INT 1
12364: PPUSH
12365: LD_VAR 0 2
12369: PPUSH
12370: CALL_OW 12
12374: ARRAY
12375: ST_TO_ADDR
// if Crawls ( un ) then
12376: LD_VAR 0 3
12380: PPUSH
12381: CALL_OW 318
12385: IFFALSE 12396
// ComWalk ( un ) ;
12387: LD_VAR 0 3
12391: PPUSH
12392: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 8
12403: PPUSH
12404: CALL_OW 336
// end ; 4 :
12408: GO 12501
12410: LD_INT 4
12412: DOUBLE
12413: EQUAL
12414: IFTRUE 12418
12416: GO 12479
12418: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12419: LD_ADDR_VAR 0 2
12423: PUSH
12424: LD_INT 22
12426: PUSH
12427: LD_OWVAR 2
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 30
12438: PUSH
12439: LD_INT 29
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 69
12454: ST_TO_ADDR
// if not tmp then
12455: LD_VAR 0 2
12459: NOT
12460: IFFALSE 12464
// exit ;
12462: GO 12501
// DestroyUnit ( tmp [ 1 ] ) ;
12464: LD_VAR 0 2
12468: PUSH
12469: LD_INT 1
12471: ARRAY
12472: PPUSH
12473: CALL_OW 65
// end ; 5 .. 7 :
12477: GO 12501
12479: LD_INT 5
12481: DOUBLE
12482: GREATEREQUAL
12483: IFFALSE 12491
12485: LD_INT 7
12487: DOUBLE
12488: LESSEQUAL
12489: IFTRUE 12493
12491: GO 12500
12493: POP
// StreamSibBomb ; end ;
12494: CALL 8751 0 0
12498: GO 12501
12500: POP
// end ;
12501: PPOPN 3
12503: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12504: LD_EXP 17
12508: PUSH
12509: LD_EXP 67
12513: AND
12514: IFFALSE 12670
12516: GO 12518
12518: DISABLE
12519: LD_INT 0
12521: PPUSH
12522: PPUSH
12523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12524: LD_ADDR_VAR 0 2
12528: PUSH
12529: LD_INT 81
12531: PUSH
12532: LD_OWVAR 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 21
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 21
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 69
12577: ST_TO_ADDR
// if not tmp then
12578: LD_VAR 0 2
12582: NOT
12583: IFFALSE 12587
// exit ;
12585: GO 12670
// p := 0 ;
12587: LD_ADDR_VAR 0 3
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12595: LD_INT 35
12597: PPUSH
12598: CALL_OW 67
// p := p + 1 ;
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_VAR 0 3
12611: PUSH
12612: LD_INT 1
12614: PLUS
12615: ST_TO_ADDR
// for i in tmp do
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: FOR_IN
12627: IFFALSE 12658
// if GetLives ( i ) < 1000 then
12629: LD_VAR 0 1
12633: PPUSH
12634: CALL_OW 256
12638: PUSH
12639: LD_INT 1000
12641: LESS
12642: IFFALSE 12656
// SetLives ( i , 1000 ) ;
12644: LD_VAR 0 1
12648: PPUSH
12649: LD_INT 1000
12651: PPUSH
12652: CALL_OW 234
12656: GO 12626
12658: POP
12659: POP
// until p > 20 ;
12660: LD_VAR 0 3
12664: PUSH
12665: LD_INT 20
12667: GREATER
12668: IFFALSE 12595
// end ;
12670: PPOPN 3
12672: END
// every 0 0$1 trigger StreamModeActive and sTime do
12673: LD_EXP 17
12677: PUSH
12678: LD_EXP 68
12682: AND
12683: IFFALSE 12718
12685: GO 12687
12687: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12688: LD_INT 28
12690: PPUSH
12691: LD_OWVAR 2
12695: PPUSH
12696: LD_INT 2
12698: PPUSH
12699: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12703: LD_INT 30
12705: PPUSH
12706: LD_OWVAR 2
12710: PPUSH
12711: LD_INT 2
12713: PPUSH
12714: CALL_OW 322
// end ;
12718: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12719: LD_EXP 17
12723: PUSH
12724: LD_EXP 69
12728: AND
12729: IFFALSE 12850
12731: GO 12733
12733: DISABLE
12734: LD_INT 0
12736: PPUSH
12737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12738: LD_ADDR_VAR 0 2
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_OWVAR 2
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: LD_INT 23
12770: PUSH
12771: LD_INT 0
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: ST_TO_ADDR
// if not tmp then
12792: LD_VAR 0 2
12796: NOT
12797: IFFALSE 12801
// exit ;
12799: GO 12850
// for i in tmp do
12801: LD_ADDR_VAR 0 1
12805: PUSH
12806: LD_VAR 0 2
12810: PUSH
12811: FOR_IN
12812: IFFALSE 12848
// begin if Crawls ( i ) then
12814: LD_VAR 0 1
12818: PPUSH
12819: CALL_OW 318
12823: IFFALSE 12834
// ComWalk ( i ) ;
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 138
// SetClass ( i , 2 ) ;
12834: LD_VAR 0 1
12838: PPUSH
12839: LD_INT 2
12841: PPUSH
12842: CALL_OW 336
// end ;
12846: GO 12811
12848: POP
12849: POP
// end ;
12850: PPOPN 2
12852: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12853: LD_EXP 17
12857: PUSH
12858: LD_EXP 70
12862: AND
12863: IFFALSE 13144
12865: GO 12867
12867: DISABLE
12868: LD_INT 0
12870: PPUSH
12871: PPUSH
12872: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12873: LD_OWVAR 2
12877: PPUSH
12878: LD_INT 9
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12891: LD_INT 9
12893: PPUSH
12894: LD_OWVAR 2
12898: PPUSH
12899: CALL_OW 343
// uc_side := 9 ;
12903: LD_ADDR_OWVAR 20
12907: PUSH
12908: LD_INT 9
12910: ST_TO_ADDR
// uc_nation := 2 ;
12911: LD_ADDR_OWVAR 21
12915: PUSH
12916: LD_INT 2
12918: ST_TO_ADDR
// hc_name := Dark Warrior ;
12919: LD_ADDR_OWVAR 26
12923: PUSH
12924: LD_STRING Dark Warrior
12926: ST_TO_ADDR
// hc_gallery :=  ;
12927: LD_ADDR_OWVAR 33
12931: PUSH
12932: LD_STRING 
12934: ST_TO_ADDR
// hc_noskilllimit := true ;
12935: LD_ADDR_OWVAR 76
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12943: LD_ADDR_OWVAR 31
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 30
12956: PUSH
12957: LD_INT 30
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: ST_TO_ADDR
// un := CreateHuman ;
12966: LD_ADDR_VAR 0 3
12970: PUSH
12971: CALL_OW 44
12975: ST_TO_ADDR
// hc_noskilllimit := false ;
12976: LD_ADDR_OWVAR 76
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 51
// p := 0 ;
12996: LD_ADDR_VAR 0 2
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13004: LD_INT 35
13006: PPUSH
13007: CALL_OW 67
// p := p + 1 ;
13011: LD_ADDR_VAR 0 2
13015: PUSH
13016: LD_VAR 0 2
13020: PUSH
13021: LD_INT 1
13023: PLUS
13024: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13025: LD_VAR 0 3
13029: PPUSH
13030: CALL_OW 256
13034: PUSH
13035: LD_INT 1000
13037: LESS
13038: IFFALSE 13052
// SetLives ( un , 1000 ) ;
13040: LD_VAR 0 3
13044: PPUSH
13045: LD_INT 1000
13047: PPUSH
13048: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13052: LD_VAR 0 3
13056: PPUSH
13057: LD_INT 81
13059: PUSH
13060: LD_OWVAR 2
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 91
13071: PUSH
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 30
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: PPUSH
13094: LD_VAR 0 3
13098: PPUSH
13099: CALL_OW 74
13103: PPUSH
13104: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13108: LD_VAR 0 2
13112: PUSH
13113: LD_INT 60
13115: GREATER
13116: PUSH
13117: LD_VAR 0 3
13121: PPUSH
13122: CALL_OW 301
13126: OR
13127: IFFALSE 13004
// if un then
13129: LD_VAR 0 3
13133: IFFALSE 13144
// RemoveUnit ( un ) ;
13135: LD_VAR 0 3
13139: PPUSH
13140: CALL_OW 64
// end ;
13144: PPOPN 3
13146: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13147: LD_INT 0
13149: PPUSH
// case cmd of 301 :
13150: LD_VAR 0 1
13154: PUSH
13155: LD_INT 301
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13195
13163: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13164: LD_VAR 0 6
13168: PPUSH
13169: LD_VAR 0 7
13173: PPUSH
13174: LD_VAR 0 8
13178: PPUSH
13179: LD_VAR 0 4
13183: PPUSH
13184: LD_VAR 0 5
13188: PPUSH
13189: CALL 14396 0 5
13193: GO 13316
13195: LD_INT 302
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13240
13203: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13204: LD_VAR 0 6
13208: PPUSH
13209: LD_VAR 0 7
13213: PPUSH
13214: LD_VAR 0 8
13218: PPUSH
13219: LD_VAR 0 9
13223: PPUSH
13224: LD_VAR 0 4
13228: PPUSH
13229: LD_VAR 0 5
13233: PPUSH
13234: CALL 14487 0 6
13238: GO 13316
13240: LD_INT 303
13242: DOUBLE
13243: EQUAL
13244: IFTRUE 13248
13246: GO 13285
13248: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13249: LD_VAR 0 6
13253: PPUSH
13254: LD_VAR 0 7
13258: PPUSH
13259: LD_VAR 0 8
13263: PPUSH
13264: LD_VAR 0 9
13268: PPUSH
13269: LD_VAR 0 4
13273: PPUSH
13274: LD_VAR 0 5
13278: PPUSH
13279: CALL 13321 0 6
13283: GO 13316
13285: LD_INT 304
13287: DOUBLE
13288: EQUAL
13289: IFTRUE 13293
13291: GO 13315
13293: POP
// hHackTeleport ( unit , x , y ) ; end ;
13294: LD_VAR 0 2
13298: PPUSH
13299: LD_VAR 0 4
13303: PPUSH
13304: LD_VAR 0 5
13308: PPUSH
13309: CALL 15080 0 3
13313: GO 13316
13315: POP
// end ;
13316: LD_VAR 0 12
13320: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13321: LD_INT 0
13323: PPUSH
13324: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13325: LD_VAR 0 1
13329: PUSH
13330: LD_INT 1
13332: LESS
13333: PUSH
13334: LD_VAR 0 1
13338: PUSH
13339: LD_INT 3
13341: GREATER
13342: OR
13343: PUSH
13344: LD_VAR 0 5
13348: PPUSH
13349: LD_VAR 0 6
13353: PPUSH
13354: CALL_OW 428
13358: OR
13359: IFFALSE 13363
// exit ;
13361: GO 14083
// uc_side := your_side ;
13363: LD_ADDR_OWVAR 20
13367: PUSH
13368: LD_OWVAR 2
13372: ST_TO_ADDR
// uc_nation := nation ;
13373: LD_ADDR_OWVAR 21
13377: PUSH
13378: LD_VAR 0 1
13382: ST_TO_ADDR
// bc_level = 1 ;
13383: LD_ADDR_OWVAR 43
13387: PUSH
13388: LD_INT 1
13390: ST_TO_ADDR
// case btype of 1 :
13391: LD_VAR 0 2
13395: PUSH
13396: LD_INT 1
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13415
13404: POP
// bc_type := b_depot ; 2 :
13405: LD_ADDR_OWVAR 42
13409: PUSH
13410: LD_INT 0
13412: ST_TO_ADDR
13413: GO 14027
13415: LD_INT 2
13417: DOUBLE
13418: EQUAL
13419: IFTRUE 13423
13421: GO 13434
13423: POP
// bc_type := b_warehouse ; 3 :
13424: LD_ADDR_OWVAR 42
13428: PUSH
13429: LD_INT 1
13431: ST_TO_ADDR
13432: GO 14027
13434: LD_INT 3
13436: DOUBLE
13437: EQUAL
13438: IFTRUE 13442
13440: GO 13453
13442: POP
// bc_type := b_lab ; 4 .. 9 :
13443: LD_ADDR_OWVAR 42
13447: PUSH
13448: LD_INT 6
13450: ST_TO_ADDR
13451: GO 14027
13453: LD_INT 4
13455: DOUBLE
13456: GREATEREQUAL
13457: IFFALSE 13465
13459: LD_INT 9
13461: DOUBLE
13462: LESSEQUAL
13463: IFTRUE 13467
13465: GO 13519
13467: POP
// begin bc_type := b_lab_half ;
13468: LD_ADDR_OWVAR 42
13472: PUSH
13473: LD_INT 7
13475: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13476: LD_ADDR_OWVAR 44
13480: PUSH
13481: LD_INT 10
13483: PUSH
13484: LD_INT 11
13486: PUSH
13487: LD_INT 12
13489: PUSH
13490: LD_INT 15
13492: PUSH
13493: LD_INT 14
13495: PUSH
13496: LD_INT 13
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: LD_VAR 0 2
13511: PUSH
13512: LD_INT 3
13514: MINUS
13515: ARRAY
13516: ST_TO_ADDR
// end ; 10 .. 13 :
13517: GO 14027
13519: LD_INT 10
13521: DOUBLE
13522: GREATEREQUAL
13523: IFFALSE 13531
13525: LD_INT 13
13527: DOUBLE
13528: LESSEQUAL
13529: IFTRUE 13533
13531: GO 13610
13533: POP
// begin bc_type := b_lab_full ;
13534: LD_ADDR_OWVAR 42
13538: PUSH
13539: LD_INT 8
13541: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13542: LD_ADDR_OWVAR 44
13546: PUSH
13547: LD_INT 10
13549: PUSH
13550: LD_INT 12
13552: PUSH
13553: LD_INT 14
13555: PUSH
13556: LD_INT 13
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_VAR 0 2
13569: PUSH
13570: LD_INT 9
13572: MINUS
13573: ARRAY
13574: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13575: LD_ADDR_OWVAR 45
13579: PUSH
13580: LD_INT 11
13582: PUSH
13583: LD_INT 15
13585: PUSH
13586: LD_INT 12
13588: PUSH
13589: LD_INT 15
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_VAR 0 2
13602: PUSH
13603: LD_INT 9
13605: MINUS
13606: ARRAY
13607: ST_TO_ADDR
// end ; 14 :
13608: GO 14027
13610: LD_INT 14
13612: DOUBLE
13613: EQUAL
13614: IFTRUE 13618
13616: GO 13629
13618: POP
// bc_type := b_workshop ; 15 :
13619: LD_ADDR_OWVAR 42
13623: PUSH
13624: LD_INT 2
13626: ST_TO_ADDR
13627: GO 14027
13629: LD_INT 15
13631: DOUBLE
13632: EQUAL
13633: IFTRUE 13637
13635: GO 13648
13637: POP
// bc_type := b_factory ; 16 :
13638: LD_ADDR_OWVAR 42
13642: PUSH
13643: LD_INT 3
13645: ST_TO_ADDR
13646: GO 14027
13648: LD_INT 16
13650: DOUBLE
13651: EQUAL
13652: IFTRUE 13656
13654: GO 13667
13656: POP
// bc_type := b_ext_gun ; 17 :
13657: LD_ADDR_OWVAR 42
13661: PUSH
13662: LD_INT 17
13664: ST_TO_ADDR
13665: GO 14027
13667: LD_INT 17
13669: DOUBLE
13670: EQUAL
13671: IFTRUE 13675
13673: GO 13703
13675: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13676: LD_ADDR_OWVAR 42
13680: PUSH
13681: LD_INT 19
13683: PUSH
13684: LD_INT 23
13686: PUSH
13687: LD_INT 19
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: PUSH
13695: LD_VAR 0 1
13699: ARRAY
13700: ST_TO_ADDR
13701: GO 14027
13703: LD_INT 18
13705: DOUBLE
13706: EQUAL
13707: IFTRUE 13711
13709: GO 13722
13711: POP
// bc_type := b_ext_radar ; 19 :
13712: LD_ADDR_OWVAR 42
13716: PUSH
13717: LD_INT 20
13719: ST_TO_ADDR
13720: GO 14027
13722: LD_INT 19
13724: DOUBLE
13725: EQUAL
13726: IFTRUE 13730
13728: GO 13741
13730: POP
// bc_type := b_ext_radio ; 20 :
13731: LD_ADDR_OWVAR 42
13735: PUSH
13736: LD_INT 22
13738: ST_TO_ADDR
13739: GO 14027
13741: LD_INT 20
13743: DOUBLE
13744: EQUAL
13745: IFTRUE 13749
13747: GO 13760
13749: POP
// bc_type := b_ext_siberium ; 21 :
13750: LD_ADDR_OWVAR 42
13754: PUSH
13755: LD_INT 21
13757: ST_TO_ADDR
13758: GO 14027
13760: LD_INT 21
13762: DOUBLE
13763: EQUAL
13764: IFTRUE 13768
13766: GO 13779
13768: POP
// bc_type := b_ext_computer ; 22 :
13769: LD_ADDR_OWVAR 42
13773: PUSH
13774: LD_INT 24
13776: ST_TO_ADDR
13777: GO 14027
13779: LD_INT 22
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 13798
13787: POP
// bc_type := b_ext_track ; 23 :
13788: LD_ADDR_OWVAR 42
13792: PUSH
13793: LD_INT 16
13795: ST_TO_ADDR
13796: GO 14027
13798: LD_INT 23
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13817
13806: POP
// bc_type := b_ext_laser ; 24 :
13807: LD_ADDR_OWVAR 42
13811: PUSH
13812: LD_INT 25
13814: ST_TO_ADDR
13815: GO 14027
13817: LD_INT 24
13819: DOUBLE
13820: EQUAL
13821: IFTRUE 13825
13823: GO 13836
13825: POP
// bc_type := b_control_tower ; 25 :
13826: LD_ADDR_OWVAR 42
13830: PUSH
13831: LD_INT 36
13833: ST_TO_ADDR
13834: GO 14027
13836: LD_INT 25
13838: DOUBLE
13839: EQUAL
13840: IFTRUE 13844
13842: GO 13855
13844: POP
// bc_type := b_breastwork ; 26 :
13845: LD_ADDR_OWVAR 42
13849: PUSH
13850: LD_INT 31
13852: ST_TO_ADDR
13853: GO 14027
13855: LD_INT 26
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 13874
13863: POP
// bc_type := b_bunker ; 27 :
13864: LD_ADDR_OWVAR 42
13868: PUSH
13869: LD_INT 32
13871: ST_TO_ADDR
13872: GO 14027
13874: LD_INT 27
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 13893
13882: POP
// bc_type := b_turret ; 28 :
13883: LD_ADDR_OWVAR 42
13887: PUSH
13888: LD_INT 33
13890: ST_TO_ADDR
13891: GO 14027
13893: LD_INT 28
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 13912
13901: POP
// bc_type := b_armoury ; 29 :
13902: LD_ADDR_OWVAR 42
13906: PUSH
13907: LD_INT 4
13909: ST_TO_ADDR
13910: GO 14027
13912: LD_INT 29
13914: DOUBLE
13915: EQUAL
13916: IFTRUE 13920
13918: GO 13931
13920: POP
// bc_type := b_barracks ; 30 :
13921: LD_ADDR_OWVAR 42
13925: PUSH
13926: LD_INT 5
13928: ST_TO_ADDR
13929: GO 14027
13931: LD_INT 30
13933: DOUBLE
13934: EQUAL
13935: IFTRUE 13939
13937: GO 13950
13939: POP
// bc_type := b_solar_power ; 31 :
13940: LD_ADDR_OWVAR 42
13944: PUSH
13945: LD_INT 27
13947: ST_TO_ADDR
13948: GO 14027
13950: LD_INT 31
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 13969
13958: POP
// bc_type := b_oil_power ; 32 :
13959: LD_ADDR_OWVAR 42
13963: PUSH
13964: LD_INT 26
13966: ST_TO_ADDR
13967: GO 14027
13969: LD_INT 32
13971: DOUBLE
13972: EQUAL
13973: IFTRUE 13977
13975: GO 13988
13977: POP
// bc_type := b_siberite_power ; 33 :
13978: LD_ADDR_OWVAR 42
13982: PUSH
13983: LD_INT 28
13985: ST_TO_ADDR
13986: GO 14027
13988: LD_INT 33
13990: DOUBLE
13991: EQUAL
13992: IFTRUE 13996
13994: GO 14007
13996: POP
// bc_type := b_oil_mine ; 34 :
13997: LD_ADDR_OWVAR 42
14001: PUSH
14002: LD_INT 29
14004: ST_TO_ADDR
14005: GO 14027
14007: LD_INT 34
14009: DOUBLE
14010: EQUAL
14011: IFTRUE 14015
14013: GO 14026
14015: POP
// bc_type := b_siberite_mine ; end ;
14016: LD_ADDR_OWVAR 42
14020: PUSH
14021: LD_INT 30
14023: ST_TO_ADDR
14024: GO 14027
14026: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14027: LD_ADDR_VAR 0 8
14031: PUSH
14032: LD_VAR 0 5
14036: PPUSH
14037: LD_VAR 0 6
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: CALL_OW 47
14051: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14052: LD_OWVAR 42
14056: PUSH
14057: LD_INT 32
14059: PUSH
14060: LD_INT 33
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: IN
14067: IFFALSE 14083
// PlaceWeaponTurret ( b , weapon ) ;
14069: LD_VAR 0 8
14073: PPUSH
14074: LD_VAR 0 4
14078: PPUSH
14079: CALL_OW 431
// end ;
14083: LD_VAR 0 7
14087: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14088: LD_INT 0
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14094: LD_ADDR_VAR 0 4
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_OWVAR 2
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 30
14116: PUSH
14117: LD_INT 0
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: ST_TO_ADDR
// if not tmp then
14148: LD_VAR 0 4
14152: NOT
14153: IFFALSE 14157
// exit ;
14155: GO 14216
// for i in tmp do
14157: LD_ADDR_VAR 0 2
14161: PUSH
14162: LD_VAR 0 4
14166: PUSH
14167: FOR_IN
14168: IFFALSE 14214
// for j = 1 to 3 do
14170: LD_ADDR_VAR 0 3
14174: PUSH
14175: DOUBLE
14176: LD_INT 1
14178: DEC
14179: ST_TO_ADDR
14180: LD_INT 3
14182: PUSH
14183: FOR_TO
14184: IFFALSE 14210
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14186: LD_VAR 0 2
14190: PPUSH
14191: CALL_OW 274
14195: PPUSH
14196: LD_VAR 0 3
14200: PPUSH
14201: LD_INT 99999
14203: PPUSH
14204: CALL_OW 277
14208: GO 14183
14210: POP
14211: POP
14212: GO 14167
14214: POP
14215: POP
// end ;
14216: LD_VAR 0 1
14220: RET
// export function hHackSetLevel10 ; var i , j ; begin
14221: LD_INT 0
14223: PPUSH
14224: PPUSH
14225: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14226: LD_ADDR_VAR 0 2
14230: PUSH
14231: LD_INT 21
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PPUSH
14241: CALL_OW 69
14245: PUSH
14246: FOR_IN
14247: IFFALSE 14299
// if IsSelected ( i ) then
14249: LD_VAR 0 2
14253: PPUSH
14254: CALL_OW 306
14258: IFFALSE 14297
// begin for j := 1 to 4 do
14260: LD_ADDR_VAR 0 3
14264: PUSH
14265: DOUBLE
14266: LD_INT 1
14268: DEC
14269: ST_TO_ADDR
14270: LD_INT 4
14272: PUSH
14273: FOR_TO
14274: IFFALSE 14295
// SetSkill ( i , j , 10 ) ;
14276: LD_VAR 0 2
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 10
14288: PPUSH
14289: CALL_OW 237
14293: GO 14273
14295: POP
14296: POP
// end ;
14297: GO 14246
14299: POP
14300: POP
// end ;
14301: LD_VAR 0 1
14305: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14306: LD_INT 0
14308: PPUSH
14309: PPUSH
14310: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_OWVAR 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 21
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: PUSH
14347: FOR_IN
14348: IFFALSE 14389
// begin for j := 1 to 4 do
14350: LD_ADDR_VAR 0 3
14354: PUSH
14355: DOUBLE
14356: LD_INT 1
14358: DEC
14359: ST_TO_ADDR
14360: LD_INT 4
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14385
// SetSkill ( i , j , 10 ) ;
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 10
14378: PPUSH
14379: CALL_OW 237
14383: GO 14363
14385: POP
14386: POP
// end ;
14387: GO 14347
14389: POP
14390: POP
// end ;
14391: LD_VAR 0 1
14395: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14396: LD_INT 0
14398: PPUSH
// uc_side := your_side ;
14399: LD_ADDR_OWVAR 20
14403: PUSH
14404: LD_OWVAR 2
14408: ST_TO_ADDR
// uc_nation := nation ;
14409: LD_ADDR_OWVAR 21
14413: PUSH
14414: LD_VAR 0 1
14418: ST_TO_ADDR
// InitHc ;
14419: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14423: LD_INT 0
14425: PPUSH
14426: LD_VAR 0 2
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14440: LD_VAR 0 4
14444: PPUSH
14445: LD_VAR 0 5
14449: PPUSH
14450: CALL_OW 428
14454: PUSH
14455: LD_INT 0
14457: EQUAL
14458: IFFALSE 14482
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14460: CALL_OW 44
14464: PPUSH
14465: LD_VAR 0 4
14469: PPUSH
14470: LD_VAR 0 5
14474: PPUSH
14475: LD_INT 1
14477: PPUSH
14478: CALL_OW 48
// end ;
14482: LD_VAR 0 6
14486: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14487: LD_INT 0
14489: PPUSH
14490: PPUSH
// uc_side := your_side ;
14491: LD_ADDR_OWVAR 20
14495: PUSH
14496: LD_OWVAR 2
14500: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14501: LD_VAR 0 1
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: IN
14528: IFFALSE 14540
// uc_nation := nation_american else
14530: LD_ADDR_OWVAR 21
14534: PUSH
14535: LD_INT 1
14537: ST_TO_ADDR
14538: GO 14583
// if chassis in [ 11 , 12 , 13 , 14 ] then
14540: LD_VAR 0 1
14544: PUSH
14545: LD_INT 11
14547: PUSH
14548: LD_INT 12
14550: PUSH
14551: LD_INT 13
14553: PUSH
14554: LD_INT 14
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: IN
14563: IFFALSE 14575
// uc_nation := nation_arabian else
14565: LD_ADDR_OWVAR 21
14569: PUSH
14570: LD_INT 2
14572: ST_TO_ADDR
14573: GO 14583
// uc_nation := nation_russian ;
14575: LD_ADDR_OWVAR 21
14579: PUSH
14580: LD_INT 3
14582: ST_TO_ADDR
// vc_chassis := chassis ;
14583: LD_ADDR_OWVAR 37
14587: PUSH
14588: LD_VAR 0 1
14592: ST_TO_ADDR
// vc_engine := engine ;
14593: LD_ADDR_OWVAR 39
14597: PUSH
14598: LD_VAR 0 2
14602: ST_TO_ADDR
// vc_control := control ;
14603: LD_ADDR_OWVAR 38
14607: PUSH
14608: LD_VAR 0 3
14612: ST_TO_ADDR
// vc_weapon := weapon ;
14613: LD_ADDR_OWVAR 40
14617: PUSH
14618: LD_VAR 0 4
14622: ST_TO_ADDR
// un := CreateVehicle ;
14623: LD_ADDR_VAR 0 8
14627: PUSH
14628: CALL_OW 45
14632: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14633: LD_VAR 0 8
14637: PPUSH
14638: LD_INT 0
14640: PPUSH
14641: LD_INT 5
14643: PPUSH
14644: CALL_OW 12
14648: PPUSH
14649: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14653: LD_VAR 0 8
14657: PPUSH
14658: LD_VAR 0 5
14662: PPUSH
14663: LD_VAR 0 6
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 48
// end ;
14675: LD_VAR 0 7
14679: RET
// export hInvincible ; every 1 do
14680: GO 14682
14682: DISABLE
// hInvincible := [ ] ;
14683: LD_ADDR_EXP 71
14687: PUSH
14688: EMPTY
14689: ST_TO_ADDR
14690: END
// every 10 do var i ;
14691: GO 14693
14693: DISABLE
14694: LD_INT 0
14696: PPUSH
// begin enable ;
14697: ENABLE
// if not hInvincible then
14698: LD_EXP 71
14702: NOT
14703: IFFALSE 14707
// exit ;
14705: GO 14751
// for i in hInvincible do
14707: LD_ADDR_VAR 0 1
14711: PUSH
14712: LD_EXP 71
14716: PUSH
14717: FOR_IN
14718: IFFALSE 14749
// if GetLives ( i ) < 1000 then
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 256
14729: PUSH
14730: LD_INT 1000
14732: LESS
14733: IFFALSE 14747
// SetLives ( i , 1000 ) ;
14735: LD_VAR 0 1
14739: PPUSH
14740: LD_INT 1000
14742: PPUSH
14743: CALL_OW 234
14747: GO 14717
14749: POP
14750: POP
// end ;
14751: PPOPN 1
14753: END
// export function hHackInvincible ; var i ; begin
14754: LD_INT 0
14756: PPUSH
14757: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14758: LD_ADDR_VAR 0 2
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 1
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 21
14778: PUSH
14779: LD_INT 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: PPUSH
14791: CALL_OW 69
14795: PUSH
14796: FOR_IN
14797: IFFALSE 14858
// if IsSelected ( i ) then
14799: LD_VAR 0 2
14803: PPUSH
14804: CALL_OW 306
14808: IFFALSE 14856
// begin if i in hInvincible then
14810: LD_VAR 0 2
14814: PUSH
14815: LD_EXP 71
14819: IN
14820: IFFALSE 14840
// hInvincible := hInvincible diff i else
14822: LD_ADDR_EXP 71
14826: PUSH
14827: LD_EXP 71
14831: PUSH
14832: LD_VAR 0 2
14836: DIFF
14837: ST_TO_ADDR
14838: GO 14856
// hInvincible := hInvincible union i ;
14840: LD_ADDR_EXP 71
14844: PUSH
14845: LD_EXP 71
14849: PUSH
14850: LD_VAR 0 2
14854: UNION
14855: ST_TO_ADDR
// end ;
14856: GO 14796
14858: POP
14859: POP
// end ;
14860: LD_VAR 0 1
14864: RET
// export function hHackInvisible ; var i , j ; begin
14865: LD_INT 0
14867: PPUSH
14868: PPUSH
14869: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14870: LD_ADDR_VAR 0 2
14874: PUSH
14875: LD_INT 21
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: FOR_IN
14891: IFFALSE 14915
// if IsSelected ( i ) then
14893: LD_VAR 0 2
14897: PPUSH
14898: CALL_OW 306
14902: IFFALSE 14913
// ComForceInvisible ( i ) ;
14904: LD_VAR 0 2
14908: PPUSH
14909: CALL_OW 496
14913: GO 14890
14915: POP
14916: POP
// end ;
14917: LD_VAR 0 1
14921: RET
// export function hHackChangeYourSide ; begin
14922: LD_INT 0
14924: PPUSH
// if your_side = 8 then
14925: LD_OWVAR 2
14929: PUSH
14930: LD_INT 8
14932: EQUAL
14933: IFFALSE 14945
// your_side := 0 else
14935: LD_ADDR_OWVAR 2
14939: PUSH
14940: LD_INT 0
14942: ST_TO_ADDR
14943: GO 14959
// your_side := your_side + 1 ;
14945: LD_ADDR_OWVAR 2
14949: PUSH
14950: LD_OWVAR 2
14954: PUSH
14955: LD_INT 1
14957: PLUS
14958: ST_TO_ADDR
// end ;
14959: LD_VAR 0 1
14963: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14964: LD_INT 0
14966: PPUSH
14967: PPUSH
14968: PPUSH
// for i in all_units do
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_OWVAR 3
14978: PUSH
14979: FOR_IN
14980: IFFALSE 15058
// if IsSelected ( i ) then
14982: LD_VAR 0 2
14986: PPUSH
14987: CALL_OW 306
14991: IFFALSE 15056
// begin j := GetSide ( i ) ;
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_VAR 0 2
15002: PPUSH
15003: CALL_OW 255
15007: ST_TO_ADDR
// if j = 8 then
15008: LD_VAR 0 3
15012: PUSH
15013: LD_INT 8
15015: EQUAL
15016: IFFALSE 15028
// j := 0 else
15018: LD_ADDR_VAR 0 3
15022: PUSH
15023: LD_INT 0
15025: ST_TO_ADDR
15026: GO 15042
// j := j + 1 ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_VAR 0 3
15037: PUSH
15038: LD_INT 1
15040: PLUS
15041: ST_TO_ADDR
// SetSide ( i , j ) ;
15042: LD_VAR 0 2
15046: PPUSH
15047: LD_VAR 0 3
15051: PPUSH
15052: CALL_OW 235
// end ;
15056: GO 14979
15058: POP
15059: POP
// end ;
15060: LD_VAR 0 1
15064: RET
// export function hHackFog ; begin
15065: LD_INT 0
15067: PPUSH
// FogOff ( true ) ;
15068: LD_INT 1
15070: PPUSH
15071: CALL_OW 344
// end ;
15075: LD_VAR 0 1
15079: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15080: LD_INT 0
15082: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15083: LD_VAR 0 1
15087: PPUSH
15088: LD_VAR 0 2
15092: PPUSH
15093: LD_VAR 0 3
15097: PPUSH
15098: LD_INT 1
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: CALL_OW 483
// CenterOnXY ( x , y ) ;
15108: LD_VAR 0 2
15112: PPUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: CALL_OW 84
// end ; end_of_file
15122: LD_VAR 0 4
15126: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15127: LD_VAR 0 1
15131: PUSH
15132: LD_INT 200
15134: DOUBLE
15135: GREATEREQUAL
15136: IFFALSE 15144
15138: LD_INT 299
15140: DOUBLE
15141: LESSEQUAL
15142: IFTRUE 15146
15144: GO 15178
15146: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15147: LD_VAR 0 1
15151: PPUSH
15152: LD_VAR 0 2
15156: PPUSH
15157: LD_VAR 0 3
15161: PPUSH
15162: LD_VAR 0 4
15166: PPUSH
15167: LD_VAR 0 5
15171: PPUSH
15172: CALL 15372 0 5
15176: GO 15255
15178: LD_INT 300
15180: DOUBLE
15181: GREATEREQUAL
15182: IFFALSE 15190
15184: LD_INT 399
15186: DOUBLE
15187: LESSEQUAL
15188: IFTRUE 15192
15190: GO 15254
15192: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15193: LD_VAR 0 1
15197: PPUSH
15198: LD_VAR 0 2
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_VAR 0 4
15212: PPUSH
15213: LD_VAR 0 5
15217: PPUSH
15218: LD_VAR 0 6
15222: PPUSH
15223: LD_VAR 0 7
15227: PPUSH
15228: LD_VAR 0 8
15232: PPUSH
15233: LD_VAR 0 9
15237: PPUSH
15238: LD_VAR 0 10
15242: PPUSH
15243: LD_VAR 0 11
15247: PPUSH
15248: CALL 13147 0 11
15252: GO 15255
15254: POP
// end ; end_of_file
15255: PPOPN 11
15257: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15258: LD_INT 0
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 264
15273: PUSH
15274: LD_EXP 5
15278: EQUAL
15279: IFFALSE 15351
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15281: LD_INT 68
15283: PPUSH
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 255
15293: PPUSH
15294: CALL_OW 321
15298: PUSH
15299: LD_INT 2
15301: EQUAL
15302: IFFALSE 15314
// eff := 70 else
15304: LD_ADDR_VAR 0 4
15308: PUSH
15309: LD_INT 70
15311: ST_TO_ADDR
15312: GO 15322
// eff := 30 ;
15314: LD_ADDR_VAR 0 4
15318: PUSH
15319: LD_INT 30
15321: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 250
15331: PPUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 251
15341: PPUSH
15342: LD_VAR 0 4
15346: PPUSH
15347: CALL_OW 495
// end ; end ;
15351: LD_VAR 0 2
15355: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15356: LD_INT 0
15358: PPUSH
// end ;
15359: LD_VAR 0 4
15363: RET
// export function SOS_Command ( cmd ) ; begin
15364: LD_INT 0
15366: PPUSH
// end ;
15367: LD_VAR 0 2
15371: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15372: LD_INT 0
15374: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 250
15382: EQUAL
15383: PUSH
15384: LD_VAR 0 2
15388: PPUSH
15389: CALL_OW 264
15393: PUSH
15394: LD_EXP 8
15398: EQUAL
15399: AND
15400: IFFALSE 15421
// MinerPlaceMine ( unit , x , y ) ;
15402: LD_VAR 0 2
15406: PPUSH
15407: LD_VAR 0 4
15411: PPUSH
15412: LD_VAR 0 5
15416: PPUSH
15417: CALL 17718 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15421: LD_VAR 0 1
15425: PUSH
15426: LD_INT 251
15428: EQUAL
15429: PUSH
15430: LD_VAR 0 2
15434: PPUSH
15435: CALL_OW 264
15439: PUSH
15440: LD_EXP 8
15444: EQUAL
15445: AND
15446: IFFALSE 15467
// MinerDetonateMine ( unit , x , y ) ;
15448: LD_VAR 0 2
15452: PPUSH
15453: LD_VAR 0 4
15457: PPUSH
15458: LD_VAR 0 5
15462: PPUSH
15463: CALL 17995 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15467: LD_VAR 0 1
15471: PUSH
15472: LD_INT 252
15474: EQUAL
15475: PUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: CALL_OW 264
15485: PUSH
15486: LD_EXP 8
15490: EQUAL
15491: AND
15492: IFFALSE 15513
// MinerCreateMinefield ( unit , x , y ) ;
15494: LD_VAR 0 2
15498: PPUSH
15499: LD_VAR 0 4
15503: PPUSH
15504: LD_VAR 0 5
15508: PPUSH
15509: CALL 18412 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15513: LD_VAR 0 1
15517: PUSH
15518: LD_INT 254
15520: EQUAL
15521: PUSH
15522: LD_VAR 0 2
15526: PPUSH
15527: CALL_OW 264
15531: PUSH
15532: LD_EXP 3
15536: EQUAL
15537: AND
15538: PUSH
15539: LD_VAR 0 3
15543: PPUSH
15544: CALL_OW 263
15548: PUSH
15549: LD_INT 3
15551: EQUAL
15552: AND
15553: IFFALSE 15569
// HackDestroyVehicle ( unit , selectedUnit ) ;
15555: LD_VAR 0 2
15559: PPUSH
15560: LD_VAR 0 3
15564: PPUSH
15565: CALL 17078 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15569: LD_VAR 0 1
15573: PUSH
15574: LD_INT 255
15576: EQUAL
15577: PUSH
15578: LD_VAR 0 2
15582: PPUSH
15583: CALL_OW 264
15587: PUSH
15588: LD_INT 14
15590: PUSH
15591: LD_INT 53
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: IN
15598: AND
15599: PUSH
15600: LD_VAR 0 4
15604: PPUSH
15605: LD_VAR 0 5
15609: PPUSH
15610: CALL_OW 488
15614: AND
15615: IFFALSE 15639
// CutTreeXYR ( unit , x , y , 12 ) ;
15617: LD_VAR 0 2
15621: PPUSH
15622: LD_VAR 0 4
15626: PPUSH
15627: LD_VAR 0 5
15631: PPUSH
15632: LD_INT 12
15634: PPUSH
15635: CALL 15644 0 4
// end ;
15639: LD_VAR 0 6
15643: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15644: LD_INT 0
15646: PPUSH
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
15652: PPUSH
15653: PPUSH
15654: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15655: LD_VAR 0 1
15659: NOT
15660: PUSH
15661: LD_VAR 0 2
15665: PPUSH
15666: LD_VAR 0 3
15670: PPUSH
15671: CALL_OW 488
15675: NOT
15676: OR
15677: PUSH
15678: LD_VAR 0 4
15682: NOT
15683: OR
15684: IFFALSE 15688
// exit ;
15686: GO 16028
// list := [ ] ;
15688: LD_ADDR_VAR 0 13
15692: PUSH
15693: EMPTY
15694: ST_TO_ADDR
// if x - r < 0 then
15695: LD_VAR 0 2
15699: PUSH
15700: LD_VAR 0 4
15704: MINUS
15705: PUSH
15706: LD_INT 0
15708: LESS
15709: IFFALSE 15721
// min_x := 0 else
15711: LD_ADDR_VAR 0 7
15715: PUSH
15716: LD_INT 0
15718: ST_TO_ADDR
15719: GO 15737
// min_x := x - r ;
15721: LD_ADDR_VAR 0 7
15725: PUSH
15726: LD_VAR 0 2
15730: PUSH
15731: LD_VAR 0 4
15735: MINUS
15736: ST_TO_ADDR
// if y - r < 0 then
15737: LD_VAR 0 3
15741: PUSH
15742: LD_VAR 0 4
15746: MINUS
15747: PUSH
15748: LD_INT 0
15750: LESS
15751: IFFALSE 15763
// min_y := 0 else
15753: LD_ADDR_VAR 0 8
15757: PUSH
15758: LD_INT 0
15760: ST_TO_ADDR
15761: GO 15779
// min_y := y - r ;
15763: LD_ADDR_VAR 0 8
15767: PUSH
15768: LD_VAR 0 3
15772: PUSH
15773: LD_VAR 0 4
15777: MINUS
15778: ST_TO_ADDR
// max_x := x + r ;
15779: LD_ADDR_VAR 0 9
15783: PUSH
15784: LD_VAR 0 2
15788: PUSH
15789: LD_VAR 0 4
15793: PLUS
15794: ST_TO_ADDR
// max_y := y + r ;
15795: LD_ADDR_VAR 0 10
15799: PUSH
15800: LD_VAR 0 3
15804: PUSH
15805: LD_VAR 0 4
15809: PLUS
15810: ST_TO_ADDR
// for _x = min_x to max_x do
15811: LD_ADDR_VAR 0 11
15815: PUSH
15816: DOUBLE
15817: LD_VAR 0 7
15821: DEC
15822: ST_TO_ADDR
15823: LD_VAR 0 9
15827: PUSH
15828: FOR_TO
15829: IFFALSE 15946
// for _y = min_y to max_y do
15831: LD_ADDR_VAR 0 12
15835: PUSH
15836: DOUBLE
15837: LD_VAR 0 8
15841: DEC
15842: ST_TO_ADDR
15843: LD_VAR 0 10
15847: PUSH
15848: FOR_TO
15849: IFFALSE 15942
// begin if not ValidHex ( _x , _y ) then
15851: LD_VAR 0 11
15855: PPUSH
15856: LD_VAR 0 12
15860: PPUSH
15861: CALL_OW 488
15865: NOT
15866: IFFALSE 15870
// continue ;
15868: GO 15848
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15870: LD_VAR 0 11
15874: PPUSH
15875: LD_VAR 0 12
15879: PPUSH
15880: CALL_OW 351
15884: PUSH
15885: LD_VAR 0 11
15889: PPUSH
15890: LD_VAR 0 12
15894: PPUSH
15895: CALL_OW 554
15899: AND
15900: IFFALSE 15940
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15902: LD_ADDR_VAR 0 13
15906: PUSH
15907: LD_VAR 0 13
15911: PPUSH
15912: LD_VAR 0 13
15916: PUSH
15917: LD_INT 1
15919: PLUS
15920: PPUSH
15921: LD_VAR 0 11
15925: PUSH
15926: LD_VAR 0 12
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PPUSH
15935: CALL_OW 2
15939: ST_TO_ADDR
// end ;
15940: GO 15848
15942: POP
15943: POP
15944: GO 15828
15946: POP
15947: POP
// if not list then
15948: LD_VAR 0 13
15952: NOT
15953: IFFALSE 15957
// exit ;
15955: GO 16028
// for i in list do
15957: LD_ADDR_VAR 0 6
15961: PUSH
15962: LD_VAR 0 13
15966: PUSH
15967: FOR_IN
15968: IFFALSE 16026
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_STRING M
15977: PUSH
15978: LD_VAR 0 6
15982: PUSH
15983: LD_INT 1
15985: ARRAY
15986: PUSH
15987: LD_VAR 0 6
15991: PUSH
15992: LD_INT 2
15994: ARRAY
15995: PUSH
15996: LD_INT 0
15998: PUSH
15999: LD_INT 0
16001: PUSH
16002: LD_INT 0
16004: PUSH
16005: LD_INT 0
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: PPUSH
16020: CALL_OW 447
16024: GO 15967
16026: POP
16027: POP
// end ;
16028: LD_VAR 0 5
16032: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16033: LD_EXP 72
16037: NOT
16038: IFFALSE 16088
16040: GO 16042
16042: DISABLE
// begin initHack := true ;
16043: LD_ADDR_EXP 72
16047: PUSH
16048: LD_INT 1
16050: ST_TO_ADDR
// hackTanks := [ ] ;
16051: LD_ADDR_EXP 73
16055: PUSH
16056: EMPTY
16057: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16058: LD_ADDR_EXP 74
16062: PUSH
16063: EMPTY
16064: ST_TO_ADDR
// hackLimit := 3 ;
16065: LD_ADDR_EXP 75
16069: PUSH
16070: LD_INT 3
16072: ST_TO_ADDR
// hackDist := 12 ;
16073: LD_ADDR_EXP 76
16077: PUSH
16078: LD_INT 12
16080: ST_TO_ADDR
// hackCounter := [ ] ;
16081: LD_ADDR_EXP 77
16085: PUSH
16086: EMPTY
16087: ST_TO_ADDR
// end ;
16088: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16089: LD_EXP 72
16093: PUSH
16094: LD_INT 34
16096: PUSH
16097: LD_EXP 3
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PPUSH
16106: CALL_OW 69
16110: AND
16111: IFFALSE 16366
16113: GO 16115
16115: DISABLE
16116: LD_INT 0
16118: PPUSH
16119: PPUSH
// begin enable ;
16120: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16121: LD_ADDR_VAR 0 1
16125: PUSH
16126: LD_INT 34
16128: PUSH
16129: LD_EXP 3
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PPUSH
16138: CALL_OW 69
16142: PUSH
16143: FOR_IN
16144: IFFALSE 16364
// begin if not i in hackTanks then
16146: LD_VAR 0 1
16150: PUSH
16151: LD_EXP 73
16155: IN
16156: NOT
16157: IFFALSE 16240
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16159: LD_ADDR_EXP 73
16163: PUSH
16164: LD_EXP 73
16168: PPUSH
16169: LD_EXP 73
16173: PUSH
16174: LD_INT 1
16176: PLUS
16177: PPUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 1
16187: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16188: LD_ADDR_EXP 74
16192: PUSH
16193: LD_EXP 74
16197: PPUSH
16198: LD_EXP 74
16202: PUSH
16203: LD_INT 1
16205: PLUS
16206: PPUSH
16207: EMPTY
16208: PPUSH
16209: CALL_OW 1
16213: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16214: LD_ADDR_EXP 77
16218: PUSH
16219: LD_EXP 77
16223: PPUSH
16224: LD_EXP 77
16228: PUSH
16229: LD_INT 1
16231: PLUS
16232: PPUSH
16233: EMPTY
16234: PPUSH
16235: CALL_OW 1
16239: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16240: LD_VAR 0 1
16244: PPUSH
16245: CALL_OW 302
16249: NOT
16250: IFFALSE 16263
// begin HackUnlinkAll ( i ) ;
16252: LD_VAR 0 1
16256: PPUSH
16257: CALL 16369 0 1
// continue ;
16261: GO 16143
// end ; HackCheckCapturedStatus ( i ) ;
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL 16812 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16272: LD_ADDR_VAR 0 2
16276: PUSH
16277: LD_INT 81
16279: PUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 255
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 33
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 91
16306: PUSH
16307: LD_VAR 0 1
16311: PUSH
16312: LD_EXP 76
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 50
16324: PUSH
16325: EMPTY
16326: LIST
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: PPUSH
16334: CALL_OW 69
16338: ST_TO_ADDR
// if not tmp then
16339: LD_VAR 0 2
16343: NOT
16344: IFFALSE 16348
// continue ;
16346: GO 16143
// HackLink ( i , tmp ) ;
16348: LD_VAR 0 1
16352: PPUSH
16353: LD_VAR 0 2
16357: PPUSH
16358: CALL 16505 0 2
// end ;
16362: GO 16143
16364: POP
16365: POP
// end ;
16366: PPOPN 2
16368: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16369: LD_INT 0
16371: PPUSH
16372: PPUSH
16373: PPUSH
// if not hack in hackTanks then
16374: LD_VAR 0 1
16378: PUSH
16379: LD_EXP 73
16383: IN
16384: NOT
16385: IFFALSE 16389
// exit ;
16387: GO 16500
// index := GetElementIndex ( hackTanks , hack ) ;
16389: LD_ADDR_VAR 0 4
16393: PUSH
16394: LD_EXP 73
16398: PPUSH
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL 23514 0 2
16408: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16409: LD_EXP 74
16413: PUSH
16414: LD_VAR 0 4
16418: ARRAY
16419: IFFALSE 16500
// begin for i in hackTanksCaptured [ index ] do
16421: LD_ADDR_VAR 0 3
16425: PUSH
16426: LD_EXP 74
16430: PUSH
16431: LD_VAR 0 4
16435: ARRAY
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16464
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16440: LD_VAR 0 3
16444: PUSH
16445: LD_INT 1
16447: ARRAY
16448: PPUSH
16449: LD_VAR 0 3
16453: PUSH
16454: LD_INT 2
16456: ARRAY
16457: PPUSH
16458: CALL_OW 235
16462: GO 16437
16464: POP
16465: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16466: LD_ADDR_EXP 74
16470: PUSH
16471: LD_EXP 74
16475: PPUSH
16476: LD_VAR 0 4
16480: PPUSH
16481: EMPTY
16482: PPUSH
16483: CALL_OW 1
16487: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16488: LD_VAR 0 1
16492: PPUSH
16493: LD_INT 0
16495: PPUSH
16496: CALL_OW 505
// end ; end ;
16500: LD_VAR 0 2
16504: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16505: LD_INT 0
16507: PPUSH
16508: PPUSH
16509: PPUSH
// if not hack in hackTanks or not vehicles then
16510: LD_VAR 0 1
16514: PUSH
16515: LD_EXP 73
16519: IN
16520: NOT
16521: PUSH
16522: LD_VAR 0 2
16526: NOT
16527: OR
16528: IFFALSE 16532
// exit ;
16530: GO 16807
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16532: LD_ADDR_VAR 0 2
16536: PUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: LD_VAR 0 2
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: LD_INT 1
16552: PPUSH
16553: CALL 24164 0 4
16557: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16558: LD_ADDR_VAR 0 5
16562: PUSH
16563: LD_EXP 73
16567: PPUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL 23514 0 2
16577: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16578: LD_EXP 74
16582: PUSH
16583: LD_VAR 0 5
16587: ARRAY
16588: PUSH
16589: LD_EXP 75
16593: LESS
16594: IFFALSE 16783
// begin for i := 1 to vehicles do
16596: LD_ADDR_VAR 0 4
16600: PUSH
16601: DOUBLE
16602: LD_INT 1
16604: DEC
16605: ST_TO_ADDR
16606: LD_VAR 0 2
16610: PUSH
16611: FOR_TO
16612: IFFALSE 16781
// begin if hackTanksCaptured [ index ] = hackLimit then
16614: LD_EXP 74
16618: PUSH
16619: LD_VAR 0 5
16623: ARRAY
16624: PUSH
16625: LD_EXP 75
16629: EQUAL
16630: IFFALSE 16634
// break ;
16632: GO 16781
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16634: LD_ADDR_EXP 77
16638: PUSH
16639: LD_EXP 77
16643: PPUSH
16644: LD_VAR 0 5
16648: PPUSH
16649: LD_EXP 77
16653: PUSH
16654: LD_VAR 0 5
16658: ARRAY
16659: PUSH
16660: LD_INT 1
16662: PLUS
16663: PPUSH
16664: CALL_OW 1
16668: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16669: LD_ADDR_EXP 74
16673: PUSH
16674: LD_EXP 74
16678: PPUSH
16679: LD_VAR 0 5
16683: PUSH
16684: LD_EXP 74
16688: PUSH
16689: LD_VAR 0 5
16693: ARRAY
16694: PUSH
16695: LD_INT 1
16697: PLUS
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PPUSH
16703: LD_VAR 0 2
16707: PUSH
16708: LD_VAR 0 4
16712: ARRAY
16713: PUSH
16714: LD_VAR 0 2
16718: PUSH
16719: LD_VAR 0 4
16723: ARRAY
16724: PPUSH
16725: CALL_OW 255
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL 23729 0 3
16738: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16739: LD_VAR 0 2
16743: PUSH
16744: LD_VAR 0 4
16748: ARRAY
16749: PPUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 255
16759: PPUSH
16760: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16764: LD_VAR 0 2
16768: PUSH
16769: LD_VAR 0 4
16773: ARRAY
16774: PPUSH
16775: CALL_OW 141
// end ;
16779: GO 16611
16781: POP
16782: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16783: LD_VAR 0 1
16787: PPUSH
16788: LD_EXP 74
16792: PUSH
16793: LD_VAR 0 5
16797: ARRAY
16798: PUSH
16799: LD_INT 0
16801: PLUS
16802: PPUSH
16803: CALL_OW 505
// end ;
16807: LD_VAR 0 3
16811: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16812: LD_INT 0
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
// if not hack in hackTanks then
16818: LD_VAR 0 1
16822: PUSH
16823: LD_EXP 73
16827: IN
16828: NOT
16829: IFFALSE 16833
// exit ;
16831: GO 17073
// index := GetElementIndex ( hackTanks , hack ) ;
16833: LD_ADDR_VAR 0 4
16837: PUSH
16838: LD_EXP 73
16842: PPUSH
16843: LD_VAR 0 1
16847: PPUSH
16848: CALL 23514 0 2
16852: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16853: LD_ADDR_VAR 0 3
16857: PUSH
16858: DOUBLE
16859: LD_EXP 74
16863: PUSH
16864: LD_VAR 0 4
16868: ARRAY
16869: INC
16870: ST_TO_ADDR
16871: LD_INT 1
16873: PUSH
16874: FOR_DOWNTO
16875: IFFALSE 17047
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16877: LD_ADDR_VAR 0 5
16881: PUSH
16882: LD_EXP 74
16886: PUSH
16887: LD_VAR 0 4
16891: ARRAY
16892: PUSH
16893: LD_VAR 0 3
16897: ARRAY
16898: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16899: LD_VAR 0 5
16903: PUSH
16904: LD_INT 1
16906: ARRAY
16907: PPUSH
16908: CALL_OW 302
16912: NOT
16913: PUSH
16914: LD_VAR 0 5
16918: PUSH
16919: LD_INT 1
16921: ARRAY
16922: PPUSH
16923: CALL_OW 255
16927: PUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 255
16937: NONEQUAL
16938: OR
16939: IFFALSE 17045
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16941: LD_VAR 0 5
16945: PUSH
16946: LD_INT 1
16948: ARRAY
16949: PPUSH
16950: CALL_OW 305
16954: PUSH
16955: LD_VAR 0 5
16959: PUSH
16960: LD_INT 1
16962: ARRAY
16963: PPUSH
16964: CALL_OW 255
16968: PUSH
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 255
16978: EQUAL
16979: AND
16980: IFFALSE 17004
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16982: LD_VAR 0 5
16986: PUSH
16987: LD_INT 1
16989: ARRAY
16990: PPUSH
16991: LD_VAR 0 5
16995: PUSH
16996: LD_INT 2
16998: ARRAY
16999: PPUSH
17000: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17004: LD_ADDR_EXP 74
17008: PUSH
17009: LD_EXP 74
17013: PPUSH
17014: LD_VAR 0 4
17018: PPUSH
17019: LD_EXP 74
17023: PUSH
17024: LD_VAR 0 4
17028: ARRAY
17029: PPUSH
17030: LD_VAR 0 3
17034: PPUSH
17035: CALL_OW 3
17039: PPUSH
17040: CALL_OW 1
17044: ST_TO_ADDR
// end ; end ;
17045: GO 16874
17047: POP
17048: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17049: LD_VAR 0 1
17053: PPUSH
17054: LD_EXP 74
17058: PUSH
17059: LD_VAR 0 4
17063: ARRAY
17064: PUSH
17065: LD_INT 0
17067: PLUS
17068: PPUSH
17069: CALL_OW 505
// end ;
17073: LD_VAR 0 2
17077: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
17082: PPUSH
17083: PPUSH
// if not hack in hackTanks then
17084: LD_VAR 0 1
17088: PUSH
17089: LD_EXP 73
17093: IN
17094: NOT
17095: IFFALSE 17099
// exit ;
17097: GO 17184
// index := GetElementIndex ( hackTanks , hack ) ;
17099: LD_ADDR_VAR 0 5
17103: PUSH
17104: LD_EXP 73
17108: PPUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL 23514 0 2
17118: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17119: LD_ADDR_VAR 0 4
17123: PUSH
17124: DOUBLE
17125: LD_INT 1
17127: DEC
17128: ST_TO_ADDR
17129: LD_EXP 74
17133: PUSH
17134: LD_VAR 0 5
17138: ARRAY
17139: PUSH
17140: FOR_TO
17141: IFFALSE 17182
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17143: LD_EXP 74
17147: PUSH
17148: LD_VAR 0 5
17152: ARRAY
17153: PUSH
17154: LD_VAR 0 4
17158: ARRAY
17159: PUSH
17160: LD_INT 1
17162: ARRAY
17163: PUSH
17164: LD_VAR 0 2
17168: EQUAL
17169: IFFALSE 17180
// KillUnit ( vehicle ) ;
17171: LD_VAR 0 2
17175: PPUSH
17176: CALL_OW 66
17180: GO 17140
17182: POP
17183: POP
// end ;
17184: LD_VAR 0 3
17188: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17189: LD_EXP 78
17193: NOT
17194: IFFALSE 17229
17196: GO 17198
17198: DISABLE
// begin initMiner := true ;
17199: LD_ADDR_EXP 78
17203: PUSH
17204: LD_INT 1
17206: ST_TO_ADDR
// minersList := [ ] ;
17207: LD_ADDR_EXP 79
17211: PUSH
17212: EMPTY
17213: ST_TO_ADDR
// minerMinesList := [ ] ;
17214: LD_ADDR_EXP 80
17218: PUSH
17219: EMPTY
17220: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17221: LD_ADDR_EXP 81
17225: PUSH
17226: LD_INT 5
17228: ST_TO_ADDR
// end ;
17229: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17230: LD_EXP 78
17234: PUSH
17235: LD_INT 34
17237: PUSH
17238: LD_EXP 8
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 69
17251: AND
17252: IFFALSE 17715
17254: GO 17256
17256: DISABLE
17257: LD_INT 0
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
// begin enable ;
17263: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: LD_INT 34
17271: PUSH
17272: LD_EXP 8
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PPUSH
17281: CALL_OW 69
17285: PUSH
17286: FOR_IN
17287: IFFALSE 17359
// begin if not i in minersList then
17289: LD_VAR 0 1
17293: PUSH
17294: LD_EXP 79
17298: IN
17299: NOT
17300: IFFALSE 17357
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17302: LD_ADDR_EXP 79
17306: PUSH
17307: LD_EXP 79
17311: PPUSH
17312: LD_EXP 79
17316: PUSH
17317: LD_INT 1
17319: PLUS
17320: PPUSH
17321: LD_VAR 0 1
17325: PPUSH
17326: CALL_OW 1
17330: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17331: LD_ADDR_EXP 80
17335: PUSH
17336: LD_EXP 80
17340: PPUSH
17341: LD_EXP 80
17345: PUSH
17346: LD_INT 1
17348: PLUS
17349: PPUSH
17350: EMPTY
17351: PPUSH
17352: CALL_OW 1
17356: ST_TO_ADDR
// end end ;
17357: GO 17286
17359: POP
17360: POP
// for i := minerMinesList downto 1 do
17361: LD_ADDR_VAR 0 1
17365: PUSH
17366: DOUBLE
17367: LD_EXP 80
17371: INC
17372: ST_TO_ADDR
17373: LD_INT 1
17375: PUSH
17376: FOR_DOWNTO
17377: IFFALSE 17713
// begin if IsLive ( minersList [ i ] ) then
17379: LD_EXP 79
17383: PUSH
17384: LD_VAR 0 1
17388: ARRAY
17389: PPUSH
17390: CALL_OW 300
17394: IFFALSE 17422
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17396: LD_EXP 79
17400: PUSH
17401: LD_VAR 0 1
17405: ARRAY
17406: PPUSH
17407: LD_EXP 80
17411: PUSH
17412: LD_VAR 0 1
17416: ARRAY
17417: PPUSH
17418: CALL_OW 505
// if not minerMinesList [ i ] then
17422: LD_EXP 80
17426: PUSH
17427: LD_VAR 0 1
17431: ARRAY
17432: NOT
17433: IFFALSE 17437
// continue ;
17435: GO 17376
// for j := minerMinesList [ i ] downto 1 do
17437: LD_ADDR_VAR 0 2
17441: PUSH
17442: DOUBLE
17443: LD_EXP 80
17447: PUSH
17448: LD_VAR 0 1
17452: ARRAY
17453: INC
17454: ST_TO_ADDR
17455: LD_INT 1
17457: PUSH
17458: FOR_DOWNTO
17459: IFFALSE 17709
// begin side := GetSide ( minersList [ i ] ) ;
17461: LD_ADDR_VAR 0 3
17465: PUSH
17466: LD_EXP 79
17470: PUSH
17471: LD_VAR 0 1
17475: ARRAY
17476: PPUSH
17477: CALL_OW 255
17481: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17482: LD_ADDR_VAR 0 4
17486: PUSH
17487: LD_EXP 80
17491: PUSH
17492: LD_VAR 0 1
17496: ARRAY
17497: PUSH
17498: LD_VAR 0 2
17502: ARRAY
17503: PUSH
17504: LD_INT 1
17506: ARRAY
17507: PPUSH
17508: LD_EXP 80
17512: PUSH
17513: LD_VAR 0 1
17517: ARRAY
17518: PUSH
17519: LD_VAR 0 2
17523: ARRAY
17524: PUSH
17525: LD_INT 2
17527: ARRAY
17528: PPUSH
17529: CALL_OW 428
17533: ST_TO_ADDR
// if not tmp then
17534: LD_VAR 0 4
17538: NOT
17539: IFFALSE 17543
// continue ;
17541: GO 17458
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17543: LD_VAR 0 4
17547: PUSH
17548: LD_INT 81
17550: PUSH
17551: LD_VAR 0 3
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PPUSH
17560: CALL_OW 69
17564: IN
17565: PUSH
17566: LD_EXP 80
17570: PUSH
17571: LD_VAR 0 1
17575: ARRAY
17576: PUSH
17577: LD_VAR 0 2
17581: ARRAY
17582: PUSH
17583: LD_INT 1
17585: ARRAY
17586: PPUSH
17587: LD_EXP 80
17591: PUSH
17592: LD_VAR 0 1
17596: ARRAY
17597: PUSH
17598: LD_VAR 0 2
17602: ARRAY
17603: PUSH
17604: LD_INT 2
17606: ARRAY
17607: PPUSH
17608: CALL_OW 458
17612: AND
17613: IFFALSE 17707
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17615: LD_EXP 80
17619: PUSH
17620: LD_VAR 0 1
17624: ARRAY
17625: PUSH
17626: LD_VAR 0 2
17630: ARRAY
17631: PUSH
17632: LD_INT 1
17634: ARRAY
17635: PPUSH
17636: LD_EXP 80
17640: PUSH
17641: LD_VAR 0 1
17645: ARRAY
17646: PUSH
17647: LD_VAR 0 2
17651: ARRAY
17652: PUSH
17653: LD_INT 2
17655: ARRAY
17656: PPUSH
17657: LD_VAR 0 3
17661: PPUSH
17662: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17666: LD_ADDR_EXP 80
17670: PUSH
17671: LD_EXP 80
17675: PPUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: LD_EXP 80
17685: PUSH
17686: LD_VAR 0 1
17690: ARRAY
17691: PPUSH
17692: LD_VAR 0 2
17696: PPUSH
17697: CALL_OW 3
17701: PPUSH
17702: CALL_OW 1
17706: ST_TO_ADDR
// end ; end ;
17707: GO 17458
17709: POP
17710: POP
// end ;
17711: GO 17376
17713: POP
17714: POP
// end ;
17715: PPOPN 4
17717: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
// result := false ;
17722: LD_ADDR_VAR 0 4
17726: PUSH
17727: LD_INT 0
17729: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17730: LD_VAR 0 1
17734: PPUSH
17735: CALL_OW 264
17739: PUSH
17740: LD_EXP 8
17744: EQUAL
17745: NOT
17746: IFFALSE 17750
// exit ;
17748: GO 17990
// index := GetElementIndex ( minersList , unit ) ;
17750: LD_ADDR_VAR 0 5
17754: PUSH
17755: LD_EXP 79
17759: PPUSH
17760: LD_VAR 0 1
17764: PPUSH
17765: CALL 23514 0 2
17769: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17770: LD_EXP 80
17774: PUSH
17775: LD_VAR 0 5
17779: ARRAY
17780: PUSH
17781: LD_EXP 81
17785: GREATEREQUAL
17786: IFFALSE 17790
// exit ;
17788: GO 17990
// ComMoveXY ( unit , x , y ) ;
17790: LD_VAR 0 1
17794: PPUSH
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_VAR 0 3
17804: PPUSH
17805: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17809: LD_INT 35
17811: PPUSH
17812: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17816: LD_VAR 0 1
17820: PPUSH
17821: LD_VAR 0 2
17825: PPUSH
17826: LD_VAR 0 3
17830: PPUSH
17831: CALL 53578 0 3
17835: NOT
17836: PUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 314
17846: AND
17847: IFFALSE 17851
// exit ;
17849: GO 17990
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17851: LD_VAR 0 2
17855: PPUSH
17856: LD_VAR 0 3
17860: PPUSH
17861: CALL_OW 428
17865: PUSH
17866: LD_VAR 0 1
17870: EQUAL
17871: PUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: CALL_OW 314
17881: NOT
17882: AND
17883: IFFALSE 17809
// PlaySoundXY ( x , y , PlantMine ) ;
17885: LD_VAR 0 2
17889: PPUSH
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_STRING PlantMine
17897: PPUSH
17898: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17902: LD_VAR 0 2
17906: PPUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: LD_VAR 0 1
17916: PPUSH
17917: CALL_OW 255
17921: PPUSH
17922: LD_INT 0
17924: PPUSH
17925: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17929: LD_ADDR_EXP 80
17933: PUSH
17934: LD_EXP 80
17938: PPUSH
17939: LD_VAR 0 5
17943: PUSH
17944: LD_EXP 80
17948: PUSH
17949: LD_VAR 0 5
17953: ARRAY
17954: PUSH
17955: LD_INT 1
17957: PLUS
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PPUSH
17963: LD_VAR 0 2
17967: PUSH
17968: LD_VAR 0 3
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PPUSH
17977: CALL 23729 0 3
17981: ST_TO_ADDR
// result := true ;
17982: LD_ADDR_VAR 0 4
17986: PUSH
17987: LD_INT 1
17989: ST_TO_ADDR
// end ;
17990: LD_VAR 0 4
17994: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17995: LD_INT 0
17997: PPUSH
17998: PPUSH
17999: PPUSH
// if not unit in minersList then
18000: LD_VAR 0 1
18004: PUSH
18005: LD_EXP 79
18009: IN
18010: NOT
18011: IFFALSE 18015
// exit ;
18013: GO 18407
// index := GetElementIndex ( minersList , unit ) ;
18015: LD_ADDR_VAR 0 6
18019: PUSH
18020: LD_EXP 79
18024: PPUSH
18025: LD_VAR 0 1
18029: PPUSH
18030: CALL 23514 0 2
18034: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18035: LD_ADDR_VAR 0 5
18039: PUSH
18040: DOUBLE
18041: LD_EXP 80
18045: PUSH
18046: LD_VAR 0 6
18050: ARRAY
18051: INC
18052: ST_TO_ADDR
18053: LD_INT 1
18055: PUSH
18056: FOR_DOWNTO
18057: IFFALSE 18218
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18059: LD_EXP 80
18063: PUSH
18064: LD_VAR 0 6
18068: ARRAY
18069: PUSH
18070: LD_VAR 0 5
18074: ARRAY
18075: PUSH
18076: LD_INT 1
18078: ARRAY
18079: PUSH
18080: LD_VAR 0 2
18084: EQUAL
18085: PUSH
18086: LD_EXP 80
18090: PUSH
18091: LD_VAR 0 6
18095: ARRAY
18096: PUSH
18097: LD_VAR 0 5
18101: ARRAY
18102: PUSH
18103: LD_INT 2
18105: ARRAY
18106: PUSH
18107: LD_VAR 0 3
18111: EQUAL
18112: AND
18113: IFFALSE 18216
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18115: LD_EXP 80
18119: PUSH
18120: LD_VAR 0 6
18124: ARRAY
18125: PUSH
18126: LD_VAR 0 5
18130: ARRAY
18131: PUSH
18132: LD_INT 1
18134: ARRAY
18135: PPUSH
18136: LD_EXP 80
18140: PUSH
18141: LD_VAR 0 6
18145: ARRAY
18146: PUSH
18147: LD_VAR 0 5
18151: ARRAY
18152: PUSH
18153: LD_INT 2
18155: ARRAY
18156: PPUSH
18157: LD_VAR 0 1
18161: PPUSH
18162: CALL_OW 255
18166: PPUSH
18167: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18171: LD_ADDR_EXP 80
18175: PUSH
18176: LD_EXP 80
18180: PPUSH
18181: LD_VAR 0 6
18185: PPUSH
18186: LD_EXP 80
18190: PUSH
18191: LD_VAR 0 6
18195: ARRAY
18196: PPUSH
18197: LD_VAR 0 5
18201: PPUSH
18202: CALL_OW 3
18206: PPUSH
18207: CALL_OW 1
18211: ST_TO_ADDR
// exit ;
18212: POP
18213: POP
18214: GO 18407
// end ; end ;
18216: GO 18056
18218: POP
18219: POP
// for i := minerMinesList [ index ] downto 1 do
18220: LD_ADDR_VAR 0 5
18224: PUSH
18225: DOUBLE
18226: LD_EXP 80
18230: PUSH
18231: LD_VAR 0 6
18235: ARRAY
18236: INC
18237: ST_TO_ADDR
18238: LD_INT 1
18240: PUSH
18241: FOR_DOWNTO
18242: IFFALSE 18405
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18244: LD_EXP 80
18248: PUSH
18249: LD_VAR 0 6
18253: ARRAY
18254: PUSH
18255: LD_VAR 0 5
18259: ARRAY
18260: PUSH
18261: LD_INT 1
18263: ARRAY
18264: PPUSH
18265: LD_EXP 80
18269: PUSH
18270: LD_VAR 0 6
18274: ARRAY
18275: PUSH
18276: LD_VAR 0 5
18280: ARRAY
18281: PUSH
18282: LD_INT 2
18284: ARRAY
18285: PPUSH
18286: LD_VAR 0 2
18290: PPUSH
18291: LD_VAR 0 3
18295: PPUSH
18296: CALL_OW 298
18300: PUSH
18301: LD_INT 6
18303: LESS
18304: IFFALSE 18403
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18306: LD_EXP 80
18310: PUSH
18311: LD_VAR 0 6
18315: ARRAY
18316: PUSH
18317: LD_VAR 0 5
18321: ARRAY
18322: PUSH
18323: LD_INT 1
18325: ARRAY
18326: PPUSH
18327: LD_EXP 80
18331: PUSH
18332: LD_VAR 0 6
18336: ARRAY
18337: PUSH
18338: LD_VAR 0 5
18342: ARRAY
18343: PUSH
18344: LD_INT 2
18346: ARRAY
18347: PPUSH
18348: LD_VAR 0 1
18352: PPUSH
18353: CALL_OW 255
18357: PPUSH
18358: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18362: LD_ADDR_EXP 80
18366: PUSH
18367: LD_EXP 80
18371: PPUSH
18372: LD_VAR 0 6
18376: PPUSH
18377: LD_EXP 80
18381: PUSH
18382: LD_VAR 0 6
18386: ARRAY
18387: PPUSH
18388: LD_VAR 0 5
18392: PPUSH
18393: CALL_OW 3
18397: PPUSH
18398: CALL_OW 1
18402: ST_TO_ADDR
// end ; end ;
18403: GO 18241
18405: POP
18406: POP
// end ;
18407: LD_VAR 0 4
18411: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18412: LD_INT 0
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
18418: PPUSH
18419: PPUSH
18420: PPUSH
18421: PPUSH
18422: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 264
18432: PUSH
18433: LD_EXP 8
18437: EQUAL
18438: NOT
18439: PUSH
18440: LD_VAR 0 1
18444: PUSH
18445: LD_EXP 79
18449: IN
18450: NOT
18451: OR
18452: IFFALSE 18456
// exit ;
18454: GO 18778
// index := GetElementIndex ( minersList , unit ) ;
18456: LD_ADDR_VAR 0 6
18460: PUSH
18461: LD_EXP 79
18465: PPUSH
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL 23514 0 2
18475: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18476: LD_ADDR_VAR 0 8
18480: PUSH
18481: LD_EXP 81
18485: PUSH
18486: LD_EXP 80
18490: PUSH
18491: LD_VAR 0 6
18495: ARRAY
18496: MINUS
18497: ST_TO_ADDR
// if not minesFreeAmount then
18498: LD_VAR 0 8
18502: NOT
18503: IFFALSE 18507
// exit ;
18505: GO 18778
// tmp := [ ] ;
18507: LD_ADDR_VAR 0 7
18511: PUSH
18512: EMPTY
18513: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18514: LD_ADDR_VAR 0 5
18518: PUSH
18519: DOUBLE
18520: LD_INT 1
18522: DEC
18523: ST_TO_ADDR
18524: LD_VAR 0 8
18528: PUSH
18529: FOR_TO
18530: IFFALSE 18725
// begin _d := rand ( 0 , 5 ) ;
18532: LD_ADDR_VAR 0 11
18536: PUSH
18537: LD_INT 0
18539: PPUSH
18540: LD_INT 5
18542: PPUSH
18543: CALL_OW 12
18547: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18548: LD_ADDR_VAR 0 12
18552: PUSH
18553: LD_INT 2
18555: PPUSH
18556: LD_INT 6
18558: PPUSH
18559: CALL_OW 12
18563: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18564: LD_ADDR_VAR 0 9
18568: PUSH
18569: LD_VAR 0 2
18573: PPUSH
18574: LD_VAR 0 11
18578: PPUSH
18579: LD_VAR 0 12
18583: PPUSH
18584: CALL_OW 272
18588: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18589: LD_ADDR_VAR 0 10
18593: PUSH
18594: LD_VAR 0 3
18598: PPUSH
18599: LD_VAR 0 11
18603: PPUSH
18604: LD_VAR 0 12
18608: PPUSH
18609: CALL_OW 273
18613: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18614: LD_VAR 0 9
18618: PPUSH
18619: LD_VAR 0 10
18623: PPUSH
18624: CALL_OW 488
18628: PUSH
18629: LD_VAR 0 9
18633: PUSH
18634: LD_VAR 0 10
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_VAR 0 7
18647: IN
18648: NOT
18649: AND
18650: PUSH
18651: LD_VAR 0 9
18655: PPUSH
18656: LD_VAR 0 10
18660: PPUSH
18661: CALL_OW 458
18665: NOT
18666: AND
18667: IFFALSE 18709
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18669: LD_ADDR_VAR 0 7
18673: PUSH
18674: LD_VAR 0 7
18678: PPUSH
18679: LD_VAR 0 7
18683: PUSH
18684: LD_INT 1
18686: PLUS
18687: PPUSH
18688: LD_VAR 0 9
18692: PUSH
18693: LD_VAR 0 10
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PPUSH
18702: CALL_OW 1
18706: ST_TO_ADDR
18707: GO 18723
// i := i - 1 ;
18709: LD_ADDR_VAR 0 5
18713: PUSH
18714: LD_VAR 0 5
18718: PUSH
18719: LD_INT 1
18721: MINUS
18722: ST_TO_ADDR
// end ;
18723: GO 18529
18725: POP
18726: POP
// for i in tmp do
18727: LD_ADDR_VAR 0 5
18731: PUSH
18732: LD_VAR 0 7
18736: PUSH
18737: FOR_IN
18738: IFFALSE 18776
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18740: LD_VAR 0 1
18744: PPUSH
18745: LD_VAR 0 5
18749: PUSH
18750: LD_INT 1
18752: ARRAY
18753: PPUSH
18754: LD_VAR 0 5
18758: PUSH
18759: LD_INT 2
18761: ARRAY
18762: PPUSH
18763: CALL 17718 0 3
18767: NOT
18768: IFFALSE 18774
// exit ;
18770: POP
18771: POP
18772: GO 18778
18774: GO 18737
18776: POP
18777: POP
// end ; end_of_file end_of_file
18778: LD_VAR 0 4
18782: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
18783: LD_INT 0
18785: PPUSH
18786: PPUSH
// if exist_mode then
18787: LD_VAR 0 2
18791: IFFALSE 18816
// unit := CreateCharacter ( prefix & ident ) else
18793: LD_ADDR_VAR 0 5
18797: PUSH
18798: LD_VAR 0 3
18802: PUSH
18803: LD_VAR 0 1
18807: STR
18808: PPUSH
18809: CALL_OW 34
18813: ST_TO_ADDR
18814: GO 18831
// unit := NewCharacter ( ident ) ;
18816: LD_ADDR_VAR 0 5
18820: PUSH
18821: LD_VAR 0 1
18825: PPUSH
18826: CALL_OW 25
18830: ST_TO_ADDR
// result := unit ;
18831: LD_ADDR_VAR 0 4
18835: PUSH
18836: LD_VAR 0 5
18840: ST_TO_ADDR
// end ;
18841: LD_VAR 0 4
18845: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
18846: LD_INT 0
18848: PPUSH
18849: PPUSH
// if not side or not nation then
18850: LD_VAR 0 1
18854: NOT
18855: PUSH
18856: LD_VAR 0 2
18860: NOT
18861: OR
18862: IFFALSE 18866
// exit ;
18864: GO 19630
// case nation of nation_american :
18866: LD_VAR 0 2
18870: PUSH
18871: LD_INT 1
18873: DOUBLE
18874: EQUAL
18875: IFTRUE 18879
18877: GO 19093
18879: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
18880: LD_ADDR_VAR 0 4
18884: PUSH
18885: LD_INT 35
18887: PUSH
18888: LD_INT 45
18890: PUSH
18891: LD_INT 46
18893: PUSH
18894: LD_INT 47
18896: PUSH
18897: LD_INT 82
18899: PUSH
18900: LD_INT 83
18902: PUSH
18903: LD_INT 84
18905: PUSH
18906: LD_INT 85
18908: PUSH
18909: LD_INT 86
18911: PUSH
18912: LD_INT 1
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: LD_INT 6
18920: PUSH
18921: LD_INT 15
18923: PUSH
18924: LD_INT 16
18926: PUSH
18927: LD_INT 7
18929: PUSH
18930: LD_INT 12
18932: PUSH
18933: LD_INT 13
18935: PUSH
18936: LD_INT 10
18938: PUSH
18939: LD_INT 14
18941: PUSH
18942: LD_INT 20
18944: PUSH
18945: LD_INT 21
18947: PUSH
18948: LD_INT 22
18950: PUSH
18951: LD_INT 25
18953: PUSH
18954: LD_INT 32
18956: PUSH
18957: LD_INT 27
18959: PUSH
18960: LD_INT 36
18962: PUSH
18963: LD_INT 69
18965: PUSH
18966: LD_INT 39
18968: PUSH
18969: LD_INT 34
18971: PUSH
18972: LD_INT 40
18974: PUSH
18975: LD_INT 48
18977: PUSH
18978: LD_INT 49
18980: PUSH
18981: LD_INT 50
18983: PUSH
18984: LD_INT 51
18986: PUSH
18987: LD_INT 52
18989: PUSH
18990: LD_INT 53
18992: PUSH
18993: LD_INT 54
18995: PUSH
18996: LD_INT 55
18998: PUSH
18999: LD_INT 56
19001: PUSH
19002: LD_INT 57
19004: PUSH
19005: LD_INT 58
19007: PUSH
19008: LD_INT 59
19010: PUSH
19011: LD_INT 60
19013: PUSH
19014: LD_INT 61
19016: PUSH
19017: LD_INT 62
19019: PUSH
19020: LD_INT 80
19022: PUSH
19023: LD_INT 82
19025: PUSH
19026: LD_INT 83
19028: PUSH
19029: LD_INT 84
19031: PUSH
19032: LD_INT 85
19034: PUSH
19035: LD_INT 86
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: ST_TO_ADDR
19091: GO 19554
19093: LD_INT 2
19095: DOUBLE
19096: EQUAL
19097: IFTRUE 19101
19099: GO 19323
19101: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19102: LD_ADDR_VAR 0 4
19106: PUSH
19107: LD_INT 35
19109: PUSH
19110: LD_INT 45
19112: PUSH
19113: LD_INT 46
19115: PUSH
19116: LD_INT 47
19118: PUSH
19119: LD_INT 82
19121: PUSH
19122: LD_INT 83
19124: PUSH
19125: LD_INT 84
19127: PUSH
19128: LD_INT 85
19130: PUSH
19131: LD_INT 87
19133: PUSH
19134: LD_INT 70
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: LD_INT 11
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: LD_INT 4
19148: PUSH
19149: LD_INT 5
19151: PUSH
19152: LD_INT 6
19154: PUSH
19155: LD_INT 15
19157: PUSH
19158: LD_INT 18
19160: PUSH
19161: LD_INT 7
19163: PUSH
19164: LD_INT 17
19166: PUSH
19167: LD_INT 8
19169: PUSH
19170: LD_INT 20
19172: PUSH
19173: LD_INT 21
19175: PUSH
19176: LD_INT 22
19178: PUSH
19179: LD_INT 72
19181: PUSH
19182: LD_INT 26
19184: PUSH
19185: LD_INT 69
19187: PUSH
19188: LD_INT 39
19190: PUSH
19191: LD_INT 40
19193: PUSH
19194: LD_INT 41
19196: PUSH
19197: LD_INT 42
19199: PUSH
19200: LD_INT 43
19202: PUSH
19203: LD_INT 48
19205: PUSH
19206: LD_INT 49
19208: PUSH
19209: LD_INT 50
19211: PUSH
19212: LD_INT 51
19214: PUSH
19215: LD_INT 52
19217: PUSH
19218: LD_INT 53
19220: PUSH
19221: LD_INT 54
19223: PUSH
19224: LD_INT 55
19226: PUSH
19227: LD_INT 56
19229: PUSH
19230: LD_INT 60
19232: PUSH
19233: LD_INT 61
19235: PUSH
19236: LD_INT 62
19238: PUSH
19239: LD_INT 66
19241: PUSH
19242: LD_INT 67
19244: PUSH
19245: LD_INT 68
19247: PUSH
19248: LD_INT 81
19250: PUSH
19251: LD_INT 82
19253: PUSH
19254: LD_INT 83
19256: PUSH
19257: LD_INT 84
19259: PUSH
19260: LD_INT 85
19262: PUSH
19263: LD_INT 87
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: ST_TO_ADDR
19321: GO 19554
19323: LD_INT 3
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19553
19331: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19332: LD_ADDR_VAR 0 4
19336: PUSH
19337: LD_INT 46
19339: PUSH
19340: LD_INT 47
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: LD_INT 82
19351: PUSH
19352: LD_INT 83
19354: PUSH
19355: LD_INT 84
19357: PUSH
19358: LD_INT 85
19360: PUSH
19361: LD_INT 86
19363: PUSH
19364: LD_INT 11
19366: PUSH
19367: LD_INT 9
19369: PUSH
19370: LD_INT 20
19372: PUSH
19373: LD_INT 19
19375: PUSH
19376: LD_INT 21
19378: PUSH
19379: LD_INT 24
19381: PUSH
19382: LD_INT 22
19384: PUSH
19385: LD_INT 25
19387: PUSH
19388: LD_INT 28
19390: PUSH
19391: LD_INT 29
19393: PUSH
19394: LD_INT 30
19396: PUSH
19397: LD_INT 31
19399: PUSH
19400: LD_INT 37
19402: PUSH
19403: LD_INT 38
19405: PUSH
19406: LD_INT 32
19408: PUSH
19409: LD_INT 27
19411: PUSH
19412: LD_INT 33
19414: PUSH
19415: LD_INT 69
19417: PUSH
19418: LD_INT 39
19420: PUSH
19421: LD_INT 34
19423: PUSH
19424: LD_INT 40
19426: PUSH
19427: LD_INT 71
19429: PUSH
19430: LD_INT 23
19432: PUSH
19433: LD_INT 44
19435: PUSH
19436: LD_INT 48
19438: PUSH
19439: LD_INT 49
19441: PUSH
19442: LD_INT 50
19444: PUSH
19445: LD_INT 51
19447: PUSH
19448: LD_INT 52
19450: PUSH
19451: LD_INT 53
19453: PUSH
19454: LD_INT 54
19456: PUSH
19457: LD_INT 55
19459: PUSH
19460: LD_INT 56
19462: PUSH
19463: LD_INT 57
19465: PUSH
19466: LD_INT 58
19468: PUSH
19469: LD_INT 59
19471: PUSH
19472: LD_INT 63
19474: PUSH
19475: LD_INT 64
19477: PUSH
19478: LD_INT 65
19480: PUSH
19481: LD_INT 82
19483: PUSH
19484: LD_INT 83
19486: PUSH
19487: LD_INT 84
19489: PUSH
19490: LD_INT 85
19492: PUSH
19493: LD_INT 86
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: ST_TO_ADDR
19551: GO 19554
19553: POP
// if state > - 1 and state < 3 then
19554: LD_VAR 0 3
19558: PUSH
19559: LD_INT 1
19561: NEG
19562: GREATER
19563: PUSH
19564: LD_VAR 0 3
19568: PUSH
19569: LD_INT 3
19571: LESS
19572: AND
19573: IFFALSE 19630
// for i in result do
19575: LD_ADDR_VAR 0 5
19579: PUSH
19580: LD_VAR 0 4
19584: PUSH
19585: FOR_IN
19586: IFFALSE 19628
// if GetTech ( i , side ) <> state then
19588: LD_VAR 0 5
19592: PPUSH
19593: LD_VAR 0 1
19597: PPUSH
19598: CALL_OW 321
19602: PUSH
19603: LD_VAR 0 3
19607: NONEQUAL
19608: IFFALSE 19626
// result := result diff i ;
19610: LD_ADDR_VAR 0 4
19614: PUSH
19615: LD_VAR 0 4
19619: PUSH
19620: LD_VAR 0 5
19624: DIFF
19625: ST_TO_ADDR
19626: GO 19585
19628: POP
19629: POP
// end ;
19630: LD_VAR 0 4
19634: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
19635: LD_INT 0
19637: PPUSH
19638: PPUSH
19639: PPUSH
// result := true ;
19640: LD_ADDR_VAR 0 3
19644: PUSH
19645: LD_INT 1
19647: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
19648: LD_ADDR_VAR 0 5
19652: PUSH
19653: LD_VAR 0 2
19657: PPUSH
19658: CALL_OW 480
19662: ST_TO_ADDR
// if not tmp then
19663: LD_VAR 0 5
19667: NOT
19668: IFFALSE 19672
// exit ;
19670: GO 19721
// for i in tmp do
19672: LD_ADDR_VAR 0 4
19676: PUSH
19677: LD_VAR 0 5
19681: PUSH
19682: FOR_IN
19683: IFFALSE 19719
// if GetTech ( i , side ) <> state_researched then
19685: LD_VAR 0 4
19689: PPUSH
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 321
19699: PUSH
19700: LD_INT 2
19702: NONEQUAL
19703: IFFALSE 19717
// begin result := false ;
19705: LD_ADDR_VAR 0 3
19709: PUSH
19710: LD_INT 0
19712: ST_TO_ADDR
// exit ;
19713: POP
19714: POP
19715: GO 19721
// end ;
19717: GO 19682
19719: POP
19720: POP
// end ;
19721: LD_VAR 0 3
19725: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
19726: LD_INT 0
19728: PPUSH
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
19735: PPUSH
19736: PPUSH
19737: PPUSH
19738: PPUSH
19739: PPUSH
19740: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
19741: LD_VAR 0 1
19745: NOT
19746: PUSH
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL_OW 257
19756: PUSH
19757: LD_INT 9
19759: NONEQUAL
19760: OR
19761: IFFALSE 19765
// exit ;
19763: GO 20338
// side := GetSide ( unit ) ;
19765: LD_ADDR_VAR 0 9
19769: PUSH
19770: LD_VAR 0 1
19774: PPUSH
19775: CALL_OW 255
19779: ST_TO_ADDR
// tech_space := tech_spacanom ;
19780: LD_ADDR_VAR 0 12
19784: PUSH
19785: LD_INT 29
19787: ST_TO_ADDR
// tech_time := tech_taurad ;
19788: LD_ADDR_VAR 0 13
19792: PUSH
19793: LD_INT 28
19795: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
19796: LD_ADDR_VAR 0 11
19800: PUSH
19801: LD_VAR 0 1
19805: PPUSH
19806: CALL_OW 310
19810: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
19811: LD_VAR 0 11
19815: PPUSH
19816: CALL_OW 247
19820: PUSH
19821: LD_INT 2
19823: EQUAL
19824: IFFALSE 19828
// exit ;
19826: GO 20338
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19828: LD_ADDR_VAR 0 8
19832: PUSH
19833: LD_INT 81
19835: PUSH
19836: LD_VAR 0 9
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 3
19847: PUSH
19848: LD_INT 21
19850: PUSH
19851: LD_INT 3
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PPUSH
19866: CALL_OW 69
19870: ST_TO_ADDR
// if not tmp then
19871: LD_VAR 0 8
19875: NOT
19876: IFFALSE 19880
// exit ;
19878: GO 20338
// if in_unit then
19880: LD_VAR 0 11
19884: IFFALSE 19908
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
19886: LD_ADDR_VAR 0 10
19890: PUSH
19891: LD_VAR 0 8
19895: PPUSH
19896: LD_VAR 0 11
19900: PPUSH
19901: CALL_OW 74
19905: ST_TO_ADDR
19906: GO 19928
// enemy := NearestUnitToUnit ( tmp , unit ) ;
19908: LD_ADDR_VAR 0 10
19912: PUSH
19913: LD_VAR 0 8
19917: PPUSH
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 74
19927: ST_TO_ADDR
// if not enemy then
19928: LD_VAR 0 10
19932: NOT
19933: IFFALSE 19937
// exit ;
19935: GO 20338
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
19937: LD_VAR 0 11
19941: PUSH
19942: LD_VAR 0 11
19946: PPUSH
19947: LD_VAR 0 10
19951: PPUSH
19952: CALL_OW 296
19956: PUSH
19957: LD_INT 13
19959: GREATER
19960: AND
19961: PUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: LD_VAR 0 10
19971: PPUSH
19972: CALL_OW 296
19976: PUSH
19977: LD_INT 12
19979: GREATER
19980: OR
19981: IFFALSE 19985
// exit ;
19983: GO 20338
// missile := [ 1 ] ;
19985: LD_ADDR_VAR 0 14
19989: PUSH
19990: LD_INT 1
19992: PUSH
19993: EMPTY
19994: LIST
19995: ST_TO_ADDR
// if Researched ( side , tech_space ) then
19996: LD_VAR 0 9
20000: PPUSH
20001: LD_VAR 0 12
20005: PPUSH
20006: CALL_OW 325
20010: IFFALSE 20039
// missile := Insert ( missile , missile + 1 , 2 ) ;
20012: LD_ADDR_VAR 0 14
20016: PUSH
20017: LD_VAR 0 14
20021: PPUSH
20022: LD_VAR 0 14
20026: PUSH
20027: LD_INT 1
20029: PLUS
20030: PPUSH
20031: LD_INT 2
20033: PPUSH
20034: CALL_OW 2
20038: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20039: LD_VAR 0 9
20043: PPUSH
20044: LD_VAR 0 13
20048: PPUSH
20049: CALL_OW 325
20053: PUSH
20054: LD_VAR 0 10
20058: PPUSH
20059: CALL_OW 255
20063: PPUSH
20064: LD_VAR 0 13
20068: PPUSH
20069: CALL_OW 325
20073: NOT
20074: AND
20075: IFFALSE 20104
// missile := Insert ( missile , missile + 1 , 3 ) ;
20077: LD_ADDR_VAR 0 14
20081: PUSH
20082: LD_VAR 0 14
20086: PPUSH
20087: LD_VAR 0 14
20091: PUSH
20092: LD_INT 1
20094: PLUS
20095: PPUSH
20096: LD_INT 3
20098: PPUSH
20099: CALL_OW 2
20103: ST_TO_ADDR
// if missile < 2 then
20104: LD_VAR 0 14
20108: PUSH
20109: LD_INT 2
20111: LESS
20112: IFFALSE 20116
// exit ;
20114: GO 20338
// x := GetX ( enemy ) ;
20116: LD_ADDR_VAR 0 4
20120: PUSH
20121: LD_VAR 0 10
20125: PPUSH
20126: CALL_OW 250
20130: ST_TO_ADDR
// y := GetY ( enemy ) ;
20131: LD_ADDR_VAR 0 5
20135: PUSH
20136: LD_VAR 0 10
20140: PPUSH
20141: CALL_OW 251
20145: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20146: LD_ADDR_VAR 0 6
20150: PUSH
20151: LD_VAR 0 4
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PPUSH
20160: LD_INT 1
20162: PPUSH
20163: CALL_OW 12
20167: PLUS
20168: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20169: LD_ADDR_VAR 0 7
20173: PUSH
20174: LD_VAR 0 5
20178: PUSH
20179: LD_INT 1
20181: NEG
20182: PPUSH
20183: LD_INT 1
20185: PPUSH
20186: CALL_OW 12
20190: PLUS
20191: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20192: LD_VAR 0 6
20196: PPUSH
20197: LD_VAR 0 7
20201: PPUSH
20202: CALL_OW 488
20206: NOT
20207: IFFALSE 20229
// begin _x := x ;
20209: LD_ADDR_VAR 0 6
20213: PUSH
20214: LD_VAR 0 4
20218: ST_TO_ADDR
// _y := y ;
20219: LD_ADDR_VAR 0 7
20223: PUSH
20224: LD_VAR 0 5
20228: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20229: LD_ADDR_VAR 0 3
20233: PUSH
20234: LD_INT 1
20236: PPUSH
20237: LD_VAR 0 14
20241: PPUSH
20242: CALL_OW 12
20246: ST_TO_ADDR
// case i of 1 :
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 1
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20277
20260: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20261: LD_VAR 0 1
20265: PPUSH
20266: LD_VAR 0 10
20270: PPUSH
20271: CALL_OW 115
20275: GO 20338
20277: LD_INT 2
20279: DOUBLE
20280: EQUAL
20281: IFTRUE 20285
20283: GO 20307
20285: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20286: LD_VAR 0 1
20290: PPUSH
20291: LD_VAR 0 6
20295: PPUSH
20296: LD_VAR 0 7
20300: PPUSH
20301: CALL_OW 153
20305: GO 20338
20307: LD_INT 3
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20337
20315: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20316: LD_VAR 0 1
20320: PPUSH
20321: LD_VAR 0 6
20325: PPUSH
20326: LD_VAR 0 7
20330: PPUSH
20331: CALL_OW 154
20335: GO 20338
20337: POP
// end ;
20338: LD_VAR 0 2
20342: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20343: LD_INT 0
20345: PPUSH
20346: PPUSH
20347: PPUSH
20348: PPUSH
20349: PPUSH
20350: PPUSH
// if not unit or not building then
20351: LD_VAR 0 1
20355: NOT
20356: PUSH
20357: LD_VAR 0 2
20361: NOT
20362: OR
20363: IFFALSE 20367
// exit ;
20365: GO 20525
// x := GetX ( building ) ;
20367: LD_ADDR_VAR 0 5
20371: PUSH
20372: LD_VAR 0 2
20376: PPUSH
20377: CALL_OW 250
20381: ST_TO_ADDR
// y := GetY ( building ) ;
20382: LD_ADDR_VAR 0 6
20386: PUSH
20387: LD_VAR 0 2
20391: PPUSH
20392: CALL_OW 251
20396: ST_TO_ADDR
// for i = 0 to 5 do
20397: LD_ADDR_VAR 0 4
20401: PUSH
20402: DOUBLE
20403: LD_INT 0
20405: DEC
20406: ST_TO_ADDR
20407: LD_INT 5
20409: PUSH
20410: FOR_TO
20411: IFFALSE 20523
// begin _x := ShiftX ( x , i , 3 ) ;
20413: LD_ADDR_VAR 0 7
20417: PUSH
20418: LD_VAR 0 5
20422: PPUSH
20423: LD_VAR 0 4
20427: PPUSH
20428: LD_INT 3
20430: PPUSH
20431: CALL_OW 272
20435: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20436: LD_ADDR_VAR 0 8
20440: PUSH
20441: LD_VAR 0 6
20445: PPUSH
20446: LD_VAR 0 4
20450: PPUSH
20451: LD_INT 3
20453: PPUSH
20454: CALL_OW 273
20458: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20459: LD_VAR 0 7
20463: PPUSH
20464: LD_VAR 0 8
20468: PPUSH
20469: CALL_OW 488
20473: NOT
20474: IFFALSE 20478
// continue ;
20476: GO 20410
// if HexInfo ( _x , _y ) = 0 then
20478: LD_VAR 0 7
20482: PPUSH
20483: LD_VAR 0 8
20487: PPUSH
20488: CALL_OW 428
20492: PUSH
20493: LD_INT 0
20495: EQUAL
20496: IFFALSE 20521
// begin ComMoveXY ( unit , _x , _y ) ;
20498: LD_VAR 0 1
20502: PPUSH
20503: LD_VAR 0 7
20507: PPUSH
20508: LD_VAR 0 8
20512: PPUSH
20513: CALL_OW 111
// exit ;
20517: POP
20518: POP
20519: GO 20525
// end ; end ;
20521: GO 20410
20523: POP
20524: POP
// end ;
20525: LD_VAR 0 3
20529: RET
// export function ScanBase ( side , base_area ) ; begin
20530: LD_INT 0
20532: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20533: LD_ADDR_VAR 0 3
20537: PUSH
20538: LD_VAR 0 2
20542: PPUSH
20543: LD_INT 81
20545: PUSH
20546: LD_VAR 0 1
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 70
20559: ST_TO_ADDR
// end ;
20560: LD_VAR 0 3
20564: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
20569: PPUSH
20570: PPUSH
// result := false ;
20571: LD_ADDR_VAR 0 2
20575: PUSH
20576: LD_INT 0
20578: ST_TO_ADDR
// side := GetSide ( unit ) ;
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 255
20593: ST_TO_ADDR
// nat := GetNation ( unit ) ;
20594: LD_ADDR_VAR 0 4
20598: PUSH
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 248
20608: ST_TO_ADDR
// case nat of 1 :
20609: LD_VAR 0 4
20613: PUSH
20614: LD_INT 1
20616: DOUBLE
20617: EQUAL
20618: IFTRUE 20622
20620: GO 20633
20622: POP
// tech := tech_lassight ; 2 :
20623: LD_ADDR_VAR 0 5
20627: PUSH
20628: LD_INT 12
20630: ST_TO_ADDR
20631: GO 20672
20633: LD_INT 2
20635: DOUBLE
20636: EQUAL
20637: IFTRUE 20641
20639: GO 20652
20641: POP
// tech := tech_mortar ; 3 :
20642: LD_ADDR_VAR 0 5
20646: PUSH
20647: LD_INT 41
20649: ST_TO_ADDR
20650: GO 20672
20652: LD_INT 3
20654: DOUBLE
20655: EQUAL
20656: IFTRUE 20660
20658: GO 20671
20660: POP
// tech := tech_bazooka ; end ;
20661: LD_ADDR_VAR 0 5
20665: PUSH
20666: LD_INT 44
20668: ST_TO_ADDR
20669: GO 20672
20671: POP
// if Researched ( side , tech ) then
20672: LD_VAR 0 3
20676: PPUSH
20677: LD_VAR 0 5
20681: PPUSH
20682: CALL_OW 325
20686: IFFALSE 20713
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
20688: LD_ADDR_VAR 0 2
20692: PUSH
20693: LD_INT 5
20695: PUSH
20696: LD_INT 8
20698: PUSH
20699: LD_INT 9
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: LIST
20706: PUSH
20707: LD_VAR 0 4
20711: ARRAY
20712: ST_TO_ADDR
// end ;
20713: LD_VAR 0 2
20717: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
20718: LD_INT 0
20720: PPUSH
20721: PPUSH
20722: PPUSH
// if not mines then
20723: LD_VAR 0 2
20727: NOT
20728: IFFALSE 20732
// exit ;
20730: GO 20876
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20732: LD_ADDR_VAR 0 5
20736: PUSH
20737: LD_INT 81
20739: PUSH
20740: LD_VAR 0 1
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 3
20751: PUSH
20752: LD_INT 21
20754: PUSH
20755: LD_INT 3
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PPUSH
20770: CALL_OW 69
20774: ST_TO_ADDR
// for i in mines do
20775: LD_ADDR_VAR 0 4
20779: PUSH
20780: LD_VAR 0 2
20784: PUSH
20785: FOR_IN
20786: IFFALSE 20874
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
20788: LD_VAR 0 4
20792: PUSH
20793: LD_INT 1
20795: ARRAY
20796: PPUSH
20797: LD_VAR 0 4
20801: PUSH
20802: LD_INT 2
20804: ARRAY
20805: PPUSH
20806: CALL_OW 458
20810: NOT
20811: IFFALSE 20815
// continue ;
20813: GO 20785
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
20815: LD_VAR 0 4
20819: PUSH
20820: LD_INT 1
20822: ARRAY
20823: PPUSH
20824: LD_VAR 0 4
20828: PUSH
20829: LD_INT 2
20831: ARRAY
20832: PPUSH
20833: CALL_OW 428
20837: PUSH
20838: LD_VAR 0 5
20842: IN
20843: IFFALSE 20872
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
20845: LD_VAR 0 4
20849: PUSH
20850: LD_INT 1
20852: ARRAY
20853: PPUSH
20854: LD_VAR 0 4
20858: PUSH
20859: LD_INT 2
20861: ARRAY
20862: PPUSH
20863: LD_VAR 0 1
20867: PPUSH
20868: CALL_OW 456
// end ;
20872: GO 20785
20874: POP
20875: POP
// end ;
20876: LD_VAR 0 3
20880: RET
// export function Count ( array ) ; var i ; begin
20881: LD_INT 0
20883: PPUSH
20884: PPUSH
// result := 0 ;
20885: LD_ADDR_VAR 0 2
20889: PUSH
20890: LD_INT 0
20892: ST_TO_ADDR
// for i in array do
20893: LD_ADDR_VAR 0 3
20897: PUSH
20898: LD_VAR 0 1
20902: PUSH
20903: FOR_IN
20904: IFFALSE 20928
// if i then
20906: LD_VAR 0 3
20910: IFFALSE 20926
// result := result + 1 ;
20912: LD_ADDR_VAR 0 2
20916: PUSH
20917: LD_VAR 0 2
20921: PUSH
20922: LD_INT 1
20924: PLUS
20925: ST_TO_ADDR
20926: GO 20903
20928: POP
20929: POP
// end ;
20930: LD_VAR 0 2
20934: RET
// export function IsEmpty ( building ) ; begin
20935: LD_INT 0
20937: PPUSH
// if not building then
20938: LD_VAR 0 1
20942: NOT
20943: IFFALSE 20947
// exit ;
20945: GO 20990
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
20947: LD_ADDR_VAR 0 2
20951: PUSH
20952: LD_VAR 0 1
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL_OW 255
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 58
20976: PUSH
20977: EMPTY
20978: LIST
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PPUSH
20984: CALL_OW 69
20988: IN
20989: ST_TO_ADDR
// end ;
20990: LD_VAR 0 2
20994: RET
// export function IsNotFull ( building ) ; begin
20995: LD_INT 0
20997: PPUSH
// if not building then
20998: LD_VAR 0 1
21002: NOT
21003: IFFALSE 21007
// exit ;
21005: GO 21026
// result := UnitsInside ( building ) < 6 ;
21007: LD_ADDR_VAR 0 2
21011: PUSH
21012: LD_VAR 0 1
21016: PPUSH
21017: CALL_OW 313
21021: PUSH
21022: LD_INT 6
21024: LESS
21025: ST_TO_ADDR
// end ;
21026: LD_VAR 0 2
21030: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21031: LD_INT 0
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
// tmp := [ ] ;
21037: LD_ADDR_VAR 0 3
21041: PUSH
21042: EMPTY
21043: ST_TO_ADDR
// list := [ ] ;
21044: LD_ADDR_VAR 0 5
21048: PUSH
21049: EMPTY
21050: ST_TO_ADDR
// for i = 16 to 25 do
21051: LD_ADDR_VAR 0 4
21055: PUSH
21056: DOUBLE
21057: LD_INT 16
21059: DEC
21060: ST_TO_ADDR
21061: LD_INT 25
21063: PUSH
21064: FOR_TO
21065: IFFALSE 21138
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21067: LD_ADDR_VAR 0 3
21071: PUSH
21072: LD_VAR 0 3
21076: PUSH
21077: LD_INT 22
21079: PUSH
21080: LD_VAR 0 1
21084: PPUSH
21085: CALL_OW 255
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 91
21096: PUSH
21097: LD_VAR 0 1
21101: PUSH
21102: LD_INT 6
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 30
21112: PUSH
21113: LD_VAR 0 4
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: PUSH
21127: EMPTY
21128: LIST
21129: PPUSH
21130: CALL_OW 69
21134: ADD
21135: ST_TO_ADDR
21136: GO 21064
21138: POP
21139: POP
// for i = 1 to tmp do
21140: LD_ADDR_VAR 0 4
21144: PUSH
21145: DOUBLE
21146: LD_INT 1
21148: DEC
21149: ST_TO_ADDR
21150: LD_VAR 0 3
21154: PUSH
21155: FOR_TO
21156: IFFALSE 21244
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21158: LD_ADDR_VAR 0 5
21162: PUSH
21163: LD_VAR 0 5
21167: PUSH
21168: LD_VAR 0 3
21172: PUSH
21173: LD_VAR 0 4
21177: ARRAY
21178: PPUSH
21179: CALL_OW 266
21183: PUSH
21184: LD_VAR 0 3
21188: PUSH
21189: LD_VAR 0 4
21193: ARRAY
21194: PPUSH
21195: CALL_OW 250
21199: PUSH
21200: LD_VAR 0 3
21204: PUSH
21205: LD_VAR 0 4
21209: ARRAY
21210: PPUSH
21211: CALL_OW 251
21215: PUSH
21216: LD_VAR 0 3
21220: PUSH
21221: LD_VAR 0 4
21225: ARRAY
21226: PPUSH
21227: CALL_OW 254
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: ADD
21241: ST_TO_ADDR
21242: GO 21155
21244: POP
21245: POP
// result := list ;
21246: LD_ADDR_VAR 0 2
21250: PUSH
21251: LD_VAR 0 5
21255: ST_TO_ADDR
// end ;
21256: LD_VAR 0 2
21260: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21261: LD_INT 0
21263: PPUSH
21264: PPUSH
21265: PPUSH
21266: PPUSH
21267: PPUSH
21268: PPUSH
21269: PPUSH
// if not factory then
21270: LD_VAR 0 1
21274: NOT
21275: IFFALSE 21279
// exit ;
21277: GO 21872
// if control = control_apeman then
21279: LD_VAR 0 4
21283: PUSH
21284: LD_INT 5
21286: EQUAL
21287: IFFALSE 21396
// begin tmp := UnitsInside ( factory ) ;
21289: LD_ADDR_VAR 0 8
21293: PUSH
21294: LD_VAR 0 1
21298: PPUSH
21299: CALL_OW 313
21303: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21304: LD_VAR 0 8
21308: PPUSH
21309: LD_INT 25
21311: PUSH
21312: LD_INT 12
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PPUSH
21319: CALL_OW 72
21323: NOT
21324: IFFALSE 21334
// control := control_manual ;
21326: LD_ADDR_VAR 0 4
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21334: LD_ADDR_VAR 0 8
21338: PUSH
21339: LD_VAR 0 1
21343: PPUSH
21344: CALL 21031 0 1
21348: ST_TO_ADDR
// if tmp then
21349: LD_VAR 0 8
21353: IFFALSE 21396
// begin for i in tmp do
21355: LD_ADDR_VAR 0 7
21359: PUSH
21360: LD_VAR 0 8
21364: PUSH
21365: FOR_IN
21366: IFFALSE 21394
// if i [ 1 ] = b_ext_radio then
21368: LD_VAR 0 7
21372: PUSH
21373: LD_INT 1
21375: ARRAY
21376: PUSH
21377: LD_INT 22
21379: EQUAL
21380: IFFALSE 21392
// begin control := control_remote ;
21382: LD_ADDR_VAR 0 4
21386: PUSH
21387: LD_INT 2
21389: ST_TO_ADDR
// break ;
21390: GO 21394
// end ;
21392: GO 21365
21394: POP
21395: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21396: LD_VAR 0 1
21400: PPUSH
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_VAR 0 3
21410: PPUSH
21411: LD_VAR 0 4
21415: PPUSH
21416: LD_VAR 0 5
21420: PPUSH
21421: CALL_OW 448
21425: IFFALSE 21460
// begin result := [ chassis , engine , control , weapon ] ;
21427: LD_ADDR_VAR 0 6
21431: PUSH
21432: LD_VAR 0 2
21436: PUSH
21437: LD_VAR 0 3
21441: PUSH
21442: LD_VAR 0 4
21446: PUSH
21447: LD_VAR 0 5
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: ST_TO_ADDR
// exit ;
21458: GO 21872
// end ; _chassis := AvailableChassisList ( factory ) ;
21460: LD_ADDR_VAR 0 9
21464: PUSH
21465: LD_VAR 0 1
21469: PPUSH
21470: CALL_OW 475
21474: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21475: LD_ADDR_VAR 0 11
21479: PUSH
21480: LD_VAR 0 1
21484: PPUSH
21485: CALL_OW 476
21489: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21490: LD_ADDR_VAR 0 12
21494: PUSH
21495: LD_VAR 0 1
21499: PPUSH
21500: CALL_OW 477
21504: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21505: LD_ADDR_VAR 0 10
21509: PUSH
21510: LD_VAR 0 1
21514: PPUSH
21515: CALL_OW 478
21519: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21520: LD_VAR 0 9
21524: NOT
21525: PUSH
21526: LD_VAR 0 11
21530: NOT
21531: OR
21532: PUSH
21533: LD_VAR 0 12
21537: NOT
21538: OR
21539: PUSH
21540: LD_VAR 0 10
21544: NOT
21545: OR
21546: IFFALSE 21581
// begin result := [ chassis , engine , control , weapon ] ;
21548: LD_ADDR_VAR 0 6
21552: PUSH
21553: LD_VAR 0 2
21557: PUSH
21558: LD_VAR 0 3
21562: PUSH
21563: LD_VAR 0 4
21567: PUSH
21568: LD_VAR 0 5
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: ST_TO_ADDR
// exit ;
21579: GO 21872
// end ; if not chassis in _chassis then
21581: LD_VAR 0 2
21585: PUSH
21586: LD_VAR 0 9
21590: IN
21591: NOT
21592: IFFALSE 21618
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
21594: LD_ADDR_VAR 0 2
21598: PUSH
21599: LD_VAR 0 9
21603: PUSH
21604: LD_INT 1
21606: PPUSH
21607: LD_VAR 0 9
21611: PPUSH
21612: CALL_OW 12
21616: ARRAY
21617: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
21618: LD_VAR 0 2
21622: PPUSH
21623: LD_VAR 0 3
21627: PPUSH
21628: CALL 21877 0 2
21632: NOT
21633: IFFALSE 21692
// repeat engine := _engine [ 1 ] ;
21635: LD_ADDR_VAR 0 3
21639: PUSH
21640: LD_VAR 0 11
21644: PUSH
21645: LD_INT 1
21647: ARRAY
21648: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
21649: LD_ADDR_VAR 0 11
21653: PUSH
21654: LD_VAR 0 11
21658: PPUSH
21659: LD_INT 1
21661: PPUSH
21662: CALL_OW 3
21666: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
21667: LD_VAR 0 2
21671: PPUSH
21672: LD_VAR 0 3
21676: PPUSH
21677: CALL 21877 0 2
21681: PUSH
21682: LD_VAR 0 11
21686: PUSH
21687: EMPTY
21688: EQUAL
21689: OR
21690: IFFALSE 21635
// if not control in _control then
21692: LD_VAR 0 4
21696: PUSH
21697: LD_VAR 0 12
21701: IN
21702: NOT
21703: IFFALSE 21729
// control := _control [ rand ( 1 , _control ) ] ;
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: LD_VAR 0 12
21714: PUSH
21715: LD_INT 1
21717: PPUSH
21718: LD_VAR 0 12
21722: PPUSH
21723: CALL_OW 12
21727: ARRAY
21728: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
21729: LD_VAR 0 2
21733: PPUSH
21734: LD_VAR 0 5
21738: PPUSH
21739: CALL 22097 0 2
21743: NOT
21744: IFFALSE 21803
// repeat weapon := _weapon [ 1 ] ;
21746: LD_ADDR_VAR 0 5
21750: PUSH
21751: LD_VAR 0 10
21755: PUSH
21756: LD_INT 1
21758: ARRAY
21759: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
21760: LD_ADDR_VAR 0 10
21764: PUSH
21765: LD_VAR 0 10
21769: PPUSH
21770: LD_INT 1
21772: PPUSH
21773: CALL_OW 3
21777: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
21778: LD_VAR 0 2
21782: PPUSH
21783: LD_VAR 0 5
21787: PPUSH
21788: CALL 22097 0 2
21792: PUSH
21793: LD_VAR 0 10
21797: PUSH
21798: EMPTY
21799: EQUAL
21800: OR
21801: IFFALSE 21746
// result := [ ] ;
21803: LD_ADDR_VAR 0 6
21807: PUSH
21808: EMPTY
21809: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21810: LD_VAR 0 1
21814: PPUSH
21815: LD_VAR 0 2
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: LD_VAR 0 4
21829: PPUSH
21830: LD_VAR 0 5
21834: PPUSH
21835: CALL_OW 448
21839: IFFALSE 21872
// result := [ chassis , engine , control , weapon ] ;
21841: LD_ADDR_VAR 0 6
21845: PUSH
21846: LD_VAR 0 2
21850: PUSH
21851: LD_VAR 0 3
21855: PUSH
21856: LD_VAR 0 4
21860: PUSH
21861: LD_VAR 0 5
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: ST_TO_ADDR
// end ;
21872: LD_VAR 0 6
21876: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
21877: LD_INT 0
21879: PPUSH
// if not chassis or not engine then
21880: LD_VAR 0 1
21884: NOT
21885: PUSH
21886: LD_VAR 0 2
21890: NOT
21891: OR
21892: IFFALSE 21896
// exit ;
21894: GO 22092
// case engine of engine_solar :
21896: LD_VAR 0 2
21900: PUSH
21901: LD_INT 2
21903: DOUBLE
21904: EQUAL
21905: IFTRUE 21909
21907: GO 21947
21909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
21910: LD_ADDR_VAR 0 3
21914: PUSH
21915: LD_INT 11
21917: PUSH
21918: LD_INT 12
21920: PUSH
21921: LD_INT 13
21923: PUSH
21924: LD_INT 14
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: LD_INT 2
21932: PUSH
21933: LD_INT 3
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: ST_TO_ADDR
21945: GO 22076
21947: LD_INT 1
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 22017
21955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
21956: LD_ADDR_VAR 0 3
21960: PUSH
21961: LD_INT 11
21963: PUSH
21964: LD_INT 12
21966: PUSH
21967: LD_INT 13
21969: PUSH
21970: LD_INT 14
21972: PUSH
21973: LD_INT 1
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: LD_INT 3
21981: PUSH
21982: LD_INT 4
21984: PUSH
21985: LD_INT 5
21987: PUSH
21988: LD_INT 21
21990: PUSH
21991: LD_INT 23
21993: PUSH
21994: LD_INT 22
21996: PUSH
21997: LD_INT 24
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: ST_TO_ADDR
22015: GO 22076
22017: LD_INT 3
22019: DOUBLE
22020: EQUAL
22021: IFTRUE 22025
22023: GO 22075
22025: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22026: LD_ADDR_VAR 0 3
22030: PUSH
22031: LD_INT 13
22033: PUSH
22034: LD_INT 14
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 4
22045: PUSH
22046: LD_INT 5
22048: PUSH
22049: LD_INT 21
22051: PUSH
22052: LD_INT 22
22054: PUSH
22055: LD_INT 23
22057: PUSH
22058: LD_INT 24
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: ST_TO_ADDR
22073: GO 22076
22075: POP
// result := ( chassis in result ) ;
22076: LD_ADDR_VAR 0 3
22080: PUSH
22081: LD_VAR 0 1
22085: PUSH
22086: LD_VAR 0 3
22090: IN
22091: ST_TO_ADDR
// end ;
22092: LD_VAR 0 3
22096: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22097: LD_INT 0
22099: PPUSH
// if not chassis or not weapon then
22100: LD_VAR 0 1
22104: NOT
22105: PUSH
22106: LD_VAR 0 2
22110: NOT
22111: OR
22112: IFFALSE 22116
// exit ;
22114: GO 23142
// case weapon of us_machine_gun :
22116: LD_VAR 0 2
22120: PUSH
22121: LD_INT 2
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22159
22129: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22130: LD_ADDR_VAR 0 3
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: LD_INT 3
22143: PUSH
22144: LD_INT 4
22146: PUSH
22147: LD_INT 5
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: ST_TO_ADDR
22157: GO 23126
22159: LD_INT 3
22161: DOUBLE
22162: EQUAL
22163: IFTRUE 22167
22165: GO 22197
22167: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22168: LD_ADDR_VAR 0 3
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: LD_INT 3
22181: PUSH
22182: LD_INT 4
22184: PUSH
22185: LD_INT 5
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: ST_TO_ADDR
22195: GO 23126
22197: LD_INT 11
22199: DOUBLE
22200: EQUAL
22201: IFTRUE 22205
22203: GO 22235
22205: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22206: LD_ADDR_VAR 0 3
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: LD_INT 3
22219: PUSH
22220: LD_INT 4
22222: PUSH
22223: LD_INT 5
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: ST_TO_ADDR
22233: GO 23126
22235: LD_INT 4
22237: DOUBLE
22238: EQUAL
22239: IFTRUE 22243
22241: GO 22269
22243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22244: LD_ADDR_VAR 0 3
22248: PUSH
22249: LD_INT 2
22251: PUSH
22252: LD_INT 3
22254: PUSH
22255: LD_INT 4
22257: PUSH
22258: LD_INT 5
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: ST_TO_ADDR
22267: GO 23126
22269: LD_INT 5
22271: DOUBLE
22272: EQUAL
22273: IFTRUE 22277
22275: GO 22303
22277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22278: LD_ADDR_VAR 0 3
22282: PUSH
22283: LD_INT 2
22285: PUSH
22286: LD_INT 3
22288: PUSH
22289: LD_INT 4
22291: PUSH
22292: LD_INT 5
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: ST_TO_ADDR
22301: GO 23126
22303: LD_INT 9
22305: DOUBLE
22306: EQUAL
22307: IFTRUE 22311
22309: GO 22337
22311: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22312: LD_ADDR_VAR 0 3
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: LD_INT 4
22325: PUSH
22326: LD_INT 5
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: ST_TO_ADDR
22335: GO 23126
22337: LD_INT 7
22339: DOUBLE
22340: EQUAL
22341: IFTRUE 22345
22343: GO 22371
22345: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22346: LD_ADDR_VAR 0 3
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 3
22356: PUSH
22357: LD_INT 4
22359: PUSH
22360: LD_INT 5
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: ST_TO_ADDR
22369: GO 23126
22371: LD_INT 12
22373: DOUBLE
22374: EQUAL
22375: IFTRUE 22379
22377: GO 22405
22379: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22380: LD_ADDR_VAR 0 3
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: LD_INT 4
22393: PUSH
22394: LD_INT 5
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: ST_TO_ADDR
22403: GO 23126
22405: LD_INT 13
22407: DOUBLE
22408: EQUAL
22409: IFTRUE 22413
22411: GO 22439
22413: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: LD_INT 3
22424: PUSH
22425: LD_INT 4
22427: PUSH
22428: LD_INT 5
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: ST_TO_ADDR
22437: GO 23126
22439: LD_INT 14
22441: DOUBLE
22442: EQUAL
22443: IFTRUE 22447
22445: GO 22465
22447: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22448: LD_ADDR_VAR 0 3
22452: PUSH
22453: LD_INT 4
22455: PUSH
22456: LD_INT 5
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: ST_TO_ADDR
22463: GO 23126
22465: LD_INT 6
22467: DOUBLE
22468: EQUAL
22469: IFTRUE 22473
22471: GO 22491
22473: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22474: LD_ADDR_VAR 0 3
22478: PUSH
22479: LD_INT 4
22481: PUSH
22482: LD_INT 5
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: ST_TO_ADDR
22489: GO 23126
22491: LD_INT 10
22493: DOUBLE
22494: EQUAL
22495: IFTRUE 22499
22497: GO 22517
22499: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22500: LD_ADDR_VAR 0 3
22504: PUSH
22505: LD_INT 4
22507: PUSH
22508: LD_INT 5
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: ST_TO_ADDR
22515: GO 23126
22517: LD_INT 22
22519: DOUBLE
22520: EQUAL
22521: IFTRUE 22525
22523: GO 22551
22525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22526: LD_ADDR_VAR 0 3
22530: PUSH
22531: LD_INT 11
22533: PUSH
22534: LD_INT 12
22536: PUSH
22537: LD_INT 13
22539: PUSH
22540: LD_INT 14
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
22549: GO 23126
22551: LD_INT 23
22553: DOUBLE
22554: EQUAL
22555: IFTRUE 22559
22557: GO 22585
22559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
22560: LD_ADDR_VAR 0 3
22564: PUSH
22565: LD_INT 11
22567: PUSH
22568: LD_INT 12
22570: PUSH
22571: LD_INT 13
22573: PUSH
22574: LD_INT 14
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: ST_TO_ADDR
22583: GO 23126
22585: LD_INT 24
22587: DOUBLE
22588: EQUAL
22589: IFTRUE 22593
22591: GO 22619
22593: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
22594: LD_ADDR_VAR 0 3
22598: PUSH
22599: LD_INT 11
22601: PUSH
22602: LD_INT 12
22604: PUSH
22605: LD_INT 13
22607: PUSH
22608: LD_INT 14
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: ST_TO_ADDR
22617: GO 23126
22619: LD_INT 30
22621: DOUBLE
22622: EQUAL
22623: IFTRUE 22627
22625: GO 22653
22627: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
22628: LD_ADDR_VAR 0 3
22632: PUSH
22633: LD_INT 11
22635: PUSH
22636: LD_INT 12
22638: PUSH
22639: LD_INT 13
22641: PUSH
22642: LD_INT 14
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: ST_TO_ADDR
22651: GO 23126
22653: LD_INT 25
22655: DOUBLE
22656: EQUAL
22657: IFTRUE 22661
22659: GO 22679
22661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
22662: LD_ADDR_VAR 0 3
22666: PUSH
22667: LD_INT 13
22669: PUSH
22670: LD_INT 14
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: ST_TO_ADDR
22677: GO 23126
22679: LD_INT 27
22681: DOUBLE
22682: EQUAL
22683: IFTRUE 22687
22685: GO 22705
22687: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
22688: LD_ADDR_VAR 0 3
22692: PUSH
22693: LD_INT 13
22695: PUSH
22696: LD_INT 14
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: ST_TO_ADDR
22703: GO 23126
22705: LD_INT 28
22707: DOUBLE
22708: EQUAL
22709: IFTRUE 22713
22711: GO 22731
22713: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
22714: LD_ADDR_VAR 0 3
22718: PUSH
22719: LD_INT 13
22721: PUSH
22722: LD_INT 14
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: ST_TO_ADDR
22729: GO 23126
22731: LD_INT 29
22733: DOUBLE
22734: EQUAL
22735: IFTRUE 22739
22737: GO 22757
22739: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
22740: LD_ADDR_VAR 0 3
22744: PUSH
22745: LD_INT 13
22747: PUSH
22748: LD_INT 14
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: ST_TO_ADDR
22755: GO 23126
22757: LD_INT 31
22759: DOUBLE
22760: EQUAL
22761: IFTRUE 22765
22763: GO 22783
22765: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
22766: LD_ADDR_VAR 0 3
22770: PUSH
22771: LD_INT 13
22773: PUSH
22774: LD_INT 14
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: ST_TO_ADDR
22781: GO 23126
22783: LD_INT 26
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22809
22791: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
22792: LD_ADDR_VAR 0 3
22796: PUSH
22797: LD_INT 13
22799: PUSH
22800: LD_INT 14
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: ST_TO_ADDR
22807: GO 23126
22809: LD_INT 42
22811: DOUBLE
22812: EQUAL
22813: IFTRUE 22817
22815: GO 22843
22817: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
22818: LD_ADDR_VAR 0 3
22822: PUSH
22823: LD_INT 21
22825: PUSH
22826: LD_INT 22
22828: PUSH
22829: LD_INT 23
22831: PUSH
22832: LD_INT 24
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: ST_TO_ADDR
22841: GO 23126
22843: LD_INT 43
22845: DOUBLE
22846: EQUAL
22847: IFTRUE 22851
22849: GO 22877
22851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
22852: LD_ADDR_VAR 0 3
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 22
22862: PUSH
22863: LD_INT 23
22865: PUSH
22866: LD_INT 24
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: ST_TO_ADDR
22875: GO 23126
22877: LD_INT 44
22879: DOUBLE
22880: EQUAL
22881: IFTRUE 22885
22883: GO 22911
22885: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
22886: LD_ADDR_VAR 0 3
22890: PUSH
22891: LD_INT 21
22893: PUSH
22894: LD_INT 22
22896: PUSH
22897: LD_INT 23
22899: PUSH
22900: LD_INT 24
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: ST_TO_ADDR
22909: GO 23126
22911: LD_INT 45
22913: DOUBLE
22914: EQUAL
22915: IFTRUE 22919
22917: GO 22945
22919: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
22920: LD_ADDR_VAR 0 3
22924: PUSH
22925: LD_INT 21
22927: PUSH
22928: LD_INT 22
22930: PUSH
22931: LD_INT 23
22933: PUSH
22934: LD_INT 24
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: ST_TO_ADDR
22943: GO 23126
22945: LD_INT 49
22947: DOUBLE
22948: EQUAL
22949: IFTRUE 22953
22951: GO 22979
22953: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
22954: LD_ADDR_VAR 0 3
22958: PUSH
22959: LD_INT 21
22961: PUSH
22962: LD_INT 22
22964: PUSH
22965: LD_INT 23
22967: PUSH
22968: LD_INT 24
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: ST_TO_ADDR
22977: GO 23126
22979: LD_INT 51
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 23013
22987: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
22988: LD_ADDR_VAR 0 3
22992: PUSH
22993: LD_INT 21
22995: PUSH
22996: LD_INT 22
22998: PUSH
22999: LD_INT 23
23001: PUSH
23002: LD_INT 24
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: ST_TO_ADDR
23011: GO 23126
23013: LD_INT 52
23015: DOUBLE
23016: EQUAL
23017: IFTRUE 23021
23019: GO 23047
23021: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23022: LD_ADDR_VAR 0 3
23026: PUSH
23027: LD_INT 21
23029: PUSH
23030: LD_INT 22
23032: PUSH
23033: LD_INT 23
23035: PUSH
23036: LD_INT 24
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: ST_TO_ADDR
23045: GO 23126
23047: LD_INT 53
23049: DOUBLE
23050: EQUAL
23051: IFTRUE 23055
23053: GO 23073
23055: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23056: LD_ADDR_VAR 0 3
23060: PUSH
23061: LD_INT 23
23063: PUSH
23064: LD_INT 24
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: ST_TO_ADDR
23071: GO 23126
23073: LD_INT 46
23075: DOUBLE
23076: EQUAL
23077: IFTRUE 23081
23079: GO 23099
23081: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23082: LD_ADDR_VAR 0 3
23086: PUSH
23087: LD_INT 23
23089: PUSH
23090: LD_INT 24
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: ST_TO_ADDR
23097: GO 23126
23099: LD_INT 47
23101: DOUBLE
23102: EQUAL
23103: IFTRUE 23107
23105: GO 23125
23107: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23108: LD_ADDR_VAR 0 3
23112: PUSH
23113: LD_INT 23
23115: PUSH
23116: LD_INT 24
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: ST_TO_ADDR
23123: GO 23126
23125: POP
// result := ( chassis in result ) ;
23126: LD_ADDR_VAR 0 3
23130: PUSH
23131: LD_VAR 0 1
23135: PUSH
23136: LD_VAR 0 3
23140: IN
23141: ST_TO_ADDR
// end ;
23142: LD_VAR 0 3
23146: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23147: LD_INT 0
23149: PPUSH
23150: PPUSH
23151: PPUSH
23152: PPUSH
23153: PPUSH
23154: PPUSH
23155: PPUSH
// result := array ;
23156: LD_ADDR_VAR 0 5
23160: PUSH
23161: LD_VAR 0 1
23165: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23166: LD_VAR 0 1
23170: NOT
23171: PUSH
23172: LD_VAR 0 2
23176: NOT
23177: OR
23178: PUSH
23179: LD_VAR 0 3
23183: NOT
23184: OR
23185: PUSH
23186: LD_VAR 0 2
23190: PUSH
23191: LD_VAR 0 1
23195: GREATER
23196: OR
23197: PUSH
23198: LD_VAR 0 3
23202: PUSH
23203: LD_VAR 0 1
23207: GREATER
23208: OR
23209: IFFALSE 23213
// exit ;
23211: GO 23509
// if direction then
23213: LD_VAR 0 4
23217: IFFALSE 23281
// begin d := 1 ;
23219: LD_ADDR_VAR 0 9
23223: PUSH
23224: LD_INT 1
23226: ST_TO_ADDR
// if i_from > i_to then
23227: LD_VAR 0 2
23231: PUSH
23232: LD_VAR 0 3
23236: GREATER
23237: IFFALSE 23263
// length := ( array - i_from ) + i_to else
23239: LD_ADDR_VAR 0 11
23243: PUSH
23244: LD_VAR 0 1
23248: PUSH
23249: LD_VAR 0 2
23253: MINUS
23254: PUSH
23255: LD_VAR 0 3
23259: PLUS
23260: ST_TO_ADDR
23261: GO 23279
// length := i_to - i_from ;
23263: LD_ADDR_VAR 0 11
23267: PUSH
23268: LD_VAR 0 3
23272: PUSH
23273: LD_VAR 0 2
23277: MINUS
23278: ST_TO_ADDR
// end else
23279: GO 23342
// begin d := - 1 ;
23281: LD_ADDR_VAR 0 9
23285: PUSH
23286: LD_INT 1
23288: NEG
23289: ST_TO_ADDR
// if i_from > i_to then
23290: LD_VAR 0 2
23294: PUSH
23295: LD_VAR 0 3
23299: GREATER
23300: IFFALSE 23320
// length := i_from - i_to else
23302: LD_ADDR_VAR 0 11
23306: PUSH
23307: LD_VAR 0 2
23311: PUSH
23312: LD_VAR 0 3
23316: MINUS
23317: ST_TO_ADDR
23318: GO 23342
// length := ( array - i_to ) + i_from ;
23320: LD_ADDR_VAR 0 11
23324: PUSH
23325: LD_VAR 0 1
23329: PUSH
23330: LD_VAR 0 3
23334: MINUS
23335: PUSH
23336: LD_VAR 0 2
23340: PLUS
23341: ST_TO_ADDR
// end ; if not length then
23342: LD_VAR 0 11
23346: NOT
23347: IFFALSE 23351
// exit ;
23349: GO 23509
// tmp := array ;
23351: LD_ADDR_VAR 0 10
23355: PUSH
23356: LD_VAR 0 1
23360: ST_TO_ADDR
// for i = 1 to length do
23361: LD_ADDR_VAR 0 6
23365: PUSH
23366: DOUBLE
23367: LD_INT 1
23369: DEC
23370: ST_TO_ADDR
23371: LD_VAR 0 11
23375: PUSH
23376: FOR_TO
23377: IFFALSE 23497
// begin for j = 1 to array do
23379: LD_ADDR_VAR 0 7
23383: PUSH
23384: DOUBLE
23385: LD_INT 1
23387: DEC
23388: ST_TO_ADDR
23389: LD_VAR 0 1
23393: PUSH
23394: FOR_TO
23395: IFFALSE 23483
// begin k := j + d ;
23397: LD_ADDR_VAR 0 8
23401: PUSH
23402: LD_VAR 0 7
23406: PUSH
23407: LD_VAR 0 9
23411: PLUS
23412: ST_TO_ADDR
// if k > array then
23413: LD_VAR 0 8
23417: PUSH
23418: LD_VAR 0 1
23422: GREATER
23423: IFFALSE 23433
// k := 1 ;
23425: LD_ADDR_VAR 0 8
23429: PUSH
23430: LD_INT 1
23432: ST_TO_ADDR
// if not k then
23433: LD_VAR 0 8
23437: NOT
23438: IFFALSE 23450
// k := array ;
23440: LD_ADDR_VAR 0 8
23444: PUSH
23445: LD_VAR 0 1
23449: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23450: LD_ADDR_VAR 0 10
23454: PUSH
23455: LD_VAR 0 10
23459: PPUSH
23460: LD_VAR 0 8
23464: PPUSH
23465: LD_VAR 0 1
23469: PUSH
23470: LD_VAR 0 7
23474: ARRAY
23475: PPUSH
23476: CALL_OW 1
23480: ST_TO_ADDR
// end ;
23481: GO 23394
23483: POP
23484: POP
// array := tmp ;
23485: LD_ADDR_VAR 0 1
23489: PUSH
23490: LD_VAR 0 10
23494: ST_TO_ADDR
// end ;
23495: GO 23376
23497: POP
23498: POP
// result := array ;
23499: LD_ADDR_VAR 0 5
23503: PUSH
23504: LD_VAR 0 1
23508: ST_TO_ADDR
// end ;
23509: LD_VAR 0 5
23513: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23514: LD_INT 0
23516: PPUSH
23517: PPUSH
// result := 0 ;
23518: LD_ADDR_VAR 0 3
23522: PUSH
23523: LD_INT 0
23525: ST_TO_ADDR
// if not array or not value in array then
23526: LD_VAR 0 1
23530: NOT
23531: PUSH
23532: LD_VAR 0 2
23536: PUSH
23537: LD_VAR 0 1
23541: IN
23542: NOT
23543: OR
23544: IFFALSE 23548
// exit ;
23546: GO 23602
// for i = 1 to array do
23548: LD_ADDR_VAR 0 4
23552: PUSH
23553: DOUBLE
23554: LD_INT 1
23556: DEC
23557: ST_TO_ADDR
23558: LD_VAR 0 1
23562: PUSH
23563: FOR_TO
23564: IFFALSE 23600
// if value = array [ i ] then
23566: LD_VAR 0 2
23570: PUSH
23571: LD_VAR 0 1
23575: PUSH
23576: LD_VAR 0 4
23580: ARRAY
23581: EQUAL
23582: IFFALSE 23598
// begin result := i ;
23584: LD_ADDR_VAR 0 3
23588: PUSH
23589: LD_VAR 0 4
23593: ST_TO_ADDR
// exit ;
23594: POP
23595: POP
23596: GO 23602
// end ;
23598: GO 23563
23600: POP
23601: POP
// end ;
23602: LD_VAR 0 3
23606: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
23607: LD_INT 0
23609: PPUSH
// vc_chassis := chassis ;
23610: LD_ADDR_OWVAR 37
23614: PUSH
23615: LD_VAR 0 1
23619: ST_TO_ADDR
// vc_engine := engine ;
23620: LD_ADDR_OWVAR 39
23624: PUSH
23625: LD_VAR 0 2
23629: ST_TO_ADDR
// vc_control := control ;
23630: LD_ADDR_OWVAR 38
23634: PUSH
23635: LD_VAR 0 3
23639: ST_TO_ADDR
// vc_weapon := weapon ;
23640: LD_ADDR_OWVAR 40
23644: PUSH
23645: LD_VAR 0 4
23649: ST_TO_ADDR
// vc_fuel_battery := fuel ;
23650: LD_ADDR_OWVAR 41
23654: PUSH
23655: LD_VAR 0 5
23659: ST_TO_ADDR
// end ;
23660: LD_VAR 0 6
23664: RET
// export function WantPlant ( unit ) ; var task ; begin
23665: LD_INT 0
23667: PPUSH
23668: PPUSH
// result := false ;
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: LD_INT 0
23676: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
23677: LD_ADDR_VAR 0 3
23681: PUSH
23682: LD_VAR 0 1
23686: PPUSH
23687: CALL_OW 437
23691: ST_TO_ADDR
// if task then
23692: LD_VAR 0 3
23696: IFFALSE 23724
// if task [ 1 ] [ 1 ] = p then
23698: LD_VAR 0 3
23702: PUSH
23703: LD_INT 1
23705: ARRAY
23706: PUSH
23707: LD_INT 1
23709: ARRAY
23710: PUSH
23711: LD_STRING p
23713: EQUAL
23714: IFFALSE 23724
// result := true ;
23716: LD_ADDR_VAR 0 2
23720: PUSH
23721: LD_INT 1
23723: ST_TO_ADDR
// end ;
23724: LD_VAR 0 2
23728: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
23729: LD_INT 0
23731: PPUSH
23732: PPUSH
23733: PPUSH
23734: PPUSH
// if pos < 1 then
23735: LD_VAR 0 2
23739: PUSH
23740: LD_INT 1
23742: LESS
23743: IFFALSE 23747
// exit ;
23745: GO 24050
// if pos = 1 then
23747: LD_VAR 0 2
23751: PUSH
23752: LD_INT 1
23754: EQUAL
23755: IFFALSE 23788
// result := Replace ( arr , pos [ 1 ] , value ) else
23757: LD_ADDR_VAR 0 4
23761: PUSH
23762: LD_VAR 0 1
23766: PPUSH
23767: LD_VAR 0 2
23771: PUSH
23772: LD_INT 1
23774: ARRAY
23775: PPUSH
23776: LD_VAR 0 3
23780: PPUSH
23781: CALL_OW 1
23785: ST_TO_ADDR
23786: GO 24050
// begin tmp := arr ;
23788: LD_ADDR_VAR 0 6
23792: PUSH
23793: LD_VAR 0 1
23797: ST_TO_ADDR
// s_arr := [ tmp ] ;
23798: LD_ADDR_VAR 0 7
23802: PUSH
23803: LD_VAR 0 6
23807: PUSH
23808: EMPTY
23809: LIST
23810: ST_TO_ADDR
// for i = 1 to pos - 1 do
23811: LD_ADDR_VAR 0 5
23815: PUSH
23816: DOUBLE
23817: LD_INT 1
23819: DEC
23820: ST_TO_ADDR
23821: LD_VAR 0 2
23825: PUSH
23826: LD_INT 1
23828: MINUS
23829: PUSH
23830: FOR_TO
23831: IFFALSE 23876
// begin tmp := tmp [ pos [ i ] ] ;
23833: LD_ADDR_VAR 0 6
23837: PUSH
23838: LD_VAR 0 6
23842: PUSH
23843: LD_VAR 0 2
23847: PUSH
23848: LD_VAR 0 5
23852: ARRAY
23853: ARRAY
23854: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
23855: LD_ADDR_VAR 0 7
23859: PUSH
23860: LD_VAR 0 7
23864: PUSH
23865: LD_VAR 0 6
23869: PUSH
23870: EMPTY
23871: LIST
23872: ADD
23873: ST_TO_ADDR
// end ;
23874: GO 23830
23876: POP
23877: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
23878: LD_ADDR_VAR 0 6
23882: PUSH
23883: LD_VAR 0 6
23887: PPUSH
23888: LD_VAR 0 2
23892: PUSH
23893: LD_VAR 0 2
23897: ARRAY
23898: PPUSH
23899: LD_VAR 0 3
23903: PPUSH
23904: CALL_OW 1
23908: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
23909: LD_ADDR_VAR 0 7
23913: PUSH
23914: LD_VAR 0 7
23918: PPUSH
23919: LD_VAR 0 7
23923: PPUSH
23924: LD_VAR 0 6
23928: PPUSH
23929: CALL_OW 1
23933: ST_TO_ADDR
// for i = s_arr downto 2 do
23934: LD_ADDR_VAR 0 5
23938: PUSH
23939: DOUBLE
23940: LD_VAR 0 7
23944: INC
23945: ST_TO_ADDR
23946: LD_INT 2
23948: PUSH
23949: FOR_DOWNTO
23950: IFFALSE 24034
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
23952: LD_ADDR_VAR 0 6
23956: PUSH
23957: LD_VAR 0 7
23961: PUSH
23962: LD_VAR 0 5
23966: PUSH
23967: LD_INT 1
23969: MINUS
23970: ARRAY
23971: PPUSH
23972: LD_VAR 0 2
23976: PUSH
23977: LD_VAR 0 5
23981: PUSH
23982: LD_INT 1
23984: MINUS
23985: ARRAY
23986: PPUSH
23987: LD_VAR 0 7
23991: PUSH
23992: LD_VAR 0 5
23996: ARRAY
23997: PPUSH
23998: CALL_OW 1
24002: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24003: LD_ADDR_VAR 0 7
24007: PUSH
24008: LD_VAR 0 7
24012: PPUSH
24013: LD_VAR 0 5
24017: PUSH
24018: LD_INT 1
24020: MINUS
24021: PPUSH
24022: LD_VAR 0 6
24026: PPUSH
24027: CALL_OW 1
24031: ST_TO_ADDR
// end ;
24032: GO 23949
24034: POP
24035: POP
// result := s_arr [ 1 ] ;
24036: LD_ADDR_VAR 0 4
24040: PUSH
24041: LD_VAR 0 7
24045: PUSH
24046: LD_INT 1
24048: ARRAY
24049: ST_TO_ADDR
// end ; end ;
24050: LD_VAR 0 4
24054: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24055: LD_INT 0
24057: PPUSH
24058: PPUSH
// if not list then
24059: LD_VAR 0 1
24063: NOT
24064: IFFALSE 24068
// exit ;
24066: GO 24159
// i := list [ pos1 ] ;
24068: LD_ADDR_VAR 0 5
24072: PUSH
24073: LD_VAR 0 1
24077: PUSH
24078: LD_VAR 0 2
24082: ARRAY
24083: ST_TO_ADDR
// if not i then
24084: LD_VAR 0 5
24088: NOT
24089: IFFALSE 24093
// exit ;
24091: GO 24159
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24093: LD_ADDR_VAR 0 1
24097: PUSH
24098: LD_VAR 0 1
24102: PPUSH
24103: LD_VAR 0 2
24107: PPUSH
24108: LD_VAR 0 1
24112: PUSH
24113: LD_VAR 0 3
24117: ARRAY
24118: PPUSH
24119: CALL_OW 1
24123: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24124: LD_ADDR_VAR 0 1
24128: PUSH
24129: LD_VAR 0 1
24133: PPUSH
24134: LD_VAR 0 3
24138: PPUSH
24139: LD_VAR 0 5
24143: PPUSH
24144: CALL_OW 1
24148: ST_TO_ADDR
// result := list ;
24149: LD_ADDR_VAR 0 4
24153: PUSH
24154: LD_VAR 0 1
24158: ST_TO_ADDR
// end ;
24159: LD_VAR 0 4
24163: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24164: LD_INT 0
24166: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24167: LD_ADDR_VAR 0 5
24171: PUSH
24172: LD_VAR 0 1
24176: PPUSH
24177: CALL_OW 250
24181: PPUSH
24182: LD_VAR 0 1
24186: PPUSH
24187: CALL_OW 251
24191: PPUSH
24192: LD_VAR 0 2
24196: PPUSH
24197: LD_VAR 0 3
24201: PPUSH
24202: LD_VAR 0 4
24206: PPUSH
24207: CALL 24217 0 5
24211: ST_TO_ADDR
// end ;
24212: LD_VAR 0 5
24216: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24217: LD_INT 0
24219: PPUSH
24220: PPUSH
24221: PPUSH
24222: PPUSH
// if not list then
24223: LD_VAR 0 3
24227: NOT
24228: IFFALSE 24232
// exit ;
24230: GO 24620
// result := [ ] ;
24232: LD_ADDR_VAR 0 6
24236: PUSH
24237: EMPTY
24238: ST_TO_ADDR
// for i in list do
24239: LD_ADDR_VAR 0 7
24243: PUSH
24244: LD_VAR 0 3
24248: PUSH
24249: FOR_IN
24250: IFFALSE 24452
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24252: LD_ADDR_VAR 0 9
24256: PUSH
24257: LD_VAR 0 7
24261: PPUSH
24262: LD_VAR 0 1
24266: PPUSH
24267: LD_VAR 0 2
24271: PPUSH
24272: CALL_OW 297
24276: ST_TO_ADDR
// if not result then
24277: LD_VAR 0 6
24281: NOT
24282: IFFALSE 24308
// result := [ [ i , tmp ] ] else
24284: LD_ADDR_VAR 0 6
24288: PUSH
24289: LD_VAR 0 7
24293: PUSH
24294: LD_VAR 0 9
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: ST_TO_ADDR
24306: GO 24450
// begin if result [ result ] [ 2 ] < tmp then
24308: LD_VAR 0 6
24312: PUSH
24313: LD_VAR 0 6
24317: ARRAY
24318: PUSH
24319: LD_INT 2
24321: ARRAY
24322: PUSH
24323: LD_VAR 0 9
24327: LESS
24328: IFFALSE 24370
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24330: LD_ADDR_VAR 0 6
24334: PUSH
24335: LD_VAR 0 6
24339: PPUSH
24340: LD_VAR 0 6
24344: PUSH
24345: LD_INT 1
24347: PLUS
24348: PPUSH
24349: LD_VAR 0 7
24353: PUSH
24354: LD_VAR 0 9
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PPUSH
24363: CALL_OW 2
24367: ST_TO_ADDR
24368: GO 24450
// for j = 1 to result do
24370: LD_ADDR_VAR 0 8
24374: PUSH
24375: DOUBLE
24376: LD_INT 1
24378: DEC
24379: ST_TO_ADDR
24380: LD_VAR 0 6
24384: PUSH
24385: FOR_TO
24386: IFFALSE 24448
// begin if tmp < result [ j ] [ 2 ] then
24388: LD_VAR 0 9
24392: PUSH
24393: LD_VAR 0 6
24397: PUSH
24398: LD_VAR 0 8
24402: ARRAY
24403: PUSH
24404: LD_INT 2
24406: ARRAY
24407: LESS
24408: IFFALSE 24446
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24410: LD_ADDR_VAR 0 6
24414: PUSH
24415: LD_VAR 0 6
24419: PPUSH
24420: LD_VAR 0 8
24424: PPUSH
24425: LD_VAR 0 7
24429: PUSH
24430: LD_VAR 0 9
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PPUSH
24439: CALL_OW 2
24443: ST_TO_ADDR
// break ;
24444: GO 24448
// end ; end ;
24446: GO 24385
24448: POP
24449: POP
// end ; end ;
24450: GO 24249
24452: POP
24453: POP
// if result and not asc then
24454: LD_VAR 0 6
24458: PUSH
24459: LD_VAR 0 4
24463: NOT
24464: AND
24465: IFFALSE 24540
// begin tmp := result ;
24467: LD_ADDR_VAR 0 9
24471: PUSH
24472: LD_VAR 0 6
24476: ST_TO_ADDR
// for i = tmp downto 1 do
24477: LD_ADDR_VAR 0 7
24481: PUSH
24482: DOUBLE
24483: LD_VAR 0 9
24487: INC
24488: ST_TO_ADDR
24489: LD_INT 1
24491: PUSH
24492: FOR_DOWNTO
24493: IFFALSE 24538
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
24495: LD_ADDR_VAR 0 6
24499: PUSH
24500: LD_VAR 0 6
24504: PPUSH
24505: LD_VAR 0 9
24509: PUSH
24510: LD_VAR 0 7
24514: MINUS
24515: PUSH
24516: LD_INT 1
24518: PLUS
24519: PPUSH
24520: LD_VAR 0 9
24524: PUSH
24525: LD_VAR 0 7
24529: ARRAY
24530: PPUSH
24531: CALL_OW 1
24535: ST_TO_ADDR
24536: GO 24492
24538: POP
24539: POP
// end ; tmp := [ ] ;
24540: LD_ADDR_VAR 0 9
24544: PUSH
24545: EMPTY
24546: ST_TO_ADDR
// if mode then
24547: LD_VAR 0 5
24551: IFFALSE 24620
// begin for i = 1 to result do
24553: LD_ADDR_VAR 0 7
24557: PUSH
24558: DOUBLE
24559: LD_INT 1
24561: DEC
24562: ST_TO_ADDR
24563: LD_VAR 0 6
24567: PUSH
24568: FOR_TO
24569: IFFALSE 24608
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
24571: LD_ADDR_VAR 0 9
24575: PUSH
24576: LD_VAR 0 9
24580: PPUSH
24581: LD_VAR 0 7
24585: PPUSH
24586: LD_VAR 0 6
24590: PUSH
24591: LD_VAR 0 7
24595: ARRAY
24596: PUSH
24597: LD_INT 1
24599: ARRAY
24600: PPUSH
24601: CALL_OW 1
24605: ST_TO_ADDR
24606: GO 24568
24608: POP
24609: POP
// result := tmp ;
24610: LD_ADDR_VAR 0 6
24614: PUSH
24615: LD_VAR 0 9
24619: ST_TO_ADDR
// end ; end ;
24620: LD_VAR 0 6
24624: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
24625: LD_INT 0
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
24632: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
24633: LD_ADDR_VAR 0 5
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: EMPTY
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: ST_TO_ADDR
// if not x or not y then
24655: LD_VAR 0 2
24659: NOT
24660: PUSH
24661: LD_VAR 0 3
24665: NOT
24666: OR
24667: IFFALSE 24671
// exit ;
24669: GO 26317
// if not range then
24671: LD_VAR 0 4
24675: NOT
24676: IFFALSE 24686
// range := 10 ;
24678: LD_ADDR_VAR 0 4
24682: PUSH
24683: LD_INT 10
24685: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24686: LD_ADDR_VAR 0 8
24690: PUSH
24691: LD_INT 81
24693: PUSH
24694: LD_VAR 0 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 92
24705: PUSH
24706: LD_VAR 0 2
24710: PUSH
24711: LD_VAR 0 3
24715: PUSH
24716: LD_VAR 0 4
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 3
24729: PUSH
24730: LD_INT 21
24732: PUSH
24733: LD_INT 3
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: LIST
24748: PPUSH
24749: CALL_OW 69
24753: ST_TO_ADDR
// if not tmp then
24754: LD_VAR 0 8
24758: NOT
24759: IFFALSE 24763
// exit ;
24761: GO 26317
// for i in tmp do
24763: LD_ADDR_VAR 0 6
24767: PUSH
24768: LD_VAR 0 8
24772: PUSH
24773: FOR_IN
24774: IFFALSE 26292
// begin points := [ 0 , 0 , 0 ] ;
24776: LD_ADDR_VAR 0 9
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: ST_TO_ADDR
// bpoints := 1 ;
24795: LD_ADDR_VAR 0 10
24799: PUSH
24800: LD_INT 1
24802: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24803: LD_VAR 0 6
24807: PPUSH
24808: CALL_OW 247
24812: PUSH
24813: LD_INT 1
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 25399
24821: POP
// begin if GetClass ( i ) = 1 then
24822: LD_VAR 0 6
24826: PPUSH
24827: CALL_OW 257
24831: PUSH
24832: LD_INT 1
24834: EQUAL
24835: IFFALSE 24856
// points := [ 10 , 5 , 3 ] ;
24837: LD_ADDR_VAR 0 9
24841: PUSH
24842: LD_INT 10
24844: PUSH
24845: LD_INT 5
24847: PUSH
24848: LD_INT 3
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24856: LD_VAR 0 6
24860: PPUSH
24861: CALL_OW 257
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 4
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: IN
24880: IFFALSE 24901
// points := [ 3 , 2 , 1 ] ;
24882: LD_ADDR_VAR 0 9
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24901: LD_VAR 0 6
24905: PPUSH
24906: CALL_OW 257
24910: PUSH
24911: LD_INT 5
24913: EQUAL
24914: IFFALSE 24935
// points := [ 130 , 5 , 2 ] ;
24916: LD_ADDR_VAR 0 9
24920: PUSH
24921: LD_INT 130
24923: PUSH
24924: LD_INT 5
24926: PUSH
24927: LD_INT 2
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: LIST
24934: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24935: LD_VAR 0 6
24939: PPUSH
24940: CALL_OW 257
24944: PUSH
24945: LD_INT 8
24947: EQUAL
24948: IFFALSE 24969
// points := [ 35 , 35 , 30 ] ;
24950: LD_ADDR_VAR 0 9
24954: PUSH
24955: LD_INT 35
24957: PUSH
24958: LD_INT 35
24960: PUSH
24961: LD_INT 30
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24969: LD_VAR 0 6
24973: PPUSH
24974: CALL_OW 257
24978: PUSH
24979: LD_INT 9
24981: EQUAL
24982: IFFALSE 25003
// points := [ 20 , 55 , 40 ] ;
24984: LD_ADDR_VAR 0 9
24988: PUSH
24989: LD_INT 20
24991: PUSH
24992: LD_INT 55
24994: PUSH
24995: LD_INT 40
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25003: LD_VAR 0 6
25007: PPUSH
25008: CALL_OW 257
25012: PUSH
25013: LD_INT 12
25015: PUSH
25016: LD_INT 16
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: IN
25023: IFFALSE 25044
// points := [ 5 , 3 , 2 ] ;
25025: LD_ADDR_VAR 0 9
25029: PUSH
25030: LD_INT 5
25032: PUSH
25033: LD_INT 3
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25044: LD_VAR 0 6
25048: PPUSH
25049: CALL_OW 257
25053: PUSH
25054: LD_INT 17
25056: EQUAL
25057: IFFALSE 25078
// points := [ 100 , 50 , 75 ] ;
25059: LD_ADDR_VAR 0 9
25063: PUSH
25064: LD_INT 100
25066: PUSH
25067: LD_INT 50
25069: PUSH
25070: LD_INT 75
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: LIST
25077: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25078: LD_VAR 0 6
25082: PPUSH
25083: CALL_OW 257
25087: PUSH
25088: LD_INT 15
25090: EQUAL
25091: IFFALSE 25112
// points := [ 10 , 5 , 3 ] ;
25093: LD_ADDR_VAR 0 9
25097: PUSH
25098: LD_INT 10
25100: PUSH
25101: LD_INT 5
25103: PUSH
25104: LD_INT 3
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25112: LD_VAR 0 6
25116: PPUSH
25117: CALL_OW 257
25121: PUSH
25122: LD_INT 14
25124: EQUAL
25125: IFFALSE 25146
// points := [ 10 , 0 , 0 ] ;
25127: LD_ADDR_VAR 0 9
25131: PUSH
25132: LD_INT 10
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: LIST
25145: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25146: LD_VAR 0 6
25150: PPUSH
25151: CALL_OW 257
25155: PUSH
25156: LD_INT 11
25158: EQUAL
25159: IFFALSE 25180
// points := [ 30 , 10 , 5 ] ;
25161: LD_ADDR_VAR 0 9
25165: PUSH
25166: LD_INT 30
25168: PUSH
25169: LD_INT 10
25171: PUSH
25172: LD_INT 5
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25180: LD_VAR 0 1
25184: PPUSH
25185: LD_INT 5
25187: PPUSH
25188: CALL_OW 321
25192: PUSH
25193: LD_INT 2
25195: EQUAL
25196: IFFALSE 25213
// bpoints := bpoints * 1.8 ;
25198: LD_ADDR_VAR 0 10
25202: PUSH
25203: LD_VAR 0 10
25207: PUSH
25208: LD_REAL  1.80000000000000E+0000
25211: MUL
25212: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25213: LD_VAR 0 6
25217: PPUSH
25218: CALL_OW 257
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: LD_INT 2
25228: PUSH
25229: LD_INT 3
25231: PUSH
25232: LD_INT 4
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: IN
25241: PUSH
25242: LD_VAR 0 1
25246: PPUSH
25247: LD_INT 51
25249: PPUSH
25250: CALL_OW 321
25254: PUSH
25255: LD_INT 2
25257: EQUAL
25258: AND
25259: IFFALSE 25276
// bpoints := bpoints * 1.2 ;
25261: LD_ADDR_VAR 0 10
25265: PUSH
25266: LD_VAR 0 10
25270: PUSH
25271: LD_REAL  1.20000000000000E+0000
25274: MUL
25275: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25276: LD_VAR 0 6
25280: PPUSH
25281: CALL_OW 257
25285: PUSH
25286: LD_INT 5
25288: PUSH
25289: LD_INT 7
25291: PUSH
25292: LD_INT 9
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: IN
25300: PUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: LD_INT 52
25308: PPUSH
25309: CALL_OW 321
25313: PUSH
25314: LD_INT 2
25316: EQUAL
25317: AND
25318: IFFALSE 25335
// bpoints := bpoints * 1.5 ;
25320: LD_ADDR_VAR 0 10
25324: PUSH
25325: LD_VAR 0 10
25329: PUSH
25330: LD_REAL  1.50000000000000E+0000
25333: MUL
25334: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25335: LD_VAR 0 1
25339: PPUSH
25340: LD_INT 66
25342: PPUSH
25343: CALL_OW 321
25347: PUSH
25348: LD_INT 2
25350: EQUAL
25351: IFFALSE 25368
// bpoints := bpoints * 1.1 ;
25353: LD_ADDR_VAR 0 10
25357: PUSH
25358: LD_VAR 0 10
25362: PUSH
25363: LD_REAL  1.10000000000000E+0000
25366: MUL
25367: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25368: LD_ADDR_VAR 0 10
25372: PUSH
25373: LD_VAR 0 10
25377: PUSH
25378: LD_VAR 0 6
25382: PPUSH
25383: LD_INT 1
25385: PPUSH
25386: CALL_OW 259
25390: PUSH
25391: LD_REAL  1.15000000000000E+0000
25394: MUL
25395: MUL
25396: ST_TO_ADDR
// end ; unit_vehicle :
25397: GO 26221
25399: LD_INT 2
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 26209
25407: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25408: LD_VAR 0 6
25412: PPUSH
25413: CALL_OW 264
25417: PUSH
25418: LD_INT 2
25420: PUSH
25421: LD_INT 42
25423: PUSH
25424: LD_INT 24
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: IN
25432: IFFALSE 25453
// points := [ 25 , 5 , 3 ] ;
25434: LD_ADDR_VAR 0 9
25438: PUSH
25439: LD_INT 25
25441: PUSH
25442: LD_INT 5
25444: PUSH
25445: LD_INT 3
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25453: LD_VAR 0 6
25457: PPUSH
25458: CALL_OW 264
25462: PUSH
25463: LD_INT 4
25465: PUSH
25466: LD_INT 43
25468: PUSH
25469: LD_INT 25
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: IN
25477: IFFALSE 25498
// points := [ 40 , 15 , 5 ] ;
25479: LD_ADDR_VAR 0 9
25483: PUSH
25484: LD_INT 40
25486: PUSH
25487: LD_INT 15
25489: PUSH
25490: LD_INT 5
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: LIST
25497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
25498: LD_VAR 0 6
25502: PPUSH
25503: CALL_OW 264
25507: PUSH
25508: LD_INT 3
25510: PUSH
25511: LD_INT 23
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: IN
25518: IFFALSE 25539
// points := [ 7 , 25 , 8 ] ;
25520: LD_ADDR_VAR 0 9
25524: PUSH
25525: LD_INT 7
25527: PUSH
25528: LD_INT 25
25530: PUSH
25531: LD_INT 8
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: LIST
25538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
25539: LD_VAR 0 6
25543: PPUSH
25544: CALL_OW 264
25548: PUSH
25549: LD_INT 5
25551: PUSH
25552: LD_INT 27
25554: PUSH
25555: LD_INT 44
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: LIST
25562: IN
25563: IFFALSE 25584
// points := [ 14 , 50 , 16 ] ;
25565: LD_ADDR_VAR 0 9
25569: PUSH
25570: LD_INT 14
25572: PUSH
25573: LD_INT 50
25575: PUSH
25576: LD_INT 16
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
25584: LD_VAR 0 6
25588: PPUSH
25589: CALL_OW 264
25593: PUSH
25594: LD_INT 6
25596: PUSH
25597: LD_INT 46
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: IN
25604: IFFALSE 25625
// points := [ 32 , 120 , 70 ] ;
25606: LD_ADDR_VAR 0 9
25610: PUSH
25611: LD_INT 32
25613: PUSH
25614: LD_INT 120
25616: PUSH
25617: LD_INT 70
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: LIST
25624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
25625: LD_VAR 0 6
25629: PPUSH
25630: CALL_OW 264
25634: PUSH
25635: LD_INT 7
25637: PUSH
25638: LD_INT 28
25640: PUSH
25641: LD_INT 45
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: IN
25649: IFFALSE 25670
// points := [ 35 , 20 , 45 ] ;
25651: LD_ADDR_VAR 0 9
25655: PUSH
25656: LD_INT 35
25658: PUSH
25659: LD_INT 20
25661: PUSH
25662: LD_INT 45
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: LIST
25669: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
25670: LD_VAR 0 6
25674: PPUSH
25675: CALL_OW 264
25679: PUSH
25680: LD_INT 47
25682: PUSH
25683: EMPTY
25684: LIST
25685: IN
25686: IFFALSE 25707
// points := [ 67 , 45 , 75 ] ;
25688: LD_ADDR_VAR 0 9
25692: PUSH
25693: LD_INT 67
25695: PUSH
25696: LD_INT 45
25698: PUSH
25699: LD_INT 75
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: LIST
25706: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
25707: LD_VAR 0 6
25711: PPUSH
25712: CALL_OW 264
25716: PUSH
25717: LD_INT 26
25719: PUSH
25720: EMPTY
25721: LIST
25722: IN
25723: IFFALSE 25744
// points := [ 120 , 30 , 80 ] ;
25725: LD_ADDR_VAR 0 9
25729: PUSH
25730: LD_INT 120
25732: PUSH
25733: LD_INT 30
25735: PUSH
25736: LD_INT 80
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
25744: LD_VAR 0 6
25748: PPUSH
25749: CALL_OW 264
25753: PUSH
25754: LD_INT 22
25756: PUSH
25757: EMPTY
25758: LIST
25759: IN
25760: IFFALSE 25781
// points := [ 40 , 1 , 1 ] ;
25762: LD_ADDR_VAR 0 9
25766: PUSH
25767: LD_INT 40
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: LIST
25780: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25781: LD_VAR 0 6
25785: PPUSH
25786: CALL_OW 264
25790: PUSH
25791: LD_INT 29
25793: PUSH
25794: EMPTY
25795: LIST
25796: IN
25797: IFFALSE 25818
// points := [ 70 , 200 , 400 ] ;
25799: LD_ADDR_VAR 0 9
25803: PUSH
25804: LD_INT 70
25806: PUSH
25807: LD_INT 200
25809: PUSH
25810: LD_INT 400
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: LIST
25817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25818: LD_VAR 0 6
25822: PPUSH
25823: CALL_OW 264
25827: PUSH
25828: LD_INT 14
25830: PUSH
25831: LD_INT 53
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: IN
25838: IFFALSE 25859
// points := [ 40 , 10 , 20 ] ;
25840: LD_ADDR_VAR 0 9
25844: PUSH
25845: LD_INT 40
25847: PUSH
25848: LD_INT 10
25850: PUSH
25851: LD_INT 20
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25859: LD_VAR 0 6
25863: PPUSH
25864: CALL_OW 264
25868: PUSH
25869: LD_INT 9
25871: PUSH
25872: EMPTY
25873: LIST
25874: IN
25875: IFFALSE 25896
// points := [ 5 , 70 , 20 ] ;
25877: LD_ADDR_VAR 0 9
25881: PUSH
25882: LD_INT 5
25884: PUSH
25885: LD_INT 70
25887: PUSH
25888: LD_INT 20
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25896: LD_VAR 0 6
25900: PPUSH
25901: CALL_OW 264
25905: PUSH
25906: LD_INT 10
25908: PUSH
25909: EMPTY
25910: LIST
25911: IN
25912: IFFALSE 25933
// points := [ 35 , 110 , 70 ] ;
25914: LD_ADDR_VAR 0 9
25918: PUSH
25919: LD_INT 35
25921: PUSH
25922: LD_INT 110
25924: PUSH
25925: LD_INT 70
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25933: LD_VAR 0 6
25937: PPUSH
25938: CALL_OW 265
25942: PUSH
25943: LD_INT 25
25945: EQUAL
25946: IFFALSE 25967
// points := [ 80 , 65 , 100 ] ;
25948: LD_ADDR_VAR 0 9
25952: PUSH
25953: LD_INT 80
25955: PUSH
25956: LD_INT 65
25958: PUSH
25959: LD_INT 100
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25967: LD_VAR 0 6
25971: PPUSH
25972: CALL_OW 263
25976: PUSH
25977: LD_INT 1
25979: EQUAL
25980: IFFALSE 26015
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25982: LD_ADDR_VAR 0 10
25986: PUSH
25987: LD_VAR 0 10
25991: PUSH
25992: LD_VAR 0 6
25996: PPUSH
25997: CALL_OW 311
26001: PPUSH
26002: LD_INT 3
26004: PPUSH
26005: CALL_OW 259
26009: PUSH
26010: LD_INT 4
26012: MUL
26013: MUL
26014: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26015: LD_VAR 0 6
26019: PPUSH
26020: CALL_OW 263
26024: PUSH
26025: LD_INT 2
26027: EQUAL
26028: IFFALSE 26079
// begin j := IsControledBy ( i ) ;
26030: LD_ADDR_VAR 0 7
26034: PUSH
26035: LD_VAR 0 6
26039: PPUSH
26040: CALL_OW 312
26044: ST_TO_ADDR
// if j then
26045: LD_VAR 0 7
26049: IFFALSE 26079
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26051: LD_ADDR_VAR 0 10
26055: PUSH
26056: LD_VAR 0 10
26060: PUSH
26061: LD_VAR 0 7
26065: PPUSH
26066: LD_INT 3
26068: PPUSH
26069: CALL_OW 259
26073: PUSH
26074: LD_INT 3
26076: MUL
26077: MUL
26078: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26079: LD_VAR 0 6
26083: PPUSH
26084: CALL_OW 264
26088: PUSH
26089: LD_INT 5
26091: PUSH
26092: LD_INT 6
26094: PUSH
26095: LD_INT 46
26097: PUSH
26098: LD_INT 44
26100: PUSH
26101: LD_INT 47
26103: PUSH
26104: LD_INT 45
26106: PUSH
26107: LD_INT 28
26109: PUSH
26110: LD_INT 7
26112: PUSH
26113: LD_INT 27
26115: PUSH
26116: LD_INT 29
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: IN
26131: PUSH
26132: LD_VAR 0 1
26136: PPUSH
26137: LD_INT 52
26139: PPUSH
26140: CALL_OW 321
26144: PUSH
26145: LD_INT 2
26147: EQUAL
26148: AND
26149: IFFALSE 26166
// bpoints := bpoints * 1.2 ;
26151: LD_ADDR_VAR 0 10
26155: PUSH
26156: LD_VAR 0 10
26160: PUSH
26161: LD_REAL  1.20000000000000E+0000
26164: MUL
26165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26166: LD_VAR 0 6
26170: PPUSH
26171: CALL_OW 264
26175: PUSH
26176: LD_INT 6
26178: PUSH
26179: LD_INT 46
26181: PUSH
26182: LD_INT 47
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: IN
26190: IFFALSE 26207
// bpoints := bpoints * 1.2 ;
26192: LD_ADDR_VAR 0 10
26196: PUSH
26197: LD_VAR 0 10
26201: PUSH
26202: LD_REAL  1.20000000000000E+0000
26205: MUL
26206: ST_TO_ADDR
// end ; unit_building :
26207: GO 26221
26209: LD_INT 3
26211: DOUBLE
26212: EQUAL
26213: IFTRUE 26217
26215: GO 26220
26217: POP
// ; end ;
26218: GO 26221
26220: POP
// for j = 1 to 3 do
26221: LD_ADDR_VAR 0 7
26225: PUSH
26226: DOUBLE
26227: LD_INT 1
26229: DEC
26230: ST_TO_ADDR
26231: LD_INT 3
26233: PUSH
26234: FOR_TO
26235: IFFALSE 26288
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26237: LD_ADDR_VAR 0 5
26241: PUSH
26242: LD_VAR 0 5
26246: PPUSH
26247: LD_VAR 0 7
26251: PPUSH
26252: LD_VAR 0 5
26256: PUSH
26257: LD_VAR 0 7
26261: ARRAY
26262: PUSH
26263: LD_VAR 0 9
26267: PUSH
26268: LD_VAR 0 7
26272: ARRAY
26273: PUSH
26274: LD_VAR 0 10
26278: MUL
26279: PLUS
26280: PPUSH
26281: CALL_OW 1
26285: ST_TO_ADDR
26286: GO 26234
26288: POP
26289: POP
// end ;
26290: GO 24773
26292: POP
26293: POP
// result := Replace ( result , 4 , tmp ) ;
26294: LD_ADDR_VAR 0 5
26298: PUSH
26299: LD_VAR 0 5
26303: PPUSH
26304: LD_INT 4
26306: PPUSH
26307: LD_VAR 0 8
26311: PPUSH
26312: CALL_OW 1
26316: ST_TO_ADDR
// end ;
26317: LD_VAR 0 5
26321: RET
// export function DangerAtRange ( unit , range ) ; begin
26322: LD_INT 0
26324: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26325: LD_ADDR_VAR 0 3
26329: PUSH
26330: LD_VAR 0 1
26334: PPUSH
26335: CALL_OW 255
26339: PPUSH
26340: LD_VAR 0 1
26344: PPUSH
26345: CALL_OW 250
26349: PPUSH
26350: LD_VAR 0 1
26354: PPUSH
26355: CALL_OW 251
26359: PPUSH
26360: LD_VAR 0 2
26364: PPUSH
26365: CALL 24625 0 4
26369: ST_TO_ADDR
// end ;
26370: LD_VAR 0 3
26374: RET
// export function DangerInArea ( side , area ) ; begin
26375: LD_INT 0
26377: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26378: LD_ADDR_VAR 0 3
26382: PUSH
26383: LD_VAR 0 2
26387: PPUSH
26388: LD_INT 81
26390: PUSH
26391: LD_VAR 0 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PPUSH
26400: CALL_OW 70
26404: ST_TO_ADDR
// end ;
26405: LD_VAR 0 3
26409: RET
// export function IsExtension ( b ) ; begin
26410: LD_INT 0
26412: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26413: LD_ADDR_VAR 0 2
26417: PUSH
26418: LD_VAR 0 1
26422: PUSH
26423: LD_INT 23
26425: PUSH
26426: LD_INT 20
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_INT 17
26434: PUSH
26435: LD_INT 24
26437: PUSH
26438: LD_INT 21
26440: PUSH
26441: LD_INT 19
26443: PUSH
26444: LD_INT 16
26446: PUSH
26447: LD_INT 25
26449: PUSH
26450: LD_INT 18
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: IN
26465: ST_TO_ADDR
// end ;
26466: LD_VAR 0 2
26470: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
26471: LD_INT 0
26473: PPUSH
26474: PPUSH
26475: PPUSH
// result := [ ] ;
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: EMPTY
26482: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
26483: LD_ADDR_VAR 0 4
26487: PUSH
26488: LD_VAR 0 2
26492: PPUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 3
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 70
26507: ST_TO_ADDR
// if not tmp then
26508: LD_VAR 0 4
26512: NOT
26513: IFFALSE 26517
// exit ;
26515: GO 26575
// for i in tmp do
26517: LD_ADDR_VAR 0 5
26521: PUSH
26522: LD_VAR 0 4
26526: PUSH
26527: FOR_IN
26528: IFFALSE 26563
// if GetBase ( i ) <> base then
26530: LD_VAR 0 5
26534: PPUSH
26535: CALL_OW 274
26539: PUSH
26540: LD_VAR 0 1
26544: NONEQUAL
26545: IFFALSE 26561
// ComLinkToBase ( base , i ) ;
26547: LD_VAR 0 1
26551: PPUSH
26552: LD_VAR 0 5
26556: PPUSH
26557: CALL_OW 169
26561: GO 26527
26563: POP
26564: POP
// result := tmp ;
26565: LD_ADDR_VAR 0 3
26569: PUSH
26570: LD_VAR 0 4
26574: ST_TO_ADDR
// end ;
26575: LD_VAR 0 3
26579: RET
// export function ComComplete ( unit , b ) ; var i ; begin
26580: LD_INT 0
26582: PPUSH
26583: PPUSH
// if BuildingStatus ( b ) = bs_build then
26584: LD_VAR 0 2
26588: PPUSH
26589: CALL_OW 461
26593: PUSH
26594: LD_INT 1
26596: EQUAL
26597: IFFALSE 26657
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
26599: LD_VAR 0 1
26603: PPUSH
26604: LD_STRING h
26606: PUSH
26607: LD_VAR 0 2
26611: PPUSH
26612: CALL_OW 250
26616: PUSH
26617: LD_VAR 0 2
26621: PPUSH
26622: CALL_OW 251
26626: PUSH
26627: LD_VAR 0 2
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: LD_INT 0
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: PPUSH
26653: CALL_OW 446
// end ;
26657: LD_VAR 0 3
26661: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
26662: LD_INT 0
26664: PPUSH
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
26670: LD_VAR 0 1
26674: NOT
26675: PUSH
26676: LD_VAR 0 1
26680: PPUSH
26681: CALL_OW 263
26685: PUSH
26686: LD_INT 2
26688: EQUAL
26689: NOT
26690: OR
26691: IFFALSE 26695
// exit ;
26693: GO 27011
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
26695: LD_ADDR_VAR 0 6
26699: PUSH
26700: LD_INT 22
26702: PUSH
26703: LD_VAR 0 1
26707: PPUSH
26708: CALL_OW 255
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 30
26722: PUSH
26723: LD_INT 36
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 34
26732: PUSH
26733: LD_INT 31
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PPUSH
26749: CALL_OW 69
26753: ST_TO_ADDR
// if not tmp then
26754: LD_VAR 0 6
26758: NOT
26759: IFFALSE 26763
// exit ;
26761: GO 27011
// result := [ ] ;
26763: LD_ADDR_VAR 0 2
26767: PUSH
26768: EMPTY
26769: ST_TO_ADDR
// for i in tmp do
26770: LD_ADDR_VAR 0 3
26774: PUSH
26775: LD_VAR 0 6
26779: PUSH
26780: FOR_IN
26781: IFFALSE 26852
// begin t := UnitsInside ( i ) ;
26783: LD_ADDR_VAR 0 4
26787: PUSH
26788: LD_VAR 0 3
26792: PPUSH
26793: CALL_OW 313
26797: ST_TO_ADDR
// if t then
26798: LD_VAR 0 4
26802: IFFALSE 26850
// for j in t do
26804: LD_ADDR_VAR 0 7
26808: PUSH
26809: LD_VAR 0 4
26813: PUSH
26814: FOR_IN
26815: IFFALSE 26848
// result := Insert ( result , result + 1 , j ) ;
26817: LD_ADDR_VAR 0 2
26821: PUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_VAR 0 2
26831: PUSH
26832: LD_INT 1
26834: PLUS
26835: PPUSH
26836: LD_VAR 0 7
26840: PPUSH
26841: CALL_OW 2
26845: ST_TO_ADDR
26846: GO 26814
26848: POP
26849: POP
// end ;
26850: GO 26780
26852: POP
26853: POP
// if not result then
26854: LD_VAR 0 2
26858: NOT
26859: IFFALSE 26863
// exit ;
26861: GO 27011
// mech := result [ 1 ] ;
26863: LD_ADDR_VAR 0 5
26867: PUSH
26868: LD_VAR 0 2
26872: PUSH
26873: LD_INT 1
26875: ARRAY
26876: ST_TO_ADDR
// if result > 1 then
26877: LD_VAR 0 2
26881: PUSH
26882: LD_INT 1
26884: GREATER
26885: IFFALSE 26997
// for i = 2 to result do
26887: LD_ADDR_VAR 0 3
26891: PUSH
26892: DOUBLE
26893: LD_INT 2
26895: DEC
26896: ST_TO_ADDR
26897: LD_VAR 0 2
26901: PUSH
26902: FOR_TO
26903: IFFALSE 26995
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26905: LD_ADDR_VAR 0 4
26909: PUSH
26910: LD_VAR 0 2
26914: PUSH
26915: LD_VAR 0 3
26919: ARRAY
26920: PPUSH
26921: LD_INT 3
26923: PPUSH
26924: CALL_OW 259
26928: PUSH
26929: LD_VAR 0 2
26933: PUSH
26934: LD_VAR 0 3
26938: ARRAY
26939: PPUSH
26940: CALL_OW 432
26944: MINUS
26945: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26946: LD_VAR 0 4
26950: PUSH
26951: LD_VAR 0 5
26955: PPUSH
26956: LD_INT 3
26958: PPUSH
26959: CALL_OW 259
26963: PUSH
26964: LD_VAR 0 5
26968: PPUSH
26969: CALL_OW 432
26973: MINUS
26974: GREATEREQUAL
26975: IFFALSE 26993
// mech := result [ i ] ;
26977: LD_ADDR_VAR 0 5
26981: PUSH
26982: LD_VAR 0 2
26986: PUSH
26987: LD_VAR 0 3
26991: ARRAY
26992: ST_TO_ADDR
// end ;
26993: GO 26902
26995: POP
26996: POP
// ComLinkTo ( vehicle , mech ) ;
26997: LD_VAR 0 1
27001: PPUSH
27002: LD_VAR 0 5
27006: PPUSH
27007: CALL_OW 135
// end ;
27011: LD_VAR 0 2
27015: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27016: LD_INT 0
27018: PPUSH
27019: PPUSH
27020: PPUSH
27021: PPUSH
27022: PPUSH
27023: PPUSH
27024: PPUSH
27025: PPUSH
27026: PPUSH
27027: PPUSH
27028: PPUSH
27029: PPUSH
27030: PPUSH
// result := [ ] ;
27031: LD_ADDR_VAR 0 7
27035: PUSH
27036: EMPTY
27037: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27038: LD_VAR 0 1
27042: PPUSH
27043: CALL_OW 266
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: IN
27058: NOT
27059: IFFALSE 27063
// exit ;
27061: GO 28694
// if name then
27063: LD_VAR 0 3
27067: IFFALSE 27083
// SetBName ( base_dep , name ) ;
27069: LD_VAR 0 1
27073: PPUSH
27074: LD_VAR 0 3
27078: PPUSH
27079: CALL_OW 500
// base := GetBase ( base_dep ) ;
27083: LD_ADDR_VAR 0 15
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 274
27097: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27098: LD_ADDR_VAR 0 16
27102: PUSH
27103: LD_VAR 0 1
27107: PPUSH
27108: CALL_OW 255
27112: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27113: LD_ADDR_VAR 0 17
27117: PUSH
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL_OW 248
27127: ST_TO_ADDR
// if sources then
27128: LD_VAR 0 5
27132: IFFALSE 27179
// for i = 1 to 3 do
27134: LD_ADDR_VAR 0 8
27138: PUSH
27139: DOUBLE
27140: LD_INT 1
27142: DEC
27143: ST_TO_ADDR
27144: LD_INT 3
27146: PUSH
27147: FOR_TO
27148: IFFALSE 27177
// AddResourceType ( base , i , sources [ i ] ) ;
27150: LD_VAR 0 15
27154: PPUSH
27155: LD_VAR 0 8
27159: PPUSH
27160: LD_VAR 0 5
27164: PUSH
27165: LD_VAR 0 8
27169: ARRAY
27170: PPUSH
27171: CALL_OW 276
27175: GO 27147
27177: POP
27178: POP
// buildings := GetBaseBuildings ( base , area ) ;
27179: LD_ADDR_VAR 0 18
27183: PUSH
27184: LD_VAR 0 15
27188: PPUSH
27189: LD_VAR 0 2
27193: PPUSH
27194: CALL 26471 0 2
27198: ST_TO_ADDR
// InitHc ;
27199: CALL_OW 19
// InitUc ;
27203: CALL_OW 18
// uc_side := side ;
27207: LD_ADDR_OWVAR 20
27211: PUSH
27212: LD_VAR 0 16
27216: ST_TO_ADDR
// uc_nation := nation ;
27217: LD_ADDR_OWVAR 21
27221: PUSH
27222: LD_VAR 0 17
27226: ST_TO_ADDR
// if buildings then
27227: LD_VAR 0 18
27231: IFFALSE 28553
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27233: LD_ADDR_VAR 0 19
27237: PUSH
27238: LD_VAR 0 18
27242: PPUSH
27243: LD_INT 2
27245: PUSH
27246: LD_INT 30
27248: PUSH
27249: LD_INT 29
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 30
27258: PUSH
27259: LD_INT 30
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: LIST
27270: PPUSH
27271: CALL_OW 72
27275: ST_TO_ADDR
// if tmp then
27276: LD_VAR 0 19
27280: IFFALSE 27328
// for i in tmp do
27282: LD_ADDR_VAR 0 8
27286: PUSH
27287: LD_VAR 0 19
27291: PUSH
27292: FOR_IN
27293: IFFALSE 27326
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27295: LD_VAR 0 8
27299: PPUSH
27300: CALL_OW 250
27304: PPUSH
27305: LD_VAR 0 8
27309: PPUSH
27310: CALL_OW 251
27314: PPUSH
27315: LD_VAR 0 16
27319: PPUSH
27320: CALL_OW 441
27324: GO 27292
27326: POP
27327: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27328: LD_VAR 0 18
27332: PPUSH
27333: LD_INT 2
27335: PUSH
27336: LD_INT 30
27338: PUSH
27339: LD_INT 32
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 30
27348: PUSH
27349: LD_INT 33
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: LIST
27360: PPUSH
27361: CALL_OW 72
27365: IFFALSE 27453
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27367: LD_ADDR_VAR 0 8
27371: PUSH
27372: LD_VAR 0 18
27376: PPUSH
27377: LD_INT 2
27379: PUSH
27380: LD_INT 30
27382: PUSH
27383: LD_INT 32
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 30
27392: PUSH
27393: LD_INT 33
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: PPUSH
27405: CALL_OW 72
27409: PUSH
27410: FOR_IN
27411: IFFALSE 27451
// begin if not GetBWeapon ( i ) then
27413: LD_VAR 0 8
27417: PPUSH
27418: CALL_OW 269
27422: NOT
27423: IFFALSE 27449
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27425: LD_VAR 0 8
27429: PPUSH
27430: LD_VAR 0 8
27434: PPUSH
27435: LD_VAR 0 2
27439: PPUSH
27440: CALL 28699 0 2
27444: PPUSH
27445: CALL_OW 431
// end ;
27449: GO 27410
27451: POP
27452: POP
// end ; for i = 1 to personel do
27453: LD_ADDR_VAR 0 8
27457: PUSH
27458: DOUBLE
27459: LD_INT 1
27461: DEC
27462: ST_TO_ADDR
27463: LD_VAR 0 6
27467: PUSH
27468: FOR_TO
27469: IFFALSE 28533
// begin if i > 4 then
27471: LD_VAR 0 8
27475: PUSH
27476: LD_INT 4
27478: GREATER
27479: IFFALSE 27483
// break ;
27481: GO 28533
// case i of 1 :
27483: LD_VAR 0 8
27487: PUSH
27488: LD_INT 1
27490: DOUBLE
27491: EQUAL
27492: IFTRUE 27496
27494: GO 27576
27496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
27497: LD_ADDR_VAR 0 12
27501: PUSH
27502: LD_VAR 0 18
27506: PPUSH
27507: LD_INT 22
27509: PUSH
27510: LD_VAR 0 16
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 58
27521: PUSH
27522: EMPTY
27523: LIST
27524: PUSH
27525: LD_INT 2
27527: PUSH
27528: LD_INT 30
27530: PUSH
27531: LD_INT 32
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 30
27540: PUSH
27541: LD_INT 4
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 30
27550: PUSH
27551: LD_INT 5
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: PPUSH
27569: CALL_OW 72
27573: ST_TO_ADDR
27574: GO 27798
27576: LD_INT 2
27578: DOUBLE
27579: EQUAL
27580: IFTRUE 27584
27582: GO 27646
27584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
27585: LD_ADDR_VAR 0 12
27589: PUSH
27590: LD_VAR 0 18
27594: PPUSH
27595: LD_INT 22
27597: PUSH
27598: LD_VAR 0 16
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 2
27609: PUSH
27610: LD_INT 30
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 30
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PPUSH
27639: CALL_OW 72
27643: ST_TO_ADDR
27644: GO 27798
27646: LD_INT 3
27648: DOUBLE
27649: EQUAL
27650: IFTRUE 27654
27652: GO 27716
27654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
27655: LD_ADDR_VAR 0 12
27659: PUSH
27660: LD_VAR 0 18
27664: PPUSH
27665: LD_INT 22
27667: PUSH
27668: LD_VAR 0 16
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: PUSH
27680: LD_INT 30
27682: PUSH
27683: LD_INT 2
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 30
27692: PUSH
27693: LD_INT 3
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PPUSH
27709: CALL_OW 72
27713: ST_TO_ADDR
27714: GO 27798
27716: LD_INT 4
27718: DOUBLE
27719: EQUAL
27720: IFTRUE 27724
27722: GO 27797
27724: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
27725: LD_ADDR_VAR 0 12
27729: PUSH
27730: LD_VAR 0 18
27734: PPUSH
27735: LD_INT 22
27737: PUSH
27738: LD_VAR 0 16
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 2
27749: PUSH
27750: LD_INT 30
27752: PUSH
27753: LD_INT 6
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 30
27762: PUSH
27763: LD_INT 7
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 30
27772: PUSH
27773: LD_INT 8
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL_OW 72
27794: ST_TO_ADDR
27795: GO 27798
27797: POP
// if i = 1 then
27798: LD_VAR 0 8
27802: PUSH
27803: LD_INT 1
27805: EQUAL
27806: IFFALSE 27917
// begin tmp := [ ] ;
27808: LD_ADDR_VAR 0 19
27812: PUSH
27813: EMPTY
27814: ST_TO_ADDR
// for j in f do
27815: LD_ADDR_VAR 0 9
27819: PUSH
27820: LD_VAR 0 12
27824: PUSH
27825: FOR_IN
27826: IFFALSE 27899
// if GetBType ( j ) = b_bunker then
27828: LD_VAR 0 9
27832: PPUSH
27833: CALL_OW 266
27837: PUSH
27838: LD_INT 32
27840: EQUAL
27841: IFFALSE 27868
// tmp := Insert ( tmp , 1 , j ) else
27843: LD_ADDR_VAR 0 19
27847: PUSH
27848: LD_VAR 0 19
27852: PPUSH
27853: LD_INT 1
27855: PPUSH
27856: LD_VAR 0 9
27860: PPUSH
27861: CALL_OW 2
27865: ST_TO_ADDR
27866: GO 27897
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27868: LD_ADDR_VAR 0 19
27872: PUSH
27873: LD_VAR 0 19
27877: PPUSH
27878: LD_VAR 0 19
27882: PUSH
27883: LD_INT 1
27885: PLUS
27886: PPUSH
27887: LD_VAR 0 9
27891: PPUSH
27892: CALL_OW 2
27896: ST_TO_ADDR
27897: GO 27825
27899: POP
27900: POP
// if tmp then
27901: LD_VAR 0 19
27905: IFFALSE 27917
// f := tmp ;
27907: LD_ADDR_VAR 0 12
27911: PUSH
27912: LD_VAR 0 19
27916: ST_TO_ADDR
// end ; x := personel [ i ] ;
27917: LD_ADDR_VAR 0 13
27921: PUSH
27922: LD_VAR 0 6
27926: PUSH
27927: LD_VAR 0 8
27931: ARRAY
27932: ST_TO_ADDR
// if x = - 1 then
27933: LD_VAR 0 13
27937: PUSH
27938: LD_INT 1
27940: NEG
27941: EQUAL
27942: IFFALSE 28151
// begin for j in f do
27944: LD_ADDR_VAR 0 9
27948: PUSH
27949: LD_VAR 0 12
27953: PUSH
27954: FOR_IN
27955: IFFALSE 28147
// repeat InitHc ;
27957: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27961: LD_VAR 0 9
27965: PPUSH
27966: CALL_OW 266
27970: PUSH
27971: LD_INT 5
27973: EQUAL
27974: IFFALSE 28044
// begin if UnitsInside ( j ) < 3 then
27976: LD_VAR 0 9
27980: PPUSH
27981: CALL_OW 313
27985: PUSH
27986: LD_INT 3
27988: LESS
27989: IFFALSE 28025
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27991: LD_INT 0
27993: PPUSH
27994: LD_INT 5
27996: PUSH
27997: LD_INT 8
27999: PUSH
28000: LD_INT 9
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: PUSH
28008: LD_VAR 0 17
28012: ARRAY
28013: PPUSH
28014: LD_VAR 0 4
28018: PPUSH
28019: CALL_OW 380
28023: GO 28042
// PrepareHuman ( false , i , skill ) ;
28025: LD_INT 0
28027: PPUSH
28028: LD_VAR 0 8
28032: PPUSH
28033: LD_VAR 0 4
28037: PPUSH
28038: CALL_OW 380
// end else
28042: GO 28061
// PrepareHuman ( false , i , skill ) ;
28044: LD_INT 0
28046: PPUSH
28047: LD_VAR 0 8
28051: PPUSH
28052: LD_VAR 0 4
28056: PPUSH
28057: CALL_OW 380
// un := CreateHuman ;
28061: LD_ADDR_VAR 0 14
28065: PUSH
28066: CALL_OW 44
28070: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28071: LD_ADDR_VAR 0 7
28075: PUSH
28076: LD_VAR 0 7
28080: PPUSH
28081: LD_INT 1
28083: PPUSH
28084: LD_VAR 0 14
28088: PPUSH
28089: CALL_OW 2
28093: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28094: LD_VAR 0 14
28098: PPUSH
28099: LD_VAR 0 9
28103: PPUSH
28104: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28108: LD_VAR 0 9
28112: PPUSH
28113: CALL_OW 313
28117: PUSH
28118: LD_INT 6
28120: EQUAL
28121: PUSH
28122: LD_VAR 0 9
28126: PPUSH
28127: CALL_OW 266
28131: PUSH
28132: LD_INT 32
28134: PUSH
28135: LD_INT 31
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: IN
28142: OR
28143: IFFALSE 27957
28145: GO 27954
28147: POP
28148: POP
// end else
28149: GO 28531
// for j = 1 to x do
28151: LD_ADDR_VAR 0 9
28155: PUSH
28156: DOUBLE
28157: LD_INT 1
28159: DEC
28160: ST_TO_ADDR
28161: LD_VAR 0 13
28165: PUSH
28166: FOR_TO
28167: IFFALSE 28529
// begin InitHc ;
28169: CALL_OW 19
// if not f then
28173: LD_VAR 0 12
28177: NOT
28178: IFFALSE 28267
// begin PrepareHuman ( false , i , skill ) ;
28180: LD_INT 0
28182: PPUSH
28183: LD_VAR 0 8
28187: PPUSH
28188: LD_VAR 0 4
28192: PPUSH
28193: CALL_OW 380
// un := CreateHuman ;
28197: LD_ADDR_VAR 0 14
28201: PUSH
28202: CALL_OW 44
28206: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28207: LD_ADDR_VAR 0 7
28211: PUSH
28212: LD_VAR 0 7
28216: PPUSH
28217: LD_INT 1
28219: PPUSH
28220: LD_VAR 0 14
28224: PPUSH
28225: CALL_OW 2
28229: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28230: LD_VAR 0 14
28234: PPUSH
28235: LD_VAR 0 1
28239: PPUSH
28240: CALL_OW 250
28244: PPUSH
28245: LD_VAR 0 1
28249: PPUSH
28250: CALL_OW 251
28254: PPUSH
28255: LD_INT 10
28257: PPUSH
28258: LD_INT 0
28260: PPUSH
28261: CALL_OW 50
// continue ;
28265: GO 28166
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28267: LD_VAR 0 12
28271: PUSH
28272: LD_INT 1
28274: ARRAY
28275: PPUSH
28276: CALL_OW 313
28280: PUSH
28281: LD_VAR 0 12
28285: PUSH
28286: LD_INT 1
28288: ARRAY
28289: PPUSH
28290: CALL_OW 266
28294: PUSH
28295: LD_INT 32
28297: PUSH
28298: LD_INT 31
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: IN
28305: AND
28306: PUSH
28307: LD_VAR 0 12
28311: PUSH
28312: LD_INT 1
28314: ARRAY
28315: PPUSH
28316: CALL_OW 313
28320: PUSH
28321: LD_INT 6
28323: EQUAL
28324: OR
28325: IFFALSE 28345
// f := Delete ( f , 1 ) ;
28327: LD_ADDR_VAR 0 12
28331: PUSH
28332: LD_VAR 0 12
28336: PPUSH
28337: LD_INT 1
28339: PPUSH
28340: CALL_OW 3
28344: ST_TO_ADDR
// if not f then
28345: LD_VAR 0 12
28349: NOT
28350: IFFALSE 28368
// begin x := x + 2 ;
28352: LD_ADDR_VAR 0 13
28356: PUSH
28357: LD_VAR 0 13
28361: PUSH
28362: LD_INT 2
28364: PLUS
28365: ST_TO_ADDR
// continue ;
28366: GO 28166
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28368: LD_VAR 0 12
28372: PUSH
28373: LD_INT 1
28375: ARRAY
28376: PPUSH
28377: CALL_OW 266
28381: PUSH
28382: LD_INT 5
28384: EQUAL
28385: IFFALSE 28459
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28387: LD_VAR 0 12
28391: PUSH
28392: LD_INT 1
28394: ARRAY
28395: PPUSH
28396: CALL_OW 313
28400: PUSH
28401: LD_INT 3
28403: LESS
28404: IFFALSE 28440
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28406: LD_INT 0
28408: PPUSH
28409: LD_INT 5
28411: PUSH
28412: LD_INT 8
28414: PUSH
28415: LD_INT 9
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: PUSH
28423: LD_VAR 0 17
28427: ARRAY
28428: PPUSH
28429: LD_VAR 0 4
28433: PPUSH
28434: CALL_OW 380
28438: GO 28457
// PrepareHuman ( false , i , skill ) ;
28440: LD_INT 0
28442: PPUSH
28443: LD_VAR 0 8
28447: PPUSH
28448: LD_VAR 0 4
28452: PPUSH
28453: CALL_OW 380
// end else
28457: GO 28476
// PrepareHuman ( false , i , skill ) ;
28459: LD_INT 0
28461: PPUSH
28462: LD_VAR 0 8
28466: PPUSH
28467: LD_VAR 0 4
28471: PPUSH
28472: CALL_OW 380
// un := CreateHuman ;
28476: LD_ADDR_VAR 0 14
28480: PUSH
28481: CALL_OW 44
28485: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28486: LD_ADDR_VAR 0 7
28490: PUSH
28491: LD_VAR 0 7
28495: PPUSH
28496: LD_INT 1
28498: PPUSH
28499: LD_VAR 0 14
28503: PPUSH
28504: CALL_OW 2
28508: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28509: LD_VAR 0 14
28513: PPUSH
28514: LD_VAR 0 12
28518: PUSH
28519: LD_INT 1
28521: ARRAY
28522: PPUSH
28523: CALL_OW 52
// end ;
28527: GO 28166
28529: POP
28530: POP
// end ;
28531: GO 27468
28533: POP
28534: POP
// result := result ^ buildings ;
28535: LD_ADDR_VAR 0 7
28539: PUSH
28540: LD_VAR 0 7
28544: PUSH
28545: LD_VAR 0 18
28549: ADD
28550: ST_TO_ADDR
// end else
28551: GO 28694
// begin for i = 1 to personel do
28553: LD_ADDR_VAR 0 8
28557: PUSH
28558: DOUBLE
28559: LD_INT 1
28561: DEC
28562: ST_TO_ADDR
28563: LD_VAR 0 6
28567: PUSH
28568: FOR_TO
28569: IFFALSE 28692
// begin if i > 4 then
28571: LD_VAR 0 8
28575: PUSH
28576: LD_INT 4
28578: GREATER
28579: IFFALSE 28583
// break ;
28581: GO 28692
// x := personel [ i ] ;
28583: LD_ADDR_VAR 0 13
28587: PUSH
28588: LD_VAR 0 6
28592: PUSH
28593: LD_VAR 0 8
28597: ARRAY
28598: ST_TO_ADDR
// if x = - 1 then
28599: LD_VAR 0 13
28603: PUSH
28604: LD_INT 1
28606: NEG
28607: EQUAL
28608: IFFALSE 28612
// continue ;
28610: GO 28568
// PrepareHuman ( false , i , skill ) ;
28612: LD_INT 0
28614: PPUSH
28615: LD_VAR 0 8
28619: PPUSH
28620: LD_VAR 0 4
28624: PPUSH
28625: CALL_OW 380
// un := CreateHuman ;
28629: LD_ADDR_VAR 0 14
28633: PUSH
28634: CALL_OW 44
28638: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28639: LD_VAR 0 14
28643: PPUSH
28644: LD_VAR 0 1
28648: PPUSH
28649: CALL_OW 250
28653: PPUSH
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 251
28663: PPUSH
28664: LD_INT 10
28666: PPUSH
28667: LD_INT 0
28669: PPUSH
28670: CALL_OW 50
// result := result ^ un ;
28674: LD_ADDR_VAR 0 7
28678: PUSH
28679: LD_VAR 0 7
28683: PUSH
28684: LD_VAR 0 14
28688: ADD
28689: ST_TO_ADDR
// end ;
28690: GO 28568
28692: POP
28693: POP
// end ; end ;
28694: LD_VAR 0 7
28698: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
28699: LD_INT 0
28701: PPUSH
28702: PPUSH
28703: PPUSH
28704: PPUSH
28705: PPUSH
28706: PPUSH
28707: PPUSH
28708: PPUSH
28709: PPUSH
28710: PPUSH
28711: PPUSH
28712: PPUSH
28713: PPUSH
28714: PPUSH
28715: PPUSH
28716: PPUSH
// result := false ;
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 0
28724: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
28725: LD_VAR 0 1
28729: NOT
28730: PUSH
28731: LD_VAR 0 1
28735: PPUSH
28736: CALL_OW 266
28740: PUSH
28741: LD_INT 32
28743: PUSH
28744: LD_INT 33
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: IN
28751: NOT
28752: OR
28753: IFFALSE 28757
// exit ;
28755: GO 29893
// nat := GetNation ( tower ) ;
28757: LD_ADDR_VAR 0 12
28761: PUSH
28762: LD_VAR 0 1
28766: PPUSH
28767: CALL_OW 248
28771: ST_TO_ADDR
// side := GetSide ( tower ) ;
28772: LD_ADDR_VAR 0 16
28776: PUSH
28777: LD_VAR 0 1
28781: PPUSH
28782: CALL_OW 255
28786: ST_TO_ADDR
// x := GetX ( tower ) ;
28787: LD_ADDR_VAR 0 10
28791: PUSH
28792: LD_VAR 0 1
28796: PPUSH
28797: CALL_OW 250
28801: ST_TO_ADDR
// y := GetY ( tower ) ;
28802: LD_ADDR_VAR 0 11
28806: PUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 251
28816: ST_TO_ADDR
// if not x or not y then
28817: LD_VAR 0 10
28821: NOT
28822: PUSH
28823: LD_VAR 0 11
28827: NOT
28828: OR
28829: IFFALSE 28833
// exit ;
28831: GO 29893
// weapon := 0 ;
28833: LD_ADDR_VAR 0 18
28837: PUSH
28838: LD_INT 0
28840: ST_TO_ADDR
// fac_list := [ ] ;
28841: LD_ADDR_VAR 0 17
28845: PUSH
28846: EMPTY
28847: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
28848: LD_ADDR_VAR 0 6
28852: PUSH
28853: LD_VAR 0 1
28857: PPUSH
28858: CALL_OW 274
28862: PPUSH
28863: LD_VAR 0 2
28867: PPUSH
28868: CALL 26471 0 2
28872: PPUSH
28873: LD_INT 30
28875: PUSH
28876: LD_INT 3
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PPUSH
28883: CALL_OW 72
28887: ST_TO_ADDR
// if not factories then
28888: LD_VAR 0 6
28892: NOT
28893: IFFALSE 28897
// exit ;
28895: GO 29893
// for i in factories do
28897: LD_ADDR_VAR 0 8
28901: PUSH
28902: LD_VAR 0 6
28906: PUSH
28907: FOR_IN
28908: IFFALSE 28933
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28910: LD_ADDR_VAR 0 17
28914: PUSH
28915: LD_VAR 0 17
28919: PUSH
28920: LD_VAR 0 8
28924: PPUSH
28925: CALL_OW 478
28929: UNION
28930: ST_TO_ADDR
28931: GO 28907
28933: POP
28934: POP
// if not fac_list then
28935: LD_VAR 0 17
28939: NOT
28940: IFFALSE 28944
// exit ;
28942: GO 29893
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28944: LD_ADDR_VAR 0 5
28948: PUSH
28949: LD_INT 4
28951: PUSH
28952: LD_INT 5
28954: PUSH
28955: LD_INT 9
28957: PUSH
28958: LD_INT 10
28960: PUSH
28961: LD_INT 6
28963: PUSH
28964: LD_INT 7
28966: PUSH
28967: LD_INT 11
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 27
28981: PUSH
28982: LD_INT 28
28984: PUSH
28985: LD_INT 26
28987: PUSH
28988: LD_INT 30
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 43
28999: PUSH
29000: LD_INT 44
29002: PUSH
29003: LD_INT 46
29005: PUSH
29006: LD_INT 45
29008: PUSH
29009: LD_INT 47
29011: PUSH
29012: LD_INT 49
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: PUSH
29028: LD_VAR 0 12
29032: ARRAY
29033: ST_TO_ADDR
// for i in list do
29034: LD_ADDR_VAR 0 8
29038: PUSH
29039: LD_VAR 0 5
29043: PUSH
29044: FOR_IN
29045: IFFALSE 29078
// if not i in fac_list then
29047: LD_VAR 0 8
29051: PUSH
29052: LD_VAR 0 17
29056: IN
29057: NOT
29058: IFFALSE 29076
// list := list diff i ;
29060: LD_ADDR_VAR 0 5
29064: PUSH
29065: LD_VAR 0 5
29069: PUSH
29070: LD_VAR 0 8
29074: DIFF
29075: ST_TO_ADDR
29076: GO 29044
29078: POP
29079: POP
// if not list then
29080: LD_VAR 0 5
29084: NOT
29085: IFFALSE 29089
// exit ;
29087: GO 29893
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29089: LD_VAR 0 12
29093: PUSH
29094: LD_INT 3
29096: EQUAL
29097: PUSH
29098: LD_INT 49
29100: PUSH
29101: LD_VAR 0 5
29105: IN
29106: AND
29107: PUSH
29108: LD_INT 31
29110: PPUSH
29111: LD_VAR 0 16
29115: PPUSH
29116: CALL_OW 321
29120: PUSH
29121: LD_INT 2
29123: EQUAL
29124: AND
29125: IFFALSE 29185
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29127: LD_INT 22
29129: PUSH
29130: LD_VAR 0 16
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 35
29141: PUSH
29142: LD_INT 49
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 91
29151: PUSH
29152: LD_VAR 0 1
29156: PUSH
29157: LD_INT 10
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: PPUSH
29170: CALL_OW 69
29174: NOT
29175: IFFALSE 29185
// weapon := ru_time_lapser ;
29177: LD_ADDR_VAR 0 18
29181: PUSH
29182: LD_INT 49
29184: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29185: LD_VAR 0 12
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: IN
29200: PUSH
29201: LD_INT 11
29203: PUSH
29204: LD_VAR 0 5
29208: IN
29209: PUSH
29210: LD_INT 30
29212: PUSH
29213: LD_VAR 0 5
29217: IN
29218: OR
29219: AND
29220: PUSH
29221: LD_INT 6
29223: PPUSH
29224: LD_VAR 0 16
29228: PPUSH
29229: CALL_OW 321
29233: PUSH
29234: LD_INT 2
29236: EQUAL
29237: AND
29238: IFFALSE 29403
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29240: LD_INT 22
29242: PUSH
29243: LD_VAR 0 16
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: LD_INT 35
29257: PUSH
29258: LD_INT 11
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 35
29267: PUSH
29268: LD_INT 30
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 91
29282: PUSH
29283: LD_VAR 0 1
29287: PUSH
29288: LD_INT 18
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: LIST
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: PPUSH
29301: CALL_OW 69
29305: NOT
29306: PUSH
29307: LD_INT 22
29309: PUSH
29310: LD_VAR 0 16
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: LD_INT 30
29324: PUSH
29325: LD_INT 32
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 30
29334: PUSH
29335: LD_INT 33
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 91
29349: PUSH
29350: LD_VAR 0 1
29354: PUSH
29355: LD_INT 12
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: PPUSH
29371: CALL_OW 69
29375: PUSH
29376: LD_INT 2
29378: GREATER
29379: AND
29380: IFFALSE 29403
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29382: LD_ADDR_VAR 0 18
29386: PUSH
29387: LD_INT 11
29389: PUSH
29390: LD_INT 30
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_VAR 0 12
29401: ARRAY
29402: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29403: LD_VAR 0 18
29407: NOT
29408: PUSH
29409: LD_INT 40
29411: PPUSH
29412: LD_VAR 0 16
29416: PPUSH
29417: CALL_OW 321
29421: PUSH
29422: LD_INT 2
29424: EQUAL
29425: AND
29426: PUSH
29427: LD_INT 7
29429: PUSH
29430: LD_VAR 0 5
29434: IN
29435: PUSH
29436: LD_INT 28
29438: PUSH
29439: LD_VAR 0 5
29443: IN
29444: OR
29445: PUSH
29446: LD_INT 45
29448: PUSH
29449: LD_VAR 0 5
29453: IN
29454: OR
29455: AND
29456: IFFALSE 29710
// begin hex := GetHexInfo ( x , y ) ;
29458: LD_ADDR_VAR 0 4
29462: PUSH
29463: LD_VAR 0 10
29467: PPUSH
29468: LD_VAR 0 11
29472: PPUSH
29473: CALL_OW 546
29477: ST_TO_ADDR
// if hex [ 1 ] then
29478: LD_VAR 0 4
29482: PUSH
29483: LD_INT 1
29485: ARRAY
29486: IFFALSE 29490
// exit ;
29488: GO 29893
// height := hex [ 2 ] ;
29490: LD_ADDR_VAR 0 15
29494: PUSH
29495: LD_VAR 0 4
29499: PUSH
29500: LD_INT 2
29502: ARRAY
29503: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29504: LD_ADDR_VAR 0 14
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: LD_INT 5
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: ST_TO_ADDR
// for i in tmp do
29527: LD_ADDR_VAR 0 8
29531: PUSH
29532: LD_VAR 0 14
29536: PUSH
29537: FOR_IN
29538: IFFALSE 29708
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
29540: LD_ADDR_VAR 0 9
29544: PUSH
29545: LD_VAR 0 10
29549: PPUSH
29550: LD_VAR 0 8
29554: PPUSH
29555: LD_INT 5
29557: PPUSH
29558: CALL_OW 272
29562: PUSH
29563: LD_VAR 0 11
29567: PPUSH
29568: LD_VAR 0 8
29572: PPUSH
29573: LD_INT 5
29575: PPUSH
29576: CALL_OW 273
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
29585: LD_VAR 0 9
29589: PUSH
29590: LD_INT 1
29592: ARRAY
29593: PPUSH
29594: LD_VAR 0 9
29598: PUSH
29599: LD_INT 2
29601: ARRAY
29602: PPUSH
29603: CALL_OW 488
29607: IFFALSE 29706
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
29609: LD_ADDR_VAR 0 4
29613: PUSH
29614: LD_VAR 0 9
29618: PUSH
29619: LD_INT 1
29621: ARRAY
29622: PPUSH
29623: LD_VAR 0 9
29627: PUSH
29628: LD_INT 2
29630: ARRAY
29631: PPUSH
29632: CALL_OW 546
29636: ST_TO_ADDR
// if hex [ 1 ] then
29637: LD_VAR 0 4
29641: PUSH
29642: LD_INT 1
29644: ARRAY
29645: IFFALSE 29649
// continue ;
29647: GO 29537
// h := hex [ 2 ] ;
29649: LD_ADDR_VAR 0 13
29653: PUSH
29654: LD_VAR 0 4
29658: PUSH
29659: LD_INT 2
29661: ARRAY
29662: ST_TO_ADDR
// if h + 7 < height then
29663: LD_VAR 0 13
29667: PUSH
29668: LD_INT 7
29670: PLUS
29671: PUSH
29672: LD_VAR 0 15
29676: LESS
29677: IFFALSE 29706
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
29679: LD_ADDR_VAR 0 18
29683: PUSH
29684: LD_INT 7
29686: PUSH
29687: LD_INT 28
29689: PUSH
29690: LD_INT 45
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: PUSH
29698: LD_VAR 0 12
29702: ARRAY
29703: ST_TO_ADDR
// break ;
29704: GO 29708
// end ; end ; end ;
29706: GO 29537
29708: POP
29709: POP
// end ; if not weapon then
29710: LD_VAR 0 18
29714: NOT
29715: IFFALSE 29775
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
29717: LD_ADDR_VAR 0 5
29721: PUSH
29722: LD_VAR 0 5
29726: PUSH
29727: LD_INT 11
29729: PUSH
29730: LD_INT 30
29732: PUSH
29733: LD_INT 49
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: DIFF
29741: ST_TO_ADDR
// if not list then
29742: LD_VAR 0 5
29746: NOT
29747: IFFALSE 29751
// exit ;
29749: GO 29893
// weapon := list [ rand ( 1 , list ) ] ;
29751: LD_ADDR_VAR 0 18
29755: PUSH
29756: LD_VAR 0 5
29760: PUSH
29761: LD_INT 1
29763: PPUSH
29764: LD_VAR 0 5
29768: PPUSH
29769: CALL_OW 12
29773: ARRAY
29774: ST_TO_ADDR
// end ; if weapon then
29775: LD_VAR 0 18
29779: IFFALSE 29893
// begin tmp := CostOfWeapon ( weapon ) ;
29781: LD_ADDR_VAR 0 14
29785: PUSH
29786: LD_VAR 0 18
29790: PPUSH
29791: CALL_OW 451
29795: ST_TO_ADDR
// j := GetBase ( tower ) ;
29796: LD_ADDR_VAR 0 9
29800: PUSH
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 274
29810: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29811: LD_VAR 0 9
29815: PPUSH
29816: LD_INT 1
29818: PPUSH
29819: CALL_OW 275
29823: PUSH
29824: LD_VAR 0 14
29828: PUSH
29829: LD_INT 1
29831: ARRAY
29832: GREATEREQUAL
29833: PUSH
29834: LD_VAR 0 9
29838: PPUSH
29839: LD_INT 2
29841: PPUSH
29842: CALL_OW 275
29846: PUSH
29847: LD_VAR 0 14
29851: PUSH
29852: LD_INT 2
29854: ARRAY
29855: GREATEREQUAL
29856: AND
29857: PUSH
29858: LD_VAR 0 9
29862: PPUSH
29863: LD_INT 3
29865: PPUSH
29866: CALL_OW 275
29870: PUSH
29871: LD_VAR 0 14
29875: PUSH
29876: LD_INT 3
29878: ARRAY
29879: GREATEREQUAL
29880: AND
29881: IFFALSE 29893
// result := weapon ;
29883: LD_ADDR_VAR 0 3
29887: PUSH
29888: LD_VAR 0 18
29892: ST_TO_ADDR
// end ; end ;
29893: LD_VAR 0 3
29897: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29898: LD_INT 0
29900: PPUSH
29901: PPUSH
// result := true ;
29902: LD_ADDR_VAR 0 3
29906: PUSH
29907: LD_INT 1
29909: ST_TO_ADDR
// if array1 = array2 then
29910: LD_VAR 0 1
29914: PUSH
29915: LD_VAR 0 2
29919: EQUAL
29920: IFFALSE 29980
// begin for i = 1 to array1 do
29922: LD_ADDR_VAR 0 4
29926: PUSH
29927: DOUBLE
29928: LD_INT 1
29930: DEC
29931: ST_TO_ADDR
29932: LD_VAR 0 1
29936: PUSH
29937: FOR_TO
29938: IFFALSE 29976
// if array1 [ i ] <> array2 [ i ] then
29940: LD_VAR 0 1
29944: PUSH
29945: LD_VAR 0 4
29949: ARRAY
29950: PUSH
29951: LD_VAR 0 2
29955: PUSH
29956: LD_VAR 0 4
29960: ARRAY
29961: NONEQUAL
29962: IFFALSE 29974
// begin result := false ;
29964: LD_ADDR_VAR 0 3
29968: PUSH
29969: LD_INT 0
29971: ST_TO_ADDR
// break ;
29972: GO 29976
// end ;
29974: GO 29937
29976: POP
29977: POP
// end else
29978: GO 29988
// result := false ;
29980: LD_ADDR_VAR 0 3
29984: PUSH
29985: LD_INT 0
29987: ST_TO_ADDR
// end ;
29988: LD_VAR 0 3
29992: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29993: LD_INT 0
29995: PPUSH
29996: PPUSH
29997: PPUSH
// pom := GetBase ( fac ) ;
29998: LD_ADDR_VAR 0 5
30002: PUSH
30003: LD_VAR 0 1
30007: PPUSH
30008: CALL_OW 274
30012: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30013: LD_ADDR_VAR 0 4
30017: PUSH
30018: LD_VAR 0 2
30022: PUSH
30023: LD_INT 1
30025: ARRAY
30026: PPUSH
30027: LD_VAR 0 2
30031: PUSH
30032: LD_INT 2
30034: ARRAY
30035: PPUSH
30036: LD_VAR 0 2
30040: PUSH
30041: LD_INT 3
30043: ARRAY
30044: PPUSH
30045: LD_VAR 0 2
30049: PUSH
30050: LD_INT 4
30052: ARRAY
30053: PPUSH
30054: CALL_OW 449
30058: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30059: LD_ADDR_VAR 0 3
30063: PUSH
30064: LD_VAR 0 5
30068: PPUSH
30069: LD_INT 1
30071: PPUSH
30072: CALL_OW 275
30076: PUSH
30077: LD_VAR 0 4
30081: PUSH
30082: LD_INT 1
30084: ARRAY
30085: GREATEREQUAL
30086: PUSH
30087: LD_VAR 0 5
30091: PPUSH
30092: LD_INT 2
30094: PPUSH
30095: CALL_OW 275
30099: PUSH
30100: LD_VAR 0 4
30104: PUSH
30105: LD_INT 2
30107: ARRAY
30108: GREATEREQUAL
30109: AND
30110: PUSH
30111: LD_VAR 0 5
30115: PPUSH
30116: LD_INT 3
30118: PPUSH
30119: CALL_OW 275
30123: PUSH
30124: LD_VAR 0 4
30128: PUSH
30129: LD_INT 3
30131: ARRAY
30132: GREATEREQUAL
30133: AND
30134: ST_TO_ADDR
// end ;
30135: LD_VAR 0 3
30139: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30140: LD_INT 0
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
// pom := GetBase ( building ) ;
30146: LD_ADDR_VAR 0 3
30150: PUSH
30151: LD_VAR 0 1
30155: PPUSH
30156: CALL_OW 274
30160: ST_TO_ADDR
// if not pom then
30161: LD_VAR 0 3
30165: NOT
30166: IFFALSE 30170
// exit ;
30168: GO 30340
// btype := GetBType ( building ) ;
30170: LD_ADDR_VAR 0 5
30174: PUSH
30175: LD_VAR 0 1
30179: PPUSH
30180: CALL_OW 266
30184: ST_TO_ADDR
// if btype = b_armoury then
30185: LD_VAR 0 5
30189: PUSH
30190: LD_INT 4
30192: EQUAL
30193: IFFALSE 30203
// btype := b_barracks ;
30195: LD_ADDR_VAR 0 5
30199: PUSH
30200: LD_INT 5
30202: ST_TO_ADDR
// if btype = b_depot then
30203: LD_VAR 0 5
30207: PUSH
30208: LD_INT 0
30210: EQUAL
30211: IFFALSE 30221
// btype := b_warehouse ;
30213: LD_ADDR_VAR 0 5
30217: PUSH
30218: LD_INT 1
30220: ST_TO_ADDR
// if btype = b_workshop then
30221: LD_VAR 0 5
30225: PUSH
30226: LD_INT 2
30228: EQUAL
30229: IFFALSE 30239
// btype := b_factory ;
30231: LD_ADDR_VAR 0 5
30235: PUSH
30236: LD_INT 3
30238: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30239: LD_ADDR_VAR 0 4
30243: PUSH
30244: LD_VAR 0 5
30248: PPUSH
30249: LD_VAR 0 1
30253: PPUSH
30254: CALL_OW 248
30258: PPUSH
30259: CALL_OW 450
30263: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30264: LD_ADDR_VAR 0 2
30268: PUSH
30269: LD_VAR 0 3
30273: PPUSH
30274: LD_INT 1
30276: PPUSH
30277: CALL_OW 275
30281: PUSH
30282: LD_VAR 0 4
30286: PUSH
30287: LD_INT 1
30289: ARRAY
30290: GREATEREQUAL
30291: PUSH
30292: LD_VAR 0 3
30296: PPUSH
30297: LD_INT 2
30299: PPUSH
30300: CALL_OW 275
30304: PUSH
30305: LD_VAR 0 4
30309: PUSH
30310: LD_INT 2
30312: ARRAY
30313: GREATEREQUAL
30314: AND
30315: PUSH
30316: LD_VAR 0 3
30320: PPUSH
30321: LD_INT 3
30323: PPUSH
30324: CALL_OW 275
30328: PUSH
30329: LD_VAR 0 4
30333: PUSH
30334: LD_INT 3
30336: ARRAY
30337: GREATEREQUAL
30338: AND
30339: ST_TO_ADDR
// end ;
30340: LD_VAR 0 2
30344: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30345: LD_INT 0
30347: PPUSH
30348: PPUSH
30349: PPUSH
// pom := GetBase ( building ) ;
30350: LD_ADDR_VAR 0 4
30354: PUSH
30355: LD_VAR 0 1
30359: PPUSH
30360: CALL_OW 274
30364: ST_TO_ADDR
// if not pom then
30365: LD_VAR 0 4
30369: NOT
30370: IFFALSE 30374
// exit ;
30372: GO 30475
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30374: LD_ADDR_VAR 0 5
30378: PUSH
30379: LD_VAR 0 2
30383: PPUSH
30384: LD_VAR 0 1
30388: PPUSH
30389: CALL_OW 248
30393: PPUSH
30394: CALL_OW 450
30398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30399: LD_ADDR_VAR 0 3
30403: PUSH
30404: LD_VAR 0 4
30408: PPUSH
30409: LD_INT 1
30411: PPUSH
30412: CALL_OW 275
30416: PUSH
30417: LD_VAR 0 5
30421: PUSH
30422: LD_INT 1
30424: ARRAY
30425: GREATEREQUAL
30426: PUSH
30427: LD_VAR 0 4
30431: PPUSH
30432: LD_INT 2
30434: PPUSH
30435: CALL_OW 275
30439: PUSH
30440: LD_VAR 0 5
30444: PUSH
30445: LD_INT 2
30447: ARRAY
30448: GREATEREQUAL
30449: AND
30450: PUSH
30451: LD_VAR 0 4
30455: PPUSH
30456: LD_INT 3
30458: PPUSH
30459: CALL_OW 275
30463: PUSH
30464: LD_VAR 0 5
30468: PUSH
30469: LD_INT 3
30471: ARRAY
30472: GREATEREQUAL
30473: AND
30474: ST_TO_ADDR
// end ;
30475: LD_VAR 0 3
30479: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
30480: LD_INT 0
30482: PPUSH
30483: PPUSH
30484: PPUSH
30485: PPUSH
30486: PPUSH
30487: PPUSH
30488: PPUSH
30489: PPUSH
30490: PPUSH
30491: PPUSH
// result := false ;
30492: LD_ADDR_VAR 0 6
30496: PUSH
30497: LD_INT 0
30499: ST_TO_ADDR
// if not base or not btype or not x or not y then
30500: LD_VAR 0 1
30504: NOT
30505: PUSH
30506: LD_VAR 0 2
30510: NOT
30511: OR
30512: PUSH
30513: LD_VAR 0 3
30517: NOT
30518: OR
30519: PUSH
30520: LD_VAR 0 4
30524: NOT
30525: OR
30526: IFFALSE 30530
// exit ;
30528: GO 31139
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
30530: LD_ADDR_VAR 0 12
30534: PUSH
30535: LD_VAR 0 2
30539: PPUSH
30540: LD_VAR 0 3
30544: PPUSH
30545: LD_VAR 0 4
30549: PPUSH
30550: LD_VAR 0 5
30554: PPUSH
30555: LD_VAR 0 1
30559: PUSH
30560: LD_INT 1
30562: ARRAY
30563: PPUSH
30564: CALL_OW 248
30568: PPUSH
30569: LD_INT 0
30571: PPUSH
30572: CALL 31976 0 6
30576: ST_TO_ADDR
// if not hexes then
30577: LD_VAR 0 12
30581: NOT
30582: IFFALSE 30586
// exit ;
30584: GO 31139
// for i = 1 to hexes do
30586: LD_ADDR_VAR 0 7
30590: PUSH
30591: DOUBLE
30592: LD_INT 1
30594: DEC
30595: ST_TO_ADDR
30596: LD_VAR 0 12
30600: PUSH
30601: FOR_TO
30602: IFFALSE 31137
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30604: LD_ADDR_VAR 0 11
30608: PUSH
30609: LD_VAR 0 12
30613: PUSH
30614: LD_VAR 0 7
30618: ARRAY
30619: PUSH
30620: LD_INT 1
30622: ARRAY
30623: PPUSH
30624: LD_VAR 0 12
30628: PUSH
30629: LD_VAR 0 7
30633: ARRAY
30634: PUSH
30635: LD_INT 2
30637: ARRAY
30638: PPUSH
30639: CALL_OW 428
30643: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30644: LD_VAR 0 12
30648: PUSH
30649: LD_VAR 0 7
30653: ARRAY
30654: PUSH
30655: LD_INT 1
30657: ARRAY
30658: PPUSH
30659: LD_VAR 0 12
30663: PUSH
30664: LD_VAR 0 7
30668: ARRAY
30669: PUSH
30670: LD_INT 2
30672: ARRAY
30673: PPUSH
30674: CALL_OW 351
30678: PUSH
30679: LD_VAR 0 12
30683: PUSH
30684: LD_VAR 0 7
30688: ARRAY
30689: PUSH
30690: LD_INT 1
30692: ARRAY
30693: PPUSH
30694: LD_VAR 0 12
30698: PUSH
30699: LD_VAR 0 7
30703: ARRAY
30704: PUSH
30705: LD_INT 2
30707: ARRAY
30708: PPUSH
30709: CALL_OW 488
30713: NOT
30714: OR
30715: PUSH
30716: LD_VAR 0 11
30720: PPUSH
30721: CALL_OW 247
30725: PUSH
30726: LD_INT 3
30728: EQUAL
30729: OR
30730: IFFALSE 30736
// exit ;
30732: POP
30733: POP
30734: GO 31139
// if not tmp or not tmp in base then
30736: LD_VAR 0 11
30740: NOT
30741: PUSH
30742: LD_VAR 0 11
30746: PUSH
30747: LD_VAR 0 1
30751: IN
30752: NOT
30753: OR
30754: IFFALSE 30758
// continue ;
30756: GO 30601
// result := true ;
30758: LD_ADDR_VAR 0 6
30762: PUSH
30763: LD_INT 1
30765: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30766: LD_ADDR_VAR 0 15
30770: PUSH
30771: LD_VAR 0 1
30775: PPUSH
30776: LD_INT 22
30778: PUSH
30779: LD_VAR 0 11
30783: PPUSH
30784: CALL_OW 255
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: PUSH
30796: LD_INT 30
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 30
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PPUSH
30825: CALL_OW 72
30829: ST_TO_ADDR
// if dep then
30830: LD_VAR 0 15
30834: IFFALSE 30970
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30836: LD_ADDR_VAR 0 14
30840: PUSH
30841: LD_VAR 0 15
30845: PUSH
30846: LD_INT 1
30848: ARRAY
30849: PPUSH
30850: CALL_OW 250
30854: PPUSH
30855: LD_VAR 0 15
30859: PUSH
30860: LD_INT 1
30862: ARRAY
30863: PPUSH
30864: CALL_OW 254
30868: PPUSH
30869: LD_INT 5
30871: PPUSH
30872: CALL_OW 272
30876: PUSH
30877: LD_VAR 0 15
30881: PUSH
30882: LD_INT 1
30884: ARRAY
30885: PPUSH
30886: CALL_OW 251
30890: PPUSH
30891: LD_VAR 0 15
30895: PUSH
30896: LD_INT 1
30898: ARRAY
30899: PPUSH
30900: CALL_OW 254
30904: PPUSH
30905: LD_INT 5
30907: PPUSH
30908: CALL_OW 273
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30917: LD_VAR 0 14
30921: PUSH
30922: LD_INT 1
30924: ARRAY
30925: PPUSH
30926: LD_VAR 0 14
30930: PUSH
30931: LD_INT 2
30933: ARRAY
30934: PPUSH
30935: CALL_OW 488
30939: IFFALSE 30970
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30941: LD_VAR 0 11
30945: PPUSH
30946: LD_VAR 0 14
30950: PUSH
30951: LD_INT 1
30953: ARRAY
30954: PPUSH
30955: LD_VAR 0 14
30959: PUSH
30960: LD_INT 2
30962: ARRAY
30963: PPUSH
30964: CALL_OW 111
// continue ;
30968: GO 30601
// end ; end ; r := GetDir ( tmp ) ;
30970: LD_ADDR_VAR 0 13
30974: PUSH
30975: LD_VAR 0 11
30979: PPUSH
30980: CALL_OW 254
30984: ST_TO_ADDR
// if r = 5 then
30985: LD_VAR 0 13
30989: PUSH
30990: LD_INT 5
30992: EQUAL
30993: IFFALSE 31003
// r := 0 ;
30995: LD_ADDR_VAR 0 13
30999: PUSH
31000: LD_INT 0
31002: ST_TO_ADDR
// for j = r to 5 do
31003: LD_ADDR_VAR 0 8
31007: PUSH
31008: DOUBLE
31009: LD_VAR 0 13
31013: DEC
31014: ST_TO_ADDR
31015: LD_INT 5
31017: PUSH
31018: FOR_TO
31019: IFFALSE 31133
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31021: LD_ADDR_VAR 0 9
31025: PUSH
31026: LD_VAR 0 11
31030: PPUSH
31031: CALL_OW 250
31035: PPUSH
31036: LD_VAR 0 8
31040: PPUSH
31041: LD_INT 2
31043: PPUSH
31044: CALL_OW 272
31048: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31049: LD_ADDR_VAR 0 10
31053: PUSH
31054: LD_VAR 0 11
31058: PPUSH
31059: CALL_OW 251
31063: PPUSH
31064: LD_VAR 0 8
31068: PPUSH
31069: LD_INT 2
31071: PPUSH
31072: CALL_OW 273
31076: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31077: LD_VAR 0 9
31081: PPUSH
31082: LD_VAR 0 10
31086: PPUSH
31087: CALL_OW 488
31091: PUSH
31092: LD_VAR 0 9
31096: PPUSH
31097: LD_VAR 0 10
31101: PPUSH
31102: CALL_OW 428
31106: NOT
31107: AND
31108: IFFALSE 31131
// begin ComMoveXY ( tmp , _x , _y ) ;
31110: LD_VAR 0 11
31114: PPUSH
31115: LD_VAR 0 9
31119: PPUSH
31120: LD_VAR 0 10
31124: PPUSH
31125: CALL_OW 111
// break ;
31129: GO 31133
// end ; end ;
31131: GO 31018
31133: POP
31134: POP
// end ;
31135: GO 30601
31137: POP
31138: POP
// end ;
31139: LD_VAR 0 6
31143: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31144: LD_INT 0
31146: PPUSH
31147: PPUSH
31148: PPUSH
31149: PPUSH
31150: PPUSH
31151: PPUSH
31152: PPUSH
31153: PPUSH
31154: PPUSH
31155: PPUSH
// result := false ;
31156: LD_ADDR_VAR 0 6
31160: PUSH
31161: LD_INT 0
31163: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31164: LD_VAR 0 1
31168: NOT
31169: PUSH
31170: LD_VAR 0 1
31174: PPUSH
31175: CALL_OW 266
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: IN
31190: NOT
31191: OR
31192: PUSH
31193: LD_VAR 0 2
31197: NOT
31198: OR
31199: PUSH
31200: LD_VAR 0 5
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: LD_INT 3
31216: PUSH
31217: LD_INT 4
31219: PUSH
31220: LD_INT 5
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: IN
31231: NOT
31232: OR
31233: PUSH
31234: LD_VAR 0 3
31238: PPUSH
31239: LD_VAR 0 4
31243: PPUSH
31244: CALL_OW 488
31248: NOT
31249: OR
31250: IFFALSE 31254
// exit ;
31252: GO 31971
// pom := GetBase ( depot ) ;
31254: LD_ADDR_VAR 0 10
31258: PUSH
31259: LD_VAR 0 1
31263: PPUSH
31264: CALL_OW 274
31268: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31269: LD_ADDR_VAR 0 11
31273: PUSH
31274: LD_VAR 0 2
31278: PPUSH
31279: LD_VAR 0 1
31283: PPUSH
31284: CALL_OW 248
31288: PPUSH
31289: CALL_OW 450
31293: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31294: LD_VAR 0 10
31298: PPUSH
31299: LD_INT 1
31301: PPUSH
31302: CALL_OW 275
31306: PUSH
31307: LD_VAR 0 11
31311: PUSH
31312: LD_INT 1
31314: ARRAY
31315: GREATEREQUAL
31316: PUSH
31317: LD_VAR 0 10
31321: PPUSH
31322: LD_INT 2
31324: PPUSH
31325: CALL_OW 275
31329: PUSH
31330: LD_VAR 0 11
31334: PUSH
31335: LD_INT 2
31337: ARRAY
31338: GREATEREQUAL
31339: AND
31340: PUSH
31341: LD_VAR 0 10
31345: PPUSH
31346: LD_INT 3
31348: PPUSH
31349: CALL_OW 275
31353: PUSH
31354: LD_VAR 0 11
31358: PUSH
31359: LD_INT 3
31361: ARRAY
31362: GREATEREQUAL
31363: AND
31364: NOT
31365: IFFALSE 31369
// exit ;
31367: GO 31971
// if GetBType ( depot ) = b_depot then
31369: LD_VAR 0 1
31373: PPUSH
31374: CALL_OW 266
31378: PUSH
31379: LD_INT 0
31381: EQUAL
31382: IFFALSE 31394
// dist := 28 else
31384: LD_ADDR_VAR 0 14
31388: PUSH
31389: LD_INT 28
31391: ST_TO_ADDR
31392: GO 31402
// dist := 36 ;
31394: LD_ADDR_VAR 0 14
31398: PUSH
31399: LD_INT 36
31401: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31402: LD_VAR 0 1
31406: PPUSH
31407: LD_VAR 0 3
31411: PPUSH
31412: LD_VAR 0 4
31416: PPUSH
31417: CALL_OW 297
31421: PUSH
31422: LD_VAR 0 14
31426: GREATER
31427: IFFALSE 31431
// exit ;
31429: GO 31971
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31431: LD_ADDR_VAR 0 12
31435: PUSH
31436: LD_VAR 0 2
31440: PPUSH
31441: LD_VAR 0 3
31445: PPUSH
31446: LD_VAR 0 4
31450: PPUSH
31451: LD_VAR 0 5
31455: PPUSH
31456: LD_VAR 0 1
31460: PPUSH
31461: CALL_OW 248
31465: PPUSH
31466: LD_INT 0
31468: PPUSH
31469: CALL 31976 0 6
31473: ST_TO_ADDR
// if not hexes then
31474: LD_VAR 0 12
31478: NOT
31479: IFFALSE 31483
// exit ;
31481: GO 31971
// hex := GetHexInfo ( x , y ) ;
31483: LD_ADDR_VAR 0 15
31487: PUSH
31488: LD_VAR 0 3
31492: PPUSH
31493: LD_VAR 0 4
31497: PPUSH
31498: CALL_OW 546
31502: ST_TO_ADDR
// if hex [ 1 ] then
31503: LD_VAR 0 15
31507: PUSH
31508: LD_INT 1
31510: ARRAY
31511: IFFALSE 31515
// exit ;
31513: GO 31971
// height := hex [ 2 ] ;
31515: LD_ADDR_VAR 0 13
31519: PUSH
31520: LD_VAR 0 15
31524: PUSH
31525: LD_INT 2
31527: ARRAY
31528: ST_TO_ADDR
// for i = 1 to hexes do
31529: LD_ADDR_VAR 0 7
31533: PUSH
31534: DOUBLE
31535: LD_INT 1
31537: DEC
31538: ST_TO_ADDR
31539: LD_VAR 0 12
31543: PUSH
31544: FOR_TO
31545: IFFALSE 31875
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31547: LD_VAR 0 12
31551: PUSH
31552: LD_VAR 0 7
31556: ARRAY
31557: PUSH
31558: LD_INT 1
31560: ARRAY
31561: PPUSH
31562: LD_VAR 0 12
31566: PUSH
31567: LD_VAR 0 7
31571: ARRAY
31572: PUSH
31573: LD_INT 2
31575: ARRAY
31576: PPUSH
31577: CALL_OW 488
31581: NOT
31582: PUSH
31583: LD_VAR 0 12
31587: PUSH
31588: LD_VAR 0 7
31592: ARRAY
31593: PUSH
31594: LD_INT 1
31596: ARRAY
31597: PPUSH
31598: LD_VAR 0 12
31602: PUSH
31603: LD_VAR 0 7
31607: ARRAY
31608: PUSH
31609: LD_INT 2
31611: ARRAY
31612: PPUSH
31613: CALL_OW 428
31617: PUSH
31618: LD_INT 0
31620: GREATER
31621: OR
31622: PUSH
31623: LD_VAR 0 12
31627: PUSH
31628: LD_VAR 0 7
31632: ARRAY
31633: PUSH
31634: LD_INT 1
31636: ARRAY
31637: PPUSH
31638: LD_VAR 0 12
31642: PUSH
31643: LD_VAR 0 7
31647: ARRAY
31648: PUSH
31649: LD_INT 2
31651: ARRAY
31652: PPUSH
31653: CALL_OW 351
31657: OR
31658: IFFALSE 31664
// exit ;
31660: POP
31661: POP
31662: GO 31971
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31664: LD_ADDR_VAR 0 8
31668: PUSH
31669: LD_VAR 0 12
31673: PUSH
31674: LD_VAR 0 7
31678: ARRAY
31679: PUSH
31680: LD_INT 1
31682: ARRAY
31683: PPUSH
31684: LD_VAR 0 12
31688: PUSH
31689: LD_VAR 0 7
31693: ARRAY
31694: PUSH
31695: LD_INT 2
31697: ARRAY
31698: PPUSH
31699: CALL_OW 546
31703: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31704: LD_VAR 0 8
31708: PUSH
31709: LD_INT 1
31711: ARRAY
31712: PUSH
31713: LD_VAR 0 8
31717: PUSH
31718: LD_INT 2
31720: ARRAY
31721: PUSH
31722: LD_VAR 0 13
31726: PUSH
31727: LD_INT 2
31729: PLUS
31730: GREATER
31731: OR
31732: PUSH
31733: LD_VAR 0 8
31737: PUSH
31738: LD_INT 2
31740: ARRAY
31741: PUSH
31742: LD_VAR 0 13
31746: PUSH
31747: LD_INT 2
31749: MINUS
31750: LESS
31751: OR
31752: PUSH
31753: LD_VAR 0 8
31757: PUSH
31758: LD_INT 3
31760: ARRAY
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: LD_INT 8
31767: PUSH
31768: LD_INT 9
31770: PUSH
31771: LD_INT 10
31773: PUSH
31774: LD_INT 11
31776: PUSH
31777: LD_INT 12
31779: PUSH
31780: LD_INT 13
31782: PUSH
31783: LD_INT 16
31785: PUSH
31786: LD_INT 17
31788: PUSH
31789: LD_INT 18
31791: PUSH
31792: LD_INT 19
31794: PUSH
31795: LD_INT 20
31797: PUSH
31798: LD_INT 21
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: IN
31816: NOT
31817: OR
31818: PUSH
31819: LD_VAR 0 8
31823: PUSH
31824: LD_INT 5
31826: ARRAY
31827: NOT
31828: OR
31829: PUSH
31830: LD_VAR 0 8
31834: PUSH
31835: LD_INT 6
31837: ARRAY
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: LD_INT 7
31847: PUSH
31848: LD_INT 9
31850: PUSH
31851: LD_INT 10
31853: PUSH
31854: LD_INT 11
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: IN
31865: NOT
31866: OR
31867: IFFALSE 31873
// exit ;
31869: POP
31870: POP
31871: GO 31971
// end ;
31873: GO 31544
31875: POP
31876: POP
// side := GetSide ( depot ) ;
31877: LD_ADDR_VAR 0 9
31881: PUSH
31882: LD_VAR 0 1
31886: PPUSH
31887: CALL_OW 255
31891: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31892: LD_VAR 0 9
31896: PPUSH
31897: LD_VAR 0 3
31901: PPUSH
31902: LD_VAR 0 4
31906: PPUSH
31907: LD_INT 20
31909: PPUSH
31910: CALL 24625 0 4
31914: PUSH
31915: LD_INT 4
31917: ARRAY
31918: IFFALSE 31922
// exit ;
31920: GO 31971
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31922: LD_VAR 0 2
31926: PUSH
31927: LD_INT 29
31929: PUSH
31930: LD_INT 30
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: IN
31937: PUSH
31938: LD_VAR 0 3
31942: PPUSH
31943: LD_VAR 0 4
31947: PPUSH
31948: LD_VAR 0 9
31952: PPUSH
31953: CALL_OW 440
31957: NOT
31958: AND
31959: IFFALSE 31963
// exit ;
31961: GO 31971
// result := true ;
31963: LD_ADDR_VAR 0 6
31967: PUSH
31968: LD_INT 1
31970: ST_TO_ADDR
// end ;
31971: LD_VAR 0 6
31975: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31976: LD_INT 0
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
32008: PPUSH
32009: PPUSH
32010: PPUSH
32011: PPUSH
32012: PPUSH
32013: PPUSH
32014: PPUSH
32015: PPUSH
32016: PPUSH
32017: PPUSH
32018: PPUSH
32019: PPUSH
32020: PPUSH
32021: PPUSH
32022: PPUSH
32023: PPUSH
32024: PPUSH
32025: PPUSH
32026: PPUSH
32027: PPUSH
32028: PPUSH
32029: PPUSH
32030: PPUSH
32031: PPUSH
32032: PPUSH
32033: PPUSH
32034: PPUSH
32035: PPUSH
// result = [ ] ;
32036: LD_ADDR_VAR 0 7
32040: PUSH
32041: EMPTY
32042: ST_TO_ADDR
// temp_list = [ ] ;
32043: LD_ADDR_VAR 0 9
32047: PUSH
32048: EMPTY
32049: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32050: LD_VAR 0 4
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 3
32066: PUSH
32067: LD_INT 4
32069: PUSH
32070: LD_INT 5
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: IN
32081: NOT
32082: PUSH
32083: LD_VAR 0 1
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: IN
32098: PUSH
32099: LD_VAR 0 5
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 3
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: LIST
32117: IN
32118: NOT
32119: AND
32120: OR
32121: IFFALSE 32125
// exit ;
32123: GO 50516
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32125: LD_VAR 0 1
32129: PUSH
32130: LD_INT 6
32132: PUSH
32133: LD_INT 7
32135: PUSH
32136: LD_INT 8
32138: PUSH
32139: LD_INT 13
32141: PUSH
32142: LD_INT 12
32144: PUSH
32145: LD_INT 15
32147: PUSH
32148: LD_INT 11
32150: PUSH
32151: LD_INT 14
32153: PUSH
32154: LD_INT 10
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: IN
32168: IFFALSE 32178
// btype = b_lab ;
32170: LD_ADDR_VAR 0 1
32174: PUSH
32175: LD_INT 6
32177: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32178: LD_VAR 0 6
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: LD_INT 2
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: LIST
32196: IN
32197: NOT
32198: PUSH
32199: LD_VAR 0 1
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: LD_INT 3
32215: PUSH
32216: LD_INT 6
32218: PUSH
32219: LD_INT 36
32221: PUSH
32222: LD_INT 4
32224: PUSH
32225: LD_INT 5
32227: PUSH
32228: LD_INT 31
32230: PUSH
32231: LD_INT 32
32233: PUSH
32234: LD_INT 33
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: IN
32250: NOT
32251: PUSH
32252: LD_VAR 0 6
32256: PUSH
32257: LD_INT 1
32259: EQUAL
32260: AND
32261: OR
32262: PUSH
32263: LD_VAR 0 1
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: LD_INT 3
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: IN
32278: NOT
32279: PUSH
32280: LD_VAR 0 6
32284: PUSH
32285: LD_INT 2
32287: EQUAL
32288: AND
32289: OR
32290: IFFALSE 32300
// mode = 0 ;
32292: LD_ADDR_VAR 0 6
32296: PUSH
32297: LD_INT 0
32299: ST_TO_ADDR
// case mode of 0 :
32300: LD_VAR 0 6
32304: PUSH
32305: LD_INT 0
32307: DOUBLE
32308: EQUAL
32309: IFTRUE 32313
32311: GO 43766
32313: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32314: LD_ADDR_VAR 0 11
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: NEG
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: LD_INT 2
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 3
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32507: LD_ADDR_VAR 0 12
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 1
32565: NEG
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: NEG
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: LD_INT 1
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 3
32664: NEG
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 3
32675: NEG
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32703: LD_ADDR_VAR 0 13
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: LD_INT 2
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 2
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: NEG
32827: PUSH
32828: LD_INT 1
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 2
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: LD_INT 3
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 3
32862: NEG
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 3
32874: NEG
32875: PUSH
32876: LD_INT 3
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32902: LD_ADDR_VAR 0 14
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 1
33048: NEG
33049: PUSH
33050: LD_INT 3
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: LD_INT 3
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33098: LD_ADDR_VAR 0 15
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: LD_INT 1
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 3
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 3
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33291: LD_ADDR_VAR 0 16
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: LD_INT 1
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 2
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: LD_INT 2
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 3
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: LD_INT 3
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 2
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33484: LD_ADDR_VAR 0 17
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: NEG
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: LD_INT 2
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 2
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 2
33671: NEG
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33714: LD_ADDR_VAR 0 18
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 2
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 2
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 2
33839: PUSH
33840: LD_INT 1
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 2
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 0
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 2
33890: NEG
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 2
33901: NEG
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33944: LD_ADDR_VAR 0 19
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 1
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: NEG
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: NEG
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: LD_INT 2
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: LD_INT 2
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: LD_INT 1
34051: NEG
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 2
34079: PUSH
34080: LD_INT 2
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 2
34120: NEG
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 2
34131: NEG
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: LD_INT 2
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34174: LD_ADDR_VAR 0 20
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 1
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 1
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: NEG
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: LD_INT 2
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 2
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 2
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: LD_INT 2
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: NEG
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: NEG
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34404: LD_ADDR_VAR 0 21
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 2
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 2
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 2
34580: NEG
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: NEG
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: NEG
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34634: LD_ADDR_VAR 0 22
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 2
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 2
34810: NEG
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: NEG
34834: PUSH
34835: LD_INT 2
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34864: LD_ADDR_VAR 0 23
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 2
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 1
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: NEG
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: NEG
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 2
35075: NEG
35076: PUSH
35077: LD_INT 3
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 3
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35144: LD_ADDR_VAR 0 24
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: NEG
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: NEG
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: LD_INT 2
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 2
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 3
35377: PUSH
35378: LD_INT 1
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 3
35387: PUSH
35388: LD_INT 2
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35420: LD_ADDR_VAR 0 25
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: LD_INT 2
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 2
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: LD_INT 2
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 2
35596: NEG
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 3
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 2
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35694: LD_ADDR_VAR 0 26
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: NEG
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: LD_INT 2
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: NEG
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 2
35881: NEG
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 2
35893: NEG
35894: PUSH
35895: LD_INT 2
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 2
35936: NEG
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35970: LD_ADDR_VAR 0 27
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: LD_INT 1
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 2
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: LD_INT 2
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: NEG
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: NEG
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: LD_INT 2
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 2
36192: NEG
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 3
36203: NEG
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 3
36215: NEG
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36250: LD_ADDR_VAR 0 28
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 2
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: LD_INT 1
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 2
36426: NEG
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: NEG
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: LD_INT 3
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: LD_INT 3
36477: NEG
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 3
36485: NEG
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 3
36497: NEG
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36532: LD_ADDR_VAR 0 29
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 2
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: LD_INT 2
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: LD_INT 1
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 2
36710: NEG
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: LD_INT 3
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 2
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 3
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 3
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 2
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 3
36776: NEG
36777: PUSH
36778: LD_INT 2
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36811: LD_ADDR_VAR 0 30
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 1
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 1
36869: NEG
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 2
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 2
36988: NEG
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: LD_INT 3
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 2
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 3
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 3
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 3
37054: NEG
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37089: LD_ADDR_VAR 0 31
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: LD_INT 2
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 2
37254: NEG
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: NEG
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 2
37278: NEG
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 3
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: PUSH
37312: LD_INT 3
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 3
37332: NEG
37333: PUSH
37334: LD_INT 2
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37367: LD_ADDR_VAR 0 32
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: LD_INT 2
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 2
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 3
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: LD_INT 3
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 2
37599: NEG
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 3
37610: NEG
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37645: LD_ADDR_VAR 0 33
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 2
37823: NEG
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: LD_INT 3
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 3
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 3
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 3
37889: NEG
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37924: LD_ADDR_VAR 0 34
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 2
38080: NEG
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 3
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: NEG
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 3
38169: NEG
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38204: LD_ADDR_VAR 0 35
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: LD_INT 1
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38316: LD_ADDR_VAR 0 36
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38428: LD_ADDR_VAR 0 37
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38540: LD_ADDR_VAR 0 38
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: LD_INT 1
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38652: LD_ADDR_VAR 0 39
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: LD_INT 2
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38764: LD_ADDR_VAR 0 40
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38876: LD_ADDR_VAR 0 41
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 2
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: NEG
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 2
39066: NEG
39067: PUSH
39068: LD_INT 3
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 3
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 3
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 3
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 3
39150: NEG
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 3
39161: NEG
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: LD_INT 2
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 3
39185: NEG
39186: PUSH
39187: LD_INT 3
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39226: LD_ADDR_VAR 0 42
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: LD_INT 2
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 3
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 3
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 3
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: LD_INT 3
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 3
39523: NEG
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 3
39535: NEG
39536: PUSH
39537: LD_INT 3
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39576: LD_ADDR_VAR 0 43
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 3
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 3
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 2
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 3
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 3
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 3
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: LD_INT 2
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: NEG
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 3
39883: NEG
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39924: LD_ADDR_VAR 0 44
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 2
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: LD_INT 3
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 3
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 3
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 3
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: LD_INT 3
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 3
40198: NEG
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 3
40209: NEG
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 3
40221: NEG
40222: PUSH
40223: LD_INT 2
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 3
40233: NEG
40234: PUSH
40235: LD_INT 3
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40274: LD_ADDR_VAR 0 45
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: LD_INT 3
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 3
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: LD_INT 3
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 2
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 3
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: LD_INT 3
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: LD_INT 3
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 3
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 3
40571: NEG
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 3
40583: NEG
40584: PUSH
40585: LD_INT 3
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40624: LD_ADDR_VAR 0 46
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: LD_INT 2
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: LD_INT 3
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 3
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 3
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 3
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 3
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 3
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 3
40920: NEG
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40972: LD_ADDR_VAR 0 47
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: NEG
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: LD_INT 2
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41123: LD_ADDR_VAR 0 48
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41270: LD_ADDR_VAR 0 49
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41414: LD_ADDR_VAR 0 50
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41558: LD_ADDR_VAR 0 51
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 2
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41705: LD_ADDR_VAR 0 52
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 2
41809: NEG
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41856: LD_ADDR_VAR 0 53
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: NEG
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42086: LD_ADDR_VAR 0 54
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: LD_INT 2
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42316: LD_ADDR_VAR 0 55
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 2
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: NEG
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42546: LD_ADDR_VAR 0 56
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 2
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: NEG
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42776: LD_ADDR_VAR 0 57
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: LD_INT 1
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: NEG
42976: PUSH
42977: LD_INT 2
42979: NEG
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43006: LD_ADDR_VAR 0 58
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 2
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43236: LD_ADDR_VAR 0 59
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43324: LD_ADDR_VAR 0 60
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43412: LD_ADDR_VAR 0 61
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43500: LD_ADDR_VAR 0 62
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43588: LD_ADDR_VAR 0 63
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43676: LD_ADDR_VAR 0 64
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: ST_TO_ADDR
// end ; 1 :
43764: GO 49661
43766: LD_INT 1
43768: DOUBLE
43769: EQUAL
43770: IFTRUE 43774
43772: GO 46397
43774: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43775: LD_ADDR_VAR 0 11
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 3
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 3
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43819: LD_ADDR_VAR 0 12
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43860: LD_ADDR_VAR 0 13
43864: PUSH
43865: LD_INT 3
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 3
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43900: LD_ADDR_VAR 0 14
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: LD_INT 3
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 3
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43941: LD_ADDR_VAR 0 15
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 3
43959: NEG
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 3
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43985: LD_ADDR_VAR 0 16
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 3
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 3
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 3
44016: NEG
44017: PUSH
44018: LD_INT 3
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44031: LD_ADDR_VAR 0 17
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: LD_INT 3
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 3
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44075: LD_ADDR_VAR 0 18
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44116: LD_ADDR_VAR 0 19
44120: PUSH
44121: LD_INT 3
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 3
44133: PUSH
44134: LD_INT 3
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 3
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44156: LD_ADDR_VAR 0 20
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 3
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 3
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44197: LD_ADDR_VAR 0 21
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 3
44215: NEG
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 3
44226: NEG
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44241: LD_ADDR_VAR 0 22
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: LD_INT 3
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 3
44260: NEG
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: NEG
44273: PUSH
44274: LD_INT 3
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44287: LD_ADDR_VAR 0 23
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 4
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 3
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44331: LD_ADDR_VAR 0 24
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 4
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44372: LD_ADDR_VAR 0 25
44376: PUSH
44377: LD_INT 3
44379: PUSH
44380: LD_INT 3
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 4
44389: PUSH
44390: LD_INT 3
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 3
44399: PUSH
44400: LD_INT 4
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44412: LD_ADDR_VAR 0 26
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 3
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 4
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 3
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: LIST
44452: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44453: LD_ADDR_VAR 0 27
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 3
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 4
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44497: LD_ADDR_VAR 0 28
44501: PUSH
44502: LD_INT 3
44504: NEG
44505: PUSH
44506: LD_INT 3
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 3
44516: NEG
44517: PUSH
44518: LD_INT 4
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 4
44528: NEG
44529: PUSH
44530: LD_INT 3
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44543: LD_ADDR_VAR 0 29
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 3
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 3
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: LD_INT 4
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 4
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 3
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: LD_INT 5
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 5
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 4
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 6
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 6
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 5
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44698: LD_ADDR_VAR 0 30
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 4
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 4
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 4
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 5
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 5
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 5
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 6
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 6
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44841: LD_ADDR_VAR 0 31
44845: PUSH
44846: LD_INT 3
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 3
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 3
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 4
44888: PUSH
44889: LD_INT 4
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 3
44898: PUSH
44899: LD_INT 4
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 5
44908: PUSH
44909: LD_INT 4
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 5
44918: PUSH
44919: LD_INT 5
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 4
44928: PUSH
44929: LD_INT 5
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 6
44938: PUSH
44939: LD_INT 5
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 6
44948: PUSH
44949: LD_INT 6
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 5
44958: PUSH
44959: LD_INT 6
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44980: LD_ADDR_VAR 0 32
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 3
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 3
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 4
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 4
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 5
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 5
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 4
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 6
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 6
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: LD_INT 5
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45123: LD_ADDR_VAR 0 33
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 3
45141: NEG
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 3
45152: NEG
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 3
45164: NEG
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 4
45175: NEG
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 4
45186: NEG
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 4
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 5
45209: NEG
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 5
45220: NEG
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 5
45232: NEG
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 6
45243: NEG
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 6
45254: NEG
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45278: LD_ADDR_VAR 0 34
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: LD_INT 3
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 3
45297: NEG
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: NEG
45310: PUSH
45311: LD_INT 3
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 3
45321: NEG
45322: PUSH
45323: LD_INT 4
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 4
45333: NEG
45334: PUSH
45335: LD_INT 3
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 4
45345: NEG
45346: PUSH
45347: LD_INT 4
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 4
45357: NEG
45358: PUSH
45359: LD_INT 5
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 5
45369: NEG
45370: PUSH
45371: LD_INT 4
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 5
45381: NEG
45382: PUSH
45383: LD_INT 5
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 5
45393: NEG
45394: PUSH
45395: LD_INT 6
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 6
45405: NEG
45406: PUSH
45407: LD_INT 5
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 6
45417: NEG
45418: PUSH
45419: LD_INT 6
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45441: LD_ADDR_VAR 0 41
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: LD_INT 3
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: LIST
45484: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45485: LD_ADDR_VAR 0 42
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 3
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45526: LD_ADDR_VAR 0 43
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 3
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: LD_INT 3
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45566: LD_ADDR_VAR 0 44
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45607: LD_ADDR_VAR 0 45
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45651: LD_ADDR_VAR 0 46
45655: PUSH
45656: LD_INT 2
45658: NEG
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 3
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 3
45682: NEG
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45697: LD_ADDR_VAR 0 47
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 3
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45730: LD_ADDR_VAR 0 48
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45761: LD_ADDR_VAR 0 49
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 3
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45790: LD_ADDR_VAR 0 50
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 3
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 3
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45819: LD_ADDR_VAR 0 51
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45850: LD_ADDR_VAR 0 52
45854: PUSH
45855: LD_INT 3
45857: NEG
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45883: LD_ADDR_VAR 0 53
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: LD_INT 3
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 3
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45927: LD_ADDR_VAR 0 54
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 3
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45968: LD_ADDR_VAR 0 55
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 3
45985: PUSH
45986: LD_INT 3
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 3
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: LIST
46007: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46008: LD_ADDR_VAR 0 56
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 3
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 3
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: LIST
46048: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46049: LD_ADDR_VAR 0 57
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46093: LD_ADDR_VAR 0 58
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: LD_INT 3
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: LIST
46138: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46139: LD_ADDR_VAR 0 59
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46183: LD_ADDR_VAR 0 60
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46224: LD_ADDR_VAR 0 61
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: LIST
46263: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46264: LD_ADDR_VAR 0 62
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: LIST
46304: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46305: LD_ADDR_VAR 0 63
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: LIST
46348: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46349: LD_ADDR_VAR 0 64
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// end ; 2 :
46395: GO 49661
46397: LD_INT 2
46399: DOUBLE
46400: EQUAL
46401: IFTRUE 46405
46403: GO 49660
46405: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46406: LD_ADDR_VAR 0 29
46410: PUSH
46411: LD_INT 4
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 4
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 5
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 5
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 4
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 3
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 3
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 5
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 4
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 4
46536: PUSH
46537: LD_INT 4
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 3
46546: PUSH
46547: LD_INT 4
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 4
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: LD_INT 4
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: LD_INT 4
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 4
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 5
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 5
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 4
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 3
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 5
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: NEG
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 3
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 3
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 4
46745: NEG
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 4
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 4
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 4
46791: NEG
46792: PUSH
46793: LD_INT 4
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 4
46803: NEG
46804: PUSH
46805: LD_INT 5
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 3
46815: NEG
46816: PUSH
46817: LD_INT 4
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 3
46827: NEG
46828: PUSH
46829: LD_INT 3
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 4
46839: NEG
46840: PUSH
46841: LD_INT 3
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 5
46851: NEG
46852: PUSH
46853: LD_INT 4
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 5
46863: NEG
46864: PUSH
46865: LD_INT 5
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: LD_INT 5
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 5
46887: NEG
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46944: LD_ADDR_VAR 0 30
46948: PUSH
46949: LD_INT 4
46951: PUSH
46952: LD_INT 4
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 4
46961: PUSH
46962: LD_INT 3
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 5
46971: PUSH
46972: LD_INT 4
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 5
46981: PUSH
46982: LD_INT 5
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 4
46991: PUSH
46992: LD_INT 5
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: PUSH
47002: LD_INT 4
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 5
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 3
47031: PUSH
47032: LD_INT 5
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 3
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 3
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 4
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 4
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: LD_INT 4
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 4
47134: NEG
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 4
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 4
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 5
47190: NEG
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 5
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 5
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: LD_INT 3
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: NEG
47249: PUSH
47250: LD_INT 4
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: NEG
47261: PUSH
47262: LD_INT 3
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 3
47284: NEG
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 4
47296: NEG
47297: PUSH
47298: LD_INT 3
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 4
47308: NEG
47309: PUSH
47310: LD_INT 4
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: NEG
47321: PUSH
47322: LD_INT 4
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 4
47332: NEG
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 4
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 5
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: LD_INT 4
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 3
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 4
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 5
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 5
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47491: LD_ADDR_VAR 0 31
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 4
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 4
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 5
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 5
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 4
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 3
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: LD_INT 5
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 3
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 3
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 3
47636: NEG
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 4
47647: NEG
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 4
47658: NEG
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 4
47670: NEG
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 4
47693: NEG
47694: PUSH
47695: LD_INT 4
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 4
47705: NEG
47706: PUSH
47707: LD_INT 5
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: LD_INT 4
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: NEG
47730: PUSH
47731: LD_INT 3
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 4
47741: NEG
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 5
47753: NEG
47754: PUSH
47755: LD_INT 4
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 5
47765: NEG
47766: PUSH
47767: LD_INT 5
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 3
47777: NEG
47778: PUSH
47779: LD_INT 5
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 5
47789: NEG
47790: PUSH
47791: LD_INT 3
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 4
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 4
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: LD_INT 4
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 4
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 4
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 5
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 5
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 4
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 3
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 5
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48041: LD_ADDR_VAR 0 32
48045: PUSH
48046: LD_INT 4
48048: NEG
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 4
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 4
48093: NEG
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 5
48104: NEG
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 5
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 5
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 3
48139: NEG
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 3
48150: NEG
48151: PUSH
48152: LD_INT 3
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 3
48162: NEG
48163: PUSH
48164: LD_INT 4
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: LD_INT 3
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 4
48210: NEG
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 4
48222: NEG
48223: PUSH
48224: LD_INT 4
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 4
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 4
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 4
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 5
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 4
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 3
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 4
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 5
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 3
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 5
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 4
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 4
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 3
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 4
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 4
48453: PUSH
48454: LD_INT 4
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 4
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 5
48473: PUSH
48474: LD_INT 4
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 5
48483: PUSH
48484: LD_INT 5
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 4
48493: PUSH
48494: LD_INT 5
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 3
48503: PUSH
48504: LD_INT 4
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: PUSH
48514: LD_INT 3
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 5
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: LD_INT 5
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48588: LD_ADDR_VAR 0 33
48592: PUSH
48593: LD_INT 4
48595: NEG
48596: PUSH
48597: LD_INT 4
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 4
48607: NEG
48608: PUSH
48609: LD_INT 5
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: LD_INT 4
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: LD_INT 3
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 4
48643: NEG
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 5
48655: NEG
48656: PUSH
48657: LD_INT 4
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 5
48667: NEG
48668: PUSH
48669: LD_INT 5
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 3
48679: NEG
48680: PUSH
48681: LD_INT 5
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 5
48691: NEG
48692: PUSH
48693: LD_INT 3
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 4
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 3
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: LD_INT 3
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 4
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 4
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 4
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 4
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 5
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 5
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 4
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 3
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 3
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 3
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 5
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 4
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 4
48928: PUSH
48929: LD_INT 4
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 4
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 4
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: LD_INT 4
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 4
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 4
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 5
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 5
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 4
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 5
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49126: LD_ADDR_VAR 0 34
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 4
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 5
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 4
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 3
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 4
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 5
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: LD_INT 5
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 3
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 3
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 4
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 4
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 2
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 4
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 4
49328: PUSH
49329: LD_INT 4
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 4
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 5
49348: PUSH
49349: LD_INT 4
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 5
49358: PUSH
49359: LD_INT 5
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 4
49368: PUSH
49369: LD_INT 5
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: LD_INT 4
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: PUSH
49389: LD_INT 3
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 5
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: LD_INT 5
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 4
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 4
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 3
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 4
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 4
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 4
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 5
49567: NEG
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 5
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 5
49590: NEG
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: NEG
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: ST_TO_ADDR
// end ; end ;
49658: GO 49661
49660: POP
// case btype of b_depot , b_warehouse :
49661: LD_VAR 0 1
49665: PUSH
49666: LD_INT 0
49668: DOUBLE
49669: EQUAL
49670: IFTRUE 49680
49672: LD_INT 1
49674: DOUBLE
49675: EQUAL
49676: IFTRUE 49680
49678: GO 49881
49680: POP
// case nation of nation_american :
49681: LD_VAR 0 5
49685: PUSH
49686: LD_INT 1
49688: DOUBLE
49689: EQUAL
49690: IFTRUE 49694
49692: GO 49750
49694: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49695: LD_ADDR_VAR 0 9
49699: PUSH
49700: LD_VAR 0 11
49704: PUSH
49705: LD_VAR 0 12
49709: PUSH
49710: LD_VAR 0 13
49714: PUSH
49715: LD_VAR 0 14
49719: PUSH
49720: LD_VAR 0 15
49724: PUSH
49725: LD_VAR 0 16
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: PUSH
49738: LD_VAR 0 4
49742: PUSH
49743: LD_INT 1
49745: PLUS
49746: ARRAY
49747: ST_TO_ADDR
49748: GO 49879
49750: LD_INT 2
49752: DOUBLE
49753: EQUAL
49754: IFTRUE 49758
49756: GO 49814
49758: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49759: LD_ADDR_VAR 0 9
49763: PUSH
49764: LD_VAR 0 17
49768: PUSH
49769: LD_VAR 0 18
49773: PUSH
49774: LD_VAR 0 19
49778: PUSH
49779: LD_VAR 0 20
49783: PUSH
49784: LD_VAR 0 21
49788: PUSH
49789: LD_VAR 0 22
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: PUSH
49802: LD_VAR 0 4
49806: PUSH
49807: LD_INT 1
49809: PLUS
49810: ARRAY
49811: ST_TO_ADDR
49812: GO 49879
49814: LD_INT 3
49816: DOUBLE
49817: EQUAL
49818: IFTRUE 49822
49820: GO 49878
49822: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49823: LD_ADDR_VAR 0 9
49827: PUSH
49828: LD_VAR 0 23
49832: PUSH
49833: LD_VAR 0 24
49837: PUSH
49838: LD_VAR 0 25
49842: PUSH
49843: LD_VAR 0 26
49847: PUSH
49848: LD_VAR 0 27
49852: PUSH
49853: LD_VAR 0 28
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: PUSH
49866: LD_VAR 0 4
49870: PUSH
49871: LD_INT 1
49873: PLUS
49874: ARRAY
49875: ST_TO_ADDR
49876: GO 49879
49878: POP
49879: GO 50434
49881: LD_INT 2
49883: DOUBLE
49884: EQUAL
49885: IFTRUE 49895
49887: LD_INT 3
49889: DOUBLE
49890: EQUAL
49891: IFTRUE 49895
49893: GO 49951
49895: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49896: LD_ADDR_VAR 0 9
49900: PUSH
49901: LD_VAR 0 29
49905: PUSH
49906: LD_VAR 0 30
49910: PUSH
49911: LD_VAR 0 31
49915: PUSH
49916: LD_VAR 0 32
49920: PUSH
49921: LD_VAR 0 33
49925: PUSH
49926: LD_VAR 0 34
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: PUSH
49939: LD_VAR 0 4
49943: PUSH
49944: LD_INT 1
49946: PLUS
49947: ARRAY
49948: ST_TO_ADDR
49949: GO 50434
49951: LD_INT 16
49953: DOUBLE
49954: EQUAL
49955: IFTRUE 50013
49957: LD_INT 17
49959: DOUBLE
49960: EQUAL
49961: IFTRUE 50013
49963: LD_INT 18
49965: DOUBLE
49966: EQUAL
49967: IFTRUE 50013
49969: LD_INT 19
49971: DOUBLE
49972: EQUAL
49973: IFTRUE 50013
49975: LD_INT 22
49977: DOUBLE
49978: EQUAL
49979: IFTRUE 50013
49981: LD_INT 20
49983: DOUBLE
49984: EQUAL
49985: IFTRUE 50013
49987: LD_INT 21
49989: DOUBLE
49990: EQUAL
49991: IFTRUE 50013
49993: LD_INT 23
49995: DOUBLE
49996: EQUAL
49997: IFTRUE 50013
49999: LD_INT 24
50001: DOUBLE
50002: EQUAL
50003: IFTRUE 50013
50005: LD_INT 25
50007: DOUBLE
50008: EQUAL
50009: IFTRUE 50013
50011: GO 50069
50013: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50014: LD_ADDR_VAR 0 9
50018: PUSH
50019: LD_VAR 0 35
50023: PUSH
50024: LD_VAR 0 36
50028: PUSH
50029: LD_VAR 0 37
50033: PUSH
50034: LD_VAR 0 38
50038: PUSH
50039: LD_VAR 0 39
50043: PUSH
50044: LD_VAR 0 40
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: PUSH
50057: LD_VAR 0 4
50061: PUSH
50062: LD_INT 1
50064: PLUS
50065: ARRAY
50066: ST_TO_ADDR
50067: GO 50434
50069: LD_INT 6
50071: DOUBLE
50072: EQUAL
50073: IFTRUE 50125
50075: LD_INT 7
50077: DOUBLE
50078: EQUAL
50079: IFTRUE 50125
50081: LD_INT 8
50083: DOUBLE
50084: EQUAL
50085: IFTRUE 50125
50087: LD_INT 13
50089: DOUBLE
50090: EQUAL
50091: IFTRUE 50125
50093: LD_INT 12
50095: DOUBLE
50096: EQUAL
50097: IFTRUE 50125
50099: LD_INT 15
50101: DOUBLE
50102: EQUAL
50103: IFTRUE 50125
50105: LD_INT 11
50107: DOUBLE
50108: EQUAL
50109: IFTRUE 50125
50111: LD_INT 14
50113: DOUBLE
50114: EQUAL
50115: IFTRUE 50125
50117: LD_INT 10
50119: DOUBLE
50120: EQUAL
50121: IFTRUE 50125
50123: GO 50181
50125: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50126: LD_ADDR_VAR 0 9
50130: PUSH
50131: LD_VAR 0 41
50135: PUSH
50136: LD_VAR 0 42
50140: PUSH
50141: LD_VAR 0 43
50145: PUSH
50146: LD_VAR 0 44
50150: PUSH
50151: LD_VAR 0 45
50155: PUSH
50156: LD_VAR 0 46
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: PUSH
50169: LD_VAR 0 4
50173: PUSH
50174: LD_INT 1
50176: PLUS
50177: ARRAY
50178: ST_TO_ADDR
50179: GO 50434
50181: LD_INT 36
50183: DOUBLE
50184: EQUAL
50185: IFTRUE 50189
50187: GO 50245
50189: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50190: LD_ADDR_VAR 0 9
50194: PUSH
50195: LD_VAR 0 47
50199: PUSH
50200: LD_VAR 0 48
50204: PUSH
50205: LD_VAR 0 49
50209: PUSH
50210: LD_VAR 0 50
50214: PUSH
50215: LD_VAR 0 51
50219: PUSH
50220: LD_VAR 0 52
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: PUSH
50233: LD_VAR 0 4
50237: PUSH
50238: LD_INT 1
50240: PLUS
50241: ARRAY
50242: ST_TO_ADDR
50243: GO 50434
50245: LD_INT 4
50247: DOUBLE
50248: EQUAL
50249: IFTRUE 50271
50251: LD_INT 5
50253: DOUBLE
50254: EQUAL
50255: IFTRUE 50271
50257: LD_INT 34
50259: DOUBLE
50260: EQUAL
50261: IFTRUE 50271
50263: LD_INT 37
50265: DOUBLE
50266: EQUAL
50267: IFTRUE 50271
50269: GO 50327
50271: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50272: LD_ADDR_VAR 0 9
50276: PUSH
50277: LD_VAR 0 53
50281: PUSH
50282: LD_VAR 0 54
50286: PUSH
50287: LD_VAR 0 55
50291: PUSH
50292: LD_VAR 0 56
50296: PUSH
50297: LD_VAR 0 57
50301: PUSH
50302: LD_VAR 0 58
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: PUSH
50315: LD_VAR 0 4
50319: PUSH
50320: LD_INT 1
50322: PLUS
50323: ARRAY
50324: ST_TO_ADDR
50325: GO 50434
50327: LD_INT 31
50329: DOUBLE
50330: EQUAL
50331: IFTRUE 50377
50333: LD_INT 32
50335: DOUBLE
50336: EQUAL
50337: IFTRUE 50377
50339: LD_INT 33
50341: DOUBLE
50342: EQUAL
50343: IFTRUE 50377
50345: LD_INT 27
50347: DOUBLE
50348: EQUAL
50349: IFTRUE 50377
50351: LD_INT 26
50353: DOUBLE
50354: EQUAL
50355: IFTRUE 50377
50357: LD_INT 28
50359: DOUBLE
50360: EQUAL
50361: IFTRUE 50377
50363: LD_INT 29
50365: DOUBLE
50366: EQUAL
50367: IFTRUE 50377
50369: LD_INT 30
50371: DOUBLE
50372: EQUAL
50373: IFTRUE 50377
50375: GO 50433
50377: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50378: LD_ADDR_VAR 0 9
50382: PUSH
50383: LD_VAR 0 59
50387: PUSH
50388: LD_VAR 0 60
50392: PUSH
50393: LD_VAR 0 61
50397: PUSH
50398: LD_VAR 0 62
50402: PUSH
50403: LD_VAR 0 63
50407: PUSH
50408: LD_VAR 0 64
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: PUSH
50421: LD_VAR 0 4
50425: PUSH
50426: LD_INT 1
50428: PLUS
50429: ARRAY
50430: ST_TO_ADDR
50431: GO 50434
50433: POP
// temp_list2 = [ ] ;
50434: LD_ADDR_VAR 0 10
50438: PUSH
50439: EMPTY
50440: ST_TO_ADDR
// for i in temp_list do
50441: LD_ADDR_VAR 0 8
50445: PUSH
50446: LD_VAR 0 9
50450: PUSH
50451: FOR_IN
50452: IFFALSE 50504
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50454: LD_ADDR_VAR 0 10
50458: PUSH
50459: LD_VAR 0 10
50463: PUSH
50464: LD_VAR 0 8
50468: PUSH
50469: LD_INT 1
50471: ARRAY
50472: PUSH
50473: LD_VAR 0 2
50477: PLUS
50478: PUSH
50479: LD_VAR 0 8
50483: PUSH
50484: LD_INT 2
50486: ARRAY
50487: PUSH
50488: LD_VAR 0 3
50492: PLUS
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: EMPTY
50499: LIST
50500: ADD
50501: ST_TO_ADDR
50502: GO 50451
50504: POP
50505: POP
// result = temp_list2 ;
50506: LD_ADDR_VAR 0 7
50510: PUSH
50511: LD_VAR 0 10
50515: ST_TO_ADDR
// end ;
50516: LD_VAR 0 7
50520: RET
// export function EnemyInRange ( unit , dist ) ; begin
50521: LD_INT 0
50523: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50524: LD_ADDR_VAR 0 3
50528: PUSH
50529: LD_VAR 0 1
50533: PPUSH
50534: CALL_OW 255
50538: PPUSH
50539: LD_VAR 0 1
50543: PPUSH
50544: CALL_OW 250
50548: PPUSH
50549: LD_VAR 0 1
50553: PPUSH
50554: CALL_OW 251
50558: PPUSH
50559: LD_VAR 0 2
50563: PPUSH
50564: CALL 24625 0 4
50568: PUSH
50569: LD_INT 4
50571: ARRAY
50572: ST_TO_ADDR
// end ;
50573: LD_VAR 0 3
50577: RET
// export function PlayerSeeMe ( unit ) ; begin
50578: LD_INT 0
50580: PPUSH
// result := See ( your_side , unit ) ;
50581: LD_ADDR_VAR 0 2
50585: PUSH
50586: LD_OWVAR 2
50590: PPUSH
50591: LD_VAR 0 1
50595: PPUSH
50596: CALL_OW 292
50600: ST_TO_ADDR
// end ;
50601: LD_VAR 0 2
50605: RET
// export function ReverseDir ( unit ) ; begin
50606: LD_INT 0
50608: PPUSH
// if not unit then
50609: LD_VAR 0 1
50613: NOT
50614: IFFALSE 50618
// exit ;
50616: GO 50641
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50618: LD_ADDR_VAR 0 2
50622: PUSH
50623: LD_VAR 0 1
50627: PPUSH
50628: CALL_OW 254
50632: PUSH
50633: LD_INT 3
50635: PLUS
50636: PUSH
50637: LD_INT 6
50639: MOD
50640: ST_TO_ADDR
// end ;
50641: LD_VAR 0 2
50645: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
50646: LD_INT 0
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
// if not hexes then
50653: LD_VAR 0 2
50657: NOT
50658: IFFALSE 50662
// exit ;
50660: GO 50810
// dist := 9999 ;
50662: LD_ADDR_VAR 0 5
50666: PUSH
50667: LD_INT 9999
50669: ST_TO_ADDR
// for i = 1 to hexes do
50670: LD_ADDR_VAR 0 4
50674: PUSH
50675: DOUBLE
50676: LD_INT 1
50678: DEC
50679: ST_TO_ADDR
50680: LD_VAR 0 2
50684: PUSH
50685: FOR_TO
50686: IFFALSE 50798
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
50688: LD_VAR 0 1
50692: PPUSH
50693: LD_VAR 0 2
50697: PUSH
50698: LD_VAR 0 4
50702: ARRAY
50703: PUSH
50704: LD_INT 1
50706: ARRAY
50707: PPUSH
50708: LD_VAR 0 2
50712: PUSH
50713: LD_VAR 0 4
50717: ARRAY
50718: PUSH
50719: LD_INT 2
50721: ARRAY
50722: PPUSH
50723: CALL_OW 297
50727: PUSH
50728: LD_VAR 0 5
50732: LESS
50733: IFFALSE 50796
// begin hex := hexes [ i ] ;
50735: LD_ADDR_VAR 0 7
50739: PUSH
50740: LD_VAR 0 2
50744: PUSH
50745: LD_VAR 0 4
50749: ARRAY
50750: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50751: LD_ADDR_VAR 0 5
50755: PUSH
50756: LD_VAR 0 1
50760: PPUSH
50761: LD_VAR 0 2
50765: PUSH
50766: LD_VAR 0 4
50770: ARRAY
50771: PUSH
50772: LD_INT 1
50774: ARRAY
50775: PPUSH
50776: LD_VAR 0 2
50780: PUSH
50781: LD_VAR 0 4
50785: ARRAY
50786: PUSH
50787: LD_INT 2
50789: ARRAY
50790: PPUSH
50791: CALL_OW 297
50795: ST_TO_ADDR
// end ; end ;
50796: GO 50685
50798: POP
50799: POP
// result := hex ;
50800: LD_ADDR_VAR 0 3
50804: PUSH
50805: LD_VAR 0 7
50809: ST_TO_ADDR
// end ;
50810: LD_VAR 0 3
50814: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50815: LD_INT 0
50817: PPUSH
50818: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50819: LD_VAR 0 1
50823: NOT
50824: PUSH
50825: LD_VAR 0 1
50829: PUSH
50830: LD_INT 21
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 23
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PPUSH
50854: CALL_OW 69
50858: IN
50859: NOT
50860: OR
50861: IFFALSE 50865
// exit ;
50863: GO 50912
// for i = 1 to 3 do
50865: LD_ADDR_VAR 0 3
50869: PUSH
50870: DOUBLE
50871: LD_INT 1
50873: DEC
50874: ST_TO_ADDR
50875: LD_INT 3
50877: PUSH
50878: FOR_TO
50879: IFFALSE 50910
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50881: LD_VAR 0 1
50885: PPUSH
50886: CALL_OW 250
50890: PPUSH
50891: LD_VAR 0 1
50895: PPUSH
50896: CALL_OW 251
50900: PPUSH
50901: LD_INT 1
50903: PPUSH
50904: CALL_OW 453
50908: GO 50878
50910: POP
50911: POP
// end ;
50912: LD_VAR 0 2
50916: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50917: LD_INT 0
50919: PPUSH
50920: PPUSH
50921: PPUSH
50922: PPUSH
50923: PPUSH
50924: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50925: LD_VAR 0 1
50929: NOT
50930: PUSH
50931: LD_VAR 0 2
50935: NOT
50936: OR
50937: PUSH
50938: LD_VAR 0 1
50942: PPUSH
50943: CALL_OW 314
50947: OR
50948: IFFALSE 50952
// exit ;
50950: GO 51393
// x := GetX ( enemy_unit ) ;
50952: LD_ADDR_VAR 0 7
50956: PUSH
50957: LD_VAR 0 2
50961: PPUSH
50962: CALL_OW 250
50966: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50967: LD_ADDR_VAR 0 8
50971: PUSH
50972: LD_VAR 0 2
50976: PPUSH
50977: CALL_OW 251
50981: ST_TO_ADDR
// if not x or not y then
50982: LD_VAR 0 7
50986: NOT
50987: PUSH
50988: LD_VAR 0 8
50992: NOT
50993: OR
50994: IFFALSE 50998
// exit ;
50996: GO 51393
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50998: LD_ADDR_VAR 0 6
51002: PUSH
51003: LD_VAR 0 7
51007: PPUSH
51008: LD_INT 0
51010: PPUSH
51011: LD_INT 4
51013: PPUSH
51014: CALL_OW 272
51018: PUSH
51019: LD_VAR 0 8
51023: PPUSH
51024: LD_INT 0
51026: PPUSH
51027: LD_INT 4
51029: PPUSH
51030: CALL_OW 273
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_VAR 0 7
51043: PPUSH
51044: LD_INT 1
51046: PPUSH
51047: LD_INT 4
51049: PPUSH
51050: CALL_OW 272
51054: PUSH
51055: LD_VAR 0 8
51059: PPUSH
51060: LD_INT 1
51062: PPUSH
51063: LD_INT 4
51065: PPUSH
51066: CALL_OW 273
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_VAR 0 7
51079: PPUSH
51080: LD_INT 2
51082: PPUSH
51083: LD_INT 4
51085: PPUSH
51086: CALL_OW 272
51090: PUSH
51091: LD_VAR 0 8
51095: PPUSH
51096: LD_INT 2
51098: PPUSH
51099: LD_INT 4
51101: PPUSH
51102: CALL_OW 273
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_VAR 0 7
51115: PPUSH
51116: LD_INT 3
51118: PPUSH
51119: LD_INT 4
51121: PPUSH
51122: CALL_OW 272
51126: PUSH
51127: LD_VAR 0 8
51131: PPUSH
51132: LD_INT 3
51134: PPUSH
51135: LD_INT 4
51137: PPUSH
51138: CALL_OW 273
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_VAR 0 7
51151: PPUSH
51152: LD_INT 4
51154: PPUSH
51155: LD_INT 4
51157: PPUSH
51158: CALL_OW 272
51162: PUSH
51163: LD_VAR 0 8
51167: PPUSH
51168: LD_INT 4
51170: PPUSH
51171: LD_INT 4
51173: PPUSH
51174: CALL_OW 273
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_VAR 0 7
51187: PPUSH
51188: LD_INT 5
51190: PPUSH
51191: LD_INT 4
51193: PPUSH
51194: CALL_OW 272
51198: PUSH
51199: LD_VAR 0 8
51203: PPUSH
51204: LD_INT 5
51206: PPUSH
51207: LD_INT 4
51209: PPUSH
51210: CALL_OW 273
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: ST_TO_ADDR
// for i = tmp downto 1 do
51227: LD_ADDR_VAR 0 4
51231: PUSH
51232: DOUBLE
51233: LD_VAR 0 6
51237: INC
51238: ST_TO_ADDR
51239: LD_INT 1
51241: PUSH
51242: FOR_DOWNTO
51243: IFFALSE 51344
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51245: LD_VAR 0 6
51249: PUSH
51250: LD_VAR 0 4
51254: ARRAY
51255: PUSH
51256: LD_INT 1
51258: ARRAY
51259: PPUSH
51260: LD_VAR 0 6
51264: PUSH
51265: LD_VAR 0 4
51269: ARRAY
51270: PUSH
51271: LD_INT 2
51273: ARRAY
51274: PPUSH
51275: CALL_OW 488
51279: NOT
51280: PUSH
51281: LD_VAR 0 6
51285: PUSH
51286: LD_VAR 0 4
51290: ARRAY
51291: PUSH
51292: LD_INT 1
51294: ARRAY
51295: PPUSH
51296: LD_VAR 0 6
51300: PUSH
51301: LD_VAR 0 4
51305: ARRAY
51306: PUSH
51307: LD_INT 2
51309: ARRAY
51310: PPUSH
51311: CALL_OW 428
51315: PUSH
51316: LD_INT 0
51318: NONEQUAL
51319: OR
51320: IFFALSE 51342
// tmp := Delete ( tmp , i ) ;
51322: LD_ADDR_VAR 0 6
51326: PUSH
51327: LD_VAR 0 6
51331: PPUSH
51332: LD_VAR 0 4
51336: PPUSH
51337: CALL_OW 3
51341: ST_TO_ADDR
51342: GO 51242
51344: POP
51345: POP
// j := GetClosestHex ( unit , tmp ) ;
51346: LD_ADDR_VAR 0 5
51350: PUSH
51351: LD_VAR 0 1
51355: PPUSH
51356: LD_VAR 0 6
51360: PPUSH
51361: CALL 50646 0 2
51365: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51366: LD_VAR 0 1
51370: PPUSH
51371: LD_VAR 0 5
51375: PUSH
51376: LD_INT 1
51378: ARRAY
51379: PPUSH
51380: LD_VAR 0 5
51384: PUSH
51385: LD_INT 2
51387: ARRAY
51388: PPUSH
51389: CALL_OW 111
// end ;
51393: LD_VAR 0 3
51397: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51398: LD_INT 0
51400: PPUSH
51401: PPUSH
51402: PPUSH
// uc_side = 0 ;
51403: LD_ADDR_OWVAR 20
51407: PUSH
51408: LD_INT 0
51410: ST_TO_ADDR
// uc_nation = 0 ;
51411: LD_ADDR_OWVAR 21
51415: PUSH
51416: LD_INT 0
51418: ST_TO_ADDR
// InitHc ;
51419: CALL_OW 19
// InitVc ;
51423: CALL_OW 20
// if mastodonts then
51427: LD_VAR 0 6
51431: IFFALSE 51498
// for i = 1 to mastodonts do
51433: LD_ADDR_VAR 0 11
51437: PUSH
51438: DOUBLE
51439: LD_INT 1
51441: DEC
51442: ST_TO_ADDR
51443: LD_VAR 0 6
51447: PUSH
51448: FOR_TO
51449: IFFALSE 51496
// begin vc_chassis := 31 ;
51451: LD_ADDR_OWVAR 37
51455: PUSH
51456: LD_INT 31
51458: ST_TO_ADDR
// vc_control := control_rider ;
51459: LD_ADDR_OWVAR 38
51463: PUSH
51464: LD_INT 4
51466: ST_TO_ADDR
// animal := CreateVehicle ;
51467: LD_ADDR_VAR 0 12
51471: PUSH
51472: CALL_OW 45
51476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51477: LD_VAR 0 12
51481: PPUSH
51482: LD_VAR 0 8
51486: PPUSH
51487: LD_INT 0
51489: PPUSH
51490: CALL 53686 0 3
// end ;
51494: GO 51448
51496: POP
51497: POP
// if horses then
51498: LD_VAR 0 5
51502: IFFALSE 51569
// for i = 1 to horses do
51504: LD_ADDR_VAR 0 11
51508: PUSH
51509: DOUBLE
51510: LD_INT 1
51512: DEC
51513: ST_TO_ADDR
51514: LD_VAR 0 5
51518: PUSH
51519: FOR_TO
51520: IFFALSE 51567
// begin hc_class := 21 ;
51522: LD_ADDR_OWVAR 28
51526: PUSH
51527: LD_INT 21
51529: ST_TO_ADDR
// hc_gallery :=  ;
51530: LD_ADDR_OWVAR 33
51534: PUSH
51535: LD_STRING 
51537: ST_TO_ADDR
// animal := CreateHuman ;
51538: LD_ADDR_VAR 0 12
51542: PUSH
51543: CALL_OW 44
51547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51548: LD_VAR 0 12
51552: PPUSH
51553: LD_VAR 0 8
51557: PPUSH
51558: LD_INT 0
51560: PPUSH
51561: CALL 53686 0 3
// end ;
51565: GO 51519
51567: POP
51568: POP
// if birds then
51569: LD_VAR 0 1
51573: IFFALSE 51640
// for i = 1 to birds do
51575: LD_ADDR_VAR 0 11
51579: PUSH
51580: DOUBLE
51581: LD_INT 1
51583: DEC
51584: ST_TO_ADDR
51585: LD_VAR 0 1
51589: PUSH
51590: FOR_TO
51591: IFFALSE 51638
// begin hc_class = 18 ;
51593: LD_ADDR_OWVAR 28
51597: PUSH
51598: LD_INT 18
51600: ST_TO_ADDR
// hc_gallery =  ;
51601: LD_ADDR_OWVAR 33
51605: PUSH
51606: LD_STRING 
51608: ST_TO_ADDR
// animal := CreateHuman ;
51609: LD_ADDR_VAR 0 12
51613: PUSH
51614: CALL_OW 44
51618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51619: LD_VAR 0 12
51623: PPUSH
51624: LD_VAR 0 8
51628: PPUSH
51629: LD_INT 0
51631: PPUSH
51632: CALL 53686 0 3
// end ;
51636: GO 51590
51638: POP
51639: POP
// if tigers then
51640: LD_VAR 0 2
51644: IFFALSE 51728
// for i = 1 to tigers do
51646: LD_ADDR_VAR 0 11
51650: PUSH
51651: DOUBLE
51652: LD_INT 1
51654: DEC
51655: ST_TO_ADDR
51656: LD_VAR 0 2
51660: PUSH
51661: FOR_TO
51662: IFFALSE 51726
// begin hc_class = class_tiger ;
51664: LD_ADDR_OWVAR 28
51668: PUSH
51669: LD_INT 14
51671: ST_TO_ADDR
// hc_gallery =  ;
51672: LD_ADDR_OWVAR 33
51676: PUSH
51677: LD_STRING 
51679: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51680: LD_ADDR_OWVAR 35
51684: PUSH
51685: LD_INT 7
51687: NEG
51688: PPUSH
51689: LD_INT 7
51691: PPUSH
51692: CALL_OW 12
51696: ST_TO_ADDR
// animal := CreateHuman ;
51697: LD_ADDR_VAR 0 12
51701: PUSH
51702: CALL_OW 44
51706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51707: LD_VAR 0 12
51711: PPUSH
51712: LD_VAR 0 8
51716: PPUSH
51717: LD_INT 0
51719: PPUSH
51720: CALL 53686 0 3
// end ;
51724: GO 51661
51726: POP
51727: POP
// if apemans then
51728: LD_VAR 0 3
51732: IFFALSE 51855
// for i = 1 to apemans do
51734: LD_ADDR_VAR 0 11
51738: PUSH
51739: DOUBLE
51740: LD_INT 1
51742: DEC
51743: ST_TO_ADDR
51744: LD_VAR 0 3
51748: PUSH
51749: FOR_TO
51750: IFFALSE 51853
// begin hc_class = class_apeman ;
51752: LD_ADDR_OWVAR 28
51756: PUSH
51757: LD_INT 12
51759: ST_TO_ADDR
// hc_gallery =  ;
51760: LD_ADDR_OWVAR 33
51764: PUSH
51765: LD_STRING 
51767: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
51768: LD_ADDR_OWVAR 35
51772: PUSH
51773: LD_INT 5
51775: NEG
51776: PPUSH
51777: LD_INT 5
51779: PPUSH
51780: CALL_OW 12
51784: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51785: LD_ADDR_OWVAR 31
51789: PUSH
51790: LD_INT 1
51792: PPUSH
51793: LD_INT 3
51795: PPUSH
51796: CALL_OW 12
51800: PUSH
51801: LD_INT 1
51803: PPUSH
51804: LD_INT 3
51806: PPUSH
51807: CALL_OW 12
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// animal := CreateHuman ;
51824: LD_ADDR_VAR 0 12
51828: PUSH
51829: CALL_OW 44
51833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51834: LD_VAR 0 12
51838: PPUSH
51839: LD_VAR 0 8
51843: PPUSH
51844: LD_INT 0
51846: PPUSH
51847: CALL 53686 0 3
// end ;
51851: GO 51749
51853: POP
51854: POP
// if enchidnas then
51855: LD_VAR 0 4
51859: IFFALSE 51926
// for i = 1 to enchidnas do
51861: LD_ADDR_VAR 0 11
51865: PUSH
51866: DOUBLE
51867: LD_INT 1
51869: DEC
51870: ST_TO_ADDR
51871: LD_VAR 0 4
51875: PUSH
51876: FOR_TO
51877: IFFALSE 51924
// begin hc_class = 13 ;
51879: LD_ADDR_OWVAR 28
51883: PUSH
51884: LD_INT 13
51886: ST_TO_ADDR
// hc_gallery =  ;
51887: LD_ADDR_OWVAR 33
51891: PUSH
51892: LD_STRING 
51894: ST_TO_ADDR
// animal := CreateHuman ;
51895: LD_ADDR_VAR 0 12
51899: PUSH
51900: CALL_OW 44
51904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51905: LD_VAR 0 12
51909: PPUSH
51910: LD_VAR 0 8
51914: PPUSH
51915: LD_INT 0
51917: PPUSH
51918: CALL 53686 0 3
// end ;
51922: GO 51876
51924: POP
51925: POP
// if fishes then
51926: LD_VAR 0 7
51930: IFFALSE 51997
// for i = 1 to fishes do
51932: LD_ADDR_VAR 0 11
51936: PUSH
51937: DOUBLE
51938: LD_INT 1
51940: DEC
51941: ST_TO_ADDR
51942: LD_VAR 0 7
51946: PUSH
51947: FOR_TO
51948: IFFALSE 51995
// begin hc_class = 20 ;
51950: LD_ADDR_OWVAR 28
51954: PUSH
51955: LD_INT 20
51957: ST_TO_ADDR
// hc_gallery =  ;
51958: LD_ADDR_OWVAR 33
51962: PUSH
51963: LD_STRING 
51965: ST_TO_ADDR
// animal := CreateHuman ;
51966: LD_ADDR_VAR 0 12
51970: PUSH
51971: CALL_OW 44
51975: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51976: LD_VAR 0 12
51980: PPUSH
51981: LD_VAR 0 9
51985: PPUSH
51986: LD_INT 0
51988: PPUSH
51989: CALL 53686 0 3
// end ;
51993: GO 51947
51995: POP
51996: POP
// end ;
51997: LD_VAR 0 10
52001: RET
// export function WantHeal ( sci , unit ) ; begin
52002: LD_INT 0
52004: PPUSH
// if GetTaskList ( sci ) > 0 then
52005: LD_VAR 0 1
52009: PPUSH
52010: CALL_OW 437
52014: PUSH
52015: LD_INT 0
52017: GREATER
52018: IFFALSE 52088
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52020: LD_VAR 0 1
52024: PPUSH
52025: CALL_OW 437
52029: PUSH
52030: LD_INT 1
52032: ARRAY
52033: PUSH
52034: LD_INT 1
52036: ARRAY
52037: PUSH
52038: LD_STRING l
52040: EQUAL
52041: PUSH
52042: LD_VAR 0 1
52046: PPUSH
52047: CALL_OW 437
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: PUSH
52056: LD_INT 4
52058: ARRAY
52059: PUSH
52060: LD_VAR 0 2
52064: EQUAL
52065: AND
52066: IFFALSE 52078
// result := true else
52068: LD_ADDR_VAR 0 3
52072: PUSH
52073: LD_INT 1
52075: ST_TO_ADDR
52076: GO 52086
// result := false ;
52078: LD_ADDR_VAR 0 3
52082: PUSH
52083: LD_INT 0
52085: ST_TO_ADDR
// end else
52086: GO 52096
// result := false ;
52088: LD_ADDR_VAR 0 3
52092: PUSH
52093: LD_INT 0
52095: ST_TO_ADDR
// end ;
52096: LD_VAR 0 3
52100: RET
// export function HealTarget ( sci ) ; begin
52101: LD_INT 0
52103: PPUSH
// if not sci then
52104: LD_VAR 0 1
52108: NOT
52109: IFFALSE 52113
// exit ;
52111: GO 52178
// result := 0 ;
52113: LD_ADDR_VAR 0 2
52117: PUSH
52118: LD_INT 0
52120: ST_TO_ADDR
// if GetTaskList ( sci ) then
52121: LD_VAR 0 1
52125: PPUSH
52126: CALL_OW 437
52130: IFFALSE 52178
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52132: LD_VAR 0 1
52136: PPUSH
52137: CALL_OW 437
52141: PUSH
52142: LD_INT 1
52144: ARRAY
52145: PUSH
52146: LD_INT 1
52148: ARRAY
52149: PUSH
52150: LD_STRING l
52152: EQUAL
52153: IFFALSE 52178
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52155: LD_ADDR_VAR 0 2
52159: PUSH
52160: LD_VAR 0 1
52164: PPUSH
52165: CALL_OW 437
52169: PUSH
52170: LD_INT 1
52172: ARRAY
52173: PUSH
52174: LD_INT 4
52176: ARRAY
52177: ST_TO_ADDR
// end ;
52178: LD_VAR 0 2
52182: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52183: LD_INT 0
52185: PPUSH
52186: PPUSH
52187: PPUSH
52188: PPUSH
// if not base_units then
52189: LD_VAR 0 1
52193: NOT
52194: IFFALSE 52198
// exit ;
52196: GO 52285
// result := false ;
52198: LD_ADDR_VAR 0 2
52202: PUSH
52203: LD_INT 0
52205: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52206: LD_ADDR_VAR 0 5
52210: PUSH
52211: LD_VAR 0 1
52215: PPUSH
52216: LD_INT 21
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PPUSH
52226: CALL_OW 72
52230: ST_TO_ADDR
// if not tmp then
52231: LD_VAR 0 5
52235: NOT
52236: IFFALSE 52240
// exit ;
52238: GO 52285
// for i in tmp do
52240: LD_ADDR_VAR 0 3
52244: PUSH
52245: LD_VAR 0 5
52249: PUSH
52250: FOR_IN
52251: IFFALSE 52283
// begin result := EnemyInRange ( i , 22 ) ;
52253: LD_ADDR_VAR 0 2
52257: PUSH
52258: LD_VAR 0 3
52262: PPUSH
52263: LD_INT 22
52265: PPUSH
52266: CALL 50521 0 2
52270: ST_TO_ADDR
// if result then
52271: LD_VAR 0 2
52275: IFFALSE 52281
// exit ;
52277: POP
52278: POP
52279: GO 52285
// end ;
52281: GO 52250
52283: POP
52284: POP
// end ;
52285: LD_VAR 0 2
52289: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52290: LD_INT 0
52292: PPUSH
52293: PPUSH
// if not units then
52294: LD_VAR 0 1
52298: NOT
52299: IFFALSE 52303
// exit ;
52301: GO 52373
// result := [ ] ;
52303: LD_ADDR_VAR 0 3
52307: PUSH
52308: EMPTY
52309: ST_TO_ADDR
// for i in units do
52310: LD_ADDR_VAR 0 4
52314: PUSH
52315: LD_VAR 0 1
52319: PUSH
52320: FOR_IN
52321: IFFALSE 52371
// if GetTag ( i ) = tag then
52323: LD_VAR 0 4
52327: PPUSH
52328: CALL_OW 110
52332: PUSH
52333: LD_VAR 0 2
52337: EQUAL
52338: IFFALSE 52369
// result := Insert ( result , result + 1 , i ) ;
52340: LD_ADDR_VAR 0 3
52344: PUSH
52345: LD_VAR 0 3
52349: PPUSH
52350: LD_VAR 0 3
52354: PUSH
52355: LD_INT 1
52357: PLUS
52358: PPUSH
52359: LD_VAR 0 4
52363: PPUSH
52364: CALL_OW 2
52368: ST_TO_ADDR
52369: GO 52320
52371: POP
52372: POP
// end ;
52373: LD_VAR 0 3
52377: RET
// export function IsDriver ( un ) ; begin
52378: LD_INT 0
52380: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52381: LD_ADDR_VAR 0 2
52385: PUSH
52386: LD_VAR 0 1
52390: PUSH
52391: LD_INT 55
52393: PUSH
52394: EMPTY
52395: LIST
52396: PPUSH
52397: CALL_OW 69
52401: IN
52402: ST_TO_ADDR
// end ;
52403: LD_VAR 0 2
52407: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52408: LD_INT 0
52410: PPUSH
52411: PPUSH
// list := [ ] ;
52412: LD_ADDR_VAR 0 5
52416: PUSH
52417: EMPTY
52418: ST_TO_ADDR
// case d of 0 :
52419: LD_VAR 0 3
52423: PUSH
52424: LD_INT 0
52426: DOUBLE
52427: EQUAL
52428: IFTRUE 52432
52430: GO 52565
52432: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52433: LD_ADDR_VAR 0 5
52437: PUSH
52438: LD_VAR 0 1
52442: PUSH
52443: LD_INT 4
52445: MINUS
52446: PUSH
52447: LD_VAR 0 2
52451: PUSH
52452: LD_INT 4
52454: MINUS
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: LIST
52463: PUSH
52464: LD_VAR 0 1
52468: PUSH
52469: LD_INT 3
52471: MINUS
52472: PUSH
52473: LD_VAR 0 2
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: LIST
52485: PUSH
52486: LD_VAR 0 1
52490: PUSH
52491: LD_INT 4
52493: PLUS
52494: PUSH
52495: LD_VAR 0 2
52499: PUSH
52500: LD_INT 4
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: PUSH
52508: LD_VAR 0 1
52512: PUSH
52513: LD_INT 3
52515: PLUS
52516: PUSH
52517: LD_VAR 0 2
52521: PUSH
52522: LD_INT 3
52524: PLUS
52525: PUSH
52526: LD_INT 5
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: PUSH
52534: LD_VAR 0 1
52538: PUSH
52539: LD_VAR 0 2
52543: PUSH
52544: LD_INT 4
52546: PLUS
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// end ; 1 :
52563: GO 53263
52565: LD_INT 1
52567: DOUBLE
52568: EQUAL
52569: IFTRUE 52573
52571: GO 52706
52573: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52574: LD_ADDR_VAR 0 5
52578: PUSH
52579: LD_VAR 0 1
52583: PUSH
52584: LD_VAR 0 2
52588: PUSH
52589: LD_INT 4
52591: MINUS
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: LIST
52600: PUSH
52601: LD_VAR 0 1
52605: PUSH
52606: LD_INT 3
52608: MINUS
52609: PUSH
52610: LD_VAR 0 2
52614: PUSH
52615: LD_INT 3
52617: MINUS
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: PUSH
52627: LD_VAR 0 1
52631: PUSH
52632: LD_INT 4
52634: MINUS
52635: PUSH
52636: LD_VAR 0 2
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: PUSH
52649: LD_VAR 0 1
52653: PUSH
52654: LD_VAR 0 2
52658: PUSH
52659: LD_INT 3
52661: PLUS
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: PUSH
52671: LD_VAR 0 1
52675: PUSH
52676: LD_INT 4
52678: PLUS
52679: PUSH
52680: LD_VAR 0 2
52684: PUSH
52685: LD_INT 4
52687: PLUS
52688: PUSH
52689: LD_INT 5
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: ST_TO_ADDR
// end ; 2 :
52704: GO 53263
52706: LD_INT 2
52708: DOUBLE
52709: EQUAL
52710: IFTRUE 52714
52712: GO 52843
52714: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52715: LD_ADDR_VAR 0 5
52719: PUSH
52720: LD_VAR 0 1
52724: PUSH
52725: LD_VAR 0 2
52729: PUSH
52730: LD_INT 3
52732: MINUS
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: PUSH
52742: LD_VAR 0 1
52746: PUSH
52747: LD_INT 4
52749: PLUS
52750: PUSH
52751: LD_VAR 0 2
52755: PUSH
52756: LD_INT 4
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: PUSH
52764: LD_VAR 0 1
52768: PUSH
52769: LD_VAR 0 2
52773: PUSH
52774: LD_INT 4
52776: PLUS
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: LIST
52785: PUSH
52786: LD_VAR 0 1
52790: PUSH
52791: LD_INT 3
52793: MINUS
52794: PUSH
52795: LD_VAR 0 2
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: LIST
52807: PUSH
52808: LD_VAR 0 1
52812: PUSH
52813: LD_INT 4
52815: MINUS
52816: PUSH
52817: LD_VAR 0 2
52821: PUSH
52822: LD_INT 4
52824: MINUS
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// end ; 3 :
52841: GO 53263
52843: LD_INT 3
52845: DOUBLE
52846: EQUAL
52847: IFTRUE 52851
52849: GO 52984
52851: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52852: LD_ADDR_VAR 0 5
52856: PUSH
52857: LD_VAR 0 1
52861: PUSH
52862: LD_INT 3
52864: PLUS
52865: PUSH
52866: LD_VAR 0 2
52870: PUSH
52871: LD_INT 4
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: LIST
52878: PUSH
52879: LD_VAR 0 1
52883: PUSH
52884: LD_INT 4
52886: PLUS
52887: PUSH
52888: LD_VAR 0 2
52892: PUSH
52893: LD_INT 4
52895: PLUS
52896: PUSH
52897: LD_INT 5
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: LIST
52904: PUSH
52905: LD_VAR 0 1
52909: PUSH
52910: LD_INT 4
52912: MINUS
52913: PUSH
52914: LD_VAR 0 2
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: PUSH
52927: LD_VAR 0 1
52931: PUSH
52932: LD_VAR 0 2
52936: PUSH
52937: LD_INT 4
52939: MINUS
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: LIST
52948: PUSH
52949: LD_VAR 0 1
52953: PUSH
52954: LD_INT 3
52956: MINUS
52957: PUSH
52958: LD_VAR 0 2
52962: PUSH
52963: LD_INT 3
52965: MINUS
52966: PUSH
52967: LD_INT 2
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: ST_TO_ADDR
// end ; 4 :
52982: GO 53263
52984: LD_INT 4
52986: DOUBLE
52987: EQUAL
52988: IFTRUE 52992
52990: GO 53125
52992: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52993: LD_ADDR_VAR 0 5
52997: PUSH
52998: LD_VAR 0 1
53002: PUSH
53003: LD_VAR 0 2
53007: PUSH
53008: LD_INT 4
53010: PLUS
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: PUSH
53020: LD_VAR 0 1
53024: PUSH
53025: LD_INT 3
53027: PLUS
53028: PUSH
53029: LD_VAR 0 2
53033: PUSH
53034: LD_INT 3
53036: PLUS
53037: PUSH
53038: LD_INT 5
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: LIST
53045: PUSH
53046: LD_VAR 0 1
53050: PUSH
53051: LD_INT 4
53053: PLUS
53054: PUSH
53055: LD_VAR 0 2
53059: PUSH
53060: LD_INT 4
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: PUSH
53068: LD_VAR 0 1
53072: PUSH
53073: LD_VAR 0 2
53077: PUSH
53078: LD_INT 3
53080: MINUS
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: PUSH
53090: LD_VAR 0 1
53094: PUSH
53095: LD_INT 4
53097: MINUS
53098: PUSH
53099: LD_VAR 0 2
53103: PUSH
53104: LD_INT 4
53106: MINUS
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// end ; 5 :
53123: GO 53263
53125: LD_INT 5
53127: DOUBLE
53128: EQUAL
53129: IFTRUE 53133
53131: GO 53262
53133: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53134: LD_ADDR_VAR 0 5
53138: PUSH
53139: LD_VAR 0 1
53143: PUSH
53144: LD_INT 4
53146: MINUS
53147: PUSH
53148: LD_VAR 0 2
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: PUSH
53161: LD_VAR 0 1
53165: PUSH
53166: LD_VAR 0 2
53170: PUSH
53171: LD_INT 4
53173: MINUS
53174: PUSH
53175: LD_INT 3
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: LIST
53182: PUSH
53183: LD_VAR 0 1
53187: PUSH
53188: LD_INT 4
53190: PLUS
53191: PUSH
53192: LD_VAR 0 2
53196: PUSH
53197: LD_INT 4
53199: PLUS
53200: PUSH
53201: LD_INT 5
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: PUSH
53209: LD_VAR 0 1
53213: PUSH
53214: LD_INT 3
53216: PLUS
53217: PUSH
53218: LD_VAR 0 2
53222: PUSH
53223: LD_INT 4
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: PUSH
53231: LD_VAR 0 1
53235: PUSH
53236: LD_VAR 0 2
53240: PUSH
53241: LD_INT 3
53243: PLUS
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: ST_TO_ADDR
// end ; end ;
53260: GO 53263
53262: POP
// result := list ;
53263: LD_ADDR_VAR 0 4
53267: PUSH
53268: LD_VAR 0 5
53272: ST_TO_ADDR
// end ;
53273: LD_VAR 0 4
53277: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53278: LD_INT 0
53280: PPUSH
53281: PPUSH
53282: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53283: LD_VAR 0 1
53287: NOT
53288: PUSH
53289: LD_VAR 0 2
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: LD_INT 4
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: IN
53312: NOT
53313: OR
53314: IFFALSE 53318
// exit ;
53316: GO 53410
// tmp := [ ] ;
53318: LD_ADDR_VAR 0 5
53322: PUSH
53323: EMPTY
53324: ST_TO_ADDR
// for i in units do
53325: LD_ADDR_VAR 0 4
53329: PUSH
53330: LD_VAR 0 1
53334: PUSH
53335: FOR_IN
53336: IFFALSE 53379
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53338: LD_ADDR_VAR 0 5
53342: PUSH
53343: LD_VAR 0 5
53347: PPUSH
53348: LD_VAR 0 5
53352: PUSH
53353: LD_INT 1
53355: PLUS
53356: PPUSH
53357: LD_VAR 0 4
53361: PPUSH
53362: LD_VAR 0 2
53366: PPUSH
53367: CALL_OW 259
53371: PPUSH
53372: CALL_OW 2
53376: ST_TO_ADDR
53377: GO 53335
53379: POP
53380: POP
// if not tmp then
53381: LD_VAR 0 5
53385: NOT
53386: IFFALSE 53390
// exit ;
53388: GO 53410
// result := SortListByListDesc ( units , tmp ) ;
53390: LD_ADDR_VAR 0 3
53394: PUSH
53395: LD_VAR 0 1
53399: PPUSH
53400: LD_VAR 0 5
53404: PPUSH
53405: CALL_OW 77
53409: ST_TO_ADDR
// end ;
53410: LD_VAR 0 3
53414: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53415: LD_INT 0
53417: PPUSH
53418: PPUSH
53419: PPUSH
// result := false ;
53420: LD_ADDR_VAR 0 3
53424: PUSH
53425: LD_INT 0
53427: ST_TO_ADDR
// x := GetX ( building ) ;
53428: LD_ADDR_VAR 0 4
53432: PUSH
53433: LD_VAR 0 2
53437: PPUSH
53438: CALL_OW 250
53442: ST_TO_ADDR
// y := GetY ( building ) ;
53443: LD_ADDR_VAR 0 5
53447: PUSH
53448: LD_VAR 0 2
53452: PPUSH
53453: CALL_OW 251
53457: ST_TO_ADDR
// if not building or not x or not y then
53458: LD_VAR 0 2
53462: NOT
53463: PUSH
53464: LD_VAR 0 4
53468: NOT
53469: OR
53470: PUSH
53471: LD_VAR 0 5
53475: NOT
53476: OR
53477: IFFALSE 53481
// exit ;
53479: GO 53573
// if GetTaskList ( unit ) then
53481: LD_VAR 0 1
53485: PPUSH
53486: CALL_OW 437
53490: IFFALSE 53573
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53492: LD_STRING e
53494: PUSH
53495: LD_VAR 0 1
53499: PPUSH
53500: CALL_OW 437
53504: PUSH
53505: LD_INT 1
53507: ARRAY
53508: PUSH
53509: LD_INT 1
53511: ARRAY
53512: EQUAL
53513: PUSH
53514: LD_VAR 0 4
53518: PUSH
53519: LD_VAR 0 1
53523: PPUSH
53524: CALL_OW 437
53528: PUSH
53529: LD_INT 1
53531: ARRAY
53532: PUSH
53533: LD_INT 2
53535: ARRAY
53536: EQUAL
53537: AND
53538: PUSH
53539: LD_VAR 0 5
53543: PUSH
53544: LD_VAR 0 1
53548: PPUSH
53549: CALL_OW 437
53553: PUSH
53554: LD_INT 1
53556: ARRAY
53557: PUSH
53558: LD_INT 3
53560: ARRAY
53561: EQUAL
53562: AND
53563: IFFALSE 53573
// result := true end ;
53565: LD_ADDR_VAR 0 3
53569: PUSH
53570: LD_INT 1
53572: ST_TO_ADDR
// end ;
53573: LD_VAR 0 3
53577: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53578: LD_INT 0
53580: PPUSH
// result := false ;
53581: LD_ADDR_VAR 0 4
53585: PUSH
53586: LD_INT 0
53588: ST_TO_ADDR
// if GetTaskList ( unit ) then
53589: LD_VAR 0 1
53593: PPUSH
53594: CALL_OW 437
53598: IFFALSE 53681
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53600: LD_STRING M
53602: PUSH
53603: LD_VAR 0 1
53607: PPUSH
53608: CALL_OW 437
53612: PUSH
53613: LD_INT 1
53615: ARRAY
53616: PUSH
53617: LD_INT 1
53619: ARRAY
53620: EQUAL
53621: PUSH
53622: LD_VAR 0 2
53626: PUSH
53627: LD_VAR 0 1
53631: PPUSH
53632: CALL_OW 437
53636: PUSH
53637: LD_INT 1
53639: ARRAY
53640: PUSH
53641: LD_INT 2
53643: ARRAY
53644: EQUAL
53645: AND
53646: PUSH
53647: LD_VAR 0 3
53651: PUSH
53652: LD_VAR 0 1
53656: PPUSH
53657: CALL_OW 437
53661: PUSH
53662: LD_INT 1
53664: ARRAY
53665: PUSH
53666: LD_INT 3
53668: ARRAY
53669: EQUAL
53670: AND
53671: IFFALSE 53681
// result := true ;
53673: LD_ADDR_VAR 0 4
53677: PUSH
53678: LD_INT 1
53680: ST_TO_ADDR
// end ; end ;
53681: LD_VAR 0 4
53685: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53686: LD_INT 0
53688: PPUSH
53689: PPUSH
53690: PPUSH
53691: PPUSH
// if not unit or not area then
53692: LD_VAR 0 1
53696: NOT
53697: PUSH
53698: LD_VAR 0 2
53702: NOT
53703: OR
53704: IFFALSE 53708
// exit ;
53706: GO 53872
// tmp := AreaToList ( area , i ) ;
53708: LD_ADDR_VAR 0 6
53712: PUSH
53713: LD_VAR 0 2
53717: PPUSH
53718: LD_VAR 0 5
53722: PPUSH
53723: CALL_OW 517
53727: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53728: LD_ADDR_VAR 0 5
53732: PUSH
53733: DOUBLE
53734: LD_INT 1
53736: DEC
53737: ST_TO_ADDR
53738: LD_VAR 0 6
53742: PUSH
53743: LD_INT 1
53745: ARRAY
53746: PUSH
53747: FOR_TO
53748: IFFALSE 53870
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53750: LD_ADDR_VAR 0 7
53754: PUSH
53755: LD_VAR 0 6
53759: PUSH
53760: LD_INT 1
53762: ARRAY
53763: PUSH
53764: LD_VAR 0 5
53768: ARRAY
53769: PUSH
53770: LD_VAR 0 6
53774: PUSH
53775: LD_INT 2
53777: ARRAY
53778: PUSH
53779: LD_VAR 0 5
53783: ARRAY
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53789: LD_VAR 0 7
53793: PUSH
53794: LD_INT 1
53796: ARRAY
53797: PPUSH
53798: LD_VAR 0 7
53802: PUSH
53803: LD_INT 2
53805: ARRAY
53806: PPUSH
53807: CALL_OW 428
53811: PUSH
53812: LD_INT 0
53814: EQUAL
53815: IFFALSE 53868
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53817: LD_VAR 0 1
53821: PPUSH
53822: LD_VAR 0 7
53826: PUSH
53827: LD_INT 1
53829: ARRAY
53830: PPUSH
53831: LD_VAR 0 7
53835: PUSH
53836: LD_INT 2
53838: ARRAY
53839: PPUSH
53840: LD_VAR 0 3
53844: PPUSH
53845: CALL_OW 48
// result := IsPlaced ( unit ) ;
53849: LD_ADDR_VAR 0 4
53853: PUSH
53854: LD_VAR 0 1
53858: PPUSH
53859: CALL_OW 305
53863: ST_TO_ADDR
// exit ;
53864: POP
53865: POP
53866: GO 53872
// end ; end ;
53868: GO 53747
53870: POP
53871: POP
// end ;
53872: LD_VAR 0 4
53876: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53877: LD_INT 0
53879: PPUSH
53880: PPUSH
53881: PPUSH
// if not side or side > 8 then
53882: LD_VAR 0 1
53886: NOT
53887: PUSH
53888: LD_VAR 0 1
53892: PUSH
53893: LD_INT 8
53895: GREATER
53896: OR
53897: IFFALSE 53901
// exit ;
53899: GO 54088
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53901: LD_ADDR_VAR 0 4
53905: PUSH
53906: LD_INT 22
53908: PUSH
53909: LD_VAR 0 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 21
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PPUSH
53932: CALL_OW 69
53936: ST_TO_ADDR
// if not tmp then
53937: LD_VAR 0 4
53941: NOT
53942: IFFALSE 53946
// exit ;
53944: GO 54088
// enable_addtolog := true ;
53946: LD_ADDR_OWVAR 81
53950: PUSH
53951: LD_INT 1
53953: ST_TO_ADDR
// AddToLog ( [ ) ;
53954: LD_STRING [
53956: PPUSH
53957: CALL_OW 561
// for i in tmp do
53961: LD_ADDR_VAR 0 3
53965: PUSH
53966: LD_VAR 0 4
53970: PUSH
53971: FOR_IN
53972: IFFALSE 54079
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53974: LD_STRING [
53976: PUSH
53977: LD_VAR 0 3
53981: PPUSH
53982: CALL_OW 266
53986: STR
53987: PUSH
53988: LD_STRING , 
53990: STR
53991: PUSH
53992: LD_VAR 0 3
53996: PPUSH
53997: CALL_OW 250
54001: STR
54002: PUSH
54003: LD_STRING , 
54005: STR
54006: PUSH
54007: LD_VAR 0 3
54011: PPUSH
54012: CALL_OW 251
54016: STR
54017: PUSH
54018: LD_STRING , 
54020: STR
54021: PUSH
54022: LD_VAR 0 3
54026: PPUSH
54027: CALL_OW 254
54031: STR
54032: PUSH
54033: LD_STRING , 
54035: STR
54036: PUSH
54037: LD_VAR 0 3
54041: PPUSH
54042: LD_INT 1
54044: PPUSH
54045: CALL_OW 268
54049: STR
54050: PUSH
54051: LD_STRING , 
54053: STR
54054: PUSH
54055: LD_VAR 0 3
54059: PPUSH
54060: LD_INT 2
54062: PPUSH
54063: CALL_OW 268
54067: STR
54068: PUSH
54069: LD_STRING ],
54071: STR
54072: PPUSH
54073: CALL_OW 561
// end ;
54077: GO 53971
54079: POP
54080: POP
// AddToLog ( ]; ) ;
54081: LD_STRING ];
54083: PPUSH
54084: CALL_OW 561
// end ;
54088: LD_VAR 0 2
54092: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54093: LD_INT 0
54095: PPUSH
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
// if not area or not rate or not max then
54100: LD_VAR 0 1
54104: NOT
54105: PUSH
54106: LD_VAR 0 2
54110: NOT
54111: OR
54112: PUSH
54113: LD_VAR 0 4
54117: NOT
54118: OR
54119: IFFALSE 54123
// exit ;
54121: GO 54315
// while 1 do
54123: LD_INT 1
54125: IFFALSE 54315
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54127: LD_ADDR_VAR 0 9
54131: PUSH
54132: LD_VAR 0 1
54136: PPUSH
54137: LD_INT 1
54139: PPUSH
54140: CALL_OW 287
54144: PUSH
54145: LD_INT 10
54147: MUL
54148: ST_TO_ADDR
// r := rate / 10 ;
54149: LD_ADDR_VAR 0 7
54153: PUSH
54154: LD_VAR 0 2
54158: PUSH
54159: LD_INT 10
54161: DIVREAL
54162: ST_TO_ADDR
// time := 1 1$00 ;
54163: LD_ADDR_VAR 0 8
54167: PUSH
54168: LD_INT 2100
54170: ST_TO_ADDR
// if amount < min then
54171: LD_VAR 0 9
54175: PUSH
54176: LD_VAR 0 3
54180: LESS
54181: IFFALSE 54199
// r := r * 2 else
54183: LD_ADDR_VAR 0 7
54187: PUSH
54188: LD_VAR 0 7
54192: PUSH
54193: LD_INT 2
54195: MUL
54196: ST_TO_ADDR
54197: GO 54225
// if amount > max then
54199: LD_VAR 0 9
54203: PUSH
54204: LD_VAR 0 4
54208: GREATER
54209: IFFALSE 54225
// r := r / 2 ;
54211: LD_ADDR_VAR 0 7
54215: PUSH
54216: LD_VAR 0 7
54220: PUSH
54221: LD_INT 2
54223: DIVREAL
54224: ST_TO_ADDR
// time := time / r ;
54225: LD_ADDR_VAR 0 8
54229: PUSH
54230: LD_VAR 0 8
54234: PUSH
54235: LD_VAR 0 7
54239: DIVREAL
54240: ST_TO_ADDR
// if time < 0 then
54241: LD_VAR 0 8
54245: PUSH
54246: LD_INT 0
54248: LESS
54249: IFFALSE 54266
// time := time * - 1 ;
54251: LD_ADDR_VAR 0 8
54255: PUSH
54256: LD_VAR 0 8
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: MUL
54265: ST_TO_ADDR
// wait ( time ) ;
54266: LD_VAR 0 8
54270: PPUSH
54271: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54275: LD_INT 35
54277: PPUSH
54278: LD_INT 875
54280: PPUSH
54281: CALL_OW 12
54285: PPUSH
54286: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54290: LD_INT 1
54292: PPUSH
54293: LD_INT 5
54295: PPUSH
54296: CALL_OW 12
54300: PPUSH
54301: LD_VAR 0 1
54305: PPUSH
54306: LD_INT 1
54308: PPUSH
54309: CALL_OW 55
// end ;
54313: GO 54123
// end ;
54315: LD_VAR 0 5
54319: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54320: LD_INT 0
54322: PPUSH
54323: PPUSH
54324: PPUSH
54325: PPUSH
54326: PPUSH
54327: PPUSH
54328: PPUSH
54329: PPUSH
// if not turrets or not factories then
54330: LD_VAR 0 1
54334: NOT
54335: PUSH
54336: LD_VAR 0 2
54340: NOT
54341: OR
54342: IFFALSE 54346
// exit ;
54344: GO 54653
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54346: LD_ADDR_VAR 0 10
54350: PUSH
54351: LD_INT 5
54353: PUSH
54354: LD_INT 6
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 4
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: PUSH
54374: LD_INT 5
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 24
54388: PUSH
54389: LD_INT 25
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 23
54398: PUSH
54399: LD_INT 27
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 42
54412: PUSH
54413: LD_INT 43
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 44
54422: PUSH
54423: LD_INT 46
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 45
54432: PUSH
54433: LD_INT 47
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: LIST
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: LIST
54449: ST_TO_ADDR
// result := [ ] ;
54450: LD_ADDR_VAR 0 3
54454: PUSH
54455: EMPTY
54456: ST_TO_ADDR
// for i in turrets do
54457: LD_ADDR_VAR 0 4
54461: PUSH
54462: LD_VAR 0 1
54466: PUSH
54467: FOR_IN
54468: IFFALSE 54651
// begin nat := GetNation ( i ) ;
54470: LD_ADDR_VAR 0 7
54474: PUSH
54475: LD_VAR 0 4
54479: PPUSH
54480: CALL_OW 248
54484: ST_TO_ADDR
// weapon := 0 ;
54485: LD_ADDR_VAR 0 8
54489: PUSH
54490: LD_INT 0
54492: ST_TO_ADDR
// if not nat then
54493: LD_VAR 0 7
54497: NOT
54498: IFFALSE 54502
// continue ;
54500: GO 54467
// for j in list [ nat ] do
54502: LD_ADDR_VAR 0 5
54506: PUSH
54507: LD_VAR 0 10
54511: PUSH
54512: LD_VAR 0 7
54516: ARRAY
54517: PUSH
54518: FOR_IN
54519: IFFALSE 54560
// if GetBWeapon ( i ) = j [ 1 ] then
54521: LD_VAR 0 4
54525: PPUSH
54526: CALL_OW 269
54530: PUSH
54531: LD_VAR 0 5
54535: PUSH
54536: LD_INT 1
54538: ARRAY
54539: EQUAL
54540: IFFALSE 54558
// begin weapon := j [ 2 ] ;
54542: LD_ADDR_VAR 0 8
54546: PUSH
54547: LD_VAR 0 5
54551: PUSH
54552: LD_INT 2
54554: ARRAY
54555: ST_TO_ADDR
// break ;
54556: GO 54560
// end ;
54558: GO 54518
54560: POP
54561: POP
// if not weapon then
54562: LD_VAR 0 8
54566: NOT
54567: IFFALSE 54571
// continue ;
54569: GO 54467
// for k in factories do
54571: LD_ADDR_VAR 0 6
54575: PUSH
54576: LD_VAR 0 2
54580: PUSH
54581: FOR_IN
54582: IFFALSE 54647
// begin weapons := AvailableWeaponList ( k ) ;
54584: LD_ADDR_VAR 0 9
54588: PUSH
54589: LD_VAR 0 6
54593: PPUSH
54594: CALL_OW 478
54598: ST_TO_ADDR
// if not weapons then
54599: LD_VAR 0 9
54603: NOT
54604: IFFALSE 54608
// continue ;
54606: GO 54581
// if weapon in weapons then
54608: LD_VAR 0 8
54612: PUSH
54613: LD_VAR 0 9
54617: IN
54618: IFFALSE 54645
// begin result := [ i , weapon ] ;
54620: LD_ADDR_VAR 0 3
54624: PUSH
54625: LD_VAR 0 4
54629: PUSH
54630: LD_VAR 0 8
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: ST_TO_ADDR
// exit ;
54639: POP
54640: POP
54641: POP
54642: POP
54643: GO 54653
// end ; end ;
54645: GO 54581
54647: POP
54648: POP
// end ;
54649: GO 54467
54651: POP
54652: POP
// end ;
54653: LD_VAR 0 3
54657: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54658: LD_INT 0
54660: PPUSH
// if not side or side > 8 then
54661: LD_VAR 0 3
54665: NOT
54666: PUSH
54667: LD_VAR 0 3
54671: PUSH
54672: LD_INT 8
54674: GREATER
54675: OR
54676: IFFALSE 54680
// exit ;
54678: GO 54739
// if not range then
54680: LD_VAR 0 4
54684: NOT
54685: IFFALSE 54696
// range := - 12 ;
54687: LD_ADDR_VAR 0 4
54691: PUSH
54692: LD_INT 12
54694: NEG
54695: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54696: LD_VAR 0 1
54700: PPUSH
54701: LD_VAR 0 2
54705: PPUSH
54706: LD_VAR 0 3
54710: PPUSH
54711: LD_VAR 0 4
54715: PPUSH
54716: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54720: LD_VAR 0 1
54724: PPUSH
54725: LD_VAR 0 2
54729: PPUSH
54730: LD_VAR 0 3
54734: PPUSH
54735: CALL_OW 331
// end ;
54739: LD_VAR 0 5
54743: RET
// export function Video ( mode ) ; begin
54744: LD_INT 0
54746: PPUSH
// ingame_video = mode ;
54747: LD_ADDR_OWVAR 52
54751: PUSH
54752: LD_VAR 0 1
54756: ST_TO_ADDR
// interface_hidden = mode ;
54757: LD_ADDR_OWVAR 54
54761: PUSH
54762: LD_VAR 0 1
54766: ST_TO_ADDR
// end ;
54767: LD_VAR 0 2
54771: RET
// export function Join ( array , element ) ; begin
54772: LD_INT 0
54774: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54775: LD_ADDR_VAR 0 3
54779: PUSH
54780: LD_VAR 0 1
54784: PPUSH
54785: LD_VAR 0 1
54789: PUSH
54790: LD_INT 1
54792: PLUS
54793: PPUSH
54794: LD_VAR 0 2
54798: PPUSH
54799: CALL_OW 1
54803: ST_TO_ADDR
// end ;
54804: LD_VAR 0 3
54808: RET
// export function JoinUnion ( array , element ) ; begin
54809: LD_INT 0
54811: PPUSH
// result := array union element ;
54812: LD_ADDR_VAR 0 3
54816: PUSH
54817: LD_VAR 0 1
54821: PUSH
54822: LD_VAR 0 2
54826: UNION
54827: ST_TO_ADDR
// end ;
54828: LD_VAR 0 3
54832: RET
// export function GetBehemoths ( side ) ; begin
54833: LD_INT 0
54835: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
54836: LD_ADDR_VAR 0 2
54840: PUSH
54841: LD_INT 22
54843: PUSH
54844: LD_VAR 0 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 31
54855: PUSH
54856: LD_INT 25
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PPUSH
54867: CALL_OW 69
54871: ST_TO_ADDR
// end ;
54872: LD_VAR 0 2
54876: RET
// export function Shuffle ( array ) ; var i , index ; begin
54877: LD_INT 0
54879: PPUSH
54880: PPUSH
54881: PPUSH
// result := [ ] ;
54882: LD_ADDR_VAR 0 2
54886: PUSH
54887: EMPTY
54888: ST_TO_ADDR
// if not array then
54889: LD_VAR 0 1
54893: NOT
54894: IFFALSE 54898
// exit ;
54896: GO 54997
// Randomize ;
54898: CALL_OW 10
// for i = array downto 1 do
54902: LD_ADDR_VAR 0 3
54906: PUSH
54907: DOUBLE
54908: LD_VAR 0 1
54912: INC
54913: ST_TO_ADDR
54914: LD_INT 1
54916: PUSH
54917: FOR_DOWNTO
54918: IFFALSE 54995
// begin index := rand ( 1 , array ) ;
54920: LD_ADDR_VAR 0 4
54924: PUSH
54925: LD_INT 1
54927: PPUSH
54928: LD_VAR 0 1
54932: PPUSH
54933: CALL_OW 12
54937: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54938: LD_ADDR_VAR 0 2
54942: PUSH
54943: LD_VAR 0 2
54947: PPUSH
54948: LD_VAR 0 2
54952: PUSH
54953: LD_INT 1
54955: PLUS
54956: PPUSH
54957: LD_VAR 0 1
54961: PUSH
54962: LD_VAR 0 4
54966: ARRAY
54967: PPUSH
54968: CALL_OW 2
54972: ST_TO_ADDR
// array := Delete ( array , index ) ;
54973: LD_ADDR_VAR 0 1
54977: PUSH
54978: LD_VAR 0 1
54982: PPUSH
54983: LD_VAR 0 4
54987: PPUSH
54988: CALL_OW 3
54992: ST_TO_ADDR
// end ;
54993: GO 54917
54995: POP
54996: POP
// end ;
54997: LD_VAR 0 2
55001: RET
// export function GetBaseMaterials ( base ) ; begin
55002: LD_INT 0
55004: PPUSH
// result := [ 0 , 0 , 0 ] ;
55005: LD_ADDR_VAR 0 2
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: LIST
55023: ST_TO_ADDR
// if not base then
55024: LD_VAR 0 1
55028: NOT
55029: IFFALSE 55033
// exit ;
55031: GO 55082
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55033: LD_ADDR_VAR 0 2
55037: PUSH
55038: LD_VAR 0 1
55042: PPUSH
55043: LD_INT 1
55045: PPUSH
55046: CALL_OW 275
55050: PUSH
55051: LD_VAR 0 1
55055: PPUSH
55056: LD_INT 2
55058: PPUSH
55059: CALL_OW 275
55063: PUSH
55064: LD_VAR 0 1
55068: PPUSH
55069: LD_INT 3
55071: PPUSH
55072: CALL_OW 275
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// end ;
55082: LD_VAR 0 2
55086: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55087: LD_INT 0
55089: PPUSH
55090: PPUSH
// result := array ;
55091: LD_ADDR_VAR 0 3
55095: PUSH
55096: LD_VAR 0 1
55100: ST_TO_ADDR
// if size > 0 then
55101: LD_VAR 0 2
55105: PUSH
55106: LD_INT 0
55108: GREATER
55109: IFFALSE 55155
// for i := array downto size do
55111: LD_ADDR_VAR 0 4
55115: PUSH
55116: DOUBLE
55117: LD_VAR 0 1
55121: INC
55122: ST_TO_ADDR
55123: LD_VAR 0 2
55127: PUSH
55128: FOR_DOWNTO
55129: IFFALSE 55153
// result := Delete ( result , result ) ;
55131: LD_ADDR_VAR 0 3
55135: PUSH
55136: LD_VAR 0 3
55140: PPUSH
55141: LD_VAR 0 3
55145: PPUSH
55146: CALL_OW 3
55150: ST_TO_ADDR
55151: GO 55128
55153: POP
55154: POP
// end ;
55155: LD_VAR 0 3
55159: RET
// export function ComExit ( unit ) ; var tmp ; begin
55160: LD_INT 0
55162: PPUSH
55163: PPUSH
// if not IsInUnit ( unit ) then
55164: LD_VAR 0 1
55168: PPUSH
55169: CALL_OW 310
55173: NOT
55174: IFFALSE 55178
// exit ;
55176: GO 55238
// tmp := IsInUnit ( unit ) ;
55178: LD_ADDR_VAR 0 3
55182: PUSH
55183: LD_VAR 0 1
55187: PPUSH
55188: CALL_OW 310
55192: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55193: LD_VAR 0 3
55197: PPUSH
55198: CALL_OW 247
55202: PUSH
55203: LD_INT 2
55205: EQUAL
55206: IFFALSE 55219
// ComExitVehicle ( unit ) else
55208: LD_VAR 0 1
55212: PPUSH
55213: CALL_OW 121
55217: GO 55228
// ComExitBuilding ( unit ) ;
55219: LD_VAR 0 1
55223: PPUSH
55224: CALL_OW 122
// result := tmp ;
55228: LD_ADDR_VAR 0 2
55232: PUSH
55233: LD_VAR 0 3
55237: ST_TO_ADDR
// end ;
55238: LD_VAR 0 2
55242: RET
// export function ResetHc ; begin
55243: LD_INT 0
55245: PPUSH
// InitHc ;
55246: CALL_OW 19
// hc_importance := 0 ;
55250: LD_ADDR_OWVAR 32
55254: PUSH
55255: LD_INT 0
55257: ST_TO_ADDR
// end ;
55258: LD_VAR 0 1
55262: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55263: LD_INT 0
55265: PPUSH
55266: PPUSH
55267: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55268: LD_ADDR_VAR 0 6
55272: PUSH
55273: LD_VAR 0 1
55277: PUSH
55278: LD_VAR 0 3
55282: PLUS
55283: PUSH
55284: LD_INT 2
55286: DIV
55287: ST_TO_ADDR
// if _x < 0 then
55288: LD_VAR 0 6
55292: PUSH
55293: LD_INT 0
55295: LESS
55296: IFFALSE 55313
// _x := _x * - 1 ;
55298: LD_ADDR_VAR 0 6
55302: PUSH
55303: LD_VAR 0 6
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: MUL
55312: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55313: LD_ADDR_VAR 0 7
55317: PUSH
55318: LD_VAR 0 2
55322: PUSH
55323: LD_VAR 0 4
55327: PLUS
55328: PUSH
55329: LD_INT 2
55331: DIV
55332: ST_TO_ADDR
// if _y < 0 then
55333: LD_VAR 0 7
55337: PUSH
55338: LD_INT 0
55340: LESS
55341: IFFALSE 55358
// _y := _y * - 1 ;
55343: LD_ADDR_VAR 0 7
55347: PUSH
55348: LD_VAR 0 7
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: MUL
55357: ST_TO_ADDR
// result := [ _x , _y ] ;
55358: LD_ADDR_VAR 0 5
55362: PUSH
55363: LD_VAR 0 6
55367: PUSH
55368: LD_VAR 0 7
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// end ;
55377: LD_VAR 0 5
55381: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55382: LD_INT 0
55384: PPUSH
55385: PPUSH
55386: PPUSH
55387: PPUSH
// task := GetTaskList ( unit ) ;
55388: LD_ADDR_VAR 0 7
55392: PUSH
55393: LD_VAR 0 1
55397: PPUSH
55398: CALL_OW 437
55402: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55403: LD_VAR 0 7
55407: NOT
55408: PUSH
55409: LD_VAR 0 1
55413: PPUSH
55414: LD_VAR 0 2
55418: PPUSH
55419: CALL_OW 308
55423: NOT
55424: AND
55425: IFFALSE 55429
// exit ;
55427: GO 55547
// if IsInArea ( unit , area ) then
55429: LD_VAR 0 1
55433: PPUSH
55434: LD_VAR 0 2
55438: PPUSH
55439: CALL_OW 308
55443: IFFALSE 55461
// begin ComMoveToArea ( unit , goAway ) ;
55445: LD_VAR 0 1
55449: PPUSH
55450: LD_VAR 0 3
55454: PPUSH
55455: CALL_OW 113
// exit ;
55459: GO 55547
// end ; if task [ 1 ] [ 1 ] <> M then
55461: LD_VAR 0 7
55465: PUSH
55466: LD_INT 1
55468: ARRAY
55469: PUSH
55470: LD_INT 1
55472: ARRAY
55473: PUSH
55474: LD_STRING M
55476: NONEQUAL
55477: IFFALSE 55481
// exit ;
55479: GO 55547
// x := task [ 1 ] [ 2 ] ;
55481: LD_ADDR_VAR 0 5
55485: PUSH
55486: LD_VAR 0 7
55490: PUSH
55491: LD_INT 1
55493: ARRAY
55494: PUSH
55495: LD_INT 2
55497: ARRAY
55498: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55499: LD_ADDR_VAR 0 6
55503: PUSH
55504: LD_VAR 0 7
55508: PUSH
55509: LD_INT 1
55511: ARRAY
55512: PUSH
55513: LD_INT 3
55515: ARRAY
55516: ST_TO_ADDR
// if InArea ( x , y , area ) then
55517: LD_VAR 0 5
55521: PPUSH
55522: LD_VAR 0 6
55526: PPUSH
55527: LD_VAR 0 2
55531: PPUSH
55532: CALL_OW 309
55536: IFFALSE 55547
// ComStop ( unit ) ;
55538: LD_VAR 0 1
55542: PPUSH
55543: CALL_OW 141
// end ;
55547: LD_VAR 0 4
55551: RET
// export function Abs ( value ) ; begin
55552: LD_INT 0
55554: PPUSH
// result := value ;
55555: LD_ADDR_VAR 0 2
55559: PUSH
55560: LD_VAR 0 1
55564: ST_TO_ADDR
// if value < 0 then
55565: LD_VAR 0 1
55569: PUSH
55570: LD_INT 0
55572: LESS
55573: IFFALSE 55590
// result := value * - 1 ;
55575: LD_ADDR_VAR 0 2
55579: PUSH
55580: LD_VAR 0 1
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: MUL
55589: ST_TO_ADDR
// end ;
55590: LD_VAR 0 2
55594: RET
