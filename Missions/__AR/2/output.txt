// export function Attack ( attackers , attackFormula , retreatFormula , captureTanks ) ; var i , j , tag , sol , sci , mech , tanks , veh ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if not attackFormula then
  11: LD_VAR 0 2
  15: NOT
  16: IFFALSE 20
// exit ;
  18: GO 1811
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
  20: LD_ADDR_VAR 0 9
  24: PUSH
  25: LD_VAR 0 1
  29: PPUSH
  30: LD_INT 25
  32: PUSH
  33: LD_INT 1
  35: PUSH
  36: EMPTY
  37: LIST
  38: LIST
  39: PPUSH
  40: CALL_OW 72
  44: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
  45: LD_ADDR_VAR 0 10
  49: PUSH
  50: LD_VAR 0 1
  54: PPUSH
  55: LD_INT 25
  57: PUSH
  58: LD_INT 4
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: PPUSH
  65: CALL_OW 72
  69: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
  70: LD_ADDR_VAR 0 11
  74: PUSH
  75: LD_VAR 0 1
  79: PPUSH
  80: LD_INT 25
  82: PUSH
  83: LD_INT 3
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PPUSH
  90: CALL_OW 72
  94: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
  95: LD_ADDR_VAR 0 12
  99: PUSH
 100: LD_VAR 0 1
 104: PPUSH
 105: LD_INT 21
 107: PUSH
 108: LD_INT 2
 110: PUSH
 111: EMPTY
 112: LIST
 113: LIST
 114: PPUSH
 115: CALL_OW 72
 119: ST_TO_ADDR
// if sci then
 120: LD_VAR 0 10
 124: IFFALSE 161
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 126: LD_VAR 0 10
 130: PPUSH
 131: LD_VAR 0 2
 135: PUSH
 136: LD_INT 2
 138: ARRAY
 139: PUSH
 140: LD_INT 1
 142: ARRAY
 143: PPUSH
 144: LD_VAR 0 2
 148: PUSH
 149: LD_INT 2
 151: ARRAY
 152: PUSH
 153: LD_INT 2
 155: ARRAY
 156: PPUSH
 157: CALL_OW 111
// repeat wait ( 10 ) ;
 161: LD_INT 10
 163: PPUSH
 164: CALL_OW 67
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
 168: LD_ADDR_VAR 0 9
 172: PUSH
 173: LD_VAR 0 1
 177: PPUSH
 178: LD_INT 25
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 72
 192: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
 193: LD_ADDR_VAR 0 10
 197: PUSH
 198: LD_VAR 0 1
 202: PPUSH
 203: LD_INT 25
 205: PUSH
 206: LD_INT 4
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PPUSH
 213: CALL_OW 72
 217: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
 218: LD_ADDR_VAR 0 11
 222: PUSH
 223: LD_VAR 0 1
 227: PPUSH
 228: LD_INT 25
 230: PUSH
 231: LD_INT 3
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PPUSH
 238: CALL_OW 72
 242: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
 243: LD_ADDR_VAR 0 12
 247: PUSH
 248: LD_VAR 0 1
 252: PPUSH
 253: LD_INT 21
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: PPUSH
 263: CALL_OW 72
 267: ST_TO_ADDR
// if sol then
 268: LD_VAR 0 9
 272: IFFALSE 842
// begin for i in sol do
 274: LD_ADDR_VAR 0 6
 278: PUSH
 279: LD_VAR 0 9
 283: PUSH
 284: FOR_IN
 285: IFFALSE 840
// begin tag := GetTag ( i ) ;
 287: LD_ADDR_VAR 0 8
 291: PUSH
 292: LD_VAR 0 6
 296: PPUSH
 297: CALL_OW 110
 301: ST_TO_ADDR
// if not tag then
 302: LD_VAR 0 8
 306: NOT
 307: IFFALSE 416
// begin if GetLives ( i ) = 1000 then
 309: LD_VAR 0 6
 313: PPUSH
 314: CALL_OW 256
 318: PUSH
 319: LD_INT 1000
 321: EQUAL
 322: IFFALSE 338
// SetTag ( i , 1 ) else
 324: LD_VAR 0 6
 328: PPUSH
 329: LD_INT 1
 331: PPUSH
 332: CALL_OW 109
 336: GO 414
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 338: LD_VAR 0 6
 342: PPUSH
 343: LD_VAR 0 2
 347: PUSH
 348: LD_INT 2
 350: ARRAY
 351: PUSH
 352: LD_INT 1
 354: ARRAY
 355: PPUSH
 356: LD_VAR 0 2
 360: PUSH
 361: LD_INT 2
 363: ARRAY
 364: PUSH
 365: LD_INT 2
 367: ARRAY
 368: PPUSH
 369: CALL_OW 297
 373: PUSH
 374: LD_INT 10
 376: GREATER
 377: IFFALSE 414
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 379: LD_VAR 0 6
 383: PPUSH
 384: LD_VAR 0 2
 388: PUSH
 389: LD_INT 2
 391: ARRAY
 392: PUSH
 393: LD_INT 1
 395: ARRAY
 396: PPUSH
 397: LD_VAR 0 2
 401: PUSH
 402: LD_INT 2
 404: ARRAY
 405: PUSH
 406: LD_INT 2
 408: ARRAY
 409: PPUSH
 410: CALL_OW 111
// end else
 414: GO 838
// begin if GetLives ( i ) < 720 then
 416: LD_VAR 0 6
 420: PPUSH
 421: CALL_OW 256
 425: PUSH
 426: LD_INT 720
 428: LESS
 429: IFFALSE 480
// begin SetTag ( i , 0 ) ;
 431: LD_VAR 0 6
 435: PPUSH
 436: LD_INT 0
 438: PPUSH
 439: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 443: LD_VAR 0 6
 447: PPUSH
 448: LD_VAR 0 2
 452: PUSH
 453: LD_INT 2
 455: ARRAY
 456: PUSH
 457: LD_INT 1
 459: ARRAY
 460: PPUSH
 461: LD_VAR 0 2
 465: PUSH
 466: LD_INT 2
 468: ARRAY
 469: PUSH
 470: LD_INT 2
 472: ARRAY
 473: PPUSH
 474: CALL_OW 111
// end else
 478: GO 838
// if tag <= attackFormula [ 1 ] then
 480: LD_VAR 0 8
 484: PUSH
 485: LD_VAR 0 2
 489: PUSH
 490: LD_INT 1
 492: ARRAY
 493: LESSEQUAL
 494: IFFALSE 662
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
 496: LD_VAR 0 6
 500: PPUSH
 501: LD_VAR 0 2
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PUSH
 510: LD_VAR 0 8
 514: ARRAY
 515: PUSH
 516: LD_INT 1
 518: ARRAY
 519: PPUSH
 520: LD_VAR 0 2
 524: PUSH
 525: LD_INT 1
 527: ARRAY
 528: PUSH
 529: LD_VAR 0 8
 533: ARRAY
 534: PUSH
 535: LD_INT 2
 537: ARRAY
 538: PPUSH
 539: CALL_OW 297
 543: PUSH
 544: LD_INT 6
 546: GREATER
 547: IFFALSE 598
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
 549: LD_VAR 0 6
 553: PPUSH
 554: LD_VAR 0 2
 558: PUSH
 559: LD_INT 1
 561: ARRAY
 562: PUSH
 563: LD_VAR 0 8
 567: ARRAY
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_VAR 0 2
 577: PUSH
 578: LD_INT 1
 580: ARRAY
 581: PUSH
 582: LD_VAR 0 8
 586: ARRAY
 587: PUSH
 588: LD_INT 2
 590: ARRAY
 591: PPUSH
 592: CALL_OW 114
 596: GO 660
// if not FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_dist , i , 10 ] ] ) then
 598: LD_INT 81
 600: PUSH
 601: LD_VAR 0 6
 605: PPUSH
 606: CALL_OW 255
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: PUSH
 615: LD_INT 91
 617: PUSH
 618: LD_VAR 0 6
 622: PUSH
 623: LD_INT 10
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: LIST
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PPUSH
 635: CALL_OW 69
 639: NOT
 640: IFFALSE 660
// SetTag ( i , tag + 1 ) ;
 642: LD_VAR 0 6
 646: PPUSH
 647: LD_VAR 0 8
 651: PUSH
 652: LD_INT 1
 654: PLUS
 655: PPUSH
 656: CALL_OW 109
// end else
 660: GO 838
// begin if captureTanks and FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) then
 662: LD_VAR 0 4
 666: PUSH
 667: LD_INT 81
 669: PUSH
 670: LD_VAR 0 6
 674: PPUSH
 675: CALL_OW 255
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 21
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: LD_INT 50
 696: PUSH
 697: EMPTY
 698: LIST
 699: PUSH
 700: LD_INT 91
 702: PUSH
 703: LD_VAR 0 6
 707: PUSH
 708: LD_INT 10
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: PPUSH
 722: CALL_OW 69
 726: AND
 727: IFFALSE 804
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) else
 729: LD_VAR 0 6
 733: PPUSH
 734: LD_INT 81
 736: PUSH
 737: LD_VAR 0 6
 741: PPUSH
 742: CALL_OW 255
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 21
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: PUSH
 761: LD_INT 50
 763: PUSH
 764: EMPTY
 765: LIST
 766: PUSH
 767: LD_INT 91
 769: PUSH
 770: LD_VAR 0 6
 774: PUSH
 775: LD_INT 10
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: PPUSH
 789: CALL_OW 69
 793: PUSH
 794: LD_INT 1
 796: ARRAY
 797: PPUSH
 798: CALL_OW 120
 802: GO 838
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
 804: LD_VAR 0 6
 808: PPUSH
 809: LD_INT 81
 811: PUSH
 812: LD_INT 1
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: PPUSH
 819: CALL_OW 69
 823: PPUSH
 824: LD_VAR 0 6
 828: PPUSH
 829: CALL_OW 74
 833: PPUSH
 834: CALL_OW 115
// end ; end ; end ;
 838: GO 284
 840: POP
 841: POP
// end ; if sci then
 842: LD_VAR 0 10
 846: IFFALSE 1141
// begin if not sol and not mech and retreatFormula then
 848: LD_VAR 0 9
 852: NOT
 853: PUSH
 854: LD_VAR 0 11
 858: NOT
 859: AND
 860: PUSH
 861: LD_VAR 0 3
 865: AND
 866: IFFALSE 938
// begin for i in sci do
 868: LD_ADDR_VAR 0 6
 872: PUSH
 873: LD_VAR 0 10
 877: PUSH
 878: FOR_IN
 879: IFFALSE 934
// begin ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
 881: LD_VAR 0 6
 885: PPUSH
 886: LD_VAR 0 3
 890: PUSH
 891: LD_INT 1
 893: ARRAY
 894: PUSH
 895: LD_INT 1
 897: ARRAY
 898: PPUSH
 899: LD_VAR 0 3
 903: PUSH
 904: LD_INT 1
 906: ARRAY
 907: PUSH
 908: LD_INT 2
 910: ARRAY
 911: PPUSH
 912: CALL_OW 111
// attackers := attackers diff i ;
 916: LD_ADDR_VAR 0 1
 920: PUSH
 921: LD_VAR 0 1
 925: PUSH
 926: LD_VAR 0 6
 930: DIFF
 931: ST_TO_ADDR
// end ;
 932: GO 878
 934: POP
 935: POP
// end else
 936: GO 1141
// for i in sci do
 938: LD_ADDR_VAR 0 6
 942: PUSH
 943: LD_VAR 0 10
 947: PUSH
 948: FOR_IN
 949: IFFALSE 1139
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 951: LD_VAR 0 6
 955: PPUSH
 956: LD_VAR 0 2
 960: PUSH
 961: LD_INT 2
 963: ARRAY
 964: PUSH
 965: LD_INT 1
 967: ARRAY
 968: PPUSH
 969: LD_VAR 0 2
 973: PUSH
 974: LD_INT 2
 976: ARRAY
 977: PUSH
 978: LD_INT 2
 980: ARRAY
 981: PPUSH
 982: CALL_OW 297
 986: PUSH
 987: LD_INT 10
 989: GREATER
 990: IFFALSE 1029
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
 992: LD_VAR 0 6
 996: PPUSH
 997: LD_VAR 0 2
1001: PUSH
1002: LD_INT 2
1004: ARRAY
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PPUSH
1010: LD_VAR 0 2
1014: PUSH
1015: LD_INT 2
1017: ARRAY
1018: PUSH
1019: LD_INT 2
1021: ARRAY
1022: PPUSH
1023: CALL_OW 111
1027: GO 1137
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
1029: LD_VAR 0 9
1033: PPUSH
1034: LD_INT 3
1036: PUSH
1037: LD_INT 24
1039: PUSH
1040: LD_INT 1000
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: PUSH
1051: LD_INT 91
1053: PUSH
1054: LD_VAR 0 6
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PPUSH
1071: CALL_OW 72
1075: IFFALSE 1137
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
1077: LD_VAR 0 6
1081: PPUSH
1082: LD_VAR 0 9
1086: PPUSH
1087: LD_INT 3
1089: PUSH
1090: LD_INT 24
1092: PUSH
1093: LD_INT 1000
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: LD_INT 91
1106: PUSH
1107: LD_VAR 0 6
1111: PUSH
1112: LD_INT 10
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PPUSH
1124: CALL_OW 72
1128: PUSH
1129: LD_INT 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 128
1137: GO 948
1139: POP
1140: POP
// end ; if mech then
1141: LD_VAR 0 11
1145: IFFALSE 1793
// begin for i in mech do
1147: LD_ADDR_VAR 0 6
1151: PUSH
1152: LD_VAR 0 11
1156: PUSH
1157: FOR_IN
1158: IFFALSE 1791
// begin tag := GetTag ( i ) ;
1160: LD_ADDR_VAR 0 8
1164: PUSH
1165: LD_VAR 0 6
1169: PPUSH
1170: CALL_OW 110
1174: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
1175: LD_ADDR_VAR 0 13
1179: PUSH
1180: LD_VAR 0 6
1184: PPUSH
1185: CALL_OW 310
1189: ST_TO_ADDR
// if not tag then
1190: LD_VAR 0 8
1194: NOT
1195: IFFALSE 1497
// begin if veh then
1197: LD_VAR 0 13
1201: IFFALSE 1335
// begin if GetLives ( veh ) = 1000 then
1203: LD_VAR 0 13
1207: PPUSH
1208: CALL_OW 256
1212: PUSH
1213: LD_INT 1000
1215: EQUAL
1216: IFFALSE 1232
// SetTag ( i , 1 ) else
1218: LD_VAR 0 6
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: CALL_OW 109
1230: GO 1333
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
1232: LD_VAR 0 13
1236: PPUSH
1237: LD_VAR 0 2
1241: PUSH
1242: LD_INT 3
1244: ARRAY
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_VAR 0 2
1254: PUSH
1255: LD_INT 3
1257: ARRAY
1258: PUSH
1259: LD_INT 2
1261: ARRAY
1262: PPUSH
1263: CALL_OW 297
1267: PUSH
1268: LD_INT 7
1270: GREATER
1271: IFFALSE 1310
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
1273: LD_VAR 0 13
1277: PPUSH
1278: LD_VAR 0 2
1282: PUSH
1283: LD_INT 3
1285: ARRAY
1286: PUSH
1287: LD_INT 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 2
1295: PUSH
1296: LD_INT 3
1298: ARRAY
1299: PUSH
1300: LD_INT 2
1302: ARRAY
1303: PPUSH
1304: CALL_OW 111
1308: GO 1333
// begin ComExitVehicle ( i ) ;
1310: LD_VAR 0 6
1314: PPUSH
1315: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
1319: LD_VAR 0 6
1323: PPUSH
1324: LD_VAR 0 13
1328: PPUSH
1329: CALL_OW 189
// end ; end else
1333: GO 1495
// if GetLives ( i ) < 400 then
1335: LD_VAR 0 6
1339: PPUSH
1340: CALL_OW 256
1344: PUSH
1345: LD_INT 400
1347: LESS
1348: IFFALSE 1403
// begin attackers := attackers diff i ;
1350: LD_ADDR_VAR 0 1
1354: PUSH
1355: LD_VAR 0 1
1359: PUSH
1360: LD_VAR 0 6
1364: DIFF
1365: ST_TO_ADDR
// ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
1366: LD_VAR 0 6
1370: PPUSH
1371: LD_VAR 0 3
1375: PUSH
1376: LD_INT 1
1378: ARRAY
1379: PUSH
1380: LD_INT 1
1382: ARRAY
1383: PPUSH
1384: LD_VAR 0 3
1388: PUSH
1389: LD_INT 1
1391: ARRAY
1392: PUSH
1393: LD_INT 2
1395: ARRAY
1396: PPUSH
1397: CALL_OW 111
// end else
1401: GO 1495
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
1403: LD_VAR 0 12
1407: PPUSH
1408: LD_INT 58
1410: PUSH
1411: EMPTY
1412: LIST
1413: PUSH
1414: LD_INT 24
1416: PUSH
1417: LD_INT 1000
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PPUSH
1428: CALL_OW 72
1432: PUSH
1433: LD_VAR 0 6
1437: PPUSH
1438: CALL_OW 314
1442: NOT
1443: AND
1444: IFFALSE 1495
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
1446: LD_VAR 0 6
1450: PPUSH
1451: LD_VAR 0 12
1455: PPUSH
1456: LD_INT 58
1458: PUSH
1459: EMPTY
1460: LIST
1461: PUSH
1462: LD_INT 24
1464: PUSH
1465: LD_INT 250
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PPUSH
1476: CALL_OW 72
1480: PPUSH
1481: LD_VAR 0 6
1485: PPUSH
1486: CALL_OW 74
1490: PPUSH
1491: CALL_OW 120
// end else
1495: GO 1789
// begin if veh and GetLives ( veh ) < 720 then
1497: LD_VAR 0 13
1501: PUSH
1502: LD_VAR 0 13
1506: PPUSH
1507: CALL_OW 256
1511: PUSH
1512: LD_INT 720
1514: LESS
1515: AND
1516: IFFALSE 1567
// begin SetTag ( i , 0 ) ;
1518: LD_VAR 0 6
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
1530: LD_VAR 0 13
1534: PPUSH
1535: LD_VAR 0 2
1539: PUSH
1540: LD_INT 3
1542: ARRAY
1543: PUSH
1544: LD_INT 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 3
1555: ARRAY
1556: PUSH
1557: LD_INT 2
1559: ARRAY
1560: PPUSH
1561: CALL_OW 111
// end else
1565: GO 1789
// if veh then
1567: LD_VAR 0 13
1571: IFFALSE 1789
// if tag <= attackFormula [ 4 ] then
1573: LD_VAR 0 8
1577: PUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 4
1585: ARRAY
1586: LESSEQUAL
1587: IFFALSE 1748
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
1589: LD_VAR 0 13
1593: PPUSH
1594: LD_VAR 0 2
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PUSH
1603: LD_VAR 0 8
1607: ARRAY
1608: PUSH
1609: LD_INT 1
1611: ARRAY
1612: PPUSH
1613: LD_VAR 0 2
1617: PUSH
1618: LD_INT 4
1620: ARRAY
1621: PUSH
1622: LD_VAR 0 8
1626: ARRAY
1627: PUSH
1628: LD_INT 2
1630: ARRAY
1631: PPUSH
1632: CALL_OW 297
1636: PUSH
1637: LD_INT 6
1639: GREATER
1640: IFFALSE 1691
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
1642: LD_VAR 0 13
1646: PPUSH
1647: LD_VAR 0 2
1651: PUSH
1652: LD_INT 4
1654: ARRAY
1655: PUSH
1656: LD_VAR 0 8
1660: ARRAY
1661: PUSH
1662: LD_INT 1
1664: ARRAY
1665: PPUSH
1666: LD_VAR 0 2
1670: PUSH
1671: LD_INT 4
1673: ARRAY
1674: PUSH
1675: LD_VAR 0 8
1679: ARRAY
1680: PUSH
1681: LD_INT 2
1683: ARRAY
1684: PPUSH
1685: CALL_OW 114
1689: GO 1746
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
1691: LD_INT 81
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 91
1703: PUSH
1704: LD_VAR 0 13
1708: PUSH
1709: LD_INT 10
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PPUSH
1721: CALL_OW 69
1725: NOT
1726: IFFALSE 1746
// SetTag ( i , tag + 1 ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_VAR 0 8
1737: PUSH
1738: LD_INT 1
1740: PLUS
1741: PPUSH
1742: CALL_OW 109
// end else
1746: GO 1789
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1748: LD_VAR 0 13
1752: PPUSH
1753: LD_INT 81
1755: PUSH
1756: LD_VAR 0 6
1760: PPUSH
1761: CALL_OW 255
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PPUSH
1770: CALL_OW 69
1774: PPUSH
1775: LD_VAR 0 6
1779: PPUSH
1780: CALL_OW 74
1784: PPUSH
1785: CALL_OW 115
// end ; end ;
1789: GO 1157
1791: POP
1792: POP
// end ; until not UnitFilter ( attackers , [ f_placed ] ) ;
1793: LD_VAR 0 1
1797: PPUSH
1798: LD_INT 52
1800: PUSH
1801: EMPTY
1802: LIST
1803: PPUSH
1804: CALL_OW 72
1808: NOT
1809: IFFALSE 161
// end ; end_of_file
1811: LD_VAR 0 5
1815: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
1816: LD_INT 0
1818: PPUSH
// ar_miner := 81 ;
1819: LD_ADDR_EXP 8
1823: PUSH
1824: LD_INT 81
1826: ST_TO_ADDR
// ar_crane := 88 ;
1827: LD_ADDR_EXP 7
1831: PUSH
1832: LD_INT 88
1834: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1835: LD_ADDR_EXP 2
1839: PUSH
1840: LD_INT 89
1842: ST_TO_ADDR
// us_hack := 99 ;
1843: LD_ADDR_EXP 3
1847: PUSH
1848: LD_INT 99
1850: ST_TO_ADDR
// us_artillery := 97 ;
1851: LD_ADDR_EXP 4
1855: PUSH
1856: LD_INT 97
1858: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1859: LD_ADDR_EXP 5
1863: PUSH
1864: LD_INT 91
1866: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
1867: LD_ADDR_EXP 6
1871: PUSH
1872: LD_INT 92
1874: ST_TO_ADDR
// ru_radar := 98 ;
1875: LD_ADDR_EXP 1
1879: PUSH
1880: LD_INT 98
1882: ST_TO_ADDR
// tech_Artillery := 80 ;
1883: LD_ADDR_EXP 9
1887: PUSH
1888: LD_INT 80
1890: ST_TO_ADDR
// tech_RadMat := 81 ;
1891: LD_ADDR_EXP 10
1895: PUSH
1896: LD_INT 81
1898: ST_TO_ADDR
// tech_BasicTools := 82 ;
1899: LD_ADDR_EXP 11
1903: PUSH
1904: LD_INT 82
1906: ST_TO_ADDR
// tech_Cargo := 83 ;
1907: LD_ADDR_EXP 12
1911: PUSH
1912: LD_INT 83
1914: ST_TO_ADDR
// tech_Track := 84 ;
1915: LD_ADDR_EXP 13
1919: PUSH
1920: LD_INT 84
1922: ST_TO_ADDR
// tech_Crane := 85 ;
1923: LD_ADDR_EXP 14
1927: PUSH
1928: LD_INT 85
1930: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1931: LD_ADDR_EXP 15
1935: PUSH
1936: LD_INT 86
1938: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1939: LD_ADDR_EXP 16
1943: PUSH
1944: LD_INT 87
1946: ST_TO_ADDR
// end ;
1947: LD_VAR 0 1
1951: RET
// every 1 do
1952: GO 1954
1954: DISABLE
// InitGlobalVariables ; end_of_file
1955: CALL 1816 0 0
1959: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
1960: LD_VAR 0 2
1964: PUSH
1965: LD_INT 100
1967: EQUAL
1968: IFFALSE 2917
// begin if not StreamModeActive then
1970: LD_EXP 17
1974: NOT
1975: IFFALSE 1985
// StreamModeActive := true ;
1977: LD_ADDR_EXP 17
1981: PUSH
1982: LD_INT 1
1984: ST_TO_ADDR
// if p3 = 0 then
1985: LD_VAR 0 3
1989: PUSH
1990: LD_INT 0
1992: EQUAL
1993: IFFALSE 1999
// InitStreamMode ;
1995: CALL 3075 0 0
// if p3 = 1 then
1999: LD_VAR 0 3
2003: PUSH
2004: LD_INT 1
2006: EQUAL
2007: IFFALSE 2017
// sRocket := true ;
2009: LD_ADDR_EXP 22
2013: PUSH
2014: LD_INT 1
2016: ST_TO_ADDR
// if p3 = 2 then
2017: LD_VAR 0 3
2021: PUSH
2022: LD_INT 2
2024: EQUAL
2025: IFFALSE 2035
// sSpeed := true ;
2027: LD_ADDR_EXP 21
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// if p3 = 3 then
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 3
2042: EQUAL
2043: IFFALSE 2053
// sEngine := true ;
2045: LD_ADDR_EXP 23
2049: PUSH
2050: LD_INT 1
2052: ST_TO_ADDR
// if p3 = 4 then
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 4
2060: EQUAL
2061: IFFALSE 2071
// sSpec := true ;
2063: LD_ADDR_EXP 20
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// if p3 = 5 then
2071: LD_VAR 0 3
2075: PUSH
2076: LD_INT 5
2078: EQUAL
2079: IFFALSE 2089
// sLevel := true ;
2081: LD_ADDR_EXP 24
2085: PUSH
2086: LD_INT 1
2088: ST_TO_ADDR
// if p3 = 6 then
2089: LD_VAR 0 3
2093: PUSH
2094: LD_INT 6
2096: EQUAL
2097: IFFALSE 2107
// sArmoury := true ;
2099: LD_ADDR_EXP 25
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// if p3 = 7 then
2107: LD_VAR 0 3
2111: PUSH
2112: LD_INT 7
2114: EQUAL
2115: IFFALSE 2125
// sRadar := true ;
2117: LD_ADDR_EXP 26
2121: PUSH
2122: LD_INT 1
2124: ST_TO_ADDR
// if p3 = 8 then
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 8
2132: EQUAL
2133: IFFALSE 2143
// sBunker := true ;
2135: LD_ADDR_EXP 27
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// if p3 = 9 then
2143: LD_VAR 0 3
2147: PUSH
2148: LD_INT 9
2150: EQUAL
2151: IFFALSE 2161
// sHack := true ;
2153: LD_ADDR_EXP 28
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// if p3 = 10 then
2161: LD_VAR 0 3
2165: PUSH
2166: LD_INT 10
2168: EQUAL
2169: IFFALSE 2179
// sFire := true ;
2171: LD_ADDR_EXP 29
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// if p3 = 11 then
2179: LD_VAR 0 3
2183: PUSH
2184: LD_INT 11
2186: EQUAL
2187: IFFALSE 2197
// sRefresh := true ;
2189: LD_ADDR_EXP 30
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// if p3 = 12 then
2197: LD_VAR 0 3
2201: PUSH
2202: LD_INT 12
2204: EQUAL
2205: IFFALSE 2215
// sExp := true ;
2207: LD_ADDR_EXP 31
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// if p3 = 13 then
2215: LD_VAR 0 3
2219: PUSH
2220: LD_INT 13
2222: EQUAL
2223: IFFALSE 2233
// sDepot := true ;
2225: LD_ADDR_EXP 32
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// if p3 = 14 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 14
2240: EQUAL
2241: IFFALSE 2251
// sFlag := true ;
2243: LD_ADDR_EXP 33
2247: PUSH
2248: LD_INT 1
2250: ST_TO_ADDR
// if p3 = 15 then
2251: LD_VAR 0 3
2255: PUSH
2256: LD_INT 15
2258: EQUAL
2259: IFFALSE 2269
// sKamikadze := true ;
2261: LD_ADDR_EXP 41
2265: PUSH
2266: LD_INT 1
2268: ST_TO_ADDR
// if p3 = 16 then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_INT 16
2276: EQUAL
2277: IFFALSE 2287
// sTroll := true ;
2279: LD_ADDR_EXP 42
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// if p3 = 17 then
2287: LD_VAR 0 3
2291: PUSH
2292: LD_INT 17
2294: EQUAL
2295: IFFALSE 2305
// sSlow := true ;
2297: LD_ADDR_EXP 43
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// if p3 = 18 then
2305: LD_VAR 0 3
2309: PUSH
2310: LD_INT 18
2312: EQUAL
2313: IFFALSE 2323
// sLack := true ;
2315: LD_ADDR_EXP 44
2319: PUSH
2320: LD_INT 1
2322: ST_TO_ADDR
// if p3 = 19 then
2323: LD_VAR 0 3
2327: PUSH
2328: LD_INT 19
2330: EQUAL
2331: IFFALSE 2341
// sTank := true ;
2333: LD_ADDR_EXP 46
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// if p3 = 20 then
2341: LD_VAR 0 3
2345: PUSH
2346: LD_INT 20
2348: EQUAL
2349: IFFALSE 2359
// sRemote := true ;
2351: LD_ADDR_EXP 47
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// if p3 = 21 then
2359: LD_VAR 0 3
2363: PUSH
2364: LD_INT 21
2366: EQUAL
2367: IFFALSE 2377
// sPowell := true ;
2369: LD_ADDR_EXP 48
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// if p3 = 22 then
2377: LD_VAR 0 3
2381: PUSH
2382: LD_INT 22
2384: EQUAL
2385: IFFALSE 2395
// sTeleport := true ;
2387: LD_ADDR_EXP 51
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// if p3 = 23 then
2395: LD_VAR 0 3
2399: PUSH
2400: LD_INT 23
2402: EQUAL
2403: IFFALSE 2413
// sOilTower := true ;
2405: LD_ADDR_EXP 53
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// if p3 = 24 then
2413: LD_VAR 0 3
2417: PUSH
2418: LD_INT 24
2420: EQUAL
2421: IFFALSE 2431
// sShovel := true ;
2423: LD_ADDR_EXP 54
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// if p3 = 25 then
2431: LD_VAR 0 3
2435: PUSH
2436: LD_INT 25
2438: EQUAL
2439: IFFALSE 2449
// sSheik := true ;
2441: LD_ADDR_EXP 55
2445: PUSH
2446: LD_INT 1
2448: ST_TO_ADDR
// if p3 = 26 then
2449: LD_VAR 0 3
2453: PUSH
2454: LD_INT 26
2456: EQUAL
2457: IFFALSE 2467
// sEarthquake := true ;
2459: LD_ADDR_EXP 57
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// if p3 = 27 then
2467: LD_VAR 0 3
2471: PUSH
2472: LD_INT 27
2474: EQUAL
2475: IFFALSE 2485
// sAI := true ;
2477: LD_ADDR_EXP 58
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// if p3 = 28 then
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 28
2492: EQUAL
2493: IFFALSE 2503
// sCargo := true ;
2495: LD_ADDR_EXP 61
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// if p3 = 29 then
2503: LD_VAR 0 3
2507: PUSH
2508: LD_INT 29
2510: EQUAL
2511: IFFALSE 2521
// sDLaser := true ;
2513: LD_ADDR_EXP 62
2517: PUSH
2518: LD_INT 1
2520: ST_TO_ADDR
// if p3 = 30 then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_INT 30
2528: EQUAL
2529: IFFALSE 2539
// sExchange := true ;
2531: LD_ADDR_EXP 63
2535: PUSH
2536: LD_INT 1
2538: ST_TO_ADDR
// if p3 = 31 then
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 31
2546: EQUAL
2547: IFFALSE 2557
// sFac := true ;
2549: LD_ADDR_EXP 64
2553: PUSH
2554: LD_INT 1
2556: ST_TO_ADDR
// if p3 = 32 then
2557: LD_VAR 0 3
2561: PUSH
2562: LD_INT 32
2564: EQUAL
2565: IFFALSE 2575
// sPower := true ;
2567: LD_ADDR_EXP 65
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// if p3 = 33 then
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 33
2582: EQUAL
2583: IFFALSE 2593
// sRandom := true ;
2585: LD_ADDR_EXP 66
2589: PUSH
2590: LD_INT 1
2592: ST_TO_ADDR
// if p3 = 34 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 34
2600: EQUAL
2601: IFFALSE 2611
// sShield := true ;
2603: LD_ADDR_EXP 67
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// if p3 = 35 then
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 35
2618: EQUAL
2619: IFFALSE 2629
// sTime := true ;
2621: LD_ADDR_EXP 68
2625: PUSH
2626: LD_INT 1
2628: ST_TO_ADDR
// if p3 = 36 then
2629: LD_VAR 0 3
2633: PUSH
2634: LD_INT 36
2636: EQUAL
2637: IFFALSE 2647
// sTools := true ;
2639: LD_ADDR_EXP 69
2643: PUSH
2644: LD_INT 1
2646: ST_TO_ADDR
// if p3 = 101 then
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 101
2654: EQUAL
2655: IFFALSE 2665
// sSold := true ;
2657: LD_ADDR_EXP 34
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// if p3 = 102 then
2665: LD_VAR 0 3
2669: PUSH
2670: LD_INT 102
2672: EQUAL
2673: IFFALSE 2683
// sDiff := true ;
2675: LD_ADDR_EXP 35
2679: PUSH
2680: LD_INT 1
2682: ST_TO_ADDR
// if p3 = 103 then
2683: LD_VAR 0 3
2687: PUSH
2688: LD_INT 103
2690: EQUAL
2691: IFFALSE 2701
// sFog := true ;
2693: LD_ADDR_EXP 38
2697: PUSH
2698: LD_INT 1
2700: ST_TO_ADDR
// if p3 = 104 then
2701: LD_VAR 0 3
2705: PUSH
2706: LD_INT 104
2708: EQUAL
2709: IFFALSE 2719
// sReset := true ;
2711: LD_ADDR_EXP 39
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// if p3 = 105 then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 105
2726: EQUAL
2727: IFFALSE 2737
// sSun := true ;
2729: LD_ADDR_EXP 40
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// if p3 = 106 then
2737: LD_VAR 0 3
2741: PUSH
2742: LD_INT 106
2744: EQUAL
2745: IFFALSE 2755
// sTiger := true ;
2747: LD_ADDR_EXP 36
2751: PUSH
2752: LD_INT 1
2754: ST_TO_ADDR
// if p3 = 107 then
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 107
2762: EQUAL
2763: IFFALSE 2773
// sBomb := true ;
2765: LD_ADDR_EXP 37
2769: PUSH
2770: LD_INT 1
2772: ST_TO_ADDR
// if p3 = 108 then
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 108
2780: EQUAL
2781: IFFALSE 2791
// sWound := true ;
2783: LD_ADDR_EXP 45
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// if p3 = 109 then
2791: LD_VAR 0 3
2795: PUSH
2796: LD_INT 109
2798: EQUAL
2799: IFFALSE 2809
// sBetray := true ;
2801: LD_ADDR_EXP 49
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// if p3 = 110 then
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 110
2816: EQUAL
2817: IFFALSE 2827
// sContamin := true ;
2819: LD_ADDR_EXP 50
2823: PUSH
2824: LD_INT 1
2826: ST_TO_ADDR
// if p3 = 111 then
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 111
2834: EQUAL
2835: IFFALSE 2845
// sOil := true ;
2837: LD_ADDR_EXP 52
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// if p3 = 112 then
2845: LD_VAR 0 3
2849: PUSH
2850: LD_INT 112
2852: EQUAL
2853: IFFALSE 2863
// sStu := true ;
2855: LD_ADDR_EXP 56
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// if p3 = 113 then
2863: LD_VAR 0 3
2867: PUSH
2868: LD_INT 113
2870: EQUAL
2871: IFFALSE 2881
// sBazooka := true ;
2873: LD_ADDR_EXP 59
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// if p3 = 114 then
2881: LD_VAR 0 3
2885: PUSH
2886: LD_INT 114
2888: EQUAL
2889: IFFALSE 2899
// sMortar := true ;
2891: LD_ADDR_EXP 60
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// if p3 = 115 then
2899: LD_VAR 0 3
2903: PUSH
2904: LD_INT 115
2906: EQUAL
2907: IFFALSE 2917
// sRanger := true ;
2909: LD_ADDR_EXP 70
2913: PUSH
2914: LD_INT 1
2916: ST_TO_ADDR
// end ; if p2 = 101 then
2917: LD_VAR 0 2
2921: PUSH
2922: LD_INT 101
2924: EQUAL
2925: IFFALSE 3053
// begin case p3 of 1 :
2927: LD_VAR 0 3
2931: PUSH
2932: LD_INT 1
2934: DOUBLE
2935: EQUAL
2936: IFTRUE 2940
2938: GO 2947
2940: POP
// hHackUnlimitedResources ; 2 :
2941: CALL 14088 0 0
2945: GO 3053
2947: LD_INT 2
2949: DOUBLE
2950: EQUAL
2951: IFTRUE 2955
2953: GO 2962
2955: POP
// hHackSetLevel10 ; 3 :
2956: CALL 14221 0 0
2960: GO 3053
2962: LD_INT 3
2964: DOUBLE
2965: EQUAL
2966: IFTRUE 2970
2968: GO 2977
2970: POP
// hHackSetLevel10YourUnits ; 4 :
2971: CALL 14306 0 0
2975: GO 3053
2977: LD_INT 4
2979: DOUBLE
2980: EQUAL
2981: IFTRUE 2985
2983: GO 2992
2985: POP
// hHackInvincible ; 5 :
2986: CALL 14754 0 0
2990: GO 3053
2992: LD_INT 5
2994: DOUBLE
2995: EQUAL
2996: IFTRUE 3000
2998: GO 3007
3000: POP
// hHackInvisible ; 6 :
3001: CALL 14865 0 0
3005: GO 3053
3007: LD_INT 6
3009: DOUBLE
3010: EQUAL
3011: IFTRUE 3015
3013: GO 3022
3015: POP
// hHackChangeYourSide ; 7 :
3016: CALL 14922 0 0
3020: GO 3053
3022: LD_INT 7
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3037
3030: POP
// hHackChangeUnitSide ; 8 :
3031: CALL 14964 0 0
3035: GO 3053
3037: LD_INT 8
3039: DOUBLE
3040: EQUAL
3041: IFTRUE 3045
3043: GO 3052
3045: POP
// hHackFog ; end ;
3046: CALL 15065 0 0
3050: GO 3053
3052: POP
// end ; end ;
3053: PPOPN 6
3055: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3056: GO 3058
3058: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3059: LD_STRING initStreamRollete();
3061: PPUSH
3062: CALL_OW 559
// InitStreamMode ;
3066: CALL 3075 0 0
// DefineStreamItems ( ) ;
3070: CALL 3515 0 0
// end ;
3074: END
// function InitStreamMode ; begin
3075: LD_INT 0
3077: PPUSH
// streamModeActive := false ;
3078: LD_ADDR_EXP 17
3082: PUSH
3083: LD_INT 0
3085: ST_TO_ADDR
// normalCounter := 36 ;
3086: LD_ADDR_EXP 18
3090: PUSH
3091: LD_INT 36
3093: ST_TO_ADDR
// hardcoreCounter := 16 ;
3094: LD_ADDR_EXP 19
3098: PUSH
3099: LD_INT 16
3101: ST_TO_ADDR
// sRocket := false ;
3102: LD_ADDR_EXP 22
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// sSpeed := false ;
3110: LD_ADDR_EXP 21
3114: PUSH
3115: LD_INT 0
3117: ST_TO_ADDR
// sEngine := false ;
3118: LD_ADDR_EXP 23
3122: PUSH
3123: LD_INT 0
3125: ST_TO_ADDR
// sSpec := false ;
3126: LD_ADDR_EXP 20
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// sLevel := false ;
3134: LD_ADDR_EXP 24
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// sArmoury := false ;
3142: LD_ADDR_EXP 25
3146: PUSH
3147: LD_INT 0
3149: ST_TO_ADDR
// sRadar := false ;
3150: LD_ADDR_EXP 26
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// sBunker := false ;
3158: LD_ADDR_EXP 27
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// sHack := false ;
3166: LD_ADDR_EXP 28
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// sFire := false ;
3174: LD_ADDR_EXP 29
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// sRefresh := false ;
3182: LD_ADDR_EXP 30
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// sExp := false ;
3190: LD_ADDR_EXP 31
3194: PUSH
3195: LD_INT 0
3197: ST_TO_ADDR
// sDepot := false ;
3198: LD_ADDR_EXP 32
3202: PUSH
3203: LD_INT 0
3205: ST_TO_ADDR
// sFlag := false ;
3206: LD_ADDR_EXP 33
3210: PUSH
3211: LD_INT 0
3213: ST_TO_ADDR
// sKamikadze := false ;
3214: LD_ADDR_EXP 41
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// sTroll := false ;
3222: LD_ADDR_EXP 42
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// sSlow := false ;
3230: LD_ADDR_EXP 43
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// sLack := false ;
3238: LD_ADDR_EXP 44
3242: PUSH
3243: LD_INT 0
3245: ST_TO_ADDR
// sTank := false ;
3246: LD_ADDR_EXP 46
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// sRemote := false ;
3254: LD_ADDR_EXP 47
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// sPowell := false ;
3262: LD_ADDR_EXP 48
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// sTeleport := false ;
3270: LD_ADDR_EXP 51
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// sOilTower := false ;
3278: LD_ADDR_EXP 53
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sShovel := false ;
3286: LD_ADDR_EXP 54
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sSheik := false ;
3294: LD_ADDR_EXP 55
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sEarthquake := false ;
3302: LD_ADDR_EXP 57
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sAI := false ;
3310: LD_ADDR_EXP 58
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sCargo := false ;
3318: LD_ADDR_EXP 61
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sDLaser := false ;
3326: LD_ADDR_EXP 62
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sExchange := false ;
3334: LD_ADDR_EXP 63
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sFac := false ;
3342: LD_ADDR_EXP 64
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sPower := false ;
3350: LD_ADDR_EXP 65
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sRandom := false ;
3358: LD_ADDR_EXP 66
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sShield := false ;
3366: LD_ADDR_EXP 67
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sTime := false ;
3374: LD_ADDR_EXP 68
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// sTools := false ;
3382: LD_ADDR_EXP 69
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// sSold := false ;
3390: LD_ADDR_EXP 34
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// sDiff := false ;
3398: LD_ADDR_EXP 35
3402: PUSH
3403: LD_INT 0
3405: ST_TO_ADDR
// sFog := false ;
3406: LD_ADDR_EXP 38
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// sReset := false ;
3414: LD_ADDR_EXP 39
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// sSun := false ;
3422: LD_ADDR_EXP 40
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// sTiger := false ;
3430: LD_ADDR_EXP 36
3434: PUSH
3435: LD_INT 0
3437: ST_TO_ADDR
// sBomb := false ;
3438: LD_ADDR_EXP 37
3442: PUSH
3443: LD_INT 0
3445: ST_TO_ADDR
// sWound := false ;
3446: LD_ADDR_EXP 45
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// sBetray := false ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
// sContamin := false ;
3462: LD_ADDR_EXP 50
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// sOil := false ;
3470: LD_ADDR_EXP 52
3474: PUSH
3475: LD_INT 0
3477: ST_TO_ADDR
// sStu := false ;
3478: LD_ADDR_EXP 56
3482: PUSH
3483: LD_INT 0
3485: ST_TO_ADDR
// sBazooka := false ;
3486: LD_ADDR_EXP 59
3490: PUSH
3491: LD_INT 0
3493: ST_TO_ADDR
// sMortar := false ;
3494: LD_ADDR_EXP 60
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// sRanger := false ;
3502: LD_ADDR_EXP 70
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// end ;
3510: LD_VAR 0 1
3514: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3515: LD_INT 0
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// result := [ ] ;
3522: LD_ADDR_VAR 0 1
3526: PUSH
3527: EMPTY
3528: ST_TO_ADDR
// if campaign_id = 1 then
3529: LD_OWVAR 69
3533: PUSH
3534: LD_INT 1
3536: EQUAL
3537: IFFALSE 6475
// begin case mission_number of 1 :
3539: LD_OWVAR 70
3543: PUSH
3544: LD_INT 1
3546: DOUBLE
3547: EQUAL
3548: IFTRUE 3552
3550: GO 3616
3552: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3553: LD_ADDR_VAR 0 1
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: LD_INT 4
3563: PUSH
3564: LD_INT 11
3566: PUSH
3567: LD_INT 12
3569: PUSH
3570: LD_INT 15
3572: PUSH
3573: LD_INT 16
3575: PUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 23
3581: PUSH
3582: LD_INT 26
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 101
3598: PUSH
3599: LD_INT 102
3601: PUSH
3602: LD_INT 106
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: ST_TO_ADDR
3614: GO 6473
3616: LD_INT 2
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3696
3624: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3625: LD_ADDR_VAR 0 1
3629: PUSH
3630: LD_INT 2
3632: PUSH
3633: LD_INT 4
3635: PUSH
3636: LD_INT 11
3638: PUSH
3639: LD_INT 12
3641: PUSH
3642: LD_INT 15
3644: PUSH
3645: LD_INT 16
3647: PUSH
3648: LD_INT 22
3650: PUSH
3651: LD_INT 23
3653: PUSH
3654: LD_INT 26
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 101
3670: PUSH
3671: LD_INT 102
3673: PUSH
3674: LD_INT 105
3676: PUSH
3677: LD_INT 106
3679: PUSH
3680: LD_INT 108
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: ST_TO_ADDR
3694: GO 6473
3696: LD_INT 3
3698: DOUBLE
3699: EQUAL
3700: IFTRUE 3704
3702: GO 3780
3704: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3705: LD_ADDR_VAR 0 1
3709: PUSH
3710: LD_INT 2
3712: PUSH
3713: LD_INT 4
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: LD_INT 11
3721: PUSH
3722: LD_INT 12
3724: PUSH
3725: LD_INT 15
3727: PUSH
3728: LD_INT 16
3730: PUSH
3731: LD_INT 22
3733: PUSH
3734: LD_INT 26
3736: PUSH
3737: LD_INT 36
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 101
3754: PUSH
3755: LD_INT 102
3757: PUSH
3758: LD_INT 105
3760: PUSH
3761: LD_INT 106
3763: PUSH
3764: LD_INT 108
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: ST_TO_ADDR
3778: GO 6473
3780: LD_INT 4
3782: DOUBLE
3783: EQUAL
3784: IFTRUE 3788
3786: GO 3872
3788: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3789: LD_ADDR_VAR 0 1
3793: PUSH
3794: LD_INT 2
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: LD_INT 5
3802: PUSH
3803: LD_INT 8
3805: PUSH
3806: LD_INT 11
3808: PUSH
3809: LD_INT 12
3811: PUSH
3812: LD_INT 15
3814: PUSH
3815: LD_INT 16
3817: PUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 23
3823: PUSH
3824: LD_INT 26
3826: PUSH
3827: LD_INT 36
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 101
3846: PUSH
3847: LD_INT 102
3849: PUSH
3850: LD_INT 105
3852: PUSH
3853: LD_INT 106
3855: PUSH
3856: LD_INT 108
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: ST_TO_ADDR
3870: GO 6473
3872: LD_INT 5
3874: DOUBLE
3875: EQUAL
3876: IFTRUE 3880
3878: GO 3980
3880: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3881: LD_ADDR_VAR 0 1
3885: PUSH
3886: LD_INT 2
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 5
3894: PUSH
3895: LD_INT 6
3897: PUSH
3898: LD_INT 8
3900: PUSH
3901: LD_INT 11
3903: PUSH
3904: LD_INT 12
3906: PUSH
3907: LD_INT 15
3909: PUSH
3910: LD_INT 16
3912: PUSH
3913: LD_INT 22
3915: PUSH
3916: LD_INT 23
3918: PUSH
3919: LD_INT 25
3921: PUSH
3922: LD_INT 26
3924: PUSH
3925: LD_INT 36
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 101
3946: PUSH
3947: LD_INT 102
3949: PUSH
3950: LD_INT 105
3952: PUSH
3953: LD_INT 106
3955: PUSH
3956: LD_INT 108
3958: PUSH
3959: LD_INT 109
3961: PUSH
3962: LD_INT 112
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: ST_TO_ADDR
3978: GO 6473
3980: LD_INT 6
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 4108
3988: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: LD_INT 5
4002: PUSH
4003: LD_INT 6
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: LD_INT 11
4011: PUSH
4012: LD_INT 12
4014: PUSH
4015: LD_INT 15
4017: PUSH
4018: LD_INT 16
4020: PUSH
4021: LD_INT 20
4023: PUSH
4024: LD_INT 21
4026: PUSH
4027: LD_INT 22
4029: PUSH
4030: LD_INT 23
4032: PUSH
4033: LD_INT 25
4035: PUSH
4036: LD_INT 26
4038: PUSH
4039: LD_INT 30
4041: PUSH
4042: LD_INT 31
4044: PUSH
4045: LD_INT 32
4047: PUSH
4048: LD_INT 36
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 101
4074: PUSH
4075: LD_INT 102
4077: PUSH
4078: LD_INT 105
4080: PUSH
4081: LD_INT 106
4083: PUSH
4084: LD_INT 108
4086: PUSH
4087: LD_INT 109
4089: PUSH
4090: LD_INT 112
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: ST_TO_ADDR
4106: GO 6473
4108: LD_INT 7
4110: DOUBLE
4111: EQUAL
4112: IFTRUE 4116
4114: GO 4216
4116: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4117: LD_ADDR_VAR 0 1
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 7
4133: PUSH
4134: LD_INT 11
4136: PUSH
4137: LD_INT 12
4139: PUSH
4140: LD_INT 15
4142: PUSH
4143: LD_INT 16
4145: PUSH
4146: LD_INT 20
4148: PUSH
4149: LD_INT 21
4151: PUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 23
4157: PUSH
4158: LD_INT 25
4160: PUSH
4161: LD_INT 26
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: PUSH
4180: LD_INT 101
4182: PUSH
4183: LD_INT 102
4185: PUSH
4186: LD_INT 103
4188: PUSH
4189: LD_INT 105
4191: PUSH
4192: LD_INT 106
4194: PUSH
4195: LD_INT 108
4197: PUSH
4198: LD_INT 112
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: ST_TO_ADDR
4214: GO 6473
4216: LD_INT 8
4218: DOUBLE
4219: EQUAL
4220: IFTRUE 4224
4222: GO 4352
4224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4225: LD_ADDR_VAR 0 1
4229: PUSH
4230: LD_INT 2
4232: PUSH
4233: LD_INT 4
4235: PUSH
4236: LD_INT 5
4238: PUSH
4239: LD_INT 6
4241: PUSH
4242: LD_INT 7
4244: PUSH
4245: LD_INT 8
4247: PUSH
4248: LD_INT 11
4250: PUSH
4251: LD_INT 12
4253: PUSH
4254: LD_INT 15
4256: PUSH
4257: LD_INT 16
4259: PUSH
4260: LD_INT 20
4262: PUSH
4263: LD_INT 21
4265: PUSH
4266: LD_INT 22
4268: PUSH
4269: LD_INT 23
4271: PUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 26
4277: PUSH
4278: LD_INT 30
4280: PUSH
4281: LD_INT 31
4283: PUSH
4284: LD_INT 32
4286: PUSH
4287: LD_INT 36
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 101
4314: PUSH
4315: LD_INT 102
4317: PUSH
4318: LD_INT 103
4320: PUSH
4321: LD_INT 105
4323: PUSH
4324: LD_INT 106
4326: PUSH
4327: LD_INT 108
4329: PUSH
4330: LD_INT 109
4332: PUSH
4333: LD_INT 112
4335: PUSH
4336: EMPTY
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: ST_TO_ADDR
4350: GO 6473
4352: LD_INT 9
4354: DOUBLE
4355: EQUAL
4356: IFTRUE 4360
4358: GO 4496
4360: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4361: LD_ADDR_VAR 0 1
4365: PUSH
4366: LD_INT 2
4368: PUSH
4369: LD_INT 4
4371: PUSH
4372: LD_INT 5
4374: PUSH
4375: LD_INT 6
4377: PUSH
4378: LD_INT 7
4380: PUSH
4381: LD_INT 8
4383: PUSH
4384: LD_INT 11
4386: PUSH
4387: LD_INT 12
4389: PUSH
4390: LD_INT 15
4392: PUSH
4393: LD_INT 16
4395: PUSH
4396: LD_INT 20
4398: PUSH
4399: LD_INT 21
4401: PUSH
4402: LD_INT 22
4404: PUSH
4405: LD_INT 23
4407: PUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 26
4413: PUSH
4414: LD_INT 28
4416: PUSH
4417: LD_INT 30
4419: PUSH
4420: LD_INT 31
4422: PUSH
4423: LD_INT 32
4425: PUSH
4426: LD_INT 36
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 101
4454: PUSH
4455: LD_INT 102
4457: PUSH
4458: LD_INT 103
4460: PUSH
4461: LD_INT 105
4463: PUSH
4464: LD_INT 106
4466: PUSH
4467: LD_INT 108
4469: PUSH
4470: LD_INT 109
4472: PUSH
4473: LD_INT 112
4475: PUSH
4476: LD_INT 114
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: ST_TO_ADDR
4494: GO 6473
4496: LD_INT 10
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4504
4502: GO 4688
4504: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: LD_INT 6
4521: PUSH
4522: LD_INT 7
4524: PUSH
4525: LD_INT 8
4527: PUSH
4528: LD_INT 9
4530: PUSH
4531: LD_INT 10
4533: PUSH
4534: LD_INT 11
4536: PUSH
4537: LD_INT 12
4539: PUSH
4540: LD_INT 13
4542: PUSH
4543: LD_INT 14
4545: PUSH
4546: LD_INT 15
4548: PUSH
4549: LD_INT 16
4551: PUSH
4552: LD_INT 17
4554: PUSH
4555: LD_INT 18
4557: PUSH
4558: LD_INT 19
4560: PUSH
4561: LD_INT 20
4563: PUSH
4564: LD_INT 21
4566: PUSH
4567: LD_INT 22
4569: PUSH
4570: LD_INT 23
4572: PUSH
4573: LD_INT 24
4575: PUSH
4576: LD_INT 25
4578: PUSH
4579: LD_INT 26
4581: PUSH
4582: LD_INT 28
4584: PUSH
4585: LD_INT 30
4587: PUSH
4588: LD_INT 31
4590: PUSH
4591: LD_INT 32
4593: PUSH
4594: LD_INT 36
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 101
4630: PUSH
4631: LD_INT 102
4633: PUSH
4634: LD_INT 103
4636: PUSH
4637: LD_INT 104
4639: PUSH
4640: LD_INT 105
4642: PUSH
4643: LD_INT 106
4645: PUSH
4646: LD_INT 107
4648: PUSH
4649: LD_INT 108
4651: PUSH
4652: LD_INT 109
4654: PUSH
4655: LD_INT 110
4657: PUSH
4658: LD_INT 111
4660: PUSH
4661: LD_INT 112
4663: PUSH
4664: LD_INT 114
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: ST_TO_ADDR
4686: GO 6473
4688: LD_INT 11
4690: DOUBLE
4691: EQUAL
4692: IFTRUE 4696
4694: GO 4888
4696: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4697: LD_ADDR_VAR 0 1
4701: PUSH
4702: LD_INT 2
4704: PUSH
4705: LD_INT 3
4707: PUSH
4708: LD_INT 4
4710: PUSH
4711: LD_INT 5
4713: PUSH
4714: LD_INT 6
4716: PUSH
4717: LD_INT 7
4719: PUSH
4720: LD_INT 8
4722: PUSH
4723: LD_INT 9
4725: PUSH
4726: LD_INT 10
4728: PUSH
4729: LD_INT 11
4731: PUSH
4732: LD_INT 12
4734: PUSH
4735: LD_INT 13
4737: PUSH
4738: LD_INT 14
4740: PUSH
4741: LD_INT 15
4743: PUSH
4744: LD_INT 16
4746: PUSH
4747: LD_INT 17
4749: PUSH
4750: LD_INT 18
4752: PUSH
4753: LD_INT 19
4755: PUSH
4756: LD_INT 20
4758: PUSH
4759: LD_INT 21
4761: PUSH
4762: LD_INT 22
4764: PUSH
4765: LD_INT 23
4767: PUSH
4768: LD_INT 24
4770: PUSH
4771: LD_INT 25
4773: PUSH
4774: LD_INT 26
4776: PUSH
4777: LD_INT 28
4779: PUSH
4780: LD_INT 30
4782: PUSH
4783: LD_INT 31
4785: PUSH
4786: LD_INT 32
4788: PUSH
4789: LD_INT 34
4791: PUSH
4792: LD_INT 36
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 101
4830: PUSH
4831: LD_INT 102
4833: PUSH
4834: LD_INT 103
4836: PUSH
4837: LD_INT 104
4839: PUSH
4840: LD_INT 105
4842: PUSH
4843: LD_INT 106
4845: PUSH
4846: LD_INT 107
4848: PUSH
4849: LD_INT 108
4851: PUSH
4852: LD_INT 109
4854: PUSH
4855: LD_INT 110
4857: PUSH
4858: LD_INT 111
4860: PUSH
4861: LD_INT 112
4863: PUSH
4864: LD_INT 114
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: ST_TO_ADDR
4886: GO 6473
4888: LD_INT 12
4890: DOUBLE
4891: EQUAL
4892: IFTRUE 4896
4894: GO 5104
4896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4897: LD_ADDR_VAR 0 1
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: LD_INT 2
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: LD_INT 4
4913: PUSH
4914: LD_INT 5
4916: PUSH
4917: LD_INT 6
4919: PUSH
4920: LD_INT 7
4922: PUSH
4923: LD_INT 8
4925: PUSH
4926: LD_INT 9
4928: PUSH
4929: LD_INT 10
4931: PUSH
4932: LD_INT 11
4934: PUSH
4935: LD_INT 12
4937: PUSH
4938: LD_INT 13
4940: PUSH
4941: LD_INT 14
4943: PUSH
4944: LD_INT 15
4946: PUSH
4947: LD_INT 16
4949: PUSH
4950: LD_INT 17
4952: PUSH
4953: LD_INT 18
4955: PUSH
4956: LD_INT 19
4958: PUSH
4959: LD_INT 20
4961: PUSH
4962: LD_INT 21
4964: PUSH
4965: LD_INT 22
4967: PUSH
4968: LD_INT 23
4970: PUSH
4971: LD_INT 24
4973: PUSH
4974: LD_INT 25
4976: PUSH
4977: LD_INT 26
4979: PUSH
4980: LD_INT 27
4982: PUSH
4983: LD_INT 28
4985: PUSH
4986: LD_INT 30
4988: PUSH
4989: LD_INT 31
4991: PUSH
4992: LD_INT 32
4994: PUSH
4995: LD_INT 33
4997: PUSH
4998: LD_INT 34
5000: PUSH
5001: LD_INT 36
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 101
5042: PUSH
5043: LD_INT 102
5045: PUSH
5046: LD_INT 103
5048: PUSH
5049: LD_INT 104
5051: PUSH
5052: LD_INT 105
5054: PUSH
5055: LD_INT 106
5057: PUSH
5058: LD_INT 107
5060: PUSH
5061: LD_INT 108
5063: PUSH
5064: LD_INT 109
5066: PUSH
5067: LD_INT 110
5069: PUSH
5070: LD_INT 111
5072: PUSH
5073: LD_INT 112
5075: PUSH
5076: LD_INT 113
5078: PUSH
5079: LD_INT 114
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: ST_TO_ADDR
5102: GO 6473
5104: LD_INT 13
5106: DOUBLE
5107: EQUAL
5108: IFTRUE 5112
5110: GO 5308
5112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5113: LD_ADDR_VAR 0 1
5117: PUSH
5118: LD_INT 1
5120: PUSH
5121: LD_INT 2
5123: PUSH
5124: LD_INT 3
5126: PUSH
5127: LD_INT 4
5129: PUSH
5130: LD_INT 5
5132: PUSH
5133: LD_INT 8
5135: PUSH
5136: LD_INT 9
5138: PUSH
5139: LD_INT 10
5141: PUSH
5142: LD_INT 11
5144: PUSH
5145: LD_INT 12
5147: PUSH
5148: LD_INT 14
5150: PUSH
5151: LD_INT 15
5153: PUSH
5154: LD_INT 16
5156: PUSH
5157: LD_INT 17
5159: PUSH
5160: LD_INT 18
5162: PUSH
5163: LD_INT 19
5165: PUSH
5166: LD_INT 20
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 23
5177: PUSH
5178: LD_INT 24
5180: PUSH
5181: LD_INT 25
5183: PUSH
5184: LD_INT 26
5186: PUSH
5187: LD_INT 27
5189: PUSH
5190: LD_INT 28
5192: PUSH
5193: LD_INT 30
5195: PUSH
5196: LD_INT 31
5198: PUSH
5199: LD_INT 32
5201: PUSH
5202: LD_INT 33
5204: PUSH
5205: LD_INT 34
5207: PUSH
5208: LD_INT 36
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 101
5246: PUSH
5247: LD_INT 102
5249: PUSH
5250: LD_INT 103
5252: PUSH
5253: LD_INT 104
5255: PUSH
5256: LD_INT 105
5258: PUSH
5259: LD_INT 106
5261: PUSH
5262: LD_INT 107
5264: PUSH
5265: LD_INT 108
5267: PUSH
5268: LD_INT 109
5270: PUSH
5271: LD_INT 110
5273: PUSH
5274: LD_INT 111
5276: PUSH
5277: LD_INT 112
5279: PUSH
5280: LD_INT 113
5282: PUSH
5283: LD_INT 114
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: ST_TO_ADDR
5306: GO 6473
5308: LD_INT 14
5310: DOUBLE
5311: EQUAL
5312: IFTRUE 5316
5314: GO 5528
5316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5317: LD_ADDR_VAR 0 1
5321: PUSH
5322: LD_INT 1
5324: PUSH
5325: LD_INT 2
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: LD_INT 4
5333: PUSH
5334: LD_INT 5
5336: PUSH
5337: LD_INT 6
5339: PUSH
5340: LD_INT 7
5342: PUSH
5343: LD_INT 8
5345: PUSH
5346: LD_INT 9
5348: PUSH
5349: LD_INT 10
5351: PUSH
5352: LD_INT 11
5354: PUSH
5355: LD_INT 12
5357: PUSH
5358: LD_INT 13
5360: PUSH
5361: LD_INT 14
5363: PUSH
5364: LD_INT 15
5366: PUSH
5367: LD_INT 16
5369: PUSH
5370: LD_INT 17
5372: PUSH
5373: LD_INT 18
5375: PUSH
5376: LD_INT 19
5378: PUSH
5379: LD_INT 20
5381: PUSH
5382: LD_INT 21
5384: PUSH
5385: LD_INT 22
5387: PUSH
5388: LD_INT 23
5390: PUSH
5391: LD_INT 24
5393: PUSH
5394: LD_INT 25
5396: PUSH
5397: LD_INT 26
5399: PUSH
5400: LD_INT 27
5402: PUSH
5403: LD_INT 28
5405: PUSH
5406: LD_INT 29
5408: PUSH
5409: LD_INT 30
5411: PUSH
5412: LD_INT 31
5414: PUSH
5415: LD_INT 32
5417: PUSH
5418: LD_INT 33
5420: PUSH
5421: LD_INT 34
5423: PUSH
5424: LD_INT 36
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 101
5466: PUSH
5467: LD_INT 102
5469: PUSH
5470: LD_INT 103
5472: PUSH
5473: LD_INT 104
5475: PUSH
5476: LD_INT 105
5478: PUSH
5479: LD_INT 106
5481: PUSH
5482: LD_INT 107
5484: PUSH
5485: LD_INT 108
5487: PUSH
5488: LD_INT 109
5490: PUSH
5491: LD_INT 110
5493: PUSH
5494: LD_INT 111
5496: PUSH
5497: LD_INT 112
5499: PUSH
5500: LD_INT 113
5502: PUSH
5503: LD_INT 114
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: ST_TO_ADDR
5526: GO 6473
5528: LD_INT 15
5530: DOUBLE
5531: EQUAL
5532: IFTRUE 5536
5534: GO 5748
5536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: LD_INT 1
5544: PUSH
5545: LD_INT 2
5547: PUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 4
5553: PUSH
5554: LD_INT 5
5556: PUSH
5557: LD_INT 6
5559: PUSH
5560: LD_INT 7
5562: PUSH
5563: LD_INT 8
5565: PUSH
5566: LD_INT 9
5568: PUSH
5569: LD_INT 10
5571: PUSH
5572: LD_INT 11
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 13
5580: PUSH
5581: LD_INT 14
5583: PUSH
5584: LD_INT 15
5586: PUSH
5587: LD_INT 16
5589: PUSH
5590: LD_INT 17
5592: PUSH
5593: LD_INT 18
5595: PUSH
5596: LD_INT 19
5598: PUSH
5599: LD_INT 20
5601: PUSH
5602: LD_INT 21
5604: PUSH
5605: LD_INT 22
5607: PUSH
5608: LD_INT 23
5610: PUSH
5611: LD_INT 24
5613: PUSH
5614: LD_INT 25
5616: PUSH
5617: LD_INT 26
5619: PUSH
5620: LD_INT 27
5622: PUSH
5623: LD_INT 28
5625: PUSH
5626: LD_INT 29
5628: PUSH
5629: LD_INT 30
5631: PUSH
5632: LD_INT 31
5634: PUSH
5635: LD_INT 32
5637: PUSH
5638: LD_INT 33
5640: PUSH
5641: LD_INT 34
5643: PUSH
5644: LD_INT 36
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 101
5686: PUSH
5687: LD_INT 102
5689: PUSH
5690: LD_INT 103
5692: PUSH
5693: LD_INT 104
5695: PUSH
5696: LD_INT 105
5698: PUSH
5699: LD_INT 106
5701: PUSH
5702: LD_INT 107
5704: PUSH
5705: LD_INT 108
5707: PUSH
5708: LD_INT 109
5710: PUSH
5711: LD_INT 110
5713: PUSH
5714: LD_INT 111
5716: PUSH
5717: LD_INT 112
5719: PUSH
5720: LD_INT 113
5722: PUSH
5723: LD_INT 114
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: ST_TO_ADDR
5746: GO 6473
5748: LD_INT 16
5750: DOUBLE
5751: EQUAL
5752: IFTRUE 5756
5754: GO 5880
5756: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5757: LD_ADDR_VAR 0 1
5761: PUSH
5762: LD_INT 2
5764: PUSH
5765: LD_INT 4
5767: PUSH
5768: LD_INT 5
5770: PUSH
5771: LD_INT 7
5773: PUSH
5774: LD_INT 11
5776: PUSH
5777: LD_INT 12
5779: PUSH
5780: LD_INT 15
5782: PUSH
5783: LD_INT 16
5785: PUSH
5786: LD_INT 20
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 22
5794: PUSH
5795: LD_INT 23
5797: PUSH
5798: LD_INT 25
5800: PUSH
5801: LD_INT 26
5803: PUSH
5804: LD_INT 30
5806: PUSH
5807: LD_INT 31
5809: PUSH
5810: LD_INT 32
5812: PUSH
5813: LD_INT 33
5815: PUSH
5816: LD_INT 34
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: PUSH
5840: LD_INT 101
5842: PUSH
5843: LD_INT 102
5845: PUSH
5846: LD_INT 103
5848: PUSH
5849: LD_INT 106
5851: PUSH
5852: LD_INT 108
5854: PUSH
5855: LD_INT 112
5857: PUSH
5858: LD_INT 113
5860: PUSH
5861: LD_INT 114
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: ST_TO_ADDR
5878: GO 6473
5880: LD_INT 17
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 6100
5888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: LD_INT 2
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: LD_INT 4
5905: PUSH
5906: LD_INT 5
5908: PUSH
5909: LD_INT 6
5911: PUSH
5912: LD_INT 7
5914: PUSH
5915: LD_INT 8
5917: PUSH
5918: LD_INT 9
5920: PUSH
5921: LD_INT 10
5923: PUSH
5924: LD_INT 11
5926: PUSH
5927: LD_INT 12
5929: PUSH
5930: LD_INT 13
5932: PUSH
5933: LD_INT 14
5935: PUSH
5936: LD_INT 15
5938: PUSH
5939: LD_INT 16
5941: PUSH
5942: LD_INT 17
5944: PUSH
5945: LD_INT 18
5947: PUSH
5948: LD_INT 19
5950: PUSH
5951: LD_INT 20
5953: PUSH
5954: LD_INT 21
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 23
5962: PUSH
5963: LD_INT 24
5965: PUSH
5966: LD_INT 25
5968: PUSH
5969: LD_INT 26
5971: PUSH
5972: LD_INT 27
5974: PUSH
5975: LD_INT 28
5977: PUSH
5978: LD_INT 29
5980: PUSH
5981: LD_INT 30
5983: PUSH
5984: LD_INT 31
5986: PUSH
5987: LD_INT 32
5989: PUSH
5990: LD_INT 33
5992: PUSH
5993: LD_INT 34
5995: PUSH
5996: LD_INT 36
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 101
6038: PUSH
6039: LD_INT 102
6041: PUSH
6042: LD_INT 103
6044: PUSH
6045: LD_INT 104
6047: PUSH
6048: LD_INT 105
6050: PUSH
6051: LD_INT 106
6053: PUSH
6054: LD_INT 107
6056: PUSH
6057: LD_INT 108
6059: PUSH
6060: LD_INT 109
6062: PUSH
6063: LD_INT 110
6065: PUSH
6066: LD_INT 111
6068: PUSH
6069: LD_INT 112
6071: PUSH
6072: LD_INT 113
6074: PUSH
6075: LD_INT 114
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: ST_TO_ADDR
6098: GO 6473
6100: LD_INT 18
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6244
6108: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6109: LD_ADDR_VAR 0 1
6113: PUSH
6114: LD_INT 2
6116: PUSH
6117: LD_INT 4
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 7
6125: PUSH
6126: LD_INT 11
6128: PUSH
6129: LD_INT 12
6131: PUSH
6132: LD_INT 15
6134: PUSH
6135: LD_INT 16
6137: PUSH
6138: LD_INT 20
6140: PUSH
6141: LD_INT 21
6143: PUSH
6144: LD_INT 22
6146: PUSH
6147: LD_INT 23
6149: PUSH
6150: LD_INT 25
6152: PUSH
6153: LD_INT 26
6155: PUSH
6156: LD_INT 30
6158: PUSH
6159: LD_INT 31
6161: PUSH
6162: LD_INT 32
6164: PUSH
6165: LD_INT 33
6167: PUSH
6168: LD_INT 34
6170: PUSH
6171: LD_INT 35
6173: PUSH
6174: LD_INT 36
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 101
6202: PUSH
6203: LD_INT 102
6205: PUSH
6206: LD_INT 103
6208: PUSH
6209: LD_INT 106
6211: PUSH
6212: LD_INT 108
6214: PUSH
6215: LD_INT 112
6217: PUSH
6218: LD_INT 113
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 115
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: ST_TO_ADDR
6242: GO 6473
6244: LD_INT 19
6246: DOUBLE
6247: EQUAL
6248: IFTRUE 6252
6250: GO 6472
6252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6253: LD_ADDR_VAR 0 1
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: LD_INT 2
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: LD_INT 4
6269: PUSH
6270: LD_INT 5
6272: PUSH
6273: LD_INT 6
6275: PUSH
6276: LD_INT 7
6278: PUSH
6279: LD_INT 8
6281: PUSH
6282: LD_INT 9
6284: PUSH
6285: LD_INT 10
6287: PUSH
6288: LD_INT 11
6290: PUSH
6291: LD_INT 12
6293: PUSH
6294: LD_INT 13
6296: PUSH
6297: LD_INT 14
6299: PUSH
6300: LD_INT 15
6302: PUSH
6303: LD_INT 16
6305: PUSH
6306: LD_INT 17
6308: PUSH
6309: LD_INT 18
6311: PUSH
6312: LD_INT 19
6314: PUSH
6315: LD_INT 20
6317: PUSH
6318: LD_INT 21
6320: PUSH
6321: LD_INT 22
6323: PUSH
6324: LD_INT 23
6326: PUSH
6327: LD_INT 24
6329: PUSH
6330: LD_INT 25
6332: PUSH
6333: LD_INT 26
6335: PUSH
6336: LD_INT 27
6338: PUSH
6339: LD_INT 28
6341: PUSH
6342: LD_INT 29
6344: PUSH
6345: LD_INT 30
6347: PUSH
6348: LD_INT 31
6350: PUSH
6351: LD_INT 32
6353: PUSH
6354: LD_INT 33
6356: PUSH
6357: LD_INT 34
6359: PUSH
6360: LD_INT 35
6362: PUSH
6363: LD_INT 36
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: LD_INT 101
6406: PUSH
6407: LD_INT 102
6409: PUSH
6410: LD_INT 103
6412: PUSH
6413: LD_INT 104
6415: PUSH
6416: LD_INT 105
6418: PUSH
6419: LD_INT 106
6421: PUSH
6422: LD_INT 107
6424: PUSH
6425: LD_INT 108
6427: PUSH
6428: LD_INT 109
6430: PUSH
6431: LD_INT 110
6433: PUSH
6434: LD_INT 111
6436: PUSH
6437: LD_INT 112
6439: PUSH
6440: LD_INT 113
6442: PUSH
6443: LD_INT 114
6445: PUSH
6446: LD_INT 115
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: ST_TO_ADDR
6470: GO 6473
6472: POP
// end else
6473: GO 6692
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6475: LD_ADDR_VAR 0 1
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 3
6488: PUSH
6489: LD_INT 4
6491: PUSH
6492: LD_INT 5
6494: PUSH
6495: LD_INT 6
6497: PUSH
6498: LD_INT 7
6500: PUSH
6501: LD_INT 8
6503: PUSH
6504: LD_INT 9
6506: PUSH
6507: LD_INT 10
6509: PUSH
6510: LD_INT 11
6512: PUSH
6513: LD_INT 12
6515: PUSH
6516: LD_INT 13
6518: PUSH
6519: LD_INT 14
6521: PUSH
6522: LD_INT 15
6524: PUSH
6525: LD_INT 16
6527: PUSH
6528: LD_INT 17
6530: PUSH
6531: LD_INT 18
6533: PUSH
6534: LD_INT 19
6536: PUSH
6537: LD_INT 20
6539: PUSH
6540: LD_INT 21
6542: PUSH
6543: LD_INT 22
6545: PUSH
6546: LD_INT 23
6548: PUSH
6549: LD_INT 24
6551: PUSH
6552: LD_INT 25
6554: PUSH
6555: LD_INT 26
6557: PUSH
6558: LD_INT 27
6560: PUSH
6561: LD_INT 28
6563: PUSH
6564: LD_INT 29
6566: PUSH
6567: LD_INT 30
6569: PUSH
6570: LD_INT 31
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: LD_INT 33
6578: PUSH
6579: LD_INT 34
6581: PUSH
6582: LD_INT 35
6584: PUSH
6585: LD_INT 36
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PUSH
6626: LD_INT 101
6628: PUSH
6629: LD_INT 102
6631: PUSH
6632: LD_INT 103
6634: PUSH
6635: LD_INT 104
6637: PUSH
6638: LD_INT 105
6640: PUSH
6641: LD_INT 106
6643: PUSH
6644: LD_INT 107
6646: PUSH
6647: LD_INT 108
6649: PUSH
6650: LD_INT 109
6652: PUSH
6653: LD_INT 110
6655: PUSH
6656: LD_INT 111
6658: PUSH
6659: LD_INT 112
6661: PUSH
6662: LD_INT 113
6664: PUSH
6665: LD_INT 114
6667: PUSH
6668: LD_INT 115
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: ST_TO_ADDR
// if result then
6692: LD_VAR 0 1
6696: IFFALSE 6985
// begin normal :=  ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_STRING 
6705: ST_TO_ADDR
// hardcore :=  ;
6706: LD_ADDR_VAR 0 4
6710: PUSH
6711: LD_STRING 
6713: ST_TO_ADDR
// for i = 1 to normalCounter do
6714: LD_ADDR_VAR 0 5
6718: PUSH
6719: DOUBLE
6720: LD_INT 1
6722: DEC
6723: ST_TO_ADDR
6724: LD_EXP 18
6728: PUSH
6729: FOR_TO
6730: IFFALSE 6831
// begin tmp := 0 ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_STRING 0
6739: ST_TO_ADDR
// if result [ 1 ] then
6740: LD_VAR 0 1
6744: PUSH
6745: LD_INT 1
6747: ARRAY
6748: IFFALSE 6813
// if result [ 1 ] [ 1 ] = i then
6750: LD_VAR 0 1
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PUSH
6759: LD_INT 1
6761: ARRAY
6762: PUSH
6763: LD_VAR 0 5
6767: EQUAL
6768: IFFALSE 6813
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6770: LD_ADDR_VAR 0 1
6774: PUSH
6775: LD_VAR 0 1
6779: PPUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_VAR 0 1
6787: PUSH
6788: LD_INT 1
6790: ARRAY
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: CALL_OW 3
6799: PPUSH
6800: CALL_OW 1
6804: ST_TO_ADDR
// tmp := 1 ;
6805: LD_ADDR_VAR 0 2
6809: PUSH
6810: LD_STRING 1
6812: ST_TO_ADDR
// end ; normal := normal & tmp ;
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: LD_VAR 0 3
6822: PUSH
6823: LD_VAR 0 2
6827: STR
6828: ST_TO_ADDR
// end ;
6829: GO 6729
6831: POP
6832: POP
// for i = 1 to hardcoreCounter do
6833: LD_ADDR_VAR 0 5
6837: PUSH
6838: DOUBLE
6839: LD_INT 1
6841: DEC
6842: ST_TO_ADDR
6843: LD_EXP 19
6847: PUSH
6848: FOR_TO
6849: IFFALSE 6954
// begin tmp := 0 ;
6851: LD_ADDR_VAR 0 2
6855: PUSH
6856: LD_STRING 0
6858: ST_TO_ADDR
// if result [ 2 ] then
6859: LD_VAR 0 1
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: IFFALSE 6936
// if result [ 2 ] [ 1 ] = 100 + i then
6869: LD_VAR 0 1
6873: PUSH
6874: LD_INT 2
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PUSH
6882: LD_INT 100
6884: PUSH
6885: LD_VAR 0 5
6889: PLUS
6890: EQUAL
6891: IFFALSE 6936
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6893: LD_ADDR_VAR 0 1
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: LD_INT 2
6905: PPUSH
6906: LD_VAR 0 1
6910: PUSH
6911: LD_INT 2
6913: ARRAY
6914: PPUSH
6915: LD_INT 1
6917: PPUSH
6918: CALL_OW 3
6922: PPUSH
6923: CALL_OW 1
6927: ST_TO_ADDR
// tmp := 1 ;
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_STRING 1
6935: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6936: LD_ADDR_VAR 0 4
6940: PUSH
6941: LD_VAR 0 4
6945: PUSH
6946: LD_VAR 0 2
6950: STR
6951: ST_TO_ADDR
// end ;
6952: GO 6848
6954: POP
6955: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6956: LD_STRING getStreamItemsFromMission("
6958: PUSH
6959: LD_VAR 0 3
6963: STR
6964: PUSH
6965: LD_STRING ","
6967: STR
6968: PUSH
6969: LD_VAR 0 4
6973: STR
6974: PUSH
6975: LD_STRING ")
6977: STR
6978: PPUSH
6979: CALL_OW 559
// end else
6983: GO 6992
// ToLua ( getStreamItemsFromMission("","") ) ;
6985: LD_STRING getStreamItemsFromMission("","")
6987: PPUSH
6988: CALL_OW 559
// end ;
6992: LD_VAR 0 1
6996: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6997: LD_EXP 17
7001: PUSH
7002: LD_EXP 22
7006: AND
7007: IFFALSE 7131
7009: GO 7011
7011: DISABLE
7012: LD_INT 0
7014: PPUSH
7015: PPUSH
// begin enable ;
7016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7017: LD_ADDR_VAR 0 2
7021: PUSH
7022: LD_INT 22
7024: PUSH
7025: LD_OWVAR 2
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 2
7036: PUSH
7037: LD_INT 34
7039: PUSH
7040: LD_INT 7
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 34
7049: PUSH
7050: LD_INT 45
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 34
7059: PUSH
7060: LD_INT 28
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 34
7069: PUSH
7070: LD_INT 47
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PPUSH
7088: CALL_OW 69
7092: ST_TO_ADDR
// if not tmp then
7093: LD_VAR 0 2
7097: NOT
7098: IFFALSE 7102
// exit ;
7100: GO 7131
// for i in tmp do
7102: LD_ADDR_VAR 0 1
7106: PUSH
7107: LD_VAR 0 2
7111: PUSH
7112: FOR_IN
7113: IFFALSE 7129
// begin SetLives ( i , 0 ) ;
7115: LD_VAR 0 1
7119: PPUSH
7120: LD_INT 0
7122: PPUSH
7123: CALL_OW 234
// end ;
7127: GO 7112
7129: POP
7130: POP
// end ;
7131: PPOPN 2
7133: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7134: LD_EXP 17
7138: PUSH
7139: LD_EXP 23
7143: AND
7144: IFFALSE 7228
7146: GO 7148
7148: DISABLE
7149: LD_INT 0
7151: PPUSH
7152: PPUSH
// begin enable ;
7153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: LD_INT 22
7161: PUSH
7162: LD_OWVAR 2
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 32
7173: PUSH
7174: LD_INT 3
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PPUSH
7185: CALL_OW 69
7189: ST_TO_ADDR
// if not tmp then
7190: LD_VAR 0 2
7194: NOT
7195: IFFALSE 7199
// exit ;
7197: GO 7228
// for i in tmp do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: LD_VAR 0 2
7208: PUSH
7209: FOR_IN
7210: IFFALSE 7226
// begin SetLives ( i , 0 ) ;
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 0
7219: PPUSH
7220: CALL_OW 234
// end ;
7224: GO 7209
7226: POP
7227: POP
// end ;
7228: PPOPN 2
7230: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7231: LD_EXP 17
7235: PUSH
7236: LD_EXP 20
7240: AND
7241: IFFALSE 7334
7243: GO 7245
7245: DISABLE
7246: LD_INT 0
7248: PPUSH
// begin enable ;
7249: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7250: LD_ADDR_VAR 0 1
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_OWVAR 2
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: LD_INT 25
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 25
7282: PUSH
7283: LD_INT 9
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 25
7292: PUSH
7293: LD_INT 8
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PUSH
7315: FOR_IN
7316: IFFALSE 7332
// begin SetClass ( i , 1 ) ;
7318: LD_VAR 0 1
7322: PPUSH
7323: LD_INT 1
7325: PPUSH
7326: CALL_OW 336
// end ;
7330: GO 7315
7332: POP
7333: POP
// end ;
7334: PPOPN 1
7336: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7337: LD_EXP 17
7341: PUSH
7342: LD_EXP 21
7346: AND
7347: PUSH
7348: LD_OWVAR 65
7352: PUSH
7353: LD_INT 7
7355: LESS
7356: AND
7357: IFFALSE 7371
7359: GO 7361
7361: DISABLE
// begin enable ;
7362: ENABLE
// game_speed := 7 ;
7363: LD_ADDR_OWVAR 65
7367: PUSH
7368: LD_INT 7
7370: ST_TO_ADDR
// end ;
7371: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7372: LD_EXP 17
7376: PUSH
7377: LD_EXP 24
7381: AND
7382: IFFALSE 7584
7384: GO 7386
7386: DISABLE
7387: LD_INT 0
7389: PPUSH
7390: PPUSH
7391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: LD_INT 81
7399: PUSH
7400: LD_OWVAR 2
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 21
7411: PUSH
7412: LD_INT 1
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 69
7427: ST_TO_ADDR
// if not tmp then
7428: LD_VAR 0 3
7432: NOT
7433: IFFALSE 7437
// exit ;
7435: GO 7584
// if tmp > 5 then
7437: LD_VAR 0 3
7441: PUSH
7442: LD_INT 5
7444: GREATER
7445: IFFALSE 7457
// k := 5 else
7447: LD_ADDR_VAR 0 2
7451: PUSH
7452: LD_INT 5
7454: ST_TO_ADDR
7455: GO 7467
// k := tmp ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 3
7466: ST_TO_ADDR
// for i := 1 to k do
7467: LD_ADDR_VAR 0 1
7471: PUSH
7472: DOUBLE
7473: LD_INT 1
7475: DEC
7476: ST_TO_ADDR
7477: LD_VAR 0 2
7481: PUSH
7482: FOR_TO
7483: IFFALSE 7582
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_VAR 0 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 1
7500: PUSH
7501: LD_INT 4
7503: MOD
7504: PUSH
7505: LD_INT 1
7507: PLUS
7508: PPUSH
7509: CALL_OW 259
7513: PUSH
7514: LD_INT 10
7516: LESS
7517: IFFALSE 7580
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7519: LD_VAR 0 3
7523: PUSH
7524: LD_VAR 0 1
7528: ARRAY
7529: PPUSH
7530: LD_VAR 0 1
7534: PUSH
7535: LD_INT 4
7537: MOD
7538: PUSH
7539: LD_INT 1
7541: PLUS
7542: PPUSH
7543: LD_VAR 0 3
7547: PUSH
7548: LD_VAR 0 1
7552: ARRAY
7553: PPUSH
7554: LD_VAR 0 1
7558: PUSH
7559: LD_INT 4
7561: MOD
7562: PUSH
7563: LD_INT 1
7565: PLUS
7566: PPUSH
7567: CALL_OW 259
7571: PUSH
7572: LD_INT 1
7574: PLUS
7575: PPUSH
7576: CALL_OW 237
7580: GO 7482
7582: POP
7583: POP
// end ;
7584: PPOPN 3
7586: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7587: LD_EXP 17
7591: PUSH
7592: LD_EXP 25
7596: AND
7597: IFFALSE 7617
7599: GO 7601
7601: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7602: LD_INT 4
7604: PPUSH
7605: LD_OWVAR 2
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 324
7617: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7618: LD_EXP 17
7622: PUSH
7623: LD_EXP 54
7627: AND
7628: IFFALSE 7648
7630: GO 7632
7632: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7633: LD_INT 19
7635: PPUSH
7636: LD_OWVAR 2
7640: PPUSH
7641: LD_INT 0
7643: PPUSH
7644: CALL_OW 324
7648: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7649: LD_EXP 17
7653: PUSH
7654: LD_EXP 26
7658: AND
7659: IFFALSE 7761
7661: GO 7663
7663: DISABLE
7664: LD_INT 0
7666: PPUSH
7667: PPUSH
// begin enable ;
7668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7669: LD_ADDR_VAR 0 2
7673: PUSH
7674: LD_INT 22
7676: PUSH
7677: LD_OWVAR 2
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: LD_INT 34
7691: PUSH
7692: LD_INT 11
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 34
7701: PUSH
7702: LD_INT 30
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if not tmp then
7723: LD_VAR 0 2
7727: NOT
7728: IFFALSE 7732
// exit ;
7730: GO 7761
// for i in tmp do
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: LD_VAR 0 2
7741: PUSH
7742: FOR_IN
7743: IFFALSE 7759
// begin SetLives ( i , 0 ) ;
7745: LD_VAR 0 1
7749: PPUSH
7750: LD_INT 0
7752: PPUSH
7753: CALL_OW 234
// end ;
7757: GO 7742
7759: POP
7760: POP
// end ;
7761: PPOPN 2
7763: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7764: LD_EXP 17
7768: PUSH
7769: LD_EXP 27
7773: AND
7774: IFFALSE 7794
7776: GO 7778
7778: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7779: LD_INT 32
7781: PPUSH
7782: LD_OWVAR 2
7786: PPUSH
7787: LD_INT 0
7789: PPUSH
7790: CALL_OW 324
7794: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7795: LD_EXP 17
7799: PUSH
7800: LD_EXP 28
7804: AND
7805: IFFALSE 7986
7807: GO 7809
7809: DISABLE
7810: LD_INT 0
7812: PPUSH
7813: PPUSH
7814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7815: LD_ADDR_VAR 0 2
7819: PUSH
7820: LD_INT 22
7822: PUSH
7823: LD_OWVAR 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 33
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PPUSH
7846: CALL_OW 69
7850: ST_TO_ADDR
// if not tmp then
7851: LD_VAR 0 2
7855: NOT
7856: IFFALSE 7860
// exit ;
7858: GO 7986
// side := 0 ;
7860: LD_ADDR_VAR 0 3
7864: PUSH
7865: LD_INT 0
7867: ST_TO_ADDR
// for i := 1 to 8 do
7868: LD_ADDR_VAR 0 1
7872: PUSH
7873: DOUBLE
7874: LD_INT 1
7876: DEC
7877: ST_TO_ADDR
7878: LD_INT 8
7880: PUSH
7881: FOR_TO
7882: IFFALSE 7930
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7884: LD_OWVAR 2
7888: PUSH
7889: LD_VAR 0 1
7893: NONEQUAL
7894: PUSH
7895: LD_OWVAR 2
7899: PPUSH
7900: LD_VAR 0 1
7904: PPUSH
7905: CALL_OW 81
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: AND
7914: IFFALSE 7928
// begin side := i ;
7916: LD_ADDR_VAR 0 3
7920: PUSH
7921: LD_VAR 0 1
7925: ST_TO_ADDR
// break ;
7926: GO 7930
// end ;
7928: GO 7881
7930: POP
7931: POP
// if not side then
7932: LD_VAR 0 3
7936: NOT
7937: IFFALSE 7941
// exit ;
7939: GO 7986
// for i := 1 to tmp do
7941: LD_ADDR_VAR 0 1
7945: PUSH
7946: DOUBLE
7947: LD_INT 1
7949: DEC
7950: ST_TO_ADDR
7951: LD_VAR 0 2
7955: PUSH
7956: FOR_TO
7957: IFFALSE 7984
// if Prob ( 60 ) then
7959: LD_INT 60
7961: PPUSH
7962: CALL_OW 13
7966: IFFALSE 7982
// SetSide ( i , side ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 3
7977: PPUSH
7978: CALL_OW 235
7982: GO 7956
7984: POP
7985: POP
// end ;
7986: PPOPN 3
7988: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7989: LD_EXP 17
7993: PUSH
7994: LD_EXP 30
7998: AND
7999: IFFALSE 8118
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8007: LD_ADDR_VAR 0 1
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_OWVAR 2
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 21
8026: PUSH
8027: LD_INT 1
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 3
8036: PUSH
8037: LD_INT 23
8039: PUSH
8040: LD_INT 0
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8116
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8064: LD_VAR 0 1
8068: PPUSH
8069: CALL_OW 257
8073: PUSH
8074: LD_INT 1
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: LD_INT 3
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: IN
8092: IFFALSE 8114
// SetClass ( un , rand ( 1 , 4 ) ) ;
8094: LD_VAR 0 1
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: LD_INT 4
8104: PPUSH
8105: CALL_OW 12
8109: PPUSH
8110: CALL_OW 336
8114: GO 8061
8116: POP
8117: POP
// end ;
8118: PPOPN 1
8120: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8121: LD_EXP 17
8125: PUSH
8126: LD_EXP 29
8130: AND
8131: IFFALSE 8210
8133: GO 8135
8135: DISABLE
8136: LD_INT 0
8138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8139: LD_ADDR_VAR 0 1
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_OWVAR 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 21
8158: PUSH
8159: LD_INT 3
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not tmp then
8175: LD_VAR 0 1
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8210
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8184: LD_VAR 0 1
8188: PUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 12
8201: ARRAY
8202: PPUSH
8203: LD_INT 100
8205: PPUSH
8206: CALL_OW 234
// end ;
8210: PPOPN 1
8212: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8213: LD_EXP 17
8217: PUSH
8218: LD_EXP 31
8222: AND
8223: IFFALSE 8321
8225: GO 8227
8227: DISABLE
8228: LD_INT 0
8230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8231: LD_ADDR_VAR 0 1
8235: PUSH
8236: LD_INT 22
8238: PUSH
8239: LD_OWVAR 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 21
8250: PUSH
8251: LD_INT 1
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: ST_TO_ADDR
// if not tmp then
8267: LD_VAR 0 1
8271: NOT
8272: IFFALSE 8276
// exit ;
8274: GO 8321
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8276: LD_VAR 0 1
8280: PUSH
8281: LD_INT 1
8283: PPUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 12
8293: ARRAY
8294: PPUSH
8295: LD_INT 1
8297: PPUSH
8298: LD_INT 4
8300: PPUSH
8301: CALL_OW 12
8305: PPUSH
8306: LD_INT 3000
8308: PPUSH
8309: LD_INT 9000
8311: PPUSH
8312: CALL_OW 12
8316: PPUSH
8317: CALL_OW 492
// end ;
8321: PPOPN 1
8323: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8324: LD_EXP 17
8328: PUSH
8329: LD_EXP 32
8333: AND
8334: IFFALSE 8354
8336: GO 8338
8338: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8339: LD_INT 1
8341: PPUSH
8342: LD_OWVAR 2
8346: PPUSH
8347: LD_INT 0
8349: PPUSH
8350: CALL_OW 324
8354: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8355: LD_EXP 17
8359: PUSH
8360: LD_EXP 33
8364: AND
8365: IFFALSE 8448
8367: GO 8369
8369: DISABLE
8370: LD_INT 0
8372: PPUSH
8373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8374: LD_ADDR_VAR 0 2
8378: PUSH
8379: LD_INT 22
8381: PUSH
8382: LD_OWVAR 2
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: LD_INT 21
8393: PUSH
8394: LD_INT 3
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PPUSH
8405: CALL_OW 69
8409: ST_TO_ADDR
// if not tmp then
8410: LD_VAR 0 2
8414: NOT
8415: IFFALSE 8419
// exit ;
8417: GO 8448
// for i in tmp do
8419: LD_ADDR_VAR 0 1
8423: PUSH
8424: LD_VAR 0 2
8428: PUSH
8429: FOR_IN
8430: IFFALSE 8446
// SetBLevel ( i , 10 ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 10
8439: PPUSH
8440: CALL_OW 241
8444: GO 8429
8446: POP
8447: POP
// end ;
8448: PPOPN 2
8450: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8451: LD_EXP 17
8455: PUSH
8456: LD_EXP 34
8460: AND
8461: IFFALSE 8572
8463: GO 8465
8465: DISABLE
8466: LD_INT 0
8468: PPUSH
8469: PPUSH
8470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8471: LD_ADDR_VAR 0 3
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_OWVAR 2
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 25
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 69
8506: ST_TO_ADDR
// if not tmp then
8507: LD_VAR 0 3
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8572
// un := tmp [ rand ( 1 , tmp ) ] ;
8516: LD_ADDR_VAR 0 2
8520: PUSH
8521: LD_VAR 0 3
8525: PUSH
8526: LD_INT 1
8528: PPUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: CALL_OW 12
8538: ARRAY
8539: ST_TO_ADDR
// if Crawls ( un ) then
8540: LD_VAR 0 2
8544: PPUSH
8545: CALL_OW 318
8549: IFFALSE 8560
// ComWalk ( un ) ;
8551: LD_VAR 0 2
8555: PPUSH
8556: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8560: LD_VAR 0 2
8564: PPUSH
8565: LD_INT 5
8567: PPUSH
8568: CALL_OW 336
// end ;
8572: PPOPN 3
8574: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8575: LD_EXP 17
8579: PUSH
8580: LD_EXP 35
8584: AND
8585: PUSH
8586: LD_OWVAR 67
8590: PUSH
8591: LD_INT 3
8593: LESS
8594: AND
8595: IFFALSE 8614
8597: GO 8599
8599: DISABLE
// Difficulty := Difficulty + 1 ;
8600: LD_ADDR_OWVAR 67
8604: PUSH
8605: LD_OWVAR 67
8609: PUSH
8610: LD_INT 1
8612: PLUS
8613: ST_TO_ADDR
8614: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8615: LD_EXP 17
8619: PUSH
8620: LD_EXP 36
8624: AND
8625: IFFALSE 8728
8627: GO 8629
8629: DISABLE
8630: LD_INT 0
8632: PPUSH
// begin for i := 1 to 5 do
8633: LD_ADDR_VAR 0 1
8637: PUSH
8638: DOUBLE
8639: LD_INT 1
8641: DEC
8642: ST_TO_ADDR
8643: LD_INT 5
8645: PUSH
8646: FOR_TO
8647: IFFALSE 8726
// begin uc_nation := nation_nature ;
8649: LD_ADDR_OWVAR 21
8653: PUSH
8654: LD_INT 0
8656: ST_TO_ADDR
// uc_side := 0 ;
8657: LD_ADDR_OWVAR 20
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8665: LD_ADDR_OWVAR 29
8669: PUSH
8670: LD_INT 12
8672: PUSH
8673: LD_INT 12
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: ST_TO_ADDR
// hc_agressivity := 20 ;
8680: LD_ADDR_OWVAR 35
8684: PUSH
8685: LD_INT 20
8687: ST_TO_ADDR
// hc_class := class_tiger ;
8688: LD_ADDR_OWVAR 28
8692: PUSH
8693: LD_INT 14
8695: ST_TO_ADDR
// hc_gallery :=  ;
8696: LD_ADDR_OWVAR 33
8700: PUSH
8701: LD_STRING 
8703: ST_TO_ADDR
// hc_name :=  ;
8704: LD_ADDR_OWVAR 26
8708: PUSH
8709: LD_STRING 
8711: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8712: CALL_OW 44
8716: PPUSH
8717: LD_INT 0
8719: PPUSH
8720: CALL_OW 51
// end ;
8724: GO 8646
8726: POP
8727: POP
// end ;
8728: PPOPN 1
8730: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8731: LD_EXP 17
8735: PUSH
8736: LD_EXP 37
8740: AND
8741: IFFALSE 8750
8743: GO 8745
8745: DISABLE
// StreamSibBomb ;
8746: CALL 8751 0 0
8750: END
// export function StreamSibBomb ; var i , x , y ; begin
8751: LD_INT 0
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
// result := false ;
8757: LD_ADDR_VAR 0 1
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// for i := 1 to 16 do
8765: LD_ADDR_VAR 0 2
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_INT 16
8777: PUSH
8778: FOR_TO
8779: IFFALSE 8978
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8781: LD_ADDR_VAR 0 3
8785: PUSH
8786: LD_INT 10
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_INT 30
8794: PUSH
8795: LD_INT 40
8797: PUSH
8798: LD_INT 50
8800: PUSH
8801: LD_INT 60
8803: PUSH
8804: LD_INT 70
8806: PUSH
8807: LD_INT 80
8809: PUSH
8810: LD_INT 90
8812: PUSH
8813: LD_INT 100
8815: PUSH
8816: LD_INT 110
8818: PUSH
8819: LD_INT 120
8821: PUSH
8822: LD_INT 130
8824: PUSH
8825: LD_INT 140
8827: PUSH
8828: LD_INT 150
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 15
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8860: LD_ADDR_VAR 0 4
8864: PUSH
8865: LD_INT 10
8867: PUSH
8868: LD_INT 20
8870: PUSH
8871: LD_INT 30
8873: PUSH
8874: LD_INT 40
8876: PUSH
8877: LD_INT 50
8879: PUSH
8880: LD_INT 60
8882: PUSH
8883: LD_INT 70
8885: PUSH
8886: LD_INT 80
8888: PUSH
8889: LD_INT 90
8891: PUSH
8892: LD_INT 100
8894: PUSH
8895: LD_INT 110
8897: PUSH
8898: LD_INT 120
8900: PUSH
8901: LD_INT 130
8903: PUSH
8904: LD_INT 140
8906: PUSH
8907: LD_INT 150
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: LD_INT 15
8932: PPUSH
8933: CALL_OW 12
8937: ARRAY
8938: ST_TO_ADDR
// if ValidHex ( x , y ) then
8939: LD_VAR 0 3
8943: PPUSH
8944: LD_VAR 0 4
8948: PPUSH
8949: CALL_OW 488
8953: IFFALSE 8976
// begin result := [ x , y ] ;
8955: LD_ADDR_VAR 0 1
8959: PUSH
8960: LD_VAR 0 3
8964: PUSH
8965: LD_VAR 0 4
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: ST_TO_ADDR
// break ;
8974: GO 8978
// end ; end ;
8976: GO 8778
8978: POP
8979: POP
// if result then
8980: LD_VAR 0 1
8984: IFFALSE 9044
// begin ToLua ( playSibBomb() ) ;
8986: LD_STRING playSibBomb()
8988: PPUSH
8989: CALL_OW 559
// wait ( 0 0$14 ) ;
8993: LD_INT 490
8995: PPUSH
8996: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9000: LD_VAR 0 1
9004: PUSH
9005: LD_INT 1
9007: ARRAY
9008: PPUSH
9009: LD_VAR 0 1
9013: PUSH
9014: LD_INT 2
9016: ARRAY
9017: PPUSH
9018: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9022: LD_VAR 0 1
9026: PUSH
9027: LD_INT 1
9029: ARRAY
9030: PPUSH
9031: LD_VAR 0 1
9035: PUSH
9036: LD_INT 2
9038: ARRAY
9039: PPUSH
9040: CALL_OW 429
// end ; end ;
9044: LD_VAR 0 1
9048: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9049: LD_EXP 17
9053: PUSH
9054: LD_EXP 39
9058: AND
9059: IFFALSE 9071
9061: GO 9063
9063: DISABLE
// YouLost (  ) ;
9064: LD_STRING 
9066: PPUSH
9067: CALL_OW 104
9071: END
// every 0 0$1 trigger StreamModeActive and sFog do
9072: LD_EXP 17
9076: PUSH
9077: LD_EXP 38
9081: AND
9082: IFFALSE 9096
9084: GO 9086
9086: DISABLE
// FogOff ( your_side ) ;
9087: LD_OWVAR 2
9091: PPUSH
9092: CALL_OW 344
9096: END
// every 0 0$1 trigger StreamModeActive and sSun do
9097: LD_EXP 17
9101: PUSH
9102: LD_EXP 40
9106: AND
9107: IFFALSE 9135
9109: GO 9111
9111: DISABLE
// begin solar_recharge_percent := 0 ;
9112: LD_ADDR_OWVAR 79
9116: PUSH
9117: LD_INT 0
9119: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9120: LD_INT 10500
9122: PPUSH
9123: CALL_OW 67
// solar_recharge_percent := 100 ;
9127: LD_ADDR_OWVAR 79
9131: PUSH
9132: LD_INT 100
9134: ST_TO_ADDR
// end ;
9135: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9136: LD_EXP 17
9140: PUSH
9141: LD_EXP 41
9145: AND
9146: IFFALSE 9385
9148: GO 9150
9150: DISABLE
9151: LD_INT 0
9153: PPUSH
9154: PPUSH
9155: PPUSH
// begin tmp := [ ] ;
9156: LD_ADDR_VAR 0 3
9160: PUSH
9161: EMPTY
9162: ST_TO_ADDR
// for i := 1 to 6 do
9163: LD_ADDR_VAR 0 1
9167: PUSH
9168: DOUBLE
9169: LD_INT 1
9171: DEC
9172: ST_TO_ADDR
9173: LD_INT 6
9175: PUSH
9176: FOR_TO
9177: IFFALSE 9282
// begin uc_nation := nation_nature ;
9179: LD_ADDR_OWVAR 21
9183: PUSH
9184: LD_INT 0
9186: ST_TO_ADDR
// uc_side := 0 ;
9187: LD_ADDR_OWVAR 20
9191: PUSH
9192: LD_INT 0
9194: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9195: LD_ADDR_OWVAR 29
9199: PUSH
9200: LD_INT 12
9202: PUSH
9203: LD_INT 12
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: ST_TO_ADDR
// hc_agressivity := 20 ;
9210: LD_ADDR_OWVAR 35
9214: PUSH
9215: LD_INT 20
9217: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9218: LD_ADDR_OWVAR 28
9222: PUSH
9223: LD_INT 17
9225: ST_TO_ADDR
// hc_gallery :=  ;
9226: LD_ADDR_OWVAR 33
9230: PUSH
9231: LD_STRING 
9233: ST_TO_ADDR
// hc_name :=  ;
9234: LD_ADDR_OWVAR 26
9238: PUSH
9239: LD_STRING 
9241: ST_TO_ADDR
// un := CreateHuman ;
9242: LD_ADDR_VAR 0 2
9246: PUSH
9247: CALL_OW 44
9251: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9252: LD_VAR 0 2
9256: PPUSH
9257: LD_INT 1
9259: PPUSH
9260: CALL_OW 51
// tmp := tmp ^ un ;
9264: LD_ADDR_VAR 0 3
9268: PUSH
9269: LD_VAR 0 3
9273: PUSH
9274: LD_VAR 0 2
9278: ADD
9279: ST_TO_ADDR
// end ;
9280: GO 9176
9282: POP
9283: POP
// repeat wait ( 0 0$1 ) ;
9284: LD_INT 35
9286: PPUSH
9287: CALL_OW 67
// for un in tmp do
9291: LD_ADDR_VAR 0 2
9295: PUSH
9296: LD_VAR 0 3
9300: PUSH
9301: FOR_IN
9302: IFFALSE 9376
// begin if IsDead ( un ) then
9304: LD_VAR 0 2
9308: PPUSH
9309: CALL_OW 301
9313: IFFALSE 9333
// begin tmp := tmp diff un ;
9315: LD_ADDR_VAR 0 3
9319: PUSH
9320: LD_VAR 0 3
9324: PUSH
9325: LD_VAR 0 2
9329: DIFF
9330: ST_TO_ADDR
// continue ;
9331: GO 9301
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9333: LD_VAR 0 2
9337: PPUSH
9338: LD_INT 3
9340: PUSH
9341: LD_INT 22
9343: PUSH
9344: LD_INT 0
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PPUSH
9355: CALL_OW 69
9359: PPUSH
9360: LD_VAR 0 2
9364: PPUSH
9365: CALL_OW 74
9369: PPUSH
9370: CALL_OW 115
// end ;
9374: GO 9301
9376: POP
9377: POP
// until not tmp ;
9378: LD_VAR 0 3
9382: NOT
9383: IFFALSE 9284
// end ;
9385: PPOPN 3
9387: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9388: LD_EXP 17
9392: PUSH
9393: LD_EXP 42
9397: AND
9398: IFFALSE 9452
9400: GO 9402
9402: DISABLE
// begin ToLua ( displayTroll(); ) ;
9403: LD_STRING displayTroll();
9405: PPUSH
9406: CALL_OW 559
// wait ( 3 3$00 ) ;
9410: LD_INT 6300
9412: PPUSH
9413: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9417: LD_STRING hideTroll();
9419: PPUSH
9420: CALL_OW 559
// wait ( 1 1$00 ) ;
9424: LD_INT 2100
9426: PPUSH
9427: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9431: LD_STRING displayTroll();
9433: PPUSH
9434: CALL_OW 559
// wait ( 1 1$00 ) ;
9438: LD_INT 2100
9440: PPUSH
9441: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9445: LD_STRING hideTroll();
9447: PPUSH
9448: CALL_OW 559
// end ;
9452: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9453: LD_EXP 17
9457: PUSH
9458: LD_EXP 43
9462: AND
9463: IFFALSE 9526
9465: GO 9467
9467: DISABLE
9468: LD_INT 0
9470: PPUSH
// begin p := 0 ;
9471: LD_ADDR_VAR 0 1
9475: PUSH
9476: LD_INT 0
9478: ST_TO_ADDR
// repeat game_speed := 1 ;
9479: LD_ADDR_OWVAR 65
9483: PUSH
9484: LD_INT 1
9486: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9487: LD_INT 35
9489: PPUSH
9490: CALL_OW 67
// p := p + 1 ;
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_VAR 0 1
9503: PUSH
9504: LD_INT 1
9506: PLUS
9507: ST_TO_ADDR
// until p >= 60 ;
9508: LD_VAR 0 1
9512: PUSH
9513: LD_INT 60
9515: GREATEREQUAL
9516: IFFALSE 9479
// game_speed := 4 ;
9518: LD_ADDR_OWVAR 65
9522: PUSH
9523: LD_INT 4
9525: ST_TO_ADDR
// end ;
9526: PPOPN 1
9528: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9529: LD_EXP 17
9533: PUSH
9534: LD_EXP 44
9538: AND
9539: IFFALSE 9685
9541: GO 9543
9543: DISABLE
9544: LD_INT 0
9546: PPUSH
9547: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9548: LD_ADDR_VAR 0 1
9552: PUSH
9553: LD_INT 22
9555: PUSH
9556: LD_OWVAR 2
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 2
9567: PUSH
9568: LD_INT 30
9570: PUSH
9571: LD_INT 0
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 30
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PPUSH
9597: CALL_OW 69
9601: ST_TO_ADDR
// if not depot then
9602: LD_VAR 0 1
9606: NOT
9607: IFFALSE 9611
// exit ;
9609: GO 9685
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9611: LD_ADDR_VAR 0 2
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: LD_INT 1
9623: PPUSH
9624: LD_VAR 0 1
9628: PPUSH
9629: CALL_OW 12
9633: ARRAY
9634: PPUSH
9635: CALL_OW 274
9639: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9640: LD_VAR 0 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 0
9650: PPUSH
9651: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9655: LD_VAR 0 2
9659: PPUSH
9660: LD_INT 2
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9670: LD_VAR 0 2
9674: PPUSH
9675: LD_INT 3
9677: PPUSH
9678: LD_INT 0
9680: PPUSH
9681: CALL_OW 277
// end ;
9685: PPOPN 2
9687: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9688: LD_EXP 17
9692: PUSH
9693: LD_EXP 45
9697: AND
9698: IFFALSE 9795
9700: GO 9702
9702: DISABLE
9703: LD_INT 0
9705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9706: LD_ADDR_VAR 0 1
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_OWVAR 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 23
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: PPUSH
9755: CALL_OW 69
9759: ST_TO_ADDR
// if not tmp then
9760: LD_VAR 0 1
9764: NOT
9765: IFFALSE 9769
// exit ;
9767: GO 9795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9769: LD_VAR 0 1
9773: PUSH
9774: LD_INT 1
9776: PPUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 12
9786: ARRAY
9787: PPUSH
9788: LD_INT 200
9790: PPUSH
9791: CALL_OW 234
// end ;
9795: PPOPN 1
9797: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9798: LD_EXP 17
9802: PUSH
9803: LD_EXP 46
9807: AND
9808: IFFALSE 9887
9810: GO 9812
9812: DISABLE
9813: LD_INT 0
9815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9816: LD_ADDR_VAR 0 1
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_OWVAR 2
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// if not tmp then
9852: LD_VAR 0 1
9856: NOT
9857: IFFALSE 9861
// exit ;
9859: GO 9887
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9861: LD_VAR 0 1
9865: PUSH
9866: LD_INT 1
9868: PPUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: CALL_OW 12
9878: ARRAY
9879: PPUSH
9880: LD_INT 60
9882: PPUSH
9883: CALL_OW 234
// end ;
9887: PPOPN 1
9889: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9890: LD_EXP 17
9894: PUSH
9895: LD_EXP 47
9899: AND
9900: IFFALSE 9999
9902: GO 9904
9904: DISABLE
9905: LD_INT 0
9907: PPUSH
9908: PPUSH
// begin enable ;
9909: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9910: LD_ADDR_VAR 0 1
9914: PUSH
9915: LD_INT 22
9917: PUSH
9918: LD_OWVAR 2
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 61
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 33
9935: PUSH
9936: LD_INT 2
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 69
9952: ST_TO_ADDR
// if not tmp then
9953: LD_VAR 0 1
9957: NOT
9958: IFFALSE 9962
// exit ;
9960: GO 9999
// for i in tmp do
9962: LD_ADDR_VAR 0 2
9966: PUSH
9967: LD_VAR 0 1
9971: PUSH
9972: FOR_IN
9973: IFFALSE 9997
// if IsControledBy ( i ) then
9975: LD_VAR 0 2
9979: PPUSH
9980: CALL_OW 312
9984: IFFALSE 9995
// ComUnlink ( i ) ;
9986: LD_VAR 0 2
9990: PPUSH
9991: CALL_OW 136
9995: GO 9972
9997: POP
9998: POP
// end ;
9999: PPOPN 2
10001: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10002: LD_EXP 17
10006: PUSH
10007: LD_EXP 48
10011: AND
10012: IFFALSE 10152
10014: GO 10016
10016: DISABLE
10017: LD_INT 0
10019: PPUSH
10020: PPUSH
// begin ToLua ( displayPowell(); ) ;
10021: LD_STRING displayPowell();
10023: PPUSH
10024: CALL_OW 559
// uc_side := 0 ;
10028: LD_ADDR_OWVAR 20
10032: PUSH
10033: LD_INT 0
10035: ST_TO_ADDR
// uc_nation := 2 ;
10036: LD_ADDR_OWVAR 21
10040: PUSH
10041: LD_INT 2
10043: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10044: LD_ADDR_OWVAR 37
10048: PUSH
10049: LD_INT 14
10051: ST_TO_ADDR
// vc_engine := engine_siberite ;
10052: LD_ADDR_OWVAR 39
10056: PUSH
10057: LD_INT 3
10059: ST_TO_ADDR
// vc_control := control_apeman ;
10060: LD_ADDR_OWVAR 38
10064: PUSH
10065: LD_INT 5
10067: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10068: LD_ADDR_OWVAR 40
10072: PUSH
10073: LD_INT 29
10075: ST_TO_ADDR
// un := CreateVehicle ;
10076: LD_ADDR_VAR 0 2
10080: PUSH
10081: CALL_OW 45
10085: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10086: LD_VAR 0 2
10090: PPUSH
10091: LD_INT 1
10093: PPUSH
10094: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10098: LD_INT 35
10100: PPUSH
10101: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10105: LD_VAR 0 2
10109: PPUSH
10110: LD_INT 22
10112: PUSH
10113: LD_OWVAR 2
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PPUSH
10122: CALL_OW 69
10126: PPUSH
10127: LD_VAR 0 2
10131: PPUSH
10132: CALL_OW 74
10136: PPUSH
10137: CALL_OW 115
// until IsDead ( un ) ;
10141: LD_VAR 0 2
10145: PPUSH
10146: CALL_OW 301
10150: IFFALSE 10098
// end ;
10152: PPOPN 2
10154: END
// every 0 0$1 trigger StreamModeActive and sStu do
10155: LD_EXP 17
10159: PUSH
10160: LD_EXP 56
10164: AND
10165: IFFALSE 10181
10167: GO 10169
10169: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10170: LD_STRING displayStucuk();
10172: PPUSH
10173: CALL_OW 559
// ResetFog ;
10177: CALL_OW 335
// end ;
10181: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10182: LD_EXP 17
10186: PUSH
10187: LD_EXP 49
10191: AND
10192: IFFALSE 10333
10194: GO 10196
10196: DISABLE
10197: LD_INT 0
10199: PPUSH
10200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10201: LD_ADDR_VAR 0 2
10205: PUSH
10206: LD_INT 22
10208: PUSH
10209: LD_OWVAR 2
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 21
10220: PUSH
10221: LD_INT 1
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: ST_TO_ADDR
// if not tmp then
10237: LD_VAR 0 2
10241: NOT
10242: IFFALSE 10246
// exit ;
10244: GO 10333
// un := tmp [ rand ( 1 , tmp ) ] ;
10246: LD_ADDR_VAR 0 1
10250: PUSH
10251: LD_VAR 0 2
10255: PUSH
10256: LD_INT 1
10258: PPUSH
10259: LD_VAR 0 2
10263: PPUSH
10264: CALL_OW 12
10268: ARRAY
10269: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10270: LD_VAR 0 1
10274: PPUSH
10275: LD_INT 0
10277: PPUSH
10278: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10282: LD_VAR 0 1
10286: PPUSH
10287: LD_OWVAR 3
10291: PUSH
10292: LD_VAR 0 1
10296: DIFF
10297: PPUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 74
10307: PPUSH
10308: CALL_OW 115
// wait ( 0 0$20 ) ;
10312: LD_INT 700
10314: PPUSH
10315: CALL_OW 67
// SetSide ( un , your_side ) ;
10319: LD_VAR 0 1
10323: PPUSH
10324: LD_OWVAR 2
10328: PPUSH
10329: CALL_OW 235
// end ;
10333: PPOPN 2
10335: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10336: LD_EXP 17
10340: PUSH
10341: LD_EXP 50
10345: AND
10346: IFFALSE 10452
10348: GO 10350
10350: DISABLE
10351: LD_INT 0
10353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10354: LD_ADDR_VAR 0 1
10358: PUSH
10359: LD_INT 22
10361: PUSH
10362: LD_OWVAR 2
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: LD_INT 30
10376: PUSH
10377: LD_INT 0
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 30
10386: PUSH
10387: LD_INT 1
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 69
10407: ST_TO_ADDR
// if not depot then
10408: LD_VAR 0 1
10412: NOT
10413: IFFALSE 10417
// exit ;
10415: GO 10452
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10417: LD_VAR 0 1
10421: PUSH
10422: LD_INT 1
10424: ARRAY
10425: PPUSH
10426: CALL_OW 250
10430: PPUSH
10431: LD_VAR 0 1
10435: PUSH
10436: LD_INT 1
10438: ARRAY
10439: PPUSH
10440: CALL_OW 251
10444: PPUSH
10445: LD_INT 70
10447: PPUSH
10448: CALL_OW 495
// end ;
10452: PPOPN 1
10454: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10455: LD_EXP 17
10459: PUSH
10460: LD_EXP 51
10464: AND
10465: IFFALSE 10676
10467: GO 10469
10469: DISABLE
10470: LD_INT 0
10472: PPUSH
10473: PPUSH
10474: PPUSH
10475: PPUSH
10476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10477: LD_ADDR_VAR 0 5
10481: PUSH
10482: LD_INT 22
10484: PUSH
10485: LD_OWVAR 2
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 21
10496: PUSH
10497: LD_INT 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 69
10512: ST_TO_ADDR
// if not tmp then
10513: LD_VAR 0 5
10517: NOT
10518: IFFALSE 10522
// exit ;
10520: GO 10676
// for i in tmp do
10522: LD_ADDR_VAR 0 1
10526: PUSH
10527: LD_VAR 0 5
10531: PUSH
10532: FOR_IN
10533: IFFALSE 10674
// begin d := rand ( 0 , 5 ) ;
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: LD_INT 0
10542: PPUSH
10543: LD_INT 5
10545: PPUSH
10546: CALL_OW 12
10550: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10551: LD_ADDR_VAR 0 2
10555: PUSH
10556: LD_VAR 0 1
10560: PPUSH
10561: CALL_OW 250
10565: PPUSH
10566: LD_VAR 0 4
10570: PPUSH
10571: LD_INT 3
10573: PPUSH
10574: LD_INT 12
10576: PPUSH
10577: CALL_OW 12
10581: PPUSH
10582: CALL_OW 272
10586: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10587: LD_ADDR_VAR 0 3
10591: PUSH
10592: LD_VAR 0 1
10596: PPUSH
10597: CALL_OW 251
10601: PPUSH
10602: LD_VAR 0 4
10606: PPUSH
10607: LD_INT 3
10609: PPUSH
10610: LD_INT 12
10612: PPUSH
10613: CALL_OW 12
10617: PPUSH
10618: CALL_OW 273
10622: ST_TO_ADDR
// if ValidHex ( x , y ) then
10623: LD_VAR 0 2
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: CALL_OW 488
10637: IFFALSE 10672
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_VAR 0 2
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: LD_INT 3
10656: PPUSH
10657: LD_INT 6
10659: PPUSH
10660: CALL_OW 12
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 483
// end ;
10672: GO 10532
10674: POP
10675: POP
// end ;
10676: PPOPN 5
10678: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10679: LD_EXP 17
10683: PUSH
10684: LD_EXP 52
10688: AND
10689: IFFALSE 10783
10691: GO 10693
10693: DISABLE
10694: LD_INT 0
10696: PPUSH
10697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: LD_INT 22
10705: PUSH
10706: LD_OWVAR 2
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 32
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 21
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: ST_TO_ADDR
// if not tmp then
10745: LD_VAR 0 2
10749: NOT
10750: IFFALSE 10754
// exit ;
10752: GO 10783
// for i in tmp do
10754: LD_ADDR_VAR 0 1
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: FOR_IN
10765: IFFALSE 10781
// SetFuel ( i , 0 ) ;
10767: LD_VAR 0 1
10771: PPUSH
10772: LD_INT 0
10774: PPUSH
10775: CALL_OW 240
10779: GO 10764
10781: POP
10782: POP
// end ;
10783: PPOPN 2
10785: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10786: LD_EXP 17
10790: PUSH
10791: LD_EXP 53
10795: AND
10796: IFFALSE 10862
10798: GO 10800
10800: DISABLE
10801: LD_INT 0
10803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10804: LD_ADDR_VAR 0 1
10808: PUSH
10809: LD_INT 22
10811: PUSH
10812: LD_OWVAR 2
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 30
10823: PUSH
10824: LD_INT 29
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PPUSH
10835: CALL_OW 69
10839: ST_TO_ADDR
// if not tmp then
10840: LD_VAR 0 1
10844: NOT
10845: IFFALSE 10849
// exit ;
10847: GO 10862
// DestroyUnit ( tmp [ 1 ] ) ;
10849: LD_VAR 0 1
10853: PUSH
10854: LD_INT 1
10856: ARRAY
10857: PPUSH
10858: CALL_OW 65
// end ;
10862: PPOPN 1
10864: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10865: LD_EXP 17
10869: PUSH
10870: LD_EXP 55
10874: AND
10875: IFFALSE 11004
10877: GO 10879
10879: DISABLE
10880: LD_INT 0
10882: PPUSH
// begin uc_side := 0 ;
10883: LD_ADDR_OWVAR 20
10887: PUSH
10888: LD_INT 0
10890: ST_TO_ADDR
// uc_nation := nation_arabian ;
10891: LD_ADDR_OWVAR 21
10895: PUSH
10896: LD_INT 2
10898: ST_TO_ADDR
// hc_gallery :=  ;
10899: LD_ADDR_OWVAR 33
10903: PUSH
10904: LD_STRING 
10906: ST_TO_ADDR
// hc_name :=  ;
10907: LD_ADDR_OWVAR 26
10911: PUSH
10912: LD_STRING 
10914: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10915: LD_INT 1
10917: PPUSH
10918: LD_INT 11
10920: PPUSH
10921: LD_INT 10
10923: PPUSH
10924: CALL_OW 380
// un := CreateHuman ;
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: CALL_OW 44
10937: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10938: LD_VAR 0 1
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10950: LD_INT 35
10952: PPUSH
10953: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10957: LD_VAR 0 1
10961: PPUSH
10962: LD_INT 22
10964: PUSH
10965: LD_OWVAR 2
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PPUSH
10974: CALL_OW 69
10978: PPUSH
10979: LD_VAR 0 1
10983: PPUSH
10984: CALL_OW 74
10988: PPUSH
10989: CALL_OW 115
// until IsDead ( un ) ;
10993: LD_VAR 0 1
10997: PPUSH
10998: CALL_OW 301
11002: IFFALSE 10950
// end ;
11004: PPOPN 1
11006: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11007: LD_EXP 17
11011: PUSH
11012: LD_EXP 57
11016: AND
11017: IFFALSE 11029
11019: GO 11021
11021: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11022: LD_STRING earthquake(getX(game), 0, 32)
11024: PPUSH
11025: CALL_OW 559
11029: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11030: LD_EXP 17
11034: PUSH
11035: LD_EXP 58
11039: AND
11040: IFFALSE 11131
11042: GO 11044
11044: DISABLE
11045: LD_INT 0
11047: PPUSH
// begin enable ;
11048: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11049: LD_ADDR_VAR 0 1
11053: PUSH
11054: LD_INT 22
11056: PUSH
11057: LD_OWVAR 2
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 21
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 33
11078: PUSH
11079: LD_INT 3
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: ST_TO_ADDR
// if not tmp then
11096: LD_VAR 0 1
11100: NOT
11101: IFFALSE 11105
// exit ;
11103: GO 11131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11105: LD_VAR 0 1
11109: PUSH
11110: LD_INT 1
11112: PPUSH
11113: LD_VAR 0 1
11117: PPUSH
11118: CALL_OW 12
11122: ARRAY
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 234
// end ;
11131: PPOPN 1
11133: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11134: LD_EXP 17
11138: PUSH
11139: LD_EXP 59
11143: AND
11144: IFFALSE 11285
11146: GO 11148
11148: DISABLE
11149: LD_INT 0
11151: PPUSH
11152: PPUSH
11153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11154: LD_ADDR_VAR 0 3
11158: PUSH
11159: LD_INT 22
11161: PUSH
11162: LD_OWVAR 2
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 25
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: ST_TO_ADDR
// if not tmp then
11190: LD_VAR 0 3
11194: NOT
11195: IFFALSE 11199
// exit ;
11197: GO 11285
// un := tmp [ rand ( 1 , tmp ) ] ;
11199: LD_ADDR_VAR 0 2
11203: PUSH
11204: LD_VAR 0 3
11208: PUSH
11209: LD_INT 1
11211: PPUSH
11212: LD_VAR 0 3
11216: PPUSH
11217: CALL_OW 12
11221: ARRAY
11222: ST_TO_ADDR
// if Crawls ( un ) then
11223: LD_VAR 0 2
11227: PPUSH
11228: CALL_OW 318
11232: IFFALSE 11243
// ComWalk ( un ) ;
11234: LD_VAR 0 2
11238: PPUSH
11239: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11243: LD_VAR 0 2
11247: PPUSH
11248: LD_INT 9
11250: PPUSH
11251: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11255: LD_INT 28
11257: PPUSH
11258: LD_OWVAR 2
11262: PPUSH
11263: LD_INT 2
11265: PPUSH
11266: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11270: LD_INT 29
11272: PPUSH
11273: LD_OWVAR 2
11277: PPUSH
11278: LD_INT 2
11280: PPUSH
11281: CALL_OW 322
// end ;
11285: PPOPN 3
11287: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11288: LD_EXP 17
11292: PUSH
11293: LD_EXP 60
11297: AND
11298: IFFALSE 11409
11300: GO 11302
11302: DISABLE
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
11307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_INT 22
11315: PUSH
11316: LD_OWVAR 2
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 25
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 69
11343: ST_TO_ADDR
// if not tmp then
11344: LD_VAR 0 3
11348: NOT
11349: IFFALSE 11353
// exit ;
11351: GO 11409
// un := tmp [ rand ( 1 , tmp ) ] ;
11353: LD_ADDR_VAR 0 2
11357: PUSH
11358: LD_VAR 0 3
11362: PUSH
11363: LD_INT 1
11365: PPUSH
11366: LD_VAR 0 3
11370: PPUSH
11371: CALL_OW 12
11375: ARRAY
11376: ST_TO_ADDR
// if Crawls ( un ) then
11377: LD_VAR 0 2
11381: PPUSH
11382: CALL_OW 318
11386: IFFALSE 11397
// ComWalk ( un ) ;
11388: LD_VAR 0 2
11392: PPUSH
11393: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11397: LD_VAR 0 2
11401: PPUSH
11402: LD_INT 8
11404: PPUSH
11405: CALL_OW 336
// end ;
11409: PPOPN 3
11411: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11412: LD_EXP 17
11416: PUSH
11417: LD_EXP 61
11421: AND
11422: IFFALSE 11566
11424: GO 11426
11426: DISABLE
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11431: LD_ADDR_VAR 0 2
11435: PUSH
11436: LD_INT 22
11438: PUSH
11439: LD_OWVAR 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 2
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: LD_INT 34
11463: PUSH
11464: LD_INT 12
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 34
11473: PUSH
11474: LD_INT 51
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 34
11483: PUSH
11484: LD_INT 32
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 69
11506: ST_TO_ADDR
// if not tmp then
11507: LD_VAR 0 2
11511: NOT
11512: IFFALSE 11516
// exit ;
11514: GO 11566
// for i in tmp do
11516: LD_ADDR_VAR 0 1
11520: PUSH
11521: LD_VAR 0 2
11525: PUSH
11526: FOR_IN
11527: IFFALSE 11564
// if GetCargo ( i , mat_artifact ) = 0 then
11529: LD_VAR 0 1
11533: PPUSH
11534: LD_INT 4
11536: PPUSH
11537: CALL_OW 289
11541: PUSH
11542: LD_INT 0
11544: EQUAL
11545: IFFALSE 11562
// SetCargo ( i , mat_siberit , 100 ) ;
11547: LD_VAR 0 1
11551: PPUSH
11552: LD_INT 3
11554: PPUSH
11555: LD_INT 100
11557: PPUSH
11558: CALL_OW 290
11562: GO 11526
11564: POP
11565: POP
// end ;
11566: PPOPN 2
11568: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11569: LD_EXP 17
11573: PUSH
11574: LD_EXP 62
11578: AND
11579: IFFALSE 11762
11581: GO 11583
11583: DISABLE
11584: LD_INT 0
11586: PPUSH
11587: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: LD_INT 22
11595: PUSH
11596: LD_OWVAR 2
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PPUSH
11605: CALL_OW 69
11609: ST_TO_ADDR
// if not tmp then
11610: LD_VAR 0 2
11614: NOT
11615: IFFALSE 11619
// exit ;
11617: GO 11762
// for i := 1 to 2 do
11619: LD_ADDR_VAR 0 1
11623: PUSH
11624: DOUBLE
11625: LD_INT 1
11627: DEC
11628: ST_TO_ADDR
11629: LD_INT 2
11631: PUSH
11632: FOR_TO
11633: IFFALSE 11760
// begin uc_side := your_side ;
11635: LD_ADDR_OWVAR 20
11639: PUSH
11640: LD_OWVAR 2
11644: ST_TO_ADDR
// uc_nation := nation_american ;
11645: LD_ADDR_OWVAR 21
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// vc_chassis := us_morphling ;
11653: LD_ADDR_OWVAR 37
11657: PUSH
11658: LD_INT 5
11660: ST_TO_ADDR
// vc_engine := engine_siberite ;
11661: LD_ADDR_OWVAR 39
11665: PUSH
11666: LD_INT 3
11668: ST_TO_ADDR
// vc_control := control_computer ;
11669: LD_ADDR_OWVAR 38
11673: PUSH
11674: LD_INT 3
11676: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11677: LD_ADDR_OWVAR 40
11681: PUSH
11682: LD_INT 10
11684: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11685: LD_VAR 0 2
11689: PUSH
11690: LD_INT 1
11692: ARRAY
11693: PPUSH
11694: CALL_OW 310
11698: NOT
11699: IFFALSE 11746
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11701: CALL_OW 45
11705: PPUSH
11706: LD_VAR 0 2
11710: PUSH
11711: LD_INT 1
11713: ARRAY
11714: PPUSH
11715: CALL_OW 250
11719: PPUSH
11720: LD_VAR 0 2
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: PPUSH
11729: CALL_OW 251
11733: PPUSH
11734: LD_INT 12
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 50
11744: GO 11758
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11746: CALL_OW 45
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 51
// end ;
11758: GO 11632
11760: POP
11761: POP
// end ;
11762: PPOPN 2
11764: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11765: LD_EXP 17
11769: PUSH
11770: LD_EXP 63
11774: AND
11775: IFFALSE 11997
11777: GO 11779
11779: DISABLE
11780: LD_INT 0
11782: PPUSH
11783: PPUSH
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11788: LD_ADDR_VAR 0 6
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_OWVAR 2
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 21
11807: PUSH
11808: LD_INT 1
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: LD_INT 3
11817: PUSH
11818: LD_INT 23
11820: PUSH
11821: LD_INT 0
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 69
11841: ST_TO_ADDR
// if not tmp then
11842: LD_VAR 0 6
11846: NOT
11847: IFFALSE 11851
// exit ;
11849: GO 11997
// s1 := rand ( 1 , 4 ) ;
11851: LD_ADDR_VAR 0 2
11855: PUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_INT 4
11861: PPUSH
11862: CALL_OW 12
11866: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11867: LD_ADDR_VAR 0 4
11871: PUSH
11872: LD_VAR 0 6
11876: PUSH
11877: LD_INT 1
11879: ARRAY
11880: PPUSH
11881: LD_VAR 0 2
11885: PPUSH
11886: CALL_OW 259
11890: ST_TO_ADDR
// if s1 = 1 then
11891: LD_VAR 0 2
11895: PUSH
11896: LD_INT 1
11898: EQUAL
11899: IFFALSE 11919
// s2 := rand ( 2 , 4 ) else
11901: LD_ADDR_VAR 0 3
11905: PUSH
11906: LD_INT 2
11908: PPUSH
11909: LD_INT 4
11911: PPUSH
11912: CALL_OW 12
11916: ST_TO_ADDR
11917: GO 11927
// s2 := 1 ;
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11927: LD_ADDR_VAR 0 5
11931: PUSH
11932: LD_VAR 0 6
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: CALL_OW 259
11950: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11951: LD_VAR 0 6
11955: PUSH
11956: LD_INT 1
11958: ARRAY
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_VAR 0 5
11969: PPUSH
11970: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11974: LD_VAR 0 6
11978: PUSH
11979: LD_INT 1
11981: ARRAY
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_VAR 0 4
11992: PPUSH
11993: CALL_OW 237
// end ;
11997: PPOPN 6
11999: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12000: LD_EXP 17
12004: PUSH
12005: LD_EXP 64
12009: AND
12010: IFFALSE 12089
12012: GO 12014
12014: DISABLE
12015: LD_INT 0
12017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12018: LD_ADDR_VAR 0 1
12022: PUSH
12023: LD_INT 22
12025: PUSH
12026: LD_OWVAR 2
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 30
12037: PUSH
12038: LD_INT 3
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: ST_TO_ADDR
// if not tmp then
12054: LD_VAR 0 1
12058: NOT
12059: IFFALSE 12063
// exit ;
12061: GO 12089
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12063: LD_VAR 0 1
12067: PUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL_OW 12
12080: ARRAY
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 234
// end ;
12089: PPOPN 1
12091: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12092: LD_EXP 17
12096: PUSH
12097: LD_EXP 65
12101: AND
12102: IFFALSE 12214
12104: GO 12106
12106: DISABLE
12107: LD_INT 0
12109: PPUSH
12110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12111: LD_ADDR_VAR 0 2
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_OWVAR 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 27
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 30
12143: PUSH
12144: LD_INT 26
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 30
12153: PUSH
12154: LD_INT 28
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PPUSH
12171: CALL_OW 69
12175: ST_TO_ADDR
// if not tmp then
12176: LD_VAR 0 2
12180: NOT
12181: IFFALSE 12185
// exit ;
12183: GO 12214
// for i in tmp do
12185: LD_ADDR_VAR 0 1
12189: PUSH
12190: LD_VAR 0 2
12194: PUSH
12195: FOR_IN
12196: IFFALSE 12212
// SetLives ( i , 1 ) ;
12198: LD_VAR 0 1
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: CALL_OW 234
12210: GO 12195
12212: POP
12213: POP
// end ;
12214: PPOPN 2
12216: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12217: LD_EXP 17
12221: PUSH
12222: LD_EXP 66
12226: AND
12227: IFFALSE 12501
12229: GO 12231
12231: DISABLE
12232: LD_INT 0
12234: PPUSH
12235: PPUSH
12236: PPUSH
// begin i := rand ( 1 , 7 ) ;
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: LD_INT 1
12244: PPUSH
12245: LD_INT 7
12247: PPUSH
12248: CALL_OW 12
12252: ST_TO_ADDR
// case i of 1 :
12253: LD_VAR 0 1
12257: PUSH
12258: LD_INT 1
12260: DOUBLE
12261: EQUAL
12262: IFTRUE 12266
12264: GO 12276
12266: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12267: LD_STRING earthquake(getX(game), 0, 32)
12269: PPUSH
12270: CALL_OW 559
12274: GO 12501
12276: LD_INT 2
12278: DOUBLE
12279: EQUAL
12280: IFTRUE 12284
12282: GO 12298
12284: POP
// begin ToLua ( displayStucuk(); ) ;
12285: LD_STRING displayStucuk();
12287: PPUSH
12288: CALL_OW 559
// ResetFog ;
12292: CALL_OW 335
// end ; 3 :
12296: GO 12501
12298: LD_INT 3
12300: DOUBLE
12301: EQUAL
12302: IFTRUE 12306
12304: GO 12410
12306: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12307: LD_ADDR_VAR 0 2
12311: PUSH
12312: LD_INT 22
12314: PUSH
12315: LD_OWVAR 2
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 25
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PPUSH
12338: CALL_OW 69
12342: ST_TO_ADDR
// if not tmp then
12343: LD_VAR 0 2
12347: NOT
12348: IFFALSE 12352
// exit ;
12350: GO 12501
// un := tmp [ rand ( 1 , tmp ) ] ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: LD_VAR 0 2
12361: PUSH
12362: LD_INT 1
12364: PPUSH
12365: LD_VAR 0 2
12369: PPUSH
12370: CALL_OW 12
12374: ARRAY
12375: ST_TO_ADDR
// if Crawls ( un ) then
12376: LD_VAR 0 3
12380: PPUSH
12381: CALL_OW 318
12385: IFFALSE 12396
// ComWalk ( un ) ;
12387: LD_VAR 0 3
12391: PPUSH
12392: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 8
12403: PPUSH
12404: CALL_OW 336
// end ; 4 :
12408: GO 12501
12410: LD_INT 4
12412: DOUBLE
12413: EQUAL
12414: IFTRUE 12418
12416: GO 12479
12418: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12419: LD_ADDR_VAR 0 2
12423: PUSH
12424: LD_INT 22
12426: PUSH
12427: LD_OWVAR 2
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 30
12438: PUSH
12439: LD_INT 29
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 69
12454: ST_TO_ADDR
// if not tmp then
12455: LD_VAR 0 2
12459: NOT
12460: IFFALSE 12464
// exit ;
12462: GO 12501
// DestroyUnit ( tmp [ 1 ] ) ;
12464: LD_VAR 0 2
12468: PUSH
12469: LD_INT 1
12471: ARRAY
12472: PPUSH
12473: CALL_OW 65
// end ; 5 .. 7 :
12477: GO 12501
12479: LD_INT 5
12481: DOUBLE
12482: GREATEREQUAL
12483: IFFALSE 12491
12485: LD_INT 7
12487: DOUBLE
12488: LESSEQUAL
12489: IFTRUE 12493
12491: GO 12500
12493: POP
// StreamSibBomb ; end ;
12494: CALL 8751 0 0
12498: GO 12501
12500: POP
// end ;
12501: PPOPN 3
12503: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12504: LD_EXP 17
12508: PUSH
12509: LD_EXP 67
12513: AND
12514: IFFALSE 12670
12516: GO 12518
12518: DISABLE
12519: LD_INT 0
12521: PPUSH
12522: PPUSH
12523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12524: LD_ADDR_VAR 0 2
12528: PUSH
12529: LD_INT 81
12531: PUSH
12532: LD_OWVAR 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 21
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 21
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 69
12577: ST_TO_ADDR
// if not tmp then
12578: LD_VAR 0 2
12582: NOT
12583: IFFALSE 12587
// exit ;
12585: GO 12670
// p := 0 ;
12587: LD_ADDR_VAR 0 3
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12595: LD_INT 35
12597: PPUSH
12598: CALL_OW 67
// p := p + 1 ;
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_VAR 0 3
12611: PUSH
12612: LD_INT 1
12614: PLUS
12615: ST_TO_ADDR
// for i in tmp do
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: FOR_IN
12627: IFFALSE 12658
// if GetLives ( i ) < 1000 then
12629: LD_VAR 0 1
12633: PPUSH
12634: CALL_OW 256
12638: PUSH
12639: LD_INT 1000
12641: LESS
12642: IFFALSE 12656
// SetLives ( i , 1000 ) ;
12644: LD_VAR 0 1
12648: PPUSH
12649: LD_INT 1000
12651: PPUSH
12652: CALL_OW 234
12656: GO 12626
12658: POP
12659: POP
// until p > 20 ;
12660: LD_VAR 0 3
12664: PUSH
12665: LD_INT 20
12667: GREATER
12668: IFFALSE 12595
// end ;
12670: PPOPN 3
12672: END
// every 0 0$1 trigger StreamModeActive and sTime do
12673: LD_EXP 17
12677: PUSH
12678: LD_EXP 68
12682: AND
12683: IFFALSE 12718
12685: GO 12687
12687: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12688: LD_INT 28
12690: PPUSH
12691: LD_OWVAR 2
12695: PPUSH
12696: LD_INT 2
12698: PPUSH
12699: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12703: LD_INT 30
12705: PPUSH
12706: LD_OWVAR 2
12710: PPUSH
12711: LD_INT 2
12713: PPUSH
12714: CALL_OW 322
// end ;
12718: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12719: LD_EXP 17
12723: PUSH
12724: LD_EXP 69
12728: AND
12729: IFFALSE 12850
12731: GO 12733
12733: DISABLE
12734: LD_INT 0
12736: PPUSH
12737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12738: LD_ADDR_VAR 0 2
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_OWVAR 2
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: LD_INT 23
12770: PUSH
12771: LD_INT 0
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: ST_TO_ADDR
// if not tmp then
12792: LD_VAR 0 2
12796: NOT
12797: IFFALSE 12801
// exit ;
12799: GO 12850
// for i in tmp do
12801: LD_ADDR_VAR 0 1
12805: PUSH
12806: LD_VAR 0 2
12810: PUSH
12811: FOR_IN
12812: IFFALSE 12848
// begin if Crawls ( i ) then
12814: LD_VAR 0 1
12818: PPUSH
12819: CALL_OW 318
12823: IFFALSE 12834
// ComWalk ( i ) ;
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 138
// SetClass ( i , 2 ) ;
12834: LD_VAR 0 1
12838: PPUSH
12839: LD_INT 2
12841: PPUSH
12842: CALL_OW 336
// end ;
12846: GO 12811
12848: POP
12849: POP
// end ;
12850: PPOPN 2
12852: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12853: LD_EXP 17
12857: PUSH
12858: LD_EXP 70
12862: AND
12863: IFFALSE 13144
12865: GO 12867
12867: DISABLE
12868: LD_INT 0
12870: PPUSH
12871: PPUSH
12872: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12873: LD_OWVAR 2
12877: PPUSH
12878: LD_INT 9
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12891: LD_INT 9
12893: PPUSH
12894: LD_OWVAR 2
12898: PPUSH
12899: CALL_OW 343
// uc_side := 9 ;
12903: LD_ADDR_OWVAR 20
12907: PUSH
12908: LD_INT 9
12910: ST_TO_ADDR
// uc_nation := 2 ;
12911: LD_ADDR_OWVAR 21
12915: PUSH
12916: LD_INT 2
12918: ST_TO_ADDR
// hc_name := Dark Warrior ;
12919: LD_ADDR_OWVAR 26
12923: PUSH
12924: LD_STRING Dark Warrior
12926: ST_TO_ADDR
// hc_gallery :=  ;
12927: LD_ADDR_OWVAR 33
12931: PUSH
12932: LD_STRING 
12934: ST_TO_ADDR
// hc_noskilllimit := true ;
12935: LD_ADDR_OWVAR 76
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12943: LD_ADDR_OWVAR 31
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 30
12956: PUSH
12957: LD_INT 30
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: ST_TO_ADDR
// un := CreateHuman ;
12966: LD_ADDR_VAR 0 3
12970: PUSH
12971: CALL_OW 44
12975: ST_TO_ADDR
// hc_noskilllimit := false ;
12976: LD_ADDR_OWVAR 76
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 51
// p := 0 ;
12996: LD_ADDR_VAR 0 2
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13004: LD_INT 35
13006: PPUSH
13007: CALL_OW 67
// p := p + 1 ;
13011: LD_ADDR_VAR 0 2
13015: PUSH
13016: LD_VAR 0 2
13020: PUSH
13021: LD_INT 1
13023: PLUS
13024: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13025: LD_VAR 0 3
13029: PPUSH
13030: CALL_OW 256
13034: PUSH
13035: LD_INT 1000
13037: LESS
13038: IFFALSE 13052
// SetLives ( un , 1000 ) ;
13040: LD_VAR 0 3
13044: PPUSH
13045: LD_INT 1000
13047: PPUSH
13048: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13052: LD_VAR 0 3
13056: PPUSH
13057: LD_INT 81
13059: PUSH
13060: LD_OWVAR 2
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 91
13071: PUSH
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 30
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: PPUSH
13094: LD_VAR 0 3
13098: PPUSH
13099: CALL_OW 74
13103: PPUSH
13104: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13108: LD_VAR 0 2
13112: PUSH
13113: LD_INT 60
13115: GREATER
13116: PUSH
13117: LD_VAR 0 3
13121: PPUSH
13122: CALL_OW 301
13126: OR
13127: IFFALSE 13004
// if un then
13129: LD_VAR 0 3
13133: IFFALSE 13144
// RemoveUnit ( un ) ;
13135: LD_VAR 0 3
13139: PPUSH
13140: CALL_OW 64
// end ;
13144: PPOPN 3
13146: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13147: LD_INT 0
13149: PPUSH
// case cmd of 301 :
13150: LD_VAR 0 1
13154: PUSH
13155: LD_INT 301
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13195
13163: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13164: LD_VAR 0 6
13168: PPUSH
13169: LD_VAR 0 7
13173: PPUSH
13174: LD_VAR 0 8
13178: PPUSH
13179: LD_VAR 0 4
13183: PPUSH
13184: LD_VAR 0 5
13188: PPUSH
13189: CALL 14396 0 5
13193: GO 13316
13195: LD_INT 302
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13240
13203: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13204: LD_VAR 0 6
13208: PPUSH
13209: LD_VAR 0 7
13213: PPUSH
13214: LD_VAR 0 8
13218: PPUSH
13219: LD_VAR 0 9
13223: PPUSH
13224: LD_VAR 0 4
13228: PPUSH
13229: LD_VAR 0 5
13233: PPUSH
13234: CALL 14487 0 6
13238: GO 13316
13240: LD_INT 303
13242: DOUBLE
13243: EQUAL
13244: IFTRUE 13248
13246: GO 13285
13248: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13249: LD_VAR 0 6
13253: PPUSH
13254: LD_VAR 0 7
13258: PPUSH
13259: LD_VAR 0 8
13263: PPUSH
13264: LD_VAR 0 9
13268: PPUSH
13269: LD_VAR 0 4
13273: PPUSH
13274: LD_VAR 0 5
13278: PPUSH
13279: CALL 13321 0 6
13283: GO 13316
13285: LD_INT 304
13287: DOUBLE
13288: EQUAL
13289: IFTRUE 13293
13291: GO 13315
13293: POP
// hHackTeleport ( unit , x , y ) ; end ;
13294: LD_VAR 0 2
13298: PPUSH
13299: LD_VAR 0 4
13303: PPUSH
13304: LD_VAR 0 5
13308: PPUSH
13309: CALL 15080 0 3
13313: GO 13316
13315: POP
// end ;
13316: LD_VAR 0 12
13320: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13321: LD_INT 0
13323: PPUSH
13324: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13325: LD_VAR 0 1
13329: PUSH
13330: LD_INT 1
13332: LESS
13333: PUSH
13334: LD_VAR 0 1
13338: PUSH
13339: LD_INT 3
13341: GREATER
13342: OR
13343: PUSH
13344: LD_VAR 0 5
13348: PPUSH
13349: LD_VAR 0 6
13353: PPUSH
13354: CALL_OW 428
13358: OR
13359: IFFALSE 13363
// exit ;
13361: GO 14083
// uc_side := your_side ;
13363: LD_ADDR_OWVAR 20
13367: PUSH
13368: LD_OWVAR 2
13372: ST_TO_ADDR
// uc_nation := nation ;
13373: LD_ADDR_OWVAR 21
13377: PUSH
13378: LD_VAR 0 1
13382: ST_TO_ADDR
// bc_level = 1 ;
13383: LD_ADDR_OWVAR 43
13387: PUSH
13388: LD_INT 1
13390: ST_TO_ADDR
// case btype of 1 :
13391: LD_VAR 0 2
13395: PUSH
13396: LD_INT 1
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13415
13404: POP
// bc_type := b_depot ; 2 :
13405: LD_ADDR_OWVAR 42
13409: PUSH
13410: LD_INT 0
13412: ST_TO_ADDR
13413: GO 14027
13415: LD_INT 2
13417: DOUBLE
13418: EQUAL
13419: IFTRUE 13423
13421: GO 13434
13423: POP
// bc_type := b_warehouse ; 3 :
13424: LD_ADDR_OWVAR 42
13428: PUSH
13429: LD_INT 1
13431: ST_TO_ADDR
13432: GO 14027
13434: LD_INT 3
13436: DOUBLE
13437: EQUAL
13438: IFTRUE 13442
13440: GO 13453
13442: POP
// bc_type := b_lab ; 4 .. 9 :
13443: LD_ADDR_OWVAR 42
13447: PUSH
13448: LD_INT 6
13450: ST_TO_ADDR
13451: GO 14027
13453: LD_INT 4
13455: DOUBLE
13456: GREATEREQUAL
13457: IFFALSE 13465
13459: LD_INT 9
13461: DOUBLE
13462: LESSEQUAL
13463: IFTRUE 13467
13465: GO 13519
13467: POP
// begin bc_type := b_lab_half ;
13468: LD_ADDR_OWVAR 42
13472: PUSH
13473: LD_INT 7
13475: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13476: LD_ADDR_OWVAR 44
13480: PUSH
13481: LD_INT 10
13483: PUSH
13484: LD_INT 11
13486: PUSH
13487: LD_INT 12
13489: PUSH
13490: LD_INT 15
13492: PUSH
13493: LD_INT 14
13495: PUSH
13496: LD_INT 13
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: LD_VAR 0 2
13511: PUSH
13512: LD_INT 3
13514: MINUS
13515: ARRAY
13516: ST_TO_ADDR
// end ; 10 .. 13 :
13517: GO 14027
13519: LD_INT 10
13521: DOUBLE
13522: GREATEREQUAL
13523: IFFALSE 13531
13525: LD_INT 13
13527: DOUBLE
13528: LESSEQUAL
13529: IFTRUE 13533
13531: GO 13610
13533: POP
// begin bc_type := b_lab_full ;
13534: LD_ADDR_OWVAR 42
13538: PUSH
13539: LD_INT 8
13541: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13542: LD_ADDR_OWVAR 44
13546: PUSH
13547: LD_INT 10
13549: PUSH
13550: LD_INT 12
13552: PUSH
13553: LD_INT 14
13555: PUSH
13556: LD_INT 13
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_VAR 0 2
13569: PUSH
13570: LD_INT 9
13572: MINUS
13573: ARRAY
13574: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13575: LD_ADDR_OWVAR 45
13579: PUSH
13580: LD_INT 11
13582: PUSH
13583: LD_INT 15
13585: PUSH
13586: LD_INT 12
13588: PUSH
13589: LD_INT 15
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_VAR 0 2
13602: PUSH
13603: LD_INT 9
13605: MINUS
13606: ARRAY
13607: ST_TO_ADDR
// end ; 14 :
13608: GO 14027
13610: LD_INT 14
13612: DOUBLE
13613: EQUAL
13614: IFTRUE 13618
13616: GO 13629
13618: POP
// bc_type := b_workshop ; 15 :
13619: LD_ADDR_OWVAR 42
13623: PUSH
13624: LD_INT 2
13626: ST_TO_ADDR
13627: GO 14027
13629: LD_INT 15
13631: DOUBLE
13632: EQUAL
13633: IFTRUE 13637
13635: GO 13648
13637: POP
// bc_type := b_factory ; 16 :
13638: LD_ADDR_OWVAR 42
13642: PUSH
13643: LD_INT 3
13645: ST_TO_ADDR
13646: GO 14027
13648: LD_INT 16
13650: DOUBLE
13651: EQUAL
13652: IFTRUE 13656
13654: GO 13667
13656: POP
// bc_type := b_ext_gun ; 17 :
13657: LD_ADDR_OWVAR 42
13661: PUSH
13662: LD_INT 17
13664: ST_TO_ADDR
13665: GO 14027
13667: LD_INT 17
13669: DOUBLE
13670: EQUAL
13671: IFTRUE 13675
13673: GO 13703
13675: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13676: LD_ADDR_OWVAR 42
13680: PUSH
13681: LD_INT 19
13683: PUSH
13684: LD_INT 23
13686: PUSH
13687: LD_INT 19
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: PUSH
13695: LD_VAR 0 1
13699: ARRAY
13700: ST_TO_ADDR
13701: GO 14027
13703: LD_INT 18
13705: DOUBLE
13706: EQUAL
13707: IFTRUE 13711
13709: GO 13722
13711: POP
// bc_type := b_ext_radar ; 19 :
13712: LD_ADDR_OWVAR 42
13716: PUSH
13717: LD_INT 20
13719: ST_TO_ADDR
13720: GO 14027
13722: LD_INT 19
13724: DOUBLE
13725: EQUAL
13726: IFTRUE 13730
13728: GO 13741
13730: POP
// bc_type := b_ext_radio ; 20 :
13731: LD_ADDR_OWVAR 42
13735: PUSH
13736: LD_INT 22
13738: ST_TO_ADDR
13739: GO 14027
13741: LD_INT 20
13743: DOUBLE
13744: EQUAL
13745: IFTRUE 13749
13747: GO 13760
13749: POP
// bc_type := b_ext_siberium ; 21 :
13750: LD_ADDR_OWVAR 42
13754: PUSH
13755: LD_INT 21
13757: ST_TO_ADDR
13758: GO 14027
13760: LD_INT 21
13762: DOUBLE
13763: EQUAL
13764: IFTRUE 13768
13766: GO 13779
13768: POP
// bc_type := b_ext_computer ; 22 :
13769: LD_ADDR_OWVAR 42
13773: PUSH
13774: LD_INT 24
13776: ST_TO_ADDR
13777: GO 14027
13779: LD_INT 22
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 13798
13787: POP
// bc_type := b_ext_track ; 23 :
13788: LD_ADDR_OWVAR 42
13792: PUSH
13793: LD_INT 16
13795: ST_TO_ADDR
13796: GO 14027
13798: LD_INT 23
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13817
13806: POP
// bc_type := b_ext_laser ; 24 :
13807: LD_ADDR_OWVAR 42
13811: PUSH
13812: LD_INT 25
13814: ST_TO_ADDR
13815: GO 14027
13817: LD_INT 24
13819: DOUBLE
13820: EQUAL
13821: IFTRUE 13825
13823: GO 13836
13825: POP
// bc_type := b_control_tower ; 25 :
13826: LD_ADDR_OWVAR 42
13830: PUSH
13831: LD_INT 36
13833: ST_TO_ADDR
13834: GO 14027
13836: LD_INT 25
13838: DOUBLE
13839: EQUAL
13840: IFTRUE 13844
13842: GO 13855
13844: POP
// bc_type := b_breastwork ; 26 :
13845: LD_ADDR_OWVAR 42
13849: PUSH
13850: LD_INT 31
13852: ST_TO_ADDR
13853: GO 14027
13855: LD_INT 26
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 13874
13863: POP
// bc_type := b_bunker ; 27 :
13864: LD_ADDR_OWVAR 42
13868: PUSH
13869: LD_INT 32
13871: ST_TO_ADDR
13872: GO 14027
13874: LD_INT 27
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 13893
13882: POP
// bc_type := b_turret ; 28 :
13883: LD_ADDR_OWVAR 42
13887: PUSH
13888: LD_INT 33
13890: ST_TO_ADDR
13891: GO 14027
13893: LD_INT 28
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 13912
13901: POP
// bc_type := b_armoury ; 29 :
13902: LD_ADDR_OWVAR 42
13906: PUSH
13907: LD_INT 4
13909: ST_TO_ADDR
13910: GO 14027
13912: LD_INT 29
13914: DOUBLE
13915: EQUAL
13916: IFTRUE 13920
13918: GO 13931
13920: POP
// bc_type := b_barracks ; 30 :
13921: LD_ADDR_OWVAR 42
13925: PUSH
13926: LD_INT 5
13928: ST_TO_ADDR
13929: GO 14027
13931: LD_INT 30
13933: DOUBLE
13934: EQUAL
13935: IFTRUE 13939
13937: GO 13950
13939: POP
// bc_type := b_solar_power ; 31 :
13940: LD_ADDR_OWVAR 42
13944: PUSH
13945: LD_INT 27
13947: ST_TO_ADDR
13948: GO 14027
13950: LD_INT 31
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 13969
13958: POP
// bc_type := b_oil_power ; 32 :
13959: LD_ADDR_OWVAR 42
13963: PUSH
13964: LD_INT 26
13966: ST_TO_ADDR
13967: GO 14027
13969: LD_INT 32
13971: DOUBLE
13972: EQUAL
13973: IFTRUE 13977
13975: GO 13988
13977: POP
// bc_type := b_siberite_power ; 33 :
13978: LD_ADDR_OWVAR 42
13982: PUSH
13983: LD_INT 28
13985: ST_TO_ADDR
13986: GO 14027
13988: LD_INT 33
13990: DOUBLE
13991: EQUAL
13992: IFTRUE 13996
13994: GO 14007
13996: POP
// bc_type := b_oil_mine ; 34 :
13997: LD_ADDR_OWVAR 42
14001: PUSH
14002: LD_INT 29
14004: ST_TO_ADDR
14005: GO 14027
14007: LD_INT 34
14009: DOUBLE
14010: EQUAL
14011: IFTRUE 14015
14013: GO 14026
14015: POP
// bc_type := b_siberite_mine ; end ;
14016: LD_ADDR_OWVAR 42
14020: PUSH
14021: LD_INT 30
14023: ST_TO_ADDR
14024: GO 14027
14026: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14027: LD_ADDR_VAR 0 8
14031: PUSH
14032: LD_VAR 0 5
14036: PPUSH
14037: LD_VAR 0 6
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: CALL_OW 47
14051: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14052: LD_OWVAR 42
14056: PUSH
14057: LD_INT 32
14059: PUSH
14060: LD_INT 33
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: IN
14067: IFFALSE 14083
// PlaceWeaponTurret ( b , weapon ) ;
14069: LD_VAR 0 8
14073: PPUSH
14074: LD_VAR 0 4
14078: PPUSH
14079: CALL_OW 431
// end ;
14083: LD_VAR 0 7
14087: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14088: LD_INT 0
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14094: LD_ADDR_VAR 0 4
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_OWVAR 2
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 30
14116: PUSH
14117: LD_INT 0
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: ST_TO_ADDR
// if not tmp then
14148: LD_VAR 0 4
14152: NOT
14153: IFFALSE 14157
// exit ;
14155: GO 14216
// for i in tmp do
14157: LD_ADDR_VAR 0 2
14161: PUSH
14162: LD_VAR 0 4
14166: PUSH
14167: FOR_IN
14168: IFFALSE 14214
// for j = 1 to 3 do
14170: LD_ADDR_VAR 0 3
14174: PUSH
14175: DOUBLE
14176: LD_INT 1
14178: DEC
14179: ST_TO_ADDR
14180: LD_INT 3
14182: PUSH
14183: FOR_TO
14184: IFFALSE 14210
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14186: LD_VAR 0 2
14190: PPUSH
14191: CALL_OW 274
14195: PPUSH
14196: LD_VAR 0 3
14200: PPUSH
14201: LD_INT 99999
14203: PPUSH
14204: CALL_OW 277
14208: GO 14183
14210: POP
14211: POP
14212: GO 14167
14214: POP
14215: POP
// end ;
14216: LD_VAR 0 1
14220: RET
// export function hHackSetLevel10 ; var i , j ; begin
14221: LD_INT 0
14223: PPUSH
14224: PPUSH
14225: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14226: LD_ADDR_VAR 0 2
14230: PUSH
14231: LD_INT 21
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PPUSH
14241: CALL_OW 69
14245: PUSH
14246: FOR_IN
14247: IFFALSE 14299
// if IsSelected ( i ) then
14249: LD_VAR 0 2
14253: PPUSH
14254: CALL_OW 306
14258: IFFALSE 14297
// begin for j := 1 to 4 do
14260: LD_ADDR_VAR 0 3
14264: PUSH
14265: DOUBLE
14266: LD_INT 1
14268: DEC
14269: ST_TO_ADDR
14270: LD_INT 4
14272: PUSH
14273: FOR_TO
14274: IFFALSE 14295
// SetSkill ( i , j , 10 ) ;
14276: LD_VAR 0 2
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 10
14288: PPUSH
14289: CALL_OW 237
14293: GO 14273
14295: POP
14296: POP
// end ;
14297: GO 14246
14299: POP
14300: POP
// end ;
14301: LD_VAR 0 1
14305: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14306: LD_INT 0
14308: PPUSH
14309: PPUSH
14310: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14311: LD_ADDR_VAR 0 2
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_OWVAR 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 21
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PPUSH
14342: CALL_OW 69
14346: PUSH
14347: FOR_IN
14348: IFFALSE 14389
// begin for j := 1 to 4 do
14350: LD_ADDR_VAR 0 3
14354: PUSH
14355: DOUBLE
14356: LD_INT 1
14358: DEC
14359: ST_TO_ADDR
14360: LD_INT 4
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14385
// SetSkill ( i , j , 10 ) ;
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 10
14378: PPUSH
14379: CALL_OW 237
14383: GO 14363
14385: POP
14386: POP
// end ;
14387: GO 14347
14389: POP
14390: POP
// end ;
14391: LD_VAR 0 1
14395: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14396: LD_INT 0
14398: PPUSH
// uc_side := your_side ;
14399: LD_ADDR_OWVAR 20
14403: PUSH
14404: LD_OWVAR 2
14408: ST_TO_ADDR
// uc_nation := nation ;
14409: LD_ADDR_OWVAR 21
14413: PUSH
14414: LD_VAR 0 1
14418: ST_TO_ADDR
// InitHc ;
14419: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14423: LD_INT 0
14425: PPUSH
14426: LD_VAR 0 2
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14440: LD_VAR 0 4
14444: PPUSH
14445: LD_VAR 0 5
14449: PPUSH
14450: CALL_OW 428
14454: PUSH
14455: LD_INT 0
14457: EQUAL
14458: IFFALSE 14482
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14460: CALL_OW 44
14464: PPUSH
14465: LD_VAR 0 4
14469: PPUSH
14470: LD_VAR 0 5
14474: PPUSH
14475: LD_INT 1
14477: PPUSH
14478: CALL_OW 48
// end ;
14482: LD_VAR 0 6
14486: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14487: LD_INT 0
14489: PPUSH
14490: PPUSH
// uc_side := your_side ;
14491: LD_ADDR_OWVAR 20
14495: PUSH
14496: LD_OWVAR 2
14500: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14501: LD_VAR 0 1
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: IN
14528: IFFALSE 14540
// uc_nation := nation_american else
14530: LD_ADDR_OWVAR 21
14534: PUSH
14535: LD_INT 1
14537: ST_TO_ADDR
14538: GO 14583
// if chassis in [ 11 , 12 , 13 , 14 ] then
14540: LD_VAR 0 1
14544: PUSH
14545: LD_INT 11
14547: PUSH
14548: LD_INT 12
14550: PUSH
14551: LD_INT 13
14553: PUSH
14554: LD_INT 14
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: IN
14563: IFFALSE 14575
// uc_nation := nation_arabian else
14565: LD_ADDR_OWVAR 21
14569: PUSH
14570: LD_INT 2
14572: ST_TO_ADDR
14573: GO 14583
// uc_nation := nation_russian ;
14575: LD_ADDR_OWVAR 21
14579: PUSH
14580: LD_INT 3
14582: ST_TO_ADDR
// vc_chassis := chassis ;
14583: LD_ADDR_OWVAR 37
14587: PUSH
14588: LD_VAR 0 1
14592: ST_TO_ADDR
// vc_engine := engine ;
14593: LD_ADDR_OWVAR 39
14597: PUSH
14598: LD_VAR 0 2
14602: ST_TO_ADDR
// vc_control := control ;
14603: LD_ADDR_OWVAR 38
14607: PUSH
14608: LD_VAR 0 3
14612: ST_TO_ADDR
// vc_weapon := weapon ;
14613: LD_ADDR_OWVAR 40
14617: PUSH
14618: LD_VAR 0 4
14622: ST_TO_ADDR
// un := CreateVehicle ;
14623: LD_ADDR_VAR 0 8
14627: PUSH
14628: CALL_OW 45
14632: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14633: LD_VAR 0 8
14637: PPUSH
14638: LD_INT 0
14640: PPUSH
14641: LD_INT 5
14643: PPUSH
14644: CALL_OW 12
14648: PPUSH
14649: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14653: LD_VAR 0 8
14657: PPUSH
14658: LD_VAR 0 5
14662: PPUSH
14663: LD_VAR 0 6
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 48
// end ;
14675: LD_VAR 0 7
14679: RET
// export hInvincible ; every 1 do
14680: GO 14682
14682: DISABLE
// hInvincible := [ ] ;
14683: LD_ADDR_EXP 71
14687: PUSH
14688: EMPTY
14689: ST_TO_ADDR
14690: END
// every 10 do var i ;
14691: GO 14693
14693: DISABLE
14694: LD_INT 0
14696: PPUSH
// begin enable ;
14697: ENABLE
// if not hInvincible then
14698: LD_EXP 71
14702: NOT
14703: IFFALSE 14707
// exit ;
14705: GO 14751
// for i in hInvincible do
14707: LD_ADDR_VAR 0 1
14711: PUSH
14712: LD_EXP 71
14716: PUSH
14717: FOR_IN
14718: IFFALSE 14749
// if GetLives ( i ) < 1000 then
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 256
14729: PUSH
14730: LD_INT 1000
14732: LESS
14733: IFFALSE 14747
// SetLives ( i , 1000 ) ;
14735: LD_VAR 0 1
14739: PPUSH
14740: LD_INT 1000
14742: PPUSH
14743: CALL_OW 234
14747: GO 14717
14749: POP
14750: POP
// end ;
14751: PPOPN 1
14753: END
// export function hHackInvincible ; var i ; begin
14754: LD_INT 0
14756: PPUSH
14757: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14758: LD_ADDR_VAR 0 2
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 1
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: LD_INT 21
14778: PUSH
14779: LD_INT 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: PPUSH
14791: CALL_OW 69
14795: PUSH
14796: FOR_IN
14797: IFFALSE 14858
// if IsSelected ( i ) then
14799: LD_VAR 0 2
14803: PPUSH
14804: CALL_OW 306
14808: IFFALSE 14856
// begin if i in hInvincible then
14810: LD_VAR 0 2
14814: PUSH
14815: LD_EXP 71
14819: IN
14820: IFFALSE 14840
// hInvincible := hInvincible diff i else
14822: LD_ADDR_EXP 71
14826: PUSH
14827: LD_EXP 71
14831: PUSH
14832: LD_VAR 0 2
14836: DIFF
14837: ST_TO_ADDR
14838: GO 14856
// hInvincible := hInvincible union i ;
14840: LD_ADDR_EXP 71
14844: PUSH
14845: LD_EXP 71
14849: PUSH
14850: LD_VAR 0 2
14854: UNION
14855: ST_TO_ADDR
// end ;
14856: GO 14796
14858: POP
14859: POP
// end ;
14860: LD_VAR 0 1
14864: RET
// export function hHackInvisible ; var i , j ; begin
14865: LD_INT 0
14867: PPUSH
14868: PPUSH
14869: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14870: LD_ADDR_VAR 0 2
14874: PUSH
14875: LD_INT 21
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: PUSH
14890: FOR_IN
14891: IFFALSE 14915
// if IsSelected ( i ) then
14893: LD_VAR 0 2
14897: PPUSH
14898: CALL_OW 306
14902: IFFALSE 14913
// ComForceInvisible ( i ) ;
14904: LD_VAR 0 2
14908: PPUSH
14909: CALL_OW 496
14913: GO 14890
14915: POP
14916: POP
// end ;
14917: LD_VAR 0 1
14921: RET
// export function hHackChangeYourSide ; begin
14922: LD_INT 0
14924: PPUSH
// if your_side = 8 then
14925: LD_OWVAR 2
14929: PUSH
14930: LD_INT 8
14932: EQUAL
14933: IFFALSE 14945
// your_side := 0 else
14935: LD_ADDR_OWVAR 2
14939: PUSH
14940: LD_INT 0
14942: ST_TO_ADDR
14943: GO 14959
// your_side := your_side + 1 ;
14945: LD_ADDR_OWVAR 2
14949: PUSH
14950: LD_OWVAR 2
14954: PUSH
14955: LD_INT 1
14957: PLUS
14958: ST_TO_ADDR
// end ;
14959: LD_VAR 0 1
14963: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14964: LD_INT 0
14966: PPUSH
14967: PPUSH
14968: PPUSH
// for i in all_units do
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_OWVAR 3
14978: PUSH
14979: FOR_IN
14980: IFFALSE 15058
// if IsSelected ( i ) then
14982: LD_VAR 0 2
14986: PPUSH
14987: CALL_OW 306
14991: IFFALSE 15056
// begin j := GetSide ( i ) ;
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_VAR 0 2
15002: PPUSH
15003: CALL_OW 255
15007: ST_TO_ADDR
// if j = 8 then
15008: LD_VAR 0 3
15012: PUSH
15013: LD_INT 8
15015: EQUAL
15016: IFFALSE 15028
// j := 0 else
15018: LD_ADDR_VAR 0 3
15022: PUSH
15023: LD_INT 0
15025: ST_TO_ADDR
15026: GO 15042
// j := j + 1 ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_VAR 0 3
15037: PUSH
15038: LD_INT 1
15040: PLUS
15041: ST_TO_ADDR
// SetSide ( i , j ) ;
15042: LD_VAR 0 2
15046: PPUSH
15047: LD_VAR 0 3
15051: PPUSH
15052: CALL_OW 235
// end ;
15056: GO 14979
15058: POP
15059: POP
// end ;
15060: LD_VAR 0 1
15064: RET
// export function hHackFog ; begin
15065: LD_INT 0
15067: PPUSH
// FogOff ( true ) ;
15068: LD_INT 1
15070: PPUSH
15071: CALL_OW 344
// end ;
15075: LD_VAR 0 1
15079: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15080: LD_INT 0
15082: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15083: LD_VAR 0 1
15087: PPUSH
15088: LD_VAR 0 2
15092: PPUSH
15093: LD_VAR 0 3
15097: PPUSH
15098: LD_INT 1
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: CALL_OW 483
// CenterOnXY ( x , y ) ;
15108: LD_VAR 0 2
15112: PPUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: CALL_OW 84
// end ; end_of_file
15122: LD_VAR 0 4
15126: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15127: LD_VAR 0 1
15131: PUSH
15132: LD_INT 200
15134: DOUBLE
15135: GREATEREQUAL
15136: IFFALSE 15144
15138: LD_INT 299
15140: DOUBLE
15141: LESSEQUAL
15142: IFTRUE 15146
15144: GO 15178
15146: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15147: LD_VAR 0 1
15151: PPUSH
15152: LD_VAR 0 2
15156: PPUSH
15157: LD_VAR 0 3
15161: PPUSH
15162: LD_VAR 0 4
15166: PPUSH
15167: LD_VAR 0 5
15171: PPUSH
15172: CALL 15372 0 5
15176: GO 15255
15178: LD_INT 300
15180: DOUBLE
15181: GREATEREQUAL
15182: IFFALSE 15190
15184: LD_INT 399
15186: DOUBLE
15187: LESSEQUAL
15188: IFTRUE 15192
15190: GO 15254
15192: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15193: LD_VAR 0 1
15197: PPUSH
15198: LD_VAR 0 2
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_VAR 0 4
15212: PPUSH
15213: LD_VAR 0 5
15217: PPUSH
15218: LD_VAR 0 6
15222: PPUSH
15223: LD_VAR 0 7
15227: PPUSH
15228: LD_VAR 0 8
15232: PPUSH
15233: LD_VAR 0 9
15237: PPUSH
15238: LD_VAR 0 10
15242: PPUSH
15243: LD_VAR 0 11
15247: PPUSH
15248: CALL 13147 0 11
15252: GO 15255
15254: POP
// end ; end_of_file
15255: PPOPN 11
15257: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15258: LD_INT 0
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 264
15273: PUSH
15274: LD_EXP 5
15278: EQUAL
15279: IFFALSE 15351
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15281: LD_INT 68
15283: PPUSH
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 255
15293: PPUSH
15294: CALL_OW 321
15298: PUSH
15299: LD_INT 2
15301: EQUAL
15302: IFFALSE 15314
// eff := 70 else
15304: LD_ADDR_VAR 0 4
15308: PUSH
15309: LD_INT 70
15311: ST_TO_ADDR
15312: GO 15322
// eff := 30 ;
15314: LD_ADDR_VAR 0 4
15318: PUSH
15319: LD_INT 30
15321: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 250
15331: PPUSH
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 251
15341: PPUSH
15342: LD_VAR 0 4
15346: PPUSH
15347: CALL_OW 495
// end ; end ;
15351: LD_VAR 0 2
15355: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15356: LD_INT 0
15358: PPUSH
// end ;
15359: LD_VAR 0 4
15363: RET
// export function SOS_Command ( cmd ) ; begin
15364: LD_INT 0
15366: PPUSH
// end ;
15367: LD_VAR 0 2
15371: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15372: LD_INT 0
15374: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 250
15382: EQUAL
15383: PUSH
15384: LD_VAR 0 2
15388: PPUSH
15389: CALL_OW 264
15393: PUSH
15394: LD_EXP 8
15398: EQUAL
15399: AND
15400: IFFALSE 15421
// MinerPlaceMine ( unit , x , y ) ;
15402: LD_VAR 0 2
15406: PPUSH
15407: LD_VAR 0 4
15411: PPUSH
15412: LD_VAR 0 5
15416: PPUSH
15417: CALL 17762 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15421: LD_VAR 0 1
15425: PUSH
15426: LD_INT 251
15428: EQUAL
15429: PUSH
15430: LD_VAR 0 2
15434: PPUSH
15435: CALL_OW 264
15439: PUSH
15440: LD_EXP 8
15444: EQUAL
15445: AND
15446: IFFALSE 15467
// MinerDetonateMine ( unit , x , y ) ;
15448: LD_VAR 0 2
15452: PPUSH
15453: LD_VAR 0 4
15457: PPUSH
15458: LD_VAR 0 5
15462: PPUSH
15463: CALL 18039 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15467: LD_VAR 0 1
15471: PUSH
15472: LD_INT 252
15474: EQUAL
15475: PUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: CALL_OW 264
15485: PUSH
15486: LD_EXP 8
15490: EQUAL
15491: AND
15492: IFFALSE 15513
// MinerCreateMinefield ( unit , x , y ) ;
15494: LD_VAR 0 2
15498: PPUSH
15499: LD_VAR 0 4
15503: PPUSH
15504: LD_VAR 0 5
15508: PPUSH
15509: CALL 18456 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15513: LD_VAR 0 1
15517: PUSH
15518: LD_INT 253
15520: EQUAL
15521: PUSH
15522: LD_VAR 0 2
15526: PPUSH
15527: CALL_OW 257
15531: PUSH
15532: LD_INT 5
15534: EQUAL
15535: AND
15536: IFFALSE 15557
// ComBinocular ( unit , x , y ) ;
15538: LD_VAR 0 2
15542: PPUSH
15543: LD_VAR 0 4
15547: PPUSH
15548: LD_VAR 0 5
15552: PPUSH
15553: CALL 18827 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15557: LD_VAR 0 1
15561: PUSH
15562: LD_INT 254
15564: EQUAL
15565: PUSH
15566: LD_VAR 0 2
15570: PPUSH
15571: CALL_OW 264
15575: PUSH
15576: LD_EXP 3
15580: EQUAL
15581: AND
15582: PUSH
15583: LD_VAR 0 3
15587: PPUSH
15588: CALL_OW 263
15592: PUSH
15593: LD_INT 3
15595: EQUAL
15596: AND
15597: IFFALSE 15613
// HackDestroyVehicle ( unit , selectedUnit ) ;
15599: LD_VAR 0 2
15603: PPUSH
15604: LD_VAR 0 3
15608: PPUSH
15609: CALL 17122 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15613: LD_VAR 0 1
15617: PUSH
15618: LD_INT 255
15620: EQUAL
15621: PUSH
15622: LD_VAR 0 2
15626: PPUSH
15627: CALL_OW 264
15631: PUSH
15632: LD_INT 14
15634: PUSH
15635: LD_INT 53
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: IN
15642: AND
15643: PUSH
15644: LD_VAR 0 4
15648: PPUSH
15649: LD_VAR 0 5
15653: PPUSH
15654: CALL_OW 488
15658: AND
15659: IFFALSE 15683
// CutTreeXYR ( unit , x , y , 12 ) ;
15661: LD_VAR 0 2
15665: PPUSH
15666: LD_VAR 0 4
15670: PPUSH
15671: LD_VAR 0 5
15675: PPUSH
15676: LD_INT 12
15678: PPUSH
15679: CALL 15688 0 4
// end ;
15683: LD_VAR 0 6
15687: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15688: LD_INT 0
15690: PPUSH
15691: PPUSH
15692: PPUSH
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
15697: PPUSH
15698: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15699: LD_VAR 0 1
15703: NOT
15704: PUSH
15705: LD_VAR 0 2
15709: PPUSH
15710: LD_VAR 0 3
15714: PPUSH
15715: CALL_OW 488
15719: NOT
15720: OR
15721: PUSH
15722: LD_VAR 0 4
15726: NOT
15727: OR
15728: IFFALSE 15732
// exit ;
15730: GO 16072
// list := [ ] ;
15732: LD_ADDR_VAR 0 13
15736: PUSH
15737: EMPTY
15738: ST_TO_ADDR
// if x - r < 0 then
15739: LD_VAR 0 2
15743: PUSH
15744: LD_VAR 0 4
15748: MINUS
15749: PUSH
15750: LD_INT 0
15752: LESS
15753: IFFALSE 15765
// min_x := 0 else
15755: LD_ADDR_VAR 0 7
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
15763: GO 15781
// min_x := x - r ;
15765: LD_ADDR_VAR 0 7
15769: PUSH
15770: LD_VAR 0 2
15774: PUSH
15775: LD_VAR 0 4
15779: MINUS
15780: ST_TO_ADDR
// if y - r < 0 then
15781: LD_VAR 0 3
15785: PUSH
15786: LD_VAR 0 4
15790: MINUS
15791: PUSH
15792: LD_INT 0
15794: LESS
15795: IFFALSE 15807
// min_y := 0 else
15797: LD_ADDR_VAR 0 8
15801: PUSH
15802: LD_INT 0
15804: ST_TO_ADDR
15805: GO 15823
// min_y := y - r ;
15807: LD_ADDR_VAR 0 8
15811: PUSH
15812: LD_VAR 0 3
15816: PUSH
15817: LD_VAR 0 4
15821: MINUS
15822: ST_TO_ADDR
// max_x := x + r ;
15823: LD_ADDR_VAR 0 9
15827: PUSH
15828: LD_VAR 0 2
15832: PUSH
15833: LD_VAR 0 4
15837: PLUS
15838: ST_TO_ADDR
// max_y := y + r ;
15839: LD_ADDR_VAR 0 10
15843: PUSH
15844: LD_VAR 0 3
15848: PUSH
15849: LD_VAR 0 4
15853: PLUS
15854: ST_TO_ADDR
// for _x = min_x to max_x do
15855: LD_ADDR_VAR 0 11
15859: PUSH
15860: DOUBLE
15861: LD_VAR 0 7
15865: DEC
15866: ST_TO_ADDR
15867: LD_VAR 0 9
15871: PUSH
15872: FOR_TO
15873: IFFALSE 15990
// for _y = min_y to max_y do
15875: LD_ADDR_VAR 0 12
15879: PUSH
15880: DOUBLE
15881: LD_VAR 0 8
15885: DEC
15886: ST_TO_ADDR
15887: LD_VAR 0 10
15891: PUSH
15892: FOR_TO
15893: IFFALSE 15986
// begin if not ValidHex ( _x , _y ) then
15895: LD_VAR 0 11
15899: PPUSH
15900: LD_VAR 0 12
15904: PPUSH
15905: CALL_OW 488
15909: NOT
15910: IFFALSE 15914
// continue ;
15912: GO 15892
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15914: LD_VAR 0 11
15918: PPUSH
15919: LD_VAR 0 12
15923: PPUSH
15924: CALL_OW 351
15928: PUSH
15929: LD_VAR 0 11
15933: PPUSH
15934: LD_VAR 0 12
15938: PPUSH
15939: CALL_OW 554
15943: AND
15944: IFFALSE 15984
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15946: LD_ADDR_VAR 0 13
15950: PUSH
15951: LD_VAR 0 13
15955: PPUSH
15956: LD_VAR 0 13
15960: PUSH
15961: LD_INT 1
15963: PLUS
15964: PPUSH
15965: LD_VAR 0 11
15969: PUSH
15970: LD_VAR 0 12
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 2
15983: ST_TO_ADDR
// end ;
15984: GO 15892
15986: POP
15987: POP
15988: GO 15872
15990: POP
15991: POP
// if not list then
15992: LD_VAR 0 13
15996: NOT
15997: IFFALSE 16001
// exit ;
15999: GO 16072
// for i in list do
16001: LD_ADDR_VAR 0 6
16005: PUSH
16006: LD_VAR 0 13
16010: PUSH
16011: FOR_IN
16012: IFFALSE 16070
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_STRING M
16021: PUSH
16022: LD_VAR 0 6
16026: PUSH
16027: LD_INT 1
16029: ARRAY
16030: PUSH
16031: LD_VAR 0 6
16035: PUSH
16036: LD_INT 2
16038: ARRAY
16039: PUSH
16040: LD_INT 0
16042: PUSH
16043: LD_INT 0
16045: PUSH
16046: LD_INT 0
16048: PUSH
16049: LD_INT 0
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: PUSH
16061: EMPTY
16062: LIST
16063: PPUSH
16064: CALL_OW 447
16068: GO 16011
16070: POP
16071: POP
// end ;
16072: LD_VAR 0 5
16076: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16077: LD_EXP 72
16081: NOT
16082: IFFALSE 16132
16084: GO 16086
16086: DISABLE
// begin initHack := true ;
16087: LD_ADDR_EXP 72
16091: PUSH
16092: LD_INT 1
16094: ST_TO_ADDR
// hackTanks := [ ] ;
16095: LD_ADDR_EXP 73
16099: PUSH
16100: EMPTY
16101: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16102: LD_ADDR_EXP 74
16106: PUSH
16107: EMPTY
16108: ST_TO_ADDR
// hackLimit := 3 ;
16109: LD_ADDR_EXP 75
16113: PUSH
16114: LD_INT 3
16116: ST_TO_ADDR
// hackDist := 12 ;
16117: LD_ADDR_EXP 76
16121: PUSH
16122: LD_INT 12
16124: ST_TO_ADDR
// hackCounter := [ ] ;
16125: LD_ADDR_EXP 77
16129: PUSH
16130: EMPTY
16131: ST_TO_ADDR
// end ;
16132: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16133: LD_EXP 72
16137: PUSH
16138: LD_INT 34
16140: PUSH
16141: LD_EXP 3
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PPUSH
16150: CALL_OW 69
16154: AND
16155: IFFALSE 16410
16157: GO 16159
16159: DISABLE
16160: LD_INT 0
16162: PPUSH
16163: PPUSH
// begin enable ;
16164: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16165: LD_ADDR_VAR 0 1
16169: PUSH
16170: LD_INT 34
16172: PUSH
16173: LD_EXP 3
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: PUSH
16187: FOR_IN
16188: IFFALSE 16408
// begin if not i in hackTanks then
16190: LD_VAR 0 1
16194: PUSH
16195: LD_EXP 73
16199: IN
16200: NOT
16201: IFFALSE 16284
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16203: LD_ADDR_EXP 73
16207: PUSH
16208: LD_EXP 73
16212: PPUSH
16213: LD_EXP 73
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: PPUSH
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 1
16231: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16232: LD_ADDR_EXP 74
16236: PUSH
16237: LD_EXP 74
16241: PPUSH
16242: LD_EXP 74
16246: PUSH
16247: LD_INT 1
16249: PLUS
16250: PPUSH
16251: EMPTY
16252: PPUSH
16253: CALL_OW 1
16257: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16258: LD_ADDR_EXP 77
16262: PUSH
16263: LD_EXP 77
16267: PPUSH
16268: LD_EXP 77
16272: PUSH
16273: LD_INT 1
16275: PLUS
16276: PPUSH
16277: EMPTY
16278: PPUSH
16279: CALL_OW 1
16283: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16284: LD_VAR 0 1
16288: PPUSH
16289: CALL_OW 302
16293: NOT
16294: IFFALSE 16307
// begin HackUnlinkAll ( i ) ;
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL 16413 0 1
// continue ;
16305: GO 16187
// end ; HackCheckCapturedStatus ( i ) ;
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL 16856 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16316: LD_ADDR_VAR 0 2
16320: PUSH
16321: LD_INT 81
16323: PUSH
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 255
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 33
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 91
16350: PUSH
16351: LD_VAR 0 1
16355: PUSH
16356: LD_EXP 76
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 50
16368: PUSH
16369: EMPTY
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: PPUSH
16378: CALL_OW 69
16382: ST_TO_ADDR
// if not tmp then
16383: LD_VAR 0 2
16387: NOT
16388: IFFALSE 16392
// continue ;
16390: GO 16187
// HackLink ( i , tmp ) ;
16392: LD_VAR 0 1
16396: PPUSH
16397: LD_VAR 0 2
16401: PPUSH
16402: CALL 16549 0 2
// end ;
16406: GO 16187
16408: POP
16409: POP
// end ;
16410: PPOPN 2
16412: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
// if not hack in hackTanks then
16418: LD_VAR 0 1
16422: PUSH
16423: LD_EXP 73
16427: IN
16428: NOT
16429: IFFALSE 16433
// exit ;
16431: GO 16544
// index := GetElementIndex ( hackTanks , hack ) ;
16433: LD_ADDR_VAR 0 4
16437: PUSH
16438: LD_EXP 73
16442: PPUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL 23978 0 2
16452: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16453: LD_EXP 74
16457: PUSH
16458: LD_VAR 0 4
16462: ARRAY
16463: IFFALSE 16544
// begin for i in hackTanksCaptured [ index ] do
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: LD_EXP 74
16474: PUSH
16475: LD_VAR 0 4
16479: ARRAY
16480: PUSH
16481: FOR_IN
16482: IFFALSE 16508
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16484: LD_VAR 0 3
16488: PUSH
16489: LD_INT 1
16491: ARRAY
16492: PPUSH
16493: LD_VAR 0 3
16497: PUSH
16498: LD_INT 2
16500: ARRAY
16501: PPUSH
16502: CALL_OW 235
16506: GO 16481
16508: POP
16509: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16510: LD_ADDR_EXP 74
16514: PUSH
16515: LD_EXP 74
16519: PPUSH
16520: LD_VAR 0 4
16524: PPUSH
16525: EMPTY
16526: PPUSH
16527: CALL_OW 1
16531: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16532: LD_VAR 0 1
16536: PPUSH
16537: LD_INT 0
16539: PPUSH
16540: CALL_OW 505
// end ; end ;
16544: LD_VAR 0 2
16548: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16549: LD_INT 0
16551: PPUSH
16552: PPUSH
16553: PPUSH
// if not hack in hackTanks or not vehicles then
16554: LD_VAR 0 1
16558: PUSH
16559: LD_EXP 73
16563: IN
16564: NOT
16565: PUSH
16566: LD_VAR 0 2
16570: NOT
16571: OR
16572: IFFALSE 16576
// exit ;
16574: GO 16851
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: LD_VAR 0 1
16585: PPUSH
16586: LD_VAR 0 2
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: LD_INT 1
16596: PPUSH
16597: CALL 24628 0 4
16601: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16602: LD_ADDR_VAR 0 5
16606: PUSH
16607: LD_EXP 73
16611: PPUSH
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL 23978 0 2
16621: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16622: LD_EXP 74
16626: PUSH
16627: LD_VAR 0 5
16631: ARRAY
16632: PUSH
16633: LD_EXP 75
16637: LESS
16638: IFFALSE 16827
// begin for i := 1 to vehicles do
16640: LD_ADDR_VAR 0 4
16644: PUSH
16645: DOUBLE
16646: LD_INT 1
16648: DEC
16649: ST_TO_ADDR
16650: LD_VAR 0 2
16654: PUSH
16655: FOR_TO
16656: IFFALSE 16825
// begin if hackTanksCaptured [ index ] = hackLimit then
16658: LD_EXP 74
16662: PUSH
16663: LD_VAR 0 5
16667: ARRAY
16668: PUSH
16669: LD_EXP 75
16673: EQUAL
16674: IFFALSE 16678
// break ;
16676: GO 16825
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16678: LD_ADDR_EXP 77
16682: PUSH
16683: LD_EXP 77
16687: PPUSH
16688: LD_VAR 0 5
16692: PPUSH
16693: LD_EXP 77
16697: PUSH
16698: LD_VAR 0 5
16702: ARRAY
16703: PUSH
16704: LD_INT 1
16706: PLUS
16707: PPUSH
16708: CALL_OW 1
16712: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16713: LD_ADDR_EXP 74
16717: PUSH
16718: LD_EXP 74
16722: PPUSH
16723: LD_VAR 0 5
16727: PUSH
16728: LD_EXP 74
16732: PUSH
16733: LD_VAR 0 5
16737: ARRAY
16738: PUSH
16739: LD_INT 1
16741: PLUS
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PPUSH
16747: LD_VAR 0 2
16751: PUSH
16752: LD_VAR 0 4
16756: ARRAY
16757: PUSH
16758: LD_VAR 0 2
16762: PUSH
16763: LD_VAR 0 4
16767: ARRAY
16768: PPUSH
16769: CALL_OW 255
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PPUSH
16778: CALL 24193 0 3
16782: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16783: LD_VAR 0 2
16787: PUSH
16788: LD_VAR 0 4
16792: ARRAY
16793: PPUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 255
16803: PPUSH
16804: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16808: LD_VAR 0 2
16812: PUSH
16813: LD_VAR 0 4
16817: ARRAY
16818: PPUSH
16819: CALL_OW 141
// end ;
16823: GO 16655
16825: POP
16826: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_EXP 74
16836: PUSH
16837: LD_VAR 0 5
16841: ARRAY
16842: PUSH
16843: LD_INT 0
16845: PLUS
16846: PPUSH
16847: CALL_OW 505
// end ;
16851: LD_VAR 0 3
16855: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16856: LD_INT 0
16858: PPUSH
16859: PPUSH
16860: PPUSH
16861: PPUSH
// if not hack in hackTanks then
16862: LD_VAR 0 1
16866: PUSH
16867: LD_EXP 73
16871: IN
16872: NOT
16873: IFFALSE 16877
// exit ;
16875: GO 17117
// index := GetElementIndex ( hackTanks , hack ) ;
16877: LD_ADDR_VAR 0 4
16881: PUSH
16882: LD_EXP 73
16886: PPUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL 23978 0 2
16896: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16897: LD_ADDR_VAR 0 3
16901: PUSH
16902: DOUBLE
16903: LD_EXP 74
16907: PUSH
16908: LD_VAR 0 4
16912: ARRAY
16913: INC
16914: ST_TO_ADDR
16915: LD_INT 1
16917: PUSH
16918: FOR_DOWNTO
16919: IFFALSE 17091
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16921: LD_ADDR_VAR 0 5
16925: PUSH
16926: LD_EXP 74
16930: PUSH
16931: LD_VAR 0 4
16935: ARRAY
16936: PUSH
16937: LD_VAR 0 3
16941: ARRAY
16942: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16943: LD_VAR 0 5
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: PPUSH
16952: CALL_OW 302
16956: NOT
16957: PUSH
16958: LD_VAR 0 5
16962: PUSH
16963: LD_INT 1
16965: ARRAY
16966: PPUSH
16967: CALL_OW 255
16971: PUSH
16972: LD_VAR 0 1
16976: PPUSH
16977: CALL_OW 255
16981: NONEQUAL
16982: OR
16983: IFFALSE 17089
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16985: LD_VAR 0 5
16989: PUSH
16990: LD_INT 1
16992: ARRAY
16993: PPUSH
16994: CALL_OW 305
16998: PUSH
16999: LD_VAR 0 5
17003: PUSH
17004: LD_INT 1
17006: ARRAY
17007: PPUSH
17008: CALL_OW 255
17012: PUSH
17013: LD_VAR 0 1
17017: PPUSH
17018: CALL_OW 255
17022: EQUAL
17023: AND
17024: IFFALSE 17048
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17026: LD_VAR 0 5
17030: PUSH
17031: LD_INT 1
17033: ARRAY
17034: PPUSH
17035: LD_VAR 0 5
17039: PUSH
17040: LD_INT 2
17042: ARRAY
17043: PPUSH
17044: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17048: LD_ADDR_EXP 74
17052: PUSH
17053: LD_EXP 74
17057: PPUSH
17058: LD_VAR 0 4
17062: PPUSH
17063: LD_EXP 74
17067: PUSH
17068: LD_VAR 0 4
17072: ARRAY
17073: PPUSH
17074: LD_VAR 0 3
17078: PPUSH
17079: CALL_OW 3
17083: PPUSH
17084: CALL_OW 1
17088: ST_TO_ADDR
// end ; end ;
17089: GO 16918
17091: POP
17092: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17093: LD_VAR 0 1
17097: PPUSH
17098: LD_EXP 74
17102: PUSH
17103: LD_VAR 0 4
17107: ARRAY
17108: PUSH
17109: LD_INT 0
17111: PLUS
17112: PPUSH
17113: CALL_OW 505
// end ;
17117: LD_VAR 0 2
17121: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17122: LD_INT 0
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
// if not hack in hackTanks then
17128: LD_VAR 0 1
17132: PUSH
17133: LD_EXP 73
17137: IN
17138: NOT
17139: IFFALSE 17143
// exit ;
17141: GO 17228
// index := GetElementIndex ( hackTanks , hack ) ;
17143: LD_ADDR_VAR 0 5
17147: PUSH
17148: LD_EXP 73
17152: PPUSH
17153: LD_VAR 0 1
17157: PPUSH
17158: CALL 23978 0 2
17162: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17163: LD_ADDR_VAR 0 4
17167: PUSH
17168: DOUBLE
17169: LD_INT 1
17171: DEC
17172: ST_TO_ADDR
17173: LD_EXP 74
17177: PUSH
17178: LD_VAR 0 5
17182: ARRAY
17183: PUSH
17184: FOR_TO
17185: IFFALSE 17226
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17187: LD_EXP 74
17191: PUSH
17192: LD_VAR 0 5
17196: ARRAY
17197: PUSH
17198: LD_VAR 0 4
17202: ARRAY
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PUSH
17208: LD_VAR 0 2
17212: EQUAL
17213: IFFALSE 17224
// KillUnit ( vehicle ) ;
17215: LD_VAR 0 2
17219: PPUSH
17220: CALL_OW 66
17224: GO 17184
17226: POP
17227: POP
// end ;
17228: LD_VAR 0 3
17232: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17233: LD_EXP 78
17237: NOT
17238: IFFALSE 17273
17240: GO 17242
17242: DISABLE
// begin initMiner := true ;
17243: LD_ADDR_EXP 78
17247: PUSH
17248: LD_INT 1
17250: ST_TO_ADDR
// minersList := [ ] ;
17251: LD_ADDR_EXP 79
17255: PUSH
17256: EMPTY
17257: ST_TO_ADDR
// minerMinesList := [ ] ;
17258: LD_ADDR_EXP 80
17262: PUSH
17263: EMPTY
17264: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17265: LD_ADDR_EXP 81
17269: PUSH
17270: LD_INT 5
17272: ST_TO_ADDR
// end ;
17273: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17274: LD_EXP 78
17278: PUSH
17279: LD_INT 34
17281: PUSH
17282: LD_EXP 8
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 69
17295: AND
17296: IFFALSE 17759
17298: GO 17300
17300: DISABLE
17301: LD_INT 0
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
// begin enable ;
17307: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: LD_INT 34
17315: PUSH
17316: LD_EXP 8
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PPUSH
17325: CALL_OW 69
17329: PUSH
17330: FOR_IN
17331: IFFALSE 17403
// begin if not i in minersList then
17333: LD_VAR 0 1
17337: PUSH
17338: LD_EXP 79
17342: IN
17343: NOT
17344: IFFALSE 17401
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17346: LD_ADDR_EXP 79
17350: PUSH
17351: LD_EXP 79
17355: PPUSH
17356: LD_EXP 79
17360: PUSH
17361: LD_INT 1
17363: PLUS
17364: PPUSH
17365: LD_VAR 0 1
17369: PPUSH
17370: CALL_OW 1
17374: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17375: LD_ADDR_EXP 80
17379: PUSH
17380: LD_EXP 80
17384: PPUSH
17385: LD_EXP 80
17389: PUSH
17390: LD_INT 1
17392: PLUS
17393: PPUSH
17394: EMPTY
17395: PPUSH
17396: CALL_OW 1
17400: ST_TO_ADDR
// end end ;
17401: GO 17330
17403: POP
17404: POP
// for i := minerMinesList downto 1 do
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: DOUBLE
17411: LD_EXP 80
17415: INC
17416: ST_TO_ADDR
17417: LD_INT 1
17419: PUSH
17420: FOR_DOWNTO
17421: IFFALSE 17757
// begin if IsLive ( minersList [ i ] ) then
17423: LD_EXP 79
17427: PUSH
17428: LD_VAR 0 1
17432: ARRAY
17433: PPUSH
17434: CALL_OW 300
17438: IFFALSE 17466
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17440: LD_EXP 79
17444: PUSH
17445: LD_VAR 0 1
17449: ARRAY
17450: PPUSH
17451: LD_EXP 80
17455: PUSH
17456: LD_VAR 0 1
17460: ARRAY
17461: PPUSH
17462: CALL_OW 505
// if not minerMinesList [ i ] then
17466: LD_EXP 80
17470: PUSH
17471: LD_VAR 0 1
17475: ARRAY
17476: NOT
17477: IFFALSE 17481
// continue ;
17479: GO 17420
// for j := minerMinesList [ i ] downto 1 do
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: DOUBLE
17487: LD_EXP 80
17491: PUSH
17492: LD_VAR 0 1
17496: ARRAY
17497: INC
17498: ST_TO_ADDR
17499: LD_INT 1
17501: PUSH
17502: FOR_DOWNTO
17503: IFFALSE 17753
// begin side := GetSide ( minersList [ i ] ) ;
17505: LD_ADDR_VAR 0 3
17509: PUSH
17510: LD_EXP 79
17514: PUSH
17515: LD_VAR 0 1
17519: ARRAY
17520: PPUSH
17521: CALL_OW 255
17525: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17526: LD_ADDR_VAR 0 4
17530: PUSH
17531: LD_EXP 80
17535: PUSH
17536: LD_VAR 0 1
17540: ARRAY
17541: PUSH
17542: LD_VAR 0 2
17546: ARRAY
17547: PUSH
17548: LD_INT 1
17550: ARRAY
17551: PPUSH
17552: LD_EXP 80
17556: PUSH
17557: LD_VAR 0 1
17561: ARRAY
17562: PUSH
17563: LD_VAR 0 2
17567: ARRAY
17568: PUSH
17569: LD_INT 2
17571: ARRAY
17572: PPUSH
17573: CALL_OW 428
17577: ST_TO_ADDR
// if not tmp then
17578: LD_VAR 0 4
17582: NOT
17583: IFFALSE 17587
// continue ;
17585: GO 17502
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17587: LD_VAR 0 4
17591: PUSH
17592: LD_INT 81
17594: PUSH
17595: LD_VAR 0 3
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PPUSH
17604: CALL_OW 69
17608: IN
17609: PUSH
17610: LD_EXP 80
17614: PUSH
17615: LD_VAR 0 1
17619: ARRAY
17620: PUSH
17621: LD_VAR 0 2
17625: ARRAY
17626: PUSH
17627: LD_INT 1
17629: ARRAY
17630: PPUSH
17631: LD_EXP 80
17635: PUSH
17636: LD_VAR 0 1
17640: ARRAY
17641: PUSH
17642: LD_VAR 0 2
17646: ARRAY
17647: PUSH
17648: LD_INT 2
17650: ARRAY
17651: PPUSH
17652: CALL_OW 458
17656: AND
17657: IFFALSE 17751
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17659: LD_EXP 80
17663: PUSH
17664: LD_VAR 0 1
17668: ARRAY
17669: PUSH
17670: LD_VAR 0 2
17674: ARRAY
17675: PUSH
17676: LD_INT 1
17678: ARRAY
17679: PPUSH
17680: LD_EXP 80
17684: PUSH
17685: LD_VAR 0 1
17689: ARRAY
17690: PUSH
17691: LD_VAR 0 2
17695: ARRAY
17696: PUSH
17697: LD_INT 2
17699: ARRAY
17700: PPUSH
17701: LD_VAR 0 3
17705: PPUSH
17706: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17710: LD_ADDR_EXP 80
17714: PUSH
17715: LD_EXP 80
17719: PPUSH
17720: LD_VAR 0 1
17724: PPUSH
17725: LD_EXP 80
17729: PUSH
17730: LD_VAR 0 1
17734: ARRAY
17735: PPUSH
17736: LD_VAR 0 2
17740: PPUSH
17741: CALL_OW 3
17745: PPUSH
17746: CALL_OW 1
17750: ST_TO_ADDR
// end ; end ;
17751: GO 17502
17753: POP
17754: POP
// end ;
17755: GO 17420
17757: POP
17758: POP
// end ;
17759: PPOPN 4
17761: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17762: LD_INT 0
17764: PPUSH
17765: PPUSH
// result := false ;
17766: LD_ADDR_VAR 0 4
17770: PUSH
17771: LD_INT 0
17773: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17774: LD_VAR 0 1
17778: PPUSH
17779: CALL_OW 264
17783: PUSH
17784: LD_EXP 8
17788: EQUAL
17789: NOT
17790: IFFALSE 17794
// exit ;
17792: GO 18034
// index := GetElementIndex ( minersList , unit ) ;
17794: LD_ADDR_VAR 0 5
17798: PUSH
17799: LD_EXP 79
17803: PPUSH
17804: LD_VAR 0 1
17808: PPUSH
17809: CALL 23978 0 2
17813: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17814: LD_EXP 80
17818: PUSH
17819: LD_VAR 0 5
17823: ARRAY
17824: PUSH
17825: LD_EXP 81
17829: GREATEREQUAL
17830: IFFALSE 17834
// exit ;
17832: GO 18034
// ComMoveXY ( unit , x , y ) ;
17834: LD_VAR 0 1
17838: PPUSH
17839: LD_VAR 0 2
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17853: LD_INT 35
17855: PPUSH
17856: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17860: LD_VAR 0 1
17864: PPUSH
17865: LD_VAR 0 2
17869: PPUSH
17870: LD_VAR 0 3
17874: PPUSH
17875: CALL 54042 0 3
17879: NOT
17880: PUSH
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 314
17890: AND
17891: IFFALSE 17895
// exit ;
17893: GO 18034
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17895: LD_VAR 0 2
17899: PPUSH
17900: LD_VAR 0 3
17904: PPUSH
17905: CALL_OW 428
17909: PUSH
17910: LD_VAR 0 1
17914: EQUAL
17915: PUSH
17916: LD_VAR 0 1
17920: PPUSH
17921: CALL_OW 314
17925: NOT
17926: AND
17927: IFFALSE 17853
// PlaySoundXY ( x , y , PlantMine ) ;
17929: LD_VAR 0 2
17933: PPUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: LD_STRING PlantMine
17941: PPUSH
17942: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17946: LD_VAR 0 2
17950: PPUSH
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_VAR 0 1
17960: PPUSH
17961: CALL_OW 255
17965: PPUSH
17966: LD_INT 0
17968: PPUSH
17969: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17973: LD_ADDR_EXP 80
17977: PUSH
17978: LD_EXP 80
17982: PPUSH
17983: LD_VAR 0 5
17987: PUSH
17988: LD_EXP 80
17992: PUSH
17993: LD_VAR 0 5
17997: ARRAY
17998: PUSH
17999: LD_INT 1
18001: PLUS
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PPUSH
18007: LD_VAR 0 2
18011: PUSH
18012: LD_VAR 0 3
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL 24193 0 3
18025: ST_TO_ADDR
// result := true ;
18026: LD_ADDR_VAR 0 4
18030: PUSH
18031: LD_INT 1
18033: ST_TO_ADDR
// end ;
18034: LD_VAR 0 4
18038: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18039: LD_INT 0
18041: PPUSH
18042: PPUSH
18043: PPUSH
// if not unit in minersList then
18044: LD_VAR 0 1
18048: PUSH
18049: LD_EXP 79
18053: IN
18054: NOT
18055: IFFALSE 18059
// exit ;
18057: GO 18451
// index := GetElementIndex ( minersList , unit ) ;
18059: LD_ADDR_VAR 0 6
18063: PUSH
18064: LD_EXP 79
18068: PPUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL 23978 0 2
18078: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18079: LD_ADDR_VAR 0 5
18083: PUSH
18084: DOUBLE
18085: LD_EXP 80
18089: PUSH
18090: LD_VAR 0 6
18094: ARRAY
18095: INC
18096: ST_TO_ADDR
18097: LD_INT 1
18099: PUSH
18100: FOR_DOWNTO
18101: IFFALSE 18262
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18103: LD_EXP 80
18107: PUSH
18108: LD_VAR 0 6
18112: ARRAY
18113: PUSH
18114: LD_VAR 0 5
18118: ARRAY
18119: PUSH
18120: LD_INT 1
18122: ARRAY
18123: PUSH
18124: LD_VAR 0 2
18128: EQUAL
18129: PUSH
18130: LD_EXP 80
18134: PUSH
18135: LD_VAR 0 6
18139: ARRAY
18140: PUSH
18141: LD_VAR 0 5
18145: ARRAY
18146: PUSH
18147: LD_INT 2
18149: ARRAY
18150: PUSH
18151: LD_VAR 0 3
18155: EQUAL
18156: AND
18157: IFFALSE 18260
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18159: LD_EXP 80
18163: PUSH
18164: LD_VAR 0 6
18168: ARRAY
18169: PUSH
18170: LD_VAR 0 5
18174: ARRAY
18175: PUSH
18176: LD_INT 1
18178: ARRAY
18179: PPUSH
18180: LD_EXP 80
18184: PUSH
18185: LD_VAR 0 6
18189: ARRAY
18190: PUSH
18191: LD_VAR 0 5
18195: ARRAY
18196: PUSH
18197: LD_INT 2
18199: ARRAY
18200: PPUSH
18201: LD_VAR 0 1
18205: PPUSH
18206: CALL_OW 255
18210: PPUSH
18211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18215: LD_ADDR_EXP 80
18219: PUSH
18220: LD_EXP 80
18224: PPUSH
18225: LD_VAR 0 6
18229: PPUSH
18230: LD_EXP 80
18234: PUSH
18235: LD_VAR 0 6
18239: ARRAY
18240: PPUSH
18241: LD_VAR 0 5
18245: PPUSH
18246: CALL_OW 3
18250: PPUSH
18251: CALL_OW 1
18255: ST_TO_ADDR
// exit ;
18256: POP
18257: POP
18258: GO 18451
// end ; end ;
18260: GO 18100
18262: POP
18263: POP
// for i := minerMinesList [ index ] downto 1 do
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: DOUBLE
18270: LD_EXP 80
18274: PUSH
18275: LD_VAR 0 6
18279: ARRAY
18280: INC
18281: ST_TO_ADDR
18282: LD_INT 1
18284: PUSH
18285: FOR_DOWNTO
18286: IFFALSE 18449
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18288: LD_EXP 80
18292: PUSH
18293: LD_VAR 0 6
18297: ARRAY
18298: PUSH
18299: LD_VAR 0 5
18303: ARRAY
18304: PUSH
18305: LD_INT 1
18307: ARRAY
18308: PPUSH
18309: LD_EXP 80
18313: PUSH
18314: LD_VAR 0 6
18318: ARRAY
18319: PUSH
18320: LD_VAR 0 5
18324: ARRAY
18325: PUSH
18326: LD_INT 2
18328: ARRAY
18329: PPUSH
18330: LD_VAR 0 2
18334: PPUSH
18335: LD_VAR 0 3
18339: PPUSH
18340: CALL_OW 298
18344: PUSH
18345: LD_INT 6
18347: LESS
18348: IFFALSE 18447
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18350: LD_EXP 80
18354: PUSH
18355: LD_VAR 0 6
18359: ARRAY
18360: PUSH
18361: LD_VAR 0 5
18365: ARRAY
18366: PUSH
18367: LD_INT 1
18369: ARRAY
18370: PPUSH
18371: LD_EXP 80
18375: PUSH
18376: LD_VAR 0 6
18380: ARRAY
18381: PUSH
18382: LD_VAR 0 5
18386: ARRAY
18387: PUSH
18388: LD_INT 2
18390: ARRAY
18391: PPUSH
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 255
18401: PPUSH
18402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18406: LD_ADDR_EXP 80
18410: PUSH
18411: LD_EXP 80
18415: PPUSH
18416: LD_VAR 0 6
18420: PPUSH
18421: LD_EXP 80
18425: PUSH
18426: LD_VAR 0 6
18430: ARRAY
18431: PPUSH
18432: LD_VAR 0 5
18436: PPUSH
18437: CALL_OW 3
18441: PPUSH
18442: CALL_OW 1
18446: ST_TO_ADDR
// end ; end ;
18447: GO 18285
18449: POP
18450: POP
// end ;
18451: LD_VAR 0 4
18455: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18456: LD_INT 0
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
18465: PPUSH
18466: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18467: LD_VAR 0 1
18471: PPUSH
18472: CALL_OW 264
18476: PUSH
18477: LD_EXP 8
18481: EQUAL
18482: NOT
18483: PUSH
18484: LD_VAR 0 1
18488: PUSH
18489: LD_EXP 79
18493: IN
18494: NOT
18495: OR
18496: IFFALSE 18500
// exit ;
18498: GO 18822
// index := GetElementIndex ( minersList , unit ) ;
18500: LD_ADDR_VAR 0 6
18504: PUSH
18505: LD_EXP 79
18509: PPUSH
18510: LD_VAR 0 1
18514: PPUSH
18515: CALL 23978 0 2
18519: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18520: LD_ADDR_VAR 0 8
18524: PUSH
18525: LD_EXP 81
18529: PUSH
18530: LD_EXP 80
18534: PUSH
18535: LD_VAR 0 6
18539: ARRAY
18540: MINUS
18541: ST_TO_ADDR
// if not minesFreeAmount then
18542: LD_VAR 0 8
18546: NOT
18547: IFFALSE 18551
// exit ;
18549: GO 18822
// tmp := [ ] ;
18551: LD_ADDR_VAR 0 7
18555: PUSH
18556: EMPTY
18557: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18558: LD_ADDR_VAR 0 5
18562: PUSH
18563: DOUBLE
18564: LD_INT 1
18566: DEC
18567: ST_TO_ADDR
18568: LD_VAR 0 8
18572: PUSH
18573: FOR_TO
18574: IFFALSE 18769
// begin _d := rand ( 0 , 5 ) ;
18576: LD_ADDR_VAR 0 11
18580: PUSH
18581: LD_INT 0
18583: PPUSH
18584: LD_INT 5
18586: PPUSH
18587: CALL_OW 12
18591: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18592: LD_ADDR_VAR 0 12
18596: PUSH
18597: LD_INT 2
18599: PPUSH
18600: LD_INT 6
18602: PPUSH
18603: CALL_OW 12
18607: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18608: LD_ADDR_VAR 0 9
18612: PUSH
18613: LD_VAR 0 2
18617: PPUSH
18618: LD_VAR 0 11
18622: PPUSH
18623: LD_VAR 0 12
18627: PPUSH
18628: CALL_OW 272
18632: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18633: LD_ADDR_VAR 0 10
18637: PUSH
18638: LD_VAR 0 3
18642: PPUSH
18643: LD_VAR 0 11
18647: PPUSH
18648: LD_VAR 0 12
18652: PPUSH
18653: CALL_OW 273
18657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18658: LD_VAR 0 9
18662: PPUSH
18663: LD_VAR 0 10
18667: PPUSH
18668: CALL_OW 488
18672: PUSH
18673: LD_VAR 0 9
18677: PUSH
18678: LD_VAR 0 10
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_VAR 0 7
18691: IN
18692: NOT
18693: AND
18694: PUSH
18695: LD_VAR 0 9
18699: PPUSH
18700: LD_VAR 0 10
18704: PPUSH
18705: CALL_OW 458
18709: NOT
18710: AND
18711: IFFALSE 18753
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18713: LD_ADDR_VAR 0 7
18717: PUSH
18718: LD_VAR 0 7
18722: PPUSH
18723: LD_VAR 0 7
18727: PUSH
18728: LD_INT 1
18730: PLUS
18731: PPUSH
18732: LD_VAR 0 9
18736: PUSH
18737: LD_VAR 0 10
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PPUSH
18746: CALL_OW 1
18750: ST_TO_ADDR
18751: GO 18767
// i := i - 1 ;
18753: LD_ADDR_VAR 0 5
18757: PUSH
18758: LD_VAR 0 5
18762: PUSH
18763: LD_INT 1
18765: MINUS
18766: ST_TO_ADDR
// end ;
18767: GO 18573
18769: POP
18770: POP
// for i in tmp do
18771: LD_ADDR_VAR 0 5
18775: PUSH
18776: LD_VAR 0 7
18780: PUSH
18781: FOR_IN
18782: IFFALSE 18820
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18784: LD_VAR 0 1
18788: PPUSH
18789: LD_VAR 0 5
18793: PUSH
18794: LD_INT 1
18796: ARRAY
18797: PPUSH
18798: LD_VAR 0 5
18802: PUSH
18803: LD_INT 2
18805: ARRAY
18806: PPUSH
18807: CALL 17762 0 3
18811: NOT
18812: IFFALSE 18818
// exit ;
18814: POP
18815: POP
18816: GO 18822
18818: GO 18781
18820: POP
18821: POP
// end ;
18822: LD_VAR 0 4
18826: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18827: LD_INT 0
18829: PPUSH
18830: PPUSH
18831: PPUSH
18832: PPUSH
18833: PPUSH
18834: PPUSH
18835: PPUSH
// if not GetClass ( unit ) = class_sniper then
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 257
18845: PUSH
18846: LD_INT 5
18848: EQUAL
18849: NOT
18850: IFFALSE 18854
// exit ;
18852: GO 19242
// dist := 8 ;
18854: LD_ADDR_VAR 0 5
18858: PUSH
18859: LD_INT 8
18861: ST_TO_ADDR
// viewRange := 12 ;
18862: LD_ADDR_VAR 0 7
18866: PUSH
18867: LD_INT 12
18869: ST_TO_ADDR
// side := GetSide ( unit ) ;
18870: LD_ADDR_VAR 0 6
18874: PUSH
18875: LD_VAR 0 1
18879: PPUSH
18880: CALL_OW 255
18884: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18885: LD_INT 61
18887: PPUSH
18888: LD_VAR 0 6
18892: PPUSH
18893: CALL_OW 321
18897: PUSH
18898: LD_INT 2
18900: EQUAL
18901: IFFALSE 18911
// viewRange := 16 ;
18903: LD_ADDR_VAR 0 7
18907: PUSH
18908: LD_INT 16
18910: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18911: LD_VAR 0 1
18915: PPUSH
18916: LD_VAR 0 2
18920: PPUSH
18921: LD_VAR 0 3
18925: PPUSH
18926: CALL_OW 297
18930: PUSH
18931: LD_VAR 0 5
18935: GREATER
18936: IFFALSE 19015
// begin ComMoveXY ( unit , x , y ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_VAR 0 2
18947: PPUSH
18948: LD_VAR 0 3
18952: PPUSH
18953: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18957: LD_INT 35
18959: PPUSH
18960: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18964: LD_VAR 0 1
18968: PPUSH
18969: LD_VAR 0 2
18973: PPUSH
18974: LD_VAR 0 3
18978: PPUSH
18979: CALL 54042 0 3
18983: NOT
18984: IFFALSE 18988
// exit ;
18986: GO 19242
// until GetDistUnitXY ( unit , x , y ) < dist ;
18988: LD_VAR 0 1
18992: PPUSH
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_VAR 0 3
19002: PPUSH
19003: CALL_OW 297
19007: PUSH
19008: LD_VAR 0 5
19012: LESS
19013: IFFALSE 18957
// end ; ComTurnXY ( unit , x , y ) ;
19015: LD_VAR 0 1
19019: PPUSH
19020: LD_VAR 0 2
19024: PPUSH
19025: LD_VAR 0 3
19029: PPUSH
19030: CALL_OW 118
// wait ( 5 ) ;
19034: LD_INT 5
19036: PPUSH
19037: CALL_OW 67
// _d := GetDir ( unit ) ;
19041: LD_ADDR_VAR 0 10
19045: PUSH
19046: LD_VAR 0 1
19050: PPUSH
19051: CALL_OW 254
19055: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19056: LD_ADDR_VAR 0 8
19060: PUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 250
19070: PPUSH
19071: LD_VAR 0 10
19075: PPUSH
19076: LD_VAR 0 5
19080: PPUSH
19081: CALL_OW 272
19085: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19086: LD_ADDR_VAR 0 9
19090: PUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 251
19100: PPUSH
19101: LD_VAR 0 10
19105: PPUSH
19106: LD_VAR 0 5
19110: PPUSH
19111: CALL_OW 273
19115: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19116: LD_VAR 0 8
19120: PPUSH
19121: LD_VAR 0 9
19125: PPUSH
19126: CALL_OW 488
19130: NOT
19131: IFFALSE 19135
// exit ;
19133: GO 19242
// ComAnimCustom ( unit , 1 ) ;
19135: LD_VAR 0 1
19139: PPUSH
19140: LD_INT 1
19142: PPUSH
19143: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19147: LD_VAR 0 8
19151: PPUSH
19152: LD_VAR 0 9
19156: PPUSH
19157: LD_VAR 0 6
19161: PPUSH
19162: LD_VAR 0 7
19166: PPUSH
19167: CALL_OW 330
// repeat wait ( 1 ) ;
19171: LD_INT 1
19173: PPUSH
19174: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19178: LD_VAR 0 1
19182: PPUSH
19183: CALL_OW 316
19187: PUSH
19188: LD_VAR 0 1
19192: PPUSH
19193: CALL_OW 314
19197: OR
19198: PUSH
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL_OW 302
19208: NOT
19209: OR
19210: PUSH
19211: LD_VAR 0 1
19215: PPUSH
19216: CALL_OW 301
19220: OR
19221: IFFALSE 19171
// RemoveSeeing ( _x , _y , side ) ;
19223: LD_VAR 0 8
19227: PPUSH
19228: LD_VAR 0 9
19232: PPUSH
19233: LD_VAR 0 6
19237: PPUSH
19238: CALL_OW 331
// end ; end_of_file end_of_file
19242: LD_VAR 0 4
19246: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19247: LD_INT 0
19249: PPUSH
19250: PPUSH
// if exist_mode then
19251: LD_VAR 0 2
19255: IFFALSE 19280
// unit := CreateCharacter ( prefix & ident ) else
19257: LD_ADDR_VAR 0 5
19261: PUSH
19262: LD_VAR 0 3
19266: PUSH
19267: LD_VAR 0 1
19271: STR
19272: PPUSH
19273: CALL_OW 34
19277: ST_TO_ADDR
19278: GO 19295
// unit := NewCharacter ( ident ) ;
19280: LD_ADDR_VAR 0 5
19284: PUSH
19285: LD_VAR 0 1
19289: PPUSH
19290: CALL_OW 25
19294: ST_TO_ADDR
// result := unit ;
19295: LD_ADDR_VAR 0 4
19299: PUSH
19300: LD_VAR 0 5
19304: ST_TO_ADDR
// end ;
19305: LD_VAR 0 4
19309: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19310: LD_INT 0
19312: PPUSH
19313: PPUSH
// if not side or not nation then
19314: LD_VAR 0 1
19318: NOT
19319: PUSH
19320: LD_VAR 0 2
19324: NOT
19325: OR
19326: IFFALSE 19330
// exit ;
19328: GO 20094
// case nation of nation_american :
19330: LD_VAR 0 2
19334: PUSH
19335: LD_INT 1
19337: DOUBLE
19338: EQUAL
19339: IFTRUE 19343
19341: GO 19557
19343: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19344: LD_ADDR_VAR 0 4
19348: PUSH
19349: LD_INT 35
19351: PUSH
19352: LD_INT 45
19354: PUSH
19355: LD_INT 46
19357: PUSH
19358: LD_INT 47
19360: PUSH
19361: LD_INT 82
19363: PUSH
19364: LD_INT 83
19366: PUSH
19367: LD_INT 84
19369: PUSH
19370: LD_INT 85
19372: PUSH
19373: LD_INT 86
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: LD_INT 2
19381: PUSH
19382: LD_INT 6
19384: PUSH
19385: LD_INT 15
19387: PUSH
19388: LD_INT 16
19390: PUSH
19391: LD_INT 7
19393: PUSH
19394: LD_INT 12
19396: PUSH
19397: LD_INT 13
19399: PUSH
19400: LD_INT 10
19402: PUSH
19403: LD_INT 14
19405: PUSH
19406: LD_INT 20
19408: PUSH
19409: LD_INT 21
19411: PUSH
19412: LD_INT 22
19414: PUSH
19415: LD_INT 25
19417: PUSH
19418: LD_INT 32
19420: PUSH
19421: LD_INT 27
19423: PUSH
19424: LD_INT 36
19426: PUSH
19427: LD_INT 69
19429: PUSH
19430: LD_INT 39
19432: PUSH
19433: LD_INT 34
19435: PUSH
19436: LD_INT 40
19438: PUSH
19439: LD_INT 48
19441: PUSH
19442: LD_INT 49
19444: PUSH
19445: LD_INT 50
19447: PUSH
19448: LD_INT 51
19450: PUSH
19451: LD_INT 52
19453: PUSH
19454: LD_INT 53
19456: PUSH
19457: LD_INT 54
19459: PUSH
19460: LD_INT 55
19462: PUSH
19463: LD_INT 56
19465: PUSH
19466: LD_INT 57
19468: PUSH
19469: LD_INT 58
19471: PUSH
19472: LD_INT 59
19474: PUSH
19475: LD_INT 60
19477: PUSH
19478: LD_INT 61
19480: PUSH
19481: LD_INT 62
19483: PUSH
19484: LD_INT 80
19486: PUSH
19487: LD_INT 82
19489: PUSH
19490: LD_INT 83
19492: PUSH
19493: LD_INT 84
19495: PUSH
19496: LD_INT 85
19498: PUSH
19499: LD_INT 86
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: ST_TO_ADDR
19555: GO 20018
19557: LD_INT 2
19559: DOUBLE
19560: EQUAL
19561: IFTRUE 19565
19563: GO 19787
19565: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19566: LD_ADDR_VAR 0 4
19570: PUSH
19571: LD_INT 35
19573: PUSH
19574: LD_INT 45
19576: PUSH
19577: LD_INT 46
19579: PUSH
19580: LD_INT 47
19582: PUSH
19583: LD_INT 82
19585: PUSH
19586: LD_INT 83
19588: PUSH
19589: LD_INT 84
19591: PUSH
19592: LD_INT 85
19594: PUSH
19595: LD_INT 87
19597: PUSH
19598: LD_INT 70
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: LD_INT 11
19606: PUSH
19607: LD_INT 3
19609: PUSH
19610: LD_INT 4
19612: PUSH
19613: LD_INT 5
19615: PUSH
19616: LD_INT 6
19618: PUSH
19619: LD_INT 15
19621: PUSH
19622: LD_INT 18
19624: PUSH
19625: LD_INT 7
19627: PUSH
19628: LD_INT 17
19630: PUSH
19631: LD_INT 8
19633: PUSH
19634: LD_INT 20
19636: PUSH
19637: LD_INT 21
19639: PUSH
19640: LD_INT 22
19642: PUSH
19643: LD_INT 72
19645: PUSH
19646: LD_INT 26
19648: PUSH
19649: LD_INT 69
19651: PUSH
19652: LD_INT 39
19654: PUSH
19655: LD_INT 40
19657: PUSH
19658: LD_INT 41
19660: PUSH
19661: LD_INT 42
19663: PUSH
19664: LD_INT 43
19666: PUSH
19667: LD_INT 48
19669: PUSH
19670: LD_INT 49
19672: PUSH
19673: LD_INT 50
19675: PUSH
19676: LD_INT 51
19678: PUSH
19679: LD_INT 52
19681: PUSH
19682: LD_INT 53
19684: PUSH
19685: LD_INT 54
19687: PUSH
19688: LD_INT 55
19690: PUSH
19691: LD_INT 56
19693: PUSH
19694: LD_INT 60
19696: PUSH
19697: LD_INT 61
19699: PUSH
19700: LD_INT 62
19702: PUSH
19703: LD_INT 66
19705: PUSH
19706: LD_INT 67
19708: PUSH
19709: LD_INT 68
19711: PUSH
19712: LD_INT 81
19714: PUSH
19715: LD_INT 82
19717: PUSH
19718: LD_INT 83
19720: PUSH
19721: LD_INT 84
19723: PUSH
19724: LD_INT 85
19726: PUSH
19727: LD_INT 87
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: ST_TO_ADDR
19785: GO 20018
19787: LD_INT 3
19789: DOUBLE
19790: EQUAL
19791: IFTRUE 19795
19793: GO 20017
19795: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19796: LD_ADDR_VAR 0 4
19800: PUSH
19801: LD_INT 46
19803: PUSH
19804: LD_INT 47
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: LD_INT 2
19812: PUSH
19813: LD_INT 82
19815: PUSH
19816: LD_INT 83
19818: PUSH
19819: LD_INT 84
19821: PUSH
19822: LD_INT 85
19824: PUSH
19825: LD_INT 86
19827: PUSH
19828: LD_INT 11
19830: PUSH
19831: LD_INT 9
19833: PUSH
19834: LD_INT 20
19836: PUSH
19837: LD_INT 19
19839: PUSH
19840: LD_INT 21
19842: PUSH
19843: LD_INT 24
19845: PUSH
19846: LD_INT 22
19848: PUSH
19849: LD_INT 25
19851: PUSH
19852: LD_INT 28
19854: PUSH
19855: LD_INT 29
19857: PUSH
19858: LD_INT 30
19860: PUSH
19861: LD_INT 31
19863: PUSH
19864: LD_INT 37
19866: PUSH
19867: LD_INT 38
19869: PUSH
19870: LD_INT 32
19872: PUSH
19873: LD_INT 27
19875: PUSH
19876: LD_INT 33
19878: PUSH
19879: LD_INT 69
19881: PUSH
19882: LD_INT 39
19884: PUSH
19885: LD_INT 34
19887: PUSH
19888: LD_INT 40
19890: PUSH
19891: LD_INT 71
19893: PUSH
19894: LD_INT 23
19896: PUSH
19897: LD_INT 44
19899: PUSH
19900: LD_INT 48
19902: PUSH
19903: LD_INT 49
19905: PUSH
19906: LD_INT 50
19908: PUSH
19909: LD_INT 51
19911: PUSH
19912: LD_INT 52
19914: PUSH
19915: LD_INT 53
19917: PUSH
19918: LD_INT 54
19920: PUSH
19921: LD_INT 55
19923: PUSH
19924: LD_INT 56
19926: PUSH
19927: LD_INT 57
19929: PUSH
19930: LD_INT 58
19932: PUSH
19933: LD_INT 59
19935: PUSH
19936: LD_INT 63
19938: PUSH
19939: LD_INT 64
19941: PUSH
19942: LD_INT 65
19944: PUSH
19945: LD_INT 82
19947: PUSH
19948: LD_INT 83
19950: PUSH
19951: LD_INT 84
19953: PUSH
19954: LD_INT 85
19956: PUSH
19957: LD_INT 86
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: ST_TO_ADDR
20015: GO 20018
20017: POP
// if state > - 1 and state < 3 then
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: GREATER
20027: PUSH
20028: LD_VAR 0 3
20032: PUSH
20033: LD_INT 3
20035: LESS
20036: AND
20037: IFFALSE 20094
// for i in result do
20039: LD_ADDR_VAR 0 5
20043: PUSH
20044: LD_VAR 0 4
20048: PUSH
20049: FOR_IN
20050: IFFALSE 20092
// if GetTech ( i , side ) <> state then
20052: LD_VAR 0 5
20056: PPUSH
20057: LD_VAR 0 1
20061: PPUSH
20062: CALL_OW 321
20066: PUSH
20067: LD_VAR 0 3
20071: NONEQUAL
20072: IFFALSE 20090
// result := result diff i ;
20074: LD_ADDR_VAR 0 4
20078: PUSH
20079: LD_VAR 0 4
20083: PUSH
20084: LD_VAR 0 5
20088: DIFF
20089: ST_TO_ADDR
20090: GO 20049
20092: POP
20093: POP
// end ;
20094: LD_VAR 0 4
20098: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
20103: PPUSH
// result := true ;
20104: LD_ADDR_VAR 0 3
20108: PUSH
20109: LD_INT 1
20111: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20112: LD_ADDR_VAR 0 5
20116: PUSH
20117: LD_VAR 0 2
20121: PPUSH
20122: CALL_OW 480
20126: ST_TO_ADDR
// if not tmp then
20127: LD_VAR 0 5
20131: NOT
20132: IFFALSE 20136
// exit ;
20134: GO 20185
// for i in tmp do
20136: LD_ADDR_VAR 0 4
20140: PUSH
20141: LD_VAR 0 5
20145: PUSH
20146: FOR_IN
20147: IFFALSE 20183
// if GetTech ( i , side ) <> state_researched then
20149: LD_VAR 0 4
20153: PPUSH
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 321
20163: PUSH
20164: LD_INT 2
20166: NONEQUAL
20167: IFFALSE 20181
// begin result := false ;
20169: LD_ADDR_VAR 0 3
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
// exit ;
20177: POP
20178: POP
20179: GO 20185
// end ;
20181: GO 20146
20183: POP
20184: POP
// end ;
20185: LD_VAR 0 3
20189: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20190: LD_INT 0
20192: PPUSH
20193: PPUSH
20194: PPUSH
20195: PPUSH
20196: PPUSH
20197: PPUSH
20198: PPUSH
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
20203: PPUSH
20204: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20205: LD_VAR 0 1
20209: NOT
20210: PUSH
20211: LD_VAR 0 1
20215: PPUSH
20216: CALL_OW 257
20220: PUSH
20221: LD_INT 9
20223: NONEQUAL
20224: OR
20225: IFFALSE 20229
// exit ;
20227: GO 20802
// side := GetSide ( unit ) ;
20229: LD_ADDR_VAR 0 9
20233: PUSH
20234: LD_VAR 0 1
20238: PPUSH
20239: CALL_OW 255
20243: ST_TO_ADDR
// tech_space := tech_spacanom ;
20244: LD_ADDR_VAR 0 12
20248: PUSH
20249: LD_INT 29
20251: ST_TO_ADDR
// tech_time := tech_taurad ;
20252: LD_ADDR_VAR 0 13
20256: PUSH
20257: LD_INT 28
20259: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20260: LD_ADDR_VAR 0 11
20264: PUSH
20265: LD_VAR 0 1
20269: PPUSH
20270: CALL_OW 310
20274: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20275: LD_VAR 0 11
20279: PPUSH
20280: CALL_OW 247
20284: PUSH
20285: LD_INT 2
20287: EQUAL
20288: IFFALSE 20292
// exit ;
20290: GO 20802
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20292: LD_ADDR_VAR 0 8
20296: PUSH
20297: LD_INT 81
20299: PUSH
20300: LD_VAR 0 9
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 3
20311: PUSH
20312: LD_INT 21
20314: PUSH
20315: LD_INT 3
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PPUSH
20330: CALL_OW 69
20334: ST_TO_ADDR
// if not tmp then
20335: LD_VAR 0 8
20339: NOT
20340: IFFALSE 20344
// exit ;
20342: GO 20802
// if in_unit then
20344: LD_VAR 0 11
20348: IFFALSE 20372
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20350: LD_ADDR_VAR 0 10
20354: PUSH
20355: LD_VAR 0 8
20359: PPUSH
20360: LD_VAR 0 11
20364: PPUSH
20365: CALL_OW 74
20369: ST_TO_ADDR
20370: GO 20392
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20372: LD_ADDR_VAR 0 10
20376: PUSH
20377: LD_VAR 0 8
20381: PPUSH
20382: LD_VAR 0 1
20386: PPUSH
20387: CALL_OW 74
20391: ST_TO_ADDR
// if not enemy then
20392: LD_VAR 0 10
20396: NOT
20397: IFFALSE 20401
// exit ;
20399: GO 20802
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20401: LD_VAR 0 11
20405: PUSH
20406: LD_VAR 0 11
20410: PPUSH
20411: LD_VAR 0 10
20415: PPUSH
20416: CALL_OW 296
20420: PUSH
20421: LD_INT 13
20423: GREATER
20424: AND
20425: PUSH
20426: LD_VAR 0 1
20430: PPUSH
20431: LD_VAR 0 10
20435: PPUSH
20436: CALL_OW 296
20440: PUSH
20441: LD_INT 12
20443: GREATER
20444: OR
20445: IFFALSE 20449
// exit ;
20447: GO 20802
// missile := [ 1 ] ;
20449: LD_ADDR_VAR 0 14
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: EMPTY
20458: LIST
20459: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20460: LD_VAR 0 9
20464: PPUSH
20465: LD_VAR 0 12
20469: PPUSH
20470: CALL_OW 325
20474: IFFALSE 20503
// missile := Insert ( missile , missile + 1 , 2 ) ;
20476: LD_ADDR_VAR 0 14
20480: PUSH
20481: LD_VAR 0 14
20485: PPUSH
20486: LD_VAR 0 14
20490: PUSH
20491: LD_INT 1
20493: PLUS
20494: PPUSH
20495: LD_INT 2
20497: PPUSH
20498: CALL_OW 2
20502: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20503: LD_VAR 0 9
20507: PPUSH
20508: LD_VAR 0 13
20512: PPUSH
20513: CALL_OW 325
20517: PUSH
20518: LD_VAR 0 10
20522: PPUSH
20523: CALL_OW 255
20527: PPUSH
20528: LD_VAR 0 13
20532: PPUSH
20533: CALL_OW 325
20537: NOT
20538: AND
20539: IFFALSE 20568
// missile := Insert ( missile , missile + 1 , 3 ) ;
20541: LD_ADDR_VAR 0 14
20545: PUSH
20546: LD_VAR 0 14
20550: PPUSH
20551: LD_VAR 0 14
20555: PUSH
20556: LD_INT 1
20558: PLUS
20559: PPUSH
20560: LD_INT 3
20562: PPUSH
20563: CALL_OW 2
20567: ST_TO_ADDR
// if missile < 2 then
20568: LD_VAR 0 14
20572: PUSH
20573: LD_INT 2
20575: LESS
20576: IFFALSE 20580
// exit ;
20578: GO 20802
// x := GetX ( enemy ) ;
20580: LD_ADDR_VAR 0 4
20584: PUSH
20585: LD_VAR 0 10
20589: PPUSH
20590: CALL_OW 250
20594: ST_TO_ADDR
// y := GetY ( enemy ) ;
20595: LD_ADDR_VAR 0 5
20599: PUSH
20600: LD_VAR 0 10
20604: PPUSH
20605: CALL_OW 251
20609: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20610: LD_ADDR_VAR 0 6
20614: PUSH
20615: LD_VAR 0 4
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PPUSH
20624: LD_INT 1
20626: PPUSH
20627: CALL_OW 12
20631: PLUS
20632: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20633: LD_ADDR_VAR 0 7
20637: PUSH
20638: LD_VAR 0 5
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PPUSH
20647: LD_INT 1
20649: PPUSH
20650: CALL_OW 12
20654: PLUS
20655: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20656: LD_VAR 0 6
20660: PPUSH
20661: LD_VAR 0 7
20665: PPUSH
20666: CALL_OW 488
20670: NOT
20671: IFFALSE 20693
// begin _x := x ;
20673: LD_ADDR_VAR 0 6
20677: PUSH
20678: LD_VAR 0 4
20682: ST_TO_ADDR
// _y := y ;
20683: LD_ADDR_VAR 0 7
20687: PUSH
20688: LD_VAR 0 5
20692: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20693: LD_ADDR_VAR 0 3
20697: PUSH
20698: LD_INT 1
20700: PPUSH
20701: LD_VAR 0 14
20705: PPUSH
20706: CALL_OW 12
20710: ST_TO_ADDR
// case i of 1 :
20711: LD_VAR 0 3
20715: PUSH
20716: LD_INT 1
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20741
20724: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20725: LD_VAR 0 1
20729: PPUSH
20730: LD_VAR 0 10
20734: PPUSH
20735: CALL_OW 115
20739: GO 20802
20741: LD_INT 2
20743: DOUBLE
20744: EQUAL
20745: IFTRUE 20749
20747: GO 20771
20749: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20750: LD_VAR 0 1
20754: PPUSH
20755: LD_VAR 0 6
20759: PPUSH
20760: LD_VAR 0 7
20764: PPUSH
20765: CALL_OW 153
20769: GO 20802
20771: LD_INT 3
20773: DOUBLE
20774: EQUAL
20775: IFTRUE 20779
20777: GO 20801
20779: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20780: LD_VAR 0 1
20784: PPUSH
20785: LD_VAR 0 6
20789: PPUSH
20790: LD_VAR 0 7
20794: PPUSH
20795: CALL_OW 154
20799: GO 20802
20801: POP
// end ;
20802: LD_VAR 0 2
20806: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20807: LD_INT 0
20809: PPUSH
20810: PPUSH
20811: PPUSH
20812: PPUSH
20813: PPUSH
20814: PPUSH
// if not unit or not building then
20815: LD_VAR 0 1
20819: NOT
20820: PUSH
20821: LD_VAR 0 2
20825: NOT
20826: OR
20827: IFFALSE 20831
// exit ;
20829: GO 20989
// x := GetX ( building ) ;
20831: LD_ADDR_VAR 0 5
20835: PUSH
20836: LD_VAR 0 2
20840: PPUSH
20841: CALL_OW 250
20845: ST_TO_ADDR
// y := GetY ( building ) ;
20846: LD_ADDR_VAR 0 6
20850: PUSH
20851: LD_VAR 0 2
20855: PPUSH
20856: CALL_OW 251
20860: ST_TO_ADDR
// for i = 0 to 5 do
20861: LD_ADDR_VAR 0 4
20865: PUSH
20866: DOUBLE
20867: LD_INT 0
20869: DEC
20870: ST_TO_ADDR
20871: LD_INT 5
20873: PUSH
20874: FOR_TO
20875: IFFALSE 20987
// begin _x := ShiftX ( x , i , 3 ) ;
20877: LD_ADDR_VAR 0 7
20881: PUSH
20882: LD_VAR 0 5
20886: PPUSH
20887: LD_VAR 0 4
20891: PPUSH
20892: LD_INT 3
20894: PPUSH
20895: CALL_OW 272
20899: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20900: LD_ADDR_VAR 0 8
20904: PUSH
20905: LD_VAR 0 6
20909: PPUSH
20910: LD_VAR 0 4
20914: PPUSH
20915: LD_INT 3
20917: PPUSH
20918: CALL_OW 273
20922: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20923: LD_VAR 0 7
20927: PPUSH
20928: LD_VAR 0 8
20932: PPUSH
20933: CALL_OW 488
20937: NOT
20938: IFFALSE 20942
// continue ;
20940: GO 20874
// if HexInfo ( _x , _y ) = 0 then
20942: LD_VAR 0 7
20946: PPUSH
20947: LD_VAR 0 8
20951: PPUSH
20952: CALL_OW 428
20956: PUSH
20957: LD_INT 0
20959: EQUAL
20960: IFFALSE 20985
// begin ComMoveXY ( unit , _x , _y ) ;
20962: LD_VAR 0 1
20966: PPUSH
20967: LD_VAR 0 7
20971: PPUSH
20972: LD_VAR 0 8
20976: PPUSH
20977: CALL_OW 111
// exit ;
20981: POP
20982: POP
20983: GO 20989
// end ; end ;
20985: GO 20874
20987: POP
20988: POP
// end ;
20989: LD_VAR 0 3
20993: RET
// export function ScanBase ( side , base_area ) ; begin
20994: LD_INT 0
20996: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20997: LD_ADDR_VAR 0 3
21001: PUSH
21002: LD_VAR 0 2
21006: PPUSH
21007: LD_INT 81
21009: PUSH
21010: LD_VAR 0 1
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PPUSH
21019: CALL_OW 70
21023: ST_TO_ADDR
// end ;
21024: LD_VAR 0 3
21028: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21029: LD_INT 0
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
// result := false ;
21035: LD_ADDR_VAR 0 2
21039: PUSH
21040: LD_INT 0
21042: ST_TO_ADDR
// side := GetSide ( unit ) ;
21043: LD_ADDR_VAR 0 3
21047: PUSH
21048: LD_VAR 0 1
21052: PPUSH
21053: CALL_OW 255
21057: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21058: LD_ADDR_VAR 0 4
21062: PUSH
21063: LD_VAR 0 1
21067: PPUSH
21068: CALL_OW 248
21072: ST_TO_ADDR
// case nat of 1 :
21073: LD_VAR 0 4
21077: PUSH
21078: LD_INT 1
21080: DOUBLE
21081: EQUAL
21082: IFTRUE 21086
21084: GO 21097
21086: POP
// tech := tech_lassight ; 2 :
21087: LD_ADDR_VAR 0 5
21091: PUSH
21092: LD_INT 12
21094: ST_TO_ADDR
21095: GO 21136
21097: LD_INT 2
21099: DOUBLE
21100: EQUAL
21101: IFTRUE 21105
21103: GO 21116
21105: POP
// tech := tech_mortar ; 3 :
21106: LD_ADDR_VAR 0 5
21110: PUSH
21111: LD_INT 41
21113: ST_TO_ADDR
21114: GO 21136
21116: LD_INT 3
21118: DOUBLE
21119: EQUAL
21120: IFTRUE 21124
21122: GO 21135
21124: POP
// tech := tech_bazooka ; end ;
21125: LD_ADDR_VAR 0 5
21129: PUSH
21130: LD_INT 44
21132: ST_TO_ADDR
21133: GO 21136
21135: POP
// if Researched ( side , tech ) then
21136: LD_VAR 0 3
21140: PPUSH
21141: LD_VAR 0 5
21145: PPUSH
21146: CALL_OW 325
21150: IFFALSE 21177
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21152: LD_ADDR_VAR 0 2
21156: PUSH
21157: LD_INT 5
21159: PUSH
21160: LD_INT 8
21162: PUSH
21163: LD_INT 9
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: PUSH
21171: LD_VAR 0 4
21175: ARRAY
21176: ST_TO_ADDR
// end ;
21177: LD_VAR 0 2
21181: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21182: LD_INT 0
21184: PPUSH
21185: PPUSH
21186: PPUSH
// if not mines then
21187: LD_VAR 0 2
21191: NOT
21192: IFFALSE 21196
// exit ;
21194: GO 21340
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21196: LD_ADDR_VAR 0 5
21200: PUSH
21201: LD_INT 81
21203: PUSH
21204: LD_VAR 0 1
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 3
21215: PUSH
21216: LD_INT 21
21218: PUSH
21219: LD_INT 3
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PPUSH
21234: CALL_OW 69
21238: ST_TO_ADDR
// for i in mines do
21239: LD_ADDR_VAR 0 4
21243: PUSH
21244: LD_VAR 0 2
21248: PUSH
21249: FOR_IN
21250: IFFALSE 21338
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21252: LD_VAR 0 4
21256: PUSH
21257: LD_INT 1
21259: ARRAY
21260: PPUSH
21261: LD_VAR 0 4
21265: PUSH
21266: LD_INT 2
21268: ARRAY
21269: PPUSH
21270: CALL_OW 458
21274: NOT
21275: IFFALSE 21279
// continue ;
21277: GO 21249
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21279: LD_VAR 0 4
21283: PUSH
21284: LD_INT 1
21286: ARRAY
21287: PPUSH
21288: LD_VAR 0 4
21292: PUSH
21293: LD_INT 2
21295: ARRAY
21296: PPUSH
21297: CALL_OW 428
21301: PUSH
21302: LD_VAR 0 5
21306: IN
21307: IFFALSE 21336
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21309: LD_VAR 0 4
21313: PUSH
21314: LD_INT 1
21316: ARRAY
21317: PPUSH
21318: LD_VAR 0 4
21322: PUSH
21323: LD_INT 2
21325: ARRAY
21326: PPUSH
21327: LD_VAR 0 1
21331: PPUSH
21332: CALL_OW 456
// end ;
21336: GO 21249
21338: POP
21339: POP
// end ;
21340: LD_VAR 0 3
21344: RET
// export function Count ( array ) ; var i ; begin
21345: LD_INT 0
21347: PPUSH
21348: PPUSH
// result := 0 ;
21349: LD_ADDR_VAR 0 2
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// for i in array do
21357: LD_ADDR_VAR 0 3
21361: PUSH
21362: LD_VAR 0 1
21366: PUSH
21367: FOR_IN
21368: IFFALSE 21392
// if i then
21370: LD_VAR 0 3
21374: IFFALSE 21390
// result := result + 1 ;
21376: LD_ADDR_VAR 0 2
21380: PUSH
21381: LD_VAR 0 2
21385: PUSH
21386: LD_INT 1
21388: PLUS
21389: ST_TO_ADDR
21390: GO 21367
21392: POP
21393: POP
// end ;
21394: LD_VAR 0 2
21398: RET
// export function IsEmpty ( building ) ; begin
21399: LD_INT 0
21401: PPUSH
// if not building then
21402: LD_VAR 0 1
21406: NOT
21407: IFFALSE 21411
// exit ;
21409: GO 21454
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21411: LD_ADDR_VAR 0 2
21415: PUSH
21416: LD_VAR 0 1
21420: PUSH
21421: LD_INT 22
21423: PUSH
21424: LD_VAR 0 1
21428: PPUSH
21429: CALL_OW 255
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 58
21440: PUSH
21441: EMPTY
21442: LIST
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PPUSH
21448: CALL_OW 69
21452: IN
21453: ST_TO_ADDR
// end ;
21454: LD_VAR 0 2
21458: RET
// export function IsNotFull ( building ) ; begin
21459: LD_INT 0
21461: PPUSH
// if not building then
21462: LD_VAR 0 1
21466: NOT
21467: IFFALSE 21471
// exit ;
21469: GO 21490
// result := UnitsInside ( building ) < 6 ;
21471: LD_ADDR_VAR 0 2
21475: PUSH
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 313
21485: PUSH
21486: LD_INT 6
21488: LESS
21489: ST_TO_ADDR
// end ;
21490: LD_VAR 0 2
21494: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21495: LD_INT 0
21497: PPUSH
21498: PPUSH
21499: PPUSH
21500: PPUSH
// tmp := [ ] ;
21501: LD_ADDR_VAR 0 3
21505: PUSH
21506: EMPTY
21507: ST_TO_ADDR
// list := [ ] ;
21508: LD_ADDR_VAR 0 5
21512: PUSH
21513: EMPTY
21514: ST_TO_ADDR
// for i = 16 to 25 do
21515: LD_ADDR_VAR 0 4
21519: PUSH
21520: DOUBLE
21521: LD_INT 16
21523: DEC
21524: ST_TO_ADDR
21525: LD_INT 25
21527: PUSH
21528: FOR_TO
21529: IFFALSE 21602
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21531: LD_ADDR_VAR 0 3
21535: PUSH
21536: LD_VAR 0 3
21540: PUSH
21541: LD_INT 22
21543: PUSH
21544: LD_VAR 0 1
21548: PPUSH
21549: CALL_OW 255
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 91
21560: PUSH
21561: LD_VAR 0 1
21565: PUSH
21566: LD_INT 6
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 30
21576: PUSH
21577: LD_VAR 0 4
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: PUSH
21591: EMPTY
21592: LIST
21593: PPUSH
21594: CALL_OW 69
21598: ADD
21599: ST_TO_ADDR
21600: GO 21528
21602: POP
21603: POP
// for i = 1 to tmp do
21604: LD_ADDR_VAR 0 4
21608: PUSH
21609: DOUBLE
21610: LD_INT 1
21612: DEC
21613: ST_TO_ADDR
21614: LD_VAR 0 3
21618: PUSH
21619: FOR_TO
21620: IFFALSE 21708
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21622: LD_ADDR_VAR 0 5
21626: PUSH
21627: LD_VAR 0 5
21631: PUSH
21632: LD_VAR 0 3
21636: PUSH
21637: LD_VAR 0 4
21641: ARRAY
21642: PPUSH
21643: CALL_OW 266
21647: PUSH
21648: LD_VAR 0 3
21652: PUSH
21653: LD_VAR 0 4
21657: ARRAY
21658: PPUSH
21659: CALL_OW 250
21663: PUSH
21664: LD_VAR 0 3
21668: PUSH
21669: LD_VAR 0 4
21673: ARRAY
21674: PPUSH
21675: CALL_OW 251
21679: PUSH
21680: LD_VAR 0 3
21684: PUSH
21685: LD_VAR 0 4
21689: ARRAY
21690: PPUSH
21691: CALL_OW 254
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: ADD
21705: ST_TO_ADDR
21706: GO 21619
21708: POP
21709: POP
// result := list ;
21710: LD_ADDR_VAR 0 2
21714: PUSH
21715: LD_VAR 0 5
21719: ST_TO_ADDR
// end ;
21720: LD_VAR 0 2
21724: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21725: LD_INT 0
21727: PPUSH
21728: PPUSH
21729: PPUSH
21730: PPUSH
21731: PPUSH
21732: PPUSH
21733: PPUSH
// if not factory then
21734: LD_VAR 0 1
21738: NOT
21739: IFFALSE 21743
// exit ;
21741: GO 22336
// if control = control_apeman then
21743: LD_VAR 0 4
21747: PUSH
21748: LD_INT 5
21750: EQUAL
21751: IFFALSE 21860
// begin tmp := UnitsInside ( factory ) ;
21753: LD_ADDR_VAR 0 8
21757: PUSH
21758: LD_VAR 0 1
21762: PPUSH
21763: CALL_OW 313
21767: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21768: LD_VAR 0 8
21772: PPUSH
21773: LD_INT 25
21775: PUSH
21776: LD_INT 12
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PPUSH
21783: CALL_OW 72
21787: NOT
21788: IFFALSE 21798
// control := control_manual ;
21790: LD_ADDR_VAR 0 4
21794: PUSH
21795: LD_INT 1
21797: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21798: LD_ADDR_VAR 0 8
21802: PUSH
21803: LD_VAR 0 1
21807: PPUSH
21808: CALL 21495 0 1
21812: ST_TO_ADDR
// if tmp then
21813: LD_VAR 0 8
21817: IFFALSE 21860
// begin for i in tmp do
21819: LD_ADDR_VAR 0 7
21823: PUSH
21824: LD_VAR 0 8
21828: PUSH
21829: FOR_IN
21830: IFFALSE 21858
// if i [ 1 ] = b_ext_radio then
21832: LD_VAR 0 7
21836: PUSH
21837: LD_INT 1
21839: ARRAY
21840: PUSH
21841: LD_INT 22
21843: EQUAL
21844: IFFALSE 21856
// begin control := control_remote ;
21846: LD_ADDR_VAR 0 4
21850: PUSH
21851: LD_INT 2
21853: ST_TO_ADDR
// break ;
21854: GO 21858
// end ;
21856: GO 21829
21858: POP
21859: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21860: LD_VAR 0 1
21864: PPUSH
21865: LD_VAR 0 2
21869: PPUSH
21870: LD_VAR 0 3
21874: PPUSH
21875: LD_VAR 0 4
21879: PPUSH
21880: LD_VAR 0 5
21884: PPUSH
21885: CALL_OW 448
21889: IFFALSE 21924
// begin result := [ chassis , engine , control , weapon ] ;
21891: LD_ADDR_VAR 0 6
21895: PUSH
21896: LD_VAR 0 2
21900: PUSH
21901: LD_VAR 0 3
21905: PUSH
21906: LD_VAR 0 4
21910: PUSH
21911: LD_VAR 0 5
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: ST_TO_ADDR
// exit ;
21922: GO 22336
// end ; _chassis := AvailableChassisList ( factory ) ;
21924: LD_ADDR_VAR 0 9
21928: PUSH
21929: LD_VAR 0 1
21933: PPUSH
21934: CALL_OW 475
21938: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21939: LD_ADDR_VAR 0 11
21943: PUSH
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 476
21953: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21954: LD_ADDR_VAR 0 12
21958: PUSH
21959: LD_VAR 0 1
21963: PPUSH
21964: CALL_OW 477
21968: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21969: LD_ADDR_VAR 0 10
21973: PUSH
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 478
21983: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21984: LD_VAR 0 9
21988: NOT
21989: PUSH
21990: LD_VAR 0 11
21994: NOT
21995: OR
21996: PUSH
21997: LD_VAR 0 12
22001: NOT
22002: OR
22003: PUSH
22004: LD_VAR 0 10
22008: NOT
22009: OR
22010: IFFALSE 22045
// begin result := [ chassis , engine , control , weapon ] ;
22012: LD_ADDR_VAR 0 6
22016: PUSH
22017: LD_VAR 0 2
22021: PUSH
22022: LD_VAR 0 3
22026: PUSH
22027: LD_VAR 0 4
22031: PUSH
22032: LD_VAR 0 5
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: ST_TO_ADDR
// exit ;
22043: GO 22336
// end ; if not chassis in _chassis then
22045: LD_VAR 0 2
22049: PUSH
22050: LD_VAR 0 9
22054: IN
22055: NOT
22056: IFFALSE 22082
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22058: LD_ADDR_VAR 0 2
22062: PUSH
22063: LD_VAR 0 9
22067: PUSH
22068: LD_INT 1
22070: PPUSH
22071: LD_VAR 0 9
22075: PPUSH
22076: CALL_OW 12
22080: ARRAY
22081: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22082: LD_VAR 0 2
22086: PPUSH
22087: LD_VAR 0 3
22091: PPUSH
22092: CALL 22341 0 2
22096: NOT
22097: IFFALSE 22156
// repeat engine := _engine [ 1 ] ;
22099: LD_ADDR_VAR 0 3
22103: PUSH
22104: LD_VAR 0 11
22108: PUSH
22109: LD_INT 1
22111: ARRAY
22112: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22113: LD_ADDR_VAR 0 11
22117: PUSH
22118: LD_VAR 0 11
22122: PPUSH
22123: LD_INT 1
22125: PPUSH
22126: CALL_OW 3
22130: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22131: LD_VAR 0 2
22135: PPUSH
22136: LD_VAR 0 3
22140: PPUSH
22141: CALL 22341 0 2
22145: PUSH
22146: LD_VAR 0 11
22150: PUSH
22151: EMPTY
22152: EQUAL
22153: OR
22154: IFFALSE 22099
// if not control in _control then
22156: LD_VAR 0 4
22160: PUSH
22161: LD_VAR 0 12
22165: IN
22166: NOT
22167: IFFALSE 22193
// control := _control [ rand ( 1 , _control ) ] ;
22169: LD_ADDR_VAR 0 4
22173: PUSH
22174: LD_VAR 0 12
22178: PUSH
22179: LD_INT 1
22181: PPUSH
22182: LD_VAR 0 12
22186: PPUSH
22187: CALL_OW 12
22191: ARRAY
22192: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22193: LD_VAR 0 2
22197: PPUSH
22198: LD_VAR 0 5
22202: PPUSH
22203: CALL 22561 0 2
22207: NOT
22208: IFFALSE 22267
// repeat weapon := _weapon [ 1 ] ;
22210: LD_ADDR_VAR 0 5
22214: PUSH
22215: LD_VAR 0 10
22219: PUSH
22220: LD_INT 1
22222: ARRAY
22223: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22224: LD_ADDR_VAR 0 10
22228: PUSH
22229: LD_VAR 0 10
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: CALL_OW 3
22241: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22242: LD_VAR 0 2
22246: PPUSH
22247: LD_VAR 0 5
22251: PPUSH
22252: CALL 22561 0 2
22256: PUSH
22257: LD_VAR 0 10
22261: PUSH
22262: EMPTY
22263: EQUAL
22264: OR
22265: IFFALSE 22210
// result := [ ] ;
22267: LD_ADDR_VAR 0 6
22271: PUSH
22272: EMPTY
22273: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22274: LD_VAR 0 1
22278: PPUSH
22279: LD_VAR 0 2
22283: PPUSH
22284: LD_VAR 0 3
22288: PPUSH
22289: LD_VAR 0 4
22293: PPUSH
22294: LD_VAR 0 5
22298: PPUSH
22299: CALL_OW 448
22303: IFFALSE 22336
// result := [ chassis , engine , control , weapon ] ;
22305: LD_ADDR_VAR 0 6
22309: PUSH
22310: LD_VAR 0 2
22314: PUSH
22315: LD_VAR 0 3
22319: PUSH
22320: LD_VAR 0 4
22324: PUSH
22325: LD_VAR 0 5
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: ST_TO_ADDR
// end ;
22336: LD_VAR 0 6
22340: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22341: LD_INT 0
22343: PPUSH
// if not chassis or not engine then
22344: LD_VAR 0 1
22348: NOT
22349: PUSH
22350: LD_VAR 0 2
22354: NOT
22355: OR
22356: IFFALSE 22360
// exit ;
22358: GO 22556
// case engine of engine_solar :
22360: LD_VAR 0 2
22364: PUSH
22365: LD_INT 2
22367: DOUBLE
22368: EQUAL
22369: IFTRUE 22373
22371: GO 22411
22373: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22374: LD_ADDR_VAR 0 3
22378: PUSH
22379: LD_INT 11
22381: PUSH
22382: LD_INT 12
22384: PUSH
22385: LD_INT 13
22387: PUSH
22388: LD_INT 14
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: LD_INT 3
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: ST_TO_ADDR
22409: GO 22540
22411: LD_INT 1
22413: DOUBLE
22414: EQUAL
22415: IFTRUE 22419
22417: GO 22481
22419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22420: LD_ADDR_VAR 0 3
22424: PUSH
22425: LD_INT 11
22427: PUSH
22428: LD_INT 12
22430: PUSH
22431: LD_INT 13
22433: PUSH
22434: LD_INT 14
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: LD_INT 2
22442: PUSH
22443: LD_INT 3
22445: PUSH
22446: LD_INT 4
22448: PUSH
22449: LD_INT 5
22451: PUSH
22452: LD_INT 21
22454: PUSH
22455: LD_INT 23
22457: PUSH
22458: LD_INT 22
22460: PUSH
22461: LD_INT 24
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: ST_TO_ADDR
22479: GO 22540
22481: LD_INT 3
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22539
22489: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22490: LD_ADDR_VAR 0 3
22494: PUSH
22495: LD_INT 13
22497: PUSH
22498: LD_INT 14
22500: PUSH
22501: LD_INT 2
22503: PUSH
22504: LD_INT 3
22506: PUSH
22507: LD_INT 4
22509: PUSH
22510: LD_INT 5
22512: PUSH
22513: LD_INT 21
22515: PUSH
22516: LD_INT 22
22518: PUSH
22519: LD_INT 23
22521: PUSH
22522: LD_INT 24
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: ST_TO_ADDR
22537: GO 22540
22539: POP
// result := ( chassis in result ) ;
22540: LD_ADDR_VAR 0 3
22544: PUSH
22545: LD_VAR 0 1
22549: PUSH
22550: LD_VAR 0 3
22554: IN
22555: ST_TO_ADDR
// end ;
22556: LD_VAR 0 3
22560: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22561: LD_INT 0
22563: PPUSH
// if not chassis or not weapon then
22564: LD_VAR 0 1
22568: NOT
22569: PUSH
22570: LD_VAR 0 2
22574: NOT
22575: OR
22576: IFFALSE 22580
// exit ;
22578: GO 23606
// case weapon of us_machine_gun :
22580: LD_VAR 0 2
22584: PUSH
22585: LD_INT 2
22587: DOUBLE
22588: EQUAL
22589: IFTRUE 22593
22591: GO 22623
22593: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22594: LD_ADDR_VAR 0 3
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: LD_INT 4
22610: PUSH
22611: LD_INT 5
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: ST_TO_ADDR
22621: GO 23590
22623: LD_INT 3
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22661
22631: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22632: LD_ADDR_VAR 0 3
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: LD_INT 2
22642: PUSH
22643: LD_INT 3
22645: PUSH
22646: LD_INT 4
22648: PUSH
22649: LD_INT 5
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: ST_TO_ADDR
22659: GO 23590
22661: LD_INT 11
22663: DOUBLE
22664: EQUAL
22665: IFTRUE 22669
22667: GO 22699
22669: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22670: LD_ADDR_VAR 0 3
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: LD_INT 2
22680: PUSH
22681: LD_INT 3
22683: PUSH
22684: LD_INT 4
22686: PUSH
22687: LD_INT 5
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: ST_TO_ADDR
22697: GO 23590
22699: LD_INT 4
22701: DOUBLE
22702: EQUAL
22703: IFTRUE 22707
22705: GO 22733
22707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22708: LD_ADDR_VAR 0 3
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: LD_INT 4
22721: PUSH
22722: LD_INT 5
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: ST_TO_ADDR
22731: GO 23590
22733: LD_INT 5
22735: DOUBLE
22736: EQUAL
22737: IFTRUE 22741
22739: GO 22767
22741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22742: LD_ADDR_VAR 0 3
22746: PUSH
22747: LD_INT 2
22749: PUSH
22750: LD_INT 3
22752: PUSH
22753: LD_INT 4
22755: PUSH
22756: LD_INT 5
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: ST_TO_ADDR
22765: GO 23590
22767: LD_INT 9
22769: DOUBLE
22770: EQUAL
22771: IFTRUE 22775
22773: GO 22801
22775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22776: LD_ADDR_VAR 0 3
22780: PUSH
22781: LD_INT 2
22783: PUSH
22784: LD_INT 3
22786: PUSH
22787: LD_INT 4
22789: PUSH
22790: LD_INT 5
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: ST_TO_ADDR
22799: GO 23590
22801: LD_INT 7
22803: DOUBLE
22804: EQUAL
22805: IFTRUE 22809
22807: GO 22835
22809: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22810: LD_ADDR_VAR 0 3
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: LD_INT 3
22820: PUSH
22821: LD_INT 4
22823: PUSH
22824: LD_INT 5
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: ST_TO_ADDR
22833: GO 23590
22835: LD_INT 12
22837: DOUBLE
22838: EQUAL
22839: IFTRUE 22843
22841: GO 22869
22843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22844: LD_ADDR_VAR 0 3
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: LD_INT 3
22854: PUSH
22855: LD_INT 4
22857: PUSH
22858: LD_INT 5
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: ST_TO_ADDR
22867: GO 23590
22869: LD_INT 13
22871: DOUBLE
22872: EQUAL
22873: IFTRUE 22877
22875: GO 22903
22877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22878: LD_ADDR_VAR 0 3
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: LD_INT 4
22891: PUSH
22892: LD_INT 5
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: ST_TO_ADDR
22901: GO 23590
22903: LD_INT 14
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22929
22911: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22912: LD_ADDR_VAR 0 3
22916: PUSH
22917: LD_INT 4
22919: PUSH
22920: LD_INT 5
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: ST_TO_ADDR
22927: GO 23590
22929: LD_INT 6
22931: DOUBLE
22932: EQUAL
22933: IFTRUE 22937
22935: GO 22955
22937: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22938: LD_ADDR_VAR 0 3
22942: PUSH
22943: LD_INT 4
22945: PUSH
22946: LD_INT 5
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: ST_TO_ADDR
22953: GO 23590
22955: LD_INT 10
22957: DOUBLE
22958: EQUAL
22959: IFTRUE 22963
22961: GO 22981
22963: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22964: LD_ADDR_VAR 0 3
22968: PUSH
22969: LD_INT 4
22971: PUSH
22972: LD_INT 5
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: ST_TO_ADDR
22979: GO 23590
22981: LD_INT 22
22983: DOUBLE
22984: EQUAL
22985: IFTRUE 22989
22987: GO 23015
22989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22990: LD_ADDR_VAR 0 3
22994: PUSH
22995: LD_INT 11
22997: PUSH
22998: LD_INT 12
23000: PUSH
23001: LD_INT 13
23003: PUSH
23004: LD_INT 14
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: ST_TO_ADDR
23013: GO 23590
23015: LD_INT 23
23017: DOUBLE
23018: EQUAL
23019: IFTRUE 23023
23021: GO 23049
23023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23024: LD_ADDR_VAR 0 3
23028: PUSH
23029: LD_INT 11
23031: PUSH
23032: LD_INT 12
23034: PUSH
23035: LD_INT 13
23037: PUSH
23038: LD_INT 14
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: ST_TO_ADDR
23047: GO 23590
23049: LD_INT 24
23051: DOUBLE
23052: EQUAL
23053: IFTRUE 23057
23055: GO 23083
23057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23058: LD_ADDR_VAR 0 3
23062: PUSH
23063: LD_INT 11
23065: PUSH
23066: LD_INT 12
23068: PUSH
23069: LD_INT 13
23071: PUSH
23072: LD_INT 14
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: ST_TO_ADDR
23081: GO 23590
23083: LD_INT 30
23085: DOUBLE
23086: EQUAL
23087: IFTRUE 23091
23089: GO 23117
23091: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23092: LD_ADDR_VAR 0 3
23096: PUSH
23097: LD_INT 11
23099: PUSH
23100: LD_INT 12
23102: PUSH
23103: LD_INT 13
23105: PUSH
23106: LD_INT 14
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: ST_TO_ADDR
23115: GO 23590
23117: LD_INT 25
23119: DOUBLE
23120: EQUAL
23121: IFTRUE 23125
23123: GO 23143
23125: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23126: LD_ADDR_VAR 0 3
23130: PUSH
23131: LD_INT 13
23133: PUSH
23134: LD_INT 14
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: ST_TO_ADDR
23141: GO 23590
23143: LD_INT 27
23145: DOUBLE
23146: EQUAL
23147: IFTRUE 23151
23149: GO 23169
23151: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23152: LD_ADDR_VAR 0 3
23156: PUSH
23157: LD_INT 13
23159: PUSH
23160: LD_INT 14
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: ST_TO_ADDR
23167: GO 23590
23169: LD_INT 28
23171: DOUBLE
23172: EQUAL
23173: IFTRUE 23177
23175: GO 23195
23177: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23178: LD_ADDR_VAR 0 3
23182: PUSH
23183: LD_INT 13
23185: PUSH
23186: LD_INT 14
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: ST_TO_ADDR
23193: GO 23590
23195: LD_INT 29
23197: DOUBLE
23198: EQUAL
23199: IFTRUE 23203
23201: GO 23221
23203: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23204: LD_ADDR_VAR 0 3
23208: PUSH
23209: LD_INT 13
23211: PUSH
23212: LD_INT 14
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: ST_TO_ADDR
23219: GO 23590
23221: LD_INT 31
23223: DOUBLE
23224: EQUAL
23225: IFTRUE 23229
23227: GO 23247
23229: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23230: LD_ADDR_VAR 0 3
23234: PUSH
23235: LD_INT 13
23237: PUSH
23238: LD_INT 14
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: ST_TO_ADDR
23245: GO 23590
23247: LD_INT 26
23249: DOUBLE
23250: EQUAL
23251: IFTRUE 23255
23253: GO 23273
23255: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23256: LD_ADDR_VAR 0 3
23260: PUSH
23261: LD_INT 13
23263: PUSH
23264: LD_INT 14
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: ST_TO_ADDR
23271: GO 23590
23273: LD_INT 42
23275: DOUBLE
23276: EQUAL
23277: IFTRUE 23281
23279: GO 23307
23281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23282: LD_ADDR_VAR 0 3
23286: PUSH
23287: LD_INT 21
23289: PUSH
23290: LD_INT 22
23292: PUSH
23293: LD_INT 23
23295: PUSH
23296: LD_INT 24
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: ST_TO_ADDR
23305: GO 23590
23307: LD_INT 43
23309: DOUBLE
23310: EQUAL
23311: IFTRUE 23315
23313: GO 23341
23315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23316: LD_ADDR_VAR 0 3
23320: PUSH
23321: LD_INT 21
23323: PUSH
23324: LD_INT 22
23326: PUSH
23327: LD_INT 23
23329: PUSH
23330: LD_INT 24
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: ST_TO_ADDR
23339: GO 23590
23341: LD_INT 44
23343: DOUBLE
23344: EQUAL
23345: IFTRUE 23349
23347: GO 23375
23349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23350: LD_ADDR_VAR 0 3
23354: PUSH
23355: LD_INT 21
23357: PUSH
23358: LD_INT 22
23360: PUSH
23361: LD_INT 23
23363: PUSH
23364: LD_INT 24
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: ST_TO_ADDR
23373: GO 23590
23375: LD_INT 45
23377: DOUBLE
23378: EQUAL
23379: IFTRUE 23383
23381: GO 23409
23383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23384: LD_ADDR_VAR 0 3
23388: PUSH
23389: LD_INT 21
23391: PUSH
23392: LD_INT 22
23394: PUSH
23395: LD_INT 23
23397: PUSH
23398: LD_INT 24
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: ST_TO_ADDR
23407: GO 23590
23409: LD_INT 49
23411: DOUBLE
23412: EQUAL
23413: IFTRUE 23417
23415: GO 23443
23417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23418: LD_ADDR_VAR 0 3
23422: PUSH
23423: LD_INT 21
23425: PUSH
23426: LD_INT 22
23428: PUSH
23429: LD_INT 23
23431: PUSH
23432: LD_INT 24
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: ST_TO_ADDR
23441: GO 23590
23443: LD_INT 51
23445: DOUBLE
23446: EQUAL
23447: IFTRUE 23451
23449: GO 23477
23451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23452: LD_ADDR_VAR 0 3
23456: PUSH
23457: LD_INT 21
23459: PUSH
23460: LD_INT 22
23462: PUSH
23463: LD_INT 23
23465: PUSH
23466: LD_INT 24
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: ST_TO_ADDR
23475: GO 23590
23477: LD_INT 52
23479: DOUBLE
23480: EQUAL
23481: IFTRUE 23485
23483: GO 23511
23485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23486: LD_ADDR_VAR 0 3
23490: PUSH
23491: LD_INT 21
23493: PUSH
23494: LD_INT 22
23496: PUSH
23497: LD_INT 23
23499: PUSH
23500: LD_INT 24
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: ST_TO_ADDR
23509: GO 23590
23511: LD_INT 53
23513: DOUBLE
23514: EQUAL
23515: IFTRUE 23519
23517: GO 23537
23519: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23520: LD_ADDR_VAR 0 3
23524: PUSH
23525: LD_INT 23
23527: PUSH
23528: LD_INT 24
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: ST_TO_ADDR
23535: GO 23590
23537: LD_INT 46
23539: DOUBLE
23540: EQUAL
23541: IFTRUE 23545
23543: GO 23563
23545: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23546: LD_ADDR_VAR 0 3
23550: PUSH
23551: LD_INT 23
23553: PUSH
23554: LD_INT 24
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: ST_TO_ADDR
23561: GO 23590
23563: LD_INT 47
23565: DOUBLE
23566: EQUAL
23567: IFTRUE 23571
23569: GO 23589
23571: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23572: LD_ADDR_VAR 0 3
23576: PUSH
23577: LD_INT 23
23579: PUSH
23580: LD_INT 24
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: ST_TO_ADDR
23587: GO 23590
23589: POP
// result := ( chassis in result ) ;
23590: LD_ADDR_VAR 0 3
23594: PUSH
23595: LD_VAR 0 1
23599: PUSH
23600: LD_VAR 0 3
23604: IN
23605: ST_TO_ADDR
// end ;
23606: LD_VAR 0 3
23610: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23611: LD_INT 0
23613: PPUSH
23614: PPUSH
23615: PPUSH
23616: PPUSH
23617: PPUSH
23618: PPUSH
23619: PPUSH
// result := array ;
23620: LD_ADDR_VAR 0 5
23624: PUSH
23625: LD_VAR 0 1
23629: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23630: LD_VAR 0 1
23634: NOT
23635: PUSH
23636: LD_VAR 0 2
23640: NOT
23641: OR
23642: PUSH
23643: LD_VAR 0 3
23647: NOT
23648: OR
23649: PUSH
23650: LD_VAR 0 2
23654: PUSH
23655: LD_VAR 0 1
23659: GREATER
23660: OR
23661: PUSH
23662: LD_VAR 0 3
23666: PUSH
23667: LD_VAR 0 1
23671: GREATER
23672: OR
23673: IFFALSE 23677
// exit ;
23675: GO 23973
// if direction then
23677: LD_VAR 0 4
23681: IFFALSE 23745
// begin d := 1 ;
23683: LD_ADDR_VAR 0 9
23687: PUSH
23688: LD_INT 1
23690: ST_TO_ADDR
// if i_from > i_to then
23691: LD_VAR 0 2
23695: PUSH
23696: LD_VAR 0 3
23700: GREATER
23701: IFFALSE 23727
// length := ( array - i_from ) + i_to else
23703: LD_ADDR_VAR 0 11
23707: PUSH
23708: LD_VAR 0 1
23712: PUSH
23713: LD_VAR 0 2
23717: MINUS
23718: PUSH
23719: LD_VAR 0 3
23723: PLUS
23724: ST_TO_ADDR
23725: GO 23743
// length := i_to - i_from ;
23727: LD_ADDR_VAR 0 11
23731: PUSH
23732: LD_VAR 0 3
23736: PUSH
23737: LD_VAR 0 2
23741: MINUS
23742: ST_TO_ADDR
// end else
23743: GO 23806
// begin d := - 1 ;
23745: LD_ADDR_VAR 0 9
23749: PUSH
23750: LD_INT 1
23752: NEG
23753: ST_TO_ADDR
// if i_from > i_to then
23754: LD_VAR 0 2
23758: PUSH
23759: LD_VAR 0 3
23763: GREATER
23764: IFFALSE 23784
// length := i_from - i_to else
23766: LD_ADDR_VAR 0 11
23770: PUSH
23771: LD_VAR 0 2
23775: PUSH
23776: LD_VAR 0 3
23780: MINUS
23781: ST_TO_ADDR
23782: GO 23806
// length := ( array - i_to ) + i_from ;
23784: LD_ADDR_VAR 0 11
23788: PUSH
23789: LD_VAR 0 1
23793: PUSH
23794: LD_VAR 0 3
23798: MINUS
23799: PUSH
23800: LD_VAR 0 2
23804: PLUS
23805: ST_TO_ADDR
// end ; if not length then
23806: LD_VAR 0 11
23810: NOT
23811: IFFALSE 23815
// exit ;
23813: GO 23973
// tmp := array ;
23815: LD_ADDR_VAR 0 10
23819: PUSH
23820: LD_VAR 0 1
23824: ST_TO_ADDR
// for i = 1 to length do
23825: LD_ADDR_VAR 0 6
23829: PUSH
23830: DOUBLE
23831: LD_INT 1
23833: DEC
23834: ST_TO_ADDR
23835: LD_VAR 0 11
23839: PUSH
23840: FOR_TO
23841: IFFALSE 23961
// begin for j = 1 to array do
23843: LD_ADDR_VAR 0 7
23847: PUSH
23848: DOUBLE
23849: LD_INT 1
23851: DEC
23852: ST_TO_ADDR
23853: LD_VAR 0 1
23857: PUSH
23858: FOR_TO
23859: IFFALSE 23947
// begin k := j + d ;
23861: LD_ADDR_VAR 0 8
23865: PUSH
23866: LD_VAR 0 7
23870: PUSH
23871: LD_VAR 0 9
23875: PLUS
23876: ST_TO_ADDR
// if k > array then
23877: LD_VAR 0 8
23881: PUSH
23882: LD_VAR 0 1
23886: GREATER
23887: IFFALSE 23897
// k := 1 ;
23889: LD_ADDR_VAR 0 8
23893: PUSH
23894: LD_INT 1
23896: ST_TO_ADDR
// if not k then
23897: LD_VAR 0 8
23901: NOT
23902: IFFALSE 23914
// k := array ;
23904: LD_ADDR_VAR 0 8
23908: PUSH
23909: LD_VAR 0 1
23913: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23914: LD_ADDR_VAR 0 10
23918: PUSH
23919: LD_VAR 0 10
23923: PPUSH
23924: LD_VAR 0 8
23928: PPUSH
23929: LD_VAR 0 1
23933: PUSH
23934: LD_VAR 0 7
23938: ARRAY
23939: PPUSH
23940: CALL_OW 1
23944: ST_TO_ADDR
// end ;
23945: GO 23858
23947: POP
23948: POP
// array := tmp ;
23949: LD_ADDR_VAR 0 1
23953: PUSH
23954: LD_VAR 0 10
23958: ST_TO_ADDR
// end ;
23959: GO 23840
23961: POP
23962: POP
// result := array ;
23963: LD_ADDR_VAR 0 5
23967: PUSH
23968: LD_VAR 0 1
23972: ST_TO_ADDR
// end ;
23973: LD_VAR 0 5
23977: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23978: LD_INT 0
23980: PPUSH
23981: PPUSH
// result := 0 ;
23982: LD_ADDR_VAR 0 3
23986: PUSH
23987: LD_INT 0
23989: ST_TO_ADDR
// if not array or not value in array then
23990: LD_VAR 0 1
23994: NOT
23995: PUSH
23996: LD_VAR 0 2
24000: PUSH
24001: LD_VAR 0 1
24005: IN
24006: NOT
24007: OR
24008: IFFALSE 24012
// exit ;
24010: GO 24066
// for i = 1 to array do
24012: LD_ADDR_VAR 0 4
24016: PUSH
24017: DOUBLE
24018: LD_INT 1
24020: DEC
24021: ST_TO_ADDR
24022: LD_VAR 0 1
24026: PUSH
24027: FOR_TO
24028: IFFALSE 24064
// if value = array [ i ] then
24030: LD_VAR 0 2
24034: PUSH
24035: LD_VAR 0 1
24039: PUSH
24040: LD_VAR 0 4
24044: ARRAY
24045: EQUAL
24046: IFFALSE 24062
// begin result := i ;
24048: LD_ADDR_VAR 0 3
24052: PUSH
24053: LD_VAR 0 4
24057: ST_TO_ADDR
// exit ;
24058: POP
24059: POP
24060: GO 24066
// end ;
24062: GO 24027
24064: POP
24065: POP
// end ;
24066: LD_VAR 0 3
24070: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24071: LD_INT 0
24073: PPUSH
// vc_chassis := chassis ;
24074: LD_ADDR_OWVAR 37
24078: PUSH
24079: LD_VAR 0 1
24083: ST_TO_ADDR
// vc_engine := engine ;
24084: LD_ADDR_OWVAR 39
24088: PUSH
24089: LD_VAR 0 2
24093: ST_TO_ADDR
// vc_control := control ;
24094: LD_ADDR_OWVAR 38
24098: PUSH
24099: LD_VAR 0 3
24103: ST_TO_ADDR
// vc_weapon := weapon ;
24104: LD_ADDR_OWVAR 40
24108: PUSH
24109: LD_VAR 0 4
24113: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24114: LD_ADDR_OWVAR 41
24118: PUSH
24119: LD_VAR 0 5
24123: ST_TO_ADDR
// end ;
24124: LD_VAR 0 6
24128: RET
// export function WantPlant ( unit ) ; var task ; begin
24129: LD_INT 0
24131: PPUSH
24132: PPUSH
// result := false ;
24133: LD_ADDR_VAR 0 2
24137: PUSH
24138: LD_INT 0
24140: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24141: LD_ADDR_VAR 0 3
24145: PUSH
24146: LD_VAR 0 1
24150: PPUSH
24151: CALL_OW 437
24155: ST_TO_ADDR
// if task then
24156: LD_VAR 0 3
24160: IFFALSE 24188
// if task [ 1 ] [ 1 ] = p then
24162: LD_VAR 0 3
24166: PUSH
24167: LD_INT 1
24169: ARRAY
24170: PUSH
24171: LD_INT 1
24173: ARRAY
24174: PUSH
24175: LD_STRING p
24177: EQUAL
24178: IFFALSE 24188
// result := true ;
24180: LD_ADDR_VAR 0 2
24184: PUSH
24185: LD_INT 1
24187: ST_TO_ADDR
// end ;
24188: LD_VAR 0 2
24192: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24193: LD_INT 0
24195: PPUSH
24196: PPUSH
24197: PPUSH
24198: PPUSH
// if pos < 1 then
24199: LD_VAR 0 2
24203: PUSH
24204: LD_INT 1
24206: LESS
24207: IFFALSE 24211
// exit ;
24209: GO 24514
// if pos = 1 then
24211: LD_VAR 0 2
24215: PUSH
24216: LD_INT 1
24218: EQUAL
24219: IFFALSE 24252
// result := Replace ( arr , pos [ 1 ] , value ) else
24221: LD_ADDR_VAR 0 4
24225: PUSH
24226: LD_VAR 0 1
24230: PPUSH
24231: LD_VAR 0 2
24235: PUSH
24236: LD_INT 1
24238: ARRAY
24239: PPUSH
24240: LD_VAR 0 3
24244: PPUSH
24245: CALL_OW 1
24249: ST_TO_ADDR
24250: GO 24514
// begin tmp := arr ;
24252: LD_ADDR_VAR 0 6
24256: PUSH
24257: LD_VAR 0 1
24261: ST_TO_ADDR
// s_arr := [ tmp ] ;
24262: LD_ADDR_VAR 0 7
24266: PUSH
24267: LD_VAR 0 6
24271: PUSH
24272: EMPTY
24273: LIST
24274: ST_TO_ADDR
// for i = 1 to pos - 1 do
24275: LD_ADDR_VAR 0 5
24279: PUSH
24280: DOUBLE
24281: LD_INT 1
24283: DEC
24284: ST_TO_ADDR
24285: LD_VAR 0 2
24289: PUSH
24290: LD_INT 1
24292: MINUS
24293: PUSH
24294: FOR_TO
24295: IFFALSE 24340
// begin tmp := tmp [ pos [ i ] ] ;
24297: LD_ADDR_VAR 0 6
24301: PUSH
24302: LD_VAR 0 6
24306: PUSH
24307: LD_VAR 0 2
24311: PUSH
24312: LD_VAR 0 5
24316: ARRAY
24317: ARRAY
24318: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24319: LD_ADDR_VAR 0 7
24323: PUSH
24324: LD_VAR 0 7
24328: PUSH
24329: LD_VAR 0 6
24333: PUSH
24334: EMPTY
24335: LIST
24336: ADD
24337: ST_TO_ADDR
// end ;
24338: GO 24294
24340: POP
24341: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24342: LD_ADDR_VAR 0 6
24346: PUSH
24347: LD_VAR 0 6
24351: PPUSH
24352: LD_VAR 0 2
24356: PUSH
24357: LD_VAR 0 2
24361: ARRAY
24362: PPUSH
24363: LD_VAR 0 3
24367: PPUSH
24368: CALL_OW 1
24372: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24373: LD_ADDR_VAR 0 7
24377: PUSH
24378: LD_VAR 0 7
24382: PPUSH
24383: LD_VAR 0 7
24387: PPUSH
24388: LD_VAR 0 6
24392: PPUSH
24393: CALL_OW 1
24397: ST_TO_ADDR
// for i = s_arr downto 2 do
24398: LD_ADDR_VAR 0 5
24402: PUSH
24403: DOUBLE
24404: LD_VAR 0 7
24408: INC
24409: ST_TO_ADDR
24410: LD_INT 2
24412: PUSH
24413: FOR_DOWNTO
24414: IFFALSE 24498
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24416: LD_ADDR_VAR 0 6
24420: PUSH
24421: LD_VAR 0 7
24425: PUSH
24426: LD_VAR 0 5
24430: PUSH
24431: LD_INT 1
24433: MINUS
24434: ARRAY
24435: PPUSH
24436: LD_VAR 0 2
24440: PUSH
24441: LD_VAR 0 5
24445: PUSH
24446: LD_INT 1
24448: MINUS
24449: ARRAY
24450: PPUSH
24451: LD_VAR 0 7
24455: PUSH
24456: LD_VAR 0 5
24460: ARRAY
24461: PPUSH
24462: CALL_OW 1
24466: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24467: LD_ADDR_VAR 0 7
24471: PUSH
24472: LD_VAR 0 7
24476: PPUSH
24477: LD_VAR 0 5
24481: PUSH
24482: LD_INT 1
24484: MINUS
24485: PPUSH
24486: LD_VAR 0 6
24490: PPUSH
24491: CALL_OW 1
24495: ST_TO_ADDR
// end ;
24496: GO 24413
24498: POP
24499: POP
// result := s_arr [ 1 ] ;
24500: LD_ADDR_VAR 0 4
24504: PUSH
24505: LD_VAR 0 7
24509: PUSH
24510: LD_INT 1
24512: ARRAY
24513: ST_TO_ADDR
// end ; end ;
24514: LD_VAR 0 4
24518: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24519: LD_INT 0
24521: PPUSH
24522: PPUSH
// if not list then
24523: LD_VAR 0 1
24527: NOT
24528: IFFALSE 24532
// exit ;
24530: GO 24623
// i := list [ pos1 ] ;
24532: LD_ADDR_VAR 0 5
24536: PUSH
24537: LD_VAR 0 1
24541: PUSH
24542: LD_VAR 0 2
24546: ARRAY
24547: ST_TO_ADDR
// if not i then
24548: LD_VAR 0 5
24552: NOT
24553: IFFALSE 24557
// exit ;
24555: GO 24623
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24557: LD_ADDR_VAR 0 1
24561: PUSH
24562: LD_VAR 0 1
24566: PPUSH
24567: LD_VAR 0 2
24571: PPUSH
24572: LD_VAR 0 1
24576: PUSH
24577: LD_VAR 0 3
24581: ARRAY
24582: PPUSH
24583: CALL_OW 1
24587: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24588: LD_ADDR_VAR 0 1
24592: PUSH
24593: LD_VAR 0 1
24597: PPUSH
24598: LD_VAR 0 3
24602: PPUSH
24603: LD_VAR 0 5
24607: PPUSH
24608: CALL_OW 1
24612: ST_TO_ADDR
// result := list ;
24613: LD_ADDR_VAR 0 4
24617: PUSH
24618: LD_VAR 0 1
24622: ST_TO_ADDR
// end ;
24623: LD_VAR 0 4
24627: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24628: LD_INT 0
24630: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24631: LD_ADDR_VAR 0 5
24635: PUSH
24636: LD_VAR 0 1
24640: PPUSH
24641: CALL_OW 250
24645: PPUSH
24646: LD_VAR 0 1
24650: PPUSH
24651: CALL_OW 251
24655: PPUSH
24656: LD_VAR 0 2
24660: PPUSH
24661: LD_VAR 0 3
24665: PPUSH
24666: LD_VAR 0 4
24670: PPUSH
24671: CALL 24681 0 5
24675: ST_TO_ADDR
// end ;
24676: LD_VAR 0 5
24680: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24681: LD_INT 0
24683: PPUSH
24684: PPUSH
24685: PPUSH
24686: PPUSH
// if not list then
24687: LD_VAR 0 3
24691: NOT
24692: IFFALSE 24696
// exit ;
24694: GO 25084
// result := [ ] ;
24696: LD_ADDR_VAR 0 6
24700: PUSH
24701: EMPTY
24702: ST_TO_ADDR
// for i in list do
24703: LD_ADDR_VAR 0 7
24707: PUSH
24708: LD_VAR 0 3
24712: PUSH
24713: FOR_IN
24714: IFFALSE 24916
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24716: LD_ADDR_VAR 0 9
24720: PUSH
24721: LD_VAR 0 7
24725: PPUSH
24726: LD_VAR 0 1
24730: PPUSH
24731: LD_VAR 0 2
24735: PPUSH
24736: CALL_OW 297
24740: ST_TO_ADDR
// if not result then
24741: LD_VAR 0 6
24745: NOT
24746: IFFALSE 24772
// result := [ [ i , tmp ] ] else
24748: LD_ADDR_VAR 0 6
24752: PUSH
24753: LD_VAR 0 7
24757: PUSH
24758: LD_VAR 0 9
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: EMPTY
24768: LIST
24769: ST_TO_ADDR
24770: GO 24914
// begin if result [ result ] [ 2 ] < tmp then
24772: LD_VAR 0 6
24776: PUSH
24777: LD_VAR 0 6
24781: ARRAY
24782: PUSH
24783: LD_INT 2
24785: ARRAY
24786: PUSH
24787: LD_VAR 0 9
24791: LESS
24792: IFFALSE 24834
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24794: LD_ADDR_VAR 0 6
24798: PUSH
24799: LD_VAR 0 6
24803: PPUSH
24804: LD_VAR 0 6
24808: PUSH
24809: LD_INT 1
24811: PLUS
24812: PPUSH
24813: LD_VAR 0 7
24817: PUSH
24818: LD_VAR 0 9
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PPUSH
24827: CALL_OW 2
24831: ST_TO_ADDR
24832: GO 24914
// for j = 1 to result do
24834: LD_ADDR_VAR 0 8
24838: PUSH
24839: DOUBLE
24840: LD_INT 1
24842: DEC
24843: ST_TO_ADDR
24844: LD_VAR 0 6
24848: PUSH
24849: FOR_TO
24850: IFFALSE 24912
// begin if tmp < result [ j ] [ 2 ] then
24852: LD_VAR 0 9
24856: PUSH
24857: LD_VAR 0 6
24861: PUSH
24862: LD_VAR 0 8
24866: ARRAY
24867: PUSH
24868: LD_INT 2
24870: ARRAY
24871: LESS
24872: IFFALSE 24910
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24874: LD_ADDR_VAR 0 6
24878: PUSH
24879: LD_VAR 0 6
24883: PPUSH
24884: LD_VAR 0 8
24888: PPUSH
24889: LD_VAR 0 7
24893: PUSH
24894: LD_VAR 0 9
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 2
24907: ST_TO_ADDR
// break ;
24908: GO 24912
// end ; end ;
24910: GO 24849
24912: POP
24913: POP
// end ; end ;
24914: GO 24713
24916: POP
24917: POP
// if result and not asc then
24918: LD_VAR 0 6
24922: PUSH
24923: LD_VAR 0 4
24927: NOT
24928: AND
24929: IFFALSE 25004
// begin tmp := result ;
24931: LD_ADDR_VAR 0 9
24935: PUSH
24936: LD_VAR 0 6
24940: ST_TO_ADDR
// for i = tmp downto 1 do
24941: LD_ADDR_VAR 0 7
24945: PUSH
24946: DOUBLE
24947: LD_VAR 0 9
24951: INC
24952: ST_TO_ADDR
24953: LD_INT 1
24955: PUSH
24956: FOR_DOWNTO
24957: IFFALSE 25002
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
24959: LD_ADDR_VAR 0 6
24963: PUSH
24964: LD_VAR 0 6
24968: PPUSH
24969: LD_VAR 0 9
24973: PUSH
24974: LD_VAR 0 7
24978: MINUS
24979: PUSH
24980: LD_INT 1
24982: PLUS
24983: PPUSH
24984: LD_VAR 0 9
24988: PUSH
24989: LD_VAR 0 7
24993: ARRAY
24994: PPUSH
24995: CALL_OW 1
24999: ST_TO_ADDR
25000: GO 24956
25002: POP
25003: POP
// end ; tmp := [ ] ;
25004: LD_ADDR_VAR 0 9
25008: PUSH
25009: EMPTY
25010: ST_TO_ADDR
// if mode then
25011: LD_VAR 0 5
25015: IFFALSE 25084
// begin for i = 1 to result do
25017: LD_ADDR_VAR 0 7
25021: PUSH
25022: DOUBLE
25023: LD_INT 1
25025: DEC
25026: ST_TO_ADDR
25027: LD_VAR 0 6
25031: PUSH
25032: FOR_TO
25033: IFFALSE 25072
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25035: LD_ADDR_VAR 0 9
25039: PUSH
25040: LD_VAR 0 9
25044: PPUSH
25045: LD_VAR 0 7
25049: PPUSH
25050: LD_VAR 0 6
25054: PUSH
25055: LD_VAR 0 7
25059: ARRAY
25060: PUSH
25061: LD_INT 1
25063: ARRAY
25064: PPUSH
25065: CALL_OW 1
25069: ST_TO_ADDR
25070: GO 25032
25072: POP
25073: POP
// result := tmp ;
25074: LD_ADDR_VAR 0 6
25078: PUSH
25079: LD_VAR 0 9
25083: ST_TO_ADDR
// end ; end ;
25084: LD_VAR 0 6
25088: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25097: LD_ADDR_VAR 0 5
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 0
25110: PUSH
25111: EMPTY
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: ST_TO_ADDR
// if not x or not y then
25119: LD_VAR 0 2
25123: NOT
25124: PUSH
25125: LD_VAR 0 3
25129: NOT
25130: OR
25131: IFFALSE 25135
// exit ;
25133: GO 26781
// if not range then
25135: LD_VAR 0 4
25139: NOT
25140: IFFALSE 25150
// range := 10 ;
25142: LD_ADDR_VAR 0 4
25146: PUSH
25147: LD_INT 10
25149: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25150: LD_ADDR_VAR 0 8
25154: PUSH
25155: LD_INT 81
25157: PUSH
25158: LD_VAR 0 1
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 92
25169: PUSH
25170: LD_VAR 0 2
25174: PUSH
25175: LD_VAR 0 3
25179: PUSH
25180: LD_VAR 0 4
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 3
25193: PUSH
25194: LD_INT 21
25196: PUSH
25197: LD_INT 3
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: PPUSH
25213: CALL_OW 69
25217: ST_TO_ADDR
// if not tmp then
25218: LD_VAR 0 8
25222: NOT
25223: IFFALSE 25227
// exit ;
25225: GO 26781
// for i in tmp do
25227: LD_ADDR_VAR 0 6
25231: PUSH
25232: LD_VAR 0 8
25236: PUSH
25237: FOR_IN
25238: IFFALSE 26756
// begin points := [ 0 , 0 , 0 ] ;
25240: LD_ADDR_VAR 0 9
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: ST_TO_ADDR
// bpoints := 1 ;
25259: LD_ADDR_VAR 0 10
25263: PUSH
25264: LD_INT 1
25266: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25267: LD_VAR 0 6
25271: PPUSH
25272: CALL_OW 247
25276: PUSH
25277: LD_INT 1
25279: DOUBLE
25280: EQUAL
25281: IFTRUE 25285
25283: GO 25863
25285: POP
// begin if GetClass ( i ) = 1 then
25286: LD_VAR 0 6
25290: PPUSH
25291: CALL_OW 257
25295: PUSH
25296: LD_INT 1
25298: EQUAL
25299: IFFALSE 25320
// points := [ 10 , 5 , 3 ] ;
25301: LD_ADDR_VAR 0 9
25305: PUSH
25306: LD_INT 10
25308: PUSH
25309: LD_INT 5
25311: PUSH
25312: LD_INT 3
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25320: LD_VAR 0 6
25324: PPUSH
25325: CALL_OW 257
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: LD_INT 3
25335: PUSH
25336: LD_INT 4
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: IN
25344: IFFALSE 25365
// points := [ 3 , 2 , 1 ] ;
25346: LD_ADDR_VAR 0 9
25350: PUSH
25351: LD_INT 3
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: LIST
25364: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25365: LD_VAR 0 6
25369: PPUSH
25370: CALL_OW 257
25374: PUSH
25375: LD_INT 5
25377: EQUAL
25378: IFFALSE 25399
// points := [ 130 , 5 , 2 ] ;
25380: LD_ADDR_VAR 0 9
25384: PUSH
25385: LD_INT 130
25387: PUSH
25388: LD_INT 5
25390: PUSH
25391: LD_INT 2
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25399: LD_VAR 0 6
25403: PPUSH
25404: CALL_OW 257
25408: PUSH
25409: LD_INT 8
25411: EQUAL
25412: IFFALSE 25433
// points := [ 35 , 35 , 30 ] ;
25414: LD_ADDR_VAR 0 9
25418: PUSH
25419: LD_INT 35
25421: PUSH
25422: LD_INT 35
25424: PUSH
25425: LD_INT 30
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: LIST
25432: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25433: LD_VAR 0 6
25437: PPUSH
25438: CALL_OW 257
25442: PUSH
25443: LD_INT 9
25445: EQUAL
25446: IFFALSE 25467
// points := [ 20 , 55 , 40 ] ;
25448: LD_ADDR_VAR 0 9
25452: PUSH
25453: LD_INT 20
25455: PUSH
25456: LD_INT 55
25458: PUSH
25459: LD_INT 40
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: LIST
25466: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25467: LD_VAR 0 6
25471: PPUSH
25472: CALL_OW 257
25476: PUSH
25477: LD_INT 12
25479: PUSH
25480: LD_INT 16
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: IN
25487: IFFALSE 25508
// points := [ 5 , 3 , 2 ] ;
25489: LD_ADDR_VAR 0 9
25493: PUSH
25494: LD_INT 5
25496: PUSH
25497: LD_INT 3
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25508: LD_VAR 0 6
25512: PPUSH
25513: CALL_OW 257
25517: PUSH
25518: LD_INT 17
25520: EQUAL
25521: IFFALSE 25542
// points := [ 100 , 50 , 75 ] ;
25523: LD_ADDR_VAR 0 9
25527: PUSH
25528: LD_INT 100
25530: PUSH
25531: LD_INT 50
25533: PUSH
25534: LD_INT 75
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25542: LD_VAR 0 6
25546: PPUSH
25547: CALL_OW 257
25551: PUSH
25552: LD_INT 15
25554: EQUAL
25555: IFFALSE 25576
// points := [ 10 , 5 , 3 ] ;
25557: LD_ADDR_VAR 0 9
25561: PUSH
25562: LD_INT 10
25564: PUSH
25565: LD_INT 5
25567: PUSH
25568: LD_INT 3
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: LIST
25575: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25576: LD_VAR 0 6
25580: PPUSH
25581: CALL_OW 257
25585: PUSH
25586: LD_INT 14
25588: EQUAL
25589: IFFALSE 25610
// points := [ 10 , 0 , 0 ] ;
25591: LD_ADDR_VAR 0 9
25595: PUSH
25596: LD_INT 10
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: LIST
25609: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25610: LD_VAR 0 6
25614: PPUSH
25615: CALL_OW 257
25619: PUSH
25620: LD_INT 11
25622: EQUAL
25623: IFFALSE 25644
// points := [ 30 , 10 , 5 ] ;
25625: LD_ADDR_VAR 0 9
25629: PUSH
25630: LD_INT 30
25632: PUSH
25633: LD_INT 10
25635: PUSH
25636: LD_INT 5
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25644: LD_VAR 0 1
25648: PPUSH
25649: LD_INT 5
25651: PPUSH
25652: CALL_OW 321
25656: PUSH
25657: LD_INT 2
25659: EQUAL
25660: IFFALSE 25677
// bpoints := bpoints * 1.8 ;
25662: LD_ADDR_VAR 0 10
25666: PUSH
25667: LD_VAR 0 10
25671: PUSH
25672: LD_REAL  1.80000000000000E+0000
25675: MUL
25676: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25677: LD_VAR 0 6
25681: PPUSH
25682: CALL_OW 257
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: LD_INT 2
25692: PUSH
25693: LD_INT 3
25695: PUSH
25696: LD_INT 4
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: IN
25705: PUSH
25706: LD_VAR 0 1
25710: PPUSH
25711: LD_INT 51
25713: PPUSH
25714: CALL_OW 321
25718: PUSH
25719: LD_INT 2
25721: EQUAL
25722: AND
25723: IFFALSE 25740
// bpoints := bpoints * 1.2 ;
25725: LD_ADDR_VAR 0 10
25729: PUSH
25730: LD_VAR 0 10
25734: PUSH
25735: LD_REAL  1.20000000000000E+0000
25738: MUL
25739: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25740: LD_VAR 0 6
25744: PPUSH
25745: CALL_OW 257
25749: PUSH
25750: LD_INT 5
25752: PUSH
25753: LD_INT 7
25755: PUSH
25756: LD_INT 9
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: LIST
25763: IN
25764: PUSH
25765: LD_VAR 0 1
25769: PPUSH
25770: LD_INT 52
25772: PPUSH
25773: CALL_OW 321
25777: PUSH
25778: LD_INT 2
25780: EQUAL
25781: AND
25782: IFFALSE 25799
// bpoints := bpoints * 1.5 ;
25784: LD_ADDR_VAR 0 10
25788: PUSH
25789: LD_VAR 0 10
25793: PUSH
25794: LD_REAL  1.50000000000000E+0000
25797: MUL
25798: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25799: LD_VAR 0 1
25803: PPUSH
25804: LD_INT 66
25806: PPUSH
25807: CALL_OW 321
25811: PUSH
25812: LD_INT 2
25814: EQUAL
25815: IFFALSE 25832
// bpoints := bpoints * 1.1 ;
25817: LD_ADDR_VAR 0 10
25821: PUSH
25822: LD_VAR 0 10
25826: PUSH
25827: LD_REAL  1.10000000000000E+0000
25830: MUL
25831: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25832: LD_ADDR_VAR 0 10
25836: PUSH
25837: LD_VAR 0 10
25841: PUSH
25842: LD_VAR 0 6
25846: PPUSH
25847: LD_INT 1
25849: PPUSH
25850: CALL_OW 259
25854: PUSH
25855: LD_REAL  1.15000000000000E+0000
25858: MUL
25859: MUL
25860: ST_TO_ADDR
// end ; unit_vehicle :
25861: GO 26685
25863: LD_INT 2
25865: DOUBLE
25866: EQUAL
25867: IFTRUE 25871
25869: GO 26673
25871: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25872: LD_VAR 0 6
25876: PPUSH
25877: CALL_OW 264
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 42
25887: PUSH
25888: LD_INT 24
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: IN
25896: IFFALSE 25917
// points := [ 25 , 5 , 3 ] ;
25898: LD_ADDR_VAR 0 9
25902: PUSH
25903: LD_INT 25
25905: PUSH
25906: LD_INT 5
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: LIST
25916: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25917: LD_VAR 0 6
25921: PPUSH
25922: CALL_OW 264
25926: PUSH
25927: LD_INT 4
25929: PUSH
25930: LD_INT 43
25932: PUSH
25933: LD_INT 25
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: IN
25941: IFFALSE 25962
// points := [ 40 , 15 , 5 ] ;
25943: LD_ADDR_VAR 0 9
25947: PUSH
25948: LD_INT 40
25950: PUSH
25951: LD_INT 15
25953: PUSH
25954: LD_INT 5
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: LIST
25961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
25962: LD_VAR 0 6
25966: PPUSH
25967: CALL_OW 264
25971: PUSH
25972: LD_INT 3
25974: PUSH
25975: LD_INT 23
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: IN
25982: IFFALSE 26003
// points := [ 7 , 25 , 8 ] ;
25984: LD_ADDR_VAR 0 9
25988: PUSH
25989: LD_INT 7
25991: PUSH
25992: LD_INT 25
25994: PUSH
25995: LD_INT 8
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26003: LD_VAR 0 6
26007: PPUSH
26008: CALL_OW 264
26012: PUSH
26013: LD_INT 5
26015: PUSH
26016: LD_INT 27
26018: PUSH
26019: LD_INT 44
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: LIST
26026: IN
26027: IFFALSE 26048
// points := [ 14 , 50 , 16 ] ;
26029: LD_ADDR_VAR 0 9
26033: PUSH
26034: LD_INT 14
26036: PUSH
26037: LD_INT 50
26039: PUSH
26040: LD_INT 16
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26048: LD_VAR 0 6
26052: PPUSH
26053: CALL_OW 264
26057: PUSH
26058: LD_INT 6
26060: PUSH
26061: LD_INT 46
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: IN
26068: IFFALSE 26089
// points := [ 32 , 120 , 70 ] ;
26070: LD_ADDR_VAR 0 9
26074: PUSH
26075: LD_INT 32
26077: PUSH
26078: LD_INT 120
26080: PUSH
26081: LD_INT 70
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: LIST
26088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26089: LD_VAR 0 6
26093: PPUSH
26094: CALL_OW 264
26098: PUSH
26099: LD_INT 7
26101: PUSH
26102: LD_INT 28
26104: PUSH
26105: LD_INT 45
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: LIST
26112: IN
26113: IFFALSE 26134
// points := [ 35 , 20 , 45 ] ;
26115: LD_ADDR_VAR 0 9
26119: PUSH
26120: LD_INT 35
26122: PUSH
26123: LD_INT 20
26125: PUSH
26126: LD_INT 45
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26134: LD_VAR 0 6
26138: PPUSH
26139: CALL_OW 264
26143: PUSH
26144: LD_INT 47
26146: PUSH
26147: EMPTY
26148: LIST
26149: IN
26150: IFFALSE 26171
// points := [ 67 , 45 , 75 ] ;
26152: LD_ADDR_VAR 0 9
26156: PUSH
26157: LD_INT 67
26159: PUSH
26160: LD_INT 45
26162: PUSH
26163: LD_INT 75
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: LIST
26170: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26171: LD_VAR 0 6
26175: PPUSH
26176: CALL_OW 264
26180: PUSH
26181: LD_INT 26
26183: PUSH
26184: EMPTY
26185: LIST
26186: IN
26187: IFFALSE 26208
// points := [ 120 , 30 , 80 ] ;
26189: LD_ADDR_VAR 0 9
26193: PUSH
26194: LD_INT 120
26196: PUSH
26197: LD_INT 30
26199: PUSH
26200: LD_INT 80
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26208: LD_VAR 0 6
26212: PPUSH
26213: CALL_OW 264
26217: PUSH
26218: LD_INT 22
26220: PUSH
26221: EMPTY
26222: LIST
26223: IN
26224: IFFALSE 26245
// points := [ 40 , 1 , 1 ] ;
26226: LD_ADDR_VAR 0 9
26230: PUSH
26231: LD_INT 40
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: LD_INT 1
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: LIST
26244: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26245: LD_VAR 0 6
26249: PPUSH
26250: CALL_OW 264
26254: PUSH
26255: LD_INT 29
26257: PUSH
26258: EMPTY
26259: LIST
26260: IN
26261: IFFALSE 26282
// points := [ 70 , 200 , 400 ] ;
26263: LD_ADDR_VAR 0 9
26267: PUSH
26268: LD_INT 70
26270: PUSH
26271: LD_INT 200
26273: PUSH
26274: LD_INT 400
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26282: LD_VAR 0 6
26286: PPUSH
26287: CALL_OW 264
26291: PUSH
26292: LD_INT 14
26294: PUSH
26295: LD_INT 53
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: IN
26302: IFFALSE 26323
// points := [ 40 , 10 , 20 ] ;
26304: LD_ADDR_VAR 0 9
26308: PUSH
26309: LD_INT 40
26311: PUSH
26312: LD_INT 10
26314: PUSH
26315: LD_INT 20
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: LIST
26322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26323: LD_VAR 0 6
26327: PPUSH
26328: CALL_OW 264
26332: PUSH
26333: LD_INT 9
26335: PUSH
26336: EMPTY
26337: LIST
26338: IN
26339: IFFALSE 26360
// points := [ 5 , 70 , 20 ] ;
26341: LD_ADDR_VAR 0 9
26345: PUSH
26346: LD_INT 5
26348: PUSH
26349: LD_INT 70
26351: PUSH
26352: LD_INT 20
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: LIST
26359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26360: LD_VAR 0 6
26364: PPUSH
26365: CALL_OW 264
26369: PUSH
26370: LD_INT 10
26372: PUSH
26373: EMPTY
26374: LIST
26375: IN
26376: IFFALSE 26397
// points := [ 35 , 110 , 70 ] ;
26378: LD_ADDR_VAR 0 9
26382: PUSH
26383: LD_INT 35
26385: PUSH
26386: LD_INT 110
26388: PUSH
26389: LD_INT 70
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26397: LD_VAR 0 6
26401: PPUSH
26402: CALL_OW 265
26406: PUSH
26407: LD_INT 25
26409: EQUAL
26410: IFFALSE 26431
// points := [ 80 , 65 , 100 ] ;
26412: LD_ADDR_VAR 0 9
26416: PUSH
26417: LD_INT 80
26419: PUSH
26420: LD_INT 65
26422: PUSH
26423: LD_INT 100
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26431: LD_VAR 0 6
26435: PPUSH
26436: CALL_OW 263
26440: PUSH
26441: LD_INT 1
26443: EQUAL
26444: IFFALSE 26479
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26446: LD_ADDR_VAR 0 10
26450: PUSH
26451: LD_VAR 0 10
26455: PUSH
26456: LD_VAR 0 6
26460: PPUSH
26461: CALL_OW 311
26465: PPUSH
26466: LD_INT 3
26468: PPUSH
26469: CALL_OW 259
26473: PUSH
26474: LD_INT 4
26476: MUL
26477: MUL
26478: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26479: LD_VAR 0 6
26483: PPUSH
26484: CALL_OW 263
26488: PUSH
26489: LD_INT 2
26491: EQUAL
26492: IFFALSE 26543
// begin j := IsControledBy ( i ) ;
26494: LD_ADDR_VAR 0 7
26498: PUSH
26499: LD_VAR 0 6
26503: PPUSH
26504: CALL_OW 312
26508: ST_TO_ADDR
// if j then
26509: LD_VAR 0 7
26513: IFFALSE 26543
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26515: LD_ADDR_VAR 0 10
26519: PUSH
26520: LD_VAR 0 10
26524: PUSH
26525: LD_VAR 0 7
26529: PPUSH
26530: LD_INT 3
26532: PPUSH
26533: CALL_OW 259
26537: PUSH
26538: LD_INT 3
26540: MUL
26541: MUL
26542: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26543: LD_VAR 0 6
26547: PPUSH
26548: CALL_OW 264
26552: PUSH
26553: LD_INT 5
26555: PUSH
26556: LD_INT 6
26558: PUSH
26559: LD_INT 46
26561: PUSH
26562: LD_INT 44
26564: PUSH
26565: LD_INT 47
26567: PUSH
26568: LD_INT 45
26570: PUSH
26571: LD_INT 28
26573: PUSH
26574: LD_INT 7
26576: PUSH
26577: LD_INT 27
26579: PUSH
26580: LD_INT 29
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: IN
26595: PUSH
26596: LD_VAR 0 1
26600: PPUSH
26601: LD_INT 52
26603: PPUSH
26604: CALL_OW 321
26608: PUSH
26609: LD_INT 2
26611: EQUAL
26612: AND
26613: IFFALSE 26630
// bpoints := bpoints * 1.2 ;
26615: LD_ADDR_VAR 0 10
26619: PUSH
26620: LD_VAR 0 10
26624: PUSH
26625: LD_REAL  1.20000000000000E+0000
26628: MUL
26629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26630: LD_VAR 0 6
26634: PPUSH
26635: CALL_OW 264
26639: PUSH
26640: LD_INT 6
26642: PUSH
26643: LD_INT 46
26645: PUSH
26646: LD_INT 47
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: LIST
26653: IN
26654: IFFALSE 26671
// bpoints := bpoints * 1.2 ;
26656: LD_ADDR_VAR 0 10
26660: PUSH
26661: LD_VAR 0 10
26665: PUSH
26666: LD_REAL  1.20000000000000E+0000
26669: MUL
26670: ST_TO_ADDR
// end ; unit_building :
26671: GO 26685
26673: LD_INT 3
26675: DOUBLE
26676: EQUAL
26677: IFTRUE 26681
26679: GO 26684
26681: POP
// ; end ;
26682: GO 26685
26684: POP
// for j = 1 to 3 do
26685: LD_ADDR_VAR 0 7
26689: PUSH
26690: DOUBLE
26691: LD_INT 1
26693: DEC
26694: ST_TO_ADDR
26695: LD_INT 3
26697: PUSH
26698: FOR_TO
26699: IFFALSE 26752
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26701: LD_ADDR_VAR 0 5
26705: PUSH
26706: LD_VAR 0 5
26710: PPUSH
26711: LD_VAR 0 7
26715: PPUSH
26716: LD_VAR 0 5
26720: PUSH
26721: LD_VAR 0 7
26725: ARRAY
26726: PUSH
26727: LD_VAR 0 9
26731: PUSH
26732: LD_VAR 0 7
26736: ARRAY
26737: PUSH
26738: LD_VAR 0 10
26742: MUL
26743: PLUS
26744: PPUSH
26745: CALL_OW 1
26749: ST_TO_ADDR
26750: GO 26698
26752: POP
26753: POP
// end ;
26754: GO 25237
26756: POP
26757: POP
// result := Replace ( result , 4 , tmp ) ;
26758: LD_ADDR_VAR 0 5
26762: PUSH
26763: LD_VAR 0 5
26767: PPUSH
26768: LD_INT 4
26770: PPUSH
26771: LD_VAR 0 8
26775: PPUSH
26776: CALL_OW 1
26780: ST_TO_ADDR
// end ;
26781: LD_VAR 0 5
26785: RET
// export function DangerAtRange ( unit , range ) ; begin
26786: LD_INT 0
26788: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26789: LD_ADDR_VAR 0 3
26793: PUSH
26794: LD_VAR 0 1
26798: PPUSH
26799: CALL_OW 255
26803: PPUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 250
26813: PPUSH
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL_OW 251
26823: PPUSH
26824: LD_VAR 0 2
26828: PPUSH
26829: CALL 25089 0 4
26833: ST_TO_ADDR
// end ;
26834: LD_VAR 0 3
26838: RET
// export function DangerInArea ( side , area ) ; begin
26839: LD_INT 0
26841: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26842: LD_ADDR_VAR 0 3
26846: PUSH
26847: LD_VAR 0 2
26851: PPUSH
26852: LD_INT 81
26854: PUSH
26855: LD_VAR 0 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PPUSH
26864: CALL_OW 70
26868: ST_TO_ADDR
// end ;
26869: LD_VAR 0 3
26873: RET
// export function IsExtension ( b ) ; begin
26874: LD_INT 0
26876: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26877: LD_ADDR_VAR 0 2
26881: PUSH
26882: LD_VAR 0 1
26886: PUSH
26887: LD_INT 23
26889: PUSH
26890: LD_INT 20
26892: PUSH
26893: LD_INT 22
26895: PUSH
26896: LD_INT 17
26898: PUSH
26899: LD_INT 24
26901: PUSH
26902: LD_INT 21
26904: PUSH
26905: LD_INT 19
26907: PUSH
26908: LD_INT 16
26910: PUSH
26911: LD_INT 25
26913: PUSH
26914: LD_INT 18
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: IN
26929: ST_TO_ADDR
// end ;
26930: LD_VAR 0 2
26934: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
26935: LD_INT 0
26937: PPUSH
26938: PPUSH
26939: PPUSH
// result := [ ] ;
26940: LD_ADDR_VAR 0 3
26944: PUSH
26945: EMPTY
26946: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
26947: LD_ADDR_VAR 0 4
26951: PUSH
26952: LD_VAR 0 2
26956: PPUSH
26957: LD_INT 21
26959: PUSH
26960: LD_INT 3
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PPUSH
26967: CALL_OW 70
26971: ST_TO_ADDR
// if not tmp then
26972: LD_VAR 0 4
26976: NOT
26977: IFFALSE 26981
// exit ;
26979: GO 27039
// for i in tmp do
26981: LD_ADDR_VAR 0 5
26985: PUSH
26986: LD_VAR 0 4
26990: PUSH
26991: FOR_IN
26992: IFFALSE 27027
// if GetBase ( i ) <> base then
26994: LD_VAR 0 5
26998: PPUSH
26999: CALL_OW 274
27003: PUSH
27004: LD_VAR 0 1
27008: NONEQUAL
27009: IFFALSE 27025
// ComLinkToBase ( base , i ) ;
27011: LD_VAR 0 1
27015: PPUSH
27016: LD_VAR 0 5
27020: PPUSH
27021: CALL_OW 169
27025: GO 26991
27027: POP
27028: POP
// result := tmp ;
27029: LD_ADDR_VAR 0 3
27033: PUSH
27034: LD_VAR 0 4
27038: ST_TO_ADDR
// end ;
27039: LD_VAR 0 3
27043: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27044: LD_INT 0
27046: PPUSH
27047: PPUSH
// if BuildingStatus ( b ) = bs_build then
27048: LD_VAR 0 2
27052: PPUSH
27053: CALL_OW 461
27057: PUSH
27058: LD_INT 1
27060: EQUAL
27061: IFFALSE 27121
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27063: LD_VAR 0 1
27067: PPUSH
27068: LD_STRING h
27070: PUSH
27071: LD_VAR 0 2
27075: PPUSH
27076: CALL_OW 250
27080: PUSH
27081: LD_VAR 0 2
27085: PPUSH
27086: CALL_OW 251
27090: PUSH
27091: LD_VAR 0 2
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: PUSH
27114: EMPTY
27115: LIST
27116: PPUSH
27117: CALL_OW 446
// end ;
27121: LD_VAR 0 3
27125: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27126: LD_INT 0
27128: PPUSH
27129: PPUSH
27130: PPUSH
27131: PPUSH
27132: PPUSH
27133: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27134: LD_VAR 0 1
27138: NOT
27139: PUSH
27140: LD_VAR 0 1
27144: PPUSH
27145: CALL_OW 263
27149: PUSH
27150: LD_INT 2
27152: EQUAL
27153: NOT
27154: OR
27155: IFFALSE 27159
// exit ;
27157: GO 27475
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27159: LD_ADDR_VAR 0 6
27163: PUSH
27164: LD_INT 22
27166: PUSH
27167: LD_VAR 0 1
27171: PPUSH
27172: CALL_OW 255
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: LD_INT 30
27186: PUSH
27187: LD_INT 36
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 34
27196: PUSH
27197: LD_INT 31
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PPUSH
27213: CALL_OW 69
27217: ST_TO_ADDR
// if not tmp then
27218: LD_VAR 0 6
27222: NOT
27223: IFFALSE 27227
// exit ;
27225: GO 27475
// result := [ ] ;
27227: LD_ADDR_VAR 0 2
27231: PUSH
27232: EMPTY
27233: ST_TO_ADDR
// for i in tmp do
27234: LD_ADDR_VAR 0 3
27238: PUSH
27239: LD_VAR 0 6
27243: PUSH
27244: FOR_IN
27245: IFFALSE 27316
// begin t := UnitsInside ( i ) ;
27247: LD_ADDR_VAR 0 4
27251: PUSH
27252: LD_VAR 0 3
27256: PPUSH
27257: CALL_OW 313
27261: ST_TO_ADDR
// if t then
27262: LD_VAR 0 4
27266: IFFALSE 27314
// for j in t do
27268: LD_ADDR_VAR 0 7
27272: PUSH
27273: LD_VAR 0 4
27277: PUSH
27278: FOR_IN
27279: IFFALSE 27312
// result := Insert ( result , result + 1 , j ) ;
27281: LD_ADDR_VAR 0 2
27285: PUSH
27286: LD_VAR 0 2
27290: PPUSH
27291: LD_VAR 0 2
27295: PUSH
27296: LD_INT 1
27298: PLUS
27299: PPUSH
27300: LD_VAR 0 7
27304: PPUSH
27305: CALL_OW 2
27309: ST_TO_ADDR
27310: GO 27278
27312: POP
27313: POP
// end ;
27314: GO 27244
27316: POP
27317: POP
// if not result then
27318: LD_VAR 0 2
27322: NOT
27323: IFFALSE 27327
// exit ;
27325: GO 27475
// mech := result [ 1 ] ;
27327: LD_ADDR_VAR 0 5
27331: PUSH
27332: LD_VAR 0 2
27336: PUSH
27337: LD_INT 1
27339: ARRAY
27340: ST_TO_ADDR
// if result > 1 then
27341: LD_VAR 0 2
27345: PUSH
27346: LD_INT 1
27348: GREATER
27349: IFFALSE 27461
// for i = 2 to result do
27351: LD_ADDR_VAR 0 3
27355: PUSH
27356: DOUBLE
27357: LD_INT 2
27359: DEC
27360: ST_TO_ADDR
27361: LD_VAR 0 2
27365: PUSH
27366: FOR_TO
27367: IFFALSE 27459
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27369: LD_ADDR_VAR 0 4
27373: PUSH
27374: LD_VAR 0 2
27378: PUSH
27379: LD_VAR 0 3
27383: ARRAY
27384: PPUSH
27385: LD_INT 3
27387: PPUSH
27388: CALL_OW 259
27392: PUSH
27393: LD_VAR 0 2
27397: PUSH
27398: LD_VAR 0 3
27402: ARRAY
27403: PPUSH
27404: CALL_OW 432
27408: MINUS
27409: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27410: LD_VAR 0 4
27414: PUSH
27415: LD_VAR 0 5
27419: PPUSH
27420: LD_INT 3
27422: PPUSH
27423: CALL_OW 259
27427: PUSH
27428: LD_VAR 0 5
27432: PPUSH
27433: CALL_OW 432
27437: MINUS
27438: GREATEREQUAL
27439: IFFALSE 27457
// mech := result [ i ] ;
27441: LD_ADDR_VAR 0 5
27445: PUSH
27446: LD_VAR 0 2
27450: PUSH
27451: LD_VAR 0 3
27455: ARRAY
27456: ST_TO_ADDR
// end ;
27457: GO 27366
27459: POP
27460: POP
// ComLinkTo ( vehicle , mech ) ;
27461: LD_VAR 0 1
27465: PPUSH
27466: LD_VAR 0 5
27470: PPUSH
27471: CALL_OW 135
// end ;
27475: LD_VAR 0 2
27479: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27480: LD_INT 0
27482: PPUSH
27483: PPUSH
27484: PPUSH
27485: PPUSH
27486: PPUSH
27487: PPUSH
27488: PPUSH
27489: PPUSH
27490: PPUSH
27491: PPUSH
27492: PPUSH
27493: PPUSH
27494: PPUSH
// result := [ ] ;
27495: LD_ADDR_VAR 0 7
27499: PUSH
27500: EMPTY
27501: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27502: LD_VAR 0 1
27506: PPUSH
27507: CALL_OW 266
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: IN
27522: NOT
27523: IFFALSE 27527
// exit ;
27525: GO 29158
// if name then
27527: LD_VAR 0 3
27531: IFFALSE 27547
// SetBName ( base_dep , name ) ;
27533: LD_VAR 0 1
27537: PPUSH
27538: LD_VAR 0 3
27542: PPUSH
27543: CALL_OW 500
// base := GetBase ( base_dep ) ;
27547: LD_ADDR_VAR 0 15
27551: PUSH
27552: LD_VAR 0 1
27556: PPUSH
27557: CALL_OW 274
27561: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27562: LD_ADDR_VAR 0 16
27566: PUSH
27567: LD_VAR 0 1
27571: PPUSH
27572: CALL_OW 255
27576: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27577: LD_ADDR_VAR 0 17
27581: PUSH
27582: LD_VAR 0 1
27586: PPUSH
27587: CALL_OW 248
27591: ST_TO_ADDR
// if sources then
27592: LD_VAR 0 5
27596: IFFALSE 27643
// for i = 1 to 3 do
27598: LD_ADDR_VAR 0 8
27602: PUSH
27603: DOUBLE
27604: LD_INT 1
27606: DEC
27607: ST_TO_ADDR
27608: LD_INT 3
27610: PUSH
27611: FOR_TO
27612: IFFALSE 27641
// AddResourceType ( base , i , sources [ i ] ) ;
27614: LD_VAR 0 15
27618: PPUSH
27619: LD_VAR 0 8
27623: PPUSH
27624: LD_VAR 0 5
27628: PUSH
27629: LD_VAR 0 8
27633: ARRAY
27634: PPUSH
27635: CALL_OW 276
27639: GO 27611
27641: POP
27642: POP
// buildings := GetBaseBuildings ( base , area ) ;
27643: LD_ADDR_VAR 0 18
27647: PUSH
27648: LD_VAR 0 15
27652: PPUSH
27653: LD_VAR 0 2
27657: PPUSH
27658: CALL 26935 0 2
27662: ST_TO_ADDR
// InitHc ;
27663: CALL_OW 19
// InitUc ;
27667: CALL_OW 18
// uc_side := side ;
27671: LD_ADDR_OWVAR 20
27675: PUSH
27676: LD_VAR 0 16
27680: ST_TO_ADDR
// uc_nation := nation ;
27681: LD_ADDR_OWVAR 21
27685: PUSH
27686: LD_VAR 0 17
27690: ST_TO_ADDR
// if buildings then
27691: LD_VAR 0 18
27695: IFFALSE 29017
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27697: LD_ADDR_VAR 0 19
27701: PUSH
27702: LD_VAR 0 18
27706: PPUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 30
27712: PUSH
27713: LD_INT 29
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 30
27722: PUSH
27723: LD_INT 30
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: PPUSH
27735: CALL_OW 72
27739: ST_TO_ADDR
// if tmp then
27740: LD_VAR 0 19
27744: IFFALSE 27792
// for i in tmp do
27746: LD_ADDR_VAR 0 8
27750: PUSH
27751: LD_VAR 0 19
27755: PUSH
27756: FOR_IN
27757: IFFALSE 27790
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27759: LD_VAR 0 8
27763: PPUSH
27764: CALL_OW 250
27768: PPUSH
27769: LD_VAR 0 8
27773: PPUSH
27774: CALL_OW 251
27778: PPUSH
27779: LD_VAR 0 16
27783: PPUSH
27784: CALL_OW 441
27788: GO 27756
27790: POP
27791: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27792: LD_VAR 0 18
27796: PPUSH
27797: LD_INT 2
27799: PUSH
27800: LD_INT 30
27802: PUSH
27803: LD_INT 32
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 30
27812: PUSH
27813: LD_INT 33
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: LIST
27824: PPUSH
27825: CALL_OW 72
27829: IFFALSE 27917
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27831: LD_ADDR_VAR 0 8
27835: PUSH
27836: LD_VAR 0 18
27840: PPUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 30
27846: PUSH
27847: LD_INT 32
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 30
27856: PUSH
27857: LD_INT 33
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: PPUSH
27869: CALL_OW 72
27873: PUSH
27874: FOR_IN
27875: IFFALSE 27915
// begin if not GetBWeapon ( i ) then
27877: LD_VAR 0 8
27881: PPUSH
27882: CALL_OW 269
27886: NOT
27887: IFFALSE 27913
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27889: LD_VAR 0 8
27893: PPUSH
27894: LD_VAR 0 8
27898: PPUSH
27899: LD_VAR 0 2
27903: PPUSH
27904: CALL 29163 0 2
27908: PPUSH
27909: CALL_OW 431
// end ;
27913: GO 27874
27915: POP
27916: POP
// end ; for i = 1 to personel do
27917: LD_ADDR_VAR 0 8
27921: PUSH
27922: DOUBLE
27923: LD_INT 1
27925: DEC
27926: ST_TO_ADDR
27927: LD_VAR 0 6
27931: PUSH
27932: FOR_TO
27933: IFFALSE 28997
// begin if i > 4 then
27935: LD_VAR 0 8
27939: PUSH
27940: LD_INT 4
27942: GREATER
27943: IFFALSE 27947
// break ;
27945: GO 28997
// case i of 1 :
27947: LD_VAR 0 8
27951: PUSH
27952: LD_INT 1
27954: DOUBLE
27955: EQUAL
27956: IFTRUE 27960
27958: GO 28040
27960: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
27961: LD_ADDR_VAR 0 12
27965: PUSH
27966: LD_VAR 0 18
27970: PPUSH
27971: LD_INT 22
27973: PUSH
27974: LD_VAR 0 16
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 58
27985: PUSH
27986: EMPTY
27987: LIST
27988: PUSH
27989: LD_INT 2
27991: PUSH
27992: LD_INT 30
27994: PUSH
27995: LD_INT 32
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 30
28004: PUSH
28005: LD_INT 4
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 30
28014: PUSH
28015: LD_INT 5
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: LIST
28032: PPUSH
28033: CALL_OW 72
28037: ST_TO_ADDR
28038: GO 28262
28040: LD_INT 2
28042: DOUBLE
28043: EQUAL
28044: IFTRUE 28048
28046: GO 28110
28048: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28049: LD_ADDR_VAR 0 12
28053: PUSH
28054: LD_VAR 0 18
28058: PPUSH
28059: LD_INT 22
28061: PUSH
28062: LD_VAR 0 16
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: LD_INT 30
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 30
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PPUSH
28103: CALL_OW 72
28107: ST_TO_ADDR
28108: GO 28262
28110: LD_INT 3
28112: DOUBLE
28113: EQUAL
28114: IFTRUE 28118
28116: GO 28180
28118: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28119: LD_ADDR_VAR 0 12
28123: PUSH
28124: LD_VAR 0 18
28128: PPUSH
28129: LD_INT 22
28131: PUSH
28132: LD_VAR 0 16
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 2
28143: PUSH
28144: LD_INT 30
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 30
28156: PUSH
28157: LD_INT 3
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: LIST
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PPUSH
28173: CALL_OW 72
28177: ST_TO_ADDR
28178: GO 28262
28180: LD_INT 4
28182: DOUBLE
28183: EQUAL
28184: IFTRUE 28188
28186: GO 28261
28188: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28189: LD_ADDR_VAR 0 12
28193: PUSH
28194: LD_VAR 0 18
28198: PPUSH
28199: LD_INT 22
28201: PUSH
28202: LD_VAR 0 16
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: LD_INT 30
28216: PUSH
28217: LD_INT 6
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 30
28226: PUSH
28227: LD_INT 7
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 30
28236: PUSH
28237: LD_INT 8
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PPUSH
28254: CALL_OW 72
28258: ST_TO_ADDR
28259: GO 28262
28261: POP
// if i = 1 then
28262: LD_VAR 0 8
28266: PUSH
28267: LD_INT 1
28269: EQUAL
28270: IFFALSE 28381
// begin tmp := [ ] ;
28272: LD_ADDR_VAR 0 19
28276: PUSH
28277: EMPTY
28278: ST_TO_ADDR
// for j in f do
28279: LD_ADDR_VAR 0 9
28283: PUSH
28284: LD_VAR 0 12
28288: PUSH
28289: FOR_IN
28290: IFFALSE 28363
// if GetBType ( j ) = b_bunker then
28292: LD_VAR 0 9
28296: PPUSH
28297: CALL_OW 266
28301: PUSH
28302: LD_INT 32
28304: EQUAL
28305: IFFALSE 28332
// tmp := Insert ( tmp , 1 , j ) else
28307: LD_ADDR_VAR 0 19
28311: PUSH
28312: LD_VAR 0 19
28316: PPUSH
28317: LD_INT 1
28319: PPUSH
28320: LD_VAR 0 9
28324: PPUSH
28325: CALL_OW 2
28329: ST_TO_ADDR
28330: GO 28361
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28332: LD_ADDR_VAR 0 19
28336: PUSH
28337: LD_VAR 0 19
28341: PPUSH
28342: LD_VAR 0 19
28346: PUSH
28347: LD_INT 1
28349: PLUS
28350: PPUSH
28351: LD_VAR 0 9
28355: PPUSH
28356: CALL_OW 2
28360: ST_TO_ADDR
28361: GO 28289
28363: POP
28364: POP
// if tmp then
28365: LD_VAR 0 19
28369: IFFALSE 28381
// f := tmp ;
28371: LD_ADDR_VAR 0 12
28375: PUSH
28376: LD_VAR 0 19
28380: ST_TO_ADDR
// end ; x := personel [ i ] ;
28381: LD_ADDR_VAR 0 13
28385: PUSH
28386: LD_VAR 0 6
28390: PUSH
28391: LD_VAR 0 8
28395: ARRAY
28396: ST_TO_ADDR
// if x = - 1 then
28397: LD_VAR 0 13
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: EQUAL
28406: IFFALSE 28615
// begin for j in f do
28408: LD_ADDR_VAR 0 9
28412: PUSH
28413: LD_VAR 0 12
28417: PUSH
28418: FOR_IN
28419: IFFALSE 28611
// repeat InitHc ;
28421: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28425: LD_VAR 0 9
28429: PPUSH
28430: CALL_OW 266
28434: PUSH
28435: LD_INT 5
28437: EQUAL
28438: IFFALSE 28508
// begin if UnitsInside ( j ) < 3 then
28440: LD_VAR 0 9
28444: PPUSH
28445: CALL_OW 313
28449: PUSH
28450: LD_INT 3
28452: LESS
28453: IFFALSE 28489
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28455: LD_INT 0
28457: PPUSH
28458: LD_INT 5
28460: PUSH
28461: LD_INT 8
28463: PUSH
28464: LD_INT 9
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: LIST
28471: PUSH
28472: LD_VAR 0 17
28476: ARRAY
28477: PPUSH
28478: LD_VAR 0 4
28482: PPUSH
28483: CALL_OW 380
28487: GO 28506
// PrepareHuman ( false , i , skill ) ;
28489: LD_INT 0
28491: PPUSH
28492: LD_VAR 0 8
28496: PPUSH
28497: LD_VAR 0 4
28501: PPUSH
28502: CALL_OW 380
// end else
28506: GO 28525
// PrepareHuman ( false , i , skill ) ;
28508: LD_INT 0
28510: PPUSH
28511: LD_VAR 0 8
28515: PPUSH
28516: LD_VAR 0 4
28520: PPUSH
28521: CALL_OW 380
// un := CreateHuman ;
28525: LD_ADDR_VAR 0 14
28529: PUSH
28530: CALL_OW 44
28534: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28535: LD_ADDR_VAR 0 7
28539: PUSH
28540: LD_VAR 0 7
28544: PPUSH
28545: LD_INT 1
28547: PPUSH
28548: LD_VAR 0 14
28552: PPUSH
28553: CALL_OW 2
28557: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28558: LD_VAR 0 14
28562: PPUSH
28563: LD_VAR 0 9
28567: PPUSH
28568: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28572: LD_VAR 0 9
28576: PPUSH
28577: CALL_OW 313
28581: PUSH
28582: LD_INT 6
28584: EQUAL
28585: PUSH
28586: LD_VAR 0 9
28590: PPUSH
28591: CALL_OW 266
28595: PUSH
28596: LD_INT 32
28598: PUSH
28599: LD_INT 31
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: IN
28606: OR
28607: IFFALSE 28421
28609: GO 28418
28611: POP
28612: POP
// end else
28613: GO 28995
// for j = 1 to x do
28615: LD_ADDR_VAR 0 9
28619: PUSH
28620: DOUBLE
28621: LD_INT 1
28623: DEC
28624: ST_TO_ADDR
28625: LD_VAR 0 13
28629: PUSH
28630: FOR_TO
28631: IFFALSE 28993
// begin InitHc ;
28633: CALL_OW 19
// if not f then
28637: LD_VAR 0 12
28641: NOT
28642: IFFALSE 28731
// begin PrepareHuman ( false , i , skill ) ;
28644: LD_INT 0
28646: PPUSH
28647: LD_VAR 0 8
28651: PPUSH
28652: LD_VAR 0 4
28656: PPUSH
28657: CALL_OW 380
// un := CreateHuman ;
28661: LD_ADDR_VAR 0 14
28665: PUSH
28666: CALL_OW 44
28670: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28671: LD_ADDR_VAR 0 7
28675: PUSH
28676: LD_VAR 0 7
28680: PPUSH
28681: LD_INT 1
28683: PPUSH
28684: LD_VAR 0 14
28688: PPUSH
28689: CALL_OW 2
28693: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28694: LD_VAR 0 14
28698: PPUSH
28699: LD_VAR 0 1
28703: PPUSH
28704: CALL_OW 250
28708: PPUSH
28709: LD_VAR 0 1
28713: PPUSH
28714: CALL_OW 251
28718: PPUSH
28719: LD_INT 10
28721: PPUSH
28722: LD_INT 0
28724: PPUSH
28725: CALL_OW 50
// continue ;
28729: GO 28630
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28731: LD_VAR 0 12
28735: PUSH
28736: LD_INT 1
28738: ARRAY
28739: PPUSH
28740: CALL_OW 313
28744: PUSH
28745: LD_VAR 0 12
28749: PUSH
28750: LD_INT 1
28752: ARRAY
28753: PPUSH
28754: CALL_OW 266
28758: PUSH
28759: LD_INT 32
28761: PUSH
28762: LD_INT 31
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: IN
28769: AND
28770: PUSH
28771: LD_VAR 0 12
28775: PUSH
28776: LD_INT 1
28778: ARRAY
28779: PPUSH
28780: CALL_OW 313
28784: PUSH
28785: LD_INT 6
28787: EQUAL
28788: OR
28789: IFFALSE 28809
// f := Delete ( f , 1 ) ;
28791: LD_ADDR_VAR 0 12
28795: PUSH
28796: LD_VAR 0 12
28800: PPUSH
28801: LD_INT 1
28803: PPUSH
28804: CALL_OW 3
28808: ST_TO_ADDR
// if not f then
28809: LD_VAR 0 12
28813: NOT
28814: IFFALSE 28832
// begin x := x + 2 ;
28816: LD_ADDR_VAR 0 13
28820: PUSH
28821: LD_VAR 0 13
28825: PUSH
28826: LD_INT 2
28828: PLUS
28829: ST_TO_ADDR
// continue ;
28830: GO 28630
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28832: LD_VAR 0 12
28836: PUSH
28837: LD_INT 1
28839: ARRAY
28840: PPUSH
28841: CALL_OW 266
28845: PUSH
28846: LD_INT 5
28848: EQUAL
28849: IFFALSE 28923
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28851: LD_VAR 0 12
28855: PUSH
28856: LD_INT 1
28858: ARRAY
28859: PPUSH
28860: CALL_OW 313
28864: PUSH
28865: LD_INT 3
28867: LESS
28868: IFFALSE 28904
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28870: LD_INT 0
28872: PPUSH
28873: LD_INT 5
28875: PUSH
28876: LD_INT 8
28878: PUSH
28879: LD_INT 9
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: PUSH
28887: LD_VAR 0 17
28891: ARRAY
28892: PPUSH
28893: LD_VAR 0 4
28897: PPUSH
28898: CALL_OW 380
28902: GO 28921
// PrepareHuman ( false , i , skill ) ;
28904: LD_INT 0
28906: PPUSH
28907: LD_VAR 0 8
28911: PPUSH
28912: LD_VAR 0 4
28916: PPUSH
28917: CALL_OW 380
// end else
28921: GO 28940
// PrepareHuman ( false , i , skill ) ;
28923: LD_INT 0
28925: PPUSH
28926: LD_VAR 0 8
28930: PPUSH
28931: LD_VAR 0 4
28935: PPUSH
28936: CALL_OW 380
// un := CreateHuman ;
28940: LD_ADDR_VAR 0 14
28944: PUSH
28945: CALL_OW 44
28949: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28950: LD_ADDR_VAR 0 7
28954: PUSH
28955: LD_VAR 0 7
28959: PPUSH
28960: LD_INT 1
28962: PPUSH
28963: LD_VAR 0 14
28967: PPUSH
28968: CALL_OW 2
28972: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28973: LD_VAR 0 14
28977: PPUSH
28978: LD_VAR 0 12
28982: PUSH
28983: LD_INT 1
28985: ARRAY
28986: PPUSH
28987: CALL_OW 52
// end ;
28991: GO 28630
28993: POP
28994: POP
// end ;
28995: GO 27932
28997: POP
28998: POP
// result := result ^ buildings ;
28999: LD_ADDR_VAR 0 7
29003: PUSH
29004: LD_VAR 0 7
29008: PUSH
29009: LD_VAR 0 18
29013: ADD
29014: ST_TO_ADDR
// end else
29015: GO 29158
// begin for i = 1 to personel do
29017: LD_ADDR_VAR 0 8
29021: PUSH
29022: DOUBLE
29023: LD_INT 1
29025: DEC
29026: ST_TO_ADDR
29027: LD_VAR 0 6
29031: PUSH
29032: FOR_TO
29033: IFFALSE 29156
// begin if i > 4 then
29035: LD_VAR 0 8
29039: PUSH
29040: LD_INT 4
29042: GREATER
29043: IFFALSE 29047
// break ;
29045: GO 29156
// x := personel [ i ] ;
29047: LD_ADDR_VAR 0 13
29051: PUSH
29052: LD_VAR 0 6
29056: PUSH
29057: LD_VAR 0 8
29061: ARRAY
29062: ST_TO_ADDR
// if x = - 1 then
29063: LD_VAR 0 13
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: EQUAL
29072: IFFALSE 29076
// continue ;
29074: GO 29032
// PrepareHuman ( false , i , skill ) ;
29076: LD_INT 0
29078: PPUSH
29079: LD_VAR 0 8
29083: PPUSH
29084: LD_VAR 0 4
29088: PPUSH
29089: CALL_OW 380
// un := CreateHuman ;
29093: LD_ADDR_VAR 0 14
29097: PUSH
29098: CALL_OW 44
29102: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29103: LD_VAR 0 14
29107: PPUSH
29108: LD_VAR 0 1
29112: PPUSH
29113: CALL_OW 250
29117: PPUSH
29118: LD_VAR 0 1
29122: PPUSH
29123: CALL_OW 251
29127: PPUSH
29128: LD_INT 10
29130: PPUSH
29131: LD_INT 0
29133: PPUSH
29134: CALL_OW 50
// result := result ^ un ;
29138: LD_ADDR_VAR 0 7
29142: PUSH
29143: LD_VAR 0 7
29147: PUSH
29148: LD_VAR 0 14
29152: ADD
29153: ST_TO_ADDR
// end ;
29154: GO 29032
29156: POP
29157: POP
// end ; end ;
29158: LD_VAR 0 7
29162: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29163: LD_INT 0
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
29169: PPUSH
29170: PPUSH
29171: PPUSH
29172: PPUSH
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
29177: PPUSH
29178: PPUSH
29179: PPUSH
29180: PPUSH
// result := false ;
29181: LD_ADDR_VAR 0 3
29185: PUSH
29186: LD_INT 0
29188: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29189: LD_VAR 0 1
29193: NOT
29194: PUSH
29195: LD_VAR 0 1
29199: PPUSH
29200: CALL_OW 266
29204: PUSH
29205: LD_INT 32
29207: PUSH
29208: LD_INT 33
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: IN
29215: NOT
29216: OR
29217: IFFALSE 29221
// exit ;
29219: GO 30357
// nat := GetNation ( tower ) ;
29221: LD_ADDR_VAR 0 12
29225: PUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 248
29235: ST_TO_ADDR
// side := GetSide ( tower ) ;
29236: LD_ADDR_VAR 0 16
29240: PUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: CALL_OW 255
29250: ST_TO_ADDR
// x := GetX ( tower ) ;
29251: LD_ADDR_VAR 0 10
29255: PUSH
29256: LD_VAR 0 1
29260: PPUSH
29261: CALL_OW 250
29265: ST_TO_ADDR
// y := GetY ( tower ) ;
29266: LD_ADDR_VAR 0 11
29270: PUSH
29271: LD_VAR 0 1
29275: PPUSH
29276: CALL_OW 251
29280: ST_TO_ADDR
// if not x or not y then
29281: LD_VAR 0 10
29285: NOT
29286: PUSH
29287: LD_VAR 0 11
29291: NOT
29292: OR
29293: IFFALSE 29297
// exit ;
29295: GO 30357
// weapon := 0 ;
29297: LD_ADDR_VAR 0 18
29301: PUSH
29302: LD_INT 0
29304: ST_TO_ADDR
// fac_list := [ ] ;
29305: LD_ADDR_VAR 0 17
29309: PUSH
29310: EMPTY
29311: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29312: LD_ADDR_VAR 0 6
29316: PUSH
29317: LD_VAR 0 1
29321: PPUSH
29322: CALL_OW 274
29326: PPUSH
29327: LD_VAR 0 2
29331: PPUSH
29332: CALL 26935 0 2
29336: PPUSH
29337: LD_INT 30
29339: PUSH
29340: LD_INT 3
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PPUSH
29347: CALL_OW 72
29351: ST_TO_ADDR
// if not factories then
29352: LD_VAR 0 6
29356: NOT
29357: IFFALSE 29361
// exit ;
29359: GO 30357
// for i in factories do
29361: LD_ADDR_VAR 0 8
29365: PUSH
29366: LD_VAR 0 6
29370: PUSH
29371: FOR_IN
29372: IFFALSE 29397
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29374: LD_ADDR_VAR 0 17
29378: PUSH
29379: LD_VAR 0 17
29383: PUSH
29384: LD_VAR 0 8
29388: PPUSH
29389: CALL_OW 478
29393: UNION
29394: ST_TO_ADDR
29395: GO 29371
29397: POP
29398: POP
// if not fac_list then
29399: LD_VAR 0 17
29403: NOT
29404: IFFALSE 29408
// exit ;
29406: GO 30357
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29408: LD_ADDR_VAR 0 5
29412: PUSH
29413: LD_INT 4
29415: PUSH
29416: LD_INT 5
29418: PUSH
29419: LD_INT 9
29421: PUSH
29422: LD_INT 10
29424: PUSH
29425: LD_INT 6
29427: PUSH
29428: LD_INT 7
29430: PUSH
29431: LD_INT 11
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 27
29445: PUSH
29446: LD_INT 28
29448: PUSH
29449: LD_INT 26
29451: PUSH
29452: LD_INT 30
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 43
29463: PUSH
29464: LD_INT 44
29466: PUSH
29467: LD_INT 46
29469: PUSH
29470: LD_INT 45
29472: PUSH
29473: LD_INT 47
29475: PUSH
29476: LD_INT 49
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: PUSH
29492: LD_VAR 0 12
29496: ARRAY
29497: ST_TO_ADDR
// for i in list do
29498: LD_ADDR_VAR 0 8
29502: PUSH
29503: LD_VAR 0 5
29507: PUSH
29508: FOR_IN
29509: IFFALSE 29542
// if not i in fac_list then
29511: LD_VAR 0 8
29515: PUSH
29516: LD_VAR 0 17
29520: IN
29521: NOT
29522: IFFALSE 29540
// list := list diff i ;
29524: LD_ADDR_VAR 0 5
29528: PUSH
29529: LD_VAR 0 5
29533: PUSH
29534: LD_VAR 0 8
29538: DIFF
29539: ST_TO_ADDR
29540: GO 29508
29542: POP
29543: POP
// if not list then
29544: LD_VAR 0 5
29548: NOT
29549: IFFALSE 29553
// exit ;
29551: GO 30357
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29553: LD_VAR 0 12
29557: PUSH
29558: LD_INT 3
29560: EQUAL
29561: PUSH
29562: LD_INT 49
29564: PUSH
29565: LD_VAR 0 5
29569: IN
29570: AND
29571: PUSH
29572: LD_INT 31
29574: PPUSH
29575: LD_VAR 0 16
29579: PPUSH
29580: CALL_OW 321
29584: PUSH
29585: LD_INT 2
29587: EQUAL
29588: AND
29589: IFFALSE 29649
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29591: LD_INT 22
29593: PUSH
29594: LD_VAR 0 16
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 35
29605: PUSH
29606: LD_INT 49
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 91
29615: PUSH
29616: LD_VAR 0 1
29620: PUSH
29621: LD_INT 10
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: PPUSH
29634: CALL_OW 69
29638: NOT
29639: IFFALSE 29649
// weapon := ru_time_lapser ;
29641: LD_ADDR_VAR 0 18
29645: PUSH
29646: LD_INT 49
29648: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29649: LD_VAR 0 12
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: IN
29664: PUSH
29665: LD_INT 11
29667: PUSH
29668: LD_VAR 0 5
29672: IN
29673: PUSH
29674: LD_INT 30
29676: PUSH
29677: LD_VAR 0 5
29681: IN
29682: OR
29683: AND
29684: PUSH
29685: LD_INT 6
29687: PPUSH
29688: LD_VAR 0 16
29692: PPUSH
29693: CALL_OW 321
29697: PUSH
29698: LD_INT 2
29700: EQUAL
29701: AND
29702: IFFALSE 29867
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29704: LD_INT 22
29706: PUSH
29707: LD_VAR 0 16
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: LD_INT 35
29721: PUSH
29722: LD_INT 11
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 35
29731: PUSH
29732: LD_INT 30
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 91
29746: PUSH
29747: LD_VAR 0 1
29751: PUSH
29752: LD_INT 18
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: LIST
29764: PPUSH
29765: CALL_OW 69
29769: NOT
29770: PUSH
29771: LD_INT 22
29773: PUSH
29774: LD_VAR 0 16
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: LD_INT 30
29788: PUSH
29789: LD_INT 32
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 30
29798: PUSH
29799: LD_INT 33
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 91
29813: PUSH
29814: LD_VAR 0 1
29818: PUSH
29819: LD_INT 12
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: PUSH
29832: EMPTY
29833: LIST
29834: PPUSH
29835: CALL_OW 69
29839: PUSH
29840: LD_INT 2
29842: GREATER
29843: AND
29844: IFFALSE 29867
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29846: LD_ADDR_VAR 0 18
29850: PUSH
29851: LD_INT 11
29853: PUSH
29854: LD_INT 30
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_VAR 0 12
29865: ARRAY
29866: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29867: LD_VAR 0 18
29871: NOT
29872: PUSH
29873: LD_INT 40
29875: PPUSH
29876: LD_VAR 0 16
29880: PPUSH
29881: CALL_OW 321
29885: PUSH
29886: LD_INT 2
29888: EQUAL
29889: AND
29890: PUSH
29891: LD_INT 7
29893: PUSH
29894: LD_VAR 0 5
29898: IN
29899: PUSH
29900: LD_INT 28
29902: PUSH
29903: LD_VAR 0 5
29907: IN
29908: OR
29909: PUSH
29910: LD_INT 45
29912: PUSH
29913: LD_VAR 0 5
29917: IN
29918: OR
29919: AND
29920: IFFALSE 30174
// begin hex := GetHexInfo ( x , y ) ;
29922: LD_ADDR_VAR 0 4
29926: PUSH
29927: LD_VAR 0 10
29931: PPUSH
29932: LD_VAR 0 11
29936: PPUSH
29937: CALL_OW 546
29941: ST_TO_ADDR
// if hex [ 1 ] then
29942: LD_VAR 0 4
29946: PUSH
29947: LD_INT 1
29949: ARRAY
29950: IFFALSE 29954
// exit ;
29952: GO 30357
// height := hex [ 2 ] ;
29954: LD_ADDR_VAR 0 15
29958: PUSH
29959: LD_VAR 0 4
29963: PUSH
29964: LD_INT 2
29966: ARRAY
29967: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29968: LD_ADDR_VAR 0 14
29972: PUSH
29973: LD_INT 0
29975: PUSH
29976: LD_INT 2
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: LD_INT 5
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
// for i in tmp do
29991: LD_ADDR_VAR 0 8
29995: PUSH
29996: LD_VAR 0 14
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30172
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30004: LD_ADDR_VAR 0 9
30008: PUSH
30009: LD_VAR 0 10
30013: PPUSH
30014: LD_VAR 0 8
30018: PPUSH
30019: LD_INT 5
30021: PPUSH
30022: CALL_OW 272
30026: PUSH
30027: LD_VAR 0 11
30031: PPUSH
30032: LD_VAR 0 8
30036: PPUSH
30037: LD_INT 5
30039: PPUSH
30040: CALL_OW 273
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30049: LD_VAR 0 9
30053: PUSH
30054: LD_INT 1
30056: ARRAY
30057: PPUSH
30058: LD_VAR 0 9
30062: PUSH
30063: LD_INT 2
30065: ARRAY
30066: PPUSH
30067: CALL_OW 488
30071: IFFALSE 30170
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30073: LD_ADDR_VAR 0 4
30077: PUSH
30078: LD_VAR 0 9
30082: PUSH
30083: LD_INT 1
30085: ARRAY
30086: PPUSH
30087: LD_VAR 0 9
30091: PUSH
30092: LD_INT 2
30094: ARRAY
30095: PPUSH
30096: CALL_OW 546
30100: ST_TO_ADDR
// if hex [ 1 ] then
30101: LD_VAR 0 4
30105: PUSH
30106: LD_INT 1
30108: ARRAY
30109: IFFALSE 30113
// continue ;
30111: GO 30001
// h := hex [ 2 ] ;
30113: LD_ADDR_VAR 0 13
30117: PUSH
30118: LD_VAR 0 4
30122: PUSH
30123: LD_INT 2
30125: ARRAY
30126: ST_TO_ADDR
// if h + 7 < height then
30127: LD_VAR 0 13
30131: PUSH
30132: LD_INT 7
30134: PLUS
30135: PUSH
30136: LD_VAR 0 15
30140: LESS
30141: IFFALSE 30170
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30143: LD_ADDR_VAR 0 18
30147: PUSH
30148: LD_INT 7
30150: PUSH
30151: LD_INT 28
30153: PUSH
30154: LD_INT 45
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: PUSH
30162: LD_VAR 0 12
30166: ARRAY
30167: ST_TO_ADDR
// break ;
30168: GO 30172
// end ; end ; end ;
30170: GO 30001
30172: POP
30173: POP
// end ; if not weapon then
30174: LD_VAR 0 18
30178: NOT
30179: IFFALSE 30239
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30181: LD_ADDR_VAR 0 5
30185: PUSH
30186: LD_VAR 0 5
30190: PUSH
30191: LD_INT 11
30193: PUSH
30194: LD_INT 30
30196: PUSH
30197: LD_INT 49
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: DIFF
30205: ST_TO_ADDR
// if not list then
30206: LD_VAR 0 5
30210: NOT
30211: IFFALSE 30215
// exit ;
30213: GO 30357
// weapon := list [ rand ( 1 , list ) ] ;
30215: LD_ADDR_VAR 0 18
30219: PUSH
30220: LD_VAR 0 5
30224: PUSH
30225: LD_INT 1
30227: PPUSH
30228: LD_VAR 0 5
30232: PPUSH
30233: CALL_OW 12
30237: ARRAY
30238: ST_TO_ADDR
// end ; if weapon then
30239: LD_VAR 0 18
30243: IFFALSE 30357
// begin tmp := CostOfWeapon ( weapon ) ;
30245: LD_ADDR_VAR 0 14
30249: PUSH
30250: LD_VAR 0 18
30254: PPUSH
30255: CALL_OW 451
30259: ST_TO_ADDR
// j := GetBase ( tower ) ;
30260: LD_ADDR_VAR 0 9
30264: PUSH
30265: LD_VAR 0 1
30269: PPUSH
30270: CALL_OW 274
30274: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30275: LD_VAR 0 9
30279: PPUSH
30280: LD_INT 1
30282: PPUSH
30283: CALL_OW 275
30287: PUSH
30288: LD_VAR 0 14
30292: PUSH
30293: LD_INT 1
30295: ARRAY
30296: GREATEREQUAL
30297: PUSH
30298: LD_VAR 0 9
30302: PPUSH
30303: LD_INT 2
30305: PPUSH
30306: CALL_OW 275
30310: PUSH
30311: LD_VAR 0 14
30315: PUSH
30316: LD_INT 2
30318: ARRAY
30319: GREATEREQUAL
30320: AND
30321: PUSH
30322: LD_VAR 0 9
30326: PPUSH
30327: LD_INT 3
30329: PPUSH
30330: CALL_OW 275
30334: PUSH
30335: LD_VAR 0 14
30339: PUSH
30340: LD_INT 3
30342: ARRAY
30343: GREATEREQUAL
30344: AND
30345: IFFALSE 30357
// result := weapon ;
30347: LD_ADDR_VAR 0 3
30351: PUSH
30352: LD_VAR 0 18
30356: ST_TO_ADDR
// end ; end ;
30357: LD_VAR 0 3
30361: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30362: LD_INT 0
30364: PPUSH
30365: PPUSH
// result := true ;
30366: LD_ADDR_VAR 0 3
30370: PUSH
30371: LD_INT 1
30373: ST_TO_ADDR
// if array1 = array2 then
30374: LD_VAR 0 1
30378: PUSH
30379: LD_VAR 0 2
30383: EQUAL
30384: IFFALSE 30444
// begin for i = 1 to array1 do
30386: LD_ADDR_VAR 0 4
30390: PUSH
30391: DOUBLE
30392: LD_INT 1
30394: DEC
30395: ST_TO_ADDR
30396: LD_VAR 0 1
30400: PUSH
30401: FOR_TO
30402: IFFALSE 30440
// if array1 [ i ] <> array2 [ i ] then
30404: LD_VAR 0 1
30408: PUSH
30409: LD_VAR 0 4
30413: ARRAY
30414: PUSH
30415: LD_VAR 0 2
30419: PUSH
30420: LD_VAR 0 4
30424: ARRAY
30425: NONEQUAL
30426: IFFALSE 30438
// begin result := false ;
30428: LD_ADDR_VAR 0 3
30432: PUSH
30433: LD_INT 0
30435: ST_TO_ADDR
// break ;
30436: GO 30440
// end ;
30438: GO 30401
30440: POP
30441: POP
// end else
30442: GO 30452
// result := false ;
30444: LD_ADDR_VAR 0 3
30448: PUSH
30449: LD_INT 0
30451: ST_TO_ADDR
// end ;
30452: LD_VAR 0 3
30456: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30457: LD_INT 0
30459: PPUSH
30460: PPUSH
30461: PPUSH
// pom := GetBase ( fac ) ;
30462: LD_ADDR_VAR 0 5
30466: PUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 274
30476: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30477: LD_ADDR_VAR 0 4
30481: PUSH
30482: LD_VAR 0 2
30486: PUSH
30487: LD_INT 1
30489: ARRAY
30490: PPUSH
30491: LD_VAR 0 2
30495: PUSH
30496: LD_INT 2
30498: ARRAY
30499: PPUSH
30500: LD_VAR 0 2
30504: PUSH
30505: LD_INT 3
30507: ARRAY
30508: PPUSH
30509: LD_VAR 0 2
30513: PUSH
30514: LD_INT 4
30516: ARRAY
30517: PPUSH
30518: CALL_OW 449
30522: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30523: LD_ADDR_VAR 0 3
30527: PUSH
30528: LD_VAR 0 5
30532: PPUSH
30533: LD_INT 1
30535: PPUSH
30536: CALL_OW 275
30540: PUSH
30541: LD_VAR 0 4
30545: PUSH
30546: LD_INT 1
30548: ARRAY
30549: GREATEREQUAL
30550: PUSH
30551: LD_VAR 0 5
30555: PPUSH
30556: LD_INT 2
30558: PPUSH
30559: CALL_OW 275
30563: PUSH
30564: LD_VAR 0 4
30568: PUSH
30569: LD_INT 2
30571: ARRAY
30572: GREATEREQUAL
30573: AND
30574: PUSH
30575: LD_VAR 0 5
30579: PPUSH
30580: LD_INT 3
30582: PPUSH
30583: CALL_OW 275
30587: PUSH
30588: LD_VAR 0 4
30592: PUSH
30593: LD_INT 3
30595: ARRAY
30596: GREATEREQUAL
30597: AND
30598: ST_TO_ADDR
// end ;
30599: LD_VAR 0 3
30603: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30604: LD_INT 0
30606: PPUSH
30607: PPUSH
30608: PPUSH
30609: PPUSH
// pom := GetBase ( building ) ;
30610: LD_ADDR_VAR 0 3
30614: PUSH
30615: LD_VAR 0 1
30619: PPUSH
30620: CALL_OW 274
30624: ST_TO_ADDR
// if not pom then
30625: LD_VAR 0 3
30629: NOT
30630: IFFALSE 30634
// exit ;
30632: GO 30804
// btype := GetBType ( building ) ;
30634: LD_ADDR_VAR 0 5
30638: PUSH
30639: LD_VAR 0 1
30643: PPUSH
30644: CALL_OW 266
30648: ST_TO_ADDR
// if btype = b_armoury then
30649: LD_VAR 0 5
30653: PUSH
30654: LD_INT 4
30656: EQUAL
30657: IFFALSE 30667
// btype := b_barracks ;
30659: LD_ADDR_VAR 0 5
30663: PUSH
30664: LD_INT 5
30666: ST_TO_ADDR
// if btype = b_depot then
30667: LD_VAR 0 5
30671: PUSH
30672: LD_INT 0
30674: EQUAL
30675: IFFALSE 30685
// btype := b_warehouse ;
30677: LD_ADDR_VAR 0 5
30681: PUSH
30682: LD_INT 1
30684: ST_TO_ADDR
// if btype = b_workshop then
30685: LD_VAR 0 5
30689: PUSH
30690: LD_INT 2
30692: EQUAL
30693: IFFALSE 30703
// btype := b_factory ;
30695: LD_ADDR_VAR 0 5
30699: PUSH
30700: LD_INT 3
30702: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30703: LD_ADDR_VAR 0 4
30707: PUSH
30708: LD_VAR 0 5
30712: PPUSH
30713: LD_VAR 0 1
30717: PPUSH
30718: CALL_OW 248
30722: PPUSH
30723: CALL_OW 450
30727: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30728: LD_ADDR_VAR 0 2
30732: PUSH
30733: LD_VAR 0 3
30737: PPUSH
30738: LD_INT 1
30740: PPUSH
30741: CALL_OW 275
30745: PUSH
30746: LD_VAR 0 4
30750: PUSH
30751: LD_INT 1
30753: ARRAY
30754: GREATEREQUAL
30755: PUSH
30756: LD_VAR 0 3
30760: PPUSH
30761: LD_INT 2
30763: PPUSH
30764: CALL_OW 275
30768: PUSH
30769: LD_VAR 0 4
30773: PUSH
30774: LD_INT 2
30776: ARRAY
30777: GREATEREQUAL
30778: AND
30779: PUSH
30780: LD_VAR 0 3
30784: PPUSH
30785: LD_INT 3
30787: PPUSH
30788: CALL_OW 275
30792: PUSH
30793: LD_VAR 0 4
30797: PUSH
30798: LD_INT 3
30800: ARRAY
30801: GREATEREQUAL
30802: AND
30803: ST_TO_ADDR
// end ;
30804: LD_VAR 0 2
30808: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30809: LD_INT 0
30811: PPUSH
30812: PPUSH
30813: PPUSH
// pom := GetBase ( building ) ;
30814: LD_ADDR_VAR 0 4
30818: PUSH
30819: LD_VAR 0 1
30823: PPUSH
30824: CALL_OW 274
30828: ST_TO_ADDR
// if not pom then
30829: LD_VAR 0 4
30833: NOT
30834: IFFALSE 30838
// exit ;
30836: GO 30939
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30838: LD_ADDR_VAR 0 5
30842: PUSH
30843: LD_VAR 0 2
30847: PPUSH
30848: LD_VAR 0 1
30852: PPUSH
30853: CALL_OW 248
30857: PPUSH
30858: CALL_OW 450
30862: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30863: LD_ADDR_VAR 0 3
30867: PUSH
30868: LD_VAR 0 4
30872: PPUSH
30873: LD_INT 1
30875: PPUSH
30876: CALL_OW 275
30880: PUSH
30881: LD_VAR 0 5
30885: PUSH
30886: LD_INT 1
30888: ARRAY
30889: GREATEREQUAL
30890: PUSH
30891: LD_VAR 0 4
30895: PPUSH
30896: LD_INT 2
30898: PPUSH
30899: CALL_OW 275
30903: PUSH
30904: LD_VAR 0 5
30908: PUSH
30909: LD_INT 2
30911: ARRAY
30912: GREATEREQUAL
30913: AND
30914: PUSH
30915: LD_VAR 0 4
30919: PPUSH
30920: LD_INT 3
30922: PPUSH
30923: CALL_OW 275
30927: PUSH
30928: LD_VAR 0 5
30932: PUSH
30933: LD_INT 3
30935: ARRAY
30936: GREATEREQUAL
30937: AND
30938: ST_TO_ADDR
// end ;
30939: LD_VAR 0 3
30943: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
30944: LD_INT 0
30946: PPUSH
30947: PPUSH
30948: PPUSH
30949: PPUSH
30950: PPUSH
30951: PPUSH
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
// result := false ;
30956: LD_ADDR_VAR 0 6
30960: PUSH
30961: LD_INT 0
30963: ST_TO_ADDR
// if not base or not btype or not x or not y then
30964: LD_VAR 0 1
30968: NOT
30969: PUSH
30970: LD_VAR 0 2
30974: NOT
30975: OR
30976: PUSH
30977: LD_VAR 0 3
30981: NOT
30982: OR
30983: PUSH
30984: LD_VAR 0 4
30988: NOT
30989: OR
30990: IFFALSE 30994
// exit ;
30992: GO 31603
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
30994: LD_ADDR_VAR 0 12
30998: PUSH
30999: LD_VAR 0 2
31003: PPUSH
31004: LD_VAR 0 3
31008: PPUSH
31009: LD_VAR 0 4
31013: PPUSH
31014: LD_VAR 0 5
31018: PPUSH
31019: LD_VAR 0 1
31023: PUSH
31024: LD_INT 1
31026: ARRAY
31027: PPUSH
31028: CALL_OW 248
31032: PPUSH
31033: LD_INT 0
31035: PPUSH
31036: CALL 32440 0 6
31040: ST_TO_ADDR
// if not hexes then
31041: LD_VAR 0 12
31045: NOT
31046: IFFALSE 31050
// exit ;
31048: GO 31603
// for i = 1 to hexes do
31050: LD_ADDR_VAR 0 7
31054: PUSH
31055: DOUBLE
31056: LD_INT 1
31058: DEC
31059: ST_TO_ADDR
31060: LD_VAR 0 12
31064: PUSH
31065: FOR_TO
31066: IFFALSE 31601
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31068: LD_ADDR_VAR 0 11
31072: PUSH
31073: LD_VAR 0 12
31077: PUSH
31078: LD_VAR 0 7
31082: ARRAY
31083: PUSH
31084: LD_INT 1
31086: ARRAY
31087: PPUSH
31088: LD_VAR 0 12
31092: PUSH
31093: LD_VAR 0 7
31097: ARRAY
31098: PUSH
31099: LD_INT 2
31101: ARRAY
31102: PPUSH
31103: CALL_OW 428
31107: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31108: LD_VAR 0 12
31112: PUSH
31113: LD_VAR 0 7
31117: ARRAY
31118: PUSH
31119: LD_INT 1
31121: ARRAY
31122: PPUSH
31123: LD_VAR 0 12
31127: PUSH
31128: LD_VAR 0 7
31132: ARRAY
31133: PUSH
31134: LD_INT 2
31136: ARRAY
31137: PPUSH
31138: CALL_OW 351
31142: PUSH
31143: LD_VAR 0 12
31147: PUSH
31148: LD_VAR 0 7
31152: ARRAY
31153: PUSH
31154: LD_INT 1
31156: ARRAY
31157: PPUSH
31158: LD_VAR 0 12
31162: PUSH
31163: LD_VAR 0 7
31167: ARRAY
31168: PUSH
31169: LD_INT 2
31171: ARRAY
31172: PPUSH
31173: CALL_OW 488
31177: NOT
31178: OR
31179: PUSH
31180: LD_VAR 0 11
31184: PPUSH
31185: CALL_OW 247
31189: PUSH
31190: LD_INT 3
31192: EQUAL
31193: OR
31194: IFFALSE 31200
// exit ;
31196: POP
31197: POP
31198: GO 31603
// if not tmp or not tmp in base then
31200: LD_VAR 0 11
31204: NOT
31205: PUSH
31206: LD_VAR 0 11
31210: PUSH
31211: LD_VAR 0 1
31215: IN
31216: NOT
31217: OR
31218: IFFALSE 31222
// continue ;
31220: GO 31065
// result := true ;
31222: LD_ADDR_VAR 0 6
31226: PUSH
31227: LD_INT 1
31229: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31230: LD_ADDR_VAR 0 15
31234: PUSH
31235: LD_VAR 0 1
31239: PPUSH
31240: LD_INT 22
31242: PUSH
31243: LD_VAR 0 11
31247: PPUSH
31248: CALL_OW 255
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: LD_INT 30
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 30
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PPUSH
31289: CALL_OW 72
31293: ST_TO_ADDR
// if dep then
31294: LD_VAR 0 15
31298: IFFALSE 31434
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31300: LD_ADDR_VAR 0 14
31304: PUSH
31305: LD_VAR 0 15
31309: PUSH
31310: LD_INT 1
31312: ARRAY
31313: PPUSH
31314: CALL_OW 250
31318: PPUSH
31319: LD_VAR 0 15
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: PPUSH
31328: CALL_OW 254
31332: PPUSH
31333: LD_INT 5
31335: PPUSH
31336: CALL_OW 272
31340: PUSH
31341: LD_VAR 0 15
31345: PUSH
31346: LD_INT 1
31348: ARRAY
31349: PPUSH
31350: CALL_OW 251
31354: PPUSH
31355: LD_VAR 0 15
31359: PUSH
31360: LD_INT 1
31362: ARRAY
31363: PPUSH
31364: CALL_OW 254
31368: PPUSH
31369: LD_INT 5
31371: PPUSH
31372: CALL_OW 273
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31381: LD_VAR 0 14
31385: PUSH
31386: LD_INT 1
31388: ARRAY
31389: PPUSH
31390: LD_VAR 0 14
31394: PUSH
31395: LD_INT 2
31397: ARRAY
31398: PPUSH
31399: CALL_OW 488
31403: IFFALSE 31434
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31405: LD_VAR 0 11
31409: PPUSH
31410: LD_VAR 0 14
31414: PUSH
31415: LD_INT 1
31417: ARRAY
31418: PPUSH
31419: LD_VAR 0 14
31423: PUSH
31424: LD_INT 2
31426: ARRAY
31427: PPUSH
31428: CALL_OW 111
// continue ;
31432: GO 31065
// end ; end ; r := GetDir ( tmp ) ;
31434: LD_ADDR_VAR 0 13
31438: PUSH
31439: LD_VAR 0 11
31443: PPUSH
31444: CALL_OW 254
31448: ST_TO_ADDR
// if r = 5 then
31449: LD_VAR 0 13
31453: PUSH
31454: LD_INT 5
31456: EQUAL
31457: IFFALSE 31467
// r := 0 ;
31459: LD_ADDR_VAR 0 13
31463: PUSH
31464: LD_INT 0
31466: ST_TO_ADDR
// for j = r to 5 do
31467: LD_ADDR_VAR 0 8
31471: PUSH
31472: DOUBLE
31473: LD_VAR 0 13
31477: DEC
31478: ST_TO_ADDR
31479: LD_INT 5
31481: PUSH
31482: FOR_TO
31483: IFFALSE 31597
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31485: LD_ADDR_VAR 0 9
31489: PUSH
31490: LD_VAR 0 11
31494: PPUSH
31495: CALL_OW 250
31499: PPUSH
31500: LD_VAR 0 8
31504: PPUSH
31505: LD_INT 2
31507: PPUSH
31508: CALL_OW 272
31512: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31513: LD_ADDR_VAR 0 10
31517: PUSH
31518: LD_VAR 0 11
31522: PPUSH
31523: CALL_OW 251
31527: PPUSH
31528: LD_VAR 0 8
31532: PPUSH
31533: LD_INT 2
31535: PPUSH
31536: CALL_OW 273
31540: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31541: LD_VAR 0 9
31545: PPUSH
31546: LD_VAR 0 10
31550: PPUSH
31551: CALL_OW 488
31555: PUSH
31556: LD_VAR 0 9
31560: PPUSH
31561: LD_VAR 0 10
31565: PPUSH
31566: CALL_OW 428
31570: NOT
31571: AND
31572: IFFALSE 31595
// begin ComMoveXY ( tmp , _x , _y ) ;
31574: LD_VAR 0 11
31578: PPUSH
31579: LD_VAR 0 9
31583: PPUSH
31584: LD_VAR 0 10
31588: PPUSH
31589: CALL_OW 111
// break ;
31593: GO 31597
// end ; end ;
31595: GO 31482
31597: POP
31598: POP
// end ;
31599: GO 31065
31601: POP
31602: POP
// end ;
31603: LD_VAR 0 6
31607: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31608: LD_INT 0
31610: PPUSH
31611: PPUSH
31612: PPUSH
31613: PPUSH
31614: PPUSH
31615: PPUSH
31616: PPUSH
31617: PPUSH
31618: PPUSH
31619: PPUSH
// result := false ;
31620: LD_ADDR_VAR 0 6
31624: PUSH
31625: LD_INT 0
31627: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31628: LD_VAR 0 1
31632: NOT
31633: PUSH
31634: LD_VAR 0 1
31638: PPUSH
31639: CALL_OW 266
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: IN
31654: NOT
31655: OR
31656: PUSH
31657: LD_VAR 0 2
31661: NOT
31662: OR
31663: PUSH
31664: LD_VAR 0 5
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 3
31680: PUSH
31681: LD_INT 4
31683: PUSH
31684: LD_INT 5
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: IN
31695: NOT
31696: OR
31697: PUSH
31698: LD_VAR 0 3
31702: PPUSH
31703: LD_VAR 0 4
31707: PPUSH
31708: CALL_OW 488
31712: NOT
31713: OR
31714: IFFALSE 31718
// exit ;
31716: GO 32435
// pom := GetBase ( depot ) ;
31718: LD_ADDR_VAR 0 10
31722: PUSH
31723: LD_VAR 0 1
31727: PPUSH
31728: CALL_OW 274
31732: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31733: LD_ADDR_VAR 0 11
31737: PUSH
31738: LD_VAR 0 2
31742: PPUSH
31743: LD_VAR 0 1
31747: PPUSH
31748: CALL_OW 248
31752: PPUSH
31753: CALL_OW 450
31757: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31758: LD_VAR 0 10
31762: PPUSH
31763: LD_INT 1
31765: PPUSH
31766: CALL_OW 275
31770: PUSH
31771: LD_VAR 0 11
31775: PUSH
31776: LD_INT 1
31778: ARRAY
31779: GREATEREQUAL
31780: PUSH
31781: LD_VAR 0 10
31785: PPUSH
31786: LD_INT 2
31788: PPUSH
31789: CALL_OW 275
31793: PUSH
31794: LD_VAR 0 11
31798: PUSH
31799: LD_INT 2
31801: ARRAY
31802: GREATEREQUAL
31803: AND
31804: PUSH
31805: LD_VAR 0 10
31809: PPUSH
31810: LD_INT 3
31812: PPUSH
31813: CALL_OW 275
31817: PUSH
31818: LD_VAR 0 11
31822: PUSH
31823: LD_INT 3
31825: ARRAY
31826: GREATEREQUAL
31827: AND
31828: NOT
31829: IFFALSE 31833
// exit ;
31831: GO 32435
// if GetBType ( depot ) = b_depot then
31833: LD_VAR 0 1
31837: PPUSH
31838: CALL_OW 266
31842: PUSH
31843: LD_INT 0
31845: EQUAL
31846: IFFALSE 31858
// dist := 28 else
31848: LD_ADDR_VAR 0 14
31852: PUSH
31853: LD_INT 28
31855: ST_TO_ADDR
31856: GO 31866
// dist := 36 ;
31858: LD_ADDR_VAR 0 14
31862: PUSH
31863: LD_INT 36
31865: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31866: LD_VAR 0 1
31870: PPUSH
31871: LD_VAR 0 3
31875: PPUSH
31876: LD_VAR 0 4
31880: PPUSH
31881: CALL_OW 297
31885: PUSH
31886: LD_VAR 0 14
31890: GREATER
31891: IFFALSE 31895
// exit ;
31893: GO 32435
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31895: LD_ADDR_VAR 0 12
31899: PUSH
31900: LD_VAR 0 2
31904: PPUSH
31905: LD_VAR 0 3
31909: PPUSH
31910: LD_VAR 0 4
31914: PPUSH
31915: LD_VAR 0 5
31919: PPUSH
31920: LD_VAR 0 1
31924: PPUSH
31925: CALL_OW 248
31929: PPUSH
31930: LD_INT 0
31932: PPUSH
31933: CALL 32440 0 6
31937: ST_TO_ADDR
// if not hexes then
31938: LD_VAR 0 12
31942: NOT
31943: IFFALSE 31947
// exit ;
31945: GO 32435
// hex := GetHexInfo ( x , y ) ;
31947: LD_ADDR_VAR 0 15
31951: PUSH
31952: LD_VAR 0 3
31956: PPUSH
31957: LD_VAR 0 4
31961: PPUSH
31962: CALL_OW 546
31966: ST_TO_ADDR
// if hex [ 1 ] then
31967: LD_VAR 0 15
31971: PUSH
31972: LD_INT 1
31974: ARRAY
31975: IFFALSE 31979
// exit ;
31977: GO 32435
// height := hex [ 2 ] ;
31979: LD_ADDR_VAR 0 13
31983: PUSH
31984: LD_VAR 0 15
31988: PUSH
31989: LD_INT 2
31991: ARRAY
31992: ST_TO_ADDR
// for i = 1 to hexes do
31993: LD_ADDR_VAR 0 7
31997: PUSH
31998: DOUBLE
31999: LD_INT 1
32001: DEC
32002: ST_TO_ADDR
32003: LD_VAR 0 12
32007: PUSH
32008: FOR_TO
32009: IFFALSE 32339
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32011: LD_VAR 0 12
32015: PUSH
32016: LD_VAR 0 7
32020: ARRAY
32021: PUSH
32022: LD_INT 1
32024: ARRAY
32025: PPUSH
32026: LD_VAR 0 12
32030: PUSH
32031: LD_VAR 0 7
32035: ARRAY
32036: PUSH
32037: LD_INT 2
32039: ARRAY
32040: PPUSH
32041: CALL_OW 488
32045: NOT
32046: PUSH
32047: LD_VAR 0 12
32051: PUSH
32052: LD_VAR 0 7
32056: ARRAY
32057: PUSH
32058: LD_INT 1
32060: ARRAY
32061: PPUSH
32062: LD_VAR 0 12
32066: PUSH
32067: LD_VAR 0 7
32071: ARRAY
32072: PUSH
32073: LD_INT 2
32075: ARRAY
32076: PPUSH
32077: CALL_OW 428
32081: PUSH
32082: LD_INT 0
32084: GREATER
32085: OR
32086: PUSH
32087: LD_VAR 0 12
32091: PUSH
32092: LD_VAR 0 7
32096: ARRAY
32097: PUSH
32098: LD_INT 1
32100: ARRAY
32101: PPUSH
32102: LD_VAR 0 12
32106: PUSH
32107: LD_VAR 0 7
32111: ARRAY
32112: PUSH
32113: LD_INT 2
32115: ARRAY
32116: PPUSH
32117: CALL_OW 351
32121: OR
32122: IFFALSE 32128
// exit ;
32124: POP
32125: POP
32126: GO 32435
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32128: LD_ADDR_VAR 0 8
32132: PUSH
32133: LD_VAR 0 12
32137: PUSH
32138: LD_VAR 0 7
32142: ARRAY
32143: PUSH
32144: LD_INT 1
32146: ARRAY
32147: PPUSH
32148: LD_VAR 0 12
32152: PUSH
32153: LD_VAR 0 7
32157: ARRAY
32158: PUSH
32159: LD_INT 2
32161: ARRAY
32162: PPUSH
32163: CALL_OW 546
32167: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32168: LD_VAR 0 8
32172: PUSH
32173: LD_INT 1
32175: ARRAY
32176: PUSH
32177: LD_VAR 0 8
32181: PUSH
32182: LD_INT 2
32184: ARRAY
32185: PUSH
32186: LD_VAR 0 13
32190: PUSH
32191: LD_INT 2
32193: PLUS
32194: GREATER
32195: OR
32196: PUSH
32197: LD_VAR 0 8
32201: PUSH
32202: LD_INT 2
32204: ARRAY
32205: PUSH
32206: LD_VAR 0 13
32210: PUSH
32211: LD_INT 2
32213: MINUS
32214: LESS
32215: OR
32216: PUSH
32217: LD_VAR 0 8
32221: PUSH
32222: LD_INT 3
32224: ARRAY
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: LD_INT 8
32231: PUSH
32232: LD_INT 9
32234: PUSH
32235: LD_INT 10
32237: PUSH
32238: LD_INT 11
32240: PUSH
32241: LD_INT 12
32243: PUSH
32244: LD_INT 13
32246: PUSH
32247: LD_INT 16
32249: PUSH
32250: LD_INT 17
32252: PUSH
32253: LD_INT 18
32255: PUSH
32256: LD_INT 19
32258: PUSH
32259: LD_INT 20
32261: PUSH
32262: LD_INT 21
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: IN
32280: NOT
32281: OR
32282: PUSH
32283: LD_VAR 0 8
32287: PUSH
32288: LD_INT 5
32290: ARRAY
32291: NOT
32292: OR
32293: PUSH
32294: LD_VAR 0 8
32298: PUSH
32299: LD_INT 6
32301: ARRAY
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: LD_INT 2
32308: PUSH
32309: LD_INT 7
32311: PUSH
32312: LD_INT 9
32314: PUSH
32315: LD_INT 10
32317: PUSH
32318: LD_INT 11
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: IN
32329: NOT
32330: OR
32331: IFFALSE 32337
// exit ;
32333: POP
32334: POP
32335: GO 32435
// end ;
32337: GO 32008
32339: POP
32340: POP
// side := GetSide ( depot ) ;
32341: LD_ADDR_VAR 0 9
32345: PUSH
32346: LD_VAR 0 1
32350: PPUSH
32351: CALL_OW 255
32355: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32356: LD_VAR 0 9
32360: PPUSH
32361: LD_VAR 0 3
32365: PPUSH
32366: LD_VAR 0 4
32370: PPUSH
32371: LD_INT 20
32373: PPUSH
32374: CALL 25089 0 4
32378: PUSH
32379: LD_INT 4
32381: ARRAY
32382: IFFALSE 32386
// exit ;
32384: GO 32435
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32386: LD_VAR 0 2
32390: PUSH
32391: LD_INT 29
32393: PUSH
32394: LD_INT 30
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: IN
32401: PUSH
32402: LD_VAR 0 3
32406: PPUSH
32407: LD_VAR 0 4
32411: PPUSH
32412: LD_VAR 0 9
32416: PPUSH
32417: CALL_OW 440
32421: NOT
32422: AND
32423: IFFALSE 32427
// exit ;
32425: GO 32435
// result := true ;
32427: LD_ADDR_VAR 0 6
32431: PUSH
32432: LD_INT 1
32434: ST_TO_ADDR
// end ;
32435: LD_VAR 0 6
32439: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32440: LD_INT 0
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
32447: PPUSH
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
32452: PPUSH
32453: PPUSH
32454: PPUSH
32455: PPUSH
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
32498: PPUSH
32499: PPUSH
// result = [ ] ;
32500: LD_ADDR_VAR 0 7
32504: PUSH
32505: EMPTY
32506: ST_TO_ADDR
// temp_list = [ ] ;
32507: LD_ADDR_VAR 0 9
32511: PUSH
32512: EMPTY
32513: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32514: LD_VAR 0 4
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 3
32530: PUSH
32531: LD_INT 4
32533: PUSH
32534: LD_INT 5
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: IN
32545: NOT
32546: PUSH
32547: LD_VAR 0 1
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: IN
32562: PUSH
32563: LD_VAR 0 5
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: LD_INT 3
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: LIST
32581: IN
32582: NOT
32583: AND
32584: OR
32585: IFFALSE 32589
// exit ;
32587: GO 50980
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32589: LD_VAR 0 1
32593: PUSH
32594: LD_INT 6
32596: PUSH
32597: LD_INT 7
32599: PUSH
32600: LD_INT 8
32602: PUSH
32603: LD_INT 13
32605: PUSH
32606: LD_INT 12
32608: PUSH
32609: LD_INT 15
32611: PUSH
32612: LD_INT 11
32614: PUSH
32615: LD_INT 14
32617: PUSH
32618: LD_INT 10
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: IN
32632: IFFALSE 32642
// btype = b_lab ;
32634: LD_ADDR_VAR 0 1
32638: PUSH
32639: LD_INT 6
32641: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32642: LD_VAR 0 6
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: LD_INT 2
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: LIST
32660: IN
32661: NOT
32662: PUSH
32663: LD_VAR 0 1
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: LD_INT 3
32679: PUSH
32680: LD_INT 6
32682: PUSH
32683: LD_INT 36
32685: PUSH
32686: LD_INT 4
32688: PUSH
32689: LD_INT 5
32691: PUSH
32692: LD_INT 31
32694: PUSH
32695: LD_INT 32
32697: PUSH
32698: LD_INT 33
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: IN
32714: NOT
32715: PUSH
32716: LD_VAR 0 6
32720: PUSH
32721: LD_INT 1
32723: EQUAL
32724: AND
32725: OR
32726: PUSH
32727: LD_VAR 0 1
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: LD_INT 3
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: IN
32742: NOT
32743: PUSH
32744: LD_VAR 0 6
32748: PUSH
32749: LD_INT 2
32751: EQUAL
32752: AND
32753: OR
32754: IFFALSE 32764
// mode = 0 ;
32756: LD_ADDR_VAR 0 6
32760: PUSH
32761: LD_INT 0
32763: ST_TO_ADDR
// case mode of 0 :
32764: LD_VAR 0 6
32768: PUSH
32769: LD_INT 0
32771: DOUBLE
32772: EQUAL
32773: IFTRUE 32777
32775: GO 44230
32777: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32778: LD_ADDR_VAR 0 11
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: LD_INT 2
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 3
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 3
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32971: LD_ADDR_VAR 0 12
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 2
33094: NEG
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: LD_INT 1
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 2
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: NEG
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: NEG
33140: PUSH
33141: LD_INT 1
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33167: LD_ADDR_VAR 0 13
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: LD_INT 2
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 2
33290: NEG
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: LD_INT 3
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 3
33326: NEG
33327: PUSH
33328: LD_INT 2
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 3
33338: NEG
33339: PUSH
33340: LD_INT 3
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33366: LD_ADDR_VAR 0 14
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: LD_INT 1
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 1
33424: NEG
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: LD_INT 2
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: LD_INT 2
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: LD_INT 3
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 3
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 2
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33562: LD_ADDR_VAR 0 15
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: LD_INT 1
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: NEG
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 3
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 3
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33755: LD_ADDR_VAR 0 16
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 2
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 2
33878: NEG
33879: PUSH
33880: LD_INT 1
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 2
33890: NEG
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 3
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 3
33912: PUSH
33913: LD_INT 3
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: LD_INT 3
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33948: LD_ADDR_VAR 0 17
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: LD_INT 2
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 2
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: NEG
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: NEG
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34178: LD_ADDR_VAR 0 18
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: LD_INT 1
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 2
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 2
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: NEG
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: NEG
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34408: LD_ADDR_VAR 0 19
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: LD_INT 2
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: LD_INT 2
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 2
34595: NEG
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34638: LD_ADDR_VAR 0 20
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 1
34719: NEG
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: LD_INT 2
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: LD_INT 1
34745: NEG
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 2
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: LD_INT 2
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: NEG
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 2
34825: NEG
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: NEG
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34868: LD_ADDR_VAR 0 21
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 2
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: LD_INT 1
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 2
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 2
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 2
35055: NEG
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: LD_INT 2
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35098: LD_ADDR_VAR 0 22
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: LD_INT 2
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35328: LD_ADDR_VAR 0 23
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: LD_INT 1
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: LD_INT 2
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: LD_INT 2
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: LD_INT 2
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: LD_INT 1
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: NEG
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 2
35527: NEG
35528: PUSH
35529: LD_INT 2
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 2
35539: NEG
35540: PUSH
35541: LD_INT 3
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 3
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35608: LD_ADDR_VAR 0 24
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: LD_INT 2
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: LD_INT 2
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 2
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 2
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 2
35795: NEG
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 2
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 3
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 3
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35884: LD_ADDR_VAR 0 25
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 2
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 2
36060: NEG
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: NEG
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 2
36083: NEG
36084: PUSH
36085: LD_INT 2
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 3
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 3
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: LD_INT 3
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: LD_INT 3
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36158: LD_ADDR_VAR 0 26
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 2
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: NEG
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: NEG
36358: PUSH
36359: LD_INT 2
36361: NEG
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 3
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 3
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36434: LD_ADDR_VAR 0 27
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 2
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 2
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 2
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 2
36633: NEG
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 2
36656: NEG
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 3
36667: NEG
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 3
36679: NEG
36680: PUSH
36681: LD_INT 2
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36714: LD_ADDR_VAR 0 28
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 2
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 2
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: LD_INT 2
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 2
36913: NEG
36914: PUSH
36915: LD_INT 2
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: LD_INT 3
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: LD_INT 3
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 3
36949: NEG
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 3
36961: NEG
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36996: LD_ADDR_VAR 0 29
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 2
37174: NEG
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 3
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: LD_INT 3
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 3
37240: NEG
37241: PUSH
37242: LD_INT 2
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37275: LD_ADDR_VAR 0 30
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: LD_INT 1
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 2
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 2
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 2
37441: NEG
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: NEG
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 3
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: LD_INT 2
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 3
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: LD_INT 3
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 3
37518: NEG
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37553: LD_ADDR_VAR 0 31
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 2
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: LD_INT 2
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: LD_INT 3
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 3
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37831: LD_ADDR_VAR 0 32
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 3
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 3
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: LD_INT 3
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 3
38074: NEG
38075: PUSH
38076: LD_INT 1
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38109: LD_ADDR_VAR 0 33
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: NEG
38300: PUSH
38301: LD_INT 3
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 1
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 3
38353: NEG
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38388: LD_ADDR_VAR 0 34
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 2
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: NEG
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 2
38567: NEG
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 3
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: LD_INT 2
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 3
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 3
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: NEG
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 3
38633: NEG
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38668: LD_ADDR_VAR 0 35
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38780: LD_ADDR_VAR 0 36
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38892: LD_ADDR_VAR 0 37
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39004: LD_ADDR_VAR 0 38
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: NEG
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39116: LD_ADDR_VAR 0 39
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 2
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39228: LD_ADDR_VAR 0 40
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39340: LD_ADDR_VAR 0 41
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 2
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 2
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 2
39495: NEG
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 2
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: LD_INT 3
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 3
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 3
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 3
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 3
39583: PUSH
39584: LD_INT 3
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: LD_INT 3
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 3
39614: NEG
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 3
39625: NEG
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 3
39637: NEG
39638: PUSH
39639: LD_INT 2
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: NEG
39650: PUSH
39651: LD_INT 3
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39690: LD_ADDR_VAR 0 42
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: NEG
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: LD_INT 3
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 3
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: LD_INT 3
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 3
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: LD_INT 3
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 3
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 3
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 3
39999: NEG
40000: PUSH
40001: LD_INT 3
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40040: LD_ADDR_VAR 0 43
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 2
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 3
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 3
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 3
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 3
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 3
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 3
40336: NEG
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 3
40347: NEG
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40388: LD_ADDR_VAR 0 44
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: LD_INT 3
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 3
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 3
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 3
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: LD_INT 3
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 3
40662: NEG
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 3
40673: NEG
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 3
40685: NEG
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 3
40697: NEG
40698: PUSH
40699: LD_INT 3
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40738: LD_ADDR_VAR 0 45
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: LD_INT 3
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: LD_INT 3
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: LD_INT 3
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: LD_INT 2
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 3
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 3
40984: PUSH
40985: LD_INT 3
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: LD_INT 3
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 3
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 3
41035: NEG
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 3
41047: NEG
41048: PUSH
41049: LD_INT 3
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41088: LD_ADDR_VAR 0 46
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 3
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 3
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 3
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 3
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 3
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 3
41384: NEG
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 3
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41436: LD_ADDR_VAR 0 47
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41587: LD_ADDR_VAR 0 48
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: LD_INT 2
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41734: LD_ADDR_VAR 0 49
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41878: LD_ADDR_VAR 0 50
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 2
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42022: LD_ADDR_VAR 0 51
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42169: LD_ADDR_VAR 0 52
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: NEG
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 2
42296: NEG
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42320: LD_ADDR_VAR 0 53
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42550: LD_ADDR_VAR 0 54
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: LD_INT 2
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 2
42726: NEG
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42780: LD_ADDR_VAR 0 55
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 2
42979: NEG
42980: PUSH
42981: LD_INT 2
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43010: LD_ADDR_VAR 0 56
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43240: LD_ADDR_VAR 0 57
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43470: LD_ADDR_VAR 0 58
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43700: LD_ADDR_VAR 0 59
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43788: LD_ADDR_VAR 0 60
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43876: LD_ADDR_VAR 0 61
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43964: LD_ADDR_VAR 0 62
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44052: LD_ADDR_VAR 0 63
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44140: LD_ADDR_VAR 0 64
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: ST_TO_ADDR
// end ; 1 :
44228: GO 50125
44230: LD_INT 1
44232: DOUBLE
44233: EQUAL
44234: IFTRUE 44238
44236: GO 46861
44238: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44239: LD_ADDR_VAR 0 11
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 3
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 3
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44283: LD_ADDR_VAR 0 12
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 3
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 3
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44324: LD_ADDR_VAR 0 13
44328: PUSH
44329: LD_INT 3
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 3
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: LD_INT 3
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44364: LD_ADDR_VAR 0 14
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 3
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 3
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44405: LD_ADDR_VAR 0 15
44409: PUSH
44410: LD_INT 2
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 3
44423: NEG
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 3
44434: NEG
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44449: LD_ADDR_VAR 0 16
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 3
44468: NEG
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 3
44480: NEG
44481: PUSH
44482: LD_INT 3
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: LIST
44494: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44495: LD_ADDR_VAR 0 17
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 3
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 3
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44539: LD_ADDR_VAR 0 18
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 3
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44580: LD_ADDR_VAR 0 19
44584: PUSH
44585: LD_INT 3
44587: PUSH
44588: LD_INT 2
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 3
44597: PUSH
44598: LD_INT 3
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: LD_INT 3
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44620: LD_ADDR_VAR 0 20
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44661: LD_ADDR_VAR 0 21
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: NEG
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 3
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44705: LD_ADDR_VAR 0 22
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 3
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 3
44724: NEG
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: LD_INT 3
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44751: LD_ADDR_VAR 0 23
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 3
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 4
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44795: LD_ADDR_VAR 0 24
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 3
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 4
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44836: LD_ADDR_VAR 0 25
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: LD_INT 3
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 4
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: LD_INT 4
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44876: LD_ADDR_VAR 0 26
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 3
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 4
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 3
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44917: LD_ADDR_VAR 0 27
44921: PUSH
44922: LD_INT 3
44924: NEG
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 4
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44961: LD_ADDR_VAR 0 28
44965: PUSH
44966: LD_INT 3
44968: NEG
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 3
44980: NEG
44981: PUSH
44982: LD_INT 4
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 4
44992: NEG
44993: PUSH
44994: LD_INT 3
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45007: LD_ADDR_VAR 0 29
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: LD_INT 3
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 3
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 4
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 4
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 3
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 5
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 5
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 4
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 6
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 6
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 5
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45162: LD_ADDR_VAR 0 30
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 3
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 4
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 4
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 4
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 5
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 5
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 5
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 6
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 6
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45305: LD_ADDR_VAR 0 31
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: LD_INT 3
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 3
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 4
45342: PUSH
45343: LD_INT 3
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 4
45352: PUSH
45353: LD_INT 4
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 3
45362: PUSH
45363: LD_INT 4
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 5
45372: PUSH
45373: LD_INT 4
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 5
45382: PUSH
45383: LD_INT 5
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 4
45392: PUSH
45393: LD_INT 5
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 6
45402: PUSH
45403: LD_INT 5
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 6
45412: PUSH
45413: LD_INT 6
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 5
45422: PUSH
45423: LD_INT 6
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45444: LD_ADDR_VAR 0 32
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 3
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 4
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 4
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 5
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 5
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 4
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 6
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 6
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: LD_INT 5
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45587: LD_ADDR_VAR 0 33
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 3
45605: NEG
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 3
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 3
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 4
45639: NEG
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 4
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 4
45662: NEG
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 5
45673: NEG
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 5
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 5
45696: NEG
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 6
45707: NEG
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 6
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45742: LD_ADDR_VAR 0 34
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: LD_INT 3
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 3
45761: NEG
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 3
45773: NEG
45774: PUSH
45775: LD_INT 3
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 3
45785: NEG
45786: PUSH
45787: LD_INT 4
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 4
45797: NEG
45798: PUSH
45799: LD_INT 3
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 4
45809: NEG
45810: PUSH
45811: LD_INT 4
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 4
45821: NEG
45822: PUSH
45823: LD_INT 5
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 5
45833: NEG
45834: PUSH
45835: LD_INT 4
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 5
45845: NEG
45846: PUSH
45847: LD_INT 5
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 5
45857: NEG
45858: PUSH
45859: LD_INT 6
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 6
45869: NEG
45870: PUSH
45871: LD_INT 5
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 6
45881: NEG
45882: PUSH
45883: LD_INT 6
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45905: LD_ADDR_VAR 0 41
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 3
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45949: LD_ADDR_VAR 0 42
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45990: LD_ADDR_VAR 0 43
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46030: LD_ADDR_VAR 0 44
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46071: LD_ADDR_VAR 0 45
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: NEG
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 3
46100: NEG
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: LIST
46114: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46115: LD_ADDR_VAR 0 46
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: LD_INT 2
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: LD_INT 3
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 3
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46161: LD_ADDR_VAR 0 47
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 3
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 3
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46194: LD_ADDR_VAR 0 48
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46225: LD_ADDR_VAR 0 49
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: LD_INT 2
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46254: LD_ADDR_VAR 0 50
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46283: LD_ADDR_VAR 0 51
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46314: LD_ADDR_VAR 0 52
46318: PUSH
46319: LD_INT 3
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46347: LD_ADDR_VAR 0 53
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 3
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46391: LD_ADDR_VAR 0 54
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 3
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 3
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46432: LD_ADDR_VAR 0 55
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46472: LD_ADDR_VAR 0 56
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46513: LD_ADDR_VAR 0 57
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46557: LD_ADDR_VAR 0 58
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 3
46588: NEG
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: LIST
46602: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46603: LD_ADDR_VAR 0 59
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46647: LD_ADDR_VAR 0 60
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46688: LD_ADDR_VAR 0 61
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46728: LD_ADDR_VAR 0 62
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46769: LD_ADDR_VAR 0 63
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46813: LD_ADDR_VAR 0 64
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: ST_TO_ADDR
// end ; 2 :
46859: GO 50125
46861: LD_INT 2
46863: DOUBLE
46864: EQUAL
46865: IFTRUE 46869
46867: GO 50124
46869: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46870: LD_ADDR_VAR 0 29
46874: PUSH
46875: LD_INT 4
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 4
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 5
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 5
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 4
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 3
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 3
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 5
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: LD_INT 3
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 4
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 4
47000: PUSH
47001: LD_INT 4
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 3
47010: PUSH
47011: LD_INT 4
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 4
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 4
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 4
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: LD_INT 4
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 5
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 5
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 4
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: LD_INT 3
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: LD_INT 5
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: LD_INT 3
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 3
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 3
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 4
47209: NEG
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 4
47220: NEG
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 4
47232: NEG
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 4
47255: NEG
47256: PUSH
47257: LD_INT 4
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 4
47267: NEG
47268: PUSH
47269: LD_INT 5
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 3
47279: NEG
47280: PUSH
47281: LD_INT 4
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 3
47291: NEG
47292: PUSH
47293: LD_INT 3
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 4
47303: NEG
47304: PUSH
47305: LD_INT 3
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 5
47315: NEG
47316: PUSH
47317: LD_INT 4
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 5
47327: NEG
47328: PUSH
47329: LD_INT 5
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: LD_INT 5
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 5
47351: NEG
47352: PUSH
47353: LD_INT 3
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47408: LD_ADDR_VAR 0 30
47412: PUSH
47413: LD_INT 4
47415: PUSH
47416: LD_INT 4
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 4
47425: PUSH
47426: LD_INT 3
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 5
47435: PUSH
47436: LD_INT 4
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 5
47445: PUSH
47446: LD_INT 5
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 4
47455: PUSH
47456: LD_INT 5
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: LD_INT 4
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 3
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 5
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: PUSH
47496: LD_INT 5
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 3
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 4
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 4
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 3
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 4
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 4
47598: NEG
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 4
47609: NEG
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 3
47621: NEG
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 3
47632: NEG
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 4
47643: NEG
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 5
47654: NEG
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 5
47665: NEG
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 5
47677: NEG
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: NEG
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 3
47700: NEG
47701: PUSH
47702: LD_INT 3
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 3
47712: NEG
47713: PUSH
47714: LD_INT 4
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: LD_INT 3
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 4
47760: NEG
47761: PUSH
47762: LD_INT 3
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 4
47772: NEG
47773: PUSH
47774: LD_INT 4
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: LD_INT 4
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 4
47796: NEG
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 4
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 5
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 4
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 3
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 3
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 4
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 5
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 3
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: LD_INT 5
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47955: LD_ADDR_VAR 0 31
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 4
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: LD_INT 3
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 4
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 5
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 5
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 4
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: LD_INT 5
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 3
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 3
48055: NEG
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: NEG
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 4
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 4
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 4
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 4
48157: NEG
48158: PUSH
48159: LD_INT 4
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 4
48169: NEG
48170: PUSH
48171: LD_INT 5
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: LD_INT 4
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 3
48193: NEG
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 4
48205: NEG
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 5
48217: NEG
48218: PUSH
48219: LD_INT 4
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 5
48229: NEG
48230: PUSH
48231: LD_INT 5
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 3
48241: NEG
48242: PUSH
48243: LD_INT 5
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 5
48253: NEG
48254: PUSH
48255: LD_INT 3
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 3
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 4
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 4
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 4
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 4
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 5
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 5
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 4
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 5
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48505: LD_ADDR_VAR 0 32
48509: PUSH
48510: LD_INT 4
48512: NEG
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 4
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: NEG
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 4
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 5
48568: NEG
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 5
48579: NEG
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 5
48591: NEG
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 3
48614: NEG
48615: PUSH
48616: LD_INT 3
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: LD_INT 4
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 4
48674: NEG
48675: PUSH
48676: LD_INT 3
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 4
48686: NEG
48687: PUSH
48688: LD_INT 4
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 4
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 4
48710: NEG
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 4
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 5
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: LD_INT 4
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 3
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 3
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 4
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 5
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 3
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 5
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 3
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 4
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 4
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 3
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 4
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 4
48917: PUSH
48918: LD_INT 4
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 4
48927: PUSH
48928: LD_INT 3
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 5
48937: PUSH
48938: LD_INT 4
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 5
48947: PUSH
48948: LD_INT 5
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 4
48957: PUSH
48958: LD_INT 5
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: LD_INT 4
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: PUSH
48978: LD_INT 3
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 5
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 3
48997: PUSH
48998: LD_INT 5
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49052: LD_ADDR_VAR 0 33
49056: PUSH
49057: LD_INT 4
49059: NEG
49060: PUSH
49061: LD_INT 4
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 4
49071: NEG
49072: PUSH
49073: LD_INT 5
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: LD_INT 4
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 3
49095: NEG
49096: PUSH
49097: LD_INT 3
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 4
49107: NEG
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 5
49119: NEG
49120: PUSH
49121: LD_INT 4
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 5
49131: NEG
49132: PUSH
49133: LD_INT 5
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: LD_INT 5
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 5
49155: NEG
49156: PUSH
49157: LD_INT 3
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 4
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 3
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 4
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: LD_INT 4
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 4
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 4
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 5
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 5
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 4
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 5
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: LD_INT 3
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 4
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 4
49392: PUSH
49393: LD_INT 4
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: LD_INT 4
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 3
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 4
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 4
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 4
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 3
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 4
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 5
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 5
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 4
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 3
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: LD_INT 5
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 3
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49590: LD_ADDR_VAR 0 34
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 4
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 5
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 4
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 3
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 4
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 5
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: LD_INT 5
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 4
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 4
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 4
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 4
49792: PUSH
49793: LD_INT 4
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 4
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 5
49812: PUSH
49813: LD_INT 4
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 5
49822: PUSH
49823: LD_INT 5
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 4
49832: PUSH
49833: LD_INT 5
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: LD_INT 4
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 5
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: LD_INT 5
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 4
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 4
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 3
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 4
49975: NEG
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 4
49986: NEG
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 3
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 4
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 5
50031: NEG
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 5
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 5
50054: NEG
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 3
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: ST_TO_ADDR
// end ; end ;
50122: GO 50125
50124: POP
// case btype of b_depot , b_warehouse :
50125: LD_VAR 0 1
50129: PUSH
50130: LD_INT 0
50132: DOUBLE
50133: EQUAL
50134: IFTRUE 50144
50136: LD_INT 1
50138: DOUBLE
50139: EQUAL
50140: IFTRUE 50144
50142: GO 50345
50144: POP
// case nation of nation_american :
50145: LD_VAR 0 5
50149: PUSH
50150: LD_INT 1
50152: DOUBLE
50153: EQUAL
50154: IFTRUE 50158
50156: GO 50214
50158: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50159: LD_ADDR_VAR 0 9
50163: PUSH
50164: LD_VAR 0 11
50168: PUSH
50169: LD_VAR 0 12
50173: PUSH
50174: LD_VAR 0 13
50178: PUSH
50179: LD_VAR 0 14
50183: PUSH
50184: LD_VAR 0 15
50188: PUSH
50189: LD_VAR 0 16
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: PUSH
50202: LD_VAR 0 4
50206: PUSH
50207: LD_INT 1
50209: PLUS
50210: ARRAY
50211: ST_TO_ADDR
50212: GO 50343
50214: LD_INT 2
50216: DOUBLE
50217: EQUAL
50218: IFTRUE 50222
50220: GO 50278
50222: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50223: LD_ADDR_VAR 0 9
50227: PUSH
50228: LD_VAR 0 17
50232: PUSH
50233: LD_VAR 0 18
50237: PUSH
50238: LD_VAR 0 19
50242: PUSH
50243: LD_VAR 0 20
50247: PUSH
50248: LD_VAR 0 21
50252: PUSH
50253: LD_VAR 0 22
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: PUSH
50266: LD_VAR 0 4
50270: PUSH
50271: LD_INT 1
50273: PLUS
50274: ARRAY
50275: ST_TO_ADDR
50276: GO 50343
50278: LD_INT 3
50280: DOUBLE
50281: EQUAL
50282: IFTRUE 50286
50284: GO 50342
50286: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50287: LD_ADDR_VAR 0 9
50291: PUSH
50292: LD_VAR 0 23
50296: PUSH
50297: LD_VAR 0 24
50301: PUSH
50302: LD_VAR 0 25
50306: PUSH
50307: LD_VAR 0 26
50311: PUSH
50312: LD_VAR 0 27
50316: PUSH
50317: LD_VAR 0 28
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: PUSH
50330: LD_VAR 0 4
50334: PUSH
50335: LD_INT 1
50337: PLUS
50338: ARRAY
50339: ST_TO_ADDR
50340: GO 50343
50342: POP
50343: GO 50898
50345: LD_INT 2
50347: DOUBLE
50348: EQUAL
50349: IFTRUE 50359
50351: LD_INT 3
50353: DOUBLE
50354: EQUAL
50355: IFTRUE 50359
50357: GO 50415
50359: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50360: LD_ADDR_VAR 0 9
50364: PUSH
50365: LD_VAR 0 29
50369: PUSH
50370: LD_VAR 0 30
50374: PUSH
50375: LD_VAR 0 31
50379: PUSH
50380: LD_VAR 0 32
50384: PUSH
50385: LD_VAR 0 33
50389: PUSH
50390: LD_VAR 0 34
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: PUSH
50403: LD_VAR 0 4
50407: PUSH
50408: LD_INT 1
50410: PLUS
50411: ARRAY
50412: ST_TO_ADDR
50413: GO 50898
50415: LD_INT 16
50417: DOUBLE
50418: EQUAL
50419: IFTRUE 50477
50421: LD_INT 17
50423: DOUBLE
50424: EQUAL
50425: IFTRUE 50477
50427: LD_INT 18
50429: DOUBLE
50430: EQUAL
50431: IFTRUE 50477
50433: LD_INT 19
50435: DOUBLE
50436: EQUAL
50437: IFTRUE 50477
50439: LD_INT 22
50441: DOUBLE
50442: EQUAL
50443: IFTRUE 50477
50445: LD_INT 20
50447: DOUBLE
50448: EQUAL
50449: IFTRUE 50477
50451: LD_INT 21
50453: DOUBLE
50454: EQUAL
50455: IFTRUE 50477
50457: LD_INT 23
50459: DOUBLE
50460: EQUAL
50461: IFTRUE 50477
50463: LD_INT 24
50465: DOUBLE
50466: EQUAL
50467: IFTRUE 50477
50469: LD_INT 25
50471: DOUBLE
50472: EQUAL
50473: IFTRUE 50477
50475: GO 50533
50477: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50478: LD_ADDR_VAR 0 9
50482: PUSH
50483: LD_VAR 0 35
50487: PUSH
50488: LD_VAR 0 36
50492: PUSH
50493: LD_VAR 0 37
50497: PUSH
50498: LD_VAR 0 38
50502: PUSH
50503: LD_VAR 0 39
50507: PUSH
50508: LD_VAR 0 40
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: PUSH
50521: LD_VAR 0 4
50525: PUSH
50526: LD_INT 1
50528: PLUS
50529: ARRAY
50530: ST_TO_ADDR
50531: GO 50898
50533: LD_INT 6
50535: DOUBLE
50536: EQUAL
50537: IFTRUE 50589
50539: LD_INT 7
50541: DOUBLE
50542: EQUAL
50543: IFTRUE 50589
50545: LD_INT 8
50547: DOUBLE
50548: EQUAL
50549: IFTRUE 50589
50551: LD_INT 13
50553: DOUBLE
50554: EQUAL
50555: IFTRUE 50589
50557: LD_INT 12
50559: DOUBLE
50560: EQUAL
50561: IFTRUE 50589
50563: LD_INT 15
50565: DOUBLE
50566: EQUAL
50567: IFTRUE 50589
50569: LD_INT 11
50571: DOUBLE
50572: EQUAL
50573: IFTRUE 50589
50575: LD_INT 14
50577: DOUBLE
50578: EQUAL
50579: IFTRUE 50589
50581: LD_INT 10
50583: DOUBLE
50584: EQUAL
50585: IFTRUE 50589
50587: GO 50645
50589: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50590: LD_ADDR_VAR 0 9
50594: PUSH
50595: LD_VAR 0 41
50599: PUSH
50600: LD_VAR 0 42
50604: PUSH
50605: LD_VAR 0 43
50609: PUSH
50610: LD_VAR 0 44
50614: PUSH
50615: LD_VAR 0 45
50619: PUSH
50620: LD_VAR 0 46
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: PUSH
50633: LD_VAR 0 4
50637: PUSH
50638: LD_INT 1
50640: PLUS
50641: ARRAY
50642: ST_TO_ADDR
50643: GO 50898
50645: LD_INT 36
50647: DOUBLE
50648: EQUAL
50649: IFTRUE 50653
50651: GO 50709
50653: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50654: LD_ADDR_VAR 0 9
50658: PUSH
50659: LD_VAR 0 47
50663: PUSH
50664: LD_VAR 0 48
50668: PUSH
50669: LD_VAR 0 49
50673: PUSH
50674: LD_VAR 0 50
50678: PUSH
50679: LD_VAR 0 51
50683: PUSH
50684: LD_VAR 0 52
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: PUSH
50697: LD_VAR 0 4
50701: PUSH
50702: LD_INT 1
50704: PLUS
50705: ARRAY
50706: ST_TO_ADDR
50707: GO 50898
50709: LD_INT 4
50711: DOUBLE
50712: EQUAL
50713: IFTRUE 50735
50715: LD_INT 5
50717: DOUBLE
50718: EQUAL
50719: IFTRUE 50735
50721: LD_INT 34
50723: DOUBLE
50724: EQUAL
50725: IFTRUE 50735
50727: LD_INT 37
50729: DOUBLE
50730: EQUAL
50731: IFTRUE 50735
50733: GO 50791
50735: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50736: LD_ADDR_VAR 0 9
50740: PUSH
50741: LD_VAR 0 53
50745: PUSH
50746: LD_VAR 0 54
50750: PUSH
50751: LD_VAR 0 55
50755: PUSH
50756: LD_VAR 0 56
50760: PUSH
50761: LD_VAR 0 57
50765: PUSH
50766: LD_VAR 0 58
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: PUSH
50779: LD_VAR 0 4
50783: PUSH
50784: LD_INT 1
50786: PLUS
50787: ARRAY
50788: ST_TO_ADDR
50789: GO 50898
50791: LD_INT 31
50793: DOUBLE
50794: EQUAL
50795: IFTRUE 50841
50797: LD_INT 32
50799: DOUBLE
50800: EQUAL
50801: IFTRUE 50841
50803: LD_INT 33
50805: DOUBLE
50806: EQUAL
50807: IFTRUE 50841
50809: LD_INT 27
50811: DOUBLE
50812: EQUAL
50813: IFTRUE 50841
50815: LD_INT 26
50817: DOUBLE
50818: EQUAL
50819: IFTRUE 50841
50821: LD_INT 28
50823: DOUBLE
50824: EQUAL
50825: IFTRUE 50841
50827: LD_INT 29
50829: DOUBLE
50830: EQUAL
50831: IFTRUE 50841
50833: LD_INT 30
50835: DOUBLE
50836: EQUAL
50837: IFTRUE 50841
50839: GO 50897
50841: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50842: LD_ADDR_VAR 0 9
50846: PUSH
50847: LD_VAR 0 59
50851: PUSH
50852: LD_VAR 0 60
50856: PUSH
50857: LD_VAR 0 61
50861: PUSH
50862: LD_VAR 0 62
50866: PUSH
50867: LD_VAR 0 63
50871: PUSH
50872: LD_VAR 0 64
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: PUSH
50885: LD_VAR 0 4
50889: PUSH
50890: LD_INT 1
50892: PLUS
50893: ARRAY
50894: ST_TO_ADDR
50895: GO 50898
50897: POP
// temp_list2 = [ ] ;
50898: LD_ADDR_VAR 0 10
50902: PUSH
50903: EMPTY
50904: ST_TO_ADDR
// for i in temp_list do
50905: LD_ADDR_VAR 0 8
50909: PUSH
50910: LD_VAR 0 9
50914: PUSH
50915: FOR_IN
50916: IFFALSE 50968
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50918: LD_ADDR_VAR 0 10
50922: PUSH
50923: LD_VAR 0 10
50927: PUSH
50928: LD_VAR 0 8
50932: PUSH
50933: LD_INT 1
50935: ARRAY
50936: PUSH
50937: LD_VAR 0 2
50941: PLUS
50942: PUSH
50943: LD_VAR 0 8
50947: PUSH
50948: LD_INT 2
50950: ARRAY
50951: PUSH
50952: LD_VAR 0 3
50956: PLUS
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: ADD
50965: ST_TO_ADDR
50966: GO 50915
50968: POP
50969: POP
// result = temp_list2 ;
50970: LD_ADDR_VAR 0 7
50974: PUSH
50975: LD_VAR 0 10
50979: ST_TO_ADDR
// end ;
50980: LD_VAR 0 7
50984: RET
// export function EnemyInRange ( unit , dist ) ; begin
50985: LD_INT 0
50987: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50988: LD_ADDR_VAR 0 3
50992: PUSH
50993: LD_VAR 0 1
50997: PPUSH
50998: CALL_OW 255
51002: PPUSH
51003: LD_VAR 0 1
51007: PPUSH
51008: CALL_OW 250
51012: PPUSH
51013: LD_VAR 0 1
51017: PPUSH
51018: CALL_OW 251
51022: PPUSH
51023: LD_VAR 0 2
51027: PPUSH
51028: CALL 25089 0 4
51032: PUSH
51033: LD_INT 4
51035: ARRAY
51036: ST_TO_ADDR
// end ;
51037: LD_VAR 0 3
51041: RET
// export function PlayerSeeMe ( unit ) ; begin
51042: LD_INT 0
51044: PPUSH
// result := See ( your_side , unit ) ;
51045: LD_ADDR_VAR 0 2
51049: PUSH
51050: LD_OWVAR 2
51054: PPUSH
51055: LD_VAR 0 1
51059: PPUSH
51060: CALL_OW 292
51064: ST_TO_ADDR
// end ;
51065: LD_VAR 0 2
51069: RET
// export function ReverseDir ( unit ) ; begin
51070: LD_INT 0
51072: PPUSH
// if not unit then
51073: LD_VAR 0 1
51077: NOT
51078: IFFALSE 51082
// exit ;
51080: GO 51105
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51082: LD_ADDR_VAR 0 2
51086: PUSH
51087: LD_VAR 0 1
51091: PPUSH
51092: CALL_OW 254
51096: PUSH
51097: LD_INT 3
51099: PLUS
51100: PUSH
51101: LD_INT 6
51103: MOD
51104: ST_TO_ADDR
// end ;
51105: LD_VAR 0 2
51109: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51110: LD_INT 0
51112: PPUSH
51113: PPUSH
51114: PPUSH
51115: PPUSH
51116: PPUSH
// if not hexes then
51117: LD_VAR 0 2
51121: NOT
51122: IFFALSE 51126
// exit ;
51124: GO 51274
// dist := 9999 ;
51126: LD_ADDR_VAR 0 5
51130: PUSH
51131: LD_INT 9999
51133: ST_TO_ADDR
// for i = 1 to hexes do
51134: LD_ADDR_VAR 0 4
51138: PUSH
51139: DOUBLE
51140: LD_INT 1
51142: DEC
51143: ST_TO_ADDR
51144: LD_VAR 0 2
51148: PUSH
51149: FOR_TO
51150: IFFALSE 51262
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51152: LD_VAR 0 1
51156: PPUSH
51157: LD_VAR 0 2
51161: PUSH
51162: LD_VAR 0 4
51166: ARRAY
51167: PUSH
51168: LD_INT 1
51170: ARRAY
51171: PPUSH
51172: LD_VAR 0 2
51176: PUSH
51177: LD_VAR 0 4
51181: ARRAY
51182: PUSH
51183: LD_INT 2
51185: ARRAY
51186: PPUSH
51187: CALL_OW 297
51191: PUSH
51192: LD_VAR 0 5
51196: LESS
51197: IFFALSE 51260
// begin hex := hexes [ i ] ;
51199: LD_ADDR_VAR 0 7
51203: PUSH
51204: LD_VAR 0 2
51208: PUSH
51209: LD_VAR 0 4
51213: ARRAY
51214: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51215: LD_ADDR_VAR 0 5
51219: PUSH
51220: LD_VAR 0 1
51224: PPUSH
51225: LD_VAR 0 2
51229: PUSH
51230: LD_VAR 0 4
51234: ARRAY
51235: PUSH
51236: LD_INT 1
51238: ARRAY
51239: PPUSH
51240: LD_VAR 0 2
51244: PUSH
51245: LD_VAR 0 4
51249: ARRAY
51250: PUSH
51251: LD_INT 2
51253: ARRAY
51254: PPUSH
51255: CALL_OW 297
51259: ST_TO_ADDR
// end ; end ;
51260: GO 51149
51262: POP
51263: POP
// result := hex ;
51264: LD_ADDR_VAR 0 3
51268: PUSH
51269: LD_VAR 0 7
51273: ST_TO_ADDR
// end ;
51274: LD_VAR 0 3
51278: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51279: LD_INT 0
51281: PPUSH
51282: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51283: LD_VAR 0 1
51287: NOT
51288: PUSH
51289: LD_VAR 0 1
51293: PUSH
51294: LD_INT 21
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 23
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PPUSH
51318: CALL_OW 69
51322: IN
51323: NOT
51324: OR
51325: IFFALSE 51329
// exit ;
51327: GO 51376
// for i = 1 to 3 do
51329: LD_ADDR_VAR 0 3
51333: PUSH
51334: DOUBLE
51335: LD_INT 1
51337: DEC
51338: ST_TO_ADDR
51339: LD_INT 3
51341: PUSH
51342: FOR_TO
51343: IFFALSE 51374
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51345: LD_VAR 0 1
51349: PPUSH
51350: CALL_OW 250
51354: PPUSH
51355: LD_VAR 0 1
51359: PPUSH
51360: CALL_OW 251
51364: PPUSH
51365: LD_INT 1
51367: PPUSH
51368: CALL_OW 453
51372: GO 51342
51374: POP
51375: POP
// end ;
51376: LD_VAR 0 2
51380: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51381: LD_INT 0
51383: PPUSH
51384: PPUSH
51385: PPUSH
51386: PPUSH
51387: PPUSH
51388: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51389: LD_VAR 0 1
51393: NOT
51394: PUSH
51395: LD_VAR 0 2
51399: NOT
51400: OR
51401: PUSH
51402: LD_VAR 0 1
51406: PPUSH
51407: CALL_OW 314
51411: OR
51412: IFFALSE 51416
// exit ;
51414: GO 51857
// x := GetX ( enemy_unit ) ;
51416: LD_ADDR_VAR 0 7
51420: PUSH
51421: LD_VAR 0 2
51425: PPUSH
51426: CALL_OW 250
51430: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51431: LD_ADDR_VAR 0 8
51435: PUSH
51436: LD_VAR 0 2
51440: PPUSH
51441: CALL_OW 251
51445: ST_TO_ADDR
// if not x or not y then
51446: LD_VAR 0 7
51450: NOT
51451: PUSH
51452: LD_VAR 0 8
51456: NOT
51457: OR
51458: IFFALSE 51462
// exit ;
51460: GO 51857
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51462: LD_ADDR_VAR 0 6
51466: PUSH
51467: LD_VAR 0 7
51471: PPUSH
51472: LD_INT 0
51474: PPUSH
51475: LD_INT 4
51477: PPUSH
51478: CALL_OW 272
51482: PUSH
51483: LD_VAR 0 8
51487: PPUSH
51488: LD_INT 0
51490: PPUSH
51491: LD_INT 4
51493: PPUSH
51494: CALL_OW 273
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_VAR 0 7
51507: PPUSH
51508: LD_INT 1
51510: PPUSH
51511: LD_INT 4
51513: PPUSH
51514: CALL_OW 272
51518: PUSH
51519: LD_VAR 0 8
51523: PPUSH
51524: LD_INT 1
51526: PPUSH
51527: LD_INT 4
51529: PPUSH
51530: CALL_OW 273
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_VAR 0 7
51543: PPUSH
51544: LD_INT 2
51546: PPUSH
51547: LD_INT 4
51549: PPUSH
51550: CALL_OW 272
51554: PUSH
51555: LD_VAR 0 8
51559: PPUSH
51560: LD_INT 2
51562: PPUSH
51563: LD_INT 4
51565: PPUSH
51566: CALL_OW 273
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_VAR 0 7
51579: PPUSH
51580: LD_INT 3
51582: PPUSH
51583: LD_INT 4
51585: PPUSH
51586: CALL_OW 272
51590: PUSH
51591: LD_VAR 0 8
51595: PPUSH
51596: LD_INT 3
51598: PPUSH
51599: LD_INT 4
51601: PPUSH
51602: CALL_OW 273
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_VAR 0 7
51615: PPUSH
51616: LD_INT 4
51618: PPUSH
51619: LD_INT 4
51621: PPUSH
51622: CALL_OW 272
51626: PUSH
51627: LD_VAR 0 8
51631: PPUSH
51632: LD_INT 4
51634: PPUSH
51635: LD_INT 4
51637: PPUSH
51638: CALL_OW 273
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_VAR 0 7
51651: PPUSH
51652: LD_INT 5
51654: PPUSH
51655: LD_INT 4
51657: PPUSH
51658: CALL_OW 272
51662: PUSH
51663: LD_VAR 0 8
51667: PPUSH
51668: LD_INT 5
51670: PPUSH
51671: LD_INT 4
51673: PPUSH
51674: CALL_OW 273
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: ST_TO_ADDR
// for i = tmp downto 1 do
51691: LD_ADDR_VAR 0 4
51695: PUSH
51696: DOUBLE
51697: LD_VAR 0 6
51701: INC
51702: ST_TO_ADDR
51703: LD_INT 1
51705: PUSH
51706: FOR_DOWNTO
51707: IFFALSE 51808
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51709: LD_VAR 0 6
51713: PUSH
51714: LD_VAR 0 4
51718: ARRAY
51719: PUSH
51720: LD_INT 1
51722: ARRAY
51723: PPUSH
51724: LD_VAR 0 6
51728: PUSH
51729: LD_VAR 0 4
51733: ARRAY
51734: PUSH
51735: LD_INT 2
51737: ARRAY
51738: PPUSH
51739: CALL_OW 488
51743: NOT
51744: PUSH
51745: LD_VAR 0 6
51749: PUSH
51750: LD_VAR 0 4
51754: ARRAY
51755: PUSH
51756: LD_INT 1
51758: ARRAY
51759: PPUSH
51760: LD_VAR 0 6
51764: PUSH
51765: LD_VAR 0 4
51769: ARRAY
51770: PUSH
51771: LD_INT 2
51773: ARRAY
51774: PPUSH
51775: CALL_OW 428
51779: PUSH
51780: LD_INT 0
51782: NONEQUAL
51783: OR
51784: IFFALSE 51806
// tmp := Delete ( tmp , i ) ;
51786: LD_ADDR_VAR 0 6
51790: PUSH
51791: LD_VAR 0 6
51795: PPUSH
51796: LD_VAR 0 4
51800: PPUSH
51801: CALL_OW 3
51805: ST_TO_ADDR
51806: GO 51706
51808: POP
51809: POP
// j := GetClosestHex ( unit , tmp ) ;
51810: LD_ADDR_VAR 0 5
51814: PUSH
51815: LD_VAR 0 1
51819: PPUSH
51820: LD_VAR 0 6
51824: PPUSH
51825: CALL 51110 0 2
51829: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51830: LD_VAR 0 1
51834: PPUSH
51835: LD_VAR 0 5
51839: PUSH
51840: LD_INT 1
51842: ARRAY
51843: PPUSH
51844: LD_VAR 0 5
51848: PUSH
51849: LD_INT 2
51851: ARRAY
51852: PPUSH
51853: CALL_OW 111
// end ;
51857: LD_VAR 0 3
51861: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51862: LD_INT 0
51864: PPUSH
51865: PPUSH
51866: PPUSH
// uc_side = 0 ;
51867: LD_ADDR_OWVAR 20
51871: PUSH
51872: LD_INT 0
51874: ST_TO_ADDR
// uc_nation = 0 ;
51875: LD_ADDR_OWVAR 21
51879: PUSH
51880: LD_INT 0
51882: ST_TO_ADDR
// InitHc_All ( ) ;
51883: CALL_OW 584
// InitVc ;
51887: CALL_OW 20
// if mastodonts then
51891: LD_VAR 0 6
51895: IFFALSE 51962
// for i = 1 to mastodonts do
51897: LD_ADDR_VAR 0 11
51901: PUSH
51902: DOUBLE
51903: LD_INT 1
51905: DEC
51906: ST_TO_ADDR
51907: LD_VAR 0 6
51911: PUSH
51912: FOR_TO
51913: IFFALSE 51960
// begin vc_chassis := 31 ;
51915: LD_ADDR_OWVAR 37
51919: PUSH
51920: LD_INT 31
51922: ST_TO_ADDR
// vc_control := control_rider ;
51923: LD_ADDR_OWVAR 38
51927: PUSH
51928: LD_INT 4
51930: ST_TO_ADDR
// animal := CreateVehicle ;
51931: LD_ADDR_VAR 0 12
51935: PUSH
51936: CALL_OW 45
51940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51941: LD_VAR 0 12
51945: PPUSH
51946: LD_VAR 0 8
51950: PPUSH
51951: LD_INT 0
51953: PPUSH
51954: CALL 54150 0 3
// end ;
51958: GO 51912
51960: POP
51961: POP
// if horses then
51962: LD_VAR 0 5
51966: IFFALSE 52033
// for i = 1 to horses do
51968: LD_ADDR_VAR 0 11
51972: PUSH
51973: DOUBLE
51974: LD_INT 1
51976: DEC
51977: ST_TO_ADDR
51978: LD_VAR 0 5
51982: PUSH
51983: FOR_TO
51984: IFFALSE 52031
// begin hc_class := 21 ;
51986: LD_ADDR_OWVAR 28
51990: PUSH
51991: LD_INT 21
51993: ST_TO_ADDR
// hc_gallery :=  ;
51994: LD_ADDR_OWVAR 33
51998: PUSH
51999: LD_STRING 
52001: ST_TO_ADDR
// animal := CreateHuman ;
52002: LD_ADDR_VAR 0 12
52006: PUSH
52007: CALL_OW 44
52011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52012: LD_VAR 0 12
52016: PPUSH
52017: LD_VAR 0 8
52021: PPUSH
52022: LD_INT 0
52024: PPUSH
52025: CALL 54150 0 3
// end ;
52029: GO 51983
52031: POP
52032: POP
// if birds then
52033: LD_VAR 0 1
52037: IFFALSE 52104
// for i = 1 to birds do
52039: LD_ADDR_VAR 0 11
52043: PUSH
52044: DOUBLE
52045: LD_INT 1
52047: DEC
52048: ST_TO_ADDR
52049: LD_VAR 0 1
52053: PUSH
52054: FOR_TO
52055: IFFALSE 52102
// begin hc_class = 18 ;
52057: LD_ADDR_OWVAR 28
52061: PUSH
52062: LD_INT 18
52064: ST_TO_ADDR
// hc_gallery =  ;
52065: LD_ADDR_OWVAR 33
52069: PUSH
52070: LD_STRING 
52072: ST_TO_ADDR
// animal := CreateHuman ;
52073: LD_ADDR_VAR 0 12
52077: PUSH
52078: CALL_OW 44
52082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52083: LD_VAR 0 12
52087: PPUSH
52088: LD_VAR 0 8
52092: PPUSH
52093: LD_INT 0
52095: PPUSH
52096: CALL 54150 0 3
// end ;
52100: GO 52054
52102: POP
52103: POP
// if tigers then
52104: LD_VAR 0 2
52108: IFFALSE 52192
// for i = 1 to tigers do
52110: LD_ADDR_VAR 0 11
52114: PUSH
52115: DOUBLE
52116: LD_INT 1
52118: DEC
52119: ST_TO_ADDR
52120: LD_VAR 0 2
52124: PUSH
52125: FOR_TO
52126: IFFALSE 52190
// begin hc_class = class_tiger ;
52128: LD_ADDR_OWVAR 28
52132: PUSH
52133: LD_INT 14
52135: ST_TO_ADDR
// hc_gallery =  ;
52136: LD_ADDR_OWVAR 33
52140: PUSH
52141: LD_STRING 
52143: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52144: LD_ADDR_OWVAR 35
52148: PUSH
52149: LD_INT 7
52151: NEG
52152: PPUSH
52153: LD_INT 7
52155: PPUSH
52156: CALL_OW 12
52160: ST_TO_ADDR
// animal := CreateHuman ;
52161: LD_ADDR_VAR 0 12
52165: PUSH
52166: CALL_OW 44
52170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52171: LD_VAR 0 12
52175: PPUSH
52176: LD_VAR 0 8
52180: PPUSH
52181: LD_INT 0
52183: PPUSH
52184: CALL 54150 0 3
// end ;
52188: GO 52125
52190: POP
52191: POP
// if apemans then
52192: LD_VAR 0 3
52196: IFFALSE 52319
// for i = 1 to apemans do
52198: LD_ADDR_VAR 0 11
52202: PUSH
52203: DOUBLE
52204: LD_INT 1
52206: DEC
52207: ST_TO_ADDR
52208: LD_VAR 0 3
52212: PUSH
52213: FOR_TO
52214: IFFALSE 52317
// begin hc_class = class_apeman ;
52216: LD_ADDR_OWVAR 28
52220: PUSH
52221: LD_INT 12
52223: ST_TO_ADDR
// hc_gallery =  ;
52224: LD_ADDR_OWVAR 33
52228: PUSH
52229: LD_STRING 
52231: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52232: LD_ADDR_OWVAR 35
52236: PUSH
52237: LD_INT 5
52239: NEG
52240: PPUSH
52241: LD_INT 5
52243: PPUSH
52244: CALL_OW 12
52248: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52249: LD_ADDR_OWVAR 31
52253: PUSH
52254: LD_INT 1
52256: PPUSH
52257: LD_INT 3
52259: PPUSH
52260: CALL_OW 12
52264: PUSH
52265: LD_INT 1
52267: PPUSH
52268: LD_INT 3
52270: PPUSH
52271: CALL_OW 12
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: ST_TO_ADDR
// animal := CreateHuman ;
52288: LD_ADDR_VAR 0 12
52292: PUSH
52293: CALL_OW 44
52297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52298: LD_VAR 0 12
52302: PPUSH
52303: LD_VAR 0 8
52307: PPUSH
52308: LD_INT 0
52310: PPUSH
52311: CALL 54150 0 3
// end ;
52315: GO 52213
52317: POP
52318: POP
// if enchidnas then
52319: LD_VAR 0 4
52323: IFFALSE 52390
// for i = 1 to enchidnas do
52325: LD_ADDR_VAR 0 11
52329: PUSH
52330: DOUBLE
52331: LD_INT 1
52333: DEC
52334: ST_TO_ADDR
52335: LD_VAR 0 4
52339: PUSH
52340: FOR_TO
52341: IFFALSE 52388
// begin hc_class = 13 ;
52343: LD_ADDR_OWVAR 28
52347: PUSH
52348: LD_INT 13
52350: ST_TO_ADDR
// hc_gallery =  ;
52351: LD_ADDR_OWVAR 33
52355: PUSH
52356: LD_STRING 
52358: ST_TO_ADDR
// animal := CreateHuman ;
52359: LD_ADDR_VAR 0 12
52363: PUSH
52364: CALL_OW 44
52368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52369: LD_VAR 0 12
52373: PPUSH
52374: LD_VAR 0 8
52378: PPUSH
52379: LD_INT 0
52381: PPUSH
52382: CALL 54150 0 3
// end ;
52386: GO 52340
52388: POP
52389: POP
// if fishes then
52390: LD_VAR 0 7
52394: IFFALSE 52461
// for i = 1 to fishes do
52396: LD_ADDR_VAR 0 11
52400: PUSH
52401: DOUBLE
52402: LD_INT 1
52404: DEC
52405: ST_TO_ADDR
52406: LD_VAR 0 7
52410: PUSH
52411: FOR_TO
52412: IFFALSE 52459
// begin hc_class = 20 ;
52414: LD_ADDR_OWVAR 28
52418: PUSH
52419: LD_INT 20
52421: ST_TO_ADDR
// hc_gallery =  ;
52422: LD_ADDR_OWVAR 33
52426: PUSH
52427: LD_STRING 
52429: ST_TO_ADDR
// animal := CreateHuman ;
52430: LD_ADDR_VAR 0 12
52434: PUSH
52435: CALL_OW 44
52439: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52440: LD_VAR 0 12
52444: PPUSH
52445: LD_VAR 0 9
52449: PPUSH
52450: LD_INT 0
52452: PPUSH
52453: CALL 54150 0 3
// end ;
52457: GO 52411
52459: POP
52460: POP
// end ;
52461: LD_VAR 0 10
52465: RET
// export function WantHeal ( sci , unit ) ; begin
52466: LD_INT 0
52468: PPUSH
// if GetTaskList ( sci ) > 0 then
52469: LD_VAR 0 1
52473: PPUSH
52474: CALL_OW 437
52478: PUSH
52479: LD_INT 0
52481: GREATER
52482: IFFALSE 52552
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52484: LD_VAR 0 1
52488: PPUSH
52489: CALL_OW 437
52493: PUSH
52494: LD_INT 1
52496: ARRAY
52497: PUSH
52498: LD_INT 1
52500: ARRAY
52501: PUSH
52502: LD_STRING l
52504: EQUAL
52505: PUSH
52506: LD_VAR 0 1
52510: PPUSH
52511: CALL_OW 437
52515: PUSH
52516: LD_INT 1
52518: ARRAY
52519: PUSH
52520: LD_INT 4
52522: ARRAY
52523: PUSH
52524: LD_VAR 0 2
52528: EQUAL
52529: AND
52530: IFFALSE 52542
// result := true else
52532: LD_ADDR_VAR 0 3
52536: PUSH
52537: LD_INT 1
52539: ST_TO_ADDR
52540: GO 52550
// result := false ;
52542: LD_ADDR_VAR 0 3
52546: PUSH
52547: LD_INT 0
52549: ST_TO_ADDR
// end else
52550: GO 52560
// result := false ;
52552: LD_ADDR_VAR 0 3
52556: PUSH
52557: LD_INT 0
52559: ST_TO_ADDR
// end ;
52560: LD_VAR 0 3
52564: RET
// export function HealTarget ( sci ) ; begin
52565: LD_INT 0
52567: PPUSH
// if not sci then
52568: LD_VAR 0 1
52572: NOT
52573: IFFALSE 52577
// exit ;
52575: GO 52642
// result := 0 ;
52577: LD_ADDR_VAR 0 2
52581: PUSH
52582: LD_INT 0
52584: ST_TO_ADDR
// if GetTaskList ( sci ) then
52585: LD_VAR 0 1
52589: PPUSH
52590: CALL_OW 437
52594: IFFALSE 52642
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52596: LD_VAR 0 1
52600: PPUSH
52601: CALL_OW 437
52605: PUSH
52606: LD_INT 1
52608: ARRAY
52609: PUSH
52610: LD_INT 1
52612: ARRAY
52613: PUSH
52614: LD_STRING l
52616: EQUAL
52617: IFFALSE 52642
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52619: LD_ADDR_VAR 0 2
52623: PUSH
52624: LD_VAR 0 1
52628: PPUSH
52629: CALL_OW 437
52633: PUSH
52634: LD_INT 1
52636: ARRAY
52637: PUSH
52638: LD_INT 4
52640: ARRAY
52641: ST_TO_ADDR
// end ;
52642: LD_VAR 0 2
52646: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52647: LD_INT 0
52649: PPUSH
52650: PPUSH
52651: PPUSH
52652: PPUSH
// if not base_units then
52653: LD_VAR 0 1
52657: NOT
52658: IFFALSE 52662
// exit ;
52660: GO 52749
// result := false ;
52662: LD_ADDR_VAR 0 2
52666: PUSH
52667: LD_INT 0
52669: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52670: LD_ADDR_VAR 0 5
52674: PUSH
52675: LD_VAR 0 1
52679: PPUSH
52680: LD_INT 21
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PPUSH
52690: CALL_OW 72
52694: ST_TO_ADDR
// if not tmp then
52695: LD_VAR 0 5
52699: NOT
52700: IFFALSE 52704
// exit ;
52702: GO 52749
// for i in tmp do
52704: LD_ADDR_VAR 0 3
52708: PUSH
52709: LD_VAR 0 5
52713: PUSH
52714: FOR_IN
52715: IFFALSE 52747
// begin result := EnemyInRange ( i , 22 ) ;
52717: LD_ADDR_VAR 0 2
52721: PUSH
52722: LD_VAR 0 3
52726: PPUSH
52727: LD_INT 22
52729: PPUSH
52730: CALL 50985 0 2
52734: ST_TO_ADDR
// if result then
52735: LD_VAR 0 2
52739: IFFALSE 52745
// exit ;
52741: POP
52742: POP
52743: GO 52749
// end ;
52745: GO 52714
52747: POP
52748: POP
// end ;
52749: LD_VAR 0 2
52753: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52754: LD_INT 0
52756: PPUSH
52757: PPUSH
// if not units then
52758: LD_VAR 0 1
52762: NOT
52763: IFFALSE 52767
// exit ;
52765: GO 52837
// result := [ ] ;
52767: LD_ADDR_VAR 0 3
52771: PUSH
52772: EMPTY
52773: ST_TO_ADDR
// for i in units do
52774: LD_ADDR_VAR 0 4
52778: PUSH
52779: LD_VAR 0 1
52783: PUSH
52784: FOR_IN
52785: IFFALSE 52835
// if GetTag ( i ) = tag then
52787: LD_VAR 0 4
52791: PPUSH
52792: CALL_OW 110
52796: PUSH
52797: LD_VAR 0 2
52801: EQUAL
52802: IFFALSE 52833
// result := Insert ( result , result + 1 , i ) ;
52804: LD_ADDR_VAR 0 3
52808: PUSH
52809: LD_VAR 0 3
52813: PPUSH
52814: LD_VAR 0 3
52818: PUSH
52819: LD_INT 1
52821: PLUS
52822: PPUSH
52823: LD_VAR 0 4
52827: PPUSH
52828: CALL_OW 2
52832: ST_TO_ADDR
52833: GO 52784
52835: POP
52836: POP
// end ;
52837: LD_VAR 0 3
52841: RET
// export function IsDriver ( un ) ; begin
52842: LD_INT 0
52844: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52845: LD_ADDR_VAR 0 2
52849: PUSH
52850: LD_VAR 0 1
52854: PUSH
52855: LD_INT 55
52857: PUSH
52858: EMPTY
52859: LIST
52860: PPUSH
52861: CALL_OW 69
52865: IN
52866: ST_TO_ADDR
// end ;
52867: LD_VAR 0 2
52871: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52872: LD_INT 0
52874: PPUSH
52875: PPUSH
// list := [ ] ;
52876: LD_ADDR_VAR 0 5
52880: PUSH
52881: EMPTY
52882: ST_TO_ADDR
// case d of 0 :
52883: LD_VAR 0 3
52887: PUSH
52888: LD_INT 0
52890: DOUBLE
52891: EQUAL
52892: IFTRUE 52896
52894: GO 53029
52896: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52897: LD_ADDR_VAR 0 5
52901: PUSH
52902: LD_VAR 0 1
52906: PUSH
52907: LD_INT 4
52909: MINUS
52910: PUSH
52911: LD_VAR 0 2
52915: PUSH
52916: LD_INT 4
52918: MINUS
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: LIST
52927: PUSH
52928: LD_VAR 0 1
52932: PUSH
52933: LD_INT 3
52935: MINUS
52936: PUSH
52937: LD_VAR 0 2
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: PUSH
52950: LD_VAR 0 1
52954: PUSH
52955: LD_INT 4
52957: PLUS
52958: PUSH
52959: LD_VAR 0 2
52963: PUSH
52964: LD_INT 4
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: LIST
52971: PUSH
52972: LD_VAR 0 1
52976: PUSH
52977: LD_INT 3
52979: PLUS
52980: PUSH
52981: LD_VAR 0 2
52985: PUSH
52986: LD_INT 3
52988: PLUS
52989: PUSH
52990: LD_INT 5
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: PUSH
52998: LD_VAR 0 1
53002: PUSH
53003: LD_VAR 0 2
53007: PUSH
53008: LD_INT 4
53010: PLUS
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: ST_TO_ADDR
// end ; 1 :
53027: GO 53727
53029: LD_INT 1
53031: DOUBLE
53032: EQUAL
53033: IFTRUE 53037
53035: GO 53170
53037: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53038: LD_ADDR_VAR 0 5
53042: PUSH
53043: LD_VAR 0 1
53047: PUSH
53048: LD_VAR 0 2
53052: PUSH
53053: LD_INT 4
53055: MINUS
53056: PUSH
53057: LD_INT 3
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: LIST
53064: PUSH
53065: LD_VAR 0 1
53069: PUSH
53070: LD_INT 3
53072: MINUS
53073: PUSH
53074: LD_VAR 0 2
53078: PUSH
53079: LD_INT 3
53081: MINUS
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: LIST
53090: PUSH
53091: LD_VAR 0 1
53095: PUSH
53096: LD_INT 4
53098: MINUS
53099: PUSH
53100: LD_VAR 0 2
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: PUSH
53113: LD_VAR 0 1
53117: PUSH
53118: LD_VAR 0 2
53122: PUSH
53123: LD_INT 3
53125: PLUS
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: PUSH
53135: LD_VAR 0 1
53139: PUSH
53140: LD_INT 4
53142: PLUS
53143: PUSH
53144: LD_VAR 0 2
53148: PUSH
53149: LD_INT 4
53151: PLUS
53152: PUSH
53153: LD_INT 5
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: ST_TO_ADDR
// end ; 2 :
53168: GO 53727
53170: LD_INT 2
53172: DOUBLE
53173: EQUAL
53174: IFTRUE 53178
53176: GO 53307
53178: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53179: LD_ADDR_VAR 0 5
53183: PUSH
53184: LD_VAR 0 1
53188: PUSH
53189: LD_VAR 0 2
53193: PUSH
53194: LD_INT 3
53196: MINUS
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: PUSH
53206: LD_VAR 0 1
53210: PUSH
53211: LD_INT 4
53213: PLUS
53214: PUSH
53215: LD_VAR 0 2
53219: PUSH
53220: LD_INT 4
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: PUSH
53228: LD_VAR 0 1
53232: PUSH
53233: LD_VAR 0 2
53237: PUSH
53238: LD_INT 4
53240: PLUS
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: PUSH
53250: LD_VAR 0 1
53254: PUSH
53255: LD_INT 3
53257: MINUS
53258: PUSH
53259: LD_VAR 0 2
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: PUSH
53272: LD_VAR 0 1
53276: PUSH
53277: LD_INT 4
53279: MINUS
53280: PUSH
53281: LD_VAR 0 2
53285: PUSH
53286: LD_INT 4
53288: MINUS
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// end ; 3 :
53305: GO 53727
53307: LD_INT 3
53309: DOUBLE
53310: EQUAL
53311: IFTRUE 53315
53313: GO 53448
53315: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53316: LD_ADDR_VAR 0 5
53320: PUSH
53321: LD_VAR 0 1
53325: PUSH
53326: LD_INT 3
53328: PLUS
53329: PUSH
53330: LD_VAR 0 2
53334: PUSH
53335: LD_INT 4
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: LIST
53342: PUSH
53343: LD_VAR 0 1
53347: PUSH
53348: LD_INT 4
53350: PLUS
53351: PUSH
53352: LD_VAR 0 2
53356: PUSH
53357: LD_INT 4
53359: PLUS
53360: PUSH
53361: LD_INT 5
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: PUSH
53369: LD_VAR 0 1
53373: PUSH
53374: LD_INT 4
53376: MINUS
53377: PUSH
53378: LD_VAR 0 2
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: PUSH
53391: LD_VAR 0 1
53395: PUSH
53396: LD_VAR 0 2
53400: PUSH
53401: LD_INT 4
53403: MINUS
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: LIST
53412: PUSH
53413: LD_VAR 0 1
53417: PUSH
53418: LD_INT 3
53420: MINUS
53421: PUSH
53422: LD_VAR 0 2
53426: PUSH
53427: LD_INT 3
53429: MINUS
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// end ; 4 :
53446: GO 53727
53448: LD_INT 4
53450: DOUBLE
53451: EQUAL
53452: IFTRUE 53456
53454: GO 53589
53456: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53457: LD_ADDR_VAR 0 5
53461: PUSH
53462: LD_VAR 0 1
53466: PUSH
53467: LD_VAR 0 2
53471: PUSH
53472: LD_INT 4
53474: PLUS
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: LIST
53483: PUSH
53484: LD_VAR 0 1
53488: PUSH
53489: LD_INT 3
53491: PLUS
53492: PUSH
53493: LD_VAR 0 2
53497: PUSH
53498: LD_INT 3
53500: PLUS
53501: PUSH
53502: LD_INT 5
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: PUSH
53510: LD_VAR 0 1
53514: PUSH
53515: LD_INT 4
53517: PLUS
53518: PUSH
53519: LD_VAR 0 2
53523: PUSH
53524: LD_INT 4
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: LIST
53531: PUSH
53532: LD_VAR 0 1
53536: PUSH
53537: LD_VAR 0 2
53541: PUSH
53542: LD_INT 3
53544: MINUS
53545: PUSH
53546: LD_INT 3
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: LIST
53553: PUSH
53554: LD_VAR 0 1
53558: PUSH
53559: LD_INT 4
53561: MINUS
53562: PUSH
53563: LD_VAR 0 2
53567: PUSH
53568: LD_INT 4
53570: MINUS
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: LIST
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: ST_TO_ADDR
// end ; 5 :
53587: GO 53727
53589: LD_INT 5
53591: DOUBLE
53592: EQUAL
53593: IFTRUE 53597
53595: GO 53726
53597: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53598: LD_ADDR_VAR 0 5
53602: PUSH
53603: LD_VAR 0 1
53607: PUSH
53608: LD_INT 4
53610: MINUS
53611: PUSH
53612: LD_VAR 0 2
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: PUSH
53625: LD_VAR 0 1
53629: PUSH
53630: LD_VAR 0 2
53634: PUSH
53635: LD_INT 4
53637: MINUS
53638: PUSH
53639: LD_INT 3
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: LIST
53646: PUSH
53647: LD_VAR 0 1
53651: PUSH
53652: LD_INT 4
53654: PLUS
53655: PUSH
53656: LD_VAR 0 2
53660: PUSH
53661: LD_INT 4
53663: PLUS
53664: PUSH
53665: LD_INT 5
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: PUSH
53673: LD_VAR 0 1
53677: PUSH
53678: LD_INT 3
53680: PLUS
53681: PUSH
53682: LD_VAR 0 2
53686: PUSH
53687: LD_INT 4
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: PUSH
53695: LD_VAR 0 1
53699: PUSH
53700: LD_VAR 0 2
53704: PUSH
53705: LD_INT 3
53707: PLUS
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: LIST
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// end ; end ;
53724: GO 53727
53726: POP
// result := list ;
53727: LD_ADDR_VAR 0 4
53731: PUSH
53732: LD_VAR 0 5
53736: ST_TO_ADDR
// end ;
53737: LD_VAR 0 4
53741: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53742: LD_INT 0
53744: PPUSH
53745: PPUSH
53746: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53747: LD_VAR 0 1
53751: NOT
53752: PUSH
53753: LD_VAR 0 2
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 3
53766: PUSH
53767: LD_INT 4
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: IN
53776: NOT
53777: OR
53778: IFFALSE 53782
// exit ;
53780: GO 53874
// tmp := [ ] ;
53782: LD_ADDR_VAR 0 5
53786: PUSH
53787: EMPTY
53788: ST_TO_ADDR
// for i in units do
53789: LD_ADDR_VAR 0 4
53793: PUSH
53794: LD_VAR 0 1
53798: PUSH
53799: FOR_IN
53800: IFFALSE 53843
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53802: LD_ADDR_VAR 0 5
53806: PUSH
53807: LD_VAR 0 5
53811: PPUSH
53812: LD_VAR 0 5
53816: PUSH
53817: LD_INT 1
53819: PLUS
53820: PPUSH
53821: LD_VAR 0 4
53825: PPUSH
53826: LD_VAR 0 2
53830: PPUSH
53831: CALL_OW 259
53835: PPUSH
53836: CALL_OW 2
53840: ST_TO_ADDR
53841: GO 53799
53843: POP
53844: POP
// if not tmp then
53845: LD_VAR 0 5
53849: NOT
53850: IFFALSE 53854
// exit ;
53852: GO 53874
// result := SortListByListDesc ( units , tmp ) ;
53854: LD_ADDR_VAR 0 3
53858: PUSH
53859: LD_VAR 0 1
53863: PPUSH
53864: LD_VAR 0 5
53868: PPUSH
53869: CALL_OW 77
53873: ST_TO_ADDR
// end ;
53874: LD_VAR 0 3
53878: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53879: LD_INT 0
53881: PPUSH
53882: PPUSH
53883: PPUSH
// result := false ;
53884: LD_ADDR_VAR 0 3
53888: PUSH
53889: LD_INT 0
53891: ST_TO_ADDR
// x := GetX ( building ) ;
53892: LD_ADDR_VAR 0 4
53896: PUSH
53897: LD_VAR 0 2
53901: PPUSH
53902: CALL_OW 250
53906: ST_TO_ADDR
// y := GetY ( building ) ;
53907: LD_ADDR_VAR 0 5
53911: PUSH
53912: LD_VAR 0 2
53916: PPUSH
53917: CALL_OW 251
53921: ST_TO_ADDR
// if not building or not x or not y then
53922: LD_VAR 0 2
53926: NOT
53927: PUSH
53928: LD_VAR 0 4
53932: NOT
53933: OR
53934: PUSH
53935: LD_VAR 0 5
53939: NOT
53940: OR
53941: IFFALSE 53945
// exit ;
53943: GO 54037
// if GetTaskList ( unit ) then
53945: LD_VAR 0 1
53949: PPUSH
53950: CALL_OW 437
53954: IFFALSE 54037
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53956: LD_STRING e
53958: PUSH
53959: LD_VAR 0 1
53963: PPUSH
53964: CALL_OW 437
53968: PUSH
53969: LD_INT 1
53971: ARRAY
53972: PUSH
53973: LD_INT 1
53975: ARRAY
53976: EQUAL
53977: PUSH
53978: LD_VAR 0 4
53982: PUSH
53983: LD_VAR 0 1
53987: PPUSH
53988: CALL_OW 437
53992: PUSH
53993: LD_INT 1
53995: ARRAY
53996: PUSH
53997: LD_INT 2
53999: ARRAY
54000: EQUAL
54001: AND
54002: PUSH
54003: LD_VAR 0 5
54007: PUSH
54008: LD_VAR 0 1
54012: PPUSH
54013: CALL_OW 437
54017: PUSH
54018: LD_INT 1
54020: ARRAY
54021: PUSH
54022: LD_INT 3
54024: ARRAY
54025: EQUAL
54026: AND
54027: IFFALSE 54037
// result := true end ;
54029: LD_ADDR_VAR 0 3
54033: PUSH
54034: LD_INT 1
54036: ST_TO_ADDR
// end ;
54037: LD_VAR 0 3
54041: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54042: LD_INT 0
54044: PPUSH
// result := false ;
54045: LD_ADDR_VAR 0 4
54049: PUSH
54050: LD_INT 0
54052: ST_TO_ADDR
// if GetTaskList ( unit ) then
54053: LD_VAR 0 1
54057: PPUSH
54058: CALL_OW 437
54062: IFFALSE 54145
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54064: LD_STRING M
54066: PUSH
54067: LD_VAR 0 1
54071: PPUSH
54072: CALL_OW 437
54076: PUSH
54077: LD_INT 1
54079: ARRAY
54080: PUSH
54081: LD_INT 1
54083: ARRAY
54084: EQUAL
54085: PUSH
54086: LD_VAR 0 2
54090: PUSH
54091: LD_VAR 0 1
54095: PPUSH
54096: CALL_OW 437
54100: PUSH
54101: LD_INT 1
54103: ARRAY
54104: PUSH
54105: LD_INT 2
54107: ARRAY
54108: EQUAL
54109: AND
54110: PUSH
54111: LD_VAR 0 3
54115: PUSH
54116: LD_VAR 0 1
54120: PPUSH
54121: CALL_OW 437
54125: PUSH
54126: LD_INT 1
54128: ARRAY
54129: PUSH
54130: LD_INT 3
54132: ARRAY
54133: EQUAL
54134: AND
54135: IFFALSE 54145
// result := true ;
54137: LD_ADDR_VAR 0 4
54141: PUSH
54142: LD_INT 1
54144: ST_TO_ADDR
// end ; end ;
54145: LD_VAR 0 4
54149: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54150: LD_INT 0
54152: PPUSH
54153: PPUSH
54154: PPUSH
54155: PPUSH
// if not unit or not area then
54156: LD_VAR 0 1
54160: NOT
54161: PUSH
54162: LD_VAR 0 2
54166: NOT
54167: OR
54168: IFFALSE 54172
// exit ;
54170: GO 54336
// tmp := AreaToList ( area , i ) ;
54172: LD_ADDR_VAR 0 6
54176: PUSH
54177: LD_VAR 0 2
54181: PPUSH
54182: LD_VAR 0 5
54186: PPUSH
54187: CALL_OW 517
54191: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54192: LD_ADDR_VAR 0 5
54196: PUSH
54197: DOUBLE
54198: LD_INT 1
54200: DEC
54201: ST_TO_ADDR
54202: LD_VAR 0 6
54206: PUSH
54207: LD_INT 1
54209: ARRAY
54210: PUSH
54211: FOR_TO
54212: IFFALSE 54334
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54214: LD_ADDR_VAR 0 7
54218: PUSH
54219: LD_VAR 0 6
54223: PUSH
54224: LD_INT 1
54226: ARRAY
54227: PUSH
54228: LD_VAR 0 5
54232: ARRAY
54233: PUSH
54234: LD_VAR 0 6
54238: PUSH
54239: LD_INT 2
54241: ARRAY
54242: PUSH
54243: LD_VAR 0 5
54247: ARRAY
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54253: LD_VAR 0 7
54257: PUSH
54258: LD_INT 1
54260: ARRAY
54261: PPUSH
54262: LD_VAR 0 7
54266: PUSH
54267: LD_INT 2
54269: ARRAY
54270: PPUSH
54271: CALL_OW 428
54275: PUSH
54276: LD_INT 0
54278: EQUAL
54279: IFFALSE 54332
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54281: LD_VAR 0 1
54285: PPUSH
54286: LD_VAR 0 7
54290: PUSH
54291: LD_INT 1
54293: ARRAY
54294: PPUSH
54295: LD_VAR 0 7
54299: PUSH
54300: LD_INT 2
54302: ARRAY
54303: PPUSH
54304: LD_VAR 0 3
54308: PPUSH
54309: CALL_OW 48
// result := IsPlaced ( unit ) ;
54313: LD_ADDR_VAR 0 4
54317: PUSH
54318: LD_VAR 0 1
54322: PPUSH
54323: CALL_OW 305
54327: ST_TO_ADDR
// exit ;
54328: POP
54329: POP
54330: GO 54336
// end ; end ;
54332: GO 54211
54334: POP
54335: POP
// end ;
54336: LD_VAR 0 4
54340: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54341: LD_INT 0
54343: PPUSH
54344: PPUSH
54345: PPUSH
// if not side or side > 8 then
54346: LD_VAR 0 1
54350: NOT
54351: PUSH
54352: LD_VAR 0 1
54356: PUSH
54357: LD_INT 8
54359: GREATER
54360: OR
54361: IFFALSE 54365
// exit ;
54363: GO 54552
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54365: LD_ADDR_VAR 0 4
54369: PUSH
54370: LD_INT 22
54372: PUSH
54373: LD_VAR 0 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 21
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PPUSH
54396: CALL_OW 69
54400: ST_TO_ADDR
// if not tmp then
54401: LD_VAR 0 4
54405: NOT
54406: IFFALSE 54410
// exit ;
54408: GO 54552
// enable_addtolog := true ;
54410: LD_ADDR_OWVAR 81
54414: PUSH
54415: LD_INT 1
54417: ST_TO_ADDR
// AddToLog ( [ ) ;
54418: LD_STRING [
54420: PPUSH
54421: CALL_OW 561
// for i in tmp do
54425: LD_ADDR_VAR 0 3
54429: PUSH
54430: LD_VAR 0 4
54434: PUSH
54435: FOR_IN
54436: IFFALSE 54543
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54438: LD_STRING [
54440: PUSH
54441: LD_VAR 0 3
54445: PPUSH
54446: CALL_OW 266
54450: STR
54451: PUSH
54452: LD_STRING , 
54454: STR
54455: PUSH
54456: LD_VAR 0 3
54460: PPUSH
54461: CALL_OW 250
54465: STR
54466: PUSH
54467: LD_STRING , 
54469: STR
54470: PUSH
54471: LD_VAR 0 3
54475: PPUSH
54476: CALL_OW 251
54480: STR
54481: PUSH
54482: LD_STRING , 
54484: STR
54485: PUSH
54486: LD_VAR 0 3
54490: PPUSH
54491: CALL_OW 254
54495: STR
54496: PUSH
54497: LD_STRING , 
54499: STR
54500: PUSH
54501: LD_VAR 0 3
54505: PPUSH
54506: LD_INT 1
54508: PPUSH
54509: CALL_OW 268
54513: STR
54514: PUSH
54515: LD_STRING , 
54517: STR
54518: PUSH
54519: LD_VAR 0 3
54523: PPUSH
54524: LD_INT 2
54526: PPUSH
54527: CALL_OW 268
54531: STR
54532: PUSH
54533: LD_STRING ],
54535: STR
54536: PPUSH
54537: CALL_OW 561
// end ;
54541: GO 54435
54543: POP
54544: POP
// AddToLog ( ]; ) ;
54545: LD_STRING ];
54547: PPUSH
54548: CALL_OW 561
// end ;
54552: LD_VAR 0 2
54556: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54557: LD_INT 0
54559: PPUSH
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
// if not area or not rate or not max then
54564: LD_VAR 0 1
54568: NOT
54569: PUSH
54570: LD_VAR 0 2
54574: NOT
54575: OR
54576: PUSH
54577: LD_VAR 0 4
54581: NOT
54582: OR
54583: IFFALSE 54587
// exit ;
54585: GO 54779
// while 1 do
54587: LD_INT 1
54589: IFFALSE 54779
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54591: LD_ADDR_VAR 0 9
54595: PUSH
54596: LD_VAR 0 1
54600: PPUSH
54601: LD_INT 1
54603: PPUSH
54604: CALL_OW 287
54608: PUSH
54609: LD_INT 10
54611: MUL
54612: ST_TO_ADDR
// r := rate / 10 ;
54613: LD_ADDR_VAR 0 7
54617: PUSH
54618: LD_VAR 0 2
54622: PUSH
54623: LD_INT 10
54625: DIVREAL
54626: ST_TO_ADDR
// time := 1 1$00 ;
54627: LD_ADDR_VAR 0 8
54631: PUSH
54632: LD_INT 2100
54634: ST_TO_ADDR
// if amount < min then
54635: LD_VAR 0 9
54639: PUSH
54640: LD_VAR 0 3
54644: LESS
54645: IFFALSE 54663
// r := r * 2 else
54647: LD_ADDR_VAR 0 7
54651: PUSH
54652: LD_VAR 0 7
54656: PUSH
54657: LD_INT 2
54659: MUL
54660: ST_TO_ADDR
54661: GO 54689
// if amount > max then
54663: LD_VAR 0 9
54667: PUSH
54668: LD_VAR 0 4
54672: GREATER
54673: IFFALSE 54689
// r := r / 2 ;
54675: LD_ADDR_VAR 0 7
54679: PUSH
54680: LD_VAR 0 7
54684: PUSH
54685: LD_INT 2
54687: DIVREAL
54688: ST_TO_ADDR
// time := time / r ;
54689: LD_ADDR_VAR 0 8
54693: PUSH
54694: LD_VAR 0 8
54698: PUSH
54699: LD_VAR 0 7
54703: DIVREAL
54704: ST_TO_ADDR
// if time < 0 then
54705: LD_VAR 0 8
54709: PUSH
54710: LD_INT 0
54712: LESS
54713: IFFALSE 54730
// time := time * - 1 ;
54715: LD_ADDR_VAR 0 8
54719: PUSH
54720: LD_VAR 0 8
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: MUL
54729: ST_TO_ADDR
// wait ( time ) ;
54730: LD_VAR 0 8
54734: PPUSH
54735: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54739: LD_INT 35
54741: PPUSH
54742: LD_INT 875
54744: PPUSH
54745: CALL_OW 12
54749: PPUSH
54750: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54754: LD_INT 1
54756: PPUSH
54757: LD_INT 5
54759: PPUSH
54760: CALL_OW 12
54764: PPUSH
54765: LD_VAR 0 1
54769: PPUSH
54770: LD_INT 1
54772: PPUSH
54773: CALL_OW 55
// end ;
54777: GO 54587
// end ;
54779: LD_VAR 0 5
54783: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54784: LD_INT 0
54786: PPUSH
54787: PPUSH
54788: PPUSH
54789: PPUSH
54790: PPUSH
54791: PPUSH
54792: PPUSH
54793: PPUSH
// if not turrets or not factories then
54794: LD_VAR 0 1
54798: NOT
54799: PUSH
54800: LD_VAR 0 2
54804: NOT
54805: OR
54806: IFFALSE 54810
// exit ;
54808: GO 55117
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54810: LD_ADDR_VAR 0 10
54814: PUSH
54815: LD_INT 5
54817: PUSH
54818: LD_INT 6
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: LD_INT 4
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: LD_INT 5
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 24
54852: PUSH
54853: LD_INT 25
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 23
54862: PUSH
54863: LD_INT 27
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 42
54876: PUSH
54877: LD_INT 43
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 44
54886: PUSH
54887: LD_INT 46
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 45
54896: PUSH
54897: LD_INT 47
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: ST_TO_ADDR
// result := [ ] ;
54914: LD_ADDR_VAR 0 3
54918: PUSH
54919: EMPTY
54920: ST_TO_ADDR
// for i in turrets do
54921: LD_ADDR_VAR 0 4
54925: PUSH
54926: LD_VAR 0 1
54930: PUSH
54931: FOR_IN
54932: IFFALSE 55115
// begin nat := GetNation ( i ) ;
54934: LD_ADDR_VAR 0 7
54938: PUSH
54939: LD_VAR 0 4
54943: PPUSH
54944: CALL_OW 248
54948: ST_TO_ADDR
// weapon := 0 ;
54949: LD_ADDR_VAR 0 8
54953: PUSH
54954: LD_INT 0
54956: ST_TO_ADDR
// if not nat then
54957: LD_VAR 0 7
54961: NOT
54962: IFFALSE 54966
// continue ;
54964: GO 54931
// for j in list [ nat ] do
54966: LD_ADDR_VAR 0 5
54970: PUSH
54971: LD_VAR 0 10
54975: PUSH
54976: LD_VAR 0 7
54980: ARRAY
54981: PUSH
54982: FOR_IN
54983: IFFALSE 55024
// if GetBWeapon ( i ) = j [ 1 ] then
54985: LD_VAR 0 4
54989: PPUSH
54990: CALL_OW 269
54994: PUSH
54995: LD_VAR 0 5
54999: PUSH
55000: LD_INT 1
55002: ARRAY
55003: EQUAL
55004: IFFALSE 55022
// begin weapon := j [ 2 ] ;
55006: LD_ADDR_VAR 0 8
55010: PUSH
55011: LD_VAR 0 5
55015: PUSH
55016: LD_INT 2
55018: ARRAY
55019: ST_TO_ADDR
// break ;
55020: GO 55024
// end ;
55022: GO 54982
55024: POP
55025: POP
// if not weapon then
55026: LD_VAR 0 8
55030: NOT
55031: IFFALSE 55035
// continue ;
55033: GO 54931
// for k in factories do
55035: LD_ADDR_VAR 0 6
55039: PUSH
55040: LD_VAR 0 2
55044: PUSH
55045: FOR_IN
55046: IFFALSE 55111
// begin weapons := AvailableWeaponList ( k ) ;
55048: LD_ADDR_VAR 0 9
55052: PUSH
55053: LD_VAR 0 6
55057: PPUSH
55058: CALL_OW 478
55062: ST_TO_ADDR
// if not weapons then
55063: LD_VAR 0 9
55067: NOT
55068: IFFALSE 55072
// continue ;
55070: GO 55045
// if weapon in weapons then
55072: LD_VAR 0 8
55076: PUSH
55077: LD_VAR 0 9
55081: IN
55082: IFFALSE 55109
// begin result := [ i , weapon ] ;
55084: LD_ADDR_VAR 0 3
55088: PUSH
55089: LD_VAR 0 4
55093: PUSH
55094: LD_VAR 0 8
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// exit ;
55103: POP
55104: POP
55105: POP
55106: POP
55107: GO 55117
// end ; end ;
55109: GO 55045
55111: POP
55112: POP
// end ;
55113: GO 54931
55115: POP
55116: POP
// end ;
55117: LD_VAR 0 3
55121: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55122: LD_INT 0
55124: PPUSH
// if not side or side > 8 then
55125: LD_VAR 0 3
55129: NOT
55130: PUSH
55131: LD_VAR 0 3
55135: PUSH
55136: LD_INT 8
55138: GREATER
55139: OR
55140: IFFALSE 55144
// exit ;
55142: GO 55203
// if not range then
55144: LD_VAR 0 4
55148: NOT
55149: IFFALSE 55160
// range := - 12 ;
55151: LD_ADDR_VAR 0 4
55155: PUSH
55156: LD_INT 12
55158: NEG
55159: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55160: LD_VAR 0 1
55164: PPUSH
55165: LD_VAR 0 2
55169: PPUSH
55170: LD_VAR 0 3
55174: PPUSH
55175: LD_VAR 0 4
55179: PPUSH
55180: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55184: LD_VAR 0 1
55188: PPUSH
55189: LD_VAR 0 2
55193: PPUSH
55194: LD_VAR 0 3
55198: PPUSH
55199: CALL_OW 331
// end ;
55203: LD_VAR 0 5
55207: RET
// export function Video ( mode ) ; begin
55208: LD_INT 0
55210: PPUSH
// ingame_video = mode ;
55211: LD_ADDR_OWVAR 52
55215: PUSH
55216: LD_VAR 0 1
55220: ST_TO_ADDR
// interface_hidden = mode ;
55221: LD_ADDR_OWVAR 54
55225: PUSH
55226: LD_VAR 0 1
55230: ST_TO_ADDR
// end ;
55231: LD_VAR 0 2
55235: RET
// export function Join ( array , element ) ; begin
55236: LD_INT 0
55238: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55239: LD_ADDR_VAR 0 3
55243: PUSH
55244: LD_VAR 0 1
55248: PPUSH
55249: LD_VAR 0 1
55253: PUSH
55254: LD_INT 1
55256: PLUS
55257: PPUSH
55258: LD_VAR 0 2
55262: PPUSH
55263: CALL_OW 1
55267: ST_TO_ADDR
// end ;
55268: LD_VAR 0 3
55272: RET
// export function JoinUnion ( array , element ) ; begin
55273: LD_INT 0
55275: PPUSH
// result := array union element ;
55276: LD_ADDR_VAR 0 3
55280: PUSH
55281: LD_VAR 0 1
55285: PUSH
55286: LD_VAR 0 2
55290: UNION
55291: ST_TO_ADDR
// end ;
55292: LD_VAR 0 3
55296: RET
// export function GetBehemoths ( side ) ; begin
55297: LD_INT 0
55299: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55300: LD_ADDR_VAR 0 2
55304: PUSH
55305: LD_INT 22
55307: PUSH
55308: LD_VAR 0 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 31
55319: PUSH
55320: LD_INT 25
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PPUSH
55331: CALL_OW 69
55335: ST_TO_ADDR
// end ;
55336: LD_VAR 0 2
55340: RET
// export function Shuffle ( array ) ; var i , index ; begin
55341: LD_INT 0
55343: PPUSH
55344: PPUSH
55345: PPUSH
// result := [ ] ;
55346: LD_ADDR_VAR 0 2
55350: PUSH
55351: EMPTY
55352: ST_TO_ADDR
// if not array then
55353: LD_VAR 0 1
55357: NOT
55358: IFFALSE 55362
// exit ;
55360: GO 55461
// Randomize ;
55362: CALL_OW 10
// for i = array downto 1 do
55366: LD_ADDR_VAR 0 3
55370: PUSH
55371: DOUBLE
55372: LD_VAR 0 1
55376: INC
55377: ST_TO_ADDR
55378: LD_INT 1
55380: PUSH
55381: FOR_DOWNTO
55382: IFFALSE 55459
// begin index := rand ( 1 , array ) ;
55384: LD_ADDR_VAR 0 4
55388: PUSH
55389: LD_INT 1
55391: PPUSH
55392: LD_VAR 0 1
55396: PPUSH
55397: CALL_OW 12
55401: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55402: LD_ADDR_VAR 0 2
55406: PUSH
55407: LD_VAR 0 2
55411: PPUSH
55412: LD_VAR 0 2
55416: PUSH
55417: LD_INT 1
55419: PLUS
55420: PPUSH
55421: LD_VAR 0 1
55425: PUSH
55426: LD_VAR 0 4
55430: ARRAY
55431: PPUSH
55432: CALL_OW 2
55436: ST_TO_ADDR
// array := Delete ( array , index ) ;
55437: LD_ADDR_VAR 0 1
55441: PUSH
55442: LD_VAR 0 1
55446: PPUSH
55447: LD_VAR 0 4
55451: PPUSH
55452: CALL_OW 3
55456: ST_TO_ADDR
// end ;
55457: GO 55381
55459: POP
55460: POP
// end ;
55461: LD_VAR 0 2
55465: RET
// export function GetBaseMaterials ( base ) ; begin
55466: LD_INT 0
55468: PPUSH
// result := [ 0 , 0 , 0 ] ;
55469: LD_ADDR_VAR 0 2
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: LIST
55487: ST_TO_ADDR
// if not base then
55488: LD_VAR 0 1
55492: NOT
55493: IFFALSE 55497
// exit ;
55495: GO 55546
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55497: LD_ADDR_VAR 0 2
55501: PUSH
55502: LD_VAR 0 1
55506: PPUSH
55507: LD_INT 1
55509: PPUSH
55510: CALL_OW 275
55514: PUSH
55515: LD_VAR 0 1
55519: PPUSH
55520: LD_INT 2
55522: PPUSH
55523: CALL_OW 275
55527: PUSH
55528: LD_VAR 0 1
55532: PPUSH
55533: LD_INT 3
55535: PPUSH
55536: CALL_OW 275
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: LIST
55545: ST_TO_ADDR
// end ;
55546: LD_VAR 0 2
55550: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55551: LD_INT 0
55553: PPUSH
55554: PPUSH
// result := array ;
55555: LD_ADDR_VAR 0 3
55559: PUSH
55560: LD_VAR 0 1
55564: ST_TO_ADDR
// if size > 0 then
55565: LD_VAR 0 2
55569: PUSH
55570: LD_INT 0
55572: GREATER
55573: IFFALSE 55619
// for i := array downto size do
55575: LD_ADDR_VAR 0 4
55579: PUSH
55580: DOUBLE
55581: LD_VAR 0 1
55585: INC
55586: ST_TO_ADDR
55587: LD_VAR 0 2
55591: PUSH
55592: FOR_DOWNTO
55593: IFFALSE 55617
// result := Delete ( result , result ) ;
55595: LD_ADDR_VAR 0 3
55599: PUSH
55600: LD_VAR 0 3
55604: PPUSH
55605: LD_VAR 0 3
55609: PPUSH
55610: CALL_OW 3
55614: ST_TO_ADDR
55615: GO 55592
55617: POP
55618: POP
// end ;
55619: LD_VAR 0 3
55623: RET
// export function ComExit ( unit ) ; var tmp ; begin
55624: LD_INT 0
55626: PPUSH
55627: PPUSH
// if not IsInUnit ( unit ) then
55628: LD_VAR 0 1
55632: PPUSH
55633: CALL_OW 310
55637: NOT
55638: IFFALSE 55642
// exit ;
55640: GO 55702
// tmp := IsInUnit ( unit ) ;
55642: LD_ADDR_VAR 0 3
55646: PUSH
55647: LD_VAR 0 1
55651: PPUSH
55652: CALL_OW 310
55656: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55657: LD_VAR 0 3
55661: PPUSH
55662: CALL_OW 247
55666: PUSH
55667: LD_INT 2
55669: EQUAL
55670: IFFALSE 55683
// ComExitVehicle ( unit ) else
55672: LD_VAR 0 1
55676: PPUSH
55677: CALL_OW 121
55681: GO 55692
// ComExitBuilding ( unit ) ;
55683: LD_VAR 0 1
55687: PPUSH
55688: CALL_OW 122
// result := tmp ;
55692: LD_ADDR_VAR 0 2
55696: PUSH
55697: LD_VAR 0 3
55701: ST_TO_ADDR
// end ;
55702: LD_VAR 0 2
55706: RET
// export function ResetHc ; begin
55707: LD_INT 0
55709: PPUSH
// InitHc ;
55710: CALL_OW 19
// hc_importance := 0 ;
55714: LD_ADDR_OWVAR 32
55718: PUSH
55719: LD_INT 0
55721: ST_TO_ADDR
// end ;
55722: LD_VAR 0 1
55726: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55727: LD_INT 0
55729: PPUSH
55730: PPUSH
55731: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55732: LD_ADDR_VAR 0 6
55736: PUSH
55737: LD_VAR 0 1
55741: PUSH
55742: LD_VAR 0 3
55746: PLUS
55747: PUSH
55748: LD_INT 2
55750: DIV
55751: ST_TO_ADDR
// if _x < 0 then
55752: LD_VAR 0 6
55756: PUSH
55757: LD_INT 0
55759: LESS
55760: IFFALSE 55777
// _x := _x * - 1 ;
55762: LD_ADDR_VAR 0 6
55766: PUSH
55767: LD_VAR 0 6
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: MUL
55776: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55777: LD_ADDR_VAR 0 7
55781: PUSH
55782: LD_VAR 0 2
55786: PUSH
55787: LD_VAR 0 4
55791: PLUS
55792: PUSH
55793: LD_INT 2
55795: DIV
55796: ST_TO_ADDR
// if _y < 0 then
55797: LD_VAR 0 7
55801: PUSH
55802: LD_INT 0
55804: LESS
55805: IFFALSE 55822
// _y := _y * - 1 ;
55807: LD_ADDR_VAR 0 7
55811: PUSH
55812: LD_VAR 0 7
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: MUL
55821: ST_TO_ADDR
// result := [ _x , _y ] ;
55822: LD_ADDR_VAR 0 5
55826: PUSH
55827: LD_VAR 0 6
55831: PUSH
55832: LD_VAR 0 7
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: ST_TO_ADDR
// end ;
55841: LD_VAR 0 5
55845: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55846: LD_INT 0
55848: PPUSH
55849: PPUSH
55850: PPUSH
55851: PPUSH
// task := GetTaskList ( unit ) ;
55852: LD_ADDR_VAR 0 7
55856: PUSH
55857: LD_VAR 0 1
55861: PPUSH
55862: CALL_OW 437
55866: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55867: LD_VAR 0 7
55871: NOT
55872: PUSH
55873: LD_VAR 0 1
55877: PPUSH
55878: LD_VAR 0 2
55882: PPUSH
55883: CALL_OW 308
55887: NOT
55888: AND
55889: IFFALSE 55893
// exit ;
55891: GO 56011
// if IsInArea ( unit , area ) then
55893: LD_VAR 0 1
55897: PPUSH
55898: LD_VAR 0 2
55902: PPUSH
55903: CALL_OW 308
55907: IFFALSE 55925
// begin ComMoveToArea ( unit , goAway ) ;
55909: LD_VAR 0 1
55913: PPUSH
55914: LD_VAR 0 3
55918: PPUSH
55919: CALL_OW 113
// exit ;
55923: GO 56011
// end ; if task [ 1 ] [ 1 ] <> M then
55925: LD_VAR 0 7
55929: PUSH
55930: LD_INT 1
55932: ARRAY
55933: PUSH
55934: LD_INT 1
55936: ARRAY
55937: PUSH
55938: LD_STRING M
55940: NONEQUAL
55941: IFFALSE 55945
// exit ;
55943: GO 56011
// x := task [ 1 ] [ 2 ] ;
55945: LD_ADDR_VAR 0 5
55949: PUSH
55950: LD_VAR 0 7
55954: PUSH
55955: LD_INT 1
55957: ARRAY
55958: PUSH
55959: LD_INT 2
55961: ARRAY
55962: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55963: LD_ADDR_VAR 0 6
55967: PUSH
55968: LD_VAR 0 7
55972: PUSH
55973: LD_INT 1
55975: ARRAY
55976: PUSH
55977: LD_INT 3
55979: ARRAY
55980: ST_TO_ADDR
// if InArea ( x , y , area ) then
55981: LD_VAR 0 5
55985: PPUSH
55986: LD_VAR 0 6
55990: PPUSH
55991: LD_VAR 0 2
55995: PPUSH
55996: CALL_OW 309
56000: IFFALSE 56011
// ComStop ( unit ) ;
56002: LD_VAR 0 1
56006: PPUSH
56007: CALL_OW 141
// end ;
56011: LD_VAR 0 4
56015: RET
// export function Abs ( value ) ; begin
56016: LD_INT 0
56018: PPUSH
// result := value ;
56019: LD_ADDR_VAR 0 2
56023: PUSH
56024: LD_VAR 0 1
56028: ST_TO_ADDR
// if value < 0 then
56029: LD_VAR 0 1
56033: PUSH
56034: LD_INT 0
56036: LESS
56037: IFFALSE 56054
// result := value * - 1 ;
56039: LD_ADDR_VAR 0 2
56043: PUSH
56044: LD_VAR 0 1
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: MUL
56053: ST_TO_ADDR
// end ;
56054: LD_VAR 0 2
56058: RET
