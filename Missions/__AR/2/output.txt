// every 0 0$1 do
   0: GO 2
   2: DISABLE
// begin ComNearbyEntrance ( a4 , axc ) ;
   3: LD_INT 27
   5: PPUSH
   6: LD_INT 24
   8: PPUSH
   9: CALL 56073 0 2
// end ;
  13: END
// export function Attack ( attackers , attackFormula , retreatFormula , captureTanks ) ; var i , j , tag , sol , sci , mech , tanks , veh ; begin
  14: LD_INT 0
  16: PPUSH
  17: PPUSH
  18: PPUSH
  19: PPUSH
  20: PPUSH
  21: PPUSH
  22: PPUSH
  23: PPUSH
  24: PPUSH
// if not attackFormula then
  25: LD_VAR 0 2
  29: NOT
  30: IFFALSE 34
// exit ;
  32: GO 1825
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
  34: LD_ADDR_VAR 0 9
  38: PUSH
  39: LD_VAR 0 1
  43: PPUSH
  44: LD_INT 25
  46: PUSH
  47: LD_INT 1
  49: PUSH
  50: EMPTY
  51: LIST
  52: LIST
  53: PPUSH
  54: CALL_OW 72
  58: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
  59: LD_ADDR_VAR 0 10
  63: PUSH
  64: LD_VAR 0 1
  68: PPUSH
  69: LD_INT 25
  71: PUSH
  72: LD_INT 4
  74: PUSH
  75: EMPTY
  76: LIST
  77: LIST
  78: PPUSH
  79: CALL_OW 72
  83: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
  84: LD_ADDR_VAR 0 11
  88: PUSH
  89: LD_VAR 0 1
  93: PPUSH
  94: LD_INT 25
  96: PUSH
  97: LD_INT 3
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: PPUSH
 104: CALL_OW 72
 108: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
 109: LD_ADDR_VAR 0 12
 113: PUSH
 114: LD_VAR 0 1
 118: PPUSH
 119: LD_INT 21
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PPUSH
 129: CALL_OW 72
 133: ST_TO_ADDR
// if sci then
 134: LD_VAR 0 10
 138: IFFALSE 175
// ComMoveXY ( sci , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 140: LD_VAR 0 10
 144: PPUSH
 145: LD_VAR 0 2
 149: PUSH
 150: LD_INT 2
 152: ARRAY
 153: PUSH
 154: LD_INT 1
 156: ARRAY
 157: PPUSH
 158: LD_VAR 0 2
 162: PUSH
 163: LD_INT 2
 165: ARRAY
 166: PUSH
 167: LD_INT 2
 169: ARRAY
 170: PPUSH
 171: CALL_OW 111
// repeat wait ( 10 ) ;
 175: LD_INT 10
 177: PPUSH
 178: CALL_OW 67
// sol := UnitFilter ( attackers , [ f_class , 1 ] ) ;
 182: LD_ADDR_VAR 0 9
 186: PUSH
 187: LD_VAR 0 1
 191: PPUSH
 192: LD_INT 25
 194: PUSH
 195: LD_INT 1
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PPUSH
 202: CALL_OW 72
 206: ST_TO_ADDR
// sci := UnitFilter ( attackers , [ f_class , 4 ] ) ;
 207: LD_ADDR_VAR 0 10
 211: PUSH
 212: LD_VAR 0 1
 216: PPUSH
 217: LD_INT 25
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 72
 231: ST_TO_ADDR
// mech := UnitFilter ( attackers , [ f_class , 3 ] ) ;
 232: LD_ADDR_VAR 0 11
 236: PUSH
 237: LD_VAR 0 1
 241: PPUSH
 242: LD_INT 25
 244: PUSH
 245: LD_INT 3
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PPUSH
 252: CALL_OW 72
 256: ST_TO_ADDR
// tanks := UnitFilter ( attackers , [ f_type , unit_vehicle ] ) ;
 257: LD_ADDR_VAR 0 12
 261: PUSH
 262: LD_VAR 0 1
 266: PPUSH
 267: LD_INT 21
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PPUSH
 277: CALL_OW 72
 281: ST_TO_ADDR
// if sol then
 282: LD_VAR 0 9
 286: IFFALSE 856
// begin for i in sol do
 288: LD_ADDR_VAR 0 6
 292: PUSH
 293: LD_VAR 0 9
 297: PUSH
 298: FOR_IN
 299: IFFALSE 854
// begin tag := GetTag ( i ) ;
 301: LD_ADDR_VAR 0 8
 305: PUSH
 306: LD_VAR 0 6
 310: PPUSH
 311: CALL_OW 110
 315: ST_TO_ADDR
// if not tag then
 316: LD_VAR 0 8
 320: NOT
 321: IFFALSE 430
// begin if GetLives ( i ) = 1000 then
 323: LD_VAR 0 6
 327: PPUSH
 328: CALL_OW 256
 332: PUSH
 333: LD_INT 1000
 335: EQUAL
 336: IFFALSE 352
// SetTag ( i , 1 ) else
 338: LD_VAR 0 6
 342: PPUSH
 343: LD_INT 1
 345: PPUSH
 346: CALL_OW 109
 350: GO 428
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 352: LD_VAR 0 6
 356: PPUSH
 357: LD_VAR 0 2
 361: PUSH
 362: LD_INT 2
 364: ARRAY
 365: PUSH
 366: LD_INT 1
 368: ARRAY
 369: PPUSH
 370: LD_VAR 0 2
 374: PUSH
 375: LD_INT 2
 377: ARRAY
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PPUSH
 383: CALL_OW 297
 387: PUSH
 388: LD_INT 10
 390: GREATER
 391: IFFALSE 428
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 393: LD_VAR 0 6
 397: PPUSH
 398: LD_VAR 0 2
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PUSH
 407: LD_INT 1
 409: ARRAY
 410: PPUSH
 411: LD_VAR 0 2
 415: PUSH
 416: LD_INT 2
 418: ARRAY
 419: PUSH
 420: LD_INT 2
 422: ARRAY
 423: PPUSH
 424: CALL_OW 111
// end else
 428: GO 852
// begin if GetLives ( i ) < 720 then
 430: LD_VAR 0 6
 434: PPUSH
 435: CALL_OW 256
 439: PUSH
 440: LD_INT 720
 442: LESS
 443: IFFALSE 494
// begin SetTag ( i , 0 ) ;
 445: LD_VAR 0 6
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 109
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) ;
 457: LD_VAR 0 6
 461: PPUSH
 462: LD_VAR 0 2
 466: PUSH
 467: LD_INT 2
 469: ARRAY
 470: PUSH
 471: LD_INT 1
 473: ARRAY
 474: PPUSH
 475: LD_VAR 0 2
 479: PUSH
 480: LD_INT 2
 482: ARRAY
 483: PUSH
 484: LD_INT 2
 486: ARRAY
 487: PPUSH
 488: CALL_OW 111
// end else
 492: GO 852
// if tag <= attackFormula [ 1 ] then
 494: LD_VAR 0 8
 498: PUSH
 499: LD_VAR 0 2
 503: PUSH
 504: LD_INT 1
 506: ARRAY
 507: LESSEQUAL
 508: IFFALSE 676
// begin if GetDistUnitXY ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) > 6 then
 510: LD_VAR 0 6
 514: PPUSH
 515: LD_VAR 0 2
 519: PUSH
 520: LD_INT 1
 522: ARRAY
 523: PUSH
 524: LD_VAR 0 8
 528: ARRAY
 529: PUSH
 530: LD_INT 1
 532: ARRAY
 533: PPUSH
 534: LD_VAR 0 2
 538: PUSH
 539: LD_INT 1
 541: ARRAY
 542: PUSH
 543: LD_VAR 0 8
 547: ARRAY
 548: PUSH
 549: LD_INT 2
 551: ARRAY
 552: PPUSH
 553: CALL_OW 297
 557: PUSH
 558: LD_INT 6
 560: GREATER
 561: IFFALSE 612
// ComAgressiveMove ( i , attackFormula [ 1 ] [ tag ] [ 1 ] , attackFormula [ 1 ] [ tag ] [ 2 ] ) else
 563: LD_VAR 0 6
 567: PPUSH
 568: LD_VAR 0 2
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PUSH
 577: LD_VAR 0 8
 581: ARRAY
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PPUSH
 587: LD_VAR 0 2
 591: PUSH
 592: LD_INT 1
 594: ARRAY
 595: PUSH
 596: LD_VAR 0 8
 600: ARRAY
 601: PUSH
 602: LD_INT 2
 604: ARRAY
 605: PPUSH
 606: CALL_OW 114
 610: GO 674
// if not FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_dist , i , 10 ] ] ) then
 612: LD_INT 81
 614: PUSH
 615: LD_VAR 0 6
 619: PPUSH
 620: CALL_OW 255
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 91
 631: PUSH
 632: LD_VAR 0 6
 636: PUSH
 637: LD_INT 10
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: LIST
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: NOT
 654: IFFALSE 674
// SetTag ( i , tag + 1 ) ;
 656: LD_VAR 0 6
 660: PPUSH
 661: LD_VAR 0 8
 665: PUSH
 666: LD_INT 1
 668: PLUS
 669: PPUSH
 670: CALL_OW 109
// end else
 674: GO 852
// begin if captureTanks and FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) then
 676: LD_VAR 0 4
 680: PUSH
 681: LD_INT 81
 683: PUSH
 684: LD_VAR 0 6
 688: PPUSH
 689: CALL_OW 255
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 21
 700: PUSH
 701: LD_INT 2
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: PUSH
 708: LD_INT 50
 710: PUSH
 711: EMPTY
 712: LIST
 713: PUSH
 714: LD_INT 91
 716: PUSH
 717: LD_VAR 0 6
 721: PUSH
 722: LD_INT 10
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: PPUSH
 736: CALL_OW 69
 740: AND
 741: IFFALSE 818
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) else
 743: LD_VAR 0 6
 747: PPUSH
 748: LD_INT 81
 750: PUSH
 751: LD_VAR 0 6
 755: PPUSH
 756: CALL_OW 255
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 21
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: LD_INT 50
 777: PUSH
 778: EMPTY
 779: LIST
 780: PUSH
 781: LD_INT 91
 783: PUSH
 784: LD_VAR 0 6
 788: PUSH
 789: LD_INT 10
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: LD_INT 1
 810: ARRAY
 811: PPUSH
 812: CALL_OW 120
 816: GO 852
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 1 ] ) , i ) ) ;
 818: LD_VAR 0 6
 822: PPUSH
 823: LD_INT 81
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PPUSH
 833: CALL_OW 69
 837: PPUSH
 838: LD_VAR 0 6
 842: PPUSH
 843: CALL_OW 74
 847: PPUSH
 848: CALL_OW 115
// end ; end ; end ;
 852: GO 298
 854: POP
 855: POP
// end ; if sci then
 856: LD_VAR 0 10
 860: IFFALSE 1155
// begin if not sol and not mech and retreatFormula then
 862: LD_VAR 0 9
 866: NOT
 867: PUSH
 868: LD_VAR 0 11
 872: NOT
 873: AND
 874: PUSH
 875: LD_VAR 0 3
 879: AND
 880: IFFALSE 952
// begin for i in sci do
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_VAR 0 10
 891: PUSH
 892: FOR_IN
 893: IFFALSE 948
// begin ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
 895: LD_VAR 0 6
 899: PPUSH
 900: LD_VAR 0 3
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: PPUSH
 913: LD_VAR 0 3
 917: PUSH
 918: LD_INT 1
 920: ARRAY
 921: PUSH
 922: LD_INT 2
 924: ARRAY
 925: PPUSH
 926: CALL_OW 111
// attackers := attackers diff i ;
 930: LD_ADDR_VAR 0 1
 934: PUSH
 935: LD_VAR 0 1
 939: PUSH
 940: LD_VAR 0 6
 944: DIFF
 945: ST_TO_ADDR
// end ;
 946: GO 892
 948: POP
 949: POP
// end else
 950: GO 1155
// for i in sci do
 952: LD_ADDR_VAR 0 6
 956: PUSH
 957: LD_VAR 0 10
 961: PUSH
 962: FOR_IN
 963: IFFALSE 1153
// if GetDistUnitXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) > 10 then
 965: LD_VAR 0 6
 969: PPUSH
 970: LD_VAR 0 2
 974: PUSH
 975: LD_INT 2
 977: ARRAY
 978: PUSH
 979: LD_INT 1
 981: ARRAY
 982: PPUSH
 983: LD_VAR 0 2
 987: PUSH
 988: LD_INT 2
 990: ARRAY
 991: PUSH
 992: LD_INT 2
 994: ARRAY
 995: PPUSH
 996: CALL_OW 297
1000: PUSH
1001: LD_INT 10
1003: GREATER
1004: IFFALSE 1043
// ComMoveXY ( i , attackFormula [ 2 ] [ 1 ] , attackFormula [ 2 ] [ 2 ] ) else
1006: LD_VAR 0 6
1010: PPUSH
1011: LD_VAR 0 2
1015: PUSH
1016: LD_INT 2
1018: ARRAY
1019: PUSH
1020: LD_INT 1
1022: ARRAY
1023: PPUSH
1024: LD_VAR 0 2
1028: PUSH
1029: LD_INT 2
1031: ARRAY
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PPUSH
1037: CALL_OW 111
1041: GO 1151
// if UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) then
1043: LD_VAR 0 9
1047: PPUSH
1048: LD_INT 3
1050: PUSH
1051: LD_INT 24
1053: PUSH
1054: LD_INT 1000
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 91
1067: PUSH
1068: LD_VAR 0 6
1072: PUSH
1073: LD_INT 10
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: PPUSH
1085: CALL_OW 72
1089: IFFALSE 1151
// ComHeal ( i , UnitFilter ( sol , [ [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 10 ] ] ) [ 1 ] ) ;
1091: LD_VAR 0 6
1095: PPUSH
1096: LD_VAR 0 9
1100: PPUSH
1101: LD_INT 3
1103: PUSH
1104: LD_INT 24
1106: PUSH
1107: LD_INT 1000
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 91
1120: PUSH
1121: LD_VAR 0 6
1125: PUSH
1126: LD_INT 10
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PPUSH
1138: CALL_OW 72
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PPUSH
1147: CALL_OW 128
1151: GO 962
1153: POP
1154: POP
// end ; if mech then
1155: LD_VAR 0 11
1159: IFFALSE 1807
// begin for i in mech do
1161: LD_ADDR_VAR 0 6
1165: PUSH
1166: LD_VAR 0 11
1170: PUSH
1171: FOR_IN
1172: IFFALSE 1805
// begin tag := GetTag ( i ) ;
1174: LD_ADDR_VAR 0 8
1178: PUSH
1179: LD_VAR 0 6
1183: PPUSH
1184: CALL_OW 110
1188: ST_TO_ADDR
// veh := IsInUnit ( i ) ;
1189: LD_ADDR_VAR 0 13
1193: PUSH
1194: LD_VAR 0 6
1198: PPUSH
1199: CALL_OW 310
1203: ST_TO_ADDR
// if not tag then
1204: LD_VAR 0 8
1208: NOT
1209: IFFALSE 1511
// begin if veh then
1211: LD_VAR 0 13
1215: IFFALSE 1349
// begin if GetLives ( veh ) = 1000 then
1217: LD_VAR 0 13
1221: PPUSH
1222: CALL_OW 256
1226: PUSH
1227: LD_INT 1000
1229: EQUAL
1230: IFFALSE 1246
// SetTag ( i , 1 ) else
1232: LD_VAR 0 6
1236: PPUSH
1237: LD_INT 1
1239: PPUSH
1240: CALL_OW 109
1244: GO 1347
// if GetDistUnitXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) > 7 then
1246: LD_VAR 0 13
1250: PPUSH
1251: LD_VAR 0 2
1255: PUSH
1256: LD_INT 3
1258: ARRAY
1259: PUSH
1260: LD_INT 1
1262: ARRAY
1263: PPUSH
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 3
1271: ARRAY
1272: PUSH
1273: LD_INT 2
1275: ARRAY
1276: PPUSH
1277: CALL_OW 297
1281: PUSH
1282: LD_INT 7
1284: GREATER
1285: IFFALSE 1324
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) else
1287: LD_VAR 0 13
1291: PPUSH
1292: LD_VAR 0 2
1296: PUSH
1297: LD_INT 3
1299: ARRAY
1300: PUSH
1301: LD_INT 1
1303: ARRAY
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 3
1312: ARRAY
1313: PUSH
1314: LD_INT 2
1316: ARRAY
1317: PPUSH
1318: CALL_OW 111
1322: GO 1347
// begin ComExitVehicle ( i ) ;
1324: LD_VAR 0 6
1328: PPUSH
1329: CALL_OW 121
// AddComRepairVehicle ( i , veh ) ;
1333: LD_VAR 0 6
1337: PPUSH
1338: LD_VAR 0 13
1342: PPUSH
1343: CALL_OW 189
// end ; end else
1347: GO 1509
// if GetLives ( i ) < 400 then
1349: LD_VAR 0 6
1353: PPUSH
1354: CALL_OW 256
1358: PUSH
1359: LD_INT 400
1361: LESS
1362: IFFALSE 1417
// begin attackers := attackers diff i ;
1364: LD_ADDR_VAR 0 1
1368: PUSH
1369: LD_VAR 0 1
1373: PUSH
1374: LD_VAR 0 6
1378: DIFF
1379: ST_TO_ADDR
// ComMoveXY ( i , retreatFormula [ 1 ] [ 1 ] , retreatFormula [ 1 ] [ 2 ] ) ;
1380: LD_VAR 0 6
1384: PPUSH
1385: LD_VAR 0 3
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PUSH
1394: LD_INT 1
1396: ARRAY
1397: PPUSH
1398: LD_VAR 0 3
1402: PUSH
1403: LD_INT 1
1405: ARRAY
1406: PUSH
1407: LD_INT 2
1409: ARRAY
1410: PPUSH
1411: CALL_OW 111
// end else
1415: GO 1509
// if UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 1000 ] ] ) and not HasTask ( i ) then
1417: LD_VAR 0 12
1421: PPUSH
1422: LD_INT 58
1424: PUSH
1425: EMPTY
1426: LIST
1427: PUSH
1428: LD_INT 24
1430: PUSH
1431: LD_INT 1000
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PPUSH
1442: CALL_OW 72
1446: PUSH
1447: LD_VAR 0 6
1451: PPUSH
1452: CALL_OW 314
1456: NOT
1457: AND
1458: IFFALSE 1509
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( tanks , [ [ f_empty ] , [ f_lives , 250 ] ] ) , i ) ) ;
1460: LD_VAR 0 6
1464: PPUSH
1465: LD_VAR 0 12
1469: PPUSH
1470: LD_INT 58
1472: PUSH
1473: EMPTY
1474: LIST
1475: PUSH
1476: LD_INT 24
1478: PUSH
1479: LD_INT 250
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PPUSH
1490: CALL_OW 72
1494: PPUSH
1495: LD_VAR 0 6
1499: PPUSH
1500: CALL_OW 74
1504: PPUSH
1505: CALL_OW 120
// end else
1509: GO 1803
// begin if veh and GetLives ( veh ) < 720 then
1511: LD_VAR 0 13
1515: PUSH
1516: LD_VAR 0 13
1520: PPUSH
1521: CALL_OW 256
1525: PUSH
1526: LD_INT 720
1528: LESS
1529: AND
1530: IFFALSE 1581
// begin SetTag ( i , 0 ) ;
1532: LD_VAR 0 6
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 109
// ComMoveXY ( veh , attackFormula [ 3 ] [ 1 ] , attackFormula [ 3 ] [ 2 ] ) ;
1544: LD_VAR 0 13
1548: PPUSH
1549: LD_VAR 0 2
1553: PUSH
1554: LD_INT 3
1556: ARRAY
1557: PUSH
1558: LD_INT 1
1560: ARRAY
1561: PPUSH
1562: LD_VAR 0 2
1566: PUSH
1567: LD_INT 3
1569: ARRAY
1570: PUSH
1571: LD_INT 2
1573: ARRAY
1574: PPUSH
1575: CALL_OW 111
// end else
1579: GO 1803
// if veh then
1581: LD_VAR 0 13
1585: IFFALSE 1803
// if tag <= attackFormula [ 4 ] then
1587: LD_VAR 0 8
1591: PUSH
1592: LD_VAR 0 2
1596: PUSH
1597: LD_INT 4
1599: ARRAY
1600: LESSEQUAL
1601: IFFALSE 1762
// begin if GetDistUnitXY ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) > 6 then
1603: LD_VAR 0 13
1607: PPUSH
1608: LD_VAR 0 2
1612: PUSH
1613: LD_INT 4
1615: ARRAY
1616: PUSH
1617: LD_VAR 0 8
1621: ARRAY
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: PPUSH
1627: LD_VAR 0 2
1631: PUSH
1632: LD_INT 4
1634: ARRAY
1635: PUSH
1636: LD_VAR 0 8
1640: ARRAY
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: CALL_OW 297
1650: PUSH
1651: LD_INT 6
1653: GREATER
1654: IFFALSE 1705
// ComAgressiveMove ( veh , attackFormula [ 4 ] [ tag ] [ 1 ] , attackFormula [ 4 ] [ tag ] [ 2 ] ) else
1656: LD_VAR 0 13
1660: PPUSH
1661: LD_VAR 0 2
1665: PUSH
1666: LD_INT 4
1668: ARRAY
1669: PUSH
1670: LD_VAR 0 8
1674: ARRAY
1675: PUSH
1676: LD_INT 1
1678: ARRAY
1679: PPUSH
1680: LD_VAR 0 2
1684: PUSH
1685: LD_INT 4
1687: ARRAY
1688: PUSH
1689: LD_VAR 0 8
1693: ARRAY
1694: PUSH
1695: LD_INT 2
1697: ARRAY
1698: PPUSH
1699: CALL_OW 114
1703: GO 1760
// if not FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_dist , veh , 10 ] ] ) then
1705: LD_INT 81
1707: PUSH
1708: LD_INT 1
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 91
1717: PUSH
1718: LD_VAR 0 13
1722: PUSH
1723: LD_INT 10
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 69
1739: NOT
1740: IFFALSE 1760
// SetTag ( i , tag + 1 ) ;
1742: LD_VAR 0 6
1746: PPUSH
1747: LD_VAR 0 8
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: PPUSH
1756: CALL_OW 109
// end else
1760: GO 1803
// ComAttackUnit ( veh , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
1762: LD_VAR 0 13
1766: PPUSH
1767: LD_INT 81
1769: PUSH
1770: LD_VAR 0 6
1774: PPUSH
1775: CALL_OW 255
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PPUSH
1784: CALL_OW 69
1788: PPUSH
1789: LD_VAR 0 6
1793: PPUSH
1794: CALL_OW 74
1798: PPUSH
1799: CALL_OW 115
// end ; end ;
1803: GO 1171
1805: POP
1806: POP
// end ; until not UnitFilter ( attackers , [ f_placed ] ) ;
1807: LD_VAR 0 1
1811: PPUSH
1812: LD_INT 52
1814: PUSH
1815: EMPTY
1816: LIST
1817: PPUSH
1818: CALL_OW 72
1822: NOT
1823: IFFALSE 175
// end ; end_of_file
1825: LD_VAR 0 5
1829: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
1830: LD_INT 0
1832: PPUSH
// ar_miner := 81 ;
1833: LD_ADDR_EXP 8
1837: PUSH
1838: LD_INT 81
1840: ST_TO_ADDR
// ar_crane := 88 ;
1841: LD_ADDR_EXP 7
1845: PUSH
1846: LD_INT 88
1848: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1849: LD_ADDR_EXP 2
1853: PUSH
1854: LD_INT 89
1856: ST_TO_ADDR
// us_hack := 99 ;
1857: LD_ADDR_EXP 3
1861: PUSH
1862: LD_INT 99
1864: ST_TO_ADDR
// us_artillery := 97 ;
1865: LD_ADDR_EXP 4
1869: PUSH
1870: LD_INT 97
1872: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1873: LD_ADDR_EXP 5
1877: PUSH
1878: LD_INT 91
1880: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
1881: LD_ADDR_EXP 6
1885: PUSH
1886: LD_INT 92
1888: ST_TO_ADDR
// ru_radar := 98 ;
1889: LD_ADDR_EXP 1
1893: PUSH
1894: LD_INT 98
1896: ST_TO_ADDR
// tech_Artillery := 80 ;
1897: LD_ADDR_EXP 9
1901: PUSH
1902: LD_INT 80
1904: ST_TO_ADDR
// tech_RadMat := 81 ;
1905: LD_ADDR_EXP 10
1909: PUSH
1910: LD_INT 81
1912: ST_TO_ADDR
// tech_BasicTools := 82 ;
1913: LD_ADDR_EXP 11
1917: PUSH
1918: LD_INT 82
1920: ST_TO_ADDR
// tech_Cargo := 83 ;
1921: LD_ADDR_EXP 12
1925: PUSH
1926: LD_INT 83
1928: ST_TO_ADDR
// tech_Track := 84 ;
1929: LD_ADDR_EXP 13
1933: PUSH
1934: LD_INT 84
1936: ST_TO_ADDR
// tech_Crane := 85 ;
1937: LD_ADDR_EXP 14
1941: PUSH
1942: LD_INT 85
1944: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1945: LD_ADDR_EXP 15
1949: PUSH
1950: LD_INT 86
1952: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1953: LD_ADDR_EXP 16
1957: PUSH
1958: LD_INT 87
1960: ST_TO_ADDR
// end ;
1961: LD_VAR 0 1
1965: RET
// every 1 do
1966: GO 1968
1968: DISABLE
// InitGlobalVariables ; end_of_file
1969: CALL 1830 0 0
1973: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
1974: LD_VAR 0 2
1978: PUSH
1979: LD_INT 100
1981: EQUAL
1982: IFFALSE 2931
// begin if not StreamModeActive then
1984: LD_EXP 17
1988: NOT
1989: IFFALSE 1999
// StreamModeActive := true ;
1991: LD_ADDR_EXP 17
1995: PUSH
1996: LD_INT 1
1998: ST_TO_ADDR
// if p3 = 0 then
1999: LD_VAR 0 3
2003: PUSH
2004: LD_INT 0
2006: EQUAL
2007: IFFALSE 2013
// InitStreamMode ;
2009: CALL 3089 0 0
// if p3 = 1 then
2013: LD_VAR 0 3
2017: PUSH
2018: LD_INT 1
2020: EQUAL
2021: IFFALSE 2031
// sRocket := true ;
2023: LD_ADDR_EXP 22
2027: PUSH
2028: LD_INT 1
2030: ST_TO_ADDR
// if p3 = 2 then
2031: LD_VAR 0 3
2035: PUSH
2036: LD_INT 2
2038: EQUAL
2039: IFFALSE 2049
// sSpeed := true ;
2041: LD_ADDR_EXP 21
2045: PUSH
2046: LD_INT 1
2048: ST_TO_ADDR
// if p3 = 3 then
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 3
2056: EQUAL
2057: IFFALSE 2067
// sEngine := true ;
2059: LD_ADDR_EXP 23
2063: PUSH
2064: LD_INT 1
2066: ST_TO_ADDR
// if p3 = 4 then
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 4
2074: EQUAL
2075: IFFALSE 2085
// sSpec := true ;
2077: LD_ADDR_EXP 20
2081: PUSH
2082: LD_INT 1
2084: ST_TO_ADDR
// if p3 = 5 then
2085: LD_VAR 0 3
2089: PUSH
2090: LD_INT 5
2092: EQUAL
2093: IFFALSE 2103
// sLevel := true ;
2095: LD_ADDR_EXP 24
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// if p3 = 6 then
2103: LD_VAR 0 3
2107: PUSH
2108: LD_INT 6
2110: EQUAL
2111: IFFALSE 2121
// sArmoury := true ;
2113: LD_ADDR_EXP 25
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// if p3 = 7 then
2121: LD_VAR 0 3
2125: PUSH
2126: LD_INT 7
2128: EQUAL
2129: IFFALSE 2139
// sRadar := true ;
2131: LD_ADDR_EXP 26
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// if p3 = 8 then
2139: LD_VAR 0 3
2143: PUSH
2144: LD_INT 8
2146: EQUAL
2147: IFFALSE 2157
// sBunker := true ;
2149: LD_ADDR_EXP 27
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// if p3 = 9 then
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 9
2164: EQUAL
2165: IFFALSE 2175
// sHack := true ;
2167: LD_ADDR_EXP 28
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// if p3 = 10 then
2175: LD_VAR 0 3
2179: PUSH
2180: LD_INT 10
2182: EQUAL
2183: IFFALSE 2193
// sFire := true ;
2185: LD_ADDR_EXP 29
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// if p3 = 11 then
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 11
2200: EQUAL
2201: IFFALSE 2211
// sRefresh := true ;
2203: LD_ADDR_EXP 30
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// if p3 = 12 then
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 12
2218: EQUAL
2219: IFFALSE 2229
// sExp := true ;
2221: LD_ADDR_EXP 31
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// if p3 = 13 then
2229: LD_VAR 0 3
2233: PUSH
2234: LD_INT 13
2236: EQUAL
2237: IFFALSE 2247
// sDepot := true ;
2239: LD_ADDR_EXP 32
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// if p3 = 14 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 14
2254: EQUAL
2255: IFFALSE 2265
// sFlag := true ;
2257: LD_ADDR_EXP 33
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// if p3 = 15 then
2265: LD_VAR 0 3
2269: PUSH
2270: LD_INT 15
2272: EQUAL
2273: IFFALSE 2283
// sKamikadze := true ;
2275: LD_ADDR_EXP 41
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// if p3 = 16 then
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 16
2290: EQUAL
2291: IFFALSE 2301
// sTroll := true ;
2293: LD_ADDR_EXP 42
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// if p3 = 17 then
2301: LD_VAR 0 3
2305: PUSH
2306: LD_INT 17
2308: EQUAL
2309: IFFALSE 2319
// sSlow := true ;
2311: LD_ADDR_EXP 43
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// if p3 = 18 then
2319: LD_VAR 0 3
2323: PUSH
2324: LD_INT 18
2326: EQUAL
2327: IFFALSE 2337
// sLack := true ;
2329: LD_ADDR_EXP 44
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// if p3 = 19 then
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 19
2344: EQUAL
2345: IFFALSE 2355
// sTank := true ;
2347: LD_ADDR_EXP 46
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// if p3 = 20 then
2355: LD_VAR 0 3
2359: PUSH
2360: LD_INT 20
2362: EQUAL
2363: IFFALSE 2373
// sRemote := true ;
2365: LD_ADDR_EXP 47
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
// if p3 = 21 then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 21
2380: EQUAL
2381: IFFALSE 2391
// sPowell := true ;
2383: LD_ADDR_EXP 48
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// if p3 = 22 then
2391: LD_VAR 0 3
2395: PUSH
2396: LD_INT 22
2398: EQUAL
2399: IFFALSE 2409
// sTeleport := true ;
2401: LD_ADDR_EXP 51
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// if p3 = 23 then
2409: LD_VAR 0 3
2413: PUSH
2414: LD_INT 23
2416: EQUAL
2417: IFFALSE 2427
// sOilTower := true ;
2419: LD_ADDR_EXP 53
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// if p3 = 24 then
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 24
2434: EQUAL
2435: IFFALSE 2445
// sShovel := true ;
2437: LD_ADDR_EXP 54
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// if p3 = 25 then
2445: LD_VAR 0 3
2449: PUSH
2450: LD_INT 25
2452: EQUAL
2453: IFFALSE 2463
// sSheik := true ;
2455: LD_ADDR_EXP 55
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// if p3 = 26 then
2463: LD_VAR 0 3
2467: PUSH
2468: LD_INT 26
2470: EQUAL
2471: IFFALSE 2481
// sEarthquake := true ;
2473: LD_ADDR_EXP 57
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// if p3 = 27 then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 27
2488: EQUAL
2489: IFFALSE 2499
// sAI := true ;
2491: LD_ADDR_EXP 58
2495: PUSH
2496: LD_INT 1
2498: ST_TO_ADDR
// if p3 = 28 then
2499: LD_VAR 0 3
2503: PUSH
2504: LD_INT 28
2506: EQUAL
2507: IFFALSE 2517
// sCargo := true ;
2509: LD_ADDR_EXP 61
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// if p3 = 29 then
2517: LD_VAR 0 3
2521: PUSH
2522: LD_INT 29
2524: EQUAL
2525: IFFALSE 2535
// sDLaser := true ;
2527: LD_ADDR_EXP 62
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// if p3 = 30 then
2535: LD_VAR 0 3
2539: PUSH
2540: LD_INT 30
2542: EQUAL
2543: IFFALSE 2553
// sExchange := true ;
2545: LD_ADDR_EXP 63
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// if p3 = 31 then
2553: LD_VAR 0 3
2557: PUSH
2558: LD_INT 31
2560: EQUAL
2561: IFFALSE 2571
// sFac := true ;
2563: LD_ADDR_EXP 64
2567: PUSH
2568: LD_INT 1
2570: ST_TO_ADDR
// if p3 = 32 then
2571: LD_VAR 0 3
2575: PUSH
2576: LD_INT 32
2578: EQUAL
2579: IFFALSE 2589
// sPower := true ;
2581: LD_ADDR_EXP 65
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// if p3 = 33 then
2589: LD_VAR 0 3
2593: PUSH
2594: LD_INT 33
2596: EQUAL
2597: IFFALSE 2607
// sRandom := true ;
2599: LD_ADDR_EXP 66
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// if p3 = 34 then
2607: LD_VAR 0 3
2611: PUSH
2612: LD_INT 34
2614: EQUAL
2615: IFFALSE 2625
// sShield := true ;
2617: LD_ADDR_EXP 67
2621: PUSH
2622: LD_INT 1
2624: ST_TO_ADDR
// if p3 = 35 then
2625: LD_VAR 0 3
2629: PUSH
2630: LD_INT 35
2632: EQUAL
2633: IFFALSE 2643
// sTime := true ;
2635: LD_ADDR_EXP 68
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// if p3 = 36 then
2643: LD_VAR 0 3
2647: PUSH
2648: LD_INT 36
2650: EQUAL
2651: IFFALSE 2661
// sTools := true ;
2653: LD_ADDR_EXP 69
2657: PUSH
2658: LD_INT 1
2660: ST_TO_ADDR
// if p3 = 101 then
2661: LD_VAR 0 3
2665: PUSH
2666: LD_INT 101
2668: EQUAL
2669: IFFALSE 2679
// sSold := true ;
2671: LD_ADDR_EXP 34
2675: PUSH
2676: LD_INT 1
2678: ST_TO_ADDR
// if p3 = 102 then
2679: LD_VAR 0 3
2683: PUSH
2684: LD_INT 102
2686: EQUAL
2687: IFFALSE 2697
// sDiff := true ;
2689: LD_ADDR_EXP 35
2693: PUSH
2694: LD_INT 1
2696: ST_TO_ADDR
// if p3 = 103 then
2697: LD_VAR 0 3
2701: PUSH
2702: LD_INT 103
2704: EQUAL
2705: IFFALSE 2715
// sFog := true ;
2707: LD_ADDR_EXP 38
2711: PUSH
2712: LD_INT 1
2714: ST_TO_ADDR
// if p3 = 104 then
2715: LD_VAR 0 3
2719: PUSH
2720: LD_INT 104
2722: EQUAL
2723: IFFALSE 2733
// sReset := true ;
2725: LD_ADDR_EXP 39
2729: PUSH
2730: LD_INT 1
2732: ST_TO_ADDR
// if p3 = 105 then
2733: LD_VAR 0 3
2737: PUSH
2738: LD_INT 105
2740: EQUAL
2741: IFFALSE 2751
// sSun := true ;
2743: LD_ADDR_EXP 40
2747: PUSH
2748: LD_INT 1
2750: ST_TO_ADDR
// if p3 = 106 then
2751: LD_VAR 0 3
2755: PUSH
2756: LD_INT 106
2758: EQUAL
2759: IFFALSE 2769
// sTiger := true ;
2761: LD_ADDR_EXP 36
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// if p3 = 107 then
2769: LD_VAR 0 3
2773: PUSH
2774: LD_INT 107
2776: EQUAL
2777: IFFALSE 2787
// sBomb := true ;
2779: LD_ADDR_EXP 37
2783: PUSH
2784: LD_INT 1
2786: ST_TO_ADDR
// if p3 = 108 then
2787: LD_VAR 0 3
2791: PUSH
2792: LD_INT 108
2794: EQUAL
2795: IFFALSE 2805
// sWound := true ;
2797: LD_ADDR_EXP 45
2801: PUSH
2802: LD_INT 1
2804: ST_TO_ADDR
// if p3 = 109 then
2805: LD_VAR 0 3
2809: PUSH
2810: LD_INT 109
2812: EQUAL
2813: IFFALSE 2823
// sBetray := true ;
2815: LD_ADDR_EXP 49
2819: PUSH
2820: LD_INT 1
2822: ST_TO_ADDR
// if p3 = 110 then
2823: LD_VAR 0 3
2827: PUSH
2828: LD_INT 110
2830: EQUAL
2831: IFFALSE 2841
// sContamin := true ;
2833: LD_ADDR_EXP 50
2837: PUSH
2838: LD_INT 1
2840: ST_TO_ADDR
// if p3 = 111 then
2841: LD_VAR 0 3
2845: PUSH
2846: LD_INT 111
2848: EQUAL
2849: IFFALSE 2859
// sOil := true ;
2851: LD_ADDR_EXP 52
2855: PUSH
2856: LD_INT 1
2858: ST_TO_ADDR
// if p3 = 112 then
2859: LD_VAR 0 3
2863: PUSH
2864: LD_INT 112
2866: EQUAL
2867: IFFALSE 2877
// sStu := true ;
2869: LD_ADDR_EXP 56
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// if p3 = 113 then
2877: LD_VAR 0 3
2881: PUSH
2882: LD_INT 113
2884: EQUAL
2885: IFFALSE 2895
// sBazooka := true ;
2887: LD_ADDR_EXP 59
2891: PUSH
2892: LD_INT 1
2894: ST_TO_ADDR
// if p3 = 114 then
2895: LD_VAR 0 3
2899: PUSH
2900: LD_INT 114
2902: EQUAL
2903: IFFALSE 2913
// sMortar := true ;
2905: LD_ADDR_EXP 60
2909: PUSH
2910: LD_INT 1
2912: ST_TO_ADDR
// if p3 = 115 then
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 115
2920: EQUAL
2921: IFFALSE 2931
// sRanger := true ;
2923: LD_ADDR_EXP 70
2927: PUSH
2928: LD_INT 1
2930: ST_TO_ADDR
// end ; if p2 = 101 then
2931: LD_VAR 0 2
2935: PUSH
2936: LD_INT 101
2938: EQUAL
2939: IFFALSE 3067
// begin case p3 of 1 :
2941: LD_VAR 0 3
2945: PUSH
2946: LD_INT 1
2948: DOUBLE
2949: EQUAL
2950: IFTRUE 2954
2952: GO 2961
2954: POP
// hHackUnlimitedResources ; 2 :
2955: CALL 14102 0 0
2959: GO 3067
2961: LD_INT 2
2963: DOUBLE
2964: EQUAL
2965: IFTRUE 2969
2967: GO 2976
2969: POP
// hHackSetLevel10 ; 3 :
2970: CALL 14235 0 0
2974: GO 3067
2976: LD_INT 3
2978: DOUBLE
2979: EQUAL
2980: IFTRUE 2984
2982: GO 2991
2984: POP
// hHackSetLevel10YourUnits ; 4 :
2985: CALL 14320 0 0
2989: GO 3067
2991: LD_INT 4
2993: DOUBLE
2994: EQUAL
2995: IFTRUE 2999
2997: GO 3006
2999: POP
// hHackInvincible ; 5 :
3000: CALL 14768 0 0
3004: GO 3067
3006: LD_INT 5
3008: DOUBLE
3009: EQUAL
3010: IFTRUE 3014
3012: GO 3021
3014: POP
// hHackInvisible ; 6 :
3015: CALL 14879 0 0
3019: GO 3067
3021: LD_INT 6
3023: DOUBLE
3024: EQUAL
3025: IFTRUE 3029
3027: GO 3036
3029: POP
// hHackChangeYourSide ; 7 :
3030: CALL 14936 0 0
3034: GO 3067
3036: LD_INT 7
3038: DOUBLE
3039: EQUAL
3040: IFTRUE 3044
3042: GO 3051
3044: POP
// hHackChangeUnitSide ; 8 :
3045: CALL 14978 0 0
3049: GO 3067
3051: LD_INT 8
3053: DOUBLE
3054: EQUAL
3055: IFTRUE 3059
3057: GO 3066
3059: POP
// hHackFog ; end ;
3060: CALL 15079 0 0
3064: GO 3067
3066: POP
// end ; end ;
3067: PPOPN 6
3069: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3070: GO 3072
3072: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3073: LD_STRING initStreamRollete();
3075: PPUSH
3076: CALL_OW 559
// InitStreamMode ;
3080: CALL 3089 0 0
// DefineStreamItems ( ) ;
3084: CALL 3529 0 0
// end ;
3088: END
// function InitStreamMode ; begin
3089: LD_INT 0
3091: PPUSH
// streamModeActive := false ;
3092: LD_ADDR_EXP 17
3096: PUSH
3097: LD_INT 0
3099: ST_TO_ADDR
// normalCounter := 36 ;
3100: LD_ADDR_EXP 18
3104: PUSH
3105: LD_INT 36
3107: ST_TO_ADDR
// hardcoreCounter := 16 ;
3108: LD_ADDR_EXP 19
3112: PUSH
3113: LD_INT 16
3115: ST_TO_ADDR
// sRocket := false ;
3116: LD_ADDR_EXP 22
3120: PUSH
3121: LD_INT 0
3123: ST_TO_ADDR
// sSpeed := false ;
3124: LD_ADDR_EXP 21
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// sEngine := false ;
3132: LD_ADDR_EXP 23
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// sSpec := false ;
3140: LD_ADDR_EXP 20
3144: PUSH
3145: LD_INT 0
3147: ST_TO_ADDR
// sLevel := false ;
3148: LD_ADDR_EXP 24
3152: PUSH
3153: LD_INT 0
3155: ST_TO_ADDR
// sArmoury := false ;
3156: LD_ADDR_EXP 25
3160: PUSH
3161: LD_INT 0
3163: ST_TO_ADDR
// sRadar := false ;
3164: LD_ADDR_EXP 26
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// sBunker := false ;
3172: LD_ADDR_EXP 27
3176: PUSH
3177: LD_INT 0
3179: ST_TO_ADDR
// sHack := false ;
3180: LD_ADDR_EXP 28
3184: PUSH
3185: LD_INT 0
3187: ST_TO_ADDR
// sFire := false ;
3188: LD_ADDR_EXP 29
3192: PUSH
3193: LD_INT 0
3195: ST_TO_ADDR
// sRefresh := false ;
3196: LD_ADDR_EXP 30
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// sExp := false ;
3204: LD_ADDR_EXP 31
3208: PUSH
3209: LD_INT 0
3211: ST_TO_ADDR
// sDepot := false ;
3212: LD_ADDR_EXP 32
3216: PUSH
3217: LD_INT 0
3219: ST_TO_ADDR
// sFlag := false ;
3220: LD_ADDR_EXP 33
3224: PUSH
3225: LD_INT 0
3227: ST_TO_ADDR
// sKamikadze := false ;
3228: LD_ADDR_EXP 41
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// sTroll := false ;
3236: LD_ADDR_EXP 42
3240: PUSH
3241: LD_INT 0
3243: ST_TO_ADDR
// sSlow := false ;
3244: LD_ADDR_EXP 43
3248: PUSH
3249: LD_INT 0
3251: ST_TO_ADDR
// sLack := false ;
3252: LD_ADDR_EXP 44
3256: PUSH
3257: LD_INT 0
3259: ST_TO_ADDR
// sTank := false ;
3260: LD_ADDR_EXP 46
3264: PUSH
3265: LD_INT 0
3267: ST_TO_ADDR
// sRemote := false ;
3268: LD_ADDR_EXP 47
3272: PUSH
3273: LD_INT 0
3275: ST_TO_ADDR
// sPowell := false ;
3276: LD_ADDR_EXP 48
3280: PUSH
3281: LD_INT 0
3283: ST_TO_ADDR
// sTeleport := false ;
3284: LD_ADDR_EXP 51
3288: PUSH
3289: LD_INT 0
3291: ST_TO_ADDR
// sOilTower := false ;
3292: LD_ADDR_EXP 53
3296: PUSH
3297: LD_INT 0
3299: ST_TO_ADDR
// sShovel := false ;
3300: LD_ADDR_EXP 54
3304: PUSH
3305: LD_INT 0
3307: ST_TO_ADDR
// sSheik := false ;
3308: LD_ADDR_EXP 55
3312: PUSH
3313: LD_INT 0
3315: ST_TO_ADDR
// sEarthquake := false ;
3316: LD_ADDR_EXP 57
3320: PUSH
3321: LD_INT 0
3323: ST_TO_ADDR
// sAI := false ;
3324: LD_ADDR_EXP 58
3328: PUSH
3329: LD_INT 0
3331: ST_TO_ADDR
// sCargo := false ;
3332: LD_ADDR_EXP 61
3336: PUSH
3337: LD_INT 0
3339: ST_TO_ADDR
// sDLaser := false ;
3340: LD_ADDR_EXP 62
3344: PUSH
3345: LD_INT 0
3347: ST_TO_ADDR
// sExchange := false ;
3348: LD_ADDR_EXP 63
3352: PUSH
3353: LD_INT 0
3355: ST_TO_ADDR
// sFac := false ;
3356: LD_ADDR_EXP 64
3360: PUSH
3361: LD_INT 0
3363: ST_TO_ADDR
// sPower := false ;
3364: LD_ADDR_EXP 65
3368: PUSH
3369: LD_INT 0
3371: ST_TO_ADDR
// sRandom := false ;
3372: LD_ADDR_EXP 66
3376: PUSH
3377: LD_INT 0
3379: ST_TO_ADDR
// sShield := false ;
3380: LD_ADDR_EXP 67
3384: PUSH
3385: LD_INT 0
3387: ST_TO_ADDR
// sTime := false ;
3388: LD_ADDR_EXP 68
3392: PUSH
3393: LD_INT 0
3395: ST_TO_ADDR
// sTools := false ;
3396: LD_ADDR_EXP 69
3400: PUSH
3401: LD_INT 0
3403: ST_TO_ADDR
// sSold := false ;
3404: LD_ADDR_EXP 34
3408: PUSH
3409: LD_INT 0
3411: ST_TO_ADDR
// sDiff := false ;
3412: LD_ADDR_EXP 35
3416: PUSH
3417: LD_INT 0
3419: ST_TO_ADDR
// sFog := false ;
3420: LD_ADDR_EXP 38
3424: PUSH
3425: LD_INT 0
3427: ST_TO_ADDR
// sReset := false ;
3428: LD_ADDR_EXP 39
3432: PUSH
3433: LD_INT 0
3435: ST_TO_ADDR
// sSun := false ;
3436: LD_ADDR_EXP 40
3440: PUSH
3441: LD_INT 0
3443: ST_TO_ADDR
// sTiger := false ;
3444: LD_ADDR_EXP 36
3448: PUSH
3449: LD_INT 0
3451: ST_TO_ADDR
// sBomb := false ;
3452: LD_ADDR_EXP 37
3456: PUSH
3457: LD_INT 0
3459: ST_TO_ADDR
// sWound := false ;
3460: LD_ADDR_EXP 45
3464: PUSH
3465: LD_INT 0
3467: ST_TO_ADDR
// sBetray := false ;
3468: LD_ADDR_EXP 49
3472: PUSH
3473: LD_INT 0
3475: ST_TO_ADDR
// sContamin := false ;
3476: LD_ADDR_EXP 50
3480: PUSH
3481: LD_INT 0
3483: ST_TO_ADDR
// sOil := false ;
3484: LD_ADDR_EXP 52
3488: PUSH
3489: LD_INT 0
3491: ST_TO_ADDR
// sStu := false ;
3492: LD_ADDR_EXP 56
3496: PUSH
3497: LD_INT 0
3499: ST_TO_ADDR
// sBazooka := false ;
3500: LD_ADDR_EXP 59
3504: PUSH
3505: LD_INT 0
3507: ST_TO_ADDR
// sMortar := false ;
3508: LD_ADDR_EXP 60
3512: PUSH
3513: LD_INT 0
3515: ST_TO_ADDR
// sRanger := false ;
3516: LD_ADDR_EXP 70
3520: PUSH
3521: LD_INT 0
3523: ST_TO_ADDR
// end ;
3524: LD_VAR 0 1
3528: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3529: LD_INT 0
3531: PPUSH
3532: PPUSH
3533: PPUSH
3534: PPUSH
3535: PPUSH
// result := [ ] ;
3536: LD_ADDR_VAR 0 1
3540: PUSH
3541: EMPTY
3542: ST_TO_ADDR
// if campaign_id = 1 then
3543: LD_OWVAR 69
3547: PUSH
3548: LD_INT 1
3550: EQUAL
3551: IFFALSE 6489
// begin case mission_number of 1 :
3553: LD_OWVAR 70
3557: PUSH
3558: LD_INT 1
3560: DOUBLE
3561: EQUAL
3562: IFTRUE 3566
3564: GO 3630
3566: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3567: LD_ADDR_VAR 0 1
3571: PUSH
3572: LD_INT 2
3574: PUSH
3575: LD_INT 4
3577: PUSH
3578: LD_INT 11
3580: PUSH
3581: LD_INT 12
3583: PUSH
3584: LD_INT 15
3586: PUSH
3587: LD_INT 16
3589: PUSH
3590: LD_INT 22
3592: PUSH
3593: LD_INT 23
3595: PUSH
3596: LD_INT 26
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: PUSH
3610: LD_INT 101
3612: PUSH
3613: LD_INT 102
3615: PUSH
3616: LD_INT 106
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: ST_TO_ADDR
3628: GO 6487
3630: LD_INT 2
3632: DOUBLE
3633: EQUAL
3634: IFTRUE 3638
3636: GO 3710
3638: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3639: LD_ADDR_VAR 0 1
3643: PUSH
3644: LD_INT 2
3646: PUSH
3647: LD_INT 4
3649: PUSH
3650: LD_INT 11
3652: PUSH
3653: LD_INT 12
3655: PUSH
3656: LD_INT 15
3658: PUSH
3659: LD_INT 16
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 23
3667: PUSH
3668: LD_INT 26
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: PUSH
3682: LD_INT 101
3684: PUSH
3685: LD_INT 102
3687: PUSH
3688: LD_INT 105
3690: PUSH
3691: LD_INT 106
3693: PUSH
3694: LD_INT 108
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: ST_TO_ADDR
3708: GO 6487
3710: LD_INT 3
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3718
3716: GO 3794
3718: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3719: LD_ADDR_VAR 0 1
3723: PUSH
3724: LD_INT 2
3726: PUSH
3727: LD_INT 4
3729: PUSH
3730: LD_INT 5
3732: PUSH
3733: LD_INT 11
3735: PUSH
3736: LD_INT 12
3738: PUSH
3739: LD_INT 15
3741: PUSH
3742: LD_INT 16
3744: PUSH
3745: LD_INT 22
3747: PUSH
3748: LD_INT 26
3750: PUSH
3751: LD_INT 36
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_INT 101
3768: PUSH
3769: LD_INT 102
3771: PUSH
3772: LD_INT 105
3774: PUSH
3775: LD_INT 106
3777: PUSH
3778: LD_INT 108
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: ST_TO_ADDR
3792: GO 6487
3794: LD_INT 4
3796: DOUBLE
3797: EQUAL
3798: IFTRUE 3802
3800: GO 3886
3802: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3803: LD_ADDR_VAR 0 1
3807: PUSH
3808: LD_INT 2
3810: PUSH
3811: LD_INT 4
3813: PUSH
3814: LD_INT 5
3816: PUSH
3817: LD_INT 8
3819: PUSH
3820: LD_INT 11
3822: PUSH
3823: LD_INT 12
3825: PUSH
3826: LD_INT 15
3828: PUSH
3829: LD_INT 16
3831: PUSH
3832: LD_INT 22
3834: PUSH
3835: LD_INT 23
3837: PUSH
3838: LD_INT 26
3840: PUSH
3841: LD_INT 36
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 101
3860: PUSH
3861: LD_INT 102
3863: PUSH
3864: LD_INT 105
3866: PUSH
3867: LD_INT 106
3869: PUSH
3870: LD_INT 108
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: ST_TO_ADDR
3884: GO 6487
3886: LD_INT 5
3888: DOUBLE
3889: EQUAL
3890: IFTRUE 3894
3892: GO 3994
3894: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 2
3902: PUSH
3903: LD_INT 4
3905: PUSH
3906: LD_INT 5
3908: PUSH
3909: LD_INT 6
3911: PUSH
3912: LD_INT 8
3914: PUSH
3915: LD_INT 11
3917: PUSH
3918: LD_INT 12
3920: PUSH
3921: LD_INT 15
3923: PUSH
3924: LD_INT 16
3926: PUSH
3927: LD_INT 22
3929: PUSH
3930: LD_INT 23
3932: PUSH
3933: LD_INT 25
3935: PUSH
3936: LD_INT 26
3938: PUSH
3939: LD_INT 36
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 101
3960: PUSH
3961: LD_INT 102
3963: PUSH
3964: LD_INT 105
3966: PUSH
3967: LD_INT 106
3969: PUSH
3970: LD_INT 108
3972: PUSH
3973: LD_INT 109
3975: PUSH
3976: LD_INT 112
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: ST_TO_ADDR
3992: GO 6487
3994: LD_INT 6
3996: DOUBLE
3997: EQUAL
3998: IFTRUE 4002
4000: GO 4122
4002: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
4003: LD_ADDR_VAR 0 1
4007: PUSH
4008: LD_INT 2
4010: PUSH
4011: LD_INT 4
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: LD_INT 6
4019: PUSH
4020: LD_INT 8
4022: PUSH
4023: LD_INT 11
4025: PUSH
4026: LD_INT 12
4028: PUSH
4029: LD_INT 15
4031: PUSH
4032: LD_INT 16
4034: PUSH
4035: LD_INT 20
4037: PUSH
4038: LD_INT 21
4040: PUSH
4041: LD_INT 22
4043: PUSH
4044: LD_INT 23
4046: PUSH
4047: LD_INT 25
4049: PUSH
4050: LD_INT 26
4052: PUSH
4053: LD_INT 30
4055: PUSH
4056: LD_INT 31
4058: PUSH
4059: LD_INT 32
4061: PUSH
4062: LD_INT 36
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: PUSH
4086: LD_INT 101
4088: PUSH
4089: LD_INT 102
4091: PUSH
4092: LD_INT 105
4094: PUSH
4095: LD_INT 106
4097: PUSH
4098: LD_INT 108
4100: PUSH
4101: LD_INT 109
4103: PUSH
4104: LD_INT 112
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: ST_TO_ADDR
4120: GO 6487
4122: LD_INT 7
4124: DOUBLE
4125: EQUAL
4126: IFTRUE 4130
4128: GO 4230
4130: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4131: LD_ADDR_VAR 0 1
4135: PUSH
4136: LD_INT 2
4138: PUSH
4139: LD_INT 4
4141: PUSH
4142: LD_INT 5
4144: PUSH
4145: LD_INT 7
4147: PUSH
4148: LD_INT 11
4150: PUSH
4151: LD_INT 12
4153: PUSH
4154: LD_INT 15
4156: PUSH
4157: LD_INT 16
4159: PUSH
4160: LD_INT 20
4162: PUSH
4163: LD_INT 21
4165: PUSH
4166: LD_INT 22
4168: PUSH
4169: LD_INT 23
4171: PUSH
4172: LD_INT 25
4174: PUSH
4175: LD_INT 26
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 101
4196: PUSH
4197: LD_INT 102
4199: PUSH
4200: LD_INT 103
4202: PUSH
4203: LD_INT 105
4205: PUSH
4206: LD_INT 106
4208: PUSH
4209: LD_INT 108
4211: PUSH
4212: LD_INT 112
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: ST_TO_ADDR
4228: GO 6487
4230: LD_INT 8
4232: DOUBLE
4233: EQUAL
4234: IFTRUE 4238
4236: GO 4366
4238: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4239: LD_ADDR_VAR 0 1
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: LD_INT 4
4249: PUSH
4250: LD_INT 5
4252: PUSH
4253: LD_INT 6
4255: PUSH
4256: LD_INT 7
4258: PUSH
4259: LD_INT 8
4261: PUSH
4262: LD_INT 11
4264: PUSH
4265: LD_INT 12
4267: PUSH
4268: LD_INT 15
4270: PUSH
4271: LD_INT 16
4273: PUSH
4274: LD_INT 20
4276: PUSH
4277: LD_INT 21
4279: PUSH
4280: LD_INT 22
4282: PUSH
4283: LD_INT 23
4285: PUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 26
4291: PUSH
4292: LD_INT 30
4294: PUSH
4295: LD_INT 31
4297: PUSH
4298: LD_INT 32
4300: PUSH
4301: LD_INT 36
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 101
4328: PUSH
4329: LD_INT 102
4331: PUSH
4332: LD_INT 103
4334: PUSH
4335: LD_INT 105
4337: PUSH
4338: LD_INT 106
4340: PUSH
4341: LD_INT 108
4343: PUSH
4344: LD_INT 109
4346: PUSH
4347: LD_INT 112
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: ST_TO_ADDR
4364: GO 6487
4366: LD_INT 9
4368: DOUBLE
4369: EQUAL
4370: IFTRUE 4374
4372: GO 4510
4374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4375: LD_ADDR_VAR 0 1
4379: PUSH
4380: LD_INT 2
4382: PUSH
4383: LD_INT 4
4385: PUSH
4386: LD_INT 5
4388: PUSH
4389: LD_INT 6
4391: PUSH
4392: LD_INT 7
4394: PUSH
4395: LD_INT 8
4397: PUSH
4398: LD_INT 11
4400: PUSH
4401: LD_INT 12
4403: PUSH
4404: LD_INT 15
4406: PUSH
4407: LD_INT 16
4409: PUSH
4410: LD_INT 20
4412: PUSH
4413: LD_INT 21
4415: PUSH
4416: LD_INT 22
4418: PUSH
4419: LD_INT 23
4421: PUSH
4422: LD_INT 25
4424: PUSH
4425: LD_INT 26
4427: PUSH
4428: LD_INT 28
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: LD_INT 32
4439: PUSH
4440: LD_INT 36
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 101
4468: PUSH
4469: LD_INT 102
4471: PUSH
4472: LD_INT 103
4474: PUSH
4475: LD_INT 105
4477: PUSH
4478: LD_INT 106
4480: PUSH
4481: LD_INT 108
4483: PUSH
4484: LD_INT 109
4486: PUSH
4487: LD_INT 112
4489: PUSH
4490: LD_INT 114
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: ST_TO_ADDR
4508: GO 6487
4510: LD_INT 10
4512: DOUBLE
4513: EQUAL
4514: IFTRUE 4518
4516: GO 4702
4518: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4519: LD_ADDR_VAR 0 1
4523: PUSH
4524: LD_INT 2
4526: PUSH
4527: LD_INT 4
4529: PUSH
4530: LD_INT 5
4532: PUSH
4533: LD_INT 6
4535: PUSH
4536: LD_INT 7
4538: PUSH
4539: LD_INT 8
4541: PUSH
4542: LD_INT 9
4544: PUSH
4545: LD_INT 10
4547: PUSH
4548: LD_INT 11
4550: PUSH
4551: LD_INT 12
4553: PUSH
4554: LD_INT 13
4556: PUSH
4557: LD_INT 14
4559: PUSH
4560: LD_INT 15
4562: PUSH
4563: LD_INT 16
4565: PUSH
4566: LD_INT 17
4568: PUSH
4569: LD_INT 18
4571: PUSH
4572: LD_INT 19
4574: PUSH
4575: LD_INT 20
4577: PUSH
4578: LD_INT 21
4580: PUSH
4581: LD_INT 22
4583: PUSH
4584: LD_INT 23
4586: PUSH
4587: LD_INT 24
4589: PUSH
4590: LD_INT 25
4592: PUSH
4593: LD_INT 26
4595: PUSH
4596: LD_INT 28
4598: PUSH
4599: LD_INT 30
4601: PUSH
4602: LD_INT 31
4604: PUSH
4605: LD_INT 32
4607: PUSH
4608: LD_INT 36
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 101
4644: PUSH
4645: LD_INT 102
4647: PUSH
4648: LD_INT 103
4650: PUSH
4651: LD_INT 104
4653: PUSH
4654: LD_INT 105
4656: PUSH
4657: LD_INT 106
4659: PUSH
4660: LD_INT 107
4662: PUSH
4663: LD_INT 108
4665: PUSH
4666: LD_INT 109
4668: PUSH
4669: LD_INT 110
4671: PUSH
4672: LD_INT 111
4674: PUSH
4675: LD_INT 112
4677: PUSH
4678: LD_INT 114
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: ST_TO_ADDR
4700: GO 6487
4702: LD_INT 11
4704: DOUBLE
4705: EQUAL
4706: IFTRUE 4710
4708: GO 4902
4710: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4711: LD_ADDR_VAR 0 1
4715: PUSH
4716: LD_INT 2
4718: PUSH
4719: LD_INT 3
4721: PUSH
4722: LD_INT 4
4724: PUSH
4725: LD_INT 5
4727: PUSH
4728: LD_INT 6
4730: PUSH
4731: LD_INT 7
4733: PUSH
4734: LD_INT 8
4736: PUSH
4737: LD_INT 9
4739: PUSH
4740: LD_INT 10
4742: PUSH
4743: LD_INT 11
4745: PUSH
4746: LD_INT 12
4748: PUSH
4749: LD_INT 13
4751: PUSH
4752: LD_INT 14
4754: PUSH
4755: LD_INT 15
4757: PUSH
4758: LD_INT 16
4760: PUSH
4761: LD_INT 17
4763: PUSH
4764: LD_INT 18
4766: PUSH
4767: LD_INT 19
4769: PUSH
4770: LD_INT 20
4772: PUSH
4773: LD_INT 21
4775: PUSH
4776: LD_INT 22
4778: PUSH
4779: LD_INT 23
4781: PUSH
4782: LD_INT 24
4784: PUSH
4785: LD_INT 25
4787: PUSH
4788: LD_INT 26
4790: PUSH
4791: LD_INT 28
4793: PUSH
4794: LD_INT 30
4796: PUSH
4797: LD_INT 31
4799: PUSH
4800: LD_INT 32
4802: PUSH
4803: LD_INT 34
4805: PUSH
4806: LD_INT 36
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 101
4844: PUSH
4845: LD_INT 102
4847: PUSH
4848: LD_INT 103
4850: PUSH
4851: LD_INT 104
4853: PUSH
4854: LD_INT 105
4856: PUSH
4857: LD_INT 106
4859: PUSH
4860: LD_INT 107
4862: PUSH
4863: LD_INT 108
4865: PUSH
4866: LD_INT 109
4868: PUSH
4869: LD_INT 110
4871: PUSH
4872: LD_INT 111
4874: PUSH
4875: LD_INT 112
4877: PUSH
4878: LD_INT 114
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: ST_TO_ADDR
4900: GO 6487
4902: LD_INT 12
4904: DOUBLE
4905: EQUAL
4906: IFTRUE 4910
4908: GO 5118
4910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4911: LD_ADDR_VAR 0 1
4915: PUSH
4916: LD_INT 1
4918: PUSH
4919: LD_INT 2
4921: PUSH
4922: LD_INT 3
4924: PUSH
4925: LD_INT 4
4927: PUSH
4928: LD_INT 5
4930: PUSH
4931: LD_INT 6
4933: PUSH
4934: LD_INT 7
4936: PUSH
4937: LD_INT 8
4939: PUSH
4940: LD_INT 9
4942: PUSH
4943: LD_INT 10
4945: PUSH
4946: LD_INT 11
4948: PUSH
4949: LD_INT 12
4951: PUSH
4952: LD_INT 13
4954: PUSH
4955: LD_INT 14
4957: PUSH
4958: LD_INT 15
4960: PUSH
4961: LD_INT 16
4963: PUSH
4964: LD_INT 17
4966: PUSH
4967: LD_INT 18
4969: PUSH
4970: LD_INT 19
4972: PUSH
4973: LD_INT 20
4975: PUSH
4976: LD_INT 21
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 23
4984: PUSH
4985: LD_INT 24
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 26
4993: PUSH
4994: LD_INT 27
4996: PUSH
4997: LD_INT 28
4999: PUSH
5000: LD_INT 30
5002: PUSH
5003: LD_INT 31
5005: PUSH
5006: LD_INT 32
5008: PUSH
5009: LD_INT 33
5011: PUSH
5012: LD_INT 34
5014: PUSH
5015: LD_INT 36
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: PUSH
5054: LD_INT 101
5056: PUSH
5057: LD_INT 102
5059: PUSH
5060: LD_INT 103
5062: PUSH
5063: LD_INT 104
5065: PUSH
5066: LD_INT 105
5068: PUSH
5069: LD_INT 106
5071: PUSH
5072: LD_INT 107
5074: PUSH
5075: LD_INT 108
5077: PUSH
5078: LD_INT 109
5080: PUSH
5081: LD_INT 110
5083: PUSH
5084: LD_INT 111
5086: PUSH
5087: LD_INT 112
5089: PUSH
5090: LD_INT 113
5092: PUSH
5093: LD_INT 114
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: ST_TO_ADDR
5116: GO 6487
5118: LD_INT 13
5120: DOUBLE
5121: EQUAL
5122: IFTRUE 5126
5124: GO 5322
5126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5127: LD_ADDR_VAR 0 1
5131: PUSH
5132: LD_INT 1
5134: PUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: LD_INT 4
5143: PUSH
5144: LD_INT 5
5146: PUSH
5147: LD_INT 8
5149: PUSH
5150: LD_INT 9
5152: PUSH
5153: LD_INT 10
5155: PUSH
5156: LD_INT 11
5158: PUSH
5159: LD_INT 12
5161: PUSH
5162: LD_INT 14
5164: PUSH
5165: LD_INT 15
5167: PUSH
5168: LD_INT 16
5170: PUSH
5171: LD_INT 17
5173: PUSH
5174: LD_INT 18
5176: PUSH
5177: LD_INT 19
5179: PUSH
5180: LD_INT 20
5182: PUSH
5183: LD_INT 21
5185: PUSH
5186: LD_INT 22
5188: PUSH
5189: LD_INT 23
5191: PUSH
5192: LD_INT 24
5194: PUSH
5195: LD_INT 25
5197: PUSH
5198: LD_INT 26
5200: PUSH
5201: LD_INT 27
5203: PUSH
5204: LD_INT 28
5206: PUSH
5207: LD_INT 30
5209: PUSH
5210: LD_INT 31
5212: PUSH
5213: LD_INT 32
5215: PUSH
5216: LD_INT 33
5218: PUSH
5219: LD_INT 34
5221: PUSH
5222: LD_INT 36
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: PUSH
5258: LD_INT 101
5260: PUSH
5261: LD_INT 102
5263: PUSH
5264: LD_INT 103
5266: PUSH
5267: LD_INT 104
5269: PUSH
5270: LD_INT 105
5272: PUSH
5273: LD_INT 106
5275: PUSH
5276: LD_INT 107
5278: PUSH
5279: LD_INT 108
5281: PUSH
5282: LD_INT 109
5284: PUSH
5285: LD_INT 110
5287: PUSH
5288: LD_INT 111
5290: PUSH
5291: LD_INT 112
5293: PUSH
5294: LD_INT 113
5296: PUSH
5297: LD_INT 114
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: ST_TO_ADDR
5320: GO 6487
5322: LD_INT 14
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5542
5330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5331: LD_ADDR_VAR 0 1
5335: PUSH
5336: LD_INT 1
5338: PUSH
5339: LD_INT 2
5341: PUSH
5342: LD_INT 3
5344: PUSH
5345: LD_INT 4
5347: PUSH
5348: LD_INT 5
5350: PUSH
5351: LD_INT 6
5353: PUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: LD_INT 11
5368: PUSH
5369: LD_INT 12
5371: PUSH
5372: LD_INT 13
5374: PUSH
5375: LD_INT 14
5377: PUSH
5378: LD_INT 15
5380: PUSH
5381: LD_INT 16
5383: PUSH
5384: LD_INT 17
5386: PUSH
5387: LD_INT 18
5389: PUSH
5390: LD_INT 19
5392: PUSH
5393: LD_INT 20
5395: PUSH
5396: LD_INT 21
5398: PUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 23
5404: PUSH
5405: LD_INT 24
5407: PUSH
5408: LD_INT 25
5410: PUSH
5411: LD_INT 26
5413: PUSH
5414: LD_INT 27
5416: PUSH
5417: LD_INT 28
5419: PUSH
5420: LD_INT 29
5422: PUSH
5423: LD_INT 30
5425: PUSH
5426: LD_INT 31
5428: PUSH
5429: LD_INT 32
5431: PUSH
5432: LD_INT 33
5434: PUSH
5435: LD_INT 34
5437: PUSH
5438: LD_INT 36
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: PUSH
5478: LD_INT 101
5480: PUSH
5481: LD_INT 102
5483: PUSH
5484: LD_INT 103
5486: PUSH
5487: LD_INT 104
5489: PUSH
5490: LD_INT 105
5492: PUSH
5493: LD_INT 106
5495: PUSH
5496: LD_INT 107
5498: PUSH
5499: LD_INT 108
5501: PUSH
5502: LD_INT 109
5504: PUSH
5505: LD_INT 110
5507: PUSH
5508: LD_INT 111
5510: PUSH
5511: LD_INT 112
5513: PUSH
5514: LD_INT 113
5516: PUSH
5517: LD_INT 114
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: ST_TO_ADDR
5540: GO 6487
5542: LD_INT 15
5544: DOUBLE
5545: EQUAL
5546: IFTRUE 5550
5548: GO 5762
5550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5551: LD_ADDR_VAR 0 1
5555: PUSH
5556: LD_INT 1
5558: PUSH
5559: LD_INT 2
5561: PUSH
5562: LD_INT 3
5564: PUSH
5565: LD_INT 4
5567: PUSH
5568: LD_INT 5
5570: PUSH
5571: LD_INT 6
5573: PUSH
5574: LD_INT 7
5576: PUSH
5577: LD_INT 8
5579: PUSH
5580: LD_INT 9
5582: PUSH
5583: LD_INT 10
5585: PUSH
5586: LD_INT 11
5588: PUSH
5589: LD_INT 12
5591: PUSH
5592: LD_INT 13
5594: PUSH
5595: LD_INT 14
5597: PUSH
5598: LD_INT 15
5600: PUSH
5601: LD_INT 16
5603: PUSH
5604: LD_INT 17
5606: PUSH
5607: LD_INT 18
5609: PUSH
5610: LD_INT 19
5612: PUSH
5613: LD_INT 20
5615: PUSH
5616: LD_INT 21
5618: PUSH
5619: LD_INT 22
5621: PUSH
5622: LD_INT 23
5624: PUSH
5625: LD_INT 24
5627: PUSH
5628: LD_INT 25
5630: PUSH
5631: LD_INT 26
5633: PUSH
5634: LD_INT 27
5636: PUSH
5637: LD_INT 28
5639: PUSH
5640: LD_INT 29
5642: PUSH
5643: LD_INT 30
5645: PUSH
5646: LD_INT 31
5648: PUSH
5649: LD_INT 32
5651: PUSH
5652: LD_INT 33
5654: PUSH
5655: LD_INT 34
5657: PUSH
5658: LD_INT 36
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_INT 101
5700: PUSH
5701: LD_INT 102
5703: PUSH
5704: LD_INT 103
5706: PUSH
5707: LD_INT 104
5709: PUSH
5710: LD_INT 105
5712: PUSH
5713: LD_INT 106
5715: PUSH
5716: LD_INT 107
5718: PUSH
5719: LD_INT 108
5721: PUSH
5722: LD_INT 109
5724: PUSH
5725: LD_INT 110
5727: PUSH
5728: LD_INT 111
5730: PUSH
5731: LD_INT 112
5733: PUSH
5734: LD_INT 113
5736: PUSH
5737: LD_INT 114
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: ST_TO_ADDR
5760: GO 6487
5762: LD_INT 16
5764: DOUBLE
5765: EQUAL
5766: IFTRUE 5770
5768: GO 5894
5770: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5771: LD_ADDR_VAR 0 1
5775: PUSH
5776: LD_INT 2
5778: PUSH
5779: LD_INT 4
5781: PUSH
5782: LD_INT 5
5784: PUSH
5785: LD_INT 7
5787: PUSH
5788: LD_INT 11
5790: PUSH
5791: LD_INT 12
5793: PUSH
5794: LD_INT 15
5796: PUSH
5797: LD_INT 16
5799: PUSH
5800: LD_INT 20
5802: PUSH
5803: LD_INT 21
5805: PUSH
5806: LD_INT 22
5808: PUSH
5809: LD_INT 23
5811: PUSH
5812: LD_INT 25
5814: PUSH
5815: LD_INT 26
5817: PUSH
5818: LD_INT 30
5820: PUSH
5821: LD_INT 31
5823: PUSH
5824: LD_INT 32
5826: PUSH
5827: LD_INT 33
5829: PUSH
5830: LD_INT 34
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: PUSH
5854: LD_INT 101
5856: PUSH
5857: LD_INT 102
5859: PUSH
5860: LD_INT 103
5862: PUSH
5863: LD_INT 106
5865: PUSH
5866: LD_INT 108
5868: PUSH
5869: LD_INT 112
5871: PUSH
5872: LD_INT 113
5874: PUSH
5875: LD_INT 114
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: ST_TO_ADDR
5892: GO 6487
5894: LD_INT 17
5896: DOUBLE
5897: EQUAL
5898: IFTRUE 5902
5900: GO 6114
5902: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_INT 1
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: LD_INT 3
5916: PUSH
5917: LD_INT 4
5919: PUSH
5920: LD_INT 5
5922: PUSH
5923: LD_INT 6
5925: PUSH
5926: LD_INT 7
5928: PUSH
5929: LD_INT 8
5931: PUSH
5932: LD_INT 9
5934: PUSH
5935: LD_INT 10
5937: PUSH
5938: LD_INT 11
5940: PUSH
5941: LD_INT 12
5943: PUSH
5944: LD_INT 13
5946: PUSH
5947: LD_INT 14
5949: PUSH
5950: LD_INT 15
5952: PUSH
5953: LD_INT 16
5955: PUSH
5956: LD_INT 17
5958: PUSH
5959: LD_INT 18
5961: PUSH
5962: LD_INT 19
5964: PUSH
5965: LD_INT 20
5967: PUSH
5968: LD_INT 21
5970: PUSH
5971: LD_INT 22
5973: PUSH
5974: LD_INT 23
5976: PUSH
5977: LD_INT 24
5979: PUSH
5980: LD_INT 25
5982: PUSH
5983: LD_INT 26
5985: PUSH
5986: LD_INT 27
5988: PUSH
5989: LD_INT 28
5991: PUSH
5992: LD_INT 29
5994: PUSH
5995: LD_INT 30
5997: PUSH
5998: LD_INT 31
6000: PUSH
6001: LD_INT 32
6003: PUSH
6004: LD_INT 33
6006: PUSH
6007: LD_INT 34
6009: PUSH
6010: LD_INT 36
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 101
6052: PUSH
6053: LD_INT 102
6055: PUSH
6056: LD_INT 103
6058: PUSH
6059: LD_INT 104
6061: PUSH
6062: LD_INT 105
6064: PUSH
6065: LD_INT 106
6067: PUSH
6068: LD_INT 107
6070: PUSH
6071: LD_INT 108
6073: PUSH
6074: LD_INT 109
6076: PUSH
6077: LD_INT 110
6079: PUSH
6080: LD_INT 111
6082: PUSH
6083: LD_INT 112
6085: PUSH
6086: LD_INT 113
6088: PUSH
6089: LD_INT 114
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: ST_TO_ADDR
6112: GO 6487
6114: LD_INT 18
6116: DOUBLE
6117: EQUAL
6118: IFTRUE 6122
6120: GO 6258
6122: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6123: LD_ADDR_VAR 0 1
6127: PUSH
6128: LD_INT 2
6130: PUSH
6131: LD_INT 4
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 7
6139: PUSH
6140: LD_INT 11
6142: PUSH
6143: LD_INT 12
6145: PUSH
6146: LD_INT 15
6148: PUSH
6149: LD_INT 16
6151: PUSH
6152: LD_INT 20
6154: PUSH
6155: LD_INT 21
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 23
6163: PUSH
6164: LD_INT 25
6166: PUSH
6167: LD_INT 26
6169: PUSH
6170: LD_INT 30
6172: PUSH
6173: LD_INT 31
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 33
6181: PUSH
6182: LD_INT 34
6184: PUSH
6185: LD_INT 35
6187: PUSH
6188: LD_INT 36
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 101
6216: PUSH
6217: LD_INT 102
6219: PUSH
6220: LD_INT 103
6222: PUSH
6223: LD_INT 106
6225: PUSH
6226: LD_INT 108
6228: PUSH
6229: LD_INT 112
6231: PUSH
6232: LD_INT 113
6234: PUSH
6235: LD_INT 114
6237: PUSH
6238: LD_INT 115
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: ST_TO_ADDR
6256: GO 6487
6258: LD_INT 19
6260: DOUBLE
6261: EQUAL
6262: IFTRUE 6266
6264: GO 6486
6266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_INT 1
6274: PUSH
6275: LD_INT 2
6277: PUSH
6278: LD_INT 3
6280: PUSH
6281: LD_INT 4
6283: PUSH
6284: LD_INT 5
6286: PUSH
6287: LD_INT 6
6289: PUSH
6290: LD_INT 7
6292: PUSH
6293: LD_INT 8
6295: PUSH
6296: LD_INT 9
6298: PUSH
6299: LD_INT 10
6301: PUSH
6302: LD_INT 11
6304: PUSH
6305: LD_INT 12
6307: PUSH
6308: LD_INT 13
6310: PUSH
6311: LD_INT 14
6313: PUSH
6314: LD_INT 15
6316: PUSH
6317: LD_INT 16
6319: PUSH
6320: LD_INT 17
6322: PUSH
6323: LD_INT 18
6325: PUSH
6326: LD_INT 19
6328: PUSH
6329: LD_INT 20
6331: PUSH
6332: LD_INT 21
6334: PUSH
6335: LD_INT 22
6337: PUSH
6338: LD_INT 23
6340: PUSH
6341: LD_INT 24
6343: PUSH
6344: LD_INT 25
6346: PUSH
6347: LD_INT 26
6349: PUSH
6350: LD_INT 27
6352: PUSH
6353: LD_INT 28
6355: PUSH
6356: LD_INT 29
6358: PUSH
6359: LD_INT 30
6361: PUSH
6362: LD_INT 31
6364: PUSH
6365: LD_INT 32
6367: PUSH
6368: LD_INT 33
6370: PUSH
6371: LD_INT 34
6373: PUSH
6374: LD_INT 35
6376: PUSH
6377: LD_INT 36
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 101
6420: PUSH
6421: LD_INT 102
6423: PUSH
6424: LD_INT 103
6426: PUSH
6427: LD_INT 104
6429: PUSH
6430: LD_INT 105
6432: PUSH
6433: LD_INT 106
6435: PUSH
6436: LD_INT 107
6438: PUSH
6439: LD_INT 108
6441: PUSH
6442: LD_INT 109
6444: PUSH
6445: LD_INT 110
6447: PUSH
6448: LD_INT 111
6450: PUSH
6451: LD_INT 112
6453: PUSH
6454: LD_INT 113
6456: PUSH
6457: LD_INT 114
6459: PUSH
6460: LD_INT 115
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: ST_TO_ADDR
6484: GO 6487
6486: POP
// end else
6487: GO 6706
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6489: LD_ADDR_VAR 0 1
6493: PUSH
6494: LD_INT 1
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: LD_INT 4
6505: PUSH
6506: LD_INT 5
6508: PUSH
6509: LD_INT 6
6511: PUSH
6512: LD_INT 7
6514: PUSH
6515: LD_INT 8
6517: PUSH
6518: LD_INT 9
6520: PUSH
6521: LD_INT 10
6523: PUSH
6524: LD_INT 11
6526: PUSH
6527: LD_INT 12
6529: PUSH
6530: LD_INT 13
6532: PUSH
6533: LD_INT 14
6535: PUSH
6536: LD_INT 15
6538: PUSH
6539: LD_INT 16
6541: PUSH
6542: LD_INT 17
6544: PUSH
6545: LD_INT 18
6547: PUSH
6548: LD_INT 19
6550: PUSH
6551: LD_INT 20
6553: PUSH
6554: LD_INT 21
6556: PUSH
6557: LD_INT 22
6559: PUSH
6560: LD_INT 23
6562: PUSH
6563: LD_INT 24
6565: PUSH
6566: LD_INT 25
6568: PUSH
6569: LD_INT 26
6571: PUSH
6572: LD_INT 27
6574: PUSH
6575: LD_INT 28
6577: PUSH
6578: LD_INT 29
6580: PUSH
6581: LD_INT 30
6583: PUSH
6584: LD_INT 31
6586: PUSH
6587: LD_INT 32
6589: PUSH
6590: LD_INT 33
6592: PUSH
6593: LD_INT 34
6595: PUSH
6596: LD_INT 35
6598: PUSH
6599: LD_INT 36
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: PUSH
6640: LD_INT 101
6642: PUSH
6643: LD_INT 102
6645: PUSH
6646: LD_INT 103
6648: PUSH
6649: LD_INT 104
6651: PUSH
6652: LD_INT 105
6654: PUSH
6655: LD_INT 106
6657: PUSH
6658: LD_INT 107
6660: PUSH
6661: LD_INT 108
6663: PUSH
6664: LD_INT 109
6666: PUSH
6667: LD_INT 110
6669: PUSH
6670: LD_INT 111
6672: PUSH
6673: LD_INT 112
6675: PUSH
6676: LD_INT 113
6678: PUSH
6679: LD_INT 114
6681: PUSH
6682: LD_INT 115
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: ST_TO_ADDR
// if result then
6706: LD_VAR 0 1
6710: IFFALSE 6999
// begin normal :=  ;
6712: LD_ADDR_VAR 0 3
6716: PUSH
6717: LD_STRING 
6719: ST_TO_ADDR
// hardcore :=  ;
6720: LD_ADDR_VAR 0 4
6724: PUSH
6725: LD_STRING 
6727: ST_TO_ADDR
// for i = 1 to normalCounter do
6728: LD_ADDR_VAR 0 5
6732: PUSH
6733: DOUBLE
6734: LD_INT 1
6736: DEC
6737: ST_TO_ADDR
6738: LD_EXP 18
6742: PUSH
6743: FOR_TO
6744: IFFALSE 6845
// begin tmp := 0 ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_STRING 0
6753: ST_TO_ADDR
// if result [ 1 ] then
6754: LD_VAR 0 1
6758: PUSH
6759: LD_INT 1
6761: ARRAY
6762: IFFALSE 6827
// if result [ 1 ] [ 1 ] = i then
6764: LD_VAR 0 1
6768: PUSH
6769: LD_INT 1
6771: ARRAY
6772: PUSH
6773: LD_INT 1
6775: ARRAY
6776: PUSH
6777: LD_VAR 0 5
6781: EQUAL
6782: IFFALSE 6827
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6784: LD_ADDR_VAR 0 1
6788: PUSH
6789: LD_VAR 0 1
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_VAR 0 1
6801: PUSH
6802: LD_INT 1
6804: ARRAY
6805: PPUSH
6806: LD_INT 1
6808: PPUSH
6809: CALL_OW 3
6813: PPUSH
6814: CALL_OW 1
6818: ST_TO_ADDR
// tmp := 1 ;
6819: LD_ADDR_VAR 0 2
6823: PUSH
6824: LD_STRING 1
6826: ST_TO_ADDR
// end ; normal := normal & tmp ;
6827: LD_ADDR_VAR 0 3
6831: PUSH
6832: LD_VAR 0 3
6836: PUSH
6837: LD_VAR 0 2
6841: STR
6842: ST_TO_ADDR
// end ;
6843: GO 6743
6845: POP
6846: POP
// for i = 1 to hardcoreCounter do
6847: LD_ADDR_VAR 0 5
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_EXP 19
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6968
// begin tmp := 0 ;
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_STRING 0
6872: ST_TO_ADDR
// if result [ 2 ] then
6873: LD_VAR 0 1
6877: PUSH
6878: LD_INT 2
6880: ARRAY
6881: IFFALSE 6950
// if result [ 2 ] [ 1 ] = 100 + i then
6883: LD_VAR 0 1
6887: PUSH
6888: LD_INT 2
6890: ARRAY
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PUSH
6896: LD_INT 100
6898: PUSH
6899: LD_VAR 0 5
6903: PLUS
6904: EQUAL
6905: IFFALSE 6950
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6907: LD_ADDR_VAR 0 1
6911: PUSH
6912: LD_VAR 0 1
6916: PPUSH
6917: LD_INT 2
6919: PPUSH
6920: LD_VAR 0 1
6924: PUSH
6925: LD_INT 2
6927: ARRAY
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 3
6936: PPUSH
6937: CALL_OW 1
6941: ST_TO_ADDR
// tmp := 1 ;
6942: LD_ADDR_VAR 0 2
6946: PUSH
6947: LD_STRING 1
6949: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6950: LD_ADDR_VAR 0 4
6954: PUSH
6955: LD_VAR 0 4
6959: PUSH
6960: LD_VAR 0 2
6964: STR
6965: ST_TO_ADDR
// end ;
6966: GO 6862
6968: POP
6969: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6970: LD_STRING getStreamItemsFromMission("
6972: PUSH
6973: LD_VAR 0 3
6977: STR
6978: PUSH
6979: LD_STRING ","
6981: STR
6982: PUSH
6983: LD_VAR 0 4
6987: STR
6988: PUSH
6989: LD_STRING ")
6991: STR
6992: PPUSH
6993: CALL_OW 559
// end else
6997: GO 7006
// ToLua ( getStreamItemsFromMission("","") ) ;
6999: LD_STRING getStreamItemsFromMission("","")
7001: PPUSH
7002: CALL_OW 559
// end ;
7006: LD_VAR 0 1
7010: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7011: LD_EXP 17
7015: PUSH
7016: LD_EXP 22
7020: AND
7021: IFFALSE 7145
7023: GO 7025
7025: DISABLE
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
// begin enable ;
7030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7031: LD_ADDR_VAR 0 2
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_OWVAR 2
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: LD_INT 34
7053: PUSH
7054: LD_INT 7
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 34
7063: PUSH
7064: LD_INT 45
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 34
7073: PUSH
7074: LD_INT 28
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 34
7083: PUSH
7084: LD_INT 47
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PPUSH
7102: CALL_OW 69
7106: ST_TO_ADDR
// if not tmp then
7107: LD_VAR 0 2
7111: NOT
7112: IFFALSE 7116
// exit ;
7114: GO 7145
// for i in tmp do
7116: LD_ADDR_VAR 0 1
7120: PUSH
7121: LD_VAR 0 2
7125: PUSH
7126: FOR_IN
7127: IFFALSE 7143
// begin SetLives ( i , 0 ) ;
7129: LD_VAR 0 1
7133: PPUSH
7134: LD_INT 0
7136: PPUSH
7137: CALL_OW 234
// end ;
7141: GO 7126
7143: POP
7144: POP
// end ;
7145: PPOPN 2
7147: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7148: LD_EXP 17
7152: PUSH
7153: LD_EXP 23
7157: AND
7158: IFFALSE 7242
7160: GO 7162
7162: DISABLE
7163: LD_INT 0
7165: PPUSH
7166: PPUSH
// begin enable ;
7167: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7168: LD_ADDR_VAR 0 2
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_OWVAR 2
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 32
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: ST_TO_ADDR
// if not tmp then
7204: LD_VAR 0 2
7208: NOT
7209: IFFALSE 7213
// exit ;
7211: GO 7242
// for i in tmp do
7213: LD_ADDR_VAR 0 1
7217: PUSH
7218: LD_VAR 0 2
7222: PUSH
7223: FOR_IN
7224: IFFALSE 7240
// begin SetLives ( i , 0 ) ;
7226: LD_VAR 0 1
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: CALL_OW 234
// end ;
7238: GO 7223
7240: POP
7241: POP
// end ;
7242: PPOPN 2
7244: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7245: LD_EXP 17
7249: PUSH
7250: LD_EXP 20
7254: AND
7255: IFFALSE 7348
7257: GO 7259
7259: DISABLE
7260: LD_INT 0
7262: PPUSH
// begin enable ;
7263: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7264: LD_ADDR_VAR 0 1
7268: PUSH
7269: LD_INT 22
7271: PUSH
7272: LD_OWVAR 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 2
7283: PUSH
7284: LD_INT 25
7286: PUSH
7287: LD_INT 5
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PUSH
7294: LD_INT 25
7296: PUSH
7297: LD_INT 9
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 25
7306: PUSH
7307: LD_INT 8
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: PUSH
7329: FOR_IN
7330: IFFALSE 7346
// begin SetClass ( i , 1 ) ;
7332: LD_VAR 0 1
7336: PPUSH
7337: LD_INT 1
7339: PPUSH
7340: CALL_OW 336
// end ;
7344: GO 7329
7346: POP
7347: POP
// end ;
7348: PPOPN 1
7350: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7351: LD_EXP 17
7355: PUSH
7356: LD_EXP 21
7360: AND
7361: PUSH
7362: LD_OWVAR 65
7366: PUSH
7367: LD_INT 7
7369: LESS
7370: AND
7371: IFFALSE 7385
7373: GO 7375
7375: DISABLE
// begin enable ;
7376: ENABLE
// game_speed := 7 ;
7377: LD_ADDR_OWVAR 65
7381: PUSH
7382: LD_INT 7
7384: ST_TO_ADDR
// end ;
7385: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7386: LD_EXP 17
7390: PUSH
7391: LD_EXP 24
7395: AND
7396: IFFALSE 7598
7398: GO 7400
7400: DISABLE
7401: LD_INT 0
7403: PPUSH
7404: PPUSH
7405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7406: LD_ADDR_VAR 0 3
7410: PUSH
7411: LD_INT 81
7413: PUSH
7414: LD_OWVAR 2
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: LD_INT 21
7425: PUSH
7426: LD_INT 1
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 69
7441: ST_TO_ADDR
// if not tmp then
7442: LD_VAR 0 3
7446: NOT
7447: IFFALSE 7451
// exit ;
7449: GO 7598
// if tmp > 5 then
7451: LD_VAR 0 3
7455: PUSH
7456: LD_INT 5
7458: GREATER
7459: IFFALSE 7471
// k := 5 else
7461: LD_ADDR_VAR 0 2
7465: PUSH
7466: LD_INT 5
7468: ST_TO_ADDR
7469: GO 7481
// k := tmp ;
7471: LD_ADDR_VAR 0 2
7475: PUSH
7476: LD_VAR 0 3
7480: ST_TO_ADDR
// for i := 1 to k do
7481: LD_ADDR_VAR 0 1
7485: PUSH
7486: DOUBLE
7487: LD_INT 1
7489: DEC
7490: ST_TO_ADDR
7491: LD_VAR 0 2
7495: PUSH
7496: FOR_TO
7497: IFFALSE 7596
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7499: LD_VAR 0 3
7503: PUSH
7504: LD_VAR 0 1
7508: ARRAY
7509: PPUSH
7510: LD_VAR 0 1
7514: PUSH
7515: LD_INT 4
7517: MOD
7518: PUSH
7519: LD_INT 1
7521: PLUS
7522: PPUSH
7523: CALL_OW 259
7527: PUSH
7528: LD_INT 10
7530: LESS
7531: IFFALSE 7594
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7533: LD_VAR 0 3
7537: PUSH
7538: LD_VAR 0 1
7542: ARRAY
7543: PPUSH
7544: LD_VAR 0 1
7548: PUSH
7549: LD_INT 4
7551: MOD
7552: PUSH
7553: LD_INT 1
7555: PLUS
7556: PPUSH
7557: LD_VAR 0 3
7561: PUSH
7562: LD_VAR 0 1
7566: ARRAY
7567: PPUSH
7568: LD_VAR 0 1
7572: PUSH
7573: LD_INT 4
7575: MOD
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: PPUSH
7581: CALL_OW 259
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: PPUSH
7590: CALL_OW 237
7594: GO 7496
7596: POP
7597: POP
// end ;
7598: PPOPN 3
7600: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7601: LD_EXP 17
7605: PUSH
7606: LD_EXP 25
7610: AND
7611: IFFALSE 7631
7613: GO 7615
7615: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7616: LD_INT 4
7618: PPUSH
7619: LD_OWVAR 2
7623: PPUSH
7624: LD_INT 0
7626: PPUSH
7627: CALL_OW 324
7631: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7632: LD_EXP 17
7636: PUSH
7637: LD_EXP 54
7641: AND
7642: IFFALSE 7662
7644: GO 7646
7646: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7647: LD_INT 19
7649: PPUSH
7650: LD_OWVAR 2
7654: PPUSH
7655: LD_INT 0
7657: PPUSH
7658: CALL_OW 324
7662: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7663: LD_EXP 17
7667: PUSH
7668: LD_EXP 26
7672: AND
7673: IFFALSE 7775
7675: GO 7677
7677: DISABLE
7678: LD_INT 0
7680: PPUSH
7681: PPUSH
// begin enable ;
7682: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7683: LD_ADDR_VAR 0 2
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_OWVAR 2
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: LD_INT 34
7705: PUSH
7706: LD_INT 11
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 34
7715: PUSH
7716: LD_INT 30
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PPUSH
7732: CALL_OW 69
7736: ST_TO_ADDR
// if not tmp then
7737: LD_VAR 0 2
7741: NOT
7742: IFFALSE 7746
// exit ;
7744: GO 7775
// for i in tmp do
7746: LD_ADDR_VAR 0 1
7750: PUSH
7751: LD_VAR 0 2
7755: PUSH
7756: FOR_IN
7757: IFFALSE 7773
// begin SetLives ( i , 0 ) ;
7759: LD_VAR 0 1
7763: PPUSH
7764: LD_INT 0
7766: PPUSH
7767: CALL_OW 234
// end ;
7771: GO 7756
7773: POP
7774: POP
// end ;
7775: PPOPN 2
7777: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7778: LD_EXP 17
7782: PUSH
7783: LD_EXP 27
7787: AND
7788: IFFALSE 7808
7790: GO 7792
7792: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7793: LD_INT 32
7795: PPUSH
7796: LD_OWVAR 2
7800: PPUSH
7801: LD_INT 0
7803: PPUSH
7804: CALL_OW 324
7808: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7809: LD_EXP 17
7813: PUSH
7814: LD_EXP 28
7818: AND
7819: IFFALSE 8000
7821: GO 7823
7823: DISABLE
7824: LD_INT 0
7826: PPUSH
7827: PPUSH
7828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7829: LD_ADDR_VAR 0 2
7833: PUSH
7834: LD_INT 22
7836: PUSH
7837: LD_OWVAR 2
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 33
7848: PUSH
7849: LD_INT 3
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PPUSH
7860: CALL_OW 69
7864: ST_TO_ADDR
// if not tmp then
7865: LD_VAR 0 2
7869: NOT
7870: IFFALSE 7874
// exit ;
7872: GO 8000
// side := 0 ;
7874: LD_ADDR_VAR 0 3
7878: PUSH
7879: LD_INT 0
7881: ST_TO_ADDR
// for i := 1 to 8 do
7882: LD_ADDR_VAR 0 1
7886: PUSH
7887: DOUBLE
7888: LD_INT 1
7890: DEC
7891: ST_TO_ADDR
7892: LD_INT 8
7894: PUSH
7895: FOR_TO
7896: IFFALSE 7944
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7898: LD_OWVAR 2
7902: PUSH
7903: LD_VAR 0 1
7907: NONEQUAL
7908: PUSH
7909: LD_OWVAR 2
7913: PPUSH
7914: LD_VAR 0 1
7918: PPUSH
7919: CALL_OW 81
7923: PUSH
7924: LD_INT 2
7926: EQUAL
7927: AND
7928: IFFALSE 7942
// begin side := i ;
7930: LD_ADDR_VAR 0 3
7934: PUSH
7935: LD_VAR 0 1
7939: ST_TO_ADDR
// break ;
7940: GO 7944
// end ;
7942: GO 7895
7944: POP
7945: POP
// if not side then
7946: LD_VAR 0 3
7950: NOT
7951: IFFALSE 7955
// exit ;
7953: GO 8000
// for i := 1 to tmp do
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: DOUBLE
7961: LD_INT 1
7963: DEC
7964: ST_TO_ADDR
7965: LD_VAR 0 2
7969: PUSH
7970: FOR_TO
7971: IFFALSE 7998
// if Prob ( 60 ) then
7973: LD_INT 60
7975: PPUSH
7976: CALL_OW 13
7980: IFFALSE 7996
// SetSide ( i , side ) ;
7982: LD_VAR 0 1
7986: PPUSH
7987: LD_VAR 0 3
7991: PPUSH
7992: CALL_OW 235
7996: GO 7970
7998: POP
7999: POP
// end ;
8000: PPOPN 3
8002: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8003: LD_EXP 17
8007: PUSH
8008: LD_EXP 30
8012: AND
8013: IFFALSE 8132
8015: GO 8017
8017: DISABLE
8018: LD_INT 0
8020: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8021: LD_ADDR_VAR 0 1
8025: PUSH
8026: LD_INT 22
8028: PUSH
8029: LD_OWVAR 2
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 21
8040: PUSH
8041: LD_INT 1
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 3
8050: PUSH
8051: LD_INT 23
8053: PUSH
8054: LD_INT 0
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8130
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8078: LD_VAR 0 1
8082: PPUSH
8083: CALL_OW 257
8087: PUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: LD_INT 3
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: IN
8106: IFFALSE 8128
// SetClass ( un , rand ( 1 , 4 ) ) ;
8108: LD_VAR 0 1
8112: PPUSH
8113: LD_INT 1
8115: PPUSH
8116: LD_INT 4
8118: PPUSH
8119: CALL_OW 12
8123: PPUSH
8124: CALL_OW 336
8128: GO 8075
8130: POP
8131: POP
// end ;
8132: PPOPN 1
8134: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8135: LD_EXP 17
8139: PUSH
8140: LD_EXP 29
8144: AND
8145: IFFALSE 8224
8147: GO 8149
8149: DISABLE
8150: LD_INT 0
8152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8153: LD_ADDR_VAR 0 1
8157: PUSH
8158: LD_INT 22
8160: PUSH
8161: LD_OWVAR 2
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 21
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: ST_TO_ADDR
// if not tmp then
8189: LD_VAR 0 1
8193: NOT
8194: IFFALSE 8198
// exit ;
8196: GO 8224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8198: LD_VAR 0 1
8202: PUSH
8203: LD_INT 1
8205: PPUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 12
8215: ARRAY
8216: PPUSH
8217: LD_INT 100
8219: PPUSH
8220: CALL_OW 234
// end ;
8224: PPOPN 1
8226: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8227: LD_EXP 17
8231: PUSH
8232: LD_EXP 31
8236: AND
8237: IFFALSE 8335
8239: GO 8241
8241: DISABLE
8242: LD_INT 0
8244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8245: LD_ADDR_VAR 0 1
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_OWVAR 2
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 21
8264: PUSH
8265: LD_INT 1
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PPUSH
8276: CALL_OW 69
8280: ST_TO_ADDR
// if not tmp then
8281: LD_VAR 0 1
8285: NOT
8286: IFFALSE 8290
// exit ;
8288: GO 8335
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8290: LD_VAR 0 1
8294: PUSH
8295: LD_INT 1
8297: PPUSH
8298: LD_VAR 0 1
8302: PPUSH
8303: CALL_OW 12
8307: ARRAY
8308: PPUSH
8309: LD_INT 1
8311: PPUSH
8312: LD_INT 4
8314: PPUSH
8315: CALL_OW 12
8319: PPUSH
8320: LD_INT 3000
8322: PPUSH
8323: LD_INT 9000
8325: PPUSH
8326: CALL_OW 12
8330: PPUSH
8331: CALL_OW 492
// end ;
8335: PPOPN 1
8337: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8338: LD_EXP 17
8342: PUSH
8343: LD_EXP 32
8347: AND
8348: IFFALSE 8368
8350: GO 8352
8352: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8353: LD_INT 1
8355: PPUSH
8356: LD_OWVAR 2
8360: PPUSH
8361: LD_INT 0
8363: PPUSH
8364: CALL_OW 324
8368: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8369: LD_EXP 17
8373: PUSH
8374: LD_EXP 33
8378: AND
8379: IFFALSE 8462
8381: GO 8383
8383: DISABLE
8384: LD_INT 0
8386: PPUSH
8387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8388: LD_ADDR_VAR 0 2
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_OWVAR 2
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 21
8407: PUSH
8408: LD_INT 3
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 69
8423: ST_TO_ADDR
// if not tmp then
8424: LD_VAR 0 2
8428: NOT
8429: IFFALSE 8433
// exit ;
8431: GO 8462
// for i in tmp do
8433: LD_ADDR_VAR 0 1
8437: PUSH
8438: LD_VAR 0 2
8442: PUSH
8443: FOR_IN
8444: IFFALSE 8460
// SetBLevel ( i , 10 ) ;
8446: LD_VAR 0 1
8450: PPUSH
8451: LD_INT 10
8453: PPUSH
8454: CALL_OW 241
8458: GO 8443
8460: POP
8461: POP
// end ;
8462: PPOPN 2
8464: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8465: LD_EXP 17
8469: PUSH
8470: LD_EXP 34
8474: AND
8475: IFFALSE 8586
8477: GO 8479
8479: DISABLE
8480: LD_INT 0
8482: PPUSH
8483: PPUSH
8484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8485: LD_ADDR_VAR 0 3
8489: PUSH
8490: LD_INT 22
8492: PUSH
8493: LD_OWVAR 2
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 25
8504: PUSH
8505: LD_INT 1
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PPUSH
8516: CALL_OW 69
8520: ST_TO_ADDR
// if not tmp then
8521: LD_VAR 0 3
8525: NOT
8526: IFFALSE 8530
// exit ;
8528: GO 8586
// un := tmp [ rand ( 1 , tmp ) ] ;
8530: LD_ADDR_VAR 0 2
8534: PUSH
8535: LD_VAR 0 3
8539: PUSH
8540: LD_INT 1
8542: PPUSH
8543: LD_VAR 0 3
8547: PPUSH
8548: CALL_OW 12
8552: ARRAY
8553: ST_TO_ADDR
// if Crawls ( un ) then
8554: LD_VAR 0 2
8558: PPUSH
8559: CALL_OW 318
8563: IFFALSE 8574
// ComWalk ( un ) ;
8565: LD_VAR 0 2
8569: PPUSH
8570: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8574: LD_VAR 0 2
8578: PPUSH
8579: LD_INT 5
8581: PPUSH
8582: CALL_OW 336
// end ;
8586: PPOPN 3
8588: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8589: LD_EXP 17
8593: PUSH
8594: LD_EXP 35
8598: AND
8599: PUSH
8600: LD_OWVAR 67
8604: PUSH
8605: LD_INT 3
8607: LESS
8608: AND
8609: IFFALSE 8628
8611: GO 8613
8613: DISABLE
// Difficulty := Difficulty + 1 ;
8614: LD_ADDR_OWVAR 67
8618: PUSH
8619: LD_OWVAR 67
8623: PUSH
8624: LD_INT 1
8626: PLUS
8627: ST_TO_ADDR
8628: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8629: LD_EXP 17
8633: PUSH
8634: LD_EXP 36
8638: AND
8639: IFFALSE 8742
8641: GO 8643
8643: DISABLE
8644: LD_INT 0
8646: PPUSH
// begin for i := 1 to 5 do
8647: LD_ADDR_VAR 0 1
8651: PUSH
8652: DOUBLE
8653: LD_INT 1
8655: DEC
8656: ST_TO_ADDR
8657: LD_INT 5
8659: PUSH
8660: FOR_TO
8661: IFFALSE 8740
// begin uc_nation := nation_nature ;
8663: LD_ADDR_OWVAR 21
8667: PUSH
8668: LD_INT 0
8670: ST_TO_ADDR
// uc_side := 0 ;
8671: LD_ADDR_OWVAR 20
8675: PUSH
8676: LD_INT 0
8678: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8679: LD_ADDR_OWVAR 29
8683: PUSH
8684: LD_INT 12
8686: PUSH
8687: LD_INT 12
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: ST_TO_ADDR
// hc_agressivity := 20 ;
8694: LD_ADDR_OWVAR 35
8698: PUSH
8699: LD_INT 20
8701: ST_TO_ADDR
// hc_class := class_tiger ;
8702: LD_ADDR_OWVAR 28
8706: PUSH
8707: LD_INT 14
8709: ST_TO_ADDR
// hc_gallery :=  ;
8710: LD_ADDR_OWVAR 33
8714: PUSH
8715: LD_STRING 
8717: ST_TO_ADDR
// hc_name :=  ;
8718: LD_ADDR_OWVAR 26
8722: PUSH
8723: LD_STRING 
8725: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8726: CALL_OW 44
8730: PPUSH
8731: LD_INT 0
8733: PPUSH
8734: CALL_OW 51
// end ;
8738: GO 8660
8740: POP
8741: POP
// end ;
8742: PPOPN 1
8744: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8745: LD_EXP 17
8749: PUSH
8750: LD_EXP 37
8754: AND
8755: IFFALSE 8764
8757: GO 8759
8759: DISABLE
// StreamSibBomb ;
8760: CALL 8765 0 0
8764: END
// export function StreamSibBomb ; var i , x , y ; begin
8765: LD_INT 0
8767: PPUSH
8768: PPUSH
8769: PPUSH
8770: PPUSH
// result := false ;
8771: LD_ADDR_VAR 0 1
8775: PUSH
8776: LD_INT 0
8778: ST_TO_ADDR
// for i := 1 to 16 do
8779: LD_ADDR_VAR 0 2
8783: PUSH
8784: DOUBLE
8785: LD_INT 1
8787: DEC
8788: ST_TO_ADDR
8789: LD_INT 16
8791: PUSH
8792: FOR_TO
8793: IFFALSE 8992
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8795: LD_ADDR_VAR 0 3
8799: PUSH
8800: LD_INT 10
8802: PUSH
8803: LD_INT 20
8805: PUSH
8806: LD_INT 30
8808: PUSH
8809: LD_INT 40
8811: PUSH
8812: LD_INT 50
8814: PUSH
8815: LD_INT 60
8817: PUSH
8818: LD_INT 70
8820: PUSH
8821: LD_INT 80
8823: PUSH
8824: LD_INT 90
8826: PUSH
8827: LD_INT 100
8829: PUSH
8830: LD_INT 110
8832: PUSH
8833: LD_INT 120
8835: PUSH
8836: LD_INT 130
8838: PUSH
8839: LD_INT 140
8841: PUSH
8842: LD_INT 150
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 1
8864: PPUSH
8865: LD_INT 15
8867: PPUSH
8868: CALL_OW 12
8872: ARRAY
8873: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8874: LD_ADDR_VAR 0 4
8878: PUSH
8879: LD_INT 10
8881: PUSH
8882: LD_INT 20
8884: PUSH
8885: LD_INT 30
8887: PUSH
8888: LD_INT 40
8890: PUSH
8891: LD_INT 50
8893: PUSH
8894: LD_INT 60
8896: PUSH
8897: LD_INT 70
8899: PUSH
8900: LD_INT 80
8902: PUSH
8903: LD_INT 90
8905: PUSH
8906: LD_INT 100
8908: PUSH
8909: LD_INT 110
8911: PUSH
8912: LD_INT 120
8914: PUSH
8915: LD_INT 130
8917: PUSH
8918: LD_INT 140
8920: PUSH
8921: LD_INT 150
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 1
8943: PPUSH
8944: LD_INT 15
8946: PPUSH
8947: CALL_OW 12
8951: ARRAY
8952: ST_TO_ADDR
// if ValidHex ( x , y ) then
8953: LD_VAR 0 3
8957: PPUSH
8958: LD_VAR 0 4
8962: PPUSH
8963: CALL_OW 488
8967: IFFALSE 8990
// begin result := [ x , y ] ;
8969: LD_ADDR_VAR 0 1
8973: PUSH
8974: LD_VAR 0 3
8978: PUSH
8979: LD_VAR 0 4
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: ST_TO_ADDR
// break ;
8988: GO 8992
// end ; end ;
8990: GO 8792
8992: POP
8993: POP
// if result then
8994: LD_VAR 0 1
8998: IFFALSE 9058
// begin ToLua ( playSibBomb() ) ;
9000: LD_STRING playSibBomb()
9002: PPUSH
9003: CALL_OW 559
// wait ( 0 0$14 ) ;
9007: LD_INT 490
9009: PPUSH
9010: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9014: LD_VAR 0 1
9018: PUSH
9019: LD_INT 1
9021: ARRAY
9022: PPUSH
9023: LD_VAR 0 1
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9036: LD_VAR 0 1
9040: PUSH
9041: LD_INT 1
9043: ARRAY
9044: PPUSH
9045: LD_VAR 0 1
9049: PUSH
9050: LD_INT 2
9052: ARRAY
9053: PPUSH
9054: CALL_OW 429
// end ; end ;
9058: LD_VAR 0 1
9062: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9063: LD_EXP 17
9067: PUSH
9068: LD_EXP 39
9072: AND
9073: IFFALSE 9085
9075: GO 9077
9077: DISABLE
// YouLost (  ) ;
9078: LD_STRING 
9080: PPUSH
9081: CALL_OW 104
9085: END
// every 0 0$1 trigger StreamModeActive and sFog do
9086: LD_EXP 17
9090: PUSH
9091: LD_EXP 38
9095: AND
9096: IFFALSE 9110
9098: GO 9100
9100: DISABLE
// FogOff ( your_side ) ;
9101: LD_OWVAR 2
9105: PPUSH
9106: CALL_OW 344
9110: END
// every 0 0$1 trigger StreamModeActive and sSun do
9111: LD_EXP 17
9115: PUSH
9116: LD_EXP 40
9120: AND
9121: IFFALSE 9149
9123: GO 9125
9125: DISABLE
// begin solar_recharge_percent := 0 ;
9126: LD_ADDR_OWVAR 79
9130: PUSH
9131: LD_INT 0
9133: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9134: LD_INT 10500
9136: PPUSH
9137: CALL_OW 67
// solar_recharge_percent := 100 ;
9141: LD_ADDR_OWVAR 79
9145: PUSH
9146: LD_INT 100
9148: ST_TO_ADDR
// end ;
9149: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9150: LD_EXP 17
9154: PUSH
9155: LD_EXP 41
9159: AND
9160: IFFALSE 9399
9162: GO 9164
9164: DISABLE
9165: LD_INT 0
9167: PPUSH
9168: PPUSH
9169: PPUSH
// begin tmp := [ ] ;
9170: LD_ADDR_VAR 0 3
9174: PUSH
9175: EMPTY
9176: ST_TO_ADDR
// for i := 1 to 6 do
9177: LD_ADDR_VAR 0 1
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_INT 6
9189: PUSH
9190: FOR_TO
9191: IFFALSE 9296
// begin uc_nation := nation_nature ;
9193: LD_ADDR_OWVAR 21
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// uc_side := 0 ;
9201: LD_ADDR_OWVAR 20
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9209: LD_ADDR_OWVAR 29
9213: PUSH
9214: LD_INT 12
9216: PUSH
9217: LD_INT 12
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: ST_TO_ADDR
// hc_agressivity := 20 ;
9224: LD_ADDR_OWVAR 35
9228: PUSH
9229: LD_INT 20
9231: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9232: LD_ADDR_OWVAR 28
9236: PUSH
9237: LD_INT 17
9239: ST_TO_ADDR
// hc_gallery :=  ;
9240: LD_ADDR_OWVAR 33
9244: PUSH
9245: LD_STRING 
9247: ST_TO_ADDR
// hc_name :=  ;
9248: LD_ADDR_OWVAR 26
9252: PUSH
9253: LD_STRING 
9255: ST_TO_ADDR
// un := CreateHuman ;
9256: LD_ADDR_VAR 0 2
9260: PUSH
9261: CALL_OW 44
9265: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9266: LD_VAR 0 2
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 51
// tmp := tmp ^ un ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: LD_VAR 0 3
9287: PUSH
9288: LD_VAR 0 2
9292: ADD
9293: ST_TO_ADDR
// end ;
9294: GO 9190
9296: POP
9297: POP
// repeat wait ( 0 0$1 ) ;
9298: LD_INT 35
9300: PPUSH
9301: CALL_OW 67
// for un in tmp do
9305: LD_ADDR_VAR 0 2
9309: PUSH
9310: LD_VAR 0 3
9314: PUSH
9315: FOR_IN
9316: IFFALSE 9390
// begin if IsDead ( un ) then
9318: LD_VAR 0 2
9322: PPUSH
9323: CALL_OW 301
9327: IFFALSE 9347
// begin tmp := tmp diff un ;
9329: LD_ADDR_VAR 0 3
9333: PUSH
9334: LD_VAR 0 3
9338: PUSH
9339: LD_VAR 0 2
9343: DIFF
9344: ST_TO_ADDR
// continue ;
9345: GO 9315
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9347: LD_VAR 0 2
9351: PPUSH
9352: LD_INT 3
9354: PUSH
9355: LD_INT 22
9357: PUSH
9358: LD_INT 0
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 69
9373: PPUSH
9374: LD_VAR 0 2
9378: PPUSH
9379: CALL_OW 74
9383: PPUSH
9384: CALL_OW 115
// end ;
9388: GO 9315
9390: POP
9391: POP
// until not tmp ;
9392: LD_VAR 0 3
9396: NOT
9397: IFFALSE 9298
// end ;
9399: PPOPN 3
9401: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9402: LD_EXP 17
9406: PUSH
9407: LD_EXP 42
9411: AND
9412: IFFALSE 9466
9414: GO 9416
9416: DISABLE
// begin ToLua ( displayTroll(); ) ;
9417: LD_STRING displayTroll();
9419: PPUSH
9420: CALL_OW 559
// wait ( 3 3$00 ) ;
9424: LD_INT 6300
9426: PPUSH
9427: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9431: LD_STRING hideTroll();
9433: PPUSH
9434: CALL_OW 559
// wait ( 1 1$00 ) ;
9438: LD_INT 2100
9440: PPUSH
9441: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9445: LD_STRING displayTroll();
9447: PPUSH
9448: CALL_OW 559
// wait ( 1 1$00 ) ;
9452: LD_INT 2100
9454: PPUSH
9455: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9459: LD_STRING hideTroll();
9461: PPUSH
9462: CALL_OW 559
// end ;
9466: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9467: LD_EXP 17
9471: PUSH
9472: LD_EXP 43
9476: AND
9477: IFFALSE 9540
9479: GO 9481
9481: DISABLE
9482: LD_INT 0
9484: PPUSH
// begin p := 0 ;
9485: LD_ADDR_VAR 0 1
9489: PUSH
9490: LD_INT 0
9492: ST_TO_ADDR
// repeat game_speed := 1 ;
9493: LD_ADDR_OWVAR 65
9497: PUSH
9498: LD_INT 1
9500: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9501: LD_INT 35
9503: PPUSH
9504: CALL_OW 67
// p := p + 1 ;
9508: LD_ADDR_VAR 0 1
9512: PUSH
9513: LD_VAR 0 1
9517: PUSH
9518: LD_INT 1
9520: PLUS
9521: ST_TO_ADDR
// until p >= 60 ;
9522: LD_VAR 0 1
9526: PUSH
9527: LD_INT 60
9529: GREATEREQUAL
9530: IFFALSE 9493
// game_speed := 4 ;
9532: LD_ADDR_OWVAR 65
9536: PUSH
9537: LD_INT 4
9539: ST_TO_ADDR
// end ;
9540: PPOPN 1
9542: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9543: LD_EXP 17
9547: PUSH
9548: LD_EXP 44
9552: AND
9553: IFFALSE 9699
9555: GO 9557
9557: DISABLE
9558: LD_INT 0
9560: PPUSH
9561: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9562: LD_ADDR_VAR 0 1
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_OWVAR 2
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 2
9581: PUSH
9582: LD_INT 30
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 30
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: ST_TO_ADDR
// if not depot then
9616: LD_VAR 0 1
9620: NOT
9621: IFFALSE 9625
// exit ;
9623: GO 9699
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: LD_VAR 0 1
9634: PUSH
9635: LD_INT 1
9637: PPUSH
9638: LD_VAR 0 1
9642: PPUSH
9643: CALL_OW 12
9647: ARRAY
9648: PPUSH
9649: CALL_OW 274
9653: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9654: LD_VAR 0 2
9658: PPUSH
9659: LD_INT 1
9661: PPUSH
9662: LD_INT 0
9664: PPUSH
9665: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9669: LD_VAR 0 2
9673: PPUSH
9674: LD_INT 2
9676: PPUSH
9677: LD_INT 0
9679: PPUSH
9680: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9684: LD_VAR 0 2
9688: PPUSH
9689: LD_INT 3
9691: PPUSH
9692: LD_INT 0
9694: PPUSH
9695: CALL_OW 277
// end ;
9699: PPOPN 2
9701: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9702: LD_EXP 17
9706: PUSH
9707: LD_EXP 45
9711: AND
9712: IFFALSE 9809
9714: GO 9716
9716: DISABLE
9717: LD_INT 0
9719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9720: LD_ADDR_VAR 0 1
9724: PUSH
9725: LD_INT 22
9727: PUSH
9728: LD_OWVAR 2
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: LD_INT 21
9739: PUSH
9740: LD_INT 1
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 3
9749: PUSH
9750: LD_INT 23
9752: PUSH
9753: LD_INT 0
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: PPUSH
9769: CALL_OW 69
9773: ST_TO_ADDR
// if not tmp then
9774: LD_VAR 0 1
9778: NOT
9779: IFFALSE 9783
// exit ;
9781: GO 9809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9783: LD_VAR 0 1
9787: PUSH
9788: LD_INT 1
9790: PPUSH
9791: LD_VAR 0 1
9795: PPUSH
9796: CALL_OW 12
9800: ARRAY
9801: PPUSH
9802: LD_INT 200
9804: PPUSH
9805: CALL_OW 234
// end ;
9809: PPOPN 1
9811: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9812: LD_EXP 17
9816: PUSH
9817: LD_EXP 46
9821: AND
9822: IFFALSE 9901
9824: GO 9826
9826: DISABLE
9827: LD_INT 0
9829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9830: LD_ADDR_VAR 0 1
9834: PUSH
9835: LD_INT 22
9837: PUSH
9838: LD_OWVAR 2
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PPUSH
9861: CALL_OW 69
9865: ST_TO_ADDR
// if not tmp then
9866: LD_VAR 0 1
9870: NOT
9871: IFFALSE 9875
// exit ;
9873: GO 9901
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9875: LD_VAR 0 1
9879: PUSH
9880: LD_INT 1
9882: PPUSH
9883: LD_VAR 0 1
9887: PPUSH
9888: CALL_OW 12
9892: ARRAY
9893: PPUSH
9894: LD_INT 60
9896: PPUSH
9897: CALL_OW 234
// end ;
9901: PPOPN 1
9903: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9904: LD_EXP 17
9908: PUSH
9909: LD_EXP 47
9913: AND
9914: IFFALSE 10013
9916: GO 9918
9918: DISABLE
9919: LD_INT 0
9921: PPUSH
9922: PPUSH
// begin enable ;
9923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9924: LD_ADDR_VAR 0 1
9928: PUSH
9929: LD_INT 22
9931: PUSH
9932: LD_OWVAR 2
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 61
9943: PUSH
9944: EMPTY
9945: LIST
9946: PUSH
9947: LD_INT 33
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: PPUSH
9962: CALL_OW 69
9966: ST_TO_ADDR
// if not tmp then
9967: LD_VAR 0 1
9971: NOT
9972: IFFALSE 9976
// exit ;
9974: GO 10013
// for i in tmp do
9976: LD_ADDR_VAR 0 2
9980: PUSH
9981: LD_VAR 0 1
9985: PUSH
9986: FOR_IN
9987: IFFALSE 10011
// if IsControledBy ( i ) then
9989: LD_VAR 0 2
9993: PPUSH
9994: CALL_OW 312
9998: IFFALSE 10009
// ComUnlink ( i ) ;
10000: LD_VAR 0 2
10004: PPUSH
10005: CALL_OW 136
10009: GO 9986
10011: POP
10012: POP
// end ;
10013: PPOPN 2
10015: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10016: LD_EXP 17
10020: PUSH
10021: LD_EXP 48
10025: AND
10026: IFFALSE 10166
10028: GO 10030
10030: DISABLE
10031: LD_INT 0
10033: PPUSH
10034: PPUSH
// begin ToLua ( displayPowell(); ) ;
10035: LD_STRING displayPowell();
10037: PPUSH
10038: CALL_OW 559
// uc_side := 0 ;
10042: LD_ADDR_OWVAR 20
10046: PUSH
10047: LD_INT 0
10049: ST_TO_ADDR
// uc_nation := 2 ;
10050: LD_ADDR_OWVAR 21
10054: PUSH
10055: LD_INT 2
10057: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10058: LD_ADDR_OWVAR 37
10062: PUSH
10063: LD_INT 14
10065: ST_TO_ADDR
// vc_engine := engine_siberite ;
10066: LD_ADDR_OWVAR 39
10070: PUSH
10071: LD_INT 3
10073: ST_TO_ADDR
// vc_control := control_apeman ;
10074: LD_ADDR_OWVAR 38
10078: PUSH
10079: LD_INT 5
10081: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10082: LD_ADDR_OWVAR 40
10086: PUSH
10087: LD_INT 29
10089: ST_TO_ADDR
// un := CreateVehicle ;
10090: LD_ADDR_VAR 0 2
10094: PUSH
10095: CALL_OW 45
10099: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10100: LD_VAR 0 2
10104: PPUSH
10105: LD_INT 1
10107: PPUSH
10108: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10112: LD_INT 35
10114: PPUSH
10115: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10119: LD_VAR 0 2
10123: PPUSH
10124: LD_INT 22
10126: PUSH
10127: LD_OWVAR 2
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PPUSH
10136: CALL_OW 69
10140: PPUSH
10141: LD_VAR 0 2
10145: PPUSH
10146: CALL_OW 74
10150: PPUSH
10151: CALL_OW 115
// until IsDead ( un ) ;
10155: LD_VAR 0 2
10159: PPUSH
10160: CALL_OW 301
10164: IFFALSE 10112
// end ;
10166: PPOPN 2
10168: END
// every 0 0$1 trigger StreamModeActive and sStu do
10169: LD_EXP 17
10173: PUSH
10174: LD_EXP 56
10178: AND
10179: IFFALSE 10195
10181: GO 10183
10183: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10184: LD_STRING displayStucuk();
10186: PPUSH
10187: CALL_OW 559
// ResetFog ;
10191: CALL_OW 335
// end ;
10195: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10196: LD_EXP 17
10200: PUSH
10201: LD_EXP 49
10205: AND
10206: IFFALSE 10347
10208: GO 10210
10210: DISABLE
10211: LD_INT 0
10213: PPUSH
10214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10215: LD_ADDR_VAR 0 2
10219: PUSH
10220: LD_INT 22
10222: PUSH
10223: LD_OWVAR 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 21
10234: PUSH
10235: LD_INT 1
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PPUSH
10246: CALL_OW 69
10250: ST_TO_ADDR
// if not tmp then
10251: LD_VAR 0 2
10255: NOT
10256: IFFALSE 10260
// exit ;
10258: GO 10347
// un := tmp [ rand ( 1 , tmp ) ] ;
10260: LD_ADDR_VAR 0 1
10264: PUSH
10265: LD_VAR 0 2
10269: PUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_VAR 0 2
10277: PPUSH
10278: CALL_OW 12
10282: ARRAY
10283: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10284: LD_VAR 0 1
10288: PPUSH
10289: LD_INT 0
10291: PPUSH
10292: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10296: LD_VAR 0 1
10300: PPUSH
10301: LD_OWVAR 3
10305: PUSH
10306: LD_VAR 0 1
10310: DIFF
10311: PPUSH
10312: LD_VAR 0 1
10316: PPUSH
10317: CALL_OW 74
10321: PPUSH
10322: CALL_OW 115
// wait ( 0 0$20 ) ;
10326: LD_INT 700
10328: PPUSH
10329: CALL_OW 67
// SetSide ( un , your_side ) ;
10333: LD_VAR 0 1
10337: PPUSH
10338: LD_OWVAR 2
10342: PPUSH
10343: CALL_OW 235
// end ;
10347: PPOPN 2
10349: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10350: LD_EXP 17
10354: PUSH
10355: LD_EXP 50
10359: AND
10360: IFFALSE 10466
10362: GO 10364
10364: DISABLE
10365: LD_INT 0
10367: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10368: LD_ADDR_VAR 0 1
10372: PUSH
10373: LD_INT 22
10375: PUSH
10376: LD_OWVAR 2
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 2
10387: PUSH
10388: LD_INT 30
10390: PUSH
10391: LD_INT 0
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 30
10400: PUSH
10401: LD_INT 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PPUSH
10417: CALL_OW 69
10421: ST_TO_ADDR
// if not depot then
10422: LD_VAR 0 1
10426: NOT
10427: IFFALSE 10431
// exit ;
10429: GO 10466
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10431: LD_VAR 0 1
10435: PUSH
10436: LD_INT 1
10438: ARRAY
10439: PPUSH
10440: CALL_OW 250
10444: PPUSH
10445: LD_VAR 0 1
10449: PUSH
10450: LD_INT 1
10452: ARRAY
10453: PPUSH
10454: CALL_OW 251
10458: PPUSH
10459: LD_INT 70
10461: PPUSH
10462: CALL_OW 495
// end ;
10466: PPOPN 1
10468: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10469: LD_EXP 17
10473: PUSH
10474: LD_EXP 51
10478: AND
10479: IFFALSE 10690
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
10487: PPUSH
10488: PPUSH
10489: PPUSH
10490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10491: LD_ADDR_VAR 0 5
10495: PUSH
10496: LD_INT 22
10498: PUSH
10499: LD_OWVAR 2
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 21
10510: PUSH
10511: LD_INT 1
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PPUSH
10522: CALL_OW 69
10526: ST_TO_ADDR
// if not tmp then
10527: LD_VAR 0 5
10531: NOT
10532: IFFALSE 10536
// exit ;
10534: GO 10690
// for i in tmp do
10536: LD_ADDR_VAR 0 1
10540: PUSH
10541: LD_VAR 0 5
10545: PUSH
10546: FOR_IN
10547: IFFALSE 10688
// begin d := rand ( 0 , 5 ) ;
10549: LD_ADDR_VAR 0 4
10553: PUSH
10554: LD_INT 0
10556: PPUSH
10557: LD_INT 5
10559: PPUSH
10560: CALL_OW 12
10564: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10565: LD_ADDR_VAR 0 2
10569: PUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: CALL_OW 250
10579: PPUSH
10580: LD_VAR 0 4
10584: PPUSH
10585: LD_INT 3
10587: PPUSH
10588: LD_INT 12
10590: PPUSH
10591: CALL_OW 12
10595: PPUSH
10596: CALL_OW 272
10600: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10601: LD_ADDR_VAR 0 3
10605: PUSH
10606: LD_VAR 0 1
10610: PPUSH
10611: CALL_OW 251
10615: PPUSH
10616: LD_VAR 0 4
10620: PPUSH
10621: LD_INT 3
10623: PPUSH
10624: LD_INT 12
10626: PPUSH
10627: CALL_OW 12
10631: PPUSH
10632: CALL_OW 273
10636: ST_TO_ADDR
// if ValidHex ( x , y ) then
10637: LD_VAR 0 2
10641: PPUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: CALL_OW 488
10651: IFFALSE 10686
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10653: LD_VAR 0 1
10657: PPUSH
10658: LD_VAR 0 2
10662: PPUSH
10663: LD_VAR 0 3
10667: PPUSH
10668: LD_INT 3
10670: PPUSH
10671: LD_INT 6
10673: PPUSH
10674: CALL_OW 12
10678: PPUSH
10679: LD_INT 1
10681: PPUSH
10682: CALL_OW 483
// end ;
10686: GO 10546
10688: POP
10689: POP
// end ;
10690: PPOPN 5
10692: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10693: LD_EXP 17
10697: PUSH
10698: LD_EXP 52
10702: AND
10703: IFFALSE 10797
10705: GO 10707
10707: DISABLE
10708: LD_INT 0
10710: PPUSH
10711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10712: LD_ADDR_VAR 0 2
10716: PUSH
10717: LD_INT 22
10719: PUSH
10720: LD_OWVAR 2
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 32
10731: PUSH
10732: LD_INT 1
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 21
10741: PUSH
10742: LD_INT 2
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: ST_TO_ADDR
// if not tmp then
10759: LD_VAR 0 2
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 10797
// for i in tmp do
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_VAR 0 2
10777: PUSH
10778: FOR_IN
10779: IFFALSE 10795
// SetFuel ( i , 0 ) ;
10781: LD_VAR 0 1
10785: PPUSH
10786: LD_INT 0
10788: PPUSH
10789: CALL_OW 240
10793: GO 10778
10795: POP
10796: POP
// end ;
10797: PPOPN 2
10799: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10800: LD_EXP 17
10804: PUSH
10805: LD_EXP 53
10809: AND
10810: IFFALSE 10876
10812: GO 10814
10814: DISABLE
10815: LD_INT 0
10817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10818: LD_ADDR_VAR 0 1
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_OWVAR 2
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 30
10837: PUSH
10838: LD_INT 29
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: ST_TO_ADDR
// if not tmp then
10854: LD_VAR 0 1
10858: NOT
10859: IFFALSE 10863
// exit ;
10861: GO 10876
// DestroyUnit ( tmp [ 1 ] ) ;
10863: LD_VAR 0 1
10867: PUSH
10868: LD_INT 1
10870: ARRAY
10871: PPUSH
10872: CALL_OW 65
// end ;
10876: PPOPN 1
10878: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10879: LD_EXP 17
10883: PUSH
10884: LD_EXP 55
10888: AND
10889: IFFALSE 11018
10891: GO 10893
10893: DISABLE
10894: LD_INT 0
10896: PPUSH
// begin uc_side := 0 ;
10897: LD_ADDR_OWVAR 20
10901: PUSH
10902: LD_INT 0
10904: ST_TO_ADDR
// uc_nation := nation_arabian ;
10905: LD_ADDR_OWVAR 21
10909: PUSH
10910: LD_INT 2
10912: ST_TO_ADDR
// hc_gallery :=  ;
10913: LD_ADDR_OWVAR 33
10917: PUSH
10918: LD_STRING 
10920: ST_TO_ADDR
// hc_name :=  ;
10921: LD_ADDR_OWVAR 26
10925: PUSH
10926: LD_STRING 
10928: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10929: LD_INT 1
10931: PPUSH
10932: LD_INT 11
10934: PPUSH
10935: LD_INT 10
10937: PPUSH
10938: CALL_OW 380
// un := CreateHuman ;
10942: LD_ADDR_VAR 0 1
10946: PUSH
10947: CALL_OW 44
10951: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10952: LD_VAR 0 1
10956: PPUSH
10957: LD_INT 1
10959: PPUSH
10960: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10964: LD_INT 35
10966: PPUSH
10967: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10971: LD_VAR 0 1
10975: PPUSH
10976: LD_INT 22
10978: PUSH
10979: LD_OWVAR 2
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PPUSH
10988: CALL_OW 69
10992: PPUSH
10993: LD_VAR 0 1
10997: PPUSH
10998: CALL_OW 74
11002: PPUSH
11003: CALL_OW 115
// until IsDead ( un ) ;
11007: LD_VAR 0 1
11011: PPUSH
11012: CALL_OW 301
11016: IFFALSE 10964
// end ;
11018: PPOPN 1
11020: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11021: LD_EXP 17
11025: PUSH
11026: LD_EXP 57
11030: AND
11031: IFFALSE 11043
11033: GO 11035
11035: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11036: LD_STRING earthquake(getX(game), 0, 32)
11038: PPUSH
11039: CALL_OW 559
11043: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11044: LD_EXP 17
11048: PUSH
11049: LD_EXP 58
11053: AND
11054: IFFALSE 11145
11056: GO 11058
11058: DISABLE
11059: LD_INT 0
11061: PPUSH
// begin enable ;
11062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11063: LD_ADDR_VAR 0 1
11067: PUSH
11068: LD_INT 22
11070: PUSH
11071: LD_OWVAR 2
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 21
11082: PUSH
11083: LD_INT 2
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 33
11092: PUSH
11093: LD_INT 3
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 69
11109: ST_TO_ADDR
// if not tmp then
11110: LD_VAR 0 1
11114: NOT
11115: IFFALSE 11119
// exit ;
11117: GO 11145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11119: LD_VAR 0 1
11123: PUSH
11124: LD_INT 1
11126: PPUSH
11127: LD_VAR 0 1
11131: PPUSH
11132: CALL_OW 12
11136: ARRAY
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: CALL_OW 234
// end ;
11145: PPOPN 1
11147: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11148: LD_EXP 17
11152: PUSH
11153: LD_EXP 59
11157: AND
11158: IFFALSE 11299
11160: GO 11162
11162: DISABLE
11163: LD_INT 0
11165: PPUSH
11166: PPUSH
11167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11168: LD_ADDR_VAR 0 3
11172: PUSH
11173: LD_INT 22
11175: PUSH
11176: LD_OWVAR 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 25
11187: PUSH
11188: LD_INT 1
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 69
11203: ST_TO_ADDR
// if not tmp then
11204: LD_VAR 0 3
11208: NOT
11209: IFFALSE 11213
// exit ;
11211: GO 11299
// un := tmp [ rand ( 1 , tmp ) ] ;
11213: LD_ADDR_VAR 0 2
11217: PUSH
11218: LD_VAR 0 3
11222: PUSH
11223: LD_INT 1
11225: PPUSH
11226: LD_VAR 0 3
11230: PPUSH
11231: CALL_OW 12
11235: ARRAY
11236: ST_TO_ADDR
// if Crawls ( un ) then
11237: LD_VAR 0 2
11241: PPUSH
11242: CALL_OW 318
11246: IFFALSE 11257
// ComWalk ( un ) ;
11248: LD_VAR 0 2
11252: PPUSH
11253: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11257: LD_VAR 0 2
11261: PPUSH
11262: LD_INT 9
11264: PPUSH
11265: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11269: LD_INT 28
11271: PPUSH
11272: LD_OWVAR 2
11276: PPUSH
11277: LD_INT 2
11279: PPUSH
11280: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11284: LD_INT 29
11286: PPUSH
11287: LD_OWVAR 2
11291: PPUSH
11292: LD_INT 2
11294: PPUSH
11295: CALL_OW 322
// end ;
11299: PPOPN 3
11301: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11302: LD_EXP 17
11306: PUSH
11307: LD_EXP 60
11311: AND
11312: IFFALSE 11423
11314: GO 11316
11316: DISABLE
11317: LD_INT 0
11319: PPUSH
11320: PPUSH
11321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11322: LD_ADDR_VAR 0 3
11326: PUSH
11327: LD_INT 22
11329: PUSH
11330: LD_OWVAR 2
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 25
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 69
11357: ST_TO_ADDR
// if not tmp then
11358: LD_VAR 0 3
11362: NOT
11363: IFFALSE 11367
// exit ;
11365: GO 11423
// un := tmp [ rand ( 1 , tmp ) ] ;
11367: LD_ADDR_VAR 0 2
11371: PUSH
11372: LD_VAR 0 3
11376: PUSH
11377: LD_INT 1
11379: PPUSH
11380: LD_VAR 0 3
11384: PPUSH
11385: CALL_OW 12
11389: ARRAY
11390: ST_TO_ADDR
// if Crawls ( un ) then
11391: LD_VAR 0 2
11395: PPUSH
11396: CALL_OW 318
11400: IFFALSE 11411
// ComWalk ( un ) ;
11402: LD_VAR 0 2
11406: PPUSH
11407: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11411: LD_VAR 0 2
11415: PPUSH
11416: LD_INT 8
11418: PPUSH
11419: CALL_OW 336
// end ;
11423: PPOPN 3
11425: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11426: LD_EXP 17
11430: PUSH
11431: LD_EXP 61
11435: AND
11436: IFFALSE 11580
11438: GO 11440
11440: DISABLE
11441: LD_INT 0
11443: PPUSH
11444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11445: LD_ADDR_VAR 0 2
11449: PUSH
11450: LD_INT 22
11452: PUSH
11453: LD_OWVAR 2
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 21
11464: PUSH
11465: LD_INT 2
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 2
11474: PUSH
11475: LD_INT 34
11477: PUSH
11478: LD_INT 12
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 34
11487: PUSH
11488: LD_INT 51
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 34
11497: PUSH
11498: LD_INT 32
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: LIST
11515: PPUSH
11516: CALL_OW 69
11520: ST_TO_ADDR
// if not tmp then
11521: LD_VAR 0 2
11525: NOT
11526: IFFALSE 11530
// exit ;
11528: GO 11580
// for i in tmp do
11530: LD_ADDR_VAR 0 1
11534: PUSH
11535: LD_VAR 0 2
11539: PUSH
11540: FOR_IN
11541: IFFALSE 11578
// if GetCargo ( i , mat_artifact ) = 0 then
11543: LD_VAR 0 1
11547: PPUSH
11548: LD_INT 4
11550: PPUSH
11551: CALL_OW 289
11555: PUSH
11556: LD_INT 0
11558: EQUAL
11559: IFFALSE 11576
// SetCargo ( i , mat_siberit , 100 ) ;
11561: LD_VAR 0 1
11565: PPUSH
11566: LD_INT 3
11568: PPUSH
11569: LD_INT 100
11571: PPUSH
11572: CALL_OW 290
11576: GO 11540
11578: POP
11579: POP
// end ;
11580: PPOPN 2
11582: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11583: LD_EXP 17
11587: PUSH
11588: LD_EXP 62
11592: AND
11593: IFFALSE 11776
11595: GO 11597
11597: DISABLE
11598: LD_INT 0
11600: PPUSH
11601: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_INT 22
11609: PUSH
11610: LD_OWVAR 2
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 69
11623: ST_TO_ADDR
// if not tmp then
11624: LD_VAR 0 2
11628: NOT
11629: IFFALSE 11633
// exit ;
11631: GO 11776
// for i := 1 to 2 do
11633: LD_ADDR_VAR 0 1
11637: PUSH
11638: DOUBLE
11639: LD_INT 1
11641: DEC
11642: ST_TO_ADDR
11643: LD_INT 2
11645: PUSH
11646: FOR_TO
11647: IFFALSE 11774
// begin uc_side := your_side ;
11649: LD_ADDR_OWVAR 20
11653: PUSH
11654: LD_OWVAR 2
11658: ST_TO_ADDR
// uc_nation := nation_american ;
11659: LD_ADDR_OWVAR 21
11663: PUSH
11664: LD_INT 1
11666: ST_TO_ADDR
// vc_chassis := us_morphling ;
11667: LD_ADDR_OWVAR 37
11671: PUSH
11672: LD_INT 5
11674: ST_TO_ADDR
// vc_engine := engine_siberite ;
11675: LD_ADDR_OWVAR 39
11679: PUSH
11680: LD_INT 3
11682: ST_TO_ADDR
// vc_control := control_computer ;
11683: LD_ADDR_OWVAR 38
11687: PUSH
11688: LD_INT 3
11690: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11691: LD_ADDR_OWVAR 40
11695: PUSH
11696: LD_INT 10
11698: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11699: LD_VAR 0 2
11703: PUSH
11704: LD_INT 1
11706: ARRAY
11707: PPUSH
11708: CALL_OW 310
11712: NOT
11713: IFFALSE 11760
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11715: CALL_OW 45
11719: PPUSH
11720: LD_VAR 0 2
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: PPUSH
11729: CALL_OW 250
11733: PPUSH
11734: LD_VAR 0 2
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: CALL_OW 251
11747: PPUSH
11748: LD_INT 12
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 50
11758: GO 11772
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11760: CALL_OW 45
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: CALL_OW 51
// end ;
11772: GO 11646
11774: POP
11775: POP
// end ;
11776: PPOPN 2
11778: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11779: LD_EXP 17
11783: PUSH
11784: LD_EXP 63
11788: AND
11789: IFFALSE 12011
11791: GO 11793
11793: DISABLE
11794: LD_INT 0
11796: PPUSH
11797: PPUSH
11798: PPUSH
11799: PPUSH
11800: PPUSH
11801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11802: LD_ADDR_VAR 0 6
11806: PUSH
11807: LD_INT 22
11809: PUSH
11810: LD_OWVAR 2
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 21
11821: PUSH
11822: LD_INT 1
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 3
11831: PUSH
11832: LD_INT 23
11834: PUSH
11835: LD_INT 0
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: ST_TO_ADDR
// if not tmp then
11856: LD_VAR 0 6
11860: NOT
11861: IFFALSE 11865
// exit ;
11863: GO 12011
// s1 := rand ( 1 , 4 ) ;
11865: LD_ADDR_VAR 0 2
11869: PUSH
11870: LD_INT 1
11872: PPUSH
11873: LD_INT 4
11875: PPUSH
11876: CALL_OW 12
11880: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11881: LD_ADDR_VAR 0 4
11885: PUSH
11886: LD_VAR 0 6
11890: PUSH
11891: LD_INT 1
11893: ARRAY
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: CALL_OW 259
11904: ST_TO_ADDR
// if s1 = 1 then
11905: LD_VAR 0 2
11909: PUSH
11910: LD_INT 1
11912: EQUAL
11913: IFFALSE 11933
// s2 := rand ( 2 , 4 ) else
11915: LD_ADDR_VAR 0 3
11919: PUSH
11920: LD_INT 2
11922: PPUSH
11923: LD_INT 4
11925: PPUSH
11926: CALL_OW 12
11930: ST_TO_ADDR
11931: GO 11941
// s2 := 1 ;
11933: LD_ADDR_VAR 0 3
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11941: LD_ADDR_VAR 0 5
11945: PUSH
11946: LD_VAR 0 6
11950: PUSH
11951: LD_INT 1
11953: ARRAY
11954: PPUSH
11955: LD_VAR 0 3
11959: PPUSH
11960: CALL_OW 259
11964: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11965: LD_VAR 0 6
11969: PUSH
11970: LD_INT 1
11972: ARRAY
11973: PPUSH
11974: LD_VAR 0 2
11978: PPUSH
11979: LD_VAR 0 5
11983: PPUSH
11984: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11988: LD_VAR 0 6
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: LD_VAR 0 4
12006: PPUSH
12007: CALL_OW 237
// end ;
12011: PPOPN 6
12013: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12014: LD_EXP 17
12018: PUSH
12019: LD_EXP 64
12023: AND
12024: IFFALSE 12103
12026: GO 12028
12028: DISABLE
12029: LD_INT 0
12031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12032: LD_ADDR_VAR 0 1
12036: PUSH
12037: LD_INT 22
12039: PUSH
12040: LD_OWVAR 2
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 30
12051: PUSH
12052: LD_INT 3
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PPUSH
12063: CALL_OW 69
12067: ST_TO_ADDR
// if not tmp then
12068: LD_VAR 0 1
12072: NOT
12073: IFFALSE 12077
// exit ;
12075: GO 12103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12077: LD_VAR 0 1
12081: PUSH
12082: LD_INT 1
12084: PPUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 12
12094: ARRAY
12095: PPUSH
12096: LD_INT 1
12098: PPUSH
12099: CALL_OW 234
// end ;
12103: PPOPN 1
12105: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12106: LD_EXP 17
12110: PUSH
12111: LD_EXP 65
12115: AND
12116: IFFALSE 12228
12118: GO 12120
12120: DISABLE
12121: LD_INT 0
12123: PPUSH
12124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12125: LD_ADDR_VAR 0 2
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_OWVAR 2
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 2
12144: PUSH
12145: LD_INT 30
12147: PUSH
12148: LD_INT 27
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 30
12157: PUSH
12158: LD_INT 26
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 30
12167: PUSH
12168: LD_INT 28
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 69
12189: ST_TO_ADDR
// if not tmp then
12190: LD_VAR 0 2
12194: NOT
12195: IFFALSE 12199
// exit ;
12197: GO 12228
// for i in tmp do
12199: LD_ADDR_VAR 0 1
12203: PUSH
12204: LD_VAR 0 2
12208: PUSH
12209: FOR_IN
12210: IFFALSE 12226
// SetLives ( i , 1 ) ;
12212: LD_VAR 0 1
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: CALL_OW 234
12224: GO 12209
12226: POP
12227: POP
// end ;
12228: PPOPN 2
12230: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12231: LD_EXP 17
12235: PUSH
12236: LD_EXP 66
12240: AND
12241: IFFALSE 12515
12243: GO 12245
12245: DISABLE
12246: LD_INT 0
12248: PPUSH
12249: PPUSH
12250: PPUSH
// begin i := rand ( 1 , 7 ) ;
12251: LD_ADDR_VAR 0 1
12255: PUSH
12256: LD_INT 1
12258: PPUSH
12259: LD_INT 7
12261: PPUSH
12262: CALL_OW 12
12266: ST_TO_ADDR
// case i of 1 :
12267: LD_VAR 0 1
12271: PUSH
12272: LD_INT 1
12274: DOUBLE
12275: EQUAL
12276: IFTRUE 12280
12278: GO 12290
12280: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12281: LD_STRING earthquake(getX(game), 0, 32)
12283: PPUSH
12284: CALL_OW 559
12288: GO 12515
12290: LD_INT 2
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12312
12298: POP
// begin ToLua ( displayStucuk(); ) ;
12299: LD_STRING displayStucuk();
12301: PPUSH
12302: CALL_OW 559
// ResetFog ;
12306: CALL_OW 335
// end ; 3 :
12310: GO 12515
12312: LD_INT 3
12314: DOUBLE
12315: EQUAL
12316: IFTRUE 12320
12318: GO 12424
12320: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12321: LD_ADDR_VAR 0 2
12325: PUSH
12326: LD_INT 22
12328: PUSH
12329: LD_OWVAR 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 25
12340: PUSH
12341: LD_INT 1
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 69
12356: ST_TO_ADDR
// if not tmp then
12357: LD_VAR 0 2
12361: NOT
12362: IFFALSE 12366
// exit ;
12364: GO 12515
// un := tmp [ rand ( 1 , tmp ) ] ;
12366: LD_ADDR_VAR 0 3
12370: PUSH
12371: LD_VAR 0 2
12375: PUSH
12376: LD_INT 1
12378: PPUSH
12379: LD_VAR 0 2
12383: PPUSH
12384: CALL_OW 12
12388: ARRAY
12389: ST_TO_ADDR
// if Crawls ( un ) then
12390: LD_VAR 0 3
12394: PPUSH
12395: CALL_OW 318
12399: IFFALSE 12410
// ComWalk ( un ) ;
12401: LD_VAR 0 3
12405: PPUSH
12406: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12410: LD_VAR 0 3
12414: PPUSH
12415: LD_INT 8
12417: PPUSH
12418: CALL_OW 336
// end ; 4 :
12422: GO 12515
12424: LD_INT 4
12426: DOUBLE
12427: EQUAL
12428: IFTRUE 12432
12430: GO 12493
12432: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12433: LD_ADDR_VAR 0 2
12437: PUSH
12438: LD_INT 22
12440: PUSH
12441: LD_OWVAR 2
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 30
12452: PUSH
12453: LD_INT 29
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL_OW 69
12468: ST_TO_ADDR
// if not tmp then
12469: LD_VAR 0 2
12473: NOT
12474: IFFALSE 12478
// exit ;
12476: GO 12515
// DestroyUnit ( tmp [ 1 ] ) ;
12478: LD_VAR 0 2
12482: PUSH
12483: LD_INT 1
12485: ARRAY
12486: PPUSH
12487: CALL_OW 65
// end ; 5 .. 7 :
12491: GO 12515
12493: LD_INT 5
12495: DOUBLE
12496: GREATEREQUAL
12497: IFFALSE 12505
12499: LD_INT 7
12501: DOUBLE
12502: LESSEQUAL
12503: IFTRUE 12507
12505: GO 12514
12507: POP
// StreamSibBomb ; end ;
12508: CALL 8765 0 0
12512: GO 12515
12514: POP
// end ;
12515: PPOPN 3
12517: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12518: LD_EXP 17
12522: PUSH
12523: LD_EXP 67
12527: AND
12528: IFFALSE 12684
12530: GO 12532
12532: DISABLE
12533: LD_INT 0
12535: PPUSH
12536: PPUSH
12537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12538: LD_ADDR_VAR 0 2
12542: PUSH
12543: LD_INT 81
12545: PUSH
12546: LD_OWVAR 2
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 2
12557: PUSH
12558: LD_INT 21
12560: PUSH
12561: LD_INT 1
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 21
12570: PUSH
12571: LD_INT 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 69
12591: ST_TO_ADDR
// if not tmp then
12592: LD_VAR 0 2
12596: NOT
12597: IFFALSE 12601
// exit ;
12599: GO 12684
// p := 0 ;
12601: LD_ADDR_VAR 0 3
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12609: LD_INT 35
12611: PPUSH
12612: CALL_OW 67
// p := p + 1 ;
12616: LD_ADDR_VAR 0 3
12620: PUSH
12621: LD_VAR 0 3
12625: PUSH
12626: LD_INT 1
12628: PLUS
12629: ST_TO_ADDR
// for i in tmp do
12630: LD_ADDR_VAR 0 1
12634: PUSH
12635: LD_VAR 0 2
12639: PUSH
12640: FOR_IN
12641: IFFALSE 12672
// if GetLives ( i ) < 1000 then
12643: LD_VAR 0 1
12647: PPUSH
12648: CALL_OW 256
12652: PUSH
12653: LD_INT 1000
12655: LESS
12656: IFFALSE 12670
// SetLives ( i , 1000 ) ;
12658: LD_VAR 0 1
12662: PPUSH
12663: LD_INT 1000
12665: PPUSH
12666: CALL_OW 234
12670: GO 12640
12672: POP
12673: POP
// until p > 20 ;
12674: LD_VAR 0 3
12678: PUSH
12679: LD_INT 20
12681: GREATER
12682: IFFALSE 12609
// end ;
12684: PPOPN 3
12686: END
// every 0 0$1 trigger StreamModeActive and sTime do
12687: LD_EXP 17
12691: PUSH
12692: LD_EXP 68
12696: AND
12697: IFFALSE 12732
12699: GO 12701
12701: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12702: LD_INT 28
12704: PPUSH
12705: LD_OWVAR 2
12709: PPUSH
12710: LD_INT 2
12712: PPUSH
12713: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12717: LD_INT 30
12719: PPUSH
12720: LD_OWVAR 2
12724: PPUSH
12725: LD_INT 2
12727: PPUSH
12728: CALL_OW 322
// end ;
12732: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12733: LD_EXP 17
12737: PUSH
12738: LD_EXP 69
12742: AND
12743: IFFALSE 12864
12745: GO 12747
12747: DISABLE
12748: LD_INT 0
12750: PPUSH
12751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12752: LD_ADDR_VAR 0 2
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_OWVAR 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 21
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 3
12781: PUSH
12782: LD_INT 23
12784: PUSH
12785: LD_INT 0
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: PPUSH
12801: CALL_OW 69
12805: ST_TO_ADDR
// if not tmp then
12806: LD_VAR 0 2
12810: NOT
12811: IFFALSE 12815
// exit ;
12813: GO 12864
// for i in tmp do
12815: LD_ADDR_VAR 0 1
12819: PUSH
12820: LD_VAR 0 2
12824: PUSH
12825: FOR_IN
12826: IFFALSE 12862
// begin if Crawls ( i ) then
12828: LD_VAR 0 1
12832: PPUSH
12833: CALL_OW 318
12837: IFFALSE 12848
// ComWalk ( i ) ;
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL_OW 138
// SetClass ( i , 2 ) ;
12848: LD_VAR 0 1
12852: PPUSH
12853: LD_INT 2
12855: PPUSH
12856: CALL_OW 336
// end ;
12860: GO 12825
12862: POP
12863: POP
// end ;
12864: PPOPN 2
12866: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12867: LD_EXP 17
12871: PUSH
12872: LD_EXP 70
12876: AND
12877: IFFALSE 13158
12879: GO 12881
12881: DISABLE
12882: LD_INT 0
12884: PPUSH
12885: PPUSH
12886: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12887: LD_OWVAR 2
12891: PPUSH
12892: LD_INT 9
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: LD_INT 1
12900: PPUSH
12901: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12905: LD_INT 9
12907: PPUSH
12908: LD_OWVAR 2
12912: PPUSH
12913: CALL_OW 343
// uc_side := 9 ;
12917: LD_ADDR_OWVAR 20
12921: PUSH
12922: LD_INT 9
12924: ST_TO_ADDR
// uc_nation := 2 ;
12925: LD_ADDR_OWVAR 21
12929: PUSH
12930: LD_INT 2
12932: ST_TO_ADDR
// hc_name := Dark Warrior ;
12933: LD_ADDR_OWVAR 26
12937: PUSH
12938: LD_STRING Dark Warrior
12940: ST_TO_ADDR
// hc_gallery :=  ;
12941: LD_ADDR_OWVAR 33
12945: PUSH
12946: LD_STRING 
12948: ST_TO_ADDR
// hc_noskilllimit := true ;
12949: LD_ADDR_OWVAR 76
12953: PUSH
12954: LD_INT 1
12956: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12957: LD_ADDR_OWVAR 31
12961: PUSH
12962: LD_INT 30
12964: PUSH
12965: LD_INT 30
12967: PUSH
12968: LD_INT 30
12970: PUSH
12971: LD_INT 30
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: ST_TO_ADDR
// un := CreateHuman ;
12980: LD_ADDR_VAR 0 3
12984: PUSH
12985: CALL_OW 44
12989: ST_TO_ADDR
// hc_noskilllimit := false ;
12990: LD_ADDR_OWVAR 76
12994: PUSH
12995: LD_INT 0
12997: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12998: LD_VAR 0 3
13002: PPUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 51
// p := 0 ;
13010: LD_ADDR_VAR 0 2
13014: PUSH
13015: LD_INT 0
13017: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13018: LD_INT 35
13020: PPUSH
13021: CALL_OW 67
// p := p + 1 ;
13025: LD_ADDR_VAR 0 2
13029: PUSH
13030: LD_VAR 0 2
13034: PUSH
13035: LD_INT 1
13037: PLUS
13038: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13039: LD_VAR 0 3
13043: PPUSH
13044: CALL_OW 256
13048: PUSH
13049: LD_INT 1000
13051: LESS
13052: IFFALSE 13066
// SetLives ( un , 1000 ) ;
13054: LD_VAR 0 3
13058: PPUSH
13059: LD_INT 1000
13061: PPUSH
13062: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13066: LD_VAR 0 3
13070: PPUSH
13071: LD_INT 81
13073: PUSH
13074: LD_OWVAR 2
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 91
13085: PUSH
13086: LD_VAR 0 3
13090: PUSH
13091: LD_INT 30
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: PPUSH
13108: LD_VAR 0 3
13112: PPUSH
13113: CALL_OW 74
13117: PPUSH
13118: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13122: LD_VAR 0 2
13126: PUSH
13127: LD_INT 60
13129: GREATER
13130: PUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: CALL_OW 301
13140: OR
13141: IFFALSE 13018
// if un then
13143: LD_VAR 0 3
13147: IFFALSE 13158
// RemoveUnit ( un ) ;
13149: LD_VAR 0 3
13153: PPUSH
13154: CALL_OW 64
// end ;
13158: PPOPN 3
13160: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13161: LD_INT 0
13163: PPUSH
// case cmd of 301 :
13164: LD_VAR 0 1
13168: PUSH
13169: LD_INT 301
13171: DOUBLE
13172: EQUAL
13173: IFTRUE 13177
13175: GO 13209
13177: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13178: LD_VAR 0 6
13182: PPUSH
13183: LD_VAR 0 7
13187: PPUSH
13188: LD_VAR 0 8
13192: PPUSH
13193: LD_VAR 0 4
13197: PPUSH
13198: LD_VAR 0 5
13202: PPUSH
13203: CALL 14410 0 5
13207: GO 13330
13209: LD_INT 302
13211: DOUBLE
13212: EQUAL
13213: IFTRUE 13217
13215: GO 13254
13217: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13218: LD_VAR 0 6
13222: PPUSH
13223: LD_VAR 0 7
13227: PPUSH
13228: LD_VAR 0 8
13232: PPUSH
13233: LD_VAR 0 9
13237: PPUSH
13238: LD_VAR 0 4
13242: PPUSH
13243: LD_VAR 0 5
13247: PPUSH
13248: CALL 14501 0 6
13252: GO 13330
13254: LD_INT 303
13256: DOUBLE
13257: EQUAL
13258: IFTRUE 13262
13260: GO 13299
13262: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13263: LD_VAR 0 6
13267: PPUSH
13268: LD_VAR 0 7
13272: PPUSH
13273: LD_VAR 0 8
13277: PPUSH
13278: LD_VAR 0 9
13282: PPUSH
13283: LD_VAR 0 4
13287: PPUSH
13288: LD_VAR 0 5
13292: PPUSH
13293: CALL 13335 0 6
13297: GO 13330
13299: LD_INT 304
13301: DOUBLE
13302: EQUAL
13303: IFTRUE 13307
13305: GO 13329
13307: POP
// hHackTeleport ( unit , x , y ) ; end ;
13308: LD_VAR 0 2
13312: PPUSH
13313: LD_VAR 0 4
13317: PPUSH
13318: LD_VAR 0 5
13322: PPUSH
13323: CALL 15094 0 3
13327: GO 13330
13329: POP
// end ;
13330: LD_VAR 0 12
13334: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13335: LD_INT 0
13337: PPUSH
13338: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13339: LD_VAR 0 1
13343: PUSH
13344: LD_INT 1
13346: LESS
13347: PUSH
13348: LD_VAR 0 1
13352: PUSH
13353: LD_INT 3
13355: GREATER
13356: OR
13357: PUSH
13358: LD_VAR 0 5
13362: PPUSH
13363: LD_VAR 0 6
13367: PPUSH
13368: CALL_OW 428
13372: OR
13373: IFFALSE 13377
// exit ;
13375: GO 14097
// uc_side := your_side ;
13377: LD_ADDR_OWVAR 20
13381: PUSH
13382: LD_OWVAR 2
13386: ST_TO_ADDR
// uc_nation := nation ;
13387: LD_ADDR_OWVAR 21
13391: PUSH
13392: LD_VAR 0 1
13396: ST_TO_ADDR
// bc_level = 1 ;
13397: LD_ADDR_OWVAR 43
13401: PUSH
13402: LD_INT 1
13404: ST_TO_ADDR
// case btype of 1 :
13405: LD_VAR 0 2
13409: PUSH
13410: LD_INT 1
13412: DOUBLE
13413: EQUAL
13414: IFTRUE 13418
13416: GO 13429
13418: POP
// bc_type := b_depot ; 2 :
13419: LD_ADDR_OWVAR 42
13423: PUSH
13424: LD_INT 0
13426: ST_TO_ADDR
13427: GO 14041
13429: LD_INT 2
13431: DOUBLE
13432: EQUAL
13433: IFTRUE 13437
13435: GO 13448
13437: POP
// bc_type := b_warehouse ; 3 :
13438: LD_ADDR_OWVAR 42
13442: PUSH
13443: LD_INT 1
13445: ST_TO_ADDR
13446: GO 14041
13448: LD_INT 3
13450: DOUBLE
13451: EQUAL
13452: IFTRUE 13456
13454: GO 13467
13456: POP
// bc_type := b_lab ; 4 .. 9 :
13457: LD_ADDR_OWVAR 42
13461: PUSH
13462: LD_INT 6
13464: ST_TO_ADDR
13465: GO 14041
13467: LD_INT 4
13469: DOUBLE
13470: GREATEREQUAL
13471: IFFALSE 13479
13473: LD_INT 9
13475: DOUBLE
13476: LESSEQUAL
13477: IFTRUE 13481
13479: GO 13533
13481: POP
// begin bc_type := b_lab_half ;
13482: LD_ADDR_OWVAR 42
13486: PUSH
13487: LD_INT 7
13489: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13490: LD_ADDR_OWVAR 44
13494: PUSH
13495: LD_INT 10
13497: PUSH
13498: LD_INT 11
13500: PUSH
13501: LD_INT 12
13503: PUSH
13504: LD_INT 15
13506: PUSH
13507: LD_INT 14
13509: PUSH
13510: LD_INT 13
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: LD_VAR 0 2
13525: PUSH
13526: LD_INT 3
13528: MINUS
13529: ARRAY
13530: ST_TO_ADDR
// end ; 10 .. 13 :
13531: GO 14041
13533: LD_INT 10
13535: DOUBLE
13536: GREATEREQUAL
13537: IFFALSE 13545
13539: LD_INT 13
13541: DOUBLE
13542: LESSEQUAL
13543: IFTRUE 13547
13545: GO 13624
13547: POP
// begin bc_type := b_lab_full ;
13548: LD_ADDR_OWVAR 42
13552: PUSH
13553: LD_INT 8
13555: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13556: LD_ADDR_OWVAR 44
13560: PUSH
13561: LD_INT 10
13563: PUSH
13564: LD_INT 12
13566: PUSH
13567: LD_INT 14
13569: PUSH
13570: LD_INT 13
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: PUSH
13579: LD_VAR 0 2
13583: PUSH
13584: LD_INT 9
13586: MINUS
13587: ARRAY
13588: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13589: LD_ADDR_OWVAR 45
13593: PUSH
13594: LD_INT 11
13596: PUSH
13597: LD_INT 15
13599: PUSH
13600: LD_INT 12
13602: PUSH
13603: LD_INT 15
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: LD_VAR 0 2
13616: PUSH
13617: LD_INT 9
13619: MINUS
13620: ARRAY
13621: ST_TO_ADDR
// end ; 14 :
13622: GO 14041
13624: LD_INT 14
13626: DOUBLE
13627: EQUAL
13628: IFTRUE 13632
13630: GO 13643
13632: POP
// bc_type := b_workshop ; 15 :
13633: LD_ADDR_OWVAR 42
13637: PUSH
13638: LD_INT 2
13640: ST_TO_ADDR
13641: GO 14041
13643: LD_INT 15
13645: DOUBLE
13646: EQUAL
13647: IFTRUE 13651
13649: GO 13662
13651: POP
// bc_type := b_factory ; 16 :
13652: LD_ADDR_OWVAR 42
13656: PUSH
13657: LD_INT 3
13659: ST_TO_ADDR
13660: GO 14041
13662: LD_INT 16
13664: DOUBLE
13665: EQUAL
13666: IFTRUE 13670
13668: GO 13681
13670: POP
// bc_type := b_ext_gun ; 17 :
13671: LD_ADDR_OWVAR 42
13675: PUSH
13676: LD_INT 17
13678: ST_TO_ADDR
13679: GO 14041
13681: LD_INT 17
13683: DOUBLE
13684: EQUAL
13685: IFTRUE 13689
13687: GO 13717
13689: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13690: LD_ADDR_OWVAR 42
13694: PUSH
13695: LD_INT 19
13697: PUSH
13698: LD_INT 23
13700: PUSH
13701: LD_INT 19
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_VAR 0 1
13713: ARRAY
13714: ST_TO_ADDR
13715: GO 14041
13717: LD_INT 18
13719: DOUBLE
13720: EQUAL
13721: IFTRUE 13725
13723: GO 13736
13725: POP
// bc_type := b_ext_radar ; 19 :
13726: LD_ADDR_OWVAR 42
13730: PUSH
13731: LD_INT 20
13733: ST_TO_ADDR
13734: GO 14041
13736: LD_INT 19
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13755
13744: POP
// bc_type := b_ext_radio ; 20 :
13745: LD_ADDR_OWVAR 42
13749: PUSH
13750: LD_INT 22
13752: ST_TO_ADDR
13753: GO 14041
13755: LD_INT 20
13757: DOUBLE
13758: EQUAL
13759: IFTRUE 13763
13761: GO 13774
13763: POP
// bc_type := b_ext_siberium ; 21 :
13764: LD_ADDR_OWVAR 42
13768: PUSH
13769: LD_INT 21
13771: ST_TO_ADDR
13772: GO 14041
13774: LD_INT 21
13776: DOUBLE
13777: EQUAL
13778: IFTRUE 13782
13780: GO 13793
13782: POP
// bc_type := b_ext_computer ; 22 :
13783: LD_ADDR_OWVAR 42
13787: PUSH
13788: LD_INT 24
13790: ST_TO_ADDR
13791: GO 14041
13793: LD_INT 22
13795: DOUBLE
13796: EQUAL
13797: IFTRUE 13801
13799: GO 13812
13801: POP
// bc_type := b_ext_track ; 23 :
13802: LD_ADDR_OWVAR 42
13806: PUSH
13807: LD_INT 16
13809: ST_TO_ADDR
13810: GO 14041
13812: LD_INT 23
13814: DOUBLE
13815: EQUAL
13816: IFTRUE 13820
13818: GO 13831
13820: POP
// bc_type := b_ext_laser ; 24 :
13821: LD_ADDR_OWVAR 42
13825: PUSH
13826: LD_INT 25
13828: ST_TO_ADDR
13829: GO 14041
13831: LD_INT 24
13833: DOUBLE
13834: EQUAL
13835: IFTRUE 13839
13837: GO 13850
13839: POP
// bc_type := b_control_tower ; 25 :
13840: LD_ADDR_OWVAR 42
13844: PUSH
13845: LD_INT 36
13847: ST_TO_ADDR
13848: GO 14041
13850: LD_INT 25
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13869
13858: POP
// bc_type := b_breastwork ; 26 :
13859: LD_ADDR_OWVAR 42
13863: PUSH
13864: LD_INT 31
13866: ST_TO_ADDR
13867: GO 14041
13869: LD_INT 26
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13888
13877: POP
// bc_type := b_bunker ; 27 :
13878: LD_ADDR_OWVAR 42
13882: PUSH
13883: LD_INT 32
13885: ST_TO_ADDR
13886: GO 14041
13888: LD_INT 27
13890: DOUBLE
13891: EQUAL
13892: IFTRUE 13896
13894: GO 13907
13896: POP
// bc_type := b_turret ; 28 :
13897: LD_ADDR_OWVAR 42
13901: PUSH
13902: LD_INT 33
13904: ST_TO_ADDR
13905: GO 14041
13907: LD_INT 28
13909: DOUBLE
13910: EQUAL
13911: IFTRUE 13915
13913: GO 13926
13915: POP
// bc_type := b_armoury ; 29 :
13916: LD_ADDR_OWVAR 42
13920: PUSH
13921: LD_INT 4
13923: ST_TO_ADDR
13924: GO 14041
13926: LD_INT 29
13928: DOUBLE
13929: EQUAL
13930: IFTRUE 13934
13932: GO 13945
13934: POP
// bc_type := b_barracks ; 30 :
13935: LD_ADDR_OWVAR 42
13939: PUSH
13940: LD_INT 5
13942: ST_TO_ADDR
13943: GO 14041
13945: LD_INT 30
13947: DOUBLE
13948: EQUAL
13949: IFTRUE 13953
13951: GO 13964
13953: POP
// bc_type := b_solar_power ; 31 :
13954: LD_ADDR_OWVAR 42
13958: PUSH
13959: LD_INT 27
13961: ST_TO_ADDR
13962: GO 14041
13964: LD_INT 31
13966: DOUBLE
13967: EQUAL
13968: IFTRUE 13972
13970: GO 13983
13972: POP
// bc_type := b_oil_power ; 32 :
13973: LD_ADDR_OWVAR 42
13977: PUSH
13978: LD_INT 26
13980: ST_TO_ADDR
13981: GO 14041
13983: LD_INT 32
13985: DOUBLE
13986: EQUAL
13987: IFTRUE 13991
13989: GO 14002
13991: POP
// bc_type := b_siberite_power ; 33 :
13992: LD_ADDR_OWVAR 42
13996: PUSH
13997: LD_INT 28
13999: ST_TO_ADDR
14000: GO 14041
14002: LD_INT 33
14004: DOUBLE
14005: EQUAL
14006: IFTRUE 14010
14008: GO 14021
14010: POP
// bc_type := b_oil_mine ; 34 :
14011: LD_ADDR_OWVAR 42
14015: PUSH
14016: LD_INT 29
14018: ST_TO_ADDR
14019: GO 14041
14021: LD_INT 34
14023: DOUBLE
14024: EQUAL
14025: IFTRUE 14029
14027: GO 14040
14029: POP
// bc_type := b_siberite_mine ; end ;
14030: LD_ADDR_OWVAR 42
14034: PUSH
14035: LD_INT 30
14037: ST_TO_ADDR
14038: GO 14041
14040: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14041: LD_ADDR_VAR 0 8
14045: PUSH
14046: LD_VAR 0 5
14050: PPUSH
14051: LD_VAR 0 6
14055: PPUSH
14056: LD_VAR 0 3
14060: PPUSH
14061: CALL_OW 47
14065: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14066: LD_OWVAR 42
14070: PUSH
14071: LD_INT 32
14073: PUSH
14074: LD_INT 33
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: IN
14081: IFFALSE 14097
// PlaceWeaponTurret ( b , weapon ) ;
14083: LD_VAR 0 8
14087: PPUSH
14088: LD_VAR 0 4
14092: PPUSH
14093: CALL_OW 431
// end ;
14097: LD_VAR 0 7
14101: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14102: LD_INT 0
14104: PPUSH
14105: PPUSH
14106: PPUSH
14107: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14108: LD_ADDR_VAR 0 4
14112: PUSH
14113: LD_INT 22
14115: PUSH
14116: LD_OWVAR 2
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: LD_INT 30
14130: PUSH
14131: LD_INT 0
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 30
14140: PUSH
14141: LD_INT 1
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PPUSH
14157: CALL_OW 69
14161: ST_TO_ADDR
// if not tmp then
14162: LD_VAR 0 4
14166: NOT
14167: IFFALSE 14171
// exit ;
14169: GO 14230
// for i in tmp do
14171: LD_ADDR_VAR 0 2
14175: PUSH
14176: LD_VAR 0 4
14180: PUSH
14181: FOR_IN
14182: IFFALSE 14228
// for j = 1 to 3 do
14184: LD_ADDR_VAR 0 3
14188: PUSH
14189: DOUBLE
14190: LD_INT 1
14192: DEC
14193: ST_TO_ADDR
14194: LD_INT 3
14196: PUSH
14197: FOR_TO
14198: IFFALSE 14224
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14200: LD_VAR 0 2
14204: PPUSH
14205: CALL_OW 274
14209: PPUSH
14210: LD_VAR 0 3
14214: PPUSH
14215: LD_INT 99999
14217: PPUSH
14218: CALL_OW 277
14222: GO 14197
14224: POP
14225: POP
14226: GO 14181
14228: POP
14229: POP
// end ;
14230: LD_VAR 0 1
14234: RET
// export function hHackSetLevel10 ; var i , j ; begin
14235: LD_INT 0
14237: PPUSH
14238: PPUSH
14239: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14240: LD_ADDR_VAR 0 2
14244: PUSH
14245: LD_INT 21
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 69
14259: PUSH
14260: FOR_IN
14261: IFFALSE 14313
// if IsSelected ( i ) then
14263: LD_VAR 0 2
14267: PPUSH
14268: CALL_OW 306
14272: IFFALSE 14311
// begin for j := 1 to 4 do
14274: LD_ADDR_VAR 0 3
14278: PUSH
14279: DOUBLE
14280: LD_INT 1
14282: DEC
14283: ST_TO_ADDR
14284: LD_INT 4
14286: PUSH
14287: FOR_TO
14288: IFFALSE 14309
// SetSkill ( i , j , 10 ) ;
14290: LD_VAR 0 2
14294: PPUSH
14295: LD_VAR 0 3
14299: PPUSH
14300: LD_INT 10
14302: PPUSH
14303: CALL_OW 237
14307: GO 14287
14309: POP
14310: POP
// end ;
14311: GO 14260
14313: POP
14314: POP
// end ;
14315: LD_VAR 0 1
14319: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14320: LD_INT 0
14322: PPUSH
14323: PPUSH
14324: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14325: LD_ADDR_VAR 0 2
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_OWVAR 2
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 21
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: PUSH
14361: FOR_IN
14362: IFFALSE 14403
// begin for j := 1 to 4 do
14364: LD_ADDR_VAR 0 3
14368: PUSH
14369: DOUBLE
14370: LD_INT 1
14372: DEC
14373: ST_TO_ADDR
14374: LD_INT 4
14376: PUSH
14377: FOR_TO
14378: IFFALSE 14399
// SetSkill ( i , j , 10 ) ;
14380: LD_VAR 0 2
14384: PPUSH
14385: LD_VAR 0 3
14389: PPUSH
14390: LD_INT 10
14392: PPUSH
14393: CALL_OW 237
14397: GO 14377
14399: POP
14400: POP
// end ;
14401: GO 14361
14403: POP
14404: POP
// end ;
14405: LD_VAR 0 1
14409: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14410: LD_INT 0
14412: PPUSH
// uc_side := your_side ;
14413: LD_ADDR_OWVAR 20
14417: PUSH
14418: LD_OWVAR 2
14422: ST_TO_ADDR
// uc_nation := nation ;
14423: LD_ADDR_OWVAR 21
14427: PUSH
14428: LD_VAR 0 1
14432: ST_TO_ADDR
// InitHc ;
14433: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14437: LD_INT 0
14439: PPUSH
14440: LD_VAR 0 2
14444: PPUSH
14445: LD_VAR 0 3
14449: PPUSH
14450: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14454: LD_VAR 0 4
14458: PPUSH
14459: LD_VAR 0 5
14463: PPUSH
14464: CALL_OW 428
14468: PUSH
14469: LD_INT 0
14471: EQUAL
14472: IFFALSE 14496
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14474: CALL_OW 44
14478: PPUSH
14479: LD_VAR 0 4
14483: PPUSH
14484: LD_VAR 0 5
14488: PPUSH
14489: LD_INT 1
14491: PPUSH
14492: CALL_OW 48
// end ;
14496: LD_VAR 0 6
14500: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
// uc_side := your_side ;
14505: LD_ADDR_OWVAR 20
14509: PUSH
14510: LD_OWVAR 2
14514: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14515: LD_VAR 0 1
14519: PUSH
14520: LD_INT 1
14522: PUSH
14523: LD_INT 2
14525: PUSH
14526: LD_INT 3
14528: PUSH
14529: LD_INT 4
14531: PUSH
14532: LD_INT 5
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: IN
14542: IFFALSE 14554
// uc_nation := nation_american else
14544: LD_ADDR_OWVAR 21
14548: PUSH
14549: LD_INT 1
14551: ST_TO_ADDR
14552: GO 14597
// if chassis in [ 11 , 12 , 13 , 14 ] then
14554: LD_VAR 0 1
14558: PUSH
14559: LD_INT 11
14561: PUSH
14562: LD_INT 12
14564: PUSH
14565: LD_INT 13
14567: PUSH
14568: LD_INT 14
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: IN
14577: IFFALSE 14589
// uc_nation := nation_arabian else
14579: LD_ADDR_OWVAR 21
14583: PUSH
14584: LD_INT 2
14586: ST_TO_ADDR
14587: GO 14597
// uc_nation := nation_russian ;
14589: LD_ADDR_OWVAR 21
14593: PUSH
14594: LD_INT 3
14596: ST_TO_ADDR
// vc_chassis := chassis ;
14597: LD_ADDR_OWVAR 37
14601: PUSH
14602: LD_VAR 0 1
14606: ST_TO_ADDR
// vc_engine := engine ;
14607: LD_ADDR_OWVAR 39
14611: PUSH
14612: LD_VAR 0 2
14616: ST_TO_ADDR
// vc_control := control ;
14617: LD_ADDR_OWVAR 38
14621: PUSH
14622: LD_VAR 0 3
14626: ST_TO_ADDR
// vc_weapon := weapon ;
14627: LD_ADDR_OWVAR 40
14631: PUSH
14632: LD_VAR 0 4
14636: ST_TO_ADDR
// un := CreateVehicle ;
14637: LD_ADDR_VAR 0 8
14641: PUSH
14642: CALL_OW 45
14646: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14647: LD_VAR 0 8
14651: PPUSH
14652: LD_INT 0
14654: PPUSH
14655: LD_INT 5
14657: PPUSH
14658: CALL_OW 12
14662: PPUSH
14663: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14667: LD_VAR 0 8
14671: PPUSH
14672: LD_VAR 0 5
14676: PPUSH
14677: LD_VAR 0 6
14681: PPUSH
14682: LD_INT 1
14684: PPUSH
14685: CALL_OW 48
// end ;
14689: LD_VAR 0 7
14693: RET
// export hInvincible ; every 1 do
14694: GO 14696
14696: DISABLE
// hInvincible := [ ] ;
14697: LD_ADDR_EXP 71
14701: PUSH
14702: EMPTY
14703: ST_TO_ADDR
14704: END
// every 10 do var i ;
14705: GO 14707
14707: DISABLE
14708: LD_INT 0
14710: PPUSH
// begin enable ;
14711: ENABLE
// if not hInvincible then
14712: LD_EXP 71
14716: NOT
14717: IFFALSE 14721
// exit ;
14719: GO 14765
// for i in hInvincible do
14721: LD_ADDR_VAR 0 1
14725: PUSH
14726: LD_EXP 71
14730: PUSH
14731: FOR_IN
14732: IFFALSE 14763
// if GetLives ( i ) < 1000 then
14734: LD_VAR 0 1
14738: PPUSH
14739: CALL_OW 256
14743: PUSH
14744: LD_INT 1000
14746: LESS
14747: IFFALSE 14761
// SetLives ( i , 1000 ) ;
14749: LD_VAR 0 1
14753: PPUSH
14754: LD_INT 1000
14756: PPUSH
14757: CALL_OW 234
14761: GO 14731
14763: POP
14764: POP
// end ;
14765: PPOPN 1
14767: END
// export function hHackInvincible ; var i ; begin
14768: LD_INT 0
14770: PPUSH
14771: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14772: LD_ADDR_VAR 0 2
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: LD_INT 21
14782: PUSH
14783: LD_INT 1
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 21
14792: PUSH
14793: LD_INT 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: PPUSH
14805: CALL_OW 69
14809: PUSH
14810: FOR_IN
14811: IFFALSE 14872
// if IsSelected ( i ) then
14813: LD_VAR 0 2
14817: PPUSH
14818: CALL_OW 306
14822: IFFALSE 14870
// begin if i in hInvincible then
14824: LD_VAR 0 2
14828: PUSH
14829: LD_EXP 71
14833: IN
14834: IFFALSE 14854
// hInvincible := hInvincible diff i else
14836: LD_ADDR_EXP 71
14840: PUSH
14841: LD_EXP 71
14845: PUSH
14846: LD_VAR 0 2
14850: DIFF
14851: ST_TO_ADDR
14852: GO 14870
// hInvincible := hInvincible union i ;
14854: LD_ADDR_EXP 71
14858: PUSH
14859: LD_EXP 71
14863: PUSH
14864: LD_VAR 0 2
14868: UNION
14869: ST_TO_ADDR
// end ;
14870: GO 14810
14872: POP
14873: POP
// end ;
14874: LD_VAR 0 1
14878: RET
// export function hHackInvisible ; var i , j ; begin
14879: LD_INT 0
14881: PPUSH
14882: PPUSH
14883: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14884: LD_ADDR_VAR 0 2
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 69
14903: PUSH
14904: FOR_IN
14905: IFFALSE 14929
// if IsSelected ( i ) then
14907: LD_VAR 0 2
14911: PPUSH
14912: CALL_OW 306
14916: IFFALSE 14927
// ComForceInvisible ( i ) ;
14918: LD_VAR 0 2
14922: PPUSH
14923: CALL_OW 496
14927: GO 14904
14929: POP
14930: POP
// end ;
14931: LD_VAR 0 1
14935: RET
// export function hHackChangeYourSide ; begin
14936: LD_INT 0
14938: PPUSH
// if your_side = 8 then
14939: LD_OWVAR 2
14943: PUSH
14944: LD_INT 8
14946: EQUAL
14947: IFFALSE 14959
// your_side := 0 else
14949: LD_ADDR_OWVAR 2
14953: PUSH
14954: LD_INT 0
14956: ST_TO_ADDR
14957: GO 14973
// your_side := your_side + 1 ;
14959: LD_ADDR_OWVAR 2
14963: PUSH
14964: LD_OWVAR 2
14968: PUSH
14969: LD_INT 1
14971: PLUS
14972: ST_TO_ADDR
// end ;
14973: LD_VAR 0 1
14977: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14978: LD_INT 0
14980: PPUSH
14981: PPUSH
14982: PPUSH
// for i in all_units do
14983: LD_ADDR_VAR 0 2
14987: PUSH
14988: LD_OWVAR 3
14992: PUSH
14993: FOR_IN
14994: IFFALSE 15072
// if IsSelected ( i ) then
14996: LD_VAR 0 2
15000: PPUSH
15001: CALL_OW 306
15005: IFFALSE 15070
// begin j := GetSide ( i ) ;
15007: LD_ADDR_VAR 0 3
15011: PUSH
15012: LD_VAR 0 2
15016: PPUSH
15017: CALL_OW 255
15021: ST_TO_ADDR
// if j = 8 then
15022: LD_VAR 0 3
15026: PUSH
15027: LD_INT 8
15029: EQUAL
15030: IFFALSE 15042
// j := 0 else
15032: LD_ADDR_VAR 0 3
15036: PUSH
15037: LD_INT 0
15039: ST_TO_ADDR
15040: GO 15056
// j := j + 1 ;
15042: LD_ADDR_VAR 0 3
15046: PUSH
15047: LD_VAR 0 3
15051: PUSH
15052: LD_INT 1
15054: PLUS
15055: ST_TO_ADDR
// SetSide ( i , j ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_VAR 0 3
15065: PPUSH
15066: CALL_OW 235
// end ;
15070: GO 14993
15072: POP
15073: POP
// end ;
15074: LD_VAR 0 1
15078: RET
// export function hHackFog ; begin
15079: LD_INT 0
15081: PPUSH
// FogOff ( true ) ;
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 344
// end ;
15089: LD_VAR 0 1
15093: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15094: LD_INT 0
15096: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15097: LD_VAR 0 1
15101: PPUSH
15102: LD_VAR 0 2
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: LD_INT 1
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 483
// CenterOnXY ( x , y ) ;
15122: LD_VAR 0 2
15126: PPUSH
15127: LD_VAR 0 3
15131: PPUSH
15132: CALL_OW 84
// end ; end_of_file
15136: LD_VAR 0 4
15140: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15141: LD_VAR 0 1
15145: PUSH
15146: LD_INT 200
15148: DOUBLE
15149: GREATEREQUAL
15150: IFFALSE 15158
15152: LD_INT 299
15154: DOUBLE
15155: LESSEQUAL
15156: IFTRUE 15160
15158: GO 15192
15160: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_VAR 0 2
15170: PPUSH
15171: LD_VAR 0 3
15175: PPUSH
15176: LD_VAR 0 4
15180: PPUSH
15181: LD_VAR 0 5
15185: PPUSH
15186: CALL 15386 0 5
15190: GO 15269
15192: LD_INT 300
15194: DOUBLE
15195: GREATEREQUAL
15196: IFFALSE 15204
15198: LD_INT 399
15200: DOUBLE
15201: LESSEQUAL
15202: IFTRUE 15206
15204: GO 15268
15206: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15207: LD_VAR 0 1
15211: PPUSH
15212: LD_VAR 0 2
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: LD_VAR 0 4
15226: PPUSH
15227: LD_VAR 0 5
15231: PPUSH
15232: LD_VAR 0 6
15236: PPUSH
15237: LD_VAR 0 7
15241: PPUSH
15242: LD_VAR 0 8
15246: PPUSH
15247: LD_VAR 0 9
15251: PPUSH
15252: LD_VAR 0 10
15256: PPUSH
15257: LD_VAR 0 11
15261: PPUSH
15262: CALL 13161 0 11
15266: GO 15269
15268: POP
// end ; end_of_file
15269: PPOPN 11
15271: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15272: LD_INT 0
15274: PPUSH
15275: PPUSH
15276: PPUSH
15277: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15278: LD_VAR 0 1
15282: PPUSH
15283: CALL_OW 264
15287: PUSH
15288: LD_EXP 5
15292: EQUAL
15293: IFFALSE 15365
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15295: LD_INT 68
15297: PPUSH
15298: LD_VAR 0 1
15302: PPUSH
15303: CALL_OW 255
15307: PPUSH
15308: CALL_OW 321
15312: PUSH
15313: LD_INT 2
15315: EQUAL
15316: IFFALSE 15328
// eff := 70 else
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: LD_INT 70
15325: ST_TO_ADDR
15326: GO 15336
// eff := 30 ;
15328: LD_ADDR_VAR 0 4
15332: PUSH
15333: LD_INT 30
15335: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15336: LD_VAR 0 1
15340: PPUSH
15341: CALL_OW 250
15345: PPUSH
15346: LD_VAR 0 1
15350: PPUSH
15351: CALL_OW 251
15355: PPUSH
15356: LD_VAR 0 4
15360: PPUSH
15361: CALL_OW 495
// end ; end ;
15365: LD_VAR 0 2
15369: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15370: LD_INT 0
15372: PPUSH
// end ;
15373: LD_VAR 0 4
15377: RET
// export function SOS_Command ( cmd ) ; begin
15378: LD_INT 0
15380: PPUSH
// end ;
15381: LD_VAR 0 2
15385: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15386: LD_INT 0
15388: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15389: LD_VAR 0 1
15393: PUSH
15394: LD_INT 250
15396: EQUAL
15397: PUSH
15398: LD_VAR 0 2
15402: PPUSH
15403: CALL_OW 264
15407: PUSH
15408: LD_EXP 8
15412: EQUAL
15413: AND
15414: IFFALSE 15435
// MinerPlaceMine ( unit , x , y ) ;
15416: LD_VAR 0 2
15420: PPUSH
15421: LD_VAR 0 4
15425: PPUSH
15426: LD_VAR 0 5
15430: PPUSH
15431: CALL 17776 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15435: LD_VAR 0 1
15439: PUSH
15440: LD_INT 251
15442: EQUAL
15443: PUSH
15444: LD_VAR 0 2
15448: PPUSH
15449: CALL_OW 264
15453: PUSH
15454: LD_EXP 8
15458: EQUAL
15459: AND
15460: IFFALSE 15481
// MinerDetonateMine ( unit , x , y ) ;
15462: LD_VAR 0 2
15466: PPUSH
15467: LD_VAR 0 4
15471: PPUSH
15472: LD_VAR 0 5
15476: PPUSH
15477: CALL 18053 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15481: LD_VAR 0 1
15485: PUSH
15486: LD_INT 252
15488: EQUAL
15489: PUSH
15490: LD_VAR 0 2
15494: PPUSH
15495: CALL_OW 264
15499: PUSH
15500: LD_EXP 8
15504: EQUAL
15505: AND
15506: IFFALSE 15527
// MinerCreateMinefield ( unit , x , y ) ;
15508: LD_VAR 0 2
15512: PPUSH
15513: LD_VAR 0 4
15517: PPUSH
15518: LD_VAR 0 5
15522: PPUSH
15523: CALL 18470 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15527: LD_VAR 0 1
15531: PUSH
15532: LD_INT 253
15534: EQUAL
15535: PUSH
15536: LD_VAR 0 2
15540: PPUSH
15541: CALL_OW 257
15545: PUSH
15546: LD_INT 5
15548: EQUAL
15549: AND
15550: IFFALSE 15571
// ComBinocular ( unit , x , y ) ;
15552: LD_VAR 0 2
15556: PPUSH
15557: LD_VAR 0 4
15561: PPUSH
15562: LD_VAR 0 5
15566: PPUSH
15567: CALL 18841 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15571: LD_VAR 0 1
15575: PUSH
15576: LD_INT 254
15578: EQUAL
15579: PUSH
15580: LD_VAR 0 2
15584: PPUSH
15585: CALL_OW 264
15589: PUSH
15590: LD_EXP 3
15594: EQUAL
15595: AND
15596: PUSH
15597: LD_VAR 0 3
15601: PPUSH
15602: CALL_OW 263
15606: PUSH
15607: LD_INT 3
15609: EQUAL
15610: AND
15611: IFFALSE 15627
// HackDestroyVehicle ( unit , selectedUnit ) ;
15613: LD_VAR 0 2
15617: PPUSH
15618: LD_VAR 0 3
15622: PPUSH
15623: CALL 17136 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15627: LD_VAR 0 1
15631: PUSH
15632: LD_INT 255
15634: EQUAL
15635: PUSH
15636: LD_VAR 0 2
15640: PPUSH
15641: CALL_OW 264
15645: PUSH
15646: LD_INT 14
15648: PUSH
15649: LD_INT 53
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: IN
15656: AND
15657: PUSH
15658: LD_VAR 0 4
15662: PPUSH
15663: LD_VAR 0 5
15667: PPUSH
15668: CALL_OW 488
15672: AND
15673: IFFALSE 15697
// CutTreeXYR ( unit , x , y , 12 ) ;
15675: LD_VAR 0 2
15679: PPUSH
15680: LD_VAR 0 4
15684: PPUSH
15685: LD_VAR 0 5
15689: PPUSH
15690: LD_INT 12
15692: PPUSH
15693: CALL 15702 0 4
// end ;
15697: LD_VAR 0 6
15701: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15702: LD_INT 0
15704: PPUSH
15705: PPUSH
15706: PPUSH
15707: PPUSH
15708: PPUSH
15709: PPUSH
15710: PPUSH
15711: PPUSH
15712: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15713: LD_VAR 0 1
15717: NOT
15718: PUSH
15719: LD_VAR 0 2
15723: PPUSH
15724: LD_VAR 0 3
15728: PPUSH
15729: CALL_OW 488
15733: NOT
15734: OR
15735: PUSH
15736: LD_VAR 0 4
15740: NOT
15741: OR
15742: IFFALSE 15746
// exit ;
15744: GO 16086
// list := [ ] ;
15746: LD_ADDR_VAR 0 13
15750: PUSH
15751: EMPTY
15752: ST_TO_ADDR
// if x - r < 0 then
15753: LD_VAR 0 2
15757: PUSH
15758: LD_VAR 0 4
15762: MINUS
15763: PUSH
15764: LD_INT 0
15766: LESS
15767: IFFALSE 15779
// min_x := 0 else
15769: LD_ADDR_VAR 0 7
15773: PUSH
15774: LD_INT 0
15776: ST_TO_ADDR
15777: GO 15795
// min_x := x - r ;
15779: LD_ADDR_VAR 0 7
15783: PUSH
15784: LD_VAR 0 2
15788: PUSH
15789: LD_VAR 0 4
15793: MINUS
15794: ST_TO_ADDR
// if y - r < 0 then
15795: LD_VAR 0 3
15799: PUSH
15800: LD_VAR 0 4
15804: MINUS
15805: PUSH
15806: LD_INT 0
15808: LESS
15809: IFFALSE 15821
// min_y := 0 else
15811: LD_ADDR_VAR 0 8
15815: PUSH
15816: LD_INT 0
15818: ST_TO_ADDR
15819: GO 15837
// min_y := y - r ;
15821: LD_ADDR_VAR 0 8
15825: PUSH
15826: LD_VAR 0 3
15830: PUSH
15831: LD_VAR 0 4
15835: MINUS
15836: ST_TO_ADDR
// max_x := x + r ;
15837: LD_ADDR_VAR 0 9
15841: PUSH
15842: LD_VAR 0 2
15846: PUSH
15847: LD_VAR 0 4
15851: PLUS
15852: ST_TO_ADDR
// max_y := y + r ;
15853: LD_ADDR_VAR 0 10
15857: PUSH
15858: LD_VAR 0 3
15862: PUSH
15863: LD_VAR 0 4
15867: PLUS
15868: ST_TO_ADDR
// for _x = min_x to max_x do
15869: LD_ADDR_VAR 0 11
15873: PUSH
15874: DOUBLE
15875: LD_VAR 0 7
15879: DEC
15880: ST_TO_ADDR
15881: LD_VAR 0 9
15885: PUSH
15886: FOR_TO
15887: IFFALSE 16004
// for _y = min_y to max_y do
15889: LD_ADDR_VAR 0 12
15893: PUSH
15894: DOUBLE
15895: LD_VAR 0 8
15899: DEC
15900: ST_TO_ADDR
15901: LD_VAR 0 10
15905: PUSH
15906: FOR_TO
15907: IFFALSE 16000
// begin if not ValidHex ( _x , _y ) then
15909: LD_VAR 0 11
15913: PPUSH
15914: LD_VAR 0 12
15918: PPUSH
15919: CALL_OW 488
15923: NOT
15924: IFFALSE 15928
// continue ;
15926: GO 15906
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15928: LD_VAR 0 11
15932: PPUSH
15933: LD_VAR 0 12
15937: PPUSH
15938: CALL_OW 351
15942: PUSH
15943: LD_VAR 0 11
15947: PPUSH
15948: LD_VAR 0 12
15952: PPUSH
15953: CALL_OW 554
15957: AND
15958: IFFALSE 15998
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15960: LD_ADDR_VAR 0 13
15964: PUSH
15965: LD_VAR 0 13
15969: PPUSH
15970: LD_VAR 0 13
15974: PUSH
15975: LD_INT 1
15977: PLUS
15978: PPUSH
15979: LD_VAR 0 11
15983: PUSH
15984: LD_VAR 0 12
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 2
15997: ST_TO_ADDR
// end ;
15998: GO 15906
16000: POP
16001: POP
16002: GO 15886
16004: POP
16005: POP
// if not list then
16006: LD_VAR 0 13
16010: NOT
16011: IFFALSE 16015
// exit ;
16013: GO 16086
// for i in list do
16015: LD_ADDR_VAR 0 6
16019: PUSH
16020: LD_VAR 0 13
16024: PUSH
16025: FOR_IN
16026: IFFALSE 16084
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16028: LD_VAR 0 1
16032: PPUSH
16033: LD_STRING M
16035: PUSH
16036: LD_VAR 0 6
16040: PUSH
16041: LD_INT 1
16043: ARRAY
16044: PUSH
16045: LD_VAR 0 6
16049: PUSH
16050: LD_INT 2
16052: ARRAY
16053: PUSH
16054: LD_INT 0
16056: PUSH
16057: LD_INT 0
16059: PUSH
16060: LD_INT 0
16062: PUSH
16063: LD_INT 0
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: PPUSH
16078: CALL_OW 447
16082: GO 16025
16084: POP
16085: POP
// end ;
16086: LD_VAR 0 5
16090: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
16091: LD_EXP 72
16095: NOT
16096: IFFALSE 16146
16098: GO 16100
16100: DISABLE
// begin initHack := true ;
16101: LD_ADDR_EXP 72
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// hackTanks := [ ] ;
16109: LD_ADDR_EXP 73
16113: PUSH
16114: EMPTY
16115: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16116: LD_ADDR_EXP 74
16120: PUSH
16121: EMPTY
16122: ST_TO_ADDR
// hackLimit := 3 ;
16123: LD_ADDR_EXP 75
16127: PUSH
16128: LD_INT 3
16130: ST_TO_ADDR
// hackDist := 12 ;
16131: LD_ADDR_EXP 76
16135: PUSH
16136: LD_INT 12
16138: ST_TO_ADDR
// hackCounter := [ ] ;
16139: LD_ADDR_EXP 77
16143: PUSH
16144: EMPTY
16145: ST_TO_ADDR
// end ;
16146: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16147: LD_EXP 72
16151: PUSH
16152: LD_INT 34
16154: PUSH
16155: LD_EXP 3
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PPUSH
16164: CALL_OW 69
16168: AND
16169: IFFALSE 16424
16171: GO 16173
16173: DISABLE
16174: LD_INT 0
16176: PPUSH
16177: PPUSH
// begin enable ;
16178: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16179: LD_ADDR_VAR 0 1
16183: PUSH
16184: LD_INT 34
16186: PUSH
16187: LD_EXP 3
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PPUSH
16196: CALL_OW 69
16200: PUSH
16201: FOR_IN
16202: IFFALSE 16422
// begin if not i in hackTanks then
16204: LD_VAR 0 1
16208: PUSH
16209: LD_EXP 73
16213: IN
16214: NOT
16215: IFFALSE 16298
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16217: LD_ADDR_EXP 73
16221: PUSH
16222: LD_EXP 73
16226: PPUSH
16227: LD_EXP 73
16231: PUSH
16232: LD_INT 1
16234: PLUS
16235: PPUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 1
16245: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16246: LD_ADDR_EXP 74
16250: PUSH
16251: LD_EXP 74
16255: PPUSH
16256: LD_EXP 74
16260: PUSH
16261: LD_INT 1
16263: PLUS
16264: PPUSH
16265: EMPTY
16266: PPUSH
16267: CALL_OW 1
16271: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16272: LD_ADDR_EXP 77
16276: PUSH
16277: LD_EXP 77
16281: PPUSH
16282: LD_EXP 77
16286: PUSH
16287: LD_INT 1
16289: PLUS
16290: PPUSH
16291: EMPTY
16292: PPUSH
16293: CALL_OW 1
16297: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 302
16307: NOT
16308: IFFALSE 16321
// begin HackUnlinkAll ( i ) ;
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL 16427 0 1
// continue ;
16319: GO 16201
// end ; HackCheckCapturedStatus ( i ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL 16870 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16330: LD_ADDR_VAR 0 2
16334: PUSH
16335: LD_INT 81
16337: PUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 255
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 33
16354: PUSH
16355: LD_INT 3
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 91
16364: PUSH
16365: LD_VAR 0 1
16369: PUSH
16370: LD_EXP 76
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 50
16382: PUSH
16383: EMPTY
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: PPUSH
16392: CALL_OW 69
16396: ST_TO_ADDR
// if not tmp then
16397: LD_VAR 0 2
16401: NOT
16402: IFFALSE 16406
// continue ;
16404: GO 16201
// HackLink ( i , tmp ) ;
16406: LD_VAR 0 1
16410: PPUSH
16411: LD_VAR 0 2
16415: PPUSH
16416: CALL 16563 0 2
// end ;
16420: GO 16201
16422: POP
16423: POP
// end ;
16424: PPOPN 2
16426: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16427: LD_INT 0
16429: PPUSH
16430: PPUSH
16431: PPUSH
// if not hack in hackTanks then
16432: LD_VAR 0 1
16436: PUSH
16437: LD_EXP 73
16441: IN
16442: NOT
16443: IFFALSE 16447
// exit ;
16445: GO 16558
// index := GetElementIndex ( hackTanks , hack ) ;
16447: LD_ADDR_VAR 0 4
16451: PUSH
16452: LD_EXP 73
16456: PPUSH
16457: LD_VAR 0 1
16461: PPUSH
16462: CALL 23992 0 2
16466: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16467: LD_EXP 74
16471: PUSH
16472: LD_VAR 0 4
16476: ARRAY
16477: IFFALSE 16558
// begin for i in hackTanksCaptured [ index ] do
16479: LD_ADDR_VAR 0 3
16483: PUSH
16484: LD_EXP 74
16488: PUSH
16489: LD_VAR 0 4
16493: ARRAY
16494: PUSH
16495: FOR_IN
16496: IFFALSE 16522
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16498: LD_VAR 0 3
16502: PUSH
16503: LD_INT 1
16505: ARRAY
16506: PPUSH
16507: LD_VAR 0 3
16511: PUSH
16512: LD_INT 2
16514: ARRAY
16515: PPUSH
16516: CALL_OW 235
16520: GO 16495
16522: POP
16523: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16524: LD_ADDR_EXP 74
16528: PUSH
16529: LD_EXP 74
16533: PPUSH
16534: LD_VAR 0 4
16538: PPUSH
16539: EMPTY
16540: PPUSH
16541: CALL_OW 1
16545: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16546: LD_VAR 0 1
16550: PPUSH
16551: LD_INT 0
16553: PPUSH
16554: CALL_OW 505
// end ; end ;
16558: LD_VAR 0 2
16562: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16563: LD_INT 0
16565: PPUSH
16566: PPUSH
16567: PPUSH
// if not hack in hackTanks or not vehicles then
16568: LD_VAR 0 1
16572: PUSH
16573: LD_EXP 73
16577: IN
16578: NOT
16579: PUSH
16580: LD_VAR 0 2
16584: NOT
16585: OR
16586: IFFALSE 16590
// exit ;
16588: GO 16865
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16590: LD_ADDR_VAR 0 2
16594: PUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: LD_VAR 0 2
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 1
16610: PPUSH
16611: CALL 24642 0 4
16615: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16616: LD_ADDR_VAR 0 5
16620: PUSH
16621: LD_EXP 73
16625: PPUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL 23992 0 2
16635: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16636: LD_EXP 74
16640: PUSH
16641: LD_VAR 0 5
16645: ARRAY
16646: PUSH
16647: LD_EXP 75
16651: LESS
16652: IFFALSE 16841
// begin for i := 1 to vehicles do
16654: LD_ADDR_VAR 0 4
16658: PUSH
16659: DOUBLE
16660: LD_INT 1
16662: DEC
16663: ST_TO_ADDR
16664: LD_VAR 0 2
16668: PUSH
16669: FOR_TO
16670: IFFALSE 16839
// begin if hackTanksCaptured [ index ] = hackLimit then
16672: LD_EXP 74
16676: PUSH
16677: LD_VAR 0 5
16681: ARRAY
16682: PUSH
16683: LD_EXP 75
16687: EQUAL
16688: IFFALSE 16692
// break ;
16690: GO 16839
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16692: LD_ADDR_EXP 77
16696: PUSH
16697: LD_EXP 77
16701: PPUSH
16702: LD_VAR 0 5
16706: PPUSH
16707: LD_EXP 77
16711: PUSH
16712: LD_VAR 0 5
16716: ARRAY
16717: PUSH
16718: LD_INT 1
16720: PLUS
16721: PPUSH
16722: CALL_OW 1
16726: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16727: LD_ADDR_EXP 74
16731: PUSH
16732: LD_EXP 74
16736: PPUSH
16737: LD_VAR 0 5
16741: PUSH
16742: LD_EXP 74
16746: PUSH
16747: LD_VAR 0 5
16751: ARRAY
16752: PUSH
16753: LD_INT 1
16755: PLUS
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PPUSH
16761: LD_VAR 0 2
16765: PUSH
16766: LD_VAR 0 4
16770: ARRAY
16771: PUSH
16772: LD_VAR 0 2
16776: PUSH
16777: LD_VAR 0 4
16781: ARRAY
16782: PPUSH
16783: CALL_OW 255
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL 24207 0 3
16796: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16797: LD_VAR 0 2
16801: PUSH
16802: LD_VAR 0 4
16806: ARRAY
16807: PPUSH
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 255
16817: PPUSH
16818: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16822: LD_VAR 0 2
16826: PUSH
16827: LD_VAR 0 4
16831: ARRAY
16832: PPUSH
16833: CALL_OW 141
// end ;
16837: GO 16669
16839: POP
16840: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16841: LD_VAR 0 1
16845: PPUSH
16846: LD_EXP 74
16850: PUSH
16851: LD_VAR 0 5
16855: ARRAY
16856: PUSH
16857: LD_INT 0
16859: PLUS
16860: PPUSH
16861: CALL_OW 505
// end ;
16865: LD_VAR 0 3
16869: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16870: LD_INT 0
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
// if not hack in hackTanks then
16876: LD_VAR 0 1
16880: PUSH
16881: LD_EXP 73
16885: IN
16886: NOT
16887: IFFALSE 16891
// exit ;
16889: GO 17131
// index := GetElementIndex ( hackTanks , hack ) ;
16891: LD_ADDR_VAR 0 4
16895: PUSH
16896: LD_EXP 73
16900: PPUSH
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL 23992 0 2
16910: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16911: LD_ADDR_VAR 0 3
16915: PUSH
16916: DOUBLE
16917: LD_EXP 74
16921: PUSH
16922: LD_VAR 0 4
16926: ARRAY
16927: INC
16928: ST_TO_ADDR
16929: LD_INT 1
16931: PUSH
16932: FOR_DOWNTO
16933: IFFALSE 17105
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16935: LD_ADDR_VAR 0 5
16939: PUSH
16940: LD_EXP 74
16944: PUSH
16945: LD_VAR 0 4
16949: ARRAY
16950: PUSH
16951: LD_VAR 0 3
16955: ARRAY
16956: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16957: LD_VAR 0 5
16961: PUSH
16962: LD_INT 1
16964: ARRAY
16965: PPUSH
16966: CALL_OW 302
16970: NOT
16971: PUSH
16972: LD_VAR 0 5
16976: PUSH
16977: LD_INT 1
16979: ARRAY
16980: PPUSH
16981: CALL_OW 255
16985: PUSH
16986: LD_VAR 0 1
16990: PPUSH
16991: CALL_OW 255
16995: NONEQUAL
16996: OR
16997: IFFALSE 17103
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16999: LD_VAR 0 5
17003: PUSH
17004: LD_INT 1
17006: ARRAY
17007: PPUSH
17008: CALL_OW 305
17012: PUSH
17013: LD_VAR 0 5
17017: PUSH
17018: LD_INT 1
17020: ARRAY
17021: PPUSH
17022: CALL_OW 255
17026: PUSH
17027: LD_VAR 0 1
17031: PPUSH
17032: CALL_OW 255
17036: EQUAL
17037: AND
17038: IFFALSE 17062
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17040: LD_VAR 0 5
17044: PUSH
17045: LD_INT 1
17047: ARRAY
17048: PPUSH
17049: LD_VAR 0 5
17053: PUSH
17054: LD_INT 2
17056: ARRAY
17057: PPUSH
17058: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
17062: LD_ADDR_EXP 74
17066: PUSH
17067: LD_EXP 74
17071: PPUSH
17072: LD_VAR 0 4
17076: PPUSH
17077: LD_EXP 74
17081: PUSH
17082: LD_VAR 0 4
17086: ARRAY
17087: PPUSH
17088: LD_VAR 0 3
17092: PPUSH
17093: CALL_OW 3
17097: PPUSH
17098: CALL_OW 1
17102: ST_TO_ADDR
// end ; end ;
17103: GO 16932
17105: POP
17106: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17107: LD_VAR 0 1
17111: PPUSH
17112: LD_EXP 74
17116: PUSH
17117: LD_VAR 0 4
17121: ARRAY
17122: PUSH
17123: LD_INT 0
17125: PLUS
17126: PPUSH
17127: CALL_OW 505
// end ;
17131: LD_VAR 0 2
17135: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17136: LD_INT 0
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
// if not hack in hackTanks then
17142: LD_VAR 0 1
17146: PUSH
17147: LD_EXP 73
17151: IN
17152: NOT
17153: IFFALSE 17157
// exit ;
17155: GO 17242
// index := GetElementIndex ( hackTanks , hack ) ;
17157: LD_ADDR_VAR 0 5
17161: PUSH
17162: LD_EXP 73
17166: PPUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL 23992 0 2
17176: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17177: LD_ADDR_VAR 0 4
17181: PUSH
17182: DOUBLE
17183: LD_INT 1
17185: DEC
17186: ST_TO_ADDR
17187: LD_EXP 74
17191: PUSH
17192: LD_VAR 0 5
17196: ARRAY
17197: PUSH
17198: FOR_TO
17199: IFFALSE 17240
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17201: LD_EXP 74
17205: PUSH
17206: LD_VAR 0 5
17210: ARRAY
17211: PUSH
17212: LD_VAR 0 4
17216: ARRAY
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: PUSH
17222: LD_VAR 0 2
17226: EQUAL
17227: IFFALSE 17238
// KillUnit ( vehicle ) ;
17229: LD_VAR 0 2
17233: PPUSH
17234: CALL_OW 66
17238: GO 17198
17240: POP
17241: POP
// end ;
17242: LD_VAR 0 3
17246: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17247: LD_EXP 78
17251: NOT
17252: IFFALSE 17287
17254: GO 17256
17256: DISABLE
// begin initMiner := true ;
17257: LD_ADDR_EXP 78
17261: PUSH
17262: LD_INT 1
17264: ST_TO_ADDR
// minersList := [ ] ;
17265: LD_ADDR_EXP 79
17269: PUSH
17270: EMPTY
17271: ST_TO_ADDR
// minerMinesList := [ ] ;
17272: LD_ADDR_EXP 80
17276: PUSH
17277: EMPTY
17278: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17279: LD_ADDR_EXP 81
17283: PUSH
17284: LD_INT 5
17286: ST_TO_ADDR
// end ;
17287: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17288: LD_EXP 78
17292: PUSH
17293: LD_INT 34
17295: PUSH
17296: LD_EXP 8
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 69
17309: AND
17310: IFFALSE 17773
17312: GO 17314
17314: DISABLE
17315: LD_INT 0
17317: PPUSH
17318: PPUSH
17319: PPUSH
17320: PPUSH
// begin enable ;
17321: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17322: LD_ADDR_VAR 0 1
17326: PUSH
17327: LD_INT 34
17329: PUSH
17330: LD_EXP 8
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PPUSH
17339: CALL_OW 69
17343: PUSH
17344: FOR_IN
17345: IFFALSE 17417
// begin if not i in minersList then
17347: LD_VAR 0 1
17351: PUSH
17352: LD_EXP 79
17356: IN
17357: NOT
17358: IFFALSE 17415
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17360: LD_ADDR_EXP 79
17364: PUSH
17365: LD_EXP 79
17369: PPUSH
17370: LD_EXP 79
17374: PUSH
17375: LD_INT 1
17377: PLUS
17378: PPUSH
17379: LD_VAR 0 1
17383: PPUSH
17384: CALL_OW 1
17388: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17389: LD_ADDR_EXP 80
17393: PUSH
17394: LD_EXP 80
17398: PPUSH
17399: LD_EXP 80
17403: PUSH
17404: LD_INT 1
17406: PLUS
17407: PPUSH
17408: EMPTY
17409: PPUSH
17410: CALL_OW 1
17414: ST_TO_ADDR
// end end ;
17415: GO 17344
17417: POP
17418: POP
// for i := minerMinesList downto 1 do
17419: LD_ADDR_VAR 0 1
17423: PUSH
17424: DOUBLE
17425: LD_EXP 80
17429: INC
17430: ST_TO_ADDR
17431: LD_INT 1
17433: PUSH
17434: FOR_DOWNTO
17435: IFFALSE 17771
// begin if IsLive ( minersList [ i ] ) then
17437: LD_EXP 79
17441: PUSH
17442: LD_VAR 0 1
17446: ARRAY
17447: PPUSH
17448: CALL_OW 300
17452: IFFALSE 17480
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17454: LD_EXP 79
17458: PUSH
17459: LD_VAR 0 1
17463: ARRAY
17464: PPUSH
17465: LD_EXP 80
17469: PUSH
17470: LD_VAR 0 1
17474: ARRAY
17475: PPUSH
17476: CALL_OW 505
// if not minerMinesList [ i ] then
17480: LD_EXP 80
17484: PUSH
17485: LD_VAR 0 1
17489: ARRAY
17490: NOT
17491: IFFALSE 17495
// continue ;
17493: GO 17434
// for j := minerMinesList [ i ] downto 1 do
17495: LD_ADDR_VAR 0 2
17499: PUSH
17500: DOUBLE
17501: LD_EXP 80
17505: PUSH
17506: LD_VAR 0 1
17510: ARRAY
17511: INC
17512: ST_TO_ADDR
17513: LD_INT 1
17515: PUSH
17516: FOR_DOWNTO
17517: IFFALSE 17767
// begin side := GetSide ( minersList [ i ] ) ;
17519: LD_ADDR_VAR 0 3
17523: PUSH
17524: LD_EXP 79
17528: PUSH
17529: LD_VAR 0 1
17533: ARRAY
17534: PPUSH
17535: CALL_OW 255
17539: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17540: LD_ADDR_VAR 0 4
17544: PUSH
17545: LD_EXP 80
17549: PUSH
17550: LD_VAR 0 1
17554: ARRAY
17555: PUSH
17556: LD_VAR 0 2
17560: ARRAY
17561: PUSH
17562: LD_INT 1
17564: ARRAY
17565: PPUSH
17566: LD_EXP 80
17570: PUSH
17571: LD_VAR 0 1
17575: ARRAY
17576: PUSH
17577: LD_VAR 0 2
17581: ARRAY
17582: PUSH
17583: LD_INT 2
17585: ARRAY
17586: PPUSH
17587: CALL_OW 428
17591: ST_TO_ADDR
// if not tmp then
17592: LD_VAR 0 4
17596: NOT
17597: IFFALSE 17601
// continue ;
17599: GO 17516
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17601: LD_VAR 0 4
17605: PUSH
17606: LD_INT 81
17608: PUSH
17609: LD_VAR 0 3
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: IN
17623: PUSH
17624: LD_EXP 80
17628: PUSH
17629: LD_VAR 0 1
17633: ARRAY
17634: PUSH
17635: LD_VAR 0 2
17639: ARRAY
17640: PUSH
17641: LD_INT 1
17643: ARRAY
17644: PPUSH
17645: LD_EXP 80
17649: PUSH
17650: LD_VAR 0 1
17654: ARRAY
17655: PUSH
17656: LD_VAR 0 2
17660: ARRAY
17661: PUSH
17662: LD_INT 2
17664: ARRAY
17665: PPUSH
17666: CALL_OW 458
17670: AND
17671: IFFALSE 17765
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17673: LD_EXP 80
17677: PUSH
17678: LD_VAR 0 1
17682: ARRAY
17683: PUSH
17684: LD_VAR 0 2
17688: ARRAY
17689: PUSH
17690: LD_INT 1
17692: ARRAY
17693: PPUSH
17694: LD_EXP 80
17698: PUSH
17699: LD_VAR 0 1
17703: ARRAY
17704: PUSH
17705: LD_VAR 0 2
17709: ARRAY
17710: PUSH
17711: LD_INT 2
17713: ARRAY
17714: PPUSH
17715: LD_VAR 0 3
17719: PPUSH
17720: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17724: LD_ADDR_EXP 80
17728: PUSH
17729: LD_EXP 80
17733: PPUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: LD_EXP 80
17743: PUSH
17744: LD_VAR 0 1
17748: ARRAY
17749: PPUSH
17750: LD_VAR 0 2
17754: PPUSH
17755: CALL_OW 3
17759: PPUSH
17760: CALL_OW 1
17764: ST_TO_ADDR
// end ; end ;
17765: GO 17516
17767: POP
17768: POP
// end ;
17769: GO 17434
17771: POP
17772: POP
// end ;
17773: PPOPN 4
17775: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17776: LD_INT 0
17778: PPUSH
17779: PPUSH
// result := false ;
17780: LD_ADDR_VAR 0 4
17784: PUSH
17785: LD_INT 0
17787: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17788: LD_VAR 0 1
17792: PPUSH
17793: CALL_OW 264
17797: PUSH
17798: LD_EXP 8
17802: EQUAL
17803: NOT
17804: IFFALSE 17808
// exit ;
17806: GO 18048
// index := GetElementIndex ( minersList , unit ) ;
17808: LD_ADDR_VAR 0 5
17812: PUSH
17813: LD_EXP 79
17817: PPUSH
17818: LD_VAR 0 1
17822: PPUSH
17823: CALL 23992 0 2
17827: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17828: LD_EXP 80
17832: PUSH
17833: LD_VAR 0 5
17837: ARRAY
17838: PUSH
17839: LD_EXP 81
17843: GREATEREQUAL
17844: IFFALSE 17848
// exit ;
17846: GO 18048
// ComMoveXY ( unit , x , y ) ;
17848: LD_VAR 0 1
17852: PPUSH
17853: LD_VAR 0 2
17857: PPUSH
17858: LD_VAR 0 3
17862: PPUSH
17863: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17867: LD_INT 35
17869: PPUSH
17870: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17874: LD_VAR 0 1
17878: PPUSH
17879: LD_VAR 0 2
17883: PPUSH
17884: LD_VAR 0 3
17888: PPUSH
17889: CALL 54056 0 3
17893: NOT
17894: PUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: CALL_OW 314
17904: AND
17905: IFFALSE 17909
// exit ;
17907: GO 18048
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17909: LD_VAR 0 2
17913: PPUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: CALL_OW 428
17923: PUSH
17924: LD_VAR 0 1
17928: EQUAL
17929: PUSH
17930: LD_VAR 0 1
17934: PPUSH
17935: CALL_OW 314
17939: NOT
17940: AND
17941: IFFALSE 17867
// PlaySoundXY ( x , y , PlantMine ) ;
17943: LD_VAR 0 2
17947: PPUSH
17948: LD_VAR 0 3
17952: PPUSH
17953: LD_STRING PlantMine
17955: PPUSH
17956: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17960: LD_VAR 0 2
17964: PPUSH
17965: LD_VAR 0 3
17969: PPUSH
17970: LD_VAR 0 1
17974: PPUSH
17975: CALL_OW 255
17979: PPUSH
17980: LD_INT 0
17982: PPUSH
17983: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17987: LD_ADDR_EXP 80
17991: PUSH
17992: LD_EXP 80
17996: PPUSH
17997: LD_VAR 0 5
18001: PUSH
18002: LD_EXP 80
18006: PUSH
18007: LD_VAR 0 5
18011: ARRAY
18012: PUSH
18013: LD_INT 1
18015: PLUS
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: LD_VAR 0 2
18025: PUSH
18026: LD_VAR 0 3
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PPUSH
18035: CALL 24207 0 3
18039: ST_TO_ADDR
// result := true ;
18040: LD_ADDR_VAR 0 4
18044: PUSH
18045: LD_INT 1
18047: ST_TO_ADDR
// end ;
18048: LD_VAR 0 4
18052: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18053: LD_INT 0
18055: PPUSH
18056: PPUSH
18057: PPUSH
// if not unit in minersList then
18058: LD_VAR 0 1
18062: PUSH
18063: LD_EXP 79
18067: IN
18068: NOT
18069: IFFALSE 18073
// exit ;
18071: GO 18465
// index := GetElementIndex ( minersList , unit ) ;
18073: LD_ADDR_VAR 0 6
18077: PUSH
18078: LD_EXP 79
18082: PPUSH
18083: LD_VAR 0 1
18087: PPUSH
18088: CALL 23992 0 2
18092: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18093: LD_ADDR_VAR 0 5
18097: PUSH
18098: DOUBLE
18099: LD_EXP 80
18103: PUSH
18104: LD_VAR 0 6
18108: ARRAY
18109: INC
18110: ST_TO_ADDR
18111: LD_INT 1
18113: PUSH
18114: FOR_DOWNTO
18115: IFFALSE 18276
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18117: LD_EXP 80
18121: PUSH
18122: LD_VAR 0 6
18126: ARRAY
18127: PUSH
18128: LD_VAR 0 5
18132: ARRAY
18133: PUSH
18134: LD_INT 1
18136: ARRAY
18137: PUSH
18138: LD_VAR 0 2
18142: EQUAL
18143: PUSH
18144: LD_EXP 80
18148: PUSH
18149: LD_VAR 0 6
18153: ARRAY
18154: PUSH
18155: LD_VAR 0 5
18159: ARRAY
18160: PUSH
18161: LD_INT 2
18163: ARRAY
18164: PUSH
18165: LD_VAR 0 3
18169: EQUAL
18170: AND
18171: IFFALSE 18274
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18173: LD_EXP 80
18177: PUSH
18178: LD_VAR 0 6
18182: ARRAY
18183: PUSH
18184: LD_VAR 0 5
18188: ARRAY
18189: PUSH
18190: LD_INT 1
18192: ARRAY
18193: PPUSH
18194: LD_EXP 80
18198: PUSH
18199: LD_VAR 0 6
18203: ARRAY
18204: PUSH
18205: LD_VAR 0 5
18209: ARRAY
18210: PUSH
18211: LD_INT 2
18213: ARRAY
18214: PPUSH
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 255
18224: PPUSH
18225: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18229: LD_ADDR_EXP 80
18233: PUSH
18234: LD_EXP 80
18238: PPUSH
18239: LD_VAR 0 6
18243: PPUSH
18244: LD_EXP 80
18248: PUSH
18249: LD_VAR 0 6
18253: ARRAY
18254: PPUSH
18255: LD_VAR 0 5
18259: PPUSH
18260: CALL_OW 3
18264: PPUSH
18265: CALL_OW 1
18269: ST_TO_ADDR
// exit ;
18270: POP
18271: POP
18272: GO 18465
// end ; end ;
18274: GO 18114
18276: POP
18277: POP
// for i := minerMinesList [ index ] downto 1 do
18278: LD_ADDR_VAR 0 5
18282: PUSH
18283: DOUBLE
18284: LD_EXP 80
18288: PUSH
18289: LD_VAR 0 6
18293: ARRAY
18294: INC
18295: ST_TO_ADDR
18296: LD_INT 1
18298: PUSH
18299: FOR_DOWNTO
18300: IFFALSE 18463
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18302: LD_EXP 80
18306: PUSH
18307: LD_VAR 0 6
18311: ARRAY
18312: PUSH
18313: LD_VAR 0 5
18317: ARRAY
18318: PUSH
18319: LD_INT 1
18321: ARRAY
18322: PPUSH
18323: LD_EXP 80
18327: PUSH
18328: LD_VAR 0 6
18332: ARRAY
18333: PUSH
18334: LD_VAR 0 5
18338: ARRAY
18339: PUSH
18340: LD_INT 2
18342: ARRAY
18343: PPUSH
18344: LD_VAR 0 2
18348: PPUSH
18349: LD_VAR 0 3
18353: PPUSH
18354: CALL_OW 298
18358: PUSH
18359: LD_INT 6
18361: LESS
18362: IFFALSE 18461
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18364: LD_EXP 80
18368: PUSH
18369: LD_VAR 0 6
18373: ARRAY
18374: PUSH
18375: LD_VAR 0 5
18379: ARRAY
18380: PUSH
18381: LD_INT 1
18383: ARRAY
18384: PPUSH
18385: LD_EXP 80
18389: PUSH
18390: LD_VAR 0 6
18394: ARRAY
18395: PUSH
18396: LD_VAR 0 5
18400: ARRAY
18401: PUSH
18402: LD_INT 2
18404: ARRAY
18405: PPUSH
18406: LD_VAR 0 1
18410: PPUSH
18411: CALL_OW 255
18415: PPUSH
18416: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18420: LD_ADDR_EXP 80
18424: PUSH
18425: LD_EXP 80
18429: PPUSH
18430: LD_VAR 0 6
18434: PPUSH
18435: LD_EXP 80
18439: PUSH
18440: LD_VAR 0 6
18444: ARRAY
18445: PPUSH
18446: LD_VAR 0 5
18450: PPUSH
18451: CALL_OW 3
18455: PPUSH
18456: CALL_OW 1
18460: ST_TO_ADDR
// end ; end ;
18461: GO 18299
18463: POP
18464: POP
// end ;
18465: LD_VAR 0 4
18469: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18470: LD_INT 0
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 264
18490: PUSH
18491: LD_EXP 8
18495: EQUAL
18496: NOT
18497: PUSH
18498: LD_VAR 0 1
18502: PUSH
18503: LD_EXP 79
18507: IN
18508: NOT
18509: OR
18510: IFFALSE 18514
// exit ;
18512: GO 18836
// index := GetElementIndex ( minersList , unit ) ;
18514: LD_ADDR_VAR 0 6
18518: PUSH
18519: LD_EXP 79
18523: PPUSH
18524: LD_VAR 0 1
18528: PPUSH
18529: CALL 23992 0 2
18533: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18534: LD_ADDR_VAR 0 8
18538: PUSH
18539: LD_EXP 81
18543: PUSH
18544: LD_EXP 80
18548: PUSH
18549: LD_VAR 0 6
18553: ARRAY
18554: MINUS
18555: ST_TO_ADDR
// if not minesFreeAmount then
18556: LD_VAR 0 8
18560: NOT
18561: IFFALSE 18565
// exit ;
18563: GO 18836
// tmp := [ ] ;
18565: LD_ADDR_VAR 0 7
18569: PUSH
18570: EMPTY
18571: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18572: LD_ADDR_VAR 0 5
18576: PUSH
18577: DOUBLE
18578: LD_INT 1
18580: DEC
18581: ST_TO_ADDR
18582: LD_VAR 0 8
18586: PUSH
18587: FOR_TO
18588: IFFALSE 18783
// begin _d := rand ( 0 , 5 ) ;
18590: LD_ADDR_VAR 0 11
18594: PUSH
18595: LD_INT 0
18597: PPUSH
18598: LD_INT 5
18600: PPUSH
18601: CALL_OW 12
18605: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18606: LD_ADDR_VAR 0 12
18610: PUSH
18611: LD_INT 2
18613: PPUSH
18614: LD_INT 6
18616: PPUSH
18617: CALL_OW 12
18621: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18622: LD_ADDR_VAR 0 9
18626: PUSH
18627: LD_VAR 0 2
18631: PPUSH
18632: LD_VAR 0 11
18636: PPUSH
18637: LD_VAR 0 12
18641: PPUSH
18642: CALL_OW 272
18646: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18647: LD_ADDR_VAR 0 10
18651: PUSH
18652: LD_VAR 0 3
18656: PPUSH
18657: LD_VAR 0 11
18661: PPUSH
18662: LD_VAR 0 12
18666: PPUSH
18667: CALL_OW 273
18671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18672: LD_VAR 0 9
18676: PPUSH
18677: LD_VAR 0 10
18681: PPUSH
18682: CALL_OW 488
18686: PUSH
18687: LD_VAR 0 9
18691: PUSH
18692: LD_VAR 0 10
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_VAR 0 7
18705: IN
18706: NOT
18707: AND
18708: PUSH
18709: LD_VAR 0 9
18713: PPUSH
18714: LD_VAR 0 10
18718: PPUSH
18719: CALL_OW 458
18723: NOT
18724: AND
18725: IFFALSE 18767
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18727: LD_ADDR_VAR 0 7
18731: PUSH
18732: LD_VAR 0 7
18736: PPUSH
18737: LD_VAR 0 7
18741: PUSH
18742: LD_INT 1
18744: PLUS
18745: PPUSH
18746: LD_VAR 0 9
18750: PUSH
18751: LD_VAR 0 10
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PPUSH
18760: CALL_OW 1
18764: ST_TO_ADDR
18765: GO 18781
// i := i - 1 ;
18767: LD_ADDR_VAR 0 5
18771: PUSH
18772: LD_VAR 0 5
18776: PUSH
18777: LD_INT 1
18779: MINUS
18780: ST_TO_ADDR
// end ;
18781: GO 18587
18783: POP
18784: POP
// for i in tmp do
18785: LD_ADDR_VAR 0 5
18789: PUSH
18790: LD_VAR 0 7
18794: PUSH
18795: FOR_IN
18796: IFFALSE 18834
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18798: LD_VAR 0 1
18802: PPUSH
18803: LD_VAR 0 5
18807: PUSH
18808: LD_INT 1
18810: ARRAY
18811: PPUSH
18812: LD_VAR 0 5
18816: PUSH
18817: LD_INT 2
18819: ARRAY
18820: PPUSH
18821: CALL 17776 0 3
18825: NOT
18826: IFFALSE 18832
// exit ;
18828: POP
18829: POP
18830: GO 18836
18832: GO 18795
18834: POP
18835: POP
// end ;
18836: LD_VAR 0 4
18840: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18841: LD_INT 0
18843: PPUSH
18844: PPUSH
18845: PPUSH
18846: PPUSH
18847: PPUSH
18848: PPUSH
18849: PPUSH
// if not GetClass ( unit ) = class_sniper then
18850: LD_VAR 0 1
18854: PPUSH
18855: CALL_OW 257
18859: PUSH
18860: LD_INT 5
18862: EQUAL
18863: NOT
18864: IFFALSE 18868
// exit ;
18866: GO 19256
// dist := 8 ;
18868: LD_ADDR_VAR 0 5
18872: PUSH
18873: LD_INT 8
18875: ST_TO_ADDR
// viewRange := 12 ;
18876: LD_ADDR_VAR 0 7
18880: PUSH
18881: LD_INT 12
18883: ST_TO_ADDR
// side := GetSide ( unit ) ;
18884: LD_ADDR_VAR 0 6
18888: PUSH
18889: LD_VAR 0 1
18893: PPUSH
18894: CALL_OW 255
18898: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18899: LD_INT 61
18901: PPUSH
18902: LD_VAR 0 6
18906: PPUSH
18907: CALL_OW 321
18911: PUSH
18912: LD_INT 2
18914: EQUAL
18915: IFFALSE 18925
// viewRange := 16 ;
18917: LD_ADDR_VAR 0 7
18921: PUSH
18922: LD_INT 16
18924: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18925: LD_VAR 0 1
18929: PPUSH
18930: LD_VAR 0 2
18934: PPUSH
18935: LD_VAR 0 3
18939: PPUSH
18940: CALL_OW 297
18944: PUSH
18945: LD_VAR 0 5
18949: GREATER
18950: IFFALSE 19029
// begin ComMoveXY ( unit , x , y ) ;
18952: LD_VAR 0 1
18956: PPUSH
18957: LD_VAR 0 2
18961: PPUSH
18962: LD_VAR 0 3
18966: PPUSH
18967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18971: LD_INT 35
18973: PPUSH
18974: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18978: LD_VAR 0 1
18982: PPUSH
18983: LD_VAR 0 2
18987: PPUSH
18988: LD_VAR 0 3
18992: PPUSH
18993: CALL 54056 0 3
18997: NOT
18998: IFFALSE 19002
// exit ;
19000: GO 19256
// until GetDistUnitXY ( unit , x , y ) < dist ;
19002: LD_VAR 0 1
19006: PPUSH
19007: LD_VAR 0 2
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: CALL_OW 297
19021: PUSH
19022: LD_VAR 0 5
19026: LESS
19027: IFFALSE 18971
// end ; ComTurnXY ( unit , x , y ) ;
19029: LD_VAR 0 1
19033: PPUSH
19034: LD_VAR 0 2
19038: PPUSH
19039: LD_VAR 0 3
19043: PPUSH
19044: CALL_OW 118
// wait ( 5 ) ;
19048: LD_INT 5
19050: PPUSH
19051: CALL_OW 67
// _d := GetDir ( unit ) ;
19055: LD_ADDR_VAR 0 10
19059: PUSH
19060: LD_VAR 0 1
19064: PPUSH
19065: CALL_OW 254
19069: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
19070: LD_ADDR_VAR 0 8
19074: PUSH
19075: LD_VAR 0 1
19079: PPUSH
19080: CALL_OW 250
19084: PPUSH
19085: LD_VAR 0 10
19089: PPUSH
19090: LD_VAR 0 5
19094: PPUSH
19095: CALL_OW 272
19099: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
19100: LD_ADDR_VAR 0 9
19104: PUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 251
19114: PPUSH
19115: LD_VAR 0 10
19119: PPUSH
19120: LD_VAR 0 5
19124: PPUSH
19125: CALL_OW 273
19129: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19130: LD_VAR 0 8
19134: PPUSH
19135: LD_VAR 0 9
19139: PPUSH
19140: CALL_OW 488
19144: NOT
19145: IFFALSE 19149
// exit ;
19147: GO 19256
// ComAnimCustom ( unit , 1 ) ;
19149: LD_VAR 0 1
19153: PPUSH
19154: LD_INT 1
19156: PPUSH
19157: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19161: LD_VAR 0 8
19165: PPUSH
19166: LD_VAR 0 9
19170: PPUSH
19171: LD_VAR 0 6
19175: PPUSH
19176: LD_VAR 0 7
19180: PPUSH
19181: CALL_OW 330
// repeat wait ( 1 ) ;
19185: LD_INT 1
19187: PPUSH
19188: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19192: LD_VAR 0 1
19196: PPUSH
19197: CALL_OW 316
19201: PUSH
19202: LD_VAR 0 1
19206: PPUSH
19207: CALL_OW 314
19211: OR
19212: PUSH
19213: LD_VAR 0 1
19217: PPUSH
19218: CALL_OW 302
19222: NOT
19223: OR
19224: PUSH
19225: LD_VAR 0 1
19229: PPUSH
19230: CALL_OW 301
19234: OR
19235: IFFALSE 19185
// RemoveSeeing ( _x , _y , side ) ;
19237: LD_VAR 0 8
19241: PPUSH
19242: LD_VAR 0 9
19246: PPUSH
19247: LD_VAR 0 6
19251: PPUSH
19252: CALL_OW 331
// end ; end_of_file end_of_file
19256: LD_VAR 0 4
19260: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
// if exist_mode then
19265: LD_VAR 0 2
19269: IFFALSE 19294
// unit := CreateCharacter ( prefix & ident ) else
19271: LD_ADDR_VAR 0 5
19275: PUSH
19276: LD_VAR 0 3
19280: PUSH
19281: LD_VAR 0 1
19285: STR
19286: PPUSH
19287: CALL_OW 34
19291: ST_TO_ADDR
19292: GO 19309
// unit := NewCharacter ( ident ) ;
19294: LD_ADDR_VAR 0 5
19298: PUSH
19299: LD_VAR 0 1
19303: PPUSH
19304: CALL_OW 25
19308: ST_TO_ADDR
// result := unit ;
19309: LD_ADDR_VAR 0 4
19313: PUSH
19314: LD_VAR 0 5
19318: ST_TO_ADDR
// end ;
19319: LD_VAR 0 4
19323: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19324: LD_INT 0
19326: PPUSH
19327: PPUSH
// if not side or not nation then
19328: LD_VAR 0 1
19332: NOT
19333: PUSH
19334: LD_VAR 0 2
19338: NOT
19339: OR
19340: IFFALSE 19344
// exit ;
19342: GO 20108
// case nation of nation_american :
19344: LD_VAR 0 2
19348: PUSH
19349: LD_INT 1
19351: DOUBLE
19352: EQUAL
19353: IFTRUE 19357
19355: GO 19571
19357: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19358: LD_ADDR_VAR 0 4
19362: PUSH
19363: LD_INT 35
19365: PUSH
19366: LD_INT 45
19368: PUSH
19369: LD_INT 46
19371: PUSH
19372: LD_INT 47
19374: PUSH
19375: LD_INT 82
19377: PUSH
19378: LD_INT 83
19380: PUSH
19381: LD_INT 84
19383: PUSH
19384: LD_INT 85
19386: PUSH
19387: LD_INT 86
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: LD_INT 2
19395: PUSH
19396: LD_INT 6
19398: PUSH
19399: LD_INT 15
19401: PUSH
19402: LD_INT 16
19404: PUSH
19405: LD_INT 7
19407: PUSH
19408: LD_INT 12
19410: PUSH
19411: LD_INT 13
19413: PUSH
19414: LD_INT 10
19416: PUSH
19417: LD_INT 14
19419: PUSH
19420: LD_INT 20
19422: PUSH
19423: LD_INT 21
19425: PUSH
19426: LD_INT 22
19428: PUSH
19429: LD_INT 25
19431: PUSH
19432: LD_INT 32
19434: PUSH
19435: LD_INT 27
19437: PUSH
19438: LD_INT 36
19440: PUSH
19441: LD_INT 69
19443: PUSH
19444: LD_INT 39
19446: PUSH
19447: LD_INT 34
19449: PUSH
19450: LD_INT 40
19452: PUSH
19453: LD_INT 48
19455: PUSH
19456: LD_INT 49
19458: PUSH
19459: LD_INT 50
19461: PUSH
19462: LD_INT 51
19464: PUSH
19465: LD_INT 52
19467: PUSH
19468: LD_INT 53
19470: PUSH
19471: LD_INT 54
19473: PUSH
19474: LD_INT 55
19476: PUSH
19477: LD_INT 56
19479: PUSH
19480: LD_INT 57
19482: PUSH
19483: LD_INT 58
19485: PUSH
19486: LD_INT 59
19488: PUSH
19489: LD_INT 60
19491: PUSH
19492: LD_INT 61
19494: PUSH
19495: LD_INT 62
19497: PUSH
19498: LD_INT 80
19500: PUSH
19501: LD_INT 82
19503: PUSH
19504: LD_INT 83
19506: PUSH
19507: LD_INT 84
19509: PUSH
19510: LD_INT 85
19512: PUSH
19513: LD_INT 86
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: ST_TO_ADDR
19569: GO 20032
19571: LD_INT 2
19573: DOUBLE
19574: EQUAL
19575: IFTRUE 19579
19577: GO 19801
19579: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19580: LD_ADDR_VAR 0 4
19584: PUSH
19585: LD_INT 35
19587: PUSH
19588: LD_INT 45
19590: PUSH
19591: LD_INT 46
19593: PUSH
19594: LD_INT 47
19596: PUSH
19597: LD_INT 82
19599: PUSH
19600: LD_INT 83
19602: PUSH
19603: LD_INT 84
19605: PUSH
19606: LD_INT 85
19608: PUSH
19609: LD_INT 87
19611: PUSH
19612: LD_INT 70
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: LD_INT 11
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: LD_INT 4
19626: PUSH
19627: LD_INT 5
19629: PUSH
19630: LD_INT 6
19632: PUSH
19633: LD_INT 15
19635: PUSH
19636: LD_INT 18
19638: PUSH
19639: LD_INT 7
19641: PUSH
19642: LD_INT 17
19644: PUSH
19645: LD_INT 8
19647: PUSH
19648: LD_INT 20
19650: PUSH
19651: LD_INT 21
19653: PUSH
19654: LD_INT 22
19656: PUSH
19657: LD_INT 72
19659: PUSH
19660: LD_INT 26
19662: PUSH
19663: LD_INT 69
19665: PUSH
19666: LD_INT 39
19668: PUSH
19669: LD_INT 40
19671: PUSH
19672: LD_INT 41
19674: PUSH
19675: LD_INT 42
19677: PUSH
19678: LD_INT 43
19680: PUSH
19681: LD_INT 48
19683: PUSH
19684: LD_INT 49
19686: PUSH
19687: LD_INT 50
19689: PUSH
19690: LD_INT 51
19692: PUSH
19693: LD_INT 52
19695: PUSH
19696: LD_INT 53
19698: PUSH
19699: LD_INT 54
19701: PUSH
19702: LD_INT 55
19704: PUSH
19705: LD_INT 56
19707: PUSH
19708: LD_INT 60
19710: PUSH
19711: LD_INT 61
19713: PUSH
19714: LD_INT 62
19716: PUSH
19717: LD_INT 66
19719: PUSH
19720: LD_INT 67
19722: PUSH
19723: LD_INT 68
19725: PUSH
19726: LD_INT 81
19728: PUSH
19729: LD_INT 82
19731: PUSH
19732: LD_INT 83
19734: PUSH
19735: LD_INT 84
19737: PUSH
19738: LD_INT 85
19740: PUSH
19741: LD_INT 87
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: ST_TO_ADDR
19799: GO 20032
19801: LD_INT 3
19803: DOUBLE
19804: EQUAL
19805: IFTRUE 19809
19807: GO 20031
19809: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19810: LD_ADDR_VAR 0 4
19814: PUSH
19815: LD_INT 46
19817: PUSH
19818: LD_INT 47
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: LD_INT 82
19829: PUSH
19830: LD_INT 83
19832: PUSH
19833: LD_INT 84
19835: PUSH
19836: LD_INT 85
19838: PUSH
19839: LD_INT 86
19841: PUSH
19842: LD_INT 11
19844: PUSH
19845: LD_INT 9
19847: PUSH
19848: LD_INT 20
19850: PUSH
19851: LD_INT 19
19853: PUSH
19854: LD_INT 21
19856: PUSH
19857: LD_INT 24
19859: PUSH
19860: LD_INT 22
19862: PUSH
19863: LD_INT 25
19865: PUSH
19866: LD_INT 28
19868: PUSH
19869: LD_INT 29
19871: PUSH
19872: LD_INT 30
19874: PUSH
19875: LD_INT 31
19877: PUSH
19878: LD_INT 37
19880: PUSH
19881: LD_INT 38
19883: PUSH
19884: LD_INT 32
19886: PUSH
19887: LD_INT 27
19889: PUSH
19890: LD_INT 33
19892: PUSH
19893: LD_INT 69
19895: PUSH
19896: LD_INT 39
19898: PUSH
19899: LD_INT 34
19901: PUSH
19902: LD_INT 40
19904: PUSH
19905: LD_INT 71
19907: PUSH
19908: LD_INT 23
19910: PUSH
19911: LD_INT 44
19913: PUSH
19914: LD_INT 48
19916: PUSH
19917: LD_INT 49
19919: PUSH
19920: LD_INT 50
19922: PUSH
19923: LD_INT 51
19925: PUSH
19926: LD_INT 52
19928: PUSH
19929: LD_INT 53
19931: PUSH
19932: LD_INT 54
19934: PUSH
19935: LD_INT 55
19937: PUSH
19938: LD_INT 56
19940: PUSH
19941: LD_INT 57
19943: PUSH
19944: LD_INT 58
19946: PUSH
19947: LD_INT 59
19949: PUSH
19950: LD_INT 63
19952: PUSH
19953: LD_INT 64
19955: PUSH
19956: LD_INT 65
19958: PUSH
19959: LD_INT 82
19961: PUSH
19962: LD_INT 83
19964: PUSH
19965: LD_INT 84
19967: PUSH
19968: LD_INT 85
19970: PUSH
19971: LD_INT 86
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: ST_TO_ADDR
20029: GO 20032
20031: POP
// if state > - 1 and state < 3 then
20032: LD_VAR 0 3
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: GREATER
20041: PUSH
20042: LD_VAR 0 3
20046: PUSH
20047: LD_INT 3
20049: LESS
20050: AND
20051: IFFALSE 20108
// for i in result do
20053: LD_ADDR_VAR 0 5
20057: PUSH
20058: LD_VAR 0 4
20062: PUSH
20063: FOR_IN
20064: IFFALSE 20106
// if GetTech ( i , side ) <> state then
20066: LD_VAR 0 5
20070: PPUSH
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 321
20080: PUSH
20081: LD_VAR 0 3
20085: NONEQUAL
20086: IFFALSE 20104
// result := result diff i ;
20088: LD_ADDR_VAR 0 4
20092: PUSH
20093: LD_VAR 0 4
20097: PUSH
20098: LD_VAR 0 5
20102: DIFF
20103: ST_TO_ADDR
20104: GO 20063
20106: POP
20107: POP
// end ;
20108: LD_VAR 0 4
20112: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20113: LD_INT 0
20115: PPUSH
20116: PPUSH
20117: PPUSH
// result := true ;
20118: LD_ADDR_VAR 0 3
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20126: LD_ADDR_VAR 0 5
20130: PUSH
20131: LD_VAR 0 2
20135: PPUSH
20136: CALL_OW 480
20140: ST_TO_ADDR
// if not tmp then
20141: LD_VAR 0 5
20145: NOT
20146: IFFALSE 20150
// exit ;
20148: GO 20199
// for i in tmp do
20150: LD_ADDR_VAR 0 4
20154: PUSH
20155: LD_VAR 0 5
20159: PUSH
20160: FOR_IN
20161: IFFALSE 20197
// if GetTech ( i , side ) <> state_researched then
20163: LD_VAR 0 4
20167: PPUSH
20168: LD_VAR 0 1
20172: PPUSH
20173: CALL_OW 321
20177: PUSH
20178: LD_INT 2
20180: NONEQUAL
20181: IFFALSE 20195
// begin result := false ;
20183: LD_ADDR_VAR 0 3
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
// exit ;
20191: POP
20192: POP
20193: GO 20199
// end ;
20195: GO 20160
20197: POP
20198: POP
// end ;
20199: LD_VAR 0 3
20203: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20204: LD_INT 0
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
20210: PPUSH
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
20215: PPUSH
20216: PPUSH
20217: PPUSH
20218: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20219: LD_VAR 0 1
20223: NOT
20224: PUSH
20225: LD_VAR 0 1
20229: PPUSH
20230: CALL_OW 257
20234: PUSH
20235: LD_INT 9
20237: NONEQUAL
20238: OR
20239: IFFALSE 20243
// exit ;
20241: GO 20816
// side := GetSide ( unit ) ;
20243: LD_ADDR_VAR 0 9
20247: PUSH
20248: LD_VAR 0 1
20252: PPUSH
20253: CALL_OW 255
20257: ST_TO_ADDR
// tech_space := tech_spacanom ;
20258: LD_ADDR_VAR 0 12
20262: PUSH
20263: LD_INT 29
20265: ST_TO_ADDR
// tech_time := tech_taurad ;
20266: LD_ADDR_VAR 0 13
20270: PUSH
20271: LD_INT 28
20273: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20274: LD_ADDR_VAR 0 11
20278: PUSH
20279: LD_VAR 0 1
20283: PPUSH
20284: CALL_OW 310
20288: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20289: LD_VAR 0 11
20293: PPUSH
20294: CALL_OW 247
20298: PUSH
20299: LD_INT 2
20301: EQUAL
20302: IFFALSE 20306
// exit ;
20304: GO 20816
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20306: LD_ADDR_VAR 0 8
20310: PUSH
20311: LD_INT 81
20313: PUSH
20314: LD_VAR 0 9
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 3
20325: PUSH
20326: LD_INT 21
20328: PUSH
20329: LD_INT 3
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PPUSH
20344: CALL_OW 69
20348: ST_TO_ADDR
// if not tmp then
20349: LD_VAR 0 8
20353: NOT
20354: IFFALSE 20358
// exit ;
20356: GO 20816
// if in_unit then
20358: LD_VAR 0 11
20362: IFFALSE 20386
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20364: LD_ADDR_VAR 0 10
20368: PUSH
20369: LD_VAR 0 8
20373: PPUSH
20374: LD_VAR 0 11
20378: PPUSH
20379: CALL_OW 74
20383: ST_TO_ADDR
20384: GO 20406
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20386: LD_ADDR_VAR 0 10
20390: PUSH
20391: LD_VAR 0 8
20395: PPUSH
20396: LD_VAR 0 1
20400: PPUSH
20401: CALL_OW 74
20405: ST_TO_ADDR
// if not enemy then
20406: LD_VAR 0 10
20410: NOT
20411: IFFALSE 20415
// exit ;
20413: GO 20816
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20415: LD_VAR 0 11
20419: PUSH
20420: LD_VAR 0 11
20424: PPUSH
20425: LD_VAR 0 10
20429: PPUSH
20430: CALL_OW 296
20434: PUSH
20435: LD_INT 13
20437: GREATER
20438: AND
20439: PUSH
20440: LD_VAR 0 1
20444: PPUSH
20445: LD_VAR 0 10
20449: PPUSH
20450: CALL_OW 296
20454: PUSH
20455: LD_INT 12
20457: GREATER
20458: OR
20459: IFFALSE 20463
// exit ;
20461: GO 20816
// missile := [ 1 ] ;
20463: LD_ADDR_VAR 0 14
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: EMPTY
20472: LIST
20473: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20474: LD_VAR 0 9
20478: PPUSH
20479: LD_VAR 0 12
20483: PPUSH
20484: CALL_OW 325
20488: IFFALSE 20517
// missile := Insert ( missile , missile + 1 , 2 ) ;
20490: LD_ADDR_VAR 0 14
20494: PUSH
20495: LD_VAR 0 14
20499: PPUSH
20500: LD_VAR 0 14
20504: PUSH
20505: LD_INT 1
20507: PLUS
20508: PPUSH
20509: LD_INT 2
20511: PPUSH
20512: CALL_OW 2
20516: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20517: LD_VAR 0 9
20521: PPUSH
20522: LD_VAR 0 13
20526: PPUSH
20527: CALL_OW 325
20531: PUSH
20532: LD_VAR 0 10
20536: PPUSH
20537: CALL_OW 255
20541: PPUSH
20542: LD_VAR 0 13
20546: PPUSH
20547: CALL_OW 325
20551: NOT
20552: AND
20553: IFFALSE 20582
// missile := Insert ( missile , missile + 1 , 3 ) ;
20555: LD_ADDR_VAR 0 14
20559: PUSH
20560: LD_VAR 0 14
20564: PPUSH
20565: LD_VAR 0 14
20569: PUSH
20570: LD_INT 1
20572: PLUS
20573: PPUSH
20574: LD_INT 3
20576: PPUSH
20577: CALL_OW 2
20581: ST_TO_ADDR
// if missile < 2 then
20582: LD_VAR 0 14
20586: PUSH
20587: LD_INT 2
20589: LESS
20590: IFFALSE 20594
// exit ;
20592: GO 20816
// x := GetX ( enemy ) ;
20594: LD_ADDR_VAR 0 4
20598: PUSH
20599: LD_VAR 0 10
20603: PPUSH
20604: CALL_OW 250
20608: ST_TO_ADDR
// y := GetY ( enemy ) ;
20609: LD_ADDR_VAR 0 5
20613: PUSH
20614: LD_VAR 0 10
20618: PPUSH
20619: CALL_OW 251
20623: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20624: LD_ADDR_VAR 0 6
20628: PUSH
20629: LD_VAR 0 4
20633: PUSH
20634: LD_INT 1
20636: NEG
20637: PPUSH
20638: LD_INT 1
20640: PPUSH
20641: CALL_OW 12
20645: PLUS
20646: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20647: LD_ADDR_VAR 0 7
20651: PUSH
20652: LD_VAR 0 5
20656: PUSH
20657: LD_INT 1
20659: NEG
20660: PPUSH
20661: LD_INT 1
20663: PPUSH
20664: CALL_OW 12
20668: PLUS
20669: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20670: LD_VAR 0 6
20674: PPUSH
20675: LD_VAR 0 7
20679: PPUSH
20680: CALL_OW 488
20684: NOT
20685: IFFALSE 20707
// begin _x := x ;
20687: LD_ADDR_VAR 0 6
20691: PUSH
20692: LD_VAR 0 4
20696: ST_TO_ADDR
// _y := y ;
20697: LD_ADDR_VAR 0 7
20701: PUSH
20702: LD_VAR 0 5
20706: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20707: LD_ADDR_VAR 0 3
20711: PUSH
20712: LD_INT 1
20714: PPUSH
20715: LD_VAR 0 14
20719: PPUSH
20720: CALL_OW 12
20724: ST_TO_ADDR
// case i of 1 :
20725: LD_VAR 0 3
20729: PUSH
20730: LD_INT 1
20732: DOUBLE
20733: EQUAL
20734: IFTRUE 20738
20736: GO 20755
20738: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20739: LD_VAR 0 1
20743: PPUSH
20744: LD_VAR 0 10
20748: PPUSH
20749: CALL_OW 115
20753: GO 20816
20755: LD_INT 2
20757: DOUBLE
20758: EQUAL
20759: IFTRUE 20763
20761: GO 20785
20763: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20764: LD_VAR 0 1
20768: PPUSH
20769: LD_VAR 0 6
20773: PPUSH
20774: LD_VAR 0 7
20778: PPUSH
20779: CALL_OW 153
20783: GO 20816
20785: LD_INT 3
20787: DOUBLE
20788: EQUAL
20789: IFTRUE 20793
20791: GO 20815
20793: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20794: LD_VAR 0 1
20798: PPUSH
20799: LD_VAR 0 6
20803: PPUSH
20804: LD_VAR 0 7
20808: PPUSH
20809: CALL_OW 154
20813: GO 20816
20815: POP
// end ;
20816: LD_VAR 0 2
20820: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20821: LD_INT 0
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
// if not unit or not building then
20829: LD_VAR 0 1
20833: NOT
20834: PUSH
20835: LD_VAR 0 2
20839: NOT
20840: OR
20841: IFFALSE 20845
// exit ;
20843: GO 21003
// x := GetX ( building ) ;
20845: LD_ADDR_VAR 0 5
20849: PUSH
20850: LD_VAR 0 2
20854: PPUSH
20855: CALL_OW 250
20859: ST_TO_ADDR
// y := GetY ( building ) ;
20860: LD_ADDR_VAR 0 6
20864: PUSH
20865: LD_VAR 0 2
20869: PPUSH
20870: CALL_OW 251
20874: ST_TO_ADDR
// for i = 0 to 5 do
20875: LD_ADDR_VAR 0 4
20879: PUSH
20880: DOUBLE
20881: LD_INT 0
20883: DEC
20884: ST_TO_ADDR
20885: LD_INT 5
20887: PUSH
20888: FOR_TO
20889: IFFALSE 21001
// begin _x := ShiftX ( x , i , 3 ) ;
20891: LD_ADDR_VAR 0 7
20895: PUSH
20896: LD_VAR 0 5
20900: PPUSH
20901: LD_VAR 0 4
20905: PPUSH
20906: LD_INT 3
20908: PPUSH
20909: CALL_OW 272
20913: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20914: LD_ADDR_VAR 0 8
20918: PUSH
20919: LD_VAR 0 6
20923: PPUSH
20924: LD_VAR 0 4
20928: PPUSH
20929: LD_INT 3
20931: PPUSH
20932: CALL_OW 273
20936: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20937: LD_VAR 0 7
20941: PPUSH
20942: LD_VAR 0 8
20946: PPUSH
20947: CALL_OW 488
20951: NOT
20952: IFFALSE 20956
// continue ;
20954: GO 20888
// if HexInfo ( _x , _y ) = 0 then
20956: LD_VAR 0 7
20960: PPUSH
20961: LD_VAR 0 8
20965: PPUSH
20966: CALL_OW 428
20970: PUSH
20971: LD_INT 0
20973: EQUAL
20974: IFFALSE 20999
// begin ComMoveXY ( unit , _x , _y ) ;
20976: LD_VAR 0 1
20980: PPUSH
20981: LD_VAR 0 7
20985: PPUSH
20986: LD_VAR 0 8
20990: PPUSH
20991: CALL_OW 111
// exit ;
20995: POP
20996: POP
20997: GO 21003
// end ; end ;
20999: GO 20888
21001: POP
21002: POP
// end ;
21003: LD_VAR 0 3
21007: RET
// export function ScanBase ( side , base_area ) ; begin
21008: LD_INT 0
21010: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21011: LD_ADDR_VAR 0 3
21015: PUSH
21016: LD_VAR 0 2
21020: PPUSH
21021: LD_INT 81
21023: PUSH
21024: LD_VAR 0 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PPUSH
21033: CALL_OW 70
21037: ST_TO_ADDR
// end ;
21038: LD_VAR 0 3
21042: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21043: LD_INT 0
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
// result := false ;
21049: LD_ADDR_VAR 0 2
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// side := GetSide ( unit ) ;
21057: LD_ADDR_VAR 0 3
21061: PUSH
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL_OW 255
21071: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21072: LD_ADDR_VAR 0 4
21076: PUSH
21077: LD_VAR 0 1
21081: PPUSH
21082: CALL_OW 248
21086: ST_TO_ADDR
// case nat of 1 :
21087: LD_VAR 0 4
21091: PUSH
21092: LD_INT 1
21094: DOUBLE
21095: EQUAL
21096: IFTRUE 21100
21098: GO 21111
21100: POP
// tech := tech_lassight ; 2 :
21101: LD_ADDR_VAR 0 5
21105: PUSH
21106: LD_INT 12
21108: ST_TO_ADDR
21109: GO 21150
21111: LD_INT 2
21113: DOUBLE
21114: EQUAL
21115: IFTRUE 21119
21117: GO 21130
21119: POP
// tech := tech_mortar ; 3 :
21120: LD_ADDR_VAR 0 5
21124: PUSH
21125: LD_INT 41
21127: ST_TO_ADDR
21128: GO 21150
21130: LD_INT 3
21132: DOUBLE
21133: EQUAL
21134: IFTRUE 21138
21136: GO 21149
21138: POP
// tech := tech_bazooka ; end ;
21139: LD_ADDR_VAR 0 5
21143: PUSH
21144: LD_INT 44
21146: ST_TO_ADDR
21147: GO 21150
21149: POP
// if Researched ( side , tech ) then
21150: LD_VAR 0 3
21154: PPUSH
21155: LD_VAR 0 5
21159: PPUSH
21160: CALL_OW 325
21164: IFFALSE 21191
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21166: LD_ADDR_VAR 0 2
21170: PUSH
21171: LD_INT 5
21173: PUSH
21174: LD_INT 8
21176: PUSH
21177: LD_INT 9
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: PUSH
21185: LD_VAR 0 4
21189: ARRAY
21190: ST_TO_ADDR
// end ;
21191: LD_VAR 0 2
21195: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21196: LD_INT 0
21198: PPUSH
21199: PPUSH
21200: PPUSH
// if not mines then
21201: LD_VAR 0 2
21205: NOT
21206: IFFALSE 21210
// exit ;
21208: GO 21354
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21210: LD_ADDR_VAR 0 5
21214: PUSH
21215: LD_INT 81
21217: PUSH
21218: LD_VAR 0 1
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 3
21229: PUSH
21230: LD_INT 21
21232: PUSH
21233: LD_INT 3
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: ST_TO_ADDR
// for i in mines do
21253: LD_ADDR_VAR 0 4
21257: PUSH
21258: LD_VAR 0 2
21262: PUSH
21263: FOR_IN
21264: IFFALSE 21352
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21266: LD_VAR 0 4
21270: PUSH
21271: LD_INT 1
21273: ARRAY
21274: PPUSH
21275: LD_VAR 0 4
21279: PUSH
21280: LD_INT 2
21282: ARRAY
21283: PPUSH
21284: CALL_OW 458
21288: NOT
21289: IFFALSE 21293
// continue ;
21291: GO 21263
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21293: LD_VAR 0 4
21297: PUSH
21298: LD_INT 1
21300: ARRAY
21301: PPUSH
21302: LD_VAR 0 4
21306: PUSH
21307: LD_INT 2
21309: ARRAY
21310: PPUSH
21311: CALL_OW 428
21315: PUSH
21316: LD_VAR 0 5
21320: IN
21321: IFFALSE 21350
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21323: LD_VAR 0 4
21327: PUSH
21328: LD_INT 1
21330: ARRAY
21331: PPUSH
21332: LD_VAR 0 4
21336: PUSH
21337: LD_INT 2
21339: ARRAY
21340: PPUSH
21341: LD_VAR 0 1
21345: PPUSH
21346: CALL_OW 456
// end ;
21350: GO 21263
21352: POP
21353: POP
// end ;
21354: LD_VAR 0 3
21358: RET
// export function Count ( array ) ; var i ; begin
21359: LD_INT 0
21361: PPUSH
21362: PPUSH
// result := 0 ;
21363: LD_ADDR_VAR 0 2
21367: PUSH
21368: LD_INT 0
21370: ST_TO_ADDR
// for i in array do
21371: LD_ADDR_VAR 0 3
21375: PUSH
21376: LD_VAR 0 1
21380: PUSH
21381: FOR_IN
21382: IFFALSE 21406
// if i then
21384: LD_VAR 0 3
21388: IFFALSE 21404
// result := result + 1 ;
21390: LD_ADDR_VAR 0 2
21394: PUSH
21395: LD_VAR 0 2
21399: PUSH
21400: LD_INT 1
21402: PLUS
21403: ST_TO_ADDR
21404: GO 21381
21406: POP
21407: POP
// end ;
21408: LD_VAR 0 2
21412: RET
// export function IsEmpty ( building ) ; begin
21413: LD_INT 0
21415: PPUSH
// if not building then
21416: LD_VAR 0 1
21420: NOT
21421: IFFALSE 21425
// exit ;
21423: GO 21468
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21425: LD_ADDR_VAR 0 2
21429: PUSH
21430: LD_VAR 0 1
21434: PUSH
21435: LD_INT 22
21437: PUSH
21438: LD_VAR 0 1
21442: PPUSH
21443: CALL_OW 255
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 58
21454: PUSH
21455: EMPTY
21456: LIST
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PPUSH
21462: CALL_OW 69
21466: IN
21467: ST_TO_ADDR
// end ;
21468: LD_VAR 0 2
21472: RET
// export function IsNotFull ( building ) ; begin
21473: LD_INT 0
21475: PPUSH
// if not building then
21476: LD_VAR 0 1
21480: NOT
21481: IFFALSE 21485
// exit ;
21483: GO 21504
// result := UnitsInside ( building ) < 6 ;
21485: LD_ADDR_VAR 0 2
21489: PUSH
21490: LD_VAR 0 1
21494: PPUSH
21495: CALL_OW 313
21499: PUSH
21500: LD_INT 6
21502: LESS
21503: ST_TO_ADDR
// end ;
21504: LD_VAR 0 2
21508: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21509: LD_INT 0
21511: PPUSH
21512: PPUSH
21513: PPUSH
21514: PPUSH
// tmp := [ ] ;
21515: LD_ADDR_VAR 0 3
21519: PUSH
21520: EMPTY
21521: ST_TO_ADDR
// list := [ ] ;
21522: LD_ADDR_VAR 0 5
21526: PUSH
21527: EMPTY
21528: ST_TO_ADDR
// for i = 16 to 25 do
21529: LD_ADDR_VAR 0 4
21533: PUSH
21534: DOUBLE
21535: LD_INT 16
21537: DEC
21538: ST_TO_ADDR
21539: LD_INT 25
21541: PUSH
21542: FOR_TO
21543: IFFALSE 21616
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21545: LD_ADDR_VAR 0 3
21549: PUSH
21550: LD_VAR 0 3
21554: PUSH
21555: LD_INT 22
21557: PUSH
21558: LD_VAR 0 1
21562: PPUSH
21563: CALL_OW 255
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 91
21574: PUSH
21575: LD_VAR 0 1
21579: PUSH
21580: LD_INT 6
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 30
21590: PUSH
21591: LD_VAR 0 4
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: PUSH
21605: EMPTY
21606: LIST
21607: PPUSH
21608: CALL_OW 69
21612: ADD
21613: ST_TO_ADDR
21614: GO 21542
21616: POP
21617: POP
// for i = 1 to tmp do
21618: LD_ADDR_VAR 0 4
21622: PUSH
21623: DOUBLE
21624: LD_INT 1
21626: DEC
21627: ST_TO_ADDR
21628: LD_VAR 0 3
21632: PUSH
21633: FOR_TO
21634: IFFALSE 21722
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21636: LD_ADDR_VAR 0 5
21640: PUSH
21641: LD_VAR 0 5
21645: PUSH
21646: LD_VAR 0 3
21650: PUSH
21651: LD_VAR 0 4
21655: ARRAY
21656: PPUSH
21657: CALL_OW 266
21661: PUSH
21662: LD_VAR 0 3
21666: PUSH
21667: LD_VAR 0 4
21671: ARRAY
21672: PPUSH
21673: CALL_OW 250
21677: PUSH
21678: LD_VAR 0 3
21682: PUSH
21683: LD_VAR 0 4
21687: ARRAY
21688: PPUSH
21689: CALL_OW 251
21693: PUSH
21694: LD_VAR 0 3
21698: PUSH
21699: LD_VAR 0 4
21703: ARRAY
21704: PPUSH
21705: CALL_OW 254
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: PUSH
21716: EMPTY
21717: LIST
21718: ADD
21719: ST_TO_ADDR
21720: GO 21633
21722: POP
21723: POP
// result := list ;
21724: LD_ADDR_VAR 0 2
21728: PUSH
21729: LD_VAR 0 5
21733: ST_TO_ADDR
// end ;
21734: LD_VAR 0 2
21738: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21739: LD_INT 0
21741: PPUSH
21742: PPUSH
21743: PPUSH
21744: PPUSH
21745: PPUSH
21746: PPUSH
21747: PPUSH
// if not factory then
21748: LD_VAR 0 1
21752: NOT
21753: IFFALSE 21757
// exit ;
21755: GO 22350
// if control = control_apeman then
21757: LD_VAR 0 4
21761: PUSH
21762: LD_INT 5
21764: EQUAL
21765: IFFALSE 21874
// begin tmp := UnitsInside ( factory ) ;
21767: LD_ADDR_VAR 0 8
21771: PUSH
21772: LD_VAR 0 1
21776: PPUSH
21777: CALL_OW 313
21781: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21782: LD_VAR 0 8
21786: PPUSH
21787: LD_INT 25
21789: PUSH
21790: LD_INT 12
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PPUSH
21797: CALL_OW 72
21801: NOT
21802: IFFALSE 21812
// control := control_manual ;
21804: LD_ADDR_VAR 0 4
21808: PUSH
21809: LD_INT 1
21811: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21812: LD_ADDR_VAR 0 8
21816: PUSH
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL 21509 0 1
21826: ST_TO_ADDR
// if tmp then
21827: LD_VAR 0 8
21831: IFFALSE 21874
// begin for i in tmp do
21833: LD_ADDR_VAR 0 7
21837: PUSH
21838: LD_VAR 0 8
21842: PUSH
21843: FOR_IN
21844: IFFALSE 21872
// if i [ 1 ] = b_ext_radio then
21846: LD_VAR 0 7
21850: PUSH
21851: LD_INT 1
21853: ARRAY
21854: PUSH
21855: LD_INT 22
21857: EQUAL
21858: IFFALSE 21870
// begin control := control_remote ;
21860: LD_ADDR_VAR 0 4
21864: PUSH
21865: LD_INT 2
21867: ST_TO_ADDR
// break ;
21868: GO 21872
// end ;
21870: GO 21843
21872: POP
21873: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21874: LD_VAR 0 1
21878: PPUSH
21879: LD_VAR 0 2
21883: PPUSH
21884: LD_VAR 0 3
21888: PPUSH
21889: LD_VAR 0 4
21893: PPUSH
21894: LD_VAR 0 5
21898: PPUSH
21899: CALL_OW 448
21903: IFFALSE 21938
// begin result := [ chassis , engine , control , weapon ] ;
21905: LD_ADDR_VAR 0 6
21909: PUSH
21910: LD_VAR 0 2
21914: PUSH
21915: LD_VAR 0 3
21919: PUSH
21920: LD_VAR 0 4
21924: PUSH
21925: LD_VAR 0 5
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: ST_TO_ADDR
// exit ;
21936: GO 22350
// end ; _chassis := AvailableChassisList ( factory ) ;
21938: LD_ADDR_VAR 0 9
21942: PUSH
21943: LD_VAR 0 1
21947: PPUSH
21948: CALL_OW 475
21952: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21953: LD_ADDR_VAR 0 11
21957: PUSH
21958: LD_VAR 0 1
21962: PPUSH
21963: CALL_OW 476
21967: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21968: LD_ADDR_VAR 0 12
21972: PUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 477
21982: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21983: LD_ADDR_VAR 0 10
21987: PUSH
21988: LD_VAR 0 1
21992: PPUSH
21993: CALL_OW 478
21997: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21998: LD_VAR 0 9
22002: NOT
22003: PUSH
22004: LD_VAR 0 11
22008: NOT
22009: OR
22010: PUSH
22011: LD_VAR 0 12
22015: NOT
22016: OR
22017: PUSH
22018: LD_VAR 0 10
22022: NOT
22023: OR
22024: IFFALSE 22059
// begin result := [ chassis , engine , control , weapon ] ;
22026: LD_ADDR_VAR 0 6
22030: PUSH
22031: LD_VAR 0 2
22035: PUSH
22036: LD_VAR 0 3
22040: PUSH
22041: LD_VAR 0 4
22045: PUSH
22046: LD_VAR 0 5
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: ST_TO_ADDR
// exit ;
22057: GO 22350
// end ; if not chassis in _chassis then
22059: LD_VAR 0 2
22063: PUSH
22064: LD_VAR 0 9
22068: IN
22069: NOT
22070: IFFALSE 22096
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22072: LD_ADDR_VAR 0 2
22076: PUSH
22077: LD_VAR 0 9
22081: PUSH
22082: LD_INT 1
22084: PPUSH
22085: LD_VAR 0 9
22089: PPUSH
22090: CALL_OW 12
22094: ARRAY
22095: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22096: LD_VAR 0 2
22100: PPUSH
22101: LD_VAR 0 3
22105: PPUSH
22106: CALL 22355 0 2
22110: NOT
22111: IFFALSE 22170
// repeat engine := _engine [ 1 ] ;
22113: LD_ADDR_VAR 0 3
22117: PUSH
22118: LD_VAR 0 11
22122: PUSH
22123: LD_INT 1
22125: ARRAY
22126: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22127: LD_ADDR_VAR 0 11
22131: PUSH
22132: LD_VAR 0 11
22136: PPUSH
22137: LD_INT 1
22139: PPUSH
22140: CALL_OW 3
22144: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22145: LD_VAR 0 2
22149: PPUSH
22150: LD_VAR 0 3
22154: PPUSH
22155: CALL 22355 0 2
22159: PUSH
22160: LD_VAR 0 11
22164: PUSH
22165: EMPTY
22166: EQUAL
22167: OR
22168: IFFALSE 22113
// if not control in _control then
22170: LD_VAR 0 4
22174: PUSH
22175: LD_VAR 0 12
22179: IN
22180: NOT
22181: IFFALSE 22207
// control := _control [ rand ( 1 , _control ) ] ;
22183: LD_ADDR_VAR 0 4
22187: PUSH
22188: LD_VAR 0 12
22192: PUSH
22193: LD_INT 1
22195: PPUSH
22196: LD_VAR 0 12
22200: PPUSH
22201: CALL_OW 12
22205: ARRAY
22206: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22207: LD_VAR 0 2
22211: PPUSH
22212: LD_VAR 0 5
22216: PPUSH
22217: CALL 22575 0 2
22221: NOT
22222: IFFALSE 22281
// repeat weapon := _weapon [ 1 ] ;
22224: LD_ADDR_VAR 0 5
22228: PUSH
22229: LD_VAR 0 10
22233: PUSH
22234: LD_INT 1
22236: ARRAY
22237: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22238: LD_ADDR_VAR 0 10
22242: PUSH
22243: LD_VAR 0 10
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: CALL_OW 3
22255: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22256: LD_VAR 0 2
22260: PPUSH
22261: LD_VAR 0 5
22265: PPUSH
22266: CALL 22575 0 2
22270: PUSH
22271: LD_VAR 0 10
22275: PUSH
22276: EMPTY
22277: EQUAL
22278: OR
22279: IFFALSE 22224
// result := [ ] ;
22281: LD_ADDR_VAR 0 6
22285: PUSH
22286: EMPTY
22287: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22288: LD_VAR 0 1
22292: PPUSH
22293: LD_VAR 0 2
22297: PPUSH
22298: LD_VAR 0 3
22302: PPUSH
22303: LD_VAR 0 4
22307: PPUSH
22308: LD_VAR 0 5
22312: PPUSH
22313: CALL_OW 448
22317: IFFALSE 22350
// result := [ chassis , engine , control , weapon ] ;
22319: LD_ADDR_VAR 0 6
22323: PUSH
22324: LD_VAR 0 2
22328: PUSH
22329: LD_VAR 0 3
22333: PUSH
22334: LD_VAR 0 4
22338: PUSH
22339: LD_VAR 0 5
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: ST_TO_ADDR
// end ;
22350: LD_VAR 0 6
22354: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22355: LD_INT 0
22357: PPUSH
// if not chassis or not engine then
22358: LD_VAR 0 1
22362: NOT
22363: PUSH
22364: LD_VAR 0 2
22368: NOT
22369: OR
22370: IFFALSE 22374
// exit ;
22372: GO 22570
// case engine of engine_solar :
22374: LD_VAR 0 2
22378: PUSH
22379: LD_INT 2
22381: DOUBLE
22382: EQUAL
22383: IFTRUE 22387
22385: GO 22425
22387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22388: LD_ADDR_VAR 0 3
22392: PUSH
22393: LD_INT 11
22395: PUSH
22396: LD_INT 12
22398: PUSH
22399: LD_INT 13
22401: PUSH
22402: LD_INT 14
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: LD_INT 3
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: ST_TO_ADDR
22423: GO 22554
22425: LD_INT 1
22427: DOUBLE
22428: EQUAL
22429: IFTRUE 22433
22431: GO 22495
22433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22434: LD_ADDR_VAR 0 3
22438: PUSH
22439: LD_INT 11
22441: PUSH
22442: LD_INT 12
22444: PUSH
22445: LD_INT 13
22447: PUSH
22448: LD_INT 14
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: LD_INT 3
22459: PUSH
22460: LD_INT 4
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: LD_INT 21
22468: PUSH
22469: LD_INT 23
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_INT 24
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: ST_TO_ADDR
22493: GO 22554
22495: LD_INT 3
22497: DOUBLE
22498: EQUAL
22499: IFTRUE 22503
22501: GO 22553
22503: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22504: LD_ADDR_VAR 0 3
22508: PUSH
22509: LD_INT 13
22511: PUSH
22512: LD_INT 14
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: LD_INT 4
22523: PUSH
22524: LD_INT 5
22526: PUSH
22527: LD_INT 21
22529: PUSH
22530: LD_INT 22
22532: PUSH
22533: LD_INT 23
22535: PUSH
22536: LD_INT 24
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: ST_TO_ADDR
22551: GO 22554
22553: POP
// result := ( chassis in result ) ;
22554: LD_ADDR_VAR 0 3
22558: PUSH
22559: LD_VAR 0 1
22563: PUSH
22564: LD_VAR 0 3
22568: IN
22569: ST_TO_ADDR
// end ;
22570: LD_VAR 0 3
22574: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22575: LD_INT 0
22577: PPUSH
// if not chassis or not weapon then
22578: LD_VAR 0 1
22582: NOT
22583: PUSH
22584: LD_VAR 0 2
22588: NOT
22589: OR
22590: IFFALSE 22594
// exit ;
22592: GO 23620
// case weapon of us_machine_gun :
22594: LD_VAR 0 2
22598: PUSH
22599: LD_INT 2
22601: DOUBLE
22602: EQUAL
22603: IFTRUE 22607
22605: GO 22637
22607: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22608: LD_ADDR_VAR 0 3
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: LD_INT 4
22624: PUSH
22625: LD_INT 5
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: ST_TO_ADDR
22635: GO 23604
22637: LD_INT 3
22639: DOUBLE
22640: EQUAL
22641: IFTRUE 22645
22643: GO 22675
22645: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22646: LD_ADDR_VAR 0 3
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 5
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: ST_TO_ADDR
22673: GO 23604
22675: LD_INT 11
22677: DOUBLE
22678: EQUAL
22679: IFTRUE 22683
22681: GO 22713
22683: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22684: LD_ADDR_VAR 0 3
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: LD_INT 2
22694: PUSH
22695: LD_INT 3
22697: PUSH
22698: LD_INT 4
22700: PUSH
22701: LD_INT 5
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: ST_TO_ADDR
22711: GO 23604
22713: LD_INT 4
22715: DOUBLE
22716: EQUAL
22717: IFTRUE 22721
22719: GO 22747
22721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22722: LD_ADDR_VAR 0 3
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: LD_INT 3
22732: PUSH
22733: LD_INT 4
22735: PUSH
22736: LD_INT 5
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: ST_TO_ADDR
22745: GO 23604
22747: LD_INT 5
22749: DOUBLE
22750: EQUAL
22751: IFTRUE 22755
22753: GO 22781
22755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22756: LD_ADDR_VAR 0 3
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: LD_INT 3
22766: PUSH
22767: LD_INT 4
22769: PUSH
22770: LD_INT 5
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: ST_TO_ADDR
22779: GO 23604
22781: LD_INT 9
22783: DOUBLE
22784: EQUAL
22785: IFTRUE 22789
22787: GO 22815
22789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22790: LD_ADDR_VAR 0 3
22794: PUSH
22795: LD_INT 2
22797: PUSH
22798: LD_INT 3
22800: PUSH
22801: LD_INT 4
22803: PUSH
22804: LD_INT 5
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: ST_TO_ADDR
22813: GO 23604
22815: LD_INT 7
22817: DOUBLE
22818: EQUAL
22819: IFTRUE 22823
22821: GO 22849
22823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22824: LD_ADDR_VAR 0 3
22828: PUSH
22829: LD_INT 2
22831: PUSH
22832: LD_INT 3
22834: PUSH
22835: LD_INT 4
22837: PUSH
22838: LD_INT 5
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: ST_TO_ADDR
22847: GO 23604
22849: LD_INT 12
22851: DOUBLE
22852: EQUAL
22853: IFTRUE 22857
22855: GO 22883
22857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22858: LD_ADDR_VAR 0 3
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: LD_INT 3
22868: PUSH
22869: LD_INT 4
22871: PUSH
22872: LD_INT 5
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: ST_TO_ADDR
22881: GO 23604
22883: LD_INT 13
22885: DOUBLE
22886: EQUAL
22887: IFTRUE 22891
22889: GO 22917
22891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22892: LD_ADDR_VAR 0 3
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 3
22902: PUSH
22903: LD_INT 4
22905: PUSH
22906: LD_INT 5
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: ST_TO_ADDR
22915: GO 23604
22917: LD_INT 14
22919: DOUBLE
22920: EQUAL
22921: IFTRUE 22925
22923: GO 22943
22925: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22926: LD_ADDR_VAR 0 3
22930: PUSH
22931: LD_INT 4
22933: PUSH
22934: LD_INT 5
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: ST_TO_ADDR
22941: GO 23604
22943: LD_INT 6
22945: DOUBLE
22946: EQUAL
22947: IFTRUE 22951
22949: GO 22969
22951: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22952: LD_ADDR_VAR 0 3
22956: PUSH
22957: LD_INT 4
22959: PUSH
22960: LD_INT 5
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: ST_TO_ADDR
22967: GO 23604
22969: LD_INT 10
22971: DOUBLE
22972: EQUAL
22973: IFTRUE 22977
22975: GO 22995
22977: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22978: LD_ADDR_VAR 0 3
22982: PUSH
22983: LD_INT 4
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: ST_TO_ADDR
22993: GO 23604
22995: LD_INT 22
22997: DOUBLE
22998: EQUAL
22999: IFTRUE 23003
23001: GO 23029
23003: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23004: LD_ADDR_VAR 0 3
23008: PUSH
23009: LD_INT 11
23011: PUSH
23012: LD_INT 12
23014: PUSH
23015: LD_INT 13
23017: PUSH
23018: LD_INT 14
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: ST_TO_ADDR
23027: GO 23604
23029: LD_INT 23
23031: DOUBLE
23032: EQUAL
23033: IFTRUE 23037
23035: GO 23063
23037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23038: LD_ADDR_VAR 0 3
23042: PUSH
23043: LD_INT 11
23045: PUSH
23046: LD_INT 12
23048: PUSH
23049: LD_INT 13
23051: PUSH
23052: LD_INT 14
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: ST_TO_ADDR
23061: GO 23604
23063: LD_INT 24
23065: DOUBLE
23066: EQUAL
23067: IFTRUE 23071
23069: GO 23097
23071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23072: LD_ADDR_VAR 0 3
23076: PUSH
23077: LD_INT 11
23079: PUSH
23080: LD_INT 12
23082: PUSH
23083: LD_INT 13
23085: PUSH
23086: LD_INT 14
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: ST_TO_ADDR
23095: GO 23604
23097: LD_INT 30
23099: DOUBLE
23100: EQUAL
23101: IFTRUE 23105
23103: GO 23131
23105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23106: LD_ADDR_VAR 0 3
23110: PUSH
23111: LD_INT 11
23113: PUSH
23114: LD_INT 12
23116: PUSH
23117: LD_INT 13
23119: PUSH
23120: LD_INT 14
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: ST_TO_ADDR
23129: GO 23604
23131: LD_INT 25
23133: DOUBLE
23134: EQUAL
23135: IFTRUE 23139
23137: GO 23157
23139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23140: LD_ADDR_VAR 0 3
23144: PUSH
23145: LD_INT 13
23147: PUSH
23148: LD_INT 14
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: ST_TO_ADDR
23155: GO 23604
23157: LD_INT 27
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23183
23165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23166: LD_ADDR_VAR 0 3
23170: PUSH
23171: LD_INT 13
23173: PUSH
23174: LD_INT 14
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: ST_TO_ADDR
23181: GO 23604
23183: LD_INT 28
23185: DOUBLE
23186: EQUAL
23187: IFTRUE 23191
23189: GO 23209
23191: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23192: LD_ADDR_VAR 0 3
23196: PUSH
23197: LD_INT 13
23199: PUSH
23200: LD_INT 14
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: ST_TO_ADDR
23207: GO 23604
23209: LD_INT 29
23211: DOUBLE
23212: EQUAL
23213: IFTRUE 23217
23215: GO 23235
23217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23218: LD_ADDR_VAR 0 3
23222: PUSH
23223: LD_INT 13
23225: PUSH
23226: LD_INT 14
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: ST_TO_ADDR
23233: GO 23604
23235: LD_INT 31
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23261
23243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23244: LD_ADDR_VAR 0 3
23248: PUSH
23249: LD_INT 13
23251: PUSH
23252: LD_INT 14
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: ST_TO_ADDR
23259: GO 23604
23261: LD_INT 26
23263: DOUBLE
23264: EQUAL
23265: IFTRUE 23269
23267: GO 23287
23269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23270: LD_ADDR_VAR 0 3
23274: PUSH
23275: LD_INT 13
23277: PUSH
23278: LD_INT 14
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: ST_TO_ADDR
23285: GO 23604
23287: LD_INT 42
23289: DOUBLE
23290: EQUAL
23291: IFTRUE 23295
23293: GO 23321
23295: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23296: LD_ADDR_VAR 0 3
23300: PUSH
23301: LD_INT 21
23303: PUSH
23304: LD_INT 22
23306: PUSH
23307: LD_INT 23
23309: PUSH
23310: LD_INT 24
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: ST_TO_ADDR
23319: GO 23604
23321: LD_INT 43
23323: DOUBLE
23324: EQUAL
23325: IFTRUE 23329
23327: GO 23355
23329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23330: LD_ADDR_VAR 0 3
23334: PUSH
23335: LD_INT 21
23337: PUSH
23338: LD_INT 22
23340: PUSH
23341: LD_INT 23
23343: PUSH
23344: LD_INT 24
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: ST_TO_ADDR
23353: GO 23604
23355: LD_INT 44
23357: DOUBLE
23358: EQUAL
23359: IFTRUE 23363
23361: GO 23389
23363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23364: LD_ADDR_VAR 0 3
23368: PUSH
23369: LD_INT 21
23371: PUSH
23372: LD_INT 22
23374: PUSH
23375: LD_INT 23
23377: PUSH
23378: LD_INT 24
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: ST_TO_ADDR
23387: GO 23604
23389: LD_INT 45
23391: DOUBLE
23392: EQUAL
23393: IFTRUE 23397
23395: GO 23423
23397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23398: LD_ADDR_VAR 0 3
23402: PUSH
23403: LD_INT 21
23405: PUSH
23406: LD_INT 22
23408: PUSH
23409: LD_INT 23
23411: PUSH
23412: LD_INT 24
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: ST_TO_ADDR
23421: GO 23604
23423: LD_INT 49
23425: DOUBLE
23426: EQUAL
23427: IFTRUE 23431
23429: GO 23457
23431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23432: LD_ADDR_VAR 0 3
23436: PUSH
23437: LD_INT 21
23439: PUSH
23440: LD_INT 22
23442: PUSH
23443: LD_INT 23
23445: PUSH
23446: LD_INT 24
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: ST_TO_ADDR
23455: GO 23604
23457: LD_INT 51
23459: DOUBLE
23460: EQUAL
23461: IFTRUE 23465
23463: GO 23491
23465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23466: LD_ADDR_VAR 0 3
23470: PUSH
23471: LD_INT 21
23473: PUSH
23474: LD_INT 22
23476: PUSH
23477: LD_INT 23
23479: PUSH
23480: LD_INT 24
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: ST_TO_ADDR
23489: GO 23604
23491: LD_INT 52
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 23525
23499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23500: LD_ADDR_VAR 0 3
23504: PUSH
23505: LD_INT 21
23507: PUSH
23508: LD_INT 22
23510: PUSH
23511: LD_INT 23
23513: PUSH
23514: LD_INT 24
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: ST_TO_ADDR
23523: GO 23604
23525: LD_INT 53
23527: DOUBLE
23528: EQUAL
23529: IFTRUE 23533
23531: GO 23551
23533: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23534: LD_ADDR_VAR 0 3
23538: PUSH
23539: LD_INT 23
23541: PUSH
23542: LD_INT 24
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: ST_TO_ADDR
23549: GO 23604
23551: LD_INT 46
23553: DOUBLE
23554: EQUAL
23555: IFTRUE 23559
23557: GO 23577
23559: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23560: LD_ADDR_VAR 0 3
23564: PUSH
23565: LD_INT 23
23567: PUSH
23568: LD_INT 24
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: ST_TO_ADDR
23575: GO 23604
23577: LD_INT 47
23579: DOUBLE
23580: EQUAL
23581: IFTRUE 23585
23583: GO 23603
23585: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23586: LD_ADDR_VAR 0 3
23590: PUSH
23591: LD_INT 23
23593: PUSH
23594: LD_INT 24
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: ST_TO_ADDR
23601: GO 23604
23603: POP
// result := ( chassis in result ) ;
23604: LD_ADDR_VAR 0 3
23608: PUSH
23609: LD_VAR 0 1
23613: PUSH
23614: LD_VAR 0 3
23618: IN
23619: ST_TO_ADDR
// end ;
23620: LD_VAR 0 3
23624: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23625: LD_INT 0
23627: PPUSH
23628: PPUSH
23629: PPUSH
23630: PPUSH
23631: PPUSH
23632: PPUSH
23633: PPUSH
// result := array ;
23634: LD_ADDR_VAR 0 5
23638: PUSH
23639: LD_VAR 0 1
23643: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23644: LD_VAR 0 1
23648: NOT
23649: PUSH
23650: LD_VAR 0 2
23654: NOT
23655: OR
23656: PUSH
23657: LD_VAR 0 3
23661: NOT
23662: OR
23663: PUSH
23664: LD_VAR 0 2
23668: PUSH
23669: LD_VAR 0 1
23673: GREATER
23674: OR
23675: PUSH
23676: LD_VAR 0 3
23680: PUSH
23681: LD_VAR 0 1
23685: GREATER
23686: OR
23687: IFFALSE 23691
// exit ;
23689: GO 23987
// if direction then
23691: LD_VAR 0 4
23695: IFFALSE 23759
// begin d := 1 ;
23697: LD_ADDR_VAR 0 9
23701: PUSH
23702: LD_INT 1
23704: ST_TO_ADDR
// if i_from > i_to then
23705: LD_VAR 0 2
23709: PUSH
23710: LD_VAR 0 3
23714: GREATER
23715: IFFALSE 23741
// length := ( array - i_from ) + i_to else
23717: LD_ADDR_VAR 0 11
23721: PUSH
23722: LD_VAR 0 1
23726: PUSH
23727: LD_VAR 0 2
23731: MINUS
23732: PUSH
23733: LD_VAR 0 3
23737: PLUS
23738: ST_TO_ADDR
23739: GO 23757
// length := i_to - i_from ;
23741: LD_ADDR_VAR 0 11
23745: PUSH
23746: LD_VAR 0 3
23750: PUSH
23751: LD_VAR 0 2
23755: MINUS
23756: ST_TO_ADDR
// end else
23757: GO 23820
// begin d := - 1 ;
23759: LD_ADDR_VAR 0 9
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: ST_TO_ADDR
// if i_from > i_to then
23768: LD_VAR 0 2
23772: PUSH
23773: LD_VAR 0 3
23777: GREATER
23778: IFFALSE 23798
// length := i_from - i_to else
23780: LD_ADDR_VAR 0 11
23784: PUSH
23785: LD_VAR 0 2
23789: PUSH
23790: LD_VAR 0 3
23794: MINUS
23795: ST_TO_ADDR
23796: GO 23820
// length := ( array - i_to ) + i_from ;
23798: LD_ADDR_VAR 0 11
23802: PUSH
23803: LD_VAR 0 1
23807: PUSH
23808: LD_VAR 0 3
23812: MINUS
23813: PUSH
23814: LD_VAR 0 2
23818: PLUS
23819: ST_TO_ADDR
// end ; if not length then
23820: LD_VAR 0 11
23824: NOT
23825: IFFALSE 23829
// exit ;
23827: GO 23987
// tmp := array ;
23829: LD_ADDR_VAR 0 10
23833: PUSH
23834: LD_VAR 0 1
23838: ST_TO_ADDR
// for i = 1 to length do
23839: LD_ADDR_VAR 0 6
23843: PUSH
23844: DOUBLE
23845: LD_INT 1
23847: DEC
23848: ST_TO_ADDR
23849: LD_VAR 0 11
23853: PUSH
23854: FOR_TO
23855: IFFALSE 23975
// begin for j = 1 to array do
23857: LD_ADDR_VAR 0 7
23861: PUSH
23862: DOUBLE
23863: LD_INT 1
23865: DEC
23866: ST_TO_ADDR
23867: LD_VAR 0 1
23871: PUSH
23872: FOR_TO
23873: IFFALSE 23961
// begin k := j + d ;
23875: LD_ADDR_VAR 0 8
23879: PUSH
23880: LD_VAR 0 7
23884: PUSH
23885: LD_VAR 0 9
23889: PLUS
23890: ST_TO_ADDR
// if k > array then
23891: LD_VAR 0 8
23895: PUSH
23896: LD_VAR 0 1
23900: GREATER
23901: IFFALSE 23911
// k := 1 ;
23903: LD_ADDR_VAR 0 8
23907: PUSH
23908: LD_INT 1
23910: ST_TO_ADDR
// if not k then
23911: LD_VAR 0 8
23915: NOT
23916: IFFALSE 23928
// k := array ;
23918: LD_ADDR_VAR 0 8
23922: PUSH
23923: LD_VAR 0 1
23927: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23928: LD_ADDR_VAR 0 10
23932: PUSH
23933: LD_VAR 0 10
23937: PPUSH
23938: LD_VAR 0 8
23942: PPUSH
23943: LD_VAR 0 1
23947: PUSH
23948: LD_VAR 0 7
23952: ARRAY
23953: PPUSH
23954: CALL_OW 1
23958: ST_TO_ADDR
// end ;
23959: GO 23872
23961: POP
23962: POP
// array := tmp ;
23963: LD_ADDR_VAR 0 1
23967: PUSH
23968: LD_VAR 0 10
23972: ST_TO_ADDR
// end ;
23973: GO 23854
23975: POP
23976: POP
// result := array ;
23977: LD_ADDR_VAR 0 5
23981: PUSH
23982: LD_VAR 0 1
23986: ST_TO_ADDR
// end ;
23987: LD_VAR 0 5
23991: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
// result := 0 ;
23996: LD_ADDR_VAR 0 3
24000: PUSH
24001: LD_INT 0
24003: ST_TO_ADDR
// if not array or not value in array then
24004: LD_VAR 0 1
24008: NOT
24009: PUSH
24010: LD_VAR 0 2
24014: PUSH
24015: LD_VAR 0 1
24019: IN
24020: NOT
24021: OR
24022: IFFALSE 24026
// exit ;
24024: GO 24080
// for i = 1 to array do
24026: LD_ADDR_VAR 0 4
24030: PUSH
24031: DOUBLE
24032: LD_INT 1
24034: DEC
24035: ST_TO_ADDR
24036: LD_VAR 0 1
24040: PUSH
24041: FOR_TO
24042: IFFALSE 24078
// if value = array [ i ] then
24044: LD_VAR 0 2
24048: PUSH
24049: LD_VAR 0 1
24053: PUSH
24054: LD_VAR 0 4
24058: ARRAY
24059: EQUAL
24060: IFFALSE 24076
// begin result := i ;
24062: LD_ADDR_VAR 0 3
24066: PUSH
24067: LD_VAR 0 4
24071: ST_TO_ADDR
// exit ;
24072: POP
24073: POP
24074: GO 24080
// end ;
24076: GO 24041
24078: POP
24079: POP
// end ;
24080: LD_VAR 0 3
24084: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24085: LD_INT 0
24087: PPUSH
// vc_chassis := chassis ;
24088: LD_ADDR_OWVAR 37
24092: PUSH
24093: LD_VAR 0 1
24097: ST_TO_ADDR
// vc_engine := engine ;
24098: LD_ADDR_OWVAR 39
24102: PUSH
24103: LD_VAR 0 2
24107: ST_TO_ADDR
// vc_control := control ;
24108: LD_ADDR_OWVAR 38
24112: PUSH
24113: LD_VAR 0 3
24117: ST_TO_ADDR
// vc_weapon := weapon ;
24118: LD_ADDR_OWVAR 40
24122: PUSH
24123: LD_VAR 0 4
24127: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24128: LD_ADDR_OWVAR 41
24132: PUSH
24133: LD_VAR 0 5
24137: ST_TO_ADDR
// end ;
24138: LD_VAR 0 6
24142: RET
// export function WantPlant ( unit ) ; var task ; begin
24143: LD_INT 0
24145: PPUSH
24146: PPUSH
// result := false ;
24147: LD_ADDR_VAR 0 2
24151: PUSH
24152: LD_INT 0
24154: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24155: LD_ADDR_VAR 0 3
24159: PUSH
24160: LD_VAR 0 1
24164: PPUSH
24165: CALL_OW 437
24169: ST_TO_ADDR
// if task then
24170: LD_VAR 0 3
24174: IFFALSE 24202
// if task [ 1 ] [ 1 ] = p then
24176: LD_VAR 0 3
24180: PUSH
24181: LD_INT 1
24183: ARRAY
24184: PUSH
24185: LD_INT 1
24187: ARRAY
24188: PUSH
24189: LD_STRING p
24191: EQUAL
24192: IFFALSE 24202
// result := true ;
24194: LD_ADDR_VAR 0 2
24198: PUSH
24199: LD_INT 1
24201: ST_TO_ADDR
// end ;
24202: LD_VAR 0 2
24206: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24207: LD_INT 0
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
// if pos < 1 then
24213: LD_VAR 0 2
24217: PUSH
24218: LD_INT 1
24220: LESS
24221: IFFALSE 24225
// exit ;
24223: GO 24528
// if pos = 1 then
24225: LD_VAR 0 2
24229: PUSH
24230: LD_INT 1
24232: EQUAL
24233: IFFALSE 24266
// result := Replace ( arr , pos [ 1 ] , value ) else
24235: LD_ADDR_VAR 0 4
24239: PUSH
24240: LD_VAR 0 1
24244: PPUSH
24245: LD_VAR 0 2
24249: PUSH
24250: LD_INT 1
24252: ARRAY
24253: PPUSH
24254: LD_VAR 0 3
24258: PPUSH
24259: CALL_OW 1
24263: ST_TO_ADDR
24264: GO 24528
// begin tmp := arr ;
24266: LD_ADDR_VAR 0 6
24270: PUSH
24271: LD_VAR 0 1
24275: ST_TO_ADDR
// s_arr := [ tmp ] ;
24276: LD_ADDR_VAR 0 7
24280: PUSH
24281: LD_VAR 0 6
24285: PUSH
24286: EMPTY
24287: LIST
24288: ST_TO_ADDR
// for i = 1 to pos - 1 do
24289: LD_ADDR_VAR 0 5
24293: PUSH
24294: DOUBLE
24295: LD_INT 1
24297: DEC
24298: ST_TO_ADDR
24299: LD_VAR 0 2
24303: PUSH
24304: LD_INT 1
24306: MINUS
24307: PUSH
24308: FOR_TO
24309: IFFALSE 24354
// begin tmp := tmp [ pos [ i ] ] ;
24311: LD_ADDR_VAR 0 6
24315: PUSH
24316: LD_VAR 0 6
24320: PUSH
24321: LD_VAR 0 2
24325: PUSH
24326: LD_VAR 0 5
24330: ARRAY
24331: ARRAY
24332: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24333: LD_ADDR_VAR 0 7
24337: PUSH
24338: LD_VAR 0 7
24342: PUSH
24343: LD_VAR 0 6
24347: PUSH
24348: EMPTY
24349: LIST
24350: ADD
24351: ST_TO_ADDR
// end ;
24352: GO 24308
24354: POP
24355: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24356: LD_ADDR_VAR 0 6
24360: PUSH
24361: LD_VAR 0 6
24365: PPUSH
24366: LD_VAR 0 2
24370: PUSH
24371: LD_VAR 0 2
24375: ARRAY
24376: PPUSH
24377: LD_VAR 0 3
24381: PPUSH
24382: CALL_OW 1
24386: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24387: LD_ADDR_VAR 0 7
24391: PUSH
24392: LD_VAR 0 7
24396: PPUSH
24397: LD_VAR 0 7
24401: PPUSH
24402: LD_VAR 0 6
24406: PPUSH
24407: CALL_OW 1
24411: ST_TO_ADDR
// for i = s_arr downto 2 do
24412: LD_ADDR_VAR 0 5
24416: PUSH
24417: DOUBLE
24418: LD_VAR 0 7
24422: INC
24423: ST_TO_ADDR
24424: LD_INT 2
24426: PUSH
24427: FOR_DOWNTO
24428: IFFALSE 24512
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24430: LD_ADDR_VAR 0 6
24434: PUSH
24435: LD_VAR 0 7
24439: PUSH
24440: LD_VAR 0 5
24444: PUSH
24445: LD_INT 1
24447: MINUS
24448: ARRAY
24449: PPUSH
24450: LD_VAR 0 2
24454: PUSH
24455: LD_VAR 0 5
24459: PUSH
24460: LD_INT 1
24462: MINUS
24463: ARRAY
24464: PPUSH
24465: LD_VAR 0 7
24469: PUSH
24470: LD_VAR 0 5
24474: ARRAY
24475: PPUSH
24476: CALL_OW 1
24480: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24481: LD_ADDR_VAR 0 7
24485: PUSH
24486: LD_VAR 0 7
24490: PPUSH
24491: LD_VAR 0 5
24495: PUSH
24496: LD_INT 1
24498: MINUS
24499: PPUSH
24500: LD_VAR 0 6
24504: PPUSH
24505: CALL_OW 1
24509: ST_TO_ADDR
// end ;
24510: GO 24427
24512: POP
24513: POP
// result := s_arr [ 1 ] ;
24514: LD_ADDR_VAR 0 4
24518: PUSH
24519: LD_VAR 0 7
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: ST_TO_ADDR
// end ; end ;
24528: LD_VAR 0 4
24532: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24533: LD_INT 0
24535: PPUSH
24536: PPUSH
// if not list then
24537: LD_VAR 0 1
24541: NOT
24542: IFFALSE 24546
// exit ;
24544: GO 24637
// i := list [ pos1 ] ;
24546: LD_ADDR_VAR 0 5
24550: PUSH
24551: LD_VAR 0 1
24555: PUSH
24556: LD_VAR 0 2
24560: ARRAY
24561: ST_TO_ADDR
// if not i then
24562: LD_VAR 0 5
24566: NOT
24567: IFFALSE 24571
// exit ;
24569: GO 24637
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24571: LD_ADDR_VAR 0 1
24575: PUSH
24576: LD_VAR 0 1
24580: PPUSH
24581: LD_VAR 0 2
24585: PPUSH
24586: LD_VAR 0 1
24590: PUSH
24591: LD_VAR 0 3
24595: ARRAY
24596: PPUSH
24597: CALL_OW 1
24601: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24602: LD_ADDR_VAR 0 1
24606: PUSH
24607: LD_VAR 0 1
24611: PPUSH
24612: LD_VAR 0 3
24616: PPUSH
24617: LD_VAR 0 5
24621: PPUSH
24622: CALL_OW 1
24626: ST_TO_ADDR
// result := list ;
24627: LD_ADDR_VAR 0 4
24631: PUSH
24632: LD_VAR 0 1
24636: ST_TO_ADDR
// end ;
24637: LD_VAR 0 4
24641: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24642: LD_INT 0
24644: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24645: LD_ADDR_VAR 0 5
24649: PUSH
24650: LD_VAR 0 1
24654: PPUSH
24655: CALL_OW 250
24659: PPUSH
24660: LD_VAR 0 1
24664: PPUSH
24665: CALL_OW 251
24669: PPUSH
24670: LD_VAR 0 2
24674: PPUSH
24675: LD_VAR 0 3
24679: PPUSH
24680: LD_VAR 0 4
24684: PPUSH
24685: CALL 24695 0 5
24689: ST_TO_ADDR
// end ;
24690: LD_VAR 0 5
24694: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24695: LD_INT 0
24697: PPUSH
24698: PPUSH
24699: PPUSH
24700: PPUSH
// if not list then
24701: LD_VAR 0 3
24705: NOT
24706: IFFALSE 24710
// exit ;
24708: GO 25098
// result := [ ] ;
24710: LD_ADDR_VAR 0 6
24714: PUSH
24715: EMPTY
24716: ST_TO_ADDR
// for i in list do
24717: LD_ADDR_VAR 0 7
24721: PUSH
24722: LD_VAR 0 3
24726: PUSH
24727: FOR_IN
24728: IFFALSE 24930
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24730: LD_ADDR_VAR 0 9
24734: PUSH
24735: LD_VAR 0 7
24739: PPUSH
24740: LD_VAR 0 1
24744: PPUSH
24745: LD_VAR 0 2
24749: PPUSH
24750: CALL_OW 297
24754: ST_TO_ADDR
// if not result then
24755: LD_VAR 0 6
24759: NOT
24760: IFFALSE 24786
// result := [ [ i , tmp ] ] else
24762: LD_ADDR_VAR 0 6
24766: PUSH
24767: LD_VAR 0 7
24771: PUSH
24772: LD_VAR 0 9
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: EMPTY
24782: LIST
24783: ST_TO_ADDR
24784: GO 24928
// begin if result [ result ] [ 2 ] < tmp then
24786: LD_VAR 0 6
24790: PUSH
24791: LD_VAR 0 6
24795: ARRAY
24796: PUSH
24797: LD_INT 2
24799: ARRAY
24800: PUSH
24801: LD_VAR 0 9
24805: LESS
24806: IFFALSE 24848
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24808: LD_ADDR_VAR 0 6
24812: PUSH
24813: LD_VAR 0 6
24817: PPUSH
24818: LD_VAR 0 6
24822: PUSH
24823: LD_INT 1
24825: PLUS
24826: PPUSH
24827: LD_VAR 0 7
24831: PUSH
24832: LD_VAR 0 9
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PPUSH
24841: CALL_OW 2
24845: ST_TO_ADDR
24846: GO 24928
// for j = 1 to result do
24848: LD_ADDR_VAR 0 8
24852: PUSH
24853: DOUBLE
24854: LD_INT 1
24856: DEC
24857: ST_TO_ADDR
24858: LD_VAR 0 6
24862: PUSH
24863: FOR_TO
24864: IFFALSE 24926
// begin if tmp < result [ j ] [ 2 ] then
24866: LD_VAR 0 9
24870: PUSH
24871: LD_VAR 0 6
24875: PUSH
24876: LD_VAR 0 8
24880: ARRAY
24881: PUSH
24882: LD_INT 2
24884: ARRAY
24885: LESS
24886: IFFALSE 24924
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24888: LD_ADDR_VAR 0 6
24892: PUSH
24893: LD_VAR 0 6
24897: PPUSH
24898: LD_VAR 0 8
24902: PPUSH
24903: LD_VAR 0 7
24907: PUSH
24908: LD_VAR 0 9
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PPUSH
24917: CALL_OW 2
24921: ST_TO_ADDR
// break ;
24922: GO 24926
// end ; end ;
24924: GO 24863
24926: POP
24927: POP
// end ; end ;
24928: GO 24727
24930: POP
24931: POP
// if result and not asc then
24932: LD_VAR 0 6
24936: PUSH
24937: LD_VAR 0 4
24941: NOT
24942: AND
24943: IFFALSE 25018
// begin tmp := result ;
24945: LD_ADDR_VAR 0 9
24949: PUSH
24950: LD_VAR 0 6
24954: ST_TO_ADDR
// for i = tmp downto 1 do
24955: LD_ADDR_VAR 0 7
24959: PUSH
24960: DOUBLE
24961: LD_VAR 0 9
24965: INC
24966: ST_TO_ADDR
24967: LD_INT 1
24969: PUSH
24970: FOR_DOWNTO
24971: IFFALSE 25016
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
24973: LD_ADDR_VAR 0 6
24977: PUSH
24978: LD_VAR 0 6
24982: PPUSH
24983: LD_VAR 0 9
24987: PUSH
24988: LD_VAR 0 7
24992: MINUS
24993: PUSH
24994: LD_INT 1
24996: PLUS
24997: PPUSH
24998: LD_VAR 0 9
25002: PUSH
25003: LD_VAR 0 7
25007: ARRAY
25008: PPUSH
25009: CALL_OW 1
25013: ST_TO_ADDR
25014: GO 24970
25016: POP
25017: POP
// end ; tmp := [ ] ;
25018: LD_ADDR_VAR 0 9
25022: PUSH
25023: EMPTY
25024: ST_TO_ADDR
// if mode then
25025: LD_VAR 0 5
25029: IFFALSE 25098
// begin for i = 1 to result do
25031: LD_ADDR_VAR 0 7
25035: PUSH
25036: DOUBLE
25037: LD_INT 1
25039: DEC
25040: ST_TO_ADDR
25041: LD_VAR 0 6
25045: PUSH
25046: FOR_TO
25047: IFFALSE 25086
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25049: LD_ADDR_VAR 0 9
25053: PUSH
25054: LD_VAR 0 9
25058: PPUSH
25059: LD_VAR 0 7
25063: PPUSH
25064: LD_VAR 0 6
25068: PUSH
25069: LD_VAR 0 7
25073: ARRAY
25074: PUSH
25075: LD_INT 1
25077: ARRAY
25078: PPUSH
25079: CALL_OW 1
25083: ST_TO_ADDR
25084: GO 25046
25086: POP
25087: POP
// result := tmp ;
25088: LD_ADDR_VAR 0 6
25092: PUSH
25093: LD_VAR 0 9
25097: ST_TO_ADDR
// end ; end ;
25098: LD_VAR 0 6
25102: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25103: LD_INT 0
25105: PPUSH
25106: PPUSH
25107: PPUSH
25108: PPUSH
25109: PPUSH
25110: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25111: LD_ADDR_VAR 0 5
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: EMPTY
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: ST_TO_ADDR
// if not x or not y then
25133: LD_VAR 0 2
25137: NOT
25138: PUSH
25139: LD_VAR 0 3
25143: NOT
25144: OR
25145: IFFALSE 25149
// exit ;
25147: GO 26795
// if not range then
25149: LD_VAR 0 4
25153: NOT
25154: IFFALSE 25164
// range := 10 ;
25156: LD_ADDR_VAR 0 4
25160: PUSH
25161: LD_INT 10
25163: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25164: LD_ADDR_VAR 0 8
25168: PUSH
25169: LD_INT 81
25171: PUSH
25172: LD_VAR 0 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 92
25183: PUSH
25184: LD_VAR 0 2
25188: PUSH
25189: LD_VAR 0 3
25193: PUSH
25194: LD_VAR 0 4
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 3
25207: PUSH
25208: LD_INT 21
25210: PUSH
25211: LD_INT 3
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: PPUSH
25227: CALL_OW 69
25231: ST_TO_ADDR
// if not tmp then
25232: LD_VAR 0 8
25236: NOT
25237: IFFALSE 25241
// exit ;
25239: GO 26795
// for i in tmp do
25241: LD_ADDR_VAR 0 6
25245: PUSH
25246: LD_VAR 0 8
25250: PUSH
25251: FOR_IN
25252: IFFALSE 26770
// begin points := [ 0 , 0 , 0 ] ;
25254: LD_ADDR_VAR 0 9
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: ST_TO_ADDR
// bpoints := 1 ;
25273: LD_ADDR_VAR 0 10
25277: PUSH
25278: LD_INT 1
25280: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25281: LD_VAR 0 6
25285: PPUSH
25286: CALL_OW 247
25290: PUSH
25291: LD_INT 1
25293: DOUBLE
25294: EQUAL
25295: IFTRUE 25299
25297: GO 25877
25299: POP
// begin if GetClass ( i ) = 1 then
25300: LD_VAR 0 6
25304: PPUSH
25305: CALL_OW 257
25309: PUSH
25310: LD_INT 1
25312: EQUAL
25313: IFFALSE 25334
// points := [ 10 , 5 , 3 ] ;
25315: LD_ADDR_VAR 0 9
25319: PUSH
25320: LD_INT 10
25322: PUSH
25323: LD_INT 5
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25334: LD_VAR 0 6
25338: PPUSH
25339: CALL_OW 257
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: LD_INT 3
25349: PUSH
25350: LD_INT 4
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: LIST
25357: IN
25358: IFFALSE 25379
// points := [ 3 , 2 , 1 ] ;
25360: LD_ADDR_VAR 0 9
25364: PUSH
25365: LD_INT 3
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25379: LD_VAR 0 6
25383: PPUSH
25384: CALL_OW 257
25388: PUSH
25389: LD_INT 5
25391: EQUAL
25392: IFFALSE 25413
// points := [ 130 , 5 , 2 ] ;
25394: LD_ADDR_VAR 0 9
25398: PUSH
25399: LD_INT 130
25401: PUSH
25402: LD_INT 5
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: LIST
25412: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25413: LD_VAR 0 6
25417: PPUSH
25418: CALL_OW 257
25422: PUSH
25423: LD_INT 8
25425: EQUAL
25426: IFFALSE 25447
// points := [ 35 , 35 , 30 ] ;
25428: LD_ADDR_VAR 0 9
25432: PUSH
25433: LD_INT 35
25435: PUSH
25436: LD_INT 35
25438: PUSH
25439: LD_INT 30
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25447: LD_VAR 0 6
25451: PPUSH
25452: CALL_OW 257
25456: PUSH
25457: LD_INT 9
25459: EQUAL
25460: IFFALSE 25481
// points := [ 20 , 55 , 40 ] ;
25462: LD_ADDR_VAR 0 9
25466: PUSH
25467: LD_INT 20
25469: PUSH
25470: LD_INT 55
25472: PUSH
25473: LD_INT 40
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: LIST
25480: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25481: LD_VAR 0 6
25485: PPUSH
25486: CALL_OW 257
25490: PUSH
25491: LD_INT 12
25493: PUSH
25494: LD_INT 16
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: IN
25501: IFFALSE 25522
// points := [ 5 , 3 , 2 ] ;
25503: LD_ADDR_VAR 0 9
25507: PUSH
25508: LD_INT 5
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: LD_INT 2
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: LIST
25521: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25522: LD_VAR 0 6
25526: PPUSH
25527: CALL_OW 257
25531: PUSH
25532: LD_INT 17
25534: EQUAL
25535: IFFALSE 25556
// points := [ 100 , 50 , 75 ] ;
25537: LD_ADDR_VAR 0 9
25541: PUSH
25542: LD_INT 100
25544: PUSH
25545: LD_INT 50
25547: PUSH
25548: LD_INT 75
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: LIST
25555: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25556: LD_VAR 0 6
25560: PPUSH
25561: CALL_OW 257
25565: PUSH
25566: LD_INT 15
25568: EQUAL
25569: IFFALSE 25590
// points := [ 10 , 5 , 3 ] ;
25571: LD_ADDR_VAR 0 9
25575: PUSH
25576: LD_INT 10
25578: PUSH
25579: LD_INT 5
25581: PUSH
25582: LD_INT 3
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: LIST
25589: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25590: LD_VAR 0 6
25594: PPUSH
25595: CALL_OW 257
25599: PUSH
25600: LD_INT 14
25602: EQUAL
25603: IFFALSE 25624
// points := [ 10 , 0 , 0 ] ;
25605: LD_ADDR_VAR 0 9
25609: PUSH
25610: LD_INT 10
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: LIST
25623: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25624: LD_VAR 0 6
25628: PPUSH
25629: CALL_OW 257
25633: PUSH
25634: LD_INT 11
25636: EQUAL
25637: IFFALSE 25658
// points := [ 30 , 10 , 5 ] ;
25639: LD_ADDR_VAR 0 9
25643: PUSH
25644: LD_INT 30
25646: PUSH
25647: LD_INT 10
25649: PUSH
25650: LD_INT 5
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: LIST
25657: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25658: LD_VAR 0 1
25662: PPUSH
25663: LD_INT 5
25665: PPUSH
25666: CALL_OW 321
25670: PUSH
25671: LD_INT 2
25673: EQUAL
25674: IFFALSE 25691
// bpoints := bpoints * 1.8 ;
25676: LD_ADDR_VAR 0 10
25680: PUSH
25681: LD_VAR 0 10
25685: PUSH
25686: LD_REAL  1.80000000000000E+0000
25689: MUL
25690: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25691: LD_VAR 0 6
25695: PPUSH
25696: CALL_OW 257
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: LD_INT 3
25709: PUSH
25710: LD_INT 4
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: IN
25719: PUSH
25720: LD_VAR 0 1
25724: PPUSH
25725: LD_INT 51
25727: PPUSH
25728: CALL_OW 321
25732: PUSH
25733: LD_INT 2
25735: EQUAL
25736: AND
25737: IFFALSE 25754
// bpoints := bpoints * 1.2 ;
25739: LD_ADDR_VAR 0 10
25743: PUSH
25744: LD_VAR 0 10
25748: PUSH
25749: LD_REAL  1.20000000000000E+0000
25752: MUL
25753: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25754: LD_VAR 0 6
25758: PPUSH
25759: CALL_OW 257
25763: PUSH
25764: LD_INT 5
25766: PUSH
25767: LD_INT 7
25769: PUSH
25770: LD_INT 9
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: IN
25778: PUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: LD_INT 52
25786: PPUSH
25787: CALL_OW 321
25791: PUSH
25792: LD_INT 2
25794: EQUAL
25795: AND
25796: IFFALSE 25813
// bpoints := bpoints * 1.5 ;
25798: LD_ADDR_VAR 0 10
25802: PUSH
25803: LD_VAR 0 10
25807: PUSH
25808: LD_REAL  1.50000000000000E+0000
25811: MUL
25812: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25813: LD_VAR 0 1
25817: PPUSH
25818: LD_INT 66
25820: PPUSH
25821: CALL_OW 321
25825: PUSH
25826: LD_INT 2
25828: EQUAL
25829: IFFALSE 25846
// bpoints := bpoints * 1.1 ;
25831: LD_ADDR_VAR 0 10
25835: PUSH
25836: LD_VAR 0 10
25840: PUSH
25841: LD_REAL  1.10000000000000E+0000
25844: MUL
25845: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25846: LD_ADDR_VAR 0 10
25850: PUSH
25851: LD_VAR 0 10
25855: PUSH
25856: LD_VAR 0 6
25860: PPUSH
25861: LD_INT 1
25863: PPUSH
25864: CALL_OW 259
25868: PUSH
25869: LD_REAL  1.15000000000000E+0000
25872: MUL
25873: MUL
25874: ST_TO_ADDR
// end ; unit_vehicle :
25875: GO 26699
25877: LD_INT 2
25879: DOUBLE
25880: EQUAL
25881: IFTRUE 25885
25883: GO 26687
25885: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25886: LD_VAR 0 6
25890: PPUSH
25891: CALL_OW 264
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: LD_INT 42
25901: PUSH
25902: LD_INT 24
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: LIST
25909: IN
25910: IFFALSE 25931
// points := [ 25 , 5 , 3 ] ;
25912: LD_ADDR_VAR 0 9
25916: PUSH
25917: LD_INT 25
25919: PUSH
25920: LD_INT 5
25922: PUSH
25923: LD_INT 3
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25931: LD_VAR 0 6
25935: PPUSH
25936: CALL_OW 264
25940: PUSH
25941: LD_INT 4
25943: PUSH
25944: LD_INT 43
25946: PUSH
25947: LD_INT 25
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: IN
25955: IFFALSE 25976
// points := [ 40 , 15 , 5 ] ;
25957: LD_ADDR_VAR 0 9
25961: PUSH
25962: LD_INT 40
25964: PUSH
25965: LD_INT 15
25967: PUSH
25968: LD_INT 5
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
25976: LD_VAR 0 6
25980: PPUSH
25981: CALL_OW 264
25985: PUSH
25986: LD_INT 3
25988: PUSH
25989: LD_INT 23
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: IN
25996: IFFALSE 26017
// points := [ 7 , 25 , 8 ] ;
25998: LD_ADDR_VAR 0 9
26002: PUSH
26003: LD_INT 7
26005: PUSH
26006: LD_INT 25
26008: PUSH
26009: LD_INT 8
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: LIST
26016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26017: LD_VAR 0 6
26021: PPUSH
26022: CALL_OW 264
26026: PUSH
26027: LD_INT 5
26029: PUSH
26030: LD_INT 27
26032: PUSH
26033: LD_INT 44
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: IN
26041: IFFALSE 26062
// points := [ 14 , 50 , 16 ] ;
26043: LD_ADDR_VAR 0 9
26047: PUSH
26048: LD_INT 14
26050: PUSH
26051: LD_INT 50
26053: PUSH
26054: LD_INT 16
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: LIST
26061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26062: LD_VAR 0 6
26066: PPUSH
26067: CALL_OW 264
26071: PUSH
26072: LD_INT 6
26074: PUSH
26075: LD_INT 46
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: IN
26082: IFFALSE 26103
// points := [ 32 , 120 , 70 ] ;
26084: LD_ADDR_VAR 0 9
26088: PUSH
26089: LD_INT 32
26091: PUSH
26092: LD_INT 120
26094: PUSH
26095: LD_INT 70
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26103: LD_VAR 0 6
26107: PPUSH
26108: CALL_OW 264
26112: PUSH
26113: LD_INT 7
26115: PUSH
26116: LD_INT 28
26118: PUSH
26119: LD_INT 45
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: LIST
26126: IN
26127: IFFALSE 26148
// points := [ 35 , 20 , 45 ] ;
26129: LD_ADDR_VAR 0 9
26133: PUSH
26134: LD_INT 35
26136: PUSH
26137: LD_INT 20
26139: PUSH
26140: LD_INT 45
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26148: LD_VAR 0 6
26152: PPUSH
26153: CALL_OW 264
26157: PUSH
26158: LD_INT 47
26160: PUSH
26161: EMPTY
26162: LIST
26163: IN
26164: IFFALSE 26185
// points := [ 67 , 45 , 75 ] ;
26166: LD_ADDR_VAR 0 9
26170: PUSH
26171: LD_INT 67
26173: PUSH
26174: LD_INT 45
26176: PUSH
26177: LD_INT 75
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: LIST
26184: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26185: LD_VAR 0 6
26189: PPUSH
26190: CALL_OW 264
26194: PUSH
26195: LD_INT 26
26197: PUSH
26198: EMPTY
26199: LIST
26200: IN
26201: IFFALSE 26222
// points := [ 120 , 30 , 80 ] ;
26203: LD_ADDR_VAR 0 9
26207: PUSH
26208: LD_INT 120
26210: PUSH
26211: LD_INT 30
26213: PUSH
26214: LD_INT 80
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26222: LD_VAR 0 6
26226: PPUSH
26227: CALL_OW 264
26231: PUSH
26232: LD_INT 22
26234: PUSH
26235: EMPTY
26236: LIST
26237: IN
26238: IFFALSE 26259
// points := [ 40 , 1 , 1 ] ;
26240: LD_ADDR_VAR 0 9
26244: PUSH
26245: LD_INT 40
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: LIST
26258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26259: LD_VAR 0 6
26263: PPUSH
26264: CALL_OW 264
26268: PUSH
26269: LD_INT 29
26271: PUSH
26272: EMPTY
26273: LIST
26274: IN
26275: IFFALSE 26296
// points := [ 70 , 200 , 400 ] ;
26277: LD_ADDR_VAR 0 9
26281: PUSH
26282: LD_INT 70
26284: PUSH
26285: LD_INT 200
26287: PUSH
26288: LD_INT 400
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: LIST
26295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26296: LD_VAR 0 6
26300: PPUSH
26301: CALL_OW 264
26305: PUSH
26306: LD_INT 14
26308: PUSH
26309: LD_INT 53
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: IN
26316: IFFALSE 26337
// points := [ 40 , 10 , 20 ] ;
26318: LD_ADDR_VAR 0 9
26322: PUSH
26323: LD_INT 40
26325: PUSH
26326: LD_INT 10
26328: PUSH
26329: LD_INT 20
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: LIST
26336: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26337: LD_VAR 0 6
26341: PPUSH
26342: CALL_OW 264
26346: PUSH
26347: LD_INT 9
26349: PUSH
26350: EMPTY
26351: LIST
26352: IN
26353: IFFALSE 26374
// points := [ 5 , 70 , 20 ] ;
26355: LD_ADDR_VAR 0 9
26359: PUSH
26360: LD_INT 5
26362: PUSH
26363: LD_INT 70
26365: PUSH
26366: LD_INT 20
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26374: LD_VAR 0 6
26378: PPUSH
26379: CALL_OW 264
26383: PUSH
26384: LD_INT 10
26386: PUSH
26387: EMPTY
26388: LIST
26389: IN
26390: IFFALSE 26411
// points := [ 35 , 110 , 70 ] ;
26392: LD_ADDR_VAR 0 9
26396: PUSH
26397: LD_INT 35
26399: PUSH
26400: LD_INT 110
26402: PUSH
26403: LD_INT 70
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: LIST
26410: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26411: LD_VAR 0 6
26415: PPUSH
26416: CALL_OW 265
26420: PUSH
26421: LD_INT 25
26423: EQUAL
26424: IFFALSE 26445
// points := [ 80 , 65 , 100 ] ;
26426: LD_ADDR_VAR 0 9
26430: PUSH
26431: LD_INT 80
26433: PUSH
26434: LD_INT 65
26436: PUSH
26437: LD_INT 100
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26445: LD_VAR 0 6
26449: PPUSH
26450: CALL_OW 263
26454: PUSH
26455: LD_INT 1
26457: EQUAL
26458: IFFALSE 26493
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26460: LD_ADDR_VAR 0 10
26464: PUSH
26465: LD_VAR 0 10
26469: PUSH
26470: LD_VAR 0 6
26474: PPUSH
26475: CALL_OW 311
26479: PPUSH
26480: LD_INT 3
26482: PPUSH
26483: CALL_OW 259
26487: PUSH
26488: LD_INT 4
26490: MUL
26491: MUL
26492: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26493: LD_VAR 0 6
26497: PPUSH
26498: CALL_OW 263
26502: PUSH
26503: LD_INT 2
26505: EQUAL
26506: IFFALSE 26557
// begin j := IsControledBy ( i ) ;
26508: LD_ADDR_VAR 0 7
26512: PUSH
26513: LD_VAR 0 6
26517: PPUSH
26518: CALL_OW 312
26522: ST_TO_ADDR
// if j then
26523: LD_VAR 0 7
26527: IFFALSE 26557
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26529: LD_ADDR_VAR 0 10
26533: PUSH
26534: LD_VAR 0 10
26538: PUSH
26539: LD_VAR 0 7
26543: PPUSH
26544: LD_INT 3
26546: PPUSH
26547: CALL_OW 259
26551: PUSH
26552: LD_INT 3
26554: MUL
26555: MUL
26556: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26557: LD_VAR 0 6
26561: PPUSH
26562: CALL_OW 264
26566: PUSH
26567: LD_INT 5
26569: PUSH
26570: LD_INT 6
26572: PUSH
26573: LD_INT 46
26575: PUSH
26576: LD_INT 44
26578: PUSH
26579: LD_INT 47
26581: PUSH
26582: LD_INT 45
26584: PUSH
26585: LD_INT 28
26587: PUSH
26588: LD_INT 7
26590: PUSH
26591: LD_INT 27
26593: PUSH
26594: LD_INT 29
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: IN
26609: PUSH
26610: LD_VAR 0 1
26614: PPUSH
26615: LD_INT 52
26617: PPUSH
26618: CALL_OW 321
26622: PUSH
26623: LD_INT 2
26625: EQUAL
26626: AND
26627: IFFALSE 26644
// bpoints := bpoints * 1.2 ;
26629: LD_ADDR_VAR 0 10
26633: PUSH
26634: LD_VAR 0 10
26638: PUSH
26639: LD_REAL  1.20000000000000E+0000
26642: MUL
26643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26644: LD_VAR 0 6
26648: PPUSH
26649: CALL_OW 264
26653: PUSH
26654: LD_INT 6
26656: PUSH
26657: LD_INT 46
26659: PUSH
26660: LD_INT 47
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: LIST
26667: IN
26668: IFFALSE 26685
// bpoints := bpoints * 1.2 ;
26670: LD_ADDR_VAR 0 10
26674: PUSH
26675: LD_VAR 0 10
26679: PUSH
26680: LD_REAL  1.20000000000000E+0000
26683: MUL
26684: ST_TO_ADDR
// end ; unit_building :
26685: GO 26699
26687: LD_INT 3
26689: DOUBLE
26690: EQUAL
26691: IFTRUE 26695
26693: GO 26698
26695: POP
// ; end ;
26696: GO 26699
26698: POP
// for j = 1 to 3 do
26699: LD_ADDR_VAR 0 7
26703: PUSH
26704: DOUBLE
26705: LD_INT 1
26707: DEC
26708: ST_TO_ADDR
26709: LD_INT 3
26711: PUSH
26712: FOR_TO
26713: IFFALSE 26766
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26715: LD_ADDR_VAR 0 5
26719: PUSH
26720: LD_VAR 0 5
26724: PPUSH
26725: LD_VAR 0 7
26729: PPUSH
26730: LD_VAR 0 5
26734: PUSH
26735: LD_VAR 0 7
26739: ARRAY
26740: PUSH
26741: LD_VAR 0 9
26745: PUSH
26746: LD_VAR 0 7
26750: ARRAY
26751: PUSH
26752: LD_VAR 0 10
26756: MUL
26757: PLUS
26758: PPUSH
26759: CALL_OW 1
26763: ST_TO_ADDR
26764: GO 26712
26766: POP
26767: POP
// end ;
26768: GO 25251
26770: POP
26771: POP
// result := Replace ( result , 4 , tmp ) ;
26772: LD_ADDR_VAR 0 5
26776: PUSH
26777: LD_VAR 0 5
26781: PPUSH
26782: LD_INT 4
26784: PPUSH
26785: LD_VAR 0 8
26789: PPUSH
26790: CALL_OW 1
26794: ST_TO_ADDR
// end ;
26795: LD_VAR 0 5
26799: RET
// export function DangerAtRange ( unit , range ) ; begin
26800: LD_INT 0
26802: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26803: LD_ADDR_VAR 0 3
26807: PUSH
26808: LD_VAR 0 1
26812: PPUSH
26813: CALL_OW 255
26817: PPUSH
26818: LD_VAR 0 1
26822: PPUSH
26823: CALL_OW 250
26827: PPUSH
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 251
26837: PPUSH
26838: LD_VAR 0 2
26842: PPUSH
26843: CALL 25103 0 4
26847: ST_TO_ADDR
// end ;
26848: LD_VAR 0 3
26852: RET
// export function DangerInArea ( side , area ) ; begin
26853: LD_INT 0
26855: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26856: LD_ADDR_VAR 0 3
26860: PUSH
26861: LD_VAR 0 2
26865: PPUSH
26866: LD_INT 81
26868: PUSH
26869: LD_VAR 0 1
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 70
26882: ST_TO_ADDR
// end ;
26883: LD_VAR 0 3
26887: RET
// export function IsExtension ( b ) ; begin
26888: LD_INT 0
26890: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26891: LD_ADDR_VAR 0 2
26895: PUSH
26896: LD_VAR 0 1
26900: PUSH
26901: LD_INT 23
26903: PUSH
26904: LD_INT 20
26906: PUSH
26907: LD_INT 22
26909: PUSH
26910: LD_INT 17
26912: PUSH
26913: LD_INT 24
26915: PUSH
26916: LD_INT 21
26918: PUSH
26919: LD_INT 19
26921: PUSH
26922: LD_INT 16
26924: PUSH
26925: LD_INT 25
26927: PUSH
26928: LD_INT 18
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: IN
26943: ST_TO_ADDR
// end ;
26944: LD_VAR 0 2
26948: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
26949: LD_INT 0
26951: PPUSH
26952: PPUSH
26953: PPUSH
// result := [ ] ;
26954: LD_ADDR_VAR 0 3
26958: PUSH
26959: EMPTY
26960: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
26961: LD_ADDR_VAR 0 4
26965: PUSH
26966: LD_VAR 0 2
26970: PPUSH
26971: LD_INT 21
26973: PUSH
26974: LD_INT 3
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PPUSH
26981: CALL_OW 70
26985: ST_TO_ADDR
// if not tmp then
26986: LD_VAR 0 4
26990: NOT
26991: IFFALSE 26995
// exit ;
26993: GO 27053
// for i in tmp do
26995: LD_ADDR_VAR 0 5
26999: PUSH
27000: LD_VAR 0 4
27004: PUSH
27005: FOR_IN
27006: IFFALSE 27041
// if GetBase ( i ) <> base then
27008: LD_VAR 0 5
27012: PPUSH
27013: CALL_OW 274
27017: PUSH
27018: LD_VAR 0 1
27022: NONEQUAL
27023: IFFALSE 27039
// ComLinkToBase ( base , i ) ;
27025: LD_VAR 0 1
27029: PPUSH
27030: LD_VAR 0 5
27034: PPUSH
27035: CALL_OW 169
27039: GO 27005
27041: POP
27042: POP
// result := tmp ;
27043: LD_ADDR_VAR 0 3
27047: PUSH
27048: LD_VAR 0 4
27052: ST_TO_ADDR
// end ;
27053: LD_VAR 0 3
27057: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27058: LD_INT 0
27060: PPUSH
27061: PPUSH
// if BuildingStatus ( b ) = bs_build then
27062: LD_VAR 0 2
27066: PPUSH
27067: CALL_OW 461
27071: PUSH
27072: LD_INT 1
27074: EQUAL
27075: IFFALSE 27135
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27077: LD_VAR 0 1
27081: PPUSH
27082: LD_STRING h
27084: PUSH
27085: LD_VAR 0 2
27089: PPUSH
27090: CALL_OW 250
27094: PUSH
27095: LD_VAR 0 2
27099: PPUSH
27100: CALL_OW 251
27104: PUSH
27105: LD_VAR 0 2
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: PUSH
27128: EMPTY
27129: LIST
27130: PPUSH
27131: CALL_OW 446
// end ;
27135: LD_VAR 0 3
27139: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27140: LD_INT 0
27142: PPUSH
27143: PPUSH
27144: PPUSH
27145: PPUSH
27146: PPUSH
27147: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27148: LD_VAR 0 1
27152: NOT
27153: PUSH
27154: LD_VAR 0 1
27158: PPUSH
27159: CALL_OW 263
27163: PUSH
27164: LD_INT 2
27166: EQUAL
27167: NOT
27168: OR
27169: IFFALSE 27173
// exit ;
27171: GO 27489
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27173: LD_ADDR_VAR 0 6
27177: PUSH
27178: LD_INT 22
27180: PUSH
27181: LD_VAR 0 1
27185: PPUSH
27186: CALL_OW 255
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 2
27197: PUSH
27198: LD_INT 30
27200: PUSH
27201: LD_INT 36
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 34
27210: PUSH
27211: LD_INT 31
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PPUSH
27227: CALL_OW 69
27231: ST_TO_ADDR
// if not tmp then
27232: LD_VAR 0 6
27236: NOT
27237: IFFALSE 27241
// exit ;
27239: GO 27489
// result := [ ] ;
27241: LD_ADDR_VAR 0 2
27245: PUSH
27246: EMPTY
27247: ST_TO_ADDR
// for i in tmp do
27248: LD_ADDR_VAR 0 3
27252: PUSH
27253: LD_VAR 0 6
27257: PUSH
27258: FOR_IN
27259: IFFALSE 27330
// begin t := UnitsInside ( i ) ;
27261: LD_ADDR_VAR 0 4
27265: PUSH
27266: LD_VAR 0 3
27270: PPUSH
27271: CALL_OW 313
27275: ST_TO_ADDR
// if t then
27276: LD_VAR 0 4
27280: IFFALSE 27328
// for j in t do
27282: LD_ADDR_VAR 0 7
27286: PUSH
27287: LD_VAR 0 4
27291: PUSH
27292: FOR_IN
27293: IFFALSE 27326
// result := Insert ( result , result + 1 , j ) ;
27295: LD_ADDR_VAR 0 2
27299: PUSH
27300: LD_VAR 0 2
27304: PPUSH
27305: LD_VAR 0 2
27309: PUSH
27310: LD_INT 1
27312: PLUS
27313: PPUSH
27314: LD_VAR 0 7
27318: PPUSH
27319: CALL_OW 2
27323: ST_TO_ADDR
27324: GO 27292
27326: POP
27327: POP
// end ;
27328: GO 27258
27330: POP
27331: POP
// if not result then
27332: LD_VAR 0 2
27336: NOT
27337: IFFALSE 27341
// exit ;
27339: GO 27489
// mech := result [ 1 ] ;
27341: LD_ADDR_VAR 0 5
27345: PUSH
27346: LD_VAR 0 2
27350: PUSH
27351: LD_INT 1
27353: ARRAY
27354: ST_TO_ADDR
// if result > 1 then
27355: LD_VAR 0 2
27359: PUSH
27360: LD_INT 1
27362: GREATER
27363: IFFALSE 27475
// for i = 2 to result do
27365: LD_ADDR_VAR 0 3
27369: PUSH
27370: DOUBLE
27371: LD_INT 2
27373: DEC
27374: ST_TO_ADDR
27375: LD_VAR 0 2
27379: PUSH
27380: FOR_TO
27381: IFFALSE 27473
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27383: LD_ADDR_VAR 0 4
27387: PUSH
27388: LD_VAR 0 2
27392: PUSH
27393: LD_VAR 0 3
27397: ARRAY
27398: PPUSH
27399: LD_INT 3
27401: PPUSH
27402: CALL_OW 259
27406: PUSH
27407: LD_VAR 0 2
27411: PUSH
27412: LD_VAR 0 3
27416: ARRAY
27417: PPUSH
27418: CALL_OW 432
27422: MINUS
27423: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27424: LD_VAR 0 4
27428: PUSH
27429: LD_VAR 0 5
27433: PPUSH
27434: LD_INT 3
27436: PPUSH
27437: CALL_OW 259
27441: PUSH
27442: LD_VAR 0 5
27446: PPUSH
27447: CALL_OW 432
27451: MINUS
27452: GREATEREQUAL
27453: IFFALSE 27471
// mech := result [ i ] ;
27455: LD_ADDR_VAR 0 5
27459: PUSH
27460: LD_VAR 0 2
27464: PUSH
27465: LD_VAR 0 3
27469: ARRAY
27470: ST_TO_ADDR
// end ;
27471: GO 27380
27473: POP
27474: POP
// ComLinkTo ( vehicle , mech ) ;
27475: LD_VAR 0 1
27479: PPUSH
27480: LD_VAR 0 5
27484: PPUSH
27485: CALL_OW 135
// end ;
27489: LD_VAR 0 2
27493: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27494: LD_INT 0
27496: PPUSH
27497: PPUSH
27498: PPUSH
27499: PPUSH
27500: PPUSH
27501: PPUSH
27502: PPUSH
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
27507: PPUSH
27508: PPUSH
// result := [ ] ;
27509: LD_ADDR_VAR 0 7
27513: PUSH
27514: EMPTY
27515: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27516: LD_VAR 0 1
27520: PPUSH
27521: CALL_OW 266
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: IN
27536: NOT
27537: IFFALSE 27541
// exit ;
27539: GO 29172
// if name then
27541: LD_VAR 0 3
27545: IFFALSE 27561
// SetBName ( base_dep , name ) ;
27547: LD_VAR 0 1
27551: PPUSH
27552: LD_VAR 0 3
27556: PPUSH
27557: CALL_OW 500
// base := GetBase ( base_dep ) ;
27561: LD_ADDR_VAR 0 15
27565: PUSH
27566: LD_VAR 0 1
27570: PPUSH
27571: CALL_OW 274
27575: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27576: LD_ADDR_VAR 0 16
27580: PUSH
27581: LD_VAR 0 1
27585: PPUSH
27586: CALL_OW 255
27590: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27591: LD_ADDR_VAR 0 17
27595: PUSH
27596: LD_VAR 0 1
27600: PPUSH
27601: CALL_OW 248
27605: ST_TO_ADDR
// if sources then
27606: LD_VAR 0 5
27610: IFFALSE 27657
// for i = 1 to 3 do
27612: LD_ADDR_VAR 0 8
27616: PUSH
27617: DOUBLE
27618: LD_INT 1
27620: DEC
27621: ST_TO_ADDR
27622: LD_INT 3
27624: PUSH
27625: FOR_TO
27626: IFFALSE 27655
// AddResourceType ( base , i , sources [ i ] ) ;
27628: LD_VAR 0 15
27632: PPUSH
27633: LD_VAR 0 8
27637: PPUSH
27638: LD_VAR 0 5
27642: PUSH
27643: LD_VAR 0 8
27647: ARRAY
27648: PPUSH
27649: CALL_OW 276
27653: GO 27625
27655: POP
27656: POP
// buildings := GetBaseBuildings ( base , area ) ;
27657: LD_ADDR_VAR 0 18
27661: PUSH
27662: LD_VAR 0 15
27666: PPUSH
27667: LD_VAR 0 2
27671: PPUSH
27672: CALL 26949 0 2
27676: ST_TO_ADDR
// InitHc ;
27677: CALL_OW 19
// InitUc ;
27681: CALL_OW 18
// uc_side := side ;
27685: LD_ADDR_OWVAR 20
27689: PUSH
27690: LD_VAR 0 16
27694: ST_TO_ADDR
// uc_nation := nation ;
27695: LD_ADDR_OWVAR 21
27699: PUSH
27700: LD_VAR 0 17
27704: ST_TO_ADDR
// if buildings then
27705: LD_VAR 0 18
27709: IFFALSE 29031
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27711: LD_ADDR_VAR 0 19
27715: PUSH
27716: LD_VAR 0 18
27720: PPUSH
27721: LD_INT 2
27723: PUSH
27724: LD_INT 30
27726: PUSH
27727: LD_INT 29
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 30
27736: PUSH
27737: LD_INT 30
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: LIST
27748: PPUSH
27749: CALL_OW 72
27753: ST_TO_ADDR
// if tmp then
27754: LD_VAR 0 19
27758: IFFALSE 27806
// for i in tmp do
27760: LD_ADDR_VAR 0 8
27764: PUSH
27765: LD_VAR 0 19
27769: PUSH
27770: FOR_IN
27771: IFFALSE 27804
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27773: LD_VAR 0 8
27777: PPUSH
27778: CALL_OW 250
27782: PPUSH
27783: LD_VAR 0 8
27787: PPUSH
27788: CALL_OW 251
27792: PPUSH
27793: LD_VAR 0 16
27797: PPUSH
27798: CALL_OW 441
27802: GO 27770
27804: POP
27805: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27806: LD_VAR 0 18
27810: PPUSH
27811: LD_INT 2
27813: PUSH
27814: LD_INT 30
27816: PUSH
27817: LD_INT 32
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 30
27826: PUSH
27827: LD_INT 33
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: LIST
27838: PPUSH
27839: CALL_OW 72
27843: IFFALSE 27931
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27845: LD_ADDR_VAR 0 8
27849: PUSH
27850: LD_VAR 0 18
27854: PPUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 30
27860: PUSH
27861: LD_INT 32
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 30
27870: PUSH
27871: LD_INT 33
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: PPUSH
27883: CALL_OW 72
27887: PUSH
27888: FOR_IN
27889: IFFALSE 27929
// begin if not GetBWeapon ( i ) then
27891: LD_VAR 0 8
27895: PPUSH
27896: CALL_OW 269
27900: NOT
27901: IFFALSE 27927
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27903: LD_VAR 0 8
27907: PPUSH
27908: LD_VAR 0 8
27912: PPUSH
27913: LD_VAR 0 2
27917: PPUSH
27918: CALL 29177 0 2
27922: PPUSH
27923: CALL_OW 431
// end ;
27927: GO 27888
27929: POP
27930: POP
// end ; for i = 1 to personel do
27931: LD_ADDR_VAR 0 8
27935: PUSH
27936: DOUBLE
27937: LD_INT 1
27939: DEC
27940: ST_TO_ADDR
27941: LD_VAR 0 6
27945: PUSH
27946: FOR_TO
27947: IFFALSE 29011
// begin if i > 4 then
27949: LD_VAR 0 8
27953: PUSH
27954: LD_INT 4
27956: GREATER
27957: IFFALSE 27961
// break ;
27959: GO 29011
// case i of 1 :
27961: LD_VAR 0 8
27965: PUSH
27966: LD_INT 1
27968: DOUBLE
27969: EQUAL
27970: IFTRUE 27974
27972: GO 28054
27974: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
27975: LD_ADDR_VAR 0 12
27979: PUSH
27980: LD_VAR 0 18
27984: PPUSH
27985: LD_INT 22
27987: PUSH
27988: LD_VAR 0 16
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 58
27999: PUSH
28000: EMPTY
28001: LIST
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: LD_INT 30
28008: PUSH
28009: LD_INT 32
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 30
28018: PUSH
28019: LD_INT 4
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 30
28028: PUSH
28029: LD_INT 5
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 72
28051: ST_TO_ADDR
28052: GO 28276
28054: LD_INT 2
28056: DOUBLE
28057: EQUAL
28058: IFTRUE 28062
28060: GO 28124
28062: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28063: LD_ADDR_VAR 0 12
28067: PUSH
28068: LD_VAR 0 18
28072: PPUSH
28073: LD_INT 22
28075: PUSH
28076: LD_VAR 0 16
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: PUSH
28088: LD_INT 30
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 30
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PPUSH
28117: CALL_OW 72
28121: ST_TO_ADDR
28122: GO 28276
28124: LD_INT 3
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28194
28132: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28133: LD_ADDR_VAR 0 12
28137: PUSH
28138: LD_VAR 0 18
28142: PPUSH
28143: LD_INT 22
28145: PUSH
28146: LD_VAR 0 16
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 2
28157: PUSH
28158: LD_INT 30
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 30
28170: PUSH
28171: LD_INT 3
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PPUSH
28187: CALL_OW 72
28191: ST_TO_ADDR
28192: GO 28276
28194: LD_INT 4
28196: DOUBLE
28197: EQUAL
28198: IFTRUE 28202
28200: GO 28275
28202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28203: LD_ADDR_VAR 0 12
28207: PUSH
28208: LD_VAR 0 18
28212: PPUSH
28213: LD_INT 22
28215: PUSH
28216: LD_VAR 0 16
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 2
28227: PUSH
28228: LD_INT 30
28230: PUSH
28231: LD_INT 6
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 30
28240: PUSH
28241: LD_INT 7
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 30
28250: PUSH
28251: LD_INT 8
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PPUSH
28268: CALL_OW 72
28272: ST_TO_ADDR
28273: GO 28276
28275: POP
// if i = 1 then
28276: LD_VAR 0 8
28280: PUSH
28281: LD_INT 1
28283: EQUAL
28284: IFFALSE 28395
// begin tmp := [ ] ;
28286: LD_ADDR_VAR 0 19
28290: PUSH
28291: EMPTY
28292: ST_TO_ADDR
// for j in f do
28293: LD_ADDR_VAR 0 9
28297: PUSH
28298: LD_VAR 0 12
28302: PUSH
28303: FOR_IN
28304: IFFALSE 28377
// if GetBType ( j ) = b_bunker then
28306: LD_VAR 0 9
28310: PPUSH
28311: CALL_OW 266
28315: PUSH
28316: LD_INT 32
28318: EQUAL
28319: IFFALSE 28346
// tmp := Insert ( tmp , 1 , j ) else
28321: LD_ADDR_VAR 0 19
28325: PUSH
28326: LD_VAR 0 19
28330: PPUSH
28331: LD_INT 1
28333: PPUSH
28334: LD_VAR 0 9
28338: PPUSH
28339: CALL_OW 2
28343: ST_TO_ADDR
28344: GO 28375
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28346: LD_ADDR_VAR 0 19
28350: PUSH
28351: LD_VAR 0 19
28355: PPUSH
28356: LD_VAR 0 19
28360: PUSH
28361: LD_INT 1
28363: PLUS
28364: PPUSH
28365: LD_VAR 0 9
28369: PPUSH
28370: CALL_OW 2
28374: ST_TO_ADDR
28375: GO 28303
28377: POP
28378: POP
// if tmp then
28379: LD_VAR 0 19
28383: IFFALSE 28395
// f := tmp ;
28385: LD_ADDR_VAR 0 12
28389: PUSH
28390: LD_VAR 0 19
28394: ST_TO_ADDR
// end ; x := personel [ i ] ;
28395: LD_ADDR_VAR 0 13
28399: PUSH
28400: LD_VAR 0 6
28404: PUSH
28405: LD_VAR 0 8
28409: ARRAY
28410: ST_TO_ADDR
// if x = - 1 then
28411: LD_VAR 0 13
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: EQUAL
28420: IFFALSE 28629
// begin for j in f do
28422: LD_ADDR_VAR 0 9
28426: PUSH
28427: LD_VAR 0 12
28431: PUSH
28432: FOR_IN
28433: IFFALSE 28625
// repeat InitHc ;
28435: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28439: LD_VAR 0 9
28443: PPUSH
28444: CALL_OW 266
28448: PUSH
28449: LD_INT 5
28451: EQUAL
28452: IFFALSE 28522
// begin if UnitsInside ( j ) < 3 then
28454: LD_VAR 0 9
28458: PPUSH
28459: CALL_OW 313
28463: PUSH
28464: LD_INT 3
28466: LESS
28467: IFFALSE 28503
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28469: LD_INT 0
28471: PPUSH
28472: LD_INT 5
28474: PUSH
28475: LD_INT 8
28477: PUSH
28478: LD_INT 9
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: PUSH
28486: LD_VAR 0 17
28490: ARRAY
28491: PPUSH
28492: LD_VAR 0 4
28496: PPUSH
28497: CALL_OW 380
28501: GO 28520
// PrepareHuman ( false , i , skill ) ;
28503: LD_INT 0
28505: PPUSH
28506: LD_VAR 0 8
28510: PPUSH
28511: LD_VAR 0 4
28515: PPUSH
28516: CALL_OW 380
// end else
28520: GO 28539
// PrepareHuman ( false , i , skill ) ;
28522: LD_INT 0
28524: PPUSH
28525: LD_VAR 0 8
28529: PPUSH
28530: LD_VAR 0 4
28534: PPUSH
28535: CALL_OW 380
// un := CreateHuman ;
28539: LD_ADDR_VAR 0 14
28543: PUSH
28544: CALL_OW 44
28548: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28549: LD_ADDR_VAR 0 7
28553: PUSH
28554: LD_VAR 0 7
28558: PPUSH
28559: LD_INT 1
28561: PPUSH
28562: LD_VAR 0 14
28566: PPUSH
28567: CALL_OW 2
28571: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28572: LD_VAR 0 14
28576: PPUSH
28577: LD_VAR 0 9
28581: PPUSH
28582: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28586: LD_VAR 0 9
28590: PPUSH
28591: CALL_OW 313
28595: PUSH
28596: LD_INT 6
28598: EQUAL
28599: PUSH
28600: LD_VAR 0 9
28604: PPUSH
28605: CALL_OW 266
28609: PUSH
28610: LD_INT 32
28612: PUSH
28613: LD_INT 31
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: IN
28620: OR
28621: IFFALSE 28435
28623: GO 28432
28625: POP
28626: POP
// end else
28627: GO 29009
// for j = 1 to x do
28629: LD_ADDR_VAR 0 9
28633: PUSH
28634: DOUBLE
28635: LD_INT 1
28637: DEC
28638: ST_TO_ADDR
28639: LD_VAR 0 13
28643: PUSH
28644: FOR_TO
28645: IFFALSE 29007
// begin InitHc ;
28647: CALL_OW 19
// if not f then
28651: LD_VAR 0 12
28655: NOT
28656: IFFALSE 28745
// begin PrepareHuman ( false , i , skill ) ;
28658: LD_INT 0
28660: PPUSH
28661: LD_VAR 0 8
28665: PPUSH
28666: LD_VAR 0 4
28670: PPUSH
28671: CALL_OW 380
// un := CreateHuman ;
28675: LD_ADDR_VAR 0 14
28679: PUSH
28680: CALL_OW 44
28684: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28685: LD_ADDR_VAR 0 7
28689: PUSH
28690: LD_VAR 0 7
28694: PPUSH
28695: LD_INT 1
28697: PPUSH
28698: LD_VAR 0 14
28702: PPUSH
28703: CALL_OW 2
28707: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28708: LD_VAR 0 14
28712: PPUSH
28713: LD_VAR 0 1
28717: PPUSH
28718: CALL_OW 250
28722: PPUSH
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL_OW 251
28732: PPUSH
28733: LD_INT 10
28735: PPUSH
28736: LD_INT 0
28738: PPUSH
28739: CALL_OW 50
// continue ;
28743: GO 28644
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28745: LD_VAR 0 12
28749: PUSH
28750: LD_INT 1
28752: ARRAY
28753: PPUSH
28754: CALL_OW 313
28758: PUSH
28759: LD_VAR 0 12
28763: PUSH
28764: LD_INT 1
28766: ARRAY
28767: PPUSH
28768: CALL_OW 266
28772: PUSH
28773: LD_INT 32
28775: PUSH
28776: LD_INT 31
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: IN
28783: AND
28784: PUSH
28785: LD_VAR 0 12
28789: PUSH
28790: LD_INT 1
28792: ARRAY
28793: PPUSH
28794: CALL_OW 313
28798: PUSH
28799: LD_INT 6
28801: EQUAL
28802: OR
28803: IFFALSE 28823
// f := Delete ( f , 1 ) ;
28805: LD_ADDR_VAR 0 12
28809: PUSH
28810: LD_VAR 0 12
28814: PPUSH
28815: LD_INT 1
28817: PPUSH
28818: CALL_OW 3
28822: ST_TO_ADDR
// if not f then
28823: LD_VAR 0 12
28827: NOT
28828: IFFALSE 28846
// begin x := x + 2 ;
28830: LD_ADDR_VAR 0 13
28834: PUSH
28835: LD_VAR 0 13
28839: PUSH
28840: LD_INT 2
28842: PLUS
28843: ST_TO_ADDR
// continue ;
28844: GO 28644
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28846: LD_VAR 0 12
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: PPUSH
28855: CALL_OW 266
28859: PUSH
28860: LD_INT 5
28862: EQUAL
28863: IFFALSE 28937
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28865: LD_VAR 0 12
28869: PUSH
28870: LD_INT 1
28872: ARRAY
28873: PPUSH
28874: CALL_OW 313
28878: PUSH
28879: LD_INT 3
28881: LESS
28882: IFFALSE 28918
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28884: LD_INT 0
28886: PPUSH
28887: LD_INT 5
28889: PUSH
28890: LD_INT 8
28892: PUSH
28893: LD_INT 9
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: PUSH
28901: LD_VAR 0 17
28905: ARRAY
28906: PPUSH
28907: LD_VAR 0 4
28911: PPUSH
28912: CALL_OW 380
28916: GO 28935
// PrepareHuman ( false , i , skill ) ;
28918: LD_INT 0
28920: PPUSH
28921: LD_VAR 0 8
28925: PPUSH
28926: LD_VAR 0 4
28930: PPUSH
28931: CALL_OW 380
// end else
28935: GO 28954
// PrepareHuman ( false , i , skill ) ;
28937: LD_INT 0
28939: PPUSH
28940: LD_VAR 0 8
28944: PPUSH
28945: LD_VAR 0 4
28949: PPUSH
28950: CALL_OW 380
// un := CreateHuman ;
28954: LD_ADDR_VAR 0 14
28958: PUSH
28959: CALL_OW 44
28963: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28964: LD_ADDR_VAR 0 7
28968: PUSH
28969: LD_VAR 0 7
28973: PPUSH
28974: LD_INT 1
28976: PPUSH
28977: LD_VAR 0 14
28981: PPUSH
28982: CALL_OW 2
28986: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28987: LD_VAR 0 14
28991: PPUSH
28992: LD_VAR 0 12
28996: PUSH
28997: LD_INT 1
28999: ARRAY
29000: PPUSH
29001: CALL_OW 52
// end ;
29005: GO 28644
29007: POP
29008: POP
// end ;
29009: GO 27946
29011: POP
29012: POP
// result := result ^ buildings ;
29013: LD_ADDR_VAR 0 7
29017: PUSH
29018: LD_VAR 0 7
29022: PUSH
29023: LD_VAR 0 18
29027: ADD
29028: ST_TO_ADDR
// end else
29029: GO 29172
// begin for i = 1 to personel do
29031: LD_ADDR_VAR 0 8
29035: PUSH
29036: DOUBLE
29037: LD_INT 1
29039: DEC
29040: ST_TO_ADDR
29041: LD_VAR 0 6
29045: PUSH
29046: FOR_TO
29047: IFFALSE 29170
// begin if i > 4 then
29049: LD_VAR 0 8
29053: PUSH
29054: LD_INT 4
29056: GREATER
29057: IFFALSE 29061
// break ;
29059: GO 29170
// x := personel [ i ] ;
29061: LD_ADDR_VAR 0 13
29065: PUSH
29066: LD_VAR 0 6
29070: PUSH
29071: LD_VAR 0 8
29075: ARRAY
29076: ST_TO_ADDR
// if x = - 1 then
29077: LD_VAR 0 13
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: EQUAL
29086: IFFALSE 29090
// continue ;
29088: GO 29046
// PrepareHuman ( false , i , skill ) ;
29090: LD_INT 0
29092: PPUSH
29093: LD_VAR 0 8
29097: PPUSH
29098: LD_VAR 0 4
29102: PPUSH
29103: CALL_OW 380
// un := CreateHuman ;
29107: LD_ADDR_VAR 0 14
29111: PUSH
29112: CALL_OW 44
29116: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29117: LD_VAR 0 14
29121: PPUSH
29122: LD_VAR 0 1
29126: PPUSH
29127: CALL_OW 250
29131: PPUSH
29132: LD_VAR 0 1
29136: PPUSH
29137: CALL_OW 251
29141: PPUSH
29142: LD_INT 10
29144: PPUSH
29145: LD_INT 0
29147: PPUSH
29148: CALL_OW 50
// result := result ^ un ;
29152: LD_ADDR_VAR 0 7
29156: PUSH
29157: LD_VAR 0 7
29161: PUSH
29162: LD_VAR 0 14
29166: ADD
29167: ST_TO_ADDR
// end ;
29168: GO 29046
29170: POP
29171: POP
// end ; end ;
29172: LD_VAR 0 7
29176: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29177: LD_INT 0
29179: PPUSH
29180: PPUSH
29181: PPUSH
29182: PPUSH
29183: PPUSH
29184: PPUSH
29185: PPUSH
29186: PPUSH
29187: PPUSH
29188: PPUSH
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
// result := false ;
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: LD_INT 0
29202: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29203: LD_VAR 0 1
29207: NOT
29208: PUSH
29209: LD_VAR 0 1
29213: PPUSH
29214: CALL_OW 266
29218: PUSH
29219: LD_INT 32
29221: PUSH
29222: LD_INT 33
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: IN
29229: NOT
29230: OR
29231: IFFALSE 29235
// exit ;
29233: GO 30371
// nat := GetNation ( tower ) ;
29235: LD_ADDR_VAR 0 12
29239: PUSH
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 248
29249: ST_TO_ADDR
// side := GetSide ( tower ) ;
29250: LD_ADDR_VAR 0 16
29254: PUSH
29255: LD_VAR 0 1
29259: PPUSH
29260: CALL_OW 255
29264: ST_TO_ADDR
// x := GetX ( tower ) ;
29265: LD_ADDR_VAR 0 10
29269: PUSH
29270: LD_VAR 0 1
29274: PPUSH
29275: CALL_OW 250
29279: ST_TO_ADDR
// y := GetY ( tower ) ;
29280: LD_ADDR_VAR 0 11
29284: PUSH
29285: LD_VAR 0 1
29289: PPUSH
29290: CALL_OW 251
29294: ST_TO_ADDR
// if not x or not y then
29295: LD_VAR 0 10
29299: NOT
29300: PUSH
29301: LD_VAR 0 11
29305: NOT
29306: OR
29307: IFFALSE 29311
// exit ;
29309: GO 30371
// weapon := 0 ;
29311: LD_ADDR_VAR 0 18
29315: PUSH
29316: LD_INT 0
29318: ST_TO_ADDR
// fac_list := [ ] ;
29319: LD_ADDR_VAR 0 17
29323: PUSH
29324: EMPTY
29325: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29326: LD_ADDR_VAR 0 6
29330: PUSH
29331: LD_VAR 0 1
29335: PPUSH
29336: CALL_OW 274
29340: PPUSH
29341: LD_VAR 0 2
29345: PPUSH
29346: CALL 26949 0 2
29350: PPUSH
29351: LD_INT 30
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PPUSH
29361: CALL_OW 72
29365: ST_TO_ADDR
// if not factories then
29366: LD_VAR 0 6
29370: NOT
29371: IFFALSE 29375
// exit ;
29373: GO 30371
// for i in factories do
29375: LD_ADDR_VAR 0 8
29379: PUSH
29380: LD_VAR 0 6
29384: PUSH
29385: FOR_IN
29386: IFFALSE 29411
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29388: LD_ADDR_VAR 0 17
29392: PUSH
29393: LD_VAR 0 17
29397: PUSH
29398: LD_VAR 0 8
29402: PPUSH
29403: CALL_OW 478
29407: UNION
29408: ST_TO_ADDR
29409: GO 29385
29411: POP
29412: POP
// if not fac_list then
29413: LD_VAR 0 17
29417: NOT
29418: IFFALSE 29422
// exit ;
29420: GO 30371
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29422: LD_ADDR_VAR 0 5
29426: PUSH
29427: LD_INT 4
29429: PUSH
29430: LD_INT 5
29432: PUSH
29433: LD_INT 9
29435: PUSH
29436: LD_INT 10
29438: PUSH
29439: LD_INT 6
29441: PUSH
29442: LD_INT 7
29444: PUSH
29445: LD_INT 11
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 27
29459: PUSH
29460: LD_INT 28
29462: PUSH
29463: LD_INT 26
29465: PUSH
29466: LD_INT 30
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 43
29477: PUSH
29478: LD_INT 44
29480: PUSH
29481: LD_INT 46
29483: PUSH
29484: LD_INT 45
29486: PUSH
29487: LD_INT 47
29489: PUSH
29490: LD_INT 49
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: PUSH
29506: LD_VAR 0 12
29510: ARRAY
29511: ST_TO_ADDR
// for i in list do
29512: LD_ADDR_VAR 0 8
29516: PUSH
29517: LD_VAR 0 5
29521: PUSH
29522: FOR_IN
29523: IFFALSE 29556
// if not i in fac_list then
29525: LD_VAR 0 8
29529: PUSH
29530: LD_VAR 0 17
29534: IN
29535: NOT
29536: IFFALSE 29554
// list := list diff i ;
29538: LD_ADDR_VAR 0 5
29542: PUSH
29543: LD_VAR 0 5
29547: PUSH
29548: LD_VAR 0 8
29552: DIFF
29553: ST_TO_ADDR
29554: GO 29522
29556: POP
29557: POP
// if not list then
29558: LD_VAR 0 5
29562: NOT
29563: IFFALSE 29567
// exit ;
29565: GO 30371
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29567: LD_VAR 0 12
29571: PUSH
29572: LD_INT 3
29574: EQUAL
29575: PUSH
29576: LD_INT 49
29578: PUSH
29579: LD_VAR 0 5
29583: IN
29584: AND
29585: PUSH
29586: LD_INT 31
29588: PPUSH
29589: LD_VAR 0 16
29593: PPUSH
29594: CALL_OW 321
29598: PUSH
29599: LD_INT 2
29601: EQUAL
29602: AND
29603: IFFALSE 29663
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29605: LD_INT 22
29607: PUSH
29608: LD_VAR 0 16
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 35
29619: PUSH
29620: LD_INT 49
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 91
29629: PUSH
29630: LD_VAR 0 1
29634: PUSH
29635: LD_INT 10
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL_OW 69
29652: NOT
29653: IFFALSE 29663
// weapon := ru_time_lapser ;
29655: LD_ADDR_VAR 0 18
29659: PUSH
29660: LD_INT 49
29662: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29663: LD_VAR 0 12
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: LD_INT 2
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: IN
29678: PUSH
29679: LD_INT 11
29681: PUSH
29682: LD_VAR 0 5
29686: IN
29687: PUSH
29688: LD_INT 30
29690: PUSH
29691: LD_VAR 0 5
29695: IN
29696: OR
29697: AND
29698: PUSH
29699: LD_INT 6
29701: PPUSH
29702: LD_VAR 0 16
29706: PPUSH
29707: CALL_OW 321
29711: PUSH
29712: LD_INT 2
29714: EQUAL
29715: AND
29716: IFFALSE 29881
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29718: LD_INT 22
29720: PUSH
29721: LD_VAR 0 16
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 35
29735: PUSH
29736: LD_INT 11
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 35
29745: PUSH
29746: LD_INT 30
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 91
29760: PUSH
29761: LD_VAR 0 1
29765: PUSH
29766: LD_INT 18
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: PPUSH
29779: CALL_OW 69
29783: NOT
29784: PUSH
29785: LD_INT 22
29787: PUSH
29788: LD_VAR 0 16
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: LD_INT 30
29802: PUSH
29803: LD_INT 32
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 30
29812: PUSH
29813: LD_INT 33
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 91
29827: PUSH
29828: LD_VAR 0 1
29832: PUSH
29833: LD_INT 12
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: PPUSH
29849: CALL_OW 69
29853: PUSH
29854: LD_INT 2
29856: GREATER
29857: AND
29858: IFFALSE 29881
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29860: LD_ADDR_VAR 0 18
29864: PUSH
29865: LD_INT 11
29867: PUSH
29868: LD_INT 30
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_VAR 0 12
29879: ARRAY
29880: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29881: LD_VAR 0 18
29885: NOT
29886: PUSH
29887: LD_INT 40
29889: PPUSH
29890: LD_VAR 0 16
29894: PPUSH
29895: CALL_OW 321
29899: PUSH
29900: LD_INT 2
29902: EQUAL
29903: AND
29904: PUSH
29905: LD_INT 7
29907: PUSH
29908: LD_VAR 0 5
29912: IN
29913: PUSH
29914: LD_INT 28
29916: PUSH
29917: LD_VAR 0 5
29921: IN
29922: OR
29923: PUSH
29924: LD_INT 45
29926: PUSH
29927: LD_VAR 0 5
29931: IN
29932: OR
29933: AND
29934: IFFALSE 30188
// begin hex := GetHexInfo ( x , y ) ;
29936: LD_ADDR_VAR 0 4
29940: PUSH
29941: LD_VAR 0 10
29945: PPUSH
29946: LD_VAR 0 11
29950: PPUSH
29951: CALL_OW 546
29955: ST_TO_ADDR
// if hex [ 1 ] then
29956: LD_VAR 0 4
29960: PUSH
29961: LD_INT 1
29963: ARRAY
29964: IFFALSE 29968
// exit ;
29966: GO 30371
// height := hex [ 2 ] ;
29968: LD_ADDR_VAR 0 15
29972: PUSH
29973: LD_VAR 0 4
29977: PUSH
29978: LD_INT 2
29980: ARRAY
29981: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29982: LD_ADDR_VAR 0 14
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: LD_INT 2
29992: PUSH
29993: LD_INT 3
29995: PUSH
29996: LD_INT 5
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: ST_TO_ADDR
// for i in tmp do
30005: LD_ADDR_VAR 0 8
30009: PUSH
30010: LD_VAR 0 14
30014: PUSH
30015: FOR_IN
30016: IFFALSE 30186
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30018: LD_ADDR_VAR 0 9
30022: PUSH
30023: LD_VAR 0 10
30027: PPUSH
30028: LD_VAR 0 8
30032: PPUSH
30033: LD_INT 5
30035: PPUSH
30036: CALL_OW 272
30040: PUSH
30041: LD_VAR 0 11
30045: PPUSH
30046: LD_VAR 0 8
30050: PPUSH
30051: LD_INT 5
30053: PPUSH
30054: CALL_OW 273
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30063: LD_VAR 0 9
30067: PUSH
30068: LD_INT 1
30070: ARRAY
30071: PPUSH
30072: LD_VAR 0 9
30076: PUSH
30077: LD_INT 2
30079: ARRAY
30080: PPUSH
30081: CALL_OW 488
30085: IFFALSE 30184
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30087: LD_ADDR_VAR 0 4
30091: PUSH
30092: LD_VAR 0 9
30096: PUSH
30097: LD_INT 1
30099: ARRAY
30100: PPUSH
30101: LD_VAR 0 9
30105: PUSH
30106: LD_INT 2
30108: ARRAY
30109: PPUSH
30110: CALL_OW 546
30114: ST_TO_ADDR
// if hex [ 1 ] then
30115: LD_VAR 0 4
30119: PUSH
30120: LD_INT 1
30122: ARRAY
30123: IFFALSE 30127
// continue ;
30125: GO 30015
// h := hex [ 2 ] ;
30127: LD_ADDR_VAR 0 13
30131: PUSH
30132: LD_VAR 0 4
30136: PUSH
30137: LD_INT 2
30139: ARRAY
30140: ST_TO_ADDR
// if h + 7 < height then
30141: LD_VAR 0 13
30145: PUSH
30146: LD_INT 7
30148: PLUS
30149: PUSH
30150: LD_VAR 0 15
30154: LESS
30155: IFFALSE 30184
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30157: LD_ADDR_VAR 0 18
30161: PUSH
30162: LD_INT 7
30164: PUSH
30165: LD_INT 28
30167: PUSH
30168: LD_INT 45
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: LIST
30175: PUSH
30176: LD_VAR 0 12
30180: ARRAY
30181: ST_TO_ADDR
// break ;
30182: GO 30186
// end ; end ; end ;
30184: GO 30015
30186: POP
30187: POP
// end ; if not weapon then
30188: LD_VAR 0 18
30192: NOT
30193: IFFALSE 30253
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30195: LD_ADDR_VAR 0 5
30199: PUSH
30200: LD_VAR 0 5
30204: PUSH
30205: LD_INT 11
30207: PUSH
30208: LD_INT 30
30210: PUSH
30211: LD_INT 49
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: DIFF
30219: ST_TO_ADDR
// if not list then
30220: LD_VAR 0 5
30224: NOT
30225: IFFALSE 30229
// exit ;
30227: GO 30371
// weapon := list [ rand ( 1 , list ) ] ;
30229: LD_ADDR_VAR 0 18
30233: PUSH
30234: LD_VAR 0 5
30238: PUSH
30239: LD_INT 1
30241: PPUSH
30242: LD_VAR 0 5
30246: PPUSH
30247: CALL_OW 12
30251: ARRAY
30252: ST_TO_ADDR
// end ; if weapon then
30253: LD_VAR 0 18
30257: IFFALSE 30371
// begin tmp := CostOfWeapon ( weapon ) ;
30259: LD_ADDR_VAR 0 14
30263: PUSH
30264: LD_VAR 0 18
30268: PPUSH
30269: CALL_OW 451
30273: ST_TO_ADDR
// j := GetBase ( tower ) ;
30274: LD_ADDR_VAR 0 9
30278: PUSH
30279: LD_VAR 0 1
30283: PPUSH
30284: CALL_OW 274
30288: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30289: LD_VAR 0 9
30293: PPUSH
30294: LD_INT 1
30296: PPUSH
30297: CALL_OW 275
30301: PUSH
30302: LD_VAR 0 14
30306: PUSH
30307: LD_INT 1
30309: ARRAY
30310: GREATEREQUAL
30311: PUSH
30312: LD_VAR 0 9
30316: PPUSH
30317: LD_INT 2
30319: PPUSH
30320: CALL_OW 275
30324: PUSH
30325: LD_VAR 0 14
30329: PUSH
30330: LD_INT 2
30332: ARRAY
30333: GREATEREQUAL
30334: AND
30335: PUSH
30336: LD_VAR 0 9
30340: PPUSH
30341: LD_INT 3
30343: PPUSH
30344: CALL_OW 275
30348: PUSH
30349: LD_VAR 0 14
30353: PUSH
30354: LD_INT 3
30356: ARRAY
30357: GREATEREQUAL
30358: AND
30359: IFFALSE 30371
// result := weapon ;
30361: LD_ADDR_VAR 0 3
30365: PUSH
30366: LD_VAR 0 18
30370: ST_TO_ADDR
// end ; end ;
30371: LD_VAR 0 3
30375: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30376: LD_INT 0
30378: PPUSH
30379: PPUSH
// result := true ;
30380: LD_ADDR_VAR 0 3
30384: PUSH
30385: LD_INT 1
30387: ST_TO_ADDR
// if array1 = array2 then
30388: LD_VAR 0 1
30392: PUSH
30393: LD_VAR 0 2
30397: EQUAL
30398: IFFALSE 30458
// begin for i = 1 to array1 do
30400: LD_ADDR_VAR 0 4
30404: PUSH
30405: DOUBLE
30406: LD_INT 1
30408: DEC
30409: ST_TO_ADDR
30410: LD_VAR 0 1
30414: PUSH
30415: FOR_TO
30416: IFFALSE 30454
// if array1 [ i ] <> array2 [ i ] then
30418: LD_VAR 0 1
30422: PUSH
30423: LD_VAR 0 4
30427: ARRAY
30428: PUSH
30429: LD_VAR 0 2
30433: PUSH
30434: LD_VAR 0 4
30438: ARRAY
30439: NONEQUAL
30440: IFFALSE 30452
// begin result := false ;
30442: LD_ADDR_VAR 0 3
30446: PUSH
30447: LD_INT 0
30449: ST_TO_ADDR
// break ;
30450: GO 30454
// end ;
30452: GO 30415
30454: POP
30455: POP
// end else
30456: GO 30466
// result := false ;
30458: LD_ADDR_VAR 0 3
30462: PUSH
30463: LD_INT 0
30465: ST_TO_ADDR
// end ;
30466: LD_VAR 0 3
30470: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30471: LD_INT 0
30473: PPUSH
30474: PPUSH
30475: PPUSH
// pom := GetBase ( fac ) ;
30476: LD_ADDR_VAR 0 5
30480: PUSH
30481: LD_VAR 0 1
30485: PPUSH
30486: CALL_OW 274
30490: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30491: LD_ADDR_VAR 0 4
30495: PUSH
30496: LD_VAR 0 2
30500: PUSH
30501: LD_INT 1
30503: ARRAY
30504: PPUSH
30505: LD_VAR 0 2
30509: PUSH
30510: LD_INT 2
30512: ARRAY
30513: PPUSH
30514: LD_VAR 0 2
30518: PUSH
30519: LD_INT 3
30521: ARRAY
30522: PPUSH
30523: LD_VAR 0 2
30527: PUSH
30528: LD_INT 4
30530: ARRAY
30531: PPUSH
30532: CALL_OW 449
30536: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30537: LD_ADDR_VAR 0 3
30541: PUSH
30542: LD_VAR 0 5
30546: PPUSH
30547: LD_INT 1
30549: PPUSH
30550: CALL_OW 275
30554: PUSH
30555: LD_VAR 0 4
30559: PUSH
30560: LD_INT 1
30562: ARRAY
30563: GREATEREQUAL
30564: PUSH
30565: LD_VAR 0 5
30569: PPUSH
30570: LD_INT 2
30572: PPUSH
30573: CALL_OW 275
30577: PUSH
30578: LD_VAR 0 4
30582: PUSH
30583: LD_INT 2
30585: ARRAY
30586: GREATEREQUAL
30587: AND
30588: PUSH
30589: LD_VAR 0 5
30593: PPUSH
30594: LD_INT 3
30596: PPUSH
30597: CALL_OW 275
30601: PUSH
30602: LD_VAR 0 4
30606: PUSH
30607: LD_INT 3
30609: ARRAY
30610: GREATEREQUAL
30611: AND
30612: ST_TO_ADDR
// end ;
30613: LD_VAR 0 3
30617: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30618: LD_INT 0
30620: PPUSH
30621: PPUSH
30622: PPUSH
30623: PPUSH
// pom := GetBase ( building ) ;
30624: LD_ADDR_VAR 0 3
30628: PUSH
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL_OW 274
30638: ST_TO_ADDR
// if not pom then
30639: LD_VAR 0 3
30643: NOT
30644: IFFALSE 30648
// exit ;
30646: GO 30818
// btype := GetBType ( building ) ;
30648: LD_ADDR_VAR 0 5
30652: PUSH
30653: LD_VAR 0 1
30657: PPUSH
30658: CALL_OW 266
30662: ST_TO_ADDR
// if btype = b_armoury then
30663: LD_VAR 0 5
30667: PUSH
30668: LD_INT 4
30670: EQUAL
30671: IFFALSE 30681
// btype := b_barracks ;
30673: LD_ADDR_VAR 0 5
30677: PUSH
30678: LD_INT 5
30680: ST_TO_ADDR
// if btype = b_depot then
30681: LD_VAR 0 5
30685: PUSH
30686: LD_INT 0
30688: EQUAL
30689: IFFALSE 30699
// btype := b_warehouse ;
30691: LD_ADDR_VAR 0 5
30695: PUSH
30696: LD_INT 1
30698: ST_TO_ADDR
// if btype = b_workshop then
30699: LD_VAR 0 5
30703: PUSH
30704: LD_INT 2
30706: EQUAL
30707: IFFALSE 30717
// btype := b_factory ;
30709: LD_ADDR_VAR 0 5
30713: PUSH
30714: LD_INT 3
30716: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30717: LD_ADDR_VAR 0 4
30721: PUSH
30722: LD_VAR 0 5
30726: PPUSH
30727: LD_VAR 0 1
30731: PPUSH
30732: CALL_OW 248
30736: PPUSH
30737: CALL_OW 450
30741: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30742: LD_ADDR_VAR 0 2
30746: PUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: LD_INT 1
30754: PPUSH
30755: CALL_OW 275
30759: PUSH
30760: LD_VAR 0 4
30764: PUSH
30765: LD_INT 1
30767: ARRAY
30768: GREATEREQUAL
30769: PUSH
30770: LD_VAR 0 3
30774: PPUSH
30775: LD_INT 2
30777: PPUSH
30778: CALL_OW 275
30782: PUSH
30783: LD_VAR 0 4
30787: PUSH
30788: LD_INT 2
30790: ARRAY
30791: GREATEREQUAL
30792: AND
30793: PUSH
30794: LD_VAR 0 3
30798: PPUSH
30799: LD_INT 3
30801: PPUSH
30802: CALL_OW 275
30806: PUSH
30807: LD_VAR 0 4
30811: PUSH
30812: LD_INT 3
30814: ARRAY
30815: GREATEREQUAL
30816: AND
30817: ST_TO_ADDR
// end ;
30818: LD_VAR 0 2
30822: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30823: LD_INT 0
30825: PPUSH
30826: PPUSH
30827: PPUSH
// pom := GetBase ( building ) ;
30828: LD_ADDR_VAR 0 4
30832: PUSH
30833: LD_VAR 0 1
30837: PPUSH
30838: CALL_OW 274
30842: ST_TO_ADDR
// if not pom then
30843: LD_VAR 0 4
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 30953
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30852: LD_ADDR_VAR 0 5
30856: PUSH
30857: LD_VAR 0 2
30861: PPUSH
30862: LD_VAR 0 1
30866: PPUSH
30867: CALL_OW 248
30871: PPUSH
30872: CALL_OW 450
30876: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30877: LD_ADDR_VAR 0 3
30881: PUSH
30882: LD_VAR 0 4
30886: PPUSH
30887: LD_INT 1
30889: PPUSH
30890: CALL_OW 275
30894: PUSH
30895: LD_VAR 0 5
30899: PUSH
30900: LD_INT 1
30902: ARRAY
30903: GREATEREQUAL
30904: PUSH
30905: LD_VAR 0 4
30909: PPUSH
30910: LD_INT 2
30912: PPUSH
30913: CALL_OW 275
30917: PUSH
30918: LD_VAR 0 5
30922: PUSH
30923: LD_INT 2
30925: ARRAY
30926: GREATEREQUAL
30927: AND
30928: PUSH
30929: LD_VAR 0 4
30933: PPUSH
30934: LD_INT 3
30936: PPUSH
30937: CALL_OW 275
30941: PUSH
30942: LD_VAR 0 5
30946: PUSH
30947: LD_INT 3
30949: ARRAY
30950: GREATEREQUAL
30951: AND
30952: ST_TO_ADDR
// end ;
30953: LD_VAR 0 3
30957: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
30958: LD_INT 0
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
30964: PPUSH
30965: PPUSH
30966: PPUSH
30967: PPUSH
30968: PPUSH
30969: PPUSH
// result := false ;
30970: LD_ADDR_VAR 0 6
30974: PUSH
30975: LD_INT 0
30977: ST_TO_ADDR
// if not base or not btype or not x or not y then
30978: LD_VAR 0 1
30982: NOT
30983: PUSH
30984: LD_VAR 0 2
30988: NOT
30989: OR
30990: PUSH
30991: LD_VAR 0 3
30995: NOT
30996: OR
30997: PUSH
30998: LD_VAR 0 4
31002: NOT
31003: OR
31004: IFFALSE 31008
// exit ;
31006: GO 31617
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31008: LD_ADDR_VAR 0 12
31012: PUSH
31013: LD_VAR 0 2
31017: PPUSH
31018: LD_VAR 0 3
31022: PPUSH
31023: LD_VAR 0 4
31027: PPUSH
31028: LD_VAR 0 5
31032: PPUSH
31033: LD_VAR 0 1
31037: PUSH
31038: LD_INT 1
31040: ARRAY
31041: PPUSH
31042: CALL_OW 248
31046: PPUSH
31047: LD_INT 0
31049: PPUSH
31050: CALL 32454 0 6
31054: ST_TO_ADDR
// if not hexes then
31055: LD_VAR 0 12
31059: NOT
31060: IFFALSE 31064
// exit ;
31062: GO 31617
// for i = 1 to hexes do
31064: LD_ADDR_VAR 0 7
31068: PUSH
31069: DOUBLE
31070: LD_INT 1
31072: DEC
31073: ST_TO_ADDR
31074: LD_VAR 0 12
31078: PUSH
31079: FOR_TO
31080: IFFALSE 31615
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31082: LD_ADDR_VAR 0 11
31086: PUSH
31087: LD_VAR 0 12
31091: PUSH
31092: LD_VAR 0 7
31096: ARRAY
31097: PUSH
31098: LD_INT 1
31100: ARRAY
31101: PPUSH
31102: LD_VAR 0 12
31106: PUSH
31107: LD_VAR 0 7
31111: ARRAY
31112: PUSH
31113: LD_INT 2
31115: ARRAY
31116: PPUSH
31117: CALL_OW 428
31121: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31122: LD_VAR 0 12
31126: PUSH
31127: LD_VAR 0 7
31131: ARRAY
31132: PUSH
31133: LD_INT 1
31135: ARRAY
31136: PPUSH
31137: LD_VAR 0 12
31141: PUSH
31142: LD_VAR 0 7
31146: ARRAY
31147: PUSH
31148: LD_INT 2
31150: ARRAY
31151: PPUSH
31152: CALL_OW 351
31156: PUSH
31157: LD_VAR 0 12
31161: PUSH
31162: LD_VAR 0 7
31166: ARRAY
31167: PUSH
31168: LD_INT 1
31170: ARRAY
31171: PPUSH
31172: LD_VAR 0 12
31176: PUSH
31177: LD_VAR 0 7
31181: ARRAY
31182: PUSH
31183: LD_INT 2
31185: ARRAY
31186: PPUSH
31187: CALL_OW 488
31191: NOT
31192: OR
31193: PUSH
31194: LD_VAR 0 11
31198: PPUSH
31199: CALL_OW 247
31203: PUSH
31204: LD_INT 3
31206: EQUAL
31207: OR
31208: IFFALSE 31214
// exit ;
31210: POP
31211: POP
31212: GO 31617
// if not tmp or not tmp in base then
31214: LD_VAR 0 11
31218: NOT
31219: PUSH
31220: LD_VAR 0 11
31224: PUSH
31225: LD_VAR 0 1
31229: IN
31230: NOT
31231: OR
31232: IFFALSE 31236
// continue ;
31234: GO 31079
// result := true ;
31236: LD_ADDR_VAR 0 6
31240: PUSH
31241: LD_INT 1
31243: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31244: LD_ADDR_VAR 0 15
31248: PUSH
31249: LD_VAR 0 1
31253: PPUSH
31254: LD_INT 22
31256: PUSH
31257: LD_VAR 0 11
31261: PPUSH
31262: CALL_OW 255
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 30
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 30
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PPUSH
31303: CALL_OW 72
31307: ST_TO_ADDR
// if dep then
31308: LD_VAR 0 15
31312: IFFALSE 31448
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31314: LD_ADDR_VAR 0 14
31318: PUSH
31319: LD_VAR 0 15
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: PPUSH
31328: CALL_OW 250
31332: PPUSH
31333: LD_VAR 0 15
31337: PUSH
31338: LD_INT 1
31340: ARRAY
31341: PPUSH
31342: CALL_OW 254
31346: PPUSH
31347: LD_INT 5
31349: PPUSH
31350: CALL_OW 272
31354: PUSH
31355: LD_VAR 0 15
31359: PUSH
31360: LD_INT 1
31362: ARRAY
31363: PPUSH
31364: CALL_OW 251
31368: PPUSH
31369: LD_VAR 0 15
31373: PUSH
31374: LD_INT 1
31376: ARRAY
31377: PPUSH
31378: CALL_OW 254
31382: PPUSH
31383: LD_INT 5
31385: PPUSH
31386: CALL_OW 273
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31395: LD_VAR 0 14
31399: PUSH
31400: LD_INT 1
31402: ARRAY
31403: PPUSH
31404: LD_VAR 0 14
31408: PUSH
31409: LD_INT 2
31411: ARRAY
31412: PPUSH
31413: CALL_OW 488
31417: IFFALSE 31448
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31419: LD_VAR 0 11
31423: PPUSH
31424: LD_VAR 0 14
31428: PUSH
31429: LD_INT 1
31431: ARRAY
31432: PPUSH
31433: LD_VAR 0 14
31437: PUSH
31438: LD_INT 2
31440: ARRAY
31441: PPUSH
31442: CALL_OW 111
// continue ;
31446: GO 31079
// end ; end ; r := GetDir ( tmp ) ;
31448: LD_ADDR_VAR 0 13
31452: PUSH
31453: LD_VAR 0 11
31457: PPUSH
31458: CALL_OW 254
31462: ST_TO_ADDR
// if r = 5 then
31463: LD_VAR 0 13
31467: PUSH
31468: LD_INT 5
31470: EQUAL
31471: IFFALSE 31481
// r := 0 ;
31473: LD_ADDR_VAR 0 13
31477: PUSH
31478: LD_INT 0
31480: ST_TO_ADDR
// for j = r to 5 do
31481: LD_ADDR_VAR 0 8
31485: PUSH
31486: DOUBLE
31487: LD_VAR 0 13
31491: DEC
31492: ST_TO_ADDR
31493: LD_INT 5
31495: PUSH
31496: FOR_TO
31497: IFFALSE 31611
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31499: LD_ADDR_VAR 0 9
31503: PUSH
31504: LD_VAR 0 11
31508: PPUSH
31509: CALL_OW 250
31513: PPUSH
31514: LD_VAR 0 8
31518: PPUSH
31519: LD_INT 2
31521: PPUSH
31522: CALL_OW 272
31526: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31527: LD_ADDR_VAR 0 10
31531: PUSH
31532: LD_VAR 0 11
31536: PPUSH
31537: CALL_OW 251
31541: PPUSH
31542: LD_VAR 0 8
31546: PPUSH
31547: LD_INT 2
31549: PPUSH
31550: CALL_OW 273
31554: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31555: LD_VAR 0 9
31559: PPUSH
31560: LD_VAR 0 10
31564: PPUSH
31565: CALL_OW 488
31569: PUSH
31570: LD_VAR 0 9
31574: PPUSH
31575: LD_VAR 0 10
31579: PPUSH
31580: CALL_OW 428
31584: NOT
31585: AND
31586: IFFALSE 31609
// begin ComMoveXY ( tmp , _x , _y ) ;
31588: LD_VAR 0 11
31592: PPUSH
31593: LD_VAR 0 9
31597: PPUSH
31598: LD_VAR 0 10
31602: PPUSH
31603: CALL_OW 111
// break ;
31607: GO 31611
// end ; end ;
31609: GO 31496
31611: POP
31612: POP
// end ;
31613: GO 31079
31615: POP
31616: POP
// end ;
31617: LD_VAR 0 6
31621: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31622: LD_INT 0
31624: PPUSH
31625: PPUSH
31626: PPUSH
31627: PPUSH
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
// result := false ;
31634: LD_ADDR_VAR 0 6
31638: PUSH
31639: LD_INT 0
31641: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31642: LD_VAR 0 1
31646: NOT
31647: PUSH
31648: LD_VAR 0 1
31652: PPUSH
31653: CALL_OW 266
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: IN
31668: NOT
31669: OR
31670: PUSH
31671: LD_VAR 0 2
31675: NOT
31676: OR
31677: PUSH
31678: LD_VAR 0 5
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: LD_INT 1
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: LD_INT 3
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 5
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: IN
31709: NOT
31710: OR
31711: PUSH
31712: LD_VAR 0 3
31716: PPUSH
31717: LD_VAR 0 4
31721: PPUSH
31722: CALL_OW 488
31726: NOT
31727: OR
31728: IFFALSE 31732
// exit ;
31730: GO 32449
// pom := GetBase ( depot ) ;
31732: LD_ADDR_VAR 0 10
31736: PUSH
31737: LD_VAR 0 1
31741: PPUSH
31742: CALL_OW 274
31746: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31747: LD_ADDR_VAR 0 11
31751: PUSH
31752: LD_VAR 0 2
31756: PPUSH
31757: LD_VAR 0 1
31761: PPUSH
31762: CALL_OW 248
31766: PPUSH
31767: CALL_OW 450
31771: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31772: LD_VAR 0 10
31776: PPUSH
31777: LD_INT 1
31779: PPUSH
31780: CALL_OW 275
31784: PUSH
31785: LD_VAR 0 11
31789: PUSH
31790: LD_INT 1
31792: ARRAY
31793: GREATEREQUAL
31794: PUSH
31795: LD_VAR 0 10
31799: PPUSH
31800: LD_INT 2
31802: PPUSH
31803: CALL_OW 275
31807: PUSH
31808: LD_VAR 0 11
31812: PUSH
31813: LD_INT 2
31815: ARRAY
31816: GREATEREQUAL
31817: AND
31818: PUSH
31819: LD_VAR 0 10
31823: PPUSH
31824: LD_INT 3
31826: PPUSH
31827: CALL_OW 275
31831: PUSH
31832: LD_VAR 0 11
31836: PUSH
31837: LD_INT 3
31839: ARRAY
31840: GREATEREQUAL
31841: AND
31842: NOT
31843: IFFALSE 31847
// exit ;
31845: GO 32449
// if GetBType ( depot ) = b_depot then
31847: LD_VAR 0 1
31851: PPUSH
31852: CALL_OW 266
31856: PUSH
31857: LD_INT 0
31859: EQUAL
31860: IFFALSE 31872
// dist := 28 else
31862: LD_ADDR_VAR 0 14
31866: PUSH
31867: LD_INT 28
31869: ST_TO_ADDR
31870: GO 31880
// dist := 36 ;
31872: LD_ADDR_VAR 0 14
31876: PUSH
31877: LD_INT 36
31879: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31880: LD_VAR 0 1
31884: PPUSH
31885: LD_VAR 0 3
31889: PPUSH
31890: LD_VAR 0 4
31894: PPUSH
31895: CALL_OW 297
31899: PUSH
31900: LD_VAR 0 14
31904: GREATER
31905: IFFALSE 31909
// exit ;
31907: GO 32449
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31909: LD_ADDR_VAR 0 12
31913: PUSH
31914: LD_VAR 0 2
31918: PPUSH
31919: LD_VAR 0 3
31923: PPUSH
31924: LD_VAR 0 4
31928: PPUSH
31929: LD_VAR 0 5
31933: PPUSH
31934: LD_VAR 0 1
31938: PPUSH
31939: CALL_OW 248
31943: PPUSH
31944: LD_INT 0
31946: PPUSH
31947: CALL 32454 0 6
31951: ST_TO_ADDR
// if not hexes then
31952: LD_VAR 0 12
31956: NOT
31957: IFFALSE 31961
// exit ;
31959: GO 32449
// hex := GetHexInfo ( x , y ) ;
31961: LD_ADDR_VAR 0 15
31965: PUSH
31966: LD_VAR 0 3
31970: PPUSH
31971: LD_VAR 0 4
31975: PPUSH
31976: CALL_OW 546
31980: ST_TO_ADDR
// if hex [ 1 ] then
31981: LD_VAR 0 15
31985: PUSH
31986: LD_INT 1
31988: ARRAY
31989: IFFALSE 31993
// exit ;
31991: GO 32449
// height := hex [ 2 ] ;
31993: LD_ADDR_VAR 0 13
31997: PUSH
31998: LD_VAR 0 15
32002: PUSH
32003: LD_INT 2
32005: ARRAY
32006: ST_TO_ADDR
// for i = 1 to hexes do
32007: LD_ADDR_VAR 0 7
32011: PUSH
32012: DOUBLE
32013: LD_INT 1
32015: DEC
32016: ST_TO_ADDR
32017: LD_VAR 0 12
32021: PUSH
32022: FOR_TO
32023: IFFALSE 32353
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32025: LD_VAR 0 12
32029: PUSH
32030: LD_VAR 0 7
32034: ARRAY
32035: PUSH
32036: LD_INT 1
32038: ARRAY
32039: PPUSH
32040: LD_VAR 0 12
32044: PUSH
32045: LD_VAR 0 7
32049: ARRAY
32050: PUSH
32051: LD_INT 2
32053: ARRAY
32054: PPUSH
32055: CALL_OW 488
32059: NOT
32060: PUSH
32061: LD_VAR 0 12
32065: PUSH
32066: LD_VAR 0 7
32070: ARRAY
32071: PUSH
32072: LD_INT 1
32074: ARRAY
32075: PPUSH
32076: LD_VAR 0 12
32080: PUSH
32081: LD_VAR 0 7
32085: ARRAY
32086: PUSH
32087: LD_INT 2
32089: ARRAY
32090: PPUSH
32091: CALL_OW 428
32095: PUSH
32096: LD_INT 0
32098: GREATER
32099: OR
32100: PUSH
32101: LD_VAR 0 12
32105: PUSH
32106: LD_VAR 0 7
32110: ARRAY
32111: PUSH
32112: LD_INT 1
32114: ARRAY
32115: PPUSH
32116: LD_VAR 0 12
32120: PUSH
32121: LD_VAR 0 7
32125: ARRAY
32126: PUSH
32127: LD_INT 2
32129: ARRAY
32130: PPUSH
32131: CALL_OW 351
32135: OR
32136: IFFALSE 32142
// exit ;
32138: POP
32139: POP
32140: GO 32449
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32142: LD_ADDR_VAR 0 8
32146: PUSH
32147: LD_VAR 0 12
32151: PUSH
32152: LD_VAR 0 7
32156: ARRAY
32157: PUSH
32158: LD_INT 1
32160: ARRAY
32161: PPUSH
32162: LD_VAR 0 12
32166: PUSH
32167: LD_VAR 0 7
32171: ARRAY
32172: PUSH
32173: LD_INT 2
32175: ARRAY
32176: PPUSH
32177: CALL_OW 546
32181: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32182: LD_VAR 0 8
32186: PUSH
32187: LD_INT 1
32189: ARRAY
32190: PUSH
32191: LD_VAR 0 8
32195: PUSH
32196: LD_INT 2
32198: ARRAY
32199: PUSH
32200: LD_VAR 0 13
32204: PUSH
32205: LD_INT 2
32207: PLUS
32208: GREATER
32209: OR
32210: PUSH
32211: LD_VAR 0 8
32215: PUSH
32216: LD_INT 2
32218: ARRAY
32219: PUSH
32220: LD_VAR 0 13
32224: PUSH
32225: LD_INT 2
32227: MINUS
32228: LESS
32229: OR
32230: PUSH
32231: LD_VAR 0 8
32235: PUSH
32236: LD_INT 3
32238: ARRAY
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 8
32245: PUSH
32246: LD_INT 9
32248: PUSH
32249: LD_INT 10
32251: PUSH
32252: LD_INT 11
32254: PUSH
32255: LD_INT 12
32257: PUSH
32258: LD_INT 13
32260: PUSH
32261: LD_INT 16
32263: PUSH
32264: LD_INT 17
32266: PUSH
32267: LD_INT 18
32269: PUSH
32270: LD_INT 19
32272: PUSH
32273: LD_INT 20
32275: PUSH
32276: LD_INT 21
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: IN
32294: NOT
32295: OR
32296: PUSH
32297: LD_VAR 0 8
32301: PUSH
32302: LD_INT 5
32304: ARRAY
32305: NOT
32306: OR
32307: PUSH
32308: LD_VAR 0 8
32312: PUSH
32313: LD_INT 6
32315: ARRAY
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: LD_INT 7
32325: PUSH
32326: LD_INT 9
32328: PUSH
32329: LD_INT 10
32331: PUSH
32332: LD_INT 11
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: IN
32343: NOT
32344: OR
32345: IFFALSE 32351
// exit ;
32347: POP
32348: POP
32349: GO 32449
// end ;
32351: GO 32022
32353: POP
32354: POP
// side := GetSide ( depot ) ;
32355: LD_ADDR_VAR 0 9
32359: PUSH
32360: LD_VAR 0 1
32364: PPUSH
32365: CALL_OW 255
32369: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32370: LD_VAR 0 9
32374: PPUSH
32375: LD_VAR 0 3
32379: PPUSH
32380: LD_VAR 0 4
32384: PPUSH
32385: LD_INT 20
32387: PPUSH
32388: CALL 25103 0 4
32392: PUSH
32393: LD_INT 4
32395: ARRAY
32396: IFFALSE 32400
// exit ;
32398: GO 32449
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32400: LD_VAR 0 2
32404: PUSH
32405: LD_INT 29
32407: PUSH
32408: LD_INT 30
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: IN
32415: PUSH
32416: LD_VAR 0 3
32420: PPUSH
32421: LD_VAR 0 4
32425: PPUSH
32426: LD_VAR 0 9
32430: PPUSH
32431: CALL_OW 440
32435: NOT
32436: AND
32437: IFFALSE 32441
// exit ;
32439: GO 32449
// result := true ;
32441: LD_ADDR_VAR 0 6
32445: PUSH
32446: LD_INT 1
32448: ST_TO_ADDR
// end ;
32449: LD_VAR 0 6
32453: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32454: LD_INT 0
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
32498: PPUSH
32499: PPUSH
32500: PPUSH
32501: PPUSH
32502: PPUSH
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
32509: PPUSH
32510: PPUSH
32511: PPUSH
32512: PPUSH
32513: PPUSH
// result = [ ] ;
32514: LD_ADDR_VAR 0 7
32518: PUSH
32519: EMPTY
32520: ST_TO_ADDR
// temp_list = [ ] ;
32521: LD_ADDR_VAR 0 9
32525: PUSH
32526: EMPTY
32527: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32528: LD_VAR 0 4
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 3
32544: PUSH
32545: LD_INT 4
32547: PUSH
32548: LD_INT 5
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: IN
32559: NOT
32560: PUSH
32561: LD_VAR 0 1
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: IN
32576: PUSH
32577: LD_VAR 0 5
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 3
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: LIST
32595: IN
32596: NOT
32597: AND
32598: OR
32599: IFFALSE 32603
// exit ;
32601: GO 50994
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32603: LD_VAR 0 1
32607: PUSH
32608: LD_INT 6
32610: PUSH
32611: LD_INT 7
32613: PUSH
32614: LD_INT 8
32616: PUSH
32617: LD_INT 13
32619: PUSH
32620: LD_INT 12
32622: PUSH
32623: LD_INT 15
32625: PUSH
32626: LD_INT 11
32628: PUSH
32629: LD_INT 14
32631: PUSH
32632: LD_INT 10
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: IN
32646: IFFALSE 32656
// btype = b_lab ;
32648: LD_ADDR_VAR 0 1
32652: PUSH
32653: LD_INT 6
32655: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32656: LD_VAR 0 6
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: LD_INT 2
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: IN
32675: NOT
32676: PUSH
32677: LD_VAR 0 1
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: LD_INT 3
32693: PUSH
32694: LD_INT 6
32696: PUSH
32697: LD_INT 36
32699: PUSH
32700: LD_INT 4
32702: PUSH
32703: LD_INT 5
32705: PUSH
32706: LD_INT 31
32708: PUSH
32709: LD_INT 32
32711: PUSH
32712: LD_INT 33
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: IN
32728: NOT
32729: PUSH
32730: LD_VAR 0 6
32734: PUSH
32735: LD_INT 1
32737: EQUAL
32738: AND
32739: OR
32740: PUSH
32741: LD_VAR 0 1
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: LD_INT 3
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: IN
32756: NOT
32757: PUSH
32758: LD_VAR 0 6
32762: PUSH
32763: LD_INT 2
32765: EQUAL
32766: AND
32767: OR
32768: IFFALSE 32778
// mode = 0 ;
32770: LD_ADDR_VAR 0 6
32774: PUSH
32775: LD_INT 0
32777: ST_TO_ADDR
// case mode of 0 :
32778: LD_VAR 0 6
32782: PUSH
32783: LD_INT 0
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 44244
32791: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32792: LD_ADDR_VAR 0 11
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: LD_INT 3
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: LD_INT 3
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32985: LD_ADDR_VAR 0 12
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 2
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: NEG
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 2
33119: NEG
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 2
33131: NEG
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 3
33142: NEG
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33181: LD_ADDR_VAR 0 13
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: NEG
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: NEG
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 2
33328: NEG
33329: PUSH
33330: LD_INT 3
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 3
33340: NEG
33341: PUSH
33342: LD_INT 2
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 3
33352: NEG
33353: PUSH
33354: LD_INT 3
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33380: LD_ADDR_VAR 0 14
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 2
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 2
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: LD_INT 1
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: LD_INT 3
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: LD_INT 3
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 2
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33576: LD_ADDR_VAR 0 15
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: NEG
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: LD_INT 1
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 2
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: NEG
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 2
33710: NEG
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 3
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33769: LD_ADDR_VAR 0 16
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: LD_INT 2
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 2
33892: NEG
33893: PUSH
33894: LD_INT 1
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: NEG
33905: PUSH
33906: LD_INT 2
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 3
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 3
33926: PUSH
33927: LD_INT 3
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: LD_INT 3
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33962: LD_ADDR_VAR 0 17
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: NEG
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: LD_INT 1
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: NEG
34044: PUSH
34045: LD_INT 2
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: LD_INT 2
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: LD_INT 2
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: LD_INT 1
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: NEG
34162: PUSH
34163: LD_INT 2
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34192: LD_ADDR_VAR 0 18
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: LD_INT 2
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 2
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: LD_INT 2
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 2
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 2
34379: NEG
34380: PUSH
34381: LD_INT 1
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 2
34391: NEG
34392: PUSH
34393: LD_INT 2
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34422: LD_ADDR_VAR 0 19
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: LD_INT 1
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: NEG
34504: PUSH
34505: LD_INT 2
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: LD_INT 2
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 2
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 2
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 2
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 2
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34652: LD_ADDR_VAR 0 20
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 2
34748: NEG
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 2
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: NEG
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: NEG
34852: PUSH
34853: LD_INT 2
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34882: LD_ADDR_VAR 0 21
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: LD_INT 2
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: LD_INT 2
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 2
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: LD_INT 2
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 2
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: NEG
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35112: LD_ADDR_VAR 0 22
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 1
35193: NEG
35194: PUSH
35195: LD_INT 2
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: LD_INT 2
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 2
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: LD_INT 1
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 2
35288: NEG
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 2
35299: NEG
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: NEG
35312: PUSH
35313: LD_INT 2
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35342: LD_ADDR_VAR 0 23
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 1
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: NEG
35424: PUSH
35425: LD_INT 2
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: LD_INT 2
35438: NEG
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 2
35518: NEG
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: NEG
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: LD_INT 3
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: LD_INT 3
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 2
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35622: LD_ADDR_VAR 0 24
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: LD_INT 2
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: LD_INT 2
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: NEG
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: LD_INT 2
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 2
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 3
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 3
35865: PUSH
35866: LD_INT 2
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35898: LD_ADDR_VAR 0 25
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: LD_INT 1
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 1
35956: NEG
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: LD_INT 2
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 2
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 3
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 3
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: LD_INT 3
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36172: LD_ADDR_VAR 0 26
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: LD_INT 1
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: LD_INT 2
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 2
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: NEG
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 2
36348: NEG
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: LD_INT 2
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: LD_INT 3
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: LD_INT 3
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: NEG
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36448: LD_ADDR_VAR 0 27
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 2
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 3
36681: NEG
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 3
36693: NEG
36694: PUSH
36695: LD_INT 2
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36728: LD_ADDR_VAR 0 28
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: NEG
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 2
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 2
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 2
36915: NEG
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: LD_INT 3
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: LD_INT 3
36955: NEG
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 3
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 3
36975: NEG
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37010: LD_ADDR_VAR 0 29
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 2
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: NEG
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: LD_INT 3
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 3
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37289: LD_ADDR_VAR 0 30
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 2
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 3
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 3
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 3
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: NEG
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 3
37532: NEG
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37567: LD_ADDR_VAR 0 31
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: LD_INT 2
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 2
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 2
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: LD_INT 2
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 3
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 3
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 2
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37845: LD_ADDR_VAR 0 32
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 2
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: LD_INT 2
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 3
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: LD_INT 2
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 3
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 3
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 3
38088: NEG
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38123: LD_ADDR_VAR 0 33
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: LD_INT 0
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: LD_INT 2
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 2
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: NEG
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: NEG
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: LD_INT 3
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 3
38367: NEG
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38402: LD_ADDR_VAR 0 34
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: LD_INT 2
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: LD_INT 2
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 2
38558: NEG
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 2
38569: NEG
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: PUSH
38595: LD_INT 3
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 2
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 3
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 3
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: NEG
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 3
38647: NEG
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38682: LD_ADDR_VAR 0 35
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: LD_INT 1
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38794: LD_ADDR_VAR 0 36
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: LD_INT 2
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38906: LD_ADDR_VAR 0 37
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39018: LD_ADDR_VAR 0 38
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39130: LD_ADDR_VAR 0 39
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 2
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39242: LD_ADDR_VAR 0 40
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39354: LD_ADDR_VAR 0 41
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: NEG
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: NEG
39533: PUSH
39534: LD_INT 2
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 2
39544: NEG
39545: PUSH
39546: LD_INT 3
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 3
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 3
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 3
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 3
39597: PUSH
39598: LD_INT 3
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: PUSH
39608: LD_INT 3
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: NEG
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: NEG
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 3
39651: NEG
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 3
39663: NEG
39664: PUSH
39665: LD_INT 3
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39704: LD_ADDR_VAR 0 42
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 0
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: LD_INT 3
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 3
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: LD_INT 3
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: LD_INT 2
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 3
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 3
39950: PUSH
39951: LD_INT 3
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 3
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 3
40001: NEG
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 3
40013: NEG
40014: PUSH
40015: LD_INT 3
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40054: LD_ADDR_VAR 0 43
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 3
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 3
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 2
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 3
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: LD_INT 3
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 3
40350: NEG
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 3
40361: NEG
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40402: LD_ADDR_VAR 0 44
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: LD_INT 3
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 3
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 3
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: LD_INT 2
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 3
40645: PUSH
40646: LD_INT 3
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 3
40676: NEG
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 3
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 3
40699: NEG
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 3
40711: NEG
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40752: LD_ADDR_VAR 0 45
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: LD_INT 3
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: LD_INT 3
40958: NEG
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 3
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 3
40988: PUSH
40989: LD_INT 2
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 3
40998: PUSH
40999: LD_INT 3
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: LD_INT 3
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 3
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 3
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 3
41061: NEG
41062: PUSH
41063: LD_INT 3
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41102: LD_ADDR_VAR 0 46
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 2
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 3
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 3
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 3
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: LD_INT 3
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 3
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 3
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41450: LD_ADDR_VAR 0 47
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: LD_INT 2
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: LD_INT 2
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: LD_INT 2
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41601: LD_ADDR_VAR 0 48
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 2
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41748: LD_ADDR_VAR 0 49
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41892: LD_ADDR_VAR 0 50
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42036: LD_ADDR_VAR 0 51
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 2
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42183: LD_ADDR_VAR 0 52
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42334: LD_ADDR_VAR 0 53
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42564: LD_ADDR_VAR 0 54
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 2
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42794: LD_ADDR_VAR 0 55
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: LD_INT 2
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43024: LD_ADDR_VAR 0 56
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 2
43200: NEG
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 2
43223: NEG
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43254: LD_ADDR_VAR 0 57
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: LD_INT 2
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43484: LD_ADDR_VAR 0 58
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 2
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43714: LD_ADDR_VAR 0 59
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43802: LD_ADDR_VAR 0 60
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43890: LD_ADDR_VAR 0 61
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43978: LD_ADDR_VAR 0 62
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44066: LD_ADDR_VAR 0 63
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44154: LD_ADDR_VAR 0 64
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: ST_TO_ADDR
// end ; 1 :
44242: GO 50139
44244: LD_INT 1
44246: DOUBLE
44247: EQUAL
44248: IFTRUE 44252
44250: GO 46875
44252: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44253: LD_ADDR_VAR 0 11
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 3
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: LIST
44296: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44297: LD_ADDR_VAR 0 12
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44338: LD_ADDR_VAR 0 13
44342: PUSH
44343: LD_INT 3
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44378: LD_ADDR_VAR 0 14
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 3
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 3
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44419: LD_ADDR_VAR 0 15
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 3
44437: NEG
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 3
44448: NEG
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44463: LD_ADDR_VAR 0 16
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: LD_INT 3
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 3
44482: NEG
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: LD_INT 3
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44509: LD_ADDR_VAR 0 17
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 3
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44553: LD_ADDR_VAR 0 18
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 3
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 3
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: LIST
44593: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44594: LD_ADDR_VAR 0 19
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 3
44611: PUSH
44612: LD_INT 3
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: LD_INT 3
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44634: LD_ADDR_VAR 0 20
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44675: LD_ADDR_VAR 0 21
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 3
44693: NEG
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 3
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: LIST
44718: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44719: LD_ADDR_VAR 0 22
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 3
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 3
44738: NEG
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44765: LD_ADDR_VAR 0 23
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 3
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 4
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: LIST
44808: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44809: LD_ADDR_VAR 0 24
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 3
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 4
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44850: LD_ADDR_VAR 0 25
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 4
44867: PUSH
44868: LD_INT 3
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 3
44877: PUSH
44878: LD_INT 4
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44890: LD_ADDR_VAR 0 26
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 4
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44931: LD_ADDR_VAR 0 27
44935: PUSH
44936: LD_INT 3
44938: NEG
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: NEG
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 4
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44975: LD_ADDR_VAR 0 28
44979: PUSH
44980: LD_INT 3
44982: NEG
44983: PUSH
44984: LD_INT 3
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 3
44994: NEG
44995: PUSH
44996: LD_INT 4
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 4
45006: NEG
45007: PUSH
45008: LD_INT 3
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: LIST
45020: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45021: LD_ADDR_VAR 0 29
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 3
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: LD_INT 4
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 4
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 5
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 5
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 4
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 6
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 6
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 5
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45176: LD_ADDR_VAR 0 30
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 3
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 4
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 4
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 4
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 5
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 5
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 5
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 6
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 6
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45319: LD_ADDR_VAR 0 31
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 4
45356: PUSH
45357: LD_INT 3
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 4
45366: PUSH
45367: LD_INT 4
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: LD_INT 4
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 5
45386: PUSH
45387: LD_INT 4
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 5
45396: PUSH
45397: LD_INT 5
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 4
45406: PUSH
45407: LD_INT 5
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 6
45416: PUSH
45417: LD_INT 5
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 6
45426: PUSH
45427: LD_INT 6
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 5
45436: PUSH
45437: LD_INT 6
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45458: LD_ADDR_VAR 0 32
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 3
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: LD_INT 4
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 4
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 3
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 5
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 5
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 4
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 6
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 6
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: LD_INT 5
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45601: LD_ADDR_VAR 0 33
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 3
45619: NEG
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 3
45630: NEG
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 3
45642: NEG
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 4
45653: NEG
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 4
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 4
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 5
45687: NEG
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 5
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 5
45710: NEG
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 6
45721: NEG
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 6
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45756: LD_ADDR_VAR 0 34
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 3
45775: NEG
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 3
45787: NEG
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 3
45799: NEG
45800: PUSH
45801: LD_INT 4
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 4
45811: NEG
45812: PUSH
45813: LD_INT 3
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 4
45823: NEG
45824: PUSH
45825: LD_INT 4
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 4
45835: NEG
45836: PUSH
45837: LD_INT 5
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 5
45847: NEG
45848: PUSH
45849: LD_INT 4
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 5
45859: NEG
45860: PUSH
45861: LD_INT 5
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 5
45871: NEG
45872: PUSH
45873: LD_INT 6
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 6
45883: NEG
45884: PUSH
45885: LD_INT 5
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 6
45895: NEG
45896: PUSH
45897: LD_INT 6
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45919: LD_ADDR_VAR 0 41
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45963: LD_ADDR_VAR 0 42
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 3
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46004: LD_ADDR_VAR 0 43
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46044: LD_ADDR_VAR 0 44
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 3
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46085: LD_ADDR_VAR 0 45
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 3
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46129: LD_ADDR_VAR 0 46
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46175: LD_ADDR_VAR 0 47
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: LD_INT 3
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 3
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46208: LD_ADDR_VAR 0 48
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46239: LD_ADDR_VAR 0 49
46243: PUSH
46244: LD_INT 3
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 3
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46268: LD_ADDR_VAR 0 50
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46297: LD_ADDR_VAR 0 51
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46328: LD_ADDR_VAR 0 52
46332: PUSH
46333: LD_INT 3
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46361: LD_ADDR_VAR 0 53
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 3
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 3
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: LIST
46404: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46405: LD_ADDR_VAR 0 54
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46446: LD_ADDR_VAR 0 55
46450: PUSH
46451: LD_INT 3
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46486: LD_ADDR_VAR 0 56
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46527: LD_ADDR_VAR 0 57
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 3
46545: NEG
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46571: LD_ADDR_VAR 0 58
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: NEG
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 3
46602: NEG
46603: PUSH
46604: LD_INT 3
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46617: LD_ADDR_VAR 0 59
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46661: LD_ADDR_VAR 0 60
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46702: LD_ADDR_VAR 0 61
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46742: LD_ADDR_VAR 0 62
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46783: LD_ADDR_VAR 0 63
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46827: LD_ADDR_VAR 0 64
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: LIST
46872: ST_TO_ADDR
// end ; 2 :
46873: GO 50139
46875: LD_INT 2
46877: DOUBLE
46878: EQUAL
46879: IFTRUE 46883
46881: GO 50138
46883: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46884: LD_ADDR_VAR 0 29
46888: PUSH
46889: LD_INT 4
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 4
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 5
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 5
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 4
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 3
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 5
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 4
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 4
47014: PUSH
47015: LD_INT 4
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 4
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 4
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: LD_INT 4
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 4
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 3
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 4
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 5
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 5
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 4
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 5
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 3
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 4
47223: NEG
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 4
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 4
47246: NEG
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 4
47269: NEG
47270: PUSH
47271: LD_INT 4
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 4
47281: NEG
47282: PUSH
47283: LD_INT 5
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: NEG
47294: PUSH
47295: LD_INT 4
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 3
47305: NEG
47306: PUSH
47307: LD_INT 3
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 4
47317: NEG
47318: PUSH
47319: LD_INT 3
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 5
47329: NEG
47330: PUSH
47331: LD_INT 4
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 5
47341: NEG
47342: PUSH
47343: LD_INT 5
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 3
47353: NEG
47354: PUSH
47355: LD_INT 5
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 5
47365: NEG
47366: PUSH
47367: LD_INT 3
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47422: LD_ADDR_VAR 0 30
47426: PUSH
47427: LD_INT 4
47429: PUSH
47430: LD_INT 4
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 4
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 5
47449: PUSH
47450: LD_INT 4
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 5
47459: PUSH
47460: LD_INT 5
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 4
47469: PUSH
47470: LD_INT 5
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: LD_INT 4
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: LD_INT 3
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 5
47499: PUSH
47500: LD_INT 3
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: LD_INT 5
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 4
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 4
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 4
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 4
47612: NEG
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 4
47623: NEG
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 4
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 5
47668: NEG
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 5
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 5
47691: NEG
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 3
47703: NEG
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 3
47714: NEG
47715: PUSH
47716: LD_INT 3
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 3
47726: NEG
47727: PUSH
47728: LD_INT 4
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 3
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 3
47762: NEG
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 4
47774: NEG
47775: PUSH
47776: LD_INT 3
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 4
47786: NEG
47787: PUSH
47788: LD_INT 4
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: LD_INT 4
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 4
47810: NEG
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 4
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 5
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 4
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 3
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 3
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 4
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 5
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 3
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: LD_INT 5
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47969: LD_ADDR_VAR 0 31
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 4
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 4
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 5
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 5
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 4
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 3
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 5
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 3
48069: NEG
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 3
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 4
48125: NEG
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 4
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 4
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 4
48171: NEG
48172: PUSH
48173: LD_INT 4
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 4
48183: NEG
48184: PUSH
48185: LD_INT 5
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 3
48195: NEG
48196: PUSH
48197: LD_INT 4
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: LD_INT 3
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 4
48219: NEG
48220: PUSH
48221: LD_INT 3
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 5
48231: NEG
48232: PUSH
48233: LD_INT 4
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 5
48243: NEG
48244: PUSH
48245: LD_INT 5
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: LD_INT 5
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 5
48267: NEG
48268: PUSH
48269: LD_INT 3
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 4
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 3
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 4
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: LD_INT 4
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 4
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 4
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 5
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 5
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 4
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 3
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 5
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48519: LD_ADDR_VAR 0 32
48523: PUSH
48524: LD_INT 4
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 4
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 3
48549: NEG
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 4
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 5
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 5
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 5
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 3
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 3
48628: NEG
48629: PUSH
48630: LD_INT 3
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: LD_INT 4
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 4
48688: NEG
48689: PUSH
48690: LD_INT 3
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 4
48700: NEG
48701: PUSH
48702: LD_INT 4
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: LD_INT 4
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 4
48724: NEG
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 4
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 5
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 4
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 3
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 4
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 5
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 3
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 2
48826: NEG
48827: PUSH
48828: LD_INT 5
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 4
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 4
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 4
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 4
48931: PUSH
48932: LD_INT 4
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 4
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 5
48951: PUSH
48952: LD_INT 4
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 5
48961: PUSH
48962: LD_INT 5
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 4
48971: PUSH
48972: LD_INT 5
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: LD_INT 4
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: LD_INT 3
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 5
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: LD_INT 5
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49066: LD_ADDR_VAR 0 33
49070: PUSH
49071: LD_INT 4
49073: NEG
49074: PUSH
49075: LD_INT 4
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 4
49085: NEG
49086: PUSH
49087: LD_INT 5
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 3
49097: NEG
49098: PUSH
49099: LD_INT 4
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: LD_INT 3
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 4
49121: NEG
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 5
49133: NEG
49134: PUSH
49135: LD_INT 4
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 5
49145: NEG
49146: PUSH
49147: LD_INT 5
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 3
49157: NEG
49158: PUSH
49159: LD_INT 5
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 5
49169: NEG
49170: PUSH
49171: LD_INT 3
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 4
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 4
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 4
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 4
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 5
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 5
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 4
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 3
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 5
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 3
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 4
49396: PUSH
49397: LD_INT 3
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 4
49406: PUSH
49407: LD_INT 4
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 3
49416: PUSH
49417: LD_INT 4
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 3
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 4
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: LD_INT 4
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 4
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 4
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: LD_INT 5
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 5
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 4
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 5
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 3
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49604: LD_ADDR_VAR 0 34
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 4
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 5
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 4
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 3
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 4
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 5
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 3
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: LD_INT 5
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 3
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 4
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 4
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 4
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 4
49806: PUSH
49807: LD_INT 4
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 4
49816: PUSH
49817: LD_INT 3
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 5
49826: PUSH
49827: LD_INT 4
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 5
49836: PUSH
49837: LD_INT 5
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 4
49846: PUSH
49847: LD_INT 5
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: LD_INT 4
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: LD_INT 3
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 5
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: LD_INT 5
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 4
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 4
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 4
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 4
49989: NEG
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 4
50000: NEG
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 3
50012: NEG
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 4
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 5
50045: NEG
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 5
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 5
50068: NEG
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: ST_TO_ADDR
// end ; end ;
50136: GO 50139
50138: POP
// case btype of b_depot , b_warehouse :
50139: LD_VAR 0 1
50143: PUSH
50144: LD_INT 0
50146: DOUBLE
50147: EQUAL
50148: IFTRUE 50158
50150: LD_INT 1
50152: DOUBLE
50153: EQUAL
50154: IFTRUE 50158
50156: GO 50359
50158: POP
// case nation of nation_american :
50159: LD_VAR 0 5
50163: PUSH
50164: LD_INT 1
50166: DOUBLE
50167: EQUAL
50168: IFTRUE 50172
50170: GO 50228
50172: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50173: LD_ADDR_VAR 0 9
50177: PUSH
50178: LD_VAR 0 11
50182: PUSH
50183: LD_VAR 0 12
50187: PUSH
50188: LD_VAR 0 13
50192: PUSH
50193: LD_VAR 0 14
50197: PUSH
50198: LD_VAR 0 15
50202: PUSH
50203: LD_VAR 0 16
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: PUSH
50216: LD_VAR 0 4
50220: PUSH
50221: LD_INT 1
50223: PLUS
50224: ARRAY
50225: ST_TO_ADDR
50226: GO 50357
50228: LD_INT 2
50230: DOUBLE
50231: EQUAL
50232: IFTRUE 50236
50234: GO 50292
50236: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50237: LD_ADDR_VAR 0 9
50241: PUSH
50242: LD_VAR 0 17
50246: PUSH
50247: LD_VAR 0 18
50251: PUSH
50252: LD_VAR 0 19
50256: PUSH
50257: LD_VAR 0 20
50261: PUSH
50262: LD_VAR 0 21
50266: PUSH
50267: LD_VAR 0 22
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: PUSH
50280: LD_VAR 0 4
50284: PUSH
50285: LD_INT 1
50287: PLUS
50288: ARRAY
50289: ST_TO_ADDR
50290: GO 50357
50292: LD_INT 3
50294: DOUBLE
50295: EQUAL
50296: IFTRUE 50300
50298: GO 50356
50300: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50301: LD_ADDR_VAR 0 9
50305: PUSH
50306: LD_VAR 0 23
50310: PUSH
50311: LD_VAR 0 24
50315: PUSH
50316: LD_VAR 0 25
50320: PUSH
50321: LD_VAR 0 26
50325: PUSH
50326: LD_VAR 0 27
50330: PUSH
50331: LD_VAR 0 28
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: PUSH
50344: LD_VAR 0 4
50348: PUSH
50349: LD_INT 1
50351: PLUS
50352: ARRAY
50353: ST_TO_ADDR
50354: GO 50357
50356: POP
50357: GO 50912
50359: LD_INT 2
50361: DOUBLE
50362: EQUAL
50363: IFTRUE 50373
50365: LD_INT 3
50367: DOUBLE
50368: EQUAL
50369: IFTRUE 50373
50371: GO 50429
50373: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50374: LD_ADDR_VAR 0 9
50378: PUSH
50379: LD_VAR 0 29
50383: PUSH
50384: LD_VAR 0 30
50388: PUSH
50389: LD_VAR 0 31
50393: PUSH
50394: LD_VAR 0 32
50398: PUSH
50399: LD_VAR 0 33
50403: PUSH
50404: LD_VAR 0 34
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: PUSH
50417: LD_VAR 0 4
50421: PUSH
50422: LD_INT 1
50424: PLUS
50425: ARRAY
50426: ST_TO_ADDR
50427: GO 50912
50429: LD_INT 16
50431: DOUBLE
50432: EQUAL
50433: IFTRUE 50491
50435: LD_INT 17
50437: DOUBLE
50438: EQUAL
50439: IFTRUE 50491
50441: LD_INT 18
50443: DOUBLE
50444: EQUAL
50445: IFTRUE 50491
50447: LD_INT 19
50449: DOUBLE
50450: EQUAL
50451: IFTRUE 50491
50453: LD_INT 22
50455: DOUBLE
50456: EQUAL
50457: IFTRUE 50491
50459: LD_INT 20
50461: DOUBLE
50462: EQUAL
50463: IFTRUE 50491
50465: LD_INT 21
50467: DOUBLE
50468: EQUAL
50469: IFTRUE 50491
50471: LD_INT 23
50473: DOUBLE
50474: EQUAL
50475: IFTRUE 50491
50477: LD_INT 24
50479: DOUBLE
50480: EQUAL
50481: IFTRUE 50491
50483: LD_INT 25
50485: DOUBLE
50486: EQUAL
50487: IFTRUE 50491
50489: GO 50547
50491: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50492: LD_ADDR_VAR 0 9
50496: PUSH
50497: LD_VAR 0 35
50501: PUSH
50502: LD_VAR 0 36
50506: PUSH
50507: LD_VAR 0 37
50511: PUSH
50512: LD_VAR 0 38
50516: PUSH
50517: LD_VAR 0 39
50521: PUSH
50522: LD_VAR 0 40
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: PUSH
50535: LD_VAR 0 4
50539: PUSH
50540: LD_INT 1
50542: PLUS
50543: ARRAY
50544: ST_TO_ADDR
50545: GO 50912
50547: LD_INT 6
50549: DOUBLE
50550: EQUAL
50551: IFTRUE 50603
50553: LD_INT 7
50555: DOUBLE
50556: EQUAL
50557: IFTRUE 50603
50559: LD_INT 8
50561: DOUBLE
50562: EQUAL
50563: IFTRUE 50603
50565: LD_INT 13
50567: DOUBLE
50568: EQUAL
50569: IFTRUE 50603
50571: LD_INT 12
50573: DOUBLE
50574: EQUAL
50575: IFTRUE 50603
50577: LD_INT 15
50579: DOUBLE
50580: EQUAL
50581: IFTRUE 50603
50583: LD_INT 11
50585: DOUBLE
50586: EQUAL
50587: IFTRUE 50603
50589: LD_INT 14
50591: DOUBLE
50592: EQUAL
50593: IFTRUE 50603
50595: LD_INT 10
50597: DOUBLE
50598: EQUAL
50599: IFTRUE 50603
50601: GO 50659
50603: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50604: LD_ADDR_VAR 0 9
50608: PUSH
50609: LD_VAR 0 41
50613: PUSH
50614: LD_VAR 0 42
50618: PUSH
50619: LD_VAR 0 43
50623: PUSH
50624: LD_VAR 0 44
50628: PUSH
50629: LD_VAR 0 45
50633: PUSH
50634: LD_VAR 0 46
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: PUSH
50647: LD_VAR 0 4
50651: PUSH
50652: LD_INT 1
50654: PLUS
50655: ARRAY
50656: ST_TO_ADDR
50657: GO 50912
50659: LD_INT 36
50661: DOUBLE
50662: EQUAL
50663: IFTRUE 50667
50665: GO 50723
50667: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50668: LD_ADDR_VAR 0 9
50672: PUSH
50673: LD_VAR 0 47
50677: PUSH
50678: LD_VAR 0 48
50682: PUSH
50683: LD_VAR 0 49
50687: PUSH
50688: LD_VAR 0 50
50692: PUSH
50693: LD_VAR 0 51
50697: PUSH
50698: LD_VAR 0 52
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: PUSH
50711: LD_VAR 0 4
50715: PUSH
50716: LD_INT 1
50718: PLUS
50719: ARRAY
50720: ST_TO_ADDR
50721: GO 50912
50723: LD_INT 4
50725: DOUBLE
50726: EQUAL
50727: IFTRUE 50749
50729: LD_INT 5
50731: DOUBLE
50732: EQUAL
50733: IFTRUE 50749
50735: LD_INT 34
50737: DOUBLE
50738: EQUAL
50739: IFTRUE 50749
50741: LD_INT 37
50743: DOUBLE
50744: EQUAL
50745: IFTRUE 50749
50747: GO 50805
50749: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50750: LD_ADDR_VAR 0 9
50754: PUSH
50755: LD_VAR 0 53
50759: PUSH
50760: LD_VAR 0 54
50764: PUSH
50765: LD_VAR 0 55
50769: PUSH
50770: LD_VAR 0 56
50774: PUSH
50775: LD_VAR 0 57
50779: PUSH
50780: LD_VAR 0 58
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: PUSH
50793: LD_VAR 0 4
50797: PUSH
50798: LD_INT 1
50800: PLUS
50801: ARRAY
50802: ST_TO_ADDR
50803: GO 50912
50805: LD_INT 31
50807: DOUBLE
50808: EQUAL
50809: IFTRUE 50855
50811: LD_INT 32
50813: DOUBLE
50814: EQUAL
50815: IFTRUE 50855
50817: LD_INT 33
50819: DOUBLE
50820: EQUAL
50821: IFTRUE 50855
50823: LD_INT 27
50825: DOUBLE
50826: EQUAL
50827: IFTRUE 50855
50829: LD_INT 26
50831: DOUBLE
50832: EQUAL
50833: IFTRUE 50855
50835: LD_INT 28
50837: DOUBLE
50838: EQUAL
50839: IFTRUE 50855
50841: LD_INT 29
50843: DOUBLE
50844: EQUAL
50845: IFTRUE 50855
50847: LD_INT 30
50849: DOUBLE
50850: EQUAL
50851: IFTRUE 50855
50853: GO 50911
50855: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50856: LD_ADDR_VAR 0 9
50860: PUSH
50861: LD_VAR 0 59
50865: PUSH
50866: LD_VAR 0 60
50870: PUSH
50871: LD_VAR 0 61
50875: PUSH
50876: LD_VAR 0 62
50880: PUSH
50881: LD_VAR 0 63
50885: PUSH
50886: LD_VAR 0 64
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: PUSH
50899: LD_VAR 0 4
50903: PUSH
50904: LD_INT 1
50906: PLUS
50907: ARRAY
50908: ST_TO_ADDR
50909: GO 50912
50911: POP
// temp_list2 = [ ] ;
50912: LD_ADDR_VAR 0 10
50916: PUSH
50917: EMPTY
50918: ST_TO_ADDR
// for i in temp_list do
50919: LD_ADDR_VAR 0 8
50923: PUSH
50924: LD_VAR 0 9
50928: PUSH
50929: FOR_IN
50930: IFFALSE 50982
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50932: LD_ADDR_VAR 0 10
50936: PUSH
50937: LD_VAR 0 10
50941: PUSH
50942: LD_VAR 0 8
50946: PUSH
50947: LD_INT 1
50949: ARRAY
50950: PUSH
50951: LD_VAR 0 2
50955: PLUS
50956: PUSH
50957: LD_VAR 0 8
50961: PUSH
50962: LD_INT 2
50964: ARRAY
50965: PUSH
50966: LD_VAR 0 3
50970: PLUS
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: EMPTY
50977: LIST
50978: ADD
50979: ST_TO_ADDR
50980: GO 50929
50982: POP
50983: POP
// result = temp_list2 ;
50984: LD_ADDR_VAR 0 7
50988: PUSH
50989: LD_VAR 0 10
50993: ST_TO_ADDR
// end ;
50994: LD_VAR 0 7
50998: RET
// export function EnemyInRange ( unit , dist ) ; begin
50999: LD_INT 0
51001: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51002: LD_ADDR_VAR 0 3
51006: PUSH
51007: LD_VAR 0 1
51011: PPUSH
51012: CALL_OW 255
51016: PPUSH
51017: LD_VAR 0 1
51021: PPUSH
51022: CALL_OW 250
51026: PPUSH
51027: LD_VAR 0 1
51031: PPUSH
51032: CALL_OW 251
51036: PPUSH
51037: LD_VAR 0 2
51041: PPUSH
51042: CALL 25103 0 4
51046: PUSH
51047: LD_INT 4
51049: ARRAY
51050: ST_TO_ADDR
// end ;
51051: LD_VAR 0 3
51055: RET
// export function PlayerSeeMe ( unit ) ; begin
51056: LD_INT 0
51058: PPUSH
// result := See ( your_side , unit ) ;
51059: LD_ADDR_VAR 0 2
51063: PUSH
51064: LD_OWVAR 2
51068: PPUSH
51069: LD_VAR 0 1
51073: PPUSH
51074: CALL_OW 292
51078: ST_TO_ADDR
// end ;
51079: LD_VAR 0 2
51083: RET
// export function ReverseDir ( unit ) ; begin
51084: LD_INT 0
51086: PPUSH
// if not unit then
51087: LD_VAR 0 1
51091: NOT
51092: IFFALSE 51096
// exit ;
51094: GO 51119
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51096: LD_ADDR_VAR 0 2
51100: PUSH
51101: LD_VAR 0 1
51105: PPUSH
51106: CALL_OW 254
51110: PUSH
51111: LD_INT 3
51113: PLUS
51114: PUSH
51115: LD_INT 6
51117: MOD
51118: ST_TO_ADDR
// end ;
51119: LD_VAR 0 2
51123: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51124: LD_INT 0
51126: PPUSH
51127: PPUSH
51128: PPUSH
51129: PPUSH
51130: PPUSH
// if not hexes then
51131: LD_VAR 0 2
51135: NOT
51136: IFFALSE 51140
// exit ;
51138: GO 51288
// dist := 9999 ;
51140: LD_ADDR_VAR 0 5
51144: PUSH
51145: LD_INT 9999
51147: ST_TO_ADDR
// for i = 1 to hexes do
51148: LD_ADDR_VAR 0 4
51152: PUSH
51153: DOUBLE
51154: LD_INT 1
51156: DEC
51157: ST_TO_ADDR
51158: LD_VAR 0 2
51162: PUSH
51163: FOR_TO
51164: IFFALSE 51276
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51166: LD_VAR 0 1
51170: PPUSH
51171: LD_VAR 0 2
51175: PUSH
51176: LD_VAR 0 4
51180: ARRAY
51181: PUSH
51182: LD_INT 1
51184: ARRAY
51185: PPUSH
51186: LD_VAR 0 2
51190: PUSH
51191: LD_VAR 0 4
51195: ARRAY
51196: PUSH
51197: LD_INT 2
51199: ARRAY
51200: PPUSH
51201: CALL_OW 297
51205: PUSH
51206: LD_VAR 0 5
51210: LESS
51211: IFFALSE 51274
// begin hex := hexes [ i ] ;
51213: LD_ADDR_VAR 0 7
51217: PUSH
51218: LD_VAR 0 2
51222: PUSH
51223: LD_VAR 0 4
51227: ARRAY
51228: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51229: LD_ADDR_VAR 0 5
51233: PUSH
51234: LD_VAR 0 1
51238: PPUSH
51239: LD_VAR 0 2
51243: PUSH
51244: LD_VAR 0 4
51248: ARRAY
51249: PUSH
51250: LD_INT 1
51252: ARRAY
51253: PPUSH
51254: LD_VAR 0 2
51258: PUSH
51259: LD_VAR 0 4
51263: ARRAY
51264: PUSH
51265: LD_INT 2
51267: ARRAY
51268: PPUSH
51269: CALL_OW 297
51273: ST_TO_ADDR
// end ; end ;
51274: GO 51163
51276: POP
51277: POP
// result := hex ;
51278: LD_ADDR_VAR 0 3
51282: PUSH
51283: LD_VAR 0 7
51287: ST_TO_ADDR
// end ;
51288: LD_VAR 0 3
51292: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51293: LD_INT 0
51295: PPUSH
51296: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51297: LD_VAR 0 1
51301: NOT
51302: PUSH
51303: LD_VAR 0 1
51307: PUSH
51308: LD_INT 21
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 23
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PPUSH
51332: CALL_OW 69
51336: IN
51337: NOT
51338: OR
51339: IFFALSE 51343
// exit ;
51341: GO 51390
// for i = 1 to 3 do
51343: LD_ADDR_VAR 0 3
51347: PUSH
51348: DOUBLE
51349: LD_INT 1
51351: DEC
51352: ST_TO_ADDR
51353: LD_INT 3
51355: PUSH
51356: FOR_TO
51357: IFFALSE 51388
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51359: LD_VAR 0 1
51363: PPUSH
51364: CALL_OW 250
51368: PPUSH
51369: LD_VAR 0 1
51373: PPUSH
51374: CALL_OW 251
51378: PPUSH
51379: LD_INT 1
51381: PPUSH
51382: CALL_OW 453
51386: GO 51356
51388: POP
51389: POP
// end ;
51390: LD_VAR 0 2
51394: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51395: LD_INT 0
51397: PPUSH
51398: PPUSH
51399: PPUSH
51400: PPUSH
51401: PPUSH
51402: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51403: LD_VAR 0 1
51407: NOT
51408: PUSH
51409: LD_VAR 0 2
51413: NOT
51414: OR
51415: PUSH
51416: LD_VAR 0 1
51420: PPUSH
51421: CALL_OW 314
51425: OR
51426: IFFALSE 51430
// exit ;
51428: GO 51871
// x := GetX ( enemy_unit ) ;
51430: LD_ADDR_VAR 0 7
51434: PUSH
51435: LD_VAR 0 2
51439: PPUSH
51440: CALL_OW 250
51444: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51445: LD_ADDR_VAR 0 8
51449: PUSH
51450: LD_VAR 0 2
51454: PPUSH
51455: CALL_OW 251
51459: ST_TO_ADDR
// if not x or not y then
51460: LD_VAR 0 7
51464: NOT
51465: PUSH
51466: LD_VAR 0 8
51470: NOT
51471: OR
51472: IFFALSE 51476
// exit ;
51474: GO 51871
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51476: LD_ADDR_VAR 0 6
51480: PUSH
51481: LD_VAR 0 7
51485: PPUSH
51486: LD_INT 0
51488: PPUSH
51489: LD_INT 4
51491: PPUSH
51492: CALL_OW 272
51496: PUSH
51497: LD_VAR 0 8
51501: PPUSH
51502: LD_INT 0
51504: PPUSH
51505: LD_INT 4
51507: PPUSH
51508: CALL_OW 273
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_VAR 0 7
51521: PPUSH
51522: LD_INT 1
51524: PPUSH
51525: LD_INT 4
51527: PPUSH
51528: CALL_OW 272
51532: PUSH
51533: LD_VAR 0 8
51537: PPUSH
51538: LD_INT 1
51540: PPUSH
51541: LD_INT 4
51543: PPUSH
51544: CALL_OW 273
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_VAR 0 7
51557: PPUSH
51558: LD_INT 2
51560: PPUSH
51561: LD_INT 4
51563: PPUSH
51564: CALL_OW 272
51568: PUSH
51569: LD_VAR 0 8
51573: PPUSH
51574: LD_INT 2
51576: PPUSH
51577: LD_INT 4
51579: PPUSH
51580: CALL_OW 273
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_VAR 0 7
51593: PPUSH
51594: LD_INT 3
51596: PPUSH
51597: LD_INT 4
51599: PPUSH
51600: CALL_OW 272
51604: PUSH
51605: LD_VAR 0 8
51609: PPUSH
51610: LD_INT 3
51612: PPUSH
51613: LD_INT 4
51615: PPUSH
51616: CALL_OW 273
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_VAR 0 7
51629: PPUSH
51630: LD_INT 4
51632: PPUSH
51633: LD_INT 4
51635: PPUSH
51636: CALL_OW 272
51640: PUSH
51641: LD_VAR 0 8
51645: PPUSH
51646: LD_INT 4
51648: PPUSH
51649: LD_INT 4
51651: PPUSH
51652: CALL_OW 273
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_VAR 0 7
51665: PPUSH
51666: LD_INT 5
51668: PPUSH
51669: LD_INT 4
51671: PPUSH
51672: CALL_OW 272
51676: PUSH
51677: LD_VAR 0 8
51681: PPUSH
51682: LD_INT 5
51684: PPUSH
51685: LD_INT 4
51687: PPUSH
51688: CALL_OW 273
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: ST_TO_ADDR
// for i = tmp downto 1 do
51705: LD_ADDR_VAR 0 4
51709: PUSH
51710: DOUBLE
51711: LD_VAR 0 6
51715: INC
51716: ST_TO_ADDR
51717: LD_INT 1
51719: PUSH
51720: FOR_DOWNTO
51721: IFFALSE 51822
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51723: LD_VAR 0 6
51727: PUSH
51728: LD_VAR 0 4
51732: ARRAY
51733: PUSH
51734: LD_INT 1
51736: ARRAY
51737: PPUSH
51738: LD_VAR 0 6
51742: PUSH
51743: LD_VAR 0 4
51747: ARRAY
51748: PUSH
51749: LD_INT 2
51751: ARRAY
51752: PPUSH
51753: CALL_OW 488
51757: NOT
51758: PUSH
51759: LD_VAR 0 6
51763: PUSH
51764: LD_VAR 0 4
51768: ARRAY
51769: PUSH
51770: LD_INT 1
51772: ARRAY
51773: PPUSH
51774: LD_VAR 0 6
51778: PUSH
51779: LD_VAR 0 4
51783: ARRAY
51784: PUSH
51785: LD_INT 2
51787: ARRAY
51788: PPUSH
51789: CALL_OW 428
51793: PUSH
51794: LD_INT 0
51796: NONEQUAL
51797: OR
51798: IFFALSE 51820
// tmp := Delete ( tmp , i ) ;
51800: LD_ADDR_VAR 0 6
51804: PUSH
51805: LD_VAR 0 6
51809: PPUSH
51810: LD_VAR 0 4
51814: PPUSH
51815: CALL_OW 3
51819: ST_TO_ADDR
51820: GO 51720
51822: POP
51823: POP
// j := GetClosestHex ( unit , tmp ) ;
51824: LD_ADDR_VAR 0 5
51828: PUSH
51829: LD_VAR 0 1
51833: PPUSH
51834: LD_VAR 0 6
51838: PPUSH
51839: CALL 51124 0 2
51843: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51844: LD_VAR 0 1
51848: PPUSH
51849: LD_VAR 0 5
51853: PUSH
51854: LD_INT 1
51856: ARRAY
51857: PPUSH
51858: LD_VAR 0 5
51862: PUSH
51863: LD_INT 2
51865: ARRAY
51866: PPUSH
51867: CALL_OW 111
// end ;
51871: LD_VAR 0 3
51875: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51876: LD_INT 0
51878: PPUSH
51879: PPUSH
51880: PPUSH
// uc_side = 0 ;
51881: LD_ADDR_OWVAR 20
51885: PUSH
51886: LD_INT 0
51888: ST_TO_ADDR
// uc_nation = 0 ;
51889: LD_ADDR_OWVAR 21
51893: PUSH
51894: LD_INT 0
51896: ST_TO_ADDR
// InitHc_All ( ) ;
51897: CALL_OW 584
// InitVc ;
51901: CALL_OW 20
// if mastodonts then
51905: LD_VAR 0 6
51909: IFFALSE 51976
// for i = 1 to mastodonts do
51911: LD_ADDR_VAR 0 11
51915: PUSH
51916: DOUBLE
51917: LD_INT 1
51919: DEC
51920: ST_TO_ADDR
51921: LD_VAR 0 6
51925: PUSH
51926: FOR_TO
51927: IFFALSE 51974
// begin vc_chassis := 31 ;
51929: LD_ADDR_OWVAR 37
51933: PUSH
51934: LD_INT 31
51936: ST_TO_ADDR
// vc_control := control_rider ;
51937: LD_ADDR_OWVAR 38
51941: PUSH
51942: LD_INT 4
51944: ST_TO_ADDR
// animal := CreateVehicle ;
51945: LD_ADDR_VAR 0 12
51949: PUSH
51950: CALL_OW 45
51954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51955: LD_VAR 0 12
51959: PPUSH
51960: LD_VAR 0 8
51964: PPUSH
51965: LD_INT 0
51967: PPUSH
51968: CALL 54164 0 3
// end ;
51972: GO 51926
51974: POP
51975: POP
// if horses then
51976: LD_VAR 0 5
51980: IFFALSE 52047
// for i = 1 to horses do
51982: LD_ADDR_VAR 0 11
51986: PUSH
51987: DOUBLE
51988: LD_INT 1
51990: DEC
51991: ST_TO_ADDR
51992: LD_VAR 0 5
51996: PUSH
51997: FOR_TO
51998: IFFALSE 52045
// begin hc_class := 21 ;
52000: LD_ADDR_OWVAR 28
52004: PUSH
52005: LD_INT 21
52007: ST_TO_ADDR
// hc_gallery :=  ;
52008: LD_ADDR_OWVAR 33
52012: PUSH
52013: LD_STRING 
52015: ST_TO_ADDR
// animal := CreateHuman ;
52016: LD_ADDR_VAR 0 12
52020: PUSH
52021: CALL_OW 44
52025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52026: LD_VAR 0 12
52030: PPUSH
52031: LD_VAR 0 8
52035: PPUSH
52036: LD_INT 0
52038: PPUSH
52039: CALL 54164 0 3
// end ;
52043: GO 51997
52045: POP
52046: POP
// if birds then
52047: LD_VAR 0 1
52051: IFFALSE 52118
// for i = 1 to birds do
52053: LD_ADDR_VAR 0 11
52057: PUSH
52058: DOUBLE
52059: LD_INT 1
52061: DEC
52062: ST_TO_ADDR
52063: LD_VAR 0 1
52067: PUSH
52068: FOR_TO
52069: IFFALSE 52116
// begin hc_class = 18 ;
52071: LD_ADDR_OWVAR 28
52075: PUSH
52076: LD_INT 18
52078: ST_TO_ADDR
// hc_gallery =  ;
52079: LD_ADDR_OWVAR 33
52083: PUSH
52084: LD_STRING 
52086: ST_TO_ADDR
// animal := CreateHuman ;
52087: LD_ADDR_VAR 0 12
52091: PUSH
52092: CALL_OW 44
52096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52097: LD_VAR 0 12
52101: PPUSH
52102: LD_VAR 0 8
52106: PPUSH
52107: LD_INT 0
52109: PPUSH
52110: CALL 54164 0 3
// end ;
52114: GO 52068
52116: POP
52117: POP
// if tigers then
52118: LD_VAR 0 2
52122: IFFALSE 52206
// for i = 1 to tigers do
52124: LD_ADDR_VAR 0 11
52128: PUSH
52129: DOUBLE
52130: LD_INT 1
52132: DEC
52133: ST_TO_ADDR
52134: LD_VAR 0 2
52138: PUSH
52139: FOR_TO
52140: IFFALSE 52204
// begin hc_class = class_tiger ;
52142: LD_ADDR_OWVAR 28
52146: PUSH
52147: LD_INT 14
52149: ST_TO_ADDR
// hc_gallery =  ;
52150: LD_ADDR_OWVAR 33
52154: PUSH
52155: LD_STRING 
52157: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52158: LD_ADDR_OWVAR 35
52162: PUSH
52163: LD_INT 7
52165: NEG
52166: PPUSH
52167: LD_INT 7
52169: PPUSH
52170: CALL_OW 12
52174: ST_TO_ADDR
// animal := CreateHuman ;
52175: LD_ADDR_VAR 0 12
52179: PUSH
52180: CALL_OW 44
52184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52185: LD_VAR 0 12
52189: PPUSH
52190: LD_VAR 0 8
52194: PPUSH
52195: LD_INT 0
52197: PPUSH
52198: CALL 54164 0 3
// end ;
52202: GO 52139
52204: POP
52205: POP
// if apemans then
52206: LD_VAR 0 3
52210: IFFALSE 52333
// for i = 1 to apemans do
52212: LD_ADDR_VAR 0 11
52216: PUSH
52217: DOUBLE
52218: LD_INT 1
52220: DEC
52221: ST_TO_ADDR
52222: LD_VAR 0 3
52226: PUSH
52227: FOR_TO
52228: IFFALSE 52331
// begin hc_class = class_apeman ;
52230: LD_ADDR_OWVAR 28
52234: PUSH
52235: LD_INT 12
52237: ST_TO_ADDR
// hc_gallery =  ;
52238: LD_ADDR_OWVAR 33
52242: PUSH
52243: LD_STRING 
52245: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52246: LD_ADDR_OWVAR 35
52250: PUSH
52251: LD_INT 5
52253: NEG
52254: PPUSH
52255: LD_INT 5
52257: PPUSH
52258: CALL_OW 12
52262: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52263: LD_ADDR_OWVAR 31
52267: PUSH
52268: LD_INT 1
52270: PPUSH
52271: LD_INT 3
52273: PPUSH
52274: CALL_OW 12
52278: PUSH
52279: LD_INT 1
52281: PPUSH
52282: LD_INT 3
52284: PPUSH
52285: CALL_OW 12
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: ST_TO_ADDR
// animal := CreateHuman ;
52302: LD_ADDR_VAR 0 12
52306: PUSH
52307: CALL_OW 44
52311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52312: LD_VAR 0 12
52316: PPUSH
52317: LD_VAR 0 8
52321: PPUSH
52322: LD_INT 0
52324: PPUSH
52325: CALL 54164 0 3
// end ;
52329: GO 52227
52331: POP
52332: POP
// if enchidnas then
52333: LD_VAR 0 4
52337: IFFALSE 52404
// for i = 1 to enchidnas do
52339: LD_ADDR_VAR 0 11
52343: PUSH
52344: DOUBLE
52345: LD_INT 1
52347: DEC
52348: ST_TO_ADDR
52349: LD_VAR 0 4
52353: PUSH
52354: FOR_TO
52355: IFFALSE 52402
// begin hc_class = 13 ;
52357: LD_ADDR_OWVAR 28
52361: PUSH
52362: LD_INT 13
52364: ST_TO_ADDR
// hc_gallery =  ;
52365: LD_ADDR_OWVAR 33
52369: PUSH
52370: LD_STRING 
52372: ST_TO_ADDR
// animal := CreateHuman ;
52373: LD_ADDR_VAR 0 12
52377: PUSH
52378: CALL_OW 44
52382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52383: LD_VAR 0 12
52387: PPUSH
52388: LD_VAR 0 8
52392: PPUSH
52393: LD_INT 0
52395: PPUSH
52396: CALL 54164 0 3
// end ;
52400: GO 52354
52402: POP
52403: POP
// if fishes then
52404: LD_VAR 0 7
52408: IFFALSE 52475
// for i = 1 to fishes do
52410: LD_ADDR_VAR 0 11
52414: PUSH
52415: DOUBLE
52416: LD_INT 1
52418: DEC
52419: ST_TO_ADDR
52420: LD_VAR 0 7
52424: PUSH
52425: FOR_TO
52426: IFFALSE 52473
// begin hc_class = 20 ;
52428: LD_ADDR_OWVAR 28
52432: PUSH
52433: LD_INT 20
52435: ST_TO_ADDR
// hc_gallery =  ;
52436: LD_ADDR_OWVAR 33
52440: PUSH
52441: LD_STRING 
52443: ST_TO_ADDR
// animal := CreateHuman ;
52444: LD_ADDR_VAR 0 12
52448: PUSH
52449: CALL_OW 44
52453: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52454: LD_VAR 0 12
52458: PPUSH
52459: LD_VAR 0 9
52463: PPUSH
52464: LD_INT 0
52466: PPUSH
52467: CALL 54164 0 3
// end ;
52471: GO 52425
52473: POP
52474: POP
// end ;
52475: LD_VAR 0 10
52479: RET
// export function WantHeal ( sci , unit ) ; begin
52480: LD_INT 0
52482: PPUSH
// if GetTaskList ( sci ) > 0 then
52483: LD_VAR 0 1
52487: PPUSH
52488: CALL_OW 437
52492: PUSH
52493: LD_INT 0
52495: GREATER
52496: IFFALSE 52566
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52498: LD_VAR 0 1
52502: PPUSH
52503: CALL_OW 437
52507: PUSH
52508: LD_INT 1
52510: ARRAY
52511: PUSH
52512: LD_INT 1
52514: ARRAY
52515: PUSH
52516: LD_STRING l
52518: EQUAL
52519: PUSH
52520: LD_VAR 0 1
52524: PPUSH
52525: CALL_OW 437
52529: PUSH
52530: LD_INT 1
52532: ARRAY
52533: PUSH
52534: LD_INT 4
52536: ARRAY
52537: PUSH
52538: LD_VAR 0 2
52542: EQUAL
52543: AND
52544: IFFALSE 52556
// result := true else
52546: LD_ADDR_VAR 0 3
52550: PUSH
52551: LD_INT 1
52553: ST_TO_ADDR
52554: GO 52564
// result := false ;
52556: LD_ADDR_VAR 0 3
52560: PUSH
52561: LD_INT 0
52563: ST_TO_ADDR
// end else
52564: GO 52574
// result := false ;
52566: LD_ADDR_VAR 0 3
52570: PUSH
52571: LD_INT 0
52573: ST_TO_ADDR
// end ;
52574: LD_VAR 0 3
52578: RET
// export function HealTarget ( sci ) ; begin
52579: LD_INT 0
52581: PPUSH
// if not sci then
52582: LD_VAR 0 1
52586: NOT
52587: IFFALSE 52591
// exit ;
52589: GO 52656
// result := 0 ;
52591: LD_ADDR_VAR 0 2
52595: PUSH
52596: LD_INT 0
52598: ST_TO_ADDR
// if GetTaskList ( sci ) then
52599: LD_VAR 0 1
52603: PPUSH
52604: CALL_OW 437
52608: IFFALSE 52656
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52610: LD_VAR 0 1
52614: PPUSH
52615: CALL_OW 437
52619: PUSH
52620: LD_INT 1
52622: ARRAY
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PUSH
52628: LD_STRING l
52630: EQUAL
52631: IFFALSE 52656
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52633: LD_ADDR_VAR 0 2
52637: PUSH
52638: LD_VAR 0 1
52642: PPUSH
52643: CALL_OW 437
52647: PUSH
52648: LD_INT 1
52650: ARRAY
52651: PUSH
52652: LD_INT 4
52654: ARRAY
52655: ST_TO_ADDR
// end ;
52656: LD_VAR 0 2
52660: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52661: LD_INT 0
52663: PPUSH
52664: PPUSH
52665: PPUSH
52666: PPUSH
// if not base_units then
52667: LD_VAR 0 1
52671: NOT
52672: IFFALSE 52676
// exit ;
52674: GO 52763
// result := false ;
52676: LD_ADDR_VAR 0 2
52680: PUSH
52681: LD_INT 0
52683: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52684: LD_ADDR_VAR 0 5
52688: PUSH
52689: LD_VAR 0 1
52693: PPUSH
52694: LD_INT 21
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PPUSH
52704: CALL_OW 72
52708: ST_TO_ADDR
// if not tmp then
52709: LD_VAR 0 5
52713: NOT
52714: IFFALSE 52718
// exit ;
52716: GO 52763
// for i in tmp do
52718: LD_ADDR_VAR 0 3
52722: PUSH
52723: LD_VAR 0 5
52727: PUSH
52728: FOR_IN
52729: IFFALSE 52761
// begin result := EnemyInRange ( i , 22 ) ;
52731: LD_ADDR_VAR 0 2
52735: PUSH
52736: LD_VAR 0 3
52740: PPUSH
52741: LD_INT 22
52743: PPUSH
52744: CALL 50999 0 2
52748: ST_TO_ADDR
// if result then
52749: LD_VAR 0 2
52753: IFFALSE 52759
// exit ;
52755: POP
52756: POP
52757: GO 52763
// end ;
52759: GO 52728
52761: POP
52762: POP
// end ;
52763: LD_VAR 0 2
52767: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52768: LD_INT 0
52770: PPUSH
52771: PPUSH
// if not units then
52772: LD_VAR 0 1
52776: NOT
52777: IFFALSE 52781
// exit ;
52779: GO 52851
// result := [ ] ;
52781: LD_ADDR_VAR 0 3
52785: PUSH
52786: EMPTY
52787: ST_TO_ADDR
// for i in units do
52788: LD_ADDR_VAR 0 4
52792: PUSH
52793: LD_VAR 0 1
52797: PUSH
52798: FOR_IN
52799: IFFALSE 52849
// if GetTag ( i ) = tag then
52801: LD_VAR 0 4
52805: PPUSH
52806: CALL_OW 110
52810: PUSH
52811: LD_VAR 0 2
52815: EQUAL
52816: IFFALSE 52847
// result := Insert ( result , result + 1 , i ) ;
52818: LD_ADDR_VAR 0 3
52822: PUSH
52823: LD_VAR 0 3
52827: PPUSH
52828: LD_VAR 0 3
52832: PUSH
52833: LD_INT 1
52835: PLUS
52836: PPUSH
52837: LD_VAR 0 4
52841: PPUSH
52842: CALL_OW 2
52846: ST_TO_ADDR
52847: GO 52798
52849: POP
52850: POP
// end ;
52851: LD_VAR 0 3
52855: RET
// export function IsDriver ( un ) ; begin
52856: LD_INT 0
52858: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52859: LD_ADDR_VAR 0 2
52863: PUSH
52864: LD_VAR 0 1
52868: PUSH
52869: LD_INT 55
52871: PUSH
52872: EMPTY
52873: LIST
52874: PPUSH
52875: CALL_OW 69
52879: IN
52880: ST_TO_ADDR
// end ;
52881: LD_VAR 0 2
52885: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52886: LD_INT 0
52888: PPUSH
52889: PPUSH
// list := [ ] ;
52890: LD_ADDR_VAR 0 5
52894: PUSH
52895: EMPTY
52896: ST_TO_ADDR
// case d of 0 :
52897: LD_VAR 0 3
52901: PUSH
52902: LD_INT 0
52904: DOUBLE
52905: EQUAL
52906: IFTRUE 52910
52908: GO 53043
52910: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52911: LD_ADDR_VAR 0 5
52915: PUSH
52916: LD_VAR 0 1
52920: PUSH
52921: LD_INT 4
52923: MINUS
52924: PUSH
52925: LD_VAR 0 2
52929: PUSH
52930: LD_INT 4
52932: MINUS
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: PUSH
52942: LD_VAR 0 1
52946: PUSH
52947: LD_INT 3
52949: MINUS
52950: PUSH
52951: LD_VAR 0 2
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: LIST
52963: PUSH
52964: LD_VAR 0 1
52968: PUSH
52969: LD_INT 4
52971: PLUS
52972: PUSH
52973: LD_VAR 0 2
52977: PUSH
52978: LD_INT 4
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: LIST
52985: PUSH
52986: LD_VAR 0 1
52990: PUSH
52991: LD_INT 3
52993: PLUS
52994: PUSH
52995: LD_VAR 0 2
52999: PUSH
53000: LD_INT 3
53002: PLUS
53003: PUSH
53004: LD_INT 5
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: PUSH
53012: LD_VAR 0 1
53016: PUSH
53017: LD_VAR 0 2
53021: PUSH
53022: LD_INT 4
53024: PLUS
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: LIST
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// end ; 1 :
53041: GO 53741
53043: LD_INT 1
53045: DOUBLE
53046: EQUAL
53047: IFTRUE 53051
53049: GO 53184
53051: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53052: LD_ADDR_VAR 0 5
53056: PUSH
53057: LD_VAR 0 1
53061: PUSH
53062: LD_VAR 0 2
53066: PUSH
53067: LD_INT 4
53069: MINUS
53070: PUSH
53071: LD_INT 3
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: LIST
53078: PUSH
53079: LD_VAR 0 1
53083: PUSH
53084: LD_INT 3
53086: MINUS
53087: PUSH
53088: LD_VAR 0 2
53092: PUSH
53093: LD_INT 3
53095: MINUS
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: PUSH
53105: LD_VAR 0 1
53109: PUSH
53110: LD_INT 4
53112: MINUS
53113: PUSH
53114: LD_VAR 0 2
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: LIST
53126: PUSH
53127: LD_VAR 0 1
53131: PUSH
53132: LD_VAR 0 2
53136: PUSH
53137: LD_INT 3
53139: PLUS
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: PUSH
53149: LD_VAR 0 1
53153: PUSH
53154: LD_INT 4
53156: PLUS
53157: PUSH
53158: LD_VAR 0 2
53162: PUSH
53163: LD_INT 4
53165: PLUS
53166: PUSH
53167: LD_INT 5
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: ST_TO_ADDR
// end ; 2 :
53182: GO 53741
53184: LD_INT 2
53186: DOUBLE
53187: EQUAL
53188: IFTRUE 53192
53190: GO 53321
53192: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53193: LD_ADDR_VAR 0 5
53197: PUSH
53198: LD_VAR 0 1
53202: PUSH
53203: LD_VAR 0 2
53207: PUSH
53208: LD_INT 3
53210: MINUS
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: LIST
53219: PUSH
53220: LD_VAR 0 1
53224: PUSH
53225: LD_INT 4
53227: PLUS
53228: PUSH
53229: LD_VAR 0 2
53233: PUSH
53234: LD_INT 4
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: LIST
53241: PUSH
53242: LD_VAR 0 1
53246: PUSH
53247: LD_VAR 0 2
53251: PUSH
53252: LD_INT 4
53254: PLUS
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: LIST
53263: PUSH
53264: LD_VAR 0 1
53268: PUSH
53269: LD_INT 3
53271: MINUS
53272: PUSH
53273: LD_VAR 0 2
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: PUSH
53286: LD_VAR 0 1
53290: PUSH
53291: LD_INT 4
53293: MINUS
53294: PUSH
53295: LD_VAR 0 2
53299: PUSH
53300: LD_INT 4
53302: MINUS
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: LIST
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: ST_TO_ADDR
// end ; 3 :
53319: GO 53741
53321: LD_INT 3
53323: DOUBLE
53324: EQUAL
53325: IFTRUE 53329
53327: GO 53462
53329: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53330: LD_ADDR_VAR 0 5
53334: PUSH
53335: LD_VAR 0 1
53339: PUSH
53340: LD_INT 3
53342: PLUS
53343: PUSH
53344: LD_VAR 0 2
53348: PUSH
53349: LD_INT 4
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: PUSH
53357: LD_VAR 0 1
53361: PUSH
53362: LD_INT 4
53364: PLUS
53365: PUSH
53366: LD_VAR 0 2
53370: PUSH
53371: LD_INT 4
53373: PLUS
53374: PUSH
53375: LD_INT 5
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: PUSH
53383: LD_VAR 0 1
53387: PUSH
53388: LD_INT 4
53390: MINUS
53391: PUSH
53392: LD_VAR 0 2
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: PUSH
53405: LD_VAR 0 1
53409: PUSH
53410: LD_VAR 0 2
53414: PUSH
53415: LD_INT 4
53417: MINUS
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: PUSH
53427: LD_VAR 0 1
53431: PUSH
53432: LD_INT 3
53434: MINUS
53435: PUSH
53436: LD_VAR 0 2
53440: PUSH
53441: LD_INT 3
53443: MINUS
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: ST_TO_ADDR
// end ; 4 :
53460: GO 53741
53462: LD_INT 4
53464: DOUBLE
53465: EQUAL
53466: IFTRUE 53470
53468: GO 53603
53470: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53471: LD_ADDR_VAR 0 5
53475: PUSH
53476: LD_VAR 0 1
53480: PUSH
53481: LD_VAR 0 2
53485: PUSH
53486: LD_INT 4
53488: PLUS
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: LIST
53497: PUSH
53498: LD_VAR 0 1
53502: PUSH
53503: LD_INT 3
53505: PLUS
53506: PUSH
53507: LD_VAR 0 2
53511: PUSH
53512: LD_INT 3
53514: PLUS
53515: PUSH
53516: LD_INT 5
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: PUSH
53524: LD_VAR 0 1
53528: PUSH
53529: LD_INT 4
53531: PLUS
53532: PUSH
53533: LD_VAR 0 2
53537: PUSH
53538: LD_INT 4
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: PUSH
53546: LD_VAR 0 1
53550: PUSH
53551: LD_VAR 0 2
53555: PUSH
53556: LD_INT 3
53558: MINUS
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: LIST
53567: PUSH
53568: LD_VAR 0 1
53572: PUSH
53573: LD_INT 4
53575: MINUS
53576: PUSH
53577: LD_VAR 0 2
53581: PUSH
53582: LD_INT 4
53584: MINUS
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// end ; 5 :
53601: GO 53741
53603: LD_INT 5
53605: DOUBLE
53606: EQUAL
53607: IFTRUE 53611
53609: GO 53740
53611: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53612: LD_ADDR_VAR 0 5
53616: PUSH
53617: LD_VAR 0 1
53621: PUSH
53622: LD_INT 4
53624: MINUS
53625: PUSH
53626: LD_VAR 0 2
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: PUSH
53639: LD_VAR 0 1
53643: PUSH
53644: LD_VAR 0 2
53648: PUSH
53649: LD_INT 4
53651: MINUS
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: PUSH
53661: LD_VAR 0 1
53665: PUSH
53666: LD_INT 4
53668: PLUS
53669: PUSH
53670: LD_VAR 0 2
53674: PUSH
53675: LD_INT 4
53677: PLUS
53678: PUSH
53679: LD_INT 5
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: LIST
53686: PUSH
53687: LD_VAR 0 1
53691: PUSH
53692: LD_INT 3
53694: PLUS
53695: PUSH
53696: LD_VAR 0 2
53700: PUSH
53701: LD_INT 4
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: PUSH
53709: LD_VAR 0 1
53713: PUSH
53714: LD_VAR 0 2
53718: PUSH
53719: LD_INT 3
53721: PLUS
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: ST_TO_ADDR
// end ; end ;
53738: GO 53741
53740: POP
// result := list ;
53741: LD_ADDR_VAR 0 4
53745: PUSH
53746: LD_VAR 0 5
53750: ST_TO_ADDR
// end ;
53751: LD_VAR 0 4
53755: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53756: LD_INT 0
53758: PPUSH
53759: PPUSH
53760: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53761: LD_VAR 0 1
53765: NOT
53766: PUSH
53767: LD_VAR 0 2
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: LD_INT 4
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: IN
53790: NOT
53791: OR
53792: IFFALSE 53796
// exit ;
53794: GO 53888
// tmp := [ ] ;
53796: LD_ADDR_VAR 0 5
53800: PUSH
53801: EMPTY
53802: ST_TO_ADDR
// for i in units do
53803: LD_ADDR_VAR 0 4
53807: PUSH
53808: LD_VAR 0 1
53812: PUSH
53813: FOR_IN
53814: IFFALSE 53857
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53816: LD_ADDR_VAR 0 5
53820: PUSH
53821: LD_VAR 0 5
53825: PPUSH
53826: LD_VAR 0 5
53830: PUSH
53831: LD_INT 1
53833: PLUS
53834: PPUSH
53835: LD_VAR 0 4
53839: PPUSH
53840: LD_VAR 0 2
53844: PPUSH
53845: CALL_OW 259
53849: PPUSH
53850: CALL_OW 2
53854: ST_TO_ADDR
53855: GO 53813
53857: POP
53858: POP
// if not tmp then
53859: LD_VAR 0 5
53863: NOT
53864: IFFALSE 53868
// exit ;
53866: GO 53888
// result := SortListByListDesc ( units , tmp ) ;
53868: LD_ADDR_VAR 0 3
53872: PUSH
53873: LD_VAR 0 1
53877: PPUSH
53878: LD_VAR 0 5
53882: PPUSH
53883: CALL_OW 77
53887: ST_TO_ADDR
// end ;
53888: LD_VAR 0 3
53892: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53893: LD_INT 0
53895: PPUSH
53896: PPUSH
53897: PPUSH
// result := false ;
53898: LD_ADDR_VAR 0 3
53902: PUSH
53903: LD_INT 0
53905: ST_TO_ADDR
// x := GetX ( building ) ;
53906: LD_ADDR_VAR 0 4
53910: PUSH
53911: LD_VAR 0 2
53915: PPUSH
53916: CALL_OW 250
53920: ST_TO_ADDR
// y := GetY ( building ) ;
53921: LD_ADDR_VAR 0 5
53925: PUSH
53926: LD_VAR 0 2
53930: PPUSH
53931: CALL_OW 251
53935: ST_TO_ADDR
// if not building or not x or not y then
53936: LD_VAR 0 2
53940: NOT
53941: PUSH
53942: LD_VAR 0 4
53946: NOT
53947: OR
53948: PUSH
53949: LD_VAR 0 5
53953: NOT
53954: OR
53955: IFFALSE 53959
// exit ;
53957: GO 54051
// if GetTaskList ( unit ) then
53959: LD_VAR 0 1
53963: PPUSH
53964: CALL_OW 437
53968: IFFALSE 54051
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53970: LD_STRING e
53972: PUSH
53973: LD_VAR 0 1
53977: PPUSH
53978: CALL_OW 437
53982: PUSH
53983: LD_INT 1
53985: ARRAY
53986: PUSH
53987: LD_INT 1
53989: ARRAY
53990: EQUAL
53991: PUSH
53992: LD_VAR 0 4
53996: PUSH
53997: LD_VAR 0 1
54001: PPUSH
54002: CALL_OW 437
54006: PUSH
54007: LD_INT 1
54009: ARRAY
54010: PUSH
54011: LD_INT 2
54013: ARRAY
54014: EQUAL
54015: AND
54016: PUSH
54017: LD_VAR 0 5
54021: PUSH
54022: LD_VAR 0 1
54026: PPUSH
54027: CALL_OW 437
54031: PUSH
54032: LD_INT 1
54034: ARRAY
54035: PUSH
54036: LD_INT 3
54038: ARRAY
54039: EQUAL
54040: AND
54041: IFFALSE 54051
// result := true end ;
54043: LD_ADDR_VAR 0 3
54047: PUSH
54048: LD_INT 1
54050: ST_TO_ADDR
// end ;
54051: LD_VAR 0 3
54055: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54056: LD_INT 0
54058: PPUSH
// result := false ;
54059: LD_ADDR_VAR 0 4
54063: PUSH
54064: LD_INT 0
54066: ST_TO_ADDR
// if GetTaskList ( unit ) then
54067: LD_VAR 0 1
54071: PPUSH
54072: CALL_OW 437
54076: IFFALSE 54159
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54078: LD_STRING M
54080: PUSH
54081: LD_VAR 0 1
54085: PPUSH
54086: CALL_OW 437
54090: PUSH
54091: LD_INT 1
54093: ARRAY
54094: PUSH
54095: LD_INT 1
54097: ARRAY
54098: EQUAL
54099: PUSH
54100: LD_VAR 0 2
54104: PUSH
54105: LD_VAR 0 1
54109: PPUSH
54110: CALL_OW 437
54114: PUSH
54115: LD_INT 1
54117: ARRAY
54118: PUSH
54119: LD_INT 2
54121: ARRAY
54122: EQUAL
54123: AND
54124: PUSH
54125: LD_VAR 0 3
54129: PUSH
54130: LD_VAR 0 1
54134: PPUSH
54135: CALL_OW 437
54139: PUSH
54140: LD_INT 1
54142: ARRAY
54143: PUSH
54144: LD_INT 3
54146: ARRAY
54147: EQUAL
54148: AND
54149: IFFALSE 54159
// result := true ;
54151: LD_ADDR_VAR 0 4
54155: PUSH
54156: LD_INT 1
54158: ST_TO_ADDR
// end ; end ;
54159: LD_VAR 0 4
54163: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54164: LD_INT 0
54166: PPUSH
54167: PPUSH
54168: PPUSH
54169: PPUSH
// if not unit or not area then
54170: LD_VAR 0 1
54174: NOT
54175: PUSH
54176: LD_VAR 0 2
54180: NOT
54181: OR
54182: IFFALSE 54186
// exit ;
54184: GO 54350
// tmp := AreaToList ( area , i ) ;
54186: LD_ADDR_VAR 0 6
54190: PUSH
54191: LD_VAR 0 2
54195: PPUSH
54196: LD_VAR 0 5
54200: PPUSH
54201: CALL_OW 517
54205: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54206: LD_ADDR_VAR 0 5
54210: PUSH
54211: DOUBLE
54212: LD_INT 1
54214: DEC
54215: ST_TO_ADDR
54216: LD_VAR 0 6
54220: PUSH
54221: LD_INT 1
54223: ARRAY
54224: PUSH
54225: FOR_TO
54226: IFFALSE 54348
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54228: LD_ADDR_VAR 0 7
54232: PUSH
54233: LD_VAR 0 6
54237: PUSH
54238: LD_INT 1
54240: ARRAY
54241: PUSH
54242: LD_VAR 0 5
54246: ARRAY
54247: PUSH
54248: LD_VAR 0 6
54252: PUSH
54253: LD_INT 2
54255: ARRAY
54256: PUSH
54257: LD_VAR 0 5
54261: ARRAY
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54267: LD_VAR 0 7
54271: PUSH
54272: LD_INT 1
54274: ARRAY
54275: PPUSH
54276: LD_VAR 0 7
54280: PUSH
54281: LD_INT 2
54283: ARRAY
54284: PPUSH
54285: CALL_OW 428
54289: PUSH
54290: LD_INT 0
54292: EQUAL
54293: IFFALSE 54346
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54295: LD_VAR 0 1
54299: PPUSH
54300: LD_VAR 0 7
54304: PUSH
54305: LD_INT 1
54307: ARRAY
54308: PPUSH
54309: LD_VAR 0 7
54313: PUSH
54314: LD_INT 2
54316: ARRAY
54317: PPUSH
54318: LD_VAR 0 3
54322: PPUSH
54323: CALL_OW 48
// result := IsPlaced ( unit ) ;
54327: LD_ADDR_VAR 0 4
54331: PUSH
54332: LD_VAR 0 1
54336: PPUSH
54337: CALL_OW 305
54341: ST_TO_ADDR
// exit ;
54342: POP
54343: POP
54344: GO 54350
// end ; end ;
54346: GO 54225
54348: POP
54349: POP
// end ;
54350: LD_VAR 0 4
54354: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54355: LD_INT 0
54357: PPUSH
54358: PPUSH
54359: PPUSH
// if not side or side > 8 then
54360: LD_VAR 0 1
54364: NOT
54365: PUSH
54366: LD_VAR 0 1
54370: PUSH
54371: LD_INT 8
54373: GREATER
54374: OR
54375: IFFALSE 54379
// exit ;
54377: GO 54566
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54379: LD_ADDR_VAR 0 4
54383: PUSH
54384: LD_INT 22
54386: PUSH
54387: LD_VAR 0 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 21
54398: PUSH
54399: LD_INT 3
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PPUSH
54410: CALL_OW 69
54414: ST_TO_ADDR
// if not tmp then
54415: LD_VAR 0 4
54419: NOT
54420: IFFALSE 54424
// exit ;
54422: GO 54566
// enable_addtolog := true ;
54424: LD_ADDR_OWVAR 81
54428: PUSH
54429: LD_INT 1
54431: ST_TO_ADDR
// AddToLog ( [ ) ;
54432: LD_STRING [
54434: PPUSH
54435: CALL_OW 561
// for i in tmp do
54439: LD_ADDR_VAR 0 3
54443: PUSH
54444: LD_VAR 0 4
54448: PUSH
54449: FOR_IN
54450: IFFALSE 54557
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54452: LD_STRING [
54454: PUSH
54455: LD_VAR 0 3
54459: PPUSH
54460: CALL_OW 266
54464: STR
54465: PUSH
54466: LD_STRING , 
54468: STR
54469: PUSH
54470: LD_VAR 0 3
54474: PPUSH
54475: CALL_OW 250
54479: STR
54480: PUSH
54481: LD_STRING , 
54483: STR
54484: PUSH
54485: LD_VAR 0 3
54489: PPUSH
54490: CALL_OW 251
54494: STR
54495: PUSH
54496: LD_STRING , 
54498: STR
54499: PUSH
54500: LD_VAR 0 3
54504: PPUSH
54505: CALL_OW 254
54509: STR
54510: PUSH
54511: LD_STRING , 
54513: STR
54514: PUSH
54515: LD_VAR 0 3
54519: PPUSH
54520: LD_INT 1
54522: PPUSH
54523: CALL_OW 268
54527: STR
54528: PUSH
54529: LD_STRING , 
54531: STR
54532: PUSH
54533: LD_VAR 0 3
54537: PPUSH
54538: LD_INT 2
54540: PPUSH
54541: CALL_OW 268
54545: STR
54546: PUSH
54547: LD_STRING ],
54549: STR
54550: PPUSH
54551: CALL_OW 561
// end ;
54555: GO 54449
54557: POP
54558: POP
// AddToLog ( ]; ) ;
54559: LD_STRING ];
54561: PPUSH
54562: CALL_OW 561
// end ;
54566: LD_VAR 0 2
54570: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54571: LD_INT 0
54573: PPUSH
54574: PPUSH
54575: PPUSH
54576: PPUSH
54577: PPUSH
// if not area or not rate or not max then
54578: LD_VAR 0 1
54582: NOT
54583: PUSH
54584: LD_VAR 0 2
54588: NOT
54589: OR
54590: PUSH
54591: LD_VAR 0 4
54595: NOT
54596: OR
54597: IFFALSE 54601
// exit ;
54599: GO 54793
// while 1 do
54601: LD_INT 1
54603: IFFALSE 54793
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54605: LD_ADDR_VAR 0 9
54609: PUSH
54610: LD_VAR 0 1
54614: PPUSH
54615: LD_INT 1
54617: PPUSH
54618: CALL_OW 287
54622: PUSH
54623: LD_INT 10
54625: MUL
54626: ST_TO_ADDR
// r := rate / 10 ;
54627: LD_ADDR_VAR 0 7
54631: PUSH
54632: LD_VAR 0 2
54636: PUSH
54637: LD_INT 10
54639: DIVREAL
54640: ST_TO_ADDR
// time := 1 1$00 ;
54641: LD_ADDR_VAR 0 8
54645: PUSH
54646: LD_INT 2100
54648: ST_TO_ADDR
// if amount < min then
54649: LD_VAR 0 9
54653: PUSH
54654: LD_VAR 0 3
54658: LESS
54659: IFFALSE 54677
// r := r * 2 else
54661: LD_ADDR_VAR 0 7
54665: PUSH
54666: LD_VAR 0 7
54670: PUSH
54671: LD_INT 2
54673: MUL
54674: ST_TO_ADDR
54675: GO 54703
// if amount > max then
54677: LD_VAR 0 9
54681: PUSH
54682: LD_VAR 0 4
54686: GREATER
54687: IFFALSE 54703
// r := r / 2 ;
54689: LD_ADDR_VAR 0 7
54693: PUSH
54694: LD_VAR 0 7
54698: PUSH
54699: LD_INT 2
54701: DIVREAL
54702: ST_TO_ADDR
// time := time / r ;
54703: LD_ADDR_VAR 0 8
54707: PUSH
54708: LD_VAR 0 8
54712: PUSH
54713: LD_VAR 0 7
54717: DIVREAL
54718: ST_TO_ADDR
// if time < 0 then
54719: LD_VAR 0 8
54723: PUSH
54724: LD_INT 0
54726: LESS
54727: IFFALSE 54744
// time := time * - 1 ;
54729: LD_ADDR_VAR 0 8
54733: PUSH
54734: LD_VAR 0 8
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: MUL
54743: ST_TO_ADDR
// wait ( time ) ;
54744: LD_VAR 0 8
54748: PPUSH
54749: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54753: LD_INT 35
54755: PPUSH
54756: LD_INT 875
54758: PPUSH
54759: CALL_OW 12
54763: PPUSH
54764: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54768: LD_INT 1
54770: PPUSH
54771: LD_INT 5
54773: PPUSH
54774: CALL_OW 12
54778: PPUSH
54779: LD_VAR 0 1
54783: PPUSH
54784: LD_INT 1
54786: PPUSH
54787: CALL_OW 55
// end ;
54791: GO 54601
// end ;
54793: LD_VAR 0 5
54797: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54798: LD_INT 0
54800: PPUSH
54801: PPUSH
54802: PPUSH
54803: PPUSH
54804: PPUSH
54805: PPUSH
54806: PPUSH
54807: PPUSH
// if not turrets or not factories then
54808: LD_VAR 0 1
54812: NOT
54813: PUSH
54814: LD_VAR 0 2
54818: NOT
54819: OR
54820: IFFALSE 54824
// exit ;
54822: GO 55131
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54824: LD_ADDR_VAR 0 10
54828: PUSH
54829: LD_INT 5
54831: PUSH
54832: LD_INT 6
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: LD_INT 4
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: LD_INT 5
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 24
54866: PUSH
54867: LD_INT 25
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 23
54876: PUSH
54877: LD_INT 27
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 42
54890: PUSH
54891: LD_INT 43
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 44
54900: PUSH
54901: LD_INT 46
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 45
54910: PUSH
54911: LD_INT 47
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: ST_TO_ADDR
// result := [ ] ;
54928: LD_ADDR_VAR 0 3
54932: PUSH
54933: EMPTY
54934: ST_TO_ADDR
// for i in turrets do
54935: LD_ADDR_VAR 0 4
54939: PUSH
54940: LD_VAR 0 1
54944: PUSH
54945: FOR_IN
54946: IFFALSE 55129
// begin nat := GetNation ( i ) ;
54948: LD_ADDR_VAR 0 7
54952: PUSH
54953: LD_VAR 0 4
54957: PPUSH
54958: CALL_OW 248
54962: ST_TO_ADDR
// weapon := 0 ;
54963: LD_ADDR_VAR 0 8
54967: PUSH
54968: LD_INT 0
54970: ST_TO_ADDR
// if not nat then
54971: LD_VAR 0 7
54975: NOT
54976: IFFALSE 54980
// continue ;
54978: GO 54945
// for j in list [ nat ] do
54980: LD_ADDR_VAR 0 5
54984: PUSH
54985: LD_VAR 0 10
54989: PUSH
54990: LD_VAR 0 7
54994: ARRAY
54995: PUSH
54996: FOR_IN
54997: IFFALSE 55038
// if GetBWeapon ( i ) = j [ 1 ] then
54999: LD_VAR 0 4
55003: PPUSH
55004: CALL_OW 269
55008: PUSH
55009: LD_VAR 0 5
55013: PUSH
55014: LD_INT 1
55016: ARRAY
55017: EQUAL
55018: IFFALSE 55036
// begin weapon := j [ 2 ] ;
55020: LD_ADDR_VAR 0 8
55024: PUSH
55025: LD_VAR 0 5
55029: PUSH
55030: LD_INT 2
55032: ARRAY
55033: ST_TO_ADDR
// break ;
55034: GO 55038
// end ;
55036: GO 54996
55038: POP
55039: POP
// if not weapon then
55040: LD_VAR 0 8
55044: NOT
55045: IFFALSE 55049
// continue ;
55047: GO 54945
// for k in factories do
55049: LD_ADDR_VAR 0 6
55053: PUSH
55054: LD_VAR 0 2
55058: PUSH
55059: FOR_IN
55060: IFFALSE 55125
// begin weapons := AvailableWeaponList ( k ) ;
55062: LD_ADDR_VAR 0 9
55066: PUSH
55067: LD_VAR 0 6
55071: PPUSH
55072: CALL_OW 478
55076: ST_TO_ADDR
// if not weapons then
55077: LD_VAR 0 9
55081: NOT
55082: IFFALSE 55086
// continue ;
55084: GO 55059
// if weapon in weapons then
55086: LD_VAR 0 8
55090: PUSH
55091: LD_VAR 0 9
55095: IN
55096: IFFALSE 55123
// begin result := [ i , weapon ] ;
55098: LD_ADDR_VAR 0 3
55102: PUSH
55103: LD_VAR 0 4
55107: PUSH
55108: LD_VAR 0 8
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// exit ;
55117: POP
55118: POP
55119: POP
55120: POP
55121: GO 55131
// end ; end ;
55123: GO 55059
55125: POP
55126: POP
// end ;
55127: GO 54945
55129: POP
55130: POP
// end ;
55131: LD_VAR 0 3
55135: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55136: LD_INT 0
55138: PPUSH
// if not side or side > 8 then
55139: LD_VAR 0 3
55143: NOT
55144: PUSH
55145: LD_VAR 0 3
55149: PUSH
55150: LD_INT 8
55152: GREATER
55153: OR
55154: IFFALSE 55158
// exit ;
55156: GO 55217
// if not range then
55158: LD_VAR 0 4
55162: NOT
55163: IFFALSE 55174
// range := - 12 ;
55165: LD_ADDR_VAR 0 4
55169: PUSH
55170: LD_INT 12
55172: NEG
55173: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55174: LD_VAR 0 1
55178: PPUSH
55179: LD_VAR 0 2
55183: PPUSH
55184: LD_VAR 0 3
55188: PPUSH
55189: LD_VAR 0 4
55193: PPUSH
55194: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55198: LD_VAR 0 1
55202: PPUSH
55203: LD_VAR 0 2
55207: PPUSH
55208: LD_VAR 0 3
55212: PPUSH
55213: CALL_OW 331
// end ;
55217: LD_VAR 0 5
55221: RET
// export function Video ( mode ) ; begin
55222: LD_INT 0
55224: PPUSH
// ingame_video = mode ;
55225: LD_ADDR_OWVAR 52
55229: PUSH
55230: LD_VAR 0 1
55234: ST_TO_ADDR
// interface_hidden = mode ;
55235: LD_ADDR_OWVAR 54
55239: PUSH
55240: LD_VAR 0 1
55244: ST_TO_ADDR
// end ;
55245: LD_VAR 0 2
55249: RET
// export function Join ( array , element ) ; begin
55250: LD_INT 0
55252: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55253: LD_ADDR_VAR 0 3
55257: PUSH
55258: LD_VAR 0 1
55262: PPUSH
55263: LD_VAR 0 1
55267: PUSH
55268: LD_INT 1
55270: PLUS
55271: PPUSH
55272: LD_VAR 0 2
55276: PPUSH
55277: CALL_OW 1
55281: ST_TO_ADDR
// end ;
55282: LD_VAR 0 3
55286: RET
// export function JoinUnion ( array , element ) ; begin
55287: LD_INT 0
55289: PPUSH
// result := array union element ;
55290: LD_ADDR_VAR 0 3
55294: PUSH
55295: LD_VAR 0 1
55299: PUSH
55300: LD_VAR 0 2
55304: UNION
55305: ST_TO_ADDR
// end ;
55306: LD_VAR 0 3
55310: RET
// export function GetBehemoths ( side ) ; begin
55311: LD_INT 0
55313: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55314: LD_ADDR_VAR 0 2
55318: PUSH
55319: LD_INT 22
55321: PUSH
55322: LD_VAR 0 1
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 31
55333: PUSH
55334: LD_INT 25
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PPUSH
55345: CALL_OW 69
55349: ST_TO_ADDR
// end ;
55350: LD_VAR 0 2
55354: RET
// export function Shuffle ( array ) ; var i , index ; begin
55355: LD_INT 0
55357: PPUSH
55358: PPUSH
55359: PPUSH
// result := [ ] ;
55360: LD_ADDR_VAR 0 2
55364: PUSH
55365: EMPTY
55366: ST_TO_ADDR
// if not array then
55367: LD_VAR 0 1
55371: NOT
55372: IFFALSE 55376
// exit ;
55374: GO 55475
// Randomize ;
55376: CALL_OW 10
// for i = array downto 1 do
55380: LD_ADDR_VAR 0 3
55384: PUSH
55385: DOUBLE
55386: LD_VAR 0 1
55390: INC
55391: ST_TO_ADDR
55392: LD_INT 1
55394: PUSH
55395: FOR_DOWNTO
55396: IFFALSE 55473
// begin index := rand ( 1 , array ) ;
55398: LD_ADDR_VAR 0 4
55402: PUSH
55403: LD_INT 1
55405: PPUSH
55406: LD_VAR 0 1
55410: PPUSH
55411: CALL_OW 12
55415: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55416: LD_ADDR_VAR 0 2
55420: PUSH
55421: LD_VAR 0 2
55425: PPUSH
55426: LD_VAR 0 2
55430: PUSH
55431: LD_INT 1
55433: PLUS
55434: PPUSH
55435: LD_VAR 0 1
55439: PUSH
55440: LD_VAR 0 4
55444: ARRAY
55445: PPUSH
55446: CALL_OW 2
55450: ST_TO_ADDR
// array := Delete ( array , index ) ;
55451: LD_ADDR_VAR 0 1
55455: PUSH
55456: LD_VAR 0 1
55460: PPUSH
55461: LD_VAR 0 4
55465: PPUSH
55466: CALL_OW 3
55470: ST_TO_ADDR
// end ;
55471: GO 55395
55473: POP
55474: POP
// end ;
55475: LD_VAR 0 2
55479: RET
// export function GetBaseMaterials ( base ) ; begin
55480: LD_INT 0
55482: PPUSH
// result := [ 0 , 0 , 0 ] ;
55483: LD_ADDR_VAR 0 2
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// if not base then
55502: LD_VAR 0 1
55506: NOT
55507: IFFALSE 55511
// exit ;
55509: GO 55560
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55511: LD_ADDR_VAR 0 2
55515: PUSH
55516: LD_VAR 0 1
55520: PPUSH
55521: LD_INT 1
55523: PPUSH
55524: CALL_OW 275
55528: PUSH
55529: LD_VAR 0 1
55533: PPUSH
55534: LD_INT 2
55536: PPUSH
55537: CALL_OW 275
55541: PUSH
55542: LD_VAR 0 1
55546: PPUSH
55547: LD_INT 3
55549: PPUSH
55550: CALL_OW 275
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: ST_TO_ADDR
// end ;
55560: LD_VAR 0 2
55564: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55565: LD_INT 0
55567: PPUSH
55568: PPUSH
// result := array ;
55569: LD_ADDR_VAR 0 3
55573: PUSH
55574: LD_VAR 0 1
55578: ST_TO_ADDR
// if size > 0 then
55579: LD_VAR 0 2
55583: PUSH
55584: LD_INT 0
55586: GREATER
55587: IFFALSE 55633
// for i := array downto size do
55589: LD_ADDR_VAR 0 4
55593: PUSH
55594: DOUBLE
55595: LD_VAR 0 1
55599: INC
55600: ST_TO_ADDR
55601: LD_VAR 0 2
55605: PUSH
55606: FOR_DOWNTO
55607: IFFALSE 55631
// result := Delete ( result , result ) ;
55609: LD_ADDR_VAR 0 3
55613: PUSH
55614: LD_VAR 0 3
55618: PPUSH
55619: LD_VAR 0 3
55623: PPUSH
55624: CALL_OW 3
55628: ST_TO_ADDR
55629: GO 55606
55631: POP
55632: POP
// end ;
55633: LD_VAR 0 3
55637: RET
// export function ComExit ( unit ) ; var tmp ; begin
55638: LD_INT 0
55640: PPUSH
55641: PPUSH
// if not IsInUnit ( unit ) then
55642: LD_VAR 0 1
55646: PPUSH
55647: CALL_OW 310
55651: NOT
55652: IFFALSE 55656
// exit ;
55654: GO 55716
// tmp := IsInUnit ( unit ) ;
55656: LD_ADDR_VAR 0 3
55660: PUSH
55661: LD_VAR 0 1
55665: PPUSH
55666: CALL_OW 310
55670: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55671: LD_VAR 0 3
55675: PPUSH
55676: CALL_OW 247
55680: PUSH
55681: LD_INT 2
55683: EQUAL
55684: IFFALSE 55697
// ComExitVehicle ( unit ) else
55686: LD_VAR 0 1
55690: PPUSH
55691: CALL_OW 121
55695: GO 55706
// ComExitBuilding ( unit ) ;
55697: LD_VAR 0 1
55701: PPUSH
55702: CALL_OW 122
// result := tmp ;
55706: LD_ADDR_VAR 0 2
55710: PUSH
55711: LD_VAR 0 3
55715: ST_TO_ADDR
// end ;
55716: LD_VAR 0 2
55720: RET
// export function ResetHc ; begin
55721: LD_INT 0
55723: PPUSH
// InitHc ;
55724: CALL_OW 19
// hc_importance := 0 ;
55728: LD_ADDR_OWVAR 32
55732: PUSH
55733: LD_INT 0
55735: ST_TO_ADDR
// end ;
55736: LD_VAR 0 1
55740: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55741: LD_INT 0
55743: PPUSH
55744: PPUSH
55745: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55746: LD_ADDR_VAR 0 6
55750: PUSH
55751: LD_VAR 0 1
55755: PUSH
55756: LD_VAR 0 3
55760: PLUS
55761: PUSH
55762: LD_INT 2
55764: DIV
55765: ST_TO_ADDR
// if _x < 0 then
55766: LD_VAR 0 6
55770: PUSH
55771: LD_INT 0
55773: LESS
55774: IFFALSE 55791
// _x := _x * - 1 ;
55776: LD_ADDR_VAR 0 6
55780: PUSH
55781: LD_VAR 0 6
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: MUL
55790: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55791: LD_ADDR_VAR 0 7
55795: PUSH
55796: LD_VAR 0 2
55800: PUSH
55801: LD_VAR 0 4
55805: PLUS
55806: PUSH
55807: LD_INT 2
55809: DIV
55810: ST_TO_ADDR
// if _y < 0 then
55811: LD_VAR 0 7
55815: PUSH
55816: LD_INT 0
55818: LESS
55819: IFFALSE 55836
// _y := _y * - 1 ;
55821: LD_ADDR_VAR 0 7
55825: PUSH
55826: LD_VAR 0 7
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: MUL
55835: ST_TO_ADDR
// result := [ _x , _y ] ;
55836: LD_ADDR_VAR 0 5
55840: PUSH
55841: LD_VAR 0 6
55845: PUSH
55846: LD_VAR 0 7
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// end ;
55855: LD_VAR 0 5
55859: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55860: LD_INT 0
55862: PPUSH
55863: PPUSH
55864: PPUSH
55865: PPUSH
// task := GetTaskList ( unit ) ;
55866: LD_ADDR_VAR 0 7
55870: PUSH
55871: LD_VAR 0 1
55875: PPUSH
55876: CALL_OW 437
55880: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55881: LD_VAR 0 7
55885: NOT
55886: PUSH
55887: LD_VAR 0 1
55891: PPUSH
55892: LD_VAR 0 2
55896: PPUSH
55897: CALL_OW 308
55901: NOT
55902: AND
55903: IFFALSE 55907
// exit ;
55905: GO 56025
// if IsInArea ( unit , area ) then
55907: LD_VAR 0 1
55911: PPUSH
55912: LD_VAR 0 2
55916: PPUSH
55917: CALL_OW 308
55921: IFFALSE 55939
// begin ComMoveToArea ( unit , goAway ) ;
55923: LD_VAR 0 1
55927: PPUSH
55928: LD_VAR 0 3
55932: PPUSH
55933: CALL_OW 113
// exit ;
55937: GO 56025
// end ; if task [ 1 ] [ 1 ] <> M then
55939: LD_VAR 0 7
55943: PUSH
55944: LD_INT 1
55946: ARRAY
55947: PUSH
55948: LD_INT 1
55950: ARRAY
55951: PUSH
55952: LD_STRING M
55954: NONEQUAL
55955: IFFALSE 55959
// exit ;
55957: GO 56025
// x := task [ 1 ] [ 2 ] ;
55959: LD_ADDR_VAR 0 5
55963: PUSH
55964: LD_VAR 0 7
55968: PUSH
55969: LD_INT 1
55971: ARRAY
55972: PUSH
55973: LD_INT 2
55975: ARRAY
55976: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55977: LD_ADDR_VAR 0 6
55981: PUSH
55982: LD_VAR 0 7
55986: PUSH
55987: LD_INT 1
55989: ARRAY
55990: PUSH
55991: LD_INT 3
55993: ARRAY
55994: ST_TO_ADDR
// if InArea ( x , y , area ) then
55995: LD_VAR 0 5
55999: PPUSH
56000: LD_VAR 0 6
56004: PPUSH
56005: LD_VAR 0 2
56009: PPUSH
56010: CALL_OW 309
56014: IFFALSE 56025
// ComStop ( unit ) ;
56016: LD_VAR 0 1
56020: PPUSH
56021: CALL_OW 141
// end ;
56025: LD_VAR 0 4
56029: RET
// export function Abs ( value ) ; begin
56030: LD_INT 0
56032: PPUSH
// result := value ;
56033: LD_ADDR_VAR 0 2
56037: PUSH
56038: LD_VAR 0 1
56042: ST_TO_ADDR
// if value < 0 then
56043: LD_VAR 0 1
56047: PUSH
56048: LD_INT 0
56050: LESS
56051: IFFALSE 56068
// result := value * - 1 ;
56053: LD_ADDR_VAR 0 2
56057: PUSH
56058: LD_VAR 0 1
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: MUL
56067: ST_TO_ADDR
// end ;
56068: LD_VAR 0 2
56072: RET
// export function ComNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56073: LD_INT 0
56075: PPUSH
56076: PPUSH
56077: PPUSH
56078: PPUSH
56079: PPUSH
56080: PPUSH
56081: PPUSH
56082: PPUSH
// if not unit or not building then
56083: LD_VAR 0 1
56087: NOT
56088: PUSH
56089: LD_VAR 0 2
56093: NOT
56094: OR
56095: IFFALSE 56099
// exit ;
56097: GO 56325
// x := GetX ( building ) ;
56099: LD_ADDR_VAR 0 4
56103: PUSH
56104: LD_VAR 0 2
56108: PPUSH
56109: CALL_OW 250
56113: ST_TO_ADDR
// y := GetY ( building ) ;
56114: LD_ADDR_VAR 0 6
56118: PUSH
56119: LD_VAR 0 2
56123: PPUSH
56124: CALL_OW 251
56128: ST_TO_ADDR
// d := GetDir ( building ) ;
56129: LD_ADDR_VAR 0 8
56133: PUSH
56134: LD_VAR 0 2
56138: PPUSH
56139: CALL_OW 254
56143: ST_TO_ADDR
// r := 4 ;
56144: LD_ADDR_VAR 0 9
56148: PUSH
56149: LD_INT 4
56151: ST_TO_ADDR
// for i := 1 to 5 do
56152: LD_ADDR_VAR 0 10
56156: PUSH
56157: DOUBLE
56158: LD_INT 1
56160: DEC
56161: ST_TO_ADDR
56162: LD_INT 5
56164: PUSH
56165: FOR_TO
56166: IFFALSE 56323
// begin _x := ShiftX ( x , d , r + i ) ;
56168: LD_ADDR_VAR 0 5
56172: PUSH
56173: LD_VAR 0 4
56177: PPUSH
56178: LD_VAR 0 8
56182: PPUSH
56183: LD_VAR 0 9
56187: PUSH
56188: LD_VAR 0 10
56192: PLUS
56193: PPUSH
56194: CALL_OW 272
56198: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56199: LD_ADDR_VAR 0 7
56203: PUSH
56204: LD_VAR 0 6
56208: PPUSH
56209: LD_VAR 0 8
56213: PPUSH
56214: LD_VAR 0 9
56218: PUSH
56219: LD_VAR 0 10
56223: PLUS
56224: PPUSH
56225: CALL_OW 273
56229: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56230: LD_VAR 0 5
56234: PPUSH
56235: LD_VAR 0 7
56239: PPUSH
56240: CALL_OW 488
56244: PUSH
56245: LD_VAR 0 5
56249: PPUSH
56250: LD_VAR 0 7
56254: PPUSH
56255: CALL_OW 428
56259: PPUSH
56260: CALL_OW 247
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: IN
56275: NOT
56276: AND
56277: IFFALSE 56321
// begin ComMoveXY ( unit , _x , _y ) ;
56279: LD_VAR 0 1
56283: PPUSH
56284: LD_VAR 0 5
56288: PPUSH
56289: LD_VAR 0 7
56293: PPUSH
56294: CALL_OW 111
// result := [ _x , _y ] ;
56298: LD_ADDR_VAR 0 3
56302: PUSH
56303: LD_VAR 0 5
56307: PUSH
56308: LD_VAR 0 7
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: ST_TO_ADDR
// exit ;
56317: POP
56318: POP
56319: GO 56325
// end ; end ;
56321: GO 56165
56323: POP
56324: POP
// end ;
56325: LD_VAR 0 3
56329: RET
