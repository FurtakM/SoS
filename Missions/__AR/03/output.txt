// starting begin ResetFog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// PrepareTrigger ;
   8: CALL 29 0 0
// CheckCathy ;
  12: CALL 687 0 0
// PrepareArabian ;
  16: CALL 747 0 0
// PreparePeople ;
  20: CALL 101 0 0
// PrepareMovie ;
  24: CALL 3145 0 0
// end ;
  28: END
// export CathyWasCatch , InVeh , MovieStart , KarlaAlone ; function PrepareTrigger ; begin
  29: LD_INT 0
  31: PPUSH
// CathyWasCatch = false ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// MovieStart = false ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// InVeh = false ;
  48: LD_ADDR_EXP 2
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// KarlaAlone = false ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// end ;
  64: LD_VAR 0 1
  68: RET
// every 0 0$01 trigger Dialogue_Skipped do
  69: LD_OWVAR 59
  73: IFFALSE 100
  75: GO 77
  77: DISABLE
// begin SaveCharacters ( Louis , Louis ) ;
  78: LD_EXP 5
  82: PPUSH
  83: LD_STRING Louis
  85: PPUSH
  86: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
  90: LD_INT 1
  92: PPUSH
  93: LD_STRING %_cont
  95: PPUSH
  96: CALL_OW 340
// end ; end_of_file
 100: END
// export Louis , men1 , men2 , men3 , Martin , Karla , Dwein , Gunther ; export MyVeh ; export ArPep ; export ArVeh ; export function PreparePeople ; begin
 101: LD_INT 0
 103: PPUSH
// uc_side = 2 ;
 104: LD_ADDR_OWVAR 20
 108: PUSH
 109: LD_INT 2
 111: ST_TO_ADDR
// uc_nation = 2 ;
 112: LD_ADDR_OWVAR 21
 116: PUSH
 117: LD_INT 2
 119: ST_TO_ADDR
// Louis := CreateCharacter ( Louis ) ;
 120: LD_ADDR_EXP 5
 124: PUSH
 125: LD_STRING Louis
 127: PPUSH
 128: CALL_OW 34
 132: ST_TO_ADDR
// PlaceUnitArea ( Louis , StartA , false ) ;
 133: LD_EXP 5
 137: PPUSH
 138: LD_INT 1
 140: PPUSH
 141: LD_INT 0
 143: PPUSH
 144: CALL_OW 49
// ComTurnXY ( Louis , 42 , 62 ) ;
 148: LD_EXP 5
 152: PPUSH
 153: LD_INT 42
 155: PPUSH
 156: LD_INT 62
 158: PPUSH
 159: CALL_OW 118
// ArVeh = LoadVariable ( VehReady , [ ] ) ;
 163: LD_ADDR_EXP 15
 167: PUSH
 168: LD_STRING VehReady
 170: PPUSH
 171: EMPTY
 172: PPUSH
 173: CALL_OW 30
 177: ST_TO_ADDR
// if ArVeh > 0 then
 178: LD_EXP 15
 182: PUSH
 183: LD_INT 0
 185: GREATER
 186: IFFALSE 272
// begin vc_chassis = ArVeh [ 1 ] ;
 188: LD_ADDR_OWVAR 37
 192: PUSH
 193: LD_EXP 15
 197: PUSH
 198: LD_INT 1
 200: ARRAY
 201: ST_TO_ADDR
// vc_engine = ArVeh [ 2 ] ;
 202: LD_ADDR_OWVAR 39
 206: PUSH
 207: LD_EXP 15
 211: PUSH
 212: LD_INT 2
 214: ARRAY
 215: ST_TO_ADDR
// vc_control = ArVeh [ 3 ] ;
 216: LD_ADDR_OWVAR 38
 220: PUSH
 221: LD_EXP 15
 225: PUSH
 226: LD_INT 3
 228: ARRAY
 229: ST_TO_ADDR
// vc_weapon = ArVeh [ 4 ] ;
 230: LD_ADDR_OWVAR 40
 234: PUSH
 235: LD_EXP 15
 239: PUSH
 240: LD_INT 4
 242: ARRAY
 243: ST_TO_ADDR
// MyVeh = CreateVehicle ;
 244: LD_ADDR_EXP 13
 248: PUSH
 249: CALL_OW 45
 253: ST_TO_ADDR
// PlaceUnitXY ( MyVeh , 34 , 64 , false ) ;
 254: LD_EXP 13
 258: PPUSH
 259: LD_INT 34
 261: PPUSH
 262: LD_INT 64
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: CALL_OW 48
// end ; if TestCharacters ( Martin_02 ) then
 272: LD_STRING Martin_02
 274: PPUSH
 275: CALL_OW 28
 279: IFFALSE 308
// begin Martin := CreateCharacter ( Martin_02 ) ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: LD_STRING Martin_02
 288: PPUSH
 289: CALL_OW 34
 293: ST_TO_ADDR
// SaveCharacters ( Martin , Martin_02 ) ;
 294: LD_EXP 9
 298: PPUSH
 299: LD_STRING Martin_02
 301: PPUSH
 302: CALL_OW 38
// end else
 306: GO 373
// begin hc_class = 3 ;
 308: LD_ADDR_OWVAR 28
 312: PUSH
 313: LD_INT 3
 315: ST_TO_ADDR
// hc_sex = sex_male ;
 316: LD_ADDR_OWVAR 27
 320: PUSH
 321: LD_INT 1
 323: ST_TO_ADDR
// hc_gallery =  ;
 324: LD_ADDR_OWVAR 33
 328: PUSH
 329: LD_STRING 
 331: ST_TO_ADDR
// hc_name =  ;
 332: LD_ADDR_OWVAR 26
 336: PUSH
 337: LD_STRING 
 339: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 340: LD_ADDR_OWVAR 31
 344: PUSH
 345: LD_INT 0
 347: PUSH
 348: LD_INT 0
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: LD_INT 0
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// Martin = CreateHuman ;
 363: LD_ADDR_EXP 9
 367: PUSH
 368: CALL_OW 44
 372: ST_TO_ADDR
// end ; if MyVeh then
 373: LD_EXP 13
 377: IFFALSE 403
// begin InVeh = true ;
 379: LD_ADDR_EXP 2
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// PlaceHumanInUnit ( Martin , MyVeh ) ;
 387: LD_EXP 9
 391: PPUSH
 392: LD_EXP 13
 396: PPUSH
 397: CALL_OW 52
// end else
 401: GO 441
// begin InVeh = false ;
 403: LD_ADDR_EXP 2
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// PlaceUnitArea ( Martin , StartA , false ) ;
 411: LD_EXP 9
 415: PPUSH
 416: LD_INT 1
 418: PPUSH
 419: LD_INT 0
 421: PPUSH
 422: CALL_OW 49
// ComTurnXY ( Martin , 35 , 30 ) ;
 426: LD_EXP 9
 430: PPUSH
 431: LD_INT 35
 433: PPUSH
 434: LD_INT 30
 436: PPUSH
 437: CALL_OW 118
// end ; hc_class = 1 ;
 441: LD_ADDR_OWVAR 28
 445: PUSH
 446: LD_INT 1
 448: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
 449: LD_ADDR_OWVAR 27
 453: PUSH
 454: LD_INT 1
 456: PPUSH
 457: LD_INT 2
 459: PPUSH
 460: CALL_OW 12
 464: ST_TO_ADDR
// hc_gallery =  ;
 465: LD_ADDR_OWVAR 33
 469: PUSH
 470: LD_STRING 
 472: ST_TO_ADDR
// hc_name =  ;
 473: LD_ADDR_OWVAR 26
 477: PUSH
 478: LD_STRING 
 480: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 481: LD_ADDR_OWVAR 31
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: LD_INT 0
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: ST_TO_ADDR
// Men1 = CreateHuman ;
 504: LD_ADDR_EXP 6
 508: PUSH
 509: CALL_OW 44
 513: ST_TO_ADDR
// Men2 = CreateHuman ;
 514: LD_ADDR_EXP 7
 518: PUSH
 519: CALL_OW 44
 523: ST_TO_ADDR
// Men3 = CreateHuman ;
 524: LD_ADDR_EXP 8
 528: PUSH
 529: CALL_OW 44
 533: ST_TO_ADDR
// PlaceUnitArea ( Men1 , StartA , false ) ;
 534: LD_EXP 6
 538: PPUSH
 539: LD_INT 1
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL_OW 49
// ComTurnXY ( Men1 , 42 , 62 ) ;
 549: LD_EXP 6
 553: PPUSH
 554: LD_INT 42
 556: PPUSH
 557: LD_INT 62
 559: PPUSH
 560: CALL_OW 118
// PlaceUnitArea ( Men2 , StartA , false ) ;
 564: LD_EXP 7
 568: PPUSH
 569: LD_INT 1
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 49
// ComTurnXY ( Men2 , 42 , 62 ) ;
 579: LD_EXP 7
 583: PPUSH
 584: LD_INT 42
 586: PPUSH
 587: LD_INT 62
 589: PPUSH
 590: CALL_OW 118
// PlaceUnitArea ( Men3 , StartA , false ) ;
 594: LD_EXP 8
 598: PPUSH
 599: LD_INT 1
 601: PPUSH
 602: LD_INT 0
 604: PPUSH
 605: CALL_OW 49
// ComTurnXY ( Men3 , 42 , 62 ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_INT 42
 616: PPUSH
 617: LD_INT 62
 619: PPUSH
 620: CALL_OW 118
// ArPep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
 624: LD_ADDR_EXP 14
 628: PUSH
 629: LD_INT 22
 631: PUSH
 632: LD_INT 2
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 21
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: ST_TO_ADDR
// end ;
 658: LD_VAR 0 1
 662: RET
// every 1 trigger MovieStart = true do
 663: LD_EXP 3
 667: PUSH
 668: LD_INT 1
 670: EQUAL
 671: IFFALSE 686
 673: GO 675
 675: DISABLE
// begin CenterNowOnUnits ( Louis ) ;
 676: LD_EXP 5
 680: PPUSH
 681: CALL_OW 87
// enable ;
 685: ENABLE
// end ;
 686: END
// export Cathy ; export function CheckCathy ; begin
 687: LD_INT 0
 689: PPUSH
// if TestCharacters ( Cathy ) then
 690: LD_STRING Cathy
 692: PPUSH
 693: CALL_OW 28
 697: IFFALSE 734
// begin Cathy := CreateCharacter ( Cathy ) ;
 699: LD_ADDR_EXP 16
 703: PUSH
 704: LD_STRING Cathy
 706: PPUSH
 707: CALL_OW 34
 711: ST_TO_ADDR
// SaveCharacters ( Cathy , Cathy ) ;
 712: LD_EXP 16
 716: PPUSH
 717: LD_STRING Cathy
 719: PPUSH
 720: CALL_OW 38
// CathyWasCatch = true ;
 724: LD_ADDR_EXP 1
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 742
// begin CathyWasCatch = false ;
 734: LD_ADDR_EXP 1
 738: PUSH
 739: LD_INT 0
 741: ST_TO_ADDR
// end ; end ; end_of_file
 742: LD_VAR 0 1
 746: RET
// export Gensher , Abdul , Omar , Farmer , Heike , Saliba , Nahas , Kurt , Philip ; export Amech1 , Amech2 , ASol1 , ASol2 , AEng ; export function PrepareArabian ; var i , un , tw , br , l ; begin
 747: LD_INT 0
 749: PPUSH
 750: PPUSH
 751: PPUSH
 752: PPUSH
 753: PPUSH
 754: PPUSH
// SetBName ( ar_dep1 , NewMekka1 ) ;
 755: LD_INT 2
 757: PPUSH
 758: LD_STRING NewMekka1
 760: PPUSH
 761: CALL_OW 500
// SetBName ( ar_dep2 , NewMekka2 ) ;
 765: LD_INT 70
 767: PPUSH
 768: LD_STRING NewMekka2
 770: PPUSH
 771: CALL_OW 500
// SetBName ( ar_dep3 , estb ) ;
 775: LD_INT 117
 777: PPUSH
 778: LD_STRING estb
 780: PPUSH
 781: CALL_OW 500
// uc_side = 5 ;
 785: LD_ADDR_OWVAR 20
 789: PUSH
 790: LD_INT 5
 792: ST_TO_ADDR
// uc_nation = 2 ;
 793: LD_ADDR_OWVAR 21
 797: PUSH
 798: LD_INT 2
 800: ST_TO_ADDR
// tw := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] ] ) ;
 801: LD_ADDR_VAR 0 4
 805: PUSH
 806: LD_INT 22
 808: PUSH
 809: LD_INT 5
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: LD_INT 30
 818: PUSH
 819: LD_INT 32
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PPUSH
 830: CALL_OW 69
 834: ST_TO_ADDR
// br := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_barracks ] ] ) ;
 835: LD_ADDR_VAR 0 5
 839: PUSH
 840: LD_INT 22
 842: PUSH
 843: LD_INT 5
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 30
 852: PUSH
 853: LD_INT 5
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: PPUSH
 864: CALL_OW 69
 868: ST_TO_ADDR
// l := 0 ;
 869: LD_ADDR_VAR 0 6
 873: PUSH
 874: LD_INT 0
 876: ST_TO_ADDR
// hc_class = 11 ;
 877: LD_ADDR_OWVAR 28
 881: PUSH
 882: LD_INT 11
 884: ST_TO_ADDR
// hc_sex = sex_male ;
 885: LD_ADDR_OWVAR 27
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
// hc_gallery = ru ;
 893: LD_ADDR_OWVAR 33
 897: PUSH
 898: LD_STRING ru
 900: ST_TO_ADDR
// hc_face_number = 45 ;
 901: LD_ADDR_OWVAR 34
 905: PUSH
 906: LD_INT 45
 908: ST_TO_ADDR
// hc_name = Abdul Shariff ;
 909: LD_ADDR_OWVAR 26
 913: PUSH
 914: LD_STRING Abdul Shariff
 916: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 917: LD_ADDR_OWVAR 31
 921: PUSH
 922: LD_INT 0
 924: PUSH
 925: LD_INT 0
 927: PUSH
 928: LD_INT 0
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: ST_TO_ADDR
// Abdul = CreateHuman ;
 940: LD_ADDR_EXP 18
 944: PUSH
 945: CALL_OW 44
 949: ST_TO_ADDR
// PlaceUnitXY ( Abdul , 26 , 9 , false ) ;
 950: LD_EXP 18
 954: PPUSH
 955: LD_INT 26
 957: PPUSH
 958: LD_INT 9
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 48
// ComTurnXY ( Abdul , 21 , 9 ) ;
 968: LD_EXP 18
 972: PPUSH
 973: LD_INT 21
 975: PPUSH
 976: LD_INT 9
 978: PPUSH
 979: CALL_OW 118
// hc_class = 1 ;
 983: LD_ADDR_OWVAR 28
 987: PUSH
 988: LD_INT 1
 990: ST_TO_ADDR
// hc_name = Dietrich Gensher ;
 991: LD_ADDR_OWVAR 26
 995: PUSH
 996: LD_STRING Dietrich Gensher
 998: ST_TO_ADDR
// hc_gallery = ru ;
 999: LD_ADDR_OWVAR 33
1003: PUSH
1004: LD_STRING ru
1006: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1007: LD_ADDR_OWVAR 31
1011: PUSH
1012: LD_INT 0
1014: PUSH
1015: LD_INT 0
1017: PUSH
1018: LD_INT 0
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: ST_TO_ADDR
// hc_face_number = 26 ;
1030: LD_ADDR_OWVAR 34
1034: PUSH
1035: LD_INT 26
1037: ST_TO_ADDR
// hc_sex = sex_male ;
1038: LD_ADDR_OWVAR 27
1042: PUSH
1043: LD_INT 1
1045: ST_TO_ADDR
// Gensher = CreateHuman ;
1046: LD_ADDR_EXP 17
1050: PUSH
1051: CALL_OW 44
1055: ST_TO_ADDR
// PlaceUnitXY ( Gensher , 20 , 6 , false ) ;
1056: LD_EXP 17
1060: PPUSH
1061: LD_INT 20
1063: PPUSH
1064: LD_INT 6
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL_OW 48
// ComTurnUnit ( Gensher , Abdul ) ;
1074: LD_EXP 17
1078: PPUSH
1079: LD_EXP 18
1083: PPUSH
1084: CALL_OW 119
// hc_class = 1 ;
1088: LD_ADDR_OWVAR 28
1092: PUSH
1093: LD_INT 1
1095: ST_TO_ADDR
// hc_name = Robert Farmer ;
1096: LD_ADDR_OWVAR 26
1100: PUSH
1101: LD_STRING Robert Farmer
1103: ST_TO_ADDR
// hc_gallery = ru ;
1104: LD_ADDR_OWVAR 33
1108: PUSH
1109: LD_STRING ru
1111: ST_TO_ADDR
// hc_face_number = 44 ;
1112: LD_ADDR_OWVAR 34
1116: PUSH
1117: LD_INT 44
1119: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1120: LD_ADDR_OWVAR 31
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 0
1130: PUSH
1131: LD_INT 0
1133: PUSH
1134: LD_INT 0
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: ST_TO_ADDR
// hc_sex = sex_male ;
1143: LD_ADDR_OWVAR 27
1147: PUSH
1148: LD_INT 1
1150: ST_TO_ADDR
// hc_attr = [ 9 , 10 ] ;
1151: LD_ADDR_OWVAR 29
1155: PUSH
1156: LD_INT 9
1158: PUSH
1159: LD_INT 10
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: ST_TO_ADDR
// Farmer = CreateHuman ;
1166: LD_ADDR_EXP 20
1170: PUSH
1171: CALL_OW 44
1175: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 21 , 8 , false ) ;
1176: LD_EXP 20
1180: PPUSH
1181: LD_INT 21
1183: PPUSH
1184: LD_INT 8
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 48
// ComTurnUnit ( Farmer , Abdul ) ;
1194: LD_EXP 20
1198: PPUSH
1199: LD_EXP 18
1203: PPUSH
1204: CALL_OW 119
// hc_class = 11 ;
1208: LD_ADDR_OWVAR 28
1212: PUSH
1213: LD_INT 11
1215: ST_TO_ADDR
// hc_gallery = E3galery ;
1216: LD_ADDR_OWVAR 33
1220: PUSH
1221: LD_STRING E3galery
1223: ST_TO_ADDR
// hc_face_number = 1 ;
1224: LD_ADDR_OWVAR 34
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// hc_name = Omar Ali ;
1232: LD_ADDR_OWVAR 26
1236: PUSH
1237: LD_STRING Omar Ali
1239: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1240: LD_ADDR_OWVAR 31
1244: PUSH
1245: LD_INT 0
1247: PUSH
1248: LD_INT 0
1250: PUSH
1251: LD_INT 0
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// Omar = CreateHuman ;
1263: LD_ADDR_EXP 19
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// PlaceUnitXY ( Omar , 22 , 10 , false ) ;
1273: LD_EXP 19
1277: PPUSH
1278: LD_INT 22
1280: PPUSH
1281: LD_INT 10
1283: PPUSH
1284: LD_INT 0
1286: PPUSH
1287: CALL_OW 48
// ComTurnUnit ( Omar , Abdul ) ;
1291: LD_EXP 19
1295: PPUSH
1296: LD_EXP 18
1300: PPUSH
1301: CALL_OW 119
// hc_class = 1 ;
1305: LD_ADDR_OWVAR 28
1309: PUSH
1310: LD_INT 1
1312: ST_TO_ADDR
// hc_sex = sex_female ;
1313: LD_ADDR_OWVAR 27
1317: PUSH
1318: LD_INT 2
1320: ST_TO_ADDR
// hc_gallery = HEIKE ;
1321: LD_ADDR_OWVAR 33
1325: PUSH
1326: LD_STRING HEIKE
1328: ST_TO_ADDR
// hc_face_number = 1 ;
1329: LD_ADDR_OWVAR 34
1333: PUSH
1334: LD_INT 1
1336: ST_TO_ADDR
// hc_name = Heike Steyer ;
1337: LD_ADDR_OWVAR 26
1341: PUSH
1342: LD_STRING Heike Steyer
1344: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1345: LD_ADDR_OWVAR 31
1349: PUSH
1350: LD_INT 0
1352: PUSH
1353: LD_INT 0
1355: PUSH
1356: LD_INT 0
1358: PUSH
1359: LD_INT 0
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: ST_TO_ADDR
// Heike = CreateHuman ;
1368: LD_ADDR_EXP 21
1372: PUSH
1373: CALL_OW 44
1377: ST_TO_ADDR
// PlaceUnitXY ( Heike , 23 , 12 , false ) ;
1378: LD_EXP 21
1382: PPUSH
1383: LD_INT 23
1385: PPUSH
1386: LD_INT 12
1388: PPUSH
1389: LD_INT 0
1391: PPUSH
1392: CALL_OW 48
// ComTurnUnit ( Heike , Abdul ) ;
1396: LD_EXP 21
1400: PPUSH
1401: LD_EXP 18
1405: PPUSH
1406: CALL_OW 119
// hc_class = 11 ;
1410: LD_ADDR_OWVAR 28
1414: PUSH
1415: LD_INT 11
1417: ST_TO_ADDR
// hc_gallery = sandar ;
1418: LD_ADDR_OWVAR 33
1422: PUSH
1423: LD_STRING sandar
1425: ST_TO_ADDR
// hc_face_number = 33 ;
1426: LD_ADDR_OWVAR 34
1430: PUSH
1431: LD_INT 33
1433: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
1434: LD_ADDR_OWVAR 26
1438: PUSH
1439: LD_STRING Thabit Muhair Saliba
1441: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1442: LD_ADDR_OWVAR 31
1446: PUSH
1447: LD_INT 0
1449: PUSH
1450: LD_INT 0
1452: PUSH
1453: LD_INT 0
1455: PUSH
1456: LD_INT 0
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: ST_TO_ADDR
// Saliba = CreateHuman ;
1465: LD_ADDR_EXP 22
1469: PUSH
1470: CALL_OW 44
1474: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 24 , 12 , false ) ;
1475: LD_EXP 22
1479: PPUSH
1480: LD_INT 24
1482: PPUSH
1483: LD_INT 12
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL_OW 48
// ComTurnUnit ( Saliba , Abdul ) ;
1493: LD_EXP 22
1497: PPUSH
1498: LD_EXP 18
1502: PPUSH
1503: CALL_OW 119
// hc_class = 11 ;
1507: LD_ADDR_OWVAR 28
1511: PUSH
1512: LD_INT 11
1514: ST_TO_ADDR
// hc_gallery = sandar ;
1515: LD_ADDR_OWVAR 33
1519: PUSH
1520: LD_STRING sandar
1522: ST_TO_ADDR
// hc_face_number = 34 ;
1523: LD_ADDR_OWVAR 34
1527: PUSH
1528: LD_INT 34
1530: ST_TO_ADDR
// hc_name = Ghanim Ishaq Nahas ;
1531: LD_ADDR_OWVAR 26
1535: PUSH
1536: LD_STRING Ghanim Ishaq Nahas
1538: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1539: LD_ADDR_OWVAR 31
1543: PUSH
1544: LD_INT 0
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: LD_INT 0
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: ST_TO_ADDR
// Nahas = CreateHuman ;
1562: LD_ADDR_EXP 23
1566: PUSH
1567: CALL_OW 44
1571: ST_TO_ADDR
// PlaceUnitXY ( Nahas , 22 , 3 , false ) ;
1572: LD_EXP 23
1576: PPUSH
1577: LD_INT 22
1579: PPUSH
1580: LD_INT 3
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 48
// ComTurnUnit ( Nahas , Abdul ) ;
1590: LD_EXP 23
1594: PPUSH
1595: LD_EXP 18
1599: PPUSH
1600: CALL_OW 119
// for i in tw do
1604: LD_ADDR_VAR 0 2
1608: PUSH
1609: LD_VAR 0 4
1613: PUSH
1614: FOR_IN
1615: IFFALSE 1752
// begin if IsInUnit ( i ) = 0 then
1617: LD_VAR 0 2
1621: PPUSH
1622: CALL_OW 310
1626: PUSH
1627: LD_INT 0
1629: EQUAL
1630: IFFALSE 1750
// begin hc_gallery =  ;
1632: LD_ADDR_OWVAR 33
1636: PUSH
1637: LD_STRING 
1639: ST_TO_ADDR
// hc_name =  ;
1640: LD_ADDR_OWVAR 26
1644: PUSH
1645: LD_STRING 
1647: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1648: LD_ADDR_OWVAR 29
1652: PUSH
1653: LD_INT 9
1655: PPUSH
1656: LD_INT 11
1658: PPUSH
1659: CALL_OW 12
1663: PUSH
1664: LD_INT 10
1666: PPUSH
1667: LD_INT 12
1669: PPUSH
1670: CALL_OW 12
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1679: LD_ADDR_OWVAR 31
1683: PUSH
1684: LD_INT 0
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1702: LD_ADDR_OWVAR 27
1706: PUSH
1707: LD_INT 1
1709: PPUSH
1710: LD_INT 2
1712: PPUSH
1713: CALL_OW 12
1717: ST_TO_ADDR
// hc_class = 1 ;
1718: LD_ADDR_OWVAR 28
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// un := CreateHuman ;
1726: LD_ADDR_VAR 0 3
1730: PUSH
1731: CALL_OW 44
1735: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
1736: LD_VAR 0 3
1740: PPUSH
1741: LD_VAR 0 2
1745: PPUSH
1746: CALL_OW 52
// end ; end ;
1750: GO 1614
1752: POP
1753: POP
// for i in br do
1754: LD_ADDR_VAR 0 2
1758: PUSH
1759: LD_VAR 0 5
1763: PUSH
1764: FOR_IN
1765: IFFALSE 1902
// begin if IsInUnit ( i ) = 0 then
1767: LD_VAR 0 2
1771: PPUSH
1772: CALL_OW 310
1776: PUSH
1777: LD_INT 0
1779: EQUAL
1780: IFFALSE 1900
// begin hc_gallery =  ;
1782: LD_ADDR_OWVAR 33
1786: PUSH
1787: LD_STRING 
1789: ST_TO_ADDR
// hc_name =  ;
1790: LD_ADDR_OWVAR 26
1794: PUSH
1795: LD_STRING 
1797: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1798: LD_ADDR_OWVAR 29
1802: PUSH
1803: LD_INT 9
1805: PPUSH
1806: LD_INT 11
1808: PPUSH
1809: CALL_OW 12
1813: PUSH
1814: LD_INT 10
1816: PPUSH
1817: LD_INT 12
1819: PPUSH
1820: CALL_OW 12
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1829: LD_ADDR_OWVAR 31
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 0
1842: PUSH
1843: LD_INT 0
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1852: LD_ADDR_OWVAR 27
1856: PUSH
1857: LD_INT 1
1859: PPUSH
1860: LD_INT 2
1862: PPUSH
1863: CALL_OW 12
1867: ST_TO_ADDR
// hc_class = 1 ;
1868: LD_ADDR_OWVAR 28
1872: PUSH
1873: LD_INT 1
1875: ST_TO_ADDR
// un := CreateHuman ;
1876: LD_ADDR_VAR 0 3
1880: PUSH
1881: CALL_OW 44
1885: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
1886: LD_VAR 0 3
1890: PPUSH
1891: LD_VAR 0 2
1895: PPUSH
1896: CALL_OW 52
// end ; end ;
1900: GO 1764
1902: POP
1903: POP
// l = 0 ;
1904: LD_ADDR_VAR 0 6
1908: PUSH
1909: LD_INT 0
1911: ST_TO_ADDR
// repeat begin hc_gallery =  ;
1912: LD_ADDR_OWVAR 33
1916: PUSH
1917: LD_STRING 
1919: ST_TO_ADDR
// hc_name =  ;
1920: LD_ADDR_OWVAR 26
1924: PUSH
1925: LD_STRING 
1927: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1928: LD_ADDR_OWVAR 29
1932: PUSH
1933: LD_INT 9
1935: PPUSH
1936: LD_INT 11
1938: PPUSH
1939: CALL_OW 12
1943: PUSH
1944: LD_INT 10
1946: PPUSH
1947: LD_INT 12
1949: PPUSH
1950: CALL_OW 12
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 10 , 0 ] ;
1959: LD_ADDR_OWVAR 31
1963: PUSH
1964: LD_INT 0
1966: PUSH
1967: LD_INT 0
1969: PUSH
1970: LD_INT 10
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1982: LD_ADDR_OWVAR 27
1986: PUSH
1987: LD_INT 1
1989: PPUSH
1990: LD_INT 2
1992: PPUSH
1993: CALL_OW 12
1997: ST_TO_ADDR
// hc_class = 3 ;
1998: LD_ADDR_OWVAR 28
2002: PUSH
2003: LD_INT 3
2005: ST_TO_ADDR
// un := CreateHuman ;
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: CALL_OW 44
2015: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_fac ) ;
2016: LD_VAR 0 3
2020: PPUSH
2021: LD_INT 42
2023: PPUSH
2024: CALL_OW 52
// l = l + 1 ;
2028: LD_ADDR_VAR 0 6
2032: PUSH
2033: LD_VAR 0 6
2037: PUSH
2038: LD_INT 1
2040: PLUS
2041: ST_TO_ADDR
// end until l = 3 ;
2042: LD_VAR 0 6
2046: PUSH
2047: LD_INT 3
2049: EQUAL
2050: IFFALSE 1912
// l = 0 ;
2052: LD_ADDR_VAR 0 6
2056: PUSH
2057: LD_INT 0
2059: ST_TO_ADDR
// repeat begin hc_gallery =  ;
2060: LD_ADDR_OWVAR 33
2064: PUSH
2065: LD_STRING 
2067: ST_TO_ADDR
// hc_name =  ;
2068: LD_ADDR_OWVAR 26
2072: PUSH
2073: LD_STRING 
2075: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
2076: LD_ADDR_OWVAR 29
2080: PUSH
2081: LD_INT 9
2083: PPUSH
2084: LD_INT 11
2086: PPUSH
2087: CALL_OW 12
2091: PUSH
2092: LD_INT 10
2094: PPUSH
2095: LD_INT 12
2097: PPUSH
2098: CALL_OW 12
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 10 ] ;
2107: LD_ADDR_OWVAR 31
2111: PUSH
2112: LD_INT 0
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: LD_INT 0
2120: PUSH
2121: LD_INT 10
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
2130: LD_ADDR_OWVAR 27
2134: PUSH
2135: LD_INT 1
2137: PPUSH
2138: LD_INT 2
2140: PPUSH
2141: CALL_OW 12
2145: ST_TO_ADDR
// hc_class = 4 ;
2146: LD_ADDR_OWVAR 28
2150: PUSH
2151: LD_INT 4
2153: ST_TO_ADDR
// un := CreateHuman ;
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: CALL_OW 44
2163: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_lab ) ;
2164: LD_VAR 0 3
2168: PPUSH
2169: LD_INT 80
2171: PPUSH
2172: CALL_OW 52
// l = l + 1 ;
2176: LD_ADDR_VAR 0 6
2180: PUSH
2181: LD_VAR 0 6
2185: PUSH
2186: LD_INT 1
2188: PLUS
2189: ST_TO_ADDR
// end until l = 4 ;
2190: LD_VAR 0 6
2194: PUSH
2195: LD_INT 4
2197: EQUAL
2198: IFFALSE 2060
// hc_gallery =  ;
2200: LD_ADDR_OWVAR 33
2204: PUSH
2205: LD_STRING 
2207: ST_TO_ADDR
// hc_name =  ;
2208: LD_ADDR_OWVAR 26
2212: PUSH
2213: LD_STRING 
2215: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
2216: LD_ADDR_OWVAR 29
2220: PUSH
2221: LD_INT 9
2223: PPUSH
2224: LD_INT 11
2226: PPUSH
2227: CALL_OW 12
2231: PUSH
2232: LD_INT 10
2234: PPUSH
2235: LD_INT 12
2237: PPUSH
2238: CALL_OW 12
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
2247: LD_ADDR_OWVAR 31
2251: PUSH
2252: LD_INT 0
2254: PUSH
2255: LD_INT 0
2257: PUSH
2258: LD_INT 0
2260: PUSH
2261: LD_INT 0
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: ST_TO_ADDR
// hc_sex = sex_male ;
2270: LD_ADDR_OWVAR 27
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// hc_class = 3 ;
2278: LD_ADDR_OWVAR 28
2282: PUSH
2283: LD_INT 3
2285: ST_TO_ADDR
// Amech1 = CreateHuman ;
2286: LD_ADDR_EXP 26
2290: PUSH
2291: CALL_OW 44
2295: ST_TO_ADDR
// PlaceUnitXY ( Amech1 , 49 , 39 , false ) ;
2296: LD_EXP 26
2300: PPUSH
2301: LD_INT 49
2303: PPUSH
2304: LD_INT 39
2306: PPUSH
2307: LD_INT 0
2309: PPUSH
2310: CALL_OW 48
// ComHold ( Amech1 ) ;
2314: LD_EXP 26
2318: PPUSH
2319: CALL_OW 140
// Amech2 = CreateHuman ;
2323: LD_ADDR_EXP 27
2327: PUSH
2328: CALL_OW 44
2332: ST_TO_ADDR
// PlaceUnitXY ( Amech2 , 51 , 41 , false ) ;
2333: LD_EXP 27
2337: PPUSH
2338: LD_INT 51
2340: PPUSH
2341: LD_INT 41
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 48
// ComTurnXY ( Amech2 , 50 , 38 ) ;
2351: LD_EXP 27
2355: PPUSH
2356: LD_INT 50
2358: PPUSH
2359: LD_INT 38
2361: PPUSH
2362: CALL_OW 118
// l = 0 ;
2366: LD_ADDR_VAR 0 6
2370: PUSH
2371: LD_INT 0
2373: ST_TO_ADDR
// repeat begin un = CreateHuman ;
2374: LD_ADDR_VAR 0 3
2378: PUSH
2379: CALL_OW 44
2383: ST_TO_ADDR
// PlaceUnitArea ( un , near_veh , false ) ;
2384: LD_VAR 0 3
2388: PPUSH
2389: LD_INT 6
2391: PPUSH
2392: LD_INT 0
2394: PPUSH
2395: CALL_OW 49
// ComTurnXY ( un , 47 , 23 ) ;
2399: LD_VAR 0 3
2403: PPUSH
2404: LD_INT 47
2406: PPUSH
2407: LD_INT 23
2409: PPUSH
2410: CALL_OW 118
// l = l + 1 ;
2414: LD_ADDR_VAR 0 6
2418: PUSH
2419: LD_VAR 0 6
2423: PUSH
2424: LD_INT 1
2426: PLUS
2427: ST_TO_ADDR
// end until l = 3 ;
2428: LD_VAR 0 6
2432: PUSH
2433: LD_INT 3
2435: EQUAL
2436: IFFALSE 2374
// hc_gallery =  ;
2438: LD_ADDR_OWVAR 33
2442: PUSH
2443: LD_STRING 
2445: ST_TO_ADDR
// hc_name =  ;
2446: LD_ADDR_OWVAR 26
2450: PUSH
2451: LD_STRING 
2453: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
2454: LD_ADDR_OWVAR 29
2458: PUSH
2459: LD_INT 9
2461: PPUSH
2462: LD_INT 11
2464: PPUSH
2465: CALL_OW 12
2469: PUSH
2470: LD_INT 10
2472: PPUSH
2473: LD_INT 12
2475: PPUSH
2476: CALL_OW 12
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
2485: LD_ADDR_OWVAR 31
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: LD_INT 0
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: LD_INT 0
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: ST_TO_ADDR
// hc_sex = sex_female ;
2508: LD_ADDR_OWVAR 27
2512: PUSH
2513: LD_INT 2
2515: ST_TO_ADDR
// hc_class = 2 ;
2516: LD_ADDR_OWVAR 28
2520: PUSH
2521: LD_INT 2
2523: ST_TO_ADDR
// AEng = CreateHuman ;
2524: LD_ADDR_EXP 30
2528: PUSH
2529: CALL_OW 44
2533: ST_TO_ADDR
// PlaceUnitArea ( AEng , ABase , false ) ;
2534: LD_EXP 30
2538: PPUSH
2539: LD_INT 2
2541: PPUSH
2542: LD_INT 0
2544: PPUSH
2545: CALL_OW 49
// hc_gallery =  ;
2549: LD_ADDR_OWVAR 33
2553: PUSH
2554: LD_STRING 
2556: ST_TO_ADDR
// hc_name =  ;
2557: LD_ADDR_OWVAR 26
2561: PUSH
2562: LD_STRING 
2564: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
2565: LD_ADDR_OWVAR 29
2569: PUSH
2570: LD_INT 9
2572: PPUSH
2573: LD_INT 11
2575: PPUSH
2576: CALL_OW 12
2580: PUSH
2581: LD_INT 10
2583: PPUSH
2584: LD_INT 12
2586: PPUSH
2587: CALL_OW 12
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
2596: LD_ADDR_OWVAR 31
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: LD_INT 0
2606: PUSH
2607: LD_INT 0
2609: PUSH
2610: LD_INT 0
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: ST_TO_ADDR
// hc_sex = sex_male ;
2619: LD_ADDR_OWVAR 27
2623: PUSH
2624: LD_INT 1
2626: ST_TO_ADDR
// hc_class = 1 ;
2627: LD_ADDR_OWVAR 28
2631: PUSH
2632: LD_INT 1
2634: ST_TO_ADDR
// ASol1 = CreateHuman ;
2635: LD_ADDR_EXP 28
2639: PUSH
2640: CALL_OW 44
2644: ST_TO_ADDR
// ASol2 = CreateHuman ;
2645: LD_ADDR_EXP 29
2649: PUSH
2650: CALL_OW 44
2654: ST_TO_ADDR
// PlaceUnitXY ( ASol1 , 31 , 27 , false ) ;
2655: LD_EXP 28
2659: PPUSH
2660: LD_INT 31
2662: PPUSH
2663: LD_INT 27
2665: PPUSH
2666: LD_INT 0
2668: PPUSH
2669: CALL_OW 48
// PlaceUnitXY ( ASol2 , 29 , 30 , false ) ;
2673: LD_EXP 29
2677: PPUSH
2678: LD_INT 29
2680: PPUSH
2681: LD_INT 30
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 48
// ComTurnXY ( [ ASol1 , ASol2 ] , 38 , 35 ) ;
2691: LD_EXP 28
2695: PUSH
2696: LD_EXP 29
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PPUSH
2705: LD_INT 38
2707: PPUSH
2708: LD_INT 35
2710: PPUSH
2711: CALL_OW 118
// l = 0 ;
2715: LD_ADDR_VAR 0 6
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// repeat begin un = CreateHuman ;
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: CALL_OW 44
2732: ST_TO_ADDR
// PlaceUnitArea ( un , near_base , false ) ;
2733: LD_VAR 0 3
2737: PPUSH
2738: LD_INT 5
2740: PPUSH
2741: LD_INT 0
2743: PPUSH
2744: CALL_OW 49
// l = l + 1 ;
2748: LD_ADDR_VAR 0 6
2752: PUSH
2753: LD_VAR 0 6
2757: PUSH
2758: LD_INT 1
2760: PLUS
2761: ST_TO_ADDR
// end until l = 6 ;
2762: LD_VAR 0 6
2766: PUSH
2767: LD_INT 6
2769: EQUAL
2770: IFFALSE 2723
// end ;
2772: LD_VAR 0 1
2776: RET
// every 5 trigger GetLives ( Damaged ) > 600 do
2777: LD_INT 193
2779: PPUSH
2780: CALL_OW 256
2784: PUSH
2785: LD_INT 600
2787: GREATER
2788: IFFALSE 2804
2790: GO 2792
2792: DISABLE
// begin SetLives ( Damaged , 501 ) ;
2793: LD_INT 193
2795: PPUSH
2796: LD_INT 501
2798: PPUSH
2799: CALL_OW 234
// enable ;
2803: ENABLE
// end ;
2804: END
// every 0 0$02 trigger AEng do var skr , p ;
2805: LD_EXP 30
2809: IFFALSE 2903
2811: GO 2813
2813: DISABLE
2814: LD_INT 0
2816: PPUSH
2817: PPUSH
// begin enable ;
2818: ENABLE
// skr = GetListOfCratesInArea ( ABase ) ;
2819: LD_ADDR_VAR 0 1
2823: PUSH
2824: LD_INT 2
2826: PPUSH
2827: CALL_OW 435
2831: ST_TO_ADDR
// p = 1 ;
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: LD_INT 1
2839: ST_TO_ADDR
// while p < skr do
2840: LD_VAR 0 2
2844: PUSH
2845: LD_VAR 0 1
2849: LESS
2850: IFFALSE 2903
// begin AddComCollect ( AEng , skr [ p ] , skr [ p + 1 ] ) ;
2852: LD_EXP 30
2856: PPUSH
2857: LD_VAR 0 1
2861: PUSH
2862: LD_VAR 0 2
2866: ARRAY
2867: PPUSH
2868: LD_VAR 0 1
2872: PUSH
2873: LD_VAR 0 2
2877: PUSH
2878: LD_INT 1
2880: PLUS
2881: ARRAY
2882: PPUSH
2883: CALL_OW 177
// p = p + 2 ;
2887: LD_ADDR_VAR 0 2
2891: PUSH
2892: LD_VAR 0 2
2896: PUSH
2897: LD_INT 2
2899: PLUS
2900: ST_TO_ADDR
// end ;
2901: GO 2840
// end ;
2903: PPOPN 2
2905: END
// every 3 trigger IsInArea ( Louis , Gate ) do
2906: LD_EXP 5
2910: PPUSH
2911: LD_INT 3
2913: PPUSH
2914: CALL_OW 308
2918: IFFALSE 2972
2920: GO 2922
2922: DISABLE
// begin CreateCratesArea ( Rand ( 1 , 5 ) , ABase , true ) ;
2923: LD_INT 1
2925: PPUSH
2926: LD_INT 5
2928: PPUSH
2929: CALL_OW 12
2933: PPUSH
2934: LD_INT 2
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: CALL_OW 55
// Wait ( 0 0$4.5 ) ;
2944: LD_INT 158
2946: PPUSH
2947: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , ABase , true ) ;
2951: LD_INT 1
2953: PPUSH
2954: LD_INT 5
2956: PPUSH
2957: CALL_OW 12
2961: PPUSH
2962: LD_INT 2
2964: PPUSH
2965: LD_INT 1
2967: PPUSH
2968: CALL_OW 55
// end ;
2972: END
// on VehicleConstructed ( vehicle , factory ) do var driver , un ;
2973: LD_INT 0
2975: PPUSH
2976: PPUSH
// begin if factory = ar_fac then
2977: LD_VAR 0 2
2981: PUSH
2982: LD_INT 42
2984: EQUAL
2985: IFFALSE 3064
// begin driver = IsDrivenBy ( vehicle ) ;
2987: LD_ADDR_VAR 0 3
2991: PUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: CALL_OW 311
3001: ST_TO_ADDR
// ComMoveXY ( driver , 47 , 47 ) ;
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 47
3009: PPUSH
3010: LD_INT 47
3012: PPUSH
3013: CALL_OW 111
// AddComExitVehicle ( driver ) ;
3017: LD_VAR 0 3
3021: PPUSH
3022: CALL_OW 181
// AddComEnterUnit ( driver , ar_fac ) ;
3026: LD_VAR 0 3
3030: PPUSH
3031: LD_INT 42
3033: PPUSH
3034: CALL_OW 180
// Wait ( 0 0$0.3 ) ;
3038: LD_INT 10
3040: PPUSH
3041: CALL_OW 67
// ComConstruct ( ar_fac , 13 , engine_combustion , control_manual , ar_gun ) ;
3045: LD_INT 42
3047: PPUSH
3048: LD_INT 13
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 1
3056: PPUSH
3057: LD_INT 27
3059: PPUSH
3060: CALL_OW 125
// end ; end ;
3064: PPOPN 4
3066: END
// export function PreparePhilip ; begin
3067: LD_INT 0
3069: PPUSH
// uc_side = 5 ;
3070: LD_ADDR_OWVAR 20
3074: PUSH
3075: LD_INT 5
3077: ST_TO_ADDR
// hc_gallery = sandar ;
3078: LD_ADDR_OWVAR 33
3082: PUSH
3083: LD_STRING sandar
3085: ST_TO_ADDR
// hc_face_number = 21 ;
3086: LD_ADDR_OWVAR 34
3090: PUSH
3091: LD_INT 21
3093: ST_TO_ADDR
// hc_name = Philip Meyer ;
3094: LD_ADDR_OWVAR 26
3098: PUSH
3099: LD_STRING Philip Meyer
3101: ST_TO_ADDR
// hc_sex = sex_male ;
3102: LD_ADDR_OWVAR 27
3106: PUSH
3107: LD_INT 1
3109: ST_TO_ADDR
// hc_class = 3 ;
3110: LD_ADDR_OWVAR 28
3114: PUSH
3115: LD_INT 3
3117: ST_TO_ADDR
// Philip = CreateHuman ;
3118: LD_ADDR_EXP 25
3122: PUSH
3123: CALL_OW 44
3127: ST_TO_ADDR
// PlaceHumanInUnit ( Philip , ar_br ) ;
3128: LD_EXP 25
3132: PPUSH
3133: LD_INT 5
3135: PPUSH
3136: CALL_OW 52
// end ; end_of_file
3140: LD_VAR 0 1
3144: RET
// export function PrepareMovie ; begin
3145: LD_INT 0
3147: PPUSH
// ChangeSideFog ( 2 , 5 ) ;
3148: LD_INT 2
3150: PPUSH
3151: LD_INT 5
3153: PPUSH
3154: CALL_OW 343
// CenterNowOnXY ( 92 , 50 ) ;
3158: LD_INT 92
3160: PPUSH
3161: LD_INT 50
3163: PPUSH
3164: CALL_OW 86
// Wait ( 0 0$02 ) ;
3168: LD_INT 70
3170: PPUSH
3171: CALL_OW 67
// CenterOnXY ( 87 , 65 ) ;
3175: LD_INT 87
3177: PPUSH
3178: LD_INT 65
3180: PPUSH
3181: CALL_OW 84
// Wait ( 0 0$01.3 ) ;
3185: LD_INT 46
3187: PPUSH
3188: CALL_OW 67
// CenterOnXY ( 70 , 70 ) ;
3192: LD_INT 70
3194: PPUSH
3195: LD_INT 70
3197: PPUSH
3198: CALL_OW 84
// Wait ( 0 0$02 ) ;
3202: LD_INT 70
3204: PPUSH
3205: CALL_OW 67
// CenterOnUnits ( Louis ) ;
3209: LD_EXP 5
3213: PPUSH
3214: CALL_OW 85
// MovieStart = true ;
3218: LD_ADDR_EXP 3
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// Say ( Louis , DL-1 ) ;
3226: LD_EXP 5
3230: PPUSH
3231: LD_STRING DL-1
3233: PPUSH
3234: CALL_OW 88
// if InVeh = true then
3238: LD_EXP 2
3242: PUSH
3243: LD_INT 1
3245: EQUAL
3246: IFFALSE 3262
// begin Say ( Martin , DL-2 ) end else
3248: LD_EXP 9
3252: PPUSH
3253: LD_STRING DL-2
3255: PPUSH
3256: CALL_OW 88
3260: GO 3274
// begin Say ( Martin , DL-2a ) ;
3262: LD_EXP 9
3266: PPUSH
3267: LD_STRING DL-2a
3269: PPUSH
3270: CALL_OW 88
// end ; ComMoveXY ( ArPep , 44 , 66 ) ;
3274: LD_EXP 14
3278: PPUSH
3279: LD_INT 44
3281: PPUSH
3282: LD_INT 66
3284: PPUSH
3285: CALL_OW 111
// ComMoveXY ( Martin , 44 , 64 ) ;
3289: LD_EXP 9
3293: PPUSH
3294: LD_INT 44
3296: PPUSH
3297: LD_INT 64
3299: PPUSH
3300: CALL_OW 111
// Wait ( 0 0$03 ) ;
3304: LD_INT 105
3306: PPUSH
3307: CALL_OW 67
// AddComMoveXY ( ArPep , 53 , 52 ) ;
3311: LD_EXP 14
3315: PPUSH
3316: LD_INT 53
3318: PPUSH
3319: LD_INT 52
3321: PPUSH
3322: CALL_OW 171
// AddComMoveXY ( Martin , 52 , 53 ) ;
3326: LD_EXP 9
3330: PPUSH
3331: LD_INT 52
3333: PPUSH
3334: LD_INT 53
3336: PPUSH
3337: CALL_OW 171
// end ;
3341: LD_VAR 0 1
3345: RET
// every 1 trigger IsInArea ( Louis , Gate ) do
3346: LD_EXP 5
3350: PPUSH
3351: LD_INT 3
3353: PPUSH
3354: CALL_OW 308
3358: IFFALSE 3735
3360: GO 3362
3362: DISABLE
// begin ComTurnUnit ( Louis , men1 ) ;
3363: LD_EXP 5
3367: PPUSH
3368: LD_EXP 6
3372: PPUSH
3373: CALL_OW 119
// ComTurnUnit ( [ men1 , men2 , men3 ] , Louis ) ;
3377: LD_EXP 6
3381: PUSH
3382: LD_EXP 7
3386: PUSH
3387: LD_EXP 8
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: LIST
3396: PPUSH
3397: LD_EXP 5
3401: PPUSH
3402: CALL_OW 119
// Say ( Louis , Dl-2b ) ;
3406: LD_EXP 5
3410: PPUSH
3411: LD_STRING Dl-2b
3413: PPUSH
3414: CALL_OW 88
// PreparePhilip ;
3418: CALL 3067 0 0
// Wait ( 0 0$0.3 ) ;
3422: LD_INT 10
3424: PPUSH
3425: CALL_OW 67
// music_nat = 4 ;
3429: LD_ADDR_OWVAR 71
3433: PUSH
3434: LD_INT 4
3436: ST_TO_ADDR
// music_class = 5 ;
3437: LD_ADDR_OWVAR 72
3441: PUSH
3442: LD_INT 5
3444: ST_TO_ADDR
// ComExitBuilding ( Philip ) ;
3445: LD_EXP 25
3449: PPUSH
3450: CALL_OW 122
// AddComTurnUnit ( Philip , Louis ) ;
3454: LD_EXP 25
3458: PPUSH
3459: LD_EXP 5
3463: PPUSH
3464: CALL_OW 179
// Say ( Philip , DHa ) ;
3468: LD_EXP 25
3472: PPUSH
3473: LD_STRING DHa
3475: PPUSH
3476: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3480: LD_INT 10
3482: PPUSH
3483: CALL_OW 67
// ComEnterUnit ( Philip , ar_br ) ;
3487: LD_EXP 25
3491: PPUSH
3492: LD_INT 5
3494: PPUSH
3495: CALL_OW 120
// ComTurnUnit ( [ men1 , men2 , men3 ] , ar_br ) ;
3499: LD_EXP 6
3503: PUSH
3504: LD_EXP 7
3508: PUSH
3509: LD_EXP 8
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: PPUSH
3519: LD_INT 5
3521: PPUSH
3522: CALL_OW 119
// music_nat = 2 ;
3526: LD_ADDR_OWVAR 71
3530: PUSH
3531: LD_INT 2
3533: ST_TO_ADDR
// music_class = 3 ;
3534: LD_ADDR_OWVAR 72
3538: PUSH
3539: LD_INT 3
3541: ST_TO_ADDR
// Say ( men2 , Dmen1 ) ;
3542: LD_EXP 7
3546: PPUSH
3547: LD_STRING Dmen1
3549: PPUSH
3550: CALL_OW 88
// Say ( men1 , Dmen2 ) ;
3554: LD_EXP 6
3558: PPUSH
3559: LD_STRING Dmen2
3561: PPUSH
3562: CALL_OW 88
// ComConstruct ( ar_fac , 13 , engine_combustion , control_manual , ar_gun ) ;
3566: LD_INT 42
3568: PPUSH
3569: LD_INT 13
3571: PPUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_INT 1
3577: PPUSH
3578: LD_INT 27
3580: PPUSH
3581: CALL_OW 125
// SetSide ( [ men1 , men2 , men3 ] , 5 ) ;
3585: LD_EXP 6
3589: PUSH
3590: LD_EXP 7
3594: PUSH
3595: LD_EXP 8
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: PPUSH
3605: LD_INT 5
3607: PPUSH
3608: CALL_OW 235
// ComEnterUnit ( [ men1 , men2 , men3 ] , ar_br ) ;
3612: LD_EXP 6
3616: PUSH
3617: LD_EXP 7
3621: PUSH
3622: LD_EXP 8
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: PPUSH
3632: LD_INT 5
3634: PPUSH
3635: CALL_OW 120
// Wait ( 0 0$01 ) ;
3639: LD_INT 35
3641: PPUSH
3642: CALL_OW 67
// ComMoveXY ( Louis , 46 , 42 ) ;
3646: LD_EXP 5
3650: PPUSH
3651: LD_INT 46
3653: PPUSH
3654: LD_INT 42
3656: PPUSH
3657: CALL_OW 111
// if MyVeh then
3661: LD_EXP 13
3665: IFFALSE 3708
// begin ComMoveXY ( Martin , 49 , 42 ) ;
3667: LD_EXP 9
3671: PPUSH
3672: LD_INT 49
3674: PPUSH
3675: LD_INT 42
3677: PPUSH
3678: CALL_OW 111
// AddComExitVehicle ( Martin ) ;
3682: LD_EXP 9
3686: PPUSH
3687: CALL_OW 181
// AddComMoveXY ( Martin , 96 , 51 ) end else
3691: LD_EXP 9
3695: PPUSH
3696: LD_INT 96
3698: PPUSH
3699: LD_INT 51
3701: PPUSH
3702: CALL_OW 171
3706: GO 3723
// begin ComMoveXY ( Martin , 96 , 51 ) end ;
3708: LD_EXP 9
3712: PPUSH
3713: LD_INT 96
3715: PPUSH
3716: LD_INT 51
3718: PPUSH
3719: CALL_OW 111
// ComRepairVehicle ( Amech1 , Damaged ) ;
3723: LD_EXP 26
3727: PPUSH
3728: LD_INT 193
3730: PPUSH
3731: CALL_OW 129
// end ;
3735: END
// every 3 trigger GetDistUnits ( Louis , Amech1 ) < 11 do
3736: LD_EXP 5
3740: PPUSH
3741: LD_EXP 26
3745: PPUSH
3746: CALL_OW 296
3750: PUSH
3751: LD_INT 11
3753: LESS
3754: IFFALSE 3924
3756: GO 3758
3758: DISABLE
// begin if InVeh = true then
3759: LD_EXP 2
3763: PUSH
3764: LD_INT 1
3766: EQUAL
3767: IFFALSE 3909
// begin Say ( Amech2 , DM-1 ) ;
3769: LD_EXP 27
3773: PPUSH
3774: LD_STRING DM-1
3776: PPUSH
3777: CALL_OW 88
// ComTurnUnit ( Louis , Amech2 ) ;
3781: LD_EXP 5
3785: PPUSH
3786: LD_EXP 27
3790: PPUSH
3791: CALL_OW 119
// Say ( Amech1 , DM-2 ) ;
3795: LD_EXP 26
3799: PPUSH
3800: LD_STRING DM-2
3802: PPUSH
3803: CALL_OW 88
// ComTurnUnit ( Amech2 , Louis ) ;
3807: LD_EXP 27
3811: PPUSH
3812: LD_EXP 5
3816: PPUSH
3817: CALL_OW 119
// Say ( Amech2 , DM-3 ) ;
3821: LD_EXP 27
3825: PPUSH
3826: LD_STRING DM-3
3828: PPUSH
3829: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
3833: LD_INT 7
3835: PPUSH
3836: CALL_OW 67
// ComTurnUnit ( Amech1 , Louis ) ;
3840: LD_EXP 26
3844: PPUSH
3845: LD_EXP 5
3849: PPUSH
3850: CALL_OW 119
// Say ( Amech1 , DM-4 ) ;
3854: LD_EXP 26
3858: PPUSH
3859: LD_STRING DM-4
3861: PPUSH
3862: CALL_OW 88
// ComMoveXY ( Louis , 31 , 26 ) ;
3866: LD_EXP 5
3870: PPUSH
3871: LD_INT 31
3873: PPUSH
3874: LD_INT 26
3876: PPUSH
3877: CALL_OW 111
// Wait ( 0 0$0.3 ) ;
3881: LD_INT 10
3883: PPUSH
3884: CALL_OW 67
// ComRepairVehicle ( [ Amech1 , Amech2 ] , Damaged ) ;
3888: LD_EXP 26
3892: PUSH
3893: LD_EXP 27
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: LD_INT 193
3904: PPUSH
3905: CALL_OW 129
// end ; ComMoveXY ( Louis , 34 , 30 ) ;
3909: LD_EXP 5
3913: PPUSH
3914: LD_INT 34
3916: PPUSH
3917: LD_INT 30
3919: PPUSH
3920: CALL_OW 111
// end ;
3924: END
// every 3 trigger IsInArea ( Louis , GateII ) do
3925: LD_EXP 5
3929: PPUSH
3930: LD_INT 4
3932: PPUSH
3933: CALL_OW 308
3937: IFFALSE 4012
3939: GO 3941
3941: DISABLE
// begin ComTurnUnit ( Louis , ASol1 ) ;
3942: LD_EXP 5
3946: PPUSH
3947: LD_EXP 28
3951: PPUSH
3952: CALL_OW 119
// Say ( ASol1 , DS-1 ) ;
3956: LD_EXP 28
3960: PPUSH
3961: LD_STRING DS-1
3963: PPUSH
3964: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3968: LD_INT 10
3970: PPUSH
3971: CALL_OW 67
// ComMoveXY ( Louis , GetX ( Abdul ) + 4 , GetY ( Abdul ) + 5 ) ;
3975: LD_EXP 5
3979: PPUSH
3980: LD_EXP 18
3984: PPUSH
3985: CALL_OW 250
3989: PUSH
3990: LD_INT 4
3992: PLUS
3993: PPUSH
3994: LD_EXP 18
3998: PPUSH
3999: CALL_OW 251
4003: PUSH
4004: LD_INT 5
4006: PLUS
4007: PPUSH
4008: CALL_OW 111
// end ;
4012: END
// every 3 trigger GetDistUnits ( Abdul , Louis ) < 10 do
4013: LD_EXP 18
4017: PPUSH
4018: LD_EXP 5
4022: PPUSH
4023: CALL_OW 296
4027: PUSH
4028: LD_INT 10
4030: LESS
4031: IFFALSE 5266
4033: GO 4035
4035: DISABLE
// begin MovieStart = false ;
4036: LD_ADDR_EXP 3
4040: PUSH
4041: LD_INT 0
4043: ST_TO_ADDR
// SetSpecResearch ( ar_lab , 100 , true ) ;
4044: LD_INT 80
4046: PPUSH
4047: LD_INT 100
4049: PPUSH
4050: LD_INT 1
4052: PPUSH
4053: CALL_OW 486
// CenterNowOnUnits ( Abdul ) ;
4057: LD_EXP 18
4061: PPUSH
4062: CALL_OW 87
// AddComTurnUnit ( Louis , Abdul ) ;
4066: LD_EXP 5
4070: PPUSH
4071: LD_EXP 18
4075: PPUSH
4076: CALL_OW 179
// Say ( Abdul , DSS-1 ) ;
4080: LD_EXP 18
4084: PPUSH
4085: LD_STRING DSS-1
4087: PPUSH
4088: CALL_OW 88
// ComTurnUnit ( Abdul , Louis ) ;
4092: LD_EXP 18
4096: PPUSH
4097: LD_EXP 5
4101: PPUSH
4102: CALL_OW 119
// Say ( Abdul , DDS-2 ) ;
4106: LD_EXP 18
4110: PPUSH
4111: LD_STRING DDS-2
4113: PPUSH
4114: CALL_OW 88
// Say ( Louis , DDL-1 ) ;
4118: LD_EXP 5
4122: PPUSH
4123: LD_STRING DDL-1
4125: PPUSH
4126: CALL_OW 88
// ComTurnUnit ( Abdul , Farmer ) ;
4130: LD_EXP 18
4134: PPUSH
4135: LD_EXP 20
4139: PPUSH
4140: CALL_OW 119
// Say ( Abdul , DDS-3 ) ;
4144: LD_EXP 18
4148: PPUSH
4149: LD_STRING DDS-3
4151: PPUSH
4152: CALL_OW 88
// Say ( Abdul , DDS-4 ) ;
4156: LD_EXP 18
4160: PPUSH
4161: LD_STRING DDS-4
4163: PPUSH
4164: CALL_OW 88
// Say ( Abdul , DDS-5 ) ;
4168: LD_EXP 18
4172: PPUSH
4173: LD_STRING DDS-5
4175: PPUSH
4176: CALL_OW 88
// Say ( Abdul , DDS-5a ) ;
4180: LD_EXP 18
4184: PPUSH
4185: LD_STRING DDS-5a
4187: PPUSH
4188: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4192: LD_INT 10
4194: PPUSH
4195: CALL_OW 67
// Say ( Abdul , DDS-5b ) ;
4199: LD_EXP 18
4203: PPUSH
4204: LD_STRING DDS-5b
4206: PPUSH
4207: CALL_OW 88
// Say ( Abdul , DDS-5c ) ;
4211: LD_EXP 18
4215: PPUSH
4216: LD_STRING DDS-5c
4218: PPUSH
4219: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4223: LD_INT 10
4225: PPUSH
4226: CALL_OW 67
// Say ( Abdul , DDS-5new1 ) ;
4230: LD_EXP 18
4234: PPUSH
4235: LD_STRING DDS-5new1
4237: PPUSH
4238: CALL_OW 88
// Say ( Saliba , DDSalib-1 ) ;
4242: LD_EXP 22
4246: PPUSH
4247: LD_STRING DDSalib-1
4249: PPUSH
4250: CALL_OW 88
// Say ( Abdul , DDS-5new2 ) ;
4254: LD_EXP 18
4258: PPUSH
4259: LD_STRING DDS-5new2
4261: PPUSH
4262: CALL_OW 88
// Say ( Nahas , DDNahas-1 ) ;
4266: LD_EXP 23
4270: PPUSH
4271: LD_STRING DDNahas-1
4273: PPUSH
4274: CALL_OW 88
// Say ( Abdul , DDS-5new3 ) ;
4278: LD_EXP 18
4282: PPUSH
4283: LD_STRING DDS-5new3
4285: PPUSH
4286: CALL_OW 88
// Say ( Abdul , DDS-5d ) ;
4290: LD_EXP 18
4294: PPUSH
4295: LD_STRING DDS-5d
4297: PPUSH
4298: CALL_OW 88
// Say ( Gensher , DDG-1 ) ;
4302: LD_EXP 17
4306: PPUSH
4307: LD_STRING DDG-1
4309: PPUSH
4310: CALL_OW 88
// Say ( Farmer , DDF-1 ) ;
4314: LD_EXP 20
4318: PPUSH
4319: LD_STRING DDF-1
4321: PPUSH
4322: CALL_OW 88
// Say ( Heike , DDH-1 ) ;
4326: LD_EXP 21
4330: PPUSH
4331: LD_STRING DDH-1
4333: PPUSH
4334: CALL_OW 88
// Say ( Omar , DDO-1 ) ;
4338: LD_EXP 19
4342: PPUSH
4343: LD_STRING DDO-1
4345: PPUSH
4346: CALL_OW 88
// Say ( Saliba , DDSalib-1 ) ;
4350: LD_EXP 22
4354: PPUSH
4355: LD_STRING DDSalib-1
4357: PPUSH
4358: CALL_OW 88
// Say ( Louis , DDL-2 ) ;
4362: LD_EXP 5
4366: PPUSH
4367: LD_STRING DDL-2
4369: PPUSH
4370: CALL_OW 88
// ComTurnUnit ( Abdul , Louis ) ;
4374: LD_EXP 18
4378: PPUSH
4379: LD_EXP 5
4383: PPUSH
4384: CALL_OW 119
// Say ( Abdul , DDS-6 ) ;
4388: LD_EXP 18
4392: PPUSH
4393: LD_STRING DDS-6
4395: PPUSH
4396: CALL_OW 88
// Say ( Abdul , DDS-6a ) ;
4400: LD_EXP 18
4404: PPUSH
4405: LD_STRING DDS-6a
4407: PPUSH
4408: CALL_OW 88
// Say ( Louis , DDL-3 ) ;
4412: LD_EXP 5
4416: PPUSH
4417: LD_STRING DDL-3
4419: PPUSH
4420: CALL_OW 88
// if CathyWasCatch = true then
4424: LD_EXP 1
4428: PUSH
4429: LD_INT 1
4431: EQUAL
4432: IFFALSE 4458
// begin Say ( Louis , DDL-CT ) ;
4434: LD_EXP 5
4438: PPUSH
4439: LD_STRING DDL-CT
4441: PPUSH
4442: CALL_OW 88
// Say ( Abdul , DDS-CT ) ;
4446: LD_EXP 18
4450: PPUSH
4451: LD_STRING DDS-CT
4453: PPUSH
4454: CALL_OW 88
// end ; ComTurnUnit ( Abdul , Heike ) ;
4458: LD_EXP 18
4462: PPUSH
4463: LD_EXP 21
4467: PPUSH
4468: CALL_OW 119
// Say ( Abdul , DDS-7 ) ;
4472: LD_EXP 18
4476: PPUSH
4477: LD_STRING DDS-7
4479: PPUSH
4480: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
4484: LD_INT 10
4486: PPUSH
4487: CALL_OW 67
// ComEnterUnit ( [ Heike , Omar ] , ar_dep2 ) ;
4491: LD_EXP 21
4495: PUSH
4496: LD_EXP 19
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PPUSH
4505: LD_INT 70
4507: PPUSH
4508: CALL_OW 120
// ComEnterUnit ( Gensher , ar_dep3 ) ;
4512: LD_EXP 17
4516: PPUSH
4517: LD_INT 117
4519: PPUSH
4520: CALL_OW 120
// ComEnterUnit ( [ Abdul , nahas , saliba ] , ar_dep1 ) ;
4524: LD_EXP 18
4528: PUSH
4529: LD_EXP 23
4533: PUSH
4534: LD_EXP 22
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: PPUSH
4544: LD_INT 2
4546: PPUSH
4547: CALL_OW 120
// ComMoveXY ( Farmer , GetX ( Louis ) - 2 , GetY ( Louis ) - 1 ) ;
4551: LD_EXP 20
4555: PPUSH
4556: LD_EXP 5
4560: PPUSH
4561: CALL_OW 250
4565: PUSH
4566: LD_INT 2
4568: MINUS
4569: PPUSH
4570: LD_EXP 5
4574: PPUSH
4575: CALL_OW 251
4579: PUSH
4580: LD_INT 1
4582: MINUS
4583: PPUSH
4584: CALL_OW 111
// AddComTurnUnit ( Farmer , Louis ) ;
4588: LD_EXP 20
4592: PPUSH
4593: LD_EXP 5
4597: PPUSH
4598: CALL_OW 179
// ComTurnUnit ( Louis , Farmer ) ;
4602: LD_EXP 5
4606: PPUSH
4607: LD_EXP 20
4611: PPUSH
4612: CALL_OW 119
// repeat Wait ( 0 0$01 ) ;
4616: LD_INT 35
4618: PPUSH
4619: CALL_OW 67
// until GetDistUnits ( Louis , Gensher ) > 5 ;
4623: LD_EXP 5
4627: PPUSH
4628: LD_EXP 17
4632: PPUSH
4633: CALL_OW 296
4637: PUSH
4638: LD_INT 5
4640: GREATER
4641: IFFALSE 4616
// Say ( Farmer , DDF-2 ) ;
4643: LD_EXP 20
4647: PPUSH
4648: LD_STRING DDF-2
4650: PPUSH
4651: CALL_OW 88
// Say ( Louis , DDL-5 ) ;
4655: LD_EXP 5
4659: PPUSH
4660: LD_STRING DDL-5
4662: PPUSH
4663: CALL_OW 88
// Say ( Farmer , DDF-3 ) ;
4667: LD_EXP 20
4671: PPUSH
4672: LD_STRING DDF-3
4674: PPUSH
4675: CALL_OW 88
// Say ( Louis , DDL-6 ) ;
4679: LD_EXP 5
4683: PPUSH
4684: LD_STRING DDL-6
4686: PPUSH
4687: CALL_OW 88
// Say ( Farmer , DDF-4 ) ;
4691: LD_EXP 20
4695: PPUSH
4696: LD_STRING DDF-4
4698: PPUSH
4699: CALL_OW 88
// Say ( Louis , DDL-7 ) ;
4703: LD_EXP 5
4707: PPUSH
4708: LD_STRING DDL-7
4710: PPUSH
4711: CALL_OW 88
// Wait ( 0 0$0.1 ) ;
4715: LD_INT 4
4717: PPUSH
4718: CALL_OW 67
// ComEnterUnit ( Farmer , ar_dep1 ) ;
4722: LD_EXP 20
4726: PPUSH
4727: LD_INT 2
4729: PPUSH
4730: CALL_OW 120
// ComHold ( Louis ) ;
4734: LD_EXP 5
4738: PPUSH
4739: CALL_OW 140
// Wait ( 0 0$02 ) ;
4743: LD_INT 70
4745: PPUSH
4746: CALL_OW 67
// if TestCharacters ( Karla_02_FarmerTeam ) then
4750: LD_STRING Karla_02_FarmerTeam
4752: PPUSH
4753: CALL_OW 28
4757: IFFALSE 5244
// begin Karla = CreateCharacter ( Karla_02_FarmerTeam ) ;
4759: LD_ADDR_EXP 10
4763: PUSH
4764: LD_STRING Karla_02_FarmerTeam
4766: PPUSH
4767: CALL_OW 34
4771: ST_TO_ADDR
// PlaceUnitXY ( Karla , 21 , 1 , false ) ;
4772: LD_EXP 10
4776: PPUSH
4777: LD_INT 21
4779: PPUSH
4780: LD_INT 1
4782: PPUSH
4783: LD_INT 0
4785: PPUSH
4786: CALL_OW 48
// SaveCharacters ( Karla , Karla_02 ) ;
4790: LD_EXP 10
4794: PPUSH
4795: LD_STRING Karla_02
4797: PPUSH
4798: CALL_OW 38
// if TestCharacters ( Dwein_02_FarmerTeam ) then
4802: LD_STRING Dwein_02_FarmerTeam
4804: PPUSH
4805: CALL_OW 28
4809: IFFALSE 4856
// begin Dwein = CreateCharacter ( Dwein_02_FarmerTeam ) ;
4811: LD_ADDR_EXP 11
4815: PUSH
4816: LD_STRING Dwein_02_FarmerTeam
4818: PPUSH
4819: CALL_OW 34
4823: ST_TO_ADDR
// PlaceUnitXY ( Dwein , 23 , 1 , false ) ;
4824: LD_EXP 11
4828: PPUSH
4829: LD_INT 23
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: LD_INT 0
4837: PPUSH
4838: CALL_OW 48
// SaveCharacters ( Dwein , Dwein_02 ) ;
4842: LD_EXP 11
4846: PPUSH
4847: LD_STRING Dwein_02
4849: PPUSH
4850: CALL_OW 38
// end else
4854: GO 4918
// if TestCharacters ( Gunther_02_FarmerTeam ) then
4856: LD_STRING Gunther_02_FarmerTeam
4858: PPUSH
4859: CALL_OW 28
4863: IFFALSE 4910
// begin Gunther = CreateCharacter ( Gunther_02_FarmerTeam ) ;
4865: LD_ADDR_EXP 12
4869: PUSH
4870: LD_STRING Gunther_02_FarmerTeam
4872: PPUSH
4873: CALL_OW 34
4877: ST_TO_ADDR
// PlaceUnitXY ( Gunther , 22 , 1 , false ) ;
4878: LD_EXP 12
4882: PPUSH
4883: LD_INT 22
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: LD_INT 0
4891: PPUSH
4892: CALL_OW 48
// SaveCharacters ( Gunther , Gunther_02 ) ;
4896: LD_EXP 12
4900: PPUSH
4901: LD_STRING Gunther_02
4903: PPUSH
4904: CALL_OW 38
// end else
4908: GO 4918
// begin KarlaAlone = true ;
4910: LD_ADDR_EXP 4
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// end ; ComMoveXY ( Karla , GetX ( Louis ) , GetY ( Louis ) - 4 ) ;
4918: LD_EXP 10
4922: PPUSH
4923: LD_EXP 5
4927: PPUSH
4928: CALL_OW 250
4932: PPUSH
4933: LD_EXP 5
4937: PPUSH
4938: CALL_OW 251
4942: PUSH
4943: LD_INT 4
4945: MINUS
4946: PPUSH
4947: CALL_OW 111
// ComMoveXY ( [ Gunther , Dwein ] , GetX ( Louis ) , GetY ( Louis ) - 3 ) ;
4951: LD_EXP 12
4955: PUSH
4956: LD_EXP 11
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: LD_EXP 5
4969: PPUSH
4970: CALL_OW 250
4974: PPUSH
4975: LD_EXP 5
4979: PPUSH
4980: CALL_OW 251
4984: PUSH
4985: LD_INT 3
4987: MINUS
4988: PPUSH
4989: CALL_OW 111
// Wait ( 0 0$04 ) ;
4993: LD_INT 140
4995: PPUSH
4996: CALL_OW 67
// ComTurnUnit ( Louis , Karla ) ;
5000: LD_EXP 5
5004: PPUSH
5005: LD_EXP 10
5009: PPUSH
5010: CALL_OW 119
// ComTurnUnit ( [ Karla , Dwein , Gunther ] , Louis ) ;
5014: LD_EXP 10
5018: PUSH
5019: LD_EXP 11
5023: PUSH
5024: LD_EXP 12
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: LIST
5033: PPUSH
5034: LD_EXP 5
5038: PPUSH
5039: CALL_OW 119
// Say ( Karla , DK-1 ) ;
5043: LD_EXP 10
5047: PPUSH
5048: LD_STRING DK-1
5050: PPUSH
5051: CALL_OW 88
// if KarlaAlone = false then
5055: LD_EXP 4
5059: PUSH
5060: LD_INT 0
5062: EQUAL
5063: IFFALSE 5102
// begin if IsOk ( Dwein ) then
5065: LD_EXP 11
5069: PPUSH
5070: CALL_OW 302
5074: IFFALSE 5090
// Say ( Dwein , DZ-1 ) else
5076: LD_EXP 11
5080: PPUSH
5081: LD_STRING DZ-1
5083: PPUSH
5084: CALL_OW 88
5088: GO 5102
// Say ( Gunther , DZ-1 ) ;
5090: LD_EXP 12
5094: PPUSH
5095: LD_STRING DZ-1
5097: PPUSH
5098: CALL_OW 88
// end ; Say ( Louis , DL-1n ) ;
5102: LD_EXP 5
5106: PPUSH
5107: LD_STRING DL-1n
5109: PPUSH
5110: CALL_OW 88
// Say ( Karla , DK-2 ) ;
5114: LD_EXP 10
5118: PPUSH
5119: LD_STRING DK-2
5121: PPUSH
5122: CALL_OW 88
// Say ( Louis , DL-2n ) ;
5126: LD_EXP 5
5130: PPUSH
5131: LD_STRING DL-2n
5133: PPUSH
5134: CALL_OW 88
// Say ( Karla , DK-3 ) ;
5138: LD_EXP 10
5142: PPUSH
5143: LD_STRING DK-3
5145: PPUSH
5146: CALL_OW 88
// Say ( Louis , DL-3n ) ;
5150: LD_EXP 5
5154: PPUSH
5155: LD_STRING DL-3n
5157: PPUSH
5158: CALL_OW 88
// Say ( Karla , DK-4 ) ;
5162: LD_EXP 10
5166: PPUSH
5167: LD_STRING DK-4
5169: PPUSH
5170: CALL_OW 88
// ComMoveXY ( [ Karla , Dwein , Gunther ] , 75 , 83 ) ;
5174: LD_EXP 10
5178: PUSH
5179: LD_EXP 11
5183: PUSH
5184: LD_EXP 12
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: LD_INT 75
5196: PPUSH
5197: LD_INT 83
5199: PPUSH
5200: CALL_OW 111
// ComHold ( Louis ) ;
5204: LD_EXP 5
5208: PPUSH
5209: CALL_OW 140
// Wait ( 0 0$03 ) ;
5213: LD_INT 105
5215: PPUSH
5216: CALL_OW 67
// SaveCharacters ( Louis , Louis ) ;
5220: LD_EXP 5
5224: PPUSH
5225: LD_STRING Louis
5227: PPUSH
5228: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
5232: LD_INT 1
5234: PPUSH
5235: LD_STRING %_cont
5237: PPUSH
5238: CALL_OW 340
// end else
5242: GO 5256
// SaveCharacters ( Louis , Louis ) ;
5244: LD_EXP 5
5248: PPUSH
5249: LD_STRING Louis
5251: PPUSH
5252: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
5256: LD_INT 1
5258: PPUSH
5259: LD_STRING %_cont
5261: PPUSH
5262: CALL_OW 340
// end ;
5266: END
