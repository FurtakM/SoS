// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// PrepareTriggers ;
   8: CALL 37 0 0
// PrepareNature ;
  12: CALL 6632 0 0
// PrepareRussian ;
  16: CALL 1524 0 0
// PrepareArabian ;
  20: CALL 185 0 0
// StartMission ;
  24: CALL 4926 0 0
// music_nat := 1 ;
  28: LD_ADDR_OWVAR 71
  32: PUSH
  33: LD_INT 1
  35: ST_TO_ADDR
// end ;
  36: END
// export spoted , clock , veh_count , ar_count , dif_count , dif_time , time_limit , smart_count , trap_on ; function PrepareTriggers ; begin
  37: LD_INT 0
  39: PPUSH
// spoted := false ;
  40: LD_ADDR_EXP 1
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// clock := 0 0$00 ;
  48: LD_ADDR_EXP 2
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// veh_count := [ 3 3$00 , 2 2$10 , 0 0$55 ] [ Difficulty ] ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_INT 6300
  63: PUSH
  64: LD_INT 4550
  66: PUSH
  67: LD_INT 1925
  69: PUSH
  70: EMPTY
  71: LIST
  72: LIST
  73: LIST
  74: PUSH
  75: LD_OWVAR 67
  79: ARRAY
  80: ST_TO_ADDR
// ar_count := 0 ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// dif_count := [ 5 , 3 , 2 ] [ Difficulty ] ;
  89: LD_ADDR_EXP 5
  93: PUSH
  94: LD_INT 5
  96: PUSH
  97: LD_INT 3
  99: PUSH
 100: LD_INT 2
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PUSH
 108: LD_OWVAR 67
 112: ARRAY
 113: ST_TO_ADDR
// dif_time := [ 20 20$00 , 16 16$30 , 15 15$00 ] [ Difficulty ] ;
 114: LD_ADDR_EXP 6
 118: PUSH
 119: LD_INT 42000
 121: PUSH
 122: LD_INT 34650
 124: PUSH
 125: LD_INT 31500
 127: PUSH
 128: EMPTY
 129: LIST
 130: LIST
 131: LIST
 132: PUSH
 133: LD_OWVAR 67
 137: ARRAY
 138: ST_TO_ADDR
// time_limit := [ 14 14$00 , 12 12$00 , 11 11$00 ] [ Difficulty ] ;
 139: LD_ADDR_EXP 7
 143: PUSH
 144: LD_INT 29400
 146: PUSH
 147: LD_INT 25200
 149: PUSH
 150: LD_INT 23100
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_OWVAR 67
 162: ARRAY
 163: ST_TO_ADDR
// smart_count := 0 ;
 164: LD_ADDR_EXP 8
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// trap_on := false ;
 172: LD_ADDR_EXP 9
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// end ; end_of_file
 180: LD_VAR 0 1
 184: RET
// export Louis , Martin , Karla , Dwein , Joachim , Olaf , Mmark , Herczeg , Mia , Kantor , Ronn , Gunther , Gensher , ot1 , ot2 , ot3 , ot4 , ot5 , ot6 , ot7 ; export Others , AllPeo , OtChar ; export function PrepareArabian ; var l , i , un , veh , vehs , counter , oil , cargos ; begin
 185: LD_INT 0
 187: PPUSH
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
// uc_side = 2 ;
 196: LD_ADDR_OWVAR 20
 200: PUSH
 201: LD_INT 2
 203: ST_TO_ADDR
// uc_nation = nation_arabian ;
 204: LD_ADDR_OWVAR 21
 208: PUSH
 209: LD_INT 2
 211: ST_TO_ADDR
// Others = [ ] ;
 212: LD_ADDR_EXP 30
 216: PUSH
 217: EMPTY
 218: ST_TO_ADDR
// AllPeo = [ ] ;
 219: LD_ADDR_EXP 31
 223: PUSH
 224: EMPTY
 225: ST_TO_ADDR
// Vehs = [ ] ;
 226: LD_ADDR_VAR 0 6
 230: PUSH
 231: EMPTY
 232: ST_TO_ADDR
// oil := LoadVariable ( VarOil , 0 ) ;
 233: LD_ADDR_VAR 0 8
 237: PUSH
 238: LD_STRING VarOil
 240: PPUSH
 241: LD_INT 0
 243: PPUSH
 244: CALL_OW 30
 248: ST_TO_ADDR
// cargos := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_cargo_bay ] ] ) ;
 249: LD_ADDR_VAR 0 9
 253: PUSH
 254: LD_INT 22
 256: PUSH
 257: LD_INT 2
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 34
 266: PUSH
 267: LD_INT 32
 269: PUSH
 270: EMPTY
 271: LIST
 272: LIST
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PPUSH
 278: CALL_OW 69
 282: ST_TO_ADDR
// if oil <= 400 then
 283: LD_VAR 0 8
 287: PUSH
 288: LD_INT 400
 290: LESSEQUAL
 291: IFFALSE 314
// SetCargo ( cargos [ 1 ] , mat_oil , 100 ) else
 293: LD_VAR 0 9
 297: PUSH
 298: LD_INT 1
 300: ARRAY
 301: PPUSH
 302: LD_INT 2
 304: PPUSH
 305: LD_INT 100
 307: PPUSH
 308: CALL_OW 290
 312: GO 382
// begin SetCargo ( cargos [ 1 ] , mat_oil , 100 ) ;
 314: LD_VAR 0 9
 318: PUSH
 319: LD_INT 1
 321: ARRAY
 322: PPUSH
 323: LD_INT 2
 325: PPUSH
 326: LD_INT 100
 328: PPUSH
 329: CALL_OW 290
// oil := ( oil - 400 ) ;
 333: LD_ADDR_VAR 0 8
 337: PUSH
 338: LD_VAR 0 8
 342: PUSH
 343: LD_INT 400
 345: MINUS
 346: ST_TO_ADDR
// oil := ( oil / 4 ) ;
 347: LD_ADDR_VAR 0 8
 351: PUSH
 352: LD_VAR 0 8
 356: PUSH
 357: LD_INT 4
 359: DIVREAL
 360: ST_TO_ADDR
// SetCargo ( cargos [ 2 ] , mat_oil , oil ) ;
 361: LD_VAR 0 9
 365: PUSH
 366: LD_INT 2
 368: ARRAY
 369: PPUSH
 370: LD_INT 2
 372: PPUSH
 373: LD_VAR 0 8
 377: PPUSH
 378: CALL_OW 290
// end ; Louis := CreateCharacter ( Louis ) ;
 382: LD_ADDR_EXP 10
 386: PUSH
 387: LD_STRING Louis
 389: PPUSH
 390: CALL_OW 34
 394: ST_TO_ADDR
// AllPeo = AllPeo ^ Louis ;
 395: LD_ADDR_EXP 31
 399: PUSH
 400: LD_EXP 31
 404: PUSH
 405: LD_EXP 10
 409: ADD
 410: ST_TO_ADDR
// if TestCharacters ( Martin_04 ) then
 411: LD_STRING Martin_04
 413: PPUSH
 414: CALL_OW 28
 418: IFFALSE 451
// begin Martin := CreateCharacter ( Martin_04 ) ;
 420: LD_ADDR_EXP 11
 424: PUSH
 425: LD_STRING Martin_04
 427: PPUSH
 428: CALL_OW 34
 432: ST_TO_ADDR
// AllPeo = AllPeo ^ Martin ;
 433: LD_ADDR_EXP 31
 437: PUSH
 438: LD_EXP 31
 442: PUSH
 443: LD_EXP 11
 447: ADD
 448: ST_TO_ADDR
// end else
 449: GO 459
// begin Martin = false ;
 451: LD_ADDR_EXP 11
 455: PUSH
 456: LD_INT 0
 458: ST_TO_ADDR
// end ; if TestCharacters ( Karla_04 ) then
 459: LD_STRING Karla_04
 461: PPUSH
 462: CALL_OW 28
 466: IFFALSE 499
// begin Karla := CreateCharacter ( Karla_04 ) ;
 468: LD_ADDR_EXP 12
 472: PUSH
 473: LD_STRING Karla_04
 475: PPUSH
 476: CALL_OW 34
 480: ST_TO_ADDR
// AllPeo = AllPeo ^ Karla ;
 481: LD_ADDR_EXP 31
 485: PUSH
 486: LD_EXP 31
 490: PUSH
 491: LD_EXP 12
 495: ADD
 496: ST_TO_ADDR
// end else
 497: GO 507
// begin Karla = false ;
 499: LD_ADDR_EXP 12
 503: PUSH
 504: LD_INT 0
 506: ST_TO_ADDR
// end ; if TestCharacters ( Mmark_04 ) then
 507: LD_STRING Mmark_04
 509: PPUSH
 510: CALL_OW 28
 514: IFFALSE 547
// begin Mmark := CreateCharacter ( Mmark_04 ) ;
 516: LD_ADDR_EXP 16
 520: PUSH
 521: LD_STRING Mmark_04
 523: PPUSH
 524: CALL_OW 34
 528: ST_TO_ADDR
// AllPeo = AllPeo ^ Mmark ;
 529: LD_ADDR_EXP 31
 533: PUSH
 534: LD_EXP 31
 538: PUSH
 539: LD_EXP 16
 543: ADD
 544: ST_TO_ADDR
// end else
 545: GO 555
// begin Mmark = false ;
 547: LD_ADDR_EXP 16
 551: PUSH
 552: LD_INT 0
 554: ST_TO_ADDR
// end ; if TestCharacters ( Joachim_04 ) then
 555: LD_STRING Joachim_04
 557: PPUSH
 558: CALL_OW 28
 562: IFFALSE 595
// begin Joachim := CreateCharacter ( Joachim_04 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_STRING Joachim_04
 571: PPUSH
 572: CALL_OW 34
 576: ST_TO_ADDR
// AllPeo = AllPeo ^ Joachim ;
 577: LD_ADDR_EXP 31
 581: PUSH
 582: LD_EXP 31
 586: PUSH
 587: LD_EXP 14
 591: ADD
 592: ST_TO_ADDR
// end else
 593: GO 603
// begin Joachim = false ;
 595: LD_ADDR_EXP 14
 599: PUSH
 600: LD_INT 0
 602: ST_TO_ADDR
// end ; if TestCharacters ( Olaf_04 ) then
 603: LD_STRING Olaf_04
 605: PPUSH
 606: CALL_OW 28
 610: IFFALSE 643
// begin Olaf := CreateCharacter ( Olaf_04 ) ;
 612: LD_ADDR_EXP 15
 616: PUSH
 617: LD_STRING Olaf_04
 619: PPUSH
 620: CALL_OW 34
 624: ST_TO_ADDR
// AllPeo = AllPeo ^ Olaf ;
 625: LD_ADDR_EXP 31
 629: PUSH
 630: LD_EXP 31
 634: PUSH
 635: LD_EXP 15
 639: ADD
 640: ST_TO_ADDR
// end else
 641: GO 651
// begin Olaf = false ;
 643: LD_ADDR_EXP 15
 647: PUSH
 648: LD_INT 0
 650: ST_TO_ADDR
// end ; if TestCharacters ( Dwein_04 ) then
 651: LD_STRING Dwein_04
 653: PPUSH
 654: CALL_OW 28
 658: IFFALSE 691
// begin Dwein := CreateCharacter ( Dwein_04 ) ;
 660: LD_ADDR_EXP 13
 664: PUSH
 665: LD_STRING Dwein_04
 667: PPUSH
 668: CALL_OW 34
 672: ST_TO_ADDR
// AllPeo = AllPeo ^ Dwein ;
 673: LD_ADDR_EXP 31
 677: PUSH
 678: LD_EXP 31
 682: PUSH
 683: LD_EXP 13
 687: ADD
 688: ST_TO_ADDR
// end else
 689: GO 699
// begin Dwein = false ;
 691: LD_ADDR_EXP 13
 695: PUSH
 696: LD_INT 0
 698: ST_TO_ADDR
// end ; if TestCharacters ( Herczeg_04 ) then
 699: LD_STRING Herczeg_04
 701: PPUSH
 702: CALL_OW 28
 706: IFFALSE 739
// begin Herczeg := CreateCharacter ( Herczeg_04 ) ;
 708: LD_ADDR_EXP 17
 712: PUSH
 713: LD_STRING Herczeg_04
 715: PPUSH
 716: CALL_OW 34
 720: ST_TO_ADDR
// AllPeo = AllPeo ^ Herczeg ;
 721: LD_ADDR_EXP 31
 725: PUSH
 726: LD_EXP 31
 730: PUSH
 731: LD_EXP 17
 735: ADD
 736: ST_TO_ADDR
// end else
 737: GO 747
// begin Herczeg = false ;
 739: LD_ADDR_EXP 17
 743: PUSH
 744: LD_INT 0
 746: ST_TO_ADDR
// end ; if TestCharacters ( Mia_04 ) then
 747: LD_STRING Mia_04
 749: PPUSH
 750: CALL_OW 28
 754: IFFALSE 787
// begin Mia := CreateCharacter ( Mia_04 ) ;
 756: LD_ADDR_EXP 18
 760: PUSH
 761: LD_STRING Mia_04
 763: PPUSH
 764: CALL_OW 34
 768: ST_TO_ADDR
// AllPeo = AllPeo ^ Mia ;
 769: LD_ADDR_EXP 31
 773: PUSH
 774: LD_EXP 31
 778: PUSH
 779: LD_EXP 18
 783: ADD
 784: ST_TO_ADDR
// end else
 785: GO 795
// begin Mia = false ;
 787: LD_ADDR_EXP 18
 791: PUSH
 792: LD_INT 0
 794: ST_TO_ADDR
// end ; if TestCharacters ( Kantor_04 ) then
 795: LD_STRING Kantor_04
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 835
// begin Kantor := CreateCharacter ( Kantor_04 ) ;
 804: LD_ADDR_EXP 19
 808: PUSH
 809: LD_STRING Kantor_04
 811: PPUSH
 812: CALL_OW 34
 816: ST_TO_ADDR
// AllPeo = AllPeo ^ Kantor ;
 817: LD_ADDR_EXP 31
 821: PUSH
 822: LD_EXP 31
 826: PUSH
 827: LD_EXP 19
 831: ADD
 832: ST_TO_ADDR
// end else
 833: GO 843
// begin Kantor = false ;
 835: LD_ADDR_EXP 19
 839: PUSH
 840: LD_INT 0
 842: ST_TO_ADDR
// end ; if TestCharacters ( Gunther_04 ) then
 843: LD_STRING Gunther_04
 845: PPUSH
 846: CALL_OW 28
 850: IFFALSE 881
// begin Gunther := CreateCharacter ( Gunther_04 ) ;
 852: LD_ADDR_EXP 21
 856: PUSH
 857: LD_STRING Gunther_04
 859: PPUSH
 860: CALL_OW 34
 864: ST_TO_ADDR
// AllPeo = AllPeo ^ Gunther ;
 865: LD_ADDR_EXP 31
 869: PUSH
 870: LD_EXP 31
 874: PUSH
 875: LD_EXP 21
 879: ADD
 880: ST_TO_ADDR
// end ; if TestCharacters ( Ronn_04 ) then
 881: LD_STRING Ronn_04
 883: PPUSH
 884: CALL_OW 28
 888: IFFALSE 919
// begin Ronn := CreateCharacter ( Ronn_04 ) ;
 890: LD_ADDR_EXP 20
 894: PUSH
 895: LD_STRING Ronn_04
 897: PPUSH
 898: CALL_OW 34
 902: ST_TO_ADDR
// AllPeo = AllPeo ^ Ronn ;
 903: LD_ADDR_EXP 31
 907: PUSH
 908: LD_EXP 31
 912: PUSH
 913: LD_EXP 20
 917: ADD
 918: ST_TO_ADDR
// end ; if TestCharacters ( Ronn_Scout ) then
 919: LD_STRING Ronn_Scout
 921: PPUSH
 922: CALL_OW 28
 926: IFFALSE 941
// begin Ronn := CreateCharacter ( Ronn_Scout ) ;
 928: LD_ADDR_EXP 20
 932: PUSH
 933: LD_STRING Ronn_Scout
 935: PPUSH
 936: CALL_OW 34
 940: ST_TO_ADDR
// end ; if TestCharacters ( ot1_04 ) then
 941: LD_STRING ot1_04
 943: PPUSH
 944: CALL_OW 28
 948: IFFALSE 981
// begin ot1 := CreateCharacter ( ot1_04 ) ;
 950: LD_ADDR_EXP 23
 954: PUSH
 955: LD_STRING ot1_04
 957: PPUSH
 958: CALL_OW 34
 962: ST_TO_ADDR
// AllPeo = AllPeo ^ ot1 ;
 963: LD_ADDR_EXP 31
 967: PUSH
 968: LD_EXP 31
 972: PUSH
 973: LD_EXP 23
 977: ADD
 978: ST_TO_ADDR
// end else
 979: GO 989
// begin ot1 = false ;
 981: LD_ADDR_EXP 23
 985: PUSH
 986: LD_INT 0
 988: ST_TO_ADDR
// end ; if TestCharacters ( ot2_04 ) then
 989: LD_STRING ot2_04
 991: PPUSH
 992: CALL_OW 28
 996: IFFALSE 1029
// begin ot2 := CreateCharacter ( ot2_04 ) ;
 998: LD_ADDR_EXP 24
1002: PUSH
1003: LD_STRING ot2_04
1005: PPUSH
1006: CALL_OW 34
1010: ST_TO_ADDR
// AllPeo = AllPeo ^ ot2 ;
1011: LD_ADDR_EXP 31
1015: PUSH
1016: LD_EXP 31
1020: PUSH
1021: LD_EXP 24
1025: ADD
1026: ST_TO_ADDR
// end else
1027: GO 1037
// begin ot2 = false ;
1029: LD_ADDR_EXP 24
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// end ; if TestCharacters ( ot3_04 ) then
1037: LD_STRING ot3_04
1039: PPUSH
1040: CALL_OW 28
1044: IFFALSE 1077
// begin ot3 := CreateCharacter ( ot3_04 ) ;
1046: LD_ADDR_EXP 25
1050: PUSH
1051: LD_STRING ot3_04
1053: PPUSH
1054: CALL_OW 34
1058: ST_TO_ADDR
// AllPeo = AllPeo ^ ot3 ;
1059: LD_ADDR_EXP 31
1063: PUSH
1064: LD_EXP 31
1068: PUSH
1069: LD_EXP 25
1073: ADD
1074: ST_TO_ADDR
// end else
1075: GO 1085
// begin ot3 = false ;
1077: LD_ADDR_EXP 25
1081: PUSH
1082: LD_INT 0
1084: ST_TO_ADDR
// end ; if TestCharacters ( ot4_04 ) then
1085: LD_STRING ot4_04
1087: PPUSH
1088: CALL_OW 28
1092: IFFALSE 1125
// begin ot4 := CreateCharacter ( ot4_04 ) ;
1094: LD_ADDR_EXP 26
1098: PUSH
1099: LD_STRING ot4_04
1101: PPUSH
1102: CALL_OW 34
1106: ST_TO_ADDR
// AllPeo = AllPeo ^ ot4 ;
1107: LD_ADDR_EXP 31
1111: PUSH
1112: LD_EXP 31
1116: PUSH
1117: LD_EXP 26
1121: ADD
1122: ST_TO_ADDR
// end else
1123: GO 1133
// begin ot4 = false ;
1125: LD_ADDR_EXP 26
1129: PUSH
1130: LD_INT 0
1132: ST_TO_ADDR
// end ; if TestCharacters ( ot5_04 ) then
1133: LD_STRING ot5_04
1135: PPUSH
1136: CALL_OW 28
1140: IFFALSE 1173
// begin ot5 := CreateCharacter ( ot5_04 ) ;
1142: LD_ADDR_EXP 27
1146: PUSH
1147: LD_STRING ot5_04
1149: PPUSH
1150: CALL_OW 34
1154: ST_TO_ADDR
// AllPeo = AllPeo ^ ot5 ;
1155: LD_ADDR_EXP 31
1159: PUSH
1160: LD_EXP 31
1164: PUSH
1165: LD_EXP 27
1169: ADD
1170: ST_TO_ADDR
// end else
1171: GO 1181
// begin ot5 = false ;
1173: LD_ADDR_EXP 27
1177: PUSH
1178: LD_INT 0
1180: ST_TO_ADDR
// end ; if TestCharacters ( ot6_04 ) then
1181: LD_STRING ot6_04
1183: PPUSH
1184: CALL_OW 28
1188: IFFALSE 1221
// begin ot6 := CreateCharacter ( ot6_04 ) ;
1190: LD_ADDR_EXP 28
1194: PUSH
1195: LD_STRING ot6_04
1197: PPUSH
1198: CALL_OW 34
1202: ST_TO_ADDR
// AllPeo = AllPeo ^ ot6 ;
1203: LD_ADDR_EXP 31
1207: PUSH
1208: LD_EXP 31
1212: PUSH
1213: LD_EXP 28
1217: ADD
1218: ST_TO_ADDR
// end else
1219: GO 1229
// begin ot6 = false ;
1221: LD_ADDR_EXP 28
1225: PUSH
1226: LD_INT 0
1228: ST_TO_ADDR
// end ; if TestCharacters ( ot7_04 ) then
1229: LD_STRING ot7_04
1231: PPUSH
1232: CALL_OW 28
1236: IFFALSE 1269
// begin ot7 := CreateCharacter ( ot7_04 ) ;
1238: LD_ADDR_EXP 29
1242: PUSH
1243: LD_STRING ot7_04
1245: PPUSH
1246: CALL_OW 34
1250: ST_TO_ADDR
// AllPeo = AllPeo ^ ot7 ;
1251: LD_ADDR_EXP 31
1255: PUSH
1256: LD_EXP 31
1260: PUSH
1261: LD_EXP 29
1265: ADD
1266: ST_TO_ADDR
// end else
1267: GO 1277
// begin ot7 = false ;
1269: LD_ADDR_EXP 29
1273: PUSH
1274: LD_INT 0
1276: ST_TO_ADDR
// end ; uc_side := 5 ;
1277: LD_ADDR_OWVAR 20
1281: PUSH
1282: LD_INT 5
1284: ST_TO_ADDR
// Gensher := NewCharacter ( Dietrich ) ;
1285: LD_ADDR_EXP 22
1289: PUSH
1290: LD_STRING Dietrich
1292: PPUSH
1293: CALL_OW 25
1297: ST_TO_ADDR
// for i = 1 to AllPeo do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_EXP 31
1312: PUSH
1313: FOR_TO
1314: IFFALSE 1364
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) [ i ] ;
1316: LD_ADDR_VAR 0 6
1320: PUSH
1321: LD_VAR 0 6
1325: PUSH
1326: LD_INT 22
1328: PUSH
1329: LD_INT 2
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: LD_INT 21
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 69
1354: PUSH
1355: LD_VAR 0 3
1359: ARRAY
1360: ADD
1361: ST_TO_ADDR
// end ;
1362: GO 1313
1364: POP
1365: POP
// for i = 1 to AllPeo do
1366: LD_ADDR_VAR 0 3
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 31
1380: PUSH
1381: FOR_TO
1382: IFFALSE 1412
// begin PlaceHumanInUnit ( AllPeo [ i ] , vehs [ i ] ) ;
1384: LD_EXP 31
1388: PUSH
1389: LD_VAR 0 3
1393: ARRAY
1394: PPUSH
1395: LD_VAR 0 6
1399: PUSH
1400: LD_VAR 0 3
1404: ARRAY
1405: PPUSH
1406: CALL_OW 52
// end ;
1410: GO 1381
1412: POP
1413: POP
// for i = 1 to FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ] ) do
1414: LD_ADDR_VAR 0 3
1418: PUSH
1419: DOUBLE
1420: LD_INT 1
1422: DEC
1423: ST_TO_ADDR
1424: LD_INT 22
1426: PUSH
1427: LD_INT 2
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 21
1436: PUSH
1437: LD_INT 2
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 58
1446: PUSH
1447: EMPTY
1448: LIST
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: EMPTY
1456: LIST
1457: PPUSH
1458: CALL_OW 69
1462: PUSH
1463: FOR_TO
1464: IFFALSE 1517
// begin RemoveUnit ( FilterAllUnits ( [ [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ] ) [ i ] ) ;
1466: LD_INT 22
1468: PUSH
1469: LD_INT 2
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 21
1478: PUSH
1479: LD_INT 2
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 58
1488: PUSH
1489: EMPTY
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: EMPTY
1498: LIST
1499: PPUSH
1500: CALL_OW 69
1504: PUSH
1505: LD_VAR 0 3
1509: ARRAY
1510: PPUSH
1511: CALL_OW 64
// end ;
1515: GO 1463
1517: POP
1518: POP
// end ; end_of_file
1519: LD_VAR 0 1
1523: RET
// export f_baz , f_eng , f_sold , f_mech , f_sci , skills ; export function PrepareRussian ; var mis_level , depots , towers , factors , labs , barr , towers_emp , sources , time_add , time , i , j , b , un , veh , filter , x_y ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
1537: PPUSH
1538: PPUSH
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// mis_level := [ 1 , 2 , 3 ] [ Difficulty ] ;
1544: LD_ADDR_VAR 0 2
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 2
1554: PUSH
1555: LD_INT 3
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PUSH
1563: LD_OWVAR 67
1567: ARRAY
1568: ST_TO_ADDR
// skills := [ 4 , 5 , 6 ] [ Difficulty ] ;
1569: LD_ADDR_EXP 38
1573: PUSH
1574: LD_INT 4
1576: PUSH
1577: LD_INT 5
1579: PUSH
1580: LD_INT 6
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_OWVAR 67
1592: ARRAY
1593: ST_TO_ADDR
// sources := [ 1000 , 2000 , 3000 ] [ Difficulty ] ;
1594: LD_ADDR_VAR 0 9
1598: PUSH
1599: LD_INT 1000
1601: PUSH
1602: LD_INT 2000
1604: PUSH
1605: LD_INT 3000
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_OWVAR 67
1617: ARRAY
1618: ST_TO_ADDR
// depots := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] , [ f_or , [ f_btype , b_warehouse ] ] ] ) ;
1619: LD_ADDR_VAR 0 3
1623: PUSH
1624: LD_INT 22
1626: PUSH
1627: LD_INT 3
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: LD_INT 30
1636: PUSH
1637: LD_INT 0
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: PUSH
1644: LD_INT 2
1646: PUSH
1647: LD_INT 30
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PPUSH
1666: CALL_OW 69
1670: ST_TO_ADDR
// case Difficulty of 1 :
1671: LD_OWVAR 67
1675: PUSH
1676: LD_INT 1
1678: DOUBLE
1679: EQUAL
1680: IFTRUE 1684
1682: GO 1694
1684: POP
// RemoveSide ( 1 ) ; 2 , 3 :
1685: LD_INT 1
1687: PPUSH
1688: CALL 4655 0 1
1692: GO 1734
1694: LD_INT 2
1696: DOUBLE
1697: EQUAL
1698: IFTRUE 1708
1700: LD_INT 3
1702: DOUBLE
1703: EQUAL
1704: IFTRUE 1708
1706: GO 1733
1708: POP
// SetSide ( FilterAllUnits ( [ f_side , 1 ] ) , 3 ) ; end ;
1709: LD_INT 22
1711: PUSH
1712: LD_INT 1
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PPUSH
1719: CALL_OW 69
1723: PPUSH
1724: LD_INT 3
1726: PPUSH
1727: CALL_OW 235
1731: GO 1734
1733: POP
// towers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
1734: LD_ADDR_VAR 0 4
1738: PUSH
1739: LD_INT 22
1741: PUSH
1742: LD_INT 3
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 30
1751: PUSH
1752: LD_INT 32
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PPUSH
1763: CALL_OW 69
1767: ST_TO_ADDR
// factors := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
1768: LD_ADDR_VAR 0 5
1772: PUSH
1773: LD_INT 22
1775: PUSH
1776: LD_INT 3
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PUSH
1783: LD_INT 30
1785: PUSH
1786: LD_INT 3
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PPUSH
1797: CALL_OW 69
1801: ST_TO_ADDR
// labs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] , [ f_or , [ f_btype , b_lab_full ] ] ] ) ;
1802: LD_ADDR_VAR 0 6
1806: PUSH
1807: LD_INT 22
1809: PUSH
1810: LD_INT 3
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 2
1829: PUSH
1830: LD_INT 30
1832: PUSH
1833: LD_INT 8
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: LIST
1848: PPUSH
1849: CALL_OW 69
1853: ST_TO_ADDR
// barr := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) ;
1854: LD_ADDR_VAR 0 7
1858: PUSH
1859: LD_INT 22
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 5
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 69
1887: ST_TO_ADDR
// time := [ 12 12$30 , 11 11$10 , 10 10$25 ] [ Difficulty ] ;
1888: LD_ADDR_VAR 0 11
1892: PUSH
1893: LD_INT 26250
1895: PUSH
1896: LD_INT 23450
1898: PUSH
1899: LD_INT 21875
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: LD_OWVAR 67
1911: ARRAY
1912: ST_TO_ADDR
// time_add := [ - 0 0$30 , - 0 0$50 , - 1 1$05 ] [ Difficulty ] ;
1913: LD_ADDR_VAR 0 10
1917: PUSH
1918: LD_INT 1050
1920: NEG
1921: PUSH
1922: LD_INT 1750
1924: NEG
1925: PUSH
1926: LD_INT 2275
1928: NEG
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_OWVAR 67
1939: ARRAY
1940: ST_TO_ADDR
// f_sold := [ ] ;
1941: LD_ADDR_EXP 35
1945: PUSH
1946: EMPTY
1947: ST_TO_ADDR
// f_baz := [ ] ;
1948: LD_ADDR_EXP 33
1952: PUSH
1953: EMPTY
1954: ST_TO_ADDR
// f_eng := [ ] ;
1955: LD_ADDR_EXP 34
1959: PUSH
1960: EMPTY
1961: ST_TO_ADDR
// f_mech := [ ] ;
1962: LD_ADDR_EXP 36
1966: PUSH
1967: EMPTY
1968: ST_TO_ADDR
// f_sci := [ ] ;
1969: LD_ADDR_EXP 37
1973: PUSH
1974: EMPTY
1975: ST_TO_ADDR
// SetBName ( ru_base , molotov ) ;
1976: LD_INT 17
1978: PPUSH
1979: LD_STRING molotov
1981: PPUSH
1982: CALL_OW 500
// towers_emp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_bunker ] ] ) ;
1986: LD_ADDR_VAR 0 8
1990: PUSH
1991: LD_INT 22
1993: PUSH
1994: LD_INT 8
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 30
2003: PUSH
2004: LD_INT 32
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PPUSH
2015: CALL_OW 69
2019: ST_TO_ADDR
// for i = 1 to towers_emp do
2020: LD_ADDR_VAR 0 12
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_VAR 0 8
2034: PUSH
2035: FOR_TO
2036: IFFALSE 2058
// begin SetSide ( towers_emp [ i ] , 3 ) ;
2038: LD_VAR 0 8
2042: PUSH
2043: LD_VAR 0 12
2047: ARRAY
2048: PPUSH
2049: LD_INT 3
2051: PPUSH
2052: CALL_OW 235
// end ;
2056: GO 2035
2058: POP
2059: POP
// uc_side := 3 ;
2060: LD_ADDR_OWVAR 20
2064: PUSH
2065: LD_INT 3
2067: ST_TO_ADDR
// uc_nation = nation_russian ;
2068: LD_ADDR_OWVAR 21
2072: PUSH
2073: LD_INT 3
2075: ST_TO_ADDR
// for i in towers do
2076: LD_ADDR_VAR 0 12
2080: PUSH
2081: LD_VAR 0 4
2085: PUSH
2086: FOR_IN
2087: IFFALSE 2128
// begin if IsInUnit ( i ) = 0 then
2089: LD_VAR 0 12
2093: PPUSH
2094: CALL_OW 310
2098: PUSH
2099: LD_INT 0
2101: EQUAL
2102: IFFALSE 2126
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_soldier , skills ) , i ) ;
2104: LD_INT 1
2106: PPUSH
2107: LD_EXP 38
2111: PPUSH
2112: CALL 4009 0 2
2116: PPUSH
2117: LD_VAR 0 12
2121: PPUSH
2122: CALL_OW 52
// end ; end ;
2126: GO 2086
2128: POP
2129: POP
// for i in barr do
2130: LD_ADDR_VAR 0 12
2134: PUSH
2135: LD_VAR 0 7
2139: PUSH
2140: FOR_IN
2141: IFFALSE 2206
// begin for j = 1 to ( 2 * mis_level ) + Rand ( - 1 , 0 ) do
2143: LD_ADDR_VAR 0 13
2147: PUSH
2148: DOUBLE
2149: LD_INT 1
2151: DEC
2152: ST_TO_ADDR
2153: LD_INT 2
2155: PUSH
2156: LD_VAR 0 2
2160: MUL
2161: PUSH
2162: LD_INT 1
2164: NEG
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: CALL_OW 12
2173: PLUS
2174: PUSH
2175: FOR_TO
2176: IFFALSE 2202
// begin PlaceHumanInUnit ( CreateHumanWithClass ( class_bazooker , skills ) , i ) ;
2178: LD_INT 9
2180: PPUSH
2181: LD_EXP 38
2185: PPUSH
2186: CALL 4009 0 2
2190: PPUSH
2191: LD_VAR 0 12
2195: PPUSH
2196: CALL_OW 52
// end ;
2200: GO 2175
2202: POP
2203: POP
// end ;
2204: GO 2140
2206: POP
2207: POP
// x_y := [ 170 , 81 , 159 , 67 ] ;
2208: LD_ADDR_VAR 0 18
2212: PUSH
2213: LD_INT 170
2215: PUSH
2216: LD_INT 81
2218: PUSH
2219: LD_INT 159
2221: PUSH
2222: LD_INT 67
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: ST_TO_ADDR
// for i = 1 to FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) do
2231: LD_ADDR_VAR 0 12
2235: PUSH
2236: DOUBLE
2237: LD_INT 1
2239: DEC
2240: ST_TO_ADDR
2241: LD_INT 22
2243: PUSH
2244: LD_INT 3
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PUSH
2251: LD_INT 30
2253: PUSH
2254: LD_INT 31
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PPUSH
2265: CALL_OW 69
2269: PUSH
2270: FOR_TO
2271: IFFALSE 2365
// begin un := CreateHumanWithClass ( class_bazooker , skills ) ;
2273: LD_ADDR_VAR 0 15
2277: PUSH
2278: LD_INT 9
2280: PPUSH
2281: LD_EXP 38
2285: PPUSH
2286: CALL 4009 0 2
2290: ST_TO_ADDR
// PlaceUnitXY ( un , x_y [ i ] , x_y [ i + 1 ] , false ) ;
2291: LD_VAR 0 15
2295: PPUSH
2296: LD_VAR 0 18
2300: PUSH
2301: LD_VAR 0 12
2305: ARRAY
2306: PPUSH
2307: LD_VAR 0 18
2311: PUSH
2312: LD_VAR 0 12
2316: PUSH
2317: LD_INT 1
2319: PLUS
2320: ARRAY
2321: PPUSH
2322: LD_INT 0
2324: PPUSH
2325: CALL_OW 48
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , un ) ) ;
2329: LD_VAR 0 15
2333: PPUSH
2334: LD_INT 30
2336: PUSH
2337: LD_INT 31
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PPUSH
2344: CALL_OW 69
2348: PPUSH
2349: LD_VAR 0 15
2353: PPUSH
2354: CALL_OW 74
2358: PPUSH
2359: CALL_OW 120
// end ;
2363: GO 2270
2365: POP
2366: POP
// for i = 1 to 2 do
2367: LD_ADDR_VAR 0 12
2371: PUSH
2372: DOUBLE
2373: LD_INT 1
2375: DEC
2376: ST_TO_ADDR
2377: LD_INT 2
2379: PUSH
2380: FOR_TO
2381: IFFALSE 2431
// begin PlaceUnitArea ( CreateHumanWithClass ( 4 , skills ) , ru_scia , false ) ;
2383: LD_INT 4
2385: PPUSH
2386: LD_EXP 38
2390: PPUSH
2391: CALL 4009 0 2
2395: PPUSH
2396: LD_INT 13
2398: PPUSH
2399: LD_INT 0
2401: PPUSH
2402: CALL_OW 49
// PlaceUnitArea ( CreateHumanWithClass ( 1 , skills ) , ru_scia , false ) ;
2406: LD_INT 1
2408: PPUSH
2409: LD_EXP 38
2413: PPUSH
2414: CALL 4009 0 2
2418: PPUSH
2419: LD_INT 13
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: CALL_OW 49
// end ;
2429: GO 2380
2431: POP
2432: POP
// for i = 1 to 6 + ( mis_level - 1 ) do
2433: LD_ADDR_VAR 0 12
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 6
2445: PUSH
2446: LD_VAR 0 2
2450: PUSH
2451: LD_INT 1
2453: MINUS
2454: PLUS
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2554
// begin PlaceUnitArea ( CreateHumanWithClass ( class_engineer , skills ) , ru_spawn , false ) ;
2459: LD_INT 2
2461: PPUSH
2462: LD_EXP 38
2466: PPUSH
2467: CALL 4009 0 2
2471: PPUSH
2472: LD_INT 4
2474: PPUSH
2475: LD_INT 0
2477: PPUSH
2478: CALL_OW 49
// f_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
2482: LD_ADDR_EXP 34
2486: PUSH
2487: LD_INT 22
2489: PUSH
2490: LD_INT 3
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 25
2499: PUSH
2500: LD_INT 2
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: PPUSH
2511: CALL_OW 69
2515: ST_TO_ADDR
// ComEnterUnit ( f_eng [ i ] , NearestUnitToUnit ( depots , f_eng [ i ] ) ) ;
2516: LD_EXP 34
2520: PUSH
2521: LD_VAR 0 12
2525: ARRAY
2526: PPUSH
2527: LD_VAR 0 3
2531: PPUSH
2532: LD_EXP 34
2536: PUSH
2537: LD_VAR 0 12
2541: ARRAY
2542: PPUSH
2543: CALL_OW 74
2547: PPUSH
2548: CALL_OW 120
// end ;
2552: GO 2456
2554: POP
2555: POP
// filter := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_rocket_launcher ] ] ] ) ;
2556: LD_ADDR_VAR 0 17
2560: PUSH
2561: LD_INT 22
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: LD_INT 21
2573: PUSH
2574: LD_INT 2
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 34
2583: PUSH
2584: LD_INT 45
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: LIST
2595: PUSH
2596: EMPTY
2597: LIST
2598: PPUSH
2599: CALL_OW 69
2603: ST_TO_ADDR
// for i = 1 to filter do
2604: LD_ADDR_VAR 0 12
2608: PUSH
2609: DOUBLE
2610: LD_INT 1
2612: DEC
2613: ST_TO_ADDR
2614: LD_VAR 0 17
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2652
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skills ) , filter [ i ] ) ;
2622: LD_INT 3
2624: PPUSH
2625: LD_EXP 38
2629: PPUSH
2630: CALL 4009 0 2
2634: PPUSH
2635: LD_VAR 0 17
2639: PUSH
2640: LD_VAR 0 12
2644: ARRAY
2645: PPUSH
2646: CALL_OW 52
2650: GO 2619
2652: POP
2653: POP
// end ;
2654: LD_VAR 0 1
2658: RET
// every 0 0$01 do var un , filter , buildings , depots , i ;
2659: GO 2661
2661: DISABLE
2662: LD_INT 0
2664: PPUSH
2665: PPUSH
2666: PPUSH
2667: PPUSH
2668: PPUSH
// begin enable ;
2669: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
2670: LD_ADDR_VAR 0 2
2674: PUSH
2675: LD_INT 22
2677: PUSH
2678: LD_INT 3
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: LD_INT 25
2687: PUSH
2688: LD_INT 2
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PPUSH
2699: CALL_OW 69
2703: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2704: LD_ADDR_VAR 0 3
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 21
2721: PUSH
2722: LD_INT 3
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: LD_INT 24
2734: PUSH
2735: LD_INT 1000
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: PPUSH
2754: CALL_OW 69
2758: ST_TO_ADDR
// depots := [ ru_base , ru_base2 ] ;
2759: LD_ADDR_VAR 0 4
2763: PUSH
2764: LD_INT 17
2766: PUSH
2767: LD_INT 37
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: ST_TO_ADDR
// if buildings > 0 then
2774: LD_VAR 0 3
2778: PUSH
2779: LD_INT 0
2781: GREATER
2782: IFFALSE 2944
// begin for i = 1 to filter do
2784: LD_ADDR_VAR 0 5
2788: PUSH
2789: DOUBLE
2790: LD_INT 1
2792: DEC
2793: ST_TO_ADDR
2794: LD_VAR 0 2
2798: PUSH
2799: FOR_TO
2800: IFFALSE 2942
// begin if GetLives ( filter [ i ] ) > 990 then
2802: LD_VAR 0 2
2806: PUSH
2807: LD_VAR 0 5
2811: ARRAY
2812: PPUSH
2813: CALL_OW 256
2817: PUSH
2818: LD_INT 990
2820: GREATER
2821: IFFALSE 2901
// begin if IsInUnit ( filter [ i ] ) then
2823: LD_VAR 0 2
2827: PUSH
2828: LD_VAR 0 5
2832: ARRAY
2833: PPUSH
2834: CALL_OW 310
2838: IFFALSE 2857
// ComExitBuilding ( filter [ i ] ) else
2840: LD_VAR 0 2
2844: PUSH
2845: LD_VAR 0 5
2849: ARRAY
2850: PPUSH
2851: CALL_OW 122
2855: GO 2899
// if not HasTask ( filter [ i ] ) then
2857: LD_VAR 0 2
2861: PUSH
2862: LD_VAR 0 5
2866: ARRAY
2867: PPUSH
2868: CALL_OW 314
2872: NOT
2873: IFFALSE 2899
// ComRepairBuilding ( filter [ i ] , buildings [ 1 ] ) ;
2875: LD_VAR 0 2
2879: PUSH
2880: LD_VAR 0 5
2884: ARRAY
2885: PPUSH
2886: LD_VAR 0 3
2890: PUSH
2891: LD_INT 1
2893: ARRAY
2894: PPUSH
2895: CALL_OW 130
// end else
2899: GO 2940
// if GetLives ( filter [ i ] ) <= 750 then
2901: LD_VAR 0 2
2905: PUSH
2906: LD_VAR 0 5
2910: ARRAY
2911: PPUSH
2912: CALL_OW 256
2916: PUSH
2917: LD_INT 750
2919: LESSEQUAL
2920: IFFALSE 2940
// ComEnterUnit ( filter [ i ] , ru_base ) ;
2922: LD_VAR 0 2
2926: PUSH
2927: LD_VAR 0 5
2931: ARRAY
2932: PPUSH
2933: LD_INT 17
2935: PPUSH
2936: CALL_OW 120
// end ;
2940: GO 2799
2942: POP
2943: POP
// end ; if buildings = 0 then
2944: LD_VAR 0 3
2948: PUSH
2949: LD_INT 0
2951: EQUAL
2952: IFFALSE 3044
// begin for i = 1 to filter do
2954: LD_ADDR_VAR 0 5
2958: PUSH
2959: DOUBLE
2960: LD_INT 1
2962: DEC
2963: ST_TO_ADDR
2964: LD_VAR 0 2
2968: PUSH
2969: FOR_TO
2970: IFFALSE 3042
// begin if not HasTask ( filter [ i ] ) and not IsInUnit ( filter [ i ] ) then
2972: LD_VAR 0 2
2976: PUSH
2977: LD_VAR 0 5
2981: ARRAY
2982: PPUSH
2983: CALL_OW 314
2987: NOT
2988: PUSH
2989: LD_VAR 0 2
2993: PUSH
2994: LD_VAR 0 5
2998: ARRAY
2999: PPUSH
3000: CALL_OW 310
3004: NOT
3005: AND
3006: IFFALSE 3040
// ComEnterUnit ( filter [ i ] , depots [ Rand ( 1 , 2 ) ] ) ;
3008: LD_VAR 0 2
3012: PUSH
3013: LD_VAR 0 5
3017: ARRAY
3018: PPUSH
3019: LD_VAR 0 4
3023: PUSH
3024: LD_INT 1
3026: PPUSH
3027: LD_INT 2
3029: PPUSH
3030: CALL_OW 12
3034: ARRAY
3035: PPUSH
3036: CALL_OW 120
// end ;
3040: GO 2969
3042: POP
3043: POP
// end ; end ;
3044: PPOPN 5
3046: END
// every 0 0$01 do var un , filter , towers , barracks ;
3047: GO 3049
3049: DISABLE
3050: LD_INT 0
3052: PPUSH
3053: PPUSH
3054: PPUSH
3055: PPUSH
// begin enable ;
3056: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
3057: LD_ADDR_VAR 0 2
3061: PUSH
3062: LD_INT 22
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 25
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: LD_INT 54
3087: PUSH
3088: EMPTY
3089: LIST
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: LIST
3099: PPUSH
3100: CALL_OW 69
3104: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) ;
3105: LD_ADDR_VAR 0 3
3109: PUSH
3110: LD_INT 22
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 30
3122: PUSH
3123: LD_INT 32
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 3
3132: PUSH
3133: LD_INT 59
3135: PUSH
3136: EMPTY
3137: LIST
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: PPUSH
3148: CALL_OW 69
3152: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) ;
3153: LD_ADDR_VAR 0 4
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 30
3170: PUSH
3171: LD_INT 5
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PPUSH
3182: CALL_OW 69
3186: ST_TO_ADDR
// if filter > 0 then
3187: LD_VAR 0 2
3191: PUSH
3192: LD_INT 0
3194: GREATER
3195: IFFALSE 3279
// begin if towers > 0 then
3197: LD_VAR 0 3
3201: PUSH
3202: LD_INT 0
3204: GREATER
3205: IFFALSE 3231
// ComEnterUnit ( filter [ 1 ] , towers [ 1 ] ) else
3207: LD_VAR 0 2
3211: PUSH
3212: LD_INT 1
3214: ARRAY
3215: PPUSH
3216: LD_VAR 0 3
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PPUSH
3225: CALL_OW 120
3229: GO 3279
// if not HasTask ( filter [ 1 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: CALL_OW 314
3244: NOT
3245: IFFALSE 3279
// ComEnterUnit ( filter [ 1 ] , barracks [ Rand ( 1 , barracks ) ] ) ;
3247: LD_VAR 0 2
3251: PUSH
3252: LD_INT 1
3254: ARRAY
3255: PPUSH
3256: LD_VAR 0 4
3260: PUSH
3261: LD_INT 1
3263: PPUSH
3264: LD_VAR 0 4
3268: PPUSH
3269: CALL_OW 12
3273: ARRAY
3274: PPUSH
3275: CALL_OW 120
// end ; end ;
3279: PPOPN 4
3281: END
// export function TrapInForest ; var un , ape , filter , enemy , i ; begin
3282: LD_INT 0
3284: PPUSH
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
3289: PPUSH
// for i = 1 to 4 + [ 1 , 4 , 6 ] [ Difficulty ] do
3290: LD_ADDR_VAR 0 6
3294: PUSH
3295: DOUBLE
3296: LD_INT 1
3298: DEC
3299: ST_TO_ADDR
3300: LD_INT 4
3302: PUSH
3303: LD_INT 1
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: LD_INT 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: LIST
3316: PUSH
3317: LD_OWVAR 67
3321: ARRAY
3322: PLUS
3323: PUSH
3324: FOR_TO
3325: IFFALSE 3339
// begin CreateApemanSoldierArea ( 7 , forest_trap ) ;
3327: LD_INT 7
3329: PPUSH
3330: LD_INT 6
3332: PPUSH
3333: CALL 4454 0 2
// end ;
3337: GO 3324
3339: POP
3340: POP
// uc_side := 7 ;
3341: LD_ADDR_OWVAR 20
3345: PUSH
3346: LD_INT 7
3348: ST_TO_ADDR
// uc_nation := nation_russian ;
3349: LD_ADDR_OWVAR 21
3353: PUSH
3354: LD_INT 3
3356: ST_TO_ADDR
// for i = 1 to 2 do
3357: LD_ADDR_VAR 0 6
3361: PUSH
3362: DOUBLE
3363: LD_INT 1
3365: DEC
3366: ST_TO_ADDR
3367: LD_INT 2
3369: PUSH
3370: FOR_TO
3371: IFFALSE 3487
// begin hc_class = 4 ;
3373: LD_ADDR_OWVAR 28
3377: PUSH
3378: LD_INT 4
3380: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , Rand ( 3 , 6 ) ] ;
3381: LD_ADDR_OWVAR 31
3385: PUSH
3386: LD_INT 0
3388: PPUSH
3389: LD_INT 3
3391: PPUSH
3392: CALL_OW 12
3396: PUSH
3397: LD_INT 0
3399: PPUSH
3400: LD_INT 3
3402: PPUSH
3403: CALL_OW 12
3407: PUSH
3408: LD_INT 0
3410: PPUSH
3411: LD_INT 3
3413: PPUSH
3414: CALL_OW 12
3418: PUSH
3419: LD_INT 3
3421: PPUSH
3422: LD_INT 6
3424: PPUSH
3425: CALL_OW 12
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
3436: LD_ADDR_OWVAR 27
3440: PUSH
3441: LD_INT 1
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: CALL_OW 12
3451: ST_TO_ADDR
// hc_gallery =  ;
3452: LD_ADDR_OWVAR 33
3456: PUSH
3457: LD_STRING 
3459: ST_TO_ADDR
// un = CreateHuman ;
3460: LD_ADDR_VAR 0 2
3464: PUSH
3465: CALL_OW 44
3469: ST_TO_ADDR
// PlaceUnitArea ( un , forest_trap , false ) ;
3470: LD_VAR 0 2
3474: PPUSH
3475: LD_INT 6
3477: PPUSH
3478: LD_INT 0
3480: PPUSH
3481: CALL_OW 49
// end ;
3485: GO 3370
3487: POP
3488: POP
// filter := FilterAllUnits ( [ [ f_side , 7 ] , [ f_class , class_apeman_soldier ] ] ) ;
3489: LD_ADDR_VAR 0 4
3493: PUSH
3494: LD_INT 22
3496: PUSH
3497: LD_INT 7
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_INT 25
3506: PUSH
3507: LD_INT 15
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: PPUSH
3518: CALL_OW 69
3522: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: LD_INT 22
3530: PUSH
3531: LD_INT 2
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PPUSH
3538: CALL_OW 69
3542: ST_TO_ADDR
// for un in filter do
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: LD_VAR 0 4
3552: PUSH
3553: FOR_IN
3554: IFFALSE 3582
// begin ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) ;
3556: LD_VAR 0 2
3560: PPUSH
3561: LD_VAR 0 5
3565: PPUSH
3566: LD_VAR 0 2
3570: PPUSH
3571: CALL_OW 74
3575: PPUSH
3576: CALL_OW 115
// end ;
3580: GO 3553
3582: POP
3583: POP
// end ;
3584: LD_VAR 0 1
3588: RET
// export function SpawnVehs ( side , x , area ) ; var i , veh ; begin
3589: LD_INT 0
3591: PPUSH
3592: PPUSH
3593: PPUSH
// uc_side := side ;
3594: LD_ADDR_OWVAR 20
3598: PUSH
3599: LD_VAR 0 1
3603: ST_TO_ADDR
// uc_nation := nation_russian ;
3604: LD_ADDR_OWVAR 21
3608: PUSH
3609: LD_INT 3
3611: ST_TO_ADDR
// for i = 1 to x do
3612: LD_ADDR_VAR 0 5
3616: PUSH
3617: DOUBLE
3618: LD_INT 1
3620: DEC
3621: ST_TO_ADDR
3622: LD_VAR 0 2
3626: PUSH
3627: FOR_TO
3628: IFFALSE 3765
// begin vc_chassis := [ ru_medium_tracked , ru_heavy_wheeled ] [ Rand ( 1 , 2 ) ] ;
3630: LD_ADDR_OWVAR 37
3634: PUSH
3635: LD_INT 22
3637: PUSH
3638: LD_INT 23
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 1
3647: PPUSH
3648: LD_INT 2
3650: PPUSH
3651: CALL_OW 12
3655: ARRAY
3656: ST_TO_ADDR
// vc_engine := engine_combustion ;
3657: LD_ADDR_OWVAR 39
3661: PUSH
3662: LD_INT 1
3664: ST_TO_ADDR
// vc_control := control_manual ;
3665: LD_ADDR_OWVAR 38
3669: PUSH
3670: LD_INT 1
3672: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_gatling_gun , ru_rocket_launcher ] [ Rand ( 1 , 3 ) ] ;
3673: LD_ADDR_OWVAR 40
3677: PUSH
3678: LD_INT 44
3680: PUSH
3681: LD_INT 43
3683: PUSH
3684: LD_INT 45
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 1
3694: PPUSH
3695: LD_INT 3
3697: PPUSH
3698: CALL_OW 12
3702: ARRAY
3703: ST_TO_ADDR
// veh := CreateVehicle ;
3704: LD_ADDR_VAR 0 6
3708: PUSH
3709: CALL_OW 45
3713: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
3714: LD_VAR 0 6
3718: PPUSH
3719: LD_VAR 0 3
3723: PPUSH
3724: LD_INT 0
3726: PPUSH
3727: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , skills ) , veh ) ;
3731: LD_INT 3
3733: PPUSH
3734: LD_EXP 38
3738: PPUSH
3739: CALL 4009 0 2
3743: PPUSH
3744: LD_VAR 0 6
3748: PPUSH
3749: CALL_OW 52
// result := veh ;
3753: LD_ADDR_VAR 0 4
3757: PUSH
3758: LD_VAR 0 6
3762: ST_TO_ADDR
// end ;
3763: GO 3627
3765: POP
3766: POP
// end ;
3767: LD_VAR 0 4
3771: RET
// every 1 1$03 + 0 0$2 trigger spoted = false do var veh ;
3772: LD_EXP 1
3776: PUSH
3777: LD_INT 0
3779: EQUAL
3780: IFFALSE 3906
3782: GO 3784
3784: DISABLE
3785: LD_INT 0
3787: PPUSH
// begin enable ;
3788: ENABLE
// veh := SpawnVehs ( 3 , 1 , Rand ( at2_area , at3_area ) ) ;
3789: LD_ADDR_VAR 0 1
3793: PUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 1
3799: PPUSH
3800: LD_INT 11
3802: PPUSH
3803: LD_INT 12
3805: PPUSH
3806: CALL_OW 12
3810: PPUSH
3811: CALL 3589 0 3
3815: ST_TO_ADDR
// AddComMoveToArea ( veh , p1 ) ;
3816: LD_VAR 0 1
3820: PPUSH
3821: LD_INT 14
3823: PPUSH
3824: CALL_OW 173
// AddComMoveToArea ( veh , p2 ) ;
3828: LD_VAR 0 1
3832: PPUSH
3833: LD_INT 15
3835: PPUSH
3836: CALL_OW 173
// AddComMoveToArea ( veh , p3 ) ;
3840: LD_VAR 0 1
3844: PPUSH
3845: LD_INT 16
3847: PPUSH
3848: CALL_OW 173
// AddComMoveToArea ( veh , p4 ) ;
3852: LD_VAR 0 1
3856: PPUSH
3857: LD_INT 17
3859: PPUSH
3860: CALL_OW 173
// AddComMoveToArea ( veh , p6 ) ;
3864: LD_VAR 0 1
3868: PPUSH
3869: LD_INT 19
3871: PPUSH
3872: CALL_OW 173
// repeat Wait ( 0 0$01 ) ;
3876: LD_INT 35
3878: PPUSH
3879: CALL_OW 67
// until IsInArea ( veh , p5 ) ;
3883: LD_VAR 0 1
3887: PPUSH
3888: LD_INT 18
3890: PPUSH
3891: CALL_OW 308
3895: IFFALSE 3876
// RemoveUnit ( veh ) ;
3897: LD_VAR 0 1
3901: PPUSH
3902: CALL_OW 64
// end ;
3906: PPOPN 1
3908: END
// every 0 0$01 trigger clock >= time_limit do var i , veh ;
3909: LD_EXP 2
3913: PUSH
3914: LD_EXP 7
3918: GREATEREQUAL
3919: IFFALSE 4006
3921: GO 3923
3923: DISABLE
3924: LD_INT 0
3926: PPUSH
3927: PPUSH
// begin for i = 1 to [ Difficulty ] do
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: DOUBLE
3934: LD_INT 1
3936: DEC
3937: ST_TO_ADDR
3938: LD_OWVAR 67
3942: PUSH
3943: EMPTY
3944: LIST
3945: PUSH
3946: FOR_TO
3947: IFFALSE 4004
// begin veh := SpawnVehs ( 3 , 1 , start_area ) ;
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: LD_INT 3
3956: PPUSH
3957: LD_INT 1
3959: PPUSH
3960: LD_INT 2
3962: PPUSH
3963: CALL 3589 0 3
3967: ST_TO_ADDR
// ComAttackUnit ( veh , NearestUnitToUnit ( filterallunits ( [ f_side , 2 ] ) , veh ) ) ;
3968: LD_VAR 0 2
3972: PPUSH
3973: LD_INT 22
3975: PUSH
3976: LD_INT 2
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PPUSH
3983: CALL_OW 69
3987: PPUSH
3988: LD_VAR 0 2
3992: PPUSH
3993: CALL_OW 74
3997: PPUSH
3998: CALL_OW 115
// end ;
4002: GO 3946
4004: POP
4005: POP
// end ; end_of_file
4006: PPOPN 2
4008: END
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
4009: LD_INT 0
4011: PPUSH
4012: PPUSH
4013: PPUSH
4014: PPUSH
4015: PPUSH
4016: PPUSH
// hc_class := clas ;
4017: LD_ADDR_OWVAR 28
4021: PUSH
4022: LD_VAR 0 1
4026: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
4027: LD_ADDR_VAR 0 4
4031: PUSH
4032: LD_VAR 0 2
4036: PUSH
4037: LD_INT 1
4039: NEG
4040: PPUSH
4041: LD_INT 1
4043: PPUSH
4044: CALL_OW 12
4048: PLUS
4049: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_VAR 0 2
4059: PUSH
4060: LD_INT 1
4062: NEG
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: CALL_OW 12
4071: PLUS
4072: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
4073: LD_ADDR_VAR 0 6
4077: PUSH
4078: LD_VAR 0 2
4082: PUSH
4083: LD_INT 1
4085: NEG
4086: PPUSH
4087: LD_INT 1
4089: PPUSH
4090: CALL_OW 12
4094: PLUS
4095: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
4096: LD_ADDR_VAR 0 7
4100: PUSH
4101: LD_VAR 0 2
4105: PUSH
4106: LD_INT 1
4108: NEG
4109: PPUSH
4110: LD_INT 1
4112: PPUSH
4113: CALL_OW 12
4117: PLUS
4118: ST_TO_ADDR
// if clas = 1 or clas = 9 then
4119: LD_VAR 0 1
4123: PUSH
4124: LD_INT 1
4126: EQUAL
4127: PUSH
4128: LD_VAR 0 1
4132: PUSH
4133: LD_INT 9
4135: EQUAL
4136: OR
4137: IFFALSE 4162
// bonus := [ 2 , 0 , 0 , 0 ] ;
4139: LD_ADDR_VAR 0 8
4143: PUSH
4144: LD_INT 2
4146: PUSH
4147: LD_INT 0
4149: PUSH
4150: LD_INT 0
4152: PUSH
4153: LD_INT 0
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: ST_TO_ADDR
// if clas = 2 then
4162: LD_VAR 0 1
4166: PUSH
4167: LD_INT 2
4169: EQUAL
4170: IFFALSE 4195
// bonus := [ 0 , 2 , 0 , 0 ] ;
4172: LD_ADDR_VAR 0 8
4176: PUSH
4177: LD_INT 0
4179: PUSH
4180: LD_INT 2
4182: PUSH
4183: LD_INT 0
4185: PUSH
4186: LD_INT 0
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: ST_TO_ADDR
// if clas = 3 then
4195: LD_VAR 0 1
4199: PUSH
4200: LD_INT 3
4202: EQUAL
4203: IFFALSE 4228
// bonus := [ 0 , 0 , 2 , 0 ] ;
4205: LD_ADDR_VAR 0 8
4209: PUSH
4210: LD_INT 0
4212: PUSH
4213: LD_INT 0
4215: PUSH
4216: LD_INT 2
4218: PUSH
4219: LD_INT 0
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: ST_TO_ADDR
// if clas = 4 then
4228: LD_VAR 0 1
4232: PUSH
4233: LD_INT 4
4235: EQUAL
4236: IFFALSE 4261
// bonus := [ 0 , 0 , 0 , 2 ] ;
4238: LD_ADDR_VAR 0 8
4242: PUSH
4243: LD_INT 0
4245: PUSH
4246: LD_INT 0
4248: PUSH
4249: LD_INT 0
4251: PUSH
4252: LD_INT 2
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: ST_TO_ADDR
// if clas > 4 and not clas = 9 then
4261: LD_VAR 0 1
4265: PUSH
4266: LD_INT 4
4268: GREATER
4269: PUSH
4270: LD_VAR 0 1
4274: PUSH
4275: LD_INT 9
4277: EQUAL
4278: NOT
4279: AND
4280: IFFALSE 4305
// bonus := [ 0 , 0 , 0 , 0 ] ;
4282: LD_ADDR_VAR 0 8
4286: PUSH
4287: LD_INT 0
4289: PUSH
4290: LD_INT 0
4292: PUSH
4293: LD_INT 0
4295: PUSH
4296: LD_INT 0
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
4305: LD_ADDR_OWVAR 31
4309: PUSH
4310: LD_VAR 0 4
4314: PUSH
4315: LD_VAR 0 8
4319: PUSH
4320: LD_INT 1
4322: ARRAY
4323: PLUS
4324: PUSH
4325: LD_VAR 0 5
4329: PUSH
4330: LD_VAR 0 8
4334: PUSH
4335: LD_INT 2
4337: ARRAY
4338: PLUS
4339: PUSH
4340: LD_VAR 0 6
4344: PUSH
4345: LD_VAR 0 8
4349: PUSH
4350: LD_INT 3
4352: ARRAY
4353: PLUS
4354: PUSH
4355: LD_VAR 0 7
4359: PUSH
4360: LD_VAR 0 8
4364: PUSH
4365: LD_INT 4
4367: ARRAY
4368: PLUS
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
4376: LD_ADDR_OWVAR 27
4380: PUSH
4381: LD_INT 1
4383: PPUSH
4384: LD_INT 2
4386: PPUSH
4387: CALL_OW 12
4391: ST_TO_ADDR
// hc_gallery :=  ;
4392: LD_ADDR_OWVAR 33
4396: PUSH
4397: LD_STRING 
4399: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
4400: LD_ADDR_OWVAR 29
4404: PUSH
4405: LD_INT 8
4407: PPUSH
4408: LD_INT 12
4410: PPUSH
4411: CALL_OW 12
4415: PUSH
4416: LD_INT 9
4418: PPUSH
4419: LD_INT 11
4421: PPUSH
4422: CALL_OW 12
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: ST_TO_ADDR
// hc_name :=  ;
4431: LD_ADDR_OWVAR 26
4435: PUSH
4436: LD_STRING 
4438: ST_TO_ADDR
// result := CreateHuman ;
4439: LD_ADDR_VAR 0 3
4443: PUSH
4444: CALL_OW 44
4448: ST_TO_ADDR
// end ;
4449: LD_VAR 0 3
4453: RET
// export function CreateApemanSoldierArea ( side , area ) ; var un ; begin
4454: LD_INT 0
4456: PPUSH
4457: PPUSH
// uc_side := side ;
4458: LD_ADDR_OWVAR 20
4462: PUSH
4463: LD_VAR 0 1
4467: ST_TO_ADDR
// uc_nation = 0 ;
4468: LD_ADDR_OWVAR 21
4472: PUSH
4473: LD_INT 0
4475: ST_TO_ADDR
// hc_class = class_apeman_soldier ;
4476: LD_ADDR_OWVAR 28
4480: PUSH
4481: LD_INT 15
4483: ST_TO_ADDR
// hc_skills = [ [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 ] ;
4484: LD_ADDR_OWVAR 31
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: LD_INT 4
4494: PUSH
4495: LD_INT 5
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: LD_OWVAR 67
4507: ARRAY
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: ST_TO_ADDR
// hc_agressivity = Rand ( 15 , 25 ) ;
4524: LD_ADDR_OWVAR 35
4528: PUSH
4529: LD_INT 15
4531: PPUSH
4532: LD_INT 25
4534: PPUSH
4535: CALL_OW 12
4539: ST_TO_ADDR
// hc_sex = sex_male ;
4540: LD_ADDR_OWVAR 27
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// hc_name =  ;
4548: LD_ADDR_OWVAR 26
4552: PUSH
4553: LD_STRING 
4555: ST_TO_ADDR
// hc_gallery =  ;
4556: LD_ADDR_OWVAR 33
4560: PUSH
4561: LD_STRING 
4563: ST_TO_ADDR
// un := CreateHuman ;
4564: LD_ADDR_VAR 0 4
4568: PUSH
4569: CALL_OW 44
4573: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4574: LD_VAR 0 4
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: LD_INT 0
4586: PPUSH
4587: CALL_OW 49
// end ;
4591: LD_VAR 0 3
4595: RET
// export function GetCor ( un ) ; var x , y ; begin
4596: LD_INT 0
4598: PPUSH
4599: PPUSH
4600: PPUSH
// x := GetX ( un ) ;
4601: LD_ADDR_VAR 0 3
4605: PUSH
4606: LD_VAR 0 1
4610: PPUSH
4611: CALL_OW 250
4615: ST_TO_ADDR
// y := GetY ( un ) ;
4616: LD_ADDR_VAR 0 4
4620: PUSH
4621: LD_VAR 0 1
4625: PPUSH
4626: CALL_OW 251
4630: ST_TO_ADDR
// result := [ x , y ] ;
4631: LD_ADDR_VAR 0 2
4635: PUSH
4636: LD_VAR 0 3
4640: PUSH
4641: LD_VAR 0 4
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: ST_TO_ADDR
// end ;
4650: LD_VAR 0 2
4654: RET
// export function RemoveSide ( side ) ; var i , filter ; begin
4655: LD_INT 0
4657: PPUSH
4658: PPUSH
4659: PPUSH
// filter := FilterAllUnits ( [ f_side , side ] ) ;
4660: LD_ADDR_VAR 0 4
4664: PUSH
4665: LD_INT 22
4667: PUSH
4668: LD_VAR 0 1
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PPUSH
4677: CALL_OW 69
4681: ST_TO_ADDR
// for i = 1 to filter do
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: DOUBLE
4688: LD_INT 1
4690: DEC
4691: ST_TO_ADDR
4692: LD_VAR 0 4
4696: PUSH
4697: FOR_TO
4698: IFFALSE 4717
// RemoveUnit ( filter [ i ] ) ;
4700: LD_VAR 0 4
4704: PUSH
4705: LD_VAR 0 3
4709: ARRAY
4710: PPUSH
4711: CALL_OW 64
4715: GO 4697
4717: POP
4718: POP
// end ;
4719: LD_VAR 0 2
4723: RET
// export function SeeSide ( side , side2 ) ; var i , filter ; begin
4724: LD_INT 0
4726: PPUSH
4727: PPUSH
4728: PPUSH
// filter := FilterAllUnits ( [ f_side , side ] ) ;
4729: LD_ADDR_VAR 0 5
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_VAR 0 1
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PPUSH
4746: CALL_OW 69
4750: ST_TO_ADDR
// for i = 1 to filter do
4751: LD_ADDR_VAR 0 4
4755: PUSH
4756: DOUBLE
4757: LD_INT 1
4759: DEC
4760: ST_TO_ADDR
4761: LD_VAR 0 5
4765: PUSH
4766: FOR_TO
4767: IFFALSE 4801
// if See ( side2 , filter [ i ] ) then
4769: LD_VAR 0 2
4773: PPUSH
4774: LD_VAR 0 5
4778: PUSH
4779: LD_VAR 0 4
4783: ARRAY
4784: PPUSH
4785: CALL_OW 292
4789: IFFALSE 4799
// result := true ;
4791: LD_ADDR_VAR 0 3
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
4799: GO 4766
4801: POP
4802: POP
// end ;
4803: LD_VAR 0 3
4807: RET
// export function SetVision ( val ) ; var i ; begin
4808: LD_INT 0
4810: PPUSH
4811: PPUSH
// for i = 1 to val do
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: DOUBLE
4818: LD_INT 1
4820: DEC
4821: ST_TO_ADDR
4822: LD_VAR 0 1
4826: PUSH
4827: FOR_TO
4828: IFFALSE 4919
// begin case i of 1 :
4830: LD_VAR 0 3
4834: PUSH
4835: LD_INT 1
4837: DOUBLE
4838: EQUAL
4839: IFTRUE 4843
4841: GO 4862
4843: POP
// PlaceSeeing ( 120 , 66 , 2 , 10 ) ; 2 :
4844: LD_INT 120
4846: PPUSH
4847: LD_INT 66
4849: PPUSH
4850: LD_INT 2
4852: PPUSH
4853: LD_INT 10
4855: PPUSH
4856: CALL_OW 330
4860: GO 4917
4862: LD_INT 2
4864: DOUBLE
4865: EQUAL
4866: IFTRUE 4870
4868: GO 4889
4870: POP
// PlaceSeeing ( 84 , 137 , 2 , 10 ) ; 3 :
4871: LD_INT 84
4873: PPUSH
4874: LD_INT 137
4876: PPUSH
4877: LD_INT 2
4879: PPUSH
4880: LD_INT 10
4882: PPUSH
4883: CALL_OW 330
4887: GO 4917
4889: LD_INT 3
4891: DOUBLE
4892: EQUAL
4893: IFTRUE 4897
4895: GO 4916
4897: POP
// PlaceSeeing ( 113 , 115 , 2 , 10 ) ; end ;
4898: LD_INT 113
4900: PPUSH
4901: LD_INT 115
4903: PPUSH
4904: LD_INT 2
4906: PPUSH
4907: LD_INT 10
4909: PPUSH
4910: CALL_OW 330
4914: GO 4917
4916: POP
// end ;
4917: GO 4827
4919: POP
4920: POP
// end ; end_of_file
4921: LD_VAR 0 2
4925: RET
// export Ronn_Scout ; export function StartMission ; var i , kom , filter ; begin
4926: LD_INT 0
4928: PPUSH
4929: PPUSH
4930: PPUSH
4931: PPUSH
// if TestCharacters ( Ronn_Scout ) then
4932: LD_STRING Ronn_Scout
4934: PPUSH
4935: CALL_OW 28
4939: IFFALSE 4951
// begin Ronn_Scout := true end else
4941: LD_ADDR_EXP 39
4945: PUSH
4946: LD_INT 1
4948: ST_TO_ADDR
4949: GO 4959
// begin Ronn_Scout := false ;
4951: LD_ADDR_EXP 39
4955: PUSH
4956: LD_INT 0
4958: ST_TO_ADDR
// end ; if Ronn_Scout then
4959: LD_EXP 39
4963: IFFALSE 5045
// begin i := Rand ( 1 , 2 ) ;
4965: LD_ADDR_VAR 0 2
4969: PUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 2
4975: PPUSH
4976: CALL_OW 12
4980: ST_TO_ADDR
// case i of 1 :
4981: LD_VAR 0 2
4985: PUSH
4986: LD_INT 1
4988: DOUBLE
4989: EQUAL
4990: IFTRUE 4994
4992: GO 5015
4994: POP
// PlaceUnitXY ( Ronn , 122 , 36 , false ) ; 2 :
4995: LD_EXP 20
4999: PPUSH
5000: LD_INT 122
5002: PPUSH
5003: LD_INT 36
5005: PPUSH
5006: LD_INT 0
5008: PPUSH
5009: CALL_OW 48
5013: GO 5045
5015: LD_INT 2
5017: DOUBLE
5018: EQUAL
5019: IFTRUE 5023
5021: GO 5044
5023: POP
// PlaceUnitXY ( Ronn , 48 , 6 , false ) ; end ;
5024: LD_EXP 20
5028: PPUSH
5029: LD_INT 48
5031: PPUSH
5032: LD_INT 6
5034: PPUSH
5035: LD_INT 0
5037: PPUSH
5038: CALL_OW 48
5042: GO 5045
5044: POP
// end ; InGameOn ;
5045: CALL_OW 8
// CenterNowOnXY ( 84 , 4 ) ;
5049: LD_INT 84
5051: PPUSH
5052: LD_INT 4
5054: PPUSH
5055: CALL_OW 86
// SayRadio ( Gensher , DG-1 ) ;
5059: LD_EXP 22
5063: PPUSH
5064: LD_STRING DG-1
5066: PPUSH
5067: CALL_OW 94
// Say ( Louis , DL-1 ) ;
5071: LD_EXP 10
5075: PPUSH
5076: LD_STRING DL-1
5078: PPUSH
5079: CALL_OW 88
// SayRadio ( Gensher , DG-2 ) ;
5083: LD_EXP 22
5087: PPUSH
5088: LD_STRING DG-2
5090: PPUSH
5091: CALL_OW 94
// Say ( Louis , DL-2 ) ;
5095: LD_EXP 10
5099: PPUSH
5100: LD_STRING DL-2
5102: PPUSH
5103: CALL_OW 88
// SayRadio ( Gensher , DG-3 ) ;
5107: LD_EXP 22
5111: PPUSH
5112: LD_STRING DG-3
5114: PPUSH
5115: CALL_OW 94
// Say ( Louis , DL-3 ) ;
5119: LD_EXP 10
5123: PPUSH
5124: LD_STRING DL-3
5126: PPUSH
5127: CALL_OW 88
// Say ( AllPeo [ 5 ] , DP-1 ) ;
5131: LD_EXP 31
5135: PUSH
5136: LD_INT 5
5138: ARRAY
5139: PPUSH
5140: LD_STRING DP-1
5142: PPUSH
5143: CALL_OW 88
// Say ( AllPeo [ 4 ] , DP-2 ) ;
5147: LD_EXP 31
5151: PUSH
5152: LD_INT 4
5154: ARRAY
5155: PPUSH
5156: LD_STRING DP-2
5158: PPUSH
5159: CALL_OW 88
// if Ronn_Scout then
5163: LD_EXP 39
5167: IFFALSE 5420
// begin Say ( Louis , DL-4-Scout ) ;
5169: LD_EXP 10
5173: PPUSH
5174: LD_STRING DL-4-Scout
5176: PPUSH
5177: CALL_OW 88
// ComMoveXY ( Ronn , 86 , 13 ) ;
5181: LD_EXP 20
5185: PPUSH
5186: LD_INT 86
5188: PPUSH
5189: LD_INT 13
5191: PPUSH
5192: CALL_OW 111
// repeat Wait ( 0 0$01 ) ;
5196: LD_INT 35
5198: PPUSH
5199: CALL_OW 67
// until GetDistUnitXY ( Ronn , 80 , 14 ) <= 10 ;
5203: LD_EXP 20
5207: PPUSH
5208: LD_INT 80
5210: PPUSH
5211: LD_INT 14
5213: PPUSH
5214: CALL_OW 297
5218: PUSH
5219: LD_INT 10
5221: LESSEQUAL
5222: IFFALSE 5196
// ComTurnXY ( Ronn , 77 , 3 ) ;
5224: LD_EXP 20
5228: PPUSH
5229: LD_INT 77
5231: PPUSH
5232: LD_INT 3
5234: PPUSH
5235: CALL_OW 118
// CenterOnUnits ( Ronn ) ;
5239: LD_EXP 20
5243: PPUSH
5244: CALL_OW 85
// SetVision ( 4 - [ Difficulty ] ) ;
5248: LD_INT 4
5250: PUSH
5251: LD_OWVAR 67
5255: PUSH
5256: EMPTY
5257: LIST
5258: MINUS
5259: PPUSH
5260: CALL 4808 0 1
// Say ( Ronn , DR-1 ) ;
5264: LD_EXP 20
5268: PPUSH
5269: LD_STRING DR-1
5271: PPUSH
5272: CALL_OW 88
// Say ( Louis , DL-5-Scout ) ;
5276: LD_EXP 10
5280: PPUSH
5281: LD_STRING DL-5-Scout
5283: PPUSH
5284: CALL_OW 88
// Say ( Ronn , DR-2 ) ;
5288: LD_EXP 20
5292: PPUSH
5293: LD_STRING DR-2
5295: PPUSH
5296: CALL_OW 88
// Say ( Ronn , DR-3 ) ;
5300: LD_EXP 20
5304: PPUSH
5305: LD_STRING DR-3
5307: PPUSH
5308: CALL_OW 88
// Say ( Ronn , DR-3a ) ;
5312: LD_EXP 20
5316: PPUSH
5317: LD_STRING DR-3a
5319: PPUSH
5320: CALL_OW 88
// Say ( Ronn , DR-4 ) ;
5324: LD_EXP 20
5328: PPUSH
5329: LD_STRING DR-4
5331: PPUSH
5332: CALL_OW 88
// Say ( Louis , DL-6-Scout ) ;
5336: LD_EXP 10
5340: PPUSH
5341: LD_STRING DL-6-Scout
5343: PPUSH
5344: CALL_OW 88
// Say ( Ronn , DR-5 ) ;
5348: LD_EXP 20
5352: PPUSH
5353: LD_STRING DR-5
5355: PPUSH
5356: CALL_OW 88
// Say ( Ronn , DR-6 ) ;
5360: LD_EXP 20
5364: PPUSH
5365: LD_STRING DR-6
5367: PPUSH
5368: CALL_OW 88
// Say ( Louis , DL-7-Scout ) ;
5372: LD_EXP 10
5376: PPUSH
5377: LD_STRING DL-7-Scout
5379: PPUSH
5380: CALL_OW 88
// Say ( Ronn , DR-7 ) ;
5384: LD_EXP 20
5388: PPUSH
5389: LD_STRING DR-7
5391: PPUSH
5392: CALL_OW 88
// Say ( Louis , DL-8-Scout ) ;
5396: LD_EXP 10
5400: PPUSH
5401: LD_STRING DL-8-Scout
5403: PPUSH
5404: CALL_OW 88
// Say ( Ronn , DR-8 ) ;
5408: LD_EXP 20
5412: PPUSH
5413: LD_STRING DR-8
5415: PPUSH
5416: CALL_OW 88
// end ; InGameOff ;
5420: CALL_OW 9
// ChangeMissionObjectives ( Factory ) ;
5424: LD_STRING Factory
5426: PPUSH
5427: CALL_OW 337
// SaveForQuickRestart ;
5431: CALL_OW 22
// kom := LoadVariable ( VarKom , 0 ) ;
5435: LD_ADDR_VAR 0 3
5439: PUSH
5440: LD_STRING VarKom
5442: PPUSH
5443: LD_INT 0
5445: PPUSH
5446: CALL_OW 30
5450: ST_TO_ADDR
// if kom = true then
5451: LD_VAR 0 3
5455: PUSH
5456: LD_INT 1
5458: EQUAL
5459: IFFALSE 5592
// begin Wait ( 0 0$07 ) ;
5461: LD_INT 245
5463: PPUSH
5464: CALL_OW 67
// SpawnVehs ( 6 , 2 + [ Difficulty ] , at1_area ) ;
5468: LD_INT 6
5470: PPUSH
5471: LD_INT 2
5473: PUSH
5474: LD_OWVAR 67
5478: PUSH
5479: EMPTY
5480: LIST
5481: PLUS
5482: PPUSH
5483: LD_INT 10
5485: PPUSH
5486: CALL 3589 0 3
// filter := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
5490: LD_ADDR_VAR 0 4
5494: PUSH
5495: LD_INT 22
5497: PUSH
5498: LD_INT 6
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: PUSH
5505: LD_INT 21
5507: PUSH
5508: LD_INT 2
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PPUSH
5519: CALL_OW 69
5523: ST_TO_ADDR
// for i = 1 to filter do
5524: LD_ADDR_VAR 0 2
5528: PUSH
5529: DOUBLE
5530: LD_INT 1
5532: DEC
5533: ST_TO_ADDR
5534: LD_VAR 0 4
5538: PUSH
5539: FOR_TO
5540: IFFALSE 5590
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , filter [ i ] ) ) ;
5542: LD_VAR 0 4
5546: PUSH
5547: LD_VAR 0 2
5551: ARRAY
5552: PPUSH
5553: LD_INT 22
5555: PUSH
5556: LD_INT 2
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PPUSH
5563: CALL_OW 69
5567: PPUSH
5568: LD_VAR 0 4
5572: PUSH
5573: LD_VAR 0 2
5577: ARRAY
5578: PPUSH
5579: CALL_OW 74
5583: PPUSH
5584: CALL_OW 115
5588: GO 5539
5590: POP
5591: POP
// end ; end ;
5592: LD_VAR 0 1
5596: RET
// every 0 0$01 trigger spoted = false do
5597: LD_EXP 1
5601: PUSH
5602: LD_INT 0
5604: EQUAL
5605: IFFALSE 5625
5607: GO 5609
5609: DISABLE
// begin enable ;
5610: ENABLE
// veh_count := veh_count + 0 0$01 ;
5611: LD_ADDR_EXP 3
5615: PUSH
5616: LD_EXP 3
5620: PUSH
5621: LD_INT 35
5623: PLUS
5624: ST_TO_ADDR
// end ;
5625: END
// every 0 0$01 trigger spoted and veh_count > 0 do
5626: LD_EXP 1
5630: PUSH
5631: LD_EXP 3
5635: PUSH
5636: LD_INT 0
5638: GREATER
5639: AND
5640: IFFALSE 5660
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// veh_count := veh_count - 0 0$01 ;
5646: LD_ADDR_EXP 3
5650: PUSH
5651: LD_EXP 3
5655: PUSH
5656: LD_INT 35
5658: MINUS
5659: ST_TO_ADDR
// end ;
5660: END
// every 0 0$01 trigger SeeSide ( 2 , 3 ) do
5661: LD_INT 2
5663: PPUSH
5664: LD_INT 3
5666: PPUSH
5667: CALL 4724 0 2
5671: IFFALSE 5724
5673: GO 5675
5675: DISABLE
// begin spoted := true ;
5676: LD_ADDR_EXP 1
5680: PUSH
5681: LD_INT 1
5683: ST_TO_ADDR
// SayRadio ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) [ 3 ] , D-help ) ;
5684: LD_INT 22
5686: PUSH
5687: LD_INT 3
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PUSH
5694: LD_INT 21
5696: PUSH
5697: LD_INT 1
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PPUSH
5708: CALL_OW 69
5712: PUSH
5713: LD_INT 3
5715: ARRAY
5716: PPUSH
5717: LD_STRING D-help
5719: PPUSH
5720: CALL_OW 94
// end ;
5724: END
// every 0 0$01 trigger SeeSide ( 8 , 2 ) do
5725: LD_INT 8
5727: PPUSH
5728: LD_INT 2
5730: PPUSH
5731: CALL 4724 0 2
5735: IFFALSE 5777
5737: GO 5739
5739: DISABLE
// begin DialogueOn ;
5740: CALL_OW 6
// CenterNowOnXY ( 152 , 143 ) ;
5744: LD_INT 152
5746: PPUSH
5747: LD_INT 143
5749: PPUSH
5750: CALL_OW 86
// Say ( Louis , DL-empty ) ;
5754: LD_EXP 10
5758: PPUSH
5759: LD_STRING DL-empty
5761: PPUSH
5762: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5766: LD_INT 10
5768: PPUSH
5769: CALL_OW 67
// DialogueOff ;
5773: CALL_OW 7
// end ;
5777: END
// every 0 0$01 trigger veh_count = 0 do var l ;
5778: LD_EXP 3
5782: PUSH
5783: LD_INT 0
5785: EQUAL
5786: IFFALSE 5936
5788: GO 5790
5790: DISABLE
5791: LD_INT 0
5793: PPUSH
// begin DialogueOn ;
5794: CALL_OW 6
// Say ( AllPeo [ 2 ] , D-vehs ) ;
5798: LD_EXP 31
5802: PUSH
5803: LD_INT 2
5805: ARRAY
5806: PPUSH
5807: LD_STRING D-vehs
5809: PPUSH
5810: CALL_OW 88
// PlaceSeeing ( 195 , 124 , 2 , 10 ) ;
5814: LD_INT 195
5816: PPUSH
5817: LD_INT 124
5819: PPUSH
5820: LD_INT 2
5822: PPUSH
5823: LD_INT 10
5825: PPUSH
5826: CALL_OW 330
// CenterOnXY ( 195 , 124 ) ;
5830: LD_INT 195
5832: PPUSH
5833: LD_INT 124
5835: PPUSH
5836: CALL_OW 84
// DialogueOff ;
5840: CALL_OW 7
// SpawnVehs ( 6 , 5 , at2_area ) ;
5844: LD_INT 6
5846: PPUSH
5847: LD_INT 5
5849: PPUSH
5850: LD_INT 11
5852: PPUSH
5853: CALL 3589 0 3
// Wait ( 0 0$03 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// RemoveSeeing ( 195 , 124 , 2 ) ;
5864: LD_INT 195
5866: PPUSH
5867: LD_INT 124
5869: PPUSH
5870: LD_INT 2
5872: PPUSH
5873: CALL_OW 331
// Wait ( 0 0$50 ) ;
5877: LD_INT 1750
5879: PPUSH
5880: CALL_OW 67
// l = 0 ;
5884: LD_ADDR_VAR 0 1
5888: PUSH
5889: LD_INT 0
5891: ST_TO_ADDR
// repeat begin SpawnVehs ( 6 , 5 , at2_area ) ;
5892: LD_INT 6
5894: PPUSH
5895: LD_INT 5
5897: PPUSH
5898: LD_INT 11
5900: PPUSH
5901: CALL 3589 0 3
// l = l + 1 ;
5905: LD_ADDR_VAR 0 1
5909: PUSH
5910: LD_VAR 0 1
5914: PUSH
5915: LD_INT 1
5917: PLUS
5918: ST_TO_ADDR
// Wait ( 1 1$25 ) ;
5919: LD_INT 2975
5921: PPUSH
5922: CALL_OW 67
// end until l = 4 ;
5926: LD_VAR 0 1
5930: PUSH
5931: LD_INT 4
5933: EQUAL
5934: IFFALSE 5892
// end ;
5936: PPOPN 1
5938: END
// every 0 0$01 trigger veh_count = 0 do var un , filter ;
5939: LD_EXP 3
5943: PUSH
5944: LD_INT 0
5946: EQUAL
5947: IFFALSE 6028
5949: GO 5951
5951: DISABLE
5952: LD_INT 0
5954: PPUSH
5955: PPUSH
// begin enable ;
5956: ENABLE
// filter := FilterAllUnits ( [ f_side , 6 ] ) ;
5957: LD_ADDR_VAR 0 2
5961: PUSH
5962: LD_INT 22
5964: PUSH
5965: LD_INT 6
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL_OW 69
5976: ST_TO_ADDR
// for un in filter do
5977: LD_ADDR_VAR 0 1
5981: PUSH
5982: LD_VAR 0 2
5986: PUSH
5987: FOR_IN
5988: IFFALSE 6026
// begin ComAttackUnit ( un , NearestUnitToUnit ( filterallunits ( [ f_side , 2 ] ) , un ) ) ;
5990: LD_VAR 0 1
5994: PPUSH
5995: LD_INT 22
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 69
6009: PPUSH
6010: LD_VAR 0 1
6014: PPUSH
6015: CALL_OW 74
6019: PPUSH
6020: CALL_OW 115
// end ;
6024: GO 5987
6026: POP
6027: POP
// end ;
6028: PPOPN 2
6030: END
// every 0 0$01 trigger FilterAllUnits ( [ f_btype , b_factory ] ) = 0 do
6031: LD_INT 30
6033: PUSH
6034: LD_INT 3
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PPUSH
6041: CALL_OW 69
6045: PUSH
6046: LD_INT 0
6048: EQUAL
6049: IFFALSE 6103
6051: GO 6053
6053: DISABLE
// begin Say ( Louis , DL-escape ) ;
6054: LD_EXP 10
6058: PPUSH
6059: LD_STRING DL-escape
6061: PPUSH
6062: CALL_OW 88
// ChangeMissionObjectives ( escape ) ;
6066: LD_STRING escape
6068: PPUSH
6069: CALL_OW 337
// case query ( info ) of 1 :
6073: LD_STRING info
6075: PPUSH
6076: CALL_OW 97
6080: PUSH
6081: LD_INT 1
6083: DOUBLE
6084: EQUAL
6085: IFTRUE 6089
6087: GO 6092
6089: POP
// begin end ; end ;
6090: GO 6093
6092: POP
// SetAreaMapShow ( exit_area , 1 ) ;
6093: LD_INT 7
6095: PPUSH
6096: LD_INT 1
6098: PPUSH
6099: CALL_OW 424
// end ;
6103: END
// every 0 0$01 trigger FilterAllUnits ( [ f_btype , b_factory ] ) = 0 and FilterUnitsInArea ( exit_area , [ f_side , 2 ] ) > 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_outside ] ] ) = 0 do
6104: LD_INT 30
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PPUSH
6114: CALL_OW 69
6118: PUSH
6119: LD_INT 0
6121: EQUAL
6122: PUSH
6123: LD_INT 7
6125: PPUSH
6126: LD_INT 22
6128: PUSH
6129: LD_INT 2
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PPUSH
6136: CALL_OW 70
6140: PUSH
6141: LD_INT 0
6143: GREATER
6144: AND
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 2
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 56
6158: PUSH
6159: EMPTY
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PPUSH
6166: CALL_OW 69
6170: PUSH
6171: LD_INT 0
6173: EQUAL
6174: AND
6175: IFFALSE 6363
6177: GO 6179
6179: DISABLE
// begin if ar_count = 0 then
6180: LD_EXP 4
6184: PUSH
6185: LD_INT 0
6187: EQUAL
6188: IFFALSE 6202
// AddMedal ( med1 , 1 ) else
6190: LD_STRING med1
6192: PPUSH
6193: LD_INT 1
6195: PPUSH
6196: CALL_OW 101
6200: GO 6247
// if ar_count > 0 then
6202: LD_EXP 4
6206: PUSH
6207: LD_INT 0
6209: GREATER
6210: IFFALSE 6247
// if ar_count < dif_count then
6212: LD_EXP 4
6216: PUSH
6217: LD_EXP 5
6221: LESS
6222: IFFALSE 6236
// AddMedal ( med1 , 2 ) else
6224: LD_STRING med1
6226: PPUSH
6227: LD_INT 2
6229: PPUSH
6230: CALL_OW 101
6234: GO 6247
// AddMedal ( med1 , - 1 ) ;
6236: LD_STRING med1
6238: PPUSH
6239: LD_INT 1
6241: NEG
6242: PPUSH
6243: CALL_OW 101
// if clock < dif_time then
6247: LD_EXP 2
6251: PUSH
6252: LD_EXP 6
6256: LESS
6257: IFFALSE 6271
// AddMedal ( med2 , 1 ) else
6259: LD_STRING med2
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 101
6269: GO 6282
// AddMedal ( med2 , - 1 ) ;
6271: LD_STRING med2
6273: PPUSH
6274: LD_INT 1
6276: NEG
6277: PPUSH
6278: CALL_OW 101
// if smart_count <= [ 6 , 7 , 7 ] [ Difficulty ] then
6282: LD_EXP 8
6286: PUSH
6287: LD_INT 6
6289: PUSH
6290: LD_INT 7
6292: PUSH
6293: LD_INT 7
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_OWVAR 67
6305: ARRAY
6306: LESSEQUAL
6307: IFFALSE 6321
// AddMedal ( med3 , 1 ) else
6309: LD_STRING med3
6311: PPUSH
6312: LD_INT 1
6314: PPUSH
6315: CALL_OW 101
6319: GO 6332
// AddMedal ( med3 , - 1 ) ;
6321: LD_STRING med3
6323: PPUSH
6324: LD_INT 1
6326: NEG
6327: PPUSH
6328: CALL_OW 101
// GiveMedals ( MAIN ) ;
6332: LD_STRING MAIN
6334: PPUSH
6335: CALL_OW 102
// RewardPeople ( AllPeo ) ;
6339: LD_EXP 31
6343: PPUSH
6344: CALL_OW 43
// Save_Function ;
6348: CALL 7145 0 0
// Save_Variables ;
6352: CALL 7579 0 0
// SetNextMission ( 1 ) ;
6356: LD_INT 1
6358: PPUSH
6359: CALL_OW 536
// end ; end_of_file
6363: END
// every 0 0$01 trigger See ( 2 , north_depot ) do
6364: LD_INT 2
6366: PPUSH
6367: LD_INT 2
6369: PPUSH
6370: CALL_OW 292
6374: IFFALSE 6402
6376: GO 6378
6378: DISABLE
// begin CenterNowOnUnits ( north_depot ) ;
6379: LD_INT 2
6381: PPUSH
6382: CALL_OW 87
// Say ( AllPeo [ 3 ] , DP-ape1 ) ;
6386: LD_EXP 31
6390: PUSH
6391: LD_INT 3
6393: ARRAY
6394: PPUSH
6395: LD_STRING DP-ape1
6397: PPUSH
6398: CALL_OW 88
// end ;
6402: END
// every 0 0$01 trigger FilterUnitsInArea ( forest , [ f_side , 2 ] ) > 0 marked 30 do
6403: LD_INT 5
6405: PPUSH
6406: LD_INT 22
6408: PUSH
6409: LD_INT 2
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PPUSH
6416: CALL_OW 70
6420: PUSH
6421: LD_INT 0
6423: GREATER
6424: IFFALSE 6457
6426: GO 6428
6428: DISABLE
// begin TrapInForest ;
6429: CALL 3282 0 0
// Say ( AllPeo [ 3 ] , DP-ape2 ) ;
6433: LD_EXP 31
6437: PUSH
6438: LD_INT 3
6440: ARRAY
6441: PPUSH
6442: LD_STRING DP-ape2
6444: PPUSH
6445: CALL_OW 88
// trap_on := true ;
6449: LD_ADDR_EXP 9
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// end ;
6457: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 and trap_on do
6458: LD_INT 22
6460: PUSH
6461: LD_INT 7
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 21
6470: PUSH
6471: LD_INT 1
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 69
6486: PUSH
6487: LD_INT 0
6489: EQUAL
6490: PUSH
6491: LD_EXP 9
6495: AND
6496: IFFALSE 6631
6498: GO 6500
6500: DISABLE
// begin DialogueOn ;
6501: CALL_OW 6
// if IsLive ( AllPeo [ 4 ] ) then
6505: LD_EXP 31
6509: PUSH
6510: LD_INT 4
6512: ARRAY
6513: PPUSH
6514: CALL_OW 300
6518: IFFALSE 6538
// Say ( AllPeo [ 4 ] , DP-ape3 ) else
6520: LD_EXP 31
6524: PUSH
6525: LD_INT 4
6527: ARRAY
6528: PPUSH
6529: LD_STRING DP-ape3
6531: PPUSH
6532: CALL_OW 88
6536: GO 6554
// Say ( AllPeo [ 3 ] , DP-ape3 ) ;
6538: LD_EXP 31
6542: PUSH
6543: LD_INT 3
6545: ARRAY
6546: PPUSH
6547: LD_STRING DP-ape3
6549: PPUSH
6550: CALL_OW 88
// Say ( Louis , DP-ape4 ) ;
6554: LD_EXP 10
6558: PPUSH
6559: LD_STRING DP-ape4
6561: PPUSH
6562: CALL_OW 88
// if IsLive ( AllPeo [ 7 ] ) then
6566: LD_EXP 31
6570: PUSH
6571: LD_INT 7
6573: ARRAY
6574: PPUSH
6575: CALL_OW 300
6579: IFFALSE 6599
// Say ( AllPeo [ 7 ] , DP-ape5 ) else
6581: LD_EXP 31
6585: PUSH
6586: LD_INT 7
6588: ARRAY
6589: PPUSH
6590: LD_STRING DP-ape5
6592: PPUSH
6593: CALL_OW 88
6597: GO 6615
// Say ( AllPeo [ 6 ] , DP-ape5 ) ;
6599: LD_EXP 31
6603: PUSH
6604: LD_INT 6
6606: ARRAY
6607: PPUSH
6608: LD_STRING DP-ape5
6610: PPUSH
6611: CALL_OW 88
// Say ( Louis , DP-ape6 ) ;
6615: LD_EXP 10
6619: PPUSH
6620: LD_STRING DP-ape6
6622: PPUSH
6623: CALL_OW 88
// DialogueOff ;
6627: CALL_OW 7
// end ; end_of_file
6631: END
// export ape ; export function PrepareNature ; var i , animal ; begin
6632: LD_INT 0
6634: PPUSH
6635: PPUSH
6636: PPUSH
// uc_side = 0 ;
6637: LD_ADDR_OWVAR 20
6641: PUSH
6642: LD_INT 0
6644: ST_TO_ADDR
// uc_nation = 0 ;
6645: LD_ADDR_OWVAR 21
6649: PUSH
6650: LD_INT 0
6652: ST_TO_ADDR
// for i = 1 to 4 do
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_INT 4
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6720
// begin hc_class = 18 ;
6669: LD_ADDR_OWVAR 28
6673: PUSH
6674: LD_INT 18
6676: ST_TO_ADDR
// hc_gallery = sandnature ;
6677: LD_ADDR_OWVAR 33
6681: PUSH
6682: LD_STRING sandnature
6684: ST_TO_ADDR
// hc_face_number = 1 ;
6685: LD_ADDR_OWVAR 34
6689: PUSH
6690: LD_INT 1
6692: ST_TO_ADDR
// animal := CreateHuman ;
6693: LD_ADDR_VAR 0 3
6697: PUSH
6698: CALL_OW 44
6702: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
6703: LD_VAR 0 3
6707: PPUSH
6708: LD_INT 8
6710: PPUSH
6711: LD_INT 0
6713: PPUSH
6714: CALL_OW 49
// end ;
6718: GO 6666
6720: POP
6721: POP
// for i = 1 to 2 do
6722: LD_ADDR_VAR 0 2
6726: PUSH
6727: DOUBLE
6728: LD_INT 1
6730: DEC
6731: ST_TO_ADDR
6732: LD_INT 2
6734: PUSH
6735: FOR_TO
6736: IFFALSE 6789
// begin hc_class = 13 ;
6738: LD_ADDR_OWVAR 28
6742: PUSH
6743: LD_INT 13
6745: ST_TO_ADDR
// hc_gallery = sandnature ;
6746: LD_ADDR_OWVAR 33
6750: PUSH
6751: LD_STRING sandnature
6753: ST_TO_ADDR
// hc_face_number = 4 ;
6754: LD_ADDR_OWVAR 34
6758: PUSH
6759: LD_INT 4
6761: ST_TO_ADDR
// animal := CreateHuman ;
6762: LD_ADDR_VAR 0 3
6766: PUSH
6767: CALL_OW 44
6771: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
6772: LD_VAR 0 3
6776: PPUSH
6777: LD_INT 8
6779: PPUSH
6780: LD_INT 0
6782: PPUSH
6783: CALL_OW 49
// end ;
6787: GO 6735
6789: POP
6790: POP
// for i = 1 to 3 do
6791: LD_ADDR_VAR 0 2
6795: PUSH
6796: DOUBLE
6797: LD_INT 1
6799: DEC
6800: ST_TO_ADDR
6801: LD_INT 3
6803: PUSH
6804: FOR_TO
6805: IFFALSE 6858
// begin hc_class = 20 ;
6807: LD_ADDR_OWVAR 28
6811: PUSH
6812: LD_INT 20
6814: ST_TO_ADDR
// hc_gallery = sandnature ;
6815: LD_ADDR_OWVAR 33
6819: PUSH
6820: LD_STRING sandnature
6822: ST_TO_ADDR
// hc_face_number = 2 ;
6823: LD_ADDR_OWVAR 34
6827: PUSH
6828: LD_INT 2
6830: ST_TO_ADDR
// animal := CreateHuman ;
6831: LD_ADDR_VAR 0 3
6835: PUSH
6836: CALL_OW 44
6840: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
6841: LD_VAR 0 3
6845: PPUSH
6846: LD_INT 9
6848: PPUSH
6849: LD_INT 0
6851: PPUSH
6852: CALL_OW 49
// end ;
6856: GO 6804
6858: POP
6859: POP
// end ; end_of_file
6860: LD_VAR 0 1
6864: RET
// every 0 0$01 do
6865: GO 6867
6867: DISABLE
// begin enable ;
6868: ENABLE
// clock := clock + 0 0$01 ;
6869: LD_ADDR_EXP 2
6873: PUSH
6874: LD_EXP 2
6878: PUSH
6879: LD_INT 35
6881: PLUS
6882: ST_TO_ADDR
// if spoted = false then
6883: LD_EXP 1
6887: PUSH
6888: LD_INT 0
6890: EQUAL
6891: IFFALSE 6916
// Display_Strings := [ #Ar05-1 , clock , #Ar05-2 ] else
6893: LD_ADDR_OWVAR 47
6897: PUSH
6898: LD_STRING #Ar05-1
6900: PUSH
6901: LD_EXP 2
6905: PUSH
6906: LD_STRING #Ar05-2
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: LIST
6913: ST_TO_ADDR
6914: GO 6947
// Display_Strings := [ #Ar05-1 , clock , #Ar05-3 , #Ar05-4 , veh_count ] ;
6916: LD_ADDR_OWVAR 47
6920: PUSH
6921: LD_STRING #Ar05-1
6923: PUSH
6924: LD_EXP 2
6928: PUSH
6929: LD_STRING #Ar05-3
6931: PUSH
6932: LD_STRING #Ar05-4
6934: PUSH
6935: LD_EXP 3
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: ST_TO_ADDR
// if clock mod 10 10$00 = 0 then
6947: LD_EXP 2
6951: PUSH
6952: LD_INT 21000
6954: MOD
6955: PUSH
6956: LD_INT 0
6958: EQUAL
6959: IFFALSE 6969
// music_nat := 4 ;
6961: LD_ADDR_OWVAR 71
6965: PUSH
6966: LD_INT 4
6968: ST_TO_ADDR
// if clock mod 15 15$00 = 0 then
6969: LD_EXP 2
6973: PUSH
6974: LD_INT 31500
6976: MOD
6977: PUSH
6978: LD_INT 0
6980: EQUAL
6981: IFFALSE 6991
// music_nat := 3 ;
6983: LD_ADDR_OWVAR 71
6987: PUSH
6988: LD_INT 3
6990: ST_TO_ADDR
// end ; end_of_file
6991: END
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = 2 then
6992: LD_VAR 0 1
6996: PPUSH
6997: CALL_OW 255
7001: PUSH
7002: LD_INT 2
7004: EQUAL
7005: IFFALSE 7021
// ar_count := ar_count + 1 ;
7007: LD_ADDR_EXP 4
7011: PUSH
7012: LD_EXP 4
7016: PUSH
7017: LD_INT 1
7019: PLUS
7020: ST_TO_ADDR
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ f_btype , b_bunker ] ) then
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 255
7030: PUSH
7031: LD_INT 3
7033: EQUAL
7034: PUSH
7035: LD_VAR 0 1
7039: PUSH
7040: LD_INT 30
7042: PUSH
7043: LD_INT 32
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PPUSH
7050: CALL_OW 69
7054: IN
7055: AND
7056: IFFALSE 7072
// smart_count := smart_count + 1 ;
7058: LD_ADDR_EXP 8
7062: PUSH
7063: LD_EXP 8
7067: PUSH
7068: LD_INT 1
7070: PLUS
7071: ST_TO_ADDR
// if un = Louis then
7072: LD_VAR 0 1
7076: PUSH
7077: LD_EXP 10
7081: EQUAL
7082: IFFALSE 7091
// YouLost ( louisded ) ;
7084: LD_STRING louisded
7086: PPUSH
7087: CALL_OW 104
// end ;
7091: PPOPN 1
7093: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) then
7094: LD_VAR 0 2
7098: PUSH
7099: LD_INT 22
7101: PUSH
7102: LD_INT 3
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 25
7111: PUSH
7112: LD_INT 2
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PPUSH
7123: CALL_OW 69
7127: IN
7128: IFFALSE 7142
// SetLives ( un , 1000 ) ;
7130: LD_VAR 0 2
7134: PPUSH
7135: LD_INT 1000
7137: PPUSH
7138: CALL_OW 234
// end ; end_of_file
7142: PPOPN 2
7144: END
// export function Save_Function ; begin
7145: LD_INT 0
7147: PPUSH
// SaveCharacters ( Louis , Louis ) ;
7148: LD_EXP 10
7152: PPUSH
7153: LD_STRING Louis
7155: PPUSH
7156: CALL_OW 38
// if IsLive ( Martin ) then
7160: LD_EXP 11
7164: PPUSH
7165: CALL_OW 300
7169: IFFALSE 7183
// begin SaveCharacters ( Martin , Martin_05 ) ;
7171: LD_EXP 11
7175: PPUSH
7176: LD_STRING Martin_05
7178: PPUSH
7179: CALL_OW 38
// end ; if IsLive ( Karla ) then
7183: LD_EXP 12
7187: PPUSH
7188: CALL_OW 300
7192: IFFALSE 7206
// begin SaveCharacters ( Karla , Karla_05 ) ;
7194: LD_EXP 12
7198: PPUSH
7199: LD_STRING Karla_05
7201: PPUSH
7202: CALL_OW 38
// end ; if IsLive ( Dwein ) then
7206: LD_EXP 13
7210: PPUSH
7211: CALL_OW 300
7215: IFFALSE 7229
// begin SaveCharacters ( Dwein , Dwein_05 ) ;
7217: LD_EXP 13
7221: PPUSH
7222: LD_STRING Dwein_05
7224: PPUSH
7225: CALL_OW 38
// end ; if IsLive ( Joachim ) then
7229: LD_EXP 14
7233: PPUSH
7234: CALL_OW 300
7238: IFFALSE 7252
// begin SaveCharacters ( Joachim , Joachim_05 ) ;
7240: LD_EXP 14
7244: PPUSH
7245: LD_STRING Joachim_05
7247: PPUSH
7248: CALL_OW 38
// end ; if IsLive ( Olaf ) then
7252: LD_EXP 15
7256: PPUSH
7257: CALL_OW 300
7261: IFFALSE 7275
// begin SaveCharacters ( Olaf , Olaf_05 ) ;
7263: LD_EXP 15
7267: PPUSH
7268: LD_STRING Olaf_05
7270: PPUSH
7271: CALL_OW 38
// end ; if IsLive ( Mmark ) then
7275: LD_EXP 16
7279: PPUSH
7280: CALL_OW 300
7284: IFFALSE 7298
// begin SaveCharacters ( Mmark , Mmark_05 ) ;
7286: LD_EXP 16
7290: PPUSH
7291: LD_STRING Mmark_05
7293: PPUSH
7294: CALL_OW 38
// end ; if IsLive ( Herczeg ) then
7298: LD_EXP 17
7302: PPUSH
7303: CALL_OW 300
7307: IFFALSE 7321
// begin SaveCharacters ( Herczeg , Herczeg_05 ) ;
7309: LD_EXP 17
7313: PPUSH
7314: LD_STRING Herczeg_05
7316: PPUSH
7317: CALL_OW 38
// end ; if IsLive ( Kantor ) then
7321: LD_EXP 19
7325: PPUSH
7326: CALL_OW 300
7330: IFFALSE 7344
// begin SaveCharacters ( Kantor , Kantor_05 ) ;
7332: LD_EXP 19
7336: PPUSH
7337: LD_STRING Kantor_05
7339: PPUSH
7340: CALL_OW 38
// end ; if IsLive ( Ronn ) then
7344: LD_EXP 20
7348: PPUSH
7349: CALL_OW 300
7353: IFFALSE 7367
// begin SaveCharacters ( Ronn , Ronn_05 ) ;
7355: LD_EXP 20
7359: PPUSH
7360: LD_STRING Ronn_05
7362: PPUSH
7363: CALL_OW 38
// end ; if IsLive ( Mia ) then
7367: LD_EXP 18
7371: PPUSH
7372: CALL_OW 300
7376: IFFALSE 7390
// begin SaveCharacters ( Mia , Mia_05 ) ;
7378: LD_EXP 18
7382: PPUSH
7383: LD_STRING Mia_05
7385: PPUSH
7386: CALL_OW 38
// end ; if IsLive ( Gunther ) then
7390: LD_EXP 21
7394: PPUSH
7395: CALL_OW 300
7399: IFFALSE 7413
// begin SaveCharacters ( Gunther , Gunther_05 ) ;
7401: LD_EXP 21
7405: PPUSH
7406: LD_STRING Gunther_05
7408: PPUSH
7409: CALL_OW 38
// end ; if IsLive ( ot1 ) then
7413: LD_EXP 23
7417: PPUSH
7418: CALL_OW 300
7422: IFFALSE 7436
// begin SaveCharacters ( ot1 , ot1_05 ) ;
7424: LD_EXP 23
7428: PPUSH
7429: LD_STRING ot1_05
7431: PPUSH
7432: CALL_OW 38
// end ; if IsLive ( ot2 ) then
7436: LD_EXP 24
7440: PPUSH
7441: CALL_OW 300
7445: IFFALSE 7459
// begin SaveCharacters ( ot2 , ot2_05 ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING ot2_05
7454: PPUSH
7455: CALL_OW 38
// end ; if IsLive ( ot3 ) then
7459: LD_EXP 25
7463: PPUSH
7464: CALL_OW 300
7468: IFFALSE 7482
// begin SaveCharacters ( ot3 , ot3_05 ) ;
7470: LD_EXP 25
7474: PPUSH
7475: LD_STRING ot3_05
7477: PPUSH
7478: CALL_OW 38
// end ; if IsLive ( ot4 ) then
7482: LD_EXP 26
7486: PPUSH
7487: CALL_OW 300
7491: IFFALSE 7505
// begin SaveCharacters ( ot4 , ot4_05 ) ;
7493: LD_EXP 26
7497: PPUSH
7498: LD_STRING ot4_05
7500: PPUSH
7501: CALL_OW 38
// end ; if IsLive ( ot5 ) then
7505: LD_EXP 27
7509: PPUSH
7510: CALL_OW 300
7514: IFFALSE 7528
// begin SaveCharacters ( ot5 , ot5_05 ) ;
7516: LD_EXP 27
7520: PPUSH
7521: LD_STRING ot5_05
7523: PPUSH
7524: CALL_OW 38
// end ; if IsLive ( ot6 ) then
7528: LD_EXP 28
7532: PPUSH
7533: CALL_OW 300
7537: IFFALSE 7551
// begin SaveCharacters ( ot6 , ot6_05 ) ;
7539: LD_EXP 28
7543: PPUSH
7544: LD_STRING ot6_05
7546: PPUSH
7547: CALL_OW 38
// end ; if IsLive ( ot7 ) then
7551: LD_EXP 29
7555: PPUSH
7556: CALL_OW 300
7560: IFFALSE 7574
// begin SaveCharacters ( ot7 , ot7_05 ) ;
7562: LD_EXP 29
7566: PPUSH
7567: LD_STRING ot7_05
7569: PPUSH
7570: CALL_OW 38
// end ; end ;
7574: LD_VAR 0 1
7578: RET
// export function Save_Variables ; var filter , i , tab ; begin
7579: LD_INT 0
7581: PPUSH
7582: PPUSH
7583: PPUSH
7584: PPUSH
// SaveVariable ( veh_count , rus_time ) ;
7585: LD_EXP 3
7589: PPUSH
7590: LD_STRING rus_time
7592: PPUSH
7593: CALL_OW 39
// tab := [ ] ;
7597: LD_ADDR_VAR 0 4
7601: PUSH
7602: EMPTY
7603: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
7604: LD_ADDR_VAR 0 2
7608: PUSH
7609: LD_INT 22
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 21
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PPUSH
7633: CALL_OW 69
7637: ST_TO_ADDR
// for i = 1 to filter do
7638: LD_ADDR_VAR 0 3
7642: PUSH
7643: DOUBLE
7644: LD_INT 1
7646: DEC
7647: ST_TO_ADDR
7648: LD_VAR 0 2
7652: PUSH
7653: FOR_TO
7654: IFFALSE 7739
// begin tab := tab ^ [ GetChassis ( filter [ i ] ) , GetEngine ( filter [ i ] ) , GetControl ( filter [ i ] ) , GetWeapon ( filter [ i ] ) ] ;
7656: LD_ADDR_VAR 0 4
7660: PUSH
7661: LD_VAR 0 4
7665: PUSH
7666: LD_VAR 0 2
7670: PUSH
7671: LD_VAR 0 3
7675: ARRAY
7676: PPUSH
7677: CALL_OW 265
7681: PUSH
7682: LD_VAR 0 2
7686: PUSH
7687: LD_VAR 0 3
7691: ARRAY
7692: PPUSH
7693: CALL_OW 262
7697: PUSH
7698: LD_VAR 0 2
7702: PUSH
7703: LD_VAR 0 3
7707: ARRAY
7708: PPUSH
7709: CALL_OW 263
7713: PUSH
7714: LD_VAR 0 2
7718: PUSH
7719: LD_VAR 0 3
7723: ARRAY
7724: PPUSH
7725: CALL_OW 264
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: ADD
7736: ST_TO_ADDR
// end ;
7737: GO 7653
7739: POP
7740: POP
// SaveVariable ( tab , unit_vehs ) ;
7741: LD_VAR 0 4
7745: PPUSH
7746: LD_STRING unit_vehs
7748: PPUSH
7749: CALL_OW 39
// end ;
7753: LD_VAR 0 1
7757: RET
