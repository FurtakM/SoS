// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareUnits ;
   4: CALL 13 0 0
// Action ;
   8: CALL 924 0 0
// end ; end_of_file
  12: END
// export function PrepareUnits ; var filter , i , un ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
  18: PPUSH
// SetBName ( ar_depot , kaba ) ;
  19: LD_INT 1
  21: PPUSH
  22: LD_STRING kaba
  24: PPUSH
  25: CALL_OW 500
// uc_side := 2 ;
  29: LD_ADDR_OWVAR 20
  33: PUSH
  34: LD_INT 2
  36: ST_TO_ADDR
// uc_nation := 2 ;
  37: LD_ADDR_OWVAR 21
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
  45: LD_ADDR_OWVAR 31
  49: PUSH
  50: LD_INT 10
  52: PUSH
  53: LD_INT 10
  55: PUSH
  56: LD_INT 10
  58: PUSH
  59: LD_INT 10
  61: PUSH
  62: EMPTY
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: ST_TO_ADDR
// for i = 1 to 2 do
  68: LD_ADDR_VAR 0 3
  72: PUSH
  73: DOUBLE
  74: LD_INT 1
  76: DEC
  77: ST_TO_ADDR
  78: LD_INT 2
  80: PUSH
  81: FOR_TO
  82: IFFALSE 132
// begin hc_name :=  ;
  84: LD_ADDR_OWVAR 26
  88: PUSH
  89: LD_STRING 
  91: ST_TO_ADDR
// hc_gallery :=  ;
  92: LD_ADDR_OWVAR 33
  96: PUSH
  97: LD_STRING 
  99: ST_TO_ADDR
// hc_class := 2 ;
 100: LD_ADDR_OWVAR 28
 104: PUSH
 105: LD_INT 2
 107: ST_TO_ADDR
// un := CreateHuman ;
 108: LD_ADDR_VAR 0 4
 112: PUSH
 113: CALL_OW 44
 117: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_depot ) ;
 118: LD_VAR 0 4
 122: PPUSH
 123: LD_INT 1
 125: PPUSH
 126: CALL_OW 52
// end ;
 130: GO 81
 132: POP
 133: POP
// for i = 1 to 4 do
 134: LD_ADDR_VAR 0 3
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 4
 146: PUSH
 147: FOR_TO
 148: IFFALSE 198
// begin hc_name :=  ;
 150: LD_ADDR_OWVAR 26
 154: PUSH
 155: LD_STRING 
 157: ST_TO_ADDR
// hc_gallery :=  ;
 158: LD_ADDR_OWVAR 33
 162: PUSH
 163: LD_STRING 
 165: ST_TO_ADDR
// hc_class := 3 ;
 166: LD_ADDR_OWVAR 28
 170: PUSH
 171: LD_INT 3
 173: ST_TO_ADDR
// un := CreateHuman ;
 174: LD_ADDR_VAR 0 4
 178: PUSH
 179: CALL_OW 44
 183: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_fac ) ;
 184: LD_VAR 0 4
 188: PPUSH
 189: LD_INT 4
 191: PPUSH
 192: CALL_OW 52
// end ;
 196: GO 147
 198: POP
 199: POP
// for i = 1 to 5 do
 200: LD_ADDR_VAR 0 3
 204: PUSH
 205: DOUBLE
 206: LD_INT 1
 208: DEC
 209: ST_TO_ADDR
 210: LD_INT 5
 212: PUSH
 213: FOR_TO
 214: IFFALSE 283
// begin hc_name :=  ;
 216: LD_ADDR_OWVAR 26
 220: PUSH
 221: LD_STRING 
 223: ST_TO_ADDR
// hc_gallery :=  ;
 224: LD_ADDR_OWVAR 33
 228: PUSH
 229: LD_STRING 
 231: ST_TO_ADDR
// hc_class := 4 ;
 232: LD_ADDR_OWVAR 28
 236: PUSH
 237: LD_INT 4
 239: ST_TO_ADDR
// un := CreateHuman ;
 240: LD_ADDR_VAR 0 4
 244: PUSH
 245: CALL_OW 44
 249: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ ar_lab1 , ar_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
 250: LD_VAR 0 4
 254: PPUSH
 255: LD_INT 6
 257: PUSH
 258: LD_INT 5
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PUSH
 265: LD_INT 1
 267: PPUSH
 268: LD_INT 2
 270: PPUSH
 271: CALL_OW 12
 275: ARRAY
 276: PPUSH
 277: CALL_OW 52
// end ;
 281: GO 213
 283: POP
 284: POP
// filter := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_manual ] ] ) ;
 285: LD_ADDR_VAR 0 2
 289: PUSH
 290: LD_INT 22
 292: PUSH
 293: LD_INT 2
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 33
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PPUSH
 314: CALL_OW 69
 318: ST_TO_ADDR
// for i = 1 to filter do
 319: LD_ADDR_VAR 0 3
 323: PUSH
 324: DOUBLE
 325: LD_INT 1
 327: DEC
 328: ST_TO_ADDR
 329: LD_VAR 0 2
 333: PUSH
 334: FOR_TO
 335: IFFALSE 367
// begin hc_class := 3 ;
 337: LD_ADDR_OWVAR 28
 341: PUSH
 342: LD_INT 3
 344: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , filter [ i ] ) ;
 345: CALL_OW 44
 349: PPUSH
 350: LD_VAR 0 2
 354: PUSH
 355: LD_VAR 0 3
 359: ARRAY
 360: PPUSH
 361: CALL_OW 52
// end ;
 365: GO 334
 367: POP
 368: POP
// filter := FilterAllUnits ( [ f_control , control_remote ] ) ;
 369: LD_ADDR_VAR 0 2
 373: PUSH
 374: LD_INT 33
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: ST_TO_ADDR
// for i = 1 to filter do
 389: LD_ADDR_VAR 0 3
 393: PUSH
 394: DOUBLE
 395: LD_INT 1
 397: DEC
 398: ST_TO_ADDR
 399: LD_VAR 0 2
 403: PUSH
 404: FOR_TO
 405: IFFALSE 432
// ComLinkTo ( filter [ i ] , IsDrivenBy ( ctrl_twr ) ) ;
 407: LD_VAR 0 2
 411: PUSH
 412: LD_VAR 0 3
 416: ARRAY
 417: PPUSH
 418: LD_INT 24
 420: PPUSH
 421: CALL_OW 311
 425: PPUSH
 426: CALL_OW 135
 430: GO 404
 432: POP
 433: POP
// filter := FilterAllUnits ( [ f_btype , b_bunker ] ) ;
 434: LD_ADDR_VAR 0 2
 438: PUSH
 439: LD_INT 30
 441: PUSH
 442: LD_INT 32
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PPUSH
 449: CALL_OW 69
 453: ST_TO_ADDR
// for i = 1 to filter do
 454: LD_ADDR_VAR 0 3
 458: PUSH
 459: DOUBLE
 460: LD_INT 1
 462: DEC
 463: ST_TO_ADDR
 464: LD_VAR 0 2
 468: PUSH
 469: FOR_TO
 470: IFFALSE 502
// begin hc_class := 1 ;
 472: LD_ADDR_OWVAR 28
 476: PUSH
 477: LD_INT 1
 479: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , filter [ i ] ) ;
 480: CALL_OW 44
 484: PPUSH
 485: LD_VAR 0 2
 489: PUSH
 490: LD_VAR 0 3
 494: ARRAY
 495: PPUSH
 496: CALL_OW 52
// end ;
 500: GO 469
 502: POP
 503: POP
// ComResearch ( ar_lab1 , tech_tech1 ) ;
 504: LD_INT 6
 506: PPUSH
 507: LD_INT 48
 509: PPUSH
 510: CALL_OW 124
// AddComResearch ( ar_lab1 , tech_tech2 ) ;
 514: LD_INT 6
 516: PPUSH
 517: LD_INT 49
 519: PPUSH
 520: CALL_OW 184
// AddComResearch ( ar_lab1 , tech_tech3 ) ;
 524: LD_INT 6
 526: PPUSH
 527: LD_INT 50
 529: PPUSH
 530: CALL_OW 184
// ComResearch ( ar_lab2 , tech_weap1 ) ;
 534: LD_INT 5
 536: PPUSH
 537: LD_INT 51
 539: PPUSH
 540: CALL_OW 124
// AddComResearch ( ar_lab2 , tech_weap2 ) ;
 544: LD_INT 5
 546: PPUSH
 547: LD_INT 52
 549: PPUSH
 550: CALL_OW 184
// AddComResearch ( ar_lab2 , tech_weap3 ) ;
 554: LD_INT 5
 556: PPUSH
 557: LD_INT 53
 559: PPUSH
 560: CALL_OW 184
// ComConstruct ( ar_fac , ar_half_tracked , engine_combustion , control_manual , ar_gun ) ;
 564: LD_INT 4
 566: PPUSH
 567: LD_INT 14
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: LD_INT 27
 578: PPUSH
 579: CALL_OW 125
// AddComConstruct ( ar_fac , ar_half_tracked , engine_combustion , control_manual , ar_gun ) ;
 583: LD_INT 4
 585: PPUSH
 586: LD_INT 14
 588: PPUSH
 589: LD_INT 1
 591: PPUSH
 592: LD_INT 1
 594: PPUSH
 595: LD_INT 27
 597: PPUSH
 598: CALL_OW 185
// AddComConstruct ( ar_fac , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
 602: LD_INT 4
 604: PPUSH
 605: LD_INT 14
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: LD_INT 26
 616: PPUSH
 617: CALL_OW 185
// filter := FilterAllUnits ( [ f_class , 2 ] ) ;
 621: LD_ADDR_VAR 0 2
 625: PUSH
 626: LD_INT 25
 628: PUSH
 629: LD_INT 2
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: PPUSH
 636: CALL_OW 69
 640: ST_TO_ADDR
// for i = 1 to filter do
 641: LD_ADDR_VAR 0 3
 645: PUSH
 646: DOUBLE
 647: LD_INT 1
 649: DEC
 650: ST_TO_ADDR
 651: LD_VAR 0 2
 655: PUSH
 656: FOR_TO
 657: IFFALSE 721
// begin ComExitBuilding ( filter [ i ] ) ;
 659: LD_VAR 0 2
 663: PUSH
 664: LD_VAR 0 3
 668: ARRAY
 669: PPUSH
 670: CALL_OW 122
// AddComBuild ( filter [ i ] , b_oil_power , 121 , 59 , 0 ) ;
 674: LD_VAR 0 2
 678: PUSH
 679: LD_VAR 0 3
 683: ARRAY
 684: PPUSH
 685: LD_INT 26
 687: PPUSH
 688: LD_INT 121
 690: PPUSH
 691: LD_INT 59
 693: PPUSH
 694: LD_INT 0
 696: PPUSH
 697: CALL_OW 205
// AddComEnterUnit ( filter [ i ] , ar_depot ) ;
 701: LD_VAR 0 2
 705: PUSH
 706: LD_VAR 0 3
 710: ARRAY
 711: PPUSH
 712: LD_INT 1
 714: PPUSH
 715: CALL_OW 180
// end ;
 719: GO 656
 721: POP
 722: POP
// end ;
 723: LD_VAR 0 1
 727: RET
// on VehicleConstructed ( veh , fac ) do begin ComMoveXY ( IsDrivenBy ( veh ) , 133 , 37 ) ;
 728: LD_VAR 0 1
 732: PPUSH
 733: CALL_OW 311
 737: PPUSH
 738: LD_INT 133
 740: PPUSH
 741: LD_INT 37
 743: PPUSH
 744: CALL_OW 111
// AddComExitVehicle ( IsDrivenBy ( veh ) ) ;
 748: LD_VAR 0 1
 752: PPUSH
 753: CALL_OW 311
 757: PPUSH
 758: CALL_OW 181
// AddComEnterUnit ( IsDrivenBy ( veh ) , ar_fac ) ;
 762: LD_VAR 0 1
 766: PPUSH
 767: CALL_OW 311
 771: PPUSH
 772: LD_INT 4
 774: PPUSH
 775: CALL_OW 180
// end ;
 779: PPOPN 2
 781: END
// every 0 0$03 do
 782: GO 784
 784: DISABLE
// begin enable ;
 785: ENABLE
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 786: LD_INT 1
 788: PPUSH
 789: LD_INT 5
 791: PPUSH
 792: CALL_OW 12
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 55
// Wait ( 0 0$25 ) ;
 807: LD_INT 875
 809: PPUSH
 810: CALL_OW 67
// end ;
 814: END
// every 0 0$03 trigger Louis do var skr , c ;
 815: LD_EXP 1
 819: IFFALSE 921
 821: GO 823
 823: DISABLE
 824: LD_INT 0
 826: PPUSH
 827: PPUSH
// begin enable ;
 828: ENABLE
// SetFuel ( ar_cargo , 100 ) ;
 829: LD_INT 23
 831: PPUSH
 832: LD_INT 100
 834: PPUSH
 835: CALL_OW 240
// skr = GetListOfCratesInArea ( crates_spawn ) ;
 839: LD_ADDR_VAR 0 1
 843: PUSH
 844: LD_INT 1
 846: PPUSH
 847: CALL_OW 435
 851: ST_TO_ADDR
// c = 1 ;
 852: LD_ADDR_VAR 0 2
 856: PUSH
 857: LD_INT 1
 859: ST_TO_ADDR
// while c < skr do
 860: LD_VAR 0 2
 864: PUSH
 865: LD_VAR 0 1
 869: LESS
 870: IFFALSE 921
// begin ComCollect ( ar_cargo , skr [ c ] , skr [ c + 1 ] ) ;
 872: LD_INT 23
 874: PPUSH
 875: LD_VAR 0 1
 879: PUSH
 880: LD_VAR 0 2
 884: ARRAY
 885: PPUSH
 886: LD_VAR 0 1
 890: PUSH
 891: LD_VAR 0 2
 895: PUSH
 896: LD_INT 1
 898: PLUS
 899: ARRAY
 900: PPUSH
 901: CALL_OW 117
// c = c + 2 ;
 905: LD_ADDR_VAR 0 2
 909: PUSH
 910: LD_VAR 0 2
 914: PUSH
 915: LD_INT 2
 917: PLUS
 918: ST_TO_ADDR
// end ;
 919: GO 860
// end ; end_of_file
 921: PPOPN 2
 923: END
// export Louis , Abdul ; export function Action ; begin
 924: LD_INT 0
 926: PPUSH
// InGameOn ;
 927: CALL_OW 8
// CenterNowOnXY ( 138 , 71 ) ;
 931: LD_INT 138
 933: PPUSH
 934: LD_INT 71
 936: PPUSH
 937: CALL_OW 86
// uc_side := 5 ;
 941: LD_ADDR_OWVAR 20
 945: PUSH
 946: LD_INT 5
 948: ST_TO_ADDR
// uc_nation := 2 ;
 949: LD_ADDR_OWVAR 21
 953: PUSH
 954: LD_INT 2
 956: ST_TO_ADDR
// hc_gallery := sandar ;
 957: LD_ADDR_OWVAR 33
 961: PUSH
 962: LD_STRING sandar
 964: ST_TO_ADDR
// hc_face_number := 5 ;
 965: LD_ADDR_OWVAR 34
 969: PUSH
 970: LD_INT 5
 972: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
 973: LD_ADDR_OWVAR 31
 977: PUSH
 978: LD_INT 0
 980: PUSH
 981: LD_INT 0
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 0
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// hc_name := Abdul Shariff ;
 996: LD_ADDR_OWVAR 26
1000: PUSH
1001: LD_STRING Abdul Shariff
1003: ST_TO_ADDR
// hc_sex := sex_male ;
1004: LD_ADDR_OWVAR 27
1008: PUSH
1009: LD_INT 1
1011: ST_TO_ADDR
// hc_class := class_desert_warior ;
1012: LD_ADDR_OWVAR 28
1016: PUSH
1017: LD_INT 11
1019: ST_TO_ADDR
// Abdul := CreateHuman ;
1020: LD_ADDR_EXP 2
1024: PUSH
1025: CALL_OW 44
1029: ST_TO_ADDR
// PlaceUnitXY ( Abdul , 103 , 89 , false ) ;
1030: LD_EXP 2
1034: PPUSH
1035: LD_INT 103
1037: PPUSH
1038: LD_INT 89
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL_OW 48
// uc_side := 2 ;
1048: LD_ADDR_OWVAR 20
1052: PUSH
1053: LD_INT 2
1055: ST_TO_ADDR
// Louis := CreateCharacter ( Louis ) ;
1056: LD_ADDR_EXP 1
1060: PUSH
1061: LD_STRING Louis
1063: PPUSH
1064: CALL_OW 34
1068: ST_TO_ADDR
// if Louis = false then
1069: LD_EXP 1
1073: PUSH
1074: LD_INT 0
1076: EQUAL
1077: IFFALSE 1129
// begin uc_side := 2 ;
1079: LD_ADDR_OWVAR 20
1083: PUSH
1084: LD_INT 2
1086: ST_TO_ADDR
// hc_name := Louis Schulz ;
1087: LD_ADDR_OWVAR 26
1091: PUSH
1092: LD_STRING Louis Schulz
1094: ST_TO_ADDR
// hc_gallery := sandar ;
1095: LD_ADDR_OWVAR 33
1099: PUSH
1100: LD_STRING sandar
1102: ST_TO_ADDR
// hc_face_number := 1 ;
1103: LD_ADDR_OWVAR 34
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// hc_class := 1 ;
1111: LD_ADDR_OWVAR 28
1115: PUSH
1116: LD_INT 1
1118: ST_TO_ADDR
// Louis := CreateHuman ;
1119: LD_ADDR_EXP 1
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// end ; PlaceHumanInUnit ( Louis , ar_depot ) ;
1129: LD_EXP 1
1133: PPUSH
1134: LD_INT 1
1136: PPUSH
1137: CALL_OW 52
// if GetClass ( Louis ) > 1 then
1141: LD_EXP 1
1145: PPUSH
1146: CALL_OW 257
1150: PUSH
1151: LD_INT 1
1153: GREATER
1154: IFFALSE 1168
// SetClass ( Louis , 1 ) ;
1156: LD_EXP 1
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: CALL_OW 336
// ComMoveXY ( Abdul , 136 , 71 ) ;
1168: LD_EXP 2
1172: PPUSH
1173: LD_INT 136
1175: PPUSH
1176: LD_INT 71
1178: PPUSH
1179: CALL_OW 111
// repeat Wait ( 0 0$01 ) ;
1183: LD_INT 35
1185: PPUSH
1186: CALL_OW 67
// until GetDistUnits ( Abdul , ar_depot ) <= 8 ;
1190: LD_EXP 2
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: CALL_OW 296
1202: PUSH
1203: LD_INT 8
1205: LESSEQUAL
1206: IFFALSE 1183
// ComExitBuilding ( Louis ) ;
1208: LD_EXP 1
1212: PPUSH
1213: CALL_OW 122
// AddComMoveXY ( Louis , GetX ( Abdul ) + 2 , GetY ( Abdul ) - 3 ) ;
1217: LD_EXP 1
1221: PPUSH
1222: LD_EXP 2
1226: PPUSH
1227: CALL_OW 250
1231: PUSH
1232: LD_INT 2
1234: PLUS
1235: PPUSH
1236: LD_EXP 2
1240: PPUSH
1241: CALL_OW 251
1245: PUSH
1246: LD_INT 3
1248: MINUS
1249: PPUSH
1250: CALL_OW 171
// ComTurnUnit ( Abdul , Louis ) ;
1254: LD_EXP 2
1258: PPUSH
1259: LD_EXP 1
1263: PPUSH
1264: CALL_OW 119
// AddComTurnUnit ( Louis , Abdul ) ;
1268: LD_EXP 1
1272: PPUSH
1273: LD_EXP 2
1277: PPUSH
1278: CALL_OW 179
// Say ( Abdul , 08-DS-1 ) ;
1282: LD_EXP 2
1286: PPUSH
1287: LD_STRING 08-DS-1
1289: PPUSH
1290: CALL_OW 88
// Say ( Louis , 08-DL-1 ) ;
1294: LD_EXP 1
1298: PPUSH
1299: LD_STRING 08-DL-1
1301: PPUSH
1302: CALL_OW 88
// Say ( Abdul , 08-DS-2 ) ;
1306: LD_EXP 2
1310: PPUSH
1311: LD_STRING 08-DS-2
1313: PPUSH
1314: CALL_OW 88
// Say ( Louis , 08-DL-2 ) ;
1318: LD_EXP 1
1322: PPUSH
1323: LD_STRING 08-DL-2
1325: PPUSH
1326: CALL_OW 88
// Say ( Abdul , 08-DS-3 ) ;
1330: LD_EXP 2
1334: PPUSH
1335: LD_STRING 08-DS-3
1337: PPUSH
1338: CALL_OW 88
// Say ( Louis , 08-DL-3 ) ;
1342: LD_EXP 1
1346: PPUSH
1347: LD_STRING 08-DL-3
1349: PPUSH
1350: CALL_OW 88
// Say ( Abdul , 08-DS-4 ) ;
1354: LD_EXP 2
1358: PPUSH
1359: LD_STRING 08-DS-4
1361: PPUSH
1362: CALL_OW 88
// Say ( Abdul , 08-DS-5 ) ;
1366: LD_EXP 2
1370: PPUSH
1371: LD_STRING 08-DS-5
1373: PPUSH
1374: CALL_OW 88
// Say ( Abdul , 08-DS-6 ) ;
1378: LD_EXP 2
1382: PPUSH
1383: LD_STRING 08-DS-6
1385: PPUSH
1386: CALL_OW 88
// if LoadVariable ( morozov_die , 0 ) then
1390: LD_STRING morozov_die
1392: PPUSH
1393: LD_INT 0
1395: PPUSH
1396: CALL_OW 30
1400: IFFALSE 1416
// Say ( Abdul , 08-DS-6D ) else
1402: LD_EXP 2
1406: PPUSH
1407: LD_STRING 08-DS-6D
1409: PPUSH
1410: CALL_OW 88
1414: GO 1428
// Say ( Abdul , 08-DS-6L ) ;
1416: LD_EXP 2
1420: PPUSH
1421: LD_STRING 08-DS-6L
1423: PPUSH
1424: CALL_OW 88
// Say ( Louis , 08-DL-4 ) ;
1428: LD_EXP 1
1432: PPUSH
1433: LD_STRING 08-DL-4
1435: PPUSH
1436: CALL_OW 88
// Say ( Abdul , 08-DS-7 ) ;
1440: LD_EXP 2
1444: PPUSH
1445: LD_STRING 08-DS-7
1447: PPUSH
1448: CALL_OW 88
// Say ( Abdul , 08-DS-8 ) ;
1452: LD_EXP 2
1456: PPUSH
1457: LD_STRING 08-DS-8
1459: PPUSH
1460: CALL_OW 88
// Say ( Louis , 08-DL-5 ) ;
1464: LD_EXP 1
1468: PPUSH
1469: LD_STRING 08-DL-5
1471: PPUSH
1472: CALL_OW 88
// Say ( Abdul , 08-DS-9 ) ;
1476: LD_EXP 2
1480: PPUSH
1481: LD_STRING 08-DS-9
1483: PPUSH
1484: CALL_OW 88
// Say ( Louis , 08-DL-6 ) ;
1488: LD_EXP 1
1492: PPUSH
1493: LD_STRING 08-DL-6
1495: PPUSH
1496: CALL_OW 88
// Say ( Abdul , 08-DS-10 ) ;
1500: LD_EXP 2
1504: PPUSH
1505: LD_STRING 08-DS-10
1507: PPUSH
1508: CALL_OW 88
// Say ( Louis , 08-DL-7 ) ;
1512: LD_EXP 1
1516: PPUSH
1517: LD_STRING 08-DL-7
1519: PPUSH
1520: CALL_OW 88
// Say ( Abdul , 08-DS-11 ) ;
1524: LD_EXP 2
1528: PPUSH
1529: LD_STRING 08-DS-11
1531: PPUSH
1532: CALL_OW 88
// ComMoveXY ( Abdul , 18 , 20 ) ;
1536: LD_EXP 2
1540: PPUSH
1541: LD_INT 18
1543: PPUSH
1544: LD_INT 20
1546: PPUSH
1547: CALL_OW 111
// Wait ( 0 0$03 ) ;
1551: LD_INT 105
1553: PPUSH
1554: CALL_OW 67
// Say ( FilterAllUnits ( [ f_class , 4 ] ) [ 1 ] , 08_sci1 ) ;
1558: LD_INT 25
1560: PUSH
1561: LD_INT 4
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PPUSH
1568: CALL_OW 69
1572: PUSH
1573: LD_INT 1
1575: ARRAY
1576: PPUSH
1577: LD_STRING 08_sci1
1579: PPUSH
1580: CALL_OW 88
// ComEnterUnit ( Louis , ar_lab2 ) ;
1584: LD_EXP 1
1588: PPUSH
1589: LD_INT 5
1591: PPUSH
1592: CALL_OW 120
// repeat Wait ( 0 0$01 ) ;
1596: LD_INT 35
1598: PPUSH
1599: CALL_OW 67
// until IsInUnit ( Louis ) ;
1603: LD_EXP 1
1607: PPUSH
1608: CALL_OW 310
1612: IFFALSE 1596
// Say ( Louis , 08_ls1 ) ;
1614: LD_EXP 1
1618: PPUSH
1619: LD_STRING 08_ls1
1621: PPUSH
1622: CALL_OW 88
// Say ( FilterAllUnits ( [ f_class , 4 ] ) [ 1 ] , 08_sci2 ) ;
1626: LD_INT 25
1628: PUSH
1629: LD_INT 4
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PPUSH
1636: CALL_OW 69
1640: PUSH
1641: LD_INT 1
1643: ARRAY
1644: PPUSH
1645: LD_STRING 08_sci2
1647: PPUSH
1648: CALL_OW 88
// Say ( Louis , 08_ls2 ) ;
1652: LD_EXP 1
1656: PPUSH
1657: LD_STRING 08_ls2
1659: PPUSH
1660: CALL_OW 88
// Wait ( 0 0$02 ) ;
1664: LD_INT 70
1666: PPUSH
1667: CALL_OW 67
// InGameOff ;
1671: CALL_OW 9
// SaveCharacters ( Louis , Louis ) ;
1675: LD_EXP 1
1679: PPUSH
1680: LD_STRING Louis
1682: PPUSH
1683: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
1687: LD_INT 1
1689: PPUSH
1690: LD_STRING %_cont
1692: PPUSH
1693: CALL_OW 340
// end ;
1697: LD_VAR 0 1
1701: RET
