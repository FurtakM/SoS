// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareTrigger ;
   4: CALL 53 0 0
// PrepareNature ;
   8: CALL 14584 0 0
// PrepareBase ;
  12: CALL 221 0 0
// PrepareAmerican ;
  16: CALL 3303 0 0
// PrepareArabian ;
  20: CALL 518 0 0
// PrepareArabianInNorth ;
  24: CALL 1750 0 0
// PrepareSheik ;
  28: CALL 15156 0 0
// if Test = false then
  32: LD_EXP 18
  36: PUSH
  37: LD_INT 0
  39: EQUAL
  40: IFFALSE 48
// PrepareLouis else
  42: CALL 259 0 0
  46: GO 52
// PrepareTester ;
  48: CALL 325 0 0
// end ;
  52: END
// export AmerikaAttack , AmAngry , FirstVehicle ; export BorderActive , InR , InJ , ArI , ArRa , Jana , SeeAM ; export Count_of_Apeman , Locked , VehGone ; export CounterStart , CanAttack ; export CanRepair , Cameras ; export Test ; function PrepareTrigger ; begin
  53: LD_INT 0
  55: PPUSH
// Test = 0 ;
  56: LD_ADDR_EXP 18
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// BorderActive = true ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_INT 1
  71: ST_TO_ADDR
// AmerikaAttack = false ;
  72: LD_ADDR_EXP 1
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// CounterStart = false ;
  80: LD_ADDR_EXP 14
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// CanRepair = false ;
  88: LD_ADDR_EXP 16
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// FirstVehicle = false ;
  96: LD_ADDR_EXP 3
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// Locked = false ;
 104: LD_ADDR_EXP 12
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// AmAngry = 0 ;
 112: LD_ADDR_EXP 2
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// Count_of_Apeman = 0 ;
 120: LD_ADDR_EXP 11
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// CanAttack = true ;
 128: LD_ADDR_EXP 15
 132: PUSH
 133: LD_INT 1
 135: ST_TO_ADDR
// ApeTren = false ;
 136: LD_ADDR_EXP 60
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// VehGone = false ;
 144: LD_ADDR_EXP 13
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// InR = true ;
 152: LD_ADDR_EXP 5
 156: PUSH
 157: LD_INT 1
 159: ST_TO_ADDR
// InJ = true ;
 160: LD_ADDR_EXP 6
 164: PUSH
 165: LD_INT 1
 167: ST_TO_ADDR
// ArI = true ;
 168: LD_ADDR_EXP 7
 172: PUSH
 173: LD_INT 1
 175: ST_TO_ADDR
// ArRa = true ;
 176: LD_ADDR_EXP 8
 180: PUSH
 181: LD_INT 1
 183: ST_TO_ADDR
// Jana = true ;
 184: LD_ADDR_EXP 9
 188: PUSH
 189: LD_INT 1
 191: ST_TO_ADDR
// SeeAM = true ;
 192: LD_ADDR_EXP 10
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// Point = 0 ;
 200: LD_ADDR_EXP 59
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// Cameras := 0 ;
 208: LD_ADDR_EXP 17
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// function PrepareBase ; begin
 221: LD_INT 0
 223: PPUSH
// SetBName ( ar_depe , NewDam ) ;
 224: LD_INT 138
 226: PPUSH
 227: LD_STRING NewDam
 229: PPUSH
 230: CALL_OW 500
// SetBName ( ar_deps , NewBahr ) ;
 234: LD_INT 8
 236: PPUSH
 237: LD_STRING NewBahr
 239: PPUSH
 240: CALL_OW 500
// SetbName ( am_dep , Omega ) ;
 244: LD_INT 18
 246: PPUSH
 247: LD_STRING Omega
 249: PPUSH
 250: CALL_OW 500
// end ; end_of_file
 254: LD_VAR 0 1
 258: RET
// export Louis ; export function PrepareLouis ; var veh ; begin
 259: LD_INT 0
 261: PPUSH
 262: PPUSH
// uc_side = 2 ;
 263: LD_ADDR_OWVAR 20
 267: PUSH
 268: LD_INT 2
 270: ST_TO_ADDR
// uc_nation = 2 ;
 271: LD_ADDR_OWVAR 21
 275: PUSH
 276: LD_INT 2
 278: ST_TO_ADDR
// Louis := CreateCharacter ( Louis ) ;
 279: LD_ADDR_EXP 19
 283: PUSH
 284: LD_STRING Louis
 286: PPUSH
 287: CALL_OW 34
 291: ST_TO_ADDR
// PlaceUnitArea ( Louis , StartA , false ) ;
 292: LD_EXP 19
 296: PPUSH
 297: LD_INT 1
 299: PPUSH
 300: LD_INT 0
 302: PPUSH
 303: CALL_OW 49
// CenterNowOnUnits ( Louis ) ;
 307: LD_EXP 19
 311: PPUSH
 312: CALL_OW 87
// SetMovie ;
 316: CALL 9604 0 0
// end ;
 320: LD_VAR 0 1
 324: RET
// export function PrepareTester ; var veh ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// uc_side = 2 ;
 329: LD_ADDR_OWVAR 20
 333: PUSH
 334: LD_INT 2
 336: ST_TO_ADDR
// uc_nation = 2 ;
 337: LD_ADDR_OWVAR 21
 341: PUSH
 342: LD_INT 2
 344: ST_TO_ADDR
// hc_sex = sex_male ;
 345: LD_ADDR_OWVAR 27
 349: PUSH
 350: LD_INT 1
 352: ST_TO_ADDR
// hc_name = Louis Tester ;
 353: LD_ADDR_OWVAR 26
 357: PUSH
 358: LD_STRING Louis Tester
 360: ST_TO_ADDR
// hc_gallery =  ;
 361: LD_ADDR_OWVAR 33
 365: PUSH
 366: LD_STRING 
 368: ST_TO_ADDR
// hc_class = 1 ;
 369: LD_ADDR_OWVAR 28
 373: PUSH
 374: LD_INT 1
 376: ST_TO_ADDR
// hc_skills = [ 5 , 4 , 5 , 4 ] ;
 377: LD_ADDR_OWVAR 31
 381: PUSH
 382: LD_INT 5
 384: PUSH
 385: LD_INT 4
 387: PUSH
 388: LD_INT 5
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: ST_TO_ADDR
// Louis = CreateHuman ;
 400: LD_ADDR_EXP 19
 404: PUSH
 405: CALL_OW 44
 409: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
 410: LD_ADDR_OWVAR 37
 414: PUSH
 415: LD_INT 14
 417: ST_TO_ADDR
// vc_engine = engine_combustion ;
 418: LD_ADDR_OWVAR 39
 422: PUSH
 423: LD_INT 1
 425: ST_TO_ADDR
// vc_control = control_manual ;
 426: LD_ADDR_OWVAR 38
 430: PUSH
 431: LD_INT 1
 433: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
 434: LD_ADDR_OWVAR 40
 438: PUSH
 439: LD_INT 25
 441: ST_TO_ADDR
// veh = CreateVehicle ;
 442: LD_ADDR_VAR 0 2
 446: PUSH
 447: CALL_OW 45
 451: ST_TO_ADDR
// PlaceUnitArea ( veh , StartA , false ) ;
 452: LD_VAR 0 2
 456: PPUSH
 457: LD_INT 1
 459: PPUSH
 460: LD_INT 0
 462: PPUSH
 463: CALL_OW 49
// PlaceHumanInUnit ( Louis , veh ) ;
 467: LD_EXP 19
 471: PPUSH
 472: LD_VAR 0 2
 476: PPUSH
 477: CALL_OW 52
// SetMark ( veh , true ) ;
 481: LD_VAR 0 2
 485: PPUSH
 486: LD_INT 1
 488: PPUSH
 489: CALL_OW 242
// FogOff ( 2 ) ;
 493: LD_INT 2
 495: PPUSH
 496: CALL_OW 344
// CenterNowOnUnits ( Louis ) ;
 500: LD_EXP 19
 504: PPUSH
 505: CALL_OW 87
// SetMovie ;
 509: CALL 9604 0 0
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export ar1 , ar2 , ar_force ; export Jan , Huan ; export function PrepareArabian ; var un , i ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
// i = 0 ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// ar1 = 2 ;
 531: LD_ADDR_EXP 20
 535: PUSH
 536: LD_INT 2
 538: ST_TO_ADDR
// ar2 = 5 ;
 539: LD_ADDR_EXP 21
 543: PUSH
 544: LD_INT 5
 546: ST_TO_ADDR
// uc_side = 5 ;
 547: LD_ADDR_OWVAR 20
 551: PUSH
 552: LD_INT 5
 554: ST_TO_ADDR
// uc_nation = 2 ;
 555: LD_ADDR_OWVAR 21
 559: PUSH
 560: LD_INT 2
 562: ST_TO_ADDR
// hc_skills = [ 4 , 5 , 2 , 3 ] ;
 563: LD_ADDR_OWVAR 31
 567: PUSH
 568: LD_INT 4
 570: PUSH
 571: LD_INT 5
 573: PUSH
 574: LD_INT 2
 576: PUSH
 577: LD_INT 3
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: ST_TO_ADDR
// hc_sex = sex_male ;
 586: LD_ADDR_OWVAR 27
 590: PUSH
 591: LD_INT 1
 593: ST_TO_ADDR
// hc_gallery = sandar ;
 594: LD_ADDR_OWVAR 33
 598: PUSH
 599: LD_STRING sandar
 601: ST_TO_ADDR
// hc_face_number = 22 ;
 602: LD_ADDR_OWVAR 34
 606: PUSH
 607: LD_INT 22
 609: ST_TO_ADDR
// hc_class = 1 ;
 610: LD_ADDR_OWVAR 28
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
// hc_name = Jan von Schekendeck ;
 618: LD_ADDR_OWVAR 26
 622: PUSH
 623: LD_STRING Jan von Schekendeck
 625: ST_TO_ADDR
// Jan = CreateHuman ;
 626: LD_ADDR_EXP 23
 630: PUSH
 631: CALL_OW 44
 635: ST_TO_ADDR
// PlaceHumanInUnit ( Jan , ar_deps ) ;
 636: LD_EXP 23
 640: PPUSH
 641: LD_INT 8
 643: PPUSH
 644: CALL_OW 52
// hc_skills = [ 1 , 5 , 3 , 5 ] ;
 648: LD_ADDR_OWVAR 31
 652: PUSH
 653: LD_INT 1
 655: PUSH
 656: LD_INT 5
 658: PUSH
 659: LD_INT 3
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: ST_TO_ADDR
// hc_sex = sex_male ;
 671: LD_ADDR_OWVAR 27
 675: PUSH
 676: LD_INT 1
 678: ST_TO_ADDR
// hc_gallery =  ;
 679: LD_ADDR_OWVAR 33
 683: PUSH
 684: LD_STRING 
 686: ST_TO_ADDR
// hc_class = 2 ;
 687: LD_ADDR_OWVAR 28
 691: PUSH
 692: LD_INT 2
 694: ST_TO_ADDR
// hc_name = Huan Job ;
 695: LD_ADDR_OWVAR 26
 699: PUSH
 700: LD_STRING Huan Job
 702: ST_TO_ADDR
// Huan = CreateHuman ;
 703: LD_ADDR_EXP 24
 707: PUSH
 708: CALL_OW 44
 712: ST_TO_ADDR
// PlaceUnitXY ( Huan , 108 , 170 , false ) ;
 713: LD_EXP 24
 717: PPUSH
 718: LD_INT 108
 720: PPUSH
 721: LD_INT 170
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 48
// ar_force = [ ] ;
 731: LD_ADDR_EXP 22
 735: PUSH
 736: EMPTY
 737: ST_TO_ADDR
// repeat begin hc_class = 2 ;
 738: LD_ADDR_OWVAR 28
 742: PUSH
 743: LD_INT 2
 745: ST_TO_ADDR
// hc_name =  ;
 746: LD_ADDR_OWVAR 26
 750: PUSH
 751: LD_STRING 
 753: ST_TO_ADDR
// hc_gallery =  ;
 754: LD_ADDR_OWVAR 33
 758: PUSH
 759: LD_STRING 
 761: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
 762: LD_ADDR_OWVAR 27
 766: PUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_INT 2
 772: PPUSH
 773: CALL_OW 12
 777: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) , Rand ( 3 , 5 ) , Rand ( 0 , 3 ) , Rand ( 1 , 3 ) ] ;
 778: LD_ADDR_OWVAR 31
 782: PUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_INT 3
 788: PPUSH
 789: CALL_OW 12
 793: PUSH
 794: LD_INT 3
 796: PPUSH
 797: LD_INT 5
 799: PPUSH
 800: CALL_OW 12
 804: PUSH
 805: LD_INT 0
 807: PPUSH
 808: LD_INT 3
 810: PPUSH
 811: CALL_OW 12
 815: PUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 3
 821: PPUSH
 822: CALL_OW 12
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: ST_TO_ADDR
// un = CreateHuman ;
 833: LD_ADDR_VAR 0 2
 837: PUSH
 838: CALL_OW 44
 842: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_deps ) ;
 843: LD_VAR 0 2
 847: PPUSH
 848: LD_INT 8
 850: PPUSH
 851: CALL_OW 52
// ar_force = ar_force ^ un ;
 855: LD_ADDR_EXP 22
 859: PUSH
 860: LD_EXP 22
 864: PUSH
 865: LD_VAR 0 2
 869: ADD
 870: ST_TO_ADDR
// i = i + 1 ;
 871: LD_ADDR_VAR 0 3
 875: PUSH
 876: LD_VAR 0 3
 880: PUSH
 881: LD_INT 1
 883: PLUS
 884: ST_TO_ADDR
// end until i = 3 ;
 885: LD_VAR 0 3
 889: PUSH
 890: LD_INT 3
 892: EQUAL
 893: IFFALSE 738
// for i = 1 to 3 do
 895: LD_ADDR_VAR 0 3
 899: PUSH
 900: DOUBLE
 901: LD_INT 1
 903: DEC
 904: ST_TO_ADDR
 905: LD_INT 3
 907: PUSH
 908: FOR_TO
 909: IFFALSE 943
// begin hc_class := 1 ;
 911: LD_ADDR_OWVAR 28
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// un := CreateHuman ;
 919: LD_ADDR_VAR 0 2
 923: PUSH
 924: CALL_OW 44
 928: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_bar1 ) ;
 929: LD_VAR 0 2
 933: PPUSH
 934: LD_INT 17
 936: PPUSH
 937: CALL_OW 52
// end ;
 941: GO 908
 943: POP
 944: POP
// for i = 1 to 2 do
 945: LD_ADDR_VAR 0 3
 949: PUSH
 950: DOUBLE
 951: LD_INT 1
 953: DEC
 954: ST_TO_ADDR
 955: LD_INT 2
 957: PUSH
 958: FOR_TO
 959: IFFALSE 1015
// begin hc_class := 1 ;
 961: LD_ADDR_OWVAR 28
 965: PUSH
 966: LD_INT 1
 968: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
 969: CALL_OW 44
 973: PPUSH
 974: LD_INT 22
 976: PUSH
 977: LD_INT 5
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 30
 986: PUSH
 987: LD_INT 32
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PPUSH
 998: CALL_OW 69
1002: PUSH
1003: LD_VAR 0 3
1007: ARRAY
1008: PPUSH
1009: CALL_OW 52
// end ;
1013: GO 958
1015: POP
1016: POP
// end ;
1017: LD_VAR 0 1
1021: RET
// export Collecter ; export function PrepareEng ; begin
1022: LD_INT 0
1024: PPUSH
// uc_side = 5 ;
1025: LD_ADDR_OWVAR 20
1029: PUSH
1030: LD_INT 5
1032: ST_TO_ADDR
// uc_nation = 2 ;
1033: LD_ADDR_OWVAR 21
1037: PUSH
1038: LD_INT 2
1040: ST_TO_ADDR
// hc_class = 2 ;
1041: LD_ADDR_OWVAR 28
1045: PUSH
1046: LD_INT 2
1048: ST_TO_ADDR
// hc_name =  ;
1049: LD_ADDR_OWVAR 26
1053: PUSH
1054: LD_STRING 
1056: ST_TO_ADDR
// hc_gallery =  ;
1057: LD_ADDR_OWVAR 33
1061: PUSH
1062: LD_STRING 
1064: ST_TO_ADDR
// Collecter = CreateHuman ;
1065: LD_ADDR_EXP 25
1069: PUSH
1070: CALL_OW 44
1074: ST_TO_ADDR
// PlaceUnitXY ( Collecter , 87 , 150 , false ) ;
1075: LD_EXP 25
1079: PPUSH
1080: LD_INT 87
1082: PPUSH
1083: LD_INT 150
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL_OW 48
// end ;
1093: LD_VAR 0 1
1097: RET
// every 0 0$02 trigger Collecter do var skr , p ;
1098: LD_EXP 25
1102: IFFALSE 1196
1104: GO 1106
1106: DISABLE
1107: LD_INT 0
1109: PPUSH
1110: PPUSH
// begin enable ;
1111: ENABLE
// skr = GetListOfCratesInArea ( crat_coll ) ;
1112: LD_ADDR_VAR 0 1
1116: PUSH
1117: LD_INT 16
1119: PPUSH
1120: CALL_OW 435
1124: ST_TO_ADDR
// p = 1 ;
1125: LD_ADDR_VAR 0 2
1129: PUSH
1130: LD_INT 1
1132: ST_TO_ADDR
// while p < skr do
1133: LD_VAR 0 2
1137: PUSH
1138: LD_VAR 0 1
1142: LESS
1143: IFFALSE 1196
// begin AddComCollect ( collecter , skr [ p ] , skr [ p + 1 ] ) ;
1145: LD_EXP 25
1149: PPUSH
1150: LD_VAR 0 1
1154: PUSH
1155: LD_VAR 0 2
1159: ARRAY
1160: PPUSH
1161: LD_VAR 0 1
1165: PUSH
1166: LD_VAR 0 2
1170: PUSH
1171: LD_INT 1
1173: PLUS
1174: ARRAY
1175: PPUSH
1176: CALL_OW 177
// p = p + 2 ;
1180: LD_ADDR_VAR 0 2
1184: PUSH
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 2
1192: PLUS
1193: ST_TO_ADDR
// end ;
1194: GO 1133
// end ;
1196: PPOPN 2
1198: END
// export function SetArabianAI ; var engs ; begin
1199: LD_INT 0
1201: PPUSH
1202: PPUSH
// engs := FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 2 ] ] ) ;
1203: LD_ADDR_VAR 0 2
1207: PUSH
1208: LD_INT 22
1210: PUSH
1211: LD_INT 5
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 25
1220: PUSH
1221: LD_INT 2
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PPUSH
1232: CALL_OW 69
1236: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
1237: LD_VAR 0 2
1241: PPUSH
1242: CALL_OW 122
// AddComBuild ( engs , b_armoury , 91 , 132 , 2 ) ;
1246: LD_VAR 0 2
1250: PPUSH
1251: LD_INT 4
1253: PPUSH
1254: LD_INT 91
1256: PPUSH
1257: LD_INT 132
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: CALL_OW 205
// end ;
1267: LD_VAR 0 1
1271: RET
// every 0 0$01 trigger CanRepair do var i , b , engs , un , ar_bul , hurts ;
1272: LD_EXP 16
1276: IFFALSE 1627
1278: GO 1280
1280: DISABLE
1281: LD_INT 0
1283: PPUSH
1284: PPUSH
1285: PPUSH
1286: PPUSH
1287: PPUSH
1288: PPUSH
// begin enable ;
1289: ENABLE
// ar_bul = FilterAllUnits ( [ [ [ f_side , ar2 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
1290: LD_ADDR_VAR 0 5
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_EXP 21
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 21
1309: PUSH
1310: LD_INT 3
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: LD_INT 3
1319: PUSH
1320: LD_INT 24
1322: PUSH
1323: LD_INT 1000
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: PUSH
1339: EMPTY
1340: LIST
1341: PPUSH
1342: CALL_OW 69
1346: ST_TO_ADDR
// engs = UnitFilter ( ar_force , [ [ f_side , 5 ] , [ f_lives , 1000 ] , [ f_class , 2 ] ] ) ;
1347: LD_ADDR_VAR 0 3
1351: PUSH
1352: LD_EXP 22
1356: PPUSH
1357: LD_INT 22
1359: PUSH
1360: LD_INT 5
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 24
1369: PUSH
1370: LD_INT 1000
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 25
1379: PUSH
1380: LD_INT 2
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: PPUSH
1392: CALL_OW 72
1396: ST_TO_ADDR
// hurts = UnitFilter ( ar_force , [ [ f_side , 5 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1397: LD_ADDR_VAR 0 6
1401: PUSH
1402: LD_EXP 22
1406: PPUSH
1407: LD_INT 22
1409: PUSH
1410: LD_INT 5
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 3
1419: PUSH
1420: LD_INT 24
1422: PUSH
1423: LD_INT 1000
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PPUSH
1438: CALL_OW 72
1442: ST_TO_ADDR
// for i = 1 to engs do
1443: LD_ADDR_VAR 0 1
1447: PUSH
1448: DOUBLE
1449: LD_INT 1
1451: DEC
1452: ST_TO_ADDR
1453: LD_VAR 0 3
1457: PUSH
1458: FOR_TO
1459: IFFALSE 1625
// begin if engs [ i ] in hurts then
1461: LD_VAR 0 3
1465: PUSH
1466: LD_VAR 0 1
1470: ARRAY
1471: PUSH
1472: LD_VAR 0 6
1476: IN
1477: IFFALSE 1499
// begin ComEnterUnit ( engs [ i ] , ar_deps ) ;
1479: LD_VAR 0 3
1483: PUSH
1484: LD_VAR 0 1
1488: ARRAY
1489: PPUSH
1490: LD_INT 8
1492: PPUSH
1493: CALL_OW 120
// end else
1497: GO 1623
// if not HasTask ( engs [ i ] ) then
1499: LD_VAR 0 3
1503: PUSH
1504: LD_VAR 0 1
1508: ARRAY
1509: PPUSH
1510: CALL_OW 314
1514: NOT
1515: IFFALSE 1623
// begin if ar_bul = 0 then
1517: LD_VAR 0 5
1521: PUSH
1522: LD_INT 0
1524: EQUAL
1525: IFFALSE 1565
// begin if not IsInUnit ( engs [ i ] ) then
1527: LD_VAR 0 3
1531: PUSH
1532: LD_VAR 0 1
1536: ARRAY
1537: PPUSH
1538: CALL_OW 310
1542: NOT
1543: IFFALSE 1563
// ComEnterUnit ( engs [ i ] , ar_deps ) ;
1545: LD_VAR 0 3
1549: PUSH
1550: LD_VAR 0 1
1554: ARRAY
1555: PPUSH
1556: LD_INT 8
1558: PPUSH
1559: CALL_OW 120
// end else
1563: GO 1623
// begin if IsInUnit ( engs [ i ] ) then
1565: LD_VAR 0 3
1569: PUSH
1570: LD_VAR 0 1
1574: ARRAY
1575: PPUSH
1576: CALL_OW 310
1580: IFFALSE 1599
// ComExitBuilding ( engs [ i ] ) else
1582: LD_VAR 0 3
1586: PUSH
1587: LD_VAR 0 1
1591: ARRAY
1592: PPUSH
1593: CALL_OW 122
1597: GO 1623
// ComRepairBuilding ( engs [ i ] , ar_bul [ 1 ] ) ;
1599: LD_VAR 0 3
1603: PUSH
1604: LD_VAR 0 1
1608: ARRAY
1609: PPUSH
1610: LD_VAR 0 5
1614: PUSH
1615: LD_INT 1
1617: ARRAY
1618: PPUSH
1619: CALL_OW 130
// end ; end ; end ;
1623: GO 1458
1625: POP
1626: POP
// end ;
1627: PPOPN 6
1629: END
// export function CameraPlaced ; begin
1630: LD_INT 0
1632: PPUSH
// PlaceSeeing ( 66 , 122 , 2 , 8 ) ;
1633: LD_INT 66
1635: PPUSH
1636: LD_INT 122
1638: PPUSH
1639: LD_INT 2
1641: PPUSH
1642: LD_INT 8
1644: PPUSH
1645: CALL_OW 330
// PlaceSeeing ( 64 , 99 , 2 , 8 ) ;
1649: LD_INT 64
1651: PPUSH
1652: LD_INT 99
1654: PPUSH
1655: LD_INT 2
1657: PPUSH
1658: LD_INT 8
1660: PPUSH
1661: CALL_OW 330
// PlaceSeeing ( 97 , 111 , 2 , 8 ) ;
1665: LD_INT 97
1667: PPUSH
1668: LD_INT 111
1670: PPUSH
1671: LD_INT 2
1673: PPUSH
1674: LD_INT 8
1676: PPUSH
1677: CALL_OW 330
// PlaceSeeing ( 118 , 113 , 2 , 8 ) ;
1681: LD_INT 118
1683: PPUSH
1684: LD_INT 113
1686: PPUSH
1687: LD_INT 2
1689: PPUSH
1690: LD_INT 8
1692: PPUSH
1693: CALL_OW 330
// PlaceSeeing ( 139 , 157 , 2 , 8 ) ;
1697: LD_INT 139
1699: PPUSH
1700: LD_INT 157
1702: PPUSH
1703: LD_INT 2
1705: PPUSH
1706: LD_INT 8
1708: PPUSH
1709: CALL_OW 330
// PlaceSeeing ( 75 , 86 , 2 , 8 ) ;
1713: LD_INT 75
1715: PPUSH
1716: LD_INT 86
1718: PPUSH
1719: LD_INT 2
1721: PPUSH
1722: LD_INT 8
1724: PPUSH
1725: CALL_OW 330
// PlaceSeeing ( 109 , 143 , 2 , 10 ) ;
1729: LD_INT 109
1731: PPUSH
1732: LD_INT 143
1734: PPUSH
1735: LD_INT 2
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: CALL_OW 330
// end ;
1745: LD_VAR 0 1
1749: RET
// export Gali , Mike , Jenna , Hubert , apeman1 ; export function PrepareArabianInNorth ; var un , i ; begin
1750: LD_INT 0
1752: PPUSH
1753: PPUSH
1754: PPUSH
// uc_side = 8 ;
1755: LD_ADDR_OWVAR 20
1759: PUSH
1760: LD_INT 8
1762: ST_TO_ADDR
// uc_nation = 2 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 2
1770: ST_TO_ADDR
// hc_name = Louis Gali ;
1771: LD_ADDR_OWVAR 26
1775: PUSH
1776: LD_STRING Louis Gali
1778: ST_TO_ADDR
// hc_attr = [ 10 , 12 ] ;
1779: LD_ADDR_OWVAR 29
1783: PUSH
1784: LD_INT 10
1786: PUSH
1787: LD_INT 12
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
1794: LD_ADDR_OWVAR 30
1798: PUSH
1799: LD_INT 1
1801: PUSH
1802: LD_INT 2
1804: PUSH
1805: LD_INT 0
1807: PUSH
1808: LD_INT 0
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: ST_TO_ADDR
// hc_skills = [ 3 , 5 , 1 , 0 ] ;
1817: LD_ADDR_OWVAR 31
1821: PUSH
1822: LD_INT 3
1824: PUSH
1825: LD_INT 5
1827: PUSH
1828: LD_INT 1
1830: PUSH
1831: LD_INT 0
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: ST_TO_ADDR
// hc_class = 2 ;
1840: LD_ADDR_OWVAR 28
1844: PUSH
1845: LD_INT 2
1847: ST_TO_ADDR
// hc_sex = sex_male ;
1848: LD_ADDR_OWVAR 27
1852: PUSH
1853: LD_INT 1
1855: ST_TO_ADDR
// hc_gallery = sandar ;
1856: LD_ADDR_OWVAR 33
1860: PUSH
1861: LD_STRING sandar
1863: ST_TO_ADDR
// hc_face_number = 7 ;
1864: LD_ADDR_OWVAR 34
1868: PUSH
1869: LD_INT 7
1871: ST_TO_ADDR
// Gali = CreateHuman ;
1872: LD_ADDR_EXP 26
1876: PUSH
1877: CALL_OW 44
1881: ST_TO_ADDR
// PlaceUnitXY ( Gali , 139 , 22 , false ) ;
1882: LD_EXP 26
1886: PPUSH
1887: LD_INT 139
1889: PPUSH
1890: LD_INT 22
1892: PPUSH
1893: LD_INT 0
1895: PPUSH
1896: CALL_OW 48
// hc_name = Mike Turrsen ;
1900: LD_ADDR_OWVAR 26
1904: PUSH
1905: LD_STRING Mike Turrsen
1907: ST_TO_ADDR
// hc_attr = [ 9 , 10 ] ;
1908: LD_ADDR_OWVAR 29
1912: PUSH
1913: LD_INT 9
1915: PUSH
1916: LD_INT 10
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 0 ] ;
1923: LD_ADDR_OWVAR 30
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: LD_INT 2
1936: PUSH
1937: LD_INT 0
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: ST_TO_ADDR
// hc_skills = [ 0 , 1 , 4 , 2 ] ;
1946: LD_ADDR_OWVAR 31
1950: PUSH
1951: LD_INT 0
1953: PUSH
1954: LD_INT 1
1956: PUSH
1957: LD_INT 4
1959: PUSH
1960: LD_INT 2
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: ST_TO_ADDR
// hc_class = 3 ;
1969: LD_ADDR_OWVAR 28
1973: PUSH
1974: LD_INT 3
1976: ST_TO_ADDR
// hc_sex = sex_male ;
1977: LD_ADDR_OWVAR 27
1981: PUSH
1982: LD_INT 1
1984: ST_TO_ADDR
// hc_gallery = sandar ;
1985: LD_ADDR_OWVAR 33
1989: PUSH
1990: LD_STRING sandar
1992: ST_TO_ADDR
// hc_face_number = 23 ;
1993: LD_ADDR_OWVAR 34
1997: PUSH
1998: LD_INT 23
2000: ST_TO_ADDR
// Mike = CreateHuman ;
2001: LD_ADDR_EXP 27
2005: PUSH
2006: CALL_OW 44
2010: ST_TO_ADDR
// PlaceUnitXY ( Mike , 142 , 23 , false ) ;
2011: LD_EXP 27
2015: PPUSH
2016: LD_INT 142
2018: PPUSH
2019: LD_INT 23
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 48
// ComTurnUnit ( Mike , Gali ) ;
2029: LD_EXP 27
2033: PPUSH
2034: LD_EXP 26
2038: PPUSH
2039: CALL_OW 119
// ComTurnUnit ( Gali , Mike ) ;
2043: LD_EXP 26
2047: PPUSH
2048: LD_EXP 27
2052: PPUSH
2053: CALL_OW 119
// hc_name = Nicolas Vercken ;
2057: LD_ADDR_OWVAR 26
2061: PUSH
2062: LD_STRING Nicolas Vercken
2064: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2065: LD_ADDR_OWVAR 29
2069: PUSH
2070: LD_INT 12
2072: PUSH
2073: LD_INT 10
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 2 ] ;
2080: LD_ADDR_OWVAR 30
2084: PUSH
2085: LD_INT 1
2087: PUSH
2088: LD_INT 0
2090: PUSH
2091: LD_INT 0
2093: PUSH
2094: LD_INT 2
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: ST_TO_ADDR
// hc_skills = [ 4 , 1 , 1 , 2 ] ;
2103: LD_ADDR_OWVAR 31
2107: PUSH
2108: LD_INT 4
2110: PUSH
2111: LD_INT 1
2113: PUSH
2114: LD_INT 1
2116: PUSH
2117: LD_INT 2
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: ST_TO_ADDR
// hc_class = 1 ;
2126: LD_ADDR_OWVAR 28
2130: PUSH
2131: LD_INT 1
2133: ST_TO_ADDR
// hc_sex = sex_male ;
2134: LD_ADDR_OWVAR 27
2138: PUSH
2139: LD_INT 1
2141: ST_TO_ADDR
// hc_gallery = sandar ;
2142: LD_ADDR_OWVAR 33
2146: PUSH
2147: LD_STRING sandar
2149: ST_TO_ADDR
// hc_face_number = 8 ;
2150: LD_ADDR_OWVAR 34
2154: PUSH
2155: LD_INT 8
2157: ST_TO_ADDR
// Hubert = CreateHuman ;
2158: LD_ADDR_EXP 29
2162: PUSH
2163: CALL_OW 44
2167: ST_TO_ADDR
// PlaceUnitXY ( Hubert , 132 , 27 , false ) ;
2168: LD_EXP 29
2172: PPUSH
2173: LD_INT 132
2175: PPUSH
2176: LD_INT 27
2178: PPUSH
2179: LD_INT 0
2181: PPUSH
2182: CALL_OW 48
// ComTurnXY ( Hubert , 132 , 30 ) ;
2186: LD_EXP 29
2190: PPUSH
2191: LD_INT 132
2193: PPUSH
2194: LD_INT 30
2196: PPUSH
2197: CALL_OW 118
// for i = 1 to 2 do
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: DOUBLE
2207: LD_INT 1
2209: DEC
2210: ST_TO_ADDR
2211: LD_INT 2
2213: PUSH
2214: FOR_TO
2215: IFFALSE 2390
// begin hc_class = 2 ;
2217: LD_ADDR_OWVAR 28
2221: PUSH
2222: LD_INT 2
2224: ST_TO_ADDR
// hc_name =  ;
2225: LD_ADDR_OWVAR 26
2229: PUSH
2230: LD_STRING 
2232: ST_TO_ADDR
// hc_gallery =  ;
2233: LD_ADDR_OWVAR 33
2237: PUSH
2238: LD_STRING 
2240: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 12 ) , Rand ( 10 , 11 ) ] ;
2241: LD_ADDR_OWVAR 29
2245: PUSH
2246: LD_INT 9
2248: PPUSH
2249: LD_INT 12
2251: PPUSH
2252: CALL_OW 12
2256: PUSH
2257: LD_INT 10
2259: PPUSH
2260: LD_INT 11
2262: PPUSH
2263: CALL_OW 12
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
2272: LD_ADDR_OWVAR 27
2276: PUSH
2277: LD_INT 1
2279: PPUSH
2280: LD_INT 2
2282: PPUSH
2283: CALL_OW 12
2287: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 0 ] ;
2288: LD_ADDR_OWVAR 30
2292: PUSH
2293: LD_INT 0
2295: PUSH
2296: LD_INT 0
2298: PUSH
2299: LD_INT 0
2301: PUSH
2302: LD_INT 0
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , Rand ( 2 , 3 ) , Rand ( 0 , 1 ) , Rand ( 0 , 2 ) ] ;
2311: LD_ADDR_OWVAR 31
2315: PUSH
2316: LD_INT 0
2318: PPUSH
2319: LD_INT 2
2321: PPUSH
2322: CALL_OW 12
2326: PUSH
2327: LD_INT 2
2329: PPUSH
2330: LD_INT 3
2332: PPUSH
2333: CALL_OW 12
2337: PUSH
2338: LD_INT 0
2340: PPUSH
2341: LD_INT 1
2343: PPUSH
2344: CALL_OW 12
2348: PUSH
2349: LD_INT 0
2351: PPUSH
2352: LD_INT 2
2354: PPUSH
2355: CALL_OW 12
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: ST_TO_ADDR
// un = CreateHuman ;
2366: LD_ADDR_VAR 0 2
2370: PUSH
2371: CALL_OW 44
2375: ST_TO_ADDR
// PlaceHumanInUnit ( un , ar_depe ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_INT 138
2383: PPUSH
2384: CALL_OW 52
// end ;
2388: GO 2214
2390: POP
2391: POP
// hc_name = Jenna Matover ;
2392: LD_ADDR_OWVAR 26
2396: PUSH
2397: LD_STRING Jenna Matover
2399: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2400: LD_ADDR_OWVAR 29
2404: PUSH
2405: LD_INT 10
2407: PUSH
2408: LD_INT 10
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 0 , 2 ] ;
2415: LD_ADDR_OWVAR 30
2419: PUSH
2420: LD_INT 0
2422: PUSH
2423: LD_INT 1
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: LD_INT 2
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: ST_TO_ADDR
// hc_skills = [ 1 , 3 , 2 , 5 ] ;
2438: LD_ADDR_OWVAR 31
2442: PUSH
2443: LD_INT 1
2445: PUSH
2446: LD_INT 3
2448: PUSH
2449: LD_INT 2
2451: PUSH
2452: LD_INT 5
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: ST_TO_ADDR
// hc_class = 4 ;
2461: LD_ADDR_OWVAR 28
2465: PUSH
2466: LD_INT 4
2468: ST_TO_ADDR
// hc_sex = sex_female ;
2469: LD_ADDR_OWVAR 27
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// hc_gallery = sandar ;
2477: LD_ADDR_OWVAR 33
2481: PUSH
2482: LD_STRING sandar
2484: ST_TO_ADDR
// hc_face_number = 24 ;
2485: LD_ADDR_OWVAR 34
2489: PUSH
2490: LD_INT 24
2492: ST_TO_ADDR
// Jenna = CreateHuman ;
2493: LD_ADDR_EXP 28
2497: PUSH
2498: CALL_OW 44
2502: ST_TO_ADDR
// PlaceHumanInUnit ( Jenna , ar_lab1 ) ;
2503: LD_EXP 28
2507: PPUSH
2508: LD_INT 141
2510: PPUSH
2511: CALL_OW 52
// uc_nation = 0 ;
2515: LD_ADDR_OWVAR 21
2519: PUSH
2520: LD_INT 0
2522: ST_TO_ADDR
// uc_side = 8 ;
2523: LD_ADDR_OWVAR 20
2527: PUSH
2528: LD_INT 8
2530: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 20 ) ;
2531: LD_ADDR_OWVAR 35
2535: PUSH
2536: LD_INT 0
2538: PPUSH
2539: LD_INT 20
2541: PPUSH
2542: CALL_OW 12
2546: ST_TO_ADDR
// hc_gallery =  ;
2547: LD_ADDR_OWVAR 33
2551: PUSH
2552: LD_STRING 
2554: ST_TO_ADDR
// hc_name = Bobo ;
2555: LD_ADDR_OWVAR 26
2559: PUSH
2560: LD_STRING Bobo
2562: ST_TO_ADDR
// hc_class = class_apeman ;
2563: LD_ADDR_OWVAR 28
2567: PUSH
2568: LD_INT 12
2570: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
2571: LD_ADDR_OWVAR 29
2575: PUSH
2576: LD_INT 11
2578: PPUSH
2579: LD_INT 13
2581: PPUSH
2582: CALL_OW 12
2586: PUSH
2587: LD_INT 10
2589: PPUSH
2590: LD_INT 11
2592: PPUSH
2593: CALL_OW 12
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: ST_TO_ADDR
// hc_sex = sex_male ;
2602: LD_ADDR_OWVAR 27
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// hc_skills = [ 2 , 0 , 0 , 0 ] ;
2610: LD_ADDR_OWVAR 31
2614: PUSH
2615: LD_INT 2
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: LD_INT 0
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: ST_TO_ADDR
// apeman1 = CreateHuman ;
2633: LD_ADDR_EXP 30
2637: PUSH
2638: CALL_OW 44
2642: ST_TO_ADDR
// PlaceHumanInUnit ( apeman1 , ar_lab1 ) ;
2643: LD_EXP 30
2647: PPUSH
2648: LD_INT 141
2650: PPUSH
2651: CALL_OW 52
// end ;
2655: LD_VAR 0 1
2659: RET
// export Rick ; export function PrepareRick ; begin
2660: LD_INT 0
2662: PPUSH
// uc_side = 8 ;
2663: LD_ADDR_OWVAR 20
2667: PUSH
2668: LD_INT 8
2670: ST_TO_ADDR
// uc_nation = 2 ;
2671: LD_ADDR_OWVAR 21
2675: PUSH
2676: LD_INT 2
2678: ST_TO_ADDR
// hc_gallery = sandar ;
2679: LD_ADDR_OWVAR 33
2683: PUSH
2684: LD_STRING sandar
2686: ST_TO_ADDR
// hc_face_number = 11 ;
2687: LD_ADDR_OWVAR 34
2691: PUSH
2692: LD_INT 11
2694: ST_TO_ADDR
// hc_name = Rick Hoft ;
2695: LD_ADDR_OWVAR 26
2699: PUSH
2700: LD_STRING Rick Hoft
2702: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 1 , 3 ] ;
2703: LD_ADDR_OWVAR 30
2707: PUSH
2708: LD_INT 0
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: LD_INT 1
2716: PUSH
2717: LD_INT 3
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: ST_TO_ADDR
// hc_skills = [ 1 , 3 , 3 , 6 ] ;
2726: LD_ADDR_OWVAR 31
2730: PUSH
2731: LD_INT 1
2733: PUSH
2734: LD_INT 3
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 6
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: ST_TO_ADDR
// hc_class = 4 ;
2749: LD_ADDR_OWVAR 28
2753: PUSH
2754: LD_INT 4
2756: ST_TO_ADDR
// hc_sex = sex_male ;
2757: LD_ADDR_OWVAR 27
2761: PUSH
2762: LD_INT 1
2764: ST_TO_ADDR
// hc_attr = [ 10 , 11 ] ;
2765: LD_ADDR_OWVAR 29
2769: PUSH
2770: LD_INT 10
2772: PUSH
2773: LD_INT 11
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: ST_TO_ADDR
// Rick = CreateHuman ;
2780: LD_ADDR_EXP 31
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 0 , 0 ] ;
2790: LD_ADDR_OWVAR 30
2794: PUSH
2795: LD_INT 0
2797: PUSH
2798: LD_INT 0
2800: PUSH
2801: LD_INT 0
2803: PUSH
2804: LD_INT 0
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: ST_TO_ADDR
// end ;
2813: LD_VAR 0 1
2817: RET
// export Shariff ; export function PrepareShariff ; begin
2818: LD_INT 0
2820: PPUSH
// uc_side = 5 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 5
2828: ST_TO_ADDR
// uc_nation = 2 ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 2
2836: ST_TO_ADDR
// hc_class = 11 ;
2837: LD_ADDR_OWVAR 28
2841: PUSH
2842: LD_INT 11
2844: ST_TO_ADDR
// hc_sex = sex_male ;
2845: LD_ADDR_OWVAR 27
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// hc_gallery = ru ;
2853: LD_ADDR_OWVAR 33
2857: PUSH
2858: LD_STRING ru
2860: ST_TO_ADDR
// hc_face_number = 45 ;
2861: LD_ADDR_OWVAR 34
2865: PUSH
2866: LD_INT 45
2868: ST_TO_ADDR
// hc_name = Abdul Shariff ;
2869: LD_ADDR_OWVAR 26
2873: PUSH
2874: LD_STRING Abdul Shariff
2876: ST_TO_ADDR
// Shariff = CreateHuman ;
2877: LD_ADDR_EXP 32
2881: PUSH
2882: CALL_OW 44
2886: ST_TO_ADDR
// end ;
2887: LD_VAR 0 1
2891: RET
// export function PrepareHelp ; var i , un , vehs , sol ; begin
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
2898: PPUSH
// uc_side = 2 ;
2899: LD_ADDR_OWVAR 20
2903: PUSH
2904: LD_INT 2
2906: ST_TO_ADDR
// uc_nation = 2 ;
2907: LD_ADDR_OWVAR 21
2911: PUSH
2912: LD_INT 2
2914: ST_TO_ADDR
// sol = [ ] ;
2915: LD_ADDR_VAR 0 5
2919: PUSH
2920: EMPTY
2921: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 2 ] [ Difficulty ] do
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: DOUBLE
2928: LD_INT 1
2930: DEC
2931: ST_TO_ADDR
2932: LD_INT 4
2934: PUSH
2935: LD_INT 3
2937: PUSH
2938: LD_INT 2
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: LIST
2945: PUSH
2946: LD_OWVAR 67
2950: ARRAY
2951: PUSH
2952: FOR_TO
2953: IFFALSE 3085
// begin hc_gallery =  ;
2955: LD_ADDR_OWVAR 33
2959: PUSH
2960: LD_STRING 
2962: ST_TO_ADDR
// hc_name =  ;
2963: LD_ADDR_OWVAR 26
2967: PUSH
2968: LD_STRING 
2970: ST_TO_ADDR
// hc_class = 1 ;
2971: LD_ADDR_OWVAR 28
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 4 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
2979: LD_ADDR_OWVAR 31
2983: PUSH
2984: LD_INT 0
2986: PPUSH
2987: LD_INT 4
2989: PPUSH
2990: CALL_OW 12
2994: PUSH
2995: LD_INT 0
2997: PPUSH
2998: LD_INT 2
3000: PPUSH
3001: CALL_OW 12
3005: PUSH
3006: LD_INT 0
3008: PPUSH
3009: LD_INT 2
3011: PPUSH
3012: CALL_OW 12
3016: PUSH
3017: LD_INT 0
3019: PPUSH
3020: LD_INT 2
3022: PPUSH
3023: CALL_OW 12
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: ST_TO_ADDR
// hc_sex = sex_male ;
3034: LD_ADDR_OWVAR 27
3038: PUSH
3039: LD_INT 1
3041: ST_TO_ADDR
// un = CreateHuman ;
3042: LD_ADDR_VAR 0 3
3046: PUSH
3047: CALL_OW 44
3051: ST_TO_ADDR
// sol = sol ^ un ;
3052: LD_ADDR_VAR 0 5
3056: PUSH
3057: LD_VAR 0 5
3061: PUSH
3062: LD_VAR 0 3
3066: ADD
3067: ST_TO_ADDR
// PlaceUnitArea ( un , SpawnArea , false ) ;
3068: LD_VAR 0 3
3072: PPUSH
3073: LD_INT 6
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 49
// end ;
3083: GO 2952
3085: POP
3086: POP
// uc_nation = 3 ;
3087: LD_ADDR_OWVAR 21
3091: PUSH
3092: LD_INT 3
3094: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
3095: LD_ADDR_OWVAR 37
3099: PUSH
3100: LD_INT 21
3102: ST_TO_ADDR
// vc_engine = engine_combustion ;
3103: LD_ADDR_OWVAR 39
3107: PUSH
3108: LD_INT 1
3110: ST_TO_ADDR
// vc_control = control_manual ;
3111: LD_ADDR_OWVAR 38
3115: PUSH
3116: LD_INT 1
3118: ST_TO_ADDR
// vc_weapon = [ ru_gatling_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ;
3119: LD_ADDR_OWVAR 40
3123: PUSH
3124: LD_INT 43
3126: PUSH
3127: LD_INT 43
3129: PUSH
3130: LD_INT 42
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: PUSH
3138: LD_OWVAR 67
3142: ARRAY
3143: ST_TO_ADDR
// vehs = CreateVehicle ;
3144: LD_ADDR_VAR 0 4
3148: PUSH
3149: CALL_OW 45
3153: ST_TO_ADDR
// PlaceUnitArea ( vehs , SpawnArea , false ) ;
3154: LD_VAR 0 4
3158: PPUSH
3159: LD_INT 6
3161: PPUSH
3162: LD_INT 0
3164: PPUSH
3165: CALL_OW 49
// SetLives ( vehs , 510 ) ;
3169: LD_VAR 0 4
3173: PPUSH
3174: LD_INT 510
3176: PPUSH
3177: CALL_OW 234
// uc_nation = 2 ;
3181: LD_ADDR_OWVAR 21
3185: PUSH
3186: LD_INT 2
3188: ST_TO_ADDR
// hc_class = 3 ;
3189: LD_ADDR_OWVAR 28
3193: PUSH
3194: LD_INT 3
3196: ST_TO_ADDR
// un = CreateHuman ;
3197: LD_ADDR_VAR 0 3
3201: PUSH
3202: CALL_OW 44
3206: ST_TO_ADDR
// PlaceHumanInUnit ( un , vehs ) ;
3207: LD_VAR 0 3
3211: PPUSH
3212: LD_VAR 0 4
3216: PPUSH
3217: CALL_OW 52
// DialogueOn ;
3221: CALL_OW 6
// CenterNowOnUnits ( sol [ 1 ] ) ;
3225: LD_VAR 0 5
3229: PUSH
3230: LD_INT 1
3232: ARRAY
3233: PPUSH
3234: CALL_OW 87
// DWait ( 0 0$0.2 ) ;
3238: LD_INT 7
3240: PPUSH
3241: CALL_OW 68
// SayRadio ( sol [ 1 ] , DArr1 ) ;
3245: LD_VAR 0 5
3249: PUSH
3250: LD_INT 1
3252: ARRAY
3253: PPUSH
3254: LD_STRING DArr1
3256: PPUSH
3257: CALL_OW 94
// DialogueOff ;
3261: CALL_OW 7
// end ;
3265: LD_VAR 0 1
3269: RET
// every 0 0$03 trigger Jana = false do
3270: LD_EXP 9
3274: PUSH
3275: LD_INT 0
3277: EQUAL
3278: IFFALSE 3302
3280: GO 3282
3282: DISABLE
// begin SayRadio ( Jan , JanHelp ) ;
3283: LD_EXP 23
3287: PPUSH
3288: LD_STRING JanHelp
3290: PPUSH
3291: CALL_OW 94
// ChangeMissionObjectives ( HelpJ ) ;
3295: LD_STRING HelpJ
3297: PPUSH
3298: CALL_OW 337
// end ; end_of_file
3302: END
// export am , dow , kl ; export am_arm , am_bun , am_tw , am_sol , am_eng , am_mech , am_sci , am_veh , am_factory , am_limit , am_list , am_bul , diff_patrol , am_cmeh , am_diff , am_weapon , am_chassis , dskill , am_count , count_dif ; export function PrepareAmerican ; var i , un , b , x1 , y1 , k , l ; begin
3303: LD_INT 0
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
3309: PPUSH
3310: PPUSH
3311: PPUSH
3312: PPUSH
// am = 1 ;
3313: LD_ADDR_EXP 33
3317: PUSH
3318: LD_INT 1
3320: ST_TO_ADDR
// am_list := [ ] ;
3321: LD_ADDR_EXP 46
3325: PUSH
3326: EMPTY
3327: ST_TO_ADDR
// am_arm := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_armoury ] ] ) ;
3328: LD_ADDR_EXP 36
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_EXP 33
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: LD_INT 30
3347: PUSH
3348: LD_INT 4
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: ST_TO_ADDR
// am_bun := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_breastwork ] ] ) ;
3364: LD_ADDR_EXP 37
3368: PUSH
3369: LD_INT 22
3371: PUSH
3372: LD_EXP 33
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 30
3383: PUSH
3384: LD_INT 31
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PPUSH
3395: CALL_OW 69
3399: ST_TO_ADDR
// am_tw := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_bunker ] ] ) ;
3400: LD_ADDR_EXP 38
3404: PUSH
3405: LD_INT 22
3407: PUSH
3408: LD_EXP 33
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: LD_INT 30
3419: PUSH
3420: LD_INT 32
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: PPUSH
3431: CALL_OW 69
3435: ST_TO_ADDR
// am_veh := [ ] ;
3436: LD_ADDR_EXP 43
3440: PUSH
3441: EMPTY
3442: ST_TO_ADDR
// am_cmeh := [ ] ;
3443: LD_ADDR_EXP 49
3447: PUSH
3448: EMPTY
3449: ST_TO_ADDR
// dskill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3450: LD_ADDR_EXP 53
3454: PUSH
3455: LD_INT 3
3457: PUSH
3458: LD_INT 5
3460: PUSH
3461: LD_INT 7
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_OWVAR 67
3473: ARRAY
3474: ST_TO_ADDR
// diff_patrol = [ 3 , 4 , 4 ] [ Difficulty ] ;
3475: LD_ADDR_EXP 48
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: LD_INT 4
3485: PUSH
3486: LD_INT 4
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: LIST
3493: PUSH
3494: LD_OWVAR 67
3498: ARRAY
3499: ST_TO_ADDR
// am_diff := [ 4 , 5 , 6 ] [ Difficulty ] ;
3500: LD_ADDR_EXP 50
3504: PUSH
3505: LD_INT 4
3507: PUSH
3508: LD_INT 5
3510: PUSH
3511: LD_INT 6
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: PUSH
3519: LD_OWVAR 67
3523: ARRAY
3524: ST_TO_ADDR
// am_count := 0 ;
3525: LD_ADDR_EXP 54
3529: PUSH
3530: LD_INT 0
3532: ST_TO_ADDR
// count_dif := [ 3 , 4 , 4 ] [ Difficulty ] ;
3533: LD_ADDR_EXP 55
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: PUSH
3552: LD_OWVAR 67
3556: ARRAY
3557: ST_TO_ADDR
// am_weapon := [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun ] [ Difficulty ] ;
3558: LD_ADDR_EXP 51
3562: PUSH
3563: LD_INT 2
3565: PUSH
3566: LD_INT 3
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: LD_INT 5
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_OWVAR 67
3585: ARRAY
3586: ST_TO_ADDR
// am_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Difficulty ] ;
3587: LD_ADDR_EXP 52
3591: PUSH
3592: LD_INT 2
3594: PUSH
3595: LD_INT 3
3597: PUSH
3598: LD_INT 4
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: PUSH
3606: LD_OWVAR 67
3610: ARRAY
3611: ST_TO_ADDR
// uc_side = am ;
3612: LD_ADDR_OWVAR 20
3616: PUSH
3617: LD_EXP 33
3621: ST_TO_ADDR
// uc_nation = 1 ;
3622: LD_ADDR_OWVAR 21
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// hc_gallery =  ;
3630: LD_ADDR_OWVAR 33
3634: PUSH
3635: LD_STRING 
3637: ST_TO_ADDR
// hc_name =  ;
3638: LD_ADDR_OWVAR 26
3642: PUSH
3643: LD_STRING 
3645: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
3646: LD_ADDR_OWVAR 29
3650: PUSH
3651: LD_INT 8
3653: PPUSH
3654: LD_INT 12
3656: PPUSH
3657: CALL_OW 12
3661: PUSH
3662: LD_INT 9
3664: PPUSH
3665: LD_INT 11
3667: PPUSH
3668: CALL_OW 12
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
3677: LD_ADDR_OWVAR 27
3681: PUSH
3682: LD_INT 1
3684: PPUSH
3685: LD_INT 2
3687: PPUSH
3688: CALL_OW 12
3692: ST_TO_ADDR
// i = 0 ;
3693: LD_ADDR_VAR 0 2
3697: PUSH
3698: LD_INT 0
3700: ST_TO_ADDR
// k = 1 ;
3701: LD_ADDR_VAR 0 7
3705: PUSH
3706: LD_INT 1
3708: ST_TO_ADDR
// x1 = [ 77 , 104 , 96 , 89 , 111 , 17 , 16 ] ;
3709: LD_ADDR_VAR 0 5
3713: PUSH
3714: LD_INT 77
3716: PUSH
3717: LD_INT 104
3719: PUSH
3720: LD_INT 96
3722: PUSH
3723: LD_INT 89
3725: PUSH
3726: LD_INT 111
3728: PUSH
3729: LD_INT 17
3731: PUSH
3732: LD_INT 16
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: ST_TO_ADDR
// y1 = [ 13 , 63 , 57 , 67 , 85 , 4 , 15 ] ;
3744: LD_ADDR_VAR 0 6
3748: PUSH
3749: LD_INT 13
3751: PUSH
3752: LD_INT 63
3754: PUSH
3755: LD_INT 57
3757: PUSH
3758: LD_INT 67
3760: PUSH
3761: LD_INT 85
3763: PUSH
3764: LD_INT 4
3766: PUSH
3767: LD_INT 15
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: ST_TO_ADDR
// for i = 1 to 7 do
3779: LD_ADDR_VAR 0 2
3783: PUSH
3784: DOUBLE
3785: LD_INT 1
3787: DEC
3788: ST_TO_ADDR
3789: LD_INT 7
3791: PUSH
3792: FOR_TO
3793: IFFALSE 4017
// begin hc_class = 1 ;
3795: LD_ADDR_OWVAR 28
3799: PUSH
3800: LD_INT 1
3802: ST_TO_ADDR
// hc_skills = [ DSkill + Rand ( - 2 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 1 , 1 ) , DSkill + Rand ( - 3 , 1 ) ] ;
3803: LD_ADDR_OWVAR 31
3807: PUSH
3808: LD_EXP 53
3812: PUSH
3813: LD_INT 2
3815: NEG
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 12
3824: PLUS
3825: PUSH
3826: LD_EXP 53
3830: PUSH
3831: LD_INT 3
3833: NEG
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 12
3842: PLUS
3843: PUSH
3844: LD_EXP 53
3848: PUSH
3849: LD_INT 1
3851: NEG
3852: PPUSH
3853: LD_INT 1
3855: PPUSH
3856: CALL_OW 12
3860: PLUS
3861: PUSH
3862: LD_EXP 53
3866: PUSH
3867: LD_INT 3
3869: NEG
3870: PPUSH
3871: LD_INT 1
3873: PPUSH
3874: CALL_OW 12
3878: PLUS
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
3886: LD_ADDR_OWVAR 29
3890: PUSH
3891: LD_INT 8
3893: PPUSH
3894: LD_INT 12
3896: PPUSH
3897: CALL_OW 12
3901: PUSH
3902: LD_INT 9
3904: PPUSH
3905: LD_INT 11
3907: PPUSH
3908: CALL_OW 12
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
3917: LD_ADDR_OWVAR 27
3921: PUSH
3922: LD_INT 1
3924: PPUSH
3925: LD_INT 2
3927: PPUSH
3928: CALL_OW 12
3932: ST_TO_ADDR
// un = CreateHuman ;
3933: LD_ADDR_VAR 0 3
3937: PUSH
3938: CALL_OW 44
3942: ST_TO_ADDR
// PlaceUnitXY ( un , x1 [ k ] , y1 [ k ] , false ) ;
3943: LD_VAR 0 3
3947: PPUSH
3948: LD_VAR 0 5
3952: PUSH
3953: LD_VAR 0 7
3957: ARRAY
3958: PPUSH
3959: LD_VAR 0 6
3963: PUSH
3964: LD_VAR 0 7
3968: ARRAY
3969: PPUSH
3970: LD_INT 0
3972: PPUSH
3973: CALL_OW 48
// k := k + 1 ;
3977: LD_ADDR_VAR 0 7
3981: PUSH
3982: LD_VAR 0 7
3986: PUSH
3987: LD_INT 1
3989: PLUS
3990: ST_TO_ADDR
// ComEnterUnit ( un , NearestUnitToUnit ( am_bun , un ) ) ;
3991: LD_VAR 0 3
3995: PPUSH
3996: LD_EXP 37
4000: PPUSH
4001: LD_VAR 0 3
4005: PPUSH
4006: CALL_OW 74
4010: PPUSH
4011: CALL_OW 120
// end ;
4015: GO 3792
4017: POP
4018: POP
// for i in am_tw do
4019: LD_ADDR_VAR 0 2
4023: PUSH
4024: LD_EXP 38
4028: PUSH
4029: FOR_IN
4030: IFFALSE 4211
// begin if IsInUnit ( i ) = 0 then
4032: LD_VAR 0 2
4036: PPUSH
4037: CALL_OW 310
4041: PUSH
4042: LD_INT 0
4044: EQUAL
4045: IFFALSE 4209
// begin hc_class = 1 ;
4047: LD_ADDR_OWVAR 28
4051: PUSH
4052: LD_INT 1
4054: ST_TO_ADDR
// hc_skills = [ DSkill + Rand ( - 2 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 1 , 1 ) , DSkill + Rand ( - 3 , 1 ) ] ;
4055: LD_ADDR_OWVAR 31
4059: PUSH
4060: LD_EXP 53
4064: PUSH
4065: LD_INT 2
4067: NEG
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: CALL_OW 12
4076: PLUS
4077: PUSH
4078: LD_EXP 53
4082: PUSH
4083: LD_INT 3
4085: NEG
4086: PPUSH
4087: LD_INT 1
4089: PPUSH
4090: CALL_OW 12
4094: PLUS
4095: PUSH
4096: LD_EXP 53
4100: PUSH
4101: LD_INT 1
4103: NEG
4104: PPUSH
4105: LD_INT 1
4107: PPUSH
4108: CALL_OW 12
4112: PLUS
4113: PUSH
4114: LD_EXP 53
4118: PUSH
4119: LD_INT 3
4121: NEG
4122: PPUSH
4123: LD_INT 1
4125: PPUSH
4126: CALL_OW 12
4130: PLUS
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
4138: LD_ADDR_OWVAR 29
4142: PUSH
4143: LD_INT 8
4145: PPUSH
4146: LD_INT 12
4148: PPUSH
4149: CALL_OW 12
4153: PUSH
4154: LD_INT 9
4156: PPUSH
4157: LD_INT 11
4159: PPUSH
4160: CALL_OW 12
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4169: LD_ADDR_OWVAR 27
4173: PUSH
4174: LD_INT 1
4176: PPUSH
4177: LD_INT 2
4179: PPUSH
4180: CALL_OW 12
4184: ST_TO_ADDR
// un = CreateHuman ;
4185: LD_ADDR_VAR 0 3
4189: PUSH
4190: CALL_OW 44
4194: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4195: LD_VAR 0 3
4199: PPUSH
4200: LD_VAR 0 2
4204: PPUSH
4205: CALL_OW 52
// end ; end ;
4209: GO 4029
4211: POP
4212: POP
// l = 0 ;
4213: LD_ADDR_VAR 0 8
4217: PUSH
4218: LD_INT 0
4220: ST_TO_ADDR
// hc_class = 1 ;
4221: LD_ADDR_OWVAR 28
4225: PUSH
4226: LD_INT 1
4228: ST_TO_ADDR
// repeat begin hc_skills = [ DSkill + Rand ( - 2 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 1 , 1 ) , DSkill + Rand ( - 3 , 1 ) ] ;
4229: LD_ADDR_OWVAR 31
4233: PUSH
4234: LD_EXP 53
4238: PUSH
4239: LD_INT 2
4241: NEG
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: CALL_OW 12
4250: PLUS
4251: PUSH
4252: LD_EXP 53
4256: PUSH
4257: LD_INT 3
4259: NEG
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: CALL_OW 12
4268: PLUS
4269: PUSH
4270: LD_EXP 53
4274: PUSH
4275: LD_INT 1
4277: NEG
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: CALL_OW 12
4286: PLUS
4287: PUSH
4288: LD_EXP 53
4292: PUSH
4293: LD_INT 3
4295: NEG
4296: PPUSH
4297: LD_INT 1
4299: PPUSH
4300: CALL_OW 12
4304: PLUS
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
4312: LD_ADDR_OWVAR 29
4316: PUSH
4317: LD_INT 8
4319: PPUSH
4320: LD_INT 12
4322: PPUSH
4323: CALL_OW 12
4327: PUSH
4328: LD_INT 9
4330: PPUSH
4331: LD_INT 11
4333: PPUSH
4334: CALL_OW 12
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4343: LD_ADDR_OWVAR 27
4347: PUSH
4348: LD_INT 1
4350: PPUSH
4351: LD_INT 2
4353: PPUSH
4354: CALL_OW 12
4358: ST_TO_ADDR
// un = CreateHuman ;
4359: LD_ADDR_VAR 0 3
4363: PUSH
4364: CALL_OW 44
4368: ST_TO_ADDR
// if l <= 6 then
4369: LD_VAR 0 8
4373: PUSH
4374: LD_INT 6
4376: LESSEQUAL
4377: IFFALSE 4399
// PlaceHumanInUnit ( un , am_arm [ 1 ] ) else
4379: LD_VAR 0 3
4383: PPUSH
4384: LD_EXP 36
4388: PUSH
4389: LD_INT 1
4391: ARRAY
4392: PPUSH
4393: CALL_OW 52
4397: GO 4417
// PlaceHumanInUnit ( un , am_arm [ 2 ] ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_EXP 36
4408: PUSH
4409: LD_INT 2
4411: ARRAY
4412: PPUSH
4413: CALL_OW 52
// l = l + 1 ;
4417: LD_ADDR_VAR 0 8
4421: PUSH
4422: LD_VAR 0 8
4426: PUSH
4427: LD_INT 1
4429: PLUS
4430: ST_TO_ADDR
// end until l = 12 ;
4431: LD_VAR 0 8
4435: PUSH
4436: LD_INT 12
4438: EQUAL
4439: IFFALSE 4229
// l = 0 ;
4441: LD_ADDR_VAR 0 8
4445: PUSH
4446: LD_INT 0
4448: ST_TO_ADDR
// for i in am_lab do
4449: LD_ADDR_VAR 0 2
4453: PUSH
4454: LD_INT 23
4456: PUSH
4457: FOR_IN
4458: IFFALSE 4648
// begin hc_class = 4 ;
4460: LD_ADDR_OWVAR 28
4464: PUSH
4465: LD_INT 4
4467: ST_TO_ADDR
// repeat begin hc_skills = [ DSkill + Rand ( - 2 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 1 , 1 ) , DSkill + Rand ( - 3 , 1 ) ] ;
4468: LD_ADDR_OWVAR 31
4472: PUSH
4473: LD_EXP 53
4477: PUSH
4478: LD_INT 2
4480: NEG
4481: PPUSH
4482: LD_INT 1
4484: PPUSH
4485: CALL_OW 12
4489: PLUS
4490: PUSH
4491: LD_EXP 53
4495: PUSH
4496: LD_INT 3
4498: NEG
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: CALL_OW 12
4507: PLUS
4508: PUSH
4509: LD_EXP 53
4513: PUSH
4514: LD_INT 1
4516: NEG
4517: PPUSH
4518: LD_INT 1
4520: PPUSH
4521: CALL_OW 12
4525: PLUS
4526: PUSH
4527: LD_EXP 53
4531: PUSH
4532: LD_INT 3
4534: NEG
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
4539: CALL_OW 12
4543: PLUS
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
4551: LD_ADDR_OWVAR 29
4555: PUSH
4556: LD_INT 8
4558: PPUSH
4559: LD_INT 12
4561: PPUSH
4562: CALL_OW 12
4566: PUSH
4567: LD_INT 9
4569: PPUSH
4570: LD_INT 11
4572: PPUSH
4573: CALL_OW 12
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4582: LD_ADDR_OWVAR 27
4586: PUSH
4587: LD_INT 1
4589: PPUSH
4590: LD_INT 2
4592: PPUSH
4593: CALL_OW 12
4597: ST_TO_ADDR
// un = CreateHuman ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4608: LD_VAR 0 3
4612: PPUSH
4613: LD_VAR 0 2
4617: PPUSH
4618: CALL_OW 52
// l = l + 1 ;
4622: LD_ADDR_VAR 0 8
4626: PUSH
4627: LD_VAR 0 8
4631: PUSH
4632: LD_INT 1
4634: PLUS
4635: ST_TO_ADDR
// end until l = 6 ;
4636: LD_VAR 0 8
4640: PUSH
4641: LD_INT 6
4643: EQUAL
4644: IFFALSE 4468
// end ;
4646: GO 4457
4648: POP
4649: POP
// l = 0 ;
4650: LD_ADDR_VAR 0 8
4654: PUSH
4655: LD_INT 0
4657: ST_TO_ADDR
// for i in am_fac do
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: LD_INT 110
4665: PUSH
4666: FOR_IN
4667: IFFALSE 4857
// begin hc_class = 3 ;
4669: LD_ADDR_OWVAR 28
4673: PUSH
4674: LD_INT 3
4676: ST_TO_ADDR
// repeat begin hc_skills = [ DSkill + Rand ( - 2 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 1 , 1 ) , DSkill + Rand ( - 3 , 1 ) ] ;
4677: LD_ADDR_OWVAR 31
4681: PUSH
4682: LD_EXP 53
4686: PUSH
4687: LD_INT 2
4689: NEG
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: CALL_OW 12
4698: PLUS
4699: PUSH
4700: LD_EXP 53
4704: PUSH
4705: LD_INT 3
4707: NEG
4708: PPUSH
4709: LD_INT 1
4711: PPUSH
4712: CALL_OW 12
4716: PLUS
4717: PUSH
4718: LD_EXP 53
4722: PUSH
4723: LD_INT 1
4725: NEG
4726: PPUSH
4727: LD_INT 1
4729: PPUSH
4730: CALL_OW 12
4734: PLUS
4735: PUSH
4736: LD_EXP 53
4740: PUSH
4741: LD_INT 3
4743: NEG
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: CALL_OW 12
4752: PLUS
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
4760: LD_ADDR_OWVAR 29
4764: PUSH
4765: LD_INT 8
4767: PPUSH
4768: LD_INT 12
4770: PPUSH
4771: CALL_OW 12
4775: PUSH
4776: LD_INT 9
4778: PPUSH
4779: LD_INT 11
4781: PPUSH
4782: CALL_OW 12
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
4791: LD_ADDR_OWVAR 27
4795: PUSH
4796: LD_INT 1
4798: PPUSH
4799: LD_INT 2
4801: PPUSH
4802: CALL_OW 12
4806: ST_TO_ADDR
// un = CreateHuman ;
4807: LD_ADDR_VAR 0 3
4811: PUSH
4812: CALL_OW 44
4816: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
4817: LD_VAR 0 3
4821: PPUSH
4822: LD_VAR 0 2
4826: PPUSH
4827: CALL_OW 52
// l = l + 1 ;
4831: LD_ADDR_VAR 0 8
4835: PUSH
4836: LD_VAR 0 8
4840: PUSH
4841: LD_INT 1
4843: PLUS
4844: ST_TO_ADDR
// end until l = 6 ;
4845: LD_VAR 0 8
4849: PUSH
4850: LD_INT 6
4852: EQUAL
4853: IFFALSE 4677
// end ;
4855: GO 4666
4857: POP
4858: POP
// l = 0 ;
4859: LD_ADDR_VAR 0 8
4863: PUSH
4864: LD_INT 0
4866: ST_TO_ADDR
// for i in am_ct do
4867: LD_ADDR_VAR 0 2
4871: PUSH
4872: LD_INT 115
4874: PUSH
4875: FOR_IN
4876: IFFALSE 5082
// begin hc_class = 3 ;
4878: LD_ADDR_OWVAR 28
4882: PUSH
4883: LD_INT 3
4885: ST_TO_ADDR
// repeat begin hc_skills = [ DSkill + Rand ( - 2 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 3 , 1 ) ] ;
4886: LD_ADDR_OWVAR 31
4890: PUSH
4891: LD_EXP 53
4895: PUSH
4896: LD_INT 2
4898: NEG
4899: PPUSH
4900: LD_INT 1
4902: PPUSH
4903: CALL_OW 12
4907: PLUS
4908: PUSH
4909: LD_EXP 53
4913: PUSH
4914: LD_INT 3
4916: NEG
4917: PPUSH
4918: LD_INT 1
4920: PPUSH
4921: CALL_OW 12
4925: PLUS
4926: PUSH
4927: LD_EXP 53
4931: PUSH
4932: LD_INT 3
4934: NEG
4935: PPUSH
4936: LD_INT 1
4938: PPUSH
4939: CALL_OW 12
4943: PLUS
4944: PUSH
4945: LD_EXP 53
4949: PUSH
4950: LD_INT 3
4952: NEG
4953: PPUSH
4954: LD_INT 1
4956: PPUSH
4957: CALL_OW 12
4961: PLUS
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
4969: LD_ADDR_OWVAR 29
4973: PUSH
4974: LD_INT 8
4976: PPUSH
4977: LD_INT 12
4979: PPUSH
4980: CALL_OW 12
4984: PUSH
4985: LD_INT 9
4987: PPUSH
4988: LD_INT 11
4990: PPUSH
4991: CALL_OW 12
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5000: LD_ADDR_OWVAR 27
5004: PUSH
5005: LD_INT 1
5007: PPUSH
5008: LD_INT 2
5010: PPUSH
5011: CALL_OW 12
5015: ST_TO_ADDR
// un = CreateHuman ;
5016: LD_ADDR_VAR 0 3
5020: PUSH
5021: CALL_OW 44
5025: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
5026: LD_VAR 0 3
5030: PPUSH
5031: LD_VAR 0 2
5035: PPUSH
5036: CALL_OW 52
// am_cmeh = am_cmeh ^ un ;
5040: LD_ADDR_EXP 49
5044: PUSH
5045: LD_EXP 49
5049: PUSH
5050: LD_VAR 0 3
5054: ADD
5055: ST_TO_ADDR
// l = l + 1 ;
5056: LD_ADDR_VAR 0 8
5060: PUSH
5061: LD_VAR 0 8
5065: PUSH
5066: LD_INT 1
5068: PLUS
5069: ST_TO_ADDR
// end until l = 3 ;
5070: LD_VAR 0 8
5074: PUSH
5075: LD_INT 3
5077: EQUAL
5078: IFFALSE 4886
// end ;
5080: GO 4875
5082: POP
5083: POP
// l = 0 ;
5084: LD_ADDR_VAR 0 8
5088: PUSH
5089: LD_INT 0
5091: ST_TO_ADDR
// repeat begin hc_class = 2 ;
5092: LD_ADDR_OWVAR 28
5096: PUSH
5097: LD_INT 2
5099: ST_TO_ADDR
// hc_skills = [ DSkill + Rand ( - 2 , 1 ) , DSkill + Rand ( - 1 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 3 , 1 ) ] ;
5100: LD_ADDR_OWVAR 31
5104: PUSH
5105: LD_EXP 53
5109: PUSH
5110: LD_INT 2
5112: NEG
5113: PPUSH
5114: LD_INT 1
5116: PPUSH
5117: CALL_OW 12
5121: PLUS
5122: PUSH
5123: LD_EXP 53
5127: PUSH
5128: LD_INT 1
5130: NEG
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: CALL_OW 12
5139: PLUS
5140: PUSH
5141: LD_EXP 53
5145: PUSH
5146: LD_INT 3
5148: NEG
5149: PPUSH
5150: LD_INT 1
5152: PPUSH
5153: CALL_OW 12
5157: PLUS
5158: PUSH
5159: LD_EXP 53
5163: PUSH
5164: LD_INT 3
5166: NEG
5167: PPUSH
5168: LD_INT 1
5170: PPUSH
5171: CALL_OW 12
5175: PLUS
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
5183: LD_ADDR_OWVAR 29
5187: PUSH
5188: LD_INT 8
5190: PPUSH
5191: LD_INT 12
5193: PPUSH
5194: CALL_OW 12
5198: PUSH
5199: LD_INT 9
5201: PPUSH
5202: LD_INT 11
5204: PPUSH
5205: CALL_OW 12
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
5214: LD_ADDR_OWVAR 27
5218: PUSH
5219: LD_INT 1
5221: PPUSH
5222: LD_INT 2
5224: PPUSH
5225: CALL_OW 12
5229: ST_TO_ADDR
// un = CreateHuman ;
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: CALL_OW 44
5239: ST_TO_ADDR
// PlaceUnitArea ( un , AmBase , false ) ;
5240: LD_VAR 0 3
5244: PPUSH
5245: LD_INT 3
5247: PPUSH
5248: LD_INT 0
5250: PPUSH
5251: CALL_OW 49
// l = l + 1 ;
5255: LD_ADDR_VAR 0 8
5259: PUSH
5260: LD_VAR 0 8
5264: PUSH
5265: LD_INT 1
5267: PLUS
5268: ST_TO_ADDR
// end until l = 5 ;
5269: LD_VAR 0 8
5273: PUSH
5274: LD_INT 5
5276: EQUAL
5277: IFFALSE 5092
// hc_gallery = us ;
5279: LD_ADDR_OWVAR 33
5283: PUSH
5284: LD_STRING us
5286: ST_TO_ADDR
// hc_face_number = 19 ;
5287: LD_ADDR_OWVAR 34
5291: PUSH
5292: LD_INT 19
5294: ST_TO_ADDR
// hc_name = Jeremy Sikorski ;
5295: LD_ADDR_OWVAR 26
5299: PUSH
5300: LD_STRING Jeremy Sikorski
5302: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
5303: LD_ADDR_OWVAR 29
5307: PUSH
5308: LD_INT 11
5310: PUSH
5311: LD_INT 10
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: ST_TO_ADDR
// hc_skills = [ 8 , 5 , 7 , 3 ] ;
5318: LD_ADDR_OWVAR 31
5322: PUSH
5323: LD_INT 8
5325: PUSH
5326: LD_INT 5
5328: PUSH
5329: LD_INT 7
5331: PUSH
5332: LD_INT 3
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: ST_TO_ADDR
// hc_sex = sex_male ;
5341: LD_ADDR_OWVAR 27
5345: PUSH
5346: LD_INT 1
5348: ST_TO_ADDR
// hc_class = 1 ;
5349: LD_ADDR_OWVAR 28
5353: PUSH
5354: LD_INT 1
5356: ST_TO_ADDR
// dow := CreateHuman ;
5357: LD_ADDR_EXP 34
5361: PUSH
5362: CALL_OW 44
5366: ST_TO_ADDR
// PlaceHumanInUnit ( dow , am_dep ) ;
5367: LD_EXP 34
5371: PPUSH
5372: LD_INT 18
5374: PPUSH
5375: CALL_OW 52
// SetDefenseAI ;
5379: CALL 5416 0 0
// PlaceBunker ;
5383: CALL 7528 0 0
// end ;
5387: LD_VAR 0 1
5391: RET
// every 15 15$00 trigger Difficulty > 1 do
5392: LD_OWVAR 67
5396: PUSH
5397: LD_INT 1
5399: GREATER
5400: IFFALSE 5415
5402: GO 5404
5404: DISABLE
// begin ComResearch ( am_lab , tech_weap2 ) ;
5405: LD_INT 23
5407: PPUSH
5408: LD_INT 52
5410: PPUSH
5411: CALL_OW 124
// end ;
5415: END
// export def_un ; function SetDefenseAI ; var i , veh , un ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
5421: PPUSH
// uc_side = am ;
5422: LD_ADDR_OWVAR 20
5426: PUSH
5427: LD_EXP 33
5431: ST_TO_ADDR
// uc_nation = 1 ;
5432: LD_ADDR_OWVAR 21
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// def_un = [ ] ;
5440: LD_ADDR_EXP 56
5444: PUSH
5445: EMPTY
5446: ST_TO_ADDR
// for i = 1 to 3 do
5447: LD_ADDR_VAR 0 2
5451: PUSH
5452: DOUBLE
5453: LD_INT 1
5455: DEC
5456: ST_TO_ADDR
5457: LD_INT 3
5459: PUSH
5460: FOR_TO
5461: IFFALSE 5643
// begin vc_chassis = us_heavy_tracked ;
5463: LD_ADDR_OWVAR 37
5467: PUSH
5468: LD_INT 4
5470: ST_TO_ADDR
// vc_engine = engine_combustion ;
5471: LD_ADDR_OWVAR 39
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// vc_control = control_manual ;
5479: LD_ADDR_OWVAR 38
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
5487: LD_ADDR_OWVAR 40
5491: PUSH
5492: LD_INT 4
5494: ST_TO_ADDR
// veh = CreateVehicle ;
5495: LD_ADDR_VAR 0 3
5499: PUSH
5500: CALL_OW 45
5504: ST_TO_ADDR
// PlaceUnitArea ( veh , AMAI , false ) ;
5505: LD_VAR 0 3
5509: PPUSH
5510: LD_INT 23
5512: PPUSH
5513: LD_INT 0
5515: PPUSH
5516: CALL_OW 49
// def_un = def_un ^ veh ;
5520: LD_ADDR_EXP 56
5524: PUSH
5525: LD_EXP 56
5529: PUSH
5530: LD_VAR 0 3
5534: ADD
5535: ST_TO_ADDR
// hc_class = 3 ;
5536: LD_ADDR_OWVAR 28
5540: PUSH
5541: LD_INT 3
5543: ST_TO_ADDR
// hc_skills = [ Rand ( 5 , 6 ) , Rand ( 1 , 5 ) , DSkill , Rand ( 0 , 1 ) ] ;
5544: LD_ADDR_OWVAR 31
5548: PUSH
5549: LD_INT 5
5551: PPUSH
5552: LD_INT 6
5554: PPUSH
5555: CALL_OW 12
5559: PUSH
5560: LD_INT 1
5562: PPUSH
5563: LD_INT 5
5565: PPUSH
5566: CALL_OW 12
5570: PUSH
5571: LD_EXP 53
5575: PUSH
5576: LD_INT 0
5578: PPUSH
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 12
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: ST_TO_ADDR
// hc_sex = sex_male ;
5593: LD_ADDR_OWVAR 27
5597: PUSH
5598: LD_INT 1
5600: ST_TO_ADDR
// hc_name =  ;
5601: LD_ADDR_OWVAR 26
5605: PUSH
5606: LD_STRING 
5608: ST_TO_ADDR
// hc_gallery =  ;
5609: LD_ADDR_OWVAR 33
5613: PUSH
5614: LD_STRING 
5616: ST_TO_ADDR
// un = CreateHuman ;
5617: LD_ADDR_VAR 0 4
5621: PUSH
5622: CALL_OW 44
5626: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5627: LD_VAR 0 4
5631: PPUSH
5632: LD_VAR 0 3
5636: PPUSH
5637: CALL_OW 52
// end ;
5641: GO 5460
5643: POP
5644: POP
// end ;
5645: LD_VAR 0 1
5649: RET
// every 0 0$01 trigger def_un > 0 do var un , enemy , can_attack , liv ;
5650: LD_EXP 56
5654: PUSH
5655: LD_INT 0
5657: GREATER
5658: IFFALSE 5894
5660: GO 5662
5662: DISABLE
5663: LD_INT 0
5665: PPUSH
5666: PPUSH
5667: PPUSH
5668: PPUSH
// begin enable ;
5669: ENABLE
// can_attack = UnitFilter ( def_un , [ f_lives , 600 ] ) ;
5670: LD_ADDR_VAR 0 3
5674: PUSH
5675: LD_EXP 56
5679: PPUSH
5680: LD_INT 24
5682: PUSH
5683: LD_INT 600
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PPUSH
5690: CALL_OW 72
5694: ST_TO_ADDR
// for un in def_un do
5695: LD_ADDR_VAR 0 1
5699: PUSH
5700: LD_EXP 56
5704: PUSH
5705: FOR_IN
5706: IFFALSE 5833
// begin if not IsInArea ( un , AmBase ) then
5708: LD_VAR 0 1
5712: PPUSH
5713: LD_INT 3
5715: PPUSH
5716: CALL_OW 308
5720: NOT
5721: IFFALSE 5735
// begin ComMoveToArea ( un , AmBase ) ;
5723: LD_VAR 0 1
5727: PPUSH
5728: LD_INT 3
5730: PPUSH
5731: CALL_OW 113
// end ; if GetFuel ( un ) < 700 then
5735: LD_VAR 0 1
5739: PPUSH
5740: CALL_OW 261
5744: PUSH
5745: LD_INT 700
5747: LESS
5748: IFFALSE 5777
// begin if not See ( 2 , un ) then
5750: LD_INT 2
5752: PPUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 292
5762: NOT
5763: IFFALSE 5777
// SetFuel ( un , 1000 ) ;
5765: LD_VAR 0 1
5769: PPUSH
5770: LD_INT 1000
5772: PPUSH
5773: CALL_OW 240
// end ; if GetLives ( un ) < 600 then
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 256
5786: PUSH
5787: LD_INT 600
5789: LESS
5790: IFFALSE 5831
// begin ComMoveXY ( un , 85 , 23 ) ;
5792: LD_VAR 0 1
5796: PPUSH
5797: LD_INT 85
5799: PPUSH
5800: LD_INT 23
5802: PPUSH
5803: CALL_OW 111
// AddComWait ( un , 0 0$10 ) ;
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 350
5814: PPUSH
5815: CALL_OW 202
// SetLives ( un , 1000 ) ;
5819: LD_VAR 0 1
5823: PPUSH
5824: LD_INT 1000
5826: PPUSH
5827: CALL_OW 234
// end ; end ;
5831: GO 5705
5833: POP
5834: POP
// for enemy in FilterAllUnits ( [ f_side , 2 ] ) do
5835: LD_ADDR_VAR 0 2
5839: PUSH
5840: LD_INT 22
5842: PUSH
5843: LD_INT 2
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PPUSH
5850: CALL_OW 69
5854: PUSH
5855: FOR_IN
5856: IFFALSE 5892
// begin if IsInArea ( enemy , AmBase ) then
5858: LD_VAR 0 2
5862: PPUSH
5863: LD_INT 3
5865: PPUSH
5866: CALL_OW 308
5870: IFFALSE 5890
// begin ComAttackUnit ( can_attack , enemy [ 1 ] ) ;
5872: LD_VAR 0 3
5876: PPUSH
5877: LD_VAR 0 2
5881: PUSH
5882: LD_INT 1
5884: ARRAY
5885: PPUSH
5886: CALL_OW 115
// end ; end ;
5890: GO 5855
5892: POP
5893: POP
// end ;
5894: PPOPN 4
5896: END
// every 0 0$01 trigger Time > 20 20$0 do
5897: LD_EXP 62
5901: PUSH
5902: LD_INT 42000
5904: GREATER
5905: IFFALSE 5930
5907: GO 5909
5909: DISABLE
// begin ComResearch ( am_lab , tech_weap1 ) ;
5910: LD_INT 23
5912: PPUSH
5913: LD_INT 51
5915: PPUSH
5916: CALL_OW 124
// AddComResearch ( am_lab , tech_weap2 ) ;
5920: LD_INT 23
5922: PPUSH
5923: LD_INT 52
5925: PPUSH
5926: CALL_OW 184
// end ;
5930: END
// every 0 0$01 do var b , engs , hurts , un , i ;
5931: GO 5933
5933: DISABLE
5934: LD_INT 0
5936: PPUSH
5937: PPUSH
5938: PPUSH
5939: PPUSH
5940: PPUSH
// begin enable ;
5941: ENABLE
// am_bul = FilterUnitsInArea ( ambase , [ [ [ f_side , am ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5942: LD_ADDR_EXP 47
5946: PUSH
5947: LD_INT 3
5949: PPUSH
5950: LD_INT 22
5952: PUSH
5953: LD_EXP 33
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 21
5964: PUSH
5965: LD_INT 3
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: LD_INT 3
5974: PUSH
5975: LD_INT 24
5977: PUSH
5978: LD_INT 1000
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: PPUSH
5997: CALL_OW 70
6001: ST_TO_ADDR
// am_eng = FilterAllUnits ( [ [ f_side , am ] , [ f_class , 2 ] ] ) ;
6002: LD_ADDR_EXP 40
6006: PUSH
6007: LD_INT 22
6009: PUSH
6010: LD_EXP 33
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 25
6021: PUSH
6022: LD_INT 2
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PPUSH
6033: CALL_OW 69
6037: ST_TO_ADDR
// engs = UnitFilter ( am_eng , [ f_lives , 1000 ] ) ;
6038: LD_ADDR_VAR 0 2
6042: PUSH
6043: LD_EXP 40
6047: PPUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PPUSH
6058: CALL_OW 72
6062: ST_TO_ADDR
// hurts = UnitFilter ( am_eng , [ f_not , [ f_lives , 650 ] ] ) ;
6063: LD_ADDR_VAR 0 3
6067: PUSH
6068: LD_EXP 40
6072: PPUSH
6073: LD_INT 3
6075: PUSH
6076: LD_INT 24
6078: PUSH
6079: LD_INT 650
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PPUSH
6090: CALL_OW 72
6094: ST_TO_ADDR
// if am_eng > 0 then
6095: LD_EXP 40
6099: PUSH
6100: LD_INT 0
6102: GREATER
6103: IFFALSE 6227
// begin if hurts > 0 then
6105: LD_VAR 0 3
6109: PUSH
6110: LD_INT 0
6112: GREATER
6113: IFFALSE 6153
// for un in hurts do
6115: LD_ADDR_VAR 0 4
6119: PUSH
6120: LD_VAR 0 3
6124: PUSH
6125: FOR_IN
6126: IFFALSE 6151
// begin ComEnterUnit ( un , am_dep ) ;
6128: LD_VAR 0 4
6132: PPUSH
6133: LD_INT 18
6135: PPUSH
6136: CALL_OW 120
// AddComExitBuilding ( un ) ;
6140: LD_VAR 0 4
6144: PPUSH
6145: CALL_OW 182
// end ;
6149: GO 6125
6151: POP
6152: POP
// if am_bul > 0 then
6153: LD_EXP 47
6157: PUSH
6158: LD_INT 0
6160: GREATER
6161: IFFALSE 6227
// for i = 1 to engs do
6163: LD_ADDR_VAR 0 5
6167: PUSH
6168: DOUBLE
6169: LD_INT 1
6171: DEC
6172: ST_TO_ADDR
6173: LD_VAR 0 2
6177: PUSH
6178: FOR_TO
6179: IFFALSE 6225
// begin if not HasTask ( engs [ i ] ) then
6181: LD_VAR 0 2
6185: PUSH
6186: LD_VAR 0 5
6190: ARRAY
6191: PPUSH
6192: CALL_OW 314
6196: NOT
6197: IFFALSE 6223
// ComRepairBuilding ( engs [ i ] , am_bul [ 1 ] ) ;
6199: LD_VAR 0 2
6203: PUSH
6204: LD_VAR 0 5
6208: ARRAY
6209: PPUSH
6210: LD_EXP 47
6214: PUSH
6215: LD_INT 1
6217: ARRAY
6218: PPUSH
6219: CALL_OW 130
// end ;
6223: GO 6178
6225: POP
6226: POP
// end ; end ;
6227: PPOPN 5
6229: END
// every 10 10$0 do
6230: GO 6232
6232: DISABLE
// begin enable ;
6233: ENABLE
// if IsOk ( am_dep ) then
6234: LD_INT 18
6236: PPUSH
6237: CALL_OW 302
6241: IFFALSE 6269
// begin SetResourceType ( am_dep , mat_cans , 10000 ) ;
6243: LD_INT 18
6245: PPUSH
6246: LD_INT 1
6248: PPUSH
6249: LD_INT 10000
6251: PPUSH
6252: CALL_OW 277
// SetResourceType ( am_dep , mat_oil , 1000 ) ;
6256: LD_INT 18
6258: PPUSH
6259: LD_INT 2
6261: PPUSH
6262: LD_INT 1000
6264: PPUSH
6265: CALL_OW 277
// end ; end ;
6269: END
// every 0 0$01 do var v , filter ;
6270: GO 6272
6272: DISABLE
6273: LD_INT 0
6275: PPUSH
6276: PPUSH
// begin enable ;
6277: ENABLE
// filter = FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
6278: LD_ADDR_VAR 0 2
6282: PUSH
6283: LD_INT 22
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 33
6295: PUSH
6296: LD_INT 2
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 50
6305: PUSH
6306: EMPTY
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: PUSH
6314: EMPTY
6315: LIST
6316: PPUSH
6317: CALL_OW 69
6321: ST_TO_ADDR
// for v in filter do
6322: LD_ADDR_VAR 0 1
6326: PUSH
6327: LD_VAR 0 2
6331: PUSH
6332: FOR_IN
6333: IFFALSE 6452
// begin if not IsControledBy ( v ) and IsOk ( v ) then
6335: LD_VAR 0 1
6339: PPUSH
6340: CALL_OW 312
6344: NOT
6345: PUSH
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 302
6355: AND
6356: IFFALSE 6376
// ComLinkTo ( v , am_cmeh [ 1 ] ) ;
6358: LD_VAR 0 1
6362: PPUSH
6363: LD_EXP 49
6367: PUSH
6368: LD_INT 1
6370: ARRAY
6371: PPUSH
6372: CALL_OW 135
// if UnitsLinked ( am_cmeh [ 1 ] ) >= 2 then
6376: LD_EXP 49
6380: PUSH
6381: LD_INT 1
6383: ARRAY
6384: PPUSH
6385: CALL_OW 432
6389: PUSH
6390: LD_INT 2
6392: GREATEREQUAL
6393: IFFALSE 6413
// ComLinkTo ( v , am_cmeh [ 2 ] ) ;
6395: LD_VAR 0 1
6399: PPUSH
6400: LD_EXP 49
6404: PUSH
6405: LD_INT 2
6407: ARRAY
6408: PPUSH
6409: CALL_OW 135
// if UnitsLinked ( am_cmeh [ 2 ] ) >= 2 then
6413: LD_EXP 49
6417: PUSH
6418: LD_INT 2
6420: ARRAY
6421: PPUSH
6422: CALL_OW 432
6426: PUSH
6427: LD_INT 2
6429: GREATEREQUAL
6430: IFFALSE 6450
// ComLinkTo ( v , am_cmeh [ 3 ] ) ;
6432: LD_VAR 0 1
6436: PPUSH
6437: LD_EXP 49
6441: PUSH
6442: LD_INT 3
6444: ARRAY
6445: PPUSH
6446: CALL_OW 135
// end ;
6450: GO 6332
6452: POP
6453: POP
// end ;
6454: PPOPN 2
6456: END
// every 0 0$01 trigger AmerikaAttack = true do var i ;
6457: LD_EXP 1
6461: PUSH
6462: LD_INT 1
6464: EQUAL
6465: IFFALSE 6603
6467: GO 6469
6469: DISABLE
6470: LD_INT 0
6472: PPUSH
// begin if GetSide ( ar_depe ) = 8 then
6473: LD_INT 138
6475: PPUSH
6476: CALL_OW 255
6480: PUSH
6481: LD_INT 8
6483: EQUAL
6484: IFFALSE 6495
// begin Wait ( 12 12$00 ) ;
6486: LD_INT 25200
6488: PPUSH
6489: CALL_OW 67
// end else
6493: GO 6502
// begin Wait ( 10 10$00 ) ;
6495: LD_INT 21000
6497: PPUSH
6498: CALL_OW 67
// end ; for i = 1 to am_diff do
6502: LD_ADDR_VAR 0 1
6506: PUSH
6507: DOUBLE
6508: LD_INT 1
6510: DEC
6511: ST_TO_ADDR
6512: LD_EXP 50
6516: PUSH
6517: FOR_TO
6518: IFFALSE 6555
// begin AddComConstruct ( am_fac , us_medium_wheeled , engine_combustion , control_remote , am_weapon + Rand ( 0 , 1 ) ) ;
6520: LD_INT 110
6522: PPUSH
6523: LD_INT 2
6525: PPUSH
6526: LD_INT 1
6528: PPUSH
6529: LD_INT 2
6531: PPUSH
6532: LD_EXP 51
6536: PUSH
6537: LD_INT 0
6539: PPUSH
6540: LD_INT 1
6542: PPUSH
6543: CALL_OW 12
6547: PLUS
6548: PPUSH
6549: CALL_OW 185
// end ;
6553: GO 6517
6555: POP
6556: POP
// Wait ( 0 0$20 ) ;
6557: LD_INT 700
6559: PPUSH
6560: CALL_OW 67
// AddComExitBuilding ( for_sol ) ;
6564: LD_EXP 57
6568: PPUSH
6569: CALL_OW 182
// AddComAgressiveMove ( for_sol , 98 , 5 ) ;
6573: LD_EXP 57
6577: PPUSH
6578: LD_INT 98
6580: PPUSH
6581: LD_INT 5
6583: PPUSH
6584: CALL_OW 174
// AddComAgressiveMove ( for_sol , 126 , 7 ) ;
6588: LD_EXP 57
6592: PPUSH
6593: LD_INT 126
6595: PPUSH
6596: LD_INT 7
6598: PPUSH
6599: CALL_OW 174
// end ;
6603: PPOPN 1
6605: END
// every 0 0$10 trigger CanAttack = true do var i , filter ;
6606: LD_EXP 15
6610: PUSH
6611: LD_INT 1
6613: EQUAL
6614: IFFALSE 6712
6616: GO 6618
6618: DISABLE
6619: LD_INT 0
6621: PPUSH
6622: PPUSH
// begin enable ;
6623: ENABLE
// filter = FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_not , [ f_weapon , us_bulldozer ] ] ] ) ;
6624: LD_ADDR_VAR 0 2
6628: PUSH
6629: LD_INT 22
6631: PUSH
6632: LD_INT 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 33
6641: PUSH
6642: LD_INT 2
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 3
6651: PUSH
6652: LD_INT 34
6654: PUSH
6655: LD_INT 14
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: PPUSH
6671: CALL_OW 69
6675: ST_TO_ADDR
// if filter >= am_diff then
6676: LD_VAR 0 2
6680: PUSH
6681: LD_EXP 50
6685: GREATEREQUAL
6686: IFFALSE 6712
// begin CanAttack = false ;
6688: LD_ADDR_EXP 15
6692: PUSH
6693: LD_INT 0
6695: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
6696: LD_INT 105
6698: PPUSH
6699: CALL_OW 67
// ComAttackArabianBase ( filter ) ;
6703: LD_VAR 0 2
6707: PPUSH
6708: CALL 7138 0 1
// end ; end ;
6712: PPOPN 2
6714: END
// every 16 16$00 trigger AmerikaAttack = true and am_count <= count_dif do var i , veh , un , am_troops , ar_units ;
6715: LD_EXP 1
6719: PUSH
6720: LD_INT 1
6722: EQUAL
6723: PUSH
6724: LD_EXP 54
6728: PUSH
6729: LD_EXP 55
6733: LESSEQUAL
6734: AND
6735: IFFALSE 7135
6737: GO 6739
6739: DISABLE
6740: LD_INT 0
6742: PPUSH
6743: PPUSH
6744: PPUSH
6745: PPUSH
6746: PPUSH
// begin enable ;
6747: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$30 ) ) ;
6748: LD_INT 35
6750: PPUSH
6751: LD_INT 1050
6753: PPUSH
6754: CALL_OW 12
6758: PPUSH
6759: CALL_OW 67
// for i = 1 to 3 do
6763: LD_ADDR_VAR 0 1
6767: PUSH
6768: DOUBLE
6769: LD_INT 1
6771: DEC
6772: ST_TO_ADDR
6773: LD_INT 3
6775: PUSH
6776: FOR_TO
6777: IFFALSE 6979
// begin uc_side = 4 ;
6779: LD_ADDR_OWVAR 20
6783: PUSH
6784: LD_INT 4
6786: ST_TO_ADDR
// uc_nation = 1 ;
6787: LD_ADDR_OWVAR 21
6791: PUSH
6792: LD_INT 1
6794: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6795: LD_ADDR_OWVAR 37
6799: PUSH
6800: LD_INT 3
6802: ST_TO_ADDR
// vc_engine = engine_combustion ;
6803: LD_ADDR_OWVAR 39
6807: PUSH
6808: LD_INT 1
6810: ST_TO_ADDR
// vc_control = control_manual ;
6811: LD_ADDR_OWVAR 38
6815: PUSH
6816: LD_INT 1
6818: ST_TO_ADDR
// vc_weapon = am_weapon + Rand ( 0 , 1 ) ;
6819: LD_ADDR_OWVAR 40
6823: PUSH
6824: LD_EXP 51
6828: PUSH
6829: LD_INT 0
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: CALL_OW 12
6839: PLUS
6840: ST_TO_ADDR
// veh = CreateVehicle ;
6841: LD_ADDR_VAR 0 2
6845: PUSH
6846: CALL_OW 45
6850: ST_TO_ADDR
// PlaceUnitArea ( veh , AmSpawn , false ) ;
6851: LD_VAR 0 2
6855: PPUSH
6856: LD_INT 19
6858: PPUSH
6859: LD_INT 0
6861: PPUSH
6862: CALL_OW 49
// hc_class = 1 ;
6866: LD_ADDR_OWVAR 28
6870: PUSH
6871: LD_INT 1
6873: ST_TO_ADDR
// hc_name =  ;
6874: LD_ADDR_OWVAR 26
6878: PUSH
6879: LD_STRING 
6881: ST_TO_ADDR
// hc_gallery =  ;
6882: LD_ADDR_OWVAR 33
6886: PUSH
6887: LD_STRING 
6889: ST_TO_ADDR
// hc_sex = sex_male ;
6890: LD_ADDR_OWVAR 27
6894: PUSH
6895: LD_INT 1
6897: ST_TO_ADDR
// hc_skills = [ Rand ( 1 , 3 ) , Rand ( 0 , 1 ) , Rand ( 3 , 6 ) , Rand ( 0 , 2 ) ] ;
6898: LD_ADDR_OWVAR 31
6902: PUSH
6903: LD_INT 1
6905: PPUSH
6906: LD_INT 3
6908: PPUSH
6909: CALL_OW 12
6913: PUSH
6914: LD_INT 0
6916: PPUSH
6917: LD_INT 1
6919: PPUSH
6920: CALL_OW 12
6924: PUSH
6925: LD_INT 3
6927: PPUSH
6928: LD_INT 6
6930: PPUSH
6931: CALL_OW 12
6935: PUSH
6936: LD_INT 0
6938: PPUSH
6939: LD_INT 2
6941: PPUSH
6942: CALL_OW 12
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: ST_TO_ADDR
// un = CreateHuman ;
6953: LD_ADDR_VAR 0 3
6957: PUSH
6958: CALL_OW 44
6962: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6963: LD_VAR 0 3
6967: PPUSH
6968: LD_VAR 0 2
6972: PPUSH
6973: CALL_OW 52
// end ;
6977: GO 6776
6979: POP
6980: POP
// Wait ( 3 ) ;
6981: LD_INT 3
6983: PPUSH
6984: CALL_OW 67
// am_troops = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_vehicle ] ] ) ;
6988: LD_ADDR_VAR 0 4
6992: PUSH
6993: LD_INT 22
6995: PUSH
6996: LD_INT 4
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 2
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: ST_TO_ADDR
// repeat begin ar_units := FilterAllUnits ( [ f_side , 5 ] ) ;
7022: LD_ADDR_VAR 0 5
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_INT 5
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PPUSH
7037: CALL_OW 69
7041: ST_TO_ADDR
// for i = 1 to am_troops do
7042: LD_ADDR_VAR 0 1
7046: PUSH
7047: DOUBLE
7048: LD_INT 1
7050: DEC
7051: ST_TO_ADDR
7052: LD_VAR 0 4
7056: PUSH
7057: FOR_TO
7058: IFFALSE 7116
// begin if not HasTask ( am_troops [ i ] ) then
7060: LD_VAR 0 4
7064: PUSH
7065: LD_VAR 0 1
7069: ARRAY
7070: PPUSH
7071: CALL_OW 314
7075: NOT
7076: IFFALSE 7114
// ComAttackUnit ( am_troops [ i ] , NearestUnitToUnit ( ar_units , am_troops [ i ] ) ) ;
7078: LD_VAR 0 4
7082: PUSH
7083: LD_VAR 0 1
7087: ARRAY
7088: PPUSH
7089: LD_VAR 0 5
7093: PPUSH
7094: LD_VAR 0 4
7098: PUSH
7099: LD_VAR 0 1
7103: ARRAY
7104: PPUSH
7105: CALL_OW 74
7109: PPUSH
7110: CALL_OW 115
// end ;
7114: GO 7057
7116: POP
7117: POP
// Wait ( 0 0$02 ) ;
7118: LD_INT 70
7120: PPUSH
7121: CALL_OW 67
// end until am_troops = 0 ;
7125: LD_VAR 0 4
7129: PUSH
7130: LD_INT 0
7132: EQUAL
7133: IFFALSE 7022
// end ;
7135: PPOPN 5
7137: END
// export function ComAttackArabianBase ( am_vehs ) ; var un , i , ar_units , e ; begin
7138: LD_INT 0
7140: PPUSH
7141: PPUSH
7142: PPUSH
7143: PPUSH
7144: PPUSH
// ComMoveXY ( am_vehs , 136 , 73 ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: LD_INT 136
7152: PPUSH
7153: LD_INT 73
7155: PPUSH
7156: CALL_OW 111
// AddComMoveXY ( am_vehs , 131 , 49 ) ;
7160: LD_VAR 0 1
7164: PPUSH
7165: LD_INT 131
7167: PPUSH
7168: LD_INT 49
7170: PPUSH
7171: CALL_OW 171
// Wait ( 0 0$30 ) ;
7175: LD_INT 1050
7177: PPUSH
7178: CALL_OW 67
// repeat begin for i = 1 to am_vehs do
7182: LD_ADDR_VAR 0 4
7186: PUSH
7187: DOUBLE
7188: LD_INT 1
7190: DEC
7191: ST_TO_ADDR
7192: LD_VAR 0 1
7196: PUSH
7197: FOR_TO
7198: IFFALSE 7306
// begin ar_units := FilterAllUnits ( [ f_side , 2 ] ) ;
7200: LD_ADDR_VAR 0 5
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: ST_TO_ADDR
// e := NearestUnitToUnit ( ar_units , am_vehs [ i ] ) ;
7220: LD_ADDR_VAR 0 6
7224: PUSH
7225: LD_VAR 0 5
7229: PPUSH
7230: LD_VAR 0 1
7234: PUSH
7235: LD_VAR 0 4
7239: ARRAY
7240: PPUSH
7241: CALL_OW 74
7245: ST_TO_ADDR
// if not HasTask ( am_vehs [ i ] ) and e then
7246: LD_VAR 0 1
7250: PUSH
7251: LD_VAR 0 4
7255: ARRAY
7256: PPUSH
7257: CALL_OW 314
7261: NOT
7262: PUSH
7263: LD_VAR 0 6
7267: AND
7268: IFFALSE 7304
// begin Attack ( am_vehs [ i ] , 2 , [ 132 , 12 ] , [ empty_buildings ] ) ;
7270: LD_VAR 0 1
7274: PUSH
7275: LD_VAR 0 4
7279: ARRAY
7280: PPUSH
7281: LD_INT 2
7283: PPUSH
7284: LD_INT 132
7286: PUSH
7287: LD_INT 12
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PPUSH
7294: LD_STRING empty_buildings
7296: PUSH
7297: EMPTY
7298: LIST
7299: PPUSH
7300: CALL 16676 0 4
// end ; end ;
7304: GO 7197
7306: POP
7307: POP
// Wait ( 0 0$02 ) ;
7308: LD_INT 70
7310: PPUSH
7311: CALL_OW 67
// end until am_vehs = 0 ;
7315: LD_VAR 0 1
7319: PUSH
7320: LD_INT 0
7322: EQUAL
7323: IFFALSE 7182
// end ;
7325: LD_VAR 0 2
7329: RET
// export for_sol ; export function SendPatrol ; var un , i ; begin
7330: LD_INT 0
7332: PPUSH
7333: PPUSH
7334: PPUSH
// for_sol = [ ] ;
7335: LD_ADDR_EXP 57
7339: PUSH
7340: EMPTY
7341: ST_TO_ADDR
// uc_side = 1 ;
7342: LD_ADDR_OWVAR 20
7346: PUSH
7347: LD_INT 1
7349: ST_TO_ADDR
// uc_nation = 1 ;
7350: LD_ADDR_OWVAR 21
7354: PUSH
7355: LD_INT 1
7357: ST_TO_ADDR
// for i = 1 to diff_patrol do
7358: LD_ADDR_VAR 0 3
7362: PUSH
7363: DOUBLE
7364: LD_INT 1
7366: DEC
7367: ST_TO_ADDR
7368: LD_EXP 48
7372: PUSH
7373: FOR_TO
7374: IFFALSE 7521
// begin hc_name =  ;
7376: LD_ADDR_OWVAR 26
7380: PUSH
7381: LD_STRING 
7383: ST_TO_ADDR
// hc_gallery =  ;
7384: LD_ADDR_OWVAR 33
7388: PUSH
7389: LD_STRING 
7391: ST_TO_ADDR
// hc_skills = [ Rand ( 3 , 7 ) , Rand ( 0 , 3 ) , Rand ( 0 , 5 ) , Rand ( 1 , 2 ) ] ;
7392: LD_ADDR_OWVAR 31
7396: PUSH
7397: LD_INT 3
7399: PPUSH
7400: LD_INT 7
7402: PPUSH
7403: CALL_OW 12
7407: PUSH
7408: LD_INT 0
7410: PPUSH
7411: LD_INT 3
7413: PPUSH
7414: CALL_OW 12
7418: PUSH
7419: LD_INT 0
7421: PPUSH
7422: LD_INT 5
7424: PPUSH
7425: CALL_OW 12
7429: PUSH
7430: LD_INT 1
7432: PPUSH
7433: LD_INT 2
7435: PPUSH
7436: CALL_OW 12
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: ST_TO_ADDR
// hc_attr = [ 10 , Rand ( 11 , 12 ) ] ;
7447: LD_ADDR_OWVAR 29
7451: PUSH
7452: LD_INT 10
7454: PUSH
7455: LD_INT 11
7457: PPUSH
7458: LD_INT 12
7460: PPUSH
7461: CALL_OW 12
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// hc_class = 1 ;
7470: LD_ADDR_OWVAR 28
7474: PUSH
7475: LD_INT 1
7477: ST_TO_ADDR
// un = CreateHuman ;
7478: LD_ADDR_VAR 0 2
7482: PUSH
7483: CALL_OW 44
7487: ST_TO_ADDR
// PlaceUnitArea ( un , forest_area , false ) ;
7488: LD_VAR 0 2
7492: PPUSH
7493: LD_INT 7
7495: PPUSH
7496: LD_INT 0
7498: PPUSH
7499: CALL_OW 49
// for_sol = for_sol ^ un ;
7503: LD_ADDR_EXP 57
7507: PUSH
7508: LD_EXP 57
7512: PUSH
7513: LD_VAR 0 2
7517: ADD
7518: ST_TO_ADDR
// end ;
7519: GO 7373
7521: POP
7522: POP
// end ;
7523: LD_VAR 0 1
7527: RET
// function PlaceBunker ; var i , b , a , x , y , d , un ; begin
7528: LD_INT 0
7530: PPUSH
7531: PPUSH
7532: PPUSH
7533: PPUSH
7534: PPUSH
7535: PPUSH
7536: PPUSH
7537: PPUSH
// uc_side = am ;
7538: LD_ADDR_OWVAR 20
7542: PUSH
7543: LD_EXP 33
7547: ST_TO_ADDR
// uc_nation = 1 ;
7548: LD_ADDR_OWVAR 21
7552: PUSH
7553: LD_INT 1
7555: ST_TO_ADDR
// bc_type = 31 ;
7556: LD_ADDR_OWVAR 42
7560: PUSH
7561: LD_INT 31
7563: ST_TO_ADDR
// bc_level = 5 + [ - 1 , 0 , 1 ] [ Difficulty ] ;
7564: LD_ADDR_OWVAR 43
7568: PUSH
7569: LD_INT 5
7571: PUSH
7572: LD_INT 1
7574: NEG
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 1
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: PUSH
7587: LD_OWVAR 67
7591: ARRAY
7592: PLUS
7593: ST_TO_ADDR
// a := 0 ;
7594: LD_ADDR_VAR 0 4
7598: PUSH
7599: LD_INT 0
7601: ST_TO_ADDR
// x := [ 164 , 179 , 149 , 158 , 122 , 46 ] ;
7602: LD_ADDR_VAR 0 5
7606: PUSH
7607: LD_INT 164
7609: PUSH
7610: LD_INT 179
7612: PUSH
7613: LD_INT 149
7615: PUSH
7616: LD_INT 158
7618: PUSH
7619: LD_INT 122
7621: PUSH
7622: LD_INT 46
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: ST_TO_ADDR
// y := [ 130 , 164 , 87 , 135 , 20 , 58 ] ;
7633: LD_ADDR_VAR 0 6
7637: PUSH
7638: LD_INT 130
7640: PUSH
7641: LD_INT 164
7643: PUSH
7644: LD_INT 87
7646: PUSH
7647: LD_INT 135
7649: PUSH
7650: LD_INT 20
7652: PUSH
7653: LD_INT 58
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: ST_TO_ADDR
// if Difficulty = 1 then
7664: LD_OWVAR 67
7668: PUSH
7669: LD_INT 1
7671: EQUAL
7672: IFFALSE 7676
// begin exit ;
7674: GO 8256
// end ; if Difficulty = 2 then
7676: LD_OWVAR 67
7680: PUSH
7681: LD_INT 2
7683: EQUAL
7684: IFFALSE 7962
// begin repeat begin b = CreateBuilding ;
7686: LD_ADDR_VAR 0 3
7690: PUSH
7691: CALL_OW 46
7695: ST_TO_ADDR
// PlaceUnitXY ( b , x [ a ] , y [ a ] , false ) ;
7696: LD_VAR 0 3
7700: PPUSH
7701: LD_VAR 0 5
7705: PUSH
7706: LD_VAR 0 4
7710: ARRAY
7711: PPUSH
7712: LD_VAR 0 6
7716: PUSH
7717: LD_VAR 0 4
7721: ARRAY
7722: PPUSH
7723: LD_INT 0
7725: PPUSH
7726: CALL_OW 48
// hc_class = 1 ;
7730: LD_ADDR_OWVAR 28
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// hc_skills = [ DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 1 , 1 ) , DSkill + Rand ( - 3 , 1 ) ] ;
7738: LD_ADDR_OWVAR 31
7742: PUSH
7743: LD_EXP 53
7747: PUSH
7748: LD_INT 3
7750: NEG
7751: PPUSH
7752: LD_INT 1
7754: PPUSH
7755: CALL_OW 12
7759: PLUS
7760: PUSH
7761: LD_EXP 53
7765: PUSH
7766: LD_INT 3
7768: NEG
7769: PPUSH
7770: LD_INT 1
7772: PPUSH
7773: CALL_OW 12
7777: PLUS
7778: PUSH
7779: LD_EXP 53
7783: PUSH
7784: LD_INT 1
7786: NEG
7787: PPUSH
7788: LD_INT 1
7790: PPUSH
7791: CALL_OW 12
7795: PLUS
7796: PUSH
7797: LD_EXP 53
7801: PUSH
7802: LD_INT 3
7804: NEG
7805: PPUSH
7806: LD_INT 1
7808: PPUSH
7809: CALL_OW 12
7813: PLUS
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: ST_TO_ADDR
// hc_gallery =  ;
7821: LD_ADDR_OWVAR 33
7825: PUSH
7826: LD_STRING 
7828: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
7829: LD_ADDR_OWVAR 29
7833: PUSH
7834: LD_INT 8
7836: PPUSH
7837: LD_INT 12
7839: PPUSH
7840: CALL_OW 12
7844: PUSH
7845: LD_INT 9
7847: PPUSH
7848: LD_INT 11
7850: PPUSH
7851: CALL_OW 12
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
7860: LD_ADDR_OWVAR 27
7864: PUSH
7865: LD_INT 1
7867: PPUSH
7868: LD_INT 2
7870: PPUSH
7871: CALL_OW 12
7875: ST_TO_ADDR
// un = CreateHuman ;
7876: LD_ADDR_VAR 0 8
7880: PUSH
7881: CALL_OW 44
7885: ST_TO_ADDR
// PlaceUnitXY ( un , x [ a ] + 3 , y [ a ] , false ) ;
7886: LD_VAR 0 8
7890: PPUSH
7891: LD_VAR 0 5
7895: PUSH
7896: LD_VAR 0 4
7900: ARRAY
7901: PUSH
7902: LD_INT 3
7904: PLUS
7905: PPUSH
7906: LD_VAR 0 6
7910: PUSH
7911: LD_VAR 0 4
7915: ARRAY
7916: PPUSH
7917: LD_INT 0
7919: PPUSH
7920: CALL_OW 48
// ComEnterUnit ( un , b ) ;
7924: LD_VAR 0 8
7928: PPUSH
7929: LD_VAR 0 3
7933: PPUSH
7934: CALL_OW 120
// a = a + 1 ;
7938: LD_ADDR_VAR 0 4
7942: PUSH
7943: LD_VAR 0 4
7947: PUSH
7948: LD_INT 1
7950: PLUS
7951: ST_TO_ADDR
// end until a = 3 ;
7952: LD_VAR 0 4
7956: PUSH
7957: LD_INT 3
7959: EQUAL
7960: IFFALSE 7686
// end ; if Difficulty = 3 then
7962: LD_OWVAR 67
7966: PUSH
7967: LD_INT 3
7969: EQUAL
7970: IFFALSE 8256
// begin repeat begin b = CreateBuilding ;
7972: LD_ADDR_VAR 0 3
7976: PUSH
7977: CALL_OW 46
7981: ST_TO_ADDR
// PlaceUnitXY ( b , x [ a ] , y [ a ] , false ) ;
7982: LD_VAR 0 3
7986: PPUSH
7987: LD_VAR 0 5
7991: PUSH
7992: LD_VAR 0 4
7996: ARRAY
7997: PPUSH
7998: LD_VAR 0 6
8002: PUSH
8003: LD_VAR 0 4
8007: ARRAY
8008: PPUSH
8009: LD_INT 0
8011: PPUSH
8012: CALL_OW 48
// hc_class = 1 ;
8016: LD_ADDR_OWVAR 28
8020: PUSH
8021: LD_INT 1
8023: ST_TO_ADDR
// hc_skills = [ DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 3 , 1 ) , DSkill + Rand ( - 1 , 1 ) , DSkill + Rand ( - 3 , 1 ) ] ;
8024: LD_ADDR_OWVAR 31
8028: PUSH
8029: LD_EXP 53
8033: PUSH
8034: LD_INT 3
8036: NEG
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: CALL_OW 12
8045: PLUS
8046: PUSH
8047: LD_EXP 53
8051: PUSH
8052: LD_INT 3
8054: NEG
8055: PPUSH
8056: LD_INT 1
8058: PPUSH
8059: CALL_OW 12
8063: PLUS
8064: PUSH
8065: LD_EXP 53
8069: PUSH
8070: LD_INT 1
8072: NEG
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: CALL_OW 12
8081: PLUS
8082: PUSH
8083: LD_EXP 53
8087: PUSH
8088: LD_INT 3
8090: NEG
8091: PPUSH
8092: LD_INT 1
8094: PPUSH
8095: CALL_OW 12
8099: PLUS
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: ST_TO_ADDR
// hc_name =  ;
8107: LD_ADDR_OWVAR 26
8111: PUSH
8112: LD_STRING 
8114: ST_TO_ADDR
// hc_gallery =  ;
8115: LD_ADDR_OWVAR 33
8119: PUSH
8120: LD_STRING 
8122: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
8123: LD_ADDR_OWVAR 29
8127: PUSH
8128: LD_INT 8
8130: PPUSH
8131: LD_INT 12
8133: PPUSH
8134: CALL_OW 12
8138: PUSH
8139: LD_INT 9
8141: PPUSH
8142: LD_INT 11
8144: PPUSH
8145: CALL_OW 12
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
8154: LD_ADDR_OWVAR 27
8158: PUSH
8159: LD_INT 1
8161: PPUSH
8162: LD_INT 2
8164: PPUSH
8165: CALL_OW 12
8169: ST_TO_ADDR
// un = CreateHuman ;
8170: LD_ADDR_VAR 0 8
8174: PUSH
8175: CALL_OW 44
8179: ST_TO_ADDR
// PlaceUnitXY ( un , x [ a ] + 3 , y [ a ] , false ) ;
8180: LD_VAR 0 8
8184: PPUSH
8185: LD_VAR 0 5
8189: PUSH
8190: LD_VAR 0 4
8194: ARRAY
8195: PUSH
8196: LD_INT 3
8198: PLUS
8199: PPUSH
8200: LD_VAR 0 6
8204: PUSH
8205: LD_VAR 0 4
8209: ARRAY
8210: PPUSH
8211: LD_INT 0
8213: PPUSH
8214: CALL_OW 48
// ComEnterUnit ( un , b ) ;
8218: LD_VAR 0 8
8222: PPUSH
8223: LD_VAR 0 3
8227: PPUSH
8228: CALL_OW 120
// a = a + 1 ;
8232: LD_ADDR_VAR 0 4
8236: PUSH
8237: LD_VAR 0 4
8241: PUSH
8242: LD_INT 1
8244: PLUS
8245: ST_TO_ADDR
// end until a = 5 ;
8246: LD_VAR 0 4
8250: PUSH
8251: LD_INT 5
8253: EQUAL
8254: IFFALSE 7972
// end ; end ;
8256: LD_VAR 0 1
8260: RET
// every 0 0$01 trigger for_sol = diff_patrol do
8261: LD_EXP 57
8265: PUSH
8266: LD_EXP 48
8270: EQUAL
8271: IFFALSE 8456
8273: GO 8275
8275: DISABLE
// begin if AmerikaAttack = false then
8276: LD_EXP 1
8280: PUSH
8281: LD_INT 0
8283: EQUAL
8284: IFFALSE 8425
// begin enable ;
8286: ENABLE
// AddComMoveToArea ( for_sol [ 1 ] , fa1 ) ;
8287: LD_EXP 57
8291: PUSH
8292: LD_INT 1
8294: ARRAY
8295: PPUSH
8296: LD_INT 8
8298: PPUSH
8299: CALL_OW 173
// AddComMoveToArea ( for_sol [ 1 ] , forest_area ) ;
8303: LD_EXP 57
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: LD_INT 7
8314: PPUSH
8315: CALL_OW 173
// AddComMoveToArea ( for_sol [ 2 ] , fa2 ) ;
8319: LD_EXP 57
8323: PUSH
8324: LD_INT 2
8326: ARRAY
8327: PPUSH
8328: LD_INT 9
8330: PPUSH
8331: CALL_OW 173
// AddComMoveToArea ( for_sol [ 2 ] , forest_area ) ;
8335: LD_EXP 57
8339: PUSH
8340: LD_INT 2
8342: ARRAY
8343: PPUSH
8344: LD_INT 7
8346: PPUSH
8347: CALL_OW 173
// AddComMoveToArea ( for_sol [ 3 ] , fa3 ) ;
8351: LD_EXP 57
8355: PUSH
8356: LD_INT 3
8358: ARRAY
8359: PPUSH
8360: LD_INT 10
8362: PPUSH
8363: CALL_OW 173
// AddComMoveToArea ( for_sol [ 3 ] , forest_area ) ;
8367: LD_EXP 57
8371: PUSH
8372: LD_INT 3
8374: ARRAY
8375: PPUSH
8376: LD_INT 7
8378: PPUSH
8379: CALL_OW 173
// if for_sol > 3 then
8383: LD_EXP 57
8387: PUSH
8388: LD_INT 3
8390: GREATER
8391: IFFALSE 8425
// begin AddComMoveToArea ( for_sol [ 4 ] , fa4 ) ;
8393: LD_EXP 57
8397: PUSH
8398: LD_INT 4
8400: ARRAY
8401: PPUSH
8402: LD_INT 11
8404: PPUSH
8405: CALL_OW 173
// AddComMoveToArea ( for_sol [ 4 ] , forest_area ) ;
8409: LD_EXP 57
8413: PUSH
8414: LD_INT 4
8416: ARRAY
8417: PPUSH
8418: LD_INT 7
8420: PPUSH
8421: CALL_OW 173
// end ; end ; if AmerikaAttack = true then
8425: LD_EXP 1
8429: PUSH
8430: LD_INT 1
8432: EQUAL
8433: IFFALSE 8456
// begin ComStop ( for_sol ) ;
8435: LD_EXP 57
8439: PPUSH
8440: CALL_OW 141
// AddComEnterUnit ( for_sol , am_dep2 ) ;
8444: LD_EXP 57
8448: PPUSH
8449: LD_INT 52
8451: PPUSH
8452: CALL_OW 180
// end ; end ;
8456: END
// export function PrepareConvoyA ; var un , veh ; begin
8457: LD_INT 0
8459: PPUSH
8460: PPUSH
8461: PPUSH
// uc_side = am ;
8462: LD_ADDR_OWVAR 20
8466: PUSH
8467: LD_EXP 33
8471: ST_TO_ADDR
// uc_nation = 1 ;
8472: LD_ADDR_OWVAR 21
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
8480: LD_ADDR_OWVAR 37
8484: PUSH
8485: LD_INT 2
8487: ST_TO_ADDR
// vc_engine = engine_combustion ;
8488: LD_ADDR_OWVAR 39
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
// vc_control = control_manual ;
8496: LD_ADDR_OWVAR 38
8500: PUSH
8501: LD_INT 1
8503: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
8504: LD_ADDR_OWVAR 40
8508: PUSH
8509: LD_INT 12
8511: ST_TO_ADDR
// veh = CreateVehicle ;
8512: LD_ADDR_VAR 0 3
8516: PUSH
8517: CALL_OW 45
8521: ST_TO_ADDR
// PlaceUnitXYR ( veh , 180 , 87 , 4 , false ) ;
8522: LD_VAR 0 3
8526: PPUSH
8527: LD_INT 180
8529: PPUSH
8530: LD_INT 87
8532: PPUSH
8533: LD_INT 4
8535: PPUSH
8536: LD_INT 0
8538: PPUSH
8539: CALL_OW 50
// SetCargo ( veh , mat_cans , 100 ) ;
8543: LD_VAR 0 3
8547: PPUSH
8548: LD_INT 1
8550: PPUSH
8551: LD_INT 100
8553: PPUSH
8554: CALL_OW 290
// hc_class = 3 ;
8558: LD_ADDR_OWVAR 28
8562: PUSH
8563: LD_INT 3
8565: ST_TO_ADDR
// hc_gallery =  ;
8566: LD_ADDR_OWVAR 33
8570: PUSH
8571: LD_STRING 
8573: ST_TO_ADDR
// hc_name =  ;
8574: LD_ADDR_OWVAR 26
8578: PUSH
8579: LD_STRING 
8581: ST_TO_ADDR
// un = CreateHuman ;
8582: LD_ADDR_VAR 0 2
8586: PUSH
8587: CALL_OW 44
8591: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8592: LD_VAR 0 2
8596: PPUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: CALL_OW 52
// Wait ( 1 ) ;
8606: LD_INT 1
8608: PPUSH
8609: CALL_OW 67
// ComMoveXY ( un , 162 , 85 ) ;
8613: LD_VAR 0 2
8617: PPUSH
8618: LD_INT 162
8620: PPUSH
8621: LD_INT 85
8623: PPUSH
8624: CALL_OW 111
// AddComExitVehicle ( un ) ;
8628: LD_VAR 0 2
8632: PPUSH
8633: CALL_OW 181
// AddComMoveXY ( un , 169 , 94 ) ;
8637: LD_VAR 0 2
8641: PPUSH
8642: LD_INT 169
8644: PPUSH
8645: LD_INT 94
8647: PPUSH
8648: CALL_OW 171
// AddComTurnXY ( un , 170 , 95 ) ;
8652: LD_VAR 0 2
8656: PPUSH
8657: LD_INT 170
8659: PPUSH
8660: LD_INT 95
8662: PPUSH
8663: CALL_OW 178
// AddComWait ( un , 0 0$10 ) ;
8667: LD_VAR 0 2
8671: PPUSH
8672: LD_INT 350
8674: PPUSH
8675: CALL_OW 202
// if GetSide ( veh ) = 1 then
8679: LD_VAR 0 3
8683: PPUSH
8684: CALL_OW 255
8688: PUSH
8689: LD_INT 1
8691: EQUAL
8692: IFFALSE 8725
// begin AddComEnterUnit ( un , veh ) ;
8694: LD_VAR 0 2
8698: PPUSH
8699: LD_VAR 0 3
8703: PPUSH
8704: CALL_OW 180
// AddComMoveXY ( un , 95 , 61 ) end else
8708: LD_VAR 0 2
8712: PPUSH
8713: LD_INT 95
8715: PPUSH
8716: LD_INT 61
8718: PPUSH
8719: CALL_OW 171
8723: GO 8791
// begin ComMoveXY ( un , 162 , 85 ) ;
8725: LD_VAR 0 2
8729: PPUSH
8730: LD_INT 162
8732: PPUSH
8733: LD_INT 85
8735: PPUSH
8736: CALL_OW 111
// AddComWait ( un , 0 0$10 ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_INT 350
8747: PPUSH
8748: CALL_OW 202
// AddComMoveXY ( un , 95 , 61 ) ;
8752: LD_VAR 0 2
8756: PPUSH
8757: LD_INT 95
8759: PPUSH
8760: LD_INT 61
8762: PPUSH
8763: CALL_OW 171
// VehGone = true ;
8767: LD_ADDR_EXP 13
8771: PUSH
8772: LD_INT 1
8774: ST_TO_ADDR
// Wait ( 0 0$20 ) ;
8775: LD_INT 700
8777: PPUSH
8778: CALL_OW 67
// RemoveUnit ( un ) ;
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 64
// end ; end ;
8791: LD_VAR 0 1
8795: RET
// export Convoy ; export function PrepareConvoyB ; var i , un , veh ; begin
8796: LD_INT 0
8798: PPUSH
8799: PPUSH
8800: PPUSH
8801: PPUSH
// uc_side = 4 ;
8802: LD_ADDR_OWVAR 20
8806: PUSH
8807: LD_INT 4
8809: ST_TO_ADDR
// uc_nation = 1 ;
8810: LD_ADDR_OWVAR 21
8814: PUSH
8815: LD_INT 1
8817: ST_TO_ADDR
// Convoy = [ ] ;
8818: LD_ADDR_EXP 58
8822: PUSH
8823: EMPTY
8824: ST_TO_ADDR
// for i = 1 to 2 do
8825: LD_ADDR_VAR 0 2
8829: PUSH
8830: DOUBLE
8831: LD_INT 1
8833: DEC
8834: ST_TO_ADDR
8835: LD_INT 2
8837: PUSH
8838: FOR_TO
8839: IFFALSE 9015
// begin vc_chassis = us_medium_wheeled ;
8841: LD_ADDR_OWVAR 37
8845: PUSH
8846: LD_INT 2
8848: ST_TO_ADDR
// vc_engine = engine_combustion ;
8849: LD_ADDR_OWVAR 39
8853: PUSH
8854: LD_INT 1
8856: ST_TO_ADDR
// vc_control = control_manual ;
8857: LD_ADDR_OWVAR 38
8861: PUSH
8862: LD_INT 1
8864: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
8865: LD_ADDR_OWVAR 40
8869: PUSH
8870: LD_INT 12
8872: ST_TO_ADDR
// veh = CreateVehicle ;
8873: LD_ADDR_VAR 0 4
8877: PUSH
8878: CALL_OW 45
8882: ST_TO_ADDR
// PlaceUnitArea ( veh , ConvoySpawn , false ) ;
8883: LD_VAR 0 4
8887: PPUSH
8888: LD_INT 22
8890: PPUSH
8891: LD_INT 0
8893: PPUSH
8894: CALL_OW 49
// Convoy = Convoy ^ veh ;
8898: LD_ADDR_EXP 58
8902: PUSH
8903: LD_EXP 58
8907: PUSH
8908: LD_VAR 0 4
8912: ADD
8913: ST_TO_ADDR
// SetCargo ( veh , Rand ( mat_cans , mat_oil ) , 100 ) ;
8914: LD_VAR 0 4
8918: PPUSH
8919: LD_INT 1
8921: PPUSH
8922: LD_INT 2
8924: PPUSH
8925: CALL_OW 12
8929: PPUSH
8930: LD_INT 100
8932: PPUSH
8933: CALL_OW 290
// SetDir ( veh , 4 ) ;
8937: LD_VAR 0 4
8941: PPUSH
8942: LD_INT 4
8944: PPUSH
8945: CALL_OW 233
// hc_class = 3 ;
8949: LD_ADDR_OWVAR 28
8953: PUSH
8954: LD_INT 3
8956: ST_TO_ADDR
// hc_gallery =  ;
8957: LD_ADDR_OWVAR 33
8961: PUSH
8962: LD_STRING 
8964: ST_TO_ADDR
// hc_name =  ;
8965: LD_ADDR_OWVAR 26
8969: PUSH
8970: LD_STRING 
8972: ST_TO_ADDR
// un = CreateHuman ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: CALL_OW 44
8982: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8983: LD_VAR 0 3
8987: PPUSH
8988: LD_VAR 0 4
8992: PPUSH
8993: CALL_OW 52
// Convoy = Convoy ^ un ;
8997: LD_ADDR_EXP 58
9001: PUSH
9002: LD_EXP 58
9006: PUSH
9007: LD_VAR 0 3
9011: ADD
9012: ST_TO_ADDR
// end ;
9013: GO 8838
9015: POP
9016: POP
// for i = 1 to 3 do
9017: LD_ADDR_VAR 0 2
9021: PUSH
9022: DOUBLE
9023: LD_INT 1
9025: DEC
9026: ST_TO_ADDR
9027: LD_INT 3
9029: PUSH
9030: FOR_TO
9031: IFFALSE 9192
// begin vc_chassis = us_medium_wheeled ;
9033: LD_ADDR_OWVAR 37
9037: PUSH
9038: LD_INT 2
9040: ST_TO_ADDR
// vc_engine = engine_combustion ;
9041: LD_ADDR_OWVAR 39
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// vc_control = control_manual ;
9049: LD_ADDR_OWVAR 38
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// vc_weapon = Rand ( us_machine_gun , us_light_gun ) ;
9057: LD_ADDR_OWVAR 40
9061: PUSH
9062: LD_INT 2
9064: PPUSH
9065: LD_INT 3
9067: PPUSH
9068: CALL_OW 12
9072: ST_TO_ADDR
// veh = CreateVehicle ;
9073: LD_ADDR_VAR 0 4
9077: PUSH
9078: CALL_OW 45
9082: ST_TO_ADDR
// PlaceUnitArea ( veh , ConvoySpawn , false ) ;
9083: LD_VAR 0 4
9087: PPUSH
9088: LD_INT 22
9090: PPUSH
9091: LD_INT 0
9093: PPUSH
9094: CALL_OW 49
// Convoy = Convoy ^ veh ;
9098: LD_ADDR_EXP 58
9102: PUSH
9103: LD_EXP 58
9107: PUSH
9108: LD_VAR 0 4
9112: ADD
9113: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9114: LD_VAR 0 4
9118: PPUSH
9119: LD_INT 4
9121: PPUSH
9122: CALL_OW 233
// hc_class = 3 ;
9126: LD_ADDR_OWVAR 28
9130: PUSH
9131: LD_INT 3
9133: ST_TO_ADDR
// hc_gallery =  ;
9134: LD_ADDR_OWVAR 33
9138: PUSH
9139: LD_STRING 
9141: ST_TO_ADDR
// hc_name =  ;
9142: LD_ADDR_OWVAR 26
9146: PUSH
9147: LD_STRING 
9149: ST_TO_ADDR
// un = CreateHuman ;
9150: LD_ADDR_VAR 0 3
9154: PUSH
9155: CALL_OW 44
9159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9160: LD_VAR 0 3
9164: PPUSH
9165: LD_VAR 0 4
9169: PPUSH
9170: CALL_OW 52
// Convoy = Convoy ^ un ;
9174: LD_ADDR_EXP 58
9178: PUSH
9179: LD_EXP 58
9183: PUSH
9184: LD_VAR 0 3
9188: ADD
9189: ST_TO_ADDR
// end ;
9190: GO 9030
9192: POP
9193: POP
// Wait ( 1 ) ;
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 67
// ComAgressiveMove ( Convoy , 91 , 58 ) ;
9201: LD_EXP 58
9205: PPUSH
9206: LD_INT 91
9208: PPUSH
9209: LD_INT 58
9211: PPUSH
9212: CALL_OW 114
// end ;
9216: LD_VAR 0 1
9220: RET
// every 0 0$01 do var un ;
9221: GO 9223
9223: DISABLE
9224: LD_INT 0
9226: PPUSH
// begin enable ;
9227: ENABLE
// for un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_inarea , AmBase ] ] ) do
9228: LD_ADDR_VAR 0 1
9232: PUSH
9233: LD_INT 22
9235: PUSH
9236: LD_INT 4
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: LD_INT 95
9245: PUSH
9246: LD_INT 3
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 69
9261: PUSH
9262: FOR_IN
9263: IFFALSE 9283
// begin Wait ( 0 0$07 ) ;
9265: LD_INT 245
9267: PPUSH
9268: CALL_OW 67
// RemoveUnit ( un ) ;
9272: LD_VAR 0 1
9276: PPUSH
9277: CALL_OW 64
// end ;
9281: GO 9262
9283: POP
9284: POP
// end ;
9285: PPOPN 1
9287: END
// every 22 22$00 do var bull ;
9288: GO 9290
9290: DISABLE
9291: LD_INT 0
9293: PPUSH
// begin uc_side := 1 ;
9294: LD_ADDR_OWVAR 20
9298: PUSH
9299: LD_INT 1
9301: ST_TO_ADDR
// uc_nation := 1 ;
9302: LD_ADDR_OWVAR 21
9306: PUSH
9307: LD_INT 1
9309: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
9310: LD_ADDR_OWVAR 37
9314: PUSH
9315: LD_INT 4
9317: ST_TO_ADDR
// vc_engine := engine_combustion ;
9318: LD_ADDR_OWVAR 39
9322: PUSH
9323: LD_INT 1
9325: ST_TO_ADDR
// vc_control := control_remote ;
9326: LD_ADDR_OWVAR 38
9330: PUSH
9331: LD_INT 2
9333: ST_TO_ADDR
// vc_weapon := us_bulldozer ;
9334: LD_ADDR_OWVAR 40
9338: PUSH
9339: LD_INT 14
9341: ST_TO_ADDR
// bull := CreateVehicle ;
9342: LD_ADDR_VAR 0 1
9346: PUSH
9347: CALL_OW 45
9351: ST_TO_ADDR
// PlaceUnitXY ( bull , 56 , 21 , false ) ;
9352: LD_VAR 0 1
9356: PPUSH
9357: LD_INT 56
9359: PPUSH
9360: LD_INT 21
9362: PPUSH
9363: LD_INT 0
9365: PPUSH
9366: CALL_OW 48
// Wait ( 0 0$03 ) ;
9370: LD_INT 105
9372: PPUSH
9373: CALL_OW 67
// CutTreeInArea ( bull , cut1 ) ;
9377: LD_VAR 0 1
9381: PPUSH
9382: LD_INT 25
9384: PPUSH
9385: CALL 17564 0 2
// repeat begin if not HasTask ( bull ) then
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL_OW 314
9398: NOT
9399: IFFALSE 9413
// CutTreeInArea ( bull , cut1 ) ;
9401: LD_VAR 0 1
9405: PPUSH
9406: LD_INT 25
9408: PPUSH
9409: CALL 17564 0 2
// Wait ( 0 0$01 ) ;
9413: LD_INT 35
9415: PPUSH
9416: CALL_OW 67
// end until ListEnvironmentArea ( cut1 ) = 0 ;
9420: LD_INT 25
9422: PPUSH
9423: CALL_OW 353
9427: PUSH
9428: LD_INT 0
9430: EQUAL
9431: IFFALSE 9389
// repeat begin if not HasTask ( bull ) then
9433: LD_VAR 0 1
9437: PPUSH
9438: CALL_OW 314
9442: NOT
9443: IFFALSE 9457
// CutTreeInArea ( bull , cut2 ) ;
9445: LD_VAR 0 1
9449: PPUSH
9450: LD_INT 26
9452: PPUSH
9453: CALL 17564 0 2
// Wait ( 0 0$01 ) ;
9457: LD_INT 35
9459: PPUSH
9460: CALL_OW 67
// end until ListEnvironmentArea ( cut2 ) = 0 ;
9464: LD_INT 26
9466: PPUSH
9467: CALL_OW 353
9471: PUSH
9472: LD_INT 0
9474: EQUAL
9475: IFFALSE 9433
// ComMoveXY ( bull , 99 , 65 ) ;
9477: LD_VAR 0 1
9481: PPUSH
9482: LD_INT 99
9484: PPUSH
9485: LD_INT 65
9487: PPUSH
9488: CALL_OW 111
// Wait ( 0 0$30 ) ;
9492: LD_INT 1050
9494: PPUSH
9495: CALL_OW 67
// SetFuel ( bull , 100 ) ;
9499: LD_VAR 0 1
9503: PPUSH
9504: LD_INT 100
9506: PPUSH
9507: CALL_OW 240
// CutTreeInArea ( bull , cut3 ) ;
9511: LD_VAR 0 1
9515: PPUSH
9516: LD_INT 27
9518: PPUSH
9519: CALL 17564 0 2
// repeat begin Wait ( 0 0$01 ) ;
9523: LD_INT 35
9525: PPUSH
9526: CALL_OW 67
// if not HasTask ( bull ) then
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 314
9539: NOT
9540: IFFALSE 9554
// CutTreeInArea ( bull , cut3 ) ;
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 27
9549: PPUSH
9550: CALL 17564 0 2
// end until ListEnvironmentArea ( cut3 ) = 0 ;
9554: LD_INT 27
9556: PPUSH
9557: CALL_OW 353
9561: PUSH
9562: LD_INT 0
9564: EQUAL
9565: IFFALSE 9523
// ComAttackUnit ( bull , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 5 ] ) , bull ) ) ;
9567: LD_VAR 0 1
9571: PPUSH
9572: LD_INT 22
9574: PUSH
9575: LD_INT 5
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PPUSH
9582: CALL_OW 69
9586: PPUSH
9587: LD_VAR 0 1
9591: PPUSH
9592: CALL_OW 74
9596: PPUSH
9597: CALL_OW 115
// end ; end_of_file
9601: PPOPN 1
9603: END
// export function SetMovie ; begin
9604: LD_INT 0
9606: PPUSH
// ChangeSideFog ( 2 , 5 ) ;
9607: LD_INT 2
9609: PPUSH
9610: LD_INT 5
9612: PPUSH
9613: CALL_OW 343
// CenterNowOnUnits ( Louis ) ;
9617: LD_EXP 19
9621: PPUSH
9622: CALL_OW 87
// InGameOn ;
9626: CALL_OW 8
// PlaceSeeing ( 134 , 12 , 2 , 5 ) ;
9630: LD_INT 134
9632: PPUSH
9633: LD_INT 12
9635: PPUSH
9636: LD_INT 2
9638: PPUSH
9639: LD_INT 5
9641: PPUSH
9642: CALL_OW 330
// RemoveSeeing ( 134 , 12 , 2 ) ;
9646: LD_INT 134
9648: PPUSH
9649: LD_INT 12
9651: PPUSH
9652: LD_INT 2
9654: PPUSH
9655: CALL_OW 331
// ComMoveXY ( Louis , 94 , 160 ) ;
9659: LD_EXP 19
9663: PPUSH
9664: LD_INT 94
9666: PPUSH
9667: LD_INT 160
9669: PPUSH
9670: CALL_OW 111
// Wait ( 0 0$03 ) ;
9674: LD_INT 105
9676: PPUSH
9677: CALL_OW 67
// ComExitBuilding ( Jan ) ;
9681: LD_EXP 23
9685: PPUSH
9686: CALL_OW 122
// AddComMoveXY ( Jan , 92 , 155 ) ;
9690: LD_EXP 23
9694: PPUSH
9695: LD_INT 92
9697: PPUSH
9698: LD_INT 155
9700: PPUSH
9701: CALL_OW 171
// AddComTurnUnit ( Jan , Louis ) ;
9705: LD_EXP 23
9709: PPUSH
9710: LD_EXP 19
9714: PPUSH
9715: CALL_OW 179
// Wait ( 0 0$05 ) ;
9719: LD_INT 175
9721: PPUSH
9722: CALL_OW 67
// CenterNowOnUnits ( Jan ) ;
9726: LD_EXP 23
9730: PPUSH
9731: CALL_OW 87
// ComExitVehicle ( Louis ) ;
9735: LD_EXP 19
9739: PPUSH
9740: CALL_OW 121
// AddComMoveXY ( Louis , 94 , 156 ) ;
9744: LD_EXP 19
9748: PPUSH
9749: LD_INT 94
9751: PPUSH
9752: LD_INT 156
9754: PPUSH
9755: CALL_OW 171
// AddComTurnUnit ( Louis , Jan ) ;
9759: LD_EXP 19
9763: PPUSH
9764: LD_EXP 23
9768: PPUSH
9769: CALL_OW 179
// Wait ( 0 0$0.3 ) ;
9773: LD_INT 10
9775: PPUSH
9776: CALL_OW 67
// Say ( Louis , DDLc1 ) ;
9780: LD_EXP 19
9784: PPUSH
9785: LD_STRING DDLc1
9787: PPUSH
9788: CALL_OW 88
// Say ( Jan , DDJc1 ) ;
9792: LD_EXP 23
9796: PPUSH
9797: LD_STRING DDJc1
9799: PPUSH
9800: CALL_OW 88
// Say ( Louis , DDLc2 ) ;
9804: LD_EXP 19
9808: PPUSH
9809: LD_STRING DDLc2
9811: PPUSH
9812: CALL_OW 88
// Say ( Jan , DDJc2 ) ;
9816: LD_EXP 23
9820: PPUSH
9821: LD_STRING DDJc2
9823: PPUSH
9824: CALL_OW 88
// Say ( Louis , DDLc3 ) ;
9828: LD_EXP 19
9832: PPUSH
9833: LD_STRING DDLc3
9835: PPUSH
9836: CALL_OW 88
// Say ( Jan , DDJc3 ) ;
9840: LD_EXP 23
9844: PPUSH
9845: LD_STRING DDJc3
9847: PPUSH
9848: CALL_OW 88
// Say ( Louis , DDLc4 ) ;
9852: LD_EXP 19
9856: PPUSH
9857: LD_STRING DDLc4
9859: PPUSH
9860: CALL_OW 88
// Say ( Jan , DDJc4 ) ;
9864: LD_EXP 23
9868: PPUSH
9869: LD_STRING DDJc4
9871: PPUSH
9872: CALL_OW 88
// Say ( Jan , DDJc5 ) ;
9876: LD_EXP 23
9880: PPUSH
9881: LD_STRING DDJc5
9883: PPUSH
9884: CALL_OW 88
// Say ( Louis , DDLc5 ) ;
9888: LD_EXP 19
9892: PPUSH
9893: LD_STRING DDLc5
9895: PPUSH
9896: CALL_OW 88
// Say ( Jan , DDJc6 ) ;
9900: LD_EXP 23
9904: PPUSH
9905: LD_STRING DDJc6
9907: PPUSH
9908: CALL_OW 88
// Say ( Jan , DDJc6a ) ;
9912: LD_EXP 23
9916: PPUSH
9917: LD_STRING DDJc6a
9919: PPUSH
9920: CALL_OW 88
// Say ( Louis , DDLc5a ) ;
9924: LD_EXP 19
9928: PPUSH
9929: LD_STRING DDLc5a
9931: PPUSH
9932: CALL_OW 88
// Say ( Jan , DDJc6b ) ;
9936: LD_EXP 23
9940: PPUSH
9941: LD_STRING DDJc6b
9943: PPUSH
9944: CALL_OW 88
// Say ( Louis , DDLc6 ) ;
9948: LD_EXP 19
9952: PPUSH
9953: LD_STRING DDLc6
9955: PPUSH
9956: CALL_OW 88
// InGameOff ;
9960: CALL_OW 9
// ChangeMissionObjectives ( FindBase ) ;
9964: LD_STRING FindBase
9966: PPUSH
9967: CALL_OW 337
// CameraPlaced ;
9971: CALL 1630 0 0
// Wait ( 0 0$02 ) ;
9975: LD_INT 70
9977: PPUSH
9978: CALL_OW 67
// DialogueOn ;
9982: CALL_OW 6
// Say ( Jan , DDJc7 ) ;
9986: LD_EXP 23
9990: PPUSH
9991: LD_STRING DDJc7
9993: PPUSH
9994: CALL_OW 88
// Say ( Louis , DDLc7 ) ;
9998: LD_EXP 19
10002: PPUSH
10003: LD_STRING DDLc7
10005: PPUSH
10006: CALL_OW 88
// DialogueOff ;
10010: CALL_OW 7
// Wait ( 0 0$01 ) ;
10014: LD_INT 35
10016: PPUSH
10017: CALL_OW 67
// SaveForQuickRestart ;
10021: CALL_OW 22
// Wait ( 0 0$20 ) ;
10025: LD_INT 700
10027: PPUSH
10028: CALL_OW 67
// SetArabianAI ;
10032: CALL 1199 0 0
// SendPatrol ;
10036: CALL 7330 0 0
// end ;
10040: LD_VAR 0 1
10044: RET
// every 0 0$01 trigger IsInArea ( Louis , Base1 ) do
10045: LD_EXP 19
10049: PPUSH
10050: LD_INT 15
10052: PPUSH
10053: CALL_OW 308
10057: IFFALSE 10826
10059: GO 10061
10061: DISABLE
// begin InGameOn ;
10062: CALL_OW 8
// CenterNowOnUnits ( Louis ) ;
10066: LD_EXP 19
10070: PPUSH
10071: CALL_OW 87
// if See ( 2 , Hubert ) then
10075: LD_INT 2
10077: PPUSH
10078: LD_EXP 29
10082: PPUSH
10083: CALL_OW 292
10087: IFFALSE 10121
// begin DialogueOn ;
10089: CALL_OW 6
// Say ( Louis , DDLcb1 ) ;
10093: LD_EXP 19
10097: PPUSH
10098: LD_STRING DDLcb1
10100: PPUSH
10101: CALL_OW 88
// Say ( Hubert , DDHcb1 ) ;
10105: LD_EXP 29
10109: PPUSH
10110: LD_STRING DDHcb1
10112: PPUSH
10113: CALL_OW 88
// DialogueOff ;
10117: CALL_OW 7
// end ; ComMoveXY ( Louis , 139 , 24 ) ;
10121: LD_EXP 19
10125: PPUSH
10126: LD_INT 139
10128: PPUSH
10129: LD_INT 24
10131: PPUSH
10132: CALL_OW 111
// ChangeSideFog ( 2 , 8 ) ;
10136: LD_INT 2
10138: PPUSH
10139: LD_INT 8
10141: PPUSH
10142: CALL_OW 343
// Wait ( 0 0$05 ) ;
10146: LD_INT 175
10148: PPUSH
10149: CALL_OW 67
// PlaceSeeing ( GetX ( Gali ) , GetY ( Gali ) , 2 , 10 ) ;
10153: LD_EXP 26
10157: PPUSH
10158: CALL_OW 250
10162: PPUSH
10163: LD_EXP 26
10167: PPUSH
10168: CALL_OW 251
10172: PPUSH
10173: LD_INT 2
10175: PPUSH
10176: LD_INT 10
10178: PPUSH
10179: CALL_OW 330
// CenterOnUnits ( Gali ) ;
10183: LD_EXP 26
10187: PPUSH
10188: CALL_OW 85
// if IsInUnit ( Louis ) then
10192: LD_EXP 19
10196: PPUSH
10197: CALL_OW 310
10201: IFFALSE 10212
// begin AddComExitVehicle ( Louis ) ;
10203: LD_EXP 19
10207: PPUSH
10208: CALL_OW 181
// end ; AddComMoveXY ( Louis , 139 , 24 ) ;
10212: LD_EXP 19
10216: PPUSH
10217: LD_INT 139
10219: PPUSH
10220: LD_INT 24
10222: PPUSH
10223: CALL_OW 171
// AddComTurnUnit ( Louis , Gali ) ;
10227: LD_EXP 19
10231: PPUSH
10232: LD_EXP 26
10236: PPUSH
10237: CALL_OW 179
// Wait ( 1 ) ;
10241: LD_INT 1
10243: PPUSH
10244: CALL_OW 67
// ComTurnUnit ( Gali , Louis ) ;
10248: LD_EXP 26
10252: PPUSH
10253: LD_EXP 19
10257: PPUSH
10258: CALL_OW 119
// ComTurnUnit ( Mike , Louis ) ;
10262: LD_EXP 27
10266: PPUSH
10267: LD_EXP 19
10271: PPUSH
10272: CALL_OW 119
// Say ( Gali , DDGcb1 ) ;
10276: LD_EXP 26
10280: PPUSH
10281: LD_STRING DDGcb1
10283: PPUSH
10284: CALL_OW 88
// Say ( Louis , DDLcb2 ) ;
10288: LD_EXP 19
10292: PPUSH
10293: LD_STRING DDLcb2
10295: PPUSH
10296: CALL_OW 88
// Say ( Gali , DDGcb2 ) ;
10300: LD_EXP 26
10304: PPUSH
10305: LD_STRING DDGcb2
10307: PPUSH
10308: CALL_OW 88
// Say ( Mike , DDMcb1 ) ;
10312: LD_EXP 27
10316: PPUSH
10317: LD_STRING DDMcb1
10319: PPUSH
10320: CALL_OW 88
// Say ( Louis , DDLcb3 ) ;
10324: LD_EXP 19
10328: PPUSH
10329: LD_STRING DDLcb3
10331: PPUSH
10332: CALL_OW 88
// Say ( Gali , DDGcb3 ) ;
10336: LD_EXP 26
10340: PPUSH
10341: LD_STRING DDGcb3
10343: PPUSH
10344: CALL_OW 88
// Say ( Mike , DDMcb2 ) ;
10348: LD_EXP 27
10352: PPUSH
10353: LD_STRING DDMcb2
10355: PPUSH
10356: CALL_OW 88
// Say ( Gali , DDGcb4 ) ;
10360: LD_EXP 26
10364: PPUSH
10365: LD_STRING DDGcb4
10367: PPUSH
10368: CALL_OW 88
// Say ( Louis , DDLcb3n ) ;
10372: LD_EXP 19
10376: PPUSH
10377: LD_STRING DDLcb3n
10379: PPUSH
10380: CALL_OW 88
// Say ( Mike , DDMcb3 ) ;
10384: LD_EXP 27
10388: PPUSH
10389: LD_STRING DDMcb3
10391: PPUSH
10392: CALL_OW 88
// Say ( Louis , DDLcb4 ) ;
10396: LD_EXP 19
10400: PPUSH
10401: LD_STRING DDLcb4
10403: PPUSH
10404: CALL_OW 88
// Say ( Mike , DDMcb4 ) ;
10408: LD_EXP 27
10412: PPUSH
10413: LD_STRING DDMcb4
10415: PPUSH
10416: CALL_OW 88
// Wait ( 0 0$02 ) ;
10420: LD_INT 70
10422: PPUSH
10423: CALL_OW 67
// ComExitBuilding ( [ Jenna , apeman1 ] ) ;
10427: LD_EXP 28
10431: PUSH
10432: LD_EXP 30
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 122
// ComMoveXY ( [ Jenna , apeman1 ] , GetX ( Louis ) - 3 , GetY ( Louis ) ) ;
10445: LD_EXP 28
10449: PUSH
10450: LD_EXP 30
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: LD_EXP 19
10463: PPUSH
10464: CALL_OW 250
10468: PUSH
10469: LD_INT 3
10471: MINUS
10472: PPUSH
10473: LD_EXP 19
10477: PPUSH
10478: CALL_OW 251
10482: PPUSH
10483: CALL_OW 111
// AddComTurnUnit ( Jenna , Louis ) ;
10487: LD_EXP 28
10491: PPUSH
10492: LD_EXP 19
10496: PPUSH
10497: CALL_OW 179
// ComTurnUnit ( Louis , Jenna ) ;
10501: LD_EXP 19
10505: PPUSH
10506: LD_EXP 28
10510: PPUSH
10511: CALL_OW 119
// Say ( Louis , DDLape1 ) ;
10515: LD_EXP 19
10519: PPUSH
10520: LD_STRING DDLape1
10522: PPUSH
10523: CALL_OW 88
// Say ( Jenna , DDJape1 ) ;
10527: LD_EXP 28
10531: PPUSH
10532: LD_STRING DDJape1
10534: PPUSH
10535: CALL_OW 88
// Say ( Louis , DDLape2 ) ;
10539: LD_EXP 19
10543: PPUSH
10544: LD_STRING DDLape2
10546: PPUSH
10547: CALL_OW 88
// Say ( Jenna , DDJape2 ) ;
10551: LD_EXP 28
10555: PPUSH
10556: LD_STRING DDJape2
10558: PPUSH
10559: CALL_OW 88
// Say ( Louis , DDLape3 ) ;
10563: LD_EXP 19
10567: PPUSH
10568: LD_STRING DDLape3
10570: PPUSH
10571: CALL_OW 88
// InGameOff ;
10575: CALL_OW 9
// ChangeSideFog ( 2 , 5 ) ;
10579: LD_INT 2
10581: PPUSH
10582: LD_INT 5
10584: PPUSH
10585: CALL_OW 343
// if Difficulty = 1 then
10589: LD_OWVAR 67
10593: PUSH
10594: LD_INT 1
10596: EQUAL
10597: IFFALSE 10606
// begin ChangeMissionObjectives ( TransportDiff1 ) ;
10599: LD_STRING TransportDiff1
10601: PPUSH
10602: CALL_OW 337
// end ; if Difficulty = 2 then
10606: LD_OWVAR 67
10610: PUSH
10611: LD_INT 2
10613: EQUAL
10614: IFFALSE 10623
// begin ChangeMissionObjectives ( TransportDiff2 ) ;
10616: LD_STRING TransportDiff2
10618: PPUSH
10619: CALL_OW 337
// end ; if Difficulty = 3 then
10623: LD_OWVAR 67
10627: PUSH
10628: LD_INT 3
10630: EQUAL
10631: IFFALSE 10640
// begin ChangeMissionObjectives ( TransportDiff3 ) ;
10633: LD_STRING TransportDiff3
10635: PPUSH
10636: CALL_OW 337
// end ; CounterStart = true ;
10640: LD_ADDR_EXP 14
10644: PUSH
10645: LD_INT 1
10647: ST_TO_ADDR
// SetAreaMapShow ( crat_coll , 1 ) ;
10648: LD_INT 16
10650: PPUSH
10651: LD_INT 1
10653: PPUSH
10654: CALL_OW 424
// PrepareEng ;
10658: CALL 1022 0 0
// SetSide ( [ Abdul , ar_cargo ] , 6 ) ;
10662: LD_EXP 61
10666: PUSH
10667: LD_INT 171
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PPUSH
10674: LD_INT 6
10676: PPUSH
10677: CALL_OW 235
// SetSide ( FilterAllUnits ( [ f_side , 8 ] ) , 2 ) ;
10681: LD_INT 22
10683: PUSH
10684: LD_INT 8
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PPUSH
10691: CALL_OW 69
10695: PPUSH
10696: LD_INT 2
10698: PPUSH
10699: CALL_OW 235
// SetSide ( [ Abdul , ar_cargo ] , 8 ) ;
10703: LD_EXP 61
10707: PUSH
10708: LD_INT 171
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PPUSH
10715: LD_INT 8
10717: PPUSH
10718: CALL_OW 235
// Wait ( 0 0$03 ) ;
10722: LD_INT 105
10724: PPUSH
10725: CALL_OW 67
// BorderActive = false ;
10729: LD_ADDR_EXP 4
10733: PUSH
10734: LD_INT 0
10736: ST_TO_ADDR
// SetCargo ( ar_cargo , mat_oil , 100 ) ;
10737: LD_INT 171
10739: PPUSH
10740: LD_INT 2
10742: PPUSH
10743: LD_INT 100
10745: PPUSH
10746: CALL_OW 290
// Hint ( Collecter ) ;
10750: LD_STRING Collecter
10752: PPUSH
10753: CALL_OW 339
// Wait ( 0 0$05 ) ;
10757: LD_INT 175
10759: PPUSH
10760: CALL_OW 67
// DialogueOn ;
10764: CALL_OW 6
// CenterNowOnUnits ( ar_shit ) ;
10768: LD_INT 164
10770: PPUSH
10771: CALL_OW 87
// Say ( Louis , DDLsolar1 ) ;
10775: LD_EXP 19
10779: PPUSH
10780: LD_STRING DDLsolar1
10782: PPUSH
10783: CALL_OW 88
// Say ( Mike , DDMsolar1 ) ;
10787: LD_EXP 27
10791: PPUSH
10792: LD_STRING DDMsolar1
10794: PPUSH
10795: CALL_OW 88
// Say ( Gali , DDGsolar1 ) ;
10799: LD_EXP 26
10803: PPUSH
10804: LD_STRING DDGsolar1
10806: PPUSH
10807: CALL_OW 88
// DialogueOff ;
10811: CALL_OW 7
// Hint ( Solar ) ;
10815: LD_STRING Solar
10817: PPUSH
10818: CALL_OW 339
// SaveForQuickRestart ;
10822: CALL_OW 22
// end ;
10826: END
// every 0 0$02 marked 01 do var un ;
10827: GO 10829
10829: DISABLE
10830: LD_INT 0
10832: PPUSH
// begin enable ;
10833: ENABLE
// for un in FilterAllUnits ( [ f_side , 2 ] ) diff [ Louis ] do
10834: LD_ADDR_VAR 0 1
10838: PUSH
10839: LD_INT 22
10841: PUSH
10842: LD_INT 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 69
10853: PUSH
10854: LD_EXP 19
10858: PUSH
10859: EMPTY
10860: LIST
10861: DIFF
10862: PUSH
10863: FOR_IN
10864: IFFALSE 10949
// begin if GetDistUnits ( Abdul , un ) < 8 then
10866: LD_EXP 61
10870: PPUSH
10871: LD_VAR 0 1
10875: PPUSH
10876: CALL_OW 296
10880: PUSH
10881: LD_INT 8
10883: LESS
10884: IFFALSE 10947
// begin DialogueOn ;
10886: CALL_OW 6
// CenterNowOnUnits ( Abdul ) ;
10890: LD_EXP 61
10894: PPUSH
10895: CALL_OW 87
// if GetSex ( un ) = sex_male then
10899: LD_VAR 0 1
10903: PPUSH
10904: CALL_OW 258
10908: PUSH
10909: LD_INT 1
10911: EQUAL
10912: IFFALSE 10928
// begin Say ( un , DFoundSheikM ) ;
10914: LD_VAR 0 1
10918: PPUSH
10919: LD_STRING DFoundSheikM
10921: PPUSH
10922: CALL_OW 88
// end else
10926: GO 10940
// begin Say ( un , DFoundSheikF ) ;
10928: LD_VAR 0 1
10932: PPUSH
10933: LD_STRING DFoundSheikF
10935: PPUSH
10936: CALL_OW 88
// end ; DialogueOff ;
10940: CALL_OW 7
// disable ( 01 ) ;
10944: LD_INT 1
10946: DISABLE_MARKED
// end ; end ;
10947: GO 10863
10949: POP
10950: POP
// end ;
10951: PPOPN 1
10953: END
// every 0 0$01 trigger GetDistUnits ( Louis , Abdul ) < 8 do
10954: LD_EXP 19
10958: PPUSH
10959: LD_EXP 61
10963: PPUSH
10964: CALL_OW 296
10968: PUSH
10969: LD_INT 8
10971: LESS
10972: IFFALSE 11211
10974: GO 10976
10976: DISABLE
// begin InGameOn ;
10977: CALL_OW 8
// disable ( 01 ) ;
10981: LD_INT 1
10983: DISABLE_MARKED
// CenterNowOnUnits ( Abdul ) ;
10984: LD_EXP 61
10988: PPUSH
10989: CALL_OW 87
// ComExitVehicle ( Louis ) ;
10993: LD_EXP 19
10997: PPUSH
10998: CALL_OW 121
// Wait ( 0 0$03 ) ;
11002: LD_INT 105
11004: PPUSH
11005: CALL_OW 67
// ComTurnUnit ( Louis , Abdul ) ;
11009: LD_EXP 19
11013: PPUSH
11014: LD_EXP 61
11018: PPUSH
11019: CALL_OW 119
// ComTurnUnit ( Abdul , Louis ) ;
11023: LD_EXP 61
11027: PPUSH
11028: LD_EXP 19
11032: PPUSH
11033: CALL_OW 119
// Say ( Louis , DDLele1 ) ;
11037: LD_EXP 19
11041: PPUSH
11042: LD_STRING DDLele1
11044: PPUSH
11045: CALL_OW 88
// Say ( Abdul , DDAele1 ) ;
11049: LD_EXP 61
11053: PPUSH
11054: LD_STRING DDAele1
11056: PPUSH
11057: CALL_OW 88
// Say ( Louis , DDLele2 ) ;
11061: LD_EXP 19
11065: PPUSH
11066: LD_STRING DDLele2
11068: PPUSH
11069: CALL_OW 88
// Say ( Abdul , DDAele2 ) ;
11073: LD_EXP 61
11077: PPUSH
11078: LD_STRING DDAele2
11080: PPUSH
11081: CALL_OW 88
// Say ( Louis , DDLele3 ) ;
11085: LD_EXP 19
11089: PPUSH
11090: LD_STRING DDLele3
11092: PPUSH
11093: CALL_OW 88
// Say ( Abdul , DDAele3 ) ;
11097: LD_EXP 61
11101: PPUSH
11102: LD_STRING DDAele3
11104: PPUSH
11105: CALL_OW 88
// Say ( Louis , DDLele4 ) ;
11109: LD_EXP 19
11113: PPUSH
11114: LD_STRING DDLele4
11116: PPUSH
11117: CALL_OW 88
// Say ( Abdul , DDAele4 ) ;
11121: LD_EXP 61
11125: PPUSH
11126: LD_STRING DDAele4
11128: PPUSH
11129: CALL_OW 88
// Say ( Louis , DDLele5 ) ;
11133: LD_EXP 19
11137: PPUSH
11138: LD_STRING DDLele5
11140: PPUSH
11141: CALL_OW 88
// Say ( Abdul , DDAele5 ) ;
11145: LD_EXP 61
11149: PPUSH
11150: LD_STRING DDAele5
11152: PPUSH
11153: CALL_OW 88
// Say ( Louis , DDLele6 ) ;
11157: LD_EXP 19
11161: PPUSH
11162: LD_STRING DDLele6
11164: PPUSH
11165: CALL_OW 88
// Say ( Abdul , DDAele6 ) ;
11169: LD_EXP 61
11173: PPUSH
11174: LD_STRING DDAele6
11176: PPUSH
11177: CALL_OW 88
// Say ( Louis , DDLele7 ) ;
11181: LD_EXP 19
11185: PPUSH
11186: LD_STRING DDLele7
11188: PPUSH
11189: CALL_OW 88
// Wait ( 0 0$0.2 ) ;
11193: LD_INT 7
11195: PPUSH
11196: CALL_OW 67
// ComFree ( Elephant ) ;
11200: LD_INT 165
11202: PPUSH
11203: CALL_OW 139
// InGameOff ;
11207: CALL_OW 9
// end ;
11211: END
// every 0 0$01 trigger IsInArea ( Elephant , MastodontArea ) do
11212: LD_INT 165
11214: PPUSH
11215: LD_INT 14
11217: PPUSH
11218: CALL_OW 308
11222: IFFALSE 11478
11224: GO 11226
11226: DISABLE
// begin ComStop ( Elephant ) ;
11227: LD_INT 165
11229: PPUSH
11230: CALL_OW 141
// SetSide ( Elephant , 8 ) ;
11234: LD_INT 165
11236: PPUSH
11237: LD_INT 8
11239: PPUSH
11240: CALL_OW 235
// Wait ( 0 0$0.2 ) ;
11244: LD_INT 7
11246: PPUSH
11247: CALL_OW 67
// ComEnterUnit ( Abdul , Elephant ) ;
11251: LD_EXP 61
11255: PPUSH
11256: LD_INT 165
11258: PPUSH
11259: CALL_OW 120
// Wait ( 0 0$5 ) ;
11263: LD_INT 175
11265: PPUSH
11266: CALL_OW 67
// InGameOn ;
11270: CALL_OW 8
// ComTurnUnit ( Louis , Abdul ) ;
11274: LD_EXP 19
11278: PPUSH
11279: LD_EXP 61
11283: PPUSH
11284: CALL_OW 119
// AddComTurnUnit ( Abdul , Louis ) ;
11288: LD_EXP 61
11292: PPUSH
11293: LD_EXP 19
11297: PPUSH
11298: CALL_OW 179
// Say ( Abdul , DDeles1 ) ;
11302: LD_EXP 61
11306: PPUSH
11307: LD_STRING DDeles1
11309: PPUSH
11310: CALL_OW 88
// Say ( Louis , DDeles2 ) ;
11314: LD_EXP 19
11318: PPUSH
11319: LD_STRING DDeles2
11321: PPUSH
11322: CALL_OW 88
// Say ( Abdul , DDeles3 ) ;
11326: LD_EXP 61
11330: PPUSH
11331: LD_STRING DDeles3
11333: PPUSH
11334: CALL_OW 88
// Say ( Louis , DDeles4 ) ;
11338: LD_EXP 19
11342: PPUSH
11343: LD_STRING DDeles4
11345: PPUSH
11346: CALL_OW 88
// Say ( Abdul , DDeles5 ) ;
11350: LD_EXP 61
11354: PPUSH
11355: LD_STRING DDeles5
11357: PPUSH
11358: CALL_OW 88
// Say ( Louis , DDeles6 ) ;
11362: LD_EXP 19
11366: PPUSH
11367: LD_STRING DDeles6
11369: PPUSH
11370: CALL_OW 88
// InGameOff ;
11374: CALL_OW 9
// ComFree ( Abdul ) ;
11378: LD_EXP 61
11382: PPUSH
11383: CALL_OW 139
// Locked = true ;
11387: LD_ADDR_EXP 12
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// ChangeMissionObjectives ( SheikFree ) ;
11395: LD_STRING SheikFree
11397: PPUSH
11398: CALL_OW 337
// limit = limit + 6 6$00 ;
11402: LD_ADDR_EXP 63
11406: PUSH
11407: LD_EXP 63
11411: PUSH
11412: LD_INT 12600
11414: PLUS
11415: ST_TO_ADDR
// SetSide ( ar_cargo , 2 ) ;
11416: LD_INT 171
11418: PPUSH
11419: LD_INT 2
11421: PPUSH
11422: CALL_OW 235
// Wait ( 0 0$03 ) ;
11426: LD_INT 105
11428: PPUSH
11429: CALL_OW 67
// ComMoveXY ( [ Abdul , Elephant ] , 202 , 177 ) ;
11433: LD_EXP 61
11437: PUSH
11438: LD_INT 165
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PPUSH
11445: LD_INT 202
11447: PPUSH
11448: LD_INT 177
11450: PPUSH
11451: CALL_OW 111
// Wait ( 0 0$20 ) ;
11455: LD_INT 700
11457: PPUSH
11458: CALL_OW 67
// RemoveUnit ( Abdul ) ;
11462: LD_EXP 61
11466: PPUSH
11467: CALL_OW 64
// RemoveUnit ( Elephant ) ;
11471: LD_INT 165
11473: PPUSH
11474: CALL_OW 64
// end ;
11478: END
// every 0 0$10 trigger AmAngry > 20 do
11479: LD_EXP 2
11483: PUSH
11484: LD_INT 20
11486: GREATER
11487: IFFALSE 11518
11489: GO 11491
11491: DISABLE
// begin SayRadio ( dow , DS1 ) ;
11492: LD_EXP 34
11496: PPUSH
11497: LD_STRING DS1
11499: PPUSH
11500: CALL_OW 94
// am_diff = am_diff + 2 ;
11504: LD_ADDR_EXP 50
11508: PUSH
11509: LD_EXP 50
11513: PUSH
11514: LD_INT 2
11516: PLUS
11517: ST_TO_ADDR
// end ;
11518: END
// every 0 0$10 trigger AmAngry > 40 do
11519: LD_EXP 2
11523: PUSH
11524: LD_INT 40
11526: GREATER
11527: IFFALSE 11582
11529: GO 11531
11531: DISABLE
// begin SayRadio ( dow , DS2 ) ;
11532: LD_EXP 34
11536: PPUSH
11537: LD_STRING DS2
11539: PPUSH
11540: CALL_OW 94
// Say ( Louis , DLS3 ) ;
11544: LD_EXP 19
11548: PPUSH
11549: LD_STRING DLS3
11551: PPUSH
11552: CALL_OW 88
// SayRadio ( dow , DS3 ) ;
11556: LD_EXP 34
11560: PPUSH
11561: LD_STRING DS3
11563: PPUSH
11564: CALL_OW 94
// am_diff = am_diff + 2 ;
11568: LD_ADDR_EXP 50
11572: PUSH
11573: LD_EXP 50
11577: PUSH
11578: LD_INT 2
11580: PLUS
11581: ST_TO_ADDR
// end ;
11582: END
// every 0 0$01 trigger Time > 6 6$00 do
11583: LD_EXP 62
11587: PUSH
11588: LD_INT 12600
11590: GREATER
11591: IFFALSE 11603
11593: GO 11595
11595: DISABLE
// begin ComUpgrade ( ar_deps ) ;
11596: LD_INT 8
11598: PPUSH
11599: CALL_OW 146
// end ;
11603: END
// every 0 0$01 trigger Time > 15 15$00 do
11604: LD_EXP 62
11608: PUSH
11609: LD_INT 31500
11611: GREATER
11612: IFFALSE 11989
11614: GO 11616
11616: DISABLE
// begin DialogueOn ;
11617: CALL_OW 6
// SayRadio ( Jan , CnvDJ1 ) ;
11621: LD_EXP 23
11625: PPUSH
11626: LD_STRING CnvDJ1
11628: PPUSH
11629: CALL_OW 94
// Say ( Louis , CnvDL1 ) ;
11633: LD_EXP 19
11637: PPUSH
11638: LD_STRING CnvDL1
11640: PPUSH
11641: CALL_OW 88
// DWait ( 0 0$0.2 ) ;
11645: LD_INT 7
11647: PPUSH
11648: CALL_OW 68
// Say ( Gali , CnvDG1 ) ;
11652: LD_EXP 26
11656: PPUSH
11657: LD_STRING CnvDG1
11659: PPUSH
11660: CALL_OW 88
// Say ( Louis , CnvDL2 ) ;
11664: LD_EXP 19
11668: PPUSH
11669: LD_STRING CnvDL2
11671: PPUSH
11672: CALL_OW 88
// Say ( Jenna , CnvDJn1 ) ;
11676: LD_EXP 28
11680: PPUSH
11681: LD_STRING CnvDJn1
11683: PPUSH
11684: CALL_OW 88
// Say ( Louis , CnvDL3 ) ;
11688: LD_EXP 19
11692: PPUSH
11693: LD_STRING CnvDL3
11695: PPUSH
11696: CALL_OW 88
// DialogueOff ;
11700: CALL_OW 7
// Hint ( Convoy ) ;
11704: LD_STRING Convoy
11706: PPUSH
11707: CALL_OW 339
// SetTech ( 42 , 2 , state_enabled ) ;
11711: LD_INT 42
11713: PPUSH
11714: LD_INT 2
11716: PPUSH
11717: LD_INT 1
11719: PPUSH
11720: CALL_OW 322
// Wait ( 1 1$20 ) ;
11724: LD_INT 2800
11726: PPUSH
11727: CALL_OW 67
// PrepareRick ;
11731: CALL 2660 0 0
// Wait ( 0 0$03 ) ;
11735: LD_INT 105
11737: PPUSH
11738: CALL_OW 67
// DialogueOn ;
11742: CALL_OW 6
// SayRadio ( Rick , DR1 ) ;
11746: LD_EXP 31
11750: PPUSH
11751: LD_STRING DR1
11753: PPUSH
11754: CALL_OW 94
// Say ( Louis , DRL1 ) ;
11758: LD_EXP 19
11762: PPUSH
11763: LD_STRING DRL1
11765: PPUSH
11766: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
11770: LD_INT 10
11772: PPUSH
11773: CALL_OW 68
// Say ( Louis , DRL2 ) ;
11777: LD_EXP 19
11781: PPUSH
11782: LD_STRING DRL2
11784: PPUSH
11785: CALL_OW 88
// SayRadio ( Rick , DRa2 ) ;
11789: LD_EXP 31
11793: PPUSH
11794: LD_STRING DRa2
11796: PPUSH
11797: CALL_OW 94
// Say ( Louis , DRL3 ) ;
11801: LD_EXP 19
11805: PPUSH
11806: LD_STRING DRL3
11808: PPUSH
11809: CALL_OW 88
// DialogueOff ;
11813: CALL_OW 7
// Wait ( 1 1$00 ) ;
11817: LD_INT 2100
11819: PPUSH
11820: CALL_OW 67
// PlaceUnitXY ( Rick , 127 , 2 , false ) ;
11824: LD_EXP 31
11828: PPUSH
11829: LD_INT 127
11831: PPUSH
11832: LD_INT 2
11834: PPUSH
11835: LD_INT 0
11837: PPUSH
11838: CALL_OW 48
// SetLives ( Rick , 500 ) ;
11842: LD_EXP 31
11846: PPUSH
11847: LD_INT 500
11849: PPUSH
11850: CALL_OW 234
// ComMoveXY ( Rick , 131 , 13 ) ;
11854: LD_EXP 31
11858: PPUSH
11859: LD_INT 131
11861: PPUSH
11862: LD_INT 13
11864: PPUSH
11865: CALL_OW 111
// Wait ( 0 0$05 ) ;
11869: LD_INT 175
11871: PPUSH
11872: CALL_OW 67
// DialogueOn ;
11876: CALL_OW 6
// CenterNowOnUnits ( Rick ) ;
11880: LD_EXP 31
11884: PPUSH
11885: CALL_OW 87
// Say ( Rick , DR3 ) ;
11889: LD_EXP 31
11893: PPUSH
11894: LD_STRING DR3
11896: PPUSH
11897: CALL_OW 88
// Say ( Louis , DRL4 ) ;
11901: LD_EXP 19
11905: PPUSH
11906: LD_STRING DRL4
11908: PPUSH
11909: CALL_OW 88
// Say ( Rick , DR4 ) ;
11913: LD_EXP 31
11917: PPUSH
11918: LD_STRING DR4
11920: PPUSH
11921: CALL_OW 88
// Say ( Louis , DRL4a ) ;
11925: LD_EXP 19
11929: PPUSH
11930: LD_STRING DRL4a
11932: PPUSH
11933: CALL_OW 88
// Say ( Jenna , DRJ1 ) ;
11937: LD_EXP 28
11941: PPUSH
11942: LD_STRING DRJ1
11944: PPUSH
11945: CALL_OW 88
// Say ( Rick , DR5 ) ;
11949: LD_EXP 31
11953: PPUSH
11954: LD_STRING DR5
11956: PPUSH
11957: CALL_OW 88
// DialogueOff ;
11961: CALL_OW 7
// SetSide ( Rick , 2 ) ;
11965: LD_EXP 31
11969: PPUSH
11970: LD_INT 2
11972: PPUSH
11973: CALL_OW 235
// ComEnterUnit ( Rick , ar_lab1 ) ;
11977: LD_EXP 31
11981: PPUSH
11982: LD_INT 141
11984: PPUSH
11985: CALL_OW 120
// end ;
11989: END
// every 0 0$10 trigger Time > 18 18$00 do
11990: LD_EXP 62
11994: PUSH
11995: LD_INT 37800
11997: GREATER
11998: IFFALSE 12007
12000: GO 12002
12002: DISABLE
// begin PrepareConvoyA ;
12003: CALL 8457 0 0
// end ;
12007: END
// every 6 6$30 trigger Time > 23 23$00 do
12008: LD_EXP 62
12012: PUSH
12013: LD_INT 48300
12015: GREATER
12016: IFFALSE 12045
12018: GO 12020
12020: DISABLE
// begin enable ;
12021: ENABLE
// SayRadio ( Jan , DrCn1 ) ;
12022: LD_EXP 23
12026: PPUSH
12027: LD_STRING DrCn1
12029: PPUSH
12030: CALL_OW 94
// Wait ( 0 0$35 ) ;
12034: LD_INT 1225
12036: PPUSH
12037: CALL_OW 67
// PrepareConvoyB ;
12041: CALL 8796 0 0
// end ;
12045: END
// every 0 0$01 trigger Time > 21 21$10 do
12046: LD_EXP 62
12050: PUSH
12051: LD_INT 44450
12053: GREATER
12054: IFFALSE 12116
12056: GO 12058
12058: DISABLE
// begin DialogueOn ;
12059: CALL_OW 6
// Say ( Jenna , DJ-Solar1 ) ;
12063: LD_EXP 28
12067: PPUSH
12068: LD_STRING DJ-Solar1
12070: PPUSH
12071: CALL_OW 88
// DialogueOff ;
12075: CALL_OW 7
// SetLives ( ar_el1 , 10 ) ;
12079: LD_INT 144
12081: PPUSH
12082: LD_INT 10
12084: PPUSH
12085: CALL_OW 234
// SetLives ( ar_el2 , 10 ) ;
12089: LD_INT 145
12091: PPUSH
12092: LD_INT 10
12094: PPUSH
12095: CALL_OW 234
// SetLives ( ar_el3 , 10 ) ;
12099: LD_INT 146
12101: PPUSH
12102: LD_INT 10
12104: PPUSH
12105: CALL_OW 234
// CenterNowOnUnits ( ar_el2 ) ;
12109: LD_INT 145
12111: PPUSH
12112: CALL_OW 87
// end ;
12116: END
// every 0 0$01 trigger Time > 31 31$00 do
12117: LD_EXP 62
12121: PUSH
12122: LD_INT 65100
12124: GREATER
12125: IFFALSE 12274
12127: GO 12129
12129: DISABLE
// begin InGameOn ;
12130: CALL_OW 8
// DialogueOn ;
12134: CALL_OW 6
// PrepareShariff ;
12138: CALL 2818 0 0
// SayRadio ( Shariff , DShar1 ) ;
12142: LD_EXP 32
12146: PPUSH
12147: LD_STRING DShar1
12149: PPUSH
12150: CALL_OW 94
// case Query ( ShariffQuestion ) of 1 :
12154: LD_STRING ShariffQuestion
12156: PPUSH
12157: CALL_OW 97
12161: PUSH
12162: LD_INT 1
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12216
12170: POP
// begin Say ( Louis , DL-help1 ) ;
12171: LD_EXP 19
12175: PPUSH
12176: LD_STRING DL-help1
12178: PPUSH
12179: CALL_OW 88
// SayRadio ( Shariff , DShar2 ) ;
12183: LD_EXP 32
12187: PPUSH
12188: LD_STRING DShar2
12190: PPUSH
12191: CALL_OW 94
// DialogueOff ;
12195: CALL_OW 7
// InGameOff ;
12199: CALL_OW 9
// Wait ( 3 3$00 ) ;
12203: LD_INT 6300
12205: PPUSH
12206: CALL_OW 67
// PrepareHelp ;
12210: CALL 2892 0 0
// end ; 2 :
12214: GO 12274
12216: LD_INT 2
12218: DOUBLE
12219: EQUAL
12220: IFTRUE 12224
12222: GO 12273
12224: POP
// begin Say ( Louis , DL-nonhelp1 ) ;
12225: LD_EXP 19
12229: PPUSH
12230: LD_STRING DL-nonhelp1
12232: PPUSH
12233: CALL_OW 88
// Say ( Shariff , DShar3 ) ;
12237: LD_EXP 32
12241: PPUSH
12242: LD_STRING DShar3
12244: PPUSH
12245: CALL_OW 88
// DialogueOff ;
12249: CALL_OW 7
// InGameOff ;
12253: CALL_OW 9
// limit = limit + 10 10$0 ;
12257: LD_ADDR_EXP 63
12261: PUSH
12262: LD_EXP 63
12266: PUSH
12267: LD_INT 21000
12269: PLUS
12270: ST_TO_ADDR
// end ; end ;
12271: GO 12274
12273: POP
// end ;
12274: END
// every 0 0$01 trigger InJ = false do
12275: LD_EXP 6
12279: PUSH
12280: LD_INT 0
12282: EQUAL
12283: IFFALSE 12312
12285: GO 12287
12287: DISABLE
// begin Say ( Louis , DWeap1 ) ;
12288: LD_EXP 19
12292: PPUSH
12293: LD_STRING DWeap1
12295: PPUSH
12296: CALL_OW 88
// Say ( Jenna , DWeap2 ) ;
12300: LD_EXP 28
12304: PPUSH
12305: LD_STRING DWeap2
12307: PPUSH
12308: CALL_OW 88
// end ;
12312: END
// every 0 0$01 trigger InR = false do
12313: LD_EXP 5
12317: PUSH
12318: LD_INT 0
12320: EQUAL
12321: IFFALSE 12408
12323: GO 12325
12325: DISABLE
// begin Say ( Rick , DRi1 ) ;
12326: LD_EXP 31
12330: PPUSH
12331: LD_STRING DRi1
12333: PPUSH
12334: CALL_OW 88
// Say ( Louis , DRiL1 ) ;
12338: LD_EXP 19
12342: PPUSH
12343: LD_STRING DRiL1
12345: PPUSH
12346: CALL_OW 88
// Say ( Rick , DRi2 ) ;
12350: LD_EXP 31
12354: PPUSH
12355: LD_STRING DRi2
12357: PPUSH
12358: CALL_OW 88
// ChangeMissionObjectives ( Radar ) ;
12362: LD_STRING Radar
12364: PPUSH
12365: CALL_OW 337
// SetRestrict ( b_lab_full , 2 , state_enabled ) ;
12369: LD_INT 8
12371: PPUSH
12372: LD_INT 2
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 324
// SetRestrict ( b_lab_opto , 2 , state_enabled ) ;
12382: LD_INT 15
12384: PPUSH
12385: LD_INT 2
12387: PPUSH
12388: LD_INT 1
12390: PPUSH
12391: CALL_OW 324
// SetRestrict ( b_ext_radar , 2 , state_enabled ) ;
12395: LD_INT 20
12397: PPUSH
12398: LD_INT 2
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: CALL_OW 324
// end ;
12408: END
// every 0 0$01 trigger ArRa = false do
12409: LD_EXP 8
12413: PUSH
12414: LD_INT 0
12416: EQUAL
12417: IFFALSE 12453
12419: GO 12421
12421: DISABLE
// begin Say ( Rick , RiRar1 ) ;
12422: LD_EXP 31
12426: PPUSH
12427: LD_STRING RiRar1
12429: PPUSH
12430: CALL_OW 88
// Say ( Louis , RiRarL1 ) ;
12434: LD_EXP 19
12438: PPUSH
12439: LD_STRING RiRarL1
12441: PPUSH
12442: CALL_OW 88
// ChangeMissionObjectives ( RadarOut ) ;
12446: LD_STRING RadarOut
12448: PPUSH
12449: CALL_OW 337
// end ;
12453: END
// every 0 0$01 trigger GetResourceType ( GetBase ( ar_deps ) , mat_cans ) >= 500 do
12454: LD_INT 8
12456: PPUSH
12457: CALL_OW 274
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 275
12469: PUSH
12470: LD_INT 500
12472: GREATEREQUAL
12473: IFFALSE 12490
12475: GO 12477
12477: DISABLE
// begin Say ( Gali , DGad1 ) ;
12478: LD_EXP 26
12482: PPUSH
12483: LD_STRING DGad1
12485: PPUSH
12486: CALL_OW 88
// end ;
12490: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) > 0 do
12491: LD_INT 22
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 25
12503: PUSH
12504: LD_INT 15
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PPUSH
12515: CALL_OW 69
12519: PUSH
12520: LD_INT 0
12522: GREATER
12523: IFFALSE 12564
12525: GO 12527
12527: DISABLE
// begin Say ( Hubert , DHad1 ) ;
12528: LD_EXP 29
12532: PPUSH
12533: LD_STRING DHad1
12535: PPUSH
12536: CALL_OW 88
// Say ( Louis , DLad1 ) ;
12540: LD_EXP 19
12544: PPUSH
12545: LD_STRING DLad1
12547: PPUSH
12548: CALL_OW 88
// Say ( Jenna , DJad1 ) ;
12552: LD_EXP 28
12556: PPUSH
12557: LD_STRING DJad1
12559: PPUSH
12560: CALL_OW 88
// end ;
12564: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_engineer ] ] ) > 0 do
12565: LD_INT 22
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 25
12577: PUSH
12578: LD_INT 16
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PPUSH
12589: CALL_OW 69
12593: PUSH
12594: LD_INT 0
12596: GREATER
12597: IFFALSE 12614
12599: GO 12601
12601: DISABLE
// begin Say ( Gali , DGad2 ) ;
12602: LD_EXP 26
12606: PPUSH
12607: LD_STRING DGad2
12609: PPUSH
12610: CALL_OW 88
// end ;
12614: END
// every 0 0$02 trigger FilterUnitsInArea ( AMCR , [ f_control , control_remote ] ) > 0 do
12615: LD_INT 24
12617: PPUSH
12618: LD_INT 33
12620: PUSH
12621: LD_INT 2
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PPUSH
12628: CALL_OW 70
12632: PUSH
12633: LD_INT 0
12635: GREATER
12636: IFFALSE 12702
12638: GO 12640
12640: DISABLE
// begin DialogueOn ;
12641: CALL_OW 6
// CenterNowOnXY ( 129 , 35 ) ;
12645: LD_INT 129
12647: PPUSH
12648: LD_INT 35
12650: PPUSH
12651: CALL_OW 86
// DWait ( 0 0$0.2 ) ;
12655: LD_INT 7
12657: PPUSH
12658: CALL_OW 68
// Say ( Hubert , DHam1 ) ;
12662: LD_EXP 29
12666: PPUSH
12667: LD_STRING DHam1
12669: PPUSH
12670: CALL_OW 88
// Say ( Jenna , DJam2 ) ;
12674: LD_EXP 28
12678: PPUSH
12679: LD_STRING DJam2
12681: PPUSH
12682: CALL_OW 88
// Say ( Louis , DLam3 ) ;
12686: LD_EXP 19
12690: PPUSH
12691: LD_STRING DLam3
12693: PPUSH
12694: CALL_OW 88
// DialogueOff ;
12698: CALL_OW 7
// end ;
12702: END
// every 0 0$01 trigger FilterUnitsInArea ( AmBase , [ f_side , 2 ] ) > 0 do
12703: LD_INT 3
12705: PPUSH
12706: LD_INT 22
12708: PUSH
12709: LD_INT 2
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PPUSH
12716: CALL_OW 70
12720: PUSH
12721: LD_INT 0
12723: GREATER
12724: IFFALSE 12741
12726: GO 12728
12728: DISABLE
// begin SayRadio ( dow , Dapp ) ;
12729: LD_EXP 34
12733: PPUSH
12734: LD_STRING Dapp
12736: PPUSH
12737: CALL_OW 94
// end ;
12741: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] ] ] ) = Rand ( 3 , 5 ) do
12742: LD_INT 22
12744: PUSH
12745: LD_INT 2
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 2
12754: PUSH
12755: LD_INT 25
12757: PUSH
12758: LD_INT 12
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: LD_INT 25
12767: PUSH
12768: LD_INT 15
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 25
12777: PUSH
12778: LD_INT 16
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: PUSH
12800: LD_INT 3
12802: PPUSH
12803: LD_INT 5
12805: PPUSH
12806: CALL_OW 12
12810: EQUAL
12811: IFFALSE 12828
12813: GO 12815
12815: DISABLE
// begin Say ( Gali , Dapp1 ) ;
12816: LD_EXP 26
12820: PPUSH
12821: LD_STRING Dapp1
12823: PPUSH
12824: CALL_OW 88
// end ;
12828: END
// every 0 0$01 trigger See ( 1 , Mike ) do
12829: LD_INT 1
12831: PPUSH
12832: LD_EXP 27
12836: PPUSH
12837: CALL_OW 292
12841: IFFALSE 12858
12843: GO 12845
12845: DISABLE
// begin Say ( Mike , Dapp2 ) ;
12846: LD_EXP 27
12850: PPUSH
12851: LD_STRING Dapp2
12853: PPUSH
12854: CALL_OW 88
// end ;
12858: END
// every 0 0$05 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , us_bulldozer ] ] ) > 0 do
12859: LD_INT 22
12861: PUSH
12862: LD_INT 2
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 34
12871: PUSH
12872: LD_INT 14
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: PUSH
12888: LD_INT 0
12890: GREATER
12891: IFFALSE 12908
12893: GO 12895
12895: DISABLE
// begin SayRadio ( dow , Dapp3 ) ;
12896: LD_EXP 34
12900: PPUSH
12901: LD_STRING Dapp3
12903: PPUSH
12904: CALL_OW 94
// end ;
12908: END
// every 0 0$01 trigger time >= [ 90 90$00 , 87 87$00 , 85 85$00 ] [ Difficulty ] do
12909: LD_EXP 62
12913: PUSH
12914: LD_INT 189000
12916: PUSH
12917: LD_INT 182700
12919: PUSH
12920: LD_INT 178500
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: LD_OWVAR 67
12932: ARRAY
12933: GREATEREQUAL
12934: IFFALSE 12970
12936: GO 12938
12938: DISABLE
// begin InGameOn ;
12939: CALL_OW 8
// DialogueOn ;
12943: CALL_OW 6
// SayRadio ( Shariff , DS-dissm ) ;
12947: LD_EXP 32
12951: PPUSH
12952: LD_STRING DS-dissm
12954: PPUSH
12955: CALL_OW 94
// YouLost ( timeout ) ;
12959: LD_STRING timeout
12961: PPUSH
12962: CALL_OW 104
// DialogueOff ;
12966: CALL_OW 7
// end ;
12970: END
// every 0 0$13 trigger cameras >= [ 9 , 8 , 6 ] [ Difficulty ] do
12971: LD_EXP 17
12975: PUSH
12976: LD_INT 9
12978: PUSH
12979: LD_INT 8
12981: PUSH
12982: LD_INT 6
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: LIST
12989: PUSH
12990: LD_OWVAR 67
12994: ARRAY
12995: GREATEREQUAL
12996: IFFALSE 13054
12998: GO 13000
13000: DISABLE
// begin SetTech ( tech_HidCam , 2 , state_disabled ) ;
13001: LD_INT 17
13003: PPUSH
13004: LD_INT 2
13006: PPUSH
13007: LD_INT 0
13009: PPUSH
13010: CALL_OW 322
// Say ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) [ 1 ] , DCam ) ;
13014: LD_INT 22
13016: PUSH
13017: LD_INT 2
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 25
13026: PUSH
13027: LD_INT 2
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PPUSH
13038: CALL_OW 69
13042: PUSH
13043: LD_INT 1
13045: ARRAY
13046: PPUSH
13047: LD_STRING DCam
13049: PPUSH
13050: CALL_OW 88
// end ; end_of_file
13054: END
// every 0 0$01 trigger BorderActive = true do
13055: LD_EXP 4
13059: PUSH
13060: LD_INT 1
13062: EQUAL
13063: IFFALSE 13078
13065: GO 13067
13067: DISABLE
// HideArea ( 2 , Border ) ;
13068: LD_INT 2
13070: PPUSH
13071: LD_INT 2
13073: PPUSH
13074: CALL_OW 333
13078: END
// every 0 0$01 trigger BorderActive = false do
13079: LD_EXP 4
13083: PUSH
13084: LD_INT 0
13086: EQUAL
13087: IFFALSE 13102
13089: GO 13091
13091: DISABLE
// ShowArea ( 2 , Border ) ;
13092: LD_INT 2
13094: PPUSH
13095: LD_INT 2
13097: PPUSH
13098: CALL_OW 334
13102: END
// every 3 trigger BorderActive = true do var i ;
13103: LD_EXP 4
13107: PUSH
13108: LD_INT 1
13110: EQUAL
13111: IFFALSE 13184
13113: GO 13115
13115: DISABLE
13116: LD_INT 0
13118: PPUSH
// begin enable ;
13119: ENABLE
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
13120: LD_ADDR_VAR 0 1
13124: PUSH
13125: LD_INT 22
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PPUSH
13135: CALL_OW 69
13139: PUSH
13140: FOR_IN
13141: IFFALSE 13171
// begin if IsInArea ( i , Border ) then
13143: LD_VAR 0 1
13147: PPUSH
13148: LD_INT 2
13150: PPUSH
13151: CALL_OW 308
13155: IFFALSE 13169
// ComMoveToArea ( i , BorderEsp ) ;
13157: LD_VAR 0 1
13161: PPUSH
13162: LD_INT 13
13164: PPUSH
13165: CALL_OW 113
// end ;
13169: GO 13140
13171: POP
13172: POP
// if BorderActive = false then
13173: LD_EXP 4
13177: PUSH
13178: LD_INT 0
13180: EQUAL
13181: IFFALSE 13184
// disable ;
13183: DISABLE
// end ;
13184: PPOPN 1
13186: END
// every 0 0$01 trigger Locked = false do
13187: LD_EXP 12
13191: PUSH
13192: LD_INT 0
13194: EQUAL
13195: IFFALSE 13210
13197: GO 13199
13199: DISABLE
// HideArea ( 2 , Border ) ;
13200: LD_INT 2
13202: PPUSH
13203: LD_INT 2
13205: PPUSH
13206: CALL_OW 333
13210: END
// every 0 0$01 trigger Locked = true do
13211: LD_EXP 12
13215: PUSH
13216: LD_INT 1
13218: EQUAL
13219: IFFALSE 13234
13221: GO 13223
13223: DISABLE
// ShowArea ( 2 , Border ) ;
13224: LD_INT 2
13226: PPUSH
13227: LD_INT 2
13229: PPUSH
13230: CALL_OW 334
13234: END
// every 3 trigger Locked = false do var i ;
13235: LD_EXP 12
13239: PUSH
13240: LD_INT 0
13242: EQUAL
13243: IFFALSE 13316
13245: GO 13247
13247: DISABLE
13248: LD_INT 0
13250: PPUSH
// begin enable ;
13251: ENABLE
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
13252: LD_ADDR_VAR 0 1
13256: PUSH
13257: LD_INT 22
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: PUSH
13272: FOR_IN
13273: IFFALSE 13303
// begin if IsInArea ( i , Border2 ) then
13275: LD_VAR 0 1
13279: PPUSH
13280: LD_INT 17
13282: PPUSH
13283: CALL_OW 308
13287: IFFALSE 13301
// ComMoveToArea ( i , BorderEsp2 ) ;
13289: LD_VAR 0 1
13293: PPUSH
13294: LD_INT 18
13296: PPUSH
13297: CALL_OW 113
// end ;
13301: GO 13272
13303: POP
13304: POP
// if Locked = true then
13305: LD_EXP 12
13309: PUSH
13310: LD_INT 1
13312: EQUAL
13313: IFFALSE 13316
// disable ;
13315: DISABLE
// end ; end_of_file
13316: PPOPN 1
13318: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ f_control , control_remote ] ) then
13319: LD_VAR 0 1
13323: PUSH
13324: LD_INT 33
13326: PUSH
13327: LD_INT 2
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PPUSH
13334: CALL_OW 69
13338: IN
13339: IFFALSE 13350
// begin ComUnlink ( un ) ;
13341: LD_VAR 0 1
13345: PPUSH
13346: CALL_OW 136
// end ; end ;
13350: PPOPN 1
13352: END
// on Command ( param ) do begin if param = 103 then
13353: LD_VAR 0 1
13357: PUSH
13358: LD_INT 103
13360: EQUAL
13361: IFFALSE 13377
// cameras := cameras + 1 ;
13363: LD_ADDR_EXP 17
13367: PUSH
13368: LD_EXP 17
13372: PUSH
13373: LD_INT 1
13375: PLUS
13376: ST_TO_ADDR
// end ;
13377: PPOPN 1
13379: END
// export Point ; on UnitDestroyed ( un ) do var i ;
13380: LD_INT 0
13382: PPUSH
// begin if un = Abdul then
13383: LD_VAR 0 1
13387: PUSH
13388: LD_EXP 61
13392: EQUAL
13393: IFFALSE 13410
// begin Locked = true ;
13395: LD_ADDR_EXP 12
13399: PUSH
13400: LD_INT 1
13402: ST_TO_ADDR
// ChangeMissionObjectives ( SheikFree ) ;
13403: LD_STRING SheikFree
13405: PPUSH
13406: CALL_OW 337
// end ; if un in FilterAllUnits ( [ f_side , 1 ] ) then
13410: LD_VAR 0 1
13414: PUSH
13415: LD_INT 22
13417: PUSH
13418: LD_INT 1
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: IN
13430: IFFALSE 13446
// begin AmAngry = AmAngry + 1 ;
13432: LD_ADDR_EXP 2
13436: PUSH
13437: LD_EXP 2
13441: PUSH
13442: LD_INT 1
13444: PLUS
13445: ST_TO_ADDR
// end ; if un = ar_deps then
13446: LD_VAR 0 1
13450: PUSH
13451: LD_INT 8
13453: EQUAL
13454: IFFALSE 13463
// begin YouLost ( DepotDestroy ) ;
13456: LD_STRING DepotDestroy
13458: PPUSH
13459: CALL_OW 104
// end ; if un = Louis then
13463: LD_VAR 0 1
13467: PUSH
13468: LD_EXP 19
13472: EQUAL
13473: IFFALSE 13482
// begin YouLost ( LouisDead ) ;
13475: LD_STRING LouisDead
13477: PPUSH
13478: CALL_OW 104
// end ; if un in FilterAllUnits ( [ f_control , control_remote ] ) then
13482: LD_VAR 0 1
13486: PUSH
13487: LD_INT 33
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 69
13501: IN
13502: IFFALSE 13614
// begin Point = Point + 1 ;
13504: LD_ADDR_EXP 59
13508: PUSH
13509: LD_EXP 59
13513: PUSH
13514: LD_INT 1
13516: PLUS
13517: ST_TO_ADDR
// if Point >= ( am_diff - 2 ) then
13518: LD_EXP 59
13522: PUSH
13523: LD_EXP 50
13527: PUSH
13528: LD_INT 2
13530: MINUS
13531: GREATEREQUAL
13532: IFFALSE 13614
// begin Point = 0 ;
13534: LD_ADDR_EXP 59
13538: PUSH
13539: LD_INT 0
13541: ST_TO_ADDR
// Wait ( 5 5$00 ) ;
13542: LD_INT 10500
13544: PPUSH
13545: CALL_OW 67
// CanAttack = true ;
13549: LD_ADDR_EXP 15
13553: PUSH
13554: LD_INT 1
13556: ST_TO_ADDR
// for i = 1 to am_diff do
13557: LD_ADDR_VAR 0 2
13561: PUSH
13562: DOUBLE
13563: LD_INT 1
13565: DEC
13566: ST_TO_ADDR
13567: LD_EXP 50
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13612
// begin AddComConstruct ( am_fac , am_chassis , engine_combustion , control_remote , am_weapon + Rand ( 0 , 1 ) ) ;
13575: LD_INT 110
13577: PPUSH
13578: LD_EXP 52
13582: PPUSH
13583: LD_INT 1
13585: PPUSH
13586: LD_INT 2
13588: PPUSH
13589: LD_EXP 51
13593: PUSH
13594: LD_INT 0
13596: PPUSH
13597: LD_INT 1
13599: PPUSH
13600: CALL_OW 12
13604: PLUS
13605: PPUSH
13606: CALL_OW 185
// end ;
13610: GO 13572
13612: POP
13613: POP
// end ; end ; end ;
13614: PPOPN 2
13616: END
// on BuildingComplete ( b ) do var i , un , eng ;
13617: LD_INT 0
13619: PPUSH
13620: PPUSH
13621: PPUSH
// begin if GetSide ( b ) = ar2 and GetBType ( b ) = b_armoury then
13622: LD_VAR 0 1
13626: PPUSH
13627: CALL_OW 255
13631: PUSH
13632: LD_EXP 21
13636: EQUAL
13637: PUSH
13638: LD_VAR 0 1
13642: PPUSH
13643: CALL_OW 266
13647: PUSH
13648: LD_INT 4
13650: EQUAL
13651: AND
13652: IFFALSE 13877
// begin CanRepair = true ;
13654: LD_ADDR_EXP 16
13658: PUSH
13659: LD_INT 1
13661: ST_TO_ADDR
// ComEnterUnit ( Jan , b ) ;
13662: LD_EXP 23
13666: PPUSH
13667: LD_VAR 0 1
13671: PPUSH
13672: CALL_OW 120
// uc_side = 5 ;
13676: LD_ADDR_OWVAR 20
13680: PUSH
13681: LD_INT 5
13683: ST_TO_ADDR
// uc_nation = 2 ;
13684: LD_ADDR_OWVAR 21
13688: PUSH
13689: LD_INT 2
13691: ST_TO_ADDR
// for i = 1 to 4 do
13692: LD_ADDR_VAR 0 2
13696: PUSH
13697: DOUBLE
13698: LD_INT 1
13700: DEC
13701: ST_TO_ADDR
13702: LD_INT 4
13704: PUSH
13705: FOR_TO
13706: IFFALSE 13875
// begin hc_class = 1 ;
13708: LD_ADDR_OWVAR 28
13712: PUSH
13713: LD_INT 1
13715: ST_TO_ADDR
// hc_gallery =  ;
13716: LD_ADDR_OWVAR 33
13720: PUSH
13721: LD_STRING 
13723: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
13724: LD_ADDR_OWVAR 29
13728: PUSH
13729: LD_INT 9
13731: PPUSH
13732: LD_INT 11
13734: PPUSH
13735: CALL_OW 12
13739: PUSH
13740: LD_INT 10
13742: PPUSH
13743: LD_INT 12
13745: PPUSH
13746: CALL_OW 12
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: ST_TO_ADDR
// hc_skills = [ Rand ( 4 , 7 ) , Rand ( 3 , 6 ) , Rand ( 0 , 3 ) , Rand ( 0 , 4 ) ] ;
13755: LD_ADDR_OWVAR 31
13759: PUSH
13760: LD_INT 4
13762: PPUSH
13763: LD_INT 7
13765: PPUSH
13766: CALL_OW 12
13770: PUSH
13771: LD_INT 3
13773: PPUSH
13774: LD_INT 6
13776: PPUSH
13777: CALL_OW 12
13781: PUSH
13782: LD_INT 0
13784: PPUSH
13785: LD_INT 3
13787: PPUSH
13788: CALL_OW 12
13792: PUSH
13793: LD_INT 0
13795: PPUSH
13796: LD_INT 4
13798: PPUSH
13799: CALL_OW 12
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: ST_TO_ADDR
// hc_name =  ;
13810: LD_ADDR_OWVAR 26
13814: PUSH
13815: LD_STRING 
13817: ST_TO_ADDR
// un = CreateHuman ;
13818: LD_ADDR_VAR 0 3
13822: PUSH
13823: CALL_OW 44
13827: ST_TO_ADDR
// PlaceUnitArea ( un , SpawnArea , false ) ;
13828: LD_VAR 0 3
13832: PPUSH
13833: LD_INT 6
13835: PPUSH
13836: LD_INT 0
13838: PPUSH
13839: CALL_OW 49
// ar_force = ar_force ^ un ;
13843: LD_ADDR_EXP 22
13847: PUSH
13848: LD_EXP 22
13852: PUSH
13853: LD_VAR 0 3
13857: ADD
13858: ST_TO_ADDR
// ComEnterUnit ( un , b ) ;
13859: LD_VAR 0 3
13863: PPUSH
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 120
// end ;
13873: GO 13705
13875: POP
13876: POP
// end ; end ;
13877: PPOPN 4
13879: END
// on Contact ( side1 , side2 ) do begin if side1 = 2 and side2 = 1 then
13880: LD_VAR 0 1
13884: PUSH
13885: LD_INT 2
13887: EQUAL
13888: PUSH
13889: LD_VAR 0 2
13893: PUSH
13894: LD_INT 1
13896: EQUAL
13897: AND
13898: IFFALSE 13908
// begin AmerikaAttack = true ;
13900: LD_ADDR_EXP 1
13904: PUSH
13905: LD_INT 1
13907: ST_TO_ADDR
// end ; if side1 = 1 and side2 = 2 then
13908: LD_VAR 0 1
13912: PUSH
13913: LD_INT 1
13915: EQUAL
13916: PUSH
13917: LD_VAR 0 2
13921: PUSH
13922: LD_INT 2
13924: EQUAL
13925: AND
13926: IFFALSE 13936
// begin AmerikaAttack = true ;
13928: LD_ADDR_EXP 1
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// end ; if side1 = 2 and side2 = 5 then
13936: LD_VAR 0 1
13940: PUSH
13941: LD_INT 2
13943: EQUAL
13944: PUSH
13945: LD_VAR 0 2
13949: PUSH
13950: LD_INT 5
13952: EQUAL
13953: AND
13954: IFFALSE 13963
// begin YouLost ( AlAtack ) ;
13956: LD_STRING AlAtack
13958: PPUSH
13959: CALL_OW 104
// end ; if side1 = 2 and side2 = 8 then
13963: LD_VAR 0 1
13967: PUSH
13968: LD_INT 2
13970: EQUAL
13971: PUSH
13972: LD_VAR 0 2
13976: PUSH
13977: LD_INT 8
13979: EQUAL
13980: AND
13981: IFFALSE 13990
// begin YouLost ( AlAtack ) ;
13983: LD_STRING AlAtack
13985: PPUSH
13986: CALL_OW 104
// end ; if side1 = 4 and side2 = 5 then
13990: LD_VAR 0 1
13994: PUSH
13995: LD_INT 4
13997: EQUAL
13998: PUSH
13999: LD_VAR 0 2
14003: PUSH
14004: LD_INT 5
14006: EQUAL
14007: AND
14008: IFFALSE 14025
// begin Wait ( 0 0$10 ) ;
14010: LD_INT 350
14012: PPUSH
14013: CALL_OW 67
// Jana = false ;
14017: LD_ADDR_EXP 9
14021: PUSH
14022: LD_INT 0
14024: ST_TO_ADDR
// end ; end ;
14025: PPOPN 2
14027: END
// on ApemanTamed ( ape , sci ) do begin Count_of_Apeman = Count_of_Apeman + 1 ;
14028: LD_ADDR_EXP 11
14032: PUSH
14033: LD_EXP 11
14037: PUSH
14038: LD_INT 1
14040: PLUS
14041: ST_TO_ADDR
// end ;
14042: PPOPN 2
14044: END
// export ApeTren ; on ResearchComplete ( tech , lab ) do begin if tech = tech_apeagres then
14045: LD_VAR 0 1
14049: PUSH
14050: LD_INT 11
14052: EQUAL
14053: IFFALSE 14125
// begin ApeTren = true ;
14055: LD_ADDR_EXP 60
14059: PUSH
14060: LD_INT 1
14062: ST_TO_ADDR
// Hint ( ApeT ) ;
14063: LD_STRING ApeT
14065: PPUSH
14066: CALL_OW 339
// if IsOk ( Jenna ) then
14070: LD_EXP 28
14074: PPUSH
14075: CALL_OW 302
14079: IFFALSE 14085
// DialogueOn ;
14081: CALL_OW 6
// Say ( Jenna , DJape1 ) ;
14085: LD_EXP 28
14089: PPUSH
14090: LD_STRING DJape1
14092: PPUSH
14093: CALL_OW 88
// Say ( Louis , DLape2 ) ;
14097: LD_EXP 19
14101: PPUSH
14102: LD_STRING DLape2
14104: PPUSH
14105: CALL_OW 88
// Say ( Jenna , DJape3 ) ;
14109: LD_EXP 28
14113: PPUSH
14114: LD_STRING DJape3
14116: PPUSH
14117: CALL_OW 88
// DialogueOff ;
14121: CALL_OW 7
// end ; end ;
14125: PPOPN 2
14127: END
// on UpgradeComplete ( b ) do begin if GetSide ( b ) = 5 then
14128: LD_VAR 0 1
14132: PPUSH
14133: CALL_OW 255
14137: PUSH
14138: LD_INT 5
14140: EQUAL
14141: IFFALSE 14167
// begin SayRadio ( Jan , OilW ) ;
14143: LD_EXP 23
14147: PPUSH
14148: LD_STRING OilW
14150: PPUSH
14151: CALL_OW 94
// ComEnterUnit ( Huan , ar_deps ) ;
14155: LD_EXP 24
14159: PPUSH
14160: LD_INT 8
14162: PPUSH
14163: CALL_OW 120
// end ; end ;
14167: PPOPN 1
14169: END
// on EnterBuilding ( b , un ) do begin if ApeTren = true then
14170: LD_EXP 60
14174: PUSH
14175: LD_INT 1
14177: EQUAL
14178: IFFALSE 14285
// begin if b = ar_depe then
14180: LD_VAR 0 1
14184: PUSH
14185: LD_INT 138
14187: EQUAL
14188: IFFALSE 14285
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) or un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) then
14190: LD_VAR 0 2
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 2
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 25
14207: PUSH
14208: LD_INT 12
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: IN
14224: PUSH
14225: LD_VAR 0 2
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_INT 2
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 25
14242: PUSH
14243: LD_INT 15
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: IN
14259: OR
14260: IFFALSE 14283
// begin Wait ( 0 0$0.3 ) ;
14262: LD_INT 10
14264: PPUSH
14265: CALL_OW 67
// SetClass ( un , 16 ) ;
14269: LD_VAR 0 2
14273: PPUSH
14274: LD_INT 16
14276: PPUSH
14277: CALL_OW 336
// end else
14281: GO 14285
// begin exit ;
14283: GO 14441
// end ; end ; if b = ar_lab1 then
14285: LD_VAR 0 1
14289: PUSH
14290: LD_INT 141
14292: EQUAL
14293: IFFALSE 14345
// begin if un = Jenna then
14295: LD_VAR 0 2
14299: PUSH
14300: LD_EXP 28
14304: EQUAL
14305: IFFALSE 14315
// begin InJ = false ;
14307: LD_ADDR_EXP 6
14311: PUSH
14312: LD_INT 0
14314: ST_TO_ADDR
// end ; if un = Rick then
14315: LD_VAR 0 2
14319: PUSH
14320: LD_EXP 31
14324: EQUAL
14325: IFFALSE 14345
// begin if InR = true then
14327: LD_EXP 5
14331: PUSH
14332: LD_INT 1
14334: EQUAL
14335: IFFALSE 14345
// InR = false ;
14337: LD_ADDR_EXP 5
14341: PUSH
14342: LD_INT 0
14344: ST_TO_ADDR
// end ; end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) then
14345: LD_VAR 0 2
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 25
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PPUSH
14374: CALL_OW 69
14378: IN
14379: IFFALSE 14393
// SetLives ( un , 1000 ) ;
14381: LD_VAR 0 2
14385: PPUSH
14386: LD_INT 1000
14388: PPUSH
14389: CALL_OW 234
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
14393: LD_VAR 0 2
14397: PUSH
14398: LD_INT 22
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 25
14410: PUSH
14411: LD_INT 2
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PPUSH
14422: CALL_OW 69
14426: IN
14427: IFFALSE 14441
// SetLives ( un , 1000 ) ;
14429: LD_VAR 0 2
14433: PPUSH
14434: LD_INT 1000
14436: PPUSH
14437: CALL_OW 234
// end ;
14441: PPOPN 2
14443: END
// on VehicleConstructed ( un , fac ) do begin if un in FilterAllUnits ( [ [ f_weapon , ar_radar ] , [ f_engine , engine_combustion ] ] ) then
14444: LD_VAR 0 1
14448: PUSH
14449: LD_INT 34
14451: PUSH
14452: LD_INT 30
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 32
14461: PUSH
14462: LD_INT 1
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 69
14477: IN
14478: IFFALSE 14498
// begin if ArRa = true then
14480: LD_EXP 8
14484: PUSH
14485: LD_INT 1
14487: EQUAL
14488: IFFALSE 14498
// ArRa = false ;
14490: LD_ADDR_EXP 8
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// end ; end ;
14498: PPOPN 2
14500: END
// every 0 0$01 do var i , veh , solar ;
14501: GO 14503
14503: DISABLE
14504: LD_INT 0
14506: PPUSH
14507: PPUSH
14508: PPUSH
// begin solar_recharge_percent := 0 ;
14509: LD_ADDR_OWVAR 79
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// solar = FilterAllUnits ( [ f_engine , engine_solar ] ) ;
14517: LD_ADDR_VAR 0 3
14521: PUSH
14522: LD_INT 32
14524: PUSH
14525: LD_INT 2
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PPUSH
14532: CALL_OW 69
14536: ST_TO_ADDR
// for i in solar do
14537: LD_ADDR_VAR 0 1
14541: PUSH
14542: LD_VAR 0 3
14546: PUSH
14547: FOR_IN
14548: IFFALSE 14579
// begin if GetFuel ( i ) > 0 then
14550: LD_VAR 0 1
14554: PPUSH
14555: CALL_OW 261
14559: PUSH
14560: LD_INT 0
14562: GREATER
14563: IFFALSE 14577
// SetFuel ( i , 0 ) ;
14565: LD_VAR 0 1
14569: PPUSH
14570: LD_INT 0
14572: PPUSH
14573: CALL_OW 240
// end ;
14577: GO 14547
14579: POP
14580: POP
// end ; end_of_file
14581: PPOPN 3
14583: END
// export function PrepareNature ; var l , apeman , tiger , bird ; begin
14584: LD_INT 0
14586: PPUSH
14587: PPUSH
14588: PPUSH
14589: PPUSH
14590: PPUSH
// uc_nation = nation_nature ;
14591: LD_ADDR_OWVAR 21
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// uc_side = 0 ;
14599: LD_ADDR_OWVAR 20
14603: PUSH
14604: LD_INT 0
14606: ST_TO_ADDR
// l = 0 ;
14607: LD_ADDR_VAR 0 2
14611: PUSH
14612: LD_INT 0
14614: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
14615: LD_ADDR_OWVAR 24
14619: PUSH
14620: LD_INT 0
14622: PPUSH
14623: LD_INT 5
14625: PPUSH
14626: CALL_OW 12
14630: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
14631: LD_ADDR_OWVAR 35
14635: PUSH
14636: LD_INT 5
14638: NEG
14639: PPUSH
14640: LD_INT 0
14642: PPUSH
14643: CALL_OW 12
14647: ST_TO_ADDR
// hc_gallery =  ;
14648: LD_ADDR_OWVAR 33
14652: PUSH
14653: LD_STRING 
14655: ST_TO_ADDR
// hc_class = class_apeman ;
14656: LD_ADDR_OWVAR 28
14660: PUSH
14661: LD_INT 12
14663: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
14664: LD_ADDR_OWVAR 29
14668: PUSH
14669: LD_INT 11
14671: PPUSH
14672: LD_INT 13
14674: PPUSH
14675: CALL_OW 12
14679: PUSH
14680: LD_INT 10
14682: PPUSH
14683: LD_INT 11
14685: PPUSH
14686: CALL_OW 12
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// hc_sex = sex_male ;
14695: LD_ADDR_OWVAR 27
14699: PUSH
14700: LD_INT 1
14702: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
14703: LD_ADDR_OWVAR 31
14707: PUSH
14708: LD_INT 0
14710: PPUSH
14711: LD_INT 2
14713: PPUSH
14714: CALL_OW 12
14718: PUSH
14719: LD_INT 0
14721: PUSH
14722: LD_INT 0
14724: PUSH
14725: LD_INT 0
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: ST_TO_ADDR
// apeman = CreateHuman ;
14734: LD_ADDR_VAR 0 3
14738: PUSH
14739: CALL_OW 44
14743: ST_TO_ADDR
// PlaceUnitArea ( apeman , forest , false ) ;
14744: LD_VAR 0 3
14748: PPUSH
14749: LD_INT 20
14751: PPUSH
14752: LD_INT 0
14754: PPUSH
14755: CALL_OW 49
// l = l + 1 ;
14759: LD_ADDR_VAR 0 2
14763: PUSH
14764: LD_VAR 0 2
14768: PUSH
14769: LD_INT 1
14771: PLUS
14772: ST_TO_ADDR
// end until l = 21 ;
14773: LD_VAR 0 2
14777: PUSH
14778: LD_INT 21
14780: EQUAL
14781: IFFALSE 14615
// l = 0 ;
14783: LD_ADDR_VAR 0 2
14787: PUSH
14788: LD_INT 0
14790: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
14791: LD_ADDR_OWVAR 35
14795: PUSH
14796: LD_INT 0
14798: PPUSH
14799: LD_INT 25
14801: PPUSH
14802: CALL_OW 12
14806: ST_TO_ADDR
// hc_class = class_tiger ;
14807: LD_ADDR_OWVAR 28
14811: PUSH
14812: LD_INT 14
14814: ST_TO_ADDR
// hc_sex = sex_male ;
14815: LD_ADDR_OWVAR 27
14819: PUSH
14820: LD_INT 1
14822: ST_TO_ADDR
// hc_gallery = sandnature ;
14823: LD_ADDR_OWVAR 33
14827: PUSH
14828: LD_STRING sandnature
14830: ST_TO_ADDR
// hc_face_number = 3 ;
14831: LD_ADDR_OWVAR 34
14835: PUSH
14836: LD_INT 3
14838: ST_TO_ADDR
// tiger = CreateHuman ;
14839: LD_ADDR_VAR 0 4
14843: PUSH
14844: CALL_OW 44
14848: ST_TO_ADDR
// PlaceUnitArea ( tiger , forest , false ) ;
14849: LD_VAR 0 4
14853: PPUSH
14854: LD_INT 20
14856: PPUSH
14857: LD_INT 0
14859: PPUSH
14860: CALL_OW 49
// l = l + 1 ;
14864: LD_ADDR_VAR 0 2
14868: PUSH
14869: LD_VAR 0 2
14873: PUSH
14874: LD_INT 1
14876: PLUS
14877: ST_TO_ADDR
// end until l = 3 ;
14878: LD_VAR 0 2
14882: PUSH
14883: LD_INT 3
14885: EQUAL
14886: IFFALSE 14791
// l = 0 ;
14888: LD_ADDR_VAR 0 2
14892: PUSH
14893: LD_INT 0
14895: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
14896: LD_ADDR_OWVAR 28
14900: PUSH
14901: LD_INT 18
14903: ST_TO_ADDR
// hc_gallery = sandnature ;
14904: LD_ADDR_OWVAR 33
14908: PUSH
14909: LD_STRING sandnature
14911: ST_TO_ADDR
// hc_face_number = 1 ;
14912: LD_ADDR_OWVAR 34
14916: PUSH
14917: LD_INT 1
14919: ST_TO_ADDR
// bird = CreateHuman ;
14920: LD_ADDR_VAR 0 5
14924: PUSH
14925: CALL_OW 44
14929: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
14930: LD_VAR 0 5
14934: PPUSH
14935: LD_INT 0
14937: PPUSH
14938: CALL_OW 51
// l = l + 1 ;
14942: LD_ADDR_VAR 0 2
14946: PUSH
14947: LD_VAR 0 2
14951: PUSH
14952: LD_INT 1
14954: PLUS
14955: ST_TO_ADDR
// end until l = 5 ;
14956: LD_VAR 0 2
14960: PUSH
14961: LD_INT 5
14963: EQUAL
14964: IFFALSE 14896
// end ;
14966: LD_VAR 0 1
14970: RET
// every 21 21$00 do var apeman ;
14971: GO 14973
14973: DISABLE
14974: LD_INT 0
14976: PPUSH
// begin Wait ( Rand ( 0 0$10 , 1 1$00 ) ) ;
14977: LD_INT 350
14979: PPUSH
14980: LD_INT 2100
14982: PPUSH
14983: CALL_OW 12
14987: PPUSH
14988: CALL_OW 67
// uc_nation = nation_nature ;
14992: LD_ADDR_OWVAR 21
14996: PUSH
14997: LD_INT 0
14999: ST_TO_ADDR
// uc_side = 0 ;
15000: LD_ADDR_OWVAR 20
15004: PUSH
15005: LD_INT 0
15007: ST_TO_ADDR
// uc_direction = Rand ( 0 , 5 ) ;
15008: LD_ADDR_OWVAR 24
15012: PUSH
15013: LD_INT 0
15015: PPUSH
15016: LD_INT 5
15018: PPUSH
15019: CALL_OW 12
15023: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 0 ) ;
15024: LD_ADDR_OWVAR 35
15028: PUSH
15029: LD_INT 5
15031: NEG
15032: PPUSH
15033: LD_INT 0
15035: PPUSH
15036: CALL_OW 12
15040: ST_TO_ADDR
// hc_gallery =  ;
15041: LD_ADDR_OWVAR 33
15045: PUSH
15046: LD_STRING 
15048: ST_TO_ADDR
// hc_class = class_apeman ;
15049: LD_ADDR_OWVAR 28
15053: PUSH
15054: LD_INT 12
15056: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
15057: LD_ADDR_OWVAR 29
15061: PUSH
15062: LD_INT 11
15064: PPUSH
15065: LD_INT 13
15067: PPUSH
15068: CALL_OW 12
15072: PUSH
15073: LD_INT 10
15075: PPUSH
15076: LD_INT 11
15078: PPUSH
15079: CALL_OW 12
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: ST_TO_ADDR
// hc_sex = sex_male ;
15088: LD_ADDR_OWVAR 27
15092: PUSH
15093: LD_INT 1
15095: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 3 ) , 0 , 0 , 0 ] ;
15096: LD_ADDR_OWVAR 31
15100: PUSH
15101: LD_INT 0
15103: PPUSH
15104: LD_INT 3
15106: PPUSH
15107: CALL_OW 12
15111: PUSH
15112: LD_INT 0
15114: PUSH
15115: LD_INT 0
15117: PUSH
15118: LD_INT 0
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: ST_TO_ADDR
// apeman = CreateHuman ;
15127: LD_ADDR_VAR 0 1
15131: PUSH
15132: CALL_OW 44
15136: ST_TO_ADDR
// PlaceUnitArea ( apeman , forest , false ) ;
15137: LD_VAR 0 1
15141: PPUSH
15142: LD_INT 20
15144: PPUSH
15145: LD_INT 0
15147: PPUSH
15148: CALL_OW 49
// enable ;
15152: ENABLE
// end ; end_of_file
15153: PPOPN 1
15155: END
// export Abdul ; export function PrepareSheik ; begin
15156: LD_INT 0
15158: PPUSH
// uc_side = 8 ;
15159: LD_ADDR_OWVAR 20
15163: PUSH
15164: LD_INT 8
15166: ST_TO_ADDR
// uc_nation = 2 ;
15167: LD_ADDR_OWVAR 21
15171: PUSH
15172: LD_INT 2
15174: ST_TO_ADDR
// if TestCharacters ( Abdul ) then
15175: LD_STRING Abdul
15177: PPUSH
15178: CALL_OW 28
15182: IFFALSE 15232
// begin Abdul := CreateCharacter ( Abdul ) ;
15184: LD_ADDR_EXP 61
15188: PUSH
15189: LD_STRING Abdul
15191: PPUSH
15192: CALL_OW 34
15196: ST_TO_ADDR
// PlaceUnitXY ( Abdul , 200 , 143 , false ) ;
15197: LD_EXP 61
15201: PPUSH
15202: LD_INT 200
15204: PPUSH
15205: LD_INT 143
15207: PPUSH
15208: LD_INT 0
15210: PPUSH
15211: CALL_OW 48
// ComTurnXY ( Abdul , 200 , 153 ) ;
15215: LD_EXP 61
15219: PPUSH
15220: LD_INT 200
15222: PPUSH
15223: LD_INT 153
15225: PPUSH
15226: CALL_OW 118
// end else
15230: GO 15369
// begin hc_class = 11 ;
15232: LD_ADDR_OWVAR 28
15236: PUSH
15237: LD_INT 11
15239: ST_TO_ADDR
// hc_name = Abdul Ali Liser ;
15240: LD_ADDR_OWVAR 26
15244: PUSH
15245: LD_STRING Abdul Ali Liser
15247: ST_TO_ADDR
// hc_gallery = E3galery ;
15248: LD_ADDR_OWVAR 33
15252: PUSH
15253: LD_STRING E3galery
15255: ST_TO_ADDR
// hc_face_number = 4 ;
15256: LD_ADDR_OWVAR 34
15260: PUSH
15261: LD_INT 4
15263: ST_TO_ADDR
// hc_skills = [ 7 , 3 , 4 , 5 ] ;
15264: LD_ADDR_OWVAR 31
15268: PUSH
15269: LD_INT 7
15271: PUSH
15272: LD_INT 3
15274: PUSH
15275: LD_INT 4
15277: PUSH
15278: LD_INT 5
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: ST_TO_ADDR
// hc_sex = sex_male ;
15287: LD_ADDR_OWVAR 27
15291: PUSH
15292: LD_INT 1
15294: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 12 ) , Rand ( 10 , 12 ) ] ;
15295: LD_ADDR_OWVAR 29
15299: PUSH
15300: LD_INT 9
15302: PPUSH
15303: LD_INT 12
15305: PPUSH
15306: CALL_OW 12
15310: PUSH
15311: LD_INT 10
15313: PPUSH
15314: LD_INT 12
15316: PPUSH
15317: CALL_OW 12
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: ST_TO_ADDR
// Abdul = CreateHuman ;
15326: LD_ADDR_EXP 61
15330: PUSH
15331: CALL_OW 44
15335: ST_TO_ADDR
// PlaceUnitXY ( Abdul , 200 , 143 , false ) ;
15336: LD_EXP 61
15340: PPUSH
15341: LD_INT 200
15343: PPUSH
15344: LD_INT 143
15346: PPUSH
15347: LD_INT 0
15349: PPUSH
15350: CALL_OW 48
// ComTurnXY ( Abdul , 200 , 153 ) ;
15354: LD_EXP 61
15358: PPUSH
15359: LD_INT 200
15361: PPUSH
15362: LD_INT 153
15364: PPUSH
15365: CALL_OW 118
// end ; ComTurnUnit ( Elephant , Abdul ) ;
15369: LD_INT 165
15371: PPUSH
15372: LD_EXP 61
15376: PPUSH
15377: CALL_OW 119
// end ; end_of_file
15381: LD_VAR 0 1
15385: RET
// export time , limit , base ; every 0 0$01 do
15386: GO 15388
15388: DISABLE
// begin time = 0 ;
15389: LD_ADDR_EXP 62
15393: PUSH
15394: LD_INT 0
15396: ST_TO_ADDR
// limit = [ 44 44$00 , 42 42$00 , 40 40$00 ] [ Difficulty ] ;
15397: LD_ADDR_EXP 63
15401: PUSH
15402: LD_INT 92400
15404: PUSH
15405: LD_INT 88200
15407: PUSH
15408: LD_INT 84000
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: LD_OWVAR 67
15420: ARRAY
15421: ST_TO_ADDR
// end ;
15422: END
// every 0 0$01 trigger CounterStart = true do
15423: LD_EXP 14
15427: PUSH
15428: LD_INT 1
15430: EQUAL
15431: IFFALSE 15499
15433: GO 15435
15435: DISABLE
// begin enable ;
15436: ENABLE
// Display_strings := [ #Ar03-1 , time , #Ar03-2 , base ] ;
15437: LD_ADDR_OWVAR 47
15441: PUSH
15442: LD_STRING #Ar03-1
15444: PUSH
15445: LD_EXP 62
15449: PUSH
15450: LD_STRING #Ar03-2
15452: PUSH
15453: LD_EXP 64
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: ST_TO_ADDR
// time = time + 0 0$01 ;
15464: LD_ADDR_EXP 62
15468: PUSH
15469: LD_EXP 62
15473: PUSH
15474: LD_INT 35
15476: PLUS
15477: ST_TO_ADDR
// base = GetResourceType ( GetBase ( ar_deps ) , mat_cans ) ;
15478: LD_ADDR_EXP 64
15482: PUSH
15483: LD_INT 8
15485: PPUSH
15486: CALL_OW 274
15490: PPUSH
15491: LD_INT 1
15493: PPUSH
15494: CALL_OW 275
15498: ST_TO_ADDR
// end ;
15499: END
// every 0 0$01 trigger Count_of_Apeman >= 6 do
15500: LD_EXP 11
15504: PUSH
15505: LD_INT 6
15507: GREATEREQUAL
15508: IFFALSE 15530
15510: GO 15512
15512: DISABLE
// begin if Difficulty = 1 then
15513: LD_OWVAR 67
15517: PUSH
15518: LD_INT 1
15520: EQUAL
15521: IFFALSE 15530
// ChangeMissionObjectives ( ApeOt ) end ;
15523: LD_STRING ApeOt
15525: PPUSH
15526: CALL_OW 337
15530: END
// every 0 0$01 trigger Count_of_Apeman >= 8 do
15531: LD_EXP 11
15535: PUSH
15536: LD_INT 8
15538: GREATEREQUAL
15539: IFFALSE 15561
15541: GO 15543
15543: DISABLE
// begin if Difficulty = 2 then
15544: LD_OWVAR 67
15548: PUSH
15549: LD_INT 2
15551: EQUAL
15552: IFFALSE 15561
// ChangeMissionObjectives ( ApeOt ) end ;
15554: LD_STRING ApeOt
15556: PPUSH
15557: CALL_OW 337
15561: END
// every 0 0$01 trigger Count_of_Apeman >= 10 do
15562: LD_EXP 11
15566: PUSH
15567: LD_INT 10
15569: GREATEREQUAL
15570: IFFALSE 15592
15572: GO 15574
15574: DISABLE
// begin if Difficulty = 3 then
15575: LD_OWVAR 67
15579: PUSH
15580: LD_INT 3
15582: EQUAL
15583: IFFALSE 15592
// ChangeMissionObjectives ( ApeOt ) end ;
15585: LD_STRING ApeOt
15587: PPUSH
15588: CALL_OW 337
15592: END
// every 0 0$01 trigger base >= 800 and Difficulty = 1 do
15593: LD_EXP 64
15597: PUSH
15598: LD_INT 800
15600: GREATEREQUAL
15601: PUSH
15602: LD_OWVAR 67
15606: PUSH
15607: LD_INT 1
15609: EQUAL
15610: AND
15611: IFFALSE 15620
15613: GO 15615
15615: DISABLE
// begin EndGame ;
15616: CALL 15677 0 0
// end ;
15620: END
// every 0 0$01 trigger base >= 1000 and Difficulty = 2 do
15621: LD_EXP 64
15625: PUSH
15626: LD_INT 1000
15628: GREATEREQUAL
15629: PUSH
15630: LD_OWVAR 67
15634: PUSH
15635: LD_INT 2
15637: EQUAL
15638: AND
15639: IFFALSE 15648
15641: GO 15643
15643: DISABLE
// begin EndGame ;
15644: CALL 15677 0 0
// end ;
15648: END
// every 0 0$01 trigger base >= 1300 and Difficulty = 3 do
15649: LD_EXP 64
15653: PUSH
15654: LD_INT 1300
15656: GREATEREQUAL
15657: PUSH
15658: LD_OWVAR 67
15662: PUSH
15663: LD_INT 3
15665: EQUAL
15666: AND
15667: IFFALSE 15676
15669: GO 15671
15671: DISABLE
// begin EndGame ;
15672: CALL 15677 0 0
// end ;
15676: END
// export function EndGame ; begin
15677: LD_INT 0
15679: PPUSH
// Wait ( 0 0$03 ) ;
15680: LD_INT 105
15682: PPUSH
15683: CALL_OW 67
// InGameOn ;
15687: CALL_OW 8
// DialogueOn ;
15691: CALL_OW 6
// CenterNowOnUnits ( Louis ) ;
15695: LD_EXP 19
15699: PPUSH
15700: CALL_OW 87
// SayRadio ( Jan , DDJcend ) ;
15704: LD_EXP 23
15708: PPUSH
15709: LD_STRING DDJcend
15711: PPUSH
15712: CALL_OW 94
// Say ( Louis , DDLcend ) ;
15716: LD_EXP 19
15720: PPUSH
15721: LD_STRING DDLcend
15723: PPUSH
15724: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
15728: LD_INT 10
15730: PPUSH
15731: CALL_OW 68
// if time > limit then
15735: LD_EXP 62
15739: PUSH
15740: LD_EXP 63
15744: GREATER
15745: IFFALSE 15760
// begin AddMedal ( Timeing , - 1 ) ;
15747: LD_STRING Timeing
15749: PPUSH
15750: LD_INT 1
15752: NEG
15753: PPUSH
15754: CALL_OW 101
// end else
15758: GO 15770
// begin AddMedal ( Timeing , 1 ) ;
15760: LD_STRING Timeing
15762: PPUSH
15763: LD_INT 1
15765: PPUSH
15766: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_radar ] ] ) > 0 then
15770: LD_INT 22
15772: PUSH
15773: LD_INT 2
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 34
15782: PUSH
15783: LD_INT 30
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL_OW 69
15798: PUSH
15799: LD_INT 0
15801: GREATER
15802: IFFALSE 15816
// begin AddMedal ( RadarC , 1 ) ;
15804: LD_STRING RadarC
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 101
// end else
15814: GO 15827
// begin AddMedal ( RadarC , - 1 ) ;
15816: LD_STRING RadarC
15818: PPUSH
15819: LD_INT 1
15821: NEG
15822: PPUSH
15823: CALL_OW 101
// end ; if Count_of_Apeman >= [ 6 , 8 , 10 ] [ Difficulty ] then
15827: LD_EXP 11
15831: PUSH
15832: LD_INT 6
15834: PUSH
15835: LD_INT 8
15837: PUSH
15838: LD_INT 10
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: LIST
15845: PUSH
15846: LD_OWVAR 67
15850: ARRAY
15851: GREATEREQUAL
15852: IFFALSE 15866
// begin AddMedal ( ApeTam , 1 ) ;
15854: LD_STRING ApeTam
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 101
// end else
15864: GO 15877
// begin AddMedal ( ApeTam , - 1 ) ;
15866: LD_STRING ApeTam
15868: PPUSH
15869: LD_INT 1
15871: NEG
15872: PPUSH
15873: CALL_OW 101
// end ; music_nat = 4 ;
15877: LD_ADDR_OWVAR 71
15881: PUSH
15882: LD_INT 4
15884: ST_TO_ADDR
// GiveMedals ( MAIN ) ;
15885: LD_STRING MAIN
15887: PPUSH
15888: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
15892: LD_INT 22
15894: PUSH
15895: LD_INT 2
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 21
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PPUSH
15916: CALL_OW 69
15920: PPUSH
15921: CALL_OW 43
// if Jenna then
15925: LD_EXP 28
15929: IFFALSE 15991
// begin AddExperience ( Jenna , 1 , 1234 ) ;
15931: LD_EXP 28
15935: PPUSH
15936: LD_INT 1
15938: PPUSH
15939: LD_INT 1234
15941: PPUSH
15942: CALL_OW 492
// AddExperience ( Jenna , 2 , 4356 ) ;
15946: LD_EXP 28
15950: PPUSH
15951: LD_INT 2
15953: PPUSH
15954: LD_INT 4356
15956: PPUSH
15957: CALL_OW 492
// AddExperience ( Jenna , 3 , 6759 ) ;
15961: LD_EXP 28
15965: PPUSH
15966: LD_INT 3
15968: PPUSH
15969: LD_INT 6759
15971: PPUSH
15972: CALL_OW 492
// AddExperience ( Jenna , 4 , 21678 ) ;
15976: LD_EXP 28
15980: PPUSH
15981: LD_INT 4
15983: PPUSH
15984: LD_INT 21678
15986: PPUSH
15987: CALL_OW 492
// end ; if Gali then
15991: LD_EXP 26
15995: IFFALSE 16057
// begin AddExperience ( Gali , 1 , 4500 ) ;
15997: LD_EXP 26
16001: PPUSH
16002: LD_INT 1
16004: PPUSH
16005: LD_INT 4500
16007: PPUSH
16008: CALL_OW 492
// AddExperience ( Gali , 2 , 10000 ) ;
16012: LD_EXP 26
16016: PPUSH
16017: LD_INT 2
16019: PPUSH
16020: LD_INT 10000
16022: PPUSH
16023: CALL_OW 492
// AddExperience ( Gali , 3 , 2500 ) ;
16027: LD_EXP 26
16031: PPUSH
16032: LD_INT 3
16034: PPUSH
16035: LD_INT 2500
16037: PPUSH
16038: CALL_OW 492
// AddExperience ( Gali , 4 , 110 ) ;
16042: LD_EXP 26
16046: PPUSH
16047: LD_INT 4
16049: PPUSH
16050: LD_INT 110
16052: PPUSH
16053: CALL_OW 492
// end ; if Hubert then
16057: LD_EXP 29
16061: IFFALSE 16123
// begin AddExperience ( Hubert , 1 , 12000 ) ;
16063: LD_EXP 29
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: LD_INT 12000
16073: PPUSH
16074: CALL_OW 492
// AddExperience ( Hubert , 2 , 5466 ) ;
16078: LD_EXP 29
16082: PPUSH
16083: LD_INT 2
16085: PPUSH
16086: LD_INT 5466
16088: PPUSH
16089: CALL_OW 492
// AddExperience ( Hubert , 3 , 1230 ) ;
16093: LD_EXP 29
16097: PPUSH
16098: LD_INT 3
16100: PPUSH
16101: LD_INT 1230
16103: PPUSH
16104: CALL_OW 492
// AddExperience ( Hubert , 4 , 456 ) ;
16108: LD_EXP 29
16112: PPUSH
16113: LD_INT 4
16115: PPUSH
16116: LD_INT 456
16118: PPUSH
16119: CALL_OW 492
// end ; if Mike then
16123: LD_EXP 27
16127: IFFALSE 16189
// begin AddExperience ( Mike , 1 , 21000 ) ;
16129: LD_EXP 27
16133: PPUSH
16134: LD_INT 1
16136: PPUSH
16137: LD_INT 21000
16139: PPUSH
16140: CALL_OW 492
// AddExperience ( Mike , 2 , 5000 ) ;
16144: LD_EXP 27
16148: PPUSH
16149: LD_INT 2
16151: PPUSH
16152: LD_INT 5000
16154: PPUSH
16155: CALL_OW 492
// AddExperience ( Mike , 3 , 11000 ) ;
16159: LD_EXP 27
16163: PPUSH
16164: LD_INT 3
16166: PPUSH
16167: LD_INT 11000
16169: PPUSH
16170: CALL_OW 492
// AddExperience ( Mike , 4 , 4300 ) ;
16174: LD_EXP 27
16178: PPUSH
16179: LD_INT 4
16181: PPUSH
16182: LD_INT 4300
16184: PPUSH
16185: CALL_OW 492
// end ; if Rick then
16189: LD_EXP 31
16193: IFFALSE 16255
// begin AddExperience ( Rick , 1 , 4300 ) ;
16195: LD_EXP 31
16199: PPUSH
16200: LD_INT 1
16202: PPUSH
16203: LD_INT 4300
16205: PPUSH
16206: CALL_OW 492
// AddExperience ( Rick , 2 , 7800 ) ;
16210: LD_EXP 31
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_INT 7800
16220: PPUSH
16221: CALL_OW 492
// AddExperience ( Rick , 3 , 8000 ) ;
16225: LD_EXP 31
16229: PPUSH
16230: LD_INT 3
16232: PPUSH
16233: LD_INT 8000
16235: PPUSH
16236: CALL_OW 492
// AddExperience ( Rick , 4 , 19020 ) ;
16240: LD_EXP 31
16244: PPUSH
16245: LD_INT 4
16247: PPUSH
16248: LD_INT 19020
16250: PPUSH
16251: CALL_OW 492
// end ; SaveCharacters ( Louis , Louis ) ;
16255: LD_EXP 19
16259: PPUSH
16260: LD_STRING Louis
16262: PPUSH
16263: CALL_OW 38
// if IsLive ( Jan ) then
16267: LD_EXP 23
16271: PPUSH
16272: CALL_OW 300
16276: IFFALSE 16290
// begin SaveCharacters ( Jan , Jan_03 ) ;
16278: LD_EXP 23
16282: PPUSH
16283: LD_STRING Jan_03
16285: PPUSH
16286: CALL_OW 38
// end ; if IsLive ( Gali ) then
16290: LD_EXP 26
16294: PPUSH
16295: CALL_OW 300
16299: IFFALSE 16313
// begin SaveCharacters ( Gali , Gali_03 ) ;
16301: LD_EXP 26
16305: PPUSH
16306: LD_STRING Gali_03
16308: PPUSH
16309: CALL_OW 38
// end ; if IsLive ( Mike ) then
16313: LD_EXP 27
16317: PPUSH
16318: CALL_OW 300
16322: IFFALSE 16336
// begin SaveCharacters ( Mike , Mike_03 ) ;
16324: LD_EXP 27
16328: PPUSH
16329: LD_STRING Mike_03
16331: PPUSH
16332: CALL_OW 38
// end ; if IsLive ( Jenna ) then
16336: LD_EXP 28
16340: PPUSH
16341: CALL_OW 300
16345: IFFALSE 16359
// begin SaveCharacters ( Jenna , Jenna_03 ) ;
16347: LD_EXP 28
16351: PPUSH
16352: LD_STRING Jenna_03
16354: PPUSH
16355: CALL_OW 38
// end ; if IsLive ( Hubert ) then
16359: LD_EXP 29
16363: PPUSH
16364: CALL_OW 300
16368: IFFALSE 16382
// begin SaveCharacters ( Hubert , Nicolas_03 ) ;
16370: LD_EXP 29
16374: PPUSH
16375: LD_STRING Nicolas_03
16377: PPUSH
16378: CALL_OW 38
// end ; if IsLive ( Rick ) and GetSide ( Rick ) = 2 then
16382: LD_EXP 31
16386: PPUSH
16387: CALL_OW 300
16391: PUSH
16392: LD_EXP 31
16396: PPUSH
16397: CALL_OW 255
16401: PUSH
16402: LD_INT 2
16404: EQUAL
16405: AND
16406: IFFALSE 16420
// begin SaveCharacters ( Rick , Rick_03 ) ;
16408: LD_EXP 31
16412: PPUSH
16413: LD_STRING Rick_03
16415: PPUSH
16416: CALL_OW 38
// end ; if IsLive ( dow ) then
16420: LD_EXP 34
16424: PPUSH
16425: CALL_OW 300
16429: IFFALSE 16443
// begin SaveCharacters ( dow , Sikorski ) ;
16431: LD_EXP 34
16435: PPUSH
16436: LD_STRING Sikorski
16438: PPUSH
16439: CALL_OW 38
// end ; YouWin ;
16443: CALL_OW 103
// SetNextMission ( 1 ) ;
16447: LD_INT 1
16449: PPUSH
16450: CALL_OW 536
// end ;
16454: LD_VAR 0 1
16458: RET
// every 3 3$40 trigger GetSide ( ar_depe ) = 2 do
16459: LD_INT 138
16461: PPUSH
16462: CALL_OW 255
16466: PUSH
16467: LD_INT 2
16469: EQUAL
16470: IFFALSE 16621
16472: GO 16474
16474: DISABLE
// begin enable ;
16475: ENABLE
// if Time < 10 10$0 then
16476: LD_EXP 62
16480: PUSH
16481: LD_INT 21000
16483: LESS
16484: IFFALSE 16543
// begin CreateCratesArea ( Rand ( 3 , 5 ) , CratesBonusArea , true ) ;
16486: LD_INT 3
16488: PPUSH
16489: LD_INT 5
16491: PPUSH
16492: CALL_OW 12
16496: PPUSH
16497: LD_INT 5
16499: PPUSH
16500: LD_INT 1
16502: PPUSH
16503: CALL_OW 55
// Wait ( Rand ( 0 0$45 , 1 1$25 ) ) ;
16507: LD_INT 1575
16509: PPUSH
16510: LD_INT 2975
16512: PPUSH
16513: CALL_OW 12
16517: PPUSH
16518: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , CratesBonusArea , true ) ;
16522: LD_INT 3
16524: PPUSH
16525: LD_INT 5
16527: PPUSH
16528: CALL_OW 12
16532: PPUSH
16533: LD_INT 5
16535: PPUSH
16536: LD_INT 1
16538: PPUSH
16539: CALL_OW 55
// end ; if Time > 10 10$0 then
16543: LD_EXP 62
16547: PUSH
16548: LD_INT 21000
16550: GREATER
16551: IFFALSE 16610
// begin CreateCratesArea ( Rand ( 1 , 3 ) , CratesBonusArea , true ) ;
16553: LD_INT 1
16555: PPUSH
16556: LD_INT 3
16558: PPUSH
16559: CALL_OW 12
16563: PPUSH
16564: LD_INT 5
16566: PPUSH
16567: LD_INT 1
16569: PPUSH
16570: CALL_OW 55
// Wait ( Rand ( 1 1$15 , 2 2$25 ) ) ;
16574: LD_INT 2625
16576: PPUSH
16577: LD_INT 5075
16579: PPUSH
16580: CALL_OW 12
16584: PPUSH
16585: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 2 ) , CratesBonusArea , true ) ;
16589: LD_INT 1
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: CALL_OW 12
16599: PPUSH
16600: LD_INT 5
16602: PPUSH
16603: LD_INT 1
16605: PPUSH
16606: CALL_OW 55
// end ; if Time > 35 35$0 then
16610: LD_EXP 62
16614: PUSH
16615: LD_INT 73500
16617: GREATER
16618: IFFALSE 16621
// disable ;
16620: DISABLE
// end ; end_of_file
16621: END
// every 0 0$01 trigger Louis do
16622: LD_EXP 19
16626: IFFALSE 16675
16628: GO 16630
16630: DISABLE
// begin while ( true ) do
16631: LD_INT 1
16633: IFFALSE 16675
// begin music_nat := 1 ;
16635: LD_ADDR_OWVAR 71
16639: PUSH
16640: LD_INT 1
16642: ST_TO_ADDR
// Wait ( Rand ( 3 3$00 , 5 5$00 ) ) ;
16643: LD_INT 6300
16645: PPUSH
16646: LD_INT 10500
16648: PPUSH
16649: CALL_OW 12
16653: PPUSH
16654: CALL_OW 67
// music_nat := 2 ;
16658: LD_ADDR_OWVAR 71
16662: PUSH
16663: LD_INT 2
16665: ST_TO_ADDR
// Wait ( 2 2$10 ) ;
16666: LD_INT 4550
16668: PPUSH
16669: CALL_OW 67
// end ;
16673: GO 16631
// end ; end_of_file
16675: END
// export function Attack ( unit , enemy_side , path , target ) ; var i , filter , all_vehs , capture_mode ; begin
16676: LD_INT 0
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
16682: PPUSH
// filter := FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_dist , unit , 20 ] ] ) ;
16683: LD_ADDR_VAR 0 7
16687: PUSH
16688: LD_INT 22
16690: PUSH
16691: LD_VAR 0 2
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 91
16702: PUSH
16703: LD_VAR 0 1
16707: PUSH
16708: LD_INT 20
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PPUSH
16720: CALL_OW 69
16724: ST_TO_ADDR
// all_vehs := FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_type , unit_vehicle ] ] ) ;
16725: LD_ADDR_VAR 0 8
16729: PUSH
16730: LD_INT 22
16732: PUSH
16733: LD_VAR 0 2
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 21
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PPUSH
16756: CALL_OW 69
16760: ST_TO_ADDR
// capture_mode := false ;
16761: LD_ADDR_VAR 0 9
16765: PUSH
16766: LD_INT 0
16768: ST_TO_ADDR
// for i = 1 to target do
16769: LD_ADDR_VAR 0 6
16773: PUSH
16774: DOUBLE
16775: LD_INT 1
16777: DEC
16778: ST_TO_ADDR
16779: LD_VAR 0 4
16783: PUSH
16784: FOR_TO
16785: IFFALSE 17345
// begin case target [ i ] of towers :
16787: LD_VAR 0 4
16791: PUSH
16792: LD_VAR 0 6
16796: ARRAY
16797: PUSH
16798: LD_STRING towers
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16880
16806: POP
// filter := filter diff FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ; tanks :
16807: LD_ADDR_VAR 0 7
16811: PUSH
16812: LD_VAR 0 7
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_VAR 0 2
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 2
16831: PUSH
16832: LD_INT 30
16834: PUSH
16835: LD_INT 31
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 30
16844: PUSH
16845: LD_INT 32
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 30
16854: PUSH
16855: LD_INT 33
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PPUSH
16872: CALL_OW 69
16876: DIFF
16877: ST_TO_ADDR
16878: GO 17343
16880: LD_STRING tanks
16882: DOUBLE
16883: EQUAL
16884: IFTRUE 16888
16886: GO 16933
16888: POP
// filter := filter diff FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_type , unit_vehicle ] ] ) ; soldiers :
16889: LD_ADDR_VAR 0 7
16893: PUSH
16894: LD_VAR 0 7
16898: PUSH
16899: LD_INT 22
16901: PUSH
16902: LD_VAR 0 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 21
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PPUSH
16925: CALL_OW 69
16929: DIFF
16930: ST_TO_ADDR
16931: GO 17343
16933: LD_STRING soldiers
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 16986
16941: POP
// filter := filter diff FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_class , 1 ] ] ) ; civils :
16942: LD_ADDR_VAR 0 7
16946: PUSH
16947: LD_VAR 0 7
16951: PUSH
16952: LD_INT 22
16954: PUSH
16955: LD_VAR 0 2
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 25
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PPUSH
16978: CALL_OW 69
16982: DIFF
16983: ST_TO_ADDR
16984: GO 17343
16986: LD_STRING civils
16988: DOUBLE
16989: EQUAL
16990: IFTRUE 16994
16992: GO 17068
16994: POP
// filter := filter diff FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ; buildings :
16995: LD_ADDR_VAR 0 7
16999: PUSH
17000: LD_VAR 0 7
17004: PUSH
17005: LD_INT 22
17007: PUSH
17008: LD_VAR 0 2
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: LD_INT 25
17022: PUSH
17023: LD_INT 2
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 25
17032: PUSH
17033: LD_INT 3
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 25
17042: PUSH
17043: LD_INT 4
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PPUSH
17060: CALL_OW 69
17064: DIFF
17065: ST_TO_ADDR
17066: GO 17343
17068: LD_STRING buildings
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17121
17076: POP
// filter := filter diff FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_type , unit_building ] ] ) ; empty_buildings :
17077: LD_ADDR_VAR 0 7
17081: PUSH
17082: LD_VAR 0 7
17086: PUSH
17087: LD_INT 22
17089: PUSH
17090: LD_VAR 0 2
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 21
17101: PUSH
17102: LD_INT 3
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PPUSH
17113: CALL_OW 69
17117: DIFF
17118: ST_TO_ADDR
17119: GO 17343
17121: LD_STRING empty_buildings
17123: DOUBLE
17124: EQUAL
17125: IFTRUE 17129
17127: GO 17181
17129: POP
// filter := filter diff FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ; empty_vehicles :
17130: LD_ADDR_VAR 0 7
17134: PUSH
17135: LD_VAR 0 7
17139: PUSH
17140: LD_INT 22
17142: PUSH
17143: LD_VAR 0 2
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 21
17154: PUSH
17155: LD_INT 3
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 58
17164: PUSH
17165: EMPTY
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: PPUSH
17173: CALL_OW 69
17177: DIFF
17178: ST_TO_ADDR
17179: GO 17343
17181: LD_STRING empty_vehicles
17183: DOUBLE
17184: EQUAL
17185: IFTRUE 17189
17187: GO 17241
17189: POP
// filter := filter diff FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ; electro :
17190: LD_ADDR_VAR 0 7
17194: PUSH
17195: LD_VAR 0 7
17199: PUSH
17200: LD_INT 22
17202: PUSH
17203: LD_VAR 0 2
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 21
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 58
17224: PUSH
17225: EMPTY
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: DIFF
17238: ST_TO_ADDR
17239: GO 17343
17241: LD_STRING electro
17243: DOUBLE
17244: EQUAL
17245: IFTRUE 17249
17247: GO 17323
17249: POP
// filter := filter diff FilterAllUnits ( [ [ f_side , enemy_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ; capture_vehicle :
17250: LD_ADDR_VAR 0 7
17254: PUSH
17255: LD_VAR 0 7
17259: PUSH
17260: LD_INT 22
17262: PUSH
17263: LD_VAR 0 2
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 2
17274: PUSH
17275: LD_INT 30
17277: PUSH
17278: LD_INT 27
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 30
17287: PUSH
17288: LD_INT 26
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 30
17297: PUSH
17298: LD_INT 28
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: DIFF
17320: ST_TO_ADDR
17321: GO 17343
17323: LD_STRING capture_vehicle
17325: DOUBLE
17326: EQUAL
17327: IFTRUE 17331
17329: GO 17342
17331: POP
// capture_mode := true ; end ;
17332: LD_ADDR_VAR 0 9
17336: PUSH
17337: LD_INT 1
17339: ST_TO_ADDR
17340: GO 17343
17342: POP
// end ;
17343: GO 16784
17345: POP
17346: POP
// if not WantsToAttack ( unit ) then
17347: LD_VAR 0 1
17351: PPUSH
17352: CALL_OW 319
17356: NOT
17357: IFFALSE 17559
// begin if filter then
17359: LD_VAR 0 7
17363: IFFALSE 17391
// begin ComAttackUnit ( unit , NearestUnitToUnit ( filter , unit ) ) ;
17365: LD_VAR 0 1
17369: PPUSH
17370: LD_VAR 0 7
17374: PPUSH
17375: LD_VAR 0 1
17379: PPUSH
17380: CALL_OW 74
17384: PPUSH
17385: CALL_OW 115
// end else
17389: GO 17451
// if GetDistUnitXY ( unit , path [ 1 ] , path [ 2 ] ) > 7 then
17391: LD_VAR 0 1
17395: PPUSH
17396: LD_VAR 0 3
17400: PUSH
17401: LD_INT 1
17403: ARRAY
17404: PPUSH
17405: LD_VAR 0 3
17409: PUSH
17410: LD_INT 2
17412: ARRAY
17413: PPUSH
17414: CALL_OW 297
17418: PUSH
17419: LD_INT 7
17421: GREATER
17422: IFFALSE 17451
// ComMoveXY ( unit , path [ 1 ] , path [ 2 ] ) ;
17424: LD_VAR 0 1
17428: PPUSH
17429: LD_VAR 0 3
17433: PUSH
17434: LD_INT 1
17436: ARRAY
17437: PPUSH
17438: LD_VAR 0 3
17442: PUSH
17443: LD_INT 2
17445: ARRAY
17446: PPUSH
17447: CALL_OW 111
// if capture_mode and unit in FilterAllUnits ( [ f_type , unit_human ] ) then
17451: LD_VAR 0 9
17455: PUSH
17456: LD_VAR 0 1
17460: PUSH
17461: LD_INT 21
17463: PUSH
17464: LD_INT 1
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PPUSH
17471: CALL_OW 69
17475: IN
17476: AND
17477: IFFALSE 17559
// begin if NearestUnitToUnit ( all_vehs , unit ) in FilterAllUnits ( [ [ [ f_type , unit_vehicle ] , [ f_empty ] , [ f_lives , 251 ] ] ] ) then
17479: LD_VAR 0 8
17483: PPUSH
17484: LD_VAR 0 1
17488: PPUSH
17489: CALL_OW 74
17493: PUSH
17494: LD_INT 21
17496: PUSH
17497: LD_INT 2
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 58
17506: PUSH
17507: EMPTY
17508: LIST
17509: PUSH
17510: LD_INT 24
17512: PUSH
17513: LD_INT 251
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: PPUSH
17528: CALL_OW 69
17532: IN
17533: IFFALSE 17559
// ComEnterUnit ( unit , NearestUnitToUnit ( all_vehs , unit ) ) ;
17535: LD_VAR 0 1
17539: PPUSH
17540: LD_VAR 0 8
17544: PPUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 74
17554: PPUSH
17555: CALL_OW 120
// end ; end ; end ;
17559: LD_VAR 0 5
17563: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
17564: LD_INT 0
17566: PPUSH
17567: PPUSH
// area = ListEnvironmentArea ( area ) ;
17568: LD_ADDR_VAR 0 2
17572: PUSH
17573: LD_VAR 0 2
17577: PPUSH
17578: CALL_OW 353
17582: ST_TO_ADDR
// if bulldozer > 0 then
17583: LD_VAR 0 1
17587: PUSH
17588: LD_INT 0
17590: GREATER
17591: IFFALSE 17702
// for i = 1 to area do
17593: LD_ADDR_VAR 0 4
17597: PUSH
17598: DOUBLE
17599: LD_INT 1
17601: DEC
17602: ST_TO_ADDR
17603: LD_VAR 0 2
17607: PUSH
17608: FOR_TO
17609: IFFALSE 17700
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
17611: LD_VAR 0 2
17615: PUSH
17616: LD_VAR 0 4
17620: ARRAY
17621: PUSH
17622: LD_INT 1
17624: ARRAY
17625: PPUSH
17626: LD_VAR 0 2
17630: PUSH
17631: LD_VAR 0 4
17635: ARRAY
17636: PUSH
17637: LD_INT 2
17639: ARRAY
17640: PPUSH
17641: CALL_OW 351
17645: IFFALSE 17698
// if not HasTask ( bulldozer ) then
17647: LD_VAR 0 1
17651: PPUSH
17652: CALL_OW 314
17656: NOT
17657: IFFALSE 17698
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
17659: LD_VAR 0 1
17663: PPUSH
17664: LD_VAR 0 2
17668: PUSH
17669: LD_VAR 0 4
17673: ARRAY
17674: PUSH
17675: LD_INT 1
17677: ARRAY
17678: PPUSH
17679: LD_VAR 0 2
17683: PUSH
17684: LD_VAR 0 4
17688: ARRAY
17689: PUSH
17690: LD_INT 2
17692: ARRAY
17693: PPUSH
17694: CALL_OW 171
17698: GO 17608
17700: POP
17701: POP
// end ;
17702: LD_VAR 0 3
17706: RET
