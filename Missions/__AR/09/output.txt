// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// PrepareNature ;
   8: CALL 5646 0 0
// LoadVehicles ;
  12: CALL 523 0 0
// Action ;
  16: CALL 1133 0 0
// end ; end_of_file
  20: END
// export Louis , Rolf , Jenna , Nicolas , Rick , Mike , Gali ; export ar_pep ; export function LoadPeople ; var i , names , un , nums , ammo ; begin
  21: LD_INT 0
  23: PPUSH
  24: PPUSH
  25: PPUSH
  26: PPUSH
  27: PPUSH
  28: PPUSH
// uc_side := 2 ;
  29: LD_ADDR_OWVAR 20
  33: PUSH
  34: LD_INT 2
  36: ST_TO_ADDR
// uc_nation := 2 ;
  37: LD_ADDR_OWVAR 21
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// ar_pep := [ ] ;
  45: LD_ADDR_EXP 8
  49: PUSH
  50: EMPTY
  51: ST_TO_ADDR
// nums := 1005 ;
  52: LD_ADDR_VAR 0 5
  56: PUSH
  57: LD_INT 1005
  59: ST_TO_ADDR
// Louis := CreateCharacter ( Louis ) ;
  60: LD_ADDR_EXP 1
  64: PUSH
  65: LD_STRING Louis
  67: PPUSH
  68: CALL_OW 34
  72: ST_TO_ADDR
// ar_pep := Louis ;
  73: LD_ADDR_EXP 8
  77: PUSH
  78: LD_EXP 1
  82: ST_TO_ADDR
// Rolf := CreateCharacter ( Rolf_08 ) ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_STRING Rolf_08
  90: PPUSH
  91: CALL_OW 34
  95: ST_TO_ADDR
// ar_pep := ar_pep ^ Rolf ;
  96: LD_ADDR_EXP 8
 100: PUSH
 101: LD_EXP 8
 105: PUSH
 106: LD_EXP 2
 110: ADD
 111: ST_TO_ADDR
// SetTag ( Rolf , 1000 ) ;
 112: LD_EXP 2
 116: PPUSH
 117: LD_INT 1000
 119: PPUSH
 120: CALL_OW 109
// Gali := CreateCharacter ( Gali_08 ) ;
 124: LD_ADDR_EXP 7
 128: PUSH
 129: LD_STRING Gali_08
 131: PPUSH
 132: CALL_OW 34
 136: ST_TO_ADDR
// ar_pep := ar_pep ^ Gali ;
 137: LD_ADDR_EXP 8
 141: PUSH
 142: LD_EXP 8
 146: PUSH
 147: LD_EXP 7
 151: ADD
 152: ST_TO_ADDR
// SetTag ( Gali , 1001 ) ;
 153: LD_EXP 7
 157: PPUSH
 158: LD_INT 1001
 160: PPUSH
 161: CALL_OW 109
// Mike := CreateCharacter ( Mike_08 ) ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_STRING Mike_08
 172: PPUSH
 173: CALL_OW 34
 177: ST_TO_ADDR
// ar_pep := ar_pep ^ Mike ;
 178: LD_ADDR_EXP 8
 182: PUSH
 183: LD_EXP 8
 187: PUSH
 188: LD_EXP 6
 192: ADD
 193: ST_TO_ADDR
// SetTag ( Mike , 1002 ) ;
 194: LD_EXP 6
 198: PPUSH
 199: LD_INT 1002
 201: PPUSH
 202: CALL_OW 109
// Nicolas := CreateCharacter ( Nicolas_08 ) ;
 206: LD_ADDR_EXP 4
 210: PUSH
 211: LD_STRING Nicolas_08
 213: PPUSH
 214: CALL_OW 34
 218: ST_TO_ADDR
// ar_pep := ar_pep ^ Nicolas ;
 219: LD_ADDR_EXP 8
 223: PUSH
 224: LD_EXP 8
 228: PUSH
 229: LD_EXP 4
 233: ADD
 234: ST_TO_ADDR
// SetTag ( Nicolas , 1003 ) ;
 235: LD_EXP 4
 239: PPUSH
 240: LD_INT 1003
 242: PPUSH
 243: CALL_OW 109
// Jenna := CreateCharacter ( Jenna_08 ) ;
 247: LD_ADDR_EXP 3
 251: PUSH
 252: LD_STRING Jenna_08
 254: PPUSH
 255: CALL_OW 34
 259: ST_TO_ADDR
// ar_pep := ar_pep ^ Jenna ;
 260: LD_ADDR_EXP 8
 264: PUSH
 265: LD_EXP 8
 269: PUSH
 270: LD_EXP 3
 274: ADD
 275: ST_TO_ADDR
// SetTag ( Jenna , 1004 ) ;
 276: LD_EXP 3
 280: PPUSH
 281: LD_INT 1004
 283: PPUSH
 284: CALL_OW 109
// Rick := CreateCharacter ( Rick_08 ) ;
 288: LD_ADDR_EXP 5
 292: PUSH
 293: LD_STRING Rick_08
 295: PPUSH
 296: CALL_OW 34
 300: ST_TO_ADDR
// ar_pep := ar_pep ^ Rick ;
 301: LD_ADDR_EXP 8
 305: PUSH
 306: LD_EXP 8
 310: PUSH
 311: LD_EXP 5
 315: ADD
 316: ST_TO_ADDR
// SetTag ( Rick , 1005 ) ;
 317: LD_EXP 5
 321: PPUSH
 322: LD_INT 1005
 324: PPUSH
 325: CALL_OW 109
// names := [ a_08 , b_08 , c_08 , d_08 , e_08 , f_08 , g_08 , h_08 , i_08 , j_08 , k_08 , l_08 , m_08 , n_08 , o_08 , p_08 ] ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_STRING a_08
 336: PUSH
 337: LD_STRING b_08
 339: PUSH
 340: LD_STRING c_08
 342: PUSH
 343: LD_STRING d_08
 345: PUSH
 346: LD_STRING e_08
 348: PUSH
 349: LD_STRING f_08
 351: PUSH
 352: LD_STRING g_08
 354: PUSH
 355: LD_STRING h_08
 357: PUSH
 358: LD_STRING i_08
 360: PUSH
 361: LD_STRING j_08
 363: PUSH
 364: LD_STRING k_08
 366: PUSH
 367: LD_STRING l_08
 369: PUSH
 370: LD_STRING m_08
 372: PUSH
 373: LD_STRING n_08
 375: PUSH
 376: LD_STRING o_08
 378: PUSH
 379: LD_STRING p_08
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: ST_TO_ADDR
// for i = 1 to names do
 400: LD_ADDR_VAR 0 2
 404: PUSH
 405: DOUBLE
 406: LD_INT 1
 408: DEC
 409: ST_TO_ADDR
 410: LD_VAR 0 3
 414: PUSH
 415: FOR_TO
 416: IFFALSE 477
// begin un := CreateCharacter ( names [ i ] ) ;
 418: LD_ADDR_VAR 0 4
 422: PUSH
 423: LD_VAR 0 3
 427: PUSH
 428: LD_VAR 0 2
 432: ARRAY
 433: PPUSH
 434: CALL_OW 34
 438: ST_TO_ADDR
// ar_pep := ar_pep ^ un ;
 439: LD_ADDR_EXP 8
 443: PUSH
 444: LD_EXP 8
 448: PUSH
 449: LD_VAR 0 4
 453: ADD
 454: ST_TO_ADDR
// SetTag ( un , nums + i ) ;
 455: LD_VAR 0 4
 459: PPUSH
 460: LD_VAR 0 5
 464: PUSH
 465: LD_VAR 0 2
 469: PLUS
 470: PPUSH
 471: CALL_OW 109
// end ;
 475: GO 415
 477: POP
 478: POP
// ammo := LoadVariable ( var_ammo , 0 ) ;
 479: LD_ADDR_VAR 0 6
 483: PUSH
 484: LD_STRING var_ammo
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: CALL_OW 30
 494: ST_TO_ADDR
// if ammo = 1 then
 495: LD_VAR 0 6
 499: PUSH
 500: LD_INT 1
 502: EQUAL
 503: IFFALSE 518
// SetTech ( 29 , 2 , state_researched ) ;
 505: LD_INT 29
 507: PPUSH
 508: LD_INT 2
 510: PPUSH
 511: LD_INT 2
 513: PPUSH
 514: CALL_OW 322
// end ;
 518: LD_VAR 0 1
 522: RET
// export ar_vehicles ; export function LoadVehicles ; var tab , i , p , veh , filter ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
// uc_side := 2 ;
 531: LD_ADDR_OWVAR 20
 535: PUSH
 536: LD_INT 2
 538: ST_TO_ADDR
// tab := LoadVariable ( unit_vehs , [ ] ) ;
 539: LD_ADDR_VAR 0 2
 543: PUSH
 544: LD_STRING unit_vehs
 546: PPUSH
 547: EMPTY
 548: PPUSH
 549: CALL_OW 30
 553: ST_TO_ADDR
// i := 1 ;
 554: LD_ADDR_VAR 0 3
 558: PUSH
 559: LD_INT 1
 561: ST_TO_ADDR
// p := 1 ;
 562: LD_ADDR_VAR 0 4
 566: PUSH
 567: LD_INT 1
 569: ST_TO_ADDR
// if tab > 0 then
 570: LD_VAR 0 2
 574: PUSH
 575: LD_INT 0
 577: GREATER
 578: IFFALSE 880
// while ( i <= tab ) do
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 2
 589: LESSEQUAL
 590: IFFALSE 880
// begin if tab [ i ] in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] then
 592: LD_VAR 0 2
 596: PUSH
 597: LD_VAR 0 3
 601: ARRAY
 602: PUSH
 603: LD_INT 21
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 23
 611: PUSH
 612: LD_INT 24
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: IN
 621: IFFALSE 633
// uc_nation := nation_russian else
 623: LD_ADDR_OWVAR 21
 627: PUSH
 628: LD_INT 3
 630: ST_TO_ADDR
 631: GO 641
// uc_nation := nation_arabian ;
 633: LD_ADDR_OWVAR 21
 637: PUSH
 638: LD_INT 2
 640: ST_TO_ADDR
// vc_chassis := tab [ i ] ;
 641: LD_ADDR_OWVAR 37
 645: PUSH
 646: LD_VAR 0 2
 650: PUSH
 651: LD_VAR 0 3
 655: ARRAY
 656: ST_TO_ADDR
// vc_engine := tab [ i + 1 ] ;
 657: LD_ADDR_OWVAR 39
 661: PUSH
 662: LD_VAR 0 2
 666: PUSH
 667: LD_VAR 0 3
 671: PUSH
 672: LD_INT 1
 674: PLUS
 675: ARRAY
 676: ST_TO_ADDR
// vc_control := tab [ i + 2 ] ;
 677: LD_ADDR_OWVAR 38
 681: PUSH
 682: LD_VAR 0 2
 686: PUSH
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 2
 694: PLUS
 695: ARRAY
 696: ST_TO_ADDR
// vc_weapon := tab [ i + 3 ] ;
 697: LD_ADDR_OWVAR 40
 701: PUSH
 702: LD_VAR 0 2
 706: PUSH
 707: LD_VAR 0 3
 711: PUSH
 712: LD_INT 3
 714: PLUS
 715: ARRAY
 716: ST_TO_ADDR
// veh := CreateVehicle ;
 717: LD_ADDR_VAR 0 5
 721: PUSH
 722: CALL_OW 45
 726: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
 727: LD_VAR 0 5
 731: PPUSH
 732: CALL_OW 263
 736: PUSH
 737: LD_INT 1
 739: EQUAL
 740: IFFALSE 758
// ar_vehicles := ar_vehicles ^ veh ;
 742: LD_ADDR_EXP 9
 746: PUSH
 747: LD_EXP 9
 751: PUSH
 752: LD_VAR 0 5
 756: ADD
 757: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 758: LD_VAR 0 5
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 233
// PlaceUnitArea ( veh , veh_start , false ) ;
 770: LD_VAR 0 5
 774: PPUSH
 775: LD_INT 1
 777: PPUSH
 778: LD_INT 0
 780: PPUSH
 781: CALL_OW 49
// SetFuel ( veh , Rand ( 65 , 78 ) ) ;
 785: LD_VAR 0 5
 789: PPUSH
 790: LD_INT 65
 792: PPUSH
 793: LD_INT 78
 795: PPUSH
 796: CALL_OW 12
 800: PPUSH
 801: CALL_OW 240
// if GetWeapon ( veh ) = ar_cargo_bay or GetWeapon ( veh ) = ru_cargo_bay then
 805: LD_VAR 0 5
 809: PPUSH
 810: CALL_OW 264
 814: PUSH
 815: LD_INT 32
 817: EQUAL
 818: PUSH
 819: LD_VAR 0 5
 823: PPUSH
 824: CALL_OW 264
 828: PUSH
 829: LD_INT 51
 831: EQUAL
 832: OR
 833: IFFALSE 850
// SetCargo ( veh , 3 , 100 ) ;
 835: LD_VAR 0 5
 839: PPUSH
 840: LD_INT 3
 842: PPUSH
 843: LD_INT 100
 845: PPUSH
 846: CALL_OW 290
// p := p + 1 ;
 850: LD_ADDR_VAR 0 4
 854: PUSH
 855: LD_VAR 0 4
 859: PUSH
 860: LD_INT 1
 862: PLUS
 863: ST_TO_ADDR
// i := i + 4 ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: LD_VAR 0 3
 873: PUSH
 874: LD_INT 4
 876: PLUS
 877: ST_TO_ADDR
// end ;
 878: GO 580
// if FilterAllUnits ( [ f_weapon , ar_control_tower ] ) = 0 then
 880: LD_INT 34
 882: PUSH
 883: LD_INT 31
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PPUSH
 890: CALL_OW 69
 894: PUSH
 895: LD_INT 0
 897: EQUAL
 898: IFFALSE 947
// begin while ( FilterAllUnits ( [ f_control , control_remote ] ) > 0 ) do
 900: LD_INT 33
 902: PUSH
 903: LD_INT 2
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PPUSH
 910: CALL_OW 69
 914: PUSH
 915: LD_INT 0
 917: GREATER
 918: IFFALSE 945
// RemoveUnit ( FilterAllUnits ( [ f_control , control_remote ] ) [ 1 ] ) ;
 920: LD_INT 33
 922: PUSH
 923: LD_INT 2
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: PPUSH
 930: CALL_OW 69
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: PPUSH
 939: CALL_OW 64
 943: GO 900
// end else
 945: GO 1012
// if FilterAllUnits ( [ f_control , control_remote ] ) > 3 then
 947: LD_INT 33
 949: PUSH
 950: LD_INT 2
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: PPUSH
 957: CALL_OW 69
 961: PUSH
 962: LD_INT 3
 964: GREATER
 965: IFFALSE 1012
// while ( FilterAllUnits ( [ f_control , control_remote ] ) > 3 ) do
 967: LD_INT 33
 969: PUSH
 970: LD_INT 2
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 69
 981: PUSH
 982: LD_INT 3
 984: GREATER
 985: IFFALSE 1012
// RemoveUnit ( FilterAllUnits ( [ f_control , control_remote ] ) [ 1 ] ) ;
 987: LD_INT 33
 989: PUSH
 990: LD_INT 2
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: PPUSH
 997: CALL_OW 69
1001: PUSH
1002: LD_INT 1
1004: ARRAY
1005: PPUSH
1006: CALL_OW 64
1010: GO 967
// LoadPeople ;
1012: CALL 21 0 0
// PlaceUnitArea ( Louis , hum_start , false ) ;
1016: LD_EXP 1
1020: PPUSH
1021: LD_INT 2
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL_OW 49
// for i = 2 to ar_pep do
1031: LD_ADDR_VAR 0 3
1035: PUSH
1036: DOUBLE
1037: LD_INT 2
1039: DEC
1040: ST_TO_ADDR
1041: LD_EXP 8
1045: PUSH
1046: FOR_TO
1047: IFFALSE 1126
// if UnitFilter ( ar_vehicles , [ f_empty ] ) then
1049: LD_EXP 9
1053: PPUSH
1054: LD_INT 58
1056: PUSH
1057: EMPTY
1058: LIST
1059: PPUSH
1060: CALL_OW 72
1064: IFFALSE 1103
// PlaceHumanInUnit ( ar_pep [ i ] , UnitFilter ( ar_vehicles , [ f_empty ] ) [ 1 ] ) else
1066: LD_EXP 8
1070: PUSH
1071: LD_VAR 0 3
1075: ARRAY
1076: PPUSH
1077: LD_EXP 9
1081: PPUSH
1082: LD_INT 58
1084: PUSH
1085: EMPTY
1086: LIST
1087: PPUSH
1088: CALL_OW 72
1092: PUSH
1093: LD_INT 1
1095: ARRAY
1096: PPUSH
1097: CALL_OW 52
1101: GO 1124
// PlaceUnitArea ( ar_pep [ i ] , hum_start , false ) ;
1103: LD_EXP 8
1107: PUSH
1108: LD_VAR 0 3
1112: ARRAY
1113: PPUSH
1114: LD_INT 2
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: CALL_OW 49
1124: GO 1046
1126: POP
1127: POP
// end ; end_of_file
1128: LD_VAR 0 1
1132: RET
// export Point ; export function Action ; var p , i ; begin
1133: LD_INT 0
1135: PPUSH
1136: PPUSH
1137: PPUSH
// InGameOn ;
1138: CALL_OW 8
// p := LoadVariable ( var_rus , 0 ) ;
1142: LD_ADDR_VAR 0 2
1146: PUSH
1147: LD_STRING var_rus
1149: PPUSH
1150: LD_INT 0
1152: PPUSH
1153: CALL_OW 30
1157: ST_TO_ADDR
// Point := p ;
1158: LD_ADDR_EXP 10
1162: PUSH
1163: LD_VAR 0 2
1167: ST_TO_ADDR
// if p = 0 then
1168: LD_VAR 0 2
1172: PUSH
1173: LD_INT 0
1175: EQUAL
1176: IFFALSE 1300
// begin Cont := 1 ;
1178: LD_ADDR_EXP 11
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// InGameOn ;
1186: CALL_OW 8
// CenterNowOnUnits ( Louis ) ;
1190: LD_EXP 1
1194: PPUSH
1195: CALL_OW 87
// Wait ( 0 0$02 ) ;
1199: LD_INT 70
1201: PPUSH
1202: CALL_OW 67
// Say ( UnitFilter ( ar_pep , [ f_sex , sex_male ] ) [ 2 ] , DRu ) ;
1206: LD_EXP 8
1210: PPUSH
1211: LD_INT 26
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PPUSH
1221: CALL_OW 72
1225: PUSH
1226: LD_INT 2
1228: ARRAY
1229: PPUSH
1230: LD_STRING DRu
1232: PPUSH
1233: CALL_OW 88
// SayNoName ( Louis , DLRu1 ) ;
1237: LD_EXP 1
1241: PPUSH
1242: LD_STRING DLRu1
1244: PPUSH
1245: CALL_OW 90
// Say ( Louis , DLRu2 ) ;
1249: LD_EXP 1
1253: PPUSH
1254: LD_STRING DLRu2
1256: PPUSH
1257: CALL_OW 88
// Send_Cargo ;
1261: CALL 1798 0 0
// Wait ( 0 0$01 ) ;
1265: LD_INT 35
1267: PPUSH
1268: CALL_OW 67
// InGameOff ;
1272: CALL_OW 9
// SaveForQuickRestart ;
1276: CALL_OW 22
// ChangeMissionObjectives ( DEF ) ;
1280: LD_STRING DEF
1282: PPUSH
1283: CALL_OW 337
// Wait ( 0 0$57 ) ;
1287: LD_INT 1995
1289: PPUSH
1290: CALL_OW 67
// Send_Attack ;
1294: CALL 2913 0 0
// end else
1298: GO 1423
// begin InGameOn ;
1300: CALL_OW 8
// CenterNowOnUnits ( Louis ) ;
1304: LD_EXP 1
1308: PPUSH
1309: CALL_OW 87
// Wait ( 0 0$02 ) ;
1313: LD_INT 70
1315: PPUSH
1316: CALL_OW 67
// Say ( UnitFilter ( ar_pep , [ f_sex , sex_male ] ) [ 2 ] , DNonRu ) ;
1320: LD_EXP 8
1324: PPUSH
1325: LD_INT 26
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PPUSH
1335: CALL_OW 72
1339: PUSH
1340: LD_INT 2
1342: ARRAY
1343: PPUSH
1344: LD_STRING DNonRu
1346: PPUSH
1347: CALL_OW 88
// Say ( Louis , DLNonRu ) ;
1351: LD_EXP 1
1355: PPUSH
1356: LD_STRING DLNonRu
1358: PPUSH
1359: CALL_OW 88
// for i = 1 to ar_pep do
1363: LD_ADDR_VAR 0 3
1367: PUSH
1368: DOUBLE
1369: LD_INT 1
1371: DEC
1372: ST_TO_ADDR
1373: LD_EXP 8
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1404
// ComMoveXY ( ar_pep [ i ] , 89 , 2 ) ;
1381: LD_EXP 8
1385: PUSH
1386: LD_VAR 0 3
1390: ARRAY
1391: PPUSH
1392: LD_INT 89
1394: PPUSH
1395: LD_INT 2
1397: PPUSH
1398: CALL_OW 111
1402: GO 1378
1404: POP
1405: POP
// Wait ( 0 0$03.7 ) ;
1406: LD_INT 130
1408: PPUSH
1409: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
1413: LD_INT 1
1415: PPUSH
1416: LD_STRING %_cont
1418: PPUSH
1419: CALL_OW 340
// end ; end ;
1423: LD_VAR 0 1
1427: RET
// every 0 0$01 trigger GetDistUnits ( Louis , FilterAllUnits ( [ f_type , unit_building ] ) [ 1 ] ) <= 13 do
1428: LD_EXP 1
1432: PPUSH
1433: LD_INT 21
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: EMPTY
1440: LIST
1441: LIST
1442: PPUSH
1443: CALL_OW 69
1447: PUSH
1448: LD_INT 1
1450: ARRAY
1451: PPUSH
1452: CALL_OW 296
1456: PUSH
1457: LD_INT 13
1459: LESSEQUAL
1460: IFFALSE 1509
1462: GO 1464
1464: DISABLE
// begin Say ( Louis , DL-build ) ;
1465: LD_EXP 1
1469: PPUSH
1470: LD_STRING DL-build
1472: PPUSH
1473: CALL_OW 88
// CenterNowOnXY ( 84 , 15 ) ;
1477: LD_INT 84
1479: PPUSH
1480: LD_INT 15
1482: PPUSH
1483: CALL_OW 86
// SetSide ( FilterAllUnits ( [ f_type , unit_building ] ) , 2 ) ;
1487: LD_INT 21
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PPUSH
1497: CALL_OW 69
1501: PPUSH
1502: LD_INT 2
1504: PPUSH
1505: CALL_OW 235
// end ;
1509: END
// every 0 0$01 trigger counter >= 3 do
1510: LD_EXP 13
1514: PUSH
1515: LD_INT 3
1517: GREATEREQUAL
1518: IFFALSE 1535
1520: GO 1522
1522: DISABLE
// Say ( Rolf , DR-1 ) ;
1523: LD_EXP 2
1527: PPUSH
1528: LD_STRING DR-1
1530: PPUSH
1531: CALL_OW 88
1535: END
// every 0 0$01 trigger counter >= 7 do
1536: LD_EXP 13
1540: PUSH
1541: LD_INT 7
1543: GREATEREQUAL
1544: IFFALSE 1561
1546: GO 1548
1548: DISABLE
// Say ( Mike , DR-2 ) ;
1549: LD_EXP 6
1553: PPUSH
1554: LD_STRING DR-2
1556: PPUSH
1557: CALL_OW 88
1561: END
// every 0 0$01 trigger counter >= 11 do
1562: LD_EXP 13
1566: PUSH
1567: LD_INT 11
1569: GREATEREQUAL
1570: IFFALSE 1587
1572: GO 1574
1574: DISABLE
// Say ( Nicolas , DR-3 ) ;
1575: LD_EXP 4
1579: PPUSH
1580: LD_STRING DR-3
1582: PPUSH
1583: CALL_OW 88
1587: END
// every 0 0$01 do
1588: GO 1590
1590: DISABLE
// begin enable ;
1591: ENABLE
// if FilterUnitsInArea ( exit_area , [ f_side , 5 ] ) then
1592: LD_INT 3
1594: PPUSH
1595: LD_INT 22
1597: PUSH
1598: LD_INT 5
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PPUSH
1605: CALL_OW 70
1609: IFFALSE 1637
// RemoveUnit ( FilterUnitsInArea ( exit_area , [ f_side , 5 ] ) [ 1 ] ) ;
1611: LD_INT 3
1613: PPUSH
1614: LD_INT 22
1616: PUSH
1617: LD_INT 5
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PPUSH
1624: CALL_OW 70
1628: PUSH
1629: LD_INT 1
1631: ARRAY
1632: PPUSH
1633: CALL_OW 64
// if FilterUnitsInArea ( exit_area , [ f_side , 3 ] ) then
1637: LD_INT 3
1639: PPUSH
1640: LD_INT 22
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PPUSH
1650: CALL_OW 70
1654: IFFALSE 1663
// YouLost ( enemy_area ) ;
1656: LD_STRING enemy_area
1658: PPUSH
1659: CALL_OW 104
// if IsDead ( Louis ) then
1663: LD_EXP 1
1667: PPUSH
1668: CALL_OW 301
1672: IFFALSE 1681
// YouLost ( LouisDead ) ;
1674: LD_STRING LouisDead
1676: PPUSH
1677: CALL_OW 104
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] ] ) then
1681: LD_INT 22
1683: PUSH
1684: LD_INT 3
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 25
1693: PUSH
1694: LD_INT 9
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: IFFALSE 1759
// IntBazooka ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] ] ) , FilterAllUnits ( [ f_side , 2 ] ) ) ;
1711: LD_INT 22
1713: PUSH
1714: LD_INT 3
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 25
1723: PUSH
1724: LD_INT 9
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 69
1739: PPUSH
1740: LD_INT 22
1742: PUSH
1743: LD_INT 2
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PPUSH
1750: CALL_OW 69
1754: PPUSH
1755: CALL 4877 0 2
// if FilterAllUnits ( [ f_side , 3 ] ) > 0 then
1759: LD_INT 22
1761: PUSH
1762: LD_INT 3
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PPUSH
1769: CALL_OW 69
1773: PUSH
1774: LD_INT 0
1776: GREATER
1777: IFFALSE 1797
// if music_nat <> 3 then
1779: LD_OWVAR 71
1783: PUSH
1784: LD_INT 3
1786: NONEQUAL
1787: IFFALSE 1797
// music_nat := 3 ;
1789: LD_ADDR_OWVAR 71
1793: PUSH
1794: LD_INT 3
1796: ST_TO_ADDR
// end ;
1797: END
// export function Send_Cargo ; var i , cargo , cargos , chassis , names , p , k ; begin
1798: LD_INT 0
1800: PPUSH
1801: PPUSH
1802: PPUSH
1803: PPUSH
1804: PPUSH
1805: PPUSH
1806: PPUSH
1807: PPUSH
// cargo := FilterAllUnits ( [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ) ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 34
1818: PUSH
1819: LD_INT 51
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PUSH
1826: LD_INT 34
1828: PUSH
1829: LD_INT 32
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: LIST
1840: PPUSH
1841: CALL_OW 69
1845: ST_TO_ADDR
// cargos := [ car_1 , car_2 , car_3 , car_4 ] ;
1846: LD_ADDR_VAR 0 4
1850: PUSH
1851: LD_STRING car_1
1853: PUSH
1854: LD_STRING car_2
1856: PUSH
1857: LD_STRING car_3
1859: PUSH
1860: LD_STRING car_4
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: ST_TO_ADDR
// chassis := [ ] ;
1869: LD_ADDR_VAR 0 5
1873: PUSH
1874: EMPTY
1875: ST_TO_ADDR
// names := [ Rolf , Jenna , Nicolas , Rick , Mike , Gali , a_08 , b_08 , c_08 , d_08 , e_08 , f_08 , g_08 , h_08 , i_08 , j_08 , k_08 , l_08 , m_08 , n_08 , o_08 , p_08 ] ;
1876: LD_ADDR_VAR 0 6
1880: PUSH
1881: LD_STRING Rolf
1883: PUSH
1884: LD_STRING Jenna
1886: PUSH
1887: LD_STRING Nicolas
1889: PUSH
1890: LD_STRING Rick
1892: PUSH
1893: LD_STRING Mike
1895: PUSH
1896: LD_STRING Gali
1898: PUSH
1899: LD_STRING a_08
1901: PUSH
1902: LD_STRING b_08
1904: PUSH
1905: LD_STRING c_08
1907: PUSH
1908: LD_STRING d_08
1910: PUSH
1911: LD_STRING e_08
1913: PUSH
1914: LD_STRING f_08
1916: PUSH
1917: LD_STRING g_08
1919: PUSH
1920: LD_STRING h_08
1922: PUSH
1923: LD_STRING i_08
1925: PUSH
1926: LD_STRING j_08
1928: PUSH
1929: LD_STRING k_08
1931: PUSH
1932: LD_STRING l_08
1934: PUSH
1935: LD_STRING m_08
1937: PUSH
1938: LD_STRING n_08
1940: PUSH
1941: LD_STRING o_08
1943: PUSH
1944: LD_STRING p_08
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// p = 1 ;
1971: LD_ADDR_VAR 0 7
1975: PUSH
1976: LD_INT 1
1978: ST_TO_ADDR
// for i = 1 to cargo do
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: DOUBLE
1985: LD_INT 1
1987: DEC
1988: ST_TO_ADDR
1989: LD_VAR 0 3
1993: PUSH
1994: FOR_TO
1995: IFFALSE 2172
// begin SetSide ( cargo [ i ] , 5 ) ;
1997: LD_VAR 0 3
2001: PUSH
2002: LD_VAR 0 2
2006: ARRAY
2007: PPUSH
2008: LD_INT 5
2010: PPUSH
2011: CALL_OW 235
// SetSide ( IsDrivenBy ( cargo [ i ] ) , 5 ) ;
2015: LD_VAR 0 3
2019: PUSH
2020: LD_VAR 0 2
2024: ARRAY
2025: PPUSH
2026: CALL_OW 311
2030: PPUSH
2031: LD_INT 5
2033: PPUSH
2034: CALL_OW 235
// ComMoveXY ( IsDrivenBy ( cargo [ i ] ) , 89 , 2 ) ;
2038: LD_VAR 0 3
2042: PUSH
2043: LD_VAR 0 2
2047: ARRAY
2048: PPUSH
2049: CALL_OW 311
2053: PPUSH
2054: LD_INT 89
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: CALL_OW 111
// SaveCharacters ( IsDrivenBy ( cargo [ i ] ) , cargos [ i ] ) ;
2064: LD_VAR 0 3
2068: PUSH
2069: LD_VAR 0 2
2073: ARRAY
2074: PPUSH
2075: CALL_OW 311
2079: PPUSH
2080: LD_VAR 0 4
2084: PUSH
2085: LD_VAR 0 2
2089: ARRAY
2090: PPUSH
2091: CALL_OW 38
// SaveVariable ( GetTag ( IsDrivenBy ( cargo [ i ] ) ) , host & p ) ;
2095: LD_VAR 0 3
2099: PUSH
2100: LD_VAR 0 2
2104: ARRAY
2105: PPUSH
2106: CALL_OW 311
2110: PPUSH
2111: CALL_OW 110
2115: PPUSH
2116: LD_STRING host
2118: PUSH
2119: LD_VAR 0 7
2123: STR
2124: PPUSH
2125: CALL_OW 39
// p = p + 1 ;
2129: LD_ADDR_VAR 0 7
2133: PUSH
2134: LD_VAR 0 7
2138: PUSH
2139: LD_INT 1
2141: PLUS
2142: ST_TO_ADDR
// chassis := chassis ^ GetChassis ( cargo [ i ] ) ;
2143: LD_ADDR_VAR 0 5
2147: PUSH
2148: LD_VAR 0 5
2152: PUSH
2153: LD_VAR 0 3
2157: PUSH
2158: LD_VAR 0 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 265
2168: ADD
2169: ST_TO_ADDR
// end ;
2170: GO 1994
2172: POP
2173: POP
// SaveVariable ( chassis , cargo_chassis ) ;
2174: LD_VAR 0 5
2178: PPUSH
2179: LD_STRING cargo_chassis
2181: PPUSH
2182: CALL_OW 39
// end ;
2186: LD_VAR 0 1
2190: RET
// every 0 0$03 trigger Point = 0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 and Cont <= 0 do var names , filter , i , tab ;
2191: LD_EXP 10
2195: PUSH
2196: LD_INT 0
2198: EQUAL
2199: PUSH
2200: LD_INT 22
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PPUSH
2210: CALL_OW 69
2214: PUSH
2215: LD_INT 0
2217: EQUAL
2218: AND
2219: PUSH
2220: LD_EXP 11
2224: PUSH
2225: LD_INT 0
2227: LESSEQUAL
2228: AND
2229: IFFALSE 2910
2231: GO 2233
2233: DISABLE
2234: LD_INT 0
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
// begin DialogueOn ;
2240: CALL_OW 6
// if IsLive ( Rolf ) then
2244: LD_EXP 2
2248: PPUSH
2249: CALL_OW 300
2253: IFFALSE 2269
// Say ( Rolf , DNonRu ) else
2255: LD_EXP 2
2259: PPUSH
2260: LD_STRING DNonRu
2262: PPUSH
2263: CALL_OW 88
2267: GO 2315
// Say ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) [ 1 ] diff Louis , DNonRu ) ;
2269: LD_INT 22
2271: PUSH
2272: LD_INT 2
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PUSH
2279: LD_INT 21
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: PPUSH
2293: CALL_OW 69
2297: PUSH
2298: LD_INT 1
2300: ARRAY
2301: PUSH
2302: LD_EXP 1
2306: DIFF
2307: PPUSH
2308: LD_STRING DNonRu
2310: PPUSH
2311: CALL_OW 88
// Say ( Louis , DLNonRu ) ;
2315: LD_EXP 1
2319: PPUSH
2320: LD_STRING DLNonRu
2322: PPUSH
2323: CALL_OW 88
// DialogueOff ;
2327: CALL_OW 7
// filter := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
2331: LD_ADDR_VAR 0 2
2335: PUSH
2336: LD_INT 22
2338: PUSH
2339: LD_INT 2
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 21
2348: PUSH
2349: LD_INT 2
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PUSH
2356: LD_INT 3
2358: PUSH
2359: LD_INT 58
2361: PUSH
2362: EMPTY
2363: LIST
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: PPUSH
2374: CALL_OW 69
2378: ST_TO_ADDR
// tab := [ ] ;
2379: LD_ADDR_VAR 0 4
2383: PUSH
2384: EMPTY
2385: ST_TO_ADDR
// for i = 1 to filter do
2386: LD_ADDR_VAR 0 3
2390: PUSH
2391: DOUBLE
2392: LD_INT 1
2394: DEC
2395: ST_TO_ADDR
2396: LD_VAR 0 2
2400: PUSH
2401: FOR_TO
2402: IFFALSE 2487
// begin tab := tab ^ [ GetChassis ( filter [ i ] ) , GetEngine ( filter [ i ] ) , GetControl ( filter [ i ] ) , GetWeapon ( filter [ i ] ) ] ;
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: LD_VAR 0 4
2413: PUSH
2414: LD_VAR 0 2
2418: PUSH
2419: LD_VAR 0 3
2423: ARRAY
2424: PPUSH
2425: CALL_OW 265
2429: PUSH
2430: LD_VAR 0 2
2434: PUSH
2435: LD_VAR 0 3
2439: ARRAY
2440: PPUSH
2441: CALL_OW 262
2445: PUSH
2446: LD_VAR 0 2
2450: PUSH
2451: LD_VAR 0 3
2455: ARRAY
2456: PPUSH
2457: CALL_OW 263
2461: PUSH
2462: LD_VAR 0 2
2466: PUSH
2467: LD_VAR 0 3
2471: ARRAY
2472: PPUSH
2473: CALL_OW 264
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: ADD
2484: ST_TO_ADDR
// end ;
2485: GO 2401
2487: POP
2488: POP
// DeleteVariable ( unit_vehs ) ;
2489: LD_STRING unit_vehs
2491: PPUSH
2492: CALL_OW 41
// SaveVariable ( tab , unit_vehs ) ;
2496: LD_VAR 0 4
2500: PPUSH
2501: LD_STRING unit_vehs
2503: PPUSH
2504: CALL_OW 39
// SaveCharacters ( Louis , Louis ) ;
2508: LD_EXP 1
2512: PPUSH
2513: LD_STRING Louis
2515: PPUSH
2516: CALL_OW 38
// if IsLive ( Rolf ) then
2520: LD_EXP 2
2524: PPUSH
2525: CALL_OW 300
2529: IFFALSE 2543
// begin SaveCharacters ( Rolf , Rolf_09 ) ;
2531: LD_EXP 2
2535: PPUSH
2536: LD_STRING Rolf_09
2538: PPUSH
2539: CALL_OW 38
// end ; if IsLive ( Jenna ) then
2543: LD_EXP 3
2547: PPUSH
2548: CALL_OW 300
2552: IFFALSE 2566
// begin SaveCharacters ( Jenna , Jenna_09 ) ;
2554: LD_EXP 3
2558: PPUSH
2559: LD_STRING Jenna_09
2561: PPUSH
2562: CALL_OW 38
// end ; if IsLive ( Rick ) then
2566: LD_EXP 5
2570: PPUSH
2571: CALL_OW 300
2575: IFFALSE 2589
// begin SaveCharacters ( Rick , Rick_09 ) ;
2577: LD_EXP 5
2581: PPUSH
2582: LD_STRING Rick_09
2584: PPUSH
2585: CALL_OW 38
// end ; if IsLive ( Mike ) then
2589: LD_EXP 6
2593: PPUSH
2594: CALL_OW 300
2598: IFFALSE 2612
// begin SaveCharacters ( Mike , Mike_09 ) ;
2600: LD_EXP 6
2604: PPUSH
2605: LD_STRING Mike_09
2607: PPUSH
2608: CALL_OW 38
// end ; if IsLive ( Nicolas ) then
2612: LD_EXP 4
2616: PPUSH
2617: CALL_OW 300
2621: IFFALSE 2635
// begin SaveCharacters ( Nicolas , Nicolas_09 ) ;
2623: LD_EXP 4
2627: PPUSH
2628: LD_STRING Nicolas_09
2630: PPUSH
2631: CALL_OW 38
// end ; if IsLive ( Gali ) then
2635: LD_EXP 7
2639: PPUSH
2640: CALL_OW 300
2644: IFFALSE 2658
// begin SaveCharacters ( Gali , Gali_09 ) ;
2646: LD_EXP 7
2650: PPUSH
2651: LD_STRING Gali_09
2653: PPUSH
2654: CALL_OW 38
// end ; SetSide ( [ Louis , Rolf , Gali , Nicolas , Jenna , Rick , Mike ] , 5 ) ;
2658: LD_EXP 1
2662: PUSH
2663: LD_EXP 2
2667: PUSH
2668: LD_EXP 7
2672: PUSH
2673: LD_EXP 4
2677: PUSH
2678: LD_EXP 3
2682: PUSH
2683: LD_EXP 5
2687: PUSH
2688: LD_EXP 6
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: PPUSH
2702: LD_INT 5
2704: PPUSH
2705: CALL_OW 235
// filter := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 2
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 21
2726: PUSH
2727: LD_INT 1
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: ST_TO_ADDR
// names := [ a_09 , b_09 , c_09 , d_09 , e_09 , f_09 , g_09 , h_09 , i_09 , j_09 , k_09 , l_09 , m_09 , n_09 , o_09 , p_09 ] ;
2743: LD_ADDR_VAR 0 1
2747: PUSH
2748: LD_STRING a_09
2750: PUSH
2751: LD_STRING b_09
2753: PUSH
2754: LD_STRING c_09
2756: PUSH
2757: LD_STRING d_09
2759: PUSH
2760: LD_STRING e_09
2762: PUSH
2763: LD_STRING f_09
2765: PUSH
2766: LD_STRING g_09
2768: PUSH
2769: LD_STRING h_09
2771: PUSH
2772: LD_STRING i_09
2774: PUSH
2775: LD_STRING j_09
2777: PUSH
2778: LD_STRING k_09
2780: PUSH
2781: LD_STRING l_09
2783: PUSH
2784: LD_STRING m_09
2786: PUSH
2787: LD_STRING n_09
2789: PUSH
2790: LD_STRING o_09
2792: PUSH
2793: LD_STRING p_09
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: ST_TO_ADDR
// for i = 1 to filter do
2814: LD_ADDR_VAR 0 3
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 2
2828: PUSH
2829: FOR_TO
2830: IFFALSE 2898
// if IsLive ( filter [ i ] ) and GetClass ( filter [ i ] ) < 11 then
2832: LD_VAR 0 2
2836: PUSH
2837: LD_VAR 0 3
2841: ARRAY
2842: PPUSH
2843: CALL_OW 300
2847: PUSH
2848: LD_VAR 0 2
2852: PUSH
2853: LD_VAR 0 3
2857: ARRAY
2858: PPUSH
2859: CALL_OW 257
2863: PUSH
2864: LD_INT 11
2866: LESS
2867: AND
2868: IFFALSE 2896
// SaveCharacters ( filter [ i ] , names [ i ] ) ;
2870: LD_VAR 0 2
2874: PUSH
2875: LD_VAR 0 3
2879: ARRAY
2880: PPUSH
2881: LD_VAR 0 1
2885: PUSH
2886: LD_VAR 0 3
2890: ARRAY
2891: PPUSH
2892: CALL_OW 38
2896: GO 2829
2898: POP
2899: POP
// ChangeMap ( 1 , %_cont ) ;
2900: LD_INT 1
2902: PPUSH
2903: LD_STRING %_cont
2905: PPUSH
2906: CALL_OW 340
// end ; end_of_file
2910: PPOPN 4
2912: END
// export Cont , ru_spec , counter ; export function Send_Attack ; var i , un , veh , skill ; begin
2913: LD_INT 0
2915: PPUSH
2916: PPUSH
2917: PPUSH
2918: PPUSH
2919: PPUSH
// uc_side := 3 ;
2920: LD_ADDR_OWVAR 20
2924: PUSH
2925: LD_INT 3
2927: ST_TO_ADDR
// uc_nation := 3 ;
2928: LD_ADDR_OWVAR 21
2932: PUSH
2933: LD_INT 3
2935: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_INT 6
2943: PUSH
2944: LD_INT 7
2946: PUSH
2947: LD_INT 8
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: LIST
2954: PUSH
2955: LD_OWVAR 67
2959: ARRAY
2960: ST_TO_ADDR
// Cont := [ 12 , 25 , 28 ] [ Difficulty ] ;
2961: LD_ADDR_EXP 11
2965: PUSH
2966: LD_INT 12
2968: PUSH
2969: LD_INT 25
2971: PUSH
2972: LD_INT 28
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: LIST
2979: PUSH
2980: LD_OWVAR 67
2984: ARRAY
2985: ST_TO_ADDR
// ru_spec := [ ] ;
2986: LD_ADDR_EXP 12
2990: PUSH
2991: EMPTY
2992: ST_TO_ADDR
// counter := 0 ;
2993: LD_ADDR_EXP 13
2997: PUSH
2998: LD_INT 0
3000: ST_TO_ADDR
// case Difficulty of 1 :
3001: LD_OWVAR 67
3005: PUSH
3006: LD_INT 1
3008: DOUBLE
3009: EQUAL
3010: IFTRUE 3014
3012: GO 3319
3014: POP
// begin Wait ( 0 0$21 ) ;
3015: LD_INT 735
3017: PPUSH
3018: CALL_OW 67
// for i = 1 to 7 do
3022: LD_ADDR_VAR 0 2
3026: PUSH
3027: DOUBLE
3028: LD_INT 1
3030: DEC
3031: ST_TO_ADDR
3032: LD_INT 7
3034: PUSH
3035: FOR_TO
3036: IFFALSE 3129
// begin Cont = Cont - 1 ;
3038: LD_ADDR_EXP 11
3042: PUSH
3043: LD_EXP 11
3047: PUSH
3048: LD_INT 1
3050: MINUS
3051: ST_TO_ADDR
// un := CreateHumanWithClass ( [ 1 , 9 ] [ Rand ( 1 , 2 ) ] , skill ) ;
3052: LD_ADDR_VAR 0 3
3056: PUSH
3057: LD_INT 1
3059: PUSH
3060: LD_INT 9
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 2
3072: PPUSH
3073: CALL_OW 12
3077: ARRAY
3078: PPUSH
3079: LD_VAR 0 5
3083: PPUSH
3084: CALL 5104 0 2
3088: ST_TO_ADDR
// PlaceUnitArea ( un , [ ru_south2 , ru_west1 , ru_west2 ] [ Rand ( 1 , 3 ) ] , false ) ;
3089: LD_VAR 0 3
3093: PPUSH
3094: LD_INT 7
3096: PUSH
3097: LD_INT 4
3099: PUSH
3100: LD_INT 5
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: LIST
3107: PUSH
3108: LD_INT 1
3110: PPUSH
3111: LD_INT 3
3113: PPUSH
3114: CALL_OW 12
3118: ARRAY
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: CALL_OW 49
// end ;
3127: GO 3035
3129: POP
3130: POP
// wait ( 0 0$05 ) ;
3131: LD_INT 175
3133: PPUSH
3134: CALL_OW 67
// for i = 1 to 5 do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_INT 5
3150: PUSH
3151: FOR_TO
3152: IFFALSE 3259
// begin Cont = Cont - 1 ;
3154: LD_ADDR_EXP 11
3158: PUSH
3159: LD_EXP 11
3163: PUSH
3164: LD_INT 1
3166: MINUS
3167: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_wheeled ] [ Rand ( 1 , 2 ) ] ;
3168: LD_ADDR_OWVAR 37
3172: PUSH
3173: LD_INT 22
3175: PUSH
3176: LD_INT 23
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PUSH
3183: LD_INT 1
3185: PPUSH
3186: LD_INT 2
3188: PPUSH
3189: CALL_OW 12
3193: ARRAY
3194: ST_TO_ADDR
// vc_engine := engine_combustion ;
3195: LD_ADDR_OWVAR 39
3199: PUSH
3200: LD_INT 1
3202: ST_TO_ADDR
// vc_control := control_computer ;
3203: LD_ADDR_OWVAR 38
3207: PUSH
3208: LD_INT 3
3210: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_gun ] [ Rand ( 1 , 3 ) ] ;
3211: LD_ADDR_OWVAR 40
3215: PUSH
3216: LD_INT 43
3218: PUSH
3219: LD_INT 45
3221: PUSH
3222: LD_INT 44
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 1
3232: PPUSH
3233: LD_INT 3
3235: PPUSH
3236: CALL_OW 12
3240: ARRAY
3241: ST_TO_ADDR
// PlaceUnitArea ( CreateVehicle , ru_south1 , false ) ;
3242: CALL_OW 45
3246: PPUSH
3247: LD_INT 6
3249: PPUSH
3250: LD_INT 0
3252: PPUSH
3253: CALL_OW 49
// end ;
3257: GO 3151
3259: POP
3260: POP
// wait ( 0 0$13 ) ;
3261: LD_INT 455
3263: PPUSH
3264: CALL_OW 67
// un := CreateHumanWithClass ( 1 , skill ) ;
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: LD_INT 1
3275: PPUSH
3276: LD_VAR 0 5
3280: PPUSH
3281: CALL 5104 0 2
3285: ST_TO_ADDR
// ru_spec := ru_spec ^ un ;
3286: LD_ADDR_EXP 12
3290: PUSH
3291: LD_EXP 12
3295: PUSH
3296: LD_VAR 0 3
3300: ADD
3301: ST_TO_ADDR
// PlaceUnitArea ( un , ru_west2 , false ) ;
3302: LD_VAR 0 3
3306: PPUSH
3307: LD_INT 5
3309: PPUSH
3310: LD_INT 0
3312: PPUSH
3313: CALL_OW 49
// end ; 2 :
3317: GO 4606
3319: LD_INT 2
3321: DOUBLE
3322: EQUAL
3323: IFTRUE 3327
3325: GO 3981
3327: POP
// begin Wait ( 0 0$24 ) ;
3328: LD_INT 840
3330: PPUSH
3331: CALL_OW 67
// for i = 1 to 8 do
3335: LD_ADDR_VAR 0 2
3339: PUSH
3340: DOUBLE
3341: LD_INT 1
3343: DEC
3344: ST_TO_ADDR
3345: LD_INT 8
3347: PUSH
3348: FOR_TO
3349: IFFALSE 3442
// begin Cont = Cont - 1 ;
3351: LD_ADDR_EXP 11
3355: PUSH
3356: LD_EXP 11
3360: PUSH
3361: LD_INT 1
3363: MINUS
3364: ST_TO_ADDR
// un := CreateHumanWithClass ( [ 1 , 9 ] [ Rand ( 1 , 2 ) ] , skill ) ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: LD_INT 9
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 1
3382: PPUSH
3383: LD_INT 2
3385: PPUSH
3386: CALL_OW 12
3390: ARRAY
3391: PPUSH
3392: LD_VAR 0 5
3396: PPUSH
3397: CALL 5104 0 2
3401: ST_TO_ADDR
// PlaceUnitArea ( un , [ ru_south2 , ru_west1 , ru_west2 ] [ Rand ( 1 , 3 ) ] , false ) ;
3402: LD_VAR 0 3
3406: PPUSH
3407: LD_INT 7
3409: PUSH
3410: LD_INT 4
3412: PUSH
3413: LD_INT 5
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: PUSH
3421: LD_INT 1
3423: PPUSH
3424: LD_INT 3
3426: PPUSH
3427: CALL_OW 12
3431: ARRAY
3432: PPUSH
3433: LD_INT 0
3435: PPUSH
3436: CALL_OW 49
// end ;
3440: GO 3348
3442: POP
3443: POP
// wait ( 0 0$03 ) ;
3444: LD_INT 105
3446: PPUSH
3447: CALL_OW 67
// for i = 1 to 4 do
3451: LD_ADDR_VAR 0 2
3455: PUSH
3456: DOUBLE
3457: LD_INT 1
3459: DEC
3460: ST_TO_ADDR
3461: LD_INT 4
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3572
// begin Cont = Cont - 1 ;
3467: LD_ADDR_EXP 11
3471: PUSH
3472: LD_EXP 11
3476: PUSH
3477: LD_INT 1
3479: MINUS
3480: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ Rand ( 1 , 2 ) ] ;
3481: LD_ADDR_OWVAR 37
3485: PUSH
3486: LD_INT 22
3488: PUSH
3489: LD_INT 24
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_INT 1
3498: PPUSH
3499: LD_INT 2
3501: PPUSH
3502: CALL_OW 12
3506: ARRAY
3507: ST_TO_ADDR
// vc_engine := engine_combustion ;
3508: LD_ADDR_OWVAR 39
3512: PUSH
3513: LD_INT 1
3515: ST_TO_ADDR
// vc_control := control_computer ;
3516: LD_ADDR_OWVAR 38
3520: PUSH
3521: LD_INT 3
3523: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_gun ] [ Rand ( 1 , 3 ) ] ;
3524: LD_ADDR_OWVAR 40
3528: PUSH
3529: LD_INT 43
3531: PUSH
3532: LD_INT 45
3534: PUSH
3535: LD_INT 44
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 1
3545: PPUSH
3546: LD_INT 3
3548: PPUSH
3549: CALL_OW 12
3553: ARRAY
3554: ST_TO_ADDR
// PlaceUnitArea ( CreateVehicle , ru_south1 , false ) ;
3555: CALL_OW 45
3559: PPUSH
3560: LD_INT 6
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: CALL_OW 49
// end ;
3570: GO 3464
3572: POP
3573: POP
// wait ( 0 0$13 ) ;
3574: LD_INT 455
3576: PPUSH
3577: CALL_OW 67
// for i = 1 to 3 do
3581: LD_ADDR_VAR 0 2
3585: PUSH
3586: DOUBLE
3587: LD_INT 1
3589: DEC
3590: ST_TO_ADDR
3591: LD_INT 3
3593: PUSH
3594: FOR_TO
3595: IFFALSE 3648
// begin un := CreateHumanWithClass ( 1 , skill ) ;
3597: LD_ADDR_VAR 0 3
3601: PUSH
3602: LD_INT 1
3604: PPUSH
3605: LD_VAR 0 5
3609: PPUSH
3610: CALL 5104 0 2
3614: ST_TO_ADDR
// ru_spec := ru_spec ^ un ;
3615: LD_ADDR_EXP 12
3619: PUSH
3620: LD_EXP 12
3624: PUSH
3625: LD_VAR 0 3
3629: ADD
3630: ST_TO_ADDR
// PlaceUnitArea ( un , ru_west2 , false ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 5
3638: PPUSH
3639: LD_INT 0
3641: PPUSH
3642: CALL_OW 49
// end ;
3646: GO 3594
3648: POP
3649: POP
// wait ( 0 0$27 ) ;
3650: LD_INT 945
3652: PPUSH
3653: CALL_OW 67
// for i = 1 to 5 do
3657: LD_ADDR_VAR 0 2
3661: PUSH
3662: DOUBLE
3663: LD_INT 1
3665: DEC
3666: ST_TO_ADDR
3667: LD_INT 5
3669: PUSH
3670: FOR_TO
3671: IFFALSE 3778
// begin Cont = Cont - 1 ;
3673: LD_ADDR_EXP 11
3677: PUSH
3678: LD_EXP 11
3682: PUSH
3683: LD_INT 1
3685: MINUS
3686: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_wheeled ] [ Rand ( 1 , 2 ) ] ;
3687: LD_ADDR_OWVAR 37
3691: PUSH
3692: LD_INT 22
3694: PUSH
3695: LD_INT 23
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: LD_INT 1
3704: PPUSH
3705: LD_INT 2
3707: PPUSH
3708: CALL_OW 12
3712: ARRAY
3713: ST_TO_ADDR
// vc_engine := engine_combustion ;
3714: LD_ADDR_OWVAR 39
3718: PUSH
3719: LD_INT 1
3721: ST_TO_ADDR
// vc_control := control_computer ;
3722: LD_ADDR_OWVAR 38
3726: PUSH
3727: LD_INT 3
3729: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_gun ] [ Rand ( 1 , 3 ) ] ;
3730: LD_ADDR_OWVAR 40
3734: PUSH
3735: LD_INT 43
3737: PUSH
3738: LD_INT 45
3740: PUSH
3741: LD_INT 44
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: PUSH
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 3
3754: PPUSH
3755: CALL_OW 12
3759: ARRAY
3760: ST_TO_ADDR
// PlaceUnitArea ( CreateVehicle , ru_south1 , false ) ;
3761: CALL_OW 45
3765: PPUSH
3766: LD_INT 6
3768: PPUSH
3769: LD_INT 0
3771: PPUSH
3772: CALL_OW 49
// end ;
3776: GO 3670
3778: POP
3779: POP
// wait ( 0 0$13 ) ;
3780: LD_INT 455
3782: PPUSH
3783: CALL_OW 67
// for i = 1 to 5 do
3787: LD_ADDR_VAR 0 2
3791: PUSH
3792: DOUBLE
3793: LD_INT 1
3795: DEC
3796: ST_TO_ADDR
3797: LD_INT 5
3799: PUSH
3800: FOR_TO
3801: IFFALSE 3908
// begin Cont = Cont - 1 ;
3803: LD_ADDR_EXP 11
3807: PUSH
3808: LD_EXP 11
3812: PUSH
3813: LD_INT 1
3815: MINUS
3816: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_wheeled ] [ Rand ( 1 , 2 ) ] ;
3817: LD_ADDR_OWVAR 37
3821: PUSH
3822: LD_INT 22
3824: PUSH
3825: LD_INT 23
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 2
3837: PPUSH
3838: CALL_OW 12
3842: ARRAY
3843: ST_TO_ADDR
// vc_engine := engine_combustion ;
3844: LD_ADDR_OWVAR 39
3848: PUSH
3849: LD_INT 1
3851: ST_TO_ADDR
// vc_control := control_computer ;
3852: LD_ADDR_OWVAR 38
3856: PUSH
3857: LD_INT 3
3859: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_gun ] [ Rand ( 1 , 3 ) ] ;
3860: LD_ADDR_OWVAR 40
3864: PUSH
3865: LD_INT 43
3867: PUSH
3868: LD_INT 45
3870: PUSH
3871: LD_INT 44
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 1
3881: PPUSH
3882: LD_INT 3
3884: PPUSH
3885: CALL_OW 12
3889: ARRAY
3890: ST_TO_ADDR
// PlaceUnitArea ( CreateVehicle , ru_south1 , false ) ;
3891: CALL_OW 45
3895: PPUSH
3896: LD_INT 6
3898: PPUSH
3899: LD_INT 0
3901: PPUSH
3902: CALL_OW 49
// end ;
3906: GO 3800
3908: POP
3909: POP
// for i = 1 to 5 do
3910: LD_ADDR_VAR 0 2
3914: PUSH
3915: DOUBLE
3916: LD_INT 1
3918: DEC
3919: ST_TO_ADDR
3920: LD_INT 5
3922: PUSH
3923: FOR_TO
3924: IFFALSE 3977
// begin un := CreateHumanWithClass ( 1 , skill ) ;
3926: LD_ADDR_VAR 0 3
3930: PUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_VAR 0 5
3938: PPUSH
3939: CALL 5104 0 2
3943: ST_TO_ADDR
// ru_spec := ru_spec ^ un ;
3944: LD_ADDR_EXP 12
3948: PUSH
3949: LD_EXP 12
3953: PUSH
3954: LD_VAR 0 3
3958: ADD
3959: ST_TO_ADDR
// PlaceUnitArea ( un , ru_west2 , false ) ;
3960: LD_VAR 0 3
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: LD_INT 0
3970: PPUSH
3971: CALL_OW 49
// end ;
3975: GO 3923
3977: POP
3978: POP
// end ; 3 :
3979: GO 4606
3981: LD_INT 3
3983: DOUBLE
3984: EQUAL
3985: IFTRUE 3989
3987: GO 4605
3989: POP
// begin Wait ( 0 0$24 ) ;
3990: LD_INT 840
3992: PPUSH
3993: CALL_OW 67
// for i = 1 to 10 do
3997: LD_ADDR_VAR 0 2
4001: PUSH
4002: DOUBLE
4003: LD_INT 1
4005: DEC
4006: ST_TO_ADDR
4007: LD_INT 10
4009: PUSH
4010: FOR_TO
4011: IFFALSE 4104
// begin Cont = Cont - 1 ;
4013: LD_ADDR_EXP 11
4017: PUSH
4018: LD_EXP 11
4022: PUSH
4023: LD_INT 1
4025: MINUS
4026: ST_TO_ADDR
// un := CreateHumanWithClass ( [ 1 , 9 ] [ Rand ( 1 , 2 ) ] , skill ) ;
4027: LD_ADDR_VAR 0 3
4031: PUSH
4032: LD_INT 1
4034: PUSH
4035: LD_INT 9
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: PPUSH
4054: LD_VAR 0 5
4058: PPUSH
4059: CALL 5104 0 2
4063: ST_TO_ADDR
// PlaceUnitArea ( un , [ ru_south2 , ru_west1 , ru_west2 ] [ Rand ( 1 , 3 ) ] , false ) ;
4064: LD_VAR 0 3
4068: PPUSH
4069: LD_INT 7
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: PUSH
4083: LD_INT 1
4085: PPUSH
4086: LD_INT 3
4088: PPUSH
4089: CALL_OW 12
4093: ARRAY
4094: PPUSH
4095: LD_INT 0
4097: PPUSH
4098: CALL_OW 49
// end ;
4102: GO 4010
4104: POP
4105: POP
// wait ( 0 0$03 ) ;
4106: LD_INT 105
4108: PPUSH
4109: CALL_OW 67
// for i = 1 to 5 do
4113: LD_ADDR_VAR 0 2
4117: PUSH
4118: DOUBLE
4119: LD_INT 1
4121: DEC
4122: ST_TO_ADDR
4123: LD_INT 5
4125: PUSH
4126: FOR_TO
4127: IFFALSE 4234
// begin Cont = Cont - 1 ;
4129: LD_ADDR_EXP 11
4133: PUSH
4134: LD_EXP 11
4138: PUSH
4139: LD_INT 1
4141: MINUS
4142: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_heavy_tracked ] [ Rand ( 1 , 2 ) ] ;
4143: LD_ADDR_OWVAR 37
4147: PUSH
4148: LD_INT 22
4150: PUSH
4151: LD_INT 24
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PUSH
4158: LD_INT 1
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: CALL_OW 12
4168: ARRAY
4169: ST_TO_ADDR
// vc_engine := engine_combustion ;
4170: LD_ADDR_OWVAR 39
4174: PUSH
4175: LD_INT 1
4177: ST_TO_ADDR
// vc_control := control_computer ;
4178: LD_ADDR_OWVAR 38
4182: PUSH
4183: LD_INT 3
4185: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_gun ] [ Rand ( 1 , 3 ) ] ;
4186: LD_ADDR_OWVAR 40
4190: PUSH
4191: LD_INT 43
4193: PUSH
4194: LD_INT 45
4196: PUSH
4197: LD_INT 44
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: LD_INT 1
4207: PPUSH
4208: LD_INT 3
4210: PPUSH
4211: CALL_OW 12
4215: ARRAY
4216: ST_TO_ADDR
// PlaceUnitArea ( CreateVehicle , ru_south1 , false ) ;
4217: CALL_OW 45
4221: PPUSH
4222: LD_INT 6
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 49
// end ;
4232: GO 4126
4234: POP
4235: POP
// wait ( 0 0$13 ) ;
4236: LD_INT 455
4238: PPUSH
4239: CALL_OW 67
// for i = 1 to 3 do
4243: LD_ADDR_VAR 0 2
4247: PUSH
4248: DOUBLE
4249: LD_INT 1
4251: DEC
4252: ST_TO_ADDR
4253: LD_INT 3
4255: PUSH
4256: FOR_TO
4257: IFFALSE 4310
// begin un := CreateHumanWithClass ( 1 , skill ) ;
4259: LD_ADDR_VAR 0 3
4263: PUSH
4264: LD_INT 1
4266: PPUSH
4267: LD_VAR 0 5
4271: PPUSH
4272: CALL 5104 0 2
4276: ST_TO_ADDR
// ru_spec := ru_spec ^ un ;
4277: LD_ADDR_EXP 12
4281: PUSH
4282: LD_EXP 12
4286: PUSH
4287: LD_VAR 0 3
4291: ADD
4292: ST_TO_ADDR
// PlaceUnitArea ( un , ru_west2 , false ) ;
4293: LD_VAR 0 3
4297: PPUSH
4298: LD_INT 5
4300: PPUSH
4301: LD_INT 0
4303: PPUSH
4304: CALL_OW 49
// end ;
4308: GO 4256
4310: POP
4311: POP
// wait ( 0 0$27 ) ;
4312: LD_INT 945
4314: PPUSH
4315: CALL_OW 67
// for i = 1 to 5 do
4319: LD_ADDR_VAR 0 2
4323: PUSH
4324: DOUBLE
4325: LD_INT 1
4327: DEC
4328: ST_TO_ADDR
4329: LD_INT 5
4331: PUSH
4332: FOR_TO
4333: IFFALSE 4421
// begin Cont = Cont - 1 ;
4335: LD_ADDR_EXP 11
4339: PUSH
4340: LD_EXP 11
4344: PUSH
4345: LD_INT 1
4347: MINUS
4348: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
4349: LD_ADDR_OWVAR 37
4353: PUSH
4354: LD_INT 24
4356: ST_TO_ADDR
// vc_engine := engine_combustion ;
4357: LD_ADDR_OWVAR 39
4361: PUSH
4362: LD_INT 1
4364: ST_TO_ADDR
// vc_control := control_computer ;
4365: LD_ADDR_OWVAR 38
4369: PUSH
4370: LD_INT 3
4372: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_gun ] [ Rand ( 1 , 3 ) ] ;
4373: LD_ADDR_OWVAR 40
4377: PUSH
4378: LD_INT 43
4380: PUSH
4381: LD_INT 45
4383: PUSH
4384: LD_INT 44
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: PUSH
4392: LD_INT 1
4394: PPUSH
4395: LD_INT 3
4397: PPUSH
4398: CALL_OW 12
4402: ARRAY
4403: ST_TO_ADDR
// PlaceUnitArea ( CreateVehicle , ru_south1 , false ) ;
4404: CALL_OW 45
4408: PPUSH
4409: LD_INT 6
4411: PPUSH
4412: LD_INT 0
4414: PPUSH
4415: CALL_OW 49
// end ;
4419: GO 4332
4421: POP
4422: POP
// wait ( 0 0$12 ) ;
4423: LD_INT 420
4425: PPUSH
4426: CALL_OW 67
// for i = 1 to 5 do
4430: LD_ADDR_VAR 0 2
4434: PUSH
4435: DOUBLE
4436: LD_INT 1
4438: DEC
4439: ST_TO_ADDR
4440: LD_INT 5
4442: PUSH
4443: FOR_TO
4444: IFFALSE 4532
// begin Cont = Cont - 1 ;
4446: LD_ADDR_EXP 11
4450: PUSH
4451: LD_EXP 11
4455: PUSH
4456: LD_INT 1
4458: MINUS
4459: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
4460: LD_ADDR_OWVAR 37
4464: PUSH
4465: LD_INT 24
4467: ST_TO_ADDR
// vc_engine := engine_combustion ;
4468: LD_ADDR_OWVAR 39
4472: PUSH
4473: LD_INT 1
4475: ST_TO_ADDR
// vc_control := control_computer ;
4476: LD_ADDR_OWVAR 38
4480: PUSH
4481: LD_INT 3
4483: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_gun ] [ Rand ( 1 , 3 ) ] ;
4484: LD_ADDR_OWVAR 40
4488: PUSH
4489: LD_INT 43
4491: PUSH
4492: LD_INT 45
4494: PUSH
4495: LD_INT 44
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 1
4505: PPUSH
4506: LD_INT 3
4508: PPUSH
4509: CALL_OW 12
4513: ARRAY
4514: ST_TO_ADDR
// PlaceUnitArea ( CreateVehicle , ru_south1 , false ) ;
4515: CALL_OW 45
4519: PPUSH
4520: LD_INT 6
4522: PPUSH
4523: LD_INT 0
4525: PPUSH
4526: CALL_OW 49
// end ;
4530: GO 4443
4532: POP
4533: POP
// for i = 1 to 5 do
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: DOUBLE
4540: LD_INT 1
4542: DEC
4543: ST_TO_ADDR
4544: LD_INT 5
4546: PUSH
4547: FOR_TO
4548: IFFALSE 4601
// begin un := CreateHumanWithClass ( 1 , skill ) ;
4550: LD_ADDR_VAR 0 3
4554: PUSH
4555: LD_INT 1
4557: PPUSH
4558: LD_VAR 0 5
4562: PPUSH
4563: CALL 5104 0 2
4567: ST_TO_ADDR
// ru_spec := ru_spec ^ un ;
4568: LD_ADDR_EXP 12
4572: PUSH
4573: LD_EXP 12
4577: PUSH
4578: LD_VAR 0 3
4582: ADD
4583: ST_TO_ADDR
// PlaceUnitArea ( un , ru_west2 , false ) ;
4584: LD_VAR 0 3
4588: PPUSH
4589: LD_INT 5
4591: PPUSH
4592: LD_INT 0
4594: PPUSH
4595: CALL_OW 49
// end ;
4599: GO 4547
4601: POP
4602: POP
// end ; end ;
4603: GO 4606
4605: POP
// end ;
4606: LD_VAR 0 1
4610: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) do var i , filter ;
4611: LD_INT 22
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PPUSH
4621: CALL_OW 69
4625: IFFALSE 4813
4627: GO 4629
4629: DISABLE
4630: LD_INT 0
4632: PPUSH
4633: PPUSH
// begin enable ;
4634: ENABLE
// filter := FilterAllUnits ( [ f_side , 3 ] ) diff ru_spec ;
4635: LD_ADDR_VAR 0 2
4639: PUSH
4640: LD_INT 22
4642: PUSH
4643: LD_INT 3
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PPUSH
4650: CALL_OW 69
4654: PUSH
4655: LD_EXP 12
4659: DIFF
4660: ST_TO_ADDR
// for i = 1 to filter do
4661: LD_ADDR_VAR 0 1
4665: PUSH
4666: DOUBLE
4667: LD_INT 1
4669: DEC
4670: ST_TO_ADDR
4671: LD_VAR 0 2
4675: PUSH
4676: FOR_TO
4677: IFFALSE 4762
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
4679: LD_VAR 0 2
4683: PUSH
4684: LD_VAR 0 1
4688: ARRAY
4689: PPUSH
4690: CALL_OW 314
4694: NOT
4695: PUSH
4696: LD_VAR 0 2
4700: PUSH
4701: LD_VAR 0 1
4705: ARRAY
4706: PPUSH
4707: CALL_OW 302
4711: AND
4712: IFFALSE 4760
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , filter [ i ] ) ) ;
4714: LD_VAR 0 2
4718: PUSH
4719: LD_VAR 0 1
4723: ARRAY
4724: PPUSH
4725: LD_INT 22
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PPUSH
4735: CALL_OW 69
4739: PPUSH
4740: LD_VAR 0 2
4744: PUSH
4745: LD_VAR 0 1
4749: ARRAY
4750: PPUSH
4751: CALL_OW 74
4755: PPUSH
4756: CALL_OW 115
4760: GO 4676
4762: POP
4763: POP
// if ru_spec then
4764: LD_EXP 12
4768: IFFALSE 4813
// for i = 1 to ru_spec do
4770: LD_ADDR_VAR 0 1
4774: PUSH
4775: DOUBLE
4776: LD_INT 1
4778: DEC
4779: ST_TO_ADDR
4780: LD_EXP 12
4784: PUSH
4785: FOR_TO
4786: IFFALSE 4811
// begin ComMoveXY ( ru_spec [ i ] , 87 , 3 ) ;
4788: LD_EXP 12
4792: PUSH
4793: LD_VAR 0 1
4797: ARRAY
4798: PPUSH
4799: LD_INT 87
4801: PPUSH
4802: LD_INT 3
4804: PPUSH
4805: CALL_OW 111
// end ;
4809: GO 4785
4811: POP
4812: POP
// end ;
4813: PPOPN 2
4815: END
// every 5 5$00 trigger Cont > 0 do
4816: LD_EXP 11
4820: PUSH
4821: LD_INT 0
4823: GREATER
4824: IFFALSE 4837
4826: GO 4828
4828: DISABLE
// begin Cont := 0 ;
4829: LD_ADDR_EXP 11
4833: PUSH
4834: LD_INT 0
4836: ST_TO_ADDR
// end ;
4837: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ f_side , 3 ] ) then
4838: LD_VAR 0 1
4842: PUSH
4843: LD_INT 22
4845: PUSH
4846: LD_INT 3
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PPUSH
4853: CALL_OW 69
4857: IN
4858: IFFALSE 4874
// counter := counter + 1 ;
4860: LD_ADDR_EXP 13
4864: PUSH
4865: LD_EXP 13
4869: PUSH
4870: LD_INT 1
4872: PLUS
4873: ST_TO_ADDR
// end ; end_of_file
4874: PPOPN 1
4876: END
// export function IntBazooka ( list , filter ) ; var ta , c , i ; begin
4877: LD_INT 0
4879: PPUSH
4880: PPUSH
4881: PPUSH
4882: PPUSH
// c := Rand ( 1 , 3 ) ;
4883: LD_ADDR_VAR 0 5
4887: PUSH
4888: LD_INT 1
4890: PPUSH
4891: LD_INT 3
4893: PPUSH
4894: CALL_OW 12
4898: ST_TO_ADDR
// for i = 1 to list do
4899: LD_ADDR_VAR 0 6
4903: PUSH
4904: DOUBLE
4905: LD_INT 1
4907: DEC
4908: ST_TO_ADDR
4909: LD_VAR 0 1
4913: PUSH
4914: FOR_TO
4915: IFFALSE 5097
// for ta in filter do
4917: LD_ADDR_VAR 0 4
4921: PUSH
4922: LD_VAR 0 2
4926: PUSH
4927: FOR_IN
4928: IFFALSE 5093
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
4930: LD_VAR 0 1
4934: PUSH
4935: LD_VAR 0 6
4939: ARRAY
4940: PPUSH
4941: LD_VAR 0 4
4945: PPUSH
4946: CALL_OW 296
4950: PUSH
4951: LD_INT 13
4953: LESSEQUAL
4954: IFFALSE 5091
// begin case c of 1 :
4956: LD_VAR 0 5
4960: PUSH
4961: LD_INT 1
4963: DOUBLE
4964: EQUAL
4965: IFTRUE 4969
4967: GO 5007
4969: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
4970: LD_VAR 0 1
4974: PUSH
4975: LD_VAR 0 6
4979: ARRAY
4980: PPUSH
4981: LD_VAR 0 4
4985: PPUSH
4986: CALL_OW 250
4990: PPUSH
4991: LD_VAR 0 4
4995: PPUSH
4996: CALL_OW 251
5000: PPUSH
5001: CALL_OW 154
5005: GO 5091
5007: LD_INT 2
5009: DOUBLE
5010: EQUAL
5011: IFTRUE 5015
5013: GO 5079
5015: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
5016: LD_VAR 0 1
5020: PUSH
5021: LD_VAR 0 6
5025: ARRAY
5026: PPUSH
5027: LD_VAR 0 4
5031: PPUSH
5032: CALL_OW 250
5036: PUSH
5037: LD_INT 1
5039: NEG
5040: PPUSH
5041: LD_INT 1
5043: PPUSH
5044: CALL_OW 12
5048: PLUS
5049: PPUSH
5050: LD_VAR 0 4
5054: PPUSH
5055: CALL_OW 251
5059: PUSH
5060: LD_INT 1
5062: NEG
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 12
5071: PLUS
5072: PPUSH
5073: CALL_OW 153
5077: GO 5091
5079: LD_INT 3
5081: DOUBLE
5082: EQUAL
5083: IFTRUE 5087
5085: GO 5090
5087: POP
// ; end ;
5088: GO 5091
5090: POP
// end ; end ;
5091: GO 4927
5093: POP
5094: POP
5095: GO 4914
5097: POP
5098: POP
// end ;
5099: LD_VAR 0 3
5103: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
5104: LD_INT 0
5106: PPUSH
5107: PPUSH
5108: PPUSH
5109: PPUSH
5110: PPUSH
5111: PPUSH
// hc_class := clas ;
5112: LD_ADDR_OWVAR 28
5116: PUSH
5117: LD_VAR 0 1
5121: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
5122: LD_ADDR_VAR 0 4
5126: PUSH
5127: LD_VAR 0 2
5131: PUSH
5132: LD_INT 1
5134: NEG
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 12
5143: PLUS
5144: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
5145: LD_ADDR_VAR 0 5
5149: PUSH
5150: LD_VAR 0 2
5154: PUSH
5155: LD_INT 1
5157: NEG
5158: PPUSH
5159: LD_INT 1
5161: PPUSH
5162: CALL_OW 12
5166: PLUS
5167: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
5168: LD_ADDR_VAR 0 6
5172: PUSH
5173: LD_VAR 0 2
5177: PUSH
5178: LD_INT 1
5180: NEG
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 12
5189: PLUS
5190: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
5191: LD_ADDR_VAR 0 7
5195: PUSH
5196: LD_VAR 0 2
5200: PUSH
5201: LD_INT 1
5203: NEG
5204: PPUSH
5205: LD_INT 1
5207: PPUSH
5208: CALL_OW 12
5212: PLUS
5213: ST_TO_ADDR
// if clas = 1 or clas = 5 or clas = 8 or clas = 9 then
5214: LD_VAR 0 1
5218: PUSH
5219: LD_INT 1
5221: EQUAL
5222: PUSH
5223: LD_VAR 0 1
5227: PUSH
5228: LD_INT 5
5230: EQUAL
5231: OR
5232: PUSH
5233: LD_VAR 0 1
5237: PUSH
5238: LD_INT 8
5240: EQUAL
5241: OR
5242: PUSH
5243: LD_VAR 0 1
5247: PUSH
5248: LD_INT 9
5250: EQUAL
5251: OR
5252: IFFALSE 5277
// bonus := [ 2 , 0 , 0 , 0 ] ;
5254: LD_ADDR_VAR 0 8
5258: PUSH
5259: LD_INT 2
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: LD_INT 0
5267: PUSH
5268: LD_INT 0
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: ST_TO_ADDR
// if clas = 2 then
5277: LD_VAR 0 1
5281: PUSH
5282: LD_INT 2
5284: EQUAL
5285: IFFALSE 5310
// bonus := [ 0 , 2 , 0 , 0 ] ;
5287: LD_ADDR_VAR 0 8
5291: PUSH
5292: LD_INT 0
5294: PUSH
5295: LD_INT 2
5297: PUSH
5298: LD_INT 0
5300: PUSH
5301: LD_INT 0
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: ST_TO_ADDR
// if clas = 3 then
5310: LD_VAR 0 1
5314: PUSH
5315: LD_INT 3
5317: EQUAL
5318: IFFALSE 5343
// bonus := [ 0 , 0 , 2 , 0 ] ;
5320: LD_ADDR_VAR 0 8
5324: PUSH
5325: LD_INT 0
5327: PUSH
5328: LD_INT 0
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: LD_INT 0
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: ST_TO_ADDR
// if clas = 4 then
5343: LD_VAR 0 1
5347: PUSH
5348: LD_INT 4
5350: EQUAL
5351: IFFALSE 5376
// bonus := [ 0 , 0 , 0 , 2 ] ;
5353: LD_ADDR_VAR 0 8
5357: PUSH
5358: LD_INT 0
5360: PUSH
5361: LD_INT 0
5363: PUSH
5364: LD_INT 0
5366: PUSH
5367: LD_INT 2
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: ST_TO_ADDR
// if clas > 4 and not clas = 5 and not clas = 8 and not clas = 9 then
5376: LD_VAR 0 1
5380: PUSH
5381: LD_INT 4
5383: GREATER
5384: PUSH
5385: LD_VAR 0 1
5389: PUSH
5390: LD_INT 5
5392: EQUAL
5393: NOT
5394: AND
5395: PUSH
5396: LD_VAR 0 1
5400: PUSH
5401: LD_INT 8
5403: EQUAL
5404: NOT
5405: AND
5406: PUSH
5407: LD_VAR 0 1
5411: PUSH
5412: LD_INT 9
5414: EQUAL
5415: NOT
5416: AND
5417: IFFALSE 5442
// bonus := [ 0 , 0 , 0 , 0 ] ;
5419: LD_ADDR_VAR 0 8
5423: PUSH
5424: LD_INT 0
5426: PUSH
5427: LD_INT 0
5429: PUSH
5430: LD_INT 0
5432: PUSH
5433: LD_INT 0
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
5442: LD_ADDR_OWVAR 30
5446: PUSH
5447: LD_INT 0
5449: PPUSH
5450: LD_INT 2
5452: PPUSH
5453: CALL_OW 12
5457: PUSH
5458: LD_INT 0
5460: PPUSH
5461: LD_INT 2
5463: PPUSH
5464: CALL_OW 12
5468: PUSH
5469: LD_INT 0
5471: PPUSH
5472: LD_INT 2
5474: PPUSH
5475: CALL_OW 12
5479: PUSH
5480: LD_INT 0
5482: PPUSH
5483: LD_INT 2
5485: PPUSH
5486: CALL_OW 12
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
5497: LD_ADDR_OWVAR 31
5501: PUSH
5502: LD_VAR 0 4
5506: PUSH
5507: LD_VAR 0 8
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PLUS
5516: PUSH
5517: LD_VAR 0 5
5521: PUSH
5522: LD_VAR 0 8
5526: PUSH
5527: LD_INT 2
5529: ARRAY
5530: PLUS
5531: PUSH
5532: LD_VAR 0 6
5536: PUSH
5537: LD_VAR 0 8
5541: PUSH
5542: LD_INT 3
5544: ARRAY
5545: PLUS
5546: PUSH
5547: LD_VAR 0 7
5551: PUSH
5552: LD_VAR 0 8
5556: PUSH
5557: LD_INT 4
5559: ARRAY
5560: PLUS
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
5568: LD_ADDR_OWVAR 27
5572: PUSH
5573: LD_INT 1
5575: PPUSH
5576: LD_INT 2
5578: PPUSH
5579: CALL_OW 12
5583: ST_TO_ADDR
// hc_gallery :=  ;
5584: LD_ADDR_OWVAR 33
5588: PUSH
5589: LD_STRING 
5591: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
5592: LD_ADDR_OWVAR 29
5596: PUSH
5597: LD_INT 8
5599: PPUSH
5600: LD_INT 12
5602: PPUSH
5603: CALL_OW 12
5607: PUSH
5608: LD_INT 9
5610: PPUSH
5611: LD_INT 11
5613: PPUSH
5614: CALL_OW 12
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: ST_TO_ADDR
// hc_name :=  ;
5623: LD_ADDR_OWVAR 26
5627: PUSH
5628: LD_STRING 
5630: ST_TO_ADDR
// result := CreateHuman ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: CALL_OW 44
5640: ST_TO_ADDR
// end ; end_of_file
5641: LD_VAR 0 3
5645: RET
// export function PrepareNature ; var i , animal ; begin
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
5650: PPUSH
// uc_side = 0 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 0
5658: ST_TO_ADDR
// uc_nation = 0 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 0
5666: ST_TO_ADDR
// for i = 1 to 4 do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_INT 4
5679: PUSH
5680: FOR_TO
5681: IFFALSE 5734
// begin hc_class = 18 ;
5683: LD_ADDR_OWVAR 28
5687: PUSH
5688: LD_INT 18
5690: ST_TO_ADDR
// hc_gallery = sandnature ;
5691: LD_ADDR_OWVAR 33
5695: PUSH
5696: LD_STRING sandnature
5698: ST_TO_ADDR
// hc_face_number = 1 ;
5699: LD_ADDR_OWVAR 34
5703: PUSH
5704: LD_INT 1
5706: ST_TO_ADDR
// animal := CreateHuman ;
5707: LD_ADDR_VAR 0 3
5711: PUSH
5712: CALL_OW 44
5716: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
5717: LD_VAR 0 3
5721: PPUSH
5722: LD_INT 9
5724: PPUSH
5725: LD_INT 0
5727: PPUSH
5728: CALL_OW 49
// end ;
5732: GO 5680
5734: POP
5735: POP
// for i = 1 to 2 do
5736: LD_ADDR_VAR 0 2
5740: PUSH
5741: DOUBLE
5742: LD_INT 1
5744: DEC
5745: ST_TO_ADDR
5746: LD_INT 2
5748: PUSH
5749: FOR_TO
5750: IFFALSE 5803
// begin hc_class = 13 ;
5752: LD_ADDR_OWVAR 28
5756: PUSH
5757: LD_INT 13
5759: ST_TO_ADDR
// hc_gallery = sandnature ;
5760: LD_ADDR_OWVAR 33
5764: PUSH
5765: LD_STRING sandnature
5767: ST_TO_ADDR
// hc_face_number = 4 ;
5768: LD_ADDR_OWVAR 34
5772: PUSH
5773: LD_INT 4
5775: ST_TO_ADDR
// animal := CreateHuman ;
5776: LD_ADDR_VAR 0 3
5780: PUSH
5781: CALL_OW 44
5785: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
5786: LD_VAR 0 3
5790: PPUSH
5791: LD_INT 9
5793: PPUSH
5794: LD_INT 0
5796: PPUSH
5797: CALL_OW 49
// end ;
5801: GO 5749
5803: POP
5804: POP
// for i = 1 to 5 do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_INT 5
5817: PUSH
5818: FOR_TO
5819: IFFALSE 5872
// begin hc_class = 20 ;
5821: LD_ADDR_OWVAR 28
5825: PUSH
5826: LD_INT 20
5828: ST_TO_ADDR
// hc_gallery = sandnature ;
5829: LD_ADDR_OWVAR 33
5833: PUSH
5834: LD_STRING sandnature
5836: ST_TO_ADDR
// hc_face_number = 2 ;
5837: LD_ADDR_OWVAR 34
5841: PUSH
5842: LD_INT 2
5844: ST_TO_ADDR
// animal := CreateHuman ;
5845: LD_ADDR_VAR 0 3
5849: PUSH
5850: CALL_OW 44
5854: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
5855: LD_VAR 0 3
5859: PPUSH
5860: LD_INT 8
5862: PPUSH
5863: LD_INT 0
5865: PPUSH
5866: CALL_OW 49
// end ;
5870: GO 5818
5872: POP
5873: POP
// end ;
5874: LD_VAR 0 1
5878: RET
