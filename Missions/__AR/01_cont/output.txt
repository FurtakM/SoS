// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareTrigger ;
   4: CALL 33 0 0
// PrepareNature ;
   8: CALL 4642 0 0
// PrepareRussian ;
  12: CALL 73 0 0
// PrepareAmerican ;
  16: CALL 3378 0 0
// PrepareArabian ;
  20: CALL 4109 0 0
// PrepareHero ;
  24: CALL 4571 0 0
// Action ;
  28: CALL 4909 0 0
// end ;
  32: END
// export tank_go , connect , am_help , us_attacked ; function PrepareTrigger ; begin
  33: LD_INT 0
  35: PPUSH
// tank_go = false ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// connect = false ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// am_help = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// us_attacked = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// end ; end_of_file
  68: LD_VAR 0 1
  72: RET
// export ru ; export rus_bun ; export rus_sol , rus_eng , rus_mech , rus_sci , rus_pat ; export rus_tank ; export eng1 , eng2 ; export function PrepareRussian ; var un , veh , b , i , dif ; begin
  73: LD_INT 0
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
// ru := 3 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 3
  88: ST_TO_ADDR
// rus_bun := FilterAllUnits ( [ [ f_side , ru ] , [ f_btype , b_breastwork ] ] ) ;
  89: LD_ADDR_EXP 6
  93: PUSH
  94: LD_INT 22
  96: PUSH
  97: LD_EXP 5
 101: PUSH
 102: EMPTY
 103: LIST
 104: LIST
 105: PUSH
 106: LD_INT 30
 108: PUSH
 109: LD_INT 31
 111: PUSH
 112: EMPTY
 113: LIST
 114: LIST
 115: PUSH
 116: EMPTY
 117: LIST
 118: LIST
 119: PPUSH
 120: CALL_OW 69
 124: ST_TO_ADDR
// rus_tank := [ ] ;
 125: LD_ADDR_EXP 12
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// dif := [ 1 , 1 , 2 ] [ Difficulty ] ;
 132: LD_ADDR_VAR 0 6
 136: PUSH
 137: LD_INT 1
 139: PUSH
 140: LD_INT 1
 142: PUSH
 143: LD_INT 2
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: LIST
 150: PUSH
 151: LD_OWVAR 67
 155: ARRAY
 156: ST_TO_ADDR
// uc_side := ru ;
 157: LD_ADDR_OWVAR 20
 161: PUSH
 162: LD_EXP 5
 166: ST_TO_ADDR
// uc_nation := ru ;
 167: LD_ADDR_OWVAR 21
 171: PUSH
 172: LD_EXP 5
 176: ST_TO_ADDR
// for i = 1 to 7 do
 177: LD_ADDR_VAR 0 5
 181: PUSH
 182: DOUBLE
 183: LD_INT 1
 185: DEC
 186: ST_TO_ADDR
 187: LD_INT 7
 189: PUSH
 190: FOR_TO
 191: IFFALSE 376
// begin hc_class = 1 ;
 193: LD_ADDR_OWVAR 28
 197: PUSH
 198: LD_INT 1
 200: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) + ( dif ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
 201: LD_ADDR_OWVAR 31
 205: PUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: CALL_OW 12
 216: PUSH
 217: LD_VAR 0 6
 221: PLUS
 222: PUSH
 223: LD_INT 0
 225: PPUSH
 226: LD_INT 2
 228: PPUSH
 229: CALL_OW 12
 233: PUSH
 234: LD_INT 0
 236: PPUSH
 237: LD_INT 2
 239: PPUSH
 240: CALL_OW 12
 244: PUSH
 245: LD_INT 0
 247: PPUSH
 248: LD_INT 2
 250: PPUSH
 251: CALL_OW 12
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
 262: LD_ADDR_OWVAR 27
 266: PUSH
 267: LD_INT 1
 269: PPUSH
 270: LD_INT 2
 272: PPUSH
 273: CALL_OW 12
 277: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
 278: LD_ADDR_OWVAR 29
 282: PUSH
 283: LD_INT 8
 285: PPUSH
 286: LD_INT 10
 288: PPUSH
 289: CALL_OW 12
 293: PUSH
 294: LD_INT 9
 296: PPUSH
 297: LD_INT 11
 299: PPUSH
 300: CALL_OW 12
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: ST_TO_ADDR
// hc_name =  ;
 309: LD_ADDR_OWVAR 26
 313: PUSH
 314: LD_STRING 
 316: ST_TO_ADDR
// hc_gallery =  ;
 317: LD_ADDR_OWVAR 33
 321: PUSH
 322: LD_STRING 
 324: ST_TO_ADDR
// un := CreateHuman ;
 325: LD_ADDR_VAR 0 2
 329: PUSH
 330: CALL_OW 44
 334: ST_TO_ADDR
// PlaceUnitArea ( un , ru_bun , false ) ;
 335: LD_VAR 0 2
 339: PPUSH
 340: LD_INT 2
 342: PPUSH
 343: LD_INT 0
 345: PPUSH
 346: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( rus_bun , un ) ) ;
 350: LD_VAR 0 2
 354: PPUSH
 355: LD_EXP 6
 359: PPUSH
 360: LD_VAR 0 2
 364: PPUSH
 365: CALL_OW 74
 369: PPUSH
 370: CALL_OW 120
// end ;
 374: GO 190
 376: POP
 377: POP
// for i = 1 to 3 do
 378: LD_ADDR_VAR 0 5
 382: PUSH
 383: DOUBLE
 384: LD_INT 1
 386: DEC
 387: ST_TO_ADDR
 388: LD_INT 3
 390: PUSH
 391: FOR_TO
 392: IFFALSE 545
// begin hc_class = 2 ;
 394: LD_ADDR_OWVAR 28
 398: PUSH
 399: LD_INT 2
 401: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 2 ) + ( dif ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
 402: LD_ADDR_OWVAR 31
 406: PUSH
 407: LD_INT 0
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL_OW 12
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: CALL_OW 12
 428: PUSH
 429: LD_VAR 0 6
 433: PLUS
 434: PUSH
 435: LD_INT 0
 437: PPUSH
 438: LD_INT 2
 440: PPUSH
 441: CALL_OW 12
 445: PUSH
 446: LD_INT 0
 448: PPUSH
 449: LD_INT 2
 451: PPUSH
 452: CALL_OW 12
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: ST_TO_ADDR
// hc_sex = sex_male ;
 463: LD_ADDR_OWVAR 27
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
 471: LD_ADDR_OWVAR 29
 475: PUSH
 476: LD_INT 8
 478: PPUSH
 479: LD_INT 10
 481: PPUSH
 482: CALL_OW 12
 486: PUSH
 487: LD_INT 9
 489: PPUSH
 490: LD_INT 11
 492: PPUSH
 493: CALL_OW 12
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// hc_name =  ;
 502: LD_ADDR_OWVAR 26
 506: PUSH
 507: LD_STRING 
 509: ST_TO_ADDR
// hc_gallery =  ;
 510: LD_ADDR_OWVAR 33
 514: PUSH
 515: LD_STRING 
 517: ST_TO_ADDR
// un := CreateHuman ;
 518: LD_ADDR_VAR 0 2
 522: PUSH
 523: CALL_OW 44
 527: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 528: LD_VAR 0 2
 532: PPUSH
 533: LD_INT 3
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// end ;
 543: GO 391
 545: POP
 546: POP
// for i = 1 to 2 do
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 2
 559: PUSH
 560: FOR_TO
 561: IFFALSE 705
// begin hc_class = 4 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 4
 570: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 2 ) , Rand ( 0 , 1 ) , Rand ( 0 , 4 ) ] ;
 571: LD_ADDR_OWVAR 31
 575: PUSH
 576: LD_INT 0
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL_OW 12
 586: PUSH
 587: LD_INT 0
 589: PPUSH
 590: LD_INT 2
 592: PPUSH
 593: CALL_OW 12
 597: PUSH
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 1
 603: PPUSH
 604: CALL_OW 12
 608: PUSH
 609: LD_INT 0
 611: PPUSH
 612: LD_INT 4
 614: PPUSH
 615: CALL_OW 12
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: ST_TO_ADDR
// hc_sex = sex_male ;
 626: LD_ADDR_OWVAR 27
 630: PUSH
 631: LD_INT 1
 633: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
 634: LD_ADDR_OWVAR 29
 638: PUSH
 639: LD_INT 8
 641: PPUSH
 642: LD_INT 10
 644: PPUSH
 645: CALL_OW 12
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 11
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: ST_TO_ADDR
// hc_name =  ;
 665: LD_ADDR_OWVAR 26
 669: PUSH
 670: LD_STRING 
 672: ST_TO_ADDR
// hc_gallery =  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// un := CreateHuman ;
 681: LD_ADDR_VAR 0 2
 685: PUSH
 686: CALL_OW 44
 690: ST_TO_ADDR
// PlaceHumanInUnit ( un , rus_lab ) ;
 691: LD_VAR 0 2
 695: PPUSH
 696: LD_INT 4
 698: PPUSH
 699: CALL_OW 52
// end ;
 703: GO 560
 705: POP
 706: POP
// for i = 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
 707: LD_ADDR_VAR 0 5
 711: PUSH
 712: DOUBLE
 713: LD_INT 1
 715: DEC
 716: ST_TO_ADDR
 717: LD_INT 3
 719: PUSH
 720: LD_INT 1
 722: PUSH
 723: LD_INT 2
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: LIST
 733: PUSH
 734: LD_OWVAR 67
 738: ARRAY
 739: PLUS
 740: PUSH
 741: FOR_TO
 742: IFFALSE 895
// begin hc_class = 1 ;
 744: LD_ADDR_OWVAR 28
 748: PUSH
 749: LD_INT 1
 751: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) + ( dif ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
 752: LD_ADDR_OWVAR 31
 756: PUSH
 757: LD_INT 0
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL_OW 12
 767: PUSH
 768: LD_VAR 0 6
 772: PLUS
 773: PUSH
 774: LD_INT 0
 776: PPUSH
 777: LD_INT 2
 779: PPUSH
 780: CALL_OW 12
 784: PUSH
 785: LD_INT 0
 787: PPUSH
 788: LD_INT 2
 790: PPUSH
 791: CALL_OW 12
 795: PUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 2
 801: PPUSH
 802: CALL_OW 12
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: ST_TO_ADDR
// hc_sex = sex_male ;
 813: LD_ADDR_OWVAR 27
 817: PUSH
 818: LD_INT 1
 820: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
 821: LD_ADDR_OWVAR 29
 825: PUSH
 826: LD_INT 8
 828: PPUSH
 829: LD_INT 10
 831: PPUSH
 832: CALL_OW 12
 836: PUSH
 837: LD_INT 9
 839: PPUSH
 840: LD_INT 11
 842: PPUSH
 843: CALL_OW 12
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// hc_name =  ;
 852: LD_ADDR_OWVAR 26
 856: PUSH
 857: LD_STRING 
 859: ST_TO_ADDR
// hc_gallery =  ;
 860: LD_ADDR_OWVAR 33
 864: PUSH
 865: LD_STRING 
 867: ST_TO_ADDR
// un := CreateHuman ;
 868: LD_ADDR_VAR 0 2
 872: PUSH
 873: CALL_OW 44
 877: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 878: LD_VAR 0 2
 882: PPUSH
 883: LD_INT 3
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: CALL_OW 49
// end ;
 893: GO 741
 895: POP
 896: POP
// for i = 1 to 4 + [ 0 , 1 , 2 ] [ Difficulty ] do
 897: LD_ADDR_VAR 0 5
 901: PUSH
 902: DOUBLE
 903: LD_INT 1
 905: DEC
 906: ST_TO_ADDR
 907: LD_INT 4
 909: PUSH
 910: LD_INT 0
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: LD_INT 2
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_OWVAR 67
 928: ARRAY
 929: PLUS
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1093
// begin uc_side = 6 ;
 934: LD_ADDR_OWVAR 20
 938: PUSH
 939: LD_INT 6
 941: ST_TO_ADDR
// hc_class = 1 ;
 942: LD_ADDR_OWVAR 28
 946: PUSH
 947: LD_INT 1
 949: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) + ( dif ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
 950: LD_ADDR_OWVAR 31
 954: PUSH
 955: LD_INT 0
 957: PPUSH
 958: LD_INT 1
 960: PPUSH
 961: CALL_OW 12
 965: PUSH
 966: LD_VAR 0 6
 970: PLUS
 971: PUSH
 972: LD_INT 0
 974: PPUSH
 975: LD_INT 2
 977: PPUSH
 978: CALL_OW 12
 982: PUSH
 983: LD_INT 0
 985: PPUSH
 986: LD_INT 2
 988: PPUSH
 989: CALL_OW 12
 993: PUSH
 994: LD_INT 0
 996: PPUSH
 997: LD_INT 2
 999: PPUSH
1000: CALL_OW 12
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: ST_TO_ADDR
// hc_sex = sex_male ;
1011: LD_ADDR_OWVAR 27
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
1019: LD_ADDR_OWVAR 29
1023: PUSH
1024: LD_INT 8
1026: PPUSH
1027: LD_INT 10
1029: PPUSH
1030: CALL_OW 12
1034: PUSH
1035: LD_INT 9
1037: PPUSH
1038: LD_INT 11
1040: PPUSH
1041: CALL_OW 12
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: ST_TO_ADDR
// hc_name =  ;
1050: LD_ADDR_OWVAR 26
1054: PUSH
1055: LD_STRING 
1057: ST_TO_ADDR
// hc_gallery =  ;
1058: LD_ADDR_OWVAR 33
1062: PUSH
1063: LD_STRING 
1065: ST_TO_ADDR
// un := CreateHuman ;
1066: LD_ADDR_VAR 0 2
1070: PUSH
1071: CALL_OW 44
1075: ST_TO_ADDR
// PlaceUnitArea ( un , ru_patrol , false ) ;
1076: LD_VAR 0 2
1080: PPUSH
1081: LD_INT 11
1083: PPUSH
1084: LD_INT 0
1086: PPUSH
1087: CALL_OW 49
// end ;
1091: GO 931
1093: POP
1094: POP
// rus_eng := FilterAllUnits ( [ [ f_side , ru ] , [ f_class , 2 ] ] ) ;
1095: LD_ADDR_EXP 8
1099: PUSH
1100: LD_INT 22
1102: PUSH
1103: LD_EXP 5
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: LD_INT 25
1114: PUSH
1115: LD_INT 2
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PPUSH
1126: CALL_OW 69
1130: ST_TO_ADDR
// rus_sci := FilterAllUnits ( [ [ f_side , ru ] , [ f_class , 4 ] ] ) ;
1131: LD_ADDR_EXP 10
1135: PUSH
1136: LD_INT 22
1138: PUSH
1139: LD_EXP 5
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 25
1150: PUSH
1151: LD_INT 4
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PPUSH
1162: CALL_OW 69
1166: ST_TO_ADDR
// rus_pat := FilterAllUnits ( [ f_side , 6 ] ) ;
1167: LD_ADDR_EXP 11
1171: PUSH
1172: LD_INT 22
1174: PUSH
1175: LD_INT 6
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PPUSH
1182: CALL_OW 69
1186: ST_TO_ADDR
// eng1 := rus_eng [ 1 ] ;
1187: LD_ADDR_EXP 13
1191: PUSH
1192: LD_EXP 8
1196: PUSH
1197: LD_INT 1
1199: ARRAY
1200: ST_TO_ADDR
// eng2 := rus_eng [ 2 ] ;
1201: LD_ADDR_EXP 14
1205: PUSH
1206: LD_EXP 8
1210: PUSH
1211: LD_INT 2
1213: ARRAY
1214: ST_TO_ADDR
// end ;
1215: LD_VAR 0 1
1219: RET
// every 0 0$01 trigger IsInArea ( Louis , ru_base ) do var un , i ;
1220: LD_EXP 29
1224: PPUSH
1225: LD_INT 29
1227: PPUSH
1228: CALL_OW 308
1232: IFFALSE 1448
1234: GO 1236
1236: DISABLE
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
// begin for i = 1 to 5 + [ 1 , 2 , 2 ] [ Difficulty ] do
1241: LD_ADDR_VAR 0 2
1245: PUSH
1246: DOUBLE
1247: LD_INT 1
1249: DEC
1250: ST_TO_ADDR
1251: LD_INT 5
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 2
1259: PUSH
1260: LD_INT 2
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_OWVAR 67
1272: ARRAY
1273: PLUS
1274: PUSH
1275: FOR_TO
1276: IFFALSE 1446
// begin hc_class = 1 ;
1278: LD_ADDR_OWVAR 28
1282: PUSH
1283: LD_INT 1
1285: ST_TO_ADDR
// hc_skills = [ Rand ( 2 , 5 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
1286: LD_ADDR_OWVAR 31
1290: PUSH
1291: LD_INT 2
1293: PPUSH
1294: LD_INT 5
1296: PPUSH
1297: CALL_OW 12
1301: PUSH
1302: LD_INT 0
1304: PPUSH
1305: LD_INT 2
1307: PPUSH
1308: CALL_OW 12
1312: PUSH
1313: LD_INT 0
1315: PPUSH
1316: LD_INT 2
1318: PPUSH
1319: CALL_OW 12
1323: PUSH
1324: LD_INT 0
1326: PPUSH
1327: LD_INT 2
1329: PPUSH
1330: CALL_OW 12
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1341: LD_ADDR_OWVAR 27
1345: PUSH
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 2
1351: PPUSH
1352: CALL_OW 12
1356: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
1357: LD_ADDR_OWVAR 29
1361: PUSH
1362: LD_INT 8
1364: PPUSH
1365: LD_INT 10
1367: PPUSH
1368: CALL_OW 12
1372: PUSH
1373: LD_INT 9
1375: PPUSH
1376: LD_INT 11
1378: PPUSH
1379: CALL_OW 12
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: ST_TO_ADDR
// hc_name =  ;
1388: LD_ADDR_OWVAR 26
1392: PUSH
1393: LD_STRING 
1395: ST_TO_ADDR
// hc_gallery =  ;
1396: LD_ADDR_OWVAR 33
1400: PUSH
1401: LD_STRING 
1403: ST_TO_ADDR
// un := CreateHuman ;
1404: LD_ADDR_VAR 0 1
1408: PUSH
1409: CALL_OW 44
1413: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
1414: LD_VAR 0 1
1418: PPUSH
1419: LD_INT 3
1421: PPUSH
1422: LD_INT 0
1424: PPUSH
1425: CALL_OW 49
// ComAgressiveMove ( un , 144 , 96 ) ;
1429: LD_VAR 0 1
1433: PPUSH
1434: LD_INT 144
1436: PPUSH
1437: LD_INT 96
1439: PPUSH
1440: CALL_OW 114
// end ;
1444: GO 1275
1446: POP
1447: POP
// end ;
1448: PPOPN 2
1450: END
// every 0 0$01 do var un , b , filter ;
1451: GO 1453
1453: DISABLE
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
// begin enable ;
1459: ENABLE
// filter := FilterAllUnits ( [ [ [ f_side , ru ] , [ f_type , unit_human ] , [ f_not , [ f_ok ] ] ] ] ) ;
1460: LD_ADDR_VAR 0 3
1464: PUSH
1465: LD_INT 22
1467: PUSH
1468: LD_EXP 5
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PUSH
1477: LD_INT 21
1479: PUSH
1480: LD_INT 1
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: PUSH
1487: LD_INT 3
1489: PUSH
1490: LD_INT 50
1492: PUSH
1493: EMPTY
1494: LIST
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: EMPTY
1506: LIST
1507: PPUSH
1508: CALL_OW 69
1512: ST_TO_ADDR
// if filter > 0 then
1513: LD_VAR 0 3
1517: PUSH
1518: LD_INT 0
1520: GREATER
1521: IFFALSE 1583
// for b in filter do
1523: LD_ADDR_VAR 0 2
1527: PUSH
1528: LD_VAR 0 3
1532: PUSH
1533: FOR_IN
1534: IFFALSE 1581
// begin ComRepairBuilding ( rus_eng , b ) ;
1536: LD_EXP 8
1540: PPUSH
1541: LD_VAR 0 2
1545: PPUSH
1546: CALL_OW 130
// ComAgressiveMove ( rus_sol , GetX ( b ) , GetY ( b ) ) ;
1550: LD_EXP 7
1554: PPUSH
1555: LD_VAR 0 2
1559: PPUSH
1560: CALL_OW 250
1564: PPUSH
1565: LD_VAR 0 2
1569: PPUSH
1570: CALL_OW 251
1574: PPUSH
1575: CALL_OW 114
// end ;
1579: GO 1533
1581: POP
1582: POP
// if filter = 0 then
1583: LD_VAR 0 3
1587: PUSH
1588: LD_INT 0
1590: EQUAL
1591: IFFALSE 1617
// ComMoveXY ( [ rus_sol , rus_eng ] , 94 , 92 ) ;
1593: LD_EXP 7
1597: PUSH
1598: LD_EXP 8
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PPUSH
1607: LD_INT 94
1609: PPUSH
1610: LD_INT 92
1612: PPUSH
1613: CALL_OW 111
// end ;
1617: PPOPN 3
1619: END
// every 0 0$02 do var un ;
1620: GO 1622
1622: DISABLE
1623: LD_INT 0
1625: PPUSH
// begin enable ;
1626: ENABLE
// if not See ( 2 , rus_pat [ 1 ] ) then
1627: LD_INT 2
1629: PPUSH
1630: LD_EXP 11
1634: PUSH
1635: LD_INT 1
1637: ARRAY
1638: PPUSH
1639: CALL_OW 292
1643: NOT
1644: IFFALSE 1680
// begin AddComMoveToArea ( rus_pat [ 1 ] , ru_p1 ) ;
1646: LD_EXP 11
1650: PUSH
1651: LD_INT 1
1653: ARRAY
1654: PPUSH
1655: LD_INT 12
1657: PPUSH
1658: CALL_OW 173
// AddComMoveToArea ( rus_pat [ 1 ] , ru_patrol ) ;
1662: LD_EXP 11
1666: PUSH
1667: LD_INT 1
1669: ARRAY
1670: PPUSH
1671: LD_INT 11
1673: PPUSH
1674: CALL_OW 173
// end else
1678: GO 1698
// begin ComAttackUnit ( rus_pat [ 1 ] , Louis ) ;
1680: LD_EXP 11
1684: PUSH
1685: LD_INT 1
1687: ARRAY
1688: PPUSH
1689: LD_EXP 29
1693: PPUSH
1694: CALL_OW 115
// end ; if not See ( 2 , rus_pat [ 2 ] ) then
1698: LD_INT 2
1700: PPUSH
1701: LD_EXP 11
1705: PUSH
1706: LD_INT 2
1708: ARRAY
1709: PPUSH
1710: CALL_OW 292
1714: NOT
1715: IFFALSE 1751
// begin AddComMoveToArea ( rus_pat [ 2 ] , ru_p2 ) ;
1717: LD_EXP 11
1721: PUSH
1722: LD_INT 2
1724: ARRAY
1725: PPUSH
1726: LD_INT 13
1728: PPUSH
1729: CALL_OW 173
// AddComMoveToArea ( rus_pat [ 2 ] , ru_patrol ) ;
1733: LD_EXP 11
1737: PUSH
1738: LD_INT 2
1740: ARRAY
1741: PPUSH
1742: LD_INT 11
1744: PPUSH
1745: CALL_OW 173
// end else
1749: GO 1769
// begin ComAttackUnit ( rus_pat [ 2 ] , Louis ) ;
1751: LD_EXP 11
1755: PUSH
1756: LD_INT 2
1758: ARRAY
1759: PPUSH
1760: LD_EXP 29
1764: PPUSH
1765: CALL_OW 115
// end ; if not See ( 2 , rus_pat [ 3 ] ) then
1769: LD_INT 2
1771: PPUSH
1772: LD_EXP 11
1776: PUSH
1777: LD_INT 3
1779: ARRAY
1780: PPUSH
1781: CALL_OW 292
1785: NOT
1786: IFFALSE 1822
// begin AddComMoveToArea ( rus_pat [ 3 ] , ru_p3 ) ;
1788: LD_EXP 11
1792: PUSH
1793: LD_INT 3
1795: ARRAY
1796: PPUSH
1797: LD_INT 14
1799: PPUSH
1800: CALL_OW 173
// AddComMoveToArea ( rus_pat [ 3 ] , ru_patrol ) ;
1804: LD_EXP 11
1808: PUSH
1809: LD_INT 3
1811: ARRAY
1812: PPUSH
1813: LD_INT 11
1815: PPUSH
1816: CALL_OW 173
// end else
1820: GO 1840
// begin ComAttackUnit ( rus_pat [ 3 ] , Louis ) ;
1822: LD_EXP 11
1826: PUSH
1827: LD_INT 3
1829: ARRAY
1830: PPUSH
1831: LD_EXP 29
1835: PPUSH
1836: CALL_OW 115
// end ; if not See ( 2 , rus_pat [ 4 ] ) then
1840: LD_INT 2
1842: PPUSH
1843: LD_EXP 11
1847: PUSH
1848: LD_INT 4
1850: ARRAY
1851: PPUSH
1852: CALL_OW 292
1856: NOT
1857: IFFALSE 1893
// begin AddComMoveToArea ( rus_pat [ 4 ] , ru_p4 ) ;
1859: LD_EXP 11
1863: PUSH
1864: LD_INT 4
1866: ARRAY
1867: PPUSH
1868: LD_INT 15
1870: PPUSH
1871: CALL_OW 173
// AddComMoveToArea ( rus_pat [ 4 ] , ru_patrol ) ;
1875: LD_EXP 11
1879: PUSH
1880: LD_INT 4
1882: ARRAY
1883: PPUSH
1884: LD_INT 11
1886: PPUSH
1887: CALL_OW 173
// end else
1891: GO 1911
// begin ComAttackUnit ( rus_pat [ 4 ] , Louis ) ;
1893: LD_EXP 11
1897: PUSH
1898: LD_INT 4
1900: ARRAY
1901: PPUSH
1902: LD_EXP 29
1906: PPUSH
1907: CALL_OW 115
// end ; if not See ( 2 , rus_pat [ 5 ] ) then
1911: LD_INT 2
1913: PPUSH
1914: LD_EXP 11
1918: PUSH
1919: LD_INT 5
1921: ARRAY
1922: PPUSH
1923: CALL_OW 292
1927: NOT
1928: IFFALSE 1964
// begin AddComMoveToArea ( rus_pat [ 5 ] , ru_p5 ) ;
1930: LD_EXP 11
1934: PUSH
1935: LD_INT 5
1937: ARRAY
1938: PPUSH
1939: LD_INT 16
1941: PPUSH
1942: CALL_OW 173
// AddComMoveToArea ( rus_pat [ 5 ] , ru_patrol ) ;
1946: LD_EXP 11
1950: PUSH
1951: LD_INT 5
1953: ARRAY
1954: PPUSH
1955: LD_INT 11
1957: PPUSH
1958: CALL_OW 173
// end else
1962: GO 1982
// begin ComAttackUnit ( rus_pat [ 5 ] , Louis ) ;
1964: LD_EXP 11
1968: PUSH
1969: LD_INT 5
1971: ARRAY
1972: PPUSH
1973: LD_EXP 29
1977: PPUSH
1978: CALL_OW 115
// end ; if not See ( 2 , rus_pat [ 6 ] ) then
1982: LD_INT 2
1984: PPUSH
1985: LD_EXP 11
1989: PUSH
1990: LD_INT 6
1992: ARRAY
1993: PPUSH
1994: CALL_OW 292
1998: NOT
1999: IFFALSE 2035
// begin AddComMoveToArea ( rus_pat [ 6 ] , ru_p6 ) ;
2001: LD_EXP 11
2005: PUSH
2006: LD_INT 6
2008: ARRAY
2009: PPUSH
2010: LD_INT 17
2012: PPUSH
2013: CALL_OW 173
// AddComMoveToArea ( rus_pat [ 6 ] , ru_patrol ) ;
2017: LD_EXP 11
2021: PUSH
2022: LD_INT 6
2024: ARRAY
2025: PPUSH
2026: LD_INT 11
2028: PPUSH
2029: CALL_OW 173
// end else
2033: GO 2053
// begin ComAttackUnit ( rus_pat [ 6 ] , Louis ) ;
2035: LD_EXP 11
2039: PUSH
2040: LD_INT 6
2042: ARRAY
2043: PPUSH
2044: LD_EXP 29
2048: PPUSH
2049: CALL_OW 115
// end ; end ;
2053: PPOPN 1
2055: END
// every 0 0$01 do var un ;
2056: GO 2058
2058: DISABLE
2059: LD_INT 0
2061: PPUSH
// begin enable ;
2062: ENABLE
// for un in rus_tank do
2063: LD_ADDR_VAR 0 1
2067: PUSH
2068: LD_EXP 12
2072: PUSH
2073: FOR_IN
2074: IFFALSE 2101
// begin if IsInArea ( un , tank1_area ) then
2076: LD_VAR 0 1
2080: PPUSH
2081: LD_INT 9
2083: PPUSH
2084: CALL_OW 308
2088: IFFALSE 2099
// RemoveUnit ( un ) ;
2090: LD_VAR 0 1
2094: PPUSH
2095: CALL_OW 64
// end ;
2099: GO 2073
2101: POP
2102: POP
// end ;
2103: PPOPN 1
2105: END
// every 0 0$01 do var i , un , veh , dif ;
2106: GO 2108
2108: DISABLE
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
// begin dif = [ 1 , 2 , 3 ] [ Difficulty ] ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: LD_INT 2
2125: PUSH
2126: LD_INT 3
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_OWVAR 67
2138: ARRAY
2139: ST_TO_ADDR
// uc_side = 3 ;
2140: LD_ADDR_OWVAR 20
2144: PUSH
2145: LD_INT 3
2147: ST_TO_ADDR
// uc_nation = 3 ;
2148: LD_ADDR_OWVAR 21
2152: PUSH
2153: LD_INT 3
2155: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
2156: LD_ADDR_OWVAR 37
2160: PUSH
2161: LD_INT 21
2163: ST_TO_ADDR
// vc_engine = engine_combustion ;
2164: LD_ADDR_OWVAR 39
2168: PUSH
2169: LD_INT 1
2171: ST_TO_ADDR
// vc_control = control_manual ;
2172: LD_ADDR_OWVAR 38
2176: PUSH
2177: LD_INT 1
2179: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
2180: LD_ADDR_OWVAR 40
2184: PUSH
2185: LD_INT 42
2187: ST_TO_ADDR
// veh = CreateVehicle ;
2188: LD_ADDR_VAR 0 3
2192: PUSH
2193: CALL_OW 45
2197: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2198: LD_VAR 0 3
2202: PPUSH
2203: LD_INT 4
2205: PPUSH
2206: CALL_OW 233
// PlaceUnitXY ( veh , 145 , 96 , false ) ;
2210: LD_VAR 0 3
2214: PPUSH
2215: LD_INT 145
2217: PPUSH
2218: LD_INT 96
2220: PPUSH
2221: LD_INT 0
2223: PPUSH
2224: CALL_OW 48
// rus_tank = rus_tank ^ veh ;
2228: LD_ADDR_EXP 12
2232: PUSH
2233: LD_EXP 12
2237: PUSH
2238: LD_VAR 0 3
2242: ADD
2243: ST_TO_ADDR
// hc_class = 3 ;
2244: LD_ADDR_OWVAR 28
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// hc_gallery =  ;
2252: LD_ADDR_OWVAR 33
2256: PUSH
2257: LD_STRING 
2259: ST_TO_ADDR
// hc_name =  ;
2260: LD_ADDR_OWVAR 26
2264: PUSH
2265: LD_STRING 
2267: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) + ( dif ) , Rand ( 0 , 2 ) ] ;
2268: LD_ADDR_OWVAR 31
2272: PUSH
2273: LD_INT 0
2275: PPUSH
2276: LD_INT 1
2278: PPUSH
2279: CALL_OW 12
2283: PUSH
2284: LD_INT 0
2286: PPUSH
2287: LD_INT 2
2289: PPUSH
2290: CALL_OW 12
2294: PUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_INT 2
2300: PPUSH
2301: CALL_OW 12
2305: PUSH
2306: LD_VAR 0 4
2310: PLUS
2311: PUSH
2312: LD_INT 0
2314: PPUSH
2315: LD_INT 2
2317: PPUSH
2318: CALL_OW 12
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// hc_sex = sex_male ;
2329: LD_ADDR_OWVAR 27
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// un = CreateHuman ;
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2347: LD_VAR 0 2
2351: PPUSH
2352: LD_VAR 0 3
2356: PPUSH
2357: CALL_OW 52
// rus_tank = rus_tank ^ un ;
2361: LD_ADDR_EXP 12
2365: PUSH
2366: LD_EXP 12
2370: PUSH
2371: LD_VAR 0 2
2375: ADD
2376: ST_TO_ADDR
// end ;
2377: PPOPN 4
2379: END
// every 1 1$00 trigger tank_go do var i , un , veh , dif ;
2380: LD_EXP 1
2384: IFFALSE 2701
2386: GO 2388
2388: DISABLE
2389: LD_INT 0
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
// begin enable ;
2395: ENABLE
// dif = [ 1 , 2 , 3 ] [ Difficulty ] ;
2396: LD_ADDR_VAR 0 4
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: LD_INT 2
2406: PUSH
2407: LD_INT 3
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_OWVAR 67
2419: ARRAY
2420: ST_TO_ADDR
// uc_side = 3 ;
2421: LD_ADDR_OWVAR 20
2425: PUSH
2426: LD_INT 3
2428: ST_TO_ADDR
// uc_nation = 3 ;
2429: LD_ADDR_OWVAR 21
2433: PUSH
2434: LD_INT 3
2436: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
2437: LD_ADDR_OWVAR 37
2441: PUSH
2442: LD_INT 21
2444: ST_TO_ADDR
// vc_engine = engine_combustion ;
2445: LD_ADDR_OWVAR 39
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// vc_control = control_manual ;
2453: LD_ADDR_OWVAR 38
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 42
2468: ST_TO_ADDR
// veh = CreateVehicle ;
2469: LD_ADDR_VAR 0 3
2473: PUSH
2474: CALL_OW 45
2478: ST_TO_ADDR
// PlaceUnitXY ( veh , 145 , 96 , false ) ;
2479: LD_VAR 0 3
2483: PPUSH
2484: LD_INT 145
2486: PPUSH
2487: LD_INT 96
2489: PPUSH
2490: LD_INT 0
2492: PPUSH
2493: CALL_OW 48
// SetDir ( veh , 4 ) ;
2497: LD_VAR 0 3
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: CALL_OW 233
// rus_tank = rus_tank ^ veh ;
2509: LD_ADDR_EXP 12
2513: PUSH
2514: LD_EXP 12
2518: PUSH
2519: LD_VAR 0 3
2523: ADD
2524: ST_TO_ADDR
// hc_class = 1 ;
2525: LD_ADDR_OWVAR 28
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// hc_gallery =  ;
2533: LD_ADDR_OWVAR 33
2537: PUSH
2538: LD_STRING 
2540: ST_TO_ADDR
// hc_name =  ;
2541: LD_ADDR_OWVAR 26
2545: PUSH
2546: LD_STRING 
2548: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) + ( dif ) , Rand ( 0 , 2 ) ] ;
2549: LD_ADDR_OWVAR 31
2553: PUSH
2554: LD_INT 0
2556: PPUSH
2557: LD_INT 1
2559: PPUSH
2560: CALL_OW 12
2564: PUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 12
2575: PUSH
2576: LD_INT 0
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 12
2586: PUSH
2587: LD_VAR 0 4
2591: PLUS
2592: PUSH
2593: LD_INT 0
2595: PPUSH
2596: LD_INT 2
2598: PPUSH
2599: CALL_OW 12
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: ST_TO_ADDR
// hc_sex = sex_male ;
2610: LD_ADDR_OWVAR 27
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// un = CreateHuman ;
2618: LD_ADDR_VAR 0 2
2622: PUSH
2623: CALL_OW 44
2627: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2628: LD_VAR 0 2
2632: PPUSH
2633: LD_VAR 0 3
2637: PPUSH
2638: CALL_OW 52
// rus_tank = rus_tank ^ un ;
2642: LD_ADDR_EXP 12
2646: PUSH
2647: LD_EXP 12
2651: PUSH
2652: LD_VAR 0 2
2656: ADD
2657: ST_TO_ADDR
// for i = 1 to rus_tank do
2658: LD_ADDR_VAR 0 1
2662: PUSH
2663: DOUBLE
2664: LD_INT 1
2666: DEC
2667: ST_TO_ADDR
2668: LD_EXP 12
2672: PUSH
2673: FOR_TO
2674: IFFALSE 2699
// begin ComMoveXY ( rus_tank [ i ] , 33 , 1 ) ;
2676: LD_EXP 12
2680: PUSH
2681: LD_VAR 0 1
2685: ARRAY
2686: PPUSH
2687: LD_INT 33
2689: PPUSH
2690: LD_INT 1
2692: PPUSH
2693: CALL_OW 111
// end ;
2697: GO 2673
2699: POP
2700: POP
// end ;
2701: PPOPN 4
2703: END
// export Attackers ; export function SpawnAttack ; var un , veh , i , am , dif ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
// dif = [ 2 , 3 , 5 ] [ Difficulty ] ;
2712: LD_ADDR_VAR 0 6
2716: PUSH
2717: LD_INT 2
2719: PUSH
2720: LD_INT 3
2722: PUSH
2723: LD_INT 5
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_OWVAR 67
2735: ARRAY
2736: ST_TO_ADDR
// attackers := [ ] ;
2737: LD_ADDR_EXP 15
2741: PUSH
2742: EMPTY
2743: ST_TO_ADDR
// uc_side = 3 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 3
2751: ST_TO_ADDR
// uc_nation = 3 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 3
2759: ST_TO_ADDR
// for i = 1 to 10 do
2760: LD_ADDR_VAR 0 4
2764: PUSH
2765: DOUBLE
2766: LD_INT 1
2768: DEC
2769: ST_TO_ADDR
2770: LD_INT 10
2772: PUSH
2773: FOR_TO
2774: IFFALSE 2996
// begin vc_chassis = ru_medium_wheeled ;
2776: LD_ADDR_OWVAR 37
2780: PUSH
2781: LD_INT 21
2783: ST_TO_ADDR
// vc_engine = engine_combustion ;
2784: LD_ADDR_OWVAR 39
2788: PUSH
2789: LD_INT 1
2791: ST_TO_ADDR
// vc_control = control_manual ;
2792: LD_ADDR_OWVAR 38
2796: PUSH
2797: LD_INT 1
2799: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
2800: LD_ADDR_OWVAR 40
2804: PUSH
2805: LD_INT 42
2807: ST_TO_ADDR
// veh = CreateVehicle ;
2808: LD_ADDR_VAR 0 3
2812: PUSH
2813: CALL_OW 45
2817: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
2818: LD_VAR 0 3
2822: PPUSH
2823: LD_INT 0
2825: PPUSH
2826: CALL_OW 233
// PlaceUnitArea ( veh , ru_attack , false ) ;
2830: LD_VAR 0 3
2834: PPUSH
2835: LD_INT 27
2837: PPUSH
2838: LD_INT 0
2840: PPUSH
2841: CALL_OW 49
// attackers = attackers ^ veh ;
2845: LD_ADDR_EXP 15
2849: PUSH
2850: LD_EXP 15
2854: PUSH
2855: LD_VAR 0 3
2859: ADD
2860: ST_TO_ADDR
// hc_class = 1 ;
2861: LD_ADDR_OWVAR 28
2865: PUSH
2866: LD_INT 1
2868: ST_TO_ADDR
// hc_gallery =  ;
2869: LD_ADDR_OWVAR 33
2873: PUSH
2874: LD_STRING 
2876: ST_TO_ADDR
// hc_name =  ;
2877: LD_ADDR_OWVAR 26
2881: PUSH
2882: LD_STRING 
2884: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , Rand ( 0 , 2 ) + ( dif ) , Rand ( 0 , 2 ) ] ;
2885: LD_ADDR_OWVAR 31
2889: PUSH
2890: LD_INT 0
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: CALL_OW 12
2900: PUSH
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: CALL_OW 12
2911: PUSH
2912: LD_INT 0
2914: PPUSH
2915: LD_INT 2
2917: PPUSH
2918: CALL_OW 12
2922: PUSH
2923: LD_VAR 0 6
2927: PLUS
2928: PUSH
2929: LD_INT 0
2931: PPUSH
2932: LD_INT 2
2934: PPUSH
2935: CALL_OW 12
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: ST_TO_ADDR
// hc_sex = sex_male ;
2946: LD_ADDR_OWVAR 27
2950: PUSH
2951: LD_INT 1
2953: ST_TO_ADDR
// un = CreateHuman ;
2954: LD_ADDR_VAR 0 2
2958: PUSH
2959: CALL_OW 44
2963: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_VAR 0 3
2973: PPUSH
2974: CALL_OW 52
// attackers = attackers ^ veh ;
2978: LD_ADDR_EXP 15
2982: PUSH
2983: LD_EXP 15
2987: PUSH
2988: LD_VAR 0 3
2992: ADD
2993: ST_TO_ADDR
// end ;
2994: GO 2773
2996: POP
2997: POP
// Wait ( 0 0$01 ) ;
2998: LD_INT 35
3000: PPUSH
3001: CALL_OW 67
// ComMoveXY ( attackers , 65 , 67 ) ;
3005: LD_EXP 15
3009: PPUSH
3010: LD_INT 65
3012: PPUSH
3013: LD_INT 67
3015: PPUSH
3016: CALL_OW 111
// Wait ( 0 0$10 ) ;
3020: LD_INT 350
3022: PPUSH
3023: CALL_OW 67
// repeat begin for un in attackers do
3027: LD_ADDR_VAR 0 2
3031: PUSH
3032: LD_EXP 15
3036: PUSH
3037: FOR_IN
3038: IFFALSE 3093
// begin am := FilterAllUnits ( [ f_side , 1 ] ) ;
3040: LD_ADDR_VAR 0 5
3044: PUSH
3045: LD_INT 22
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 69
3059: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( am , un ) ) ;
3060: LD_VAR 0 2
3064: PPUSH
3065: LD_VAR 0 5
3069: PPUSH
3070: LD_VAR 0 2
3074: PPUSH
3075: CALL_OW 74
3079: PPUSH
3080: CALL_OW 115
// Wait ( 0 0$01 ) ;
3084: LD_INT 35
3086: PPUSH
3087: CALL_OW 67
// end ;
3091: GO 3037
3093: POP
3094: POP
// end until FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
3095: LD_INT 22
3097: PUSH
3098: LD_INT 1
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: PPUSH
3105: CALL_OW 69
3109: PUSH
3110: LD_INT 0
3112: EQUAL
3113: IFFALSE 3027
// end ;
3115: LD_VAR 0 1
3119: RET
// every 0 0$01 trigger IsInArea ( Louis , zone ) do var i , un , dif ;
3120: LD_EXP 29
3124: PPUSH
3125: LD_INT 25
3127: PPUSH
3128: CALL_OW 308
3132: IFFALSE 3375
3134: GO 3136
3136: DISABLE
3137: LD_INT 0
3139: PPUSH
3140: PPUSH
3141: PPUSH
// begin uc_side = ru ;
3142: LD_ADDR_OWVAR 20
3146: PUSH
3147: LD_EXP 5
3151: ST_TO_ADDR
// uc_nation = 3 ;
3152: LD_ADDR_OWVAR 21
3156: PUSH
3157: LD_INT 3
3159: ST_TO_ADDR
// dif = [ 0 , 1 , 2 ] [ Difficulty ] ;
3160: LD_ADDR_VAR 0 3
3164: PUSH
3165: LD_INT 0
3167: PUSH
3168: LD_INT 1
3170: PUSH
3171: LD_INT 2
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_OWVAR 67
3183: ARRAY
3184: ST_TO_ADDR
// for i = 1 to 2 + [ 0 , 1 , 2 ] [ Difficulty ] do
3185: LD_ADDR_VAR 0 1
3189: PUSH
3190: DOUBLE
3191: LD_INT 1
3193: DEC
3194: ST_TO_ADDR
3195: LD_INT 2
3197: PUSH
3198: LD_INT 0
3200: PUSH
3201: LD_INT 1
3203: PUSH
3204: LD_INT 2
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: PUSH
3212: LD_OWVAR 67
3216: ARRAY
3217: PLUS
3218: PUSH
3219: FOR_TO
3220: IFFALSE 3373
// begin hc_class = 1 ;
3222: LD_ADDR_OWVAR 28
3226: PUSH
3227: LD_INT 1
3229: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) + ( dif ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
3230: LD_ADDR_OWVAR 31
3234: PUSH
3235: LD_INT 0
3237: PPUSH
3238: LD_INT 1
3240: PPUSH
3241: CALL_OW 12
3245: PUSH
3246: LD_VAR 0 3
3250: PLUS
3251: PUSH
3252: LD_INT 0
3254: PPUSH
3255: LD_INT 2
3257: PPUSH
3258: CALL_OW 12
3262: PUSH
3263: LD_INT 0
3265: PPUSH
3266: LD_INT 2
3268: PPUSH
3269: CALL_OW 12
3273: PUSH
3274: LD_INT 0
3276: PPUSH
3277: LD_INT 2
3279: PPUSH
3280: CALL_OW 12
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: ST_TO_ADDR
// hc_sex = sex_male ;
3291: LD_ADDR_OWVAR 27
3295: PUSH
3296: LD_INT 1
3298: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
3299: LD_ADDR_OWVAR 29
3303: PUSH
3304: LD_INT 8
3306: PPUSH
3307: LD_INT 10
3309: PPUSH
3310: CALL_OW 12
3314: PUSH
3315: LD_INT 9
3317: PPUSH
3318: LD_INT 11
3320: PPUSH
3321: CALL_OW 12
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: ST_TO_ADDR
// hc_name =  ;
3330: LD_ADDR_OWVAR 26
3334: PUSH
3335: LD_STRING 
3337: ST_TO_ADDR
// hc_gallery =  ;
3338: LD_ADDR_OWVAR 33
3342: PUSH
3343: LD_STRING 
3345: ST_TO_ADDR
// un := CreateHuman ;
3346: LD_ADDR_VAR 0 2
3350: PUSH
3351: CALL_OW 44
3355: ST_TO_ADDR
// PlaceUnitArea ( un , escape , false ) ;
3356: LD_VAR 0 2
3360: PPUSH
3361: LD_INT 26
3363: PPUSH
3364: LD_INT 0
3366: PPUSH
3367: CALL_OW 49
// end ;
3371: GO 3219
3373: POP
3374: POP
// end ; end_of_file
3375: PPOPN 3
3377: END
// export am ; export amr_bun , amr_arm ; export am_sold , am_eng ; export function PrepareAmerican ; var un , i , dif ; begin
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
3383: PPUSH
// am := 1 ;
3384: LD_ADDR_EXP 16
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// amr_bun := FilterAllUnits ( [ [ f_side , am ] , [ f_btype , b_breastwork ] ] ) ;
3392: LD_ADDR_EXP 17
3396: PUSH
3397: LD_INT 22
3399: PUSH
3400: LD_EXP 16
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: LD_INT 30
3411: PUSH
3412: LD_INT 31
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PPUSH
3423: CALL_OW 69
3427: ST_TO_ADDR
// dif = [ 1 , 2 , 3 ] [ Difficulty ] ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: LD_INT 1
3435: PUSH
3436: LD_INT 2
3438: PUSH
3439: LD_INT 3
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: PUSH
3447: LD_OWVAR 67
3451: ARRAY
3452: ST_TO_ADDR
// uc_side := am ;
3453: LD_ADDR_OWVAR 20
3457: PUSH
3458: LD_EXP 16
3462: ST_TO_ADDR
// uc_nation := am ;
3463: LD_ADDR_OWVAR 21
3467: PUSH
3468: LD_EXP 16
3472: ST_TO_ADDR
// for i = 1 to 2 do
3473: LD_ADDR_VAR 0 3
3477: PUSH
3478: DOUBLE
3479: LD_INT 1
3481: DEC
3482: ST_TO_ADDR
3483: LD_INT 2
3485: PUSH
3486: FOR_TO
3487: IFFALSE 3672
// begin hc_class = 1 ;
3489: LD_ADDR_OWVAR 28
3493: PUSH
3494: LD_INT 1
3496: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) + ( dif ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
3497: LD_ADDR_OWVAR 31
3501: PUSH
3502: LD_INT 0
3504: PPUSH
3505: LD_INT 1
3507: PPUSH
3508: CALL_OW 12
3512: PUSH
3513: LD_VAR 0 4
3517: PLUS
3518: PUSH
3519: LD_INT 0
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: CALL_OW 12
3529: PUSH
3530: LD_INT 0
3532: PPUSH
3533: LD_INT 2
3535: PPUSH
3536: CALL_OW 12
3540: PUSH
3541: LD_INT 0
3543: PPUSH
3544: LD_INT 2
3546: PPUSH
3547: CALL_OW 12
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
3558: LD_ADDR_OWVAR 27
3562: PUSH
3563: LD_INT 1
3565: PPUSH
3566: LD_INT 2
3568: PPUSH
3569: CALL_OW 12
3573: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
3574: LD_ADDR_OWVAR 29
3578: PUSH
3579: LD_INT 8
3581: PPUSH
3582: LD_INT 10
3584: PPUSH
3585: CALL_OW 12
3589: PUSH
3590: LD_INT 9
3592: PPUSH
3593: LD_INT 11
3595: PPUSH
3596: CALL_OW 12
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: ST_TO_ADDR
// hc_name =  ;
3605: LD_ADDR_OWVAR 26
3609: PUSH
3610: LD_STRING 
3612: ST_TO_ADDR
// hc_gallery =  ;
3613: LD_ADDR_OWVAR 33
3617: PUSH
3618: LD_STRING 
3620: ST_TO_ADDR
// un := CreateHuman ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceUnitArea ( un , am_bun , false ) ;
3631: LD_VAR 0 2
3635: PPUSH
3636: LD_INT 5
3638: PPUSH
3639: LD_INT 0
3641: PPUSH
3642: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( amr_bun , un ) ) ;
3646: LD_VAR 0 2
3650: PPUSH
3651: LD_EXP 17
3655: PPUSH
3656: LD_VAR 0 2
3660: PPUSH
3661: CALL_OW 74
3665: PPUSH
3666: CALL_OW 120
// end ;
3670: GO 3486
3672: POP
3673: POP
// for i = 1 to 2 do
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: DOUBLE
3680: LD_INT 1
3682: DEC
3683: ST_TO_ADDR
3684: LD_INT 2
3686: PUSH
3687: FOR_TO
3688: IFFALSE 3849
// begin hc_class = 2 ;
3690: LD_ADDR_OWVAR 28
3694: PUSH
3695: LD_INT 2
3697: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) , Rand ( 0 , 2 ) + ( dif ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
3698: LD_ADDR_OWVAR 31
3702: PUSH
3703: LD_INT 0
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: CALL_OW 12
3713: PUSH
3714: LD_INT 0
3716: PPUSH
3717: LD_INT 2
3719: PPUSH
3720: CALL_OW 12
3724: PUSH
3725: LD_VAR 0 4
3729: PLUS
3730: PUSH
3731: LD_INT 0
3733: PPUSH
3734: LD_INT 2
3736: PPUSH
3737: CALL_OW 12
3741: PUSH
3742: LD_INT 0
3744: PPUSH
3745: LD_INT 2
3747: PPUSH
3748: CALL_OW 12
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
3759: LD_ADDR_OWVAR 27
3763: PUSH
3764: LD_INT 1
3766: PPUSH
3767: LD_INT 2
3769: PPUSH
3770: CALL_OW 12
3774: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
3775: LD_ADDR_OWVAR 29
3779: PUSH
3780: LD_INT 8
3782: PPUSH
3783: LD_INT 10
3785: PPUSH
3786: CALL_OW 12
3790: PUSH
3791: LD_INT 9
3793: PPUSH
3794: LD_INT 11
3796: PPUSH
3797: CALL_OW 12
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: ST_TO_ADDR
// hc_name =  ;
3806: LD_ADDR_OWVAR 26
3810: PUSH
3811: LD_STRING 
3813: ST_TO_ADDR
// hc_gallery =  ;
3814: LD_ADDR_OWVAR 33
3818: PUSH
3819: LD_STRING 
3821: ST_TO_ADDR
// un := CreateHuman ;
3822: LD_ADDR_VAR 0 2
3826: PUSH
3827: CALL_OW 44
3831: ST_TO_ADDR
// PlaceUnitArea ( un , am_spawn , false ) ;
3832: LD_VAR 0 2
3836: PPUSH
3837: LD_INT 4
3839: PPUSH
3840: LD_INT 0
3842: PPUSH
3843: CALL_OW 49
// end ;
3847: GO 3687
3849: POP
3850: POP
// for i = 1 to 3 do
3851: LD_ADDR_VAR 0 3
3855: PUSH
3856: DOUBLE
3857: LD_INT 1
3859: DEC
3860: ST_TO_ADDR
3861: LD_INT 3
3863: PUSH
3864: FOR_TO
3865: IFFALSE 4030
// begin hc_class = 1 ;
3867: LD_ADDR_OWVAR 28
3871: PUSH
3872: LD_INT 1
3874: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 1 ) + ( dif ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) , Rand ( 0 , 2 ) ] ;
3875: LD_ADDR_OWVAR 31
3879: PUSH
3880: LD_INT 0
3882: PPUSH
3883: LD_INT 1
3885: PPUSH
3886: CALL_OW 12
3890: PUSH
3891: LD_VAR 0 4
3895: PLUS
3896: PUSH
3897: LD_INT 0
3899: PPUSH
3900: LD_INT 2
3902: PPUSH
3903: CALL_OW 12
3907: PUSH
3908: LD_INT 0
3910: PPUSH
3911: LD_INT 2
3913: PPUSH
3914: CALL_OW 12
3918: PUSH
3919: LD_INT 0
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: CALL_OW 12
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: ST_TO_ADDR
// hc_sex = sex_male ;
3936: LD_ADDR_OWVAR 27
3940: PUSH
3941: LD_INT 1
3943: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 10 ) , Rand ( 9 , 11 ) ] ;
3944: LD_ADDR_OWVAR 29
3948: PUSH
3949: LD_INT 8
3951: PPUSH
3952: LD_INT 10
3954: PPUSH
3955: CALL_OW 12
3959: PUSH
3960: LD_INT 9
3962: PPUSH
3963: LD_INT 11
3965: PPUSH
3966: CALL_OW 12
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: ST_TO_ADDR
// hc_name =  ;
3975: LD_ADDR_OWVAR 26
3979: PUSH
3980: LD_STRING 
3982: ST_TO_ADDR
// hc_gallery =  ;
3983: LD_ADDR_OWVAR 33
3987: PUSH
3988: LD_STRING 
3990: ST_TO_ADDR
// un := CreateHuman ;
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: CALL_OW 44
4000: ST_TO_ADDR
// PlaceUnitArea ( un , am_spawn , false ) ;
4001: LD_VAR 0 2
4005: PPUSH
4006: LD_INT 4
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 49
// ComEnterUnit ( un , am_arm ) ;
4016: LD_VAR 0 2
4020: PPUSH
4021: LD_INT 16
4023: PPUSH
4024: CALL_OW 120
// end ;
4028: GO 3864
4030: POP
4031: POP
// am_sold := FilterAllUnits ( [ [ f_side , am ] , [ f_class , 1 ] ] ) ;
4032: LD_ADDR_EXP 19
4036: PUSH
4037: LD_INT 22
4039: PUSH
4040: LD_EXP 16
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 25
4051: PUSH
4052: LD_INT 1
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PPUSH
4063: CALL_OW 69
4067: ST_TO_ADDR
// am_eng := FilterAllUnits ( [ [ f_side , am ] , [ f_class , 2 ] ] ) ;
4068: LD_ADDR_EXP 20
4072: PUSH
4073: LD_INT 22
4075: PUSH
4076: LD_EXP 16
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PUSH
4085: LD_INT 25
4087: PUSH
4088: LD_INT 2
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: ST_TO_ADDR
// end ; end_of_file
4104: LD_VAR 0 1
4108: RET
// export ar ; export Dwein , Olaf , Gunther , Karla , Joachim , Abdul , MMark ; export function PrepareArabian ; begin
4109: LD_INT 0
4111: PPUSH
// ar := 5 ;
4112: LD_ADDR_EXP 21
4116: PUSH
4117: LD_INT 5
4119: ST_TO_ADDR
// uc_side = ar ;
4120: LD_ADDR_OWVAR 20
4124: PUSH
4125: LD_EXP 21
4129: ST_TO_ADDR
// Dwein = NewCharacter ( Dwein ) ;
4130: LD_ADDR_EXP 22
4134: PUSH
4135: LD_STRING Dwein
4137: PPUSH
4138: CALL_OW 25
4142: ST_TO_ADDR
// Karla = NewCharacter ( Karla ) ;
4143: LD_ADDR_EXP 25
4147: PUSH
4148: LD_STRING Karla
4150: PPUSH
4151: CALL_OW 25
4155: ST_TO_ADDR
// Olaf = NewCharacter ( Olaf ) ;
4156: LD_ADDR_EXP 23
4160: PUSH
4161: LD_STRING Olaf
4163: PPUSH
4164: CALL_OW 25
4168: ST_TO_ADDR
// Joachim = NewCharacter ( Joachim ) ;
4169: LD_ADDR_EXP 26
4173: PUSH
4174: LD_STRING Joachim
4176: PPUSH
4177: CALL_OW 25
4181: ST_TO_ADDR
// Mmark = NewCharacter ( Mmark ) ;
4182: LD_ADDR_EXP 28
4186: PUSH
4187: LD_STRING Mmark
4189: PPUSH
4190: CALL_OW 25
4194: ST_TO_ADDR
// uc_nation = 2 ;
4195: LD_ADDR_OWVAR 21
4199: PUSH
4200: LD_INT 2
4202: ST_TO_ADDR
// hc_class := 1 ;
4203: LD_ADDR_OWVAR 28
4207: PUSH
4208: LD_INT 1
4210: ST_TO_ADDR
// hc_name := Gunther Wolf ;
4211: LD_ADDR_OWVAR 26
4215: PUSH
4216: LD_STRING Gunther Wolf
4218: ST_TO_ADDR
// hc_gallery := sandar ;
4219: LD_ADDR_OWVAR 33
4223: PUSH
4224: LD_STRING sandar
4226: ST_TO_ADDR
// hc_face_number := 16 ;
4227: LD_ADDR_OWVAR 34
4231: PUSH
4232: LD_INT 16
4234: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
4235: LD_ADDR_OWVAR 30
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: LD_INT 2
4245: PUSH
4246: LD_INT 0
4248: PUSH
4249: LD_INT 0
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 0 , 1 ] ;
4258: LD_ADDR_OWVAR 31
4262: PUSH
4263: LD_INT 1
4265: PUSH
4266: LD_INT 2
4268: PUSH
4269: LD_INT 0
4271: PUSH
4272: LD_INT 1
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4281: LD_ADDR_OWVAR 29
4285: PUSH
4286: LD_INT 11
4288: PUSH
4289: LD_INT 11
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: ST_TO_ADDR
// hc_sex := sex_male ;
4296: LD_ADDR_OWVAR 27
4300: PUSH
4301: LD_INT 1
4303: ST_TO_ADDR
// Gunther := CreateHuman ;
4304: LD_ADDR_EXP 24
4308: PUSH
4309: CALL_OW 44
4313: ST_TO_ADDR
// hc_class = 11 ;
4314: LD_ADDR_OWVAR 28
4318: PUSH
4319: LD_INT 11
4321: ST_TO_ADDR
// hc_name = Abdul Ali Liser ;
4322: LD_ADDR_OWVAR 26
4326: PUSH
4327: LD_STRING Abdul Ali Liser
4329: ST_TO_ADDR
// hc_gallery = E3galery ;
4330: LD_ADDR_OWVAR 33
4334: PUSH
4335: LD_STRING E3galery
4337: ST_TO_ADDR
// hc_face_number = 4 ;
4338: LD_ADDR_OWVAR 34
4342: PUSH
4343: LD_INT 4
4345: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 4 , 3 ] ;
4346: LD_ADDR_OWVAR 31
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: LD_INT 2
4356: PUSH
4357: LD_INT 4
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: ST_TO_ADDR
// hc_sex = sex_male ;
4369: LD_ADDR_OWVAR 27
4373: PUSH
4374: LD_INT 1
4376: ST_TO_ADDR
// hc_attr = [ 12 , 12 ] ;
4377: LD_ADDR_OWVAR 29
4381: PUSH
4382: LD_INT 12
4384: PUSH
4385: LD_INT 12
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: ST_TO_ADDR
// Abdul = CreateHuman ;
4392: LD_ADDR_EXP 27
4396: PUSH
4397: CALL_OW 44
4401: ST_TO_ADDR
// end ;
4402: LD_VAR 0 1
4406: RET
// export function SpawnArabian ; begin
4407: LD_INT 0
4409: PPUSH
// PlaceUnitArea ( Karla , ar_resp , false ) ;
4410: LD_EXP 25
4414: PPUSH
4415: LD_INT 18
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 49
// PlaceUnitArea ( Abdul , ar_resp , false ) ;
4425: LD_EXP 27
4429: PPUSH
4430: LD_INT 18
4432: PPUSH
4433: LD_INT 0
4435: PPUSH
4436: CALL_OW 49
// PlaceUnitArea ( Joachim , ar_resp , false ) ;
4440: LD_EXP 26
4444: PPUSH
4445: LD_INT 18
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 49
// PlaceUnitArea ( Dwein , ar_resp , false ) ;
4455: LD_EXP 22
4459: PPUSH
4460: LD_INT 18
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 49
// PlaceUnitArea ( Gunther , ar_resp , false ) ;
4470: LD_EXP 24
4474: PPUSH
4475: LD_INT 18
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 49
// PlaceUnitArea ( Olaf , ar_resp , false ) ;
4485: LD_EXP 23
4489: PPUSH
4490: LD_INT 18
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 49
// ComMoveXY ( Abdul , 19 , 24 ) ;
4500: LD_EXP 27
4504: PPUSH
4505: LD_INT 19
4507: PPUSH
4508: LD_INT 24
4510: PPUSH
4511: CALL_OW 111
// AddComTurnXY ( Abdul , 16 , 19 ) ;
4515: LD_EXP 27
4519: PPUSH
4520: LD_INT 16
4522: PPUSH
4523: LD_INT 19
4525: PPUSH
4526: CALL_OW 178
// ComHold ( [ Karla , Joachim , Dwein , Gunther , Olaf ] ) ;
4530: LD_EXP 25
4534: PUSH
4535: LD_EXP 26
4539: PUSH
4540: LD_EXP 22
4544: PUSH
4545: LD_EXP 24
4549: PUSH
4550: LD_EXP 23
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: PPUSH
4562: CALL_OW 140
// end ; end_of_file
4566: LD_VAR 0 1
4570: RET
// export Louis ; export function PrepareHero ; begin
4571: LD_INT 0
4573: PPUSH
// CenterNowOnXY ( 141 , 116 ) ;
4574: LD_INT 141
4576: PPUSH
4577: LD_INT 116
4579: PPUSH
4580: CALL_OW 86
// uc_side = 2 ;
4584: LD_ADDR_OWVAR 20
4588: PUSH
4589: LD_INT 2
4591: ST_TO_ADDR
// uc_nation = 2 ;
4592: LD_ADDR_OWVAR 21
4596: PUSH
4597: LD_INT 2
4599: ST_TO_ADDR
// Louis := CreateCharacter ( Louis ) ;
4600: LD_ADDR_EXP 29
4604: PUSH
4605: LD_STRING Louis
4607: PPUSH
4608: CALL_OW 34
4612: ST_TO_ADDR
// PlaceUnitArea ( Louis , start_area , true ) ;
4613: LD_EXP 29
4617: PPUSH
4618: LD_INT 6
4620: PPUSH
4621: LD_INT 1
4623: PPUSH
4624: CALL_OW 49
// CenterNowOnUnits ( Louis ) ;
4628: LD_EXP 29
4632: PPUSH
4633: CALL_OW 87
// end ; end_of_file
4637: LD_VAR 0 1
4641: RET
// export ape ; export function PrepareNature ; var i , animal ; begin
4642: LD_INT 0
4644: PPUSH
4645: PPUSH
4646: PPUSH
// uc_side = 0 ;
4647: LD_ADDR_OWVAR 20
4651: PUSH
4652: LD_INT 0
4654: ST_TO_ADDR
// uc_nation = 0 ;
4655: LD_ADDR_OWVAR 21
4659: PUSH
4660: LD_INT 0
4662: ST_TO_ADDR
// for i = 1 to 4 do
4663: LD_ADDR_VAR 0 2
4667: PUSH
4668: DOUBLE
4669: LD_INT 1
4671: DEC
4672: ST_TO_ADDR
4673: LD_INT 4
4675: PUSH
4676: FOR_TO
4677: IFFALSE 4730
// begin hc_class = 18 ;
4679: LD_ADDR_OWVAR 28
4683: PUSH
4684: LD_INT 18
4686: ST_TO_ADDR
// hc_gallery = sandnature ;
4687: LD_ADDR_OWVAR 33
4691: PUSH
4692: LD_STRING sandnature
4694: ST_TO_ADDR
// hc_face_number = 1 ;
4695: LD_ADDR_OWVAR 34
4699: PUSH
4700: LD_INT 1
4702: ST_TO_ADDR
// animal := CreateHuman ;
4703: LD_ADDR_VAR 0 3
4707: PUSH
4708: CALL_OW 44
4712: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_INT 7
4720: PPUSH
4721: LD_INT 0
4723: PPUSH
4724: CALL_OW 49
// end ;
4728: GO 4676
4730: POP
4731: POP
// for i = 1 to 2 do
4732: LD_ADDR_VAR 0 2
4736: PUSH
4737: DOUBLE
4738: LD_INT 1
4740: DEC
4741: ST_TO_ADDR
4742: LD_INT 2
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4799
// begin hc_class = 13 ;
4748: LD_ADDR_OWVAR 28
4752: PUSH
4753: LD_INT 13
4755: ST_TO_ADDR
// hc_gallery = sandnature ;
4756: LD_ADDR_OWVAR 33
4760: PUSH
4761: LD_STRING sandnature
4763: ST_TO_ADDR
// hc_face_number = 4 ;
4764: LD_ADDR_OWVAR 34
4768: PUSH
4769: LD_INT 4
4771: ST_TO_ADDR
// animal := CreateHuman ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: CALL_OW 44
4781: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
4782: LD_VAR 0 3
4786: PPUSH
4787: LD_INT 7
4789: PPUSH
4790: LD_INT 0
4792: PPUSH
4793: CALL_OW 49
// end ;
4797: GO 4745
4799: POP
4800: POP
// for i = 1 to 3 do
4801: LD_ADDR_VAR 0 2
4805: PUSH
4806: DOUBLE
4807: LD_INT 1
4809: DEC
4810: ST_TO_ADDR
4811: LD_INT 3
4813: PUSH
4814: FOR_TO
4815: IFFALSE 4868
// begin hc_class = 20 ;
4817: LD_ADDR_OWVAR 28
4821: PUSH
4822: LD_INT 20
4824: ST_TO_ADDR
// hc_gallery = sandnature ;
4825: LD_ADDR_OWVAR 33
4829: PUSH
4830: LD_STRING sandnature
4832: ST_TO_ADDR
// hc_face_number = 2 ;
4833: LD_ADDR_OWVAR 34
4837: PUSH
4838: LD_INT 2
4840: ST_TO_ADDR
// animal := CreateHuman ;
4841: LD_ADDR_VAR 0 3
4845: PUSH
4846: CALL_OW 44
4850: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
4851: LD_VAR 0 3
4855: PPUSH
4856: LD_INT 8
4858: PPUSH
4859: LD_INT 0
4861: PPUSH
4862: CALL_OW 49
// end ;
4866: GO 4814
4868: POP
4869: POP
// hc_class = class_apeman ;
4870: LD_ADDR_OWVAR 28
4874: PUSH
4875: LD_INT 12
4877: ST_TO_ADDR
// hc_agressivity := 0 ;
4878: LD_ADDR_OWVAR 35
4882: PUSH
4883: LD_INT 0
4885: ST_TO_ADDR
// hc_gallery =  ;
4886: LD_ADDR_OWVAR 33
4890: PUSH
4891: LD_STRING 
4893: ST_TO_ADDR
// ape = CreateHuman ;
4894: LD_ADDR_EXP 30
4898: PUSH
4899: CALL_OW 44
4903: ST_TO_ADDR
// end ; end_of_file
4904: LD_VAR 0 1
4908: RET
// export function Action ; begin
4909: LD_INT 0
4911: PPUSH
// InGameOn ;
4912: CALL_OW 8
// CenterNowOnUnits ( Louis ) ;
4916: LD_EXP 29
4920: PPUSH
4921: CALL_OW 87
// Wait ( 0 0$2.8 ) ;
4925: LD_INT 98
4927: PPUSH
4928: CALL_OW 67
// Say ( Louis , DLd-1 ) ;
4932: LD_EXP 29
4936: PPUSH
4937: LD_STRING DLd-1
4939: PPUSH
4940: CALL_OW 88
// ComMoveXY ( Louis , 144 , 116 ) ;
4944: LD_EXP 29
4948: PPUSH
4949: LD_INT 144
4951: PPUSH
4952: LD_INT 116
4954: PPUSH
4955: CALL_OW 111
// AddComHold ( Louis ) ;
4959: LD_EXP 29
4963: PPUSH
4964: CALL_OW 200
// AddComWait ( Louis , 0 0$0.3 ) ;
4968: LD_EXP 29
4972: PPUSH
4973: LD_INT 10
4975: PPUSH
4976: CALL_OW 202
// Wait ( 0 0$02 ) ;
4980: LD_INT 70
4982: PPUSH
4983: CALL_OW 67
// Say ( Louis , DLd-2 ) ;
4987: LD_EXP 29
4991: PPUSH
4992: LD_STRING DLd-2
4994: PPUSH
4995: CALL_OW 88
// ComMoveXY ( eng1 , 116 , 96 ) ;
4999: LD_EXP 13
5003: PPUSH
5004: LD_INT 116
5006: PPUSH
5007: LD_INT 96
5009: PPUSH
5010: CALL_OW 111
// AddComTurnXY ( eng1 , 119 , 100 ) ;
5014: LD_EXP 13
5018: PPUSH
5019: LD_INT 119
5021: PPUSH
5022: LD_INT 100
5024: PPUSH
5025: CALL_OW 178
// ComMoveXY ( eng2 , 116 , 98 ) ;
5029: LD_EXP 14
5033: PPUSH
5034: LD_INT 116
5036: PPUSH
5037: LD_INT 98
5039: PPUSH
5040: CALL_OW 111
// AddComTurnXY ( eng2 , 119 , 99 ) ;
5044: LD_EXP 14
5048: PPUSH
5049: LD_INT 119
5051: PPUSH
5052: LD_INT 99
5054: PPUSH
5055: CALL_OW 178
// AddComMoveXY ( Louis , 138 , 113 ) ;
5059: LD_EXP 29
5063: PPUSH
5064: LD_INT 138
5066: PPUSH
5067: LD_INT 113
5069: PPUSH
5070: CALL_OW 171
// AddComWait ( Louis , 0 0$0.3 ) ;
5074: LD_EXP 29
5078: PPUSH
5079: LD_INT 10
5081: PPUSH
5082: CALL_OW 202
// Say ( Louis , DLd-3 ) ;
5086: LD_EXP 29
5090: PPUSH
5091: LD_STRING DLd-3
5093: PPUSH
5094: CALL_OW 88
// ComMoveXY ( Louis , 126 , 105 ) ;
5098: LD_EXP 29
5102: PPUSH
5103: LD_INT 126
5105: PPUSH
5106: LD_INT 105
5108: PPUSH
5109: CALL_OW 111
// AddComCrawl ( Louis ) ;
5113: LD_EXP 29
5117: PPUSH
5118: CALL_OW 197
// Wait ( 0 0$03 ) ;
5122: LD_INT 105
5124: PPUSH
5125: CALL_OW 67
// PlaceSeeing ( 117 , 98 , 2 , 6 ) ;
5129: LD_INT 117
5131: PPUSH
5132: LD_INT 98
5134: PPUSH
5135: LD_INT 2
5137: PPUSH
5138: LD_INT 6
5140: PPUSH
5141: CALL_OW 330
// CenterOnXY ( 126 , 105 ) ;
5145: LD_INT 126
5147: PPUSH
5148: LD_INT 105
5150: PPUSH
5151: CALL_OW 84
// Wait ( 0 0$0.5 ) ;
5155: LD_INT 18
5157: PPUSH
5158: CALL_OW 67
// Say ( eng1 , Ded-1 ) ;
5162: LD_EXP 13
5166: PPUSH
5167: LD_STRING Ded-1
5169: PPUSH
5170: CALL_OW 88
// Say ( eng2 , Ded-2 ) ;
5174: LD_EXP 14
5178: PPUSH
5179: LD_STRING Ded-2
5181: PPUSH
5182: CALL_OW 88
// Say ( eng1 , Ded-3 ) ;
5186: LD_EXP 13
5190: PPUSH
5191: LD_STRING Ded-3
5193: PPUSH
5194: CALL_OW 88
// PlaceUnitXY ( ape , 126 , 93 , false ) ;
5198: LD_EXP 30
5202: PPUSH
5203: LD_INT 126
5205: PPUSH
5206: LD_INT 93
5208: PPUSH
5209: LD_INT 0
5211: PPUSH
5212: CALL_OW 48
// ComMoveXY ( ape , GetX ( Louis ) , GetY ( Louis ) ) ;
5216: LD_EXP 30
5220: PPUSH
5221: LD_EXP 29
5225: PPUSH
5226: CALL_OW 250
5230: PPUSH
5231: LD_EXP 29
5235: PPUSH
5236: CALL_OW 251
5240: PPUSH
5241: CALL_OW 111
// Say ( eng2 , Ded-4 ) ;
5245: LD_EXP 14
5249: PPUSH
5250: LD_STRING Ded-4
5252: PPUSH
5253: CALL_OW 88
// Wait ( 0 0$0.5 ) ;
5257: LD_INT 18
5259: PPUSH
5260: CALL_OW 67
// Say ( eng1 , Ded-4a ) ;
5264: LD_EXP 13
5268: PPUSH
5269: LD_STRING Ded-4a
5271: PPUSH
5272: CALL_OW 88
// repeat ComMoveXY ( ape , GetX ( Louis ) , GetY ( Louis ) ) ;
5276: LD_EXP 30
5280: PPUSH
5281: LD_EXP 29
5285: PPUSH
5286: CALL_OW 250
5290: PPUSH
5291: LD_EXP 29
5295: PPUSH
5296: CALL_OW 251
5300: PPUSH
5301: CALL_OW 111
// Wait ( 1 ) ;
5305: LD_INT 1
5307: PPUSH
5308: CALL_OW 67
// until GetDistUnits ( Louis , ape ) < 3 ;
5312: LD_EXP 29
5316: PPUSH
5317: LD_EXP 30
5321: PPUSH
5322: CALL_OW 296
5326: PUSH
5327: LD_INT 3
5329: LESS
5330: IFFALSE 5276
// Say ( Louis , Dld-4 ) ;
5332: LD_EXP 29
5336: PPUSH
5337: LD_STRING Dld-4
5339: PPUSH
5340: CALL_OW 88
// Wait ( 0 0$01 ) ;
5344: LD_INT 35
5346: PPUSH
5347: CALL_OW 67
// Say ( Louis , Dld-5 ) ;
5351: LD_EXP 29
5355: PPUSH
5356: LD_STRING Dld-5
5358: PPUSH
5359: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5363: LD_INT 10
5365: PPUSH
5366: CALL_OW 67
// Say ( eng2 , Ded-5 ) ;
5370: LD_EXP 14
5374: PPUSH
5375: LD_STRING Ded-5
5377: PPUSH
5378: CALL_OW 88
// Say ( eng1 , Ded-6 ) ;
5382: LD_EXP 13
5386: PPUSH
5387: LD_STRING Ded-6
5389: PPUSH
5390: CALL_OW 88
// ComMoveXY ( [ eng1 , eng2 ] , 94 , 91 ) ;
5394: LD_EXP 13
5398: PUSH
5399: LD_EXP 14
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PPUSH
5408: LD_INT 94
5410: PPUSH
5411: LD_INT 91
5413: PPUSH
5414: CALL_OW 111
// Wait ( 0 0$1.3 ) ;
5418: LD_INT 46
5420: PPUSH
5421: CALL_OW 67
// Say ( Louis , Dld-6 ) ;
5425: LD_EXP 29
5429: PPUSH
5430: LD_STRING Dld-6
5432: PPUSH
5433: CALL_OW 88
// InGameOff ;
5437: CALL_OW 9
// ChangeMissionObjectives ( Run ) ;
5441: LD_STRING Run
5443: PPUSH
5444: CALL_OW 337
// SaveForQuickRestart ;
5448: CALL_OW 22
// ComWalk ( Louis ) ;
5452: LD_EXP 29
5456: PPUSH
5457: CALL_OW 138
// ComMoveXY ( ape , 141 , 118 ) ;
5461: LD_EXP 30
5465: PPUSH
5466: LD_INT 141
5468: PPUSH
5469: LD_INT 118
5471: PPUSH
5472: CALL_OW 111
// Wait ( 0 0$10 ) ;
5476: LD_INT 350
5478: PPUSH
5479: CALL_OW 67
// rus_sol := FilterAllUnits ( [ [ f_side , ru ] , [ f_class , 1 ] , [ f_outside ] ] ) ;
5483: LD_ADDR_EXP 7
5487: PUSH
5488: LD_INT 22
5490: PUSH
5491: LD_EXP 5
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: PUSH
5500: LD_INT 25
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 56
5512: PUSH
5513: EMPTY
5514: LIST
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: LIST
5520: PPUSH
5521: CALL_OW 69
5525: ST_TO_ADDR
// ComMoveXY ( rus_sol , 115 , 96 ) ;
5526: LD_EXP 7
5530: PPUSH
5531: LD_INT 115
5533: PPUSH
5534: LD_INT 96
5536: PPUSH
5537: CALL_OW 111
// AddComAttackUnit ( rus_sol , ape ) ;
5541: LD_EXP 7
5545: PPUSH
5546: LD_EXP 30
5550: PPUSH
5551: CALL_OW 175
// AddComMoveXY ( rus_sol , 138 , 144 ) ;
5555: LD_EXP 7
5559: PPUSH
5560: LD_INT 138
5562: PPUSH
5563: LD_INT 144
5565: PPUSH
5566: CALL_OW 171
// Wait ( 0 0$05 ) ;
5570: LD_INT 175
5572: PPUSH
5573: CALL_OW 67
// RemoveSeeing ( 117 , 98 , 2 ) ;
5577: LD_INT 117
5579: PPUSH
5580: LD_INT 98
5582: PPUSH
5583: LD_INT 2
5585: PPUSH
5586: CALL_OW 331
// repeat Wait ( 1 ) ;
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 67
// until GetLives ( ape ) < 251 ;
5597: LD_EXP 30
5601: PPUSH
5602: CALL_OW 256
5606: PUSH
5607: LD_INT 251
5609: LESS
5610: IFFALSE 5590
// if GetDistUnitXY ( rus_sol [ 1 ] , 133 , 100 ) < 10 then
5612: LD_EXP 7
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PPUSH
5621: LD_INT 133
5623: PPUSH
5624: LD_INT 100
5626: PPUSH
5627: CALL_OW 297
5631: PUSH
5632: LD_INT 10
5634: LESS
5635: IFFALSE 5653
// Say ( rus_sol [ 1 ] , DS-ape ) ;
5637: LD_EXP 7
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: LD_STRING DS-ape
5648: PPUSH
5649: CALL_OW 88
// Wait ( 0 0$30 ) ;
5653: LD_INT 1050
5655: PPUSH
5656: CALL_OW 67
// ComMoveXY ( rus_sol , 139 , 94 ) ;
5660: LD_EXP 7
5664: PPUSH
5665: LD_INT 139
5667: PPUSH
5668: LD_INT 94
5670: PPUSH
5671: CALL_OW 111
// Wait ( 0 0$45 ) ;
5675: LD_INT 1575
5677: PPUSH
5678: CALL_OW 67
// ComMoveXY ( rus_sol , 95 , 100 ) ;
5682: LD_EXP 7
5686: PPUSH
5687: LD_INT 95
5689: PPUSH
5690: LD_INT 100
5692: PPUSH
5693: CALL_OW 111
// end ;
5697: LD_VAR 0 1
5701: RET
// every 0 0$01 trigger See ( 2 , rus_tank [ 1 ] ) do
5702: LD_INT 2
5704: PPUSH
5705: LD_EXP 12
5709: PUSH
5710: LD_INT 1
5712: ARRAY
5713: PPUSH
5714: CALL_OW 292
5718: IFFALSE 5797
5720: GO 5722
5722: DISABLE
// begin DialogueOn ;
5723: CALL_OW 6
// CenterNowOnUnits ( rus_tank [ 1 ] ) ;
5727: LD_EXP 12
5731: PUSH
5732: LD_INT 1
5734: ARRAY
5735: PPUSH
5736: CALL_OW 87
// Say ( Louis , Dld-7 ) ;
5740: LD_EXP 29
5744: PPUSH
5745: LD_STRING Dld-7
5747: PPUSH
5748: CALL_OW 88
// DWait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 68
// DialogueOff ;
5759: CALL_OW 7
// Wait ( 0 0$01 ) ;
5763: LD_INT 35
5765: PPUSH
5766: CALL_OW 67
// ComMoveXY ( rus_tank [ 1 ] , 33 , 1 ) ;
5770: LD_EXP 12
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: LD_INT 33
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: CALL_OW 111
// tank_go := true ;
5789: LD_ADDR_EXP 1
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// end ;
5797: END
// export p ; every 0 0$01 trigger IsInArea ( Louis , radio_area ) do
5798: LD_EXP 29
5802: PPUSH
5803: LD_INT 10
5805: PPUSH
5806: CALL_OW 308
5810: IFFALSE 5998
5812: GO 5814
5814: DISABLE
// begin p = 0 ;
5815: LD_ADDR_EXP 31
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// InGameOn ;
5823: CALL_OW 8
// Say ( Louis , Dld-1r ) ;
5827: LD_EXP 29
5831: PPUSH
5832: LD_STRING Dld-1r
5834: PPUSH
5835: CALL_OW 88
// ComHold ( Louis ) ;
5839: LD_EXP 29
5843: PPUSH
5844: CALL_OW 140
// Say ( Louis , Dld-2r ) ;
5848: LD_EXP 29
5852: PPUSH
5853: LD_STRING Dld-2r
5855: PPUSH
5856: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
5860: LD_INT 10
5862: PPUSH
5863: CALL_OW 67
// SayRadio ( Abdul , Dad-1r ) ;
5867: LD_EXP 27
5871: PPUSH
5872: LD_STRING Dad-1r
5874: PPUSH
5875: CALL_OW 94
// Say ( Louis , Dld-3r ) ;
5879: LD_EXP 29
5883: PPUSH
5884: LD_STRING Dld-3r
5886: PPUSH
5887: CALL_OW 88
// SayRadio ( Abdul , Dad-2r ) ;
5891: LD_EXP 27
5895: PPUSH
5896: LD_STRING Dad-2r
5898: PPUSH
5899: CALL_OW 94
// InGameOff ;
5903: CALL_OW 9
// ChangeMissionObjectives ( Wait ) ;
5907: LD_STRING Wait
5909: PPUSH
5910: CALL_OW 337
// Connect = true ;
5914: LD_ADDR_EXP 2
5918: PUSH
5919: LD_INT 1
5921: ST_TO_ADDR
// repeat begin Wait ( 0 0$01 ) ;
5922: LD_INT 35
5924: PPUSH
5925: CALL_OW 67
// if IsInArea ( Louis , radio_area ) then
5929: LD_EXP 29
5933: PPUSH
5934: LD_INT 10
5936: PPUSH
5937: CALL_OW 308
5941: IFFALSE 5957
// p = p + 1 ;
5943: LD_ADDR_EXP 31
5947: PUSH
5948: LD_EXP 31
5952: PUSH
5953: LD_INT 1
5955: PLUS
5956: ST_TO_ADDR
// end until p = 34 ;
5957: LD_EXP 31
5961: PUSH
5962: LD_INT 34
5964: EQUAL
5965: IFFALSE 5922
// InGameOn ;
5967: CALL_OW 8
// SayRadio ( Abdul , Dad-3r ) ;
5971: LD_EXP 27
5975: PPUSH
5976: LD_STRING Dad-3r
5978: PPUSH
5979: CALL_OW 94
// InGameOff ;
5983: CALL_OW 9
// ChangeMissionObjectives ( Go ) ;
5987: LD_STRING Go
5989: PPUSH
5990: CALL_OW 337
// SpawnArabian ;
5994: CALL 4407 0 0
// end ;
5998: END
// every 0 0$01 trigger p = 11 do
5999: LD_EXP 31
6003: PUSH
6004: LD_INT 11
6006: EQUAL
6007: IFFALSE 6028
6009: GO 6011
6011: DISABLE
// begin SayRadio ( am_sold [ 1 ] , Dam-help ) ;
6012: LD_EXP 19
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: LD_STRING Dam-help
6023: PPUSH
6024: CALL_OW 94
// end ;
6028: END
// every 0 0$01 trigger IsInArea ( Louis , esp1 ) do
6029: LD_EXP 29
6033: PPUSH
6034: LD_INT 19
6036: PPUSH
6037: CALL_OW 308
6041: IFFALSE 6058
6043: GO 6045
6045: DISABLE
// begin Say ( Louis , Dl-esp1 ) ;
6046: LD_EXP 29
6050: PPUSH
6051: LD_STRING Dl-esp1
6053: PPUSH
6054: CALL_OW 88
// end ;
6058: END
// every 0 0$01 trigger IsInArea ( Louis , esp2 ) do
6059: LD_EXP 29
6063: PPUSH
6064: LD_INT 20
6066: PPUSH
6067: CALL_OW 308
6071: IFFALSE 6088
6073: GO 6075
6075: DISABLE
// begin Say ( Louis , Dl-esp2 ) ;
6076: LD_EXP 29
6080: PPUSH
6081: LD_STRING Dl-esp2
6083: PPUSH
6084: CALL_OW 88
// end ;
6088: END
// every 0 0$01 trigger See ( 6 , Louis ) do
6089: LD_INT 6
6091: PPUSH
6092: LD_EXP 29
6096: PPUSH
6097: CALL_OW 292
6101: IFFALSE 6135
6103: GO 6105
6105: DISABLE
// begin DialogueOn ;
6106: CALL_OW 6
// CenterNowOnUnits ( Louis ) ;
6110: LD_EXP 29
6114: PPUSH
6115: CALL_OW 87
// Say ( Louis , Dl-pat ) ;
6119: LD_EXP 29
6123: PPUSH
6124: LD_STRING Dl-pat
6126: PPUSH
6127: CALL_OW 88
// DialogueOff ;
6131: CALL_OW 7
// end ;
6135: END
// every 0 0$02 trigger GetDistUnits ( Louis , Abdul ) < 6 do
6136: LD_EXP 29
6140: PPUSH
6141: LD_EXP 27
6145: PPUSH
6146: CALL_OW 296
6150: PUSH
6151: LD_INT 6
6153: LESS
6154: IFFALSE 6712
6156: GO 6158
6158: DISABLE
// begin InGameOn ;
6159: CALL_OW 8
// SetSide ( FilterAllUnits ( [ f_side , 5 ] ) , 2 ) ;
6163: LD_INT 22
6165: PUSH
6166: LD_INT 5
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PPUSH
6173: CALL_OW 69
6177: PPUSH
6178: LD_INT 2
6180: PPUSH
6181: CALL_OW 235
// ComTurnUnit ( Louis , Abdul ) ;
6185: LD_EXP 29
6189: PPUSH
6190: LD_EXP 27
6194: PPUSH
6195: CALL_OW 119
// ComTurnUnit ( Abdul , Louis ) ;
6199: LD_EXP 27
6203: PPUSH
6204: LD_EXP 29
6208: PPUSH
6209: CALL_OW 119
// Wait ( 0 0$0.2 ) ;
6213: LD_INT 7
6215: PPUSH
6216: CALL_OW 67
// Say ( Abdul , Dla-1 ) ;
6220: LD_EXP 27
6224: PPUSH
6225: LD_STRING Dla-1
6227: PPUSH
6228: CALL_OW 88
// Say ( Louis , Dlal-1 ) ;
6232: LD_EXP 29
6236: PPUSH
6237: LD_STRING Dlal-1
6239: PPUSH
6240: CALL_OW 88
// Say ( Abdul , Dla-2 ) ;
6244: LD_EXP 27
6248: PPUSH
6249: LD_STRING Dla-2
6251: PPUSH
6252: CALL_OW 88
// Say ( Louis , Dlal-2 ) ;
6256: LD_EXP 29
6260: PPUSH
6261: LD_STRING Dlal-2
6263: PPUSH
6264: CALL_OW 88
// Say ( Abdul , Dla-3 ) ;
6268: LD_EXP 27
6272: PPUSH
6273: LD_STRING Dla-3
6275: PPUSH
6276: CALL_OW 88
// Say ( Louis , Dlal-3 ) ;
6280: LD_EXP 29
6284: PPUSH
6285: LD_STRING Dlal-3
6287: PPUSH
6288: CALL_OW 88
// Say ( Abdul , Dla-4 ) ;
6292: LD_EXP 27
6296: PPUSH
6297: LD_STRING Dla-4
6299: PPUSH
6300: CALL_OW 88
// Say ( Louis , Dlal-4 ) ;
6304: LD_EXP 29
6308: PPUSH
6309: LD_STRING Dlal-4
6311: PPUSH
6312: CALL_OW 88
// Say ( Louis , Dlal-5 ) ;
6316: LD_EXP 29
6320: PPUSH
6321: LD_STRING Dlal-5
6323: PPUSH
6324: CALL_OW 88
// Say ( Abdul , Dla-5 ) ;
6328: LD_EXP 27
6332: PPUSH
6333: LD_STRING Dla-5
6335: PPUSH
6336: CALL_OW 88
// Say ( Louis , Dlal-6 ) ;
6340: LD_EXP 29
6344: PPUSH
6345: LD_STRING Dlal-6
6347: PPUSH
6348: CALL_OW 88
// Say ( Abdul , Dla-6 ) ;
6352: LD_EXP 27
6356: PPUSH
6357: LD_STRING Dla-6
6359: PPUSH
6360: CALL_OW 88
// Say ( Abdul , Dla-7 ) ;
6364: LD_EXP 27
6368: PPUSH
6369: LD_STRING Dla-7
6371: PPUSH
6372: CALL_OW 88
// Say ( Abdul , Dla-8 ) ;
6376: LD_EXP 27
6380: PPUSH
6381: LD_STRING Dla-8
6383: PPUSH
6384: CALL_OW 88
// InGameOff ;
6388: CALL_OW 9
// ChangeMissionObjectives ( Quit ) ;
6392: LD_STRING Quit
6394: PPUSH
6395: CALL_OW 337
// SetAreaMapShow ( escape , 1 ) ;
6399: LD_INT 26
6401: PPUSH
6402: LD_INT 1
6404: PPUSH
6405: CALL_OW 424
// Wait ( Rand ( 0 0$06 , 0 0$09 ) ) ;
6409: LD_INT 210
6411: PPUSH
6412: LD_INT 315
6414: PPUSH
6415: CALL_OW 12
6419: PPUSH
6420: CALL_OW 67
// InGameOn ;
6424: CALL_OW 8
// ComHold ( FilterAllUnits ( [ f_side , 2 ] ) ) ;
6428: LD_INT 22
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PPUSH
6438: CALL_OW 69
6442: PPUSH
6443: CALL_OW 140
// if Difficulty = 1 then
6447: LD_OWVAR 67
6451: PUSH
6452: LD_INT 1
6454: EQUAL
6455: IFFALSE 6500
// begin PlaceUnitArea ( Mmark , mark1 , true ) ;
6457: LD_EXP 28
6461: PPUSH
6462: LD_INT 22
6464: PPUSH
6465: LD_INT 1
6467: PPUSH
6468: CALL_OW 49
// ComHold ( Mmark ) ;
6472: LD_EXP 28
6476: PPUSH
6477: CALL_OW 140
// Wait ( 0 0$0.3 ) ;
6481: LD_INT 10
6483: PPUSH
6484: CALL_OW 67
// SayRadio ( Mmark , MarkSpawn1 ) ;
6488: LD_EXP 28
6492: PPUSH
6493: LD_STRING MarkSpawn1
6495: PPUSH
6496: CALL_OW 94
// end ; if Difficulty = 2 then
6500: LD_OWVAR 67
6504: PUSH
6505: LD_INT 2
6507: EQUAL
6508: IFFALSE 6553
// begin PlaceUnitArea ( Mmark , mark2 , true ) ;
6510: LD_EXP 28
6514: PPUSH
6515: LD_INT 23
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: CALL_OW 49
// ComHold ( Mmark ) ;
6525: LD_EXP 28
6529: PPUSH
6530: CALL_OW 140
// Wait ( 0 0$0.3 ) ;
6534: LD_INT 10
6536: PPUSH
6537: CALL_OW 67
// SayRadio ( Mmark , MarkSpawn2 ) ;
6541: LD_EXP 28
6545: PPUSH
6546: LD_STRING MarkSpawn2
6548: PPUSH
6549: CALL_OW 94
// end ; if Difficulty = 3 then
6553: LD_OWVAR 67
6557: PUSH
6558: LD_INT 3
6560: EQUAL
6561: IFFALSE 6606
// begin PlaceUnitArea ( Mmark , mark3 , true ) ;
6563: LD_EXP 28
6567: PPUSH
6568: LD_INT 24
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: CALL_OW 49
// ComHold ( Mmark ) ;
6578: LD_EXP 28
6582: PPUSH
6583: CALL_OW 140
// Wait ( 0 0$0.3 ) ;
6587: LD_INT 10
6589: PPUSH
6590: CALL_OW 67
// SayRadio ( Mmark , MarkSpawn3 ) ;
6594: LD_EXP 28
6598: PPUSH
6599: LD_STRING MarkSpawn3
6601: PPUSH
6602: CALL_OW 94
// end ; Say ( Louis , MarkSpawnLouis1 ) ;
6606: LD_EXP 29
6610: PPUSH
6611: LD_STRING MarkSpawnLouis1
6613: PPUSH
6614: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
6618: LD_INT 10
6620: PPUSH
6621: CALL_OW 67
// ComTurnUnit ( Louis , Abdul ) ;
6625: LD_EXP 29
6629: PPUSH
6630: LD_EXP 27
6634: PPUSH
6635: CALL_OW 119
// ComTurnUnit ( Abdul , Louis ) ;
6639: LD_EXP 27
6643: PPUSH
6644: LD_EXP 29
6648: PPUSH
6649: CALL_OW 119
// Say ( Louis , MarkSpawnLouis2 ) ;
6653: LD_EXP 29
6657: PPUSH
6658: LD_STRING MarkSpawnLouis2
6660: PPUSH
6661: CALL_OW 88
// Say ( Abdul , MarkSpawnAbdul1 ) ;
6665: LD_EXP 27
6669: PPUSH
6670: LD_STRING MarkSpawnAbdul1
6672: PPUSH
6673: CALL_OW 88
// Say ( Olaf , MarkSpawnOlaf1 ) ;
6677: LD_EXP 23
6681: PPUSH
6682: LD_STRING MarkSpawnOlaf1
6684: PPUSH
6685: CALL_OW 88
// Say ( Karla , MarkSpawnKarla1 ) ;
6689: LD_EXP 25
6693: PPUSH
6694: LD_STRING MarkSpawnKarla1
6696: PPUSH
6697: CALL_OW 88
// InGameOff ;
6701: CALL_OW 9
// ChangeMissionObjectives ( Find ) ;
6705: LD_STRING Find
6707: PPUSH
6708: CALL_OW 337
// end ;
6712: END
// every 0 0$01 trigger See ( 2 , Mmark ) or GetDistUnits ( Louis , Mmark ) < 6 do
6713: LD_INT 2
6715: PPUSH
6716: LD_EXP 28
6720: PPUSH
6721: CALL_OW 292
6725: PUSH
6726: LD_EXP 29
6730: PPUSH
6731: LD_EXP 28
6735: PPUSH
6736: CALL_OW 296
6740: PUSH
6741: LD_INT 6
6743: LESS
6744: OR
6745: IFFALSE 6781
6747: GO 6749
6749: DISABLE
// begin SetSide ( Mmark , 2 ) ;
6750: LD_EXP 28
6754: PPUSH
6755: LD_INT 2
6757: PPUSH
6758: CALL_OW 235
// Say ( Mmark , Dmt-1 ) ;
6762: LD_EXP 28
6766: PPUSH
6767: LD_STRING Dmt-1
6769: PPUSH
6770: CALL_OW 88
// ChangeMissionObjectives ( OutFind ) ;
6774: LD_STRING OutFind
6776: PPUSH
6777: CALL_OW 337
// end ;
6781: END
// every 0 0$01 trigger IsInArea ( Louis , zone ) and FilterAllUnits ( [ f_side , 2 ] ) > 1 do
6782: LD_EXP 29
6786: PPUSH
6787: LD_INT 25
6789: PPUSH
6790: CALL_OW 308
6794: PUSH
6795: LD_INT 22
6797: PUSH
6798: LD_INT 2
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PPUSH
6805: CALL_OW 69
6809: PUSH
6810: LD_INT 1
6812: GREATER
6813: AND
6814: IFFALSE 6873
6816: GO 6818
6818: DISABLE
// begin SayRadio ( rus_sol [ 3 ] , ruat ) ;
6819: LD_EXP 7
6823: PUSH
6824: LD_INT 3
6826: ARRAY
6827: PPUSH
6828: LD_STRING ruat
6830: PPUSH
6831: CALL_OW 94
// Say ( Abdul , ruat1 ) ;
6835: LD_EXP 27
6839: PPUSH
6840: LD_STRING ruat1
6842: PPUSH
6843: CALL_OW 88
// SpawnAttack ;
6847: CALL 2704 0 0
// us_attacked := true ;
6851: LD_ADDR_EXP 4
6855: PUSH
6856: LD_INT 1
6858: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
6859: LD_INT 35
6861: PPUSH
6862: CALL_OW 67
// SayEffect ( DHura ) ;
6866: LD_STRING DHura
6868: PPUSH
6869: CALL_OW 96
// end ;
6873: END
// export function dialogs ( un , num ) ; begin
6874: LD_INT 0
6876: PPUSH
// case num of 1 :
6877: LD_VAR 0 2
6881: PUSH
6882: LD_INT 1
6884: DOUBLE
6885: EQUAL
6886: IFTRUE 6890
6888: GO 6893
6890: POP
// ; 2 :
6891: GO 6986
6893: LD_INT 2
6895: DOUBLE
6896: EQUAL
6897: IFTRUE 6901
6899: GO 6916
6901: POP
// ForceSay ( un , D-Ru-Di1 ) ; 3 :
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_STRING D-Ru-Di1
6909: PPUSH
6910: CALL_OW 91
6914: GO 6986
6916: LD_INT 3
6918: DOUBLE
6919: EQUAL
6920: IFTRUE 6924
6922: GO 6939
6924: POP
// ForceSay ( un , D-Ru-Di2 ) ; 4 :
6925: LD_VAR 0 1
6929: PPUSH
6930: LD_STRING D-Ru-Di2
6932: PPUSH
6933: CALL_OW 91
6937: GO 6986
6939: LD_INT 4
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6962
6947: POP
// ForceSay ( un , D-Ru-Di3 ) ; 5 :
6948: LD_VAR 0 1
6952: PPUSH
6953: LD_STRING D-Ru-Di3
6955: PPUSH
6956: CALL_OW 91
6960: GO 6986
6962: LD_INT 5
6964: DOUBLE
6965: EQUAL
6966: IFTRUE 6970
6968: GO 6985
6970: POP
// ForceSay ( un , D-Ru-Di4 ) ; end ;
6971: LD_VAR 0 1
6975: PPUSH
6976: LD_STRING D-Ru-Di4
6978: PPUSH
6979: CALL_OW 91
6983: GO 6986
6985: POP
// end ;
6986: LD_VAR 0 3
6990: RET
// every 0 0$01 trigger See ( 1 , Louis ) and not us_attacked do
6991: LD_INT 1
6993: PPUSH
6994: LD_EXP 29
6998: PPUSH
6999: CALL_OW 292
7003: PUSH
7004: LD_EXP 4
7008: NOT
7009: AND
7010: IFFALSE 7097
7012: GO 7014
7014: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) [ 1 ] , D-Am-S1 ) ;
7015: LD_INT 22
7017: PUSH
7018: LD_INT 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 21
7027: PUSH
7028: LD_INT 1
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PUSH
7044: LD_INT 1
7046: ARRAY
7047: PPUSH
7048: LD_STRING D-Am-S1
7050: PPUSH
7051: CALL_OW 88
// Wait ( 0 0$01 ) ;
7055: LD_INT 35
7057: PPUSH
7058: CALL_OW 67
// Say ( Louis , D-Better ) ;
7062: LD_EXP 29
7066: PPUSH
7067: LD_STRING D-Better
7069: PPUSH
7070: CALL_OW 88
// Wait ( 0 0$12 ) ;
7074: LD_INT 420
7076: PPUSH
7077: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
7081: LD_INT 2
7083: PPUSH
7084: LD_INT 1
7086: PPUSH
7087: LD_INT 2
7089: PPUSH
7090: LD_INT 1
7092: PPUSH
7093: CALL_OW 80
// end ;
7097: END
// every 0 0$01 trigger GetDistUnitArea ( Louis , escape ) < 10 do
7098: LD_EXP 29
7102: PPUSH
7103: LD_INT 26
7105: PPUSH
7106: CALL_OW 299
7110: PUSH
7111: LD_INT 10
7113: LESS
7114: IFFALSE 7147
7116: GO 7118
7118: DISABLE
// begin PlaceSeeing ( 48 , 93 , 2 , 7 ) ;
7119: LD_INT 48
7121: PPUSH
7122: LD_INT 93
7124: PPUSH
7125: LD_INT 2
7127: PPUSH
7128: LD_INT 7
7130: PPUSH
7131: CALL_OW 330
// Say ( Louis , at1 ) ;
7135: LD_EXP 29
7139: PPUSH
7140: LD_STRING at1
7142: PPUSH
7143: CALL_OW 88
// end ;
7147: END
// export RewardList ; every 0 0$01 trigger IsInArea ( Louis , escape ) do var i ;
7148: LD_EXP 29
7152: PPUSH
7153: LD_INT 26
7155: PPUSH
7156: CALL_OW 308
7160: IFFALSE 7545
7162: GO 7164
7164: DISABLE
7165: LD_INT 0
7167: PPUSH
// begin RewardList := [ ] ;
7168: LD_ADDR_EXP 32
7172: PUSH
7173: EMPTY
7174: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 5 then
7175: LD_INT 22
7177: PUSH
7178: LD_INT 2
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 21
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: PUSH
7204: LD_INT 5
7206: GREATER
7207: IFFALSE 7221
// begin AddMedal ( savepep , 1 ) ;
7209: LD_STRING savepep
7211: PPUSH
7212: LD_INT 1
7214: PPUSH
7215: CALL_OW 101
// end else
7219: GO 7232
// begin AddMedal ( savepep , - 1 ) ;
7221: LD_STRING savepep
7223: PPUSH
7224: LD_INT 1
7226: NEG
7227: PPUSH
7228: CALL_OW 101
// end ; AddMedal ( map , 1 ) ;
7232: LD_STRING map
7234: PPUSH
7235: LD_INT 1
7237: PPUSH
7238: CALL_OW 101
// if GetSide ( mmark ) = 2 and IsOk ( mmark ) then
7242: LD_EXP 28
7246: PPUSH
7247: CALL_OW 255
7251: PUSH
7252: LD_INT 2
7254: EQUAL
7255: PUSH
7256: LD_EXP 28
7260: PPUSH
7261: CALL_OW 302
7265: AND
7266: IFFALSE 7280
// begin AddMedal ( marklive , 1 ) ;
7268: LD_STRING marklive
7270: PPUSH
7271: LD_INT 1
7273: PPUSH
7274: CALL_OW 101
// end else
7278: GO 7291
// begin AddMedal ( marklive , - 1 ) ;
7280: LD_STRING marklive
7282: PPUSH
7283: LD_INT 1
7285: NEG
7286: PPUSH
7287: CALL_OW 101
// end ; GiveMedals ( Main ) ;
7291: LD_STRING Main
7293: PPUSH
7294: CALL_OW 102
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
7298: LD_ADDR_VAR 0 1
7302: PUSH
7303: LD_INT 22
7305: PUSH
7306: LD_INT 2
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PPUSH
7313: CALL_OW 69
7317: PUSH
7318: FOR_IN
7319: IFFALSE 7350
// begin if IsLive ( i ) then
7321: LD_VAR 0 1
7325: PPUSH
7326: CALL_OW 300
7330: IFFALSE 7348
// RewardList = RewardList ^ i ;
7332: LD_ADDR_EXP 32
7336: PUSH
7337: LD_EXP 32
7341: PUSH
7342: LD_VAR 0 1
7346: ADD
7347: ST_TO_ADDR
// end ;
7348: GO 7318
7350: POP
7351: POP
// RewardPeople ( RewardList ) ;
7352: LD_EXP 32
7356: PPUSH
7357: CALL_OW 43
// SaveCharacters ( Louis , Louis ) ;
7361: LD_EXP 29
7365: PPUSH
7366: LD_STRING Louis
7368: PPUSH
7369: CALL_OW 38
// SaveCharacters ( Abdul , Abdul ) ;
7373: LD_EXP 27
7377: PPUSH
7378: LD_STRING Abdul
7380: PPUSH
7381: CALL_OW 38
// if IsLive ( Dwein ) then
7385: LD_EXP 22
7389: PPUSH
7390: CALL_OW 300
7394: IFFALSE 7408
// begin SaveCharacters ( Dwein , Dwein_01 ) ;
7396: LD_EXP 22
7400: PPUSH
7401: LD_STRING Dwein_01
7403: PPUSH
7404: CALL_OW 38
// end ; if IsLive ( Karla ) then
7408: LD_EXP 25
7412: PPUSH
7413: CALL_OW 300
7417: IFFALSE 7431
// begin SaveCharacters ( Karla , Karla_01 ) ;
7419: LD_EXP 25
7423: PPUSH
7424: LD_STRING Karla_01
7426: PPUSH
7427: CALL_OW 38
// end ; if IsLive ( Olaf ) then
7431: LD_EXP 23
7435: PPUSH
7436: CALL_OW 300
7440: IFFALSE 7454
// begin SaveCharacters ( Olaf , Olaf_01 ) ;
7442: LD_EXP 23
7446: PPUSH
7447: LD_STRING Olaf_01
7449: PPUSH
7450: CALL_OW 38
// end ; if IsLive ( Gunther ) then
7454: LD_EXP 24
7458: PPUSH
7459: CALL_OW 300
7463: IFFALSE 7477
// begin SaveCharacters ( Gunther , Gunther_01 ) ;
7465: LD_EXP 24
7469: PPUSH
7470: LD_STRING Gunther_01
7472: PPUSH
7473: CALL_OW 38
// end ; if IsLive ( Joachim ) then
7477: LD_EXP 26
7481: PPUSH
7482: CALL_OW 300
7486: IFFALSE 7500
// begin SaveCharacters ( Joachim , Joachim_01 ) ;
7488: LD_EXP 26
7492: PPUSH
7493: LD_STRING Joachim_01
7495: PPUSH
7496: CALL_OW 38
// end ; if IsLive ( Mmark ) and GetSide ( Mmark ) = 2 then
7500: LD_EXP 28
7504: PPUSH
7505: CALL_OW 300
7509: PUSH
7510: LD_EXP 28
7514: PPUSH
7515: CALL_OW 255
7519: PUSH
7520: LD_INT 2
7522: EQUAL
7523: AND
7524: IFFALSE 7538
// begin SaveCharacters ( Mmark , Mmark_01 ) ;
7526: LD_EXP 28
7530: PPUSH
7531: LD_STRING Mmark_01
7533: PPUSH
7534: CALL_OW 38
// end ; SetNextMission ( 1 ) ;
7538: LD_INT 1
7540: PPUSH
7541: CALL_OW 536
// end ; end_of_file
7545: PPOPN 1
7547: END
// on UnitDestroyed ( un ) do begin if un = Louis then
7548: LD_VAR 0 1
7552: PUSH
7553: LD_EXP 29
7557: EQUAL
7558: IFFALSE 7567
// begin YouLost ( dead ) ;
7560: LD_STRING dead
7562: PPUSH
7563: CALL_OW 104
// end ; if un = Abdul then
7567: LD_VAR 0 1
7571: PUSH
7572: LD_EXP 27
7576: EQUAL
7577: IFFALSE 7586
// begin YouLost ( sdead ) ;
7579: LD_STRING sdead
7581: PPUSH
7582: CALL_OW 104
// end ; end ;
7586: PPOPN 1
7588: END
// on UnitGoesToRed ( un ) do begin if un = Louis and FilterAllUnits ( [ f_side , 2 ] ) < 2 then
7589: LD_VAR 0 1
7593: PUSH
7594: LD_EXP 29
7598: EQUAL
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: PUSH
7615: LD_INT 2
7617: LESS
7618: AND
7619: IFFALSE 7628
// begin YouLost ( dead ) ;
7621: LD_STRING dead
7623: PPUSH
7624: CALL_OW 104
// end ; if un in FilterAllUnits ( [ f_side , 6 ] ) then
7628: LD_VAR 0 1
7632: PUSH
7633: LD_INT 22
7635: PUSH
7636: LD_INT 6
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PPUSH
7643: CALL_OW 69
7647: IN
7648: IFFALSE 7670
// begin dialogs ( un , Rand ( 1 , 5 ) ) ;
7650: LD_VAR 0 1
7654: PPUSH
7655: LD_INT 1
7657: PPUSH
7658: LD_INT 5
7660: PPUSH
7661: CALL_OW 12
7665: PPUSH
7666: CALL 6874 0 2
// end ; end ;
7670: PPOPN 1
7672: END
