// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 2 ) ;
   4: LD_INT 2
   6: PPUSH
   7: CALL_OW 344
// InGameOn ;
  11: CALL_OW 8
// CenterNowOnXY ( 106 , 78 ) ;
  15: LD_INT 106
  17: PPUSH
  18: LD_INT 78
  20: PPUSH
  21: CALL_OW 86
// PrepareLouis ;
  25: CALL 38 0 0
// PrepareArabian ;
  29: CALL 132 0 0
// ActionStart ;
  33: CALL 1506 0 0
// end ; end_of_file
  37: END
// export Louis ; export function PrepareLouis ; begin
  38: LD_INT 0
  40: PPUSH
// uc_side = 2 ;
  41: LD_ADDR_OWVAR 20
  45: PUSH
  46: LD_INT 2
  48: ST_TO_ADDR
// uc_nation = 2 ;
  49: LD_ADDR_OWVAR 21
  53: PUSH
  54: LD_INT 2
  56: ST_TO_ADDR
// if TestCharacters ( Louis ) then
  57: LD_STRING Louis
  59: PPUSH
  60: CALL_OW 28
  64: IFFALSE 81
// begin Louis := CreateCharacter ( Louis ) ;
  66: LD_ADDR_EXP 1
  70: PUSH
  71: LD_STRING Louis
  73: PPUSH
  74: CALL_OW 34
  78: ST_TO_ADDR
// end else
  79: GO 115
// begin hc_class = 1 ;
  81: LD_ADDR_OWVAR 28
  85: PUSH
  86: LD_INT 1
  88: ST_TO_ADDR
// hc_gallery =  ;
  89: LD_ADDR_OWVAR 33
  93: PUSH
  94: LD_STRING 
  96: ST_TO_ADDR
// hc_sex = sex_male ;
  97: LD_ADDR_OWVAR 27
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// louis = CreateHuman ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: CALL_OW 44
 114: ST_TO_ADDR
// end ; PlaceHumanInUnit ( Louis , veh ) ;
 115: LD_EXP 1
 119: PPUSH
 120: LD_INT 40
 122: PPUSH
 123: CALL_OW 52
// end ; end_of_file
 127: LD_VAR 0 1
 131: RET
// export Gensher , Shariff , Abdul , Omar , Farmer , Heike , Saliba , Nahas , Kurt ; export sheik1 , solds ; export function PrepareArabian ; var i , un ; begin
 132: LD_INT 0
 134: PPUSH
 135: PPUSH
 136: PPUSH
// SetBName ( dep , Camp ) ;
 137: LD_INT 12
 139: PPUSH
 140: LD_STRING Camp
 142: PPUSH
 143: CALL_OW 500
// uc_side = 5 ;
 147: LD_ADDR_OWVAR 20
 151: PUSH
 152: LD_INT 5
 154: ST_TO_ADDR
// uc_nation = 2 ;
 155: LD_ADDR_OWVAR 21
 159: PUSH
 160: LD_INT 2
 162: ST_TO_ADDR
// solds := [ ] ;
 163: LD_ADDR_EXP 12
 167: PUSH
 168: EMPTY
 169: ST_TO_ADDR
// hc_class = 11 ;
 170: LD_ADDR_OWVAR 28
 174: PUSH
 175: LD_INT 11
 177: ST_TO_ADDR
// hc_sex = sex_male ;
 178: LD_ADDR_OWVAR 27
 182: PUSH
 183: LD_INT 1
 185: ST_TO_ADDR
// hc_gallery = ru ;
 186: LD_ADDR_OWVAR 33
 190: PUSH
 191: LD_STRING ru
 193: ST_TO_ADDR
// hc_face_number = 45 ;
 194: LD_ADDR_OWVAR 34
 198: PUSH
 199: LD_INT 45
 201: ST_TO_ADDR
// hc_name = Abdul Shariff ;
 202: LD_ADDR_OWVAR 26
 206: PUSH
 207: LD_STRING Abdul Shariff
 209: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 210: LD_ADDR_OWVAR 31
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: LD_INT 0
 223: PUSH
 224: LD_INT 0
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: LIST
 231: LIST
 232: ST_TO_ADDR
// Shariff = CreateHuman ;
 233: LD_ADDR_EXP 3
 237: PUSH
 238: CALL_OW 44
 242: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , dep ) ;
 243: LD_EXP 3
 247: PPUSH
 248: LD_INT 12
 250: PPUSH
 251: CALL_OW 52
// hc_class = 1 ;
 255: LD_ADDR_OWVAR 28
 259: PUSH
 260: LD_INT 1
 262: ST_TO_ADDR
// hc_name = Dietrich Gensher ;
 263: LD_ADDR_OWVAR 26
 267: PUSH
 268: LD_STRING Dietrich Gensher
 270: ST_TO_ADDR
// hc_gallery = ru ;
 271: LD_ADDR_OWVAR 33
 275: PUSH
 276: LD_STRING ru
 278: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 279: LD_ADDR_OWVAR 31
 283: PUSH
 284: LD_INT 0
 286: PUSH
 287: LD_INT 0
 289: PUSH
 290: LD_INT 0
 292: PUSH
 293: LD_INT 0
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: ST_TO_ADDR
// hc_face_number = 26 ;
 302: LD_ADDR_OWVAR 34
 306: PUSH
 307: LD_INT 26
 309: ST_TO_ADDR
// hc_sex = sex_male ;
 310: LD_ADDR_OWVAR 27
 314: PUSH
 315: LD_INT 1
 317: ST_TO_ADDR
// Gensher = CreateHuman ;
 318: LD_ADDR_EXP 2
 322: PUSH
 323: CALL_OW 44
 327: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , dep ) ;
 328: LD_EXP 2
 332: PPUSH
 333: LD_INT 12
 335: PPUSH
 336: CALL_OW 52
// hc_class = 1 ;
 340: LD_ADDR_OWVAR 28
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
// hc_name = Robert Farmer ;
 348: LD_ADDR_OWVAR 26
 352: PUSH
 353: LD_STRING Robert Farmer
 355: ST_TO_ADDR
// hc_gallery = ru ;
 356: LD_ADDR_OWVAR 33
 360: PUSH
 361: LD_STRING ru
 363: ST_TO_ADDR
// hc_face_number = 44 ;
 364: LD_ADDR_OWVAR 34
 368: PUSH
 369: LD_INT 44
 371: ST_TO_ADDR
// hc_skills = [ 6 , 2 , 3 , 1 ] ;
 372: LD_ADDR_OWVAR 31
 376: PUSH
 377: LD_INT 6
 379: PUSH
 380: LD_INT 2
 382: PUSH
 383: LD_INT 3
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: ST_TO_ADDR
// hc_sex = sex_male ;
 395: LD_ADDR_OWVAR 27
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// hc_attr = [ 9 , 10 ] ;
 403: LD_ADDR_OWVAR 29
 407: PUSH
 408: LD_INT 9
 410: PUSH
 411: LD_INT 10
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: ST_TO_ADDR
// Farmer = CreateHuman ;
 418: LD_ADDR_EXP 6
 422: PUSH
 423: CALL_OW 44
 427: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 43 , 41 , false ) ;
 428: LD_EXP 6
 432: PPUSH
 433: LD_INT 43
 435: PPUSH
 436: LD_INT 41
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComTurnXY ( Farmer , 42 , 41 ) ;
 446: LD_EXP 6
 450: PPUSH
 451: LD_INT 42
 453: PPUSH
 454: LD_INT 41
 456: PPUSH
 457: CALL_OW 118
// hc_class = 1 ;
 461: LD_ADDR_OWVAR 28
 465: PUSH
 466: LD_INT 1
 468: ST_TO_ADDR
// hc_name = Kurt Schmidt ;
 469: LD_ADDR_OWVAR 26
 473: PUSH
 474: LD_STRING Kurt Schmidt
 476: ST_TO_ADDR
// hc_gallery = us ;
 477: LD_ADDR_OWVAR 33
 481: PUSH
 482: LD_STRING us
 484: ST_TO_ADDR
// hc_face_number = 18 ;
 485: LD_ADDR_OWVAR 34
 489: PUSH
 490: LD_INT 18
 492: ST_TO_ADDR
// hc_skills = [ 6 , 2 , 3 , 1 ] ;
 493: LD_ADDR_OWVAR 31
 497: PUSH
 498: LD_INT 6
 500: PUSH
 501: LD_INT 2
 503: PUSH
 504: LD_INT 3
 506: PUSH
 507: LD_INT 1
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// hc_sex = sex_male ;
 516: LD_ADDR_OWVAR 27
 520: PUSH
 521: LD_INT 1
 523: ST_TO_ADDR
// hc_attr = [ 9 , 10 ] ;
 524: LD_ADDR_OWVAR 29
 528: PUSH
 529: LD_INT 9
 531: PUSH
 532: LD_INT 10
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: ST_TO_ADDR
// Kurt = CreateHuman ;
 539: LD_ADDR_EXP 10
 543: PUSH
 544: CALL_OW 44
 548: ST_TO_ADDR
// PlaceUnitXY ( Kurt , 41 , 38 , false ) ;
 549: LD_EXP 10
 553: PPUSH
 554: LD_INT 41
 556: PPUSH
 557: LD_INT 38
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: CALL_OW 48
// ComTurnXY ( Kurt , 40 , 38 ) ;
 567: LD_EXP 10
 571: PPUSH
 572: LD_INT 40
 574: PPUSH
 575: LD_INT 38
 577: PPUSH
 578: CALL_OW 118
// hc_class = 11 ;
 582: LD_ADDR_OWVAR 28
 586: PUSH
 587: LD_INT 11
 589: ST_TO_ADDR
// hc_gallery = E3galery ;
 590: LD_ADDR_OWVAR 33
 594: PUSH
 595: LD_STRING E3galery
 597: ST_TO_ADDR
// hc_face_number = 1 ;
 598: LD_ADDR_OWVAR 34
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// hc_name = Omar Ali ;
 606: LD_ADDR_OWVAR 26
 610: PUSH
 611: LD_STRING Omar Ali
 613: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 614: LD_ADDR_OWVAR 31
 618: PUSH
 619: LD_INT 0
 621: PUSH
 622: LD_INT 0
 624: PUSH
 625: LD_INT 0
 627: PUSH
 628: LD_INT 0
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: ST_TO_ADDR
// Omar = CreateHuman ;
 637: LD_ADDR_EXP 5
 641: PUSH
 642: CALL_OW 44
 646: ST_TO_ADDR
// PlaceUnitXY ( Omar , 49 , 35 , false ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_INT 49
 654: PPUSH
 655: LD_INT 35
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 48
// ComTurnXY ( Omar , 51 , 34 ) ;
 665: LD_EXP 5
 669: PPUSH
 670: LD_INT 51
 672: PPUSH
 673: LD_INT 34
 675: PPUSH
 676: CALL_OW 118
// hc_class = 1 ;
 680: LD_ADDR_OWVAR 28
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// hc_sex = sex_female ;
 688: LD_ADDR_OWVAR 27
 692: PUSH
 693: LD_INT 2
 695: ST_TO_ADDR
// hc_gallery = HEIKE ;
 696: LD_ADDR_OWVAR 33
 700: PUSH
 701: LD_STRING HEIKE
 703: ST_TO_ADDR
// hc_face_number = 1 ;
 704: LD_ADDR_OWVAR 34
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// hc_name = Heike Steyer ;
 712: LD_ADDR_OWVAR 26
 716: PUSH
 717: LD_STRING Heike Steyer
 719: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 720: LD_ADDR_OWVAR 31
 724: PUSH
 725: LD_INT 0
 727: PUSH
 728: LD_INT 0
 730: PUSH
 731: LD_INT 0
 733: PUSH
 734: LD_INT 0
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: ST_TO_ADDR
// Heike = CreateHuman ;
 743: LD_ADDR_EXP 7
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceUnitXY ( Heike , 51 , 34 , false ) ;
 753: LD_EXP 7
 757: PPUSH
 758: LD_INT 51
 760: PPUSH
 761: LD_INT 34
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 48
// ComTurnUnit ( Heike , Omar ) ;
 771: LD_EXP 7
 775: PPUSH
 776: LD_EXP 5
 780: PPUSH
 781: CALL_OW 119
// hc_class = 11 ;
 785: LD_ADDR_OWVAR 28
 789: PUSH
 790: LD_INT 11
 792: ST_TO_ADDR
// hc_sex = sex_male ;
 793: LD_ADDR_OWVAR 27
 797: PUSH
 798: LD_INT 1
 800: ST_TO_ADDR
// hc_gallery = sandar ;
 801: LD_ADDR_OWVAR 33
 805: PUSH
 806: LD_STRING sandar
 808: ST_TO_ADDR
// hc_face_number = 33 ;
 809: LD_ADDR_OWVAR 34
 813: PUSH
 814: LD_INT 33
 816: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
 817: LD_ADDR_OWVAR 26
 821: PUSH
 822: LD_STRING Thabit Muhair Saliba
 824: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 825: LD_ADDR_OWVAR 31
 829: PUSH
 830: LD_INT 0
 832: PUSH
 833: LD_INT 0
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: ST_TO_ADDR
// Saliba = CreateHuman ;
 848: LD_ADDR_EXP 8
 852: PUSH
 853: CALL_OW 44
 857: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , dep ) ;
 858: LD_EXP 8
 862: PPUSH
 863: LD_INT 12
 865: PPUSH
 866: CALL_OW 52
// hc_class = 11 ;
 870: LD_ADDR_OWVAR 28
 874: PUSH
 875: LD_INT 11
 877: ST_TO_ADDR
// hc_sex = sex_male ;
 878: LD_ADDR_OWVAR 27
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// hc_gallery = sandar ;
 886: LD_ADDR_OWVAR 33
 890: PUSH
 891: LD_STRING sandar
 893: ST_TO_ADDR
// hc_face_number = 34 ;
 894: LD_ADDR_OWVAR 34
 898: PUSH
 899: LD_INT 34
 901: ST_TO_ADDR
// hc_name = Ghanim Ishaq Nahas ;
 902: LD_ADDR_OWVAR 26
 906: PUSH
 907: LD_STRING Ghanim Ishaq Nahas
 909: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 910: LD_ADDR_OWVAR 31
 914: PUSH
 915: LD_INT 0
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 0
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: ST_TO_ADDR
// Nahas = CreateHuman ;
 933: LD_ADDR_EXP 9
 937: PUSH
 938: CALL_OW 44
 942: ST_TO_ADDR
// PlaceHumanInUnit ( Nahas , dep ) ;
 943: LD_EXP 9
 947: PPUSH
 948: LD_INT 12
 950: PPUSH
 951: CALL_OW 52
// hc_class = 11 ;
 955: LD_ADDR_OWVAR 28
 959: PUSH
 960: LD_INT 11
 962: ST_TO_ADDR
// hc_name = Abdul Ali Liser ;
 963: LD_ADDR_OWVAR 26
 967: PUSH
 968: LD_STRING Abdul Ali Liser
 970: ST_TO_ADDR
// hc_gallery = E3galery ;
 971: LD_ADDR_OWVAR 33
 975: PUSH
 976: LD_STRING E3galery
 978: ST_TO_ADDR
// hc_face_number = 4 ;
 979: LD_ADDR_OWVAR 34
 983: PUSH
 984: LD_INT 4
 986: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
 987: LD_ADDR_OWVAR 31
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 0
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// hc_sex = sex_male ;
1010: LD_ADDR_OWVAR 27
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// Abdul = CreateHuman ;
1018: LD_ADDR_EXP 4
1022: PUSH
1023: CALL_OW 44
1027: ST_TO_ADDR
// PlaceHumanInUnit ( Abdul , dep ) ;
1028: LD_EXP 4
1032: PPUSH
1033: LD_INT 12
1035: PPUSH
1036: CALL_OW 52
// hc_class = 11 ;
1040: LD_ADDR_OWVAR 28
1044: PUSH
1045: LD_INT 11
1047: ST_TO_ADDR
// hc_name =  ;
1048: LD_ADDR_OWVAR 26
1052: PUSH
1053: LD_STRING 
1055: ST_TO_ADDR
// hc_gallery =  ;
1056: LD_ADDR_OWVAR 33
1060: PUSH
1061: LD_STRING 
1063: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1064: LD_ADDR_OWVAR 31
1068: PUSH
1069: LD_INT 0
1071: PUSH
1072: LD_INT 0
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 0
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// hc_sex = sex_male ;
1087: LD_ADDR_OWVAR 27
1091: PUSH
1092: LD_INT 1
1094: ST_TO_ADDR
// sheik1 = CreateHuman ;
1095: LD_ADDR_EXP 11
1099: PUSH
1100: CALL_OW 44
1104: ST_TO_ADDR
// PlaceHumanInUnit ( sheik1 , dep ) ;
1105: LD_EXP 11
1109: PPUSH
1110: LD_INT 12
1112: PPUSH
1113: CALL_OW 52
// for i = 1 to 5 do
1117: LD_ADDR_VAR 0 2
1121: PUSH
1122: DOUBLE
1123: LD_INT 1
1125: DEC
1126: ST_TO_ADDR
1127: LD_INT 5
1129: PUSH
1130: FOR_TO
1131: IFFALSE 1285
// begin hc_gallery =  ;
1133: LD_ADDR_OWVAR 33
1137: PUSH
1138: LD_STRING 
1140: ST_TO_ADDR
// hc_name =  ;
1141: LD_ADDR_OWVAR 26
1145: PUSH
1146: LD_STRING 
1148: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1149: LD_ADDR_OWVAR 29
1153: PUSH
1154: LD_INT 9
1156: PPUSH
1157: LD_INT 11
1159: PPUSH
1160: CALL_OW 12
1164: PUSH
1165: LD_INT 10
1167: PPUSH
1168: LD_INT 12
1170: PPUSH
1171: CALL_OW 12
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1180: LD_ADDR_OWVAR 31
1184: PUSH
1185: LD_INT 0
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: LD_INT 0
1196: PUSH
1197: EMPTY
1198: LIST
1199: LIST
1200: LIST
1201: LIST
1202: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1203: LD_ADDR_OWVAR 27
1207: PUSH
1208: LD_INT 1
1210: PPUSH
1211: LD_INT 2
1213: PPUSH
1214: CALL_OW 12
1218: ST_TO_ADDR
// hc_class = 1 ;
1219: LD_ADDR_OWVAR 28
1223: PUSH
1224: LD_INT 1
1226: ST_TO_ADDR
// un := CreateHuman ;
1227: LD_ADDR_VAR 0 3
1231: PUSH
1232: CALL_OW 44
1236: ST_TO_ADDR
// PlaceUnitArea ( un , spot1 , false ) ;
1237: LD_VAR 0 3
1241: PPUSH
1242: LD_INT 2
1244: PPUSH
1245: LD_INT 0
1247: PPUSH
1248: CALL_OW 49
// solds = solds ^ un ;
1252: LD_ADDR_EXP 12
1256: PUSH
1257: LD_EXP 12
1261: PUSH
1262: LD_VAR 0 3
1266: ADD
1267: ST_TO_ADDR
// ComTurnXY ( un , 77 , 51 ) ;
1268: LD_VAR 0 3
1272: PPUSH
1273: LD_INT 77
1275: PPUSH
1276: LD_INT 51
1278: PPUSH
1279: CALL_OW 118
// end ;
1283: GO 1130
1285: POP
1286: POP
// for i = 1 to 3 do
1287: LD_ADDR_VAR 0 2
1291: PUSH
1292: DOUBLE
1293: LD_INT 1
1295: DEC
1296: ST_TO_ADDR
1297: LD_INT 3
1299: PUSH
1300: FOR_TO
1301: IFFALSE 1499
// begin hc_gallery =  ;
1303: LD_ADDR_OWVAR 33
1307: PUSH
1308: LD_STRING 
1310: ST_TO_ADDR
// hc_name =  ;
1311: LD_ADDR_OWVAR 26
1315: PUSH
1316: LD_STRING 
1318: ST_TO_ADDR
// hc_attr = [ Rand ( 9 , 11 ) , Rand ( 10 , 12 ) ] ;
1319: LD_ADDR_OWVAR 29
1323: PUSH
1324: LD_INT 9
1326: PPUSH
1327: LD_INT 11
1329: PPUSH
1330: CALL_OW 12
1334: PUSH
1335: LD_INT 10
1337: PPUSH
1338: LD_INT 12
1340: PPUSH
1341: CALL_OW 12
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
1350: LD_ADDR_OWVAR 31
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 0
1360: PUSH
1361: LD_INT 0
1363: PUSH
1364: LD_INT 0
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
1373: LD_ADDR_OWVAR 27
1377: PUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 12
1388: ST_TO_ADDR
// hc_class = 1 ;
1389: LD_ADDR_OWVAR 28
1393: PUSH
1394: LD_INT 1
1396: ST_TO_ADDR
// un := CreateHuman ;
1397: LD_ADDR_VAR 0 3
1401: PUSH
1402: CALL_OW 44
1406: ST_TO_ADDR
// if i < 3 then
1407: LD_VAR 0 2
1411: PUSH
1412: LD_INT 3
1414: LESS
1415: IFFALSE 1467
// begin PlaceUnitArea ( un , guard , false ) ;
1417: LD_VAR 0 3
1421: PPUSH
1422: LD_INT 1
1424: PPUSH
1425: LD_INT 0
1427: PPUSH
1428: CALL_OW 49
// ComTurnXY ( un , GetX ( un ) , GetY ( un ) + 1 ) ;
1432: LD_VAR 0 3
1436: PPUSH
1437: LD_VAR 0 3
1441: PPUSH
1442: CALL_OW 250
1446: PPUSH
1447: LD_VAR 0 3
1451: PPUSH
1452: CALL_OW 251
1456: PUSH
1457: LD_INT 1
1459: PLUS
1460: PPUSH
1461: CALL_OW 118
// end else
1465: GO 1497
// begin PlaceUnitXY ( un , 95 , 52 , false ) ;
1467: LD_VAR 0 3
1471: PPUSH
1472: LD_INT 95
1474: PPUSH
1475: LD_INT 52
1477: PPUSH
1478: LD_INT 0
1480: PPUSH
1481: CALL_OW 48
// ComEnterUnit ( un , bunker ) ;
1485: LD_VAR 0 3
1489: PPUSH
1490: LD_INT 3
1492: PPUSH
1493: CALL_OW 120
// end ; end ;
1497: GO 1300
1499: POP
1500: POP
// end ; end_of_file
1501: LD_VAR 0 1
1505: RET
// export function ActionStart ; begin
1506: LD_INT 0
1508: PPUSH
// ComMoveXY ( Louis , 81 , 42 ) ;
1509: LD_EXP 1
1513: PPUSH
1514: LD_INT 81
1516: PPUSH
1517: LD_INT 42
1519: PPUSH
1520: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
1524: LD_EXP 1
1528: PPUSH
1529: CALL_OW 181
// AddComWait ( Louis , 0 0$0.3 ) ;
1533: LD_EXP 1
1537: PPUSH
1538: LD_INT 10
1540: PPUSH
1541: CALL_OW 202
// AddComMoveXY ( Louis , 46 , 41 ) ;
1545: LD_EXP 1
1549: PPUSH
1550: LD_INT 46
1552: PPUSH
1553: LD_INT 41
1555: PPUSH
1556: CALL_OW 171
// repeat Wait ( 0 0$03 ) ;
1560: LD_INT 105
1562: PPUSH
1563: CALL_OW 67
// CenterOnXY ( GetX ( Louis ) , GetY ( Louis ) ) ;
1567: LD_EXP 1
1571: PPUSH
1572: CALL_OW 250
1576: PPUSH
1577: LD_EXP 1
1581: PPUSH
1582: CALL_OW 251
1586: PPUSH
1587: CALL_OW 84
// until GetDistUnits ( Louis , Farmer ) < 6 or Dialogue_Skipped ;
1591: LD_EXP 1
1595: PPUSH
1596: LD_EXP 6
1600: PPUSH
1601: CALL_OW 296
1605: PUSH
1606: LD_INT 6
1608: LESS
1609: PUSH
1610: LD_OWVAR 59
1614: OR
1615: IFFALSE 1560
// CenterOnXY ( 47 , 41 ) ;
1617: LD_INT 47
1619: PPUSH
1620: LD_INT 41
1622: PPUSH
1623: CALL_OW 84
// ComTurnUnit ( Louis , Farmer ) ;
1627: LD_EXP 1
1631: PPUSH
1632: LD_EXP 6
1636: PPUSH
1637: CALL_OW 119
// Say ( Louis , DD1 ) ;
1641: LD_EXP 1
1645: PPUSH
1646: LD_STRING DD1
1648: PPUSH
1649: CALL_OW 88
// ComTurnUnit ( [ Farmer , Kurt ] , Louis ) ;
1653: LD_EXP 6
1657: PUSH
1658: LD_EXP 10
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PPUSH
1667: LD_EXP 1
1671: PPUSH
1672: CALL_OW 119
// Say ( Farmer , DD2 ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_STRING DD2
1683: PPUSH
1684: CALL_OW 88
// Say ( Louis , DD3 ) ;
1688: LD_EXP 1
1692: PPUSH
1693: LD_STRING DD3
1695: PPUSH
1696: CALL_OW 88
// Say ( Farmer , DD4 ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_STRING DD4
1707: PPUSH
1708: CALL_OW 88
// Say ( Farmer , DD5 ) ;
1712: LD_EXP 6
1716: PPUSH
1717: LD_STRING DD5
1719: PPUSH
1720: CALL_OW 88
// Say ( Louis , DD6 ) ;
1724: LD_EXP 1
1728: PPUSH
1729: LD_STRING DD6
1731: PPUSH
1732: CALL_OW 88
// Say ( Kurt , DD7 ) ;
1736: LD_EXP 10
1740: PPUSH
1741: LD_STRING DD7
1743: PPUSH
1744: CALL_OW 88
// Say ( Farmer , DD8 ) ;
1748: LD_EXP 6
1752: PPUSH
1753: LD_STRING DD8
1755: PPUSH
1756: CALL_OW 88
// ComTurnUnit ( Louis , Heike ) ;
1760: LD_EXP 1
1764: PPUSH
1765: LD_EXP 7
1769: PPUSH
1770: CALL_OW 119
// Say ( Louis , DD9 ) ;
1774: LD_EXP 1
1778: PPUSH
1779: LD_STRING DD9
1781: PPUSH
1782: CALL_OW 88
// Say ( Farmer , DD10 ) ;
1786: LD_EXP 6
1790: PPUSH
1791: LD_STRING DD10
1793: PPUSH
1794: CALL_OW 88
// ComTurnUnit ( Louis , Farmer ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_EXP 6
1807: PPUSH
1808: CALL_OW 119
// Say ( Louis , DD11 ) ;
1812: LD_EXP 1
1816: PPUSH
1817: LD_STRING DD11
1819: PPUSH
1820: CALL_OW 88
// Say ( Farmer , DD12 ) ;
1824: LD_EXP 6
1828: PPUSH
1829: LD_STRING DD12
1831: PPUSH
1832: CALL_OW 88
// Say ( Kurt , DD13 ) ;
1836: LD_EXP 10
1840: PPUSH
1841: LD_STRING DD13
1843: PPUSH
1844: CALL_OW 88
// Say ( Louis , DD14 ) ;
1848: LD_EXP 1
1852: PPUSH
1853: LD_STRING DD14
1855: PPUSH
1856: CALL_OW 88
// Say ( Farmer , DD15 ) ;
1860: LD_EXP 6
1864: PPUSH
1865: LD_STRING DD15
1867: PPUSH
1868: CALL_OW 88
// Say ( Farmer , DD16 ) ;
1872: LD_EXP 6
1876: PPUSH
1877: LD_STRING DD16
1879: PPUSH
1880: CALL_OW 88
// Say ( Farmer , DD17 ) ;
1884: LD_EXP 6
1888: PPUSH
1889: LD_STRING DD17
1891: PPUSH
1892: CALL_OW 88
// ComMoveXY ( solds [ 1 ] , 50 , 42 ) ;
1896: LD_EXP 12
1900: PUSH
1901: LD_INT 1
1903: ARRAY
1904: PPUSH
1905: LD_INT 50
1907: PPUSH
1908: LD_INT 42
1910: PPUSH
1911: CALL_OW 111
// AddComTurnUnit ( solds [ 1 ] , Louis ) ;
1915: LD_EXP 12
1919: PUSH
1920: LD_INT 1
1922: ARRAY
1923: PPUSH
1924: LD_EXP 1
1928: PPUSH
1929: CALL_OW 179
// Say ( Kurt , DD18 ) ;
1933: LD_EXP 10
1937: PPUSH
1938: LD_STRING DD18
1940: PPUSH
1941: CALL_OW 88
// Say ( Louis , DD19 ) ;
1945: LD_EXP 1
1949: PPUSH
1950: LD_STRING DD19
1952: PPUSH
1953: CALL_OW 88
// Say ( Farmer , DD20 ) ;
1957: LD_EXP 6
1961: PPUSH
1962: LD_STRING DD20
1964: PPUSH
1965: CALL_OW 88
// Say ( solds [ 1 ] , DD21 ) ;
1969: LD_EXP 12
1973: PUSH
1974: LD_INT 1
1976: ARRAY
1977: PPUSH
1978: LD_STRING DD21
1980: PPUSH
1981: CALL_OW 88
// ComTurnUnit ( Louis , solds [ 1 ] ) ;
1985: LD_EXP 1
1989: PPUSH
1990: LD_EXP 12
1994: PUSH
1995: LD_INT 1
1997: ARRAY
1998: PPUSH
1999: CALL_OW 119
// Say ( Louis , DD22 ) ;
2003: LD_EXP 1
2007: PPUSH
2008: LD_STRING DD22
2010: PPUSH
2011: CALL_OW 88
// Say ( solds [ 1 ] , DD23 ) ;
2015: LD_EXP 12
2019: PUSH
2020: LD_INT 1
2022: ARRAY
2023: PPUSH
2024: LD_STRING DD23
2026: PPUSH
2027: CALL_OW 88
// ComMoveXY ( solds [ 1 ] , 65 , 38 ) ;
2031: LD_EXP 12
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: PPUSH
2040: LD_INT 65
2042: PPUSH
2043: LD_INT 38
2045: PPUSH
2046: CALL_OW 111
// AddComTurnUnit ( solds [ 1 ] , Louis ) ;
2050: LD_EXP 12
2054: PUSH
2055: LD_INT 1
2057: ARRAY
2058: PPUSH
2059: LD_EXP 1
2063: PPUSH
2064: CALL_OW 179
// ComTurnUnit ( Louis , Farmer ) ;
2068: LD_EXP 1
2072: PPUSH
2073: LD_EXP 6
2077: PPUSH
2078: CALL_OW 119
// Say ( Farmer , DD24 ) ;
2082: LD_EXP 6
2086: PPUSH
2087: LD_STRING DD24
2089: PPUSH
2090: CALL_OW 88
// Say ( Louis , DD25 ) ;
2094: LD_EXP 1
2098: PPUSH
2099: LD_STRING DD25
2101: PPUSH
2102: CALL_OW 88
// ComExitBuilding ( Shariff ) ;
2106: LD_EXP 3
2110: PPUSH
2111: CALL_OW 122
// AddComMoveXY ( Shariff , 71 , 40 ) ;
2115: LD_EXP 3
2119: PPUSH
2120: LD_INT 71
2122: PPUSH
2123: LD_INT 40
2125: PPUSH
2126: CALL_OW 171
// AddComTurnUnit ( Shariff , Louis ) ;
2130: LD_EXP 3
2134: PPUSH
2135: LD_EXP 1
2139: PPUSH
2140: CALL_OW 179
// ComMoveXY ( Louis , 70 , 42 ) ;
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 70
2151: PPUSH
2152: LD_INT 42
2154: PPUSH
2155: CALL_OW 111
// AddComTurnUnit ( Louis , Shariff ) ;
2159: LD_EXP 1
2163: PPUSH
2164: LD_EXP 3
2168: PPUSH
2169: CALL_OW 179
// repeat Wait ( 0 0$02 ) ;
2173: LD_INT 70
2175: PPUSH
2176: CALL_OW 67
// CenterOnXY ( GetX ( Louis ) , GetY ( Louis ) ) ;
2180: LD_EXP 1
2184: PPUSH
2185: CALL_OW 250
2189: PPUSH
2190: LD_EXP 1
2194: PPUSH
2195: CALL_OW 251
2199: PPUSH
2200: CALL_OW 84
// until GetDistUnits ( Louis , Shariff ) < 7 or Dialogue_Skipped ;
2204: LD_EXP 1
2208: PPUSH
2209: LD_EXP 3
2213: PPUSH
2214: CALL_OW 296
2218: PUSH
2219: LD_INT 7
2221: LESS
2222: PUSH
2223: LD_OWVAR 59
2227: OR
2228: IFFALSE 2173
// Say ( Shariff , DD26 ) ;
2230: LD_EXP 3
2234: PPUSH
2235: LD_STRING DD26
2237: PPUSH
2238: CALL_OW 88
// Say ( Louis , DD27 ) ;
2242: LD_EXP 1
2246: PPUSH
2247: LD_STRING DD27
2249: PPUSH
2250: CALL_OW 88
// Say ( Shariff , DD28 ) ;
2254: LD_EXP 3
2258: PPUSH
2259: LD_STRING DD28
2261: PPUSH
2262: CALL_OW 88
// Say ( Louis , DD29 ) ;
2266: LD_EXP 1
2270: PPUSH
2271: LD_STRING DD29
2273: PPUSH
2274: CALL_OW 88
// Say ( Shariff , DD30 ) ;
2278: LD_EXP 3
2282: PPUSH
2283: LD_STRING DD30
2285: PPUSH
2286: CALL_OW 88
// Say ( Louis , DD31 ) ;
2290: LD_EXP 1
2294: PPUSH
2295: LD_STRING DD31
2297: PPUSH
2298: CALL_OW 88
// Say ( Shariff , DD32 ) ;
2302: LD_EXP 3
2306: PPUSH
2307: LD_STRING DD32
2309: PPUSH
2310: CALL_OW 88
// Say ( Louis , DD33 ) ;
2314: LD_EXP 1
2318: PPUSH
2319: LD_STRING DD33
2321: PPUSH
2322: CALL_OW 88
// Say ( Shariff , DD34 ) ;
2326: LD_EXP 3
2330: PPUSH
2331: LD_STRING DD34
2333: PPUSH
2334: CALL_OW 88
// Say ( Shariff , DD35 ) ;
2338: LD_EXP 3
2342: PPUSH
2343: LD_STRING DD35
2345: PPUSH
2346: CALL_OW 88
// Say ( Shariff , DD36 ) ;
2350: LD_EXP 3
2354: PPUSH
2355: LD_STRING DD36
2357: PPUSH
2358: CALL_OW 88
// Say ( Louis , DD37 ) ;
2362: LD_EXP 1
2366: PPUSH
2367: LD_STRING DD37
2369: PPUSH
2370: CALL_OW 88
// Say ( Shariff , DD38 ) ;
2374: LD_EXP 3
2378: PPUSH
2379: LD_STRING DD38
2381: PPUSH
2382: CALL_OW 88
// Say ( Shariff , DD39 ) ;
2386: LD_EXP 3
2390: PPUSH
2391: LD_STRING DD39
2393: PPUSH
2394: CALL_OW 88
// Say ( Shariff , DD40 ) ;
2398: LD_EXP 3
2402: PPUSH
2403: LD_STRING DD40
2405: PPUSH
2406: CALL_OW 88
// Say ( Louis , DD41 ) ;
2410: LD_EXP 1
2414: PPUSH
2415: LD_STRING DD41
2417: PPUSH
2418: CALL_OW 88
// Say ( Shariff , DD42 ) ;
2422: LD_EXP 3
2426: PPUSH
2427: LD_STRING DD42
2429: PPUSH
2430: CALL_OW 88
// Say ( Louis , DD43 ) ;
2434: LD_EXP 1
2438: PPUSH
2439: LD_STRING DD43
2441: PPUSH
2442: CALL_OW 88
// Say ( Shariff , DD44 ) ;
2446: LD_EXP 3
2450: PPUSH
2451: LD_STRING DD44
2453: PPUSH
2454: CALL_OW 88
// ComMoveXY ( Louis , 82 , 42 ) ;
2458: LD_EXP 1
2462: PPUSH
2463: LD_INT 82
2465: PPUSH
2466: LD_INT 42
2468: PPUSH
2469: CALL_OW 111
// Wait ( 0 0$0.3 ) ;
2473: LD_INT 10
2475: PPUSH
2476: CALL_OW 67
// Say ( Shariff , DD45 ) ;
2480: LD_EXP 3
2484: PPUSH
2485: LD_STRING DD45
2487: PPUSH
2488: CALL_OW 88
// ComMoveXY ( solds [ 1 ] , GetX ( Farmer ) , GetY ( Farmer ) ) ;
2492: LD_EXP 12
2496: PUSH
2497: LD_INT 1
2499: ARRAY
2500: PPUSH
2501: LD_EXP 6
2505: PPUSH
2506: CALL_OW 250
2510: PPUSH
2511: LD_EXP 6
2515: PPUSH
2516: CALL_OW 251
2520: PPUSH
2521: CALL_OW 111
// Wait ( 0 0$02 ) ;
2525: LD_INT 70
2527: PPUSH
2528: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2532: LD_INT 1
2534: PPUSH
2535: LD_STRING %_cont
2537: PPUSH
2538: CALL_OW 340
// end ;
2542: LD_VAR 0 1
2546: RET
// every 0 0$01 trigger Dialogue_Skipped do
2547: LD_OWVAR 59
2551: IFFALSE 2566
2553: GO 2555
2555: DISABLE
// begin ChangeMap ( 1 , %_cont ) ;
2556: LD_INT 1
2558: PPUSH
2559: LD_STRING %_cont
2561: PPUSH
2562: CALL_OW 340
// end ; end_of_file
2566: END
