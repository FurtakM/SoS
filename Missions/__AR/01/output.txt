// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_EXP 15
  25: EQUAL
  26: IFFALSE 98
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  28: LD_INT 68
  30: PPUSH
  31: LD_VAR 0 1
  35: PPUSH
  36: CALL_OW 255
  40: PPUSH
  41: CALL_OW 321
  45: PUSH
  46: LD_INT 2
  48: EQUAL
  49: IFFALSE 61
// eff := 70 else
  51: LD_ADDR_VAR 0 4
  55: PUSH
  56: LD_INT 70
  58: ST_TO_ADDR
  59: GO 69
// eff := 30 ;
  61: LD_ADDR_VAR 0 4
  65: PUSH
  66: LD_INT 30
  68: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  69: LD_VAR 0 1
  73: PPUSH
  74: CALL_OW 250
  78: PPUSH
  79: LD_VAR 0 1
  83: PPUSH
  84: CALL_OW 251
  88: PPUSH
  89: LD_VAR 0 4
  93: PPUSH
  94: CALL_OW 495
// end ; end ;
  98: LD_VAR 0 2
 102: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 103: LD_INT 0
 105: PPUSH
// end ;
 106: LD_VAR 0 4
 110: RET
// export function SOS_Command ( cmd ) ; begin
 111: LD_INT 0
 113: PPUSH
// end ;
 114: LD_VAR 0 2
 118: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
 119: LD_INT 0
 121: PPUSH
// end ;
 122: LD_VAR 0 6
 126: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
 127: LD_INT 0
 129: PPUSH
 130: PPUSH
// if not vehicle or not factory then
 131: LD_VAR 0 1
 135: NOT
 136: PUSH
 137: LD_VAR 0 2
 141: NOT
 142: OR
 143: IFFALSE 147
// exit ;
 145: GO 378
// if factoryWaypoints >= factory then
 147: LD_EXP 87
 151: PUSH
 152: LD_VAR 0 2
 156: GREATEREQUAL
 157: IFFALSE 378
// if factoryWaypoints [ factory ] then
 159: LD_EXP 87
 163: PUSH
 164: LD_VAR 0 2
 168: ARRAY
 169: IFFALSE 378
// begin if GetControl ( vehicle ) = control_manual then
 171: LD_VAR 0 1
 175: PPUSH
 176: CALL_OW 263
 180: PUSH
 181: LD_INT 1
 183: EQUAL
 184: IFFALSE 265
// begin driver := IsDrivenBy ( vehicle ) ;
 186: LD_ADDR_VAR 0 4
 190: PUSH
 191: LD_VAR 0 1
 195: PPUSH
 196: CALL_OW 311
 200: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 201: LD_VAR 0 4
 205: PPUSH
 206: LD_EXP 87
 210: PUSH
 211: LD_VAR 0 2
 215: ARRAY
 216: PUSH
 217: LD_INT 3
 219: ARRAY
 220: PPUSH
 221: LD_EXP 87
 225: PUSH
 226: LD_VAR 0 2
 230: ARRAY
 231: PUSH
 232: LD_INT 4
 234: ARRAY
 235: PPUSH
 236: CALL_OW 171
// AddComExitVehicle ( driver ) ;
 240: LD_VAR 0 4
 244: PPUSH
 245: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
 249: LD_VAR 0 4
 253: PPUSH
 254: LD_VAR 0 2
 258: PPUSH
 259: CALL_OW 180
// end else
 263: GO 378
// if GetControl ( vehicle ) = control_remote then
 265: LD_VAR 0 1
 269: PPUSH
 270: CALL_OW 263
 274: PUSH
 275: LD_INT 2
 277: EQUAL
 278: IFFALSE 339
// begin wait ( 0 0$2 ) ;
 280: LD_INT 70
 282: PPUSH
 283: CALL_OW 67
// if Connect ( vehicle ) then
 287: LD_VAR 0 1
 291: PPUSH
 292: CALL 28237 0 1
 296: IFFALSE 337
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 298: LD_VAR 0 1
 302: PPUSH
 303: LD_EXP 87
 307: PUSH
 308: LD_VAR 0 2
 312: ARRAY
 313: PUSH
 314: LD_INT 3
 316: ARRAY
 317: PPUSH
 318: LD_EXP 87
 322: PUSH
 323: LD_VAR 0 2
 327: ARRAY
 328: PUSH
 329: LD_INT 4
 331: ARRAY
 332: PPUSH
 333: CALL_OW 171
// end else
 337: GO 378
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 339: LD_VAR 0 1
 343: PPUSH
 344: LD_EXP 87
 348: PUSH
 349: LD_VAR 0 2
 353: ARRAY
 354: PUSH
 355: LD_INT 3
 357: ARRAY
 358: PPUSH
 359: LD_EXP 87
 363: PUSH
 364: LD_VAR 0 2
 368: ARRAY
 369: PUSH
 370: LD_INT 4
 372: ARRAY
 373: PPUSH
 374: CALL_OW 171
// end ; end ;
 378: LD_VAR 0 3
 382: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 383: LD_INT 0
 385: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 386: LD_VAR 0 1
 390: PUSH
 391: LD_INT 250
 393: EQUAL
 394: PUSH
 395: LD_VAR 0 2
 399: PPUSH
 400: CALL_OW 264
 404: PUSH
 405: LD_EXP 18
 409: EQUAL
 410: AND
 411: IFFALSE 432
// MinerPlaceMine ( unit , x , y ) ;
 413: LD_VAR 0 2
 417: PPUSH
 418: LD_VAR 0 4
 422: PPUSH
 423: LD_VAR 0 5
 427: PPUSH
 428: CALL 2831 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 432: LD_VAR 0 1
 436: PUSH
 437: LD_INT 251
 439: EQUAL
 440: PUSH
 441: LD_VAR 0 2
 445: PPUSH
 446: CALL_OW 264
 450: PUSH
 451: LD_EXP 18
 455: EQUAL
 456: AND
 457: IFFALSE 478
// MinerDetonateMine ( unit , x , y ) ;
 459: LD_VAR 0 2
 463: PPUSH
 464: LD_VAR 0 4
 468: PPUSH
 469: LD_VAR 0 5
 473: PPUSH
 474: CALL 3108 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 478: LD_VAR 0 1
 482: PUSH
 483: LD_INT 252
 485: EQUAL
 486: PUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 264
 496: PUSH
 497: LD_EXP 18
 501: EQUAL
 502: AND
 503: IFFALSE 524
// MinerCreateMinefield ( unit , x , y ) ;
 505: LD_VAR 0 2
 509: PPUSH
 510: LD_VAR 0 4
 514: PPUSH
 515: LD_VAR 0 5
 519: PPUSH
 520: CALL 3525 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 524: LD_VAR 0 1
 528: PUSH
 529: LD_INT 253
 531: EQUAL
 532: PUSH
 533: LD_VAR 0 2
 537: PPUSH
 538: CALL_OW 257
 542: PUSH
 543: LD_INT 5
 545: EQUAL
 546: AND
 547: IFFALSE 568
// ComBinocular ( unit , x , y ) ;
 549: LD_VAR 0 2
 553: PPUSH
 554: LD_VAR 0 4
 558: PPUSH
 559: LD_VAR 0 5
 563: PPUSH
 564: CALL 3896 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 568: LD_VAR 0 1
 572: PUSH
 573: LD_INT 254
 575: EQUAL
 576: PUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 264
 586: PUSH
 587: LD_EXP 13
 591: EQUAL
 592: AND
 593: PUSH
 594: LD_VAR 0 3
 598: PPUSH
 599: CALL_OW 263
 603: PUSH
 604: LD_INT 3
 606: EQUAL
 607: AND
 608: IFFALSE 624
// HackDestroyVehicle ( unit , selectedUnit ) ;
 610: LD_VAR 0 2
 614: PPUSH
 615: LD_VAR 0 3
 619: PPUSH
 620: CALL 2191 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 624: LD_VAR 0 1
 628: PUSH
 629: LD_INT 255
 631: EQUAL
 632: PUSH
 633: LD_VAR 0 2
 637: PPUSH
 638: CALL_OW 264
 642: PUSH
 643: LD_INT 14
 645: PUSH
 646: LD_INT 53
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: IN
 653: AND
 654: PUSH
 655: LD_VAR 0 4
 659: PPUSH
 660: LD_VAR 0 5
 664: PPUSH
 665: CALL_OW 488
 669: AND
 670: IFFALSE 694
// CutTreeXYR ( unit , x , y , 12 ) ;
 672: LD_VAR 0 2
 676: PPUSH
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_VAR 0 5
 686: PPUSH
 687: LD_INT 12
 689: PPUSH
 690: CALL 757 0 4
// if cmd = 256 then
 694: LD_VAR 0 1
 698: PUSH
 699: LD_INT 256
 701: EQUAL
 702: IFFALSE 723
// SetFactoryWaypoint ( unit , x , y ) ;
 704: LD_VAR 0 2
 708: PPUSH
 709: LD_VAR 0 4
 713: PPUSH
 714: LD_VAR 0 5
 718: PPUSH
 719: CALL 18814 0 3
// if cmd = 257 then
 723: LD_VAR 0 1
 727: PUSH
 728: LD_INT 257
 730: EQUAL
 731: IFFALSE 752
// SetWarehouseGatheringPoint ( unit , x , y ) ;
 733: LD_VAR 0 2
 737: PPUSH
 738: LD_VAR 0 4
 742: PPUSH
 743: LD_VAR 0 5
 747: PPUSH
 748: CALL 19176 0 3
// end ;
 752: LD_VAR 0 6
 756: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 757: LD_INT 0
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
 766: PPUSH
 767: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 768: LD_VAR 0 1
 772: NOT
 773: PUSH
 774: LD_VAR 0 2
 778: PPUSH
 779: LD_VAR 0 3
 783: PPUSH
 784: CALL_OW 488
 788: NOT
 789: OR
 790: PUSH
 791: LD_VAR 0 4
 795: NOT
 796: OR
 797: IFFALSE 801
// exit ;
 799: GO 1141
// list := [ ] ;
 801: LD_ADDR_VAR 0 13
 805: PUSH
 806: EMPTY
 807: ST_TO_ADDR
// if x - r < 0 then
 808: LD_VAR 0 2
 812: PUSH
 813: LD_VAR 0 4
 817: MINUS
 818: PUSH
 819: LD_INT 0
 821: LESS
 822: IFFALSE 834
// min_x := 0 else
 824: LD_ADDR_VAR 0 7
 828: PUSH
 829: LD_INT 0
 831: ST_TO_ADDR
 832: GO 850
// min_x := x - r ;
 834: LD_ADDR_VAR 0 7
 838: PUSH
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 4
 848: MINUS
 849: ST_TO_ADDR
// if y - r < 0 then
 850: LD_VAR 0 3
 854: PUSH
 855: LD_VAR 0 4
 859: MINUS
 860: PUSH
 861: LD_INT 0
 863: LESS
 864: IFFALSE 876
// min_y := 0 else
 866: LD_ADDR_VAR 0 8
 870: PUSH
 871: LD_INT 0
 873: ST_TO_ADDR
 874: GO 892
// min_y := y - r ;
 876: LD_ADDR_VAR 0 8
 880: PUSH
 881: LD_VAR 0 3
 885: PUSH
 886: LD_VAR 0 4
 890: MINUS
 891: ST_TO_ADDR
// max_x := x + r ;
 892: LD_ADDR_VAR 0 9
 896: PUSH
 897: LD_VAR 0 2
 901: PUSH
 902: LD_VAR 0 4
 906: PLUS
 907: ST_TO_ADDR
// max_y := y + r ;
 908: LD_ADDR_VAR 0 10
 912: PUSH
 913: LD_VAR 0 3
 917: PUSH
 918: LD_VAR 0 4
 922: PLUS
 923: ST_TO_ADDR
// for _x = min_x to max_x do
 924: LD_ADDR_VAR 0 11
 928: PUSH
 929: DOUBLE
 930: LD_VAR 0 7
 934: DEC
 935: ST_TO_ADDR
 936: LD_VAR 0 9
 940: PUSH
 941: FOR_TO
 942: IFFALSE 1059
// for _y = min_y to max_y do
 944: LD_ADDR_VAR 0 12
 948: PUSH
 949: DOUBLE
 950: LD_VAR 0 8
 954: DEC
 955: ST_TO_ADDR
 956: LD_VAR 0 10
 960: PUSH
 961: FOR_TO
 962: IFFALSE 1055
// begin if not ValidHex ( _x , _y ) then
 964: LD_VAR 0 11
 968: PPUSH
 969: LD_VAR 0 12
 973: PPUSH
 974: CALL_OW 488
 978: NOT
 979: IFFALSE 983
// continue ;
 981: GO 961
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 983: LD_VAR 0 11
 987: PPUSH
 988: LD_VAR 0 12
 992: PPUSH
 993: CALL_OW 351
 997: PUSH
 998: LD_VAR 0 11
1002: PPUSH
1003: LD_VAR 0 12
1007: PPUSH
1008: CALL_OW 554
1012: AND
1013: IFFALSE 1053
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
1015: LD_ADDR_VAR 0 13
1019: PUSH
1020: LD_VAR 0 13
1024: PPUSH
1025: LD_VAR 0 13
1029: PUSH
1030: LD_INT 1
1032: PLUS
1033: PPUSH
1034: LD_VAR 0 11
1038: PUSH
1039: LD_VAR 0 12
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PPUSH
1048: CALL_OW 2
1052: ST_TO_ADDR
// end ;
1053: GO 961
1055: POP
1056: POP
1057: GO 941
1059: POP
1060: POP
// if not list then
1061: LD_VAR 0 13
1065: NOT
1066: IFFALSE 1070
// exit ;
1068: GO 1141
// for i in list do
1070: LD_ADDR_VAR 0 6
1074: PUSH
1075: LD_VAR 0 13
1079: PUSH
1080: FOR_IN
1081: IFFALSE 1139
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
1083: LD_VAR 0 1
1087: PPUSH
1088: LD_STRING M
1090: PUSH
1091: LD_VAR 0 6
1095: PUSH
1096: LD_INT 1
1098: ARRAY
1099: PUSH
1100: LD_VAR 0 6
1104: PUSH
1105: LD_INT 2
1107: ARRAY
1108: PUSH
1109: LD_INT 0
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: LD_INT 0
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: EMPTY
1131: LIST
1132: PPUSH
1133: CALL_OW 447
1137: GO 1080
1139: POP
1140: POP
// end ;
1141: LD_VAR 0 5
1145: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
1146: LD_EXP 1
1150: NOT
1151: IFFALSE 1201
1153: GO 1155
1155: DISABLE
// begin initHack := true ;
1156: LD_ADDR_EXP 1
1160: PUSH
1161: LD_INT 1
1163: ST_TO_ADDR
// hackTanks := [ ] ;
1164: LD_ADDR_EXP 2
1168: PUSH
1169: EMPTY
1170: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
1171: LD_ADDR_EXP 3
1175: PUSH
1176: EMPTY
1177: ST_TO_ADDR
// hackLimit := 3 ;
1178: LD_ADDR_EXP 4
1182: PUSH
1183: LD_INT 3
1185: ST_TO_ADDR
// hackDist := 12 ;
1186: LD_ADDR_EXP 5
1190: PUSH
1191: LD_INT 12
1193: ST_TO_ADDR
// hackCounter := [ ] ;
1194: LD_ADDR_EXP 6
1198: PUSH
1199: EMPTY
1200: ST_TO_ADDR
// end ;
1201: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
1202: LD_EXP 1
1206: PUSH
1207: LD_INT 34
1209: PUSH
1210: LD_EXP 13
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: AND
1224: IFFALSE 1479
1226: GO 1228
1228: DISABLE
1229: LD_INT 0
1231: PPUSH
1232: PPUSH
// begin enable ;
1233: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
1234: LD_ADDR_VAR 0 1
1238: PUSH
1239: LD_INT 34
1241: PUSH
1242: LD_EXP 13
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PPUSH
1251: CALL_OW 69
1255: PUSH
1256: FOR_IN
1257: IFFALSE 1477
// begin if not i in hackTanks then
1259: LD_VAR 0 1
1263: PUSH
1264: LD_EXP 2
1268: IN
1269: NOT
1270: IFFALSE 1353
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
1272: LD_ADDR_EXP 2
1276: PUSH
1277: LD_EXP 2
1281: PPUSH
1282: LD_EXP 2
1286: PUSH
1287: LD_INT 1
1289: PLUS
1290: PPUSH
1291: LD_VAR 0 1
1295: PPUSH
1296: CALL_OW 1
1300: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
1301: LD_ADDR_EXP 3
1305: PUSH
1306: LD_EXP 3
1310: PPUSH
1311: LD_EXP 3
1315: PUSH
1316: LD_INT 1
1318: PLUS
1319: PPUSH
1320: EMPTY
1321: PPUSH
1322: CALL_OW 1
1326: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1327: LD_ADDR_EXP 6
1331: PUSH
1332: LD_EXP 6
1336: PPUSH
1337: LD_EXP 6
1341: PUSH
1342: LD_INT 1
1344: PLUS
1345: PPUSH
1346: EMPTY
1347: PPUSH
1348: CALL_OW 1
1352: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1353: LD_VAR 0 1
1357: PPUSH
1358: CALL_OW 302
1362: NOT
1363: IFFALSE 1376
// begin HackUnlinkAll ( i ) ;
1365: LD_VAR 0 1
1369: PPUSH
1370: CALL 1482 0 1
// continue ;
1374: GO 1256
// end ; HackCheckCapturedStatus ( i ) ;
1376: LD_VAR 0 1
1380: PPUSH
1381: CALL 1925 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1385: LD_ADDR_VAR 0 2
1389: PUSH
1390: LD_INT 81
1392: PUSH
1393: LD_VAR 0 1
1397: PPUSH
1398: CALL_OW 255
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: PUSH
1407: LD_INT 33
1409: PUSH
1410: LD_INT 3
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 91
1419: PUSH
1420: LD_VAR 0 1
1424: PUSH
1425: LD_EXP 5
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 50
1437: PUSH
1438: EMPTY
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: PPUSH
1447: CALL_OW 69
1451: ST_TO_ADDR
// if not tmp then
1452: LD_VAR 0 2
1456: NOT
1457: IFFALSE 1461
// continue ;
1459: GO 1256
// HackLink ( i , tmp ) ;
1461: LD_VAR 0 1
1465: PPUSH
1466: LD_VAR 0 2
1470: PPUSH
1471: CALL 1618 0 2
// end ;
1475: GO 1256
1477: POP
1478: POP
// end ;
1479: PPOPN 2
1481: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1482: LD_INT 0
1484: PPUSH
1485: PPUSH
1486: PPUSH
// if not hack in hackTanks then
1487: LD_VAR 0 1
1491: PUSH
1492: LD_EXP 2
1496: IN
1497: NOT
1498: IFFALSE 1502
// exit ;
1500: GO 1613
// index := GetElementIndex ( hackTanks , hack ) ;
1502: LD_ADDR_VAR 0 4
1506: PUSH
1507: LD_EXP 2
1511: PPUSH
1512: LD_VAR 0 1
1516: PPUSH
1517: CALL 25051 0 2
1521: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1522: LD_EXP 3
1526: PUSH
1527: LD_VAR 0 4
1531: ARRAY
1532: IFFALSE 1613
// begin for i in hackTanksCaptured [ index ] do
1534: LD_ADDR_VAR 0 3
1538: PUSH
1539: LD_EXP 3
1543: PUSH
1544: LD_VAR 0 4
1548: ARRAY
1549: PUSH
1550: FOR_IN
1551: IFFALSE 1577
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1553: LD_VAR 0 3
1557: PUSH
1558: LD_INT 1
1560: ARRAY
1561: PPUSH
1562: LD_VAR 0 3
1566: PUSH
1567: LD_INT 2
1569: ARRAY
1570: PPUSH
1571: CALL_OW 235
1575: GO 1550
1577: POP
1578: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1579: LD_ADDR_EXP 3
1583: PUSH
1584: LD_EXP 3
1588: PPUSH
1589: LD_VAR 0 4
1593: PPUSH
1594: EMPTY
1595: PPUSH
1596: CALL_OW 1
1600: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1601: LD_VAR 0 1
1605: PPUSH
1606: LD_INT 0
1608: PPUSH
1609: CALL_OW 505
// end ; end ;
1613: LD_VAR 0 2
1617: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1618: LD_INT 0
1620: PPUSH
1621: PPUSH
1622: PPUSH
// if not hack in hackTanks or not vehicles then
1623: LD_VAR 0 1
1627: PUSH
1628: LD_EXP 2
1632: IN
1633: NOT
1634: PUSH
1635: LD_VAR 0 2
1639: NOT
1640: OR
1641: IFFALSE 1645
// exit ;
1643: GO 1920
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1645: LD_ADDR_VAR 0 2
1649: PUSH
1650: LD_VAR 0 1
1654: PPUSH
1655: LD_VAR 0 2
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: CALL 25701 0 4
1670: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1671: LD_ADDR_VAR 0 5
1675: PUSH
1676: LD_EXP 2
1680: PPUSH
1681: LD_VAR 0 1
1685: PPUSH
1686: CALL 25051 0 2
1690: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1691: LD_EXP 3
1695: PUSH
1696: LD_VAR 0 5
1700: ARRAY
1701: PUSH
1702: LD_EXP 4
1706: LESS
1707: IFFALSE 1896
// begin for i := 1 to vehicles do
1709: LD_ADDR_VAR 0 4
1713: PUSH
1714: DOUBLE
1715: LD_INT 1
1717: DEC
1718: ST_TO_ADDR
1719: LD_VAR 0 2
1723: PUSH
1724: FOR_TO
1725: IFFALSE 1894
// begin if hackTanksCaptured [ index ] = hackLimit then
1727: LD_EXP 3
1731: PUSH
1732: LD_VAR 0 5
1736: ARRAY
1737: PUSH
1738: LD_EXP 4
1742: EQUAL
1743: IFFALSE 1747
// break ;
1745: GO 1894
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1747: LD_ADDR_EXP 6
1751: PUSH
1752: LD_EXP 6
1756: PPUSH
1757: LD_VAR 0 5
1761: PPUSH
1762: LD_EXP 6
1766: PUSH
1767: LD_VAR 0 5
1771: ARRAY
1772: PUSH
1773: LD_INT 1
1775: PLUS
1776: PPUSH
1777: CALL_OW 1
1781: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1782: LD_ADDR_EXP 3
1786: PUSH
1787: LD_EXP 3
1791: PPUSH
1792: LD_VAR 0 5
1796: PUSH
1797: LD_EXP 3
1801: PUSH
1802: LD_VAR 0 5
1806: ARRAY
1807: PUSH
1808: LD_INT 1
1810: PLUS
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: PPUSH
1816: LD_VAR 0 2
1820: PUSH
1821: LD_VAR 0 4
1825: ARRAY
1826: PUSH
1827: LD_VAR 0 2
1831: PUSH
1832: LD_VAR 0 4
1836: ARRAY
1837: PPUSH
1838: CALL_OW 255
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PPUSH
1847: CALL 25266 0 3
1851: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1852: LD_VAR 0 2
1856: PUSH
1857: LD_VAR 0 4
1861: ARRAY
1862: PPUSH
1863: LD_VAR 0 1
1867: PPUSH
1868: CALL_OW 255
1872: PPUSH
1873: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1877: LD_VAR 0 2
1881: PUSH
1882: LD_VAR 0 4
1886: ARRAY
1887: PPUSH
1888: CALL_OW 141
// end ;
1892: GO 1724
1894: POP
1895: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1896: LD_VAR 0 1
1900: PPUSH
1901: LD_EXP 3
1905: PUSH
1906: LD_VAR 0 5
1910: ARRAY
1911: PUSH
1912: LD_INT 0
1914: PLUS
1915: PPUSH
1916: CALL_OW 505
// end ;
1920: LD_VAR 0 3
1924: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1925: LD_INT 0
1927: PPUSH
1928: PPUSH
1929: PPUSH
1930: PPUSH
// if not hack in hackTanks then
1931: LD_VAR 0 1
1935: PUSH
1936: LD_EXP 2
1940: IN
1941: NOT
1942: IFFALSE 1946
// exit ;
1944: GO 2186
// index := GetElementIndex ( hackTanks , hack ) ;
1946: LD_ADDR_VAR 0 4
1950: PUSH
1951: LD_EXP 2
1955: PPUSH
1956: LD_VAR 0 1
1960: PPUSH
1961: CALL 25051 0 2
1965: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1966: LD_ADDR_VAR 0 3
1970: PUSH
1971: DOUBLE
1972: LD_EXP 3
1976: PUSH
1977: LD_VAR 0 4
1981: ARRAY
1982: INC
1983: ST_TO_ADDR
1984: LD_INT 1
1986: PUSH
1987: FOR_DOWNTO
1988: IFFALSE 2160
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1990: LD_ADDR_VAR 0 5
1994: PUSH
1995: LD_EXP 3
1999: PUSH
2000: LD_VAR 0 4
2004: ARRAY
2005: PUSH
2006: LD_VAR 0 3
2010: ARRAY
2011: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
2012: LD_VAR 0 5
2016: PUSH
2017: LD_INT 1
2019: ARRAY
2020: PPUSH
2021: CALL_OW 302
2025: NOT
2026: PUSH
2027: LD_VAR 0 5
2031: PUSH
2032: LD_INT 1
2034: ARRAY
2035: PPUSH
2036: CALL_OW 255
2040: PUSH
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 255
2050: NONEQUAL
2051: OR
2052: IFFALSE 2158
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
2054: LD_VAR 0 5
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PPUSH
2063: CALL_OW 305
2067: PUSH
2068: LD_VAR 0 5
2072: PUSH
2073: LD_INT 1
2075: ARRAY
2076: PPUSH
2077: CALL_OW 255
2081: PUSH
2082: LD_VAR 0 1
2086: PPUSH
2087: CALL_OW 255
2091: EQUAL
2092: AND
2093: IFFALSE 2117
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
2095: LD_VAR 0 5
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_VAR 0 5
2108: PUSH
2109: LD_INT 2
2111: ARRAY
2112: PPUSH
2113: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
2117: LD_ADDR_EXP 3
2121: PUSH
2122: LD_EXP 3
2126: PPUSH
2127: LD_VAR 0 4
2131: PPUSH
2132: LD_EXP 3
2136: PUSH
2137: LD_VAR 0 4
2141: ARRAY
2142: PPUSH
2143: LD_VAR 0 3
2147: PPUSH
2148: CALL_OW 3
2152: PPUSH
2153: CALL_OW 1
2157: ST_TO_ADDR
// end ; end ;
2158: GO 1987
2160: POP
2161: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
2162: LD_VAR 0 1
2166: PPUSH
2167: LD_EXP 3
2171: PUSH
2172: LD_VAR 0 4
2176: ARRAY
2177: PUSH
2178: LD_INT 0
2180: PLUS
2181: PPUSH
2182: CALL_OW 505
// end ;
2186: LD_VAR 0 2
2190: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
2191: LD_INT 0
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
// if not hack in hackTanks then
2197: LD_VAR 0 1
2201: PUSH
2202: LD_EXP 2
2206: IN
2207: NOT
2208: IFFALSE 2212
// exit ;
2210: GO 2297
// index := GetElementIndex ( hackTanks , hack ) ;
2212: LD_ADDR_VAR 0 5
2216: PUSH
2217: LD_EXP 2
2221: PPUSH
2222: LD_VAR 0 1
2226: PPUSH
2227: CALL 25051 0 2
2231: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
2232: LD_ADDR_VAR 0 4
2236: PUSH
2237: DOUBLE
2238: LD_INT 1
2240: DEC
2241: ST_TO_ADDR
2242: LD_EXP 3
2246: PUSH
2247: LD_VAR 0 5
2251: ARRAY
2252: PUSH
2253: FOR_TO
2254: IFFALSE 2295
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
2256: LD_EXP 3
2260: PUSH
2261: LD_VAR 0 5
2265: ARRAY
2266: PUSH
2267: LD_VAR 0 4
2271: ARRAY
2272: PUSH
2273: LD_INT 1
2275: ARRAY
2276: PUSH
2277: LD_VAR 0 2
2281: EQUAL
2282: IFFALSE 2293
// KillUnit ( vehicle ) ;
2284: LD_VAR 0 2
2288: PPUSH
2289: CALL_OW 66
2293: GO 2253
2295: POP
2296: POP
// end ;
2297: LD_VAR 0 3
2301: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
2302: LD_EXP 7
2306: NOT
2307: IFFALSE 2342
2309: GO 2311
2311: DISABLE
// begin initMiner := true ;
2312: LD_ADDR_EXP 7
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// minersList := [ ] ;
2320: LD_ADDR_EXP 8
2324: PUSH
2325: EMPTY
2326: ST_TO_ADDR
// minerMinesList := [ ] ;
2327: LD_ADDR_EXP 9
2331: PUSH
2332: EMPTY
2333: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2334: LD_ADDR_EXP 10
2338: PUSH
2339: LD_INT 5
2341: ST_TO_ADDR
// end ;
2342: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2343: LD_EXP 7
2347: PUSH
2348: LD_INT 34
2350: PUSH
2351: LD_EXP 18
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PPUSH
2360: CALL_OW 69
2364: AND
2365: IFFALSE 2828
2367: GO 2369
2369: DISABLE
2370: LD_INT 0
2372: PPUSH
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin enable ;
2376: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2377: LD_ADDR_VAR 0 1
2381: PUSH
2382: LD_INT 34
2384: PUSH
2385: LD_EXP 18
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: PUSH
2399: FOR_IN
2400: IFFALSE 2472
// begin if not i in minersList then
2402: LD_VAR 0 1
2406: PUSH
2407: LD_EXP 8
2411: IN
2412: NOT
2413: IFFALSE 2470
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2415: LD_ADDR_EXP 8
2419: PUSH
2420: LD_EXP 8
2424: PPUSH
2425: LD_EXP 8
2429: PUSH
2430: LD_INT 1
2432: PLUS
2433: PPUSH
2434: LD_VAR 0 1
2438: PPUSH
2439: CALL_OW 1
2443: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2444: LD_ADDR_EXP 9
2448: PUSH
2449: LD_EXP 9
2453: PPUSH
2454: LD_EXP 9
2458: PUSH
2459: LD_INT 1
2461: PLUS
2462: PPUSH
2463: EMPTY
2464: PPUSH
2465: CALL_OW 1
2469: ST_TO_ADDR
// end end ;
2470: GO 2399
2472: POP
2473: POP
// for i := minerMinesList downto 1 do
2474: LD_ADDR_VAR 0 1
2478: PUSH
2479: DOUBLE
2480: LD_EXP 9
2484: INC
2485: ST_TO_ADDR
2486: LD_INT 1
2488: PUSH
2489: FOR_DOWNTO
2490: IFFALSE 2826
// begin if IsLive ( minersList [ i ] ) then
2492: LD_EXP 8
2496: PUSH
2497: LD_VAR 0 1
2501: ARRAY
2502: PPUSH
2503: CALL_OW 300
2507: IFFALSE 2535
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2509: LD_EXP 8
2513: PUSH
2514: LD_VAR 0 1
2518: ARRAY
2519: PPUSH
2520: LD_EXP 9
2524: PUSH
2525: LD_VAR 0 1
2529: ARRAY
2530: PPUSH
2531: CALL_OW 505
// if not minerMinesList [ i ] then
2535: LD_EXP 9
2539: PUSH
2540: LD_VAR 0 1
2544: ARRAY
2545: NOT
2546: IFFALSE 2550
// continue ;
2548: GO 2489
// for j := minerMinesList [ i ] downto 1 do
2550: LD_ADDR_VAR 0 2
2554: PUSH
2555: DOUBLE
2556: LD_EXP 9
2560: PUSH
2561: LD_VAR 0 1
2565: ARRAY
2566: INC
2567: ST_TO_ADDR
2568: LD_INT 1
2570: PUSH
2571: FOR_DOWNTO
2572: IFFALSE 2822
// begin side := GetSide ( minersList [ i ] ) ;
2574: LD_ADDR_VAR 0 3
2578: PUSH
2579: LD_EXP 8
2583: PUSH
2584: LD_VAR 0 1
2588: ARRAY
2589: PPUSH
2590: CALL_OW 255
2594: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2595: LD_ADDR_VAR 0 4
2599: PUSH
2600: LD_EXP 9
2604: PUSH
2605: LD_VAR 0 1
2609: ARRAY
2610: PUSH
2611: LD_VAR 0 2
2615: ARRAY
2616: PUSH
2617: LD_INT 1
2619: ARRAY
2620: PPUSH
2621: LD_EXP 9
2625: PUSH
2626: LD_VAR 0 1
2630: ARRAY
2631: PUSH
2632: LD_VAR 0 2
2636: ARRAY
2637: PUSH
2638: LD_INT 2
2640: ARRAY
2641: PPUSH
2642: CALL_OW 428
2646: ST_TO_ADDR
// if not tmp then
2647: LD_VAR 0 4
2651: NOT
2652: IFFALSE 2656
// continue ;
2654: GO 2571
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2656: LD_VAR 0 4
2660: PUSH
2661: LD_INT 81
2663: PUSH
2664: LD_VAR 0 3
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PPUSH
2673: CALL_OW 69
2677: IN
2678: PUSH
2679: LD_EXP 9
2683: PUSH
2684: LD_VAR 0 1
2688: ARRAY
2689: PUSH
2690: LD_VAR 0 2
2694: ARRAY
2695: PUSH
2696: LD_INT 1
2698: ARRAY
2699: PPUSH
2700: LD_EXP 9
2704: PUSH
2705: LD_VAR 0 1
2709: ARRAY
2710: PUSH
2711: LD_VAR 0 2
2715: ARRAY
2716: PUSH
2717: LD_INT 2
2719: ARRAY
2720: PPUSH
2721: CALL_OW 458
2725: AND
2726: IFFALSE 2820
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
2728: LD_EXP 9
2732: PUSH
2733: LD_VAR 0 1
2737: ARRAY
2738: PUSH
2739: LD_VAR 0 2
2743: ARRAY
2744: PUSH
2745: LD_INT 1
2747: ARRAY
2748: PPUSH
2749: LD_EXP 9
2753: PUSH
2754: LD_VAR 0 1
2758: ARRAY
2759: PUSH
2760: LD_VAR 0 2
2764: ARRAY
2765: PUSH
2766: LD_INT 2
2768: ARRAY
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
2779: LD_ADDR_EXP 9
2783: PUSH
2784: LD_EXP 9
2788: PPUSH
2789: LD_VAR 0 1
2793: PPUSH
2794: LD_EXP 9
2798: PUSH
2799: LD_VAR 0 1
2803: ARRAY
2804: PPUSH
2805: LD_VAR 0 2
2809: PPUSH
2810: CALL_OW 3
2814: PPUSH
2815: CALL_OW 1
2819: ST_TO_ADDR
// end ; end ;
2820: GO 2571
2822: POP
2823: POP
// end ;
2824: GO 2489
2826: POP
2827: POP
// end ;
2828: PPOPN 4
2830: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
2831: LD_INT 0
2833: PPUSH
2834: PPUSH
// result := false ;
2835: LD_ADDR_VAR 0 4
2839: PUSH
2840: LD_INT 0
2842: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
2843: LD_VAR 0 1
2847: PPUSH
2848: CALL_OW 264
2852: PUSH
2853: LD_EXP 18
2857: EQUAL
2858: NOT
2859: IFFALSE 2863
// exit ;
2861: GO 3103
// index := GetElementIndex ( minersList , unit ) ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_EXP 8
2872: PPUSH
2873: LD_VAR 0 1
2877: PPUSH
2878: CALL 25051 0 2
2882: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
2883: LD_EXP 9
2887: PUSH
2888: LD_VAR 0 5
2892: ARRAY
2893: PUSH
2894: LD_EXP 10
2898: GREATEREQUAL
2899: IFFALSE 2903
// exit ;
2901: GO 3103
// ComMoveXY ( unit , x , y ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 2
2912: PPUSH
2913: LD_VAR 0 3
2917: PPUSH
2918: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2922: LD_INT 35
2924: PPUSH
2925: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
2929: LD_VAR 0 1
2933: PPUSH
2934: LD_VAR 0 2
2938: PPUSH
2939: LD_VAR 0 3
2943: PPUSH
2944: CALL 56337 0 3
2948: NOT
2949: PUSH
2950: LD_VAR 0 1
2954: PPUSH
2955: CALL_OW 314
2959: AND
2960: IFFALSE 2964
// exit ;
2962: GO 3103
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_VAR 0 3
2973: PPUSH
2974: CALL_OW 428
2978: PUSH
2979: LD_VAR 0 1
2983: EQUAL
2984: PUSH
2985: LD_VAR 0 1
2989: PPUSH
2990: CALL_OW 314
2994: NOT
2995: AND
2996: IFFALSE 2922
// PlaySoundXY ( x , y , PlantMine ) ;
2998: LD_VAR 0 2
3002: PPUSH
3003: LD_VAR 0 3
3007: PPUSH
3008: LD_STRING PlantMine
3010: PPUSH
3011: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
3015: LD_VAR 0 2
3019: PPUSH
3020: LD_VAR 0 3
3024: PPUSH
3025: LD_VAR 0 1
3029: PPUSH
3030: CALL_OW 255
3034: PPUSH
3035: LD_INT 0
3037: PPUSH
3038: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
3042: LD_ADDR_EXP 9
3046: PUSH
3047: LD_EXP 9
3051: PPUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_EXP 9
3061: PUSH
3062: LD_VAR 0 5
3066: ARRAY
3067: PUSH
3068: LD_INT 1
3070: PLUS
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: PPUSH
3076: LD_VAR 0 2
3080: PUSH
3081: LD_VAR 0 3
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL 25266 0 3
3094: ST_TO_ADDR
// result := true ;
3095: LD_ADDR_VAR 0 4
3099: PUSH
3100: LD_INT 1
3102: ST_TO_ADDR
// end ;
3103: LD_VAR 0 4
3107: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
3108: LD_INT 0
3110: PPUSH
3111: PPUSH
3112: PPUSH
// if not unit in minersList then
3113: LD_VAR 0 1
3117: PUSH
3118: LD_EXP 8
3122: IN
3123: NOT
3124: IFFALSE 3128
// exit ;
3126: GO 3520
// index := GetElementIndex ( minersList , unit ) ;
3128: LD_ADDR_VAR 0 6
3132: PUSH
3133: LD_EXP 8
3137: PPUSH
3138: LD_VAR 0 1
3142: PPUSH
3143: CALL 25051 0 2
3147: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
3148: LD_ADDR_VAR 0 5
3152: PUSH
3153: DOUBLE
3154: LD_EXP 9
3158: PUSH
3159: LD_VAR 0 6
3163: ARRAY
3164: INC
3165: ST_TO_ADDR
3166: LD_INT 1
3168: PUSH
3169: FOR_DOWNTO
3170: IFFALSE 3331
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
3172: LD_EXP 9
3176: PUSH
3177: LD_VAR 0 6
3181: ARRAY
3182: PUSH
3183: LD_VAR 0 5
3187: ARRAY
3188: PUSH
3189: LD_INT 1
3191: ARRAY
3192: PUSH
3193: LD_VAR 0 2
3197: EQUAL
3198: PUSH
3199: LD_EXP 9
3203: PUSH
3204: LD_VAR 0 6
3208: ARRAY
3209: PUSH
3210: LD_VAR 0 5
3214: ARRAY
3215: PUSH
3216: LD_INT 2
3218: ARRAY
3219: PUSH
3220: LD_VAR 0 3
3224: EQUAL
3225: AND
3226: IFFALSE 3329
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3228: LD_EXP 9
3232: PUSH
3233: LD_VAR 0 6
3237: ARRAY
3238: PUSH
3239: LD_VAR 0 5
3243: ARRAY
3244: PUSH
3245: LD_INT 1
3247: ARRAY
3248: PPUSH
3249: LD_EXP 9
3253: PUSH
3254: LD_VAR 0 6
3258: ARRAY
3259: PUSH
3260: LD_VAR 0 5
3264: ARRAY
3265: PUSH
3266: LD_INT 2
3268: ARRAY
3269: PPUSH
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 255
3279: PPUSH
3280: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3284: LD_ADDR_EXP 9
3288: PUSH
3289: LD_EXP 9
3293: PPUSH
3294: LD_VAR 0 6
3298: PPUSH
3299: LD_EXP 9
3303: PUSH
3304: LD_VAR 0 6
3308: ARRAY
3309: PPUSH
3310: LD_VAR 0 5
3314: PPUSH
3315: CALL_OW 3
3319: PPUSH
3320: CALL_OW 1
3324: ST_TO_ADDR
// exit ;
3325: POP
3326: POP
3327: GO 3520
// end ; end ;
3329: GO 3169
3331: POP
3332: POP
// for i := minerMinesList [ index ] downto 1 do
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: DOUBLE
3339: LD_EXP 9
3343: PUSH
3344: LD_VAR 0 6
3348: ARRAY
3349: INC
3350: ST_TO_ADDR
3351: LD_INT 1
3353: PUSH
3354: FOR_DOWNTO
3355: IFFALSE 3518
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3357: LD_EXP 9
3361: PUSH
3362: LD_VAR 0 6
3366: ARRAY
3367: PUSH
3368: LD_VAR 0 5
3372: ARRAY
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_EXP 9
3382: PUSH
3383: LD_VAR 0 6
3387: ARRAY
3388: PUSH
3389: LD_VAR 0 5
3393: ARRAY
3394: PUSH
3395: LD_INT 2
3397: ARRAY
3398: PPUSH
3399: LD_VAR 0 2
3403: PPUSH
3404: LD_VAR 0 3
3408: PPUSH
3409: CALL_OW 298
3413: PUSH
3414: LD_INT 6
3416: LESS
3417: IFFALSE 3516
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3419: LD_EXP 9
3423: PUSH
3424: LD_VAR 0 6
3428: ARRAY
3429: PUSH
3430: LD_VAR 0 5
3434: ARRAY
3435: PUSH
3436: LD_INT 1
3438: ARRAY
3439: PPUSH
3440: LD_EXP 9
3444: PUSH
3445: LD_VAR 0 6
3449: ARRAY
3450: PUSH
3451: LD_VAR 0 5
3455: ARRAY
3456: PUSH
3457: LD_INT 2
3459: ARRAY
3460: PPUSH
3461: LD_VAR 0 1
3465: PPUSH
3466: CALL_OW 255
3470: PPUSH
3471: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3475: LD_ADDR_EXP 9
3479: PUSH
3480: LD_EXP 9
3484: PPUSH
3485: LD_VAR 0 6
3489: PPUSH
3490: LD_EXP 9
3494: PUSH
3495: LD_VAR 0 6
3499: ARRAY
3500: PPUSH
3501: LD_VAR 0 5
3505: PPUSH
3506: CALL_OW 3
3510: PPUSH
3511: CALL_OW 1
3515: ST_TO_ADDR
// end ; end ;
3516: GO 3354
3518: POP
3519: POP
// end ;
3520: LD_VAR 0 4
3524: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3525: LD_INT 0
3527: PPUSH
3528: PPUSH
3529: PPUSH
3530: PPUSH
3531: PPUSH
3532: PPUSH
3533: PPUSH
3534: PPUSH
3535: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3536: LD_VAR 0 1
3540: PPUSH
3541: CALL_OW 264
3545: PUSH
3546: LD_EXP 18
3550: EQUAL
3551: NOT
3552: PUSH
3553: LD_VAR 0 1
3557: PUSH
3558: LD_EXP 8
3562: IN
3563: NOT
3564: OR
3565: IFFALSE 3569
// exit ;
3567: GO 3891
// index := GetElementIndex ( minersList , unit ) ;
3569: LD_ADDR_VAR 0 6
3573: PUSH
3574: LD_EXP 8
3578: PPUSH
3579: LD_VAR 0 1
3583: PPUSH
3584: CALL 25051 0 2
3588: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3589: LD_ADDR_VAR 0 8
3593: PUSH
3594: LD_EXP 10
3598: PUSH
3599: LD_EXP 9
3603: PUSH
3604: LD_VAR 0 6
3608: ARRAY
3609: MINUS
3610: ST_TO_ADDR
// if not minesFreeAmount then
3611: LD_VAR 0 8
3615: NOT
3616: IFFALSE 3620
// exit ;
3618: GO 3891
// tmp := [ ] ;
3620: LD_ADDR_VAR 0 7
3624: PUSH
3625: EMPTY
3626: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3627: LD_ADDR_VAR 0 5
3631: PUSH
3632: DOUBLE
3633: LD_INT 1
3635: DEC
3636: ST_TO_ADDR
3637: LD_VAR 0 8
3641: PUSH
3642: FOR_TO
3643: IFFALSE 3838
// begin _d := rand ( 0 , 5 ) ;
3645: LD_ADDR_VAR 0 11
3649: PUSH
3650: LD_INT 0
3652: PPUSH
3653: LD_INT 5
3655: PPUSH
3656: CALL_OW 12
3660: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3661: LD_ADDR_VAR 0 12
3665: PUSH
3666: LD_INT 2
3668: PPUSH
3669: LD_INT 6
3671: PPUSH
3672: CALL_OW 12
3676: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
3677: LD_ADDR_VAR 0 9
3681: PUSH
3682: LD_VAR 0 2
3686: PPUSH
3687: LD_VAR 0 11
3691: PPUSH
3692: LD_VAR 0 12
3696: PPUSH
3697: CALL_OW 272
3701: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
3702: LD_ADDR_VAR 0 10
3706: PUSH
3707: LD_VAR 0 3
3711: PPUSH
3712: LD_VAR 0 11
3716: PPUSH
3717: LD_VAR 0 12
3721: PPUSH
3722: CALL_OW 273
3726: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
3727: LD_VAR 0 9
3731: PPUSH
3732: LD_VAR 0 10
3736: PPUSH
3737: CALL_OW 488
3741: PUSH
3742: LD_VAR 0 9
3746: PUSH
3747: LD_VAR 0 10
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_VAR 0 7
3760: IN
3761: NOT
3762: AND
3763: PUSH
3764: LD_VAR 0 9
3768: PPUSH
3769: LD_VAR 0 10
3773: PPUSH
3774: CALL_OW 458
3778: NOT
3779: AND
3780: IFFALSE 3822
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
3782: LD_ADDR_VAR 0 7
3786: PUSH
3787: LD_VAR 0 7
3791: PPUSH
3792: LD_VAR 0 7
3796: PUSH
3797: LD_INT 1
3799: PLUS
3800: PPUSH
3801: LD_VAR 0 9
3805: PUSH
3806: LD_VAR 0 10
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PPUSH
3815: CALL_OW 1
3819: ST_TO_ADDR
3820: GO 3836
// i := i - 1 ;
3822: LD_ADDR_VAR 0 5
3826: PUSH
3827: LD_VAR 0 5
3831: PUSH
3832: LD_INT 1
3834: MINUS
3835: ST_TO_ADDR
// end ;
3836: GO 3642
3838: POP
3839: POP
// for i in tmp do
3840: LD_ADDR_VAR 0 5
3844: PUSH
3845: LD_VAR 0 7
3849: PUSH
3850: FOR_IN
3851: IFFALSE 3889
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
3853: LD_VAR 0 1
3857: PPUSH
3858: LD_VAR 0 5
3862: PUSH
3863: LD_INT 1
3865: ARRAY
3866: PPUSH
3867: LD_VAR 0 5
3871: PUSH
3872: LD_INT 2
3874: ARRAY
3875: PPUSH
3876: CALL 2831 0 3
3880: NOT
3881: IFFALSE 3887
// exit ;
3883: POP
3884: POP
3885: GO 3891
3887: GO 3850
3889: POP
3890: POP
// end ;
3891: LD_VAR 0 4
3895: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
3896: LD_INT 0
3898: PPUSH
3899: PPUSH
3900: PPUSH
3901: PPUSH
3902: PPUSH
3903: PPUSH
3904: PPUSH
// if not GetClass ( unit ) = class_sniper then
3905: LD_VAR 0 1
3909: PPUSH
3910: CALL_OW 257
3914: PUSH
3915: LD_INT 5
3917: EQUAL
3918: NOT
3919: IFFALSE 3923
// exit ;
3921: GO 4311
// dist := 8 ;
3923: LD_ADDR_VAR 0 5
3927: PUSH
3928: LD_INT 8
3930: ST_TO_ADDR
// viewRange := 12 ;
3931: LD_ADDR_VAR 0 7
3935: PUSH
3936: LD_INT 12
3938: ST_TO_ADDR
// side := GetSide ( unit ) ;
3939: LD_ADDR_VAR 0 6
3943: PUSH
3944: LD_VAR 0 1
3948: PPUSH
3949: CALL_OW 255
3953: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
3954: LD_INT 61
3956: PPUSH
3957: LD_VAR 0 6
3961: PPUSH
3962: CALL_OW 321
3966: PUSH
3967: LD_INT 2
3969: EQUAL
3970: IFFALSE 3980
// viewRange := 16 ;
3972: LD_ADDR_VAR 0 7
3976: PUSH
3977: LD_INT 16
3979: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
3980: LD_VAR 0 1
3984: PPUSH
3985: LD_VAR 0 2
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 297
3999: PUSH
4000: LD_VAR 0 5
4004: GREATER
4005: IFFALSE 4084
// begin ComMoveXY ( unit , x , y ) ;
4007: LD_VAR 0 1
4011: PPUSH
4012: LD_VAR 0 2
4016: PPUSH
4017: LD_VAR 0 3
4021: PPUSH
4022: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4026: LD_INT 35
4028: PPUSH
4029: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
4033: LD_VAR 0 1
4037: PPUSH
4038: LD_VAR 0 2
4042: PPUSH
4043: LD_VAR 0 3
4047: PPUSH
4048: CALL 56337 0 3
4052: NOT
4053: IFFALSE 4057
// exit ;
4055: GO 4311
// until GetDistUnitXY ( unit , x , y ) < dist ;
4057: LD_VAR 0 1
4061: PPUSH
4062: LD_VAR 0 2
4066: PPUSH
4067: LD_VAR 0 3
4071: PPUSH
4072: CALL_OW 297
4076: PUSH
4077: LD_VAR 0 5
4081: LESS
4082: IFFALSE 4026
// end ; ComTurnXY ( unit , x , y ) ;
4084: LD_VAR 0 1
4088: PPUSH
4089: LD_VAR 0 2
4093: PPUSH
4094: LD_VAR 0 3
4098: PPUSH
4099: CALL_OW 118
// wait ( 5 ) ;
4103: LD_INT 5
4105: PPUSH
4106: CALL_OW 67
// _d := GetDir ( unit ) ;
4110: LD_ADDR_VAR 0 10
4114: PUSH
4115: LD_VAR 0 1
4119: PPUSH
4120: CALL_OW 254
4124: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
4125: LD_ADDR_VAR 0 8
4129: PUSH
4130: LD_VAR 0 1
4134: PPUSH
4135: CALL_OW 250
4139: PPUSH
4140: LD_VAR 0 10
4144: PPUSH
4145: LD_VAR 0 5
4149: PPUSH
4150: CALL_OW 272
4154: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
4155: LD_ADDR_VAR 0 9
4159: PUSH
4160: LD_VAR 0 1
4164: PPUSH
4165: CALL_OW 251
4169: PPUSH
4170: LD_VAR 0 10
4174: PPUSH
4175: LD_VAR 0 5
4179: PPUSH
4180: CALL_OW 273
4184: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4185: LD_VAR 0 8
4189: PPUSH
4190: LD_VAR 0 9
4194: PPUSH
4195: CALL_OW 488
4199: NOT
4200: IFFALSE 4204
// exit ;
4202: GO 4311
// ComAnimCustom ( unit , 1 ) ;
4204: LD_VAR 0 1
4208: PPUSH
4209: LD_INT 1
4211: PPUSH
4212: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
4216: LD_VAR 0 8
4220: PPUSH
4221: LD_VAR 0 9
4225: PPUSH
4226: LD_VAR 0 6
4230: PPUSH
4231: LD_VAR 0 7
4235: PPUSH
4236: CALL_OW 330
// repeat wait ( 1 ) ;
4240: LD_INT 1
4242: PPUSH
4243: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
4247: LD_VAR 0 1
4251: PPUSH
4252: CALL_OW 316
4256: PUSH
4257: LD_VAR 0 1
4261: PPUSH
4262: CALL_OW 314
4266: OR
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 302
4277: NOT
4278: OR
4279: PUSH
4280: LD_VAR 0 1
4284: PPUSH
4285: CALL_OW 301
4289: OR
4290: IFFALSE 4240
// RemoveSeeing ( _x , _y , side ) ;
4292: LD_VAR 0 8
4296: PPUSH
4297: LD_VAR 0 9
4301: PPUSH
4302: LD_VAR 0 6
4306: PPUSH
4307: CALL_OW 331
// end ; end_of_file
4311: LD_VAR 0 4
4315: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
4316: LD_INT 0
4318: PPUSH
// ar_miner := 81 ;
4319: LD_ADDR_EXP 18
4323: PUSH
4324: LD_INT 81
4326: ST_TO_ADDR
// ar_crane := 88 ;
4327: LD_ADDR_EXP 17
4331: PUSH
4332: LD_INT 88
4334: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4335: LD_ADDR_EXP 12
4339: PUSH
4340: LD_INT 89
4342: ST_TO_ADDR
// us_hack := 99 ;
4343: LD_ADDR_EXP 13
4347: PUSH
4348: LD_INT 99
4350: ST_TO_ADDR
// us_artillery := 97 ;
4351: LD_ADDR_EXP 14
4355: PUSH
4356: LD_INT 97
4358: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4359: LD_ADDR_EXP 15
4363: PUSH
4364: LD_INT 91
4366: ST_TO_ADDR
// ar_mortar := 92 ;
4367: LD_ADDR_EXP 16
4371: PUSH
4372: LD_INT 92
4374: ST_TO_ADDR
// ru_flamethrower := 93 ;
4375: LD_ADDR_EXP 19
4379: PUSH
4380: LD_INT 93
4382: ST_TO_ADDR
// ru_radar := 98 ;
4383: LD_ADDR_EXP 11
4387: PUSH
4388: LD_INT 98
4390: ST_TO_ADDR
// tech_Artillery := 80 ;
4391: LD_ADDR_EXP 20
4395: PUSH
4396: LD_INT 80
4398: ST_TO_ADDR
// tech_RadMat := 81 ;
4399: LD_ADDR_EXP 21
4403: PUSH
4404: LD_INT 81
4406: ST_TO_ADDR
// tech_BasicTools := 82 ;
4407: LD_ADDR_EXP 22
4411: PUSH
4412: LD_INT 82
4414: ST_TO_ADDR
// tech_Cargo := 83 ;
4415: LD_ADDR_EXP 23
4419: PUSH
4420: LD_INT 83
4422: ST_TO_ADDR
// tech_Track := 84 ;
4423: LD_ADDR_EXP 24
4427: PUSH
4428: LD_INT 84
4430: ST_TO_ADDR
// tech_Crane := 85 ;
4431: LD_ADDR_EXP 25
4435: PUSH
4436: LD_INT 85
4438: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4439: LD_ADDR_EXP 26
4443: PUSH
4444: LD_INT 86
4446: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4447: LD_ADDR_EXP 27
4451: PUSH
4452: LD_INT 87
4454: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4455: LD_ADDR_EXP 28
4459: PUSH
4460: LD_INT 88
4462: ST_TO_ADDR
// end ;
4463: LD_VAR 0 1
4467: RET
// every 1 do
4468: GO 4470
4470: DISABLE
// InitGlobalVariables ; end_of_file
4471: CALL 4316 0 0
4475: END
// every 0 0$1 do
4476: GO 4478
4478: DISABLE
// begin enable ;
4479: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4480: LD_STRING updateTimer(
4482: PUSH
4483: LD_OWVAR 1
4487: STR
4488: PUSH
4489: LD_STRING );
4491: STR
4492: PPUSH
4493: CALL_OW 559
// end ;
4497: END
// export function SOS_MapStart ( ) ; begin
4498: LD_INT 0
4500: PPUSH
// if streamModeActive then
4501: LD_EXP 29
4505: IFFALSE 4514
// DefineStreamItems ( true ) ;
4507: LD_INT 1
4509: PPUSH
4510: CALL 6168 0 1
// UpdateFactoryWaypoints ( ) ;
4514: CALL 19029 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4518: CALL 19286 0 0
// end ;
4522: LD_VAR 0 1
4526: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4527: LD_INT 0
4529: PPUSH
// if p2 = 100 then
4530: LD_VAR 0 2
4534: PUSH
4535: LD_INT 100
4537: EQUAL
4538: IFFALSE 5541
// begin if not StreamModeActive then
4540: LD_EXP 29
4544: NOT
4545: IFFALSE 4555
// StreamModeActive := true ;
4547: LD_ADDR_EXP 29
4551: PUSH
4552: LD_INT 1
4554: ST_TO_ADDR
// if p3 = 0 then
4555: LD_VAR 0 3
4559: PUSH
4560: LD_INT 0
4562: EQUAL
4563: IFFALSE 4569
// InitStreamMode ;
4565: CALL 5704 0 0
// if p3 = 1 then
4569: LD_VAR 0 3
4573: PUSH
4574: LD_INT 1
4576: EQUAL
4577: IFFALSE 4587
// sRocket := true ;
4579: LD_ADDR_EXP 34
4583: PUSH
4584: LD_INT 1
4586: ST_TO_ADDR
// if p3 = 2 then
4587: LD_VAR 0 3
4591: PUSH
4592: LD_INT 2
4594: EQUAL
4595: IFFALSE 4605
// sSpeed := true ;
4597: LD_ADDR_EXP 33
4601: PUSH
4602: LD_INT 1
4604: ST_TO_ADDR
// if p3 = 3 then
4605: LD_VAR 0 3
4609: PUSH
4610: LD_INT 3
4612: EQUAL
4613: IFFALSE 4623
// sEngine := true ;
4615: LD_ADDR_EXP 35
4619: PUSH
4620: LD_INT 1
4622: ST_TO_ADDR
// if p3 = 4 then
4623: LD_VAR 0 3
4627: PUSH
4628: LD_INT 4
4630: EQUAL
4631: IFFALSE 4641
// sSpec := true ;
4633: LD_ADDR_EXP 32
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// if p3 = 5 then
4641: LD_VAR 0 3
4645: PUSH
4646: LD_INT 5
4648: EQUAL
4649: IFFALSE 4659
// sLevel := true ;
4651: LD_ADDR_EXP 36
4655: PUSH
4656: LD_INT 1
4658: ST_TO_ADDR
// if p3 = 6 then
4659: LD_VAR 0 3
4663: PUSH
4664: LD_INT 6
4666: EQUAL
4667: IFFALSE 4677
// sArmoury := true ;
4669: LD_ADDR_EXP 37
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// if p3 = 7 then
4677: LD_VAR 0 3
4681: PUSH
4682: LD_INT 7
4684: EQUAL
4685: IFFALSE 4695
// sRadar := true ;
4687: LD_ADDR_EXP 38
4691: PUSH
4692: LD_INT 1
4694: ST_TO_ADDR
// if p3 = 8 then
4695: LD_VAR 0 3
4699: PUSH
4700: LD_INT 8
4702: EQUAL
4703: IFFALSE 4713
// sBunker := true ;
4705: LD_ADDR_EXP 39
4709: PUSH
4710: LD_INT 1
4712: ST_TO_ADDR
// if p3 = 9 then
4713: LD_VAR 0 3
4717: PUSH
4718: LD_INT 9
4720: EQUAL
4721: IFFALSE 4731
// sHack := true ;
4723: LD_ADDR_EXP 40
4727: PUSH
4728: LD_INT 1
4730: ST_TO_ADDR
// if p3 = 10 then
4731: LD_VAR 0 3
4735: PUSH
4736: LD_INT 10
4738: EQUAL
4739: IFFALSE 4749
// sFire := true ;
4741: LD_ADDR_EXP 41
4745: PUSH
4746: LD_INT 1
4748: ST_TO_ADDR
// if p3 = 11 then
4749: LD_VAR 0 3
4753: PUSH
4754: LD_INT 11
4756: EQUAL
4757: IFFALSE 4767
// sRefresh := true ;
4759: LD_ADDR_EXP 42
4763: PUSH
4764: LD_INT 1
4766: ST_TO_ADDR
// if p3 = 12 then
4767: LD_VAR 0 3
4771: PUSH
4772: LD_INT 12
4774: EQUAL
4775: IFFALSE 4785
// sExp := true ;
4777: LD_ADDR_EXP 43
4781: PUSH
4782: LD_INT 1
4784: ST_TO_ADDR
// if p3 = 13 then
4785: LD_VAR 0 3
4789: PUSH
4790: LD_INT 13
4792: EQUAL
4793: IFFALSE 4803
// sDepot := true ;
4795: LD_ADDR_EXP 44
4799: PUSH
4800: LD_INT 1
4802: ST_TO_ADDR
// if p3 = 14 then
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 14
4810: EQUAL
4811: IFFALSE 4821
// sFlag := true ;
4813: LD_ADDR_EXP 45
4817: PUSH
4818: LD_INT 1
4820: ST_TO_ADDR
// if p3 = 15 then
4821: LD_VAR 0 3
4825: PUSH
4826: LD_INT 15
4828: EQUAL
4829: IFFALSE 4839
// sKamikadze := true ;
4831: LD_ADDR_EXP 53
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// if p3 = 16 then
4839: LD_VAR 0 3
4843: PUSH
4844: LD_INT 16
4846: EQUAL
4847: IFFALSE 4857
// sTroll := true ;
4849: LD_ADDR_EXP 54
4853: PUSH
4854: LD_INT 1
4856: ST_TO_ADDR
// if p3 = 17 then
4857: LD_VAR 0 3
4861: PUSH
4862: LD_INT 17
4864: EQUAL
4865: IFFALSE 4875
// sSlow := true ;
4867: LD_ADDR_EXP 55
4871: PUSH
4872: LD_INT 1
4874: ST_TO_ADDR
// if p3 = 18 then
4875: LD_VAR 0 3
4879: PUSH
4880: LD_INT 18
4882: EQUAL
4883: IFFALSE 4893
// sLack := true ;
4885: LD_ADDR_EXP 56
4889: PUSH
4890: LD_INT 1
4892: ST_TO_ADDR
// if p3 = 19 then
4893: LD_VAR 0 3
4897: PUSH
4898: LD_INT 19
4900: EQUAL
4901: IFFALSE 4911
// sTank := true ;
4903: LD_ADDR_EXP 58
4907: PUSH
4908: LD_INT 1
4910: ST_TO_ADDR
// if p3 = 20 then
4911: LD_VAR 0 3
4915: PUSH
4916: LD_INT 20
4918: EQUAL
4919: IFFALSE 4929
// sRemote := true ;
4921: LD_ADDR_EXP 59
4925: PUSH
4926: LD_INT 1
4928: ST_TO_ADDR
// if p3 = 21 then
4929: LD_VAR 0 3
4933: PUSH
4934: LD_INT 21
4936: EQUAL
4937: IFFALSE 4947
// sPowell := true ;
4939: LD_ADDR_EXP 60
4943: PUSH
4944: LD_INT 1
4946: ST_TO_ADDR
// if p3 = 22 then
4947: LD_VAR 0 3
4951: PUSH
4952: LD_INT 22
4954: EQUAL
4955: IFFALSE 4965
// sTeleport := true ;
4957: LD_ADDR_EXP 63
4961: PUSH
4962: LD_INT 1
4964: ST_TO_ADDR
// if p3 = 23 then
4965: LD_VAR 0 3
4969: PUSH
4970: LD_INT 23
4972: EQUAL
4973: IFFALSE 4983
// sOilTower := true ;
4975: LD_ADDR_EXP 65
4979: PUSH
4980: LD_INT 1
4982: ST_TO_ADDR
// if p3 = 24 then
4983: LD_VAR 0 3
4987: PUSH
4988: LD_INT 24
4990: EQUAL
4991: IFFALSE 5001
// sShovel := true ;
4993: LD_ADDR_EXP 66
4997: PUSH
4998: LD_INT 1
5000: ST_TO_ADDR
// if p3 = 25 then
5001: LD_VAR 0 3
5005: PUSH
5006: LD_INT 25
5008: EQUAL
5009: IFFALSE 5019
// sSheik := true ;
5011: LD_ADDR_EXP 67
5015: PUSH
5016: LD_INT 1
5018: ST_TO_ADDR
// if p3 = 26 then
5019: LD_VAR 0 3
5023: PUSH
5024: LD_INT 26
5026: EQUAL
5027: IFFALSE 5037
// sEarthquake := true ;
5029: LD_ADDR_EXP 69
5033: PUSH
5034: LD_INT 1
5036: ST_TO_ADDR
// if p3 = 27 then
5037: LD_VAR 0 3
5041: PUSH
5042: LD_INT 27
5044: EQUAL
5045: IFFALSE 5055
// sAI := true ;
5047: LD_ADDR_EXP 70
5051: PUSH
5052: LD_INT 1
5054: ST_TO_ADDR
// if p3 = 28 then
5055: LD_VAR 0 3
5059: PUSH
5060: LD_INT 28
5062: EQUAL
5063: IFFALSE 5073
// sCargo := true ;
5065: LD_ADDR_EXP 73
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// if p3 = 29 then
5073: LD_VAR 0 3
5077: PUSH
5078: LD_INT 29
5080: EQUAL
5081: IFFALSE 5091
// sDLaser := true ;
5083: LD_ADDR_EXP 74
5087: PUSH
5088: LD_INT 1
5090: ST_TO_ADDR
// if p3 = 30 then
5091: LD_VAR 0 3
5095: PUSH
5096: LD_INT 30
5098: EQUAL
5099: IFFALSE 5109
// sExchange := true ;
5101: LD_ADDR_EXP 75
5105: PUSH
5106: LD_INT 1
5108: ST_TO_ADDR
// if p3 = 31 then
5109: LD_VAR 0 3
5113: PUSH
5114: LD_INT 31
5116: EQUAL
5117: IFFALSE 5127
// sFac := true ;
5119: LD_ADDR_EXP 76
5123: PUSH
5124: LD_INT 1
5126: ST_TO_ADDR
// if p3 = 32 then
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 32
5134: EQUAL
5135: IFFALSE 5145
// sPower := true ;
5137: LD_ADDR_EXP 77
5141: PUSH
5142: LD_INT 1
5144: ST_TO_ADDR
// if p3 = 33 then
5145: LD_VAR 0 3
5149: PUSH
5150: LD_INT 33
5152: EQUAL
5153: IFFALSE 5163
// sRandom := true ;
5155: LD_ADDR_EXP 78
5159: PUSH
5160: LD_INT 1
5162: ST_TO_ADDR
// if p3 = 34 then
5163: LD_VAR 0 3
5167: PUSH
5168: LD_INT 34
5170: EQUAL
5171: IFFALSE 5181
// sShield := true ;
5173: LD_ADDR_EXP 79
5177: PUSH
5178: LD_INT 1
5180: ST_TO_ADDR
// if p3 = 35 then
5181: LD_VAR 0 3
5185: PUSH
5186: LD_INT 35
5188: EQUAL
5189: IFFALSE 5199
// sTime := true ;
5191: LD_ADDR_EXP 80
5195: PUSH
5196: LD_INT 1
5198: ST_TO_ADDR
// if p3 = 36 then
5199: LD_VAR 0 3
5203: PUSH
5204: LD_INT 36
5206: EQUAL
5207: IFFALSE 5217
// sTools := true ;
5209: LD_ADDR_EXP 81
5213: PUSH
5214: LD_INT 1
5216: ST_TO_ADDR
// if p3 = 101 then
5217: LD_VAR 0 3
5221: PUSH
5222: LD_INT 101
5224: EQUAL
5225: IFFALSE 5235
// sSold := true ;
5227: LD_ADDR_EXP 46
5231: PUSH
5232: LD_INT 1
5234: ST_TO_ADDR
// if p3 = 102 then
5235: LD_VAR 0 3
5239: PUSH
5240: LD_INT 102
5242: EQUAL
5243: IFFALSE 5253
// sDiff := true ;
5245: LD_ADDR_EXP 47
5249: PUSH
5250: LD_INT 1
5252: ST_TO_ADDR
// if p3 = 103 then
5253: LD_VAR 0 3
5257: PUSH
5258: LD_INT 103
5260: EQUAL
5261: IFFALSE 5271
// sFog := true ;
5263: LD_ADDR_EXP 50
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if p3 = 104 then
5271: LD_VAR 0 3
5275: PUSH
5276: LD_INT 104
5278: EQUAL
5279: IFFALSE 5289
// sReset := true ;
5281: LD_ADDR_EXP 51
5285: PUSH
5286: LD_INT 1
5288: ST_TO_ADDR
// if p3 = 105 then
5289: LD_VAR 0 3
5293: PUSH
5294: LD_INT 105
5296: EQUAL
5297: IFFALSE 5307
// sSun := true ;
5299: LD_ADDR_EXP 52
5303: PUSH
5304: LD_INT 1
5306: ST_TO_ADDR
// if p3 = 106 then
5307: LD_VAR 0 3
5311: PUSH
5312: LD_INT 106
5314: EQUAL
5315: IFFALSE 5325
// sTiger := true ;
5317: LD_ADDR_EXP 48
5321: PUSH
5322: LD_INT 1
5324: ST_TO_ADDR
// if p3 = 107 then
5325: LD_VAR 0 3
5329: PUSH
5330: LD_INT 107
5332: EQUAL
5333: IFFALSE 5343
// sBomb := true ;
5335: LD_ADDR_EXP 49
5339: PUSH
5340: LD_INT 1
5342: ST_TO_ADDR
// if p3 = 108 then
5343: LD_VAR 0 3
5347: PUSH
5348: LD_INT 108
5350: EQUAL
5351: IFFALSE 5361
// sWound := true ;
5353: LD_ADDR_EXP 57
5357: PUSH
5358: LD_INT 1
5360: ST_TO_ADDR
// if p3 = 109 then
5361: LD_VAR 0 3
5365: PUSH
5366: LD_INT 109
5368: EQUAL
5369: IFFALSE 5379
// sBetray := true ;
5371: LD_ADDR_EXP 61
5375: PUSH
5376: LD_INT 1
5378: ST_TO_ADDR
// if p3 = 110 then
5379: LD_VAR 0 3
5383: PUSH
5384: LD_INT 110
5386: EQUAL
5387: IFFALSE 5397
// sContamin := true ;
5389: LD_ADDR_EXP 62
5393: PUSH
5394: LD_INT 1
5396: ST_TO_ADDR
// if p3 = 111 then
5397: LD_VAR 0 3
5401: PUSH
5402: LD_INT 111
5404: EQUAL
5405: IFFALSE 5415
// sOil := true ;
5407: LD_ADDR_EXP 64
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// if p3 = 112 then
5415: LD_VAR 0 3
5419: PUSH
5420: LD_INT 112
5422: EQUAL
5423: IFFALSE 5433
// sStu := true ;
5425: LD_ADDR_EXP 68
5429: PUSH
5430: LD_INT 1
5432: ST_TO_ADDR
// if p3 = 113 then
5433: LD_VAR 0 3
5437: PUSH
5438: LD_INT 113
5440: EQUAL
5441: IFFALSE 5451
// sBazooka := true ;
5443: LD_ADDR_EXP 71
5447: PUSH
5448: LD_INT 1
5450: ST_TO_ADDR
// if p3 = 114 then
5451: LD_VAR 0 3
5455: PUSH
5456: LD_INT 114
5458: EQUAL
5459: IFFALSE 5469
// sMortar := true ;
5461: LD_ADDR_EXP 72
5465: PUSH
5466: LD_INT 1
5468: ST_TO_ADDR
// if p3 = 115 then
5469: LD_VAR 0 3
5473: PUSH
5474: LD_INT 115
5476: EQUAL
5477: IFFALSE 5487
// sRanger := true ;
5479: LD_ADDR_EXP 82
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// if p3 = 116 then
5487: LD_VAR 0 3
5491: PUSH
5492: LD_INT 116
5494: EQUAL
5495: IFFALSE 5505
// sComputer := true ;
5497: LD_ADDR_EXP 83
5501: PUSH
5502: LD_INT 1
5504: ST_TO_ADDR
// if p3 = 117 then
5505: LD_VAR 0 3
5509: PUSH
5510: LD_INT 117
5512: EQUAL
5513: IFFALSE 5523
// s30 := true ;
5515: LD_ADDR_EXP 84
5519: PUSH
5520: LD_INT 1
5522: ST_TO_ADDR
// if p3 = 118 then
5523: LD_VAR 0 3
5527: PUSH
5528: LD_INT 118
5530: EQUAL
5531: IFFALSE 5541
// s60 := true ;
5533: LD_ADDR_EXP 85
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
// end ; if p2 = 101 then
5541: LD_VAR 0 2
5545: PUSH
5546: LD_INT 101
5548: EQUAL
5549: IFFALSE 5677
// begin case p3 of 1 :
5551: LD_VAR 0 3
5555: PUSH
5556: LD_INT 1
5558: DOUBLE
5559: EQUAL
5560: IFTRUE 5564
5562: GO 5571
5564: POP
// hHackUnlimitedResources ; 2 :
5565: CALL 17775 0 0
5569: GO 5677
5571: LD_INT 2
5573: DOUBLE
5574: EQUAL
5575: IFTRUE 5579
5577: GO 5586
5579: POP
// hHackSetLevel10 ; 3 :
5580: CALL 17908 0 0
5584: GO 5677
5586: LD_INT 3
5588: DOUBLE
5589: EQUAL
5590: IFTRUE 5594
5592: GO 5601
5594: POP
// hHackSetLevel10YourUnits ; 4 :
5595: CALL 17993 0 0
5599: GO 5677
5601: LD_INT 4
5603: DOUBLE
5604: EQUAL
5605: IFTRUE 5609
5607: GO 5616
5609: POP
// hHackInvincible ; 5 :
5610: CALL 18441 0 0
5614: GO 5677
5616: LD_INT 5
5618: DOUBLE
5619: EQUAL
5620: IFTRUE 5624
5622: GO 5631
5624: POP
// hHackInvisible ; 6 :
5625: CALL 18552 0 0
5629: GO 5677
5631: LD_INT 6
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5639
5637: GO 5646
5639: POP
// hHackChangeYourSide ; 7 :
5640: CALL 18609 0 0
5644: GO 5677
5646: LD_INT 7
5648: DOUBLE
5649: EQUAL
5650: IFTRUE 5654
5652: GO 5661
5654: POP
// hHackChangeUnitSide ; 8 :
5655: CALL 18651 0 0
5659: GO 5677
5661: LD_INT 8
5663: DOUBLE
5664: EQUAL
5665: IFTRUE 5669
5667: GO 5676
5669: POP
// hHackFog ; end ;
5670: CALL 18752 0 0
5674: GO 5677
5676: POP
// end ; end ;
5677: LD_VAR 0 7
5681: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5682: GO 5684
5684: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5685: LD_STRING initStreamRollete();
5687: PPUSH
5688: CALL_OW 559
// InitStreamMode ;
5692: CALL 5704 0 0
// DefineStreamItems ( false ) ;
5696: LD_INT 0
5698: PPUSH
5699: CALL 6168 0 1
// end ;
5703: END
// function InitStreamMode ; begin
5704: LD_INT 0
5706: PPUSH
// streamModeActive := false ;
5707: LD_ADDR_EXP 29
5711: PUSH
5712: LD_INT 0
5714: ST_TO_ADDR
// normalCounter := 36 ;
5715: LD_ADDR_EXP 30
5719: PUSH
5720: LD_INT 36
5722: ST_TO_ADDR
// hardcoreCounter := 18 ;
5723: LD_ADDR_EXP 31
5727: PUSH
5728: LD_INT 18
5730: ST_TO_ADDR
// sRocket := false ;
5731: LD_ADDR_EXP 34
5735: PUSH
5736: LD_INT 0
5738: ST_TO_ADDR
// sSpeed := false ;
5739: LD_ADDR_EXP 33
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// sEngine := false ;
5747: LD_ADDR_EXP 35
5751: PUSH
5752: LD_INT 0
5754: ST_TO_ADDR
// sSpec := false ;
5755: LD_ADDR_EXP 32
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// sLevel := false ;
5763: LD_ADDR_EXP 36
5767: PUSH
5768: LD_INT 0
5770: ST_TO_ADDR
// sArmoury := false ;
5771: LD_ADDR_EXP 37
5775: PUSH
5776: LD_INT 0
5778: ST_TO_ADDR
// sRadar := false ;
5779: LD_ADDR_EXP 38
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// sBunker := false ;
5787: LD_ADDR_EXP 39
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// sHack := false ;
5795: LD_ADDR_EXP 40
5799: PUSH
5800: LD_INT 0
5802: ST_TO_ADDR
// sFire := false ;
5803: LD_ADDR_EXP 41
5807: PUSH
5808: LD_INT 0
5810: ST_TO_ADDR
// sRefresh := false ;
5811: LD_ADDR_EXP 42
5815: PUSH
5816: LD_INT 0
5818: ST_TO_ADDR
// sExp := false ;
5819: LD_ADDR_EXP 43
5823: PUSH
5824: LD_INT 0
5826: ST_TO_ADDR
// sDepot := false ;
5827: LD_ADDR_EXP 44
5831: PUSH
5832: LD_INT 0
5834: ST_TO_ADDR
// sFlag := false ;
5835: LD_ADDR_EXP 45
5839: PUSH
5840: LD_INT 0
5842: ST_TO_ADDR
// sKamikadze := false ;
5843: LD_ADDR_EXP 53
5847: PUSH
5848: LD_INT 0
5850: ST_TO_ADDR
// sTroll := false ;
5851: LD_ADDR_EXP 54
5855: PUSH
5856: LD_INT 0
5858: ST_TO_ADDR
// sSlow := false ;
5859: LD_ADDR_EXP 55
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// sLack := false ;
5867: LD_ADDR_EXP 56
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// sTank := false ;
5875: LD_ADDR_EXP 58
5879: PUSH
5880: LD_INT 0
5882: ST_TO_ADDR
// sRemote := false ;
5883: LD_ADDR_EXP 59
5887: PUSH
5888: LD_INT 0
5890: ST_TO_ADDR
// sPowell := false ;
5891: LD_ADDR_EXP 60
5895: PUSH
5896: LD_INT 0
5898: ST_TO_ADDR
// sTeleport := false ;
5899: LD_ADDR_EXP 63
5903: PUSH
5904: LD_INT 0
5906: ST_TO_ADDR
// sOilTower := false ;
5907: LD_ADDR_EXP 65
5911: PUSH
5912: LD_INT 0
5914: ST_TO_ADDR
// sShovel := false ;
5915: LD_ADDR_EXP 66
5919: PUSH
5920: LD_INT 0
5922: ST_TO_ADDR
// sSheik := false ;
5923: LD_ADDR_EXP 67
5927: PUSH
5928: LD_INT 0
5930: ST_TO_ADDR
// sEarthquake := false ;
5931: LD_ADDR_EXP 69
5935: PUSH
5936: LD_INT 0
5938: ST_TO_ADDR
// sAI := false ;
5939: LD_ADDR_EXP 70
5943: PUSH
5944: LD_INT 0
5946: ST_TO_ADDR
// sCargo := false ;
5947: LD_ADDR_EXP 73
5951: PUSH
5952: LD_INT 0
5954: ST_TO_ADDR
// sDLaser := false ;
5955: LD_ADDR_EXP 74
5959: PUSH
5960: LD_INT 0
5962: ST_TO_ADDR
// sExchange := false ;
5963: LD_ADDR_EXP 75
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// sFac := false ;
5971: LD_ADDR_EXP 76
5975: PUSH
5976: LD_INT 0
5978: ST_TO_ADDR
// sPower := false ;
5979: LD_ADDR_EXP 77
5983: PUSH
5984: LD_INT 0
5986: ST_TO_ADDR
// sRandom := false ;
5987: LD_ADDR_EXP 78
5991: PUSH
5992: LD_INT 0
5994: ST_TO_ADDR
// sShield := false ;
5995: LD_ADDR_EXP 79
5999: PUSH
6000: LD_INT 0
6002: ST_TO_ADDR
// sTime := false ;
6003: LD_ADDR_EXP 80
6007: PUSH
6008: LD_INT 0
6010: ST_TO_ADDR
// sTools := false ;
6011: LD_ADDR_EXP 81
6015: PUSH
6016: LD_INT 0
6018: ST_TO_ADDR
// sSold := false ;
6019: LD_ADDR_EXP 46
6023: PUSH
6024: LD_INT 0
6026: ST_TO_ADDR
// sDiff := false ;
6027: LD_ADDR_EXP 47
6031: PUSH
6032: LD_INT 0
6034: ST_TO_ADDR
// sFog := false ;
6035: LD_ADDR_EXP 50
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// sReset := false ;
6043: LD_ADDR_EXP 51
6047: PUSH
6048: LD_INT 0
6050: ST_TO_ADDR
// sSun := false ;
6051: LD_ADDR_EXP 52
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// sTiger := false ;
6059: LD_ADDR_EXP 48
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// sBomb := false ;
6067: LD_ADDR_EXP 49
6071: PUSH
6072: LD_INT 0
6074: ST_TO_ADDR
// sWound := false ;
6075: LD_ADDR_EXP 57
6079: PUSH
6080: LD_INT 0
6082: ST_TO_ADDR
// sBetray := false ;
6083: LD_ADDR_EXP 61
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// sContamin := false ;
6091: LD_ADDR_EXP 62
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// sOil := false ;
6099: LD_ADDR_EXP 64
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// sStu := false ;
6107: LD_ADDR_EXP 68
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// sBazooka := false ;
6115: LD_ADDR_EXP 71
6119: PUSH
6120: LD_INT 0
6122: ST_TO_ADDR
// sMortar := false ;
6123: LD_ADDR_EXP 72
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// sRanger := false ;
6131: LD_ADDR_EXP 82
6135: PUSH
6136: LD_INT 0
6138: ST_TO_ADDR
// sComputer := false ;
6139: LD_ADDR_EXP 83
6143: PUSH
6144: LD_INT 0
6146: ST_TO_ADDR
// s30 := false ;
6147: LD_ADDR_EXP 84
6151: PUSH
6152: LD_INT 0
6154: ST_TO_ADDR
// s60 := false ;
6155: LD_ADDR_EXP 85
6159: PUSH
6160: LD_INT 0
6162: ST_TO_ADDR
// end ;
6163: LD_VAR 0 1
6167: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6168: LD_INT 0
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
6174: PPUSH
6175: PPUSH
6176: PPUSH
// result := [ ] ;
6177: LD_ADDR_VAR 0 2
6181: PUSH
6182: EMPTY
6183: ST_TO_ADDR
// if campaign_id = 1 then
6184: LD_OWVAR 69
6188: PUSH
6189: LD_INT 1
6191: EQUAL
6192: IFFALSE 9358
// begin case mission_number of 1 :
6194: LD_OWVAR 70
6198: PUSH
6199: LD_INT 1
6201: DOUBLE
6202: EQUAL
6203: IFTRUE 6207
6205: GO 6283
6207: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6208: LD_ADDR_VAR 0 2
6212: PUSH
6213: LD_INT 2
6215: PUSH
6216: LD_INT 4
6218: PUSH
6219: LD_INT 11
6221: PUSH
6222: LD_INT 12
6224: PUSH
6225: LD_INT 15
6227: PUSH
6228: LD_INT 16
6230: PUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 23
6236: PUSH
6237: LD_INT 26
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 101
6253: PUSH
6254: LD_INT 102
6256: PUSH
6257: LD_INT 106
6259: PUSH
6260: LD_INT 116
6262: PUSH
6263: LD_INT 117
6265: PUSH
6266: LD_INT 118
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: ST_TO_ADDR
6281: GO 9356
6283: LD_INT 2
6285: DOUBLE
6286: EQUAL
6287: IFTRUE 6291
6289: GO 6375
6291: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6292: LD_ADDR_VAR 0 2
6296: PUSH
6297: LD_INT 2
6299: PUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 11
6305: PUSH
6306: LD_INT 12
6308: PUSH
6309: LD_INT 15
6311: PUSH
6312: LD_INT 16
6314: PUSH
6315: LD_INT 22
6317: PUSH
6318: LD_INT 23
6320: PUSH
6321: LD_INT 26
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 101
6337: PUSH
6338: LD_INT 102
6340: PUSH
6341: LD_INT 105
6343: PUSH
6344: LD_INT 106
6346: PUSH
6347: LD_INT 108
6349: PUSH
6350: LD_INT 116
6352: PUSH
6353: LD_INT 117
6355: PUSH
6356: LD_INT 118
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: ST_TO_ADDR
6373: GO 9356
6375: LD_INT 3
6377: DOUBLE
6378: EQUAL
6379: IFTRUE 6383
6381: GO 6471
6383: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: LD_INT 4
6394: PUSH
6395: LD_INT 5
6397: PUSH
6398: LD_INT 11
6400: PUSH
6401: LD_INT 12
6403: PUSH
6404: LD_INT 15
6406: PUSH
6407: LD_INT 16
6409: PUSH
6410: LD_INT 22
6412: PUSH
6413: LD_INT 26
6415: PUSH
6416: LD_INT 36
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 101
6433: PUSH
6434: LD_INT 102
6436: PUSH
6437: LD_INT 105
6439: PUSH
6440: LD_INT 106
6442: PUSH
6443: LD_INT 108
6445: PUSH
6446: LD_INT 116
6448: PUSH
6449: LD_INT 117
6451: PUSH
6452: LD_INT 118
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: ST_TO_ADDR
6469: GO 9356
6471: LD_INT 4
6473: DOUBLE
6474: EQUAL
6475: IFTRUE 6479
6477: GO 6575
6479: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6480: LD_ADDR_VAR 0 2
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: LD_INT 4
6490: PUSH
6491: LD_INT 5
6493: PUSH
6494: LD_INT 8
6496: PUSH
6497: LD_INT 11
6499: PUSH
6500: LD_INT 12
6502: PUSH
6503: LD_INT 15
6505: PUSH
6506: LD_INT 16
6508: PUSH
6509: LD_INT 22
6511: PUSH
6512: LD_INT 23
6514: PUSH
6515: LD_INT 26
6517: PUSH
6518: LD_INT 36
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: PUSH
6535: LD_INT 101
6537: PUSH
6538: LD_INT 102
6540: PUSH
6541: LD_INT 105
6543: PUSH
6544: LD_INT 106
6546: PUSH
6547: LD_INT 108
6549: PUSH
6550: LD_INT 116
6552: PUSH
6553: LD_INT 117
6555: PUSH
6556: LD_INT 118
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: ST_TO_ADDR
6573: GO 9356
6575: LD_INT 5
6577: DOUBLE
6578: EQUAL
6579: IFTRUE 6583
6581: GO 6695
6583: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6584: LD_ADDR_VAR 0 2
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 4
6594: PUSH
6595: LD_INT 5
6597: PUSH
6598: LD_INT 6
6600: PUSH
6601: LD_INT 8
6603: PUSH
6604: LD_INT 11
6606: PUSH
6607: LD_INT 12
6609: PUSH
6610: LD_INT 15
6612: PUSH
6613: LD_INT 16
6615: PUSH
6616: LD_INT 22
6618: PUSH
6619: LD_INT 23
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 26
6627: PUSH
6628: LD_INT 36
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 101
6649: PUSH
6650: LD_INT 102
6652: PUSH
6653: LD_INT 105
6655: PUSH
6656: LD_INT 106
6658: PUSH
6659: LD_INT 108
6661: PUSH
6662: LD_INT 109
6664: PUSH
6665: LD_INT 112
6667: PUSH
6668: LD_INT 116
6670: PUSH
6671: LD_INT 117
6673: PUSH
6674: LD_INT 118
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: ST_TO_ADDR
6693: GO 9356
6695: LD_INT 6
6697: DOUBLE
6698: EQUAL
6699: IFTRUE 6703
6701: GO 6835
6703: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6704: LD_ADDR_VAR 0 2
6708: PUSH
6709: LD_INT 2
6711: PUSH
6712: LD_INT 4
6714: PUSH
6715: LD_INT 5
6717: PUSH
6718: LD_INT 6
6720: PUSH
6721: LD_INT 8
6723: PUSH
6724: LD_INT 11
6726: PUSH
6727: LD_INT 12
6729: PUSH
6730: LD_INT 15
6732: PUSH
6733: LD_INT 16
6735: PUSH
6736: LD_INT 20
6738: PUSH
6739: LD_INT 21
6741: PUSH
6742: LD_INT 22
6744: PUSH
6745: LD_INT 23
6747: PUSH
6748: LD_INT 25
6750: PUSH
6751: LD_INT 26
6753: PUSH
6754: LD_INT 30
6756: PUSH
6757: LD_INT 31
6759: PUSH
6760: LD_INT 32
6762: PUSH
6763: LD_INT 36
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 101
6789: PUSH
6790: LD_INT 102
6792: PUSH
6793: LD_INT 105
6795: PUSH
6796: LD_INT 106
6798: PUSH
6799: LD_INT 108
6801: PUSH
6802: LD_INT 109
6804: PUSH
6805: LD_INT 112
6807: PUSH
6808: LD_INT 116
6810: PUSH
6811: LD_INT 117
6813: PUSH
6814: LD_INT 118
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: ST_TO_ADDR
6833: GO 9356
6835: LD_INT 7
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 6955
6843: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6844: LD_ADDR_VAR 0 2
6848: PUSH
6849: LD_INT 2
6851: PUSH
6852: LD_INT 4
6854: PUSH
6855: LD_INT 5
6857: PUSH
6858: LD_INT 7
6860: PUSH
6861: LD_INT 11
6863: PUSH
6864: LD_INT 12
6866: PUSH
6867: LD_INT 15
6869: PUSH
6870: LD_INT 16
6872: PUSH
6873: LD_INT 20
6875: PUSH
6876: LD_INT 21
6878: PUSH
6879: LD_INT 22
6881: PUSH
6882: LD_INT 23
6884: PUSH
6885: LD_INT 25
6887: PUSH
6888: LD_INT 26
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 101
6909: PUSH
6910: LD_INT 102
6912: PUSH
6913: LD_INT 103
6915: PUSH
6916: LD_INT 105
6918: PUSH
6919: LD_INT 106
6921: PUSH
6922: LD_INT 108
6924: PUSH
6925: LD_INT 112
6927: PUSH
6928: LD_INT 116
6930: PUSH
6931: LD_INT 117
6933: PUSH
6934: LD_INT 118
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: ST_TO_ADDR
6953: GO 9356
6955: LD_INT 8
6957: DOUBLE
6958: EQUAL
6959: IFTRUE 6963
6961: GO 7103
6963: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 4
6974: PUSH
6975: LD_INT 5
6977: PUSH
6978: LD_INT 6
6980: PUSH
6981: LD_INT 7
6983: PUSH
6984: LD_INT 8
6986: PUSH
6987: LD_INT 11
6989: PUSH
6990: LD_INT 12
6992: PUSH
6993: LD_INT 15
6995: PUSH
6996: LD_INT 16
6998: PUSH
6999: LD_INT 20
7001: PUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_INT 23
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 26
7016: PUSH
7017: LD_INT 30
7019: PUSH
7020: LD_INT 31
7022: PUSH
7023: LD_INT 32
7025: PUSH
7026: LD_INT 36
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 101
7053: PUSH
7054: LD_INT 102
7056: PUSH
7057: LD_INT 103
7059: PUSH
7060: LD_INT 105
7062: PUSH
7063: LD_INT 106
7065: PUSH
7066: LD_INT 108
7068: PUSH
7069: LD_INT 109
7071: PUSH
7072: LD_INT 112
7074: PUSH
7075: LD_INT 116
7077: PUSH
7078: LD_INT 117
7080: PUSH
7081: LD_INT 118
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 9356
7103: LD_INT 9
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7259
7111: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7112: LD_ADDR_VAR 0 2
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 4
7122: PUSH
7123: LD_INT 5
7125: PUSH
7126: LD_INT 6
7128: PUSH
7129: LD_INT 7
7131: PUSH
7132: LD_INT 8
7134: PUSH
7135: LD_INT 11
7137: PUSH
7138: LD_INT 12
7140: PUSH
7141: LD_INT 15
7143: PUSH
7144: LD_INT 16
7146: PUSH
7147: LD_INT 20
7149: PUSH
7150: LD_INT 21
7152: PUSH
7153: LD_INT 22
7155: PUSH
7156: LD_INT 23
7158: PUSH
7159: LD_INT 25
7161: PUSH
7162: LD_INT 26
7164: PUSH
7165: LD_INT 28
7167: PUSH
7168: LD_INT 30
7170: PUSH
7171: LD_INT 31
7173: PUSH
7174: LD_INT 32
7176: PUSH
7177: LD_INT 36
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 101
7205: PUSH
7206: LD_INT 102
7208: PUSH
7209: LD_INT 103
7211: PUSH
7212: LD_INT 105
7214: PUSH
7215: LD_INT 106
7217: PUSH
7218: LD_INT 108
7220: PUSH
7221: LD_INT 109
7223: PUSH
7224: LD_INT 112
7226: PUSH
7227: LD_INT 114
7229: PUSH
7230: LD_INT 116
7232: PUSH
7233: LD_INT 117
7235: PUSH
7236: LD_INT 118
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: ST_TO_ADDR
7257: GO 9356
7259: LD_INT 10
7261: DOUBLE
7262: EQUAL
7263: IFTRUE 7267
7265: GO 7463
7267: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7268: LD_ADDR_VAR 0 2
7272: PUSH
7273: LD_INT 2
7275: PUSH
7276: LD_INT 4
7278: PUSH
7279: LD_INT 5
7281: PUSH
7282: LD_INT 6
7284: PUSH
7285: LD_INT 7
7287: PUSH
7288: LD_INT 8
7290: PUSH
7291: LD_INT 9
7293: PUSH
7294: LD_INT 10
7296: PUSH
7297: LD_INT 11
7299: PUSH
7300: LD_INT 12
7302: PUSH
7303: LD_INT 13
7305: PUSH
7306: LD_INT 14
7308: PUSH
7309: LD_INT 15
7311: PUSH
7312: LD_INT 16
7314: PUSH
7315: LD_INT 17
7317: PUSH
7318: LD_INT 18
7320: PUSH
7321: LD_INT 19
7323: PUSH
7324: LD_INT 20
7326: PUSH
7327: LD_INT 21
7329: PUSH
7330: LD_INT 22
7332: PUSH
7333: LD_INT 23
7335: PUSH
7336: LD_INT 24
7338: PUSH
7339: LD_INT 25
7341: PUSH
7342: LD_INT 26
7344: PUSH
7345: LD_INT 28
7347: PUSH
7348: LD_INT 30
7350: PUSH
7351: LD_INT 31
7353: PUSH
7354: LD_INT 32
7356: PUSH
7357: LD_INT 36
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 101
7393: PUSH
7394: LD_INT 102
7396: PUSH
7397: LD_INT 103
7399: PUSH
7400: LD_INT 104
7402: PUSH
7403: LD_INT 105
7405: PUSH
7406: LD_INT 106
7408: PUSH
7409: LD_INT 107
7411: PUSH
7412: LD_INT 108
7414: PUSH
7415: LD_INT 109
7417: PUSH
7418: LD_INT 110
7420: PUSH
7421: LD_INT 111
7423: PUSH
7424: LD_INT 112
7426: PUSH
7427: LD_INT 114
7429: PUSH
7430: LD_INT 116
7432: PUSH
7433: LD_INT 117
7435: PUSH
7436: LD_INT 118
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: ST_TO_ADDR
7461: GO 9356
7463: LD_INT 11
7465: DOUBLE
7466: EQUAL
7467: IFTRUE 7471
7469: GO 7675
7471: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7472: LD_ADDR_VAR 0 2
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 4
7485: PUSH
7486: LD_INT 5
7488: PUSH
7489: LD_INT 6
7491: PUSH
7492: LD_INT 7
7494: PUSH
7495: LD_INT 8
7497: PUSH
7498: LD_INT 9
7500: PUSH
7501: LD_INT 10
7503: PUSH
7504: LD_INT 11
7506: PUSH
7507: LD_INT 12
7509: PUSH
7510: LD_INT 13
7512: PUSH
7513: LD_INT 14
7515: PUSH
7516: LD_INT 15
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: LD_INT 17
7524: PUSH
7525: LD_INT 18
7527: PUSH
7528: LD_INT 19
7530: PUSH
7531: LD_INT 20
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 23
7542: PUSH
7543: LD_INT 24
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 26
7551: PUSH
7552: LD_INT 28
7554: PUSH
7555: LD_INT 30
7557: PUSH
7558: LD_INT 31
7560: PUSH
7561: LD_INT 32
7563: PUSH
7564: LD_INT 34
7566: PUSH
7567: LD_INT 36
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 101
7605: PUSH
7606: LD_INT 102
7608: PUSH
7609: LD_INT 103
7611: PUSH
7612: LD_INT 104
7614: PUSH
7615: LD_INT 105
7617: PUSH
7618: LD_INT 106
7620: PUSH
7621: LD_INT 107
7623: PUSH
7624: LD_INT 108
7626: PUSH
7627: LD_INT 109
7629: PUSH
7630: LD_INT 110
7632: PUSH
7633: LD_INT 111
7635: PUSH
7636: LD_INT 112
7638: PUSH
7639: LD_INT 114
7641: PUSH
7642: LD_INT 116
7644: PUSH
7645: LD_INT 117
7647: PUSH
7648: LD_INT 118
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: ST_TO_ADDR
7673: GO 9356
7675: LD_INT 12
7677: DOUBLE
7678: EQUAL
7679: IFTRUE 7683
7681: GO 7903
7683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7684: LD_ADDR_VAR 0 2
7688: PUSH
7689: LD_INT 1
7691: PUSH
7692: LD_INT 2
7694: PUSH
7695: LD_INT 3
7697: PUSH
7698: LD_INT 4
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: LD_INT 6
7706: PUSH
7707: LD_INT 7
7709: PUSH
7710: LD_INT 8
7712: PUSH
7713: LD_INT 9
7715: PUSH
7716: LD_INT 10
7718: PUSH
7719: LD_INT 11
7721: PUSH
7722: LD_INT 12
7724: PUSH
7725: LD_INT 13
7727: PUSH
7728: LD_INT 14
7730: PUSH
7731: LD_INT 15
7733: PUSH
7734: LD_INT 16
7736: PUSH
7737: LD_INT 17
7739: PUSH
7740: LD_INT 18
7742: PUSH
7743: LD_INT 19
7745: PUSH
7746: LD_INT 20
7748: PUSH
7749: LD_INT 21
7751: PUSH
7752: LD_INT 22
7754: PUSH
7755: LD_INT 23
7757: PUSH
7758: LD_INT 24
7760: PUSH
7761: LD_INT 25
7763: PUSH
7764: LD_INT 26
7766: PUSH
7767: LD_INT 27
7769: PUSH
7770: LD_INT 28
7772: PUSH
7773: LD_INT 30
7775: PUSH
7776: LD_INT 31
7778: PUSH
7779: LD_INT 32
7781: PUSH
7782: LD_INT 33
7784: PUSH
7785: LD_INT 34
7787: PUSH
7788: LD_INT 36
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 101
7829: PUSH
7830: LD_INT 102
7832: PUSH
7833: LD_INT 103
7835: PUSH
7836: LD_INT 104
7838: PUSH
7839: LD_INT 105
7841: PUSH
7842: LD_INT 106
7844: PUSH
7845: LD_INT 107
7847: PUSH
7848: LD_INT 108
7850: PUSH
7851: LD_INT 109
7853: PUSH
7854: LD_INT 110
7856: PUSH
7857: LD_INT 111
7859: PUSH
7860: LD_INT 112
7862: PUSH
7863: LD_INT 113
7865: PUSH
7866: LD_INT 114
7868: PUSH
7869: LD_INT 116
7871: PUSH
7872: LD_INT 117
7874: PUSH
7875: LD_INT 118
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: ST_TO_ADDR
7901: GO 9356
7903: LD_INT 13
7905: DOUBLE
7906: EQUAL
7907: IFTRUE 7911
7909: GO 8119
7911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7912: LD_ADDR_VAR 0 2
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: LD_INT 2
7922: PUSH
7923: LD_INT 3
7925: PUSH
7926: LD_INT 4
7928: PUSH
7929: LD_INT 5
7931: PUSH
7932: LD_INT 8
7934: PUSH
7935: LD_INT 9
7937: PUSH
7938: LD_INT 10
7940: PUSH
7941: LD_INT 11
7943: PUSH
7944: LD_INT 12
7946: PUSH
7947: LD_INT 14
7949: PUSH
7950: LD_INT 15
7952: PUSH
7953: LD_INT 16
7955: PUSH
7956: LD_INT 17
7958: PUSH
7959: LD_INT 18
7961: PUSH
7962: LD_INT 19
7964: PUSH
7965: LD_INT 20
7967: PUSH
7968: LD_INT 21
7970: PUSH
7971: LD_INT 22
7973: PUSH
7974: LD_INT 23
7976: PUSH
7977: LD_INT 24
7979: PUSH
7980: LD_INT 25
7982: PUSH
7983: LD_INT 26
7985: PUSH
7986: LD_INT 27
7988: PUSH
7989: LD_INT 28
7991: PUSH
7992: LD_INT 30
7994: PUSH
7995: LD_INT 31
7997: PUSH
7998: LD_INT 32
8000: PUSH
8001: LD_INT 33
8003: PUSH
8004: LD_INT 34
8006: PUSH
8007: LD_INT 36
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 101
8045: PUSH
8046: LD_INT 102
8048: PUSH
8049: LD_INT 103
8051: PUSH
8052: LD_INT 104
8054: PUSH
8055: LD_INT 105
8057: PUSH
8058: LD_INT 106
8060: PUSH
8061: LD_INT 107
8063: PUSH
8064: LD_INT 108
8066: PUSH
8067: LD_INT 109
8069: PUSH
8070: LD_INT 110
8072: PUSH
8073: LD_INT 111
8075: PUSH
8076: LD_INT 112
8078: PUSH
8079: LD_INT 113
8081: PUSH
8082: LD_INT 114
8084: PUSH
8085: LD_INT 116
8087: PUSH
8088: LD_INT 117
8090: PUSH
8091: LD_INT 118
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: ST_TO_ADDR
8117: GO 9356
8119: LD_INT 14
8121: DOUBLE
8122: EQUAL
8123: IFTRUE 8127
8125: GO 8351
8127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_INT 1
8135: PUSH
8136: LD_INT 2
8138: PUSH
8139: LD_INT 3
8141: PUSH
8142: LD_INT 4
8144: PUSH
8145: LD_INT 5
8147: PUSH
8148: LD_INT 6
8150: PUSH
8151: LD_INT 7
8153: PUSH
8154: LD_INT 8
8156: PUSH
8157: LD_INT 9
8159: PUSH
8160: LD_INT 10
8162: PUSH
8163: LD_INT 11
8165: PUSH
8166: LD_INT 12
8168: PUSH
8169: LD_INT 13
8171: PUSH
8172: LD_INT 14
8174: PUSH
8175: LD_INT 15
8177: PUSH
8178: LD_INT 16
8180: PUSH
8181: LD_INT 17
8183: PUSH
8184: LD_INT 18
8186: PUSH
8187: LD_INT 19
8189: PUSH
8190: LD_INT 20
8192: PUSH
8193: LD_INT 21
8195: PUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 23
8201: PUSH
8202: LD_INT 24
8204: PUSH
8205: LD_INT 25
8207: PUSH
8208: LD_INT 26
8210: PUSH
8211: LD_INT 27
8213: PUSH
8214: LD_INT 28
8216: PUSH
8217: LD_INT 29
8219: PUSH
8220: LD_INT 30
8222: PUSH
8223: LD_INT 31
8225: PUSH
8226: LD_INT 32
8228: PUSH
8229: LD_INT 33
8231: PUSH
8232: LD_INT 34
8234: PUSH
8235: LD_INT 36
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 101
8277: PUSH
8278: LD_INT 102
8280: PUSH
8281: LD_INT 103
8283: PUSH
8284: LD_INT 104
8286: PUSH
8287: LD_INT 105
8289: PUSH
8290: LD_INT 106
8292: PUSH
8293: LD_INT 107
8295: PUSH
8296: LD_INT 108
8298: PUSH
8299: LD_INT 109
8301: PUSH
8302: LD_INT 110
8304: PUSH
8305: LD_INT 111
8307: PUSH
8308: LD_INT 112
8310: PUSH
8311: LD_INT 113
8313: PUSH
8314: LD_INT 114
8316: PUSH
8317: LD_INT 116
8319: PUSH
8320: LD_INT 117
8322: PUSH
8323: LD_INT 118
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: ST_TO_ADDR
8349: GO 9356
8351: LD_INT 15
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8583
8359: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8360: LD_ADDR_VAR 0 2
8364: PUSH
8365: LD_INT 1
8367: PUSH
8368: LD_INT 2
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: LD_INT 4
8376: PUSH
8377: LD_INT 5
8379: PUSH
8380: LD_INT 6
8382: PUSH
8383: LD_INT 7
8385: PUSH
8386: LD_INT 8
8388: PUSH
8389: LD_INT 9
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 11
8397: PUSH
8398: LD_INT 12
8400: PUSH
8401: LD_INT 13
8403: PUSH
8404: LD_INT 14
8406: PUSH
8407: LD_INT 15
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: LD_INT 17
8415: PUSH
8416: LD_INT 18
8418: PUSH
8419: LD_INT 19
8421: PUSH
8422: LD_INT 20
8424: PUSH
8425: LD_INT 21
8427: PUSH
8428: LD_INT 22
8430: PUSH
8431: LD_INT 23
8433: PUSH
8434: LD_INT 24
8436: PUSH
8437: LD_INT 25
8439: PUSH
8440: LD_INT 26
8442: PUSH
8443: LD_INT 27
8445: PUSH
8446: LD_INT 28
8448: PUSH
8449: LD_INT 29
8451: PUSH
8452: LD_INT 30
8454: PUSH
8455: LD_INT 31
8457: PUSH
8458: LD_INT 32
8460: PUSH
8461: LD_INT 33
8463: PUSH
8464: LD_INT 34
8466: PUSH
8467: LD_INT 36
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 101
8509: PUSH
8510: LD_INT 102
8512: PUSH
8513: LD_INT 103
8515: PUSH
8516: LD_INT 104
8518: PUSH
8519: LD_INT 105
8521: PUSH
8522: LD_INT 106
8524: PUSH
8525: LD_INT 107
8527: PUSH
8528: LD_INT 108
8530: PUSH
8531: LD_INT 109
8533: PUSH
8534: LD_INT 110
8536: PUSH
8537: LD_INT 111
8539: PUSH
8540: LD_INT 112
8542: PUSH
8543: LD_INT 113
8545: PUSH
8546: LD_INT 114
8548: PUSH
8549: LD_INT 116
8551: PUSH
8552: LD_INT 117
8554: PUSH
8555: LD_INT 118
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: ST_TO_ADDR
8581: GO 9356
8583: LD_INT 16
8585: DOUBLE
8586: EQUAL
8587: IFTRUE 8591
8589: GO 8727
8591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8592: LD_ADDR_VAR 0 2
8596: PUSH
8597: LD_INT 2
8599: PUSH
8600: LD_INT 4
8602: PUSH
8603: LD_INT 5
8605: PUSH
8606: LD_INT 7
8608: PUSH
8609: LD_INT 11
8611: PUSH
8612: LD_INT 12
8614: PUSH
8615: LD_INT 15
8617: PUSH
8618: LD_INT 16
8620: PUSH
8621: LD_INT 20
8623: PUSH
8624: LD_INT 21
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_INT 23
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: LD_INT 26
8638: PUSH
8639: LD_INT 30
8641: PUSH
8642: LD_INT 31
8644: PUSH
8645: LD_INT 32
8647: PUSH
8648: LD_INT 33
8650: PUSH
8651: LD_INT 34
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 101
8677: PUSH
8678: LD_INT 102
8680: PUSH
8681: LD_INT 103
8683: PUSH
8684: LD_INT 106
8686: PUSH
8687: LD_INT 108
8689: PUSH
8690: LD_INT 112
8692: PUSH
8693: LD_INT 113
8695: PUSH
8696: LD_INT 114
8698: PUSH
8699: LD_INT 116
8701: PUSH
8702: LD_INT 117
8704: PUSH
8705: LD_INT 118
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: ST_TO_ADDR
8725: GO 9356
8727: LD_INT 17
8729: DOUBLE
8730: EQUAL
8731: IFTRUE 8735
8733: GO 8959
8735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8736: LD_ADDR_VAR 0 2
8740: PUSH
8741: LD_INT 1
8743: PUSH
8744: LD_INT 2
8746: PUSH
8747: LD_INT 3
8749: PUSH
8750: LD_INT 4
8752: PUSH
8753: LD_INT 5
8755: PUSH
8756: LD_INT 6
8758: PUSH
8759: LD_INT 7
8761: PUSH
8762: LD_INT 8
8764: PUSH
8765: LD_INT 9
8767: PUSH
8768: LD_INT 10
8770: PUSH
8771: LD_INT 11
8773: PUSH
8774: LD_INT 12
8776: PUSH
8777: LD_INT 13
8779: PUSH
8780: LD_INT 14
8782: PUSH
8783: LD_INT 15
8785: PUSH
8786: LD_INT 16
8788: PUSH
8789: LD_INT 17
8791: PUSH
8792: LD_INT 18
8794: PUSH
8795: LD_INT 19
8797: PUSH
8798: LD_INT 20
8800: PUSH
8801: LD_INT 21
8803: PUSH
8804: LD_INT 22
8806: PUSH
8807: LD_INT 23
8809: PUSH
8810: LD_INT 24
8812: PUSH
8813: LD_INT 25
8815: PUSH
8816: LD_INT 26
8818: PUSH
8819: LD_INT 27
8821: PUSH
8822: LD_INT 28
8824: PUSH
8825: LD_INT 29
8827: PUSH
8828: LD_INT 30
8830: PUSH
8831: LD_INT 31
8833: PUSH
8834: LD_INT 32
8836: PUSH
8837: LD_INT 33
8839: PUSH
8840: LD_INT 34
8842: PUSH
8843: LD_INT 36
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 101
8885: PUSH
8886: LD_INT 102
8888: PUSH
8889: LD_INT 103
8891: PUSH
8892: LD_INT 104
8894: PUSH
8895: LD_INT 105
8897: PUSH
8898: LD_INT 106
8900: PUSH
8901: LD_INT 107
8903: PUSH
8904: LD_INT 108
8906: PUSH
8907: LD_INT 109
8909: PUSH
8910: LD_INT 110
8912: PUSH
8913: LD_INT 111
8915: PUSH
8916: LD_INT 112
8918: PUSH
8919: LD_INT 113
8921: PUSH
8922: LD_INT 114
8924: PUSH
8925: LD_INT 116
8927: PUSH
8928: LD_INT 117
8930: PUSH
8931: LD_INT 118
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: ST_TO_ADDR
8957: GO 9356
8959: LD_INT 18
8961: DOUBLE
8962: EQUAL
8963: IFTRUE 8967
8965: GO 9115
8967: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8968: LD_ADDR_VAR 0 2
8972: PUSH
8973: LD_INT 2
8975: PUSH
8976: LD_INT 4
8978: PUSH
8979: LD_INT 5
8981: PUSH
8982: LD_INT 7
8984: PUSH
8985: LD_INT 11
8987: PUSH
8988: LD_INT 12
8990: PUSH
8991: LD_INT 15
8993: PUSH
8994: LD_INT 16
8996: PUSH
8997: LD_INT 20
8999: PUSH
9000: LD_INT 21
9002: PUSH
9003: LD_INT 22
9005: PUSH
9006: LD_INT 23
9008: PUSH
9009: LD_INT 25
9011: PUSH
9012: LD_INT 26
9014: PUSH
9015: LD_INT 30
9017: PUSH
9018: LD_INT 31
9020: PUSH
9021: LD_INT 32
9023: PUSH
9024: LD_INT 33
9026: PUSH
9027: LD_INT 34
9029: PUSH
9030: LD_INT 35
9032: PUSH
9033: LD_INT 36
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 101
9061: PUSH
9062: LD_INT 102
9064: PUSH
9065: LD_INT 103
9067: PUSH
9068: LD_INT 106
9070: PUSH
9071: LD_INT 108
9073: PUSH
9074: LD_INT 112
9076: PUSH
9077: LD_INT 113
9079: PUSH
9080: LD_INT 114
9082: PUSH
9083: LD_INT 115
9085: PUSH
9086: LD_INT 116
9088: PUSH
9089: LD_INT 117
9091: PUSH
9092: LD_INT 118
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: ST_TO_ADDR
9113: GO 9356
9115: LD_INT 19
9117: DOUBLE
9118: EQUAL
9119: IFTRUE 9123
9121: GO 9355
9123: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9124: LD_ADDR_VAR 0 2
9128: PUSH
9129: LD_INT 1
9131: PUSH
9132: LD_INT 2
9134: PUSH
9135: LD_INT 3
9137: PUSH
9138: LD_INT 4
9140: PUSH
9141: LD_INT 5
9143: PUSH
9144: LD_INT 6
9146: PUSH
9147: LD_INT 7
9149: PUSH
9150: LD_INT 8
9152: PUSH
9153: LD_INT 9
9155: PUSH
9156: LD_INT 10
9158: PUSH
9159: LD_INT 11
9161: PUSH
9162: LD_INT 12
9164: PUSH
9165: LD_INT 13
9167: PUSH
9168: LD_INT 14
9170: PUSH
9171: LD_INT 15
9173: PUSH
9174: LD_INT 16
9176: PUSH
9177: LD_INT 17
9179: PUSH
9180: LD_INT 18
9182: PUSH
9183: LD_INT 19
9185: PUSH
9186: LD_INT 20
9188: PUSH
9189: LD_INT 21
9191: PUSH
9192: LD_INT 22
9194: PUSH
9195: LD_INT 23
9197: PUSH
9198: LD_INT 24
9200: PUSH
9201: LD_INT 25
9203: PUSH
9204: LD_INT 26
9206: PUSH
9207: LD_INT 27
9209: PUSH
9210: LD_INT 28
9212: PUSH
9213: LD_INT 29
9215: PUSH
9216: LD_INT 30
9218: PUSH
9219: LD_INT 31
9221: PUSH
9222: LD_INT 32
9224: PUSH
9225: LD_INT 33
9227: PUSH
9228: LD_INT 34
9230: PUSH
9231: LD_INT 35
9233: PUSH
9234: LD_INT 36
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 101
9277: PUSH
9278: LD_INT 102
9280: PUSH
9281: LD_INT 103
9283: PUSH
9284: LD_INT 104
9286: PUSH
9287: LD_INT 105
9289: PUSH
9290: LD_INT 106
9292: PUSH
9293: LD_INT 107
9295: PUSH
9296: LD_INT 108
9298: PUSH
9299: LD_INT 109
9301: PUSH
9302: LD_INT 110
9304: PUSH
9305: LD_INT 111
9307: PUSH
9308: LD_INT 112
9310: PUSH
9311: LD_INT 113
9313: PUSH
9314: LD_INT 114
9316: PUSH
9317: LD_INT 115
9319: PUSH
9320: LD_INT 116
9322: PUSH
9323: LD_INT 117
9325: PUSH
9326: LD_INT 118
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: ST_TO_ADDR
9353: GO 9356
9355: POP
// end else
9356: GO 9587
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9358: LD_ADDR_VAR 0 2
9362: PUSH
9363: LD_INT 1
9365: PUSH
9366: LD_INT 2
9368: PUSH
9369: LD_INT 3
9371: PUSH
9372: LD_INT 4
9374: PUSH
9375: LD_INT 5
9377: PUSH
9378: LD_INT 6
9380: PUSH
9381: LD_INT 7
9383: PUSH
9384: LD_INT 8
9386: PUSH
9387: LD_INT 9
9389: PUSH
9390: LD_INT 10
9392: PUSH
9393: LD_INT 11
9395: PUSH
9396: LD_INT 12
9398: PUSH
9399: LD_INT 13
9401: PUSH
9402: LD_INT 14
9404: PUSH
9405: LD_INT 15
9407: PUSH
9408: LD_INT 16
9410: PUSH
9411: LD_INT 17
9413: PUSH
9414: LD_INT 18
9416: PUSH
9417: LD_INT 19
9419: PUSH
9420: LD_INT 20
9422: PUSH
9423: LD_INT 21
9425: PUSH
9426: LD_INT 22
9428: PUSH
9429: LD_INT 23
9431: PUSH
9432: LD_INT 24
9434: PUSH
9435: LD_INT 25
9437: PUSH
9438: LD_INT 26
9440: PUSH
9441: LD_INT 27
9443: PUSH
9444: LD_INT 28
9446: PUSH
9447: LD_INT 29
9449: PUSH
9450: LD_INT 30
9452: PUSH
9453: LD_INT 31
9455: PUSH
9456: LD_INT 32
9458: PUSH
9459: LD_INT 33
9461: PUSH
9462: LD_INT 34
9464: PUSH
9465: LD_INT 35
9467: PUSH
9468: LD_INT 36
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 101
9511: PUSH
9512: LD_INT 102
9514: PUSH
9515: LD_INT 103
9517: PUSH
9518: LD_INT 104
9520: PUSH
9521: LD_INT 105
9523: PUSH
9524: LD_INT 106
9526: PUSH
9527: LD_INT 107
9529: PUSH
9530: LD_INT 108
9532: PUSH
9533: LD_INT 109
9535: PUSH
9536: LD_INT 110
9538: PUSH
9539: LD_INT 111
9541: PUSH
9542: LD_INT 112
9544: PUSH
9545: LD_INT 113
9547: PUSH
9548: LD_INT 114
9550: PUSH
9551: LD_INT 115
9553: PUSH
9554: LD_INT 116
9556: PUSH
9557: LD_INT 117
9559: PUSH
9560: LD_INT 118
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: ST_TO_ADDR
// if result then
9587: LD_VAR 0 2
9591: IFFALSE 10377
// begin normal :=  ;
9593: LD_ADDR_VAR 0 5
9597: PUSH
9598: LD_STRING 
9600: ST_TO_ADDR
// hardcore :=  ;
9601: LD_ADDR_VAR 0 6
9605: PUSH
9606: LD_STRING 
9608: ST_TO_ADDR
// active :=  ;
9609: LD_ADDR_VAR 0 7
9613: PUSH
9614: LD_STRING 
9616: ST_TO_ADDR
// for i = 1 to normalCounter do
9617: LD_ADDR_VAR 0 8
9621: PUSH
9622: DOUBLE
9623: LD_INT 1
9625: DEC
9626: ST_TO_ADDR
9627: LD_EXP 30
9631: PUSH
9632: FOR_TO
9633: IFFALSE 9734
// begin tmp := 0 ;
9635: LD_ADDR_VAR 0 3
9639: PUSH
9640: LD_STRING 0
9642: ST_TO_ADDR
// if result [ 1 ] then
9643: LD_VAR 0 2
9647: PUSH
9648: LD_INT 1
9650: ARRAY
9651: IFFALSE 9716
// if result [ 1 ] [ 1 ] = i then
9653: LD_VAR 0 2
9657: PUSH
9658: LD_INT 1
9660: ARRAY
9661: PUSH
9662: LD_INT 1
9664: ARRAY
9665: PUSH
9666: LD_VAR 0 8
9670: EQUAL
9671: IFFALSE 9716
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9673: LD_ADDR_VAR 0 2
9677: PUSH
9678: LD_VAR 0 2
9682: PPUSH
9683: LD_INT 1
9685: PPUSH
9686: LD_VAR 0 2
9690: PUSH
9691: LD_INT 1
9693: ARRAY
9694: PPUSH
9695: LD_INT 1
9697: PPUSH
9698: CALL_OW 3
9702: PPUSH
9703: CALL_OW 1
9707: ST_TO_ADDR
// tmp := 1 ;
9708: LD_ADDR_VAR 0 3
9712: PUSH
9713: LD_STRING 1
9715: ST_TO_ADDR
// end ; normal := normal & tmp ;
9716: LD_ADDR_VAR 0 5
9720: PUSH
9721: LD_VAR 0 5
9725: PUSH
9726: LD_VAR 0 3
9730: STR
9731: ST_TO_ADDR
// end ;
9732: GO 9632
9734: POP
9735: POP
// for i = 1 to hardcoreCounter do
9736: LD_ADDR_VAR 0 8
9740: PUSH
9741: DOUBLE
9742: LD_INT 1
9744: DEC
9745: ST_TO_ADDR
9746: LD_EXP 31
9750: PUSH
9751: FOR_TO
9752: IFFALSE 9857
// begin tmp := 0 ;
9754: LD_ADDR_VAR 0 3
9758: PUSH
9759: LD_STRING 0
9761: ST_TO_ADDR
// if result [ 2 ] then
9762: LD_VAR 0 2
9766: PUSH
9767: LD_INT 2
9769: ARRAY
9770: IFFALSE 9839
// if result [ 2 ] [ 1 ] = 100 + i then
9772: LD_VAR 0 2
9776: PUSH
9777: LD_INT 2
9779: ARRAY
9780: PUSH
9781: LD_INT 1
9783: ARRAY
9784: PUSH
9785: LD_INT 100
9787: PUSH
9788: LD_VAR 0 8
9792: PLUS
9793: EQUAL
9794: IFFALSE 9839
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9796: LD_ADDR_VAR 0 2
9800: PUSH
9801: LD_VAR 0 2
9805: PPUSH
9806: LD_INT 2
9808: PPUSH
9809: LD_VAR 0 2
9813: PUSH
9814: LD_INT 2
9816: ARRAY
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: CALL_OW 3
9825: PPUSH
9826: CALL_OW 1
9830: ST_TO_ADDR
// tmp := 1 ;
9831: LD_ADDR_VAR 0 3
9835: PUSH
9836: LD_STRING 1
9838: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9839: LD_ADDR_VAR 0 6
9843: PUSH
9844: LD_VAR 0 6
9848: PUSH
9849: LD_VAR 0 3
9853: STR
9854: ST_TO_ADDR
// end ;
9855: GO 9751
9857: POP
9858: POP
// if isGameLoad then
9859: LD_VAR 0 1
9863: IFFALSE 10338
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9865: LD_ADDR_VAR 0 4
9869: PUSH
9870: LD_EXP 34
9874: PUSH
9875: LD_EXP 33
9879: PUSH
9880: LD_EXP 35
9884: PUSH
9885: LD_EXP 32
9889: PUSH
9890: LD_EXP 36
9894: PUSH
9895: LD_EXP 37
9899: PUSH
9900: LD_EXP 38
9904: PUSH
9905: LD_EXP 39
9909: PUSH
9910: LD_EXP 40
9914: PUSH
9915: LD_EXP 41
9919: PUSH
9920: LD_EXP 42
9924: PUSH
9925: LD_EXP 43
9929: PUSH
9930: LD_EXP 44
9934: PUSH
9935: LD_EXP 45
9939: PUSH
9940: LD_EXP 53
9944: PUSH
9945: LD_EXP 54
9949: PUSH
9950: LD_EXP 55
9954: PUSH
9955: LD_EXP 56
9959: PUSH
9960: LD_EXP 58
9964: PUSH
9965: LD_EXP 59
9969: PUSH
9970: LD_EXP 60
9974: PUSH
9975: LD_EXP 63
9979: PUSH
9980: LD_EXP 65
9984: PUSH
9985: LD_EXP 66
9989: PUSH
9990: LD_EXP 67
9994: PUSH
9995: LD_EXP 69
9999: PUSH
10000: LD_EXP 70
10004: PUSH
10005: LD_EXP 73
10009: PUSH
10010: LD_EXP 74
10014: PUSH
10015: LD_EXP 75
10019: PUSH
10020: LD_EXP 76
10024: PUSH
10025: LD_EXP 77
10029: PUSH
10030: LD_EXP 78
10034: PUSH
10035: LD_EXP 79
10039: PUSH
10040: LD_EXP 80
10044: PUSH
10045: LD_EXP 81
10049: PUSH
10050: LD_EXP 46
10054: PUSH
10055: LD_EXP 47
10059: PUSH
10060: LD_EXP 50
10064: PUSH
10065: LD_EXP 51
10069: PUSH
10070: LD_EXP 52
10074: PUSH
10075: LD_EXP 48
10079: PUSH
10080: LD_EXP 49
10084: PUSH
10085: LD_EXP 57
10089: PUSH
10090: LD_EXP 61
10094: PUSH
10095: LD_EXP 62
10099: PUSH
10100: LD_EXP 64
10104: PUSH
10105: LD_EXP 68
10109: PUSH
10110: LD_EXP 71
10114: PUSH
10115: LD_EXP 72
10119: PUSH
10120: LD_EXP 82
10124: PUSH
10125: LD_EXP 83
10129: PUSH
10130: LD_EXP 84
10134: PUSH
10135: LD_EXP 85
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: ST_TO_ADDR
// tmp :=  ;
10196: LD_ADDR_VAR 0 3
10200: PUSH
10201: LD_STRING 
10203: ST_TO_ADDR
// for i = 1 to normalCounter do
10204: LD_ADDR_VAR 0 8
10208: PUSH
10209: DOUBLE
10210: LD_INT 1
10212: DEC
10213: ST_TO_ADDR
10214: LD_EXP 30
10218: PUSH
10219: FOR_TO
10220: IFFALSE 10256
// begin if flags [ i ] then
10222: LD_VAR 0 4
10226: PUSH
10227: LD_VAR 0 8
10231: ARRAY
10232: IFFALSE 10254
// tmp := tmp & i & ; ;
10234: LD_ADDR_VAR 0 3
10238: PUSH
10239: LD_VAR 0 3
10243: PUSH
10244: LD_VAR 0 8
10248: STR
10249: PUSH
10250: LD_STRING ;
10252: STR
10253: ST_TO_ADDR
// end ;
10254: GO 10219
10256: POP
10257: POP
// for i = 1 to hardcoreCounter do
10258: LD_ADDR_VAR 0 8
10262: PUSH
10263: DOUBLE
10264: LD_INT 1
10266: DEC
10267: ST_TO_ADDR
10268: LD_EXP 31
10272: PUSH
10273: FOR_TO
10274: IFFALSE 10320
// begin if flags [ normalCounter + i ] then
10276: LD_VAR 0 4
10280: PUSH
10281: LD_EXP 30
10285: PUSH
10286: LD_VAR 0 8
10290: PLUS
10291: ARRAY
10292: IFFALSE 10318
// tmp := tmp & ( 100 + i ) & ; ;
10294: LD_ADDR_VAR 0 3
10298: PUSH
10299: LD_VAR 0 3
10303: PUSH
10304: LD_INT 100
10306: PUSH
10307: LD_VAR 0 8
10311: PLUS
10312: STR
10313: PUSH
10314: LD_STRING ;
10316: STR
10317: ST_TO_ADDR
// end ;
10318: GO 10273
10320: POP
10321: POP
// if tmp then
10322: LD_VAR 0 3
10326: IFFALSE 10338
// active := tmp ;
10328: LD_ADDR_VAR 0 7
10332: PUSH
10333: LD_VAR 0 3
10337: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10338: LD_STRING getStreamItemsFromMission("
10340: PUSH
10341: LD_VAR 0 5
10345: STR
10346: PUSH
10347: LD_STRING ","
10349: STR
10350: PUSH
10351: LD_VAR 0 6
10355: STR
10356: PUSH
10357: LD_STRING ","
10359: STR
10360: PUSH
10361: LD_VAR 0 7
10365: STR
10366: PUSH
10367: LD_STRING ")
10369: STR
10370: PPUSH
10371: CALL_OW 559
// end else
10375: GO 10384
// ToLua ( getStreamItemsFromMission("","","") ) ;
10377: LD_STRING getStreamItemsFromMission("","","")
10379: PPUSH
10380: CALL_OW 559
// end ;
10384: LD_VAR 0 2
10388: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10389: LD_EXP 29
10393: PUSH
10394: LD_EXP 34
10398: AND
10399: IFFALSE 10523
10401: GO 10403
10403: DISABLE
10404: LD_INT 0
10406: PPUSH
10407: PPUSH
// begin enable ;
10408: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10409: LD_ADDR_VAR 0 2
10413: PUSH
10414: LD_INT 22
10416: PUSH
10417: LD_OWVAR 2
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 2
10428: PUSH
10429: LD_INT 34
10431: PUSH
10432: LD_INT 7
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 34
10441: PUSH
10442: LD_INT 45
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 34
10451: PUSH
10452: LD_INT 28
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 34
10461: PUSH
10462: LD_INT 47
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PPUSH
10480: CALL_OW 69
10484: ST_TO_ADDR
// if not tmp then
10485: LD_VAR 0 2
10489: NOT
10490: IFFALSE 10494
// exit ;
10492: GO 10523
// for i in tmp do
10494: LD_ADDR_VAR 0 1
10498: PUSH
10499: LD_VAR 0 2
10503: PUSH
10504: FOR_IN
10505: IFFALSE 10521
// begin SetLives ( i , 0 ) ;
10507: LD_VAR 0 1
10511: PPUSH
10512: LD_INT 0
10514: PPUSH
10515: CALL_OW 234
// end ;
10519: GO 10504
10521: POP
10522: POP
// end ;
10523: PPOPN 2
10525: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10526: LD_EXP 29
10530: PUSH
10531: LD_EXP 35
10535: AND
10536: IFFALSE 10620
10538: GO 10540
10540: DISABLE
10541: LD_INT 0
10543: PPUSH
10544: PPUSH
// begin enable ;
10545: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10546: LD_ADDR_VAR 0 2
10550: PUSH
10551: LD_INT 22
10553: PUSH
10554: LD_OWVAR 2
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 32
10565: PUSH
10566: LD_INT 3
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: ST_TO_ADDR
// if not tmp then
10582: LD_VAR 0 2
10586: NOT
10587: IFFALSE 10591
// exit ;
10589: GO 10620
// for i in tmp do
10591: LD_ADDR_VAR 0 1
10595: PUSH
10596: LD_VAR 0 2
10600: PUSH
10601: FOR_IN
10602: IFFALSE 10618
// begin SetLives ( i , 0 ) ;
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 0
10611: PPUSH
10612: CALL_OW 234
// end ;
10616: GO 10601
10618: POP
10619: POP
// end ;
10620: PPOPN 2
10622: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10623: LD_EXP 29
10627: PUSH
10628: LD_EXP 32
10632: AND
10633: IFFALSE 10726
10635: GO 10637
10637: DISABLE
10638: LD_INT 0
10640: PPUSH
// begin enable ;
10641: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10642: LD_ADDR_VAR 0 1
10646: PUSH
10647: LD_INT 22
10649: PUSH
10650: LD_OWVAR 2
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 25
10664: PUSH
10665: LD_INT 5
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 25
10674: PUSH
10675: LD_INT 9
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 25
10684: PUSH
10685: LD_INT 8
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PPUSH
10702: CALL_OW 69
10706: PUSH
10707: FOR_IN
10708: IFFALSE 10724
// begin SetClass ( i , 1 ) ;
10710: LD_VAR 0 1
10714: PPUSH
10715: LD_INT 1
10717: PPUSH
10718: CALL_OW 336
// end ;
10722: GO 10707
10724: POP
10725: POP
// end ;
10726: PPOPN 1
10728: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10729: LD_EXP 29
10733: PUSH
10734: LD_EXP 33
10738: AND
10739: PUSH
10740: LD_OWVAR 65
10744: PUSH
10745: LD_INT 7
10747: LESS
10748: AND
10749: IFFALSE 10763
10751: GO 10753
10753: DISABLE
// begin enable ;
10754: ENABLE
// game_speed := 7 ;
10755: LD_ADDR_OWVAR 65
10759: PUSH
10760: LD_INT 7
10762: ST_TO_ADDR
// end ;
10763: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10764: LD_EXP 29
10768: PUSH
10769: LD_EXP 36
10773: AND
10774: IFFALSE 10976
10776: GO 10778
10778: DISABLE
10779: LD_INT 0
10781: PPUSH
10782: PPUSH
10783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10784: LD_ADDR_VAR 0 3
10788: PUSH
10789: LD_INT 81
10791: PUSH
10792: LD_OWVAR 2
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 21
10803: PUSH
10804: LD_INT 1
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PPUSH
10815: CALL_OW 69
10819: ST_TO_ADDR
// if not tmp then
10820: LD_VAR 0 3
10824: NOT
10825: IFFALSE 10829
// exit ;
10827: GO 10976
// if tmp > 5 then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_INT 5
10836: GREATER
10837: IFFALSE 10849
// k := 5 else
10839: LD_ADDR_VAR 0 2
10843: PUSH
10844: LD_INT 5
10846: ST_TO_ADDR
10847: GO 10859
// k := tmp ;
10849: LD_ADDR_VAR 0 2
10853: PUSH
10854: LD_VAR 0 3
10858: ST_TO_ADDR
// for i := 1 to k do
10859: LD_ADDR_VAR 0 1
10863: PUSH
10864: DOUBLE
10865: LD_INT 1
10867: DEC
10868: ST_TO_ADDR
10869: LD_VAR 0 2
10873: PUSH
10874: FOR_TO
10875: IFFALSE 10974
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10877: LD_VAR 0 3
10881: PUSH
10882: LD_VAR 0 1
10886: ARRAY
10887: PPUSH
10888: LD_VAR 0 1
10892: PUSH
10893: LD_INT 4
10895: MOD
10896: PUSH
10897: LD_INT 1
10899: PLUS
10900: PPUSH
10901: CALL_OW 259
10905: PUSH
10906: LD_INT 10
10908: LESS
10909: IFFALSE 10972
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10911: LD_VAR 0 3
10915: PUSH
10916: LD_VAR 0 1
10920: ARRAY
10921: PPUSH
10922: LD_VAR 0 1
10926: PUSH
10927: LD_INT 4
10929: MOD
10930: PUSH
10931: LD_INT 1
10933: PLUS
10934: PPUSH
10935: LD_VAR 0 3
10939: PUSH
10940: LD_VAR 0 1
10944: ARRAY
10945: PPUSH
10946: LD_VAR 0 1
10950: PUSH
10951: LD_INT 4
10953: MOD
10954: PUSH
10955: LD_INT 1
10957: PLUS
10958: PPUSH
10959: CALL_OW 259
10963: PUSH
10964: LD_INT 1
10966: PLUS
10967: PPUSH
10968: CALL_OW 237
10972: GO 10874
10974: POP
10975: POP
// end ;
10976: PPOPN 3
10978: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10979: LD_EXP 29
10983: PUSH
10984: LD_EXP 37
10988: AND
10989: IFFALSE 11009
10991: GO 10993
10993: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10994: LD_INT 4
10996: PPUSH
10997: LD_OWVAR 2
11001: PPUSH
11002: LD_INT 0
11004: PPUSH
11005: CALL_OW 324
11009: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11010: LD_EXP 29
11014: PUSH
11015: LD_EXP 66
11019: AND
11020: IFFALSE 11040
11022: GO 11024
11024: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11025: LD_INT 19
11027: PPUSH
11028: LD_OWVAR 2
11032: PPUSH
11033: LD_INT 0
11035: PPUSH
11036: CALL_OW 324
11040: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11041: LD_EXP 29
11045: PUSH
11046: LD_EXP 38
11050: AND
11051: IFFALSE 11153
11053: GO 11055
11055: DISABLE
11056: LD_INT 0
11058: PPUSH
11059: PPUSH
// begin enable ;
11060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11061: LD_ADDR_VAR 0 2
11065: PUSH
11066: LD_INT 22
11068: PUSH
11069: LD_OWVAR 2
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 2
11080: PUSH
11081: LD_INT 34
11083: PUSH
11084: LD_INT 11
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 34
11093: PUSH
11094: LD_INT 30
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 69
11114: ST_TO_ADDR
// if not tmp then
11115: LD_VAR 0 2
11119: NOT
11120: IFFALSE 11124
// exit ;
11122: GO 11153
// for i in tmp do
11124: LD_ADDR_VAR 0 1
11128: PUSH
11129: LD_VAR 0 2
11133: PUSH
11134: FOR_IN
11135: IFFALSE 11151
// begin SetLives ( i , 0 ) ;
11137: LD_VAR 0 1
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 234
// end ;
11149: GO 11134
11151: POP
11152: POP
// end ;
11153: PPOPN 2
11155: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11156: LD_EXP 29
11160: PUSH
11161: LD_EXP 39
11165: AND
11166: IFFALSE 11186
11168: GO 11170
11170: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11171: LD_INT 32
11173: PPUSH
11174: LD_OWVAR 2
11178: PPUSH
11179: LD_INT 0
11181: PPUSH
11182: CALL_OW 324
11186: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11187: LD_EXP 29
11191: PUSH
11192: LD_EXP 40
11196: AND
11197: IFFALSE 11378
11199: GO 11201
11201: DISABLE
11202: LD_INT 0
11204: PPUSH
11205: PPUSH
11206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11207: LD_ADDR_VAR 0 2
11211: PUSH
11212: LD_INT 22
11214: PUSH
11215: LD_OWVAR 2
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 33
11226: PUSH
11227: LD_INT 3
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: ST_TO_ADDR
// if not tmp then
11243: LD_VAR 0 2
11247: NOT
11248: IFFALSE 11252
// exit ;
11250: GO 11378
// side := 0 ;
11252: LD_ADDR_VAR 0 3
11256: PUSH
11257: LD_INT 0
11259: ST_TO_ADDR
// for i := 1 to 8 do
11260: LD_ADDR_VAR 0 1
11264: PUSH
11265: DOUBLE
11266: LD_INT 1
11268: DEC
11269: ST_TO_ADDR
11270: LD_INT 8
11272: PUSH
11273: FOR_TO
11274: IFFALSE 11322
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11276: LD_OWVAR 2
11280: PUSH
11281: LD_VAR 0 1
11285: NONEQUAL
11286: PUSH
11287: LD_OWVAR 2
11291: PPUSH
11292: LD_VAR 0 1
11296: PPUSH
11297: CALL_OW 81
11301: PUSH
11302: LD_INT 2
11304: EQUAL
11305: AND
11306: IFFALSE 11320
// begin side := i ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_VAR 0 1
11317: ST_TO_ADDR
// break ;
11318: GO 11322
// end ;
11320: GO 11273
11322: POP
11323: POP
// if not side then
11324: LD_VAR 0 3
11328: NOT
11329: IFFALSE 11333
// exit ;
11331: GO 11378
// for i := 1 to tmp do
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_VAR 0 2
11347: PUSH
11348: FOR_TO
11349: IFFALSE 11376
// if Prob ( 60 ) then
11351: LD_INT 60
11353: PPUSH
11354: CALL_OW 13
11358: IFFALSE 11374
// SetSide ( i , side ) ;
11360: LD_VAR 0 1
11364: PPUSH
11365: LD_VAR 0 3
11369: PPUSH
11370: CALL_OW 235
11374: GO 11348
11376: POP
11377: POP
// end ;
11378: PPOPN 3
11380: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11381: LD_EXP 29
11385: PUSH
11386: LD_EXP 42
11390: AND
11391: IFFALSE 11510
11393: GO 11395
11395: DISABLE
11396: LD_INT 0
11398: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11399: LD_ADDR_VAR 0 1
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_OWVAR 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 21
11418: PUSH
11419: LD_INT 1
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 3
11428: PUSH
11429: LD_INT 23
11431: PUSH
11432: LD_INT 0
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: PUSH
11453: FOR_IN
11454: IFFALSE 11508
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11456: LD_VAR 0 1
11460: PPUSH
11461: CALL_OW 257
11465: PUSH
11466: LD_INT 1
11468: PUSH
11469: LD_INT 2
11471: PUSH
11472: LD_INT 3
11474: PUSH
11475: LD_INT 4
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: IN
11484: IFFALSE 11506
// SetClass ( un , rand ( 1 , 4 ) ) ;
11486: LD_VAR 0 1
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: LD_INT 4
11496: PPUSH
11497: CALL_OW 12
11501: PPUSH
11502: CALL_OW 336
11506: GO 11453
11508: POP
11509: POP
// end ;
11510: PPOPN 1
11512: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11513: LD_EXP 29
11517: PUSH
11518: LD_EXP 41
11522: AND
11523: IFFALSE 11602
11525: GO 11527
11527: DISABLE
11528: LD_INT 0
11530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11531: LD_ADDR_VAR 0 1
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_OWVAR 2
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: LD_INT 21
11550: PUSH
11551: LD_INT 3
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PPUSH
11562: CALL_OW 69
11566: ST_TO_ADDR
// if not tmp then
11567: LD_VAR 0 1
11571: NOT
11572: IFFALSE 11576
// exit ;
11574: GO 11602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11576: LD_VAR 0 1
11580: PUSH
11581: LD_INT 1
11583: PPUSH
11584: LD_VAR 0 1
11588: PPUSH
11589: CALL_OW 12
11593: ARRAY
11594: PPUSH
11595: LD_INT 100
11597: PPUSH
11598: CALL_OW 234
// end ;
11602: PPOPN 1
11604: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11605: LD_EXP 29
11609: PUSH
11610: LD_EXP 43
11614: AND
11615: IFFALSE 11713
11617: GO 11619
11619: DISABLE
11620: LD_INT 0
11622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11623: LD_ADDR_VAR 0 1
11627: PUSH
11628: LD_INT 22
11630: PUSH
11631: LD_OWVAR 2
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PPUSH
11654: CALL_OW 69
11658: ST_TO_ADDR
// if not tmp then
11659: LD_VAR 0 1
11663: NOT
11664: IFFALSE 11668
// exit ;
11666: GO 11713
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11668: LD_VAR 0 1
11672: PUSH
11673: LD_INT 1
11675: PPUSH
11676: LD_VAR 0 1
11680: PPUSH
11681: CALL_OW 12
11685: ARRAY
11686: PPUSH
11687: LD_INT 1
11689: PPUSH
11690: LD_INT 4
11692: PPUSH
11693: CALL_OW 12
11697: PPUSH
11698: LD_INT 3000
11700: PPUSH
11701: LD_INT 9000
11703: PPUSH
11704: CALL_OW 12
11708: PPUSH
11709: CALL_OW 492
// end ;
11713: PPOPN 1
11715: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11716: LD_EXP 29
11720: PUSH
11721: LD_EXP 44
11725: AND
11726: IFFALSE 11746
11728: GO 11730
11730: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11731: LD_INT 1
11733: PPUSH
11734: LD_OWVAR 2
11738: PPUSH
11739: LD_INT 0
11741: PPUSH
11742: CALL_OW 324
11746: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11747: LD_EXP 29
11751: PUSH
11752: LD_EXP 45
11756: AND
11757: IFFALSE 11840
11759: GO 11761
11761: DISABLE
11762: LD_INT 0
11764: PPUSH
11765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11766: LD_ADDR_VAR 0 2
11770: PUSH
11771: LD_INT 22
11773: PUSH
11774: LD_OWVAR 2
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 21
11785: PUSH
11786: LD_INT 3
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 69
11801: ST_TO_ADDR
// if not tmp then
11802: LD_VAR 0 2
11806: NOT
11807: IFFALSE 11811
// exit ;
11809: GO 11840
// for i in tmp do
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: LD_VAR 0 2
11820: PUSH
11821: FOR_IN
11822: IFFALSE 11838
// SetBLevel ( i , 10 ) ;
11824: LD_VAR 0 1
11828: PPUSH
11829: LD_INT 10
11831: PPUSH
11832: CALL_OW 241
11836: GO 11821
11838: POP
11839: POP
// end ;
11840: PPOPN 2
11842: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11843: LD_EXP 29
11847: PUSH
11848: LD_EXP 46
11852: AND
11853: IFFALSE 11964
11855: GO 11857
11857: DISABLE
11858: LD_INT 0
11860: PPUSH
11861: PPUSH
11862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11863: LD_ADDR_VAR 0 3
11867: PUSH
11868: LD_INT 22
11870: PUSH
11871: LD_OWVAR 2
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 25
11882: PUSH
11883: LD_INT 1
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 69
11898: ST_TO_ADDR
// if not tmp then
11899: LD_VAR 0 3
11903: NOT
11904: IFFALSE 11908
// exit ;
11906: GO 11964
// un := tmp [ rand ( 1 , tmp ) ] ;
11908: LD_ADDR_VAR 0 2
11912: PUSH
11913: LD_VAR 0 3
11917: PUSH
11918: LD_INT 1
11920: PPUSH
11921: LD_VAR 0 3
11925: PPUSH
11926: CALL_OW 12
11930: ARRAY
11931: ST_TO_ADDR
// if Crawls ( un ) then
11932: LD_VAR 0 2
11936: PPUSH
11937: CALL_OW 318
11941: IFFALSE 11952
// ComWalk ( un ) ;
11943: LD_VAR 0 2
11947: PPUSH
11948: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11952: LD_VAR 0 2
11956: PPUSH
11957: LD_INT 5
11959: PPUSH
11960: CALL_OW 336
// end ;
11964: PPOPN 3
11966: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11967: LD_EXP 29
11971: PUSH
11972: LD_EXP 47
11976: AND
11977: PUSH
11978: LD_OWVAR 67
11982: PUSH
11983: LD_INT 4
11985: LESS
11986: AND
11987: IFFALSE 12006
11989: GO 11991
11991: DISABLE
// begin Difficulty := Difficulty + 1 ;
11992: LD_ADDR_OWVAR 67
11996: PUSH
11997: LD_OWVAR 67
12001: PUSH
12002: LD_INT 1
12004: PLUS
12005: ST_TO_ADDR
// end ;
12006: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12007: LD_EXP 29
12011: PUSH
12012: LD_EXP 48
12016: AND
12017: IFFALSE 12120
12019: GO 12021
12021: DISABLE
12022: LD_INT 0
12024: PPUSH
// begin for i := 1 to 5 do
12025: LD_ADDR_VAR 0 1
12029: PUSH
12030: DOUBLE
12031: LD_INT 1
12033: DEC
12034: ST_TO_ADDR
12035: LD_INT 5
12037: PUSH
12038: FOR_TO
12039: IFFALSE 12118
// begin uc_nation := nation_nature ;
12041: LD_ADDR_OWVAR 21
12045: PUSH
12046: LD_INT 0
12048: ST_TO_ADDR
// uc_side := 0 ;
12049: LD_ADDR_OWVAR 20
12053: PUSH
12054: LD_INT 0
12056: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12057: LD_ADDR_OWVAR 29
12061: PUSH
12062: LD_INT 12
12064: PUSH
12065: LD_INT 12
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: ST_TO_ADDR
// hc_agressivity := 20 ;
12072: LD_ADDR_OWVAR 35
12076: PUSH
12077: LD_INT 20
12079: ST_TO_ADDR
// hc_class := class_tiger ;
12080: LD_ADDR_OWVAR 28
12084: PUSH
12085: LD_INT 14
12087: ST_TO_ADDR
// hc_gallery :=  ;
12088: LD_ADDR_OWVAR 33
12092: PUSH
12093: LD_STRING 
12095: ST_TO_ADDR
// hc_name :=  ;
12096: LD_ADDR_OWVAR 26
12100: PUSH
12101: LD_STRING 
12103: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12104: CALL_OW 44
12108: PPUSH
12109: LD_INT 0
12111: PPUSH
12112: CALL_OW 51
// end ;
12116: GO 12038
12118: POP
12119: POP
// end ;
12120: PPOPN 1
12122: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12123: LD_EXP 29
12127: PUSH
12128: LD_EXP 49
12132: AND
12133: IFFALSE 12142
12135: GO 12137
12137: DISABLE
// StreamSibBomb ;
12138: CALL 12143 0 0
12142: END
// export function StreamSibBomb ; var i , x , y ; begin
12143: LD_INT 0
12145: PPUSH
12146: PPUSH
12147: PPUSH
12148: PPUSH
// result := false ;
12149: LD_ADDR_VAR 0 1
12153: PUSH
12154: LD_INT 0
12156: ST_TO_ADDR
// for i := 1 to 16 do
12157: LD_ADDR_VAR 0 2
12161: PUSH
12162: DOUBLE
12163: LD_INT 1
12165: DEC
12166: ST_TO_ADDR
12167: LD_INT 16
12169: PUSH
12170: FOR_TO
12171: IFFALSE 12370
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12173: LD_ADDR_VAR 0 3
12177: PUSH
12178: LD_INT 10
12180: PUSH
12181: LD_INT 20
12183: PUSH
12184: LD_INT 30
12186: PUSH
12187: LD_INT 40
12189: PUSH
12190: LD_INT 50
12192: PUSH
12193: LD_INT 60
12195: PUSH
12196: LD_INT 70
12198: PUSH
12199: LD_INT 80
12201: PUSH
12202: LD_INT 90
12204: PUSH
12205: LD_INT 100
12207: PUSH
12208: LD_INT 110
12210: PUSH
12211: LD_INT 120
12213: PUSH
12214: LD_INT 130
12216: PUSH
12217: LD_INT 140
12219: PUSH
12220: LD_INT 150
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 1
12242: PPUSH
12243: LD_INT 15
12245: PPUSH
12246: CALL_OW 12
12250: ARRAY
12251: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12252: LD_ADDR_VAR 0 4
12256: PUSH
12257: LD_INT 10
12259: PUSH
12260: LD_INT 20
12262: PUSH
12263: LD_INT 30
12265: PUSH
12266: LD_INT 40
12268: PUSH
12269: LD_INT 50
12271: PUSH
12272: LD_INT 60
12274: PUSH
12275: LD_INT 70
12277: PUSH
12278: LD_INT 80
12280: PUSH
12281: LD_INT 90
12283: PUSH
12284: LD_INT 100
12286: PUSH
12287: LD_INT 110
12289: PUSH
12290: LD_INT 120
12292: PUSH
12293: LD_INT 130
12295: PUSH
12296: LD_INT 140
12298: PUSH
12299: LD_INT 150
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 15
12324: PPUSH
12325: CALL_OW 12
12329: ARRAY
12330: ST_TO_ADDR
// if ValidHex ( x , y ) then
12331: LD_VAR 0 3
12335: PPUSH
12336: LD_VAR 0 4
12340: PPUSH
12341: CALL_OW 488
12345: IFFALSE 12368
// begin result := [ x , y ] ;
12347: LD_ADDR_VAR 0 1
12351: PUSH
12352: LD_VAR 0 3
12356: PUSH
12357: LD_VAR 0 4
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: ST_TO_ADDR
// break ;
12366: GO 12370
// end ; end ;
12368: GO 12170
12370: POP
12371: POP
// if result then
12372: LD_VAR 0 1
12376: IFFALSE 12436
// begin ToLua ( playSibBomb() ) ;
12378: LD_STRING playSibBomb()
12380: PPUSH
12381: CALL_OW 559
// wait ( 0 0$14 ) ;
12385: LD_INT 490
12387: PPUSH
12388: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12392: LD_VAR 0 1
12396: PUSH
12397: LD_INT 1
12399: ARRAY
12400: PPUSH
12401: LD_VAR 0 1
12405: PUSH
12406: LD_INT 2
12408: ARRAY
12409: PPUSH
12410: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12414: LD_VAR 0 1
12418: PUSH
12419: LD_INT 1
12421: ARRAY
12422: PPUSH
12423: LD_VAR 0 1
12427: PUSH
12428: LD_INT 2
12430: ARRAY
12431: PPUSH
12432: CALL_OW 429
// end ; end ;
12436: LD_VAR 0 1
12440: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12441: LD_EXP 29
12445: PUSH
12446: LD_EXP 51
12450: AND
12451: IFFALSE 12463
12453: GO 12455
12455: DISABLE
// YouLost (  ) ;
12456: LD_STRING 
12458: PPUSH
12459: CALL_OW 104
12463: END
// every 0 0$1 trigger StreamModeActive and sFog do
12464: LD_EXP 29
12468: PUSH
12469: LD_EXP 50
12473: AND
12474: IFFALSE 12488
12476: GO 12478
12478: DISABLE
// FogOff ( your_side ) ;
12479: LD_OWVAR 2
12483: PPUSH
12484: CALL_OW 344
12488: END
// every 0 0$1 trigger StreamModeActive and sSun do
12489: LD_EXP 29
12493: PUSH
12494: LD_EXP 52
12498: AND
12499: IFFALSE 12527
12501: GO 12503
12503: DISABLE
// begin solar_recharge_percent := 0 ;
12504: LD_ADDR_OWVAR 79
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12512: LD_INT 10500
12514: PPUSH
12515: CALL_OW 67
// solar_recharge_percent := 100 ;
12519: LD_ADDR_OWVAR 79
12523: PUSH
12524: LD_INT 100
12526: ST_TO_ADDR
// end ;
12527: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12528: LD_EXP 29
12532: PUSH
12533: LD_EXP 53
12537: AND
12538: IFFALSE 12777
12540: GO 12542
12542: DISABLE
12543: LD_INT 0
12545: PPUSH
12546: PPUSH
12547: PPUSH
// begin tmp := [ ] ;
12548: LD_ADDR_VAR 0 3
12552: PUSH
12553: EMPTY
12554: ST_TO_ADDR
// for i := 1 to 6 do
12555: LD_ADDR_VAR 0 1
12559: PUSH
12560: DOUBLE
12561: LD_INT 1
12563: DEC
12564: ST_TO_ADDR
12565: LD_INT 6
12567: PUSH
12568: FOR_TO
12569: IFFALSE 12674
// begin uc_nation := nation_nature ;
12571: LD_ADDR_OWVAR 21
12575: PUSH
12576: LD_INT 0
12578: ST_TO_ADDR
// uc_side := 0 ;
12579: LD_ADDR_OWVAR 20
12583: PUSH
12584: LD_INT 0
12586: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12587: LD_ADDR_OWVAR 29
12591: PUSH
12592: LD_INT 12
12594: PUSH
12595: LD_INT 12
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: ST_TO_ADDR
// hc_agressivity := 20 ;
12602: LD_ADDR_OWVAR 35
12606: PUSH
12607: LD_INT 20
12609: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12610: LD_ADDR_OWVAR 28
12614: PUSH
12615: LD_INT 17
12617: ST_TO_ADDR
// hc_gallery :=  ;
12618: LD_ADDR_OWVAR 33
12622: PUSH
12623: LD_STRING 
12625: ST_TO_ADDR
// hc_name :=  ;
12626: LD_ADDR_OWVAR 26
12630: PUSH
12631: LD_STRING 
12633: ST_TO_ADDR
// un := CreateHuman ;
12634: LD_ADDR_VAR 0 2
12638: PUSH
12639: CALL_OW 44
12643: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12644: LD_VAR 0 2
12648: PPUSH
12649: LD_INT 1
12651: PPUSH
12652: CALL_OW 51
// tmp := tmp ^ un ;
12656: LD_ADDR_VAR 0 3
12660: PUSH
12661: LD_VAR 0 3
12665: PUSH
12666: LD_VAR 0 2
12670: ADD
12671: ST_TO_ADDR
// end ;
12672: GO 12568
12674: POP
12675: POP
// repeat wait ( 0 0$1 ) ;
12676: LD_INT 35
12678: PPUSH
12679: CALL_OW 67
// for un in tmp do
12683: LD_ADDR_VAR 0 2
12687: PUSH
12688: LD_VAR 0 3
12692: PUSH
12693: FOR_IN
12694: IFFALSE 12768
// begin if IsDead ( un ) then
12696: LD_VAR 0 2
12700: PPUSH
12701: CALL_OW 301
12705: IFFALSE 12725
// begin tmp := tmp diff un ;
12707: LD_ADDR_VAR 0 3
12711: PUSH
12712: LD_VAR 0 3
12716: PUSH
12717: LD_VAR 0 2
12721: DIFF
12722: ST_TO_ADDR
// continue ;
12723: GO 12693
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12725: LD_VAR 0 2
12729: PPUSH
12730: LD_INT 3
12732: PUSH
12733: LD_INT 22
12735: PUSH
12736: LD_INT 0
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PPUSH
12747: CALL_OW 69
12751: PPUSH
12752: LD_VAR 0 2
12756: PPUSH
12757: CALL_OW 74
12761: PPUSH
12762: CALL_OW 115
// end ;
12766: GO 12693
12768: POP
12769: POP
// until not tmp ;
12770: LD_VAR 0 3
12774: NOT
12775: IFFALSE 12676
// end ;
12777: PPOPN 3
12779: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12780: LD_EXP 29
12784: PUSH
12785: LD_EXP 54
12789: AND
12790: IFFALSE 12844
12792: GO 12794
12794: DISABLE
// begin ToLua ( displayTroll(); ) ;
12795: LD_STRING displayTroll();
12797: PPUSH
12798: CALL_OW 559
// wait ( 3 3$00 ) ;
12802: LD_INT 6300
12804: PPUSH
12805: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12809: LD_STRING hideTroll();
12811: PPUSH
12812: CALL_OW 559
// wait ( 1 1$00 ) ;
12816: LD_INT 2100
12818: PPUSH
12819: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12823: LD_STRING displayTroll();
12825: PPUSH
12826: CALL_OW 559
// wait ( 1 1$00 ) ;
12830: LD_INT 2100
12832: PPUSH
12833: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12837: LD_STRING hideTroll();
12839: PPUSH
12840: CALL_OW 559
// end ;
12844: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12845: LD_EXP 29
12849: PUSH
12850: LD_EXP 55
12854: AND
12855: IFFALSE 12918
12857: GO 12859
12859: DISABLE
12860: LD_INT 0
12862: PPUSH
// begin p := 0 ;
12863: LD_ADDR_VAR 0 1
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// repeat game_speed := 1 ;
12871: LD_ADDR_OWVAR 65
12875: PUSH
12876: LD_INT 1
12878: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12879: LD_INT 35
12881: PPUSH
12882: CALL_OW 67
// p := p + 1 ;
12886: LD_ADDR_VAR 0 1
12890: PUSH
12891: LD_VAR 0 1
12895: PUSH
12896: LD_INT 1
12898: PLUS
12899: ST_TO_ADDR
// until p >= 60 ;
12900: LD_VAR 0 1
12904: PUSH
12905: LD_INT 60
12907: GREATEREQUAL
12908: IFFALSE 12871
// game_speed := 4 ;
12910: LD_ADDR_OWVAR 65
12914: PUSH
12915: LD_INT 4
12917: ST_TO_ADDR
// end ;
12918: PPOPN 1
12920: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12921: LD_EXP 29
12925: PUSH
12926: LD_EXP 56
12930: AND
12931: IFFALSE 13077
12933: GO 12935
12935: DISABLE
12936: LD_INT 0
12938: PPUSH
12939: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12940: LD_ADDR_VAR 0 1
12944: PUSH
12945: LD_INT 22
12947: PUSH
12948: LD_OWVAR 2
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 2
12959: PUSH
12960: LD_INT 30
12962: PUSH
12963: LD_INT 0
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 30
12972: PUSH
12973: LD_INT 1
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PPUSH
12989: CALL_OW 69
12993: ST_TO_ADDR
// if not depot then
12994: LD_VAR 0 1
12998: NOT
12999: IFFALSE 13003
// exit ;
13001: GO 13077
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13003: LD_ADDR_VAR 0 2
13007: PUSH
13008: LD_VAR 0 1
13012: PUSH
13013: LD_INT 1
13015: PPUSH
13016: LD_VAR 0 1
13020: PPUSH
13021: CALL_OW 12
13025: ARRAY
13026: PPUSH
13027: CALL_OW 274
13031: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13032: LD_VAR 0 2
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: LD_INT 0
13042: PPUSH
13043: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13047: LD_VAR 0 2
13051: PPUSH
13052: LD_INT 2
13054: PPUSH
13055: LD_INT 0
13057: PPUSH
13058: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13062: LD_VAR 0 2
13066: PPUSH
13067: LD_INT 3
13069: PPUSH
13070: LD_INT 0
13072: PPUSH
13073: CALL_OW 277
// end ;
13077: PPOPN 2
13079: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13080: LD_EXP 29
13084: PUSH
13085: LD_EXP 57
13089: AND
13090: IFFALSE 13187
13092: GO 13094
13094: DISABLE
13095: LD_INT 0
13097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13098: LD_ADDR_VAR 0 1
13102: PUSH
13103: LD_INT 22
13105: PUSH
13106: LD_OWVAR 2
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 21
13117: PUSH
13118: LD_INT 1
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 3
13127: PUSH
13128: LD_INT 23
13130: PUSH
13131: LD_INT 0
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: PPUSH
13147: CALL_OW 69
13151: ST_TO_ADDR
// if not tmp then
13152: LD_VAR 0 1
13156: NOT
13157: IFFALSE 13161
// exit ;
13159: GO 13187
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13161: LD_VAR 0 1
13165: PUSH
13166: LD_INT 1
13168: PPUSH
13169: LD_VAR 0 1
13173: PPUSH
13174: CALL_OW 12
13178: ARRAY
13179: PPUSH
13180: LD_INT 200
13182: PPUSH
13183: CALL_OW 234
// end ;
13187: PPOPN 1
13189: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13190: LD_EXP 29
13194: PUSH
13195: LD_EXP 58
13199: AND
13200: IFFALSE 13279
13202: GO 13204
13204: DISABLE
13205: LD_INT 0
13207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13208: LD_ADDR_VAR 0 1
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_OWVAR 2
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 21
13227: PUSH
13228: LD_INT 2
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: PPUSH
13239: CALL_OW 69
13243: ST_TO_ADDR
// if not tmp then
13244: LD_VAR 0 1
13248: NOT
13249: IFFALSE 13253
// exit ;
13251: GO 13279
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13253: LD_VAR 0 1
13257: PUSH
13258: LD_INT 1
13260: PPUSH
13261: LD_VAR 0 1
13265: PPUSH
13266: CALL_OW 12
13270: ARRAY
13271: PPUSH
13272: LD_INT 60
13274: PPUSH
13275: CALL_OW 234
// end ;
13279: PPOPN 1
13281: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13282: LD_EXP 29
13286: PUSH
13287: LD_EXP 59
13291: AND
13292: IFFALSE 13391
13294: GO 13296
13296: DISABLE
13297: LD_INT 0
13299: PPUSH
13300: PPUSH
// begin enable ;
13301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13302: LD_ADDR_VAR 0 1
13306: PUSH
13307: LD_INT 22
13309: PUSH
13310: LD_OWVAR 2
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: LD_INT 61
13321: PUSH
13322: EMPTY
13323: LIST
13324: PUSH
13325: LD_INT 33
13327: PUSH
13328: LD_INT 2
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 69
13344: ST_TO_ADDR
// if not tmp then
13345: LD_VAR 0 1
13349: NOT
13350: IFFALSE 13354
// exit ;
13352: GO 13391
// for i in tmp do
13354: LD_ADDR_VAR 0 2
13358: PUSH
13359: LD_VAR 0 1
13363: PUSH
13364: FOR_IN
13365: IFFALSE 13389
// if IsControledBy ( i ) then
13367: LD_VAR 0 2
13371: PPUSH
13372: CALL_OW 312
13376: IFFALSE 13387
// ComUnlink ( i ) ;
13378: LD_VAR 0 2
13382: PPUSH
13383: CALL_OW 136
13387: GO 13364
13389: POP
13390: POP
// end ;
13391: PPOPN 2
13393: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13394: LD_EXP 29
13398: PUSH
13399: LD_EXP 60
13403: AND
13404: IFFALSE 13544
13406: GO 13408
13408: DISABLE
13409: LD_INT 0
13411: PPUSH
13412: PPUSH
// begin ToLua ( displayPowell(); ) ;
13413: LD_STRING displayPowell();
13415: PPUSH
13416: CALL_OW 559
// uc_side := 0 ;
13420: LD_ADDR_OWVAR 20
13424: PUSH
13425: LD_INT 0
13427: ST_TO_ADDR
// uc_nation := 2 ;
13428: LD_ADDR_OWVAR 21
13432: PUSH
13433: LD_INT 2
13435: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13436: LD_ADDR_OWVAR 37
13440: PUSH
13441: LD_INT 14
13443: ST_TO_ADDR
// vc_engine := engine_siberite ;
13444: LD_ADDR_OWVAR 39
13448: PUSH
13449: LD_INT 3
13451: ST_TO_ADDR
// vc_control := control_apeman ;
13452: LD_ADDR_OWVAR 38
13456: PUSH
13457: LD_INT 5
13459: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13460: LD_ADDR_OWVAR 40
13464: PUSH
13465: LD_INT 29
13467: ST_TO_ADDR
// un := CreateVehicle ;
13468: LD_ADDR_VAR 0 2
13472: PUSH
13473: CALL_OW 45
13477: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13478: LD_VAR 0 2
13482: PPUSH
13483: LD_INT 1
13485: PPUSH
13486: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13490: LD_INT 35
13492: PPUSH
13493: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13497: LD_VAR 0 2
13501: PPUSH
13502: LD_INT 22
13504: PUSH
13505: LD_OWVAR 2
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PPUSH
13514: CALL_OW 69
13518: PPUSH
13519: LD_VAR 0 2
13523: PPUSH
13524: CALL_OW 74
13528: PPUSH
13529: CALL_OW 115
// until IsDead ( un ) ;
13533: LD_VAR 0 2
13537: PPUSH
13538: CALL_OW 301
13542: IFFALSE 13490
// end ;
13544: PPOPN 2
13546: END
// every 0 0$1 trigger StreamModeActive and sStu do
13547: LD_EXP 29
13551: PUSH
13552: LD_EXP 68
13556: AND
13557: IFFALSE 13573
13559: GO 13561
13561: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13562: LD_STRING displayStucuk();
13564: PPUSH
13565: CALL_OW 559
// ResetFog ;
13569: CALL_OW 335
// end ;
13573: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13574: LD_EXP 29
13578: PUSH
13579: LD_EXP 61
13583: AND
13584: IFFALSE 13725
13586: GO 13588
13588: DISABLE
13589: LD_INT 0
13591: PPUSH
13592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13593: LD_ADDR_VAR 0 2
13597: PUSH
13598: LD_INT 22
13600: PUSH
13601: LD_OWVAR 2
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 21
13612: PUSH
13613: LD_INT 1
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL_OW 69
13628: ST_TO_ADDR
// if not tmp then
13629: LD_VAR 0 2
13633: NOT
13634: IFFALSE 13638
// exit ;
13636: GO 13725
// un := tmp [ rand ( 1 , tmp ) ] ;
13638: LD_ADDR_VAR 0 1
13642: PUSH
13643: LD_VAR 0 2
13647: PUSH
13648: LD_INT 1
13650: PPUSH
13651: LD_VAR 0 2
13655: PPUSH
13656: CALL_OW 12
13660: ARRAY
13661: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13662: LD_VAR 0 1
13666: PPUSH
13667: LD_INT 0
13669: PPUSH
13670: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13674: LD_VAR 0 1
13678: PPUSH
13679: LD_OWVAR 3
13683: PUSH
13684: LD_VAR 0 1
13688: DIFF
13689: PPUSH
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 74
13699: PPUSH
13700: CALL_OW 115
// wait ( 0 0$20 ) ;
13704: LD_INT 700
13706: PPUSH
13707: CALL_OW 67
// SetSide ( un , your_side ) ;
13711: LD_VAR 0 1
13715: PPUSH
13716: LD_OWVAR 2
13720: PPUSH
13721: CALL_OW 235
// end ;
13725: PPOPN 2
13727: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13728: LD_EXP 29
13732: PUSH
13733: LD_EXP 62
13737: AND
13738: IFFALSE 13844
13740: GO 13742
13742: DISABLE
13743: LD_INT 0
13745: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13746: LD_ADDR_VAR 0 1
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_OWVAR 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 2
13765: PUSH
13766: LD_INT 30
13768: PUSH
13769: LD_INT 0
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 30
13778: PUSH
13779: LD_INT 1
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: ST_TO_ADDR
// if not depot then
13800: LD_VAR 0 1
13804: NOT
13805: IFFALSE 13809
// exit ;
13807: GO 13844
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13809: LD_VAR 0 1
13813: PUSH
13814: LD_INT 1
13816: ARRAY
13817: PPUSH
13818: CALL_OW 250
13822: PPUSH
13823: LD_VAR 0 1
13827: PUSH
13828: LD_INT 1
13830: ARRAY
13831: PPUSH
13832: CALL_OW 251
13836: PPUSH
13837: LD_INT 70
13839: PPUSH
13840: CALL_OW 495
// end ;
13844: PPOPN 1
13846: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13847: LD_EXP 29
13851: PUSH
13852: LD_EXP 63
13856: AND
13857: IFFALSE 14068
13859: GO 13861
13861: DISABLE
13862: LD_INT 0
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13869: LD_ADDR_VAR 0 5
13873: PUSH
13874: LD_INT 22
13876: PUSH
13877: LD_OWVAR 2
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 21
13888: PUSH
13889: LD_INT 1
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 69
13904: ST_TO_ADDR
// if not tmp then
13905: LD_VAR 0 5
13909: NOT
13910: IFFALSE 13914
// exit ;
13912: GO 14068
// for i in tmp do
13914: LD_ADDR_VAR 0 1
13918: PUSH
13919: LD_VAR 0 5
13923: PUSH
13924: FOR_IN
13925: IFFALSE 14066
// begin d := rand ( 0 , 5 ) ;
13927: LD_ADDR_VAR 0 4
13931: PUSH
13932: LD_INT 0
13934: PPUSH
13935: LD_INT 5
13937: PPUSH
13938: CALL_OW 12
13942: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13943: LD_ADDR_VAR 0 2
13947: PUSH
13948: LD_VAR 0 1
13952: PPUSH
13953: CALL_OW 250
13957: PPUSH
13958: LD_VAR 0 4
13962: PPUSH
13963: LD_INT 3
13965: PPUSH
13966: LD_INT 12
13968: PPUSH
13969: CALL_OW 12
13973: PPUSH
13974: CALL_OW 272
13978: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13979: LD_ADDR_VAR 0 3
13983: PUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 251
13993: PPUSH
13994: LD_VAR 0 4
13998: PPUSH
13999: LD_INT 3
14001: PPUSH
14002: LD_INT 12
14004: PPUSH
14005: CALL_OW 12
14009: PPUSH
14010: CALL_OW 273
14014: ST_TO_ADDR
// if ValidHex ( x , y ) then
14015: LD_VAR 0 2
14019: PPUSH
14020: LD_VAR 0 3
14024: PPUSH
14025: CALL_OW 488
14029: IFFALSE 14064
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14031: LD_VAR 0 1
14035: PPUSH
14036: LD_VAR 0 2
14040: PPUSH
14041: LD_VAR 0 3
14045: PPUSH
14046: LD_INT 3
14048: PPUSH
14049: LD_INT 6
14051: PPUSH
14052: CALL_OW 12
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 483
// end ;
14064: GO 13924
14066: POP
14067: POP
// end ;
14068: PPOPN 5
14070: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14071: LD_EXP 29
14075: PUSH
14076: LD_EXP 64
14080: AND
14081: IFFALSE 14175
14083: GO 14085
14085: DISABLE
14086: LD_INT 0
14088: PPUSH
14089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14090: LD_ADDR_VAR 0 2
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_OWVAR 2
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 32
14109: PUSH
14110: LD_INT 1
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 21
14119: PUSH
14120: LD_INT 2
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 69
14136: ST_TO_ADDR
// if not tmp then
14137: LD_VAR 0 2
14141: NOT
14142: IFFALSE 14146
// exit ;
14144: GO 14175
// for i in tmp do
14146: LD_ADDR_VAR 0 1
14150: PUSH
14151: LD_VAR 0 2
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14173
// SetFuel ( i , 0 ) ;
14159: LD_VAR 0 1
14163: PPUSH
14164: LD_INT 0
14166: PPUSH
14167: CALL_OW 240
14171: GO 14156
14173: POP
14174: POP
// end ;
14175: PPOPN 2
14177: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14178: LD_EXP 29
14182: PUSH
14183: LD_EXP 65
14187: AND
14188: IFFALSE 14254
14190: GO 14192
14192: DISABLE
14193: LD_INT 0
14195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14196: LD_ADDR_VAR 0 1
14200: PUSH
14201: LD_INT 22
14203: PUSH
14204: LD_OWVAR 2
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 30
14215: PUSH
14216: LD_INT 29
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: CALL_OW 69
14231: ST_TO_ADDR
// if not tmp then
14232: LD_VAR 0 1
14236: NOT
14237: IFFALSE 14241
// exit ;
14239: GO 14254
// DestroyUnit ( tmp [ 1 ] ) ;
14241: LD_VAR 0 1
14245: PUSH
14246: LD_INT 1
14248: ARRAY
14249: PPUSH
14250: CALL_OW 65
// end ;
14254: PPOPN 1
14256: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14257: LD_EXP 29
14261: PUSH
14262: LD_EXP 67
14266: AND
14267: IFFALSE 14396
14269: GO 14271
14271: DISABLE
14272: LD_INT 0
14274: PPUSH
// begin uc_side := 0 ;
14275: LD_ADDR_OWVAR 20
14279: PUSH
14280: LD_INT 0
14282: ST_TO_ADDR
// uc_nation := nation_arabian ;
14283: LD_ADDR_OWVAR 21
14287: PUSH
14288: LD_INT 2
14290: ST_TO_ADDR
// hc_gallery :=  ;
14291: LD_ADDR_OWVAR 33
14295: PUSH
14296: LD_STRING 
14298: ST_TO_ADDR
// hc_name :=  ;
14299: LD_ADDR_OWVAR 26
14303: PUSH
14304: LD_STRING 
14306: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14307: LD_INT 1
14309: PPUSH
14310: LD_INT 11
14312: PPUSH
14313: LD_INT 10
14315: PPUSH
14316: CALL_OW 380
// un := CreateHuman ;
14320: LD_ADDR_VAR 0 1
14324: PUSH
14325: CALL_OW 44
14329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14330: LD_VAR 0 1
14334: PPUSH
14335: LD_INT 1
14337: PPUSH
14338: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14342: LD_INT 35
14344: PPUSH
14345: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14349: LD_VAR 0 1
14353: PPUSH
14354: LD_INT 22
14356: PUSH
14357: LD_OWVAR 2
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 69
14370: PPUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 74
14380: PPUSH
14381: CALL_OW 115
// until IsDead ( un ) ;
14385: LD_VAR 0 1
14389: PPUSH
14390: CALL_OW 301
14394: IFFALSE 14342
// end ;
14396: PPOPN 1
14398: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14399: LD_EXP 29
14403: PUSH
14404: LD_EXP 69
14408: AND
14409: IFFALSE 14421
14411: GO 14413
14413: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14414: LD_STRING earthquake(getX(game), 0, 32)
14416: PPUSH
14417: CALL_OW 559
14421: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14422: LD_EXP 29
14426: PUSH
14427: LD_EXP 70
14431: AND
14432: IFFALSE 14523
14434: GO 14436
14436: DISABLE
14437: LD_INT 0
14439: PPUSH
// begin enable ;
14440: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14441: LD_ADDR_VAR 0 1
14445: PUSH
14446: LD_INT 22
14448: PUSH
14449: LD_OWVAR 2
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 21
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 33
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: LIST
14482: PPUSH
14483: CALL_OW 69
14487: ST_TO_ADDR
// if not tmp then
14488: LD_VAR 0 1
14492: NOT
14493: IFFALSE 14497
// exit ;
14495: GO 14523
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14497: LD_VAR 0 1
14501: PUSH
14502: LD_INT 1
14504: PPUSH
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 12
14514: ARRAY
14515: PPUSH
14516: LD_INT 1
14518: PPUSH
14519: CALL_OW 234
// end ;
14523: PPOPN 1
14525: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14526: LD_EXP 29
14530: PUSH
14531: LD_EXP 71
14535: AND
14536: IFFALSE 14677
14538: GO 14540
14540: DISABLE
14541: LD_INT 0
14543: PPUSH
14544: PPUSH
14545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_INT 22
14553: PUSH
14554: LD_OWVAR 2
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 25
14565: PUSH
14566: LD_INT 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 69
14581: ST_TO_ADDR
// if not tmp then
14582: LD_VAR 0 3
14586: NOT
14587: IFFALSE 14591
// exit ;
14589: GO 14677
// un := tmp [ rand ( 1 , tmp ) ] ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: LD_VAR 0 3
14600: PUSH
14601: LD_INT 1
14603: PPUSH
14604: LD_VAR 0 3
14608: PPUSH
14609: CALL_OW 12
14613: ARRAY
14614: ST_TO_ADDR
// if Crawls ( un ) then
14615: LD_VAR 0 2
14619: PPUSH
14620: CALL_OW 318
14624: IFFALSE 14635
// ComWalk ( un ) ;
14626: LD_VAR 0 2
14630: PPUSH
14631: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14635: LD_VAR 0 2
14639: PPUSH
14640: LD_INT 9
14642: PPUSH
14643: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14647: LD_INT 28
14649: PPUSH
14650: LD_OWVAR 2
14654: PPUSH
14655: LD_INT 2
14657: PPUSH
14658: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14662: LD_INT 29
14664: PPUSH
14665: LD_OWVAR 2
14669: PPUSH
14670: LD_INT 2
14672: PPUSH
14673: CALL_OW 322
// end ;
14677: PPOPN 3
14679: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14680: LD_EXP 29
14684: PUSH
14685: LD_EXP 72
14689: AND
14690: IFFALSE 14801
14692: GO 14694
14694: DISABLE
14695: LD_INT 0
14697: PPUSH
14698: PPUSH
14699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14700: LD_ADDR_VAR 0 3
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_OWVAR 2
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 25
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PPUSH
14731: CALL_OW 69
14735: ST_TO_ADDR
// if not tmp then
14736: LD_VAR 0 3
14740: NOT
14741: IFFALSE 14745
// exit ;
14743: GO 14801
// un := tmp [ rand ( 1 , tmp ) ] ;
14745: LD_ADDR_VAR 0 2
14749: PUSH
14750: LD_VAR 0 3
14754: PUSH
14755: LD_INT 1
14757: PPUSH
14758: LD_VAR 0 3
14762: PPUSH
14763: CALL_OW 12
14767: ARRAY
14768: ST_TO_ADDR
// if Crawls ( un ) then
14769: LD_VAR 0 2
14773: PPUSH
14774: CALL_OW 318
14778: IFFALSE 14789
// ComWalk ( un ) ;
14780: LD_VAR 0 2
14784: PPUSH
14785: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14789: LD_VAR 0 2
14793: PPUSH
14794: LD_INT 8
14796: PPUSH
14797: CALL_OW 336
// end ;
14801: PPOPN 3
14803: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14804: LD_EXP 29
14808: PUSH
14809: LD_EXP 73
14813: AND
14814: IFFALSE 14958
14816: GO 14818
14818: DISABLE
14819: LD_INT 0
14821: PPUSH
14822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14823: LD_ADDR_VAR 0 2
14827: PUSH
14828: LD_INT 22
14830: PUSH
14831: LD_OWVAR 2
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 21
14842: PUSH
14843: LD_INT 2
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 2
14852: PUSH
14853: LD_INT 34
14855: PUSH
14856: LD_INT 12
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 34
14865: PUSH
14866: LD_INT 51
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 34
14875: PUSH
14876: LD_INT 32
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: LIST
14893: PPUSH
14894: CALL_OW 69
14898: ST_TO_ADDR
// if not tmp then
14899: LD_VAR 0 2
14903: NOT
14904: IFFALSE 14908
// exit ;
14906: GO 14958
// for i in tmp do
14908: LD_ADDR_VAR 0 1
14912: PUSH
14913: LD_VAR 0 2
14917: PUSH
14918: FOR_IN
14919: IFFALSE 14956
// if GetCargo ( i , mat_artifact ) = 0 then
14921: LD_VAR 0 1
14925: PPUSH
14926: LD_INT 4
14928: PPUSH
14929: CALL_OW 289
14933: PUSH
14934: LD_INT 0
14936: EQUAL
14937: IFFALSE 14954
// SetCargo ( i , mat_siberit , 100 ) ;
14939: LD_VAR 0 1
14943: PPUSH
14944: LD_INT 3
14946: PPUSH
14947: LD_INT 100
14949: PPUSH
14950: CALL_OW 290
14954: GO 14918
14956: POP
14957: POP
// end ;
14958: PPOPN 2
14960: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14961: LD_EXP 29
14965: PUSH
14966: LD_EXP 74
14970: AND
14971: IFFALSE 15154
14973: GO 14975
14975: DISABLE
14976: LD_INT 0
14978: PPUSH
14979: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14980: LD_ADDR_VAR 0 2
14984: PUSH
14985: LD_INT 22
14987: PUSH
14988: LD_OWVAR 2
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: ST_TO_ADDR
// if not tmp then
15002: LD_VAR 0 2
15006: NOT
15007: IFFALSE 15011
// exit ;
15009: GO 15154
// for i := 1 to 2 do
15011: LD_ADDR_VAR 0 1
15015: PUSH
15016: DOUBLE
15017: LD_INT 1
15019: DEC
15020: ST_TO_ADDR
15021: LD_INT 2
15023: PUSH
15024: FOR_TO
15025: IFFALSE 15152
// begin uc_side := your_side ;
15027: LD_ADDR_OWVAR 20
15031: PUSH
15032: LD_OWVAR 2
15036: ST_TO_ADDR
// uc_nation := nation_american ;
15037: LD_ADDR_OWVAR 21
15041: PUSH
15042: LD_INT 1
15044: ST_TO_ADDR
// vc_chassis := us_morphling ;
15045: LD_ADDR_OWVAR 37
15049: PUSH
15050: LD_INT 5
15052: ST_TO_ADDR
// vc_engine := engine_siberite ;
15053: LD_ADDR_OWVAR 39
15057: PUSH
15058: LD_INT 3
15060: ST_TO_ADDR
// vc_control := control_computer ;
15061: LD_ADDR_OWVAR 38
15065: PUSH
15066: LD_INT 3
15068: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15069: LD_ADDR_OWVAR 40
15073: PUSH
15074: LD_INT 10
15076: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15077: LD_VAR 0 2
15081: PUSH
15082: LD_INT 1
15084: ARRAY
15085: PPUSH
15086: CALL_OW 310
15090: NOT
15091: IFFALSE 15138
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15093: CALL_OW 45
15097: PPUSH
15098: LD_VAR 0 2
15102: PUSH
15103: LD_INT 1
15105: ARRAY
15106: PPUSH
15107: CALL_OW 250
15111: PPUSH
15112: LD_VAR 0 2
15116: PUSH
15117: LD_INT 1
15119: ARRAY
15120: PPUSH
15121: CALL_OW 251
15125: PPUSH
15126: LD_INT 12
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: CALL_OW 50
15136: GO 15150
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15138: CALL_OW 45
15142: PPUSH
15143: LD_INT 1
15145: PPUSH
15146: CALL_OW 51
// end ;
15150: GO 15024
15152: POP
15153: POP
// end ;
15154: PPOPN 2
15156: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15157: LD_EXP 29
15161: PUSH
15162: LD_EXP 75
15166: AND
15167: IFFALSE 15389
15169: GO 15171
15171: DISABLE
15172: LD_INT 0
15174: PPUSH
15175: PPUSH
15176: PPUSH
15177: PPUSH
15178: PPUSH
15179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15180: LD_ADDR_VAR 0 6
15184: PUSH
15185: LD_INT 22
15187: PUSH
15188: LD_OWVAR 2
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 21
15199: PUSH
15200: LD_INT 1
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 3
15209: PUSH
15210: LD_INT 23
15212: PUSH
15213: LD_INT 0
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: PPUSH
15229: CALL_OW 69
15233: ST_TO_ADDR
// if not tmp then
15234: LD_VAR 0 6
15238: NOT
15239: IFFALSE 15243
// exit ;
15241: GO 15389
// s1 := rand ( 1 , 4 ) ;
15243: LD_ADDR_VAR 0 2
15247: PUSH
15248: LD_INT 1
15250: PPUSH
15251: LD_INT 4
15253: PPUSH
15254: CALL_OW 12
15258: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15259: LD_ADDR_VAR 0 4
15263: PUSH
15264: LD_VAR 0 6
15268: PUSH
15269: LD_INT 1
15271: ARRAY
15272: PPUSH
15273: LD_VAR 0 2
15277: PPUSH
15278: CALL_OW 259
15282: ST_TO_ADDR
// if s1 = 1 then
15283: LD_VAR 0 2
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: IFFALSE 15311
// s2 := rand ( 2 , 4 ) else
15293: LD_ADDR_VAR 0 3
15297: PUSH
15298: LD_INT 2
15300: PPUSH
15301: LD_INT 4
15303: PPUSH
15304: CALL_OW 12
15308: ST_TO_ADDR
15309: GO 15319
// s2 := 1 ;
15311: LD_ADDR_VAR 0 3
15315: PUSH
15316: LD_INT 1
15318: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15319: LD_ADDR_VAR 0 5
15323: PUSH
15324: LD_VAR 0 6
15328: PUSH
15329: LD_INT 1
15331: ARRAY
15332: PPUSH
15333: LD_VAR 0 3
15337: PPUSH
15338: CALL_OW 259
15342: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15343: LD_VAR 0 6
15347: PUSH
15348: LD_INT 1
15350: ARRAY
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: LD_VAR 0 5
15361: PPUSH
15362: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15366: LD_VAR 0 6
15370: PUSH
15371: LD_INT 1
15373: ARRAY
15374: PPUSH
15375: LD_VAR 0 3
15379: PPUSH
15380: LD_VAR 0 4
15384: PPUSH
15385: CALL_OW 237
// end ;
15389: PPOPN 6
15391: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15392: LD_EXP 29
15396: PUSH
15397: LD_EXP 76
15401: AND
15402: IFFALSE 15481
15404: GO 15406
15406: DISABLE
15407: LD_INT 0
15409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15410: LD_ADDR_VAR 0 1
15414: PUSH
15415: LD_INT 22
15417: PUSH
15418: LD_OWVAR 2
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 30
15429: PUSH
15430: LD_INT 3
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: ST_TO_ADDR
// if not tmp then
15446: LD_VAR 0 1
15450: NOT
15451: IFFALSE 15455
// exit ;
15453: GO 15481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15455: LD_VAR 0 1
15459: PUSH
15460: LD_INT 1
15462: PPUSH
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 12
15472: ARRAY
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 234
// end ;
15481: PPOPN 1
15483: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15484: LD_EXP 29
15488: PUSH
15489: LD_EXP 77
15493: AND
15494: IFFALSE 15606
15496: GO 15498
15498: DISABLE
15499: LD_INT 0
15501: PPUSH
15502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15503: LD_ADDR_VAR 0 2
15507: PUSH
15508: LD_INT 22
15510: PUSH
15511: LD_OWVAR 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 2
15522: PUSH
15523: LD_INT 30
15525: PUSH
15526: LD_INT 27
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 30
15535: PUSH
15536: LD_INT 26
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 30
15545: PUSH
15546: LD_INT 28
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PPUSH
15563: CALL_OW 69
15567: ST_TO_ADDR
// if not tmp then
15568: LD_VAR 0 2
15572: NOT
15573: IFFALSE 15577
// exit ;
15575: GO 15606
// for i in tmp do
15577: LD_ADDR_VAR 0 1
15581: PUSH
15582: LD_VAR 0 2
15586: PUSH
15587: FOR_IN
15588: IFFALSE 15604
// SetLives ( i , 1 ) ;
15590: LD_VAR 0 1
15594: PPUSH
15595: LD_INT 1
15597: PPUSH
15598: CALL_OW 234
15602: GO 15587
15604: POP
15605: POP
// end ;
15606: PPOPN 2
15608: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15609: LD_EXP 29
15613: PUSH
15614: LD_EXP 78
15618: AND
15619: IFFALSE 15906
15621: GO 15623
15623: DISABLE
15624: LD_INT 0
15626: PPUSH
15627: PPUSH
15628: PPUSH
// begin i := rand ( 1 , 7 ) ;
15629: LD_ADDR_VAR 0 1
15633: PUSH
15634: LD_INT 1
15636: PPUSH
15637: LD_INT 7
15639: PPUSH
15640: CALL_OW 12
15644: ST_TO_ADDR
// case i of 1 :
15645: LD_VAR 0 1
15649: PUSH
15650: LD_INT 1
15652: DOUBLE
15653: EQUAL
15654: IFTRUE 15658
15656: GO 15668
15658: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15659: LD_STRING earthquake(getX(game), 0, 32)
15661: PPUSH
15662: CALL_OW 559
15666: GO 15906
15668: LD_INT 2
15670: DOUBLE
15671: EQUAL
15672: IFTRUE 15676
15674: GO 15690
15676: POP
// begin ToLua ( displayStucuk(); ) ;
15677: LD_STRING displayStucuk();
15679: PPUSH
15680: CALL_OW 559
// ResetFog ;
15684: CALL_OW 335
// end ; 3 :
15688: GO 15906
15690: LD_INT 3
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15698
15696: GO 15802
15698: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15699: LD_ADDR_VAR 0 2
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_OWVAR 2
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 25
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 69
15734: ST_TO_ADDR
// if not tmp then
15735: LD_VAR 0 2
15739: NOT
15740: IFFALSE 15744
// exit ;
15742: GO 15906
// un := tmp [ rand ( 1 , tmp ) ] ;
15744: LD_ADDR_VAR 0 3
15748: PUSH
15749: LD_VAR 0 2
15753: PUSH
15754: LD_INT 1
15756: PPUSH
15757: LD_VAR 0 2
15761: PPUSH
15762: CALL_OW 12
15766: ARRAY
15767: ST_TO_ADDR
// if Crawls ( un ) then
15768: LD_VAR 0 3
15772: PPUSH
15773: CALL_OW 318
15777: IFFALSE 15788
// ComWalk ( un ) ;
15779: LD_VAR 0 3
15783: PPUSH
15784: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15788: LD_VAR 0 3
15792: PPUSH
15793: LD_INT 8
15795: PPUSH
15796: CALL_OW 336
// end ; 4 :
15800: GO 15906
15802: LD_INT 4
15804: DOUBLE
15805: EQUAL
15806: IFTRUE 15810
15808: GO 15884
15810: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15811: LD_ADDR_VAR 0 2
15815: PUSH
15816: LD_INT 22
15818: PUSH
15819: LD_OWVAR 2
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 30
15830: PUSH
15831: LD_INT 29
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: ST_TO_ADDR
// if not tmp then
15847: LD_VAR 0 2
15851: NOT
15852: IFFALSE 15856
// exit ;
15854: GO 15906
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15856: LD_VAR 0 2
15860: PUSH
15861: LD_INT 1
15863: ARRAY
15864: PPUSH
15865: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15869: LD_VAR 0 2
15873: PUSH
15874: LD_INT 1
15876: ARRAY
15877: PPUSH
15878: CALL_OW 65
// end ; 5 .. 7 :
15882: GO 15906
15884: LD_INT 5
15886: DOUBLE
15887: GREATEREQUAL
15888: IFFALSE 15896
15890: LD_INT 7
15892: DOUBLE
15893: LESSEQUAL
15894: IFTRUE 15898
15896: GO 15905
15898: POP
// StreamSibBomb ; end ;
15899: CALL 12143 0 0
15903: GO 15906
15905: POP
// end ;
15906: PPOPN 3
15908: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15909: LD_EXP 29
15913: PUSH
15914: LD_EXP 79
15918: AND
15919: IFFALSE 16075
15921: GO 15923
15923: DISABLE
15924: LD_INT 0
15926: PPUSH
15927: PPUSH
15928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15929: LD_ADDR_VAR 0 2
15933: PUSH
15934: LD_INT 81
15936: PUSH
15937: LD_OWVAR 2
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: LD_INT 21
15951: PUSH
15952: LD_INT 1
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PPUSH
15978: CALL_OW 69
15982: ST_TO_ADDR
// if not tmp then
15983: LD_VAR 0 2
15987: NOT
15988: IFFALSE 15992
// exit ;
15990: GO 16075
// p := 0 ;
15992: LD_ADDR_VAR 0 3
15996: PUSH
15997: LD_INT 0
15999: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16000: LD_INT 35
16002: PPUSH
16003: CALL_OW 67
// p := p + 1 ;
16007: LD_ADDR_VAR 0 3
16011: PUSH
16012: LD_VAR 0 3
16016: PUSH
16017: LD_INT 1
16019: PLUS
16020: ST_TO_ADDR
// for i in tmp do
16021: LD_ADDR_VAR 0 1
16025: PUSH
16026: LD_VAR 0 2
16030: PUSH
16031: FOR_IN
16032: IFFALSE 16063
// if GetLives ( i ) < 1000 then
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 256
16043: PUSH
16044: LD_INT 1000
16046: LESS
16047: IFFALSE 16061
// SetLives ( i , 1000 ) ;
16049: LD_VAR 0 1
16053: PPUSH
16054: LD_INT 1000
16056: PPUSH
16057: CALL_OW 234
16061: GO 16031
16063: POP
16064: POP
// until p > 20 ;
16065: LD_VAR 0 3
16069: PUSH
16070: LD_INT 20
16072: GREATER
16073: IFFALSE 16000
// end ;
16075: PPOPN 3
16077: END
// every 0 0$1 trigger StreamModeActive and sTime do
16078: LD_EXP 29
16082: PUSH
16083: LD_EXP 80
16087: AND
16088: IFFALSE 16123
16090: GO 16092
16092: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16093: LD_INT 28
16095: PPUSH
16096: LD_OWVAR 2
16100: PPUSH
16101: LD_INT 2
16103: PPUSH
16104: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16108: LD_INT 30
16110: PPUSH
16111: LD_OWVAR 2
16115: PPUSH
16116: LD_INT 2
16118: PPUSH
16119: CALL_OW 322
// end ;
16123: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16124: LD_EXP 29
16128: PUSH
16129: LD_EXP 81
16133: AND
16134: IFFALSE 16255
16136: GO 16138
16138: DISABLE
16139: LD_INT 0
16141: PPUSH
16142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16143: LD_ADDR_VAR 0 2
16147: PUSH
16148: LD_INT 22
16150: PUSH
16151: LD_OWVAR 2
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 21
16162: PUSH
16163: LD_INT 1
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: LD_INT 23
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: ST_TO_ADDR
// if not tmp then
16197: LD_VAR 0 2
16201: NOT
16202: IFFALSE 16206
// exit ;
16204: GO 16255
// for i in tmp do
16206: LD_ADDR_VAR 0 1
16210: PUSH
16211: LD_VAR 0 2
16215: PUSH
16216: FOR_IN
16217: IFFALSE 16253
// begin if Crawls ( i ) then
16219: LD_VAR 0 1
16223: PPUSH
16224: CALL_OW 318
16228: IFFALSE 16239
// ComWalk ( i ) ;
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL_OW 138
// SetClass ( i , 2 ) ;
16239: LD_VAR 0 1
16243: PPUSH
16244: LD_INT 2
16246: PPUSH
16247: CALL_OW 336
// end ;
16251: GO 16216
16253: POP
16254: POP
// end ;
16255: PPOPN 2
16257: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16258: LD_EXP 29
16262: PUSH
16263: LD_EXP 82
16267: AND
16268: IFFALSE 16556
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
16277: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16278: LD_OWVAR 2
16282: PPUSH
16283: LD_INT 9
16285: PPUSH
16286: LD_INT 1
16288: PPUSH
16289: LD_INT 1
16291: PPUSH
16292: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16296: LD_INT 9
16298: PPUSH
16299: LD_OWVAR 2
16303: PPUSH
16304: CALL_OW 343
// uc_side := 9 ;
16308: LD_ADDR_OWVAR 20
16312: PUSH
16313: LD_INT 9
16315: ST_TO_ADDR
// uc_nation := 2 ;
16316: LD_ADDR_OWVAR 21
16320: PUSH
16321: LD_INT 2
16323: ST_TO_ADDR
// hc_name := Dark Warrior ;
16324: LD_ADDR_OWVAR 26
16328: PUSH
16329: LD_STRING Dark Warrior
16331: ST_TO_ADDR
// hc_gallery :=  ;
16332: LD_ADDR_OWVAR 33
16336: PUSH
16337: LD_STRING 
16339: ST_TO_ADDR
// hc_noskilllimit := true ;
16340: LD_ADDR_OWVAR 76
16344: PUSH
16345: LD_INT 1
16347: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16348: LD_ADDR_OWVAR 31
16352: PUSH
16353: LD_INT 30
16355: PUSH
16356: LD_INT 30
16358: PUSH
16359: LD_INT 30
16361: PUSH
16362: LD_INT 30
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: ST_TO_ADDR
// un := CreateHuman ;
16371: LD_ADDR_VAR 0 3
16375: PUSH
16376: CALL_OW 44
16380: ST_TO_ADDR
// hc_noskilllimit := false ;
16381: LD_ADDR_OWVAR 76
16385: PUSH
16386: LD_INT 0
16388: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16389: LD_VAR 0 3
16393: PPUSH
16394: LD_INT 1
16396: PPUSH
16397: CALL_OW 51
// ToLua ( playRanger() ) ;
16401: LD_STRING playRanger()
16403: PPUSH
16404: CALL_OW 559
// p := 0 ;
16408: LD_ADDR_VAR 0 2
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16416: LD_INT 35
16418: PPUSH
16419: CALL_OW 67
// p := p + 1 ;
16423: LD_ADDR_VAR 0 2
16427: PUSH
16428: LD_VAR 0 2
16432: PUSH
16433: LD_INT 1
16435: PLUS
16436: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16437: LD_VAR 0 3
16441: PPUSH
16442: CALL_OW 256
16446: PUSH
16447: LD_INT 1000
16449: LESS
16450: IFFALSE 16464
// SetLives ( un , 1000 ) ;
16452: LD_VAR 0 3
16456: PPUSH
16457: LD_INT 1000
16459: PPUSH
16460: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16464: LD_VAR 0 3
16468: PPUSH
16469: LD_INT 81
16471: PUSH
16472: LD_OWVAR 2
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 91
16483: PUSH
16484: LD_VAR 0 3
16488: PUSH
16489: LD_INT 30
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PPUSH
16501: CALL_OW 69
16505: PPUSH
16506: LD_VAR 0 3
16510: PPUSH
16511: CALL_OW 74
16515: PPUSH
16516: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16520: LD_VAR 0 2
16524: PUSH
16525: LD_INT 80
16527: GREATER
16528: PUSH
16529: LD_VAR 0 3
16533: PPUSH
16534: CALL_OW 301
16538: OR
16539: IFFALSE 16416
// if un then
16541: LD_VAR 0 3
16545: IFFALSE 16556
// RemoveUnit ( un ) ;
16547: LD_VAR 0 3
16551: PPUSH
16552: CALL_OW 64
// end ;
16556: PPOPN 3
16558: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16559: LD_EXP 83
16563: IFFALSE 16679
16565: GO 16567
16567: DISABLE
16568: LD_INT 0
16570: PPUSH
16571: PPUSH
16572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16573: LD_ADDR_VAR 0 2
16577: PUSH
16578: LD_INT 81
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 21
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PPUSH
16604: CALL_OW 69
16608: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16609: LD_STRING playComputer()
16611: PPUSH
16612: CALL_OW 559
// if not tmp then
16616: LD_VAR 0 2
16620: NOT
16621: IFFALSE 16625
// exit ;
16623: GO 16679
// for i in tmp do
16625: LD_ADDR_VAR 0 1
16629: PUSH
16630: LD_VAR 0 2
16634: PUSH
16635: FOR_IN
16636: IFFALSE 16677
// for j := 1 to 4 do
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: DOUBLE
16644: LD_INT 1
16646: DEC
16647: ST_TO_ADDR
16648: LD_INT 4
16650: PUSH
16651: FOR_TO
16652: IFFALSE 16673
// SetSkill ( i , j , 10 ) ;
16654: LD_VAR 0 1
16658: PPUSH
16659: LD_VAR 0 3
16663: PPUSH
16664: LD_INT 10
16666: PPUSH
16667: CALL_OW 237
16671: GO 16651
16673: POP
16674: POP
16675: GO 16635
16677: POP
16678: POP
// end ;
16679: PPOPN 3
16681: END
// every 0 0$1 trigger s30 do var i , tmp ;
16682: LD_EXP 84
16686: IFFALSE 16755
16688: GO 16690
16690: DISABLE
16691: LD_INT 0
16693: PPUSH
16694: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16695: LD_ADDR_VAR 0 2
16699: PUSH
16700: LD_INT 22
16702: PUSH
16703: LD_OWVAR 2
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PPUSH
16712: CALL_OW 69
16716: ST_TO_ADDR
// if not tmp then
16717: LD_VAR 0 2
16721: NOT
16722: IFFALSE 16726
// exit ;
16724: GO 16755
// for i in tmp do
16726: LD_ADDR_VAR 0 1
16730: PUSH
16731: LD_VAR 0 2
16735: PUSH
16736: FOR_IN
16737: IFFALSE 16753
// SetLives ( i , 300 ) ;
16739: LD_VAR 0 1
16743: PPUSH
16744: LD_INT 300
16746: PPUSH
16747: CALL_OW 234
16751: GO 16736
16753: POP
16754: POP
// end ;
16755: PPOPN 2
16757: END
// every 0 0$1 trigger s60 do var i , tmp ;
16758: LD_EXP 85
16762: IFFALSE 16831
16764: GO 16766
16766: DISABLE
16767: LD_INT 0
16769: PPUSH
16770: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16771: LD_ADDR_VAR 0 2
16775: PUSH
16776: LD_INT 22
16778: PUSH
16779: LD_OWVAR 2
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PPUSH
16788: CALL_OW 69
16792: ST_TO_ADDR
// if not tmp then
16793: LD_VAR 0 2
16797: NOT
16798: IFFALSE 16802
// exit ;
16800: GO 16831
// for i in tmp do
16802: LD_ADDR_VAR 0 1
16806: PUSH
16807: LD_VAR 0 2
16811: PUSH
16812: FOR_IN
16813: IFFALSE 16829
// SetLives ( i , 600 ) ;
16815: LD_VAR 0 1
16819: PPUSH
16820: LD_INT 600
16822: PPUSH
16823: CALL_OW 234
16827: GO 16812
16829: POP
16830: POP
// end ;
16831: PPOPN 2
16833: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16834: LD_INT 0
16836: PPUSH
// case cmd of 301 :
16837: LD_VAR 0 1
16841: PUSH
16842: LD_INT 301
16844: DOUBLE
16845: EQUAL
16846: IFTRUE 16850
16848: GO 16882
16850: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16851: LD_VAR 0 6
16855: PPUSH
16856: LD_VAR 0 7
16860: PPUSH
16861: LD_VAR 0 8
16865: PPUSH
16866: LD_VAR 0 4
16870: PPUSH
16871: LD_VAR 0 5
16875: PPUSH
16876: CALL 18083 0 5
16880: GO 17003
16882: LD_INT 302
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16890
16888: GO 16927
16890: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16891: LD_VAR 0 6
16895: PPUSH
16896: LD_VAR 0 7
16900: PPUSH
16901: LD_VAR 0 8
16905: PPUSH
16906: LD_VAR 0 9
16910: PPUSH
16911: LD_VAR 0 4
16915: PPUSH
16916: LD_VAR 0 5
16920: PPUSH
16921: CALL 18174 0 6
16925: GO 17003
16927: LD_INT 303
16929: DOUBLE
16930: EQUAL
16931: IFTRUE 16935
16933: GO 16972
16935: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16936: LD_VAR 0 6
16940: PPUSH
16941: LD_VAR 0 7
16945: PPUSH
16946: LD_VAR 0 8
16950: PPUSH
16951: LD_VAR 0 9
16955: PPUSH
16956: LD_VAR 0 4
16960: PPUSH
16961: LD_VAR 0 5
16965: PPUSH
16966: CALL 17008 0 6
16970: GO 17003
16972: LD_INT 304
16974: DOUBLE
16975: EQUAL
16976: IFTRUE 16980
16978: GO 17002
16980: POP
// hHackTeleport ( unit , x , y ) ; end ;
16981: LD_VAR 0 2
16985: PPUSH
16986: LD_VAR 0 4
16990: PPUSH
16991: LD_VAR 0 5
16995: PPUSH
16996: CALL 18767 0 3
17000: GO 17003
17002: POP
// end ;
17003: LD_VAR 0 12
17007: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17008: LD_INT 0
17010: PPUSH
17011: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17012: LD_VAR 0 1
17016: PUSH
17017: LD_INT 1
17019: LESS
17020: PUSH
17021: LD_VAR 0 1
17025: PUSH
17026: LD_INT 3
17028: GREATER
17029: OR
17030: PUSH
17031: LD_VAR 0 5
17035: PPUSH
17036: LD_VAR 0 6
17040: PPUSH
17041: CALL_OW 428
17045: OR
17046: IFFALSE 17050
// exit ;
17048: GO 17770
// uc_side := your_side ;
17050: LD_ADDR_OWVAR 20
17054: PUSH
17055: LD_OWVAR 2
17059: ST_TO_ADDR
// uc_nation := nation ;
17060: LD_ADDR_OWVAR 21
17064: PUSH
17065: LD_VAR 0 1
17069: ST_TO_ADDR
// bc_level = 1 ;
17070: LD_ADDR_OWVAR 43
17074: PUSH
17075: LD_INT 1
17077: ST_TO_ADDR
// case btype of 1 :
17078: LD_VAR 0 2
17082: PUSH
17083: LD_INT 1
17085: DOUBLE
17086: EQUAL
17087: IFTRUE 17091
17089: GO 17102
17091: POP
// bc_type := b_depot ; 2 :
17092: LD_ADDR_OWVAR 42
17096: PUSH
17097: LD_INT 0
17099: ST_TO_ADDR
17100: GO 17714
17102: LD_INT 2
17104: DOUBLE
17105: EQUAL
17106: IFTRUE 17110
17108: GO 17121
17110: POP
// bc_type := b_warehouse ; 3 :
17111: LD_ADDR_OWVAR 42
17115: PUSH
17116: LD_INT 1
17118: ST_TO_ADDR
17119: GO 17714
17121: LD_INT 3
17123: DOUBLE
17124: EQUAL
17125: IFTRUE 17129
17127: GO 17140
17129: POP
// bc_type := b_lab ; 4 .. 9 :
17130: LD_ADDR_OWVAR 42
17134: PUSH
17135: LD_INT 6
17137: ST_TO_ADDR
17138: GO 17714
17140: LD_INT 4
17142: DOUBLE
17143: GREATEREQUAL
17144: IFFALSE 17152
17146: LD_INT 9
17148: DOUBLE
17149: LESSEQUAL
17150: IFTRUE 17154
17152: GO 17206
17154: POP
// begin bc_type := b_lab_half ;
17155: LD_ADDR_OWVAR 42
17159: PUSH
17160: LD_INT 7
17162: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17163: LD_ADDR_OWVAR 44
17167: PUSH
17168: LD_INT 10
17170: PUSH
17171: LD_INT 11
17173: PUSH
17174: LD_INT 12
17176: PUSH
17177: LD_INT 15
17179: PUSH
17180: LD_INT 14
17182: PUSH
17183: LD_INT 13
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: PUSH
17194: LD_VAR 0 2
17198: PUSH
17199: LD_INT 3
17201: MINUS
17202: ARRAY
17203: ST_TO_ADDR
// end ; 10 .. 13 :
17204: GO 17714
17206: LD_INT 10
17208: DOUBLE
17209: GREATEREQUAL
17210: IFFALSE 17218
17212: LD_INT 13
17214: DOUBLE
17215: LESSEQUAL
17216: IFTRUE 17220
17218: GO 17297
17220: POP
// begin bc_type := b_lab_full ;
17221: LD_ADDR_OWVAR 42
17225: PUSH
17226: LD_INT 8
17228: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17229: LD_ADDR_OWVAR 44
17233: PUSH
17234: LD_INT 10
17236: PUSH
17237: LD_INT 12
17239: PUSH
17240: LD_INT 14
17242: PUSH
17243: LD_INT 13
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: PUSH
17252: LD_VAR 0 2
17256: PUSH
17257: LD_INT 9
17259: MINUS
17260: ARRAY
17261: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17262: LD_ADDR_OWVAR 45
17266: PUSH
17267: LD_INT 11
17269: PUSH
17270: LD_INT 15
17272: PUSH
17273: LD_INT 12
17275: PUSH
17276: LD_INT 15
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: PUSH
17285: LD_VAR 0 2
17289: PUSH
17290: LD_INT 9
17292: MINUS
17293: ARRAY
17294: ST_TO_ADDR
// end ; 14 :
17295: GO 17714
17297: LD_INT 14
17299: DOUBLE
17300: EQUAL
17301: IFTRUE 17305
17303: GO 17316
17305: POP
// bc_type := b_workshop ; 15 :
17306: LD_ADDR_OWVAR 42
17310: PUSH
17311: LD_INT 2
17313: ST_TO_ADDR
17314: GO 17714
17316: LD_INT 15
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17335
17324: POP
// bc_type := b_factory ; 16 :
17325: LD_ADDR_OWVAR 42
17329: PUSH
17330: LD_INT 3
17332: ST_TO_ADDR
17333: GO 17714
17335: LD_INT 16
17337: DOUBLE
17338: EQUAL
17339: IFTRUE 17343
17341: GO 17354
17343: POP
// bc_type := b_ext_gun ; 17 :
17344: LD_ADDR_OWVAR 42
17348: PUSH
17349: LD_INT 17
17351: ST_TO_ADDR
17352: GO 17714
17354: LD_INT 17
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17390
17362: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17363: LD_ADDR_OWVAR 42
17367: PUSH
17368: LD_INT 19
17370: PUSH
17371: LD_INT 23
17373: PUSH
17374: LD_INT 19
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: LIST
17381: PUSH
17382: LD_VAR 0 1
17386: ARRAY
17387: ST_TO_ADDR
17388: GO 17714
17390: LD_INT 18
17392: DOUBLE
17393: EQUAL
17394: IFTRUE 17398
17396: GO 17409
17398: POP
// bc_type := b_ext_radar ; 19 :
17399: LD_ADDR_OWVAR 42
17403: PUSH
17404: LD_INT 20
17406: ST_TO_ADDR
17407: GO 17714
17409: LD_INT 19
17411: DOUBLE
17412: EQUAL
17413: IFTRUE 17417
17415: GO 17428
17417: POP
// bc_type := b_ext_radio ; 20 :
17418: LD_ADDR_OWVAR 42
17422: PUSH
17423: LD_INT 22
17425: ST_TO_ADDR
17426: GO 17714
17428: LD_INT 20
17430: DOUBLE
17431: EQUAL
17432: IFTRUE 17436
17434: GO 17447
17436: POP
// bc_type := b_ext_siberium ; 21 :
17437: LD_ADDR_OWVAR 42
17441: PUSH
17442: LD_INT 21
17444: ST_TO_ADDR
17445: GO 17714
17447: LD_INT 21
17449: DOUBLE
17450: EQUAL
17451: IFTRUE 17455
17453: GO 17466
17455: POP
// bc_type := b_ext_computer ; 22 :
17456: LD_ADDR_OWVAR 42
17460: PUSH
17461: LD_INT 24
17463: ST_TO_ADDR
17464: GO 17714
17466: LD_INT 22
17468: DOUBLE
17469: EQUAL
17470: IFTRUE 17474
17472: GO 17485
17474: POP
// bc_type := b_ext_track ; 23 :
17475: LD_ADDR_OWVAR 42
17479: PUSH
17480: LD_INT 16
17482: ST_TO_ADDR
17483: GO 17714
17485: LD_INT 23
17487: DOUBLE
17488: EQUAL
17489: IFTRUE 17493
17491: GO 17504
17493: POP
// bc_type := b_ext_laser ; 24 :
17494: LD_ADDR_OWVAR 42
17498: PUSH
17499: LD_INT 25
17501: ST_TO_ADDR
17502: GO 17714
17504: LD_INT 24
17506: DOUBLE
17507: EQUAL
17508: IFTRUE 17512
17510: GO 17523
17512: POP
// bc_type := b_control_tower ; 25 :
17513: LD_ADDR_OWVAR 42
17517: PUSH
17518: LD_INT 36
17520: ST_TO_ADDR
17521: GO 17714
17523: LD_INT 25
17525: DOUBLE
17526: EQUAL
17527: IFTRUE 17531
17529: GO 17542
17531: POP
// bc_type := b_breastwork ; 26 :
17532: LD_ADDR_OWVAR 42
17536: PUSH
17537: LD_INT 31
17539: ST_TO_ADDR
17540: GO 17714
17542: LD_INT 26
17544: DOUBLE
17545: EQUAL
17546: IFTRUE 17550
17548: GO 17561
17550: POP
// bc_type := b_bunker ; 27 :
17551: LD_ADDR_OWVAR 42
17555: PUSH
17556: LD_INT 32
17558: ST_TO_ADDR
17559: GO 17714
17561: LD_INT 27
17563: DOUBLE
17564: EQUAL
17565: IFTRUE 17569
17567: GO 17580
17569: POP
// bc_type := b_turret ; 28 :
17570: LD_ADDR_OWVAR 42
17574: PUSH
17575: LD_INT 33
17577: ST_TO_ADDR
17578: GO 17714
17580: LD_INT 28
17582: DOUBLE
17583: EQUAL
17584: IFTRUE 17588
17586: GO 17599
17588: POP
// bc_type := b_armoury ; 29 :
17589: LD_ADDR_OWVAR 42
17593: PUSH
17594: LD_INT 4
17596: ST_TO_ADDR
17597: GO 17714
17599: LD_INT 29
17601: DOUBLE
17602: EQUAL
17603: IFTRUE 17607
17605: GO 17618
17607: POP
// bc_type := b_barracks ; 30 :
17608: LD_ADDR_OWVAR 42
17612: PUSH
17613: LD_INT 5
17615: ST_TO_ADDR
17616: GO 17714
17618: LD_INT 30
17620: DOUBLE
17621: EQUAL
17622: IFTRUE 17626
17624: GO 17637
17626: POP
// bc_type := b_solar_power ; 31 :
17627: LD_ADDR_OWVAR 42
17631: PUSH
17632: LD_INT 27
17634: ST_TO_ADDR
17635: GO 17714
17637: LD_INT 31
17639: DOUBLE
17640: EQUAL
17641: IFTRUE 17645
17643: GO 17656
17645: POP
// bc_type := b_oil_power ; 32 :
17646: LD_ADDR_OWVAR 42
17650: PUSH
17651: LD_INT 26
17653: ST_TO_ADDR
17654: GO 17714
17656: LD_INT 32
17658: DOUBLE
17659: EQUAL
17660: IFTRUE 17664
17662: GO 17675
17664: POP
// bc_type := b_siberite_power ; 33 :
17665: LD_ADDR_OWVAR 42
17669: PUSH
17670: LD_INT 28
17672: ST_TO_ADDR
17673: GO 17714
17675: LD_INT 33
17677: DOUBLE
17678: EQUAL
17679: IFTRUE 17683
17681: GO 17694
17683: POP
// bc_type := b_oil_mine ; 34 :
17684: LD_ADDR_OWVAR 42
17688: PUSH
17689: LD_INT 29
17691: ST_TO_ADDR
17692: GO 17714
17694: LD_INT 34
17696: DOUBLE
17697: EQUAL
17698: IFTRUE 17702
17700: GO 17713
17702: POP
// bc_type := b_siberite_mine ; end ;
17703: LD_ADDR_OWVAR 42
17707: PUSH
17708: LD_INT 30
17710: ST_TO_ADDR
17711: GO 17714
17713: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17714: LD_ADDR_VAR 0 8
17718: PUSH
17719: LD_VAR 0 5
17723: PPUSH
17724: LD_VAR 0 6
17728: PPUSH
17729: LD_VAR 0 3
17733: PPUSH
17734: CALL_OW 47
17738: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17739: LD_OWVAR 42
17743: PUSH
17744: LD_INT 32
17746: PUSH
17747: LD_INT 33
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: IN
17754: IFFALSE 17770
// PlaceWeaponTurret ( b , weapon ) ;
17756: LD_VAR 0 8
17760: PPUSH
17761: LD_VAR 0 4
17765: PPUSH
17766: CALL_OW 431
// end ;
17770: LD_VAR 0 7
17774: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17775: LD_INT 0
17777: PPUSH
17778: PPUSH
17779: PPUSH
17780: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17781: LD_ADDR_VAR 0 4
17785: PUSH
17786: LD_INT 22
17788: PUSH
17789: LD_OWVAR 2
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 2
17800: PUSH
17801: LD_INT 30
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 30
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 69
17834: ST_TO_ADDR
// if not tmp then
17835: LD_VAR 0 4
17839: NOT
17840: IFFALSE 17844
// exit ;
17842: GO 17903
// for i in tmp do
17844: LD_ADDR_VAR 0 2
17848: PUSH
17849: LD_VAR 0 4
17853: PUSH
17854: FOR_IN
17855: IFFALSE 17901
// for j = 1 to 3 do
17857: LD_ADDR_VAR 0 3
17861: PUSH
17862: DOUBLE
17863: LD_INT 1
17865: DEC
17866: ST_TO_ADDR
17867: LD_INT 3
17869: PUSH
17870: FOR_TO
17871: IFFALSE 17897
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17873: LD_VAR 0 2
17877: PPUSH
17878: CALL_OW 274
17882: PPUSH
17883: LD_VAR 0 3
17887: PPUSH
17888: LD_INT 99999
17890: PPUSH
17891: CALL_OW 277
17895: GO 17870
17897: POP
17898: POP
17899: GO 17854
17901: POP
17902: POP
// end ;
17903: LD_VAR 0 1
17907: RET
// export function hHackSetLevel10 ; var i , j ; begin
17908: LD_INT 0
17910: PPUSH
17911: PPUSH
17912: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17913: LD_ADDR_VAR 0 2
17917: PUSH
17918: LD_INT 21
17920: PUSH
17921: LD_INT 1
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 69
17932: PUSH
17933: FOR_IN
17934: IFFALSE 17986
// if IsSelected ( i ) then
17936: LD_VAR 0 2
17940: PPUSH
17941: CALL_OW 306
17945: IFFALSE 17984
// begin for j := 1 to 4 do
17947: LD_ADDR_VAR 0 3
17951: PUSH
17952: DOUBLE
17953: LD_INT 1
17955: DEC
17956: ST_TO_ADDR
17957: LD_INT 4
17959: PUSH
17960: FOR_TO
17961: IFFALSE 17982
// SetSkill ( i , j , 10 ) ;
17963: LD_VAR 0 2
17967: PPUSH
17968: LD_VAR 0 3
17972: PPUSH
17973: LD_INT 10
17975: PPUSH
17976: CALL_OW 237
17980: GO 17960
17982: POP
17983: POP
// end ;
17984: GO 17933
17986: POP
17987: POP
// end ;
17988: LD_VAR 0 1
17992: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17993: LD_INT 0
17995: PPUSH
17996: PPUSH
17997: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17998: LD_ADDR_VAR 0 2
18002: PUSH
18003: LD_INT 22
18005: PUSH
18006: LD_OWVAR 2
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 21
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PPUSH
18029: CALL_OW 69
18033: PUSH
18034: FOR_IN
18035: IFFALSE 18076
// begin for j := 1 to 4 do
18037: LD_ADDR_VAR 0 3
18041: PUSH
18042: DOUBLE
18043: LD_INT 1
18045: DEC
18046: ST_TO_ADDR
18047: LD_INT 4
18049: PUSH
18050: FOR_TO
18051: IFFALSE 18072
// SetSkill ( i , j , 10 ) ;
18053: LD_VAR 0 2
18057: PPUSH
18058: LD_VAR 0 3
18062: PPUSH
18063: LD_INT 10
18065: PPUSH
18066: CALL_OW 237
18070: GO 18050
18072: POP
18073: POP
// end ;
18074: GO 18034
18076: POP
18077: POP
// end ;
18078: LD_VAR 0 1
18082: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18083: LD_INT 0
18085: PPUSH
// uc_side := your_side ;
18086: LD_ADDR_OWVAR 20
18090: PUSH
18091: LD_OWVAR 2
18095: ST_TO_ADDR
// uc_nation := nation ;
18096: LD_ADDR_OWVAR 21
18100: PUSH
18101: LD_VAR 0 1
18105: ST_TO_ADDR
// InitHc ;
18106: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18110: LD_INT 0
18112: PPUSH
18113: LD_VAR 0 2
18117: PPUSH
18118: LD_VAR 0 3
18122: PPUSH
18123: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18127: LD_VAR 0 4
18131: PPUSH
18132: LD_VAR 0 5
18136: PPUSH
18137: CALL_OW 428
18141: PUSH
18142: LD_INT 0
18144: EQUAL
18145: IFFALSE 18169
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18147: CALL_OW 44
18151: PPUSH
18152: LD_VAR 0 4
18156: PPUSH
18157: LD_VAR 0 5
18161: PPUSH
18162: LD_INT 1
18164: PPUSH
18165: CALL_OW 48
// end ;
18169: LD_VAR 0 6
18173: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18174: LD_INT 0
18176: PPUSH
18177: PPUSH
// uc_side := your_side ;
18178: LD_ADDR_OWVAR 20
18182: PUSH
18183: LD_OWVAR 2
18187: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18188: LD_VAR 0 1
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: LD_INT 2
18198: PUSH
18199: LD_INT 3
18201: PUSH
18202: LD_INT 4
18204: PUSH
18205: LD_INT 5
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: IN
18215: IFFALSE 18227
// uc_nation := nation_american else
18217: LD_ADDR_OWVAR 21
18221: PUSH
18222: LD_INT 1
18224: ST_TO_ADDR
18225: GO 18270
// if chassis in [ 11 , 12 , 13 , 14 ] then
18227: LD_VAR 0 1
18231: PUSH
18232: LD_INT 11
18234: PUSH
18235: LD_INT 12
18237: PUSH
18238: LD_INT 13
18240: PUSH
18241: LD_INT 14
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: IN
18250: IFFALSE 18262
// uc_nation := nation_arabian else
18252: LD_ADDR_OWVAR 21
18256: PUSH
18257: LD_INT 2
18259: ST_TO_ADDR
18260: GO 18270
// uc_nation := nation_russian ;
18262: LD_ADDR_OWVAR 21
18266: PUSH
18267: LD_INT 3
18269: ST_TO_ADDR
// vc_chassis := chassis ;
18270: LD_ADDR_OWVAR 37
18274: PUSH
18275: LD_VAR 0 1
18279: ST_TO_ADDR
// vc_engine := engine ;
18280: LD_ADDR_OWVAR 39
18284: PUSH
18285: LD_VAR 0 2
18289: ST_TO_ADDR
// vc_control := control ;
18290: LD_ADDR_OWVAR 38
18294: PUSH
18295: LD_VAR 0 3
18299: ST_TO_ADDR
// vc_weapon := weapon ;
18300: LD_ADDR_OWVAR 40
18304: PUSH
18305: LD_VAR 0 4
18309: ST_TO_ADDR
// un := CreateVehicle ;
18310: LD_ADDR_VAR 0 8
18314: PUSH
18315: CALL_OW 45
18319: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18320: LD_VAR 0 8
18324: PPUSH
18325: LD_INT 0
18327: PPUSH
18328: LD_INT 5
18330: PPUSH
18331: CALL_OW 12
18335: PPUSH
18336: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18340: LD_VAR 0 8
18344: PPUSH
18345: LD_VAR 0 5
18349: PPUSH
18350: LD_VAR 0 6
18354: PPUSH
18355: LD_INT 1
18357: PPUSH
18358: CALL_OW 48
// end ;
18362: LD_VAR 0 7
18366: RET
// export hInvincible ; every 1 do
18367: GO 18369
18369: DISABLE
// hInvincible := [ ] ;
18370: LD_ADDR_EXP 86
18374: PUSH
18375: EMPTY
18376: ST_TO_ADDR
18377: END
// every 10 do var i ;
18378: GO 18380
18380: DISABLE
18381: LD_INT 0
18383: PPUSH
// begin enable ;
18384: ENABLE
// if not hInvincible then
18385: LD_EXP 86
18389: NOT
18390: IFFALSE 18394
// exit ;
18392: GO 18438
// for i in hInvincible do
18394: LD_ADDR_VAR 0 1
18398: PUSH
18399: LD_EXP 86
18403: PUSH
18404: FOR_IN
18405: IFFALSE 18436
// if GetLives ( i ) < 1000 then
18407: LD_VAR 0 1
18411: PPUSH
18412: CALL_OW 256
18416: PUSH
18417: LD_INT 1000
18419: LESS
18420: IFFALSE 18434
// SetLives ( i , 1000 ) ;
18422: LD_VAR 0 1
18426: PPUSH
18427: LD_INT 1000
18429: PPUSH
18430: CALL_OW 234
18434: GO 18404
18436: POP
18437: POP
// end ;
18438: PPOPN 1
18440: END
// export function hHackInvincible ; var i ; begin
18441: LD_INT 0
18443: PPUSH
18444: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18445: LD_ADDR_VAR 0 2
18449: PUSH
18450: LD_INT 2
18452: PUSH
18453: LD_INT 21
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 21
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 69
18482: PUSH
18483: FOR_IN
18484: IFFALSE 18545
// if IsSelected ( i ) then
18486: LD_VAR 0 2
18490: PPUSH
18491: CALL_OW 306
18495: IFFALSE 18543
// begin if i in hInvincible then
18497: LD_VAR 0 2
18501: PUSH
18502: LD_EXP 86
18506: IN
18507: IFFALSE 18527
// hInvincible := hInvincible diff i else
18509: LD_ADDR_EXP 86
18513: PUSH
18514: LD_EXP 86
18518: PUSH
18519: LD_VAR 0 2
18523: DIFF
18524: ST_TO_ADDR
18525: GO 18543
// hInvincible := hInvincible union i ;
18527: LD_ADDR_EXP 86
18531: PUSH
18532: LD_EXP 86
18536: PUSH
18537: LD_VAR 0 2
18541: UNION
18542: ST_TO_ADDR
// end ;
18543: GO 18483
18545: POP
18546: POP
// end ;
18547: LD_VAR 0 1
18551: RET
// export function hHackInvisible ; var i , j ; begin
18552: LD_INT 0
18554: PPUSH
18555: PPUSH
18556: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18557: LD_ADDR_VAR 0 2
18561: PUSH
18562: LD_INT 21
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PPUSH
18572: CALL_OW 69
18576: PUSH
18577: FOR_IN
18578: IFFALSE 18602
// if IsSelected ( i ) then
18580: LD_VAR 0 2
18584: PPUSH
18585: CALL_OW 306
18589: IFFALSE 18600
// ComForceInvisible ( i ) ;
18591: LD_VAR 0 2
18595: PPUSH
18596: CALL_OW 496
18600: GO 18577
18602: POP
18603: POP
// end ;
18604: LD_VAR 0 1
18608: RET
// export function hHackChangeYourSide ; begin
18609: LD_INT 0
18611: PPUSH
// if your_side = 8 then
18612: LD_OWVAR 2
18616: PUSH
18617: LD_INT 8
18619: EQUAL
18620: IFFALSE 18632
// your_side := 0 else
18622: LD_ADDR_OWVAR 2
18626: PUSH
18627: LD_INT 0
18629: ST_TO_ADDR
18630: GO 18646
// your_side := your_side + 1 ;
18632: LD_ADDR_OWVAR 2
18636: PUSH
18637: LD_OWVAR 2
18641: PUSH
18642: LD_INT 1
18644: PLUS
18645: ST_TO_ADDR
// end ;
18646: LD_VAR 0 1
18650: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
// for i in all_units do
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: LD_OWVAR 3
18665: PUSH
18666: FOR_IN
18667: IFFALSE 18745
// if IsSelected ( i ) then
18669: LD_VAR 0 2
18673: PPUSH
18674: CALL_OW 306
18678: IFFALSE 18743
// begin j := GetSide ( i ) ;
18680: LD_ADDR_VAR 0 3
18684: PUSH
18685: LD_VAR 0 2
18689: PPUSH
18690: CALL_OW 255
18694: ST_TO_ADDR
// if j = 8 then
18695: LD_VAR 0 3
18699: PUSH
18700: LD_INT 8
18702: EQUAL
18703: IFFALSE 18715
// j := 0 else
18705: LD_ADDR_VAR 0 3
18709: PUSH
18710: LD_INT 0
18712: ST_TO_ADDR
18713: GO 18729
// j := j + 1 ;
18715: LD_ADDR_VAR 0 3
18719: PUSH
18720: LD_VAR 0 3
18724: PUSH
18725: LD_INT 1
18727: PLUS
18728: ST_TO_ADDR
// SetSide ( i , j ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_VAR 0 3
18738: PPUSH
18739: CALL_OW 235
// end ;
18743: GO 18666
18745: POP
18746: POP
// end ;
18747: LD_VAR 0 1
18751: RET
// export function hHackFog ; begin
18752: LD_INT 0
18754: PPUSH
// FogOff ( true ) ;
18755: LD_INT 1
18757: PPUSH
18758: CALL_OW 344
// end ;
18762: LD_VAR 0 1
18766: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18767: LD_INT 0
18769: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18770: LD_VAR 0 1
18774: PPUSH
18775: LD_VAR 0 2
18779: PPUSH
18780: LD_VAR 0 3
18784: PPUSH
18785: LD_INT 1
18787: PPUSH
18788: LD_INT 1
18790: PPUSH
18791: CALL_OW 483
// CenterOnXY ( x , y ) ;
18795: LD_VAR 0 2
18799: PPUSH
18800: LD_VAR 0 3
18804: PPUSH
18805: CALL_OW 84
// end ;
18809: LD_VAR 0 4
18813: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18814: LD_INT 0
18816: PPUSH
18817: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18818: LD_VAR 0 1
18822: NOT
18823: PUSH
18824: LD_VAR 0 2
18828: PPUSH
18829: LD_VAR 0 3
18833: PPUSH
18834: CALL_OW 488
18838: NOT
18839: OR
18840: PUSH
18841: LD_VAR 0 1
18845: PPUSH
18846: CALL_OW 266
18850: PUSH
18851: LD_INT 3
18853: NONEQUAL
18854: PUSH
18855: LD_VAR 0 1
18859: PPUSH
18860: CALL_OW 247
18864: PUSH
18865: LD_INT 1
18867: EQUAL
18868: NOT
18869: AND
18870: OR
18871: IFFALSE 18875
// exit ;
18873: GO 19024
// if GetType ( factory ) = unit_human then
18875: LD_VAR 0 1
18879: PPUSH
18880: CALL_OW 247
18884: PUSH
18885: LD_INT 1
18887: EQUAL
18888: IFFALSE 18905
// factory := IsInUnit ( factory ) ;
18890: LD_ADDR_VAR 0 1
18894: PUSH
18895: LD_VAR 0 1
18899: PPUSH
18900: CALL_OW 310
18904: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL_OW 266
18914: PUSH
18915: LD_INT 3
18917: NONEQUAL
18918: IFFALSE 18922
// exit ;
18920: GO 19024
// if HexInfo ( x , y ) = factory then
18922: LD_VAR 0 2
18926: PPUSH
18927: LD_VAR 0 3
18931: PPUSH
18932: CALL_OW 428
18936: PUSH
18937: LD_VAR 0 1
18941: EQUAL
18942: IFFALSE 18969
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18944: LD_ADDR_EXP 87
18948: PUSH
18949: LD_EXP 87
18953: PPUSH
18954: LD_VAR 0 1
18958: PPUSH
18959: LD_INT 0
18961: PPUSH
18962: CALL_OW 1
18966: ST_TO_ADDR
18967: GO 19020
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18969: LD_ADDR_EXP 87
18973: PUSH
18974: LD_EXP 87
18978: PPUSH
18979: LD_VAR 0 1
18983: PPUSH
18984: LD_VAR 0 1
18988: PPUSH
18989: CALL_OW 255
18993: PUSH
18994: LD_VAR 0 1
18998: PUSH
18999: LD_VAR 0 2
19003: PUSH
19004: LD_VAR 0 3
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: PPUSH
19015: CALL_OW 1
19019: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19020: CALL 19029 0 0
// end ;
19024: LD_VAR 0 4
19028: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
19033: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19034: LD_STRING resetFactoryWaypoint();
19036: PPUSH
19037: CALL_OW 559
// if factoryWaypoints then
19041: LD_EXP 87
19045: IFFALSE 19171
// begin list := PrepareArray ( factoryWaypoints ) ;
19047: LD_ADDR_VAR 0 3
19051: PUSH
19052: LD_EXP 87
19056: PPUSH
19057: CALL 61292 0 1
19061: ST_TO_ADDR
// for i := 1 to list do
19062: LD_ADDR_VAR 0 2
19066: PUSH
19067: DOUBLE
19068: LD_INT 1
19070: DEC
19071: ST_TO_ADDR
19072: LD_VAR 0 3
19076: PUSH
19077: FOR_TO
19078: IFFALSE 19169
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19080: LD_STRING setFactoryWaypointXY(
19082: PUSH
19083: LD_VAR 0 3
19087: PUSH
19088: LD_VAR 0 2
19092: ARRAY
19093: PUSH
19094: LD_INT 1
19096: ARRAY
19097: STR
19098: PUSH
19099: LD_STRING ,
19101: STR
19102: PUSH
19103: LD_VAR 0 3
19107: PUSH
19108: LD_VAR 0 2
19112: ARRAY
19113: PUSH
19114: LD_INT 2
19116: ARRAY
19117: STR
19118: PUSH
19119: LD_STRING ,
19121: STR
19122: PUSH
19123: LD_VAR 0 3
19127: PUSH
19128: LD_VAR 0 2
19132: ARRAY
19133: PUSH
19134: LD_INT 3
19136: ARRAY
19137: STR
19138: PUSH
19139: LD_STRING ,
19141: STR
19142: PUSH
19143: LD_VAR 0 3
19147: PUSH
19148: LD_VAR 0 2
19152: ARRAY
19153: PUSH
19154: LD_INT 4
19156: ARRAY
19157: STR
19158: PUSH
19159: LD_STRING )
19161: STR
19162: PPUSH
19163: CALL_OW 559
19167: GO 19077
19169: POP
19170: POP
// end ; end ;
19171: LD_VAR 0 1
19175: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19176: LD_INT 0
19178: PPUSH
// if HexInfo ( x , y ) = warehouse then
19179: LD_VAR 0 2
19183: PPUSH
19184: LD_VAR 0 3
19188: PPUSH
19189: CALL_OW 428
19193: PUSH
19194: LD_VAR 0 1
19198: EQUAL
19199: IFFALSE 19226
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19201: LD_ADDR_EXP 88
19205: PUSH
19206: LD_EXP 88
19210: PPUSH
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_INT 0
19218: PPUSH
19219: CALL_OW 1
19223: ST_TO_ADDR
19224: GO 19277
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19226: LD_ADDR_EXP 88
19230: PUSH
19231: LD_EXP 88
19235: PPUSH
19236: LD_VAR 0 1
19240: PPUSH
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 255
19250: PUSH
19251: LD_VAR 0 1
19255: PUSH
19256: LD_VAR 0 2
19260: PUSH
19261: LD_VAR 0 3
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: PPUSH
19272: CALL_OW 1
19276: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19277: CALL 19286 0 0
// end ;
19281: LD_VAR 0 4
19285: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19286: LD_INT 0
19288: PPUSH
19289: PPUSH
19290: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19291: LD_STRING resetWarehouseGatheringPoints();
19293: PPUSH
19294: CALL_OW 559
// if warehouseGatheringPoints then
19298: LD_EXP 88
19302: IFFALSE 19428
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19304: LD_ADDR_VAR 0 3
19308: PUSH
19309: LD_EXP 88
19313: PPUSH
19314: CALL 61292 0 1
19318: ST_TO_ADDR
// for i := 1 to list do
19319: LD_ADDR_VAR 0 2
19323: PUSH
19324: DOUBLE
19325: LD_INT 1
19327: DEC
19328: ST_TO_ADDR
19329: LD_VAR 0 3
19333: PUSH
19334: FOR_TO
19335: IFFALSE 19426
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19337: LD_STRING setWarehouseGatheringPointXY(
19339: PUSH
19340: LD_VAR 0 3
19344: PUSH
19345: LD_VAR 0 2
19349: ARRAY
19350: PUSH
19351: LD_INT 1
19353: ARRAY
19354: STR
19355: PUSH
19356: LD_STRING ,
19358: STR
19359: PUSH
19360: LD_VAR 0 3
19364: PUSH
19365: LD_VAR 0 2
19369: ARRAY
19370: PUSH
19371: LD_INT 2
19373: ARRAY
19374: STR
19375: PUSH
19376: LD_STRING ,
19378: STR
19379: PUSH
19380: LD_VAR 0 3
19384: PUSH
19385: LD_VAR 0 2
19389: ARRAY
19390: PUSH
19391: LD_INT 3
19393: ARRAY
19394: STR
19395: PUSH
19396: LD_STRING ,
19398: STR
19399: PUSH
19400: LD_VAR 0 3
19404: PUSH
19405: LD_VAR 0 2
19409: ARRAY
19410: PUSH
19411: LD_INT 4
19413: ARRAY
19414: STR
19415: PUSH
19416: LD_STRING )
19418: STR
19419: PPUSH
19420: CALL_OW 559
19424: GO 19334
19426: POP
19427: POP
// end ; end ;
19428: LD_VAR 0 1
19432: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19433: LD_EXP 88
19437: IFFALSE 20124
19439: GO 19441
19441: DISABLE
19442: LD_INT 0
19444: PPUSH
19445: PPUSH
19446: PPUSH
19447: PPUSH
19448: PPUSH
19449: PPUSH
19450: PPUSH
19451: PPUSH
19452: PPUSH
// begin enable ;
19453: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19454: LD_ADDR_VAR 0 3
19458: PUSH
19459: LD_EXP 88
19463: PPUSH
19464: CALL 61292 0 1
19468: ST_TO_ADDR
// if not list then
19469: LD_VAR 0 3
19473: NOT
19474: IFFALSE 19478
// exit ;
19476: GO 20124
// for i := 1 to list do
19478: LD_ADDR_VAR 0 1
19482: PUSH
19483: DOUBLE
19484: LD_INT 1
19486: DEC
19487: ST_TO_ADDR
19488: LD_VAR 0 3
19492: PUSH
19493: FOR_TO
19494: IFFALSE 20122
// begin depot := list [ i ] [ 2 ] ;
19496: LD_ADDR_VAR 0 8
19500: PUSH
19501: LD_VAR 0 3
19505: PUSH
19506: LD_VAR 0 1
19510: ARRAY
19511: PUSH
19512: LD_INT 2
19514: ARRAY
19515: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19516: LD_ADDR_VAR 0 5
19520: PUSH
19521: LD_VAR 0 3
19525: PUSH
19526: LD_VAR 0 1
19530: ARRAY
19531: PUSH
19532: LD_INT 1
19534: ARRAY
19535: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19536: LD_VAR 0 8
19540: PPUSH
19541: CALL_OW 301
19545: PUSH
19546: LD_VAR 0 5
19550: PUSH
19551: LD_VAR 0 8
19555: PPUSH
19556: CALL_OW 255
19560: NONEQUAL
19561: OR
19562: IFFALSE 19591
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19564: LD_ADDR_EXP 88
19568: PUSH
19569: LD_EXP 88
19573: PPUSH
19574: LD_VAR 0 8
19578: PPUSH
19579: LD_INT 0
19581: PPUSH
19582: CALL_OW 1
19586: ST_TO_ADDR
// exit ;
19587: POP
19588: POP
19589: GO 20124
// end ; x := list [ i ] [ 3 ] ;
19591: LD_ADDR_VAR 0 6
19595: PUSH
19596: LD_VAR 0 3
19600: PUSH
19601: LD_VAR 0 1
19605: ARRAY
19606: PUSH
19607: LD_INT 3
19609: ARRAY
19610: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19611: LD_ADDR_VAR 0 7
19615: PUSH
19616: LD_VAR 0 3
19620: PUSH
19621: LD_VAR 0 1
19625: ARRAY
19626: PUSH
19627: LD_INT 4
19629: ARRAY
19630: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19631: LD_ADDR_VAR 0 9
19635: PUSH
19636: LD_VAR 0 6
19640: PPUSH
19641: LD_VAR 0 7
19645: PPUSH
19646: LD_INT 16
19648: PPUSH
19649: CALL 59876 0 3
19653: ST_TO_ADDR
// if not cratesNearbyPoint then
19654: LD_VAR 0 9
19658: NOT
19659: IFFALSE 19665
// exit ;
19661: POP
19662: POP
19663: GO 20124
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19665: LD_ADDR_VAR 0 4
19669: PUSH
19670: LD_INT 22
19672: PUSH
19673: LD_VAR 0 5
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 3
19684: PUSH
19685: LD_INT 60
19687: PUSH
19688: EMPTY
19689: LIST
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 91
19697: PUSH
19698: LD_VAR 0 8
19702: PUSH
19703: LD_INT 6
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: LD_INT 25
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: LD_INT 25
19726: PUSH
19727: LD_INT 16
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: PPUSH
19745: CALL_OW 69
19749: PUSH
19750: LD_VAR 0 8
19754: PPUSH
19755: CALL_OW 313
19759: PPUSH
19760: LD_INT 3
19762: PUSH
19763: LD_INT 60
19765: PUSH
19766: EMPTY
19767: LIST
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: LD_INT 25
19778: PUSH
19779: LD_INT 2
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 25
19788: PUSH
19789: LD_INT 16
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PPUSH
19805: CALL_OW 72
19809: UNION
19810: ST_TO_ADDR
// if tmp then
19811: LD_VAR 0 4
19815: IFFALSE 19895
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19817: LD_ADDR_VAR 0 4
19821: PUSH
19822: LD_VAR 0 4
19826: PPUSH
19827: LD_INT 3
19829: PPUSH
19830: CALL 57843 0 2
19834: ST_TO_ADDR
// for j in tmp do
19835: LD_ADDR_VAR 0 2
19839: PUSH
19840: LD_VAR 0 4
19844: PUSH
19845: FOR_IN
19846: IFFALSE 19889
// begin if IsInUnit ( j ) then
19848: LD_VAR 0 2
19852: PPUSH
19853: CALL_OW 310
19857: IFFALSE 19868
// ComExit ( j ) ;
19859: LD_VAR 0 2
19863: PPUSH
19864: CALL 57926 0 1
// AddComCollect ( j , x , y ) ;
19868: LD_VAR 0 2
19872: PPUSH
19873: LD_VAR 0 6
19877: PPUSH
19878: LD_VAR 0 7
19882: PPUSH
19883: CALL_OW 177
// end ;
19887: GO 19845
19889: POP
19890: POP
// exit ;
19891: POP
19892: POP
19893: GO 20124
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19895: LD_ADDR_VAR 0 4
19899: PUSH
19900: LD_INT 22
19902: PUSH
19903: LD_VAR 0 5
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 91
19914: PUSH
19915: LD_VAR 0 8
19919: PUSH
19920: LD_INT 8
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 2
19930: PUSH
19931: LD_INT 34
19933: PUSH
19934: LD_INT 12
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 34
19943: PUSH
19944: LD_INT 51
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 34
19953: PUSH
19954: LD_INT 32
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 34
19963: PUSH
19964: LD_EXP 12
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: LIST
19984: PPUSH
19985: CALL_OW 69
19989: ST_TO_ADDR
// if tmp then
19990: LD_VAR 0 4
19994: IFFALSE 20120
// begin for j in tmp do
19996: LD_ADDR_VAR 0 2
20000: PUSH
20001: LD_VAR 0 4
20005: PUSH
20006: FOR_IN
20007: IFFALSE 20118
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20009: LD_VAR 0 2
20013: PPUSH
20014: CALL_OW 262
20018: PUSH
20019: LD_INT 3
20021: EQUAL
20022: PUSH
20023: LD_VAR 0 2
20027: PPUSH
20028: CALL_OW 261
20032: PUSH
20033: LD_INT 20
20035: GREATER
20036: OR
20037: PUSH
20038: LD_VAR 0 2
20042: PPUSH
20043: CALL_OW 314
20047: NOT
20048: AND
20049: PUSH
20050: LD_VAR 0 2
20054: PPUSH
20055: CALL_OW 263
20059: PUSH
20060: LD_INT 1
20062: NONEQUAL
20063: PUSH
20064: LD_VAR 0 2
20068: PPUSH
20069: CALL_OW 311
20073: OR
20074: AND
20075: IFFALSE 20116
// begin ComCollect ( j , x , y ) ;
20077: LD_VAR 0 2
20081: PPUSH
20082: LD_VAR 0 6
20086: PPUSH
20087: LD_VAR 0 7
20091: PPUSH
20092: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20096: LD_VAR 0 2
20100: PPUSH
20101: LD_VAR 0 8
20105: PPUSH
20106: CALL_OW 172
// exit ;
20110: POP
20111: POP
20112: POP
20113: POP
20114: GO 20124
// end ;
20116: GO 20006
20118: POP
20119: POP
// end ; end ;
20120: GO 19493
20122: POP
20123: POP
// end ; end_of_file
20124: PPOPN 9
20126: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20127: LD_INT 0
20129: PPUSH
20130: PPUSH
// if exist_mode then
20131: LD_VAR 0 2
20135: IFFALSE 20160
// unit := CreateCharacter ( prefix & ident ) else
20137: LD_ADDR_VAR 0 5
20141: PUSH
20142: LD_VAR 0 3
20146: PUSH
20147: LD_VAR 0 1
20151: STR
20152: PPUSH
20153: CALL_OW 34
20157: ST_TO_ADDR
20158: GO 20175
// unit := NewCharacter ( ident ) ;
20160: LD_ADDR_VAR 0 5
20164: PUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 25
20174: ST_TO_ADDR
// result := unit ;
20175: LD_ADDR_VAR 0 4
20179: PUSH
20180: LD_VAR 0 5
20184: ST_TO_ADDR
// end ;
20185: LD_VAR 0 4
20189: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20190: LD_INT 0
20192: PPUSH
20193: PPUSH
// if not side or not nation then
20194: LD_VAR 0 1
20198: NOT
20199: PUSH
20200: LD_VAR 0 2
20204: NOT
20205: OR
20206: IFFALSE 20210
// exit ;
20208: GO 20978
// case nation of nation_american :
20210: LD_VAR 0 2
20214: PUSH
20215: LD_INT 1
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20437
20223: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20224: LD_ADDR_VAR 0 4
20228: PUSH
20229: LD_INT 35
20231: PUSH
20232: LD_INT 45
20234: PUSH
20235: LD_INT 46
20237: PUSH
20238: LD_INT 47
20240: PUSH
20241: LD_INT 82
20243: PUSH
20244: LD_INT 83
20246: PUSH
20247: LD_INT 84
20249: PUSH
20250: LD_INT 85
20252: PUSH
20253: LD_INT 86
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: LD_INT 2
20261: PUSH
20262: LD_INT 6
20264: PUSH
20265: LD_INT 15
20267: PUSH
20268: LD_INT 16
20270: PUSH
20271: LD_INT 7
20273: PUSH
20274: LD_INT 12
20276: PUSH
20277: LD_INT 13
20279: PUSH
20280: LD_INT 10
20282: PUSH
20283: LD_INT 14
20285: PUSH
20286: LD_INT 20
20288: PUSH
20289: LD_INT 21
20291: PUSH
20292: LD_INT 22
20294: PUSH
20295: LD_INT 25
20297: PUSH
20298: LD_INT 32
20300: PUSH
20301: LD_INT 27
20303: PUSH
20304: LD_INT 36
20306: PUSH
20307: LD_INT 69
20309: PUSH
20310: LD_INT 39
20312: PUSH
20313: LD_INT 34
20315: PUSH
20316: LD_INT 40
20318: PUSH
20319: LD_INT 48
20321: PUSH
20322: LD_INT 49
20324: PUSH
20325: LD_INT 50
20327: PUSH
20328: LD_INT 51
20330: PUSH
20331: LD_INT 52
20333: PUSH
20334: LD_INT 53
20336: PUSH
20337: LD_INT 54
20339: PUSH
20340: LD_INT 55
20342: PUSH
20343: LD_INT 56
20345: PUSH
20346: LD_INT 57
20348: PUSH
20349: LD_INT 58
20351: PUSH
20352: LD_INT 59
20354: PUSH
20355: LD_INT 60
20357: PUSH
20358: LD_INT 61
20360: PUSH
20361: LD_INT 62
20363: PUSH
20364: LD_INT 80
20366: PUSH
20367: LD_INT 82
20369: PUSH
20370: LD_INT 83
20372: PUSH
20373: LD_INT 84
20375: PUSH
20376: LD_INT 85
20378: PUSH
20379: LD_INT 86
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: ST_TO_ADDR
20435: GO 20902
20437: LD_INT 2
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20671
20445: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20446: LD_ADDR_VAR 0 4
20450: PUSH
20451: LD_INT 35
20453: PUSH
20454: LD_INT 45
20456: PUSH
20457: LD_INT 46
20459: PUSH
20460: LD_INT 47
20462: PUSH
20463: LD_INT 82
20465: PUSH
20466: LD_INT 83
20468: PUSH
20469: LD_INT 84
20471: PUSH
20472: LD_INT 85
20474: PUSH
20475: LD_INT 87
20477: PUSH
20478: LD_INT 70
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: LD_INT 11
20486: PUSH
20487: LD_INT 3
20489: PUSH
20490: LD_INT 4
20492: PUSH
20493: LD_INT 5
20495: PUSH
20496: LD_INT 6
20498: PUSH
20499: LD_INT 15
20501: PUSH
20502: LD_INT 18
20504: PUSH
20505: LD_INT 7
20507: PUSH
20508: LD_INT 17
20510: PUSH
20511: LD_INT 8
20513: PUSH
20514: LD_INT 20
20516: PUSH
20517: LD_INT 21
20519: PUSH
20520: LD_INT 22
20522: PUSH
20523: LD_INT 72
20525: PUSH
20526: LD_INT 26
20528: PUSH
20529: LD_INT 69
20531: PUSH
20532: LD_INT 39
20534: PUSH
20535: LD_INT 40
20537: PUSH
20538: LD_INT 41
20540: PUSH
20541: LD_INT 42
20543: PUSH
20544: LD_INT 43
20546: PUSH
20547: LD_INT 48
20549: PUSH
20550: LD_INT 49
20552: PUSH
20553: LD_INT 50
20555: PUSH
20556: LD_INT 51
20558: PUSH
20559: LD_INT 52
20561: PUSH
20562: LD_INT 53
20564: PUSH
20565: LD_INT 54
20567: PUSH
20568: LD_INT 55
20570: PUSH
20571: LD_INT 56
20573: PUSH
20574: LD_INT 60
20576: PUSH
20577: LD_INT 61
20579: PUSH
20580: LD_INT 62
20582: PUSH
20583: LD_INT 66
20585: PUSH
20586: LD_INT 67
20588: PUSH
20589: LD_INT 68
20591: PUSH
20592: LD_INT 81
20594: PUSH
20595: LD_INT 82
20597: PUSH
20598: LD_INT 83
20600: PUSH
20601: LD_INT 84
20603: PUSH
20604: LD_INT 85
20606: PUSH
20607: LD_INT 87
20609: PUSH
20610: LD_INT 88
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: ST_TO_ADDR
20669: GO 20902
20671: LD_INT 3
20673: DOUBLE
20674: EQUAL
20675: IFTRUE 20679
20677: GO 20901
20679: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20680: LD_ADDR_VAR 0 4
20684: PUSH
20685: LD_INT 46
20687: PUSH
20688: LD_INT 47
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: LD_INT 2
20696: PUSH
20697: LD_INT 82
20699: PUSH
20700: LD_INT 83
20702: PUSH
20703: LD_INT 84
20705: PUSH
20706: LD_INT 85
20708: PUSH
20709: LD_INT 86
20711: PUSH
20712: LD_INT 11
20714: PUSH
20715: LD_INT 9
20717: PUSH
20718: LD_INT 20
20720: PUSH
20721: LD_INT 19
20723: PUSH
20724: LD_INT 21
20726: PUSH
20727: LD_INT 24
20729: PUSH
20730: LD_INT 22
20732: PUSH
20733: LD_INT 25
20735: PUSH
20736: LD_INT 28
20738: PUSH
20739: LD_INT 29
20741: PUSH
20742: LD_INT 30
20744: PUSH
20745: LD_INT 31
20747: PUSH
20748: LD_INT 37
20750: PUSH
20751: LD_INT 38
20753: PUSH
20754: LD_INT 32
20756: PUSH
20757: LD_INT 27
20759: PUSH
20760: LD_INT 33
20762: PUSH
20763: LD_INT 69
20765: PUSH
20766: LD_INT 39
20768: PUSH
20769: LD_INT 34
20771: PUSH
20772: LD_INT 40
20774: PUSH
20775: LD_INT 71
20777: PUSH
20778: LD_INT 23
20780: PUSH
20781: LD_INT 44
20783: PUSH
20784: LD_INT 48
20786: PUSH
20787: LD_INT 49
20789: PUSH
20790: LD_INT 50
20792: PUSH
20793: LD_INT 51
20795: PUSH
20796: LD_INT 52
20798: PUSH
20799: LD_INT 53
20801: PUSH
20802: LD_INT 54
20804: PUSH
20805: LD_INT 55
20807: PUSH
20808: LD_INT 56
20810: PUSH
20811: LD_INT 57
20813: PUSH
20814: LD_INT 58
20816: PUSH
20817: LD_INT 59
20819: PUSH
20820: LD_INT 63
20822: PUSH
20823: LD_INT 64
20825: PUSH
20826: LD_INT 65
20828: PUSH
20829: LD_INT 82
20831: PUSH
20832: LD_INT 83
20834: PUSH
20835: LD_INT 84
20837: PUSH
20838: LD_INT 85
20840: PUSH
20841: LD_INT 86
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: ST_TO_ADDR
20899: GO 20902
20901: POP
// if state > - 1 and state < 3 then
20902: LD_VAR 0 3
20906: PUSH
20907: LD_INT 1
20909: NEG
20910: GREATER
20911: PUSH
20912: LD_VAR 0 3
20916: PUSH
20917: LD_INT 3
20919: LESS
20920: AND
20921: IFFALSE 20978
// for i in result do
20923: LD_ADDR_VAR 0 5
20927: PUSH
20928: LD_VAR 0 4
20932: PUSH
20933: FOR_IN
20934: IFFALSE 20976
// if GetTech ( i , side ) <> state then
20936: LD_VAR 0 5
20940: PPUSH
20941: LD_VAR 0 1
20945: PPUSH
20946: CALL_OW 321
20950: PUSH
20951: LD_VAR 0 3
20955: NONEQUAL
20956: IFFALSE 20974
// result := result diff i ;
20958: LD_ADDR_VAR 0 4
20962: PUSH
20963: LD_VAR 0 4
20967: PUSH
20968: LD_VAR 0 5
20972: DIFF
20973: ST_TO_ADDR
20974: GO 20933
20976: POP
20977: POP
// end ;
20978: LD_VAR 0 4
20982: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20983: LD_INT 0
20985: PPUSH
20986: PPUSH
20987: PPUSH
// result := true ;
20988: LD_ADDR_VAR 0 3
20992: PUSH
20993: LD_INT 1
20995: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20996: LD_ADDR_VAR 0 5
21000: PUSH
21001: LD_VAR 0 2
21005: PPUSH
21006: CALL_OW 480
21010: ST_TO_ADDR
// if not tmp then
21011: LD_VAR 0 5
21015: NOT
21016: IFFALSE 21020
// exit ;
21018: GO 21069
// for i in tmp do
21020: LD_ADDR_VAR 0 4
21024: PUSH
21025: LD_VAR 0 5
21029: PUSH
21030: FOR_IN
21031: IFFALSE 21067
// if GetTech ( i , side ) <> state_researched then
21033: LD_VAR 0 4
21037: PPUSH
21038: LD_VAR 0 1
21042: PPUSH
21043: CALL_OW 321
21047: PUSH
21048: LD_INT 2
21050: NONEQUAL
21051: IFFALSE 21065
// begin result := false ;
21053: LD_ADDR_VAR 0 3
21057: PUSH
21058: LD_INT 0
21060: ST_TO_ADDR
// exit ;
21061: POP
21062: POP
21063: GO 21069
// end ;
21065: GO 21030
21067: POP
21068: POP
// end ;
21069: LD_VAR 0 3
21073: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21074: LD_INT 0
21076: PPUSH
21077: PPUSH
21078: PPUSH
21079: PPUSH
21080: PPUSH
21081: PPUSH
21082: PPUSH
21083: PPUSH
21084: PPUSH
21085: PPUSH
21086: PPUSH
21087: PPUSH
21088: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21089: LD_VAR 0 1
21093: NOT
21094: PUSH
21095: LD_VAR 0 1
21099: PPUSH
21100: CALL_OW 257
21104: PUSH
21105: LD_INT 9
21107: NONEQUAL
21108: OR
21109: IFFALSE 21113
// exit ;
21111: GO 21686
// side := GetSide ( unit ) ;
21113: LD_ADDR_VAR 0 9
21117: PUSH
21118: LD_VAR 0 1
21122: PPUSH
21123: CALL_OW 255
21127: ST_TO_ADDR
// tech_space := tech_spacanom ;
21128: LD_ADDR_VAR 0 12
21132: PUSH
21133: LD_INT 29
21135: ST_TO_ADDR
// tech_time := tech_taurad ;
21136: LD_ADDR_VAR 0 13
21140: PUSH
21141: LD_INT 28
21143: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21144: LD_ADDR_VAR 0 11
21148: PUSH
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 310
21158: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21159: LD_VAR 0 11
21163: PPUSH
21164: CALL_OW 247
21168: PUSH
21169: LD_INT 2
21171: EQUAL
21172: IFFALSE 21176
// exit ;
21174: GO 21686
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21176: LD_ADDR_VAR 0 8
21180: PUSH
21181: LD_INT 81
21183: PUSH
21184: LD_VAR 0 9
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 3
21195: PUSH
21196: LD_INT 21
21198: PUSH
21199: LD_INT 3
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PPUSH
21214: CALL_OW 69
21218: ST_TO_ADDR
// if not tmp then
21219: LD_VAR 0 8
21223: NOT
21224: IFFALSE 21228
// exit ;
21226: GO 21686
// if in_unit then
21228: LD_VAR 0 11
21232: IFFALSE 21256
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21234: LD_ADDR_VAR 0 10
21238: PUSH
21239: LD_VAR 0 8
21243: PPUSH
21244: LD_VAR 0 11
21248: PPUSH
21249: CALL_OW 74
21253: ST_TO_ADDR
21254: GO 21276
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21256: LD_ADDR_VAR 0 10
21260: PUSH
21261: LD_VAR 0 8
21265: PPUSH
21266: LD_VAR 0 1
21270: PPUSH
21271: CALL_OW 74
21275: ST_TO_ADDR
// if not enemy then
21276: LD_VAR 0 10
21280: NOT
21281: IFFALSE 21285
// exit ;
21283: GO 21686
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21285: LD_VAR 0 11
21289: PUSH
21290: LD_VAR 0 11
21294: PPUSH
21295: LD_VAR 0 10
21299: PPUSH
21300: CALL_OW 296
21304: PUSH
21305: LD_INT 13
21307: GREATER
21308: AND
21309: PUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: LD_VAR 0 10
21319: PPUSH
21320: CALL_OW 296
21324: PUSH
21325: LD_INT 12
21327: GREATER
21328: OR
21329: IFFALSE 21333
// exit ;
21331: GO 21686
// missile := [ 1 ] ;
21333: LD_ADDR_VAR 0 14
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21344: LD_VAR 0 9
21348: PPUSH
21349: LD_VAR 0 12
21353: PPUSH
21354: CALL_OW 325
21358: IFFALSE 21387
// missile := Replace ( missile , missile + 1 , 2 ) ;
21360: LD_ADDR_VAR 0 14
21364: PUSH
21365: LD_VAR 0 14
21369: PPUSH
21370: LD_VAR 0 14
21374: PUSH
21375: LD_INT 1
21377: PLUS
21378: PPUSH
21379: LD_INT 2
21381: PPUSH
21382: CALL_OW 1
21386: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21387: LD_VAR 0 9
21391: PPUSH
21392: LD_VAR 0 13
21396: PPUSH
21397: CALL_OW 325
21401: PUSH
21402: LD_VAR 0 10
21406: PPUSH
21407: CALL_OW 255
21411: PPUSH
21412: LD_VAR 0 13
21416: PPUSH
21417: CALL_OW 325
21421: NOT
21422: AND
21423: IFFALSE 21452
// missile := Replace ( missile , missile + 1 , 3 ) ;
21425: LD_ADDR_VAR 0 14
21429: PUSH
21430: LD_VAR 0 14
21434: PPUSH
21435: LD_VAR 0 14
21439: PUSH
21440: LD_INT 1
21442: PLUS
21443: PPUSH
21444: LD_INT 3
21446: PPUSH
21447: CALL_OW 1
21451: ST_TO_ADDR
// if missile < 2 then
21452: LD_VAR 0 14
21456: PUSH
21457: LD_INT 2
21459: LESS
21460: IFFALSE 21464
// exit ;
21462: GO 21686
// x := GetX ( enemy ) ;
21464: LD_ADDR_VAR 0 4
21468: PUSH
21469: LD_VAR 0 10
21473: PPUSH
21474: CALL_OW 250
21478: ST_TO_ADDR
// y := GetY ( enemy ) ;
21479: LD_ADDR_VAR 0 5
21483: PUSH
21484: LD_VAR 0 10
21488: PPUSH
21489: CALL_OW 251
21493: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21494: LD_ADDR_VAR 0 6
21498: PUSH
21499: LD_VAR 0 4
21503: PUSH
21504: LD_INT 1
21506: NEG
21507: PPUSH
21508: LD_INT 1
21510: PPUSH
21511: CALL_OW 12
21515: PLUS
21516: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21517: LD_ADDR_VAR 0 7
21521: PUSH
21522: LD_VAR 0 5
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PPUSH
21531: LD_INT 1
21533: PPUSH
21534: CALL_OW 12
21538: PLUS
21539: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21540: LD_VAR 0 6
21544: PPUSH
21545: LD_VAR 0 7
21549: PPUSH
21550: CALL_OW 488
21554: NOT
21555: IFFALSE 21577
// begin _x := x ;
21557: LD_ADDR_VAR 0 6
21561: PUSH
21562: LD_VAR 0 4
21566: ST_TO_ADDR
// _y := y ;
21567: LD_ADDR_VAR 0 7
21571: PUSH
21572: LD_VAR 0 5
21576: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21577: LD_ADDR_VAR 0 3
21581: PUSH
21582: LD_INT 1
21584: PPUSH
21585: LD_VAR 0 14
21589: PPUSH
21590: CALL_OW 12
21594: ST_TO_ADDR
// case i of 1 :
21595: LD_VAR 0 3
21599: PUSH
21600: LD_INT 1
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21625
21608: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_VAR 0 10
21618: PPUSH
21619: CALL_OW 115
21623: GO 21686
21625: LD_INT 2
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21655
21633: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21634: LD_VAR 0 1
21638: PPUSH
21639: LD_VAR 0 6
21643: PPUSH
21644: LD_VAR 0 7
21648: PPUSH
21649: CALL_OW 153
21653: GO 21686
21655: LD_INT 3
21657: DOUBLE
21658: EQUAL
21659: IFTRUE 21663
21661: GO 21685
21663: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21664: LD_VAR 0 1
21668: PPUSH
21669: LD_VAR 0 6
21673: PPUSH
21674: LD_VAR 0 7
21678: PPUSH
21679: CALL_OW 154
21683: GO 21686
21685: POP
// end ;
21686: LD_VAR 0 2
21690: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21691: LD_INT 0
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
// if not unit or not building then
21699: LD_VAR 0 1
21703: NOT
21704: PUSH
21705: LD_VAR 0 2
21709: NOT
21710: OR
21711: IFFALSE 21715
// exit ;
21713: GO 21873
// x := GetX ( building ) ;
21715: LD_ADDR_VAR 0 5
21719: PUSH
21720: LD_VAR 0 2
21724: PPUSH
21725: CALL_OW 250
21729: ST_TO_ADDR
// y := GetY ( building ) ;
21730: LD_ADDR_VAR 0 6
21734: PUSH
21735: LD_VAR 0 2
21739: PPUSH
21740: CALL_OW 251
21744: ST_TO_ADDR
// for i = 0 to 5 do
21745: LD_ADDR_VAR 0 4
21749: PUSH
21750: DOUBLE
21751: LD_INT 0
21753: DEC
21754: ST_TO_ADDR
21755: LD_INT 5
21757: PUSH
21758: FOR_TO
21759: IFFALSE 21871
// begin _x := ShiftX ( x , i , 3 ) ;
21761: LD_ADDR_VAR 0 7
21765: PUSH
21766: LD_VAR 0 5
21770: PPUSH
21771: LD_VAR 0 4
21775: PPUSH
21776: LD_INT 3
21778: PPUSH
21779: CALL_OW 272
21783: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21784: LD_ADDR_VAR 0 8
21788: PUSH
21789: LD_VAR 0 6
21793: PPUSH
21794: LD_VAR 0 4
21798: PPUSH
21799: LD_INT 3
21801: PPUSH
21802: CALL_OW 273
21806: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21807: LD_VAR 0 7
21811: PPUSH
21812: LD_VAR 0 8
21816: PPUSH
21817: CALL_OW 488
21821: NOT
21822: IFFALSE 21826
// continue ;
21824: GO 21758
// if HexInfo ( _x , _y ) = 0 then
21826: LD_VAR 0 7
21830: PPUSH
21831: LD_VAR 0 8
21835: PPUSH
21836: CALL_OW 428
21840: PUSH
21841: LD_INT 0
21843: EQUAL
21844: IFFALSE 21869
// begin ComMoveXY ( unit , _x , _y ) ;
21846: LD_VAR 0 1
21850: PPUSH
21851: LD_VAR 0 7
21855: PPUSH
21856: LD_VAR 0 8
21860: PPUSH
21861: CALL_OW 111
// exit ;
21865: POP
21866: POP
21867: GO 21873
// end ; end ;
21869: GO 21758
21871: POP
21872: POP
// end ;
21873: LD_VAR 0 3
21877: RET
// export function ScanBase ( side , base_area ) ; begin
21878: LD_INT 0
21880: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21881: LD_ADDR_VAR 0 3
21885: PUSH
21886: LD_VAR 0 2
21890: PPUSH
21891: LD_INT 81
21893: PUSH
21894: LD_VAR 0 1
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PPUSH
21903: CALL_OW 70
21907: ST_TO_ADDR
// end ;
21908: LD_VAR 0 3
21912: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21913: LD_INT 0
21915: PPUSH
21916: PPUSH
21917: PPUSH
21918: PPUSH
// result := false ;
21919: LD_ADDR_VAR 0 2
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// side := GetSide ( unit ) ;
21927: LD_ADDR_VAR 0 3
21931: PUSH
21932: LD_VAR 0 1
21936: PPUSH
21937: CALL_OW 255
21941: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21942: LD_ADDR_VAR 0 4
21946: PUSH
21947: LD_VAR 0 1
21951: PPUSH
21952: CALL_OW 248
21956: ST_TO_ADDR
// case nat of 1 :
21957: LD_VAR 0 4
21961: PUSH
21962: LD_INT 1
21964: DOUBLE
21965: EQUAL
21966: IFTRUE 21970
21968: GO 21981
21970: POP
// tech := tech_lassight ; 2 :
21971: LD_ADDR_VAR 0 5
21975: PUSH
21976: LD_INT 12
21978: ST_TO_ADDR
21979: GO 22020
21981: LD_INT 2
21983: DOUBLE
21984: EQUAL
21985: IFTRUE 21989
21987: GO 22000
21989: POP
// tech := tech_mortar ; 3 :
21990: LD_ADDR_VAR 0 5
21994: PUSH
21995: LD_INT 41
21997: ST_TO_ADDR
21998: GO 22020
22000: LD_INT 3
22002: DOUBLE
22003: EQUAL
22004: IFTRUE 22008
22006: GO 22019
22008: POP
// tech := tech_bazooka ; end ;
22009: LD_ADDR_VAR 0 5
22013: PUSH
22014: LD_INT 44
22016: ST_TO_ADDR
22017: GO 22020
22019: POP
// if Researched ( side , tech ) then
22020: LD_VAR 0 3
22024: PPUSH
22025: LD_VAR 0 5
22029: PPUSH
22030: CALL_OW 325
22034: IFFALSE 22061
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22036: LD_ADDR_VAR 0 2
22040: PUSH
22041: LD_INT 5
22043: PUSH
22044: LD_INT 8
22046: PUSH
22047: LD_INT 9
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: PUSH
22055: LD_VAR 0 4
22059: ARRAY
22060: ST_TO_ADDR
// end ;
22061: LD_VAR 0 2
22065: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22066: LD_INT 0
22068: PPUSH
22069: PPUSH
22070: PPUSH
// if not mines then
22071: LD_VAR 0 2
22075: NOT
22076: IFFALSE 22080
// exit ;
22078: GO 22224
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22080: LD_ADDR_VAR 0 5
22084: PUSH
22085: LD_INT 81
22087: PUSH
22088: LD_VAR 0 1
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 3
22099: PUSH
22100: LD_INT 21
22102: PUSH
22103: LD_INT 3
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PPUSH
22118: CALL_OW 69
22122: ST_TO_ADDR
// for i in mines do
22123: LD_ADDR_VAR 0 4
22127: PUSH
22128: LD_VAR 0 2
22132: PUSH
22133: FOR_IN
22134: IFFALSE 22222
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22136: LD_VAR 0 4
22140: PUSH
22141: LD_INT 1
22143: ARRAY
22144: PPUSH
22145: LD_VAR 0 4
22149: PUSH
22150: LD_INT 2
22152: ARRAY
22153: PPUSH
22154: CALL_OW 458
22158: NOT
22159: IFFALSE 22163
// continue ;
22161: GO 22133
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22163: LD_VAR 0 4
22167: PUSH
22168: LD_INT 1
22170: ARRAY
22171: PPUSH
22172: LD_VAR 0 4
22176: PUSH
22177: LD_INT 2
22179: ARRAY
22180: PPUSH
22181: CALL_OW 428
22185: PUSH
22186: LD_VAR 0 5
22190: IN
22191: IFFALSE 22220
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22193: LD_VAR 0 4
22197: PUSH
22198: LD_INT 1
22200: ARRAY
22201: PPUSH
22202: LD_VAR 0 4
22206: PUSH
22207: LD_INT 2
22209: ARRAY
22210: PPUSH
22211: LD_VAR 0 1
22215: PPUSH
22216: CALL_OW 456
// end ;
22220: GO 22133
22222: POP
22223: POP
// end ;
22224: LD_VAR 0 3
22228: RET
// export function Count ( array ) ; var i ; begin
22229: LD_INT 0
22231: PPUSH
22232: PPUSH
// result := 0 ;
22233: LD_ADDR_VAR 0 2
22237: PUSH
22238: LD_INT 0
22240: ST_TO_ADDR
// for i in array do
22241: LD_ADDR_VAR 0 3
22245: PUSH
22246: LD_VAR 0 1
22250: PUSH
22251: FOR_IN
22252: IFFALSE 22276
// if i then
22254: LD_VAR 0 3
22258: IFFALSE 22274
// result := result + 1 ;
22260: LD_ADDR_VAR 0 2
22264: PUSH
22265: LD_VAR 0 2
22269: PUSH
22270: LD_INT 1
22272: PLUS
22273: ST_TO_ADDR
22274: GO 22251
22276: POP
22277: POP
// end ;
22278: LD_VAR 0 2
22282: RET
// export function IsEmpty ( building ) ; begin
22283: LD_INT 0
22285: PPUSH
// if not building then
22286: LD_VAR 0 1
22290: NOT
22291: IFFALSE 22295
// exit ;
22293: GO 22338
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22295: LD_ADDR_VAR 0 2
22299: PUSH
22300: LD_VAR 0 1
22304: PUSH
22305: LD_INT 22
22307: PUSH
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 255
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 58
22324: PUSH
22325: EMPTY
22326: LIST
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PPUSH
22332: CALL_OW 69
22336: IN
22337: ST_TO_ADDR
// end ;
22338: LD_VAR 0 2
22342: RET
// export function IsNotFull ( building ) ; var places ; begin
22343: LD_INT 0
22345: PPUSH
22346: PPUSH
// if not building then
22347: LD_VAR 0 1
22351: NOT
22352: IFFALSE 22356
// exit ;
22354: GO 22527
// result := false ;
22356: LD_ADDR_VAR 0 2
22360: PUSH
22361: LD_INT 0
22363: ST_TO_ADDR
// places := 0 ;
22364: LD_ADDR_VAR 0 3
22368: PUSH
22369: LD_INT 0
22371: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
22372: LD_VAR 0 1
22376: PPUSH
22377: CALL_OW 266
22381: PUSH
22382: LD_INT 0
22384: DOUBLE
22385: EQUAL
22386: IFTRUE 22444
22388: LD_INT 1
22390: DOUBLE
22391: EQUAL
22392: IFTRUE 22444
22394: LD_INT 6
22396: DOUBLE
22397: EQUAL
22398: IFTRUE 22444
22400: LD_INT 7
22402: DOUBLE
22403: EQUAL
22404: IFTRUE 22444
22406: LD_INT 8
22408: DOUBLE
22409: EQUAL
22410: IFTRUE 22444
22412: LD_INT 4
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22444
22418: LD_INT 5
22420: DOUBLE
22421: EQUAL
22422: IFTRUE 22444
22424: LD_INT 2
22426: DOUBLE
22427: EQUAL
22428: IFTRUE 22444
22430: LD_INT 3
22432: DOUBLE
22433: EQUAL
22434: IFTRUE 22444
22436: LD_INT 35
22438: DOUBLE
22439: EQUAL
22440: IFTRUE 22444
22442: GO 22455
22444: POP
// places := 6 ; b_bunker , b_breastwork :
22445: LD_ADDR_VAR 0 3
22449: PUSH
22450: LD_INT 6
22452: ST_TO_ADDR
22453: GO 22500
22455: LD_INT 32
22457: DOUBLE
22458: EQUAL
22459: IFTRUE 22469
22461: LD_INT 31
22463: DOUBLE
22464: EQUAL
22465: IFTRUE 22469
22467: GO 22480
22469: POP
// places := 1 ; b_control_tower :
22470: LD_ADDR_VAR 0 3
22474: PUSH
22475: LD_INT 1
22477: ST_TO_ADDR
22478: GO 22500
22480: LD_INT 36
22482: DOUBLE
22483: EQUAL
22484: IFTRUE 22488
22486: GO 22499
22488: POP
// places := 3 ; end ;
22489: LD_ADDR_VAR 0 3
22493: PUSH
22494: LD_INT 3
22496: ST_TO_ADDR
22497: GO 22500
22499: POP
// if places then
22500: LD_VAR 0 3
22504: IFFALSE 22527
// result := UnitsInside ( building ) < places ;
22506: LD_ADDR_VAR 0 2
22510: PUSH
22511: LD_VAR 0 1
22515: PPUSH
22516: CALL_OW 313
22520: PUSH
22521: LD_VAR 0 3
22525: LESS
22526: ST_TO_ADDR
// end ;
22527: LD_VAR 0 2
22531: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22532: LD_INT 0
22534: PPUSH
22535: PPUSH
22536: PPUSH
22537: PPUSH
// tmp := [ ] ;
22538: LD_ADDR_VAR 0 3
22542: PUSH
22543: EMPTY
22544: ST_TO_ADDR
// list := [ ] ;
22545: LD_ADDR_VAR 0 5
22549: PUSH
22550: EMPTY
22551: ST_TO_ADDR
// for i = 16 to 25 do
22552: LD_ADDR_VAR 0 4
22556: PUSH
22557: DOUBLE
22558: LD_INT 16
22560: DEC
22561: ST_TO_ADDR
22562: LD_INT 25
22564: PUSH
22565: FOR_TO
22566: IFFALSE 22639
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22568: LD_ADDR_VAR 0 3
22572: PUSH
22573: LD_VAR 0 3
22577: PUSH
22578: LD_INT 22
22580: PUSH
22581: LD_VAR 0 1
22585: PPUSH
22586: CALL_OW 255
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 91
22597: PUSH
22598: LD_VAR 0 1
22602: PUSH
22603: LD_INT 6
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 30
22613: PUSH
22614: LD_VAR 0 4
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: PUSH
22628: EMPTY
22629: LIST
22630: PPUSH
22631: CALL_OW 69
22635: ADD
22636: ST_TO_ADDR
22637: GO 22565
22639: POP
22640: POP
// for i = 1 to tmp do
22641: LD_ADDR_VAR 0 4
22645: PUSH
22646: DOUBLE
22647: LD_INT 1
22649: DEC
22650: ST_TO_ADDR
22651: LD_VAR 0 3
22655: PUSH
22656: FOR_TO
22657: IFFALSE 22745
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22659: LD_ADDR_VAR 0 5
22663: PUSH
22664: LD_VAR 0 5
22668: PUSH
22669: LD_VAR 0 3
22673: PUSH
22674: LD_VAR 0 4
22678: ARRAY
22679: PPUSH
22680: CALL_OW 266
22684: PUSH
22685: LD_VAR 0 3
22689: PUSH
22690: LD_VAR 0 4
22694: ARRAY
22695: PPUSH
22696: CALL_OW 250
22700: PUSH
22701: LD_VAR 0 3
22705: PUSH
22706: LD_VAR 0 4
22710: ARRAY
22711: PPUSH
22712: CALL_OW 251
22716: PUSH
22717: LD_VAR 0 3
22721: PUSH
22722: LD_VAR 0 4
22726: ARRAY
22727: PPUSH
22728: CALL_OW 254
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: PUSH
22739: EMPTY
22740: LIST
22741: ADD
22742: ST_TO_ADDR
22743: GO 22656
22745: POP
22746: POP
// result := list ;
22747: LD_ADDR_VAR 0 2
22751: PUSH
22752: LD_VAR 0 5
22756: ST_TO_ADDR
// end ;
22757: LD_VAR 0 2
22761: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22762: LD_INT 0
22764: PPUSH
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
22769: PPUSH
22770: PPUSH
// if not factory then
22771: LD_VAR 0 1
22775: NOT
22776: IFFALSE 22780
// exit ;
22778: GO 23373
// if control = control_apeman then
22780: LD_VAR 0 4
22784: PUSH
22785: LD_INT 5
22787: EQUAL
22788: IFFALSE 22897
// begin tmp := UnitsInside ( factory ) ;
22790: LD_ADDR_VAR 0 8
22794: PUSH
22795: LD_VAR 0 1
22799: PPUSH
22800: CALL_OW 313
22804: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22805: LD_VAR 0 8
22809: PPUSH
22810: LD_INT 25
22812: PUSH
22813: LD_INT 12
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PPUSH
22820: CALL_OW 72
22824: NOT
22825: IFFALSE 22835
// control := control_manual ;
22827: LD_ADDR_VAR 0 4
22831: PUSH
22832: LD_INT 1
22834: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22835: LD_ADDR_VAR 0 8
22839: PUSH
22840: LD_VAR 0 1
22844: PPUSH
22845: CALL 22532 0 1
22849: ST_TO_ADDR
// if tmp then
22850: LD_VAR 0 8
22854: IFFALSE 22897
// begin for i in tmp do
22856: LD_ADDR_VAR 0 7
22860: PUSH
22861: LD_VAR 0 8
22865: PUSH
22866: FOR_IN
22867: IFFALSE 22895
// if i [ 1 ] = b_ext_radio then
22869: LD_VAR 0 7
22873: PUSH
22874: LD_INT 1
22876: ARRAY
22877: PUSH
22878: LD_INT 22
22880: EQUAL
22881: IFFALSE 22893
// begin control := control_remote ;
22883: LD_ADDR_VAR 0 4
22887: PUSH
22888: LD_INT 2
22890: ST_TO_ADDR
// break ;
22891: GO 22895
// end ;
22893: GO 22866
22895: POP
22896: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22897: LD_VAR 0 1
22901: PPUSH
22902: LD_VAR 0 2
22906: PPUSH
22907: LD_VAR 0 3
22911: PPUSH
22912: LD_VAR 0 4
22916: PPUSH
22917: LD_VAR 0 5
22921: PPUSH
22922: CALL_OW 448
22926: IFFALSE 22961
// begin result := [ chassis , engine , control , weapon ] ;
22928: LD_ADDR_VAR 0 6
22932: PUSH
22933: LD_VAR 0 2
22937: PUSH
22938: LD_VAR 0 3
22942: PUSH
22943: LD_VAR 0 4
22947: PUSH
22948: LD_VAR 0 5
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: ST_TO_ADDR
// exit ;
22959: GO 23373
// end ; _chassis := AvailableChassisList ( factory ) ;
22961: LD_ADDR_VAR 0 9
22965: PUSH
22966: LD_VAR 0 1
22970: PPUSH
22971: CALL_OW 475
22975: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22976: LD_ADDR_VAR 0 11
22980: PUSH
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 476
22990: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22991: LD_ADDR_VAR 0 12
22995: PUSH
22996: LD_VAR 0 1
23000: PPUSH
23001: CALL_OW 477
23005: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23006: LD_ADDR_VAR 0 10
23010: PUSH
23011: LD_VAR 0 1
23015: PPUSH
23016: CALL_OW 478
23020: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23021: LD_VAR 0 9
23025: NOT
23026: PUSH
23027: LD_VAR 0 11
23031: NOT
23032: OR
23033: PUSH
23034: LD_VAR 0 12
23038: NOT
23039: OR
23040: PUSH
23041: LD_VAR 0 10
23045: NOT
23046: OR
23047: IFFALSE 23082
// begin result := [ chassis , engine , control , weapon ] ;
23049: LD_ADDR_VAR 0 6
23053: PUSH
23054: LD_VAR 0 2
23058: PUSH
23059: LD_VAR 0 3
23063: PUSH
23064: LD_VAR 0 4
23068: PUSH
23069: LD_VAR 0 5
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: ST_TO_ADDR
// exit ;
23080: GO 23373
// end ; if not chassis in _chassis then
23082: LD_VAR 0 2
23086: PUSH
23087: LD_VAR 0 9
23091: IN
23092: NOT
23093: IFFALSE 23119
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23095: LD_ADDR_VAR 0 2
23099: PUSH
23100: LD_VAR 0 9
23104: PUSH
23105: LD_INT 1
23107: PPUSH
23108: LD_VAR 0 9
23112: PPUSH
23113: CALL_OW 12
23117: ARRAY
23118: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23119: LD_VAR 0 2
23123: PPUSH
23124: LD_VAR 0 3
23128: PPUSH
23129: CALL 23378 0 2
23133: NOT
23134: IFFALSE 23193
// repeat engine := _engine [ 1 ] ;
23136: LD_ADDR_VAR 0 3
23140: PUSH
23141: LD_VAR 0 11
23145: PUSH
23146: LD_INT 1
23148: ARRAY
23149: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23150: LD_ADDR_VAR 0 11
23154: PUSH
23155: LD_VAR 0 11
23159: PPUSH
23160: LD_INT 1
23162: PPUSH
23163: CALL_OW 3
23167: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23168: LD_VAR 0 2
23172: PPUSH
23173: LD_VAR 0 3
23177: PPUSH
23178: CALL 23378 0 2
23182: PUSH
23183: LD_VAR 0 11
23187: PUSH
23188: EMPTY
23189: EQUAL
23190: OR
23191: IFFALSE 23136
// if not control in _control then
23193: LD_VAR 0 4
23197: PUSH
23198: LD_VAR 0 12
23202: IN
23203: NOT
23204: IFFALSE 23230
// control := _control [ rand ( 1 , _control ) ] ;
23206: LD_ADDR_VAR 0 4
23210: PUSH
23211: LD_VAR 0 12
23215: PUSH
23216: LD_INT 1
23218: PPUSH
23219: LD_VAR 0 12
23223: PPUSH
23224: CALL_OW 12
23228: ARRAY
23229: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23230: LD_VAR 0 2
23234: PPUSH
23235: LD_VAR 0 5
23239: PPUSH
23240: CALL 23598 0 2
23244: NOT
23245: IFFALSE 23304
// repeat weapon := _weapon [ 1 ] ;
23247: LD_ADDR_VAR 0 5
23251: PUSH
23252: LD_VAR 0 10
23256: PUSH
23257: LD_INT 1
23259: ARRAY
23260: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23261: LD_ADDR_VAR 0 10
23265: PUSH
23266: LD_VAR 0 10
23270: PPUSH
23271: LD_INT 1
23273: PPUSH
23274: CALL_OW 3
23278: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23279: LD_VAR 0 2
23283: PPUSH
23284: LD_VAR 0 5
23288: PPUSH
23289: CALL 23598 0 2
23293: PUSH
23294: LD_VAR 0 10
23298: PUSH
23299: EMPTY
23300: EQUAL
23301: OR
23302: IFFALSE 23247
// result := [ ] ;
23304: LD_ADDR_VAR 0 6
23308: PUSH
23309: EMPTY
23310: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23311: LD_VAR 0 1
23315: PPUSH
23316: LD_VAR 0 2
23320: PPUSH
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_VAR 0 4
23330: PPUSH
23331: LD_VAR 0 5
23335: PPUSH
23336: CALL_OW 448
23340: IFFALSE 23373
// result := [ chassis , engine , control , weapon ] ;
23342: LD_ADDR_VAR 0 6
23346: PUSH
23347: LD_VAR 0 2
23351: PUSH
23352: LD_VAR 0 3
23356: PUSH
23357: LD_VAR 0 4
23361: PUSH
23362: LD_VAR 0 5
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: ST_TO_ADDR
// end ;
23373: LD_VAR 0 6
23377: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23378: LD_INT 0
23380: PPUSH
// if not chassis or not engine then
23381: LD_VAR 0 1
23385: NOT
23386: PUSH
23387: LD_VAR 0 2
23391: NOT
23392: OR
23393: IFFALSE 23397
// exit ;
23395: GO 23593
// case engine of engine_solar :
23397: LD_VAR 0 2
23401: PUSH
23402: LD_INT 2
23404: DOUBLE
23405: EQUAL
23406: IFTRUE 23410
23408: GO 23448
23410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23411: LD_ADDR_VAR 0 3
23415: PUSH
23416: LD_INT 11
23418: PUSH
23419: LD_INT 12
23421: PUSH
23422: LD_INT 13
23424: PUSH
23425: LD_INT 14
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 3
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: ST_TO_ADDR
23446: GO 23577
23448: LD_INT 1
23450: DOUBLE
23451: EQUAL
23452: IFTRUE 23456
23454: GO 23518
23456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23457: LD_ADDR_VAR 0 3
23461: PUSH
23462: LD_INT 11
23464: PUSH
23465: LD_INT 12
23467: PUSH
23468: LD_INT 13
23470: PUSH
23471: LD_INT 14
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: LD_INT 3
23482: PUSH
23483: LD_INT 4
23485: PUSH
23486: LD_INT 5
23488: PUSH
23489: LD_INT 21
23491: PUSH
23492: LD_INT 23
23494: PUSH
23495: LD_INT 22
23497: PUSH
23498: LD_INT 24
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: ST_TO_ADDR
23516: GO 23577
23518: LD_INT 3
23520: DOUBLE
23521: EQUAL
23522: IFTRUE 23526
23524: GO 23576
23526: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23527: LD_ADDR_VAR 0 3
23531: PUSH
23532: LD_INT 13
23534: PUSH
23535: LD_INT 14
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 4
23546: PUSH
23547: LD_INT 5
23549: PUSH
23550: LD_INT 21
23552: PUSH
23553: LD_INT 22
23555: PUSH
23556: LD_INT 23
23558: PUSH
23559: LD_INT 24
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: ST_TO_ADDR
23574: GO 23577
23576: POP
// result := ( chassis in result ) ;
23577: LD_ADDR_VAR 0 3
23581: PUSH
23582: LD_VAR 0 1
23586: PUSH
23587: LD_VAR 0 3
23591: IN
23592: ST_TO_ADDR
// end ;
23593: LD_VAR 0 3
23597: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23598: LD_INT 0
23600: PPUSH
// if not chassis or not weapon then
23601: LD_VAR 0 1
23605: NOT
23606: PUSH
23607: LD_VAR 0 2
23611: NOT
23612: OR
23613: IFFALSE 23617
// exit ;
23615: GO 24679
// case weapon of us_machine_gun :
23617: LD_VAR 0 2
23621: PUSH
23622: LD_INT 2
23624: DOUBLE
23625: EQUAL
23626: IFTRUE 23630
23628: GO 23660
23630: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23631: LD_ADDR_VAR 0 3
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: LD_INT 2
23641: PUSH
23642: LD_INT 3
23644: PUSH
23645: LD_INT 4
23647: PUSH
23648: LD_INT 5
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: ST_TO_ADDR
23658: GO 24663
23660: LD_INT 3
23662: DOUBLE
23663: EQUAL
23664: IFTRUE 23668
23666: GO 23698
23668: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23669: LD_ADDR_VAR 0 3
23673: PUSH
23674: LD_INT 1
23676: PUSH
23677: LD_INT 2
23679: PUSH
23680: LD_INT 3
23682: PUSH
23683: LD_INT 4
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: ST_TO_ADDR
23696: GO 24663
23698: LD_INT 11
23700: DOUBLE
23701: EQUAL
23702: IFTRUE 23706
23704: GO 23736
23706: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23707: LD_ADDR_VAR 0 3
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: LD_INT 3
23720: PUSH
23721: LD_INT 4
23723: PUSH
23724: LD_INT 5
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: ST_TO_ADDR
23734: GO 24663
23736: LD_INT 4
23738: DOUBLE
23739: EQUAL
23740: IFTRUE 23744
23742: GO 23770
23744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23745: LD_ADDR_VAR 0 3
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 3
23755: PUSH
23756: LD_INT 4
23758: PUSH
23759: LD_INT 5
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: ST_TO_ADDR
23768: GO 24663
23770: LD_INT 5
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 23804
23778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23779: LD_ADDR_VAR 0 3
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: LD_INT 3
23789: PUSH
23790: LD_INT 4
23792: PUSH
23793: LD_INT 5
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: ST_TO_ADDR
23802: GO 24663
23804: LD_INT 9
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 23838
23812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23813: LD_ADDR_VAR 0 3
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: LD_INT 3
23823: PUSH
23824: LD_INT 4
23826: PUSH
23827: LD_INT 5
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: ST_TO_ADDR
23836: GO 24663
23838: LD_INT 7
23840: DOUBLE
23841: EQUAL
23842: IFTRUE 23846
23844: GO 23872
23846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23847: LD_ADDR_VAR 0 3
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: LD_INT 3
23857: PUSH
23858: LD_INT 4
23860: PUSH
23861: LD_INT 5
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: ST_TO_ADDR
23870: GO 24663
23872: LD_INT 12
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23906
23880: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23881: LD_ADDR_VAR 0 3
23885: PUSH
23886: LD_INT 2
23888: PUSH
23889: LD_INT 3
23891: PUSH
23892: LD_INT 4
23894: PUSH
23895: LD_INT 5
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: ST_TO_ADDR
23904: GO 24663
23906: LD_INT 13
23908: DOUBLE
23909: EQUAL
23910: IFTRUE 23914
23912: GO 23940
23914: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 2
23922: PUSH
23923: LD_INT 3
23925: PUSH
23926: LD_INT 4
23928: PUSH
23929: LD_INT 5
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: ST_TO_ADDR
23938: GO 24663
23940: LD_INT 14
23942: DOUBLE
23943: EQUAL
23944: IFTRUE 23948
23946: GO 23966
23948: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23949: LD_ADDR_VAR 0 3
23953: PUSH
23954: LD_INT 4
23956: PUSH
23957: LD_INT 5
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: ST_TO_ADDR
23964: GO 24663
23966: LD_INT 6
23968: DOUBLE
23969: EQUAL
23970: IFTRUE 23974
23972: GO 23992
23974: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23975: LD_ADDR_VAR 0 3
23979: PUSH
23980: LD_INT 4
23982: PUSH
23983: LD_INT 5
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: ST_TO_ADDR
23990: GO 24663
23992: LD_INT 10
23994: DOUBLE
23995: EQUAL
23996: IFTRUE 24000
23998: GO 24018
24000: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_INT 4
24008: PUSH
24009: LD_INT 5
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: ST_TO_ADDR
24016: GO 24663
24018: LD_INT 22
24020: DOUBLE
24021: EQUAL
24022: IFTRUE 24026
24024: GO 24052
24026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24027: LD_ADDR_VAR 0 3
24031: PUSH
24032: LD_INT 11
24034: PUSH
24035: LD_INT 12
24037: PUSH
24038: LD_INT 13
24040: PUSH
24041: LD_INT 14
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: ST_TO_ADDR
24050: GO 24663
24052: LD_INT 23
24054: DOUBLE
24055: EQUAL
24056: IFTRUE 24060
24058: GO 24086
24060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24061: LD_ADDR_VAR 0 3
24065: PUSH
24066: LD_INT 11
24068: PUSH
24069: LD_INT 12
24071: PUSH
24072: LD_INT 13
24074: PUSH
24075: LD_INT 14
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: ST_TO_ADDR
24084: GO 24663
24086: LD_INT 24
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24120
24094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_INT 11
24102: PUSH
24103: LD_INT 12
24105: PUSH
24106: LD_INT 13
24108: PUSH
24109: LD_INT 14
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: ST_TO_ADDR
24118: GO 24663
24120: LD_INT 30
24122: DOUBLE
24123: EQUAL
24124: IFTRUE 24128
24126: GO 24154
24128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24129: LD_ADDR_VAR 0 3
24133: PUSH
24134: LD_INT 11
24136: PUSH
24137: LD_INT 12
24139: PUSH
24140: LD_INT 13
24142: PUSH
24143: LD_INT 14
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: ST_TO_ADDR
24152: GO 24663
24154: LD_INT 25
24156: DOUBLE
24157: EQUAL
24158: IFTRUE 24162
24160: GO 24180
24162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24163: LD_ADDR_VAR 0 3
24167: PUSH
24168: LD_INT 13
24170: PUSH
24171: LD_INT 14
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: ST_TO_ADDR
24178: GO 24663
24180: LD_INT 27
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24206
24188: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24189: LD_ADDR_VAR 0 3
24193: PUSH
24194: LD_INT 13
24196: PUSH
24197: LD_INT 14
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: ST_TO_ADDR
24204: GO 24663
24206: LD_EXP 16
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24242
24216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24217: LD_ADDR_VAR 0 3
24221: PUSH
24222: LD_INT 11
24224: PUSH
24225: LD_INT 12
24227: PUSH
24228: LD_INT 13
24230: PUSH
24231: LD_INT 14
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: ST_TO_ADDR
24240: GO 24663
24242: LD_INT 28
24244: DOUBLE
24245: EQUAL
24246: IFTRUE 24250
24248: GO 24268
24250: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24251: LD_ADDR_VAR 0 3
24255: PUSH
24256: LD_INT 13
24258: PUSH
24259: LD_INT 14
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: ST_TO_ADDR
24266: GO 24663
24268: LD_INT 29
24270: DOUBLE
24271: EQUAL
24272: IFTRUE 24276
24274: GO 24294
24276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24277: LD_ADDR_VAR 0 3
24281: PUSH
24282: LD_INT 13
24284: PUSH
24285: LD_INT 14
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: ST_TO_ADDR
24292: GO 24663
24294: LD_INT 31
24296: DOUBLE
24297: EQUAL
24298: IFTRUE 24302
24300: GO 24320
24302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24303: LD_ADDR_VAR 0 3
24307: PUSH
24308: LD_INT 13
24310: PUSH
24311: LD_INT 14
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: ST_TO_ADDR
24318: GO 24663
24320: LD_INT 26
24322: DOUBLE
24323: EQUAL
24324: IFTRUE 24328
24326: GO 24346
24328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24329: LD_ADDR_VAR 0 3
24333: PUSH
24334: LD_INT 13
24336: PUSH
24337: LD_INT 14
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: ST_TO_ADDR
24344: GO 24663
24346: LD_INT 42
24348: DOUBLE
24349: EQUAL
24350: IFTRUE 24354
24352: GO 24380
24354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_INT 21
24362: PUSH
24363: LD_INT 22
24365: PUSH
24366: LD_INT 23
24368: PUSH
24369: LD_INT 24
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: ST_TO_ADDR
24378: GO 24663
24380: LD_INT 43
24382: DOUBLE
24383: EQUAL
24384: IFTRUE 24388
24386: GO 24414
24388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24389: LD_ADDR_VAR 0 3
24393: PUSH
24394: LD_INT 21
24396: PUSH
24397: LD_INT 22
24399: PUSH
24400: LD_INT 23
24402: PUSH
24403: LD_INT 24
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: ST_TO_ADDR
24412: GO 24663
24414: LD_INT 44
24416: DOUBLE
24417: EQUAL
24418: IFTRUE 24422
24420: GO 24448
24422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24423: LD_ADDR_VAR 0 3
24427: PUSH
24428: LD_INT 21
24430: PUSH
24431: LD_INT 22
24433: PUSH
24434: LD_INT 23
24436: PUSH
24437: LD_INT 24
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: ST_TO_ADDR
24446: GO 24663
24448: LD_INT 45
24450: DOUBLE
24451: EQUAL
24452: IFTRUE 24456
24454: GO 24482
24456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24457: LD_ADDR_VAR 0 3
24461: PUSH
24462: LD_INT 21
24464: PUSH
24465: LD_INT 22
24467: PUSH
24468: LD_INT 23
24470: PUSH
24471: LD_INT 24
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: ST_TO_ADDR
24480: GO 24663
24482: LD_INT 49
24484: DOUBLE
24485: EQUAL
24486: IFTRUE 24490
24488: GO 24516
24490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24491: LD_ADDR_VAR 0 3
24495: PUSH
24496: LD_INT 21
24498: PUSH
24499: LD_INT 22
24501: PUSH
24502: LD_INT 23
24504: PUSH
24505: LD_INT 24
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: ST_TO_ADDR
24514: GO 24663
24516: LD_INT 51
24518: DOUBLE
24519: EQUAL
24520: IFTRUE 24524
24522: GO 24550
24524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24525: LD_ADDR_VAR 0 3
24529: PUSH
24530: LD_INT 21
24532: PUSH
24533: LD_INT 22
24535: PUSH
24536: LD_INT 23
24538: PUSH
24539: LD_INT 24
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: ST_TO_ADDR
24548: GO 24663
24550: LD_INT 52
24552: DOUBLE
24553: EQUAL
24554: IFTRUE 24558
24556: GO 24584
24558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24559: LD_ADDR_VAR 0 3
24563: PUSH
24564: LD_INT 21
24566: PUSH
24567: LD_INT 22
24569: PUSH
24570: LD_INT 23
24572: PUSH
24573: LD_INT 24
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: ST_TO_ADDR
24582: GO 24663
24584: LD_INT 53
24586: DOUBLE
24587: EQUAL
24588: IFTRUE 24592
24590: GO 24610
24592: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24593: LD_ADDR_VAR 0 3
24597: PUSH
24598: LD_INT 23
24600: PUSH
24601: LD_INT 24
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: ST_TO_ADDR
24608: GO 24663
24610: LD_INT 46
24612: DOUBLE
24613: EQUAL
24614: IFTRUE 24618
24616: GO 24636
24618: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24619: LD_ADDR_VAR 0 3
24623: PUSH
24624: LD_INT 23
24626: PUSH
24627: LD_INT 24
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: ST_TO_ADDR
24634: GO 24663
24636: LD_INT 47
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24662
24644: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_INT 23
24652: PUSH
24653: LD_INT 24
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: ST_TO_ADDR
24660: GO 24663
24662: POP
// result := ( chassis in result ) ;
24663: LD_ADDR_VAR 0 3
24667: PUSH
24668: LD_VAR 0 1
24672: PUSH
24673: LD_VAR 0 3
24677: IN
24678: ST_TO_ADDR
// end ;
24679: LD_VAR 0 3
24683: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24684: LD_INT 0
24686: PPUSH
24687: PPUSH
24688: PPUSH
24689: PPUSH
24690: PPUSH
24691: PPUSH
24692: PPUSH
// result := array ;
24693: LD_ADDR_VAR 0 5
24697: PUSH
24698: LD_VAR 0 1
24702: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24703: LD_VAR 0 1
24707: NOT
24708: PUSH
24709: LD_VAR 0 2
24713: NOT
24714: OR
24715: PUSH
24716: LD_VAR 0 3
24720: NOT
24721: OR
24722: PUSH
24723: LD_VAR 0 2
24727: PUSH
24728: LD_VAR 0 1
24732: GREATER
24733: OR
24734: PUSH
24735: LD_VAR 0 3
24739: PUSH
24740: LD_VAR 0 1
24744: GREATER
24745: OR
24746: IFFALSE 24750
// exit ;
24748: GO 25046
// if direction then
24750: LD_VAR 0 4
24754: IFFALSE 24818
// begin d := 1 ;
24756: LD_ADDR_VAR 0 9
24760: PUSH
24761: LD_INT 1
24763: ST_TO_ADDR
// if i_from > i_to then
24764: LD_VAR 0 2
24768: PUSH
24769: LD_VAR 0 3
24773: GREATER
24774: IFFALSE 24800
// length := ( array - i_from ) + i_to else
24776: LD_ADDR_VAR 0 11
24780: PUSH
24781: LD_VAR 0 1
24785: PUSH
24786: LD_VAR 0 2
24790: MINUS
24791: PUSH
24792: LD_VAR 0 3
24796: PLUS
24797: ST_TO_ADDR
24798: GO 24816
// length := i_to - i_from ;
24800: LD_ADDR_VAR 0 11
24804: PUSH
24805: LD_VAR 0 3
24809: PUSH
24810: LD_VAR 0 2
24814: MINUS
24815: ST_TO_ADDR
// end else
24816: GO 24879
// begin d := - 1 ;
24818: LD_ADDR_VAR 0 9
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: ST_TO_ADDR
// if i_from > i_to then
24827: LD_VAR 0 2
24831: PUSH
24832: LD_VAR 0 3
24836: GREATER
24837: IFFALSE 24857
// length := i_from - i_to else
24839: LD_ADDR_VAR 0 11
24843: PUSH
24844: LD_VAR 0 2
24848: PUSH
24849: LD_VAR 0 3
24853: MINUS
24854: ST_TO_ADDR
24855: GO 24879
// length := ( array - i_to ) + i_from ;
24857: LD_ADDR_VAR 0 11
24861: PUSH
24862: LD_VAR 0 1
24866: PUSH
24867: LD_VAR 0 3
24871: MINUS
24872: PUSH
24873: LD_VAR 0 2
24877: PLUS
24878: ST_TO_ADDR
// end ; if not length then
24879: LD_VAR 0 11
24883: NOT
24884: IFFALSE 24888
// exit ;
24886: GO 25046
// tmp := array ;
24888: LD_ADDR_VAR 0 10
24892: PUSH
24893: LD_VAR 0 1
24897: ST_TO_ADDR
// for i = 1 to length do
24898: LD_ADDR_VAR 0 6
24902: PUSH
24903: DOUBLE
24904: LD_INT 1
24906: DEC
24907: ST_TO_ADDR
24908: LD_VAR 0 11
24912: PUSH
24913: FOR_TO
24914: IFFALSE 25034
// begin for j = 1 to array do
24916: LD_ADDR_VAR 0 7
24920: PUSH
24921: DOUBLE
24922: LD_INT 1
24924: DEC
24925: ST_TO_ADDR
24926: LD_VAR 0 1
24930: PUSH
24931: FOR_TO
24932: IFFALSE 25020
// begin k := j + d ;
24934: LD_ADDR_VAR 0 8
24938: PUSH
24939: LD_VAR 0 7
24943: PUSH
24944: LD_VAR 0 9
24948: PLUS
24949: ST_TO_ADDR
// if k > array then
24950: LD_VAR 0 8
24954: PUSH
24955: LD_VAR 0 1
24959: GREATER
24960: IFFALSE 24970
// k := 1 ;
24962: LD_ADDR_VAR 0 8
24966: PUSH
24967: LD_INT 1
24969: ST_TO_ADDR
// if not k then
24970: LD_VAR 0 8
24974: NOT
24975: IFFALSE 24987
// k := array ;
24977: LD_ADDR_VAR 0 8
24981: PUSH
24982: LD_VAR 0 1
24986: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24987: LD_ADDR_VAR 0 10
24991: PUSH
24992: LD_VAR 0 10
24996: PPUSH
24997: LD_VAR 0 8
25001: PPUSH
25002: LD_VAR 0 1
25006: PUSH
25007: LD_VAR 0 7
25011: ARRAY
25012: PPUSH
25013: CALL_OW 1
25017: ST_TO_ADDR
// end ;
25018: GO 24931
25020: POP
25021: POP
// array := tmp ;
25022: LD_ADDR_VAR 0 1
25026: PUSH
25027: LD_VAR 0 10
25031: ST_TO_ADDR
// end ;
25032: GO 24913
25034: POP
25035: POP
// result := array ;
25036: LD_ADDR_VAR 0 5
25040: PUSH
25041: LD_VAR 0 1
25045: ST_TO_ADDR
// end ;
25046: LD_VAR 0 5
25050: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25051: LD_INT 0
25053: PPUSH
25054: PPUSH
// result := 0 ;
25055: LD_ADDR_VAR 0 3
25059: PUSH
25060: LD_INT 0
25062: ST_TO_ADDR
// if not array or not value in array then
25063: LD_VAR 0 1
25067: NOT
25068: PUSH
25069: LD_VAR 0 2
25073: PUSH
25074: LD_VAR 0 1
25078: IN
25079: NOT
25080: OR
25081: IFFALSE 25085
// exit ;
25083: GO 25139
// for i = 1 to array do
25085: LD_ADDR_VAR 0 4
25089: PUSH
25090: DOUBLE
25091: LD_INT 1
25093: DEC
25094: ST_TO_ADDR
25095: LD_VAR 0 1
25099: PUSH
25100: FOR_TO
25101: IFFALSE 25137
// if value = array [ i ] then
25103: LD_VAR 0 2
25107: PUSH
25108: LD_VAR 0 1
25112: PUSH
25113: LD_VAR 0 4
25117: ARRAY
25118: EQUAL
25119: IFFALSE 25135
// begin result := i ;
25121: LD_ADDR_VAR 0 3
25125: PUSH
25126: LD_VAR 0 4
25130: ST_TO_ADDR
// exit ;
25131: POP
25132: POP
25133: GO 25139
// end ;
25135: GO 25100
25137: POP
25138: POP
// end ;
25139: LD_VAR 0 3
25143: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25144: LD_INT 0
25146: PPUSH
// vc_chassis := chassis ;
25147: LD_ADDR_OWVAR 37
25151: PUSH
25152: LD_VAR 0 1
25156: ST_TO_ADDR
// vc_engine := engine ;
25157: LD_ADDR_OWVAR 39
25161: PUSH
25162: LD_VAR 0 2
25166: ST_TO_ADDR
// vc_control := control ;
25167: LD_ADDR_OWVAR 38
25171: PUSH
25172: LD_VAR 0 3
25176: ST_TO_ADDR
// vc_weapon := weapon ;
25177: LD_ADDR_OWVAR 40
25181: PUSH
25182: LD_VAR 0 4
25186: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25187: LD_ADDR_OWVAR 41
25191: PUSH
25192: LD_VAR 0 5
25196: ST_TO_ADDR
// end ;
25197: LD_VAR 0 6
25201: RET
// export function WantPlant ( unit ) ; var task ; begin
25202: LD_INT 0
25204: PPUSH
25205: PPUSH
// result := false ;
25206: LD_ADDR_VAR 0 2
25210: PUSH
25211: LD_INT 0
25213: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25214: LD_ADDR_VAR 0 3
25218: PUSH
25219: LD_VAR 0 1
25223: PPUSH
25224: CALL_OW 437
25228: ST_TO_ADDR
// if task then
25229: LD_VAR 0 3
25233: IFFALSE 25261
// if task [ 1 ] [ 1 ] = p then
25235: LD_VAR 0 3
25239: PUSH
25240: LD_INT 1
25242: ARRAY
25243: PUSH
25244: LD_INT 1
25246: ARRAY
25247: PUSH
25248: LD_STRING p
25250: EQUAL
25251: IFFALSE 25261
// result := true ;
25253: LD_ADDR_VAR 0 2
25257: PUSH
25258: LD_INT 1
25260: ST_TO_ADDR
// end ;
25261: LD_VAR 0 2
25265: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25266: LD_INT 0
25268: PPUSH
25269: PPUSH
25270: PPUSH
25271: PPUSH
// if pos < 1 then
25272: LD_VAR 0 2
25276: PUSH
25277: LD_INT 1
25279: LESS
25280: IFFALSE 25284
// exit ;
25282: GO 25587
// if pos = 1 then
25284: LD_VAR 0 2
25288: PUSH
25289: LD_INT 1
25291: EQUAL
25292: IFFALSE 25325
// result := Replace ( arr , pos [ 1 ] , value ) else
25294: LD_ADDR_VAR 0 4
25298: PUSH
25299: LD_VAR 0 1
25303: PPUSH
25304: LD_VAR 0 2
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: PPUSH
25313: LD_VAR 0 3
25317: PPUSH
25318: CALL_OW 1
25322: ST_TO_ADDR
25323: GO 25587
// begin tmp := arr ;
25325: LD_ADDR_VAR 0 6
25329: PUSH
25330: LD_VAR 0 1
25334: ST_TO_ADDR
// s_arr := [ tmp ] ;
25335: LD_ADDR_VAR 0 7
25339: PUSH
25340: LD_VAR 0 6
25344: PUSH
25345: EMPTY
25346: LIST
25347: ST_TO_ADDR
// for i = 1 to pos - 1 do
25348: LD_ADDR_VAR 0 5
25352: PUSH
25353: DOUBLE
25354: LD_INT 1
25356: DEC
25357: ST_TO_ADDR
25358: LD_VAR 0 2
25362: PUSH
25363: LD_INT 1
25365: MINUS
25366: PUSH
25367: FOR_TO
25368: IFFALSE 25413
// begin tmp := tmp [ pos [ i ] ] ;
25370: LD_ADDR_VAR 0 6
25374: PUSH
25375: LD_VAR 0 6
25379: PUSH
25380: LD_VAR 0 2
25384: PUSH
25385: LD_VAR 0 5
25389: ARRAY
25390: ARRAY
25391: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25392: LD_ADDR_VAR 0 7
25396: PUSH
25397: LD_VAR 0 7
25401: PUSH
25402: LD_VAR 0 6
25406: PUSH
25407: EMPTY
25408: LIST
25409: ADD
25410: ST_TO_ADDR
// end ;
25411: GO 25367
25413: POP
25414: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25415: LD_ADDR_VAR 0 6
25419: PUSH
25420: LD_VAR 0 6
25424: PPUSH
25425: LD_VAR 0 2
25429: PUSH
25430: LD_VAR 0 2
25434: ARRAY
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: CALL_OW 1
25445: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25446: LD_ADDR_VAR 0 7
25450: PUSH
25451: LD_VAR 0 7
25455: PPUSH
25456: LD_VAR 0 7
25460: PPUSH
25461: LD_VAR 0 6
25465: PPUSH
25466: CALL_OW 1
25470: ST_TO_ADDR
// for i = s_arr downto 2 do
25471: LD_ADDR_VAR 0 5
25475: PUSH
25476: DOUBLE
25477: LD_VAR 0 7
25481: INC
25482: ST_TO_ADDR
25483: LD_INT 2
25485: PUSH
25486: FOR_DOWNTO
25487: IFFALSE 25571
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25489: LD_ADDR_VAR 0 6
25493: PUSH
25494: LD_VAR 0 7
25498: PUSH
25499: LD_VAR 0 5
25503: PUSH
25504: LD_INT 1
25506: MINUS
25507: ARRAY
25508: PPUSH
25509: LD_VAR 0 2
25513: PUSH
25514: LD_VAR 0 5
25518: PUSH
25519: LD_INT 1
25521: MINUS
25522: ARRAY
25523: PPUSH
25524: LD_VAR 0 7
25528: PUSH
25529: LD_VAR 0 5
25533: ARRAY
25534: PPUSH
25535: CALL_OW 1
25539: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25540: LD_ADDR_VAR 0 7
25544: PUSH
25545: LD_VAR 0 7
25549: PPUSH
25550: LD_VAR 0 5
25554: PUSH
25555: LD_INT 1
25557: MINUS
25558: PPUSH
25559: LD_VAR 0 6
25563: PPUSH
25564: CALL_OW 1
25568: ST_TO_ADDR
// end ;
25569: GO 25486
25571: POP
25572: POP
// result := s_arr [ 1 ] ;
25573: LD_ADDR_VAR 0 4
25577: PUSH
25578: LD_VAR 0 7
25582: PUSH
25583: LD_INT 1
25585: ARRAY
25586: ST_TO_ADDR
// end ; end ;
25587: LD_VAR 0 4
25591: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25592: LD_INT 0
25594: PPUSH
25595: PPUSH
// if not list then
25596: LD_VAR 0 1
25600: NOT
25601: IFFALSE 25605
// exit ;
25603: GO 25696
// i := list [ pos1 ] ;
25605: LD_ADDR_VAR 0 5
25609: PUSH
25610: LD_VAR 0 1
25614: PUSH
25615: LD_VAR 0 2
25619: ARRAY
25620: ST_TO_ADDR
// if not i then
25621: LD_VAR 0 5
25625: NOT
25626: IFFALSE 25630
// exit ;
25628: GO 25696
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25630: LD_ADDR_VAR 0 1
25634: PUSH
25635: LD_VAR 0 1
25639: PPUSH
25640: LD_VAR 0 2
25644: PPUSH
25645: LD_VAR 0 1
25649: PUSH
25650: LD_VAR 0 3
25654: ARRAY
25655: PPUSH
25656: CALL_OW 1
25660: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25661: LD_ADDR_VAR 0 1
25665: PUSH
25666: LD_VAR 0 1
25670: PPUSH
25671: LD_VAR 0 3
25675: PPUSH
25676: LD_VAR 0 5
25680: PPUSH
25681: CALL_OW 1
25685: ST_TO_ADDR
// result := list ;
25686: LD_ADDR_VAR 0 4
25690: PUSH
25691: LD_VAR 0 1
25695: ST_TO_ADDR
// end ;
25696: LD_VAR 0 4
25700: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25701: LD_INT 0
25703: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25704: LD_ADDR_VAR 0 5
25708: PUSH
25709: LD_VAR 0 1
25713: PPUSH
25714: CALL_OW 250
25718: PPUSH
25719: LD_VAR 0 1
25723: PPUSH
25724: CALL_OW 251
25728: PPUSH
25729: LD_VAR 0 2
25733: PPUSH
25734: LD_VAR 0 3
25738: PPUSH
25739: LD_VAR 0 4
25743: PPUSH
25744: CALL 25754 0 5
25748: ST_TO_ADDR
// end ;
25749: LD_VAR 0 5
25753: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25754: LD_INT 0
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
// if not list then
25760: LD_VAR 0 3
25764: NOT
25765: IFFALSE 25769
// exit ;
25767: GO 26157
// result := [ ] ;
25769: LD_ADDR_VAR 0 6
25773: PUSH
25774: EMPTY
25775: ST_TO_ADDR
// for i in list do
25776: LD_ADDR_VAR 0 7
25780: PUSH
25781: LD_VAR 0 3
25785: PUSH
25786: FOR_IN
25787: IFFALSE 25989
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25789: LD_ADDR_VAR 0 9
25793: PUSH
25794: LD_VAR 0 7
25798: PPUSH
25799: LD_VAR 0 1
25803: PPUSH
25804: LD_VAR 0 2
25808: PPUSH
25809: CALL_OW 297
25813: ST_TO_ADDR
// if not result then
25814: LD_VAR 0 6
25818: NOT
25819: IFFALSE 25845
// result := [ [ i , tmp ] ] else
25821: LD_ADDR_VAR 0 6
25825: PUSH
25826: LD_VAR 0 7
25830: PUSH
25831: LD_VAR 0 9
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: EMPTY
25841: LIST
25842: ST_TO_ADDR
25843: GO 25987
// begin if result [ result ] [ 2 ] < tmp then
25845: LD_VAR 0 6
25849: PUSH
25850: LD_VAR 0 6
25854: ARRAY
25855: PUSH
25856: LD_INT 2
25858: ARRAY
25859: PUSH
25860: LD_VAR 0 9
25864: LESS
25865: IFFALSE 25907
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25867: LD_ADDR_VAR 0 6
25871: PUSH
25872: LD_VAR 0 6
25876: PPUSH
25877: LD_VAR 0 6
25881: PUSH
25882: LD_INT 1
25884: PLUS
25885: PPUSH
25886: LD_VAR 0 7
25890: PUSH
25891: LD_VAR 0 9
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PPUSH
25900: CALL_OW 2
25904: ST_TO_ADDR
25905: GO 25987
// for j = 1 to result do
25907: LD_ADDR_VAR 0 8
25911: PUSH
25912: DOUBLE
25913: LD_INT 1
25915: DEC
25916: ST_TO_ADDR
25917: LD_VAR 0 6
25921: PUSH
25922: FOR_TO
25923: IFFALSE 25985
// begin if tmp < result [ j ] [ 2 ] then
25925: LD_VAR 0 9
25929: PUSH
25930: LD_VAR 0 6
25934: PUSH
25935: LD_VAR 0 8
25939: ARRAY
25940: PUSH
25941: LD_INT 2
25943: ARRAY
25944: LESS
25945: IFFALSE 25983
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25947: LD_ADDR_VAR 0 6
25951: PUSH
25952: LD_VAR 0 6
25956: PPUSH
25957: LD_VAR 0 8
25961: PPUSH
25962: LD_VAR 0 7
25966: PUSH
25967: LD_VAR 0 9
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 2
25980: ST_TO_ADDR
// break ;
25981: GO 25985
// end ; end ;
25983: GO 25922
25985: POP
25986: POP
// end ; end ;
25987: GO 25786
25989: POP
25990: POP
// if result and not asc then
25991: LD_VAR 0 6
25995: PUSH
25996: LD_VAR 0 4
26000: NOT
26001: AND
26002: IFFALSE 26077
// begin tmp := result ;
26004: LD_ADDR_VAR 0 9
26008: PUSH
26009: LD_VAR 0 6
26013: ST_TO_ADDR
// for i = tmp downto 1 do
26014: LD_ADDR_VAR 0 7
26018: PUSH
26019: DOUBLE
26020: LD_VAR 0 9
26024: INC
26025: ST_TO_ADDR
26026: LD_INT 1
26028: PUSH
26029: FOR_DOWNTO
26030: IFFALSE 26075
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26032: LD_ADDR_VAR 0 6
26036: PUSH
26037: LD_VAR 0 6
26041: PPUSH
26042: LD_VAR 0 9
26046: PUSH
26047: LD_VAR 0 7
26051: MINUS
26052: PUSH
26053: LD_INT 1
26055: PLUS
26056: PPUSH
26057: LD_VAR 0 9
26061: PUSH
26062: LD_VAR 0 7
26066: ARRAY
26067: PPUSH
26068: CALL_OW 1
26072: ST_TO_ADDR
26073: GO 26029
26075: POP
26076: POP
// end ; tmp := [ ] ;
26077: LD_ADDR_VAR 0 9
26081: PUSH
26082: EMPTY
26083: ST_TO_ADDR
// if mode then
26084: LD_VAR 0 5
26088: IFFALSE 26157
// begin for i = 1 to result do
26090: LD_ADDR_VAR 0 7
26094: PUSH
26095: DOUBLE
26096: LD_INT 1
26098: DEC
26099: ST_TO_ADDR
26100: LD_VAR 0 6
26104: PUSH
26105: FOR_TO
26106: IFFALSE 26145
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26108: LD_ADDR_VAR 0 9
26112: PUSH
26113: LD_VAR 0 9
26117: PPUSH
26118: LD_VAR 0 7
26122: PPUSH
26123: LD_VAR 0 6
26127: PUSH
26128: LD_VAR 0 7
26132: ARRAY
26133: PUSH
26134: LD_INT 1
26136: ARRAY
26137: PPUSH
26138: CALL_OW 1
26142: ST_TO_ADDR
26143: GO 26105
26145: POP
26146: POP
// result := tmp ;
26147: LD_ADDR_VAR 0 6
26151: PUSH
26152: LD_VAR 0 9
26156: ST_TO_ADDR
// end ; end ;
26157: LD_VAR 0 6
26161: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26162: LD_INT 0
26164: PPUSH
26165: PPUSH
26166: PPUSH
26167: PPUSH
26168: PPUSH
26169: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26170: LD_ADDR_VAR 0 5
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 0
26180: PUSH
26181: LD_INT 0
26183: PUSH
26184: EMPTY
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: ST_TO_ADDR
// if not x or not y then
26192: LD_VAR 0 2
26196: NOT
26197: PUSH
26198: LD_VAR 0 3
26202: NOT
26203: OR
26204: IFFALSE 26208
// exit ;
26206: GO 27860
// if not range then
26208: LD_VAR 0 4
26212: NOT
26213: IFFALSE 26223
// range := 10 ;
26215: LD_ADDR_VAR 0 4
26219: PUSH
26220: LD_INT 10
26222: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26223: LD_ADDR_VAR 0 8
26227: PUSH
26228: LD_INT 81
26230: PUSH
26231: LD_VAR 0 1
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 92
26242: PUSH
26243: LD_VAR 0 2
26247: PUSH
26248: LD_VAR 0 3
26252: PUSH
26253: LD_VAR 0 4
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 3
26266: PUSH
26267: LD_INT 21
26269: PUSH
26270: LD_INT 3
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: LIST
26285: PPUSH
26286: CALL_OW 69
26290: ST_TO_ADDR
// if not tmp then
26291: LD_VAR 0 8
26295: NOT
26296: IFFALSE 26300
// exit ;
26298: GO 27860
// for i in tmp do
26300: LD_ADDR_VAR 0 6
26304: PUSH
26305: LD_VAR 0 8
26309: PUSH
26310: FOR_IN
26311: IFFALSE 27835
// begin points := [ 0 , 0 , 0 ] ;
26313: LD_ADDR_VAR 0 9
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: LD_INT 0
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: LIST
26331: ST_TO_ADDR
// bpoints := 1 ;
26332: LD_ADDR_VAR 0 10
26336: PUSH
26337: LD_INT 1
26339: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26340: LD_VAR 0 6
26344: PPUSH
26345: CALL_OW 247
26349: PUSH
26350: LD_INT 1
26352: DOUBLE
26353: EQUAL
26354: IFTRUE 26358
26356: GO 26936
26358: POP
// begin if GetClass ( i ) = 1 then
26359: LD_VAR 0 6
26363: PPUSH
26364: CALL_OW 257
26368: PUSH
26369: LD_INT 1
26371: EQUAL
26372: IFFALSE 26393
// points := [ 10 , 5 , 3 ] ;
26374: LD_ADDR_VAR 0 9
26378: PUSH
26379: LD_INT 10
26381: PUSH
26382: LD_INT 5
26384: PUSH
26385: LD_INT 3
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26393: LD_VAR 0 6
26397: PPUSH
26398: CALL_OW 257
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: LD_INT 3
26408: PUSH
26409: LD_INT 4
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: IN
26417: IFFALSE 26438
// points := [ 3 , 2 , 1 ] ;
26419: LD_ADDR_VAR 0 9
26423: PUSH
26424: LD_INT 3
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: LIST
26437: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26438: LD_VAR 0 6
26442: PPUSH
26443: CALL_OW 257
26447: PUSH
26448: LD_INT 5
26450: EQUAL
26451: IFFALSE 26472
// points := [ 130 , 5 , 2 ] ;
26453: LD_ADDR_VAR 0 9
26457: PUSH
26458: LD_INT 130
26460: PUSH
26461: LD_INT 5
26463: PUSH
26464: LD_INT 2
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26472: LD_VAR 0 6
26476: PPUSH
26477: CALL_OW 257
26481: PUSH
26482: LD_INT 8
26484: EQUAL
26485: IFFALSE 26506
// points := [ 35 , 35 , 30 ] ;
26487: LD_ADDR_VAR 0 9
26491: PUSH
26492: LD_INT 35
26494: PUSH
26495: LD_INT 35
26497: PUSH
26498: LD_INT 30
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: LIST
26505: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26506: LD_VAR 0 6
26510: PPUSH
26511: CALL_OW 257
26515: PUSH
26516: LD_INT 9
26518: EQUAL
26519: IFFALSE 26540
// points := [ 20 , 55 , 40 ] ;
26521: LD_ADDR_VAR 0 9
26525: PUSH
26526: LD_INT 20
26528: PUSH
26529: LD_INT 55
26531: PUSH
26532: LD_INT 40
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26540: LD_VAR 0 6
26544: PPUSH
26545: CALL_OW 257
26549: PUSH
26550: LD_INT 12
26552: PUSH
26553: LD_INT 16
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: IN
26560: IFFALSE 26581
// points := [ 5 , 3 , 2 ] ;
26562: LD_ADDR_VAR 0 9
26566: PUSH
26567: LD_INT 5
26569: PUSH
26570: LD_INT 3
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26581: LD_VAR 0 6
26585: PPUSH
26586: CALL_OW 257
26590: PUSH
26591: LD_INT 17
26593: EQUAL
26594: IFFALSE 26615
// points := [ 100 , 50 , 75 ] ;
26596: LD_ADDR_VAR 0 9
26600: PUSH
26601: LD_INT 100
26603: PUSH
26604: LD_INT 50
26606: PUSH
26607: LD_INT 75
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: LIST
26614: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26615: LD_VAR 0 6
26619: PPUSH
26620: CALL_OW 257
26624: PUSH
26625: LD_INT 15
26627: EQUAL
26628: IFFALSE 26649
// points := [ 10 , 5 , 3 ] ;
26630: LD_ADDR_VAR 0 9
26634: PUSH
26635: LD_INT 10
26637: PUSH
26638: LD_INT 5
26640: PUSH
26641: LD_INT 3
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: LIST
26648: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26649: LD_VAR 0 6
26653: PPUSH
26654: CALL_OW 257
26658: PUSH
26659: LD_INT 14
26661: EQUAL
26662: IFFALSE 26683
// points := [ 10 , 0 , 0 ] ;
26664: LD_ADDR_VAR 0 9
26668: PUSH
26669: LD_INT 10
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: LIST
26682: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26683: LD_VAR 0 6
26687: PPUSH
26688: CALL_OW 257
26692: PUSH
26693: LD_INT 11
26695: EQUAL
26696: IFFALSE 26717
// points := [ 30 , 10 , 5 ] ;
26698: LD_ADDR_VAR 0 9
26702: PUSH
26703: LD_INT 30
26705: PUSH
26706: LD_INT 10
26708: PUSH
26709: LD_INT 5
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26717: LD_VAR 0 1
26721: PPUSH
26722: LD_INT 5
26724: PPUSH
26725: CALL_OW 321
26729: PUSH
26730: LD_INT 2
26732: EQUAL
26733: IFFALSE 26750
// bpoints := bpoints * 1.8 ;
26735: LD_ADDR_VAR 0 10
26739: PUSH
26740: LD_VAR 0 10
26744: PUSH
26745: LD_REAL  1.80000000000000E+0000
26748: MUL
26749: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26750: LD_VAR 0 6
26754: PPUSH
26755: CALL_OW 257
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: LD_INT 3
26768: PUSH
26769: LD_INT 4
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: IN
26778: PUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: LD_INT 51
26786: PPUSH
26787: CALL_OW 321
26791: PUSH
26792: LD_INT 2
26794: EQUAL
26795: AND
26796: IFFALSE 26813
// bpoints := bpoints * 1.2 ;
26798: LD_ADDR_VAR 0 10
26802: PUSH
26803: LD_VAR 0 10
26807: PUSH
26808: LD_REAL  1.20000000000000E+0000
26811: MUL
26812: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26813: LD_VAR 0 6
26817: PPUSH
26818: CALL_OW 257
26822: PUSH
26823: LD_INT 5
26825: PUSH
26826: LD_INT 7
26828: PUSH
26829: LD_INT 9
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: LIST
26836: IN
26837: PUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: LD_INT 52
26845: PPUSH
26846: CALL_OW 321
26850: PUSH
26851: LD_INT 2
26853: EQUAL
26854: AND
26855: IFFALSE 26872
// bpoints := bpoints * 1.5 ;
26857: LD_ADDR_VAR 0 10
26861: PUSH
26862: LD_VAR 0 10
26866: PUSH
26867: LD_REAL  1.50000000000000E+0000
26870: MUL
26871: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26872: LD_VAR 0 1
26876: PPUSH
26877: LD_INT 66
26879: PPUSH
26880: CALL_OW 321
26884: PUSH
26885: LD_INT 2
26887: EQUAL
26888: IFFALSE 26905
// bpoints := bpoints * 1.1 ;
26890: LD_ADDR_VAR 0 10
26894: PUSH
26895: LD_VAR 0 10
26899: PUSH
26900: LD_REAL  1.10000000000000E+0000
26903: MUL
26904: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26905: LD_ADDR_VAR 0 10
26909: PUSH
26910: LD_VAR 0 10
26914: PUSH
26915: LD_VAR 0 6
26919: PPUSH
26920: LD_INT 1
26922: PPUSH
26923: CALL_OW 259
26927: PUSH
26928: LD_REAL  1.15000000000000E+0000
26931: MUL
26932: MUL
26933: ST_TO_ADDR
// end ; unit_vehicle :
26934: GO 27764
26936: LD_INT 2
26938: DOUBLE
26939: EQUAL
26940: IFTRUE 26944
26942: GO 27752
26944: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26945: LD_VAR 0 6
26949: PPUSH
26950: CALL_OW 264
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: LD_INT 42
26960: PUSH
26961: LD_INT 24
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: LIST
26968: IN
26969: IFFALSE 26990
// points := [ 25 , 5 , 3 ] ;
26971: LD_ADDR_VAR 0 9
26975: PUSH
26976: LD_INT 25
26978: PUSH
26979: LD_INT 5
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26990: LD_VAR 0 6
26994: PPUSH
26995: CALL_OW 264
26999: PUSH
27000: LD_INT 4
27002: PUSH
27003: LD_INT 43
27005: PUSH
27006: LD_INT 25
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: IN
27014: IFFALSE 27035
// points := [ 40 , 15 , 5 ] ;
27016: LD_ADDR_VAR 0 9
27020: PUSH
27021: LD_INT 40
27023: PUSH
27024: LD_INT 15
27026: PUSH
27027: LD_INT 5
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: LIST
27034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27035: LD_VAR 0 6
27039: PPUSH
27040: CALL_OW 264
27044: PUSH
27045: LD_INT 3
27047: PUSH
27048: LD_INT 23
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: IN
27055: IFFALSE 27076
// points := [ 7 , 25 , 8 ] ;
27057: LD_ADDR_VAR 0 9
27061: PUSH
27062: LD_INT 7
27064: PUSH
27065: LD_INT 25
27067: PUSH
27068: LD_INT 8
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: LIST
27075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27076: LD_VAR 0 6
27080: PPUSH
27081: CALL_OW 264
27085: PUSH
27086: LD_INT 5
27088: PUSH
27089: LD_INT 27
27091: PUSH
27092: LD_INT 44
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: IN
27100: IFFALSE 27121
// points := [ 14 , 50 , 16 ] ;
27102: LD_ADDR_VAR 0 9
27106: PUSH
27107: LD_INT 14
27109: PUSH
27110: LD_INT 50
27112: PUSH
27113: LD_INT 16
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27121: LD_VAR 0 6
27125: PPUSH
27126: CALL_OW 264
27130: PUSH
27131: LD_INT 6
27133: PUSH
27134: LD_INT 46
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: IN
27141: IFFALSE 27162
// points := [ 32 , 120 , 70 ] ;
27143: LD_ADDR_VAR 0 9
27147: PUSH
27148: LD_INT 32
27150: PUSH
27151: LD_INT 120
27153: PUSH
27154: LD_INT 70
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: LIST
27161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27162: LD_VAR 0 6
27166: PPUSH
27167: CALL_OW 264
27171: PUSH
27172: LD_INT 7
27174: PUSH
27175: LD_INT 28
27177: PUSH
27178: LD_INT 45
27180: PUSH
27181: LD_EXP 16
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: IN
27192: IFFALSE 27213
// points := [ 35 , 20 , 45 ] ;
27194: LD_ADDR_VAR 0 9
27198: PUSH
27199: LD_INT 35
27201: PUSH
27202: LD_INT 20
27204: PUSH
27205: LD_INT 45
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27213: LD_VAR 0 6
27217: PPUSH
27218: CALL_OW 264
27222: PUSH
27223: LD_INT 47
27225: PUSH
27226: EMPTY
27227: LIST
27228: IN
27229: IFFALSE 27250
// points := [ 67 , 45 , 75 ] ;
27231: LD_ADDR_VAR 0 9
27235: PUSH
27236: LD_INT 67
27238: PUSH
27239: LD_INT 45
27241: PUSH
27242: LD_INT 75
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27250: LD_VAR 0 6
27254: PPUSH
27255: CALL_OW 264
27259: PUSH
27260: LD_INT 26
27262: PUSH
27263: EMPTY
27264: LIST
27265: IN
27266: IFFALSE 27287
// points := [ 120 , 30 , 80 ] ;
27268: LD_ADDR_VAR 0 9
27272: PUSH
27273: LD_INT 120
27275: PUSH
27276: LD_INT 30
27278: PUSH
27279: LD_INT 80
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27287: LD_VAR 0 6
27291: PPUSH
27292: CALL_OW 264
27296: PUSH
27297: LD_INT 22
27299: PUSH
27300: EMPTY
27301: LIST
27302: IN
27303: IFFALSE 27324
// points := [ 40 , 1 , 1 ] ;
27305: LD_ADDR_VAR 0 9
27309: PUSH
27310: LD_INT 40
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: LIST
27323: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27324: LD_VAR 0 6
27328: PPUSH
27329: CALL_OW 264
27333: PUSH
27334: LD_INT 29
27336: PUSH
27337: EMPTY
27338: LIST
27339: IN
27340: IFFALSE 27361
// points := [ 70 , 200 , 400 ] ;
27342: LD_ADDR_VAR 0 9
27346: PUSH
27347: LD_INT 70
27349: PUSH
27350: LD_INT 200
27352: PUSH
27353: LD_INT 400
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: LIST
27360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27361: LD_VAR 0 6
27365: PPUSH
27366: CALL_OW 264
27370: PUSH
27371: LD_INT 14
27373: PUSH
27374: LD_INT 53
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: IN
27381: IFFALSE 27402
// points := [ 40 , 10 , 20 ] ;
27383: LD_ADDR_VAR 0 9
27387: PUSH
27388: LD_INT 40
27390: PUSH
27391: LD_INT 10
27393: PUSH
27394: LD_INT 20
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27402: LD_VAR 0 6
27406: PPUSH
27407: CALL_OW 264
27411: PUSH
27412: LD_INT 9
27414: PUSH
27415: EMPTY
27416: LIST
27417: IN
27418: IFFALSE 27439
// points := [ 5 , 70 , 20 ] ;
27420: LD_ADDR_VAR 0 9
27424: PUSH
27425: LD_INT 5
27427: PUSH
27428: LD_INT 70
27430: PUSH
27431: LD_INT 20
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27439: LD_VAR 0 6
27443: PPUSH
27444: CALL_OW 264
27448: PUSH
27449: LD_INT 10
27451: PUSH
27452: EMPTY
27453: LIST
27454: IN
27455: IFFALSE 27476
// points := [ 35 , 110 , 70 ] ;
27457: LD_ADDR_VAR 0 9
27461: PUSH
27462: LD_INT 35
27464: PUSH
27465: LD_INT 110
27467: PUSH
27468: LD_INT 70
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27476: LD_VAR 0 6
27480: PPUSH
27481: CALL_OW 265
27485: PUSH
27486: LD_INT 25
27488: EQUAL
27489: IFFALSE 27510
// points := [ 80 , 65 , 100 ] ;
27491: LD_ADDR_VAR 0 9
27495: PUSH
27496: LD_INT 80
27498: PUSH
27499: LD_INT 65
27501: PUSH
27502: LD_INT 100
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27510: LD_VAR 0 6
27514: PPUSH
27515: CALL_OW 263
27519: PUSH
27520: LD_INT 1
27522: EQUAL
27523: IFFALSE 27558
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27525: LD_ADDR_VAR 0 10
27529: PUSH
27530: LD_VAR 0 10
27534: PUSH
27535: LD_VAR 0 6
27539: PPUSH
27540: CALL_OW 311
27544: PPUSH
27545: LD_INT 3
27547: PPUSH
27548: CALL_OW 259
27552: PUSH
27553: LD_INT 4
27555: MUL
27556: MUL
27557: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27558: LD_VAR 0 6
27562: PPUSH
27563: CALL_OW 263
27567: PUSH
27568: LD_INT 2
27570: EQUAL
27571: IFFALSE 27622
// begin j := IsControledBy ( i ) ;
27573: LD_ADDR_VAR 0 7
27577: PUSH
27578: LD_VAR 0 6
27582: PPUSH
27583: CALL_OW 312
27587: ST_TO_ADDR
// if j then
27588: LD_VAR 0 7
27592: IFFALSE 27622
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27594: LD_ADDR_VAR 0 10
27598: PUSH
27599: LD_VAR 0 10
27603: PUSH
27604: LD_VAR 0 7
27608: PPUSH
27609: LD_INT 3
27611: PPUSH
27612: CALL_OW 259
27616: PUSH
27617: LD_INT 3
27619: MUL
27620: MUL
27621: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27622: LD_VAR 0 6
27626: PPUSH
27627: CALL_OW 264
27631: PUSH
27632: LD_INT 5
27634: PUSH
27635: LD_INT 6
27637: PUSH
27638: LD_INT 46
27640: PUSH
27641: LD_INT 44
27643: PUSH
27644: LD_INT 47
27646: PUSH
27647: LD_INT 45
27649: PUSH
27650: LD_INT 28
27652: PUSH
27653: LD_INT 7
27655: PUSH
27656: LD_INT 27
27658: PUSH
27659: LD_INT 29
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: IN
27674: PUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: LD_INT 52
27682: PPUSH
27683: CALL_OW 321
27687: PUSH
27688: LD_INT 2
27690: EQUAL
27691: AND
27692: IFFALSE 27709
// bpoints := bpoints * 1.2 ;
27694: LD_ADDR_VAR 0 10
27698: PUSH
27699: LD_VAR 0 10
27703: PUSH
27704: LD_REAL  1.20000000000000E+0000
27707: MUL
27708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27709: LD_VAR 0 6
27713: PPUSH
27714: CALL_OW 264
27718: PUSH
27719: LD_INT 6
27721: PUSH
27722: LD_INT 46
27724: PUSH
27725: LD_INT 47
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: LIST
27732: IN
27733: IFFALSE 27750
// bpoints := bpoints * 1.2 ;
27735: LD_ADDR_VAR 0 10
27739: PUSH
27740: LD_VAR 0 10
27744: PUSH
27745: LD_REAL  1.20000000000000E+0000
27748: MUL
27749: ST_TO_ADDR
// end ; unit_building :
27750: GO 27764
27752: LD_INT 3
27754: DOUBLE
27755: EQUAL
27756: IFTRUE 27760
27758: GO 27763
27760: POP
// ; end ;
27761: GO 27764
27763: POP
// for j = 1 to 3 do
27764: LD_ADDR_VAR 0 7
27768: PUSH
27769: DOUBLE
27770: LD_INT 1
27772: DEC
27773: ST_TO_ADDR
27774: LD_INT 3
27776: PUSH
27777: FOR_TO
27778: IFFALSE 27831
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27780: LD_ADDR_VAR 0 5
27784: PUSH
27785: LD_VAR 0 5
27789: PPUSH
27790: LD_VAR 0 7
27794: PPUSH
27795: LD_VAR 0 5
27799: PUSH
27800: LD_VAR 0 7
27804: ARRAY
27805: PUSH
27806: LD_VAR 0 9
27810: PUSH
27811: LD_VAR 0 7
27815: ARRAY
27816: PUSH
27817: LD_VAR 0 10
27821: MUL
27822: PLUS
27823: PPUSH
27824: CALL_OW 1
27828: ST_TO_ADDR
27829: GO 27777
27831: POP
27832: POP
// end ;
27833: GO 26310
27835: POP
27836: POP
// result := Replace ( result , 4 , tmp ) ;
27837: LD_ADDR_VAR 0 5
27841: PUSH
27842: LD_VAR 0 5
27846: PPUSH
27847: LD_INT 4
27849: PPUSH
27850: LD_VAR 0 8
27854: PPUSH
27855: CALL_OW 1
27859: ST_TO_ADDR
// end ;
27860: LD_VAR 0 5
27864: RET
// export function DangerAtRange ( unit , range ) ; begin
27865: LD_INT 0
27867: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27868: LD_ADDR_VAR 0 3
27872: PUSH
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 255
27882: PPUSH
27883: LD_VAR 0 1
27887: PPUSH
27888: CALL_OW 250
27892: PPUSH
27893: LD_VAR 0 1
27897: PPUSH
27898: CALL_OW 251
27902: PPUSH
27903: LD_VAR 0 2
27907: PPUSH
27908: CALL 26162 0 4
27912: ST_TO_ADDR
// end ;
27913: LD_VAR 0 3
27917: RET
// export function DangerInArea ( side , area ) ; begin
27918: LD_INT 0
27920: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27921: LD_ADDR_VAR 0 3
27925: PUSH
27926: LD_VAR 0 2
27930: PPUSH
27931: LD_INT 81
27933: PUSH
27934: LD_VAR 0 1
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PPUSH
27943: CALL_OW 70
27947: ST_TO_ADDR
// end ;
27948: LD_VAR 0 3
27952: RET
// export function IsExtension ( b ) ; begin
27953: LD_INT 0
27955: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27956: LD_ADDR_VAR 0 2
27960: PUSH
27961: LD_VAR 0 1
27965: PUSH
27966: LD_INT 23
27968: PUSH
27969: LD_INT 20
27971: PUSH
27972: LD_INT 22
27974: PUSH
27975: LD_INT 17
27977: PUSH
27978: LD_INT 24
27980: PUSH
27981: LD_INT 21
27983: PUSH
27984: LD_INT 19
27986: PUSH
27987: LD_INT 16
27989: PUSH
27990: LD_INT 25
27992: PUSH
27993: LD_INT 18
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: IN
28008: ST_TO_ADDR
// end ;
28009: LD_VAR 0 2
28013: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28014: LD_INT 0
28016: PPUSH
28017: PPUSH
28018: PPUSH
// result := [ ] ;
28019: LD_ADDR_VAR 0 4
28023: PUSH
28024: EMPTY
28025: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28026: LD_ADDR_VAR 0 5
28030: PUSH
28031: LD_VAR 0 2
28035: PPUSH
28036: LD_INT 21
28038: PUSH
28039: LD_INT 3
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PPUSH
28046: CALL_OW 70
28050: ST_TO_ADDR
// if not tmp then
28051: LD_VAR 0 5
28055: NOT
28056: IFFALSE 28060
// exit ;
28058: GO 28124
// if checkLink then
28060: LD_VAR 0 3
28064: IFFALSE 28114
// begin for i in tmp do
28066: LD_ADDR_VAR 0 6
28070: PUSH
28071: LD_VAR 0 5
28075: PUSH
28076: FOR_IN
28077: IFFALSE 28112
// if GetBase ( i ) <> base then
28079: LD_VAR 0 6
28083: PPUSH
28084: CALL_OW 274
28088: PUSH
28089: LD_VAR 0 1
28093: NONEQUAL
28094: IFFALSE 28110
// ComLinkToBase ( base , i ) ;
28096: LD_VAR 0 1
28100: PPUSH
28101: LD_VAR 0 6
28105: PPUSH
28106: CALL_OW 169
28110: GO 28076
28112: POP
28113: POP
// end ; result := tmp ;
28114: LD_ADDR_VAR 0 4
28118: PUSH
28119: LD_VAR 0 5
28123: ST_TO_ADDR
// end ;
28124: LD_VAR 0 4
28128: RET
// export function ComComplete ( units , b ) ; var i ; begin
28129: LD_INT 0
28131: PPUSH
28132: PPUSH
// if not units then
28133: LD_VAR 0 1
28137: NOT
28138: IFFALSE 28142
// exit ;
28140: GO 28232
// for i in units do
28142: LD_ADDR_VAR 0 4
28146: PUSH
28147: LD_VAR 0 1
28151: PUSH
28152: FOR_IN
28153: IFFALSE 28230
// if BuildingStatus ( b ) = bs_build then
28155: LD_VAR 0 2
28159: PPUSH
28160: CALL_OW 461
28164: PUSH
28165: LD_INT 1
28167: EQUAL
28168: IFFALSE 28228
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28170: LD_VAR 0 4
28174: PPUSH
28175: LD_STRING h
28177: PUSH
28178: LD_VAR 0 2
28182: PPUSH
28183: CALL_OW 250
28187: PUSH
28188: LD_VAR 0 2
28192: PPUSH
28193: CALL_OW 251
28197: PUSH
28198: LD_VAR 0 2
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: PUSH
28221: EMPTY
28222: LIST
28223: PPUSH
28224: CALL_OW 446
28228: GO 28152
28230: POP
28231: POP
// end ;
28232: LD_VAR 0 3
28236: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28237: LD_INT 0
28239: PPUSH
28240: PPUSH
28241: PPUSH
28242: PPUSH
28243: PPUSH
28244: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28245: LD_VAR 0 1
28249: NOT
28250: PUSH
28251: LD_VAR 0 1
28255: PPUSH
28256: CALL_OW 263
28260: PUSH
28261: LD_INT 2
28263: NONEQUAL
28264: OR
28265: IFFALSE 28269
// exit ;
28267: GO 28585
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28269: LD_ADDR_VAR 0 6
28273: PUSH
28274: LD_INT 22
28276: PUSH
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 255
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: LD_INT 30
28296: PUSH
28297: LD_INT 36
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 34
28306: PUSH
28307: LD_INT 31
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PPUSH
28323: CALL_OW 69
28327: ST_TO_ADDR
// if not tmp then
28328: LD_VAR 0 6
28332: NOT
28333: IFFALSE 28337
// exit ;
28335: GO 28585
// result := [ ] ;
28337: LD_ADDR_VAR 0 2
28341: PUSH
28342: EMPTY
28343: ST_TO_ADDR
// for i in tmp do
28344: LD_ADDR_VAR 0 3
28348: PUSH
28349: LD_VAR 0 6
28353: PUSH
28354: FOR_IN
28355: IFFALSE 28426
// begin t := UnitsInside ( i ) ;
28357: LD_ADDR_VAR 0 4
28361: PUSH
28362: LD_VAR 0 3
28366: PPUSH
28367: CALL_OW 313
28371: ST_TO_ADDR
// if t then
28372: LD_VAR 0 4
28376: IFFALSE 28424
// for j in t do
28378: LD_ADDR_VAR 0 7
28382: PUSH
28383: LD_VAR 0 4
28387: PUSH
28388: FOR_IN
28389: IFFALSE 28422
// result := Replace ( result , result + 1 , j ) ;
28391: LD_ADDR_VAR 0 2
28395: PUSH
28396: LD_VAR 0 2
28400: PPUSH
28401: LD_VAR 0 2
28405: PUSH
28406: LD_INT 1
28408: PLUS
28409: PPUSH
28410: LD_VAR 0 7
28414: PPUSH
28415: CALL_OW 1
28419: ST_TO_ADDR
28420: GO 28388
28422: POP
28423: POP
// end ;
28424: GO 28354
28426: POP
28427: POP
// if not result then
28428: LD_VAR 0 2
28432: NOT
28433: IFFALSE 28437
// exit ;
28435: GO 28585
// mech := result [ 1 ] ;
28437: LD_ADDR_VAR 0 5
28441: PUSH
28442: LD_VAR 0 2
28446: PUSH
28447: LD_INT 1
28449: ARRAY
28450: ST_TO_ADDR
// if result > 1 then
28451: LD_VAR 0 2
28455: PUSH
28456: LD_INT 1
28458: GREATER
28459: IFFALSE 28571
// begin for i = 2 to result do
28461: LD_ADDR_VAR 0 3
28465: PUSH
28466: DOUBLE
28467: LD_INT 2
28469: DEC
28470: ST_TO_ADDR
28471: LD_VAR 0 2
28475: PUSH
28476: FOR_TO
28477: IFFALSE 28569
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28479: LD_ADDR_VAR 0 4
28483: PUSH
28484: LD_VAR 0 2
28488: PUSH
28489: LD_VAR 0 3
28493: ARRAY
28494: PPUSH
28495: LD_INT 3
28497: PPUSH
28498: CALL_OW 259
28502: PUSH
28503: LD_VAR 0 2
28507: PUSH
28508: LD_VAR 0 3
28512: ARRAY
28513: PPUSH
28514: CALL_OW 432
28518: MINUS
28519: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28520: LD_VAR 0 4
28524: PUSH
28525: LD_VAR 0 5
28529: PPUSH
28530: LD_INT 3
28532: PPUSH
28533: CALL_OW 259
28537: PUSH
28538: LD_VAR 0 5
28542: PPUSH
28543: CALL_OW 432
28547: MINUS
28548: GREATEREQUAL
28549: IFFALSE 28567
// mech := result [ i ] ;
28551: LD_ADDR_VAR 0 5
28555: PUSH
28556: LD_VAR 0 2
28560: PUSH
28561: LD_VAR 0 3
28565: ARRAY
28566: ST_TO_ADDR
// end ;
28567: GO 28476
28569: POP
28570: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28571: LD_VAR 0 1
28575: PPUSH
28576: LD_VAR 0 5
28580: PPUSH
28581: CALL_OW 135
// end ;
28585: LD_VAR 0 2
28589: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28590: LD_INT 0
28592: PPUSH
28593: PPUSH
28594: PPUSH
28595: PPUSH
28596: PPUSH
28597: PPUSH
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
// result := [ ] ;
28605: LD_ADDR_VAR 0 7
28609: PUSH
28610: EMPTY
28611: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28612: LD_VAR 0 1
28616: PPUSH
28617: CALL_OW 266
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: IN
28632: NOT
28633: IFFALSE 28637
// exit ;
28635: GO 30271
// if name then
28637: LD_VAR 0 3
28641: IFFALSE 28657
// SetBName ( base_dep , name ) ;
28643: LD_VAR 0 1
28647: PPUSH
28648: LD_VAR 0 3
28652: PPUSH
28653: CALL_OW 500
// base := GetBase ( base_dep ) ;
28657: LD_ADDR_VAR 0 15
28661: PUSH
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 274
28671: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28672: LD_ADDR_VAR 0 16
28676: PUSH
28677: LD_VAR 0 1
28681: PPUSH
28682: CALL_OW 255
28686: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28687: LD_ADDR_VAR 0 17
28691: PUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 248
28701: ST_TO_ADDR
// if sources then
28702: LD_VAR 0 5
28706: IFFALSE 28753
// for i = 1 to 3 do
28708: LD_ADDR_VAR 0 8
28712: PUSH
28713: DOUBLE
28714: LD_INT 1
28716: DEC
28717: ST_TO_ADDR
28718: LD_INT 3
28720: PUSH
28721: FOR_TO
28722: IFFALSE 28751
// AddResourceType ( base , i , sources [ i ] ) ;
28724: LD_VAR 0 15
28728: PPUSH
28729: LD_VAR 0 8
28733: PPUSH
28734: LD_VAR 0 5
28738: PUSH
28739: LD_VAR 0 8
28743: ARRAY
28744: PPUSH
28745: CALL_OW 276
28749: GO 28721
28751: POP
28752: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28753: LD_ADDR_VAR 0 18
28757: PUSH
28758: LD_VAR 0 15
28762: PPUSH
28763: LD_VAR 0 2
28767: PPUSH
28768: LD_INT 1
28770: PPUSH
28771: CALL 28014 0 3
28775: ST_TO_ADDR
// InitHc ;
28776: CALL_OW 19
// InitUc ;
28780: CALL_OW 18
// uc_side := side ;
28784: LD_ADDR_OWVAR 20
28788: PUSH
28789: LD_VAR 0 16
28793: ST_TO_ADDR
// uc_nation := nation ;
28794: LD_ADDR_OWVAR 21
28798: PUSH
28799: LD_VAR 0 17
28803: ST_TO_ADDR
// if buildings then
28804: LD_VAR 0 18
28808: IFFALSE 30130
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28810: LD_ADDR_VAR 0 19
28814: PUSH
28815: LD_VAR 0 18
28819: PPUSH
28820: LD_INT 2
28822: PUSH
28823: LD_INT 30
28825: PUSH
28826: LD_INT 29
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 30
28835: PUSH
28836: LD_INT 30
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: PPUSH
28848: CALL_OW 72
28852: ST_TO_ADDR
// if tmp then
28853: LD_VAR 0 19
28857: IFFALSE 28905
// for i in tmp do
28859: LD_ADDR_VAR 0 8
28863: PUSH
28864: LD_VAR 0 19
28868: PUSH
28869: FOR_IN
28870: IFFALSE 28903
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28872: LD_VAR 0 8
28876: PPUSH
28877: CALL_OW 250
28881: PPUSH
28882: LD_VAR 0 8
28886: PPUSH
28887: CALL_OW 251
28891: PPUSH
28892: LD_VAR 0 16
28896: PPUSH
28897: CALL_OW 441
28901: GO 28869
28903: POP
28904: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28905: LD_VAR 0 18
28909: PPUSH
28910: LD_INT 2
28912: PUSH
28913: LD_INT 30
28915: PUSH
28916: LD_INT 32
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 30
28925: PUSH
28926: LD_INT 33
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: PPUSH
28938: CALL_OW 72
28942: IFFALSE 29030
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28944: LD_ADDR_VAR 0 8
28948: PUSH
28949: LD_VAR 0 18
28953: PPUSH
28954: LD_INT 2
28956: PUSH
28957: LD_INT 30
28959: PUSH
28960: LD_INT 32
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 30
28969: PUSH
28970: LD_INT 33
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: PPUSH
28982: CALL_OW 72
28986: PUSH
28987: FOR_IN
28988: IFFALSE 29028
// begin if not GetBWeapon ( i ) then
28990: LD_VAR 0 8
28994: PPUSH
28995: CALL_OW 269
28999: NOT
29000: IFFALSE 29026
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29002: LD_VAR 0 8
29006: PPUSH
29007: LD_VAR 0 8
29011: PPUSH
29012: LD_VAR 0 2
29016: PPUSH
29017: CALL 30276 0 2
29021: PPUSH
29022: CALL_OW 431
// end ;
29026: GO 28987
29028: POP
29029: POP
// end ; for i = 1 to personel do
29030: LD_ADDR_VAR 0 8
29034: PUSH
29035: DOUBLE
29036: LD_INT 1
29038: DEC
29039: ST_TO_ADDR
29040: LD_VAR 0 6
29044: PUSH
29045: FOR_TO
29046: IFFALSE 30110
// begin if i > 4 then
29048: LD_VAR 0 8
29052: PUSH
29053: LD_INT 4
29055: GREATER
29056: IFFALSE 29060
// break ;
29058: GO 30110
// case i of 1 :
29060: LD_VAR 0 8
29064: PUSH
29065: LD_INT 1
29067: DOUBLE
29068: EQUAL
29069: IFTRUE 29073
29071: GO 29153
29073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29074: LD_ADDR_VAR 0 12
29078: PUSH
29079: LD_VAR 0 18
29083: PPUSH
29084: LD_INT 22
29086: PUSH
29087: LD_VAR 0 16
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 58
29098: PUSH
29099: EMPTY
29100: LIST
29101: PUSH
29102: LD_INT 2
29104: PUSH
29105: LD_INT 30
29107: PUSH
29108: LD_INT 32
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 30
29117: PUSH
29118: LD_INT 4
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 30
29127: PUSH
29128: LD_INT 5
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: PPUSH
29146: CALL_OW 72
29150: ST_TO_ADDR
29151: GO 29375
29153: LD_INT 2
29155: DOUBLE
29156: EQUAL
29157: IFTRUE 29161
29159: GO 29223
29161: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29162: LD_ADDR_VAR 0 12
29166: PUSH
29167: LD_VAR 0 18
29171: PPUSH
29172: LD_INT 22
29174: PUSH
29175: LD_VAR 0 16
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 2
29186: PUSH
29187: LD_INT 30
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 30
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PPUSH
29216: CALL_OW 72
29220: ST_TO_ADDR
29221: GO 29375
29223: LD_INT 3
29225: DOUBLE
29226: EQUAL
29227: IFTRUE 29231
29229: GO 29293
29231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29232: LD_ADDR_VAR 0 12
29236: PUSH
29237: LD_VAR 0 18
29241: PPUSH
29242: LD_INT 22
29244: PUSH
29245: LD_VAR 0 16
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: LD_INT 30
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 30
29269: PUSH
29270: LD_INT 3
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PPUSH
29286: CALL_OW 72
29290: ST_TO_ADDR
29291: GO 29375
29293: LD_INT 4
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29374
29301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29302: LD_ADDR_VAR 0 12
29306: PUSH
29307: LD_VAR 0 18
29311: PPUSH
29312: LD_INT 22
29314: PUSH
29315: LD_VAR 0 16
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: LD_INT 30
29329: PUSH
29330: LD_INT 6
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 30
29339: PUSH
29340: LD_INT 7
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 30
29349: PUSH
29350: LD_INT 8
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PPUSH
29367: CALL_OW 72
29371: ST_TO_ADDR
29372: GO 29375
29374: POP
// if i = 1 then
29375: LD_VAR 0 8
29379: PUSH
29380: LD_INT 1
29382: EQUAL
29383: IFFALSE 29494
// begin tmp := [ ] ;
29385: LD_ADDR_VAR 0 19
29389: PUSH
29390: EMPTY
29391: ST_TO_ADDR
// for j in f do
29392: LD_ADDR_VAR 0 9
29396: PUSH
29397: LD_VAR 0 12
29401: PUSH
29402: FOR_IN
29403: IFFALSE 29476
// if GetBType ( j ) = b_bunker then
29405: LD_VAR 0 9
29409: PPUSH
29410: CALL_OW 266
29414: PUSH
29415: LD_INT 32
29417: EQUAL
29418: IFFALSE 29445
// tmp := Insert ( tmp , 1 , j ) else
29420: LD_ADDR_VAR 0 19
29424: PUSH
29425: LD_VAR 0 19
29429: PPUSH
29430: LD_INT 1
29432: PPUSH
29433: LD_VAR 0 9
29437: PPUSH
29438: CALL_OW 2
29442: ST_TO_ADDR
29443: GO 29474
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29445: LD_ADDR_VAR 0 19
29449: PUSH
29450: LD_VAR 0 19
29454: PPUSH
29455: LD_VAR 0 19
29459: PUSH
29460: LD_INT 1
29462: PLUS
29463: PPUSH
29464: LD_VAR 0 9
29468: PPUSH
29469: CALL_OW 2
29473: ST_TO_ADDR
29474: GO 29402
29476: POP
29477: POP
// if tmp then
29478: LD_VAR 0 19
29482: IFFALSE 29494
// f := tmp ;
29484: LD_ADDR_VAR 0 12
29488: PUSH
29489: LD_VAR 0 19
29493: ST_TO_ADDR
// end ; x := personel [ i ] ;
29494: LD_ADDR_VAR 0 13
29498: PUSH
29499: LD_VAR 0 6
29503: PUSH
29504: LD_VAR 0 8
29508: ARRAY
29509: ST_TO_ADDR
// if x = - 1 then
29510: LD_VAR 0 13
29514: PUSH
29515: LD_INT 1
29517: NEG
29518: EQUAL
29519: IFFALSE 29728
// begin for j in f do
29521: LD_ADDR_VAR 0 9
29525: PUSH
29526: LD_VAR 0 12
29530: PUSH
29531: FOR_IN
29532: IFFALSE 29724
// repeat InitHc ;
29534: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29538: LD_VAR 0 9
29542: PPUSH
29543: CALL_OW 266
29547: PUSH
29548: LD_INT 5
29550: EQUAL
29551: IFFALSE 29621
// begin if UnitsInside ( j ) < 3 then
29553: LD_VAR 0 9
29557: PPUSH
29558: CALL_OW 313
29562: PUSH
29563: LD_INT 3
29565: LESS
29566: IFFALSE 29602
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29568: LD_INT 0
29570: PPUSH
29571: LD_INT 5
29573: PUSH
29574: LD_INT 8
29576: PUSH
29577: LD_INT 9
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: PUSH
29585: LD_VAR 0 17
29589: ARRAY
29590: PPUSH
29591: LD_VAR 0 4
29595: PPUSH
29596: CALL_OW 380
29600: GO 29619
// PrepareHuman ( false , i , skill ) ;
29602: LD_INT 0
29604: PPUSH
29605: LD_VAR 0 8
29609: PPUSH
29610: LD_VAR 0 4
29614: PPUSH
29615: CALL_OW 380
// end else
29619: GO 29638
// PrepareHuman ( false , i , skill ) ;
29621: LD_INT 0
29623: PPUSH
29624: LD_VAR 0 8
29628: PPUSH
29629: LD_VAR 0 4
29633: PPUSH
29634: CALL_OW 380
// un := CreateHuman ;
29638: LD_ADDR_VAR 0 14
29642: PUSH
29643: CALL_OW 44
29647: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29648: LD_ADDR_VAR 0 7
29652: PUSH
29653: LD_VAR 0 7
29657: PPUSH
29658: LD_INT 1
29660: PPUSH
29661: LD_VAR 0 14
29665: PPUSH
29666: CALL_OW 2
29670: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29671: LD_VAR 0 14
29675: PPUSH
29676: LD_VAR 0 9
29680: PPUSH
29681: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29685: LD_VAR 0 9
29689: PPUSH
29690: CALL_OW 313
29694: PUSH
29695: LD_INT 6
29697: EQUAL
29698: PUSH
29699: LD_VAR 0 9
29703: PPUSH
29704: CALL_OW 266
29708: PUSH
29709: LD_INT 32
29711: PUSH
29712: LD_INT 31
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: IN
29719: OR
29720: IFFALSE 29534
29722: GO 29531
29724: POP
29725: POP
// end else
29726: GO 30108
// for j = 1 to x do
29728: LD_ADDR_VAR 0 9
29732: PUSH
29733: DOUBLE
29734: LD_INT 1
29736: DEC
29737: ST_TO_ADDR
29738: LD_VAR 0 13
29742: PUSH
29743: FOR_TO
29744: IFFALSE 30106
// begin InitHc ;
29746: CALL_OW 19
// if not f then
29750: LD_VAR 0 12
29754: NOT
29755: IFFALSE 29844
// begin PrepareHuman ( false , i , skill ) ;
29757: LD_INT 0
29759: PPUSH
29760: LD_VAR 0 8
29764: PPUSH
29765: LD_VAR 0 4
29769: PPUSH
29770: CALL_OW 380
// un := CreateHuman ;
29774: LD_ADDR_VAR 0 14
29778: PUSH
29779: CALL_OW 44
29783: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29784: LD_ADDR_VAR 0 7
29788: PUSH
29789: LD_VAR 0 7
29793: PPUSH
29794: LD_INT 1
29796: PPUSH
29797: LD_VAR 0 14
29801: PPUSH
29802: CALL_OW 2
29806: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29807: LD_VAR 0 14
29811: PPUSH
29812: LD_VAR 0 1
29816: PPUSH
29817: CALL_OW 250
29821: PPUSH
29822: LD_VAR 0 1
29826: PPUSH
29827: CALL_OW 251
29831: PPUSH
29832: LD_INT 10
29834: PPUSH
29835: LD_INT 0
29837: PPUSH
29838: CALL_OW 50
// continue ;
29842: GO 29743
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29844: LD_VAR 0 12
29848: PUSH
29849: LD_INT 1
29851: ARRAY
29852: PPUSH
29853: CALL_OW 313
29857: PUSH
29858: LD_VAR 0 12
29862: PUSH
29863: LD_INT 1
29865: ARRAY
29866: PPUSH
29867: CALL_OW 266
29871: PUSH
29872: LD_INT 32
29874: PUSH
29875: LD_INT 31
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: IN
29882: AND
29883: PUSH
29884: LD_VAR 0 12
29888: PUSH
29889: LD_INT 1
29891: ARRAY
29892: PPUSH
29893: CALL_OW 313
29897: PUSH
29898: LD_INT 6
29900: EQUAL
29901: OR
29902: IFFALSE 29922
// f := Delete ( f , 1 ) ;
29904: LD_ADDR_VAR 0 12
29908: PUSH
29909: LD_VAR 0 12
29913: PPUSH
29914: LD_INT 1
29916: PPUSH
29917: CALL_OW 3
29921: ST_TO_ADDR
// if not f then
29922: LD_VAR 0 12
29926: NOT
29927: IFFALSE 29945
// begin x := x + 2 ;
29929: LD_ADDR_VAR 0 13
29933: PUSH
29934: LD_VAR 0 13
29938: PUSH
29939: LD_INT 2
29941: PLUS
29942: ST_TO_ADDR
// continue ;
29943: GO 29743
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29945: LD_VAR 0 12
29949: PUSH
29950: LD_INT 1
29952: ARRAY
29953: PPUSH
29954: CALL_OW 266
29958: PUSH
29959: LD_INT 5
29961: EQUAL
29962: IFFALSE 30036
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29964: LD_VAR 0 12
29968: PUSH
29969: LD_INT 1
29971: ARRAY
29972: PPUSH
29973: CALL_OW 313
29977: PUSH
29978: LD_INT 3
29980: LESS
29981: IFFALSE 30017
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29983: LD_INT 0
29985: PPUSH
29986: LD_INT 5
29988: PUSH
29989: LD_INT 8
29991: PUSH
29992: LD_INT 9
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: PUSH
30000: LD_VAR 0 17
30004: ARRAY
30005: PPUSH
30006: LD_VAR 0 4
30010: PPUSH
30011: CALL_OW 380
30015: GO 30034
// PrepareHuman ( false , i , skill ) ;
30017: LD_INT 0
30019: PPUSH
30020: LD_VAR 0 8
30024: PPUSH
30025: LD_VAR 0 4
30029: PPUSH
30030: CALL_OW 380
// end else
30034: GO 30053
// PrepareHuman ( false , i , skill ) ;
30036: LD_INT 0
30038: PPUSH
30039: LD_VAR 0 8
30043: PPUSH
30044: LD_VAR 0 4
30048: PPUSH
30049: CALL_OW 380
// un := CreateHuman ;
30053: LD_ADDR_VAR 0 14
30057: PUSH
30058: CALL_OW 44
30062: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30063: LD_ADDR_VAR 0 7
30067: PUSH
30068: LD_VAR 0 7
30072: PPUSH
30073: LD_INT 1
30075: PPUSH
30076: LD_VAR 0 14
30080: PPUSH
30081: CALL_OW 2
30085: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30086: LD_VAR 0 14
30090: PPUSH
30091: LD_VAR 0 12
30095: PUSH
30096: LD_INT 1
30098: ARRAY
30099: PPUSH
30100: CALL_OW 52
// end ;
30104: GO 29743
30106: POP
30107: POP
// end ;
30108: GO 29045
30110: POP
30111: POP
// result := result ^ buildings ;
30112: LD_ADDR_VAR 0 7
30116: PUSH
30117: LD_VAR 0 7
30121: PUSH
30122: LD_VAR 0 18
30126: ADD
30127: ST_TO_ADDR
// end else
30128: GO 30271
// begin for i = 1 to personel do
30130: LD_ADDR_VAR 0 8
30134: PUSH
30135: DOUBLE
30136: LD_INT 1
30138: DEC
30139: ST_TO_ADDR
30140: LD_VAR 0 6
30144: PUSH
30145: FOR_TO
30146: IFFALSE 30269
// begin if i > 4 then
30148: LD_VAR 0 8
30152: PUSH
30153: LD_INT 4
30155: GREATER
30156: IFFALSE 30160
// break ;
30158: GO 30269
// x := personel [ i ] ;
30160: LD_ADDR_VAR 0 13
30164: PUSH
30165: LD_VAR 0 6
30169: PUSH
30170: LD_VAR 0 8
30174: ARRAY
30175: ST_TO_ADDR
// if x = - 1 then
30176: LD_VAR 0 13
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: EQUAL
30185: IFFALSE 30189
// continue ;
30187: GO 30145
// PrepareHuman ( false , i , skill ) ;
30189: LD_INT 0
30191: PPUSH
30192: LD_VAR 0 8
30196: PPUSH
30197: LD_VAR 0 4
30201: PPUSH
30202: CALL_OW 380
// un := CreateHuman ;
30206: LD_ADDR_VAR 0 14
30210: PUSH
30211: CALL_OW 44
30215: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30216: LD_VAR 0 14
30220: PPUSH
30221: LD_VAR 0 1
30225: PPUSH
30226: CALL_OW 250
30230: PPUSH
30231: LD_VAR 0 1
30235: PPUSH
30236: CALL_OW 251
30240: PPUSH
30241: LD_INT 10
30243: PPUSH
30244: LD_INT 0
30246: PPUSH
30247: CALL_OW 50
// result := result ^ un ;
30251: LD_ADDR_VAR 0 7
30255: PUSH
30256: LD_VAR 0 7
30260: PUSH
30261: LD_VAR 0 14
30265: ADD
30266: ST_TO_ADDR
// end ;
30267: GO 30145
30269: POP
30270: POP
// end ; end ;
30271: LD_VAR 0 7
30275: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30276: LD_INT 0
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
// result := false ;
30294: LD_ADDR_VAR 0 3
30298: PUSH
30299: LD_INT 0
30301: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30302: LD_VAR 0 1
30306: NOT
30307: PUSH
30308: LD_VAR 0 1
30312: PPUSH
30313: CALL_OW 266
30317: PUSH
30318: LD_INT 32
30320: PUSH
30321: LD_INT 33
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: IN
30328: NOT
30329: OR
30330: IFFALSE 30334
// exit ;
30332: GO 31443
// nat := GetNation ( tower ) ;
30334: LD_ADDR_VAR 0 12
30338: PUSH
30339: LD_VAR 0 1
30343: PPUSH
30344: CALL_OW 248
30348: ST_TO_ADDR
// side := GetSide ( tower ) ;
30349: LD_ADDR_VAR 0 16
30353: PUSH
30354: LD_VAR 0 1
30358: PPUSH
30359: CALL_OW 255
30363: ST_TO_ADDR
// x := GetX ( tower ) ;
30364: LD_ADDR_VAR 0 10
30368: PUSH
30369: LD_VAR 0 1
30373: PPUSH
30374: CALL_OW 250
30378: ST_TO_ADDR
// y := GetY ( tower ) ;
30379: LD_ADDR_VAR 0 11
30383: PUSH
30384: LD_VAR 0 1
30388: PPUSH
30389: CALL_OW 251
30393: ST_TO_ADDR
// if not x or not y then
30394: LD_VAR 0 10
30398: NOT
30399: PUSH
30400: LD_VAR 0 11
30404: NOT
30405: OR
30406: IFFALSE 30410
// exit ;
30408: GO 31443
// weapon := 0 ;
30410: LD_ADDR_VAR 0 18
30414: PUSH
30415: LD_INT 0
30417: ST_TO_ADDR
// fac_list := [ ] ;
30418: LD_ADDR_VAR 0 17
30422: PUSH
30423: EMPTY
30424: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30425: LD_ADDR_VAR 0 6
30429: PUSH
30430: LD_VAR 0 1
30434: PPUSH
30435: CALL_OW 274
30439: PPUSH
30440: LD_VAR 0 2
30444: PPUSH
30445: LD_INT 0
30447: PPUSH
30448: CALL 28014 0 3
30452: PPUSH
30453: LD_INT 30
30455: PUSH
30456: LD_INT 3
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PPUSH
30463: CALL_OW 72
30467: ST_TO_ADDR
// if not factories then
30468: LD_VAR 0 6
30472: NOT
30473: IFFALSE 30477
// exit ;
30475: GO 31443
// for i in factories do
30477: LD_ADDR_VAR 0 8
30481: PUSH
30482: LD_VAR 0 6
30486: PUSH
30487: FOR_IN
30488: IFFALSE 30513
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30490: LD_ADDR_VAR 0 17
30494: PUSH
30495: LD_VAR 0 17
30499: PUSH
30500: LD_VAR 0 8
30504: PPUSH
30505: CALL_OW 478
30509: UNION
30510: ST_TO_ADDR
30511: GO 30487
30513: POP
30514: POP
// if not fac_list then
30515: LD_VAR 0 17
30519: NOT
30520: IFFALSE 30524
// exit ;
30522: GO 31443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30524: LD_ADDR_VAR 0 5
30528: PUSH
30529: LD_INT 4
30531: PUSH
30532: LD_INT 5
30534: PUSH
30535: LD_INT 9
30537: PUSH
30538: LD_INT 10
30540: PUSH
30541: LD_INT 6
30543: PUSH
30544: LD_INT 7
30546: PUSH
30547: LD_INT 11
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 27
30561: PUSH
30562: LD_INT 28
30564: PUSH
30565: LD_INT 26
30567: PUSH
30568: LD_INT 30
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 43
30579: PUSH
30580: LD_INT 44
30582: PUSH
30583: LD_INT 46
30585: PUSH
30586: LD_INT 45
30588: PUSH
30589: LD_INT 47
30591: PUSH
30592: LD_INT 49
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: LIST
30607: PUSH
30608: LD_VAR 0 12
30612: ARRAY
30613: ST_TO_ADDR
// list := list isect fac_list ;
30614: LD_ADDR_VAR 0 5
30618: PUSH
30619: LD_VAR 0 5
30623: PUSH
30624: LD_VAR 0 17
30628: ISECT
30629: ST_TO_ADDR
// if not list then
30630: LD_VAR 0 5
30634: NOT
30635: IFFALSE 30639
// exit ;
30637: GO 31443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30639: LD_VAR 0 12
30643: PUSH
30644: LD_INT 3
30646: EQUAL
30647: PUSH
30648: LD_INT 49
30650: PUSH
30651: LD_VAR 0 5
30655: IN
30656: AND
30657: PUSH
30658: LD_INT 31
30660: PPUSH
30661: LD_VAR 0 16
30665: PPUSH
30666: CALL_OW 321
30670: PUSH
30671: LD_INT 2
30673: EQUAL
30674: AND
30675: IFFALSE 30735
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30677: LD_INT 22
30679: PUSH
30680: LD_VAR 0 16
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 35
30691: PUSH
30692: LD_INT 49
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 91
30701: PUSH
30702: LD_VAR 0 1
30706: PUSH
30707: LD_INT 10
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: PPUSH
30720: CALL_OW 69
30724: NOT
30725: IFFALSE 30735
// weapon := ru_time_lapser ;
30727: LD_ADDR_VAR 0 18
30731: PUSH
30732: LD_INT 49
30734: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30735: LD_VAR 0 12
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: LD_INT 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: IN
30750: PUSH
30751: LD_INT 11
30753: PUSH
30754: LD_VAR 0 5
30758: IN
30759: PUSH
30760: LD_INT 30
30762: PUSH
30763: LD_VAR 0 5
30767: IN
30768: OR
30769: AND
30770: PUSH
30771: LD_INT 6
30773: PPUSH
30774: LD_VAR 0 16
30778: PPUSH
30779: CALL_OW 321
30783: PUSH
30784: LD_INT 2
30786: EQUAL
30787: AND
30788: IFFALSE 30953
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30790: LD_INT 22
30792: PUSH
30793: LD_VAR 0 16
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: LD_INT 35
30807: PUSH
30808: LD_INT 11
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 35
30817: PUSH
30818: LD_INT 30
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 91
30832: PUSH
30833: LD_VAR 0 1
30837: PUSH
30838: LD_INT 18
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: LIST
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: PPUSH
30851: CALL_OW 69
30855: NOT
30856: PUSH
30857: LD_INT 22
30859: PUSH
30860: LD_VAR 0 16
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 2
30871: PUSH
30872: LD_INT 30
30874: PUSH
30875: LD_INT 32
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 30
30884: PUSH
30885: LD_INT 33
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 91
30899: PUSH
30900: LD_VAR 0 1
30904: PUSH
30905: LD_INT 12
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: PUSH
30918: EMPTY
30919: LIST
30920: PPUSH
30921: CALL_OW 69
30925: PUSH
30926: LD_INT 2
30928: GREATER
30929: AND
30930: IFFALSE 30953
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30932: LD_ADDR_VAR 0 18
30936: PUSH
30937: LD_INT 11
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_VAR 0 12
30951: ARRAY
30952: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30953: LD_VAR 0 18
30957: NOT
30958: PUSH
30959: LD_INT 40
30961: PPUSH
30962: LD_VAR 0 16
30966: PPUSH
30967: CALL_OW 321
30971: PUSH
30972: LD_INT 2
30974: EQUAL
30975: AND
30976: PUSH
30977: LD_INT 7
30979: PUSH
30980: LD_VAR 0 5
30984: IN
30985: PUSH
30986: LD_INT 28
30988: PUSH
30989: LD_VAR 0 5
30993: IN
30994: OR
30995: PUSH
30996: LD_INT 45
30998: PUSH
30999: LD_VAR 0 5
31003: IN
31004: OR
31005: AND
31006: IFFALSE 31260
// begin hex := GetHexInfo ( x , y ) ;
31008: LD_ADDR_VAR 0 4
31012: PUSH
31013: LD_VAR 0 10
31017: PPUSH
31018: LD_VAR 0 11
31022: PPUSH
31023: CALL_OW 546
31027: ST_TO_ADDR
// if hex [ 1 ] then
31028: LD_VAR 0 4
31032: PUSH
31033: LD_INT 1
31035: ARRAY
31036: IFFALSE 31040
// exit ;
31038: GO 31443
// height := hex [ 2 ] ;
31040: LD_ADDR_VAR 0 15
31044: PUSH
31045: LD_VAR 0 4
31049: PUSH
31050: LD_INT 2
31052: ARRAY
31053: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31054: LD_ADDR_VAR 0 14
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: LD_INT 3
31067: PUSH
31068: LD_INT 5
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// for i in tmp do
31077: LD_ADDR_VAR 0 8
31081: PUSH
31082: LD_VAR 0 14
31086: PUSH
31087: FOR_IN
31088: IFFALSE 31258
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31090: LD_ADDR_VAR 0 9
31094: PUSH
31095: LD_VAR 0 10
31099: PPUSH
31100: LD_VAR 0 8
31104: PPUSH
31105: LD_INT 5
31107: PPUSH
31108: CALL_OW 272
31112: PUSH
31113: LD_VAR 0 11
31117: PPUSH
31118: LD_VAR 0 8
31122: PPUSH
31123: LD_INT 5
31125: PPUSH
31126: CALL_OW 273
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31135: LD_VAR 0 9
31139: PUSH
31140: LD_INT 1
31142: ARRAY
31143: PPUSH
31144: LD_VAR 0 9
31148: PUSH
31149: LD_INT 2
31151: ARRAY
31152: PPUSH
31153: CALL_OW 488
31157: IFFALSE 31256
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31159: LD_ADDR_VAR 0 4
31163: PUSH
31164: LD_VAR 0 9
31168: PUSH
31169: LD_INT 1
31171: ARRAY
31172: PPUSH
31173: LD_VAR 0 9
31177: PUSH
31178: LD_INT 2
31180: ARRAY
31181: PPUSH
31182: CALL_OW 546
31186: ST_TO_ADDR
// if hex [ 1 ] then
31187: LD_VAR 0 4
31191: PUSH
31192: LD_INT 1
31194: ARRAY
31195: IFFALSE 31199
// continue ;
31197: GO 31087
// h := hex [ 2 ] ;
31199: LD_ADDR_VAR 0 13
31203: PUSH
31204: LD_VAR 0 4
31208: PUSH
31209: LD_INT 2
31211: ARRAY
31212: ST_TO_ADDR
// if h + 7 < height then
31213: LD_VAR 0 13
31217: PUSH
31218: LD_INT 7
31220: PLUS
31221: PUSH
31222: LD_VAR 0 15
31226: LESS
31227: IFFALSE 31256
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31229: LD_ADDR_VAR 0 18
31233: PUSH
31234: LD_INT 7
31236: PUSH
31237: LD_INT 28
31239: PUSH
31240: LD_INT 45
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: PUSH
31248: LD_VAR 0 12
31252: ARRAY
31253: ST_TO_ADDR
// break ;
31254: GO 31258
// end ; end ; end ;
31256: GO 31087
31258: POP
31259: POP
// end ; if not weapon then
31260: LD_VAR 0 18
31264: NOT
31265: IFFALSE 31325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31267: LD_ADDR_VAR 0 5
31271: PUSH
31272: LD_VAR 0 5
31276: PUSH
31277: LD_INT 11
31279: PUSH
31280: LD_INT 30
31282: PUSH
31283: LD_INT 49
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: DIFF
31291: ST_TO_ADDR
// if not list then
31292: LD_VAR 0 5
31296: NOT
31297: IFFALSE 31301
// exit ;
31299: GO 31443
// weapon := list [ rand ( 1 , list ) ] ;
31301: LD_ADDR_VAR 0 18
31305: PUSH
31306: LD_VAR 0 5
31310: PUSH
31311: LD_INT 1
31313: PPUSH
31314: LD_VAR 0 5
31318: PPUSH
31319: CALL_OW 12
31323: ARRAY
31324: ST_TO_ADDR
// end ; if weapon then
31325: LD_VAR 0 18
31329: IFFALSE 31443
// begin tmp := CostOfWeapon ( weapon ) ;
31331: LD_ADDR_VAR 0 14
31335: PUSH
31336: LD_VAR 0 18
31340: PPUSH
31341: CALL_OW 451
31345: ST_TO_ADDR
// j := GetBase ( tower ) ;
31346: LD_ADDR_VAR 0 9
31350: PUSH
31351: LD_VAR 0 1
31355: PPUSH
31356: CALL_OW 274
31360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31361: LD_VAR 0 9
31365: PPUSH
31366: LD_INT 1
31368: PPUSH
31369: CALL_OW 275
31373: PUSH
31374: LD_VAR 0 14
31378: PUSH
31379: LD_INT 1
31381: ARRAY
31382: GREATEREQUAL
31383: PUSH
31384: LD_VAR 0 9
31388: PPUSH
31389: LD_INT 2
31391: PPUSH
31392: CALL_OW 275
31396: PUSH
31397: LD_VAR 0 14
31401: PUSH
31402: LD_INT 2
31404: ARRAY
31405: GREATEREQUAL
31406: AND
31407: PUSH
31408: LD_VAR 0 9
31412: PPUSH
31413: LD_INT 3
31415: PPUSH
31416: CALL_OW 275
31420: PUSH
31421: LD_VAR 0 14
31425: PUSH
31426: LD_INT 3
31428: ARRAY
31429: GREATEREQUAL
31430: AND
31431: IFFALSE 31443
// result := weapon ;
31433: LD_ADDR_VAR 0 3
31437: PUSH
31438: LD_VAR 0 18
31442: ST_TO_ADDR
// end ; end ;
31443: LD_VAR 0 3
31447: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31448: LD_INT 0
31450: PPUSH
31451: PPUSH
// result := true ;
31452: LD_ADDR_VAR 0 3
31456: PUSH
31457: LD_INT 1
31459: ST_TO_ADDR
// if array1 = array2 then
31460: LD_VAR 0 1
31464: PUSH
31465: LD_VAR 0 2
31469: EQUAL
31470: IFFALSE 31530
// begin for i = 1 to array1 do
31472: LD_ADDR_VAR 0 4
31476: PUSH
31477: DOUBLE
31478: LD_INT 1
31480: DEC
31481: ST_TO_ADDR
31482: LD_VAR 0 1
31486: PUSH
31487: FOR_TO
31488: IFFALSE 31526
// if array1 [ i ] <> array2 [ i ] then
31490: LD_VAR 0 1
31494: PUSH
31495: LD_VAR 0 4
31499: ARRAY
31500: PUSH
31501: LD_VAR 0 2
31505: PUSH
31506: LD_VAR 0 4
31510: ARRAY
31511: NONEQUAL
31512: IFFALSE 31524
// begin result := false ;
31514: LD_ADDR_VAR 0 3
31518: PUSH
31519: LD_INT 0
31521: ST_TO_ADDR
// break ;
31522: GO 31526
// end ;
31524: GO 31487
31526: POP
31527: POP
// end else
31528: GO 31538
// result := false ;
31530: LD_ADDR_VAR 0 3
31534: PUSH
31535: LD_INT 0
31537: ST_TO_ADDR
// end ;
31538: LD_VAR 0 3
31542: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31543: LD_INT 0
31545: PPUSH
31546: PPUSH
// if not array1 or not array2 then
31547: LD_VAR 0 1
31551: NOT
31552: PUSH
31553: LD_VAR 0 2
31557: NOT
31558: OR
31559: IFFALSE 31563
// exit ;
31561: GO 31627
// result := true ;
31563: LD_ADDR_VAR 0 3
31567: PUSH
31568: LD_INT 1
31570: ST_TO_ADDR
// for i = 1 to array1 do
31571: LD_ADDR_VAR 0 4
31575: PUSH
31576: DOUBLE
31577: LD_INT 1
31579: DEC
31580: ST_TO_ADDR
31581: LD_VAR 0 1
31585: PUSH
31586: FOR_TO
31587: IFFALSE 31625
// if array1 [ i ] <> array2 [ i ] then
31589: LD_VAR 0 1
31593: PUSH
31594: LD_VAR 0 4
31598: ARRAY
31599: PUSH
31600: LD_VAR 0 2
31604: PUSH
31605: LD_VAR 0 4
31609: ARRAY
31610: NONEQUAL
31611: IFFALSE 31623
// begin result := false ;
31613: LD_ADDR_VAR 0 3
31617: PUSH
31618: LD_INT 0
31620: ST_TO_ADDR
// break ;
31621: GO 31625
// end ;
31623: GO 31586
31625: POP
31626: POP
// end ;
31627: LD_VAR 0 3
31631: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31632: LD_INT 0
31634: PPUSH
31635: PPUSH
31636: PPUSH
// pom := GetBase ( fac ) ;
31637: LD_ADDR_VAR 0 5
31641: PUSH
31642: LD_VAR 0 1
31646: PPUSH
31647: CALL_OW 274
31651: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31652: LD_ADDR_VAR 0 4
31656: PUSH
31657: LD_VAR 0 2
31661: PUSH
31662: LD_INT 1
31664: ARRAY
31665: PPUSH
31666: LD_VAR 0 2
31670: PUSH
31671: LD_INT 2
31673: ARRAY
31674: PPUSH
31675: LD_VAR 0 2
31679: PUSH
31680: LD_INT 3
31682: ARRAY
31683: PPUSH
31684: LD_VAR 0 2
31688: PUSH
31689: LD_INT 4
31691: ARRAY
31692: PPUSH
31693: CALL_OW 449
31697: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31698: LD_ADDR_VAR 0 3
31702: PUSH
31703: LD_VAR 0 5
31707: PPUSH
31708: LD_INT 1
31710: PPUSH
31711: CALL_OW 275
31715: PUSH
31716: LD_VAR 0 4
31720: PUSH
31721: LD_INT 1
31723: ARRAY
31724: GREATEREQUAL
31725: PUSH
31726: LD_VAR 0 5
31730: PPUSH
31731: LD_INT 2
31733: PPUSH
31734: CALL_OW 275
31738: PUSH
31739: LD_VAR 0 4
31743: PUSH
31744: LD_INT 2
31746: ARRAY
31747: GREATEREQUAL
31748: AND
31749: PUSH
31750: LD_VAR 0 5
31754: PPUSH
31755: LD_INT 3
31757: PPUSH
31758: CALL_OW 275
31762: PUSH
31763: LD_VAR 0 4
31767: PUSH
31768: LD_INT 3
31770: ARRAY
31771: GREATEREQUAL
31772: AND
31773: ST_TO_ADDR
// end ;
31774: LD_VAR 0 3
31778: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31779: LD_INT 0
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
// pom := GetBase ( building ) ;
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: LD_VAR 0 1
31794: PPUSH
31795: CALL_OW 274
31799: ST_TO_ADDR
// if not pom then
31800: LD_VAR 0 3
31804: NOT
31805: IFFALSE 31809
// exit ;
31807: GO 31979
// btype := GetBType ( building ) ;
31809: LD_ADDR_VAR 0 5
31813: PUSH
31814: LD_VAR 0 1
31818: PPUSH
31819: CALL_OW 266
31823: ST_TO_ADDR
// if btype = b_armoury then
31824: LD_VAR 0 5
31828: PUSH
31829: LD_INT 4
31831: EQUAL
31832: IFFALSE 31842
// btype := b_barracks ;
31834: LD_ADDR_VAR 0 5
31838: PUSH
31839: LD_INT 5
31841: ST_TO_ADDR
// if btype = b_depot then
31842: LD_VAR 0 5
31846: PUSH
31847: LD_INT 0
31849: EQUAL
31850: IFFALSE 31860
// btype := b_warehouse ;
31852: LD_ADDR_VAR 0 5
31856: PUSH
31857: LD_INT 1
31859: ST_TO_ADDR
// if btype = b_workshop then
31860: LD_VAR 0 5
31864: PUSH
31865: LD_INT 2
31867: EQUAL
31868: IFFALSE 31878
// btype := b_factory ;
31870: LD_ADDR_VAR 0 5
31874: PUSH
31875: LD_INT 3
31877: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31878: LD_ADDR_VAR 0 4
31882: PUSH
31883: LD_VAR 0 5
31887: PPUSH
31888: LD_VAR 0 1
31892: PPUSH
31893: CALL_OW 248
31897: PPUSH
31898: CALL_OW 450
31902: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31903: LD_ADDR_VAR 0 2
31907: PUSH
31908: LD_VAR 0 3
31912: PPUSH
31913: LD_INT 1
31915: PPUSH
31916: CALL_OW 275
31920: PUSH
31921: LD_VAR 0 4
31925: PUSH
31926: LD_INT 1
31928: ARRAY
31929: GREATEREQUAL
31930: PUSH
31931: LD_VAR 0 3
31935: PPUSH
31936: LD_INT 2
31938: PPUSH
31939: CALL_OW 275
31943: PUSH
31944: LD_VAR 0 4
31948: PUSH
31949: LD_INT 2
31951: ARRAY
31952: GREATEREQUAL
31953: AND
31954: PUSH
31955: LD_VAR 0 3
31959: PPUSH
31960: LD_INT 3
31962: PPUSH
31963: CALL_OW 275
31967: PUSH
31968: LD_VAR 0 4
31972: PUSH
31973: LD_INT 3
31975: ARRAY
31976: GREATEREQUAL
31977: AND
31978: ST_TO_ADDR
// end ;
31979: LD_VAR 0 2
31983: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31984: LD_INT 0
31986: PPUSH
31987: PPUSH
31988: PPUSH
// pom := GetBase ( building ) ;
31989: LD_ADDR_VAR 0 4
31993: PUSH
31994: LD_VAR 0 1
31998: PPUSH
31999: CALL_OW 274
32003: ST_TO_ADDR
// if not pom then
32004: LD_VAR 0 4
32008: NOT
32009: IFFALSE 32013
// exit ;
32011: GO 32114
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32013: LD_ADDR_VAR 0 5
32017: PUSH
32018: LD_VAR 0 2
32022: PPUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 248
32032: PPUSH
32033: CALL_OW 450
32037: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32038: LD_ADDR_VAR 0 3
32042: PUSH
32043: LD_VAR 0 4
32047: PPUSH
32048: LD_INT 1
32050: PPUSH
32051: CALL_OW 275
32055: PUSH
32056: LD_VAR 0 5
32060: PUSH
32061: LD_INT 1
32063: ARRAY
32064: GREATEREQUAL
32065: PUSH
32066: LD_VAR 0 4
32070: PPUSH
32071: LD_INT 2
32073: PPUSH
32074: CALL_OW 275
32078: PUSH
32079: LD_VAR 0 5
32083: PUSH
32084: LD_INT 2
32086: ARRAY
32087: GREATEREQUAL
32088: AND
32089: PUSH
32090: LD_VAR 0 4
32094: PPUSH
32095: LD_INT 3
32097: PPUSH
32098: CALL_OW 275
32102: PUSH
32103: LD_VAR 0 5
32107: PUSH
32108: LD_INT 3
32110: ARRAY
32111: GREATEREQUAL
32112: AND
32113: ST_TO_ADDR
// end ;
32114: LD_VAR 0 3
32118: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32119: LD_INT 0
32121: PPUSH
32122: PPUSH
32123: PPUSH
32124: PPUSH
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
32131: PPUSH
// result := false ;
32132: LD_ADDR_VAR 0 8
32136: PUSH
32137: LD_INT 0
32139: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32140: LD_VAR 0 5
32144: NOT
32145: PUSH
32146: LD_VAR 0 1
32150: NOT
32151: OR
32152: PUSH
32153: LD_VAR 0 2
32157: NOT
32158: OR
32159: PUSH
32160: LD_VAR 0 3
32164: NOT
32165: OR
32166: IFFALSE 32170
// exit ;
32168: GO 32984
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32170: LD_ADDR_VAR 0 14
32174: PUSH
32175: LD_VAR 0 1
32179: PPUSH
32180: LD_VAR 0 2
32184: PPUSH
32185: LD_VAR 0 3
32189: PPUSH
32190: LD_VAR 0 4
32194: PPUSH
32195: LD_VAR 0 5
32199: PUSH
32200: LD_INT 1
32202: ARRAY
32203: PPUSH
32204: CALL_OW 248
32208: PPUSH
32209: LD_INT 0
32211: PPUSH
32212: CALL 34221 0 6
32216: ST_TO_ADDR
// if not hexes then
32217: LD_VAR 0 14
32221: NOT
32222: IFFALSE 32226
// exit ;
32224: GO 32984
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32226: LD_ADDR_VAR 0 17
32230: PUSH
32231: LD_VAR 0 5
32235: PPUSH
32236: LD_INT 22
32238: PUSH
32239: LD_VAR 0 13
32243: PPUSH
32244: CALL_OW 255
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 2
32255: PUSH
32256: LD_INT 30
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 30
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PPUSH
32285: CALL_OW 72
32289: ST_TO_ADDR
// for i = 1 to hexes do
32290: LD_ADDR_VAR 0 9
32294: PUSH
32295: DOUBLE
32296: LD_INT 1
32298: DEC
32299: ST_TO_ADDR
32300: LD_VAR 0 14
32304: PUSH
32305: FOR_TO
32306: IFFALSE 32982
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32308: LD_ADDR_VAR 0 13
32312: PUSH
32313: LD_VAR 0 14
32317: PUSH
32318: LD_VAR 0 9
32322: ARRAY
32323: PUSH
32324: LD_INT 1
32326: ARRAY
32327: PPUSH
32328: LD_VAR 0 14
32332: PUSH
32333: LD_VAR 0 9
32337: ARRAY
32338: PUSH
32339: LD_INT 2
32341: ARRAY
32342: PPUSH
32343: CALL_OW 428
32347: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32348: LD_VAR 0 14
32352: PUSH
32353: LD_VAR 0 9
32357: ARRAY
32358: PUSH
32359: LD_INT 1
32361: ARRAY
32362: PPUSH
32363: LD_VAR 0 14
32367: PUSH
32368: LD_VAR 0 9
32372: ARRAY
32373: PUSH
32374: LD_INT 2
32376: ARRAY
32377: PPUSH
32378: CALL_OW 351
32382: PUSH
32383: LD_VAR 0 14
32387: PUSH
32388: LD_VAR 0 9
32392: ARRAY
32393: PUSH
32394: LD_INT 1
32396: ARRAY
32397: PPUSH
32398: LD_VAR 0 14
32402: PUSH
32403: LD_VAR 0 9
32407: ARRAY
32408: PUSH
32409: LD_INT 2
32411: ARRAY
32412: PPUSH
32413: CALL_OW 488
32417: NOT
32418: OR
32419: PUSH
32420: LD_VAR 0 13
32424: PPUSH
32425: CALL_OW 247
32429: PUSH
32430: LD_INT 3
32432: EQUAL
32433: OR
32434: IFFALSE 32440
// exit ;
32436: POP
32437: POP
32438: GO 32984
// if not tmp then
32440: LD_VAR 0 13
32444: NOT
32445: IFFALSE 32449
// continue ;
32447: GO 32305
// result := true ;
32449: LD_ADDR_VAR 0 8
32453: PUSH
32454: LD_INT 1
32456: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32457: LD_VAR 0 6
32461: PUSH
32462: LD_VAR 0 13
32466: PPUSH
32467: CALL_OW 247
32471: PUSH
32472: LD_INT 2
32474: EQUAL
32475: AND
32476: PUSH
32477: LD_VAR 0 13
32481: PPUSH
32482: CALL_OW 263
32486: PUSH
32487: LD_INT 1
32489: EQUAL
32490: AND
32491: IFFALSE 32655
// begin if IsDrivenBy ( tmp ) then
32493: LD_VAR 0 13
32497: PPUSH
32498: CALL_OW 311
32502: IFFALSE 32506
// continue ;
32504: GO 32305
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32506: LD_VAR 0 6
32510: PPUSH
32511: LD_INT 3
32513: PUSH
32514: LD_INT 60
32516: PUSH
32517: EMPTY
32518: LIST
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 55
32529: PUSH
32530: EMPTY
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PPUSH
32541: CALL_OW 72
32545: IFFALSE 32653
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32547: LD_ADDR_VAR 0 18
32551: PUSH
32552: LD_VAR 0 6
32556: PPUSH
32557: LD_INT 3
32559: PUSH
32560: LD_INT 60
32562: PUSH
32563: EMPTY
32564: LIST
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: LD_INT 55
32575: PUSH
32576: EMPTY
32577: LIST
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PPUSH
32587: CALL_OW 72
32591: PUSH
32592: LD_INT 1
32594: ARRAY
32595: ST_TO_ADDR
// if IsInUnit ( driver ) then
32596: LD_VAR 0 18
32600: PPUSH
32601: CALL_OW 310
32605: IFFALSE 32616
// ComExit ( driver ) ;
32607: LD_VAR 0 18
32611: PPUSH
32612: CALL 57926 0 1
// AddComEnterUnit ( driver , tmp ) ;
32616: LD_VAR 0 18
32620: PPUSH
32621: LD_VAR 0 13
32625: PPUSH
32626: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32630: LD_VAR 0 18
32634: PPUSH
32635: LD_VAR 0 7
32639: PPUSH
32640: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32644: LD_VAR 0 18
32648: PPUSH
32649: CALL_OW 181
// end ; continue ;
32653: GO 32305
// end ; if not cleaners or not tmp in cleaners then
32655: LD_VAR 0 6
32659: NOT
32660: PUSH
32661: LD_VAR 0 13
32665: PUSH
32666: LD_VAR 0 6
32670: IN
32671: NOT
32672: OR
32673: IFFALSE 32980
// begin if dep then
32675: LD_VAR 0 17
32679: IFFALSE 32815
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32681: LD_ADDR_VAR 0 16
32685: PUSH
32686: LD_VAR 0 17
32690: PUSH
32691: LD_INT 1
32693: ARRAY
32694: PPUSH
32695: CALL_OW 250
32699: PPUSH
32700: LD_VAR 0 17
32704: PUSH
32705: LD_INT 1
32707: ARRAY
32708: PPUSH
32709: CALL_OW 254
32713: PPUSH
32714: LD_INT 5
32716: PPUSH
32717: CALL_OW 272
32721: PUSH
32722: LD_VAR 0 17
32726: PUSH
32727: LD_INT 1
32729: ARRAY
32730: PPUSH
32731: CALL_OW 251
32735: PPUSH
32736: LD_VAR 0 17
32740: PUSH
32741: LD_INT 1
32743: ARRAY
32744: PPUSH
32745: CALL_OW 254
32749: PPUSH
32750: LD_INT 5
32752: PPUSH
32753: CALL_OW 273
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32762: LD_VAR 0 16
32766: PUSH
32767: LD_INT 1
32769: ARRAY
32770: PPUSH
32771: LD_VAR 0 16
32775: PUSH
32776: LD_INT 2
32778: ARRAY
32779: PPUSH
32780: CALL_OW 488
32784: IFFALSE 32815
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32786: LD_VAR 0 13
32790: PPUSH
32791: LD_VAR 0 16
32795: PUSH
32796: LD_INT 1
32798: ARRAY
32799: PPUSH
32800: LD_VAR 0 16
32804: PUSH
32805: LD_INT 2
32807: ARRAY
32808: PPUSH
32809: CALL_OW 111
// continue ;
32813: GO 32305
// end ; end ; r := GetDir ( tmp ) ;
32815: LD_ADDR_VAR 0 15
32819: PUSH
32820: LD_VAR 0 13
32824: PPUSH
32825: CALL_OW 254
32829: ST_TO_ADDR
// if r = 5 then
32830: LD_VAR 0 15
32834: PUSH
32835: LD_INT 5
32837: EQUAL
32838: IFFALSE 32848
// r := 0 ;
32840: LD_ADDR_VAR 0 15
32844: PUSH
32845: LD_INT 0
32847: ST_TO_ADDR
// for j = r to 5 do
32848: LD_ADDR_VAR 0 10
32852: PUSH
32853: DOUBLE
32854: LD_VAR 0 15
32858: DEC
32859: ST_TO_ADDR
32860: LD_INT 5
32862: PUSH
32863: FOR_TO
32864: IFFALSE 32978
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32866: LD_ADDR_VAR 0 11
32870: PUSH
32871: LD_VAR 0 13
32875: PPUSH
32876: CALL_OW 250
32880: PPUSH
32881: LD_VAR 0 10
32885: PPUSH
32886: LD_INT 2
32888: PPUSH
32889: CALL_OW 272
32893: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32894: LD_ADDR_VAR 0 12
32898: PUSH
32899: LD_VAR 0 13
32903: PPUSH
32904: CALL_OW 251
32908: PPUSH
32909: LD_VAR 0 10
32913: PPUSH
32914: LD_INT 2
32916: PPUSH
32917: CALL_OW 273
32921: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32922: LD_VAR 0 11
32926: PPUSH
32927: LD_VAR 0 12
32931: PPUSH
32932: CALL_OW 488
32936: PUSH
32937: LD_VAR 0 11
32941: PPUSH
32942: LD_VAR 0 12
32946: PPUSH
32947: CALL_OW 428
32951: NOT
32952: AND
32953: IFFALSE 32976
// begin ComMoveXY ( tmp , _x , _y ) ;
32955: LD_VAR 0 13
32959: PPUSH
32960: LD_VAR 0 11
32964: PPUSH
32965: LD_VAR 0 12
32969: PPUSH
32970: CALL_OW 111
// break ;
32974: GO 32978
// end ; end ;
32976: GO 32863
32978: POP
32979: POP
// end ; end ;
32980: GO 32305
32982: POP
32983: POP
// end ;
32984: LD_VAR 0 8
32988: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32989: LD_INT 0
32991: PPUSH
// result := true ;
32992: LD_ADDR_VAR 0 3
32996: PUSH
32997: LD_INT 1
32999: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33000: LD_VAR 0 2
33004: PUSH
33005: LD_INT 24
33007: DOUBLE
33008: EQUAL
33009: IFTRUE 33019
33011: LD_INT 33
33013: DOUBLE
33014: EQUAL
33015: IFTRUE 33019
33017: GO 33044
33019: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33020: LD_ADDR_VAR 0 3
33024: PUSH
33025: LD_INT 32
33027: PPUSH
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL_OW 321
33037: PUSH
33038: LD_INT 2
33040: EQUAL
33041: ST_TO_ADDR
33042: GO 33364
33044: LD_INT 20
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33052
33050: GO 33077
33052: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33053: LD_ADDR_VAR 0 3
33057: PUSH
33058: LD_INT 6
33060: PPUSH
33061: LD_VAR 0 1
33065: PPUSH
33066: CALL_OW 321
33070: PUSH
33071: LD_INT 2
33073: EQUAL
33074: ST_TO_ADDR
33075: GO 33364
33077: LD_INT 22
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33091
33083: LD_INT 36
33085: DOUBLE
33086: EQUAL
33087: IFTRUE 33091
33089: GO 33116
33091: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33092: LD_ADDR_VAR 0 3
33096: PUSH
33097: LD_INT 15
33099: PPUSH
33100: LD_VAR 0 1
33104: PPUSH
33105: CALL_OW 321
33109: PUSH
33110: LD_INT 2
33112: EQUAL
33113: ST_TO_ADDR
33114: GO 33364
33116: LD_INT 30
33118: DOUBLE
33119: EQUAL
33120: IFTRUE 33124
33122: GO 33149
33124: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33125: LD_ADDR_VAR 0 3
33129: PUSH
33130: LD_INT 20
33132: PPUSH
33133: LD_VAR 0 1
33137: PPUSH
33138: CALL_OW 321
33142: PUSH
33143: LD_INT 2
33145: EQUAL
33146: ST_TO_ADDR
33147: GO 33364
33149: LD_INT 28
33151: DOUBLE
33152: EQUAL
33153: IFTRUE 33163
33155: LD_INT 21
33157: DOUBLE
33158: EQUAL
33159: IFTRUE 33163
33161: GO 33188
33163: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33164: LD_ADDR_VAR 0 3
33168: PUSH
33169: LD_INT 21
33171: PPUSH
33172: LD_VAR 0 1
33176: PPUSH
33177: CALL_OW 321
33181: PUSH
33182: LD_INT 2
33184: EQUAL
33185: ST_TO_ADDR
33186: GO 33364
33188: LD_INT 16
33190: DOUBLE
33191: EQUAL
33192: IFTRUE 33196
33194: GO 33223
33196: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33197: LD_ADDR_VAR 0 3
33201: PUSH
33202: LD_EXP 24
33206: PPUSH
33207: LD_VAR 0 1
33211: PPUSH
33212: CALL_OW 321
33216: PUSH
33217: LD_INT 2
33219: EQUAL
33220: ST_TO_ADDR
33221: GO 33364
33223: LD_INT 19
33225: DOUBLE
33226: EQUAL
33227: IFTRUE 33237
33229: LD_INT 23
33231: DOUBLE
33232: EQUAL
33233: IFTRUE 33237
33235: GO 33264
33237: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: LD_EXP 23
33247: PPUSH
33248: LD_VAR 0 1
33252: PPUSH
33253: CALL_OW 321
33257: PUSH
33258: LD_INT 2
33260: EQUAL
33261: ST_TO_ADDR
33262: GO 33364
33264: LD_INT 17
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33272
33270: GO 33297
33272: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33273: LD_ADDR_VAR 0 3
33277: PUSH
33278: LD_INT 39
33280: PPUSH
33281: LD_VAR 0 1
33285: PPUSH
33286: CALL_OW 321
33290: PUSH
33291: LD_INT 2
33293: EQUAL
33294: ST_TO_ADDR
33295: GO 33364
33297: LD_INT 18
33299: DOUBLE
33300: EQUAL
33301: IFTRUE 33305
33303: GO 33330
33305: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33306: LD_ADDR_VAR 0 3
33310: PUSH
33311: LD_INT 40
33313: PPUSH
33314: LD_VAR 0 1
33318: PPUSH
33319: CALL_OW 321
33323: PUSH
33324: LD_INT 2
33326: EQUAL
33327: ST_TO_ADDR
33328: GO 33364
33330: LD_INT 27
33332: DOUBLE
33333: EQUAL
33334: IFTRUE 33338
33336: GO 33363
33338: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33339: LD_ADDR_VAR 0 3
33343: PUSH
33344: LD_INT 35
33346: PPUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 321
33356: PUSH
33357: LD_INT 2
33359: EQUAL
33360: ST_TO_ADDR
33361: GO 33364
33363: POP
// end ;
33364: LD_VAR 0 3
33368: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33369: LD_INT 0
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
33381: PPUSH
// result := false ;
33382: LD_ADDR_VAR 0 6
33386: PUSH
33387: LD_INT 0
33389: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33390: LD_VAR 0 1
33394: NOT
33395: PUSH
33396: LD_VAR 0 1
33400: PPUSH
33401: CALL_OW 266
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: IN
33416: NOT
33417: OR
33418: PUSH
33419: LD_VAR 0 2
33423: NOT
33424: OR
33425: PUSH
33426: LD_VAR 0 5
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: LD_INT 5
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: IN
33457: NOT
33458: OR
33459: PUSH
33460: LD_VAR 0 3
33464: PPUSH
33465: LD_VAR 0 4
33469: PPUSH
33470: CALL_OW 488
33474: NOT
33475: OR
33476: IFFALSE 33480
// exit ;
33478: GO 34216
// side := GetSide ( depot ) ;
33480: LD_ADDR_VAR 0 9
33484: PUSH
33485: LD_VAR 0 1
33489: PPUSH
33490: CALL_OW 255
33494: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33495: LD_VAR 0 9
33499: PPUSH
33500: LD_VAR 0 2
33504: PPUSH
33505: CALL 32989 0 2
33509: NOT
33510: IFFALSE 33514
// exit ;
33512: GO 34216
// pom := GetBase ( depot ) ;
33514: LD_ADDR_VAR 0 10
33518: PUSH
33519: LD_VAR 0 1
33523: PPUSH
33524: CALL_OW 274
33528: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33529: LD_ADDR_VAR 0 11
33533: PUSH
33534: LD_VAR 0 2
33538: PPUSH
33539: LD_VAR 0 1
33543: PPUSH
33544: CALL_OW 248
33548: PPUSH
33549: CALL_OW 450
33553: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33554: LD_VAR 0 10
33558: PPUSH
33559: LD_INT 1
33561: PPUSH
33562: CALL_OW 275
33566: PUSH
33567: LD_VAR 0 11
33571: PUSH
33572: LD_INT 1
33574: ARRAY
33575: GREATEREQUAL
33576: PUSH
33577: LD_VAR 0 10
33581: PPUSH
33582: LD_INT 2
33584: PPUSH
33585: CALL_OW 275
33589: PUSH
33590: LD_VAR 0 11
33594: PUSH
33595: LD_INT 2
33597: ARRAY
33598: GREATEREQUAL
33599: AND
33600: PUSH
33601: LD_VAR 0 10
33605: PPUSH
33606: LD_INT 3
33608: PPUSH
33609: CALL_OW 275
33613: PUSH
33614: LD_VAR 0 11
33618: PUSH
33619: LD_INT 3
33621: ARRAY
33622: GREATEREQUAL
33623: AND
33624: NOT
33625: IFFALSE 33629
// exit ;
33627: GO 34216
// if GetBType ( depot ) = b_depot then
33629: LD_VAR 0 1
33633: PPUSH
33634: CALL_OW 266
33638: PUSH
33639: LD_INT 0
33641: EQUAL
33642: IFFALSE 33654
// dist := 28 else
33644: LD_ADDR_VAR 0 14
33648: PUSH
33649: LD_INT 28
33651: ST_TO_ADDR
33652: GO 33662
// dist := 36 ;
33654: LD_ADDR_VAR 0 14
33658: PUSH
33659: LD_INT 36
33661: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33662: LD_VAR 0 1
33666: PPUSH
33667: LD_VAR 0 3
33671: PPUSH
33672: LD_VAR 0 4
33676: PPUSH
33677: CALL_OW 297
33681: PUSH
33682: LD_VAR 0 14
33686: GREATER
33687: IFFALSE 33691
// exit ;
33689: GO 34216
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33691: LD_ADDR_VAR 0 12
33695: PUSH
33696: LD_VAR 0 2
33700: PPUSH
33701: LD_VAR 0 3
33705: PPUSH
33706: LD_VAR 0 4
33710: PPUSH
33711: LD_VAR 0 5
33715: PPUSH
33716: LD_VAR 0 1
33720: PPUSH
33721: CALL_OW 248
33725: PPUSH
33726: LD_INT 0
33728: PPUSH
33729: CALL 34221 0 6
33733: ST_TO_ADDR
// if not hexes then
33734: LD_VAR 0 12
33738: NOT
33739: IFFALSE 33743
// exit ;
33741: GO 34216
// hex := GetHexInfo ( x , y ) ;
33743: LD_ADDR_VAR 0 15
33747: PUSH
33748: LD_VAR 0 3
33752: PPUSH
33753: LD_VAR 0 4
33757: PPUSH
33758: CALL_OW 546
33762: ST_TO_ADDR
// if hex [ 1 ] then
33763: LD_VAR 0 15
33767: PUSH
33768: LD_INT 1
33770: ARRAY
33771: IFFALSE 33775
// exit ;
33773: GO 34216
// height := hex [ 2 ] ;
33775: LD_ADDR_VAR 0 13
33779: PUSH
33780: LD_VAR 0 15
33784: PUSH
33785: LD_INT 2
33787: ARRAY
33788: ST_TO_ADDR
// for i = 1 to hexes do
33789: LD_ADDR_VAR 0 7
33793: PUSH
33794: DOUBLE
33795: LD_INT 1
33797: DEC
33798: ST_TO_ADDR
33799: LD_VAR 0 12
33803: PUSH
33804: FOR_TO
33805: IFFALSE 34135
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33807: LD_VAR 0 12
33811: PUSH
33812: LD_VAR 0 7
33816: ARRAY
33817: PUSH
33818: LD_INT 1
33820: ARRAY
33821: PPUSH
33822: LD_VAR 0 12
33826: PUSH
33827: LD_VAR 0 7
33831: ARRAY
33832: PUSH
33833: LD_INT 2
33835: ARRAY
33836: PPUSH
33837: CALL_OW 488
33841: NOT
33842: PUSH
33843: LD_VAR 0 12
33847: PUSH
33848: LD_VAR 0 7
33852: ARRAY
33853: PUSH
33854: LD_INT 1
33856: ARRAY
33857: PPUSH
33858: LD_VAR 0 12
33862: PUSH
33863: LD_VAR 0 7
33867: ARRAY
33868: PUSH
33869: LD_INT 2
33871: ARRAY
33872: PPUSH
33873: CALL_OW 428
33877: PUSH
33878: LD_INT 0
33880: GREATER
33881: OR
33882: PUSH
33883: LD_VAR 0 12
33887: PUSH
33888: LD_VAR 0 7
33892: ARRAY
33893: PUSH
33894: LD_INT 1
33896: ARRAY
33897: PPUSH
33898: LD_VAR 0 12
33902: PUSH
33903: LD_VAR 0 7
33907: ARRAY
33908: PUSH
33909: LD_INT 2
33911: ARRAY
33912: PPUSH
33913: CALL_OW 351
33917: OR
33918: IFFALSE 33924
// exit ;
33920: POP
33921: POP
33922: GO 34216
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33924: LD_ADDR_VAR 0 8
33928: PUSH
33929: LD_VAR 0 12
33933: PUSH
33934: LD_VAR 0 7
33938: ARRAY
33939: PUSH
33940: LD_INT 1
33942: ARRAY
33943: PPUSH
33944: LD_VAR 0 12
33948: PUSH
33949: LD_VAR 0 7
33953: ARRAY
33954: PUSH
33955: LD_INT 2
33957: ARRAY
33958: PPUSH
33959: CALL_OW 546
33963: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33964: LD_VAR 0 8
33968: PUSH
33969: LD_INT 1
33971: ARRAY
33972: PUSH
33973: LD_VAR 0 8
33977: PUSH
33978: LD_INT 2
33980: ARRAY
33981: PUSH
33982: LD_VAR 0 13
33986: PUSH
33987: LD_INT 2
33989: PLUS
33990: GREATER
33991: OR
33992: PUSH
33993: LD_VAR 0 8
33997: PUSH
33998: LD_INT 2
34000: ARRAY
34001: PUSH
34002: LD_VAR 0 13
34006: PUSH
34007: LD_INT 2
34009: MINUS
34010: LESS
34011: OR
34012: PUSH
34013: LD_VAR 0 8
34017: PUSH
34018: LD_INT 3
34020: ARRAY
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 8
34027: PUSH
34028: LD_INT 9
34030: PUSH
34031: LD_INT 10
34033: PUSH
34034: LD_INT 11
34036: PUSH
34037: LD_INT 12
34039: PUSH
34040: LD_INT 13
34042: PUSH
34043: LD_INT 16
34045: PUSH
34046: LD_INT 17
34048: PUSH
34049: LD_INT 18
34051: PUSH
34052: LD_INT 19
34054: PUSH
34055: LD_INT 20
34057: PUSH
34058: LD_INT 21
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: IN
34076: NOT
34077: OR
34078: PUSH
34079: LD_VAR 0 8
34083: PUSH
34084: LD_INT 5
34086: ARRAY
34087: NOT
34088: OR
34089: PUSH
34090: LD_VAR 0 8
34094: PUSH
34095: LD_INT 6
34097: ARRAY
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: LD_INT 7
34107: PUSH
34108: LD_INT 9
34110: PUSH
34111: LD_INT 10
34113: PUSH
34114: LD_INT 11
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: IN
34125: NOT
34126: OR
34127: IFFALSE 34133
// exit ;
34129: POP
34130: POP
34131: GO 34216
// end ;
34133: GO 33804
34135: POP
34136: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34137: LD_VAR 0 9
34141: PPUSH
34142: LD_VAR 0 3
34146: PPUSH
34147: LD_VAR 0 4
34151: PPUSH
34152: LD_INT 20
34154: PPUSH
34155: CALL 26162 0 4
34159: PUSH
34160: LD_INT 4
34162: ARRAY
34163: IFFALSE 34167
// exit ;
34165: GO 34216
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34167: LD_VAR 0 2
34171: PUSH
34172: LD_INT 29
34174: PUSH
34175: LD_INT 30
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: IN
34182: PUSH
34183: LD_VAR 0 3
34187: PPUSH
34188: LD_VAR 0 4
34192: PPUSH
34193: LD_VAR 0 9
34197: PPUSH
34198: CALL_OW 440
34202: NOT
34203: AND
34204: IFFALSE 34208
// exit ;
34206: GO 34216
// result := true ;
34208: LD_ADDR_VAR 0 6
34212: PUSH
34213: LD_INT 1
34215: ST_TO_ADDR
// end ;
34216: LD_VAR 0 6
34220: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34221: LD_INT 0
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
34239: PPUSH
34240: PPUSH
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
34249: PPUSH
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
// result = [ ] ;
34281: LD_ADDR_VAR 0 7
34285: PUSH
34286: EMPTY
34287: ST_TO_ADDR
// temp_list = [ ] ;
34288: LD_ADDR_VAR 0 9
34292: PUSH
34293: EMPTY
34294: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34295: LD_VAR 0 4
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: LD_INT 2
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: LD_INT 4
34314: PUSH
34315: LD_INT 5
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: IN
34326: NOT
34327: PUSH
34328: LD_VAR 0 1
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: IN
34343: PUSH
34344: LD_VAR 0 5
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: LD_INT 3
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: LIST
34362: IN
34363: NOT
34364: AND
34365: OR
34366: IFFALSE 34370
// exit ;
34368: GO 52761
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34370: LD_VAR 0 1
34374: PUSH
34375: LD_INT 6
34377: PUSH
34378: LD_INT 7
34380: PUSH
34381: LD_INT 8
34383: PUSH
34384: LD_INT 13
34386: PUSH
34387: LD_INT 12
34389: PUSH
34390: LD_INT 15
34392: PUSH
34393: LD_INT 11
34395: PUSH
34396: LD_INT 14
34398: PUSH
34399: LD_INT 10
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: IN
34413: IFFALSE 34423
// btype = b_lab ;
34415: LD_ADDR_VAR 0 1
34419: PUSH
34420: LD_INT 6
34422: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34423: LD_VAR 0 6
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: LIST
34441: IN
34442: NOT
34443: PUSH
34444: LD_VAR 0 1
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: LD_INT 3
34460: PUSH
34461: LD_INT 6
34463: PUSH
34464: LD_INT 36
34466: PUSH
34467: LD_INT 4
34469: PUSH
34470: LD_INT 5
34472: PUSH
34473: LD_INT 31
34475: PUSH
34476: LD_INT 32
34478: PUSH
34479: LD_INT 33
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: IN
34495: NOT
34496: PUSH
34497: LD_VAR 0 6
34501: PUSH
34502: LD_INT 1
34504: EQUAL
34505: AND
34506: OR
34507: PUSH
34508: LD_VAR 0 1
34512: PUSH
34513: LD_INT 2
34515: PUSH
34516: LD_INT 3
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: IN
34523: NOT
34524: PUSH
34525: LD_VAR 0 6
34529: PUSH
34530: LD_INT 2
34532: EQUAL
34533: AND
34534: OR
34535: IFFALSE 34545
// mode = 0 ;
34537: LD_ADDR_VAR 0 6
34541: PUSH
34542: LD_INT 0
34544: ST_TO_ADDR
// case mode of 0 :
34545: LD_VAR 0 6
34549: PUSH
34550: LD_INT 0
34552: DOUBLE
34553: EQUAL
34554: IFTRUE 34558
34556: GO 46011
34558: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34559: LD_ADDR_VAR 0 11
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 0
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 2
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: LD_INT 3
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: LD_INT 3
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34752: LD_ADDR_VAR 0 12
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: NEG
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: NEG
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 3
34909: NEG
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 3
34920: NEG
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34948: LD_ADDR_VAR 0 13
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 2
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: NEG
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: NEG
35084: PUSH
35085: LD_INT 2
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: LD_INT 3
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 3
35107: NEG
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 3
35119: NEG
35120: PUSH
35121: LD_INT 3
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35147: LD_ADDR_VAR 0 14
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: LD_INT 2
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 3
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: LD_INT 3
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: LD_INT 2
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35343: LD_ADDR_VAR 0 15
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 1
35401: NEG
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 3
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 3
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35536: LD_ADDR_VAR 0 16
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: NEG
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: LD_INT 2
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: NEG
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 2
35671: NEG
35672: PUSH
35673: LD_INT 2
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 3
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 3
35693: PUSH
35694: LD_INT 3
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: LD_INT 3
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35729: LD_ADDR_VAR 0 17
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: PUSH
35812: LD_INT 2
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 2
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 2
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 2
35905: NEG
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 2
35916: NEG
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: LD_INT 2
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35959: LD_ADDR_VAR 0 18
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 2
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 2
36135: NEG
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: NEG
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: NEG
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36189: LD_ADDR_VAR 0 19
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 2
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: LD_INT 1
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 2
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: NEG
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: NEG
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: NEG
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36419: LD_ADDR_VAR 0 20
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: LD_INT 2
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 2
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: LD_INT 1
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: NEG
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36649: LD_ADDR_VAR 0 21
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: NEG
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36879: LD_ADDR_VAR 0 22
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: LD_INT 1
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: LD_INT 2
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: LD_INT 2
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 2
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 2
37055: NEG
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 2
37078: NEG
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37109: LD_ADDR_VAR 0 23
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 1
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: LD_INT 1
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: LD_INT 2
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 2
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 2
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 2
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 2
37285: NEG
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: LD_INT 3
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 3
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: LD_INT 2
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 2
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37389: LD_ADDR_VAR 0 24
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: NEG
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 2
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: LD_INT 1
37496: NEG
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: LD_INT 2
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 2
37565: NEG
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37665: LD_ADDR_VAR 0 25
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 2
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: LD_INT 2
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: LD_INT 2
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 2
37864: NEG
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 3
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: LD_INT 3
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: LD_INT 3
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37939: LD_ADDR_VAR 0 26
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: NEG
38139: PUSH
38140: LD_INT 2
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: LD_INT 3
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: NEG
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38215: LD_ADDR_VAR 0 27
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 2
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: LD_INT 2
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 2
38391: NEG
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 2
38402: NEG
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 2
38414: NEG
38415: PUSH
38416: LD_INT 2
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 3
38448: NEG
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 3
38460: NEG
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38495: LD_ADDR_VAR 0 28
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: NEG
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: LD_INT 2
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: LD_INT 3
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: LD_INT 3
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 3
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 3
38742: NEG
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38777: LD_ADDR_VAR 0 29
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: LD_INT 3
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 3
39021: NEG
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39056: LD_ADDR_VAR 0 30
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 2
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 3
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: PUSH
39279: LD_INT 3
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 3
39299: NEG
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39334: LD_ADDR_VAR 0 31
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 2
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: NEG
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: LD_INT 3
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 3
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: LD_INT 3
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 3
39577: NEG
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39612: LD_ADDR_VAR 0 32
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: LD_INT 1
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 2
39778: NEG
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 3
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 3
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: LD_INT 3
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 2
39844: NEG
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 3
39855: NEG
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39890: LD_ADDR_VAR 0 33
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: LD_INT 2
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: NEG
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: LD_INT 3
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 2
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 3
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 3
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 3
40134: NEG
40135: PUSH
40136: LD_INT 2
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40169: LD_ADDR_VAR 0 34
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 3
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: LD_INT 3
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 3
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40449: LD_ADDR_VAR 0 35
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: LD_INT 1
40522: NEG
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40561: LD_ADDR_VAR 0 36
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: LD_INT 2
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40673: LD_ADDR_VAR 0 37
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40785: LD_ADDR_VAR 0 38
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40897: LD_ADDR_VAR 0 39
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: LD_INT 2
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41009: LD_ADDR_VAR 0 40
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41121: LD_ADDR_VAR 0 41
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 2
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: NEG
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: LD_INT 3
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 3
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 3
41364: PUSH
41365: LD_INT 3
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: LD_INT 3
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 3
41395: NEG
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 3
41418: NEG
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: NEG
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41471: LD_ADDR_VAR 0 42
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 3
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: LD_INT 3
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 3
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 3
41717: PUSH
41718: LD_INT 3
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 3
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 3
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 3
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 2
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: NEG
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 3
41780: NEG
41781: PUSH
41782: LD_INT 3
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41821: LD_ADDR_VAR 0 43
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: LD_INT 3
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: LD_INT 3
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 3
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 3
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 3
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: LD_INT 3
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 3
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42169: LD_ADDR_VAR 0 44
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 2
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: LD_INT 3
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 3
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 3
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: LD_INT 3
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 3
42443: NEG
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 3
42454: NEG
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 3
42466: NEG
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 3
42478: NEG
42479: PUSH
42480: LD_INT 3
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42519: LD_ADDR_VAR 0 45
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: NEG
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 3
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 3
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 3
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: LD_INT 3
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 3
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 3
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 3
42816: NEG
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 3
42828: NEG
42829: PUSH
42830: LD_INT 3
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42869: LD_ADDR_VAR 0 46
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 3
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: LD_INT 3
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 3
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43217: LD_ADDR_VAR 0 47
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: NEG
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43368: LD_ADDR_VAR 0 48
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43515: LD_ADDR_VAR 0 49
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 2
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43659: LD_ADDR_VAR 0 50
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43803: LD_ADDR_VAR 0 51
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43950: LD_ADDR_VAR 0 52
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44101: LD_ADDR_VAR 0 53
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44331: LD_ADDR_VAR 0 54
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44561: LD_ADDR_VAR 0 55
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44791: LD_ADDR_VAR 0 56
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45021: LD_ADDR_VAR 0 57
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45251: LD_ADDR_VAR 0 58
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45481: LD_ADDR_VAR 0 59
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45569: LD_ADDR_VAR 0 60
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45657: LD_ADDR_VAR 0 61
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45745: LD_ADDR_VAR 0 62
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45833: LD_ADDR_VAR 0 63
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45921: LD_ADDR_VAR 0 64
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: ST_TO_ADDR
// end ; 1 :
46009: GO 51906
46011: LD_INT 1
46013: DOUBLE
46014: EQUAL
46015: IFTRUE 46019
46017: GO 48642
46019: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46020: LD_ADDR_VAR 0 11
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 3
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 3
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46064: LD_ADDR_VAR 0 12
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 3
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 3
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46105: LD_ADDR_VAR 0 13
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 3
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46145: LD_ADDR_VAR 0 14
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 3
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 3
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46186: LD_ADDR_VAR 0 15
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 3
46204: NEG
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 3
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46230: LD_ADDR_VAR 0 16
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: LD_INT 3
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 3
46249: NEG
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 3
46261: NEG
46262: PUSH
46263: LD_INT 3
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46276: LD_ADDR_VAR 0 17
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 3
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 3
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 2
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: LIST
46319: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46320: LD_ADDR_VAR 0 18
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46361: LD_ADDR_VAR 0 19
46365: PUSH
46366: LD_INT 3
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 3
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 3
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: LIST
46400: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46401: LD_ADDR_VAR 0 20
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 3
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 3
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46442: LD_ADDR_VAR 0 21
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46486: LD_ADDR_VAR 0 22
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 3
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: NEG
46518: PUSH
46519: LD_INT 3
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46532: LD_ADDR_VAR 0 23
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 4
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46576: LD_ADDR_VAR 0 24
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 4
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46617: LD_ADDR_VAR 0 25
46621: PUSH
46622: LD_INT 3
46624: PUSH
46625: LD_INT 3
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 4
46634: PUSH
46635: LD_INT 3
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 3
46644: PUSH
46645: LD_INT 4
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46657: LD_ADDR_VAR 0 26
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 4
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46698: LD_ADDR_VAR 0 27
46702: PUSH
46703: LD_INT 3
46705: NEG
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 4
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46742: LD_ADDR_VAR 0 28
46746: PUSH
46747: LD_INT 3
46749: NEG
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 3
46761: NEG
46762: PUSH
46763: LD_INT 4
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 4
46773: NEG
46774: PUSH
46775: LD_INT 3
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46788: LD_ADDR_VAR 0 29
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 3
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 4
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 4
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 3
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 5
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 5
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 4
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 6
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 6
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 5
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46943: LD_ADDR_VAR 0 30
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 4
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 4
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 4
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 5
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 5
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 5
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 6
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 6
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47086: LD_ADDR_VAR 0 31
47090: PUSH
47091: LD_INT 3
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: LD_INT 3
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 4
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 4
47133: PUSH
47134: LD_INT 4
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 3
47143: PUSH
47144: LD_INT 4
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 5
47153: PUSH
47154: LD_INT 4
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 5
47163: PUSH
47164: LD_INT 5
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 4
47173: PUSH
47174: LD_INT 5
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 6
47183: PUSH
47184: LD_INT 5
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 6
47193: PUSH
47194: LD_INT 6
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 5
47203: PUSH
47204: LD_INT 6
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47225: LD_ADDR_VAR 0 32
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 3
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 4
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 4
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 5
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 5
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 4
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 6
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 6
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 5
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47368: LD_ADDR_VAR 0 33
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 4
47420: NEG
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 4
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 4
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 5
47454: NEG
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 5
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 5
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 6
47488: NEG
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 6
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47523: LD_ADDR_VAR 0 34
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: LD_INT 3
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 3
47542: NEG
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: LD_INT 3
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 3
47566: NEG
47567: PUSH
47568: LD_INT 4
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 4
47578: NEG
47579: PUSH
47580: LD_INT 3
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 4
47590: NEG
47591: PUSH
47592: LD_INT 4
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 4
47602: NEG
47603: PUSH
47604: LD_INT 5
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 5
47614: NEG
47615: PUSH
47616: LD_INT 4
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 5
47626: NEG
47627: PUSH
47628: LD_INT 5
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 5
47638: NEG
47639: PUSH
47640: LD_INT 6
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 6
47650: NEG
47651: PUSH
47652: LD_INT 5
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 6
47662: NEG
47663: PUSH
47664: LD_INT 6
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47686: LD_ADDR_VAR 0 41
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 3
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47730: LD_ADDR_VAR 0 42
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 3
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: LIST
47770: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47771: LD_ADDR_VAR 0 43
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: LD_INT 3
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: LIST
47810: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47811: LD_ADDR_VAR 0 44
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47852: LD_ADDR_VAR 0 45
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 3
47881: NEG
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: LIST
47895: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47896: LD_ADDR_VAR 0 46
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47942: LD_ADDR_VAR 0 47
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47975: LD_ADDR_VAR 0 48
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48006: LD_ADDR_VAR 0 49
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 3
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48035: LD_ADDR_VAR 0 50
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48064: LD_ADDR_VAR 0 51
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48095: LD_ADDR_VAR 0 52
48099: PUSH
48100: LD_INT 3
48102: NEG
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 3
48114: NEG
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48128: LD_ADDR_VAR 0 53
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 3
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 3
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48172: LD_ADDR_VAR 0 54
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 3
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48213: LD_ADDR_VAR 0 55
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: LIST
48252: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48253: LD_ADDR_VAR 0 56
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48294: LD_ADDR_VAR 0 57
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 3
48323: NEG
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48338: LD_ADDR_VAR 0 58
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 3
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: LD_INT 3
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: LIST
48383: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48384: LD_ADDR_VAR 0 59
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48428: LD_ADDR_VAR 0 60
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: LIST
48468: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48469: LD_ADDR_VAR 0 61
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48509: LD_ADDR_VAR 0 62
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48550: LD_ADDR_VAR 0 63
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48594: LD_ADDR_VAR 0 64
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: LIST
48639: ST_TO_ADDR
// end ; 2 :
48640: GO 51906
48642: LD_INT 2
48644: DOUBLE
48645: EQUAL
48646: IFTRUE 48650
48648: GO 51905
48650: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48651: LD_ADDR_VAR 0 29
48655: PUSH
48656: LD_INT 4
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 4
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 5
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 5
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 4
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 3
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 5
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 3
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 4
48771: PUSH
48772: LD_INT 3
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 4
48781: PUSH
48782: LD_INT 4
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: LD_INT 4
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 4
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 4
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 4
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 3
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 4
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 5
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 5
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 4
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 3
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: LD_INT 5
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: NEG
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: NEG
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 4
48990: NEG
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 4
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 4
49013: NEG
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 4
49036: NEG
49037: PUSH
49038: LD_INT 4
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 4
49048: NEG
49049: PUSH
49050: LD_INT 5
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: LD_INT 4
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: LD_INT 3
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 4
49084: NEG
49085: PUSH
49086: LD_INT 3
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 5
49096: NEG
49097: PUSH
49098: LD_INT 4
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 5
49108: NEG
49109: PUSH
49110: LD_INT 5
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 3
49120: NEG
49121: PUSH
49122: LD_INT 5
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 5
49132: NEG
49133: PUSH
49134: LD_INT 3
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49189: LD_ADDR_VAR 0 30
49193: PUSH
49194: LD_INT 4
49196: PUSH
49197: LD_INT 4
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 4
49206: PUSH
49207: LD_INT 3
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 5
49216: PUSH
49217: LD_INT 4
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 5
49226: PUSH
49227: LD_INT 5
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 4
49236: PUSH
49237: LD_INT 5
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: PUSH
49247: LD_INT 4
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 5
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: LD_INT 5
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 4
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 4
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 4
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 4
49379: NEG
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 4
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 3
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 4
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 5
49435: NEG
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 5
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 5
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: LD_INT 3
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: LD_INT 4
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 4
49541: NEG
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 4
49553: NEG
49554: PUSH
49555: LD_INT 4
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 4
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 4
49577: NEG
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 4
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 5
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 4
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 4
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 5
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: LD_INT 3
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 5
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49736: LD_ADDR_VAR 0 31
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 4
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 3
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 4
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 5
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 5
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: LD_INT 4
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 5
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 3
49847: NEG
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 4
49892: NEG
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 4
49903: NEG
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 4
49915: NEG
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 4
49938: NEG
49939: PUSH
49940: LD_INT 4
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 4
49950: NEG
49951: PUSH
49952: LD_INT 5
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: NEG
49963: PUSH
49964: LD_INT 4
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 3
49974: NEG
49975: PUSH
49976: LD_INT 3
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 4
49986: NEG
49987: PUSH
49988: LD_INT 3
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 5
49998: NEG
49999: PUSH
50000: LD_INT 4
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 5
50010: NEG
50011: PUSH
50012: LD_INT 5
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 3
50022: NEG
50023: PUSH
50024: LD_INT 5
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 5
50034: NEG
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 4
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 3
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 4
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: LD_INT 4
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 4
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 4
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 5
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 5
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 4
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 5
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50286: LD_ADDR_VAR 0 32
50290: PUSH
50291: LD_INT 4
50293: NEG
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 4
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 3
50316: NEG
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: NEG
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 4
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 5
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 5
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 5
50372: NEG
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 3
50384: NEG
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 3
50395: NEG
50396: PUSH
50397: LD_INT 3
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 3
50407: NEG
50408: PUSH
50409: LD_INT 4
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 4
50455: NEG
50456: PUSH
50457: LD_INT 3
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 4
50467: NEG
50468: PUSH
50469: LD_INT 4
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: LD_INT 4
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 4
50491: NEG
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 4
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 5
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 4
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 4
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 5
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 5
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 3
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 4
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 4
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 4
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 4
50698: PUSH
50699: LD_INT 4
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 4
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 5
50718: PUSH
50719: LD_INT 4
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 5
50728: PUSH
50729: LD_INT 5
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 4
50738: PUSH
50739: LD_INT 5
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: LD_INT 4
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: LD_INT 3
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 5
50768: PUSH
50769: LD_INT 3
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 5
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50833: LD_ADDR_VAR 0 33
50837: PUSH
50838: LD_INT 4
50840: NEG
50841: PUSH
50842: LD_INT 4
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 4
50852: NEG
50853: PUSH
50854: LD_INT 5
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: LD_INT 4
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 4
50888: NEG
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 5
50900: NEG
50901: PUSH
50902: LD_INT 4
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 5
50912: NEG
50913: PUSH
50914: LD_INT 5
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: LD_INT 5
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 5
50936: NEG
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 4
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 3
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 3
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 4
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: NEG
51039: PUSH
51040: LD_INT 4
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 4
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 4
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 5
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 5
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 4
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 3
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 5
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 3
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 4
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 4
51173: PUSH
51174: LD_INT 4
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: LD_INT 4
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 4
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: LD_INT 4
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 4
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 4
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 5
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 5
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 4
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 5
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51371: LD_ADDR_VAR 0 34
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 4
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 5
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 4
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 4
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 5
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: LD_INT 3
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: LD_INT 5
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 3
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 4
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 4
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 3
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 4
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 4
51573: PUSH
51574: LD_INT 4
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 4
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 5
51593: PUSH
51594: LD_INT 4
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 5
51603: PUSH
51604: LD_INT 5
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 4
51613: PUSH
51614: LD_INT 5
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: LD_INT 4
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 5
51643: PUSH
51644: LD_INT 3
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 3
51653: PUSH
51654: LD_INT 5
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 3
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: LD_INT 4
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 4
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 4
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 4
51756: NEG
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 4
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 3
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 4
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 5
51812: NEG
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 5
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 5
51835: NEG
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: ST_TO_ADDR
// end ; end ;
51903: GO 51906
51905: POP
// case btype of b_depot , b_warehouse :
51906: LD_VAR 0 1
51910: PUSH
51911: LD_INT 0
51913: DOUBLE
51914: EQUAL
51915: IFTRUE 51925
51917: LD_INT 1
51919: DOUBLE
51920: EQUAL
51921: IFTRUE 51925
51923: GO 52126
51925: POP
// case nation of nation_american :
51926: LD_VAR 0 5
51930: PUSH
51931: LD_INT 1
51933: DOUBLE
51934: EQUAL
51935: IFTRUE 51939
51937: GO 51995
51939: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51940: LD_ADDR_VAR 0 9
51944: PUSH
51945: LD_VAR 0 11
51949: PUSH
51950: LD_VAR 0 12
51954: PUSH
51955: LD_VAR 0 13
51959: PUSH
51960: LD_VAR 0 14
51964: PUSH
51965: LD_VAR 0 15
51969: PUSH
51970: LD_VAR 0 16
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: PUSH
51983: LD_VAR 0 4
51987: PUSH
51988: LD_INT 1
51990: PLUS
51991: ARRAY
51992: ST_TO_ADDR
51993: GO 52124
51995: LD_INT 2
51997: DOUBLE
51998: EQUAL
51999: IFTRUE 52003
52001: GO 52059
52003: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52004: LD_ADDR_VAR 0 9
52008: PUSH
52009: LD_VAR 0 17
52013: PUSH
52014: LD_VAR 0 18
52018: PUSH
52019: LD_VAR 0 19
52023: PUSH
52024: LD_VAR 0 20
52028: PUSH
52029: LD_VAR 0 21
52033: PUSH
52034: LD_VAR 0 22
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: PUSH
52047: LD_VAR 0 4
52051: PUSH
52052: LD_INT 1
52054: PLUS
52055: ARRAY
52056: ST_TO_ADDR
52057: GO 52124
52059: LD_INT 3
52061: DOUBLE
52062: EQUAL
52063: IFTRUE 52067
52065: GO 52123
52067: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52068: LD_ADDR_VAR 0 9
52072: PUSH
52073: LD_VAR 0 23
52077: PUSH
52078: LD_VAR 0 24
52082: PUSH
52083: LD_VAR 0 25
52087: PUSH
52088: LD_VAR 0 26
52092: PUSH
52093: LD_VAR 0 27
52097: PUSH
52098: LD_VAR 0 28
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: PUSH
52111: LD_VAR 0 4
52115: PUSH
52116: LD_INT 1
52118: PLUS
52119: ARRAY
52120: ST_TO_ADDR
52121: GO 52124
52123: POP
52124: GO 52679
52126: LD_INT 2
52128: DOUBLE
52129: EQUAL
52130: IFTRUE 52140
52132: LD_INT 3
52134: DOUBLE
52135: EQUAL
52136: IFTRUE 52140
52138: GO 52196
52140: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52141: LD_ADDR_VAR 0 9
52145: PUSH
52146: LD_VAR 0 29
52150: PUSH
52151: LD_VAR 0 30
52155: PUSH
52156: LD_VAR 0 31
52160: PUSH
52161: LD_VAR 0 32
52165: PUSH
52166: LD_VAR 0 33
52170: PUSH
52171: LD_VAR 0 34
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: PUSH
52184: LD_VAR 0 4
52188: PUSH
52189: LD_INT 1
52191: PLUS
52192: ARRAY
52193: ST_TO_ADDR
52194: GO 52679
52196: LD_INT 16
52198: DOUBLE
52199: EQUAL
52200: IFTRUE 52258
52202: LD_INT 17
52204: DOUBLE
52205: EQUAL
52206: IFTRUE 52258
52208: LD_INT 18
52210: DOUBLE
52211: EQUAL
52212: IFTRUE 52258
52214: LD_INT 19
52216: DOUBLE
52217: EQUAL
52218: IFTRUE 52258
52220: LD_INT 22
52222: DOUBLE
52223: EQUAL
52224: IFTRUE 52258
52226: LD_INT 20
52228: DOUBLE
52229: EQUAL
52230: IFTRUE 52258
52232: LD_INT 21
52234: DOUBLE
52235: EQUAL
52236: IFTRUE 52258
52238: LD_INT 23
52240: DOUBLE
52241: EQUAL
52242: IFTRUE 52258
52244: LD_INT 24
52246: DOUBLE
52247: EQUAL
52248: IFTRUE 52258
52250: LD_INT 25
52252: DOUBLE
52253: EQUAL
52254: IFTRUE 52258
52256: GO 52314
52258: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52259: LD_ADDR_VAR 0 9
52263: PUSH
52264: LD_VAR 0 35
52268: PUSH
52269: LD_VAR 0 36
52273: PUSH
52274: LD_VAR 0 37
52278: PUSH
52279: LD_VAR 0 38
52283: PUSH
52284: LD_VAR 0 39
52288: PUSH
52289: LD_VAR 0 40
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: PUSH
52302: LD_VAR 0 4
52306: PUSH
52307: LD_INT 1
52309: PLUS
52310: ARRAY
52311: ST_TO_ADDR
52312: GO 52679
52314: LD_INT 6
52316: DOUBLE
52317: EQUAL
52318: IFTRUE 52370
52320: LD_INT 7
52322: DOUBLE
52323: EQUAL
52324: IFTRUE 52370
52326: LD_INT 8
52328: DOUBLE
52329: EQUAL
52330: IFTRUE 52370
52332: LD_INT 13
52334: DOUBLE
52335: EQUAL
52336: IFTRUE 52370
52338: LD_INT 12
52340: DOUBLE
52341: EQUAL
52342: IFTRUE 52370
52344: LD_INT 15
52346: DOUBLE
52347: EQUAL
52348: IFTRUE 52370
52350: LD_INT 11
52352: DOUBLE
52353: EQUAL
52354: IFTRUE 52370
52356: LD_INT 14
52358: DOUBLE
52359: EQUAL
52360: IFTRUE 52370
52362: LD_INT 10
52364: DOUBLE
52365: EQUAL
52366: IFTRUE 52370
52368: GO 52426
52370: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52371: LD_ADDR_VAR 0 9
52375: PUSH
52376: LD_VAR 0 41
52380: PUSH
52381: LD_VAR 0 42
52385: PUSH
52386: LD_VAR 0 43
52390: PUSH
52391: LD_VAR 0 44
52395: PUSH
52396: LD_VAR 0 45
52400: PUSH
52401: LD_VAR 0 46
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: PUSH
52414: LD_VAR 0 4
52418: PUSH
52419: LD_INT 1
52421: PLUS
52422: ARRAY
52423: ST_TO_ADDR
52424: GO 52679
52426: LD_INT 36
52428: DOUBLE
52429: EQUAL
52430: IFTRUE 52434
52432: GO 52490
52434: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52435: LD_ADDR_VAR 0 9
52439: PUSH
52440: LD_VAR 0 47
52444: PUSH
52445: LD_VAR 0 48
52449: PUSH
52450: LD_VAR 0 49
52454: PUSH
52455: LD_VAR 0 50
52459: PUSH
52460: LD_VAR 0 51
52464: PUSH
52465: LD_VAR 0 52
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: PUSH
52478: LD_VAR 0 4
52482: PUSH
52483: LD_INT 1
52485: PLUS
52486: ARRAY
52487: ST_TO_ADDR
52488: GO 52679
52490: LD_INT 4
52492: DOUBLE
52493: EQUAL
52494: IFTRUE 52516
52496: LD_INT 5
52498: DOUBLE
52499: EQUAL
52500: IFTRUE 52516
52502: LD_INT 34
52504: DOUBLE
52505: EQUAL
52506: IFTRUE 52516
52508: LD_INT 37
52510: DOUBLE
52511: EQUAL
52512: IFTRUE 52516
52514: GO 52572
52516: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52517: LD_ADDR_VAR 0 9
52521: PUSH
52522: LD_VAR 0 53
52526: PUSH
52527: LD_VAR 0 54
52531: PUSH
52532: LD_VAR 0 55
52536: PUSH
52537: LD_VAR 0 56
52541: PUSH
52542: LD_VAR 0 57
52546: PUSH
52547: LD_VAR 0 58
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: PUSH
52560: LD_VAR 0 4
52564: PUSH
52565: LD_INT 1
52567: PLUS
52568: ARRAY
52569: ST_TO_ADDR
52570: GO 52679
52572: LD_INT 31
52574: DOUBLE
52575: EQUAL
52576: IFTRUE 52622
52578: LD_INT 32
52580: DOUBLE
52581: EQUAL
52582: IFTRUE 52622
52584: LD_INT 33
52586: DOUBLE
52587: EQUAL
52588: IFTRUE 52622
52590: LD_INT 27
52592: DOUBLE
52593: EQUAL
52594: IFTRUE 52622
52596: LD_INT 26
52598: DOUBLE
52599: EQUAL
52600: IFTRUE 52622
52602: LD_INT 28
52604: DOUBLE
52605: EQUAL
52606: IFTRUE 52622
52608: LD_INT 29
52610: DOUBLE
52611: EQUAL
52612: IFTRUE 52622
52614: LD_INT 30
52616: DOUBLE
52617: EQUAL
52618: IFTRUE 52622
52620: GO 52678
52622: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52623: LD_ADDR_VAR 0 9
52627: PUSH
52628: LD_VAR 0 59
52632: PUSH
52633: LD_VAR 0 60
52637: PUSH
52638: LD_VAR 0 61
52642: PUSH
52643: LD_VAR 0 62
52647: PUSH
52648: LD_VAR 0 63
52652: PUSH
52653: LD_VAR 0 64
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: PUSH
52666: LD_VAR 0 4
52670: PUSH
52671: LD_INT 1
52673: PLUS
52674: ARRAY
52675: ST_TO_ADDR
52676: GO 52679
52678: POP
// temp_list2 = [ ] ;
52679: LD_ADDR_VAR 0 10
52683: PUSH
52684: EMPTY
52685: ST_TO_ADDR
// for i in temp_list do
52686: LD_ADDR_VAR 0 8
52690: PUSH
52691: LD_VAR 0 9
52695: PUSH
52696: FOR_IN
52697: IFFALSE 52749
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52699: LD_ADDR_VAR 0 10
52703: PUSH
52704: LD_VAR 0 10
52708: PUSH
52709: LD_VAR 0 8
52713: PUSH
52714: LD_INT 1
52716: ARRAY
52717: PUSH
52718: LD_VAR 0 2
52722: PLUS
52723: PUSH
52724: LD_VAR 0 8
52728: PUSH
52729: LD_INT 2
52731: ARRAY
52732: PUSH
52733: LD_VAR 0 3
52737: PLUS
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: EMPTY
52744: LIST
52745: ADD
52746: ST_TO_ADDR
52747: GO 52696
52749: POP
52750: POP
// result = temp_list2 ;
52751: LD_ADDR_VAR 0 7
52755: PUSH
52756: LD_VAR 0 10
52760: ST_TO_ADDR
// end ;
52761: LD_VAR 0 7
52765: RET
// export function EnemyInRange ( unit , dist ) ; begin
52766: LD_INT 0
52768: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52769: LD_ADDR_VAR 0 3
52773: PUSH
52774: LD_VAR 0 1
52778: PPUSH
52779: CALL_OW 255
52783: PPUSH
52784: LD_VAR 0 1
52788: PPUSH
52789: CALL_OW 250
52793: PPUSH
52794: LD_VAR 0 1
52798: PPUSH
52799: CALL_OW 251
52803: PPUSH
52804: LD_VAR 0 2
52808: PPUSH
52809: CALL 26162 0 4
52813: PUSH
52814: LD_INT 4
52816: ARRAY
52817: ST_TO_ADDR
// end ;
52818: LD_VAR 0 3
52822: RET
// export function PlayerSeeMe ( unit ) ; begin
52823: LD_INT 0
52825: PPUSH
// result := See ( your_side , unit ) ;
52826: LD_ADDR_VAR 0 2
52830: PUSH
52831: LD_OWVAR 2
52835: PPUSH
52836: LD_VAR 0 1
52840: PPUSH
52841: CALL_OW 292
52845: ST_TO_ADDR
// end ;
52846: LD_VAR 0 2
52850: RET
// export function ReverseDir ( unit ) ; begin
52851: LD_INT 0
52853: PPUSH
// if not unit then
52854: LD_VAR 0 1
52858: NOT
52859: IFFALSE 52863
// exit ;
52861: GO 52886
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52863: LD_ADDR_VAR 0 2
52867: PUSH
52868: LD_VAR 0 1
52872: PPUSH
52873: CALL_OW 254
52877: PUSH
52878: LD_INT 3
52880: PLUS
52881: PUSH
52882: LD_INT 6
52884: MOD
52885: ST_TO_ADDR
// end ;
52886: LD_VAR 0 2
52890: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52891: LD_INT 0
52893: PPUSH
52894: PPUSH
52895: PPUSH
52896: PPUSH
52897: PPUSH
// if not hexes then
52898: LD_VAR 0 2
52902: NOT
52903: IFFALSE 52907
// exit ;
52905: GO 53055
// dist := 9999 ;
52907: LD_ADDR_VAR 0 5
52911: PUSH
52912: LD_INT 9999
52914: ST_TO_ADDR
// for i = 1 to hexes do
52915: LD_ADDR_VAR 0 4
52919: PUSH
52920: DOUBLE
52921: LD_INT 1
52923: DEC
52924: ST_TO_ADDR
52925: LD_VAR 0 2
52929: PUSH
52930: FOR_TO
52931: IFFALSE 53043
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52933: LD_VAR 0 1
52937: PPUSH
52938: LD_VAR 0 2
52942: PUSH
52943: LD_VAR 0 4
52947: ARRAY
52948: PUSH
52949: LD_INT 1
52951: ARRAY
52952: PPUSH
52953: LD_VAR 0 2
52957: PUSH
52958: LD_VAR 0 4
52962: ARRAY
52963: PUSH
52964: LD_INT 2
52966: ARRAY
52967: PPUSH
52968: CALL_OW 297
52972: PUSH
52973: LD_VAR 0 5
52977: LESS
52978: IFFALSE 53041
// begin hex := hexes [ i ] ;
52980: LD_ADDR_VAR 0 7
52984: PUSH
52985: LD_VAR 0 2
52989: PUSH
52990: LD_VAR 0 4
52994: ARRAY
52995: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52996: LD_ADDR_VAR 0 5
53000: PUSH
53001: LD_VAR 0 1
53005: PPUSH
53006: LD_VAR 0 2
53010: PUSH
53011: LD_VAR 0 4
53015: ARRAY
53016: PUSH
53017: LD_INT 1
53019: ARRAY
53020: PPUSH
53021: LD_VAR 0 2
53025: PUSH
53026: LD_VAR 0 4
53030: ARRAY
53031: PUSH
53032: LD_INT 2
53034: ARRAY
53035: PPUSH
53036: CALL_OW 297
53040: ST_TO_ADDR
// end ; end ;
53041: GO 52930
53043: POP
53044: POP
// result := hex ;
53045: LD_ADDR_VAR 0 3
53049: PUSH
53050: LD_VAR 0 7
53054: ST_TO_ADDR
// end ;
53055: LD_VAR 0 3
53059: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53060: LD_INT 0
53062: PPUSH
53063: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53064: LD_VAR 0 1
53068: NOT
53069: PUSH
53070: LD_VAR 0 1
53074: PUSH
53075: LD_INT 21
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 23
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PPUSH
53099: CALL_OW 69
53103: IN
53104: NOT
53105: OR
53106: IFFALSE 53110
// exit ;
53108: GO 53157
// for i = 1 to 3 do
53110: LD_ADDR_VAR 0 3
53114: PUSH
53115: DOUBLE
53116: LD_INT 1
53118: DEC
53119: ST_TO_ADDR
53120: LD_INT 3
53122: PUSH
53123: FOR_TO
53124: IFFALSE 53155
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53126: LD_VAR 0 1
53130: PPUSH
53131: CALL_OW 250
53135: PPUSH
53136: LD_VAR 0 1
53140: PPUSH
53141: CALL_OW 251
53145: PPUSH
53146: LD_INT 1
53148: PPUSH
53149: CALL_OW 453
53153: GO 53123
53155: POP
53156: POP
// end ;
53157: LD_VAR 0 2
53161: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53162: LD_INT 0
53164: PPUSH
53165: PPUSH
53166: PPUSH
53167: PPUSH
53168: PPUSH
53169: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53170: LD_VAR 0 1
53174: NOT
53175: PUSH
53176: LD_VAR 0 2
53180: NOT
53181: OR
53182: PUSH
53183: LD_VAR 0 1
53187: PPUSH
53188: CALL_OW 314
53192: OR
53193: IFFALSE 53197
// exit ;
53195: GO 53638
// x := GetX ( enemy_unit ) ;
53197: LD_ADDR_VAR 0 7
53201: PUSH
53202: LD_VAR 0 2
53206: PPUSH
53207: CALL_OW 250
53211: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53212: LD_ADDR_VAR 0 8
53216: PUSH
53217: LD_VAR 0 2
53221: PPUSH
53222: CALL_OW 251
53226: ST_TO_ADDR
// if not x or not y then
53227: LD_VAR 0 7
53231: NOT
53232: PUSH
53233: LD_VAR 0 8
53237: NOT
53238: OR
53239: IFFALSE 53243
// exit ;
53241: GO 53638
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53243: LD_ADDR_VAR 0 6
53247: PUSH
53248: LD_VAR 0 7
53252: PPUSH
53253: LD_INT 0
53255: PPUSH
53256: LD_INT 4
53258: PPUSH
53259: CALL_OW 272
53263: PUSH
53264: LD_VAR 0 8
53268: PPUSH
53269: LD_INT 0
53271: PPUSH
53272: LD_INT 4
53274: PPUSH
53275: CALL_OW 273
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_VAR 0 7
53288: PPUSH
53289: LD_INT 1
53291: PPUSH
53292: LD_INT 4
53294: PPUSH
53295: CALL_OW 272
53299: PUSH
53300: LD_VAR 0 8
53304: PPUSH
53305: LD_INT 1
53307: PPUSH
53308: LD_INT 4
53310: PPUSH
53311: CALL_OW 273
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_VAR 0 7
53324: PPUSH
53325: LD_INT 2
53327: PPUSH
53328: LD_INT 4
53330: PPUSH
53331: CALL_OW 272
53335: PUSH
53336: LD_VAR 0 8
53340: PPUSH
53341: LD_INT 2
53343: PPUSH
53344: LD_INT 4
53346: PPUSH
53347: CALL_OW 273
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_VAR 0 7
53360: PPUSH
53361: LD_INT 3
53363: PPUSH
53364: LD_INT 4
53366: PPUSH
53367: CALL_OW 272
53371: PUSH
53372: LD_VAR 0 8
53376: PPUSH
53377: LD_INT 3
53379: PPUSH
53380: LD_INT 4
53382: PPUSH
53383: CALL_OW 273
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_VAR 0 7
53396: PPUSH
53397: LD_INT 4
53399: PPUSH
53400: LD_INT 4
53402: PPUSH
53403: CALL_OW 272
53407: PUSH
53408: LD_VAR 0 8
53412: PPUSH
53413: LD_INT 4
53415: PPUSH
53416: LD_INT 4
53418: PPUSH
53419: CALL_OW 273
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_VAR 0 7
53432: PPUSH
53433: LD_INT 5
53435: PPUSH
53436: LD_INT 4
53438: PPUSH
53439: CALL_OW 272
53443: PUSH
53444: LD_VAR 0 8
53448: PPUSH
53449: LD_INT 5
53451: PPUSH
53452: LD_INT 4
53454: PPUSH
53455: CALL_OW 273
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: ST_TO_ADDR
// for i = tmp downto 1 do
53472: LD_ADDR_VAR 0 4
53476: PUSH
53477: DOUBLE
53478: LD_VAR 0 6
53482: INC
53483: ST_TO_ADDR
53484: LD_INT 1
53486: PUSH
53487: FOR_DOWNTO
53488: IFFALSE 53589
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53490: LD_VAR 0 6
53494: PUSH
53495: LD_VAR 0 4
53499: ARRAY
53500: PUSH
53501: LD_INT 1
53503: ARRAY
53504: PPUSH
53505: LD_VAR 0 6
53509: PUSH
53510: LD_VAR 0 4
53514: ARRAY
53515: PUSH
53516: LD_INT 2
53518: ARRAY
53519: PPUSH
53520: CALL_OW 488
53524: NOT
53525: PUSH
53526: LD_VAR 0 6
53530: PUSH
53531: LD_VAR 0 4
53535: ARRAY
53536: PUSH
53537: LD_INT 1
53539: ARRAY
53540: PPUSH
53541: LD_VAR 0 6
53545: PUSH
53546: LD_VAR 0 4
53550: ARRAY
53551: PUSH
53552: LD_INT 2
53554: ARRAY
53555: PPUSH
53556: CALL_OW 428
53560: PUSH
53561: LD_INT 0
53563: NONEQUAL
53564: OR
53565: IFFALSE 53587
// tmp := Delete ( tmp , i ) ;
53567: LD_ADDR_VAR 0 6
53571: PUSH
53572: LD_VAR 0 6
53576: PPUSH
53577: LD_VAR 0 4
53581: PPUSH
53582: CALL_OW 3
53586: ST_TO_ADDR
53587: GO 53487
53589: POP
53590: POP
// j := GetClosestHex ( unit , tmp ) ;
53591: LD_ADDR_VAR 0 5
53595: PUSH
53596: LD_VAR 0 1
53600: PPUSH
53601: LD_VAR 0 6
53605: PPUSH
53606: CALL 52891 0 2
53610: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53611: LD_VAR 0 1
53615: PPUSH
53616: LD_VAR 0 5
53620: PUSH
53621: LD_INT 1
53623: ARRAY
53624: PPUSH
53625: LD_VAR 0 5
53629: PUSH
53630: LD_INT 2
53632: ARRAY
53633: PPUSH
53634: CALL_OW 111
// end ;
53638: LD_VAR 0 3
53642: RET
// export function PrepareApemanSoldier ( ) ; begin
53643: LD_INT 0
53645: PPUSH
// uc_nation := 0 ;
53646: LD_ADDR_OWVAR 21
53650: PUSH
53651: LD_INT 0
53653: ST_TO_ADDR
// hc_sex := sex_male ;
53654: LD_ADDR_OWVAR 27
53658: PUSH
53659: LD_INT 1
53661: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
53662: LD_ADDR_OWVAR 28
53666: PUSH
53667: LD_INT 15
53669: ST_TO_ADDR
// hc_gallery :=  ;
53670: LD_ADDR_OWVAR 33
53674: PUSH
53675: LD_STRING 
53677: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53678: LD_ADDR_OWVAR 31
53682: PUSH
53683: LD_INT 0
53685: PPUSH
53686: LD_INT 3
53688: PPUSH
53689: CALL_OW 12
53693: PUSH
53694: LD_INT 0
53696: PPUSH
53697: LD_INT 3
53699: PPUSH
53700: CALL_OW 12
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// end ;
53717: LD_VAR 0 1
53721: RET
// export function PrepareApemanEngineer ( ) ; begin
53722: LD_INT 0
53724: PPUSH
// uc_nation := 0 ;
53725: LD_ADDR_OWVAR 21
53729: PUSH
53730: LD_INT 0
53732: ST_TO_ADDR
// hc_sex := sex_male ;
53733: LD_ADDR_OWVAR 27
53737: PUSH
53738: LD_INT 1
53740: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53741: LD_ADDR_OWVAR 28
53745: PUSH
53746: LD_INT 16
53748: ST_TO_ADDR
// hc_gallery :=  ;
53749: LD_ADDR_OWVAR 33
53753: PUSH
53754: LD_STRING 
53756: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53757: LD_ADDR_OWVAR 31
53761: PUSH
53762: LD_INT 0
53764: PPUSH
53765: LD_INT 3
53767: PPUSH
53768: CALL_OW 12
53772: PUSH
53773: LD_INT 0
53775: PPUSH
53776: LD_INT 3
53778: PPUSH
53779: CALL_OW 12
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// end ;
53796: LD_VAR 0 1
53800: RET
// export function PrepareApeman ( agressivity ) ; begin
53801: LD_INT 0
53803: PPUSH
// uc_side := 0 ;
53804: LD_ADDR_OWVAR 20
53808: PUSH
53809: LD_INT 0
53811: ST_TO_ADDR
// uc_nation := 0 ;
53812: LD_ADDR_OWVAR 21
53816: PUSH
53817: LD_INT 0
53819: ST_TO_ADDR
// hc_sex := sex_male ;
53820: LD_ADDR_OWVAR 27
53824: PUSH
53825: LD_INT 1
53827: ST_TO_ADDR
// hc_class := class_apeman ;
53828: LD_ADDR_OWVAR 28
53832: PUSH
53833: LD_INT 12
53835: ST_TO_ADDR
// hc_gallery :=  ;
53836: LD_ADDR_OWVAR 33
53840: PUSH
53841: LD_STRING 
53843: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53844: LD_ADDR_OWVAR 35
53848: PUSH
53849: LD_VAR 0 1
53853: NEG
53854: PPUSH
53855: LD_VAR 0 1
53859: PPUSH
53860: CALL_OW 12
53864: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53865: LD_ADDR_OWVAR 31
53869: PUSH
53870: LD_INT 0
53872: PPUSH
53873: LD_INT 3
53875: PPUSH
53876: CALL_OW 12
53880: PUSH
53881: LD_INT 0
53883: PPUSH
53884: LD_INT 3
53886: PPUSH
53887: CALL_OW 12
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// end ;
53904: LD_VAR 0 2
53908: RET
// export function PrepareTiger ( agressivity ) ; begin
53909: LD_INT 0
53911: PPUSH
// uc_side := 0 ;
53912: LD_ADDR_OWVAR 20
53916: PUSH
53917: LD_INT 0
53919: ST_TO_ADDR
// uc_nation := 0 ;
53920: LD_ADDR_OWVAR 21
53924: PUSH
53925: LD_INT 0
53927: ST_TO_ADDR
// hc_class := class_tiger ;
53928: LD_ADDR_OWVAR 28
53932: PUSH
53933: LD_INT 14
53935: ST_TO_ADDR
// hc_gallery :=  ;
53936: LD_ADDR_OWVAR 33
53940: PUSH
53941: LD_STRING 
53943: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53944: LD_ADDR_OWVAR 35
53948: PUSH
53949: LD_VAR 0 1
53953: NEG
53954: PPUSH
53955: LD_VAR 0 1
53959: PPUSH
53960: CALL_OW 12
53964: ST_TO_ADDR
// end ;
53965: LD_VAR 0 2
53969: RET
// export function PrepareEnchidna ( ) ; begin
53970: LD_INT 0
53972: PPUSH
// uc_side := 0 ;
53973: LD_ADDR_OWVAR 20
53977: PUSH
53978: LD_INT 0
53980: ST_TO_ADDR
// uc_nation := 0 ;
53981: LD_ADDR_OWVAR 21
53985: PUSH
53986: LD_INT 0
53988: ST_TO_ADDR
// hc_class := class_baggie ;
53989: LD_ADDR_OWVAR 28
53993: PUSH
53994: LD_INT 13
53996: ST_TO_ADDR
// hc_gallery :=  ;
53997: LD_ADDR_OWVAR 33
54001: PUSH
54002: LD_STRING 
54004: ST_TO_ADDR
// end ;
54005: LD_VAR 0 1
54009: RET
// export function PrepareFrog ( ) ; begin
54010: LD_INT 0
54012: PPUSH
// uc_side := 0 ;
54013: LD_ADDR_OWVAR 20
54017: PUSH
54018: LD_INT 0
54020: ST_TO_ADDR
// uc_nation := 0 ;
54021: LD_ADDR_OWVAR 21
54025: PUSH
54026: LD_INT 0
54028: ST_TO_ADDR
// hc_class := class_frog ;
54029: LD_ADDR_OWVAR 28
54033: PUSH
54034: LD_INT 19
54036: ST_TO_ADDR
// hc_gallery :=  ;
54037: LD_ADDR_OWVAR 33
54041: PUSH
54042: LD_STRING 
54044: ST_TO_ADDR
// end ;
54045: LD_VAR 0 1
54049: RET
// export function PrepareFish ( ) ; begin
54050: LD_INT 0
54052: PPUSH
// uc_side := 0 ;
54053: LD_ADDR_OWVAR 20
54057: PUSH
54058: LD_INT 0
54060: ST_TO_ADDR
// uc_nation := 0 ;
54061: LD_ADDR_OWVAR 21
54065: PUSH
54066: LD_INT 0
54068: ST_TO_ADDR
// hc_class := class_fish ;
54069: LD_ADDR_OWVAR 28
54073: PUSH
54074: LD_INT 20
54076: ST_TO_ADDR
// hc_gallery :=  ;
54077: LD_ADDR_OWVAR 33
54081: PUSH
54082: LD_STRING 
54084: ST_TO_ADDR
// end ;
54085: LD_VAR 0 1
54089: RET
// export function PrepareBird ( ) ; begin
54090: LD_INT 0
54092: PPUSH
// uc_side := 0 ;
54093: LD_ADDR_OWVAR 20
54097: PUSH
54098: LD_INT 0
54100: ST_TO_ADDR
// uc_nation := 0 ;
54101: LD_ADDR_OWVAR 21
54105: PUSH
54106: LD_INT 0
54108: ST_TO_ADDR
// hc_class := class_phororhacos ;
54109: LD_ADDR_OWVAR 28
54113: PUSH
54114: LD_INT 18
54116: ST_TO_ADDR
// hc_gallery :=  ;
54117: LD_ADDR_OWVAR 33
54121: PUSH
54122: LD_STRING 
54124: ST_TO_ADDR
// end ;
54125: LD_VAR 0 1
54129: RET
// export function PrepareHorse ( ) ; begin
54130: LD_INT 0
54132: PPUSH
// uc_side := 0 ;
54133: LD_ADDR_OWVAR 20
54137: PUSH
54138: LD_INT 0
54140: ST_TO_ADDR
// uc_nation := 0 ;
54141: LD_ADDR_OWVAR 21
54145: PUSH
54146: LD_INT 0
54148: ST_TO_ADDR
// hc_class := class_horse ;
54149: LD_ADDR_OWVAR 28
54153: PUSH
54154: LD_INT 21
54156: ST_TO_ADDR
// hc_gallery :=  ;
54157: LD_ADDR_OWVAR 33
54161: PUSH
54162: LD_STRING 
54164: ST_TO_ADDR
// end ;
54165: LD_VAR 0 1
54169: RET
// export function PrepareMastodont ( ) ; begin
54170: LD_INT 0
54172: PPUSH
// uc_side := 0 ;
54173: LD_ADDR_OWVAR 20
54177: PUSH
54178: LD_INT 0
54180: ST_TO_ADDR
// uc_nation := 0 ;
54181: LD_ADDR_OWVAR 21
54185: PUSH
54186: LD_INT 0
54188: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54189: LD_ADDR_OWVAR 37
54193: PUSH
54194: LD_INT 31
54196: ST_TO_ADDR
// vc_control := control_rider ;
54197: LD_ADDR_OWVAR 38
54201: PUSH
54202: LD_INT 4
54204: ST_TO_ADDR
// end ;
54205: LD_VAR 0 1
54209: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54210: LD_INT 0
54212: PPUSH
54213: PPUSH
54214: PPUSH
// uc_side = 0 ;
54215: LD_ADDR_OWVAR 20
54219: PUSH
54220: LD_INT 0
54222: ST_TO_ADDR
// uc_nation = 0 ;
54223: LD_ADDR_OWVAR 21
54227: PUSH
54228: LD_INT 0
54230: ST_TO_ADDR
// InitHc_All ( ) ;
54231: CALL_OW 584
// InitVc ;
54235: CALL_OW 20
// if mastodonts then
54239: LD_VAR 0 6
54243: IFFALSE 54310
// for i = 1 to mastodonts do
54245: LD_ADDR_VAR 0 11
54249: PUSH
54250: DOUBLE
54251: LD_INT 1
54253: DEC
54254: ST_TO_ADDR
54255: LD_VAR 0 6
54259: PUSH
54260: FOR_TO
54261: IFFALSE 54308
// begin vc_chassis := 31 ;
54263: LD_ADDR_OWVAR 37
54267: PUSH
54268: LD_INT 31
54270: ST_TO_ADDR
// vc_control := control_rider ;
54271: LD_ADDR_OWVAR 38
54275: PUSH
54276: LD_INT 4
54278: ST_TO_ADDR
// animal := CreateVehicle ;
54279: LD_ADDR_VAR 0 12
54283: PUSH
54284: CALL_OW 45
54288: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54289: LD_VAR 0 12
54293: PPUSH
54294: LD_VAR 0 8
54298: PPUSH
54299: LD_INT 0
54301: PPUSH
54302: CALL 56445 0 3
// end ;
54306: GO 54260
54308: POP
54309: POP
// if horses then
54310: LD_VAR 0 5
54314: IFFALSE 54381
// for i = 1 to horses do
54316: LD_ADDR_VAR 0 11
54320: PUSH
54321: DOUBLE
54322: LD_INT 1
54324: DEC
54325: ST_TO_ADDR
54326: LD_VAR 0 5
54330: PUSH
54331: FOR_TO
54332: IFFALSE 54379
// begin hc_class := 21 ;
54334: LD_ADDR_OWVAR 28
54338: PUSH
54339: LD_INT 21
54341: ST_TO_ADDR
// hc_gallery :=  ;
54342: LD_ADDR_OWVAR 33
54346: PUSH
54347: LD_STRING 
54349: ST_TO_ADDR
// animal := CreateHuman ;
54350: LD_ADDR_VAR 0 12
54354: PUSH
54355: CALL_OW 44
54359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54360: LD_VAR 0 12
54364: PPUSH
54365: LD_VAR 0 8
54369: PPUSH
54370: LD_INT 0
54372: PPUSH
54373: CALL 56445 0 3
// end ;
54377: GO 54331
54379: POP
54380: POP
// if birds then
54381: LD_VAR 0 1
54385: IFFALSE 54452
// for i = 1 to birds do
54387: LD_ADDR_VAR 0 11
54391: PUSH
54392: DOUBLE
54393: LD_INT 1
54395: DEC
54396: ST_TO_ADDR
54397: LD_VAR 0 1
54401: PUSH
54402: FOR_TO
54403: IFFALSE 54450
// begin hc_class = 18 ;
54405: LD_ADDR_OWVAR 28
54409: PUSH
54410: LD_INT 18
54412: ST_TO_ADDR
// hc_gallery =  ;
54413: LD_ADDR_OWVAR 33
54417: PUSH
54418: LD_STRING 
54420: ST_TO_ADDR
// animal := CreateHuman ;
54421: LD_ADDR_VAR 0 12
54425: PUSH
54426: CALL_OW 44
54430: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54431: LD_VAR 0 12
54435: PPUSH
54436: LD_VAR 0 8
54440: PPUSH
54441: LD_INT 0
54443: PPUSH
54444: CALL 56445 0 3
// end ;
54448: GO 54402
54450: POP
54451: POP
// if tigers then
54452: LD_VAR 0 2
54456: IFFALSE 54540
// for i = 1 to tigers do
54458: LD_ADDR_VAR 0 11
54462: PUSH
54463: DOUBLE
54464: LD_INT 1
54466: DEC
54467: ST_TO_ADDR
54468: LD_VAR 0 2
54472: PUSH
54473: FOR_TO
54474: IFFALSE 54538
// begin hc_class = class_tiger ;
54476: LD_ADDR_OWVAR 28
54480: PUSH
54481: LD_INT 14
54483: ST_TO_ADDR
// hc_gallery =  ;
54484: LD_ADDR_OWVAR 33
54488: PUSH
54489: LD_STRING 
54491: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54492: LD_ADDR_OWVAR 35
54496: PUSH
54497: LD_INT 7
54499: NEG
54500: PPUSH
54501: LD_INT 7
54503: PPUSH
54504: CALL_OW 12
54508: ST_TO_ADDR
// animal := CreateHuman ;
54509: LD_ADDR_VAR 0 12
54513: PUSH
54514: CALL_OW 44
54518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54519: LD_VAR 0 12
54523: PPUSH
54524: LD_VAR 0 8
54528: PPUSH
54529: LD_INT 0
54531: PPUSH
54532: CALL 56445 0 3
// end ;
54536: GO 54473
54538: POP
54539: POP
// if apemans then
54540: LD_VAR 0 3
54544: IFFALSE 54667
// for i = 1 to apemans do
54546: LD_ADDR_VAR 0 11
54550: PUSH
54551: DOUBLE
54552: LD_INT 1
54554: DEC
54555: ST_TO_ADDR
54556: LD_VAR 0 3
54560: PUSH
54561: FOR_TO
54562: IFFALSE 54665
// begin hc_class = class_apeman ;
54564: LD_ADDR_OWVAR 28
54568: PUSH
54569: LD_INT 12
54571: ST_TO_ADDR
// hc_gallery =  ;
54572: LD_ADDR_OWVAR 33
54576: PUSH
54577: LD_STRING 
54579: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54580: LD_ADDR_OWVAR 35
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PPUSH
54589: LD_INT 2
54591: PPUSH
54592: CALL_OW 12
54596: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54597: LD_ADDR_OWVAR 31
54601: PUSH
54602: LD_INT 1
54604: PPUSH
54605: LD_INT 3
54607: PPUSH
54608: CALL_OW 12
54612: PUSH
54613: LD_INT 1
54615: PPUSH
54616: LD_INT 3
54618: PPUSH
54619: CALL_OW 12
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// animal := CreateHuman ;
54636: LD_ADDR_VAR 0 12
54640: PUSH
54641: CALL_OW 44
54645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54646: LD_VAR 0 12
54650: PPUSH
54651: LD_VAR 0 8
54655: PPUSH
54656: LD_INT 0
54658: PPUSH
54659: CALL 56445 0 3
// end ;
54663: GO 54561
54665: POP
54666: POP
// if enchidnas then
54667: LD_VAR 0 4
54671: IFFALSE 54738
// for i = 1 to enchidnas do
54673: LD_ADDR_VAR 0 11
54677: PUSH
54678: DOUBLE
54679: LD_INT 1
54681: DEC
54682: ST_TO_ADDR
54683: LD_VAR 0 4
54687: PUSH
54688: FOR_TO
54689: IFFALSE 54736
// begin hc_class = 13 ;
54691: LD_ADDR_OWVAR 28
54695: PUSH
54696: LD_INT 13
54698: ST_TO_ADDR
// hc_gallery =  ;
54699: LD_ADDR_OWVAR 33
54703: PUSH
54704: LD_STRING 
54706: ST_TO_ADDR
// animal := CreateHuman ;
54707: LD_ADDR_VAR 0 12
54711: PUSH
54712: CALL_OW 44
54716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54717: LD_VAR 0 12
54721: PPUSH
54722: LD_VAR 0 8
54726: PPUSH
54727: LD_INT 0
54729: PPUSH
54730: CALL 56445 0 3
// end ;
54734: GO 54688
54736: POP
54737: POP
// if fishes then
54738: LD_VAR 0 7
54742: IFFALSE 54809
// for i = 1 to fishes do
54744: LD_ADDR_VAR 0 11
54748: PUSH
54749: DOUBLE
54750: LD_INT 1
54752: DEC
54753: ST_TO_ADDR
54754: LD_VAR 0 7
54758: PUSH
54759: FOR_TO
54760: IFFALSE 54807
// begin hc_class = 20 ;
54762: LD_ADDR_OWVAR 28
54766: PUSH
54767: LD_INT 20
54769: ST_TO_ADDR
// hc_gallery =  ;
54770: LD_ADDR_OWVAR 33
54774: PUSH
54775: LD_STRING 
54777: ST_TO_ADDR
// animal := CreateHuman ;
54778: LD_ADDR_VAR 0 12
54782: PUSH
54783: CALL_OW 44
54787: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54788: LD_VAR 0 12
54792: PPUSH
54793: LD_VAR 0 9
54797: PPUSH
54798: LD_INT 0
54800: PPUSH
54801: CALL 56445 0 3
// end ;
54805: GO 54759
54807: POP
54808: POP
// end ;
54809: LD_VAR 0 10
54813: RET
// export function WantHeal ( sci , unit ) ; begin
54814: LD_INT 0
54816: PPUSH
// if GetTaskList ( sci ) > 0 then
54817: LD_VAR 0 1
54821: PPUSH
54822: CALL_OW 437
54826: PUSH
54827: LD_INT 0
54829: GREATER
54830: IFFALSE 54900
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54832: LD_VAR 0 1
54836: PPUSH
54837: CALL_OW 437
54841: PUSH
54842: LD_INT 1
54844: ARRAY
54845: PUSH
54846: LD_INT 1
54848: ARRAY
54849: PUSH
54850: LD_STRING l
54852: EQUAL
54853: PUSH
54854: LD_VAR 0 1
54858: PPUSH
54859: CALL_OW 437
54863: PUSH
54864: LD_INT 1
54866: ARRAY
54867: PUSH
54868: LD_INT 4
54870: ARRAY
54871: PUSH
54872: LD_VAR 0 2
54876: EQUAL
54877: AND
54878: IFFALSE 54890
// result := true else
54880: LD_ADDR_VAR 0 3
54884: PUSH
54885: LD_INT 1
54887: ST_TO_ADDR
54888: GO 54898
// result := false ;
54890: LD_ADDR_VAR 0 3
54894: PUSH
54895: LD_INT 0
54897: ST_TO_ADDR
// end else
54898: GO 54908
// result := false ;
54900: LD_ADDR_VAR 0 3
54904: PUSH
54905: LD_INT 0
54907: ST_TO_ADDR
// end ;
54908: LD_VAR 0 3
54912: RET
// export function HealTarget ( sci ) ; begin
54913: LD_INT 0
54915: PPUSH
// if not sci then
54916: LD_VAR 0 1
54920: NOT
54921: IFFALSE 54925
// exit ;
54923: GO 54990
// result := 0 ;
54925: LD_ADDR_VAR 0 2
54929: PUSH
54930: LD_INT 0
54932: ST_TO_ADDR
// if GetTaskList ( sci ) then
54933: LD_VAR 0 1
54937: PPUSH
54938: CALL_OW 437
54942: IFFALSE 54990
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54944: LD_VAR 0 1
54948: PPUSH
54949: CALL_OW 437
54953: PUSH
54954: LD_INT 1
54956: ARRAY
54957: PUSH
54958: LD_INT 1
54960: ARRAY
54961: PUSH
54962: LD_STRING l
54964: EQUAL
54965: IFFALSE 54990
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54967: LD_ADDR_VAR 0 2
54971: PUSH
54972: LD_VAR 0 1
54976: PPUSH
54977: CALL_OW 437
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: PUSH
54986: LD_INT 4
54988: ARRAY
54989: ST_TO_ADDR
// end ;
54990: LD_VAR 0 2
54994: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54995: LD_INT 0
54997: PPUSH
54998: PPUSH
54999: PPUSH
55000: PPUSH
// if not base_units then
55001: LD_VAR 0 1
55005: NOT
55006: IFFALSE 55010
// exit ;
55008: GO 55097
// result := false ;
55010: LD_ADDR_VAR 0 2
55014: PUSH
55015: LD_INT 0
55017: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55018: LD_ADDR_VAR 0 5
55022: PUSH
55023: LD_VAR 0 1
55027: PPUSH
55028: LD_INT 21
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PPUSH
55038: CALL_OW 72
55042: ST_TO_ADDR
// if not tmp then
55043: LD_VAR 0 5
55047: NOT
55048: IFFALSE 55052
// exit ;
55050: GO 55097
// for i in tmp do
55052: LD_ADDR_VAR 0 3
55056: PUSH
55057: LD_VAR 0 5
55061: PUSH
55062: FOR_IN
55063: IFFALSE 55095
// begin result := EnemyInRange ( i , 22 ) ;
55065: LD_ADDR_VAR 0 2
55069: PUSH
55070: LD_VAR 0 3
55074: PPUSH
55075: LD_INT 22
55077: PPUSH
55078: CALL 52766 0 2
55082: ST_TO_ADDR
// if result then
55083: LD_VAR 0 2
55087: IFFALSE 55093
// exit ;
55089: POP
55090: POP
55091: GO 55097
// end ;
55093: GO 55062
55095: POP
55096: POP
// end ;
55097: LD_VAR 0 2
55101: RET
// export function FilterByTag ( units , tag ) ; begin
55102: LD_INT 0
55104: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55105: LD_ADDR_VAR 0 3
55109: PUSH
55110: LD_VAR 0 1
55114: PPUSH
55115: LD_INT 120
55117: PUSH
55118: LD_VAR 0 2
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PPUSH
55127: CALL_OW 72
55131: ST_TO_ADDR
// end ;
55132: LD_VAR 0 3
55136: RET
// export function IsDriver ( un ) ; begin
55137: LD_INT 0
55139: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55140: LD_ADDR_VAR 0 2
55144: PUSH
55145: LD_VAR 0 1
55149: PUSH
55150: LD_INT 55
55152: PUSH
55153: EMPTY
55154: LIST
55155: PPUSH
55156: CALL_OW 69
55160: IN
55161: ST_TO_ADDR
// end ;
55162: LD_VAR 0 2
55166: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55167: LD_INT 0
55169: PPUSH
55170: PPUSH
// list := [ ] ;
55171: LD_ADDR_VAR 0 5
55175: PUSH
55176: EMPTY
55177: ST_TO_ADDR
// case d of 0 :
55178: LD_VAR 0 3
55182: PUSH
55183: LD_INT 0
55185: DOUBLE
55186: EQUAL
55187: IFTRUE 55191
55189: GO 55324
55191: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55192: LD_ADDR_VAR 0 5
55196: PUSH
55197: LD_VAR 0 1
55201: PUSH
55202: LD_INT 4
55204: MINUS
55205: PUSH
55206: LD_VAR 0 2
55210: PUSH
55211: LD_INT 4
55213: MINUS
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: PUSH
55223: LD_VAR 0 1
55227: PUSH
55228: LD_INT 3
55230: MINUS
55231: PUSH
55232: LD_VAR 0 2
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: PUSH
55245: LD_VAR 0 1
55249: PUSH
55250: LD_INT 4
55252: PLUS
55253: PUSH
55254: LD_VAR 0 2
55258: PUSH
55259: LD_INT 4
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: LIST
55266: PUSH
55267: LD_VAR 0 1
55271: PUSH
55272: LD_INT 3
55274: PLUS
55275: PUSH
55276: LD_VAR 0 2
55280: PUSH
55281: LD_INT 3
55283: PLUS
55284: PUSH
55285: LD_INT 5
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: PUSH
55293: LD_VAR 0 1
55297: PUSH
55298: LD_VAR 0 2
55302: PUSH
55303: LD_INT 4
55305: PLUS
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: ST_TO_ADDR
// end ; 1 :
55322: GO 56022
55324: LD_INT 1
55326: DOUBLE
55327: EQUAL
55328: IFTRUE 55332
55330: GO 55465
55332: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55333: LD_ADDR_VAR 0 5
55337: PUSH
55338: LD_VAR 0 1
55342: PUSH
55343: LD_VAR 0 2
55347: PUSH
55348: LD_INT 4
55350: MINUS
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: PUSH
55360: LD_VAR 0 1
55364: PUSH
55365: LD_INT 3
55367: MINUS
55368: PUSH
55369: LD_VAR 0 2
55373: PUSH
55374: LD_INT 3
55376: MINUS
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: PUSH
55386: LD_VAR 0 1
55390: PUSH
55391: LD_INT 4
55393: MINUS
55394: PUSH
55395: LD_VAR 0 2
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: PUSH
55408: LD_VAR 0 1
55412: PUSH
55413: LD_VAR 0 2
55417: PUSH
55418: LD_INT 3
55420: PLUS
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: PUSH
55430: LD_VAR 0 1
55434: PUSH
55435: LD_INT 4
55437: PLUS
55438: PUSH
55439: LD_VAR 0 2
55443: PUSH
55444: LD_INT 4
55446: PLUS
55447: PUSH
55448: LD_INT 5
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: LIST
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// end ; 2 :
55463: GO 56022
55465: LD_INT 2
55467: DOUBLE
55468: EQUAL
55469: IFTRUE 55473
55471: GO 55602
55473: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55474: LD_ADDR_VAR 0 5
55478: PUSH
55479: LD_VAR 0 1
55483: PUSH
55484: LD_VAR 0 2
55488: PUSH
55489: LD_INT 3
55491: MINUS
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: PUSH
55501: LD_VAR 0 1
55505: PUSH
55506: LD_INT 4
55508: PLUS
55509: PUSH
55510: LD_VAR 0 2
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: PUSH
55523: LD_VAR 0 1
55527: PUSH
55528: LD_VAR 0 2
55532: PUSH
55533: LD_INT 4
55535: PLUS
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: LIST
55544: PUSH
55545: LD_VAR 0 1
55549: PUSH
55550: LD_INT 3
55552: MINUS
55553: PUSH
55554: LD_VAR 0 2
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: PUSH
55567: LD_VAR 0 1
55571: PUSH
55572: LD_INT 4
55574: MINUS
55575: PUSH
55576: LD_VAR 0 2
55580: PUSH
55581: LD_INT 4
55583: MINUS
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: ST_TO_ADDR
// end ; 3 :
55600: GO 56022
55602: LD_INT 3
55604: DOUBLE
55605: EQUAL
55606: IFTRUE 55610
55608: GO 55743
55610: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55611: LD_ADDR_VAR 0 5
55615: PUSH
55616: LD_VAR 0 1
55620: PUSH
55621: LD_INT 3
55623: PLUS
55624: PUSH
55625: LD_VAR 0 2
55629: PUSH
55630: LD_INT 4
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: PUSH
55638: LD_VAR 0 1
55642: PUSH
55643: LD_INT 4
55645: PLUS
55646: PUSH
55647: LD_VAR 0 2
55651: PUSH
55652: LD_INT 4
55654: PLUS
55655: PUSH
55656: LD_INT 5
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: LIST
55663: PUSH
55664: LD_VAR 0 1
55668: PUSH
55669: LD_INT 4
55671: MINUS
55672: PUSH
55673: LD_VAR 0 2
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: LIST
55685: PUSH
55686: LD_VAR 0 1
55690: PUSH
55691: LD_VAR 0 2
55695: PUSH
55696: LD_INT 4
55698: MINUS
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: LIST
55707: PUSH
55708: LD_VAR 0 1
55712: PUSH
55713: LD_INT 3
55715: MINUS
55716: PUSH
55717: LD_VAR 0 2
55721: PUSH
55722: LD_INT 3
55724: MINUS
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: LIST
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// end ; 4 :
55741: GO 56022
55743: LD_INT 4
55745: DOUBLE
55746: EQUAL
55747: IFTRUE 55751
55749: GO 55884
55751: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55752: LD_ADDR_VAR 0 5
55756: PUSH
55757: LD_VAR 0 1
55761: PUSH
55762: LD_VAR 0 2
55766: PUSH
55767: LD_INT 4
55769: PLUS
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: PUSH
55779: LD_VAR 0 1
55783: PUSH
55784: LD_INT 3
55786: PLUS
55787: PUSH
55788: LD_VAR 0 2
55792: PUSH
55793: LD_INT 3
55795: PLUS
55796: PUSH
55797: LD_INT 5
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: PUSH
55805: LD_VAR 0 1
55809: PUSH
55810: LD_INT 4
55812: PLUS
55813: PUSH
55814: LD_VAR 0 2
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: PUSH
55827: LD_VAR 0 1
55831: PUSH
55832: LD_VAR 0 2
55836: PUSH
55837: LD_INT 3
55839: MINUS
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: LIST
55848: PUSH
55849: LD_VAR 0 1
55853: PUSH
55854: LD_INT 4
55856: MINUS
55857: PUSH
55858: LD_VAR 0 2
55862: PUSH
55863: LD_INT 4
55865: MINUS
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// end ; 5 :
55882: GO 56022
55884: LD_INT 5
55886: DOUBLE
55887: EQUAL
55888: IFTRUE 55892
55890: GO 56021
55892: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55893: LD_ADDR_VAR 0 5
55897: PUSH
55898: LD_VAR 0 1
55902: PUSH
55903: LD_INT 4
55905: MINUS
55906: PUSH
55907: LD_VAR 0 2
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: PUSH
55920: LD_VAR 0 1
55924: PUSH
55925: LD_VAR 0 2
55929: PUSH
55930: LD_INT 4
55932: MINUS
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: PUSH
55942: LD_VAR 0 1
55946: PUSH
55947: LD_INT 4
55949: PLUS
55950: PUSH
55951: LD_VAR 0 2
55955: PUSH
55956: LD_INT 4
55958: PLUS
55959: PUSH
55960: LD_INT 5
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: PUSH
55968: LD_VAR 0 1
55972: PUSH
55973: LD_INT 3
55975: PLUS
55976: PUSH
55977: LD_VAR 0 2
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: PUSH
55990: LD_VAR 0 1
55994: PUSH
55995: LD_VAR 0 2
55999: PUSH
56000: LD_INT 3
56002: PLUS
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: ST_TO_ADDR
// end ; end ;
56019: GO 56022
56021: POP
// result := list ;
56022: LD_ADDR_VAR 0 4
56026: PUSH
56027: LD_VAR 0 5
56031: ST_TO_ADDR
// end ;
56032: LD_VAR 0 4
56036: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56037: LD_INT 0
56039: PPUSH
56040: PPUSH
56041: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56042: LD_VAR 0 1
56046: NOT
56047: PUSH
56048: LD_VAR 0 2
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: LD_INT 4
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: IN
56071: NOT
56072: OR
56073: IFFALSE 56077
// exit ;
56075: GO 56169
// tmp := [ ] ;
56077: LD_ADDR_VAR 0 5
56081: PUSH
56082: EMPTY
56083: ST_TO_ADDR
// for i in units do
56084: LD_ADDR_VAR 0 4
56088: PUSH
56089: LD_VAR 0 1
56093: PUSH
56094: FOR_IN
56095: IFFALSE 56138
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56097: LD_ADDR_VAR 0 5
56101: PUSH
56102: LD_VAR 0 5
56106: PPUSH
56107: LD_VAR 0 5
56111: PUSH
56112: LD_INT 1
56114: PLUS
56115: PPUSH
56116: LD_VAR 0 4
56120: PPUSH
56121: LD_VAR 0 2
56125: PPUSH
56126: CALL_OW 259
56130: PPUSH
56131: CALL_OW 2
56135: ST_TO_ADDR
56136: GO 56094
56138: POP
56139: POP
// if not tmp then
56140: LD_VAR 0 5
56144: NOT
56145: IFFALSE 56149
// exit ;
56147: GO 56169
// result := SortListByListDesc ( units , tmp ) ;
56149: LD_ADDR_VAR 0 3
56153: PUSH
56154: LD_VAR 0 1
56158: PPUSH
56159: LD_VAR 0 5
56163: PPUSH
56164: CALL_OW 77
56168: ST_TO_ADDR
// end ;
56169: LD_VAR 0 3
56173: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56174: LD_INT 0
56176: PPUSH
56177: PPUSH
56178: PPUSH
// result := false ;
56179: LD_ADDR_VAR 0 3
56183: PUSH
56184: LD_INT 0
56186: ST_TO_ADDR
// x := GetX ( building ) ;
56187: LD_ADDR_VAR 0 4
56191: PUSH
56192: LD_VAR 0 2
56196: PPUSH
56197: CALL_OW 250
56201: ST_TO_ADDR
// y := GetY ( building ) ;
56202: LD_ADDR_VAR 0 5
56206: PUSH
56207: LD_VAR 0 2
56211: PPUSH
56212: CALL_OW 251
56216: ST_TO_ADDR
// if not building or not x or not y then
56217: LD_VAR 0 2
56221: NOT
56222: PUSH
56223: LD_VAR 0 4
56227: NOT
56228: OR
56229: PUSH
56230: LD_VAR 0 5
56234: NOT
56235: OR
56236: IFFALSE 56240
// exit ;
56238: GO 56332
// if GetTaskList ( unit ) then
56240: LD_VAR 0 1
56244: PPUSH
56245: CALL_OW 437
56249: IFFALSE 56332
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56251: LD_STRING e
56253: PUSH
56254: LD_VAR 0 1
56258: PPUSH
56259: CALL_OW 437
56263: PUSH
56264: LD_INT 1
56266: ARRAY
56267: PUSH
56268: LD_INT 1
56270: ARRAY
56271: EQUAL
56272: PUSH
56273: LD_VAR 0 4
56277: PUSH
56278: LD_VAR 0 1
56282: PPUSH
56283: CALL_OW 437
56287: PUSH
56288: LD_INT 1
56290: ARRAY
56291: PUSH
56292: LD_INT 2
56294: ARRAY
56295: EQUAL
56296: AND
56297: PUSH
56298: LD_VAR 0 5
56302: PUSH
56303: LD_VAR 0 1
56307: PPUSH
56308: CALL_OW 437
56312: PUSH
56313: LD_INT 1
56315: ARRAY
56316: PUSH
56317: LD_INT 3
56319: ARRAY
56320: EQUAL
56321: AND
56322: IFFALSE 56332
// result := true end ;
56324: LD_ADDR_VAR 0 3
56328: PUSH
56329: LD_INT 1
56331: ST_TO_ADDR
// end ;
56332: LD_VAR 0 3
56336: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56337: LD_INT 0
56339: PPUSH
// result := false ;
56340: LD_ADDR_VAR 0 4
56344: PUSH
56345: LD_INT 0
56347: ST_TO_ADDR
// if GetTaskList ( unit ) then
56348: LD_VAR 0 1
56352: PPUSH
56353: CALL_OW 437
56357: IFFALSE 56440
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56359: LD_STRING M
56361: PUSH
56362: LD_VAR 0 1
56366: PPUSH
56367: CALL_OW 437
56371: PUSH
56372: LD_INT 1
56374: ARRAY
56375: PUSH
56376: LD_INT 1
56378: ARRAY
56379: EQUAL
56380: PUSH
56381: LD_VAR 0 2
56385: PUSH
56386: LD_VAR 0 1
56390: PPUSH
56391: CALL_OW 437
56395: PUSH
56396: LD_INT 1
56398: ARRAY
56399: PUSH
56400: LD_INT 2
56402: ARRAY
56403: EQUAL
56404: AND
56405: PUSH
56406: LD_VAR 0 3
56410: PUSH
56411: LD_VAR 0 1
56415: PPUSH
56416: CALL_OW 437
56420: PUSH
56421: LD_INT 1
56423: ARRAY
56424: PUSH
56425: LD_INT 3
56427: ARRAY
56428: EQUAL
56429: AND
56430: IFFALSE 56440
// result := true ;
56432: LD_ADDR_VAR 0 4
56436: PUSH
56437: LD_INT 1
56439: ST_TO_ADDR
// end ; end ;
56440: LD_VAR 0 4
56444: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56445: LD_INT 0
56447: PPUSH
56448: PPUSH
56449: PPUSH
56450: PPUSH
// if not unit or not area then
56451: LD_VAR 0 1
56455: NOT
56456: PUSH
56457: LD_VAR 0 2
56461: NOT
56462: OR
56463: IFFALSE 56467
// exit ;
56465: GO 56631
// tmp := AreaToList ( area , i ) ;
56467: LD_ADDR_VAR 0 6
56471: PUSH
56472: LD_VAR 0 2
56476: PPUSH
56477: LD_VAR 0 5
56481: PPUSH
56482: CALL_OW 517
56486: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56487: LD_ADDR_VAR 0 5
56491: PUSH
56492: DOUBLE
56493: LD_INT 1
56495: DEC
56496: ST_TO_ADDR
56497: LD_VAR 0 6
56501: PUSH
56502: LD_INT 1
56504: ARRAY
56505: PUSH
56506: FOR_TO
56507: IFFALSE 56629
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56509: LD_ADDR_VAR 0 7
56513: PUSH
56514: LD_VAR 0 6
56518: PUSH
56519: LD_INT 1
56521: ARRAY
56522: PUSH
56523: LD_VAR 0 5
56527: ARRAY
56528: PUSH
56529: LD_VAR 0 6
56533: PUSH
56534: LD_INT 2
56536: ARRAY
56537: PUSH
56538: LD_VAR 0 5
56542: ARRAY
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56548: LD_VAR 0 7
56552: PUSH
56553: LD_INT 1
56555: ARRAY
56556: PPUSH
56557: LD_VAR 0 7
56561: PUSH
56562: LD_INT 2
56564: ARRAY
56565: PPUSH
56566: CALL_OW 428
56570: PUSH
56571: LD_INT 0
56573: EQUAL
56574: IFFALSE 56627
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56576: LD_VAR 0 1
56580: PPUSH
56581: LD_VAR 0 7
56585: PUSH
56586: LD_INT 1
56588: ARRAY
56589: PPUSH
56590: LD_VAR 0 7
56594: PUSH
56595: LD_INT 2
56597: ARRAY
56598: PPUSH
56599: LD_VAR 0 3
56603: PPUSH
56604: CALL_OW 48
// result := IsPlaced ( unit ) ;
56608: LD_ADDR_VAR 0 4
56612: PUSH
56613: LD_VAR 0 1
56617: PPUSH
56618: CALL_OW 305
56622: ST_TO_ADDR
// exit ;
56623: POP
56624: POP
56625: GO 56631
// end ; end ;
56627: GO 56506
56629: POP
56630: POP
// end ;
56631: LD_VAR 0 4
56635: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56636: LD_INT 0
56638: PPUSH
56639: PPUSH
56640: PPUSH
// if not side or side > 8 then
56641: LD_VAR 0 1
56645: NOT
56646: PUSH
56647: LD_VAR 0 1
56651: PUSH
56652: LD_INT 8
56654: GREATER
56655: OR
56656: IFFALSE 56660
// exit ;
56658: GO 56847
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56660: LD_ADDR_VAR 0 4
56664: PUSH
56665: LD_INT 22
56667: PUSH
56668: LD_VAR 0 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 21
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PPUSH
56691: CALL_OW 69
56695: ST_TO_ADDR
// if not tmp then
56696: LD_VAR 0 4
56700: NOT
56701: IFFALSE 56705
// exit ;
56703: GO 56847
// enable_addtolog := true ;
56705: LD_ADDR_OWVAR 81
56709: PUSH
56710: LD_INT 1
56712: ST_TO_ADDR
// AddToLog ( [ ) ;
56713: LD_STRING [
56715: PPUSH
56716: CALL_OW 561
// for i in tmp do
56720: LD_ADDR_VAR 0 3
56724: PUSH
56725: LD_VAR 0 4
56729: PUSH
56730: FOR_IN
56731: IFFALSE 56838
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56733: LD_STRING [
56735: PUSH
56736: LD_VAR 0 3
56740: PPUSH
56741: CALL_OW 266
56745: STR
56746: PUSH
56747: LD_STRING , 
56749: STR
56750: PUSH
56751: LD_VAR 0 3
56755: PPUSH
56756: CALL_OW 250
56760: STR
56761: PUSH
56762: LD_STRING , 
56764: STR
56765: PUSH
56766: LD_VAR 0 3
56770: PPUSH
56771: CALL_OW 251
56775: STR
56776: PUSH
56777: LD_STRING , 
56779: STR
56780: PUSH
56781: LD_VAR 0 3
56785: PPUSH
56786: CALL_OW 254
56790: STR
56791: PUSH
56792: LD_STRING , 
56794: STR
56795: PUSH
56796: LD_VAR 0 3
56800: PPUSH
56801: LD_INT 1
56803: PPUSH
56804: CALL_OW 268
56808: STR
56809: PUSH
56810: LD_STRING , 
56812: STR
56813: PUSH
56814: LD_VAR 0 3
56818: PPUSH
56819: LD_INT 2
56821: PPUSH
56822: CALL_OW 268
56826: STR
56827: PUSH
56828: LD_STRING ],
56830: STR
56831: PPUSH
56832: CALL_OW 561
// end ;
56836: GO 56730
56838: POP
56839: POP
// AddToLog ( ]; ) ;
56840: LD_STRING ];
56842: PPUSH
56843: CALL_OW 561
// end ;
56847: LD_VAR 0 2
56851: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56852: LD_INT 0
56854: PPUSH
56855: PPUSH
56856: PPUSH
56857: PPUSH
56858: PPUSH
// if not area or not rate or not max then
56859: LD_VAR 0 1
56863: NOT
56864: PUSH
56865: LD_VAR 0 2
56869: NOT
56870: OR
56871: PUSH
56872: LD_VAR 0 4
56876: NOT
56877: OR
56878: IFFALSE 56882
// exit ;
56880: GO 57071
// while 1 do
56882: LD_INT 1
56884: IFFALSE 57071
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56886: LD_ADDR_VAR 0 9
56890: PUSH
56891: LD_VAR 0 1
56895: PPUSH
56896: LD_INT 1
56898: PPUSH
56899: CALL_OW 287
56903: PUSH
56904: LD_INT 10
56906: MUL
56907: ST_TO_ADDR
// r := rate / 10 ;
56908: LD_ADDR_VAR 0 7
56912: PUSH
56913: LD_VAR 0 2
56917: PUSH
56918: LD_INT 10
56920: DIVREAL
56921: ST_TO_ADDR
// time := 1 1$00 ;
56922: LD_ADDR_VAR 0 8
56926: PUSH
56927: LD_INT 2100
56929: ST_TO_ADDR
// if amount < min then
56930: LD_VAR 0 9
56934: PUSH
56935: LD_VAR 0 3
56939: LESS
56940: IFFALSE 56958
// r := r * 2 else
56942: LD_ADDR_VAR 0 7
56946: PUSH
56947: LD_VAR 0 7
56951: PUSH
56952: LD_INT 2
56954: MUL
56955: ST_TO_ADDR
56956: GO 56984
// if amount > max then
56958: LD_VAR 0 9
56962: PUSH
56963: LD_VAR 0 4
56967: GREATER
56968: IFFALSE 56984
// r := r / 2 ;
56970: LD_ADDR_VAR 0 7
56974: PUSH
56975: LD_VAR 0 7
56979: PUSH
56980: LD_INT 2
56982: DIVREAL
56983: ST_TO_ADDR
// time := time / r ;
56984: LD_ADDR_VAR 0 8
56988: PUSH
56989: LD_VAR 0 8
56993: PUSH
56994: LD_VAR 0 7
56998: DIVREAL
56999: ST_TO_ADDR
// if time < 0 then
57000: LD_VAR 0 8
57004: PUSH
57005: LD_INT 0
57007: LESS
57008: IFFALSE 57025
// time := time * - 1 ;
57010: LD_ADDR_VAR 0 8
57014: PUSH
57015: LD_VAR 0 8
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: MUL
57024: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57025: LD_VAR 0 8
57029: PUSH
57030: LD_INT 35
57032: PPUSH
57033: LD_INT 875
57035: PPUSH
57036: CALL_OW 12
57040: PLUS
57041: PPUSH
57042: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57046: LD_INT 1
57048: PPUSH
57049: LD_INT 5
57051: PPUSH
57052: CALL_OW 12
57056: PPUSH
57057: LD_VAR 0 1
57061: PPUSH
57062: LD_INT 1
57064: PPUSH
57065: CALL_OW 55
// end ;
57069: GO 56882
// end ;
57071: LD_VAR 0 5
57075: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57076: LD_INT 0
57078: PPUSH
57079: PPUSH
57080: PPUSH
57081: PPUSH
57082: PPUSH
57083: PPUSH
57084: PPUSH
57085: PPUSH
// if not turrets or not factories then
57086: LD_VAR 0 1
57090: NOT
57091: PUSH
57092: LD_VAR 0 2
57096: NOT
57097: OR
57098: IFFALSE 57102
// exit ;
57100: GO 57409
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57102: LD_ADDR_VAR 0 10
57106: PUSH
57107: LD_INT 5
57109: PUSH
57110: LD_INT 6
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: LD_INT 4
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: LD_INT 5
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 24
57144: PUSH
57145: LD_INT 25
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 23
57154: PUSH
57155: LD_INT 27
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 42
57168: PUSH
57169: LD_INT 43
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 44
57178: PUSH
57179: LD_INT 46
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 45
57188: PUSH
57189: LD_INT 47
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: ST_TO_ADDR
// result := [ ] ;
57206: LD_ADDR_VAR 0 3
57210: PUSH
57211: EMPTY
57212: ST_TO_ADDR
// for i in turrets do
57213: LD_ADDR_VAR 0 4
57217: PUSH
57218: LD_VAR 0 1
57222: PUSH
57223: FOR_IN
57224: IFFALSE 57407
// begin nat := GetNation ( i ) ;
57226: LD_ADDR_VAR 0 7
57230: PUSH
57231: LD_VAR 0 4
57235: PPUSH
57236: CALL_OW 248
57240: ST_TO_ADDR
// weapon := 0 ;
57241: LD_ADDR_VAR 0 8
57245: PUSH
57246: LD_INT 0
57248: ST_TO_ADDR
// if not nat then
57249: LD_VAR 0 7
57253: NOT
57254: IFFALSE 57258
// continue ;
57256: GO 57223
// for j in list [ nat ] do
57258: LD_ADDR_VAR 0 5
57262: PUSH
57263: LD_VAR 0 10
57267: PUSH
57268: LD_VAR 0 7
57272: ARRAY
57273: PUSH
57274: FOR_IN
57275: IFFALSE 57316
// if GetBWeapon ( i ) = j [ 1 ] then
57277: LD_VAR 0 4
57281: PPUSH
57282: CALL_OW 269
57286: PUSH
57287: LD_VAR 0 5
57291: PUSH
57292: LD_INT 1
57294: ARRAY
57295: EQUAL
57296: IFFALSE 57314
// begin weapon := j [ 2 ] ;
57298: LD_ADDR_VAR 0 8
57302: PUSH
57303: LD_VAR 0 5
57307: PUSH
57308: LD_INT 2
57310: ARRAY
57311: ST_TO_ADDR
// break ;
57312: GO 57316
// end ;
57314: GO 57274
57316: POP
57317: POP
// if not weapon then
57318: LD_VAR 0 8
57322: NOT
57323: IFFALSE 57327
// continue ;
57325: GO 57223
// for k in factories do
57327: LD_ADDR_VAR 0 6
57331: PUSH
57332: LD_VAR 0 2
57336: PUSH
57337: FOR_IN
57338: IFFALSE 57403
// begin weapons := AvailableWeaponList ( k ) ;
57340: LD_ADDR_VAR 0 9
57344: PUSH
57345: LD_VAR 0 6
57349: PPUSH
57350: CALL_OW 478
57354: ST_TO_ADDR
// if not weapons then
57355: LD_VAR 0 9
57359: NOT
57360: IFFALSE 57364
// continue ;
57362: GO 57337
// if weapon in weapons then
57364: LD_VAR 0 8
57368: PUSH
57369: LD_VAR 0 9
57373: IN
57374: IFFALSE 57401
// begin result := [ i , weapon ] ;
57376: LD_ADDR_VAR 0 3
57380: PUSH
57381: LD_VAR 0 4
57385: PUSH
57386: LD_VAR 0 8
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: ST_TO_ADDR
// exit ;
57395: POP
57396: POP
57397: POP
57398: POP
57399: GO 57409
// end ; end ;
57401: GO 57337
57403: POP
57404: POP
// end ;
57405: GO 57223
57407: POP
57408: POP
// end ;
57409: LD_VAR 0 3
57413: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57414: LD_INT 0
57416: PPUSH
// if not side or side > 8 then
57417: LD_VAR 0 3
57421: NOT
57422: PUSH
57423: LD_VAR 0 3
57427: PUSH
57428: LD_INT 8
57430: GREATER
57431: OR
57432: IFFALSE 57436
// exit ;
57434: GO 57495
// if not range then
57436: LD_VAR 0 4
57440: NOT
57441: IFFALSE 57452
// range := - 12 ;
57443: LD_ADDR_VAR 0 4
57447: PUSH
57448: LD_INT 12
57450: NEG
57451: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57452: LD_VAR 0 1
57456: PPUSH
57457: LD_VAR 0 2
57461: PPUSH
57462: LD_VAR 0 3
57466: PPUSH
57467: LD_VAR 0 4
57471: PPUSH
57472: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57476: LD_VAR 0 1
57480: PPUSH
57481: LD_VAR 0 2
57485: PPUSH
57486: LD_VAR 0 3
57490: PPUSH
57491: CALL_OW 331
// end ;
57495: LD_VAR 0 5
57499: RET
// export function Video ( mode ) ; begin
57500: LD_INT 0
57502: PPUSH
// ingame_video = mode ;
57503: LD_ADDR_OWVAR 52
57507: PUSH
57508: LD_VAR 0 1
57512: ST_TO_ADDR
// interface_hidden = mode ;
57513: LD_ADDR_OWVAR 54
57517: PUSH
57518: LD_VAR 0 1
57522: ST_TO_ADDR
// end ;
57523: LD_VAR 0 2
57527: RET
// export function Join ( array , element ) ; begin
57528: LD_INT 0
57530: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57531: LD_ADDR_VAR 0 3
57535: PUSH
57536: LD_VAR 0 1
57540: PPUSH
57541: LD_VAR 0 1
57545: PUSH
57546: LD_INT 1
57548: PLUS
57549: PPUSH
57550: LD_VAR 0 2
57554: PPUSH
57555: CALL_OW 1
57559: ST_TO_ADDR
// end ;
57560: LD_VAR 0 3
57564: RET
// export function JoinUnion ( array , element ) ; begin
57565: LD_INT 0
57567: PPUSH
// result := array union element ;
57568: LD_ADDR_VAR 0 3
57572: PUSH
57573: LD_VAR 0 1
57577: PUSH
57578: LD_VAR 0 2
57582: UNION
57583: ST_TO_ADDR
// end ;
57584: LD_VAR 0 3
57588: RET
// export function GetBehemoths ( side ) ; begin
57589: LD_INT 0
57591: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
57592: LD_ADDR_VAR 0 2
57596: PUSH
57597: LD_INT 22
57599: PUSH
57600: LD_VAR 0 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 31
57611: PUSH
57612: LD_INT 25
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PPUSH
57623: CALL_OW 69
57627: ST_TO_ADDR
// end ;
57628: LD_VAR 0 2
57632: RET
// export function Shuffle ( array ) ; var i , index ; begin
57633: LD_INT 0
57635: PPUSH
57636: PPUSH
57637: PPUSH
// result := [ ] ;
57638: LD_ADDR_VAR 0 2
57642: PUSH
57643: EMPTY
57644: ST_TO_ADDR
// if not array then
57645: LD_VAR 0 1
57649: NOT
57650: IFFALSE 57654
// exit ;
57652: GO 57753
// Randomize ;
57654: CALL_OW 10
// for i = array downto 1 do
57658: LD_ADDR_VAR 0 3
57662: PUSH
57663: DOUBLE
57664: LD_VAR 0 1
57668: INC
57669: ST_TO_ADDR
57670: LD_INT 1
57672: PUSH
57673: FOR_DOWNTO
57674: IFFALSE 57751
// begin index := rand ( 1 , array ) ;
57676: LD_ADDR_VAR 0 4
57680: PUSH
57681: LD_INT 1
57683: PPUSH
57684: LD_VAR 0 1
57688: PPUSH
57689: CALL_OW 12
57693: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57694: LD_ADDR_VAR 0 2
57698: PUSH
57699: LD_VAR 0 2
57703: PPUSH
57704: LD_VAR 0 2
57708: PUSH
57709: LD_INT 1
57711: PLUS
57712: PPUSH
57713: LD_VAR 0 1
57717: PUSH
57718: LD_VAR 0 4
57722: ARRAY
57723: PPUSH
57724: CALL_OW 2
57728: ST_TO_ADDR
// array := Delete ( array , index ) ;
57729: LD_ADDR_VAR 0 1
57733: PUSH
57734: LD_VAR 0 1
57738: PPUSH
57739: LD_VAR 0 4
57743: PPUSH
57744: CALL_OW 3
57748: ST_TO_ADDR
// end ;
57749: GO 57673
57751: POP
57752: POP
// end ;
57753: LD_VAR 0 2
57757: RET
// export function GetBaseMaterials ( base ) ; begin
57758: LD_INT 0
57760: PPUSH
// result := [ 0 , 0 , 0 ] ;
57761: LD_ADDR_VAR 0 2
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: LIST
57779: ST_TO_ADDR
// if not base then
57780: LD_VAR 0 1
57784: NOT
57785: IFFALSE 57789
// exit ;
57787: GO 57838
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57789: LD_ADDR_VAR 0 2
57793: PUSH
57794: LD_VAR 0 1
57798: PPUSH
57799: LD_INT 1
57801: PPUSH
57802: CALL_OW 275
57806: PUSH
57807: LD_VAR 0 1
57811: PPUSH
57812: LD_INT 2
57814: PPUSH
57815: CALL_OW 275
57819: PUSH
57820: LD_VAR 0 1
57824: PPUSH
57825: LD_INT 3
57827: PPUSH
57828: CALL_OW 275
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: ST_TO_ADDR
// end ;
57838: LD_VAR 0 2
57842: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57843: LD_INT 0
57845: PPUSH
57846: PPUSH
// result := array ;
57847: LD_ADDR_VAR 0 3
57851: PUSH
57852: LD_VAR 0 1
57856: ST_TO_ADDR
// if size >= result then
57857: LD_VAR 0 2
57861: PUSH
57862: LD_VAR 0 3
57866: GREATEREQUAL
57867: IFFALSE 57871
// exit ;
57869: GO 57921
// if size then
57871: LD_VAR 0 2
57875: IFFALSE 57921
// for i := array downto size do
57877: LD_ADDR_VAR 0 4
57881: PUSH
57882: DOUBLE
57883: LD_VAR 0 1
57887: INC
57888: ST_TO_ADDR
57889: LD_VAR 0 2
57893: PUSH
57894: FOR_DOWNTO
57895: IFFALSE 57919
// result := Delete ( result , result ) ;
57897: LD_ADDR_VAR 0 3
57901: PUSH
57902: LD_VAR 0 3
57906: PPUSH
57907: LD_VAR 0 3
57911: PPUSH
57912: CALL_OW 3
57916: ST_TO_ADDR
57917: GO 57894
57919: POP
57920: POP
// end ;
57921: LD_VAR 0 3
57925: RET
// export function ComExit ( unit ) ; var tmp ; begin
57926: LD_INT 0
57928: PPUSH
57929: PPUSH
// if not IsInUnit ( unit ) then
57930: LD_VAR 0 1
57934: PPUSH
57935: CALL_OW 310
57939: NOT
57940: IFFALSE 57944
// exit ;
57942: GO 58004
// tmp := IsInUnit ( unit ) ;
57944: LD_ADDR_VAR 0 3
57948: PUSH
57949: LD_VAR 0 1
57953: PPUSH
57954: CALL_OW 310
57958: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57959: LD_VAR 0 3
57963: PPUSH
57964: CALL_OW 247
57968: PUSH
57969: LD_INT 2
57971: EQUAL
57972: IFFALSE 57985
// ComExitVehicle ( unit ) else
57974: LD_VAR 0 1
57978: PPUSH
57979: CALL_OW 121
57983: GO 57994
// ComExitBuilding ( unit ) ;
57985: LD_VAR 0 1
57989: PPUSH
57990: CALL_OW 122
// result := tmp ;
57994: LD_ADDR_VAR 0 2
57998: PUSH
57999: LD_VAR 0 3
58003: ST_TO_ADDR
// end ;
58004: LD_VAR 0 2
58008: RET
// export function ComExitAll ( units ) ; var i ; begin
58009: LD_INT 0
58011: PPUSH
58012: PPUSH
// if not units then
58013: LD_VAR 0 1
58017: NOT
58018: IFFALSE 58022
// exit ;
58020: GO 58048
// for i in units do
58022: LD_ADDR_VAR 0 3
58026: PUSH
58027: LD_VAR 0 1
58031: PUSH
58032: FOR_IN
58033: IFFALSE 58046
// ComExit ( i ) ;
58035: LD_VAR 0 3
58039: PPUSH
58040: CALL 57926 0 1
58044: GO 58032
58046: POP
58047: POP
// end ;
58048: LD_VAR 0 2
58052: RET
// export function ResetHc ; begin
58053: LD_INT 0
58055: PPUSH
// InitHc ;
58056: CALL_OW 19
// hc_importance := 0 ;
58060: LD_ADDR_OWVAR 32
58064: PUSH
58065: LD_INT 0
58067: ST_TO_ADDR
// end ;
58068: LD_VAR 0 1
58072: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58073: LD_INT 0
58075: PPUSH
58076: PPUSH
58077: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58078: LD_ADDR_VAR 0 6
58082: PUSH
58083: LD_VAR 0 1
58087: PUSH
58088: LD_VAR 0 3
58092: PLUS
58093: PUSH
58094: LD_INT 2
58096: DIV
58097: ST_TO_ADDR
// if _x < 0 then
58098: LD_VAR 0 6
58102: PUSH
58103: LD_INT 0
58105: LESS
58106: IFFALSE 58123
// _x := _x * - 1 ;
58108: LD_ADDR_VAR 0 6
58112: PUSH
58113: LD_VAR 0 6
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: MUL
58122: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58123: LD_ADDR_VAR 0 7
58127: PUSH
58128: LD_VAR 0 2
58132: PUSH
58133: LD_VAR 0 4
58137: PLUS
58138: PUSH
58139: LD_INT 2
58141: DIV
58142: ST_TO_ADDR
// if _y < 0 then
58143: LD_VAR 0 7
58147: PUSH
58148: LD_INT 0
58150: LESS
58151: IFFALSE 58168
// _y := _y * - 1 ;
58153: LD_ADDR_VAR 0 7
58157: PUSH
58158: LD_VAR 0 7
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: MUL
58167: ST_TO_ADDR
// result := [ _x , _y ] ;
58168: LD_ADDR_VAR 0 5
58172: PUSH
58173: LD_VAR 0 6
58177: PUSH
58178: LD_VAR 0 7
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// end ;
58187: LD_VAR 0 5
58191: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58192: LD_INT 0
58194: PPUSH
58195: PPUSH
58196: PPUSH
58197: PPUSH
// task := GetTaskList ( unit ) ;
58198: LD_ADDR_VAR 0 7
58202: PUSH
58203: LD_VAR 0 1
58207: PPUSH
58208: CALL_OW 437
58212: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58213: LD_VAR 0 7
58217: NOT
58218: PUSH
58219: LD_VAR 0 1
58223: PPUSH
58224: LD_VAR 0 2
58228: PPUSH
58229: CALL_OW 308
58233: NOT
58234: AND
58235: IFFALSE 58239
// exit ;
58237: GO 58357
// if IsInArea ( unit , area ) then
58239: LD_VAR 0 1
58243: PPUSH
58244: LD_VAR 0 2
58248: PPUSH
58249: CALL_OW 308
58253: IFFALSE 58271
// begin ComMoveToArea ( unit , goAway ) ;
58255: LD_VAR 0 1
58259: PPUSH
58260: LD_VAR 0 3
58264: PPUSH
58265: CALL_OW 113
// exit ;
58269: GO 58357
// end ; if task [ 1 ] [ 1 ] <> M then
58271: LD_VAR 0 7
58275: PUSH
58276: LD_INT 1
58278: ARRAY
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: PUSH
58284: LD_STRING M
58286: NONEQUAL
58287: IFFALSE 58291
// exit ;
58289: GO 58357
// x := task [ 1 ] [ 2 ] ;
58291: LD_ADDR_VAR 0 5
58295: PUSH
58296: LD_VAR 0 7
58300: PUSH
58301: LD_INT 1
58303: ARRAY
58304: PUSH
58305: LD_INT 2
58307: ARRAY
58308: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58309: LD_ADDR_VAR 0 6
58313: PUSH
58314: LD_VAR 0 7
58318: PUSH
58319: LD_INT 1
58321: ARRAY
58322: PUSH
58323: LD_INT 3
58325: ARRAY
58326: ST_TO_ADDR
// if InArea ( x , y , area ) then
58327: LD_VAR 0 5
58331: PPUSH
58332: LD_VAR 0 6
58336: PPUSH
58337: LD_VAR 0 2
58341: PPUSH
58342: CALL_OW 309
58346: IFFALSE 58357
// ComStop ( unit ) ;
58348: LD_VAR 0 1
58352: PPUSH
58353: CALL_OW 141
// end ;
58357: LD_VAR 0 4
58361: RET
// export function Abs ( value ) ; begin
58362: LD_INT 0
58364: PPUSH
// result := value ;
58365: LD_ADDR_VAR 0 2
58369: PUSH
58370: LD_VAR 0 1
58374: ST_TO_ADDR
// if value < 0 then
58375: LD_VAR 0 1
58379: PUSH
58380: LD_INT 0
58382: LESS
58383: IFFALSE 58400
// result := value * - 1 ;
58385: LD_ADDR_VAR 0 2
58389: PUSH
58390: LD_VAR 0 1
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: MUL
58399: ST_TO_ADDR
// end ;
58400: LD_VAR 0 2
58404: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58405: LD_INT 0
58407: PPUSH
58408: PPUSH
58409: PPUSH
58410: PPUSH
58411: PPUSH
58412: PPUSH
58413: PPUSH
58414: PPUSH
// if not unit or not building then
58415: LD_VAR 0 1
58419: NOT
58420: PUSH
58421: LD_VAR 0 2
58425: NOT
58426: OR
58427: IFFALSE 58431
// exit ;
58429: GO 58657
// x := GetX ( building ) ;
58431: LD_ADDR_VAR 0 4
58435: PUSH
58436: LD_VAR 0 2
58440: PPUSH
58441: CALL_OW 250
58445: ST_TO_ADDR
// y := GetY ( building ) ;
58446: LD_ADDR_VAR 0 6
58450: PUSH
58451: LD_VAR 0 2
58455: PPUSH
58456: CALL_OW 251
58460: ST_TO_ADDR
// d := GetDir ( building ) ;
58461: LD_ADDR_VAR 0 8
58465: PUSH
58466: LD_VAR 0 2
58470: PPUSH
58471: CALL_OW 254
58475: ST_TO_ADDR
// r := 4 ;
58476: LD_ADDR_VAR 0 9
58480: PUSH
58481: LD_INT 4
58483: ST_TO_ADDR
// for i := 1 to 5 do
58484: LD_ADDR_VAR 0 10
58488: PUSH
58489: DOUBLE
58490: LD_INT 1
58492: DEC
58493: ST_TO_ADDR
58494: LD_INT 5
58496: PUSH
58497: FOR_TO
58498: IFFALSE 58655
// begin _x := ShiftX ( x , d , r + i ) ;
58500: LD_ADDR_VAR 0 5
58504: PUSH
58505: LD_VAR 0 4
58509: PPUSH
58510: LD_VAR 0 8
58514: PPUSH
58515: LD_VAR 0 9
58519: PUSH
58520: LD_VAR 0 10
58524: PLUS
58525: PPUSH
58526: CALL_OW 272
58530: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58531: LD_ADDR_VAR 0 7
58535: PUSH
58536: LD_VAR 0 6
58540: PPUSH
58541: LD_VAR 0 8
58545: PPUSH
58546: LD_VAR 0 9
58550: PUSH
58551: LD_VAR 0 10
58555: PLUS
58556: PPUSH
58557: CALL_OW 273
58561: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58562: LD_VAR 0 5
58566: PPUSH
58567: LD_VAR 0 7
58571: PPUSH
58572: CALL_OW 488
58576: PUSH
58577: LD_VAR 0 5
58581: PPUSH
58582: LD_VAR 0 7
58586: PPUSH
58587: CALL_OW 428
58591: PPUSH
58592: CALL_OW 247
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: IN
58607: NOT
58608: AND
58609: IFFALSE 58653
// begin ComMoveXY ( unit , _x , _y ) ;
58611: LD_VAR 0 1
58615: PPUSH
58616: LD_VAR 0 5
58620: PPUSH
58621: LD_VAR 0 7
58625: PPUSH
58626: CALL_OW 111
// result := [ _x , _y ] ;
58630: LD_ADDR_VAR 0 3
58634: PUSH
58635: LD_VAR 0 5
58639: PUSH
58640: LD_VAR 0 7
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: ST_TO_ADDR
// exit ;
58649: POP
58650: POP
58651: GO 58657
// end ; end ;
58653: GO 58497
58655: POP
58656: POP
// end ;
58657: LD_VAR 0 3
58661: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58662: LD_INT 0
58664: PPUSH
58665: PPUSH
58666: PPUSH
// result := 0 ;
58667: LD_ADDR_VAR 0 3
58671: PUSH
58672: LD_INT 0
58674: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58675: LD_VAR 0 1
58679: PUSH
58680: LD_INT 0
58682: LESS
58683: PUSH
58684: LD_VAR 0 1
58688: PUSH
58689: LD_INT 8
58691: GREATER
58692: OR
58693: PUSH
58694: LD_VAR 0 2
58698: PUSH
58699: LD_INT 0
58701: LESS
58702: OR
58703: PUSH
58704: LD_VAR 0 2
58708: PUSH
58709: LD_INT 8
58711: GREATER
58712: OR
58713: IFFALSE 58717
// exit ;
58715: GO 58792
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58717: LD_ADDR_VAR 0 4
58721: PUSH
58722: LD_INT 22
58724: PUSH
58725: LD_VAR 0 2
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PPUSH
58734: CALL_OW 69
58738: PUSH
58739: FOR_IN
58740: IFFALSE 58790
// begin un := UnitShoot ( i ) ;
58742: LD_ADDR_VAR 0 5
58746: PUSH
58747: LD_VAR 0 4
58751: PPUSH
58752: CALL_OW 504
58756: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58757: LD_VAR 0 5
58761: PPUSH
58762: CALL_OW 255
58766: PUSH
58767: LD_VAR 0 1
58771: EQUAL
58772: IFFALSE 58788
// begin result := un ;
58774: LD_ADDR_VAR 0 3
58778: PUSH
58779: LD_VAR 0 5
58783: ST_TO_ADDR
// exit ;
58784: POP
58785: POP
58786: GO 58792
// end ; end ;
58788: GO 58739
58790: POP
58791: POP
// end ;
58792: LD_VAR 0 3
58796: RET
// export function GetCargoBay ( units ) ; begin
58797: LD_INT 0
58799: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58800: LD_ADDR_VAR 0 2
58804: PUSH
58805: LD_VAR 0 1
58809: PPUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 34
58815: PUSH
58816: LD_INT 12
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 34
58825: PUSH
58826: LD_INT 51
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 34
58835: PUSH
58836: LD_INT 32
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 34
58845: PUSH
58846: LD_EXP 12
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: PPUSH
58862: CALL_OW 72
58866: ST_TO_ADDR
// end ;
58867: LD_VAR 0 2
58871: RET
// export function Negate ( value ) ; begin
58872: LD_INT 0
58874: PPUSH
// result := not value ;
58875: LD_ADDR_VAR 0 2
58879: PUSH
58880: LD_VAR 0 1
58884: NOT
58885: ST_TO_ADDR
// end ;
58886: LD_VAR 0 2
58890: RET
// export function Inc ( value ) ; begin
58891: LD_INT 0
58893: PPUSH
// result := value + 1 ;
58894: LD_ADDR_VAR 0 2
58898: PUSH
58899: LD_VAR 0 1
58903: PUSH
58904: LD_INT 1
58906: PLUS
58907: ST_TO_ADDR
// end ;
58908: LD_VAR 0 2
58912: RET
// export function Dec ( value ) ; begin
58913: LD_INT 0
58915: PPUSH
// result := value - 1 ;
58916: LD_ADDR_VAR 0 2
58920: PUSH
58921: LD_VAR 0 1
58925: PUSH
58926: LD_INT 1
58928: MINUS
58929: ST_TO_ADDR
// end ;
58930: LD_VAR 0 2
58934: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58935: LD_INT 0
58937: PPUSH
58938: PPUSH
58939: PPUSH
58940: PPUSH
58941: PPUSH
58942: PPUSH
58943: PPUSH
58944: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58945: LD_VAR 0 1
58949: PPUSH
58950: LD_VAR 0 2
58954: PPUSH
58955: CALL_OW 488
58959: NOT
58960: PUSH
58961: LD_VAR 0 3
58965: PPUSH
58966: LD_VAR 0 4
58970: PPUSH
58971: CALL_OW 488
58975: NOT
58976: OR
58977: IFFALSE 58990
// begin result := - 1 ;
58979: LD_ADDR_VAR 0 5
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: ST_TO_ADDR
// exit ;
58988: GO 59225
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58990: LD_ADDR_VAR 0 12
58994: PUSH
58995: LD_VAR 0 1
58999: PPUSH
59000: LD_VAR 0 2
59004: PPUSH
59005: LD_VAR 0 3
59009: PPUSH
59010: LD_VAR 0 4
59014: PPUSH
59015: CALL 58073 0 4
59019: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59020: LD_ADDR_VAR 0 11
59024: PUSH
59025: LD_VAR 0 1
59029: PPUSH
59030: LD_VAR 0 2
59034: PPUSH
59035: LD_VAR 0 12
59039: PUSH
59040: LD_INT 1
59042: ARRAY
59043: PPUSH
59044: LD_VAR 0 12
59048: PUSH
59049: LD_INT 2
59051: ARRAY
59052: PPUSH
59053: CALL_OW 298
59057: ST_TO_ADDR
// distance := 9999 ;
59058: LD_ADDR_VAR 0 10
59062: PUSH
59063: LD_INT 9999
59065: ST_TO_ADDR
// for i := 0 to 5 do
59066: LD_ADDR_VAR 0 6
59070: PUSH
59071: DOUBLE
59072: LD_INT 0
59074: DEC
59075: ST_TO_ADDR
59076: LD_INT 5
59078: PUSH
59079: FOR_TO
59080: IFFALSE 59223
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59082: LD_ADDR_VAR 0 7
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: LD_VAR 0 6
59096: PPUSH
59097: LD_VAR 0 11
59101: PPUSH
59102: CALL_OW 272
59106: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59107: LD_ADDR_VAR 0 8
59111: PUSH
59112: LD_VAR 0 2
59116: PPUSH
59117: LD_VAR 0 6
59121: PPUSH
59122: LD_VAR 0 11
59126: PPUSH
59127: CALL_OW 273
59131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59132: LD_VAR 0 7
59136: PPUSH
59137: LD_VAR 0 8
59141: PPUSH
59142: CALL_OW 488
59146: NOT
59147: IFFALSE 59151
// continue ;
59149: GO 59079
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59151: LD_ADDR_VAR 0 9
59155: PUSH
59156: LD_VAR 0 12
59160: PUSH
59161: LD_INT 1
59163: ARRAY
59164: PPUSH
59165: LD_VAR 0 12
59169: PUSH
59170: LD_INT 2
59172: ARRAY
59173: PPUSH
59174: LD_VAR 0 7
59178: PPUSH
59179: LD_VAR 0 8
59183: PPUSH
59184: CALL_OW 298
59188: ST_TO_ADDR
// if tmp < distance then
59189: LD_VAR 0 9
59193: PUSH
59194: LD_VAR 0 10
59198: LESS
59199: IFFALSE 59221
// begin result := i ;
59201: LD_ADDR_VAR 0 5
59205: PUSH
59206: LD_VAR 0 6
59210: ST_TO_ADDR
// distance := tmp ;
59211: LD_ADDR_VAR 0 10
59215: PUSH
59216: LD_VAR 0 9
59220: ST_TO_ADDR
// end ; end ;
59221: GO 59079
59223: POP
59224: POP
// end ;
59225: LD_VAR 0 5
59229: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59230: LD_INT 0
59232: PPUSH
59233: PPUSH
// if not driver or not IsInUnit ( driver ) then
59234: LD_VAR 0 1
59238: NOT
59239: PUSH
59240: LD_VAR 0 1
59244: PPUSH
59245: CALL_OW 310
59249: NOT
59250: OR
59251: IFFALSE 59255
// exit ;
59253: GO 59345
// vehicle := IsInUnit ( driver ) ;
59255: LD_ADDR_VAR 0 3
59259: PUSH
59260: LD_VAR 0 1
59264: PPUSH
59265: CALL_OW 310
59269: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59270: LD_VAR 0 1
59274: PPUSH
59275: LD_STRING \
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: PUSH
59305: LD_STRING E
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_VAR 0 3
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PPUSH
59341: CALL_OW 446
// end ;
59345: LD_VAR 0 2
59349: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59350: LD_INT 0
59352: PPUSH
59353: PPUSH
// if not driver or not IsInUnit ( driver ) then
59354: LD_VAR 0 1
59358: NOT
59359: PUSH
59360: LD_VAR 0 1
59364: PPUSH
59365: CALL_OW 310
59369: NOT
59370: OR
59371: IFFALSE 59375
// exit ;
59373: GO 59465
// vehicle := IsInUnit ( driver ) ;
59375: LD_ADDR_VAR 0 3
59379: PUSH
59380: LD_VAR 0 1
59384: PPUSH
59385: CALL_OW 310
59389: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59390: LD_VAR 0 1
59394: PPUSH
59395: LD_STRING \
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: PUSH
59425: LD_STRING E
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_VAR 0 3
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PPUSH
59461: CALL_OW 447
// end ;
59465: LD_VAR 0 2
59469: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59470: LD_INT 0
59472: PPUSH
59473: PPUSH
59474: PPUSH
// tmp := [ ] ;
59475: LD_ADDR_VAR 0 5
59479: PUSH
59480: EMPTY
59481: ST_TO_ADDR
// for i in units do
59482: LD_ADDR_VAR 0 4
59486: PUSH
59487: LD_VAR 0 1
59491: PUSH
59492: FOR_IN
59493: IFFALSE 59531
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59495: LD_ADDR_VAR 0 5
59499: PUSH
59500: LD_VAR 0 5
59504: PPUSH
59505: LD_VAR 0 5
59509: PUSH
59510: LD_INT 1
59512: PLUS
59513: PPUSH
59514: LD_VAR 0 4
59518: PPUSH
59519: CALL_OW 256
59523: PPUSH
59524: CALL_OW 2
59528: ST_TO_ADDR
59529: GO 59492
59531: POP
59532: POP
// if not tmp then
59533: LD_VAR 0 5
59537: NOT
59538: IFFALSE 59542
// exit ;
59540: GO 59590
// if asc then
59542: LD_VAR 0 2
59546: IFFALSE 59570
// result := SortListByListAsc ( units , tmp ) else
59548: LD_ADDR_VAR 0 3
59552: PUSH
59553: LD_VAR 0 1
59557: PPUSH
59558: LD_VAR 0 5
59562: PPUSH
59563: CALL_OW 76
59567: ST_TO_ADDR
59568: GO 59590
// result := SortListByListDesc ( units , tmp ) ;
59570: LD_ADDR_VAR 0 3
59574: PUSH
59575: LD_VAR 0 1
59579: PPUSH
59580: LD_VAR 0 5
59584: PPUSH
59585: CALL_OW 77
59589: ST_TO_ADDR
// end ;
59590: LD_VAR 0 3
59594: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59595: LD_INT 0
59597: PPUSH
59598: PPUSH
// task := GetTaskList ( mech ) ;
59599: LD_ADDR_VAR 0 4
59603: PUSH
59604: LD_VAR 0 1
59608: PPUSH
59609: CALL_OW 437
59613: ST_TO_ADDR
// if not task then
59614: LD_VAR 0 4
59618: NOT
59619: IFFALSE 59623
// exit ;
59621: GO 59665
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59623: LD_ADDR_VAR 0 3
59627: PUSH
59628: LD_VAR 0 4
59632: PUSH
59633: LD_INT 1
59635: ARRAY
59636: PUSH
59637: LD_INT 1
59639: ARRAY
59640: PUSH
59641: LD_STRING r
59643: EQUAL
59644: PUSH
59645: LD_VAR 0 4
59649: PUSH
59650: LD_INT 1
59652: ARRAY
59653: PUSH
59654: LD_INT 4
59656: ARRAY
59657: PUSH
59658: LD_VAR 0 2
59662: EQUAL
59663: AND
59664: ST_TO_ADDR
// end ;
59665: LD_VAR 0 3
59669: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59670: LD_INT 0
59672: PPUSH
// SetDir ( unit , d ) ;
59673: LD_VAR 0 1
59677: PPUSH
59678: LD_VAR 0 4
59682: PPUSH
59683: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59687: LD_VAR 0 1
59691: PPUSH
59692: LD_VAR 0 2
59696: PPUSH
59697: LD_VAR 0 3
59701: PPUSH
59702: LD_VAR 0 5
59706: PPUSH
59707: CALL_OW 48
// end ;
59711: LD_VAR 0 6
59715: RET
// export function ToNaturalNumber ( number ) ; begin
59716: LD_INT 0
59718: PPUSH
// result := number div 1 ;
59719: LD_ADDR_VAR 0 2
59723: PUSH
59724: LD_VAR 0 1
59728: PUSH
59729: LD_INT 1
59731: DIV
59732: ST_TO_ADDR
// if number < 0 then
59733: LD_VAR 0 1
59737: PUSH
59738: LD_INT 0
59740: LESS
59741: IFFALSE 59751
// result := 0 ;
59743: LD_ADDR_VAR 0 2
59747: PUSH
59748: LD_INT 0
59750: ST_TO_ADDR
// end ;
59751: LD_VAR 0 2
59755: RET
// export function SortByClass ( units , class ) ; var un ; begin
59756: LD_INT 0
59758: PPUSH
59759: PPUSH
// if not units or not class then
59760: LD_VAR 0 1
59764: NOT
59765: PUSH
59766: LD_VAR 0 2
59770: NOT
59771: OR
59772: IFFALSE 59776
// exit ;
59774: GO 59871
// result := [ ] ;
59776: LD_ADDR_VAR 0 3
59780: PUSH
59781: EMPTY
59782: ST_TO_ADDR
// for un in units do
59783: LD_ADDR_VAR 0 4
59787: PUSH
59788: LD_VAR 0 1
59792: PUSH
59793: FOR_IN
59794: IFFALSE 59869
// if GetClass ( un ) = class then
59796: LD_VAR 0 4
59800: PPUSH
59801: CALL_OW 257
59805: PUSH
59806: LD_VAR 0 2
59810: EQUAL
59811: IFFALSE 59838
// result := Insert ( result , 1 , un ) else
59813: LD_ADDR_VAR 0 3
59817: PUSH
59818: LD_VAR 0 3
59822: PPUSH
59823: LD_INT 1
59825: PPUSH
59826: LD_VAR 0 4
59830: PPUSH
59831: CALL_OW 2
59835: ST_TO_ADDR
59836: GO 59867
// result := Replace ( result , result + 1 , un ) ;
59838: LD_ADDR_VAR 0 3
59842: PUSH
59843: LD_VAR 0 3
59847: PPUSH
59848: LD_VAR 0 3
59852: PUSH
59853: LD_INT 1
59855: PLUS
59856: PPUSH
59857: LD_VAR 0 4
59861: PPUSH
59862: CALL_OW 1
59866: ST_TO_ADDR
59867: GO 59793
59869: POP
59870: POP
// end ;
59871: LD_VAR 0 3
59875: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59876: LD_INT 0
59878: PPUSH
59879: PPUSH
59880: PPUSH
59881: PPUSH
59882: PPUSH
59883: PPUSH
59884: PPUSH
// result := [ ] ;
59885: LD_ADDR_VAR 0 4
59889: PUSH
59890: EMPTY
59891: ST_TO_ADDR
// if x - r < 0 then
59892: LD_VAR 0 1
59896: PUSH
59897: LD_VAR 0 3
59901: MINUS
59902: PUSH
59903: LD_INT 0
59905: LESS
59906: IFFALSE 59918
// min_x := 0 else
59908: LD_ADDR_VAR 0 8
59912: PUSH
59913: LD_INT 0
59915: ST_TO_ADDR
59916: GO 59934
// min_x := x - r ;
59918: LD_ADDR_VAR 0 8
59922: PUSH
59923: LD_VAR 0 1
59927: PUSH
59928: LD_VAR 0 3
59932: MINUS
59933: ST_TO_ADDR
// if y - r < 0 then
59934: LD_VAR 0 2
59938: PUSH
59939: LD_VAR 0 3
59943: MINUS
59944: PUSH
59945: LD_INT 0
59947: LESS
59948: IFFALSE 59960
// min_y := 0 else
59950: LD_ADDR_VAR 0 7
59954: PUSH
59955: LD_INT 0
59957: ST_TO_ADDR
59958: GO 59976
// min_y := y - r ;
59960: LD_ADDR_VAR 0 7
59964: PUSH
59965: LD_VAR 0 2
59969: PUSH
59970: LD_VAR 0 3
59974: MINUS
59975: ST_TO_ADDR
// max_x := x + r ;
59976: LD_ADDR_VAR 0 9
59980: PUSH
59981: LD_VAR 0 1
59985: PUSH
59986: LD_VAR 0 3
59990: PLUS
59991: ST_TO_ADDR
// max_y := y + r ;
59992: LD_ADDR_VAR 0 10
59996: PUSH
59997: LD_VAR 0 2
60001: PUSH
60002: LD_VAR 0 3
60006: PLUS
60007: ST_TO_ADDR
// for _x = min_x to max_x do
60008: LD_ADDR_VAR 0 5
60012: PUSH
60013: DOUBLE
60014: LD_VAR 0 8
60018: DEC
60019: ST_TO_ADDR
60020: LD_VAR 0 9
60024: PUSH
60025: FOR_TO
60026: IFFALSE 60127
// for _y = min_y to max_y do
60028: LD_ADDR_VAR 0 6
60032: PUSH
60033: DOUBLE
60034: LD_VAR 0 7
60038: DEC
60039: ST_TO_ADDR
60040: LD_VAR 0 10
60044: PUSH
60045: FOR_TO
60046: IFFALSE 60123
// begin if not ValidHex ( _x , _y ) then
60048: LD_VAR 0 5
60052: PPUSH
60053: LD_VAR 0 6
60057: PPUSH
60058: CALL_OW 488
60062: NOT
60063: IFFALSE 60067
// continue ;
60065: GO 60045
// if GetResourceTypeXY ( _x , _y ) then
60067: LD_VAR 0 5
60071: PPUSH
60072: LD_VAR 0 6
60076: PPUSH
60077: CALL_OW 283
60081: IFFALSE 60121
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60083: LD_ADDR_VAR 0 4
60087: PUSH
60088: LD_VAR 0 4
60092: PPUSH
60093: LD_VAR 0 4
60097: PUSH
60098: LD_INT 1
60100: PLUS
60101: PPUSH
60102: LD_VAR 0 5
60106: PUSH
60107: LD_VAR 0 6
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PPUSH
60116: CALL_OW 1
60120: ST_TO_ADDR
// end ;
60121: GO 60045
60123: POP
60124: POP
60125: GO 60025
60127: POP
60128: POP
// end ;
60129: LD_VAR 0 4
60133: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60134: LD_INT 0
60136: PPUSH
60137: PPUSH
60138: PPUSH
60139: PPUSH
60140: PPUSH
60141: PPUSH
60142: PPUSH
60143: PPUSH
// if not units then
60144: LD_VAR 0 1
60148: NOT
60149: IFFALSE 60153
// exit ;
60151: GO 60679
// result := UnitFilter ( units , [ f_ok ] ) ;
60153: LD_ADDR_VAR 0 3
60157: PUSH
60158: LD_VAR 0 1
60162: PPUSH
60163: LD_INT 50
60165: PUSH
60166: EMPTY
60167: LIST
60168: PPUSH
60169: CALL_OW 72
60173: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60174: LD_ADDR_VAR 0 8
60178: PUSH
60179: LD_VAR 0 1
60183: PUSH
60184: LD_INT 1
60186: ARRAY
60187: PPUSH
60188: CALL_OW 255
60192: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60193: LD_ADDR_VAR 0 10
60197: PUSH
60198: LD_INT 29
60200: PUSH
60201: LD_EXP 15
60205: PUSH
60206: LD_INT 49
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: ST_TO_ADDR
// if not result then
60214: LD_VAR 0 3
60218: NOT
60219: IFFALSE 60223
// exit ;
60221: GO 60679
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60223: LD_ADDR_VAR 0 5
60227: PUSH
60228: LD_INT 81
60230: PUSH
60231: LD_VAR 0 8
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PPUSH
60240: CALL_OW 69
60244: ST_TO_ADDR
// for i in result do
60245: LD_ADDR_VAR 0 4
60249: PUSH
60250: LD_VAR 0 3
60254: PUSH
60255: FOR_IN
60256: IFFALSE 60677
// begin tag := GetTag ( i ) + 1 ;
60258: LD_ADDR_VAR 0 9
60262: PUSH
60263: LD_VAR 0 4
60267: PPUSH
60268: CALL_OW 110
60272: PUSH
60273: LD_INT 1
60275: PLUS
60276: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60277: LD_ADDR_VAR 0 7
60281: PUSH
60282: LD_VAR 0 4
60286: PPUSH
60287: CALL_OW 250
60291: PPUSH
60292: LD_VAR 0 4
60296: PPUSH
60297: CALL_OW 251
60301: PPUSH
60302: LD_INT 6
60304: PPUSH
60305: CALL 59876 0 3
60309: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60310: LD_VAR 0 4
60314: PPUSH
60315: CALL_OW 247
60319: PUSH
60320: LD_INT 2
60322: EQUAL
60323: PUSH
60324: LD_VAR 0 7
60328: AND
60329: PUSH
60330: LD_VAR 0 4
60334: PPUSH
60335: CALL_OW 264
60339: PUSH
60340: LD_VAR 0 10
60344: IN
60345: NOT
60346: AND
60347: IFFALSE 60386
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60349: LD_VAR 0 4
60353: PPUSH
60354: LD_VAR 0 7
60358: PUSH
60359: LD_INT 1
60361: ARRAY
60362: PUSH
60363: LD_INT 1
60365: ARRAY
60366: PPUSH
60367: LD_VAR 0 7
60371: PUSH
60372: LD_INT 1
60374: ARRAY
60375: PUSH
60376: LD_INT 2
60378: ARRAY
60379: PPUSH
60380: CALL_OW 116
60384: GO 60675
// if path > tag then
60386: LD_VAR 0 2
60390: PUSH
60391: LD_VAR 0 9
60395: GREATER
60396: IFFALSE 60604
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60398: LD_ADDR_VAR 0 6
60402: PUSH
60403: LD_VAR 0 5
60407: PPUSH
60408: LD_INT 91
60410: PUSH
60411: LD_VAR 0 4
60415: PUSH
60416: LD_INT 8
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: LIST
60423: PPUSH
60424: CALL_OW 72
60428: ST_TO_ADDR
// if nearEnemy then
60429: LD_VAR 0 6
60433: IFFALSE 60502
// begin if GetWeapon ( i ) = ru_time_lapser then
60435: LD_VAR 0 4
60439: PPUSH
60440: CALL_OW 264
60444: PUSH
60445: LD_INT 49
60447: EQUAL
60448: IFFALSE 60476
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60450: LD_VAR 0 4
60454: PPUSH
60455: LD_VAR 0 6
60459: PPUSH
60460: LD_VAR 0 4
60464: PPUSH
60465: CALL_OW 74
60469: PPUSH
60470: CALL_OW 112
60474: GO 60500
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60476: LD_VAR 0 4
60480: PPUSH
60481: LD_VAR 0 6
60485: PPUSH
60486: LD_VAR 0 4
60490: PPUSH
60491: CALL_OW 74
60495: PPUSH
60496: CALL_OW 115
// end else
60500: GO 60602
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60502: LD_VAR 0 4
60506: PPUSH
60507: LD_VAR 0 2
60511: PUSH
60512: LD_VAR 0 9
60516: ARRAY
60517: PUSH
60518: LD_INT 1
60520: ARRAY
60521: PPUSH
60522: LD_VAR 0 2
60526: PUSH
60527: LD_VAR 0 9
60531: ARRAY
60532: PUSH
60533: LD_INT 2
60535: ARRAY
60536: PPUSH
60537: CALL_OW 297
60541: PUSH
60542: LD_INT 6
60544: GREATER
60545: IFFALSE 60588
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60547: LD_VAR 0 4
60551: PPUSH
60552: LD_VAR 0 2
60556: PUSH
60557: LD_VAR 0 9
60561: ARRAY
60562: PUSH
60563: LD_INT 1
60565: ARRAY
60566: PPUSH
60567: LD_VAR 0 2
60571: PUSH
60572: LD_VAR 0 9
60576: ARRAY
60577: PUSH
60578: LD_INT 2
60580: ARRAY
60581: PPUSH
60582: CALL_OW 114
60586: GO 60602
// SetTag ( i , tag ) ;
60588: LD_VAR 0 4
60592: PPUSH
60593: LD_VAR 0 9
60597: PPUSH
60598: CALL_OW 109
// end else
60602: GO 60675
// if enemy then
60604: LD_VAR 0 5
60608: IFFALSE 60675
// begin if GetWeapon ( i ) = ru_time_lapser then
60610: LD_VAR 0 4
60614: PPUSH
60615: CALL_OW 264
60619: PUSH
60620: LD_INT 49
60622: EQUAL
60623: IFFALSE 60651
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60625: LD_VAR 0 4
60629: PPUSH
60630: LD_VAR 0 5
60634: PPUSH
60635: LD_VAR 0 4
60639: PPUSH
60640: CALL_OW 74
60644: PPUSH
60645: CALL_OW 112
60649: GO 60675
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60651: LD_VAR 0 4
60655: PPUSH
60656: LD_VAR 0 5
60660: PPUSH
60661: LD_VAR 0 4
60665: PPUSH
60666: CALL_OW 74
60670: PPUSH
60671: CALL_OW 115
// end ; end ;
60675: GO 60255
60677: POP
60678: POP
// end ;
60679: LD_VAR 0 3
60683: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60684: LD_INT 0
60686: PPUSH
60687: PPUSH
60688: PPUSH
// if not unit or IsInUnit ( unit ) then
60689: LD_VAR 0 1
60693: NOT
60694: PUSH
60695: LD_VAR 0 1
60699: PPUSH
60700: CALL_OW 310
60704: OR
60705: IFFALSE 60709
// exit ;
60707: GO 60800
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60709: LD_ADDR_VAR 0 4
60713: PUSH
60714: LD_VAR 0 1
60718: PPUSH
60719: CALL_OW 250
60723: PPUSH
60724: LD_VAR 0 2
60728: PPUSH
60729: LD_INT 1
60731: PPUSH
60732: CALL_OW 272
60736: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60737: LD_ADDR_VAR 0 5
60741: PUSH
60742: LD_VAR 0 1
60746: PPUSH
60747: CALL_OW 251
60751: PPUSH
60752: LD_VAR 0 2
60756: PPUSH
60757: LD_INT 1
60759: PPUSH
60760: CALL_OW 273
60764: ST_TO_ADDR
// if ValidHex ( x , y ) then
60765: LD_VAR 0 4
60769: PPUSH
60770: LD_VAR 0 5
60774: PPUSH
60775: CALL_OW 488
60779: IFFALSE 60800
// ComTurnXY ( unit , x , y ) ;
60781: LD_VAR 0 1
60785: PPUSH
60786: LD_VAR 0 4
60790: PPUSH
60791: LD_VAR 0 5
60795: PPUSH
60796: CALL_OW 118
// end ;
60800: LD_VAR 0 3
60804: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60805: LD_INT 0
60807: PPUSH
60808: PPUSH
// result := false ;
60809: LD_ADDR_VAR 0 3
60813: PUSH
60814: LD_INT 0
60816: ST_TO_ADDR
// if not units then
60817: LD_VAR 0 2
60821: NOT
60822: IFFALSE 60826
// exit ;
60824: GO 60871
// for i in units do
60826: LD_ADDR_VAR 0 4
60830: PUSH
60831: LD_VAR 0 2
60835: PUSH
60836: FOR_IN
60837: IFFALSE 60869
// if See ( side , i ) then
60839: LD_VAR 0 1
60843: PPUSH
60844: LD_VAR 0 4
60848: PPUSH
60849: CALL_OW 292
60853: IFFALSE 60867
// begin result := true ;
60855: LD_ADDR_VAR 0 3
60859: PUSH
60860: LD_INT 1
60862: ST_TO_ADDR
// exit ;
60863: POP
60864: POP
60865: GO 60871
// end ;
60867: GO 60836
60869: POP
60870: POP
// end ;
60871: LD_VAR 0 3
60875: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60876: LD_INT 0
60878: PPUSH
60879: PPUSH
60880: PPUSH
60881: PPUSH
// if not unit or not points then
60882: LD_VAR 0 1
60886: NOT
60887: PUSH
60888: LD_VAR 0 2
60892: NOT
60893: OR
60894: IFFALSE 60898
// exit ;
60896: GO 60988
// dist := 99999 ;
60898: LD_ADDR_VAR 0 5
60902: PUSH
60903: LD_INT 99999
60905: ST_TO_ADDR
// for i in points do
60906: LD_ADDR_VAR 0 4
60910: PUSH
60911: LD_VAR 0 2
60915: PUSH
60916: FOR_IN
60917: IFFALSE 60986
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60919: LD_ADDR_VAR 0 6
60923: PUSH
60924: LD_VAR 0 1
60928: PPUSH
60929: LD_VAR 0 4
60933: PUSH
60934: LD_INT 1
60936: ARRAY
60937: PPUSH
60938: LD_VAR 0 4
60942: PUSH
60943: LD_INT 2
60945: ARRAY
60946: PPUSH
60947: CALL_OW 297
60951: ST_TO_ADDR
// if tmpDist < dist then
60952: LD_VAR 0 6
60956: PUSH
60957: LD_VAR 0 5
60961: LESS
60962: IFFALSE 60984
// begin result := i ;
60964: LD_ADDR_VAR 0 3
60968: PUSH
60969: LD_VAR 0 4
60973: ST_TO_ADDR
// dist := tmpDist ;
60974: LD_ADDR_VAR 0 5
60978: PUSH
60979: LD_VAR 0 6
60983: ST_TO_ADDR
// end ; end ;
60984: GO 60916
60986: POP
60987: POP
// end ;
60988: LD_VAR 0 3
60992: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
60993: LD_INT 0
60995: PPUSH
// uc_side := side ;
60996: LD_ADDR_OWVAR 20
61000: PUSH
61001: LD_VAR 0 1
61005: ST_TO_ADDR
// uc_nation := 3 ;
61006: LD_ADDR_OWVAR 21
61010: PUSH
61011: LD_INT 3
61013: ST_TO_ADDR
// vc_chassis := 25 ;
61014: LD_ADDR_OWVAR 37
61018: PUSH
61019: LD_INT 25
61021: ST_TO_ADDR
// vc_engine := engine_siberite ;
61022: LD_ADDR_OWVAR 39
61026: PUSH
61027: LD_INT 3
61029: ST_TO_ADDR
// vc_control := control_computer ;
61030: LD_ADDR_OWVAR 38
61034: PUSH
61035: LD_INT 3
61037: ST_TO_ADDR
// vc_weapon := 59 ;
61038: LD_ADDR_OWVAR 40
61042: PUSH
61043: LD_INT 59
61045: ST_TO_ADDR
// result := CreateVehicle ;
61046: LD_ADDR_VAR 0 5
61050: PUSH
61051: CALL_OW 45
61055: ST_TO_ADDR
// SetDir ( result , d ) ;
61056: LD_VAR 0 5
61060: PPUSH
61061: LD_VAR 0 4
61065: PPUSH
61066: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61070: LD_VAR 0 5
61074: PPUSH
61075: LD_VAR 0 2
61079: PPUSH
61080: LD_VAR 0 3
61084: PPUSH
61085: LD_INT 0
61087: PPUSH
61088: CALL_OW 48
// end ;
61092: LD_VAR 0 5
61096: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61097: LD_INT 0
61099: PPUSH
61100: PPUSH
61101: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61102: LD_ADDR_VAR 0 2
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61125: LD_VAR 0 1
61129: NOT
61130: PUSH
61131: LD_VAR 0 1
61135: PPUSH
61136: CALL_OW 264
61140: PUSH
61141: LD_INT 12
61143: PUSH
61144: LD_INT 51
61146: PUSH
61147: LD_INT 32
61149: PUSH
61150: LD_EXP 12
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: IN
61161: NOT
61162: OR
61163: IFFALSE 61167
// exit ;
61165: GO 61265
// for i := 1 to 3 do
61167: LD_ADDR_VAR 0 3
61171: PUSH
61172: DOUBLE
61173: LD_INT 1
61175: DEC
61176: ST_TO_ADDR
61177: LD_INT 3
61179: PUSH
61180: FOR_TO
61181: IFFALSE 61263
// begin tmp := GetCargo ( cargo , i ) ;
61183: LD_ADDR_VAR 0 4
61187: PUSH
61188: LD_VAR 0 1
61192: PPUSH
61193: LD_VAR 0 3
61197: PPUSH
61198: CALL_OW 289
61202: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61203: LD_ADDR_VAR 0 2
61207: PUSH
61208: LD_VAR 0 2
61212: PPUSH
61213: LD_VAR 0 3
61217: PPUSH
61218: LD_VAR 0 4
61222: PPUSH
61223: CALL_OW 1
61227: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61228: LD_ADDR_VAR 0 2
61232: PUSH
61233: LD_VAR 0 2
61237: PPUSH
61238: LD_INT 4
61240: PPUSH
61241: LD_VAR 0 2
61245: PUSH
61246: LD_INT 4
61248: ARRAY
61249: PUSH
61250: LD_VAR 0 4
61254: PLUS
61255: PPUSH
61256: CALL_OW 1
61260: ST_TO_ADDR
// end ;
61261: GO 61180
61263: POP
61264: POP
// end ;
61265: LD_VAR 0 2
61269: RET
// export function Length ( array ) ; begin
61270: LD_INT 0
61272: PPUSH
// result := array + 0 ;
61273: LD_ADDR_VAR 0 2
61277: PUSH
61278: LD_VAR 0 1
61282: PUSH
61283: LD_INT 0
61285: PLUS
61286: ST_TO_ADDR
// end ;
61287: LD_VAR 0 2
61291: RET
// export function PrepareArray ( array ) ; begin
61292: LD_INT 0
61294: PPUSH
// result := array diff 0 ;
61295: LD_ADDR_VAR 0 2
61299: PUSH
61300: LD_VAR 0 1
61304: PUSH
61305: LD_INT 0
61307: DIFF
61308: ST_TO_ADDR
// if not result [ 1 ] then
61309: LD_VAR 0 2
61313: PUSH
61314: LD_INT 1
61316: ARRAY
61317: NOT
61318: IFFALSE 61338
// result := Delete ( result , 1 ) ;
61320: LD_ADDR_VAR 0 2
61324: PUSH
61325: LD_VAR 0 2
61329: PPUSH
61330: LD_INT 1
61332: PPUSH
61333: CALL_OW 3
61337: ST_TO_ADDR
// end ;
61338: LD_VAR 0 2
61342: RET
