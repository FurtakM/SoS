// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// end ; end_of_file
  11: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
  12: LD_INT 0
  14: PPUSH
  15: PPUSH
  16: PPUSH
  17: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  18: LD_VAR 0 1
  22: PPUSH
  23: CALL_OW 264
  27: PUSH
  28: LD_EXP 11
  32: EQUAL
  33: IFFALSE 105
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  35: LD_INT 68
  37: PPUSH
  38: LD_VAR 0 1
  42: PPUSH
  43: CALL_OW 255
  47: PPUSH
  48: CALL_OW 321
  52: PUSH
  53: LD_INT 2
  55: EQUAL
  56: IFFALSE 68
// eff := 70 else
  58: LD_ADDR_VAR 0 4
  62: PUSH
  63: LD_INT 70
  65: ST_TO_ADDR
  66: GO 76
// eff := 30 ;
  68: LD_ADDR_VAR 0 4
  72: PUSH
  73: LD_INT 30
  75: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  76: LD_VAR 0 1
  80: PPUSH
  81: CALL_OW 250
  85: PPUSH
  86: LD_VAR 0 1
  90: PPUSH
  91: CALL_OW 251
  95: PPUSH
  96: LD_VAR 0 4
 100: PPUSH
 101: CALL_OW 495
// end ; end ;
 105: LD_VAR 0 2
 109: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 110: LD_INT 0
 112: PPUSH
// end ;
 113: LD_VAR 0 4
 117: RET
// export function SOS_Command ( cmd ) ; begin
 118: LD_INT 0
 120: PPUSH
// end ;
 121: LD_VAR 0 2
 125: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 126: LD_INT 0
 128: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 129: LD_VAR 0 1
 133: PUSH
 134: LD_INT 254
 136: EQUAL
 137: PUSH
 138: LD_VAR 0 2
 142: PPUSH
 143: CALL_OW 264
 147: PUSH
 148: LD_EXP 9
 152: EQUAL
 153: AND
 154: PUSH
 155: LD_VAR 0 3
 159: PPUSH
 160: CALL_OW 263
 164: PUSH
 165: LD_INT 3
 167: EQUAL
 168: AND
 169: IFFALSE 185
// HackDestroyVehicle ( unit , selectedUnit ) ;
 171: LD_VAR 0 2
 175: PPUSH
 176: LD_VAR 0 3
 180: PPUSH
 181: CALL 1723 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 185: LD_VAR 0 1
 189: PUSH
 190: LD_INT 255
 192: EQUAL
 193: PUSH
 194: LD_VAR 0 2
 198: PPUSH
 199: CALL_OW 264
 203: PUSH
 204: LD_INT 14
 206: PUSH
 207: LD_INT 53
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: IN
 214: AND
 215: PUSH
 216: LD_VAR 0 4
 220: PPUSH
 221: LD_VAR 0 5
 225: PPUSH
 226: CALL_OW 488
 230: AND
 231: IFFALSE 255
// CutTreeXYR ( unit , x , y , 12 ) ;
 233: LD_VAR 0 2
 237: PPUSH
 238: LD_VAR 0 4
 242: PPUSH
 243: LD_VAR 0 5
 247: PPUSH
 248: LD_INT 12
 250: PPUSH
 251: CALL 289 0 4
// if cmd = 256 then
 255: LD_VAR 0 1
 259: PUSH
 260: LD_INT 256
 262: EQUAL
 263: IFFALSE 284
// display_strings := [ x , y ] ;
 265: LD_ADDR_OWVAR 47
 269: PUSH
 270: LD_VAR 0 4
 274: PUSH
 275: LD_VAR 0 5
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// end ;
 284: LD_VAR 0 6
 288: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 289: LD_INT 0
 291: PPUSH
 292: PPUSH
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 300: LD_VAR 0 1
 304: NOT
 305: PUSH
 306: LD_VAR 0 2
 310: PPUSH
 311: LD_VAR 0 3
 315: PPUSH
 316: CALL_OW 488
 320: NOT
 321: OR
 322: PUSH
 323: LD_VAR 0 4
 327: NOT
 328: OR
 329: IFFALSE 333
// exit ;
 331: GO 673
// list := [ ] ;
 333: LD_ADDR_VAR 0 13
 337: PUSH
 338: EMPTY
 339: ST_TO_ADDR
// if x - r < 0 then
 340: LD_VAR 0 2
 344: PUSH
 345: LD_VAR 0 4
 349: MINUS
 350: PUSH
 351: LD_INT 0
 353: LESS
 354: IFFALSE 366
// min_x := 0 else
 356: LD_ADDR_VAR 0 7
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
 364: GO 382
// min_x := x - r ;
 366: LD_ADDR_VAR 0 7
 370: PUSH
 371: LD_VAR 0 2
 375: PUSH
 376: LD_VAR 0 4
 380: MINUS
 381: ST_TO_ADDR
// if y - r < 0 then
 382: LD_VAR 0 3
 386: PUSH
 387: LD_VAR 0 4
 391: MINUS
 392: PUSH
 393: LD_INT 0
 395: LESS
 396: IFFALSE 408
// min_y := 0 else
 398: LD_ADDR_VAR 0 8
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
 406: GO 424
// min_y := y - r ;
 408: LD_ADDR_VAR 0 8
 412: PUSH
 413: LD_VAR 0 3
 417: PUSH
 418: LD_VAR 0 4
 422: MINUS
 423: ST_TO_ADDR
// max_x := x + r ;
 424: LD_ADDR_VAR 0 9
 428: PUSH
 429: LD_VAR 0 2
 433: PUSH
 434: LD_VAR 0 4
 438: PLUS
 439: ST_TO_ADDR
// max_y := y + r ;
 440: LD_ADDR_VAR 0 10
 444: PUSH
 445: LD_VAR 0 3
 449: PUSH
 450: LD_VAR 0 4
 454: PLUS
 455: ST_TO_ADDR
// for _x = min_x to max_x do
 456: LD_ADDR_VAR 0 11
 460: PUSH
 461: DOUBLE
 462: LD_VAR 0 7
 466: DEC
 467: ST_TO_ADDR
 468: LD_VAR 0 9
 472: PUSH
 473: FOR_TO
 474: IFFALSE 591
// for _y = min_y to max_y do
 476: LD_ADDR_VAR 0 12
 480: PUSH
 481: DOUBLE
 482: LD_VAR 0 8
 486: DEC
 487: ST_TO_ADDR
 488: LD_VAR 0 10
 492: PUSH
 493: FOR_TO
 494: IFFALSE 587
// begin if not ValidHex ( _x , _y ) then
 496: LD_VAR 0 11
 500: PPUSH
 501: LD_VAR 0 12
 505: PPUSH
 506: CALL_OW 488
 510: NOT
 511: IFFALSE 515
// continue ;
 513: GO 493
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 515: LD_VAR 0 11
 519: PPUSH
 520: LD_VAR 0 12
 524: PPUSH
 525: CALL_OW 351
 529: PUSH
 530: LD_VAR 0 11
 534: PPUSH
 535: LD_VAR 0 12
 539: PPUSH
 540: CALL_OW 554
 544: AND
 545: IFFALSE 585
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
 547: LD_ADDR_VAR 0 13
 551: PUSH
 552: LD_VAR 0 13
 556: PPUSH
 557: LD_VAR 0 13
 561: PUSH
 562: LD_INT 1
 564: PLUS
 565: PPUSH
 566: LD_VAR 0 11
 570: PUSH
 571: LD_VAR 0 12
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PPUSH
 580: CALL_OW 2
 584: ST_TO_ADDR
// end ;
 585: GO 493
 587: POP
 588: POP
 589: GO 473
 591: POP
 592: POP
// if not list then
 593: LD_VAR 0 13
 597: NOT
 598: IFFALSE 602
// exit ;
 600: GO 673
// for i in list do
 602: LD_ADDR_VAR 0 6
 606: PUSH
 607: LD_VAR 0 13
 611: PUSH
 612: FOR_IN
 613: IFFALSE 671
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
 615: LD_VAR 0 1
 619: PPUSH
 620: LD_STRING M
 622: PUSH
 623: LD_VAR 0 6
 627: PUSH
 628: LD_INT 1
 630: ARRAY
 631: PUSH
 632: LD_VAR 0 6
 636: PUSH
 637: LD_INT 2
 639: ARRAY
 640: PUSH
 641: LD_INT 0
 643: PUSH
 644: LD_INT 0
 646: PUSH
 647: LD_INT 0
 649: PUSH
 650: LD_INT 0
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: PUSH
 662: EMPTY
 663: LIST
 664: PPUSH
 665: CALL_OW 447
 669: GO 612
 671: POP
 672: POP
// end ;
 673: LD_VAR 0 5
 677: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
 678: LD_EXP 1
 682: NOT
 683: IFFALSE 733
 685: GO 687
 687: DISABLE
// begin initHack := true ;
 688: LD_ADDR_EXP 1
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// hackTanks := [ ] ;
 696: LD_ADDR_EXP 2
 700: PUSH
 701: EMPTY
 702: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
 703: LD_ADDR_EXP 3
 707: PUSH
 708: EMPTY
 709: ST_TO_ADDR
// hackLimit := 3 ;
 710: LD_ADDR_EXP 4
 714: PUSH
 715: LD_INT 3
 717: ST_TO_ADDR
// hackDist := 12 ;
 718: LD_ADDR_EXP 5
 722: PUSH
 723: LD_INT 12
 725: ST_TO_ADDR
// hackCounter := [ ] ;
 726: LD_ADDR_EXP 6
 730: PUSH
 731: EMPTY
 732: ST_TO_ADDR
// end ;
 733: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
 734: LD_EXP 1
 738: PUSH
 739: LD_INT 34
 741: PUSH
 742: LD_EXP 9
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PPUSH
 751: CALL_OW 69
 755: AND
 756: IFFALSE 1011
 758: GO 760
 760: DISABLE
 761: LD_INT 0
 763: PPUSH
 764: PPUSH
// begin enable ;
 765: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
 766: LD_ADDR_VAR 0 1
 770: PUSH
 771: LD_INT 34
 773: PUSH
 774: LD_EXP 9
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: PUSH
 788: FOR_IN
 789: IFFALSE 1009
// begin if not i in hackTanks then
 791: LD_VAR 0 1
 795: PUSH
 796: LD_EXP 2
 800: IN
 801: NOT
 802: IFFALSE 885
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
 804: LD_ADDR_EXP 2
 808: PUSH
 809: LD_EXP 2
 813: PPUSH
 814: LD_EXP 2
 818: PUSH
 819: LD_INT 1
 821: PLUS
 822: PPUSH
 823: LD_VAR 0 1
 827: PPUSH
 828: CALL_OW 1
 832: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
 833: LD_ADDR_EXP 3
 837: PUSH
 838: LD_EXP 3
 842: PPUSH
 843: LD_EXP 3
 847: PUSH
 848: LD_INT 1
 850: PLUS
 851: PPUSH
 852: EMPTY
 853: PPUSH
 854: CALL_OW 1
 858: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
 859: LD_ADDR_EXP 6
 863: PUSH
 864: LD_EXP 6
 868: PPUSH
 869: LD_EXP 6
 873: PUSH
 874: LD_INT 1
 876: PLUS
 877: PPUSH
 878: EMPTY
 879: PPUSH
 880: CALL_OW 1
 884: ST_TO_ADDR
// end ; if not IsOk ( i ) then
 885: LD_VAR 0 1
 889: PPUSH
 890: CALL_OW 302
 894: NOT
 895: IFFALSE 908
// begin HackUnlinkAll ( i ) ;
 897: LD_VAR 0 1
 901: PPUSH
 902: CALL 1014 0 1
// continue ;
 906: GO 788
// end ; HackCheckCapturedStatus ( i ) ;
 908: LD_VAR 0 1
 912: PPUSH
 913: CALL 1457 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
 917: LD_ADDR_VAR 0 2
 921: PUSH
 922: LD_INT 81
 924: PUSH
 925: LD_VAR 0 1
 929: PPUSH
 930: CALL_OW 255
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 33
 941: PUSH
 942: LD_INT 3
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 91
 951: PUSH
 952: LD_VAR 0 1
 956: PUSH
 957: LD_EXP 5
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_INT 50
 969: PUSH
 970: EMPTY
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: PPUSH
 979: CALL_OW 69
 983: ST_TO_ADDR
// if not tmp then
 984: LD_VAR 0 2
 988: NOT
 989: IFFALSE 993
// continue ;
 991: GO 788
// HackLink ( i , tmp ) ;
 993: LD_VAR 0 1
 997: PPUSH
 998: LD_VAR 0 2
1002: PPUSH
1003: CALL 1150 0 2
// end ;
1007: GO 788
1009: POP
1010: POP
// end ;
1011: PPOPN 2
1013: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1014: LD_INT 0
1016: PPUSH
1017: PPUSH
1018: PPUSH
// if not hack in hackTanks then
1019: LD_VAR 0 1
1023: PUSH
1024: LD_EXP 2
1028: IN
1029: NOT
1030: IFFALSE 1034
// exit ;
1032: GO 1145
// index := GetElementIndex ( hackTanks , hack ) ;
1034: LD_ADDR_VAR 0 4
1038: PUSH
1039: LD_EXP 2
1043: PPUSH
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL 19391 0 2
1053: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1054: LD_EXP 3
1058: PUSH
1059: LD_VAR 0 4
1063: ARRAY
1064: IFFALSE 1145
// begin for i in hackTanksCaptured [ index ] do
1066: LD_ADDR_VAR 0 3
1070: PUSH
1071: LD_EXP 3
1075: PUSH
1076: LD_VAR 0 4
1080: ARRAY
1081: PUSH
1082: FOR_IN
1083: IFFALSE 1109
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1085: LD_VAR 0 3
1089: PUSH
1090: LD_INT 1
1092: ARRAY
1093: PPUSH
1094: LD_VAR 0 3
1098: PUSH
1099: LD_INT 2
1101: ARRAY
1102: PPUSH
1103: CALL_OW 235
1107: GO 1082
1109: POP
1110: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1111: LD_ADDR_EXP 3
1115: PUSH
1116: LD_EXP 3
1120: PPUSH
1121: LD_VAR 0 4
1125: PPUSH
1126: EMPTY
1127: PPUSH
1128: CALL_OW 1
1132: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1133: LD_VAR 0 1
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 505
// end ; end ;
1145: LD_VAR 0 2
1149: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1150: LD_INT 0
1152: PPUSH
1153: PPUSH
1154: PPUSH
// if not hack in hackTanks or not vehicles then
1155: LD_VAR 0 1
1159: PUSH
1160: LD_EXP 2
1164: IN
1165: NOT
1166: PUSH
1167: LD_VAR 0 2
1171: NOT
1172: OR
1173: IFFALSE 1177
// exit ;
1175: GO 1452
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1177: LD_ADDR_VAR 0 2
1181: PUSH
1182: LD_VAR 0 1
1186: PPUSH
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: CALL 20041 0 4
1202: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1203: LD_ADDR_VAR 0 5
1207: PUSH
1208: LD_EXP 2
1212: PPUSH
1213: LD_VAR 0 1
1217: PPUSH
1218: CALL 19391 0 2
1222: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1223: LD_EXP 3
1227: PUSH
1228: LD_VAR 0 5
1232: ARRAY
1233: PUSH
1234: LD_EXP 4
1238: LESS
1239: IFFALSE 1428
// begin for i := 1 to vehicles do
1241: LD_ADDR_VAR 0 4
1245: PUSH
1246: DOUBLE
1247: LD_INT 1
1249: DEC
1250: ST_TO_ADDR
1251: LD_VAR 0 2
1255: PUSH
1256: FOR_TO
1257: IFFALSE 1426
// begin if hackTanksCaptured [ index ] = hackLimit then
1259: LD_EXP 3
1263: PUSH
1264: LD_VAR 0 5
1268: ARRAY
1269: PUSH
1270: LD_EXP 4
1274: EQUAL
1275: IFFALSE 1279
// break ;
1277: GO 1426
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1279: LD_ADDR_EXP 6
1283: PUSH
1284: LD_EXP 6
1288: PPUSH
1289: LD_VAR 0 5
1293: PPUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_VAR 0 5
1303: ARRAY
1304: PUSH
1305: LD_INT 1
1307: PLUS
1308: PPUSH
1309: CALL_OW 1
1313: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1314: LD_ADDR_EXP 3
1318: PUSH
1319: LD_EXP 3
1323: PPUSH
1324: LD_VAR 0 5
1328: PUSH
1329: LD_EXP 3
1333: PUSH
1334: LD_VAR 0 5
1338: ARRAY
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PPUSH
1348: LD_VAR 0 2
1352: PUSH
1353: LD_VAR 0 4
1357: ARRAY
1358: PUSH
1359: LD_VAR 0 2
1363: PUSH
1364: LD_VAR 0 4
1368: ARRAY
1369: PPUSH
1370: CALL_OW 255
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PPUSH
1379: CALL 19606 0 3
1383: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1384: LD_VAR 0 2
1388: PUSH
1389: LD_VAR 0 4
1393: ARRAY
1394: PPUSH
1395: LD_VAR 0 1
1399: PPUSH
1400: CALL_OW 255
1404: PPUSH
1405: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1409: LD_VAR 0 2
1413: PUSH
1414: LD_VAR 0 4
1418: ARRAY
1419: PPUSH
1420: CALL_OW 141
// end ;
1424: GO 1256
1426: POP
1427: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1428: LD_VAR 0 1
1432: PPUSH
1433: LD_EXP 3
1437: PUSH
1438: LD_VAR 0 5
1442: ARRAY
1443: PUSH
1444: LD_INT 0
1446: PLUS
1447: PPUSH
1448: CALL_OW 505
// end ;
1452: LD_VAR 0 3
1456: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1457: LD_INT 0
1459: PPUSH
1460: PPUSH
1461: PPUSH
1462: PPUSH
// if not hack in hackTanks then
1463: LD_VAR 0 1
1467: PUSH
1468: LD_EXP 2
1472: IN
1473: NOT
1474: IFFALSE 1478
// exit ;
1476: GO 1718
// index := GetElementIndex ( hackTanks , hack ) ;
1478: LD_ADDR_VAR 0 4
1482: PUSH
1483: LD_EXP 2
1487: PPUSH
1488: LD_VAR 0 1
1492: PPUSH
1493: CALL 19391 0 2
1497: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1498: LD_ADDR_VAR 0 3
1502: PUSH
1503: DOUBLE
1504: LD_EXP 3
1508: PUSH
1509: LD_VAR 0 4
1513: ARRAY
1514: INC
1515: ST_TO_ADDR
1516: LD_INT 1
1518: PUSH
1519: FOR_DOWNTO
1520: IFFALSE 1692
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1522: LD_ADDR_VAR 0 5
1526: PUSH
1527: LD_EXP 3
1531: PUSH
1532: LD_VAR 0 4
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 3
1542: ARRAY
1543: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1544: LD_VAR 0 5
1548: PUSH
1549: LD_INT 1
1551: ARRAY
1552: PPUSH
1553: CALL_OW 302
1557: NOT
1558: PUSH
1559: LD_VAR 0 5
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: CALL_OW 255
1572: PUSH
1573: LD_VAR 0 1
1577: PPUSH
1578: CALL_OW 255
1582: NONEQUAL
1583: OR
1584: IFFALSE 1690
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
1586: LD_VAR 0 5
1590: PUSH
1591: LD_INT 1
1593: ARRAY
1594: PPUSH
1595: CALL_OW 305
1599: PUSH
1600: LD_VAR 0 5
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PPUSH
1609: CALL_OW 255
1613: PUSH
1614: LD_VAR 0 1
1618: PPUSH
1619: CALL_OW 255
1623: EQUAL
1624: AND
1625: IFFALSE 1649
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
1627: LD_VAR 0 5
1631: PUSH
1632: LD_INT 1
1634: ARRAY
1635: PPUSH
1636: LD_VAR 0 5
1640: PUSH
1641: LD_INT 2
1643: ARRAY
1644: PPUSH
1645: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
1649: LD_ADDR_EXP 3
1653: PUSH
1654: LD_EXP 3
1658: PPUSH
1659: LD_VAR 0 4
1663: PPUSH
1664: LD_EXP 3
1668: PUSH
1669: LD_VAR 0 4
1673: ARRAY
1674: PPUSH
1675: LD_VAR 0 3
1679: PPUSH
1680: CALL_OW 3
1684: PPUSH
1685: CALL_OW 1
1689: ST_TO_ADDR
// end ; end ;
1690: GO 1519
1692: POP
1693: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1694: LD_VAR 0 1
1698: PPUSH
1699: LD_EXP 3
1703: PUSH
1704: LD_VAR 0 4
1708: ARRAY
1709: PUSH
1710: LD_INT 0
1712: PLUS
1713: PPUSH
1714: CALL_OW 505
// end ;
1718: LD_VAR 0 2
1722: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
1727: PPUSH
1728: PPUSH
// if not hack in hackTanks then
1729: LD_VAR 0 1
1733: PUSH
1734: LD_EXP 2
1738: IN
1739: NOT
1740: IFFALSE 1744
// exit ;
1742: GO 1829
// index := GetElementIndex ( hackTanks , hack ) ;
1744: LD_ADDR_VAR 0 5
1748: PUSH
1749: LD_EXP 2
1753: PPUSH
1754: LD_VAR 0 1
1758: PPUSH
1759: CALL 19391 0 2
1763: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
1764: LD_ADDR_VAR 0 4
1768: PUSH
1769: DOUBLE
1770: LD_INT 1
1772: DEC
1773: ST_TO_ADDR
1774: LD_EXP 3
1778: PUSH
1779: LD_VAR 0 5
1783: ARRAY
1784: PUSH
1785: FOR_TO
1786: IFFALSE 1827
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
1788: LD_EXP 3
1792: PUSH
1793: LD_VAR 0 5
1797: ARRAY
1798: PUSH
1799: LD_VAR 0 4
1803: ARRAY
1804: PUSH
1805: LD_INT 1
1807: ARRAY
1808: PUSH
1809: LD_VAR 0 2
1813: EQUAL
1814: IFFALSE 1825
// KillUnit ( vehicle ) ;
1816: LD_VAR 0 2
1820: PPUSH
1821: CALL_OW 66
1825: GO 1785
1827: POP
1828: POP
// end ; end_of_file
1829: LD_VAR 0 3
1833: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
1834: LD_INT 0
1836: PPUSH
// ar_crane := 88 ;
1837: LD_ADDR_EXP 13
1841: PUSH
1842: LD_INT 88
1844: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1845: LD_ADDR_EXP 8
1849: PUSH
1850: LD_INT 89
1852: ST_TO_ADDR
// us_hack := 99 ;
1853: LD_ADDR_EXP 9
1857: PUSH
1858: LD_INT 99
1860: ST_TO_ADDR
// us_artillery := 97 ;
1861: LD_ADDR_EXP 10
1865: PUSH
1866: LD_INT 97
1868: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1869: LD_ADDR_EXP 11
1873: PUSH
1874: LD_INT 91
1876: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
1877: LD_ADDR_EXP 12
1881: PUSH
1882: LD_INT 92
1884: ST_TO_ADDR
// ru_radar := 98 ;
1885: LD_ADDR_EXP 7
1889: PUSH
1890: LD_INT 98
1892: ST_TO_ADDR
// tech_Artillery := 80 ;
1893: LD_ADDR_EXP 14
1897: PUSH
1898: LD_INT 80
1900: ST_TO_ADDR
// tech_RadMat := 81 ;
1901: LD_ADDR_EXP 15
1905: PUSH
1906: LD_INT 81
1908: ST_TO_ADDR
// tech_BasicTools := 82 ;
1909: LD_ADDR_EXP 16
1913: PUSH
1914: LD_INT 82
1916: ST_TO_ADDR
// tech_Cargo := 83 ;
1917: LD_ADDR_EXP 17
1921: PUSH
1922: LD_INT 83
1924: ST_TO_ADDR
// tech_Track := 84 ;
1925: LD_ADDR_EXP 18
1929: PUSH
1930: LD_INT 84
1932: ST_TO_ADDR
// tech_Crane := 85 ;
1933: LD_ADDR_EXP 19
1937: PUSH
1938: LD_INT 85
1940: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1941: LD_ADDR_EXP 20
1945: PUSH
1946: LD_INT 86
1948: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1949: LD_ADDR_EXP 21
1953: PUSH
1954: LD_INT 87
1956: ST_TO_ADDR
// end ;
1957: LD_VAR 0 1
1961: RET
// every 1 do
1962: GO 1964
1964: DISABLE
// InitGlobalVariables ; end_of_file
1965: CALL 1834 0 0
1969: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
1970: LD_VAR 0 1
1974: PPUSH
1975: LD_VAR 0 2
1979: PPUSH
1980: LD_VAR 0 3
1984: PPUSH
1985: LD_VAR 0 4
1989: PPUSH
1990: LD_VAR 0 5
1994: PPUSH
1995: CALL 126 0 5
// end ;
1999: PPOPN 5
2001: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
2002: LD_VAR 0 2
2006: PUSH
2007: LD_INT 100
2009: EQUAL
2010: IFFALSE 2959
// begin if not StreamModeActive then
2012: LD_EXP 22
2016: NOT
2017: IFFALSE 2027
// StreamModeActive := true ;
2019: LD_ADDR_EXP 22
2023: PUSH
2024: LD_INT 1
2026: ST_TO_ADDR
// if p3 = 0 then
2027: LD_VAR 0 3
2031: PUSH
2032: LD_INT 0
2034: EQUAL
2035: IFFALSE 2041
// InitStreamMode ;
2037: CALL 3192 0 0
// if p3 = 1 then
2041: LD_VAR 0 3
2045: PUSH
2046: LD_INT 1
2048: EQUAL
2049: IFFALSE 2059
// sRocket := true ;
2051: LD_ADDR_EXP 27
2055: PUSH
2056: LD_INT 1
2058: ST_TO_ADDR
// if p3 = 2 then
2059: LD_VAR 0 3
2063: PUSH
2064: LD_INT 2
2066: EQUAL
2067: IFFALSE 2077
// sSpeed := true ;
2069: LD_ADDR_EXP 26
2073: PUSH
2074: LD_INT 1
2076: ST_TO_ADDR
// if p3 = 3 then
2077: LD_VAR 0 3
2081: PUSH
2082: LD_INT 3
2084: EQUAL
2085: IFFALSE 2095
// sEngine := true ;
2087: LD_ADDR_EXP 28
2091: PUSH
2092: LD_INT 1
2094: ST_TO_ADDR
// if p3 = 4 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 4
2102: EQUAL
2103: IFFALSE 2113
// sSpec := true ;
2105: LD_ADDR_EXP 25
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// if p3 = 5 then
2113: LD_VAR 0 3
2117: PUSH
2118: LD_INT 5
2120: EQUAL
2121: IFFALSE 2131
// sLevel := true ;
2123: LD_ADDR_EXP 29
2127: PUSH
2128: LD_INT 1
2130: ST_TO_ADDR
// if p3 = 6 then
2131: LD_VAR 0 3
2135: PUSH
2136: LD_INT 6
2138: EQUAL
2139: IFFALSE 2149
// sArmoury := true ;
2141: LD_ADDR_EXP 30
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// if p3 = 7 then
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 7
2156: EQUAL
2157: IFFALSE 2167
// sRadar := true ;
2159: LD_ADDR_EXP 31
2163: PUSH
2164: LD_INT 1
2166: ST_TO_ADDR
// if p3 = 8 then
2167: LD_VAR 0 3
2171: PUSH
2172: LD_INT 8
2174: EQUAL
2175: IFFALSE 2185
// sBunker := true ;
2177: LD_ADDR_EXP 32
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// if p3 = 9 then
2185: LD_VAR 0 3
2189: PUSH
2190: LD_INT 9
2192: EQUAL
2193: IFFALSE 2203
// sHack := true ;
2195: LD_ADDR_EXP 33
2199: PUSH
2200: LD_INT 1
2202: ST_TO_ADDR
// if p3 = 10 then
2203: LD_VAR 0 3
2207: PUSH
2208: LD_INT 10
2210: EQUAL
2211: IFFALSE 2221
// sFire := true ;
2213: LD_ADDR_EXP 34
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// if p3 = 11 then
2221: LD_VAR 0 3
2225: PUSH
2226: LD_INT 11
2228: EQUAL
2229: IFFALSE 2239
// sRefresh := true ;
2231: LD_ADDR_EXP 35
2235: PUSH
2236: LD_INT 1
2238: ST_TO_ADDR
// if p3 = 12 then
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 12
2246: EQUAL
2247: IFFALSE 2257
// sExp := true ;
2249: LD_ADDR_EXP 36
2253: PUSH
2254: LD_INT 1
2256: ST_TO_ADDR
// if p3 = 13 then
2257: LD_VAR 0 3
2261: PUSH
2262: LD_INT 13
2264: EQUAL
2265: IFFALSE 2275
// sDepot := true ;
2267: LD_ADDR_EXP 37
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// if p3 = 14 then
2275: LD_VAR 0 3
2279: PUSH
2280: LD_INT 14
2282: EQUAL
2283: IFFALSE 2293
// sFlag := true ;
2285: LD_ADDR_EXP 38
2289: PUSH
2290: LD_INT 1
2292: ST_TO_ADDR
// if p3 = 15 then
2293: LD_VAR 0 3
2297: PUSH
2298: LD_INT 15
2300: EQUAL
2301: IFFALSE 2311
// sKamikadze := true ;
2303: LD_ADDR_EXP 46
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// if p3 = 16 then
2311: LD_VAR 0 3
2315: PUSH
2316: LD_INT 16
2318: EQUAL
2319: IFFALSE 2329
// sTroll := true ;
2321: LD_ADDR_EXP 47
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// if p3 = 17 then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 17
2336: EQUAL
2337: IFFALSE 2347
// sSlow := true ;
2339: LD_ADDR_EXP 48
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// if p3 = 18 then
2347: LD_VAR 0 3
2351: PUSH
2352: LD_INT 18
2354: EQUAL
2355: IFFALSE 2365
// sLack := true ;
2357: LD_ADDR_EXP 49
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// if p3 = 19 then
2365: LD_VAR 0 3
2369: PUSH
2370: LD_INT 19
2372: EQUAL
2373: IFFALSE 2383
// sTank := true ;
2375: LD_ADDR_EXP 51
2379: PUSH
2380: LD_INT 1
2382: ST_TO_ADDR
// if p3 = 20 then
2383: LD_VAR 0 3
2387: PUSH
2388: LD_INT 20
2390: EQUAL
2391: IFFALSE 2401
// sRemote := true ;
2393: LD_ADDR_EXP 52
2397: PUSH
2398: LD_INT 1
2400: ST_TO_ADDR
// if p3 = 21 then
2401: LD_VAR 0 3
2405: PUSH
2406: LD_INT 21
2408: EQUAL
2409: IFFALSE 2419
// sPowell := true ;
2411: LD_ADDR_EXP 53
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// if p3 = 22 then
2419: LD_VAR 0 3
2423: PUSH
2424: LD_INT 22
2426: EQUAL
2427: IFFALSE 2437
// sTeleport := true ;
2429: LD_ADDR_EXP 56
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// if p3 = 23 then
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 23
2444: EQUAL
2445: IFFALSE 2455
// sOilTower := true ;
2447: LD_ADDR_EXP 58
2451: PUSH
2452: LD_INT 1
2454: ST_TO_ADDR
// if p3 = 24 then
2455: LD_VAR 0 3
2459: PUSH
2460: LD_INT 24
2462: EQUAL
2463: IFFALSE 2473
// sShovel := true ;
2465: LD_ADDR_EXP 59
2469: PUSH
2470: LD_INT 1
2472: ST_TO_ADDR
// if p3 = 25 then
2473: LD_VAR 0 3
2477: PUSH
2478: LD_INT 25
2480: EQUAL
2481: IFFALSE 2491
// sSheik := true ;
2483: LD_ADDR_EXP 60
2487: PUSH
2488: LD_INT 1
2490: ST_TO_ADDR
// if p3 = 26 then
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 26
2498: EQUAL
2499: IFFALSE 2509
// sEarthquake := true ;
2501: LD_ADDR_EXP 62
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// if p3 = 27 then
2509: LD_VAR 0 3
2513: PUSH
2514: LD_INT 27
2516: EQUAL
2517: IFFALSE 2527
// sAI := true ;
2519: LD_ADDR_EXP 63
2523: PUSH
2524: LD_INT 1
2526: ST_TO_ADDR
// if p3 = 28 then
2527: LD_VAR 0 3
2531: PUSH
2532: LD_INT 28
2534: EQUAL
2535: IFFALSE 2545
// sCargo := true ;
2537: LD_ADDR_EXP 66
2541: PUSH
2542: LD_INT 1
2544: ST_TO_ADDR
// if p3 = 29 then
2545: LD_VAR 0 3
2549: PUSH
2550: LD_INT 29
2552: EQUAL
2553: IFFALSE 2563
// sDLaser := true ;
2555: LD_ADDR_EXP 67
2559: PUSH
2560: LD_INT 1
2562: ST_TO_ADDR
// if p3 = 30 then
2563: LD_VAR 0 3
2567: PUSH
2568: LD_INT 30
2570: EQUAL
2571: IFFALSE 2581
// sExchange := true ;
2573: LD_ADDR_EXP 68
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// if p3 = 31 then
2581: LD_VAR 0 3
2585: PUSH
2586: LD_INT 31
2588: EQUAL
2589: IFFALSE 2599
// sFac := true ;
2591: LD_ADDR_EXP 69
2595: PUSH
2596: LD_INT 1
2598: ST_TO_ADDR
// if p3 = 32 then
2599: LD_VAR 0 3
2603: PUSH
2604: LD_INT 32
2606: EQUAL
2607: IFFALSE 2617
// sPower := true ;
2609: LD_ADDR_EXP 70
2613: PUSH
2614: LD_INT 1
2616: ST_TO_ADDR
// if p3 = 33 then
2617: LD_VAR 0 3
2621: PUSH
2622: LD_INT 33
2624: EQUAL
2625: IFFALSE 2635
// sRandom := true ;
2627: LD_ADDR_EXP 71
2631: PUSH
2632: LD_INT 1
2634: ST_TO_ADDR
// if p3 = 34 then
2635: LD_VAR 0 3
2639: PUSH
2640: LD_INT 34
2642: EQUAL
2643: IFFALSE 2653
// sShield := true ;
2645: LD_ADDR_EXP 72
2649: PUSH
2650: LD_INT 1
2652: ST_TO_ADDR
// if p3 = 35 then
2653: LD_VAR 0 3
2657: PUSH
2658: LD_INT 35
2660: EQUAL
2661: IFFALSE 2671
// sTime := true ;
2663: LD_ADDR_EXP 73
2667: PUSH
2668: LD_INT 1
2670: ST_TO_ADDR
// if p3 = 36 then
2671: LD_VAR 0 3
2675: PUSH
2676: LD_INT 36
2678: EQUAL
2679: IFFALSE 2689
// sTools := true ;
2681: LD_ADDR_EXP 74
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// if p3 = 101 then
2689: LD_VAR 0 3
2693: PUSH
2694: LD_INT 101
2696: EQUAL
2697: IFFALSE 2707
// sSold := true ;
2699: LD_ADDR_EXP 39
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// if p3 = 102 then
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 102
2714: EQUAL
2715: IFFALSE 2725
// sDiff := true ;
2717: LD_ADDR_EXP 40
2721: PUSH
2722: LD_INT 1
2724: ST_TO_ADDR
// if p3 = 103 then
2725: LD_VAR 0 3
2729: PUSH
2730: LD_INT 103
2732: EQUAL
2733: IFFALSE 2743
// sFog := true ;
2735: LD_ADDR_EXP 43
2739: PUSH
2740: LD_INT 1
2742: ST_TO_ADDR
// if p3 = 104 then
2743: LD_VAR 0 3
2747: PUSH
2748: LD_INT 104
2750: EQUAL
2751: IFFALSE 2761
// sReset := true ;
2753: LD_ADDR_EXP 44
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// if p3 = 105 then
2761: LD_VAR 0 3
2765: PUSH
2766: LD_INT 105
2768: EQUAL
2769: IFFALSE 2779
// sSun := true ;
2771: LD_ADDR_EXP 45
2775: PUSH
2776: LD_INT 1
2778: ST_TO_ADDR
// if p3 = 106 then
2779: LD_VAR 0 3
2783: PUSH
2784: LD_INT 106
2786: EQUAL
2787: IFFALSE 2797
// sTiger := true ;
2789: LD_ADDR_EXP 41
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// if p3 = 107 then
2797: LD_VAR 0 3
2801: PUSH
2802: LD_INT 107
2804: EQUAL
2805: IFFALSE 2815
// sBomb := true ;
2807: LD_ADDR_EXP 42
2811: PUSH
2812: LD_INT 1
2814: ST_TO_ADDR
// if p3 = 108 then
2815: LD_VAR 0 3
2819: PUSH
2820: LD_INT 108
2822: EQUAL
2823: IFFALSE 2833
// sWound := true ;
2825: LD_ADDR_EXP 50
2829: PUSH
2830: LD_INT 1
2832: ST_TO_ADDR
// if p3 = 109 then
2833: LD_VAR 0 3
2837: PUSH
2838: LD_INT 109
2840: EQUAL
2841: IFFALSE 2851
// sBetray := true ;
2843: LD_ADDR_EXP 54
2847: PUSH
2848: LD_INT 1
2850: ST_TO_ADDR
// if p3 = 110 then
2851: LD_VAR 0 3
2855: PUSH
2856: LD_INT 110
2858: EQUAL
2859: IFFALSE 2869
// sContamin := true ;
2861: LD_ADDR_EXP 55
2865: PUSH
2866: LD_INT 1
2868: ST_TO_ADDR
// if p3 = 111 then
2869: LD_VAR 0 3
2873: PUSH
2874: LD_INT 111
2876: EQUAL
2877: IFFALSE 2887
// sOil := true ;
2879: LD_ADDR_EXP 57
2883: PUSH
2884: LD_INT 1
2886: ST_TO_ADDR
// if p3 = 112 then
2887: LD_VAR 0 3
2891: PUSH
2892: LD_INT 112
2894: EQUAL
2895: IFFALSE 2905
// sStu := true ;
2897: LD_ADDR_EXP 61
2901: PUSH
2902: LD_INT 1
2904: ST_TO_ADDR
// if p3 = 113 then
2905: LD_VAR 0 3
2909: PUSH
2910: LD_INT 113
2912: EQUAL
2913: IFFALSE 2923
// sBazooka := true ;
2915: LD_ADDR_EXP 64
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// if p3 = 114 then
2923: LD_VAR 0 3
2927: PUSH
2928: LD_INT 114
2930: EQUAL
2931: IFFALSE 2941
// sMortar := true ;
2933: LD_ADDR_EXP 65
2937: PUSH
2938: LD_INT 1
2940: ST_TO_ADDR
// if p3 = 115 then
2941: LD_VAR 0 3
2945: PUSH
2946: LD_INT 115
2948: EQUAL
2949: IFFALSE 2959
// sRanger := true ;
2951: LD_ADDR_EXP 75
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// end ; if p2 = 101 then
2959: LD_VAR 0 2
2963: PUSH
2964: LD_INT 101
2966: EQUAL
2967: IFFALSE 3170
// begin case p3 of 1 :
2969: LD_VAR 0 3
2973: PUSH
2974: LD_INT 1
2976: DOUBLE
2977: EQUAL
2978: IFTRUE 2982
2980: GO 2989
2982: POP
// hHackUnlimitedResources ; 2 :
2983: CALL 13264 0 0
2987: GO 3170
2989: LD_INT 2
2991: DOUBLE
2992: EQUAL
2993: IFTRUE 2997
2995: GO 3004
2997: POP
// hHackSetLevel10 ; 3 :
2998: CALL 13397 0 0
3002: GO 3170
3004: LD_INT 3
3006: DOUBLE
3007: EQUAL
3008: IFTRUE 3012
3010: GO 3019
3012: POP
// hHackSetLevel10YourUnits ; 4 :
3013: CALL 13482 0 0
3017: GO 3170
3019: LD_INT 4
3021: DOUBLE
3022: EQUAL
3023: IFTRUE 3027
3025: GO 3049
3027: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
3028: LD_VAR 0 4
3032: PPUSH
3033: LD_VAR 0 5
3037: PPUSH
3038: LD_VAR 0 6
3042: PPUSH
3043: CALL 13572 0 3
3047: GO 3170
3049: LD_INT 5
3051: DOUBLE
3052: EQUAL
3053: IFTRUE 3057
3055: GO 3064
3057: POP
// hHackSpawnVehicle ; 6 :
3058: CALL 13633 0 0
3062: GO 3170
3064: LD_INT 6
3066: DOUBLE
3067: EQUAL
3068: IFTRUE 3072
3070: GO 3079
3072: POP
// hHackInvincible ; 7 :
3073: CALL 14179 0 0
3077: GO 3170
3079: LD_INT 7
3081: DOUBLE
3082: EQUAL
3083: IFTRUE 3087
3085: GO 3094
3087: POP
// hHackInvisible ; 8 :
3088: CALL 14290 0 0
3092: GO 3170
3094: LD_INT 8
3096: DOUBLE
3097: EQUAL
3098: IFTRUE 3102
3100: GO 3109
3102: POP
// hHackChangeYourSide ; 9 :
3103: CALL 14347 0 0
3107: GO 3170
3109: LD_INT 9
3111: DOUBLE
3112: EQUAL
3113: IFTRUE 3117
3115: GO 3124
3117: POP
// hHackChangeUnitSide ; 10 :
3118: CALL 14389 0 0
3122: GO 3170
3124: LD_INT 10
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3139
3132: POP
// hHackFog ; 11 :
3133: CALL 14490 0 0
3137: GO 3170
3139: LD_INT 11
3141: DOUBLE
3142: EQUAL
3143: IFTRUE 3147
3145: GO 3154
3147: POP
// hHackApeman ; 12 :
3148: CALL 14505 0 0
3152: GO 3170
3154: LD_INT 12
3156: DOUBLE
3157: EQUAL
3158: IFTRUE 3162
3160: GO 3169
3162: POP
// hHackBoom ; end ;
3163: CALL 14590 0 0
3167: GO 3170
3169: POP
// end ; end ;
3170: PPOPN 6
3172: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3173: GO 3175
3175: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3176: LD_STRING initStreamRollete();
3178: PPUSH
3179: CALL_OW 559
// InitStreamMode ;
3183: CALL 3192 0 0
// DefineStreamItems ( ) ;
3187: CALL 3632 0 0
// end ;
3191: END
// function InitStreamMode ; begin
3192: LD_INT 0
3194: PPUSH
// streamModeActive := false ;
3195: LD_ADDR_EXP 22
3199: PUSH
3200: LD_INT 0
3202: ST_TO_ADDR
// normalCounter := 36 ;
3203: LD_ADDR_EXP 23
3207: PUSH
3208: LD_INT 36
3210: ST_TO_ADDR
// hardcoreCounter := 16 ;
3211: LD_ADDR_EXP 24
3215: PUSH
3216: LD_INT 16
3218: ST_TO_ADDR
// sRocket := false ;
3219: LD_ADDR_EXP 27
3223: PUSH
3224: LD_INT 0
3226: ST_TO_ADDR
// sSpeed := false ;
3227: LD_ADDR_EXP 26
3231: PUSH
3232: LD_INT 0
3234: ST_TO_ADDR
// sEngine := false ;
3235: LD_ADDR_EXP 28
3239: PUSH
3240: LD_INT 0
3242: ST_TO_ADDR
// sSpec := false ;
3243: LD_ADDR_EXP 25
3247: PUSH
3248: LD_INT 0
3250: ST_TO_ADDR
// sLevel := false ;
3251: LD_ADDR_EXP 29
3255: PUSH
3256: LD_INT 0
3258: ST_TO_ADDR
// sArmoury := false ;
3259: LD_ADDR_EXP 30
3263: PUSH
3264: LD_INT 0
3266: ST_TO_ADDR
// sRadar := false ;
3267: LD_ADDR_EXP 31
3271: PUSH
3272: LD_INT 0
3274: ST_TO_ADDR
// sBunker := false ;
3275: LD_ADDR_EXP 32
3279: PUSH
3280: LD_INT 0
3282: ST_TO_ADDR
// sHack := false ;
3283: LD_ADDR_EXP 33
3287: PUSH
3288: LD_INT 0
3290: ST_TO_ADDR
// sFire := false ;
3291: LD_ADDR_EXP 34
3295: PUSH
3296: LD_INT 0
3298: ST_TO_ADDR
// sRefresh := false ;
3299: LD_ADDR_EXP 35
3303: PUSH
3304: LD_INT 0
3306: ST_TO_ADDR
// sExp := false ;
3307: LD_ADDR_EXP 36
3311: PUSH
3312: LD_INT 0
3314: ST_TO_ADDR
// sDepot := false ;
3315: LD_ADDR_EXP 37
3319: PUSH
3320: LD_INT 0
3322: ST_TO_ADDR
// sFlag := false ;
3323: LD_ADDR_EXP 38
3327: PUSH
3328: LD_INT 0
3330: ST_TO_ADDR
// sKamikadze := false ;
3331: LD_ADDR_EXP 46
3335: PUSH
3336: LD_INT 0
3338: ST_TO_ADDR
// sTroll := false ;
3339: LD_ADDR_EXP 47
3343: PUSH
3344: LD_INT 0
3346: ST_TO_ADDR
// sSlow := false ;
3347: LD_ADDR_EXP 48
3351: PUSH
3352: LD_INT 0
3354: ST_TO_ADDR
// sLack := false ;
3355: LD_ADDR_EXP 49
3359: PUSH
3360: LD_INT 0
3362: ST_TO_ADDR
// sTank := false ;
3363: LD_ADDR_EXP 51
3367: PUSH
3368: LD_INT 0
3370: ST_TO_ADDR
// sRemote := false ;
3371: LD_ADDR_EXP 52
3375: PUSH
3376: LD_INT 0
3378: ST_TO_ADDR
// sPowell := false ;
3379: LD_ADDR_EXP 53
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// sTeleport := false ;
3387: LD_ADDR_EXP 56
3391: PUSH
3392: LD_INT 0
3394: ST_TO_ADDR
// sOilTower := false ;
3395: LD_ADDR_EXP 58
3399: PUSH
3400: LD_INT 0
3402: ST_TO_ADDR
// sShovel := false ;
3403: LD_ADDR_EXP 59
3407: PUSH
3408: LD_INT 0
3410: ST_TO_ADDR
// sSheik := false ;
3411: LD_ADDR_EXP 60
3415: PUSH
3416: LD_INT 0
3418: ST_TO_ADDR
// sEarthquake := false ;
3419: LD_ADDR_EXP 62
3423: PUSH
3424: LD_INT 0
3426: ST_TO_ADDR
// sAI := false ;
3427: LD_ADDR_EXP 63
3431: PUSH
3432: LD_INT 0
3434: ST_TO_ADDR
// sCargo := false ;
3435: LD_ADDR_EXP 66
3439: PUSH
3440: LD_INT 0
3442: ST_TO_ADDR
// sDLaser := false ;
3443: LD_ADDR_EXP 67
3447: PUSH
3448: LD_INT 0
3450: ST_TO_ADDR
// sExchange := false ;
3451: LD_ADDR_EXP 68
3455: PUSH
3456: LD_INT 0
3458: ST_TO_ADDR
// sFac := false ;
3459: LD_ADDR_EXP 69
3463: PUSH
3464: LD_INT 0
3466: ST_TO_ADDR
// sPower := false ;
3467: LD_ADDR_EXP 70
3471: PUSH
3472: LD_INT 0
3474: ST_TO_ADDR
// sRandom := false ;
3475: LD_ADDR_EXP 71
3479: PUSH
3480: LD_INT 0
3482: ST_TO_ADDR
// sShield := false ;
3483: LD_ADDR_EXP 72
3487: PUSH
3488: LD_INT 0
3490: ST_TO_ADDR
// sTime := false ;
3491: LD_ADDR_EXP 73
3495: PUSH
3496: LD_INT 0
3498: ST_TO_ADDR
// sTools := false ;
3499: LD_ADDR_EXP 74
3503: PUSH
3504: LD_INT 0
3506: ST_TO_ADDR
// sSold := false ;
3507: LD_ADDR_EXP 39
3511: PUSH
3512: LD_INT 0
3514: ST_TO_ADDR
// sDiff := false ;
3515: LD_ADDR_EXP 40
3519: PUSH
3520: LD_INT 0
3522: ST_TO_ADDR
// sFog := false ;
3523: LD_ADDR_EXP 43
3527: PUSH
3528: LD_INT 0
3530: ST_TO_ADDR
// sReset := false ;
3531: LD_ADDR_EXP 44
3535: PUSH
3536: LD_INT 0
3538: ST_TO_ADDR
// sSun := false ;
3539: LD_ADDR_EXP 45
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// sTiger := false ;
3547: LD_ADDR_EXP 41
3551: PUSH
3552: LD_INT 0
3554: ST_TO_ADDR
// sBomb := false ;
3555: LD_ADDR_EXP 42
3559: PUSH
3560: LD_INT 0
3562: ST_TO_ADDR
// sWound := false ;
3563: LD_ADDR_EXP 50
3567: PUSH
3568: LD_INT 0
3570: ST_TO_ADDR
// sBetray := false ;
3571: LD_ADDR_EXP 54
3575: PUSH
3576: LD_INT 0
3578: ST_TO_ADDR
// sContamin := false ;
3579: LD_ADDR_EXP 55
3583: PUSH
3584: LD_INT 0
3586: ST_TO_ADDR
// sOil := false ;
3587: LD_ADDR_EXP 57
3591: PUSH
3592: LD_INT 0
3594: ST_TO_ADDR
// sStu := false ;
3595: LD_ADDR_EXP 61
3599: PUSH
3600: LD_INT 0
3602: ST_TO_ADDR
// sBazooka := false ;
3603: LD_ADDR_EXP 64
3607: PUSH
3608: LD_INT 0
3610: ST_TO_ADDR
// sMortar := false ;
3611: LD_ADDR_EXP 65
3615: PUSH
3616: LD_INT 0
3618: ST_TO_ADDR
// sRanger := false ;
3619: LD_ADDR_EXP 75
3623: PUSH
3624: LD_INT 0
3626: ST_TO_ADDR
// end ;
3627: LD_VAR 0 1
3631: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3632: LD_INT 0
3634: PPUSH
3635: PPUSH
3636: PPUSH
3637: PPUSH
3638: PPUSH
// result := [ ] ;
3639: LD_ADDR_VAR 0 1
3643: PUSH
3644: EMPTY
3645: ST_TO_ADDR
// if campaign_id = 1 then
3646: LD_OWVAR 69
3650: PUSH
3651: LD_INT 1
3653: EQUAL
3654: IFFALSE 6592
// begin case mission_number of 1 :
3656: LD_OWVAR 70
3660: PUSH
3661: LD_INT 1
3663: DOUBLE
3664: EQUAL
3665: IFTRUE 3669
3667: GO 3733
3669: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3670: LD_ADDR_VAR 0 1
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: LD_INT 4
3680: PUSH
3681: LD_INT 11
3683: PUSH
3684: LD_INT 12
3686: PUSH
3687: LD_INT 15
3689: PUSH
3690: LD_INT 16
3692: PUSH
3693: LD_INT 22
3695: PUSH
3696: LD_INT 23
3698: PUSH
3699: LD_INT 26
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 101
3715: PUSH
3716: LD_INT 102
3718: PUSH
3719: LD_INT 106
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: ST_TO_ADDR
3731: GO 6590
3733: LD_INT 2
3735: DOUBLE
3736: EQUAL
3737: IFTRUE 3741
3739: GO 3813
3741: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3742: LD_ADDR_VAR 0 1
3746: PUSH
3747: LD_INT 2
3749: PUSH
3750: LD_INT 4
3752: PUSH
3753: LD_INT 11
3755: PUSH
3756: LD_INT 12
3758: PUSH
3759: LD_INT 15
3761: PUSH
3762: LD_INT 16
3764: PUSH
3765: LD_INT 22
3767: PUSH
3768: LD_INT 23
3770: PUSH
3771: LD_INT 26
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 101
3787: PUSH
3788: LD_INT 102
3790: PUSH
3791: LD_INT 105
3793: PUSH
3794: LD_INT 106
3796: PUSH
3797: LD_INT 108
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: ST_TO_ADDR
3811: GO 6590
3813: LD_INT 3
3815: DOUBLE
3816: EQUAL
3817: IFTRUE 3821
3819: GO 3897
3821: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: LD_INT 11
3838: PUSH
3839: LD_INT 12
3841: PUSH
3842: LD_INT 15
3844: PUSH
3845: LD_INT 16
3847: PUSH
3848: LD_INT 22
3850: PUSH
3851: LD_INT 26
3853: PUSH
3854: LD_INT 36
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 101
3871: PUSH
3872: LD_INT 102
3874: PUSH
3875: LD_INT 105
3877: PUSH
3878: LD_INT 106
3880: PUSH
3881: LD_INT 108
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: ST_TO_ADDR
3895: GO 6590
3897: LD_INT 4
3899: DOUBLE
3900: EQUAL
3901: IFTRUE 3905
3903: GO 3989
3905: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3906: LD_ADDR_VAR 0 1
3910: PUSH
3911: LD_INT 2
3913: PUSH
3914: LD_INT 4
3916: PUSH
3917: LD_INT 5
3919: PUSH
3920: LD_INT 8
3922: PUSH
3923: LD_INT 11
3925: PUSH
3926: LD_INT 12
3928: PUSH
3929: LD_INT 15
3931: PUSH
3932: LD_INT 16
3934: PUSH
3935: LD_INT 22
3937: PUSH
3938: LD_INT 23
3940: PUSH
3941: LD_INT 26
3943: PUSH
3944: LD_INT 36
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: PUSH
3961: LD_INT 101
3963: PUSH
3964: LD_INT 102
3966: PUSH
3967: LD_INT 105
3969: PUSH
3970: LD_INT 106
3972: PUSH
3973: LD_INT 108
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: ST_TO_ADDR
3987: GO 6590
3989: LD_INT 5
3991: DOUBLE
3992: EQUAL
3993: IFTRUE 3997
3995: GO 4097
3997: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3998: LD_ADDR_VAR 0 1
4002: PUSH
4003: LD_INT 2
4005: PUSH
4006: LD_INT 4
4008: PUSH
4009: LD_INT 5
4011: PUSH
4012: LD_INT 6
4014: PUSH
4015: LD_INT 8
4017: PUSH
4018: LD_INT 11
4020: PUSH
4021: LD_INT 12
4023: PUSH
4024: LD_INT 15
4026: PUSH
4027: LD_INT 16
4029: PUSH
4030: LD_INT 22
4032: PUSH
4033: LD_INT 23
4035: PUSH
4036: LD_INT 25
4038: PUSH
4039: LD_INT 26
4041: PUSH
4042: LD_INT 36
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 101
4063: PUSH
4064: LD_INT 102
4066: PUSH
4067: LD_INT 105
4069: PUSH
4070: LD_INT 106
4072: PUSH
4073: LD_INT 108
4075: PUSH
4076: LD_INT 109
4078: PUSH
4079: LD_INT 112
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: ST_TO_ADDR
4095: GO 6590
4097: LD_INT 6
4099: DOUBLE
4100: EQUAL
4101: IFTRUE 4105
4103: GO 4225
4105: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
4106: LD_ADDR_VAR 0 1
4110: PUSH
4111: LD_INT 2
4113: PUSH
4114: LD_INT 4
4116: PUSH
4117: LD_INT 5
4119: PUSH
4120: LD_INT 6
4122: PUSH
4123: LD_INT 8
4125: PUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 12
4131: PUSH
4132: LD_INT 15
4134: PUSH
4135: LD_INT 16
4137: PUSH
4138: LD_INT 20
4140: PUSH
4141: LD_INT 21
4143: PUSH
4144: LD_INT 22
4146: PUSH
4147: LD_INT 23
4149: PUSH
4150: LD_INT 25
4152: PUSH
4153: LD_INT 26
4155: PUSH
4156: LD_INT 30
4158: PUSH
4159: LD_INT 31
4161: PUSH
4162: LD_INT 32
4164: PUSH
4165: LD_INT 36
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: PUSH
4189: LD_INT 101
4191: PUSH
4192: LD_INT 102
4194: PUSH
4195: LD_INT 105
4197: PUSH
4198: LD_INT 106
4200: PUSH
4201: LD_INT 108
4203: PUSH
4204: LD_INT 109
4206: PUSH
4207: LD_INT 112
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: ST_TO_ADDR
4223: GO 6590
4225: LD_INT 7
4227: DOUBLE
4228: EQUAL
4229: IFTRUE 4233
4231: GO 4333
4233: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4234: LD_ADDR_VAR 0 1
4238: PUSH
4239: LD_INT 2
4241: PUSH
4242: LD_INT 4
4244: PUSH
4245: LD_INT 5
4247: PUSH
4248: LD_INT 7
4250: PUSH
4251: LD_INT 11
4253: PUSH
4254: LD_INT 12
4256: PUSH
4257: LD_INT 15
4259: PUSH
4260: LD_INT 16
4262: PUSH
4263: LD_INT 20
4265: PUSH
4266: LD_INT 21
4268: PUSH
4269: LD_INT 22
4271: PUSH
4272: LD_INT 23
4274: PUSH
4275: LD_INT 25
4277: PUSH
4278: LD_INT 26
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 101
4299: PUSH
4300: LD_INT 102
4302: PUSH
4303: LD_INT 103
4305: PUSH
4306: LD_INT 105
4308: PUSH
4309: LD_INT 106
4311: PUSH
4312: LD_INT 108
4314: PUSH
4315: LD_INT 112
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: ST_TO_ADDR
4331: GO 6590
4333: LD_INT 8
4335: DOUBLE
4336: EQUAL
4337: IFTRUE 4341
4339: GO 4469
4341: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4342: LD_ADDR_VAR 0 1
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 5
4355: PUSH
4356: LD_INT 6
4358: PUSH
4359: LD_INT 7
4361: PUSH
4362: LD_INT 8
4364: PUSH
4365: LD_INT 11
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: LD_INT 15
4373: PUSH
4374: LD_INT 16
4376: PUSH
4377: LD_INT 20
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 23
4388: PUSH
4389: LD_INT 25
4391: PUSH
4392: LD_INT 26
4394: PUSH
4395: LD_INT 30
4397: PUSH
4398: LD_INT 31
4400: PUSH
4401: LD_INT 32
4403: PUSH
4404: LD_INT 36
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 101
4431: PUSH
4432: LD_INT 102
4434: PUSH
4435: LD_INT 103
4437: PUSH
4438: LD_INT 105
4440: PUSH
4441: LD_INT 106
4443: PUSH
4444: LD_INT 108
4446: PUSH
4447: LD_INT 109
4449: PUSH
4450: LD_INT 112
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: ST_TO_ADDR
4467: GO 6590
4469: LD_INT 9
4471: DOUBLE
4472: EQUAL
4473: IFTRUE 4477
4475: GO 4613
4477: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4478: LD_ADDR_VAR 0 1
4482: PUSH
4483: LD_INT 2
4485: PUSH
4486: LD_INT 4
4488: PUSH
4489: LD_INT 5
4491: PUSH
4492: LD_INT 6
4494: PUSH
4495: LD_INT 7
4497: PUSH
4498: LD_INT 8
4500: PUSH
4501: LD_INT 11
4503: PUSH
4504: LD_INT 12
4506: PUSH
4507: LD_INT 15
4509: PUSH
4510: LD_INT 16
4512: PUSH
4513: LD_INT 20
4515: PUSH
4516: LD_INT 21
4518: PUSH
4519: LD_INT 22
4521: PUSH
4522: LD_INT 23
4524: PUSH
4525: LD_INT 25
4527: PUSH
4528: LD_INT 26
4530: PUSH
4531: LD_INT 28
4533: PUSH
4534: LD_INT 30
4536: PUSH
4537: LD_INT 31
4539: PUSH
4540: LD_INT 32
4542: PUSH
4543: LD_INT 36
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 101
4571: PUSH
4572: LD_INT 102
4574: PUSH
4575: LD_INT 103
4577: PUSH
4578: LD_INT 105
4580: PUSH
4581: LD_INT 106
4583: PUSH
4584: LD_INT 108
4586: PUSH
4587: LD_INT 109
4589: PUSH
4590: LD_INT 112
4592: PUSH
4593: LD_INT 114
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: ST_TO_ADDR
4611: GO 6590
4613: LD_INT 10
4615: DOUBLE
4616: EQUAL
4617: IFTRUE 4621
4619: GO 4805
4621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4622: LD_ADDR_VAR 0 1
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 4
4632: PUSH
4633: LD_INT 5
4635: PUSH
4636: LD_INT 6
4638: PUSH
4639: LD_INT 7
4641: PUSH
4642: LD_INT 8
4644: PUSH
4645: LD_INT 9
4647: PUSH
4648: LD_INT 10
4650: PUSH
4651: LD_INT 11
4653: PUSH
4654: LD_INT 12
4656: PUSH
4657: LD_INT 13
4659: PUSH
4660: LD_INT 14
4662: PUSH
4663: LD_INT 15
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: LD_INT 17
4671: PUSH
4672: LD_INT 18
4674: PUSH
4675: LD_INT 19
4677: PUSH
4678: LD_INT 20
4680: PUSH
4681: LD_INT 21
4683: PUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 23
4689: PUSH
4690: LD_INT 24
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 26
4698: PUSH
4699: LD_INT 28
4701: PUSH
4702: LD_INT 30
4704: PUSH
4705: LD_INT 31
4707: PUSH
4708: LD_INT 32
4710: PUSH
4711: LD_INT 36
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 101
4747: PUSH
4748: LD_INT 102
4750: PUSH
4751: LD_INT 103
4753: PUSH
4754: LD_INT 104
4756: PUSH
4757: LD_INT 105
4759: PUSH
4760: LD_INT 106
4762: PUSH
4763: LD_INT 107
4765: PUSH
4766: LD_INT 108
4768: PUSH
4769: LD_INT 109
4771: PUSH
4772: LD_INT 110
4774: PUSH
4775: LD_INT 111
4777: PUSH
4778: LD_INT 112
4780: PUSH
4781: LD_INT 114
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: ST_TO_ADDR
4803: GO 6590
4805: LD_INT 11
4807: DOUBLE
4808: EQUAL
4809: IFTRUE 4813
4811: GO 5005
4813: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4814: LD_ADDR_VAR 0 1
4818: PUSH
4819: LD_INT 2
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: LD_INT 4
4827: PUSH
4828: LD_INT 5
4830: PUSH
4831: LD_INT 6
4833: PUSH
4834: LD_INT 7
4836: PUSH
4837: LD_INT 8
4839: PUSH
4840: LD_INT 9
4842: PUSH
4843: LD_INT 10
4845: PUSH
4846: LD_INT 11
4848: PUSH
4849: LD_INT 12
4851: PUSH
4852: LD_INT 13
4854: PUSH
4855: LD_INT 14
4857: PUSH
4858: LD_INT 15
4860: PUSH
4861: LD_INT 16
4863: PUSH
4864: LD_INT 17
4866: PUSH
4867: LD_INT 18
4869: PUSH
4870: LD_INT 19
4872: PUSH
4873: LD_INT 20
4875: PUSH
4876: LD_INT 21
4878: PUSH
4879: LD_INT 22
4881: PUSH
4882: LD_INT 23
4884: PUSH
4885: LD_INT 24
4887: PUSH
4888: LD_INT 25
4890: PUSH
4891: LD_INT 26
4893: PUSH
4894: LD_INT 28
4896: PUSH
4897: LD_INT 30
4899: PUSH
4900: LD_INT 31
4902: PUSH
4903: LD_INT 32
4905: PUSH
4906: LD_INT 34
4908: PUSH
4909: LD_INT 36
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 101
4947: PUSH
4948: LD_INT 102
4950: PUSH
4951: LD_INT 103
4953: PUSH
4954: LD_INT 104
4956: PUSH
4957: LD_INT 105
4959: PUSH
4960: LD_INT 106
4962: PUSH
4963: LD_INT 107
4965: PUSH
4966: LD_INT 108
4968: PUSH
4969: LD_INT 109
4971: PUSH
4972: LD_INT 110
4974: PUSH
4975: LD_INT 111
4977: PUSH
4978: LD_INT 112
4980: PUSH
4981: LD_INT 114
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: ST_TO_ADDR
5003: GO 6590
5005: LD_INT 12
5007: DOUBLE
5008: EQUAL
5009: IFTRUE 5013
5011: GO 5221
5013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
5014: LD_ADDR_VAR 0 1
5018: PUSH
5019: LD_INT 1
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: LD_INT 3
5027: PUSH
5028: LD_INT 4
5030: PUSH
5031: LD_INT 5
5033: PUSH
5034: LD_INT 6
5036: PUSH
5037: LD_INT 7
5039: PUSH
5040: LD_INT 8
5042: PUSH
5043: LD_INT 9
5045: PUSH
5046: LD_INT 10
5048: PUSH
5049: LD_INT 11
5051: PUSH
5052: LD_INT 12
5054: PUSH
5055: LD_INT 13
5057: PUSH
5058: LD_INT 14
5060: PUSH
5061: LD_INT 15
5063: PUSH
5064: LD_INT 16
5066: PUSH
5067: LD_INT 17
5069: PUSH
5070: LD_INT 18
5072: PUSH
5073: LD_INT 19
5075: PUSH
5076: LD_INT 20
5078: PUSH
5079: LD_INT 21
5081: PUSH
5082: LD_INT 22
5084: PUSH
5085: LD_INT 23
5087: PUSH
5088: LD_INT 24
5090: PUSH
5091: LD_INT 25
5093: PUSH
5094: LD_INT 26
5096: PUSH
5097: LD_INT 27
5099: PUSH
5100: LD_INT 28
5102: PUSH
5103: LD_INT 30
5105: PUSH
5106: LD_INT 31
5108: PUSH
5109: LD_INT 32
5111: PUSH
5112: LD_INT 33
5114: PUSH
5115: LD_INT 34
5117: PUSH
5118: LD_INT 36
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: PUSH
5157: LD_INT 101
5159: PUSH
5160: LD_INT 102
5162: PUSH
5163: LD_INT 103
5165: PUSH
5166: LD_INT 104
5168: PUSH
5169: LD_INT 105
5171: PUSH
5172: LD_INT 106
5174: PUSH
5175: LD_INT 107
5177: PUSH
5178: LD_INT 108
5180: PUSH
5181: LD_INT 109
5183: PUSH
5184: LD_INT 110
5186: PUSH
5187: LD_INT 111
5189: PUSH
5190: LD_INT 112
5192: PUSH
5193: LD_INT 113
5195: PUSH
5196: LD_INT 114
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: ST_TO_ADDR
5219: GO 6590
5221: LD_INT 13
5223: DOUBLE
5224: EQUAL
5225: IFTRUE 5229
5227: GO 5425
5229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5230: LD_ADDR_VAR 0 1
5234: PUSH
5235: LD_INT 1
5237: PUSH
5238: LD_INT 2
5240: PUSH
5241: LD_INT 3
5243: PUSH
5244: LD_INT 4
5246: PUSH
5247: LD_INT 5
5249: PUSH
5250: LD_INT 8
5252: PUSH
5253: LD_INT 9
5255: PUSH
5256: LD_INT 10
5258: PUSH
5259: LD_INT 11
5261: PUSH
5262: LD_INT 12
5264: PUSH
5265: LD_INT 14
5267: PUSH
5268: LD_INT 15
5270: PUSH
5271: LD_INT 16
5273: PUSH
5274: LD_INT 17
5276: PUSH
5277: LD_INT 18
5279: PUSH
5280: LD_INT 19
5282: PUSH
5283: LD_INT 20
5285: PUSH
5286: LD_INT 21
5288: PUSH
5289: LD_INT 22
5291: PUSH
5292: LD_INT 23
5294: PUSH
5295: LD_INT 24
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 26
5303: PUSH
5304: LD_INT 27
5306: PUSH
5307: LD_INT 28
5309: PUSH
5310: LD_INT 30
5312: PUSH
5313: LD_INT 31
5315: PUSH
5316: LD_INT 32
5318: PUSH
5319: LD_INT 33
5321: PUSH
5322: LD_INT 34
5324: PUSH
5325: LD_INT 36
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: PUSH
5361: LD_INT 101
5363: PUSH
5364: LD_INT 102
5366: PUSH
5367: LD_INT 103
5369: PUSH
5370: LD_INT 104
5372: PUSH
5373: LD_INT 105
5375: PUSH
5376: LD_INT 106
5378: PUSH
5379: LD_INT 107
5381: PUSH
5382: LD_INT 108
5384: PUSH
5385: LD_INT 109
5387: PUSH
5388: LD_INT 110
5390: PUSH
5391: LD_INT 111
5393: PUSH
5394: LD_INT 112
5396: PUSH
5397: LD_INT 113
5399: PUSH
5400: LD_INT 114
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: ST_TO_ADDR
5423: GO 6590
5425: LD_INT 14
5427: DOUBLE
5428: EQUAL
5429: IFTRUE 5433
5431: GO 5645
5433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5434: LD_ADDR_VAR 0 1
5438: PUSH
5439: LD_INT 1
5441: PUSH
5442: LD_INT 2
5444: PUSH
5445: LD_INT 3
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 5
5453: PUSH
5454: LD_INT 6
5456: PUSH
5457: LD_INT 7
5459: PUSH
5460: LD_INT 8
5462: PUSH
5463: LD_INT 9
5465: PUSH
5466: LD_INT 10
5468: PUSH
5469: LD_INT 11
5471: PUSH
5472: LD_INT 12
5474: PUSH
5475: LD_INT 13
5477: PUSH
5478: LD_INT 14
5480: PUSH
5481: LD_INT 15
5483: PUSH
5484: LD_INT 16
5486: PUSH
5487: LD_INT 17
5489: PUSH
5490: LD_INT 18
5492: PUSH
5493: LD_INT 19
5495: PUSH
5496: LD_INT 20
5498: PUSH
5499: LD_INT 21
5501: PUSH
5502: LD_INT 22
5504: PUSH
5505: LD_INT 23
5507: PUSH
5508: LD_INT 24
5510: PUSH
5511: LD_INT 25
5513: PUSH
5514: LD_INT 26
5516: PUSH
5517: LD_INT 27
5519: PUSH
5520: LD_INT 28
5522: PUSH
5523: LD_INT 29
5525: PUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 31
5531: PUSH
5532: LD_INT 32
5534: PUSH
5535: LD_INT 33
5537: PUSH
5538: LD_INT 34
5540: PUSH
5541: LD_INT 36
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: PUSH
5581: LD_INT 101
5583: PUSH
5584: LD_INT 102
5586: PUSH
5587: LD_INT 103
5589: PUSH
5590: LD_INT 104
5592: PUSH
5593: LD_INT 105
5595: PUSH
5596: LD_INT 106
5598: PUSH
5599: LD_INT 107
5601: PUSH
5602: LD_INT 108
5604: PUSH
5605: LD_INT 109
5607: PUSH
5608: LD_INT 110
5610: PUSH
5611: LD_INT 111
5613: PUSH
5614: LD_INT 112
5616: PUSH
5617: LD_INT 113
5619: PUSH
5620: LD_INT 114
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: ST_TO_ADDR
5643: GO 6590
5645: LD_INT 15
5647: DOUBLE
5648: EQUAL
5649: IFTRUE 5653
5651: GO 5865
5653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5654: LD_ADDR_VAR 0 1
5658: PUSH
5659: LD_INT 1
5661: PUSH
5662: LD_INT 2
5664: PUSH
5665: LD_INT 3
5667: PUSH
5668: LD_INT 4
5670: PUSH
5671: LD_INT 5
5673: PUSH
5674: LD_INT 6
5676: PUSH
5677: LD_INT 7
5679: PUSH
5680: LD_INT 8
5682: PUSH
5683: LD_INT 9
5685: PUSH
5686: LD_INT 10
5688: PUSH
5689: LD_INT 11
5691: PUSH
5692: LD_INT 12
5694: PUSH
5695: LD_INT 13
5697: PUSH
5698: LD_INT 14
5700: PUSH
5701: LD_INT 15
5703: PUSH
5704: LD_INT 16
5706: PUSH
5707: LD_INT 17
5709: PUSH
5710: LD_INT 18
5712: PUSH
5713: LD_INT 19
5715: PUSH
5716: LD_INT 20
5718: PUSH
5719: LD_INT 21
5721: PUSH
5722: LD_INT 22
5724: PUSH
5725: LD_INT 23
5727: PUSH
5728: LD_INT 24
5730: PUSH
5731: LD_INT 25
5733: PUSH
5734: LD_INT 26
5736: PUSH
5737: LD_INT 27
5739: PUSH
5740: LD_INT 28
5742: PUSH
5743: LD_INT 29
5745: PUSH
5746: LD_INT 30
5748: PUSH
5749: LD_INT 31
5751: PUSH
5752: LD_INT 32
5754: PUSH
5755: LD_INT 33
5757: PUSH
5758: LD_INT 34
5760: PUSH
5761: LD_INT 36
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_INT 101
5803: PUSH
5804: LD_INT 102
5806: PUSH
5807: LD_INT 103
5809: PUSH
5810: LD_INT 104
5812: PUSH
5813: LD_INT 105
5815: PUSH
5816: LD_INT 106
5818: PUSH
5819: LD_INT 107
5821: PUSH
5822: LD_INT 108
5824: PUSH
5825: LD_INT 109
5827: PUSH
5828: LD_INT 110
5830: PUSH
5831: LD_INT 111
5833: PUSH
5834: LD_INT 112
5836: PUSH
5837: LD_INT 113
5839: PUSH
5840: LD_INT 114
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: ST_TO_ADDR
5863: GO 6590
5865: LD_INT 16
5867: DOUBLE
5868: EQUAL
5869: IFTRUE 5873
5871: GO 5997
5873: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5874: LD_ADDR_VAR 0 1
5878: PUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 4
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: LD_INT 7
5890: PUSH
5891: LD_INT 11
5893: PUSH
5894: LD_INT 12
5896: PUSH
5897: LD_INT 15
5899: PUSH
5900: LD_INT 16
5902: PUSH
5903: LD_INT 20
5905: PUSH
5906: LD_INT 21
5908: PUSH
5909: LD_INT 22
5911: PUSH
5912: LD_INT 23
5914: PUSH
5915: LD_INT 25
5917: PUSH
5918: LD_INT 26
5920: PUSH
5921: LD_INT 30
5923: PUSH
5924: LD_INT 31
5926: PUSH
5927: LD_INT 32
5929: PUSH
5930: LD_INT 33
5932: PUSH
5933: LD_INT 34
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 101
5959: PUSH
5960: LD_INT 102
5962: PUSH
5963: LD_INT 103
5965: PUSH
5966: LD_INT 106
5968: PUSH
5969: LD_INT 108
5971: PUSH
5972: LD_INT 112
5974: PUSH
5975: LD_INT 113
5977: PUSH
5978: LD_INT 114
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: ST_TO_ADDR
5995: GO 6590
5997: LD_INT 17
5999: DOUBLE
6000: EQUAL
6001: IFTRUE 6005
6003: GO 6217
6005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
6006: LD_ADDR_VAR 0 1
6010: PUSH
6011: LD_INT 1
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: LD_INT 3
6019: PUSH
6020: LD_INT 4
6022: PUSH
6023: LD_INT 5
6025: PUSH
6026: LD_INT 6
6028: PUSH
6029: LD_INT 7
6031: PUSH
6032: LD_INT 8
6034: PUSH
6035: LD_INT 9
6037: PUSH
6038: LD_INT 10
6040: PUSH
6041: LD_INT 11
6043: PUSH
6044: LD_INT 12
6046: PUSH
6047: LD_INT 13
6049: PUSH
6050: LD_INT 14
6052: PUSH
6053: LD_INT 15
6055: PUSH
6056: LD_INT 16
6058: PUSH
6059: LD_INT 17
6061: PUSH
6062: LD_INT 18
6064: PUSH
6065: LD_INT 19
6067: PUSH
6068: LD_INT 20
6070: PUSH
6071: LD_INT 21
6073: PUSH
6074: LD_INT 22
6076: PUSH
6077: LD_INT 23
6079: PUSH
6080: LD_INT 24
6082: PUSH
6083: LD_INT 25
6085: PUSH
6086: LD_INT 26
6088: PUSH
6089: LD_INT 27
6091: PUSH
6092: LD_INT 28
6094: PUSH
6095: LD_INT 29
6097: PUSH
6098: LD_INT 30
6100: PUSH
6101: LD_INT 31
6103: PUSH
6104: LD_INT 32
6106: PUSH
6107: LD_INT 33
6109: PUSH
6110: LD_INT 34
6112: PUSH
6113: LD_INT 36
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 101
6155: PUSH
6156: LD_INT 102
6158: PUSH
6159: LD_INT 103
6161: PUSH
6162: LD_INT 104
6164: PUSH
6165: LD_INT 105
6167: PUSH
6168: LD_INT 106
6170: PUSH
6171: LD_INT 107
6173: PUSH
6174: LD_INT 108
6176: PUSH
6177: LD_INT 109
6179: PUSH
6180: LD_INT 110
6182: PUSH
6183: LD_INT 111
6185: PUSH
6186: LD_INT 112
6188: PUSH
6189: LD_INT 113
6191: PUSH
6192: LD_INT 114
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: ST_TO_ADDR
6215: GO 6590
6217: LD_INT 18
6219: DOUBLE
6220: EQUAL
6221: IFTRUE 6225
6223: GO 6361
6225: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6226: LD_ADDR_VAR 0 1
6230: PUSH
6231: LD_INT 2
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: LD_INT 5
6239: PUSH
6240: LD_INT 7
6242: PUSH
6243: LD_INT 11
6245: PUSH
6246: LD_INT 12
6248: PUSH
6249: LD_INT 15
6251: PUSH
6252: LD_INT 16
6254: PUSH
6255: LD_INT 20
6257: PUSH
6258: LD_INT 21
6260: PUSH
6261: LD_INT 22
6263: PUSH
6264: LD_INT 23
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 26
6272: PUSH
6273: LD_INT 30
6275: PUSH
6276: LD_INT 31
6278: PUSH
6279: LD_INT 32
6281: PUSH
6282: LD_INT 33
6284: PUSH
6285: LD_INT 34
6287: PUSH
6288: LD_INT 35
6290: PUSH
6291: LD_INT 36
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: PUSH
6317: LD_INT 101
6319: PUSH
6320: LD_INT 102
6322: PUSH
6323: LD_INT 103
6325: PUSH
6326: LD_INT 106
6328: PUSH
6329: LD_INT 108
6331: PUSH
6332: LD_INT 112
6334: PUSH
6335: LD_INT 113
6337: PUSH
6338: LD_INT 114
6340: PUSH
6341: LD_INT 115
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: ST_TO_ADDR
6359: GO 6590
6361: LD_INT 19
6363: DOUBLE
6364: EQUAL
6365: IFTRUE 6369
6367: GO 6589
6369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6370: LD_ADDR_VAR 0 1
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 3
6383: PUSH
6384: LD_INT 4
6386: PUSH
6387: LD_INT 5
6389: PUSH
6390: LD_INT 6
6392: PUSH
6393: LD_INT 7
6395: PUSH
6396: LD_INT 8
6398: PUSH
6399: LD_INT 9
6401: PUSH
6402: LD_INT 10
6404: PUSH
6405: LD_INT 11
6407: PUSH
6408: LD_INT 12
6410: PUSH
6411: LD_INT 13
6413: PUSH
6414: LD_INT 14
6416: PUSH
6417: LD_INT 15
6419: PUSH
6420: LD_INT 16
6422: PUSH
6423: LD_INT 17
6425: PUSH
6426: LD_INT 18
6428: PUSH
6429: LD_INT 19
6431: PUSH
6432: LD_INT 20
6434: PUSH
6435: LD_INT 21
6437: PUSH
6438: LD_INT 22
6440: PUSH
6441: LD_INT 23
6443: PUSH
6444: LD_INT 24
6446: PUSH
6447: LD_INT 25
6449: PUSH
6450: LD_INT 26
6452: PUSH
6453: LD_INT 27
6455: PUSH
6456: LD_INT 28
6458: PUSH
6459: LD_INT 29
6461: PUSH
6462: LD_INT 30
6464: PUSH
6465: LD_INT 31
6467: PUSH
6468: LD_INT 32
6470: PUSH
6471: LD_INT 33
6473: PUSH
6474: LD_INT 34
6476: PUSH
6477: LD_INT 35
6479: PUSH
6480: LD_INT 36
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 101
6523: PUSH
6524: LD_INT 102
6526: PUSH
6527: LD_INT 103
6529: PUSH
6530: LD_INT 104
6532: PUSH
6533: LD_INT 105
6535: PUSH
6536: LD_INT 106
6538: PUSH
6539: LD_INT 107
6541: PUSH
6542: LD_INT 108
6544: PUSH
6545: LD_INT 109
6547: PUSH
6548: LD_INT 110
6550: PUSH
6551: LD_INT 111
6553: PUSH
6554: LD_INT 112
6556: PUSH
6557: LD_INT 113
6559: PUSH
6560: LD_INT 114
6562: PUSH
6563: LD_INT 115
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: ST_TO_ADDR
6587: GO 6590
6589: POP
// end else
6590: GO 6809
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_INT 1
6599: PUSH
6600: LD_INT 2
6602: PUSH
6603: LD_INT 3
6605: PUSH
6606: LD_INT 4
6608: PUSH
6609: LD_INT 5
6611: PUSH
6612: LD_INT 6
6614: PUSH
6615: LD_INT 7
6617: PUSH
6618: LD_INT 8
6620: PUSH
6621: LD_INT 9
6623: PUSH
6624: LD_INT 10
6626: PUSH
6627: LD_INT 11
6629: PUSH
6630: LD_INT 12
6632: PUSH
6633: LD_INT 13
6635: PUSH
6636: LD_INT 14
6638: PUSH
6639: LD_INT 15
6641: PUSH
6642: LD_INT 16
6644: PUSH
6645: LD_INT 17
6647: PUSH
6648: LD_INT 18
6650: PUSH
6651: LD_INT 19
6653: PUSH
6654: LD_INT 20
6656: PUSH
6657: LD_INT 21
6659: PUSH
6660: LD_INT 22
6662: PUSH
6663: LD_INT 23
6665: PUSH
6666: LD_INT 24
6668: PUSH
6669: LD_INT 25
6671: PUSH
6672: LD_INT 26
6674: PUSH
6675: LD_INT 27
6677: PUSH
6678: LD_INT 28
6680: PUSH
6681: LD_INT 29
6683: PUSH
6684: LD_INT 30
6686: PUSH
6687: LD_INT 31
6689: PUSH
6690: LD_INT 32
6692: PUSH
6693: LD_INT 33
6695: PUSH
6696: LD_INT 34
6698: PUSH
6699: LD_INT 35
6701: PUSH
6702: LD_INT 36
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 101
6745: PUSH
6746: LD_INT 102
6748: PUSH
6749: LD_INT 103
6751: PUSH
6752: LD_INT 104
6754: PUSH
6755: LD_INT 105
6757: PUSH
6758: LD_INT 106
6760: PUSH
6761: LD_INT 107
6763: PUSH
6764: LD_INT 108
6766: PUSH
6767: LD_INT 109
6769: PUSH
6770: LD_INT 110
6772: PUSH
6773: LD_INT 111
6775: PUSH
6776: LD_INT 112
6778: PUSH
6779: LD_INT 113
6781: PUSH
6782: LD_INT 114
6784: PUSH
6785: LD_INT 115
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: ST_TO_ADDR
// if result then
6809: LD_VAR 0 1
6813: IFFALSE 7102
// begin normal :=  ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_STRING 
6822: ST_TO_ADDR
// hardcore :=  ;
6823: LD_ADDR_VAR 0 4
6827: PUSH
6828: LD_STRING 
6830: ST_TO_ADDR
// for i = 1 to normalCounter do
6831: LD_ADDR_VAR 0 5
6835: PUSH
6836: DOUBLE
6837: LD_INT 1
6839: DEC
6840: ST_TO_ADDR
6841: LD_EXP 23
6845: PUSH
6846: FOR_TO
6847: IFFALSE 6948
// begin tmp := 0 ;
6849: LD_ADDR_VAR 0 2
6853: PUSH
6854: LD_STRING 0
6856: ST_TO_ADDR
// if result [ 1 ] then
6857: LD_VAR 0 1
6861: PUSH
6862: LD_INT 1
6864: ARRAY
6865: IFFALSE 6930
// if result [ 1 ] [ 1 ] = i then
6867: LD_VAR 0 1
6871: PUSH
6872: LD_INT 1
6874: ARRAY
6875: PUSH
6876: LD_INT 1
6878: ARRAY
6879: PUSH
6880: LD_VAR 0 5
6884: EQUAL
6885: IFFALSE 6930
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6887: LD_ADDR_VAR 0 1
6891: PUSH
6892: LD_VAR 0 1
6896: PPUSH
6897: LD_INT 1
6899: PPUSH
6900: LD_VAR 0 1
6904: PUSH
6905: LD_INT 1
6907: ARRAY
6908: PPUSH
6909: LD_INT 1
6911: PPUSH
6912: CALL_OW 3
6916: PPUSH
6917: CALL_OW 1
6921: ST_TO_ADDR
// tmp := 1 ;
6922: LD_ADDR_VAR 0 2
6926: PUSH
6927: LD_STRING 1
6929: ST_TO_ADDR
// end ; normal := normal & tmp ;
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: LD_VAR 0 3
6939: PUSH
6940: LD_VAR 0 2
6944: STR
6945: ST_TO_ADDR
// end ;
6946: GO 6846
6948: POP
6949: POP
// for i = 1 to hardcoreCounter do
6950: LD_ADDR_VAR 0 5
6954: PUSH
6955: DOUBLE
6956: LD_INT 1
6958: DEC
6959: ST_TO_ADDR
6960: LD_EXP 24
6964: PUSH
6965: FOR_TO
6966: IFFALSE 7071
// begin tmp := 0 ;
6968: LD_ADDR_VAR 0 2
6972: PUSH
6973: LD_STRING 0
6975: ST_TO_ADDR
// if result [ 2 ] then
6976: LD_VAR 0 1
6980: PUSH
6981: LD_INT 2
6983: ARRAY
6984: IFFALSE 7053
// if result [ 2 ] [ 1 ] = 100 + i then
6986: LD_VAR 0 1
6990: PUSH
6991: LD_INT 2
6993: ARRAY
6994: PUSH
6995: LD_INT 1
6997: ARRAY
6998: PUSH
6999: LD_INT 100
7001: PUSH
7002: LD_VAR 0 5
7006: PLUS
7007: EQUAL
7008: IFFALSE 7053
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7010: LD_ADDR_VAR 0 1
7014: PUSH
7015: LD_VAR 0 1
7019: PPUSH
7020: LD_INT 2
7022: PPUSH
7023: LD_VAR 0 1
7027: PUSH
7028: LD_INT 2
7030: ARRAY
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 3
7039: PPUSH
7040: CALL_OW 1
7044: ST_TO_ADDR
// tmp := 1 ;
7045: LD_ADDR_VAR 0 2
7049: PUSH
7050: LD_STRING 1
7052: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7053: LD_ADDR_VAR 0 4
7057: PUSH
7058: LD_VAR 0 4
7062: PUSH
7063: LD_VAR 0 2
7067: STR
7068: ST_TO_ADDR
// end ;
7069: GO 6965
7071: POP
7072: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7073: LD_STRING getStreamItemsFromMission("
7075: PUSH
7076: LD_VAR 0 3
7080: STR
7081: PUSH
7082: LD_STRING ","
7084: STR
7085: PUSH
7086: LD_VAR 0 4
7090: STR
7091: PUSH
7092: LD_STRING ")
7094: STR
7095: PPUSH
7096: CALL_OW 559
// end else
7100: GO 7109
// ToLua ( getStreamItemsFromMission("","") ) ;
7102: LD_STRING getStreamItemsFromMission("","")
7104: PPUSH
7105: CALL_OW 559
// end ;
7109: LD_VAR 0 1
7113: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7114: LD_EXP 22
7118: PUSH
7119: LD_EXP 27
7123: AND
7124: IFFALSE 7248
7126: GO 7128
7128: DISABLE
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
// begin enable ;
7133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_OWVAR 2
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 2
7153: PUSH
7154: LD_INT 34
7156: PUSH
7157: LD_INT 7
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 34
7166: PUSH
7167: LD_INT 45
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 34
7176: PUSH
7177: LD_INT 28
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 34
7186: PUSH
7187: LD_INT 47
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: ST_TO_ADDR
// if not tmp then
7210: LD_VAR 0 2
7214: NOT
7215: IFFALSE 7219
// exit ;
7217: GO 7248
// for i in tmp do
7219: LD_ADDR_VAR 0 1
7223: PUSH
7224: LD_VAR 0 2
7228: PUSH
7229: FOR_IN
7230: IFFALSE 7246
// begin SetLives ( i , 0 ) ;
7232: LD_VAR 0 1
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: CALL_OW 234
// end ;
7244: GO 7229
7246: POP
7247: POP
// end ;
7248: PPOPN 2
7250: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7251: LD_EXP 22
7255: PUSH
7256: LD_EXP 28
7260: AND
7261: IFFALSE 7345
7263: GO 7265
7265: DISABLE
7266: LD_INT 0
7268: PPUSH
7269: PPUSH
// begin enable ;
7270: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7271: LD_ADDR_VAR 0 2
7275: PUSH
7276: LD_INT 22
7278: PUSH
7279: LD_OWVAR 2
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 69
7306: ST_TO_ADDR
// if not tmp then
7307: LD_VAR 0 2
7311: NOT
7312: IFFALSE 7316
// exit ;
7314: GO 7345
// for i in tmp do
7316: LD_ADDR_VAR 0 1
7320: PUSH
7321: LD_VAR 0 2
7325: PUSH
7326: FOR_IN
7327: IFFALSE 7343
// begin SetLives ( i , 0 ) ;
7329: LD_VAR 0 1
7333: PPUSH
7334: LD_INT 0
7336: PPUSH
7337: CALL_OW 234
// end ;
7341: GO 7326
7343: POP
7344: POP
// end ;
7345: PPOPN 2
7347: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7348: LD_EXP 22
7352: PUSH
7353: LD_EXP 25
7357: AND
7358: IFFALSE 7451
7360: GO 7362
7362: DISABLE
7363: LD_INT 0
7365: PPUSH
// begin enable ;
7366: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7367: LD_ADDR_VAR 0 1
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_OWVAR 2
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 2
7386: PUSH
7387: LD_INT 25
7389: PUSH
7390: LD_INT 5
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 9
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 25
7409: PUSH
7410: LD_INT 8
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: FOR_IN
7433: IFFALSE 7449
// begin SetClass ( i , 1 ) ;
7435: LD_VAR 0 1
7439: PPUSH
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 336
// end ;
7447: GO 7432
7449: POP
7450: POP
// end ;
7451: PPOPN 1
7453: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7454: LD_EXP 22
7458: PUSH
7459: LD_EXP 26
7463: AND
7464: PUSH
7465: LD_OWVAR 65
7469: PUSH
7470: LD_INT 7
7472: LESS
7473: AND
7474: IFFALSE 7488
7476: GO 7478
7478: DISABLE
// begin enable ;
7479: ENABLE
// game_speed := 7 ;
7480: LD_ADDR_OWVAR 65
7484: PUSH
7485: LD_INT 7
7487: ST_TO_ADDR
// end ;
7488: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7489: LD_EXP 22
7493: PUSH
7494: LD_EXP 29
7498: AND
7499: IFFALSE 7701
7501: GO 7503
7503: DISABLE
7504: LD_INT 0
7506: PPUSH
7507: PPUSH
7508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7509: LD_ADDR_VAR 0 3
7513: PUSH
7514: LD_INT 81
7516: PUSH
7517: LD_OWVAR 2
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 21
7528: PUSH
7529: LD_INT 1
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 69
7544: ST_TO_ADDR
// if not tmp then
7545: LD_VAR 0 3
7549: NOT
7550: IFFALSE 7554
// exit ;
7552: GO 7701
// if tmp > 5 then
7554: LD_VAR 0 3
7558: PUSH
7559: LD_INT 5
7561: GREATER
7562: IFFALSE 7574
// k := 5 else
7564: LD_ADDR_VAR 0 2
7568: PUSH
7569: LD_INT 5
7571: ST_TO_ADDR
7572: GO 7584
// k := tmp ;
7574: LD_ADDR_VAR 0 2
7578: PUSH
7579: LD_VAR 0 3
7583: ST_TO_ADDR
// for i := 1 to k do
7584: LD_ADDR_VAR 0 1
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_VAR 0 2
7598: PUSH
7599: FOR_TO
7600: IFFALSE 7699
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7602: LD_VAR 0 3
7606: PUSH
7607: LD_VAR 0 1
7611: ARRAY
7612: PPUSH
7613: LD_VAR 0 1
7617: PUSH
7618: LD_INT 4
7620: MOD
7621: PUSH
7622: LD_INT 1
7624: PLUS
7625: PPUSH
7626: CALL_OW 259
7630: PUSH
7631: LD_INT 10
7633: LESS
7634: IFFALSE 7697
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7636: LD_VAR 0 3
7640: PUSH
7641: LD_VAR 0 1
7645: ARRAY
7646: PPUSH
7647: LD_VAR 0 1
7651: PUSH
7652: LD_INT 4
7654: MOD
7655: PUSH
7656: LD_INT 1
7658: PLUS
7659: PPUSH
7660: LD_VAR 0 3
7664: PUSH
7665: LD_VAR 0 1
7669: ARRAY
7670: PPUSH
7671: LD_VAR 0 1
7675: PUSH
7676: LD_INT 4
7678: MOD
7679: PUSH
7680: LD_INT 1
7682: PLUS
7683: PPUSH
7684: CALL_OW 259
7688: PUSH
7689: LD_INT 1
7691: PLUS
7692: PPUSH
7693: CALL_OW 237
7697: GO 7599
7699: POP
7700: POP
// end ;
7701: PPOPN 3
7703: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7704: LD_EXP 22
7708: PUSH
7709: LD_EXP 30
7713: AND
7714: IFFALSE 7734
7716: GO 7718
7718: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7719: LD_INT 4
7721: PPUSH
7722: LD_OWVAR 2
7726: PPUSH
7727: LD_INT 0
7729: PPUSH
7730: CALL_OW 324
7734: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7735: LD_EXP 22
7739: PUSH
7740: LD_EXP 59
7744: AND
7745: IFFALSE 7765
7747: GO 7749
7749: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7750: LD_INT 19
7752: PPUSH
7753: LD_OWVAR 2
7757: PPUSH
7758: LD_INT 0
7760: PPUSH
7761: CALL_OW 324
7765: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7766: LD_EXP 22
7770: PUSH
7771: LD_EXP 31
7775: AND
7776: IFFALSE 7878
7778: GO 7780
7780: DISABLE
7781: LD_INT 0
7783: PPUSH
7784: PPUSH
// begin enable ;
7785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7786: LD_ADDR_VAR 0 2
7790: PUSH
7791: LD_INT 22
7793: PUSH
7794: LD_OWVAR 2
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: LD_INT 34
7808: PUSH
7809: LD_INT 11
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 34
7818: PUSH
7819: LD_INT 30
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PPUSH
7835: CALL_OW 69
7839: ST_TO_ADDR
// if not tmp then
7840: LD_VAR 0 2
7844: NOT
7845: IFFALSE 7849
// exit ;
7847: GO 7878
// for i in tmp do
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: LD_VAR 0 2
7858: PUSH
7859: FOR_IN
7860: IFFALSE 7876
// begin SetLives ( i , 0 ) ;
7862: LD_VAR 0 1
7866: PPUSH
7867: LD_INT 0
7869: PPUSH
7870: CALL_OW 234
// end ;
7874: GO 7859
7876: POP
7877: POP
// end ;
7878: PPOPN 2
7880: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7881: LD_EXP 22
7885: PUSH
7886: LD_EXP 32
7890: AND
7891: IFFALSE 7911
7893: GO 7895
7895: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7896: LD_INT 32
7898: PPUSH
7899: LD_OWVAR 2
7903: PPUSH
7904: LD_INT 0
7906: PPUSH
7907: CALL_OW 324
7911: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7912: LD_EXP 22
7916: PUSH
7917: LD_EXP 33
7921: AND
7922: IFFALSE 8103
7924: GO 7926
7926: DISABLE
7927: LD_INT 0
7929: PPUSH
7930: PPUSH
7931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7932: LD_ADDR_VAR 0 2
7936: PUSH
7937: LD_INT 22
7939: PUSH
7940: LD_OWVAR 2
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 33
7951: PUSH
7952: LD_INT 3
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PPUSH
7963: CALL_OW 69
7967: ST_TO_ADDR
// if not tmp then
7968: LD_VAR 0 2
7972: NOT
7973: IFFALSE 7977
// exit ;
7975: GO 8103
// side := 0 ;
7977: LD_ADDR_VAR 0 3
7981: PUSH
7982: LD_INT 0
7984: ST_TO_ADDR
// for i := 1 to 8 do
7985: LD_ADDR_VAR 0 1
7989: PUSH
7990: DOUBLE
7991: LD_INT 1
7993: DEC
7994: ST_TO_ADDR
7995: LD_INT 8
7997: PUSH
7998: FOR_TO
7999: IFFALSE 8047
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8001: LD_OWVAR 2
8005: PUSH
8006: LD_VAR 0 1
8010: NONEQUAL
8011: PUSH
8012: LD_OWVAR 2
8016: PPUSH
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 81
8026: PUSH
8027: LD_INT 2
8029: EQUAL
8030: AND
8031: IFFALSE 8045
// begin side := i ;
8033: LD_ADDR_VAR 0 3
8037: PUSH
8038: LD_VAR 0 1
8042: ST_TO_ADDR
// break ;
8043: GO 8047
// end ;
8045: GO 7998
8047: POP
8048: POP
// if not side then
8049: LD_VAR 0 3
8053: NOT
8054: IFFALSE 8058
// exit ;
8056: GO 8103
// for i := 1 to tmp do
8058: LD_ADDR_VAR 0 1
8062: PUSH
8063: DOUBLE
8064: LD_INT 1
8066: DEC
8067: ST_TO_ADDR
8068: LD_VAR 0 2
8072: PUSH
8073: FOR_TO
8074: IFFALSE 8101
// if Prob ( 60 ) then
8076: LD_INT 60
8078: PPUSH
8079: CALL_OW 13
8083: IFFALSE 8099
// SetSide ( i , side ) ;
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 3
8094: PPUSH
8095: CALL_OW 235
8099: GO 8073
8101: POP
8102: POP
// end ;
8103: PPOPN 3
8105: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8106: LD_EXP 22
8110: PUSH
8111: LD_EXP 35
8115: AND
8116: IFFALSE 8235
8118: GO 8120
8120: DISABLE
8121: LD_INT 0
8123: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8124: LD_ADDR_VAR 0 1
8128: PUSH
8129: LD_INT 22
8131: PUSH
8132: LD_OWVAR 2
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 1
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 3
8153: PUSH
8154: LD_INT 23
8156: PUSH
8157: LD_INT 0
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: PUSH
8178: FOR_IN
8179: IFFALSE 8233
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 257
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: LD_INT 3
8199: PUSH
8200: LD_INT 4
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: IN
8209: IFFALSE 8231
// SetClass ( un , rand ( 1 , 4 ) ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 1
8218: PPUSH
8219: LD_INT 4
8221: PPUSH
8222: CALL_OW 12
8226: PPUSH
8227: CALL_OW 336
8231: GO 8178
8233: POP
8234: POP
// end ;
8235: PPOPN 1
8237: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8238: LD_EXP 22
8242: PUSH
8243: LD_EXP 34
8247: AND
8248: IFFALSE 8327
8250: GO 8252
8252: DISABLE
8253: LD_INT 0
8255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8256: LD_ADDR_VAR 0 1
8260: PUSH
8261: LD_INT 22
8263: PUSH
8264: LD_OWVAR 2
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 21
8275: PUSH
8276: LD_INT 3
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PPUSH
8287: CALL_OW 69
8291: ST_TO_ADDR
// if not tmp then
8292: LD_VAR 0 1
8296: NOT
8297: IFFALSE 8301
// exit ;
8299: GO 8327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8301: LD_VAR 0 1
8305: PUSH
8306: LD_INT 1
8308: PPUSH
8309: LD_VAR 0 1
8313: PPUSH
8314: CALL_OW 12
8318: ARRAY
8319: PPUSH
8320: LD_INT 100
8322: PPUSH
8323: CALL_OW 234
// end ;
8327: PPOPN 1
8329: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8330: LD_EXP 22
8334: PUSH
8335: LD_EXP 36
8339: AND
8340: IFFALSE 8438
8342: GO 8344
8344: DISABLE
8345: LD_INT 0
8347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8348: LD_ADDR_VAR 0 1
8352: PUSH
8353: LD_INT 22
8355: PUSH
8356: LD_OWVAR 2
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 21
8367: PUSH
8368: LD_INT 1
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 69
8383: ST_TO_ADDR
// if not tmp then
8384: LD_VAR 0 1
8388: NOT
8389: IFFALSE 8393
// exit ;
8391: GO 8438
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8393: LD_VAR 0 1
8397: PUSH
8398: LD_INT 1
8400: PPUSH
8401: LD_VAR 0 1
8405: PPUSH
8406: CALL_OW 12
8410: ARRAY
8411: PPUSH
8412: LD_INT 1
8414: PPUSH
8415: LD_INT 4
8417: PPUSH
8418: CALL_OW 12
8422: PPUSH
8423: LD_INT 3000
8425: PPUSH
8426: LD_INT 9000
8428: PPUSH
8429: CALL_OW 12
8433: PPUSH
8434: CALL_OW 492
// end ;
8438: PPOPN 1
8440: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8441: LD_EXP 22
8445: PUSH
8446: LD_EXP 37
8450: AND
8451: IFFALSE 8471
8453: GO 8455
8455: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8456: LD_INT 1
8458: PPUSH
8459: LD_OWVAR 2
8463: PPUSH
8464: LD_INT 0
8466: PPUSH
8467: CALL_OW 324
8471: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8472: LD_EXP 22
8476: PUSH
8477: LD_EXP 38
8481: AND
8482: IFFALSE 8565
8484: GO 8486
8486: DISABLE
8487: LD_INT 0
8489: PPUSH
8490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8491: LD_ADDR_VAR 0 2
8495: PUSH
8496: LD_INT 22
8498: PUSH
8499: LD_OWVAR 2
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 21
8510: PUSH
8511: LD_INT 3
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PPUSH
8522: CALL_OW 69
8526: ST_TO_ADDR
// if not tmp then
8527: LD_VAR 0 2
8531: NOT
8532: IFFALSE 8536
// exit ;
8534: GO 8565
// for i in tmp do
8536: LD_ADDR_VAR 0 1
8540: PUSH
8541: LD_VAR 0 2
8545: PUSH
8546: FOR_IN
8547: IFFALSE 8563
// SetBLevel ( i , 10 ) ;
8549: LD_VAR 0 1
8553: PPUSH
8554: LD_INT 10
8556: PPUSH
8557: CALL_OW 241
8561: GO 8546
8563: POP
8564: POP
// end ;
8565: PPOPN 2
8567: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8568: LD_EXP 22
8572: PUSH
8573: LD_EXP 39
8577: AND
8578: IFFALSE 8689
8580: GO 8582
8582: DISABLE
8583: LD_INT 0
8585: PPUSH
8586: PPUSH
8587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8588: LD_ADDR_VAR 0 3
8592: PUSH
8593: LD_INT 22
8595: PUSH
8596: LD_OWVAR 2
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_INT 25
8607: PUSH
8608: LD_INT 1
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PPUSH
8619: CALL_OW 69
8623: ST_TO_ADDR
// if not tmp then
8624: LD_VAR 0 3
8628: NOT
8629: IFFALSE 8633
// exit ;
8631: GO 8689
// un := tmp [ rand ( 1 , tmp ) ] ;
8633: LD_ADDR_VAR 0 2
8637: PUSH
8638: LD_VAR 0 3
8642: PUSH
8643: LD_INT 1
8645: PPUSH
8646: LD_VAR 0 3
8650: PPUSH
8651: CALL_OW 12
8655: ARRAY
8656: ST_TO_ADDR
// if Crawls ( un ) then
8657: LD_VAR 0 2
8661: PPUSH
8662: CALL_OW 318
8666: IFFALSE 8677
// ComWalk ( un ) ;
8668: LD_VAR 0 2
8672: PPUSH
8673: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8677: LD_VAR 0 2
8681: PPUSH
8682: LD_INT 5
8684: PPUSH
8685: CALL_OW 336
// end ;
8689: PPOPN 3
8691: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8692: LD_EXP 22
8696: PUSH
8697: LD_EXP 40
8701: AND
8702: PUSH
8703: LD_OWVAR 67
8707: PUSH
8708: LD_INT 3
8710: LESS
8711: AND
8712: IFFALSE 8731
8714: GO 8716
8716: DISABLE
// Difficulty := Difficulty + 1 ;
8717: LD_ADDR_OWVAR 67
8721: PUSH
8722: LD_OWVAR 67
8726: PUSH
8727: LD_INT 1
8729: PLUS
8730: ST_TO_ADDR
8731: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8732: LD_EXP 22
8736: PUSH
8737: LD_EXP 41
8741: AND
8742: IFFALSE 8845
8744: GO 8746
8746: DISABLE
8747: LD_INT 0
8749: PPUSH
// begin for i := 1 to 5 do
8750: LD_ADDR_VAR 0 1
8754: PUSH
8755: DOUBLE
8756: LD_INT 1
8758: DEC
8759: ST_TO_ADDR
8760: LD_INT 5
8762: PUSH
8763: FOR_TO
8764: IFFALSE 8843
// begin uc_nation := nation_nature ;
8766: LD_ADDR_OWVAR 21
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// uc_side := 0 ;
8774: LD_ADDR_OWVAR 20
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8782: LD_ADDR_OWVAR 29
8786: PUSH
8787: LD_INT 12
8789: PUSH
8790: LD_INT 12
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: ST_TO_ADDR
// hc_agressivity := 20 ;
8797: LD_ADDR_OWVAR 35
8801: PUSH
8802: LD_INT 20
8804: ST_TO_ADDR
// hc_class := class_tiger ;
8805: LD_ADDR_OWVAR 28
8809: PUSH
8810: LD_INT 14
8812: ST_TO_ADDR
// hc_gallery :=  ;
8813: LD_ADDR_OWVAR 33
8817: PUSH
8818: LD_STRING 
8820: ST_TO_ADDR
// hc_name :=  ;
8821: LD_ADDR_OWVAR 26
8825: PUSH
8826: LD_STRING 
8828: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8829: CALL_OW 44
8833: PPUSH
8834: LD_INT 0
8836: PPUSH
8837: CALL_OW 51
// end ;
8841: GO 8763
8843: POP
8844: POP
// end ;
8845: PPOPN 1
8847: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8848: LD_EXP 22
8852: PUSH
8853: LD_EXP 42
8857: AND
8858: IFFALSE 8867
8860: GO 8862
8862: DISABLE
// StreamSibBomb ;
8863: CALL 8868 0 0
8867: END
// export function StreamSibBomb ; var i , x , y ; begin
8868: LD_INT 0
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
// result := false ;
8874: LD_ADDR_VAR 0 1
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// for i := 1 to 16 do
8882: LD_ADDR_VAR 0 2
8886: PUSH
8887: DOUBLE
8888: LD_INT 1
8890: DEC
8891: ST_TO_ADDR
8892: LD_INT 16
8894: PUSH
8895: FOR_TO
8896: IFFALSE 9095
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8898: LD_ADDR_VAR 0 3
8902: PUSH
8903: LD_INT 10
8905: PUSH
8906: LD_INT 20
8908: PUSH
8909: LD_INT 30
8911: PUSH
8912: LD_INT 40
8914: PUSH
8915: LD_INT 50
8917: PUSH
8918: LD_INT 60
8920: PUSH
8921: LD_INT 70
8923: PUSH
8924: LD_INT 80
8926: PUSH
8927: LD_INT 90
8929: PUSH
8930: LD_INT 100
8932: PUSH
8933: LD_INT 110
8935: PUSH
8936: LD_INT 120
8938: PUSH
8939: LD_INT 130
8941: PUSH
8942: LD_INT 140
8944: PUSH
8945: LD_INT 150
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 1
8967: PPUSH
8968: LD_INT 15
8970: PPUSH
8971: CALL_OW 12
8975: ARRAY
8976: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8977: LD_ADDR_VAR 0 4
8981: PUSH
8982: LD_INT 10
8984: PUSH
8985: LD_INT 20
8987: PUSH
8988: LD_INT 30
8990: PUSH
8991: LD_INT 40
8993: PUSH
8994: LD_INT 50
8996: PUSH
8997: LD_INT 60
8999: PUSH
9000: LD_INT 70
9002: PUSH
9003: LD_INT 80
9005: PUSH
9006: LD_INT 90
9008: PUSH
9009: LD_INT 100
9011: PUSH
9012: LD_INT 110
9014: PUSH
9015: LD_INT 120
9017: PUSH
9018: LD_INT 130
9020: PUSH
9021: LD_INT 140
9023: PUSH
9024: LD_INT 150
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 1
9046: PPUSH
9047: LD_INT 15
9049: PPUSH
9050: CALL_OW 12
9054: ARRAY
9055: ST_TO_ADDR
// if ValidHex ( x , y ) then
9056: LD_VAR 0 3
9060: PPUSH
9061: LD_VAR 0 4
9065: PPUSH
9066: CALL_OW 488
9070: IFFALSE 9093
// begin result := [ x , y ] ;
9072: LD_ADDR_VAR 0 1
9076: PUSH
9077: LD_VAR 0 3
9081: PUSH
9082: LD_VAR 0 4
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: ST_TO_ADDR
// break ;
9091: GO 9095
// end ; end ;
9093: GO 8895
9095: POP
9096: POP
// if result then
9097: LD_VAR 0 1
9101: IFFALSE 9161
// begin ToLua ( playSibBomb() ) ;
9103: LD_STRING playSibBomb()
9105: PPUSH
9106: CALL_OW 559
// wait ( 0 0$14 ) ;
9110: LD_INT 490
9112: PPUSH
9113: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9117: LD_VAR 0 1
9121: PUSH
9122: LD_INT 1
9124: ARRAY
9125: PPUSH
9126: LD_VAR 0 1
9130: PUSH
9131: LD_INT 2
9133: ARRAY
9134: PPUSH
9135: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9139: LD_VAR 0 1
9143: PUSH
9144: LD_INT 1
9146: ARRAY
9147: PPUSH
9148: LD_VAR 0 1
9152: PUSH
9153: LD_INT 2
9155: ARRAY
9156: PPUSH
9157: CALL_OW 429
// end ; end ;
9161: LD_VAR 0 1
9165: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9166: LD_EXP 22
9170: PUSH
9171: LD_EXP 44
9175: AND
9176: IFFALSE 9188
9178: GO 9180
9180: DISABLE
// YouLost (  ) ;
9181: LD_STRING 
9183: PPUSH
9184: CALL_OW 104
9188: END
// every 0 0$1 trigger StreamModeActive and sFog do
9189: LD_EXP 22
9193: PUSH
9194: LD_EXP 43
9198: AND
9199: IFFALSE 9213
9201: GO 9203
9203: DISABLE
// FogOff ( your_side ) ;
9204: LD_OWVAR 2
9208: PPUSH
9209: CALL_OW 344
9213: END
// every 0 0$1 trigger StreamModeActive and sSun do
9214: LD_EXP 22
9218: PUSH
9219: LD_EXP 45
9223: AND
9224: IFFALSE 9252
9226: GO 9228
9228: DISABLE
// begin solar_recharge_percent := 0 ;
9229: LD_ADDR_OWVAR 79
9233: PUSH
9234: LD_INT 0
9236: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9237: LD_INT 10500
9239: PPUSH
9240: CALL_OW 67
// solar_recharge_percent := 100 ;
9244: LD_ADDR_OWVAR 79
9248: PUSH
9249: LD_INT 100
9251: ST_TO_ADDR
// end ;
9252: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9253: LD_EXP 22
9257: PUSH
9258: LD_EXP 46
9262: AND
9263: IFFALSE 9502
9265: GO 9267
9267: DISABLE
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
9272: PPUSH
// begin tmp := [ ] ;
9273: LD_ADDR_VAR 0 3
9277: PUSH
9278: EMPTY
9279: ST_TO_ADDR
// for i := 1 to 6 do
9280: LD_ADDR_VAR 0 1
9284: PUSH
9285: DOUBLE
9286: LD_INT 1
9288: DEC
9289: ST_TO_ADDR
9290: LD_INT 6
9292: PUSH
9293: FOR_TO
9294: IFFALSE 9399
// begin uc_nation := nation_nature ;
9296: LD_ADDR_OWVAR 21
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// uc_side := 0 ;
9304: LD_ADDR_OWVAR 20
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9312: LD_ADDR_OWVAR 29
9316: PUSH
9317: LD_INT 12
9319: PUSH
9320: LD_INT 12
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: ST_TO_ADDR
// hc_agressivity := 20 ;
9327: LD_ADDR_OWVAR 35
9331: PUSH
9332: LD_INT 20
9334: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9335: LD_ADDR_OWVAR 28
9339: PUSH
9340: LD_INT 17
9342: ST_TO_ADDR
// hc_gallery :=  ;
9343: LD_ADDR_OWVAR 33
9347: PUSH
9348: LD_STRING 
9350: ST_TO_ADDR
// hc_name :=  ;
9351: LD_ADDR_OWVAR 26
9355: PUSH
9356: LD_STRING 
9358: ST_TO_ADDR
// un := CreateHuman ;
9359: LD_ADDR_VAR 0 2
9363: PUSH
9364: CALL_OW 44
9368: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9369: LD_VAR 0 2
9373: PPUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 51
// tmp := tmp ^ un ;
9381: LD_ADDR_VAR 0 3
9385: PUSH
9386: LD_VAR 0 3
9390: PUSH
9391: LD_VAR 0 2
9395: ADD
9396: ST_TO_ADDR
// end ;
9397: GO 9293
9399: POP
9400: POP
// repeat wait ( 0 0$1 ) ;
9401: LD_INT 35
9403: PPUSH
9404: CALL_OW 67
// for un in tmp do
9408: LD_ADDR_VAR 0 2
9412: PUSH
9413: LD_VAR 0 3
9417: PUSH
9418: FOR_IN
9419: IFFALSE 9493
// begin if IsDead ( un ) then
9421: LD_VAR 0 2
9425: PPUSH
9426: CALL_OW 301
9430: IFFALSE 9450
// begin tmp := tmp diff un ;
9432: LD_ADDR_VAR 0 3
9436: PUSH
9437: LD_VAR 0 3
9441: PUSH
9442: LD_VAR 0 2
9446: DIFF
9447: ST_TO_ADDR
// continue ;
9448: GO 9418
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9450: LD_VAR 0 2
9454: PPUSH
9455: LD_INT 3
9457: PUSH
9458: LD_INT 22
9460: PUSH
9461: LD_INT 0
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 69
9476: PPUSH
9477: LD_VAR 0 2
9481: PPUSH
9482: CALL_OW 74
9486: PPUSH
9487: CALL_OW 115
// end ;
9491: GO 9418
9493: POP
9494: POP
// until not tmp ;
9495: LD_VAR 0 3
9499: NOT
9500: IFFALSE 9401
// end ;
9502: PPOPN 3
9504: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9505: LD_EXP 22
9509: PUSH
9510: LD_EXP 47
9514: AND
9515: IFFALSE 9569
9517: GO 9519
9519: DISABLE
// begin ToLua ( displayTroll(); ) ;
9520: LD_STRING displayTroll();
9522: PPUSH
9523: CALL_OW 559
// wait ( 3 3$00 ) ;
9527: LD_INT 6300
9529: PPUSH
9530: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9534: LD_STRING hideTroll();
9536: PPUSH
9537: CALL_OW 559
// wait ( 1 1$00 ) ;
9541: LD_INT 2100
9543: PPUSH
9544: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9548: LD_STRING displayTroll();
9550: PPUSH
9551: CALL_OW 559
// wait ( 1 1$00 ) ;
9555: LD_INT 2100
9557: PPUSH
9558: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9562: LD_STRING hideTroll();
9564: PPUSH
9565: CALL_OW 559
// end ;
9569: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9570: LD_EXP 22
9574: PUSH
9575: LD_EXP 48
9579: AND
9580: IFFALSE 9643
9582: GO 9584
9584: DISABLE
9585: LD_INT 0
9587: PPUSH
// begin p := 0 ;
9588: LD_ADDR_VAR 0 1
9592: PUSH
9593: LD_INT 0
9595: ST_TO_ADDR
// repeat game_speed := 1 ;
9596: LD_ADDR_OWVAR 65
9600: PUSH
9601: LD_INT 1
9603: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9604: LD_INT 35
9606: PPUSH
9607: CALL_OW 67
// p := p + 1 ;
9611: LD_ADDR_VAR 0 1
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: LD_INT 1
9623: PLUS
9624: ST_TO_ADDR
// until p >= 60 ;
9625: LD_VAR 0 1
9629: PUSH
9630: LD_INT 60
9632: GREATEREQUAL
9633: IFFALSE 9596
// game_speed := 4 ;
9635: LD_ADDR_OWVAR 65
9639: PUSH
9640: LD_INT 4
9642: ST_TO_ADDR
// end ;
9643: PPOPN 1
9645: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9646: LD_EXP 22
9650: PUSH
9651: LD_EXP 49
9655: AND
9656: IFFALSE 9802
9658: GO 9660
9660: DISABLE
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9665: LD_ADDR_VAR 0 1
9669: PUSH
9670: LD_INT 22
9672: PUSH
9673: LD_OWVAR 2
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: LD_INT 2
9684: PUSH
9685: LD_INT 30
9687: PUSH
9688: LD_INT 0
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 30
9697: PUSH
9698: LD_INT 1
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PPUSH
9714: CALL_OW 69
9718: ST_TO_ADDR
// if not depot then
9719: LD_VAR 0 1
9723: NOT
9724: IFFALSE 9728
// exit ;
9726: GO 9802
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9728: LD_ADDR_VAR 0 2
9732: PUSH
9733: LD_VAR 0 1
9737: PUSH
9738: LD_INT 1
9740: PPUSH
9741: LD_VAR 0 1
9745: PPUSH
9746: CALL_OW 12
9750: ARRAY
9751: PPUSH
9752: CALL_OW 274
9756: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9757: LD_VAR 0 2
9761: PPUSH
9762: LD_INT 1
9764: PPUSH
9765: LD_INT 0
9767: PPUSH
9768: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9772: LD_VAR 0 2
9776: PPUSH
9777: LD_INT 2
9779: PPUSH
9780: LD_INT 0
9782: PPUSH
9783: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9787: LD_VAR 0 2
9791: PPUSH
9792: LD_INT 3
9794: PPUSH
9795: LD_INT 0
9797: PPUSH
9798: CALL_OW 277
// end ;
9802: PPOPN 2
9804: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9805: LD_EXP 22
9809: PUSH
9810: LD_EXP 50
9814: AND
9815: IFFALSE 9912
9817: GO 9819
9819: DISABLE
9820: LD_INT 0
9822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9823: LD_ADDR_VAR 0 1
9827: PUSH
9828: LD_INT 22
9830: PUSH
9831: LD_OWVAR 2
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 3
9852: PUSH
9853: LD_INT 23
9855: PUSH
9856: LD_INT 0
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 69
9876: ST_TO_ADDR
// if not tmp then
9877: LD_VAR 0 1
9881: NOT
9882: IFFALSE 9886
// exit ;
9884: GO 9912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9886: LD_VAR 0 1
9890: PUSH
9891: LD_INT 1
9893: PPUSH
9894: LD_VAR 0 1
9898: PPUSH
9899: CALL_OW 12
9903: ARRAY
9904: PPUSH
9905: LD_INT 200
9907: PPUSH
9908: CALL_OW 234
// end ;
9912: PPOPN 1
9914: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9915: LD_EXP 22
9919: PUSH
9920: LD_EXP 51
9924: AND
9925: IFFALSE 10004
9927: GO 9929
9929: DISABLE
9930: LD_INT 0
9932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9933: LD_ADDR_VAR 0 1
9937: PUSH
9938: LD_INT 22
9940: PUSH
9941: LD_OWVAR 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 21
9952: PUSH
9953: LD_INT 2
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: ST_TO_ADDR
// if not tmp then
9969: LD_VAR 0 1
9973: NOT
9974: IFFALSE 9978
// exit ;
9976: GO 10004
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9978: LD_VAR 0 1
9982: PUSH
9983: LD_INT 1
9985: PPUSH
9986: LD_VAR 0 1
9990: PPUSH
9991: CALL_OW 12
9995: ARRAY
9996: PPUSH
9997: LD_INT 60
9999: PPUSH
10000: CALL_OW 234
// end ;
10004: PPOPN 1
10006: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10007: LD_EXP 22
10011: PUSH
10012: LD_EXP 52
10016: AND
10017: IFFALSE 10116
10019: GO 10021
10021: DISABLE
10022: LD_INT 0
10024: PPUSH
10025: PPUSH
// begin enable ;
10026: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10027: LD_ADDR_VAR 0 1
10031: PUSH
10032: LD_INT 22
10034: PUSH
10035: LD_OWVAR 2
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 61
10046: PUSH
10047: EMPTY
10048: LIST
10049: PUSH
10050: LD_INT 33
10052: PUSH
10053: LD_INT 2
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: LIST
10064: PPUSH
10065: CALL_OW 69
10069: ST_TO_ADDR
// if not tmp then
10070: LD_VAR 0 1
10074: NOT
10075: IFFALSE 10079
// exit ;
10077: GO 10116
// for i in tmp do
10079: LD_ADDR_VAR 0 2
10083: PUSH
10084: LD_VAR 0 1
10088: PUSH
10089: FOR_IN
10090: IFFALSE 10114
// if IsControledBy ( i ) then
10092: LD_VAR 0 2
10096: PPUSH
10097: CALL_OW 312
10101: IFFALSE 10112
// ComUnlink ( i ) ;
10103: LD_VAR 0 2
10107: PPUSH
10108: CALL_OW 136
10112: GO 10089
10114: POP
10115: POP
// end ;
10116: PPOPN 2
10118: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10119: LD_EXP 22
10123: PUSH
10124: LD_EXP 53
10128: AND
10129: IFFALSE 10269
10131: GO 10133
10133: DISABLE
10134: LD_INT 0
10136: PPUSH
10137: PPUSH
// begin ToLua ( displayPowell(); ) ;
10138: LD_STRING displayPowell();
10140: PPUSH
10141: CALL_OW 559
// uc_side := 0 ;
10145: LD_ADDR_OWVAR 20
10149: PUSH
10150: LD_INT 0
10152: ST_TO_ADDR
// uc_nation := 2 ;
10153: LD_ADDR_OWVAR 21
10157: PUSH
10158: LD_INT 2
10160: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10161: LD_ADDR_OWVAR 37
10165: PUSH
10166: LD_INT 14
10168: ST_TO_ADDR
// vc_engine := engine_siberite ;
10169: LD_ADDR_OWVAR 39
10173: PUSH
10174: LD_INT 3
10176: ST_TO_ADDR
// vc_control := control_apeman ;
10177: LD_ADDR_OWVAR 38
10181: PUSH
10182: LD_INT 5
10184: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10185: LD_ADDR_OWVAR 40
10189: PUSH
10190: LD_INT 29
10192: ST_TO_ADDR
// un := CreateVehicle ;
10193: LD_ADDR_VAR 0 2
10197: PUSH
10198: CALL_OW 45
10202: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10203: LD_VAR 0 2
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10215: LD_INT 35
10217: PPUSH
10218: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10222: LD_VAR 0 2
10226: PPUSH
10227: LD_INT 22
10229: PUSH
10230: LD_OWVAR 2
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 69
10243: PPUSH
10244: LD_VAR 0 2
10248: PPUSH
10249: CALL_OW 74
10253: PPUSH
10254: CALL_OW 115
// until IsDead ( un ) ;
10258: LD_VAR 0 2
10262: PPUSH
10263: CALL_OW 301
10267: IFFALSE 10215
// end ;
10269: PPOPN 2
10271: END
// every 0 0$1 trigger StreamModeActive and sStu do
10272: LD_EXP 22
10276: PUSH
10277: LD_EXP 61
10281: AND
10282: IFFALSE 10298
10284: GO 10286
10286: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10287: LD_STRING displayStucuk();
10289: PPUSH
10290: CALL_OW 559
// ResetFog ;
10294: CALL_OW 335
// end ;
10298: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10299: LD_EXP 22
10303: PUSH
10304: LD_EXP 54
10308: AND
10309: IFFALSE 10450
10311: GO 10313
10313: DISABLE
10314: LD_INT 0
10316: PPUSH
10317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10318: LD_ADDR_VAR 0 2
10322: PUSH
10323: LD_INT 22
10325: PUSH
10326: LD_OWVAR 2
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 21
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: ST_TO_ADDR
// if not tmp then
10354: LD_VAR 0 2
10358: NOT
10359: IFFALSE 10363
// exit ;
10361: GO 10450
// un := tmp [ rand ( 1 , tmp ) ] ;
10363: LD_ADDR_VAR 0 1
10367: PUSH
10368: LD_VAR 0 2
10372: PUSH
10373: LD_INT 1
10375: PPUSH
10376: LD_VAR 0 2
10380: PPUSH
10381: CALL_OW 12
10385: ARRAY
10386: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10387: LD_VAR 0 1
10391: PPUSH
10392: LD_INT 0
10394: PPUSH
10395: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10399: LD_VAR 0 1
10403: PPUSH
10404: LD_OWVAR 3
10408: PUSH
10409: LD_VAR 0 1
10413: DIFF
10414: PPUSH
10415: LD_VAR 0 1
10419: PPUSH
10420: CALL_OW 74
10424: PPUSH
10425: CALL_OW 115
// wait ( 0 0$20 ) ;
10429: LD_INT 700
10431: PPUSH
10432: CALL_OW 67
// SetSide ( un , your_side ) ;
10436: LD_VAR 0 1
10440: PPUSH
10441: LD_OWVAR 2
10445: PPUSH
10446: CALL_OW 235
// end ;
10450: PPOPN 2
10452: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10453: LD_EXP 22
10457: PUSH
10458: LD_EXP 55
10462: AND
10463: IFFALSE 10569
10465: GO 10467
10467: DISABLE
10468: LD_INT 0
10470: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10471: LD_ADDR_VAR 0 1
10475: PUSH
10476: LD_INT 22
10478: PUSH
10479: LD_OWVAR 2
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: LD_INT 2
10490: PUSH
10491: LD_INT 30
10493: PUSH
10494: LD_INT 0
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 30
10503: PUSH
10504: LD_INT 1
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PPUSH
10520: CALL_OW 69
10524: ST_TO_ADDR
// if not depot then
10525: LD_VAR 0 1
10529: NOT
10530: IFFALSE 10534
// exit ;
10532: GO 10569
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10534: LD_VAR 0 1
10538: PUSH
10539: LD_INT 1
10541: ARRAY
10542: PPUSH
10543: CALL_OW 250
10547: PPUSH
10548: LD_VAR 0 1
10552: PUSH
10553: LD_INT 1
10555: ARRAY
10556: PPUSH
10557: CALL_OW 251
10561: PPUSH
10562: LD_INT 70
10564: PPUSH
10565: CALL_OW 495
// end ;
10569: PPOPN 1
10571: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10572: LD_EXP 22
10576: PUSH
10577: LD_EXP 56
10581: AND
10582: IFFALSE 10793
10584: GO 10586
10586: DISABLE
10587: LD_INT 0
10589: PPUSH
10590: PPUSH
10591: PPUSH
10592: PPUSH
10593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10594: LD_ADDR_VAR 0 5
10598: PUSH
10599: LD_INT 22
10601: PUSH
10602: LD_OWVAR 2
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 21
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 69
10629: ST_TO_ADDR
// if not tmp then
10630: LD_VAR 0 5
10634: NOT
10635: IFFALSE 10639
// exit ;
10637: GO 10793
// for i in tmp do
10639: LD_ADDR_VAR 0 1
10643: PUSH
10644: LD_VAR 0 5
10648: PUSH
10649: FOR_IN
10650: IFFALSE 10791
// begin d := rand ( 0 , 5 ) ;
10652: LD_ADDR_VAR 0 4
10656: PUSH
10657: LD_INT 0
10659: PPUSH
10660: LD_INT 5
10662: PPUSH
10663: CALL_OW 12
10667: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10668: LD_ADDR_VAR 0 2
10672: PUSH
10673: LD_VAR 0 1
10677: PPUSH
10678: CALL_OW 250
10682: PPUSH
10683: LD_VAR 0 4
10687: PPUSH
10688: LD_INT 3
10690: PPUSH
10691: LD_INT 12
10693: PPUSH
10694: CALL_OW 12
10698: PPUSH
10699: CALL_OW 272
10703: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 251
10718: PPUSH
10719: LD_VAR 0 4
10723: PPUSH
10724: LD_INT 3
10726: PPUSH
10727: LD_INT 12
10729: PPUSH
10730: CALL_OW 12
10734: PPUSH
10735: CALL_OW 273
10739: ST_TO_ADDR
// if ValidHex ( x , y ) then
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: CALL_OW 488
10754: IFFALSE 10789
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10756: LD_VAR 0 1
10760: PPUSH
10761: LD_VAR 0 2
10765: PPUSH
10766: LD_VAR 0 3
10770: PPUSH
10771: LD_INT 3
10773: PPUSH
10774: LD_INT 6
10776: PPUSH
10777: CALL_OW 12
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 483
// end ;
10789: GO 10649
10791: POP
10792: POP
// end ;
10793: PPOPN 5
10795: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10796: LD_EXP 22
10800: PUSH
10801: LD_EXP 57
10805: AND
10806: IFFALSE 10900
10808: GO 10810
10810: DISABLE
10811: LD_INT 0
10813: PPUSH
10814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10815: LD_ADDR_VAR 0 2
10819: PUSH
10820: LD_INT 22
10822: PUSH
10823: LD_OWVAR 2
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 32
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 21
10844: PUSH
10845: LD_INT 2
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: ST_TO_ADDR
// if not tmp then
10862: LD_VAR 0 2
10866: NOT
10867: IFFALSE 10871
// exit ;
10869: GO 10900
// for i in tmp do
10871: LD_ADDR_VAR 0 1
10875: PUSH
10876: LD_VAR 0 2
10880: PUSH
10881: FOR_IN
10882: IFFALSE 10898
// SetFuel ( i , 0 ) ;
10884: LD_VAR 0 1
10888: PPUSH
10889: LD_INT 0
10891: PPUSH
10892: CALL_OW 240
10896: GO 10881
10898: POP
10899: POP
// end ;
10900: PPOPN 2
10902: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10903: LD_EXP 22
10907: PUSH
10908: LD_EXP 58
10912: AND
10913: IFFALSE 10979
10915: GO 10917
10917: DISABLE
10918: LD_INT 0
10920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10921: LD_ADDR_VAR 0 1
10925: PUSH
10926: LD_INT 22
10928: PUSH
10929: LD_OWVAR 2
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 30
10940: PUSH
10941: LD_INT 29
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 69
10956: ST_TO_ADDR
// if not tmp then
10957: LD_VAR 0 1
10961: NOT
10962: IFFALSE 10966
// exit ;
10964: GO 10979
// DestroyUnit ( tmp [ 1 ] ) ;
10966: LD_VAR 0 1
10970: PUSH
10971: LD_INT 1
10973: ARRAY
10974: PPUSH
10975: CALL_OW 65
// end ;
10979: PPOPN 1
10981: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10982: LD_EXP 22
10986: PUSH
10987: LD_EXP 60
10991: AND
10992: IFFALSE 11121
10994: GO 10996
10996: DISABLE
10997: LD_INT 0
10999: PPUSH
// begin uc_side := 0 ;
11000: LD_ADDR_OWVAR 20
11004: PUSH
11005: LD_INT 0
11007: ST_TO_ADDR
// uc_nation := nation_arabian ;
11008: LD_ADDR_OWVAR 21
11012: PUSH
11013: LD_INT 2
11015: ST_TO_ADDR
// hc_gallery :=  ;
11016: LD_ADDR_OWVAR 33
11020: PUSH
11021: LD_STRING 
11023: ST_TO_ADDR
// hc_name :=  ;
11024: LD_ADDR_OWVAR 26
11028: PUSH
11029: LD_STRING 
11031: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11032: LD_INT 1
11034: PPUSH
11035: LD_INT 11
11037: PPUSH
11038: LD_INT 10
11040: PPUSH
11041: CALL_OW 380
// un := CreateHuman ;
11045: LD_ADDR_VAR 0 1
11049: PUSH
11050: CALL_OW 44
11054: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11055: LD_VAR 0 1
11059: PPUSH
11060: LD_INT 1
11062: PPUSH
11063: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11067: LD_INT 35
11069: PPUSH
11070: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11074: LD_VAR 0 1
11078: PPUSH
11079: LD_INT 22
11081: PUSH
11082: LD_OWVAR 2
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 69
11095: PPUSH
11096: LD_VAR 0 1
11100: PPUSH
11101: CALL_OW 74
11105: PPUSH
11106: CALL_OW 115
// until IsDead ( un ) ;
11110: LD_VAR 0 1
11114: PPUSH
11115: CALL_OW 301
11119: IFFALSE 11067
// end ;
11121: PPOPN 1
11123: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11124: LD_EXP 22
11128: PUSH
11129: LD_EXP 62
11133: AND
11134: IFFALSE 11146
11136: GO 11138
11138: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11139: LD_STRING earthquake(getX(game), 0, 32)
11141: PPUSH
11142: CALL_OW 559
11146: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11147: LD_EXP 22
11151: PUSH
11152: LD_EXP 63
11156: AND
11157: IFFALSE 11248
11159: GO 11161
11161: DISABLE
11162: LD_INT 0
11164: PPUSH
// begin enable ;
11165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11166: LD_ADDR_VAR 0 1
11170: PUSH
11171: LD_INT 22
11173: PUSH
11174: LD_OWVAR 2
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 21
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 33
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: LIST
11207: PPUSH
11208: CALL_OW 69
11212: ST_TO_ADDR
// if not tmp then
11213: LD_VAR 0 1
11217: NOT
11218: IFFALSE 11222
// exit ;
11220: GO 11248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11222: LD_VAR 0 1
11226: PUSH
11227: LD_INT 1
11229: PPUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 12
11239: ARRAY
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL_OW 234
// end ;
11248: PPOPN 1
11250: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11251: LD_EXP 22
11255: PUSH
11256: LD_EXP 64
11260: AND
11261: IFFALSE 11402
11263: GO 11265
11265: DISABLE
11266: LD_INT 0
11268: PPUSH
11269: PPUSH
11270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11271: LD_ADDR_VAR 0 3
11275: PUSH
11276: LD_INT 22
11278: PUSH
11279: LD_OWVAR 2
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: ST_TO_ADDR
// if not tmp then
11307: LD_VAR 0 3
11311: NOT
11312: IFFALSE 11316
// exit ;
11314: GO 11402
// un := tmp [ rand ( 1 , tmp ) ] ;
11316: LD_ADDR_VAR 0 2
11320: PUSH
11321: LD_VAR 0 3
11325: PUSH
11326: LD_INT 1
11328: PPUSH
11329: LD_VAR 0 3
11333: PPUSH
11334: CALL_OW 12
11338: ARRAY
11339: ST_TO_ADDR
// if Crawls ( un ) then
11340: LD_VAR 0 2
11344: PPUSH
11345: CALL_OW 318
11349: IFFALSE 11360
// ComWalk ( un ) ;
11351: LD_VAR 0 2
11355: PPUSH
11356: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11360: LD_VAR 0 2
11364: PPUSH
11365: LD_INT 9
11367: PPUSH
11368: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11372: LD_INT 28
11374: PPUSH
11375: LD_OWVAR 2
11379: PPUSH
11380: LD_INT 2
11382: PPUSH
11383: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11387: LD_INT 29
11389: PPUSH
11390: LD_OWVAR 2
11394: PPUSH
11395: LD_INT 2
11397: PPUSH
11398: CALL_OW 322
// end ;
11402: PPOPN 3
11404: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11405: LD_EXP 22
11409: PUSH
11410: LD_EXP 65
11414: AND
11415: IFFALSE 11526
11417: GO 11419
11419: DISABLE
11420: LD_INT 0
11422: PPUSH
11423: PPUSH
11424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11425: LD_ADDR_VAR 0 3
11429: PUSH
11430: LD_INT 22
11432: PUSH
11433: LD_OWVAR 2
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 25
11444: PUSH
11445: LD_INT 1
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PPUSH
11456: CALL_OW 69
11460: ST_TO_ADDR
// if not tmp then
11461: LD_VAR 0 3
11465: NOT
11466: IFFALSE 11470
// exit ;
11468: GO 11526
// un := tmp [ rand ( 1 , tmp ) ] ;
11470: LD_ADDR_VAR 0 2
11474: PUSH
11475: LD_VAR 0 3
11479: PUSH
11480: LD_INT 1
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: CALL_OW 12
11492: ARRAY
11493: ST_TO_ADDR
// if Crawls ( un ) then
11494: LD_VAR 0 2
11498: PPUSH
11499: CALL_OW 318
11503: IFFALSE 11514
// ComWalk ( un ) ;
11505: LD_VAR 0 2
11509: PPUSH
11510: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11514: LD_VAR 0 2
11518: PPUSH
11519: LD_INT 8
11521: PPUSH
11522: CALL_OW 336
// end ;
11526: PPOPN 3
11528: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11529: LD_EXP 22
11533: PUSH
11534: LD_EXP 66
11538: AND
11539: IFFALSE 11683
11541: GO 11543
11543: DISABLE
11544: LD_INT 0
11546: PPUSH
11547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11548: LD_ADDR_VAR 0 2
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_OWVAR 2
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 21
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 2
11577: PUSH
11578: LD_INT 34
11580: PUSH
11581: LD_INT 12
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 34
11590: PUSH
11591: LD_INT 51
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 34
11600: PUSH
11601: LD_INT 32
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 69
11623: ST_TO_ADDR
// if not tmp then
11624: LD_VAR 0 2
11628: NOT
11629: IFFALSE 11633
// exit ;
11631: GO 11683
// for i in tmp do
11633: LD_ADDR_VAR 0 1
11637: PUSH
11638: LD_VAR 0 2
11642: PUSH
11643: FOR_IN
11644: IFFALSE 11681
// if GetCargo ( i , mat_artifact ) = 0 then
11646: LD_VAR 0 1
11650: PPUSH
11651: LD_INT 4
11653: PPUSH
11654: CALL_OW 289
11658: PUSH
11659: LD_INT 0
11661: EQUAL
11662: IFFALSE 11679
// SetCargo ( i , mat_siberit , 100 ) ;
11664: LD_VAR 0 1
11668: PPUSH
11669: LD_INT 3
11671: PPUSH
11672: LD_INT 100
11674: PPUSH
11675: CALL_OW 290
11679: GO 11643
11681: POP
11682: POP
// end ;
11683: PPOPN 2
11685: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11686: LD_EXP 22
11690: PUSH
11691: LD_EXP 67
11695: AND
11696: IFFALSE 11879
11698: GO 11700
11700: DISABLE
11701: LD_INT 0
11703: PPUSH
11704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11705: LD_ADDR_VAR 0 2
11709: PUSH
11710: LD_INT 22
11712: PUSH
11713: LD_OWVAR 2
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PPUSH
11722: CALL_OW 69
11726: ST_TO_ADDR
// if not tmp then
11727: LD_VAR 0 2
11731: NOT
11732: IFFALSE 11736
// exit ;
11734: GO 11879
// for i := 1 to 2 do
11736: LD_ADDR_VAR 0 1
11740: PUSH
11741: DOUBLE
11742: LD_INT 1
11744: DEC
11745: ST_TO_ADDR
11746: LD_INT 2
11748: PUSH
11749: FOR_TO
11750: IFFALSE 11877
// begin uc_side := your_side ;
11752: LD_ADDR_OWVAR 20
11756: PUSH
11757: LD_OWVAR 2
11761: ST_TO_ADDR
// uc_nation := nation_american ;
11762: LD_ADDR_OWVAR 21
11766: PUSH
11767: LD_INT 1
11769: ST_TO_ADDR
// vc_chassis := us_morphling ;
11770: LD_ADDR_OWVAR 37
11774: PUSH
11775: LD_INT 5
11777: ST_TO_ADDR
// vc_engine := engine_siberite ;
11778: LD_ADDR_OWVAR 39
11782: PUSH
11783: LD_INT 3
11785: ST_TO_ADDR
// vc_control := control_computer ;
11786: LD_ADDR_OWVAR 38
11790: PUSH
11791: LD_INT 3
11793: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11794: LD_ADDR_OWVAR 40
11798: PUSH
11799: LD_INT 10
11801: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11802: LD_VAR 0 2
11806: PUSH
11807: LD_INT 1
11809: ARRAY
11810: PPUSH
11811: CALL_OW 310
11815: NOT
11816: IFFALSE 11863
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11818: CALL_OW 45
11822: PPUSH
11823: LD_VAR 0 2
11827: PUSH
11828: LD_INT 1
11830: ARRAY
11831: PPUSH
11832: CALL_OW 250
11836: PPUSH
11837: LD_VAR 0 2
11841: PUSH
11842: LD_INT 1
11844: ARRAY
11845: PPUSH
11846: CALL_OW 251
11850: PPUSH
11851: LD_INT 12
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL_OW 50
11861: GO 11875
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11863: CALL_OW 45
11867: PPUSH
11868: LD_INT 1
11870: PPUSH
11871: CALL_OW 51
// end ;
11875: GO 11749
11877: POP
11878: POP
// end ;
11879: PPOPN 2
11881: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11882: LD_EXP 22
11886: PUSH
11887: LD_EXP 68
11891: AND
11892: IFFALSE 12114
11894: GO 11896
11896: DISABLE
11897: LD_INT 0
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11905: LD_ADDR_VAR 0 6
11909: PUSH
11910: LD_INT 22
11912: PUSH
11913: LD_OWVAR 2
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 21
11924: PUSH
11925: LD_INT 1
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 3
11934: PUSH
11935: LD_INT 23
11937: PUSH
11938: LD_INT 0
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: PPUSH
11954: CALL_OW 69
11958: ST_TO_ADDR
// if not tmp then
11959: LD_VAR 0 6
11963: NOT
11964: IFFALSE 11968
// exit ;
11966: GO 12114
// s1 := rand ( 1 , 4 ) ;
11968: LD_ADDR_VAR 0 2
11972: PUSH
11973: LD_INT 1
11975: PPUSH
11976: LD_INT 4
11978: PPUSH
11979: CALL_OW 12
11983: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11984: LD_ADDR_VAR 0 4
11988: PUSH
11989: LD_VAR 0 6
11993: PUSH
11994: LD_INT 1
11996: ARRAY
11997: PPUSH
11998: LD_VAR 0 2
12002: PPUSH
12003: CALL_OW 259
12007: ST_TO_ADDR
// if s1 = 1 then
12008: LD_VAR 0 2
12012: PUSH
12013: LD_INT 1
12015: EQUAL
12016: IFFALSE 12036
// s2 := rand ( 2 , 4 ) else
12018: LD_ADDR_VAR 0 3
12022: PUSH
12023: LD_INT 2
12025: PPUSH
12026: LD_INT 4
12028: PPUSH
12029: CALL_OW 12
12033: ST_TO_ADDR
12034: GO 12044
// s2 := 1 ;
12036: LD_ADDR_VAR 0 3
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12044: LD_ADDR_VAR 0 5
12048: PUSH
12049: LD_VAR 0 6
12053: PUSH
12054: LD_INT 1
12056: ARRAY
12057: PPUSH
12058: LD_VAR 0 3
12062: PPUSH
12063: CALL_OW 259
12067: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12068: LD_VAR 0 6
12072: PUSH
12073: LD_INT 1
12075: ARRAY
12076: PPUSH
12077: LD_VAR 0 2
12081: PPUSH
12082: LD_VAR 0 5
12086: PPUSH
12087: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12091: LD_VAR 0 6
12095: PUSH
12096: LD_INT 1
12098: ARRAY
12099: PPUSH
12100: LD_VAR 0 3
12104: PPUSH
12105: LD_VAR 0 4
12109: PPUSH
12110: CALL_OW 237
// end ;
12114: PPOPN 6
12116: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12117: LD_EXP 22
12121: PUSH
12122: LD_EXP 69
12126: AND
12127: IFFALSE 12206
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12135: LD_ADDR_VAR 0 1
12139: PUSH
12140: LD_INT 22
12142: PUSH
12143: LD_OWVAR 2
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 30
12154: PUSH
12155: LD_INT 3
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 69
12170: ST_TO_ADDR
// if not tmp then
12171: LD_VAR 0 1
12175: NOT
12176: IFFALSE 12180
// exit ;
12178: GO 12206
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12180: LD_VAR 0 1
12184: PUSH
12185: LD_INT 1
12187: PPUSH
12188: LD_VAR 0 1
12192: PPUSH
12193: CALL_OW 12
12197: ARRAY
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 234
// end ;
12206: PPOPN 1
12208: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12209: LD_EXP 22
12213: PUSH
12214: LD_EXP 70
12218: AND
12219: IFFALSE 12331
12221: GO 12223
12223: DISABLE
12224: LD_INT 0
12226: PPUSH
12227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12228: LD_ADDR_VAR 0 2
12232: PUSH
12233: LD_INT 22
12235: PUSH
12236: LD_OWVAR 2
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 2
12247: PUSH
12248: LD_INT 30
12250: PUSH
12251: LD_INT 27
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 30
12260: PUSH
12261: LD_INT 26
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 30
12270: PUSH
12271: LD_INT 28
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: ST_TO_ADDR
// if not tmp then
12293: LD_VAR 0 2
12297: NOT
12298: IFFALSE 12302
// exit ;
12300: GO 12331
// for i in tmp do
12302: LD_ADDR_VAR 0 1
12306: PUSH
12307: LD_VAR 0 2
12311: PUSH
12312: FOR_IN
12313: IFFALSE 12329
// SetLives ( i , 1 ) ;
12315: LD_VAR 0 1
12319: PPUSH
12320: LD_INT 1
12322: PPUSH
12323: CALL_OW 234
12327: GO 12312
12329: POP
12330: POP
// end ;
12331: PPOPN 2
12333: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12334: LD_EXP 22
12338: PUSH
12339: LD_EXP 71
12343: AND
12344: IFFALSE 12618
12346: GO 12348
12348: DISABLE
12349: LD_INT 0
12351: PPUSH
12352: PPUSH
12353: PPUSH
// begin i := rand ( 1 , 7 ) ;
12354: LD_ADDR_VAR 0 1
12358: PUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_INT 7
12364: PPUSH
12365: CALL_OW 12
12369: ST_TO_ADDR
// case i of 1 :
12370: LD_VAR 0 1
12374: PUSH
12375: LD_INT 1
12377: DOUBLE
12378: EQUAL
12379: IFTRUE 12383
12381: GO 12393
12383: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12384: LD_STRING earthquake(getX(game), 0, 32)
12386: PPUSH
12387: CALL_OW 559
12391: GO 12618
12393: LD_INT 2
12395: DOUBLE
12396: EQUAL
12397: IFTRUE 12401
12399: GO 12415
12401: POP
// begin ToLua ( displayStucuk(); ) ;
12402: LD_STRING displayStucuk();
12404: PPUSH
12405: CALL_OW 559
// ResetFog ;
12409: CALL_OW 335
// end ; 3 :
12413: GO 12618
12415: LD_INT 3
12417: DOUBLE
12418: EQUAL
12419: IFTRUE 12423
12421: GO 12527
12423: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12424: LD_ADDR_VAR 0 2
12428: PUSH
12429: LD_INT 22
12431: PUSH
12432: LD_OWVAR 2
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 25
12443: PUSH
12444: LD_INT 1
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PPUSH
12455: CALL_OW 69
12459: ST_TO_ADDR
// if not tmp then
12460: LD_VAR 0 2
12464: NOT
12465: IFFALSE 12469
// exit ;
12467: GO 12618
// un := tmp [ rand ( 1 , tmp ) ] ;
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: LD_VAR 0 2
12478: PUSH
12479: LD_INT 1
12481: PPUSH
12482: LD_VAR 0 2
12486: PPUSH
12487: CALL_OW 12
12491: ARRAY
12492: ST_TO_ADDR
// if Crawls ( un ) then
12493: LD_VAR 0 3
12497: PPUSH
12498: CALL_OW 318
12502: IFFALSE 12513
// ComWalk ( un ) ;
12504: LD_VAR 0 3
12508: PPUSH
12509: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12513: LD_VAR 0 3
12517: PPUSH
12518: LD_INT 8
12520: PPUSH
12521: CALL_OW 336
// end ; 4 :
12525: GO 12618
12527: LD_INT 4
12529: DOUBLE
12530: EQUAL
12531: IFTRUE 12535
12533: GO 12596
12535: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: LD_INT 22
12543: PUSH
12544: LD_OWVAR 2
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 30
12555: PUSH
12556: LD_INT 29
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 69
12571: ST_TO_ADDR
// if not tmp then
12572: LD_VAR 0 2
12576: NOT
12577: IFFALSE 12581
// exit ;
12579: GO 12618
// DestroyUnit ( tmp [ 1 ] ) ;
12581: LD_VAR 0 2
12585: PUSH
12586: LD_INT 1
12588: ARRAY
12589: PPUSH
12590: CALL_OW 65
// end ; 5 .. 7 :
12594: GO 12618
12596: LD_INT 5
12598: DOUBLE
12599: GREATEREQUAL
12600: IFFALSE 12608
12602: LD_INT 7
12604: DOUBLE
12605: LESSEQUAL
12606: IFTRUE 12610
12608: GO 12617
12610: POP
// StreamSibBomb ; end ;
12611: CALL 8868 0 0
12615: GO 12618
12617: POP
// end ;
12618: PPOPN 3
12620: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12621: LD_EXP 22
12625: PUSH
12626: LD_EXP 72
12630: AND
12631: IFFALSE 12787
12633: GO 12635
12635: DISABLE
12636: LD_INT 0
12638: PPUSH
12639: PPUSH
12640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12641: LD_ADDR_VAR 0 2
12645: PUSH
12646: LD_INT 81
12648: PUSH
12649: LD_OWVAR 2
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 2
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 1
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 21
12673: PUSH
12674: LD_INT 2
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: ST_TO_ADDR
// if not tmp then
12695: LD_VAR 0 2
12699: NOT
12700: IFFALSE 12704
// exit ;
12702: GO 12787
// p := 0 ;
12704: LD_ADDR_VAR 0 3
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12712: LD_INT 35
12714: PPUSH
12715: CALL_OW 67
// p := p + 1 ;
12719: LD_ADDR_VAR 0 3
12723: PUSH
12724: LD_VAR 0 3
12728: PUSH
12729: LD_INT 1
12731: PLUS
12732: ST_TO_ADDR
// for i in tmp do
12733: LD_ADDR_VAR 0 1
12737: PUSH
12738: LD_VAR 0 2
12742: PUSH
12743: FOR_IN
12744: IFFALSE 12775
// if GetLives ( i ) < 1000 then
12746: LD_VAR 0 1
12750: PPUSH
12751: CALL_OW 256
12755: PUSH
12756: LD_INT 1000
12758: LESS
12759: IFFALSE 12773
// SetLives ( i , 1000 ) ;
12761: LD_VAR 0 1
12765: PPUSH
12766: LD_INT 1000
12768: PPUSH
12769: CALL_OW 234
12773: GO 12743
12775: POP
12776: POP
// until p > 20 ;
12777: LD_VAR 0 3
12781: PUSH
12782: LD_INT 20
12784: GREATER
12785: IFFALSE 12712
// end ;
12787: PPOPN 3
12789: END
// every 0 0$1 trigger StreamModeActive and sTime do
12790: LD_EXP 22
12794: PUSH
12795: LD_EXP 73
12799: AND
12800: IFFALSE 12835
12802: GO 12804
12804: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12805: LD_INT 28
12807: PPUSH
12808: LD_OWVAR 2
12812: PPUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12820: LD_INT 30
12822: PPUSH
12823: LD_OWVAR 2
12827: PPUSH
12828: LD_INT 2
12830: PPUSH
12831: CALL_OW 322
// end ;
12835: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12836: LD_EXP 22
12840: PUSH
12841: LD_EXP 74
12845: AND
12846: IFFALSE 12967
12848: GO 12850
12850: DISABLE
12851: LD_INT 0
12853: PPUSH
12854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12855: LD_ADDR_VAR 0 2
12859: PUSH
12860: LD_INT 22
12862: PUSH
12863: LD_OWVAR 2
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 21
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 3
12884: PUSH
12885: LD_INT 23
12887: PUSH
12888: LD_INT 0
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: PPUSH
12904: CALL_OW 69
12908: ST_TO_ADDR
// if not tmp then
12909: LD_VAR 0 2
12913: NOT
12914: IFFALSE 12918
// exit ;
12916: GO 12967
// for i in tmp do
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: LD_VAR 0 2
12927: PUSH
12928: FOR_IN
12929: IFFALSE 12965
// begin if Crawls ( i ) then
12931: LD_VAR 0 1
12935: PPUSH
12936: CALL_OW 318
12940: IFFALSE 12951
// ComWalk ( i ) ;
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 138
// SetClass ( i , 2 ) ;
12951: LD_VAR 0 1
12955: PPUSH
12956: LD_INT 2
12958: PPUSH
12959: CALL_OW 336
// end ;
12963: GO 12928
12965: POP
12966: POP
// end ;
12967: PPOPN 2
12969: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12970: LD_EXP 22
12974: PUSH
12975: LD_EXP 75
12979: AND
12980: IFFALSE 13261
12982: GO 12984
12984: DISABLE
12985: LD_INT 0
12987: PPUSH
12988: PPUSH
12989: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12990: LD_OWVAR 2
12994: PPUSH
12995: LD_INT 9
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13008: LD_INT 9
13010: PPUSH
13011: LD_OWVAR 2
13015: PPUSH
13016: CALL_OW 343
// uc_side := 9 ;
13020: LD_ADDR_OWVAR 20
13024: PUSH
13025: LD_INT 9
13027: ST_TO_ADDR
// uc_nation := 2 ;
13028: LD_ADDR_OWVAR 21
13032: PUSH
13033: LD_INT 2
13035: ST_TO_ADDR
// hc_name := Dark Warrior ;
13036: LD_ADDR_OWVAR 26
13040: PUSH
13041: LD_STRING Dark Warrior
13043: ST_TO_ADDR
// hc_gallery :=  ;
13044: LD_ADDR_OWVAR 33
13048: PUSH
13049: LD_STRING 
13051: ST_TO_ADDR
// hc_noskilllimit := true ;
13052: LD_ADDR_OWVAR 76
13056: PUSH
13057: LD_INT 1
13059: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13060: LD_ADDR_OWVAR 31
13064: PUSH
13065: LD_INT 30
13067: PUSH
13068: LD_INT 30
13070: PUSH
13071: LD_INT 30
13073: PUSH
13074: LD_INT 30
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: ST_TO_ADDR
// un := CreateHuman ;
13083: LD_ADDR_VAR 0 3
13087: PUSH
13088: CALL_OW 44
13092: ST_TO_ADDR
// hc_noskilllimit := false ;
13093: LD_ADDR_OWVAR 76
13097: PUSH
13098: LD_INT 0
13100: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13101: LD_VAR 0 3
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: CALL_OW 51
// p := 0 ;
13113: LD_ADDR_VAR 0 2
13117: PUSH
13118: LD_INT 0
13120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13121: LD_INT 35
13123: PPUSH
13124: CALL_OW 67
// p := p + 1 ;
13128: LD_ADDR_VAR 0 2
13132: PUSH
13133: LD_VAR 0 2
13137: PUSH
13138: LD_INT 1
13140: PLUS
13141: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13142: LD_VAR 0 3
13146: PPUSH
13147: CALL_OW 256
13151: PUSH
13152: LD_INT 1000
13154: LESS
13155: IFFALSE 13169
// SetLives ( un , 1000 ) ;
13157: LD_VAR 0 3
13161: PPUSH
13162: LD_INT 1000
13164: PPUSH
13165: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13169: LD_VAR 0 3
13173: PPUSH
13174: LD_INT 81
13176: PUSH
13177: LD_OWVAR 2
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 91
13188: PUSH
13189: LD_VAR 0 3
13193: PUSH
13194: LD_INT 30
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 69
13210: PPUSH
13211: LD_VAR 0 3
13215: PPUSH
13216: CALL_OW 74
13220: PPUSH
13221: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13225: LD_VAR 0 2
13229: PUSH
13230: LD_INT 60
13232: GREATER
13233: PUSH
13234: LD_VAR 0 3
13238: PPUSH
13239: CALL_OW 301
13243: OR
13244: IFFALSE 13121
// if un then
13246: LD_VAR 0 3
13250: IFFALSE 13261
// RemoveUnit ( un ) ;
13252: LD_VAR 0 3
13256: PPUSH
13257: CALL_OW 64
// end ;
13261: PPOPN 3
13263: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13264: LD_INT 0
13266: PPUSH
13267: PPUSH
13268: PPUSH
13269: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13270: LD_ADDR_VAR 0 4
13274: PUSH
13275: LD_INT 22
13277: PUSH
13278: LD_OWVAR 2
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 2
13289: PUSH
13290: LD_INT 30
13292: PUSH
13293: LD_INT 0
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 1
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PPUSH
13319: CALL_OW 69
13323: ST_TO_ADDR
// if not tmp then
13324: LD_VAR 0 4
13328: NOT
13329: IFFALSE 13333
// exit ;
13331: GO 13392
// for i in tmp do
13333: LD_ADDR_VAR 0 2
13337: PUSH
13338: LD_VAR 0 4
13342: PUSH
13343: FOR_IN
13344: IFFALSE 13390
// for j = 1 to 3 do
13346: LD_ADDR_VAR 0 3
13350: PUSH
13351: DOUBLE
13352: LD_INT 1
13354: DEC
13355: ST_TO_ADDR
13356: LD_INT 3
13358: PUSH
13359: FOR_TO
13360: IFFALSE 13386
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13362: LD_VAR 0 2
13366: PPUSH
13367: CALL_OW 274
13371: PPUSH
13372: LD_VAR 0 3
13376: PPUSH
13377: LD_INT 99999
13379: PPUSH
13380: CALL_OW 277
13384: GO 13359
13386: POP
13387: POP
13388: GO 13343
13390: POP
13391: POP
// end ;
13392: LD_VAR 0 1
13396: RET
// export function hHackSetLevel10 ; var i , j ; begin
13397: LD_INT 0
13399: PPUSH
13400: PPUSH
13401: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13402: LD_ADDR_VAR 0 2
13406: PUSH
13407: LD_INT 21
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PPUSH
13417: CALL_OW 69
13421: PUSH
13422: FOR_IN
13423: IFFALSE 13475
// if IsSelected ( i ) then
13425: LD_VAR 0 2
13429: PPUSH
13430: CALL_OW 306
13434: IFFALSE 13473
// begin for j := 1 to 4 do
13436: LD_ADDR_VAR 0 3
13440: PUSH
13441: DOUBLE
13442: LD_INT 1
13444: DEC
13445: ST_TO_ADDR
13446: LD_INT 4
13448: PUSH
13449: FOR_TO
13450: IFFALSE 13471
// SetSkill ( i , j , 10 ) ;
13452: LD_VAR 0 2
13456: PPUSH
13457: LD_VAR 0 3
13461: PPUSH
13462: LD_INT 10
13464: PPUSH
13465: CALL_OW 237
13469: GO 13449
13471: POP
13472: POP
// end ;
13473: GO 13422
13475: POP
13476: POP
// end ;
13477: LD_VAR 0 1
13481: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13482: LD_INT 0
13484: PPUSH
13485: PPUSH
13486: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13487: LD_ADDR_VAR 0 2
13491: PUSH
13492: LD_INT 22
13494: PUSH
13495: LD_OWVAR 2
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 21
13506: PUSH
13507: LD_INT 1
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PPUSH
13518: CALL_OW 69
13522: PUSH
13523: FOR_IN
13524: IFFALSE 13565
// begin for j := 1 to 4 do
13526: LD_ADDR_VAR 0 3
13530: PUSH
13531: DOUBLE
13532: LD_INT 1
13534: DEC
13535: ST_TO_ADDR
13536: LD_INT 4
13538: PUSH
13539: FOR_TO
13540: IFFALSE 13561
// SetSkill ( i , j , 10 ) ;
13542: LD_VAR 0 2
13546: PPUSH
13547: LD_VAR 0 3
13551: PPUSH
13552: LD_INT 10
13554: PPUSH
13555: CALL_OW 237
13559: GO 13539
13561: POP
13562: POP
// end ;
13563: GO 13523
13565: POP
13566: POP
// end ;
13567: LD_VAR 0 1
13571: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
13572: LD_INT 0
13574: PPUSH
// uc_side := your_side ;
13575: LD_ADDR_OWVAR 20
13579: PUSH
13580: LD_OWVAR 2
13584: ST_TO_ADDR
// uc_nation := nation ;
13585: LD_ADDR_OWVAR 21
13589: PUSH
13590: LD_VAR 0 1
13594: ST_TO_ADDR
// InitHc ;
13595: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13599: LD_INT 0
13601: PPUSH
13602: LD_VAR 0 2
13606: PPUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
13616: CALL_OW 44
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 51
// end ;
13628: LD_VAR 0 4
13632: RET
// export function hHackSpawnVehicle ; begin
13633: LD_INT 0
13635: PPUSH
// uc_side := your_side ;
13636: LD_ADDR_OWVAR 20
13640: PUSH
13641: LD_OWVAR 2
13645: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
13646: LD_ADDR_OWVAR 21
13650: PUSH
13651: LD_INT 1
13653: PPUSH
13654: LD_INT 3
13656: PPUSH
13657: CALL_OW 12
13661: ST_TO_ADDR
// InitVc ;
13662: CALL_OW 20
// case uc_nation of 1 :
13666: LD_OWVAR 21
13670: PUSH
13671: LD_INT 1
13673: DOUBLE
13674: EQUAL
13675: IFTRUE 13679
13677: GO 13823
13679: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
13680: LD_ADDR_OWVAR 37
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 4
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 1
13709: PPUSH
13710: LD_INT 5
13712: PPUSH
13713: CALL_OW 12
13717: ARRAY
13718: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13719: LD_ADDR_OWVAR 39
13723: PUSH
13724: LD_INT 1
13726: PPUSH
13727: LD_INT 3
13729: PPUSH
13730: CALL_OW 12
13734: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
13735: LD_ADDR_OWVAR 38
13739: PUSH
13740: LD_INT 1
13742: PUSH
13743: LD_INT 2
13745: PUSH
13746: LD_INT 3
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 1
13756: PPUSH
13757: LD_INT 3
13759: PPUSH
13760: CALL_OW 12
13764: ARRAY
13765: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
13766: LD_ADDR_OWVAR 40
13770: PUSH
13771: LD_INT 2
13773: PUSH
13774: LD_INT 4
13776: PUSH
13777: LD_INT 5
13779: PUSH
13780: LD_INT 3
13782: PUSH
13783: LD_INT 7
13785: PUSH
13786: LD_INT 8
13788: PUSH
13789: LD_INT 9
13791: PUSH
13792: LD_INT 10
13794: PUSH
13795: LD_INT 6
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: LD_INT 1
13811: PPUSH
13812: LD_INT 9
13814: PPUSH
13815: CALL_OW 12
13819: ARRAY
13820: ST_TO_ADDR
// end ; 2 :
13821: GO 14088
13823: LD_INT 2
13825: DOUBLE
13826: EQUAL
13827: IFTRUE 13831
13829: GO 13955
13831: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
13832: LD_ADDR_OWVAR 37
13836: PUSH
13837: LD_INT 11
13839: PUSH
13840: LD_INT 12
13842: PUSH
13843: LD_INT 13
13845: PUSH
13846: LD_INT 14
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 1
13857: PPUSH
13858: LD_INT 4
13860: PPUSH
13861: CALL_OW 12
13865: ARRAY
13866: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13867: LD_ADDR_OWVAR 39
13871: PUSH
13872: LD_INT 1
13874: PPUSH
13875: LD_INT 3
13877: PPUSH
13878: CALL_OW 12
13882: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
13883: LD_ADDR_OWVAR 38
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: LD_INT 5
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_INT 3
13907: PPUSH
13908: CALL_OW 12
13912: ARRAY
13913: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
13914: LD_ADDR_OWVAR 40
13918: PUSH
13919: LD_INT 24
13921: PUSH
13922: LD_INT 26
13924: PUSH
13925: LD_INT 27
13927: PUSH
13928: LD_INT 28
13930: PUSH
13931: LD_INT 29
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 1
13943: PPUSH
13944: LD_INT 5
13946: PPUSH
13947: CALL_OW 12
13951: ARRAY
13952: ST_TO_ADDR
// end ; 3 :
13953: GO 14088
13955: LD_INT 3
13957: DOUBLE
13958: EQUAL
13959: IFTRUE 13963
13961: GO 14087
13963: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13964: LD_ADDR_OWVAR 37
13968: PUSH
13969: LD_INT 21
13971: PUSH
13972: LD_INT 23
13974: PUSH
13975: LD_INT 22
13977: PUSH
13978: LD_INT 24
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 1
13989: PPUSH
13990: LD_INT 4
13992: PPUSH
13993: CALL_OW 12
13997: ARRAY
13998: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
13999: LD_ADDR_OWVAR 39
14003: PUSH
14004: LD_INT 1
14006: PPUSH
14007: LD_INT 3
14009: PPUSH
14010: CALL_OW 12
14014: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
14015: LD_ADDR_OWVAR 38
14019: PUSH
14020: LD_INT 1
14022: PUSH
14023: LD_INT 3
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 1
14032: PPUSH
14033: LD_INT 2
14035: PPUSH
14036: CALL_OW 12
14040: ARRAY
14041: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
14042: LD_ADDR_OWVAR 40
14046: PUSH
14047: LD_INT 42
14049: PUSH
14050: LD_INT 43
14052: PUSH
14053: LD_INT 44
14055: PUSH
14056: LD_INT 46
14058: PUSH
14059: LD_INT 48
14061: PUSH
14062: LD_INT 47
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 1
14075: PPUSH
14076: LD_INT 6
14078: PPUSH
14079: CALL_OW 12
14083: ARRAY
14084: ST_TO_ADDR
// end ; end ;
14085: GO 14088
14087: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14088: CALL_OW 45
14092: PPUSH
14093: LD_INT 1
14095: PPUSH
14096: CALL_OW 51
// end ;
14100: LD_VAR 0 1
14104: RET
// export hInvincible ; every 1 do
14105: GO 14107
14107: DISABLE
// hInvincible := [ ] ;
14108: LD_ADDR_EXP 76
14112: PUSH
14113: EMPTY
14114: ST_TO_ADDR
14115: END
// every 10 do var i ;
14116: GO 14118
14118: DISABLE
14119: LD_INT 0
14121: PPUSH
// begin enable ;
14122: ENABLE
// if not hInvincible then
14123: LD_EXP 76
14127: NOT
14128: IFFALSE 14132
// exit ;
14130: GO 14176
// for i in hInvincible do
14132: LD_ADDR_VAR 0 1
14136: PUSH
14137: LD_EXP 76
14141: PUSH
14142: FOR_IN
14143: IFFALSE 14174
// if GetLives ( i ) < 1000 then
14145: LD_VAR 0 1
14149: PPUSH
14150: CALL_OW 256
14154: PUSH
14155: LD_INT 1000
14157: LESS
14158: IFFALSE 14172
// SetLives ( i , 1000 ) ;
14160: LD_VAR 0 1
14164: PPUSH
14165: LD_INT 1000
14167: PPUSH
14168: CALL_OW 234
14172: GO 14142
14174: POP
14175: POP
// end ;
14176: PPOPN 1
14178: END
// export function hHackInvincible ; var i ; begin
14179: LD_INT 0
14181: PPUSH
14182: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14183: LD_ADDR_VAR 0 2
14187: PUSH
14188: LD_INT 2
14190: PUSH
14191: LD_INT 21
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 21
14203: PUSH
14204: LD_INT 2
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: PPUSH
14216: CALL_OW 69
14220: PUSH
14221: FOR_IN
14222: IFFALSE 14283
// if IsSelected ( i ) then
14224: LD_VAR 0 2
14228: PPUSH
14229: CALL_OW 306
14233: IFFALSE 14281
// begin if i in hInvincible then
14235: LD_VAR 0 2
14239: PUSH
14240: LD_EXP 76
14244: IN
14245: IFFALSE 14265
// hInvincible := hInvincible diff i else
14247: LD_ADDR_EXP 76
14251: PUSH
14252: LD_EXP 76
14256: PUSH
14257: LD_VAR 0 2
14261: DIFF
14262: ST_TO_ADDR
14263: GO 14281
// hInvincible := hInvincible union i ;
14265: LD_ADDR_EXP 76
14269: PUSH
14270: LD_EXP 76
14274: PUSH
14275: LD_VAR 0 2
14279: UNION
14280: ST_TO_ADDR
// end ;
14281: GO 14221
14283: POP
14284: POP
// end ;
14285: LD_VAR 0 1
14289: RET
// export function hHackInvisible ; var i , j ; begin
14290: LD_INT 0
14292: PPUSH
14293: PPUSH
14294: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14295: LD_ADDR_VAR 0 2
14299: PUSH
14300: LD_INT 21
14302: PUSH
14303: LD_INT 1
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 69
14314: PUSH
14315: FOR_IN
14316: IFFALSE 14340
// if IsSelected ( i ) then
14318: LD_VAR 0 2
14322: PPUSH
14323: CALL_OW 306
14327: IFFALSE 14338
// ComForceInvisible ( i ) ;
14329: LD_VAR 0 2
14333: PPUSH
14334: CALL_OW 496
14338: GO 14315
14340: POP
14341: POP
// end ;
14342: LD_VAR 0 1
14346: RET
// export function hHackChangeYourSide ; begin
14347: LD_INT 0
14349: PPUSH
// if your_side = 8 then
14350: LD_OWVAR 2
14354: PUSH
14355: LD_INT 8
14357: EQUAL
14358: IFFALSE 14370
// your_side := 0 else
14360: LD_ADDR_OWVAR 2
14364: PUSH
14365: LD_INT 0
14367: ST_TO_ADDR
14368: GO 14384
// your_side := your_side + 1 ;
14370: LD_ADDR_OWVAR 2
14374: PUSH
14375: LD_OWVAR 2
14379: PUSH
14380: LD_INT 1
14382: PLUS
14383: ST_TO_ADDR
// end ;
14384: LD_VAR 0 1
14388: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14389: LD_INT 0
14391: PPUSH
14392: PPUSH
14393: PPUSH
// for i in all_units do
14394: LD_ADDR_VAR 0 2
14398: PUSH
14399: LD_OWVAR 3
14403: PUSH
14404: FOR_IN
14405: IFFALSE 14483
// if IsSelected ( i ) then
14407: LD_VAR 0 2
14411: PPUSH
14412: CALL_OW 306
14416: IFFALSE 14481
// begin j := GetSide ( i ) ;
14418: LD_ADDR_VAR 0 3
14422: PUSH
14423: LD_VAR 0 2
14427: PPUSH
14428: CALL_OW 255
14432: ST_TO_ADDR
// if j = 8 then
14433: LD_VAR 0 3
14437: PUSH
14438: LD_INT 8
14440: EQUAL
14441: IFFALSE 14453
// j := 0 else
14443: LD_ADDR_VAR 0 3
14447: PUSH
14448: LD_INT 0
14450: ST_TO_ADDR
14451: GO 14467
// j := j + 1 ;
14453: LD_ADDR_VAR 0 3
14457: PUSH
14458: LD_VAR 0 3
14462: PUSH
14463: LD_INT 1
14465: PLUS
14466: ST_TO_ADDR
// SetSide ( i , j ) ;
14467: LD_VAR 0 2
14471: PPUSH
14472: LD_VAR 0 3
14476: PPUSH
14477: CALL_OW 235
// end ;
14481: GO 14404
14483: POP
14484: POP
// end ;
14485: LD_VAR 0 1
14489: RET
// export function hHackFog ; begin
14490: LD_INT 0
14492: PPUSH
// FogOff ( true ) ;
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 344
// end ;
14500: LD_VAR 0 1
14504: RET
// export function hHackApeman ; begin
14505: LD_INT 0
14507: PPUSH
// uc_side := your_side ;
14508: LD_ADDR_OWVAR 20
14512: PUSH
14513: LD_OWVAR 2
14517: ST_TO_ADDR
// uc_nation := 0 ;
14518: LD_ADDR_OWVAR 21
14522: PUSH
14523: LD_INT 0
14525: ST_TO_ADDR
// hc_name :=  ;
14526: LD_ADDR_OWVAR 26
14530: PUSH
14531: LD_STRING 
14533: ST_TO_ADDR
// hc_gallery :=  ;
14534: LD_ADDR_OWVAR 33
14538: PUSH
14539: LD_STRING 
14541: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
14542: LD_ADDR_OWVAR 31
14546: PUSH
14547: LD_INT 0
14549: PUSH
14550: LD_INT 0
14552: PUSH
14553: LD_INT 0
14555: PUSH
14556: LD_INT 0
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: ST_TO_ADDR
// hc_class := class_apeman ;
14565: LD_ADDR_OWVAR 28
14569: PUSH
14570: LD_INT 12
14572: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
14573: CALL_OW 44
14577: PPUSH
14578: LD_INT 1
14580: PPUSH
14581: CALL_OW 51
// end ;
14585: LD_VAR 0 1
14589: RET
// export function hHackBoom ; begin
14590: LD_INT 0
14592: PPUSH
// uc_side := your_side ;
14593: LD_ADDR_OWVAR 20
14597: PUSH
14598: LD_OWVAR 2
14602: ST_TO_ADDR
// uc_nation := 1 ;
14603: LD_ADDR_OWVAR 21
14607: PUSH
14608: LD_INT 1
14610: ST_TO_ADDR
// vc_chassis := us_morphling ;
14611: LD_ADDR_OWVAR 37
14615: PUSH
14616: LD_INT 5
14618: ST_TO_ADDR
// vc_engine := engine_siberite ;
14619: LD_ADDR_OWVAR 39
14623: PUSH
14624: LD_INT 3
14626: ST_TO_ADDR
// vc_control := control_computer ;
14627: LD_ADDR_OWVAR 38
14631: PUSH
14632: LD_INT 3
14634: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
14635: LD_ADDR_OWVAR 40
14639: PUSH
14640: LD_INT 8
14642: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14643: CALL_OW 45
14647: PPUSH
14648: LD_INT 1
14650: PPUSH
14651: CALL_OW 51
// end ; end_of_file
14655: LD_VAR 0 1
14659: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
14660: LD_INT 0
14662: PPUSH
14663: PPUSH
// if exist_mode then
14664: LD_VAR 0 2
14668: IFFALSE 14693
// unit := CreateCharacter ( prefix & ident ) else
14670: LD_ADDR_VAR 0 5
14674: PUSH
14675: LD_VAR 0 3
14679: PUSH
14680: LD_VAR 0 1
14684: STR
14685: PPUSH
14686: CALL_OW 34
14690: ST_TO_ADDR
14691: GO 14708
// unit := NewCharacter ( ident ) ;
14693: LD_ADDR_VAR 0 5
14697: PUSH
14698: LD_VAR 0 1
14702: PPUSH
14703: CALL_OW 25
14707: ST_TO_ADDR
// result := unit ;
14708: LD_ADDR_VAR 0 4
14712: PUSH
14713: LD_VAR 0 5
14717: ST_TO_ADDR
// end ;
14718: LD_VAR 0 4
14722: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
14723: LD_INT 0
14725: PPUSH
14726: PPUSH
// if not side or not nation then
14727: LD_VAR 0 1
14731: NOT
14732: PUSH
14733: LD_VAR 0 2
14737: NOT
14738: OR
14739: IFFALSE 14743
// exit ;
14741: GO 15507
// case nation of nation_american :
14743: LD_VAR 0 2
14747: PUSH
14748: LD_INT 1
14750: DOUBLE
14751: EQUAL
14752: IFTRUE 14756
14754: GO 14970
14756: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
14757: LD_ADDR_VAR 0 4
14761: PUSH
14762: LD_INT 35
14764: PUSH
14765: LD_INT 45
14767: PUSH
14768: LD_INT 46
14770: PUSH
14771: LD_INT 47
14773: PUSH
14774: LD_INT 82
14776: PUSH
14777: LD_INT 83
14779: PUSH
14780: LD_INT 84
14782: PUSH
14783: LD_INT 85
14785: PUSH
14786: LD_INT 86
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: LD_INT 2
14794: PUSH
14795: LD_INT 6
14797: PUSH
14798: LD_INT 15
14800: PUSH
14801: LD_INT 16
14803: PUSH
14804: LD_INT 7
14806: PUSH
14807: LD_INT 12
14809: PUSH
14810: LD_INT 13
14812: PUSH
14813: LD_INT 10
14815: PUSH
14816: LD_INT 14
14818: PUSH
14819: LD_INT 20
14821: PUSH
14822: LD_INT 21
14824: PUSH
14825: LD_INT 22
14827: PUSH
14828: LD_INT 25
14830: PUSH
14831: LD_INT 32
14833: PUSH
14834: LD_INT 27
14836: PUSH
14837: LD_INT 36
14839: PUSH
14840: LD_INT 69
14842: PUSH
14843: LD_INT 39
14845: PUSH
14846: LD_INT 34
14848: PUSH
14849: LD_INT 40
14851: PUSH
14852: LD_INT 48
14854: PUSH
14855: LD_INT 49
14857: PUSH
14858: LD_INT 50
14860: PUSH
14861: LD_INT 51
14863: PUSH
14864: LD_INT 52
14866: PUSH
14867: LD_INT 53
14869: PUSH
14870: LD_INT 54
14872: PUSH
14873: LD_INT 55
14875: PUSH
14876: LD_INT 56
14878: PUSH
14879: LD_INT 57
14881: PUSH
14882: LD_INT 58
14884: PUSH
14885: LD_INT 59
14887: PUSH
14888: LD_INT 60
14890: PUSH
14891: LD_INT 61
14893: PUSH
14894: LD_INT 62
14896: PUSH
14897: LD_INT 80
14899: PUSH
14900: LD_INT 82
14902: PUSH
14903: LD_INT 83
14905: PUSH
14906: LD_INT 84
14908: PUSH
14909: LD_INT 85
14911: PUSH
14912: LD_INT 86
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: ST_TO_ADDR
14968: GO 15431
14970: LD_INT 2
14972: DOUBLE
14973: EQUAL
14974: IFTRUE 14978
14976: GO 15200
14978: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
14979: LD_ADDR_VAR 0 4
14983: PUSH
14984: LD_INT 35
14986: PUSH
14987: LD_INT 45
14989: PUSH
14990: LD_INT 46
14992: PUSH
14993: LD_INT 47
14995: PUSH
14996: LD_INT 82
14998: PUSH
14999: LD_INT 83
15001: PUSH
15002: LD_INT 84
15004: PUSH
15005: LD_INT 85
15007: PUSH
15008: LD_INT 87
15010: PUSH
15011: LD_INT 70
15013: PUSH
15014: LD_INT 1
15016: PUSH
15017: LD_INT 11
15019: PUSH
15020: LD_INT 3
15022: PUSH
15023: LD_INT 4
15025: PUSH
15026: LD_INT 5
15028: PUSH
15029: LD_INT 6
15031: PUSH
15032: LD_INT 15
15034: PUSH
15035: LD_INT 18
15037: PUSH
15038: LD_INT 7
15040: PUSH
15041: LD_INT 17
15043: PUSH
15044: LD_INT 8
15046: PUSH
15047: LD_INT 20
15049: PUSH
15050: LD_INT 21
15052: PUSH
15053: LD_INT 22
15055: PUSH
15056: LD_INT 72
15058: PUSH
15059: LD_INT 26
15061: PUSH
15062: LD_INT 69
15064: PUSH
15065: LD_INT 39
15067: PUSH
15068: LD_INT 40
15070: PUSH
15071: LD_INT 41
15073: PUSH
15074: LD_INT 42
15076: PUSH
15077: LD_INT 43
15079: PUSH
15080: LD_INT 48
15082: PUSH
15083: LD_INT 49
15085: PUSH
15086: LD_INT 50
15088: PUSH
15089: LD_INT 51
15091: PUSH
15092: LD_INT 52
15094: PUSH
15095: LD_INT 53
15097: PUSH
15098: LD_INT 54
15100: PUSH
15101: LD_INT 55
15103: PUSH
15104: LD_INT 56
15106: PUSH
15107: LD_INT 60
15109: PUSH
15110: LD_INT 61
15112: PUSH
15113: LD_INT 62
15115: PUSH
15116: LD_INT 66
15118: PUSH
15119: LD_INT 67
15121: PUSH
15122: LD_INT 68
15124: PUSH
15125: LD_INT 81
15127: PUSH
15128: LD_INT 82
15130: PUSH
15131: LD_INT 83
15133: PUSH
15134: LD_INT 84
15136: PUSH
15137: LD_INT 85
15139: PUSH
15140: LD_INT 87
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: ST_TO_ADDR
15198: GO 15431
15200: LD_INT 3
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15430
15208: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15209: LD_ADDR_VAR 0 4
15213: PUSH
15214: LD_INT 46
15216: PUSH
15217: LD_INT 47
15219: PUSH
15220: LD_INT 1
15222: PUSH
15223: LD_INT 2
15225: PUSH
15226: LD_INT 82
15228: PUSH
15229: LD_INT 83
15231: PUSH
15232: LD_INT 84
15234: PUSH
15235: LD_INT 85
15237: PUSH
15238: LD_INT 86
15240: PUSH
15241: LD_INT 11
15243: PUSH
15244: LD_INT 9
15246: PUSH
15247: LD_INT 20
15249: PUSH
15250: LD_INT 19
15252: PUSH
15253: LD_INT 21
15255: PUSH
15256: LD_INT 24
15258: PUSH
15259: LD_INT 22
15261: PUSH
15262: LD_INT 25
15264: PUSH
15265: LD_INT 28
15267: PUSH
15268: LD_INT 29
15270: PUSH
15271: LD_INT 30
15273: PUSH
15274: LD_INT 31
15276: PUSH
15277: LD_INT 37
15279: PUSH
15280: LD_INT 38
15282: PUSH
15283: LD_INT 32
15285: PUSH
15286: LD_INT 27
15288: PUSH
15289: LD_INT 33
15291: PUSH
15292: LD_INT 69
15294: PUSH
15295: LD_INT 39
15297: PUSH
15298: LD_INT 34
15300: PUSH
15301: LD_INT 40
15303: PUSH
15304: LD_INT 71
15306: PUSH
15307: LD_INT 23
15309: PUSH
15310: LD_INT 44
15312: PUSH
15313: LD_INT 48
15315: PUSH
15316: LD_INT 49
15318: PUSH
15319: LD_INT 50
15321: PUSH
15322: LD_INT 51
15324: PUSH
15325: LD_INT 52
15327: PUSH
15328: LD_INT 53
15330: PUSH
15331: LD_INT 54
15333: PUSH
15334: LD_INT 55
15336: PUSH
15337: LD_INT 56
15339: PUSH
15340: LD_INT 57
15342: PUSH
15343: LD_INT 58
15345: PUSH
15346: LD_INT 59
15348: PUSH
15349: LD_INT 63
15351: PUSH
15352: LD_INT 64
15354: PUSH
15355: LD_INT 65
15357: PUSH
15358: LD_INT 82
15360: PUSH
15361: LD_INT 83
15363: PUSH
15364: LD_INT 84
15366: PUSH
15367: LD_INT 85
15369: PUSH
15370: LD_INT 86
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: ST_TO_ADDR
15428: GO 15431
15430: POP
// if state > - 1 and state < 3 then
15431: LD_VAR 0 3
15435: PUSH
15436: LD_INT 1
15438: NEG
15439: GREATER
15440: PUSH
15441: LD_VAR 0 3
15445: PUSH
15446: LD_INT 3
15448: LESS
15449: AND
15450: IFFALSE 15507
// for i in result do
15452: LD_ADDR_VAR 0 5
15456: PUSH
15457: LD_VAR 0 4
15461: PUSH
15462: FOR_IN
15463: IFFALSE 15505
// if GetTech ( i , side ) <> state then
15465: LD_VAR 0 5
15469: PPUSH
15470: LD_VAR 0 1
15474: PPUSH
15475: CALL_OW 321
15479: PUSH
15480: LD_VAR 0 3
15484: NONEQUAL
15485: IFFALSE 15503
// result := result diff i ;
15487: LD_ADDR_VAR 0 4
15491: PUSH
15492: LD_VAR 0 4
15496: PUSH
15497: LD_VAR 0 5
15501: DIFF
15502: ST_TO_ADDR
15503: GO 15462
15505: POP
15506: POP
// end ;
15507: LD_VAR 0 4
15511: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15512: LD_INT 0
15514: PPUSH
15515: PPUSH
15516: PPUSH
// result := true ;
15517: LD_ADDR_VAR 0 3
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15525: LD_ADDR_VAR 0 5
15529: PUSH
15530: LD_VAR 0 2
15534: PPUSH
15535: CALL_OW 480
15539: ST_TO_ADDR
// if not tmp then
15540: LD_VAR 0 5
15544: NOT
15545: IFFALSE 15549
// exit ;
15547: GO 15598
// for i in tmp do
15549: LD_ADDR_VAR 0 4
15553: PUSH
15554: LD_VAR 0 5
15558: PUSH
15559: FOR_IN
15560: IFFALSE 15596
// if GetTech ( i , side ) <> state_researched then
15562: LD_VAR 0 4
15566: PPUSH
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 321
15576: PUSH
15577: LD_INT 2
15579: NONEQUAL
15580: IFFALSE 15594
// begin result := false ;
15582: LD_ADDR_VAR 0 3
15586: PUSH
15587: LD_INT 0
15589: ST_TO_ADDR
// exit ;
15590: POP
15591: POP
15592: GO 15598
// end ;
15594: GO 15559
15596: POP
15597: POP
// end ;
15598: LD_VAR 0 3
15602: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
15603: LD_INT 0
15605: PPUSH
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
15618: LD_VAR 0 1
15622: NOT
15623: PUSH
15624: LD_VAR 0 1
15628: PPUSH
15629: CALL_OW 257
15633: PUSH
15634: LD_INT 9
15636: NONEQUAL
15637: OR
15638: IFFALSE 15642
// exit ;
15640: GO 16215
// side := GetSide ( unit ) ;
15642: LD_ADDR_VAR 0 9
15646: PUSH
15647: LD_VAR 0 1
15651: PPUSH
15652: CALL_OW 255
15656: ST_TO_ADDR
// tech_space := tech_spacanom ;
15657: LD_ADDR_VAR 0 12
15661: PUSH
15662: LD_INT 29
15664: ST_TO_ADDR
// tech_time := tech_taurad ;
15665: LD_ADDR_VAR 0 13
15669: PUSH
15670: LD_INT 28
15672: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
15673: LD_ADDR_VAR 0 11
15677: PUSH
15678: LD_VAR 0 1
15682: PPUSH
15683: CALL_OW 310
15687: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
15688: LD_VAR 0 11
15692: PPUSH
15693: CALL_OW 247
15697: PUSH
15698: LD_INT 2
15700: EQUAL
15701: IFFALSE 15705
// exit ;
15703: GO 16215
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15705: LD_ADDR_VAR 0 8
15709: PUSH
15710: LD_INT 81
15712: PUSH
15713: LD_VAR 0 9
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 3
15724: PUSH
15725: LD_INT 21
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PPUSH
15743: CALL_OW 69
15747: ST_TO_ADDR
// if not tmp then
15748: LD_VAR 0 8
15752: NOT
15753: IFFALSE 15757
// exit ;
15755: GO 16215
// if in_unit then
15757: LD_VAR 0 11
15761: IFFALSE 15785
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
15763: LD_ADDR_VAR 0 10
15767: PUSH
15768: LD_VAR 0 8
15772: PPUSH
15773: LD_VAR 0 11
15777: PPUSH
15778: CALL_OW 74
15782: ST_TO_ADDR
15783: GO 15805
// enemy := NearestUnitToUnit ( tmp , unit ) ;
15785: LD_ADDR_VAR 0 10
15789: PUSH
15790: LD_VAR 0 8
15794: PPUSH
15795: LD_VAR 0 1
15799: PPUSH
15800: CALL_OW 74
15804: ST_TO_ADDR
// if not enemy then
15805: LD_VAR 0 10
15809: NOT
15810: IFFALSE 15814
// exit ;
15812: GO 16215
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
15814: LD_VAR 0 11
15818: PUSH
15819: LD_VAR 0 11
15823: PPUSH
15824: LD_VAR 0 10
15828: PPUSH
15829: CALL_OW 296
15833: PUSH
15834: LD_INT 13
15836: GREATER
15837: AND
15838: PUSH
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_VAR 0 10
15848: PPUSH
15849: CALL_OW 296
15853: PUSH
15854: LD_INT 12
15856: GREATER
15857: OR
15858: IFFALSE 15862
// exit ;
15860: GO 16215
// missile := [ 1 ] ;
15862: LD_ADDR_VAR 0 14
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: EMPTY
15871: LIST
15872: ST_TO_ADDR
// if Researched ( side , tech_space ) then
15873: LD_VAR 0 9
15877: PPUSH
15878: LD_VAR 0 12
15882: PPUSH
15883: CALL_OW 325
15887: IFFALSE 15916
// missile := Insert ( missile , missile + 1 , 2 ) ;
15889: LD_ADDR_VAR 0 14
15893: PUSH
15894: LD_VAR 0 14
15898: PPUSH
15899: LD_VAR 0 14
15903: PUSH
15904: LD_INT 1
15906: PLUS
15907: PPUSH
15908: LD_INT 2
15910: PPUSH
15911: CALL_OW 2
15915: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
15916: LD_VAR 0 9
15920: PPUSH
15921: LD_VAR 0 13
15925: PPUSH
15926: CALL_OW 325
15930: PUSH
15931: LD_VAR 0 10
15935: PPUSH
15936: CALL_OW 255
15940: PPUSH
15941: LD_VAR 0 13
15945: PPUSH
15946: CALL_OW 325
15950: NOT
15951: AND
15952: IFFALSE 15981
// missile := Insert ( missile , missile + 1 , 3 ) ;
15954: LD_ADDR_VAR 0 14
15958: PUSH
15959: LD_VAR 0 14
15963: PPUSH
15964: LD_VAR 0 14
15968: PUSH
15969: LD_INT 1
15971: PLUS
15972: PPUSH
15973: LD_INT 3
15975: PPUSH
15976: CALL_OW 2
15980: ST_TO_ADDR
// if missile < 2 then
15981: LD_VAR 0 14
15985: PUSH
15986: LD_INT 2
15988: LESS
15989: IFFALSE 15993
// exit ;
15991: GO 16215
// x := GetX ( enemy ) ;
15993: LD_ADDR_VAR 0 4
15997: PUSH
15998: LD_VAR 0 10
16002: PPUSH
16003: CALL_OW 250
16007: ST_TO_ADDR
// y := GetY ( enemy ) ;
16008: LD_ADDR_VAR 0 5
16012: PUSH
16013: LD_VAR 0 10
16017: PPUSH
16018: CALL_OW 251
16022: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16023: LD_ADDR_VAR 0 6
16027: PUSH
16028: LD_VAR 0 4
16032: PUSH
16033: LD_INT 1
16035: NEG
16036: PPUSH
16037: LD_INT 1
16039: PPUSH
16040: CALL_OW 12
16044: PLUS
16045: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16046: LD_ADDR_VAR 0 7
16050: PUSH
16051: LD_VAR 0 5
16055: PUSH
16056: LD_INT 1
16058: NEG
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: CALL_OW 12
16067: PLUS
16068: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16069: LD_VAR 0 6
16073: PPUSH
16074: LD_VAR 0 7
16078: PPUSH
16079: CALL_OW 488
16083: NOT
16084: IFFALSE 16106
// begin _x := x ;
16086: LD_ADDR_VAR 0 6
16090: PUSH
16091: LD_VAR 0 4
16095: ST_TO_ADDR
// _y := y ;
16096: LD_ADDR_VAR 0 7
16100: PUSH
16101: LD_VAR 0 5
16105: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16106: LD_ADDR_VAR 0 3
16110: PUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_VAR 0 14
16118: PPUSH
16119: CALL_OW 12
16123: ST_TO_ADDR
// case i of 1 :
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 1
16131: DOUBLE
16132: EQUAL
16133: IFTRUE 16137
16135: GO 16154
16137: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16138: LD_VAR 0 1
16142: PPUSH
16143: LD_VAR 0 10
16147: PPUSH
16148: CALL_OW 115
16152: GO 16215
16154: LD_INT 2
16156: DOUBLE
16157: EQUAL
16158: IFTRUE 16162
16160: GO 16184
16162: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16163: LD_VAR 0 1
16167: PPUSH
16168: LD_VAR 0 6
16172: PPUSH
16173: LD_VAR 0 7
16177: PPUSH
16178: CALL_OW 153
16182: GO 16215
16184: LD_INT 3
16186: DOUBLE
16187: EQUAL
16188: IFTRUE 16192
16190: GO 16214
16192: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16193: LD_VAR 0 1
16197: PPUSH
16198: LD_VAR 0 6
16202: PPUSH
16203: LD_VAR 0 7
16207: PPUSH
16208: CALL_OW 154
16212: GO 16215
16214: POP
// end ;
16215: LD_VAR 0 2
16219: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16220: LD_INT 0
16222: PPUSH
16223: PPUSH
16224: PPUSH
16225: PPUSH
16226: PPUSH
16227: PPUSH
// if not unit or not building then
16228: LD_VAR 0 1
16232: NOT
16233: PUSH
16234: LD_VAR 0 2
16238: NOT
16239: OR
16240: IFFALSE 16244
// exit ;
16242: GO 16402
// x := GetX ( building ) ;
16244: LD_ADDR_VAR 0 5
16248: PUSH
16249: LD_VAR 0 2
16253: PPUSH
16254: CALL_OW 250
16258: ST_TO_ADDR
// y := GetY ( building ) ;
16259: LD_ADDR_VAR 0 6
16263: PUSH
16264: LD_VAR 0 2
16268: PPUSH
16269: CALL_OW 251
16273: ST_TO_ADDR
// for i = 0 to 5 do
16274: LD_ADDR_VAR 0 4
16278: PUSH
16279: DOUBLE
16280: LD_INT 0
16282: DEC
16283: ST_TO_ADDR
16284: LD_INT 5
16286: PUSH
16287: FOR_TO
16288: IFFALSE 16400
// begin _x := ShiftX ( x , i , 3 ) ;
16290: LD_ADDR_VAR 0 7
16294: PUSH
16295: LD_VAR 0 5
16299: PPUSH
16300: LD_VAR 0 4
16304: PPUSH
16305: LD_INT 3
16307: PPUSH
16308: CALL_OW 272
16312: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16313: LD_ADDR_VAR 0 8
16317: PUSH
16318: LD_VAR 0 6
16322: PPUSH
16323: LD_VAR 0 4
16327: PPUSH
16328: LD_INT 3
16330: PPUSH
16331: CALL_OW 273
16335: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16336: LD_VAR 0 7
16340: PPUSH
16341: LD_VAR 0 8
16345: PPUSH
16346: CALL_OW 488
16350: NOT
16351: IFFALSE 16355
// continue ;
16353: GO 16287
// if HexInfo ( _x , _y ) = 0 then
16355: LD_VAR 0 7
16359: PPUSH
16360: LD_VAR 0 8
16364: PPUSH
16365: CALL_OW 428
16369: PUSH
16370: LD_INT 0
16372: EQUAL
16373: IFFALSE 16398
// begin ComMoveXY ( unit , _x , _y ) ;
16375: LD_VAR 0 1
16379: PPUSH
16380: LD_VAR 0 7
16384: PPUSH
16385: LD_VAR 0 8
16389: PPUSH
16390: CALL_OW 111
// exit ;
16394: POP
16395: POP
16396: GO 16402
// end ; end ;
16398: GO 16287
16400: POP
16401: POP
// end ;
16402: LD_VAR 0 3
16406: RET
// export function ScanBase ( side , base_area ) ; begin
16407: LD_INT 0
16409: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16410: LD_ADDR_VAR 0 3
16414: PUSH
16415: LD_VAR 0 2
16419: PPUSH
16420: LD_INT 81
16422: PUSH
16423: LD_VAR 0 1
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PPUSH
16432: CALL_OW 70
16436: ST_TO_ADDR
// end ;
16437: LD_VAR 0 3
16441: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
// result := false ;
16448: LD_ADDR_VAR 0 2
16452: PUSH
16453: LD_INT 0
16455: ST_TO_ADDR
// side := GetSide ( unit ) ;
16456: LD_ADDR_VAR 0 3
16460: PUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: CALL_OW 255
16470: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16471: LD_ADDR_VAR 0 4
16475: PUSH
16476: LD_VAR 0 1
16480: PPUSH
16481: CALL_OW 248
16485: ST_TO_ADDR
// case nat of 1 :
16486: LD_VAR 0 4
16490: PUSH
16491: LD_INT 1
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16499
16497: GO 16510
16499: POP
// tech := tech_lassight ; 2 :
16500: LD_ADDR_VAR 0 5
16504: PUSH
16505: LD_INT 12
16507: ST_TO_ADDR
16508: GO 16549
16510: LD_INT 2
16512: DOUBLE
16513: EQUAL
16514: IFTRUE 16518
16516: GO 16529
16518: POP
// tech := tech_mortar ; 3 :
16519: LD_ADDR_VAR 0 5
16523: PUSH
16524: LD_INT 41
16526: ST_TO_ADDR
16527: GO 16549
16529: LD_INT 3
16531: DOUBLE
16532: EQUAL
16533: IFTRUE 16537
16535: GO 16548
16537: POP
// tech := tech_bazooka ; end ;
16538: LD_ADDR_VAR 0 5
16542: PUSH
16543: LD_INT 44
16545: ST_TO_ADDR
16546: GO 16549
16548: POP
// if Researched ( side , tech ) then
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_VAR 0 5
16558: PPUSH
16559: CALL_OW 325
16563: IFFALSE 16590
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16565: LD_ADDR_VAR 0 2
16569: PUSH
16570: LD_INT 5
16572: PUSH
16573: LD_INT 8
16575: PUSH
16576: LD_INT 9
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: LIST
16583: PUSH
16584: LD_VAR 0 4
16588: ARRAY
16589: ST_TO_ADDR
// end ;
16590: LD_VAR 0 2
16594: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
16599: PPUSH
// if not mines then
16600: LD_VAR 0 2
16604: NOT
16605: IFFALSE 16609
// exit ;
16607: GO 16753
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16609: LD_ADDR_VAR 0 5
16613: PUSH
16614: LD_INT 81
16616: PUSH
16617: LD_VAR 0 1
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 3
16628: PUSH
16629: LD_INT 21
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: ST_TO_ADDR
// for i in mines do
16652: LD_ADDR_VAR 0 4
16656: PUSH
16657: LD_VAR 0 2
16661: PUSH
16662: FOR_IN
16663: IFFALSE 16751
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16665: LD_VAR 0 4
16669: PUSH
16670: LD_INT 1
16672: ARRAY
16673: PPUSH
16674: LD_VAR 0 4
16678: PUSH
16679: LD_INT 2
16681: ARRAY
16682: PPUSH
16683: CALL_OW 458
16687: NOT
16688: IFFALSE 16692
// continue ;
16690: GO 16662
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16692: LD_VAR 0 4
16696: PUSH
16697: LD_INT 1
16699: ARRAY
16700: PPUSH
16701: LD_VAR 0 4
16705: PUSH
16706: LD_INT 2
16708: ARRAY
16709: PPUSH
16710: CALL_OW 428
16714: PUSH
16715: LD_VAR 0 5
16719: IN
16720: IFFALSE 16749
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16722: LD_VAR 0 4
16726: PUSH
16727: LD_INT 1
16729: ARRAY
16730: PPUSH
16731: LD_VAR 0 4
16735: PUSH
16736: LD_INT 2
16738: ARRAY
16739: PPUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: CALL_OW 456
// end ;
16749: GO 16662
16751: POP
16752: POP
// end ;
16753: LD_VAR 0 3
16757: RET
// export function Count ( array ) ; var i ; begin
16758: LD_INT 0
16760: PPUSH
16761: PPUSH
// result := 0 ;
16762: LD_ADDR_VAR 0 2
16766: PUSH
16767: LD_INT 0
16769: ST_TO_ADDR
// for i in array do
16770: LD_ADDR_VAR 0 3
16774: PUSH
16775: LD_VAR 0 1
16779: PUSH
16780: FOR_IN
16781: IFFALSE 16805
// if i then
16783: LD_VAR 0 3
16787: IFFALSE 16803
// result := result + 1 ;
16789: LD_ADDR_VAR 0 2
16793: PUSH
16794: LD_VAR 0 2
16798: PUSH
16799: LD_INT 1
16801: PLUS
16802: ST_TO_ADDR
16803: GO 16780
16805: POP
16806: POP
// end ;
16807: LD_VAR 0 2
16811: RET
// export function IsEmpty ( building ) ; begin
16812: LD_INT 0
16814: PPUSH
// if not building then
16815: LD_VAR 0 1
16819: NOT
16820: IFFALSE 16824
// exit ;
16822: GO 16867
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
16824: LD_ADDR_VAR 0 2
16828: PUSH
16829: LD_VAR 0 1
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_VAR 0 1
16841: PPUSH
16842: CALL_OW 255
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 58
16853: PUSH
16854: EMPTY
16855: LIST
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PPUSH
16861: CALL_OW 69
16865: IN
16866: ST_TO_ADDR
// end ;
16867: LD_VAR 0 2
16871: RET
// export function IsNotFull ( building ) ; begin
16872: LD_INT 0
16874: PPUSH
// if not building then
16875: LD_VAR 0 1
16879: NOT
16880: IFFALSE 16884
// exit ;
16882: GO 16903
// result := UnitsInside ( building ) < 6 ;
16884: LD_ADDR_VAR 0 2
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 313
16898: PUSH
16899: LD_INT 6
16901: LESS
16902: ST_TO_ADDR
// end ;
16903: LD_VAR 0 2
16907: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
16908: LD_INT 0
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
// tmp := [ ] ;
16914: LD_ADDR_VAR 0 3
16918: PUSH
16919: EMPTY
16920: ST_TO_ADDR
// list := [ ] ;
16921: LD_ADDR_VAR 0 5
16925: PUSH
16926: EMPTY
16927: ST_TO_ADDR
// for i = 16 to 25 do
16928: LD_ADDR_VAR 0 4
16932: PUSH
16933: DOUBLE
16934: LD_INT 16
16936: DEC
16937: ST_TO_ADDR
16938: LD_INT 25
16940: PUSH
16941: FOR_TO
16942: IFFALSE 17015
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
16944: LD_ADDR_VAR 0 3
16948: PUSH
16949: LD_VAR 0 3
16953: PUSH
16954: LD_INT 22
16956: PUSH
16957: LD_VAR 0 1
16961: PPUSH
16962: CALL_OW 255
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 91
16973: PUSH
16974: LD_VAR 0 1
16978: PUSH
16979: LD_INT 6
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 30
16989: PUSH
16990: LD_VAR 0 4
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: PPUSH
17007: CALL_OW 69
17011: ADD
17012: ST_TO_ADDR
17013: GO 16941
17015: POP
17016: POP
// for i = 1 to tmp do
17017: LD_ADDR_VAR 0 4
17021: PUSH
17022: DOUBLE
17023: LD_INT 1
17025: DEC
17026: ST_TO_ADDR
17027: LD_VAR 0 3
17031: PUSH
17032: FOR_TO
17033: IFFALSE 17121
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17035: LD_ADDR_VAR 0 5
17039: PUSH
17040: LD_VAR 0 5
17044: PUSH
17045: LD_VAR 0 3
17049: PUSH
17050: LD_VAR 0 4
17054: ARRAY
17055: PPUSH
17056: CALL_OW 266
17060: PUSH
17061: LD_VAR 0 3
17065: PUSH
17066: LD_VAR 0 4
17070: ARRAY
17071: PPUSH
17072: CALL_OW 250
17076: PUSH
17077: LD_VAR 0 3
17081: PUSH
17082: LD_VAR 0 4
17086: ARRAY
17087: PPUSH
17088: CALL_OW 251
17092: PUSH
17093: LD_VAR 0 3
17097: PUSH
17098: LD_VAR 0 4
17102: ARRAY
17103: PPUSH
17104: CALL_OW 254
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: PUSH
17115: EMPTY
17116: LIST
17117: ADD
17118: ST_TO_ADDR
17119: GO 17032
17121: POP
17122: POP
// result := list ;
17123: LD_ADDR_VAR 0 2
17127: PUSH
17128: LD_VAR 0 5
17132: ST_TO_ADDR
// end ;
17133: LD_VAR 0 2
17137: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17138: LD_INT 0
17140: PPUSH
17141: PPUSH
17142: PPUSH
17143: PPUSH
17144: PPUSH
17145: PPUSH
17146: PPUSH
// if not factory then
17147: LD_VAR 0 1
17151: NOT
17152: IFFALSE 17156
// exit ;
17154: GO 17749
// if control = control_apeman then
17156: LD_VAR 0 4
17160: PUSH
17161: LD_INT 5
17163: EQUAL
17164: IFFALSE 17273
// begin tmp := UnitsInside ( factory ) ;
17166: LD_ADDR_VAR 0 8
17170: PUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 313
17180: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17181: LD_VAR 0 8
17185: PPUSH
17186: LD_INT 25
17188: PUSH
17189: LD_INT 12
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PPUSH
17196: CALL_OW 72
17200: NOT
17201: IFFALSE 17211
// control := control_manual ;
17203: LD_ADDR_VAR 0 4
17207: PUSH
17208: LD_INT 1
17210: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17211: LD_ADDR_VAR 0 8
17215: PUSH
17216: LD_VAR 0 1
17220: PPUSH
17221: CALL 16908 0 1
17225: ST_TO_ADDR
// if tmp then
17226: LD_VAR 0 8
17230: IFFALSE 17273
// begin for i in tmp do
17232: LD_ADDR_VAR 0 7
17236: PUSH
17237: LD_VAR 0 8
17241: PUSH
17242: FOR_IN
17243: IFFALSE 17271
// if i [ 1 ] = b_ext_radio then
17245: LD_VAR 0 7
17249: PUSH
17250: LD_INT 1
17252: ARRAY
17253: PUSH
17254: LD_INT 22
17256: EQUAL
17257: IFFALSE 17269
// begin control := control_remote ;
17259: LD_ADDR_VAR 0 4
17263: PUSH
17264: LD_INT 2
17266: ST_TO_ADDR
// break ;
17267: GO 17271
// end ;
17269: GO 17242
17271: POP
17272: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17273: LD_VAR 0 1
17277: PPUSH
17278: LD_VAR 0 2
17282: PPUSH
17283: LD_VAR 0 3
17287: PPUSH
17288: LD_VAR 0 4
17292: PPUSH
17293: LD_VAR 0 5
17297: PPUSH
17298: CALL_OW 448
17302: IFFALSE 17337
// begin result := [ chassis , engine , control , weapon ] ;
17304: LD_ADDR_VAR 0 6
17308: PUSH
17309: LD_VAR 0 2
17313: PUSH
17314: LD_VAR 0 3
17318: PUSH
17319: LD_VAR 0 4
17323: PUSH
17324: LD_VAR 0 5
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: ST_TO_ADDR
// exit ;
17335: GO 17749
// end ; _chassis := AvailableChassisList ( factory ) ;
17337: LD_ADDR_VAR 0 9
17341: PUSH
17342: LD_VAR 0 1
17346: PPUSH
17347: CALL_OW 475
17351: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17352: LD_ADDR_VAR 0 11
17356: PUSH
17357: LD_VAR 0 1
17361: PPUSH
17362: CALL_OW 476
17366: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17367: LD_ADDR_VAR 0 12
17371: PUSH
17372: LD_VAR 0 1
17376: PPUSH
17377: CALL_OW 477
17381: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17382: LD_ADDR_VAR 0 10
17386: PUSH
17387: LD_VAR 0 1
17391: PPUSH
17392: CALL_OW 478
17396: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17397: LD_VAR 0 9
17401: NOT
17402: PUSH
17403: LD_VAR 0 11
17407: NOT
17408: OR
17409: PUSH
17410: LD_VAR 0 12
17414: NOT
17415: OR
17416: PUSH
17417: LD_VAR 0 10
17421: NOT
17422: OR
17423: IFFALSE 17458
// begin result := [ chassis , engine , control , weapon ] ;
17425: LD_ADDR_VAR 0 6
17429: PUSH
17430: LD_VAR 0 2
17434: PUSH
17435: LD_VAR 0 3
17439: PUSH
17440: LD_VAR 0 4
17444: PUSH
17445: LD_VAR 0 5
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: ST_TO_ADDR
// exit ;
17456: GO 17749
// end ; if not chassis in _chassis then
17458: LD_VAR 0 2
17462: PUSH
17463: LD_VAR 0 9
17467: IN
17468: NOT
17469: IFFALSE 17495
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17471: LD_ADDR_VAR 0 2
17475: PUSH
17476: LD_VAR 0 9
17480: PUSH
17481: LD_INT 1
17483: PPUSH
17484: LD_VAR 0 9
17488: PPUSH
17489: CALL_OW 12
17493: ARRAY
17494: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17495: LD_VAR 0 2
17499: PPUSH
17500: LD_VAR 0 3
17504: PPUSH
17505: CALL 17754 0 2
17509: NOT
17510: IFFALSE 17569
// repeat engine := _engine [ 1 ] ;
17512: LD_ADDR_VAR 0 3
17516: PUSH
17517: LD_VAR 0 11
17521: PUSH
17522: LD_INT 1
17524: ARRAY
17525: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17526: LD_ADDR_VAR 0 11
17530: PUSH
17531: LD_VAR 0 11
17535: PPUSH
17536: LD_INT 1
17538: PPUSH
17539: CALL_OW 3
17543: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_VAR 0 3
17553: PPUSH
17554: CALL 17754 0 2
17558: PUSH
17559: LD_VAR 0 11
17563: PUSH
17564: EMPTY
17565: EQUAL
17566: OR
17567: IFFALSE 17512
// if not control in _control then
17569: LD_VAR 0 4
17573: PUSH
17574: LD_VAR 0 12
17578: IN
17579: NOT
17580: IFFALSE 17606
// control := _control [ rand ( 1 , _control ) ] ;
17582: LD_ADDR_VAR 0 4
17586: PUSH
17587: LD_VAR 0 12
17591: PUSH
17592: LD_INT 1
17594: PPUSH
17595: LD_VAR 0 12
17599: PPUSH
17600: CALL_OW 12
17604: ARRAY
17605: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17606: LD_VAR 0 2
17610: PPUSH
17611: LD_VAR 0 5
17615: PPUSH
17616: CALL 17974 0 2
17620: NOT
17621: IFFALSE 17680
// repeat weapon := _weapon [ 1 ] ;
17623: LD_ADDR_VAR 0 5
17627: PUSH
17628: LD_VAR 0 10
17632: PUSH
17633: LD_INT 1
17635: ARRAY
17636: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17637: LD_ADDR_VAR 0 10
17641: PUSH
17642: LD_VAR 0 10
17646: PPUSH
17647: LD_INT 1
17649: PPUSH
17650: CALL_OW 3
17654: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17655: LD_VAR 0 2
17659: PPUSH
17660: LD_VAR 0 5
17664: PPUSH
17665: CALL 17974 0 2
17669: PUSH
17670: LD_VAR 0 10
17674: PUSH
17675: EMPTY
17676: EQUAL
17677: OR
17678: IFFALSE 17623
// result := [ ] ;
17680: LD_ADDR_VAR 0 6
17684: PUSH
17685: EMPTY
17686: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17687: LD_VAR 0 1
17691: PPUSH
17692: LD_VAR 0 2
17696: PPUSH
17697: LD_VAR 0 3
17701: PPUSH
17702: LD_VAR 0 4
17706: PPUSH
17707: LD_VAR 0 5
17711: PPUSH
17712: CALL_OW 448
17716: IFFALSE 17749
// result := [ chassis , engine , control , weapon ] ;
17718: LD_ADDR_VAR 0 6
17722: PUSH
17723: LD_VAR 0 2
17727: PUSH
17728: LD_VAR 0 3
17732: PUSH
17733: LD_VAR 0 4
17737: PUSH
17738: LD_VAR 0 5
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: ST_TO_ADDR
// end ;
17749: LD_VAR 0 6
17753: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17754: LD_INT 0
17756: PPUSH
// if not chassis or not engine then
17757: LD_VAR 0 1
17761: NOT
17762: PUSH
17763: LD_VAR 0 2
17767: NOT
17768: OR
17769: IFFALSE 17773
// exit ;
17771: GO 17969
// case engine of engine_solar :
17773: LD_VAR 0 2
17777: PUSH
17778: LD_INT 2
17780: DOUBLE
17781: EQUAL
17782: IFTRUE 17786
17784: GO 17824
17786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17787: LD_ADDR_VAR 0 3
17791: PUSH
17792: LD_INT 11
17794: PUSH
17795: LD_INT 12
17797: PUSH
17798: LD_INT 13
17800: PUSH
17801: LD_INT 14
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: LD_INT 2
17809: PUSH
17810: LD_INT 3
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: ST_TO_ADDR
17822: GO 17953
17824: LD_INT 1
17826: DOUBLE
17827: EQUAL
17828: IFTRUE 17832
17830: GO 17894
17832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17833: LD_ADDR_VAR 0 3
17837: PUSH
17838: LD_INT 11
17840: PUSH
17841: LD_INT 12
17843: PUSH
17844: LD_INT 13
17846: PUSH
17847: LD_INT 14
17849: PUSH
17850: LD_INT 1
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: LD_INT 3
17858: PUSH
17859: LD_INT 4
17861: PUSH
17862: LD_INT 5
17864: PUSH
17865: LD_INT 21
17867: PUSH
17868: LD_INT 23
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: LD_INT 24
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: ST_TO_ADDR
17892: GO 17953
17894: LD_INT 3
17896: DOUBLE
17897: EQUAL
17898: IFTRUE 17902
17900: GO 17952
17902: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17903: LD_ADDR_VAR 0 3
17907: PUSH
17908: LD_INT 13
17910: PUSH
17911: LD_INT 14
17913: PUSH
17914: LD_INT 2
17916: PUSH
17917: LD_INT 3
17919: PUSH
17920: LD_INT 4
17922: PUSH
17923: LD_INT 5
17925: PUSH
17926: LD_INT 21
17928: PUSH
17929: LD_INT 22
17931: PUSH
17932: LD_INT 23
17934: PUSH
17935: LD_INT 24
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: ST_TO_ADDR
17950: GO 17953
17952: POP
// result := ( chassis in result ) ;
17953: LD_ADDR_VAR 0 3
17957: PUSH
17958: LD_VAR 0 1
17962: PUSH
17963: LD_VAR 0 3
17967: IN
17968: ST_TO_ADDR
// end ;
17969: LD_VAR 0 3
17973: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
17974: LD_INT 0
17976: PPUSH
// if not chassis or not weapon then
17977: LD_VAR 0 1
17981: NOT
17982: PUSH
17983: LD_VAR 0 2
17987: NOT
17988: OR
17989: IFFALSE 17993
// exit ;
17991: GO 19019
// case weapon of us_machine_gun :
17993: LD_VAR 0 2
17997: PUSH
17998: LD_INT 2
18000: DOUBLE
18001: EQUAL
18002: IFTRUE 18006
18004: GO 18036
18006: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18007: LD_ADDR_VAR 0 3
18011: PUSH
18012: LD_INT 1
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: LD_INT 4
18023: PUSH
18024: LD_INT 5
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
18034: GO 19003
18036: LD_INT 3
18038: DOUBLE
18039: EQUAL
18040: IFTRUE 18044
18042: GO 18074
18044: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18045: LD_ADDR_VAR 0 3
18049: PUSH
18050: LD_INT 1
18052: PUSH
18053: LD_INT 2
18055: PUSH
18056: LD_INT 3
18058: PUSH
18059: LD_INT 4
18061: PUSH
18062: LD_INT 5
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: ST_TO_ADDR
18072: GO 19003
18074: LD_INT 11
18076: DOUBLE
18077: EQUAL
18078: IFTRUE 18082
18080: GO 18112
18082: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18083: LD_ADDR_VAR 0 3
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: LD_INT 3
18096: PUSH
18097: LD_INT 4
18099: PUSH
18100: LD_INT 5
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: ST_TO_ADDR
18110: GO 19003
18112: LD_INT 4
18114: DOUBLE
18115: EQUAL
18116: IFTRUE 18120
18118: GO 18146
18120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18121: LD_ADDR_VAR 0 3
18125: PUSH
18126: LD_INT 2
18128: PUSH
18129: LD_INT 3
18131: PUSH
18132: LD_INT 4
18134: PUSH
18135: LD_INT 5
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: ST_TO_ADDR
18144: GO 19003
18146: LD_INT 5
18148: DOUBLE
18149: EQUAL
18150: IFTRUE 18154
18152: GO 18180
18154: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18155: LD_ADDR_VAR 0 3
18159: PUSH
18160: LD_INT 2
18162: PUSH
18163: LD_INT 3
18165: PUSH
18166: LD_INT 4
18168: PUSH
18169: LD_INT 5
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: ST_TO_ADDR
18178: GO 19003
18180: LD_INT 9
18182: DOUBLE
18183: EQUAL
18184: IFTRUE 18188
18186: GO 18214
18188: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18189: LD_ADDR_VAR 0 3
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: LD_INT 3
18199: PUSH
18200: LD_INT 4
18202: PUSH
18203: LD_INT 5
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: ST_TO_ADDR
18212: GO 19003
18214: LD_INT 7
18216: DOUBLE
18217: EQUAL
18218: IFTRUE 18222
18220: GO 18248
18222: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18223: LD_ADDR_VAR 0 3
18227: PUSH
18228: LD_INT 2
18230: PUSH
18231: LD_INT 3
18233: PUSH
18234: LD_INT 4
18236: PUSH
18237: LD_INT 5
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: ST_TO_ADDR
18246: GO 19003
18248: LD_INT 12
18250: DOUBLE
18251: EQUAL
18252: IFTRUE 18256
18254: GO 18282
18256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18257: LD_ADDR_VAR 0 3
18261: PUSH
18262: LD_INT 2
18264: PUSH
18265: LD_INT 3
18267: PUSH
18268: LD_INT 4
18270: PUSH
18271: LD_INT 5
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: ST_TO_ADDR
18280: GO 19003
18282: LD_INT 13
18284: DOUBLE
18285: EQUAL
18286: IFTRUE 18290
18288: GO 18316
18290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18291: LD_ADDR_VAR 0 3
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: LD_INT 4
18304: PUSH
18305: LD_INT 5
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: ST_TO_ADDR
18314: GO 19003
18316: LD_INT 14
18318: DOUBLE
18319: EQUAL
18320: IFTRUE 18324
18322: GO 18342
18324: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18325: LD_ADDR_VAR 0 3
18329: PUSH
18330: LD_INT 4
18332: PUSH
18333: LD_INT 5
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: ST_TO_ADDR
18340: GO 19003
18342: LD_INT 6
18344: DOUBLE
18345: EQUAL
18346: IFTRUE 18350
18348: GO 18368
18350: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18351: LD_ADDR_VAR 0 3
18355: PUSH
18356: LD_INT 4
18358: PUSH
18359: LD_INT 5
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: ST_TO_ADDR
18366: GO 19003
18368: LD_INT 10
18370: DOUBLE
18371: EQUAL
18372: IFTRUE 18376
18374: GO 18394
18376: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18377: LD_ADDR_VAR 0 3
18381: PUSH
18382: LD_INT 4
18384: PUSH
18385: LD_INT 5
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: ST_TO_ADDR
18392: GO 19003
18394: LD_INT 22
18396: DOUBLE
18397: EQUAL
18398: IFTRUE 18402
18400: GO 18428
18402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18403: LD_ADDR_VAR 0 3
18407: PUSH
18408: LD_INT 11
18410: PUSH
18411: LD_INT 12
18413: PUSH
18414: LD_INT 13
18416: PUSH
18417: LD_INT 14
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: ST_TO_ADDR
18426: GO 19003
18428: LD_INT 23
18430: DOUBLE
18431: EQUAL
18432: IFTRUE 18436
18434: GO 18462
18436: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18437: LD_ADDR_VAR 0 3
18441: PUSH
18442: LD_INT 11
18444: PUSH
18445: LD_INT 12
18447: PUSH
18448: LD_INT 13
18450: PUSH
18451: LD_INT 14
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: ST_TO_ADDR
18460: GO 19003
18462: LD_INT 24
18464: DOUBLE
18465: EQUAL
18466: IFTRUE 18470
18468: GO 18496
18470: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18471: LD_ADDR_VAR 0 3
18475: PUSH
18476: LD_INT 11
18478: PUSH
18479: LD_INT 12
18481: PUSH
18482: LD_INT 13
18484: PUSH
18485: LD_INT 14
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: ST_TO_ADDR
18494: GO 19003
18496: LD_INT 30
18498: DOUBLE
18499: EQUAL
18500: IFTRUE 18504
18502: GO 18530
18504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18505: LD_ADDR_VAR 0 3
18509: PUSH
18510: LD_INT 11
18512: PUSH
18513: LD_INT 12
18515: PUSH
18516: LD_INT 13
18518: PUSH
18519: LD_INT 14
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: ST_TO_ADDR
18528: GO 19003
18530: LD_INT 25
18532: DOUBLE
18533: EQUAL
18534: IFTRUE 18538
18536: GO 18556
18538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18539: LD_ADDR_VAR 0 3
18543: PUSH
18544: LD_INT 13
18546: PUSH
18547: LD_INT 14
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: ST_TO_ADDR
18554: GO 19003
18556: LD_INT 27
18558: DOUBLE
18559: EQUAL
18560: IFTRUE 18564
18562: GO 18582
18564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18565: LD_ADDR_VAR 0 3
18569: PUSH
18570: LD_INT 13
18572: PUSH
18573: LD_INT 14
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: ST_TO_ADDR
18580: GO 19003
18582: LD_INT 28
18584: DOUBLE
18585: EQUAL
18586: IFTRUE 18590
18588: GO 18608
18590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18591: LD_ADDR_VAR 0 3
18595: PUSH
18596: LD_INT 13
18598: PUSH
18599: LD_INT 14
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: ST_TO_ADDR
18606: GO 19003
18608: LD_INT 29
18610: DOUBLE
18611: EQUAL
18612: IFTRUE 18616
18614: GO 18634
18616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18617: LD_ADDR_VAR 0 3
18621: PUSH
18622: LD_INT 13
18624: PUSH
18625: LD_INT 14
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: ST_TO_ADDR
18632: GO 19003
18634: LD_INT 31
18636: DOUBLE
18637: EQUAL
18638: IFTRUE 18642
18640: GO 18660
18642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18643: LD_ADDR_VAR 0 3
18647: PUSH
18648: LD_INT 13
18650: PUSH
18651: LD_INT 14
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: ST_TO_ADDR
18658: GO 19003
18660: LD_INT 26
18662: DOUBLE
18663: EQUAL
18664: IFTRUE 18668
18666: GO 18686
18668: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18669: LD_ADDR_VAR 0 3
18673: PUSH
18674: LD_INT 13
18676: PUSH
18677: LD_INT 14
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: ST_TO_ADDR
18684: GO 19003
18686: LD_INT 42
18688: DOUBLE
18689: EQUAL
18690: IFTRUE 18694
18692: GO 18720
18694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18695: LD_ADDR_VAR 0 3
18699: PUSH
18700: LD_INT 21
18702: PUSH
18703: LD_INT 22
18705: PUSH
18706: LD_INT 23
18708: PUSH
18709: LD_INT 24
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: ST_TO_ADDR
18718: GO 19003
18720: LD_INT 43
18722: DOUBLE
18723: EQUAL
18724: IFTRUE 18728
18726: GO 18754
18728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18729: LD_ADDR_VAR 0 3
18733: PUSH
18734: LD_INT 21
18736: PUSH
18737: LD_INT 22
18739: PUSH
18740: LD_INT 23
18742: PUSH
18743: LD_INT 24
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: ST_TO_ADDR
18752: GO 19003
18754: LD_INT 44
18756: DOUBLE
18757: EQUAL
18758: IFTRUE 18762
18760: GO 18788
18762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18763: LD_ADDR_VAR 0 3
18767: PUSH
18768: LD_INT 21
18770: PUSH
18771: LD_INT 22
18773: PUSH
18774: LD_INT 23
18776: PUSH
18777: LD_INT 24
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: ST_TO_ADDR
18786: GO 19003
18788: LD_INT 45
18790: DOUBLE
18791: EQUAL
18792: IFTRUE 18796
18794: GO 18822
18796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18797: LD_ADDR_VAR 0 3
18801: PUSH
18802: LD_INT 21
18804: PUSH
18805: LD_INT 22
18807: PUSH
18808: LD_INT 23
18810: PUSH
18811: LD_INT 24
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: ST_TO_ADDR
18820: GO 19003
18822: LD_INT 49
18824: DOUBLE
18825: EQUAL
18826: IFTRUE 18830
18828: GO 18856
18830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18831: LD_ADDR_VAR 0 3
18835: PUSH
18836: LD_INT 21
18838: PUSH
18839: LD_INT 22
18841: PUSH
18842: LD_INT 23
18844: PUSH
18845: LD_INT 24
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: ST_TO_ADDR
18854: GO 19003
18856: LD_INT 51
18858: DOUBLE
18859: EQUAL
18860: IFTRUE 18864
18862: GO 18890
18864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18865: LD_ADDR_VAR 0 3
18869: PUSH
18870: LD_INT 21
18872: PUSH
18873: LD_INT 22
18875: PUSH
18876: LD_INT 23
18878: PUSH
18879: LD_INT 24
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: ST_TO_ADDR
18888: GO 19003
18890: LD_INT 52
18892: DOUBLE
18893: EQUAL
18894: IFTRUE 18898
18896: GO 18924
18898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18899: LD_ADDR_VAR 0 3
18903: PUSH
18904: LD_INT 21
18906: PUSH
18907: LD_INT 22
18909: PUSH
18910: LD_INT 23
18912: PUSH
18913: LD_INT 24
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: ST_TO_ADDR
18922: GO 19003
18924: LD_INT 53
18926: DOUBLE
18927: EQUAL
18928: IFTRUE 18932
18930: GO 18950
18932: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
18933: LD_ADDR_VAR 0 3
18937: PUSH
18938: LD_INT 23
18940: PUSH
18941: LD_INT 24
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: ST_TO_ADDR
18948: GO 19003
18950: LD_INT 46
18952: DOUBLE
18953: EQUAL
18954: IFTRUE 18958
18956: GO 18976
18958: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
18959: LD_ADDR_VAR 0 3
18963: PUSH
18964: LD_INT 23
18966: PUSH
18967: LD_INT 24
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: ST_TO_ADDR
18974: GO 19003
18976: LD_INT 47
18978: DOUBLE
18979: EQUAL
18980: IFTRUE 18984
18982: GO 19002
18984: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18985: LD_ADDR_VAR 0 3
18989: PUSH
18990: LD_INT 23
18992: PUSH
18993: LD_INT 24
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: ST_TO_ADDR
19000: GO 19003
19002: POP
// result := ( chassis in result ) ;
19003: LD_ADDR_VAR 0 3
19007: PUSH
19008: LD_VAR 0 1
19012: PUSH
19013: LD_VAR 0 3
19017: IN
19018: ST_TO_ADDR
// end ;
19019: LD_VAR 0 3
19023: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19024: LD_INT 0
19026: PPUSH
19027: PPUSH
19028: PPUSH
19029: PPUSH
19030: PPUSH
19031: PPUSH
19032: PPUSH
// result := array ;
19033: LD_ADDR_VAR 0 5
19037: PUSH
19038: LD_VAR 0 1
19042: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19043: LD_VAR 0 1
19047: NOT
19048: PUSH
19049: LD_VAR 0 2
19053: NOT
19054: OR
19055: PUSH
19056: LD_VAR 0 3
19060: NOT
19061: OR
19062: PUSH
19063: LD_VAR 0 2
19067: PUSH
19068: LD_VAR 0 1
19072: GREATER
19073: OR
19074: PUSH
19075: LD_VAR 0 3
19079: PUSH
19080: LD_VAR 0 1
19084: GREATER
19085: OR
19086: IFFALSE 19090
// exit ;
19088: GO 19386
// if direction then
19090: LD_VAR 0 4
19094: IFFALSE 19158
// begin d := 1 ;
19096: LD_ADDR_VAR 0 9
19100: PUSH
19101: LD_INT 1
19103: ST_TO_ADDR
// if i_from > i_to then
19104: LD_VAR 0 2
19108: PUSH
19109: LD_VAR 0 3
19113: GREATER
19114: IFFALSE 19140
// length := ( array - i_from ) + i_to else
19116: LD_ADDR_VAR 0 11
19120: PUSH
19121: LD_VAR 0 1
19125: PUSH
19126: LD_VAR 0 2
19130: MINUS
19131: PUSH
19132: LD_VAR 0 3
19136: PLUS
19137: ST_TO_ADDR
19138: GO 19156
// length := i_to - i_from ;
19140: LD_ADDR_VAR 0 11
19144: PUSH
19145: LD_VAR 0 3
19149: PUSH
19150: LD_VAR 0 2
19154: MINUS
19155: ST_TO_ADDR
// end else
19156: GO 19219
// begin d := - 1 ;
19158: LD_ADDR_VAR 0 9
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: ST_TO_ADDR
// if i_from > i_to then
19167: LD_VAR 0 2
19171: PUSH
19172: LD_VAR 0 3
19176: GREATER
19177: IFFALSE 19197
// length := i_from - i_to else
19179: LD_ADDR_VAR 0 11
19183: PUSH
19184: LD_VAR 0 2
19188: PUSH
19189: LD_VAR 0 3
19193: MINUS
19194: ST_TO_ADDR
19195: GO 19219
// length := ( array - i_to ) + i_from ;
19197: LD_ADDR_VAR 0 11
19201: PUSH
19202: LD_VAR 0 1
19206: PUSH
19207: LD_VAR 0 3
19211: MINUS
19212: PUSH
19213: LD_VAR 0 2
19217: PLUS
19218: ST_TO_ADDR
// end ; if not length then
19219: LD_VAR 0 11
19223: NOT
19224: IFFALSE 19228
// exit ;
19226: GO 19386
// tmp := array ;
19228: LD_ADDR_VAR 0 10
19232: PUSH
19233: LD_VAR 0 1
19237: ST_TO_ADDR
// for i = 1 to length do
19238: LD_ADDR_VAR 0 6
19242: PUSH
19243: DOUBLE
19244: LD_INT 1
19246: DEC
19247: ST_TO_ADDR
19248: LD_VAR 0 11
19252: PUSH
19253: FOR_TO
19254: IFFALSE 19374
// begin for j = 1 to array do
19256: LD_ADDR_VAR 0 7
19260: PUSH
19261: DOUBLE
19262: LD_INT 1
19264: DEC
19265: ST_TO_ADDR
19266: LD_VAR 0 1
19270: PUSH
19271: FOR_TO
19272: IFFALSE 19360
// begin k := j + d ;
19274: LD_ADDR_VAR 0 8
19278: PUSH
19279: LD_VAR 0 7
19283: PUSH
19284: LD_VAR 0 9
19288: PLUS
19289: ST_TO_ADDR
// if k > array then
19290: LD_VAR 0 8
19294: PUSH
19295: LD_VAR 0 1
19299: GREATER
19300: IFFALSE 19310
// k := 1 ;
19302: LD_ADDR_VAR 0 8
19306: PUSH
19307: LD_INT 1
19309: ST_TO_ADDR
// if not k then
19310: LD_VAR 0 8
19314: NOT
19315: IFFALSE 19327
// k := array ;
19317: LD_ADDR_VAR 0 8
19321: PUSH
19322: LD_VAR 0 1
19326: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19327: LD_ADDR_VAR 0 10
19331: PUSH
19332: LD_VAR 0 10
19336: PPUSH
19337: LD_VAR 0 8
19341: PPUSH
19342: LD_VAR 0 1
19346: PUSH
19347: LD_VAR 0 7
19351: ARRAY
19352: PPUSH
19353: CALL_OW 1
19357: ST_TO_ADDR
// end ;
19358: GO 19271
19360: POP
19361: POP
// array := tmp ;
19362: LD_ADDR_VAR 0 1
19366: PUSH
19367: LD_VAR 0 10
19371: ST_TO_ADDR
// end ;
19372: GO 19253
19374: POP
19375: POP
// result := array ;
19376: LD_ADDR_VAR 0 5
19380: PUSH
19381: LD_VAR 0 1
19385: ST_TO_ADDR
// end ;
19386: LD_VAR 0 5
19390: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19391: LD_INT 0
19393: PPUSH
19394: PPUSH
// result := 0 ;
19395: LD_ADDR_VAR 0 3
19399: PUSH
19400: LD_INT 0
19402: ST_TO_ADDR
// if not array or not value in array then
19403: LD_VAR 0 1
19407: NOT
19408: PUSH
19409: LD_VAR 0 2
19413: PUSH
19414: LD_VAR 0 1
19418: IN
19419: NOT
19420: OR
19421: IFFALSE 19425
// exit ;
19423: GO 19479
// for i = 1 to array do
19425: LD_ADDR_VAR 0 4
19429: PUSH
19430: DOUBLE
19431: LD_INT 1
19433: DEC
19434: ST_TO_ADDR
19435: LD_VAR 0 1
19439: PUSH
19440: FOR_TO
19441: IFFALSE 19477
// if value = array [ i ] then
19443: LD_VAR 0 2
19447: PUSH
19448: LD_VAR 0 1
19452: PUSH
19453: LD_VAR 0 4
19457: ARRAY
19458: EQUAL
19459: IFFALSE 19475
// begin result := i ;
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: LD_VAR 0 4
19470: ST_TO_ADDR
// exit ;
19471: POP
19472: POP
19473: GO 19479
// end ;
19475: GO 19440
19477: POP
19478: POP
// end ;
19479: LD_VAR 0 3
19483: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19484: LD_INT 0
19486: PPUSH
// vc_chassis := chassis ;
19487: LD_ADDR_OWVAR 37
19491: PUSH
19492: LD_VAR 0 1
19496: ST_TO_ADDR
// vc_engine := engine ;
19497: LD_ADDR_OWVAR 39
19501: PUSH
19502: LD_VAR 0 2
19506: ST_TO_ADDR
// vc_control := control ;
19507: LD_ADDR_OWVAR 38
19511: PUSH
19512: LD_VAR 0 3
19516: ST_TO_ADDR
// vc_weapon := weapon ;
19517: LD_ADDR_OWVAR 40
19521: PUSH
19522: LD_VAR 0 4
19526: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19527: LD_ADDR_OWVAR 41
19531: PUSH
19532: LD_VAR 0 5
19536: ST_TO_ADDR
// end ;
19537: LD_VAR 0 6
19541: RET
// export function WantPlant ( unit ) ; var task ; begin
19542: LD_INT 0
19544: PPUSH
19545: PPUSH
// result := false ;
19546: LD_ADDR_VAR 0 2
19550: PUSH
19551: LD_INT 0
19553: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19554: LD_ADDR_VAR 0 3
19558: PUSH
19559: LD_VAR 0 1
19563: PPUSH
19564: CALL_OW 437
19568: ST_TO_ADDR
// if task then
19569: LD_VAR 0 3
19573: IFFALSE 19601
// if task [ 1 ] [ 1 ] = p then
19575: LD_VAR 0 3
19579: PUSH
19580: LD_INT 1
19582: ARRAY
19583: PUSH
19584: LD_INT 1
19586: ARRAY
19587: PUSH
19588: LD_STRING p
19590: EQUAL
19591: IFFALSE 19601
// result := true ;
19593: LD_ADDR_VAR 0 2
19597: PUSH
19598: LD_INT 1
19600: ST_TO_ADDR
// end ;
19601: LD_VAR 0 2
19605: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
19610: PPUSH
19611: PPUSH
// if pos < 1 then
19612: LD_VAR 0 2
19616: PUSH
19617: LD_INT 1
19619: LESS
19620: IFFALSE 19624
// exit ;
19622: GO 19927
// if pos = 1 then
19624: LD_VAR 0 2
19628: PUSH
19629: LD_INT 1
19631: EQUAL
19632: IFFALSE 19665
// result := Replace ( arr , pos [ 1 ] , value ) else
19634: LD_ADDR_VAR 0 4
19638: PUSH
19639: LD_VAR 0 1
19643: PPUSH
19644: LD_VAR 0 2
19648: PUSH
19649: LD_INT 1
19651: ARRAY
19652: PPUSH
19653: LD_VAR 0 3
19657: PPUSH
19658: CALL_OW 1
19662: ST_TO_ADDR
19663: GO 19927
// begin tmp := arr ;
19665: LD_ADDR_VAR 0 6
19669: PUSH
19670: LD_VAR 0 1
19674: ST_TO_ADDR
// s_arr := [ tmp ] ;
19675: LD_ADDR_VAR 0 7
19679: PUSH
19680: LD_VAR 0 6
19684: PUSH
19685: EMPTY
19686: LIST
19687: ST_TO_ADDR
// for i = 1 to pos - 1 do
19688: LD_ADDR_VAR 0 5
19692: PUSH
19693: DOUBLE
19694: LD_INT 1
19696: DEC
19697: ST_TO_ADDR
19698: LD_VAR 0 2
19702: PUSH
19703: LD_INT 1
19705: MINUS
19706: PUSH
19707: FOR_TO
19708: IFFALSE 19753
// begin tmp := tmp [ pos [ i ] ] ;
19710: LD_ADDR_VAR 0 6
19714: PUSH
19715: LD_VAR 0 6
19719: PUSH
19720: LD_VAR 0 2
19724: PUSH
19725: LD_VAR 0 5
19729: ARRAY
19730: ARRAY
19731: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19732: LD_ADDR_VAR 0 7
19736: PUSH
19737: LD_VAR 0 7
19741: PUSH
19742: LD_VAR 0 6
19746: PUSH
19747: EMPTY
19748: LIST
19749: ADD
19750: ST_TO_ADDR
// end ;
19751: GO 19707
19753: POP
19754: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19755: LD_ADDR_VAR 0 6
19759: PUSH
19760: LD_VAR 0 6
19764: PPUSH
19765: LD_VAR 0 2
19769: PUSH
19770: LD_VAR 0 2
19774: ARRAY
19775: PPUSH
19776: LD_VAR 0 3
19780: PPUSH
19781: CALL_OW 1
19785: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19786: LD_ADDR_VAR 0 7
19790: PUSH
19791: LD_VAR 0 7
19795: PPUSH
19796: LD_VAR 0 7
19800: PPUSH
19801: LD_VAR 0 6
19805: PPUSH
19806: CALL_OW 1
19810: ST_TO_ADDR
// for i = s_arr downto 2 do
19811: LD_ADDR_VAR 0 5
19815: PUSH
19816: DOUBLE
19817: LD_VAR 0 7
19821: INC
19822: ST_TO_ADDR
19823: LD_INT 2
19825: PUSH
19826: FOR_DOWNTO
19827: IFFALSE 19911
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19829: LD_ADDR_VAR 0 6
19833: PUSH
19834: LD_VAR 0 7
19838: PUSH
19839: LD_VAR 0 5
19843: PUSH
19844: LD_INT 1
19846: MINUS
19847: ARRAY
19848: PPUSH
19849: LD_VAR 0 2
19853: PUSH
19854: LD_VAR 0 5
19858: PUSH
19859: LD_INT 1
19861: MINUS
19862: ARRAY
19863: PPUSH
19864: LD_VAR 0 7
19868: PUSH
19869: LD_VAR 0 5
19873: ARRAY
19874: PPUSH
19875: CALL_OW 1
19879: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19880: LD_ADDR_VAR 0 7
19884: PUSH
19885: LD_VAR 0 7
19889: PPUSH
19890: LD_VAR 0 5
19894: PUSH
19895: LD_INT 1
19897: MINUS
19898: PPUSH
19899: LD_VAR 0 6
19903: PPUSH
19904: CALL_OW 1
19908: ST_TO_ADDR
// end ;
19909: GO 19826
19911: POP
19912: POP
// result := s_arr [ 1 ] ;
19913: LD_ADDR_VAR 0 4
19917: PUSH
19918: LD_VAR 0 7
19922: PUSH
19923: LD_INT 1
19925: ARRAY
19926: ST_TO_ADDR
// end ; end ;
19927: LD_VAR 0 4
19931: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
19932: LD_INT 0
19934: PPUSH
19935: PPUSH
// if not list then
19936: LD_VAR 0 1
19940: NOT
19941: IFFALSE 19945
// exit ;
19943: GO 20036
// i := list [ pos1 ] ;
19945: LD_ADDR_VAR 0 5
19949: PUSH
19950: LD_VAR 0 1
19954: PUSH
19955: LD_VAR 0 2
19959: ARRAY
19960: ST_TO_ADDR
// if not i then
19961: LD_VAR 0 5
19965: NOT
19966: IFFALSE 19970
// exit ;
19968: GO 20036
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
19970: LD_ADDR_VAR 0 1
19974: PUSH
19975: LD_VAR 0 1
19979: PPUSH
19980: LD_VAR 0 2
19984: PPUSH
19985: LD_VAR 0 1
19989: PUSH
19990: LD_VAR 0 3
19994: ARRAY
19995: PPUSH
19996: CALL_OW 1
20000: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20001: LD_ADDR_VAR 0 1
20005: PUSH
20006: LD_VAR 0 1
20010: PPUSH
20011: LD_VAR 0 3
20015: PPUSH
20016: LD_VAR 0 5
20020: PPUSH
20021: CALL_OW 1
20025: ST_TO_ADDR
// result := list ;
20026: LD_ADDR_VAR 0 4
20030: PUSH
20031: LD_VAR 0 1
20035: ST_TO_ADDR
// end ;
20036: LD_VAR 0 4
20040: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20041: LD_INT 0
20043: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20044: LD_ADDR_VAR 0 5
20048: PUSH
20049: LD_VAR 0 1
20053: PPUSH
20054: CALL_OW 250
20058: PPUSH
20059: LD_VAR 0 1
20063: PPUSH
20064: CALL_OW 251
20068: PPUSH
20069: LD_VAR 0 2
20073: PPUSH
20074: LD_VAR 0 3
20078: PPUSH
20079: LD_VAR 0 4
20083: PPUSH
20084: CALL 20094 0 5
20088: ST_TO_ADDR
// end ;
20089: LD_VAR 0 5
20093: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20094: LD_INT 0
20096: PPUSH
20097: PPUSH
20098: PPUSH
20099: PPUSH
// if not list then
20100: LD_VAR 0 3
20104: NOT
20105: IFFALSE 20109
// exit ;
20107: GO 20497
// result := [ ] ;
20109: LD_ADDR_VAR 0 6
20113: PUSH
20114: EMPTY
20115: ST_TO_ADDR
// for i in list do
20116: LD_ADDR_VAR 0 7
20120: PUSH
20121: LD_VAR 0 3
20125: PUSH
20126: FOR_IN
20127: IFFALSE 20329
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20129: LD_ADDR_VAR 0 9
20133: PUSH
20134: LD_VAR 0 7
20138: PPUSH
20139: LD_VAR 0 1
20143: PPUSH
20144: LD_VAR 0 2
20148: PPUSH
20149: CALL_OW 297
20153: ST_TO_ADDR
// if not result then
20154: LD_VAR 0 6
20158: NOT
20159: IFFALSE 20185
// result := [ [ i , tmp ] ] else
20161: LD_ADDR_VAR 0 6
20165: PUSH
20166: LD_VAR 0 7
20170: PUSH
20171: LD_VAR 0 9
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: ST_TO_ADDR
20183: GO 20327
// begin if result [ result ] [ 2 ] < tmp then
20185: LD_VAR 0 6
20189: PUSH
20190: LD_VAR 0 6
20194: ARRAY
20195: PUSH
20196: LD_INT 2
20198: ARRAY
20199: PUSH
20200: LD_VAR 0 9
20204: LESS
20205: IFFALSE 20247
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20207: LD_ADDR_VAR 0 6
20211: PUSH
20212: LD_VAR 0 6
20216: PPUSH
20217: LD_VAR 0 6
20221: PUSH
20222: LD_INT 1
20224: PLUS
20225: PPUSH
20226: LD_VAR 0 7
20230: PUSH
20231: LD_VAR 0 9
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PPUSH
20240: CALL_OW 2
20244: ST_TO_ADDR
20245: GO 20327
// for j = 1 to result do
20247: LD_ADDR_VAR 0 8
20251: PUSH
20252: DOUBLE
20253: LD_INT 1
20255: DEC
20256: ST_TO_ADDR
20257: LD_VAR 0 6
20261: PUSH
20262: FOR_TO
20263: IFFALSE 20325
// begin if tmp < result [ j ] [ 2 ] then
20265: LD_VAR 0 9
20269: PUSH
20270: LD_VAR 0 6
20274: PUSH
20275: LD_VAR 0 8
20279: ARRAY
20280: PUSH
20281: LD_INT 2
20283: ARRAY
20284: LESS
20285: IFFALSE 20323
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20287: LD_ADDR_VAR 0 6
20291: PUSH
20292: LD_VAR 0 6
20296: PPUSH
20297: LD_VAR 0 8
20301: PPUSH
20302: LD_VAR 0 7
20306: PUSH
20307: LD_VAR 0 9
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PPUSH
20316: CALL_OW 2
20320: ST_TO_ADDR
// break ;
20321: GO 20325
// end ; end ;
20323: GO 20262
20325: POP
20326: POP
// end ; end ;
20327: GO 20126
20329: POP
20330: POP
// if result and not asc then
20331: LD_VAR 0 6
20335: PUSH
20336: LD_VAR 0 4
20340: NOT
20341: AND
20342: IFFALSE 20417
// begin tmp := result ;
20344: LD_ADDR_VAR 0 9
20348: PUSH
20349: LD_VAR 0 6
20353: ST_TO_ADDR
// for i = tmp downto 1 do
20354: LD_ADDR_VAR 0 7
20358: PUSH
20359: DOUBLE
20360: LD_VAR 0 9
20364: INC
20365: ST_TO_ADDR
20366: LD_INT 1
20368: PUSH
20369: FOR_DOWNTO
20370: IFFALSE 20415
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20372: LD_ADDR_VAR 0 6
20376: PUSH
20377: LD_VAR 0 6
20381: PPUSH
20382: LD_VAR 0 9
20386: PUSH
20387: LD_VAR 0 7
20391: MINUS
20392: PUSH
20393: LD_INT 1
20395: PLUS
20396: PPUSH
20397: LD_VAR 0 9
20401: PUSH
20402: LD_VAR 0 7
20406: ARRAY
20407: PPUSH
20408: CALL_OW 1
20412: ST_TO_ADDR
20413: GO 20369
20415: POP
20416: POP
// end ; tmp := [ ] ;
20417: LD_ADDR_VAR 0 9
20421: PUSH
20422: EMPTY
20423: ST_TO_ADDR
// if mode then
20424: LD_VAR 0 5
20428: IFFALSE 20497
// begin for i = 1 to result do
20430: LD_ADDR_VAR 0 7
20434: PUSH
20435: DOUBLE
20436: LD_INT 1
20438: DEC
20439: ST_TO_ADDR
20440: LD_VAR 0 6
20444: PUSH
20445: FOR_TO
20446: IFFALSE 20485
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20448: LD_ADDR_VAR 0 9
20452: PUSH
20453: LD_VAR 0 9
20457: PPUSH
20458: LD_VAR 0 7
20462: PPUSH
20463: LD_VAR 0 6
20467: PUSH
20468: LD_VAR 0 7
20472: ARRAY
20473: PUSH
20474: LD_INT 1
20476: ARRAY
20477: PPUSH
20478: CALL_OW 1
20482: ST_TO_ADDR
20483: GO 20445
20485: POP
20486: POP
// result := tmp ;
20487: LD_ADDR_VAR 0 6
20491: PUSH
20492: LD_VAR 0 9
20496: ST_TO_ADDR
// end ; end ;
20497: LD_VAR 0 6
20501: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20502: LD_INT 0
20504: PPUSH
20505: PPUSH
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20510: LD_ADDR_VAR 0 5
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: EMPTY
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: ST_TO_ADDR
// if not x or not y then
20532: LD_VAR 0 2
20536: NOT
20537: PUSH
20538: LD_VAR 0 3
20542: NOT
20543: OR
20544: IFFALSE 20548
// exit ;
20546: GO 22194
// if not range then
20548: LD_VAR 0 4
20552: NOT
20553: IFFALSE 20563
// range := 10 ;
20555: LD_ADDR_VAR 0 4
20559: PUSH
20560: LD_INT 10
20562: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20563: LD_ADDR_VAR 0 8
20567: PUSH
20568: LD_INT 81
20570: PUSH
20571: LD_VAR 0 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 92
20582: PUSH
20583: LD_VAR 0 2
20587: PUSH
20588: LD_VAR 0 3
20592: PUSH
20593: LD_VAR 0 4
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 3
20606: PUSH
20607: LD_INT 21
20609: PUSH
20610: LD_INT 3
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: PPUSH
20626: CALL_OW 69
20630: ST_TO_ADDR
// if not tmp then
20631: LD_VAR 0 8
20635: NOT
20636: IFFALSE 20640
// exit ;
20638: GO 22194
// for i in tmp do
20640: LD_ADDR_VAR 0 6
20644: PUSH
20645: LD_VAR 0 8
20649: PUSH
20650: FOR_IN
20651: IFFALSE 22169
// begin points := [ 0 , 0 , 0 ] ;
20653: LD_ADDR_VAR 0 9
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: LIST
20671: ST_TO_ADDR
// bpoints := 1 ;
20672: LD_ADDR_VAR 0 10
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20680: LD_VAR 0 6
20684: PPUSH
20685: CALL_OW 247
20689: PUSH
20690: LD_INT 1
20692: DOUBLE
20693: EQUAL
20694: IFTRUE 20698
20696: GO 21276
20698: POP
// begin if GetClass ( i ) = 1 then
20699: LD_VAR 0 6
20703: PPUSH
20704: CALL_OW 257
20708: PUSH
20709: LD_INT 1
20711: EQUAL
20712: IFFALSE 20733
// points := [ 10 , 5 , 3 ] ;
20714: LD_ADDR_VAR 0 9
20718: PUSH
20719: LD_INT 10
20721: PUSH
20722: LD_INT 5
20724: PUSH
20725: LD_INT 3
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: LIST
20732: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20733: LD_VAR 0 6
20737: PPUSH
20738: CALL_OW 257
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: LD_INT 3
20748: PUSH
20749: LD_INT 4
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: IN
20757: IFFALSE 20778
// points := [ 3 , 2 , 1 ] ;
20759: LD_ADDR_VAR 0 9
20763: PUSH
20764: LD_INT 3
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: LD_INT 1
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20778: LD_VAR 0 6
20782: PPUSH
20783: CALL_OW 257
20787: PUSH
20788: LD_INT 5
20790: EQUAL
20791: IFFALSE 20812
// points := [ 130 , 5 , 2 ] ;
20793: LD_ADDR_VAR 0 9
20797: PUSH
20798: LD_INT 130
20800: PUSH
20801: LD_INT 5
20803: PUSH
20804: LD_INT 2
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20812: LD_VAR 0 6
20816: PPUSH
20817: CALL_OW 257
20821: PUSH
20822: LD_INT 8
20824: EQUAL
20825: IFFALSE 20846
// points := [ 35 , 35 , 30 ] ;
20827: LD_ADDR_VAR 0 9
20831: PUSH
20832: LD_INT 35
20834: PUSH
20835: LD_INT 35
20837: PUSH
20838: LD_INT 30
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20846: LD_VAR 0 6
20850: PPUSH
20851: CALL_OW 257
20855: PUSH
20856: LD_INT 9
20858: EQUAL
20859: IFFALSE 20880
// points := [ 20 , 55 , 40 ] ;
20861: LD_ADDR_VAR 0 9
20865: PUSH
20866: LD_INT 20
20868: PUSH
20869: LD_INT 55
20871: PUSH
20872: LD_INT 40
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20880: LD_VAR 0 6
20884: PPUSH
20885: CALL_OW 257
20889: PUSH
20890: LD_INT 12
20892: PUSH
20893: LD_INT 16
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: IN
20900: IFFALSE 20921
// points := [ 5 , 3 , 2 ] ;
20902: LD_ADDR_VAR 0 9
20906: PUSH
20907: LD_INT 5
20909: PUSH
20910: LD_INT 3
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20921: LD_VAR 0 6
20925: PPUSH
20926: CALL_OW 257
20930: PUSH
20931: LD_INT 17
20933: EQUAL
20934: IFFALSE 20955
// points := [ 100 , 50 , 75 ] ;
20936: LD_ADDR_VAR 0 9
20940: PUSH
20941: LD_INT 100
20943: PUSH
20944: LD_INT 50
20946: PUSH
20947: LD_INT 75
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20955: LD_VAR 0 6
20959: PPUSH
20960: CALL_OW 257
20964: PUSH
20965: LD_INT 15
20967: EQUAL
20968: IFFALSE 20989
// points := [ 10 , 5 , 3 ] ;
20970: LD_ADDR_VAR 0 9
20974: PUSH
20975: LD_INT 10
20977: PUSH
20978: LD_INT 5
20980: PUSH
20981: LD_INT 3
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20989: LD_VAR 0 6
20993: PPUSH
20994: CALL_OW 257
20998: PUSH
20999: LD_INT 14
21001: EQUAL
21002: IFFALSE 21023
// points := [ 10 , 0 , 0 ] ;
21004: LD_ADDR_VAR 0 9
21008: PUSH
21009: LD_INT 10
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: LIST
21022: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21023: LD_VAR 0 6
21027: PPUSH
21028: CALL_OW 257
21032: PUSH
21033: LD_INT 11
21035: EQUAL
21036: IFFALSE 21057
// points := [ 30 , 10 , 5 ] ;
21038: LD_ADDR_VAR 0 9
21042: PUSH
21043: LD_INT 30
21045: PUSH
21046: LD_INT 10
21048: PUSH
21049: LD_INT 5
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21057: LD_VAR 0 1
21061: PPUSH
21062: LD_INT 5
21064: PPUSH
21065: CALL_OW 321
21069: PUSH
21070: LD_INT 2
21072: EQUAL
21073: IFFALSE 21090
// bpoints := bpoints * 1.8 ;
21075: LD_ADDR_VAR 0 10
21079: PUSH
21080: LD_VAR 0 10
21084: PUSH
21085: LD_REAL  1.80000000000000E+0000
21088: MUL
21089: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21090: LD_VAR 0 6
21094: PPUSH
21095: CALL_OW 257
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: LD_INT 2
21105: PUSH
21106: LD_INT 3
21108: PUSH
21109: LD_INT 4
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: IN
21118: PUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_INT 51
21126: PPUSH
21127: CALL_OW 321
21131: PUSH
21132: LD_INT 2
21134: EQUAL
21135: AND
21136: IFFALSE 21153
// bpoints := bpoints * 1.2 ;
21138: LD_ADDR_VAR 0 10
21142: PUSH
21143: LD_VAR 0 10
21147: PUSH
21148: LD_REAL  1.20000000000000E+0000
21151: MUL
21152: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21153: LD_VAR 0 6
21157: PPUSH
21158: CALL_OW 257
21162: PUSH
21163: LD_INT 5
21165: PUSH
21166: LD_INT 7
21168: PUSH
21169: LD_INT 9
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: IN
21177: PUSH
21178: LD_VAR 0 1
21182: PPUSH
21183: LD_INT 52
21185: PPUSH
21186: CALL_OW 321
21190: PUSH
21191: LD_INT 2
21193: EQUAL
21194: AND
21195: IFFALSE 21212
// bpoints := bpoints * 1.5 ;
21197: LD_ADDR_VAR 0 10
21201: PUSH
21202: LD_VAR 0 10
21206: PUSH
21207: LD_REAL  1.50000000000000E+0000
21210: MUL
21211: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21212: LD_VAR 0 1
21216: PPUSH
21217: LD_INT 66
21219: PPUSH
21220: CALL_OW 321
21224: PUSH
21225: LD_INT 2
21227: EQUAL
21228: IFFALSE 21245
// bpoints := bpoints * 1.1 ;
21230: LD_ADDR_VAR 0 10
21234: PUSH
21235: LD_VAR 0 10
21239: PUSH
21240: LD_REAL  1.10000000000000E+0000
21243: MUL
21244: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21245: LD_ADDR_VAR 0 10
21249: PUSH
21250: LD_VAR 0 10
21254: PUSH
21255: LD_VAR 0 6
21259: PPUSH
21260: LD_INT 1
21262: PPUSH
21263: CALL_OW 259
21267: PUSH
21268: LD_REAL  1.15000000000000E+0000
21271: MUL
21272: MUL
21273: ST_TO_ADDR
// end ; unit_vehicle :
21274: GO 22098
21276: LD_INT 2
21278: DOUBLE
21279: EQUAL
21280: IFTRUE 21284
21282: GO 22086
21284: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21285: LD_VAR 0 6
21289: PPUSH
21290: CALL_OW 264
21294: PUSH
21295: LD_INT 2
21297: PUSH
21298: LD_INT 42
21300: PUSH
21301: LD_INT 24
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: IN
21309: IFFALSE 21330
// points := [ 25 , 5 , 3 ] ;
21311: LD_ADDR_VAR 0 9
21315: PUSH
21316: LD_INT 25
21318: PUSH
21319: LD_INT 5
21321: PUSH
21322: LD_INT 3
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: LIST
21329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21330: LD_VAR 0 6
21334: PPUSH
21335: CALL_OW 264
21339: PUSH
21340: LD_INT 4
21342: PUSH
21343: LD_INT 43
21345: PUSH
21346: LD_INT 25
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: LIST
21353: IN
21354: IFFALSE 21375
// points := [ 40 , 15 , 5 ] ;
21356: LD_ADDR_VAR 0 9
21360: PUSH
21361: LD_INT 40
21363: PUSH
21364: LD_INT 15
21366: PUSH
21367: LD_INT 5
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21375: LD_VAR 0 6
21379: PPUSH
21380: CALL_OW 264
21384: PUSH
21385: LD_INT 3
21387: PUSH
21388: LD_INT 23
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: IN
21395: IFFALSE 21416
// points := [ 7 , 25 , 8 ] ;
21397: LD_ADDR_VAR 0 9
21401: PUSH
21402: LD_INT 7
21404: PUSH
21405: LD_INT 25
21407: PUSH
21408: LD_INT 8
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: LIST
21415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21416: LD_VAR 0 6
21420: PPUSH
21421: CALL_OW 264
21425: PUSH
21426: LD_INT 5
21428: PUSH
21429: LD_INT 27
21431: PUSH
21432: LD_INT 44
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: LIST
21439: IN
21440: IFFALSE 21461
// points := [ 14 , 50 , 16 ] ;
21442: LD_ADDR_VAR 0 9
21446: PUSH
21447: LD_INT 14
21449: PUSH
21450: LD_INT 50
21452: PUSH
21453: LD_INT 16
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21461: LD_VAR 0 6
21465: PPUSH
21466: CALL_OW 264
21470: PUSH
21471: LD_INT 6
21473: PUSH
21474: LD_INT 46
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: IN
21481: IFFALSE 21502
// points := [ 32 , 120 , 70 ] ;
21483: LD_ADDR_VAR 0 9
21487: PUSH
21488: LD_INT 32
21490: PUSH
21491: LD_INT 120
21493: PUSH
21494: LD_INT 70
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: LIST
21501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
21502: LD_VAR 0 6
21506: PPUSH
21507: CALL_OW 264
21511: PUSH
21512: LD_INT 7
21514: PUSH
21515: LD_INT 28
21517: PUSH
21518: LD_INT 45
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: LIST
21525: IN
21526: IFFALSE 21547
// points := [ 35 , 20 , 45 ] ;
21528: LD_ADDR_VAR 0 9
21532: PUSH
21533: LD_INT 35
21535: PUSH
21536: LD_INT 20
21538: PUSH
21539: LD_INT 45
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21547: LD_VAR 0 6
21551: PPUSH
21552: CALL_OW 264
21556: PUSH
21557: LD_INT 47
21559: PUSH
21560: EMPTY
21561: LIST
21562: IN
21563: IFFALSE 21584
// points := [ 67 , 45 , 75 ] ;
21565: LD_ADDR_VAR 0 9
21569: PUSH
21570: LD_INT 67
21572: PUSH
21573: LD_INT 45
21575: PUSH
21576: LD_INT 75
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: LIST
21583: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21584: LD_VAR 0 6
21588: PPUSH
21589: CALL_OW 264
21593: PUSH
21594: LD_INT 26
21596: PUSH
21597: EMPTY
21598: LIST
21599: IN
21600: IFFALSE 21621
// points := [ 120 , 30 , 80 ] ;
21602: LD_ADDR_VAR 0 9
21606: PUSH
21607: LD_INT 120
21609: PUSH
21610: LD_INT 30
21612: PUSH
21613: LD_INT 80
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21621: LD_VAR 0 6
21625: PPUSH
21626: CALL_OW 264
21630: PUSH
21631: LD_INT 22
21633: PUSH
21634: EMPTY
21635: LIST
21636: IN
21637: IFFALSE 21658
// points := [ 40 , 1 , 1 ] ;
21639: LD_ADDR_VAR 0 9
21643: PUSH
21644: LD_INT 40
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21658: LD_VAR 0 6
21662: PPUSH
21663: CALL_OW 264
21667: PUSH
21668: LD_INT 29
21670: PUSH
21671: EMPTY
21672: LIST
21673: IN
21674: IFFALSE 21695
// points := [ 70 , 200 , 400 ] ;
21676: LD_ADDR_VAR 0 9
21680: PUSH
21681: LD_INT 70
21683: PUSH
21684: LD_INT 200
21686: PUSH
21687: LD_INT 400
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21695: LD_VAR 0 6
21699: PPUSH
21700: CALL_OW 264
21704: PUSH
21705: LD_INT 14
21707: PUSH
21708: LD_INT 53
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: IN
21715: IFFALSE 21736
// points := [ 40 , 10 , 20 ] ;
21717: LD_ADDR_VAR 0 9
21721: PUSH
21722: LD_INT 40
21724: PUSH
21725: LD_INT 10
21727: PUSH
21728: LD_INT 20
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21736: LD_VAR 0 6
21740: PPUSH
21741: CALL_OW 264
21745: PUSH
21746: LD_INT 9
21748: PUSH
21749: EMPTY
21750: LIST
21751: IN
21752: IFFALSE 21773
// points := [ 5 , 70 , 20 ] ;
21754: LD_ADDR_VAR 0 9
21758: PUSH
21759: LD_INT 5
21761: PUSH
21762: LD_INT 70
21764: PUSH
21765: LD_INT 20
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21773: LD_VAR 0 6
21777: PPUSH
21778: CALL_OW 264
21782: PUSH
21783: LD_INT 10
21785: PUSH
21786: EMPTY
21787: LIST
21788: IN
21789: IFFALSE 21810
// points := [ 35 , 110 , 70 ] ;
21791: LD_ADDR_VAR 0 9
21795: PUSH
21796: LD_INT 35
21798: PUSH
21799: LD_INT 110
21801: PUSH
21802: LD_INT 70
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21810: LD_VAR 0 6
21814: PPUSH
21815: CALL_OW 265
21819: PUSH
21820: LD_INT 25
21822: EQUAL
21823: IFFALSE 21844
// points := [ 80 , 65 , 100 ] ;
21825: LD_ADDR_VAR 0 9
21829: PUSH
21830: LD_INT 80
21832: PUSH
21833: LD_INT 65
21835: PUSH
21836: LD_INT 100
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: LIST
21843: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21844: LD_VAR 0 6
21848: PPUSH
21849: CALL_OW 263
21853: PUSH
21854: LD_INT 1
21856: EQUAL
21857: IFFALSE 21892
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21859: LD_ADDR_VAR 0 10
21863: PUSH
21864: LD_VAR 0 10
21868: PUSH
21869: LD_VAR 0 6
21873: PPUSH
21874: CALL_OW 311
21878: PPUSH
21879: LD_INT 3
21881: PPUSH
21882: CALL_OW 259
21886: PUSH
21887: LD_INT 4
21889: MUL
21890: MUL
21891: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21892: LD_VAR 0 6
21896: PPUSH
21897: CALL_OW 263
21901: PUSH
21902: LD_INT 2
21904: EQUAL
21905: IFFALSE 21956
// begin j := IsControledBy ( i ) ;
21907: LD_ADDR_VAR 0 7
21911: PUSH
21912: LD_VAR 0 6
21916: PPUSH
21917: CALL_OW 312
21921: ST_TO_ADDR
// if j then
21922: LD_VAR 0 7
21926: IFFALSE 21956
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21928: LD_ADDR_VAR 0 10
21932: PUSH
21933: LD_VAR 0 10
21937: PUSH
21938: LD_VAR 0 7
21942: PPUSH
21943: LD_INT 3
21945: PPUSH
21946: CALL_OW 259
21950: PUSH
21951: LD_INT 3
21953: MUL
21954: MUL
21955: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21956: LD_VAR 0 6
21960: PPUSH
21961: CALL_OW 264
21965: PUSH
21966: LD_INT 5
21968: PUSH
21969: LD_INT 6
21971: PUSH
21972: LD_INT 46
21974: PUSH
21975: LD_INT 44
21977: PUSH
21978: LD_INT 47
21980: PUSH
21981: LD_INT 45
21983: PUSH
21984: LD_INT 28
21986: PUSH
21987: LD_INT 7
21989: PUSH
21990: LD_INT 27
21992: PUSH
21993: LD_INT 29
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: IN
22008: PUSH
22009: LD_VAR 0 1
22013: PPUSH
22014: LD_INT 52
22016: PPUSH
22017: CALL_OW 321
22021: PUSH
22022: LD_INT 2
22024: EQUAL
22025: AND
22026: IFFALSE 22043
// bpoints := bpoints * 1.2 ;
22028: LD_ADDR_VAR 0 10
22032: PUSH
22033: LD_VAR 0 10
22037: PUSH
22038: LD_REAL  1.20000000000000E+0000
22041: MUL
22042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22043: LD_VAR 0 6
22047: PPUSH
22048: CALL_OW 264
22052: PUSH
22053: LD_INT 6
22055: PUSH
22056: LD_INT 46
22058: PUSH
22059: LD_INT 47
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: IN
22067: IFFALSE 22084
// bpoints := bpoints * 1.2 ;
22069: LD_ADDR_VAR 0 10
22073: PUSH
22074: LD_VAR 0 10
22078: PUSH
22079: LD_REAL  1.20000000000000E+0000
22082: MUL
22083: ST_TO_ADDR
// end ; unit_building :
22084: GO 22098
22086: LD_INT 3
22088: DOUBLE
22089: EQUAL
22090: IFTRUE 22094
22092: GO 22097
22094: POP
// ; end ;
22095: GO 22098
22097: POP
// for j = 1 to 3 do
22098: LD_ADDR_VAR 0 7
22102: PUSH
22103: DOUBLE
22104: LD_INT 1
22106: DEC
22107: ST_TO_ADDR
22108: LD_INT 3
22110: PUSH
22111: FOR_TO
22112: IFFALSE 22165
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22114: LD_ADDR_VAR 0 5
22118: PUSH
22119: LD_VAR 0 5
22123: PPUSH
22124: LD_VAR 0 7
22128: PPUSH
22129: LD_VAR 0 5
22133: PUSH
22134: LD_VAR 0 7
22138: ARRAY
22139: PUSH
22140: LD_VAR 0 9
22144: PUSH
22145: LD_VAR 0 7
22149: ARRAY
22150: PUSH
22151: LD_VAR 0 10
22155: MUL
22156: PLUS
22157: PPUSH
22158: CALL_OW 1
22162: ST_TO_ADDR
22163: GO 22111
22165: POP
22166: POP
// end ;
22167: GO 20650
22169: POP
22170: POP
// result := Replace ( result , 4 , tmp ) ;
22171: LD_ADDR_VAR 0 5
22175: PUSH
22176: LD_VAR 0 5
22180: PPUSH
22181: LD_INT 4
22183: PPUSH
22184: LD_VAR 0 8
22188: PPUSH
22189: CALL_OW 1
22193: ST_TO_ADDR
// end ;
22194: LD_VAR 0 5
22198: RET
// export function DangerAtRange ( unit , range ) ; begin
22199: LD_INT 0
22201: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22202: LD_ADDR_VAR 0 3
22206: PUSH
22207: LD_VAR 0 1
22211: PPUSH
22212: CALL_OW 255
22216: PPUSH
22217: LD_VAR 0 1
22221: PPUSH
22222: CALL_OW 250
22226: PPUSH
22227: LD_VAR 0 1
22231: PPUSH
22232: CALL_OW 251
22236: PPUSH
22237: LD_VAR 0 2
22241: PPUSH
22242: CALL 20502 0 4
22246: ST_TO_ADDR
// end ;
22247: LD_VAR 0 3
22251: RET
// export function DangerInArea ( side , area ) ; begin
22252: LD_INT 0
22254: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22255: LD_ADDR_VAR 0 3
22259: PUSH
22260: LD_VAR 0 2
22264: PPUSH
22265: LD_INT 81
22267: PUSH
22268: LD_VAR 0 1
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PPUSH
22277: CALL_OW 70
22281: ST_TO_ADDR
// end ;
22282: LD_VAR 0 3
22286: RET
// export function IsExtension ( b ) ; begin
22287: LD_INT 0
22289: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22290: LD_ADDR_VAR 0 2
22294: PUSH
22295: LD_VAR 0 1
22299: PUSH
22300: LD_INT 23
22302: PUSH
22303: LD_INT 20
22305: PUSH
22306: LD_INT 22
22308: PUSH
22309: LD_INT 17
22311: PUSH
22312: LD_INT 24
22314: PUSH
22315: LD_INT 21
22317: PUSH
22318: LD_INT 19
22320: PUSH
22321: LD_INT 16
22323: PUSH
22324: LD_INT 25
22326: PUSH
22327: LD_INT 18
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: IN
22342: ST_TO_ADDR
// end ;
22343: LD_VAR 0 2
22347: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
22348: LD_INT 0
22350: PPUSH
22351: PPUSH
22352: PPUSH
// result := [ ] ;
22353: LD_ADDR_VAR 0 3
22357: PUSH
22358: EMPTY
22359: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22360: LD_ADDR_VAR 0 4
22364: PUSH
22365: LD_VAR 0 2
22369: PPUSH
22370: LD_INT 21
22372: PUSH
22373: LD_INT 3
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PPUSH
22380: CALL_OW 70
22384: ST_TO_ADDR
// if not tmp then
22385: LD_VAR 0 4
22389: NOT
22390: IFFALSE 22394
// exit ;
22392: GO 22452
// for i in tmp do
22394: LD_ADDR_VAR 0 5
22398: PUSH
22399: LD_VAR 0 4
22403: PUSH
22404: FOR_IN
22405: IFFALSE 22440
// if GetBase ( i ) <> base then
22407: LD_VAR 0 5
22411: PPUSH
22412: CALL_OW 274
22416: PUSH
22417: LD_VAR 0 1
22421: NONEQUAL
22422: IFFALSE 22438
// ComLinkToBase ( base , i ) ;
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_VAR 0 5
22433: PPUSH
22434: CALL_OW 169
22438: GO 22404
22440: POP
22441: POP
// result := tmp ;
22442: LD_ADDR_VAR 0 3
22446: PUSH
22447: LD_VAR 0 4
22451: ST_TO_ADDR
// end ;
22452: LD_VAR 0 3
22456: RET
// export function ComComplete ( unit , b ) ; var i ; begin
22457: LD_INT 0
22459: PPUSH
22460: PPUSH
// if BuildingStatus ( b ) = bs_build then
22461: LD_VAR 0 2
22465: PPUSH
22466: CALL_OW 461
22470: PUSH
22471: LD_INT 1
22473: EQUAL
22474: IFFALSE 22534
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22476: LD_VAR 0 1
22480: PPUSH
22481: LD_STRING h
22483: PUSH
22484: LD_VAR 0 2
22488: PPUSH
22489: CALL_OW 250
22493: PUSH
22494: LD_VAR 0 2
22498: PPUSH
22499: CALL_OW 251
22503: PUSH
22504: LD_VAR 0 2
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: PUSH
22527: EMPTY
22528: LIST
22529: PPUSH
22530: CALL_OW 446
// end ;
22534: LD_VAR 0 3
22538: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22539: LD_INT 0
22541: PPUSH
22542: PPUSH
22543: PPUSH
22544: PPUSH
22545: PPUSH
22546: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
22547: LD_VAR 0 1
22551: NOT
22552: PUSH
22553: LD_VAR 0 1
22557: PPUSH
22558: CALL_OW 263
22562: PUSH
22563: LD_INT 2
22565: EQUAL
22566: NOT
22567: OR
22568: IFFALSE 22572
// exit ;
22570: GO 22888
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22572: LD_ADDR_VAR 0 6
22576: PUSH
22577: LD_INT 22
22579: PUSH
22580: LD_VAR 0 1
22584: PPUSH
22585: CALL_OW 255
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 30
22599: PUSH
22600: LD_INT 36
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 34
22609: PUSH
22610: LD_INT 31
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 69
22630: ST_TO_ADDR
// if not tmp then
22631: LD_VAR 0 6
22635: NOT
22636: IFFALSE 22640
// exit ;
22638: GO 22888
// result := [ ] ;
22640: LD_ADDR_VAR 0 2
22644: PUSH
22645: EMPTY
22646: ST_TO_ADDR
// for i in tmp do
22647: LD_ADDR_VAR 0 3
22651: PUSH
22652: LD_VAR 0 6
22656: PUSH
22657: FOR_IN
22658: IFFALSE 22729
// begin t := UnitsInside ( i ) ;
22660: LD_ADDR_VAR 0 4
22664: PUSH
22665: LD_VAR 0 3
22669: PPUSH
22670: CALL_OW 313
22674: ST_TO_ADDR
// if t then
22675: LD_VAR 0 4
22679: IFFALSE 22727
// for j in t do
22681: LD_ADDR_VAR 0 7
22685: PUSH
22686: LD_VAR 0 4
22690: PUSH
22691: FOR_IN
22692: IFFALSE 22725
// result := Insert ( result , result + 1 , j ) ;
22694: LD_ADDR_VAR 0 2
22698: PUSH
22699: LD_VAR 0 2
22703: PPUSH
22704: LD_VAR 0 2
22708: PUSH
22709: LD_INT 1
22711: PLUS
22712: PPUSH
22713: LD_VAR 0 7
22717: PPUSH
22718: CALL_OW 2
22722: ST_TO_ADDR
22723: GO 22691
22725: POP
22726: POP
// end ;
22727: GO 22657
22729: POP
22730: POP
// if not result then
22731: LD_VAR 0 2
22735: NOT
22736: IFFALSE 22740
// exit ;
22738: GO 22888
// mech := result [ 1 ] ;
22740: LD_ADDR_VAR 0 5
22744: PUSH
22745: LD_VAR 0 2
22749: PUSH
22750: LD_INT 1
22752: ARRAY
22753: ST_TO_ADDR
// if result > 1 then
22754: LD_VAR 0 2
22758: PUSH
22759: LD_INT 1
22761: GREATER
22762: IFFALSE 22874
// for i = 2 to result do
22764: LD_ADDR_VAR 0 3
22768: PUSH
22769: DOUBLE
22770: LD_INT 2
22772: DEC
22773: ST_TO_ADDR
22774: LD_VAR 0 2
22778: PUSH
22779: FOR_TO
22780: IFFALSE 22872
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22782: LD_ADDR_VAR 0 4
22786: PUSH
22787: LD_VAR 0 2
22791: PUSH
22792: LD_VAR 0 3
22796: ARRAY
22797: PPUSH
22798: LD_INT 3
22800: PPUSH
22801: CALL_OW 259
22805: PUSH
22806: LD_VAR 0 2
22810: PUSH
22811: LD_VAR 0 3
22815: ARRAY
22816: PPUSH
22817: CALL_OW 432
22821: MINUS
22822: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22823: LD_VAR 0 4
22827: PUSH
22828: LD_VAR 0 5
22832: PPUSH
22833: LD_INT 3
22835: PPUSH
22836: CALL_OW 259
22840: PUSH
22841: LD_VAR 0 5
22845: PPUSH
22846: CALL_OW 432
22850: MINUS
22851: GREATEREQUAL
22852: IFFALSE 22870
// mech := result [ i ] ;
22854: LD_ADDR_VAR 0 5
22858: PUSH
22859: LD_VAR 0 2
22863: PUSH
22864: LD_VAR 0 3
22868: ARRAY
22869: ST_TO_ADDR
// end ;
22870: GO 22779
22872: POP
22873: POP
// ComLinkTo ( vehicle , mech ) ;
22874: LD_VAR 0 1
22878: PPUSH
22879: LD_VAR 0 5
22883: PPUSH
22884: CALL_OW 135
// end ;
22888: LD_VAR 0 2
22892: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
22893: LD_INT 0
22895: PPUSH
22896: PPUSH
22897: PPUSH
22898: PPUSH
22899: PPUSH
22900: PPUSH
22901: PPUSH
22902: PPUSH
22903: PPUSH
22904: PPUSH
22905: PPUSH
22906: PPUSH
22907: PPUSH
// result := [ ] ;
22908: LD_ADDR_VAR 0 7
22912: PUSH
22913: EMPTY
22914: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 266
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: IN
22935: NOT
22936: IFFALSE 22940
// exit ;
22938: GO 24571
// if name then
22940: LD_VAR 0 3
22944: IFFALSE 22960
// SetBName ( base_dep , name ) ;
22946: LD_VAR 0 1
22950: PPUSH
22951: LD_VAR 0 3
22955: PPUSH
22956: CALL_OW 500
// base := GetBase ( base_dep ) ;
22960: LD_ADDR_VAR 0 15
22964: PUSH
22965: LD_VAR 0 1
22969: PPUSH
22970: CALL_OW 274
22974: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22975: LD_ADDR_VAR 0 16
22979: PUSH
22980: LD_VAR 0 1
22984: PPUSH
22985: CALL_OW 255
22989: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22990: LD_ADDR_VAR 0 17
22994: PUSH
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 248
23004: ST_TO_ADDR
// if sources then
23005: LD_VAR 0 5
23009: IFFALSE 23056
// for i = 1 to 3 do
23011: LD_ADDR_VAR 0 8
23015: PUSH
23016: DOUBLE
23017: LD_INT 1
23019: DEC
23020: ST_TO_ADDR
23021: LD_INT 3
23023: PUSH
23024: FOR_TO
23025: IFFALSE 23054
// AddResourceType ( base , i , sources [ i ] ) ;
23027: LD_VAR 0 15
23031: PPUSH
23032: LD_VAR 0 8
23036: PPUSH
23037: LD_VAR 0 5
23041: PUSH
23042: LD_VAR 0 8
23046: ARRAY
23047: PPUSH
23048: CALL_OW 276
23052: GO 23024
23054: POP
23055: POP
// buildings := GetBaseBuildings ( base , area ) ;
23056: LD_ADDR_VAR 0 18
23060: PUSH
23061: LD_VAR 0 15
23065: PPUSH
23066: LD_VAR 0 2
23070: PPUSH
23071: CALL 22348 0 2
23075: ST_TO_ADDR
// InitHc ;
23076: CALL_OW 19
// InitUc ;
23080: CALL_OW 18
// uc_side := side ;
23084: LD_ADDR_OWVAR 20
23088: PUSH
23089: LD_VAR 0 16
23093: ST_TO_ADDR
// uc_nation := nation ;
23094: LD_ADDR_OWVAR 21
23098: PUSH
23099: LD_VAR 0 17
23103: ST_TO_ADDR
// if buildings then
23104: LD_VAR 0 18
23108: IFFALSE 24430
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23110: LD_ADDR_VAR 0 19
23114: PUSH
23115: LD_VAR 0 18
23119: PPUSH
23120: LD_INT 2
23122: PUSH
23123: LD_INT 30
23125: PUSH
23126: LD_INT 29
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 30
23135: PUSH
23136: LD_INT 30
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: PPUSH
23148: CALL_OW 72
23152: ST_TO_ADDR
// if tmp then
23153: LD_VAR 0 19
23157: IFFALSE 23205
// for i in tmp do
23159: LD_ADDR_VAR 0 8
23163: PUSH
23164: LD_VAR 0 19
23168: PUSH
23169: FOR_IN
23170: IFFALSE 23203
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23172: LD_VAR 0 8
23176: PPUSH
23177: CALL_OW 250
23181: PPUSH
23182: LD_VAR 0 8
23186: PPUSH
23187: CALL_OW 251
23191: PPUSH
23192: LD_VAR 0 16
23196: PPUSH
23197: CALL_OW 441
23201: GO 23169
23203: POP
23204: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23205: LD_VAR 0 18
23209: PPUSH
23210: LD_INT 2
23212: PUSH
23213: LD_INT 30
23215: PUSH
23216: LD_INT 32
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 30
23225: PUSH
23226: LD_INT 33
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: LIST
23237: PPUSH
23238: CALL_OW 72
23242: IFFALSE 23330
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23244: LD_ADDR_VAR 0 8
23248: PUSH
23249: LD_VAR 0 18
23253: PPUSH
23254: LD_INT 2
23256: PUSH
23257: LD_INT 30
23259: PUSH
23260: LD_INT 32
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 30
23269: PUSH
23270: LD_INT 33
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: PPUSH
23282: CALL_OW 72
23286: PUSH
23287: FOR_IN
23288: IFFALSE 23328
// begin if not GetBWeapon ( i ) then
23290: LD_VAR 0 8
23294: PPUSH
23295: CALL_OW 269
23299: NOT
23300: IFFALSE 23326
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23302: LD_VAR 0 8
23306: PPUSH
23307: LD_VAR 0 8
23311: PPUSH
23312: LD_VAR 0 2
23316: PPUSH
23317: CALL 24576 0 2
23321: PPUSH
23322: CALL_OW 431
// end ;
23326: GO 23287
23328: POP
23329: POP
// end ; for i = 1 to personel do
23330: LD_ADDR_VAR 0 8
23334: PUSH
23335: DOUBLE
23336: LD_INT 1
23338: DEC
23339: ST_TO_ADDR
23340: LD_VAR 0 6
23344: PUSH
23345: FOR_TO
23346: IFFALSE 24410
// begin if i > 4 then
23348: LD_VAR 0 8
23352: PUSH
23353: LD_INT 4
23355: GREATER
23356: IFFALSE 23360
// break ;
23358: GO 24410
// case i of 1 :
23360: LD_VAR 0 8
23364: PUSH
23365: LD_INT 1
23367: DOUBLE
23368: EQUAL
23369: IFTRUE 23373
23371: GO 23453
23373: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23374: LD_ADDR_VAR 0 12
23378: PUSH
23379: LD_VAR 0 18
23383: PPUSH
23384: LD_INT 22
23386: PUSH
23387: LD_VAR 0 16
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 58
23398: PUSH
23399: EMPTY
23400: LIST
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: LD_INT 30
23407: PUSH
23408: LD_INT 32
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 30
23417: PUSH
23418: LD_INT 4
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 30
23427: PUSH
23428: LD_INT 5
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: PPUSH
23446: CALL_OW 72
23450: ST_TO_ADDR
23451: GO 23675
23453: LD_INT 2
23455: DOUBLE
23456: EQUAL
23457: IFTRUE 23461
23459: GO 23523
23461: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23462: LD_ADDR_VAR 0 12
23466: PUSH
23467: LD_VAR 0 18
23471: PPUSH
23472: LD_INT 22
23474: PUSH
23475: LD_VAR 0 16
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: LD_INT 30
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 30
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PPUSH
23516: CALL_OW 72
23520: ST_TO_ADDR
23521: GO 23675
23523: LD_INT 3
23525: DOUBLE
23526: EQUAL
23527: IFTRUE 23531
23529: GO 23593
23531: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23532: LD_ADDR_VAR 0 12
23536: PUSH
23537: LD_VAR 0 18
23541: PPUSH
23542: LD_INT 22
23544: PUSH
23545: LD_VAR 0 16
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 2
23556: PUSH
23557: LD_INT 30
23559: PUSH
23560: LD_INT 2
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 30
23569: PUSH
23570: LD_INT 3
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PPUSH
23586: CALL_OW 72
23590: ST_TO_ADDR
23591: GO 23675
23593: LD_INT 4
23595: DOUBLE
23596: EQUAL
23597: IFTRUE 23601
23599: GO 23674
23601: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23602: LD_ADDR_VAR 0 12
23606: PUSH
23607: LD_VAR 0 18
23611: PPUSH
23612: LD_INT 22
23614: PUSH
23615: LD_VAR 0 16
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 2
23626: PUSH
23627: LD_INT 30
23629: PUSH
23630: LD_INT 6
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 30
23639: PUSH
23640: LD_INT 7
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 30
23649: PUSH
23650: LD_INT 8
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PPUSH
23667: CALL_OW 72
23671: ST_TO_ADDR
23672: GO 23675
23674: POP
// if i = 1 then
23675: LD_VAR 0 8
23679: PUSH
23680: LD_INT 1
23682: EQUAL
23683: IFFALSE 23794
// begin tmp := [ ] ;
23685: LD_ADDR_VAR 0 19
23689: PUSH
23690: EMPTY
23691: ST_TO_ADDR
// for j in f do
23692: LD_ADDR_VAR 0 9
23696: PUSH
23697: LD_VAR 0 12
23701: PUSH
23702: FOR_IN
23703: IFFALSE 23776
// if GetBType ( j ) = b_bunker then
23705: LD_VAR 0 9
23709: PPUSH
23710: CALL_OW 266
23714: PUSH
23715: LD_INT 32
23717: EQUAL
23718: IFFALSE 23745
// tmp := Insert ( tmp , 1 , j ) else
23720: LD_ADDR_VAR 0 19
23724: PUSH
23725: LD_VAR 0 19
23729: PPUSH
23730: LD_INT 1
23732: PPUSH
23733: LD_VAR 0 9
23737: PPUSH
23738: CALL_OW 2
23742: ST_TO_ADDR
23743: GO 23774
// tmp := Insert ( tmp , tmp + 1 , j ) ;
23745: LD_ADDR_VAR 0 19
23749: PUSH
23750: LD_VAR 0 19
23754: PPUSH
23755: LD_VAR 0 19
23759: PUSH
23760: LD_INT 1
23762: PLUS
23763: PPUSH
23764: LD_VAR 0 9
23768: PPUSH
23769: CALL_OW 2
23773: ST_TO_ADDR
23774: GO 23702
23776: POP
23777: POP
// if tmp then
23778: LD_VAR 0 19
23782: IFFALSE 23794
// f := tmp ;
23784: LD_ADDR_VAR 0 12
23788: PUSH
23789: LD_VAR 0 19
23793: ST_TO_ADDR
// end ; x := personel [ i ] ;
23794: LD_ADDR_VAR 0 13
23798: PUSH
23799: LD_VAR 0 6
23803: PUSH
23804: LD_VAR 0 8
23808: ARRAY
23809: ST_TO_ADDR
// if x = - 1 then
23810: LD_VAR 0 13
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: EQUAL
23819: IFFALSE 24028
// begin for j in f do
23821: LD_ADDR_VAR 0 9
23825: PUSH
23826: LD_VAR 0 12
23830: PUSH
23831: FOR_IN
23832: IFFALSE 24024
// repeat InitHc ;
23834: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23838: LD_VAR 0 9
23842: PPUSH
23843: CALL_OW 266
23847: PUSH
23848: LD_INT 5
23850: EQUAL
23851: IFFALSE 23921
// begin if UnitsInside ( j ) < 3 then
23853: LD_VAR 0 9
23857: PPUSH
23858: CALL_OW 313
23862: PUSH
23863: LD_INT 3
23865: LESS
23866: IFFALSE 23902
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23868: LD_INT 0
23870: PPUSH
23871: LD_INT 5
23873: PUSH
23874: LD_INT 8
23876: PUSH
23877: LD_INT 9
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: PUSH
23885: LD_VAR 0 17
23889: ARRAY
23890: PPUSH
23891: LD_VAR 0 4
23895: PPUSH
23896: CALL_OW 380
23900: GO 23919
// PrepareHuman ( false , i , skill ) ;
23902: LD_INT 0
23904: PPUSH
23905: LD_VAR 0 8
23909: PPUSH
23910: LD_VAR 0 4
23914: PPUSH
23915: CALL_OW 380
// end else
23919: GO 23938
// PrepareHuman ( false , i , skill ) ;
23921: LD_INT 0
23923: PPUSH
23924: LD_VAR 0 8
23928: PPUSH
23929: LD_VAR 0 4
23933: PPUSH
23934: CALL_OW 380
// un := CreateHuman ;
23938: LD_ADDR_VAR 0 14
23942: PUSH
23943: CALL_OW 44
23947: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23948: LD_ADDR_VAR 0 7
23952: PUSH
23953: LD_VAR 0 7
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: LD_VAR 0 14
23965: PPUSH
23966: CALL_OW 2
23970: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23971: LD_VAR 0 14
23975: PPUSH
23976: LD_VAR 0 9
23980: PPUSH
23981: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23985: LD_VAR 0 9
23989: PPUSH
23990: CALL_OW 313
23994: PUSH
23995: LD_INT 6
23997: EQUAL
23998: PUSH
23999: LD_VAR 0 9
24003: PPUSH
24004: CALL_OW 266
24008: PUSH
24009: LD_INT 32
24011: PUSH
24012: LD_INT 31
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: IN
24019: OR
24020: IFFALSE 23834
24022: GO 23831
24024: POP
24025: POP
// end else
24026: GO 24408
// for j = 1 to x do
24028: LD_ADDR_VAR 0 9
24032: PUSH
24033: DOUBLE
24034: LD_INT 1
24036: DEC
24037: ST_TO_ADDR
24038: LD_VAR 0 13
24042: PUSH
24043: FOR_TO
24044: IFFALSE 24406
// begin InitHc ;
24046: CALL_OW 19
// if not f then
24050: LD_VAR 0 12
24054: NOT
24055: IFFALSE 24144
// begin PrepareHuman ( false , i , skill ) ;
24057: LD_INT 0
24059: PPUSH
24060: LD_VAR 0 8
24064: PPUSH
24065: LD_VAR 0 4
24069: PPUSH
24070: CALL_OW 380
// un := CreateHuman ;
24074: LD_ADDR_VAR 0 14
24078: PUSH
24079: CALL_OW 44
24083: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24084: LD_ADDR_VAR 0 7
24088: PUSH
24089: LD_VAR 0 7
24093: PPUSH
24094: LD_INT 1
24096: PPUSH
24097: LD_VAR 0 14
24101: PPUSH
24102: CALL_OW 2
24106: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24107: LD_VAR 0 14
24111: PPUSH
24112: LD_VAR 0 1
24116: PPUSH
24117: CALL_OW 250
24121: PPUSH
24122: LD_VAR 0 1
24126: PPUSH
24127: CALL_OW 251
24131: PPUSH
24132: LD_INT 10
24134: PPUSH
24135: LD_INT 0
24137: PPUSH
24138: CALL_OW 50
// continue ;
24142: GO 24043
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24144: LD_VAR 0 12
24148: PUSH
24149: LD_INT 1
24151: ARRAY
24152: PPUSH
24153: CALL_OW 313
24157: PUSH
24158: LD_VAR 0 12
24162: PUSH
24163: LD_INT 1
24165: ARRAY
24166: PPUSH
24167: CALL_OW 266
24171: PUSH
24172: LD_INT 32
24174: PUSH
24175: LD_INT 31
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: IN
24182: AND
24183: PUSH
24184: LD_VAR 0 12
24188: PUSH
24189: LD_INT 1
24191: ARRAY
24192: PPUSH
24193: CALL_OW 313
24197: PUSH
24198: LD_INT 6
24200: EQUAL
24201: OR
24202: IFFALSE 24222
// f := Delete ( f , 1 ) ;
24204: LD_ADDR_VAR 0 12
24208: PUSH
24209: LD_VAR 0 12
24213: PPUSH
24214: LD_INT 1
24216: PPUSH
24217: CALL_OW 3
24221: ST_TO_ADDR
// if not f then
24222: LD_VAR 0 12
24226: NOT
24227: IFFALSE 24245
// begin x := x + 2 ;
24229: LD_ADDR_VAR 0 13
24233: PUSH
24234: LD_VAR 0 13
24238: PUSH
24239: LD_INT 2
24241: PLUS
24242: ST_TO_ADDR
// continue ;
24243: GO 24043
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24245: LD_VAR 0 12
24249: PUSH
24250: LD_INT 1
24252: ARRAY
24253: PPUSH
24254: CALL_OW 266
24258: PUSH
24259: LD_INT 5
24261: EQUAL
24262: IFFALSE 24336
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24264: LD_VAR 0 12
24268: PUSH
24269: LD_INT 1
24271: ARRAY
24272: PPUSH
24273: CALL_OW 313
24277: PUSH
24278: LD_INT 3
24280: LESS
24281: IFFALSE 24317
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24283: LD_INT 0
24285: PPUSH
24286: LD_INT 5
24288: PUSH
24289: LD_INT 8
24291: PUSH
24292: LD_INT 9
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: LIST
24299: PUSH
24300: LD_VAR 0 17
24304: ARRAY
24305: PPUSH
24306: LD_VAR 0 4
24310: PPUSH
24311: CALL_OW 380
24315: GO 24334
// PrepareHuman ( false , i , skill ) ;
24317: LD_INT 0
24319: PPUSH
24320: LD_VAR 0 8
24324: PPUSH
24325: LD_VAR 0 4
24329: PPUSH
24330: CALL_OW 380
// end else
24334: GO 24353
// PrepareHuman ( false , i , skill ) ;
24336: LD_INT 0
24338: PPUSH
24339: LD_VAR 0 8
24343: PPUSH
24344: LD_VAR 0 4
24348: PPUSH
24349: CALL_OW 380
// un := CreateHuman ;
24353: LD_ADDR_VAR 0 14
24357: PUSH
24358: CALL_OW 44
24362: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24363: LD_ADDR_VAR 0 7
24367: PUSH
24368: LD_VAR 0 7
24372: PPUSH
24373: LD_INT 1
24375: PPUSH
24376: LD_VAR 0 14
24380: PPUSH
24381: CALL_OW 2
24385: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24386: LD_VAR 0 14
24390: PPUSH
24391: LD_VAR 0 12
24395: PUSH
24396: LD_INT 1
24398: ARRAY
24399: PPUSH
24400: CALL_OW 52
// end ;
24404: GO 24043
24406: POP
24407: POP
// end ;
24408: GO 23345
24410: POP
24411: POP
// result := result ^ buildings ;
24412: LD_ADDR_VAR 0 7
24416: PUSH
24417: LD_VAR 0 7
24421: PUSH
24422: LD_VAR 0 18
24426: ADD
24427: ST_TO_ADDR
// end else
24428: GO 24571
// begin for i = 1 to personel do
24430: LD_ADDR_VAR 0 8
24434: PUSH
24435: DOUBLE
24436: LD_INT 1
24438: DEC
24439: ST_TO_ADDR
24440: LD_VAR 0 6
24444: PUSH
24445: FOR_TO
24446: IFFALSE 24569
// begin if i > 4 then
24448: LD_VAR 0 8
24452: PUSH
24453: LD_INT 4
24455: GREATER
24456: IFFALSE 24460
// break ;
24458: GO 24569
// x := personel [ i ] ;
24460: LD_ADDR_VAR 0 13
24464: PUSH
24465: LD_VAR 0 6
24469: PUSH
24470: LD_VAR 0 8
24474: ARRAY
24475: ST_TO_ADDR
// if x = - 1 then
24476: LD_VAR 0 13
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: EQUAL
24485: IFFALSE 24489
// continue ;
24487: GO 24445
// PrepareHuman ( false , i , skill ) ;
24489: LD_INT 0
24491: PPUSH
24492: LD_VAR 0 8
24496: PPUSH
24497: LD_VAR 0 4
24501: PPUSH
24502: CALL_OW 380
// un := CreateHuman ;
24506: LD_ADDR_VAR 0 14
24510: PUSH
24511: CALL_OW 44
24515: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24516: LD_VAR 0 14
24520: PPUSH
24521: LD_VAR 0 1
24525: PPUSH
24526: CALL_OW 250
24530: PPUSH
24531: LD_VAR 0 1
24535: PPUSH
24536: CALL_OW 251
24540: PPUSH
24541: LD_INT 10
24543: PPUSH
24544: LD_INT 0
24546: PPUSH
24547: CALL_OW 50
// result := result ^ un ;
24551: LD_ADDR_VAR 0 7
24555: PUSH
24556: LD_VAR 0 7
24560: PUSH
24561: LD_VAR 0 14
24565: ADD
24566: ST_TO_ADDR
// end ;
24567: GO 24445
24569: POP
24570: POP
// end ; end ;
24571: LD_VAR 0 7
24575: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24576: LD_INT 0
24578: PPUSH
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
// result := false ;
24594: LD_ADDR_VAR 0 3
24598: PUSH
24599: LD_INT 0
24601: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24602: LD_VAR 0 1
24606: NOT
24607: PUSH
24608: LD_VAR 0 1
24612: PPUSH
24613: CALL_OW 266
24617: PUSH
24618: LD_INT 32
24620: PUSH
24621: LD_INT 33
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: IN
24628: NOT
24629: OR
24630: IFFALSE 24634
// exit ;
24632: GO 25770
// nat := GetNation ( tower ) ;
24634: LD_ADDR_VAR 0 12
24638: PUSH
24639: LD_VAR 0 1
24643: PPUSH
24644: CALL_OW 248
24648: ST_TO_ADDR
// side := GetSide ( tower ) ;
24649: LD_ADDR_VAR 0 16
24653: PUSH
24654: LD_VAR 0 1
24658: PPUSH
24659: CALL_OW 255
24663: ST_TO_ADDR
// x := GetX ( tower ) ;
24664: LD_ADDR_VAR 0 10
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 250
24678: ST_TO_ADDR
// y := GetY ( tower ) ;
24679: LD_ADDR_VAR 0 11
24683: PUSH
24684: LD_VAR 0 1
24688: PPUSH
24689: CALL_OW 251
24693: ST_TO_ADDR
// if not x or not y then
24694: LD_VAR 0 10
24698: NOT
24699: PUSH
24700: LD_VAR 0 11
24704: NOT
24705: OR
24706: IFFALSE 24710
// exit ;
24708: GO 25770
// weapon := 0 ;
24710: LD_ADDR_VAR 0 18
24714: PUSH
24715: LD_INT 0
24717: ST_TO_ADDR
// fac_list := [ ] ;
24718: LD_ADDR_VAR 0 17
24722: PUSH
24723: EMPTY
24724: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
24725: LD_ADDR_VAR 0 6
24729: PUSH
24730: LD_VAR 0 1
24734: PPUSH
24735: CALL_OW 274
24739: PPUSH
24740: LD_VAR 0 2
24744: PPUSH
24745: CALL 22348 0 2
24749: PPUSH
24750: LD_INT 30
24752: PUSH
24753: LD_INT 3
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PPUSH
24760: CALL_OW 72
24764: ST_TO_ADDR
// if not factories then
24765: LD_VAR 0 6
24769: NOT
24770: IFFALSE 24774
// exit ;
24772: GO 25770
// for i in factories do
24774: LD_ADDR_VAR 0 8
24778: PUSH
24779: LD_VAR 0 6
24783: PUSH
24784: FOR_IN
24785: IFFALSE 24810
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24787: LD_ADDR_VAR 0 17
24791: PUSH
24792: LD_VAR 0 17
24796: PUSH
24797: LD_VAR 0 8
24801: PPUSH
24802: CALL_OW 478
24806: UNION
24807: ST_TO_ADDR
24808: GO 24784
24810: POP
24811: POP
// if not fac_list then
24812: LD_VAR 0 17
24816: NOT
24817: IFFALSE 24821
// exit ;
24819: GO 25770
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24821: LD_ADDR_VAR 0 5
24825: PUSH
24826: LD_INT 4
24828: PUSH
24829: LD_INT 5
24831: PUSH
24832: LD_INT 9
24834: PUSH
24835: LD_INT 10
24837: PUSH
24838: LD_INT 6
24840: PUSH
24841: LD_INT 7
24843: PUSH
24844: LD_INT 11
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 27
24858: PUSH
24859: LD_INT 28
24861: PUSH
24862: LD_INT 26
24864: PUSH
24865: LD_INT 30
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 43
24876: PUSH
24877: LD_INT 44
24879: PUSH
24880: LD_INT 46
24882: PUSH
24883: LD_INT 45
24885: PUSH
24886: LD_INT 47
24888: PUSH
24889: LD_INT 49
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: PUSH
24905: LD_VAR 0 12
24909: ARRAY
24910: ST_TO_ADDR
// for i in list do
24911: LD_ADDR_VAR 0 8
24915: PUSH
24916: LD_VAR 0 5
24920: PUSH
24921: FOR_IN
24922: IFFALSE 24955
// if not i in fac_list then
24924: LD_VAR 0 8
24928: PUSH
24929: LD_VAR 0 17
24933: IN
24934: NOT
24935: IFFALSE 24953
// list := list diff i ;
24937: LD_ADDR_VAR 0 5
24941: PUSH
24942: LD_VAR 0 5
24946: PUSH
24947: LD_VAR 0 8
24951: DIFF
24952: ST_TO_ADDR
24953: GO 24921
24955: POP
24956: POP
// if not list then
24957: LD_VAR 0 5
24961: NOT
24962: IFFALSE 24966
// exit ;
24964: GO 25770
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24966: LD_VAR 0 12
24970: PUSH
24971: LD_INT 3
24973: EQUAL
24974: PUSH
24975: LD_INT 49
24977: PUSH
24978: LD_VAR 0 5
24982: IN
24983: AND
24984: PUSH
24985: LD_INT 31
24987: PPUSH
24988: LD_VAR 0 16
24992: PPUSH
24993: CALL_OW 321
24997: PUSH
24998: LD_INT 2
25000: EQUAL
25001: AND
25002: IFFALSE 25062
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25004: LD_INT 22
25006: PUSH
25007: LD_VAR 0 16
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 35
25018: PUSH
25019: LD_INT 49
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 91
25028: PUSH
25029: LD_VAR 0 1
25033: PUSH
25034: LD_INT 10
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: PPUSH
25047: CALL_OW 69
25051: NOT
25052: IFFALSE 25062
// weapon := ru_time_lapser ;
25054: LD_ADDR_VAR 0 18
25058: PUSH
25059: LD_INT 49
25061: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25062: LD_VAR 0 12
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: IN
25077: PUSH
25078: LD_INT 11
25080: PUSH
25081: LD_VAR 0 5
25085: IN
25086: PUSH
25087: LD_INT 30
25089: PUSH
25090: LD_VAR 0 5
25094: IN
25095: OR
25096: AND
25097: PUSH
25098: LD_INT 6
25100: PPUSH
25101: LD_VAR 0 16
25105: PPUSH
25106: CALL_OW 321
25110: PUSH
25111: LD_INT 2
25113: EQUAL
25114: AND
25115: IFFALSE 25280
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25117: LD_INT 22
25119: PUSH
25120: LD_VAR 0 16
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: LD_INT 35
25134: PUSH
25135: LD_INT 11
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 35
25144: PUSH
25145: LD_INT 30
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 91
25159: PUSH
25160: LD_VAR 0 1
25164: PUSH
25165: LD_INT 18
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: PPUSH
25178: CALL_OW 69
25182: NOT
25183: PUSH
25184: LD_INT 22
25186: PUSH
25187: LD_VAR 0 16
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 2
25198: PUSH
25199: LD_INT 30
25201: PUSH
25202: LD_INT 32
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 30
25211: PUSH
25212: LD_INT 33
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 91
25226: PUSH
25227: LD_VAR 0 1
25231: PUSH
25232: LD_INT 12
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: PUSH
25245: EMPTY
25246: LIST
25247: PPUSH
25248: CALL_OW 69
25252: PUSH
25253: LD_INT 2
25255: GREATER
25256: AND
25257: IFFALSE 25280
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25259: LD_ADDR_VAR 0 18
25263: PUSH
25264: LD_INT 11
25266: PUSH
25267: LD_INT 30
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_VAR 0 12
25278: ARRAY
25279: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25280: LD_VAR 0 18
25284: NOT
25285: PUSH
25286: LD_INT 40
25288: PPUSH
25289: LD_VAR 0 16
25293: PPUSH
25294: CALL_OW 321
25298: PUSH
25299: LD_INT 2
25301: EQUAL
25302: AND
25303: PUSH
25304: LD_INT 7
25306: PUSH
25307: LD_VAR 0 5
25311: IN
25312: PUSH
25313: LD_INT 28
25315: PUSH
25316: LD_VAR 0 5
25320: IN
25321: OR
25322: PUSH
25323: LD_INT 45
25325: PUSH
25326: LD_VAR 0 5
25330: IN
25331: OR
25332: AND
25333: IFFALSE 25587
// begin hex := GetHexInfo ( x , y ) ;
25335: LD_ADDR_VAR 0 4
25339: PUSH
25340: LD_VAR 0 10
25344: PPUSH
25345: LD_VAR 0 11
25349: PPUSH
25350: CALL_OW 546
25354: ST_TO_ADDR
// if hex [ 1 ] then
25355: LD_VAR 0 4
25359: PUSH
25360: LD_INT 1
25362: ARRAY
25363: IFFALSE 25367
// exit ;
25365: GO 25770
// height := hex [ 2 ] ;
25367: LD_ADDR_VAR 0 15
25371: PUSH
25372: LD_VAR 0 4
25376: PUSH
25377: LD_INT 2
25379: ARRAY
25380: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25381: LD_ADDR_VAR 0 14
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: LD_INT 3
25394: PUSH
25395: LD_INT 5
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: ST_TO_ADDR
// for i in tmp do
25404: LD_ADDR_VAR 0 8
25408: PUSH
25409: LD_VAR 0 14
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25585
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25417: LD_ADDR_VAR 0 9
25421: PUSH
25422: LD_VAR 0 10
25426: PPUSH
25427: LD_VAR 0 8
25431: PPUSH
25432: LD_INT 5
25434: PPUSH
25435: CALL_OW 272
25439: PUSH
25440: LD_VAR 0 11
25444: PPUSH
25445: LD_VAR 0 8
25449: PPUSH
25450: LD_INT 5
25452: PPUSH
25453: CALL_OW 273
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25462: LD_VAR 0 9
25466: PUSH
25467: LD_INT 1
25469: ARRAY
25470: PPUSH
25471: LD_VAR 0 9
25475: PUSH
25476: LD_INT 2
25478: ARRAY
25479: PPUSH
25480: CALL_OW 488
25484: IFFALSE 25583
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25486: LD_ADDR_VAR 0 4
25490: PUSH
25491: LD_VAR 0 9
25495: PUSH
25496: LD_INT 1
25498: ARRAY
25499: PPUSH
25500: LD_VAR 0 9
25504: PUSH
25505: LD_INT 2
25507: ARRAY
25508: PPUSH
25509: CALL_OW 546
25513: ST_TO_ADDR
// if hex [ 1 ] then
25514: LD_VAR 0 4
25518: PUSH
25519: LD_INT 1
25521: ARRAY
25522: IFFALSE 25526
// continue ;
25524: GO 25414
// h := hex [ 2 ] ;
25526: LD_ADDR_VAR 0 13
25530: PUSH
25531: LD_VAR 0 4
25535: PUSH
25536: LD_INT 2
25538: ARRAY
25539: ST_TO_ADDR
// if h + 7 < height then
25540: LD_VAR 0 13
25544: PUSH
25545: LD_INT 7
25547: PLUS
25548: PUSH
25549: LD_VAR 0 15
25553: LESS
25554: IFFALSE 25583
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25556: LD_ADDR_VAR 0 18
25560: PUSH
25561: LD_INT 7
25563: PUSH
25564: LD_INT 28
25566: PUSH
25567: LD_INT 45
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: LIST
25574: PUSH
25575: LD_VAR 0 12
25579: ARRAY
25580: ST_TO_ADDR
// break ;
25581: GO 25585
// end ; end ; end ;
25583: GO 25414
25585: POP
25586: POP
// end ; if not weapon then
25587: LD_VAR 0 18
25591: NOT
25592: IFFALSE 25652
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25594: LD_ADDR_VAR 0 5
25598: PUSH
25599: LD_VAR 0 5
25603: PUSH
25604: LD_INT 11
25606: PUSH
25607: LD_INT 30
25609: PUSH
25610: LD_INT 49
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: LIST
25617: DIFF
25618: ST_TO_ADDR
// if not list then
25619: LD_VAR 0 5
25623: NOT
25624: IFFALSE 25628
// exit ;
25626: GO 25770
// weapon := list [ rand ( 1 , list ) ] ;
25628: LD_ADDR_VAR 0 18
25632: PUSH
25633: LD_VAR 0 5
25637: PUSH
25638: LD_INT 1
25640: PPUSH
25641: LD_VAR 0 5
25645: PPUSH
25646: CALL_OW 12
25650: ARRAY
25651: ST_TO_ADDR
// end ; if weapon then
25652: LD_VAR 0 18
25656: IFFALSE 25770
// begin tmp := CostOfWeapon ( weapon ) ;
25658: LD_ADDR_VAR 0 14
25662: PUSH
25663: LD_VAR 0 18
25667: PPUSH
25668: CALL_OW 451
25672: ST_TO_ADDR
// j := GetBase ( tower ) ;
25673: LD_ADDR_VAR 0 9
25677: PUSH
25678: LD_VAR 0 1
25682: PPUSH
25683: CALL_OW 274
25687: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25688: LD_VAR 0 9
25692: PPUSH
25693: LD_INT 1
25695: PPUSH
25696: CALL_OW 275
25700: PUSH
25701: LD_VAR 0 14
25705: PUSH
25706: LD_INT 1
25708: ARRAY
25709: GREATEREQUAL
25710: PUSH
25711: LD_VAR 0 9
25715: PPUSH
25716: LD_INT 2
25718: PPUSH
25719: CALL_OW 275
25723: PUSH
25724: LD_VAR 0 14
25728: PUSH
25729: LD_INT 2
25731: ARRAY
25732: GREATEREQUAL
25733: AND
25734: PUSH
25735: LD_VAR 0 9
25739: PPUSH
25740: LD_INT 3
25742: PPUSH
25743: CALL_OW 275
25747: PUSH
25748: LD_VAR 0 14
25752: PUSH
25753: LD_INT 3
25755: ARRAY
25756: GREATEREQUAL
25757: AND
25758: IFFALSE 25770
// result := weapon ;
25760: LD_ADDR_VAR 0 3
25764: PUSH
25765: LD_VAR 0 18
25769: ST_TO_ADDR
// end ; end ;
25770: LD_VAR 0 3
25774: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25775: LD_INT 0
25777: PPUSH
25778: PPUSH
// result := true ;
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: LD_INT 1
25786: ST_TO_ADDR
// if array1 = array2 then
25787: LD_VAR 0 1
25791: PUSH
25792: LD_VAR 0 2
25796: EQUAL
25797: IFFALSE 25857
// begin for i = 1 to array1 do
25799: LD_ADDR_VAR 0 4
25803: PUSH
25804: DOUBLE
25805: LD_INT 1
25807: DEC
25808: ST_TO_ADDR
25809: LD_VAR 0 1
25813: PUSH
25814: FOR_TO
25815: IFFALSE 25853
// if array1 [ i ] <> array2 [ i ] then
25817: LD_VAR 0 1
25821: PUSH
25822: LD_VAR 0 4
25826: ARRAY
25827: PUSH
25828: LD_VAR 0 2
25832: PUSH
25833: LD_VAR 0 4
25837: ARRAY
25838: NONEQUAL
25839: IFFALSE 25851
// begin result := false ;
25841: LD_ADDR_VAR 0 3
25845: PUSH
25846: LD_INT 0
25848: ST_TO_ADDR
// break ;
25849: GO 25853
// end ;
25851: GO 25814
25853: POP
25854: POP
// end else
25855: GO 25865
// result := false ;
25857: LD_ADDR_VAR 0 3
25861: PUSH
25862: LD_INT 0
25864: ST_TO_ADDR
// end ;
25865: LD_VAR 0 3
25869: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25870: LD_INT 0
25872: PPUSH
25873: PPUSH
25874: PPUSH
// pom := GetBase ( fac ) ;
25875: LD_ADDR_VAR 0 5
25879: PUSH
25880: LD_VAR 0 1
25884: PPUSH
25885: CALL_OW 274
25889: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25890: LD_ADDR_VAR 0 4
25894: PUSH
25895: LD_VAR 0 2
25899: PUSH
25900: LD_INT 1
25902: ARRAY
25903: PPUSH
25904: LD_VAR 0 2
25908: PUSH
25909: LD_INT 2
25911: ARRAY
25912: PPUSH
25913: LD_VAR 0 2
25917: PUSH
25918: LD_INT 3
25920: ARRAY
25921: PPUSH
25922: LD_VAR 0 2
25926: PUSH
25927: LD_INT 4
25929: ARRAY
25930: PPUSH
25931: CALL_OW 449
25935: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: LD_VAR 0 5
25945: PPUSH
25946: LD_INT 1
25948: PPUSH
25949: CALL_OW 275
25953: PUSH
25954: LD_VAR 0 4
25958: PUSH
25959: LD_INT 1
25961: ARRAY
25962: GREATEREQUAL
25963: PUSH
25964: LD_VAR 0 5
25968: PPUSH
25969: LD_INT 2
25971: PPUSH
25972: CALL_OW 275
25976: PUSH
25977: LD_VAR 0 4
25981: PUSH
25982: LD_INT 2
25984: ARRAY
25985: GREATEREQUAL
25986: AND
25987: PUSH
25988: LD_VAR 0 5
25992: PPUSH
25993: LD_INT 3
25995: PPUSH
25996: CALL_OW 275
26000: PUSH
26001: LD_VAR 0 4
26005: PUSH
26006: LD_INT 3
26008: ARRAY
26009: GREATEREQUAL
26010: AND
26011: ST_TO_ADDR
// end ;
26012: LD_VAR 0 3
26016: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26017: LD_INT 0
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
// pom := GetBase ( building ) ;
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: CALL_OW 274
26037: ST_TO_ADDR
// if not pom then
26038: LD_VAR 0 3
26042: NOT
26043: IFFALSE 26047
// exit ;
26045: GO 26217
// btype := GetBType ( building ) ;
26047: LD_ADDR_VAR 0 5
26051: PUSH
26052: LD_VAR 0 1
26056: PPUSH
26057: CALL_OW 266
26061: ST_TO_ADDR
// if btype = b_armoury then
26062: LD_VAR 0 5
26066: PUSH
26067: LD_INT 4
26069: EQUAL
26070: IFFALSE 26080
// btype := b_barracks ;
26072: LD_ADDR_VAR 0 5
26076: PUSH
26077: LD_INT 5
26079: ST_TO_ADDR
// if btype = b_depot then
26080: LD_VAR 0 5
26084: PUSH
26085: LD_INT 0
26087: EQUAL
26088: IFFALSE 26098
// btype := b_warehouse ;
26090: LD_ADDR_VAR 0 5
26094: PUSH
26095: LD_INT 1
26097: ST_TO_ADDR
// if btype = b_workshop then
26098: LD_VAR 0 5
26102: PUSH
26103: LD_INT 2
26105: EQUAL
26106: IFFALSE 26116
// btype := b_factory ;
26108: LD_ADDR_VAR 0 5
26112: PUSH
26113: LD_INT 3
26115: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26116: LD_ADDR_VAR 0 4
26120: PUSH
26121: LD_VAR 0 5
26125: PPUSH
26126: LD_VAR 0 1
26130: PPUSH
26131: CALL_OW 248
26135: PPUSH
26136: CALL_OW 450
26140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26141: LD_ADDR_VAR 0 2
26145: PUSH
26146: LD_VAR 0 3
26150: PPUSH
26151: LD_INT 1
26153: PPUSH
26154: CALL_OW 275
26158: PUSH
26159: LD_VAR 0 4
26163: PUSH
26164: LD_INT 1
26166: ARRAY
26167: GREATEREQUAL
26168: PUSH
26169: LD_VAR 0 3
26173: PPUSH
26174: LD_INT 2
26176: PPUSH
26177: CALL_OW 275
26181: PUSH
26182: LD_VAR 0 4
26186: PUSH
26187: LD_INT 2
26189: ARRAY
26190: GREATEREQUAL
26191: AND
26192: PUSH
26193: LD_VAR 0 3
26197: PPUSH
26198: LD_INT 3
26200: PPUSH
26201: CALL_OW 275
26205: PUSH
26206: LD_VAR 0 4
26210: PUSH
26211: LD_INT 3
26213: ARRAY
26214: GREATEREQUAL
26215: AND
26216: ST_TO_ADDR
// end ;
26217: LD_VAR 0 2
26221: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26222: LD_INT 0
26224: PPUSH
26225: PPUSH
26226: PPUSH
// pom := GetBase ( building ) ;
26227: LD_ADDR_VAR 0 4
26231: PUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: CALL_OW 274
26241: ST_TO_ADDR
// if not pom then
26242: LD_VAR 0 4
26246: NOT
26247: IFFALSE 26251
// exit ;
26249: GO 26352
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26251: LD_ADDR_VAR 0 5
26255: PUSH
26256: LD_VAR 0 2
26260: PPUSH
26261: LD_VAR 0 1
26265: PPUSH
26266: CALL_OW 248
26270: PPUSH
26271: CALL_OW 450
26275: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26276: LD_ADDR_VAR 0 3
26280: PUSH
26281: LD_VAR 0 4
26285: PPUSH
26286: LD_INT 1
26288: PPUSH
26289: CALL_OW 275
26293: PUSH
26294: LD_VAR 0 5
26298: PUSH
26299: LD_INT 1
26301: ARRAY
26302: GREATEREQUAL
26303: PUSH
26304: LD_VAR 0 4
26308: PPUSH
26309: LD_INT 2
26311: PPUSH
26312: CALL_OW 275
26316: PUSH
26317: LD_VAR 0 5
26321: PUSH
26322: LD_INT 2
26324: ARRAY
26325: GREATEREQUAL
26326: AND
26327: PUSH
26328: LD_VAR 0 4
26332: PPUSH
26333: LD_INT 3
26335: PPUSH
26336: CALL_OW 275
26340: PUSH
26341: LD_VAR 0 5
26345: PUSH
26346: LD_INT 3
26348: ARRAY
26349: GREATEREQUAL
26350: AND
26351: ST_TO_ADDR
// end ;
26352: LD_VAR 0 3
26356: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
26357: LD_INT 0
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
26367: PPUSH
26368: PPUSH
// result := false ;
26369: LD_ADDR_VAR 0 6
26373: PUSH
26374: LD_INT 0
26376: ST_TO_ADDR
// if not base or not btype or not x or not y then
26377: LD_VAR 0 1
26381: NOT
26382: PUSH
26383: LD_VAR 0 2
26387: NOT
26388: OR
26389: PUSH
26390: LD_VAR 0 3
26394: NOT
26395: OR
26396: PUSH
26397: LD_VAR 0 4
26401: NOT
26402: OR
26403: IFFALSE 26407
// exit ;
26405: GO 27016
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
26407: LD_ADDR_VAR 0 12
26411: PUSH
26412: LD_VAR 0 2
26416: PPUSH
26417: LD_VAR 0 3
26421: PPUSH
26422: LD_VAR 0 4
26426: PPUSH
26427: LD_VAR 0 5
26431: PPUSH
26432: LD_VAR 0 1
26436: PUSH
26437: LD_INT 1
26439: ARRAY
26440: PPUSH
26441: CALL_OW 248
26445: PPUSH
26446: LD_INT 0
26448: PPUSH
26449: CALL 27853 0 6
26453: ST_TO_ADDR
// if not hexes then
26454: LD_VAR 0 12
26458: NOT
26459: IFFALSE 26463
// exit ;
26461: GO 27016
// for i = 1 to hexes do
26463: LD_ADDR_VAR 0 7
26467: PUSH
26468: DOUBLE
26469: LD_INT 1
26471: DEC
26472: ST_TO_ADDR
26473: LD_VAR 0 12
26477: PUSH
26478: FOR_TO
26479: IFFALSE 27014
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26481: LD_ADDR_VAR 0 11
26485: PUSH
26486: LD_VAR 0 12
26490: PUSH
26491: LD_VAR 0 7
26495: ARRAY
26496: PUSH
26497: LD_INT 1
26499: ARRAY
26500: PPUSH
26501: LD_VAR 0 12
26505: PUSH
26506: LD_VAR 0 7
26510: ARRAY
26511: PUSH
26512: LD_INT 2
26514: ARRAY
26515: PPUSH
26516: CALL_OW 428
26520: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
26521: LD_VAR 0 12
26525: PUSH
26526: LD_VAR 0 7
26530: ARRAY
26531: PUSH
26532: LD_INT 1
26534: ARRAY
26535: PPUSH
26536: LD_VAR 0 12
26540: PUSH
26541: LD_VAR 0 7
26545: ARRAY
26546: PUSH
26547: LD_INT 2
26549: ARRAY
26550: PPUSH
26551: CALL_OW 351
26555: PUSH
26556: LD_VAR 0 12
26560: PUSH
26561: LD_VAR 0 7
26565: ARRAY
26566: PUSH
26567: LD_INT 1
26569: ARRAY
26570: PPUSH
26571: LD_VAR 0 12
26575: PUSH
26576: LD_VAR 0 7
26580: ARRAY
26581: PUSH
26582: LD_INT 2
26584: ARRAY
26585: PPUSH
26586: CALL_OW 488
26590: NOT
26591: OR
26592: PUSH
26593: LD_VAR 0 11
26597: PPUSH
26598: CALL_OW 247
26602: PUSH
26603: LD_INT 3
26605: EQUAL
26606: OR
26607: IFFALSE 26613
// exit ;
26609: POP
26610: POP
26611: GO 27016
// if not tmp or not tmp in base then
26613: LD_VAR 0 11
26617: NOT
26618: PUSH
26619: LD_VAR 0 11
26623: PUSH
26624: LD_VAR 0 1
26628: IN
26629: NOT
26630: OR
26631: IFFALSE 26635
// continue ;
26633: GO 26478
// result := true ;
26635: LD_ADDR_VAR 0 6
26639: PUSH
26640: LD_INT 1
26642: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26643: LD_ADDR_VAR 0 15
26647: PUSH
26648: LD_VAR 0 1
26652: PPUSH
26653: LD_INT 22
26655: PUSH
26656: LD_VAR 0 11
26660: PPUSH
26661: CALL_OW 255
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: LD_INT 30
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 30
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: LIST
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PPUSH
26702: CALL_OW 72
26706: ST_TO_ADDR
// if dep then
26707: LD_VAR 0 15
26711: IFFALSE 26847
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26713: LD_ADDR_VAR 0 14
26717: PUSH
26718: LD_VAR 0 15
26722: PUSH
26723: LD_INT 1
26725: ARRAY
26726: PPUSH
26727: CALL_OW 250
26731: PPUSH
26732: LD_VAR 0 15
26736: PUSH
26737: LD_INT 1
26739: ARRAY
26740: PPUSH
26741: CALL_OW 254
26745: PPUSH
26746: LD_INT 5
26748: PPUSH
26749: CALL_OW 272
26753: PUSH
26754: LD_VAR 0 15
26758: PUSH
26759: LD_INT 1
26761: ARRAY
26762: PPUSH
26763: CALL_OW 251
26767: PPUSH
26768: LD_VAR 0 15
26772: PUSH
26773: LD_INT 1
26775: ARRAY
26776: PPUSH
26777: CALL_OW 254
26781: PPUSH
26782: LD_INT 5
26784: PPUSH
26785: CALL_OW 273
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26794: LD_VAR 0 14
26798: PUSH
26799: LD_INT 1
26801: ARRAY
26802: PPUSH
26803: LD_VAR 0 14
26807: PUSH
26808: LD_INT 2
26810: ARRAY
26811: PPUSH
26812: CALL_OW 488
26816: IFFALSE 26847
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26818: LD_VAR 0 11
26822: PPUSH
26823: LD_VAR 0 14
26827: PUSH
26828: LD_INT 1
26830: ARRAY
26831: PPUSH
26832: LD_VAR 0 14
26836: PUSH
26837: LD_INT 2
26839: ARRAY
26840: PPUSH
26841: CALL_OW 111
// continue ;
26845: GO 26478
// end ; end ; r := GetDir ( tmp ) ;
26847: LD_ADDR_VAR 0 13
26851: PUSH
26852: LD_VAR 0 11
26856: PPUSH
26857: CALL_OW 254
26861: ST_TO_ADDR
// if r = 5 then
26862: LD_VAR 0 13
26866: PUSH
26867: LD_INT 5
26869: EQUAL
26870: IFFALSE 26880
// r := 0 ;
26872: LD_ADDR_VAR 0 13
26876: PUSH
26877: LD_INT 0
26879: ST_TO_ADDR
// for j = r to 5 do
26880: LD_ADDR_VAR 0 8
26884: PUSH
26885: DOUBLE
26886: LD_VAR 0 13
26890: DEC
26891: ST_TO_ADDR
26892: LD_INT 5
26894: PUSH
26895: FOR_TO
26896: IFFALSE 27010
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26898: LD_ADDR_VAR 0 9
26902: PUSH
26903: LD_VAR 0 11
26907: PPUSH
26908: CALL_OW 250
26912: PPUSH
26913: LD_VAR 0 8
26917: PPUSH
26918: LD_INT 2
26920: PPUSH
26921: CALL_OW 272
26925: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26926: LD_ADDR_VAR 0 10
26930: PUSH
26931: LD_VAR 0 11
26935: PPUSH
26936: CALL_OW 251
26940: PPUSH
26941: LD_VAR 0 8
26945: PPUSH
26946: LD_INT 2
26948: PPUSH
26949: CALL_OW 273
26953: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26954: LD_VAR 0 9
26958: PPUSH
26959: LD_VAR 0 10
26963: PPUSH
26964: CALL_OW 488
26968: PUSH
26969: LD_VAR 0 9
26973: PPUSH
26974: LD_VAR 0 10
26978: PPUSH
26979: CALL_OW 428
26983: NOT
26984: AND
26985: IFFALSE 27008
// begin ComMoveXY ( tmp , _x , _y ) ;
26987: LD_VAR 0 11
26991: PPUSH
26992: LD_VAR 0 9
26996: PPUSH
26997: LD_VAR 0 10
27001: PPUSH
27002: CALL_OW 111
// break ;
27006: GO 27010
// end ; end ;
27008: GO 26895
27010: POP
27011: POP
// end ;
27012: GO 26478
27014: POP
27015: POP
// end ;
27016: LD_VAR 0 6
27020: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
27021: LD_INT 0
27023: PPUSH
27024: PPUSH
27025: PPUSH
27026: PPUSH
27027: PPUSH
27028: PPUSH
27029: PPUSH
27030: PPUSH
27031: PPUSH
27032: PPUSH
// result := false ;
27033: LD_ADDR_VAR 0 6
27037: PUSH
27038: LD_INT 0
27040: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
27041: LD_VAR 0 1
27045: NOT
27046: PUSH
27047: LD_VAR 0 1
27051: PPUSH
27052: CALL_OW 266
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: IN
27067: NOT
27068: OR
27069: PUSH
27070: LD_VAR 0 2
27074: NOT
27075: OR
27076: PUSH
27077: LD_VAR 0 5
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: LD_INT 3
27093: PUSH
27094: LD_INT 4
27096: PUSH
27097: LD_INT 5
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: IN
27108: NOT
27109: OR
27110: PUSH
27111: LD_VAR 0 3
27115: PPUSH
27116: LD_VAR 0 4
27120: PPUSH
27121: CALL_OW 488
27125: NOT
27126: OR
27127: IFFALSE 27131
// exit ;
27129: GO 27848
// pom := GetBase ( depot ) ;
27131: LD_ADDR_VAR 0 10
27135: PUSH
27136: LD_VAR 0 1
27140: PPUSH
27141: CALL_OW 274
27145: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27146: LD_ADDR_VAR 0 11
27150: PUSH
27151: LD_VAR 0 2
27155: PPUSH
27156: LD_VAR 0 1
27160: PPUSH
27161: CALL_OW 248
27165: PPUSH
27166: CALL_OW 450
27170: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27171: LD_VAR 0 10
27175: PPUSH
27176: LD_INT 1
27178: PPUSH
27179: CALL_OW 275
27183: PUSH
27184: LD_VAR 0 11
27188: PUSH
27189: LD_INT 1
27191: ARRAY
27192: GREATEREQUAL
27193: PUSH
27194: LD_VAR 0 10
27198: PPUSH
27199: LD_INT 2
27201: PPUSH
27202: CALL_OW 275
27206: PUSH
27207: LD_VAR 0 11
27211: PUSH
27212: LD_INT 2
27214: ARRAY
27215: GREATEREQUAL
27216: AND
27217: PUSH
27218: LD_VAR 0 10
27222: PPUSH
27223: LD_INT 3
27225: PPUSH
27226: CALL_OW 275
27230: PUSH
27231: LD_VAR 0 11
27235: PUSH
27236: LD_INT 3
27238: ARRAY
27239: GREATEREQUAL
27240: AND
27241: NOT
27242: IFFALSE 27246
// exit ;
27244: GO 27848
// if GetBType ( depot ) = b_depot then
27246: LD_VAR 0 1
27250: PPUSH
27251: CALL_OW 266
27255: PUSH
27256: LD_INT 0
27258: EQUAL
27259: IFFALSE 27271
// dist := 28 else
27261: LD_ADDR_VAR 0 14
27265: PUSH
27266: LD_INT 28
27268: ST_TO_ADDR
27269: GO 27279
// dist := 36 ;
27271: LD_ADDR_VAR 0 14
27275: PUSH
27276: LD_INT 36
27278: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27279: LD_VAR 0 1
27283: PPUSH
27284: LD_VAR 0 3
27288: PPUSH
27289: LD_VAR 0 4
27293: PPUSH
27294: CALL_OW 297
27298: PUSH
27299: LD_VAR 0 14
27303: GREATER
27304: IFFALSE 27308
// exit ;
27306: GO 27848
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27308: LD_ADDR_VAR 0 12
27312: PUSH
27313: LD_VAR 0 2
27317: PPUSH
27318: LD_VAR 0 3
27322: PPUSH
27323: LD_VAR 0 4
27327: PPUSH
27328: LD_VAR 0 5
27332: PPUSH
27333: LD_VAR 0 1
27337: PPUSH
27338: CALL_OW 248
27342: PPUSH
27343: LD_INT 0
27345: PPUSH
27346: CALL 27853 0 6
27350: ST_TO_ADDR
// if not hexes then
27351: LD_VAR 0 12
27355: NOT
27356: IFFALSE 27360
// exit ;
27358: GO 27848
// hex := GetHexInfo ( x , y ) ;
27360: LD_ADDR_VAR 0 15
27364: PUSH
27365: LD_VAR 0 3
27369: PPUSH
27370: LD_VAR 0 4
27374: PPUSH
27375: CALL_OW 546
27379: ST_TO_ADDR
// if hex [ 1 ] then
27380: LD_VAR 0 15
27384: PUSH
27385: LD_INT 1
27387: ARRAY
27388: IFFALSE 27392
// exit ;
27390: GO 27848
// height := hex [ 2 ] ;
27392: LD_ADDR_VAR 0 13
27396: PUSH
27397: LD_VAR 0 15
27401: PUSH
27402: LD_INT 2
27404: ARRAY
27405: ST_TO_ADDR
// for i = 1 to hexes do
27406: LD_ADDR_VAR 0 7
27410: PUSH
27411: DOUBLE
27412: LD_INT 1
27414: DEC
27415: ST_TO_ADDR
27416: LD_VAR 0 12
27420: PUSH
27421: FOR_TO
27422: IFFALSE 27752
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27424: LD_VAR 0 12
27428: PUSH
27429: LD_VAR 0 7
27433: ARRAY
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: PPUSH
27439: LD_VAR 0 12
27443: PUSH
27444: LD_VAR 0 7
27448: ARRAY
27449: PUSH
27450: LD_INT 2
27452: ARRAY
27453: PPUSH
27454: CALL_OW 488
27458: NOT
27459: PUSH
27460: LD_VAR 0 12
27464: PUSH
27465: LD_VAR 0 7
27469: ARRAY
27470: PUSH
27471: LD_INT 1
27473: ARRAY
27474: PPUSH
27475: LD_VAR 0 12
27479: PUSH
27480: LD_VAR 0 7
27484: ARRAY
27485: PUSH
27486: LD_INT 2
27488: ARRAY
27489: PPUSH
27490: CALL_OW 428
27494: PUSH
27495: LD_INT 0
27497: GREATER
27498: OR
27499: PUSH
27500: LD_VAR 0 12
27504: PUSH
27505: LD_VAR 0 7
27509: ARRAY
27510: PUSH
27511: LD_INT 1
27513: ARRAY
27514: PPUSH
27515: LD_VAR 0 12
27519: PUSH
27520: LD_VAR 0 7
27524: ARRAY
27525: PUSH
27526: LD_INT 2
27528: ARRAY
27529: PPUSH
27530: CALL_OW 351
27534: OR
27535: IFFALSE 27541
// exit ;
27537: POP
27538: POP
27539: GO 27848
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27541: LD_ADDR_VAR 0 8
27545: PUSH
27546: LD_VAR 0 12
27550: PUSH
27551: LD_VAR 0 7
27555: ARRAY
27556: PUSH
27557: LD_INT 1
27559: ARRAY
27560: PPUSH
27561: LD_VAR 0 12
27565: PUSH
27566: LD_VAR 0 7
27570: ARRAY
27571: PUSH
27572: LD_INT 2
27574: ARRAY
27575: PPUSH
27576: CALL_OW 546
27580: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27581: LD_VAR 0 8
27585: PUSH
27586: LD_INT 1
27588: ARRAY
27589: PUSH
27590: LD_VAR 0 8
27594: PUSH
27595: LD_INT 2
27597: ARRAY
27598: PUSH
27599: LD_VAR 0 13
27603: PUSH
27604: LD_INT 2
27606: PLUS
27607: GREATER
27608: OR
27609: PUSH
27610: LD_VAR 0 8
27614: PUSH
27615: LD_INT 2
27617: ARRAY
27618: PUSH
27619: LD_VAR 0 13
27623: PUSH
27624: LD_INT 2
27626: MINUS
27627: LESS
27628: OR
27629: PUSH
27630: LD_VAR 0 8
27634: PUSH
27635: LD_INT 3
27637: ARRAY
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: LD_INT 8
27644: PUSH
27645: LD_INT 9
27647: PUSH
27648: LD_INT 10
27650: PUSH
27651: LD_INT 11
27653: PUSH
27654: LD_INT 12
27656: PUSH
27657: LD_INT 13
27659: PUSH
27660: LD_INT 16
27662: PUSH
27663: LD_INT 17
27665: PUSH
27666: LD_INT 18
27668: PUSH
27669: LD_INT 19
27671: PUSH
27672: LD_INT 20
27674: PUSH
27675: LD_INT 21
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: IN
27693: NOT
27694: OR
27695: PUSH
27696: LD_VAR 0 8
27700: PUSH
27701: LD_INT 5
27703: ARRAY
27704: NOT
27705: OR
27706: PUSH
27707: LD_VAR 0 8
27711: PUSH
27712: LD_INT 6
27714: ARRAY
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: LD_INT 2
27721: PUSH
27722: LD_INT 7
27724: PUSH
27725: LD_INT 9
27727: PUSH
27728: LD_INT 10
27730: PUSH
27731: LD_INT 11
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: IN
27742: NOT
27743: OR
27744: IFFALSE 27750
// exit ;
27746: POP
27747: POP
27748: GO 27848
// end ;
27750: GO 27421
27752: POP
27753: POP
// side := GetSide ( depot ) ;
27754: LD_ADDR_VAR 0 9
27758: PUSH
27759: LD_VAR 0 1
27763: PPUSH
27764: CALL_OW 255
27768: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27769: LD_VAR 0 9
27773: PPUSH
27774: LD_VAR 0 3
27778: PPUSH
27779: LD_VAR 0 4
27783: PPUSH
27784: LD_INT 20
27786: PPUSH
27787: CALL 20502 0 4
27791: PUSH
27792: LD_INT 4
27794: ARRAY
27795: IFFALSE 27799
// exit ;
27797: GO 27848
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27799: LD_VAR 0 2
27803: PUSH
27804: LD_INT 29
27806: PUSH
27807: LD_INT 30
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: IN
27814: PUSH
27815: LD_VAR 0 3
27819: PPUSH
27820: LD_VAR 0 4
27824: PPUSH
27825: LD_VAR 0 9
27829: PPUSH
27830: CALL_OW 440
27834: NOT
27835: AND
27836: IFFALSE 27840
// exit ;
27838: GO 27848
// result := true ;
27840: LD_ADDR_VAR 0 6
27844: PUSH
27845: LD_INT 1
27847: ST_TO_ADDR
// end ;
27848: LD_VAR 0 6
27852: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
27853: LD_INT 0
27855: PPUSH
27856: PPUSH
27857: PPUSH
27858: PPUSH
27859: PPUSH
27860: PPUSH
27861: PPUSH
27862: PPUSH
27863: PPUSH
27864: PPUSH
27865: PPUSH
27866: PPUSH
27867: PPUSH
27868: PPUSH
27869: PPUSH
27870: PPUSH
27871: PPUSH
27872: PPUSH
27873: PPUSH
27874: PPUSH
27875: PPUSH
27876: PPUSH
27877: PPUSH
27878: PPUSH
27879: PPUSH
27880: PPUSH
27881: PPUSH
27882: PPUSH
27883: PPUSH
27884: PPUSH
27885: PPUSH
27886: PPUSH
27887: PPUSH
27888: PPUSH
27889: PPUSH
27890: PPUSH
27891: PPUSH
27892: PPUSH
27893: PPUSH
27894: PPUSH
27895: PPUSH
27896: PPUSH
27897: PPUSH
27898: PPUSH
27899: PPUSH
27900: PPUSH
27901: PPUSH
27902: PPUSH
27903: PPUSH
27904: PPUSH
27905: PPUSH
27906: PPUSH
27907: PPUSH
27908: PPUSH
27909: PPUSH
27910: PPUSH
27911: PPUSH
27912: PPUSH
// result = [ ] ;
27913: LD_ADDR_VAR 0 7
27917: PUSH
27918: EMPTY
27919: ST_TO_ADDR
// temp_list = [ ] ;
27920: LD_ADDR_VAR 0 9
27924: PUSH
27925: EMPTY
27926: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27927: LD_VAR 0 4
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: LD_INT 4
27946: PUSH
27947: LD_INT 5
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: IN
27958: NOT
27959: PUSH
27960: LD_VAR 0 1
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: IN
27975: PUSH
27976: LD_VAR 0 5
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 2
27986: PUSH
27987: LD_INT 3
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: IN
27995: NOT
27996: AND
27997: OR
27998: IFFALSE 28002
// exit ;
28000: GO 46393
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
28002: LD_VAR 0 1
28006: PUSH
28007: LD_INT 6
28009: PUSH
28010: LD_INT 7
28012: PUSH
28013: LD_INT 8
28015: PUSH
28016: LD_INT 13
28018: PUSH
28019: LD_INT 12
28021: PUSH
28022: LD_INT 15
28024: PUSH
28025: LD_INT 11
28027: PUSH
28028: LD_INT 14
28030: PUSH
28031: LD_INT 10
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: IN
28045: IFFALSE 28055
// btype = b_lab ;
28047: LD_ADDR_VAR 0 1
28051: PUSH
28052: LD_INT 6
28054: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
28055: LD_VAR 0 6
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: IN
28074: NOT
28075: PUSH
28076: LD_VAR 0 1
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: LD_INT 2
28089: PUSH
28090: LD_INT 3
28092: PUSH
28093: LD_INT 6
28095: PUSH
28096: LD_INT 36
28098: PUSH
28099: LD_INT 4
28101: PUSH
28102: LD_INT 5
28104: PUSH
28105: LD_INT 31
28107: PUSH
28108: LD_INT 32
28110: PUSH
28111: LD_INT 33
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: IN
28127: NOT
28128: PUSH
28129: LD_VAR 0 6
28133: PUSH
28134: LD_INT 1
28136: EQUAL
28137: AND
28138: OR
28139: PUSH
28140: LD_VAR 0 1
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: LD_INT 3
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: IN
28155: NOT
28156: PUSH
28157: LD_VAR 0 6
28161: PUSH
28162: LD_INT 2
28164: EQUAL
28165: AND
28166: OR
28167: IFFALSE 28177
// mode = 0 ;
28169: LD_ADDR_VAR 0 6
28173: PUSH
28174: LD_INT 0
28176: ST_TO_ADDR
// case mode of 0 :
28177: LD_VAR 0 6
28181: PUSH
28182: LD_INT 0
28184: DOUBLE
28185: EQUAL
28186: IFTRUE 28190
28188: GO 39643
28190: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28191: LD_ADDR_VAR 0 11
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: NEG
28261: PUSH
28262: LD_INT 1
28264: NEG
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: NEG
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: LD_INT 2
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: NEG
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: LD_INT 3
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: LD_INT 3
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28384: LD_ADDR_VAR 0 12
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: LD_INT 1
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: NEG
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 3
28541: NEG
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 3
28552: NEG
28553: PUSH
28554: LD_INT 1
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28580: LD_ADDR_VAR 0 13
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 1
28638: NEG
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: NEG
28650: PUSH
28651: LD_INT 1
28653: NEG
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: LD_INT 2
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: LD_INT 2
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 2
28715: NEG
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: LD_INT 3
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 3
28739: NEG
28740: PUSH
28741: LD_INT 2
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 3
28751: NEG
28752: PUSH
28753: LD_INT 3
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28779: LD_ADDR_VAR 0 14
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: LD_INT 2
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 3
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 3
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 2
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28975: LD_ADDR_VAR 0 15
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 2
29098: NEG
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 2
29109: NEG
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 1
29124: NEG
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 3
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 3
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29168: LD_ADDR_VAR 0 16
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: LD_INT 1
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 1
29249: NEG
29250: PUSH
29251: LD_INT 2
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 1
29281: PUSH
29282: LD_INT 2
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: NEG
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: NEG
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 3
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 3
29325: PUSH
29326: LD_INT 3
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 3
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29361: LD_ADDR_VAR 0 17
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: NEG
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: NEG
29443: PUSH
29444: LD_INT 2
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: LD_INT 2
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 2
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: NEG
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 2
29548: NEG
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: NEG
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29591: LD_ADDR_VAR 0 18
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: NEG
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 1
29672: NEG
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: LD_INT 2
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 2
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: LD_INT 1
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 2
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: LD_INT 2
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: LD_INT 0
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 2
29778: NEG
29779: PUSH
29780: LD_INT 1
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: LD_INT 2
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29821: LD_ADDR_VAR 0 19
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: LD_INT 2
29906: NEG
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 2
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 2
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 2
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 2
29997: NEG
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 2
30020: NEG
30021: PUSH
30022: LD_INT 2
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30051: LD_ADDR_VAR 0 20
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: NEG
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: LD_INT 2
30147: NEG
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: LD_INT 1
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 2
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 2
30186: PUSH
30187: LD_INT 2
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 2
30227: NEG
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 2
30250: NEG
30251: PUSH
30252: LD_INT 2
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30281: LD_ADDR_VAR 0 21
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: LD_INT 1
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: LD_INT 1
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: LD_INT 2
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 2
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 2
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 2
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 2
30457: NEG
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 2
30468: NEG
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 2
30480: NEG
30481: PUSH
30482: LD_INT 2
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30511: LD_ADDR_VAR 0 22
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: LD_INT 2
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: LD_INT 1
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: LD_INT 1
30702: NEG
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: NEG
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30741: LD_ADDR_VAR 0 23
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: NEG
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 0
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 2
30917: NEG
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 3
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: LD_INT 2
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 1
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
31021: LD_ADDR_VAR 0 24
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: LD_INT 1
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 1
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: LD_INT 2
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 1
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 2
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: NEG
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 2
31197: NEG
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: LD_INT 2
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: LD_INT 2
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31297: LD_ADDR_VAR 0 25
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: LD_INT 2
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 2
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31571: LD_ADDR_VAR 0 26
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: LD_INT 2
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 2
31747: NEG
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: LD_INT 2
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: LD_INT 3
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 2
31813: NEG
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31847: LD_ADDR_VAR 0 27
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 2
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 0
32002: PUSH
32003: LD_INT 2
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: NEG
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: NEG
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 3
32080: NEG
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 3
32092: NEG
32093: PUSH
32094: LD_INT 2
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32127: LD_ADDR_VAR 0 28
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: LD_INT 2
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: LD_INT 2
32223: NEG
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: LD_INT 1
32234: NEG
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 2
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: NEG
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 3
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 3
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 3
32362: NEG
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 3
32374: NEG
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32409: LD_ADDR_VAR 0 29
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: LD_INT 1
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: LD_INT 1
32516: NEG
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 1
32564: NEG
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 2
32575: NEG
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: NEG
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: LD_INT 3
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 2
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 3
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 3
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: LD_INT 2
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 3
32653: NEG
32654: PUSH
32655: LD_INT 2
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32688: LD_ADDR_VAR 0 30
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 1
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: NEG
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: LD_INT 3
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 3
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: LD_INT 3
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: NEG
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 3
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32966: LD_ADDR_VAR 0 31
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: LD_INT 1
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 2
33131: NEG
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 2
33143: NEG
33144: PUSH
33145: LD_INT 2
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 2
33155: NEG
33156: PUSH
33157: LD_INT 3
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 3
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 3
33209: NEG
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33244: LD_ADDR_VAR 0 32
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 2
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: NEG
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: LD_INT 3
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: LD_INT 2
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: LD_INT 3
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 3
33487: NEG
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33522: LD_ADDR_VAR 0 33
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: LD_INT 2
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 2
33677: NEG
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 2
33700: NEG
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: LD_INT 3
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 3
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: LD_INT 3
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 3
33766: NEG
33767: PUSH
33768: LD_INT 2
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33801: LD_ADDR_VAR 0 34
33805: PUSH
33806: LD_INT 0
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: LD_INT 1
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: NEG
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 2
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: LD_INT 1
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 2
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 2
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 2
33968: NEG
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 2
33980: NEG
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 3
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: LD_INT 2
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 3
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: NEG
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 3
34046: NEG
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34081: LD_ADDR_VAR 0 35
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: LD_INT 0
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: LD_INT 1
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34193: LD_ADDR_VAR 0 36
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: LD_INT 1
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 0
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34305: LD_ADDR_VAR 0 37
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: NEG
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34417: LD_ADDR_VAR 0 38
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: NEG
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 2
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: NEG
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34529: LD_ADDR_VAR 0 39
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34641: LD_ADDR_VAR 0 40
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34753: LD_ADDR_VAR 0 41
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 2
34908: NEG
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 2
34931: NEG
34932: PUSH
34933: LD_INT 2
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 2
34943: NEG
34944: PUSH
34945: LD_INT 3
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 3
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: LD_INT 3
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: LD_INT 3
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: NEG
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 3
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 3
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 3
35050: NEG
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 3
35062: NEG
35063: PUSH
35064: LD_INT 3
35066: NEG
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35103: LD_ADDR_VAR 0 42
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 2
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 2
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 2
35269: NEG
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: NEG
35294: PUSH
35295: LD_INT 3
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: LD_INT 3
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: LD_INT 3
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 3
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: LD_INT 3
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: LD_INT 3
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: LD_INT 3
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 3
35400: NEG
35401: PUSH
35402: LD_INT 2
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 3
35412: NEG
35413: PUSH
35414: LD_INT 3
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35453: LD_ADDR_VAR 0 43
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: NEG
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: LD_INT 2
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: LD_INT 1
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 2
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 2
35630: NEG
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: LD_INT 3
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 3
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 2
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 3
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 3
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: LD_INT 3
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: LD_INT 3
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 3
35749: NEG
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 3
35760: NEG
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35801: LD_ADDR_VAR 0 44
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: LD_INT 1
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 2
35956: NEG
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 2
35967: NEG
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 2
35979: NEG
35980: PUSH
35981: LD_INT 2
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 2
35991: NEG
35992: PUSH
35993: LD_INT 3
35995: NEG
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 3
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 3
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 3
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 3
36044: PUSH
36045: LD_INT 3
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: LD_INT 3
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 2
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 3
36075: NEG
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 3
36086: NEG
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 3
36098: NEG
36099: PUSH
36100: LD_INT 2
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 3
36110: NEG
36111: PUSH
36112: LD_INT 3
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36151: LD_ADDR_VAR 0 45
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 2
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: LD_INT 2
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: PUSH
36277: LD_INT 2
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: NEG
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: LD_INT 2
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: LD_INT 3
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: LD_INT 3
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: LD_INT 3
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 2
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 3
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 3
36397: PUSH
36398: LD_INT 3
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: LD_INT 3
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: LD_INT 3
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 3
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 3
36448: NEG
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 3
36460: NEG
36461: PUSH
36462: LD_INT 3
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36501: LD_ADDR_VAR 0 46
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 2
36678: NEG
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: LD_INT 3
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: LD_INT 3
36705: NEG
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: LD_INT 2
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 3
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 3
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 3
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 3
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 3
36797: NEG
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 3
36808: NEG
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36849: LD_ADDR_VAR 0 47
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 1
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: NEG
36931: PUSH
36932: LD_INT 2
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: NEG
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 2
36976: NEG
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37000: LD_ADDR_VAR 0 48
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: LD_INT 2
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37147: LD_ADDR_VAR 0 49
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37291: LD_ADDR_VAR 0 50
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: LD_INT 2
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37435: LD_ADDR_VAR 0 51
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37582: LD_ADDR_VAR 0 52
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: LD_INT 2
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 2
37709: NEG
37710: PUSH
37711: LD_INT 2
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37733: LD_ADDR_VAR 0 53
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: LD_INT 2
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: LD_INT 2
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 2
37909: NEG
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: NEG
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: NEG
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37963: LD_ADDR_VAR 0 54
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: LD_INT 2
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 2
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 2
38162: NEG
38163: PUSH
38164: LD_INT 2
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38193: LD_ADDR_VAR 0 55
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 2
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 2
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 2
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: NEG
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: NEG
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38423: LD_ADDR_VAR 0 56
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 2
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 2
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: NEG
38623: PUSH
38624: LD_INT 2
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38653: LD_ADDR_VAR 0 57
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 2
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38883: LD_ADDR_VAR 0 58
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 2
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39113: LD_ADDR_VAR 0 59
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39201: LD_ADDR_VAR 0 60
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39289: LD_ADDR_VAR 0 61
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39377: LD_ADDR_VAR 0 62
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39465: LD_ADDR_VAR 0 63
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39553: LD_ADDR_VAR 0 64
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// end ; 1 :
39641: GO 45538
39643: LD_INT 1
39645: DOUBLE
39646: EQUAL
39647: IFTRUE 39651
39649: GO 42274
39651: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39652: LD_ADDR_VAR 0 11
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: LD_INT 3
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 3
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: LIST
39695: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39696: LD_ADDR_VAR 0 12
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 3
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 3
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39737: LD_ADDR_VAR 0 13
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: LD_INT 3
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39777: LD_ADDR_VAR 0 14
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 3
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39818: LD_ADDR_VAR 0 15
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 3
39836: NEG
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39862: LD_ADDR_VAR 0 16
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 3
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 3
39881: NEG
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 3
39893: NEG
39894: PUSH
39895: LD_INT 3
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39908: LD_ADDR_VAR 0 17
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: LD_INT 3
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 3
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39952: LD_ADDR_VAR 0 18
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 3
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39993: LD_ADDR_VAR 0 19
39997: PUSH
39998: LD_INT 3
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 3
40010: PUSH
40011: LD_INT 3
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 3
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40033: LD_ADDR_VAR 0 20
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 3
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40074: LD_ADDR_VAR 0 21
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 3
40092: NEG
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 3
40103: NEG
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: LIST
40117: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40118: LD_ADDR_VAR 0 22
40122: PUSH
40123: LD_INT 2
40125: NEG
40126: PUSH
40127: LD_INT 3
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 3
40137: NEG
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 3
40149: NEG
40150: PUSH
40151: LD_INT 3
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40164: LD_ADDR_VAR 0 23
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 3
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 4
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 3
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40208: LD_ADDR_VAR 0 24
40212: PUSH
40213: LD_INT 3
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 3
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 4
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40249: LD_ADDR_VAR 0 25
40253: PUSH
40254: LD_INT 3
40256: PUSH
40257: LD_INT 3
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 4
40266: PUSH
40267: LD_INT 3
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 3
40276: PUSH
40277: LD_INT 4
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40289: LD_ADDR_VAR 0 26
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 3
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 4
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40330: LD_ADDR_VAR 0 27
40334: PUSH
40335: LD_INT 3
40337: NEG
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 3
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 4
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40374: LD_ADDR_VAR 0 28
40378: PUSH
40379: LD_INT 3
40381: NEG
40382: PUSH
40383: LD_INT 3
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 3
40393: NEG
40394: PUSH
40395: LD_INT 4
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 4
40405: NEG
40406: PUSH
40407: LD_INT 3
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40420: LD_ADDR_VAR 0 29
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: LD_INT 3
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 3
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: LD_INT 4
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 4
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: LD_INT 3
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: LD_INT 5
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 5
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 4
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 6
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 6
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 5
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40575: LD_ADDR_VAR 0 30
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 3
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 3
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 3
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 4
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 4
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 4
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 5
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 5
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 5
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 6
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 6
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40718: LD_ADDR_VAR 0 31
40722: PUSH
40723: LD_INT 3
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: LD_INT 3
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: LD_INT 3
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 4
40755: PUSH
40756: LD_INT 3
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 4
40765: PUSH
40766: LD_INT 4
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 4
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 5
40785: PUSH
40786: LD_INT 4
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 5
40795: PUSH
40796: LD_INT 5
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 4
40805: PUSH
40806: LD_INT 5
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 6
40815: PUSH
40816: LD_INT 5
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 6
40825: PUSH
40826: LD_INT 6
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 5
40835: PUSH
40836: LD_INT 6
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40857: LD_ADDR_VAR 0 32
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 3
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 3
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 2
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 4
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 4
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 3
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: LD_INT 5
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 5
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 4
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 6
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 6
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: LD_INT 5
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
41000: LD_ADDR_VAR 0 33
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 3
41018: NEG
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 3
41029: NEG
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 4
41052: NEG
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 4
41063: NEG
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 4
41075: NEG
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 5
41086: NEG
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 5
41097: NEG
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 5
41109: NEG
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 6
41120: NEG
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 6
41131: NEG
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41155: LD_ADDR_VAR 0 34
41159: PUSH
41160: LD_INT 2
41162: NEG
41163: PUSH
41164: LD_INT 3
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 3
41174: NEG
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 3
41186: NEG
41187: PUSH
41188: LD_INT 3
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 3
41198: NEG
41199: PUSH
41200: LD_INT 4
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 4
41210: NEG
41211: PUSH
41212: LD_INT 3
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 4
41222: NEG
41223: PUSH
41224: LD_INT 4
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 4
41234: NEG
41235: PUSH
41236: LD_INT 5
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 5
41246: NEG
41247: PUSH
41248: LD_INT 4
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 5
41258: NEG
41259: PUSH
41260: LD_INT 5
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 5
41270: NEG
41271: PUSH
41272: LD_INT 6
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 6
41282: NEG
41283: PUSH
41284: LD_INT 5
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 6
41294: NEG
41295: PUSH
41296: LD_INT 6
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41318: LD_ADDR_VAR 0 41
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 3
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41362: LD_ADDR_VAR 0 42
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41403: LD_ADDR_VAR 0 43
41407: PUSH
41408: LD_INT 2
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 3
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41443: LD_ADDR_VAR 0 44
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41484: LD_ADDR_VAR 0 45
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 3
41513: NEG
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41528: LD_ADDR_VAR 0 46
41532: PUSH
41533: LD_INT 2
41535: NEG
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: LD_INT 3
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41574: LD_ADDR_VAR 0 47
41578: PUSH
41579: LD_INT 2
41581: NEG
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 3
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41607: LD_ADDR_VAR 0 48
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41638: LD_ADDR_VAR 0 49
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 3
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41667: LD_ADDR_VAR 0 50
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: LD_INT 3
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 3
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41696: LD_ADDR_VAR 0 51
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41727: LD_ADDR_VAR 0 52
41731: PUSH
41732: LD_INT 3
41734: NEG
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 3
41746: NEG
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41760: LD_ADDR_VAR 0 53
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 3
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 3
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41804: LD_ADDR_VAR 0 54
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 3
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 3
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41845: LD_ADDR_VAR 0 55
41849: PUSH
41850: LD_INT 3
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: LD_INT 3
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: LD_INT 3
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41885: LD_ADDR_VAR 0 56
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 3
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 3
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41926: LD_ADDR_VAR 0 57
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41970: LD_ADDR_VAR 0 58
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: LD_INT 3
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 3
41989: NEG
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 3
42001: NEG
42002: PUSH
42003: LD_INT 3
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: LIST
42015: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
42016: LD_ADDR_VAR 0 59
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: LIST
42059: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42060: LD_ADDR_VAR 0 60
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42101: LD_ADDR_VAR 0 61
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: LIST
42140: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42141: LD_ADDR_VAR 0 62
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42182: LD_ADDR_VAR 0 63
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: LIST
42225: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42226: LD_ADDR_VAR 0 64
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: LD_INT 2
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: ST_TO_ADDR
// end ; 2 :
42272: GO 45538
42274: LD_INT 2
42276: DOUBLE
42277: EQUAL
42278: IFTRUE 42282
42280: GO 45537
42282: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42283: LD_ADDR_VAR 0 29
42287: PUSH
42288: LD_INT 4
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 4
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 5
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 5
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 4
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 3
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 3
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 5
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 3
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 4
42403: PUSH
42404: LD_INT 3
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 4
42413: PUSH
42414: LD_INT 4
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: LD_INT 4
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 4
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 4
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 4
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 3
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 4
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 5
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 5
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 4
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 3
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 5
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 3
42566: NEG
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 3
42577: NEG
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 4
42622: NEG
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 4
42633: NEG
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 4
42645: NEG
42646: PUSH
42647: LD_INT 2
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 4
42668: NEG
42669: PUSH
42670: LD_INT 4
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 4
42680: NEG
42681: PUSH
42682: LD_INT 5
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: LD_INT 4
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 3
42704: NEG
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 4
42716: NEG
42717: PUSH
42718: LD_INT 3
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 5
42728: NEG
42729: PUSH
42730: LD_INT 4
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 5
42740: NEG
42741: PUSH
42742: LD_INT 5
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: LD_INT 5
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 5
42764: NEG
42765: PUSH
42766: LD_INT 3
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42821: LD_ADDR_VAR 0 30
42825: PUSH
42826: LD_INT 4
42828: PUSH
42829: LD_INT 4
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 4
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 5
42848: PUSH
42849: LD_INT 4
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 5
42858: PUSH
42859: LD_INT 5
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 4
42868: PUSH
42869: LD_INT 5
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 3
42878: PUSH
42879: LD_INT 4
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 3
42888: PUSH
42889: LD_INT 3
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 5
42898: PUSH
42899: LD_INT 3
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: PUSH
42909: LD_INT 5
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 3
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: LD_INT 4
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 4
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: LD_INT 3
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 4
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 4
43011: NEG
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 4
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 3
43034: NEG
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 3
43045: NEG
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 4
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 5
43067: NEG
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 5
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 5
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 3
43102: NEG
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 3
43113: NEG
43114: PUSH
43115: LD_INT 3
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 3
43125: NEG
43126: PUSH
43127: LD_INT 4
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: LD_INT 3
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 3
43161: NEG
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 4
43173: NEG
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 4
43185: NEG
43186: PUSH
43187: LD_INT 4
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 4
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 4
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 4
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 5
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: LD_INT 4
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: LD_INT 3
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 3
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 4
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 5
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: LD_INT 3
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: LD_INT 5
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43368: LD_ADDR_VAR 0 31
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 4
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: LD_INT 4
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 5
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 5
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: LD_INT 4
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 3
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 5
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: NEG
43458: PUSH
43459: LD_INT 3
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 3
43468: NEG
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 4
43524: NEG
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 4
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 4
43547: NEG
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 4
43570: NEG
43571: PUSH
43572: LD_INT 4
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 4
43582: NEG
43583: PUSH
43584: LD_INT 5
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 3
43594: NEG
43595: PUSH
43596: LD_INT 4
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 3
43606: NEG
43607: PUSH
43608: LD_INT 3
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 4
43618: NEG
43619: PUSH
43620: LD_INT 3
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 5
43630: NEG
43631: PUSH
43632: LD_INT 4
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 5
43642: NEG
43643: PUSH
43644: LD_INT 5
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 3
43654: NEG
43655: PUSH
43656: LD_INT 5
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 5
43666: NEG
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 4
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 3
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 3
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 4
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 2
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: LD_INT 4
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 4
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 4
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 5
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 5
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 4
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 3
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 3
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 5
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43918: LD_ADDR_VAR 0 32
43922: PUSH
43923: LD_INT 4
43925: NEG
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 4
43936: NEG
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 3
43948: NEG
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 3
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 4
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 5
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 5
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 5
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 3
44016: NEG
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 3
44027: NEG
44028: PUSH
44029: LD_INT 3
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 3
44039: NEG
44040: PUSH
44041: LD_INT 4
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 3
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 3
44075: NEG
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 4
44087: NEG
44088: PUSH
44089: LD_INT 3
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 4
44099: NEG
44100: PUSH
44101: LD_INT 4
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: NEG
44112: PUSH
44113: LD_INT 4
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 4
44123: NEG
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 4
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: LD_INT 5
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 4
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 3
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 4
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 5
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: LD_INT 5
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 3
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 3
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 4
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 4
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 3
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 4
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 4
44330: PUSH
44331: LD_INT 4
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 4
44340: PUSH
44341: LD_INT 3
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 5
44350: PUSH
44351: LD_INT 4
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 5
44360: PUSH
44361: LD_INT 5
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 4
44370: PUSH
44371: LD_INT 5
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 3
44380: PUSH
44381: LD_INT 4
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 3
44390: PUSH
44391: LD_INT 3
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 5
44400: PUSH
44401: LD_INT 3
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 3
44410: PUSH
44411: LD_INT 5
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44465: LD_ADDR_VAR 0 33
44469: PUSH
44470: LD_INT 4
44472: NEG
44473: PUSH
44474: LD_INT 4
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 4
44484: NEG
44485: PUSH
44486: LD_INT 5
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 3
44496: NEG
44497: PUSH
44498: LD_INT 4
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 3
44508: NEG
44509: PUSH
44510: LD_INT 3
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 4
44520: NEG
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 5
44532: NEG
44533: PUSH
44534: LD_INT 4
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 5
44544: NEG
44545: PUSH
44546: LD_INT 5
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: LD_INT 5
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 5
44568: NEG
44569: PUSH
44570: LD_INT 3
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 4
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 4
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 4
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 4
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 4
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 5
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 5
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 4
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 3
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 3
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 5
44765: PUSH
44766: LD_INT 2
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 3
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 3
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 4
44795: PUSH
44796: LD_INT 3
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 4
44805: PUSH
44806: LD_INT 4
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: LD_INT 4
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 4
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 4
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 4
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 3
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 4
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 5
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 5
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 4
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 3
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 5
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
45003: LD_ADDR_VAR 0 34
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 4
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 5
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 4
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 4
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 5
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 3
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: LD_INT 5
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 3
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 4
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 4
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 4
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 4
45205: PUSH
45206: LD_INT 4
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 4
45215: PUSH
45216: LD_INT 3
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 5
45225: PUSH
45226: LD_INT 4
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 5
45235: PUSH
45236: LD_INT 5
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 4
45245: PUSH
45246: LD_INT 5
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 3
45255: PUSH
45256: LD_INT 4
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 3
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 5
45275: PUSH
45276: LD_INT 3
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: LD_INT 5
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 3
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 4
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 4
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 4
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: NEG
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 4
45388: NEG
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 4
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 3
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 3
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 4
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 5
45444: NEG
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 5
45455: NEG
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 5
45467: NEG
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// end ; end ;
45535: GO 45538
45537: POP
// case btype of b_depot , b_warehouse :
45538: LD_VAR 0 1
45542: PUSH
45543: LD_INT 0
45545: DOUBLE
45546: EQUAL
45547: IFTRUE 45557
45549: LD_INT 1
45551: DOUBLE
45552: EQUAL
45553: IFTRUE 45557
45555: GO 45758
45557: POP
// case nation of nation_american :
45558: LD_VAR 0 5
45562: PUSH
45563: LD_INT 1
45565: DOUBLE
45566: EQUAL
45567: IFTRUE 45571
45569: GO 45627
45571: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
45572: LD_ADDR_VAR 0 9
45576: PUSH
45577: LD_VAR 0 11
45581: PUSH
45582: LD_VAR 0 12
45586: PUSH
45587: LD_VAR 0 13
45591: PUSH
45592: LD_VAR 0 14
45596: PUSH
45597: LD_VAR 0 15
45601: PUSH
45602: LD_VAR 0 16
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: PUSH
45615: LD_VAR 0 4
45619: PUSH
45620: LD_INT 1
45622: PLUS
45623: ARRAY
45624: ST_TO_ADDR
45625: GO 45756
45627: LD_INT 2
45629: DOUBLE
45630: EQUAL
45631: IFTRUE 45635
45633: GO 45691
45635: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
45636: LD_ADDR_VAR 0 9
45640: PUSH
45641: LD_VAR 0 17
45645: PUSH
45646: LD_VAR 0 18
45650: PUSH
45651: LD_VAR 0 19
45655: PUSH
45656: LD_VAR 0 20
45660: PUSH
45661: LD_VAR 0 21
45665: PUSH
45666: LD_VAR 0 22
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: PUSH
45679: LD_VAR 0 4
45683: PUSH
45684: LD_INT 1
45686: PLUS
45687: ARRAY
45688: ST_TO_ADDR
45689: GO 45756
45691: LD_INT 3
45693: DOUBLE
45694: EQUAL
45695: IFTRUE 45699
45697: GO 45755
45699: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45700: LD_ADDR_VAR 0 9
45704: PUSH
45705: LD_VAR 0 23
45709: PUSH
45710: LD_VAR 0 24
45714: PUSH
45715: LD_VAR 0 25
45719: PUSH
45720: LD_VAR 0 26
45724: PUSH
45725: LD_VAR 0 27
45729: PUSH
45730: LD_VAR 0 28
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: PUSH
45743: LD_VAR 0 4
45747: PUSH
45748: LD_INT 1
45750: PLUS
45751: ARRAY
45752: ST_TO_ADDR
45753: GO 45756
45755: POP
45756: GO 46311
45758: LD_INT 2
45760: DOUBLE
45761: EQUAL
45762: IFTRUE 45772
45764: LD_INT 3
45766: DOUBLE
45767: EQUAL
45768: IFTRUE 45772
45770: GO 45828
45772: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45773: LD_ADDR_VAR 0 9
45777: PUSH
45778: LD_VAR 0 29
45782: PUSH
45783: LD_VAR 0 30
45787: PUSH
45788: LD_VAR 0 31
45792: PUSH
45793: LD_VAR 0 32
45797: PUSH
45798: LD_VAR 0 33
45802: PUSH
45803: LD_VAR 0 34
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: PUSH
45816: LD_VAR 0 4
45820: PUSH
45821: LD_INT 1
45823: PLUS
45824: ARRAY
45825: ST_TO_ADDR
45826: GO 46311
45828: LD_INT 16
45830: DOUBLE
45831: EQUAL
45832: IFTRUE 45890
45834: LD_INT 17
45836: DOUBLE
45837: EQUAL
45838: IFTRUE 45890
45840: LD_INT 18
45842: DOUBLE
45843: EQUAL
45844: IFTRUE 45890
45846: LD_INT 19
45848: DOUBLE
45849: EQUAL
45850: IFTRUE 45890
45852: LD_INT 22
45854: DOUBLE
45855: EQUAL
45856: IFTRUE 45890
45858: LD_INT 20
45860: DOUBLE
45861: EQUAL
45862: IFTRUE 45890
45864: LD_INT 21
45866: DOUBLE
45867: EQUAL
45868: IFTRUE 45890
45870: LD_INT 23
45872: DOUBLE
45873: EQUAL
45874: IFTRUE 45890
45876: LD_INT 24
45878: DOUBLE
45879: EQUAL
45880: IFTRUE 45890
45882: LD_INT 25
45884: DOUBLE
45885: EQUAL
45886: IFTRUE 45890
45888: GO 45946
45890: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45891: LD_ADDR_VAR 0 9
45895: PUSH
45896: LD_VAR 0 35
45900: PUSH
45901: LD_VAR 0 36
45905: PUSH
45906: LD_VAR 0 37
45910: PUSH
45911: LD_VAR 0 38
45915: PUSH
45916: LD_VAR 0 39
45920: PUSH
45921: LD_VAR 0 40
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: PUSH
45934: LD_VAR 0 4
45938: PUSH
45939: LD_INT 1
45941: PLUS
45942: ARRAY
45943: ST_TO_ADDR
45944: GO 46311
45946: LD_INT 6
45948: DOUBLE
45949: EQUAL
45950: IFTRUE 46002
45952: LD_INT 7
45954: DOUBLE
45955: EQUAL
45956: IFTRUE 46002
45958: LD_INT 8
45960: DOUBLE
45961: EQUAL
45962: IFTRUE 46002
45964: LD_INT 13
45966: DOUBLE
45967: EQUAL
45968: IFTRUE 46002
45970: LD_INT 12
45972: DOUBLE
45973: EQUAL
45974: IFTRUE 46002
45976: LD_INT 15
45978: DOUBLE
45979: EQUAL
45980: IFTRUE 46002
45982: LD_INT 11
45984: DOUBLE
45985: EQUAL
45986: IFTRUE 46002
45988: LD_INT 14
45990: DOUBLE
45991: EQUAL
45992: IFTRUE 46002
45994: LD_INT 10
45996: DOUBLE
45997: EQUAL
45998: IFTRUE 46002
46000: GO 46058
46002: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
46003: LD_ADDR_VAR 0 9
46007: PUSH
46008: LD_VAR 0 41
46012: PUSH
46013: LD_VAR 0 42
46017: PUSH
46018: LD_VAR 0 43
46022: PUSH
46023: LD_VAR 0 44
46027: PUSH
46028: LD_VAR 0 45
46032: PUSH
46033: LD_VAR 0 46
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: PUSH
46046: LD_VAR 0 4
46050: PUSH
46051: LD_INT 1
46053: PLUS
46054: ARRAY
46055: ST_TO_ADDR
46056: GO 46311
46058: LD_INT 36
46060: DOUBLE
46061: EQUAL
46062: IFTRUE 46066
46064: GO 46122
46066: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
46067: LD_ADDR_VAR 0 9
46071: PUSH
46072: LD_VAR 0 47
46076: PUSH
46077: LD_VAR 0 48
46081: PUSH
46082: LD_VAR 0 49
46086: PUSH
46087: LD_VAR 0 50
46091: PUSH
46092: LD_VAR 0 51
46096: PUSH
46097: LD_VAR 0 52
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: PUSH
46110: LD_VAR 0 4
46114: PUSH
46115: LD_INT 1
46117: PLUS
46118: ARRAY
46119: ST_TO_ADDR
46120: GO 46311
46122: LD_INT 4
46124: DOUBLE
46125: EQUAL
46126: IFTRUE 46148
46128: LD_INT 5
46130: DOUBLE
46131: EQUAL
46132: IFTRUE 46148
46134: LD_INT 34
46136: DOUBLE
46137: EQUAL
46138: IFTRUE 46148
46140: LD_INT 37
46142: DOUBLE
46143: EQUAL
46144: IFTRUE 46148
46146: GO 46204
46148: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46149: LD_ADDR_VAR 0 9
46153: PUSH
46154: LD_VAR 0 53
46158: PUSH
46159: LD_VAR 0 54
46163: PUSH
46164: LD_VAR 0 55
46168: PUSH
46169: LD_VAR 0 56
46173: PUSH
46174: LD_VAR 0 57
46178: PUSH
46179: LD_VAR 0 58
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: PUSH
46192: LD_VAR 0 4
46196: PUSH
46197: LD_INT 1
46199: PLUS
46200: ARRAY
46201: ST_TO_ADDR
46202: GO 46311
46204: LD_INT 31
46206: DOUBLE
46207: EQUAL
46208: IFTRUE 46254
46210: LD_INT 32
46212: DOUBLE
46213: EQUAL
46214: IFTRUE 46254
46216: LD_INT 33
46218: DOUBLE
46219: EQUAL
46220: IFTRUE 46254
46222: LD_INT 27
46224: DOUBLE
46225: EQUAL
46226: IFTRUE 46254
46228: LD_INT 26
46230: DOUBLE
46231: EQUAL
46232: IFTRUE 46254
46234: LD_INT 28
46236: DOUBLE
46237: EQUAL
46238: IFTRUE 46254
46240: LD_INT 29
46242: DOUBLE
46243: EQUAL
46244: IFTRUE 46254
46246: LD_INT 30
46248: DOUBLE
46249: EQUAL
46250: IFTRUE 46254
46252: GO 46310
46254: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
46255: LD_ADDR_VAR 0 9
46259: PUSH
46260: LD_VAR 0 59
46264: PUSH
46265: LD_VAR 0 60
46269: PUSH
46270: LD_VAR 0 61
46274: PUSH
46275: LD_VAR 0 62
46279: PUSH
46280: LD_VAR 0 63
46284: PUSH
46285: LD_VAR 0 64
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: PUSH
46298: LD_VAR 0 4
46302: PUSH
46303: LD_INT 1
46305: PLUS
46306: ARRAY
46307: ST_TO_ADDR
46308: GO 46311
46310: POP
// temp_list2 = [ ] ;
46311: LD_ADDR_VAR 0 10
46315: PUSH
46316: EMPTY
46317: ST_TO_ADDR
// for i in temp_list do
46318: LD_ADDR_VAR 0 8
46322: PUSH
46323: LD_VAR 0 9
46327: PUSH
46328: FOR_IN
46329: IFFALSE 46381
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46331: LD_ADDR_VAR 0 10
46335: PUSH
46336: LD_VAR 0 10
46340: PUSH
46341: LD_VAR 0 8
46345: PUSH
46346: LD_INT 1
46348: ARRAY
46349: PUSH
46350: LD_VAR 0 2
46354: PLUS
46355: PUSH
46356: LD_VAR 0 8
46360: PUSH
46361: LD_INT 2
46363: ARRAY
46364: PUSH
46365: LD_VAR 0 3
46369: PLUS
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: ADD
46378: ST_TO_ADDR
46379: GO 46328
46381: POP
46382: POP
// result = temp_list2 ;
46383: LD_ADDR_VAR 0 7
46387: PUSH
46388: LD_VAR 0 10
46392: ST_TO_ADDR
// end ;
46393: LD_VAR 0 7
46397: RET
// export function EnemyInRange ( unit , dist ) ; begin
46398: LD_INT 0
46400: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46401: LD_ADDR_VAR 0 3
46405: PUSH
46406: LD_VAR 0 1
46410: PPUSH
46411: CALL_OW 255
46415: PPUSH
46416: LD_VAR 0 1
46420: PPUSH
46421: CALL_OW 250
46425: PPUSH
46426: LD_VAR 0 1
46430: PPUSH
46431: CALL_OW 251
46435: PPUSH
46436: LD_VAR 0 2
46440: PPUSH
46441: CALL 20502 0 4
46445: PUSH
46446: LD_INT 4
46448: ARRAY
46449: ST_TO_ADDR
// end ;
46450: LD_VAR 0 3
46454: RET
// export function PlayerSeeMe ( unit ) ; begin
46455: LD_INT 0
46457: PPUSH
// result := See ( your_side , unit ) ;
46458: LD_ADDR_VAR 0 2
46462: PUSH
46463: LD_OWVAR 2
46467: PPUSH
46468: LD_VAR 0 1
46472: PPUSH
46473: CALL_OW 292
46477: ST_TO_ADDR
// end ;
46478: LD_VAR 0 2
46482: RET
// export function ReverseDir ( unit ) ; begin
46483: LD_INT 0
46485: PPUSH
// if not unit then
46486: LD_VAR 0 1
46490: NOT
46491: IFFALSE 46495
// exit ;
46493: GO 46518
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46495: LD_ADDR_VAR 0 2
46499: PUSH
46500: LD_VAR 0 1
46504: PPUSH
46505: CALL_OW 254
46509: PUSH
46510: LD_INT 3
46512: PLUS
46513: PUSH
46514: LD_INT 6
46516: MOD
46517: ST_TO_ADDR
// end ;
46518: LD_VAR 0 2
46522: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
46523: LD_INT 0
46525: PPUSH
46526: PPUSH
46527: PPUSH
46528: PPUSH
46529: PPUSH
// if not hexes then
46530: LD_VAR 0 2
46534: NOT
46535: IFFALSE 46539
// exit ;
46537: GO 46687
// dist := 9999 ;
46539: LD_ADDR_VAR 0 5
46543: PUSH
46544: LD_INT 9999
46546: ST_TO_ADDR
// for i = 1 to hexes do
46547: LD_ADDR_VAR 0 4
46551: PUSH
46552: DOUBLE
46553: LD_INT 1
46555: DEC
46556: ST_TO_ADDR
46557: LD_VAR 0 2
46561: PUSH
46562: FOR_TO
46563: IFFALSE 46675
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
46565: LD_VAR 0 1
46569: PPUSH
46570: LD_VAR 0 2
46574: PUSH
46575: LD_VAR 0 4
46579: ARRAY
46580: PUSH
46581: LD_INT 1
46583: ARRAY
46584: PPUSH
46585: LD_VAR 0 2
46589: PUSH
46590: LD_VAR 0 4
46594: ARRAY
46595: PUSH
46596: LD_INT 2
46598: ARRAY
46599: PPUSH
46600: CALL_OW 297
46604: PUSH
46605: LD_VAR 0 5
46609: LESS
46610: IFFALSE 46673
// begin hex := hexes [ i ] ;
46612: LD_ADDR_VAR 0 7
46616: PUSH
46617: LD_VAR 0 2
46621: PUSH
46622: LD_VAR 0 4
46626: ARRAY
46627: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46628: LD_ADDR_VAR 0 5
46632: PUSH
46633: LD_VAR 0 1
46637: PPUSH
46638: LD_VAR 0 2
46642: PUSH
46643: LD_VAR 0 4
46647: ARRAY
46648: PUSH
46649: LD_INT 1
46651: ARRAY
46652: PPUSH
46653: LD_VAR 0 2
46657: PUSH
46658: LD_VAR 0 4
46662: ARRAY
46663: PUSH
46664: LD_INT 2
46666: ARRAY
46667: PPUSH
46668: CALL_OW 297
46672: ST_TO_ADDR
// end ; end ;
46673: GO 46562
46675: POP
46676: POP
// result := hex ;
46677: LD_ADDR_VAR 0 3
46681: PUSH
46682: LD_VAR 0 7
46686: ST_TO_ADDR
// end ;
46687: LD_VAR 0 3
46691: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46692: LD_INT 0
46694: PPUSH
46695: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46696: LD_VAR 0 1
46700: NOT
46701: PUSH
46702: LD_VAR 0 1
46706: PUSH
46707: LD_INT 21
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 23
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PPUSH
46731: CALL_OW 69
46735: IN
46736: NOT
46737: OR
46738: IFFALSE 46742
// exit ;
46740: GO 46789
// for i = 1 to 3 do
46742: LD_ADDR_VAR 0 3
46746: PUSH
46747: DOUBLE
46748: LD_INT 1
46750: DEC
46751: ST_TO_ADDR
46752: LD_INT 3
46754: PUSH
46755: FOR_TO
46756: IFFALSE 46787
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46758: LD_VAR 0 1
46762: PPUSH
46763: CALL_OW 250
46767: PPUSH
46768: LD_VAR 0 1
46772: PPUSH
46773: CALL_OW 251
46777: PPUSH
46778: LD_INT 1
46780: PPUSH
46781: CALL_OW 453
46785: GO 46755
46787: POP
46788: POP
// end ;
46789: LD_VAR 0 2
46793: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46794: LD_INT 0
46796: PPUSH
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
46801: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46802: LD_VAR 0 1
46806: NOT
46807: PUSH
46808: LD_VAR 0 2
46812: NOT
46813: OR
46814: PUSH
46815: LD_VAR 0 1
46819: PPUSH
46820: CALL_OW 314
46824: OR
46825: IFFALSE 46829
// exit ;
46827: GO 47270
// x := GetX ( enemy_unit ) ;
46829: LD_ADDR_VAR 0 7
46833: PUSH
46834: LD_VAR 0 2
46838: PPUSH
46839: CALL_OW 250
46843: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46844: LD_ADDR_VAR 0 8
46848: PUSH
46849: LD_VAR 0 2
46853: PPUSH
46854: CALL_OW 251
46858: ST_TO_ADDR
// if not x or not y then
46859: LD_VAR 0 7
46863: NOT
46864: PUSH
46865: LD_VAR 0 8
46869: NOT
46870: OR
46871: IFFALSE 46875
// exit ;
46873: GO 47270
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46875: LD_ADDR_VAR 0 6
46879: PUSH
46880: LD_VAR 0 7
46884: PPUSH
46885: LD_INT 0
46887: PPUSH
46888: LD_INT 4
46890: PPUSH
46891: CALL_OW 272
46895: PUSH
46896: LD_VAR 0 8
46900: PPUSH
46901: LD_INT 0
46903: PPUSH
46904: LD_INT 4
46906: PPUSH
46907: CALL_OW 273
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_VAR 0 7
46920: PPUSH
46921: LD_INT 1
46923: PPUSH
46924: LD_INT 4
46926: PPUSH
46927: CALL_OW 272
46931: PUSH
46932: LD_VAR 0 8
46936: PPUSH
46937: LD_INT 1
46939: PPUSH
46940: LD_INT 4
46942: PPUSH
46943: CALL_OW 273
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_VAR 0 7
46956: PPUSH
46957: LD_INT 2
46959: PPUSH
46960: LD_INT 4
46962: PPUSH
46963: CALL_OW 272
46967: PUSH
46968: LD_VAR 0 8
46972: PPUSH
46973: LD_INT 2
46975: PPUSH
46976: LD_INT 4
46978: PPUSH
46979: CALL_OW 273
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_VAR 0 7
46992: PPUSH
46993: LD_INT 3
46995: PPUSH
46996: LD_INT 4
46998: PPUSH
46999: CALL_OW 272
47003: PUSH
47004: LD_VAR 0 8
47008: PPUSH
47009: LD_INT 3
47011: PPUSH
47012: LD_INT 4
47014: PPUSH
47015: CALL_OW 273
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_VAR 0 7
47028: PPUSH
47029: LD_INT 4
47031: PPUSH
47032: LD_INT 4
47034: PPUSH
47035: CALL_OW 272
47039: PUSH
47040: LD_VAR 0 8
47044: PPUSH
47045: LD_INT 4
47047: PPUSH
47048: LD_INT 4
47050: PPUSH
47051: CALL_OW 273
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_VAR 0 7
47064: PPUSH
47065: LD_INT 5
47067: PPUSH
47068: LD_INT 4
47070: PPUSH
47071: CALL_OW 272
47075: PUSH
47076: LD_VAR 0 8
47080: PPUSH
47081: LD_INT 5
47083: PPUSH
47084: LD_INT 4
47086: PPUSH
47087: CALL_OW 273
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: ST_TO_ADDR
// for i = tmp downto 1 do
47104: LD_ADDR_VAR 0 4
47108: PUSH
47109: DOUBLE
47110: LD_VAR 0 6
47114: INC
47115: ST_TO_ADDR
47116: LD_INT 1
47118: PUSH
47119: FOR_DOWNTO
47120: IFFALSE 47221
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47122: LD_VAR 0 6
47126: PUSH
47127: LD_VAR 0 4
47131: ARRAY
47132: PUSH
47133: LD_INT 1
47135: ARRAY
47136: PPUSH
47137: LD_VAR 0 6
47141: PUSH
47142: LD_VAR 0 4
47146: ARRAY
47147: PUSH
47148: LD_INT 2
47150: ARRAY
47151: PPUSH
47152: CALL_OW 488
47156: NOT
47157: PUSH
47158: LD_VAR 0 6
47162: PUSH
47163: LD_VAR 0 4
47167: ARRAY
47168: PUSH
47169: LD_INT 1
47171: ARRAY
47172: PPUSH
47173: LD_VAR 0 6
47177: PUSH
47178: LD_VAR 0 4
47182: ARRAY
47183: PUSH
47184: LD_INT 2
47186: ARRAY
47187: PPUSH
47188: CALL_OW 428
47192: PUSH
47193: LD_INT 0
47195: NONEQUAL
47196: OR
47197: IFFALSE 47219
// tmp := Delete ( tmp , i ) ;
47199: LD_ADDR_VAR 0 6
47203: PUSH
47204: LD_VAR 0 6
47208: PPUSH
47209: LD_VAR 0 4
47213: PPUSH
47214: CALL_OW 3
47218: ST_TO_ADDR
47219: GO 47119
47221: POP
47222: POP
// j := GetClosestHex ( unit , tmp ) ;
47223: LD_ADDR_VAR 0 5
47227: PUSH
47228: LD_VAR 0 1
47232: PPUSH
47233: LD_VAR 0 6
47237: PPUSH
47238: CALL 46523 0 2
47242: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47243: LD_VAR 0 1
47247: PPUSH
47248: LD_VAR 0 5
47252: PUSH
47253: LD_INT 1
47255: ARRAY
47256: PPUSH
47257: LD_VAR 0 5
47261: PUSH
47262: LD_INT 2
47264: ARRAY
47265: PPUSH
47266: CALL_OW 111
// end ;
47270: LD_VAR 0 3
47274: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47275: LD_INT 0
47277: PPUSH
47278: PPUSH
47279: PPUSH
// uc_side = 0 ;
47280: LD_ADDR_OWVAR 20
47284: PUSH
47285: LD_INT 0
47287: ST_TO_ADDR
// uc_nation = 0 ;
47288: LD_ADDR_OWVAR 21
47292: PUSH
47293: LD_INT 0
47295: ST_TO_ADDR
// InitHc ;
47296: CALL_OW 19
// InitVc ;
47300: CALL_OW 20
// if mastodonts then
47304: LD_VAR 0 6
47308: IFFALSE 47375
// for i = 1 to mastodonts do
47310: LD_ADDR_VAR 0 11
47314: PUSH
47315: DOUBLE
47316: LD_INT 1
47318: DEC
47319: ST_TO_ADDR
47320: LD_VAR 0 6
47324: PUSH
47325: FOR_TO
47326: IFFALSE 47373
// begin vc_chassis := 31 ;
47328: LD_ADDR_OWVAR 37
47332: PUSH
47333: LD_INT 31
47335: ST_TO_ADDR
// vc_control := control_rider ;
47336: LD_ADDR_OWVAR 38
47340: PUSH
47341: LD_INT 4
47343: ST_TO_ADDR
// animal := CreateVehicle ;
47344: LD_ADDR_VAR 0 12
47348: PUSH
47349: CALL_OW 45
47353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47354: LD_VAR 0 12
47358: PPUSH
47359: LD_VAR 0 8
47363: PPUSH
47364: LD_INT 0
47366: PPUSH
47367: CALL 49444 0 3
// end ;
47371: GO 47325
47373: POP
47374: POP
// if horses then
47375: LD_VAR 0 5
47379: IFFALSE 47446
// for i = 1 to horses do
47381: LD_ADDR_VAR 0 11
47385: PUSH
47386: DOUBLE
47387: LD_INT 1
47389: DEC
47390: ST_TO_ADDR
47391: LD_VAR 0 5
47395: PUSH
47396: FOR_TO
47397: IFFALSE 47444
// begin hc_class := 21 ;
47399: LD_ADDR_OWVAR 28
47403: PUSH
47404: LD_INT 21
47406: ST_TO_ADDR
// hc_gallery :=  ;
47407: LD_ADDR_OWVAR 33
47411: PUSH
47412: LD_STRING 
47414: ST_TO_ADDR
// animal := CreateHuman ;
47415: LD_ADDR_VAR 0 12
47419: PUSH
47420: CALL_OW 44
47424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47425: LD_VAR 0 12
47429: PPUSH
47430: LD_VAR 0 8
47434: PPUSH
47435: LD_INT 0
47437: PPUSH
47438: CALL 49444 0 3
// end ;
47442: GO 47396
47444: POP
47445: POP
// if birds then
47446: LD_VAR 0 1
47450: IFFALSE 47517
// for i = 1 to birds do
47452: LD_ADDR_VAR 0 11
47456: PUSH
47457: DOUBLE
47458: LD_INT 1
47460: DEC
47461: ST_TO_ADDR
47462: LD_VAR 0 1
47466: PUSH
47467: FOR_TO
47468: IFFALSE 47515
// begin hc_class = 18 ;
47470: LD_ADDR_OWVAR 28
47474: PUSH
47475: LD_INT 18
47477: ST_TO_ADDR
// hc_gallery =  ;
47478: LD_ADDR_OWVAR 33
47482: PUSH
47483: LD_STRING 
47485: ST_TO_ADDR
// animal := CreateHuman ;
47486: LD_ADDR_VAR 0 12
47490: PUSH
47491: CALL_OW 44
47495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47496: LD_VAR 0 12
47500: PPUSH
47501: LD_VAR 0 8
47505: PPUSH
47506: LD_INT 0
47508: PPUSH
47509: CALL 49444 0 3
// end ;
47513: GO 47467
47515: POP
47516: POP
// if tigers then
47517: LD_VAR 0 2
47521: IFFALSE 47605
// for i = 1 to tigers do
47523: LD_ADDR_VAR 0 11
47527: PUSH
47528: DOUBLE
47529: LD_INT 1
47531: DEC
47532: ST_TO_ADDR
47533: LD_VAR 0 2
47537: PUSH
47538: FOR_TO
47539: IFFALSE 47603
// begin hc_class = class_tiger ;
47541: LD_ADDR_OWVAR 28
47545: PUSH
47546: LD_INT 14
47548: ST_TO_ADDR
// hc_gallery =  ;
47549: LD_ADDR_OWVAR 33
47553: PUSH
47554: LD_STRING 
47556: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47557: LD_ADDR_OWVAR 35
47561: PUSH
47562: LD_INT 7
47564: NEG
47565: PPUSH
47566: LD_INT 7
47568: PPUSH
47569: CALL_OW 12
47573: ST_TO_ADDR
// animal := CreateHuman ;
47574: LD_ADDR_VAR 0 12
47578: PUSH
47579: CALL_OW 44
47583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47584: LD_VAR 0 12
47588: PPUSH
47589: LD_VAR 0 8
47593: PPUSH
47594: LD_INT 0
47596: PPUSH
47597: CALL 49444 0 3
// end ;
47601: GO 47538
47603: POP
47604: POP
// if apemans then
47605: LD_VAR 0 3
47609: IFFALSE 47732
// for i = 1 to apemans do
47611: LD_ADDR_VAR 0 11
47615: PUSH
47616: DOUBLE
47617: LD_INT 1
47619: DEC
47620: ST_TO_ADDR
47621: LD_VAR 0 3
47625: PUSH
47626: FOR_TO
47627: IFFALSE 47730
// begin hc_class = class_apeman ;
47629: LD_ADDR_OWVAR 28
47633: PUSH
47634: LD_INT 12
47636: ST_TO_ADDR
// hc_gallery =  ;
47637: LD_ADDR_OWVAR 33
47641: PUSH
47642: LD_STRING 
47644: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
47645: LD_ADDR_OWVAR 35
47649: PUSH
47650: LD_INT 5
47652: NEG
47653: PPUSH
47654: LD_INT 5
47656: PPUSH
47657: CALL_OW 12
47661: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47662: LD_ADDR_OWVAR 31
47666: PUSH
47667: LD_INT 1
47669: PPUSH
47670: LD_INT 3
47672: PPUSH
47673: CALL_OW 12
47677: PUSH
47678: LD_INT 1
47680: PPUSH
47681: LD_INT 3
47683: PPUSH
47684: CALL_OW 12
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: ST_TO_ADDR
// animal := CreateHuman ;
47701: LD_ADDR_VAR 0 12
47705: PUSH
47706: CALL_OW 44
47710: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47711: LD_VAR 0 12
47715: PPUSH
47716: LD_VAR 0 8
47720: PPUSH
47721: LD_INT 0
47723: PPUSH
47724: CALL 49444 0 3
// end ;
47728: GO 47626
47730: POP
47731: POP
// if enchidnas then
47732: LD_VAR 0 4
47736: IFFALSE 47803
// for i = 1 to enchidnas do
47738: LD_ADDR_VAR 0 11
47742: PUSH
47743: DOUBLE
47744: LD_INT 1
47746: DEC
47747: ST_TO_ADDR
47748: LD_VAR 0 4
47752: PUSH
47753: FOR_TO
47754: IFFALSE 47801
// begin hc_class = 13 ;
47756: LD_ADDR_OWVAR 28
47760: PUSH
47761: LD_INT 13
47763: ST_TO_ADDR
// hc_gallery =  ;
47764: LD_ADDR_OWVAR 33
47768: PUSH
47769: LD_STRING 
47771: ST_TO_ADDR
// animal := CreateHuman ;
47772: LD_ADDR_VAR 0 12
47776: PUSH
47777: CALL_OW 44
47781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47782: LD_VAR 0 12
47786: PPUSH
47787: LD_VAR 0 8
47791: PPUSH
47792: LD_INT 0
47794: PPUSH
47795: CALL 49444 0 3
// end ;
47799: GO 47753
47801: POP
47802: POP
// if fishes then
47803: LD_VAR 0 7
47807: IFFALSE 47874
// for i = 1 to fishes do
47809: LD_ADDR_VAR 0 11
47813: PUSH
47814: DOUBLE
47815: LD_INT 1
47817: DEC
47818: ST_TO_ADDR
47819: LD_VAR 0 7
47823: PUSH
47824: FOR_TO
47825: IFFALSE 47872
// begin hc_class = 20 ;
47827: LD_ADDR_OWVAR 28
47831: PUSH
47832: LD_INT 20
47834: ST_TO_ADDR
// hc_gallery =  ;
47835: LD_ADDR_OWVAR 33
47839: PUSH
47840: LD_STRING 
47842: ST_TO_ADDR
// animal := CreateHuman ;
47843: LD_ADDR_VAR 0 12
47847: PUSH
47848: CALL_OW 44
47852: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47853: LD_VAR 0 12
47857: PPUSH
47858: LD_VAR 0 9
47862: PPUSH
47863: LD_INT 0
47865: PPUSH
47866: CALL 49444 0 3
// end ;
47870: GO 47824
47872: POP
47873: POP
// end ;
47874: LD_VAR 0 10
47878: RET
// export function WantHeal ( sci , unit ) ; begin
47879: LD_INT 0
47881: PPUSH
// if GetTaskList ( sci ) > 0 then
47882: LD_VAR 0 1
47886: PPUSH
47887: CALL_OW 437
47891: PUSH
47892: LD_INT 0
47894: GREATER
47895: IFFALSE 47965
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47897: LD_VAR 0 1
47901: PPUSH
47902: CALL_OW 437
47906: PUSH
47907: LD_INT 1
47909: ARRAY
47910: PUSH
47911: LD_INT 1
47913: ARRAY
47914: PUSH
47915: LD_STRING l
47917: EQUAL
47918: PUSH
47919: LD_VAR 0 1
47923: PPUSH
47924: CALL_OW 437
47928: PUSH
47929: LD_INT 1
47931: ARRAY
47932: PUSH
47933: LD_INT 4
47935: ARRAY
47936: PUSH
47937: LD_VAR 0 2
47941: EQUAL
47942: AND
47943: IFFALSE 47955
// result := true else
47945: LD_ADDR_VAR 0 3
47949: PUSH
47950: LD_INT 1
47952: ST_TO_ADDR
47953: GO 47963
// result := false ;
47955: LD_ADDR_VAR 0 3
47959: PUSH
47960: LD_INT 0
47962: ST_TO_ADDR
// end else
47963: GO 47973
// result := false ;
47965: LD_ADDR_VAR 0 3
47969: PUSH
47970: LD_INT 0
47972: ST_TO_ADDR
// end ;
47973: LD_VAR 0 3
47977: RET
// export function HealTarget ( sci ) ; begin
47978: LD_INT 0
47980: PPUSH
// if not sci then
47981: LD_VAR 0 1
47985: NOT
47986: IFFALSE 47990
// exit ;
47988: GO 48055
// result := 0 ;
47990: LD_ADDR_VAR 0 2
47994: PUSH
47995: LD_INT 0
47997: ST_TO_ADDR
// if GetTaskList ( sci ) then
47998: LD_VAR 0 1
48002: PPUSH
48003: CALL_OW 437
48007: IFFALSE 48055
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
48009: LD_VAR 0 1
48013: PPUSH
48014: CALL_OW 437
48018: PUSH
48019: LD_INT 1
48021: ARRAY
48022: PUSH
48023: LD_INT 1
48025: ARRAY
48026: PUSH
48027: LD_STRING l
48029: EQUAL
48030: IFFALSE 48055
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
48032: LD_ADDR_VAR 0 2
48036: PUSH
48037: LD_VAR 0 1
48041: PPUSH
48042: CALL_OW 437
48046: PUSH
48047: LD_INT 1
48049: ARRAY
48050: PUSH
48051: LD_INT 4
48053: ARRAY
48054: ST_TO_ADDR
// end ;
48055: LD_VAR 0 2
48059: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
48060: LD_INT 0
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
// if not base_units then
48066: LD_VAR 0 1
48070: NOT
48071: IFFALSE 48075
// exit ;
48073: GO 48162
// result := false ;
48075: LD_ADDR_VAR 0 2
48079: PUSH
48080: LD_INT 0
48082: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
48083: LD_ADDR_VAR 0 5
48087: PUSH
48088: LD_VAR 0 1
48092: PPUSH
48093: LD_INT 21
48095: PUSH
48096: LD_INT 3
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PPUSH
48103: CALL_OW 72
48107: ST_TO_ADDR
// if not tmp then
48108: LD_VAR 0 5
48112: NOT
48113: IFFALSE 48117
// exit ;
48115: GO 48162
// for i in tmp do
48117: LD_ADDR_VAR 0 3
48121: PUSH
48122: LD_VAR 0 5
48126: PUSH
48127: FOR_IN
48128: IFFALSE 48160
// begin result := EnemyInRange ( i , 22 ) ;
48130: LD_ADDR_VAR 0 2
48134: PUSH
48135: LD_VAR 0 3
48139: PPUSH
48140: LD_INT 22
48142: PPUSH
48143: CALL 46398 0 2
48147: ST_TO_ADDR
// if result then
48148: LD_VAR 0 2
48152: IFFALSE 48158
// exit ;
48154: POP
48155: POP
48156: GO 48162
// end ;
48158: GO 48127
48160: POP
48161: POP
// end ;
48162: LD_VAR 0 2
48166: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
48167: LD_INT 0
48169: PPUSH
48170: PPUSH
// if not units then
48171: LD_VAR 0 1
48175: NOT
48176: IFFALSE 48180
// exit ;
48178: GO 48250
// result := [ ] ;
48180: LD_ADDR_VAR 0 3
48184: PUSH
48185: EMPTY
48186: ST_TO_ADDR
// for i in units do
48187: LD_ADDR_VAR 0 4
48191: PUSH
48192: LD_VAR 0 1
48196: PUSH
48197: FOR_IN
48198: IFFALSE 48248
// if GetTag ( i ) = tag then
48200: LD_VAR 0 4
48204: PPUSH
48205: CALL_OW 110
48209: PUSH
48210: LD_VAR 0 2
48214: EQUAL
48215: IFFALSE 48246
// result := Insert ( result , result + 1 , i ) ;
48217: LD_ADDR_VAR 0 3
48221: PUSH
48222: LD_VAR 0 3
48226: PPUSH
48227: LD_VAR 0 3
48231: PUSH
48232: LD_INT 1
48234: PLUS
48235: PPUSH
48236: LD_VAR 0 4
48240: PPUSH
48241: CALL_OW 2
48245: ST_TO_ADDR
48246: GO 48197
48248: POP
48249: POP
// end ;
48250: LD_VAR 0 3
48254: RET
// export function IsDriver ( un ) ; begin
48255: LD_INT 0
48257: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
48258: LD_ADDR_VAR 0 2
48262: PUSH
48263: LD_VAR 0 1
48267: PUSH
48268: LD_INT 55
48270: PUSH
48271: EMPTY
48272: LIST
48273: PPUSH
48274: CALL_OW 69
48278: IN
48279: ST_TO_ADDR
// end ;
48280: LD_VAR 0 2
48284: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
48285: LD_INT 0
48287: PPUSH
48288: PPUSH
// list := [ ] ;
48289: LD_ADDR_VAR 0 5
48293: PUSH
48294: EMPTY
48295: ST_TO_ADDR
// case d of 0 :
48296: LD_VAR 0 3
48300: PUSH
48301: LD_INT 0
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48309
48307: GO 48442
48309: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
48310: LD_ADDR_VAR 0 5
48314: PUSH
48315: LD_VAR 0 1
48319: PUSH
48320: LD_INT 4
48322: MINUS
48323: PUSH
48324: LD_VAR 0 2
48328: PUSH
48329: LD_INT 4
48331: MINUS
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: LIST
48340: PUSH
48341: LD_VAR 0 1
48345: PUSH
48346: LD_INT 3
48348: MINUS
48349: PUSH
48350: LD_VAR 0 2
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: LIST
48362: PUSH
48363: LD_VAR 0 1
48367: PUSH
48368: LD_INT 4
48370: PLUS
48371: PUSH
48372: LD_VAR 0 2
48376: PUSH
48377: LD_INT 4
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: LIST
48384: PUSH
48385: LD_VAR 0 1
48389: PUSH
48390: LD_INT 3
48392: PLUS
48393: PUSH
48394: LD_VAR 0 2
48398: PUSH
48399: LD_INT 3
48401: PLUS
48402: PUSH
48403: LD_INT 5
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: PUSH
48411: LD_VAR 0 1
48415: PUSH
48416: LD_VAR 0 2
48420: PUSH
48421: LD_INT 4
48423: PLUS
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// end ; 1 :
48440: GO 49140
48442: LD_INT 1
48444: DOUBLE
48445: EQUAL
48446: IFTRUE 48450
48448: GO 48583
48450: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
48451: LD_ADDR_VAR 0 5
48455: PUSH
48456: LD_VAR 0 1
48460: PUSH
48461: LD_VAR 0 2
48465: PUSH
48466: LD_INT 4
48468: MINUS
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: PUSH
48478: LD_VAR 0 1
48482: PUSH
48483: LD_INT 3
48485: MINUS
48486: PUSH
48487: LD_VAR 0 2
48491: PUSH
48492: LD_INT 3
48494: MINUS
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: PUSH
48504: LD_VAR 0 1
48508: PUSH
48509: LD_INT 4
48511: MINUS
48512: PUSH
48513: LD_VAR 0 2
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: PUSH
48526: LD_VAR 0 1
48530: PUSH
48531: LD_VAR 0 2
48535: PUSH
48536: LD_INT 3
48538: PLUS
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: PUSH
48548: LD_VAR 0 1
48552: PUSH
48553: LD_INT 4
48555: PLUS
48556: PUSH
48557: LD_VAR 0 2
48561: PUSH
48562: LD_INT 4
48564: PLUS
48565: PUSH
48566: LD_INT 5
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: ST_TO_ADDR
// end ; 2 :
48581: GO 49140
48583: LD_INT 2
48585: DOUBLE
48586: EQUAL
48587: IFTRUE 48591
48589: GO 48720
48591: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
48592: LD_ADDR_VAR 0 5
48596: PUSH
48597: LD_VAR 0 1
48601: PUSH
48602: LD_VAR 0 2
48606: PUSH
48607: LD_INT 3
48609: MINUS
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: PUSH
48619: LD_VAR 0 1
48623: PUSH
48624: LD_INT 4
48626: PLUS
48627: PUSH
48628: LD_VAR 0 2
48632: PUSH
48633: LD_INT 4
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: LIST
48640: PUSH
48641: LD_VAR 0 1
48645: PUSH
48646: LD_VAR 0 2
48650: PUSH
48651: LD_INT 4
48653: PLUS
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: PUSH
48663: LD_VAR 0 1
48667: PUSH
48668: LD_INT 3
48670: MINUS
48671: PUSH
48672: LD_VAR 0 2
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: PUSH
48685: LD_VAR 0 1
48689: PUSH
48690: LD_INT 4
48692: MINUS
48693: PUSH
48694: LD_VAR 0 2
48698: PUSH
48699: LD_INT 4
48701: MINUS
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: LIST
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: ST_TO_ADDR
// end ; 3 :
48718: GO 49140
48720: LD_INT 3
48722: DOUBLE
48723: EQUAL
48724: IFTRUE 48728
48726: GO 48861
48728: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
48729: LD_ADDR_VAR 0 5
48733: PUSH
48734: LD_VAR 0 1
48738: PUSH
48739: LD_INT 3
48741: PLUS
48742: PUSH
48743: LD_VAR 0 2
48747: PUSH
48748: LD_INT 4
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: PUSH
48756: LD_VAR 0 1
48760: PUSH
48761: LD_INT 4
48763: PLUS
48764: PUSH
48765: LD_VAR 0 2
48769: PUSH
48770: LD_INT 4
48772: PLUS
48773: PUSH
48774: LD_INT 5
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: PUSH
48782: LD_VAR 0 1
48786: PUSH
48787: LD_INT 4
48789: MINUS
48790: PUSH
48791: LD_VAR 0 2
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: PUSH
48804: LD_VAR 0 1
48808: PUSH
48809: LD_VAR 0 2
48813: PUSH
48814: LD_INT 4
48816: MINUS
48817: PUSH
48818: LD_INT 3
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: LIST
48825: PUSH
48826: LD_VAR 0 1
48830: PUSH
48831: LD_INT 3
48833: MINUS
48834: PUSH
48835: LD_VAR 0 2
48839: PUSH
48840: LD_INT 3
48842: MINUS
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// end ; 4 :
48859: GO 49140
48861: LD_INT 4
48863: DOUBLE
48864: EQUAL
48865: IFTRUE 48869
48867: GO 49002
48869: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48870: LD_ADDR_VAR 0 5
48874: PUSH
48875: LD_VAR 0 1
48879: PUSH
48880: LD_VAR 0 2
48884: PUSH
48885: LD_INT 4
48887: PLUS
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: PUSH
48897: LD_VAR 0 1
48901: PUSH
48902: LD_INT 3
48904: PLUS
48905: PUSH
48906: LD_VAR 0 2
48910: PUSH
48911: LD_INT 3
48913: PLUS
48914: PUSH
48915: LD_INT 5
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: PUSH
48923: LD_VAR 0 1
48927: PUSH
48928: LD_INT 4
48930: PLUS
48931: PUSH
48932: LD_VAR 0 2
48936: PUSH
48937: LD_INT 4
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: PUSH
48945: LD_VAR 0 1
48949: PUSH
48950: LD_VAR 0 2
48954: PUSH
48955: LD_INT 3
48957: MINUS
48958: PUSH
48959: LD_INT 3
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: PUSH
48967: LD_VAR 0 1
48971: PUSH
48972: LD_INT 4
48974: MINUS
48975: PUSH
48976: LD_VAR 0 2
48980: PUSH
48981: LD_INT 4
48983: MINUS
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: LIST
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: ST_TO_ADDR
// end ; 5 :
49000: GO 49140
49002: LD_INT 5
49004: DOUBLE
49005: EQUAL
49006: IFTRUE 49010
49008: GO 49139
49010: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
49011: LD_ADDR_VAR 0 5
49015: PUSH
49016: LD_VAR 0 1
49020: PUSH
49021: LD_INT 4
49023: MINUS
49024: PUSH
49025: LD_VAR 0 2
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: LIST
49037: PUSH
49038: LD_VAR 0 1
49042: PUSH
49043: LD_VAR 0 2
49047: PUSH
49048: LD_INT 4
49050: MINUS
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: PUSH
49060: LD_VAR 0 1
49064: PUSH
49065: LD_INT 4
49067: PLUS
49068: PUSH
49069: LD_VAR 0 2
49073: PUSH
49074: LD_INT 4
49076: PLUS
49077: PUSH
49078: LD_INT 5
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: PUSH
49086: LD_VAR 0 1
49090: PUSH
49091: LD_INT 3
49093: PLUS
49094: PUSH
49095: LD_VAR 0 2
49099: PUSH
49100: LD_INT 4
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: PUSH
49108: LD_VAR 0 1
49112: PUSH
49113: LD_VAR 0 2
49117: PUSH
49118: LD_INT 3
49120: PLUS
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// end ; end ;
49137: GO 49140
49139: POP
// result := list ;
49140: LD_ADDR_VAR 0 4
49144: PUSH
49145: LD_VAR 0 5
49149: ST_TO_ADDR
// end ;
49150: LD_VAR 0 4
49154: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
49155: LD_INT 0
49157: PPUSH
49158: PPUSH
49159: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
49160: LD_VAR 0 1
49164: NOT
49165: PUSH
49166: LD_VAR 0 2
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: LD_INT 4
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: IN
49189: NOT
49190: OR
49191: IFFALSE 49195
// exit ;
49193: GO 49287
// tmp := [ ] ;
49195: LD_ADDR_VAR 0 5
49199: PUSH
49200: EMPTY
49201: ST_TO_ADDR
// for i in units do
49202: LD_ADDR_VAR 0 4
49206: PUSH
49207: LD_VAR 0 1
49211: PUSH
49212: FOR_IN
49213: IFFALSE 49256
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
49215: LD_ADDR_VAR 0 5
49219: PUSH
49220: LD_VAR 0 5
49224: PPUSH
49225: LD_VAR 0 5
49229: PUSH
49230: LD_INT 1
49232: PLUS
49233: PPUSH
49234: LD_VAR 0 4
49238: PPUSH
49239: LD_VAR 0 2
49243: PPUSH
49244: CALL_OW 259
49248: PPUSH
49249: CALL_OW 2
49253: ST_TO_ADDR
49254: GO 49212
49256: POP
49257: POP
// if not tmp then
49258: LD_VAR 0 5
49262: NOT
49263: IFFALSE 49267
// exit ;
49265: GO 49287
// result := SortListByListDesc ( units , tmp ) ;
49267: LD_ADDR_VAR 0 3
49271: PUSH
49272: LD_VAR 0 1
49276: PPUSH
49277: LD_VAR 0 5
49281: PPUSH
49282: CALL_OW 77
49286: ST_TO_ADDR
// end ;
49287: LD_VAR 0 3
49291: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
49292: LD_INT 0
49294: PPUSH
49295: PPUSH
49296: PPUSH
// x := GetX ( building ) ;
49297: LD_ADDR_VAR 0 4
49301: PUSH
49302: LD_VAR 0 2
49306: PPUSH
49307: CALL_OW 250
49311: ST_TO_ADDR
// y := GetY ( building ) ;
49312: LD_ADDR_VAR 0 5
49316: PUSH
49317: LD_VAR 0 2
49321: PPUSH
49322: CALL_OW 251
49326: ST_TO_ADDR
// if GetTaskList ( unit ) then
49327: LD_VAR 0 1
49331: PPUSH
49332: CALL_OW 437
49336: IFFALSE 49431
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49338: LD_STRING e
49340: PUSH
49341: LD_VAR 0 1
49345: PPUSH
49346: CALL_OW 437
49350: PUSH
49351: LD_INT 1
49353: ARRAY
49354: PUSH
49355: LD_INT 1
49357: ARRAY
49358: EQUAL
49359: PUSH
49360: LD_VAR 0 4
49364: PUSH
49365: LD_VAR 0 1
49369: PPUSH
49370: CALL_OW 437
49374: PUSH
49375: LD_INT 1
49377: ARRAY
49378: PUSH
49379: LD_INT 2
49381: ARRAY
49382: EQUAL
49383: AND
49384: PUSH
49385: LD_VAR 0 5
49389: PUSH
49390: LD_VAR 0 1
49394: PPUSH
49395: CALL_OW 437
49399: PUSH
49400: LD_INT 1
49402: ARRAY
49403: PUSH
49404: LD_INT 3
49406: ARRAY
49407: EQUAL
49408: AND
49409: IFFALSE 49421
// result := true else
49411: LD_ADDR_VAR 0 3
49415: PUSH
49416: LD_INT 1
49418: ST_TO_ADDR
49419: GO 49429
// result := false ;
49421: LD_ADDR_VAR 0 3
49425: PUSH
49426: LD_INT 0
49428: ST_TO_ADDR
// end else
49429: GO 49439
// result := false ;
49431: LD_ADDR_VAR 0 3
49435: PUSH
49436: LD_INT 0
49438: ST_TO_ADDR
// end ;
49439: LD_VAR 0 3
49443: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
49444: LD_INT 0
49446: PPUSH
49447: PPUSH
49448: PPUSH
49449: PPUSH
// if not unit or not area then
49450: LD_VAR 0 1
49454: NOT
49455: PUSH
49456: LD_VAR 0 2
49460: NOT
49461: OR
49462: IFFALSE 49466
// exit ;
49464: GO 49630
// tmp := AreaToList ( area , i ) ;
49466: LD_ADDR_VAR 0 6
49470: PUSH
49471: LD_VAR 0 2
49475: PPUSH
49476: LD_VAR 0 5
49480: PPUSH
49481: CALL_OW 517
49485: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49486: LD_ADDR_VAR 0 5
49490: PUSH
49491: DOUBLE
49492: LD_INT 1
49494: DEC
49495: ST_TO_ADDR
49496: LD_VAR 0 6
49500: PUSH
49501: LD_INT 1
49503: ARRAY
49504: PUSH
49505: FOR_TO
49506: IFFALSE 49628
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49508: LD_ADDR_VAR 0 7
49512: PUSH
49513: LD_VAR 0 6
49517: PUSH
49518: LD_INT 1
49520: ARRAY
49521: PUSH
49522: LD_VAR 0 5
49526: ARRAY
49527: PUSH
49528: LD_VAR 0 6
49532: PUSH
49533: LD_INT 2
49535: ARRAY
49536: PUSH
49537: LD_VAR 0 5
49541: ARRAY
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
49547: LD_VAR 0 7
49551: PUSH
49552: LD_INT 1
49554: ARRAY
49555: PPUSH
49556: LD_VAR 0 7
49560: PUSH
49561: LD_INT 2
49563: ARRAY
49564: PPUSH
49565: CALL_OW 428
49569: PUSH
49570: LD_INT 0
49572: EQUAL
49573: IFFALSE 49626
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
49575: LD_VAR 0 1
49579: PPUSH
49580: LD_VAR 0 7
49584: PUSH
49585: LD_INT 1
49587: ARRAY
49588: PPUSH
49589: LD_VAR 0 7
49593: PUSH
49594: LD_INT 2
49596: ARRAY
49597: PPUSH
49598: LD_VAR 0 3
49602: PPUSH
49603: CALL_OW 48
// result := IsPlaced ( unit ) ;
49607: LD_ADDR_VAR 0 4
49611: PUSH
49612: LD_VAR 0 1
49616: PPUSH
49617: CALL_OW 305
49621: ST_TO_ADDR
// exit ;
49622: POP
49623: POP
49624: GO 49630
// end ; end ;
49626: GO 49505
49628: POP
49629: POP
// end ;
49630: LD_VAR 0 4
49634: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
49635: LD_INT 0
49637: PPUSH
49638: PPUSH
49639: PPUSH
// if not side or side > 8 then
49640: LD_VAR 0 1
49644: NOT
49645: PUSH
49646: LD_VAR 0 1
49650: PUSH
49651: LD_INT 8
49653: GREATER
49654: OR
49655: IFFALSE 49659
// exit ;
49657: GO 49846
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
49659: LD_ADDR_VAR 0 4
49663: PUSH
49664: LD_INT 22
49666: PUSH
49667: LD_VAR 0 1
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 21
49678: PUSH
49679: LD_INT 3
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PPUSH
49690: CALL_OW 69
49694: ST_TO_ADDR
// if not tmp then
49695: LD_VAR 0 4
49699: NOT
49700: IFFALSE 49704
// exit ;
49702: GO 49846
// enable_addtolog := true ;
49704: LD_ADDR_OWVAR 81
49708: PUSH
49709: LD_INT 1
49711: ST_TO_ADDR
// AddToLog ( [ ) ;
49712: LD_STRING [
49714: PPUSH
49715: CALL_OW 561
// for i in tmp do
49719: LD_ADDR_VAR 0 3
49723: PUSH
49724: LD_VAR 0 4
49728: PUSH
49729: FOR_IN
49730: IFFALSE 49837
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49732: LD_STRING [
49734: PUSH
49735: LD_VAR 0 3
49739: PPUSH
49740: CALL_OW 266
49744: STR
49745: PUSH
49746: LD_STRING , 
49748: STR
49749: PUSH
49750: LD_VAR 0 3
49754: PPUSH
49755: CALL_OW 250
49759: STR
49760: PUSH
49761: LD_STRING , 
49763: STR
49764: PUSH
49765: LD_VAR 0 3
49769: PPUSH
49770: CALL_OW 251
49774: STR
49775: PUSH
49776: LD_STRING , 
49778: STR
49779: PUSH
49780: LD_VAR 0 3
49784: PPUSH
49785: CALL_OW 254
49789: STR
49790: PUSH
49791: LD_STRING , 
49793: STR
49794: PUSH
49795: LD_VAR 0 3
49799: PPUSH
49800: LD_INT 1
49802: PPUSH
49803: CALL_OW 268
49807: STR
49808: PUSH
49809: LD_STRING , 
49811: STR
49812: PUSH
49813: LD_VAR 0 3
49817: PPUSH
49818: LD_INT 2
49820: PPUSH
49821: CALL_OW 268
49825: STR
49826: PUSH
49827: LD_STRING ],
49829: STR
49830: PPUSH
49831: CALL_OW 561
// end ;
49835: GO 49729
49837: POP
49838: POP
// AddToLog ( ]; ) ;
49839: LD_STRING ];
49841: PPUSH
49842: CALL_OW 561
// end ;
49846: LD_VAR 0 2
49850: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49851: LD_INT 0
49853: PPUSH
49854: PPUSH
49855: PPUSH
49856: PPUSH
49857: PPUSH
// if not area or not rate or not max then
49858: LD_VAR 0 1
49862: NOT
49863: PUSH
49864: LD_VAR 0 2
49868: NOT
49869: OR
49870: PUSH
49871: LD_VAR 0 4
49875: NOT
49876: OR
49877: IFFALSE 49881
// exit ;
49879: GO 50073
// while 1 do
49881: LD_INT 1
49883: IFFALSE 50073
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49885: LD_ADDR_VAR 0 9
49889: PUSH
49890: LD_VAR 0 1
49894: PPUSH
49895: LD_INT 1
49897: PPUSH
49898: CALL_OW 287
49902: PUSH
49903: LD_INT 10
49905: MUL
49906: ST_TO_ADDR
// r := rate / 10 ;
49907: LD_ADDR_VAR 0 7
49911: PUSH
49912: LD_VAR 0 2
49916: PUSH
49917: LD_INT 10
49919: DIVREAL
49920: ST_TO_ADDR
// time := 1 1$00 ;
49921: LD_ADDR_VAR 0 8
49925: PUSH
49926: LD_INT 2100
49928: ST_TO_ADDR
// if amount < min then
49929: LD_VAR 0 9
49933: PUSH
49934: LD_VAR 0 3
49938: LESS
49939: IFFALSE 49957
// r := r * 2 else
49941: LD_ADDR_VAR 0 7
49945: PUSH
49946: LD_VAR 0 7
49950: PUSH
49951: LD_INT 2
49953: MUL
49954: ST_TO_ADDR
49955: GO 49983
// if amount > max then
49957: LD_VAR 0 9
49961: PUSH
49962: LD_VAR 0 4
49966: GREATER
49967: IFFALSE 49983
// r := r / 2 ;
49969: LD_ADDR_VAR 0 7
49973: PUSH
49974: LD_VAR 0 7
49978: PUSH
49979: LD_INT 2
49981: DIVREAL
49982: ST_TO_ADDR
// time := time / r ;
49983: LD_ADDR_VAR 0 8
49987: PUSH
49988: LD_VAR 0 8
49992: PUSH
49993: LD_VAR 0 7
49997: DIVREAL
49998: ST_TO_ADDR
// if time < 0 then
49999: LD_VAR 0 8
50003: PUSH
50004: LD_INT 0
50006: LESS
50007: IFFALSE 50024
// time := time * - 1 ;
50009: LD_ADDR_VAR 0 8
50013: PUSH
50014: LD_VAR 0 8
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: MUL
50023: ST_TO_ADDR
// wait ( time ) ;
50024: LD_VAR 0 8
50028: PPUSH
50029: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
50033: LD_INT 35
50035: PPUSH
50036: LD_INT 875
50038: PPUSH
50039: CALL_OW 12
50043: PPUSH
50044: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
50048: LD_INT 1
50050: PPUSH
50051: LD_INT 5
50053: PPUSH
50054: CALL_OW 12
50058: PPUSH
50059: LD_VAR 0 1
50063: PPUSH
50064: LD_INT 1
50066: PPUSH
50067: CALL_OW 55
// end ;
50071: GO 49881
// end ;
50073: LD_VAR 0 5
50077: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
50078: LD_INT 0
50080: PPUSH
50081: PPUSH
50082: PPUSH
50083: PPUSH
50084: PPUSH
50085: PPUSH
50086: PPUSH
50087: PPUSH
// if not turrets or not factories then
50088: LD_VAR 0 1
50092: NOT
50093: PUSH
50094: LD_VAR 0 2
50098: NOT
50099: OR
50100: IFFALSE 50104
// exit ;
50102: GO 50411
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
50104: LD_ADDR_VAR 0 10
50108: PUSH
50109: LD_INT 5
50111: PUSH
50112: LD_INT 6
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 4
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 3
50131: PUSH
50132: LD_INT 5
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 24
50146: PUSH
50147: LD_INT 25
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 23
50156: PUSH
50157: LD_INT 27
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 42
50170: PUSH
50171: LD_INT 43
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 44
50180: PUSH
50181: LD_INT 46
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 45
50190: PUSH
50191: LD_INT 47
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: ST_TO_ADDR
// result := [ ] ;
50208: LD_ADDR_VAR 0 3
50212: PUSH
50213: EMPTY
50214: ST_TO_ADDR
// for i in turrets do
50215: LD_ADDR_VAR 0 4
50219: PUSH
50220: LD_VAR 0 1
50224: PUSH
50225: FOR_IN
50226: IFFALSE 50409
// begin nat := GetNation ( i ) ;
50228: LD_ADDR_VAR 0 7
50232: PUSH
50233: LD_VAR 0 4
50237: PPUSH
50238: CALL_OW 248
50242: ST_TO_ADDR
// weapon := 0 ;
50243: LD_ADDR_VAR 0 8
50247: PUSH
50248: LD_INT 0
50250: ST_TO_ADDR
// if not nat then
50251: LD_VAR 0 7
50255: NOT
50256: IFFALSE 50260
// continue ;
50258: GO 50225
// for j in list [ nat ] do
50260: LD_ADDR_VAR 0 5
50264: PUSH
50265: LD_VAR 0 10
50269: PUSH
50270: LD_VAR 0 7
50274: ARRAY
50275: PUSH
50276: FOR_IN
50277: IFFALSE 50318
// if GetBWeapon ( i ) = j [ 1 ] then
50279: LD_VAR 0 4
50283: PPUSH
50284: CALL_OW 269
50288: PUSH
50289: LD_VAR 0 5
50293: PUSH
50294: LD_INT 1
50296: ARRAY
50297: EQUAL
50298: IFFALSE 50316
// begin weapon := j [ 2 ] ;
50300: LD_ADDR_VAR 0 8
50304: PUSH
50305: LD_VAR 0 5
50309: PUSH
50310: LD_INT 2
50312: ARRAY
50313: ST_TO_ADDR
// break ;
50314: GO 50318
// end ;
50316: GO 50276
50318: POP
50319: POP
// if not weapon then
50320: LD_VAR 0 8
50324: NOT
50325: IFFALSE 50329
// continue ;
50327: GO 50225
// for k in factories do
50329: LD_ADDR_VAR 0 6
50333: PUSH
50334: LD_VAR 0 2
50338: PUSH
50339: FOR_IN
50340: IFFALSE 50405
// begin weapons := AvailableWeaponList ( k ) ;
50342: LD_ADDR_VAR 0 9
50346: PUSH
50347: LD_VAR 0 6
50351: PPUSH
50352: CALL_OW 478
50356: ST_TO_ADDR
// if not weapons then
50357: LD_VAR 0 9
50361: NOT
50362: IFFALSE 50366
// continue ;
50364: GO 50339
// if weapon in weapons then
50366: LD_VAR 0 8
50370: PUSH
50371: LD_VAR 0 9
50375: IN
50376: IFFALSE 50403
// begin result := [ i , weapon ] ;
50378: LD_ADDR_VAR 0 3
50382: PUSH
50383: LD_VAR 0 4
50387: PUSH
50388: LD_VAR 0 8
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: ST_TO_ADDR
// exit ;
50397: POP
50398: POP
50399: POP
50400: POP
50401: GO 50411
// end ; end ;
50403: GO 50339
50405: POP
50406: POP
// end ;
50407: GO 50225
50409: POP
50410: POP
// end ;
50411: LD_VAR 0 3
50415: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
50416: LD_INT 0
50418: PPUSH
// if not side or side > 8 then
50419: LD_VAR 0 3
50423: NOT
50424: PUSH
50425: LD_VAR 0 3
50429: PUSH
50430: LD_INT 8
50432: GREATER
50433: OR
50434: IFFALSE 50438
// exit ;
50436: GO 50497
// if not range then
50438: LD_VAR 0 4
50442: NOT
50443: IFFALSE 50454
// range := - 12 ;
50445: LD_ADDR_VAR 0 4
50449: PUSH
50450: LD_INT 12
50452: NEG
50453: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
50454: LD_VAR 0 1
50458: PPUSH
50459: LD_VAR 0 2
50463: PPUSH
50464: LD_VAR 0 3
50468: PPUSH
50469: LD_VAR 0 4
50473: PPUSH
50474: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50478: LD_VAR 0 1
50482: PPUSH
50483: LD_VAR 0 2
50487: PPUSH
50488: LD_VAR 0 3
50492: PPUSH
50493: CALL_OW 331
// end ;
50497: LD_VAR 0 5
50501: RET
// export function Video ( mode ) ; begin
50502: LD_INT 0
50504: PPUSH
// ingame_video = mode ;
50505: LD_ADDR_OWVAR 52
50509: PUSH
50510: LD_VAR 0 1
50514: ST_TO_ADDR
// interface_hidden = mode ;
50515: LD_ADDR_OWVAR 54
50519: PUSH
50520: LD_VAR 0 1
50524: ST_TO_ADDR
// end ;
50525: LD_VAR 0 2
50529: RET
// export function Join ( array , element ) ; begin
50530: LD_INT 0
50532: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50533: LD_ADDR_VAR 0 3
50537: PUSH
50538: LD_VAR 0 1
50542: PPUSH
50543: LD_VAR 0 1
50547: PUSH
50548: LD_INT 1
50550: PLUS
50551: PPUSH
50552: LD_VAR 0 2
50556: PPUSH
50557: CALL_OW 1
50561: ST_TO_ADDR
// end ;
50562: LD_VAR 0 3
50566: RET
// export function JoinUnion ( array , element ) ; begin
50567: LD_INT 0
50569: PPUSH
// result := array union element ;
50570: LD_ADDR_VAR 0 3
50574: PUSH
50575: LD_VAR 0 1
50579: PUSH
50580: LD_VAR 0 2
50584: UNION
50585: ST_TO_ADDR
// end ;
50586: LD_VAR 0 3
50590: RET
// export function GetBehemoths ( side ) ; begin
50591: LD_INT 0
50593: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
50594: LD_ADDR_VAR 0 2
50598: PUSH
50599: LD_INT 22
50601: PUSH
50602: LD_VAR 0 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 31
50613: PUSH
50614: LD_INT 25
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PPUSH
50625: CALL_OW 69
50629: ST_TO_ADDR
// end ;
50630: LD_VAR 0 2
50634: RET
// export function Shuffle ( array ) ; var i , index ; begin
50635: LD_INT 0
50637: PPUSH
50638: PPUSH
50639: PPUSH
// result := [ ] ;
50640: LD_ADDR_VAR 0 2
50644: PUSH
50645: EMPTY
50646: ST_TO_ADDR
// if not array then
50647: LD_VAR 0 1
50651: NOT
50652: IFFALSE 50656
// exit ;
50654: GO 50755
// Randomize ;
50656: CALL_OW 10
// for i = array downto 1 do
50660: LD_ADDR_VAR 0 3
50664: PUSH
50665: DOUBLE
50666: LD_VAR 0 1
50670: INC
50671: ST_TO_ADDR
50672: LD_INT 1
50674: PUSH
50675: FOR_DOWNTO
50676: IFFALSE 50753
// begin index := rand ( 1 , array ) ;
50678: LD_ADDR_VAR 0 4
50682: PUSH
50683: LD_INT 1
50685: PPUSH
50686: LD_VAR 0 1
50690: PPUSH
50691: CALL_OW 12
50695: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
50696: LD_ADDR_VAR 0 2
50700: PUSH
50701: LD_VAR 0 2
50705: PPUSH
50706: LD_VAR 0 2
50710: PUSH
50711: LD_INT 1
50713: PLUS
50714: PPUSH
50715: LD_VAR 0 1
50719: PUSH
50720: LD_VAR 0 4
50724: ARRAY
50725: PPUSH
50726: CALL_OW 2
50730: ST_TO_ADDR
// array := Delete ( array , index ) ;
50731: LD_ADDR_VAR 0 1
50735: PUSH
50736: LD_VAR 0 1
50740: PPUSH
50741: LD_VAR 0 4
50745: PPUSH
50746: CALL_OW 3
50750: ST_TO_ADDR
// end ;
50751: GO 50675
50753: POP
50754: POP
// end ;
50755: LD_VAR 0 2
50759: RET
// export function GetBaseMaterials ( base ) ; begin
50760: LD_INT 0
50762: PPUSH
// result := [ 0 , 0 , 0 ] ;
50763: LD_ADDR_VAR 0 2
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: ST_TO_ADDR
// if not base then
50782: LD_VAR 0 1
50786: NOT
50787: IFFALSE 50791
// exit ;
50789: GO 50840
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50791: LD_ADDR_VAR 0 2
50795: PUSH
50796: LD_VAR 0 1
50800: PPUSH
50801: LD_INT 1
50803: PPUSH
50804: CALL_OW 275
50808: PUSH
50809: LD_VAR 0 1
50813: PPUSH
50814: LD_INT 2
50816: PPUSH
50817: CALL_OW 275
50821: PUSH
50822: LD_VAR 0 1
50826: PPUSH
50827: LD_INT 3
50829: PPUSH
50830: CALL_OW 275
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: ST_TO_ADDR
// end ;
50840: LD_VAR 0 2
50844: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50845: LD_INT 0
50847: PPUSH
50848: PPUSH
// result := array ;
50849: LD_ADDR_VAR 0 3
50853: PUSH
50854: LD_VAR 0 1
50858: ST_TO_ADDR
// if size > 0 then
50859: LD_VAR 0 2
50863: PUSH
50864: LD_INT 0
50866: GREATER
50867: IFFALSE 50913
// for i := array downto size do
50869: LD_ADDR_VAR 0 4
50873: PUSH
50874: DOUBLE
50875: LD_VAR 0 1
50879: INC
50880: ST_TO_ADDR
50881: LD_VAR 0 2
50885: PUSH
50886: FOR_DOWNTO
50887: IFFALSE 50911
// result := Delete ( result , result ) ;
50889: LD_ADDR_VAR 0 3
50893: PUSH
50894: LD_VAR 0 3
50898: PPUSH
50899: LD_VAR 0 3
50903: PPUSH
50904: CALL_OW 3
50908: ST_TO_ADDR
50909: GO 50886
50911: POP
50912: POP
// end ;
50913: LD_VAR 0 3
50917: RET
// export function ComExit ( unit ) ; var tmp ; begin
50918: LD_INT 0
50920: PPUSH
50921: PPUSH
// if not IsInUnit ( unit ) then
50922: LD_VAR 0 1
50926: PPUSH
50927: CALL_OW 310
50931: NOT
50932: IFFALSE 50936
// exit ;
50934: GO 50996
// tmp := IsInUnit ( unit ) ;
50936: LD_ADDR_VAR 0 3
50940: PUSH
50941: LD_VAR 0 1
50945: PPUSH
50946: CALL_OW 310
50950: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50951: LD_VAR 0 3
50955: PPUSH
50956: CALL_OW 247
50960: PUSH
50961: LD_INT 2
50963: EQUAL
50964: IFFALSE 50977
// ComExitVehicle ( unit ) else
50966: LD_VAR 0 1
50970: PPUSH
50971: CALL_OW 121
50975: GO 50986
// ComExitBuilding ( unit ) ;
50977: LD_VAR 0 1
50981: PPUSH
50982: CALL_OW 122
// result := tmp ;
50986: LD_ADDR_VAR 0 2
50990: PUSH
50991: LD_VAR 0 3
50995: ST_TO_ADDR
// end ;
50996: LD_VAR 0 2
51000: RET
// export function ResetHc ; begin
51001: LD_INT 0
51003: PPUSH
// InitHc ;
51004: CALL_OW 19
// hc_importance := 0 ;
51008: LD_ADDR_OWVAR 32
51012: PUSH
51013: LD_INT 0
51015: ST_TO_ADDR
// end ;
51016: LD_VAR 0 1
51020: RET
