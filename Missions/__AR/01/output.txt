// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_INT 91
  23: EQUAL
  24: IFFALSE 96
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  26: LD_INT 68
  28: PPUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: CALL_OW 255
  38: PPUSH
  39: CALL_OW 321
  43: PUSH
  44: LD_INT 2
  46: EQUAL
  47: IFFALSE 59
// eff := 70 else
  49: LD_ADDR_VAR 0 4
  53: PUSH
  54: LD_INT 70
  56: ST_TO_ADDR
  57: GO 67
// eff := 30 ;
  59: LD_ADDR_VAR 0 4
  63: PUSH
  64: LD_INT 30
  66: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: CALL_OW 250
  76: PPUSH
  77: LD_VAR 0 1
  81: PPUSH
  82: CALL_OW 251
  86: PPUSH
  87: LD_VAR 0 4
  91: PPUSH
  92: CALL_OW 495
// end ; end ;
  96: LD_VAR 0 2
 100: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 101: LD_INT 0
 103: PPUSH
// end ;
 104: LD_VAR 0 4
 108: RET
// export function SOS_Command ( cmd ) ; begin
 109: LD_INT 0
 111: PPUSH
// end ;
 112: LD_VAR 0 2
 116: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
 117: LD_INT 0
 119: PPUSH
// end ;
 120: LD_VAR 0 6
 124: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
// if not vehicle or not factory then
 129: LD_VAR 0 1
 133: NOT
 134: PUSH
 135: LD_VAR 0 2
 139: NOT
 140: OR
 141: IFFALSE 145
// exit ;
 143: GO 376
// if factoryWaypoints >= factory then
 145: LD_EXP 70
 149: PUSH
 150: LD_VAR 0 2
 154: GREATEREQUAL
 155: IFFALSE 376
// if factoryWaypoints [ factory ] then
 157: LD_EXP 70
 161: PUSH
 162: LD_VAR 0 2
 166: ARRAY
 167: IFFALSE 376
// begin if GetControl ( vehicle ) = control_manual then
 169: LD_VAR 0 1
 173: PPUSH
 174: CALL_OW 263
 178: PUSH
 179: LD_INT 1
 181: EQUAL
 182: IFFALSE 263
// begin driver := IsDrivenBy ( vehicle ) ;
 184: LD_ADDR_VAR 0 4
 188: PUSH
 189: LD_VAR 0 1
 193: PPUSH
 194: CALL_OW 311
 198: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 199: LD_VAR 0 4
 203: PPUSH
 204: LD_EXP 70
 208: PUSH
 209: LD_VAR 0 2
 213: ARRAY
 214: PUSH
 215: LD_INT 3
 217: ARRAY
 218: PPUSH
 219: LD_EXP 70
 223: PUSH
 224: LD_VAR 0 2
 228: ARRAY
 229: PUSH
 230: LD_INT 4
 232: ARRAY
 233: PPUSH
 234: CALL_OW 171
// AddComExitVehicle ( driver ) ;
 238: LD_VAR 0 4
 242: PPUSH
 243: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
 247: LD_VAR 0 4
 251: PPUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 180
// end else
 261: GO 376
// if GetControl ( vehicle ) = control_remote then
 263: LD_VAR 0 1
 267: PPUSH
 268: CALL_OW 263
 272: PUSH
 273: LD_INT 2
 275: EQUAL
 276: IFFALSE 337
// begin wait ( 0 0$2 ) ;
 278: LD_INT 70
 280: PPUSH
 281: CALL_OW 67
// if Connect ( vehicle ) then
 285: LD_VAR 0 1
 289: PPUSH
 290: CALL 28036 0 1
 294: IFFALSE 335
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 296: LD_VAR 0 1
 300: PPUSH
 301: LD_EXP 70
 305: PUSH
 306: LD_VAR 0 2
 310: ARRAY
 311: PUSH
 312: LD_INT 3
 314: ARRAY
 315: PPUSH
 316: LD_EXP 70
 320: PUSH
 321: LD_VAR 0 2
 325: ARRAY
 326: PUSH
 327: LD_INT 4
 329: ARRAY
 330: PPUSH
 331: CALL_OW 171
// end else
 335: GO 376
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 337: LD_VAR 0 1
 341: PPUSH
 342: LD_EXP 70
 346: PUSH
 347: LD_VAR 0 2
 351: ARRAY
 352: PUSH
 353: LD_INT 3
 355: ARRAY
 356: PPUSH
 357: LD_EXP 70
 361: PUSH
 362: LD_VAR 0 2
 366: ARRAY
 367: PUSH
 368: LD_INT 4
 370: ARRAY
 371: PPUSH
 372: CALL_OW 171
// end ; end ;
 376: LD_VAR 0 3
 380: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 381: LD_INT 0
 383: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 384: LD_VAR 0 1
 388: PUSH
 389: LD_INT 250
 391: EQUAL
 392: PUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 264
 402: PUSH
 403: LD_INT 81
 405: EQUAL
 406: AND
 407: IFFALSE 428
// MinerPlaceMine ( unit , x , y ) ;
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 5
 423: PPUSH
 424: CALL 2813 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 428: LD_VAR 0 1
 432: PUSH
 433: LD_INT 251
 435: EQUAL
 436: PUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 264
 446: PUSH
 447: LD_INT 81
 449: EQUAL
 450: AND
 451: IFFALSE 472
// MinerDetonateMine ( unit , x , y ) ;
 453: LD_VAR 0 2
 457: PPUSH
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 5
 467: PPUSH
 468: CALL 3088 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 472: LD_VAR 0 1
 476: PUSH
 477: LD_INT 252
 479: EQUAL
 480: PUSH
 481: LD_VAR 0 2
 485: PPUSH
 486: CALL_OW 264
 490: PUSH
 491: LD_INT 81
 493: EQUAL
 494: AND
 495: IFFALSE 516
// MinerCreateMinefield ( unit , x , y ) ;
 497: LD_VAR 0 2
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_VAR 0 5
 511: PPUSH
 512: CALL 3505 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 516: LD_VAR 0 1
 520: PUSH
 521: LD_INT 253
 523: EQUAL
 524: PUSH
 525: LD_VAR 0 2
 529: PPUSH
 530: CALL_OW 257
 534: PUSH
 535: LD_INT 5
 537: EQUAL
 538: AND
 539: IFFALSE 560
// ComBinocular ( unit , x , y ) ;
 541: LD_VAR 0 2
 545: PPUSH
 546: LD_VAR 0 4
 550: PPUSH
 551: LD_VAR 0 5
 555: PPUSH
 556: CALL 3874 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 560: LD_VAR 0 1
 564: PUSH
 565: LD_INT 254
 567: EQUAL
 568: PUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 264
 578: PUSH
 579: LD_INT 99
 581: EQUAL
 582: AND
 583: PUSH
 584: LD_VAR 0 3
 588: PPUSH
 589: CALL_OW 263
 593: PUSH
 594: LD_INT 3
 596: EQUAL
 597: AND
 598: IFFALSE 614
// HackDestroyVehicle ( unit , selectedUnit ) ;
 600: LD_VAR 0 2
 604: PPUSH
 605: LD_VAR 0 3
 609: PPUSH
 610: CALL 2177 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 614: LD_VAR 0 1
 618: PUSH
 619: LD_INT 255
 621: EQUAL
 622: PUSH
 623: LD_VAR 0 2
 627: PPUSH
 628: CALL_OW 264
 632: PUSH
 633: LD_INT 14
 635: PUSH
 636: LD_INT 53
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: IN
 643: AND
 644: PUSH
 645: LD_VAR 0 4
 649: PPUSH
 650: LD_VAR 0 5
 654: PPUSH
 655: CALL_OW 488
 659: AND
 660: IFFALSE 684
// CutTreeXYR ( unit , x , y , 12 ) ;
 662: LD_VAR 0 2
 666: PPUSH
 667: LD_VAR 0 4
 671: PPUSH
 672: LD_VAR 0 5
 676: PPUSH
 677: LD_INT 12
 679: PPUSH
 680: CALL 747 0 4
// if cmd = 256 then
 684: LD_VAR 0 1
 688: PUSH
 689: LD_INT 256
 691: EQUAL
 692: IFFALSE 713
// SetFactoryWaypoint ( unit , x , y ) ;
 694: LD_VAR 0 2
 698: PPUSH
 699: LD_VAR 0 4
 703: PPUSH
 704: LD_VAR 0 5
 708: PPUSH
 709: CALL 18785 0 3
// if cmd = 257 then
 713: LD_VAR 0 1
 717: PUSH
 718: LD_INT 257
 720: EQUAL
 721: IFFALSE 742
// SetWarehouseGatheringPoint ( unit , x , y ) ;
 723: LD_VAR 0 2
 727: PPUSH
 728: LD_VAR 0 4
 732: PPUSH
 733: LD_VAR 0 5
 737: PPUSH
 738: CALL 19147 0 3
// end ;
 742: LD_VAR 0 6
 746: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 747: LD_INT 0
 749: PPUSH
 750: PPUSH
 751: PPUSH
 752: PPUSH
 753: PPUSH
 754: PPUSH
 755: PPUSH
 756: PPUSH
 757: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 758: LD_VAR 0 1
 762: NOT
 763: PUSH
 764: LD_VAR 0 2
 768: PPUSH
 769: LD_VAR 0 3
 773: PPUSH
 774: CALL_OW 488
 778: NOT
 779: OR
 780: PUSH
 781: LD_VAR 0 4
 785: NOT
 786: OR
 787: IFFALSE 791
// exit ;
 789: GO 1131
// list := [ ] ;
 791: LD_ADDR_VAR 0 13
 795: PUSH
 796: EMPTY
 797: ST_TO_ADDR
// if x - r < 0 then
 798: LD_VAR 0 2
 802: PUSH
 803: LD_VAR 0 4
 807: MINUS
 808: PUSH
 809: LD_INT 0
 811: LESS
 812: IFFALSE 824
// min_x := 0 else
 814: LD_ADDR_VAR 0 7
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
 822: GO 840
// min_x := x - r ;
 824: LD_ADDR_VAR 0 7
 828: PUSH
 829: LD_VAR 0 2
 833: PUSH
 834: LD_VAR 0 4
 838: MINUS
 839: ST_TO_ADDR
// if y - r < 0 then
 840: LD_VAR 0 3
 844: PUSH
 845: LD_VAR 0 4
 849: MINUS
 850: PUSH
 851: LD_INT 0
 853: LESS
 854: IFFALSE 866
// min_y := 0 else
 856: LD_ADDR_VAR 0 8
 860: PUSH
 861: LD_INT 0
 863: ST_TO_ADDR
 864: GO 882
// min_y := y - r ;
 866: LD_ADDR_VAR 0 8
 870: PUSH
 871: LD_VAR 0 3
 875: PUSH
 876: LD_VAR 0 4
 880: MINUS
 881: ST_TO_ADDR
// max_x := x + r ;
 882: LD_ADDR_VAR 0 9
 886: PUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_VAR 0 4
 896: PLUS
 897: ST_TO_ADDR
// max_y := y + r ;
 898: LD_ADDR_VAR 0 10
 902: PUSH
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 4
 912: PLUS
 913: ST_TO_ADDR
// for _x = min_x to max_x do
 914: LD_ADDR_VAR 0 11
 918: PUSH
 919: DOUBLE
 920: LD_VAR 0 7
 924: DEC
 925: ST_TO_ADDR
 926: LD_VAR 0 9
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1049
// for _y = min_y to max_y do
 934: LD_ADDR_VAR 0 12
 938: PUSH
 939: DOUBLE
 940: LD_VAR 0 8
 944: DEC
 945: ST_TO_ADDR
 946: LD_VAR 0 10
 950: PUSH
 951: FOR_TO
 952: IFFALSE 1045
// begin if not ValidHex ( _x , _y ) then
 954: LD_VAR 0 11
 958: PPUSH
 959: LD_VAR 0 12
 963: PPUSH
 964: CALL_OW 488
 968: NOT
 969: IFFALSE 973
// continue ;
 971: GO 951
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 973: LD_VAR 0 11
 977: PPUSH
 978: LD_VAR 0 12
 982: PPUSH
 983: CALL_OW 351
 987: PUSH
 988: LD_VAR 0 11
 992: PPUSH
 993: LD_VAR 0 12
 997: PPUSH
 998: CALL_OW 554
1002: AND
1003: IFFALSE 1043
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
1005: LD_ADDR_VAR 0 13
1009: PUSH
1010: LD_VAR 0 13
1014: PPUSH
1015: LD_VAR 0 13
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: PPUSH
1024: LD_VAR 0 11
1028: PUSH
1029: LD_VAR 0 12
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 2
1042: ST_TO_ADDR
// end ;
1043: GO 951
1045: POP
1046: POP
1047: GO 931
1049: POP
1050: POP
// if not list then
1051: LD_VAR 0 13
1055: NOT
1056: IFFALSE 1060
// exit ;
1058: GO 1131
// for i in list do
1060: LD_ADDR_VAR 0 6
1064: PUSH
1065: LD_VAR 0 13
1069: PUSH
1070: FOR_IN
1071: IFFALSE 1129
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
1073: LD_VAR 0 1
1077: PPUSH
1078: LD_STRING M
1080: PUSH
1081: LD_VAR 0 6
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PUSH
1090: LD_VAR 0 6
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PUSH
1099: LD_INT 0
1101: PUSH
1102: LD_INT 0
1104: PUSH
1105: LD_INT 0
1107: PUSH
1108: LD_INT 0
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: PPUSH
1123: CALL_OW 447
1127: GO 1070
1129: POP
1130: POP
// end ;
1131: LD_VAR 0 5
1135: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
1136: LD_EXP 1
1140: NOT
1141: IFFALSE 1191
1143: GO 1145
1145: DISABLE
// begin initHack := true ;
1146: LD_ADDR_EXP 1
1150: PUSH
1151: LD_INT 1
1153: ST_TO_ADDR
// hackTanks := [ ] ;
1154: LD_ADDR_EXP 2
1158: PUSH
1159: EMPTY
1160: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
1161: LD_ADDR_EXP 3
1165: PUSH
1166: EMPTY
1167: ST_TO_ADDR
// hackLimit := 3 ;
1168: LD_ADDR_EXP 4
1172: PUSH
1173: LD_INT 3
1175: ST_TO_ADDR
// hackDist := 12 ;
1176: LD_ADDR_EXP 5
1180: PUSH
1181: LD_INT 12
1183: ST_TO_ADDR
// hackCounter := [ ] ;
1184: LD_ADDR_EXP 6
1188: PUSH
1189: EMPTY
1190: ST_TO_ADDR
// end ;
1191: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
1192: LD_EXP 1
1196: PUSH
1197: LD_INT 34
1199: PUSH
1200: LD_INT 99
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PPUSH
1207: CALL_OW 69
1211: AND
1212: IFFALSE 1465
1214: GO 1216
1216: DISABLE
1217: LD_INT 0
1219: PPUSH
1220: PPUSH
// begin enable ;
1221: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
1222: LD_ADDR_VAR 0 1
1226: PUSH
1227: LD_INT 34
1229: PUSH
1230: LD_INT 99
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 69
1241: PUSH
1242: FOR_IN
1243: IFFALSE 1463
// begin if not i in hackTanks then
1245: LD_VAR 0 1
1249: PUSH
1250: LD_EXP 2
1254: IN
1255: NOT
1256: IFFALSE 1339
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
1258: LD_ADDR_EXP 2
1262: PUSH
1263: LD_EXP 2
1267: PPUSH
1268: LD_EXP 2
1272: PUSH
1273: LD_INT 1
1275: PLUS
1276: PPUSH
1277: LD_VAR 0 1
1281: PPUSH
1282: CALL_OW 1
1286: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_EXP 3
1296: PPUSH
1297: LD_EXP 3
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: PPUSH
1306: EMPTY
1307: PPUSH
1308: CALL_OW 1
1312: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1313: LD_ADDR_EXP 6
1317: PUSH
1318: LD_EXP 6
1322: PPUSH
1323: LD_EXP 6
1327: PUSH
1328: LD_INT 1
1330: PLUS
1331: PPUSH
1332: EMPTY
1333: PPUSH
1334: CALL_OW 1
1338: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1339: LD_VAR 0 1
1343: PPUSH
1344: CALL_OW 302
1348: NOT
1349: IFFALSE 1362
// begin HackUnlinkAll ( i ) ;
1351: LD_VAR 0 1
1355: PPUSH
1356: CALL 1468 0 1
// continue ;
1360: GO 1242
// end ; HackCheckCapturedStatus ( i ) ;
1362: LD_VAR 0 1
1366: PPUSH
1367: CALL 1911 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1371: LD_ADDR_VAR 0 2
1375: PUSH
1376: LD_INT 81
1378: PUSH
1379: LD_VAR 0 1
1383: PPUSH
1384: CALL_OW 255
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 33
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 91
1405: PUSH
1406: LD_VAR 0 1
1410: PUSH
1411: LD_EXP 5
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 50
1423: PUSH
1424: EMPTY
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: PPUSH
1433: CALL_OW 69
1437: ST_TO_ADDR
// if not tmp then
1438: LD_VAR 0 2
1442: NOT
1443: IFFALSE 1447
// continue ;
1445: GO 1242
// HackLink ( i , tmp ) ;
1447: LD_VAR 0 1
1451: PPUSH
1452: LD_VAR 0 2
1456: PPUSH
1457: CALL 1604 0 2
// end ;
1461: GO 1242
1463: POP
1464: POP
// end ;
1465: PPOPN 2
1467: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
// if not hack in hackTanks then
1473: LD_VAR 0 1
1477: PUSH
1478: LD_EXP 2
1482: IN
1483: NOT
1484: IFFALSE 1488
// exit ;
1486: GO 1599
// index := GetElementIndex ( hackTanks , hack ) ;
1488: LD_ADDR_VAR 0 4
1492: PUSH
1493: LD_EXP 2
1497: PPUSH
1498: LD_VAR 0 1
1502: PPUSH
1503: CALL 24843 0 2
1507: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1508: LD_EXP 3
1512: PUSH
1513: LD_VAR 0 4
1517: ARRAY
1518: IFFALSE 1599
// begin for i in hackTanksCaptured [ index ] do
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: LD_EXP 3
1529: PUSH
1530: LD_VAR 0 4
1534: ARRAY
1535: PUSH
1536: FOR_IN
1537: IFFALSE 1563
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1539: LD_VAR 0 3
1543: PUSH
1544: LD_INT 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 3
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PPUSH
1557: CALL_OW 235
1561: GO 1536
1563: POP
1564: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1565: LD_ADDR_EXP 3
1569: PUSH
1570: LD_EXP 3
1574: PPUSH
1575: LD_VAR 0 4
1579: PPUSH
1580: EMPTY
1581: PPUSH
1582: CALL_OW 1
1586: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1587: LD_VAR 0 1
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 505
// end ; end ;
1599: LD_VAR 0 2
1603: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
// if not hack in hackTanks or not vehicles then
1609: LD_VAR 0 1
1613: PUSH
1614: LD_EXP 2
1618: IN
1619: NOT
1620: PUSH
1621: LD_VAR 0 2
1625: NOT
1626: OR
1627: IFFALSE 1631
// exit ;
1629: GO 1906
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: LD_VAR 0 1
1640: PPUSH
1641: LD_VAR 0 2
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: LD_INT 1
1651: PPUSH
1652: CALL 25493 0 4
1656: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_EXP 2
1666: PPUSH
1667: LD_VAR 0 1
1671: PPUSH
1672: CALL 24843 0 2
1676: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1677: LD_EXP 3
1681: PUSH
1682: LD_VAR 0 5
1686: ARRAY
1687: PUSH
1688: LD_EXP 4
1692: LESS
1693: IFFALSE 1882
// begin for i := 1 to vehicles do
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: DOUBLE
1701: LD_INT 1
1703: DEC
1704: ST_TO_ADDR
1705: LD_VAR 0 2
1709: PUSH
1710: FOR_TO
1711: IFFALSE 1880
// begin if hackTanksCaptured [ index ] = hackLimit then
1713: LD_EXP 3
1717: PUSH
1718: LD_VAR 0 5
1722: ARRAY
1723: PUSH
1724: LD_EXP 4
1728: EQUAL
1729: IFFALSE 1733
// break ;
1731: GO 1880
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1733: LD_ADDR_EXP 6
1737: PUSH
1738: LD_EXP 6
1742: PPUSH
1743: LD_VAR 0 5
1747: PPUSH
1748: LD_EXP 6
1752: PUSH
1753: LD_VAR 0 5
1757: ARRAY
1758: PUSH
1759: LD_INT 1
1761: PLUS
1762: PPUSH
1763: CALL_OW 1
1767: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1768: LD_ADDR_EXP 3
1772: PUSH
1773: LD_EXP 3
1777: PPUSH
1778: LD_VAR 0 5
1782: PUSH
1783: LD_EXP 3
1787: PUSH
1788: LD_VAR 0 5
1792: ARRAY
1793: PUSH
1794: LD_INT 1
1796: PLUS
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: LD_VAR 0 2
1806: PUSH
1807: LD_VAR 0 4
1811: ARRAY
1812: PUSH
1813: LD_VAR 0 2
1817: PUSH
1818: LD_VAR 0 4
1822: ARRAY
1823: PPUSH
1824: CALL_OW 255
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PPUSH
1833: CALL 25058 0 3
1837: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1838: LD_VAR 0 2
1842: PUSH
1843: LD_VAR 0 4
1847: ARRAY
1848: PPUSH
1849: LD_VAR 0 1
1853: PPUSH
1854: CALL_OW 255
1858: PPUSH
1859: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1863: LD_VAR 0 2
1867: PUSH
1868: LD_VAR 0 4
1872: ARRAY
1873: PPUSH
1874: CALL_OW 141
// end ;
1878: GO 1710
1880: POP
1881: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1882: LD_VAR 0 1
1886: PPUSH
1887: LD_EXP 3
1891: PUSH
1892: LD_VAR 0 5
1896: ARRAY
1897: PUSH
1898: LD_INT 0
1900: PLUS
1901: PPUSH
1902: CALL_OW 505
// end ;
1906: LD_VAR 0 3
1910: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
// if not hack in hackTanks then
1917: LD_VAR 0 1
1921: PUSH
1922: LD_EXP 2
1926: IN
1927: NOT
1928: IFFALSE 1932
// exit ;
1930: GO 2172
// index := GetElementIndex ( hackTanks , hack ) ;
1932: LD_ADDR_VAR 0 4
1936: PUSH
1937: LD_EXP 2
1941: PPUSH
1942: LD_VAR 0 1
1946: PPUSH
1947: CALL 24843 0 2
1951: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: DOUBLE
1958: LD_EXP 3
1962: PUSH
1963: LD_VAR 0 4
1967: ARRAY
1968: INC
1969: ST_TO_ADDR
1970: LD_INT 1
1972: PUSH
1973: FOR_DOWNTO
1974: IFFALSE 2146
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1976: LD_ADDR_VAR 0 5
1980: PUSH
1981: LD_EXP 3
1985: PUSH
1986: LD_VAR 0 4
1990: ARRAY
1991: PUSH
1992: LD_VAR 0 3
1996: ARRAY
1997: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1998: LD_VAR 0 5
2002: PUSH
2003: LD_INT 1
2005: ARRAY
2006: PPUSH
2007: CALL_OW 302
2011: NOT
2012: PUSH
2013: LD_VAR 0 5
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: CALL_OW 255
2026: PUSH
2027: LD_VAR 0 1
2031: PPUSH
2032: CALL_OW 255
2036: NONEQUAL
2037: OR
2038: IFFALSE 2144
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
2040: LD_VAR 0 5
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PPUSH
2049: CALL_OW 305
2053: PUSH
2054: LD_VAR 0 5
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PPUSH
2063: CALL_OW 255
2067: PUSH
2068: LD_VAR 0 1
2072: PPUSH
2073: CALL_OW 255
2077: EQUAL
2078: AND
2079: IFFALSE 2103
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
2081: LD_VAR 0 5
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: PPUSH
2090: LD_VAR 0 5
2094: PUSH
2095: LD_INT 2
2097: ARRAY
2098: PPUSH
2099: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
2103: LD_ADDR_EXP 3
2107: PUSH
2108: LD_EXP 3
2112: PPUSH
2113: LD_VAR 0 4
2117: PPUSH
2118: LD_EXP 3
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 3
2133: PPUSH
2134: CALL_OW 3
2138: PPUSH
2139: CALL_OW 1
2143: ST_TO_ADDR
// end ; end ;
2144: GO 1973
2146: POP
2147: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_EXP 3
2157: PUSH
2158: LD_VAR 0 4
2162: ARRAY
2163: PUSH
2164: LD_INT 0
2166: PLUS
2167: PPUSH
2168: CALL_OW 505
// end ;
2172: LD_VAR 0 2
2176: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// if not hack in hackTanks then
2183: LD_VAR 0 1
2187: PUSH
2188: LD_EXP 2
2192: IN
2193: NOT
2194: IFFALSE 2198
// exit ;
2196: GO 2283
// index := GetElementIndex ( hackTanks , hack ) ;
2198: LD_ADDR_VAR 0 5
2202: PUSH
2203: LD_EXP 2
2207: PPUSH
2208: LD_VAR 0 1
2212: PPUSH
2213: CALL 24843 0 2
2217: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_EXP 3
2232: PUSH
2233: LD_VAR 0 5
2237: ARRAY
2238: PUSH
2239: FOR_TO
2240: IFFALSE 2281
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
2242: LD_EXP 3
2246: PUSH
2247: LD_VAR 0 5
2251: ARRAY
2252: PUSH
2253: LD_VAR 0 4
2257: ARRAY
2258: PUSH
2259: LD_INT 1
2261: ARRAY
2262: PUSH
2263: LD_VAR 0 2
2267: EQUAL
2268: IFFALSE 2279
// KillUnit ( vehicle ) ;
2270: LD_VAR 0 2
2274: PPUSH
2275: CALL_OW 66
2279: GO 2239
2281: POP
2282: POP
// end ;
2283: LD_VAR 0 3
2287: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
2288: LD_EXP 7
2292: NOT
2293: IFFALSE 2328
2295: GO 2297
2297: DISABLE
// begin initMiner := true ;
2298: LD_ADDR_EXP 7
2302: PUSH
2303: LD_INT 1
2305: ST_TO_ADDR
// minersList := [ ] ;
2306: LD_ADDR_EXP 8
2310: PUSH
2311: EMPTY
2312: ST_TO_ADDR
// minerMinesList := [ ] ;
2313: LD_ADDR_EXP 9
2317: PUSH
2318: EMPTY
2319: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2320: LD_ADDR_EXP 10
2324: PUSH
2325: LD_INT 5
2327: ST_TO_ADDR
// end ;
2328: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2329: LD_EXP 7
2333: PUSH
2334: LD_INT 34
2336: PUSH
2337: LD_INT 81
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PPUSH
2344: CALL_OW 69
2348: AND
2349: IFFALSE 2810
2351: GO 2353
2353: DISABLE
2354: LD_INT 0
2356: PPUSH
2357: PPUSH
2358: PPUSH
2359: PPUSH
// begin enable ;
2360: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2361: LD_ADDR_VAR 0 1
2365: PUSH
2366: LD_INT 34
2368: PUSH
2369: LD_INT 81
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: FOR_IN
2382: IFFALSE 2454
// begin if not i in minersList then
2384: LD_VAR 0 1
2388: PUSH
2389: LD_EXP 8
2393: IN
2394: NOT
2395: IFFALSE 2452
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2397: LD_ADDR_EXP 8
2401: PUSH
2402: LD_EXP 8
2406: PPUSH
2407: LD_EXP 8
2411: PUSH
2412: LD_INT 1
2414: PLUS
2415: PPUSH
2416: LD_VAR 0 1
2420: PPUSH
2421: CALL_OW 1
2425: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2426: LD_ADDR_EXP 9
2430: PUSH
2431: LD_EXP 9
2435: PPUSH
2436: LD_EXP 9
2440: PUSH
2441: LD_INT 1
2443: PLUS
2444: PPUSH
2445: EMPTY
2446: PPUSH
2447: CALL_OW 1
2451: ST_TO_ADDR
// end end ;
2452: GO 2381
2454: POP
2455: POP
// for i := minerMinesList downto 1 do
2456: LD_ADDR_VAR 0 1
2460: PUSH
2461: DOUBLE
2462: LD_EXP 9
2466: INC
2467: ST_TO_ADDR
2468: LD_INT 1
2470: PUSH
2471: FOR_DOWNTO
2472: IFFALSE 2808
// begin if IsLive ( minersList [ i ] ) then
2474: LD_EXP 8
2478: PUSH
2479: LD_VAR 0 1
2483: ARRAY
2484: PPUSH
2485: CALL_OW 300
2489: IFFALSE 2517
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2491: LD_EXP 8
2495: PUSH
2496: LD_VAR 0 1
2500: ARRAY
2501: PPUSH
2502: LD_EXP 9
2506: PUSH
2507: LD_VAR 0 1
2511: ARRAY
2512: PPUSH
2513: CALL_OW 505
// if not minerMinesList [ i ] then
2517: LD_EXP 9
2521: PUSH
2522: LD_VAR 0 1
2526: ARRAY
2527: NOT
2528: IFFALSE 2532
// continue ;
2530: GO 2471
// for j := minerMinesList [ i ] downto 1 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_EXP 9
2542: PUSH
2543: LD_VAR 0 1
2547: ARRAY
2548: INC
2549: ST_TO_ADDR
2550: LD_INT 1
2552: PUSH
2553: FOR_DOWNTO
2554: IFFALSE 2804
// begin side := GetSide ( minersList [ i ] ) ;
2556: LD_ADDR_VAR 0 3
2560: PUSH
2561: LD_EXP 8
2565: PUSH
2566: LD_VAR 0 1
2570: ARRAY
2571: PPUSH
2572: CALL_OW 255
2576: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: LD_EXP 9
2586: PUSH
2587: LD_VAR 0 1
2591: ARRAY
2592: PUSH
2593: LD_VAR 0 2
2597: ARRAY
2598: PUSH
2599: LD_INT 1
2601: ARRAY
2602: PPUSH
2603: LD_EXP 9
2607: PUSH
2608: LD_VAR 0 1
2612: ARRAY
2613: PUSH
2614: LD_VAR 0 2
2618: ARRAY
2619: PUSH
2620: LD_INT 2
2622: ARRAY
2623: PPUSH
2624: CALL_OW 428
2628: ST_TO_ADDR
// if not tmp then
2629: LD_VAR 0 4
2633: NOT
2634: IFFALSE 2638
// continue ;
2636: GO 2553
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2638: LD_VAR 0 4
2642: PUSH
2643: LD_INT 81
2645: PUSH
2646: LD_VAR 0 3
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PPUSH
2655: CALL_OW 69
2659: IN
2660: PUSH
2661: LD_EXP 9
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PPUSH
2682: LD_EXP 9
2686: PUSH
2687: LD_VAR 0 1
2691: ARRAY
2692: PUSH
2693: LD_VAR 0 2
2697: ARRAY
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PPUSH
2703: CALL_OW 458
2707: AND
2708: IFFALSE 2802
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
2710: LD_EXP 9
2714: PUSH
2715: LD_VAR 0 1
2719: ARRAY
2720: PUSH
2721: LD_VAR 0 2
2725: ARRAY
2726: PUSH
2727: LD_INT 1
2729: ARRAY
2730: PPUSH
2731: LD_EXP 9
2735: PUSH
2736: LD_VAR 0 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 3
2756: PPUSH
2757: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
2761: LD_ADDR_EXP 9
2765: PUSH
2766: LD_EXP 9
2770: PPUSH
2771: LD_VAR 0 1
2775: PPUSH
2776: LD_EXP 9
2780: PUSH
2781: LD_VAR 0 1
2785: ARRAY
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: CALL_OW 3
2796: PPUSH
2797: CALL_OW 1
2801: ST_TO_ADDR
// end ; end ;
2802: GO 2553
2804: POP
2805: POP
// end ;
2806: GO 2471
2808: POP
2809: POP
// end ;
2810: PPOPN 4
2812: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
2813: LD_INT 0
2815: PPUSH
2816: PPUSH
// result := false ;
2817: LD_ADDR_VAR 0 4
2821: PUSH
2822: LD_INT 0
2824: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
2825: LD_VAR 0 1
2829: PPUSH
2830: CALL_OW 264
2834: PUSH
2835: LD_INT 81
2837: EQUAL
2838: NOT
2839: IFFALSE 2843
// exit ;
2841: GO 3083
// index := GetElementIndex ( minersList , unit ) ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_EXP 8
2852: PPUSH
2853: LD_VAR 0 1
2857: PPUSH
2858: CALL 24843 0 2
2862: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
2863: LD_EXP 9
2867: PUSH
2868: LD_VAR 0 5
2872: ARRAY
2873: PUSH
2874: LD_EXP 10
2878: GREATEREQUAL
2879: IFFALSE 2883
// exit ;
2881: GO 3083
// ComMoveXY ( unit , x , y ) ;
2883: LD_VAR 0 1
2887: PPUSH
2888: LD_VAR 0 2
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2902: LD_INT 35
2904: PPUSH
2905: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
2909: LD_VAR 0 1
2913: PPUSH
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_VAR 0 3
2923: PPUSH
2924: CALL 56227 0 3
2928: NOT
2929: PUSH
2930: LD_VAR 0 1
2934: PPUSH
2935: CALL_OW 314
2939: AND
2940: IFFALSE 2944
// exit ;
2942: GO 3083
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_VAR 0 3
2953: PPUSH
2954: CALL_OW 428
2958: PUSH
2959: LD_VAR 0 1
2963: EQUAL
2964: PUSH
2965: LD_VAR 0 1
2969: PPUSH
2970: CALL_OW 314
2974: NOT
2975: AND
2976: IFFALSE 2902
// PlaySoundXY ( x , y , PlantMine ) ;
2978: LD_VAR 0 2
2982: PPUSH
2983: LD_VAR 0 3
2987: PPUSH
2988: LD_STRING PlantMine
2990: PPUSH
2991: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_VAR 0 1
3009: PPUSH
3010: CALL_OW 255
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
3022: LD_ADDR_EXP 9
3026: PUSH
3027: LD_EXP 9
3031: PPUSH
3032: LD_VAR 0 5
3036: PUSH
3037: LD_EXP 9
3041: PUSH
3042: LD_VAR 0 5
3046: ARRAY
3047: PUSH
3048: LD_INT 1
3050: PLUS
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PPUSH
3056: LD_VAR 0 2
3060: PUSH
3061: LD_VAR 0 3
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL 25058 0 3
3074: ST_TO_ADDR
// result := true ;
3075: LD_ADDR_VAR 0 4
3079: PUSH
3080: LD_INT 1
3082: ST_TO_ADDR
// end ;
3083: LD_VAR 0 4
3087: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
// if not unit in minersList then
3093: LD_VAR 0 1
3097: PUSH
3098: LD_EXP 8
3102: IN
3103: NOT
3104: IFFALSE 3108
// exit ;
3106: GO 3500
// index := GetElementIndex ( minersList , unit ) ;
3108: LD_ADDR_VAR 0 6
3112: PUSH
3113: LD_EXP 8
3117: PPUSH
3118: LD_VAR 0 1
3122: PPUSH
3123: CALL 24843 0 2
3127: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
3128: LD_ADDR_VAR 0 5
3132: PUSH
3133: DOUBLE
3134: LD_EXP 9
3138: PUSH
3139: LD_VAR 0 6
3143: ARRAY
3144: INC
3145: ST_TO_ADDR
3146: LD_INT 1
3148: PUSH
3149: FOR_DOWNTO
3150: IFFALSE 3311
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
3152: LD_EXP 9
3156: PUSH
3157: LD_VAR 0 6
3161: ARRAY
3162: PUSH
3163: LD_VAR 0 5
3167: ARRAY
3168: PUSH
3169: LD_INT 1
3171: ARRAY
3172: PUSH
3173: LD_VAR 0 2
3177: EQUAL
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_VAR 0 6
3188: ARRAY
3189: PUSH
3190: LD_VAR 0 5
3194: ARRAY
3195: PUSH
3196: LD_INT 2
3198: ARRAY
3199: PUSH
3200: LD_VAR 0 3
3204: EQUAL
3205: AND
3206: IFFALSE 3309
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3208: LD_EXP 9
3212: PUSH
3213: LD_VAR 0 6
3217: ARRAY
3218: PUSH
3219: LD_VAR 0 5
3223: ARRAY
3224: PUSH
3225: LD_INT 1
3227: ARRAY
3228: PPUSH
3229: LD_EXP 9
3233: PUSH
3234: LD_VAR 0 6
3238: ARRAY
3239: PUSH
3240: LD_VAR 0 5
3244: ARRAY
3245: PUSH
3246: LD_INT 2
3248: ARRAY
3249: PPUSH
3250: LD_VAR 0 1
3254: PPUSH
3255: CALL_OW 255
3259: PPUSH
3260: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3264: LD_ADDR_EXP 9
3268: PUSH
3269: LD_EXP 9
3273: PPUSH
3274: LD_VAR 0 6
3278: PPUSH
3279: LD_EXP 9
3283: PUSH
3284: LD_VAR 0 6
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 5
3294: PPUSH
3295: CALL_OW 3
3299: PPUSH
3300: CALL_OW 1
3304: ST_TO_ADDR
// exit ;
3305: POP
3306: POP
3307: GO 3500
// end ; end ;
3309: GO 3149
3311: POP
3312: POP
// for i := minerMinesList [ index ] downto 1 do
3313: LD_ADDR_VAR 0 5
3317: PUSH
3318: DOUBLE
3319: LD_EXP 9
3323: PUSH
3324: LD_VAR 0 6
3328: ARRAY
3329: INC
3330: ST_TO_ADDR
3331: LD_INT 1
3333: PUSH
3334: FOR_DOWNTO
3335: IFFALSE 3498
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3337: LD_EXP 9
3341: PUSH
3342: LD_VAR 0 6
3346: ARRAY
3347: PUSH
3348: LD_VAR 0 5
3352: ARRAY
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: PPUSH
3358: LD_EXP 9
3362: PUSH
3363: LD_VAR 0 6
3367: ARRAY
3368: PUSH
3369: LD_VAR 0 5
3373: ARRAY
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 2
3383: PPUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 298
3393: PUSH
3394: LD_INT 6
3396: LESS
3397: IFFALSE 3496
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3399: LD_EXP 9
3403: PUSH
3404: LD_VAR 0 6
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 5
3414: ARRAY
3415: PUSH
3416: LD_INT 1
3418: ARRAY
3419: PPUSH
3420: LD_EXP 9
3424: PUSH
3425: LD_VAR 0 6
3429: ARRAY
3430: PUSH
3431: LD_VAR 0 5
3435: ARRAY
3436: PUSH
3437: LD_INT 2
3439: ARRAY
3440: PPUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 255
3450: PPUSH
3451: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3455: LD_ADDR_EXP 9
3459: PUSH
3460: LD_EXP 9
3464: PPUSH
3465: LD_VAR 0 6
3469: PPUSH
3470: LD_EXP 9
3474: PUSH
3475: LD_VAR 0 6
3479: ARRAY
3480: PPUSH
3481: LD_VAR 0 5
3485: PPUSH
3486: CALL_OW 3
3490: PPUSH
3491: CALL_OW 1
3495: ST_TO_ADDR
// end ; end ;
3496: GO 3334
3498: POP
3499: POP
// end ;
3500: LD_VAR 0 4
3504: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3505: LD_INT 0
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
3515: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3516: LD_VAR 0 1
3520: PPUSH
3521: CALL_OW 264
3525: PUSH
3526: LD_INT 81
3528: EQUAL
3529: NOT
3530: PUSH
3531: LD_VAR 0 1
3535: PUSH
3536: LD_EXP 8
3540: IN
3541: NOT
3542: OR
3543: IFFALSE 3547
// exit ;
3545: GO 3869
// index := GetElementIndex ( minersList , unit ) ;
3547: LD_ADDR_VAR 0 6
3551: PUSH
3552: LD_EXP 8
3556: PPUSH
3557: LD_VAR 0 1
3561: PPUSH
3562: CALL 24843 0 2
3566: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3567: LD_ADDR_VAR 0 8
3571: PUSH
3572: LD_EXP 10
3576: PUSH
3577: LD_EXP 9
3581: PUSH
3582: LD_VAR 0 6
3586: ARRAY
3587: MINUS
3588: ST_TO_ADDR
// if not minesFreeAmount then
3589: LD_VAR 0 8
3593: NOT
3594: IFFALSE 3598
// exit ;
3596: GO 3869
// tmp := [ ] ;
3598: LD_ADDR_VAR 0 7
3602: PUSH
3603: EMPTY
3604: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: DOUBLE
3611: LD_INT 1
3613: DEC
3614: ST_TO_ADDR
3615: LD_VAR 0 8
3619: PUSH
3620: FOR_TO
3621: IFFALSE 3816
// begin _d := rand ( 0 , 5 ) ;
3623: LD_ADDR_VAR 0 11
3627: PUSH
3628: LD_INT 0
3630: PPUSH
3631: LD_INT 5
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3639: LD_ADDR_VAR 0 12
3643: PUSH
3644: LD_INT 2
3646: PPUSH
3647: LD_INT 6
3649: PPUSH
3650: CALL_OW 12
3654: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
3655: LD_ADDR_VAR 0 9
3659: PUSH
3660: LD_VAR 0 2
3664: PPUSH
3665: LD_VAR 0 11
3669: PPUSH
3670: LD_VAR 0 12
3674: PPUSH
3675: CALL_OW 272
3679: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
3680: LD_ADDR_VAR 0 10
3684: PUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_VAR 0 11
3694: PPUSH
3695: LD_VAR 0 12
3699: PPUSH
3700: CALL_OW 273
3704: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
3705: LD_VAR 0 9
3709: PPUSH
3710: LD_VAR 0 10
3714: PPUSH
3715: CALL_OW 488
3719: PUSH
3720: LD_VAR 0 9
3724: PUSH
3725: LD_VAR 0 10
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: LD_VAR 0 7
3738: IN
3739: NOT
3740: AND
3741: PUSH
3742: LD_VAR 0 9
3746: PPUSH
3747: LD_VAR 0 10
3751: PPUSH
3752: CALL_OW 458
3756: NOT
3757: AND
3758: IFFALSE 3800
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
3760: LD_ADDR_VAR 0 7
3764: PUSH
3765: LD_VAR 0 7
3769: PPUSH
3770: LD_VAR 0 7
3774: PUSH
3775: LD_INT 1
3777: PLUS
3778: PPUSH
3779: LD_VAR 0 9
3783: PUSH
3784: LD_VAR 0 10
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PPUSH
3793: CALL_OW 1
3797: ST_TO_ADDR
3798: GO 3814
// i := i - 1 ;
3800: LD_ADDR_VAR 0 5
3804: PUSH
3805: LD_VAR 0 5
3809: PUSH
3810: LD_INT 1
3812: MINUS
3813: ST_TO_ADDR
// end ;
3814: GO 3620
3816: POP
3817: POP
// for i in tmp do
3818: LD_ADDR_VAR 0 5
3822: PUSH
3823: LD_VAR 0 7
3827: PUSH
3828: FOR_IN
3829: IFFALSE 3867
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
3831: LD_VAR 0 1
3835: PPUSH
3836: LD_VAR 0 5
3840: PUSH
3841: LD_INT 1
3843: ARRAY
3844: PPUSH
3845: LD_VAR 0 5
3849: PUSH
3850: LD_INT 2
3852: ARRAY
3853: PPUSH
3854: CALL 2813 0 3
3858: NOT
3859: IFFALSE 3865
// exit ;
3861: POP
3862: POP
3863: GO 3869
3865: GO 3828
3867: POP
3868: POP
// end ;
3869: LD_VAR 0 4
3873: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
3874: LD_INT 0
3876: PPUSH
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
3881: PPUSH
3882: PPUSH
// if not GetClass ( unit ) = class_sniper then
3883: LD_VAR 0 1
3887: PPUSH
3888: CALL_OW 257
3892: PUSH
3893: LD_INT 5
3895: EQUAL
3896: NOT
3897: IFFALSE 3901
// exit ;
3899: GO 4289
// dist := 8 ;
3901: LD_ADDR_VAR 0 5
3905: PUSH
3906: LD_INT 8
3908: ST_TO_ADDR
// viewRange := 12 ;
3909: LD_ADDR_VAR 0 7
3913: PUSH
3914: LD_INT 12
3916: ST_TO_ADDR
// side := GetSide ( unit ) ;
3917: LD_ADDR_VAR 0 6
3921: PUSH
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 255
3931: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
3932: LD_INT 61
3934: PPUSH
3935: LD_VAR 0 6
3939: PPUSH
3940: CALL_OW 321
3944: PUSH
3945: LD_INT 2
3947: EQUAL
3948: IFFALSE 3958
// viewRange := 16 ;
3950: LD_ADDR_VAR 0 7
3954: PUSH
3955: LD_INT 16
3957: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_VAR 0 2
3967: PPUSH
3968: LD_VAR 0 3
3972: PPUSH
3973: CALL_OW 297
3977: PUSH
3978: LD_VAR 0 5
3982: GREATER
3983: IFFALSE 4062
// begin ComMoveXY ( unit , x , y ) ;
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_VAR 0 2
3994: PPUSH
3995: LD_VAR 0 3
3999: PPUSH
4000: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4004: LD_INT 35
4006: PPUSH
4007: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
4011: LD_VAR 0 1
4015: PPUSH
4016: LD_VAR 0 2
4020: PPUSH
4021: LD_VAR 0 3
4025: PPUSH
4026: CALL 56227 0 3
4030: NOT
4031: IFFALSE 4035
// exit ;
4033: GO 4289
// until GetDistUnitXY ( unit , x , y ) < dist ;
4035: LD_VAR 0 1
4039: PPUSH
4040: LD_VAR 0 2
4044: PPUSH
4045: LD_VAR 0 3
4049: PPUSH
4050: CALL_OW 297
4054: PUSH
4055: LD_VAR 0 5
4059: LESS
4060: IFFALSE 4004
// end ; ComTurnXY ( unit , x , y ) ;
4062: LD_VAR 0 1
4066: PPUSH
4067: LD_VAR 0 2
4071: PPUSH
4072: LD_VAR 0 3
4076: PPUSH
4077: CALL_OW 118
// wait ( 5 ) ;
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 67
// _d := GetDir ( unit ) ;
4088: LD_ADDR_VAR 0 10
4092: PUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 254
4102: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
4103: LD_ADDR_VAR 0 8
4107: PUSH
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 250
4117: PPUSH
4118: LD_VAR 0 10
4122: PPUSH
4123: LD_VAR 0 5
4127: PPUSH
4128: CALL_OW 272
4132: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
4133: LD_ADDR_VAR 0 9
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: CALL_OW 251
4147: PPUSH
4148: LD_VAR 0 10
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: CALL_OW 273
4162: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4163: LD_VAR 0 8
4167: PPUSH
4168: LD_VAR 0 9
4172: PPUSH
4173: CALL_OW 488
4177: NOT
4178: IFFALSE 4182
// exit ;
4180: GO 4289
// ComAnimCustom ( unit , 1 ) ;
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
4194: LD_VAR 0 8
4198: PPUSH
4199: LD_VAR 0 9
4203: PPUSH
4204: LD_VAR 0 6
4208: PPUSH
4209: LD_VAR 0 7
4213: PPUSH
4214: CALL_OW 330
// repeat wait ( 1 ) ;
4218: LD_INT 1
4220: PPUSH
4221: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
4225: LD_VAR 0 1
4229: PPUSH
4230: CALL_OW 316
4234: PUSH
4235: LD_VAR 0 1
4239: PPUSH
4240: CALL_OW 314
4244: OR
4245: PUSH
4246: LD_VAR 0 1
4250: PPUSH
4251: CALL_OW 302
4255: NOT
4256: OR
4257: PUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: CALL_OW 301
4267: OR
4268: IFFALSE 4218
// RemoveSeeing ( _x , _y , side ) ;
4270: LD_VAR 0 8
4274: PPUSH
4275: LD_VAR 0 9
4279: PPUSH
4280: LD_VAR 0 6
4284: PPUSH
4285: CALL_OW 331
// end ; end_of_file
4289: LD_VAR 0 4
4293: RET
// export ru_radar export globalGameSaveCounter ; every 0 0$1 do
4294: GO 4296
4296: DISABLE
// begin enable ;
4297: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4298: LD_STRING updateTimer(
4300: PUSH
4301: LD_OWVAR 1
4305: STR
4306: PUSH
4307: LD_STRING );
4309: STR
4310: PPUSH
4311: CALL_OW 559
// end ;
4315: END
// every 0 0$1 do
4316: GO 4318
4318: DISABLE
// begin globalGameSaveCounter := 0 ;
4319: LD_ADDR_EXP 11
4323: PUSH
4324: LD_INT 0
4326: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4327: LD_STRING setGameSaveCounter(0)
4329: PPUSH
4330: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4334: LD_STRING initStreamRollete();
4336: PPUSH
4337: CALL_OW 559
// InitStreamMode ;
4341: CALL 5667 0 0
// DefineStreamItems ( false ) ;
4345: LD_INT 0
4347: PPUSH
4348: CALL 6131 0 1
// end ;
4352: END
// export function SOS_MapStart ( ) ; begin
4353: LD_INT 0
4355: PPUSH
// if streamModeActive then
4356: LD_EXP 12
4360: IFFALSE 4369
// DefineStreamItems ( true ) ;
4362: LD_INT 1
4364: PPUSH
4365: CALL 6131 0 1
// UpdateLuaVariables ( ) ;
4369: CALL 4386 0 0
// UpdateFactoryWaypoints ( ) ;
4373: CALL 19000 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4377: CALL 19257 0 0
// end ;
4381: LD_VAR 0 1
4385: RET
// function UpdateLuaVariables ( ) ; begin
4386: LD_INT 0
4388: PPUSH
// if globalGameSaveCounter then
4389: LD_EXP 11
4393: IFFALSE 4427
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4395: LD_ADDR_EXP 11
4399: PUSH
4400: LD_EXP 11
4404: PPUSH
4405: CALL 58778 0 1
4409: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4410: LD_STRING setGameSaveCounter(
4412: PUSH
4413: LD_EXP 11
4417: STR
4418: PUSH
4419: LD_STRING )
4421: STR
4422: PPUSH
4423: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4427: LD_STRING setGameDifficulty(
4429: PUSH
4430: LD_OWVAR 67
4434: STR
4435: PUSH
4436: LD_STRING )
4438: STR
4439: PPUSH
4440: CALL_OW 559
// end ;
4444: LD_VAR 0 1
4448: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4449: LD_INT 0
4451: PPUSH
// if p2 = stream_mode then
4452: LD_VAR 0 2
4456: PUSH
4457: LD_INT 100
4459: EQUAL
4460: IFFALSE 5463
// begin if not StreamModeActive then
4462: LD_EXP 12
4466: NOT
4467: IFFALSE 4477
// StreamModeActive := true ;
4469: LD_ADDR_EXP 12
4473: PUSH
4474: LD_INT 1
4476: ST_TO_ADDR
// if p3 = 0 then
4477: LD_VAR 0 3
4481: PUSH
4482: LD_INT 0
4484: EQUAL
4485: IFFALSE 4491
// InitStreamMode ;
4487: CALL 5667 0 0
// if p3 = 1 then
4491: LD_VAR 0 3
4495: PUSH
4496: LD_INT 1
4498: EQUAL
4499: IFFALSE 4509
// sRocket := true ;
4501: LD_ADDR_EXP 17
4505: PUSH
4506: LD_INT 1
4508: ST_TO_ADDR
// if p3 = 2 then
4509: LD_VAR 0 3
4513: PUSH
4514: LD_INT 2
4516: EQUAL
4517: IFFALSE 4527
// sSpeed := true ;
4519: LD_ADDR_EXP 16
4523: PUSH
4524: LD_INT 1
4526: ST_TO_ADDR
// if p3 = 3 then
4527: LD_VAR 0 3
4531: PUSH
4532: LD_INT 3
4534: EQUAL
4535: IFFALSE 4545
// sEngine := true ;
4537: LD_ADDR_EXP 18
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// if p3 = 4 then
4545: LD_VAR 0 3
4549: PUSH
4550: LD_INT 4
4552: EQUAL
4553: IFFALSE 4563
// sSpec := true ;
4555: LD_ADDR_EXP 15
4559: PUSH
4560: LD_INT 1
4562: ST_TO_ADDR
// if p3 = 5 then
4563: LD_VAR 0 3
4567: PUSH
4568: LD_INT 5
4570: EQUAL
4571: IFFALSE 4581
// sLevel := true ;
4573: LD_ADDR_EXP 19
4577: PUSH
4578: LD_INT 1
4580: ST_TO_ADDR
// if p3 = 6 then
4581: LD_VAR 0 3
4585: PUSH
4586: LD_INT 6
4588: EQUAL
4589: IFFALSE 4599
// sArmoury := true ;
4591: LD_ADDR_EXP 20
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// if p3 = 7 then
4599: LD_VAR 0 3
4603: PUSH
4604: LD_INT 7
4606: EQUAL
4607: IFFALSE 4617
// sRadar := true ;
4609: LD_ADDR_EXP 21
4613: PUSH
4614: LD_INT 1
4616: ST_TO_ADDR
// if p3 = 8 then
4617: LD_VAR 0 3
4621: PUSH
4622: LD_INT 8
4624: EQUAL
4625: IFFALSE 4635
// sBunker := true ;
4627: LD_ADDR_EXP 22
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// if p3 = 9 then
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 9
4642: EQUAL
4643: IFFALSE 4653
// sHack := true ;
4645: LD_ADDR_EXP 23
4649: PUSH
4650: LD_INT 1
4652: ST_TO_ADDR
// if p3 = 10 then
4653: LD_VAR 0 3
4657: PUSH
4658: LD_INT 10
4660: EQUAL
4661: IFFALSE 4671
// sFire := true ;
4663: LD_ADDR_EXP 24
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// if p3 = 11 then
4671: LD_VAR 0 3
4675: PUSH
4676: LD_INT 11
4678: EQUAL
4679: IFFALSE 4689
// sRefresh := true ;
4681: LD_ADDR_EXP 25
4685: PUSH
4686: LD_INT 1
4688: ST_TO_ADDR
// if p3 = 12 then
4689: LD_VAR 0 3
4693: PUSH
4694: LD_INT 12
4696: EQUAL
4697: IFFALSE 4707
// sExp := true ;
4699: LD_ADDR_EXP 26
4703: PUSH
4704: LD_INT 1
4706: ST_TO_ADDR
// if p3 = 13 then
4707: LD_VAR 0 3
4711: PUSH
4712: LD_INT 13
4714: EQUAL
4715: IFFALSE 4725
// sDepot := true ;
4717: LD_ADDR_EXP 27
4721: PUSH
4722: LD_INT 1
4724: ST_TO_ADDR
// if p3 = 14 then
4725: LD_VAR 0 3
4729: PUSH
4730: LD_INT 14
4732: EQUAL
4733: IFFALSE 4743
// sFlag := true ;
4735: LD_ADDR_EXP 28
4739: PUSH
4740: LD_INT 1
4742: ST_TO_ADDR
// if p3 = 15 then
4743: LD_VAR 0 3
4747: PUSH
4748: LD_INT 15
4750: EQUAL
4751: IFFALSE 4761
// sKamikadze := true ;
4753: LD_ADDR_EXP 36
4757: PUSH
4758: LD_INT 1
4760: ST_TO_ADDR
// if p3 = 16 then
4761: LD_VAR 0 3
4765: PUSH
4766: LD_INT 16
4768: EQUAL
4769: IFFALSE 4779
// sTroll := true ;
4771: LD_ADDR_EXP 37
4775: PUSH
4776: LD_INT 1
4778: ST_TO_ADDR
// if p3 = 17 then
4779: LD_VAR 0 3
4783: PUSH
4784: LD_INT 17
4786: EQUAL
4787: IFFALSE 4797
// sSlow := true ;
4789: LD_ADDR_EXP 38
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if p3 = 18 then
4797: LD_VAR 0 3
4801: PUSH
4802: LD_INT 18
4804: EQUAL
4805: IFFALSE 4815
// sLack := true ;
4807: LD_ADDR_EXP 39
4811: PUSH
4812: LD_INT 1
4814: ST_TO_ADDR
// if p3 = 19 then
4815: LD_VAR 0 3
4819: PUSH
4820: LD_INT 19
4822: EQUAL
4823: IFFALSE 4833
// sTank := true ;
4825: LD_ADDR_EXP 41
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// if p3 = 20 then
4833: LD_VAR 0 3
4837: PUSH
4838: LD_INT 20
4840: EQUAL
4841: IFFALSE 4851
// sRemote := true ;
4843: LD_ADDR_EXP 42
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
// if p3 = 21 then
4851: LD_VAR 0 3
4855: PUSH
4856: LD_INT 21
4858: EQUAL
4859: IFFALSE 4869
// sPowell := true ;
4861: LD_ADDR_EXP 43
4865: PUSH
4866: LD_INT 1
4868: ST_TO_ADDR
// if p3 = 22 then
4869: LD_VAR 0 3
4873: PUSH
4874: LD_INT 22
4876: EQUAL
4877: IFFALSE 4887
// sTeleport := true ;
4879: LD_ADDR_EXP 46
4883: PUSH
4884: LD_INT 1
4886: ST_TO_ADDR
// if p3 = 23 then
4887: LD_VAR 0 3
4891: PUSH
4892: LD_INT 23
4894: EQUAL
4895: IFFALSE 4905
// sOilTower := true ;
4897: LD_ADDR_EXP 48
4901: PUSH
4902: LD_INT 1
4904: ST_TO_ADDR
// if p3 = 24 then
4905: LD_VAR 0 3
4909: PUSH
4910: LD_INT 24
4912: EQUAL
4913: IFFALSE 4923
// sShovel := true ;
4915: LD_ADDR_EXP 49
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// if p3 = 25 then
4923: LD_VAR 0 3
4927: PUSH
4928: LD_INT 25
4930: EQUAL
4931: IFFALSE 4941
// sSheik := true ;
4933: LD_ADDR_EXP 50
4937: PUSH
4938: LD_INT 1
4940: ST_TO_ADDR
// if p3 = 26 then
4941: LD_VAR 0 3
4945: PUSH
4946: LD_INT 26
4948: EQUAL
4949: IFFALSE 4959
// sEarthquake := true ;
4951: LD_ADDR_EXP 52
4955: PUSH
4956: LD_INT 1
4958: ST_TO_ADDR
// if p3 = 27 then
4959: LD_VAR 0 3
4963: PUSH
4964: LD_INT 27
4966: EQUAL
4967: IFFALSE 4977
// sAI := true ;
4969: LD_ADDR_EXP 53
4973: PUSH
4974: LD_INT 1
4976: ST_TO_ADDR
// if p3 = 28 then
4977: LD_VAR 0 3
4981: PUSH
4982: LD_INT 28
4984: EQUAL
4985: IFFALSE 4995
// sCargo := true ;
4987: LD_ADDR_EXP 56
4991: PUSH
4992: LD_INT 1
4994: ST_TO_ADDR
// if p3 = 29 then
4995: LD_VAR 0 3
4999: PUSH
5000: LD_INT 29
5002: EQUAL
5003: IFFALSE 5013
// sDLaser := true ;
5005: LD_ADDR_EXP 57
5009: PUSH
5010: LD_INT 1
5012: ST_TO_ADDR
// if p3 = 30 then
5013: LD_VAR 0 3
5017: PUSH
5018: LD_INT 30
5020: EQUAL
5021: IFFALSE 5031
// sExchange := true ;
5023: LD_ADDR_EXP 58
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// if p3 = 31 then
5031: LD_VAR 0 3
5035: PUSH
5036: LD_INT 31
5038: EQUAL
5039: IFFALSE 5049
// sFac := true ;
5041: LD_ADDR_EXP 59
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if p3 = 32 then
5049: LD_VAR 0 3
5053: PUSH
5054: LD_INT 32
5056: EQUAL
5057: IFFALSE 5067
// sPower := true ;
5059: LD_ADDR_EXP 60
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// if p3 = 33 then
5067: LD_VAR 0 3
5071: PUSH
5072: LD_INT 33
5074: EQUAL
5075: IFFALSE 5085
// sRandom := true ;
5077: LD_ADDR_EXP 61
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// if p3 = 34 then
5085: LD_VAR 0 3
5089: PUSH
5090: LD_INT 34
5092: EQUAL
5093: IFFALSE 5103
// sShield := true ;
5095: LD_ADDR_EXP 62
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// if p3 = 35 then
5103: LD_VAR 0 3
5107: PUSH
5108: LD_INT 35
5110: EQUAL
5111: IFFALSE 5121
// sTime := true ;
5113: LD_ADDR_EXP 63
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// if p3 = 36 then
5121: LD_VAR 0 3
5125: PUSH
5126: LD_INT 36
5128: EQUAL
5129: IFFALSE 5139
// sTools := true ;
5131: LD_ADDR_EXP 64
5135: PUSH
5136: LD_INT 1
5138: ST_TO_ADDR
// if p3 = 101 then
5139: LD_VAR 0 3
5143: PUSH
5144: LD_INT 101
5146: EQUAL
5147: IFFALSE 5157
// sSold := true ;
5149: LD_ADDR_EXP 29
5153: PUSH
5154: LD_INT 1
5156: ST_TO_ADDR
// if p3 = 102 then
5157: LD_VAR 0 3
5161: PUSH
5162: LD_INT 102
5164: EQUAL
5165: IFFALSE 5175
// sDiff := true ;
5167: LD_ADDR_EXP 30
5171: PUSH
5172: LD_INT 1
5174: ST_TO_ADDR
// if p3 = 103 then
5175: LD_VAR 0 3
5179: PUSH
5180: LD_INT 103
5182: EQUAL
5183: IFFALSE 5193
// sFog := true ;
5185: LD_ADDR_EXP 33
5189: PUSH
5190: LD_INT 1
5192: ST_TO_ADDR
// if p3 = 104 then
5193: LD_VAR 0 3
5197: PUSH
5198: LD_INT 104
5200: EQUAL
5201: IFFALSE 5211
// sReset := true ;
5203: LD_ADDR_EXP 34
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// if p3 = 105 then
5211: LD_VAR 0 3
5215: PUSH
5216: LD_INT 105
5218: EQUAL
5219: IFFALSE 5229
// sSun := true ;
5221: LD_ADDR_EXP 35
5225: PUSH
5226: LD_INT 1
5228: ST_TO_ADDR
// if p3 = 106 then
5229: LD_VAR 0 3
5233: PUSH
5234: LD_INT 106
5236: EQUAL
5237: IFFALSE 5247
// sTiger := true ;
5239: LD_ADDR_EXP 31
5243: PUSH
5244: LD_INT 1
5246: ST_TO_ADDR
// if p3 = 107 then
5247: LD_VAR 0 3
5251: PUSH
5252: LD_INT 107
5254: EQUAL
5255: IFFALSE 5265
// sBomb := true ;
5257: LD_ADDR_EXP 32
5261: PUSH
5262: LD_INT 1
5264: ST_TO_ADDR
// if p3 = 108 then
5265: LD_VAR 0 3
5269: PUSH
5270: LD_INT 108
5272: EQUAL
5273: IFFALSE 5283
// sWound := true ;
5275: LD_ADDR_EXP 40
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// if p3 = 109 then
5283: LD_VAR 0 3
5287: PUSH
5288: LD_INT 109
5290: EQUAL
5291: IFFALSE 5301
// sBetray := true ;
5293: LD_ADDR_EXP 44
5297: PUSH
5298: LD_INT 1
5300: ST_TO_ADDR
// if p3 = 110 then
5301: LD_VAR 0 3
5305: PUSH
5306: LD_INT 110
5308: EQUAL
5309: IFFALSE 5319
// sContamin := true ;
5311: LD_ADDR_EXP 45
5315: PUSH
5316: LD_INT 1
5318: ST_TO_ADDR
// if p3 = 111 then
5319: LD_VAR 0 3
5323: PUSH
5324: LD_INT 111
5326: EQUAL
5327: IFFALSE 5337
// sOil := true ;
5329: LD_ADDR_EXP 47
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// if p3 = 112 then
5337: LD_VAR 0 3
5341: PUSH
5342: LD_INT 112
5344: EQUAL
5345: IFFALSE 5355
// sStu := true ;
5347: LD_ADDR_EXP 51
5351: PUSH
5352: LD_INT 1
5354: ST_TO_ADDR
// if p3 = 113 then
5355: LD_VAR 0 3
5359: PUSH
5360: LD_INT 113
5362: EQUAL
5363: IFFALSE 5373
// sBazooka := true ;
5365: LD_ADDR_EXP 54
5369: PUSH
5370: LD_INT 1
5372: ST_TO_ADDR
// if p3 = 114 then
5373: LD_VAR 0 3
5377: PUSH
5378: LD_INT 114
5380: EQUAL
5381: IFFALSE 5391
// sMortar := true ;
5383: LD_ADDR_EXP 55
5387: PUSH
5388: LD_INT 1
5390: ST_TO_ADDR
// if p3 = 115 then
5391: LD_VAR 0 3
5395: PUSH
5396: LD_INT 115
5398: EQUAL
5399: IFFALSE 5409
// sRanger := true ;
5401: LD_ADDR_EXP 65
5405: PUSH
5406: LD_INT 1
5408: ST_TO_ADDR
// if p3 = 116 then
5409: LD_VAR 0 3
5413: PUSH
5414: LD_INT 116
5416: EQUAL
5417: IFFALSE 5427
// sComputer := true ;
5419: LD_ADDR_EXP 66
5423: PUSH
5424: LD_INT 1
5426: ST_TO_ADDR
// if p3 = 117 then
5427: LD_VAR 0 3
5431: PUSH
5432: LD_INT 117
5434: EQUAL
5435: IFFALSE 5445
// s30 := true ;
5437: LD_ADDR_EXP 67
5441: PUSH
5442: LD_INT 1
5444: ST_TO_ADDR
// if p3 = 118 then
5445: LD_VAR 0 3
5449: PUSH
5450: LD_INT 118
5452: EQUAL
5453: IFFALSE 5463
// s60 := true ;
5455: LD_ADDR_EXP 68
5459: PUSH
5460: LD_INT 1
5462: ST_TO_ADDR
// end ; if p2 = hack_mode then
5463: LD_VAR 0 2
5467: PUSH
5468: LD_INT 101
5470: EQUAL
5471: IFFALSE 5599
// begin case p3 of 1 :
5473: LD_VAR 0 3
5477: PUSH
5478: LD_INT 1
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5486
5484: GO 5493
5486: POP
// hHackUnlimitedResources ; 2 :
5487: CALL 17746 0 0
5491: GO 5599
5493: LD_INT 2
5495: DOUBLE
5496: EQUAL
5497: IFTRUE 5501
5499: GO 5508
5501: POP
// hHackSetLevel10 ; 3 :
5502: CALL 17879 0 0
5506: GO 5599
5508: LD_INT 3
5510: DOUBLE
5511: EQUAL
5512: IFTRUE 5516
5514: GO 5523
5516: POP
// hHackSetLevel10YourUnits ; 4 :
5517: CALL 17964 0 0
5521: GO 5599
5523: LD_INT 4
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5538
5531: POP
// hHackInvincible ; 5 :
5532: CALL 18412 0 0
5536: GO 5599
5538: LD_INT 5
5540: DOUBLE
5541: EQUAL
5542: IFTRUE 5546
5544: GO 5553
5546: POP
// hHackInvisible ; 6 :
5547: CALL 18523 0 0
5551: GO 5599
5553: LD_INT 6
5555: DOUBLE
5556: EQUAL
5557: IFTRUE 5561
5559: GO 5568
5561: POP
// hHackChangeYourSide ; 7 :
5562: CALL 18580 0 0
5566: GO 5599
5568: LD_INT 7
5570: DOUBLE
5571: EQUAL
5572: IFTRUE 5576
5574: GO 5583
5576: POP
// hHackChangeUnitSide ; 8 :
5577: CALL 18622 0 0
5581: GO 5599
5583: LD_INT 8
5585: DOUBLE
5586: EQUAL
5587: IFTRUE 5591
5589: GO 5598
5591: POP
// hHackFog ; end ;
5592: CALL 18723 0 0
5596: GO 5599
5598: POP
// end ; if p2 = game_save_mode then
5599: LD_VAR 0 2
5603: PUSH
5604: LD_INT 102
5606: EQUAL
5607: IFFALSE 5662
// begin if p3 = 1 then
5609: LD_VAR 0 3
5613: PUSH
5614: LD_INT 1
5616: EQUAL
5617: IFFALSE 5629
// globalGameSaveCounter := p4 ;
5619: LD_ADDR_EXP 11
5623: PUSH
5624: LD_VAR 0 4
5628: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5629: LD_VAR 0 3
5633: PUSH
5634: LD_INT 2
5636: EQUAL
5637: PUSH
5638: LD_EXP 11
5642: AND
5643: IFFALSE 5662
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5645: LD_STRING setGameSaveCounter(
5647: PUSH
5648: LD_EXP 11
5652: STR
5653: PUSH
5654: LD_STRING )
5656: STR
5657: PPUSH
5658: CALL_OW 559
// end ; end ;
5662: LD_VAR 0 7
5666: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5667: LD_INT 0
5669: PPUSH
// streamModeActive := false ;
5670: LD_ADDR_EXP 12
5674: PUSH
5675: LD_INT 0
5677: ST_TO_ADDR
// normalCounter := 36 ;
5678: LD_ADDR_EXP 13
5682: PUSH
5683: LD_INT 36
5685: ST_TO_ADDR
// hardcoreCounter := 18 ;
5686: LD_ADDR_EXP 14
5690: PUSH
5691: LD_INT 18
5693: ST_TO_ADDR
// sRocket := false ;
5694: LD_ADDR_EXP 17
5698: PUSH
5699: LD_INT 0
5701: ST_TO_ADDR
// sSpeed := false ;
5702: LD_ADDR_EXP 16
5706: PUSH
5707: LD_INT 0
5709: ST_TO_ADDR
// sEngine := false ;
5710: LD_ADDR_EXP 18
5714: PUSH
5715: LD_INT 0
5717: ST_TO_ADDR
// sSpec := false ;
5718: LD_ADDR_EXP 15
5722: PUSH
5723: LD_INT 0
5725: ST_TO_ADDR
// sLevel := false ;
5726: LD_ADDR_EXP 19
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// sArmoury := false ;
5734: LD_ADDR_EXP 20
5738: PUSH
5739: LD_INT 0
5741: ST_TO_ADDR
// sRadar := false ;
5742: LD_ADDR_EXP 21
5746: PUSH
5747: LD_INT 0
5749: ST_TO_ADDR
// sBunker := false ;
5750: LD_ADDR_EXP 22
5754: PUSH
5755: LD_INT 0
5757: ST_TO_ADDR
// sHack := false ;
5758: LD_ADDR_EXP 23
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
// sFire := false ;
5766: LD_ADDR_EXP 24
5770: PUSH
5771: LD_INT 0
5773: ST_TO_ADDR
// sRefresh := false ;
5774: LD_ADDR_EXP 25
5778: PUSH
5779: LD_INT 0
5781: ST_TO_ADDR
// sExp := false ;
5782: LD_ADDR_EXP 26
5786: PUSH
5787: LD_INT 0
5789: ST_TO_ADDR
// sDepot := false ;
5790: LD_ADDR_EXP 27
5794: PUSH
5795: LD_INT 0
5797: ST_TO_ADDR
// sFlag := false ;
5798: LD_ADDR_EXP 28
5802: PUSH
5803: LD_INT 0
5805: ST_TO_ADDR
// sKamikadze := false ;
5806: LD_ADDR_EXP 36
5810: PUSH
5811: LD_INT 0
5813: ST_TO_ADDR
// sTroll := false ;
5814: LD_ADDR_EXP 37
5818: PUSH
5819: LD_INT 0
5821: ST_TO_ADDR
// sSlow := false ;
5822: LD_ADDR_EXP 38
5826: PUSH
5827: LD_INT 0
5829: ST_TO_ADDR
// sLack := false ;
5830: LD_ADDR_EXP 39
5834: PUSH
5835: LD_INT 0
5837: ST_TO_ADDR
// sTank := false ;
5838: LD_ADDR_EXP 41
5842: PUSH
5843: LD_INT 0
5845: ST_TO_ADDR
// sRemote := false ;
5846: LD_ADDR_EXP 42
5850: PUSH
5851: LD_INT 0
5853: ST_TO_ADDR
// sPowell := false ;
5854: LD_ADDR_EXP 43
5858: PUSH
5859: LD_INT 0
5861: ST_TO_ADDR
// sTeleport := false ;
5862: LD_ADDR_EXP 46
5866: PUSH
5867: LD_INT 0
5869: ST_TO_ADDR
// sOilTower := false ;
5870: LD_ADDR_EXP 48
5874: PUSH
5875: LD_INT 0
5877: ST_TO_ADDR
// sShovel := false ;
5878: LD_ADDR_EXP 49
5882: PUSH
5883: LD_INT 0
5885: ST_TO_ADDR
// sSheik := false ;
5886: LD_ADDR_EXP 50
5890: PUSH
5891: LD_INT 0
5893: ST_TO_ADDR
// sEarthquake := false ;
5894: LD_ADDR_EXP 52
5898: PUSH
5899: LD_INT 0
5901: ST_TO_ADDR
// sAI := false ;
5902: LD_ADDR_EXP 53
5906: PUSH
5907: LD_INT 0
5909: ST_TO_ADDR
// sCargo := false ;
5910: LD_ADDR_EXP 56
5914: PUSH
5915: LD_INT 0
5917: ST_TO_ADDR
// sDLaser := false ;
5918: LD_ADDR_EXP 57
5922: PUSH
5923: LD_INT 0
5925: ST_TO_ADDR
// sExchange := false ;
5926: LD_ADDR_EXP 58
5930: PUSH
5931: LD_INT 0
5933: ST_TO_ADDR
// sFac := false ;
5934: LD_ADDR_EXP 59
5938: PUSH
5939: LD_INT 0
5941: ST_TO_ADDR
// sPower := false ;
5942: LD_ADDR_EXP 60
5946: PUSH
5947: LD_INT 0
5949: ST_TO_ADDR
// sRandom := false ;
5950: LD_ADDR_EXP 61
5954: PUSH
5955: LD_INT 0
5957: ST_TO_ADDR
// sShield := false ;
5958: LD_ADDR_EXP 62
5962: PUSH
5963: LD_INT 0
5965: ST_TO_ADDR
// sTime := false ;
5966: LD_ADDR_EXP 63
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// sTools := false ;
5974: LD_ADDR_EXP 64
5978: PUSH
5979: LD_INT 0
5981: ST_TO_ADDR
// sSold := false ;
5982: LD_ADDR_EXP 29
5986: PUSH
5987: LD_INT 0
5989: ST_TO_ADDR
// sDiff := false ;
5990: LD_ADDR_EXP 30
5994: PUSH
5995: LD_INT 0
5997: ST_TO_ADDR
// sFog := false ;
5998: LD_ADDR_EXP 33
6002: PUSH
6003: LD_INT 0
6005: ST_TO_ADDR
// sReset := false ;
6006: LD_ADDR_EXP 34
6010: PUSH
6011: LD_INT 0
6013: ST_TO_ADDR
// sSun := false ;
6014: LD_ADDR_EXP 35
6018: PUSH
6019: LD_INT 0
6021: ST_TO_ADDR
// sTiger := false ;
6022: LD_ADDR_EXP 31
6026: PUSH
6027: LD_INT 0
6029: ST_TO_ADDR
// sBomb := false ;
6030: LD_ADDR_EXP 32
6034: PUSH
6035: LD_INT 0
6037: ST_TO_ADDR
// sWound := false ;
6038: LD_ADDR_EXP 40
6042: PUSH
6043: LD_INT 0
6045: ST_TO_ADDR
// sBetray := false ;
6046: LD_ADDR_EXP 44
6050: PUSH
6051: LD_INT 0
6053: ST_TO_ADDR
// sContamin := false ;
6054: LD_ADDR_EXP 45
6058: PUSH
6059: LD_INT 0
6061: ST_TO_ADDR
// sOil := false ;
6062: LD_ADDR_EXP 47
6066: PUSH
6067: LD_INT 0
6069: ST_TO_ADDR
// sStu := false ;
6070: LD_ADDR_EXP 51
6074: PUSH
6075: LD_INT 0
6077: ST_TO_ADDR
// sBazooka := false ;
6078: LD_ADDR_EXP 54
6082: PUSH
6083: LD_INT 0
6085: ST_TO_ADDR
// sMortar := false ;
6086: LD_ADDR_EXP 55
6090: PUSH
6091: LD_INT 0
6093: ST_TO_ADDR
// sRanger := false ;
6094: LD_ADDR_EXP 65
6098: PUSH
6099: LD_INT 0
6101: ST_TO_ADDR
// sComputer := false ;
6102: LD_ADDR_EXP 66
6106: PUSH
6107: LD_INT 0
6109: ST_TO_ADDR
// s30 := false ;
6110: LD_ADDR_EXP 67
6114: PUSH
6115: LD_INT 0
6117: ST_TO_ADDR
// s60 := false ;
6118: LD_ADDR_EXP 68
6122: PUSH
6123: LD_INT 0
6125: ST_TO_ADDR
// end ;
6126: LD_VAR 0 1
6130: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
6139: PPUSH
// result := [ ] ;
6140: LD_ADDR_VAR 0 2
6144: PUSH
6145: EMPTY
6146: ST_TO_ADDR
// if campaign_id = 1 then
6147: LD_OWVAR 69
6151: PUSH
6152: LD_INT 1
6154: EQUAL
6155: IFFALSE 9321
// begin case mission_number of 1 :
6157: LD_OWVAR 70
6161: PUSH
6162: LD_INT 1
6164: DOUBLE
6165: EQUAL
6166: IFTRUE 6170
6168: GO 6246
6170: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: LD_INT 2
6178: PUSH
6179: LD_INT 4
6181: PUSH
6182: LD_INT 11
6184: PUSH
6185: LD_INT 12
6187: PUSH
6188: LD_INT 15
6190: PUSH
6191: LD_INT 16
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 23
6199: PUSH
6200: LD_INT 26
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 101
6216: PUSH
6217: LD_INT 102
6219: PUSH
6220: LD_INT 106
6222: PUSH
6223: LD_INT 116
6225: PUSH
6226: LD_INT 117
6228: PUSH
6229: LD_INT 118
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: ST_TO_ADDR
6244: GO 9319
6246: LD_INT 2
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6338
6254: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: LD_INT 2
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 11
6268: PUSH
6269: LD_INT 12
6271: PUSH
6272: LD_INT 15
6274: PUSH
6275: LD_INT 16
6277: PUSH
6278: LD_INT 22
6280: PUSH
6281: LD_INT 23
6283: PUSH
6284: LD_INT 26
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 101
6300: PUSH
6301: LD_INT 102
6303: PUSH
6304: LD_INT 105
6306: PUSH
6307: LD_INT 106
6309: PUSH
6310: LD_INT 108
6312: PUSH
6313: LD_INT 116
6315: PUSH
6316: LD_INT 117
6318: PUSH
6319: LD_INT 118
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: ST_TO_ADDR
6336: GO 9319
6338: LD_INT 3
6340: DOUBLE
6341: EQUAL
6342: IFTRUE 6346
6344: GO 6434
6346: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6347: LD_ADDR_VAR 0 2
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 5
6360: PUSH
6361: LD_INT 11
6363: PUSH
6364: LD_INT 12
6366: PUSH
6367: LD_INT 15
6369: PUSH
6370: LD_INT 16
6372: PUSH
6373: LD_INT 22
6375: PUSH
6376: LD_INT 26
6378: PUSH
6379: LD_INT 36
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 101
6396: PUSH
6397: LD_INT 102
6399: PUSH
6400: LD_INT 105
6402: PUSH
6403: LD_INT 106
6405: PUSH
6406: LD_INT 108
6408: PUSH
6409: LD_INT 116
6411: PUSH
6412: LD_INT 117
6414: PUSH
6415: LD_INT 118
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 9319
6434: LD_INT 4
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6538
6442: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 4
6453: PUSH
6454: LD_INT 5
6456: PUSH
6457: LD_INT 8
6459: PUSH
6460: LD_INT 11
6462: PUSH
6463: LD_INT 12
6465: PUSH
6466: LD_INT 15
6468: PUSH
6469: LD_INT 16
6471: PUSH
6472: LD_INT 22
6474: PUSH
6475: LD_INT 23
6477: PUSH
6478: LD_INT 26
6480: PUSH
6481: LD_INT 36
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 101
6500: PUSH
6501: LD_INT 102
6503: PUSH
6504: LD_INT 105
6506: PUSH
6507: LD_INT 106
6509: PUSH
6510: LD_INT 108
6512: PUSH
6513: LD_INT 116
6515: PUSH
6516: LD_INT 117
6518: PUSH
6519: LD_INT 118
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: ST_TO_ADDR
6536: GO 9319
6538: LD_INT 5
6540: DOUBLE
6541: EQUAL
6542: IFTRUE 6546
6544: GO 6658
6546: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: LD_INT 2
6554: PUSH
6555: LD_INT 4
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: LD_INT 6
6563: PUSH
6564: LD_INT 8
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 15
6575: PUSH
6576: LD_INT 16
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 23
6584: PUSH
6585: LD_INT 25
6587: PUSH
6588: LD_INT 26
6590: PUSH
6591: LD_INT 36
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 101
6612: PUSH
6613: LD_INT 102
6615: PUSH
6616: LD_INT 105
6618: PUSH
6619: LD_INT 106
6621: PUSH
6622: LD_INT 108
6624: PUSH
6625: LD_INT 109
6627: PUSH
6628: LD_INT 112
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 117
6636: PUSH
6637: LD_INT 118
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 9319
6658: LD_INT 6
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6798
6666: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6667: LD_ADDR_VAR 0 2
6671: PUSH
6672: LD_INT 2
6674: PUSH
6675: LD_INT 4
6677: PUSH
6678: LD_INT 5
6680: PUSH
6681: LD_INT 6
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: LD_INT 11
6689: PUSH
6690: LD_INT 12
6692: PUSH
6693: LD_INT 15
6695: PUSH
6696: LD_INT 16
6698: PUSH
6699: LD_INT 20
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 22
6707: PUSH
6708: LD_INT 23
6710: PUSH
6711: LD_INT 25
6713: PUSH
6714: LD_INT 26
6716: PUSH
6717: LD_INT 30
6719: PUSH
6720: LD_INT 31
6722: PUSH
6723: LD_INT 32
6725: PUSH
6726: LD_INT 36
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 101
6752: PUSH
6753: LD_INT 102
6755: PUSH
6756: LD_INT 105
6758: PUSH
6759: LD_INT 106
6761: PUSH
6762: LD_INT 108
6764: PUSH
6765: LD_INT 109
6767: PUSH
6768: LD_INT 112
6770: PUSH
6771: LD_INT 116
6773: PUSH
6774: LD_INT 117
6776: PUSH
6777: LD_INT 118
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: ST_TO_ADDR
6796: GO 9319
6798: LD_INT 7
6800: DOUBLE
6801: EQUAL
6802: IFTRUE 6806
6804: GO 6918
6806: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6807: LD_ADDR_VAR 0 2
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: LD_INT 4
6817: PUSH
6818: LD_INT 5
6820: PUSH
6821: LD_INT 7
6823: PUSH
6824: LD_INT 11
6826: PUSH
6827: LD_INT 12
6829: PUSH
6830: LD_INT 15
6832: PUSH
6833: LD_INT 16
6835: PUSH
6836: LD_INT 20
6838: PUSH
6839: LD_INT 21
6841: PUSH
6842: LD_INT 22
6844: PUSH
6845: LD_INT 23
6847: PUSH
6848: LD_INT 25
6850: PUSH
6851: LD_INT 26
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 101
6872: PUSH
6873: LD_INT 102
6875: PUSH
6876: LD_INT 103
6878: PUSH
6879: LD_INT 105
6881: PUSH
6882: LD_INT 106
6884: PUSH
6885: LD_INT 108
6887: PUSH
6888: LD_INT 112
6890: PUSH
6891: LD_INT 116
6893: PUSH
6894: LD_INT 117
6896: PUSH
6897: LD_INT 118
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: ST_TO_ADDR
6916: GO 9319
6918: LD_INT 8
6920: DOUBLE
6921: EQUAL
6922: IFTRUE 6926
6924: GO 7066
6926: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6927: LD_ADDR_VAR 0 2
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: LD_INT 4
6937: PUSH
6938: LD_INT 5
6940: PUSH
6941: LD_INT 6
6943: PUSH
6944: LD_INT 7
6946: PUSH
6947: LD_INT 8
6949: PUSH
6950: LD_INT 11
6952: PUSH
6953: LD_INT 12
6955: PUSH
6956: LD_INT 15
6958: PUSH
6959: LD_INT 16
6961: PUSH
6962: LD_INT 20
6964: PUSH
6965: LD_INT 21
6967: PUSH
6968: LD_INT 22
6970: PUSH
6971: LD_INT 23
6973: PUSH
6974: LD_INT 25
6976: PUSH
6977: LD_INT 26
6979: PUSH
6980: LD_INT 30
6982: PUSH
6983: LD_INT 31
6985: PUSH
6986: LD_INT 32
6988: PUSH
6989: LD_INT 36
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 101
7016: PUSH
7017: LD_INT 102
7019: PUSH
7020: LD_INT 103
7022: PUSH
7023: LD_INT 105
7025: PUSH
7026: LD_INT 106
7028: PUSH
7029: LD_INT 108
7031: PUSH
7032: LD_INT 109
7034: PUSH
7035: LD_INT 112
7037: PUSH
7038: LD_INT 116
7040: PUSH
7041: LD_INT 117
7043: PUSH
7044: LD_INT 118
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 9319
7066: LD_INT 9
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7222
7074: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7075: LD_ADDR_VAR 0 2
7079: PUSH
7080: LD_INT 2
7082: PUSH
7083: LD_INT 4
7085: PUSH
7086: LD_INT 5
7088: PUSH
7089: LD_INT 6
7091: PUSH
7092: LD_INT 7
7094: PUSH
7095: LD_INT 8
7097: PUSH
7098: LD_INT 11
7100: PUSH
7101: LD_INT 12
7103: PUSH
7104: LD_INT 15
7106: PUSH
7107: LD_INT 16
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 22
7118: PUSH
7119: LD_INT 23
7121: PUSH
7122: LD_INT 25
7124: PUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 28
7130: PUSH
7131: LD_INT 30
7133: PUSH
7134: LD_INT 31
7136: PUSH
7137: LD_INT 32
7139: PUSH
7140: LD_INT 36
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 101
7168: PUSH
7169: LD_INT 102
7171: PUSH
7172: LD_INT 103
7174: PUSH
7175: LD_INT 105
7177: PUSH
7178: LD_INT 106
7180: PUSH
7181: LD_INT 108
7183: PUSH
7184: LD_INT 109
7186: PUSH
7187: LD_INT 112
7189: PUSH
7190: LD_INT 114
7192: PUSH
7193: LD_INT 116
7195: PUSH
7196: LD_INT 117
7198: PUSH
7199: LD_INT 118
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: ST_TO_ADDR
7220: GO 9319
7222: LD_INT 10
7224: DOUBLE
7225: EQUAL
7226: IFTRUE 7230
7228: GO 7426
7230: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7231: LD_ADDR_VAR 0 2
7235: PUSH
7236: LD_INT 2
7238: PUSH
7239: LD_INT 4
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: LD_INT 6
7247: PUSH
7248: LD_INT 7
7250: PUSH
7251: LD_INT 8
7253: PUSH
7254: LD_INT 9
7256: PUSH
7257: LD_INT 10
7259: PUSH
7260: LD_INT 11
7262: PUSH
7263: LD_INT 12
7265: PUSH
7266: LD_INT 13
7268: PUSH
7269: LD_INT 14
7271: PUSH
7272: LD_INT 15
7274: PUSH
7275: LD_INT 16
7277: PUSH
7278: LD_INT 17
7280: PUSH
7281: LD_INT 18
7283: PUSH
7284: LD_INT 19
7286: PUSH
7287: LD_INT 20
7289: PUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 22
7295: PUSH
7296: LD_INT 23
7298: PUSH
7299: LD_INT 24
7301: PUSH
7302: LD_INT 25
7304: PUSH
7305: LD_INT 26
7307: PUSH
7308: LD_INT 28
7310: PUSH
7311: LD_INT 30
7313: PUSH
7314: LD_INT 31
7316: PUSH
7317: LD_INT 32
7319: PUSH
7320: LD_INT 36
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 101
7356: PUSH
7357: LD_INT 102
7359: PUSH
7360: LD_INT 103
7362: PUSH
7363: LD_INT 104
7365: PUSH
7366: LD_INT 105
7368: PUSH
7369: LD_INT 106
7371: PUSH
7372: LD_INT 107
7374: PUSH
7375: LD_INT 108
7377: PUSH
7378: LD_INT 109
7380: PUSH
7381: LD_INT 110
7383: PUSH
7384: LD_INT 111
7386: PUSH
7387: LD_INT 112
7389: PUSH
7390: LD_INT 114
7392: PUSH
7393: LD_INT 116
7395: PUSH
7396: LD_INT 117
7398: PUSH
7399: LD_INT 118
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: ST_TO_ADDR
7424: GO 9319
7426: LD_INT 11
7428: DOUBLE
7429: EQUAL
7430: IFTRUE 7434
7432: GO 7638
7434: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7435: LD_ADDR_VAR 0 2
7439: PUSH
7440: LD_INT 2
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: LD_INT 4
7448: PUSH
7449: LD_INT 5
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: LD_INT 7
7457: PUSH
7458: LD_INT 8
7460: PUSH
7461: LD_INT 9
7463: PUSH
7464: LD_INT 10
7466: PUSH
7467: LD_INT 11
7469: PUSH
7470: LD_INT 12
7472: PUSH
7473: LD_INT 13
7475: PUSH
7476: LD_INT 14
7478: PUSH
7479: LD_INT 15
7481: PUSH
7482: LD_INT 16
7484: PUSH
7485: LD_INT 17
7487: PUSH
7488: LD_INT 18
7490: PUSH
7491: LD_INT 19
7493: PUSH
7494: LD_INT 20
7496: PUSH
7497: LD_INT 21
7499: PUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 23
7505: PUSH
7506: LD_INT 24
7508: PUSH
7509: LD_INT 25
7511: PUSH
7512: LD_INT 26
7514: PUSH
7515: LD_INT 28
7517: PUSH
7518: LD_INT 30
7520: PUSH
7521: LD_INT 31
7523: PUSH
7524: LD_INT 32
7526: PUSH
7527: LD_INT 34
7529: PUSH
7530: LD_INT 36
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 101
7568: PUSH
7569: LD_INT 102
7571: PUSH
7572: LD_INT 103
7574: PUSH
7575: LD_INT 104
7577: PUSH
7578: LD_INT 105
7580: PUSH
7581: LD_INT 106
7583: PUSH
7584: LD_INT 107
7586: PUSH
7587: LD_INT 108
7589: PUSH
7590: LD_INT 109
7592: PUSH
7593: LD_INT 110
7595: PUSH
7596: LD_INT 111
7598: PUSH
7599: LD_INT 112
7601: PUSH
7602: LD_INT 114
7604: PUSH
7605: LD_INT 116
7607: PUSH
7608: LD_INT 117
7610: PUSH
7611: LD_INT 118
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: ST_TO_ADDR
7636: GO 9319
7638: LD_INT 12
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7866
7646: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 2
7657: PUSH
7658: LD_INT 3
7660: PUSH
7661: LD_INT 4
7663: PUSH
7664: LD_INT 5
7666: PUSH
7667: LD_INT 6
7669: PUSH
7670: LD_INT 7
7672: PUSH
7673: LD_INT 8
7675: PUSH
7676: LD_INT 9
7678: PUSH
7679: LD_INT 10
7681: PUSH
7682: LD_INT 11
7684: PUSH
7685: LD_INT 12
7687: PUSH
7688: LD_INT 13
7690: PUSH
7691: LD_INT 14
7693: PUSH
7694: LD_INT 15
7696: PUSH
7697: LD_INT 16
7699: PUSH
7700: LD_INT 17
7702: PUSH
7703: LD_INT 18
7705: PUSH
7706: LD_INT 19
7708: PUSH
7709: LD_INT 20
7711: PUSH
7712: LD_INT 21
7714: PUSH
7715: LD_INT 22
7717: PUSH
7718: LD_INT 23
7720: PUSH
7721: LD_INT 24
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 26
7729: PUSH
7730: LD_INT 27
7732: PUSH
7733: LD_INT 28
7735: PUSH
7736: LD_INT 30
7738: PUSH
7739: LD_INT 31
7741: PUSH
7742: LD_INT 32
7744: PUSH
7745: LD_INT 33
7747: PUSH
7748: LD_INT 34
7750: PUSH
7751: LD_INT 36
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 101
7792: PUSH
7793: LD_INT 102
7795: PUSH
7796: LD_INT 103
7798: PUSH
7799: LD_INT 104
7801: PUSH
7802: LD_INT 105
7804: PUSH
7805: LD_INT 106
7807: PUSH
7808: LD_INT 107
7810: PUSH
7811: LD_INT 108
7813: PUSH
7814: LD_INT 109
7816: PUSH
7817: LD_INT 110
7819: PUSH
7820: LD_INT 111
7822: PUSH
7823: LD_INT 112
7825: PUSH
7826: LD_INT 113
7828: PUSH
7829: LD_INT 114
7831: PUSH
7832: LD_INT 116
7834: PUSH
7835: LD_INT 117
7837: PUSH
7838: LD_INT 118
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: ST_TO_ADDR
7864: GO 9319
7866: LD_INT 13
7868: DOUBLE
7869: EQUAL
7870: IFTRUE 7874
7872: GO 8082
7874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: LD_INT 2
7885: PUSH
7886: LD_INT 3
7888: PUSH
7889: LD_INT 4
7891: PUSH
7892: LD_INT 5
7894: PUSH
7895: LD_INT 8
7897: PUSH
7898: LD_INT 9
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: LD_INT 11
7906: PUSH
7907: LD_INT 12
7909: PUSH
7910: LD_INT 14
7912: PUSH
7913: LD_INT 15
7915: PUSH
7916: LD_INT 16
7918: PUSH
7919: LD_INT 17
7921: PUSH
7922: LD_INT 18
7924: PUSH
7925: LD_INT 19
7927: PUSH
7928: LD_INT 20
7930: PUSH
7931: LD_INT 21
7933: PUSH
7934: LD_INT 22
7936: PUSH
7937: LD_INT 23
7939: PUSH
7940: LD_INT 24
7942: PUSH
7943: LD_INT 25
7945: PUSH
7946: LD_INT 26
7948: PUSH
7949: LD_INT 27
7951: PUSH
7952: LD_INT 28
7954: PUSH
7955: LD_INT 30
7957: PUSH
7958: LD_INT 31
7960: PUSH
7961: LD_INT 32
7963: PUSH
7964: LD_INT 33
7966: PUSH
7967: LD_INT 34
7969: PUSH
7970: LD_INT 36
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 101
8008: PUSH
8009: LD_INT 102
8011: PUSH
8012: LD_INT 103
8014: PUSH
8015: LD_INT 104
8017: PUSH
8018: LD_INT 105
8020: PUSH
8021: LD_INT 106
8023: PUSH
8024: LD_INT 107
8026: PUSH
8027: LD_INT 108
8029: PUSH
8030: LD_INT 109
8032: PUSH
8033: LD_INT 110
8035: PUSH
8036: LD_INT 111
8038: PUSH
8039: LD_INT 112
8041: PUSH
8042: LD_INT 113
8044: PUSH
8045: LD_INT 114
8047: PUSH
8048: LD_INT 116
8050: PUSH
8051: LD_INT 117
8053: PUSH
8054: LD_INT 118
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: ST_TO_ADDR
8080: GO 9319
8082: LD_INT 14
8084: DOUBLE
8085: EQUAL
8086: IFTRUE 8090
8088: GO 8314
8090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8091: LD_ADDR_VAR 0 2
8095: PUSH
8096: LD_INT 1
8098: PUSH
8099: LD_INT 2
8101: PUSH
8102: LD_INT 3
8104: PUSH
8105: LD_INT 4
8107: PUSH
8108: LD_INT 5
8110: PUSH
8111: LD_INT 6
8113: PUSH
8114: LD_INT 7
8116: PUSH
8117: LD_INT 8
8119: PUSH
8120: LD_INT 9
8122: PUSH
8123: LD_INT 10
8125: PUSH
8126: LD_INT 11
8128: PUSH
8129: LD_INT 12
8131: PUSH
8132: LD_INT 13
8134: PUSH
8135: LD_INT 14
8137: PUSH
8138: LD_INT 15
8140: PUSH
8141: LD_INT 16
8143: PUSH
8144: LD_INT 17
8146: PUSH
8147: LD_INT 18
8149: PUSH
8150: LD_INT 19
8152: PUSH
8153: LD_INT 20
8155: PUSH
8156: LD_INT 21
8158: PUSH
8159: LD_INT 22
8161: PUSH
8162: LD_INT 23
8164: PUSH
8165: LD_INT 24
8167: PUSH
8168: LD_INT 25
8170: PUSH
8171: LD_INT 26
8173: PUSH
8174: LD_INT 27
8176: PUSH
8177: LD_INT 28
8179: PUSH
8180: LD_INT 29
8182: PUSH
8183: LD_INT 30
8185: PUSH
8186: LD_INT 31
8188: PUSH
8189: LD_INT 32
8191: PUSH
8192: LD_INT 33
8194: PUSH
8195: LD_INT 34
8197: PUSH
8198: LD_INT 36
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 101
8240: PUSH
8241: LD_INT 102
8243: PUSH
8244: LD_INT 103
8246: PUSH
8247: LD_INT 104
8249: PUSH
8250: LD_INT 105
8252: PUSH
8253: LD_INT 106
8255: PUSH
8256: LD_INT 107
8258: PUSH
8259: LD_INT 108
8261: PUSH
8262: LD_INT 109
8264: PUSH
8265: LD_INT 110
8267: PUSH
8268: LD_INT 111
8270: PUSH
8271: LD_INT 112
8273: PUSH
8274: LD_INT 113
8276: PUSH
8277: LD_INT 114
8279: PUSH
8280: LD_INT 116
8282: PUSH
8283: LD_INT 117
8285: PUSH
8286: LD_INT 118
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: ST_TO_ADDR
8312: GO 9319
8314: LD_INT 15
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8322
8320: GO 8546
8322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8323: LD_ADDR_VAR 0 2
8327: PUSH
8328: LD_INT 1
8330: PUSH
8331: LD_INT 2
8333: PUSH
8334: LD_INT 3
8336: PUSH
8337: LD_INT 4
8339: PUSH
8340: LD_INT 5
8342: PUSH
8343: LD_INT 6
8345: PUSH
8346: LD_INT 7
8348: PUSH
8349: LD_INT 8
8351: PUSH
8352: LD_INT 9
8354: PUSH
8355: LD_INT 10
8357: PUSH
8358: LD_INT 11
8360: PUSH
8361: LD_INT 12
8363: PUSH
8364: LD_INT 13
8366: PUSH
8367: LD_INT 14
8369: PUSH
8370: LD_INT 15
8372: PUSH
8373: LD_INT 16
8375: PUSH
8376: LD_INT 17
8378: PUSH
8379: LD_INT 18
8381: PUSH
8382: LD_INT 19
8384: PUSH
8385: LD_INT 20
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 22
8393: PUSH
8394: LD_INT 23
8396: PUSH
8397: LD_INT 24
8399: PUSH
8400: LD_INT 25
8402: PUSH
8403: LD_INT 26
8405: PUSH
8406: LD_INT 27
8408: PUSH
8409: LD_INT 28
8411: PUSH
8412: LD_INT 29
8414: PUSH
8415: LD_INT 30
8417: PUSH
8418: LD_INT 31
8420: PUSH
8421: LD_INT 32
8423: PUSH
8424: LD_INT 33
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 36
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 101
8472: PUSH
8473: LD_INT 102
8475: PUSH
8476: LD_INT 103
8478: PUSH
8479: LD_INT 104
8481: PUSH
8482: LD_INT 105
8484: PUSH
8485: LD_INT 106
8487: PUSH
8488: LD_INT 107
8490: PUSH
8491: LD_INT 108
8493: PUSH
8494: LD_INT 109
8496: PUSH
8497: LD_INT 110
8499: PUSH
8500: LD_INT 111
8502: PUSH
8503: LD_INT 112
8505: PUSH
8506: LD_INT 113
8508: PUSH
8509: LD_INT 114
8511: PUSH
8512: LD_INT 116
8514: PUSH
8515: LD_INT 117
8517: PUSH
8518: LD_INT 118
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: ST_TO_ADDR
8544: GO 9319
8546: LD_INT 16
8548: DOUBLE
8549: EQUAL
8550: IFTRUE 8554
8552: GO 8690
8554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8555: LD_ADDR_VAR 0 2
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: LD_INT 4
8565: PUSH
8566: LD_INT 5
8568: PUSH
8569: LD_INT 7
8571: PUSH
8572: LD_INT 11
8574: PUSH
8575: LD_INT 12
8577: PUSH
8578: LD_INT 15
8580: PUSH
8581: LD_INT 16
8583: PUSH
8584: LD_INT 20
8586: PUSH
8587: LD_INT 21
8589: PUSH
8590: LD_INT 22
8592: PUSH
8593: LD_INT 23
8595: PUSH
8596: LD_INT 25
8598: PUSH
8599: LD_INT 26
8601: PUSH
8602: LD_INT 30
8604: PUSH
8605: LD_INT 31
8607: PUSH
8608: LD_INT 32
8610: PUSH
8611: LD_INT 33
8613: PUSH
8614: LD_INT 34
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 101
8640: PUSH
8641: LD_INT 102
8643: PUSH
8644: LD_INT 103
8646: PUSH
8647: LD_INT 106
8649: PUSH
8650: LD_INT 108
8652: PUSH
8653: LD_INT 112
8655: PUSH
8656: LD_INT 113
8658: PUSH
8659: LD_INT 114
8661: PUSH
8662: LD_INT 116
8664: PUSH
8665: LD_INT 117
8667: PUSH
8668: LD_INT 118
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: ST_TO_ADDR
8688: GO 9319
8690: LD_INT 17
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8922
8698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8699: LD_ADDR_VAR 0 2
8703: PUSH
8704: LD_INT 1
8706: PUSH
8707: LD_INT 2
8709: PUSH
8710: LD_INT 3
8712: PUSH
8713: LD_INT 4
8715: PUSH
8716: LD_INT 5
8718: PUSH
8719: LD_INT 6
8721: PUSH
8722: LD_INT 7
8724: PUSH
8725: LD_INT 8
8727: PUSH
8728: LD_INT 9
8730: PUSH
8731: LD_INT 10
8733: PUSH
8734: LD_INT 11
8736: PUSH
8737: LD_INT 12
8739: PUSH
8740: LD_INT 13
8742: PUSH
8743: LD_INT 14
8745: PUSH
8746: LD_INT 15
8748: PUSH
8749: LD_INT 16
8751: PUSH
8752: LD_INT 17
8754: PUSH
8755: LD_INT 18
8757: PUSH
8758: LD_INT 19
8760: PUSH
8761: LD_INT 20
8763: PUSH
8764: LD_INT 21
8766: PUSH
8767: LD_INT 22
8769: PUSH
8770: LD_INT 23
8772: PUSH
8773: LD_INT 24
8775: PUSH
8776: LD_INT 25
8778: PUSH
8779: LD_INT 26
8781: PUSH
8782: LD_INT 27
8784: PUSH
8785: LD_INT 28
8787: PUSH
8788: LD_INT 29
8790: PUSH
8791: LD_INT 30
8793: PUSH
8794: LD_INT 31
8796: PUSH
8797: LD_INT 32
8799: PUSH
8800: LD_INT 33
8802: PUSH
8803: LD_INT 34
8805: PUSH
8806: LD_INT 36
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 101
8848: PUSH
8849: LD_INT 102
8851: PUSH
8852: LD_INT 103
8854: PUSH
8855: LD_INT 104
8857: PUSH
8858: LD_INT 105
8860: PUSH
8861: LD_INT 106
8863: PUSH
8864: LD_INT 107
8866: PUSH
8867: LD_INT 108
8869: PUSH
8870: LD_INT 109
8872: PUSH
8873: LD_INT 110
8875: PUSH
8876: LD_INT 111
8878: PUSH
8879: LD_INT 112
8881: PUSH
8882: LD_INT 113
8884: PUSH
8885: LD_INT 114
8887: PUSH
8888: LD_INT 116
8890: PUSH
8891: LD_INT 117
8893: PUSH
8894: LD_INT 118
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: ST_TO_ADDR
8920: GO 9319
8922: LD_INT 18
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 9078
8930: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8931: LD_ADDR_VAR 0 2
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: LD_INT 4
8941: PUSH
8942: LD_INT 5
8944: PUSH
8945: LD_INT 7
8947: PUSH
8948: LD_INT 11
8950: PUSH
8951: LD_INT 12
8953: PUSH
8954: LD_INT 15
8956: PUSH
8957: LD_INT 16
8959: PUSH
8960: LD_INT 20
8962: PUSH
8963: LD_INT 21
8965: PUSH
8966: LD_INT 22
8968: PUSH
8969: LD_INT 23
8971: PUSH
8972: LD_INT 25
8974: PUSH
8975: LD_INT 26
8977: PUSH
8978: LD_INT 30
8980: PUSH
8981: LD_INT 31
8983: PUSH
8984: LD_INT 32
8986: PUSH
8987: LD_INT 33
8989: PUSH
8990: LD_INT 34
8992: PUSH
8993: LD_INT 35
8995: PUSH
8996: LD_INT 36
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 101
9024: PUSH
9025: LD_INT 102
9027: PUSH
9028: LD_INT 103
9030: PUSH
9031: LD_INT 106
9033: PUSH
9034: LD_INT 108
9036: PUSH
9037: LD_INT 112
9039: PUSH
9040: LD_INT 113
9042: PUSH
9043: LD_INT 114
9045: PUSH
9046: LD_INT 115
9048: PUSH
9049: LD_INT 116
9051: PUSH
9052: LD_INT 117
9054: PUSH
9055: LD_INT 118
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: ST_TO_ADDR
9076: GO 9319
9078: LD_INT 19
9080: DOUBLE
9081: EQUAL
9082: IFTRUE 9086
9084: GO 9318
9086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9087: LD_ADDR_VAR 0 2
9091: PUSH
9092: LD_INT 1
9094: PUSH
9095: LD_INT 2
9097: PUSH
9098: LD_INT 3
9100: PUSH
9101: LD_INT 4
9103: PUSH
9104: LD_INT 5
9106: PUSH
9107: LD_INT 6
9109: PUSH
9110: LD_INT 7
9112: PUSH
9113: LD_INT 8
9115: PUSH
9116: LD_INT 9
9118: PUSH
9119: LD_INT 10
9121: PUSH
9122: LD_INT 11
9124: PUSH
9125: LD_INT 12
9127: PUSH
9128: LD_INT 13
9130: PUSH
9131: LD_INT 14
9133: PUSH
9134: LD_INT 15
9136: PUSH
9137: LD_INT 16
9139: PUSH
9140: LD_INT 17
9142: PUSH
9143: LD_INT 18
9145: PUSH
9146: LD_INT 19
9148: PUSH
9149: LD_INT 20
9151: PUSH
9152: LD_INT 21
9154: PUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 23
9160: PUSH
9161: LD_INT 24
9163: PUSH
9164: LD_INT 25
9166: PUSH
9167: LD_INT 26
9169: PUSH
9170: LD_INT 27
9172: PUSH
9173: LD_INT 28
9175: PUSH
9176: LD_INT 29
9178: PUSH
9179: LD_INT 30
9181: PUSH
9182: LD_INT 31
9184: PUSH
9185: LD_INT 32
9187: PUSH
9188: LD_INT 33
9190: PUSH
9191: LD_INT 34
9193: PUSH
9194: LD_INT 35
9196: PUSH
9197: LD_INT 36
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 101
9240: PUSH
9241: LD_INT 102
9243: PUSH
9244: LD_INT 103
9246: PUSH
9247: LD_INT 104
9249: PUSH
9250: LD_INT 105
9252: PUSH
9253: LD_INT 106
9255: PUSH
9256: LD_INT 107
9258: PUSH
9259: LD_INT 108
9261: PUSH
9262: LD_INT 109
9264: PUSH
9265: LD_INT 110
9267: PUSH
9268: LD_INT 111
9270: PUSH
9271: LD_INT 112
9273: PUSH
9274: LD_INT 113
9276: PUSH
9277: LD_INT 114
9279: PUSH
9280: LD_INT 115
9282: PUSH
9283: LD_INT 116
9285: PUSH
9286: LD_INT 117
9288: PUSH
9289: LD_INT 118
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: ST_TO_ADDR
9316: GO 9319
9318: POP
// end else
9319: GO 9550
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_INT 1
9328: PUSH
9329: LD_INT 2
9331: PUSH
9332: LD_INT 3
9334: PUSH
9335: LD_INT 4
9337: PUSH
9338: LD_INT 5
9340: PUSH
9341: LD_INT 6
9343: PUSH
9344: LD_INT 7
9346: PUSH
9347: LD_INT 8
9349: PUSH
9350: LD_INT 9
9352: PUSH
9353: LD_INT 10
9355: PUSH
9356: LD_INT 11
9358: PUSH
9359: LD_INT 12
9361: PUSH
9362: LD_INT 13
9364: PUSH
9365: LD_INT 14
9367: PUSH
9368: LD_INT 15
9370: PUSH
9371: LD_INT 16
9373: PUSH
9374: LD_INT 17
9376: PUSH
9377: LD_INT 18
9379: PUSH
9380: LD_INT 19
9382: PUSH
9383: LD_INT 20
9385: PUSH
9386: LD_INT 21
9388: PUSH
9389: LD_INT 22
9391: PUSH
9392: LD_INT 23
9394: PUSH
9395: LD_INT 24
9397: PUSH
9398: LD_INT 25
9400: PUSH
9401: LD_INT 26
9403: PUSH
9404: LD_INT 27
9406: PUSH
9407: LD_INT 28
9409: PUSH
9410: LD_INT 29
9412: PUSH
9413: LD_INT 30
9415: PUSH
9416: LD_INT 31
9418: PUSH
9419: LD_INT 32
9421: PUSH
9422: LD_INT 33
9424: PUSH
9425: LD_INT 34
9427: PUSH
9428: LD_INT 35
9430: PUSH
9431: LD_INT 36
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 101
9474: PUSH
9475: LD_INT 102
9477: PUSH
9478: LD_INT 103
9480: PUSH
9481: LD_INT 104
9483: PUSH
9484: LD_INT 105
9486: PUSH
9487: LD_INT 106
9489: PUSH
9490: LD_INT 107
9492: PUSH
9493: LD_INT 108
9495: PUSH
9496: LD_INT 109
9498: PUSH
9499: LD_INT 110
9501: PUSH
9502: LD_INT 111
9504: PUSH
9505: LD_INT 112
9507: PUSH
9508: LD_INT 113
9510: PUSH
9511: LD_INT 114
9513: PUSH
9514: LD_INT 115
9516: PUSH
9517: LD_INT 116
9519: PUSH
9520: LD_INT 117
9522: PUSH
9523: LD_INT 118
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: ST_TO_ADDR
// if result then
9550: LD_VAR 0 2
9554: IFFALSE 10340
// begin normal :=  ;
9556: LD_ADDR_VAR 0 5
9560: PUSH
9561: LD_STRING 
9563: ST_TO_ADDR
// hardcore :=  ;
9564: LD_ADDR_VAR 0 6
9568: PUSH
9569: LD_STRING 
9571: ST_TO_ADDR
// active :=  ;
9572: LD_ADDR_VAR 0 7
9576: PUSH
9577: LD_STRING 
9579: ST_TO_ADDR
// for i = 1 to normalCounter do
9580: LD_ADDR_VAR 0 8
9584: PUSH
9585: DOUBLE
9586: LD_INT 1
9588: DEC
9589: ST_TO_ADDR
9590: LD_EXP 13
9594: PUSH
9595: FOR_TO
9596: IFFALSE 9697
// begin tmp := 0 ;
9598: LD_ADDR_VAR 0 3
9602: PUSH
9603: LD_STRING 0
9605: ST_TO_ADDR
// if result [ 1 ] then
9606: LD_VAR 0 2
9610: PUSH
9611: LD_INT 1
9613: ARRAY
9614: IFFALSE 9679
// if result [ 1 ] [ 1 ] = i then
9616: LD_VAR 0 2
9620: PUSH
9621: LD_INT 1
9623: ARRAY
9624: PUSH
9625: LD_INT 1
9627: ARRAY
9628: PUSH
9629: LD_VAR 0 8
9633: EQUAL
9634: IFFALSE 9679
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9636: LD_ADDR_VAR 0 2
9640: PUSH
9641: LD_VAR 0 2
9645: PPUSH
9646: LD_INT 1
9648: PPUSH
9649: LD_VAR 0 2
9653: PUSH
9654: LD_INT 1
9656: ARRAY
9657: PPUSH
9658: LD_INT 1
9660: PPUSH
9661: CALL_OW 3
9665: PPUSH
9666: CALL_OW 1
9670: ST_TO_ADDR
// tmp := 1 ;
9671: LD_ADDR_VAR 0 3
9675: PUSH
9676: LD_STRING 1
9678: ST_TO_ADDR
// end ; normal := normal & tmp ;
9679: LD_ADDR_VAR 0 5
9683: PUSH
9684: LD_VAR 0 5
9688: PUSH
9689: LD_VAR 0 3
9693: STR
9694: ST_TO_ADDR
// end ;
9695: GO 9595
9697: POP
9698: POP
// for i = 1 to hardcoreCounter do
9699: LD_ADDR_VAR 0 8
9703: PUSH
9704: DOUBLE
9705: LD_INT 1
9707: DEC
9708: ST_TO_ADDR
9709: LD_EXP 14
9713: PUSH
9714: FOR_TO
9715: IFFALSE 9820
// begin tmp := 0 ;
9717: LD_ADDR_VAR 0 3
9721: PUSH
9722: LD_STRING 0
9724: ST_TO_ADDR
// if result [ 2 ] then
9725: LD_VAR 0 2
9729: PUSH
9730: LD_INT 2
9732: ARRAY
9733: IFFALSE 9802
// if result [ 2 ] [ 1 ] = 100 + i then
9735: LD_VAR 0 2
9739: PUSH
9740: LD_INT 2
9742: ARRAY
9743: PUSH
9744: LD_INT 1
9746: ARRAY
9747: PUSH
9748: LD_INT 100
9750: PUSH
9751: LD_VAR 0 8
9755: PLUS
9756: EQUAL
9757: IFFALSE 9802
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9759: LD_ADDR_VAR 0 2
9763: PUSH
9764: LD_VAR 0 2
9768: PPUSH
9769: LD_INT 2
9771: PPUSH
9772: LD_VAR 0 2
9776: PUSH
9777: LD_INT 2
9779: ARRAY
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: CALL_OW 3
9788: PPUSH
9789: CALL_OW 1
9793: ST_TO_ADDR
// tmp := 1 ;
9794: LD_ADDR_VAR 0 3
9798: PUSH
9799: LD_STRING 1
9801: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9802: LD_ADDR_VAR 0 6
9806: PUSH
9807: LD_VAR 0 6
9811: PUSH
9812: LD_VAR 0 3
9816: STR
9817: ST_TO_ADDR
// end ;
9818: GO 9714
9820: POP
9821: POP
// if isGameLoad then
9822: LD_VAR 0 1
9826: IFFALSE 10301
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9828: LD_ADDR_VAR 0 4
9832: PUSH
9833: LD_EXP 17
9837: PUSH
9838: LD_EXP 16
9842: PUSH
9843: LD_EXP 18
9847: PUSH
9848: LD_EXP 15
9852: PUSH
9853: LD_EXP 19
9857: PUSH
9858: LD_EXP 20
9862: PUSH
9863: LD_EXP 21
9867: PUSH
9868: LD_EXP 22
9872: PUSH
9873: LD_EXP 23
9877: PUSH
9878: LD_EXP 24
9882: PUSH
9883: LD_EXP 25
9887: PUSH
9888: LD_EXP 26
9892: PUSH
9893: LD_EXP 27
9897: PUSH
9898: LD_EXP 28
9902: PUSH
9903: LD_EXP 36
9907: PUSH
9908: LD_EXP 37
9912: PUSH
9913: LD_EXP 38
9917: PUSH
9918: LD_EXP 39
9922: PUSH
9923: LD_EXP 41
9927: PUSH
9928: LD_EXP 42
9932: PUSH
9933: LD_EXP 43
9937: PUSH
9938: LD_EXP 46
9942: PUSH
9943: LD_EXP 48
9947: PUSH
9948: LD_EXP 49
9952: PUSH
9953: LD_EXP 50
9957: PUSH
9958: LD_EXP 52
9962: PUSH
9963: LD_EXP 53
9967: PUSH
9968: LD_EXP 56
9972: PUSH
9973: LD_EXP 57
9977: PUSH
9978: LD_EXP 58
9982: PUSH
9983: LD_EXP 59
9987: PUSH
9988: LD_EXP 60
9992: PUSH
9993: LD_EXP 61
9997: PUSH
9998: LD_EXP 62
10002: PUSH
10003: LD_EXP 63
10007: PUSH
10008: LD_EXP 64
10012: PUSH
10013: LD_EXP 29
10017: PUSH
10018: LD_EXP 30
10022: PUSH
10023: LD_EXP 33
10027: PUSH
10028: LD_EXP 34
10032: PUSH
10033: LD_EXP 35
10037: PUSH
10038: LD_EXP 31
10042: PUSH
10043: LD_EXP 32
10047: PUSH
10048: LD_EXP 40
10052: PUSH
10053: LD_EXP 44
10057: PUSH
10058: LD_EXP 45
10062: PUSH
10063: LD_EXP 47
10067: PUSH
10068: LD_EXP 51
10072: PUSH
10073: LD_EXP 54
10077: PUSH
10078: LD_EXP 55
10082: PUSH
10083: LD_EXP 65
10087: PUSH
10088: LD_EXP 66
10092: PUSH
10093: LD_EXP 67
10097: PUSH
10098: LD_EXP 68
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: ST_TO_ADDR
// tmp :=  ;
10159: LD_ADDR_VAR 0 3
10163: PUSH
10164: LD_STRING 
10166: ST_TO_ADDR
// for i = 1 to normalCounter do
10167: LD_ADDR_VAR 0 8
10171: PUSH
10172: DOUBLE
10173: LD_INT 1
10175: DEC
10176: ST_TO_ADDR
10177: LD_EXP 13
10181: PUSH
10182: FOR_TO
10183: IFFALSE 10219
// begin if flags [ i ] then
10185: LD_VAR 0 4
10189: PUSH
10190: LD_VAR 0 8
10194: ARRAY
10195: IFFALSE 10217
// tmp := tmp & i & ; ;
10197: LD_ADDR_VAR 0 3
10201: PUSH
10202: LD_VAR 0 3
10206: PUSH
10207: LD_VAR 0 8
10211: STR
10212: PUSH
10213: LD_STRING ;
10215: STR
10216: ST_TO_ADDR
// end ;
10217: GO 10182
10219: POP
10220: POP
// for i = 1 to hardcoreCounter do
10221: LD_ADDR_VAR 0 8
10225: PUSH
10226: DOUBLE
10227: LD_INT 1
10229: DEC
10230: ST_TO_ADDR
10231: LD_EXP 14
10235: PUSH
10236: FOR_TO
10237: IFFALSE 10283
// begin if flags [ normalCounter + i ] then
10239: LD_VAR 0 4
10243: PUSH
10244: LD_EXP 13
10248: PUSH
10249: LD_VAR 0 8
10253: PLUS
10254: ARRAY
10255: IFFALSE 10281
// tmp := tmp & ( 100 + i ) & ; ;
10257: LD_ADDR_VAR 0 3
10261: PUSH
10262: LD_VAR 0 3
10266: PUSH
10267: LD_INT 100
10269: PUSH
10270: LD_VAR 0 8
10274: PLUS
10275: STR
10276: PUSH
10277: LD_STRING ;
10279: STR
10280: ST_TO_ADDR
// end ;
10281: GO 10236
10283: POP
10284: POP
// if tmp then
10285: LD_VAR 0 3
10289: IFFALSE 10301
// active := tmp ;
10291: LD_ADDR_VAR 0 7
10295: PUSH
10296: LD_VAR 0 3
10300: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10301: LD_STRING getStreamItemsFromMission("
10303: PUSH
10304: LD_VAR 0 5
10308: STR
10309: PUSH
10310: LD_STRING ","
10312: STR
10313: PUSH
10314: LD_VAR 0 6
10318: STR
10319: PUSH
10320: LD_STRING ","
10322: STR
10323: PUSH
10324: LD_VAR 0 7
10328: STR
10329: PUSH
10330: LD_STRING ")
10332: STR
10333: PPUSH
10334: CALL_OW 559
// end else
10338: GO 10347
// ToLua ( getStreamItemsFromMission("","","") ) ;
10340: LD_STRING getStreamItemsFromMission("","","")
10342: PPUSH
10343: CALL_OW 559
// end ;
10347: LD_VAR 0 2
10351: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10352: LD_EXP 12
10356: PUSH
10357: LD_EXP 17
10361: AND
10362: IFFALSE 10486
10364: GO 10366
10366: DISABLE
10367: LD_INT 0
10369: PPUSH
10370: PPUSH
// begin enable ;
10371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10372: LD_ADDR_VAR 0 2
10376: PUSH
10377: LD_INT 22
10379: PUSH
10380: LD_OWVAR 2
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 2
10391: PUSH
10392: LD_INT 34
10394: PUSH
10395: LD_INT 7
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: LD_INT 34
10404: PUSH
10405: LD_INT 45
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 34
10414: PUSH
10415: LD_INT 28
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 34
10424: PUSH
10425: LD_INT 47
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PPUSH
10443: CALL_OW 69
10447: ST_TO_ADDR
// if not tmp then
10448: LD_VAR 0 2
10452: NOT
10453: IFFALSE 10457
// exit ;
10455: GO 10486
// for i in tmp do
10457: LD_ADDR_VAR 0 1
10461: PUSH
10462: LD_VAR 0 2
10466: PUSH
10467: FOR_IN
10468: IFFALSE 10484
// begin SetLives ( i , 0 ) ;
10470: LD_VAR 0 1
10474: PPUSH
10475: LD_INT 0
10477: PPUSH
10478: CALL_OW 234
// end ;
10482: GO 10467
10484: POP
10485: POP
// end ;
10486: PPOPN 2
10488: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10489: LD_EXP 12
10493: PUSH
10494: LD_EXP 18
10498: AND
10499: IFFALSE 10583
10501: GO 10503
10503: DISABLE
10504: LD_INT 0
10506: PPUSH
10507: PPUSH
// begin enable ;
10508: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10509: LD_ADDR_VAR 0 2
10513: PUSH
10514: LD_INT 22
10516: PUSH
10517: LD_OWVAR 2
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 32
10528: PUSH
10529: LD_INT 3
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: ST_TO_ADDR
// if not tmp then
10545: LD_VAR 0 2
10549: NOT
10550: IFFALSE 10554
// exit ;
10552: GO 10583
// for i in tmp do
10554: LD_ADDR_VAR 0 1
10558: PUSH
10559: LD_VAR 0 2
10563: PUSH
10564: FOR_IN
10565: IFFALSE 10581
// begin SetLives ( i , 0 ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_INT 0
10574: PPUSH
10575: CALL_OW 234
// end ;
10579: GO 10564
10581: POP
10582: POP
// end ;
10583: PPOPN 2
10585: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10586: LD_EXP 12
10590: PUSH
10591: LD_EXP 15
10595: AND
10596: IFFALSE 10689
10598: GO 10600
10600: DISABLE
10601: LD_INT 0
10603: PPUSH
// begin enable ;
10604: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10605: LD_ADDR_VAR 0 1
10609: PUSH
10610: LD_INT 22
10612: PUSH
10613: LD_OWVAR 2
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 2
10624: PUSH
10625: LD_INT 25
10627: PUSH
10628: LD_INT 5
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 25
10637: PUSH
10638: LD_INT 9
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 25
10647: PUSH
10648: LD_INT 8
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PPUSH
10665: CALL_OW 69
10669: PUSH
10670: FOR_IN
10671: IFFALSE 10687
// begin SetClass ( i , 1 ) ;
10673: LD_VAR 0 1
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 336
// end ;
10685: GO 10670
10687: POP
10688: POP
// end ;
10689: PPOPN 1
10691: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10692: LD_EXP 12
10696: PUSH
10697: LD_EXP 16
10701: AND
10702: PUSH
10703: LD_OWVAR 65
10707: PUSH
10708: LD_INT 7
10710: LESS
10711: AND
10712: IFFALSE 10726
10714: GO 10716
10716: DISABLE
// begin enable ;
10717: ENABLE
// game_speed := 7 ;
10718: LD_ADDR_OWVAR 65
10722: PUSH
10723: LD_INT 7
10725: ST_TO_ADDR
// end ;
10726: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10727: LD_EXP 12
10731: PUSH
10732: LD_EXP 19
10736: AND
10737: IFFALSE 10939
10739: GO 10741
10741: DISABLE
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
10746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10747: LD_ADDR_VAR 0 3
10751: PUSH
10752: LD_INT 81
10754: PUSH
10755: LD_OWVAR 2
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 21
10766: PUSH
10767: LD_INT 1
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 69
10782: ST_TO_ADDR
// if not tmp then
10783: LD_VAR 0 3
10787: NOT
10788: IFFALSE 10792
// exit ;
10790: GO 10939
// if tmp > 5 then
10792: LD_VAR 0 3
10796: PUSH
10797: LD_INT 5
10799: GREATER
10800: IFFALSE 10812
// k := 5 else
10802: LD_ADDR_VAR 0 2
10806: PUSH
10807: LD_INT 5
10809: ST_TO_ADDR
10810: GO 10822
// k := tmp ;
10812: LD_ADDR_VAR 0 2
10816: PUSH
10817: LD_VAR 0 3
10821: ST_TO_ADDR
// for i := 1 to k do
10822: LD_ADDR_VAR 0 1
10826: PUSH
10827: DOUBLE
10828: LD_INT 1
10830: DEC
10831: ST_TO_ADDR
10832: LD_VAR 0 2
10836: PUSH
10837: FOR_TO
10838: IFFALSE 10937
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10840: LD_VAR 0 3
10844: PUSH
10845: LD_VAR 0 1
10849: ARRAY
10850: PPUSH
10851: LD_VAR 0 1
10855: PUSH
10856: LD_INT 4
10858: MOD
10859: PUSH
10860: LD_INT 1
10862: PLUS
10863: PPUSH
10864: CALL_OW 259
10868: PUSH
10869: LD_INT 10
10871: LESS
10872: IFFALSE 10935
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10874: LD_VAR 0 3
10878: PUSH
10879: LD_VAR 0 1
10883: ARRAY
10884: PPUSH
10885: LD_VAR 0 1
10889: PUSH
10890: LD_INT 4
10892: MOD
10893: PUSH
10894: LD_INT 1
10896: PLUS
10897: PPUSH
10898: LD_VAR 0 3
10902: PUSH
10903: LD_VAR 0 1
10907: ARRAY
10908: PPUSH
10909: LD_VAR 0 1
10913: PUSH
10914: LD_INT 4
10916: MOD
10917: PUSH
10918: LD_INT 1
10920: PLUS
10921: PPUSH
10922: CALL_OW 259
10926: PUSH
10927: LD_INT 1
10929: PLUS
10930: PPUSH
10931: CALL_OW 237
10935: GO 10837
10937: POP
10938: POP
// end ;
10939: PPOPN 3
10941: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10942: LD_EXP 12
10946: PUSH
10947: LD_EXP 20
10951: AND
10952: IFFALSE 10972
10954: GO 10956
10956: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10957: LD_INT 4
10959: PPUSH
10960: LD_OWVAR 2
10964: PPUSH
10965: LD_INT 0
10967: PPUSH
10968: CALL_OW 324
10972: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10973: LD_EXP 12
10977: PUSH
10978: LD_EXP 49
10982: AND
10983: IFFALSE 11003
10985: GO 10987
10987: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10988: LD_INT 19
10990: PPUSH
10991: LD_OWVAR 2
10995: PPUSH
10996: LD_INT 0
10998: PPUSH
10999: CALL_OW 324
11003: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11004: LD_EXP 12
11008: PUSH
11009: LD_EXP 21
11013: AND
11014: IFFALSE 11116
11016: GO 11018
11018: DISABLE
11019: LD_INT 0
11021: PPUSH
11022: PPUSH
// begin enable ;
11023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11024: LD_ADDR_VAR 0 2
11028: PUSH
11029: LD_INT 22
11031: PUSH
11032: LD_OWVAR 2
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: LD_INT 34
11046: PUSH
11047: LD_INT 11
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 34
11056: PUSH
11057: LD_INT 30
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PPUSH
11073: CALL_OW 69
11077: ST_TO_ADDR
// if not tmp then
11078: LD_VAR 0 2
11082: NOT
11083: IFFALSE 11087
// exit ;
11085: GO 11116
// for i in tmp do
11087: LD_ADDR_VAR 0 1
11091: PUSH
11092: LD_VAR 0 2
11096: PUSH
11097: FOR_IN
11098: IFFALSE 11114
// begin SetLives ( i , 0 ) ;
11100: LD_VAR 0 1
11104: PPUSH
11105: LD_INT 0
11107: PPUSH
11108: CALL_OW 234
// end ;
11112: GO 11097
11114: POP
11115: POP
// end ;
11116: PPOPN 2
11118: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11119: LD_EXP 12
11123: PUSH
11124: LD_EXP 22
11128: AND
11129: IFFALSE 11149
11131: GO 11133
11133: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11134: LD_INT 32
11136: PPUSH
11137: LD_OWVAR 2
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 324
11149: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11150: LD_EXP 12
11154: PUSH
11155: LD_EXP 23
11159: AND
11160: IFFALSE 11341
11162: GO 11164
11164: DISABLE
11165: LD_INT 0
11167: PPUSH
11168: PPUSH
11169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11170: LD_ADDR_VAR 0 2
11174: PUSH
11175: LD_INT 22
11177: PUSH
11178: LD_OWVAR 2
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 33
11189: PUSH
11190: LD_INT 3
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PPUSH
11201: CALL_OW 69
11205: ST_TO_ADDR
// if not tmp then
11206: LD_VAR 0 2
11210: NOT
11211: IFFALSE 11215
// exit ;
11213: GO 11341
// side := 0 ;
11215: LD_ADDR_VAR 0 3
11219: PUSH
11220: LD_INT 0
11222: ST_TO_ADDR
// for i := 1 to 8 do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: DOUBLE
11229: LD_INT 1
11231: DEC
11232: ST_TO_ADDR
11233: LD_INT 8
11235: PUSH
11236: FOR_TO
11237: IFFALSE 11285
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11239: LD_OWVAR 2
11243: PUSH
11244: LD_VAR 0 1
11248: NONEQUAL
11249: PUSH
11250: LD_OWVAR 2
11254: PPUSH
11255: LD_VAR 0 1
11259: PPUSH
11260: CALL_OW 81
11264: PUSH
11265: LD_INT 2
11267: EQUAL
11268: AND
11269: IFFALSE 11283
// begin side := i ;
11271: LD_ADDR_VAR 0 3
11275: PUSH
11276: LD_VAR 0 1
11280: ST_TO_ADDR
// break ;
11281: GO 11285
// end ;
11283: GO 11236
11285: POP
11286: POP
// if not side then
11287: LD_VAR 0 3
11291: NOT
11292: IFFALSE 11296
// exit ;
11294: GO 11341
// for i := 1 to tmp do
11296: LD_ADDR_VAR 0 1
11300: PUSH
11301: DOUBLE
11302: LD_INT 1
11304: DEC
11305: ST_TO_ADDR
11306: LD_VAR 0 2
11310: PUSH
11311: FOR_TO
11312: IFFALSE 11339
// if Prob ( 60 ) then
11314: LD_INT 60
11316: PPUSH
11317: CALL_OW 13
11321: IFFALSE 11337
// SetSide ( i , side ) ;
11323: LD_VAR 0 1
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: CALL_OW 235
11337: GO 11311
11339: POP
11340: POP
// end ;
11341: PPOPN 3
11343: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11344: LD_EXP 12
11348: PUSH
11349: LD_EXP 25
11353: AND
11354: IFFALSE 11473
11356: GO 11358
11358: DISABLE
11359: LD_INT 0
11361: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11362: LD_ADDR_VAR 0 1
11366: PUSH
11367: LD_INT 22
11369: PUSH
11370: LD_OWVAR 2
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 21
11381: PUSH
11382: LD_INT 1
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 3
11391: PUSH
11392: LD_INT 23
11394: PUSH
11395: LD_INT 0
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 69
11415: PUSH
11416: FOR_IN
11417: IFFALSE 11471
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11419: LD_VAR 0 1
11423: PPUSH
11424: CALL_OW 257
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: LD_INT 2
11434: PUSH
11435: LD_INT 3
11437: PUSH
11438: LD_INT 4
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: IN
11447: IFFALSE 11469
// SetClass ( un , rand ( 1 , 4 ) ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: LD_INT 1
11456: PPUSH
11457: LD_INT 4
11459: PPUSH
11460: CALL_OW 12
11464: PPUSH
11465: CALL_OW 336
11469: GO 11416
11471: POP
11472: POP
// end ;
11473: PPOPN 1
11475: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11476: LD_EXP 12
11480: PUSH
11481: LD_EXP 24
11485: AND
11486: IFFALSE 11565
11488: GO 11490
11490: DISABLE
11491: LD_INT 0
11493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11494: LD_ADDR_VAR 0 1
11498: PUSH
11499: LD_INT 22
11501: PUSH
11502: LD_OWVAR 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 21
11513: PUSH
11514: LD_INT 3
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 69
11529: ST_TO_ADDR
// if not tmp then
11530: LD_VAR 0 1
11534: NOT
11535: IFFALSE 11539
// exit ;
11537: GO 11565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11539: LD_VAR 0 1
11543: PUSH
11544: LD_INT 1
11546: PPUSH
11547: LD_VAR 0 1
11551: PPUSH
11552: CALL_OW 12
11556: ARRAY
11557: PPUSH
11558: LD_INT 100
11560: PPUSH
11561: CALL_OW 234
// end ;
11565: PPOPN 1
11567: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11568: LD_EXP 12
11572: PUSH
11573: LD_EXP 26
11577: AND
11578: IFFALSE 11676
11580: GO 11582
11582: DISABLE
11583: LD_INT 0
11585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11586: LD_ADDR_VAR 0 1
11590: PUSH
11591: LD_INT 22
11593: PUSH
11594: LD_OWVAR 2
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 69
11621: ST_TO_ADDR
// if not tmp then
11622: LD_VAR 0 1
11626: NOT
11627: IFFALSE 11631
// exit ;
11629: GO 11676
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11631: LD_VAR 0 1
11635: PUSH
11636: LD_INT 1
11638: PPUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 12
11648: ARRAY
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: LD_INT 4
11655: PPUSH
11656: CALL_OW 12
11660: PPUSH
11661: LD_INT 3000
11663: PPUSH
11664: LD_INT 9000
11666: PPUSH
11667: CALL_OW 12
11671: PPUSH
11672: CALL_OW 492
// end ;
11676: PPOPN 1
11678: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11679: LD_EXP 12
11683: PUSH
11684: LD_EXP 27
11688: AND
11689: IFFALSE 11709
11691: GO 11693
11693: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11694: LD_INT 1
11696: PPUSH
11697: LD_OWVAR 2
11701: PPUSH
11702: LD_INT 0
11704: PPUSH
11705: CALL_OW 324
11709: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11710: LD_EXP 12
11714: PUSH
11715: LD_EXP 28
11719: AND
11720: IFFALSE 11803
11722: GO 11724
11724: DISABLE
11725: LD_INT 0
11727: PPUSH
11728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11729: LD_ADDR_VAR 0 2
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_OWVAR 2
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 21
11748: PUSH
11749: LD_INT 3
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PPUSH
11760: CALL_OW 69
11764: ST_TO_ADDR
// if not tmp then
11765: LD_VAR 0 2
11769: NOT
11770: IFFALSE 11774
// exit ;
11772: GO 11803
// for i in tmp do
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: FOR_IN
11785: IFFALSE 11801
// SetBLevel ( i , 10 ) ;
11787: LD_VAR 0 1
11791: PPUSH
11792: LD_INT 10
11794: PPUSH
11795: CALL_OW 241
11799: GO 11784
11801: POP
11802: POP
// end ;
11803: PPOPN 2
11805: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11806: LD_EXP 12
11810: PUSH
11811: LD_EXP 29
11815: AND
11816: IFFALSE 11927
11818: GO 11820
11820: DISABLE
11821: LD_INT 0
11823: PPUSH
11824: PPUSH
11825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11826: LD_ADDR_VAR 0 3
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_OWVAR 2
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 25
11845: PUSH
11846: LD_INT 1
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PPUSH
11857: CALL_OW 69
11861: ST_TO_ADDR
// if not tmp then
11862: LD_VAR 0 3
11866: NOT
11867: IFFALSE 11871
// exit ;
11869: GO 11927
// un := tmp [ rand ( 1 , tmp ) ] ;
11871: LD_ADDR_VAR 0 2
11875: PUSH
11876: LD_VAR 0 3
11880: PUSH
11881: LD_INT 1
11883: PPUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: CALL_OW 12
11893: ARRAY
11894: ST_TO_ADDR
// if Crawls ( un ) then
11895: LD_VAR 0 2
11899: PPUSH
11900: CALL_OW 318
11904: IFFALSE 11915
// ComWalk ( un ) ;
11906: LD_VAR 0 2
11910: PPUSH
11911: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11915: LD_VAR 0 2
11919: PPUSH
11920: LD_INT 5
11922: PPUSH
11923: CALL_OW 336
// end ;
11927: PPOPN 3
11929: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11930: LD_EXP 12
11934: PUSH
11935: LD_EXP 30
11939: AND
11940: PUSH
11941: LD_OWVAR 67
11945: PUSH
11946: LD_INT 4
11948: LESS
11949: AND
11950: IFFALSE 11969
11952: GO 11954
11954: DISABLE
// begin Difficulty := Difficulty + 1 ;
11955: LD_ADDR_OWVAR 67
11959: PUSH
11960: LD_OWVAR 67
11964: PUSH
11965: LD_INT 1
11967: PLUS
11968: ST_TO_ADDR
// end ;
11969: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11970: LD_EXP 12
11974: PUSH
11975: LD_EXP 31
11979: AND
11980: IFFALSE 12083
11982: GO 11984
11984: DISABLE
11985: LD_INT 0
11987: PPUSH
// begin for i := 1 to 5 do
11988: LD_ADDR_VAR 0 1
11992: PUSH
11993: DOUBLE
11994: LD_INT 1
11996: DEC
11997: ST_TO_ADDR
11998: LD_INT 5
12000: PUSH
12001: FOR_TO
12002: IFFALSE 12081
// begin uc_nation := nation_nature ;
12004: LD_ADDR_OWVAR 21
12008: PUSH
12009: LD_INT 0
12011: ST_TO_ADDR
// uc_side := 0 ;
12012: LD_ADDR_OWVAR 20
12016: PUSH
12017: LD_INT 0
12019: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12020: LD_ADDR_OWVAR 29
12024: PUSH
12025: LD_INT 12
12027: PUSH
12028: LD_INT 12
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: ST_TO_ADDR
// hc_agressivity := 20 ;
12035: LD_ADDR_OWVAR 35
12039: PUSH
12040: LD_INT 20
12042: ST_TO_ADDR
// hc_class := class_tiger ;
12043: LD_ADDR_OWVAR 28
12047: PUSH
12048: LD_INT 14
12050: ST_TO_ADDR
// hc_gallery :=  ;
12051: LD_ADDR_OWVAR 33
12055: PUSH
12056: LD_STRING 
12058: ST_TO_ADDR
// hc_name :=  ;
12059: LD_ADDR_OWVAR 26
12063: PUSH
12064: LD_STRING 
12066: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12067: CALL_OW 44
12071: PPUSH
12072: LD_INT 0
12074: PPUSH
12075: CALL_OW 51
// end ;
12079: GO 12001
12081: POP
12082: POP
// end ;
12083: PPOPN 1
12085: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12086: LD_EXP 12
12090: PUSH
12091: LD_EXP 32
12095: AND
12096: IFFALSE 12105
12098: GO 12100
12100: DISABLE
// StreamSibBomb ;
12101: CALL 12106 0 0
12105: END
// export function StreamSibBomb ; var i , x , y ; begin
12106: LD_INT 0
12108: PPUSH
12109: PPUSH
12110: PPUSH
12111: PPUSH
// result := false ;
12112: LD_ADDR_VAR 0 1
12116: PUSH
12117: LD_INT 0
12119: ST_TO_ADDR
// for i := 1 to 16 do
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: DOUBLE
12126: LD_INT 1
12128: DEC
12129: ST_TO_ADDR
12130: LD_INT 16
12132: PUSH
12133: FOR_TO
12134: IFFALSE 12333
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12136: LD_ADDR_VAR 0 3
12140: PUSH
12141: LD_INT 10
12143: PUSH
12144: LD_INT 20
12146: PUSH
12147: LD_INT 30
12149: PUSH
12150: LD_INT 40
12152: PUSH
12153: LD_INT 50
12155: PUSH
12156: LD_INT 60
12158: PUSH
12159: LD_INT 70
12161: PUSH
12162: LD_INT 80
12164: PUSH
12165: LD_INT 90
12167: PUSH
12168: LD_INT 100
12170: PUSH
12171: LD_INT 110
12173: PUSH
12174: LD_INT 120
12176: PUSH
12177: LD_INT 130
12179: PUSH
12180: LD_INT 140
12182: PUSH
12183: LD_INT 150
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 1
12205: PPUSH
12206: LD_INT 15
12208: PPUSH
12209: CALL_OW 12
12213: ARRAY
12214: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12215: LD_ADDR_VAR 0 4
12219: PUSH
12220: LD_INT 10
12222: PUSH
12223: LD_INT 20
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 40
12231: PUSH
12232: LD_INT 50
12234: PUSH
12235: LD_INT 60
12237: PUSH
12238: LD_INT 70
12240: PUSH
12241: LD_INT 80
12243: PUSH
12244: LD_INT 90
12246: PUSH
12247: LD_INT 100
12249: PUSH
12250: LD_INT 110
12252: PUSH
12253: LD_INT 120
12255: PUSH
12256: LD_INT 130
12258: PUSH
12259: LD_INT 140
12261: PUSH
12262: LD_INT 150
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 1
12284: PPUSH
12285: LD_INT 15
12287: PPUSH
12288: CALL_OW 12
12292: ARRAY
12293: ST_TO_ADDR
// if ValidHex ( x , y ) then
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_VAR 0 4
12303: PPUSH
12304: CALL_OW 488
12308: IFFALSE 12331
// begin result := [ x , y ] ;
12310: LD_ADDR_VAR 0 1
12314: PUSH
12315: LD_VAR 0 3
12319: PUSH
12320: LD_VAR 0 4
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: ST_TO_ADDR
// break ;
12329: GO 12333
// end ; end ;
12331: GO 12133
12333: POP
12334: POP
// if result then
12335: LD_VAR 0 1
12339: IFFALSE 12399
// begin ToLua ( playSibBomb() ) ;
12341: LD_STRING playSibBomb()
12343: PPUSH
12344: CALL_OW 559
// wait ( 0 0$14 ) ;
12348: LD_INT 490
12350: PPUSH
12351: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12355: LD_VAR 0 1
12359: PUSH
12360: LD_INT 1
12362: ARRAY
12363: PPUSH
12364: LD_VAR 0 1
12368: PUSH
12369: LD_INT 2
12371: ARRAY
12372: PPUSH
12373: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12377: LD_VAR 0 1
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PPUSH
12386: LD_VAR 0 1
12390: PUSH
12391: LD_INT 2
12393: ARRAY
12394: PPUSH
12395: CALL_OW 429
// end ; end ;
12399: LD_VAR 0 1
12403: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12404: LD_EXP 12
12408: PUSH
12409: LD_EXP 34
12413: AND
12414: IFFALSE 12426
12416: GO 12418
12418: DISABLE
// YouLost (  ) ;
12419: LD_STRING 
12421: PPUSH
12422: CALL_OW 104
12426: END
// every 0 0$1 trigger StreamModeActive and sFog do
12427: LD_EXP 12
12431: PUSH
12432: LD_EXP 33
12436: AND
12437: IFFALSE 12451
12439: GO 12441
12441: DISABLE
// FogOff ( your_side ) ;
12442: LD_OWVAR 2
12446: PPUSH
12447: CALL_OW 344
12451: END
// every 0 0$1 trigger StreamModeActive and sSun do
12452: LD_EXP 12
12456: PUSH
12457: LD_EXP 35
12461: AND
12462: IFFALSE 12490
12464: GO 12466
12466: DISABLE
// begin solar_recharge_percent := 0 ;
12467: LD_ADDR_OWVAR 79
12471: PUSH
12472: LD_INT 0
12474: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12475: LD_INT 10500
12477: PPUSH
12478: CALL_OW 67
// solar_recharge_percent := 100 ;
12482: LD_ADDR_OWVAR 79
12486: PUSH
12487: LD_INT 100
12489: ST_TO_ADDR
// end ;
12490: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12491: LD_EXP 12
12495: PUSH
12496: LD_EXP 36
12500: AND
12501: IFFALSE 12740
12503: GO 12505
12505: DISABLE
12506: LD_INT 0
12508: PPUSH
12509: PPUSH
12510: PPUSH
// begin tmp := [ ] ;
12511: LD_ADDR_VAR 0 3
12515: PUSH
12516: EMPTY
12517: ST_TO_ADDR
// for i := 1 to 6 do
12518: LD_ADDR_VAR 0 1
12522: PUSH
12523: DOUBLE
12524: LD_INT 1
12526: DEC
12527: ST_TO_ADDR
12528: LD_INT 6
12530: PUSH
12531: FOR_TO
12532: IFFALSE 12637
// begin uc_nation := nation_nature ;
12534: LD_ADDR_OWVAR 21
12538: PUSH
12539: LD_INT 0
12541: ST_TO_ADDR
// uc_side := 0 ;
12542: LD_ADDR_OWVAR 20
12546: PUSH
12547: LD_INT 0
12549: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12550: LD_ADDR_OWVAR 29
12554: PUSH
12555: LD_INT 12
12557: PUSH
12558: LD_INT 12
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: ST_TO_ADDR
// hc_agressivity := 20 ;
12565: LD_ADDR_OWVAR 35
12569: PUSH
12570: LD_INT 20
12572: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12573: LD_ADDR_OWVAR 28
12577: PUSH
12578: LD_INT 17
12580: ST_TO_ADDR
// hc_gallery :=  ;
12581: LD_ADDR_OWVAR 33
12585: PUSH
12586: LD_STRING 
12588: ST_TO_ADDR
// hc_name :=  ;
12589: LD_ADDR_OWVAR 26
12593: PUSH
12594: LD_STRING 
12596: ST_TO_ADDR
// un := CreateHuman ;
12597: LD_ADDR_VAR 0 2
12601: PUSH
12602: CALL_OW 44
12606: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12607: LD_VAR 0 2
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 51
// tmp := tmp ^ un ;
12619: LD_ADDR_VAR 0 3
12623: PUSH
12624: LD_VAR 0 3
12628: PUSH
12629: LD_VAR 0 2
12633: ADD
12634: ST_TO_ADDR
// end ;
12635: GO 12531
12637: POP
12638: POP
// repeat wait ( 0 0$1 ) ;
12639: LD_INT 35
12641: PPUSH
12642: CALL_OW 67
// for un in tmp do
12646: LD_ADDR_VAR 0 2
12650: PUSH
12651: LD_VAR 0 3
12655: PUSH
12656: FOR_IN
12657: IFFALSE 12731
// begin if IsDead ( un ) then
12659: LD_VAR 0 2
12663: PPUSH
12664: CALL_OW 301
12668: IFFALSE 12688
// begin tmp := tmp diff un ;
12670: LD_ADDR_VAR 0 3
12674: PUSH
12675: LD_VAR 0 3
12679: PUSH
12680: LD_VAR 0 2
12684: DIFF
12685: ST_TO_ADDR
// continue ;
12686: GO 12656
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12688: LD_VAR 0 2
12692: PPUSH
12693: LD_INT 3
12695: PUSH
12696: LD_INT 22
12698: PUSH
12699: LD_INT 0
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PPUSH
12710: CALL_OW 69
12714: PPUSH
12715: LD_VAR 0 2
12719: PPUSH
12720: CALL_OW 74
12724: PPUSH
12725: CALL_OW 115
// end ;
12729: GO 12656
12731: POP
12732: POP
// until not tmp ;
12733: LD_VAR 0 3
12737: NOT
12738: IFFALSE 12639
// end ;
12740: PPOPN 3
12742: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12743: LD_EXP 12
12747: PUSH
12748: LD_EXP 37
12752: AND
12753: IFFALSE 12807
12755: GO 12757
12757: DISABLE
// begin ToLua ( displayTroll(); ) ;
12758: LD_STRING displayTroll();
12760: PPUSH
12761: CALL_OW 559
// wait ( 3 3$00 ) ;
12765: LD_INT 6300
12767: PPUSH
12768: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12772: LD_STRING hideTroll();
12774: PPUSH
12775: CALL_OW 559
// wait ( 1 1$00 ) ;
12779: LD_INT 2100
12781: PPUSH
12782: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12786: LD_STRING displayTroll();
12788: PPUSH
12789: CALL_OW 559
// wait ( 1 1$00 ) ;
12793: LD_INT 2100
12795: PPUSH
12796: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12800: LD_STRING hideTroll();
12802: PPUSH
12803: CALL_OW 559
// end ;
12807: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12808: LD_EXP 12
12812: PUSH
12813: LD_EXP 38
12817: AND
12818: IFFALSE 12881
12820: GO 12822
12822: DISABLE
12823: LD_INT 0
12825: PPUSH
// begin p := 0 ;
12826: LD_ADDR_VAR 0 1
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// repeat game_speed := 1 ;
12834: LD_ADDR_OWVAR 65
12838: PUSH
12839: LD_INT 1
12841: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12842: LD_INT 35
12844: PPUSH
12845: CALL_OW 67
// p := p + 1 ;
12849: LD_ADDR_VAR 0 1
12853: PUSH
12854: LD_VAR 0 1
12858: PUSH
12859: LD_INT 1
12861: PLUS
12862: ST_TO_ADDR
// until p >= 60 ;
12863: LD_VAR 0 1
12867: PUSH
12868: LD_INT 60
12870: GREATEREQUAL
12871: IFFALSE 12834
// game_speed := 4 ;
12873: LD_ADDR_OWVAR 65
12877: PUSH
12878: LD_INT 4
12880: ST_TO_ADDR
// end ;
12881: PPOPN 1
12883: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12884: LD_EXP 12
12888: PUSH
12889: LD_EXP 39
12893: AND
12894: IFFALSE 13040
12896: GO 12898
12898: DISABLE
12899: LD_INT 0
12901: PPUSH
12902: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12903: LD_ADDR_VAR 0 1
12907: PUSH
12908: LD_INT 22
12910: PUSH
12911: LD_OWVAR 2
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 30
12925: PUSH
12926: LD_INT 0
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 1
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PPUSH
12952: CALL_OW 69
12956: ST_TO_ADDR
// if not depot then
12957: LD_VAR 0 1
12961: NOT
12962: IFFALSE 12966
// exit ;
12964: GO 13040
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12966: LD_ADDR_VAR 0 2
12970: PUSH
12971: LD_VAR 0 1
12975: PUSH
12976: LD_INT 1
12978: PPUSH
12979: LD_VAR 0 1
12983: PPUSH
12984: CALL_OW 12
12988: ARRAY
12989: PPUSH
12990: CALL_OW 274
12994: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12995: LD_VAR 0 2
12999: PPUSH
13000: LD_INT 1
13002: PPUSH
13003: LD_INT 0
13005: PPUSH
13006: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13010: LD_VAR 0 2
13014: PPUSH
13015: LD_INT 2
13017: PPUSH
13018: LD_INT 0
13020: PPUSH
13021: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13025: LD_VAR 0 2
13029: PPUSH
13030: LD_INT 3
13032: PPUSH
13033: LD_INT 0
13035: PPUSH
13036: CALL_OW 277
// end ;
13040: PPOPN 2
13042: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13043: LD_EXP 12
13047: PUSH
13048: LD_EXP 40
13052: AND
13053: IFFALSE 13150
13055: GO 13057
13057: DISABLE
13058: LD_INT 0
13060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13061: LD_ADDR_VAR 0 1
13065: PUSH
13066: LD_INT 22
13068: PUSH
13069: LD_OWVAR 2
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 1
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 3
13090: PUSH
13091: LD_INT 23
13093: PUSH
13094: LD_INT 0
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: PPUSH
13110: CALL_OW 69
13114: ST_TO_ADDR
// if not tmp then
13115: LD_VAR 0 1
13119: NOT
13120: IFFALSE 13124
// exit ;
13122: GO 13150
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 1
13131: PPUSH
13132: LD_VAR 0 1
13136: PPUSH
13137: CALL_OW 12
13141: ARRAY
13142: PPUSH
13143: LD_INT 200
13145: PPUSH
13146: CALL_OW 234
// end ;
13150: PPOPN 1
13152: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13153: LD_EXP 12
13157: PUSH
13158: LD_EXP 41
13162: AND
13163: IFFALSE 13242
13165: GO 13167
13167: DISABLE
13168: LD_INT 0
13170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13171: LD_ADDR_VAR 0 1
13175: PUSH
13176: LD_INT 22
13178: PUSH
13179: LD_OWVAR 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 2
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: ST_TO_ADDR
// if not tmp then
13207: LD_VAR 0 1
13211: NOT
13212: IFFALSE 13216
// exit ;
13214: GO 13242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13216: LD_VAR 0 1
13220: PUSH
13221: LD_INT 1
13223: PPUSH
13224: LD_VAR 0 1
13228: PPUSH
13229: CALL_OW 12
13233: ARRAY
13234: PPUSH
13235: LD_INT 60
13237: PPUSH
13238: CALL_OW 234
// end ;
13242: PPOPN 1
13244: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13245: LD_EXP 12
13249: PUSH
13250: LD_EXP 42
13254: AND
13255: IFFALSE 13354
13257: GO 13259
13259: DISABLE
13260: LD_INT 0
13262: PPUSH
13263: PPUSH
// begin enable ;
13264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13265: LD_ADDR_VAR 0 1
13269: PUSH
13270: LD_INT 22
13272: PUSH
13273: LD_OWVAR 2
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 61
13284: PUSH
13285: EMPTY
13286: LIST
13287: PUSH
13288: LD_INT 33
13290: PUSH
13291: LD_INT 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 69
13307: ST_TO_ADDR
// if not tmp then
13308: LD_VAR 0 1
13312: NOT
13313: IFFALSE 13317
// exit ;
13315: GO 13354
// for i in tmp do
13317: LD_ADDR_VAR 0 2
13321: PUSH
13322: LD_VAR 0 1
13326: PUSH
13327: FOR_IN
13328: IFFALSE 13352
// if IsControledBy ( i ) then
13330: LD_VAR 0 2
13334: PPUSH
13335: CALL_OW 312
13339: IFFALSE 13350
// ComUnlink ( i ) ;
13341: LD_VAR 0 2
13345: PPUSH
13346: CALL_OW 136
13350: GO 13327
13352: POP
13353: POP
// end ;
13354: PPOPN 2
13356: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13357: LD_EXP 12
13361: PUSH
13362: LD_EXP 43
13366: AND
13367: IFFALSE 13507
13369: GO 13371
13371: DISABLE
13372: LD_INT 0
13374: PPUSH
13375: PPUSH
// begin ToLua ( displayPowell(); ) ;
13376: LD_STRING displayPowell();
13378: PPUSH
13379: CALL_OW 559
// uc_side := 0 ;
13383: LD_ADDR_OWVAR 20
13387: PUSH
13388: LD_INT 0
13390: ST_TO_ADDR
// uc_nation := 2 ;
13391: LD_ADDR_OWVAR 21
13395: PUSH
13396: LD_INT 2
13398: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13399: LD_ADDR_OWVAR 37
13403: PUSH
13404: LD_INT 14
13406: ST_TO_ADDR
// vc_engine := engine_siberite ;
13407: LD_ADDR_OWVAR 39
13411: PUSH
13412: LD_INT 3
13414: ST_TO_ADDR
// vc_control := control_apeman ;
13415: LD_ADDR_OWVAR 38
13419: PUSH
13420: LD_INT 5
13422: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13423: LD_ADDR_OWVAR 40
13427: PUSH
13428: LD_INT 29
13430: ST_TO_ADDR
// un := CreateVehicle ;
13431: LD_ADDR_VAR 0 2
13435: PUSH
13436: CALL_OW 45
13440: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13441: LD_VAR 0 2
13445: PPUSH
13446: LD_INT 1
13448: PPUSH
13449: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13453: LD_INT 35
13455: PPUSH
13456: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13460: LD_VAR 0 2
13464: PPUSH
13465: LD_INT 22
13467: PUSH
13468: LD_OWVAR 2
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: PPUSH
13482: LD_VAR 0 2
13486: PPUSH
13487: CALL_OW 74
13491: PPUSH
13492: CALL_OW 115
// until IsDead ( un ) ;
13496: LD_VAR 0 2
13500: PPUSH
13501: CALL_OW 301
13505: IFFALSE 13453
// end ;
13507: PPOPN 2
13509: END
// every 0 0$1 trigger StreamModeActive and sStu do
13510: LD_EXP 12
13514: PUSH
13515: LD_EXP 51
13519: AND
13520: IFFALSE 13536
13522: GO 13524
13524: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13525: LD_STRING displayStucuk();
13527: PPUSH
13528: CALL_OW 559
// ResetFog ;
13532: CALL_OW 335
// end ;
13536: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13537: LD_EXP 12
13541: PUSH
13542: LD_EXP 44
13546: AND
13547: IFFALSE 13688
13549: GO 13551
13551: DISABLE
13552: LD_INT 0
13554: PPUSH
13555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: LD_OWVAR 2
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 21
13575: PUSH
13576: LD_INT 1
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PPUSH
13587: CALL_OW 69
13591: ST_TO_ADDR
// if not tmp then
13592: LD_VAR 0 2
13596: NOT
13597: IFFALSE 13601
// exit ;
13599: GO 13688
// un := tmp [ rand ( 1 , tmp ) ] ;
13601: LD_ADDR_VAR 0 1
13605: PUSH
13606: LD_VAR 0 2
13610: PUSH
13611: LD_INT 1
13613: PPUSH
13614: LD_VAR 0 2
13618: PPUSH
13619: CALL_OW 12
13623: ARRAY
13624: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13625: LD_VAR 0 1
13629: PPUSH
13630: LD_INT 0
13632: PPUSH
13633: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13637: LD_VAR 0 1
13641: PPUSH
13642: LD_OWVAR 3
13646: PUSH
13647: LD_VAR 0 1
13651: DIFF
13652: PPUSH
13653: LD_VAR 0 1
13657: PPUSH
13658: CALL_OW 74
13662: PPUSH
13663: CALL_OW 115
// wait ( 0 0$20 ) ;
13667: LD_INT 700
13669: PPUSH
13670: CALL_OW 67
// SetSide ( un , your_side ) ;
13674: LD_VAR 0 1
13678: PPUSH
13679: LD_OWVAR 2
13683: PPUSH
13684: CALL_OW 235
// end ;
13688: PPOPN 2
13690: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13691: LD_EXP 12
13695: PUSH
13696: LD_EXP 45
13700: AND
13701: IFFALSE 13807
13703: GO 13705
13705: DISABLE
13706: LD_INT 0
13708: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13709: LD_ADDR_VAR 0 1
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: LD_OWVAR 2
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 2
13728: PUSH
13729: LD_INT 30
13731: PUSH
13732: LD_INT 0
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 1
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: ST_TO_ADDR
// if not depot then
13763: LD_VAR 0 1
13767: NOT
13768: IFFALSE 13772
// exit ;
13770: GO 13807
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13772: LD_VAR 0 1
13776: PUSH
13777: LD_INT 1
13779: ARRAY
13780: PPUSH
13781: CALL_OW 250
13785: PPUSH
13786: LD_VAR 0 1
13790: PUSH
13791: LD_INT 1
13793: ARRAY
13794: PPUSH
13795: CALL_OW 251
13799: PPUSH
13800: LD_INT 70
13802: PPUSH
13803: CALL_OW 495
// end ;
13807: PPOPN 1
13809: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13810: LD_EXP 12
13814: PUSH
13815: LD_EXP 46
13819: AND
13820: IFFALSE 14031
13822: GO 13824
13824: DISABLE
13825: LD_INT 0
13827: PPUSH
13828: PPUSH
13829: PPUSH
13830: PPUSH
13831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13832: LD_ADDR_VAR 0 5
13836: PUSH
13837: LD_INT 22
13839: PUSH
13840: LD_OWVAR 2
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 21
13851: PUSH
13852: LD_INT 1
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: ST_TO_ADDR
// if not tmp then
13868: LD_VAR 0 5
13872: NOT
13873: IFFALSE 13877
// exit ;
13875: GO 14031
// for i in tmp do
13877: LD_ADDR_VAR 0 1
13881: PUSH
13882: LD_VAR 0 5
13886: PUSH
13887: FOR_IN
13888: IFFALSE 14029
// begin d := rand ( 0 , 5 ) ;
13890: LD_ADDR_VAR 0 4
13894: PUSH
13895: LD_INT 0
13897: PPUSH
13898: LD_INT 5
13900: PPUSH
13901: CALL_OW 12
13905: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13906: LD_ADDR_VAR 0 2
13910: PUSH
13911: LD_VAR 0 1
13915: PPUSH
13916: CALL_OW 250
13920: PPUSH
13921: LD_VAR 0 4
13925: PPUSH
13926: LD_INT 3
13928: PPUSH
13929: LD_INT 12
13931: PPUSH
13932: CALL_OW 12
13936: PPUSH
13937: CALL_OW 272
13941: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13942: LD_ADDR_VAR 0 3
13946: PUSH
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 251
13956: PPUSH
13957: LD_VAR 0 4
13961: PPUSH
13962: LD_INT 3
13964: PPUSH
13965: LD_INT 12
13967: PPUSH
13968: CALL_OW 12
13972: PPUSH
13973: CALL_OW 273
13977: ST_TO_ADDR
// if ValidHex ( x , y ) then
13978: LD_VAR 0 2
13982: PPUSH
13983: LD_VAR 0 3
13987: PPUSH
13988: CALL_OW 488
13992: IFFALSE 14027
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13994: LD_VAR 0 1
13998: PPUSH
13999: LD_VAR 0 2
14003: PPUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: LD_INT 3
14011: PPUSH
14012: LD_INT 6
14014: PPUSH
14015: CALL_OW 12
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: CALL_OW 483
// end ;
14027: GO 13887
14029: POP
14030: POP
// end ;
14031: PPOPN 5
14033: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14034: LD_EXP 12
14038: PUSH
14039: LD_EXP 47
14043: AND
14044: IFFALSE 14138
14046: GO 14048
14048: DISABLE
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14053: LD_ADDR_VAR 0 2
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_OWVAR 2
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 32
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 21
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: ST_TO_ADDR
// if not tmp then
14100: LD_VAR 0 2
14104: NOT
14105: IFFALSE 14109
// exit ;
14107: GO 14138
// for i in tmp do
14109: LD_ADDR_VAR 0 1
14113: PUSH
14114: LD_VAR 0 2
14118: PUSH
14119: FOR_IN
14120: IFFALSE 14136
// SetFuel ( i , 0 ) ;
14122: LD_VAR 0 1
14126: PPUSH
14127: LD_INT 0
14129: PPUSH
14130: CALL_OW 240
14134: GO 14119
14136: POP
14137: POP
// end ;
14138: PPOPN 2
14140: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14141: LD_EXP 12
14145: PUSH
14146: LD_EXP 48
14150: AND
14151: IFFALSE 14217
14153: GO 14155
14155: DISABLE
14156: LD_INT 0
14158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14159: LD_ADDR_VAR 0 1
14163: PUSH
14164: LD_INT 22
14166: PUSH
14167: LD_OWVAR 2
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 30
14178: PUSH
14179: LD_INT 29
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL_OW 69
14194: ST_TO_ADDR
// if not tmp then
14195: LD_VAR 0 1
14199: NOT
14200: IFFALSE 14204
// exit ;
14202: GO 14217
// DestroyUnit ( tmp [ 1 ] ) ;
14204: LD_VAR 0 1
14208: PUSH
14209: LD_INT 1
14211: ARRAY
14212: PPUSH
14213: CALL_OW 65
// end ;
14217: PPOPN 1
14219: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14220: LD_EXP 12
14224: PUSH
14225: LD_EXP 50
14229: AND
14230: IFFALSE 14359
14232: GO 14234
14234: DISABLE
14235: LD_INT 0
14237: PPUSH
// begin uc_side := 0 ;
14238: LD_ADDR_OWVAR 20
14242: PUSH
14243: LD_INT 0
14245: ST_TO_ADDR
// uc_nation := nation_arabian ;
14246: LD_ADDR_OWVAR 21
14250: PUSH
14251: LD_INT 2
14253: ST_TO_ADDR
// hc_gallery :=  ;
14254: LD_ADDR_OWVAR 33
14258: PUSH
14259: LD_STRING 
14261: ST_TO_ADDR
// hc_name :=  ;
14262: LD_ADDR_OWVAR 26
14266: PUSH
14267: LD_STRING 
14269: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14270: LD_INT 1
14272: PPUSH
14273: LD_INT 11
14275: PPUSH
14276: LD_INT 10
14278: PPUSH
14279: CALL_OW 380
// un := CreateHuman ;
14283: LD_ADDR_VAR 0 1
14287: PUSH
14288: CALL_OW 44
14292: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 1
14300: PPUSH
14301: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14305: LD_INT 35
14307: PPUSH
14308: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14312: LD_VAR 0 1
14316: PPUSH
14317: LD_INT 22
14319: PUSH
14320: LD_OWVAR 2
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PPUSH
14329: CALL_OW 69
14333: PPUSH
14334: LD_VAR 0 1
14338: PPUSH
14339: CALL_OW 74
14343: PPUSH
14344: CALL_OW 115
// until IsDead ( un ) ;
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 301
14357: IFFALSE 14305
// end ;
14359: PPOPN 1
14361: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14362: LD_EXP 12
14366: PUSH
14367: LD_EXP 52
14371: AND
14372: IFFALSE 14384
14374: GO 14376
14376: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14377: LD_STRING earthquake(getX(game), 0, 32)
14379: PPUSH
14380: CALL_OW 559
14384: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14385: LD_EXP 12
14389: PUSH
14390: LD_EXP 53
14394: AND
14395: IFFALSE 14486
14397: GO 14399
14399: DISABLE
14400: LD_INT 0
14402: PPUSH
// begin enable ;
14403: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14404: LD_ADDR_VAR 0 1
14408: PUSH
14409: LD_INT 22
14411: PUSH
14412: LD_OWVAR 2
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 21
14423: PUSH
14424: LD_INT 2
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 33
14433: PUSH
14434: LD_INT 3
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 69
14450: ST_TO_ADDR
// if not tmp then
14451: LD_VAR 0 1
14455: NOT
14456: IFFALSE 14460
// exit ;
14458: GO 14486
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14460: LD_VAR 0 1
14464: PUSH
14465: LD_INT 1
14467: PPUSH
14468: LD_VAR 0 1
14472: PPUSH
14473: CALL_OW 12
14477: ARRAY
14478: PPUSH
14479: LD_INT 1
14481: PPUSH
14482: CALL_OW 234
// end ;
14486: PPOPN 1
14488: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14489: LD_EXP 12
14493: PUSH
14494: LD_EXP 54
14498: AND
14499: IFFALSE 14640
14501: GO 14503
14503: DISABLE
14504: LD_INT 0
14506: PPUSH
14507: PPUSH
14508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14509: LD_ADDR_VAR 0 3
14513: PUSH
14514: LD_INT 22
14516: PUSH
14517: LD_OWVAR 2
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 25
14528: PUSH
14529: LD_INT 1
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 69
14544: ST_TO_ADDR
// if not tmp then
14545: LD_VAR 0 3
14549: NOT
14550: IFFALSE 14554
// exit ;
14552: GO 14640
// un := tmp [ rand ( 1 , tmp ) ] ;
14554: LD_ADDR_VAR 0 2
14558: PUSH
14559: LD_VAR 0 3
14563: PUSH
14564: LD_INT 1
14566: PPUSH
14567: LD_VAR 0 3
14571: PPUSH
14572: CALL_OW 12
14576: ARRAY
14577: ST_TO_ADDR
// if Crawls ( un ) then
14578: LD_VAR 0 2
14582: PPUSH
14583: CALL_OW 318
14587: IFFALSE 14598
// ComWalk ( un ) ;
14589: LD_VAR 0 2
14593: PPUSH
14594: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14598: LD_VAR 0 2
14602: PPUSH
14603: LD_INT 9
14605: PPUSH
14606: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14610: LD_INT 28
14612: PPUSH
14613: LD_OWVAR 2
14617: PPUSH
14618: LD_INT 2
14620: PPUSH
14621: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14625: LD_INT 29
14627: PPUSH
14628: LD_OWVAR 2
14632: PPUSH
14633: LD_INT 2
14635: PPUSH
14636: CALL_OW 322
// end ;
14640: PPOPN 3
14642: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14643: LD_EXP 12
14647: PUSH
14648: LD_EXP 55
14652: AND
14653: IFFALSE 14764
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
14661: PPUSH
14662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_INT 22
14670: PUSH
14671: LD_OWVAR 2
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 25
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: ST_TO_ADDR
// if not tmp then
14699: LD_VAR 0 3
14703: NOT
14704: IFFALSE 14708
// exit ;
14706: GO 14764
// un := tmp [ rand ( 1 , tmp ) ] ;
14708: LD_ADDR_VAR 0 2
14712: PUSH
14713: LD_VAR 0 3
14717: PUSH
14718: LD_INT 1
14720: PPUSH
14721: LD_VAR 0 3
14725: PPUSH
14726: CALL_OW 12
14730: ARRAY
14731: ST_TO_ADDR
// if Crawls ( un ) then
14732: LD_VAR 0 2
14736: PPUSH
14737: CALL_OW 318
14741: IFFALSE 14752
// ComWalk ( un ) ;
14743: LD_VAR 0 2
14747: PPUSH
14748: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14752: LD_VAR 0 2
14756: PPUSH
14757: LD_INT 8
14759: PPUSH
14760: CALL_OW 336
// end ;
14764: PPOPN 3
14766: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14767: LD_EXP 12
14771: PUSH
14772: LD_EXP 56
14776: AND
14777: IFFALSE 14921
14779: GO 14781
14781: DISABLE
14782: LD_INT 0
14784: PPUSH
14785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14786: LD_ADDR_VAR 0 2
14790: PUSH
14791: LD_INT 22
14793: PUSH
14794: LD_OWVAR 2
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 21
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: LD_INT 34
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 34
14828: PUSH
14829: LD_INT 51
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 34
14838: PUSH
14839: LD_INT 32
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: ST_TO_ADDR
// if not tmp then
14862: LD_VAR 0 2
14866: NOT
14867: IFFALSE 14871
// exit ;
14869: GO 14921
// for i in tmp do
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_VAR 0 2
14880: PUSH
14881: FOR_IN
14882: IFFALSE 14919
// if GetCargo ( i , mat_artifact ) = 0 then
14884: LD_VAR 0 1
14888: PPUSH
14889: LD_INT 4
14891: PPUSH
14892: CALL_OW 289
14896: PUSH
14897: LD_INT 0
14899: EQUAL
14900: IFFALSE 14917
// SetCargo ( i , mat_siberit , 100 ) ;
14902: LD_VAR 0 1
14906: PPUSH
14907: LD_INT 3
14909: PPUSH
14910: LD_INT 100
14912: PPUSH
14913: CALL_OW 290
14917: GO 14881
14919: POP
14920: POP
// end ;
14921: PPOPN 2
14923: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14924: LD_EXP 12
14928: PUSH
14929: LD_EXP 57
14933: AND
14934: IFFALSE 15117
14936: GO 14938
14938: DISABLE
14939: LD_INT 0
14941: PPUSH
14942: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_OWVAR 2
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 69
14964: ST_TO_ADDR
// if not tmp then
14965: LD_VAR 0 2
14969: NOT
14970: IFFALSE 14974
// exit ;
14972: GO 15117
// for i := 1 to 2 do
14974: LD_ADDR_VAR 0 1
14978: PUSH
14979: DOUBLE
14980: LD_INT 1
14982: DEC
14983: ST_TO_ADDR
14984: LD_INT 2
14986: PUSH
14987: FOR_TO
14988: IFFALSE 15115
// begin uc_side := your_side ;
14990: LD_ADDR_OWVAR 20
14994: PUSH
14995: LD_OWVAR 2
14999: ST_TO_ADDR
// uc_nation := nation_american ;
15000: LD_ADDR_OWVAR 21
15004: PUSH
15005: LD_INT 1
15007: ST_TO_ADDR
// vc_chassis := us_morphling ;
15008: LD_ADDR_OWVAR 37
15012: PUSH
15013: LD_INT 5
15015: ST_TO_ADDR
// vc_engine := engine_siberite ;
15016: LD_ADDR_OWVAR 39
15020: PUSH
15021: LD_INT 3
15023: ST_TO_ADDR
// vc_control := control_computer ;
15024: LD_ADDR_OWVAR 38
15028: PUSH
15029: LD_INT 3
15031: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15032: LD_ADDR_OWVAR 40
15036: PUSH
15037: LD_INT 10
15039: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15040: LD_VAR 0 2
15044: PUSH
15045: LD_INT 1
15047: ARRAY
15048: PPUSH
15049: CALL_OW 310
15053: NOT
15054: IFFALSE 15101
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15056: CALL_OW 45
15060: PPUSH
15061: LD_VAR 0 2
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: CALL_OW 250
15074: PPUSH
15075: LD_VAR 0 2
15079: PUSH
15080: LD_INT 1
15082: ARRAY
15083: PPUSH
15084: CALL_OW 251
15088: PPUSH
15089: LD_INT 12
15091: PPUSH
15092: LD_INT 1
15094: PPUSH
15095: CALL_OW 50
15099: GO 15113
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15101: CALL_OW 45
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: CALL_OW 51
// end ;
15113: GO 14987
15115: POP
15116: POP
// end ;
15117: PPOPN 2
15119: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15120: LD_EXP 12
15124: PUSH
15125: LD_EXP 58
15129: AND
15130: IFFALSE 15352
15132: GO 15134
15134: DISABLE
15135: LD_INT 0
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15143: LD_ADDR_VAR 0 6
15147: PUSH
15148: LD_INT 22
15150: PUSH
15151: LD_OWVAR 2
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 21
15162: PUSH
15163: LD_INT 1
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 23
15175: PUSH
15176: LD_INT 0
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 69
15196: ST_TO_ADDR
// if not tmp then
15197: LD_VAR 0 6
15201: NOT
15202: IFFALSE 15206
// exit ;
15204: GO 15352
// s1 := rand ( 1 , 4 ) ;
15206: LD_ADDR_VAR 0 2
15210: PUSH
15211: LD_INT 1
15213: PPUSH
15214: LD_INT 4
15216: PPUSH
15217: CALL_OW 12
15221: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15222: LD_ADDR_VAR 0 4
15226: PUSH
15227: LD_VAR 0 6
15231: PUSH
15232: LD_INT 1
15234: ARRAY
15235: PPUSH
15236: LD_VAR 0 2
15240: PPUSH
15241: CALL_OW 259
15245: ST_TO_ADDR
// if s1 = 1 then
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 1
15253: EQUAL
15254: IFFALSE 15274
// s2 := rand ( 2 , 4 ) else
15256: LD_ADDR_VAR 0 3
15260: PUSH
15261: LD_INT 2
15263: PPUSH
15264: LD_INT 4
15266: PPUSH
15267: CALL_OW 12
15271: ST_TO_ADDR
15272: GO 15282
// s2 := 1 ;
15274: LD_ADDR_VAR 0 3
15278: PUSH
15279: LD_INT 1
15281: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15282: LD_ADDR_VAR 0 5
15286: PUSH
15287: LD_VAR 0 6
15291: PUSH
15292: LD_INT 1
15294: ARRAY
15295: PPUSH
15296: LD_VAR 0 3
15300: PPUSH
15301: CALL_OW 259
15305: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15306: LD_VAR 0 6
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: PPUSH
15315: LD_VAR 0 2
15319: PPUSH
15320: LD_VAR 0 5
15324: PPUSH
15325: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15329: LD_VAR 0 6
15333: PUSH
15334: LD_INT 1
15336: ARRAY
15337: PPUSH
15338: LD_VAR 0 3
15342: PPUSH
15343: LD_VAR 0 4
15347: PPUSH
15348: CALL_OW 237
// end ;
15352: PPOPN 6
15354: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15355: LD_EXP 12
15359: PUSH
15360: LD_EXP 59
15364: AND
15365: IFFALSE 15444
15367: GO 15369
15369: DISABLE
15370: LD_INT 0
15372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15373: LD_ADDR_VAR 0 1
15377: PUSH
15378: LD_INT 22
15380: PUSH
15381: LD_OWVAR 2
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 30
15392: PUSH
15393: LD_INT 3
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: ST_TO_ADDR
// if not tmp then
15409: LD_VAR 0 1
15413: NOT
15414: IFFALSE 15418
// exit ;
15416: GO 15444
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15418: LD_VAR 0 1
15422: PUSH
15423: LD_INT 1
15425: PPUSH
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 12
15435: ARRAY
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: CALL_OW 234
// end ;
15444: PPOPN 1
15446: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15447: LD_EXP 12
15451: PUSH
15452: LD_EXP 60
15456: AND
15457: IFFALSE 15569
15459: GO 15461
15461: DISABLE
15462: LD_INT 0
15464: PPUSH
15465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_INT 22
15473: PUSH
15474: LD_OWVAR 2
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 2
15485: PUSH
15486: LD_INT 30
15488: PUSH
15489: LD_INT 27
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 30
15498: PUSH
15499: LD_INT 26
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 30
15508: PUSH
15509: LD_INT 28
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PPUSH
15526: CALL_OW 69
15530: ST_TO_ADDR
// if not tmp then
15531: LD_VAR 0 2
15535: NOT
15536: IFFALSE 15540
// exit ;
15538: GO 15569
// for i in tmp do
15540: LD_ADDR_VAR 0 1
15544: PUSH
15545: LD_VAR 0 2
15549: PUSH
15550: FOR_IN
15551: IFFALSE 15567
// SetLives ( i , 1 ) ;
15553: LD_VAR 0 1
15557: PPUSH
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 234
15565: GO 15550
15567: POP
15568: POP
// end ;
15569: PPOPN 2
15571: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15572: LD_EXP 12
15576: PUSH
15577: LD_EXP 61
15581: AND
15582: IFFALSE 15869
15584: GO 15586
15586: DISABLE
15587: LD_INT 0
15589: PPUSH
15590: PPUSH
15591: PPUSH
// begin i := rand ( 1 , 7 ) ;
15592: LD_ADDR_VAR 0 1
15596: PUSH
15597: LD_INT 1
15599: PPUSH
15600: LD_INT 7
15602: PPUSH
15603: CALL_OW 12
15607: ST_TO_ADDR
// case i of 1 :
15608: LD_VAR 0 1
15612: PUSH
15613: LD_INT 1
15615: DOUBLE
15616: EQUAL
15617: IFTRUE 15621
15619: GO 15631
15621: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15622: LD_STRING earthquake(getX(game), 0, 32)
15624: PPUSH
15625: CALL_OW 559
15629: GO 15869
15631: LD_INT 2
15633: DOUBLE
15634: EQUAL
15635: IFTRUE 15639
15637: GO 15653
15639: POP
// begin ToLua ( displayStucuk(); ) ;
15640: LD_STRING displayStucuk();
15642: PPUSH
15643: CALL_OW 559
// ResetFog ;
15647: CALL_OW 335
// end ; 3 :
15651: GO 15869
15653: LD_INT 3
15655: DOUBLE
15656: EQUAL
15657: IFTRUE 15661
15659: GO 15765
15661: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15662: LD_ADDR_VAR 0 2
15666: PUSH
15667: LD_INT 22
15669: PUSH
15670: LD_OWVAR 2
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 1
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PPUSH
15693: CALL_OW 69
15697: ST_TO_ADDR
// if not tmp then
15698: LD_VAR 0 2
15702: NOT
15703: IFFALSE 15707
// exit ;
15705: GO 15869
// un := tmp [ rand ( 1 , tmp ) ] ;
15707: LD_ADDR_VAR 0 3
15711: PUSH
15712: LD_VAR 0 2
15716: PUSH
15717: LD_INT 1
15719: PPUSH
15720: LD_VAR 0 2
15724: PPUSH
15725: CALL_OW 12
15729: ARRAY
15730: ST_TO_ADDR
// if Crawls ( un ) then
15731: LD_VAR 0 3
15735: PPUSH
15736: CALL_OW 318
15740: IFFALSE 15751
// ComWalk ( un ) ;
15742: LD_VAR 0 3
15746: PPUSH
15747: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15751: LD_VAR 0 3
15755: PPUSH
15756: LD_INT 8
15758: PPUSH
15759: CALL_OW 336
// end ; 4 :
15763: GO 15869
15765: LD_INT 4
15767: DOUBLE
15768: EQUAL
15769: IFTRUE 15773
15771: GO 15847
15773: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15774: LD_ADDR_VAR 0 2
15778: PUSH
15779: LD_INT 22
15781: PUSH
15782: LD_OWVAR 2
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 30
15793: PUSH
15794: LD_INT 29
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: ST_TO_ADDR
// if not tmp then
15810: LD_VAR 0 2
15814: NOT
15815: IFFALSE 15819
// exit ;
15817: GO 15869
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15819: LD_VAR 0 2
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: PPUSH
15828: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15832: LD_VAR 0 2
15836: PUSH
15837: LD_INT 1
15839: ARRAY
15840: PPUSH
15841: CALL_OW 65
// end ; 5 .. 7 :
15845: GO 15869
15847: LD_INT 5
15849: DOUBLE
15850: GREATEREQUAL
15851: IFFALSE 15859
15853: LD_INT 7
15855: DOUBLE
15856: LESSEQUAL
15857: IFTRUE 15861
15859: GO 15868
15861: POP
// StreamSibBomb ; end ;
15862: CALL 12106 0 0
15866: GO 15869
15868: POP
// end ;
15869: PPOPN 3
15871: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15872: LD_EXP 12
15876: PUSH
15877: LD_EXP 62
15881: AND
15882: IFFALSE 16038
15884: GO 15886
15886: DISABLE
15887: LD_INT 0
15889: PPUSH
15890: PPUSH
15891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15892: LD_ADDR_VAR 0 2
15896: PUSH
15897: LD_INT 81
15899: PUSH
15900: LD_OWVAR 2
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: LD_INT 21
15914: PUSH
15915: LD_INT 1
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 21
15924: PUSH
15925: LD_INT 2
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PPUSH
15941: CALL_OW 69
15945: ST_TO_ADDR
// if not tmp then
15946: LD_VAR 0 2
15950: NOT
15951: IFFALSE 15955
// exit ;
15953: GO 16038
// p := 0 ;
15955: LD_ADDR_VAR 0 3
15959: PUSH
15960: LD_INT 0
15962: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15963: LD_INT 35
15965: PPUSH
15966: CALL_OW 67
// p := p + 1 ;
15970: LD_ADDR_VAR 0 3
15974: PUSH
15975: LD_VAR 0 3
15979: PUSH
15980: LD_INT 1
15982: PLUS
15983: ST_TO_ADDR
// for i in tmp do
15984: LD_ADDR_VAR 0 1
15988: PUSH
15989: LD_VAR 0 2
15993: PUSH
15994: FOR_IN
15995: IFFALSE 16026
// if GetLives ( i ) < 1000 then
15997: LD_VAR 0 1
16001: PPUSH
16002: CALL_OW 256
16006: PUSH
16007: LD_INT 1000
16009: LESS
16010: IFFALSE 16024
// SetLives ( i , 1000 ) ;
16012: LD_VAR 0 1
16016: PPUSH
16017: LD_INT 1000
16019: PPUSH
16020: CALL_OW 234
16024: GO 15994
16026: POP
16027: POP
// until p > 20 ;
16028: LD_VAR 0 3
16032: PUSH
16033: LD_INT 20
16035: GREATER
16036: IFFALSE 15963
// end ;
16038: PPOPN 3
16040: END
// every 0 0$1 trigger StreamModeActive and sTime do
16041: LD_EXP 12
16045: PUSH
16046: LD_EXP 63
16050: AND
16051: IFFALSE 16086
16053: GO 16055
16055: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16056: LD_INT 28
16058: PPUSH
16059: LD_OWVAR 2
16063: PPUSH
16064: LD_INT 2
16066: PPUSH
16067: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16071: LD_INT 30
16073: PPUSH
16074: LD_OWVAR 2
16078: PPUSH
16079: LD_INT 2
16081: PPUSH
16082: CALL_OW 322
// end ;
16086: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16087: LD_EXP 12
16091: PUSH
16092: LD_EXP 64
16096: AND
16097: IFFALSE 16218
16099: GO 16101
16101: DISABLE
16102: LD_INT 0
16104: PPUSH
16105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16106: LD_ADDR_VAR 0 2
16110: PUSH
16111: LD_INT 22
16113: PUSH
16114: LD_OWVAR 2
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 21
16125: PUSH
16126: LD_INT 1
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: LD_INT 23
16138: PUSH
16139: LD_INT 0
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: PPUSH
16155: CALL_OW 69
16159: ST_TO_ADDR
// if not tmp then
16160: LD_VAR 0 2
16164: NOT
16165: IFFALSE 16169
// exit ;
16167: GO 16218
// for i in tmp do
16169: LD_ADDR_VAR 0 1
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: FOR_IN
16180: IFFALSE 16216
// begin if Crawls ( i ) then
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL_OW 318
16191: IFFALSE 16202
// ComWalk ( i ) ;
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 138
// SetClass ( i , 2 ) ;
16202: LD_VAR 0 1
16206: PPUSH
16207: LD_INT 2
16209: PPUSH
16210: CALL_OW 336
// end ;
16214: GO 16179
16216: POP
16217: POP
// end ;
16218: PPOPN 2
16220: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16221: LD_EXP 12
16225: PUSH
16226: LD_EXP 65
16230: AND
16231: IFFALSE 16519
16233: GO 16235
16235: DISABLE
16236: LD_INT 0
16238: PPUSH
16239: PPUSH
16240: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16241: LD_OWVAR 2
16245: PPUSH
16246: LD_INT 9
16248: PPUSH
16249: LD_INT 1
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16259: LD_INT 9
16261: PPUSH
16262: LD_OWVAR 2
16266: PPUSH
16267: CALL_OW 343
// uc_side := 9 ;
16271: LD_ADDR_OWVAR 20
16275: PUSH
16276: LD_INT 9
16278: ST_TO_ADDR
// uc_nation := 2 ;
16279: LD_ADDR_OWVAR 21
16283: PUSH
16284: LD_INT 2
16286: ST_TO_ADDR
// hc_name := Dark Warrior ;
16287: LD_ADDR_OWVAR 26
16291: PUSH
16292: LD_STRING Dark Warrior
16294: ST_TO_ADDR
// hc_gallery :=  ;
16295: LD_ADDR_OWVAR 33
16299: PUSH
16300: LD_STRING 
16302: ST_TO_ADDR
// hc_noskilllimit := true ;
16303: LD_ADDR_OWVAR 76
16307: PUSH
16308: LD_INT 1
16310: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16311: LD_ADDR_OWVAR 31
16315: PUSH
16316: LD_INT 30
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 30
16324: PUSH
16325: LD_INT 30
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: ST_TO_ADDR
// un := CreateHuman ;
16334: LD_ADDR_VAR 0 3
16338: PUSH
16339: CALL_OW 44
16343: ST_TO_ADDR
// hc_noskilllimit := false ;
16344: LD_ADDR_OWVAR 76
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16352: LD_VAR 0 3
16356: PPUSH
16357: LD_INT 1
16359: PPUSH
16360: CALL_OW 51
// ToLua ( playRanger() ) ;
16364: LD_STRING playRanger()
16366: PPUSH
16367: CALL_OW 559
// p := 0 ;
16371: LD_ADDR_VAR 0 2
16375: PUSH
16376: LD_INT 0
16378: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16379: LD_INT 35
16381: PPUSH
16382: CALL_OW 67
// p := p + 1 ;
16386: LD_ADDR_VAR 0 2
16390: PUSH
16391: LD_VAR 0 2
16395: PUSH
16396: LD_INT 1
16398: PLUS
16399: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16400: LD_VAR 0 3
16404: PPUSH
16405: CALL_OW 256
16409: PUSH
16410: LD_INT 1000
16412: LESS
16413: IFFALSE 16427
// SetLives ( un , 1000 ) ;
16415: LD_VAR 0 3
16419: PPUSH
16420: LD_INT 1000
16422: PPUSH
16423: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16427: LD_VAR 0 3
16431: PPUSH
16432: LD_INT 81
16434: PUSH
16435: LD_OWVAR 2
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 91
16446: PUSH
16447: LD_VAR 0 3
16451: PUSH
16452: LD_INT 30
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PPUSH
16464: CALL_OW 69
16468: PPUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: CALL_OW 74
16478: PPUSH
16479: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16483: LD_VAR 0 2
16487: PUSH
16488: LD_INT 80
16490: GREATER
16491: PUSH
16492: LD_VAR 0 3
16496: PPUSH
16497: CALL_OW 301
16501: OR
16502: IFFALSE 16379
// if un then
16504: LD_VAR 0 3
16508: IFFALSE 16519
// RemoveUnit ( un ) ;
16510: LD_VAR 0 3
16514: PPUSH
16515: CALL_OW 64
// end ;
16519: PPOPN 3
16521: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16522: LD_EXP 66
16526: IFFALSE 16642
16528: GO 16530
16530: DISABLE
16531: LD_INT 0
16533: PPUSH
16534: PPUSH
16535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16536: LD_ADDR_VAR 0 2
16540: PUSH
16541: LD_INT 81
16543: PUSH
16544: LD_OWVAR 2
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 21
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PPUSH
16567: CALL_OW 69
16571: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16572: LD_STRING playComputer()
16574: PPUSH
16575: CALL_OW 559
// if not tmp then
16579: LD_VAR 0 2
16583: NOT
16584: IFFALSE 16588
// exit ;
16586: GO 16642
// for i in tmp do
16588: LD_ADDR_VAR 0 1
16592: PUSH
16593: LD_VAR 0 2
16597: PUSH
16598: FOR_IN
16599: IFFALSE 16640
// for j := 1 to 4 do
16601: LD_ADDR_VAR 0 3
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_INT 4
16613: PUSH
16614: FOR_TO
16615: IFFALSE 16636
// SetSkill ( i , j , 10 ) ;
16617: LD_VAR 0 1
16621: PPUSH
16622: LD_VAR 0 3
16626: PPUSH
16627: LD_INT 10
16629: PPUSH
16630: CALL_OW 237
16634: GO 16614
16636: POP
16637: POP
16638: GO 16598
16640: POP
16641: POP
// end ;
16642: PPOPN 3
16644: END
// every 0 0$1 trigger s30 do var i , tmp ;
16645: LD_EXP 67
16649: IFFALSE 16718
16651: GO 16653
16653: DISABLE
16654: LD_INT 0
16656: PPUSH
16657: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16658: LD_ADDR_VAR 0 2
16662: PUSH
16663: LD_INT 22
16665: PUSH
16666: LD_OWVAR 2
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PPUSH
16675: CALL_OW 69
16679: ST_TO_ADDR
// if not tmp then
16680: LD_VAR 0 2
16684: NOT
16685: IFFALSE 16689
// exit ;
16687: GO 16718
// for i in tmp do
16689: LD_ADDR_VAR 0 1
16693: PUSH
16694: LD_VAR 0 2
16698: PUSH
16699: FOR_IN
16700: IFFALSE 16716
// SetLives ( i , 300 ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: LD_INT 300
16709: PPUSH
16710: CALL_OW 234
16714: GO 16699
16716: POP
16717: POP
// end ;
16718: PPOPN 2
16720: END
// every 0 0$1 trigger s60 do var i , tmp ;
16721: LD_EXP 68
16725: IFFALSE 16794
16727: GO 16729
16729: DISABLE
16730: LD_INT 0
16732: PPUSH
16733: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16734: LD_ADDR_VAR 0 2
16738: PUSH
16739: LD_INT 22
16741: PUSH
16742: LD_OWVAR 2
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PPUSH
16751: CALL_OW 69
16755: ST_TO_ADDR
// if not tmp then
16756: LD_VAR 0 2
16760: NOT
16761: IFFALSE 16765
// exit ;
16763: GO 16794
// for i in tmp do
16765: LD_ADDR_VAR 0 1
16769: PUSH
16770: LD_VAR 0 2
16774: PUSH
16775: FOR_IN
16776: IFFALSE 16792
// SetLives ( i , 600 ) ;
16778: LD_VAR 0 1
16782: PPUSH
16783: LD_INT 600
16785: PPUSH
16786: CALL_OW 234
16790: GO 16775
16792: POP
16793: POP
// end ;
16794: PPOPN 2
16796: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16797: LD_INT 0
16799: PPUSH
// case cmd of 301 :
16800: LD_VAR 0 1
16804: PUSH
16805: LD_INT 301
16807: DOUBLE
16808: EQUAL
16809: IFTRUE 16813
16811: GO 16845
16813: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16814: LD_VAR 0 6
16818: PPUSH
16819: LD_VAR 0 7
16823: PPUSH
16824: LD_VAR 0 8
16828: PPUSH
16829: LD_VAR 0 4
16833: PPUSH
16834: LD_VAR 0 5
16838: PPUSH
16839: CALL 18054 0 5
16843: GO 16966
16845: LD_INT 302
16847: DOUBLE
16848: EQUAL
16849: IFTRUE 16853
16851: GO 16890
16853: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16854: LD_VAR 0 6
16858: PPUSH
16859: LD_VAR 0 7
16863: PPUSH
16864: LD_VAR 0 8
16868: PPUSH
16869: LD_VAR 0 9
16873: PPUSH
16874: LD_VAR 0 4
16878: PPUSH
16879: LD_VAR 0 5
16883: PPUSH
16884: CALL 18145 0 6
16888: GO 16966
16890: LD_INT 303
16892: DOUBLE
16893: EQUAL
16894: IFTRUE 16898
16896: GO 16935
16898: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16899: LD_VAR 0 6
16903: PPUSH
16904: LD_VAR 0 7
16908: PPUSH
16909: LD_VAR 0 8
16913: PPUSH
16914: LD_VAR 0 9
16918: PPUSH
16919: LD_VAR 0 4
16923: PPUSH
16924: LD_VAR 0 5
16928: PPUSH
16929: CALL 16971 0 6
16933: GO 16966
16935: LD_INT 304
16937: DOUBLE
16938: EQUAL
16939: IFTRUE 16943
16941: GO 16965
16943: POP
// hHackTeleport ( unit , x , y ) ; end ;
16944: LD_VAR 0 2
16948: PPUSH
16949: LD_VAR 0 4
16953: PPUSH
16954: LD_VAR 0 5
16958: PPUSH
16959: CALL 18738 0 3
16963: GO 16966
16965: POP
// end ;
16966: LD_VAR 0 12
16970: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16971: LD_INT 0
16973: PPUSH
16974: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16975: LD_VAR 0 1
16979: PUSH
16980: LD_INT 1
16982: LESS
16983: PUSH
16984: LD_VAR 0 1
16988: PUSH
16989: LD_INT 3
16991: GREATER
16992: OR
16993: PUSH
16994: LD_VAR 0 5
16998: PPUSH
16999: LD_VAR 0 6
17003: PPUSH
17004: CALL_OW 428
17008: OR
17009: IFFALSE 17013
// exit ;
17011: GO 17741
// uc_side := your_side ;
17013: LD_ADDR_OWVAR 20
17017: PUSH
17018: LD_OWVAR 2
17022: ST_TO_ADDR
// uc_nation := nation ;
17023: LD_ADDR_OWVAR 21
17027: PUSH
17028: LD_VAR 0 1
17032: ST_TO_ADDR
// bc_level = 1 ;
17033: LD_ADDR_OWVAR 43
17037: PUSH
17038: LD_INT 1
17040: ST_TO_ADDR
// case btype of 1 :
17041: LD_VAR 0 2
17045: PUSH
17046: LD_INT 1
17048: DOUBLE
17049: EQUAL
17050: IFTRUE 17054
17052: GO 17065
17054: POP
// bc_type := b_depot ; 2 :
17055: LD_ADDR_OWVAR 42
17059: PUSH
17060: LD_INT 0
17062: ST_TO_ADDR
17063: GO 17685
17065: LD_INT 2
17067: DOUBLE
17068: EQUAL
17069: IFTRUE 17073
17071: GO 17084
17073: POP
// bc_type := b_warehouse ; 3 :
17074: LD_ADDR_OWVAR 42
17078: PUSH
17079: LD_INT 1
17081: ST_TO_ADDR
17082: GO 17685
17084: LD_INT 3
17086: DOUBLE
17087: EQUAL
17088: IFTRUE 17092
17090: GO 17103
17092: POP
// bc_type := b_lab ; 4 .. 9 :
17093: LD_ADDR_OWVAR 42
17097: PUSH
17098: LD_INT 6
17100: ST_TO_ADDR
17101: GO 17685
17103: LD_INT 4
17105: DOUBLE
17106: GREATEREQUAL
17107: IFFALSE 17115
17109: LD_INT 9
17111: DOUBLE
17112: LESSEQUAL
17113: IFTRUE 17117
17115: GO 17177
17117: POP
// begin bc_type := b_lab_half ;
17118: LD_ADDR_OWVAR 42
17122: PUSH
17123: LD_INT 7
17125: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17126: LD_ADDR_OWVAR 44
17130: PUSH
17131: LD_INT 10
17133: PUSH
17134: LD_INT 11
17136: PUSH
17137: LD_INT 12
17139: PUSH
17140: LD_INT 15
17142: PUSH
17143: LD_INT 14
17145: PUSH
17146: LD_INT 13
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: PUSH
17157: LD_VAR 0 2
17161: PUSH
17162: LD_INT 3
17164: MINUS
17165: ARRAY
17166: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17167: LD_ADDR_OWVAR 45
17171: PUSH
17172: LD_INT 9
17174: ST_TO_ADDR
// end ; 10 .. 13 :
17175: GO 17685
17177: LD_INT 10
17179: DOUBLE
17180: GREATEREQUAL
17181: IFFALSE 17189
17183: LD_INT 13
17185: DOUBLE
17186: LESSEQUAL
17187: IFTRUE 17191
17189: GO 17268
17191: POP
// begin bc_type := b_lab_full ;
17192: LD_ADDR_OWVAR 42
17196: PUSH
17197: LD_INT 8
17199: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17200: LD_ADDR_OWVAR 44
17204: PUSH
17205: LD_INT 10
17207: PUSH
17208: LD_INT 12
17210: PUSH
17211: LD_INT 14
17213: PUSH
17214: LD_INT 13
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: PUSH
17223: LD_VAR 0 2
17227: PUSH
17228: LD_INT 9
17230: MINUS
17231: ARRAY
17232: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17233: LD_ADDR_OWVAR 45
17237: PUSH
17238: LD_INT 11
17240: PUSH
17241: LD_INT 15
17243: PUSH
17244: LD_INT 12
17246: PUSH
17247: LD_INT 15
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: PUSH
17256: LD_VAR 0 2
17260: PUSH
17261: LD_INT 9
17263: MINUS
17264: ARRAY
17265: ST_TO_ADDR
// end ; 14 :
17266: GO 17685
17268: LD_INT 14
17270: DOUBLE
17271: EQUAL
17272: IFTRUE 17276
17274: GO 17287
17276: POP
// bc_type := b_workshop ; 15 :
17277: LD_ADDR_OWVAR 42
17281: PUSH
17282: LD_INT 2
17284: ST_TO_ADDR
17285: GO 17685
17287: LD_INT 15
17289: DOUBLE
17290: EQUAL
17291: IFTRUE 17295
17293: GO 17306
17295: POP
// bc_type := b_factory ; 16 :
17296: LD_ADDR_OWVAR 42
17300: PUSH
17301: LD_INT 3
17303: ST_TO_ADDR
17304: GO 17685
17306: LD_INT 16
17308: DOUBLE
17309: EQUAL
17310: IFTRUE 17314
17312: GO 17325
17314: POP
// bc_type := b_ext_gun ; 17 :
17315: LD_ADDR_OWVAR 42
17319: PUSH
17320: LD_INT 17
17322: ST_TO_ADDR
17323: GO 17685
17325: LD_INT 17
17327: DOUBLE
17328: EQUAL
17329: IFTRUE 17333
17331: GO 17361
17333: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17334: LD_ADDR_OWVAR 42
17338: PUSH
17339: LD_INT 19
17341: PUSH
17342: LD_INT 23
17344: PUSH
17345: LD_INT 19
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: PUSH
17353: LD_VAR 0 1
17357: ARRAY
17358: ST_TO_ADDR
17359: GO 17685
17361: LD_INT 18
17363: DOUBLE
17364: EQUAL
17365: IFTRUE 17369
17367: GO 17380
17369: POP
// bc_type := b_ext_radar ; 19 :
17370: LD_ADDR_OWVAR 42
17374: PUSH
17375: LD_INT 20
17377: ST_TO_ADDR
17378: GO 17685
17380: LD_INT 19
17382: DOUBLE
17383: EQUAL
17384: IFTRUE 17388
17386: GO 17399
17388: POP
// bc_type := b_ext_radio ; 20 :
17389: LD_ADDR_OWVAR 42
17393: PUSH
17394: LD_INT 22
17396: ST_TO_ADDR
17397: GO 17685
17399: LD_INT 20
17401: DOUBLE
17402: EQUAL
17403: IFTRUE 17407
17405: GO 17418
17407: POP
// bc_type := b_ext_siberium ; 21 :
17408: LD_ADDR_OWVAR 42
17412: PUSH
17413: LD_INT 21
17415: ST_TO_ADDR
17416: GO 17685
17418: LD_INT 21
17420: DOUBLE
17421: EQUAL
17422: IFTRUE 17426
17424: GO 17437
17426: POP
// bc_type := b_ext_computer ; 22 :
17427: LD_ADDR_OWVAR 42
17431: PUSH
17432: LD_INT 24
17434: ST_TO_ADDR
17435: GO 17685
17437: LD_INT 22
17439: DOUBLE
17440: EQUAL
17441: IFTRUE 17445
17443: GO 17456
17445: POP
// bc_type := b_ext_track ; 23 :
17446: LD_ADDR_OWVAR 42
17450: PUSH
17451: LD_INT 16
17453: ST_TO_ADDR
17454: GO 17685
17456: LD_INT 23
17458: DOUBLE
17459: EQUAL
17460: IFTRUE 17464
17462: GO 17475
17464: POP
// bc_type := b_ext_laser ; 24 :
17465: LD_ADDR_OWVAR 42
17469: PUSH
17470: LD_INT 25
17472: ST_TO_ADDR
17473: GO 17685
17475: LD_INT 24
17477: DOUBLE
17478: EQUAL
17479: IFTRUE 17483
17481: GO 17494
17483: POP
// bc_type := b_control_tower ; 25 :
17484: LD_ADDR_OWVAR 42
17488: PUSH
17489: LD_INT 36
17491: ST_TO_ADDR
17492: GO 17685
17494: LD_INT 25
17496: DOUBLE
17497: EQUAL
17498: IFTRUE 17502
17500: GO 17513
17502: POP
// bc_type := b_breastwork ; 26 :
17503: LD_ADDR_OWVAR 42
17507: PUSH
17508: LD_INT 31
17510: ST_TO_ADDR
17511: GO 17685
17513: LD_INT 26
17515: DOUBLE
17516: EQUAL
17517: IFTRUE 17521
17519: GO 17532
17521: POP
// bc_type := b_bunker ; 27 :
17522: LD_ADDR_OWVAR 42
17526: PUSH
17527: LD_INT 32
17529: ST_TO_ADDR
17530: GO 17685
17532: LD_INT 27
17534: DOUBLE
17535: EQUAL
17536: IFTRUE 17540
17538: GO 17551
17540: POP
// bc_type := b_turret ; 28 :
17541: LD_ADDR_OWVAR 42
17545: PUSH
17546: LD_INT 33
17548: ST_TO_ADDR
17549: GO 17685
17551: LD_INT 28
17553: DOUBLE
17554: EQUAL
17555: IFTRUE 17559
17557: GO 17570
17559: POP
// bc_type := b_armoury ; 29 :
17560: LD_ADDR_OWVAR 42
17564: PUSH
17565: LD_INT 4
17567: ST_TO_ADDR
17568: GO 17685
17570: LD_INT 29
17572: DOUBLE
17573: EQUAL
17574: IFTRUE 17578
17576: GO 17589
17578: POP
// bc_type := b_barracks ; 30 :
17579: LD_ADDR_OWVAR 42
17583: PUSH
17584: LD_INT 5
17586: ST_TO_ADDR
17587: GO 17685
17589: LD_INT 30
17591: DOUBLE
17592: EQUAL
17593: IFTRUE 17597
17595: GO 17608
17597: POP
// bc_type := b_solar_power ; 31 :
17598: LD_ADDR_OWVAR 42
17602: PUSH
17603: LD_INT 27
17605: ST_TO_ADDR
17606: GO 17685
17608: LD_INT 31
17610: DOUBLE
17611: EQUAL
17612: IFTRUE 17616
17614: GO 17627
17616: POP
// bc_type := b_oil_power ; 32 :
17617: LD_ADDR_OWVAR 42
17621: PUSH
17622: LD_INT 26
17624: ST_TO_ADDR
17625: GO 17685
17627: LD_INT 32
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17646
17635: POP
// bc_type := b_siberite_power ; 33 :
17636: LD_ADDR_OWVAR 42
17640: PUSH
17641: LD_INT 28
17643: ST_TO_ADDR
17644: GO 17685
17646: LD_INT 33
17648: DOUBLE
17649: EQUAL
17650: IFTRUE 17654
17652: GO 17665
17654: POP
// bc_type := b_oil_mine ; 34 :
17655: LD_ADDR_OWVAR 42
17659: PUSH
17660: LD_INT 29
17662: ST_TO_ADDR
17663: GO 17685
17665: LD_INT 34
17667: DOUBLE
17668: EQUAL
17669: IFTRUE 17673
17671: GO 17684
17673: POP
// bc_type := b_siberite_mine ; end ;
17674: LD_ADDR_OWVAR 42
17678: PUSH
17679: LD_INT 30
17681: ST_TO_ADDR
17682: GO 17685
17684: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17685: LD_ADDR_VAR 0 8
17689: PUSH
17690: LD_VAR 0 5
17694: PPUSH
17695: LD_VAR 0 6
17699: PPUSH
17700: LD_VAR 0 3
17704: PPUSH
17705: CALL_OW 47
17709: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17710: LD_OWVAR 42
17714: PUSH
17715: LD_INT 32
17717: PUSH
17718: LD_INT 33
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: IN
17725: IFFALSE 17741
// PlaceWeaponTurret ( b , weapon ) ;
17727: LD_VAR 0 8
17731: PPUSH
17732: LD_VAR 0 4
17736: PPUSH
17737: CALL_OW 431
// end ;
17741: LD_VAR 0 7
17745: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17746: LD_INT 0
17748: PPUSH
17749: PPUSH
17750: PPUSH
17751: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17752: LD_ADDR_VAR 0 4
17756: PUSH
17757: LD_INT 22
17759: PUSH
17760: LD_OWVAR 2
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 2
17771: PUSH
17772: LD_INT 30
17774: PUSH
17775: LD_INT 0
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 30
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PPUSH
17801: CALL_OW 69
17805: ST_TO_ADDR
// if not tmp then
17806: LD_VAR 0 4
17810: NOT
17811: IFFALSE 17815
// exit ;
17813: GO 17874
// for i in tmp do
17815: LD_ADDR_VAR 0 2
17819: PUSH
17820: LD_VAR 0 4
17824: PUSH
17825: FOR_IN
17826: IFFALSE 17872
// for j = 1 to 3 do
17828: LD_ADDR_VAR 0 3
17832: PUSH
17833: DOUBLE
17834: LD_INT 1
17836: DEC
17837: ST_TO_ADDR
17838: LD_INT 3
17840: PUSH
17841: FOR_TO
17842: IFFALSE 17868
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17844: LD_VAR 0 2
17848: PPUSH
17849: CALL_OW 274
17853: PPUSH
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_INT 99999
17861: PPUSH
17862: CALL_OW 277
17866: GO 17841
17868: POP
17869: POP
17870: GO 17825
17872: POP
17873: POP
// end ;
17874: LD_VAR 0 1
17878: RET
// export function hHackSetLevel10 ; var i , j ; begin
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17884: LD_ADDR_VAR 0 2
17888: PUSH
17889: LD_INT 21
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PPUSH
17899: CALL_OW 69
17903: PUSH
17904: FOR_IN
17905: IFFALSE 17957
// if IsSelected ( i ) then
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 306
17916: IFFALSE 17955
// begin for j := 1 to 4 do
17918: LD_ADDR_VAR 0 3
17922: PUSH
17923: DOUBLE
17924: LD_INT 1
17926: DEC
17927: ST_TO_ADDR
17928: LD_INT 4
17930: PUSH
17931: FOR_TO
17932: IFFALSE 17953
// SetSkill ( i , j , 10 ) ;
17934: LD_VAR 0 2
17938: PPUSH
17939: LD_VAR 0 3
17943: PPUSH
17944: LD_INT 10
17946: PPUSH
17947: CALL_OW 237
17951: GO 17931
17953: POP
17954: POP
// end ;
17955: GO 17904
17957: POP
17958: POP
// end ;
17959: LD_VAR 0 1
17963: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17964: LD_INT 0
17966: PPUSH
17967: PPUSH
17968: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17969: LD_ADDR_VAR 0 2
17973: PUSH
17974: LD_INT 22
17976: PUSH
17977: LD_OWVAR 2
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 21
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 69
18004: PUSH
18005: FOR_IN
18006: IFFALSE 18047
// begin for j := 1 to 4 do
18008: LD_ADDR_VAR 0 3
18012: PUSH
18013: DOUBLE
18014: LD_INT 1
18016: DEC
18017: ST_TO_ADDR
18018: LD_INT 4
18020: PUSH
18021: FOR_TO
18022: IFFALSE 18043
// SetSkill ( i , j , 10 ) ;
18024: LD_VAR 0 2
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: LD_INT 10
18036: PPUSH
18037: CALL_OW 237
18041: GO 18021
18043: POP
18044: POP
// end ;
18045: GO 18005
18047: POP
18048: POP
// end ;
18049: LD_VAR 0 1
18053: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18054: LD_INT 0
18056: PPUSH
// uc_side := your_side ;
18057: LD_ADDR_OWVAR 20
18061: PUSH
18062: LD_OWVAR 2
18066: ST_TO_ADDR
// uc_nation := nation ;
18067: LD_ADDR_OWVAR 21
18071: PUSH
18072: LD_VAR 0 1
18076: ST_TO_ADDR
// InitHc ;
18077: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18081: LD_INT 0
18083: PPUSH
18084: LD_VAR 0 2
18088: PPUSH
18089: LD_VAR 0 3
18093: PPUSH
18094: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18098: LD_VAR 0 4
18102: PPUSH
18103: LD_VAR 0 5
18107: PPUSH
18108: CALL_OW 428
18112: PUSH
18113: LD_INT 0
18115: EQUAL
18116: IFFALSE 18140
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18118: CALL_OW 44
18122: PPUSH
18123: LD_VAR 0 4
18127: PPUSH
18128: LD_VAR 0 5
18132: PPUSH
18133: LD_INT 1
18135: PPUSH
18136: CALL_OW 48
// end ;
18140: LD_VAR 0 6
18144: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18145: LD_INT 0
18147: PPUSH
18148: PPUSH
// uc_side := your_side ;
18149: LD_ADDR_OWVAR 20
18153: PUSH
18154: LD_OWVAR 2
18158: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18159: LD_VAR 0 1
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: LD_INT 2
18169: PUSH
18170: LD_INT 3
18172: PUSH
18173: LD_INT 4
18175: PUSH
18176: LD_INT 5
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: IN
18186: IFFALSE 18198
// uc_nation := nation_american else
18188: LD_ADDR_OWVAR 21
18192: PUSH
18193: LD_INT 1
18195: ST_TO_ADDR
18196: GO 18241
// if chassis in [ 11 , 12 , 13 , 14 ] then
18198: LD_VAR 0 1
18202: PUSH
18203: LD_INT 11
18205: PUSH
18206: LD_INT 12
18208: PUSH
18209: LD_INT 13
18211: PUSH
18212: LD_INT 14
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: IN
18221: IFFALSE 18233
// uc_nation := nation_arabian else
18223: LD_ADDR_OWVAR 21
18227: PUSH
18228: LD_INT 2
18230: ST_TO_ADDR
18231: GO 18241
// uc_nation := nation_russian ;
18233: LD_ADDR_OWVAR 21
18237: PUSH
18238: LD_INT 3
18240: ST_TO_ADDR
// vc_chassis := chassis ;
18241: LD_ADDR_OWVAR 37
18245: PUSH
18246: LD_VAR 0 1
18250: ST_TO_ADDR
// vc_engine := engine ;
18251: LD_ADDR_OWVAR 39
18255: PUSH
18256: LD_VAR 0 2
18260: ST_TO_ADDR
// vc_control := control ;
18261: LD_ADDR_OWVAR 38
18265: PUSH
18266: LD_VAR 0 3
18270: ST_TO_ADDR
// vc_weapon := weapon ;
18271: LD_ADDR_OWVAR 40
18275: PUSH
18276: LD_VAR 0 4
18280: ST_TO_ADDR
// un := CreateVehicle ;
18281: LD_ADDR_VAR 0 8
18285: PUSH
18286: CALL_OW 45
18290: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18291: LD_VAR 0 8
18295: PPUSH
18296: LD_INT 0
18298: PPUSH
18299: LD_INT 5
18301: PPUSH
18302: CALL_OW 12
18306: PPUSH
18307: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18311: LD_VAR 0 8
18315: PPUSH
18316: LD_VAR 0 5
18320: PPUSH
18321: LD_VAR 0 6
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: CALL_OW 48
// end ;
18333: LD_VAR 0 7
18337: RET
// export hInvincible ; every 1 do
18338: GO 18340
18340: DISABLE
// hInvincible := [ ] ;
18341: LD_ADDR_EXP 69
18345: PUSH
18346: EMPTY
18347: ST_TO_ADDR
18348: END
// every 10 do var i ;
18349: GO 18351
18351: DISABLE
18352: LD_INT 0
18354: PPUSH
// begin enable ;
18355: ENABLE
// if not hInvincible then
18356: LD_EXP 69
18360: NOT
18361: IFFALSE 18365
// exit ;
18363: GO 18409
// for i in hInvincible do
18365: LD_ADDR_VAR 0 1
18369: PUSH
18370: LD_EXP 69
18374: PUSH
18375: FOR_IN
18376: IFFALSE 18407
// if GetLives ( i ) < 1000 then
18378: LD_VAR 0 1
18382: PPUSH
18383: CALL_OW 256
18387: PUSH
18388: LD_INT 1000
18390: LESS
18391: IFFALSE 18405
// SetLives ( i , 1000 ) ;
18393: LD_VAR 0 1
18397: PPUSH
18398: LD_INT 1000
18400: PPUSH
18401: CALL_OW 234
18405: GO 18375
18407: POP
18408: POP
// end ;
18409: PPOPN 1
18411: END
// export function hHackInvincible ; var i ; begin
18412: LD_INT 0
18414: PPUSH
18415: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18416: LD_ADDR_VAR 0 2
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 21
18426: PUSH
18427: LD_INT 1
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 21
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: LIST
18448: PPUSH
18449: CALL_OW 69
18453: PUSH
18454: FOR_IN
18455: IFFALSE 18516
// if IsSelected ( i ) then
18457: LD_VAR 0 2
18461: PPUSH
18462: CALL_OW 306
18466: IFFALSE 18514
// begin if i in hInvincible then
18468: LD_VAR 0 2
18472: PUSH
18473: LD_EXP 69
18477: IN
18478: IFFALSE 18498
// hInvincible := hInvincible diff i else
18480: LD_ADDR_EXP 69
18484: PUSH
18485: LD_EXP 69
18489: PUSH
18490: LD_VAR 0 2
18494: DIFF
18495: ST_TO_ADDR
18496: GO 18514
// hInvincible := hInvincible union i ;
18498: LD_ADDR_EXP 69
18502: PUSH
18503: LD_EXP 69
18507: PUSH
18508: LD_VAR 0 2
18512: UNION
18513: ST_TO_ADDR
// end ;
18514: GO 18454
18516: POP
18517: POP
// end ;
18518: LD_VAR 0 1
18522: RET
// export function hHackInvisible ; var i , j ; begin
18523: LD_INT 0
18525: PPUSH
18526: PPUSH
18527: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18528: LD_ADDR_VAR 0 2
18532: PUSH
18533: LD_INT 21
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: PUSH
18548: FOR_IN
18549: IFFALSE 18573
// if IsSelected ( i ) then
18551: LD_VAR 0 2
18555: PPUSH
18556: CALL_OW 306
18560: IFFALSE 18571
// ComForceInvisible ( i ) ;
18562: LD_VAR 0 2
18566: PPUSH
18567: CALL_OW 496
18571: GO 18548
18573: POP
18574: POP
// end ;
18575: LD_VAR 0 1
18579: RET
// export function hHackChangeYourSide ; begin
18580: LD_INT 0
18582: PPUSH
// if your_side = 8 then
18583: LD_OWVAR 2
18587: PUSH
18588: LD_INT 8
18590: EQUAL
18591: IFFALSE 18603
// your_side := 0 else
18593: LD_ADDR_OWVAR 2
18597: PUSH
18598: LD_INT 0
18600: ST_TO_ADDR
18601: GO 18617
// your_side := your_side + 1 ;
18603: LD_ADDR_OWVAR 2
18607: PUSH
18608: LD_OWVAR 2
18612: PUSH
18613: LD_INT 1
18615: PLUS
18616: ST_TO_ADDR
// end ;
18617: LD_VAR 0 1
18621: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18622: LD_INT 0
18624: PPUSH
18625: PPUSH
18626: PPUSH
// for i in all_units do
18627: LD_ADDR_VAR 0 2
18631: PUSH
18632: LD_OWVAR 3
18636: PUSH
18637: FOR_IN
18638: IFFALSE 18716
// if IsSelected ( i ) then
18640: LD_VAR 0 2
18644: PPUSH
18645: CALL_OW 306
18649: IFFALSE 18714
// begin j := GetSide ( i ) ;
18651: LD_ADDR_VAR 0 3
18655: PUSH
18656: LD_VAR 0 2
18660: PPUSH
18661: CALL_OW 255
18665: ST_TO_ADDR
// if j = 8 then
18666: LD_VAR 0 3
18670: PUSH
18671: LD_INT 8
18673: EQUAL
18674: IFFALSE 18686
// j := 0 else
18676: LD_ADDR_VAR 0 3
18680: PUSH
18681: LD_INT 0
18683: ST_TO_ADDR
18684: GO 18700
// j := j + 1 ;
18686: LD_ADDR_VAR 0 3
18690: PUSH
18691: LD_VAR 0 3
18695: PUSH
18696: LD_INT 1
18698: PLUS
18699: ST_TO_ADDR
// SetSide ( i , j ) ;
18700: LD_VAR 0 2
18704: PPUSH
18705: LD_VAR 0 3
18709: PPUSH
18710: CALL_OW 235
// end ;
18714: GO 18637
18716: POP
18717: POP
// end ;
18718: LD_VAR 0 1
18722: RET
// export function hHackFog ; begin
18723: LD_INT 0
18725: PPUSH
// FogOff ( true ) ;
18726: LD_INT 1
18728: PPUSH
18729: CALL_OW 344
// end ;
18733: LD_VAR 0 1
18737: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18738: LD_INT 0
18740: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18741: LD_VAR 0 1
18745: PPUSH
18746: LD_VAR 0 2
18750: PPUSH
18751: LD_VAR 0 3
18755: PPUSH
18756: LD_INT 1
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 483
// CenterOnXY ( x , y ) ;
18766: LD_VAR 0 2
18770: PPUSH
18771: LD_VAR 0 3
18775: PPUSH
18776: CALL_OW 84
// end ;
18780: LD_VAR 0 4
18784: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18785: LD_INT 0
18787: PPUSH
18788: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18789: LD_VAR 0 1
18793: NOT
18794: PUSH
18795: LD_VAR 0 2
18799: PPUSH
18800: LD_VAR 0 3
18804: PPUSH
18805: CALL_OW 488
18809: NOT
18810: OR
18811: PUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: CALL_OW 266
18821: PUSH
18822: LD_INT 3
18824: NONEQUAL
18825: PUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 247
18835: PUSH
18836: LD_INT 1
18838: EQUAL
18839: NOT
18840: AND
18841: OR
18842: IFFALSE 18846
// exit ;
18844: GO 18995
// if GetType ( factory ) = unit_human then
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 247
18855: PUSH
18856: LD_INT 1
18858: EQUAL
18859: IFFALSE 18876
// factory := IsInUnit ( factory ) ;
18861: LD_ADDR_VAR 0 1
18865: PUSH
18866: LD_VAR 0 1
18870: PPUSH
18871: CALL_OW 310
18875: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18876: LD_VAR 0 1
18880: PPUSH
18881: CALL_OW 266
18885: PUSH
18886: LD_INT 3
18888: NONEQUAL
18889: IFFALSE 18893
// exit ;
18891: GO 18995
// if HexInfo ( x , y ) = factory then
18893: LD_VAR 0 2
18897: PPUSH
18898: LD_VAR 0 3
18902: PPUSH
18903: CALL_OW 428
18907: PUSH
18908: LD_VAR 0 1
18912: EQUAL
18913: IFFALSE 18940
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18915: LD_ADDR_EXP 70
18919: PUSH
18920: LD_EXP 70
18924: PPUSH
18925: LD_VAR 0 1
18929: PPUSH
18930: LD_INT 0
18932: PPUSH
18933: CALL_OW 1
18937: ST_TO_ADDR
18938: GO 18991
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18940: LD_ADDR_EXP 70
18944: PUSH
18945: LD_EXP 70
18949: PPUSH
18950: LD_VAR 0 1
18954: PPUSH
18955: LD_VAR 0 1
18959: PPUSH
18960: CALL_OW 255
18964: PUSH
18965: LD_VAR 0 1
18969: PUSH
18970: LD_VAR 0 2
18974: PUSH
18975: LD_VAR 0 3
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: PPUSH
18986: CALL_OW 1
18990: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18991: CALL 19000 0 0
// end ;
18995: LD_VAR 0 4
18999: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19005: LD_STRING resetFactoryWaypoint();
19007: PPUSH
19008: CALL_OW 559
// if factoryWaypoints then
19012: LD_EXP 70
19016: IFFALSE 19142
// begin list := PrepareArray ( factoryWaypoints ) ;
19018: LD_ADDR_VAR 0 3
19022: PUSH
19023: LD_EXP 70
19027: PPUSH
19028: CALL 61175 0 1
19032: ST_TO_ADDR
// for i := 1 to list do
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: DOUBLE
19039: LD_INT 1
19041: DEC
19042: ST_TO_ADDR
19043: LD_VAR 0 3
19047: PUSH
19048: FOR_TO
19049: IFFALSE 19140
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19051: LD_STRING setFactoryWaypointXY(
19053: PUSH
19054: LD_VAR 0 3
19058: PUSH
19059: LD_VAR 0 2
19063: ARRAY
19064: PUSH
19065: LD_INT 1
19067: ARRAY
19068: STR
19069: PUSH
19070: LD_STRING ,
19072: STR
19073: PUSH
19074: LD_VAR 0 3
19078: PUSH
19079: LD_VAR 0 2
19083: ARRAY
19084: PUSH
19085: LD_INT 2
19087: ARRAY
19088: STR
19089: PUSH
19090: LD_STRING ,
19092: STR
19093: PUSH
19094: LD_VAR 0 3
19098: PUSH
19099: LD_VAR 0 2
19103: ARRAY
19104: PUSH
19105: LD_INT 3
19107: ARRAY
19108: STR
19109: PUSH
19110: LD_STRING ,
19112: STR
19113: PUSH
19114: LD_VAR 0 3
19118: PUSH
19119: LD_VAR 0 2
19123: ARRAY
19124: PUSH
19125: LD_INT 4
19127: ARRAY
19128: STR
19129: PUSH
19130: LD_STRING )
19132: STR
19133: PPUSH
19134: CALL_OW 559
19138: GO 19048
19140: POP
19141: POP
// end ; end ;
19142: LD_VAR 0 1
19146: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19147: LD_INT 0
19149: PPUSH
// if HexInfo ( x , y ) = warehouse then
19150: LD_VAR 0 2
19154: PPUSH
19155: LD_VAR 0 3
19159: PPUSH
19160: CALL_OW 428
19164: PUSH
19165: LD_VAR 0 1
19169: EQUAL
19170: IFFALSE 19197
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19172: LD_ADDR_EXP 71
19176: PUSH
19177: LD_EXP 71
19181: PPUSH
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_INT 0
19189: PPUSH
19190: CALL_OW 1
19194: ST_TO_ADDR
19195: GO 19248
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19197: LD_ADDR_EXP 71
19201: PUSH
19202: LD_EXP 71
19206: PPUSH
19207: LD_VAR 0 1
19211: PPUSH
19212: LD_VAR 0 1
19216: PPUSH
19217: CALL_OW 255
19221: PUSH
19222: LD_VAR 0 1
19226: PUSH
19227: LD_VAR 0 2
19231: PUSH
19232: LD_VAR 0 3
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: PPUSH
19243: CALL_OW 1
19247: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19248: CALL 19257 0 0
// end ;
19252: LD_VAR 0 4
19256: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19257: LD_INT 0
19259: PPUSH
19260: PPUSH
19261: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19262: LD_STRING resetWarehouseGatheringPoints();
19264: PPUSH
19265: CALL_OW 559
// if warehouseGatheringPoints then
19269: LD_EXP 71
19273: IFFALSE 19399
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19275: LD_ADDR_VAR 0 3
19279: PUSH
19280: LD_EXP 71
19284: PPUSH
19285: CALL 61175 0 1
19289: ST_TO_ADDR
// for i := 1 to list do
19290: LD_ADDR_VAR 0 2
19294: PUSH
19295: DOUBLE
19296: LD_INT 1
19298: DEC
19299: ST_TO_ADDR
19300: LD_VAR 0 3
19304: PUSH
19305: FOR_TO
19306: IFFALSE 19397
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19308: LD_STRING setWarehouseGatheringPointXY(
19310: PUSH
19311: LD_VAR 0 3
19315: PUSH
19316: LD_VAR 0 2
19320: ARRAY
19321: PUSH
19322: LD_INT 1
19324: ARRAY
19325: STR
19326: PUSH
19327: LD_STRING ,
19329: STR
19330: PUSH
19331: LD_VAR 0 3
19335: PUSH
19336: LD_VAR 0 2
19340: ARRAY
19341: PUSH
19342: LD_INT 2
19344: ARRAY
19345: STR
19346: PUSH
19347: LD_STRING ,
19349: STR
19350: PUSH
19351: LD_VAR 0 3
19355: PUSH
19356: LD_VAR 0 2
19360: ARRAY
19361: PUSH
19362: LD_INT 3
19364: ARRAY
19365: STR
19366: PUSH
19367: LD_STRING ,
19369: STR
19370: PUSH
19371: LD_VAR 0 3
19375: PUSH
19376: LD_VAR 0 2
19380: ARRAY
19381: PUSH
19382: LD_INT 4
19384: ARRAY
19385: STR
19386: PUSH
19387: LD_STRING )
19389: STR
19390: PPUSH
19391: CALL_OW 559
19395: GO 19305
19397: POP
19398: POP
// end ; end ;
19399: LD_VAR 0 1
19403: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19404: LD_EXP 71
19408: IFFALSE 20093
19410: GO 19412
19412: DISABLE
19413: LD_INT 0
19415: PPUSH
19416: PPUSH
19417: PPUSH
19418: PPUSH
19419: PPUSH
19420: PPUSH
19421: PPUSH
19422: PPUSH
19423: PPUSH
// begin enable ;
19424: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19425: LD_ADDR_VAR 0 3
19429: PUSH
19430: LD_EXP 71
19434: PPUSH
19435: CALL 61175 0 1
19439: ST_TO_ADDR
// if not list then
19440: LD_VAR 0 3
19444: NOT
19445: IFFALSE 19449
// exit ;
19447: GO 20093
// for i := 1 to list do
19449: LD_ADDR_VAR 0 1
19453: PUSH
19454: DOUBLE
19455: LD_INT 1
19457: DEC
19458: ST_TO_ADDR
19459: LD_VAR 0 3
19463: PUSH
19464: FOR_TO
19465: IFFALSE 20091
// begin depot := list [ i ] [ 2 ] ;
19467: LD_ADDR_VAR 0 8
19471: PUSH
19472: LD_VAR 0 3
19476: PUSH
19477: LD_VAR 0 1
19481: ARRAY
19482: PUSH
19483: LD_INT 2
19485: ARRAY
19486: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19487: LD_ADDR_VAR 0 5
19491: PUSH
19492: LD_VAR 0 3
19496: PUSH
19497: LD_VAR 0 1
19501: ARRAY
19502: PUSH
19503: LD_INT 1
19505: ARRAY
19506: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19507: LD_VAR 0 8
19511: PPUSH
19512: CALL_OW 301
19516: PUSH
19517: LD_VAR 0 5
19521: PUSH
19522: LD_VAR 0 8
19526: PPUSH
19527: CALL_OW 255
19531: NONEQUAL
19532: OR
19533: IFFALSE 19562
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19535: LD_ADDR_EXP 71
19539: PUSH
19540: LD_EXP 71
19544: PPUSH
19545: LD_VAR 0 8
19549: PPUSH
19550: LD_INT 0
19552: PPUSH
19553: CALL_OW 1
19557: ST_TO_ADDR
// exit ;
19558: POP
19559: POP
19560: GO 20093
// end ; x := list [ i ] [ 3 ] ;
19562: LD_ADDR_VAR 0 6
19566: PUSH
19567: LD_VAR 0 3
19571: PUSH
19572: LD_VAR 0 1
19576: ARRAY
19577: PUSH
19578: LD_INT 3
19580: ARRAY
19581: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19582: LD_ADDR_VAR 0 7
19586: PUSH
19587: LD_VAR 0 3
19591: PUSH
19592: LD_VAR 0 1
19596: ARRAY
19597: PUSH
19598: LD_INT 4
19600: ARRAY
19601: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19602: LD_ADDR_VAR 0 9
19606: PUSH
19607: LD_VAR 0 6
19611: PPUSH
19612: LD_VAR 0 7
19616: PPUSH
19617: LD_INT 16
19619: PPUSH
19620: CALL 59763 0 3
19624: ST_TO_ADDR
// if not cratesNearbyPoint then
19625: LD_VAR 0 9
19629: NOT
19630: IFFALSE 19636
// exit ;
19632: POP
19633: POP
19634: GO 20093
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19636: LD_ADDR_VAR 0 4
19640: PUSH
19641: LD_INT 22
19643: PUSH
19644: LD_VAR 0 5
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 3
19655: PUSH
19656: LD_INT 60
19658: PUSH
19659: EMPTY
19660: LIST
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 91
19668: PUSH
19669: LD_VAR 0 8
19673: PUSH
19674: LD_INT 6
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: LD_INT 25
19687: PUSH
19688: LD_INT 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 25
19697: PUSH
19698: LD_INT 16
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: PPUSH
19716: CALL_OW 69
19720: PUSH
19721: LD_VAR 0 8
19725: PPUSH
19726: CALL_OW 313
19730: PPUSH
19731: LD_INT 3
19733: PUSH
19734: LD_INT 60
19736: PUSH
19737: EMPTY
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: LD_INT 25
19749: PUSH
19750: LD_INT 2
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 25
19759: PUSH
19760: LD_INT 16
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PPUSH
19776: CALL_OW 72
19780: UNION
19781: ST_TO_ADDR
// if tmp then
19782: LD_VAR 0 4
19786: IFFALSE 19866
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19788: LD_ADDR_VAR 0 4
19792: PUSH
19793: LD_VAR 0 4
19797: PPUSH
19798: LD_INT 3
19800: PPUSH
19801: CALL 57732 0 2
19805: ST_TO_ADDR
// for j in tmp do
19806: LD_ADDR_VAR 0 2
19810: PUSH
19811: LD_VAR 0 4
19815: PUSH
19816: FOR_IN
19817: IFFALSE 19860
// begin if IsInUnit ( j ) then
19819: LD_VAR 0 2
19823: PPUSH
19824: CALL_OW 310
19828: IFFALSE 19839
// ComExit ( j ) ;
19830: LD_VAR 0 2
19834: PPUSH
19835: CALL 57815 0 1
// AddComCollect ( j , x , y ) ;
19839: LD_VAR 0 2
19843: PPUSH
19844: LD_VAR 0 6
19848: PPUSH
19849: LD_VAR 0 7
19853: PPUSH
19854: CALL_OW 177
// end ;
19858: GO 19816
19860: POP
19861: POP
// exit ;
19862: POP
19863: POP
19864: GO 20093
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19866: LD_ADDR_VAR 0 4
19870: PUSH
19871: LD_INT 22
19873: PUSH
19874: LD_VAR 0 5
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 91
19885: PUSH
19886: LD_VAR 0 8
19890: PUSH
19891: LD_INT 8
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 34
19904: PUSH
19905: LD_INT 12
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 34
19914: PUSH
19915: LD_INT 51
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 34
19924: PUSH
19925: LD_INT 32
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 34
19934: PUSH
19935: LD_INT 89
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: PPUSH
19954: CALL_OW 69
19958: ST_TO_ADDR
// if tmp then
19959: LD_VAR 0 4
19963: IFFALSE 20089
// begin for j in tmp do
19965: LD_ADDR_VAR 0 2
19969: PUSH
19970: LD_VAR 0 4
19974: PUSH
19975: FOR_IN
19976: IFFALSE 20087
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19978: LD_VAR 0 2
19982: PPUSH
19983: CALL_OW 262
19987: PUSH
19988: LD_INT 3
19990: EQUAL
19991: PUSH
19992: LD_VAR 0 2
19996: PPUSH
19997: CALL_OW 261
20001: PUSH
20002: LD_INT 20
20004: GREATER
20005: OR
20006: PUSH
20007: LD_VAR 0 2
20011: PPUSH
20012: CALL_OW 314
20016: NOT
20017: AND
20018: PUSH
20019: LD_VAR 0 2
20023: PPUSH
20024: CALL_OW 263
20028: PUSH
20029: LD_INT 1
20031: NONEQUAL
20032: PUSH
20033: LD_VAR 0 2
20037: PPUSH
20038: CALL_OW 311
20042: OR
20043: AND
20044: IFFALSE 20085
// begin ComCollect ( j , x , y ) ;
20046: LD_VAR 0 2
20050: PPUSH
20051: LD_VAR 0 6
20055: PPUSH
20056: LD_VAR 0 7
20060: PPUSH
20061: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20065: LD_VAR 0 2
20069: PPUSH
20070: LD_VAR 0 8
20074: PPUSH
20075: CALL_OW 172
// exit ;
20079: POP
20080: POP
20081: POP
20082: POP
20083: GO 20093
// end ;
20085: GO 19975
20087: POP
20088: POP
// end ; end ;
20089: GO 19464
20091: POP
20092: POP
// end ; end_of_file
20093: PPOPN 9
20095: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20096: LD_INT 0
20098: PPUSH
20099: PPUSH
// if exist_mode then
20100: LD_VAR 0 2
20104: IFFALSE 20129
// unit := CreateCharacter ( prefix & ident ) else
20106: LD_ADDR_VAR 0 5
20110: PUSH
20111: LD_VAR 0 3
20115: PUSH
20116: LD_VAR 0 1
20120: STR
20121: PPUSH
20122: CALL_OW 34
20126: ST_TO_ADDR
20127: GO 20144
// unit := NewCharacter ( ident ) ;
20129: LD_ADDR_VAR 0 5
20133: PUSH
20134: LD_VAR 0 1
20138: PPUSH
20139: CALL_OW 25
20143: ST_TO_ADDR
// result := unit ;
20144: LD_ADDR_VAR 0 4
20148: PUSH
20149: LD_VAR 0 5
20153: ST_TO_ADDR
// end ;
20154: LD_VAR 0 4
20158: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20159: LD_INT 0
20161: PPUSH
20162: PPUSH
// if not side or not nation then
20163: LD_VAR 0 1
20167: NOT
20168: PUSH
20169: LD_VAR 0 2
20173: NOT
20174: OR
20175: IFFALSE 20179
// exit ;
20177: GO 20947
// case nation of nation_american :
20179: LD_VAR 0 2
20183: PUSH
20184: LD_INT 1
20186: DOUBLE
20187: EQUAL
20188: IFTRUE 20192
20190: GO 20406
20192: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20193: LD_ADDR_VAR 0 4
20197: PUSH
20198: LD_INT 35
20200: PUSH
20201: LD_INT 45
20203: PUSH
20204: LD_INT 46
20206: PUSH
20207: LD_INT 47
20209: PUSH
20210: LD_INT 82
20212: PUSH
20213: LD_INT 83
20215: PUSH
20216: LD_INT 84
20218: PUSH
20219: LD_INT 85
20221: PUSH
20222: LD_INT 86
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: LD_INT 2
20230: PUSH
20231: LD_INT 6
20233: PUSH
20234: LD_INT 15
20236: PUSH
20237: LD_INT 16
20239: PUSH
20240: LD_INT 7
20242: PUSH
20243: LD_INT 12
20245: PUSH
20246: LD_INT 13
20248: PUSH
20249: LD_INT 10
20251: PUSH
20252: LD_INT 14
20254: PUSH
20255: LD_INT 20
20257: PUSH
20258: LD_INT 21
20260: PUSH
20261: LD_INT 22
20263: PUSH
20264: LD_INT 25
20266: PUSH
20267: LD_INT 32
20269: PUSH
20270: LD_INT 27
20272: PUSH
20273: LD_INT 36
20275: PUSH
20276: LD_INT 69
20278: PUSH
20279: LD_INT 39
20281: PUSH
20282: LD_INT 34
20284: PUSH
20285: LD_INT 40
20287: PUSH
20288: LD_INT 48
20290: PUSH
20291: LD_INT 49
20293: PUSH
20294: LD_INT 50
20296: PUSH
20297: LD_INT 51
20299: PUSH
20300: LD_INT 52
20302: PUSH
20303: LD_INT 53
20305: PUSH
20306: LD_INT 54
20308: PUSH
20309: LD_INT 55
20311: PUSH
20312: LD_INT 56
20314: PUSH
20315: LD_INT 57
20317: PUSH
20318: LD_INT 58
20320: PUSH
20321: LD_INT 59
20323: PUSH
20324: LD_INT 60
20326: PUSH
20327: LD_INT 61
20329: PUSH
20330: LD_INT 62
20332: PUSH
20333: LD_INT 80
20335: PUSH
20336: LD_INT 82
20338: PUSH
20339: LD_INT 83
20341: PUSH
20342: LD_INT 84
20344: PUSH
20345: LD_INT 85
20347: PUSH
20348: LD_INT 86
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: ST_TO_ADDR
20404: GO 20871
20406: LD_INT 2
20408: DOUBLE
20409: EQUAL
20410: IFTRUE 20414
20412: GO 20640
20414: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20415: LD_ADDR_VAR 0 4
20419: PUSH
20420: LD_INT 35
20422: PUSH
20423: LD_INT 45
20425: PUSH
20426: LD_INT 46
20428: PUSH
20429: LD_INT 47
20431: PUSH
20432: LD_INT 82
20434: PUSH
20435: LD_INT 83
20437: PUSH
20438: LD_INT 84
20440: PUSH
20441: LD_INT 85
20443: PUSH
20444: LD_INT 87
20446: PUSH
20447: LD_INT 70
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: LD_INT 11
20455: PUSH
20456: LD_INT 3
20458: PUSH
20459: LD_INT 4
20461: PUSH
20462: LD_INT 5
20464: PUSH
20465: LD_INT 6
20467: PUSH
20468: LD_INT 15
20470: PUSH
20471: LD_INT 18
20473: PUSH
20474: LD_INT 7
20476: PUSH
20477: LD_INT 17
20479: PUSH
20480: LD_INT 8
20482: PUSH
20483: LD_INT 20
20485: PUSH
20486: LD_INT 21
20488: PUSH
20489: LD_INT 22
20491: PUSH
20492: LD_INT 72
20494: PUSH
20495: LD_INT 26
20497: PUSH
20498: LD_INT 69
20500: PUSH
20501: LD_INT 39
20503: PUSH
20504: LD_INT 40
20506: PUSH
20507: LD_INT 41
20509: PUSH
20510: LD_INT 42
20512: PUSH
20513: LD_INT 43
20515: PUSH
20516: LD_INT 48
20518: PUSH
20519: LD_INT 49
20521: PUSH
20522: LD_INT 50
20524: PUSH
20525: LD_INT 51
20527: PUSH
20528: LD_INT 52
20530: PUSH
20531: LD_INT 53
20533: PUSH
20534: LD_INT 54
20536: PUSH
20537: LD_INT 55
20539: PUSH
20540: LD_INT 56
20542: PUSH
20543: LD_INT 60
20545: PUSH
20546: LD_INT 61
20548: PUSH
20549: LD_INT 62
20551: PUSH
20552: LD_INT 66
20554: PUSH
20555: LD_INT 67
20557: PUSH
20558: LD_INT 68
20560: PUSH
20561: LD_INT 81
20563: PUSH
20564: LD_INT 82
20566: PUSH
20567: LD_INT 83
20569: PUSH
20570: LD_INT 84
20572: PUSH
20573: LD_INT 85
20575: PUSH
20576: LD_INT 87
20578: PUSH
20579: LD_INT 88
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: ST_TO_ADDR
20638: GO 20871
20640: LD_INT 3
20642: DOUBLE
20643: EQUAL
20644: IFTRUE 20648
20646: GO 20870
20648: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20649: LD_ADDR_VAR 0 4
20653: PUSH
20654: LD_INT 46
20656: PUSH
20657: LD_INT 47
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 82
20668: PUSH
20669: LD_INT 83
20671: PUSH
20672: LD_INT 84
20674: PUSH
20675: LD_INT 85
20677: PUSH
20678: LD_INT 86
20680: PUSH
20681: LD_INT 11
20683: PUSH
20684: LD_INT 9
20686: PUSH
20687: LD_INT 20
20689: PUSH
20690: LD_INT 19
20692: PUSH
20693: LD_INT 21
20695: PUSH
20696: LD_INT 24
20698: PUSH
20699: LD_INT 22
20701: PUSH
20702: LD_INT 25
20704: PUSH
20705: LD_INT 28
20707: PUSH
20708: LD_INT 29
20710: PUSH
20711: LD_INT 30
20713: PUSH
20714: LD_INT 31
20716: PUSH
20717: LD_INT 37
20719: PUSH
20720: LD_INT 38
20722: PUSH
20723: LD_INT 32
20725: PUSH
20726: LD_INT 27
20728: PUSH
20729: LD_INT 33
20731: PUSH
20732: LD_INT 69
20734: PUSH
20735: LD_INT 39
20737: PUSH
20738: LD_INT 34
20740: PUSH
20741: LD_INT 40
20743: PUSH
20744: LD_INT 71
20746: PUSH
20747: LD_INT 23
20749: PUSH
20750: LD_INT 44
20752: PUSH
20753: LD_INT 48
20755: PUSH
20756: LD_INT 49
20758: PUSH
20759: LD_INT 50
20761: PUSH
20762: LD_INT 51
20764: PUSH
20765: LD_INT 52
20767: PUSH
20768: LD_INT 53
20770: PUSH
20771: LD_INT 54
20773: PUSH
20774: LD_INT 55
20776: PUSH
20777: LD_INT 56
20779: PUSH
20780: LD_INT 57
20782: PUSH
20783: LD_INT 58
20785: PUSH
20786: LD_INT 59
20788: PUSH
20789: LD_INT 63
20791: PUSH
20792: LD_INT 64
20794: PUSH
20795: LD_INT 65
20797: PUSH
20798: LD_INT 82
20800: PUSH
20801: LD_INT 83
20803: PUSH
20804: LD_INT 84
20806: PUSH
20807: LD_INT 85
20809: PUSH
20810: LD_INT 86
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: ST_TO_ADDR
20868: GO 20871
20870: POP
// if state > - 1 and state < 3 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: GREATER
20880: PUSH
20881: LD_VAR 0 3
20885: PUSH
20886: LD_INT 3
20888: LESS
20889: AND
20890: IFFALSE 20947
// for i in result do
20892: LD_ADDR_VAR 0 5
20896: PUSH
20897: LD_VAR 0 4
20901: PUSH
20902: FOR_IN
20903: IFFALSE 20945
// if GetTech ( i , side ) <> state then
20905: LD_VAR 0 5
20909: PPUSH
20910: LD_VAR 0 1
20914: PPUSH
20915: CALL_OW 321
20919: PUSH
20920: LD_VAR 0 3
20924: NONEQUAL
20925: IFFALSE 20943
// result := result diff i ;
20927: LD_ADDR_VAR 0 4
20931: PUSH
20932: LD_VAR 0 4
20936: PUSH
20937: LD_VAR 0 5
20941: DIFF
20942: ST_TO_ADDR
20943: GO 20902
20945: POP
20946: POP
// end ;
20947: LD_VAR 0 4
20951: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20952: LD_INT 0
20954: PPUSH
20955: PPUSH
20956: PPUSH
// result := true ;
20957: LD_ADDR_VAR 0 3
20961: PUSH
20962: LD_INT 1
20964: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20965: LD_ADDR_VAR 0 5
20969: PUSH
20970: LD_VAR 0 2
20974: PPUSH
20975: CALL_OW 480
20979: ST_TO_ADDR
// if not tmp then
20980: LD_VAR 0 5
20984: NOT
20985: IFFALSE 20989
// exit ;
20987: GO 21038
// for i in tmp do
20989: LD_ADDR_VAR 0 4
20993: PUSH
20994: LD_VAR 0 5
20998: PUSH
20999: FOR_IN
21000: IFFALSE 21036
// if GetTech ( i , side ) <> state_researched then
21002: LD_VAR 0 4
21006: PPUSH
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL_OW 321
21016: PUSH
21017: LD_INT 2
21019: NONEQUAL
21020: IFFALSE 21034
// begin result := false ;
21022: LD_ADDR_VAR 0 3
21026: PUSH
21027: LD_INT 0
21029: ST_TO_ADDR
// exit ;
21030: POP
21031: POP
21032: GO 21038
// end ;
21034: GO 20999
21036: POP
21037: POP
// end ;
21038: LD_VAR 0 3
21042: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21043: LD_INT 0
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21058: LD_VAR 0 1
21062: NOT
21063: PUSH
21064: LD_VAR 0 1
21068: PPUSH
21069: CALL_OW 257
21073: PUSH
21074: LD_INT 9
21076: NONEQUAL
21077: OR
21078: IFFALSE 21082
// exit ;
21080: GO 21655
// side := GetSide ( unit ) ;
21082: LD_ADDR_VAR 0 9
21086: PUSH
21087: LD_VAR 0 1
21091: PPUSH
21092: CALL_OW 255
21096: ST_TO_ADDR
// tech_space := tech_spacanom ;
21097: LD_ADDR_VAR 0 12
21101: PUSH
21102: LD_INT 29
21104: ST_TO_ADDR
// tech_time := tech_taurad ;
21105: LD_ADDR_VAR 0 13
21109: PUSH
21110: LD_INT 28
21112: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21113: LD_ADDR_VAR 0 11
21117: PUSH
21118: LD_VAR 0 1
21122: PPUSH
21123: CALL_OW 310
21127: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21128: LD_VAR 0 11
21132: PPUSH
21133: CALL_OW 247
21137: PUSH
21138: LD_INT 2
21140: EQUAL
21141: IFFALSE 21145
// exit ;
21143: GO 21655
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21145: LD_ADDR_VAR 0 8
21149: PUSH
21150: LD_INT 81
21152: PUSH
21153: LD_VAR 0 9
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 3
21164: PUSH
21165: LD_INT 21
21167: PUSH
21168: LD_INT 3
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PPUSH
21183: CALL_OW 69
21187: ST_TO_ADDR
// if not tmp then
21188: LD_VAR 0 8
21192: NOT
21193: IFFALSE 21197
// exit ;
21195: GO 21655
// if in_unit then
21197: LD_VAR 0 11
21201: IFFALSE 21225
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21203: LD_ADDR_VAR 0 10
21207: PUSH
21208: LD_VAR 0 8
21212: PPUSH
21213: LD_VAR 0 11
21217: PPUSH
21218: CALL_OW 74
21222: ST_TO_ADDR
21223: GO 21245
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21225: LD_ADDR_VAR 0 10
21229: PUSH
21230: LD_VAR 0 8
21234: PPUSH
21235: LD_VAR 0 1
21239: PPUSH
21240: CALL_OW 74
21244: ST_TO_ADDR
// if not enemy then
21245: LD_VAR 0 10
21249: NOT
21250: IFFALSE 21254
// exit ;
21252: GO 21655
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21254: LD_VAR 0 11
21258: PUSH
21259: LD_VAR 0 11
21263: PPUSH
21264: LD_VAR 0 10
21268: PPUSH
21269: CALL_OW 296
21273: PUSH
21274: LD_INT 13
21276: GREATER
21277: AND
21278: PUSH
21279: LD_VAR 0 1
21283: PPUSH
21284: LD_VAR 0 10
21288: PPUSH
21289: CALL_OW 296
21293: PUSH
21294: LD_INT 12
21296: GREATER
21297: OR
21298: IFFALSE 21302
// exit ;
21300: GO 21655
// missile := [ 1 ] ;
21302: LD_ADDR_VAR 0 14
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21313: LD_VAR 0 9
21317: PPUSH
21318: LD_VAR 0 12
21322: PPUSH
21323: CALL_OW 325
21327: IFFALSE 21356
// missile := Replace ( missile , missile + 1 , 2 ) ;
21329: LD_ADDR_VAR 0 14
21333: PUSH
21334: LD_VAR 0 14
21338: PPUSH
21339: LD_VAR 0 14
21343: PUSH
21344: LD_INT 1
21346: PLUS
21347: PPUSH
21348: LD_INT 2
21350: PPUSH
21351: CALL_OW 1
21355: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21356: LD_VAR 0 9
21360: PPUSH
21361: LD_VAR 0 13
21365: PPUSH
21366: CALL_OW 325
21370: PUSH
21371: LD_VAR 0 10
21375: PPUSH
21376: CALL_OW 255
21380: PPUSH
21381: LD_VAR 0 13
21385: PPUSH
21386: CALL_OW 325
21390: NOT
21391: AND
21392: IFFALSE 21421
// missile := Replace ( missile , missile + 1 , 3 ) ;
21394: LD_ADDR_VAR 0 14
21398: PUSH
21399: LD_VAR 0 14
21403: PPUSH
21404: LD_VAR 0 14
21408: PUSH
21409: LD_INT 1
21411: PLUS
21412: PPUSH
21413: LD_INT 3
21415: PPUSH
21416: CALL_OW 1
21420: ST_TO_ADDR
// if missile < 2 then
21421: LD_VAR 0 14
21425: PUSH
21426: LD_INT 2
21428: LESS
21429: IFFALSE 21433
// exit ;
21431: GO 21655
// x := GetX ( enemy ) ;
21433: LD_ADDR_VAR 0 4
21437: PUSH
21438: LD_VAR 0 10
21442: PPUSH
21443: CALL_OW 250
21447: ST_TO_ADDR
// y := GetY ( enemy ) ;
21448: LD_ADDR_VAR 0 5
21452: PUSH
21453: LD_VAR 0 10
21457: PPUSH
21458: CALL_OW 251
21462: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21463: LD_ADDR_VAR 0 6
21467: PUSH
21468: LD_VAR 0 4
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PPUSH
21477: LD_INT 1
21479: PPUSH
21480: CALL_OW 12
21484: PLUS
21485: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21486: LD_ADDR_VAR 0 7
21490: PUSH
21491: LD_VAR 0 5
21495: PUSH
21496: LD_INT 1
21498: NEG
21499: PPUSH
21500: LD_INT 1
21502: PPUSH
21503: CALL_OW 12
21507: PLUS
21508: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21509: LD_VAR 0 6
21513: PPUSH
21514: LD_VAR 0 7
21518: PPUSH
21519: CALL_OW 488
21523: NOT
21524: IFFALSE 21546
// begin _x := x ;
21526: LD_ADDR_VAR 0 6
21530: PUSH
21531: LD_VAR 0 4
21535: ST_TO_ADDR
// _y := y ;
21536: LD_ADDR_VAR 0 7
21540: PUSH
21541: LD_VAR 0 5
21545: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21546: LD_ADDR_VAR 0 3
21550: PUSH
21551: LD_INT 1
21553: PPUSH
21554: LD_VAR 0 14
21558: PPUSH
21559: CALL_OW 12
21563: ST_TO_ADDR
// case i of 1 :
21564: LD_VAR 0 3
21568: PUSH
21569: LD_INT 1
21571: DOUBLE
21572: EQUAL
21573: IFTRUE 21577
21575: GO 21594
21577: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21578: LD_VAR 0 1
21582: PPUSH
21583: LD_VAR 0 10
21587: PPUSH
21588: CALL_OW 115
21592: GO 21655
21594: LD_INT 2
21596: DOUBLE
21597: EQUAL
21598: IFTRUE 21602
21600: GO 21624
21602: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21603: LD_VAR 0 1
21607: PPUSH
21608: LD_VAR 0 6
21612: PPUSH
21613: LD_VAR 0 7
21617: PPUSH
21618: CALL_OW 153
21622: GO 21655
21624: LD_INT 3
21626: DOUBLE
21627: EQUAL
21628: IFTRUE 21632
21630: GO 21654
21632: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21633: LD_VAR 0 1
21637: PPUSH
21638: LD_VAR 0 6
21642: PPUSH
21643: LD_VAR 0 7
21647: PPUSH
21648: CALL_OW 154
21652: GO 21655
21654: POP
// end ;
21655: LD_VAR 0 2
21659: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21660: LD_INT 0
21662: PPUSH
21663: PPUSH
21664: PPUSH
21665: PPUSH
21666: PPUSH
21667: PPUSH
// if not unit or not building then
21668: LD_VAR 0 1
21672: NOT
21673: PUSH
21674: LD_VAR 0 2
21678: NOT
21679: OR
21680: IFFALSE 21684
// exit ;
21682: GO 21842
// x := GetX ( building ) ;
21684: LD_ADDR_VAR 0 5
21688: PUSH
21689: LD_VAR 0 2
21693: PPUSH
21694: CALL_OW 250
21698: ST_TO_ADDR
// y := GetY ( building ) ;
21699: LD_ADDR_VAR 0 6
21703: PUSH
21704: LD_VAR 0 2
21708: PPUSH
21709: CALL_OW 251
21713: ST_TO_ADDR
// for i = 0 to 5 do
21714: LD_ADDR_VAR 0 4
21718: PUSH
21719: DOUBLE
21720: LD_INT 0
21722: DEC
21723: ST_TO_ADDR
21724: LD_INT 5
21726: PUSH
21727: FOR_TO
21728: IFFALSE 21840
// begin _x := ShiftX ( x , i , 3 ) ;
21730: LD_ADDR_VAR 0 7
21734: PUSH
21735: LD_VAR 0 5
21739: PPUSH
21740: LD_VAR 0 4
21744: PPUSH
21745: LD_INT 3
21747: PPUSH
21748: CALL_OW 272
21752: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21753: LD_ADDR_VAR 0 8
21757: PUSH
21758: LD_VAR 0 6
21762: PPUSH
21763: LD_VAR 0 4
21767: PPUSH
21768: LD_INT 3
21770: PPUSH
21771: CALL_OW 273
21775: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21776: LD_VAR 0 7
21780: PPUSH
21781: LD_VAR 0 8
21785: PPUSH
21786: CALL_OW 488
21790: NOT
21791: IFFALSE 21795
// continue ;
21793: GO 21727
// if HexInfo ( _x , _y ) = 0 then
21795: LD_VAR 0 7
21799: PPUSH
21800: LD_VAR 0 8
21804: PPUSH
21805: CALL_OW 428
21809: PUSH
21810: LD_INT 0
21812: EQUAL
21813: IFFALSE 21838
// begin ComMoveXY ( unit , _x , _y ) ;
21815: LD_VAR 0 1
21819: PPUSH
21820: LD_VAR 0 7
21824: PPUSH
21825: LD_VAR 0 8
21829: PPUSH
21830: CALL_OW 111
// exit ;
21834: POP
21835: POP
21836: GO 21842
// end ; end ;
21838: GO 21727
21840: POP
21841: POP
// end ;
21842: LD_VAR 0 3
21846: RET
// export function ScanBase ( side , base_area ) ; begin
21847: LD_INT 0
21849: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21850: LD_ADDR_VAR 0 3
21854: PUSH
21855: LD_VAR 0 2
21859: PPUSH
21860: LD_INT 81
21862: PUSH
21863: LD_VAR 0 1
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PPUSH
21872: CALL_OW 70
21876: ST_TO_ADDR
// end ;
21877: LD_VAR 0 3
21881: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21882: LD_INT 0
21884: PPUSH
21885: PPUSH
21886: PPUSH
21887: PPUSH
// result := false ;
21888: LD_ADDR_VAR 0 2
21892: PUSH
21893: LD_INT 0
21895: ST_TO_ADDR
// side := GetSide ( unit ) ;
21896: LD_ADDR_VAR 0 3
21900: PUSH
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL_OW 255
21910: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21911: LD_ADDR_VAR 0 4
21915: PUSH
21916: LD_VAR 0 1
21920: PPUSH
21921: CALL_OW 248
21925: ST_TO_ADDR
// case nat of 1 :
21926: LD_VAR 0 4
21930: PUSH
21931: LD_INT 1
21933: DOUBLE
21934: EQUAL
21935: IFTRUE 21939
21937: GO 21950
21939: POP
// tech := tech_lassight ; 2 :
21940: LD_ADDR_VAR 0 5
21944: PUSH
21945: LD_INT 12
21947: ST_TO_ADDR
21948: GO 21989
21950: LD_INT 2
21952: DOUBLE
21953: EQUAL
21954: IFTRUE 21958
21956: GO 21969
21958: POP
// tech := tech_mortar ; 3 :
21959: LD_ADDR_VAR 0 5
21963: PUSH
21964: LD_INT 41
21966: ST_TO_ADDR
21967: GO 21989
21969: LD_INT 3
21971: DOUBLE
21972: EQUAL
21973: IFTRUE 21977
21975: GO 21988
21977: POP
// tech := tech_bazooka ; end ;
21978: LD_ADDR_VAR 0 5
21982: PUSH
21983: LD_INT 44
21985: ST_TO_ADDR
21986: GO 21989
21988: POP
// if Researched ( side , tech ) then
21989: LD_VAR 0 3
21993: PPUSH
21994: LD_VAR 0 5
21998: PPUSH
21999: CALL_OW 325
22003: IFFALSE 22030
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_INT 5
22012: PUSH
22013: LD_INT 8
22015: PUSH
22016: LD_INT 9
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: LIST
22023: PUSH
22024: LD_VAR 0 4
22028: ARRAY
22029: ST_TO_ADDR
// end ;
22030: LD_VAR 0 2
22034: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22035: LD_INT 0
22037: PPUSH
22038: PPUSH
22039: PPUSH
// if not mines then
22040: LD_VAR 0 2
22044: NOT
22045: IFFALSE 22049
// exit ;
22047: GO 22193
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22049: LD_ADDR_VAR 0 5
22053: PUSH
22054: LD_INT 81
22056: PUSH
22057: LD_VAR 0 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: LD_INT 21
22071: PUSH
22072: LD_INT 3
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PPUSH
22087: CALL_OW 69
22091: ST_TO_ADDR
// for i in mines do
22092: LD_ADDR_VAR 0 4
22096: PUSH
22097: LD_VAR 0 2
22101: PUSH
22102: FOR_IN
22103: IFFALSE 22191
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22105: LD_VAR 0 4
22109: PUSH
22110: LD_INT 1
22112: ARRAY
22113: PPUSH
22114: LD_VAR 0 4
22118: PUSH
22119: LD_INT 2
22121: ARRAY
22122: PPUSH
22123: CALL_OW 458
22127: NOT
22128: IFFALSE 22132
// continue ;
22130: GO 22102
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22132: LD_VAR 0 4
22136: PUSH
22137: LD_INT 1
22139: ARRAY
22140: PPUSH
22141: LD_VAR 0 4
22145: PUSH
22146: LD_INT 2
22148: ARRAY
22149: PPUSH
22150: CALL_OW 428
22154: PUSH
22155: LD_VAR 0 5
22159: IN
22160: IFFALSE 22189
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22162: LD_VAR 0 4
22166: PUSH
22167: LD_INT 1
22169: ARRAY
22170: PPUSH
22171: LD_VAR 0 4
22175: PUSH
22176: LD_INT 2
22178: ARRAY
22179: PPUSH
22180: LD_VAR 0 1
22184: PPUSH
22185: CALL_OW 456
// end ;
22189: GO 22102
22191: POP
22192: POP
// end ;
22193: LD_VAR 0 3
22197: RET
// export function Count ( array ) ; begin
22198: LD_INT 0
22200: PPUSH
// result := array + 0 ;
22201: LD_ADDR_VAR 0 2
22205: PUSH
22206: LD_VAR 0 1
22210: PUSH
22211: LD_INT 0
22213: PLUS
22214: ST_TO_ADDR
// end ;
22215: LD_VAR 0 2
22219: RET
// export function IsEmpty ( building ) ; begin
22220: LD_INT 0
22222: PPUSH
// if not building then
22223: LD_VAR 0 1
22227: NOT
22228: IFFALSE 22232
// exit ;
22230: GO 22275
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22232: LD_ADDR_VAR 0 2
22236: PUSH
22237: LD_VAR 0 1
22241: PUSH
22242: LD_INT 22
22244: PUSH
22245: LD_VAR 0 1
22249: PPUSH
22250: CALL_OW 255
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 58
22261: PUSH
22262: EMPTY
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PPUSH
22269: CALL_OW 69
22273: IN
22274: ST_TO_ADDR
// end ;
22275: LD_VAR 0 2
22279: RET
// export function IsNotFull ( building ) ; var places ; begin
22280: LD_INT 0
22282: PPUSH
22283: PPUSH
// if not building then
22284: LD_VAR 0 1
22288: NOT
22289: IFFALSE 22293
// exit ;
22291: GO 22321
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22293: LD_ADDR_VAR 0 2
22297: PUSH
22298: LD_VAR 0 1
22302: PPUSH
22303: LD_INT 3
22305: PUSH
22306: LD_INT 62
22308: PUSH
22309: EMPTY
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PPUSH
22316: CALL_OW 72
22320: ST_TO_ADDR
// end ;
22321: LD_VAR 0 2
22325: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22326: LD_INT 0
22328: PPUSH
22329: PPUSH
22330: PPUSH
22331: PPUSH
// tmp := [ ] ;
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: EMPTY
22338: ST_TO_ADDR
// list := [ ] ;
22339: LD_ADDR_VAR 0 5
22343: PUSH
22344: EMPTY
22345: ST_TO_ADDR
// for i = 16 to 25 do
22346: LD_ADDR_VAR 0 4
22350: PUSH
22351: DOUBLE
22352: LD_INT 16
22354: DEC
22355: ST_TO_ADDR
22356: LD_INT 25
22358: PUSH
22359: FOR_TO
22360: IFFALSE 22433
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22362: LD_ADDR_VAR 0 3
22366: PUSH
22367: LD_VAR 0 3
22371: PUSH
22372: LD_INT 22
22374: PUSH
22375: LD_VAR 0 1
22379: PPUSH
22380: CALL_OW 255
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 91
22391: PUSH
22392: LD_VAR 0 1
22396: PUSH
22397: LD_INT 6
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 30
22407: PUSH
22408: LD_VAR 0 4
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: PPUSH
22425: CALL_OW 69
22429: ADD
22430: ST_TO_ADDR
22431: GO 22359
22433: POP
22434: POP
// for i = 1 to tmp do
22435: LD_ADDR_VAR 0 4
22439: PUSH
22440: DOUBLE
22441: LD_INT 1
22443: DEC
22444: ST_TO_ADDR
22445: LD_VAR 0 3
22449: PUSH
22450: FOR_TO
22451: IFFALSE 22539
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22453: LD_ADDR_VAR 0 5
22457: PUSH
22458: LD_VAR 0 5
22462: PUSH
22463: LD_VAR 0 3
22467: PUSH
22468: LD_VAR 0 4
22472: ARRAY
22473: PPUSH
22474: CALL_OW 266
22478: PUSH
22479: LD_VAR 0 3
22483: PUSH
22484: LD_VAR 0 4
22488: ARRAY
22489: PPUSH
22490: CALL_OW 250
22494: PUSH
22495: LD_VAR 0 3
22499: PUSH
22500: LD_VAR 0 4
22504: ARRAY
22505: PPUSH
22506: CALL_OW 251
22510: PUSH
22511: LD_VAR 0 3
22515: PUSH
22516: LD_VAR 0 4
22520: ARRAY
22521: PPUSH
22522: CALL_OW 254
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: PUSH
22533: EMPTY
22534: LIST
22535: ADD
22536: ST_TO_ADDR
22537: GO 22450
22539: POP
22540: POP
// result := list ;
22541: LD_ADDR_VAR 0 2
22545: PUSH
22546: LD_VAR 0 5
22550: ST_TO_ADDR
// end ;
22551: LD_VAR 0 2
22555: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22556: LD_INT 0
22558: PPUSH
22559: PPUSH
22560: PPUSH
22561: PPUSH
22562: PPUSH
22563: PPUSH
22564: PPUSH
// if not factory then
22565: LD_VAR 0 1
22569: NOT
22570: IFFALSE 22574
// exit ;
22572: GO 23167
// if control = control_apeman then
22574: LD_VAR 0 4
22578: PUSH
22579: LD_INT 5
22581: EQUAL
22582: IFFALSE 22691
// begin tmp := UnitsInside ( factory ) ;
22584: LD_ADDR_VAR 0 8
22588: PUSH
22589: LD_VAR 0 1
22593: PPUSH
22594: CALL_OW 313
22598: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22599: LD_VAR 0 8
22603: PPUSH
22604: LD_INT 25
22606: PUSH
22607: LD_INT 12
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PPUSH
22614: CALL_OW 72
22618: NOT
22619: IFFALSE 22629
// control := control_manual ;
22621: LD_ADDR_VAR 0 4
22625: PUSH
22626: LD_INT 1
22628: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22629: LD_ADDR_VAR 0 8
22633: PUSH
22634: LD_VAR 0 1
22638: PPUSH
22639: CALL 22326 0 1
22643: ST_TO_ADDR
// if tmp then
22644: LD_VAR 0 8
22648: IFFALSE 22691
// begin for i in tmp do
22650: LD_ADDR_VAR 0 7
22654: PUSH
22655: LD_VAR 0 8
22659: PUSH
22660: FOR_IN
22661: IFFALSE 22689
// if i [ 1 ] = b_ext_radio then
22663: LD_VAR 0 7
22667: PUSH
22668: LD_INT 1
22670: ARRAY
22671: PUSH
22672: LD_INT 22
22674: EQUAL
22675: IFFALSE 22687
// begin control := control_remote ;
22677: LD_ADDR_VAR 0 4
22681: PUSH
22682: LD_INT 2
22684: ST_TO_ADDR
// break ;
22685: GO 22689
// end ;
22687: GO 22660
22689: POP
22690: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22691: LD_VAR 0 1
22695: PPUSH
22696: LD_VAR 0 2
22700: PPUSH
22701: LD_VAR 0 3
22705: PPUSH
22706: LD_VAR 0 4
22710: PPUSH
22711: LD_VAR 0 5
22715: PPUSH
22716: CALL_OW 448
22720: IFFALSE 22755
// begin result := [ chassis , engine , control , weapon ] ;
22722: LD_ADDR_VAR 0 6
22726: PUSH
22727: LD_VAR 0 2
22731: PUSH
22732: LD_VAR 0 3
22736: PUSH
22737: LD_VAR 0 4
22741: PUSH
22742: LD_VAR 0 5
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: ST_TO_ADDR
// exit ;
22753: GO 23167
// end ; _chassis := AvailableChassisList ( factory ) ;
22755: LD_ADDR_VAR 0 9
22759: PUSH
22760: LD_VAR 0 1
22764: PPUSH
22765: CALL_OW 475
22769: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22770: LD_ADDR_VAR 0 11
22774: PUSH
22775: LD_VAR 0 1
22779: PPUSH
22780: CALL_OW 476
22784: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22785: LD_ADDR_VAR 0 12
22789: PUSH
22790: LD_VAR 0 1
22794: PPUSH
22795: CALL_OW 477
22799: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22800: LD_ADDR_VAR 0 10
22804: PUSH
22805: LD_VAR 0 1
22809: PPUSH
22810: CALL_OW 478
22814: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22815: LD_VAR 0 9
22819: NOT
22820: PUSH
22821: LD_VAR 0 11
22825: NOT
22826: OR
22827: PUSH
22828: LD_VAR 0 12
22832: NOT
22833: OR
22834: PUSH
22835: LD_VAR 0 10
22839: NOT
22840: OR
22841: IFFALSE 22876
// begin result := [ chassis , engine , control , weapon ] ;
22843: LD_ADDR_VAR 0 6
22847: PUSH
22848: LD_VAR 0 2
22852: PUSH
22853: LD_VAR 0 3
22857: PUSH
22858: LD_VAR 0 4
22862: PUSH
22863: LD_VAR 0 5
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: ST_TO_ADDR
// exit ;
22874: GO 23167
// end ; if not chassis in _chassis then
22876: LD_VAR 0 2
22880: PUSH
22881: LD_VAR 0 9
22885: IN
22886: NOT
22887: IFFALSE 22913
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22889: LD_ADDR_VAR 0 2
22893: PUSH
22894: LD_VAR 0 9
22898: PUSH
22899: LD_INT 1
22901: PPUSH
22902: LD_VAR 0 9
22906: PPUSH
22907: CALL_OW 12
22911: ARRAY
22912: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22913: LD_VAR 0 2
22917: PPUSH
22918: LD_VAR 0 3
22922: PPUSH
22923: CALL 23172 0 2
22927: NOT
22928: IFFALSE 22987
// repeat engine := _engine [ 1 ] ;
22930: LD_ADDR_VAR 0 3
22934: PUSH
22935: LD_VAR 0 11
22939: PUSH
22940: LD_INT 1
22942: ARRAY
22943: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22944: LD_ADDR_VAR 0 11
22948: PUSH
22949: LD_VAR 0 11
22953: PPUSH
22954: LD_INT 1
22956: PPUSH
22957: CALL_OW 3
22961: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22962: LD_VAR 0 2
22966: PPUSH
22967: LD_VAR 0 3
22971: PPUSH
22972: CALL 23172 0 2
22976: PUSH
22977: LD_VAR 0 11
22981: PUSH
22982: EMPTY
22983: EQUAL
22984: OR
22985: IFFALSE 22930
// if not control in _control then
22987: LD_VAR 0 4
22991: PUSH
22992: LD_VAR 0 12
22996: IN
22997: NOT
22998: IFFALSE 23024
// control := _control [ rand ( 1 , _control ) ] ;
23000: LD_ADDR_VAR 0 4
23004: PUSH
23005: LD_VAR 0 12
23009: PUSH
23010: LD_INT 1
23012: PPUSH
23013: LD_VAR 0 12
23017: PPUSH
23018: CALL_OW 12
23022: ARRAY
23023: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23024: LD_VAR 0 2
23028: PPUSH
23029: LD_VAR 0 5
23033: PPUSH
23034: CALL 23392 0 2
23038: NOT
23039: IFFALSE 23098
// repeat weapon := _weapon [ 1 ] ;
23041: LD_ADDR_VAR 0 5
23045: PUSH
23046: LD_VAR 0 10
23050: PUSH
23051: LD_INT 1
23053: ARRAY
23054: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23055: LD_ADDR_VAR 0 10
23059: PUSH
23060: LD_VAR 0 10
23064: PPUSH
23065: LD_INT 1
23067: PPUSH
23068: CALL_OW 3
23072: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23073: LD_VAR 0 2
23077: PPUSH
23078: LD_VAR 0 5
23082: PPUSH
23083: CALL 23392 0 2
23087: PUSH
23088: LD_VAR 0 10
23092: PUSH
23093: EMPTY
23094: EQUAL
23095: OR
23096: IFFALSE 23041
// result := [ ] ;
23098: LD_ADDR_VAR 0 6
23102: PUSH
23103: EMPTY
23104: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23105: LD_VAR 0 1
23109: PPUSH
23110: LD_VAR 0 2
23114: PPUSH
23115: LD_VAR 0 3
23119: PPUSH
23120: LD_VAR 0 4
23124: PPUSH
23125: LD_VAR 0 5
23129: PPUSH
23130: CALL_OW 448
23134: IFFALSE 23167
// result := [ chassis , engine , control , weapon ] ;
23136: LD_ADDR_VAR 0 6
23140: PUSH
23141: LD_VAR 0 2
23145: PUSH
23146: LD_VAR 0 3
23150: PUSH
23151: LD_VAR 0 4
23155: PUSH
23156: LD_VAR 0 5
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: ST_TO_ADDR
// end ;
23167: LD_VAR 0 6
23171: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23172: LD_INT 0
23174: PPUSH
// if not chassis or not engine then
23175: LD_VAR 0 1
23179: NOT
23180: PUSH
23181: LD_VAR 0 2
23185: NOT
23186: OR
23187: IFFALSE 23191
// exit ;
23189: GO 23387
// case engine of engine_solar :
23191: LD_VAR 0 2
23195: PUSH
23196: LD_INT 2
23198: DOUBLE
23199: EQUAL
23200: IFTRUE 23204
23202: GO 23242
23204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23205: LD_ADDR_VAR 0 3
23209: PUSH
23210: LD_INT 11
23212: PUSH
23213: LD_INT 12
23215: PUSH
23216: LD_INT 13
23218: PUSH
23219: LD_INT 14
23221: PUSH
23222: LD_INT 1
23224: PUSH
23225: LD_INT 2
23227: PUSH
23228: LD_INT 3
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
23240: GO 23371
23242: LD_INT 1
23244: DOUBLE
23245: EQUAL
23246: IFTRUE 23250
23248: GO 23312
23250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23251: LD_ADDR_VAR 0 3
23255: PUSH
23256: LD_INT 11
23258: PUSH
23259: LD_INT 12
23261: PUSH
23262: LD_INT 13
23264: PUSH
23265: LD_INT 14
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: LD_INT 3
23276: PUSH
23277: LD_INT 4
23279: PUSH
23280: LD_INT 5
23282: PUSH
23283: LD_INT 21
23285: PUSH
23286: LD_INT 23
23288: PUSH
23289: LD_INT 22
23291: PUSH
23292: LD_INT 24
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: ST_TO_ADDR
23310: GO 23371
23312: LD_INT 3
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23320
23318: GO 23370
23320: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23321: LD_ADDR_VAR 0 3
23325: PUSH
23326: LD_INT 13
23328: PUSH
23329: LD_INT 14
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: LD_INT 3
23337: PUSH
23338: LD_INT 4
23340: PUSH
23341: LD_INT 5
23343: PUSH
23344: LD_INT 21
23346: PUSH
23347: LD_INT 22
23349: PUSH
23350: LD_INT 23
23352: PUSH
23353: LD_INT 24
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: ST_TO_ADDR
23368: GO 23371
23370: POP
// result := ( chassis in result ) ;
23371: LD_ADDR_VAR 0 3
23375: PUSH
23376: LD_VAR 0 1
23380: PUSH
23381: LD_VAR 0 3
23385: IN
23386: ST_TO_ADDR
// end ;
23387: LD_VAR 0 3
23391: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23392: LD_INT 0
23394: PPUSH
// if not chassis or not weapon then
23395: LD_VAR 0 1
23399: NOT
23400: PUSH
23401: LD_VAR 0 2
23405: NOT
23406: OR
23407: IFFALSE 23411
// exit ;
23409: GO 24471
// case weapon of us_machine_gun :
23411: LD_VAR 0 2
23415: PUSH
23416: LD_INT 2
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23454
23424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23425: LD_ADDR_VAR 0 3
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: LD_INT 2
23435: PUSH
23436: LD_INT 3
23438: PUSH
23439: LD_INT 4
23441: PUSH
23442: LD_INT 5
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: ST_TO_ADDR
23452: GO 24455
23454: LD_INT 3
23456: DOUBLE
23457: EQUAL
23458: IFTRUE 23462
23460: GO 23492
23462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23463: LD_ADDR_VAR 0 3
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: LD_INT 2
23473: PUSH
23474: LD_INT 3
23476: PUSH
23477: LD_INT 4
23479: PUSH
23480: LD_INT 5
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: ST_TO_ADDR
23490: GO 24455
23492: LD_INT 11
23494: DOUBLE
23495: EQUAL
23496: IFTRUE 23500
23498: GO 23530
23500: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23501: LD_ADDR_VAR 0 3
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: LD_INT 2
23511: PUSH
23512: LD_INT 3
23514: PUSH
23515: LD_INT 4
23517: PUSH
23518: LD_INT 5
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: ST_TO_ADDR
23528: GO 24455
23530: LD_INT 4
23532: DOUBLE
23533: EQUAL
23534: IFTRUE 23538
23536: GO 23564
23538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23539: LD_ADDR_VAR 0 3
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: LD_INT 5
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: ST_TO_ADDR
23562: GO 24455
23564: LD_INT 5
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23598
23572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23573: LD_ADDR_VAR 0 3
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: LD_INT 4
23586: PUSH
23587: LD_INT 5
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: ST_TO_ADDR
23596: GO 24455
23598: LD_INT 9
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23632
23606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23607: LD_ADDR_VAR 0 3
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: LD_INT 4
23620: PUSH
23621: LD_INT 5
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: ST_TO_ADDR
23630: GO 24455
23632: LD_INT 7
23634: DOUBLE
23635: EQUAL
23636: IFTRUE 23640
23638: GO 23666
23640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23641: LD_ADDR_VAR 0 3
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: LD_INT 4
23654: PUSH
23655: LD_INT 5
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: ST_TO_ADDR
23664: GO 24455
23666: LD_INT 12
23668: DOUBLE
23669: EQUAL
23670: IFTRUE 23674
23672: GO 23700
23674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23675: LD_ADDR_VAR 0 3
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 3
23685: PUSH
23686: LD_INT 4
23688: PUSH
23689: LD_INT 5
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: ST_TO_ADDR
23698: GO 24455
23700: LD_INT 13
23702: DOUBLE
23703: EQUAL
23704: IFTRUE 23708
23706: GO 23734
23708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23709: LD_ADDR_VAR 0 3
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 3
23719: PUSH
23720: LD_INT 4
23722: PUSH
23723: LD_INT 5
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: ST_TO_ADDR
23732: GO 24455
23734: LD_INT 14
23736: DOUBLE
23737: EQUAL
23738: IFTRUE 23742
23740: GO 23760
23742: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23743: LD_ADDR_VAR 0 3
23747: PUSH
23748: LD_INT 4
23750: PUSH
23751: LD_INT 5
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: ST_TO_ADDR
23758: GO 24455
23760: LD_INT 6
23762: DOUBLE
23763: EQUAL
23764: IFTRUE 23768
23766: GO 23786
23768: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23769: LD_ADDR_VAR 0 3
23773: PUSH
23774: LD_INT 4
23776: PUSH
23777: LD_INT 5
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: ST_TO_ADDR
23784: GO 24455
23786: LD_INT 10
23788: DOUBLE
23789: EQUAL
23790: IFTRUE 23794
23792: GO 23812
23794: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23795: LD_ADDR_VAR 0 3
23799: PUSH
23800: LD_INT 4
23802: PUSH
23803: LD_INT 5
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: ST_TO_ADDR
23810: GO 24455
23812: LD_INT 22
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23846
23820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23821: LD_ADDR_VAR 0 3
23825: PUSH
23826: LD_INT 11
23828: PUSH
23829: LD_INT 12
23831: PUSH
23832: LD_INT 13
23834: PUSH
23835: LD_INT 14
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: ST_TO_ADDR
23844: GO 24455
23846: LD_INT 23
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23880
23854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_INT 11
23862: PUSH
23863: LD_INT 12
23865: PUSH
23866: LD_INT 13
23868: PUSH
23869: LD_INT 14
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: ST_TO_ADDR
23878: GO 24455
23880: LD_INT 24
23882: DOUBLE
23883: EQUAL
23884: IFTRUE 23888
23886: GO 23914
23888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23889: LD_ADDR_VAR 0 3
23893: PUSH
23894: LD_INT 11
23896: PUSH
23897: LD_INT 12
23899: PUSH
23900: LD_INT 13
23902: PUSH
23903: LD_INT 14
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: ST_TO_ADDR
23912: GO 24455
23914: LD_INT 30
23916: DOUBLE
23917: EQUAL
23918: IFTRUE 23922
23920: GO 23948
23922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23923: LD_ADDR_VAR 0 3
23927: PUSH
23928: LD_INT 11
23930: PUSH
23931: LD_INT 12
23933: PUSH
23934: LD_INT 13
23936: PUSH
23937: LD_INT 14
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: ST_TO_ADDR
23946: GO 24455
23948: LD_INT 25
23950: DOUBLE
23951: EQUAL
23952: IFTRUE 23956
23954: GO 23974
23956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23957: LD_ADDR_VAR 0 3
23961: PUSH
23962: LD_INT 13
23964: PUSH
23965: LD_INT 14
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: ST_TO_ADDR
23972: GO 24455
23974: LD_INT 27
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23982
23980: GO 24000
23982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_INT 13
23990: PUSH
23991: LD_INT 14
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: ST_TO_ADDR
23998: GO 24455
24000: LD_INT 92
24002: DOUBLE
24003: EQUAL
24004: IFTRUE 24008
24006: GO 24034
24008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24009: LD_ADDR_VAR 0 3
24013: PUSH
24014: LD_INT 11
24016: PUSH
24017: LD_INT 12
24019: PUSH
24020: LD_INT 13
24022: PUSH
24023: LD_INT 14
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: ST_TO_ADDR
24032: GO 24455
24034: LD_INT 28
24036: DOUBLE
24037: EQUAL
24038: IFTRUE 24042
24040: GO 24060
24042: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24043: LD_ADDR_VAR 0 3
24047: PUSH
24048: LD_INT 13
24050: PUSH
24051: LD_INT 14
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: ST_TO_ADDR
24058: GO 24455
24060: LD_INT 29
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24086
24068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24069: LD_ADDR_VAR 0 3
24073: PUSH
24074: LD_INT 13
24076: PUSH
24077: LD_INT 14
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: ST_TO_ADDR
24084: GO 24455
24086: LD_INT 31
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24112
24094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_INT 13
24102: PUSH
24103: LD_INT 14
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: ST_TO_ADDR
24110: GO 24455
24112: LD_INT 26
24114: DOUBLE
24115: EQUAL
24116: IFTRUE 24120
24118: GO 24138
24120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_INT 13
24128: PUSH
24129: LD_INT 14
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: ST_TO_ADDR
24136: GO 24455
24138: LD_INT 42
24140: DOUBLE
24141: EQUAL
24142: IFTRUE 24146
24144: GO 24172
24146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24147: LD_ADDR_VAR 0 3
24151: PUSH
24152: LD_INT 21
24154: PUSH
24155: LD_INT 22
24157: PUSH
24158: LD_INT 23
24160: PUSH
24161: LD_INT 24
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: ST_TO_ADDR
24170: GO 24455
24172: LD_INT 43
24174: DOUBLE
24175: EQUAL
24176: IFTRUE 24180
24178: GO 24206
24180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24181: LD_ADDR_VAR 0 3
24185: PUSH
24186: LD_INT 21
24188: PUSH
24189: LD_INT 22
24191: PUSH
24192: LD_INT 23
24194: PUSH
24195: LD_INT 24
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: ST_TO_ADDR
24204: GO 24455
24206: LD_INT 44
24208: DOUBLE
24209: EQUAL
24210: IFTRUE 24214
24212: GO 24240
24214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24215: LD_ADDR_VAR 0 3
24219: PUSH
24220: LD_INT 21
24222: PUSH
24223: LD_INT 22
24225: PUSH
24226: LD_INT 23
24228: PUSH
24229: LD_INT 24
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: ST_TO_ADDR
24238: GO 24455
24240: LD_INT 45
24242: DOUBLE
24243: EQUAL
24244: IFTRUE 24248
24246: GO 24274
24248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_INT 21
24256: PUSH
24257: LD_INT 22
24259: PUSH
24260: LD_INT 23
24262: PUSH
24263: LD_INT 24
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: ST_TO_ADDR
24272: GO 24455
24274: LD_INT 49
24276: DOUBLE
24277: EQUAL
24278: IFTRUE 24282
24280: GO 24308
24282: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24283: LD_ADDR_VAR 0 3
24287: PUSH
24288: LD_INT 21
24290: PUSH
24291: LD_INT 22
24293: PUSH
24294: LD_INT 23
24296: PUSH
24297: LD_INT 24
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: ST_TO_ADDR
24306: GO 24455
24308: LD_INT 51
24310: DOUBLE
24311: EQUAL
24312: IFTRUE 24316
24314: GO 24342
24316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24317: LD_ADDR_VAR 0 3
24321: PUSH
24322: LD_INT 21
24324: PUSH
24325: LD_INT 22
24327: PUSH
24328: LD_INT 23
24330: PUSH
24331: LD_INT 24
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: ST_TO_ADDR
24340: GO 24455
24342: LD_INT 52
24344: DOUBLE
24345: EQUAL
24346: IFTRUE 24350
24348: GO 24376
24350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24351: LD_ADDR_VAR 0 3
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 22
24361: PUSH
24362: LD_INT 23
24364: PUSH
24365: LD_INT 24
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: ST_TO_ADDR
24374: GO 24455
24376: LD_INT 53
24378: DOUBLE
24379: EQUAL
24380: IFTRUE 24384
24382: GO 24402
24384: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24385: LD_ADDR_VAR 0 3
24389: PUSH
24390: LD_INT 23
24392: PUSH
24393: LD_INT 24
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: ST_TO_ADDR
24400: GO 24455
24402: LD_INT 46
24404: DOUBLE
24405: EQUAL
24406: IFTRUE 24410
24408: GO 24428
24410: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24411: LD_ADDR_VAR 0 3
24415: PUSH
24416: LD_INT 23
24418: PUSH
24419: LD_INT 24
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: ST_TO_ADDR
24426: GO 24455
24428: LD_INT 47
24430: DOUBLE
24431: EQUAL
24432: IFTRUE 24436
24434: GO 24454
24436: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24437: LD_ADDR_VAR 0 3
24441: PUSH
24442: LD_INT 23
24444: PUSH
24445: LD_INT 24
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: ST_TO_ADDR
24452: GO 24455
24454: POP
// result := ( chassis in result ) ;
24455: LD_ADDR_VAR 0 3
24459: PUSH
24460: LD_VAR 0 1
24464: PUSH
24465: LD_VAR 0 3
24469: IN
24470: ST_TO_ADDR
// end ;
24471: LD_VAR 0 3
24475: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24476: LD_INT 0
24478: PPUSH
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
// result := array ;
24485: LD_ADDR_VAR 0 5
24489: PUSH
24490: LD_VAR 0 1
24494: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24495: LD_VAR 0 1
24499: NOT
24500: PUSH
24501: LD_VAR 0 2
24505: NOT
24506: OR
24507: PUSH
24508: LD_VAR 0 3
24512: NOT
24513: OR
24514: PUSH
24515: LD_VAR 0 2
24519: PUSH
24520: LD_VAR 0 1
24524: GREATER
24525: OR
24526: PUSH
24527: LD_VAR 0 3
24531: PUSH
24532: LD_VAR 0 1
24536: GREATER
24537: OR
24538: IFFALSE 24542
// exit ;
24540: GO 24838
// if direction then
24542: LD_VAR 0 4
24546: IFFALSE 24610
// begin d := 1 ;
24548: LD_ADDR_VAR 0 9
24552: PUSH
24553: LD_INT 1
24555: ST_TO_ADDR
// if i_from > i_to then
24556: LD_VAR 0 2
24560: PUSH
24561: LD_VAR 0 3
24565: GREATER
24566: IFFALSE 24592
// length := ( array - i_from ) + i_to else
24568: LD_ADDR_VAR 0 11
24572: PUSH
24573: LD_VAR 0 1
24577: PUSH
24578: LD_VAR 0 2
24582: MINUS
24583: PUSH
24584: LD_VAR 0 3
24588: PLUS
24589: ST_TO_ADDR
24590: GO 24608
// length := i_to - i_from ;
24592: LD_ADDR_VAR 0 11
24596: PUSH
24597: LD_VAR 0 3
24601: PUSH
24602: LD_VAR 0 2
24606: MINUS
24607: ST_TO_ADDR
// end else
24608: GO 24671
// begin d := - 1 ;
24610: LD_ADDR_VAR 0 9
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: ST_TO_ADDR
// if i_from > i_to then
24619: LD_VAR 0 2
24623: PUSH
24624: LD_VAR 0 3
24628: GREATER
24629: IFFALSE 24649
// length := i_from - i_to else
24631: LD_ADDR_VAR 0 11
24635: PUSH
24636: LD_VAR 0 2
24640: PUSH
24641: LD_VAR 0 3
24645: MINUS
24646: ST_TO_ADDR
24647: GO 24671
// length := ( array - i_to ) + i_from ;
24649: LD_ADDR_VAR 0 11
24653: PUSH
24654: LD_VAR 0 1
24658: PUSH
24659: LD_VAR 0 3
24663: MINUS
24664: PUSH
24665: LD_VAR 0 2
24669: PLUS
24670: ST_TO_ADDR
// end ; if not length then
24671: LD_VAR 0 11
24675: NOT
24676: IFFALSE 24680
// exit ;
24678: GO 24838
// tmp := array ;
24680: LD_ADDR_VAR 0 10
24684: PUSH
24685: LD_VAR 0 1
24689: ST_TO_ADDR
// for i = 1 to length do
24690: LD_ADDR_VAR 0 6
24694: PUSH
24695: DOUBLE
24696: LD_INT 1
24698: DEC
24699: ST_TO_ADDR
24700: LD_VAR 0 11
24704: PUSH
24705: FOR_TO
24706: IFFALSE 24826
// begin for j = 1 to array do
24708: LD_ADDR_VAR 0 7
24712: PUSH
24713: DOUBLE
24714: LD_INT 1
24716: DEC
24717: ST_TO_ADDR
24718: LD_VAR 0 1
24722: PUSH
24723: FOR_TO
24724: IFFALSE 24812
// begin k := j + d ;
24726: LD_ADDR_VAR 0 8
24730: PUSH
24731: LD_VAR 0 7
24735: PUSH
24736: LD_VAR 0 9
24740: PLUS
24741: ST_TO_ADDR
// if k > array then
24742: LD_VAR 0 8
24746: PUSH
24747: LD_VAR 0 1
24751: GREATER
24752: IFFALSE 24762
// k := 1 ;
24754: LD_ADDR_VAR 0 8
24758: PUSH
24759: LD_INT 1
24761: ST_TO_ADDR
// if not k then
24762: LD_VAR 0 8
24766: NOT
24767: IFFALSE 24779
// k := array ;
24769: LD_ADDR_VAR 0 8
24773: PUSH
24774: LD_VAR 0 1
24778: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24779: LD_ADDR_VAR 0 10
24783: PUSH
24784: LD_VAR 0 10
24788: PPUSH
24789: LD_VAR 0 8
24793: PPUSH
24794: LD_VAR 0 1
24798: PUSH
24799: LD_VAR 0 7
24803: ARRAY
24804: PPUSH
24805: CALL_OW 1
24809: ST_TO_ADDR
// end ;
24810: GO 24723
24812: POP
24813: POP
// array := tmp ;
24814: LD_ADDR_VAR 0 1
24818: PUSH
24819: LD_VAR 0 10
24823: ST_TO_ADDR
// end ;
24824: GO 24705
24826: POP
24827: POP
// result := array ;
24828: LD_ADDR_VAR 0 5
24832: PUSH
24833: LD_VAR 0 1
24837: ST_TO_ADDR
// end ;
24838: LD_VAR 0 5
24842: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24843: LD_INT 0
24845: PPUSH
24846: PPUSH
// result := 0 ;
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: LD_INT 0
24854: ST_TO_ADDR
// if not array or not value in array then
24855: LD_VAR 0 1
24859: NOT
24860: PUSH
24861: LD_VAR 0 2
24865: PUSH
24866: LD_VAR 0 1
24870: IN
24871: NOT
24872: OR
24873: IFFALSE 24877
// exit ;
24875: GO 24931
// for i = 1 to array do
24877: LD_ADDR_VAR 0 4
24881: PUSH
24882: DOUBLE
24883: LD_INT 1
24885: DEC
24886: ST_TO_ADDR
24887: LD_VAR 0 1
24891: PUSH
24892: FOR_TO
24893: IFFALSE 24929
// if value = array [ i ] then
24895: LD_VAR 0 2
24899: PUSH
24900: LD_VAR 0 1
24904: PUSH
24905: LD_VAR 0 4
24909: ARRAY
24910: EQUAL
24911: IFFALSE 24927
// begin result := i ;
24913: LD_ADDR_VAR 0 3
24917: PUSH
24918: LD_VAR 0 4
24922: ST_TO_ADDR
// exit ;
24923: POP
24924: POP
24925: GO 24931
// end ;
24927: GO 24892
24929: POP
24930: POP
// end ;
24931: LD_VAR 0 3
24935: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24936: LD_INT 0
24938: PPUSH
// vc_chassis := chassis ;
24939: LD_ADDR_OWVAR 37
24943: PUSH
24944: LD_VAR 0 1
24948: ST_TO_ADDR
// vc_engine := engine ;
24949: LD_ADDR_OWVAR 39
24953: PUSH
24954: LD_VAR 0 2
24958: ST_TO_ADDR
// vc_control := control ;
24959: LD_ADDR_OWVAR 38
24963: PUSH
24964: LD_VAR 0 3
24968: ST_TO_ADDR
// vc_weapon := weapon ;
24969: LD_ADDR_OWVAR 40
24973: PUSH
24974: LD_VAR 0 4
24978: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24979: LD_ADDR_OWVAR 41
24983: PUSH
24984: LD_VAR 0 5
24988: ST_TO_ADDR
// end ;
24989: LD_VAR 0 6
24993: RET
// export function WantPlant ( unit ) ; var task ; begin
24994: LD_INT 0
24996: PPUSH
24997: PPUSH
// result := false ;
24998: LD_ADDR_VAR 0 2
25002: PUSH
25003: LD_INT 0
25005: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25006: LD_ADDR_VAR 0 3
25010: PUSH
25011: LD_VAR 0 1
25015: PPUSH
25016: CALL_OW 437
25020: ST_TO_ADDR
// if task then
25021: LD_VAR 0 3
25025: IFFALSE 25053
// if task [ 1 ] [ 1 ] = p then
25027: LD_VAR 0 3
25031: PUSH
25032: LD_INT 1
25034: ARRAY
25035: PUSH
25036: LD_INT 1
25038: ARRAY
25039: PUSH
25040: LD_STRING p
25042: EQUAL
25043: IFFALSE 25053
// result := true ;
25045: LD_ADDR_VAR 0 2
25049: PUSH
25050: LD_INT 1
25052: ST_TO_ADDR
// end ;
25053: LD_VAR 0 2
25057: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25058: LD_INT 0
25060: PPUSH
25061: PPUSH
25062: PPUSH
25063: PPUSH
// if pos < 1 then
25064: LD_VAR 0 2
25068: PUSH
25069: LD_INT 1
25071: LESS
25072: IFFALSE 25076
// exit ;
25074: GO 25379
// if pos = 1 then
25076: LD_VAR 0 2
25080: PUSH
25081: LD_INT 1
25083: EQUAL
25084: IFFALSE 25117
// result := Replace ( arr , pos [ 1 ] , value ) else
25086: LD_ADDR_VAR 0 4
25090: PUSH
25091: LD_VAR 0 1
25095: PPUSH
25096: LD_VAR 0 2
25100: PUSH
25101: LD_INT 1
25103: ARRAY
25104: PPUSH
25105: LD_VAR 0 3
25109: PPUSH
25110: CALL_OW 1
25114: ST_TO_ADDR
25115: GO 25379
// begin tmp := arr ;
25117: LD_ADDR_VAR 0 6
25121: PUSH
25122: LD_VAR 0 1
25126: ST_TO_ADDR
// s_arr := [ tmp ] ;
25127: LD_ADDR_VAR 0 7
25131: PUSH
25132: LD_VAR 0 6
25136: PUSH
25137: EMPTY
25138: LIST
25139: ST_TO_ADDR
// for i = 1 to pos - 1 do
25140: LD_ADDR_VAR 0 5
25144: PUSH
25145: DOUBLE
25146: LD_INT 1
25148: DEC
25149: ST_TO_ADDR
25150: LD_VAR 0 2
25154: PUSH
25155: LD_INT 1
25157: MINUS
25158: PUSH
25159: FOR_TO
25160: IFFALSE 25205
// begin tmp := tmp [ pos [ i ] ] ;
25162: LD_ADDR_VAR 0 6
25166: PUSH
25167: LD_VAR 0 6
25171: PUSH
25172: LD_VAR 0 2
25176: PUSH
25177: LD_VAR 0 5
25181: ARRAY
25182: ARRAY
25183: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25184: LD_ADDR_VAR 0 7
25188: PUSH
25189: LD_VAR 0 7
25193: PUSH
25194: LD_VAR 0 6
25198: PUSH
25199: EMPTY
25200: LIST
25201: ADD
25202: ST_TO_ADDR
// end ;
25203: GO 25159
25205: POP
25206: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25207: LD_ADDR_VAR 0 6
25211: PUSH
25212: LD_VAR 0 6
25216: PPUSH
25217: LD_VAR 0 2
25221: PUSH
25222: LD_VAR 0 2
25226: ARRAY
25227: PPUSH
25228: LD_VAR 0 3
25232: PPUSH
25233: CALL_OW 1
25237: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25238: LD_ADDR_VAR 0 7
25242: PUSH
25243: LD_VAR 0 7
25247: PPUSH
25248: LD_VAR 0 7
25252: PPUSH
25253: LD_VAR 0 6
25257: PPUSH
25258: CALL_OW 1
25262: ST_TO_ADDR
// for i = s_arr downto 2 do
25263: LD_ADDR_VAR 0 5
25267: PUSH
25268: DOUBLE
25269: LD_VAR 0 7
25273: INC
25274: ST_TO_ADDR
25275: LD_INT 2
25277: PUSH
25278: FOR_DOWNTO
25279: IFFALSE 25363
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25281: LD_ADDR_VAR 0 6
25285: PUSH
25286: LD_VAR 0 7
25290: PUSH
25291: LD_VAR 0 5
25295: PUSH
25296: LD_INT 1
25298: MINUS
25299: ARRAY
25300: PPUSH
25301: LD_VAR 0 2
25305: PUSH
25306: LD_VAR 0 5
25310: PUSH
25311: LD_INT 1
25313: MINUS
25314: ARRAY
25315: PPUSH
25316: LD_VAR 0 7
25320: PUSH
25321: LD_VAR 0 5
25325: ARRAY
25326: PPUSH
25327: CALL_OW 1
25331: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25332: LD_ADDR_VAR 0 7
25336: PUSH
25337: LD_VAR 0 7
25341: PPUSH
25342: LD_VAR 0 5
25346: PUSH
25347: LD_INT 1
25349: MINUS
25350: PPUSH
25351: LD_VAR 0 6
25355: PPUSH
25356: CALL_OW 1
25360: ST_TO_ADDR
// end ;
25361: GO 25278
25363: POP
25364: POP
// result := s_arr [ 1 ] ;
25365: LD_ADDR_VAR 0 4
25369: PUSH
25370: LD_VAR 0 7
25374: PUSH
25375: LD_INT 1
25377: ARRAY
25378: ST_TO_ADDR
// end ; end ;
25379: LD_VAR 0 4
25383: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25384: LD_INT 0
25386: PPUSH
25387: PPUSH
// if not list then
25388: LD_VAR 0 1
25392: NOT
25393: IFFALSE 25397
// exit ;
25395: GO 25488
// i := list [ pos1 ] ;
25397: LD_ADDR_VAR 0 5
25401: PUSH
25402: LD_VAR 0 1
25406: PUSH
25407: LD_VAR 0 2
25411: ARRAY
25412: ST_TO_ADDR
// if not i then
25413: LD_VAR 0 5
25417: NOT
25418: IFFALSE 25422
// exit ;
25420: GO 25488
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25422: LD_ADDR_VAR 0 1
25426: PUSH
25427: LD_VAR 0 1
25431: PPUSH
25432: LD_VAR 0 2
25436: PPUSH
25437: LD_VAR 0 1
25441: PUSH
25442: LD_VAR 0 3
25446: ARRAY
25447: PPUSH
25448: CALL_OW 1
25452: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25453: LD_ADDR_VAR 0 1
25457: PUSH
25458: LD_VAR 0 1
25462: PPUSH
25463: LD_VAR 0 3
25467: PPUSH
25468: LD_VAR 0 5
25472: PPUSH
25473: CALL_OW 1
25477: ST_TO_ADDR
// result := list ;
25478: LD_ADDR_VAR 0 4
25482: PUSH
25483: LD_VAR 0 1
25487: ST_TO_ADDR
// end ;
25488: LD_VAR 0 4
25492: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25493: LD_INT 0
25495: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25496: LD_ADDR_VAR 0 5
25500: PUSH
25501: LD_VAR 0 1
25505: PPUSH
25506: CALL_OW 250
25510: PPUSH
25511: LD_VAR 0 1
25515: PPUSH
25516: CALL_OW 251
25520: PPUSH
25521: LD_VAR 0 2
25525: PPUSH
25526: LD_VAR 0 3
25530: PPUSH
25531: LD_VAR 0 4
25535: PPUSH
25536: CALL 25546 0 5
25540: ST_TO_ADDR
// end ;
25541: LD_VAR 0 5
25545: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25546: LD_INT 0
25548: PPUSH
25549: PPUSH
25550: PPUSH
25551: PPUSH
// if not list then
25552: LD_VAR 0 3
25556: NOT
25557: IFFALSE 25561
// exit ;
25559: GO 25949
// result := [ ] ;
25561: LD_ADDR_VAR 0 6
25565: PUSH
25566: EMPTY
25567: ST_TO_ADDR
// for i in list do
25568: LD_ADDR_VAR 0 7
25572: PUSH
25573: LD_VAR 0 3
25577: PUSH
25578: FOR_IN
25579: IFFALSE 25781
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25581: LD_ADDR_VAR 0 9
25585: PUSH
25586: LD_VAR 0 7
25590: PPUSH
25591: LD_VAR 0 1
25595: PPUSH
25596: LD_VAR 0 2
25600: PPUSH
25601: CALL_OW 297
25605: ST_TO_ADDR
// if not result then
25606: LD_VAR 0 6
25610: NOT
25611: IFFALSE 25637
// result := [ [ i , tmp ] ] else
25613: LD_ADDR_VAR 0 6
25617: PUSH
25618: LD_VAR 0 7
25622: PUSH
25623: LD_VAR 0 9
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: ST_TO_ADDR
25635: GO 25779
// begin if result [ result ] [ 2 ] < tmp then
25637: LD_VAR 0 6
25641: PUSH
25642: LD_VAR 0 6
25646: ARRAY
25647: PUSH
25648: LD_INT 2
25650: ARRAY
25651: PUSH
25652: LD_VAR 0 9
25656: LESS
25657: IFFALSE 25699
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25659: LD_ADDR_VAR 0 6
25663: PUSH
25664: LD_VAR 0 6
25668: PPUSH
25669: LD_VAR 0 6
25673: PUSH
25674: LD_INT 1
25676: PLUS
25677: PPUSH
25678: LD_VAR 0 7
25682: PUSH
25683: LD_VAR 0 9
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PPUSH
25692: CALL_OW 2
25696: ST_TO_ADDR
25697: GO 25779
// for j = 1 to result do
25699: LD_ADDR_VAR 0 8
25703: PUSH
25704: DOUBLE
25705: LD_INT 1
25707: DEC
25708: ST_TO_ADDR
25709: LD_VAR 0 6
25713: PUSH
25714: FOR_TO
25715: IFFALSE 25777
// begin if tmp < result [ j ] [ 2 ] then
25717: LD_VAR 0 9
25721: PUSH
25722: LD_VAR 0 6
25726: PUSH
25727: LD_VAR 0 8
25731: ARRAY
25732: PUSH
25733: LD_INT 2
25735: ARRAY
25736: LESS
25737: IFFALSE 25775
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25739: LD_ADDR_VAR 0 6
25743: PUSH
25744: LD_VAR 0 6
25748: PPUSH
25749: LD_VAR 0 8
25753: PPUSH
25754: LD_VAR 0 7
25758: PUSH
25759: LD_VAR 0 9
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PPUSH
25768: CALL_OW 2
25772: ST_TO_ADDR
// break ;
25773: GO 25777
// end ; end ;
25775: GO 25714
25777: POP
25778: POP
// end ; end ;
25779: GO 25578
25781: POP
25782: POP
// if result and not asc then
25783: LD_VAR 0 6
25787: PUSH
25788: LD_VAR 0 4
25792: NOT
25793: AND
25794: IFFALSE 25869
// begin tmp := result ;
25796: LD_ADDR_VAR 0 9
25800: PUSH
25801: LD_VAR 0 6
25805: ST_TO_ADDR
// for i = tmp downto 1 do
25806: LD_ADDR_VAR 0 7
25810: PUSH
25811: DOUBLE
25812: LD_VAR 0 9
25816: INC
25817: ST_TO_ADDR
25818: LD_INT 1
25820: PUSH
25821: FOR_DOWNTO
25822: IFFALSE 25867
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25824: LD_ADDR_VAR 0 6
25828: PUSH
25829: LD_VAR 0 6
25833: PPUSH
25834: LD_VAR 0 9
25838: PUSH
25839: LD_VAR 0 7
25843: MINUS
25844: PUSH
25845: LD_INT 1
25847: PLUS
25848: PPUSH
25849: LD_VAR 0 9
25853: PUSH
25854: LD_VAR 0 7
25858: ARRAY
25859: PPUSH
25860: CALL_OW 1
25864: ST_TO_ADDR
25865: GO 25821
25867: POP
25868: POP
// end ; tmp := [ ] ;
25869: LD_ADDR_VAR 0 9
25873: PUSH
25874: EMPTY
25875: ST_TO_ADDR
// if mode then
25876: LD_VAR 0 5
25880: IFFALSE 25949
// begin for i = 1 to result do
25882: LD_ADDR_VAR 0 7
25886: PUSH
25887: DOUBLE
25888: LD_INT 1
25890: DEC
25891: ST_TO_ADDR
25892: LD_VAR 0 6
25896: PUSH
25897: FOR_TO
25898: IFFALSE 25937
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25900: LD_ADDR_VAR 0 9
25904: PUSH
25905: LD_VAR 0 9
25909: PPUSH
25910: LD_VAR 0 7
25914: PPUSH
25915: LD_VAR 0 6
25919: PUSH
25920: LD_VAR 0 7
25924: ARRAY
25925: PUSH
25926: LD_INT 1
25928: ARRAY
25929: PPUSH
25930: CALL_OW 1
25934: ST_TO_ADDR
25935: GO 25897
25937: POP
25938: POP
// result := tmp ;
25939: LD_ADDR_VAR 0 6
25943: PUSH
25944: LD_VAR 0 9
25948: ST_TO_ADDR
// end ; end ;
25949: LD_VAR 0 6
25953: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25954: LD_INT 0
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25962: LD_ADDR_VAR 0 5
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: EMPTY
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: ST_TO_ADDR
// if not x or not y then
25984: LD_VAR 0 2
25988: NOT
25989: PUSH
25990: LD_VAR 0 3
25994: NOT
25995: OR
25996: IFFALSE 26000
// exit ;
25998: GO 27650
// if not range then
26000: LD_VAR 0 4
26004: NOT
26005: IFFALSE 26015
// range := 10 ;
26007: LD_ADDR_VAR 0 4
26011: PUSH
26012: LD_INT 10
26014: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26015: LD_ADDR_VAR 0 8
26019: PUSH
26020: LD_INT 81
26022: PUSH
26023: LD_VAR 0 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 92
26034: PUSH
26035: LD_VAR 0 2
26039: PUSH
26040: LD_VAR 0 3
26044: PUSH
26045: LD_VAR 0 4
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 3
26058: PUSH
26059: LD_INT 21
26061: PUSH
26062: LD_INT 3
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: PPUSH
26078: CALL_OW 69
26082: ST_TO_ADDR
// if not tmp then
26083: LD_VAR 0 8
26087: NOT
26088: IFFALSE 26092
// exit ;
26090: GO 27650
// for i in tmp do
26092: LD_ADDR_VAR 0 6
26096: PUSH
26097: LD_VAR 0 8
26101: PUSH
26102: FOR_IN
26103: IFFALSE 27625
// begin points := [ 0 , 0 , 0 ] ;
26105: LD_ADDR_VAR 0 9
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: ST_TO_ADDR
// bpoints := 1 ;
26124: LD_ADDR_VAR 0 10
26128: PUSH
26129: LD_INT 1
26131: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26132: LD_VAR 0 6
26136: PPUSH
26137: CALL_OW 247
26141: PUSH
26142: LD_INT 1
26144: DOUBLE
26145: EQUAL
26146: IFTRUE 26150
26148: GO 26728
26150: POP
// begin if GetClass ( i ) = 1 then
26151: LD_VAR 0 6
26155: PPUSH
26156: CALL_OW 257
26160: PUSH
26161: LD_INT 1
26163: EQUAL
26164: IFFALSE 26185
// points := [ 10 , 5 , 3 ] ;
26166: LD_ADDR_VAR 0 9
26170: PUSH
26171: LD_INT 10
26173: PUSH
26174: LD_INT 5
26176: PUSH
26177: LD_INT 3
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: LIST
26184: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26185: LD_VAR 0 6
26189: PPUSH
26190: CALL_OW 257
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 3
26200: PUSH
26201: LD_INT 4
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: LIST
26208: IN
26209: IFFALSE 26230
// points := [ 3 , 2 , 1 ] ;
26211: LD_ADDR_VAR 0 9
26215: PUSH
26216: LD_INT 3
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26230: LD_VAR 0 6
26234: PPUSH
26235: CALL_OW 257
26239: PUSH
26240: LD_INT 5
26242: EQUAL
26243: IFFALSE 26264
// points := [ 130 , 5 , 2 ] ;
26245: LD_ADDR_VAR 0 9
26249: PUSH
26250: LD_INT 130
26252: PUSH
26253: LD_INT 5
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26264: LD_VAR 0 6
26268: PPUSH
26269: CALL_OW 257
26273: PUSH
26274: LD_INT 8
26276: EQUAL
26277: IFFALSE 26298
// points := [ 35 , 35 , 30 ] ;
26279: LD_ADDR_VAR 0 9
26283: PUSH
26284: LD_INT 35
26286: PUSH
26287: LD_INT 35
26289: PUSH
26290: LD_INT 30
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26298: LD_VAR 0 6
26302: PPUSH
26303: CALL_OW 257
26307: PUSH
26308: LD_INT 9
26310: EQUAL
26311: IFFALSE 26332
// points := [ 20 , 55 , 40 ] ;
26313: LD_ADDR_VAR 0 9
26317: PUSH
26318: LD_INT 20
26320: PUSH
26321: LD_INT 55
26323: PUSH
26324: LD_INT 40
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: LIST
26331: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26332: LD_VAR 0 6
26336: PPUSH
26337: CALL_OW 257
26341: PUSH
26342: LD_INT 12
26344: PUSH
26345: LD_INT 16
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: IN
26352: IFFALSE 26373
// points := [ 5 , 3 , 2 ] ;
26354: LD_ADDR_VAR 0 9
26358: PUSH
26359: LD_INT 5
26361: PUSH
26362: LD_INT 3
26364: PUSH
26365: LD_INT 2
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26373: LD_VAR 0 6
26377: PPUSH
26378: CALL_OW 257
26382: PUSH
26383: LD_INT 17
26385: EQUAL
26386: IFFALSE 26407
// points := [ 100 , 50 , 75 ] ;
26388: LD_ADDR_VAR 0 9
26392: PUSH
26393: LD_INT 100
26395: PUSH
26396: LD_INT 50
26398: PUSH
26399: LD_INT 75
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: LIST
26406: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26407: LD_VAR 0 6
26411: PPUSH
26412: CALL_OW 257
26416: PUSH
26417: LD_INT 15
26419: EQUAL
26420: IFFALSE 26441
// points := [ 10 , 5 , 3 ] ;
26422: LD_ADDR_VAR 0 9
26426: PUSH
26427: LD_INT 10
26429: PUSH
26430: LD_INT 5
26432: PUSH
26433: LD_INT 3
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26441: LD_VAR 0 6
26445: PPUSH
26446: CALL_OW 257
26450: PUSH
26451: LD_INT 14
26453: EQUAL
26454: IFFALSE 26475
// points := [ 10 , 0 , 0 ] ;
26456: LD_ADDR_VAR 0 9
26460: PUSH
26461: LD_INT 10
26463: PUSH
26464: LD_INT 0
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: LIST
26474: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26475: LD_VAR 0 6
26479: PPUSH
26480: CALL_OW 257
26484: PUSH
26485: LD_INT 11
26487: EQUAL
26488: IFFALSE 26509
// points := [ 30 , 10 , 5 ] ;
26490: LD_ADDR_VAR 0 9
26494: PUSH
26495: LD_INT 30
26497: PUSH
26498: LD_INT 10
26500: PUSH
26501: LD_INT 5
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: LIST
26508: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26509: LD_VAR 0 1
26513: PPUSH
26514: LD_INT 5
26516: PPUSH
26517: CALL_OW 321
26521: PUSH
26522: LD_INT 2
26524: EQUAL
26525: IFFALSE 26542
// bpoints := bpoints * 1.8 ;
26527: LD_ADDR_VAR 0 10
26531: PUSH
26532: LD_VAR 0 10
26536: PUSH
26537: LD_REAL  1.80000000000000E+0000
26540: MUL
26541: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26542: LD_VAR 0 6
26546: PPUSH
26547: CALL_OW 257
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: LD_INT 3
26560: PUSH
26561: LD_INT 4
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: IN
26570: PUSH
26571: LD_VAR 0 1
26575: PPUSH
26576: LD_INT 51
26578: PPUSH
26579: CALL_OW 321
26583: PUSH
26584: LD_INT 2
26586: EQUAL
26587: AND
26588: IFFALSE 26605
// bpoints := bpoints * 1.2 ;
26590: LD_ADDR_VAR 0 10
26594: PUSH
26595: LD_VAR 0 10
26599: PUSH
26600: LD_REAL  1.20000000000000E+0000
26603: MUL
26604: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26605: LD_VAR 0 6
26609: PPUSH
26610: CALL_OW 257
26614: PUSH
26615: LD_INT 5
26617: PUSH
26618: LD_INT 7
26620: PUSH
26621: LD_INT 9
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: LIST
26628: IN
26629: PUSH
26630: LD_VAR 0 1
26634: PPUSH
26635: LD_INT 52
26637: PPUSH
26638: CALL_OW 321
26642: PUSH
26643: LD_INT 2
26645: EQUAL
26646: AND
26647: IFFALSE 26664
// bpoints := bpoints * 1.5 ;
26649: LD_ADDR_VAR 0 10
26653: PUSH
26654: LD_VAR 0 10
26658: PUSH
26659: LD_REAL  1.50000000000000E+0000
26662: MUL
26663: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26664: LD_VAR 0 1
26668: PPUSH
26669: LD_INT 66
26671: PPUSH
26672: CALL_OW 321
26676: PUSH
26677: LD_INT 2
26679: EQUAL
26680: IFFALSE 26697
// bpoints := bpoints * 1.1 ;
26682: LD_ADDR_VAR 0 10
26686: PUSH
26687: LD_VAR 0 10
26691: PUSH
26692: LD_REAL  1.10000000000000E+0000
26695: MUL
26696: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26697: LD_ADDR_VAR 0 10
26701: PUSH
26702: LD_VAR 0 10
26706: PUSH
26707: LD_VAR 0 6
26711: PPUSH
26712: LD_INT 1
26714: PPUSH
26715: CALL_OW 259
26719: PUSH
26720: LD_REAL  1.15000000000000E+0000
26723: MUL
26724: MUL
26725: ST_TO_ADDR
// end ; unit_vehicle :
26726: GO 27554
26728: LD_INT 2
26730: DOUBLE
26731: EQUAL
26732: IFTRUE 26736
26734: GO 27542
26736: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26737: LD_VAR 0 6
26741: PPUSH
26742: CALL_OW 264
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: LD_INT 42
26752: PUSH
26753: LD_INT 24
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: LIST
26760: IN
26761: IFFALSE 26782
// points := [ 25 , 5 , 3 ] ;
26763: LD_ADDR_VAR 0 9
26767: PUSH
26768: LD_INT 25
26770: PUSH
26771: LD_INT 5
26773: PUSH
26774: LD_INT 3
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: LIST
26781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26782: LD_VAR 0 6
26786: PPUSH
26787: CALL_OW 264
26791: PUSH
26792: LD_INT 4
26794: PUSH
26795: LD_INT 43
26797: PUSH
26798: LD_INT 25
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: LIST
26805: IN
26806: IFFALSE 26827
// points := [ 40 , 15 , 5 ] ;
26808: LD_ADDR_VAR 0 9
26812: PUSH
26813: LD_INT 40
26815: PUSH
26816: LD_INT 15
26818: PUSH
26819: LD_INT 5
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26827: LD_VAR 0 6
26831: PPUSH
26832: CALL_OW 264
26836: PUSH
26837: LD_INT 3
26839: PUSH
26840: LD_INT 23
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: IN
26847: IFFALSE 26868
// points := [ 7 , 25 , 8 ] ;
26849: LD_ADDR_VAR 0 9
26853: PUSH
26854: LD_INT 7
26856: PUSH
26857: LD_INT 25
26859: PUSH
26860: LD_INT 8
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26868: LD_VAR 0 6
26872: PPUSH
26873: CALL_OW 264
26877: PUSH
26878: LD_INT 5
26880: PUSH
26881: LD_INT 27
26883: PUSH
26884: LD_INT 44
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: IN
26892: IFFALSE 26913
// points := [ 14 , 50 , 16 ] ;
26894: LD_ADDR_VAR 0 9
26898: PUSH
26899: LD_INT 14
26901: PUSH
26902: LD_INT 50
26904: PUSH
26905: LD_INT 16
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26913: LD_VAR 0 6
26917: PPUSH
26918: CALL_OW 264
26922: PUSH
26923: LD_INT 6
26925: PUSH
26926: LD_INT 46
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: IN
26933: IFFALSE 26954
// points := [ 32 , 120 , 70 ] ;
26935: LD_ADDR_VAR 0 9
26939: PUSH
26940: LD_INT 32
26942: PUSH
26943: LD_INT 120
26945: PUSH
26946: LD_INT 70
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26954: LD_VAR 0 6
26958: PPUSH
26959: CALL_OW 264
26963: PUSH
26964: LD_INT 7
26966: PUSH
26967: LD_INT 28
26969: PUSH
26970: LD_INT 45
26972: PUSH
26973: LD_INT 92
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: IN
26982: IFFALSE 27003
// points := [ 35 , 20 , 45 ] ;
26984: LD_ADDR_VAR 0 9
26988: PUSH
26989: LD_INT 35
26991: PUSH
26992: LD_INT 20
26994: PUSH
26995: LD_INT 45
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27003: LD_VAR 0 6
27007: PPUSH
27008: CALL_OW 264
27012: PUSH
27013: LD_INT 47
27015: PUSH
27016: EMPTY
27017: LIST
27018: IN
27019: IFFALSE 27040
// points := [ 67 , 45 , 75 ] ;
27021: LD_ADDR_VAR 0 9
27025: PUSH
27026: LD_INT 67
27028: PUSH
27029: LD_INT 45
27031: PUSH
27032: LD_INT 75
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27040: LD_VAR 0 6
27044: PPUSH
27045: CALL_OW 264
27049: PUSH
27050: LD_INT 26
27052: PUSH
27053: EMPTY
27054: LIST
27055: IN
27056: IFFALSE 27077
// points := [ 120 , 30 , 80 ] ;
27058: LD_ADDR_VAR 0 9
27062: PUSH
27063: LD_INT 120
27065: PUSH
27066: LD_INT 30
27068: PUSH
27069: LD_INT 80
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: LIST
27076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27077: LD_VAR 0 6
27081: PPUSH
27082: CALL_OW 264
27086: PUSH
27087: LD_INT 22
27089: PUSH
27090: EMPTY
27091: LIST
27092: IN
27093: IFFALSE 27114
// points := [ 40 , 1 , 1 ] ;
27095: LD_ADDR_VAR 0 9
27099: PUSH
27100: LD_INT 40
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: LIST
27113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27114: LD_VAR 0 6
27118: PPUSH
27119: CALL_OW 264
27123: PUSH
27124: LD_INT 29
27126: PUSH
27127: EMPTY
27128: LIST
27129: IN
27130: IFFALSE 27151
// points := [ 70 , 200 , 400 ] ;
27132: LD_ADDR_VAR 0 9
27136: PUSH
27137: LD_INT 70
27139: PUSH
27140: LD_INT 200
27142: PUSH
27143: LD_INT 400
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27151: LD_VAR 0 6
27155: PPUSH
27156: CALL_OW 264
27160: PUSH
27161: LD_INT 14
27163: PUSH
27164: LD_INT 53
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: IN
27171: IFFALSE 27192
// points := [ 40 , 10 , 20 ] ;
27173: LD_ADDR_VAR 0 9
27177: PUSH
27178: LD_INT 40
27180: PUSH
27181: LD_INT 10
27183: PUSH
27184: LD_INT 20
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: LIST
27191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27192: LD_VAR 0 6
27196: PPUSH
27197: CALL_OW 264
27201: PUSH
27202: LD_INT 9
27204: PUSH
27205: EMPTY
27206: LIST
27207: IN
27208: IFFALSE 27229
// points := [ 5 , 70 , 20 ] ;
27210: LD_ADDR_VAR 0 9
27214: PUSH
27215: LD_INT 5
27217: PUSH
27218: LD_INT 70
27220: PUSH
27221: LD_INT 20
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: LIST
27228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27229: LD_VAR 0 6
27233: PPUSH
27234: CALL_OW 264
27238: PUSH
27239: LD_INT 10
27241: PUSH
27242: EMPTY
27243: LIST
27244: IN
27245: IFFALSE 27266
// points := [ 35 , 110 , 70 ] ;
27247: LD_ADDR_VAR 0 9
27251: PUSH
27252: LD_INT 35
27254: PUSH
27255: LD_INT 110
27257: PUSH
27258: LD_INT 70
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: LIST
27265: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27266: LD_VAR 0 6
27270: PPUSH
27271: CALL_OW 265
27275: PUSH
27276: LD_INT 25
27278: EQUAL
27279: IFFALSE 27300
// points := [ 80 , 65 , 100 ] ;
27281: LD_ADDR_VAR 0 9
27285: PUSH
27286: LD_INT 80
27288: PUSH
27289: LD_INT 65
27291: PUSH
27292: LD_INT 100
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27300: LD_VAR 0 6
27304: PPUSH
27305: CALL_OW 263
27309: PUSH
27310: LD_INT 1
27312: EQUAL
27313: IFFALSE 27348
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27315: LD_ADDR_VAR 0 10
27319: PUSH
27320: LD_VAR 0 10
27324: PUSH
27325: LD_VAR 0 6
27329: PPUSH
27330: CALL_OW 311
27334: PPUSH
27335: LD_INT 3
27337: PPUSH
27338: CALL_OW 259
27342: PUSH
27343: LD_INT 4
27345: MUL
27346: MUL
27347: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27348: LD_VAR 0 6
27352: PPUSH
27353: CALL_OW 263
27357: PUSH
27358: LD_INT 2
27360: EQUAL
27361: IFFALSE 27412
// begin j := IsControledBy ( i ) ;
27363: LD_ADDR_VAR 0 7
27367: PUSH
27368: LD_VAR 0 6
27372: PPUSH
27373: CALL_OW 312
27377: ST_TO_ADDR
// if j then
27378: LD_VAR 0 7
27382: IFFALSE 27412
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27384: LD_ADDR_VAR 0 10
27388: PUSH
27389: LD_VAR 0 10
27393: PUSH
27394: LD_VAR 0 7
27398: PPUSH
27399: LD_INT 3
27401: PPUSH
27402: CALL_OW 259
27406: PUSH
27407: LD_INT 3
27409: MUL
27410: MUL
27411: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27412: LD_VAR 0 6
27416: PPUSH
27417: CALL_OW 264
27421: PUSH
27422: LD_INT 5
27424: PUSH
27425: LD_INT 6
27427: PUSH
27428: LD_INT 46
27430: PUSH
27431: LD_INT 44
27433: PUSH
27434: LD_INT 47
27436: PUSH
27437: LD_INT 45
27439: PUSH
27440: LD_INT 28
27442: PUSH
27443: LD_INT 7
27445: PUSH
27446: LD_INT 27
27448: PUSH
27449: LD_INT 29
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: IN
27464: PUSH
27465: LD_VAR 0 1
27469: PPUSH
27470: LD_INT 52
27472: PPUSH
27473: CALL_OW 321
27477: PUSH
27478: LD_INT 2
27480: EQUAL
27481: AND
27482: IFFALSE 27499
// bpoints := bpoints * 1.2 ;
27484: LD_ADDR_VAR 0 10
27488: PUSH
27489: LD_VAR 0 10
27493: PUSH
27494: LD_REAL  1.20000000000000E+0000
27497: MUL
27498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27499: LD_VAR 0 6
27503: PPUSH
27504: CALL_OW 264
27508: PUSH
27509: LD_INT 6
27511: PUSH
27512: LD_INT 46
27514: PUSH
27515: LD_INT 47
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: LIST
27522: IN
27523: IFFALSE 27540
// bpoints := bpoints * 1.2 ;
27525: LD_ADDR_VAR 0 10
27529: PUSH
27530: LD_VAR 0 10
27534: PUSH
27535: LD_REAL  1.20000000000000E+0000
27538: MUL
27539: ST_TO_ADDR
// end ; unit_building :
27540: GO 27554
27542: LD_INT 3
27544: DOUBLE
27545: EQUAL
27546: IFTRUE 27550
27548: GO 27553
27550: POP
// ; end ;
27551: GO 27554
27553: POP
// for j = 1 to 3 do
27554: LD_ADDR_VAR 0 7
27558: PUSH
27559: DOUBLE
27560: LD_INT 1
27562: DEC
27563: ST_TO_ADDR
27564: LD_INT 3
27566: PUSH
27567: FOR_TO
27568: IFFALSE 27621
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27570: LD_ADDR_VAR 0 5
27574: PUSH
27575: LD_VAR 0 5
27579: PPUSH
27580: LD_VAR 0 7
27584: PPUSH
27585: LD_VAR 0 5
27589: PUSH
27590: LD_VAR 0 7
27594: ARRAY
27595: PUSH
27596: LD_VAR 0 9
27600: PUSH
27601: LD_VAR 0 7
27605: ARRAY
27606: PUSH
27607: LD_VAR 0 10
27611: MUL
27612: PLUS
27613: PPUSH
27614: CALL_OW 1
27618: ST_TO_ADDR
27619: GO 27567
27621: POP
27622: POP
// end ;
27623: GO 26102
27625: POP
27626: POP
// result := Replace ( result , 4 , tmp ) ;
27627: LD_ADDR_VAR 0 5
27631: PUSH
27632: LD_VAR 0 5
27636: PPUSH
27637: LD_INT 4
27639: PPUSH
27640: LD_VAR 0 8
27644: PPUSH
27645: CALL_OW 1
27649: ST_TO_ADDR
// end ;
27650: LD_VAR 0 5
27654: RET
// export function DangerAtRange ( unit , range ) ; begin
27655: LD_INT 0
27657: PPUSH
// if not unit then
27658: LD_VAR 0 1
27662: NOT
27663: IFFALSE 27667
// exit ;
27665: GO 27712
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27667: LD_ADDR_VAR 0 3
27671: PUSH
27672: LD_VAR 0 1
27676: PPUSH
27677: CALL_OW 255
27681: PPUSH
27682: LD_VAR 0 1
27686: PPUSH
27687: CALL_OW 250
27691: PPUSH
27692: LD_VAR 0 1
27696: PPUSH
27697: CALL_OW 251
27701: PPUSH
27702: LD_VAR 0 2
27706: PPUSH
27707: CALL 25954 0 4
27711: ST_TO_ADDR
// end ;
27712: LD_VAR 0 3
27716: RET
// export function DangerInArea ( side , area ) ; begin
27717: LD_INT 0
27719: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27720: LD_ADDR_VAR 0 3
27724: PUSH
27725: LD_VAR 0 2
27729: PPUSH
27730: LD_INT 81
27732: PUSH
27733: LD_VAR 0 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PPUSH
27742: CALL_OW 70
27746: ST_TO_ADDR
// end ;
27747: LD_VAR 0 3
27751: RET
// export function IsExtension ( b ) ; begin
27752: LD_INT 0
27754: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27755: LD_ADDR_VAR 0 2
27759: PUSH
27760: LD_VAR 0 1
27764: PUSH
27765: LD_INT 23
27767: PUSH
27768: LD_INT 20
27770: PUSH
27771: LD_INT 22
27773: PUSH
27774: LD_INT 17
27776: PUSH
27777: LD_INT 24
27779: PUSH
27780: LD_INT 21
27782: PUSH
27783: LD_INT 19
27785: PUSH
27786: LD_INT 16
27788: PUSH
27789: LD_INT 25
27791: PUSH
27792: LD_INT 18
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: IN
27807: ST_TO_ADDR
// end ;
27808: LD_VAR 0 2
27812: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27813: LD_INT 0
27815: PPUSH
27816: PPUSH
27817: PPUSH
// result := [ ] ;
27818: LD_ADDR_VAR 0 4
27822: PUSH
27823: EMPTY
27824: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27825: LD_ADDR_VAR 0 5
27829: PUSH
27830: LD_VAR 0 2
27834: PPUSH
27835: LD_INT 21
27837: PUSH
27838: LD_INT 3
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PPUSH
27845: CALL_OW 70
27849: ST_TO_ADDR
// if not tmp then
27850: LD_VAR 0 5
27854: NOT
27855: IFFALSE 27859
// exit ;
27857: GO 27923
// if checkLink then
27859: LD_VAR 0 3
27863: IFFALSE 27913
// begin for i in tmp do
27865: LD_ADDR_VAR 0 6
27869: PUSH
27870: LD_VAR 0 5
27874: PUSH
27875: FOR_IN
27876: IFFALSE 27911
// if GetBase ( i ) <> base then
27878: LD_VAR 0 6
27882: PPUSH
27883: CALL_OW 274
27887: PUSH
27888: LD_VAR 0 1
27892: NONEQUAL
27893: IFFALSE 27909
// ComLinkToBase ( base , i ) ;
27895: LD_VAR 0 1
27899: PPUSH
27900: LD_VAR 0 6
27904: PPUSH
27905: CALL_OW 169
27909: GO 27875
27911: POP
27912: POP
// end ; result := tmp ;
27913: LD_ADDR_VAR 0 4
27917: PUSH
27918: LD_VAR 0 5
27922: ST_TO_ADDR
// end ;
27923: LD_VAR 0 4
27927: RET
// export function ComComplete ( units , b ) ; var i ; begin
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
// if not units then
27932: LD_VAR 0 1
27936: NOT
27937: IFFALSE 27941
// exit ;
27939: GO 28031
// for i in units do
27941: LD_ADDR_VAR 0 4
27945: PUSH
27946: LD_VAR 0 1
27950: PUSH
27951: FOR_IN
27952: IFFALSE 28029
// if BuildingStatus ( b ) = bs_build then
27954: LD_VAR 0 2
27958: PPUSH
27959: CALL_OW 461
27963: PUSH
27964: LD_INT 1
27966: EQUAL
27967: IFFALSE 28027
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27969: LD_VAR 0 4
27973: PPUSH
27974: LD_STRING h
27976: PUSH
27977: LD_VAR 0 2
27981: PPUSH
27982: CALL_OW 250
27986: PUSH
27987: LD_VAR 0 2
27991: PPUSH
27992: CALL_OW 251
27996: PUSH
27997: LD_VAR 0 2
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: PUSH
28020: EMPTY
28021: LIST
28022: PPUSH
28023: CALL_OW 446
28027: GO 27951
28029: POP
28030: POP
// end ;
28031: LD_VAR 0 3
28035: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28036: LD_INT 0
28038: PPUSH
28039: PPUSH
28040: PPUSH
28041: PPUSH
28042: PPUSH
28043: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28044: LD_VAR 0 1
28048: NOT
28049: PUSH
28050: LD_VAR 0 1
28054: PPUSH
28055: CALL_OW 263
28059: PUSH
28060: LD_INT 2
28062: NONEQUAL
28063: OR
28064: IFFALSE 28068
// exit ;
28066: GO 28384
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28068: LD_ADDR_VAR 0 6
28072: PUSH
28073: LD_INT 22
28075: PUSH
28076: LD_VAR 0 1
28080: PPUSH
28081: CALL_OW 255
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 30
28095: PUSH
28096: LD_INT 36
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 34
28105: PUSH
28106: LD_INT 31
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PPUSH
28122: CALL_OW 69
28126: ST_TO_ADDR
// if not tmp then
28127: LD_VAR 0 6
28131: NOT
28132: IFFALSE 28136
// exit ;
28134: GO 28384
// result := [ ] ;
28136: LD_ADDR_VAR 0 2
28140: PUSH
28141: EMPTY
28142: ST_TO_ADDR
// for i in tmp do
28143: LD_ADDR_VAR 0 3
28147: PUSH
28148: LD_VAR 0 6
28152: PUSH
28153: FOR_IN
28154: IFFALSE 28225
// begin t := UnitsInside ( i ) ;
28156: LD_ADDR_VAR 0 4
28160: PUSH
28161: LD_VAR 0 3
28165: PPUSH
28166: CALL_OW 313
28170: ST_TO_ADDR
// if t then
28171: LD_VAR 0 4
28175: IFFALSE 28223
// for j in t do
28177: LD_ADDR_VAR 0 7
28181: PUSH
28182: LD_VAR 0 4
28186: PUSH
28187: FOR_IN
28188: IFFALSE 28221
// result := Replace ( result , result + 1 , j ) ;
28190: LD_ADDR_VAR 0 2
28194: PUSH
28195: LD_VAR 0 2
28199: PPUSH
28200: LD_VAR 0 2
28204: PUSH
28205: LD_INT 1
28207: PLUS
28208: PPUSH
28209: LD_VAR 0 7
28213: PPUSH
28214: CALL_OW 1
28218: ST_TO_ADDR
28219: GO 28187
28221: POP
28222: POP
// end ;
28223: GO 28153
28225: POP
28226: POP
// if not result then
28227: LD_VAR 0 2
28231: NOT
28232: IFFALSE 28236
// exit ;
28234: GO 28384
// mech := result [ 1 ] ;
28236: LD_ADDR_VAR 0 5
28240: PUSH
28241: LD_VAR 0 2
28245: PUSH
28246: LD_INT 1
28248: ARRAY
28249: ST_TO_ADDR
// if result > 1 then
28250: LD_VAR 0 2
28254: PUSH
28255: LD_INT 1
28257: GREATER
28258: IFFALSE 28370
// begin for i = 2 to result do
28260: LD_ADDR_VAR 0 3
28264: PUSH
28265: DOUBLE
28266: LD_INT 2
28268: DEC
28269: ST_TO_ADDR
28270: LD_VAR 0 2
28274: PUSH
28275: FOR_TO
28276: IFFALSE 28368
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28278: LD_ADDR_VAR 0 4
28282: PUSH
28283: LD_VAR 0 2
28287: PUSH
28288: LD_VAR 0 3
28292: ARRAY
28293: PPUSH
28294: LD_INT 3
28296: PPUSH
28297: CALL_OW 259
28301: PUSH
28302: LD_VAR 0 2
28306: PUSH
28307: LD_VAR 0 3
28311: ARRAY
28312: PPUSH
28313: CALL_OW 432
28317: MINUS
28318: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28319: LD_VAR 0 4
28323: PUSH
28324: LD_VAR 0 5
28328: PPUSH
28329: LD_INT 3
28331: PPUSH
28332: CALL_OW 259
28336: PUSH
28337: LD_VAR 0 5
28341: PPUSH
28342: CALL_OW 432
28346: MINUS
28347: GREATEREQUAL
28348: IFFALSE 28366
// mech := result [ i ] ;
28350: LD_ADDR_VAR 0 5
28354: PUSH
28355: LD_VAR 0 2
28359: PUSH
28360: LD_VAR 0 3
28364: ARRAY
28365: ST_TO_ADDR
// end ;
28366: GO 28275
28368: POP
28369: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28370: LD_VAR 0 1
28374: PPUSH
28375: LD_VAR 0 5
28379: PPUSH
28380: CALL_OW 135
// end ;
28384: LD_VAR 0 2
28388: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28389: LD_INT 0
28391: PPUSH
28392: PPUSH
28393: PPUSH
28394: PPUSH
28395: PPUSH
28396: PPUSH
28397: PPUSH
28398: PPUSH
28399: PPUSH
28400: PPUSH
28401: PPUSH
28402: PPUSH
28403: PPUSH
// result := [ ] ;
28404: LD_ADDR_VAR 0 7
28408: PUSH
28409: EMPTY
28410: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28411: LD_VAR 0 1
28415: PPUSH
28416: CALL_OW 266
28420: PUSH
28421: LD_INT 0
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: IN
28431: NOT
28432: IFFALSE 28436
// exit ;
28434: GO 30070
// if name then
28436: LD_VAR 0 3
28440: IFFALSE 28456
// SetBName ( base_dep , name ) ;
28442: LD_VAR 0 1
28446: PPUSH
28447: LD_VAR 0 3
28451: PPUSH
28452: CALL_OW 500
// base := GetBase ( base_dep ) ;
28456: LD_ADDR_VAR 0 15
28460: PUSH
28461: LD_VAR 0 1
28465: PPUSH
28466: CALL_OW 274
28470: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28471: LD_ADDR_VAR 0 16
28475: PUSH
28476: LD_VAR 0 1
28480: PPUSH
28481: CALL_OW 255
28485: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28486: LD_ADDR_VAR 0 17
28490: PUSH
28491: LD_VAR 0 1
28495: PPUSH
28496: CALL_OW 248
28500: ST_TO_ADDR
// if sources then
28501: LD_VAR 0 5
28505: IFFALSE 28552
// for i = 1 to 3 do
28507: LD_ADDR_VAR 0 8
28511: PUSH
28512: DOUBLE
28513: LD_INT 1
28515: DEC
28516: ST_TO_ADDR
28517: LD_INT 3
28519: PUSH
28520: FOR_TO
28521: IFFALSE 28550
// AddResourceType ( base , i , sources [ i ] ) ;
28523: LD_VAR 0 15
28527: PPUSH
28528: LD_VAR 0 8
28532: PPUSH
28533: LD_VAR 0 5
28537: PUSH
28538: LD_VAR 0 8
28542: ARRAY
28543: PPUSH
28544: CALL_OW 276
28548: GO 28520
28550: POP
28551: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28552: LD_ADDR_VAR 0 18
28556: PUSH
28557: LD_VAR 0 15
28561: PPUSH
28562: LD_VAR 0 2
28566: PPUSH
28567: LD_INT 1
28569: PPUSH
28570: CALL 27813 0 3
28574: ST_TO_ADDR
// InitHc ;
28575: CALL_OW 19
// InitUc ;
28579: CALL_OW 18
// uc_side := side ;
28583: LD_ADDR_OWVAR 20
28587: PUSH
28588: LD_VAR 0 16
28592: ST_TO_ADDR
// uc_nation := nation ;
28593: LD_ADDR_OWVAR 21
28597: PUSH
28598: LD_VAR 0 17
28602: ST_TO_ADDR
// if buildings then
28603: LD_VAR 0 18
28607: IFFALSE 29929
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28609: LD_ADDR_VAR 0 19
28613: PUSH
28614: LD_VAR 0 18
28618: PPUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 30
28624: PUSH
28625: LD_INT 29
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 30
28634: PUSH
28635: LD_INT 30
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: LIST
28646: PPUSH
28647: CALL_OW 72
28651: ST_TO_ADDR
// if tmp then
28652: LD_VAR 0 19
28656: IFFALSE 28704
// for i in tmp do
28658: LD_ADDR_VAR 0 8
28662: PUSH
28663: LD_VAR 0 19
28667: PUSH
28668: FOR_IN
28669: IFFALSE 28702
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28671: LD_VAR 0 8
28675: PPUSH
28676: CALL_OW 250
28680: PPUSH
28681: LD_VAR 0 8
28685: PPUSH
28686: CALL_OW 251
28690: PPUSH
28691: LD_VAR 0 16
28695: PPUSH
28696: CALL_OW 441
28700: GO 28668
28702: POP
28703: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28704: LD_VAR 0 18
28708: PPUSH
28709: LD_INT 2
28711: PUSH
28712: LD_INT 30
28714: PUSH
28715: LD_INT 32
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 30
28724: PUSH
28725: LD_INT 33
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: PPUSH
28737: CALL_OW 72
28741: IFFALSE 28829
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28743: LD_ADDR_VAR 0 8
28747: PUSH
28748: LD_VAR 0 18
28752: PPUSH
28753: LD_INT 2
28755: PUSH
28756: LD_INT 30
28758: PUSH
28759: LD_INT 32
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 30
28768: PUSH
28769: LD_INT 33
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: PPUSH
28781: CALL_OW 72
28785: PUSH
28786: FOR_IN
28787: IFFALSE 28827
// begin if not GetBWeapon ( i ) then
28789: LD_VAR 0 8
28793: PPUSH
28794: CALL_OW 269
28798: NOT
28799: IFFALSE 28825
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28801: LD_VAR 0 8
28805: PPUSH
28806: LD_VAR 0 8
28810: PPUSH
28811: LD_VAR 0 2
28815: PPUSH
28816: CALL 30075 0 2
28820: PPUSH
28821: CALL_OW 431
// end ;
28825: GO 28786
28827: POP
28828: POP
// end ; for i = 1 to personel do
28829: LD_ADDR_VAR 0 8
28833: PUSH
28834: DOUBLE
28835: LD_INT 1
28837: DEC
28838: ST_TO_ADDR
28839: LD_VAR 0 6
28843: PUSH
28844: FOR_TO
28845: IFFALSE 29909
// begin if i > 4 then
28847: LD_VAR 0 8
28851: PUSH
28852: LD_INT 4
28854: GREATER
28855: IFFALSE 28859
// break ;
28857: GO 29909
// case i of 1 :
28859: LD_VAR 0 8
28863: PUSH
28864: LD_INT 1
28866: DOUBLE
28867: EQUAL
28868: IFTRUE 28872
28870: GO 28952
28872: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28873: LD_ADDR_VAR 0 12
28877: PUSH
28878: LD_VAR 0 18
28882: PPUSH
28883: LD_INT 22
28885: PUSH
28886: LD_VAR 0 16
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 58
28897: PUSH
28898: EMPTY
28899: LIST
28900: PUSH
28901: LD_INT 2
28903: PUSH
28904: LD_INT 30
28906: PUSH
28907: LD_INT 32
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 30
28916: PUSH
28917: LD_INT 4
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 30
28926: PUSH
28927: LD_INT 5
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: LIST
28944: PPUSH
28945: CALL_OW 72
28949: ST_TO_ADDR
28950: GO 29174
28952: LD_INT 2
28954: DOUBLE
28955: EQUAL
28956: IFTRUE 28960
28958: GO 29022
28960: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28961: LD_ADDR_VAR 0 12
28965: PUSH
28966: LD_VAR 0 18
28970: PPUSH
28971: LD_INT 22
28973: PUSH
28974: LD_VAR 0 16
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 30
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 30
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PPUSH
29015: CALL_OW 72
29019: ST_TO_ADDR
29020: GO 29174
29022: LD_INT 3
29024: DOUBLE
29025: EQUAL
29026: IFTRUE 29030
29028: GO 29092
29030: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29031: LD_ADDR_VAR 0 12
29035: PUSH
29036: LD_VAR 0 18
29040: PPUSH
29041: LD_INT 22
29043: PUSH
29044: LD_VAR 0 16
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: LD_INT 30
29058: PUSH
29059: LD_INT 2
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 30
29068: PUSH
29069: LD_INT 3
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 72
29089: ST_TO_ADDR
29090: GO 29174
29092: LD_INT 4
29094: DOUBLE
29095: EQUAL
29096: IFTRUE 29100
29098: GO 29173
29100: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29101: LD_ADDR_VAR 0 12
29105: PUSH
29106: LD_VAR 0 18
29110: PPUSH
29111: LD_INT 22
29113: PUSH
29114: LD_VAR 0 16
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: LD_INT 30
29128: PUSH
29129: LD_INT 6
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 30
29138: PUSH
29139: LD_INT 7
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 30
29148: PUSH
29149: LD_INT 8
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PPUSH
29166: CALL_OW 72
29170: ST_TO_ADDR
29171: GO 29174
29173: POP
// if i = 1 then
29174: LD_VAR 0 8
29178: PUSH
29179: LD_INT 1
29181: EQUAL
29182: IFFALSE 29293
// begin tmp := [ ] ;
29184: LD_ADDR_VAR 0 19
29188: PUSH
29189: EMPTY
29190: ST_TO_ADDR
// for j in f do
29191: LD_ADDR_VAR 0 9
29195: PUSH
29196: LD_VAR 0 12
29200: PUSH
29201: FOR_IN
29202: IFFALSE 29275
// if GetBType ( j ) = b_bunker then
29204: LD_VAR 0 9
29208: PPUSH
29209: CALL_OW 266
29213: PUSH
29214: LD_INT 32
29216: EQUAL
29217: IFFALSE 29244
// tmp := Insert ( tmp , 1 , j ) else
29219: LD_ADDR_VAR 0 19
29223: PUSH
29224: LD_VAR 0 19
29228: PPUSH
29229: LD_INT 1
29231: PPUSH
29232: LD_VAR 0 9
29236: PPUSH
29237: CALL_OW 2
29241: ST_TO_ADDR
29242: GO 29273
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29244: LD_ADDR_VAR 0 19
29248: PUSH
29249: LD_VAR 0 19
29253: PPUSH
29254: LD_VAR 0 19
29258: PUSH
29259: LD_INT 1
29261: PLUS
29262: PPUSH
29263: LD_VAR 0 9
29267: PPUSH
29268: CALL_OW 2
29272: ST_TO_ADDR
29273: GO 29201
29275: POP
29276: POP
// if tmp then
29277: LD_VAR 0 19
29281: IFFALSE 29293
// f := tmp ;
29283: LD_ADDR_VAR 0 12
29287: PUSH
29288: LD_VAR 0 19
29292: ST_TO_ADDR
// end ; x := personel [ i ] ;
29293: LD_ADDR_VAR 0 13
29297: PUSH
29298: LD_VAR 0 6
29302: PUSH
29303: LD_VAR 0 8
29307: ARRAY
29308: ST_TO_ADDR
// if x = - 1 then
29309: LD_VAR 0 13
29313: PUSH
29314: LD_INT 1
29316: NEG
29317: EQUAL
29318: IFFALSE 29527
// begin for j in f do
29320: LD_ADDR_VAR 0 9
29324: PUSH
29325: LD_VAR 0 12
29329: PUSH
29330: FOR_IN
29331: IFFALSE 29523
// repeat InitHc ;
29333: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29337: LD_VAR 0 9
29341: PPUSH
29342: CALL_OW 266
29346: PUSH
29347: LD_INT 5
29349: EQUAL
29350: IFFALSE 29420
// begin if UnitsInside ( j ) < 3 then
29352: LD_VAR 0 9
29356: PPUSH
29357: CALL_OW 313
29361: PUSH
29362: LD_INT 3
29364: LESS
29365: IFFALSE 29401
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29367: LD_INT 0
29369: PPUSH
29370: LD_INT 5
29372: PUSH
29373: LD_INT 8
29375: PUSH
29376: LD_INT 9
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: PUSH
29384: LD_VAR 0 17
29388: ARRAY
29389: PPUSH
29390: LD_VAR 0 4
29394: PPUSH
29395: CALL_OW 380
29399: GO 29418
// PrepareHuman ( false , i , skill ) ;
29401: LD_INT 0
29403: PPUSH
29404: LD_VAR 0 8
29408: PPUSH
29409: LD_VAR 0 4
29413: PPUSH
29414: CALL_OW 380
// end else
29418: GO 29437
// PrepareHuman ( false , i , skill ) ;
29420: LD_INT 0
29422: PPUSH
29423: LD_VAR 0 8
29427: PPUSH
29428: LD_VAR 0 4
29432: PPUSH
29433: CALL_OW 380
// un := CreateHuman ;
29437: LD_ADDR_VAR 0 14
29441: PUSH
29442: CALL_OW 44
29446: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29447: LD_ADDR_VAR 0 7
29451: PUSH
29452: LD_VAR 0 7
29456: PPUSH
29457: LD_INT 1
29459: PPUSH
29460: LD_VAR 0 14
29464: PPUSH
29465: CALL_OW 2
29469: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29470: LD_VAR 0 14
29474: PPUSH
29475: LD_VAR 0 9
29479: PPUSH
29480: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29484: LD_VAR 0 9
29488: PPUSH
29489: CALL_OW 313
29493: PUSH
29494: LD_INT 6
29496: EQUAL
29497: PUSH
29498: LD_VAR 0 9
29502: PPUSH
29503: CALL_OW 266
29507: PUSH
29508: LD_INT 32
29510: PUSH
29511: LD_INT 31
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: IN
29518: OR
29519: IFFALSE 29333
29521: GO 29330
29523: POP
29524: POP
// end else
29525: GO 29907
// for j = 1 to x do
29527: LD_ADDR_VAR 0 9
29531: PUSH
29532: DOUBLE
29533: LD_INT 1
29535: DEC
29536: ST_TO_ADDR
29537: LD_VAR 0 13
29541: PUSH
29542: FOR_TO
29543: IFFALSE 29905
// begin InitHc ;
29545: CALL_OW 19
// if not f then
29549: LD_VAR 0 12
29553: NOT
29554: IFFALSE 29643
// begin PrepareHuman ( false , i , skill ) ;
29556: LD_INT 0
29558: PPUSH
29559: LD_VAR 0 8
29563: PPUSH
29564: LD_VAR 0 4
29568: PPUSH
29569: CALL_OW 380
// un := CreateHuman ;
29573: LD_ADDR_VAR 0 14
29577: PUSH
29578: CALL_OW 44
29582: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29583: LD_ADDR_VAR 0 7
29587: PUSH
29588: LD_VAR 0 7
29592: PPUSH
29593: LD_INT 1
29595: PPUSH
29596: LD_VAR 0 14
29600: PPUSH
29601: CALL_OW 2
29605: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29606: LD_VAR 0 14
29610: PPUSH
29611: LD_VAR 0 1
29615: PPUSH
29616: CALL_OW 250
29620: PPUSH
29621: LD_VAR 0 1
29625: PPUSH
29626: CALL_OW 251
29630: PPUSH
29631: LD_INT 10
29633: PPUSH
29634: LD_INT 0
29636: PPUSH
29637: CALL_OW 50
// continue ;
29641: GO 29542
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29643: LD_VAR 0 12
29647: PUSH
29648: LD_INT 1
29650: ARRAY
29651: PPUSH
29652: CALL_OW 313
29656: PUSH
29657: LD_VAR 0 12
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: PPUSH
29666: CALL_OW 266
29670: PUSH
29671: LD_INT 32
29673: PUSH
29674: LD_INT 31
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: IN
29681: AND
29682: PUSH
29683: LD_VAR 0 12
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PPUSH
29692: CALL_OW 313
29696: PUSH
29697: LD_INT 6
29699: EQUAL
29700: OR
29701: IFFALSE 29721
// f := Delete ( f , 1 ) ;
29703: LD_ADDR_VAR 0 12
29707: PUSH
29708: LD_VAR 0 12
29712: PPUSH
29713: LD_INT 1
29715: PPUSH
29716: CALL_OW 3
29720: ST_TO_ADDR
// if not f then
29721: LD_VAR 0 12
29725: NOT
29726: IFFALSE 29744
// begin x := x + 2 ;
29728: LD_ADDR_VAR 0 13
29732: PUSH
29733: LD_VAR 0 13
29737: PUSH
29738: LD_INT 2
29740: PLUS
29741: ST_TO_ADDR
// continue ;
29742: GO 29542
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29744: LD_VAR 0 12
29748: PUSH
29749: LD_INT 1
29751: ARRAY
29752: PPUSH
29753: CALL_OW 266
29757: PUSH
29758: LD_INT 5
29760: EQUAL
29761: IFFALSE 29835
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29763: LD_VAR 0 12
29767: PUSH
29768: LD_INT 1
29770: ARRAY
29771: PPUSH
29772: CALL_OW 313
29776: PUSH
29777: LD_INT 3
29779: LESS
29780: IFFALSE 29816
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29782: LD_INT 0
29784: PPUSH
29785: LD_INT 5
29787: PUSH
29788: LD_INT 8
29790: PUSH
29791: LD_INT 9
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: PUSH
29799: LD_VAR 0 17
29803: ARRAY
29804: PPUSH
29805: LD_VAR 0 4
29809: PPUSH
29810: CALL_OW 380
29814: GO 29833
// PrepareHuman ( false , i , skill ) ;
29816: LD_INT 0
29818: PPUSH
29819: LD_VAR 0 8
29823: PPUSH
29824: LD_VAR 0 4
29828: PPUSH
29829: CALL_OW 380
// end else
29833: GO 29852
// PrepareHuman ( false , i , skill ) ;
29835: LD_INT 0
29837: PPUSH
29838: LD_VAR 0 8
29842: PPUSH
29843: LD_VAR 0 4
29847: PPUSH
29848: CALL_OW 380
// un := CreateHuman ;
29852: LD_ADDR_VAR 0 14
29856: PUSH
29857: CALL_OW 44
29861: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29862: LD_ADDR_VAR 0 7
29866: PUSH
29867: LD_VAR 0 7
29871: PPUSH
29872: LD_INT 1
29874: PPUSH
29875: LD_VAR 0 14
29879: PPUSH
29880: CALL_OW 2
29884: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29885: LD_VAR 0 14
29889: PPUSH
29890: LD_VAR 0 12
29894: PUSH
29895: LD_INT 1
29897: ARRAY
29898: PPUSH
29899: CALL_OW 52
// end ;
29903: GO 29542
29905: POP
29906: POP
// end ;
29907: GO 28844
29909: POP
29910: POP
// result := result ^ buildings ;
29911: LD_ADDR_VAR 0 7
29915: PUSH
29916: LD_VAR 0 7
29920: PUSH
29921: LD_VAR 0 18
29925: ADD
29926: ST_TO_ADDR
// end else
29927: GO 30070
// begin for i = 1 to personel do
29929: LD_ADDR_VAR 0 8
29933: PUSH
29934: DOUBLE
29935: LD_INT 1
29937: DEC
29938: ST_TO_ADDR
29939: LD_VAR 0 6
29943: PUSH
29944: FOR_TO
29945: IFFALSE 30068
// begin if i > 4 then
29947: LD_VAR 0 8
29951: PUSH
29952: LD_INT 4
29954: GREATER
29955: IFFALSE 29959
// break ;
29957: GO 30068
// x := personel [ i ] ;
29959: LD_ADDR_VAR 0 13
29963: PUSH
29964: LD_VAR 0 6
29968: PUSH
29969: LD_VAR 0 8
29973: ARRAY
29974: ST_TO_ADDR
// if x = - 1 then
29975: LD_VAR 0 13
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: EQUAL
29984: IFFALSE 29988
// continue ;
29986: GO 29944
// PrepareHuman ( false , i , skill ) ;
29988: LD_INT 0
29990: PPUSH
29991: LD_VAR 0 8
29995: PPUSH
29996: LD_VAR 0 4
30000: PPUSH
30001: CALL_OW 380
// un := CreateHuman ;
30005: LD_ADDR_VAR 0 14
30009: PUSH
30010: CALL_OW 44
30014: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30015: LD_VAR 0 14
30019: PPUSH
30020: LD_VAR 0 1
30024: PPUSH
30025: CALL_OW 250
30029: PPUSH
30030: LD_VAR 0 1
30034: PPUSH
30035: CALL_OW 251
30039: PPUSH
30040: LD_INT 10
30042: PPUSH
30043: LD_INT 0
30045: PPUSH
30046: CALL_OW 50
// result := result ^ un ;
30050: LD_ADDR_VAR 0 7
30054: PUSH
30055: LD_VAR 0 7
30059: PUSH
30060: LD_VAR 0 14
30064: ADD
30065: ST_TO_ADDR
// end ;
30066: GO 29944
30068: POP
30069: POP
// end ; end ;
30070: LD_VAR 0 7
30074: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30075: LD_INT 0
30077: PPUSH
30078: PPUSH
30079: PPUSH
30080: PPUSH
30081: PPUSH
30082: PPUSH
30083: PPUSH
30084: PPUSH
30085: PPUSH
30086: PPUSH
30087: PPUSH
30088: PPUSH
30089: PPUSH
30090: PPUSH
30091: PPUSH
30092: PPUSH
// result := false ;
30093: LD_ADDR_VAR 0 3
30097: PUSH
30098: LD_INT 0
30100: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30101: LD_VAR 0 1
30105: NOT
30106: PUSH
30107: LD_VAR 0 1
30111: PPUSH
30112: CALL_OW 266
30116: PUSH
30117: LD_INT 32
30119: PUSH
30120: LD_INT 33
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: IN
30127: NOT
30128: OR
30129: IFFALSE 30133
// exit ;
30131: GO 31242
// nat := GetNation ( tower ) ;
30133: LD_ADDR_VAR 0 12
30137: PUSH
30138: LD_VAR 0 1
30142: PPUSH
30143: CALL_OW 248
30147: ST_TO_ADDR
// side := GetSide ( tower ) ;
30148: LD_ADDR_VAR 0 16
30152: PUSH
30153: LD_VAR 0 1
30157: PPUSH
30158: CALL_OW 255
30162: ST_TO_ADDR
// x := GetX ( tower ) ;
30163: LD_ADDR_VAR 0 10
30167: PUSH
30168: LD_VAR 0 1
30172: PPUSH
30173: CALL_OW 250
30177: ST_TO_ADDR
// y := GetY ( tower ) ;
30178: LD_ADDR_VAR 0 11
30182: PUSH
30183: LD_VAR 0 1
30187: PPUSH
30188: CALL_OW 251
30192: ST_TO_ADDR
// if not x or not y then
30193: LD_VAR 0 10
30197: NOT
30198: PUSH
30199: LD_VAR 0 11
30203: NOT
30204: OR
30205: IFFALSE 30209
// exit ;
30207: GO 31242
// weapon := 0 ;
30209: LD_ADDR_VAR 0 18
30213: PUSH
30214: LD_INT 0
30216: ST_TO_ADDR
// fac_list := [ ] ;
30217: LD_ADDR_VAR 0 17
30221: PUSH
30222: EMPTY
30223: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30224: LD_ADDR_VAR 0 6
30228: PUSH
30229: LD_VAR 0 1
30233: PPUSH
30234: CALL_OW 274
30238: PPUSH
30239: LD_VAR 0 2
30243: PPUSH
30244: LD_INT 0
30246: PPUSH
30247: CALL 27813 0 3
30251: PPUSH
30252: LD_INT 30
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PPUSH
30262: CALL_OW 72
30266: ST_TO_ADDR
// if not factories then
30267: LD_VAR 0 6
30271: NOT
30272: IFFALSE 30276
// exit ;
30274: GO 31242
// for i in factories do
30276: LD_ADDR_VAR 0 8
30280: PUSH
30281: LD_VAR 0 6
30285: PUSH
30286: FOR_IN
30287: IFFALSE 30312
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30289: LD_ADDR_VAR 0 17
30293: PUSH
30294: LD_VAR 0 17
30298: PUSH
30299: LD_VAR 0 8
30303: PPUSH
30304: CALL_OW 478
30308: UNION
30309: ST_TO_ADDR
30310: GO 30286
30312: POP
30313: POP
// if not fac_list then
30314: LD_VAR 0 17
30318: NOT
30319: IFFALSE 30323
// exit ;
30321: GO 31242
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30323: LD_ADDR_VAR 0 5
30327: PUSH
30328: LD_INT 4
30330: PUSH
30331: LD_INT 5
30333: PUSH
30334: LD_INT 9
30336: PUSH
30337: LD_INT 10
30339: PUSH
30340: LD_INT 6
30342: PUSH
30343: LD_INT 7
30345: PUSH
30346: LD_INT 11
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 27
30360: PUSH
30361: LD_INT 28
30363: PUSH
30364: LD_INT 26
30366: PUSH
30367: LD_INT 30
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 43
30378: PUSH
30379: LD_INT 44
30381: PUSH
30382: LD_INT 46
30384: PUSH
30385: LD_INT 45
30387: PUSH
30388: LD_INT 47
30390: PUSH
30391: LD_INT 49
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: PUSH
30407: LD_VAR 0 12
30411: ARRAY
30412: ST_TO_ADDR
// list := list isect fac_list ;
30413: LD_ADDR_VAR 0 5
30417: PUSH
30418: LD_VAR 0 5
30422: PUSH
30423: LD_VAR 0 17
30427: ISECT
30428: ST_TO_ADDR
// if not list then
30429: LD_VAR 0 5
30433: NOT
30434: IFFALSE 30438
// exit ;
30436: GO 31242
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30438: LD_VAR 0 12
30442: PUSH
30443: LD_INT 3
30445: EQUAL
30446: PUSH
30447: LD_INT 49
30449: PUSH
30450: LD_VAR 0 5
30454: IN
30455: AND
30456: PUSH
30457: LD_INT 31
30459: PPUSH
30460: LD_VAR 0 16
30464: PPUSH
30465: CALL_OW 321
30469: PUSH
30470: LD_INT 2
30472: EQUAL
30473: AND
30474: IFFALSE 30534
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30476: LD_INT 22
30478: PUSH
30479: LD_VAR 0 16
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 35
30490: PUSH
30491: LD_INT 49
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 91
30500: PUSH
30501: LD_VAR 0 1
30505: PUSH
30506: LD_INT 10
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: PPUSH
30519: CALL_OW 69
30523: NOT
30524: IFFALSE 30534
// weapon := ru_time_lapser ;
30526: LD_ADDR_VAR 0 18
30530: PUSH
30531: LD_INT 49
30533: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30534: LD_VAR 0 12
30538: PUSH
30539: LD_INT 1
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: IN
30549: PUSH
30550: LD_INT 11
30552: PUSH
30553: LD_VAR 0 5
30557: IN
30558: PUSH
30559: LD_INT 30
30561: PUSH
30562: LD_VAR 0 5
30566: IN
30567: OR
30568: AND
30569: PUSH
30570: LD_INT 6
30572: PPUSH
30573: LD_VAR 0 16
30577: PPUSH
30578: CALL_OW 321
30582: PUSH
30583: LD_INT 2
30585: EQUAL
30586: AND
30587: IFFALSE 30752
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30589: LD_INT 22
30591: PUSH
30592: LD_VAR 0 16
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: LD_INT 35
30606: PUSH
30607: LD_INT 11
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 35
30616: PUSH
30617: LD_INT 30
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 91
30631: PUSH
30632: LD_VAR 0 1
30636: PUSH
30637: LD_INT 18
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: LIST
30649: PPUSH
30650: CALL_OW 69
30654: NOT
30655: PUSH
30656: LD_INT 22
30658: PUSH
30659: LD_VAR 0 16
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: LD_INT 30
30673: PUSH
30674: LD_INT 32
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 30
30683: PUSH
30684: LD_INT 33
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 91
30698: PUSH
30699: LD_VAR 0 1
30703: PUSH
30704: LD_INT 12
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: PPUSH
30720: CALL_OW 69
30724: PUSH
30725: LD_INT 2
30727: GREATER
30728: AND
30729: IFFALSE 30752
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30731: LD_ADDR_VAR 0 18
30735: PUSH
30736: LD_INT 11
30738: PUSH
30739: LD_INT 30
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_VAR 0 12
30750: ARRAY
30751: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30752: LD_VAR 0 18
30756: NOT
30757: PUSH
30758: LD_INT 40
30760: PPUSH
30761: LD_VAR 0 16
30765: PPUSH
30766: CALL_OW 321
30770: PUSH
30771: LD_INT 2
30773: EQUAL
30774: AND
30775: PUSH
30776: LD_INT 7
30778: PUSH
30779: LD_VAR 0 5
30783: IN
30784: PUSH
30785: LD_INT 28
30787: PUSH
30788: LD_VAR 0 5
30792: IN
30793: OR
30794: PUSH
30795: LD_INT 45
30797: PUSH
30798: LD_VAR 0 5
30802: IN
30803: OR
30804: AND
30805: IFFALSE 31059
// begin hex := GetHexInfo ( x , y ) ;
30807: LD_ADDR_VAR 0 4
30811: PUSH
30812: LD_VAR 0 10
30816: PPUSH
30817: LD_VAR 0 11
30821: PPUSH
30822: CALL_OW 546
30826: ST_TO_ADDR
// if hex [ 1 ] then
30827: LD_VAR 0 4
30831: PUSH
30832: LD_INT 1
30834: ARRAY
30835: IFFALSE 30839
// exit ;
30837: GO 31242
// height := hex [ 2 ] ;
30839: LD_ADDR_VAR 0 15
30843: PUSH
30844: LD_VAR 0 4
30848: PUSH
30849: LD_INT 2
30851: ARRAY
30852: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30853: LD_ADDR_VAR 0 14
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 2
30863: PUSH
30864: LD_INT 3
30866: PUSH
30867: LD_INT 5
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: ST_TO_ADDR
// for i in tmp do
30876: LD_ADDR_VAR 0 8
30880: PUSH
30881: LD_VAR 0 14
30885: PUSH
30886: FOR_IN
30887: IFFALSE 31057
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30889: LD_ADDR_VAR 0 9
30893: PUSH
30894: LD_VAR 0 10
30898: PPUSH
30899: LD_VAR 0 8
30903: PPUSH
30904: LD_INT 5
30906: PPUSH
30907: CALL_OW 272
30911: PUSH
30912: LD_VAR 0 11
30916: PPUSH
30917: LD_VAR 0 8
30921: PPUSH
30922: LD_INT 5
30924: PPUSH
30925: CALL_OW 273
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30934: LD_VAR 0 9
30938: PUSH
30939: LD_INT 1
30941: ARRAY
30942: PPUSH
30943: LD_VAR 0 9
30947: PUSH
30948: LD_INT 2
30950: ARRAY
30951: PPUSH
30952: CALL_OW 488
30956: IFFALSE 31055
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30958: LD_ADDR_VAR 0 4
30962: PUSH
30963: LD_VAR 0 9
30967: PUSH
30968: LD_INT 1
30970: ARRAY
30971: PPUSH
30972: LD_VAR 0 9
30976: PUSH
30977: LD_INT 2
30979: ARRAY
30980: PPUSH
30981: CALL_OW 546
30985: ST_TO_ADDR
// if hex [ 1 ] then
30986: LD_VAR 0 4
30990: PUSH
30991: LD_INT 1
30993: ARRAY
30994: IFFALSE 30998
// continue ;
30996: GO 30886
// h := hex [ 2 ] ;
30998: LD_ADDR_VAR 0 13
31002: PUSH
31003: LD_VAR 0 4
31007: PUSH
31008: LD_INT 2
31010: ARRAY
31011: ST_TO_ADDR
// if h + 7 < height then
31012: LD_VAR 0 13
31016: PUSH
31017: LD_INT 7
31019: PLUS
31020: PUSH
31021: LD_VAR 0 15
31025: LESS
31026: IFFALSE 31055
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31028: LD_ADDR_VAR 0 18
31032: PUSH
31033: LD_INT 7
31035: PUSH
31036: LD_INT 28
31038: PUSH
31039: LD_INT 45
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: PUSH
31047: LD_VAR 0 12
31051: ARRAY
31052: ST_TO_ADDR
// break ;
31053: GO 31057
// end ; end ; end ;
31055: GO 30886
31057: POP
31058: POP
// end ; if not weapon then
31059: LD_VAR 0 18
31063: NOT
31064: IFFALSE 31124
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31066: LD_ADDR_VAR 0 5
31070: PUSH
31071: LD_VAR 0 5
31075: PUSH
31076: LD_INT 11
31078: PUSH
31079: LD_INT 30
31081: PUSH
31082: LD_INT 49
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: LIST
31089: DIFF
31090: ST_TO_ADDR
// if not list then
31091: LD_VAR 0 5
31095: NOT
31096: IFFALSE 31100
// exit ;
31098: GO 31242
// weapon := list [ rand ( 1 , list ) ] ;
31100: LD_ADDR_VAR 0 18
31104: PUSH
31105: LD_VAR 0 5
31109: PUSH
31110: LD_INT 1
31112: PPUSH
31113: LD_VAR 0 5
31117: PPUSH
31118: CALL_OW 12
31122: ARRAY
31123: ST_TO_ADDR
// end ; if weapon then
31124: LD_VAR 0 18
31128: IFFALSE 31242
// begin tmp := CostOfWeapon ( weapon ) ;
31130: LD_ADDR_VAR 0 14
31134: PUSH
31135: LD_VAR 0 18
31139: PPUSH
31140: CALL_OW 451
31144: ST_TO_ADDR
// j := GetBase ( tower ) ;
31145: LD_ADDR_VAR 0 9
31149: PUSH
31150: LD_VAR 0 1
31154: PPUSH
31155: CALL_OW 274
31159: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31160: LD_VAR 0 9
31164: PPUSH
31165: LD_INT 1
31167: PPUSH
31168: CALL_OW 275
31172: PUSH
31173: LD_VAR 0 14
31177: PUSH
31178: LD_INT 1
31180: ARRAY
31181: GREATEREQUAL
31182: PUSH
31183: LD_VAR 0 9
31187: PPUSH
31188: LD_INT 2
31190: PPUSH
31191: CALL_OW 275
31195: PUSH
31196: LD_VAR 0 14
31200: PUSH
31201: LD_INT 2
31203: ARRAY
31204: GREATEREQUAL
31205: AND
31206: PUSH
31207: LD_VAR 0 9
31211: PPUSH
31212: LD_INT 3
31214: PPUSH
31215: CALL_OW 275
31219: PUSH
31220: LD_VAR 0 14
31224: PUSH
31225: LD_INT 3
31227: ARRAY
31228: GREATEREQUAL
31229: AND
31230: IFFALSE 31242
// result := weapon ;
31232: LD_ADDR_VAR 0 3
31236: PUSH
31237: LD_VAR 0 18
31241: ST_TO_ADDR
// end ; end ;
31242: LD_VAR 0 3
31246: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
// result := true ;
31251: LD_ADDR_VAR 0 3
31255: PUSH
31256: LD_INT 1
31258: ST_TO_ADDR
// if array1 = array2 then
31259: LD_VAR 0 1
31263: PUSH
31264: LD_VAR 0 2
31268: EQUAL
31269: IFFALSE 31329
// begin for i = 1 to array1 do
31271: LD_ADDR_VAR 0 4
31275: PUSH
31276: DOUBLE
31277: LD_INT 1
31279: DEC
31280: ST_TO_ADDR
31281: LD_VAR 0 1
31285: PUSH
31286: FOR_TO
31287: IFFALSE 31325
// if array1 [ i ] <> array2 [ i ] then
31289: LD_VAR 0 1
31293: PUSH
31294: LD_VAR 0 4
31298: ARRAY
31299: PUSH
31300: LD_VAR 0 2
31304: PUSH
31305: LD_VAR 0 4
31309: ARRAY
31310: NONEQUAL
31311: IFFALSE 31323
// begin result := false ;
31313: LD_ADDR_VAR 0 3
31317: PUSH
31318: LD_INT 0
31320: ST_TO_ADDR
// break ;
31321: GO 31325
// end ;
31323: GO 31286
31325: POP
31326: POP
// end else
31327: GO 31337
// result := false ;
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_INT 0
31336: ST_TO_ADDR
// end ;
31337: LD_VAR 0 3
31341: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31342: LD_INT 0
31344: PPUSH
31345: PPUSH
// if not array1 or not array2 then
31346: LD_VAR 0 1
31350: NOT
31351: PUSH
31352: LD_VAR 0 2
31356: NOT
31357: OR
31358: IFFALSE 31362
// exit ;
31360: GO 31426
// result := true ;
31362: LD_ADDR_VAR 0 3
31366: PUSH
31367: LD_INT 1
31369: ST_TO_ADDR
// for i = 1 to array1 do
31370: LD_ADDR_VAR 0 4
31374: PUSH
31375: DOUBLE
31376: LD_INT 1
31378: DEC
31379: ST_TO_ADDR
31380: LD_VAR 0 1
31384: PUSH
31385: FOR_TO
31386: IFFALSE 31424
// if array1 [ i ] <> array2 [ i ] then
31388: LD_VAR 0 1
31392: PUSH
31393: LD_VAR 0 4
31397: ARRAY
31398: PUSH
31399: LD_VAR 0 2
31403: PUSH
31404: LD_VAR 0 4
31408: ARRAY
31409: NONEQUAL
31410: IFFALSE 31422
// begin result := false ;
31412: LD_ADDR_VAR 0 3
31416: PUSH
31417: LD_INT 0
31419: ST_TO_ADDR
// break ;
31420: GO 31424
// end ;
31422: GO 31385
31424: POP
31425: POP
// end ;
31426: LD_VAR 0 3
31430: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31431: LD_INT 0
31433: PPUSH
31434: PPUSH
31435: PPUSH
// pom := GetBase ( fac ) ;
31436: LD_ADDR_VAR 0 5
31440: PUSH
31441: LD_VAR 0 1
31445: PPUSH
31446: CALL_OW 274
31450: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31451: LD_ADDR_VAR 0 4
31455: PUSH
31456: LD_VAR 0 2
31460: PUSH
31461: LD_INT 1
31463: ARRAY
31464: PPUSH
31465: LD_VAR 0 2
31469: PUSH
31470: LD_INT 2
31472: ARRAY
31473: PPUSH
31474: LD_VAR 0 2
31478: PUSH
31479: LD_INT 3
31481: ARRAY
31482: PPUSH
31483: LD_VAR 0 2
31487: PUSH
31488: LD_INT 4
31490: ARRAY
31491: PPUSH
31492: CALL_OW 449
31496: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31497: LD_ADDR_VAR 0 3
31501: PUSH
31502: LD_VAR 0 5
31506: PPUSH
31507: LD_INT 1
31509: PPUSH
31510: CALL_OW 275
31514: PUSH
31515: LD_VAR 0 4
31519: PUSH
31520: LD_INT 1
31522: ARRAY
31523: GREATEREQUAL
31524: PUSH
31525: LD_VAR 0 5
31529: PPUSH
31530: LD_INT 2
31532: PPUSH
31533: CALL_OW 275
31537: PUSH
31538: LD_VAR 0 4
31542: PUSH
31543: LD_INT 2
31545: ARRAY
31546: GREATEREQUAL
31547: AND
31548: PUSH
31549: LD_VAR 0 5
31553: PPUSH
31554: LD_INT 3
31556: PPUSH
31557: CALL_OW 275
31561: PUSH
31562: LD_VAR 0 4
31566: PUSH
31567: LD_INT 3
31569: ARRAY
31570: GREATEREQUAL
31571: AND
31572: ST_TO_ADDR
// end ;
31573: LD_VAR 0 3
31577: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31578: LD_INT 0
31580: PPUSH
31581: PPUSH
31582: PPUSH
31583: PPUSH
// pom := GetBase ( building ) ;
31584: LD_ADDR_VAR 0 3
31588: PUSH
31589: LD_VAR 0 1
31593: PPUSH
31594: CALL_OW 274
31598: ST_TO_ADDR
// if not pom then
31599: LD_VAR 0 3
31603: NOT
31604: IFFALSE 31608
// exit ;
31606: GO 31778
// btype := GetBType ( building ) ;
31608: LD_ADDR_VAR 0 5
31612: PUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL_OW 266
31622: ST_TO_ADDR
// if btype = b_armoury then
31623: LD_VAR 0 5
31627: PUSH
31628: LD_INT 4
31630: EQUAL
31631: IFFALSE 31641
// btype := b_barracks ;
31633: LD_ADDR_VAR 0 5
31637: PUSH
31638: LD_INT 5
31640: ST_TO_ADDR
// if btype = b_depot then
31641: LD_VAR 0 5
31645: PUSH
31646: LD_INT 0
31648: EQUAL
31649: IFFALSE 31659
// btype := b_warehouse ;
31651: LD_ADDR_VAR 0 5
31655: PUSH
31656: LD_INT 1
31658: ST_TO_ADDR
// if btype = b_workshop then
31659: LD_VAR 0 5
31663: PUSH
31664: LD_INT 2
31666: EQUAL
31667: IFFALSE 31677
// btype := b_factory ;
31669: LD_ADDR_VAR 0 5
31673: PUSH
31674: LD_INT 3
31676: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31677: LD_ADDR_VAR 0 4
31681: PUSH
31682: LD_VAR 0 5
31686: PPUSH
31687: LD_VAR 0 1
31691: PPUSH
31692: CALL_OW 248
31696: PPUSH
31697: CALL_OW 450
31701: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31702: LD_ADDR_VAR 0 2
31706: PUSH
31707: LD_VAR 0 3
31711: PPUSH
31712: LD_INT 1
31714: PPUSH
31715: CALL_OW 275
31719: PUSH
31720: LD_VAR 0 4
31724: PUSH
31725: LD_INT 1
31727: ARRAY
31728: GREATEREQUAL
31729: PUSH
31730: LD_VAR 0 3
31734: PPUSH
31735: LD_INT 2
31737: PPUSH
31738: CALL_OW 275
31742: PUSH
31743: LD_VAR 0 4
31747: PUSH
31748: LD_INT 2
31750: ARRAY
31751: GREATEREQUAL
31752: AND
31753: PUSH
31754: LD_VAR 0 3
31758: PPUSH
31759: LD_INT 3
31761: PPUSH
31762: CALL_OW 275
31766: PUSH
31767: LD_VAR 0 4
31771: PUSH
31772: LD_INT 3
31774: ARRAY
31775: GREATEREQUAL
31776: AND
31777: ST_TO_ADDR
// end ;
31778: LD_VAR 0 2
31782: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31783: LD_INT 0
31785: PPUSH
31786: PPUSH
31787: PPUSH
// pom := GetBase ( building ) ;
31788: LD_ADDR_VAR 0 4
31792: PUSH
31793: LD_VAR 0 1
31797: PPUSH
31798: CALL_OW 274
31802: ST_TO_ADDR
// if not pom then
31803: LD_VAR 0 4
31807: NOT
31808: IFFALSE 31812
// exit ;
31810: GO 31913
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31812: LD_ADDR_VAR 0 5
31816: PUSH
31817: LD_VAR 0 2
31821: PPUSH
31822: LD_VAR 0 1
31826: PPUSH
31827: CALL_OW 248
31831: PPUSH
31832: CALL_OW 450
31836: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31837: LD_ADDR_VAR 0 3
31841: PUSH
31842: LD_VAR 0 4
31846: PPUSH
31847: LD_INT 1
31849: PPUSH
31850: CALL_OW 275
31854: PUSH
31855: LD_VAR 0 5
31859: PUSH
31860: LD_INT 1
31862: ARRAY
31863: GREATEREQUAL
31864: PUSH
31865: LD_VAR 0 4
31869: PPUSH
31870: LD_INT 2
31872: PPUSH
31873: CALL_OW 275
31877: PUSH
31878: LD_VAR 0 5
31882: PUSH
31883: LD_INT 2
31885: ARRAY
31886: GREATEREQUAL
31887: AND
31888: PUSH
31889: LD_VAR 0 4
31893: PPUSH
31894: LD_INT 3
31896: PPUSH
31897: CALL_OW 275
31901: PUSH
31902: LD_VAR 0 5
31906: PUSH
31907: LD_INT 3
31909: ARRAY
31910: GREATEREQUAL
31911: AND
31912: ST_TO_ADDR
// end ;
31913: LD_VAR 0 3
31917: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31918: LD_INT 0
31920: PPUSH
31921: PPUSH
31922: PPUSH
31923: PPUSH
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
// result := false ;
31931: LD_ADDR_VAR 0 8
31935: PUSH
31936: LD_INT 0
31938: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31939: LD_VAR 0 5
31943: NOT
31944: PUSH
31945: LD_VAR 0 1
31949: NOT
31950: OR
31951: PUSH
31952: LD_VAR 0 2
31956: NOT
31957: OR
31958: PUSH
31959: LD_VAR 0 3
31963: NOT
31964: OR
31965: IFFALSE 31969
// exit ;
31967: GO 32783
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31969: LD_ADDR_VAR 0 14
31973: PUSH
31974: LD_VAR 0 1
31978: PPUSH
31979: LD_VAR 0 2
31983: PPUSH
31984: LD_VAR 0 3
31988: PPUSH
31989: LD_VAR 0 4
31993: PPUSH
31994: LD_VAR 0 5
31998: PUSH
31999: LD_INT 1
32001: ARRAY
32002: PPUSH
32003: CALL_OW 248
32007: PPUSH
32008: LD_INT 0
32010: PPUSH
32011: CALL 34036 0 6
32015: ST_TO_ADDR
// if not hexes then
32016: LD_VAR 0 14
32020: NOT
32021: IFFALSE 32025
// exit ;
32023: GO 32783
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32025: LD_ADDR_VAR 0 17
32029: PUSH
32030: LD_VAR 0 5
32034: PPUSH
32035: LD_INT 22
32037: PUSH
32038: LD_VAR 0 13
32042: PPUSH
32043: CALL_OW 255
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 2
32054: PUSH
32055: LD_INT 30
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 30
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: LIST
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PPUSH
32084: CALL_OW 72
32088: ST_TO_ADDR
// for i = 1 to hexes do
32089: LD_ADDR_VAR 0 9
32093: PUSH
32094: DOUBLE
32095: LD_INT 1
32097: DEC
32098: ST_TO_ADDR
32099: LD_VAR 0 14
32103: PUSH
32104: FOR_TO
32105: IFFALSE 32781
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32107: LD_ADDR_VAR 0 13
32111: PUSH
32112: LD_VAR 0 14
32116: PUSH
32117: LD_VAR 0 9
32121: ARRAY
32122: PUSH
32123: LD_INT 1
32125: ARRAY
32126: PPUSH
32127: LD_VAR 0 14
32131: PUSH
32132: LD_VAR 0 9
32136: ARRAY
32137: PUSH
32138: LD_INT 2
32140: ARRAY
32141: PPUSH
32142: CALL_OW 428
32146: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32147: LD_VAR 0 14
32151: PUSH
32152: LD_VAR 0 9
32156: ARRAY
32157: PUSH
32158: LD_INT 1
32160: ARRAY
32161: PPUSH
32162: LD_VAR 0 14
32166: PUSH
32167: LD_VAR 0 9
32171: ARRAY
32172: PUSH
32173: LD_INT 2
32175: ARRAY
32176: PPUSH
32177: CALL_OW 351
32181: PUSH
32182: LD_VAR 0 14
32186: PUSH
32187: LD_VAR 0 9
32191: ARRAY
32192: PUSH
32193: LD_INT 1
32195: ARRAY
32196: PPUSH
32197: LD_VAR 0 14
32201: PUSH
32202: LD_VAR 0 9
32206: ARRAY
32207: PUSH
32208: LD_INT 2
32210: ARRAY
32211: PPUSH
32212: CALL_OW 488
32216: NOT
32217: OR
32218: PUSH
32219: LD_VAR 0 13
32223: PPUSH
32224: CALL_OW 247
32228: PUSH
32229: LD_INT 3
32231: EQUAL
32232: OR
32233: IFFALSE 32239
// exit ;
32235: POP
32236: POP
32237: GO 32783
// if not tmp then
32239: LD_VAR 0 13
32243: NOT
32244: IFFALSE 32248
// continue ;
32246: GO 32104
// result := true ;
32248: LD_ADDR_VAR 0 8
32252: PUSH
32253: LD_INT 1
32255: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32256: LD_VAR 0 6
32260: PUSH
32261: LD_VAR 0 13
32265: PPUSH
32266: CALL_OW 247
32270: PUSH
32271: LD_INT 2
32273: EQUAL
32274: AND
32275: PUSH
32276: LD_VAR 0 13
32280: PPUSH
32281: CALL_OW 263
32285: PUSH
32286: LD_INT 1
32288: EQUAL
32289: AND
32290: IFFALSE 32454
// begin if IsDrivenBy ( tmp ) then
32292: LD_VAR 0 13
32296: PPUSH
32297: CALL_OW 311
32301: IFFALSE 32305
// continue ;
32303: GO 32104
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32305: LD_VAR 0 6
32309: PPUSH
32310: LD_INT 3
32312: PUSH
32313: LD_INT 60
32315: PUSH
32316: EMPTY
32317: LIST
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 3
32325: PUSH
32326: LD_INT 55
32328: PUSH
32329: EMPTY
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PPUSH
32340: CALL_OW 72
32344: IFFALSE 32452
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32346: LD_ADDR_VAR 0 18
32350: PUSH
32351: LD_VAR 0 6
32355: PPUSH
32356: LD_INT 3
32358: PUSH
32359: LD_INT 60
32361: PUSH
32362: EMPTY
32363: LIST
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 3
32371: PUSH
32372: LD_INT 55
32374: PUSH
32375: EMPTY
32376: LIST
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PPUSH
32386: CALL_OW 72
32390: PUSH
32391: LD_INT 1
32393: ARRAY
32394: ST_TO_ADDR
// if IsInUnit ( driver ) then
32395: LD_VAR 0 18
32399: PPUSH
32400: CALL_OW 310
32404: IFFALSE 32415
// ComExit ( driver ) ;
32406: LD_VAR 0 18
32410: PPUSH
32411: CALL 57815 0 1
// AddComEnterUnit ( driver , tmp ) ;
32415: LD_VAR 0 18
32419: PPUSH
32420: LD_VAR 0 13
32424: PPUSH
32425: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32429: LD_VAR 0 18
32433: PPUSH
32434: LD_VAR 0 7
32438: PPUSH
32439: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32443: LD_VAR 0 18
32447: PPUSH
32448: CALL_OW 181
// end ; continue ;
32452: GO 32104
// end ; if not cleaners or not tmp in cleaners then
32454: LD_VAR 0 6
32458: NOT
32459: PUSH
32460: LD_VAR 0 13
32464: PUSH
32465: LD_VAR 0 6
32469: IN
32470: NOT
32471: OR
32472: IFFALSE 32779
// begin if dep then
32474: LD_VAR 0 17
32478: IFFALSE 32614
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32480: LD_ADDR_VAR 0 16
32484: PUSH
32485: LD_VAR 0 17
32489: PUSH
32490: LD_INT 1
32492: ARRAY
32493: PPUSH
32494: CALL_OW 250
32498: PPUSH
32499: LD_VAR 0 17
32503: PUSH
32504: LD_INT 1
32506: ARRAY
32507: PPUSH
32508: CALL_OW 254
32512: PPUSH
32513: LD_INT 5
32515: PPUSH
32516: CALL_OW 272
32520: PUSH
32521: LD_VAR 0 17
32525: PUSH
32526: LD_INT 1
32528: ARRAY
32529: PPUSH
32530: CALL_OW 251
32534: PPUSH
32535: LD_VAR 0 17
32539: PUSH
32540: LD_INT 1
32542: ARRAY
32543: PPUSH
32544: CALL_OW 254
32548: PPUSH
32549: LD_INT 5
32551: PPUSH
32552: CALL_OW 273
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32561: LD_VAR 0 16
32565: PUSH
32566: LD_INT 1
32568: ARRAY
32569: PPUSH
32570: LD_VAR 0 16
32574: PUSH
32575: LD_INT 2
32577: ARRAY
32578: PPUSH
32579: CALL_OW 488
32583: IFFALSE 32614
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32585: LD_VAR 0 13
32589: PPUSH
32590: LD_VAR 0 16
32594: PUSH
32595: LD_INT 1
32597: ARRAY
32598: PPUSH
32599: LD_VAR 0 16
32603: PUSH
32604: LD_INT 2
32606: ARRAY
32607: PPUSH
32608: CALL_OW 111
// continue ;
32612: GO 32104
// end ; end ; r := GetDir ( tmp ) ;
32614: LD_ADDR_VAR 0 15
32618: PUSH
32619: LD_VAR 0 13
32623: PPUSH
32624: CALL_OW 254
32628: ST_TO_ADDR
// if r = 5 then
32629: LD_VAR 0 15
32633: PUSH
32634: LD_INT 5
32636: EQUAL
32637: IFFALSE 32647
// r := 0 ;
32639: LD_ADDR_VAR 0 15
32643: PUSH
32644: LD_INT 0
32646: ST_TO_ADDR
// for j = r to 5 do
32647: LD_ADDR_VAR 0 10
32651: PUSH
32652: DOUBLE
32653: LD_VAR 0 15
32657: DEC
32658: ST_TO_ADDR
32659: LD_INT 5
32661: PUSH
32662: FOR_TO
32663: IFFALSE 32777
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32665: LD_ADDR_VAR 0 11
32669: PUSH
32670: LD_VAR 0 13
32674: PPUSH
32675: CALL_OW 250
32679: PPUSH
32680: LD_VAR 0 10
32684: PPUSH
32685: LD_INT 2
32687: PPUSH
32688: CALL_OW 272
32692: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32693: LD_ADDR_VAR 0 12
32697: PUSH
32698: LD_VAR 0 13
32702: PPUSH
32703: CALL_OW 251
32707: PPUSH
32708: LD_VAR 0 10
32712: PPUSH
32713: LD_INT 2
32715: PPUSH
32716: CALL_OW 273
32720: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32721: LD_VAR 0 11
32725: PPUSH
32726: LD_VAR 0 12
32730: PPUSH
32731: CALL_OW 488
32735: PUSH
32736: LD_VAR 0 11
32740: PPUSH
32741: LD_VAR 0 12
32745: PPUSH
32746: CALL_OW 428
32750: NOT
32751: AND
32752: IFFALSE 32775
// begin ComMoveXY ( tmp , _x , _y ) ;
32754: LD_VAR 0 13
32758: PPUSH
32759: LD_VAR 0 11
32763: PPUSH
32764: LD_VAR 0 12
32768: PPUSH
32769: CALL_OW 111
// break ;
32773: GO 32777
// end ; end ;
32775: GO 32662
32777: POP
32778: POP
// end ; end ;
32779: GO 32104
32781: POP
32782: POP
// end ;
32783: LD_VAR 0 8
32787: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32788: LD_INT 0
32790: PPUSH
// result := true ;
32791: LD_ADDR_VAR 0 3
32795: PUSH
32796: LD_INT 1
32798: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32799: LD_VAR 0 2
32803: PUSH
32804: LD_INT 24
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32818
32810: LD_INT 33
32812: DOUBLE
32813: EQUAL
32814: IFTRUE 32818
32816: GO 32843
32818: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32819: LD_ADDR_VAR 0 3
32823: PUSH
32824: LD_INT 32
32826: PPUSH
32827: LD_VAR 0 1
32831: PPUSH
32832: CALL_OW 321
32836: PUSH
32837: LD_INT 2
32839: EQUAL
32840: ST_TO_ADDR
32841: GO 33159
32843: LD_INT 20
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 32876
32851: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32852: LD_ADDR_VAR 0 3
32856: PUSH
32857: LD_INT 6
32859: PPUSH
32860: LD_VAR 0 1
32864: PPUSH
32865: CALL_OW 321
32869: PUSH
32870: LD_INT 2
32872: EQUAL
32873: ST_TO_ADDR
32874: GO 33159
32876: LD_INT 22
32878: DOUBLE
32879: EQUAL
32880: IFTRUE 32890
32882: LD_INT 36
32884: DOUBLE
32885: EQUAL
32886: IFTRUE 32890
32888: GO 32915
32890: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: LD_INT 15
32898: PPUSH
32899: LD_VAR 0 1
32903: PPUSH
32904: CALL_OW 321
32908: PUSH
32909: LD_INT 2
32911: EQUAL
32912: ST_TO_ADDR
32913: GO 33159
32915: LD_INT 30
32917: DOUBLE
32918: EQUAL
32919: IFTRUE 32923
32921: GO 32948
32923: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32924: LD_ADDR_VAR 0 3
32928: PUSH
32929: LD_INT 20
32931: PPUSH
32932: LD_VAR 0 1
32936: PPUSH
32937: CALL_OW 321
32941: PUSH
32942: LD_INT 2
32944: EQUAL
32945: ST_TO_ADDR
32946: GO 33159
32948: LD_INT 28
32950: DOUBLE
32951: EQUAL
32952: IFTRUE 32962
32954: LD_INT 21
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32987
32962: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32963: LD_ADDR_VAR 0 3
32967: PUSH
32968: LD_INT 21
32970: PPUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 321
32980: PUSH
32981: LD_INT 2
32983: EQUAL
32984: ST_TO_ADDR
32985: GO 33159
32987: LD_INT 16
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33020
32995: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32996: LD_ADDR_VAR 0 3
33000: PUSH
33001: LD_INT 84
33003: PPUSH
33004: LD_VAR 0 1
33008: PPUSH
33009: CALL_OW 321
33013: PUSH
33014: LD_INT 2
33016: EQUAL
33017: ST_TO_ADDR
33018: GO 33159
33020: LD_INT 19
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33034
33026: LD_INT 23
33028: DOUBLE
33029: EQUAL
33030: IFTRUE 33034
33032: GO 33059
33034: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33035: LD_ADDR_VAR 0 3
33039: PUSH
33040: LD_INT 83
33042: PPUSH
33043: LD_VAR 0 1
33047: PPUSH
33048: CALL_OW 321
33052: PUSH
33053: LD_INT 2
33055: EQUAL
33056: ST_TO_ADDR
33057: GO 33159
33059: LD_INT 17
33061: DOUBLE
33062: EQUAL
33063: IFTRUE 33067
33065: GO 33092
33067: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33068: LD_ADDR_VAR 0 3
33072: PUSH
33073: LD_INT 39
33075: PPUSH
33076: LD_VAR 0 1
33080: PPUSH
33081: CALL_OW 321
33085: PUSH
33086: LD_INT 2
33088: EQUAL
33089: ST_TO_ADDR
33090: GO 33159
33092: LD_INT 18
33094: DOUBLE
33095: EQUAL
33096: IFTRUE 33100
33098: GO 33125
33100: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33101: LD_ADDR_VAR 0 3
33105: PUSH
33106: LD_INT 40
33108: PPUSH
33109: LD_VAR 0 1
33113: PPUSH
33114: CALL_OW 321
33118: PUSH
33119: LD_INT 2
33121: EQUAL
33122: ST_TO_ADDR
33123: GO 33159
33125: LD_INT 27
33127: DOUBLE
33128: EQUAL
33129: IFTRUE 33133
33131: GO 33158
33133: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33134: LD_ADDR_VAR 0 3
33138: PUSH
33139: LD_INT 35
33141: PPUSH
33142: LD_VAR 0 1
33146: PPUSH
33147: CALL_OW 321
33151: PUSH
33152: LD_INT 2
33154: EQUAL
33155: ST_TO_ADDR
33156: GO 33159
33158: POP
// end ;
33159: LD_VAR 0 3
33163: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33164: LD_INT 0
33166: PPUSH
33167: PPUSH
33168: PPUSH
33169: PPUSH
33170: PPUSH
33171: PPUSH
33172: PPUSH
33173: PPUSH
33174: PPUSH
33175: PPUSH
33176: PPUSH
// result := false ;
33177: LD_ADDR_VAR 0 6
33181: PUSH
33182: LD_INT 0
33184: ST_TO_ADDR
// if btype = b_depot then
33185: LD_VAR 0 2
33189: PUSH
33190: LD_INT 0
33192: EQUAL
33193: IFFALSE 33205
// begin result := true ;
33195: LD_ADDR_VAR 0 6
33199: PUSH
33200: LD_INT 1
33202: ST_TO_ADDR
// exit ;
33203: GO 34031
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33205: LD_VAR 0 1
33209: NOT
33210: PUSH
33211: LD_VAR 0 1
33215: PPUSH
33216: CALL_OW 266
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: IN
33231: NOT
33232: OR
33233: PUSH
33234: LD_VAR 0 2
33238: NOT
33239: OR
33240: PUSH
33241: LD_VAR 0 5
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: LD_INT 3
33257: PUSH
33258: LD_INT 4
33260: PUSH
33261: LD_INT 5
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: IN
33272: NOT
33273: OR
33274: PUSH
33275: LD_VAR 0 3
33279: PPUSH
33280: LD_VAR 0 4
33284: PPUSH
33285: CALL_OW 488
33289: NOT
33290: OR
33291: IFFALSE 33295
// exit ;
33293: GO 34031
// side := GetSide ( depot ) ;
33295: LD_ADDR_VAR 0 9
33299: PUSH
33300: LD_VAR 0 1
33304: PPUSH
33305: CALL_OW 255
33309: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33310: LD_VAR 0 9
33314: PPUSH
33315: LD_VAR 0 2
33319: PPUSH
33320: CALL 32788 0 2
33324: NOT
33325: IFFALSE 33329
// exit ;
33327: GO 34031
// pom := GetBase ( depot ) ;
33329: LD_ADDR_VAR 0 10
33333: PUSH
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 274
33343: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33344: LD_ADDR_VAR 0 11
33348: PUSH
33349: LD_VAR 0 2
33353: PPUSH
33354: LD_VAR 0 1
33358: PPUSH
33359: CALL_OW 248
33363: PPUSH
33364: CALL_OW 450
33368: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33369: LD_VAR 0 10
33373: PPUSH
33374: LD_INT 1
33376: PPUSH
33377: CALL_OW 275
33381: PUSH
33382: LD_VAR 0 11
33386: PUSH
33387: LD_INT 1
33389: ARRAY
33390: GREATEREQUAL
33391: PUSH
33392: LD_VAR 0 10
33396: PPUSH
33397: LD_INT 2
33399: PPUSH
33400: CALL_OW 275
33404: PUSH
33405: LD_VAR 0 11
33409: PUSH
33410: LD_INT 2
33412: ARRAY
33413: GREATEREQUAL
33414: AND
33415: PUSH
33416: LD_VAR 0 10
33420: PPUSH
33421: LD_INT 3
33423: PPUSH
33424: CALL_OW 275
33428: PUSH
33429: LD_VAR 0 11
33433: PUSH
33434: LD_INT 3
33436: ARRAY
33437: GREATEREQUAL
33438: AND
33439: NOT
33440: IFFALSE 33444
// exit ;
33442: GO 34031
// if GetBType ( depot ) = b_depot then
33444: LD_VAR 0 1
33448: PPUSH
33449: CALL_OW 266
33453: PUSH
33454: LD_INT 0
33456: EQUAL
33457: IFFALSE 33469
// dist := 28 else
33459: LD_ADDR_VAR 0 14
33463: PUSH
33464: LD_INT 28
33466: ST_TO_ADDR
33467: GO 33477
// dist := 36 ;
33469: LD_ADDR_VAR 0 14
33473: PUSH
33474: LD_INT 36
33476: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33477: LD_VAR 0 1
33481: PPUSH
33482: LD_VAR 0 3
33486: PPUSH
33487: LD_VAR 0 4
33491: PPUSH
33492: CALL_OW 297
33496: PUSH
33497: LD_VAR 0 14
33501: GREATER
33502: IFFALSE 33506
// exit ;
33504: GO 34031
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33506: LD_ADDR_VAR 0 12
33510: PUSH
33511: LD_VAR 0 2
33515: PPUSH
33516: LD_VAR 0 3
33520: PPUSH
33521: LD_VAR 0 4
33525: PPUSH
33526: LD_VAR 0 5
33530: PPUSH
33531: LD_VAR 0 1
33535: PPUSH
33536: CALL_OW 248
33540: PPUSH
33541: LD_INT 0
33543: PPUSH
33544: CALL 34036 0 6
33548: ST_TO_ADDR
// if not hexes then
33549: LD_VAR 0 12
33553: NOT
33554: IFFALSE 33558
// exit ;
33556: GO 34031
// hex := GetHexInfo ( x , y ) ;
33558: LD_ADDR_VAR 0 15
33562: PUSH
33563: LD_VAR 0 3
33567: PPUSH
33568: LD_VAR 0 4
33572: PPUSH
33573: CALL_OW 546
33577: ST_TO_ADDR
// if hex [ 1 ] then
33578: LD_VAR 0 15
33582: PUSH
33583: LD_INT 1
33585: ARRAY
33586: IFFALSE 33590
// exit ;
33588: GO 34031
// height := hex [ 2 ] ;
33590: LD_ADDR_VAR 0 13
33594: PUSH
33595: LD_VAR 0 15
33599: PUSH
33600: LD_INT 2
33602: ARRAY
33603: ST_TO_ADDR
// for i = 1 to hexes do
33604: LD_ADDR_VAR 0 7
33608: PUSH
33609: DOUBLE
33610: LD_INT 1
33612: DEC
33613: ST_TO_ADDR
33614: LD_VAR 0 12
33618: PUSH
33619: FOR_TO
33620: IFFALSE 33950
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33622: LD_VAR 0 12
33626: PUSH
33627: LD_VAR 0 7
33631: ARRAY
33632: PUSH
33633: LD_INT 1
33635: ARRAY
33636: PPUSH
33637: LD_VAR 0 12
33641: PUSH
33642: LD_VAR 0 7
33646: ARRAY
33647: PUSH
33648: LD_INT 2
33650: ARRAY
33651: PPUSH
33652: CALL_OW 488
33656: NOT
33657: PUSH
33658: LD_VAR 0 12
33662: PUSH
33663: LD_VAR 0 7
33667: ARRAY
33668: PUSH
33669: LD_INT 1
33671: ARRAY
33672: PPUSH
33673: LD_VAR 0 12
33677: PUSH
33678: LD_VAR 0 7
33682: ARRAY
33683: PUSH
33684: LD_INT 2
33686: ARRAY
33687: PPUSH
33688: CALL_OW 428
33692: PUSH
33693: LD_INT 0
33695: GREATER
33696: OR
33697: PUSH
33698: LD_VAR 0 12
33702: PUSH
33703: LD_VAR 0 7
33707: ARRAY
33708: PUSH
33709: LD_INT 1
33711: ARRAY
33712: PPUSH
33713: LD_VAR 0 12
33717: PUSH
33718: LD_VAR 0 7
33722: ARRAY
33723: PUSH
33724: LD_INT 2
33726: ARRAY
33727: PPUSH
33728: CALL_OW 351
33732: OR
33733: IFFALSE 33739
// exit ;
33735: POP
33736: POP
33737: GO 34031
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33739: LD_ADDR_VAR 0 8
33743: PUSH
33744: LD_VAR 0 12
33748: PUSH
33749: LD_VAR 0 7
33753: ARRAY
33754: PUSH
33755: LD_INT 1
33757: ARRAY
33758: PPUSH
33759: LD_VAR 0 12
33763: PUSH
33764: LD_VAR 0 7
33768: ARRAY
33769: PUSH
33770: LD_INT 2
33772: ARRAY
33773: PPUSH
33774: CALL_OW 546
33778: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33779: LD_VAR 0 8
33783: PUSH
33784: LD_INT 1
33786: ARRAY
33787: PUSH
33788: LD_VAR 0 8
33792: PUSH
33793: LD_INT 2
33795: ARRAY
33796: PUSH
33797: LD_VAR 0 13
33801: PUSH
33802: LD_INT 2
33804: PLUS
33805: GREATER
33806: OR
33807: PUSH
33808: LD_VAR 0 8
33812: PUSH
33813: LD_INT 2
33815: ARRAY
33816: PUSH
33817: LD_VAR 0 13
33821: PUSH
33822: LD_INT 2
33824: MINUS
33825: LESS
33826: OR
33827: PUSH
33828: LD_VAR 0 8
33832: PUSH
33833: LD_INT 3
33835: ARRAY
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: LD_INT 8
33842: PUSH
33843: LD_INT 9
33845: PUSH
33846: LD_INT 10
33848: PUSH
33849: LD_INT 11
33851: PUSH
33852: LD_INT 12
33854: PUSH
33855: LD_INT 13
33857: PUSH
33858: LD_INT 16
33860: PUSH
33861: LD_INT 17
33863: PUSH
33864: LD_INT 18
33866: PUSH
33867: LD_INT 19
33869: PUSH
33870: LD_INT 20
33872: PUSH
33873: LD_INT 21
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: IN
33891: NOT
33892: OR
33893: PUSH
33894: LD_VAR 0 8
33898: PUSH
33899: LD_INT 5
33901: ARRAY
33902: NOT
33903: OR
33904: PUSH
33905: LD_VAR 0 8
33909: PUSH
33910: LD_INT 6
33912: ARRAY
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: LD_INT 7
33922: PUSH
33923: LD_INT 9
33925: PUSH
33926: LD_INT 10
33928: PUSH
33929: LD_INT 11
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: IN
33940: NOT
33941: OR
33942: IFFALSE 33948
// exit ;
33944: POP
33945: POP
33946: GO 34031
// end ;
33948: GO 33619
33950: POP
33951: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33952: LD_VAR 0 9
33956: PPUSH
33957: LD_VAR 0 3
33961: PPUSH
33962: LD_VAR 0 4
33966: PPUSH
33967: LD_INT 20
33969: PPUSH
33970: CALL 25954 0 4
33974: PUSH
33975: LD_INT 4
33977: ARRAY
33978: IFFALSE 33982
// exit ;
33980: GO 34031
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33982: LD_VAR 0 2
33986: PUSH
33987: LD_INT 29
33989: PUSH
33990: LD_INT 30
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: IN
33997: PUSH
33998: LD_VAR 0 3
34002: PPUSH
34003: LD_VAR 0 4
34007: PPUSH
34008: LD_VAR 0 9
34012: PPUSH
34013: CALL_OW 440
34017: NOT
34018: AND
34019: IFFALSE 34023
// exit ;
34021: GO 34031
// result := true ;
34023: LD_ADDR_VAR 0 6
34027: PUSH
34028: LD_INT 1
34030: ST_TO_ADDR
// end ;
34031: LD_VAR 0 6
34035: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34036: LD_INT 0
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
34042: PPUSH
34043: PPUSH
34044: PPUSH
34045: PPUSH
34046: PPUSH
34047: PPUSH
34048: PPUSH
34049: PPUSH
34050: PPUSH
34051: PPUSH
34052: PPUSH
34053: PPUSH
34054: PPUSH
34055: PPUSH
34056: PPUSH
34057: PPUSH
34058: PPUSH
34059: PPUSH
34060: PPUSH
34061: PPUSH
34062: PPUSH
34063: PPUSH
34064: PPUSH
34065: PPUSH
34066: PPUSH
34067: PPUSH
34068: PPUSH
34069: PPUSH
34070: PPUSH
34071: PPUSH
34072: PPUSH
34073: PPUSH
34074: PPUSH
34075: PPUSH
34076: PPUSH
34077: PPUSH
34078: PPUSH
34079: PPUSH
34080: PPUSH
34081: PPUSH
34082: PPUSH
34083: PPUSH
34084: PPUSH
34085: PPUSH
34086: PPUSH
34087: PPUSH
34088: PPUSH
34089: PPUSH
34090: PPUSH
34091: PPUSH
34092: PPUSH
34093: PPUSH
34094: PPUSH
34095: PPUSH
// result = [ ] ;
34096: LD_ADDR_VAR 0 7
34100: PUSH
34101: EMPTY
34102: ST_TO_ADDR
// temp_list = [ ] ;
34103: LD_ADDR_VAR 0 9
34107: PUSH
34108: EMPTY
34109: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34110: LD_VAR 0 4
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: LD_INT 3
34126: PUSH
34127: LD_INT 4
34129: PUSH
34130: LD_INT 5
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: IN
34141: NOT
34142: PUSH
34143: LD_VAR 0 1
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: IN
34158: PUSH
34159: LD_VAR 0 5
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: IN
34178: NOT
34179: AND
34180: OR
34181: IFFALSE 34185
// exit ;
34183: GO 52576
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34185: LD_VAR 0 1
34189: PUSH
34190: LD_INT 6
34192: PUSH
34193: LD_INT 7
34195: PUSH
34196: LD_INT 8
34198: PUSH
34199: LD_INT 13
34201: PUSH
34202: LD_INT 12
34204: PUSH
34205: LD_INT 15
34207: PUSH
34208: LD_INT 11
34210: PUSH
34211: LD_INT 14
34213: PUSH
34214: LD_INT 10
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: IN
34228: IFFALSE 34238
// btype = b_lab ;
34230: LD_ADDR_VAR 0 1
34234: PUSH
34235: LD_INT 6
34237: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34238: LD_VAR 0 6
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: LD_INT 2
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: LIST
34256: IN
34257: NOT
34258: PUSH
34259: LD_VAR 0 1
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 2
34272: PUSH
34273: LD_INT 3
34275: PUSH
34276: LD_INT 6
34278: PUSH
34279: LD_INT 36
34281: PUSH
34282: LD_INT 4
34284: PUSH
34285: LD_INT 5
34287: PUSH
34288: LD_INT 31
34290: PUSH
34291: LD_INT 32
34293: PUSH
34294: LD_INT 33
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: IN
34310: NOT
34311: PUSH
34312: LD_VAR 0 6
34316: PUSH
34317: LD_INT 1
34319: EQUAL
34320: AND
34321: OR
34322: PUSH
34323: LD_VAR 0 1
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: LD_INT 3
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: IN
34338: NOT
34339: PUSH
34340: LD_VAR 0 6
34344: PUSH
34345: LD_INT 2
34347: EQUAL
34348: AND
34349: OR
34350: IFFALSE 34360
// mode = 0 ;
34352: LD_ADDR_VAR 0 6
34356: PUSH
34357: LD_INT 0
34359: ST_TO_ADDR
// case mode of 0 :
34360: LD_VAR 0 6
34364: PUSH
34365: LD_INT 0
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34373
34371: GO 45826
34373: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34374: LD_ADDR_VAR 0 11
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: LD_INT 2
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: LD_INT 2
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: LD_INT 2
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 2
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34567: LD_ADDR_VAR 0 12
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: LD_INT 1
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 2
34690: NEG
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 3
34724: NEG
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 3
34735: NEG
34736: PUSH
34737: LD_INT 1
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34763: LD_ADDR_VAR 0 13
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: NEG
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 1
34844: NEG
34845: PUSH
34846: LD_INT 2
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 2
34910: NEG
34911: PUSH
34912: LD_INT 3
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 3
34922: NEG
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 3
34934: NEG
34935: PUSH
34936: LD_INT 3
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34962: LD_ADDR_VAR 0 14
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: LD_INT 2
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: LD_INT 1
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: LD_INT 3
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 3
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 2
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35158: LD_ADDR_VAR 0 15
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: PUSH
35229: LD_INT 1
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: NEG
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35351: LD_ADDR_VAR 0 16
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 2
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: LD_INT 2
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 3
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 3
35508: PUSH
35509: LD_INT 3
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: LD_INT 3
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35544: LD_ADDR_VAR 0 17
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: NEG
35744: PUSH
35745: LD_INT 2
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35774: LD_ADDR_VAR 0 18
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: LD_INT 2
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 2
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: NEG
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 2
35973: NEG
35974: PUSH
35975: LD_INT 2
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36004: LD_ADDR_VAR 0 19
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 2
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: NEG
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: NEG
36204: PUSH
36205: LD_INT 2
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36234: LD_ADDR_VAR 0 20
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: LD_INT 2
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 2
36410: NEG
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: NEG
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: LD_INT 2
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36464: LD_ADDR_VAR 0 21
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 2
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 2
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 2
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 2
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36694: LD_ADDR_VAR 0 22
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 2
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 2
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: NEG
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: NEG
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: NEG
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: LD_INT 2
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36924: LD_ADDR_VAR 0 23
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: LD_INT 2
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 2
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 2
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 2
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 1
37089: NEG
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: LD_INT 2
37127: NEG
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 2
37135: NEG
37136: PUSH
37137: LD_INT 3
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: LD_INT 3
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 2
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37204: LD_ADDR_VAR 0 24
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 2
37403: NEG
37404: PUSH
37405: LD_INT 2
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 2
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 3
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 3
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37480: LD_ADDR_VAR 0 25
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 2
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: LD_INT 2
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: NEG
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: NEG
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 3
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: LD_INT 3
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 3
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37754: LD_ADDR_VAR 0 26
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: LD_INT 2
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 2
37941: NEG
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 2
37953: NEG
37954: PUSH
37955: LD_INT 2
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: LD_INT 3
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38030: LD_ADDR_VAR 0 27
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 2
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 2
38206: NEG
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 2
38229: NEG
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 3
38263: NEG
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: NEG
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38310: LD_ADDR_VAR 0 28
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 2
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: LD_INT 2
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 2
38497: NEG
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: NEG
38510: PUSH
38511: LD_INT 2
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: NEG
38522: PUSH
38523: LD_INT 3
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 3
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 3
38545: NEG
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 3
38557: NEG
38558: PUSH
38559: LD_INT 2
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38592: LD_ADDR_VAR 0 29
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: NEG
38771: PUSH
38772: LD_INT 2
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: LD_INT 3
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 2
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 3
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: LD_INT 3
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 3
38836: NEG
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38871: LD_ADDR_VAR 0 30
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: LD_INT 3
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 3
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: LD_INT 3
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 3
39114: NEG
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39149: LD_ADDR_VAR 0 31
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 2
39326: NEG
39327: PUSH
39328: LD_INT 2
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: NEG
39339: PUSH
39340: LD_INT 3
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 3
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 3
39392: NEG
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39427: LD_ADDR_VAR 0 32
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: LD_INT 2
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 3
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 3
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: LD_INT 1
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 3
39670: NEG
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39705: LD_ADDR_VAR 0 33
39709: PUSH
39710: LD_INT 0
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 2
39871: NEG
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: LD_INT 2
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: NEG
39896: PUSH
39897: LD_INT 3
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 3
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 3
39949: NEG
39950: PUSH
39951: LD_INT 2
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39984: LD_ADDR_VAR 0 34
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 2
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 3
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 3
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 3
40229: NEG
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40264: LD_ADDR_VAR 0 35
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 2
40355: NEG
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40376: LD_ADDR_VAR 0 36
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40488: LD_ADDR_VAR 0 37
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40600: LD_ADDR_VAR 0 38
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40712: LD_ADDR_VAR 0 39
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40824: LD_ADDR_VAR 0 40
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40936: LD_ADDR_VAR 0 41
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 3
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 3
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 3
41179: PUSH
41180: LD_INT 3
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 3
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 3
41210: NEG
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 3
41221: NEG
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 3
41233: NEG
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 3
41245: NEG
41246: PUSH
41247: LD_INT 3
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41286: LD_ADDR_VAR 0 42
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: LD_INT 2
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: LD_INT 3
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 3
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 3
41532: PUSH
41533: LD_INT 3
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 3
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 3
41583: NEG
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 3
41595: NEG
41596: PUSH
41597: LD_INT 3
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41636: LD_ADDR_VAR 0 43
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 2
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 2
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 3
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 3
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 3
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 3
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 3
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 3
41932: NEG
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 3
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41984: LD_ADDR_VAR 0 44
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: LD_INT 3
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 3
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: LD_INT 3
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 3
42269: NEG
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 3
42281: NEG
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 3
42293: NEG
42294: PUSH
42295: LD_INT 3
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42334: LD_ADDR_VAR 0 45
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 0
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 3
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: LD_INT 3
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 3
42570: PUSH
42571: LD_INT 2
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: PUSH
42581: LD_INT 3
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 3
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 3
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: LD_INT 2
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 3
42643: NEG
42644: PUSH
42645: LD_INT 3
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42684: LD_ADDR_VAR 0 46
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 3
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 3
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 3
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 3
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 3
42980: NEG
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 3
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43032: LD_ADDR_VAR 0 47
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43183: LD_ADDR_VAR 0 48
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43330: LD_ADDR_VAR 0 49
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43474: LD_ADDR_VAR 0 50
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43618: LD_ADDR_VAR 0 51
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 2
43730: NEG
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43765: LD_ADDR_VAR 0 52
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 2
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43916: LD_ADDR_VAR 0 53
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44146: LD_ADDR_VAR 0 54
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: NEG
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44376: LD_ADDR_VAR 0 55
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44606: LD_ADDR_VAR 0 56
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44836: LD_ADDR_VAR 0 57
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45066: LD_ADDR_VAR 0 58
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45296: LD_ADDR_VAR 0 59
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45384: LD_ADDR_VAR 0 60
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45472: LD_ADDR_VAR 0 61
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45560: LD_ADDR_VAR 0 62
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45648: LD_ADDR_VAR 0 63
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45736: LD_ADDR_VAR 0 64
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: ST_TO_ADDR
// end ; 1 :
45824: GO 51721
45826: LD_INT 1
45828: DOUBLE
45829: EQUAL
45830: IFTRUE 45834
45832: GO 48457
45834: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45835: LD_ADDR_VAR 0 11
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 3
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45879: LD_ADDR_VAR 0 12
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45920: LD_ADDR_VAR 0 13
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 3
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45960: LD_ADDR_VAR 0 14
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 3
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: LIST
46000: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46001: LD_ADDR_VAR 0 15
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 3
46019: NEG
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46045: LD_ADDR_VAR 0 16
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 3
46076: NEG
46077: PUSH
46078: LD_INT 3
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46091: LD_ADDR_VAR 0 17
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: LIST
46134: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46135: LD_ADDR_VAR 0 18
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 3
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 3
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46176: LD_ADDR_VAR 0 19
46180: PUSH
46181: LD_INT 3
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 3
46193: PUSH
46194: LD_INT 3
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46216: LD_ADDR_VAR 0 20
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 3
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46257: LD_ADDR_VAR 0 21
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 3
46275: NEG
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: LIST
46300: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46301: LD_ADDR_VAR 0 22
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 3
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 3
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 3
46332: NEG
46333: PUSH
46334: LD_INT 3
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46347: LD_ADDR_VAR 0 23
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 3
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 3
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46391: LD_ADDR_VAR 0 24
46395: PUSH
46396: LD_INT 3
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 4
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46432: LD_ADDR_VAR 0 25
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 4
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: LD_INT 4
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46472: LD_ADDR_VAR 0 26
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: LD_INT 4
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 3
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46513: LD_ADDR_VAR 0 27
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 4
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46557: LD_ADDR_VAR 0 28
46561: PUSH
46562: LD_INT 3
46564: NEG
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: LD_INT 4
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 4
46588: NEG
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: LIST
46602: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46603: LD_ADDR_VAR 0 29
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 3
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 3
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 4
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 4
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 5
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 5
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 4
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 6
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 6
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 5
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46758: LD_ADDR_VAR 0 30
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 3
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 3
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 3
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 4
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 4
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 4
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 5
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 5
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 5
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 6
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 6
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46901: LD_ADDR_VAR 0 31
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 3
46918: PUSH
46919: LD_INT 3
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: LD_INT 3
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 4
46938: PUSH
46939: LD_INT 3
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 4
46948: PUSH
46949: LD_INT 4
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: LD_INT 4
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 5
46968: PUSH
46969: LD_INT 4
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 5
46978: PUSH
46979: LD_INT 5
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 4
46988: PUSH
46989: LD_INT 5
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 6
46998: PUSH
46999: LD_INT 5
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 6
47008: PUSH
47009: LD_INT 6
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 5
47018: PUSH
47019: LD_INT 6
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47040: LD_ADDR_VAR 0 32
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 4
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 4
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 5
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 5
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 4
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 6
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 6
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 5
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47183: LD_ADDR_VAR 0 33
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 3
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 4
47235: NEG
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 4
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 4
47258: NEG
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 5
47269: NEG
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 5
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 5
47292: NEG
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 6
47303: NEG
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 6
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47338: LD_ADDR_VAR 0 34
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 3
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 3
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: NEG
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 3
47381: NEG
47382: PUSH
47383: LD_INT 4
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 4
47393: NEG
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 4
47405: NEG
47406: PUSH
47407: LD_INT 4
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 4
47417: NEG
47418: PUSH
47419: LD_INT 5
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 5
47429: NEG
47430: PUSH
47431: LD_INT 4
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 5
47441: NEG
47442: PUSH
47443: LD_INT 5
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 5
47453: NEG
47454: PUSH
47455: LD_INT 6
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 6
47465: NEG
47466: PUSH
47467: LD_INT 5
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 6
47477: NEG
47478: PUSH
47479: LD_INT 6
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47501: LD_ADDR_VAR 0 41
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47545: LD_ADDR_VAR 0 42
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47586: LD_ADDR_VAR 0 43
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 3
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47626: LD_ADDR_VAR 0 44
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47667: LD_ADDR_VAR 0 45
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47711: LD_ADDR_VAR 0 46
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 3
47742: NEG
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: LIST
47756: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47757: LD_ADDR_VAR 0 47
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 3
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47790: LD_ADDR_VAR 0 48
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47821: LD_ADDR_VAR 0 49
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 3
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47850: LD_ADDR_VAR 0 50
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47879: LD_ADDR_VAR 0 51
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: NEG
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47910: LD_ADDR_VAR 0 52
47914: PUSH
47915: LD_INT 3
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47943: LD_ADDR_VAR 0 53
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: LD_INT 3
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47987: LD_ADDR_VAR 0 54
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 3
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48028: LD_ADDR_VAR 0 55
48032: PUSH
48033: LD_INT 3
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: LD_INT 3
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 3
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48068: LD_ADDR_VAR 0 56
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 3
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: LIST
48108: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48109: LD_ADDR_VAR 0 57
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 3
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48153: LD_ADDR_VAR 0 58
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: NEG
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 3
48184: NEG
48185: PUSH
48186: LD_INT 3
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48199: LD_ADDR_VAR 0 59
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48243: LD_ADDR_VAR 0 60
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48284: LD_ADDR_VAR 0 61
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48324: LD_ADDR_VAR 0 62
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48365: LD_ADDR_VAR 0 63
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: LIST
48408: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48409: LD_ADDR_VAR 0 64
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: LIST
48454: ST_TO_ADDR
// end ; 2 :
48455: GO 51721
48457: LD_INT 2
48459: DOUBLE
48460: EQUAL
48461: IFTRUE 48465
48463: GO 51720
48465: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48466: LD_ADDR_VAR 0 29
48470: PUSH
48471: LD_INT 4
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 4
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 5
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 5
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 4
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 3
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 5
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 3
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 4
48586: PUSH
48587: LD_INT 3
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 4
48596: PUSH
48597: LD_INT 4
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 3
48606: PUSH
48607: LD_INT 4
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: LD_INT 3
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 4
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: LD_INT 4
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 4
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 3
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: LD_INT 4
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 5
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 5
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 4
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 5
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: NEG
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 3
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 4
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 4
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 4
48828: NEG
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 4
48851: NEG
48852: PUSH
48853: LD_INT 4
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 4
48863: NEG
48864: PUSH
48865: LD_INT 5
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 3
48875: NEG
48876: PUSH
48877: LD_INT 4
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 3
48887: NEG
48888: PUSH
48889: LD_INT 3
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 4
48899: NEG
48900: PUSH
48901: LD_INT 3
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 5
48911: NEG
48912: PUSH
48913: LD_INT 4
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 5
48923: NEG
48924: PUSH
48925: LD_INT 5
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 5
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 5
48947: NEG
48948: PUSH
48949: LD_INT 3
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49004: LD_ADDR_VAR 0 30
49008: PUSH
49009: LD_INT 4
49011: PUSH
49012: LD_INT 4
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 4
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 5
49031: PUSH
49032: LD_INT 4
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 5
49041: PUSH
49042: LD_INT 5
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 4
49051: PUSH
49052: LD_INT 5
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: PUSH
49062: LD_INT 4
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 5
49081: PUSH
49082: LD_INT 3
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: LD_INT 5
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 3
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: LD_INT 4
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 4
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 3
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: LD_INT 4
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 4
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 4
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 3
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 4
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 5
49250: NEG
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 5
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 5
49273: NEG
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 3
49285: NEG
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 3
49296: NEG
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: NEG
49309: PUSH
49310: LD_INT 4
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: LD_INT 3
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 3
49344: NEG
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 4
49356: NEG
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 4
49368: NEG
49369: PUSH
49370: LD_INT 4
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 4
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 4
49392: NEG
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 4
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 5
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: LD_INT 4
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 3
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 4
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 5
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: LD_INT 5
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49551: LD_ADDR_VAR 0 31
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 4
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 3
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 4
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 5
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 5
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 4
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 3
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 5
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 3
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 4
49707: NEG
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 4
49718: NEG
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 4
49730: NEG
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 2
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 4
49753: NEG
49754: PUSH
49755: LD_INT 4
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 4
49765: NEG
49766: PUSH
49767: LD_INT 5
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: NEG
49778: PUSH
49779: LD_INT 4
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 4
49801: NEG
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 5
49813: NEG
49814: PUSH
49815: LD_INT 4
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 5
49825: NEG
49826: PUSH
49827: LD_INT 5
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: NEG
49838: PUSH
49839: LD_INT 5
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 5
49849: NEG
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 4
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 4
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: LD_INT 4
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 4
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 4
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 5
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 5
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 4
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 5
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50101: LD_ADDR_VAR 0 32
50105: PUSH
50106: LD_INT 4
50108: NEG
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 4
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 4
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 5
50164: NEG
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 5
50175: NEG
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 5
50187: NEG
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 3
50210: NEG
50211: PUSH
50212: LD_INT 3
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: NEG
50223: PUSH
50224: LD_INT 4
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 3
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 3
50258: NEG
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 4
50270: NEG
50271: PUSH
50272: LD_INT 3
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 4
50282: NEG
50283: PUSH
50284: LD_INT 4
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: LD_INT 4
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 4
50306: NEG
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: LD_INT 4
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 5
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 4
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 3
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 4
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 5
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: LD_INT 5
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 3
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 3
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 4
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 4
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 4
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 4
50513: PUSH
50514: LD_INT 4
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 4
50523: PUSH
50524: LD_INT 3
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 5
50533: PUSH
50534: LD_INT 4
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 5
50543: PUSH
50544: LD_INT 5
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 4
50553: PUSH
50554: LD_INT 5
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: PUSH
50564: LD_INT 4
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 5
50583: PUSH
50584: LD_INT 3
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 3
50593: PUSH
50594: LD_INT 5
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50648: LD_ADDR_VAR 0 33
50652: PUSH
50653: LD_INT 4
50655: NEG
50656: PUSH
50657: LD_INT 4
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 4
50667: NEG
50668: PUSH
50669: LD_INT 5
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 4
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 3
50691: NEG
50692: PUSH
50693: LD_INT 3
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 4
50703: NEG
50704: PUSH
50705: LD_INT 3
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 5
50715: NEG
50716: PUSH
50717: LD_INT 4
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 5
50727: NEG
50728: PUSH
50729: LD_INT 5
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: NEG
50740: PUSH
50741: LD_INT 5
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 5
50751: NEG
50752: PUSH
50753: LD_INT 3
50755: NEG
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 4
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 4
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: LD_INT 4
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 4
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 4
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 5
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 5
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 4
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 5
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 3
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 4
50978: PUSH
50979: LD_INT 3
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 4
50988: PUSH
50989: LD_INT 4
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: LD_INT 4
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 4
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 4
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 4
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: LD_INT 3
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 4
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 5
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 5
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 4
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 5
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51186: LD_ADDR_VAR 0 34
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 4
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 5
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 4
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 3
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 3
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 4
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 5
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: LD_INT 5
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 3
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 4
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 4
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 3
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 4
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 4
51388: PUSH
51389: LD_INT 4
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 4
51398: PUSH
51399: LD_INT 3
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 5
51408: PUSH
51409: LD_INT 4
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 5
51418: PUSH
51419: LD_INT 5
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 4
51428: PUSH
51429: LD_INT 5
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: LD_INT 4
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: LD_INT 3
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 5
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 3
51468: PUSH
51469: LD_INT 5
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 4
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 4
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 3
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: LD_INT 4
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 4
51571: NEG
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 4
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 3
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 4
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 5
51627: NEG
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 5
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 5
51650: NEG
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: ST_TO_ADDR
// end ; end ;
51718: GO 51721
51720: POP
// case btype of b_depot , b_warehouse :
51721: LD_VAR 0 1
51725: PUSH
51726: LD_INT 0
51728: DOUBLE
51729: EQUAL
51730: IFTRUE 51740
51732: LD_INT 1
51734: DOUBLE
51735: EQUAL
51736: IFTRUE 51740
51738: GO 51941
51740: POP
// case nation of nation_american :
51741: LD_VAR 0 5
51745: PUSH
51746: LD_INT 1
51748: DOUBLE
51749: EQUAL
51750: IFTRUE 51754
51752: GO 51810
51754: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51755: LD_ADDR_VAR 0 9
51759: PUSH
51760: LD_VAR 0 11
51764: PUSH
51765: LD_VAR 0 12
51769: PUSH
51770: LD_VAR 0 13
51774: PUSH
51775: LD_VAR 0 14
51779: PUSH
51780: LD_VAR 0 15
51784: PUSH
51785: LD_VAR 0 16
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: PUSH
51798: LD_VAR 0 4
51802: PUSH
51803: LD_INT 1
51805: PLUS
51806: ARRAY
51807: ST_TO_ADDR
51808: GO 51939
51810: LD_INT 2
51812: DOUBLE
51813: EQUAL
51814: IFTRUE 51818
51816: GO 51874
51818: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51819: LD_ADDR_VAR 0 9
51823: PUSH
51824: LD_VAR 0 17
51828: PUSH
51829: LD_VAR 0 18
51833: PUSH
51834: LD_VAR 0 19
51838: PUSH
51839: LD_VAR 0 20
51843: PUSH
51844: LD_VAR 0 21
51848: PUSH
51849: LD_VAR 0 22
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: PUSH
51862: LD_VAR 0 4
51866: PUSH
51867: LD_INT 1
51869: PLUS
51870: ARRAY
51871: ST_TO_ADDR
51872: GO 51939
51874: LD_INT 3
51876: DOUBLE
51877: EQUAL
51878: IFTRUE 51882
51880: GO 51938
51882: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51883: LD_ADDR_VAR 0 9
51887: PUSH
51888: LD_VAR 0 23
51892: PUSH
51893: LD_VAR 0 24
51897: PUSH
51898: LD_VAR 0 25
51902: PUSH
51903: LD_VAR 0 26
51907: PUSH
51908: LD_VAR 0 27
51912: PUSH
51913: LD_VAR 0 28
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: PUSH
51926: LD_VAR 0 4
51930: PUSH
51931: LD_INT 1
51933: PLUS
51934: ARRAY
51935: ST_TO_ADDR
51936: GO 51939
51938: POP
51939: GO 52494
51941: LD_INT 2
51943: DOUBLE
51944: EQUAL
51945: IFTRUE 51955
51947: LD_INT 3
51949: DOUBLE
51950: EQUAL
51951: IFTRUE 51955
51953: GO 52011
51955: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51956: LD_ADDR_VAR 0 9
51960: PUSH
51961: LD_VAR 0 29
51965: PUSH
51966: LD_VAR 0 30
51970: PUSH
51971: LD_VAR 0 31
51975: PUSH
51976: LD_VAR 0 32
51980: PUSH
51981: LD_VAR 0 33
51985: PUSH
51986: LD_VAR 0 34
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: PUSH
51999: LD_VAR 0 4
52003: PUSH
52004: LD_INT 1
52006: PLUS
52007: ARRAY
52008: ST_TO_ADDR
52009: GO 52494
52011: LD_INT 16
52013: DOUBLE
52014: EQUAL
52015: IFTRUE 52073
52017: LD_INT 17
52019: DOUBLE
52020: EQUAL
52021: IFTRUE 52073
52023: LD_INT 18
52025: DOUBLE
52026: EQUAL
52027: IFTRUE 52073
52029: LD_INT 19
52031: DOUBLE
52032: EQUAL
52033: IFTRUE 52073
52035: LD_INT 22
52037: DOUBLE
52038: EQUAL
52039: IFTRUE 52073
52041: LD_INT 20
52043: DOUBLE
52044: EQUAL
52045: IFTRUE 52073
52047: LD_INT 21
52049: DOUBLE
52050: EQUAL
52051: IFTRUE 52073
52053: LD_INT 23
52055: DOUBLE
52056: EQUAL
52057: IFTRUE 52073
52059: LD_INT 24
52061: DOUBLE
52062: EQUAL
52063: IFTRUE 52073
52065: LD_INT 25
52067: DOUBLE
52068: EQUAL
52069: IFTRUE 52073
52071: GO 52129
52073: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52074: LD_ADDR_VAR 0 9
52078: PUSH
52079: LD_VAR 0 35
52083: PUSH
52084: LD_VAR 0 36
52088: PUSH
52089: LD_VAR 0 37
52093: PUSH
52094: LD_VAR 0 38
52098: PUSH
52099: LD_VAR 0 39
52103: PUSH
52104: LD_VAR 0 40
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: PUSH
52117: LD_VAR 0 4
52121: PUSH
52122: LD_INT 1
52124: PLUS
52125: ARRAY
52126: ST_TO_ADDR
52127: GO 52494
52129: LD_INT 6
52131: DOUBLE
52132: EQUAL
52133: IFTRUE 52185
52135: LD_INT 7
52137: DOUBLE
52138: EQUAL
52139: IFTRUE 52185
52141: LD_INT 8
52143: DOUBLE
52144: EQUAL
52145: IFTRUE 52185
52147: LD_INT 13
52149: DOUBLE
52150: EQUAL
52151: IFTRUE 52185
52153: LD_INT 12
52155: DOUBLE
52156: EQUAL
52157: IFTRUE 52185
52159: LD_INT 15
52161: DOUBLE
52162: EQUAL
52163: IFTRUE 52185
52165: LD_INT 11
52167: DOUBLE
52168: EQUAL
52169: IFTRUE 52185
52171: LD_INT 14
52173: DOUBLE
52174: EQUAL
52175: IFTRUE 52185
52177: LD_INT 10
52179: DOUBLE
52180: EQUAL
52181: IFTRUE 52185
52183: GO 52241
52185: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52186: LD_ADDR_VAR 0 9
52190: PUSH
52191: LD_VAR 0 41
52195: PUSH
52196: LD_VAR 0 42
52200: PUSH
52201: LD_VAR 0 43
52205: PUSH
52206: LD_VAR 0 44
52210: PUSH
52211: LD_VAR 0 45
52215: PUSH
52216: LD_VAR 0 46
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: PUSH
52229: LD_VAR 0 4
52233: PUSH
52234: LD_INT 1
52236: PLUS
52237: ARRAY
52238: ST_TO_ADDR
52239: GO 52494
52241: LD_INT 36
52243: DOUBLE
52244: EQUAL
52245: IFTRUE 52249
52247: GO 52305
52249: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52250: LD_ADDR_VAR 0 9
52254: PUSH
52255: LD_VAR 0 47
52259: PUSH
52260: LD_VAR 0 48
52264: PUSH
52265: LD_VAR 0 49
52269: PUSH
52270: LD_VAR 0 50
52274: PUSH
52275: LD_VAR 0 51
52279: PUSH
52280: LD_VAR 0 52
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: PUSH
52293: LD_VAR 0 4
52297: PUSH
52298: LD_INT 1
52300: PLUS
52301: ARRAY
52302: ST_TO_ADDR
52303: GO 52494
52305: LD_INT 4
52307: DOUBLE
52308: EQUAL
52309: IFTRUE 52331
52311: LD_INT 5
52313: DOUBLE
52314: EQUAL
52315: IFTRUE 52331
52317: LD_INT 34
52319: DOUBLE
52320: EQUAL
52321: IFTRUE 52331
52323: LD_INT 37
52325: DOUBLE
52326: EQUAL
52327: IFTRUE 52331
52329: GO 52387
52331: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52332: LD_ADDR_VAR 0 9
52336: PUSH
52337: LD_VAR 0 53
52341: PUSH
52342: LD_VAR 0 54
52346: PUSH
52347: LD_VAR 0 55
52351: PUSH
52352: LD_VAR 0 56
52356: PUSH
52357: LD_VAR 0 57
52361: PUSH
52362: LD_VAR 0 58
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: PUSH
52375: LD_VAR 0 4
52379: PUSH
52380: LD_INT 1
52382: PLUS
52383: ARRAY
52384: ST_TO_ADDR
52385: GO 52494
52387: LD_INT 31
52389: DOUBLE
52390: EQUAL
52391: IFTRUE 52437
52393: LD_INT 32
52395: DOUBLE
52396: EQUAL
52397: IFTRUE 52437
52399: LD_INT 33
52401: DOUBLE
52402: EQUAL
52403: IFTRUE 52437
52405: LD_INT 27
52407: DOUBLE
52408: EQUAL
52409: IFTRUE 52437
52411: LD_INT 26
52413: DOUBLE
52414: EQUAL
52415: IFTRUE 52437
52417: LD_INT 28
52419: DOUBLE
52420: EQUAL
52421: IFTRUE 52437
52423: LD_INT 29
52425: DOUBLE
52426: EQUAL
52427: IFTRUE 52437
52429: LD_INT 30
52431: DOUBLE
52432: EQUAL
52433: IFTRUE 52437
52435: GO 52493
52437: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52438: LD_ADDR_VAR 0 9
52442: PUSH
52443: LD_VAR 0 59
52447: PUSH
52448: LD_VAR 0 60
52452: PUSH
52453: LD_VAR 0 61
52457: PUSH
52458: LD_VAR 0 62
52462: PUSH
52463: LD_VAR 0 63
52467: PUSH
52468: LD_VAR 0 64
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: PUSH
52481: LD_VAR 0 4
52485: PUSH
52486: LD_INT 1
52488: PLUS
52489: ARRAY
52490: ST_TO_ADDR
52491: GO 52494
52493: POP
// temp_list2 = [ ] ;
52494: LD_ADDR_VAR 0 10
52498: PUSH
52499: EMPTY
52500: ST_TO_ADDR
// for i in temp_list do
52501: LD_ADDR_VAR 0 8
52505: PUSH
52506: LD_VAR 0 9
52510: PUSH
52511: FOR_IN
52512: IFFALSE 52564
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52514: LD_ADDR_VAR 0 10
52518: PUSH
52519: LD_VAR 0 10
52523: PUSH
52524: LD_VAR 0 8
52528: PUSH
52529: LD_INT 1
52531: ARRAY
52532: PUSH
52533: LD_VAR 0 2
52537: PLUS
52538: PUSH
52539: LD_VAR 0 8
52543: PUSH
52544: LD_INT 2
52546: ARRAY
52547: PUSH
52548: LD_VAR 0 3
52552: PLUS
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: EMPTY
52559: LIST
52560: ADD
52561: ST_TO_ADDR
52562: GO 52511
52564: POP
52565: POP
// result = temp_list2 ;
52566: LD_ADDR_VAR 0 7
52570: PUSH
52571: LD_VAR 0 10
52575: ST_TO_ADDR
// end ;
52576: LD_VAR 0 7
52580: RET
// export function EnemyInRange ( unit , dist ) ; begin
52581: LD_INT 0
52583: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52584: LD_ADDR_VAR 0 3
52588: PUSH
52589: LD_VAR 0 1
52593: PPUSH
52594: CALL_OW 255
52598: PPUSH
52599: LD_VAR 0 1
52603: PPUSH
52604: CALL_OW 250
52608: PPUSH
52609: LD_VAR 0 1
52613: PPUSH
52614: CALL_OW 251
52618: PPUSH
52619: LD_VAR 0 2
52623: PPUSH
52624: CALL 25954 0 4
52628: PUSH
52629: LD_INT 4
52631: ARRAY
52632: ST_TO_ADDR
// end ;
52633: LD_VAR 0 3
52637: RET
// export function PlayerSeeMe ( unit ) ; begin
52638: LD_INT 0
52640: PPUSH
// result := See ( your_side , unit ) ;
52641: LD_ADDR_VAR 0 2
52645: PUSH
52646: LD_OWVAR 2
52650: PPUSH
52651: LD_VAR 0 1
52655: PPUSH
52656: CALL_OW 292
52660: ST_TO_ADDR
// end ;
52661: LD_VAR 0 2
52665: RET
// export function ReverseDir ( unit ) ; begin
52666: LD_INT 0
52668: PPUSH
// if not unit then
52669: LD_VAR 0 1
52673: NOT
52674: IFFALSE 52678
// exit ;
52676: GO 52701
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52678: LD_ADDR_VAR 0 2
52682: PUSH
52683: LD_VAR 0 1
52687: PPUSH
52688: CALL_OW 254
52692: PUSH
52693: LD_INT 3
52695: PLUS
52696: PUSH
52697: LD_INT 6
52699: MOD
52700: ST_TO_ADDR
// end ;
52701: LD_VAR 0 2
52705: RET
// export function ReverseArray ( array ) ; var i ; begin
52706: LD_INT 0
52708: PPUSH
52709: PPUSH
// if not array then
52710: LD_VAR 0 1
52714: NOT
52715: IFFALSE 52719
// exit ;
52717: GO 52774
// result := [ ] ;
52719: LD_ADDR_VAR 0 2
52723: PUSH
52724: EMPTY
52725: ST_TO_ADDR
// for i := array downto 1 do
52726: LD_ADDR_VAR 0 3
52730: PUSH
52731: DOUBLE
52732: LD_VAR 0 1
52736: INC
52737: ST_TO_ADDR
52738: LD_INT 1
52740: PUSH
52741: FOR_DOWNTO
52742: IFFALSE 52772
// result := Join ( result , array [ i ] ) ;
52744: LD_ADDR_VAR 0 2
52748: PUSH
52749: LD_VAR 0 2
52753: PPUSH
52754: LD_VAR 0 1
52758: PUSH
52759: LD_VAR 0 3
52763: ARRAY
52764: PPUSH
52765: CALL 57417 0 2
52769: ST_TO_ADDR
52770: GO 52741
52772: POP
52773: POP
// end ;
52774: LD_VAR 0 2
52778: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
52779: LD_INT 0
52781: PPUSH
52782: PPUSH
52783: PPUSH
52784: PPUSH
52785: PPUSH
52786: PPUSH
// if not unit or not hexes then
52787: LD_VAR 0 1
52791: NOT
52792: PUSH
52793: LD_VAR 0 2
52797: NOT
52798: OR
52799: IFFALSE 52803
// exit ;
52801: GO 52926
// dist := 9999 ;
52803: LD_ADDR_VAR 0 5
52807: PUSH
52808: LD_INT 9999
52810: ST_TO_ADDR
// for i = 1 to hexes do
52811: LD_ADDR_VAR 0 4
52815: PUSH
52816: DOUBLE
52817: LD_INT 1
52819: DEC
52820: ST_TO_ADDR
52821: LD_VAR 0 2
52825: PUSH
52826: FOR_TO
52827: IFFALSE 52914
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52829: LD_ADDR_VAR 0 6
52833: PUSH
52834: LD_VAR 0 1
52838: PPUSH
52839: LD_VAR 0 2
52843: PUSH
52844: LD_VAR 0 4
52848: ARRAY
52849: PUSH
52850: LD_INT 1
52852: ARRAY
52853: PPUSH
52854: LD_VAR 0 2
52858: PUSH
52859: LD_VAR 0 4
52863: ARRAY
52864: PUSH
52865: LD_INT 2
52867: ARRAY
52868: PPUSH
52869: CALL_OW 297
52873: ST_TO_ADDR
// if tdist < dist then
52874: LD_VAR 0 6
52878: PUSH
52879: LD_VAR 0 5
52883: LESS
52884: IFFALSE 52912
// begin hex := hexes [ i ] ;
52886: LD_ADDR_VAR 0 8
52890: PUSH
52891: LD_VAR 0 2
52895: PUSH
52896: LD_VAR 0 4
52900: ARRAY
52901: ST_TO_ADDR
// dist := tdist ;
52902: LD_ADDR_VAR 0 5
52906: PUSH
52907: LD_VAR 0 6
52911: ST_TO_ADDR
// end ; end ;
52912: GO 52826
52914: POP
52915: POP
// result := hex ;
52916: LD_ADDR_VAR 0 3
52920: PUSH
52921: LD_VAR 0 8
52925: ST_TO_ADDR
// end ;
52926: LD_VAR 0 3
52930: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52931: LD_INT 0
52933: PPUSH
52934: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52935: LD_VAR 0 1
52939: NOT
52940: PUSH
52941: LD_VAR 0 1
52945: PUSH
52946: LD_INT 21
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 23
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PPUSH
52970: CALL_OW 69
52974: IN
52975: NOT
52976: OR
52977: IFFALSE 52981
// exit ;
52979: GO 53028
// for i = 1 to 3 do
52981: LD_ADDR_VAR 0 3
52985: PUSH
52986: DOUBLE
52987: LD_INT 1
52989: DEC
52990: ST_TO_ADDR
52991: LD_INT 3
52993: PUSH
52994: FOR_TO
52995: IFFALSE 53026
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52997: LD_VAR 0 1
53001: PPUSH
53002: CALL_OW 250
53006: PPUSH
53007: LD_VAR 0 1
53011: PPUSH
53012: CALL_OW 251
53016: PPUSH
53017: LD_INT 1
53019: PPUSH
53020: CALL_OW 453
53024: GO 52994
53026: POP
53027: POP
// end ;
53028: LD_VAR 0 2
53032: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53033: LD_INT 0
53035: PPUSH
53036: PPUSH
53037: PPUSH
53038: PPUSH
53039: PPUSH
53040: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53041: LD_VAR 0 1
53045: NOT
53046: PUSH
53047: LD_VAR 0 2
53051: NOT
53052: OR
53053: PUSH
53054: LD_VAR 0 1
53058: PPUSH
53059: CALL_OW 314
53063: OR
53064: IFFALSE 53068
// exit ;
53066: GO 53535
// if GetLives ( i ) < 250 then
53068: LD_VAR 0 4
53072: PPUSH
53073: CALL_OW 256
53077: PUSH
53078: LD_INT 250
53080: LESS
53081: IFFALSE 53094
// begin ComAutodestruct ( i ) ;
53083: LD_VAR 0 4
53087: PPUSH
53088: CALL 52931 0 1
// exit ;
53092: GO 53535
// end ; x := GetX ( enemy_unit ) ;
53094: LD_ADDR_VAR 0 7
53098: PUSH
53099: LD_VAR 0 2
53103: PPUSH
53104: CALL_OW 250
53108: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53109: LD_ADDR_VAR 0 8
53113: PUSH
53114: LD_VAR 0 2
53118: PPUSH
53119: CALL_OW 251
53123: ST_TO_ADDR
// if not x or not y then
53124: LD_VAR 0 7
53128: NOT
53129: PUSH
53130: LD_VAR 0 8
53134: NOT
53135: OR
53136: IFFALSE 53140
// exit ;
53138: GO 53535
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53140: LD_ADDR_VAR 0 6
53144: PUSH
53145: LD_VAR 0 7
53149: PPUSH
53150: LD_INT 0
53152: PPUSH
53153: LD_INT 4
53155: PPUSH
53156: CALL_OW 272
53160: PUSH
53161: LD_VAR 0 8
53165: PPUSH
53166: LD_INT 0
53168: PPUSH
53169: LD_INT 4
53171: PPUSH
53172: CALL_OW 273
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_VAR 0 7
53185: PPUSH
53186: LD_INT 1
53188: PPUSH
53189: LD_INT 4
53191: PPUSH
53192: CALL_OW 272
53196: PUSH
53197: LD_VAR 0 8
53201: PPUSH
53202: LD_INT 1
53204: PPUSH
53205: LD_INT 4
53207: PPUSH
53208: CALL_OW 273
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_VAR 0 7
53221: PPUSH
53222: LD_INT 2
53224: PPUSH
53225: LD_INT 4
53227: PPUSH
53228: CALL_OW 272
53232: PUSH
53233: LD_VAR 0 8
53237: PPUSH
53238: LD_INT 2
53240: PPUSH
53241: LD_INT 4
53243: PPUSH
53244: CALL_OW 273
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_VAR 0 7
53257: PPUSH
53258: LD_INT 3
53260: PPUSH
53261: LD_INT 4
53263: PPUSH
53264: CALL_OW 272
53268: PUSH
53269: LD_VAR 0 8
53273: PPUSH
53274: LD_INT 3
53276: PPUSH
53277: LD_INT 4
53279: PPUSH
53280: CALL_OW 273
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_VAR 0 7
53293: PPUSH
53294: LD_INT 4
53296: PPUSH
53297: LD_INT 4
53299: PPUSH
53300: CALL_OW 272
53304: PUSH
53305: LD_VAR 0 8
53309: PPUSH
53310: LD_INT 4
53312: PPUSH
53313: LD_INT 4
53315: PPUSH
53316: CALL_OW 273
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_VAR 0 7
53329: PPUSH
53330: LD_INT 5
53332: PPUSH
53333: LD_INT 4
53335: PPUSH
53336: CALL_OW 272
53340: PUSH
53341: LD_VAR 0 8
53345: PPUSH
53346: LD_INT 5
53348: PPUSH
53349: LD_INT 4
53351: PPUSH
53352: CALL_OW 273
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// for i = tmp downto 1 do
53369: LD_ADDR_VAR 0 4
53373: PUSH
53374: DOUBLE
53375: LD_VAR 0 6
53379: INC
53380: ST_TO_ADDR
53381: LD_INT 1
53383: PUSH
53384: FOR_DOWNTO
53385: IFFALSE 53486
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53387: LD_VAR 0 6
53391: PUSH
53392: LD_VAR 0 4
53396: ARRAY
53397: PUSH
53398: LD_INT 1
53400: ARRAY
53401: PPUSH
53402: LD_VAR 0 6
53406: PUSH
53407: LD_VAR 0 4
53411: ARRAY
53412: PUSH
53413: LD_INT 2
53415: ARRAY
53416: PPUSH
53417: CALL_OW 488
53421: NOT
53422: PUSH
53423: LD_VAR 0 6
53427: PUSH
53428: LD_VAR 0 4
53432: ARRAY
53433: PUSH
53434: LD_INT 1
53436: ARRAY
53437: PPUSH
53438: LD_VAR 0 6
53442: PUSH
53443: LD_VAR 0 4
53447: ARRAY
53448: PUSH
53449: LD_INT 2
53451: ARRAY
53452: PPUSH
53453: CALL_OW 428
53457: PUSH
53458: LD_INT 0
53460: NONEQUAL
53461: OR
53462: IFFALSE 53484
// tmp := Delete ( tmp , i ) ;
53464: LD_ADDR_VAR 0 6
53468: PUSH
53469: LD_VAR 0 6
53473: PPUSH
53474: LD_VAR 0 4
53478: PPUSH
53479: CALL_OW 3
53483: ST_TO_ADDR
53484: GO 53384
53486: POP
53487: POP
// j := GetClosestHex ( unit , tmp ) ;
53488: LD_ADDR_VAR 0 5
53492: PUSH
53493: LD_VAR 0 1
53497: PPUSH
53498: LD_VAR 0 6
53502: PPUSH
53503: CALL 52779 0 2
53507: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53508: LD_VAR 0 1
53512: PPUSH
53513: LD_VAR 0 5
53517: PUSH
53518: LD_INT 1
53520: ARRAY
53521: PPUSH
53522: LD_VAR 0 5
53526: PUSH
53527: LD_INT 2
53529: ARRAY
53530: PPUSH
53531: CALL_OW 111
// end ;
53535: LD_VAR 0 3
53539: RET
// export function PrepareApemanSoldier ( ) ; begin
53540: LD_INT 0
53542: PPUSH
// uc_nation := 0 ;
53543: LD_ADDR_OWVAR 21
53547: PUSH
53548: LD_INT 0
53550: ST_TO_ADDR
// hc_sex := sex_male ;
53551: LD_ADDR_OWVAR 27
53555: PUSH
53556: LD_INT 1
53558: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
53559: LD_ADDR_OWVAR 28
53563: PUSH
53564: LD_INT 15
53566: ST_TO_ADDR
// hc_gallery :=  ;
53567: LD_ADDR_OWVAR 33
53571: PUSH
53572: LD_STRING 
53574: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53575: LD_ADDR_OWVAR 31
53579: PUSH
53580: LD_INT 0
53582: PPUSH
53583: LD_INT 3
53585: PPUSH
53586: CALL_OW 12
53590: PUSH
53591: LD_INT 0
53593: PPUSH
53594: LD_INT 3
53596: PPUSH
53597: CALL_OW 12
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: ST_TO_ADDR
// end ;
53614: LD_VAR 0 1
53618: RET
// export function PrepareApemanEngineer ( ) ; begin
53619: LD_INT 0
53621: PPUSH
// uc_nation := 0 ;
53622: LD_ADDR_OWVAR 21
53626: PUSH
53627: LD_INT 0
53629: ST_TO_ADDR
// hc_sex := sex_male ;
53630: LD_ADDR_OWVAR 27
53634: PUSH
53635: LD_INT 1
53637: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53638: LD_ADDR_OWVAR 28
53642: PUSH
53643: LD_INT 16
53645: ST_TO_ADDR
// hc_gallery :=  ;
53646: LD_ADDR_OWVAR 33
53650: PUSH
53651: LD_STRING 
53653: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53654: LD_ADDR_OWVAR 31
53658: PUSH
53659: LD_INT 0
53661: PPUSH
53662: LD_INT 3
53664: PPUSH
53665: CALL_OW 12
53669: PUSH
53670: LD_INT 0
53672: PPUSH
53673: LD_INT 3
53675: PPUSH
53676: CALL_OW 12
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: ST_TO_ADDR
// end ;
53693: LD_VAR 0 1
53697: RET
// export function PrepareApeman ( agressivity ) ; begin
53698: LD_INT 0
53700: PPUSH
// uc_side := 0 ;
53701: LD_ADDR_OWVAR 20
53705: PUSH
53706: LD_INT 0
53708: ST_TO_ADDR
// uc_nation := 0 ;
53709: LD_ADDR_OWVAR 21
53713: PUSH
53714: LD_INT 0
53716: ST_TO_ADDR
// hc_sex := sex_male ;
53717: LD_ADDR_OWVAR 27
53721: PUSH
53722: LD_INT 1
53724: ST_TO_ADDR
// hc_class := class_apeman ;
53725: LD_ADDR_OWVAR 28
53729: PUSH
53730: LD_INT 12
53732: ST_TO_ADDR
// hc_gallery :=  ;
53733: LD_ADDR_OWVAR 33
53737: PUSH
53738: LD_STRING 
53740: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53741: LD_ADDR_OWVAR 35
53745: PUSH
53746: LD_VAR 0 1
53750: NEG
53751: PPUSH
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 12
53761: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53762: LD_ADDR_OWVAR 31
53766: PUSH
53767: LD_INT 0
53769: PPUSH
53770: LD_INT 3
53772: PPUSH
53773: CALL_OW 12
53777: PUSH
53778: LD_INT 0
53780: PPUSH
53781: LD_INT 3
53783: PPUSH
53784: CALL_OW 12
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// end ;
53801: LD_VAR 0 2
53805: RET
// export function PrepareTiger ( agressivity ) ; begin
53806: LD_INT 0
53808: PPUSH
// uc_side := 0 ;
53809: LD_ADDR_OWVAR 20
53813: PUSH
53814: LD_INT 0
53816: ST_TO_ADDR
// uc_nation := 0 ;
53817: LD_ADDR_OWVAR 21
53821: PUSH
53822: LD_INT 0
53824: ST_TO_ADDR
// hc_class := class_tiger ;
53825: LD_ADDR_OWVAR 28
53829: PUSH
53830: LD_INT 14
53832: ST_TO_ADDR
// hc_gallery :=  ;
53833: LD_ADDR_OWVAR 33
53837: PUSH
53838: LD_STRING 
53840: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53841: LD_ADDR_OWVAR 35
53845: PUSH
53846: LD_VAR 0 1
53850: NEG
53851: PPUSH
53852: LD_VAR 0 1
53856: PPUSH
53857: CALL_OW 12
53861: ST_TO_ADDR
// end ;
53862: LD_VAR 0 2
53866: RET
// export function PrepareEnchidna ( ) ; begin
53867: LD_INT 0
53869: PPUSH
// uc_side := 0 ;
53870: LD_ADDR_OWVAR 20
53874: PUSH
53875: LD_INT 0
53877: ST_TO_ADDR
// uc_nation := 0 ;
53878: LD_ADDR_OWVAR 21
53882: PUSH
53883: LD_INT 0
53885: ST_TO_ADDR
// hc_class := class_baggie ;
53886: LD_ADDR_OWVAR 28
53890: PUSH
53891: LD_INT 13
53893: ST_TO_ADDR
// hc_gallery :=  ;
53894: LD_ADDR_OWVAR 33
53898: PUSH
53899: LD_STRING 
53901: ST_TO_ADDR
// end ;
53902: LD_VAR 0 1
53906: RET
// export function PrepareFrog ( ) ; begin
53907: LD_INT 0
53909: PPUSH
// uc_side := 0 ;
53910: LD_ADDR_OWVAR 20
53914: PUSH
53915: LD_INT 0
53917: ST_TO_ADDR
// uc_nation := 0 ;
53918: LD_ADDR_OWVAR 21
53922: PUSH
53923: LD_INT 0
53925: ST_TO_ADDR
// hc_class := class_frog ;
53926: LD_ADDR_OWVAR 28
53930: PUSH
53931: LD_INT 19
53933: ST_TO_ADDR
// hc_gallery :=  ;
53934: LD_ADDR_OWVAR 33
53938: PUSH
53939: LD_STRING 
53941: ST_TO_ADDR
// end ;
53942: LD_VAR 0 1
53946: RET
// export function PrepareFish ( ) ; begin
53947: LD_INT 0
53949: PPUSH
// uc_side := 0 ;
53950: LD_ADDR_OWVAR 20
53954: PUSH
53955: LD_INT 0
53957: ST_TO_ADDR
// uc_nation := 0 ;
53958: LD_ADDR_OWVAR 21
53962: PUSH
53963: LD_INT 0
53965: ST_TO_ADDR
// hc_class := class_fish ;
53966: LD_ADDR_OWVAR 28
53970: PUSH
53971: LD_INT 20
53973: ST_TO_ADDR
// hc_gallery :=  ;
53974: LD_ADDR_OWVAR 33
53978: PUSH
53979: LD_STRING 
53981: ST_TO_ADDR
// end ;
53982: LD_VAR 0 1
53986: RET
// export function PrepareBird ( ) ; begin
53987: LD_INT 0
53989: PPUSH
// uc_side := 0 ;
53990: LD_ADDR_OWVAR 20
53994: PUSH
53995: LD_INT 0
53997: ST_TO_ADDR
// uc_nation := 0 ;
53998: LD_ADDR_OWVAR 21
54002: PUSH
54003: LD_INT 0
54005: ST_TO_ADDR
// hc_class := class_phororhacos ;
54006: LD_ADDR_OWVAR 28
54010: PUSH
54011: LD_INT 18
54013: ST_TO_ADDR
// hc_gallery :=  ;
54014: LD_ADDR_OWVAR 33
54018: PUSH
54019: LD_STRING 
54021: ST_TO_ADDR
// end ;
54022: LD_VAR 0 1
54026: RET
// export function PrepareHorse ( ) ; begin
54027: LD_INT 0
54029: PPUSH
// uc_side := 0 ;
54030: LD_ADDR_OWVAR 20
54034: PUSH
54035: LD_INT 0
54037: ST_TO_ADDR
// uc_nation := 0 ;
54038: LD_ADDR_OWVAR 21
54042: PUSH
54043: LD_INT 0
54045: ST_TO_ADDR
// hc_class := class_horse ;
54046: LD_ADDR_OWVAR 28
54050: PUSH
54051: LD_INT 21
54053: ST_TO_ADDR
// hc_gallery :=  ;
54054: LD_ADDR_OWVAR 33
54058: PUSH
54059: LD_STRING 
54061: ST_TO_ADDR
// end ;
54062: LD_VAR 0 1
54066: RET
// export function PrepareMastodont ( ) ; begin
54067: LD_INT 0
54069: PPUSH
// uc_side := 0 ;
54070: LD_ADDR_OWVAR 20
54074: PUSH
54075: LD_INT 0
54077: ST_TO_ADDR
// uc_nation := 0 ;
54078: LD_ADDR_OWVAR 21
54082: PUSH
54083: LD_INT 0
54085: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54086: LD_ADDR_OWVAR 37
54090: PUSH
54091: LD_INT 31
54093: ST_TO_ADDR
// vc_control := control_rider ;
54094: LD_ADDR_OWVAR 38
54098: PUSH
54099: LD_INT 4
54101: ST_TO_ADDR
// end ;
54102: LD_VAR 0 1
54106: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54107: LD_INT 0
54109: PPUSH
54110: PPUSH
54111: PPUSH
// uc_side = 0 ;
54112: LD_ADDR_OWVAR 20
54116: PUSH
54117: LD_INT 0
54119: ST_TO_ADDR
// uc_nation = 0 ;
54120: LD_ADDR_OWVAR 21
54124: PUSH
54125: LD_INT 0
54127: ST_TO_ADDR
// InitHc_All ( ) ;
54128: CALL_OW 584
// InitVc ;
54132: CALL_OW 20
// if mastodonts then
54136: LD_VAR 0 6
54140: IFFALSE 54207
// for i = 1 to mastodonts do
54142: LD_ADDR_VAR 0 11
54146: PUSH
54147: DOUBLE
54148: LD_INT 1
54150: DEC
54151: ST_TO_ADDR
54152: LD_VAR 0 6
54156: PUSH
54157: FOR_TO
54158: IFFALSE 54205
// begin vc_chassis := 31 ;
54160: LD_ADDR_OWVAR 37
54164: PUSH
54165: LD_INT 31
54167: ST_TO_ADDR
// vc_control := control_rider ;
54168: LD_ADDR_OWVAR 38
54172: PUSH
54173: LD_INT 4
54175: ST_TO_ADDR
// animal := CreateVehicle ;
54176: LD_ADDR_VAR 0 12
54180: PUSH
54181: CALL_OW 45
54185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54186: LD_VAR 0 12
54190: PPUSH
54191: LD_VAR 0 8
54195: PPUSH
54196: LD_INT 0
54198: PPUSH
54199: CALL 56335 0 3
// end ;
54203: GO 54157
54205: POP
54206: POP
// if horses then
54207: LD_VAR 0 5
54211: IFFALSE 54278
// for i = 1 to horses do
54213: LD_ADDR_VAR 0 11
54217: PUSH
54218: DOUBLE
54219: LD_INT 1
54221: DEC
54222: ST_TO_ADDR
54223: LD_VAR 0 5
54227: PUSH
54228: FOR_TO
54229: IFFALSE 54276
// begin hc_class := 21 ;
54231: LD_ADDR_OWVAR 28
54235: PUSH
54236: LD_INT 21
54238: ST_TO_ADDR
// hc_gallery :=  ;
54239: LD_ADDR_OWVAR 33
54243: PUSH
54244: LD_STRING 
54246: ST_TO_ADDR
// animal := CreateHuman ;
54247: LD_ADDR_VAR 0 12
54251: PUSH
54252: CALL_OW 44
54256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54257: LD_VAR 0 12
54261: PPUSH
54262: LD_VAR 0 8
54266: PPUSH
54267: LD_INT 0
54269: PPUSH
54270: CALL 56335 0 3
// end ;
54274: GO 54228
54276: POP
54277: POP
// if birds then
54278: LD_VAR 0 1
54282: IFFALSE 54349
// for i = 1 to birds do
54284: LD_ADDR_VAR 0 11
54288: PUSH
54289: DOUBLE
54290: LD_INT 1
54292: DEC
54293: ST_TO_ADDR
54294: LD_VAR 0 1
54298: PUSH
54299: FOR_TO
54300: IFFALSE 54347
// begin hc_class := 18 ;
54302: LD_ADDR_OWVAR 28
54306: PUSH
54307: LD_INT 18
54309: ST_TO_ADDR
// hc_gallery =  ;
54310: LD_ADDR_OWVAR 33
54314: PUSH
54315: LD_STRING 
54317: ST_TO_ADDR
// animal := CreateHuman ;
54318: LD_ADDR_VAR 0 12
54322: PUSH
54323: CALL_OW 44
54327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54328: LD_VAR 0 12
54332: PPUSH
54333: LD_VAR 0 8
54337: PPUSH
54338: LD_INT 0
54340: PPUSH
54341: CALL 56335 0 3
// end ;
54345: GO 54299
54347: POP
54348: POP
// if tigers then
54349: LD_VAR 0 2
54353: IFFALSE 54437
// for i = 1 to tigers do
54355: LD_ADDR_VAR 0 11
54359: PUSH
54360: DOUBLE
54361: LD_INT 1
54363: DEC
54364: ST_TO_ADDR
54365: LD_VAR 0 2
54369: PUSH
54370: FOR_TO
54371: IFFALSE 54435
// begin hc_class = class_tiger ;
54373: LD_ADDR_OWVAR 28
54377: PUSH
54378: LD_INT 14
54380: ST_TO_ADDR
// hc_gallery =  ;
54381: LD_ADDR_OWVAR 33
54385: PUSH
54386: LD_STRING 
54388: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54389: LD_ADDR_OWVAR 35
54393: PUSH
54394: LD_INT 7
54396: NEG
54397: PPUSH
54398: LD_INT 7
54400: PPUSH
54401: CALL_OW 12
54405: ST_TO_ADDR
// animal := CreateHuman ;
54406: LD_ADDR_VAR 0 12
54410: PUSH
54411: CALL_OW 44
54415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54416: LD_VAR 0 12
54420: PPUSH
54421: LD_VAR 0 8
54425: PPUSH
54426: LD_INT 0
54428: PPUSH
54429: CALL 56335 0 3
// end ;
54433: GO 54370
54435: POP
54436: POP
// if apemans then
54437: LD_VAR 0 3
54441: IFFALSE 54564
// for i = 1 to apemans do
54443: LD_ADDR_VAR 0 11
54447: PUSH
54448: DOUBLE
54449: LD_INT 1
54451: DEC
54452: ST_TO_ADDR
54453: LD_VAR 0 3
54457: PUSH
54458: FOR_TO
54459: IFFALSE 54562
// begin hc_class = class_apeman ;
54461: LD_ADDR_OWVAR 28
54465: PUSH
54466: LD_INT 12
54468: ST_TO_ADDR
// hc_gallery =  ;
54469: LD_ADDR_OWVAR 33
54473: PUSH
54474: LD_STRING 
54476: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54477: LD_ADDR_OWVAR 35
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PPUSH
54486: LD_INT 2
54488: PPUSH
54489: CALL_OW 12
54493: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54494: LD_ADDR_OWVAR 31
54498: PUSH
54499: LD_INT 1
54501: PPUSH
54502: LD_INT 3
54504: PPUSH
54505: CALL_OW 12
54509: PUSH
54510: LD_INT 1
54512: PPUSH
54513: LD_INT 3
54515: PPUSH
54516: CALL_OW 12
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: ST_TO_ADDR
// animal := CreateHuman ;
54533: LD_ADDR_VAR 0 12
54537: PUSH
54538: CALL_OW 44
54542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54543: LD_VAR 0 12
54547: PPUSH
54548: LD_VAR 0 8
54552: PPUSH
54553: LD_INT 0
54555: PPUSH
54556: CALL 56335 0 3
// end ;
54560: GO 54458
54562: POP
54563: POP
// if enchidnas then
54564: LD_VAR 0 4
54568: IFFALSE 54635
// for i = 1 to enchidnas do
54570: LD_ADDR_VAR 0 11
54574: PUSH
54575: DOUBLE
54576: LD_INT 1
54578: DEC
54579: ST_TO_ADDR
54580: LD_VAR 0 4
54584: PUSH
54585: FOR_TO
54586: IFFALSE 54633
// begin hc_class = 13 ;
54588: LD_ADDR_OWVAR 28
54592: PUSH
54593: LD_INT 13
54595: ST_TO_ADDR
// hc_gallery =  ;
54596: LD_ADDR_OWVAR 33
54600: PUSH
54601: LD_STRING 
54603: ST_TO_ADDR
// animal := CreateHuman ;
54604: LD_ADDR_VAR 0 12
54608: PUSH
54609: CALL_OW 44
54613: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54614: LD_VAR 0 12
54618: PPUSH
54619: LD_VAR 0 8
54623: PPUSH
54624: LD_INT 0
54626: PPUSH
54627: CALL 56335 0 3
// end ;
54631: GO 54585
54633: POP
54634: POP
// if fishes then
54635: LD_VAR 0 7
54639: IFFALSE 54706
// for i = 1 to fishes do
54641: LD_ADDR_VAR 0 11
54645: PUSH
54646: DOUBLE
54647: LD_INT 1
54649: DEC
54650: ST_TO_ADDR
54651: LD_VAR 0 7
54655: PUSH
54656: FOR_TO
54657: IFFALSE 54704
// begin hc_class = 20 ;
54659: LD_ADDR_OWVAR 28
54663: PUSH
54664: LD_INT 20
54666: ST_TO_ADDR
// hc_gallery =  ;
54667: LD_ADDR_OWVAR 33
54671: PUSH
54672: LD_STRING 
54674: ST_TO_ADDR
// animal := CreateHuman ;
54675: LD_ADDR_VAR 0 12
54679: PUSH
54680: CALL_OW 44
54684: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54685: LD_VAR 0 12
54689: PPUSH
54690: LD_VAR 0 9
54694: PPUSH
54695: LD_INT 0
54697: PPUSH
54698: CALL 56335 0 3
// end ;
54702: GO 54656
54704: POP
54705: POP
// end ;
54706: LD_VAR 0 10
54710: RET
// export function WantHeal ( sci , unit ) ; begin
54711: LD_INT 0
54713: PPUSH
// if GetTaskList ( sci ) > 0 then
54714: LD_VAR 0 1
54718: PPUSH
54719: CALL_OW 437
54723: PUSH
54724: LD_INT 0
54726: GREATER
54727: IFFALSE 54797
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54729: LD_VAR 0 1
54733: PPUSH
54734: CALL_OW 437
54738: PUSH
54739: LD_INT 1
54741: ARRAY
54742: PUSH
54743: LD_INT 1
54745: ARRAY
54746: PUSH
54747: LD_STRING l
54749: EQUAL
54750: PUSH
54751: LD_VAR 0 1
54755: PPUSH
54756: CALL_OW 437
54760: PUSH
54761: LD_INT 1
54763: ARRAY
54764: PUSH
54765: LD_INT 4
54767: ARRAY
54768: PUSH
54769: LD_VAR 0 2
54773: EQUAL
54774: AND
54775: IFFALSE 54787
// result := true else
54777: LD_ADDR_VAR 0 3
54781: PUSH
54782: LD_INT 1
54784: ST_TO_ADDR
54785: GO 54795
// result := false ;
54787: LD_ADDR_VAR 0 3
54791: PUSH
54792: LD_INT 0
54794: ST_TO_ADDR
// end else
54795: GO 54805
// result := false ;
54797: LD_ADDR_VAR 0 3
54801: PUSH
54802: LD_INT 0
54804: ST_TO_ADDR
// end ;
54805: LD_VAR 0 3
54809: RET
// export function HealTarget ( sci ) ; begin
54810: LD_INT 0
54812: PPUSH
// if not sci then
54813: LD_VAR 0 1
54817: NOT
54818: IFFALSE 54822
// exit ;
54820: GO 54887
// result := 0 ;
54822: LD_ADDR_VAR 0 2
54826: PUSH
54827: LD_INT 0
54829: ST_TO_ADDR
// if GetTaskList ( sci ) then
54830: LD_VAR 0 1
54834: PPUSH
54835: CALL_OW 437
54839: IFFALSE 54887
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54841: LD_VAR 0 1
54845: PPUSH
54846: CALL_OW 437
54850: PUSH
54851: LD_INT 1
54853: ARRAY
54854: PUSH
54855: LD_INT 1
54857: ARRAY
54858: PUSH
54859: LD_STRING l
54861: EQUAL
54862: IFFALSE 54887
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54864: LD_ADDR_VAR 0 2
54868: PUSH
54869: LD_VAR 0 1
54873: PPUSH
54874: CALL_OW 437
54878: PUSH
54879: LD_INT 1
54881: ARRAY
54882: PUSH
54883: LD_INT 4
54885: ARRAY
54886: ST_TO_ADDR
// end ;
54887: LD_VAR 0 2
54891: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54892: LD_INT 0
54894: PPUSH
54895: PPUSH
54896: PPUSH
54897: PPUSH
// if not base_units then
54898: LD_VAR 0 1
54902: NOT
54903: IFFALSE 54907
// exit ;
54905: GO 54994
// result := false ;
54907: LD_ADDR_VAR 0 2
54911: PUSH
54912: LD_INT 0
54914: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54915: LD_ADDR_VAR 0 5
54919: PUSH
54920: LD_VAR 0 1
54924: PPUSH
54925: LD_INT 21
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PPUSH
54935: CALL_OW 72
54939: ST_TO_ADDR
// if not tmp then
54940: LD_VAR 0 5
54944: NOT
54945: IFFALSE 54949
// exit ;
54947: GO 54994
// for i in tmp do
54949: LD_ADDR_VAR 0 3
54953: PUSH
54954: LD_VAR 0 5
54958: PUSH
54959: FOR_IN
54960: IFFALSE 54992
// begin result := EnemyInRange ( i , 22 ) ;
54962: LD_ADDR_VAR 0 2
54966: PUSH
54967: LD_VAR 0 3
54971: PPUSH
54972: LD_INT 22
54974: PPUSH
54975: CALL 52581 0 2
54979: ST_TO_ADDR
// if result then
54980: LD_VAR 0 2
54984: IFFALSE 54990
// exit ;
54986: POP
54987: POP
54988: GO 54994
// end ;
54990: GO 54959
54992: POP
54993: POP
// end ;
54994: LD_VAR 0 2
54998: RET
// export function FilterByTag ( units , tag ) ; begin
54999: LD_INT 0
55001: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55002: LD_ADDR_VAR 0 3
55006: PUSH
55007: LD_VAR 0 1
55011: PPUSH
55012: LD_INT 120
55014: PUSH
55015: LD_VAR 0 2
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PPUSH
55024: CALL_OW 72
55028: ST_TO_ADDR
// end ;
55029: LD_VAR 0 3
55033: RET
// export function IsDriver ( un ) ; begin
55034: LD_INT 0
55036: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55037: LD_ADDR_VAR 0 2
55041: PUSH
55042: LD_VAR 0 1
55046: PUSH
55047: LD_INT 55
55049: PUSH
55050: EMPTY
55051: LIST
55052: PPUSH
55053: CALL_OW 69
55057: IN
55058: ST_TO_ADDR
// end ;
55059: LD_VAR 0 2
55063: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55064: LD_INT 0
55066: PPUSH
55067: PPUSH
// list := [ ] ;
55068: LD_ADDR_VAR 0 5
55072: PUSH
55073: EMPTY
55074: ST_TO_ADDR
// case d of 0 :
55075: LD_VAR 0 3
55079: PUSH
55080: LD_INT 0
55082: DOUBLE
55083: EQUAL
55084: IFTRUE 55088
55086: GO 55221
55088: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55089: LD_ADDR_VAR 0 5
55093: PUSH
55094: LD_VAR 0 1
55098: PUSH
55099: LD_INT 4
55101: MINUS
55102: PUSH
55103: LD_VAR 0 2
55107: PUSH
55108: LD_INT 4
55110: MINUS
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: LIST
55119: PUSH
55120: LD_VAR 0 1
55124: PUSH
55125: LD_INT 3
55127: MINUS
55128: PUSH
55129: LD_VAR 0 2
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: PUSH
55142: LD_VAR 0 1
55146: PUSH
55147: LD_INT 4
55149: PLUS
55150: PUSH
55151: LD_VAR 0 2
55155: PUSH
55156: LD_INT 4
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: PUSH
55164: LD_VAR 0 1
55168: PUSH
55169: LD_INT 3
55171: PLUS
55172: PUSH
55173: LD_VAR 0 2
55177: PUSH
55178: LD_INT 3
55180: PLUS
55181: PUSH
55182: LD_INT 5
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: PUSH
55190: LD_VAR 0 1
55194: PUSH
55195: LD_VAR 0 2
55199: PUSH
55200: LD_INT 4
55202: PLUS
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: ST_TO_ADDR
// end ; 1 :
55219: GO 55919
55221: LD_INT 1
55223: DOUBLE
55224: EQUAL
55225: IFTRUE 55229
55227: GO 55362
55229: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55230: LD_ADDR_VAR 0 5
55234: PUSH
55235: LD_VAR 0 1
55239: PUSH
55240: LD_VAR 0 2
55244: PUSH
55245: LD_INT 4
55247: MINUS
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: PUSH
55257: LD_VAR 0 1
55261: PUSH
55262: LD_INT 3
55264: MINUS
55265: PUSH
55266: LD_VAR 0 2
55270: PUSH
55271: LD_INT 3
55273: MINUS
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: LIST
55282: PUSH
55283: LD_VAR 0 1
55287: PUSH
55288: LD_INT 4
55290: MINUS
55291: PUSH
55292: LD_VAR 0 2
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: PUSH
55305: LD_VAR 0 1
55309: PUSH
55310: LD_VAR 0 2
55314: PUSH
55315: LD_INT 3
55317: PLUS
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: LIST
55326: PUSH
55327: LD_VAR 0 1
55331: PUSH
55332: LD_INT 4
55334: PLUS
55335: PUSH
55336: LD_VAR 0 2
55340: PUSH
55341: LD_INT 4
55343: PLUS
55344: PUSH
55345: LD_INT 5
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// end ; 2 :
55360: GO 55919
55362: LD_INT 2
55364: DOUBLE
55365: EQUAL
55366: IFTRUE 55370
55368: GO 55499
55370: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55371: LD_ADDR_VAR 0 5
55375: PUSH
55376: LD_VAR 0 1
55380: PUSH
55381: LD_VAR 0 2
55385: PUSH
55386: LD_INT 3
55388: MINUS
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: LIST
55397: PUSH
55398: LD_VAR 0 1
55402: PUSH
55403: LD_INT 4
55405: PLUS
55406: PUSH
55407: LD_VAR 0 2
55411: PUSH
55412: LD_INT 4
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: PUSH
55420: LD_VAR 0 1
55424: PUSH
55425: LD_VAR 0 2
55429: PUSH
55430: LD_INT 4
55432: PLUS
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: PUSH
55442: LD_VAR 0 1
55446: PUSH
55447: LD_INT 3
55449: MINUS
55450: PUSH
55451: LD_VAR 0 2
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: PUSH
55464: LD_VAR 0 1
55468: PUSH
55469: LD_INT 4
55471: MINUS
55472: PUSH
55473: LD_VAR 0 2
55477: PUSH
55478: LD_INT 4
55480: MINUS
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: ST_TO_ADDR
// end ; 3 :
55497: GO 55919
55499: LD_INT 3
55501: DOUBLE
55502: EQUAL
55503: IFTRUE 55507
55505: GO 55640
55507: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55508: LD_ADDR_VAR 0 5
55512: PUSH
55513: LD_VAR 0 1
55517: PUSH
55518: LD_INT 3
55520: PLUS
55521: PUSH
55522: LD_VAR 0 2
55526: PUSH
55527: LD_INT 4
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: LIST
55534: PUSH
55535: LD_VAR 0 1
55539: PUSH
55540: LD_INT 4
55542: PLUS
55543: PUSH
55544: LD_VAR 0 2
55548: PUSH
55549: LD_INT 4
55551: PLUS
55552: PUSH
55553: LD_INT 5
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: PUSH
55561: LD_VAR 0 1
55565: PUSH
55566: LD_INT 4
55568: MINUS
55569: PUSH
55570: LD_VAR 0 2
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: PUSH
55583: LD_VAR 0 1
55587: PUSH
55588: LD_VAR 0 2
55592: PUSH
55593: LD_INT 4
55595: MINUS
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: LIST
55604: PUSH
55605: LD_VAR 0 1
55609: PUSH
55610: LD_INT 3
55612: MINUS
55613: PUSH
55614: LD_VAR 0 2
55618: PUSH
55619: LD_INT 3
55621: MINUS
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: ST_TO_ADDR
// end ; 4 :
55638: GO 55919
55640: LD_INT 4
55642: DOUBLE
55643: EQUAL
55644: IFTRUE 55648
55646: GO 55781
55648: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55649: LD_ADDR_VAR 0 5
55653: PUSH
55654: LD_VAR 0 1
55658: PUSH
55659: LD_VAR 0 2
55663: PUSH
55664: LD_INT 4
55666: PLUS
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: LIST
55675: PUSH
55676: LD_VAR 0 1
55680: PUSH
55681: LD_INT 3
55683: PLUS
55684: PUSH
55685: LD_VAR 0 2
55689: PUSH
55690: LD_INT 3
55692: PLUS
55693: PUSH
55694: LD_INT 5
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: PUSH
55702: LD_VAR 0 1
55706: PUSH
55707: LD_INT 4
55709: PLUS
55710: PUSH
55711: LD_VAR 0 2
55715: PUSH
55716: LD_INT 4
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: LIST
55723: PUSH
55724: LD_VAR 0 1
55728: PUSH
55729: LD_VAR 0 2
55733: PUSH
55734: LD_INT 3
55736: MINUS
55737: PUSH
55738: LD_INT 3
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: LIST
55745: PUSH
55746: LD_VAR 0 1
55750: PUSH
55751: LD_INT 4
55753: MINUS
55754: PUSH
55755: LD_VAR 0 2
55759: PUSH
55760: LD_INT 4
55762: MINUS
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: LIST
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: ST_TO_ADDR
// end ; 5 :
55779: GO 55919
55781: LD_INT 5
55783: DOUBLE
55784: EQUAL
55785: IFTRUE 55789
55787: GO 55918
55789: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55790: LD_ADDR_VAR 0 5
55794: PUSH
55795: LD_VAR 0 1
55799: PUSH
55800: LD_INT 4
55802: MINUS
55803: PUSH
55804: LD_VAR 0 2
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: PUSH
55817: LD_VAR 0 1
55821: PUSH
55822: LD_VAR 0 2
55826: PUSH
55827: LD_INT 4
55829: MINUS
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: PUSH
55839: LD_VAR 0 1
55843: PUSH
55844: LD_INT 4
55846: PLUS
55847: PUSH
55848: LD_VAR 0 2
55852: PUSH
55853: LD_INT 4
55855: PLUS
55856: PUSH
55857: LD_INT 5
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: PUSH
55865: LD_VAR 0 1
55869: PUSH
55870: LD_INT 3
55872: PLUS
55873: PUSH
55874: LD_VAR 0 2
55878: PUSH
55879: LD_INT 4
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: LIST
55886: PUSH
55887: LD_VAR 0 1
55891: PUSH
55892: LD_VAR 0 2
55896: PUSH
55897: LD_INT 3
55899: PLUS
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: LIST
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: ST_TO_ADDR
// end ; end ;
55916: GO 55919
55918: POP
// result := list ;
55919: LD_ADDR_VAR 0 4
55923: PUSH
55924: LD_VAR 0 5
55928: ST_TO_ADDR
// end ;
55929: LD_VAR 0 4
55933: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55934: LD_INT 0
55936: PPUSH
55937: PPUSH
55938: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55939: LD_VAR 0 1
55943: NOT
55944: PUSH
55945: LD_VAR 0 2
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: LD_INT 4
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: IN
55968: NOT
55969: OR
55970: IFFALSE 55974
// exit ;
55972: GO 56057
// tmp := [ ] ;
55974: LD_ADDR_VAR 0 5
55978: PUSH
55979: EMPTY
55980: ST_TO_ADDR
// for i in units do
55981: LD_ADDR_VAR 0 4
55985: PUSH
55986: LD_VAR 0 1
55990: PUSH
55991: FOR_IN
55992: IFFALSE 56026
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
55994: LD_ADDR_VAR 0 5
55998: PUSH
55999: LD_VAR 0 5
56003: PPUSH
56004: LD_VAR 0 4
56008: PPUSH
56009: LD_VAR 0 2
56013: PPUSH
56014: CALL_OW 259
56018: PPUSH
56019: CALL 57417 0 2
56023: ST_TO_ADDR
56024: GO 55991
56026: POP
56027: POP
// if not tmp then
56028: LD_VAR 0 5
56032: NOT
56033: IFFALSE 56037
// exit ;
56035: GO 56057
// result := SortListByListDesc ( units , tmp ) ;
56037: LD_ADDR_VAR 0 3
56041: PUSH
56042: LD_VAR 0 1
56046: PPUSH
56047: LD_VAR 0 5
56051: PPUSH
56052: CALL_OW 77
56056: ST_TO_ADDR
// end ;
56057: LD_VAR 0 3
56061: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56062: LD_INT 0
56064: PPUSH
56065: PPUSH
56066: PPUSH
// result := false ;
56067: LD_ADDR_VAR 0 3
56071: PUSH
56072: LD_INT 0
56074: ST_TO_ADDR
// if not building then
56075: LD_VAR 0 2
56079: NOT
56080: IFFALSE 56084
// exit ;
56082: GO 56222
// x := GetX ( building ) ;
56084: LD_ADDR_VAR 0 4
56088: PUSH
56089: LD_VAR 0 2
56093: PPUSH
56094: CALL_OW 250
56098: ST_TO_ADDR
// y := GetY ( building ) ;
56099: LD_ADDR_VAR 0 5
56103: PUSH
56104: LD_VAR 0 2
56108: PPUSH
56109: CALL_OW 251
56113: ST_TO_ADDR
// if not x or not y then
56114: LD_VAR 0 4
56118: NOT
56119: PUSH
56120: LD_VAR 0 5
56124: NOT
56125: OR
56126: IFFALSE 56130
// exit ;
56128: GO 56222
// if GetTaskList ( unit ) then
56130: LD_VAR 0 1
56134: PPUSH
56135: CALL_OW 437
56139: IFFALSE 56222
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56141: LD_STRING e
56143: PUSH
56144: LD_VAR 0 1
56148: PPUSH
56149: CALL_OW 437
56153: PUSH
56154: LD_INT 1
56156: ARRAY
56157: PUSH
56158: LD_INT 1
56160: ARRAY
56161: EQUAL
56162: PUSH
56163: LD_VAR 0 4
56167: PUSH
56168: LD_VAR 0 1
56172: PPUSH
56173: CALL_OW 437
56177: PUSH
56178: LD_INT 1
56180: ARRAY
56181: PUSH
56182: LD_INT 2
56184: ARRAY
56185: EQUAL
56186: AND
56187: PUSH
56188: LD_VAR 0 5
56192: PUSH
56193: LD_VAR 0 1
56197: PPUSH
56198: CALL_OW 437
56202: PUSH
56203: LD_INT 1
56205: ARRAY
56206: PUSH
56207: LD_INT 3
56209: ARRAY
56210: EQUAL
56211: AND
56212: IFFALSE 56222
// result := true end ;
56214: LD_ADDR_VAR 0 3
56218: PUSH
56219: LD_INT 1
56221: ST_TO_ADDR
// end ;
56222: LD_VAR 0 3
56226: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56227: LD_INT 0
56229: PPUSH
// result := false ;
56230: LD_ADDR_VAR 0 4
56234: PUSH
56235: LD_INT 0
56237: ST_TO_ADDR
// if GetTaskList ( unit ) then
56238: LD_VAR 0 1
56242: PPUSH
56243: CALL_OW 437
56247: IFFALSE 56330
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56249: LD_STRING M
56251: PUSH
56252: LD_VAR 0 1
56256: PPUSH
56257: CALL_OW 437
56261: PUSH
56262: LD_INT 1
56264: ARRAY
56265: PUSH
56266: LD_INT 1
56268: ARRAY
56269: EQUAL
56270: PUSH
56271: LD_VAR 0 2
56275: PUSH
56276: LD_VAR 0 1
56280: PPUSH
56281: CALL_OW 437
56285: PUSH
56286: LD_INT 1
56288: ARRAY
56289: PUSH
56290: LD_INT 2
56292: ARRAY
56293: EQUAL
56294: AND
56295: PUSH
56296: LD_VAR 0 3
56300: PUSH
56301: LD_VAR 0 1
56305: PPUSH
56306: CALL_OW 437
56310: PUSH
56311: LD_INT 1
56313: ARRAY
56314: PUSH
56315: LD_INT 3
56317: ARRAY
56318: EQUAL
56319: AND
56320: IFFALSE 56330
// result := true ;
56322: LD_ADDR_VAR 0 4
56326: PUSH
56327: LD_INT 1
56329: ST_TO_ADDR
// end ; end ;
56330: LD_VAR 0 4
56334: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56335: LD_INT 0
56337: PPUSH
56338: PPUSH
56339: PPUSH
56340: PPUSH
// if not unit or not area then
56341: LD_VAR 0 1
56345: NOT
56346: PUSH
56347: LD_VAR 0 2
56351: NOT
56352: OR
56353: IFFALSE 56357
// exit ;
56355: GO 56520
// tmp := AreaToList ( area , i ) ;
56357: LD_ADDR_VAR 0 6
56361: PUSH
56362: LD_VAR 0 2
56366: PPUSH
56367: LD_VAR 0 5
56371: PPUSH
56372: CALL_OW 517
56376: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56377: LD_ADDR_VAR 0 5
56381: PUSH
56382: DOUBLE
56383: LD_INT 1
56385: DEC
56386: ST_TO_ADDR
56387: LD_VAR 0 6
56391: PUSH
56392: LD_INT 1
56394: ARRAY
56395: PUSH
56396: FOR_TO
56397: IFFALSE 56518
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56399: LD_ADDR_VAR 0 7
56403: PUSH
56404: LD_VAR 0 6
56408: PUSH
56409: LD_INT 1
56411: ARRAY
56412: PUSH
56413: LD_VAR 0 5
56417: ARRAY
56418: PUSH
56419: LD_VAR 0 6
56423: PUSH
56424: LD_INT 2
56426: ARRAY
56427: PUSH
56428: LD_VAR 0 5
56432: ARRAY
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
56438: LD_INT 92
56440: PUSH
56441: LD_VAR 0 7
56445: PUSH
56446: LD_INT 1
56448: ARRAY
56449: PUSH
56450: LD_VAR 0 7
56454: PUSH
56455: LD_INT 2
56457: ARRAY
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: PPUSH
56468: CALL_OW 69
56472: PUSH
56473: LD_INT 0
56475: EQUAL
56476: IFFALSE 56516
// begin PlaceUnitArea ( unit , area , mode ) ;
56478: LD_VAR 0 1
56482: PPUSH
56483: LD_VAR 0 2
56487: PPUSH
56488: LD_VAR 0 3
56492: PPUSH
56493: CALL_OW 49
// result := IsPlaced ( unit ) ;
56497: LD_ADDR_VAR 0 4
56501: PUSH
56502: LD_VAR 0 1
56506: PPUSH
56507: CALL_OW 305
56511: ST_TO_ADDR
// exit ;
56512: POP
56513: POP
56514: GO 56520
// end ; end ;
56516: GO 56396
56518: POP
56519: POP
// end ;
56520: LD_VAR 0 4
56524: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56525: LD_INT 0
56527: PPUSH
56528: PPUSH
56529: PPUSH
// if not side or side > 8 then
56530: LD_VAR 0 1
56534: NOT
56535: PUSH
56536: LD_VAR 0 1
56540: PUSH
56541: LD_INT 8
56543: GREATER
56544: OR
56545: IFFALSE 56549
// exit ;
56547: GO 56736
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56549: LD_ADDR_VAR 0 4
56553: PUSH
56554: LD_INT 22
56556: PUSH
56557: LD_VAR 0 1
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 21
56568: PUSH
56569: LD_INT 3
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PPUSH
56580: CALL_OW 69
56584: ST_TO_ADDR
// if not tmp then
56585: LD_VAR 0 4
56589: NOT
56590: IFFALSE 56594
// exit ;
56592: GO 56736
// enable_addtolog := true ;
56594: LD_ADDR_OWVAR 81
56598: PUSH
56599: LD_INT 1
56601: ST_TO_ADDR
// AddToLog ( [ ) ;
56602: LD_STRING [
56604: PPUSH
56605: CALL_OW 561
// for i in tmp do
56609: LD_ADDR_VAR 0 3
56613: PUSH
56614: LD_VAR 0 4
56618: PUSH
56619: FOR_IN
56620: IFFALSE 56727
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56622: LD_STRING [
56624: PUSH
56625: LD_VAR 0 3
56629: PPUSH
56630: CALL_OW 266
56634: STR
56635: PUSH
56636: LD_STRING , 
56638: STR
56639: PUSH
56640: LD_VAR 0 3
56644: PPUSH
56645: CALL_OW 250
56649: STR
56650: PUSH
56651: LD_STRING , 
56653: STR
56654: PUSH
56655: LD_VAR 0 3
56659: PPUSH
56660: CALL_OW 251
56664: STR
56665: PUSH
56666: LD_STRING , 
56668: STR
56669: PUSH
56670: LD_VAR 0 3
56674: PPUSH
56675: CALL_OW 254
56679: STR
56680: PUSH
56681: LD_STRING , 
56683: STR
56684: PUSH
56685: LD_VAR 0 3
56689: PPUSH
56690: LD_INT 1
56692: PPUSH
56693: CALL_OW 268
56697: STR
56698: PUSH
56699: LD_STRING , 
56701: STR
56702: PUSH
56703: LD_VAR 0 3
56707: PPUSH
56708: LD_INT 2
56710: PPUSH
56711: CALL_OW 268
56715: STR
56716: PUSH
56717: LD_STRING ],
56719: STR
56720: PPUSH
56721: CALL_OW 561
// end ;
56725: GO 56619
56727: POP
56728: POP
// AddToLog ( ]; ) ;
56729: LD_STRING ];
56731: PPUSH
56732: CALL_OW 561
// end ;
56736: LD_VAR 0 2
56740: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56741: LD_INT 0
56743: PPUSH
56744: PPUSH
56745: PPUSH
56746: PPUSH
56747: PPUSH
// if not area or not rate or not max then
56748: LD_VAR 0 1
56752: NOT
56753: PUSH
56754: LD_VAR 0 2
56758: NOT
56759: OR
56760: PUSH
56761: LD_VAR 0 4
56765: NOT
56766: OR
56767: IFFALSE 56771
// exit ;
56769: GO 56960
// while 1 do
56771: LD_INT 1
56773: IFFALSE 56960
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56775: LD_ADDR_VAR 0 9
56779: PUSH
56780: LD_VAR 0 1
56784: PPUSH
56785: LD_INT 1
56787: PPUSH
56788: CALL_OW 287
56792: PUSH
56793: LD_INT 10
56795: MUL
56796: ST_TO_ADDR
// r := rate / 10 ;
56797: LD_ADDR_VAR 0 7
56801: PUSH
56802: LD_VAR 0 2
56806: PUSH
56807: LD_INT 10
56809: DIVREAL
56810: ST_TO_ADDR
// time := 1 1$00 ;
56811: LD_ADDR_VAR 0 8
56815: PUSH
56816: LD_INT 2100
56818: ST_TO_ADDR
// if amount < min then
56819: LD_VAR 0 9
56823: PUSH
56824: LD_VAR 0 3
56828: LESS
56829: IFFALSE 56847
// r := r * 2 else
56831: LD_ADDR_VAR 0 7
56835: PUSH
56836: LD_VAR 0 7
56840: PUSH
56841: LD_INT 2
56843: MUL
56844: ST_TO_ADDR
56845: GO 56873
// if amount > max then
56847: LD_VAR 0 9
56851: PUSH
56852: LD_VAR 0 4
56856: GREATER
56857: IFFALSE 56873
// r := r / 2 ;
56859: LD_ADDR_VAR 0 7
56863: PUSH
56864: LD_VAR 0 7
56868: PUSH
56869: LD_INT 2
56871: DIVREAL
56872: ST_TO_ADDR
// time := time / r ;
56873: LD_ADDR_VAR 0 8
56877: PUSH
56878: LD_VAR 0 8
56882: PUSH
56883: LD_VAR 0 7
56887: DIVREAL
56888: ST_TO_ADDR
// if time < 0 then
56889: LD_VAR 0 8
56893: PUSH
56894: LD_INT 0
56896: LESS
56897: IFFALSE 56914
// time := time * - 1 ;
56899: LD_ADDR_VAR 0 8
56903: PUSH
56904: LD_VAR 0 8
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: MUL
56913: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
56914: LD_VAR 0 8
56918: PUSH
56919: LD_INT 35
56921: PPUSH
56922: LD_INT 875
56924: PPUSH
56925: CALL_OW 12
56929: PLUS
56930: PPUSH
56931: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56935: LD_INT 1
56937: PPUSH
56938: LD_INT 5
56940: PPUSH
56941: CALL_OW 12
56945: PPUSH
56946: LD_VAR 0 1
56950: PPUSH
56951: LD_INT 1
56953: PPUSH
56954: CALL_OW 55
// end ;
56958: GO 56771
// end ;
56960: LD_VAR 0 5
56964: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56965: LD_INT 0
56967: PPUSH
56968: PPUSH
56969: PPUSH
56970: PPUSH
56971: PPUSH
56972: PPUSH
56973: PPUSH
56974: PPUSH
// if not turrets or not factories then
56975: LD_VAR 0 1
56979: NOT
56980: PUSH
56981: LD_VAR 0 2
56985: NOT
56986: OR
56987: IFFALSE 56991
// exit ;
56989: GO 57298
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56991: LD_ADDR_VAR 0 10
56995: PUSH
56996: LD_INT 5
56998: PUSH
56999: LD_INT 6
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 4
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: LD_INT 5
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 24
57033: PUSH
57034: LD_INT 25
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 23
57043: PUSH
57044: LD_INT 27
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 42
57057: PUSH
57058: LD_INT 43
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 44
57067: PUSH
57068: LD_INT 46
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 45
57077: PUSH
57078: LD_INT 47
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// result := [ ] ;
57095: LD_ADDR_VAR 0 3
57099: PUSH
57100: EMPTY
57101: ST_TO_ADDR
// for i in turrets do
57102: LD_ADDR_VAR 0 4
57106: PUSH
57107: LD_VAR 0 1
57111: PUSH
57112: FOR_IN
57113: IFFALSE 57296
// begin nat := GetNation ( i ) ;
57115: LD_ADDR_VAR 0 7
57119: PUSH
57120: LD_VAR 0 4
57124: PPUSH
57125: CALL_OW 248
57129: ST_TO_ADDR
// weapon := 0 ;
57130: LD_ADDR_VAR 0 8
57134: PUSH
57135: LD_INT 0
57137: ST_TO_ADDR
// if not nat then
57138: LD_VAR 0 7
57142: NOT
57143: IFFALSE 57147
// continue ;
57145: GO 57112
// for j in list [ nat ] do
57147: LD_ADDR_VAR 0 5
57151: PUSH
57152: LD_VAR 0 10
57156: PUSH
57157: LD_VAR 0 7
57161: ARRAY
57162: PUSH
57163: FOR_IN
57164: IFFALSE 57205
// if GetBWeapon ( i ) = j [ 1 ] then
57166: LD_VAR 0 4
57170: PPUSH
57171: CALL_OW 269
57175: PUSH
57176: LD_VAR 0 5
57180: PUSH
57181: LD_INT 1
57183: ARRAY
57184: EQUAL
57185: IFFALSE 57203
// begin weapon := j [ 2 ] ;
57187: LD_ADDR_VAR 0 8
57191: PUSH
57192: LD_VAR 0 5
57196: PUSH
57197: LD_INT 2
57199: ARRAY
57200: ST_TO_ADDR
// break ;
57201: GO 57205
// end ;
57203: GO 57163
57205: POP
57206: POP
// if not weapon then
57207: LD_VAR 0 8
57211: NOT
57212: IFFALSE 57216
// continue ;
57214: GO 57112
// for k in factories do
57216: LD_ADDR_VAR 0 6
57220: PUSH
57221: LD_VAR 0 2
57225: PUSH
57226: FOR_IN
57227: IFFALSE 57292
// begin weapons := AvailableWeaponList ( k ) ;
57229: LD_ADDR_VAR 0 9
57233: PUSH
57234: LD_VAR 0 6
57238: PPUSH
57239: CALL_OW 478
57243: ST_TO_ADDR
// if not weapons then
57244: LD_VAR 0 9
57248: NOT
57249: IFFALSE 57253
// continue ;
57251: GO 57226
// if weapon in weapons then
57253: LD_VAR 0 8
57257: PUSH
57258: LD_VAR 0 9
57262: IN
57263: IFFALSE 57290
// begin result := [ i , weapon ] ;
57265: LD_ADDR_VAR 0 3
57269: PUSH
57270: LD_VAR 0 4
57274: PUSH
57275: LD_VAR 0 8
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: ST_TO_ADDR
// exit ;
57284: POP
57285: POP
57286: POP
57287: POP
57288: GO 57298
// end ; end ;
57290: GO 57226
57292: POP
57293: POP
// end ;
57294: GO 57112
57296: POP
57297: POP
// end ;
57298: LD_VAR 0 3
57302: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57303: LD_INT 0
57305: PPUSH
// if not side or side > 8 then
57306: LD_VAR 0 3
57310: NOT
57311: PUSH
57312: LD_VAR 0 3
57316: PUSH
57317: LD_INT 8
57319: GREATER
57320: OR
57321: IFFALSE 57325
// exit ;
57323: GO 57384
// if not range then
57325: LD_VAR 0 4
57329: NOT
57330: IFFALSE 57341
// range := - 12 ;
57332: LD_ADDR_VAR 0 4
57336: PUSH
57337: LD_INT 12
57339: NEG
57340: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57341: LD_VAR 0 1
57345: PPUSH
57346: LD_VAR 0 2
57350: PPUSH
57351: LD_VAR 0 3
57355: PPUSH
57356: LD_VAR 0 4
57360: PPUSH
57361: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57365: LD_VAR 0 1
57369: PPUSH
57370: LD_VAR 0 2
57374: PPUSH
57375: LD_VAR 0 3
57379: PPUSH
57380: CALL_OW 331
// end ;
57384: LD_VAR 0 5
57388: RET
// export function Video ( mode ) ; begin
57389: LD_INT 0
57391: PPUSH
// ingame_video = mode ;
57392: LD_ADDR_OWVAR 52
57396: PUSH
57397: LD_VAR 0 1
57401: ST_TO_ADDR
// interface_hidden = mode ;
57402: LD_ADDR_OWVAR 54
57406: PUSH
57407: LD_VAR 0 1
57411: ST_TO_ADDR
// end ;
57412: LD_VAR 0 2
57416: RET
// export function Join ( array , element ) ; begin
57417: LD_INT 0
57419: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57420: LD_ADDR_VAR 0 3
57424: PUSH
57425: LD_VAR 0 1
57429: PPUSH
57430: LD_VAR 0 1
57434: PUSH
57435: LD_INT 1
57437: PLUS
57438: PPUSH
57439: LD_VAR 0 2
57443: PPUSH
57444: CALL_OW 1
57448: ST_TO_ADDR
// end ;
57449: LD_VAR 0 3
57453: RET
// export function JoinUnion ( array , element ) ; begin
57454: LD_INT 0
57456: PPUSH
// result := array union element ;
57457: LD_ADDR_VAR 0 3
57461: PUSH
57462: LD_VAR 0 1
57466: PUSH
57467: LD_VAR 0 2
57471: UNION
57472: ST_TO_ADDR
// end ;
57473: LD_VAR 0 3
57477: RET
// export function GetBehemoths ( side ) ; begin
57478: LD_INT 0
57480: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
57481: LD_ADDR_VAR 0 2
57485: PUSH
57486: LD_INT 22
57488: PUSH
57489: LD_VAR 0 1
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 31
57500: PUSH
57501: LD_INT 25
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PPUSH
57512: CALL_OW 69
57516: ST_TO_ADDR
// end ;
57517: LD_VAR 0 2
57521: RET
// export function Shuffle ( array ) ; var i , index ; begin
57522: LD_INT 0
57524: PPUSH
57525: PPUSH
57526: PPUSH
// result := [ ] ;
57527: LD_ADDR_VAR 0 2
57531: PUSH
57532: EMPTY
57533: ST_TO_ADDR
// if not array then
57534: LD_VAR 0 1
57538: NOT
57539: IFFALSE 57543
// exit ;
57541: GO 57642
// Randomize ;
57543: CALL_OW 10
// for i = array downto 1 do
57547: LD_ADDR_VAR 0 3
57551: PUSH
57552: DOUBLE
57553: LD_VAR 0 1
57557: INC
57558: ST_TO_ADDR
57559: LD_INT 1
57561: PUSH
57562: FOR_DOWNTO
57563: IFFALSE 57640
// begin index := rand ( 1 , array ) ;
57565: LD_ADDR_VAR 0 4
57569: PUSH
57570: LD_INT 1
57572: PPUSH
57573: LD_VAR 0 1
57577: PPUSH
57578: CALL_OW 12
57582: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57583: LD_ADDR_VAR 0 2
57587: PUSH
57588: LD_VAR 0 2
57592: PPUSH
57593: LD_VAR 0 2
57597: PUSH
57598: LD_INT 1
57600: PLUS
57601: PPUSH
57602: LD_VAR 0 1
57606: PUSH
57607: LD_VAR 0 4
57611: ARRAY
57612: PPUSH
57613: CALL_OW 2
57617: ST_TO_ADDR
// array := Delete ( array , index ) ;
57618: LD_ADDR_VAR 0 1
57622: PUSH
57623: LD_VAR 0 1
57627: PPUSH
57628: LD_VAR 0 4
57632: PPUSH
57633: CALL_OW 3
57637: ST_TO_ADDR
// end ;
57638: GO 57562
57640: POP
57641: POP
// end ;
57642: LD_VAR 0 2
57646: RET
// export function GetBaseMaterials ( base ) ; begin
57647: LD_INT 0
57649: PPUSH
// result := [ 0 , 0 , 0 ] ;
57650: LD_ADDR_VAR 0 2
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// if not base then
57669: LD_VAR 0 1
57673: NOT
57674: IFFALSE 57678
// exit ;
57676: GO 57727
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57678: LD_ADDR_VAR 0 2
57682: PUSH
57683: LD_VAR 0 1
57687: PPUSH
57688: LD_INT 1
57690: PPUSH
57691: CALL_OW 275
57695: PUSH
57696: LD_VAR 0 1
57700: PPUSH
57701: LD_INT 2
57703: PPUSH
57704: CALL_OW 275
57708: PUSH
57709: LD_VAR 0 1
57713: PPUSH
57714: LD_INT 3
57716: PPUSH
57717: CALL_OW 275
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: LIST
57726: ST_TO_ADDR
// end ;
57727: LD_VAR 0 2
57731: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57732: LD_INT 0
57734: PPUSH
57735: PPUSH
// result := array ;
57736: LD_ADDR_VAR 0 3
57740: PUSH
57741: LD_VAR 0 1
57745: ST_TO_ADDR
// if size >= result then
57746: LD_VAR 0 2
57750: PUSH
57751: LD_VAR 0 3
57755: GREATEREQUAL
57756: IFFALSE 57760
// exit ;
57758: GO 57810
// if size then
57760: LD_VAR 0 2
57764: IFFALSE 57810
// for i := array downto size do
57766: LD_ADDR_VAR 0 4
57770: PUSH
57771: DOUBLE
57772: LD_VAR 0 1
57776: INC
57777: ST_TO_ADDR
57778: LD_VAR 0 2
57782: PUSH
57783: FOR_DOWNTO
57784: IFFALSE 57808
// result := Delete ( result , result ) ;
57786: LD_ADDR_VAR 0 3
57790: PUSH
57791: LD_VAR 0 3
57795: PPUSH
57796: LD_VAR 0 3
57800: PPUSH
57801: CALL_OW 3
57805: ST_TO_ADDR
57806: GO 57783
57808: POP
57809: POP
// end ;
57810: LD_VAR 0 3
57814: RET
// export function ComExit ( unit ) ; var tmp ; begin
57815: LD_INT 0
57817: PPUSH
57818: PPUSH
// if not IsInUnit ( unit ) then
57819: LD_VAR 0 1
57823: PPUSH
57824: CALL_OW 310
57828: NOT
57829: IFFALSE 57833
// exit ;
57831: GO 57893
// tmp := IsInUnit ( unit ) ;
57833: LD_ADDR_VAR 0 3
57837: PUSH
57838: LD_VAR 0 1
57842: PPUSH
57843: CALL_OW 310
57847: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57848: LD_VAR 0 3
57852: PPUSH
57853: CALL_OW 247
57857: PUSH
57858: LD_INT 2
57860: EQUAL
57861: IFFALSE 57874
// ComExitVehicle ( unit ) else
57863: LD_VAR 0 1
57867: PPUSH
57868: CALL_OW 121
57872: GO 57883
// ComExitBuilding ( unit ) ;
57874: LD_VAR 0 1
57878: PPUSH
57879: CALL_OW 122
// result := tmp ;
57883: LD_ADDR_VAR 0 2
57887: PUSH
57888: LD_VAR 0 3
57892: ST_TO_ADDR
// end ;
57893: LD_VAR 0 2
57897: RET
// export function ComExitAll ( units ) ; var i ; begin
57898: LD_INT 0
57900: PPUSH
57901: PPUSH
// if not units then
57902: LD_VAR 0 1
57906: NOT
57907: IFFALSE 57911
// exit ;
57909: GO 57937
// for i in units do
57911: LD_ADDR_VAR 0 3
57915: PUSH
57916: LD_VAR 0 1
57920: PUSH
57921: FOR_IN
57922: IFFALSE 57935
// ComExit ( i ) ;
57924: LD_VAR 0 3
57928: PPUSH
57929: CALL 57815 0 1
57933: GO 57921
57935: POP
57936: POP
// end ;
57937: LD_VAR 0 2
57941: RET
// export function ResetHc ; begin
57942: LD_INT 0
57944: PPUSH
// InitHc ;
57945: CALL_OW 19
// hc_importance := 0 ;
57949: LD_ADDR_OWVAR 32
57953: PUSH
57954: LD_INT 0
57956: ST_TO_ADDR
// end ;
57957: LD_VAR 0 1
57961: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57962: LD_INT 0
57964: PPUSH
57965: PPUSH
57966: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57967: LD_ADDR_VAR 0 6
57971: PUSH
57972: LD_VAR 0 1
57976: PUSH
57977: LD_VAR 0 3
57981: PLUS
57982: PUSH
57983: LD_INT 2
57985: DIV
57986: ST_TO_ADDR
// if _x < 0 then
57987: LD_VAR 0 6
57991: PUSH
57992: LD_INT 0
57994: LESS
57995: IFFALSE 58012
// _x := _x * - 1 ;
57997: LD_ADDR_VAR 0 6
58001: PUSH
58002: LD_VAR 0 6
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: MUL
58011: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58012: LD_ADDR_VAR 0 7
58016: PUSH
58017: LD_VAR 0 2
58021: PUSH
58022: LD_VAR 0 4
58026: PLUS
58027: PUSH
58028: LD_INT 2
58030: DIV
58031: ST_TO_ADDR
// if _y < 0 then
58032: LD_VAR 0 7
58036: PUSH
58037: LD_INT 0
58039: LESS
58040: IFFALSE 58057
// _y := _y * - 1 ;
58042: LD_ADDR_VAR 0 7
58046: PUSH
58047: LD_VAR 0 7
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: MUL
58056: ST_TO_ADDR
// result := [ _x , _y ] ;
58057: LD_ADDR_VAR 0 5
58061: PUSH
58062: LD_VAR 0 6
58066: PUSH
58067: LD_VAR 0 7
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: ST_TO_ADDR
// end ;
58076: LD_VAR 0 5
58080: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58081: LD_INT 0
58083: PPUSH
58084: PPUSH
58085: PPUSH
58086: PPUSH
// task := GetTaskList ( unit ) ;
58087: LD_ADDR_VAR 0 7
58091: PUSH
58092: LD_VAR 0 1
58096: PPUSH
58097: CALL_OW 437
58101: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58102: LD_VAR 0 7
58106: NOT
58107: PUSH
58108: LD_VAR 0 1
58112: PPUSH
58113: LD_VAR 0 2
58117: PPUSH
58118: CALL_OW 308
58122: NOT
58123: AND
58124: IFFALSE 58128
// exit ;
58126: GO 58246
// if IsInArea ( unit , area ) then
58128: LD_VAR 0 1
58132: PPUSH
58133: LD_VAR 0 2
58137: PPUSH
58138: CALL_OW 308
58142: IFFALSE 58160
// begin ComMoveToArea ( unit , goAway ) ;
58144: LD_VAR 0 1
58148: PPUSH
58149: LD_VAR 0 3
58153: PPUSH
58154: CALL_OW 113
// exit ;
58158: GO 58246
// end ; if task [ 1 ] [ 1 ] <> M then
58160: LD_VAR 0 7
58164: PUSH
58165: LD_INT 1
58167: ARRAY
58168: PUSH
58169: LD_INT 1
58171: ARRAY
58172: PUSH
58173: LD_STRING M
58175: NONEQUAL
58176: IFFALSE 58180
// exit ;
58178: GO 58246
// x := task [ 1 ] [ 2 ] ;
58180: LD_ADDR_VAR 0 5
58184: PUSH
58185: LD_VAR 0 7
58189: PUSH
58190: LD_INT 1
58192: ARRAY
58193: PUSH
58194: LD_INT 2
58196: ARRAY
58197: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58198: LD_ADDR_VAR 0 6
58202: PUSH
58203: LD_VAR 0 7
58207: PUSH
58208: LD_INT 1
58210: ARRAY
58211: PUSH
58212: LD_INT 3
58214: ARRAY
58215: ST_TO_ADDR
// if InArea ( x , y , area ) then
58216: LD_VAR 0 5
58220: PPUSH
58221: LD_VAR 0 6
58225: PPUSH
58226: LD_VAR 0 2
58230: PPUSH
58231: CALL_OW 309
58235: IFFALSE 58246
// ComStop ( unit ) ;
58237: LD_VAR 0 1
58241: PPUSH
58242: CALL_OW 141
// end ;
58246: LD_VAR 0 4
58250: RET
// export function Abs ( value ) ; begin
58251: LD_INT 0
58253: PPUSH
// result := value ;
58254: LD_ADDR_VAR 0 2
58258: PUSH
58259: LD_VAR 0 1
58263: ST_TO_ADDR
// if value < 0 then
58264: LD_VAR 0 1
58268: PUSH
58269: LD_INT 0
58271: LESS
58272: IFFALSE 58289
// result := value * - 1 ;
58274: LD_ADDR_VAR 0 2
58278: PUSH
58279: LD_VAR 0 1
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: MUL
58288: ST_TO_ADDR
// end ;
58289: LD_VAR 0 2
58293: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58294: LD_INT 0
58296: PPUSH
58297: PPUSH
58298: PPUSH
58299: PPUSH
58300: PPUSH
58301: PPUSH
58302: PPUSH
58303: PPUSH
// if not unit or not building then
58304: LD_VAR 0 1
58308: NOT
58309: PUSH
58310: LD_VAR 0 2
58314: NOT
58315: OR
58316: IFFALSE 58320
// exit ;
58318: GO 58546
// x := GetX ( building ) ;
58320: LD_ADDR_VAR 0 4
58324: PUSH
58325: LD_VAR 0 2
58329: PPUSH
58330: CALL_OW 250
58334: ST_TO_ADDR
// y := GetY ( building ) ;
58335: LD_ADDR_VAR 0 6
58339: PUSH
58340: LD_VAR 0 2
58344: PPUSH
58345: CALL_OW 251
58349: ST_TO_ADDR
// d := GetDir ( building ) ;
58350: LD_ADDR_VAR 0 8
58354: PUSH
58355: LD_VAR 0 2
58359: PPUSH
58360: CALL_OW 254
58364: ST_TO_ADDR
// r := 4 ;
58365: LD_ADDR_VAR 0 9
58369: PUSH
58370: LD_INT 4
58372: ST_TO_ADDR
// for i := 1 to 5 do
58373: LD_ADDR_VAR 0 10
58377: PUSH
58378: DOUBLE
58379: LD_INT 1
58381: DEC
58382: ST_TO_ADDR
58383: LD_INT 5
58385: PUSH
58386: FOR_TO
58387: IFFALSE 58544
// begin _x := ShiftX ( x , d , r + i ) ;
58389: LD_ADDR_VAR 0 5
58393: PUSH
58394: LD_VAR 0 4
58398: PPUSH
58399: LD_VAR 0 8
58403: PPUSH
58404: LD_VAR 0 9
58408: PUSH
58409: LD_VAR 0 10
58413: PLUS
58414: PPUSH
58415: CALL_OW 272
58419: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58420: LD_ADDR_VAR 0 7
58424: PUSH
58425: LD_VAR 0 6
58429: PPUSH
58430: LD_VAR 0 8
58434: PPUSH
58435: LD_VAR 0 9
58439: PUSH
58440: LD_VAR 0 10
58444: PLUS
58445: PPUSH
58446: CALL_OW 273
58450: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58451: LD_VAR 0 5
58455: PPUSH
58456: LD_VAR 0 7
58460: PPUSH
58461: CALL_OW 488
58465: PUSH
58466: LD_VAR 0 5
58470: PPUSH
58471: LD_VAR 0 7
58475: PPUSH
58476: CALL_OW 428
58480: PPUSH
58481: CALL_OW 247
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: IN
58496: NOT
58497: AND
58498: IFFALSE 58542
// begin ComMoveXY ( unit , _x , _y ) ;
58500: LD_VAR 0 1
58504: PPUSH
58505: LD_VAR 0 5
58509: PPUSH
58510: LD_VAR 0 7
58514: PPUSH
58515: CALL_OW 111
// result := [ _x , _y ] ;
58519: LD_ADDR_VAR 0 3
58523: PUSH
58524: LD_VAR 0 5
58528: PUSH
58529: LD_VAR 0 7
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: ST_TO_ADDR
// exit ;
58538: POP
58539: POP
58540: GO 58546
// end ; end ;
58542: GO 58386
58544: POP
58545: POP
// end ;
58546: LD_VAR 0 3
58550: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58551: LD_INT 0
58553: PPUSH
58554: PPUSH
58555: PPUSH
// result := 0 ;
58556: LD_ADDR_VAR 0 3
58560: PUSH
58561: LD_INT 0
58563: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58564: LD_VAR 0 1
58568: PUSH
58569: LD_INT 0
58571: LESS
58572: PUSH
58573: LD_VAR 0 1
58577: PUSH
58578: LD_INT 8
58580: GREATER
58581: OR
58582: PUSH
58583: LD_VAR 0 2
58587: PUSH
58588: LD_INT 0
58590: LESS
58591: OR
58592: PUSH
58593: LD_VAR 0 2
58597: PUSH
58598: LD_INT 8
58600: GREATER
58601: OR
58602: IFFALSE 58606
// exit ;
58604: GO 58681
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58606: LD_ADDR_VAR 0 4
58610: PUSH
58611: LD_INT 22
58613: PUSH
58614: LD_VAR 0 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PPUSH
58623: CALL_OW 69
58627: PUSH
58628: FOR_IN
58629: IFFALSE 58679
// begin un := UnitShoot ( i ) ;
58631: LD_ADDR_VAR 0 5
58635: PUSH
58636: LD_VAR 0 4
58640: PPUSH
58641: CALL_OW 504
58645: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58646: LD_VAR 0 5
58650: PPUSH
58651: CALL_OW 255
58655: PUSH
58656: LD_VAR 0 1
58660: EQUAL
58661: IFFALSE 58677
// begin result := un ;
58663: LD_ADDR_VAR 0 3
58667: PUSH
58668: LD_VAR 0 5
58672: ST_TO_ADDR
// exit ;
58673: POP
58674: POP
58675: GO 58681
// end ; end ;
58677: GO 58628
58679: POP
58680: POP
// end ;
58681: LD_VAR 0 3
58685: RET
// export function GetCargoBay ( units ) ; begin
58686: LD_INT 0
58688: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58689: LD_ADDR_VAR 0 2
58693: PUSH
58694: LD_VAR 0 1
58698: PPUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 34
58704: PUSH
58705: LD_INT 12
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 34
58714: PUSH
58715: LD_INT 51
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 34
58724: PUSH
58725: LD_INT 32
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 34
58734: PUSH
58735: LD_INT 89
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: PPUSH
58749: CALL_OW 72
58753: ST_TO_ADDR
// end ;
58754: LD_VAR 0 2
58758: RET
// export function Negate ( value ) ; begin
58759: LD_INT 0
58761: PPUSH
// result := not value ;
58762: LD_ADDR_VAR 0 2
58766: PUSH
58767: LD_VAR 0 1
58771: NOT
58772: ST_TO_ADDR
// end ;
58773: LD_VAR 0 2
58777: RET
// export function Inc ( value ) ; begin
58778: LD_INT 0
58780: PPUSH
// result := value + 1 ;
58781: LD_ADDR_VAR 0 2
58785: PUSH
58786: LD_VAR 0 1
58790: PUSH
58791: LD_INT 1
58793: PLUS
58794: ST_TO_ADDR
// end ;
58795: LD_VAR 0 2
58799: RET
// export function Dec ( value ) ; begin
58800: LD_INT 0
58802: PPUSH
// result := value - 1 ;
58803: LD_ADDR_VAR 0 2
58807: PUSH
58808: LD_VAR 0 1
58812: PUSH
58813: LD_INT 1
58815: MINUS
58816: ST_TO_ADDR
// end ;
58817: LD_VAR 0 2
58821: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58822: LD_INT 0
58824: PPUSH
58825: PPUSH
58826: PPUSH
58827: PPUSH
58828: PPUSH
58829: PPUSH
58830: PPUSH
58831: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58832: LD_VAR 0 1
58836: PPUSH
58837: LD_VAR 0 2
58841: PPUSH
58842: CALL_OW 488
58846: NOT
58847: PUSH
58848: LD_VAR 0 3
58852: PPUSH
58853: LD_VAR 0 4
58857: PPUSH
58858: CALL_OW 488
58862: NOT
58863: OR
58864: IFFALSE 58877
// begin result := - 1 ;
58866: LD_ADDR_VAR 0 5
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: ST_TO_ADDR
// exit ;
58875: GO 59112
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58877: LD_ADDR_VAR 0 12
58881: PUSH
58882: LD_VAR 0 1
58886: PPUSH
58887: LD_VAR 0 2
58891: PPUSH
58892: LD_VAR 0 3
58896: PPUSH
58897: LD_VAR 0 4
58901: PPUSH
58902: CALL 57962 0 4
58906: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58907: LD_ADDR_VAR 0 11
58911: PUSH
58912: LD_VAR 0 1
58916: PPUSH
58917: LD_VAR 0 2
58921: PPUSH
58922: LD_VAR 0 12
58926: PUSH
58927: LD_INT 1
58929: ARRAY
58930: PPUSH
58931: LD_VAR 0 12
58935: PUSH
58936: LD_INT 2
58938: ARRAY
58939: PPUSH
58940: CALL_OW 298
58944: ST_TO_ADDR
// distance := 9999 ;
58945: LD_ADDR_VAR 0 10
58949: PUSH
58950: LD_INT 9999
58952: ST_TO_ADDR
// for i := 0 to 5 do
58953: LD_ADDR_VAR 0 6
58957: PUSH
58958: DOUBLE
58959: LD_INT 0
58961: DEC
58962: ST_TO_ADDR
58963: LD_INT 5
58965: PUSH
58966: FOR_TO
58967: IFFALSE 59110
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58969: LD_ADDR_VAR 0 7
58973: PUSH
58974: LD_VAR 0 1
58978: PPUSH
58979: LD_VAR 0 6
58983: PPUSH
58984: LD_VAR 0 11
58988: PPUSH
58989: CALL_OW 272
58993: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
58994: LD_ADDR_VAR 0 8
58998: PUSH
58999: LD_VAR 0 2
59003: PPUSH
59004: LD_VAR 0 6
59008: PPUSH
59009: LD_VAR 0 11
59013: PPUSH
59014: CALL_OW 273
59018: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59019: LD_VAR 0 7
59023: PPUSH
59024: LD_VAR 0 8
59028: PPUSH
59029: CALL_OW 488
59033: NOT
59034: IFFALSE 59038
// continue ;
59036: GO 58966
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59038: LD_ADDR_VAR 0 9
59042: PUSH
59043: LD_VAR 0 12
59047: PUSH
59048: LD_INT 1
59050: ARRAY
59051: PPUSH
59052: LD_VAR 0 12
59056: PUSH
59057: LD_INT 2
59059: ARRAY
59060: PPUSH
59061: LD_VAR 0 7
59065: PPUSH
59066: LD_VAR 0 8
59070: PPUSH
59071: CALL_OW 298
59075: ST_TO_ADDR
// if tmp < distance then
59076: LD_VAR 0 9
59080: PUSH
59081: LD_VAR 0 10
59085: LESS
59086: IFFALSE 59108
// begin result := i ;
59088: LD_ADDR_VAR 0 5
59092: PUSH
59093: LD_VAR 0 6
59097: ST_TO_ADDR
// distance := tmp ;
59098: LD_ADDR_VAR 0 10
59102: PUSH
59103: LD_VAR 0 9
59107: ST_TO_ADDR
// end ; end ;
59108: GO 58966
59110: POP
59111: POP
// end ;
59112: LD_VAR 0 5
59116: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59117: LD_INT 0
59119: PPUSH
59120: PPUSH
// if not driver or not IsInUnit ( driver ) then
59121: LD_VAR 0 1
59125: NOT
59126: PUSH
59127: LD_VAR 0 1
59131: PPUSH
59132: CALL_OW 310
59136: NOT
59137: OR
59138: IFFALSE 59142
// exit ;
59140: GO 59232
// vehicle := IsInUnit ( driver ) ;
59142: LD_ADDR_VAR 0 3
59146: PUSH
59147: LD_VAR 0 1
59151: PPUSH
59152: CALL_OW 310
59156: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59157: LD_VAR 0 1
59161: PPUSH
59162: LD_STRING \
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: PUSH
59192: LD_STRING E
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: LD_VAR 0 3
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PPUSH
59228: CALL_OW 446
// end ;
59232: LD_VAR 0 2
59236: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59237: LD_INT 0
59239: PPUSH
59240: PPUSH
// if not driver or not IsInUnit ( driver ) then
59241: LD_VAR 0 1
59245: NOT
59246: PUSH
59247: LD_VAR 0 1
59251: PPUSH
59252: CALL_OW 310
59256: NOT
59257: OR
59258: IFFALSE 59262
// exit ;
59260: GO 59352
// vehicle := IsInUnit ( driver ) ;
59262: LD_ADDR_VAR 0 3
59266: PUSH
59267: LD_VAR 0 1
59271: PPUSH
59272: CALL_OW 310
59276: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59277: LD_VAR 0 1
59281: PPUSH
59282: LD_STRING \
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: PUSH
59312: LD_STRING E
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_VAR 0 3
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PPUSH
59348: CALL_OW 447
// end ;
59352: LD_VAR 0 2
59356: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59357: LD_INT 0
59359: PPUSH
59360: PPUSH
59361: PPUSH
// tmp := [ ] ;
59362: LD_ADDR_VAR 0 5
59366: PUSH
59367: EMPTY
59368: ST_TO_ADDR
// for i in units do
59369: LD_ADDR_VAR 0 4
59373: PUSH
59374: LD_VAR 0 1
59378: PUSH
59379: FOR_IN
59380: IFFALSE 59418
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59382: LD_ADDR_VAR 0 5
59386: PUSH
59387: LD_VAR 0 5
59391: PPUSH
59392: LD_VAR 0 5
59396: PUSH
59397: LD_INT 1
59399: PLUS
59400: PPUSH
59401: LD_VAR 0 4
59405: PPUSH
59406: CALL_OW 256
59410: PPUSH
59411: CALL_OW 2
59415: ST_TO_ADDR
59416: GO 59379
59418: POP
59419: POP
// if not tmp then
59420: LD_VAR 0 5
59424: NOT
59425: IFFALSE 59429
// exit ;
59427: GO 59477
// if asc then
59429: LD_VAR 0 2
59433: IFFALSE 59457
// result := SortListByListAsc ( units , tmp ) else
59435: LD_ADDR_VAR 0 3
59439: PUSH
59440: LD_VAR 0 1
59444: PPUSH
59445: LD_VAR 0 5
59449: PPUSH
59450: CALL_OW 76
59454: ST_TO_ADDR
59455: GO 59477
// result := SortListByListDesc ( units , tmp ) ;
59457: LD_ADDR_VAR 0 3
59461: PUSH
59462: LD_VAR 0 1
59466: PPUSH
59467: LD_VAR 0 5
59471: PPUSH
59472: CALL_OW 77
59476: ST_TO_ADDR
// end ;
59477: LD_VAR 0 3
59481: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59482: LD_INT 0
59484: PPUSH
59485: PPUSH
// task := GetTaskList ( mech ) ;
59486: LD_ADDR_VAR 0 4
59490: PUSH
59491: LD_VAR 0 1
59495: PPUSH
59496: CALL_OW 437
59500: ST_TO_ADDR
// if not task then
59501: LD_VAR 0 4
59505: NOT
59506: IFFALSE 59510
// exit ;
59508: GO 59552
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59510: LD_ADDR_VAR 0 3
59514: PUSH
59515: LD_VAR 0 4
59519: PUSH
59520: LD_INT 1
59522: ARRAY
59523: PUSH
59524: LD_INT 1
59526: ARRAY
59527: PUSH
59528: LD_STRING r
59530: EQUAL
59531: PUSH
59532: LD_VAR 0 4
59536: PUSH
59537: LD_INT 1
59539: ARRAY
59540: PUSH
59541: LD_INT 4
59543: ARRAY
59544: PUSH
59545: LD_VAR 0 2
59549: EQUAL
59550: AND
59551: ST_TO_ADDR
// end ;
59552: LD_VAR 0 3
59556: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59557: LD_INT 0
59559: PPUSH
// SetDir ( unit , d ) ;
59560: LD_VAR 0 1
59564: PPUSH
59565: LD_VAR 0 4
59569: PPUSH
59570: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59574: LD_VAR 0 1
59578: PPUSH
59579: LD_VAR 0 2
59583: PPUSH
59584: LD_VAR 0 3
59588: PPUSH
59589: LD_VAR 0 5
59593: PPUSH
59594: CALL_OW 48
// end ;
59598: LD_VAR 0 6
59602: RET
// export function ToNaturalNumber ( number ) ; begin
59603: LD_INT 0
59605: PPUSH
// result := number div 1 ;
59606: LD_ADDR_VAR 0 2
59610: PUSH
59611: LD_VAR 0 1
59615: PUSH
59616: LD_INT 1
59618: DIV
59619: ST_TO_ADDR
// if number < 0 then
59620: LD_VAR 0 1
59624: PUSH
59625: LD_INT 0
59627: LESS
59628: IFFALSE 59638
// result := 0 ;
59630: LD_ADDR_VAR 0 2
59634: PUSH
59635: LD_INT 0
59637: ST_TO_ADDR
// end ;
59638: LD_VAR 0 2
59642: RET
// export function SortByClass ( units , class ) ; var un ; begin
59643: LD_INT 0
59645: PPUSH
59646: PPUSH
// if not units or not class then
59647: LD_VAR 0 1
59651: NOT
59652: PUSH
59653: LD_VAR 0 2
59657: NOT
59658: OR
59659: IFFALSE 59663
// exit ;
59661: GO 59758
// result := [ ] ;
59663: LD_ADDR_VAR 0 3
59667: PUSH
59668: EMPTY
59669: ST_TO_ADDR
// for un in units do
59670: LD_ADDR_VAR 0 4
59674: PUSH
59675: LD_VAR 0 1
59679: PUSH
59680: FOR_IN
59681: IFFALSE 59756
// if GetClass ( un ) = class then
59683: LD_VAR 0 4
59687: PPUSH
59688: CALL_OW 257
59692: PUSH
59693: LD_VAR 0 2
59697: EQUAL
59698: IFFALSE 59725
// result := Insert ( result , 1 , un ) else
59700: LD_ADDR_VAR 0 3
59704: PUSH
59705: LD_VAR 0 3
59709: PPUSH
59710: LD_INT 1
59712: PPUSH
59713: LD_VAR 0 4
59717: PPUSH
59718: CALL_OW 2
59722: ST_TO_ADDR
59723: GO 59754
// result := Replace ( result , result + 1 , un ) ;
59725: LD_ADDR_VAR 0 3
59729: PUSH
59730: LD_VAR 0 3
59734: PPUSH
59735: LD_VAR 0 3
59739: PUSH
59740: LD_INT 1
59742: PLUS
59743: PPUSH
59744: LD_VAR 0 4
59748: PPUSH
59749: CALL_OW 1
59753: ST_TO_ADDR
59754: GO 59680
59756: POP
59757: POP
// end ;
59758: LD_VAR 0 3
59762: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59763: LD_INT 0
59765: PPUSH
59766: PPUSH
59767: PPUSH
59768: PPUSH
59769: PPUSH
59770: PPUSH
59771: PPUSH
// result := [ ] ;
59772: LD_ADDR_VAR 0 4
59776: PUSH
59777: EMPTY
59778: ST_TO_ADDR
// if x - r < 0 then
59779: LD_VAR 0 1
59783: PUSH
59784: LD_VAR 0 3
59788: MINUS
59789: PUSH
59790: LD_INT 0
59792: LESS
59793: IFFALSE 59805
// min_x := 0 else
59795: LD_ADDR_VAR 0 8
59799: PUSH
59800: LD_INT 0
59802: ST_TO_ADDR
59803: GO 59821
// min_x := x - r ;
59805: LD_ADDR_VAR 0 8
59809: PUSH
59810: LD_VAR 0 1
59814: PUSH
59815: LD_VAR 0 3
59819: MINUS
59820: ST_TO_ADDR
// if y - r < 0 then
59821: LD_VAR 0 2
59825: PUSH
59826: LD_VAR 0 3
59830: MINUS
59831: PUSH
59832: LD_INT 0
59834: LESS
59835: IFFALSE 59847
// min_y := 0 else
59837: LD_ADDR_VAR 0 7
59841: PUSH
59842: LD_INT 0
59844: ST_TO_ADDR
59845: GO 59863
// min_y := y - r ;
59847: LD_ADDR_VAR 0 7
59851: PUSH
59852: LD_VAR 0 2
59856: PUSH
59857: LD_VAR 0 3
59861: MINUS
59862: ST_TO_ADDR
// max_x := x + r ;
59863: LD_ADDR_VAR 0 9
59867: PUSH
59868: LD_VAR 0 1
59872: PUSH
59873: LD_VAR 0 3
59877: PLUS
59878: ST_TO_ADDR
// max_y := y + r ;
59879: LD_ADDR_VAR 0 10
59883: PUSH
59884: LD_VAR 0 2
59888: PUSH
59889: LD_VAR 0 3
59893: PLUS
59894: ST_TO_ADDR
// for _x = min_x to max_x do
59895: LD_ADDR_VAR 0 5
59899: PUSH
59900: DOUBLE
59901: LD_VAR 0 8
59905: DEC
59906: ST_TO_ADDR
59907: LD_VAR 0 9
59911: PUSH
59912: FOR_TO
59913: IFFALSE 60014
// for _y = min_y to max_y do
59915: LD_ADDR_VAR 0 6
59919: PUSH
59920: DOUBLE
59921: LD_VAR 0 7
59925: DEC
59926: ST_TO_ADDR
59927: LD_VAR 0 10
59931: PUSH
59932: FOR_TO
59933: IFFALSE 60010
// begin if not ValidHex ( _x , _y ) then
59935: LD_VAR 0 5
59939: PPUSH
59940: LD_VAR 0 6
59944: PPUSH
59945: CALL_OW 488
59949: NOT
59950: IFFALSE 59954
// continue ;
59952: GO 59932
// if GetResourceTypeXY ( _x , _y ) then
59954: LD_VAR 0 5
59958: PPUSH
59959: LD_VAR 0 6
59963: PPUSH
59964: CALL_OW 283
59968: IFFALSE 60008
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59970: LD_ADDR_VAR 0 4
59974: PUSH
59975: LD_VAR 0 4
59979: PPUSH
59980: LD_VAR 0 4
59984: PUSH
59985: LD_INT 1
59987: PLUS
59988: PPUSH
59989: LD_VAR 0 5
59993: PUSH
59994: LD_VAR 0 6
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PPUSH
60003: CALL_OW 1
60007: ST_TO_ADDR
// end ;
60008: GO 59932
60010: POP
60011: POP
60012: GO 59912
60014: POP
60015: POP
// end ;
60016: LD_VAR 0 4
60020: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60021: LD_INT 0
60023: PPUSH
60024: PPUSH
60025: PPUSH
60026: PPUSH
60027: PPUSH
60028: PPUSH
60029: PPUSH
60030: PPUSH
// if not units then
60031: LD_VAR 0 1
60035: NOT
60036: IFFALSE 60040
// exit ;
60038: GO 60564
// result := UnitFilter ( units , [ f_ok ] ) ;
60040: LD_ADDR_VAR 0 3
60044: PUSH
60045: LD_VAR 0 1
60049: PPUSH
60050: LD_INT 50
60052: PUSH
60053: EMPTY
60054: LIST
60055: PPUSH
60056: CALL_OW 72
60060: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60061: LD_ADDR_VAR 0 8
60065: PUSH
60066: LD_VAR 0 1
60070: PUSH
60071: LD_INT 1
60073: ARRAY
60074: PPUSH
60075: CALL_OW 255
60079: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60080: LD_ADDR_VAR 0 10
60084: PUSH
60085: LD_INT 29
60087: PUSH
60088: LD_INT 91
60090: PUSH
60091: LD_INT 49
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: LIST
60098: ST_TO_ADDR
// if not result then
60099: LD_VAR 0 3
60103: NOT
60104: IFFALSE 60108
// exit ;
60106: GO 60564
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60108: LD_ADDR_VAR 0 5
60112: PUSH
60113: LD_INT 81
60115: PUSH
60116: LD_VAR 0 8
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PPUSH
60125: CALL_OW 69
60129: ST_TO_ADDR
// for i in result do
60130: LD_ADDR_VAR 0 4
60134: PUSH
60135: LD_VAR 0 3
60139: PUSH
60140: FOR_IN
60141: IFFALSE 60562
// begin tag := GetTag ( i ) + 1 ;
60143: LD_ADDR_VAR 0 9
60147: PUSH
60148: LD_VAR 0 4
60152: PPUSH
60153: CALL_OW 110
60157: PUSH
60158: LD_INT 1
60160: PLUS
60161: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60162: LD_ADDR_VAR 0 7
60166: PUSH
60167: LD_VAR 0 4
60171: PPUSH
60172: CALL_OW 250
60176: PPUSH
60177: LD_VAR 0 4
60181: PPUSH
60182: CALL_OW 251
60186: PPUSH
60187: LD_INT 6
60189: PPUSH
60190: CALL 59763 0 3
60194: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60195: LD_VAR 0 4
60199: PPUSH
60200: CALL_OW 247
60204: PUSH
60205: LD_INT 2
60207: EQUAL
60208: PUSH
60209: LD_VAR 0 7
60213: AND
60214: PUSH
60215: LD_VAR 0 4
60219: PPUSH
60220: CALL_OW 264
60224: PUSH
60225: LD_VAR 0 10
60229: IN
60230: NOT
60231: AND
60232: IFFALSE 60271
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60234: LD_VAR 0 4
60238: PPUSH
60239: LD_VAR 0 7
60243: PUSH
60244: LD_INT 1
60246: ARRAY
60247: PUSH
60248: LD_INT 1
60250: ARRAY
60251: PPUSH
60252: LD_VAR 0 7
60256: PUSH
60257: LD_INT 1
60259: ARRAY
60260: PUSH
60261: LD_INT 2
60263: ARRAY
60264: PPUSH
60265: CALL_OW 116
60269: GO 60560
// if path > tag then
60271: LD_VAR 0 2
60275: PUSH
60276: LD_VAR 0 9
60280: GREATER
60281: IFFALSE 60489
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60283: LD_ADDR_VAR 0 6
60287: PUSH
60288: LD_VAR 0 5
60292: PPUSH
60293: LD_INT 91
60295: PUSH
60296: LD_VAR 0 4
60300: PUSH
60301: LD_INT 8
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: LIST
60308: PPUSH
60309: CALL_OW 72
60313: ST_TO_ADDR
// if nearEnemy then
60314: LD_VAR 0 6
60318: IFFALSE 60387
// begin if GetWeapon ( i ) = ru_time_lapser then
60320: LD_VAR 0 4
60324: PPUSH
60325: CALL_OW 264
60329: PUSH
60330: LD_INT 49
60332: EQUAL
60333: IFFALSE 60361
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60335: LD_VAR 0 4
60339: PPUSH
60340: LD_VAR 0 6
60344: PPUSH
60345: LD_VAR 0 4
60349: PPUSH
60350: CALL_OW 74
60354: PPUSH
60355: CALL_OW 112
60359: GO 60385
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60361: LD_VAR 0 4
60365: PPUSH
60366: LD_VAR 0 6
60370: PPUSH
60371: LD_VAR 0 4
60375: PPUSH
60376: CALL_OW 74
60380: PPUSH
60381: CALL 61489 0 2
// end else
60385: GO 60487
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60387: LD_VAR 0 4
60391: PPUSH
60392: LD_VAR 0 2
60396: PUSH
60397: LD_VAR 0 9
60401: ARRAY
60402: PUSH
60403: LD_INT 1
60405: ARRAY
60406: PPUSH
60407: LD_VAR 0 2
60411: PUSH
60412: LD_VAR 0 9
60416: ARRAY
60417: PUSH
60418: LD_INT 2
60420: ARRAY
60421: PPUSH
60422: CALL_OW 297
60426: PUSH
60427: LD_INT 6
60429: GREATER
60430: IFFALSE 60473
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60432: LD_VAR 0 4
60436: PPUSH
60437: LD_VAR 0 2
60441: PUSH
60442: LD_VAR 0 9
60446: ARRAY
60447: PUSH
60448: LD_INT 1
60450: ARRAY
60451: PPUSH
60452: LD_VAR 0 2
60456: PUSH
60457: LD_VAR 0 9
60461: ARRAY
60462: PUSH
60463: LD_INT 2
60465: ARRAY
60466: PPUSH
60467: CALL_OW 114
60471: GO 60487
// SetTag ( i , tag ) ;
60473: LD_VAR 0 4
60477: PPUSH
60478: LD_VAR 0 9
60482: PPUSH
60483: CALL_OW 109
// end else
60487: GO 60560
// if enemy then
60489: LD_VAR 0 5
60493: IFFALSE 60560
// begin if GetWeapon ( i ) = ru_time_lapser then
60495: LD_VAR 0 4
60499: PPUSH
60500: CALL_OW 264
60504: PUSH
60505: LD_INT 49
60507: EQUAL
60508: IFFALSE 60536
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60510: LD_VAR 0 4
60514: PPUSH
60515: LD_VAR 0 5
60519: PPUSH
60520: LD_VAR 0 4
60524: PPUSH
60525: CALL_OW 74
60529: PPUSH
60530: CALL_OW 112
60534: GO 60560
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60536: LD_VAR 0 4
60540: PPUSH
60541: LD_VAR 0 5
60545: PPUSH
60546: LD_VAR 0 4
60550: PPUSH
60551: CALL_OW 74
60555: PPUSH
60556: CALL 61489 0 2
// end ; end ;
60560: GO 60140
60562: POP
60563: POP
// end ;
60564: LD_VAR 0 3
60568: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60569: LD_INT 0
60571: PPUSH
60572: PPUSH
60573: PPUSH
// if not unit or IsInUnit ( unit ) then
60574: LD_VAR 0 1
60578: NOT
60579: PUSH
60580: LD_VAR 0 1
60584: PPUSH
60585: CALL_OW 310
60589: OR
60590: IFFALSE 60594
// exit ;
60592: GO 60685
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60594: LD_ADDR_VAR 0 4
60598: PUSH
60599: LD_VAR 0 1
60603: PPUSH
60604: CALL_OW 250
60608: PPUSH
60609: LD_VAR 0 2
60613: PPUSH
60614: LD_INT 1
60616: PPUSH
60617: CALL_OW 272
60621: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60622: LD_ADDR_VAR 0 5
60626: PUSH
60627: LD_VAR 0 1
60631: PPUSH
60632: CALL_OW 251
60636: PPUSH
60637: LD_VAR 0 2
60641: PPUSH
60642: LD_INT 1
60644: PPUSH
60645: CALL_OW 273
60649: ST_TO_ADDR
// if ValidHex ( x , y ) then
60650: LD_VAR 0 4
60654: PPUSH
60655: LD_VAR 0 5
60659: PPUSH
60660: CALL_OW 488
60664: IFFALSE 60685
// ComTurnXY ( unit , x , y ) ;
60666: LD_VAR 0 1
60670: PPUSH
60671: LD_VAR 0 4
60675: PPUSH
60676: LD_VAR 0 5
60680: PPUSH
60681: CALL_OW 118
// end ;
60685: LD_VAR 0 3
60689: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60690: LD_INT 0
60692: PPUSH
60693: PPUSH
// result := false ;
60694: LD_ADDR_VAR 0 3
60698: PUSH
60699: LD_INT 0
60701: ST_TO_ADDR
// if not units then
60702: LD_VAR 0 2
60706: NOT
60707: IFFALSE 60711
// exit ;
60709: GO 60756
// for i in units do
60711: LD_ADDR_VAR 0 4
60715: PUSH
60716: LD_VAR 0 2
60720: PUSH
60721: FOR_IN
60722: IFFALSE 60754
// if See ( side , i ) then
60724: LD_VAR 0 1
60728: PPUSH
60729: LD_VAR 0 4
60733: PPUSH
60734: CALL_OW 292
60738: IFFALSE 60752
// begin result := true ;
60740: LD_ADDR_VAR 0 3
60744: PUSH
60745: LD_INT 1
60747: ST_TO_ADDR
// exit ;
60748: POP
60749: POP
60750: GO 60756
// end ;
60752: GO 60721
60754: POP
60755: POP
// end ;
60756: LD_VAR 0 3
60760: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60761: LD_INT 0
60763: PPUSH
60764: PPUSH
60765: PPUSH
60766: PPUSH
// if not unit or not points then
60767: LD_VAR 0 1
60771: NOT
60772: PUSH
60773: LD_VAR 0 2
60777: NOT
60778: OR
60779: IFFALSE 60783
// exit ;
60781: GO 60873
// dist := 99999 ;
60783: LD_ADDR_VAR 0 5
60787: PUSH
60788: LD_INT 99999
60790: ST_TO_ADDR
// for i in points do
60791: LD_ADDR_VAR 0 4
60795: PUSH
60796: LD_VAR 0 2
60800: PUSH
60801: FOR_IN
60802: IFFALSE 60871
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60804: LD_ADDR_VAR 0 6
60808: PUSH
60809: LD_VAR 0 1
60813: PPUSH
60814: LD_VAR 0 4
60818: PUSH
60819: LD_INT 1
60821: ARRAY
60822: PPUSH
60823: LD_VAR 0 4
60827: PUSH
60828: LD_INT 2
60830: ARRAY
60831: PPUSH
60832: CALL_OW 297
60836: ST_TO_ADDR
// if tmpDist < dist then
60837: LD_VAR 0 6
60841: PUSH
60842: LD_VAR 0 5
60846: LESS
60847: IFFALSE 60869
// begin result := i ;
60849: LD_ADDR_VAR 0 3
60853: PUSH
60854: LD_VAR 0 4
60858: ST_TO_ADDR
// dist := tmpDist ;
60859: LD_ADDR_VAR 0 5
60863: PUSH
60864: LD_VAR 0 6
60868: ST_TO_ADDR
// end ; end ;
60869: GO 60801
60871: POP
60872: POP
// end ;
60873: LD_VAR 0 3
60877: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
60878: LD_INT 0
60880: PPUSH
// uc_side := side ;
60881: LD_ADDR_OWVAR 20
60885: PUSH
60886: LD_VAR 0 1
60890: ST_TO_ADDR
// uc_nation := 3 ;
60891: LD_ADDR_OWVAR 21
60895: PUSH
60896: LD_INT 3
60898: ST_TO_ADDR
// vc_chassis := 25 ;
60899: LD_ADDR_OWVAR 37
60903: PUSH
60904: LD_INT 25
60906: ST_TO_ADDR
// vc_engine := engine_siberite ;
60907: LD_ADDR_OWVAR 39
60911: PUSH
60912: LD_INT 3
60914: ST_TO_ADDR
// vc_control := control_computer ;
60915: LD_ADDR_OWVAR 38
60919: PUSH
60920: LD_INT 3
60922: ST_TO_ADDR
// vc_weapon := 59 ;
60923: LD_ADDR_OWVAR 40
60927: PUSH
60928: LD_INT 59
60930: ST_TO_ADDR
// result := CreateVehicle ;
60931: LD_ADDR_VAR 0 5
60935: PUSH
60936: CALL_OW 45
60940: ST_TO_ADDR
// SetDir ( result , d ) ;
60941: LD_VAR 0 5
60945: PPUSH
60946: LD_VAR 0 4
60950: PPUSH
60951: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
60955: LD_VAR 0 5
60959: PPUSH
60960: LD_VAR 0 2
60964: PPUSH
60965: LD_VAR 0 3
60969: PPUSH
60970: LD_INT 0
60972: PPUSH
60973: CALL_OW 48
// end ;
60977: LD_VAR 0 5
60981: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
60982: LD_INT 0
60984: PPUSH
60985: PPUSH
60986: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
60987: LD_ADDR_VAR 0 2
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61010: LD_VAR 0 1
61014: NOT
61015: PUSH
61016: LD_VAR 0 1
61020: PPUSH
61021: CALL_OW 264
61025: PUSH
61026: LD_INT 12
61028: PUSH
61029: LD_INT 51
61031: PUSH
61032: LD_INT 32
61034: PUSH
61035: LD_INT 89
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: IN
61044: NOT
61045: OR
61046: IFFALSE 61050
// exit ;
61048: GO 61148
// for i := 1 to 3 do
61050: LD_ADDR_VAR 0 3
61054: PUSH
61055: DOUBLE
61056: LD_INT 1
61058: DEC
61059: ST_TO_ADDR
61060: LD_INT 3
61062: PUSH
61063: FOR_TO
61064: IFFALSE 61146
// begin tmp := GetCargo ( cargo , i ) ;
61066: LD_ADDR_VAR 0 4
61070: PUSH
61071: LD_VAR 0 1
61075: PPUSH
61076: LD_VAR 0 3
61080: PPUSH
61081: CALL_OW 289
61085: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61086: LD_ADDR_VAR 0 2
61090: PUSH
61091: LD_VAR 0 2
61095: PPUSH
61096: LD_VAR 0 3
61100: PPUSH
61101: LD_VAR 0 4
61105: PPUSH
61106: CALL_OW 1
61110: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61111: LD_ADDR_VAR 0 2
61115: PUSH
61116: LD_VAR 0 2
61120: PPUSH
61121: LD_INT 4
61123: PPUSH
61124: LD_VAR 0 2
61128: PUSH
61129: LD_INT 4
61131: ARRAY
61132: PUSH
61133: LD_VAR 0 4
61137: PLUS
61138: PPUSH
61139: CALL_OW 1
61143: ST_TO_ADDR
// end ;
61144: GO 61063
61146: POP
61147: POP
// end ;
61148: LD_VAR 0 2
61152: RET
// export function Length ( array ) ; begin
61153: LD_INT 0
61155: PPUSH
// result := array + 0 ;
61156: LD_ADDR_VAR 0 2
61160: PUSH
61161: LD_VAR 0 1
61165: PUSH
61166: LD_INT 0
61168: PLUS
61169: ST_TO_ADDR
// end ;
61170: LD_VAR 0 2
61174: RET
// export function PrepareArray ( array ) ; begin
61175: LD_INT 0
61177: PPUSH
// result := array diff 0 ;
61178: LD_ADDR_VAR 0 2
61182: PUSH
61183: LD_VAR 0 1
61187: PUSH
61188: LD_INT 0
61190: DIFF
61191: ST_TO_ADDR
// if not result [ 1 ] then
61192: LD_VAR 0 2
61196: PUSH
61197: LD_INT 1
61199: ARRAY
61200: NOT
61201: IFFALSE 61221
// result := Delete ( result , 1 ) ;
61203: LD_ADDR_VAR 0 2
61207: PUSH
61208: LD_VAR 0 2
61212: PPUSH
61213: LD_INT 1
61215: PPUSH
61216: CALL_OW 3
61220: ST_TO_ADDR
// end ;
61221: LD_VAR 0 2
61225: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61226: LD_INT 0
61228: PPUSH
61229: PPUSH
61230: PPUSH
61231: PPUSH
// sibRocketRange := 25 ;
61232: LD_ADDR_VAR 0 6
61236: PUSH
61237: LD_INT 25
61239: ST_TO_ADDR
// result := false ;
61240: LD_ADDR_VAR 0 4
61244: PUSH
61245: LD_INT 0
61247: ST_TO_ADDR
// for i := 0 to 5 do
61248: LD_ADDR_VAR 0 5
61252: PUSH
61253: DOUBLE
61254: LD_INT 0
61256: DEC
61257: ST_TO_ADDR
61258: LD_INT 5
61260: PUSH
61261: FOR_TO
61262: IFFALSE 61329
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61264: LD_VAR 0 1
61268: PPUSH
61269: LD_VAR 0 5
61273: PPUSH
61274: LD_VAR 0 6
61278: PPUSH
61279: CALL_OW 272
61283: PPUSH
61284: LD_VAR 0 2
61288: PPUSH
61289: LD_VAR 0 5
61293: PPUSH
61294: LD_VAR 0 6
61298: PPUSH
61299: CALL_OW 273
61303: PPUSH
61304: LD_VAR 0 3
61308: PPUSH
61309: CALL_OW 309
61313: IFFALSE 61327
// begin result := true ;
61315: LD_ADDR_VAR 0 4
61319: PUSH
61320: LD_INT 1
61322: ST_TO_ADDR
// exit ;
61323: POP
61324: POP
61325: GO 61331
// end ;
61327: GO 61261
61329: POP
61330: POP
// end ;
61331: LD_VAR 0 4
61335: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
61336: LD_INT 0
61338: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
61339: LD_VAR 0 1
61343: PPUSH
61344: LD_VAR 0 2
61348: PPUSH
61349: LD_INT 0
61351: PPUSH
61352: LD_INT 0
61354: PPUSH
61355: LD_INT 1
61357: PPUSH
61358: LD_INT 0
61360: PPUSH
61361: CALL_OW 587
// end ;
61365: LD_VAR 0 3
61369: RET
// export function CenterOnNow ( unit ) ; begin
61370: LD_INT 0
61372: PPUSH
// result := IsInUnit ( unit ) ;
61373: LD_ADDR_VAR 0 2
61377: PUSH
61378: LD_VAR 0 1
61382: PPUSH
61383: CALL_OW 310
61387: ST_TO_ADDR
// if not result then
61388: LD_VAR 0 2
61392: NOT
61393: IFFALSE 61405
// result := unit ;
61395: LD_ADDR_VAR 0 2
61399: PUSH
61400: LD_VAR 0 1
61404: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
61405: LD_VAR 0 1
61409: PPUSH
61410: CALL_OW 87
// end ;
61414: LD_VAR 0 2
61418: RET
// export function ComMoveHex ( unit , hex ) ; begin
61419: LD_INT 0
61421: PPUSH
// if not hex then
61422: LD_VAR 0 2
61426: NOT
61427: IFFALSE 61431
// exit ;
61429: GO 61484
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
61431: LD_VAR 0 2
61435: PUSH
61436: LD_INT 1
61438: ARRAY
61439: PPUSH
61440: LD_VAR 0 2
61444: PUSH
61445: LD_INT 2
61447: ARRAY
61448: PPUSH
61449: CALL_OW 428
61453: IFFALSE 61457
// exit ;
61455: GO 61484
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
61457: LD_VAR 0 1
61461: PPUSH
61462: LD_VAR 0 2
61466: PUSH
61467: LD_INT 1
61469: ARRAY
61470: PPUSH
61471: LD_VAR 0 2
61475: PUSH
61476: LD_INT 2
61478: ARRAY
61479: PPUSH
61480: CALL_OW 111
// end ;
61484: LD_VAR 0 3
61488: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
61489: LD_INT 0
61491: PPUSH
61492: PPUSH
61493: PPUSH
// if not unit or not enemy then
61494: LD_VAR 0 1
61498: NOT
61499: PUSH
61500: LD_VAR 0 2
61504: NOT
61505: OR
61506: IFFALSE 61510
// exit ;
61508: GO 61634
// x := GetX ( enemy ) ;
61510: LD_ADDR_VAR 0 4
61514: PUSH
61515: LD_VAR 0 2
61519: PPUSH
61520: CALL_OW 250
61524: ST_TO_ADDR
// y := GetY ( enemy ) ;
61525: LD_ADDR_VAR 0 5
61529: PUSH
61530: LD_VAR 0 2
61534: PPUSH
61535: CALL_OW 251
61539: ST_TO_ADDR
// if ValidHex ( x , y ) then
61540: LD_VAR 0 4
61544: PPUSH
61545: LD_VAR 0 5
61549: PPUSH
61550: CALL_OW 488
61554: IFFALSE 61634
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
61556: LD_VAR 0 2
61560: PPUSH
61561: CALL_OW 247
61565: PUSH
61566: LD_INT 3
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: IN
61576: PUSH
61577: LD_VAR 0 1
61581: PPUSH
61582: CALL_OW 255
61586: PPUSH
61587: LD_VAR 0 2
61591: PPUSH
61592: CALL_OW 292
61596: AND
61597: IFFALSE 61615
// ComAttackUnit ( unit , enemy ) else
61599: LD_VAR 0 1
61603: PPUSH
61604: LD_VAR 0 2
61608: PPUSH
61609: CALL_OW 115
61613: GO 61634
// ComAgressiveMove ( unit , x , y ) ;
61615: LD_VAR 0 1
61619: PPUSH
61620: LD_VAR 0 4
61624: PPUSH
61625: LD_VAR 0 5
61629: PPUSH
61630: CALL_OW 114
// end ;
61634: LD_VAR 0 3
61638: RET
