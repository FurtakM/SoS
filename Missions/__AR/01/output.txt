// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_INT 91
  23: EQUAL
  24: IFFALSE 96
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  26: LD_INT 68
  28: PPUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: CALL_OW 255
  38: PPUSH
  39: CALL_OW 321
  43: PUSH
  44: LD_INT 2
  46: EQUAL
  47: IFFALSE 59
// eff := 70 else
  49: LD_ADDR_VAR 0 4
  53: PUSH
  54: LD_INT 70
  56: ST_TO_ADDR
  57: GO 67
// eff := 30 ;
  59: LD_ADDR_VAR 0 4
  63: PUSH
  64: LD_INT 30
  66: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: CALL_OW 250
  76: PPUSH
  77: LD_VAR 0 1
  81: PPUSH
  82: CALL_OW 251
  86: PPUSH
  87: LD_VAR 0 4
  91: PPUSH
  92: CALL_OW 495
// end ; end ;
  96: LD_VAR 0 2
 100: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 101: LD_INT 0
 103: PPUSH
// end ;
 104: LD_VAR 0 4
 108: RET
// export function SOS_Command ( cmd ) ; begin
 109: LD_INT 0
 111: PPUSH
// end ;
 112: LD_VAR 0 2
 116: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
 117: LD_INT 0
 119: PPUSH
// end ;
 120: LD_VAR 0 6
 124: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
// if not vehicle or not factory then
 129: LD_VAR 0 1
 133: NOT
 134: PUSH
 135: LD_VAR 0 2
 139: NOT
 140: OR
 141: IFFALSE 145
// exit ;
 143: GO 376
// if factoryWaypoints >= factory then
 145: LD_EXP 70
 149: PUSH
 150: LD_VAR 0 2
 154: GREATEREQUAL
 155: IFFALSE 376
// if factoryWaypoints [ factory ] then
 157: LD_EXP 70
 161: PUSH
 162: LD_VAR 0 2
 166: ARRAY
 167: IFFALSE 376
// begin if GetControl ( vehicle ) = control_manual then
 169: LD_VAR 0 1
 173: PPUSH
 174: CALL_OW 263
 178: PUSH
 179: LD_INT 1
 181: EQUAL
 182: IFFALSE 263
// begin driver := IsDrivenBy ( vehicle ) ;
 184: LD_ADDR_VAR 0 4
 188: PUSH
 189: LD_VAR 0 1
 193: PPUSH
 194: CALL_OW 311
 198: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 199: LD_VAR 0 4
 203: PPUSH
 204: LD_EXP 70
 208: PUSH
 209: LD_VAR 0 2
 213: ARRAY
 214: PUSH
 215: LD_INT 3
 217: ARRAY
 218: PPUSH
 219: LD_EXP 70
 223: PUSH
 224: LD_VAR 0 2
 228: ARRAY
 229: PUSH
 230: LD_INT 4
 232: ARRAY
 233: PPUSH
 234: CALL_OW 171
// AddComExitVehicle ( driver ) ;
 238: LD_VAR 0 4
 242: PPUSH
 243: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
 247: LD_VAR 0 4
 251: PPUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 180
// end else
 261: GO 376
// if GetControl ( vehicle ) = control_remote then
 263: LD_VAR 0 1
 267: PPUSH
 268: CALL_OW 263
 272: PUSH
 273: LD_INT 2
 275: EQUAL
 276: IFFALSE 337
// begin wait ( 0 0$2 ) ;
 278: LD_INT 70
 280: PPUSH
 281: CALL_OW 67
// if Connect ( vehicle ) then
 285: LD_VAR 0 1
 289: PPUSH
 290: CALL 28194 0 1
 294: IFFALSE 335
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 296: LD_VAR 0 1
 300: PPUSH
 301: LD_EXP 70
 305: PUSH
 306: LD_VAR 0 2
 310: ARRAY
 311: PUSH
 312: LD_INT 3
 314: ARRAY
 315: PPUSH
 316: LD_EXP 70
 320: PUSH
 321: LD_VAR 0 2
 325: ARRAY
 326: PUSH
 327: LD_INT 4
 329: ARRAY
 330: PPUSH
 331: CALL_OW 171
// end else
 335: GO 376
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 337: LD_VAR 0 1
 341: PPUSH
 342: LD_EXP 70
 346: PUSH
 347: LD_VAR 0 2
 351: ARRAY
 352: PUSH
 353: LD_INT 3
 355: ARRAY
 356: PPUSH
 357: LD_EXP 70
 361: PUSH
 362: LD_VAR 0 2
 366: ARRAY
 367: PUSH
 368: LD_INT 4
 370: ARRAY
 371: PPUSH
 372: CALL_OW 171
// end ; end ;
 376: LD_VAR 0 3
 380: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 381: LD_INT 0
 383: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 384: LD_VAR 0 1
 388: PUSH
 389: LD_INT 250
 391: EQUAL
 392: PUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 264
 402: PUSH
 403: LD_INT 81
 405: EQUAL
 406: AND
 407: IFFALSE 428
// MinerPlaceMine ( unit , x , y ) ;
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 5
 423: PPUSH
 424: CALL 2813 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 428: LD_VAR 0 1
 432: PUSH
 433: LD_INT 251
 435: EQUAL
 436: PUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 264
 446: PUSH
 447: LD_INT 81
 449: EQUAL
 450: AND
 451: IFFALSE 472
// MinerDetonateMine ( unit , x , y ) ;
 453: LD_VAR 0 2
 457: PPUSH
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 5
 467: PPUSH
 468: CALL 3088 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 472: LD_VAR 0 1
 476: PUSH
 477: LD_INT 252
 479: EQUAL
 480: PUSH
 481: LD_VAR 0 2
 485: PPUSH
 486: CALL_OW 264
 490: PUSH
 491: LD_INT 81
 493: EQUAL
 494: AND
 495: IFFALSE 516
// MinerCreateMinefield ( unit , x , y ) ;
 497: LD_VAR 0 2
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_VAR 0 5
 511: PPUSH
 512: CALL 3505 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 516: LD_VAR 0 1
 520: PUSH
 521: LD_INT 253
 523: EQUAL
 524: PUSH
 525: LD_VAR 0 2
 529: PPUSH
 530: CALL_OW 257
 534: PUSH
 535: LD_INT 5
 537: EQUAL
 538: AND
 539: IFFALSE 560
// ComBinocular ( unit , x , y ) ;
 541: LD_VAR 0 2
 545: PPUSH
 546: LD_VAR 0 4
 550: PPUSH
 551: LD_VAR 0 5
 555: PPUSH
 556: CALL 3874 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 560: LD_VAR 0 1
 564: PUSH
 565: LD_INT 254
 567: EQUAL
 568: PUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 264
 578: PUSH
 579: LD_INT 99
 581: EQUAL
 582: AND
 583: PUSH
 584: LD_VAR 0 3
 588: PPUSH
 589: CALL_OW 263
 593: PUSH
 594: LD_INT 3
 596: EQUAL
 597: AND
 598: IFFALSE 614
// HackDestroyVehicle ( unit , selectedUnit ) ;
 600: LD_VAR 0 2
 604: PPUSH
 605: LD_VAR 0 3
 609: PPUSH
 610: CALL 2177 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 614: LD_VAR 0 1
 618: PUSH
 619: LD_INT 255
 621: EQUAL
 622: PUSH
 623: LD_VAR 0 2
 627: PPUSH
 628: CALL_OW 264
 632: PUSH
 633: LD_INT 14
 635: PUSH
 636: LD_INT 53
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: IN
 643: AND
 644: PUSH
 645: LD_VAR 0 4
 649: PPUSH
 650: LD_VAR 0 5
 654: PPUSH
 655: CALL_OW 488
 659: AND
 660: IFFALSE 684
// CutTreeXYR ( unit , x , y , 12 ) ;
 662: LD_VAR 0 2
 666: PPUSH
 667: LD_VAR 0 4
 671: PPUSH
 672: LD_VAR 0 5
 676: PPUSH
 677: LD_INT 12
 679: PPUSH
 680: CALL 747 0 4
// if cmd = 256 then
 684: LD_VAR 0 1
 688: PUSH
 689: LD_INT 256
 691: EQUAL
 692: IFFALSE 713
// SetFactoryWaypoint ( unit , x , y ) ;
 694: LD_VAR 0 2
 698: PPUSH
 699: LD_VAR 0 4
 703: PPUSH
 704: LD_VAR 0 5
 708: PPUSH
 709: CALL 18777 0 3
// if cmd = 257 then
 713: LD_VAR 0 1
 717: PUSH
 718: LD_INT 257
 720: EQUAL
 721: IFFALSE 742
// SetWarehouseGatheringPoint ( unit , x , y ) ;
 723: LD_VAR 0 2
 727: PPUSH
 728: LD_VAR 0 4
 732: PPUSH
 733: LD_VAR 0 5
 737: PPUSH
 738: CALL 19139 0 3
// end ;
 742: LD_VAR 0 6
 746: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 747: LD_INT 0
 749: PPUSH
 750: PPUSH
 751: PPUSH
 752: PPUSH
 753: PPUSH
 754: PPUSH
 755: PPUSH
 756: PPUSH
 757: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 758: LD_VAR 0 1
 762: NOT
 763: PUSH
 764: LD_VAR 0 2
 768: PPUSH
 769: LD_VAR 0 3
 773: PPUSH
 774: CALL_OW 488
 778: NOT
 779: OR
 780: PUSH
 781: LD_VAR 0 4
 785: NOT
 786: OR
 787: IFFALSE 791
// exit ;
 789: GO 1131
// list := [ ] ;
 791: LD_ADDR_VAR 0 13
 795: PUSH
 796: EMPTY
 797: ST_TO_ADDR
// if x - r < 0 then
 798: LD_VAR 0 2
 802: PUSH
 803: LD_VAR 0 4
 807: MINUS
 808: PUSH
 809: LD_INT 0
 811: LESS
 812: IFFALSE 824
// min_x := 0 else
 814: LD_ADDR_VAR 0 7
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
 822: GO 840
// min_x := x - r ;
 824: LD_ADDR_VAR 0 7
 828: PUSH
 829: LD_VAR 0 2
 833: PUSH
 834: LD_VAR 0 4
 838: MINUS
 839: ST_TO_ADDR
// if y - r < 0 then
 840: LD_VAR 0 3
 844: PUSH
 845: LD_VAR 0 4
 849: MINUS
 850: PUSH
 851: LD_INT 0
 853: LESS
 854: IFFALSE 866
// min_y := 0 else
 856: LD_ADDR_VAR 0 8
 860: PUSH
 861: LD_INT 0
 863: ST_TO_ADDR
 864: GO 882
// min_y := y - r ;
 866: LD_ADDR_VAR 0 8
 870: PUSH
 871: LD_VAR 0 3
 875: PUSH
 876: LD_VAR 0 4
 880: MINUS
 881: ST_TO_ADDR
// max_x := x + r ;
 882: LD_ADDR_VAR 0 9
 886: PUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_VAR 0 4
 896: PLUS
 897: ST_TO_ADDR
// max_y := y + r ;
 898: LD_ADDR_VAR 0 10
 902: PUSH
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 4
 912: PLUS
 913: ST_TO_ADDR
// for _x = min_x to max_x do
 914: LD_ADDR_VAR 0 11
 918: PUSH
 919: DOUBLE
 920: LD_VAR 0 7
 924: DEC
 925: ST_TO_ADDR
 926: LD_VAR 0 9
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1049
// for _y = min_y to max_y do
 934: LD_ADDR_VAR 0 12
 938: PUSH
 939: DOUBLE
 940: LD_VAR 0 8
 944: DEC
 945: ST_TO_ADDR
 946: LD_VAR 0 10
 950: PUSH
 951: FOR_TO
 952: IFFALSE 1045
// begin if not ValidHex ( _x , _y ) then
 954: LD_VAR 0 11
 958: PPUSH
 959: LD_VAR 0 12
 963: PPUSH
 964: CALL_OW 488
 968: NOT
 969: IFFALSE 973
// continue ;
 971: GO 951
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 973: LD_VAR 0 11
 977: PPUSH
 978: LD_VAR 0 12
 982: PPUSH
 983: CALL_OW 351
 987: PUSH
 988: LD_VAR 0 11
 992: PPUSH
 993: LD_VAR 0 12
 997: PPUSH
 998: CALL_OW 554
1002: AND
1003: IFFALSE 1043
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
1005: LD_ADDR_VAR 0 13
1009: PUSH
1010: LD_VAR 0 13
1014: PPUSH
1015: LD_VAR 0 13
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: PPUSH
1024: LD_VAR 0 11
1028: PUSH
1029: LD_VAR 0 12
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 2
1042: ST_TO_ADDR
// end ;
1043: GO 951
1045: POP
1046: POP
1047: GO 931
1049: POP
1050: POP
// if not list then
1051: LD_VAR 0 13
1055: NOT
1056: IFFALSE 1060
// exit ;
1058: GO 1131
// for i in list do
1060: LD_ADDR_VAR 0 6
1064: PUSH
1065: LD_VAR 0 13
1069: PUSH
1070: FOR_IN
1071: IFFALSE 1129
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
1073: LD_VAR 0 1
1077: PPUSH
1078: LD_STRING M
1080: PUSH
1081: LD_VAR 0 6
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PUSH
1090: LD_VAR 0 6
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PUSH
1099: LD_INT 0
1101: PUSH
1102: LD_INT 0
1104: PUSH
1105: LD_INT 0
1107: PUSH
1108: LD_INT 0
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: PPUSH
1123: CALL_OW 447
1127: GO 1070
1129: POP
1130: POP
// end ;
1131: LD_VAR 0 5
1135: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
1136: LD_EXP 1
1140: NOT
1141: IFFALSE 1191
1143: GO 1145
1145: DISABLE
// begin initHack := true ;
1146: LD_ADDR_EXP 1
1150: PUSH
1151: LD_INT 1
1153: ST_TO_ADDR
// hackTanks := [ ] ;
1154: LD_ADDR_EXP 2
1158: PUSH
1159: EMPTY
1160: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
1161: LD_ADDR_EXP 3
1165: PUSH
1166: EMPTY
1167: ST_TO_ADDR
// hackLimit := 3 ;
1168: LD_ADDR_EXP 4
1172: PUSH
1173: LD_INT 3
1175: ST_TO_ADDR
// hackDist := 12 ;
1176: LD_ADDR_EXP 5
1180: PUSH
1181: LD_INT 12
1183: ST_TO_ADDR
// hackCounter := [ ] ;
1184: LD_ADDR_EXP 6
1188: PUSH
1189: EMPTY
1190: ST_TO_ADDR
// end ;
1191: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
1192: LD_EXP 1
1196: PUSH
1197: LD_INT 34
1199: PUSH
1200: LD_INT 99
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PPUSH
1207: CALL_OW 69
1211: AND
1212: IFFALSE 1465
1214: GO 1216
1216: DISABLE
1217: LD_INT 0
1219: PPUSH
1220: PPUSH
// begin enable ;
1221: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
1222: LD_ADDR_VAR 0 1
1226: PUSH
1227: LD_INT 34
1229: PUSH
1230: LD_INT 99
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 69
1241: PUSH
1242: FOR_IN
1243: IFFALSE 1463
// begin if not i in hackTanks then
1245: LD_VAR 0 1
1249: PUSH
1250: LD_EXP 2
1254: IN
1255: NOT
1256: IFFALSE 1339
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
1258: LD_ADDR_EXP 2
1262: PUSH
1263: LD_EXP 2
1267: PPUSH
1268: LD_EXP 2
1272: PUSH
1273: LD_INT 1
1275: PLUS
1276: PPUSH
1277: LD_VAR 0 1
1281: PPUSH
1282: CALL_OW 1
1286: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_EXP 3
1296: PPUSH
1297: LD_EXP 3
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: PPUSH
1306: EMPTY
1307: PPUSH
1308: CALL_OW 1
1312: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1313: LD_ADDR_EXP 6
1317: PUSH
1318: LD_EXP 6
1322: PPUSH
1323: LD_EXP 6
1327: PUSH
1328: LD_INT 1
1330: PLUS
1331: PPUSH
1332: EMPTY
1333: PPUSH
1334: CALL_OW 1
1338: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1339: LD_VAR 0 1
1343: PPUSH
1344: CALL_OW 302
1348: NOT
1349: IFFALSE 1362
// begin HackUnlinkAll ( i ) ;
1351: LD_VAR 0 1
1355: PPUSH
1356: CALL 1468 0 1
// continue ;
1360: GO 1242
// end ; HackCheckCapturedStatus ( i ) ;
1362: LD_VAR 0 1
1366: PPUSH
1367: CALL 1911 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1371: LD_ADDR_VAR 0 2
1375: PUSH
1376: LD_INT 81
1378: PUSH
1379: LD_VAR 0 1
1383: PPUSH
1384: CALL_OW 255
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 33
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 91
1405: PUSH
1406: LD_VAR 0 1
1410: PUSH
1411: LD_EXP 5
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 50
1423: PUSH
1424: EMPTY
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: PPUSH
1433: CALL_OW 69
1437: ST_TO_ADDR
// if not tmp then
1438: LD_VAR 0 2
1442: NOT
1443: IFFALSE 1447
// continue ;
1445: GO 1242
// HackLink ( i , tmp ) ;
1447: LD_VAR 0 1
1451: PPUSH
1452: LD_VAR 0 2
1456: PPUSH
1457: CALL 1604 0 2
// end ;
1461: GO 1242
1463: POP
1464: POP
// end ;
1465: PPOPN 2
1467: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
// if not hack in hackTanks then
1473: LD_VAR 0 1
1477: PUSH
1478: LD_EXP 2
1482: IN
1483: NOT
1484: IFFALSE 1488
// exit ;
1486: GO 1599
// index := GetElementIndex ( hackTanks , hack ) ;
1488: LD_ADDR_VAR 0 4
1492: PUSH
1493: LD_EXP 2
1497: PPUSH
1498: LD_VAR 0 1
1502: PPUSH
1503: CALL 25010 0 2
1507: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1508: LD_EXP 3
1512: PUSH
1513: LD_VAR 0 4
1517: ARRAY
1518: IFFALSE 1599
// begin for i in hackTanksCaptured [ index ] do
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: LD_EXP 3
1529: PUSH
1530: LD_VAR 0 4
1534: ARRAY
1535: PUSH
1536: FOR_IN
1537: IFFALSE 1563
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1539: LD_VAR 0 3
1543: PUSH
1544: LD_INT 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 3
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PPUSH
1557: CALL_OW 235
1561: GO 1536
1563: POP
1564: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1565: LD_ADDR_EXP 3
1569: PUSH
1570: LD_EXP 3
1574: PPUSH
1575: LD_VAR 0 4
1579: PPUSH
1580: EMPTY
1581: PPUSH
1582: CALL_OW 1
1586: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1587: LD_VAR 0 1
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 505
// end ; end ;
1599: LD_VAR 0 2
1603: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
// if not hack in hackTanks or not vehicles then
1609: LD_VAR 0 1
1613: PUSH
1614: LD_EXP 2
1618: IN
1619: NOT
1620: PUSH
1621: LD_VAR 0 2
1625: NOT
1626: OR
1627: IFFALSE 1631
// exit ;
1629: GO 1906
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: LD_VAR 0 1
1640: PPUSH
1641: LD_VAR 0 2
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: LD_INT 1
1651: PPUSH
1652: CALL 25660 0 4
1656: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_EXP 2
1666: PPUSH
1667: LD_VAR 0 1
1671: PPUSH
1672: CALL 25010 0 2
1676: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1677: LD_EXP 3
1681: PUSH
1682: LD_VAR 0 5
1686: ARRAY
1687: PUSH
1688: LD_EXP 4
1692: LESS
1693: IFFALSE 1882
// begin for i := 1 to vehicles do
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: DOUBLE
1701: LD_INT 1
1703: DEC
1704: ST_TO_ADDR
1705: LD_VAR 0 2
1709: PUSH
1710: FOR_TO
1711: IFFALSE 1880
// begin if hackTanksCaptured [ index ] = hackLimit then
1713: LD_EXP 3
1717: PUSH
1718: LD_VAR 0 5
1722: ARRAY
1723: PUSH
1724: LD_EXP 4
1728: EQUAL
1729: IFFALSE 1733
// break ;
1731: GO 1880
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1733: LD_ADDR_EXP 6
1737: PUSH
1738: LD_EXP 6
1742: PPUSH
1743: LD_VAR 0 5
1747: PPUSH
1748: LD_EXP 6
1752: PUSH
1753: LD_VAR 0 5
1757: ARRAY
1758: PUSH
1759: LD_INT 1
1761: PLUS
1762: PPUSH
1763: CALL_OW 1
1767: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1768: LD_ADDR_EXP 3
1772: PUSH
1773: LD_EXP 3
1777: PPUSH
1778: LD_VAR 0 5
1782: PUSH
1783: LD_EXP 3
1787: PUSH
1788: LD_VAR 0 5
1792: ARRAY
1793: PUSH
1794: LD_INT 1
1796: PLUS
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: LD_VAR 0 2
1806: PUSH
1807: LD_VAR 0 4
1811: ARRAY
1812: PUSH
1813: LD_VAR 0 2
1817: PUSH
1818: LD_VAR 0 4
1822: ARRAY
1823: PPUSH
1824: CALL_OW 255
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PPUSH
1833: CALL 25225 0 3
1837: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1838: LD_VAR 0 2
1842: PUSH
1843: LD_VAR 0 4
1847: ARRAY
1848: PPUSH
1849: LD_VAR 0 1
1853: PPUSH
1854: CALL_OW 255
1858: PPUSH
1859: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1863: LD_VAR 0 2
1867: PUSH
1868: LD_VAR 0 4
1872: ARRAY
1873: PPUSH
1874: CALL_OW 141
// end ;
1878: GO 1710
1880: POP
1881: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1882: LD_VAR 0 1
1886: PPUSH
1887: LD_EXP 3
1891: PUSH
1892: LD_VAR 0 5
1896: ARRAY
1897: PUSH
1898: LD_INT 0
1900: PLUS
1901: PPUSH
1902: CALL_OW 505
// end ;
1906: LD_VAR 0 3
1910: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
// if not hack in hackTanks then
1917: LD_VAR 0 1
1921: PUSH
1922: LD_EXP 2
1926: IN
1927: NOT
1928: IFFALSE 1932
// exit ;
1930: GO 2172
// index := GetElementIndex ( hackTanks , hack ) ;
1932: LD_ADDR_VAR 0 4
1936: PUSH
1937: LD_EXP 2
1941: PPUSH
1942: LD_VAR 0 1
1946: PPUSH
1947: CALL 25010 0 2
1951: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: DOUBLE
1958: LD_EXP 3
1962: PUSH
1963: LD_VAR 0 4
1967: ARRAY
1968: INC
1969: ST_TO_ADDR
1970: LD_INT 1
1972: PUSH
1973: FOR_DOWNTO
1974: IFFALSE 2146
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1976: LD_ADDR_VAR 0 5
1980: PUSH
1981: LD_EXP 3
1985: PUSH
1986: LD_VAR 0 4
1990: ARRAY
1991: PUSH
1992: LD_VAR 0 3
1996: ARRAY
1997: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1998: LD_VAR 0 5
2002: PUSH
2003: LD_INT 1
2005: ARRAY
2006: PPUSH
2007: CALL_OW 302
2011: NOT
2012: PUSH
2013: LD_VAR 0 5
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: CALL_OW 255
2026: PUSH
2027: LD_VAR 0 1
2031: PPUSH
2032: CALL_OW 255
2036: NONEQUAL
2037: OR
2038: IFFALSE 2144
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
2040: LD_VAR 0 5
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PPUSH
2049: CALL_OW 305
2053: PUSH
2054: LD_VAR 0 5
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PPUSH
2063: CALL_OW 255
2067: PUSH
2068: LD_VAR 0 1
2072: PPUSH
2073: CALL_OW 255
2077: EQUAL
2078: AND
2079: IFFALSE 2103
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
2081: LD_VAR 0 5
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: PPUSH
2090: LD_VAR 0 5
2094: PUSH
2095: LD_INT 2
2097: ARRAY
2098: PPUSH
2099: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
2103: LD_ADDR_EXP 3
2107: PUSH
2108: LD_EXP 3
2112: PPUSH
2113: LD_VAR 0 4
2117: PPUSH
2118: LD_EXP 3
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 3
2133: PPUSH
2134: CALL_OW 3
2138: PPUSH
2139: CALL_OW 1
2143: ST_TO_ADDR
// end ; end ;
2144: GO 1973
2146: POP
2147: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_EXP 3
2157: PUSH
2158: LD_VAR 0 4
2162: ARRAY
2163: PUSH
2164: LD_INT 0
2166: PLUS
2167: PPUSH
2168: CALL_OW 505
// end ;
2172: LD_VAR 0 2
2176: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// if not hack in hackTanks then
2183: LD_VAR 0 1
2187: PUSH
2188: LD_EXP 2
2192: IN
2193: NOT
2194: IFFALSE 2198
// exit ;
2196: GO 2283
// index := GetElementIndex ( hackTanks , hack ) ;
2198: LD_ADDR_VAR 0 5
2202: PUSH
2203: LD_EXP 2
2207: PPUSH
2208: LD_VAR 0 1
2212: PPUSH
2213: CALL 25010 0 2
2217: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_EXP 3
2232: PUSH
2233: LD_VAR 0 5
2237: ARRAY
2238: PUSH
2239: FOR_TO
2240: IFFALSE 2281
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
2242: LD_EXP 3
2246: PUSH
2247: LD_VAR 0 5
2251: ARRAY
2252: PUSH
2253: LD_VAR 0 4
2257: ARRAY
2258: PUSH
2259: LD_INT 1
2261: ARRAY
2262: PUSH
2263: LD_VAR 0 2
2267: EQUAL
2268: IFFALSE 2279
// KillUnit ( vehicle ) ;
2270: LD_VAR 0 2
2274: PPUSH
2275: CALL_OW 66
2279: GO 2239
2281: POP
2282: POP
// end ;
2283: LD_VAR 0 3
2287: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
2288: LD_EXP 7
2292: NOT
2293: IFFALSE 2328
2295: GO 2297
2297: DISABLE
// begin initMiner := true ;
2298: LD_ADDR_EXP 7
2302: PUSH
2303: LD_INT 1
2305: ST_TO_ADDR
// minersList := [ ] ;
2306: LD_ADDR_EXP 8
2310: PUSH
2311: EMPTY
2312: ST_TO_ADDR
// minerMinesList := [ ] ;
2313: LD_ADDR_EXP 9
2317: PUSH
2318: EMPTY
2319: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2320: LD_ADDR_EXP 10
2324: PUSH
2325: LD_INT 5
2327: ST_TO_ADDR
// end ;
2328: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2329: LD_EXP 7
2333: PUSH
2334: LD_INT 34
2336: PUSH
2337: LD_INT 81
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PPUSH
2344: CALL_OW 69
2348: AND
2349: IFFALSE 2810
2351: GO 2353
2353: DISABLE
2354: LD_INT 0
2356: PPUSH
2357: PPUSH
2358: PPUSH
2359: PPUSH
// begin enable ;
2360: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2361: LD_ADDR_VAR 0 1
2365: PUSH
2366: LD_INT 34
2368: PUSH
2369: LD_INT 81
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: FOR_IN
2382: IFFALSE 2454
// begin if not i in minersList then
2384: LD_VAR 0 1
2388: PUSH
2389: LD_EXP 8
2393: IN
2394: NOT
2395: IFFALSE 2452
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2397: LD_ADDR_EXP 8
2401: PUSH
2402: LD_EXP 8
2406: PPUSH
2407: LD_EXP 8
2411: PUSH
2412: LD_INT 1
2414: PLUS
2415: PPUSH
2416: LD_VAR 0 1
2420: PPUSH
2421: CALL_OW 1
2425: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2426: LD_ADDR_EXP 9
2430: PUSH
2431: LD_EXP 9
2435: PPUSH
2436: LD_EXP 9
2440: PUSH
2441: LD_INT 1
2443: PLUS
2444: PPUSH
2445: EMPTY
2446: PPUSH
2447: CALL_OW 1
2451: ST_TO_ADDR
// end end ;
2452: GO 2381
2454: POP
2455: POP
// for i := minerMinesList downto 1 do
2456: LD_ADDR_VAR 0 1
2460: PUSH
2461: DOUBLE
2462: LD_EXP 9
2466: INC
2467: ST_TO_ADDR
2468: LD_INT 1
2470: PUSH
2471: FOR_DOWNTO
2472: IFFALSE 2808
// begin if IsLive ( minersList [ i ] ) then
2474: LD_EXP 8
2478: PUSH
2479: LD_VAR 0 1
2483: ARRAY
2484: PPUSH
2485: CALL_OW 300
2489: IFFALSE 2517
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2491: LD_EXP 8
2495: PUSH
2496: LD_VAR 0 1
2500: ARRAY
2501: PPUSH
2502: LD_EXP 9
2506: PUSH
2507: LD_VAR 0 1
2511: ARRAY
2512: PPUSH
2513: CALL_OW 505
// if not minerMinesList [ i ] then
2517: LD_EXP 9
2521: PUSH
2522: LD_VAR 0 1
2526: ARRAY
2527: NOT
2528: IFFALSE 2532
// continue ;
2530: GO 2471
// for j := minerMinesList [ i ] downto 1 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_EXP 9
2542: PUSH
2543: LD_VAR 0 1
2547: ARRAY
2548: INC
2549: ST_TO_ADDR
2550: LD_INT 1
2552: PUSH
2553: FOR_DOWNTO
2554: IFFALSE 2804
// begin side := GetSide ( minersList [ i ] ) ;
2556: LD_ADDR_VAR 0 3
2560: PUSH
2561: LD_EXP 8
2565: PUSH
2566: LD_VAR 0 1
2570: ARRAY
2571: PPUSH
2572: CALL_OW 255
2576: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: LD_EXP 9
2586: PUSH
2587: LD_VAR 0 1
2591: ARRAY
2592: PUSH
2593: LD_VAR 0 2
2597: ARRAY
2598: PUSH
2599: LD_INT 1
2601: ARRAY
2602: PPUSH
2603: LD_EXP 9
2607: PUSH
2608: LD_VAR 0 1
2612: ARRAY
2613: PUSH
2614: LD_VAR 0 2
2618: ARRAY
2619: PUSH
2620: LD_INT 2
2622: ARRAY
2623: PPUSH
2624: CALL_OW 428
2628: ST_TO_ADDR
// if not tmp then
2629: LD_VAR 0 4
2633: NOT
2634: IFFALSE 2638
// continue ;
2636: GO 2553
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2638: LD_VAR 0 4
2642: PUSH
2643: LD_INT 81
2645: PUSH
2646: LD_VAR 0 3
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PPUSH
2655: CALL_OW 69
2659: IN
2660: PUSH
2661: LD_EXP 9
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PPUSH
2682: LD_EXP 9
2686: PUSH
2687: LD_VAR 0 1
2691: ARRAY
2692: PUSH
2693: LD_VAR 0 2
2697: ARRAY
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PPUSH
2703: CALL_OW 458
2707: AND
2708: IFFALSE 2802
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
2710: LD_EXP 9
2714: PUSH
2715: LD_VAR 0 1
2719: ARRAY
2720: PUSH
2721: LD_VAR 0 2
2725: ARRAY
2726: PUSH
2727: LD_INT 1
2729: ARRAY
2730: PPUSH
2731: LD_EXP 9
2735: PUSH
2736: LD_VAR 0 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 3
2756: PPUSH
2757: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
2761: LD_ADDR_EXP 9
2765: PUSH
2766: LD_EXP 9
2770: PPUSH
2771: LD_VAR 0 1
2775: PPUSH
2776: LD_EXP 9
2780: PUSH
2781: LD_VAR 0 1
2785: ARRAY
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: CALL_OW 3
2796: PPUSH
2797: CALL_OW 1
2801: ST_TO_ADDR
// end ; end ;
2802: GO 2553
2804: POP
2805: POP
// end ;
2806: GO 2471
2808: POP
2809: POP
// end ;
2810: PPOPN 4
2812: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
2813: LD_INT 0
2815: PPUSH
2816: PPUSH
// result := false ;
2817: LD_ADDR_VAR 0 4
2821: PUSH
2822: LD_INT 0
2824: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
2825: LD_VAR 0 1
2829: PPUSH
2830: CALL_OW 264
2834: PUSH
2835: LD_INT 81
2837: EQUAL
2838: NOT
2839: IFFALSE 2843
// exit ;
2841: GO 3083
// index := GetElementIndex ( minersList , unit ) ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_EXP 8
2852: PPUSH
2853: LD_VAR 0 1
2857: PPUSH
2858: CALL 25010 0 2
2862: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
2863: LD_EXP 9
2867: PUSH
2868: LD_VAR 0 5
2872: ARRAY
2873: PUSH
2874: LD_EXP 10
2878: GREATEREQUAL
2879: IFFALSE 2883
// exit ;
2881: GO 3083
// ComMoveXY ( unit , x , y ) ;
2883: LD_VAR 0 1
2887: PPUSH
2888: LD_VAR 0 2
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2902: LD_INT 35
2904: PPUSH
2905: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
2909: LD_VAR 0 1
2913: PPUSH
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_VAR 0 3
2923: PPUSH
2924: CALL 56365 0 3
2928: NOT
2929: PUSH
2930: LD_VAR 0 1
2934: PPUSH
2935: CALL_OW 314
2939: AND
2940: IFFALSE 2944
// exit ;
2942: GO 3083
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_VAR 0 3
2953: PPUSH
2954: CALL_OW 428
2958: PUSH
2959: LD_VAR 0 1
2963: EQUAL
2964: PUSH
2965: LD_VAR 0 1
2969: PPUSH
2970: CALL_OW 314
2974: NOT
2975: AND
2976: IFFALSE 2902
// PlaySoundXY ( x , y , PlantMine ) ;
2978: LD_VAR 0 2
2982: PPUSH
2983: LD_VAR 0 3
2987: PPUSH
2988: LD_STRING PlantMine
2990: PPUSH
2991: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_VAR 0 1
3009: PPUSH
3010: CALL_OW 255
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
3022: LD_ADDR_EXP 9
3026: PUSH
3027: LD_EXP 9
3031: PPUSH
3032: LD_VAR 0 5
3036: PUSH
3037: LD_EXP 9
3041: PUSH
3042: LD_VAR 0 5
3046: ARRAY
3047: PUSH
3048: LD_INT 1
3050: PLUS
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PPUSH
3056: LD_VAR 0 2
3060: PUSH
3061: LD_VAR 0 3
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL 25225 0 3
3074: ST_TO_ADDR
// result := true ;
3075: LD_ADDR_VAR 0 4
3079: PUSH
3080: LD_INT 1
3082: ST_TO_ADDR
// end ;
3083: LD_VAR 0 4
3087: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
// if not unit in minersList then
3093: LD_VAR 0 1
3097: PUSH
3098: LD_EXP 8
3102: IN
3103: NOT
3104: IFFALSE 3108
// exit ;
3106: GO 3500
// index := GetElementIndex ( minersList , unit ) ;
3108: LD_ADDR_VAR 0 6
3112: PUSH
3113: LD_EXP 8
3117: PPUSH
3118: LD_VAR 0 1
3122: PPUSH
3123: CALL 25010 0 2
3127: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
3128: LD_ADDR_VAR 0 5
3132: PUSH
3133: DOUBLE
3134: LD_EXP 9
3138: PUSH
3139: LD_VAR 0 6
3143: ARRAY
3144: INC
3145: ST_TO_ADDR
3146: LD_INT 1
3148: PUSH
3149: FOR_DOWNTO
3150: IFFALSE 3311
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
3152: LD_EXP 9
3156: PUSH
3157: LD_VAR 0 6
3161: ARRAY
3162: PUSH
3163: LD_VAR 0 5
3167: ARRAY
3168: PUSH
3169: LD_INT 1
3171: ARRAY
3172: PUSH
3173: LD_VAR 0 2
3177: EQUAL
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_VAR 0 6
3188: ARRAY
3189: PUSH
3190: LD_VAR 0 5
3194: ARRAY
3195: PUSH
3196: LD_INT 2
3198: ARRAY
3199: PUSH
3200: LD_VAR 0 3
3204: EQUAL
3205: AND
3206: IFFALSE 3309
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3208: LD_EXP 9
3212: PUSH
3213: LD_VAR 0 6
3217: ARRAY
3218: PUSH
3219: LD_VAR 0 5
3223: ARRAY
3224: PUSH
3225: LD_INT 1
3227: ARRAY
3228: PPUSH
3229: LD_EXP 9
3233: PUSH
3234: LD_VAR 0 6
3238: ARRAY
3239: PUSH
3240: LD_VAR 0 5
3244: ARRAY
3245: PUSH
3246: LD_INT 2
3248: ARRAY
3249: PPUSH
3250: LD_VAR 0 1
3254: PPUSH
3255: CALL_OW 255
3259: PPUSH
3260: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3264: LD_ADDR_EXP 9
3268: PUSH
3269: LD_EXP 9
3273: PPUSH
3274: LD_VAR 0 6
3278: PPUSH
3279: LD_EXP 9
3283: PUSH
3284: LD_VAR 0 6
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 5
3294: PPUSH
3295: CALL_OW 3
3299: PPUSH
3300: CALL_OW 1
3304: ST_TO_ADDR
// exit ;
3305: POP
3306: POP
3307: GO 3500
// end ; end ;
3309: GO 3149
3311: POP
3312: POP
// for i := minerMinesList [ index ] downto 1 do
3313: LD_ADDR_VAR 0 5
3317: PUSH
3318: DOUBLE
3319: LD_EXP 9
3323: PUSH
3324: LD_VAR 0 6
3328: ARRAY
3329: INC
3330: ST_TO_ADDR
3331: LD_INT 1
3333: PUSH
3334: FOR_DOWNTO
3335: IFFALSE 3498
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3337: LD_EXP 9
3341: PUSH
3342: LD_VAR 0 6
3346: ARRAY
3347: PUSH
3348: LD_VAR 0 5
3352: ARRAY
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: PPUSH
3358: LD_EXP 9
3362: PUSH
3363: LD_VAR 0 6
3367: ARRAY
3368: PUSH
3369: LD_VAR 0 5
3373: ARRAY
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 2
3383: PPUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 298
3393: PUSH
3394: LD_INT 6
3396: LESS
3397: IFFALSE 3496
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3399: LD_EXP 9
3403: PUSH
3404: LD_VAR 0 6
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 5
3414: ARRAY
3415: PUSH
3416: LD_INT 1
3418: ARRAY
3419: PPUSH
3420: LD_EXP 9
3424: PUSH
3425: LD_VAR 0 6
3429: ARRAY
3430: PUSH
3431: LD_VAR 0 5
3435: ARRAY
3436: PUSH
3437: LD_INT 2
3439: ARRAY
3440: PPUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 255
3450: PPUSH
3451: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3455: LD_ADDR_EXP 9
3459: PUSH
3460: LD_EXP 9
3464: PPUSH
3465: LD_VAR 0 6
3469: PPUSH
3470: LD_EXP 9
3474: PUSH
3475: LD_VAR 0 6
3479: ARRAY
3480: PPUSH
3481: LD_VAR 0 5
3485: PPUSH
3486: CALL_OW 3
3490: PPUSH
3491: CALL_OW 1
3495: ST_TO_ADDR
// end ; end ;
3496: GO 3334
3498: POP
3499: POP
// end ;
3500: LD_VAR 0 4
3504: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3505: LD_INT 0
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
3515: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3516: LD_VAR 0 1
3520: PPUSH
3521: CALL_OW 264
3525: PUSH
3526: LD_INT 81
3528: EQUAL
3529: NOT
3530: PUSH
3531: LD_VAR 0 1
3535: PUSH
3536: LD_EXP 8
3540: IN
3541: NOT
3542: OR
3543: IFFALSE 3547
// exit ;
3545: GO 3869
// index := GetElementIndex ( minersList , unit ) ;
3547: LD_ADDR_VAR 0 6
3551: PUSH
3552: LD_EXP 8
3556: PPUSH
3557: LD_VAR 0 1
3561: PPUSH
3562: CALL 25010 0 2
3566: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3567: LD_ADDR_VAR 0 8
3571: PUSH
3572: LD_EXP 10
3576: PUSH
3577: LD_EXP 9
3581: PUSH
3582: LD_VAR 0 6
3586: ARRAY
3587: MINUS
3588: ST_TO_ADDR
// if not minesFreeAmount then
3589: LD_VAR 0 8
3593: NOT
3594: IFFALSE 3598
// exit ;
3596: GO 3869
// tmp := [ ] ;
3598: LD_ADDR_VAR 0 7
3602: PUSH
3603: EMPTY
3604: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: DOUBLE
3611: LD_INT 1
3613: DEC
3614: ST_TO_ADDR
3615: LD_VAR 0 8
3619: PUSH
3620: FOR_TO
3621: IFFALSE 3816
// begin _d := rand ( 0 , 5 ) ;
3623: LD_ADDR_VAR 0 11
3627: PUSH
3628: LD_INT 0
3630: PPUSH
3631: LD_INT 5
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3639: LD_ADDR_VAR 0 12
3643: PUSH
3644: LD_INT 2
3646: PPUSH
3647: LD_INT 6
3649: PPUSH
3650: CALL_OW 12
3654: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
3655: LD_ADDR_VAR 0 9
3659: PUSH
3660: LD_VAR 0 2
3664: PPUSH
3665: LD_VAR 0 11
3669: PPUSH
3670: LD_VAR 0 12
3674: PPUSH
3675: CALL_OW 272
3679: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
3680: LD_ADDR_VAR 0 10
3684: PUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_VAR 0 11
3694: PPUSH
3695: LD_VAR 0 12
3699: PPUSH
3700: CALL_OW 273
3704: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
3705: LD_VAR 0 9
3709: PPUSH
3710: LD_VAR 0 10
3714: PPUSH
3715: CALL_OW 488
3719: PUSH
3720: LD_VAR 0 9
3724: PUSH
3725: LD_VAR 0 10
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: LD_VAR 0 7
3738: IN
3739: NOT
3740: AND
3741: PUSH
3742: LD_VAR 0 9
3746: PPUSH
3747: LD_VAR 0 10
3751: PPUSH
3752: CALL_OW 458
3756: NOT
3757: AND
3758: IFFALSE 3800
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
3760: LD_ADDR_VAR 0 7
3764: PUSH
3765: LD_VAR 0 7
3769: PPUSH
3770: LD_VAR 0 7
3774: PUSH
3775: LD_INT 1
3777: PLUS
3778: PPUSH
3779: LD_VAR 0 9
3783: PUSH
3784: LD_VAR 0 10
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PPUSH
3793: CALL_OW 1
3797: ST_TO_ADDR
3798: GO 3814
// i := i - 1 ;
3800: LD_ADDR_VAR 0 5
3804: PUSH
3805: LD_VAR 0 5
3809: PUSH
3810: LD_INT 1
3812: MINUS
3813: ST_TO_ADDR
// end ;
3814: GO 3620
3816: POP
3817: POP
// for i in tmp do
3818: LD_ADDR_VAR 0 5
3822: PUSH
3823: LD_VAR 0 7
3827: PUSH
3828: FOR_IN
3829: IFFALSE 3867
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
3831: LD_VAR 0 1
3835: PPUSH
3836: LD_VAR 0 5
3840: PUSH
3841: LD_INT 1
3843: ARRAY
3844: PPUSH
3845: LD_VAR 0 5
3849: PUSH
3850: LD_INT 2
3852: ARRAY
3853: PPUSH
3854: CALL 2813 0 3
3858: NOT
3859: IFFALSE 3865
// exit ;
3861: POP
3862: POP
3863: GO 3869
3865: GO 3828
3867: POP
3868: POP
// end ;
3869: LD_VAR 0 4
3873: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
3874: LD_INT 0
3876: PPUSH
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
3881: PPUSH
3882: PPUSH
// if not GetClass ( unit ) = class_sniper then
3883: LD_VAR 0 1
3887: PPUSH
3888: CALL_OW 257
3892: PUSH
3893: LD_INT 5
3895: EQUAL
3896: NOT
3897: IFFALSE 3901
// exit ;
3899: GO 4289
// dist := 8 ;
3901: LD_ADDR_VAR 0 5
3905: PUSH
3906: LD_INT 8
3908: ST_TO_ADDR
// viewRange := 12 ;
3909: LD_ADDR_VAR 0 7
3913: PUSH
3914: LD_INT 12
3916: ST_TO_ADDR
// side := GetSide ( unit ) ;
3917: LD_ADDR_VAR 0 6
3921: PUSH
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 255
3931: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
3932: LD_INT 61
3934: PPUSH
3935: LD_VAR 0 6
3939: PPUSH
3940: CALL_OW 321
3944: PUSH
3945: LD_INT 2
3947: EQUAL
3948: IFFALSE 3958
// viewRange := 16 ;
3950: LD_ADDR_VAR 0 7
3954: PUSH
3955: LD_INT 16
3957: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_VAR 0 2
3967: PPUSH
3968: LD_VAR 0 3
3972: PPUSH
3973: CALL_OW 297
3977: PUSH
3978: LD_VAR 0 5
3982: GREATER
3983: IFFALSE 4062
// begin ComMoveXY ( unit , x , y ) ;
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_VAR 0 2
3994: PPUSH
3995: LD_VAR 0 3
3999: PPUSH
4000: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4004: LD_INT 35
4006: PPUSH
4007: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
4011: LD_VAR 0 1
4015: PPUSH
4016: LD_VAR 0 2
4020: PPUSH
4021: LD_VAR 0 3
4025: PPUSH
4026: CALL 56365 0 3
4030: NOT
4031: IFFALSE 4035
// exit ;
4033: GO 4289
// until GetDistUnitXY ( unit , x , y ) < dist ;
4035: LD_VAR 0 1
4039: PPUSH
4040: LD_VAR 0 2
4044: PPUSH
4045: LD_VAR 0 3
4049: PPUSH
4050: CALL_OW 297
4054: PUSH
4055: LD_VAR 0 5
4059: LESS
4060: IFFALSE 4004
// end ; ComTurnXY ( unit , x , y ) ;
4062: LD_VAR 0 1
4066: PPUSH
4067: LD_VAR 0 2
4071: PPUSH
4072: LD_VAR 0 3
4076: PPUSH
4077: CALL_OW 118
// wait ( 5 ) ;
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 67
// _d := GetDir ( unit ) ;
4088: LD_ADDR_VAR 0 10
4092: PUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 254
4102: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
4103: LD_ADDR_VAR 0 8
4107: PUSH
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 250
4117: PPUSH
4118: LD_VAR 0 10
4122: PPUSH
4123: LD_VAR 0 5
4127: PPUSH
4128: CALL_OW 272
4132: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
4133: LD_ADDR_VAR 0 9
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: CALL_OW 251
4147: PPUSH
4148: LD_VAR 0 10
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: CALL_OW 273
4162: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4163: LD_VAR 0 8
4167: PPUSH
4168: LD_VAR 0 9
4172: PPUSH
4173: CALL_OW 488
4177: NOT
4178: IFFALSE 4182
// exit ;
4180: GO 4289
// ComAnimCustom ( unit , 1 ) ;
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
4194: LD_VAR 0 8
4198: PPUSH
4199: LD_VAR 0 9
4203: PPUSH
4204: LD_VAR 0 6
4208: PPUSH
4209: LD_VAR 0 7
4213: PPUSH
4214: CALL_OW 330
// repeat wait ( 1 ) ;
4218: LD_INT 1
4220: PPUSH
4221: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
4225: LD_VAR 0 1
4229: PPUSH
4230: CALL_OW 316
4234: PUSH
4235: LD_VAR 0 1
4239: PPUSH
4240: CALL_OW 314
4244: OR
4245: PUSH
4246: LD_VAR 0 1
4250: PPUSH
4251: CALL_OW 302
4255: NOT
4256: OR
4257: PUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: CALL_OW 301
4267: OR
4268: IFFALSE 4218
// RemoveSeeing ( _x , _y , side ) ;
4270: LD_VAR 0 8
4274: PPUSH
4275: LD_VAR 0 9
4279: PPUSH
4280: LD_VAR 0 6
4284: PPUSH
4285: CALL_OW 331
// end ; end_of_file
4289: LD_VAR 0 4
4293: RET
// export ru_radar export globalGameSaveCounter ; every 0 0$1 do
4294: GO 4296
4296: DISABLE
// begin enable ;
4297: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4298: LD_STRING updateTimer(
4300: PUSH
4301: LD_OWVAR 1
4305: STR
4306: PUSH
4307: LD_STRING );
4309: STR
4310: PPUSH
4311: CALL_OW 559
// end ;
4315: END
// every 0 0$1 do
4316: GO 4318
4318: DISABLE
// begin globalGameSaveCounter := 0 ;
4319: LD_ADDR_EXP 11
4323: PUSH
4324: LD_INT 0
4326: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4327: LD_STRING setGameSaveCounter(0)
4329: PPUSH
4330: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4334: LD_STRING initStreamRollete();
4336: PPUSH
4337: CALL_OW 559
// InitStreamMode ;
4341: CALL 5667 0 0
// DefineStreamItems ( false ) ;
4345: LD_INT 0
4347: PPUSH
4348: CALL 6131 0 1
// end ;
4352: END
// export function SOS_MapStart ( ) ; begin
4353: LD_INT 0
4355: PPUSH
// if streamModeActive then
4356: LD_EXP 12
4360: IFFALSE 4369
// DefineStreamItems ( true ) ;
4362: LD_INT 1
4364: PPUSH
4365: CALL 6131 0 1
// UpdateLuaVariables ( ) ;
4369: CALL 4386 0 0
// UpdateFactoryWaypoints ( ) ;
4373: CALL 18992 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4377: CALL 19249 0 0
// end ;
4381: LD_VAR 0 1
4385: RET
// function UpdateLuaVariables ( ) ; begin
4386: LD_INT 0
4388: PPUSH
// if globalGameSaveCounter then
4389: LD_EXP 11
4393: IFFALSE 4427
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4395: LD_ADDR_EXP 11
4399: PUSH
4400: LD_EXP 11
4404: PPUSH
4405: CALL 58917 0 1
4409: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4410: LD_STRING setGameSaveCounter(
4412: PUSH
4413: LD_EXP 11
4417: STR
4418: PUSH
4419: LD_STRING )
4421: STR
4422: PPUSH
4423: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4427: LD_STRING setGameDifficulty(
4429: PUSH
4430: LD_OWVAR 67
4434: STR
4435: PUSH
4436: LD_STRING )
4438: STR
4439: PPUSH
4440: CALL_OW 559
// end ;
4444: LD_VAR 0 1
4448: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4449: LD_INT 0
4451: PPUSH
// if p2 = stream_mode then
4452: LD_VAR 0 2
4456: PUSH
4457: LD_INT 100
4459: EQUAL
4460: IFFALSE 5463
// begin if not StreamModeActive then
4462: LD_EXP 12
4466: NOT
4467: IFFALSE 4477
// StreamModeActive := true ;
4469: LD_ADDR_EXP 12
4473: PUSH
4474: LD_INT 1
4476: ST_TO_ADDR
// if p3 = 0 then
4477: LD_VAR 0 3
4481: PUSH
4482: LD_INT 0
4484: EQUAL
4485: IFFALSE 4491
// InitStreamMode ;
4487: CALL 5667 0 0
// if p3 = 1 then
4491: LD_VAR 0 3
4495: PUSH
4496: LD_INT 1
4498: EQUAL
4499: IFFALSE 4509
// sRocket := true ;
4501: LD_ADDR_EXP 17
4505: PUSH
4506: LD_INT 1
4508: ST_TO_ADDR
// if p3 = 2 then
4509: LD_VAR 0 3
4513: PUSH
4514: LD_INT 2
4516: EQUAL
4517: IFFALSE 4527
// sSpeed := true ;
4519: LD_ADDR_EXP 16
4523: PUSH
4524: LD_INT 1
4526: ST_TO_ADDR
// if p3 = 3 then
4527: LD_VAR 0 3
4531: PUSH
4532: LD_INT 3
4534: EQUAL
4535: IFFALSE 4545
// sEngine := true ;
4537: LD_ADDR_EXP 18
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// if p3 = 4 then
4545: LD_VAR 0 3
4549: PUSH
4550: LD_INT 4
4552: EQUAL
4553: IFFALSE 4563
// sSpec := true ;
4555: LD_ADDR_EXP 15
4559: PUSH
4560: LD_INT 1
4562: ST_TO_ADDR
// if p3 = 5 then
4563: LD_VAR 0 3
4567: PUSH
4568: LD_INT 5
4570: EQUAL
4571: IFFALSE 4581
// sLevel := true ;
4573: LD_ADDR_EXP 19
4577: PUSH
4578: LD_INT 1
4580: ST_TO_ADDR
// if p3 = 6 then
4581: LD_VAR 0 3
4585: PUSH
4586: LD_INT 6
4588: EQUAL
4589: IFFALSE 4599
// sArmoury := true ;
4591: LD_ADDR_EXP 20
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// if p3 = 7 then
4599: LD_VAR 0 3
4603: PUSH
4604: LD_INT 7
4606: EQUAL
4607: IFFALSE 4617
// sRadar := true ;
4609: LD_ADDR_EXP 21
4613: PUSH
4614: LD_INT 1
4616: ST_TO_ADDR
// if p3 = 8 then
4617: LD_VAR 0 3
4621: PUSH
4622: LD_INT 8
4624: EQUAL
4625: IFFALSE 4635
// sBunker := true ;
4627: LD_ADDR_EXP 22
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// if p3 = 9 then
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 9
4642: EQUAL
4643: IFFALSE 4653
// sHack := true ;
4645: LD_ADDR_EXP 23
4649: PUSH
4650: LD_INT 1
4652: ST_TO_ADDR
// if p3 = 10 then
4653: LD_VAR 0 3
4657: PUSH
4658: LD_INT 10
4660: EQUAL
4661: IFFALSE 4671
// sFire := true ;
4663: LD_ADDR_EXP 24
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// if p3 = 11 then
4671: LD_VAR 0 3
4675: PUSH
4676: LD_INT 11
4678: EQUAL
4679: IFFALSE 4689
// sRefresh := true ;
4681: LD_ADDR_EXP 25
4685: PUSH
4686: LD_INT 1
4688: ST_TO_ADDR
// if p3 = 12 then
4689: LD_VAR 0 3
4693: PUSH
4694: LD_INT 12
4696: EQUAL
4697: IFFALSE 4707
// sExp := true ;
4699: LD_ADDR_EXP 26
4703: PUSH
4704: LD_INT 1
4706: ST_TO_ADDR
// if p3 = 13 then
4707: LD_VAR 0 3
4711: PUSH
4712: LD_INT 13
4714: EQUAL
4715: IFFALSE 4725
// sDepot := true ;
4717: LD_ADDR_EXP 27
4721: PUSH
4722: LD_INT 1
4724: ST_TO_ADDR
// if p3 = 14 then
4725: LD_VAR 0 3
4729: PUSH
4730: LD_INT 14
4732: EQUAL
4733: IFFALSE 4743
// sFlag := true ;
4735: LD_ADDR_EXP 28
4739: PUSH
4740: LD_INT 1
4742: ST_TO_ADDR
// if p3 = 15 then
4743: LD_VAR 0 3
4747: PUSH
4748: LD_INT 15
4750: EQUAL
4751: IFFALSE 4761
// sKamikadze := true ;
4753: LD_ADDR_EXP 36
4757: PUSH
4758: LD_INT 1
4760: ST_TO_ADDR
// if p3 = 16 then
4761: LD_VAR 0 3
4765: PUSH
4766: LD_INT 16
4768: EQUAL
4769: IFFALSE 4779
// sTroll := true ;
4771: LD_ADDR_EXP 37
4775: PUSH
4776: LD_INT 1
4778: ST_TO_ADDR
// if p3 = 17 then
4779: LD_VAR 0 3
4783: PUSH
4784: LD_INT 17
4786: EQUAL
4787: IFFALSE 4797
// sSlow := true ;
4789: LD_ADDR_EXP 38
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if p3 = 18 then
4797: LD_VAR 0 3
4801: PUSH
4802: LD_INT 18
4804: EQUAL
4805: IFFALSE 4815
// sLack := true ;
4807: LD_ADDR_EXP 39
4811: PUSH
4812: LD_INT 1
4814: ST_TO_ADDR
// if p3 = 19 then
4815: LD_VAR 0 3
4819: PUSH
4820: LD_INT 19
4822: EQUAL
4823: IFFALSE 4833
// sTank := true ;
4825: LD_ADDR_EXP 41
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// if p3 = 20 then
4833: LD_VAR 0 3
4837: PUSH
4838: LD_INT 20
4840: EQUAL
4841: IFFALSE 4851
// sRemote := true ;
4843: LD_ADDR_EXP 42
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
// if p3 = 21 then
4851: LD_VAR 0 3
4855: PUSH
4856: LD_INT 21
4858: EQUAL
4859: IFFALSE 4869
// sPowell := true ;
4861: LD_ADDR_EXP 43
4865: PUSH
4866: LD_INT 1
4868: ST_TO_ADDR
// if p3 = 22 then
4869: LD_VAR 0 3
4873: PUSH
4874: LD_INT 22
4876: EQUAL
4877: IFFALSE 4887
// sTeleport := true ;
4879: LD_ADDR_EXP 46
4883: PUSH
4884: LD_INT 1
4886: ST_TO_ADDR
// if p3 = 23 then
4887: LD_VAR 0 3
4891: PUSH
4892: LD_INT 23
4894: EQUAL
4895: IFFALSE 4905
// sOilTower := true ;
4897: LD_ADDR_EXP 48
4901: PUSH
4902: LD_INT 1
4904: ST_TO_ADDR
// if p3 = 24 then
4905: LD_VAR 0 3
4909: PUSH
4910: LD_INT 24
4912: EQUAL
4913: IFFALSE 4923
// sShovel := true ;
4915: LD_ADDR_EXP 49
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// if p3 = 25 then
4923: LD_VAR 0 3
4927: PUSH
4928: LD_INT 25
4930: EQUAL
4931: IFFALSE 4941
// sSheik := true ;
4933: LD_ADDR_EXP 50
4937: PUSH
4938: LD_INT 1
4940: ST_TO_ADDR
// if p3 = 26 then
4941: LD_VAR 0 3
4945: PUSH
4946: LD_INT 26
4948: EQUAL
4949: IFFALSE 4959
// sEarthquake := true ;
4951: LD_ADDR_EXP 52
4955: PUSH
4956: LD_INT 1
4958: ST_TO_ADDR
// if p3 = 27 then
4959: LD_VAR 0 3
4963: PUSH
4964: LD_INT 27
4966: EQUAL
4967: IFFALSE 4977
// sAI := true ;
4969: LD_ADDR_EXP 53
4973: PUSH
4974: LD_INT 1
4976: ST_TO_ADDR
// if p3 = 28 then
4977: LD_VAR 0 3
4981: PUSH
4982: LD_INT 28
4984: EQUAL
4985: IFFALSE 4995
// sCargo := true ;
4987: LD_ADDR_EXP 56
4991: PUSH
4992: LD_INT 1
4994: ST_TO_ADDR
// if p3 = 29 then
4995: LD_VAR 0 3
4999: PUSH
5000: LD_INT 29
5002: EQUAL
5003: IFFALSE 5013
// sDLaser := true ;
5005: LD_ADDR_EXP 57
5009: PUSH
5010: LD_INT 1
5012: ST_TO_ADDR
// if p3 = 30 then
5013: LD_VAR 0 3
5017: PUSH
5018: LD_INT 30
5020: EQUAL
5021: IFFALSE 5031
// sExchange := true ;
5023: LD_ADDR_EXP 58
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// if p3 = 31 then
5031: LD_VAR 0 3
5035: PUSH
5036: LD_INT 31
5038: EQUAL
5039: IFFALSE 5049
// sFac := true ;
5041: LD_ADDR_EXP 59
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if p3 = 32 then
5049: LD_VAR 0 3
5053: PUSH
5054: LD_INT 32
5056: EQUAL
5057: IFFALSE 5067
// sPower := true ;
5059: LD_ADDR_EXP 60
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// if p3 = 33 then
5067: LD_VAR 0 3
5071: PUSH
5072: LD_INT 33
5074: EQUAL
5075: IFFALSE 5085
// sRandom := true ;
5077: LD_ADDR_EXP 61
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// if p3 = 34 then
5085: LD_VAR 0 3
5089: PUSH
5090: LD_INT 34
5092: EQUAL
5093: IFFALSE 5103
// sShield := true ;
5095: LD_ADDR_EXP 62
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// if p3 = 35 then
5103: LD_VAR 0 3
5107: PUSH
5108: LD_INT 35
5110: EQUAL
5111: IFFALSE 5121
// sTime := true ;
5113: LD_ADDR_EXP 63
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// if p3 = 36 then
5121: LD_VAR 0 3
5125: PUSH
5126: LD_INT 36
5128: EQUAL
5129: IFFALSE 5139
// sTools := true ;
5131: LD_ADDR_EXP 64
5135: PUSH
5136: LD_INT 1
5138: ST_TO_ADDR
// if p3 = 101 then
5139: LD_VAR 0 3
5143: PUSH
5144: LD_INT 101
5146: EQUAL
5147: IFFALSE 5157
// sSold := true ;
5149: LD_ADDR_EXP 29
5153: PUSH
5154: LD_INT 1
5156: ST_TO_ADDR
// if p3 = 102 then
5157: LD_VAR 0 3
5161: PUSH
5162: LD_INT 102
5164: EQUAL
5165: IFFALSE 5175
// sDiff := true ;
5167: LD_ADDR_EXP 30
5171: PUSH
5172: LD_INT 1
5174: ST_TO_ADDR
// if p3 = 103 then
5175: LD_VAR 0 3
5179: PUSH
5180: LD_INT 103
5182: EQUAL
5183: IFFALSE 5193
// sFog := true ;
5185: LD_ADDR_EXP 33
5189: PUSH
5190: LD_INT 1
5192: ST_TO_ADDR
// if p3 = 104 then
5193: LD_VAR 0 3
5197: PUSH
5198: LD_INT 104
5200: EQUAL
5201: IFFALSE 5211
// sReset := true ;
5203: LD_ADDR_EXP 34
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// if p3 = 105 then
5211: LD_VAR 0 3
5215: PUSH
5216: LD_INT 105
5218: EQUAL
5219: IFFALSE 5229
// sSun := true ;
5221: LD_ADDR_EXP 35
5225: PUSH
5226: LD_INT 1
5228: ST_TO_ADDR
// if p3 = 106 then
5229: LD_VAR 0 3
5233: PUSH
5234: LD_INT 106
5236: EQUAL
5237: IFFALSE 5247
// sTiger := true ;
5239: LD_ADDR_EXP 31
5243: PUSH
5244: LD_INT 1
5246: ST_TO_ADDR
// if p3 = 107 then
5247: LD_VAR 0 3
5251: PUSH
5252: LD_INT 107
5254: EQUAL
5255: IFFALSE 5265
// sBomb := true ;
5257: LD_ADDR_EXP 32
5261: PUSH
5262: LD_INT 1
5264: ST_TO_ADDR
// if p3 = 108 then
5265: LD_VAR 0 3
5269: PUSH
5270: LD_INT 108
5272: EQUAL
5273: IFFALSE 5283
// sWound := true ;
5275: LD_ADDR_EXP 40
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// if p3 = 109 then
5283: LD_VAR 0 3
5287: PUSH
5288: LD_INT 109
5290: EQUAL
5291: IFFALSE 5301
// sBetray := true ;
5293: LD_ADDR_EXP 44
5297: PUSH
5298: LD_INT 1
5300: ST_TO_ADDR
// if p3 = 110 then
5301: LD_VAR 0 3
5305: PUSH
5306: LD_INT 110
5308: EQUAL
5309: IFFALSE 5319
// sContamin := true ;
5311: LD_ADDR_EXP 45
5315: PUSH
5316: LD_INT 1
5318: ST_TO_ADDR
// if p3 = 111 then
5319: LD_VAR 0 3
5323: PUSH
5324: LD_INT 111
5326: EQUAL
5327: IFFALSE 5337
// sOil := true ;
5329: LD_ADDR_EXP 47
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// if p3 = 112 then
5337: LD_VAR 0 3
5341: PUSH
5342: LD_INT 112
5344: EQUAL
5345: IFFALSE 5355
// sStu := true ;
5347: LD_ADDR_EXP 51
5351: PUSH
5352: LD_INT 1
5354: ST_TO_ADDR
// if p3 = 113 then
5355: LD_VAR 0 3
5359: PUSH
5360: LD_INT 113
5362: EQUAL
5363: IFFALSE 5373
// sBazooka := true ;
5365: LD_ADDR_EXP 54
5369: PUSH
5370: LD_INT 1
5372: ST_TO_ADDR
// if p3 = 114 then
5373: LD_VAR 0 3
5377: PUSH
5378: LD_INT 114
5380: EQUAL
5381: IFFALSE 5391
// sMortar := true ;
5383: LD_ADDR_EXP 55
5387: PUSH
5388: LD_INT 1
5390: ST_TO_ADDR
// if p3 = 115 then
5391: LD_VAR 0 3
5395: PUSH
5396: LD_INT 115
5398: EQUAL
5399: IFFALSE 5409
// sRanger := true ;
5401: LD_ADDR_EXP 65
5405: PUSH
5406: LD_INT 1
5408: ST_TO_ADDR
// if p3 = 116 then
5409: LD_VAR 0 3
5413: PUSH
5414: LD_INT 116
5416: EQUAL
5417: IFFALSE 5427
// sComputer := true ;
5419: LD_ADDR_EXP 66
5423: PUSH
5424: LD_INT 1
5426: ST_TO_ADDR
// if p3 = 117 then
5427: LD_VAR 0 3
5431: PUSH
5432: LD_INT 117
5434: EQUAL
5435: IFFALSE 5445
// s30 := true ;
5437: LD_ADDR_EXP 67
5441: PUSH
5442: LD_INT 1
5444: ST_TO_ADDR
// if p3 = 118 then
5445: LD_VAR 0 3
5449: PUSH
5450: LD_INT 118
5452: EQUAL
5453: IFFALSE 5463
// s60 := true ;
5455: LD_ADDR_EXP 68
5459: PUSH
5460: LD_INT 1
5462: ST_TO_ADDR
// end ; if p2 = hack_mode then
5463: LD_VAR 0 2
5467: PUSH
5468: LD_INT 101
5470: EQUAL
5471: IFFALSE 5599
// begin case p3 of 1 :
5473: LD_VAR 0 3
5477: PUSH
5478: LD_INT 1
5480: DOUBLE
5481: EQUAL
5482: IFTRUE 5486
5484: GO 5493
5486: POP
// hHackUnlimitedResources ; 2 :
5487: CALL 17738 0 0
5491: GO 5599
5493: LD_INT 2
5495: DOUBLE
5496: EQUAL
5497: IFTRUE 5501
5499: GO 5508
5501: POP
// hHackSetLevel10 ; 3 :
5502: CALL 17871 0 0
5506: GO 5599
5508: LD_INT 3
5510: DOUBLE
5511: EQUAL
5512: IFTRUE 5516
5514: GO 5523
5516: POP
// hHackSetLevel10YourUnits ; 4 :
5517: CALL 17956 0 0
5521: GO 5599
5523: LD_INT 4
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5538
5531: POP
// hHackInvincible ; 5 :
5532: CALL 18404 0 0
5536: GO 5599
5538: LD_INT 5
5540: DOUBLE
5541: EQUAL
5542: IFTRUE 5546
5544: GO 5553
5546: POP
// hHackInvisible ; 6 :
5547: CALL 18515 0 0
5551: GO 5599
5553: LD_INT 6
5555: DOUBLE
5556: EQUAL
5557: IFTRUE 5561
5559: GO 5568
5561: POP
// hHackChangeYourSide ; 7 :
5562: CALL 18572 0 0
5566: GO 5599
5568: LD_INT 7
5570: DOUBLE
5571: EQUAL
5572: IFTRUE 5576
5574: GO 5583
5576: POP
// hHackChangeUnitSide ; 8 :
5577: CALL 18614 0 0
5581: GO 5599
5583: LD_INT 8
5585: DOUBLE
5586: EQUAL
5587: IFTRUE 5591
5589: GO 5598
5591: POP
// hHackFog ; end ;
5592: CALL 18715 0 0
5596: GO 5599
5598: POP
// end ; if p2 = game_save_mode then
5599: LD_VAR 0 2
5603: PUSH
5604: LD_INT 102
5606: EQUAL
5607: IFFALSE 5662
// begin if p3 = 1 then
5609: LD_VAR 0 3
5613: PUSH
5614: LD_INT 1
5616: EQUAL
5617: IFFALSE 5629
// globalGameSaveCounter := p4 ;
5619: LD_ADDR_EXP 11
5623: PUSH
5624: LD_VAR 0 4
5628: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5629: LD_VAR 0 3
5633: PUSH
5634: LD_INT 2
5636: EQUAL
5637: PUSH
5638: LD_EXP 11
5642: AND
5643: IFFALSE 5662
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5645: LD_STRING setGameSaveCounter(
5647: PUSH
5648: LD_EXP 11
5652: STR
5653: PUSH
5654: LD_STRING )
5656: STR
5657: PPUSH
5658: CALL_OW 559
// end ; end ;
5662: LD_VAR 0 7
5666: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5667: LD_INT 0
5669: PPUSH
// streamModeActive := false ;
5670: LD_ADDR_EXP 12
5674: PUSH
5675: LD_INT 0
5677: ST_TO_ADDR
// normalCounter := 36 ;
5678: LD_ADDR_EXP 13
5682: PUSH
5683: LD_INT 36
5685: ST_TO_ADDR
// hardcoreCounter := 18 ;
5686: LD_ADDR_EXP 14
5690: PUSH
5691: LD_INT 18
5693: ST_TO_ADDR
// sRocket := false ;
5694: LD_ADDR_EXP 17
5698: PUSH
5699: LD_INT 0
5701: ST_TO_ADDR
// sSpeed := false ;
5702: LD_ADDR_EXP 16
5706: PUSH
5707: LD_INT 0
5709: ST_TO_ADDR
// sEngine := false ;
5710: LD_ADDR_EXP 18
5714: PUSH
5715: LD_INT 0
5717: ST_TO_ADDR
// sSpec := false ;
5718: LD_ADDR_EXP 15
5722: PUSH
5723: LD_INT 0
5725: ST_TO_ADDR
// sLevel := false ;
5726: LD_ADDR_EXP 19
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// sArmoury := false ;
5734: LD_ADDR_EXP 20
5738: PUSH
5739: LD_INT 0
5741: ST_TO_ADDR
// sRadar := false ;
5742: LD_ADDR_EXP 21
5746: PUSH
5747: LD_INT 0
5749: ST_TO_ADDR
// sBunker := false ;
5750: LD_ADDR_EXP 22
5754: PUSH
5755: LD_INT 0
5757: ST_TO_ADDR
// sHack := false ;
5758: LD_ADDR_EXP 23
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
// sFire := false ;
5766: LD_ADDR_EXP 24
5770: PUSH
5771: LD_INT 0
5773: ST_TO_ADDR
// sRefresh := false ;
5774: LD_ADDR_EXP 25
5778: PUSH
5779: LD_INT 0
5781: ST_TO_ADDR
// sExp := false ;
5782: LD_ADDR_EXP 26
5786: PUSH
5787: LD_INT 0
5789: ST_TO_ADDR
// sDepot := false ;
5790: LD_ADDR_EXP 27
5794: PUSH
5795: LD_INT 0
5797: ST_TO_ADDR
// sFlag := false ;
5798: LD_ADDR_EXP 28
5802: PUSH
5803: LD_INT 0
5805: ST_TO_ADDR
// sKamikadze := false ;
5806: LD_ADDR_EXP 36
5810: PUSH
5811: LD_INT 0
5813: ST_TO_ADDR
// sTroll := false ;
5814: LD_ADDR_EXP 37
5818: PUSH
5819: LD_INT 0
5821: ST_TO_ADDR
// sSlow := false ;
5822: LD_ADDR_EXP 38
5826: PUSH
5827: LD_INT 0
5829: ST_TO_ADDR
// sLack := false ;
5830: LD_ADDR_EXP 39
5834: PUSH
5835: LD_INT 0
5837: ST_TO_ADDR
// sTank := false ;
5838: LD_ADDR_EXP 41
5842: PUSH
5843: LD_INT 0
5845: ST_TO_ADDR
// sRemote := false ;
5846: LD_ADDR_EXP 42
5850: PUSH
5851: LD_INT 0
5853: ST_TO_ADDR
// sPowell := false ;
5854: LD_ADDR_EXP 43
5858: PUSH
5859: LD_INT 0
5861: ST_TO_ADDR
// sTeleport := false ;
5862: LD_ADDR_EXP 46
5866: PUSH
5867: LD_INT 0
5869: ST_TO_ADDR
// sOilTower := false ;
5870: LD_ADDR_EXP 48
5874: PUSH
5875: LD_INT 0
5877: ST_TO_ADDR
// sShovel := false ;
5878: LD_ADDR_EXP 49
5882: PUSH
5883: LD_INT 0
5885: ST_TO_ADDR
// sSheik := false ;
5886: LD_ADDR_EXP 50
5890: PUSH
5891: LD_INT 0
5893: ST_TO_ADDR
// sEarthquake := false ;
5894: LD_ADDR_EXP 52
5898: PUSH
5899: LD_INT 0
5901: ST_TO_ADDR
// sAI := false ;
5902: LD_ADDR_EXP 53
5906: PUSH
5907: LD_INT 0
5909: ST_TO_ADDR
// sCargo := false ;
5910: LD_ADDR_EXP 56
5914: PUSH
5915: LD_INT 0
5917: ST_TO_ADDR
// sDLaser := false ;
5918: LD_ADDR_EXP 57
5922: PUSH
5923: LD_INT 0
5925: ST_TO_ADDR
// sExchange := false ;
5926: LD_ADDR_EXP 58
5930: PUSH
5931: LD_INT 0
5933: ST_TO_ADDR
// sFac := false ;
5934: LD_ADDR_EXP 59
5938: PUSH
5939: LD_INT 0
5941: ST_TO_ADDR
// sPower := false ;
5942: LD_ADDR_EXP 60
5946: PUSH
5947: LD_INT 0
5949: ST_TO_ADDR
// sRandom := false ;
5950: LD_ADDR_EXP 61
5954: PUSH
5955: LD_INT 0
5957: ST_TO_ADDR
// sShield := false ;
5958: LD_ADDR_EXP 62
5962: PUSH
5963: LD_INT 0
5965: ST_TO_ADDR
// sTime := false ;
5966: LD_ADDR_EXP 63
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// sTools := false ;
5974: LD_ADDR_EXP 64
5978: PUSH
5979: LD_INT 0
5981: ST_TO_ADDR
// sSold := false ;
5982: LD_ADDR_EXP 29
5986: PUSH
5987: LD_INT 0
5989: ST_TO_ADDR
// sDiff := false ;
5990: LD_ADDR_EXP 30
5994: PUSH
5995: LD_INT 0
5997: ST_TO_ADDR
// sFog := false ;
5998: LD_ADDR_EXP 33
6002: PUSH
6003: LD_INT 0
6005: ST_TO_ADDR
// sReset := false ;
6006: LD_ADDR_EXP 34
6010: PUSH
6011: LD_INT 0
6013: ST_TO_ADDR
// sSun := false ;
6014: LD_ADDR_EXP 35
6018: PUSH
6019: LD_INT 0
6021: ST_TO_ADDR
// sTiger := false ;
6022: LD_ADDR_EXP 31
6026: PUSH
6027: LD_INT 0
6029: ST_TO_ADDR
// sBomb := false ;
6030: LD_ADDR_EXP 32
6034: PUSH
6035: LD_INT 0
6037: ST_TO_ADDR
// sWound := false ;
6038: LD_ADDR_EXP 40
6042: PUSH
6043: LD_INT 0
6045: ST_TO_ADDR
// sBetray := false ;
6046: LD_ADDR_EXP 44
6050: PUSH
6051: LD_INT 0
6053: ST_TO_ADDR
// sContamin := false ;
6054: LD_ADDR_EXP 45
6058: PUSH
6059: LD_INT 0
6061: ST_TO_ADDR
// sOil := false ;
6062: LD_ADDR_EXP 47
6066: PUSH
6067: LD_INT 0
6069: ST_TO_ADDR
// sStu := false ;
6070: LD_ADDR_EXP 51
6074: PUSH
6075: LD_INT 0
6077: ST_TO_ADDR
// sBazooka := false ;
6078: LD_ADDR_EXP 54
6082: PUSH
6083: LD_INT 0
6085: ST_TO_ADDR
// sMortar := false ;
6086: LD_ADDR_EXP 55
6090: PUSH
6091: LD_INT 0
6093: ST_TO_ADDR
// sRanger := false ;
6094: LD_ADDR_EXP 65
6098: PUSH
6099: LD_INT 0
6101: ST_TO_ADDR
// sComputer := false ;
6102: LD_ADDR_EXP 66
6106: PUSH
6107: LD_INT 0
6109: ST_TO_ADDR
// s30 := false ;
6110: LD_ADDR_EXP 67
6114: PUSH
6115: LD_INT 0
6117: ST_TO_ADDR
// s60 := false ;
6118: LD_ADDR_EXP 68
6122: PUSH
6123: LD_INT 0
6125: ST_TO_ADDR
// end ;
6126: LD_VAR 0 1
6130: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6131: LD_INT 0
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
6139: PPUSH
// result := [ ] ;
6140: LD_ADDR_VAR 0 2
6144: PUSH
6145: EMPTY
6146: ST_TO_ADDR
// if campaign_id = 1 then
6147: LD_OWVAR 69
6151: PUSH
6152: LD_INT 1
6154: EQUAL
6155: IFFALSE 9321
// begin case mission_number of 1 :
6157: LD_OWVAR 70
6161: PUSH
6162: LD_INT 1
6164: DOUBLE
6165: EQUAL
6166: IFTRUE 6170
6168: GO 6246
6170: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: LD_INT 2
6178: PUSH
6179: LD_INT 4
6181: PUSH
6182: LD_INT 11
6184: PUSH
6185: LD_INT 12
6187: PUSH
6188: LD_INT 15
6190: PUSH
6191: LD_INT 16
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 23
6199: PUSH
6200: LD_INT 26
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 101
6216: PUSH
6217: LD_INT 102
6219: PUSH
6220: LD_INT 106
6222: PUSH
6223: LD_INT 116
6225: PUSH
6226: LD_INT 117
6228: PUSH
6229: LD_INT 118
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: ST_TO_ADDR
6244: GO 9319
6246: LD_INT 2
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6338
6254: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6255: LD_ADDR_VAR 0 2
6259: PUSH
6260: LD_INT 2
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 11
6268: PUSH
6269: LD_INT 12
6271: PUSH
6272: LD_INT 15
6274: PUSH
6275: LD_INT 16
6277: PUSH
6278: LD_INT 22
6280: PUSH
6281: LD_INT 23
6283: PUSH
6284: LD_INT 26
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 101
6300: PUSH
6301: LD_INT 102
6303: PUSH
6304: LD_INT 105
6306: PUSH
6307: LD_INT 106
6309: PUSH
6310: LD_INT 108
6312: PUSH
6313: LD_INT 116
6315: PUSH
6316: LD_INT 117
6318: PUSH
6319: LD_INT 118
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: ST_TO_ADDR
6336: GO 9319
6338: LD_INT 3
6340: DOUBLE
6341: EQUAL
6342: IFTRUE 6346
6344: GO 6434
6346: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6347: LD_ADDR_VAR 0 2
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 5
6360: PUSH
6361: LD_INT 11
6363: PUSH
6364: LD_INT 12
6366: PUSH
6367: LD_INT 15
6369: PUSH
6370: LD_INT 16
6372: PUSH
6373: LD_INT 22
6375: PUSH
6376: LD_INT 26
6378: PUSH
6379: LD_INT 36
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 101
6396: PUSH
6397: LD_INT 102
6399: PUSH
6400: LD_INT 105
6402: PUSH
6403: LD_INT 106
6405: PUSH
6406: LD_INT 108
6408: PUSH
6409: LD_INT 116
6411: PUSH
6412: LD_INT 117
6414: PUSH
6415: LD_INT 118
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 9319
6434: LD_INT 4
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6538
6442: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 4
6453: PUSH
6454: LD_INT 5
6456: PUSH
6457: LD_INT 8
6459: PUSH
6460: LD_INT 11
6462: PUSH
6463: LD_INT 12
6465: PUSH
6466: LD_INT 15
6468: PUSH
6469: LD_INT 16
6471: PUSH
6472: LD_INT 22
6474: PUSH
6475: LD_INT 23
6477: PUSH
6478: LD_INT 26
6480: PUSH
6481: LD_INT 36
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 101
6500: PUSH
6501: LD_INT 102
6503: PUSH
6504: LD_INT 105
6506: PUSH
6507: LD_INT 106
6509: PUSH
6510: LD_INT 108
6512: PUSH
6513: LD_INT 116
6515: PUSH
6516: LD_INT 117
6518: PUSH
6519: LD_INT 118
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: ST_TO_ADDR
6536: GO 9319
6538: LD_INT 5
6540: DOUBLE
6541: EQUAL
6542: IFTRUE 6546
6544: GO 6658
6546: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: LD_INT 2
6554: PUSH
6555: LD_INT 4
6557: PUSH
6558: LD_INT 5
6560: PUSH
6561: LD_INT 6
6563: PUSH
6564: LD_INT 8
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 15
6575: PUSH
6576: LD_INT 16
6578: PUSH
6579: LD_INT 22
6581: PUSH
6582: LD_INT 23
6584: PUSH
6585: LD_INT 25
6587: PUSH
6588: LD_INT 26
6590: PUSH
6591: LD_INT 36
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 101
6612: PUSH
6613: LD_INT 102
6615: PUSH
6616: LD_INT 105
6618: PUSH
6619: LD_INT 106
6621: PUSH
6622: LD_INT 108
6624: PUSH
6625: LD_INT 109
6627: PUSH
6628: LD_INT 112
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 117
6636: PUSH
6637: LD_INT 118
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 9319
6658: LD_INT 6
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6798
6666: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6667: LD_ADDR_VAR 0 2
6671: PUSH
6672: LD_INT 2
6674: PUSH
6675: LD_INT 4
6677: PUSH
6678: LD_INT 5
6680: PUSH
6681: LD_INT 6
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: LD_INT 11
6689: PUSH
6690: LD_INT 12
6692: PUSH
6693: LD_INT 15
6695: PUSH
6696: LD_INT 16
6698: PUSH
6699: LD_INT 20
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 22
6707: PUSH
6708: LD_INT 23
6710: PUSH
6711: LD_INT 25
6713: PUSH
6714: LD_INT 26
6716: PUSH
6717: LD_INT 30
6719: PUSH
6720: LD_INT 31
6722: PUSH
6723: LD_INT 32
6725: PUSH
6726: LD_INT 36
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 101
6752: PUSH
6753: LD_INT 102
6755: PUSH
6756: LD_INT 105
6758: PUSH
6759: LD_INT 106
6761: PUSH
6762: LD_INT 108
6764: PUSH
6765: LD_INT 109
6767: PUSH
6768: LD_INT 112
6770: PUSH
6771: LD_INT 116
6773: PUSH
6774: LD_INT 117
6776: PUSH
6777: LD_INT 118
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: ST_TO_ADDR
6796: GO 9319
6798: LD_INT 7
6800: DOUBLE
6801: EQUAL
6802: IFTRUE 6806
6804: GO 6918
6806: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6807: LD_ADDR_VAR 0 2
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: LD_INT 4
6817: PUSH
6818: LD_INT 5
6820: PUSH
6821: LD_INT 7
6823: PUSH
6824: LD_INT 11
6826: PUSH
6827: LD_INT 12
6829: PUSH
6830: LD_INT 15
6832: PUSH
6833: LD_INT 16
6835: PUSH
6836: LD_INT 20
6838: PUSH
6839: LD_INT 21
6841: PUSH
6842: LD_INT 22
6844: PUSH
6845: LD_INT 23
6847: PUSH
6848: LD_INT 25
6850: PUSH
6851: LD_INT 26
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 101
6872: PUSH
6873: LD_INT 102
6875: PUSH
6876: LD_INT 103
6878: PUSH
6879: LD_INT 105
6881: PUSH
6882: LD_INT 106
6884: PUSH
6885: LD_INT 108
6887: PUSH
6888: LD_INT 112
6890: PUSH
6891: LD_INT 116
6893: PUSH
6894: LD_INT 117
6896: PUSH
6897: LD_INT 118
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: ST_TO_ADDR
6916: GO 9319
6918: LD_INT 8
6920: DOUBLE
6921: EQUAL
6922: IFTRUE 6926
6924: GO 7066
6926: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6927: LD_ADDR_VAR 0 2
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: LD_INT 4
6937: PUSH
6938: LD_INT 5
6940: PUSH
6941: LD_INT 6
6943: PUSH
6944: LD_INT 7
6946: PUSH
6947: LD_INT 8
6949: PUSH
6950: LD_INT 11
6952: PUSH
6953: LD_INT 12
6955: PUSH
6956: LD_INT 15
6958: PUSH
6959: LD_INT 16
6961: PUSH
6962: LD_INT 20
6964: PUSH
6965: LD_INT 21
6967: PUSH
6968: LD_INT 22
6970: PUSH
6971: LD_INT 23
6973: PUSH
6974: LD_INT 25
6976: PUSH
6977: LD_INT 26
6979: PUSH
6980: LD_INT 30
6982: PUSH
6983: LD_INT 31
6985: PUSH
6986: LD_INT 32
6988: PUSH
6989: LD_INT 36
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 101
7016: PUSH
7017: LD_INT 102
7019: PUSH
7020: LD_INT 103
7022: PUSH
7023: LD_INT 105
7025: PUSH
7026: LD_INT 106
7028: PUSH
7029: LD_INT 108
7031: PUSH
7032: LD_INT 109
7034: PUSH
7035: LD_INT 112
7037: PUSH
7038: LD_INT 116
7040: PUSH
7041: LD_INT 117
7043: PUSH
7044: LD_INT 118
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 9319
7066: LD_INT 9
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7222
7074: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7075: LD_ADDR_VAR 0 2
7079: PUSH
7080: LD_INT 2
7082: PUSH
7083: LD_INT 4
7085: PUSH
7086: LD_INT 5
7088: PUSH
7089: LD_INT 6
7091: PUSH
7092: LD_INT 7
7094: PUSH
7095: LD_INT 8
7097: PUSH
7098: LD_INT 11
7100: PUSH
7101: LD_INT 12
7103: PUSH
7104: LD_INT 15
7106: PUSH
7107: LD_INT 16
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 22
7118: PUSH
7119: LD_INT 23
7121: PUSH
7122: LD_INT 25
7124: PUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 28
7130: PUSH
7131: LD_INT 30
7133: PUSH
7134: LD_INT 31
7136: PUSH
7137: LD_INT 32
7139: PUSH
7140: LD_INT 36
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 101
7168: PUSH
7169: LD_INT 102
7171: PUSH
7172: LD_INT 103
7174: PUSH
7175: LD_INT 105
7177: PUSH
7178: LD_INT 106
7180: PUSH
7181: LD_INT 108
7183: PUSH
7184: LD_INT 109
7186: PUSH
7187: LD_INT 112
7189: PUSH
7190: LD_INT 114
7192: PUSH
7193: LD_INT 116
7195: PUSH
7196: LD_INT 117
7198: PUSH
7199: LD_INT 118
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: ST_TO_ADDR
7220: GO 9319
7222: LD_INT 10
7224: DOUBLE
7225: EQUAL
7226: IFTRUE 7230
7228: GO 7426
7230: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7231: LD_ADDR_VAR 0 2
7235: PUSH
7236: LD_INT 2
7238: PUSH
7239: LD_INT 4
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: LD_INT 6
7247: PUSH
7248: LD_INT 7
7250: PUSH
7251: LD_INT 8
7253: PUSH
7254: LD_INT 9
7256: PUSH
7257: LD_INT 10
7259: PUSH
7260: LD_INT 11
7262: PUSH
7263: LD_INT 12
7265: PUSH
7266: LD_INT 13
7268: PUSH
7269: LD_INT 14
7271: PUSH
7272: LD_INT 15
7274: PUSH
7275: LD_INT 16
7277: PUSH
7278: LD_INT 17
7280: PUSH
7281: LD_INT 18
7283: PUSH
7284: LD_INT 19
7286: PUSH
7287: LD_INT 20
7289: PUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 22
7295: PUSH
7296: LD_INT 23
7298: PUSH
7299: LD_INT 24
7301: PUSH
7302: LD_INT 25
7304: PUSH
7305: LD_INT 26
7307: PUSH
7308: LD_INT 28
7310: PUSH
7311: LD_INT 30
7313: PUSH
7314: LD_INT 31
7316: PUSH
7317: LD_INT 32
7319: PUSH
7320: LD_INT 36
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 101
7356: PUSH
7357: LD_INT 102
7359: PUSH
7360: LD_INT 103
7362: PUSH
7363: LD_INT 104
7365: PUSH
7366: LD_INT 105
7368: PUSH
7369: LD_INT 106
7371: PUSH
7372: LD_INT 107
7374: PUSH
7375: LD_INT 108
7377: PUSH
7378: LD_INT 109
7380: PUSH
7381: LD_INT 110
7383: PUSH
7384: LD_INT 111
7386: PUSH
7387: LD_INT 112
7389: PUSH
7390: LD_INT 114
7392: PUSH
7393: LD_INT 116
7395: PUSH
7396: LD_INT 117
7398: PUSH
7399: LD_INT 118
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: ST_TO_ADDR
7424: GO 9319
7426: LD_INT 11
7428: DOUBLE
7429: EQUAL
7430: IFTRUE 7434
7432: GO 7638
7434: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7435: LD_ADDR_VAR 0 2
7439: PUSH
7440: LD_INT 2
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: LD_INT 4
7448: PUSH
7449: LD_INT 5
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: LD_INT 7
7457: PUSH
7458: LD_INT 8
7460: PUSH
7461: LD_INT 9
7463: PUSH
7464: LD_INT 10
7466: PUSH
7467: LD_INT 11
7469: PUSH
7470: LD_INT 12
7472: PUSH
7473: LD_INT 13
7475: PUSH
7476: LD_INT 14
7478: PUSH
7479: LD_INT 15
7481: PUSH
7482: LD_INT 16
7484: PUSH
7485: LD_INT 17
7487: PUSH
7488: LD_INT 18
7490: PUSH
7491: LD_INT 19
7493: PUSH
7494: LD_INT 20
7496: PUSH
7497: LD_INT 21
7499: PUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 23
7505: PUSH
7506: LD_INT 24
7508: PUSH
7509: LD_INT 25
7511: PUSH
7512: LD_INT 26
7514: PUSH
7515: LD_INT 28
7517: PUSH
7518: LD_INT 30
7520: PUSH
7521: LD_INT 31
7523: PUSH
7524: LD_INT 32
7526: PUSH
7527: LD_INT 34
7529: PUSH
7530: LD_INT 36
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 101
7568: PUSH
7569: LD_INT 102
7571: PUSH
7572: LD_INT 103
7574: PUSH
7575: LD_INT 104
7577: PUSH
7578: LD_INT 105
7580: PUSH
7581: LD_INT 106
7583: PUSH
7584: LD_INT 107
7586: PUSH
7587: LD_INT 108
7589: PUSH
7590: LD_INT 109
7592: PUSH
7593: LD_INT 110
7595: PUSH
7596: LD_INT 111
7598: PUSH
7599: LD_INT 112
7601: PUSH
7602: LD_INT 114
7604: PUSH
7605: LD_INT 116
7607: PUSH
7608: LD_INT 117
7610: PUSH
7611: LD_INT 118
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: ST_TO_ADDR
7636: GO 9319
7638: LD_INT 12
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7866
7646: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 2
7657: PUSH
7658: LD_INT 3
7660: PUSH
7661: LD_INT 4
7663: PUSH
7664: LD_INT 5
7666: PUSH
7667: LD_INT 6
7669: PUSH
7670: LD_INT 7
7672: PUSH
7673: LD_INT 8
7675: PUSH
7676: LD_INT 9
7678: PUSH
7679: LD_INT 10
7681: PUSH
7682: LD_INT 11
7684: PUSH
7685: LD_INT 12
7687: PUSH
7688: LD_INT 13
7690: PUSH
7691: LD_INT 14
7693: PUSH
7694: LD_INT 15
7696: PUSH
7697: LD_INT 16
7699: PUSH
7700: LD_INT 17
7702: PUSH
7703: LD_INT 18
7705: PUSH
7706: LD_INT 19
7708: PUSH
7709: LD_INT 20
7711: PUSH
7712: LD_INT 21
7714: PUSH
7715: LD_INT 22
7717: PUSH
7718: LD_INT 23
7720: PUSH
7721: LD_INT 24
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 26
7729: PUSH
7730: LD_INT 27
7732: PUSH
7733: LD_INT 28
7735: PUSH
7736: LD_INT 30
7738: PUSH
7739: LD_INT 31
7741: PUSH
7742: LD_INT 32
7744: PUSH
7745: LD_INT 33
7747: PUSH
7748: LD_INT 34
7750: PUSH
7751: LD_INT 36
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 101
7792: PUSH
7793: LD_INT 102
7795: PUSH
7796: LD_INT 103
7798: PUSH
7799: LD_INT 104
7801: PUSH
7802: LD_INT 105
7804: PUSH
7805: LD_INT 106
7807: PUSH
7808: LD_INT 107
7810: PUSH
7811: LD_INT 108
7813: PUSH
7814: LD_INT 109
7816: PUSH
7817: LD_INT 110
7819: PUSH
7820: LD_INT 111
7822: PUSH
7823: LD_INT 112
7825: PUSH
7826: LD_INT 113
7828: PUSH
7829: LD_INT 114
7831: PUSH
7832: LD_INT 116
7834: PUSH
7835: LD_INT 117
7837: PUSH
7838: LD_INT 118
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: ST_TO_ADDR
7864: GO 9319
7866: LD_INT 13
7868: DOUBLE
7869: EQUAL
7870: IFTRUE 7874
7872: GO 8082
7874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: LD_INT 2
7885: PUSH
7886: LD_INT 3
7888: PUSH
7889: LD_INT 4
7891: PUSH
7892: LD_INT 5
7894: PUSH
7895: LD_INT 8
7897: PUSH
7898: LD_INT 9
7900: PUSH
7901: LD_INT 10
7903: PUSH
7904: LD_INT 11
7906: PUSH
7907: LD_INT 12
7909: PUSH
7910: LD_INT 14
7912: PUSH
7913: LD_INT 15
7915: PUSH
7916: LD_INT 16
7918: PUSH
7919: LD_INT 17
7921: PUSH
7922: LD_INT 18
7924: PUSH
7925: LD_INT 19
7927: PUSH
7928: LD_INT 20
7930: PUSH
7931: LD_INT 21
7933: PUSH
7934: LD_INT 22
7936: PUSH
7937: LD_INT 23
7939: PUSH
7940: LD_INT 24
7942: PUSH
7943: LD_INT 25
7945: PUSH
7946: LD_INT 26
7948: PUSH
7949: LD_INT 27
7951: PUSH
7952: LD_INT 28
7954: PUSH
7955: LD_INT 30
7957: PUSH
7958: LD_INT 31
7960: PUSH
7961: LD_INT 32
7963: PUSH
7964: LD_INT 33
7966: PUSH
7967: LD_INT 34
7969: PUSH
7970: LD_INT 36
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 101
8008: PUSH
8009: LD_INT 102
8011: PUSH
8012: LD_INT 103
8014: PUSH
8015: LD_INT 104
8017: PUSH
8018: LD_INT 105
8020: PUSH
8021: LD_INT 106
8023: PUSH
8024: LD_INT 107
8026: PUSH
8027: LD_INT 108
8029: PUSH
8030: LD_INT 109
8032: PUSH
8033: LD_INT 110
8035: PUSH
8036: LD_INT 111
8038: PUSH
8039: LD_INT 112
8041: PUSH
8042: LD_INT 113
8044: PUSH
8045: LD_INT 114
8047: PUSH
8048: LD_INT 116
8050: PUSH
8051: LD_INT 117
8053: PUSH
8054: LD_INT 118
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: ST_TO_ADDR
8080: GO 9319
8082: LD_INT 14
8084: DOUBLE
8085: EQUAL
8086: IFTRUE 8090
8088: GO 8314
8090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8091: LD_ADDR_VAR 0 2
8095: PUSH
8096: LD_INT 1
8098: PUSH
8099: LD_INT 2
8101: PUSH
8102: LD_INT 3
8104: PUSH
8105: LD_INT 4
8107: PUSH
8108: LD_INT 5
8110: PUSH
8111: LD_INT 6
8113: PUSH
8114: LD_INT 7
8116: PUSH
8117: LD_INT 8
8119: PUSH
8120: LD_INT 9
8122: PUSH
8123: LD_INT 10
8125: PUSH
8126: LD_INT 11
8128: PUSH
8129: LD_INT 12
8131: PUSH
8132: LD_INT 13
8134: PUSH
8135: LD_INT 14
8137: PUSH
8138: LD_INT 15
8140: PUSH
8141: LD_INT 16
8143: PUSH
8144: LD_INT 17
8146: PUSH
8147: LD_INT 18
8149: PUSH
8150: LD_INT 19
8152: PUSH
8153: LD_INT 20
8155: PUSH
8156: LD_INT 21
8158: PUSH
8159: LD_INT 22
8161: PUSH
8162: LD_INT 23
8164: PUSH
8165: LD_INT 24
8167: PUSH
8168: LD_INT 25
8170: PUSH
8171: LD_INT 26
8173: PUSH
8174: LD_INT 27
8176: PUSH
8177: LD_INT 28
8179: PUSH
8180: LD_INT 29
8182: PUSH
8183: LD_INT 30
8185: PUSH
8186: LD_INT 31
8188: PUSH
8189: LD_INT 32
8191: PUSH
8192: LD_INT 33
8194: PUSH
8195: LD_INT 34
8197: PUSH
8198: LD_INT 36
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 101
8240: PUSH
8241: LD_INT 102
8243: PUSH
8244: LD_INT 103
8246: PUSH
8247: LD_INT 104
8249: PUSH
8250: LD_INT 105
8252: PUSH
8253: LD_INT 106
8255: PUSH
8256: LD_INT 107
8258: PUSH
8259: LD_INT 108
8261: PUSH
8262: LD_INT 109
8264: PUSH
8265: LD_INT 110
8267: PUSH
8268: LD_INT 111
8270: PUSH
8271: LD_INT 112
8273: PUSH
8274: LD_INT 113
8276: PUSH
8277: LD_INT 114
8279: PUSH
8280: LD_INT 116
8282: PUSH
8283: LD_INT 117
8285: PUSH
8286: LD_INT 118
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: ST_TO_ADDR
8312: GO 9319
8314: LD_INT 15
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8322
8320: GO 8546
8322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8323: LD_ADDR_VAR 0 2
8327: PUSH
8328: LD_INT 1
8330: PUSH
8331: LD_INT 2
8333: PUSH
8334: LD_INT 3
8336: PUSH
8337: LD_INT 4
8339: PUSH
8340: LD_INT 5
8342: PUSH
8343: LD_INT 6
8345: PUSH
8346: LD_INT 7
8348: PUSH
8349: LD_INT 8
8351: PUSH
8352: LD_INT 9
8354: PUSH
8355: LD_INT 10
8357: PUSH
8358: LD_INT 11
8360: PUSH
8361: LD_INT 12
8363: PUSH
8364: LD_INT 13
8366: PUSH
8367: LD_INT 14
8369: PUSH
8370: LD_INT 15
8372: PUSH
8373: LD_INT 16
8375: PUSH
8376: LD_INT 17
8378: PUSH
8379: LD_INT 18
8381: PUSH
8382: LD_INT 19
8384: PUSH
8385: LD_INT 20
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 22
8393: PUSH
8394: LD_INT 23
8396: PUSH
8397: LD_INT 24
8399: PUSH
8400: LD_INT 25
8402: PUSH
8403: LD_INT 26
8405: PUSH
8406: LD_INT 27
8408: PUSH
8409: LD_INT 28
8411: PUSH
8412: LD_INT 29
8414: PUSH
8415: LD_INT 30
8417: PUSH
8418: LD_INT 31
8420: PUSH
8421: LD_INT 32
8423: PUSH
8424: LD_INT 33
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 36
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 101
8472: PUSH
8473: LD_INT 102
8475: PUSH
8476: LD_INT 103
8478: PUSH
8479: LD_INT 104
8481: PUSH
8482: LD_INT 105
8484: PUSH
8485: LD_INT 106
8487: PUSH
8488: LD_INT 107
8490: PUSH
8491: LD_INT 108
8493: PUSH
8494: LD_INT 109
8496: PUSH
8497: LD_INT 110
8499: PUSH
8500: LD_INT 111
8502: PUSH
8503: LD_INT 112
8505: PUSH
8506: LD_INT 113
8508: PUSH
8509: LD_INT 114
8511: PUSH
8512: LD_INT 116
8514: PUSH
8515: LD_INT 117
8517: PUSH
8518: LD_INT 118
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: ST_TO_ADDR
8544: GO 9319
8546: LD_INT 16
8548: DOUBLE
8549: EQUAL
8550: IFTRUE 8554
8552: GO 8690
8554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8555: LD_ADDR_VAR 0 2
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: LD_INT 4
8565: PUSH
8566: LD_INT 5
8568: PUSH
8569: LD_INT 7
8571: PUSH
8572: LD_INT 11
8574: PUSH
8575: LD_INT 12
8577: PUSH
8578: LD_INT 15
8580: PUSH
8581: LD_INT 16
8583: PUSH
8584: LD_INT 20
8586: PUSH
8587: LD_INT 21
8589: PUSH
8590: LD_INT 22
8592: PUSH
8593: LD_INT 23
8595: PUSH
8596: LD_INT 25
8598: PUSH
8599: LD_INT 26
8601: PUSH
8602: LD_INT 30
8604: PUSH
8605: LD_INT 31
8607: PUSH
8608: LD_INT 32
8610: PUSH
8611: LD_INT 33
8613: PUSH
8614: LD_INT 34
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 101
8640: PUSH
8641: LD_INT 102
8643: PUSH
8644: LD_INT 103
8646: PUSH
8647: LD_INT 106
8649: PUSH
8650: LD_INT 108
8652: PUSH
8653: LD_INT 112
8655: PUSH
8656: LD_INT 113
8658: PUSH
8659: LD_INT 114
8661: PUSH
8662: LD_INT 116
8664: PUSH
8665: LD_INT 117
8667: PUSH
8668: LD_INT 118
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: ST_TO_ADDR
8688: GO 9319
8690: LD_INT 17
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8922
8698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8699: LD_ADDR_VAR 0 2
8703: PUSH
8704: LD_INT 1
8706: PUSH
8707: LD_INT 2
8709: PUSH
8710: LD_INT 3
8712: PUSH
8713: LD_INT 4
8715: PUSH
8716: LD_INT 5
8718: PUSH
8719: LD_INT 6
8721: PUSH
8722: LD_INT 7
8724: PUSH
8725: LD_INT 8
8727: PUSH
8728: LD_INT 9
8730: PUSH
8731: LD_INT 10
8733: PUSH
8734: LD_INT 11
8736: PUSH
8737: LD_INT 12
8739: PUSH
8740: LD_INT 13
8742: PUSH
8743: LD_INT 14
8745: PUSH
8746: LD_INT 15
8748: PUSH
8749: LD_INT 16
8751: PUSH
8752: LD_INT 17
8754: PUSH
8755: LD_INT 18
8757: PUSH
8758: LD_INT 19
8760: PUSH
8761: LD_INT 20
8763: PUSH
8764: LD_INT 21
8766: PUSH
8767: LD_INT 22
8769: PUSH
8770: LD_INT 23
8772: PUSH
8773: LD_INT 24
8775: PUSH
8776: LD_INT 25
8778: PUSH
8779: LD_INT 26
8781: PUSH
8782: LD_INT 27
8784: PUSH
8785: LD_INT 28
8787: PUSH
8788: LD_INT 29
8790: PUSH
8791: LD_INT 30
8793: PUSH
8794: LD_INT 31
8796: PUSH
8797: LD_INT 32
8799: PUSH
8800: LD_INT 33
8802: PUSH
8803: LD_INT 34
8805: PUSH
8806: LD_INT 36
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 101
8848: PUSH
8849: LD_INT 102
8851: PUSH
8852: LD_INT 103
8854: PUSH
8855: LD_INT 104
8857: PUSH
8858: LD_INT 105
8860: PUSH
8861: LD_INT 106
8863: PUSH
8864: LD_INT 107
8866: PUSH
8867: LD_INT 108
8869: PUSH
8870: LD_INT 109
8872: PUSH
8873: LD_INT 110
8875: PUSH
8876: LD_INT 111
8878: PUSH
8879: LD_INT 112
8881: PUSH
8882: LD_INT 113
8884: PUSH
8885: LD_INT 114
8887: PUSH
8888: LD_INT 116
8890: PUSH
8891: LD_INT 117
8893: PUSH
8894: LD_INT 118
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: ST_TO_ADDR
8920: GO 9319
8922: LD_INT 18
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 9078
8930: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8931: LD_ADDR_VAR 0 2
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: LD_INT 4
8941: PUSH
8942: LD_INT 5
8944: PUSH
8945: LD_INT 7
8947: PUSH
8948: LD_INT 11
8950: PUSH
8951: LD_INT 12
8953: PUSH
8954: LD_INT 15
8956: PUSH
8957: LD_INT 16
8959: PUSH
8960: LD_INT 20
8962: PUSH
8963: LD_INT 21
8965: PUSH
8966: LD_INT 22
8968: PUSH
8969: LD_INT 23
8971: PUSH
8972: LD_INT 25
8974: PUSH
8975: LD_INT 26
8977: PUSH
8978: LD_INT 30
8980: PUSH
8981: LD_INT 31
8983: PUSH
8984: LD_INT 32
8986: PUSH
8987: LD_INT 33
8989: PUSH
8990: LD_INT 34
8992: PUSH
8993: LD_INT 35
8995: PUSH
8996: LD_INT 36
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 101
9024: PUSH
9025: LD_INT 102
9027: PUSH
9028: LD_INT 103
9030: PUSH
9031: LD_INT 106
9033: PUSH
9034: LD_INT 108
9036: PUSH
9037: LD_INT 112
9039: PUSH
9040: LD_INT 113
9042: PUSH
9043: LD_INT 114
9045: PUSH
9046: LD_INT 115
9048: PUSH
9049: LD_INT 116
9051: PUSH
9052: LD_INT 117
9054: PUSH
9055: LD_INT 118
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: ST_TO_ADDR
9076: GO 9319
9078: LD_INT 19
9080: DOUBLE
9081: EQUAL
9082: IFTRUE 9086
9084: GO 9318
9086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9087: LD_ADDR_VAR 0 2
9091: PUSH
9092: LD_INT 1
9094: PUSH
9095: LD_INT 2
9097: PUSH
9098: LD_INT 3
9100: PUSH
9101: LD_INT 4
9103: PUSH
9104: LD_INT 5
9106: PUSH
9107: LD_INT 6
9109: PUSH
9110: LD_INT 7
9112: PUSH
9113: LD_INT 8
9115: PUSH
9116: LD_INT 9
9118: PUSH
9119: LD_INT 10
9121: PUSH
9122: LD_INT 11
9124: PUSH
9125: LD_INT 12
9127: PUSH
9128: LD_INT 13
9130: PUSH
9131: LD_INT 14
9133: PUSH
9134: LD_INT 15
9136: PUSH
9137: LD_INT 16
9139: PUSH
9140: LD_INT 17
9142: PUSH
9143: LD_INT 18
9145: PUSH
9146: LD_INT 19
9148: PUSH
9149: LD_INT 20
9151: PUSH
9152: LD_INT 21
9154: PUSH
9155: LD_INT 22
9157: PUSH
9158: LD_INT 23
9160: PUSH
9161: LD_INT 24
9163: PUSH
9164: LD_INT 25
9166: PUSH
9167: LD_INT 26
9169: PUSH
9170: LD_INT 27
9172: PUSH
9173: LD_INT 28
9175: PUSH
9176: LD_INT 29
9178: PUSH
9179: LD_INT 30
9181: PUSH
9182: LD_INT 31
9184: PUSH
9185: LD_INT 32
9187: PUSH
9188: LD_INT 33
9190: PUSH
9191: LD_INT 34
9193: PUSH
9194: LD_INT 35
9196: PUSH
9197: LD_INT 36
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 101
9240: PUSH
9241: LD_INT 102
9243: PUSH
9244: LD_INT 103
9246: PUSH
9247: LD_INT 104
9249: PUSH
9250: LD_INT 105
9252: PUSH
9253: LD_INT 106
9255: PUSH
9256: LD_INT 107
9258: PUSH
9259: LD_INT 108
9261: PUSH
9262: LD_INT 109
9264: PUSH
9265: LD_INT 110
9267: PUSH
9268: LD_INT 111
9270: PUSH
9271: LD_INT 112
9273: PUSH
9274: LD_INT 113
9276: PUSH
9277: LD_INT 114
9279: PUSH
9280: LD_INT 115
9282: PUSH
9283: LD_INT 116
9285: PUSH
9286: LD_INT 117
9288: PUSH
9289: LD_INT 118
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: ST_TO_ADDR
9316: GO 9319
9318: POP
// end else
9319: GO 9550
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_INT 1
9328: PUSH
9329: LD_INT 2
9331: PUSH
9332: LD_INT 3
9334: PUSH
9335: LD_INT 4
9337: PUSH
9338: LD_INT 5
9340: PUSH
9341: LD_INT 6
9343: PUSH
9344: LD_INT 7
9346: PUSH
9347: LD_INT 8
9349: PUSH
9350: LD_INT 9
9352: PUSH
9353: LD_INT 10
9355: PUSH
9356: LD_INT 11
9358: PUSH
9359: LD_INT 12
9361: PUSH
9362: LD_INT 13
9364: PUSH
9365: LD_INT 14
9367: PUSH
9368: LD_INT 15
9370: PUSH
9371: LD_INT 16
9373: PUSH
9374: LD_INT 17
9376: PUSH
9377: LD_INT 18
9379: PUSH
9380: LD_INT 19
9382: PUSH
9383: LD_INT 20
9385: PUSH
9386: LD_INT 21
9388: PUSH
9389: LD_INT 22
9391: PUSH
9392: LD_INT 23
9394: PUSH
9395: LD_INT 24
9397: PUSH
9398: LD_INT 25
9400: PUSH
9401: LD_INT 26
9403: PUSH
9404: LD_INT 27
9406: PUSH
9407: LD_INT 28
9409: PUSH
9410: LD_INT 29
9412: PUSH
9413: LD_INT 30
9415: PUSH
9416: LD_INT 31
9418: PUSH
9419: LD_INT 32
9421: PUSH
9422: LD_INT 33
9424: PUSH
9425: LD_INT 34
9427: PUSH
9428: LD_INT 35
9430: PUSH
9431: LD_INT 36
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 101
9474: PUSH
9475: LD_INT 102
9477: PUSH
9478: LD_INT 103
9480: PUSH
9481: LD_INT 104
9483: PUSH
9484: LD_INT 105
9486: PUSH
9487: LD_INT 106
9489: PUSH
9490: LD_INT 107
9492: PUSH
9493: LD_INT 108
9495: PUSH
9496: LD_INT 109
9498: PUSH
9499: LD_INT 110
9501: PUSH
9502: LD_INT 111
9504: PUSH
9505: LD_INT 112
9507: PUSH
9508: LD_INT 113
9510: PUSH
9511: LD_INT 114
9513: PUSH
9514: LD_INT 115
9516: PUSH
9517: LD_INT 116
9519: PUSH
9520: LD_INT 117
9522: PUSH
9523: LD_INT 118
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: ST_TO_ADDR
// if result then
9550: LD_VAR 0 2
9554: IFFALSE 10340
// begin normal :=  ;
9556: LD_ADDR_VAR 0 5
9560: PUSH
9561: LD_STRING 
9563: ST_TO_ADDR
// hardcore :=  ;
9564: LD_ADDR_VAR 0 6
9568: PUSH
9569: LD_STRING 
9571: ST_TO_ADDR
// active :=  ;
9572: LD_ADDR_VAR 0 7
9576: PUSH
9577: LD_STRING 
9579: ST_TO_ADDR
// for i = 1 to normalCounter do
9580: LD_ADDR_VAR 0 8
9584: PUSH
9585: DOUBLE
9586: LD_INT 1
9588: DEC
9589: ST_TO_ADDR
9590: LD_EXP 13
9594: PUSH
9595: FOR_TO
9596: IFFALSE 9697
// begin tmp := 0 ;
9598: LD_ADDR_VAR 0 3
9602: PUSH
9603: LD_STRING 0
9605: ST_TO_ADDR
// if result [ 1 ] then
9606: LD_VAR 0 2
9610: PUSH
9611: LD_INT 1
9613: ARRAY
9614: IFFALSE 9679
// if result [ 1 ] [ 1 ] = i then
9616: LD_VAR 0 2
9620: PUSH
9621: LD_INT 1
9623: ARRAY
9624: PUSH
9625: LD_INT 1
9627: ARRAY
9628: PUSH
9629: LD_VAR 0 8
9633: EQUAL
9634: IFFALSE 9679
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9636: LD_ADDR_VAR 0 2
9640: PUSH
9641: LD_VAR 0 2
9645: PPUSH
9646: LD_INT 1
9648: PPUSH
9649: LD_VAR 0 2
9653: PUSH
9654: LD_INT 1
9656: ARRAY
9657: PPUSH
9658: LD_INT 1
9660: PPUSH
9661: CALL_OW 3
9665: PPUSH
9666: CALL_OW 1
9670: ST_TO_ADDR
// tmp := 1 ;
9671: LD_ADDR_VAR 0 3
9675: PUSH
9676: LD_STRING 1
9678: ST_TO_ADDR
// end ; normal := normal & tmp ;
9679: LD_ADDR_VAR 0 5
9683: PUSH
9684: LD_VAR 0 5
9688: PUSH
9689: LD_VAR 0 3
9693: STR
9694: ST_TO_ADDR
// end ;
9695: GO 9595
9697: POP
9698: POP
// for i = 1 to hardcoreCounter do
9699: LD_ADDR_VAR 0 8
9703: PUSH
9704: DOUBLE
9705: LD_INT 1
9707: DEC
9708: ST_TO_ADDR
9709: LD_EXP 14
9713: PUSH
9714: FOR_TO
9715: IFFALSE 9820
// begin tmp := 0 ;
9717: LD_ADDR_VAR 0 3
9721: PUSH
9722: LD_STRING 0
9724: ST_TO_ADDR
// if result [ 2 ] then
9725: LD_VAR 0 2
9729: PUSH
9730: LD_INT 2
9732: ARRAY
9733: IFFALSE 9802
// if result [ 2 ] [ 1 ] = 100 + i then
9735: LD_VAR 0 2
9739: PUSH
9740: LD_INT 2
9742: ARRAY
9743: PUSH
9744: LD_INT 1
9746: ARRAY
9747: PUSH
9748: LD_INT 100
9750: PUSH
9751: LD_VAR 0 8
9755: PLUS
9756: EQUAL
9757: IFFALSE 9802
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9759: LD_ADDR_VAR 0 2
9763: PUSH
9764: LD_VAR 0 2
9768: PPUSH
9769: LD_INT 2
9771: PPUSH
9772: LD_VAR 0 2
9776: PUSH
9777: LD_INT 2
9779: ARRAY
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: CALL_OW 3
9788: PPUSH
9789: CALL_OW 1
9793: ST_TO_ADDR
// tmp := 1 ;
9794: LD_ADDR_VAR 0 3
9798: PUSH
9799: LD_STRING 1
9801: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9802: LD_ADDR_VAR 0 6
9806: PUSH
9807: LD_VAR 0 6
9811: PUSH
9812: LD_VAR 0 3
9816: STR
9817: ST_TO_ADDR
// end ;
9818: GO 9714
9820: POP
9821: POP
// if isGameLoad then
9822: LD_VAR 0 1
9826: IFFALSE 10301
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9828: LD_ADDR_VAR 0 4
9832: PUSH
9833: LD_EXP 17
9837: PUSH
9838: LD_EXP 16
9842: PUSH
9843: LD_EXP 18
9847: PUSH
9848: LD_EXP 15
9852: PUSH
9853: LD_EXP 19
9857: PUSH
9858: LD_EXP 20
9862: PUSH
9863: LD_EXP 21
9867: PUSH
9868: LD_EXP 22
9872: PUSH
9873: LD_EXP 23
9877: PUSH
9878: LD_EXP 24
9882: PUSH
9883: LD_EXP 25
9887: PUSH
9888: LD_EXP 26
9892: PUSH
9893: LD_EXP 27
9897: PUSH
9898: LD_EXP 28
9902: PUSH
9903: LD_EXP 36
9907: PUSH
9908: LD_EXP 37
9912: PUSH
9913: LD_EXP 38
9917: PUSH
9918: LD_EXP 39
9922: PUSH
9923: LD_EXP 41
9927: PUSH
9928: LD_EXP 42
9932: PUSH
9933: LD_EXP 43
9937: PUSH
9938: LD_EXP 46
9942: PUSH
9943: LD_EXP 48
9947: PUSH
9948: LD_EXP 49
9952: PUSH
9953: LD_EXP 50
9957: PUSH
9958: LD_EXP 52
9962: PUSH
9963: LD_EXP 53
9967: PUSH
9968: LD_EXP 56
9972: PUSH
9973: LD_EXP 57
9977: PUSH
9978: LD_EXP 58
9982: PUSH
9983: LD_EXP 59
9987: PUSH
9988: LD_EXP 60
9992: PUSH
9993: LD_EXP 61
9997: PUSH
9998: LD_EXP 62
10002: PUSH
10003: LD_EXP 63
10007: PUSH
10008: LD_EXP 64
10012: PUSH
10013: LD_EXP 29
10017: PUSH
10018: LD_EXP 30
10022: PUSH
10023: LD_EXP 33
10027: PUSH
10028: LD_EXP 34
10032: PUSH
10033: LD_EXP 35
10037: PUSH
10038: LD_EXP 31
10042: PUSH
10043: LD_EXP 32
10047: PUSH
10048: LD_EXP 40
10052: PUSH
10053: LD_EXP 44
10057: PUSH
10058: LD_EXP 45
10062: PUSH
10063: LD_EXP 47
10067: PUSH
10068: LD_EXP 51
10072: PUSH
10073: LD_EXP 54
10077: PUSH
10078: LD_EXP 55
10082: PUSH
10083: LD_EXP 65
10087: PUSH
10088: LD_EXP 66
10092: PUSH
10093: LD_EXP 67
10097: PUSH
10098: LD_EXP 68
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: ST_TO_ADDR
// tmp :=  ;
10159: LD_ADDR_VAR 0 3
10163: PUSH
10164: LD_STRING 
10166: ST_TO_ADDR
// for i = 1 to normalCounter do
10167: LD_ADDR_VAR 0 8
10171: PUSH
10172: DOUBLE
10173: LD_INT 1
10175: DEC
10176: ST_TO_ADDR
10177: LD_EXP 13
10181: PUSH
10182: FOR_TO
10183: IFFALSE 10219
// begin if flags [ i ] then
10185: LD_VAR 0 4
10189: PUSH
10190: LD_VAR 0 8
10194: ARRAY
10195: IFFALSE 10217
// tmp := tmp & i & ; ;
10197: LD_ADDR_VAR 0 3
10201: PUSH
10202: LD_VAR 0 3
10206: PUSH
10207: LD_VAR 0 8
10211: STR
10212: PUSH
10213: LD_STRING ;
10215: STR
10216: ST_TO_ADDR
// end ;
10217: GO 10182
10219: POP
10220: POP
// for i = 1 to hardcoreCounter do
10221: LD_ADDR_VAR 0 8
10225: PUSH
10226: DOUBLE
10227: LD_INT 1
10229: DEC
10230: ST_TO_ADDR
10231: LD_EXP 14
10235: PUSH
10236: FOR_TO
10237: IFFALSE 10283
// begin if flags [ normalCounter + i ] then
10239: LD_VAR 0 4
10243: PUSH
10244: LD_EXP 13
10248: PUSH
10249: LD_VAR 0 8
10253: PLUS
10254: ARRAY
10255: IFFALSE 10281
// tmp := tmp & ( 100 + i ) & ; ;
10257: LD_ADDR_VAR 0 3
10261: PUSH
10262: LD_VAR 0 3
10266: PUSH
10267: LD_INT 100
10269: PUSH
10270: LD_VAR 0 8
10274: PLUS
10275: STR
10276: PUSH
10277: LD_STRING ;
10279: STR
10280: ST_TO_ADDR
// end ;
10281: GO 10236
10283: POP
10284: POP
// if tmp then
10285: LD_VAR 0 3
10289: IFFALSE 10301
// active := tmp ;
10291: LD_ADDR_VAR 0 7
10295: PUSH
10296: LD_VAR 0 3
10300: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10301: LD_STRING getStreamItemsFromMission("
10303: PUSH
10304: LD_VAR 0 5
10308: STR
10309: PUSH
10310: LD_STRING ","
10312: STR
10313: PUSH
10314: LD_VAR 0 6
10318: STR
10319: PUSH
10320: LD_STRING ","
10322: STR
10323: PUSH
10324: LD_VAR 0 7
10328: STR
10329: PUSH
10330: LD_STRING ")
10332: STR
10333: PPUSH
10334: CALL_OW 559
// end else
10338: GO 10347
// ToLua ( getStreamItemsFromMission("","","") ) ;
10340: LD_STRING getStreamItemsFromMission("","","")
10342: PPUSH
10343: CALL_OW 559
// end ;
10347: LD_VAR 0 2
10351: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10352: LD_EXP 12
10356: PUSH
10357: LD_EXP 17
10361: AND
10362: IFFALSE 10486
10364: GO 10366
10366: DISABLE
10367: LD_INT 0
10369: PPUSH
10370: PPUSH
// begin enable ;
10371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10372: LD_ADDR_VAR 0 2
10376: PUSH
10377: LD_INT 22
10379: PUSH
10380: LD_OWVAR 2
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 2
10391: PUSH
10392: LD_INT 34
10394: PUSH
10395: LD_INT 7
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: LD_INT 34
10404: PUSH
10405: LD_INT 45
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 34
10414: PUSH
10415: LD_INT 28
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 34
10424: PUSH
10425: LD_INT 47
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PPUSH
10443: CALL_OW 69
10447: ST_TO_ADDR
// if not tmp then
10448: LD_VAR 0 2
10452: NOT
10453: IFFALSE 10457
// exit ;
10455: GO 10486
// for i in tmp do
10457: LD_ADDR_VAR 0 1
10461: PUSH
10462: LD_VAR 0 2
10466: PUSH
10467: FOR_IN
10468: IFFALSE 10484
// begin SetLives ( i , 0 ) ;
10470: LD_VAR 0 1
10474: PPUSH
10475: LD_INT 0
10477: PPUSH
10478: CALL_OW 234
// end ;
10482: GO 10467
10484: POP
10485: POP
// end ;
10486: PPOPN 2
10488: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10489: LD_EXP 12
10493: PUSH
10494: LD_EXP 18
10498: AND
10499: IFFALSE 10583
10501: GO 10503
10503: DISABLE
10504: LD_INT 0
10506: PPUSH
10507: PPUSH
// begin enable ;
10508: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10509: LD_ADDR_VAR 0 2
10513: PUSH
10514: LD_INT 22
10516: PUSH
10517: LD_OWVAR 2
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 32
10528: PUSH
10529: LD_INT 3
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: ST_TO_ADDR
// if not tmp then
10545: LD_VAR 0 2
10549: NOT
10550: IFFALSE 10554
// exit ;
10552: GO 10583
// for i in tmp do
10554: LD_ADDR_VAR 0 1
10558: PUSH
10559: LD_VAR 0 2
10563: PUSH
10564: FOR_IN
10565: IFFALSE 10581
// begin SetLives ( i , 0 ) ;
10567: LD_VAR 0 1
10571: PPUSH
10572: LD_INT 0
10574: PPUSH
10575: CALL_OW 234
// end ;
10579: GO 10564
10581: POP
10582: POP
// end ;
10583: PPOPN 2
10585: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10586: LD_EXP 12
10590: PUSH
10591: LD_EXP 15
10595: AND
10596: IFFALSE 10689
10598: GO 10600
10600: DISABLE
10601: LD_INT 0
10603: PPUSH
// begin enable ;
10604: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10605: LD_ADDR_VAR 0 1
10609: PUSH
10610: LD_INT 22
10612: PUSH
10613: LD_OWVAR 2
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 2
10624: PUSH
10625: LD_INT 25
10627: PUSH
10628: LD_INT 5
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 25
10637: PUSH
10638: LD_INT 9
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 25
10647: PUSH
10648: LD_INT 8
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PPUSH
10665: CALL_OW 69
10669: PUSH
10670: FOR_IN
10671: IFFALSE 10687
// begin SetClass ( i , 1 ) ;
10673: LD_VAR 0 1
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 336
// end ;
10685: GO 10670
10687: POP
10688: POP
// end ;
10689: PPOPN 1
10691: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10692: LD_EXP 12
10696: PUSH
10697: LD_EXP 16
10701: AND
10702: PUSH
10703: LD_OWVAR 65
10707: PUSH
10708: LD_INT 7
10710: LESS
10711: AND
10712: IFFALSE 10726
10714: GO 10716
10716: DISABLE
// begin enable ;
10717: ENABLE
// game_speed := 7 ;
10718: LD_ADDR_OWVAR 65
10722: PUSH
10723: LD_INT 7
10725: ST_TO_ADDR
// end ;
10726: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10727: LD_EXP 12
10731: PUSH
10732: LD_EXP 19
10736: AND
10737: IFFALSE 10939
10739: GO 10741
10741: DISABLE
10742: LD_INT 0
10744: PPUSH
10745: PPUSH
10746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10747: LD_ADDR_VAR 0 3
10751: PUSH
10752: LD_INT 81
10754: PUSH
10755: LD_OWVAR 2
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 21
10766: PUSH
10767: LD_INT 1
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 69
10782: ST_TO_ADDR
// if not tmp then
10783: LD_VAR 0 3
10787: NOT
10788: IFFALSE 10792
// exit ;
10790: GO 10939
// if tmp > 5 then
10792: LD_VAR 0 3
10796: PUSH
10797: LD_INT 5
10799: GREATER
10800: IFFALSE 10812
// k := 5 else
10802: LD_ADDR_VAR 0 2
10806: PUSH
10807: LD_INT 5
10809: ST_TO_ADDR
10810: GO 10822
// k := tmp ;
10812: LD_ADDR_VAR 0 2
10816: PUSH
10817: LD_VAR 0 3
10821: ST_TO_ADDR
// for i := 1 to k do
10822: LD_ADDR_VAR 0 1
10826: PUSH
10827: DOUBLE
10828: LD_INT 1
10830: DEC
10831: ST_TO_ADDR
10832: LD_VAR 0 2
10836: PUSH
10837: FOR_TO
10838: IFFALSE 10937
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10840: LD_VAR 0 3
10844: PUSH
10845: LD_VAR 0 1
10849: ARRAY
10850: PPUSH
10851: LD_VAR 0 1
10855: PUSH
10856: LD_INT 4
10858: MOD
10859: PUSH
10860: LD_INT 1
10862: PLUS
10863: PPUSH
10864: CALL_OW 259
10868: PUSH
10869: LD_INT 10
10871: LESS
10872: IFFALSE 10935
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10874: LD_VAR 0 3
10878: PUSH
10879: LD_VAR 0 1
10883: ARRAY
10884: PPUSH
10885: LD_VAR 0 1
10889: PUSH
10890: LD_INT 4
10892: MOD
10893: PUSH
10894: LD_INT 1
10896: PLUS
10897: PPUSH
10898: LD_VAR 0 3
10902: PUSH
10903: LD_VAR 0 1
10907: ARRAY
10908: PPUSH
10909: LD_VAR 0 1
10913: PUSH
10914: LD_INT 4
10916: MOD
10917: PUSH
10918: LD_INT 1
10920: PLUS
10921: PPUSH
10922: CALL_OW 259
10926: PUSH
10927: LD_INT 1
10929: PLUS
10930: PPUSH
10931: CALL_OW 237
10935: GO 10837
10937: POP
10938: POP
// end ;
10939: PPOPN 3
10941: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10942: LD_EXP 12
10946: PUSH
10947: LD_EXP 20
10951: AND
10952: IFFALSE 10972
10954: GO 10956
10956: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10957: LD_INT 4
10959: PPUSH
10960: LD_OWVAR 2
10964: PPUSH
10965: LD_INT 0
10967: PPUSH
10968: CALL_OW 324
10972: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10973: LD_EXP 12
10977: PUSH
10978: LD_EXP 49
10982: AND
10983: IFFALSE 11003
10985: GO 10987
10987: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10988: LD_INT 19
10990: PPUSH
10991: LD_OWVAR 2
10995: PPUSH
10996: LD_INT 0
10998: PPUSH
10999: CALL_OW 324
11003: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11004: LD_EXP 12
11008: PUSH
11009: LD_EXP 21
11013: AND
11014: IFFALSE 11116
11016: GO 11018
11018: DISABLE
11019: LD_INT 0
11021: PPUSH
11022: PPUSH
// begin enable ;
11023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11024: LD_ADDR_VAR 0 2
11028: PUSH
11029: LD_INT 22
11031: PUSH
11032: LD_OWVAR 2
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: LD_INT 34
11046: PUSH
11047: LD_INT 11
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 34
11056: PUSH
11057: LD_INT 30
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PPUSH
11073: CALL_OW 69
11077: ST_TO_ADDR
// if not tmp then
11078: LD_VAR 0 2
11082: NOT
11083: IFFALSE 11087
// exit ;
11085: GO 11116
// for i in tmp do
11087: LD_ADDR_VAR 0 1
11091: PUSH
11092: LD_VAR 0 2
11096: PUSH
11097: FOR_IN
11098: IFFALSE 11114
// begin SetLives ( i , 0 ) ;
11100: LD_VAR 0 1
11104: PPUSH
11105: LD_INT 0
11107: PPUSH
11108: CALL_OW 234
// end ;
11112: GO 11097
11114: POP
11115: POP
// end ;
11116: PPOPN 2
11118: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11119: LD_EXP 12
11123: PUSH
11124: LD_EXP 22
11128: AND
11129: IFFALSE 11149
11131: GO 11133
11133: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11134: LD_INT 32
11136: PPUSH
11137: LD_OWVAR 2
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 324
11149: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11150: LD_EXP 12
11154: PUSH
11155: LD_EXP 23
11159: AND
11160: IFFALSE 11341
11162: GO 11164
11164: DISABLE
11165: LD_INT 0
11167: PPUSH
11168: PPUSH
11169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11170: LD_ADDR_VAR 0 2
11174: PUSH
11175: LD_INT 22
11177: PUSH
11178: LD_OWVAR 2
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 33
11189: PUSH
11190: LD_INT 3
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PPUSH
11201: CALL_OW 69
11205: ST_TO_ADDR
// if not tmp then
11206: LD_VAR 0 2
11210: NOT
11211: IFFALSE 11215
// exit ;
11213: GO 11341
// side := 0 ;
11215: LD_ADDR_VAR 0 3
11219: PUSH
11220: LD_INT 0
11222: ST_TO_ADDR
// for i := 1 to 8 do
11223: LD_ADDR_VAR 0 1
11227: PUSH
11228: DOUBLE
11229: LD_INT 1
11231: DEC
11232: ST_TO_ADDR
11233: LD_INT 8
11235: PUSH
11236: FOR_TO
11237: IFFALSE 11285
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11239: LD_OWVAR 2
11243: PUSH
11244: LD_VAR 0 1
11248: NONEQUAL
11249: PUSH
11250: LD_OWVAR 2
11254: PPUSH
11255: LD_VAR 0 1
11259: PPUSH
11260: CALL_OW 81
11264: PUSH
11265: LD_INT 2
11267: EQUAL
11268: AND
11269: IFFALSE 11283
// begin side := i ;
11271: LD_ADDR_VAR 0 3
11275: PUSH
11276: LD_VAR 0 1
11280: ST_TO_ADDR
// break ;
11281: GO 11285
// end ;
11283: GO 11236
11285: POP
11286: POP
// if not side then
11287: LD_VAR 0 3
11291: NOT
11292: IFFALSE 11296
// exit ;
11294: GO 11341
// for i := 1 to tmp do
11296: LD_ADDR_VAR 0 1
11300: PUSH
11301: DOUBLE
11302: LD_INT 1
11304: DEC
11305: ST_TO_ADDR
11306: LD_VAR 0 2
11310: PUSH
11311: FOR_TO
11312: IFFALSE 11339
// if Prob ( 60 ) then
11314: LD_INT 60
11316: PPUSH
11317: CALL_OW 13
11321: IFFALSE 11337
// SetSide ( i , side ) ;
11323: LD_VAR 0 1
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: CALL_OW 235
11337: GO 11311
11339: POP
11340: POP
// end ;
11341: PPOPN 3
11343: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11344: LD_EXP 12
11348: PUSH
11349: LD_EXP 25
11353: AND
11354: IFFALSE 11473
11356: GO 11358
11358: DISABLE
11359: LD_INT 0
11361: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11362: LD_ADDR_VAR 0 1
11366: PUSH
11367: LD_INT 22
11369: PUSH
11370: LD_OWVAR 2
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 21
11381: PUSH
11382: LD_INT 1
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 3
11391: PUSH
11392: LD_INT 23
11394: PUSH
11395: LD_INT 0
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 69
11415: PUSH
11416: FOR_IN
11417: IFFALSE 11471
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11419: LD_VAR 0 1
11423: PPUSH
11424: CALL_OW 257
11428: PUSH
11429: LD_INT 1
11431: PUSH
11432: LD_INT 2
11434: PUSH
11435: LD_INT 3
11437: PUSH
11438: LD_INT 4
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: IN
11447: IFFALSE 11469
// SetClass ( un , rand ( 1 , 4 ) ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: LD_INT 1
11456: PPUSH
11457: LD_INT 4
11459: PPUSH
11460: CALL_OW 12
11464: PPUSH
11465: CALL_OW 336
11469: GO 11416
11471: POP
11472: POP
// end ;
11473: PPOPN 1
11475: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11476: LD_EXP 12
11480: PUSH
11481: LD_EXP 24
11485: AND
11486: IFFALSE 11565
11488: GO 11490
11490: DISABLE
11491: LD_INT 0
11493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11494: LD_ADDR_VAR 0 1
11498: PUSH
11499: LD_INT 22
11501: PUSH
11502: LD_OWVAR 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 21
11513: PUSH
11514: LD_INT 3
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 69
11529: ST_TO_ADDR
// if not tmp then
11530: LD_VAR 0 1
11534: NOT
11535: IFFALSE 11539
// exit ;
11537: GO 11565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11539: LD_VAR 0 1
11543: PUSH
11544: LD_INT 1
11546: PPUSH
11547: LD_VAR 0 1
11551: PPUSH
11552: CALL_OW 12
11556: ARRAY
11557: PPUSH
11558: LD_INT 100
11560: PPUSH
11561: CALL_OW 234
// end ;
11565: PPOPN 1
11567: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11568: LD_EXP 12
11572: PUSH
11573: LD_EXP 26
11577: AND
11578: IFFALSE 11676
11580: GO 11582
11582: DISABLE
11583: LD_INT 0
11585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11586: LD_ADDR_VAR 0 1
11590: PUSH
11591: LD_INT 22
11593: PUSH
11594: LD_OWVAR 2
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 69
11621: ST_TO_ADDR
// if not tmp then
11622: LD_VAR 0 1
11626: NOT
11627: IFFALSE 11631
// exit ;
11629: GO 11676
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11631: LD_VAR 0 1
11635: PUSH
11636: LD_INT 1
11638: PPUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 12
11648: ARRAY
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: LD_INT 4
11655: PPUSH
11656: CALL_OW 12
11660: PPUSH
11661: LD_INT 3000
11663: PPUSH
11664: LD_INT 9000
11666: PPUSH
11667: CALL_OW 12
11671: PPUSH
11672: CALL_OW 492
// end ;
11676: PPOPN 1
11678: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11679: LD_EXP 12
11683: PUSH
11684: LD_EXP 27
11688: AND
11689: IFFALSE 11709
11691: GO 11693
11693: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11694: LD_INT 1
11696: PPUSH
11697: LD_OWVAR 2
11701: PPUSH
11702: LD_INT 0
11704: PPUSH
11705: CALL_OW 324
11709: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11710: LD_EXP 12
11714: PUSH
11715: LD_EXP 28
11719: AND
11720: IFFALSE 11803
11722: GO 11724
11724: DISABLE
11725: LD_INT 0
11727: PPUSH
11728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11729: LD_ADDR_VAR 0 2
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_OWVAR 2
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 21
11748: PUSH
11749: LD_INT 3
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PPUSH
11760: CALL_OW 69
11764: ST_TO_ADDR
// if not tmp then
11765: LD_VAR 0 2
11769: NOT
11770: IFFALSE 11774
// exit ;
11772: GO 11803
// for i in tmp do
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: FOR_IN
11785: IFFALSE 11801
// SetBLevel ( i , 10 ) ;
11787: LD_VAR 0 1
11791: PPUSH
11792: LD_INT 10
11794: PPUSH
11795: CALL_OW 241
11799: GO 11784
11801: POP
11802: POP
// end ;
11803: PPOPN 2
11805: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11806: LD_EXP 12
11810: PUSH
11811: LD_EXP 29
11815: AND
11816: IFFALSE 11927
11818: GO 11820
11820: DISABLE
11821: LD_INT 0
11823: PPUSH
11824: PPUSH
11825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11826: LD_ADDR_VAR 0 3
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_OWVAR 2
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 25
11845: PUSH
11846: LD_INT 1
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PPUSH
11857: CALL_OW 69
11861: ST_TO_ADDR
// if not tmp then
11862: LD_VAR 0 3
11866: NOT
11867: IFFALSE 11871
// exit ;
11869: GO 11927
// un := tmp [ rand ( 1 , tmp ) ] ;
11871: LD_ADDR_VAR 0 2
11875: PUSH
11876: LD_VAR 0 3
11880: PUSH
11881: LD_INT 1
11883: PPUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: CALL_OW 12
11893: ARRAY
11894: ST_TO_ADDR
// if Crawls ( un ) then
11895: LD_VAR 0 2
11899: PPUSH
11900: CALL_OW 318
11904: IFFALSE 11915
// ComWalk ( un ) ;
11906: LD_VAR 0 2
11910: PPUSH
11911: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11915: LD_VAR 0 2
11919: PPUSH
11920: LD_INT 5
11922: PPUSH
11923: CALL_OW 336
// end ;
11927: PPOPN 3
11929: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11930: LD_EXP 12
11934: PUSH
11935: LD_EXP 30
11939: AND
11940: PUSH
11941: LD_OWVAR 67
11945: PUSH
11946: LD_INT 4
11948: LESS
11949: AND
11950: IFFALSE 11969
11952: GO 11954
11954: DISABLE
// begin Difficulty := Difficulty + 1 ;
11955: LD_ADDR_OWVAR 67
11959: PUSH
11960: LD_OWVAR 67
11964: PUSH
11965: LD_INT 1
11967: PLUS
11968: ST_TO_ADDR
// end ;
11969: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11970: LD_EXP 12
11974: PUSH
11975: LD_EXP 31
11979: AND
11980: IFFALSE 12083
11982: GO 11984
11984: DISABLE
11985: LD_INT 0
11987: PPUSH
// begin for i := 1 to 5 do
11988: LD_ADDR_VAR 0 1
11992: PUSH
11993: DOUBLE
11994: LD_INT 1
11996: DEC
11997: ST_TO_ADDR
11998: LD_INT 5
12000: PUSH
12001: FOR_TO
12002: IFFALSE 12081
// begin uc_nation := nation_nature ;
12004: LD_ADDR_OWVAR 21
12008: PUSH
12009: LD_INT 0
12011: ST_TO_ADDR
// uc_side := 0 ;
12012: LD_ADDR_OWVAR 20
12016: PUSH
12017: LD_INT 0
12019: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12020: LD_ADDR_OWVAR 29
12024: PUSH
12025: LD_INT 12
12027: PUSH
12028: LD_INT 12
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: ST_TO_ADDR
// hc_agressivity := 20 ;
12035: LD_ADDR_OWVAR 35
12039: PUSH
12040: LD_INT 20
12042: ST_TO_ADDR
// hc_class := class_tiger ;
12043: LD_ADDR_OWVAR 28
12047: PUSH
12048: LD_INT 14
12050: ST_TO_ADDR
// hc_gallery :=  ;
12051: LD_ADDR_OWVAR 33
12055: PUSH
12056: LD_STRING 
12058: ST_TO_ADDR
// hc_name :=  ;
12059: LD_ADDR_OWVAR 26
12063: PUSH
12064: LD_STRING 
12066: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12067: CALL_OW 44
12071: PPUSH
12072: LD_INT 0
12074: PPUSH
12075: CALL_OW 51
// end ;
12079: GO 12001
12081: POP
12082: POP
// end ;
12083: PPOPN 1
12085: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12086: LD_EXP 12
12090: PUSH
12091: LD_EXP 32
12095: AND
12096: IFFALSE 12105
12098: GO 12100
12100: DISABLE
// StreamSibBomb ;
12101: CALL 12106 0 0
12105: END
// export function StreamSibBomb ; var i , x , y ; begin
12106: LD_INT 0
12108: PPUSH
12109: PPUSH
12110: PPUSH
12111: PPUSH
// result := false ;
12112: LD_ADDR_VAR 0 1
12116: PUSH
12117: LD_INT 0
12119: ST_TO_ADDR
// for i := 1 to 16 do
12120: LD_ADDR_VAR 0 2
12124: PUSH
12125: DOUBLE
12126: LD_INT 1
12128: DEC
12129: ST_TO_ADDR
12130: LD_INT 16
12132: PUSH
12133: FOR_TO
12134: IFFALSE 12333
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12136: LD_ADDR_VAR 0 3
12140: PUSH
12141: LD_INT 10
12143: PUSH
12144: LD_INT 20
12146: PUSH
12147: LD_INT 30
12149: PUSH
12150: LD_INT 40
12152: PUSH
12153: LD_INT 50
12155: PUSH
12156: LD_INT 60
12158: PUSH
12159: LD_INT 70
12161: PUSH
12162: LD_INT 80
12164: PUSH
12165: LD_INT 90
12167: PUSH
12168: LD_INT 100
12170: PUSH
12171: LD_INT 110
12173: PUSH
12174: LD_INT 120
12176: PUSH
12177: LD_INT 130
12179: PUSH
12180: LD_INT 140
12182: PUSH
12183: LD_INT 150
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 1
12205: PPUSH
12206: LD_INT 15
12208: PPUSH
12209: CALL_OW 12
12213: ARRAY
12214: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12215: LD_ADDR_VAR 0 4
12219: PUSH
12220: LD_INT 10
12222: PUSH
12223: LD_INT 20
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 40
12231: PUSH
12232: LD_INT 50
12234: PUSH
12235: LD_INT 60
12237: PUSH
12238: LD_INT 70
12240: PUSH
12241: LD_INT 80
12243: PUSH
12244: LD_INT 90
12246: PUSH
12247: LD_INT 100
12249: PUSH
12250: LD_INT 110
12252: PUSH
12253: LD_INT 120
12255: PUSH
12256: LD_INT 130
12258: PUSH
12259: LD_INT 140
12261: PUSH
12262: LD_INT 150
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 1
12284: PPUSH
12285: LD_INT 15
12287: PPUSH
12288: CALL_OW 12
12292: ARRAY
12293: ST_TO_ADDR
// if ValidHex ( x , y ) then
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_VAR 0 4
12303: PPUSH
12304: CALL_OW 488
12308: IFFALSE 12331
// begin result := [ x , y ] ;
12310: LD_ADDR_VAR 0 1
12314: PUSH
12315: LD_VAR 0 3
12319: PUSH
12320: LD_VAR 0 4
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: ST_TO_ADDR
// break ;
12329: GO 12333
// end ; end ;
12331: GO 12133
12333: POP
12334: POP
// if result then
12335: LD_VAR 0 1
12339: IFFALSE 12399
// begin ToLua ( playSibBomb() ) ;
12341: LD_STRING playSibBomb()
12343: PPUSH
12344: CALL_OW 559
// wait ( 0 0$14 ) ;
12348: LD_INT 490
12350: PPUSH
12351: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12355: LD_VAR 0 1
12359: PUSH
12360: LD_INT 1
12362: ARRAY
12363: PPUSH
12364: LD_VAR 0 1
12368: PUSH
12369: LD_INT 2
12371: ARRAY
12372: PPUSH
12373: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12377: LD_VAR 0 1
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PPUSH
12386: LD_VAR 0 1
12390: PUSH
12391: LD_INT 2
12393: ARRAY
12394: PPUSH
12395: CALL_OW 429
// end ; end ;
12399: LD_VAR 0 1
12403: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12404: LD_EXP 12
12408: PUSH
12409: LD_EXP 34
12413: AND
12414: IFFALSE 12426
12416: GO 12418
12418: DISABLE
// YouLost (  ) ;
12419: LD_STRING 
12421: PPUSH
12422: CALL_OW 104
12426: END
// every 0 0$1 trigger StreamModeActive and sFog do
12427: LD_EXP 12
12431: PUSH
12432: LD_EXP 33
12436: AND
12437: IFFALSE 12451
12439: GO 12441
12441: DISABLE
// FogOff ( your_side ) ;
12442: LD_OWVAR 2
12446: PPUSH
12447: CALL_OW 344
12451: END
// every 0 0$1 trigger StreamModeActive and sSun do
12452: LD_EXP 12
12456: PUSH
12457: LD_EXP 35
12461: AND
12462: IFFALSE 12490
12464: GO 12466
12466: DISABLE
// begin solar_recharge_percent := 0 ;
12467: LD_ADDR_OWVAR 79
12471: PUSH
12472: LD_INT 0
12474: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12475: LD_INT 10500
12477: PPUSH
12478: CALL_OW 67
// solar_recharge_percent := 100 ;
12482: LD_ADDR_OWVAR 79
12486: PUSH
12487: LD_INT 100
12489: ST_TO_ADDR
// end ;
12490: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12491: LD_EXP 12
12495: PUSH
12496: LD_EXP 36
12500: AND
12501: IFFALSE 12740
12503: GO 12505
12505: DISABLE
12506: LD_INT 0
12508: PPUSH
12509: PPUSH
12510: PPUSH
// begin tmp := [ ] ;
12511: LD_ADDR_VAR 0 3
12515: PUSH
12516: EMPTY
12517: ST_TO_ADDR
// for i := 1 to 6 do
12518: LD_ADDR_VAR 0 1
12522: PUSH
12523: DOUBLE
12524: LD_INT 1
12526: DEC
12527: ST_TO_ADDR
12528: LD_INT 6
12530: PUSH
12531: FOR_TO
12532: IFFALSE 12637
// begin uc_nation := nation_nature ;
12534: LD_ADDR_OWVAR 21
12538: PUSH
12539: LD_INT 0
12541: ST_TO_ADDR
// uc_side := 0 ;
12542: LD_ADDR_OWVAR 20
12546: PUSH
12547: LD_INT 0
12549: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12550: LD_ADDR_OWVAR 29
12554: PUSH
12555: LD_INT 12
12557: PUSH
12558: LD_INT 12
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: ST_TO_ADDR
// hc_agressivity := 20 ;
12565: LD_ADDR_OWVAR 35
12569: PUSH
12570: LD_INT 20
12572: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12573: LD_ADDR_OWVAR 28
12577: PUSH
12578: LD_INT 17
12580: ST_TO_ADDR
// hc_gallery :=  ;
12581: LD_ADDR_OWVAR 33
12585: PUSH
12586: LD_STRING 
12588: ST_TO_ADDR
// hc_name :=  ;
12589: LD_ADDR_OWVAR 26
12593: PUSH
12594: LD_STRING 
12596: ST_TO_ADDR
// un := CreateHuman ;
12597: LD_ADDR_VAR 0 2
12601: PUSH
12602: CALL_OW 44
12606: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12607: LD_VAR 0 2
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 51
// tmp := tmp ^ un ;
12619: LD_ADDR_VAR 0 3
12623: PUSH
12624: LD_VAR 0 3
12628: PUSH
12629: LD_VAR 0 2
12633: ADD
12634: ST_TO_ADDR
// end ;
12635: GO 12531
12637: POP
12638: POP
// repeat wait ( 0 0$1 ) ;
12639: LD_INT 35
12641: PPUSH
12642: CALL_OW 67
// for un in tmp do
12646: LD_ADDR_VAR 0 2
12650: PUSH
12651: LD_VAR 0 3
12655: PUSH
12656: FOR_IN
12657: IFFALSE 12731
// begin if IsDead ( un ) then
12659: LD_VAR 0 2
12663: PPUSH
12664: CALL_OW 301
12668: IFFALSE 12688
// begin tmp := tmp diff un ;
12670: LD_ADDR_VAR 0 3
12674: PUSH
12675: LD_VAR 0 3
12679: PUSH
12680: LD_VAR 0 2
12684: DIFF
12685: ST_TO_ADDR
// continue ;
12686: GO 12656
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12688: LD_VAR 0 2
12692: PPUSH
12693: LD_INT 3
12695: PUSH
12696: LD_INT 22
12698: PUSH
12699: LD_INT 0
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PPUSH
12710: CALL_OW 69
12714: PPUSH
12715: LD_VAR 0 2
12719: PPUSH
12720: CALL_OW 74
12724: PPUSH
12725: CALL_OW 115
// end ;
12729: GO 12656
12731: POP
12732: POP
// until not tmp ;
12733: LD_VAR 0 3
12737: NOT
12738: IFFALSE 12639
// end ;
12740: PPOPN 3
12742: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12743: LD_EXP 12
12747: PUSH
12748: LD_EXP 37
12752: AND
12753: IFFALSE 12807
12755: GO 12757
12757: DISABLE
// begin ToLua ( displayTroll(); ) ;
12758: LD_STRING displayTroll();
12760: PPUSH
12761: CALL_OW 559
// wait ( 3 3$00 ) ;
12765: LD_INT 6300
12767: PPUSH
12768: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12772: LD_STRING hideTroll();
12774: PPUSH
12775: CALL_OW 559
// wait ( 1 1$00 ) ;
12779: LD_INT 2100
12781: PPUSH
12782: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12786: LD_STRING displayTroll();
12788: PPUSH
12789: CALL_OW 559
// wait ( 1 1$00 ) ;
12793: LD_INT 2100
12795: PPUSH
12796: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12800: LD_STRING hideTroll();
12802: PPUSH
12803: CALL_OW 559
// end ;
12807: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12808: LD_EXP 12
12812: PUSH
12813: LD_EXP 38
12817: AND
12818: IFFALSE 12881
12820: GO 12822
12822: DISABLE
12823: LD_INT 0
12825: PPUSH
// begin p := 0 ;
12826: LD_ADDR_VAR 0 1
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// repeat game_speed := 1 ;
12834: LD_ADDR_OWVAR 65
12838: PUSH
12839: LD_INT 1
12841: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12842: LD_INT 35
12844: PPUSH
12845: CALL_OW 67
// p := p + 1 ;
12849: LD_ADDR_VAR 0 1
12853: PUSH
12854: LD_VAR 0 1
12858: PUSH
12859: LD_INT 1
12861: PLUS
12862: ST_TO_ADDR
// until p >= 60 ;
12863: LD_VAR 0 1
12867: PUSH
12868: LD_INT 60
12870: GREATEREQUAL
12871: IFFALSE 12834
// game_speed := 4 ;
12873: LD_ADDR_OWVAR 65
12877: PUSH
12878: LD_INT 4
12880: ST_TO_ADDR
// end ;
12881: PPOPN 1
12883: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12884: LD_EXP 12
12888: PUSH
12889: LD_EXP 39
12893: AND
12894: IFFALSE 13040
12896: GO 12898
12898: DISABLE
12899: LD_INT 0
12901: PPUSH
12902: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12903: LD_ADDR_VAR 0 1
12907: PUSH
12908: LD_INT 22
12910: PUSH
12911: LD_OWVAR 2
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 30
12925: PUSH
12926: LD_INT 0
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 1
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PPUSH
12952: CALL_OW 69
12956: ST_TO_ADDR
// if not depot then
12957: LD_VAR 0 1
12961: NOT
12962: IFFALSE 12966
// exit ;
12964: GO 13040
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12966: LD_ADDR_VAR 0 2
12970: PUSH
12971: LD_VAR 0 1
12975: PUSH
12976: LD_INT 1
12978: PPUSH
12979: LD_VAR 0 1
12983: PPUSH
12984: CALL_OW 12
12988: ARRAY
12989: PPUSH
12990: CALL_OW 274
12994: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12995: LD_VAR 0 2
12999: PPUSH
13000: LD_INT 1
13002: PPUSH
13003: LD_INT 0
13005: PPUSH
13006: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13010: LD_VAR 0 2
13014: PPUSH
13015: LD_INT 2
13017: PPUSH
13018: LD_INT 0
13020: PPUSH
13021: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13025: LD_VAR 0 2
13029: PPUSH
13030: LD_INT 3
13032: PPUSH
13033: LD_INT 0
13035: PPUSH
13036: CALL_OW 277
// end ;
13040: PPOPN 2
13042: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13043: LD_EXP 12
13047: PUSH
13048: LD_EXP 40
13052: AND
13053: IFFALSE 13150
13055: GO 13057
13057: DISABLE
13058: LD_INT 0
13060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13061: LD_ADDR_VAR 0 1
13065: PUSH
13066: LD_INT 22
13068: PUSH
13069: LD_OWVAR 2
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 1
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 3
13090: PUSH
13091: LD_INT 23
13093: PUSH
13094: LD_INT 0
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: PPUSH
13110: CALL_OW 69
13114: ST_TO_ADDR
// if not tmp then
13115: LD_VAR 0 1
13119: NOT
13120: IFFALSE 13124
// exit ;
13122: GO 13150
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 1
13131: PPUSH
13132: LD_VAR 0 1
13136: PPUSH
13137: CALL_OW 12
13141: ARRAY
13142: PPUSH
13143: LD_INT 200
13145: PPUSH
13146: CALL_OW 234
// end ;
13150: PPOPN 1
13152: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13153: LD_EXP 12
13157: PUSH
13158: LD_EXP 41
13162: AND
13163: IFFALSE 13242
13165: GO 13167
13167: DISABLE
13168: LD_INT 0
13170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13171: LD_ADDR_VAR 0 1
13175: PUSH
13176: LD_INT 22
13178: PUSH
13179: LD_OWVAR 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 2
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: ST_TO_ADDR
// if not tmp then
13207: LD_VAR 0 1
13211: NOT
13212: IFFALSE 13216
// exit ;
13214: GO 13242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13216: LD_VAR 0 1
13220: PUSH
13221: LD_INT 1
13223: PPUSH
13224: LD_VAR 0 1
13228: PPUSH
13229: CALL_OW 12
13233: ARRAY
13234: PPUSH
13235: LD_INT 60
13237: PPUSH
13238: CALL_OW 234
// end ;
13242: PPOPN 1
13244: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13245: LD_EXP 12
13249: PUSH
13250: LD_EXP 42
13254: AND
13255: IFFALSE 13354
13257: GO 13259
13259: DISABLE
13260: LD_INT 0
13262: PPUSH
13263: PPUSH
// begin enable ;
13264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13265: LD_ADDR_VAR 0 1
13269: PUSH
13270: LD_INT 22
13272: PUSH
13273: LD_OWVAR 2
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 61
13284: PUSH
13285: EMPTY
13286: LIST
13287: PUSH
13288: LD_INT 33
13290: PUSH
13291: LD_INT 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 69
13307: ST_TO_ADDR
// if not tmp then
13308: LD_VAR 0 1
13312: NOT
13313: IFFALSE 13317
// exit ;
13315: GO 13354
// for i in tmp do
13317: LD_ADDR_VAR 0 2
13321: PUSH
13322: LD_VAR 0 1
13326: PUSH
13327: FOR_IN
13328: IFFALSE 13352
// if IsControledBy ( i ) then
13330: LD_VAR 0 2
13334: PPUSH
13335: CALL_OW 312
13339: IFFALSE 13350
// ComUnlink ( i ) ;
13341: LD_VAR 0 2
13345: PPUSH
13346: CALL_OW 136
13350: GO 13327
13352: POP
13353: POP
// end ;
13354: PPOPN 2
13356: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13357: LD_EXP 12
13361: PUSH
13362: LD_EXP 43
13366: AND
13367: IFFALSE 13507
13369: GO 13371
13371: DISABLE
13372: LD_INT 0
13374: PPUSH
13375: PPUSH
// begin ToLua ( displayPowell(); ) ;
13376: LD_STRING displayPowell();
13378: PPUSH
13379: CALL_OW 559
// uc_side := 0 ;
13383: LD_ADDR_OWVAR 20
13387: PUSH
13388: LD_INT 0
13390: ST_TO_ADDR
// uc_nation := 2 ;
13391: LD_ADDR_OWVAR 21
13395: PUSH
13396: LD_INT 2
13398: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13399: LD_ADDR_OWVAR 37
13403: PUSH
13404: LD_INT 14
13406: ST_TO_ADDR
// vc_engine := engine_siberite ;
13407: LD_ADDR_OWVAR 39
13411: PUSH
13412: LD_INT 3
13414: ST_TO_ADDR
// vc_control := control_apeman ;
13415: LD_ADDR_OWVAR 38
13419: PUSH
13420: LD_INT 5
13422: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13423: LD_ADDR_OWVAR 40
13427: PUSH
13428: LD_INT 29
13430: ST_TO_ADDR
// un := CreateVehicle ;
13431: LD_ADDR_VAR 0 2
13435: PUSH
13436: CALL_OW 45
13440: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13441: LD_VAR 0 2
13445: PPUSH
13446: LD_INT 1
13448: PPUSH
13449: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13453: LD_INT 35
13455: PPUSH
13456: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13460: LD_VAR 0 2
13464: PPUSH
13465: LD_INT 22
13467: PUSH
13468: LD_OWVAR 2
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: PPUSH
13482: LD_VAR 0 2
13486: PPUSH
13487: CALL_OW 74
13491: PPUSH
13492: CALL_OW 115
// until IsDead ( un ) ;
13496: LD_VAR 0 2
13500: PPUSH
13501: CALL_OW 301
13505: IFFALSE 13453
// end ;
13507: PPOPN 2
13509: END
// every 0 0$1 trigger StreamModeActive and sStu do
13510: LD_EXP 12
13514: PUSH
13515: LD_EXP 51
13519: AND
13520: IFFALSE 13536
13522: GO 13524
13524: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13525: LD_STRING displayStucuk();
13527: PPUSH
13528: CALL_OW 559
// ResetFog ;
13532: CALL_OW 335
// end ;
13536: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13537: LD_EXP 12
13541: PUSH
13542: LD_EXP 44
13546: AND
13547: IFFALSE 13688
13549: GO 13551
13551: DISABLE
13552: LD_INT 0
13554: PPUSH
13555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: LD_OWVAR 2
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 21
13575: PUSH
13576: LD_INT 1
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PPUSH
13587: CALL_OW 69
13591: ST_TO_ADDR
// if not tmp then
13592: LD_VAR 0 2
13596: NOT
13597: IFFALSE 13601
// exit ;
13599: GO 13688
// un := tmp [ rand ( 1 , tmp ) ] ;
13601: LD_ADDR_VAR 0 1
13605: PUSH
13606: LD_VAR 0 2
13610: PUSH
13611: LD_INT 1
13613: PPUSH
13614: LD_VAR 0 2
13618: PPUSH
13619: CALL_OW 12
13623: ARRAY
13624: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13625: LD_VAR 0 1
13629: PPUSH
13630: LD_INT 0
13632: PPUSH
13633: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13637: LD_VAR 0 1
13641: PPUSH
13642: LD_OWVAR 3
13646: PUSH
13647: LD_VAR 0 1
13651: DIFF
13652: PPUSH
13653: LD_VAR 0 1
13657: PPUSH
13658: CALL_OW 74
13662: PPUSH
13663: CALL_OW 115
// wait ( 0 0$20 ) ;
13667: LD_INT 700
13669: PPUSH
13670: CALL_OW 67
// SetSide ( un , your_side ) ;
13674: LD_VAR 0 1
13678: PPUSH
13679: LD_OWVAR 2
13683: PPUSH
13684: CALL_OW 235
// end ;
13688: PPOPN 2
13690: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13691: LD_EXP 12
13695: PUSH
13696: LD_EXP 45
13700: AND
13701: IFFALSE 13807
13703: GO 13705
13705: DISABLE
13706: LD_INT 0
13708: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13709: LD_ADDR_VAR 0 1
13713: PUSH
13714: LD_INT 22
13716: PUSH
13717: LD_OWVAR 2
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 2
13728: PUSH
13729: LD_INT 30
13731: PUSH
13732: LD_INT 0
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 1
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: ST_TO_ADDR
// if not depot then
13763: LD_VAR 0 1
13767: NOT
13768: IFFALSE 13772
// exit ;
13770: GO 13807
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13772: LD_VAR 0 1
13776: PUSH
13777: LD_INT 1
13779: ARRAY
13780: PPUSH
13781: CALL_OW 250
13785: PPUSH
13786: LD_VAR 0 1
13790: PUSH
13791: LD_INT 1
13793: ARRAY
13794: PPUSH
13795: CALL_OW 251
13799: PPUSH
13800: LD_INT 70
13802: PPUSH
13803: CALL_OW 495
// end ;
13807: PPOPN 1
13809: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13810: LD_EXP 12
13814: PUSH
13815: LD_EXP 46
13819: AND
13820: IFFALSE 14031
13822: GO 13824
13824: DISABLE
13825: LD_INT 0
13827: PPUSH
13828: PPUSH
13829: PPUSH
13830: PPUSH
13831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13832: LD_ADDR_VAR 0 5
13836: PUSH
13837: LD_INT 22
13839: PUSH
13840: LD_OWVAR 2
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 21
13851: PUSH
13852: LD_INT 1
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: ST_TO_ADDR
// if not tmp then
13868: LD_VAR 0 5
13872: NOT
13873: IFFALSE 13877
// exit ;
13875: GO 14031
// for i in tmp do
13877: LD_ADDR_VAR 0 1
13881: PUSH
13882: LD_VAR 0 5
13886: PUSH
13887: FOR_IN
13888: IFFALSE 14029
// begin d := rand ( 0 , 5 ) ;
13890: LD_ADDR_VAR 0 4
13894: PUSH
13895: LD_INT 0
13897: PPUSH
13898: LD_INT 5
13900: PPUSH
13901: CALL_OW 12
13905: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13906: LD_ADDR_VAR 0 2
13910: PUSH
13911: LD_VAR 0 1
13915: PPUSH
13916: CALL_OW 250
13920: PPUSH
13921: LD_VAR 0 4
13925: PPUSH
13926: LD_INT 3
13928: PPUSH
13929: LD_INT 12
13931: PPUSH
13932: CALL_OW 12
13936: PPUSH
13937: CALL_OW 272
13941: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13942: LD_ADDR_VAR 0 3
13946: PUSH
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 251
13956: PPUSH
13957: LD_VAR 0 4
13961: PPUSH
13962: LD_INT 3
13964: PPUSH
13965: LD_INT 12
13967: PPUSH
13968: CALL_OW 12
13972: PPUSH
13973: CALL_OW 273
13977: ST_TO_ADDR
// if ValidHex ( x , y ) then
13978: LD_VAR 0 2
13982: PPUSH
13983: LD_VAR 0 3
13987: PPUSH
13988: CALL_OW 488
13992: IFFALSE 14027
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13994: LD_VAR 0 1
13998: PPUSH
13999: LD_VAR 0 2
14003: PPUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: LD_INT 3
14011: PPUSH
14012: LD_INT 6
14014: PPUSH
14015: CALL_OW 12
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: CALL_OW 483
// end ;
14027: GO 13887
14029: POP
14030: POP
// end ;
14031: PPOPN 5
14033: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14034: LD_EXP 12
14038: PUSH
14039: LD_EXP 47
14043: AND
14044: IFFALSE 14138
14046: GO 14048
14048: DISABLE
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14053: LD_ADDR_VAR 0 2
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_OWVAR 2
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 32
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 21
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: ST_TO_ADDR
// if not tmp then
14100: LD_VAR 0 2
14104: NOT
14105: IFFALSE 14109
// exit ;
14107: GO 14138
// for i in tmp do
14109: LD_ADDR_VAR 0 1
14113: PUSH
14114: LD_VAR 0 2
14118: PUSH
14119: FOR_IN
14120: IFFALSE 14136
// SetFuel ( i , 0 ) ;
14122: LD_VAR 0 1
14126: PPUSH
14127: LD_INT 0
14129: PPUSH
14130: CALL_OW 240
14134: GO 14119
14136: POP
14137: POP
// end ;
14138: PPOPN 2
14140: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14141: LD_EXP 12
14145: PUSH
14146: LD_EXP 48
14150: AND
14151: IFFALSE 14217
14153: GO 14155
14155: DISABLE
14156: LD_INT 0
14158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14159: LD_ADDR_VAR 0 1
14163: PUSH
14164: LD_INT 22
14166: PUSH
14167: LD_OWVAR 2
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 30
14178: PUSH
14179: LD_INT 29
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL_OW 69
14194: ST_TO_ADDR
// if not tmp then
14195: LD_VAR 0 1
14199: NOT
14200: IFFALSE 14204
// exit ;
14202: GO 14217
// DestroyUnit ( tmp [ 1 ] ) ;
14204: LD_VAR 0 1
14208: PUSH
14209: LD_INT 1
14211: ARRAY
14212: PPUSH
14213: CALL_OW 65
// end ;
14217: PPOPN 1
14219: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14220: LD_EXP 12
14224: PUSH
14225: LD_EXP 50
14229: AND
14230: IFFALSE 14359
14232: GO 14234
14234: DISABLE
14235: LD_INT 0
14237: PPUSH
// begin uc_side := 0 ;
14238: LD_ADDR_OWVAR 20
14242: PUSH
14243: LD_INT 0
14245: ST_TO_ADDR
// uc_nation := nation_arabian ;
14246: LD_ADDR_OWVAR 21
14250: PUSH
14251: LD_INT 2
14253: ST_TO_ADDR
// hc_gallery :=  ;
14254: LD_ADDR_OWVAR 33
14258: PUSH
14259: LD_STRING 
14261: ST_TO_ADDR
// hc_name :=  ;
14262: LD_ADDR_OWVAR 26
14266: PUSH
14267: LD_STRING 
14269: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14270: LD_INT 1
14272: PPUSH
14273: LD_INT 11
14275: PPUSH
14276: LD_INT 10
14278: PPUSH
14279: CALL_OW 380
// un := CreateHuman ;
14283: LD_ADDR_VAR 0 1
14287: PUSH
14288: CALL_OW 44
14292: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 1
14300: PPUSH
14301: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14305: LD_INT 35
14307: PPUSH
14308: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14312: LD_VAR 0 1
14316: PPUSH
14317: LD_INT 22
14319: PUSH
14320: LD_OWVAR 2
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PPUSH
14329: CALL_OW 69
14333: PPUSH
14334: LD_VAR 0 1
14338: PPUSH
14339: CALL_OW 74
14343: PPUSH
14344: CALL_OW 115
// until IsDead ( un ) ;
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 301
14357: IFFALSE 14305
// end ;
14359: PPOPN 1
14361: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14362: LD_EXP 12
14366: PUSH
14367: LD_EXP 52
14371: AND
14372: IFFALSE 14384
14374: GO 14376
14376: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14377: LD_STRING earthquake(getX(game), 0, 32)
14379: PPUSH
14380: CALL_OW 559
14384: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14385: LD_EXP 12
14389: PUSH
14390: LD_EXP 53
14394: AND
14395: IFFALSE 14486
14397: GO 14399
14399: DISABLE
14400: LD_INT 0
14402: PPUSH
// begin enable ;
14403: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14404: LD_ADDR_VAR 0 1
14408: PUSH
14409: LD_INT 22
14411: PUSH
14412: LD_OWVAR 2
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 21
14423: PUSH
14424: LD_INT 2
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 33
14433: PUSH
14434: LD_INT 3
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 69
14450: ST_TO_ADDR
// if not tmp then
14451: LD_VAR 0 1
14455: NOT
14456: IFFALSE 14460
// exit ;
14458: GO 14486
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14460: LD_VAR 0 1
14464: PUSH
14465: LD_INT 1
14467: PPUSH
14468: LD_VAR 0 1
14472: PPUSH
14473: CALL_OW 12
14477: ARRAY
14478: PPUSH
14479: LD_INT 1
14481: PPUSH
14482: CALL_OW 234
// end ;
14486: PPOPN 1
14488: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14489: LD_EXP 12
14493: PUSH
14494: LD_EXP 54
14498: AND
14499: IFFALSE 14640
14501: GO 14503
14503: DISABLE
14504: LD_INT 0
14506: PPUSH
14507: PPUSH
14508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14509: LD_ADDR_VAR 0 3
14513: PUSH
14514: LD_INT 22
14516: PUSH
14517: LD_OWVAR 2
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 25
14528: PUSH
14529: LD_INT 1
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 69
14544: ST_TO_ADDR
// if not tmp then
14545: LD_VAR 0 3
14549: NOT
14550: IFFALSE 14554
// exit ;
14552: GO 14640
// un := tmp [ rand ( 1 , tmp ) ] ;
14554: LD_ADDR_VAR 0 2
14558: PUSH
14559: LD_VAR 0 3
14563: PUSH
14564: LD_INT 1
14566: PPUSH
14567: LD_VAR 0 3
14571: PPUSH
14572: CALL_OW 12
14576: ARRAY
14577: ST_TO_ADDR
// if Crawls ( un ) then
14578: LD_VAR 0 2
14582: PPUSH
14583: CALL_OW 318
14587: IFFALSE 14598
// ComWalk ( un ) ;
14589: LD_VAR 0 2
14593: PPUSH
14594: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14598: LD_VAR 0 2
14602: PPUSH
14603: LD_INT 9
14605: PPUSH
14606: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14610: LD_INT 28
14612: PPUSH
14613: LD_OWVAR 2
14617: PPUSH
14618: LD_INT 2
14620: PPUSH
14621: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14625: LD_INT 29
14627: PPUSH
14628: LD_OWVAR 2
14632: PPUSH
14633: LD_INT 2
14635: PPUSH
14636: CALL_OW 322
// end ;
14640: PPOPN 3
14642: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14643: LD_EXP 12
14647: PUSH
14648: LD_EXP 55
14652: AND
14653: IFFALSE 14764
14655: GO 14657
14657: DISABLE
14658: LD_INT 0
14660: PPUSH
14661: PPUSH
14662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_INT 22
14670: PUSH
14671: LD_OWVAR 2
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 25
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: ST_TO_ADDR
// if not tmp then
14699: LD_VAR 0 3
14703: NOT
14704: IFFALSE 14708
// exit ;
14706: GO 14764
// un := tmp [ rand ( 1 , tmp ) ] ;
14708: LD_ADDR_VAR 0 2
14712: PUSH
14713: LD_VAR 0 3
14717: PUSH
14718: LD_INT 1
14720: PPUSH
14721: LD_VAR 0 3
14725: PPUSH
14726: CALL_OW 12
14730: ARRAY
14731: ST_TO_ADDR
// if Crawls ( un ) then
14732: LD_VAR 0 2
14736: PPUSH
14737: CALL_OW 318
14741: IFFALSE 14752
// ComWalk ( un ) ;
14743: LD_VAR 0 2
14747: PPUSH
14748: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14752: LD_VAR 0 2
14756: PPUSH
14757: LD_INT 8
14759: PPUSH
14760: CALL_OW 336
// end ;
14764: PPOPN 3
14766: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14767: LD_EXP 12
14771: PUSH
14772: LD_EXP 56
14776: AND
14777: IFFALSE 14921
14779: GO 14781
14781: DISABLE
14782: LD_INT 0
14784: PPUSH
14785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14786: LD_ADDR_VAR 0 2
14790: PUSH
14791: LD_INT 22
14793: PUSH
14794: LD_OWVAR 2
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 21
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: LD_INT 34
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 34
14828: PUSH
14829: LD_INT 51
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 34
14838: PUSH
14839: LD_INT 32
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: ST_TO_ADDR
// if not tmp then
14862: LD_VAR 0 2
14866: NOT
14867: IFFALSE 14871
// exit ;
14869: GO 14921
// for i in tmp do
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_VAR 0 2
14880: PUSH
14881: FOR_IN
14882: IFFALSE 14919
// if GetCargo ( i , mat_artifact ) = 0 then
14884: LD_VAR 0 1
14888: PPUSH
14889: LD_INT 4
14891: PPUSH
14892: CALL_OW 289
14896: PUSH
14897: LD_INT 0
14899: EQUAL
14900: IFFALSE 14917
// SetCargo ( i , mat_siberit , 100 ) ;
14902: LD_VAR 0 1
14906: PPUSH
14907: LD_INT 3
14909: PPUSH
14910: LD_INT 100
14912: PPUSH
14913: CALL_OW 290
14917: GO 14881
14919: POP
14920: POP
// end ;
14921: PPOPN 2
14923: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14924: LD_EXP 12
14928: PUSH
14929: LD_EXP 57
14933: AND
14934: IFFALSE 15117
14936: GO 14938
14938: DISABLE
14939: LD_INT 0
14941: PPUSH
14942: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_INT 22
14950: PUSH
14951: LD_OWVAR 2
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 69
14964: ST_TO_ADDR
// if not tmp then
14965: LD_VAR 0 2
14969: NOT
14970: IFFALSE 14974
// exit ;
14972: GO 15117
// for i := 1 to 2 do
14974: LD_ADDR_VAR 0 1
14978: PUSH
14979: DOUBLE
14980: LD_INT 1
14982: DEC
14983: ST_TO_ADDR
14984: LD_INT 2
14986: PUSH
14987: FOR_TO
14988: IFFALSE 15115
// begin uc_side := your_side ;
14990: LD_ADDR_OWVAR 20
14994: PUSH
14995: LD_OWVAR 2
14999: ST_TO_ADDR
// uc_nation := nation_american ;
15000: LD_ADDR_OWVAR 21
15004: PUSH
15005: LD_INT 1
15007: ST_TO_ADDR
// vc_chassis := us_morphling ;
15008: LD_ADDR_OWVAR 37
15012: PUSH
15013: LD_INT 5
15015: ST_TO_ADDR
// vc_engine := engine_siberite ;
15016: LD_ADDR_OWVAR 39
15020: PUSH
15021: LD_INT 3
15023: ST_TO_ADDR
// vc_control := control_computer ;
15024: LD_ADDR_OWVAR 38
15028: PUSH
15029: LD_INT 3
15031: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15032: LD_ADDR_OWVAR 40
15036: PUSH
15037: LD_INT 10
15039: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15040: LD_VAR 0 2
15044: PUSH
15045: LD_INT 1
15047: ARRAY
15048: PPUSH
15049: CALL_OW 310
15053: NOT
15054: IFFALSE 15101
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15056: CALL_OW 45
15060: PPUSH
15061: LD_VAR 0 2
15065: PUSH
15066: LD_INT 1
15068: ARRAY
15069: PPUSH
15070: CALL_OW 250
15074: PPUSH
15075: LD_VAR 0 2
15079: PUSH
15080: LD_INT 1
15082: ARRAY
15083: PPUSH
15084: CALL_OW 251
15088: PPUSH
15089: LD_INT 12
15091: PPUSH
15092: LD_INT 1
15094: PPUSH
15095: CALL_OW 50
15099: GO 15113
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15101: CALL_OW 45
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: CALL_OW 51
// end ;
15113: GO 14987
15115: POP
15116: POP
// end ;
15117: PPOPN 2
15119: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15120: LD_EXP 12
15124: PUSH
15125: LD_EXP 58
15129: AND
15130: IFFALSE 15352
15132: GO 15134
15134: DISABLE
15135: LD_INT 0
15137: PPUSH
15138: PPUSH
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15143: LD_ADDR_VAR 0 6
15147: PUSH
15148: LD_INT 22
15150: PUSH
15151: LD_OWVAR 2
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 21
15162: PUSH
15163: LD_INT 1
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 3
15172: PUSH
15173: LD_INT 23
15175: PUSH
15176: LD_INT 0
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 69
15196: ST_TO_ADDR
// if not tmp then
15197: LD_VAR 0 6
15201: NOT
15202: IFFALSE 15206
// exit ;
15204: GO 15352
// s1 := rand ( 1 , 4 ) ;
15206: LD_ADDR_VAR 0 2
15210: PUSH
15211: LD_INT 1
15213: PPUSH
15214: LD_INT 4
15216: PPUSH
15217: CALL_OW 12
15221: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15222: LD_ADDR_VAR 0 4
15226: PUSH
15227: LD_VAR 0 6
15231: PUSH
15232: LD_INT 1
15234: ARRAY
15235: PPUSH
15236: LD_VAR 0 2
15240: PPUSH
15241: CALL_OW 259
15245: ST_TO_ADDR
// if s1 = 1 then
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 1
15253: EQUAL
15254: IFFALSE 15274
// s2 := rand ( 2 , 4 ) else
15256: LD_ADDR_VAR 0 3
15260: PUSH
15261: LD_INT 2
15263: PPUSH
15264: LD_INT 4
15266: PPUSH
15267: CALL_OW 12
15271: ST_TO_ADDR
15272: GO 15282
// s2 := 1 ;
15274: LD_ADDR_VAR 0 3
15278: PUSH
15279: LD_INT 1
15281: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15282: LD_ADDR_VAR 0 5
15286: PUSH
15287: LD_VAR 0 6
15291: PUSH
15292: LD_INT 1
15294: ARRAY
15295: PPUSH
15296: LD_VAR 0 3
15300: PPUSH
15301: CALL_OW 259
15305: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15306: LD_VAR 0 6
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: PPUSH
15315: LD_VAR 0 2
15319: PPUSH
15320: LD_VAR 0 5
15324: PPUSH
15325: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15329: LD_VAR 0 6
15333: PUSH
15334: LD_INT 1
15336: ARRAY
15337: PPUSH
15338: LD_VAR 0 3
15342: PPUSH
15343: LD_VAR 0 4
15347: PPUSH
15348: CALL_OW 237
// end ;
15352: PPOPN 6
15354: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15355: LD_EXP 12
15359: PUSH
15360: LD_EXP 59
15364: AND
15365: IFFALSE 15444
15367: GO 15369
15369: DISABLE
15370: LD_INT 0
15372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15373: LD_ADDR_VAR 0 1
15377: PUSH
15378: LD_INT 22
15380: PUSH
15381: LD_OWVAR 2
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 30
15392: PUSH
15393: LD_INT 3
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: ST_TO_ADDR
// if not tmp then
15409: LD_VAR 0 1
15413: NOT
15414: IFFALSE 15418
// exit ;
15416: GO 15444
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15418: LD_VAR 0 1
15422: PUSH
15423: LD_INT 1
15425: PPUSH
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 12
15435: ARRAY
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: CALL_OW 234
// end ;
15444: PPOPN 1
15446: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15447: LD_EXP 12
15451: PUSH
15452: LD_EXP 60
15456: AND
15457: IFFALSE 15569
15459: GO 15461
15461: DISABLE
15462: LD_INT 0
15464: PPUSH
15465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_INT 22
15473: PUSH
15474: LD_OWVAR 2
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 2
15485: PUSH
15486: LD_INT 30
15488: PUSH
15489: LD_INT 27
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 30
15498: PUSH
15499: LD_INT 26
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 30
15508: PUSH
15509: LD_INT 28
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PPUSH
15526: CALL_OW 69
15530: ST_TO_ADDR
// if not tmp then
15531: LD_VAR 0 2
15535: NOT
15536: IFFALSE 15540
// exit ;
15538: GO 15569
// for i in tmp do
15540: LD_ADDR_VAR 0 1
15544: PUSH
15545: LD_VAR 0 2
15549: PUSH
15550: FOR_IN
15551: IFFALSE 15567
// SetLives ( i , 1 ) ;
15553: LD_VAR 0 1
15557: PPUSH
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 234
15565: GO 15550
15567: POP
15568: POP
// end ;
15569: PPOPN 2
15571: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15572: LD_EXP 12
15576: PUSH
15577: LD_EXP 61
15581: AND
15582: IFFALSE 15869
15584: GO 15586
15586: DISABLE
15587: LD_INT 0
15589: PPUSH
15590: PPUSH
15591: PPUSH
// begin i := rand ( 1 , 7 ) ;
15592: LD_ADDR_VAR 0 1
15596: PUSH
15597: LD_INT 1
15599: PPUSH
15600: LD_INT 7
15602: PPUSH
15603: CALL_OW 12
15607: ST_TO_ADDR
// case i of 1 :
15608: LD_VAR 0 1
15612: PUSH
15613: LD_INT 1
15615: DOUBLE
15616: EQUAL
15617: IFTRUE 15621
15619: GO 15631
15621: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15622: LD_STRING earthquake(getX(game), 0, 32)
15624: PPUSH
15625: CALL_OW 559
15629: GO 15869
15631: LD_INT 2
15633: DOUBLE
15634: EQUAL
15635: IFTRUE 15639
15637: GO 15653
15639: POP
// begin ToLua ( displayStucuk(); ) ;
15640: LD_STRING displayStucuk();
15642: PPUSH
15643: CALL_OW 559
// ResetFog ;
15647: CALL_OW 335
// end ; 3 :
15651: GO 15869
15653: LD_INT 3
15655: DOUBLE
15656: EQUAL
15657: IFTRUE 15661
15659: GO 15765
15661: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15662: LD_ADDR_VAR 0 2
15666: PUSH
15667: LD_INT 22
15669: PUSH
15670: LD_OWVAR 2
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 1
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PPUSH
15693: CALL_OW 69
15697: ST_TO_ADDR
// if not tmp then
15698: LD_VAR 0 2
15702: NOT
15703: IFFALSE 15707
// exit ;
15705: GO 15869
// un := tmp [ rand ( 1 , tmp ) ] ;
15707: LD_ADDR_VAR 0 3
15711: PUSH
15712: LD_VAR 0 2
15716: PUSH
15717: LD_INT 1
15719: PPUSH
15720: LD_VAR 0 2
15724: PPUSH
15725: CALL_OW 12
15729: ARRAY
15730: ST_TO_ADDR
// if Crawls ( un ) then
15731: LD_VAR 0 3
15735: PPUSH
15736: CALL_OW 318
15740: IFFALSE 15751
// ComWalk ( un ) ;
15742: LD_VAR 0 3
15746: PPUSH
15747: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15751: LD_VAR 0 3
15755: PPUSH
15756: LD_INT 8
15758: PPUSH
15759: CALL_OW 336
// end ; 4 :
15763: GO 15869
15765: LD_INT 4
15767: DOUBLE
15768: EQUAL
15769: IFTRUE 15773
15771: GO 15847
15773: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15774: LD_ADDR_VAR 0 2
15778: PUSH
15779: LD_INT 22
15781: PUSH
15782: LD_OWVAR 2
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 30
15793: PUSH
15794: LD_INT 29
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: ST_TO_ADDR
// if not tmp then
15810: LD_VAR 0 2
15814: NOT
15815: IFFALSE 15819
// exit ;
15817: GO 15869
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15819: LD_VAR 0 2
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: PPUSH
15828: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15832: LD_VAR 0 2
15836: PUSH
15837: LD_INT 1
15839: ARRAY
15840: PPUSH
15841: CALL_OW 65
// end ; 5 .. 7 :
15845: GO 15869
15847: LD_INT 5
15849: DOUBLE
15850: GREATEREQUAL
15851: IFFALSE 15859
15853: LD_INT 7
15855: DOUBLE
15856: LESSEQUAL
15857: IFTRUE 15861
15859: GO 15868
15861: POP
// StreamSibBomb ; end ;
15862: CALL 12106 0 0
15866: GO 15869
15868: POP
// end ;
15869: PPOPN 3
15871: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15872: LD_EXP 12
15876: PUSH
15877: LD_EXP 62
15881: AND
15882: IFFALSE 16038
15884: GO 15886
15886: DISABLE
15887: LD_INT 0
15889: PPUSH
15890: PPUSH
15891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15892: LD_ADDR_VAR 0 2
15896: PUSH
15897: LD_INT 81
15899: PUSH
15900: LD_OWVAR 2
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: LD_INT 21
15914: PUSH
15915: LD_INT 1
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 21
15924: PUSH
15925: LD_INT 2
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PPUSH
15941: CALL_OW 69
15945: ST_TO_ADDR
// if not tmp then
15946: LD_VAR 0 2
15950: NOT
15951: IFFALSE 15955
// exit ;
15953: GO 16038
// p := 0 ;
15955: LD_ADDR_VAR 0 3
15959: PUSH
15960: LD_INT 0
15962: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15963: LD_INT 35
15965: PPUSH
15966: CALL_OW 67
// p := p + 1 ;
15970: LD_ADDR_VAR 0 3
15974: PUSH
15975: LD_VAR 0 3
15979: PUSH
15980: LD_INT 1
15982: PLUS
15983: ST_TO_ADDR
// for i in tmp do
15984: LD_ADDR_VAR 0 1
15988: PUSH
15989: LD_VAR 0 2
15993: PUSH
15994: FOR_IN
15995: IFFALSE 16026
// if GetLives ( i ) < 1000 then
15997: LD_VAR 0 1
16001: PPUSH
16002: CALL_OW 256
16006: PUSH
16007: LD_INT 1000
16009: LESS
16010: IFFALSE 16024
// SetLives ( i , 1000 ) ;
16012: LD_VAR 0 1
16016: PPUSH
16017: LD_INT 1000
16019: PPUSH
16020: CALL_OW 234
16024: GO 15994
16026: POP
16027: POP
// until p > 20 ;
16028: LD_VAR 0 3
16032: PUSH
16033: LD_INT 20
16035: GREATER
16036: IFFALSE 15963
// end ;
16038: PPOPN 3
16040: END
// every 0 0$1 trigger StreamModeActive and sTime do
16041: LD_EXP 12
16045: PUSH
16046: LD_EXP 63
16050: AND
16051: IFFALSE 16086
16053: GO 16055
16055: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16056: LD_INT 28
16058: PPUSH
16059: LD_OWVAR 2
16063: PPUSH
16064: LD_INT 2
16066: PPUSH
16067: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16071: LD_INT 30
16073: PPUSH
16074: LD_OWVAR 2
16078: PPUSH
16079: LD_INT 2
16081: PPUSH
16082: CALL_OW 322
// end ;
16086: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16087: LD_EXP 12
16091: PUSH
16092: LD_EXP 64
16096: AND
16097: IFFALSE 16218
16099: GO 16101
16101: DISABLE
16102: LD_INT 0
16104: PPUSH
16105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16106: LD_ADDR_VAR 0 2
16110: PUSH
16111: LD_INT 22
16113: PUSH
16114: LD_OWVAR 2
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 21
16125: PUSH
16126: LD_INT 1
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: LD_INT 23
16138: PUSH
16139: LD_INT 0
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: PPUSH
16155: CALL_OW 69
16159: ST_TO_ADDR
// if not tmp then
16160: LD_VAR 0 2
16164: NOT
16165: IFFALSE 16169
// exit ;
16167: GO 16218
// for i in tmp do
16169: LD_ADDR_VAR 0 1
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: FOR_IN
16180: IFFALSE 16216
// begin if Crawls ( i ) then
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL_OW 318
16191: IFFALSE 16202
// ComWalk ( i ) ;
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 138
// SetClass ( i , 2 ) ;
16202: LD_VAR 0 1
16206: PPUSH
16207: LD_INT 2
16209: PPUSH
16210: CALL_OW 336
// end ;
16214: GO 16179
16216: POP
16217: POP
// end ;
16218: PPOPN 2
16220: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16221: LD_EXP 12
16225: PUSH
16226: LD_EXP 65
16230: AND
16231: IFFALSE 16519
16233: GO 16235
16235: DISABLE
16236: LD_INT 0
16238: PPUSH
16239: PPUSH
16240: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16241: LD_OWVAR 2
16245: PPUSH
16246: LD_INT 9
16248: PPUSH
16249: LD_INT 1
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16259: LD_INT 9
16261: PPUSH
16262: LD_OWVAR 2
16266: PPUSH
16267: CALL_OW 343
// uc_side := 9 ;
16271: LD_ADDR_OWVAR 20
16275: PUSH
16276: LD_INT 9
16278: ST_TO_ADDR
// uc_nation := 2 ;
16279: LD_ADDR_OWVAR 21
16283: PUSH
16284: LD_INT 2
16286: ST_TO_ADDR
// hc_name := Dark Warrior ;
16287: LD_ADDR_OWVAR 26
16291: PUSH
16292: LD_STRING Dark Warrior
16294: ST_TO_ADDR
// hc_gallery :=  ;
16295: LD_ADDR_OWVAR 33
16299: PUSH
16300: LD_STRING 
16302: ST_TO_ADDR
// hc_noskilllimit := true ;
16303: LD_ADDR_OWVAR 76
16307: PUSH
16308: LD_INT 1
16310: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16311: LD_ADDR_OWVAR 31
16315: PUSH
16316: LD_INT 30
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 30
16324: PUSH
16325: LD_INT 30
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: ST_TO_ADDR
// un := CreateHuman ;
16334: LD_ADDR_VAR 0 3
16338: PUSH
16339: CALL_OW 44
16343: ST_TO_ADDR
// hc_noskilllimit := false ;
16344: LD_ADDR_OWVAR 76
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16352: LD_VAR 0 3
16356: PPUSH
16357: LD_INT 1
16359: PPUSH
16360: CALL_OW 51
// ToLua ( playRanger() ) ;
16364: LD_STRING playRanger()
16366: PPUSH
16367: CALL_OW 559
// p := 0 ;
16371: LD_ADDR_VAR 0 2
16375: PUSH
16376: LD_INT 0
16378: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16379: LD_INT 35
16381: PPUSH
16382: CALL_OW 67
// p := p + 1 ;
16386: LD_ADDR_VAR 0 2
16390: PUSH
16391: LD_VAR 0 2
16395: PUSH
16396: LD_INT 1
16398: PLUS
16399: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16400: LD_VAR 0 3
16404: PPUSH
16405: CALL_OW 256
16409: PUSH
16410: LD_INT 1000
16412: LESS
16413: IFFALSE 16427
// SetLives ( un , 1000 ) ;
16415: LD_VAR 0 3
16419: PPUSH
16420: LD_INT 1000
16422: PPUSH
16423: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16427: LD_VAR 0 3
16431: PPUSH
16432: LD_INT 81
16434: PUSH
16435: LD_OWVAR 2
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 91
16446: PUSH
16447: LD_VAR 0 3
16451: PUSH
16452: LD_INT 30
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PPUSH
16464: CALL_OW 69
16468: PPUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: CALL_OW 74
16478: PPUSH
16479: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16483: LD_VAR 0 2
16487: PUSH
16488: LD_INT 80
16490: GREATER
16491: PUSH
16492: LD_VAR 0 3
16496: PPUSH
16497: CALL_OW 301
16501: OR
16502: IFFALSE 16379
// if un then
16504: LD_VAR 0 3
16508: IFFALSE 16519
// RemoveUnit ( un ) ;
16510: LD_VAR 0 3
16514: PPUSH
16515: CALL_OW 64
// end ;
16519: PPOPN 3
16521: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16522: LD_EXP 66
16526: IFFALSE 16642
16528: GO 16530
16530: DISABLE
16531: LD_INT 0
16533: PPUSH
16534: PPUSH
16535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16536: LD_ADDR_VAR 0 2
16540: PUSH
16541: LD_INT 81
16543: PUSH
16544: LD_OWVAR 2
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 21
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PPUSH
16567: CALL_OW 69
16571: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16572: LD_STRING playComputer()
16574: PPUSH
16575: CALL_OW 559
// if not tmp then
16579: LD_VAR 0 2
16583: NOT
16584: IFFALSE 16588
// exit ;
16586: GO 16642
// for i in tmp do
16588: LD_ADDR_VAR 0 1
16592: PUSH
16593: LD_VAR 0 2
16597: PUSH
16598: FOR_IN
16599: IFFALSE 16640
// for j := 1 to 4 do
16601: LD_ADDR_VAR 0 3
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_INT 4
16613: PUSH
16614: FOR_TO
16615: IFFALSE 16636
// SetSkill ( i , j , 10 ) ;
16617: LD_VAR 0 1
16621: PPUSH
16622: LD_VAR 0 3
16626: PPUSH
16627: LD_INT 10
16629: PPUSH
16630: CALL_OW 237
16634: GO 16614
16636: POP
16637: POP
16638: GO 16598
16640: POP
16641: POP
// end ;
16642: PPOPN 3
16644: END
// every 0 0$1 trigger s30 do var i , tmp ;
16645: LD_EXP 67
16649: IFFALSE 16718
16651: GO 16653
16653: DISABLE
16654: LD_INT 0
16656: PPUSH
16657: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16658: LD_ADDR_VAR 0 2
16662: PUSH
16663: LD_INT 22
16665: PUSH
16666: LD_OWVAR 2
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PPUSH
16675: CALL_OW 69
16679: ST_TO_ADDR
// if not tmp then
16680: LD_VAR 0 2
16684: NOT
16685: IFFALSE 16689
// exit ;
16687: GO 16718
// for i in tmp do
16689: LD_ADDR_VAR 0 1
16693: PUSH
16694: LD_VAR 0 2
16698: PUSH
16699: FOR_IN
16700: IFFALSE 16716
// SetLives ( i , 300 ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: LD_INT 300
16709: PPUSH
16710: CALL_OW 234
16714: GO 16699
16716: POP
16717: POP
// end ;
16718: PPOPN 2
16720: END
// every 0 0$1 trigger s60 do var i , tmp ;
16721: LD_EXP 68
16725: IFFALSE 16794
16727: GO 16729
16729: DISABLE
16730: LD_INT 0
16732: PPUSH
16733: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16734: LD_ADDR_VAR 0 2
16738: PUSH
16739: LD_INT 22
16741: PUSH
16742: LD_OWVAR 2
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PPUSH
16751: CALL_OW 69
16755: ST_TO_ADDR
// if not tmp then
16756: LD_VAR 0 2
16760: NOT
16761: IFFALSE 16765
// exit ;
16763: GO 16794
// for i in tmp do
16765: LD_ADDR_VAR 0 1
16769: PUSH
16770: LD_VAR 0 2
16774: PUSH
16775: FOR_IN
16776: IFFALSE 16792
// SetLives ( i , 600 ) ;
16778: LD_VAR 0 1
16782: PPUSH
16783: LD_INT 600
16785: PPUSH
16786: CALL_OW 234
16790: GO 16775
16792: POP
16793: POP
// end ;
16794: PPOPN 2
16796: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16797: LD_INT 0
16799: PPUSH
// case cmd of 301 :
16800: LD_VAR 0 1
16804: PUSH
16805: LD_INT 301
16807: DOUBLE
16808: EQUAL
16809: IFTRUE 16813
16811: GO 16845
16813: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16814: LD_VAR 0 6
16818: PPUSH
16819: LD_VAR 0 7
16823: PPUSH
16824: LD_VAR 0 8
16828: PPUSH
16829: LD_VAR 0 4
16833: PPUSH
16834: LD_VAR 0 5
16838: PPUSH
16839: CALL 18046 0 5
16843: GO 16966
16845: LD_INT 302
16847: DOUBLE
16848: EQUAL
16849: IFTRUE 16853
16851: GO 16890
16853: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16854: LD_VAR 0 6
16858: PPUSH
16859: LD_VAR 0 7
16863: PPUSH
16864: LD_VAR 0 8
16868: PPUSH
16869: LD_VAR 0 9
16873: PPUSH
16874: LD_VAR 0 4
16878: PPUSH
16879: LD_VAR 0 5
16883: PPUSH
16884: CALL 18137 0 6
16888: GO 16966
16890: LD_INT 303
16892: DOUBLE
16893: EQUAL
16894: IFTRUE 16898
16896: GO 16935
16898: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16899: LD_VAR 0 6
16903: PPUSH
16904: LD_VAR 0 7
16908: PPUSH
16909: LD_VAR 0 8
16913: PPUSH
16914: LD_VAR 0 9
16918: PPUSH
16919: LD_VAR 0 4
16923: PPUSH
16924: LD_VAR 0 5
16928: PPUSH
16929: CALL 16971 0 6
16933: GO 16966
16935: LD_INT 304
16937: DOUBLE
16938: EQUAL
16939: IFTRUE 16943
16941: GO 16965
16943: POP
// hHackTeleport ( unit , x , y ) ; end ;
16944: LD_VAR 0 2
16948: PPUSH
16949: LD_VAR 0 4
16953: PPUSH
16954: LD_VAR 0 5
16958: PPUSH
16959: CALL 18730 0 3
16963: GO 16966
16965: POP
// end ;
16966: LD_VAR 0 12
16970: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16971: LD_INT 0
16973: PPUSH
16974: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16975: LD_VAR 0 1
16979: PUSH
16980: LD_INT 1
16982: LESS
16983: PUSH
16984: LD_VAR 0 1
16988: PUSH
16989: LD_INT 3
16991: GREATER
16992: OR
16993: PUSH
16994: LD_VAR 0 5
16998: PPUSH
16999: LD_VAR 0 6
17003: PPUSH
17004: CALL_OW 428
17008: OR
17009: IFFALSE 17013
// exit ;
17011: GO 17733
// uc_side := your_side ;
17013: LD_ADDR_OWVAR 20
17017: PUSH
17018: LD_OWVAR 2
17022: ST_TO_ADDR
// uc_nation := nation ;
17023: LD_ADDR_OWVAR 21
17027: PUSH
17028: LD_VAR 0 1
17032: ST_TO_ADDR
// bc_level = 1 ;
17033: LD_ADDR_OWVAR 43
17037: PUSH
17038: LD_INT 1
17040: ST_TO_ADDR
// case btype of 1 :
17041: LD_VAR 0 2
17045: PUSH
17046: LD_INT 1
17048: DOUBLE
17049: EQUAL
17050: IFTRUE 17054
17052: GO 17065
17054: POP
// bc_type := b_depot ; 2 :
17055: LD_ADDR_OWVAR 42
17059: PUSH
17060: LD_INT 0
17062: ST_TO_ADDR
17063: GO 17677
17065: LD_INT 2
17067: DOUBLE
17068: EQUAL
17069: IFTRUE 17073
17071: GO 17084
17073: POP
// bc_type := b_warehouse ; 3 :
17074: LD_ADDR_OWVAR 42
17078: PUSH
17079: LD_INT 1
17081: ST_TO_ADDR
17082: GO 17677
17084: LD_INT 3
17086: DOUBLE
17087: EQUAL
17088: IFTRUE 17092
17090: GO 17103
17092: POP
// bc_type := b_lab ; 4 .. 9 :
17093: LD_ADDR_OWVAR 42
17097: PUSH
17098: LD_INT 6
17100: ST_TO_ADDR
17101: GO 17677
17103: LD_INT 4
17105: DOUBLE
17106: GREATEREQUAL
17107: IFFALSE 17115
17109: LD_INT 9
17111: DOUBLE
17112: LESSEQUAL
17113: IFTRUE 17117
17115: GO 17169
17117: POP
// begin bc_type := b_lab_half ;
17118: LD_ADDR_OWVAR 42
17122: PUSH
17123: LD_INT 7
17125: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17126: LD_ADDR_OWVAR 44
17130: PUSH
17131: LD_INT 10
17133: PUSH
17134: LD_INT 11
17136: PUSH
17137: LD_INT 12
17139: PUSH
17140: LD_INT 15
17142: PUSH
17143: LD_INT 14
17145: PUSH
17146: LD_INT 13
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: PUSH
17157: LD_VAR 0 2
17161: PUSH
17162: LD_INT 3
17164: MINUS
17165: ARRAY
17166: ST_TO_ADDR
// end ; 10 .. 13 :
17167: GO 17677
17169: LD_INT 10
17171: DOUBLE
17172: GREATEREQUAL
17173: IFFALSE 17181
17175: LD_INT 13
17177: DOUBLE
17178: LESSEQUAL
17179: IFTRUE 17183
17181: GO 17260
17183: POP
// begin bc_type := b_lab_full ;
17184: LD_ADDR_OWVAR 42
17188: PUSH
17189: LD_INT 8
17191: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17192: LD_ADDR_OWVAR 44
17196: PUSH
17197: LD_INT 10
17199: PUSH
17200: LD_INT 12
17202: PUSH
17203: LD_INT 14
17205: PUSH
17206: LD_INT 13
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: PUSH
17215: LD_VAR 0 2
17219: PUSH
17220: LD_INT 9
17222: MINUS
17223: ARRAY
17224: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17225: LD_ADDR_OWVAR 45
17229: PUSH
17230: LD_INT 11
17232: PUSH
17233: LD_INT 15
17235: PUSH
17236: LD_INT 12
17238: PUSH
17239: LD_INT 15
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: PUSH
17248: LD_VAR 0 2
17252: PUSH
17253: LD_INT 9
17255: MINUS
17256: ARRAY
17257: ST_TO_ADDR
// end ; 14 :
17258: GO 17677
17260: LD_INT 14
17262: DOUBLE
17263: EQUAL
17264: IFTRUE 17268
17266: GO 17279
17268: POP
// bc_type := b_workshop ; 15 :
17269: LD_ADDR_OWVAR 42
17273: PUSH
17274: LD_INT 2
17276: ST_TO_ADDR
17277: GO 17677
17279: LD_INT 15
17281: DOUBLE
17282: EQUAL
17283: IFTRUE 17287
17285: GO 17298
17287: POP
// bc_type := b_factory ; 16 :
17288: LD_ADDR_OWVAR 42
17292: PUSH
17293: LD_INT 3
17295: ST_TO_ADDR
17296: GO 17677
17298: LD_INT 16
17300: DOUBLE
17301: EQUAL
17302: IFTRUE 17306
17304: GO 17317
17306: POP
// bc_type := b_ext_gun ; 17 :
17307: LD_ADDR_OWVAR 42
17311: PUSH
17312: LD_INT 17
17314: ST_TO_ADDR
17315: GO 17677
17317: LD_INT 17
17319: DOUBLE
17320: EQUAL
17321: IFTRUE 17325
17323: GO 17353
17325: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17326: LD_ADDR_OWVAR 42
17330: PUSH
17331: LD_INT 19
17333: PUSH
17334: LD_INT 23
17336: PUSH
17337: LD_INT 19
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: LIST
17344: PUSH
17345: LD_VAR 0 1
17349: ARRAY
17350: ST_TO_ADDR
17351: GO 17677
17353: LD_INT 18
17355: DOUBLE
17356: EQUAL
17357: IFTRUE 17361
17359: GO 17372
17361: POP
// bc_type := b_ext_radar ; 19 :
17362: LD_ADDR_OWVAR 42
17366: PUSH
17367: LD_INT 20
17369: ST_TO_ADDR
17370: GO 17677
17372: LD_INT 19
17374: DOUBLE
17375: EQUAL
17376: IFTRUE 17380
17378: GO 17391
17380: POP
// bc_type := b_ext_radio ; 20 :
17381: LD_ADDR_OWVAR 42
17385: PUSH
17386: LD_INT 22
17388: ST_TO_ADDR
17389: GO 17677
17391: LD_INT 20
17393: DOUBLE
17394: EQUAL
17395: IFTRUE 17399
17397: GO 17410
17399: POP
// bc_type := b_ext_siberium ; 21 :
17400: LD_ADDR_OWVAR 42
17404: PUSH
17405: LD_INT 21
17407: ST_TO_ADDR
17408: GO 17677
17410: LD_INT 21
17412: DOUBLE
17413: EQUAL
17414: IFTRUE 17418
17416: GO 17429
17418: POP
// bc_type := b_ext_computer ; 22 :
17419: LD_ADDR_OWVAR 42
17423: PUSH
17424: LD_INT 24
17426: ST_TO_ADDR
17427: GO 17677
17429: LD_INT 22
17431: DOUBLE
17432: EQUAL
17433: IFTRUE 17437
17435: GO 17448
17437: POP
// bc_type := b_ext_track ; 23 :
17438: LD_ADDR_OWVAR 42
17442: PUSH
17443: LD_INT 16
17445: ST_TO_ADDR
17446: GO 17677
17448: LD_INT 23
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17467
17456: POP
// bc_type := b_ext_laser ; 24 :
17457: LD_ADDR_OWVAR 42
17461: PUSH
17462: LD_INT 25
17464: ST_TO_ADDR
17465: GO 17677
17467: LD_INT 24
17469: DOUBLE
17470: EQUAL
17471: IFTRUE 17475
17473: GO 17486
17475: POP
// bc_type := b_control_tower ; 25 :
17476: LD_ADDR_OWVAR 42
17480: PUSH
17481: LD_INT 36
17483: ST_TO_ADDR
17484: GO 17677
17486: LD_INT 25
17488: DOUBLE
17489: EQUAL
17490: IFTRUE 17494
17492: GO 17505
17494: POP
// bc_type := b_breastwork ; 26 :
17495: LD_ADDR_OWVAR 42
17499: PUSH
17500: LD_INT 31
17502: ST_TO_ADDR
17503: GO 17677
17505: LD_INT 26
17507: DOUBLE
17508: EQUAL
17509: IFTRUE 17513
17511: GO 17524
17513: POP
// bc_type := b_bunker ; 27 :
17514: LD_ADDR_OWVAR 42
17518: PUSH
17519: LD_INT 32
17521: ST_TO_ADDR
17522: GO 17677
17524: LD_INT 27
17526: DOUBLE
17527: EQUAL
17528: IFTRUE 17532
17530: GO 17543
17532: POP
// bc_type := b_turret ; 28 :
17533: LD_ADDR_OWVAR 42
17537: PUSH
17538: LD_INT 33
17540: ST_TO_ADDR
17541: GO 17677
17543: LD_INT 28
17545: DOUBLE
17546: EQUAL
17547: IFTRUE 17551
17549: GO 17562
17551: POP
// bc_type := b_armoury ; 29 :
17552: LD_ADDR_OWVAR 42
17556: PUSH
17557: LD_INT 4
17559: ST_TO_ADDR
17560: GO 17677
17562: LD_INT 29
17564: DOUBLE
17565: EQUAL
17566: IFTRUE 17570
17568: GO 17581
17570: POP
// bc_type := b_barracks ; 30 :
17571: LD_ADDR_OWVAR 42
17575: PUSH
17576: LD_INT 5
17578: ST_TO_ADDR
17579: GO 17677
17581: LD_INT 30
17583: DOUBLE
17584: EQUAL
17585: IFTRUE 17589
17587: GO 17600
17589: POP
// bc_type := b_solar_power ; 31 :
17590: LD_ADDR_OWVAR 42
17594: PUSH
17595: LD_INT 27
17597: ST_TO_ADDR
17598: GO 17677
17600: LD_INT 31
17602: DOUBLE
17603: EQUAL
17604: IFTRUE 17608
17606: GO 17619
17608: POP
// bc_type := b_oil_power ; 32 :
17609: LD_ADDR_OWVAR 42
17613: PUSH
17614: LD_INT 26
17616: ST_TO_ADDR
17617: GO 17677
17619: LD_INT 32
17621: DOUBLE
17622: EQUAL
17623: IFTRUE 17627
17625: GO 17638
17627: POP
// bc_type := b_siberite_power ; 33 :
17628: LD_ADDR_OWVAR 42
17632: PUSH
17633: LD_INT 28
17635: ST_TO_ADDR
17636: GO 17677
17638: LD_INT 33
17640: DOUBLE
17641: EQUAL
17642: IFTRUE 17646
17644: GO 17657
17646: POP
// bc_type := b_oil_mine ; 34 :
17647: LD_ADDR_OWVAR 42
17651: PUSH
17652: LD_INT 29
17654: ST_TO_ADDR
17655: GO 17677
17657: LD_INT 34
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17676
17665: POP
// bc_type := b_siberite_mine ; end ;
17666: LD_ADDR_OWVAR 42
17670: PUSH
17671: LD_INT 30
17673: ST_TO_ADDR
17674: GO 17677
17676: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17677: LD_ADDR_VAR 0 8
17681: PUSH
17682: LD_VAR 0 5
17686: PPUSH
17687: LD_VAR 0 6
17691: PPUSH
17692: LD_VAR 0 3
17696: PPUSH
17697: CALL_OW 47
17701: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17702: LD_OWVAR 42
17706: PUSH
17707: LD_INT 32
17709: PUSH
17710: LD_INT 33
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: IN
17717: IFFALSE 17733
// PlaceWeaponTurret ( b , weapon ) ;
17719: LD_VAR 0 8
17723: PPUSH
17724: LD_VAR 0 4
17728: PPUSH
17729: CALL_OW 431
// end ;
17733: LD_VAR 0 7
17737: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17744: LD_ADDR_VAR 0 4
17748: PUSH
17749: LD_INT 22
17751: PUSH
17752: LD_OWVAR 2
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: LD_INT 30
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 30
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 69
17797: ST_TO_ADDR
// if not tmp then
17798: LD_VAR 0 4
17802: NOT
17803: IFFALSE 17807
// exit ;
17805: GO 17866
// for i in tmp do
17807: LD_ADDR_VAR 0 2
17811: PUSH
17812: LD_VAR 0 4
17816: PUSH
17817: FOR_IN
17818: IFFALSE 17864
// for j = 1 to 3 do
17820: LD_ADDR_VAR 0 3
17824: PUSH
17825: DOUBLE
17826: LD_INT 1
17828: DEC
17829: ST_TO_ADDR
17830: LD_INT 3
17832: PUSH
17833: FOR_TO
17834: IFFALSE 17860
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17836: LD_VAR 0 2
17840: PPUSH
17841: CALL_OW 274
17845: PPUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: LD_INT 99999
17853: PPUSH
17854: CALL_OW 277
17858: GO 17833
17860: POP
17861: POP
17862: GO 17817
17864: POP
17865: POP
// end ;
17866: LD_VAR 0 1
17870: RET
// export function hHackSetLevel10 ; var i , j ; begin
17871: LD_INT 0
17873: PPUSH
17874: PPUSH
17875: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17876: LD_ADDR_VAR 0 2
17880: PUSH
17881: LD_INT 21
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PPUSH
17891: CALL_OW 69
17895: PUSH
17896: FOR_IN
17897: IFFALSE 17949
// if IsSelected ( i ) then
17899: LD_VAR 0 2
17903: PPUSH
17904: CALL_OW 306
17908: IFFALSE 17947
// begin for j := 1 to 4 do
17910: LD_ADDR_VAR 0 3
17914: PUSH
17915: DOUBLE
17916: LD_INT 1
17918: DEC
17919: ST_TO_ADDR
17920: LD_INT 4
17922: PUSH
17923: FOR_TO
17924: IFFALSE 17945
// SetSkill ( i , j , 10 ) ;
17926: LD_VAR 0 2
17930: PPUSH
17931: LD_VAR 0 3
17935: PPUSH
17936: LD_INT 10
17938: PPUSH
17939: CALL_OW 237
17943: GO 17923
17945: POP
17946: POP
// end ;
17947: GO 17896
17949: POP
17950: POP
// end ;
17951: LD_VAR 0 1
17955: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17956: LD_INT 0
17958: PPUSH
17959: PPUSH
17960: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17961: LD_ADDR_VAR 0 2
17965: PUSH
17966: LD_INT 22
17968: PUSH
17969: LD_OWVAR 2
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 21
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PPUSH
17992: CALL_OW 69
17996: PUSH
17997: FOR_IN
17998: IFFALSE 18039
// begin for j := 1 to 4 do
18000: LD_ADDR_VAR 0 3
18004: PUSH
18005: DOUBLE
18006: LD_INT 1
18008: DEC
18009: ST_TO_ADDR
18010: LD_INT 4
18012: PUSH
18013: FOR_TO
18014: IFFALSE 18035
// SetSkill ( i , j , 10 ) ;
18016: LD_VAR 0 2
18020: PPUSH
18021: LD_VAR 0 3
18025: PPUSH
18026: LD_INT 10
18028: PPUSH
18029: CALL_OW 237
18033: GO 18013
18035: POP
18036: POP
// end ;
18037: GO 17997
18039: POP
18040: POP
// end ;
18041: LD_VAR 0 1
18045: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18046: LD_INT 0
18048: PPUSH
// uc_side := your_side ;
18049: LD_ADDR_OWVAR 20
18053: PUSH
18054: LD_OWVAR 2
18058: ST_TO_ADDR
// uc_nation := nation ;
18059: LD_ADDR_OWVAR 21
18063: PUSH
18064: LD_VAR 0 1
18068: ST_TO_ADDR
// InitHc ;
18069: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18073: LD_INT 0
18075: PPUSH
18076: LD_VAR 0 2
18080: PPUSH
18081: LD_VAR 0 3
18085: PPUSH
18086: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18090: LD_VAR 0 4
18094: PPUSH
18095: LD_VAR 0 5
18099: PPUSH
18100: CALL_OW 428
18104: PUSH
18105: LD_INT 0
18107: EQUAL
18108: IFFALSE 18132
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18110: CALL_OW 44
18114: PPUSH
18115: LD_VAR 0 4
18119: PPUSH
18120: LD_VAR 0 5
18124: PPUSH
18125: LD_INT 1
18127: PPUSH
18128: CALL_OW 48
// end ;
18132: LD_VAR 0 6
18136: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18137: LD_INT 0
18139: PPUSH
18140: PPUSH
// uc_side := your_side ;
18141: LD_ADDR_OWVAR 20
18145: PUSH
18146: LD_OWVAR 2
18150: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18151: LD_VAR 0 1
18155: PUSH
18156: LD_INT 1
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 3
18164: PUSH
18165: LD_INT 4
18167: PUSH
18168: LD_INT 5
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: IN
18178: IFFALSE 18190
// uc_nation := nation_american else
18180: LD_ADDR_OWVAR 21
18184: PUSH
18185: LD_INT 1
18187: ST_TO_ADDR
18188: GO 18233
// if chassis in [ 11 , 12 , 13 , 14 ] then
18190: LD_VAR 0 1
18194: PUSH
18195: LD_INT 11
18197: PUSH
18198: LD_INT 12
18200: PUSH
18201: LD_INT 13
18203: PUSH
18204: LD_INT 14
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: IN
18213: IFFALSE 18225
// uc_nation := nation_arabian else
18215: LD_ADDR_OWVAR 21
18219: PUSH
18220: LD_INT 2
18222: ST_TO_ADDR
18223: GO 18233
// uc_nation := nation_russian ;
18225: LD_ADDR_OWVAR 21
18229: PUSH
18230: LD_INT 3
18232: ST_TO_ADDR
// vc_chassis := chassis ;
18233: LD_ADDR_OWVAR 37
18237: PUSH
18238: LD_VAR 0 1
18242: ST_TO_ADDR
// vc_engine := engine ;
18243: LD_ADDR_OWVAR 39
18247: PUSH
18248: LD_VAR 0 2
18252: ST_TO_ADDR
// vc_control := control ;
18253: LD_ADDR_OWVAR 38
18257: PUSH
18258: LD_VAR 0 3
18262: ST_TO_ADDR
// vc_weapon := weapon ;
18263: LD_ADDR_OWVAR 40
18267: PUSH
18268: LD_VAR 0 4
18272: ST_TO_ADDR
// un := CreateVehicle ;
18273: LD_ADDR_VAR 0 8
18277: PUSH
18278: CALL_OW 45
18282: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18283: LD_VAR 0 8
18287: PPUSH
18288: LD_INT 0
18290: PPUSH
18291: LD_INT 5
18293: PPUSH
18294: CALL_OW 12
18298: PPUSH
18299: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18303: LD_VAR 0 8
18307: PPUSH
18308: LD_VAR 0 5
18312: PPUSH
18313: LD_VAR 0 6
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 48
// end ;
18325: LD_VAR 0 7
18329: RET
// export hInvincible ; every 1 do
18330: GO 18332
18332: DISABLE
// hInvincible := [ ] ;
18333: LD_ADDR_EXP 69
18337: PUSH
18338: EMPTY
18339: ST_TO_ADDR
18340: END
// every 10 do var i ;
18341: GO 18343
18343: DISABLE
18344: LD_INT 0
18346: PPUSH
// begin enable ;
18347: ENABLE
// if not hInvincible then
18348: LD_EXP 69
18352: NOT
18353: IFFALSE 18357
// exit ;
18355: GO 18401
// for i in hInvincible do
18357: LD_ADDR_VAR 0 1
18361: PUSH
18362: LD_EXP 69
18366: PUSH
18367: FOR_IN
18368: IFFALSE 18399
// if GetLives ( i ) < 1000 then
18370: LD_VAR 0 1
18374: PPUSH
18375: CALL_OW 256
18379: PUSH
18380: LD_INT 1000
18382: LESS
18383: IFFALSE 18397
// SetLives ( i , 1000 ) ;
18385: LD_VAR 0 1
18389: PPUSH
18390: LD_INT 1000
18392: PPUSH
18393: CALL_OW 234
18397: GO 18367
18399: POP
18400: POP
// end ;
18401: PPOPN 1
18403: END
// export function hHackInvincible ; var i ; begin
18404: LD_INT 0
18406: PPUSH
18407: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18408: LD_ADDR_VAR 0 2
18412: PUSH
18413: LD_INT 2
18415: PUSH
18416: LD_INT 21
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 21
18428: PUSH
18429: LD_INT 2
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: PPUSH
18441: CALL_OW 69
18445: PUSH
18446: FOR_IN
18447: IFFALSE 18508
// if IsSelected ( i ) then
18449: LD_VAR 0 2
18453: PPUSH
18454: CALL_OW 306
18458: IFFALSE 18506
// begin if i in hInvincible then
18460: LD_VAR 0 2
18464: PUSH
18465: LD_EXP 69
18469: IN
18470: IFFALSE 18490
// hInvincible := hInvincible diff i else
18472: LD_ADDR_EXP 69
18476: PUSH
18477: LD_EXP 69
18481: PUSH
18482: LD_VAR 0 2
18486: DIFF
18487: ST_TO_ADDR
18488: GO 18506
// hInvincible := hInvincible union i ;
18490: LD_ADDR_EXP 69
18494: PUSH
18495: LD_EXP 69
18499: PUSH
18500: LD_VAR 0 2
18504: UNION
18505: ST_TO_ADDR
// end ;
18506: GO 18446
18508: POP
18509: POP
// end ;
18510: LD_VAR 0 1
18514: RET
// export function hHackInvisible ; var i , j ; begin
18515: LD_INT 0
18517: PPUSH
18518: PPUSH
18519: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18520: LD_ADDR_VAR 0 2
18524: PUSH
18525: LD_INT 21
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PPUSH
18535: CALL_OW 69
18539: PUSH
18540: FOR_IN
18541: IFFALSE 18565
// if IsSelected ( i ) then
18543: LD_VAR 0 2
18547: PPUSH
18548: CALL_OW 306
18552: IFFALSE 18563
// ComForceInvisible ( i ) ;
18554: LD_VAR 0 2
18558: PPUSH
18559: CALL_OW 496
18563: GO 18540
18565: POP
18566: POP
// end ;
18567: LD_VAR 0 1
18571: RET
// export function hHackChangeYourSide ; begin
18572: LD_INT 0
18574: PPUSH
// if your_side = 8 then
18575: LD_OWVAR 2
18579: PUSH
18580: LD_INT 8
18582: EQUAL
18583: IFFALSE 18595
// your_side := 0 else
18585: LD_ADDR_OWVAR 2
18589: PUSH
18590: LD_INT 0
18592: ST_TO_ADDR
18593: GO 18609
// your_side := your_side + 1 ;
18595: LD_ADDR_OWVAR 2
18599: PUSH
18600: LD_OWVAR 2
18604: PUSH
18605: LD_INT 1
18607: PLUS
18608: ST_TO_ADDR
// end ;
18609: LD_VAR 0 1
18613: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18614: LD_INT 0
18616: PPUSH
18617: PPUSH
18618: PPUSH
// for i in all_units do
18619: LD_ADDR_VAR 0 2
18623: PUSH
18624: LD_OWVAR 3
18628: PUSH
18629: FOR_IN
18630: IFFALSE 18708
// if IsSelected ( i ) then
18632: LD_VAR 0 2
18636: PPUSH
18637: CALL_OW 306
18641: IFFALSE 18706
// begin j := GetSide ( i ) ;
18643: LD_ADDR_VAR 0 3
18647: PUSH
18648: LD_VAR 0 2
18652: PPUSH
18653: CALL_OW 255
18657: ST_TO_ADDR
// if j = 8 then
18658: LD_VAR 0 3
18662: PUSH
18663: LD_INT 8
18665: EQUAL
18666: IFFALSE 18678
// j := 0 else
18668: LD_ADDR_VAR 0 3
18672: PUSH
18673: LD_INT 0
18675: ST_TO_ADDR
18676: GO 18692
// j := j + 1 ;
18678: LD_ADDR_VAR 0 3
18682: PUSH
18683: LD_VAR 0 3
18687: PUSH
18688: LD_INT 1
18690: PLUS
18691: ST_TO_ADDR
// SetSide ( i , j ) ;
18692: LD_VAR 0 2
18696: PPUSH
18697: LD_VAR 0 3
18701: PPUSH
18702: CALL_OW 235
// end ;
18706: GO 18629
18708: POP
18709: POP
// end ;
18710: LD_VAR 0 1
18714: RET
// export function hHackFog ; begin
18715: LD_INT 0
18717: PPUSH
// FogOff ( true ) ;
18718: LD_INT 1
18720: PPUSH
18721: CALL_OW 344
// end ;
18725: LD_VAR 0 1
18729: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18730: LD_INT 0
18732: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: LD_VAR 0 2
18742: PPUSH
18743: LD_VAR 0 3
18747: PPUSH
18748: LD_INT 1
18750: PPUSH
18751: LD_INT 1
18753: PPUSH
18754: CALL_OW 483
// CenterOnXY ( x , y ) ;
18758: LD_VAR 0 2
18762: PPUSH
18763: LD_VAR 0 3
18767: PPUSH
18768: CALL_OW 84
// end ;
18772: LD_VAR 0 4
18776: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18777: LD_INT 0
18779: PPUSH
18780: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18781: LD_VAR 0 1
18785: NOT
18786: PUSH
18787: LD_VAR 0 2
18791: PPUSH
18792: LD_VAR 0 3
18796: PPUSH
18797: CALL_OW 488
18801: NOT
18802: OR
18803: PUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 266
18813: PUSH
18814: LD_INT 3
18816: NONEQUAL
18817: PUSH
18818: LD_VAR 0 1
18822: PPUSH
18823: CALL_OW 247
18827: PUSH
18828: LD_INT 1
18830: EQUAL
18831: NOT
18832: AND
18833: OR
18834: IFFALSE 18838
// exit ;
18836: GO 18987
// if GetType ( factory ) = unit_human then
18838: LD_VAR 0 1
18842: PPUSH
18843: CALL_OW 247
18847: PUSH
18848: LD_INT 1
18850: EQUAL
18851: IFFALSE 18868
// factory := IsInUnit ( factory ) ;
18853: LD_ADDR_VAR 0 1
18857: PUSH
18858: LD_VAR 0 1
18862: PPUSH
18863: CALL_OW 310
18867: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18868: LD_VAR 0 1
18872: PPUSH
18873: CALL_OW 266
18877: PUSH
18878: LD_INT 3
18880: NONEQUAL
18881: IFFALSE 18885
// exit ;
18883: GO 18987
// if HexInfo ( x , y ) = factory then
18885: LD_VAR 0 2
18889: PPUSH
18890: LD_VAR 0 3
18894: PPUSH
18895: CALL_OW 428
18899: PUSH
18900: LD_VAR 0 1
18904: EQUAL
18905: IFFALSE 18932
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18907: LD_ADDR_EXP 70
18911: PUSH
18912: LD_EXP 70
18916: PPUSH
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_INT 0
18924: PPUSH
18925: CALL_OW 1
18929: ST_TO_ADDR
18930: GO 18983
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18932: LD_ADDR_EXP 70
18936: PUSH
18937: LD_EXP 70
18941: PPUSH
18942: LD_VAR 0 1
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 255
18956: PUSH
18957: LD_VAR 0 1
18961: PUSH
18962: LD_VAR 0 2
18966: PUSH
18967: LD_VAR 0 3
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: PPUSH
18978: CALL_OW 1
18982: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18983: CALL 18992 0 0
// end ;
18987: LD_VAR 0 4
18991: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18992: LD_INT 0
18994: PPUSH
18995: PPUSH
18996: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18997: LD_STRING resetFactoryWaypoint();
18999: PPUSH
19000: CALL_OW 559
// if factoryWaypoints then
19004: LD_EXP 70
19008: IFFALSE 19134
// begin list := PrepareArray ( factoryWaypoints ) ;
19010: LD_ADDR_VAR 0 3
19014: PUSH
19015: LD_EXP 70
19019: PPUSH
19020: CALL 61314 0 1
19024: ST_TO_ADDR
// for i := 1 to list do
19025: LD_ADDR_VAR 0 2
19029: PUSH
19030: DOUBLE
19031: LD_INT 1
19033: DEC
19034: ST_TO_ADDR
19035: LD_VAR 0 3
19039: PUSH
19040: FOR_TO
19041: IFFALSE 19132
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19043: LD_STRING setFactoryWaypointXY(
19045: PUSH
19046: LD_VAR 0 3
19050: PUSH
19051: LD_VAR 0 2
19055: ARRAY
19056: PUSH
19057: LD_INT 1
19059: ARRAY
19060: STR
19061: PUSH
19062: LD_STRING ,
19064: STR
19065: PUSH
19066: LD_VAR 0 3
19070: PUSH
19071: LD_VAR 0 2
19075: ARRAY
19076: PUSH
19077: LD_INT 2
19079: ARRAY
19080: STR
19081: PUSH
19082: LD_STRING ,
19084: STR
19085: PUSH
19086: LD_VAR 0 3
19090: PUSH
19091: LD_VAR 0 2
19095: ARRAY
19096: PUSH
19097: LD_INT 3
19099: ARRAY
19100: STR
19101: PUSH
19102: LD_STRING ,
19104: STR
19105: PUSH
19106: LD_VAR 0 3
19110: PUSH
19111: LD_VAR 0 2
19115: ARRAY
19116: PUSH
19117: LD_INT 4
19119: ARRAY
19120: STR
19121: PUSH
19122: LD_STRING )
19124: STR
19125: PPUSH
19126: CALL_OW 559
19130: GO 19040
19132: POP
19133: POP
// end ; end ;
19134: LD_VAR 0 1
19138: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19139: LD_INT 0
19141: PPUSH
// if HexInfo ( x , y ) = warehouse then
19142: LD_VAR 0 2
19146: PPUSH
19147: LD_VAR 0 3
19151: PPUSH
19152: CALL_OW 428
19156: PUSH
19157: LD_VAR 0 1
19161: EQUAL
19162: IFFALSE 19189
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19164: LD_ADDR_EXP 71
19168: PUSH
19169: LD_EXP 71
19173: PPUSH
19174: LD_VAR 0 1
19178: PPUSH
19179: LD_INT 0
19181: PPUSH
19182: CALL_OW 1
19186: ST_TO_ADDR
19187: GO 19240
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19189: LD_ADDR_EXP 71
19193: PUSH
19194: LD_EXP 71
19198: PPUSH
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 1
19208: PPUSH
19209: CALL_OW 255
19213: PUSH
19214: LD_VAR 0 1
19218: PUSH
19219: LD_VAR 0 2
19223: PUSH
19224: LD_VAR 0 3
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: PPUSH
19235: CALL_OW 1
19239: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19240: CALL 19249 0 0
// end ;
19244: LD_VAR 0 4
19248: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19249: LD_INT 0
19251: PPUSH
19252: PPUSH
19253: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19254: LD_STRING resetWarehouseGatheringPoints();
19256: PPUSH
19257: CALL_OW 559
// if warehouseGatheringPoints then
19261: LD_EXP 71
19265: IFFALSE 19391
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19267: LD_ADDR_VAR 0 3
19271: PUSH
19272: LD_EXP 71
19276: PPUSH
19277: CALL 61314 0 1
19281: ST_TO_ADDR
// for i := 1 to list do
19282: LD_ADDR_VAR 0 2
19286: PUSH
19287: DOUBLE
19288: LD_INT 1
19290: DEC
19291: ST_TO_ADDR
19292: LD_VAR 0 3
19296: PUSH
19297: FOR_TO
19298: IFFALSE 19389
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19300: LD_STRING setWarehouseGatheringPointXY(
19302: PUSH
19303: LD_VAR 0 3
19307: PUSH
19308: LD_VAR 0 2
19312: ARRAY
19313: PUSH
19314: LD_INT 1
19316: ARRAY
19317: STR
19318: PUSH
19319: LD_STRING ,
19321: STR
19322: PUSH
19323: LD_VAR 0 3
19327: PUSH
19328: LD_VAR 0 2
19332: ARRAY
19333: PUSH
19334: LD_INT 2
19336: ARRAY
19337: STR
19338: PUSH
19339: LD_STRING ,
19341: STR
19342: PUSH
19343: LD_VAR 0 3
19347: PUSH
19348: LD_VAR 0 2
19352: ARRAY
19353: PUSH
19354: LD_INT 3
19356: ARRAY
19357: STR
19358: PUSH
19359: LD_STRING ,
19361: STR
19362: PUSH
19363: LD_VAR 0 3
19367: PUSH
19368: LD_VAR 0 2
19372: ARRAY
19373: PUSH
19374: LD_INT 4
19376: ARRAY
19377: STR
19378: PUSH
19379: LD_STRING )
19381: STR
19382: PPUSH
19383: CALL_OW 559
19387: GO 19297
19389: POP
19390: POP
// end ; end ;
19391: LD_VAR 0 1
19395: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19396: LD_EXP 71
19400: IFFALSE 20085
19402: GO 19404
19404: DISABLE
19405: LD_INT 0
19407: PPUSH
19408: PPUSH
19409: PPUSH
19410: PPUSH
19411: PPUSH
19412: PPUSH
19413: PPUSH
19414: PPUSH
19415: PPUSH
// begin enable ;
19416: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19417: LD_ADDR_VAR 0 3
19421: PUSH
19422: LD_EXP 71
19426: PPUSH
19427: CALL 61314 0 1
19431: ST_TO_ADDR
// if not list then
19432: LD_VAR 0 3
19436: NOT
19437: IFFALSE 19441
// exit ;
19439: GO 20085
// for i := 1 to list do
19441: LD_ADDR_VAR 0 1
19445: PUSH
19446: DOUBLE
19447: LD_INT 1
19449: DEC
19450: ST_TO_ADDR
19451: LD_VAR 0 3
19455: PUSH
19456: FOR_TO
19457: IFFALSE 20083
// begin depot := list [ i ] [ 2 ] ;
19459: LD_ADDR_VAR 0 8
19463: PUSH
19464: LD_VAR 0 3
19468: PUSH
19469: LD_VAR 0 1
19473: ARRAY
19474: PUSH
19475: LD_INT 2
19477: ARRAY
19478: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19479: LD_ADDR_VAR 0 5
19483: PUSH
19484: LD_VAR 0 3
19488: PUSH
19489: LD_VAR 0 1
19493: ARRAY
19494: PUSH
19495: LD_INT 1
19497: ARRAY
19498: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19499: LD_VAR 0 8
19503: PPUSH
19504: CALL_OW 301
19508: PUSH
19509: LD_VAR 0 5
19513: PUSH
19514: LD_VAR 0 8
19518: PPUSH
19519: CALL_OW 255
19523: NONEQUAL
19524: OR
19525: IFFALSE 19554
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19527: LD_ADDR_EXP 71
19531: PUSH
19532: LD_EXP 71
19536: PPUSH
19537: LD_VAR 0 8
19541: PPUSH
19542: LD_INT 0
19544: PPUSH
19545: CALL_OW 1
19549: ST_TO_ADDR
// exit ;
19550: POP
19551: POP
19552: GO 20085
// end ; x := list [ i ] [ 3 ] ;
19554: LD_ADDR_VAR 0 6
19558: PUSH
19559: LD_VAR 0 3
19563: PUSH
19564: LD_VAR 0 1
19568: ARRAY
19569: PUSH
19570: LD_INT 3
19572: ARRAY
19573: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19574: LD_ADDR_VAR 0 7
19578: PUSH
19579: LD_VAR 0 3
19583: PUSH
19584: LD_VAR 0 1
19588: ARRAY
19589: PUSH
19590: LD_INT 4
19592: ARRAY
19593: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19594: LD_ADDR_VAR 0 9
19598: PUSH
19599: LD_VAR 0 6
19603: PPUSH
19604: LD_VAR 0 7
19608: PPUSH
19609: LD_INT 16
19611: PPUSH
19612: CALL 59902 0 3
19616: ST_TO_ADDR
// if not cratesNearbyPoint then
19617: LD_VAR 0 9
19621: NOT
19622: IFFALSE 19628
// exit ;
19624: POP
19625: POP
19626: GO 20085
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19628: LD_ADDR_VAR 0 4
19632: PUSH
19633: LD_INT 22
19635: PUSH
19636: LD_VAR 0 5
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 3
19647: PUSH
19648: LD_INT 60
19650: PUSH
19651: EMPTY
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 91
19660: PUSH
19661: LD_VAR 0 8
19665: PUSH
19666: LD_INT 6
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: LD_INT 25
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 25
19689: PUSH
19690: LD_INT 16
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: PPUSH
19708: CALL_OW 69
19712: PUSH
19713: LD_VAR 0 8
19717: PPUSH
19718: CALL_OW 313
19722: PPUSH
19723: LD_INT 3
19725: PUSH
19726: LD_INT 60
19728: PUSH
19729: EMPTY
19730: LIST
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: LD_INT 25
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 25
19751: PUSH
19752: LD_INT 16
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PPUSH
19768: CALL_OW 72
19772: UNION
19773: ST_TO_ADDR
// if tmp then
19774: LD_VAR 0 4
19778: IFFALSE 19858
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19780: LD_ADDR_VAR 0 4
19784: PUSH
19785: LD_VAR 0 4
19789: PPUSH
19790: LD_INT 3
19792: PPUSH
19793: CALL 57871 0 2
19797: ST_TO_ADDR
// for j in tmp do
19798: LD_ADDR_VAR 0 2
19802: PUSH
19803: LD_VAR 0 4
19807: PUSH
19808: FOR_IN
19809: IFFALSE 19852
// begin if IsInUnit ( j ) then
19811: LD_VAR 0 2
19815: PPUSH
19816: CALL_OW 310
19820: IFFALSE 19831
// ComExit ( j ) ;
19822: LD_VAR 0 2
19826: PPUSH
19827: CALL 57954 0 1
// AddComCollect ( j , x , y ) ;
19831: LD_VAR 0 2
19835: PPUSH
19836: LD_VAR 0 6
19840: PPUSH
19841: LD_VAR 0 7
19845: PPUSH
19846: CALL_OW 177
// end ;
19850: GO 19808
19852: POP
19853: POP
// exit ;
19854: POP
19855: POP
19856: GO 20085
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19858: LD_ADDR_VAR 0 4
19862: PUSH
19863: LD_INT 22
19865: PUSH
19866: LD_VAR 0 5
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 91
19877: PUSH
19878: LD_VAR 0 8
19882: PUSH
19883: LD_INT 8
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 2
19893: PUSH
19894: LD_INT 34
19896: PUSH
19897: LD_INT 12
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 34
19906: PUSH
19907: LD_INT 51
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 34
19916: PUSH
19917: LD_INT 32
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 34
19926: PUSH
19927: LD_INT 89
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: PPUSH
19946: CALL_OW 69
19950: ST_TO_ADDR
// if tmp then
19951: LD_VAR 0 4
19955: IFFALSE 20081
// begin for j in tmp do
19957: LD_ADDR_VAR 0 2
19961: PUSH
19962: LD_VAR 0 4
19966: PUSH
19967: FOR_IN
19968: IFFALSE 20079
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19970: LD_VAR 0 2
19974: PPUSH
19975: CALL_OW 262
19979: PUSH
19980: LD_INT 3
19982: EQUAL
19983: PUSH
19984: LD_VAR 0 2
19988: PPUSH
19989: CALL_OW 261
19993: PUSH
19994: LD_INT 20
19996: GREATER
19997: OR
19998: PUSH
19999: LD_VAR 0 2
20003: PPUSH
20004: CALL_OW 314
20008: NOT
20009: AND
20010: PUSH
20011: LD_VAR 0 2
20015: PPUSH
20016: CALL_OW 263
20020: PUSH
20021: LD_INT 1
20023: NONEQUAL
20024: PUSH
20025: LD_VAR 0 2
20029: PPUSH
20030: CALL_OW 311
20034: OR
20035: AND
20036: IFFALSE 20077
// begin ComCollect ( j , x , y ) ;
20038: LD_VAR 0 2
20042: PPUSH
20043: LD_VAR 0 6
20047: PPUSH
20048: LD_VAR 0 7
20052: PPUSH
20053: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20057: LD_VAR 0 2
20061: PPUSH
20062: LD_VAR 0 8
20066: PPUSH
20067: CALL_OW 172
// exit ;
20071: POP
20072: POP
20073: POP
20074: POP
20075: GO 20085
// end ;
20077: GO 19967
20079: POP
20080: POP
// end ; end ;
20081: GO 19456
20083: POP
20084: POP
// end ; end_of_file
20085: PPOPN 9
20087: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20088: LD_INT 0
20090: PPUSH
20091: PPUSH
// if exist_mode then
20092: LD_VAR 0 2
20096: IFFALSE 20121
// unit := CreateCharacter ( prefix & ident ) else
20098: LD_ADDR_VAR 0 5
20102: PUSH
20103: LD_VAR 0 3
20107: PUSH
20108: LD_VAR 0 1
20112: STR
20113: PPUSH
20114: CALL_OW 34
20118: ST_TO_ADDR
20119: GO 20136
// unit := NewCharacter ( ident ) ;
20121: LD_ADDR_VAR 0 5
20125: PUSH
20126: LD_VAR 0 1
20130: PPUSH
20131: CALL_OW 25
20135: ST_TO_ADDR
// result := unit ;
20136: LD_ADDR_VAR 0 4
20140: PUSH
20141: LD_VAR 0 5
20145: ST_TO_ADDR
// end ;
20146: LD_VAR 0 4
20150: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20151: LD_INT 0
20153: PPUSH
20154: PPUSH
// if not side or not nation then
20155: LD_VAR 0 1
20159: NOT
20160: PUSH
20161: LD_VAR 0 2
20165: NOT
20166: OR
20167: IFFALSE 20171
// exit ;
20169: GO 20939
// case nation of nation_american :
20171: LD_VAR 0 2
20175: PUSH
20176: LD_INT 1
20178: DOUBLE
20179: EQUAL
20180: IFTRUE 20184
20182: GO 20398
20184: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20185: LD_ADDR_VAR 0 4
20189: PUSH
20190: LD_INT 35
20192: PUSH
20193: LD_INT 45
20195: PUSH
20196: LD_INT 46
20198: PUSH
20199: LD_INT 47
20201: PUSH
20202: LD_INT 82
20204: PUSH
20205: LD_INT 83
20207: PUSH
20208: LD_INT 84
20210: PUSH
20211: LD_INT 85
20213: PUSH
20214: LD_INT 86
20216: PUSH
20217: LD_INT 1
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: LD_INT 6
20225: PUSH
20226: LD_INT 15
20228: PUSH
20229: LD_INT 16
20231: PUSH
20232: LD_INT 7
20234: PUSH
20235: LD_INT 12
20237: PUSH
20238: LD_INT 13
20240: PUSH
20241: LD_INT 10
20243: PUSH
20244: LD_INT 14
20246: PUSH
20247: LD_INT 20
20249: PUSH
20250: LD_INT 21
20252: PUSH
20253: LD_INT 22
20255: PUSH
20256: LD_INT 25
20258: PUSH
20259: LD_INT 32
20261: PUSH
20262: LD_INT 27
20264: PUSH
20265: LD_INT 36
20267: PUSH
20268: LD_INT 69
20270: PUSH
20271: LD_INT 39
20273: PUSH
20274: LD_INT 34
20276: PUSH
20277: LD_INT 40
20279: PUSH
20280: LD_INT 48
20282: PUSH
20283: LD_INT 49
20285: PUSH
20286: LD_INT 50
20288: PUSH
20289: LD_INT 51
20291: PUSH
20292: LD_INT 52
20294: PUSH
20295: LD_INT 53
20297: PUSH
20298: LD_INT 54
20300: PUSH
20301: LD_INT 55
20303: PUSH
20304: LD_INT 56
20306: PUSH
20307: LD_INT 57
20309: PUSH
20310: LD_INT 58
20312: PUSH
20313: LD_INT 59
20315: PUSH
20316: LD_INT 60
20318: PUSH
20319: LD_INT 61
20321: PUSH
20322: LD_INT 62
20324: PUSH
20325: LD_INT 80
20327: PUSH
20328: LD_INT 82
20330: PUSH
20331: LD_INT 83
20333: PUSH
20334: LD_INT 84
20336: PUSH
20337: LD_INT 85
20339: PUSH
20340: LD_INT 86
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: ST_TO_ADDR
20396: GO 20863
20398: LD_INT 2
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20632
20406: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20407: LD_ADDR_VAR 0 4
20411: PUSH
20412: LD_INT 35
20414: PUSH
20415: LD_INT 45
20417: PUSH
20418: LD_INT 46
20420: PUSH
20421: LD_INT 47
20423: PUSH
20424: LD_INT 82
20426: PUSH
20427: LD_INT 83
20429: PUSH
20430: LD_INT 84
20432: PUSH
20433: LD_INT 85
20435: PUSH
20436: LD_INT 87
20438: PUSH
20439: LD_INT 70
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: LD_INT 11
20447: PUSH
20448: LD_INT 3
20450: PUSH
20451: LD_INT 4
20453: PUSH
20454: LD_INT 5
20456: PUSH
20457: LD_INT 6
20459: PUSH
20460: LD_INT 15
20462: PUSH
20463: LD_INT 18
20465: PUSH
20466: LD_INT 7
20468: PUSH
20469: LD_INT 17
20471: PUSH
20472: LD_INT 8
20474: PUSH
20475: LD_INT 20
20477: PUSH
20478: LD_INT 21
20480: PUSH
20481: LD_INT 22
20483: PUSH
20484: LD_INT 72
20486: PUSH
20487: LD_INT 26
20489: PUSH
20490: LD_INT 69
20492: PUSH
20493: LD_INT 39
20495: PUSH
20496: LD_INT 40
20498: PUSH
20499: LD_INT 41
20501: PUSH
20502: LD_INT 42
20504: PUSH
20505: LD_INT 43
20507: PUSH
20508: LD_INT 48
20510: PUSH
20511: LD_INT 49
20513: PUSH
20514: LD_INT 50
20516: PUSH
20517: LD_INT 51
20519: PUSH
20520: LD_INT 52
20522: PUSH
20523: LD_INT 53
20525: PUSH
20526: LD_INT 54
20528: PUSH
20529: LD_INT 55
20531: PUSH
20532: LD_INT 56
20534: PUSH
20535: LD_INT 60
20537: PUSH
20538: LD_INT 61
20540: PUSH
20541: LD_INT 62
20543: PUSH
20544: LD_INT 66
20546: PUSH
20547: LD_INT 67
20549: PUSH
20550: LD_INT 68
20552: PUSH
20553: LD_INT 81
20555: PUSH
20556: LD_INT 82
20558: PUSH
20559: LD_INT 83
20561: PUSH
20562: LD_INT 84
20564: PUSH
20565: LD_INT 85
20567: PUSH
20568: LD_INT 87
20570: PUSH
20571: LD_INT 88
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: ST_TO_ADDR
20630: GO 20863
20632: LD_INT 3
20634: DOUBLE
20635: EQUAL
20636: IFTRUE 20640
20638: GO 20862
20640: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20641: LD_ADDR_VAR 0 4
20645: PUSH
20646: LD_INT 46
20648: PUSH
20649: LD_INT 47
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: LD_INT 2
20657: PUSH
20658: LD_INT 82
20660: PUSH
20661: LD_INT 83
20663: PUSH
20664: LD_INT 84
20666: PUSH
20667: LD_INT 85
20669: PUSH
20670: LD_INT 86
20672: PUSH
20673: LD_INT 11
20675: PUSH
20676: LD_INT 9
20678: PUSH
20679: LD_INT 20
20681: PUSH
20682: LD_INT 19
20684: PUSH
20685: LD_INT 21
20687: PUSH
20688: LD_INT 24
20690: PUSH
20691: LD_INT 22
20693: PUSH
20694: LD_INT 25
20696: PUSH
20697: LD_INT 28
20699: PUSH
20700: LD_INT 29
20702: PUSH
20703: LD_INT 30
20705: PUSH
20706: LD_INT 31
20708: PUSH
20709: LD_INT 37
20711: PUSH
20712: LD_INT 38
20714: PUSH
20715: LD_INT 32
20717: PUSH
20718: LD_INT 27
20720: PUSH
20721: LD_INT 33
20723: PUSH
20724: LD_INT 69
20726: PUSH
20727: LD_INT 39
20729: PUSH
20730: LD_INT 34
20732: PUSH
20733: LD_INT 40
20735: PUSH
20736: LD_INT 71
20738: PUSH
20739: LD_INT 23
20741: PUSH
20742: LD_INT 44
20744: PUSH
20745: LD_INT 48
20747: PUSH
20748: LD_INT 49
20750: PUSH
20751: LD_INT 50
20753: PUSH
20754: LD_INT 51
20756: PUSH
20757: LD_INT 52
20759: PUSH
20760: LD_INT 53
20762: PUSH
20763: LD_INT 54
20765: PUSH
20766: LD_INT 55
20768: PUSH
20769: LD_INT 56
20771: PUSH
20772: LD_INT 57
20774: PUSH
20775: LD_INT 58
20777: PUSH
20778: LD_INT 59
20780: PUSH
20781: LD_INT 63
20783: PUSH
20784: LD_INT 64
20786: PUSH
20787: LD_INT 65
20789: PUSH
20790: LD_INT 82
20792: PUSH
20793: LD_INT 83
20795: PUSH
20796: LD_INT 84
20798: PUSH
20799: LD_INT 85
20801: PUSH
20802: LD_INT 86
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: ST_TO_ADDR
20860: GO 20863
20862: POP
// if state > - 1 and state < 3 then
20863: LD_VAR 0 3
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: GREATER
20872: PUSH
20873: LD_VAR 0 3
20877: PUSH
20878: LD_INT 3
20880: LESS
20881: AND
20882: IFFALSE 20939
// for i in result do
20884: LD_ADDR_VAR 0 5
20888: PUSH
20889: LD_VAR 0 4
20893: PUSH
20894: FOR_IN
20895: IFFALSE 20937
// if GetTech ( i , side ) <> state then
20897: LD_VAR 0 5
20901: PPUSH
20902: LD_VAR 0 1
20906: PPUSH
20907: CALL_OW 321
20911: PUSH
20912: LD_VAR 0 3
20916: NONEQUAL
20917: IFFALSE 20935
// result := result diff i ;
20919: LD_ADDR_VAR 0 4
20923: PUSH
20924: LD_VAR 0 4
20928: PUSH
20929: LD_VAR 0 5
20933: DIFF
20934: ST_TO_ADDR
20935: GO 20894
20937: POP
20938: POP
// end ;
20939: LD_VAR 0 4
20943: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20944: LD_INT 0
20946: PPUSH
20947: PPUSH
20948: PPUSH
// result := true ;
20949: LD_ADDR_VAR 0 3
20953: PUSH
20954: LD_INT 1
20956: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20957: LD_ADDR_VAR 0 5
20961: PUSH
20962: LD_VAR 0 2
20966: PPUSH
20967: CALL_OW 480
20971: ST_TO_ADDR
// if not tmp then
20972: LD_VAR 0 5
20976: NOT
20977: IFFALSE 20981
// exit ;
20979: GO 21030
// for i in tmp do
20981: LD_ADDR_VAR 0 4
20985: PUSH
20986: LD_VAR 0 5
20990: PUSH
20991: FOR_IN
20992: IFFALSE 21028
// if GetTech ( i , side ) <> state_researched then
20994: LD_VAR 0 4
20998: PPUSH
20999: LD_VAR 0 1
21003: PPUSH
21004: CALL_OW 321
21008: PUSH
21009: LD_INT 2
21011: NONEQUAL
21012: IFFALSE 21026
// begin result := false ;
21014: LD_ADDR_VAR 0 3
21018: PUSH
21019: LD_INT 0
21021: ST_TO_ADDR
// exit ;
21022: POP
21023: POP
21024: GO 21030
// end ;
21026: GO 20991
21028: POP
21029: POP
// end ;
21030: LD_VAR 0 3
21034: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21035: LD_INT 0
21037: PPUSH
21038: PPUSH
21039: PPUSH
21040: PPUSH
21041: PPUSH
21042: PPUSH
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21050: LD_VAR 0 1
21054: NOT
21055: PUSH
21056: LD_VAR 0 1
21060: PPUSH
21061: CALL_OW 257
21065: PUSH
21066: LD_INT 9
21068: NONEQUAL
21069: OR
21070: IFFALSE 21074
// exit ;
21072: GO 21647
// side := GetSide ( unit ) ;
21074: LD_ADDR_VAR 0 9
21078: PUSH
21079: LD_VAR 0 1
21083: PPUSH
21084: CALL_OW 255
21088: ST_TO_ADDR
// tech_space := tech_spacanom ;
21089: LD_ADDR_VAR 0 12
21093: PUSH
21094: LD_INT 29
21096: ST_TO_ADDR
// tech_time := tech_taurad ;
21097: LD_ADDR_VAR 0 13
21101: PUSH
21102: LD_INT 28
21104: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21105: LD_ADDR_VAR 0 11
21109: PUSH
21110: LD_VAR 0 1
21114: PPUSH
21115: CALL_OW 310
21119: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21120: LD_VAR 0 11
21124: PPUSH
21125: CALL_OW 247
21129: PUSH
21130: LD_INT 2
21132: EQUAL
21133: IFFALSE 21137
// exit ;
21135: GO 21647
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21137: LD_ADDR_VAR 0 8
21141: PUSH
21142: LD_INT 81
21144: PUSH
21145: LD_VAR 0 9
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 3
21156: PUSH
21157: LD_INT 21
21159: PUSH
21160: LD_INT 3
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PPUSH
21175: CALL_OW 69
21179: ST_TO_ADDR
// if not tmp then
21180: LD_VAR 0 8
21184: NOT
21185: IFFALSE 21189
// exit ;
21187: GO 21647
// if in_unit then
21189: LD_VAR 0 11
21193: IFFALSE 21217
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21195: LD_ADDR_VAR 0 10
21199: PUSH
21200: LD_VAR 0 8
21204: PPUSH
21205: LD_VAR 0 11
21209: PPUSH
21210: CALL_OW 74
21214: ST_TO_ADDR
21215: GO 21237
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21217: LD_ADDR_VAR 0 10
21221: PUSH
21222: LD_VAR 0 8
21226: PPUSH
21227: LD_VAR 0 1
21231: PPUSH
21232: CALL_OW 74
21236: ST_TO_ADDR
// if not enemy then
21237: LD_VAR 0 10
21241: NOT
21242: IFFALSE 21246
// exit ;
21244: GO 21647
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21246: LD_VAR 0 11
21250: PUSH
21251: LD_VAR 0 11
21255: PPUSH
21256: LD_VAR 0 10
21260: PPUSH
21261: CALL_OW 296
21265: PUSH
21266: LD_INT 13
21268: GREATER
21269: AND
21270: PUSH
21271: LD_VAR 0 1
21275: PPUSH
21276: LD_VAR 0 10
21280: PPUSH
21281: CALL_OW 296
21285: PUSH
21286: LD_INT 12
21288: GREATER
21289: OR
21290: IFFALSE 21294
// exit ;
21292: GO 21647
// missile := [ 1 ] ;
21294: LD_ADDR_VAR 0 14
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: EMPTY
21303: LIST
21304: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21305: LD_VAR 0 9
21309: PPUSH
21310: LD_VAR 0 12
21314: PPUSH
21315: CALL_OW 325
21319: IFFALSE 21348
// missile := Replace ( missile , missile + 1 , 2 ) ;
21321: LD_ADDR_VAR 0 14
21325: PUSH
21326: LD_VAR 0 14
21330: PPUSH
21331: LD_VAR 0 14
21335: PUSH
21336: LD_INT 1
21338: PLUS
21339: PPUSH
21340: LD_INT 2
21342: PPUSH
21343: CALL_OW 1
21347: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21348: LD_VAR 0 9
21352: PPUSH
21353: LD_VAR 0 13
21357: PPUSH
21358: CALL_OW 325
21362: PUSH
21363: LD_VAR 0 10
21367: PPUSH
21368: CALL_OW 255
21372: PPUSH
21373: LD_VAR 0 13
21377: PPUSH
21378: CALL_OW 325
21382: NOT
21383: AND
21384: IFFALSE 21413
// missile := Replace ( missile , missile + 1 , 3 ) ;
21386: LD_ADDR_VAR 0 14
21390: PUSH
21391: LD_VAR 0 14
21395: PPUSH
21396: LD_VAR 0 14
21400: PUSH
21401: LD_INT 1
21403: PLUS
21404: PPUSH
21405: LD_INT 3
21407: PPUSH
21408: CALL_OW 1
21412: ST_TO_ADDR
// if missile < 2 then
21413: LD_VAR 0 14
21417: PUSH
21418: LD_INT 2
21420: LESS
21421: IFFALSE 21425
// exit ;
21423: GO 21647
// x := GetX ( enemy ) ;
21425: LD_ADDR_VAR 0 4
21429: PUSH
21430: LD_VAR 0 10
21434: PPUSH
21435: CALL_OW 250
21439: ST_TO_ADDR
// y := GetY ( enemy ) ;
21440: LD_ADDR_VAR 0 5
21444: PUSH
21445: LD_VAR 0 10
21449: PPUSH
21450: CALL_OW 251
21454: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21455: LD_ADDR_VAR 0 6
21459: PUSH
21460: LD_VAR 0 4
21464: PUSH
21465: LD_INT 1
21467: NEG
21468: PPUSH
21469: LD_INT 1
21471: PPUSH
21472: CALL_OW 12
21476: PLUS
21477: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21478: LD_ADDR_VAR 0 7
21482: PUSH
21483: LD_VAR 0 5
21487: PUSH
21488: LD_INT 1
21490: NEG
21491: PPUSH
21492: LD_INT 1
21494: PPUSH
21495: CALL_OW 12
21499: PLUS
21500: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21501: LD_VAR 0 6
21505: PPUSH
21506: LD_VAR 0 7
21510: PPUSH
21511: CALL_OW 488
21515: NOT
21516: IFFALSE 21538
// begin _x := x ;
21518: LD_ADDR_VAR 0 6
21522: PUSH
21523: LD_VAR 0 4
21527: ST_TO_ADDR
// _y := y ;
21528: LD_ADDR_VAR 0 7
21532: PUSH
21533: LD_VAR 0 5
21537: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21538: LD_ADDR_VAR 0 3
21542: PUSH
21543: LD_INT 1
21545: PPUSH
21546: LD_VAR 0 14
21550: PPUSH
21551: CALL_OW 12
21555: ST_TO_ADDR
// case i of 1 :
21556: LD_VAR 0 3
21560: PUSH
21561: LD_INT 1
21563: DOUBLE
21564: EQUAL
21565: IFTRUE 21569
21567: GO 21586
21569: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21570: LD_VAR 0 1
21574: PPUSH
21575: LD_VAR 0 10
21579: PPUSH
21580: CALL_OW 115
21584: GO 21647
21586: LD_INT 2
21588: DOUBLE
21589: EQUAL
21590: IFTRUE 21594
21592: GO 21616
21594: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21595: LD_VAR 0 1
21599: PPUSH
21600: LD_VAR 0 6
21604: PPUSH
21605: LD_VAR 0 7
21609: PPUSH
21610: CALL_OW 153
21614: GO 21647
21616: LD_INT 3
21618: DOUBLE
21619: EQUAL
21620: IFTRUE 21624
21622: GO 21646
21624: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21625: LD_VAR 0 1
21629: PPUSH
21630: LD_VAR 0 6
21634: PPUSH
21635: LD_VAR 0 7
21639: PPUSH
21640: CALL_OW 154
21644: GO 21647
21646: POP
// end ;
21647: LD_VAR 0 2
21651: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21652: LD_INT 0
21654: PPUSH
21655: PPUSH
21656: PPUSH
21657: PPUSH
21658: PPUSH
21659: PPUSH
// if not unit or not building then
21660: LD_VAR 0 1
21664: NOT
21665: PUSH
21666: LD_VAR 0 2
21670: NOT
21671: OR
21672: IFFALSE 21676
// exit ;
21674: GO 21834
// x := GetX ( building ) ;
21676: LD_ADDR_VAR 0 5
21680: PUSH
21681: LD_VAR 0 2
21685: PPUSH
21686: CALL_OW 250
21690: ST_TO_ADDR
// y := GetY ( building ) ;
21691: LD_ADDR_VAR 0 6
21695: PUSH
21696: LD_VAR 0 2
21700: PPUSH
21701: CALL_OW 251
21705: ST_TO_ADDR
// for i = 0 to 5 do
21706: LD_ADDR_VAR 0 4
21710: PUSH
21711: DOUBLE
21712: LD_INT 0
21714: DEC
21715: ST_TO_ADDR
21716: LD_INT 5
21718: PUSH
21719: FOR_TO
21720: IFFALSE 21832
// begin _x := ShiftX ( x , i , 3 ) ;
21722: LD_ADDR_VAR 0 7
21726: PUSH
21727: LD_VAR 0 5
21731: PPUSH
21732: LD_VAR 0 4
21736: PPUSH
21737: LD_INT 3
21739: PPUSH
21740: CALL_OW 272
21744: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21745: LD_ADDR_VAR 0 8
21749: PUSH
21750: LD_VAR 0 6
21754: PPUSH
21755: LD_VAR 0 4
21759: PPUSH
21760: LD_INT 3
21762: PPUSH
21763: CALL_OW 273
21767: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21768: LD_VAR 0 7
21772: PPUSH
21773: LD_VAR 0 8
21777: PPUSH
21778: CALL_OW 488
21782: NOT
21783: IFFALSE 21787
// continue ;
21785: GO 21719
// if HexInfo ( _x , _y ) = 0 then
21787: LD_VAR 0 7
21791: PPUSH
21792: LD_VAR 0 8
21796: PPUSH
21797: CALL_OW 428
21801: PUSH
21802: LD_INT 0
21804: EQUAL
21805: IFFALSE 21830
// begin ComMoveXY ( unit , _x , _y ) ;
21807: LD_VAR 0 1
21811: PPUSH
21812: LD_VAR 0 7
21816: PPUSH
21817: LD_VAR 0 8
21821: PPUSH
21822: CALL_OW 111
// exit ;
21826: POP
21827: POP
21828: GO 21834
// end ; end ;
21830: GO 21719
21832: POP
21833: POP
// end ;
21834: LD_VAR 0 3
21838: RET
// export function ScanBase ( side , base_area ) ; begin
21839: LD_INT 0
21841: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21842: LD_ADDR_VAR 0 3
21846: PUSH
21847: LD_VAR 0 2
21851: PPUSH
21852: LD_INT 81
21854: PUSH
21855: LD_VAR 0 1
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PPUSH
21864: CALL_OW 70
21868: ST_TO_ADDR
// end ;
21869: LD_VAR 0 3
21873: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21874: LD_INT 0
21876: PPUSH
21877: PPUSH
21878: PPUSH
21879: PPUSH
// result := false ;
21880: LD_ADDR_VAR 0 2
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// side := GetSide ( unit ) ;
21888: LD_ADDR_VAR 0 3
21892: PUSH
21893: LD_VAR 0 1
21897: PPUSH
21898: CALL_OW 255
21902: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21903: LD_ADDR_VAR 0 4
21907: PUSH
21908: LD_VAR 0 1
21912: PPUSH
21913: CALL_OW 248
21917: ST_TO_ADDR
// case nat of 1 :
21918: LD_VAR 0 4
21922: PUSH
21923: LD_INT 1
21925: DOUBLE
21926: EQUAL
21927: IFTRUE 21931
21929: GO 21942
21931: POP
// tech := tech_lassight ; 2 :
21932: LD_ADDR_VAR 0 5
21936: PUSH
21937: LD_INT 12
21939: ST_TO_ADDR
21940: GO 21981
21942: LD_INT 2
21944: DOUBLE
21945: EQUAL
21946: IFTRUE 21950
21948: GO 21961
21950: POP
// tech := tech_mortar ; 3 :
21951: LD_ADDR_VAR 0 5
21955: PUSH
21956: LD_INT 41
21958: ST_TO_ADDR
21959: GO 21981
21961: LD_INT 3
21963: DOUBLE
21964: EQUAL
21965: IFTRUE 21969
21967: GO 21980
21969: POP
// tech := tech_bazooka ; end ;
21970: LD_ADDR_VAR 0 5
21974: PUSH
21975: LD_INT 44
21977: ST_TO_ADDR
21978: GO 21981
21980: POP
// if Researched ( side , tech ) then
21981: LD_VAR 0 3
21985: PPUSH
21986: LD_VAR 0 5
21990: PPUSH
21991: CALL_OW 325
21995: IFFALSE 22022
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21997: LD_ADDR_VAR 0 2
22001: PUSH
22002: LD_INT 5
22004: PUSH
22005: LD_INT 8
22007: PUSH
22008: LD_INT 9
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: LIST
22015: PUSH
22016: LD_VAR 0 4
22020: ARRAY
22021: ST_TO_ADDR
// end ;
22022: LD_VAR 0 2
22026: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22027: LD_INT 0
22029: PPUSH
22030: PPUSH
22031: PPUSH
// if not mines then
22032: LD_VAR 0 2
22036: NOT
22037: IFFALSE 22041
// exit ;
22039: GO 22185
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22041: LD_ADDR_VAR 0 5
22045: PUSH
22046: LD_INT 81
22048: PUSH
22049: LD_VAR 0 1
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 3
22060: PUSH
22061: LD_INT 21
22063: PUSH
22064: LD_INT 3
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PPUSH
22079: CALL_OW 69
22083: ST_TO_ADDR
// for i in mines do
22084: LD_ADDR_VAR 0 4
22088: PUSH
22089: LD_VAR 0 2
22093: PUSH
22094: FOR_IN
22095: IFFALSE 22183
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22097: LD_VAR 0 4
22101: PUSH
22102: LD_INT 1
22104: ARRAY
22105: PPUSH
22106: LD_VAR 0 4
22110: PUSH
22111: LD_INT 2
22113: ARRAY
22114: PPUSH
22115: CALL_OW 458
22119: NOT
22120: IFFALSE 22124
// continue ;
22122: GO 22094
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22124: LD_VAR 0 4
22128: PUSH
22129: LD_INT 1
22131: ARRAY
22132: PPUSH
22133: LD_VAR 0 4
22137: PUSH
22138: LD_INT 2
22140: ARRAY
22141: PPUSH
22142: CALL_OW 428
22146: PUSH
22147: LD_VAR 0 5
22151: IN
22152: IFFALSE 22181
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22154: LD_VAR 0 4
22158: PUSH
22159: LD_INT 1
22161: ARRAY
22162: PPUSH
22163: LD_VAR 0 4
22167: PUSH
22168: LD_INT 2
22170: ARRAY
22171: PPUSH
22172: LD_VAR 0 1
22176: PPUSH
22177: CALL_OW 456
// end ;
22181: GO 22094
22183: POP
22184: POP
// end ;
22185: LD_VAR 0 3
22189: RET
// export function Count ( array ) ; var i ; begin
22190: LD_INT 0
22192: PPUSH
22193: PPUSH
// result := 0 ;
22194: LD_ADDR_VAR 0 2
22198: PUSH
22199: LD_INT 0
22201: ST_TO_ADDR
// for i in array do
22202: LD_ADDR_VAR 0 3
22206: PUSH
22207: LD_VAR 0 1
22211: PUSH
22212: FOR_IN
22213: IFFALSE 22237
// if i then
22215: LD_VAR 0 3
22219: IFFALSE 22235
// result := result + 1 ;
22221: LD_ADDR_VAR 0 2
22225: PUSH
22226: LD_VAR 0 2
22230: PUSH
22231: LD_INT 1
22233: PLUS
22234: ST_TO_ADDR
22235: GO 22212
22237: POP
22238: POP
// end ;
22239: LD_VAR 0 2
22243: RET
// export function IsEmpty ( building ) ; begin
22244: LD_INT 0
22246: PPUSH
// if not building then
22247: LD_VAR 0 1
22251: NOT
22252: IFFALSE 22256
// exit ;
22254: GO 22299
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22256: LD_ADDR_VAR 0 2
22260: PUSH
22261: LD_VAR 0 1
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_VAR 0 1
22273: PPUSH
22274: CALL_OW 255
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 58
22285: PUSH
22286: EMPTY
22287: LIST
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PPUSH
22293: CALL_OW 69
22297: IN
22298: ST_TO_ADDR
// end ;
22299: LD_VAR 0 2
22303: RET
// export function IsNotFull ( building ) ; var places ; begin
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
// if not building then
22308: LD_VAR 0 1
22312: NOT
22313: IFFALSE 22317
// exit ;
22315: GO 22488
// result := false ;
22317: LD_ADDR_VAR 0 2
22321: PUSH
22322: LD_INT 0
22324: ST_TO_ADDR
// places := 0 ;
22325: LD_ADDR_VAR 0 3
22329: PUSH
22330: LD_INT 0
22332: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
22333: LD_VAR 0 1
22337: PPUSH
22338: CALL_OW 266
22342: PUSH
22343: LD_INT 0
22345: DOUBLE
22346: EQUAL
22347: IFTRUE 22405
22349: LD_INT 1
22351: DOUBLE
22352: EQUAL
22353: IFTRUE 22405
22355: LD_INT 6
22357: DOUBLE
22358: EQUAL
22359: IFTRUE 22405
22361: LD_INT 7
22363: DOUBLE
22364: EQUAL
22365: IFTRUE 22405
22367: LD_INT 8
22369: DOUBLE
22370: EQUAL
22371: IFTRUE 22405
22373: LD_INT 4
22375: DOUBLE
22376: EQUAL
22377: IFTRUE 22405
22379: LD_INT 5
22381: DOUBLE
22382: EQUAL
22383: IFTRUE 22405
22385: LD_INT 2
22387: DOUBLE
22388: EQUAL
22389: IFTRUE 22405
22391: LD_INT 3
22393: DOUBLE
22394: EQUAL
22395: IFTRUE 22405
22397: LD_INT 35
22399: DOUBLE
22400: EQUAL
22401: IFTRUE 22405
22403: GO 22416
22405: POP
// places := 6 ; b_bunker , b_breastwork :
22406: LD_ADDR_VAR 0 3
22410: PUSH
22411: LD_INT 6
22413: ST_TO_ADDR
22414: GO 22461
22416: LD_INT 32
22418: DOUBLE
22419: EQUAL
22420: IFTRUE 22430
22422: LD_INT 31
22424: DOUBLE
22425: EQUAL
22426: IFTRUE 22430
22428: GO 22441
22430: POP
// places := 1 ; b_control_tower :
22431: LD_ADDR_VAR 0 3
22435: PUSH
22436: LD_INT 1
22438: ST_TO_ADDR
22439: GO 22461
22441: LD_INT 36
22443: DOUBLE
22444: EQUAL
22445: IFTRUE 22449
22447: GO 22460
22449: POP
// places := 3 ; end ;
22450: LD_ADDR_VAR 0 3
22454: PUSH
22455: LD_INT 3
22457: ST_TO_ADDR
22458: GO 22461
22460: POP
// if places then
22461: LD_VAR 0 3
22465: IFFALSE 22488
// result := UnitsInside ( building ) < places ;
22467: LD_ADDR_VAR 0 2
22471: PUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 313
22481: PUSH
22482: LD_VAR 0 3
22486: LESS
22487: ST_TO_ADDR
// end ;
22488: LD_VAR 0 2
22492: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22493: LD_INT 0
22495: PPUSH
22496: PPUSH
22497: PPUSH
22498: PPUSH
// tmp := [ ] ;
22499: LD_ADDR_VAR 0 3
22503: PUSH
22504: EMPTY
22505: ST_TO_ADDR
// list := [ ] ;
22506: LD_ADDR_VAR 0 5
22510: PUSH
22511: EMPTY
22512: ST_TO_ADDR
// for i = 16 to 25 do
22513: LD_ADDR_VAR 0 4
22517: PUSH
22518: DOUBLE
22519: LD_INT 16
22521: DEC
22522: ST_TO_ADDR
22523: LD_INT 25
22525: PUSH
22526: FOR_TO
22527: IFFALSE 22600
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22529: LD_ADDR_VAR 0 3
22533: PUSH
22534: LD_VAR 0 3
22538: PUSH
22539: LD_INT 22
22541: PUSH
22542: LD_VAR 0 1
22546: PPUSH
22547: CALL_OW 255
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 91
22558: PUSH
22559: LD_VAR 0 1
22563: PUSH
22564: LD_INT 6
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 30
22574: PUSH
22575: LD_VAR 0 4
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: PPUSH
22592: CALL_OW 69
22596: ADD
22597: ST_TO_ADDR
22598: GO 22526
22600: POP
22601: POP
// for i = 1 to tmp do
22602: LD_ADDR_VAR 0 4
22606: PUSH
22607: DOUBLE
22608: LD_INT 1
22610: DEC
22611: ST_TO_ADDR
22612: LD_VAR 0 3
22616: PUSH
22617: FOR_TO
22618: IFFALSE 22706
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22620: LD_ADDR_VAR 0 5
22624: PUSH
22625: LD_VAR 0 5
22629: PUSH
22630: LD_VAR 0 3
22634: PUSH
22635: LD_VAR 0 4
22639: ARRAY
22640: PPUSH
22641: CALL_OW 266
22645: PUSH
22646: LD_VAR 0 3
22650: PUSH
22651: LD_VAR 0 4
22655: ARRAY
22656: PPUSH
22657: CALL_OW 250
22661: PUSH
22662: LD_VAR 0 3
22666: PUSH
22667: LD_VAR 0 4
22671: ARRAY
22672: PPUSH
22673: CALL_OW 251
22677: PUSH
22678: LD_VAR 0 3
22682: PUSH
22683: LD_VAR 0 4
22687: ARRAY
22688: PPUSH
22689: CALL_OW 254
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: PUSH
22700: EMPTY
22701: LIST
22702: ADD
22703: ST_TO_ADDR
22704: GO 22617
22706: POP
22707: POP
// result := list ;
22708: LD_ADDR_VAR 0 2
22712: PUSH
22713: LD_VAR 0 5
22717: ST_TO_ADDR
// end ;
22718: LD_VAR 0 2
22722: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22723: LD_INT 0
22725: PPUSH
22726: PPUSH
22727: PPUSH
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
// if not factory then
22732: LD_VAR 0 1
22736: NOT
22737: IFFALSE 22741
// exit ;
22739: GO 23334
// if control = control_apeman then
22741: LD_VAR 0 4
22745: PUSH
22746: LD_INT 5
22748: EQUAL
22749: IFFALSE 22858
// begin tmp := UnitsInside ( factory ) ;
22751: LD_ADDR_VAR 0 8
22755: PUSH
22756: LD_VAR 0 1
22760: PPUSH
22761: CALL_OW 313
22765: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22766: LD_VAR 0 8
22770: PPUSH
22771: LD_INT 25
22773: PUSH
22774: LD_INT 12
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PPUSH
22781: CALL_OW 72
22785: NOT
22786: IFFALSE 22796
// control := control_manual ;
22788: LD_ADDR_VAR 0 4
22792: PUSH
22793: LD_INT 1
22795: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22796: LD_ADDR_VAR 0 8
22800: PUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL 22493 0 1
22810: ST_TO_ADDR
// if tmp then
22811: LD_VAR 0 8
22815: IFFALSE 22858
// begin for i in tmp do
22817: LD_ADDR_VAR 0 7
22821: PUSH
22822: LD_VAR 0 8
22826: PUSH
22827: FOR_IN
22828: IFFALSE 22856
// if i [ 1 ] = b_ext_radio then
22830: LD_VAR 0 7
22834: PUSH
22835: LD_INT 1
22837: ARRAY
22838: PUSH
22839: LD_INT 22
22841: EQUAL
22842: IFFALSE 22854
// begin control := control_remote ;
22844: LD_ADDR_VAR 0 4
22848: PUSH
22849: LD_INT 2
22851: ST_TO_ADDR
// break ;
22852: GO 22856
// end ;
22854: GO 22827
22856: POP
22857: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22858: LD_VAR 0 1
22862: PPUSH
22863: LD_VAR 0 2
22867: PPUSH
22868: LD_VAR 0 3
22872: PPUSH
22873: LD_VAR 0 4
22877: PPUSH
22878: LD_VAR 0 5
22882: PPUSH
22883: CALL_OW 448
22887: IFFALSE 22922
// begin result := [ chassis , engine , control , weapon ] ;
22889: LD_ADDR_VAR 0 6
22893: PUSH
22894: LD_VAR 0 2
22898: PUSH
22899: LD_VAR 0 3
22903: PUSH
22904: LD_VAR 0 4
22908: PUSH
22909: LD_VAR 0 5
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: ST_TO_ADDR
// exit ;
22920: GO 23334
// end ; _chassis := AvailableChassisList ( factory ) ;
22922: LD_ADDR_VAR 0 9
22926: PUSH
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL_OW 475
22936: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22937: LD_ADDR_VAR 0 11
22941: PUSH
22942: LD_VAR 0 1
22946: PPUSH
22947: CALL_OW 476
22951: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22952: LD_ADDR_VAR 0 12
22956: PUSH
22957: LD_VAR 0 1
22961: PPUSH
22962: CALL_OW 477
22966: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22967: LD_ADDR_VAR 0 10
22971: PUSH
22972: LD_VAR 0 1
22976: PPUSH
22977: CALL_OW 478
22981: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22982: LD_VAR 0 9
22986: NOT
22987: PUSH
22988: LD_VAR 0 11
22992: NOT
22993: OR
22994: PUSH
22995: LD_VAR 0 12
22999: NOT
23000: OR
23001: PUSH
23002: LD_VAR 0 10
23006: NOT
23007: OR
23008: IFFALSE 23043
// begin result := [ chassis , engine , control , weapon ] ;
23010: LD_ADDR_VAR 0 6
23014: PUSH
23015: LD_VAR 0 2
23019: PUSH
23020: LD_VAR 0 3
23024: PUSH
23025: LD_VAR 0 4
23029: PUSH
23030: LD_VAR 0 5
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: ST_TO_ADDR
// exit ;
23041: GO 23334
// end ; if not chassis in _chassis then
23043: LD_VAR 0 2
23047: PUSH
23048: LD_VAR 0 9
23052: IN
23053: NOT
23054: IFFALSE 23080
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23056: LD_ADDR_VAR 0 2
23060: PUSH
23061: LD_VAR 0 9
23065: PUSH
23066: LD_INT 1
23068: PPUSH
23069: LD_VAR 0 9
23073: PPUSH
23074: CALL_OW 12
23078: ARRAY
23079: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23080: LD_VAR 0 2
23084: PPUSH
23085: LD_VAR 0 3
23089: PPUSH
23090: CALL 23339 0 2
23094: NOT
23095: IFFALSE 23154
// repeat engine := _engine [ 1 ] ;
23097: LD_ADDR_VAR 0 3
23101: PUSH
23102: LD_VAR 0 11
23106: PUSH
23107: LD_INT 1
23109: ARRAY
23110: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23111: LD_ADDR_VAR 0 11
23115: PUSH
23116: LD_VAR 0 11
23120: PPUSH
23121: LD_INT 1
23123: PPUSH
23124: CALL_OW 3
23128: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23129: LD_VAR 0 2
23133: PPUSH
23134: LD_VAR 0 3
23138: PPUSH
23139: CALL 23339 0 2
23143: PUSH
23144: LD_VAR 0 11
23148: PUSH
23149: EMPTY
23150: EQUAL
23151: OR
23152: IFFALSE 23097
// if not control in _control then
23154: LD_VAR 0 4
23158: PUSH
23159: LD_VAR 0 12
23163: IN
23164: NOT
23165: IFFALSE 23191
// control := _control [ rand ( 1 , _control ) ] ;
23167: LD_ADDR_VAR 0 4
23171: PUSH
23172: LD_VAR 0 12
23176: PUSH
23177: LD_INT 1
23179: PPUSH
23180: LD_VAR 0 12
23184: PPUSH
23185: CALL_OW 12
23189: ARRAY
23190: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23191: LD_VAR 0 2
23195: PPUSH
23196: LD_VAR 0 5
23200: PPUSH
23201: CALL 23559 0 2
23205: NOT
23206: IFFALSE 23265
// repeat weapon := _weapon [ 1 ] ;
23208: LD_ADDR_VAR 0 5
23212: PUSH
23213: LD_VAR 0 10
23217: PUSH
23218: LD_INT 1
23220: ARRAY
23221: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23222: LD_ADDR_VAR 0 10
23226: PUSH
23227: LD_VAR 0 10
23231: PPUSH
23232: LD_INT 1
23234: PPUSH
23235: CALL_OW 3
23239: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23240: LD_VAR 0 2
23244: PPUSH
23245: LD_VAR 0 5
23249: PPUSH
23250: CALL 23559 0 2
23254: PUSH
23255: LD_VAR 0 10
23259: PUSH
23260: EMPTY
23261: EQUAL
23262: OR
23263: IFFALSE 23208
// result := [ ] ;
23265: LD_ADDR_VAR 0 6
23269: PUSH
23270: EMPTY
23271: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23272: LD_VAR 0 1
23276: PPUSH
23277: LD_VAR 0 2
23281: PPUSH
23282: LD_VAR 0 3
23286: PPUSH
23287: LD_VAR 0 4
23291: PPUSH
23292: LD_VAR 0 5
23296: PPUSH
23297: CALL_OW 448
23301: IFFALSE 23334
// result := [ chassis , engine , control , weapon ] ;
23303: LD_ADDR_VAR 0 6
23307: PUSH
23308: LD_VAR 0 2
23312: PUSH
23313: LD_VAR 0 3
23317: PUSH
23318: LD_VAR 0 4
23322: PUSH
23323: LD_VAR 0 5
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: ST_TO_ADDR
// end ;
23334: LD_VAR 0 6
23338: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23339: LD_INT 0
23341: PPUSH
// if not chassis or not engine then
23342: LD_VAR 0 1
23346: NOT
23347: PUSH
23348: LD_VAR 0 2
23352: NOT
23353: OR
23354: IFFALSE 23358
// exit ;
23356: GO 23554
// case engine of engine_solar :
23358: LD_VAR 0 2
23362: PUSH
23363: LD_INT 2
23365: DOUBLE
23366: EQUAL
23367: IFTRUE 23371
23369: GO 23409
23371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23372: LD_ADDR_VAR 0 3
23376: PUSH
23377: LD_INT 11
23379: PUSH
23380: LD_INT 12
23382: PUSH
23383: LD_INT 13
23385: PUSH
23386: LD_INT 14
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: LD_INT 3
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: ST_TO_ADDR
23407: GO 23538
23409: LD_INT 1
23411: DOUBLE
23412: EQUAL
23413: IFTRUE 23417
23415: GO 23479
23417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23418: LD_ADDR_VAR 0 3
23422: PUSH
23423: LD_INT 11
23425: PUSH
23426: LD_INT 12
23428: PUSH
23429: LD_INT 13
23431: PUSH
23432: LD_INT 14
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: LD_INT 2
23440: PUSH
23441: LD_INT 3
23443: PUSH
23444: LD_INT 4
23446: PUSH
23447: LD_INT 5
23449: PUSH
23450: LD_INT 21
23452: PUSH
23453: LD_INT 23
23455: PUSH
23456: LD_INT 22
23458: PUSH
23459: LD_INT 24
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: ST_TO_ADDR
23477: GO 23538
23479: LD_INT 3
23481: DOUBLE
23482: EQUAL
23483: IFTRUE 23487
23485: GO 23537
23487: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23488: LD_ADDR_VAR 0 3
23492: PUSH
23493: LD_INT 13
23495: PUSH
23496: LD_INT 14
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: LD_INT 3
23504: PUSH
23505: LD_INT 4
23507: PUSH
23508: LD_INT 5
23510: PUSH
23511: LD_INT 21
23513: PUSH
23514: LD_INT 22
23516: PUSH
23517: LD_INT 23
23519: PUSH
23520: LD_INT 24
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: ST_TO_ADDR
23535: GO 23538
23537: POP
// result := ( chassis in result ) ;
23538: LD_ADDR_VAR 0 3
23542: PUSH
23543: LD_VAR 0 1
23547: PUSH
23548: LD_VAR 0 3
23552: IN
23553: ST_TO_ADDR
// end ;
23554: LD_VAR 0 3
23558: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23559: LD_INT 0
23561: PPUSH
// if not chassis or not weapon then
23562: LD_VAR 0 1
23566: NOT
23567: PUSH
23568: LD_VAR 0 2
23572: NOT
23573: OR
23574: IFFALSE 23578
// exit ;
23576: GO 24638
// case weapon of us_machine_gun :
23578: LD_VAR 0 2
23582: PUSH
23583: LD_INT 2
23585: DOUBLE
23586: EQUAL
23587: IFTRUE 23591
23589: GO 23621
23591: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23592: LD_ADDR_VAR 0 3
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: LD_INT 3
23605: PUSH
23606: LD_INT 4
23608: PUSH
23609: LD_INT 5
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: ST_TO_ADDR
23619: GO 24622
23621: LD_INT 3
23623: DOUBLE
23624: EQUAL
23625: IFTRUE 23629
23627: GO 23659
23629: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23630: LD_ADDR_VAR 0 3
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 3
23643: PUSH
23644: LD_INT 4
23646: PUSH
23647: LD_INT 5
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: ST_TO_ADDR
23657: GO 24622
23659: LD_INT 11
23661: DOUBLE
23662: EQUAL
23663: IFTRUE 23667
23665: GO 23697
23667: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23668: LD_ADDR_VAR 0 3
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: LD_INT 2
23678: PUSH
23679: LD_INT 3
23681: PUSH
23682: LD_INT 4
23684: PUSH
23685: LD_INT 5
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: ST_TO_ADDR
23695: GO 24622
23697: LD_INT 4
23699: DOUBLE
23700: EQUAL
23701: IFTRUE 23705
23703: GO 23731
23705: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23706: LD_ADDR_VAR 0 3
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: LD_INT 4
23719: PUSH
23720: LD_INT 5
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: ST_TO_ADDR
23729: GO 24622
23731: LD_INT 5
23733: DOUBLE
23734: EQUAL
23735: IFTRUE 23739
23737: GO 23765
23739: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23740: LD_ADDR_VAR 0 3
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: LD_INT 3
23750: PUSH
23751: LD_INT 4
23753: PUSH
23754: LD_INT 5
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: ST_TO_ADDR
23763: GO 24622
23765: LD_INT 9
23767: DOUBLE
23768: EQUAL
23769: IFTRUE 23773
23771: GO 23799
23773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23774: LD_ADDR_VAR 0 3
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: LD_INT 3
23784: PUSH
23785: LD_INT 4
23787: PUSH
23788: LD_INT 5
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: ST_TO_ADDR
23797: GO 24622
23799: LD_INT 7
23801: DOUBLE
23802: EQUAL
23803: IFTRUE 23807
23805: GO 23833
23807: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23808: LD_ADDR_VAR 0 3
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 3
23818: PUSH
23819: LD_INT 4
23821: PUSH
23822: LD_INT 5
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: ST_TO_ADDR
23831: GO 24622
23833: LD_INT 12
23835: DOUBLE
23836: EQUAL
23837: IFTRUE 23841
23839: GO 23867
23841: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23842: LD_ADDR_VAR 0 3
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 3
23852: PUSH
23853: LD_INT 4
23855: PUSH
23856: LD_INT 5
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: ST_TO_ADDR
23865: GO 24622
23867: LD_INT 13
23869: DOUBLE
23870: EQUAL
23871: IFTRUE 23875
23873: GO 23901
23875: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23876: LD_ADDR_VAR 0 3
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: LD_INT 3
23886: PUSH
23887: LD_INT 4
23889: PUSH
23890: LD_INT 5
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: ST_TO_ADDR
23899: GO 24622
23901: LD_INT 14
23903: DOUBLE
23904: EQUAL
23905: IFTRUE 23909
23907: GO 23927
23909: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23910: LD_ADDR_VAR 0 3
23914: PUSH
23915: LD_INT 4
23917: PUSH
23918: LD_INT 5
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: ST_TO_ADDR
23925: GO 24622
23927: LD_INT 6
23929: DOUBLE
23930: EQUAL
23931: IFTRUE 23935
23933: GO 23953
23935: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23936: LD_ADDR_VAR 0 3
23940: PUSH
23941: LD_INT 4
23943: PUSH
23944: LD_INT 5
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: ST_TO_ADDR
23951: GO 24622
23953: LD_INT 10
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 23979
23961: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23962: LD_ADDR_VAR 0 3
23966: PUSH
23967: LD_INT 4
23969: PUSH
23970: LD_INT 5
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: ST_TO_ADDR
23977: GO 24622
23979: LD_INT 22
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 24013
23987: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23988: LD_ADDR_VAR 0 3
23992: PUSH
23993: LD_INT 11
23995: PUSH
23996: LD_INT 12
23998: PUSH
23999: LD_INT 13
24001: PUSH
24002: LD_INT 14
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: ST_TO_ADDR
24011: GO 24622
24013: LD_INT 23
24015: DOUBLE
24016: EQUAL
24017: IFTRUE 24021
24019: GO 24047
24021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24022: LD_ADDR_VAR 0 3
24026: PUSH
24027: LD_INT 11
24029: PUSH
24030: LD_INT 12
24032: PUSH
24033: LD_INT 13
24035: PUSH
24036: LD_INT 14
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: ST_TO_ADDR
24045: GO 24622
24047: LD_INT 24
24049: DOUBLE
24050: EQUAL
24051: IFTRUE 24055
24053: GO 24081
24055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24056: LD_ADDR_VAR 0 3
24060: PUSH
24061: LD_INT 11
24063: PUSH
24064: LD_INT 12
24066: PUSH
24067: LD_INT 13
24069: PUSH
24070: LD_INT 14
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: ST_TO_ADDR
24079: GO 24622
24081: LD_INT 30
24083: DOUBLE
24084: EQUAL
24085: IFTRUE 24089
24087: GO 24115
24089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24090: LD_ADDR_VAR 0 3
24094: PUSH
24095: LD_INT 11
24097: PUSH
24098: LD_INT 12
24100: PUSH
24101: LD_INT 13
24103: PUSH
24104: LD_INT 14
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: ST_TO_ADDR
24113: GO 24622
24115: LD_INT 25
24117: DOUBLE
24118: EQUAL
24119: IFTRUE 24123
24121: GO 24141
24123: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24124: LD_ADDR_VAR 0 3
24128: PUSH
24129: LD_INT 13
24131: PUSH
24132: LD_INT 14
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: ST_TO_ADDR
24139: GO 24622
24141: LD_INT 27
24143: DOUBLE
24144: EQUAL
24145: IFTRUE 24149
24147: GO 24167
24149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24150: LD_ADDR_VAR 0 3
24154: PUSH
24155: LD_INT 13
24157: PUSH
24158: LD_INT 14
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: ST_TO_ADDR
24165: GO 24622
24167: LD_INT 92
24169: DOUBLE
24170: EQUAL
24171: IFTRUE 24175
24173: GO 24201
24175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24176: LD_ADDR_VAR 0 3
24180: PUSH
24181: LD_INT 11
24183: PUSH
24184: LD_INT 12
24186: PUSH
24187: LD_INT 13
24189: PUSH
24190: LD_INT 14
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: ST_TO_ADDR
24199: GO 24622
24201: LD_INT 28
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24227
24209: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24210: LD_ADDR_VAR 0 3
24214: PUSH
24215: LD_INT 13
24217: PUSH
24218: LD_INT 14
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: ST_TO_ADDR
24225: GO 24622
24227: LD_INT 29
24229: DOUBLE
24230: EQUAL
24231: IFTRUE 24235
24233: GO 24253
24235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24236: LD_ADDR_VAR 0 3
24240: PUSH
24241: LD_INT 13
24243: PUSH
24244: LD_INT 14
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: ST_TO_ADDR
24251: GO 24622
24253: LD_INT 31
24255: DOUBLE
24256: EQUAL
24257: IFTRUE 24261
24259: GO 24279
24261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24262: LD_ADDR_VAR 0 3
24266: PUSH
24267: LD_INT 13
24269: PUSH
24270: LD_INT 14
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: ST_TO_ADDR
24277: GO 24622
24279: LD_INT 26
24281: DOUBLE
24282: EQUAL
24283: IFTRUE 24287
24285: GO 24305
24287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24288: LD_ADDR_VAR 0 3
24292: PUSH
24293: LD_INT 13
24295: PUSH
24296: LD_INT 14
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: ST_TO_ADDR
24303: GO 24622
24305: LD_INT 42
24307: DOUBLE
24308: EQUAL
24309: IFTRUE 24313
24311: GO 24339
24313: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24314: LD_ADDR_VAR 0 3
24318: PUSH
24319: LD_INT 21
24321: PUSH
24322: LD_INT 22
24324: PUSH
24325: LD_INT 23
24327: PUSH
24328: LD_INT 24
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: ST_TO_ADDR
24337: GO 24622
24339: LD_INT 43
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24373
24347: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24348: LD_ADDR_VAR 0 3
24352: PUSH
24353: LD_INT 21
24355: PUSH
24356: LD_INT 22
24358: PUSH
24359: LD_INT 23
24361: PUSH
24362: LD_INT 24
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: ST_TO_ADDR
24371: GO 24622
24373: LD_INT 44
24375: DOUBLE
24376: EQUAL
24377: IFTRUE 24381
24379: GO 24407
24381: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24382: LD_ADDR_VAR 0 3
24386: PUSH
24387: LD_INT 21
24389: PUSH
24390: LD_INT 22
24392: PUSH
24393: LD_INT 23
24395: PUSH
24396: LD_INT 24
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: ST_TO_ADDR
24405: GO 24622
24407: LD_INT 45
24409: DOUBLE
24410: EQUAL
24411: IFTRUE 24415
24413: GO 24441
24415: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24416: LD_ADDR_VAR 0 3
24420: PUSH
24421: LD_INT 21
24423: PUSH
24424: LD_INT 22
24426: PUSH
24427: LD_INT 23
24429: PUSH
24430: LD_INT 24
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: ST_TO_ADDR
24439: GO 24622
24441: LD_INT 49
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24449
24447: GO 24475
24449: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: LD_INT 21
24457: PUSH
24458: LD_INT 22
24460: PUSH
24461: LD_INT 23
24463: PUSH
24464: LD_INT 24
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 24622
24475: LD_INT 51
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24509
24483: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_INT 21
24491: PUSH
24492: LD_INT 22
24494: PUSH
24495: LD_INT 23
24497: PUSH
24498: LD_INT 24
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: ST_TO_ADDR
24507: GO 24622
24509: LD_INT 52
24511: DOUBLE
24512: EQUAL
24513: IFTRUE 24517
24515: GO 24543
24517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24518: LD_ADDR_VAR 0 3
24522: PUSH
24523: LD_INT 21
24525: PUSH
24526: LD_INT 22
24528: PUSH
24529: LD_INT 23
24531: PUSH
24532: LD_INT 24
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: ST_TO_ADDR
24541: GO 24622
24543: LD_INT 53
24545: DOUBLE
24546: EQUAL
24547: IFTRUE 24551
24549: GO 24569
24551: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24552: LD_ADDR_VAR 0 3
24556: PUSH
24557: LD_INT 23
24559: PUSH
24560: LD_INT 24
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: ST_TO_ADDR
24567: GO 24622
24569: LD_INT 46
24571: DOUBLE
24572: EQUAL
24573: IFTRUE 24577
24575: GO 24595
24577: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24578: LD_ADDR_VAR 0 3
24582: PUSH
24583: LD_INT 23
24585: PUSH
24586: LD_INT 24
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: ST_TO_ADDR
24593: GO 24622
24595: LD_INT 47
24597: DOUBLE
24598: EQUAL
24599: IFTRUE 24603
24601: GO 24621
24603: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24604: LD_ADDR_VAR 0 3
24608: PUSH
24609: LD_INT 23
24611: PUSH
24612: LD_INT 24
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: ST_TO_ADDR
24619: GO 24622
24621: POP
// result := ( chassis in result ) ;
24622: LD_ADDR_VAR 0 3
24626: PUSH
24627: LD_VAR 0 1
24631: PUSH
24632: LD_VAR 0 3
24636: IN
24637: ST_TO_ADDR
// end ;
24638: LD_VAR 0 3
24642: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24643: LD_INT 0
24645: PPUSH
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
24650: PPUSH
24651: PPUSH
// result := array ;
24652: LD_ADDR_VAR 0 5
24656: PUSH
24657: LD_VAR 0 1
24661: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24662: LD_VAR 0 1
24666: NOT
24667: PUSH
24668: LD_VAR 0 2
24672: NOT
24673: OR
24674: PUSH
24675: LD_VAR 0 3
24679: NOT
24680: OR
24681: PUSH
24682: LD_VAR 0 2
24686: PUSH
24687: LD_VAR 0 1
24691: GREATER
24692: OR
24693: PUSH
24694: LD_VAR 0 3
24698: PUSH
24699: LD_VAR 0 1
24703: GREATER
24704: OR
24705: IFFALSE 24709
// exit ;
24707: GO 25005
// if direction then
24709: LD_VAR 0 4
24713: IFFALSE 24777
// begin d := 1 ;
24715: LD_ADDR_VAR 0 9
24719: PUSH
24720: LD_INT 1
24722: ST_TO_ADDR
// if i_from > i_to then
24723: LD_VAR 0 2
24727: PUSH
24728: LD_VAR 0 3
24732: GREATER
24733: IFFALSE 24759
// length := ( array - i_from ) + i_to else
24735: LD_ADDR_VAR 0 11
24739: PUSH
24740: LD_VAR 0 1
24744: PUSH
24745: LD_VAR 0 2
24749: MINUS
24750: PUSH
24751: LD_VAR 0 3
24755: PLUS
24756: ST_TO_ADDR
24757: GO 24775
// length := i_to - i_from ;
24759: LD_ADDR_VAR 0 11
24763: PUSH
24764: LD_VAR 0 3
24768: PUSH
24769: LD_VAR 0 2
24773: MINUS
24774: ST_TO_ADDR
// end else
24775: GO 24838
// begin d := - 1 ;
24777: LD_ADDR_VAR 0 9
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: ST_TO_ADDR
// if i_from > i_to then
24786: LD_VAR 0 2
24790: PUSH
24791: LD_VAR 0 3
24795: GREATER
24796: IFFALSE 24816
// length := i_from - i_to else
24798: LD_ADDR_VAR 0 11
24802: PUSH
24803: LD_VAR 0 2
24807: PUSH
24808: LD_VAR 0 3
24812: MINUS
24813: ST_TO_ADDR
24814: GO 24838
// length := ( array - i_to ) + i_from ;
24816: LD_ADDR_VAR 0 11
24820: PUSH
24821: LD_VAR 0 1
24825: PUSH
24826: LD_VAR 0 3
24830: MINUS
24831: PUSH
24832: LD_VAR 0 2
24836: PLUS
24837: ST_TO_ADDR
// end ; if not length then
24838: LD_VAR 0 11
24842: NOT
24843: IFFALSE 24847
// exit ;
24845: GO 25005
// tmp := array ;
24847: LD_ADDR_VAR 0 10
24851: PUSH
24852: LD_VAR 0 1
24856: ST_TO_ADDR
// for i = 1 to length do
24857: LD_ADDR_VAR 0 6
24861: PUSH
24862: DOUBLE
24863: LD_INT 1
24865: DEC
24866: ST_TO_ADDR
24867: LD_VAR 0 11
24871: PUSH
24872: FOR_TO
24873: IFFALSE 24993
// begin for j = 1 to array do
24875: LD_ADDR_VAR 0 7
24879: PUSH
24880: DOUBLE
24881: LD_INT 1
24883: DEC
24884: ST_TO_ADDR
24885: LD_VAR 0 1
24889: PUSH
24890: FOR_TO
24891: IFFALSE 24979
// begin k := j + d ;
24893: LD_ADDR_VAR 0 8
24897: PUSH
24898: LD_VAR 0 7
24902: PUSH
24903: LD_VAR 0 9
24907: PLUS
24908: ST_TO_ADDR
// if k > array then
24909: LD_VAR 0 8
24913: PUSH
24914: LD_VAR 0 1
24918: GREATER
24919: IFFALSE 24929
// k := 1 ;
24921: LD_ADDR_VAR 0 8
24925: PUSH
24926: LD_INT 1
24928: ST_TO_ADDR
// if not k then
24929: LD_VAR 0 8
24933: NOT
24934: IFFALSE 24946
// k := array ;
24936: LD_ADDR_VAR 0 8
24940: PUSH
24941: LD_VAR 0 1
24945: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24946: LD_ADDR_VAR 0 10
24950: PUSH
24951: LD_VAR 0 10
24955: PPUSH
24956: LD_VAR 0 8
24960: PPUSH
24961: LD_VAR 0 1
24965: PUSH
24966: LD_VAR 0 7
24970: ARRAY
24971: PPUSH
24972: CALL_OW 1
24976: ST_TO_ADDR
// end ;
24977: GO 24890
24979: POP
24980: POP
// array := tmp ;
24981: LD_ADDR_VAR 0 1
24985: PUSH
24986: LD_VAR 0 10
24990: ST_TO_ADDR
// end ;
24991: GO 24872
24993: POP
24994: POP
// result := array ;
24995: LD_ADDR_VAR 0 5
24999: PUSH
25000: LD_VAR 0 1
25004: ST_TO_ADDR
// end ;
25005: LD_VAR 0 5
25009: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25010: LD_INT 0
25012: PPUSH
25013: PPUSH
// result := 0 ;
25014: LD_ADDR_VAR 0 3
25018: PUSH
25019: LD_INT 0
25021: ST_TO_ADDR
// if not array or not value in array then
25022: LD_VAR 0 1
25026: NOT
25027: PUSH
25028: LD_VAR 0 2
25032: PUSH
25033: LD_VAR 0 1
25037: IN
25038: NOT
25039: OR
25040: IFFALSE 25044
// exit ;
25042: GO 25098
// for i = 1 to array do
25044: LD_ADDR_VAR 0 4
25048: PUSH
25049: DOUBLE
25050: LD_INT 1
25052: DEC
25053: ST_TO_ADDR
25054: LD_VAR 0 1
25058: PUSH
25059: FOR_TO
25060: IFFALSE 25096
// if value = array [ i ] then
25062: LD_VAR 0 2
25066: PUSH
25067: LD_VAR 0 1
25071: PUSH
25072: LD_VAR 0 4
25076: ARRAY
25077: EQUAL
25078: IFFALSE 25094
// begin result := i ;
25080: LD_ADDR_VAR 0 3
25084: PUSH
25085: LD_VAR 0 4
25089: ST_TO_ADDR
// exit ;
25090: POP
25091: POP
25092: GO 25098
// end ;
25094: GO 25059
25096: POP
25097: POP
// end ;
25098: LD_VAR 0 3
25102: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25103: LD_INT 0
25105: PPUSH
// vc_chassis := chassis ;
25106: LD_ADDR_OWVAR 37
25110: PUSH
25111: LD_VAR 0 1
25115: ST_TO_ADDR
// vc_engine := engine ;
25116: LD_ADDR_OWVAR 39
25120: PUSH
25121: LD_VAR 0 2
25125: ST_TO_ADDR
// vc_control := control ;
25126: LD_ADDR_OWVAR 38
25130: PUSH
25131: LD_VAR 0 3
25135: ST_TO_ADDR
// vc_weapon := weapon ;
25136: LD_ADDR_OWVAR 40
25140: PUSH
25141: LD_VAR 0 4
25145: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25146: LD_ADDR_OWVAR 41
25150: PUSH
25151: LD_VAR 0 5
25155: ST_TO_ADDR
// end ;
25156: LD_VAR 0 6
25160: RET
// export function WantPlant ( unit ) ; var task ; begin
25161: LD_INT 0
25163: PPUSH
25164: PPUSH
// result := false ;
25165: LD_ADDR_VAR 0 2
25169: PUSH
25170: LD_INT 0
25172: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25173: LD_ADDR_VAR 0 3
25177: PUSH
25178: LD_VAR 0 1
25182: PPUSH
25183: CALL_OW 437
25187: ST_TO_ADDR
// if task then
25188: LD_VAR 0 3
25192: IFFALSE 25220
// if task [ 1 ] [ 1 ] = p then
25194: LD_VAR 0 3
25198: PUSH
25199: LD_INT 1
25201: ARRAY
25202: PUSH
25203: LD_INT 1
25205: ARRAY
25206: PUSH
25207: LD_STRING p
25209: EQUAL
25210: IFFALSE 25220
// result := true ;
25212: LD_ADDR_VAR 0 2
25216: PUSH
25217: LD_INT 1
25219: ST_TO_ADDR
// end ;
25220: LD_VAR 0 2
25224: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25225: LD_INT 0
25227: PPUSH
25228: PPUSH
25229: PPUSH
25230: PPUSH
// if pos < 1 then
25231: LD_VAR 0 2
25235: PUSH
25236: LD_INT 1
25238: LESS
25239: IFFALSE 25243
// exit ;
25241: GO 25546
// if pos = 1 then
25243: LD_VAR 0 2
25247: PUSH
25248: LD_INT 1
25250: EQUAL
25251: IFFALSE 25284
// result := Replace ( arr , pos [ 1 ] , value ) else
25253: LD_ADDR_VAR 0 4
25257: PUSH
25258: LD_VAR 0 1
25262: PPUSH
25263: LD_VAR 0 2
25267: PUSH
25268: LD_INT 1
25270: ARRAY
25271: PPUSH
25272: LD_VAR 0 3
25276: PPUSH
25277: CALL_OW 1
25281: ST_TO_ADDR
25282: GO 25546
// begin tmp := arr ;
25284: LD_ADDR_VAR 0 6
25288: PUSH
25289: LD_VAR 0 1
25293: ST_TO_ADDR
// s_arr := [ tmp ] ;
25294: LD_ADDR_VAR 0 7
25298: PUSH
25299: LD_VAR 0 6
25303: PUSH
25304: EMPTY
25305: LIST
25306: ST_TO_ADDR
// for i = 1 to pos - 1 do
25307: LD_ADDR_VAR 0 5
25311: PUSH
25312: DOUBLE
25313: LD_INT 1
25315: DEC
25316: ST_TO_ADDR
25317: LD_VAR 0 2
25321: PUSH
25322: LD_INT 1
25324: MINUS
25325: PUSH
25326: FOR_TO
25327: IFFALSE 25372
// begin tmp := tmp [ pos [ i ] ] ;
25329: LD_ADDR_VAR 0 6
25333: PUSH
25334: LD_VAR 0 6
25338: PUSH
25339: LD_VAR 0 2
25343: PUSH
25344: LD_VAR 0 5
25348: ARRAY
25349: ARRAY
25350: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25351: LD_ADDR_VAR 0 7
25355: PUSH
25356: LD_VAR 0 7
25360: PUSH
25361: LD_VAR 0 6
25365: PUSH
25366: EMPTY
25367: LIST
25368: ADD
25369: ST_TO_ADDR
// end ;
25370: GO 25326
25372: POP
25373: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25374: LD_ADDR_VAR 0 6
25378: PUSH
25379: LD_VAR 0 6
25383: PPUSH
25384: LD_VAR 0 2
25388: PUSH
25389: LD_VAR 0 2
25393: ARRAY
25394: PPUSH
25395: LD_VAR 0 3
25399: PPUSH
25400: CALL_OW 1
25404: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25405: LD_ADDR_VAR 0 7
25409: PUSH
25410: LD_VAR 0 7
25414: PPUSH
25415: LD_VAR 0 7
25419: PPUSH
25420: LD_VAR 0 6
25424: PPUSH
25425: CALL_OW 1
25429: ST_TO_ADDR
// for i = s_arr downto 2 do
25430: LD_ADDR_VAR 0 5
25434: PUSH
25435: DOUBLE
25436: LD_VAR 0 7
25440: INC
25441: ST_TO_ADDR
25442: LD_INT 2
25444: PUSH
25445: FOR_DOWNTO
25446: IFFALSE 25530
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25448: LD_ADDR_VAR 0 6
25452: PUSH
25453: LD_VAR 0 7
25457: PUSH
25458: LD_VAR 0 5
25462: PUSH
25463: LD_INT 1
25465: MINUS
25466: ARRAY
25467: PPUSH
25468: LD_VAR 0 2
25472: PUSH
25473: LD_VAR 0 5
25477: PUSH
25478: LD_INT 1
25480: MINUS
25481: ARRAY
25482: PPUSH
25483: LD_VAR 0 7
25487: PUSH
25488: LD_VAR 0 5
25492: ARRAY
25493: PPUSH
25494: CALL_OW 1
25498: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25499: LD_ADDR_VAR 0 7
25503: PUSH
25504: LD_VAR 0 7
25508: PPUSH
25509: LD_VAR 0 5
25513: PUSH
25514: LD_INT 1
25516: MINUS
25517: PPUSH
25518: LD_VAR 0 6
25522: PPUSH
25523: CALL_OW 1
25527: ST_TO_ADDR
// end ;
25528: GO 25445
25530: POP
25531: POP
// result := s_arr [ 1 ] ;
25532: LD_ADDR_VAR 0 4
25536: PUSH
25537: LD_VAR 0 7
25541: PUSH
25542: LD_INT 1
25544: ARRAY
25545: ST_TO_ADDR
// end ; end ;
25546: LD_VAR 0 4
25550: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25551: LD_INT 0
25553: PPUSH
25554: PPUSH
// if not list then
25555: LD_VAR 0 1
25559: NOT
25560: IFFALSE 25564
// exit ;
25562: GO 25655
// i := list [ pos1 ] ;
25564: LD_ADDR_VAR 0 5
25568: PUSH
25569: LD_VAR 0 1
25573: PUSH
25574: LD_VAR 0 2
25578: ARRAY
25579: ST_TO_ADDR
// if not i then
25580: LD_VAR 0 5
25584: NOT
25585: IFFALSE 25589
// exit ;
25587: GO 25655
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25589: LD_ADDR_VAR 0 1
25593: PUSH
25594: LD_VAR 0 1
25598: PPUSH
25599: LD_VAR 0 2
25603: PPUSH
25604: LD_VAR 0 1
25608: PUSH
25609: LD_VAR 0 3
25613: ARRAY
25614: PPUSH
25615: CALL_OW 1
25619: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25620: LD_ADDR_VAR 0 1
25624: PUSH
25625: LD_VAR 0 1
25629: PPUSH
25630: LD_VAR 0 3
25634: PPUSH
25635: LD_VAR 0 5
25639: PPUSH
25640: CALL_OW 1
25644: ST_TO_ADDR
// result := list ;
25645: LD_ADDR_VAR 0 4
25649: PUSH
25650: LD_VAR 0 1
25654: ST_TO_ADDR
// end ;
25655: LD_VAR 0 4
25659: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25660: LD_INT 0
25662: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25663: LD_ADDR_VAR 0 5
25667: PUSH
25668: LD_VAR 0 1
25672: PPUSH
25673: CALL_OW 250
25677: PPUSH
25678: LD_VAR 0 1
25682: PPUSH
25683: CALL_OW 251
25687: PPUSH
25688: LD_VAR 0 2
25692: PPUSH
25693: LD_VAR 0 3
25697: PPUSH
25698: LD_VAR 0 4
25702: PPUSH
25703: CALL 25713 0 5
25707: ST_TO_ADDR
// end ;
25708: LD_VAR 0 5
25712: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25713: LD_INT 0
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
// if not list then
25719: LD_VAR 0 3
25723: NOT
25724: IFFALSE 25728
// exit ;
25726: GO 26116
// result := [ ] ;
25728: LD_ADDR_VAR 0 6
25732: PUSH
25733: EMPTY
25734: ST_TO_ADDR
// for i in list do
25735: LD_ADDR_VAR 0 7
25739: PUSH
25740: LD_VAR 0 3
25744: PUSH
25745: FOR_IN
25746: IFFALSE 25948
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25748: LD_ADDR_VAR 0 9
25752: PUSH
25753: LD_VAR 0 7
25757: PPUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: LD_VAR 0 2
25767: PPUSH
25768: CALL_OW 297
25772: ST_TO_ADDR
// if not result then
25773: LD_VAR 0 6
25777: NOT
25778: IFFALSE 25804
// result := [ [ i , tmp ] ] else
25780: LD_ADDR_VAR 0 6
25784: PUSH
25785: LD_VAR 0 7
25789: PUSH
25790: LD_VAR 0 9
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: EMPTY
25800: LIST
25801: ST_TO_ADDR
25802: GO 25946
// begin if result [ result ] [ 2 ] < tmp then
25804: LD_VAR 0 6
25808: PUSH
25809: LD_VAR 0 6
25813: ARRAY
25814: PUSH
25815: LD_INT 2
25817: ARRAY
25818: PUSH
25819: LD_VAR 0 9
25823: LESS
25824: IFFALSE 25866
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25826: LD_ADDR_VAR 0 6
25830: PUSH
25831: LD_VAR 0 6
25835: PPUSH
25836: LD_VAR 0 6
25840: PUSH
25841: LD_INT 1
25843: PLUS
25844: PPUSH
25845: LD_VAR 0 7
25849: PUSH
25850: LD_VAR 0 9
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 2
25863: ST_TO_ADDR
25864: GO 25946
// for j = 1 to result do
25866: LD_ADDR_VAR 0 8
25870: PUSH
25871: DOUBLE
25872: LD_INT 1
25874: DEC
25875: ST_TO_ADDR
25876: LD_VAR 0 6
25880: PUSH
25881: FOR_TO
25882: IFFALSE 25944
// begin if tmp < result [ j ] [ 2 ] then
25884: LD_VAR 0 9
25888: PUSH
25889: LD_VAR 0 6
25893: PUSH
25894: LD_VAR 0 8
25898: ARRAY
25899: PUSH
25900: LD_INT 2
25902: ARRAY
25903: LESS
25904: IFFALSE 25942
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25906: LD_ADDR_VAR 0 6
25910: PUSH
25911: LD_VAR 0 6
25915: PPUSH
25916: LD_VAR 0 8
25920: PPUSH
25921: LD_VAR 0 7
25925: PUSH
25926: LD_VAR 0 9
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PPUSH
25935: CALL_OW 2
25939: ST_TO_ADDR
// break ;
25940: GO 25944
// end ; end ;
25942: GO 25881
25944: POP
25945: POP
// end ; end ;
25946: GO 25745
25948: POP
25949: POP
// if result and not asc then
25950: LD_VAR 0 6
25954: PUSH
25955: LD_VAR 0 4
25959: NOT
25960: AND
25961: IFFALSE 26036
// begin tmp := result ;
25963: LD_ADDR_VAR 0 9
25967: PUSH
25968: LD_VAR 0 6
25972: ST_TO_ADDR
// for i = tmp downto 1 do
25973: LD_ADDR_VAR 0 7
25977: PUSH
25978: DOUBLE
25979: LD_VAR 0 9
25983: INC
25984: ST_TO_ADDR
25985: LD_INT 1
25987: PUSH
25988: FOR_DOWNTO
25989: IFFALSE 26034
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25991: LD_ADDR_VAR 0 6
25995: PUSH
25996: LD_VAR 0 6
26000: PPUSH
26001: LD_VAR 0 9
26005: PUSH
26006: LD_VAR 0 7
26010: MINUS
26011: PUSH
26012: LD_INT 1
26014: PLUS
26015: PPUSH
26016: LD_VAR 0 9
26020: PUSH
26021: LD_VAR 0 7
26025: ARRAY
26026: PPUSH
26027: CALL_OW 1
26031: ST_TO_ADDR
26032: GO 25988
26034: POP
26035: POP
// end ; tmp := [ ] ;
26036: LD_ADDR_VAR 0 9
26040: PUSH
26041: EMPTY
26042: ST_TO_ADDR
// if mode then
26043: LD_VAR 0 5
26047: IFFALSE 26116
// begin for i = 1 to result do
26049: LD_ADDR_VAR 0 7
26053: PUSH
26054: DOUBLE
26055: LD_INT 1
26057: DEC
26058: ST_TO_ADDR
26059: LD_VAR 0 6
26063: PUSH
26064: FOR_TO
26065: IFFALSE 26104
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26067: LD_ADDR_VAR 0 9
26071: PUSH
26072: LD_VAR 0 9
26076: PPUSH
26077: LD_VAR 0 7
26081: PPUSH
26082: LD_VAR 0 6
26086: PUSH
26087: LD_VAR 0 7
26091: ARRAY
26092: PUSH
26093: LD_INT 1
26095: ARRAY
26096: PPUSH
26097: CALL_OW 1
26101: ST_TO_ADDR
26102: GO 26064
26104: POP
26105: POP
// result := tmp ;
26106: LD_ADDR_VAR 0 6
26110: PUSH
26111: LD_VAR 0 9
26115: ST_TO_ADDR
// end ; end ;
26116: LD_VAR 0 6
26120: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26121: LD_INT 0
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26129: LD_ADDR_VAR 0 5
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: EMPTY
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: ST_TO_ADDR
// if not x or not y then
26151: LD_VAR 0 2
26155: NOT
26156: PUSH
26157: LD_VAR 0 3
26161: NOT
26162: OR
26163: IFFALSE 26167
// exit ;
26165: GO 27817
// if not range then
26167: LD_VAR 0 4
26171: NOT
26172: IFFALSE 26182
// range := 10 ;
26174: LD_ADDR_VAR 0 4
26178: PUSH
26179: LD_INT 10
26181: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26182: LD_ADDR_VAR 0 8
26186: PUSH
26187: LD_INT 81
26189: PUSH
26190: LD_VAR 0 1
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 92
26201: PUSH
26202: LD_VAR 0 2
26206: PUSH
26207: LD_VAR 0 3
26211: PUSH
26212: LD_VAR 0 4
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 3
26225: PUSH
26226: LD_INT 21
26228: PUSH
26229: LD_INT 3
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 69
26249: ST_TO_ADDR
// if not tmp then
26250: LD_VAR 0 8
26254: NOT
26255: IFFALSE 26259
// exit ;
26257: GO 27817
// for i in tmp do
26259: LD_ADDR_VAR 0 6
26263: PUSH
26264: LD_VAR 0 8
26268: PUSH
26269: FOR_IN
26270: IFFALSE 27792
// begin points := [ 0 , 0 , 0 ] ;
26272: LD_ADDR_VAR 0 9
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: LIST
26290: ST_TO_ADDR
// bpoints := 1 ;
26291: LD_ADDR_VAR 0 10
26295: PUSH
26296: LD_INT 1
26298: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26299: LD_VAR 0 6
26303: PPUSH
26304: CALL_OW 247
26308: PUSH
26309: LD_INT 1
26311: DOUBLE
26312: EQUAL
26313: IFTRUE 26317
26315: GO 26895
26317: POP
// begin if GetClass ( i ) = 1 then
26318: LD_VAR 0 6
26322: PPUSH
26323: CALL_OW 257
26327: PUSH
26328: LD_INT 1
26330: EQUAL
26331: IFFALSE 26352
// points := [ 10 , 5 , 3 ] ;
26333: LD_ADDR_VAR 0 9
26337: PUSH
26338: LD_INT 10
26340: PUSH
26341: LD_INT 5
26343: PUSH
26344: LD_INT 3
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26352: LD_VAR 0 6
26356: PPUSH
26357: CALL_OW 257
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: LD_INT 3
26367: PUSH
26368: LD_INT 4
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: IN
26376: IFFALSE 26397
// points := [ 3 , 2 , 1 ] ;
26378: LD_ADDR_VAR 0 9
26382: PUSH
26383: LD_INT 3
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26397: LD_VAR 0 6
26401: PPUSH
26402: CALL_OW 257
26406: PUSH
26407: LD_INT 5
26409: EQUAL
26410: IFFALSE 26431
// points := [ 130 , 5 , 2 ] ;
26412: LD_ADDR_VAR 0 9
26416: PUSH
26417: LD_INT 130
26419: PUSH
26420: LD_INT 5
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26431: LD_VAR 0 6
26435: PPUSH
26436: CALL_OW 257
26440: PUSH
26441: LD_INT 8
26443: EQUAL
26444: IFFALSE 26465
// points := [ 35 , 35 , 30 ] ;
26446: LD_ADDR_VAR 0 9
26450: PUSH
26451: LD_INT 35
26453: PUSH
26454: LD_INT 35
26456: PUSH
26457: LD_INT 30
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: LIST
26464: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26465: LD_VAR 0 6
26469: PPUSH
26470: CALL_OW 257
26474: PUSH
26475: LD_INT 9
26477: EQUAL
26478: IFFALSE 26499
// points := [ 20 , 55 , 40 ] ;
26480: LD_ADDR_VAR 0 9
26484: PUSH
26485: LD_INT 20
26487: PUSH
26488: LD_INT 55
26490: PUSH
26491: LD_INT 40
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: LIST
26498: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26499: LD_VAR 0 6
26503: PPUSH
26504: CALL_OW 257
26508: PUSH
26509: LD_INT 12
26511: PUSH
26512: LD_INT 16
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: IN
26519: IFFALSE 26540
// points := [ 5 , 3 , 2 ] ;
26521: LD_ADDR_VAR 0 9
26525: PUSH
26526: LD_INT 5
26528: PUSH
26529: LD_INT 3
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26540: LD_VAR 0 6
26544: PPUSH
26545: CALL_OW 257
26549: PUSH
26550: LD_INT 17
26552: EQUAL
26553: IFFALSE 26574
// points := [ 100 , 50 , 75 ] ;
26555: LD_ADDR_VAR 0 9
26559: PUSH
26560: LD_INT 100
26562: PUSH
26563: LD_INT 50
26565: PUSH
26566: LD_INT 75
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: LIST
26573: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26574: LD_VAR 0 6
26578: PPUSH
26579: CALL_OW 257
26583: PUSH
26584: LD_INT 15
26586: EQUAL
26587: IFFALSE 26608
// points := [ 10 , 5 , 3 ] ;
26589: LD_ADDR_VAR 0 9
26593: PUSH
26594: LD_INT 10
26596: PUSH
26597: LD_INT 5
26599: PUSH
26600: LD_INT 3
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26608: LD_VAR 0 6
26612: PPUSH
26613: CALL_OW 257
26617: PUSH
26618: LD_INT 14
26620: EQUAL
26621: IFFALSE 26642
// points := [ 10 , 0 , 0 ] ;
26623: LD_ADDR_VAR 0 9
26627: PUSH
26628: LD_INT 10
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26642: LD_VAR 0 6
26646: PPUSH
26647: CALL_OW 257
26651: PUSH
26652: LD_INT 11
26654: EQUAL
26655: IFFALSE 26676
// points := [ 30 , 10 , 5 ] ;
26657: LD_ADDR_VAR 0 9
26661: PUSH
26662: LD_INT 30
26664: PUSH
26665: LD_INT 10
26667: PUSH
26668: LD_INT 5
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26676: LD_VAR 0 1
26680: PPUSH
26681: LD_INT 5
26683: PPUSH
26684: CALL_OW 321
26688: PUSH
26689: LD_INT 2
26691: EQUAL
26692: IFFALSE 26709
// bpoints := bpoints * 1.8 ;
26694: LD_ADDR_VAR 0 10
26698: PUSH
26699: LD_VAR 0 10
26703: PUSH
26704: LD_REAL  1.80000000000000E+0000
26707: MUL
26708: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26709: LD_VAR 0 6
26713: PPUSH
26714: CALL_OW 257
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 3
26727: PUSH
26728: LD_INT 4
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: IN
26737: PUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: LD_INT 51
26745: PPUSH
26746: CALL_OW 321
26750: PUSH
26751: LD_INT 2
26753: EQUAL
26754: AND
26755: IFFALSE 26772
// bpoints := bpoints * 1.2 ;
26757: LD_ADDR_VAR 0 10
26761: PUSH
26762: LD_VAR 0 10
26766: PUSH
26767: LD_REAL  1.20000000000000E+0000
26770: MUL
26771: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26772: LD_VAR 0 6
26776: PPUSH
26777: CALL_OW 257
26781: PUSH
26782: LD_INT 5
26784: PUSH
26785: LD_INT 7
26787: PUSH
26788: LD_INT 9
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: LIST
26795: IN
26796: PUSH
26797: LD_VAR 0 1
26801: PPUSH
26802: LD_INT 52
26804: PPUSH
26805: CALL_OW 321
26809: PUSH
26810: LD_INT 2
26812: EQUAL
26813: AND
26814: IFFALSE 26831
// bpoints := bpoints * 1.5 ;
26816: LD_ADDR_VAR 0 10
26820: PUSH
26821: LD_VAR 0 10
26825: PUSH
26826: LD_REAL  1.50000000000000E+0000
26829: MUL
26830: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26831: LD_VAR 0 1
26835: PPUSH
26836: LD_INT 66
26838: PPUSH
26839: CALL_OW 321
26843: PUSH
26844: LD_INT 2
26846: EQUAL
26847: IFFALSE 26864
// bpoints := bpoints * 1.1 ;
26849: LD_ADDR_VAR 0 10
26853: PUSH
26854: LD_VAR 0 10
26858: PUSH
26859: LD_REAL  1.10000000000000E+0000
26862: MUL
26863: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26864: LD_ADDR_VAR 0 10
26868: PUSH
26869: LD_VAR 0 10
26873: PUSH
26874: LD_VAR 0 6
26878: PPUSH
26879: LD_INT 1
26881: PPUSH
26882: CALL_OW 259
26886: PUSH
26887: LD_REAL  1.15000000000000E+0000
26890: MUL
26891: MUL
26892: ST_TO_ADDR
// end ; unit_vehicle :
26893: GO 27721
26895: LD_INT 2
26897: DOUBLE
26898: EQUAL
26899: IFTRUE 26903
26901: GO 27709
26903: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26904: LD_VAR 0 6
26908: PPUSH
26909: CALL_OW 264
26913: PUSH
26914: LD_INT 2
26916: PUSH
26917: LD_INT 42
26919: PUSH
26920: LD_INT 24
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: IN
26928: IFFALSE 26949
// points := [ 25 , 5 , 3 ] ;
26930: LD_ADDR_VAR 0 9
26934: PUSH
26935: LD_INT 25
26937: PUSH
26938: LD_INT 5
26940: PUSH
26941: LD_INT 3
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26949: LD_VAR 0 6
26953: PPUSH
26954: CALL_OW 264
26958: PUSH
26959: LD_INT 4
26961: PUSH
26962: LD_INT 43
26964: PUSH
26965: LD_INT 25
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: LIST
26972: IN
26973: IFFALSE 26994
// points := [ 40 , 15 , 5 ] ;
26975: LD_ADDR_VAR 0 9
26979: PUSH
26980: LD_INT 40
26982: PUSH
26983: LD_INT 15
26985: PUSH
26986: LD_INT 5
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26994: LD_VAR 0 6
26998: PPUSH
26999: CALL_OW 264
27003: PUSH
27004: LD_INT 3
27006: PUSH
27007: LD_INT 23
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: IN
27014: IFFALSE 27035
// points := [ 7 , 25 , 8 ] ;
27016: LD_ADDR_VAR 0 9
27020: PUSH
27021: LD_INT 7
27023: PUSH
27024: LD_INT 25
27026: PUSH
27027: LD_INT 8
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: LIST
27034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27035: LD_VAR 0 6
27039: PPUSH
27040: CALL_OW 264
27044: PUSH
27045: LD_INT 5
27047: PUSH
27048: LD_INT 27
27050: PUSH
27051: LD_INT 44
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: LIST
27058: IN
27059: IFFALSE 27080
// points := [ 14 , 50 , 16 ] ;
27061: LD_ADDR_VAR 0 9
27065: PUSH
27066: LD_INT 14
27068: PUSH
27069: LD_INT 50
27071: PUSH
27072: LD_INT 16
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27080: LD_VAR 0 6
27084: PPUSH
27085: CALL_OW 264
27089: PUSH
27090: LD_INT 6
27092: PUSH
27093: LD_INT 46
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: IN
27100: IFFALSE 27121
// points := [ 32 , 120 , 70 ] ;
27102: LD_ADDR_VAR 0 9
27106: PUSH
27107: LD_INT 32
27109: PUSH
27110: LD_INT 120
27112: PUSH
27113: LD_INT 70
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27121: LD_VAR 0 6
27125: PPUSH
27126: CALL_OW 264
27130: PUSH
27131: LD_INT 7
27133: PUSH
27134: LD_INT 28
27136: PUSH
27137: LD_INT 45
27139: PUSH
27140: LD_INT 92
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: IN
27149: IFFALSE 27170
// points := [ 35 , 20 , 45 ] ;
27151: LD_ADDR_VAR 0 9
27155: PUSH
27156: LD_INT 35
27158: PUSH
27159: LD_INT 20
27161: PUSH
27162: LD_INT 45
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27170: LD_VAR 0 6
27174: PPUSH
27175: CALL_OW 264
27179: PUSH
27180: LD_INT 47
27182: PUSH
27183: EMPTY
27184: LIST
27185: IN
27186: IFFALSE 27207
// points := [ 67 , 45 , 75 ] ;
27188: LD_ADDR_VAR 0 9
27192: PUSH
27193: LD_INT 67
27195: PUSH
27196: LD_INT 45
27198: PUSH
27199: LD_INT 75
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: LIST
27206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27207: LD_VAR 0 6
27211: PPUSH
27212: CALL_OW 264
27216: PUSH
27217: LD_INT 26
27219: PUSH
27220: EMPTY
27221: LIST
27222: IN
27223: IFFALSE 27244
// points := [ 120 , 30 , 80 ] ;
27225: LD_ADDR_VAR 0 9
27229: PUSH
27230: LD_INT 120
27232: PUSH
27233: LD_INT 30
27235: PUSH
27236: LD_INT 80
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27244: LD_VAR 0 6
27248: PPUSH
27249: CALL_OW 264
27253: PUSH
27254: LD_INT 22
27256: PUSH
27257: EMPTY
27258: LIST
27259: IN
27260: IFFALSE 27281
// points := [ 40 , 1 , 1 ] ;
27262: LD_ADDR_VAR 0 9
27266: PUSH
27267: LD_INT 40
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27281: LD_VAR 0 6
27285: PPUSH
27286: CALL_OW 264
27290: PUSH
27291: LD_INT 29
27293: PUSH
27294: EMPTY
27295: LIST
27296: IN
27297: IFFALSE 27318
// points := [ 70 , 200 , 400 ] ;
27299: LD_ADDR_VAR 0 9
27303: PUSH
27304: LD_INT 70
27306: PUSH
27307: LD_INT 200
27309: PUSH
27310: LD_INT 400
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: LIST
27317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27318: LD_VAR 0 6
27322: PPUSH
27323: CALL_OW 264
27327: PUSH
27328: LD_INT 14
27330: PUSH
27331: LD_INT 53
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: IN
27338: IFFALSE 27359
// points := [ 40 , 10 , 20 ] ;
27340: LD_ADDR_VAR 0 9
27344: PUSH
27345: LD_INT 40
27347: PUSH
27348: LD_INT 10
27350: PUSH
27351: LD_INT 20
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27359: LD_VAR 0 6
27363: PPUSH
27364: CALL_OW 264
27368: PUSH
27369: LD_INT 9
27371: PUSH
27372: EMPTY
27373: LIST
27374: IN
27375: IFFALSE 27396
// points := [ 5 , 70 , 20 ] ;
27377: LD_ADDR_VAR 0 9
27381: PUSH
27382: LD_INT 5
27384: PUSH
27385: LD_INT 70
27387: PUSH
27388: LD_INT 20
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27396: LD_VAR 0 6
27400: PPUSH
27401: CALL_OW 264
27405: PUSH
27406: LD_INT 10
27408: PUSH
27409: EMPTY
27410: LIST
27411: IN
27412: IFFALSE 27433
// points := [ 35 , 110 , 70 ] ;
27414: LD_ADDR_VAR 0 9
27418: PUSH
27419: LD_INT 35
27421: PUSH
27422: LD_INT 110
27424: PUSH
27425: LD_INT 70
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27433: LD_VAR 0 6
27437: PPUSH
27438: CALL_OW 265
27442: PUSH
27443: LD_INT 25
27445: EQUAL
27446: IFFALSE 27467
// points := [ 80 , 65 , 100 ] ;
27448: LD_ADDR_VAR 0 9
27452: PUSH
27453: LD_INT 80
27455: PUSH
27456: LD_INT 65
27458: PUSH
27459: LD_INT 100
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: LIST
27466: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27467: LD_VAR 0 6
27471: PPUSH
27472: CALL_OW 263
27476: PUSH
27477: LD_INT 1
27479: EQUAL
27480: IFFALSE 27515
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27482: LD_ADDR_VAR 0 10
27486: PUSH
27487: LD_VAR 0 10
27491: PUSH
27492: LD_VAR 0 6
27496: PPUSH
27497: CALL_OW 311
27501: PPUSH
27502: LD_INT 3
27504: PPUSH
27505: CALL_OW 259
27509: PUSH
27510: LD_INT 4
27512: MUL
27513: MUL
27514: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27515: LD_VAR 0 6
27519: PPUSH
27520: CALL_OW 263
27524: PUSH
27525: LD_INT 2
27527: EQUAL
27528: IFFALSE 27579
// begin j := IsControledBy ( i ) ;
27530: LD_ADDR_VAR 0 7
27534: PUSH
27535: LD_VAR 0 6
27539: PPUSH
27540: CALL_OW 312
27544: ST_TO_ADDR
// if j then
27545: LD_VAR 0 7
27549: IFFALSE 27579
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27551: LD_ADDR_VAR 0 10
27555: PUSH
27556: LD_VAR 0 10
27560: PUSH
27561: LD_VAR 0 7
27565: PPUSH
27566: LD_INT 3
27568: PPUSH
27569: CALL_OW 259
27573: PUSH
27574: LD_INT 3
27576: MUL
27577: MUL
27578: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27579: LD_VAR 0 6
27583: PPUSH
27584: CALL_OW 264
27588: PUSH
27589: LD_INT 5
27591: PUSH
27592: LD_INT 6
27594: PUSH
27595: LD_INT 46
27597: PUSH
27598: LD_INT 44
27600: PUSH
27601: LD_INT 47
27603: PUSH
27604: LD_INT 45
27606: PUSH
27607: LD_INT 28
27609: PUSH
27610: LD_INT 7
27612: PUSH
27613: LD_INT 27
27615: PUSH
27616: LD_INT 29
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: IN
27631: PUSH
27632: LD_VAR 0 1
27636: PPUSH
27637: LD_INT 52
27639: PPUSH
27640: CALL_OW 321
27644: PUSH
27645: LD_INT 2
27647: EQUAL
27648: AND
27649: IFFALSE 27666
// bpoints := bpoints * 1.2 ;
27651: LD_ADDR_VAR 0 10
27655: PUSH
27656: LD_VAR 0 10
27660: PUSH
27661: LD_REAL  1.20000000000000E+0000
27664: MUL
27665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27666: LD_VAR 0 6
27670: PPUSH
27671: CALL_OW 264
27675: PUSH
27676: LD_INT 6
27678: PUSH
27679: LD_INT 46
27681: PUSH
27682: LD_INT 47
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: IN
27690: IFFALSE 27707
// bpoints := bpoints * 1.2 ;
27692: LD_ADDR_VAR 0 10
27696: PUSH
27697: LD_VAR 0 10
27701: PUSH
27702: LD_REAL  1.20000000000000E+0000
27705: MUL
27706: ST_TO_ADDR
// end ; unit_building :
27707: GO 27721
27709: LD_INT 3
27711: DOUBLE
27712: EQUAL
27713: IFTRUE 27717
27715: GO 27720
27717: POP
// ; end ;
27718: GO 27721
27720: POP
// for j = 1 to 3 do
27721: LD_ADDR_VAR 0 7
27725: PUSH
27726: DOUBLE
27727: LD_INT 1
27729: DEC
27730: ST_TO_ADDR
27731: LD_INT 3
27733: PUSH
27734: FOR_TO
27735: IFFALSE 27788
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27737: LD_ADDR_VAR 0 5
27741: PUSH
27742: LD_VAR 0 5
27746: PPUSH
27747: LD_VAR 0 7
27751: PPUSH
27752: LD_VAR 0 5
27756: PUSH
27757: LD_VAR 0 7
27761: ARRAY
27762: PUSH
27763: LD_VAR 0 9
27767: PUSH
27768: LD_VAR 0 7
27772: ARRAY
27773: PUSH
27774: LD_VAR 0 10
27778: MUL
27779: PLUS
27780: PPUSH
27781: CALL_OW 1
27785: ST_TO_ADDR
27786: GO 27734
27788: POP
27789: POP
// end ;
27790: GO 26269
27792: POP
27793: POP
// result := Replace ( result , 4 , tmp ) ;
27794: LD_ADDR_VAR 0 5
27798: PUSH
27799: LD_VAR 0 5
27803: PPUSH
27804: LD_INT 4
27806: PPUSH
27807: LD_VAR 0 8
27811: PPUSH
27812: CALL_OW 1
27816: ST_TO_ADDR
// end ;
27817: LD_VAR 0 5
27821: RET
// export function DangerAtRange ( unit , range ) ; begin
27822: LD_INT 0
27824: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27825: LD_ADDR_VAR 0 3
27829: PUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 255
27839: PPUSH
27840: LD_VAR 0 1
27844: PPUSH
27845: CALL_OW 250
27849: PPUSH
27850: LD_VAR 0 1
27854: PPUSH
27855: CALL_OW 251
27859: PPUSH
27860: LD_VAR 0 2
27864: PPUSH
27865: CALL 26121 0 4
27869: ST_TO_ADDR
// end ;
27870: LD_VAR 0 3
27874: RET
// export function DangerInArea ( side , area ) ; begin
27875: LD_INT 0
27877: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27878: LD_ADDR_VAR 0 3
27882: PUSH
27883: LD_VAR 0 2
27887: PPUSH
27888: LD_INT 81
27890: PUSH
27891: LD_VAR 0 1
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PPUSH
27900: CALL_OW 70
27904: ST_TO_ADDR
// end ;
27905: LD_VAR 0 3
27909: RET
// export function IsExtension ( b ) ; begin
27910: LD_INT 0
27912: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27913: LD_ADDR_VAR 0 2
27917: PUSH
27918: LD_VAR 0 1
27922: PUSH
27923: LD_INT 23
27925: PUSH
27926: LD_INT 20
27928: PUSH
27929: LD_INT 22
27931: PUSH
27932: LD_INT 17
27934: PUSH
27935: LD_INT 24
27937: PUSH
27938: LD_INT 21
27940: PUSH
27941: LD_INT 19
27943: PUSH
27944: LD_INT 16
27946: PUSH
27947: LD_INT 25
27949: PUSH
27950: LD_INT 18
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: IN
27965: ST_TO_ADDR
// end ;
27966: LD_VAR 0 2
27970: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27971: LD_INT 0
27973: PPUSH
27974: PPUSH
27975: PPUSH
// result := [ ] ;
27976: LD_ADDR_VAR 0 4
27980: PUSH
27981: EMPTY
27982: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27983: LD_ADDR_VAR 0 5
27987: PUSH
27988: LD_VAR 0 2
27992: PPUSH
27993: LD_INT 21
27995: PUSH
27996: LD_INT 3
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PPUSH
28003: CALL_OW 70
28007: ST_TO_ADDR
// if not tmp then
28008: LD_VAR 0 5
28012: NOT
28013: IFFALSE 28017
// exit ;
28015: GO 28081
// if checkLink then
28017: LD_VAR 0 3
28021: IFFALSE 28071
// begin for i in tmp do
28023: LD_ADDR_VAR 0 6
28027: PUSH
28028: LD_VAR 0 5
28032: PUSH
28033: FOR_IN
28034: IFFALSE 28069
// if GetBase ( i ) <> base then
28036: LD_VAR 0 6
28040: PPUSH
28041: CALL_OW 274
28045: PUSH
28046: LD_VAR 0 1
28050: NONEQUAL
28051: IFFALSE 28067
// ComLinkToBase ( base , i ) ;
28053: LD_VAR 0 1
28057: PPUSH
28058: LD_VAR 0 6
28062: PPUSH
28063: CALL_OW 169
28067: GO 28033
28069: POP
28070: POP
// end ; result := tmp ;
28071: LD_ADDR_VAR 0 4
28075: PUSH
28076: LD_VAR 0 5
28080: ST_TO_ADDR
// end ;
28081: LD_VAR 0 4
28085: RET
// export function ComComplete ( units , b ) ; var i ; begin
28086: LD_INT 0
28088: PPUSH
28089: PPUSH
// if not units then
28090: LD_VAR 0 1
28094: NOT
28095: IFFALSE 28099
// exit ;
28097: GO 28189
// for i in units do
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: LD_VAR 0 1
28108: PUSH
28109: FOR_IN
28110: IFFALSE 28187
// if BuildingStatus ( b ) = bs_build then
28112: LD_VAR 0 2
28116: PPUSH
28117: CALL_OW 461
28121: PUSH
28122: LD_INT 1
28124: EQUAL
28125: IFFALSE 28185
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28127: LD_VAR 0 4
28131: PPUSH
28132: LD_STRING h
28134: PUSH
28135: LD_VAR 0 2
28139: PPUSH
28140: CALL_OW 250
28144: PUSH
28145: LD_VAR 0 2
28149: PPUSH
28150: CALL_OW 251
28154: PUSH
28155: LD_VAR 0 2
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: PPUSH
28181: CALL_OW 446
28185: GO 28109
28187: POP
28188: POP
// end ;
28189: LD_VAR 0 3
28193: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28194: LD_INT 0
28196: PPUSH
28197: PPUSH
28198: PPUSH
28199: PPUSH
28200: PPUSH
28201: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28202: LD_VAR 0 1
28206: NOT
28207: PUSH
28208: LD_VAR 0 1
28212: PPUSH
28213: CALL_OW 263
28217: PUSH
28218: LD_INT 2
28220: NONEQUAL
28221: OR
28222: IFFALSE 28226
// exit ;
28224: GO 28542
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28226: LD_ADDR_VAR 0 6
28230: PUSH
28231: LD_INT 22
28233: PUSH
28234: LD_VAR 0 1
28238: PPUSH
28239: CALL_OW 255
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: LD_INT 30
28253: PUSH
28254: LD_INT 36
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 34
28263: PUSH
28264: LD_INT 31
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PPUSH
28280: CALL_OW 69
28284: ST_TO_ADDR
// if not tmp then
28285: LD_VAR 0 6
28289: NOT
28290: IFFALSE 28294
// exit ;
28292: GO 28542
// result := [ ] ;
28294: LD_ADDR_VAR 0 2
28298: PUSH
28299: EMPTY
28300: ST_TO_ADDR
// for i in tmp do
28301: LD_ADDR_VAR 0 3
28305: PUSH
28306: LD_VAR 0 6
28310: PUSH
28311: FOR_IN
28312: IFFALSE 28383
// begin t := UnitsInside ( i ) ;
28314: LD_ADDR_VAR 0 4
28318: PUSH
28319: LD_VAR 0 3
28323: PPUSH
28324: CALL_OW 313
28328: ST_TO_ADDR
// if t then
28329: LD_VAR 0 4
28333: IFFALSE 28381
// for j in t do
28335: LD_ADDR_VAR 0 7
28339: PUSH
28340: LD_VAR 0 4
28344: PUSH
28345: FOR_IN
28346: IFFALSE 28379
// result := Replace ( result , result + 1 , j ) ;
28348: LD_ADDR_VAR 0 2
28352: PUSH
28353: LD_VAR 0 2
28357: PPUSH
28358: LD_VAR 0 2
28362: PUSH
28363: LD_INT 1
28365: PLUS
28366: PPUSH
28367: LD_VAR 0 7
28371: PPUSH
28372: CALL_OW 1
28376: ST_TO_ADDR
28377: GO 28345
28379: POP
28380: POP
// end ;
28381: GO 28311
28383: POP
28384: POP
// if not result then
28385: LD_VAR 0 2
28389: NOT
28390: IFFALSE 28394
// exit ;
28392: GO 28542
// mech := result [ 1 ] ;
28394: LD_ADDR_VAR 0 5
28398: PUSH
28399: LD_VAR 0 2
28403: PUSH
28404: LD_INT 1
28406: ARRAY
28407: ST_TO_ADDR
// if result > 1 then
28408: LD_VAR 0 2
28412: PUSH
28413: LD_INT 1
28415: GREATER
28416: IFFALSE 28528
// begin for i = 2 to result do
28418: LD_ADDR_VAR 0 3
28422: PUSH
28423: DOUBLE
28424: LD_INT 2
28426: DEC
28427: ST_TO_ADDR
28428: LD_VAR 0 2
28432: PUSH
28433: FOR_TO
28434: IFFALSE 28526
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28436: LD_ADDR_VAR 0 4
28440: PUSH
28441: LD_VAR 0 2
28445: PUSH
28446: LD_VAR 0 3
28450: ARRAY
28451: PPUSH
28452: LD_INT 3
28454: PPUSH
28455: CALL_OW 259
28459: PUSH
28460: LD_VAR 0 2
28464: PUSH
28465: LD_VAR 0 3
28469: ARRAY
28470: PPUSH
28471: CALL_OW 432
28475: MINUS
28476: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28477: LD_VAR 0 4
28481: PUSH
28482: LD_VAR 0 5
28486: PPUSH
28487: LD_INT 3
28489: PPUSH
28490: CALL_OW 259
28494: PUSH
28495: LD_VAR 0 5
28499: PPUSH
28500: CALL_OW 432
28504: MINUS
28505: GREATEREQUAL
28506: IFFALSE 28524
// mech := result [ i ] ;
28508: LD_ADDR_VAR 0 5
28512: PUSH
28513: LD_VAR 0 2
28517: PUSH
28518: LD_VAR 0 3
28522: ARRAY
28523: ST_TO_ADDR
// end ;
28524: GO 28433
28526: POP
28527: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28528: LD_VAR 0 1
28532: PPUSH
28533: LD_VAR 0 5
28537: PPUSH
28538: CALL_OW 135
// end ;
28542: LD_VAR 0 2
28546: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28547: LD_INT 0
28549: PPUSH
28550: PPUSH
28551: PPUSH
28552: PPUSH
28553: PPUSH
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
28560: PPUSH
28561: PPUSH
// result := [ ] ;
28562: LD_ADDR_VAR 0 7
28566: PUSH
28567: EMPTY
28568: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28569: LD_VAR 0 1
28573: PPUSH
28574: CALL_OW 266
28578: PUSH
28579: LD_INT 0
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: IN
28589: NOT
28590: IFFALSE 28594
// exit ;
28592: GO 30228
// if name then
28594: LD_VAR 0 3
28598: IFFALSE 28614
// SetBName ( base_dep , name ) ;
28600: LD_VAR 0 1
28604: PPUSH
28605: LD_VAR 0 3
28609: PPUSH
28610: CALL_OW 500
// base := GetBase ( base_dep ) ;
28614: LD_ADDR_VAR 0 15
28618: PUSH
28619: LD_VAR 0 1
28623: PPUSH
28624: CALL_OW 274
28628: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28629: LD_ADDR_VAR 0 16
28633: PUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 255
28643: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28644: LD_ADDR_VAR 0 17
28648: PUSH
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 248
28658: ST_TO_ADDR
// if sources then
28659: LD_VAR 0 5
28663: IFFALSE 28710
// for i = 1 to 3 do
28665: LD_ADDR_VAR 0 8
28669: PUSH
28670: DOUBLE
28671: LD_INT 1
28673: DEC
28674: ST_TO_ADDR
28675: LD_INT 3
28677: PUSH
28678: FOR_TO
28679: IFFALSE 28708
// AddResourceType ( base , i , sources [ i ] ) ;
28681: LD_VAR 0 15
28685: PPUSH
28686: LD_VAR 0 8
28690: PPUSH
28691: LD_VAR 0 5
28695: PUSH
28696: LD_VAR 0 8
28700: ARRAY
28701: PPUSH
28702: CALL_OW 276
28706: GO 28678
28708: POP
28709: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28710: LD_ADDR_VAR 0 18
28714: PUSH
28715: LD_VAR 0 15
28719: PPUSH
28720: LD_VAR 0 2
28724: PPUSH
28725: LD_INT 1
28727: PPUSH
28728: CALL 27971 0 3
28732: ST_TO_ADDR
// InitHc ;
28733: CALL_OW 19
// InitUc ;
28737: CALL_OW 18
// uc_side := side ;
28741: LD_ADDR_OWVAR 20
28745: PUSH
28746: LD_VAR 0 16
28750: ST_TO_ADDR
// uc_nation := nation ;
28751: LD_ADDR_OWVAR 21
28755: PUSH
28756: LD_VAR 0 17
28760: ST_TO_ADDR
// if buildings then
28761: LD_VAR 0 18
28765: IFFALSE 30087
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28767: LD_ADDR_VAR 0 19
28771: PUSH
28772: LD_VAR 0 18
28776: PPUSH
28777: LD_INT 2
28779: PUSH
28780: LD_INT 30
28782: PUSH
28783: LD_INT 29
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 30
28792: PUSH
28793: LD_INT 30
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: PPUSH
28805: CALL_OW 72
28809: ST_TO_ADDR
// if tmp then
28810: LD_VAR 0 19
28814: IFFALSE 28862
// for i in tmp do
28816: LD_ADDR_VAR 0 8
28820: PUSH
28821: LD_VAR 0 19
28825: PUSH
28826: FOR_IN
28827: IFFALSE 28860
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28829: LD_VAR 0 8
28833: PPUSH
28834: CALL_OW 250
28838: PPUSH
28839: LD_VAR 0 8
28843: PPUSH
28844: CALL_OW 251
28848: PPUSH
28849: LD_VAR 0 16
28853: PPUSH
28854: CALL_OW 441
28858: GO 28826
28860: POP
28861: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28862: LD_VAR 0 18
28866: PPUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 30
28872: PUSH
28873: LD_INT 32
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 30
28882: PUSH
28883: LD_INT 33
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: LIST
28894: PPUSH
28895: CALL_OW 72
28899: IFFALSE 28987
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28901: LD_ADDR_VAR 0 8
28905: PUSH
28906: LD_VAR 0 18
28910: PPUSH
28911: LD_INT 2
28913: PUSH
28914: LD_INT 30
28916: PUSH
28917: LD_INT 32
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 30
28926: PUSH
28927: LD_INT 33
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: PPUSH
28939: CALL_OW 72
28943: PUSH
28944: FOR_IN
28945: IFFALSE 28985
// begin if not GetBWeapon ( i ) then
28947: LD_VAR 0 8
28951: PPUSH
28952: CALL_OW 269
28956: NOT
28957: IFFALSE 28983
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28959: LD_VAR 0 8
28963: PPUSH
28964: LD_VAR 0 8
28968: PPUSH
28969: LD_VAR 0 2
28973: PPUSH
28974: CALL 30233 0 2
28978: PPUSH
28979: CALL_OW 431
// end ;
28983: GO 28944
28985: POP
28986: POP
// end ; for i = 1 to personel do
28987: LD_ADDR_VAR 0 8
28991: PUSH
28992: DOUBLE
28993: LD_INT 1
28995: DEC
28996: ST_TO_ADDR
28997: LD_VAR 0 6
29001: PUSH
29002: FOR_TO
29003: IFFALSE 30067
// begin if i > 4 then
29005: LD_VAR 0 8
29009: PUSH
29010: LD_INT 4
29012: GREATER
29013: IFFALSE 29017
// break ;
29015: GO 30067
// case i of 1 :
29017: LD_VAR 0 8
29021: PUSH
29022: LD_INT 1
29024: DOUBLE
29025: EQUAL
29026: IFTRUE 29030
29028: GO 29110
29030: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29031: LD_ADDR_VAR 0 12
29035: PUSH
29036: LD_VAR 0 18
29040: PPUSH
29041: LD_INT 22
29043: PUSH
29044: LD_VAR 0 16
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 58
29055: PUSH
29056: EMPTY
29057: LIST
29058: PUSH
29059: LD_INT 2
29061: PUSH
29062: LD_INT 30
29064: PUSH
29065: LD_INT 32
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 30
29074: PUSH
29075: LD_INT 4
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 30
29084: PUSH
29085: LD_INT 5
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: PPUSH
29103: CALL_OW 72
29107: ST_TO_ADDR
29108: GO 29332
29110: LD_INT 2
29112: DOUBLE
29113: EQUAL
29114: IFTRUE 29118
29116: GO 29180
29118: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29119: LD_ADDR_VAR 0 12
29123: PUSH
29124: LD_VAR 0 18
29128: PPUSH
29129: LD_INT 22
29131: PUSH
29132: LD_VAR 0 16
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: LD_INT 30
29146: PUSH
29147: LD_INT 0
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 30
29156: PUSH
29157: LD_INT 1
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PPUSH
29173: CALL_OW 72
29177: ST_TO_ADDR
29178: GO 29332
29180: LD_INT 3
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29188
29186: GO 29250
29188: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29189: LD_ADDR_VAR 0 12
29193: PUSH
29194: LD_VAR 0 18
29198: PPUSH
29199: LD_INT 22
29201: PUSH
29202: LD_VAR 0 16
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 2
29213: PUSH
29214: LD_INT 30
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 30
29226: PUSH
29227: LD_INT 3
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PPUSH
29243: CALL_OW 72
29247: ST_TO_ADDR
29248: GO 29332
29250: LD_INT 4
29252: DOUBLE
29253: EQUAL
29254: IFTRUE 29258
29256: GO 29331
29258: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29259: LD_ADDR_VAR 0 12
29263: PUSH
29264: LD_VAR 0 18
29268: PPUSH
29269: LD_INT 22
29271: PUSH
29272: LD_VAR 0 16
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: LD_INT 30
29286: PUSH
29287: LD_INT 6
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 30
29296: PUSH
29297: LD_INT 7
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 30
29306: PUSH
29307: LD_INT 8
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PPUSH
29324: CALL_OW 72
29328: ST_TO_ADDR
29329: GO 29332
29331: POP
// if i = 1 then
29332: LD_VAR 0 8
29336: PUSH
29337: LD_INT 1
29339: EQUAL
29340: IFFALSE 29451
// begin tmp := [ ] ;
29342: LD_ADDR_VAR 0 19
29346: PUSH
29347: EMPTY
29348: ST_TO_ADDR
// for j in f do
29349: LD_ADDR_VAR 0 9
29353: PUSH
29354: LD_VAR 0 12
29358: PUSH
29359: FOR_IN
29360: IFFALSE 29433
// if GetBType ( j ) = b_bunker then
29362: LD_VAR 0 9
29366: PPUSH
29367: CALL_OW 266
29371: PUSH
29372: LD_INT 32
29374: EQUAL
29375: IFFALSE 29402
// tmp := Insert ( tmp , 1 , j ) else
29377: LD_ADDR_VAR 0 19
29381: PUSH
29382: LD_VAR 0 19
29386: PPUSH
29387: LD_INT 1
29389: PPUSH
29390: LD_VAR 0 9
29394: PPUSH
29395: CALL_OW 2
29399: ST_TO_ADDR
29400: GO 29431
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29402: LD_ADDR_VAR 0 19
29406: PUSH
29407: LD_VAR 0 19
29411: PPUSH
29412: LD_VAR 0 19
29416: PUSH
29417: LD_INT 1
29419: PLUS
29420: PPUSH
29421: LD_VAR 0 9
29425: PPUSH
29426: CALL_OW 2
29430: ST_TO_ADDR
29431: GO 29359
29433: POP
29434: POP
// if tmp then
29435: LD_VAR 0 19
29439: IFFALSE 29451
// f := tmp ;
29441: LD_ADDR_VAR 0 12
29445: PUSH
29446: LD_VAR 0 19
29450: ST_TO_ADDR
// end ; x := personel [ i ] ;
29451: LD_ADDR_VAR 0 13
29455: PUSH
29456: LD_VAR 0 6
29460: PUSH
29461: LD_VAR 0 8
29465: ARRAY
29466: ST_TO_ADDR
// if x = - 1 then
29467: LD_VAR 0 13
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: EQUAL
29476: IFFALSE 29685
// begin for j in f do
29478: LD_ADDR_VAR 0 9
29482: PUSH
29483: LD_VAR 0 12
29487: PUSH
29488: FOR_IN
29489: IFFALSE 29681
// repeat InitHc ;
29491: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29495: LD_VAR 0 9
29499: PPUSH
29500: CALL_OW 266
29504: PUSH
29505: LD_INT 5
29507: EQUAL
29508: IFFALSE 29578
// begin if UnitsInside ( j ) < 3 then
29510: LD_VAR 0 9
29514: PPUSH
29515: CALL_OW 313
29519: PUSH
29520: LD_INT 3
29522: LESS
29523: IFFALSE 29559
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29525: LD_INT 0
29527: PPUSH
29528: LD_INT 5
29530: PUSH
29531: LD_INT 8
29533: PUSH
29534: LD_INT 9
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: PUSH
29542: LD_VAR 0 17
29546: ARRAY
29547: PPUSH
29548: LD_VAR 0 4
29552: PPUSH
29553: CALL_OW 380
29557: GO 29576
// PrepareHuman ( false , i , skill ) ;
29559: LD_INT 0
29561: PPUSH
29562: LD_VAR 0 8
29566: PPUSH
29567: LD_VAR 0 4
29571: PPUSH
29572: CALL_OW 380
// end else
29576: GO 29595
// PrepareHuman ( false , i , skill ) ;
29578: LD_INT 0
29580: PPUSH
29581: LD_VAR 0 8
29585: PPUSH
29586: LD_VAR 0 4
29590: PPUSH
29591: CALL_OW 380
// un := CreateHuman ;
29595: LD_ADDR_VAR 0 14
29599: PUSH
29600: CALL_OW 44
29604: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29605: LD_ADDR_VAR 0 7
29609: PUSH
29610: LD_VAR 0 7
29614: PPUSH
29615: LD_INT 1
29617: PPUSH
29618: LD_VAR 0 14
29622: PPUSH
29623: CALL_OW 2
29627: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29628: LD_VAR 0 14
29632: PPUSH
29633: LD_VAR 0 9
29637: PPUSH
29638: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29642: LD_VAR 0 9
29646: PPUSH
29647: CALL_OW 313
29651: PUSH
29652: LD_INT 6
29654: EQUAL
29655: PUSH
29656: LD_VAR 0 9
29660: PPUSH
29661: CALL_OW 266
29665: PUSH
29666: LD_INT 32
29668: PUSH
29669: LD_INT 31
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: IN
29676: OR
29677: IFFALSE 29491
29679: GO 29488
29681: POP
29682: POP
// end else
29683: GO 30065
// for j = 1 to x do
29685: LD_ADDR_VAR 0 9
29689: PUSH
29690: DOUBLE
29691: LD_INT 1
29693: DEC
29694: ST_TO_ADDR
29695: LD_VAR 0 13
29699: PUSH
29700: FOR_TO
29701: IFFALSE 30063
// begin InitHc ;
29703: CALL_OW 19
// if not f then
29707: LD_VAR 0 12
29711: NOT
29712: IFFALSE 29801
// begin PrepareHuman ( false , i , skill ) ;
29714: LD_INT 0
29716: PPUSH
29717: LD_VAR 0 8
29721: PPUSH
29722: LD_VAR 0 4
29726: PPUSH
29727: CALL_OW 380
// un := CreateHuman ;
29731: LD_ADDR_VAR 0 14
29735: PUSH
29736: CALL_OW 44
29740: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29741: LD_ADDR_VAR 0 7
29745: PUSH
29746: LD_VAR 0 7
29750: PPUSH
29751: LD_INT 1
29753: PPUSH
29754: LD_VAR 0 14
29758: PPUSH
29759: CALL_OW 2
29763: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29764: LD_VAR 0 14
29768: PPUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: CALL_OW 250
29778: PPUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 251
29788: PPUSH
29789: LD_INT 10
29791: PPUSH
29792: LD_INT 0
29794: PPUSH
29795: CALL_OW 50
// continue ;
29799: GO 29700
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29801: LD_VAR 0 12
29805: PUSH
29806: LD_INT 1
29808: ARRAY
29809: PPUSH
29810: CALL_OW 313
29814: PUSH
29815: LD_VAR 0 12
29819: PUSH
29820: LD_INT 1
29822: ARRAY
29823: PPUSH
29824: CALL_OW 266
29828: PUSH
29829: LD_INT 32
29831: PUSH
29832: LD_INT 31
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: IN
29839: AND
29840: PUSH
29841: LD_VAR 0 12
29845: PUSH
29846: LD_INT 1
29848: ARRAY
29849: PPUSH
29850: CALL_OW 313
29854: PUSH
29855: LD_INT 6
29857: EQUAL
29858: OR
29859: IFFALSE 29879
// f := Delete ( f , 1 ) ;
29861: LD_ADDR_VAR 0 12
29865: PUSH
29866: LD_VAR 0 12
29870: PPUSH
29871: LD_INT 1
29873: PPUSH
29874: CALL_OW 3
29878: ST_TO_ADDR
// if not f then
29879: LD_VAR 0 12
29883: NOT
29884: IFFALSE 29902
// begin x := x + 2 ;
29886: LD_ADDR_VAR 0 13
29890: PUSH
29891: LD_VAR 0 13
29895: PUSH
29896: LD_INT 2
29898: PLUS
29899: ST_TO_ADDR
// continue ;
29900: GO 29700
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29902: LD_VAR 0 12
29906: PUSH
29907: LD_INT 1
29909: ARRAY
29910: PPUSH
29911: CALL_OW 266
29915: PUSH
29916: LD_INT 5
29918: EQUAL
29919: IFFALSE 29993
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29921: LD_VAR 0 12
29925: PUSH
29926: LD_INT 1
29928: ARRAY
29929: PPUSH
29930: CALL_OW 313
29934: PUSH
29935: LD_INT 3
29937: LESS
29938: IFFALSE 29974
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29940: LD_INT 0
29942: PPUSH
29943: LD_INT 5
29945: PUSH
29946: LD_INT 8
29948: PUSH
29949: LD_INT 9
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: PUSH
29957: LD_VAR 0 17
29961: ARRAY
29962: PPUSH
29963: LD_VAR 0 4
29967: PPUSH
29968: CALL_OW 380
29972: GO 29991
// PrepareHuman ( false , i , skill ) ;
29974: LD_INT 0
29976: PPUSH
29977: LD_VAR 0 8
29981: PPUSH
29982: LD_VAR 0 4
29986: PPUSH
29987: CALL_OW 380
// end else
29991: GO 30010
// PrepareHuman ( false , i , skill ) ;
29993: LD_INT 0
29995: PPUSH
29996: LD_VAR 0 8
30000: PPUSH
30001: LD_VAR 0 4
30005: PPUSH
30006: CALL_OW 380
// un := CreateHuman ;
30010: LD_ADDR_VAR 0 14
30014: PUSH
30015: CALL_OW 44
30019: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30020: LD_ADDR_VAR 0 7
30024: PUSH
30025: LD_VAR 0 7
30029: PPUSH
30030: LD_INT 1
30032: PPUSH
30033: LD_VAR 0 14
30037: PPUSH
30038: CALL_OW 2
30042: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30043: LD_VAR 0 14
30047: PPUSH
30048: LD_VAR 0 12
30052: PUSH
30053: LD_INT 1
30055: ARRAY
30056: PPUSH
30057: CALL_OW 52
// end ;
30061: GO 29700
30063: POP
30064: POP
// end ;
30065: GO 29002
30067: POP
30068: POP
// result := result ^ buildings ;
30069: LD_ADDR_VAR 0 7
30073: PUSH
30074: LD_VAR 0 7
30078: PUSH
30079: LD_VAR 0 18
30083: ADD
30084: ST_TO_ADDR
// end else
30085: GO 30228
// begin for i = 1 to personel do
30087: LD_ADDR_VAR 0 8
30091: PUSH
30092: DOUBLE
30093: LD_INT 1
30095: DEC
30096: ST_TO_ADDR
30097: LD_VAR 0 6
30101: PUSH
30102: FOR_TO
30103: IFFALSE 30226
// begin if i > 4 then
30105: LD_VAR 0 8
30109: PUSH
30110: LD_INT 4
30112: GREATER
30113: IFFALSE 30117
// break ;
30115: GO 30226
// x := personel [ i ] ;
30117: LD_ADDR_VAR 0 13
30121: PUSH
30122: LD_VAR 0 6
30126: PUSH
30127: LD_VAR 0 8
30131: ARRAY
30132: ST_TO_ADDR
// if x = - 1 then
30133: LD_VAR 0 13
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: EQUAL
30142: IFFALSE 30146
// continue ;
30144: GO 30102
// PrepareHuman ( false , i , skill ) ;
30146: LD_INT 0
30148: PPUSH
30149: LD_VAR 0 8
30153: PPUSH
30154: LD_VAR 0 4
30158: PPUSH
30159: CALL_OW 380
// un := CreateHuman ;
30163: LD_ADDR_VAR 0 14
30167: PUSH
30168: CALL_OW 44
30172: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30173: LD_VAR 0 14
30177: PPUSH
30178: LD_VAR 0 1
30182: PPUSH
30183: CALL_OW 250
30187: PPUSH
30188: LD_VAR 0 1
30192: PPUSH
30193: CALL_OW 251
30197: PPUSH
30198: LD_INT 10
30200: PPUSH
30201: LD_INT 0
30203: PPUSH
30204: CALL_OW 50
// result := result ^ un ;
30208: LD_ADDR_VAR 0 7
30212: PUSH
30213: LD_VAR 0 7
30217: PUSH
30218: LD_VAR 0 14
30222: ADD
30223: ST_TO_ADDR
// end ;
30224: GO 30102
30226: POP
30227: POP
// end ; end ;
30228: LD_VAR 0 7
30232: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30233: LD_INT 0
30235: PPUSH
30236: PPUSH
30237: PPUSH
30238: PPUSH
30239: PPUSH
30240: PPUSH
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
30245: PPUSH
30246: PPUSH
30247: PPUSH
30248: PPUSH
30249: PPUSH
30250: PPUSH
// result := false ;
30251: LD_ADDR_VAR 0 3
30255: PUSH
30256: LD_INT 0
30258: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30259: LD_VAR 0 1
30263: NOT
30264: PUSH
30265: LD_VAR 0 1
30269: PPUSH
30270: CALL_OW 266
30274: PUSH
30275: LD_INT 32
30277: PUSH
30278: LD_INT 33
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: IN
30285: NOT
30286: OR
30287: IFFALSE 30291
// exit ;
30289: GO 31400
// nat := GetNation ( tower ) ;
30291: LD_ADDR_VAR 0 12
30295: PUSH
30296: LD_VAR 0 1
30300: PPUSH
30301: CALL_OW 248
30305: ST_TO_ADDR
// side := GetSide ( tower ) ;
30306: LD_ADDR_VAR 0 16
30310: PUSH
30311: LD_VAR 0 1
30315: PPUSH
30316: CALL_OW 255
30320: ST_TO_ADDR
// x := GetX ( tower ) ;
30321: LD_ADDR_VAR 0 10
30325: PUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: CALL_OW 250
30335: ST_TO_ADDR
// y := GetY ( tower ) ;
30336: LD_ADDR_VAR 0 11
30340: PUSH
30341: LD_VAR 0 1
30345: PPUSH
30346: CALL_OW 251
30350: ST_TO_ADDR
// if not x or not y then
30351: LD_VAR 0 10
30355: NOT
30356: PUSH
30357: LD_VAR 0 11
30361: NOT
30362: OR
30363: IFFALSE 30367
// exit ;
30365: GO 31400
// weapon := 0 ;
30367: LD_ADDR_VAR 0 18
30371: PUSH
30372: LD_INT 0
30374: ST_TO_ADDR
// fac_list := [ ] ;
30375: LD_ADDR_VAR 0 17
30379: PUSH
30380: EMPTY
30381: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30382: LD_ADDR_VAR 0 6
30386: PUSH
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL_OW 274
30396: PPUSH
30397: LD_VAR 0 2
30401: PPUSH
30402: LD_INT 0
30404: PPUSH
30405: CALL 27971 0 3
30409: PPUSH
30410: LD_INT 30
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PPUSH
30420: CALL_OW 72
30424: ST_TO_ADDR
// if not factories then
30425: LD_VAR 0 6
30429: NOT
30430: IFFALSE 30434
// exit ;
30432: GO 31400
// for i in factories do
30434: LD_ADDR_VAR 0 8
30438: PUSH
30439: LD_VAR 0 6
30443: PUSH
30444: FOR_IN
30445: IFFALSE 30470
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30447: LD_ADDR_VAR 0 17
30451: PUSH
30452: LD_VAR 0 17
30456: PUSH
30457: LD_VAR 0 8
30461: PPUSH
30462: CALL_OW 478
30466: UNION
30467: ST_TO_ADDR
30468: GO 30444
30470: POP
30471: POP
// if not fac_list then
30472: LD_VAR 0 17
30476: NOT
30477: IFFALSE 30481
// exit ;
30479: GO 31400
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30481: LD_ADDR_VAR 0 5
30485: PUSH
30486: LD_INT 4
30488: PUSH
30489: LD_INT 5
30491: PUSH
30492: LD_INT 9
30494: PUSH
30495: LD_INT 10
30497: PUSH
30498: LD_INT 6
30500: PUSH
30501: LD_INT 7
30503: PUSH
30504: LD_INT 11
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 27
30518: PUSH
30519: LD_INT 28
30521: PUSH
30522: LD_INT 26
30524: PUSH
30525: LD_INT 30
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 43
30536: PUSH
30537: LD_INT 44
30539: PUSH
30540: LD_INT 46
30542: PUSH
30543: LD_INT 45
30545: PUSH
30546: LD_INT 47
30548: PUSH
30549: LD_INT 49
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: PUSH
30565: LD_VAR 0 12
30569: ARRAY
30570: ST_TO_ADDR
// list := list isect fac_list ;
30571: LD_ADDR_VAR 0 5
30575: PUSH
30576: LD_VAR 0 5
30580: PUSH
30581: LD_VAR 0 17
30585: ISECT
30586: ST_TO_ADDR
// if not list then
30587: LD_VAR 0 5
30591: NOT
30592: IFFALSE 30596
// exit ;
30594: GO 31400
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30596: LD_VAR 0 12
30600: PUSH
30601: LD_INT 3
30603: EQUAL
30604: PUSH
30605: LD_INT 49
30607: PUSH
30608: LD_VAR 0 5
30612: IN
30613: AND
30614: PUSH
30615: LD_INT 31
30617: PPUSH
30618: LD_VAR 0 16
30622: PPUSH
30623: CALL_OW 321
30627: PUSH
30628: LD_INT 2
30630: EQUAL
30631: AND
30632: IFFALSE 30692
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30634: LD_INT 22
30636: PUSH
30637: LD_VAR 0 16
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 35
30648: PUSH
30649: LD_INT 49
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 91
30658: PUSH
30659: LD_VAR 0 1
30663: PUSH
30664: LD_INT 10
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: PPUSH
30677: CALL_OW 69
30681: NOT
30682: IFFALSE 30692
// weapon := ru_time_lapser ;
30684: LD_ADDR_VAR 0 18
30688: PUSH
30689: LD_INT 49
30691: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30692: LD_VAR 0 12
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 2
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: IN
30707: PUSH
30708: LD_INT 11
30710: PUSH
30711: LD_VAR 0 5
30715: IN
30716: PUSH
30717: LD_INT 30
30719: PUSH
30720: LD_VAR 0 5
30724: IN
30725: OR
30726: AND
30727: PUSH
30728: LD_INT 6
30730: PPUSH
30731: LD_VAR 0 16
30735: PPUSH
30736: CALL_OW 321
30740: PUSH
30741: LD_INT 2
30743: EQUAL
30744: AND
30745: IFFALSE 30910
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30747: LD_INT 22
30749: PUSH
30750: LD_VAR 0 16
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: LD_INT 35
30764: PUSH
30765: LD_INT 11
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 35
30774: PUSH
30775: LD_INT 30
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 91
30789: PUSH
30790: LD_VAR 0 1
30794: PUSH
30795: LD_INT 18
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: PPUSH
30808: CALL_OW 69
30812: NOT
30813: PUSH
30814: LD_INT 22
30816: PUSH
30817: LD_VAR 0 16
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 30
30831: PUSH
30832: LD_INT 32
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 30
30841: PUSH
30842: LD_INT 33
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 91
30856: PUSH
30857: LD_VAR 0 1
30861: PUSH
30862: LD_INT 12
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: PUSH
30875: EMPTY
30876: LIST
30877: PPUSH
30878: CALL_OW 69
30882: PUSH
30883: LD_INT 2
30885: GREATER
30886: AND
30887: IFFALSE 30910
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30889: LD_ADDR_VAR 0 18
30893: PUSH
30894: LD_INT 11
30896: PUSH
30897: LD_INT 30
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_VAR 0 12
30908: ARRAY
30909: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30910: LD_VAR 0 18
30914: NOT
30915: PUSH
30916: LD_INT 40
30918: PPUSH
30919: LD_VAR 0 16
30923: PPUSH
30924: CALL_OW 321
30928: PUSH
30929: LD_INT 2
30931: EQUAL
30932: AND
30933: PUSH
30934: LD_INT 7
30936: PUSH
30937: LD_VAR 0 5
30941: IN
30942: PUSH
30943: LD_INT 28
30945: PUSH
30946: LD_VAR 0 5
30950: IN
30951: OR
30952: PUSH
30953: LD_INT 45
30955: PUSH
30956: LD_VAR 0 5
30960: IN
30961: OR
30962: AND
30963: IFFALSE 31217
// begin hex := GetHexInfo ( x , y ) ;
30965: LD_ADDR_VAR 0 4
30969: PUSH
30970: LD_VAR 0 10
30974: PPUSH
30975: LD_VAR 0 11
30979: PPUSH
30980: CALL_OW 546
30984: ST_TO_ADDR
// if hex [ 1 ] then
30985: LD_VAR 0 4
30989: PUSH
30990: LD_INT 1
30992: ARRAY
30993: IFFALSE 30997
// exit ;
30995: GO 31400
// height := hex [ 2 ] ;
30997: LD_ADDR_VAR 0 15
31001: PUSH
31002: LD_VAR 0 4
31006: PUSH
31007: LD_INT 2
31009: ARRAY
31010: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31011: LD_ADDR_VAR 0 14
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 3
31024: PUSH
31025: LD_INT 5
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
// for i in tmp do
31034: LD_ADDR_VAR 0 8
31038: PUSH
31039: LD_VAR 0 14
31043: PUSH
31044: FOR_IN
31045: IFFALSE 31215
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31047: LD_ADDR_VAR 0 9
31051: PUSH
31052: LD_VAR 0 10
31056: PPUSH
31057: LD_VAR 0 8
31061: PPUSH
31062: LD_INT 5
31064: PPUSH
31065: CALL_OW 272
31069: PUSH
31070: LD_VAR 0 11
31074: PPUSH
31075: LD_VAR 0 8
31079: PPUSH
31080: LD_INT 5
31082: PPUSH
31083: CALL_OW 273
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31092: LD_VAR 0 9
31096: PUSH
31097: LD_INT 1
31099: ARRAY
31100: PPUSH
31101: LD_VAR 0 9
31105: PUSH
31106: LD_INT 2
31108: ARRAY
31109: PPUSH
31110: CALL_OW 488
31114: IFFALSE 31213
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31116: LD_ADDR_VAR 0 4
31120: PUSH
31121: LD_VAR 0 9
31125: PUSH
31126: LD_INT 1
31128: ARRAY
31129: PPUSH
31130: LD_VAR 0 9
31134: PUSH
31135: LD_INT 2
31137: ARRAY
31138: PPUSH
31139: CALL_OW 546
31143: ST_TO_ADDR
// if hex [ 1 ] then
31144: LD_VAR 0 4
31148: PUSH
31149: LD_INT 1
31151: ARRAY
31152: IFFALSE 31156
// continue ;
31154: GO 31044
// h := hex [ 2 ] ;
31156: LD_ADDR_VAR 0 13
31160: PUSH
31161: LD_VAR 0 4
31165: PUSH
31166: LD_INT 2
31168: ARRAY
31169: ST_TO_ADDR
// if h + 7 < height then
31170: LD_VAR 0 13
31174: PUSH
31175: LD_INT 7
31177: PLUS
31178: PUSH
31179: LD_VAR 0 15
31183: LESS
31184: IFFALSE 31213
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31186: LD_ADDR_VAR 0 18
31190: PUSH
31191: LD_INT 7
31193: PUSH
31194: LD_INT 28
31196: PUSH
31197: LD_INT 45
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: PUSH
31205: LD_VAR 0 12
31209: ARRAY
31210: ST_TO_ADDR
// break ;
31211: GO 31215
// end ; end ; end ;
31213: GO 31044
31215: POP
31216: POP
// end ; if not weapon then
31217: LD_VAR 0 18
31221: NOT
31222: IFFALSE 31282
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31224: LD_ADDR_VAR 0 5
31228: PUSH
31229: LD_VAR 0 5
31233: PUSH
31234: LD_INT 11
31236: PUSH
31237: LD_INT 30
31239: PUSH
31240: LD_INT 49
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: DIFF
31248: ST_TO_ADDR
// if not list then
31249: LD_VAR 0 5
31253: NOT
31254: IFFALSE 31258
// exit ;
31256: GO 31400
// weapon := list [ rand ( 1 , list ) ] ;
31258: LD_ADDR_VAR 0 18
31262: PUSH
31263: LD_VAR 0 5
31267: PUSH
31268: LD_INT 1
31270: PPUSH
31271: LD_VAR 0 5
31275: PPUSH
31276: CALL_OW 12
31280: ARRAY
31281: ST_TO_ADDR
// end ; if weapon then
31282: LD_VAR 0 18
31286: IFFALSE 31400
// begin tmp := CostOfWeapon ( weapon ) ;
31288: LD_ADDR_VAR 0 14
31292: PUSH
31293: LD_VAR 0 18
31297: PPUSH
31298: CALL_OW 451
31302: ST_TO_ADDR
// j := GetBase ( tower ) ;
31303: LD_ADDR_VAR 0 9
31307: PUSH
31308: LD_VAR 0 1
31312: PPUSH
31313: CALL_OW 274
31317: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31318: LD_VAR 0 9
31322: PPUSH
31323: LD_INT 1
31325: PPUSH
31326: CALL_OW 275
31330: PUSH
31331: LD_VAR 0 14
31335: PUSH
31336: LD_INT 1
31338: ARRAY
31339: GREATEREQUAL
31340: PUSH
31341: LD_VAR 0 9
31345: PPUSH
31346: LD_INT 2
31348: PPUSH
31349: CALL_OW 275
31353: PUSH
31354: LD_VAR 0 14
31358: PUSH
31359: LD_INT 2
31361: ARRAY
31362: GREATEREQUAL
31363: AND
31364: PUSH
31365: LD_VAR 0 9
31369: PPUSH
31370: LD_INT 3
31372: PPUSH
31373: CALL_OW 275
31377: PUSH
31378: LD_VAR 0 14
31382: PUSH
31383: LD_INT 3
31385: ARRAY
31386: GREATEREQUAL
31387: AND
31388: IFFALSE 31400
// result := weapon ;
31390: LD_ADDR_VAR 0 3
31394: PUSH
31395: LD_VAR 0 18
31399: ST_TO_ADDR
// end ; end ;
31400: LD_VAR 0 3
31404: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31405: LD_INT 0
31407: PPUSH
31408: PPUSH
// result := true ;
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: LD_INT 1
31416: ST_TO_ADDR
// if array1 = array2 then
31417: LD_VAR 0 1
31421: PUSH
31422: LD_VAR 0 2
31426: EQUAL
31427: IFFALSE 31487
// begin for i = 1 to array1 do
31429: LD_ADDR_VAR 0 4
31433: PUSH
31434: DOUBLE
31435: LD_INT 1
31437: DEC
31438: ST_TO_ADDR
31439: LD_VAR 0 1
31443: PUSH
31444: FOR_TO
31445: IFFALSE 31483
// if array1 [ i ] <> array2 [ i ] then
31447: LD_VAR 0 1
31451: PUSH
31452: LD_VAR 0 4
31456: ARRAY
31457: PUSH
31458: LD_VAR 0 2
31462: PUSH
31463: LD_VAR 0 4
31467: ARRAY
31468: NONEQUAL
31469: IFFALSE 31481
// begin result := false ;
31471: LD_ADDR_VAR 0 3
31475: PUSH
31476: LD_INT 0
31478: ST_TO_ADDR
// break ;
31479: GO 31483
// end ;
31481: GO 31444
31483: POP
31484: POP
// end else
31485: GO 31495
// result := false ;
31487: LD_ADDR_VAR 0 3
31491: PUSH
31492: LD_INT 0
31494: ST_TO_ADDR
// end ;
31495: LD_VAR 0 3
31499: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31500: LD_INT 0
31502: PPUSH
31503: PPUSH
// if not array1 or not array2 then
31504: LD_VAR 0 1
31508: NOT
31509: PUSH
31510: LD_VAR 0 2
31514: NOT
31515: OR
31516: IFFALSE 31520
// exit ;
31518: GO 31584
// result := true ;
31520: LD_ADDR_VAR 0 3
31524: PUSH
31525: LD_INT 1
31527: ST_TO_ADDR
// for i = 1 to array1 do
31528: LD_ADDR_VAR 0 4
31532: PUSH
31533: DOUBLE
31534: LD_INT 1
31536: DEC
31537: ST_TO_ADDR
31538: LD_VAR 0 1
31542: PUSH
31543: FOR_TO
31544: IFFALSE 31582
// if array1 [ i ] <> array2 [ i ] then
31546: LD_VAR 0 1
31550: PUSH
31551: LD_VAR 0 4
31555: ARRAY
31556: PUSH
31557: LD_VAR 0 2
31561: PUSH
31562: LD_VAR 0 4
31566: ARRAY
31567: NONEQUAL
31568: IFFALSE 31580
// begin result := false ;
31570: LD_ADDR_VAR 0 3
31574: PUSH
31575: LD_INT 0
31577: ST_TO_ADDR
// break ;
31578: GO 31582
// end ;
31580: GO 31543
31582: POP
31583: POP
// end ;
31584: LD_VAR 0 3
31588: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31589: LD_INT 0
31591: PPUSH
31592: PPUSH
31593: PPUSH
// pom := GetBase ( fac ) ;
31594: LD_ADDR_VAR 0 5
31598: PUSH
31599: LD_VAR 0 1
31603: PPUSH
31604: CALL_OW 274
31608: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31609: LD_ADDR_VAR 0 4
31613: PUSH
31614: LD_VAR 0 2
31618: PUSH
31619: LD_INT 1
31621: ARRAY
31622: PPUSH
31623: LD_VAR 0 2
31627: PUSH
31628: LD_INT 2
31630: ARRAY
31631: PPUSH
31632: LD_VAR 0 2
31636: PUSH
31637: LD_INT 3
31639: ARRAY
31640: PPUSH
31641: LD_VAR 0 2
31645: PUSH
31646: LD_INT 4
31648: ARRAY
31649: PPUSH
31650: CALL_OW 449
31654: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31655: LD_ADDR_VAR 0 3
31659: PUSH
31660: LD_VAR 0 5
31664: PPUSH
31665: LD_INT 1
31667: PPUSH
31668: CALL_OW 275
31672: PUSH
31673: LD_VAR 0 4
31677: PUSH
31678: LD_INT 1
31680: ARRAY
31681: GREATEREQUAL
31682: PUSH
31683: LD_VAR 0 5
31687: PPUSH
31688: LD_INT 2
31690: PPUSH
31691: CALL_OW 275
31695: PUSH
31696: LD_VAR 0 4
31700: PUSH
31701: LD_INT 2
31703: ARRAY
31704: GREATEREQUAL
31705: AND
31706: PUSH
31707: LD_VAR 0 5
31711: PPUSH
31712: LD_INT 3
31714: PPUSH
31715: CALL_OW 275
31719: PUSH
31720: LD_VAR 0 4
31724: PUSH
31725: LD_INT 3
31727: ARRAY
31728: GREATEREQUAL
31729: AND
31730: ST_TO_ADDR
// end ;
31731: LD_VAR 0 3
31735: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31736: LD_INT 0
31738: PPUSH
31739: PPUSH
31740: PPUSH
31741: PPUSH
// pom := GetBase ( building ) ;
31742: LD_ADDR_VAR 0 3
31746: PUSH
31747: LD_VAR 0 1
31751: PPUSH
31752: CALL_OW 274
31756: ST_TO_ADDR
// if not pom then
31757: LD_VAR 0 3
31761: NOT
31762: IFFALSE 31766
// exit ;
31764: GO 31936
// btype := GetBType ( building ) ;
31766: LD_ADDR_VAR 0 5
31770: PUSH
31771: LD_VAR 0 1
31775: PPUSH
31776: CALL_OW 266
31780: ST_TO_ADDR
// if btype = b_armoury then
31781: LD_VAR 0 5
31785: PUSH
31786: LD_INT 4
31788: EQUAL
31789: IFFALSE 31799
// btype := b_barracks ;
31791: LD_ADDR_VAR 0 5
31795: PUSH
31796: LD_INT 5
31798: ST_TO_ADDR
// if btype = b_depot then
31799: LD_VAR 0 5
31803: PUSH
31804: LD_INT 0
31806: EQUAL
31807: IFFALSE 31817
// btype := b_warehouse ;
31809: LD_ADDR_VAR 0 5
31813: PUSH
31814: LD_INT 1
31816: ST_TO_ADDR
// if btype = b_workshop then
31817: LD_VAR 0 5
31821: PUSH
31822: LD_INT 2
31824: EQUAL
31825: IFFALSE 31835
// btype := b_factory ;
31827: LD_ADDR_VAR 0 5
31831: PUSH
31832: LD_INT 3
31834: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31835: LD_ADDR_VAR 0 4
31839: PUSH
31840: LD_VAR 0 5
31844: PPUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 248
31854: PPUSH
31855: CALL_OW 450
31859: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31860: LD_ADDR_VAR 0 2
31864: PUSH
31865: LD_VAR 0 3
31869: PPUSH
31870: LD_INT 1
31872: PPUSH
31873: CALL_OW 275
31877: PUSH
31878: LD_VAR 0 4
31882: PUSH
31883: LD_INT 1
31885: ARRAY
31886: GREATEREQUAL
31887: PUSH
31888: LD_VAR 0 3
31892: PPUSH
31893: LD_INT 2
31895: PPUSH
31896: CALL_OW 275
31900: PUSH
31901: LD_VAR 0 4
31905: PUSH
31906: LD_INT 2
31908: ARRAY
31909: GREATEREQUAL
31910: AND
31911: PUSH
31912: LD_VAR 0 3
31916: PPUSH
31917: LD_INT 3
31919: PPUSH
31920: CALL_OW 275
31924: PUSH
31925: LD_VAR 0 4
31929: PUSH
31930: LD_INT 3
31932: ARRAY
31933: GREATEREQUAL
31934: AND
31935: ST_TO_ADDR
// end ;
31936: LD_VAR 0 2
31940: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31941: LD_INT 0
31943: PPUSH
31944: PPUSH
31945: PPUSH
// pom := GetBase ( building ) ;
31946: LD_ADDR_VAR 0 4
31950: PUSH
31951: LD_VAR 0 1
31955: PPUSH
31956: CALL_OW 274
31960: ST_TO_ADDR
// if not pom then
31961: LD_VAR 0 4
31965: NOT
31966: IFFALSE 31970
// exit ;
31968: GO 32071
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31970: LD_ADDR_VAR 0 5
31974: PUSH
31975: LD_VAR 0 2
31979: PPUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 248
31989: PPUSH
31990: CALL_OW 450
31994: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31995: LD_ADDR_VAR 0 3
31999: PUSH
32000: LD_VAR 0 4
32004: PPUSH
32005: LD_INT 1
32007: PPUSH
32008: CALL_OW 275
32012: PUSH
32013: LD_VAR 0 5
32017: PUSH
32018: LD_INT 1
32020: ARRAY
32021: GREATEREQUAL
32022: PUSH
32023: LD_VAR 0 4
32027: PPUSH
32028: LD_INT 2
32030: PPUSH
32031: CALL_OW 275
32035: PUSH
32036: LD_VAR 0 5
32040: PUSH
32041: LD_INT 2
32043: ARRAY
32044: GREATEREQUAL
32045: AND
32046: PUSH
32047: LD_VAR 0 4
32051: PPUSH
32052: LD_INT 3
32054: PPUSH
32055: CALL_OW 275
32059: PUSH
32060: LD_VAR 0 5
32064: PUSH
32065: LD_INT 3
32067: ARRAY
32068: GREATEREQUAL
32069: AND
32070: ST_TO_ADDR
// end ;
32071: LD_VAR 0 3
32075: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32076: LD_INT 0
32078: PPUSH
32079: PPUSH
32080: PPUSH
32081: PPUSH
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
32086: PPUSH
32087: PPUSH
32088: PPUSH
// result := false ;
32089: LD_ADDR_VAR 0 8
32093: PUSH
32094: LD_INT 0
32096: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32097: LD_VAR 0 5
32101: NOT
32102: PUSH
32103: LD_VAR 0 1
32107: NOT
32108: OR
32109: PUSH
32110: LD_VAR 0 2
32114: NOT
32115: OR
32116: PUSH
32117: LD_VAR 0 3
32121: NOT
32122: OR
32123: IFFALSE 32127
// exit ;
32125: GO 32941
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32127: LD_ADDR_VAR 0 14
32131: PUSH
32132: LD_VAR 0 1
32136: PPUSH
32137: LD_VAR 0 2
32141: PPUSH
32142: LD_VAR 0 3
32146: PPUSH
32147: LD_VAR 0 4
32151: PPUSH
32152: LD_VAR 0 5
32156: PUSH
32157: LD_INT 1
32159: ARRAY
32160: PPUSH
32161: CALL_OW 248
32165: PPUSH
32166: LD_INT 0
32168: PPUSH
32169: CALL 34174 0 6
32173: ST_TO_ADDR
// if not hexes then
32174: LD_VAR 0 14
32178: NOT
32179: IFFALSE 32183
// exit ;
32181: GO 32941
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32183: LD_ADDR_VAR 0 17
32187: PUSH
32188: LD_VAR 0 5
32192: PPUSH
32193: LD_INT 22
32195: PUSH
32196: LD_VAR 0 13
32200: PPUSH
32201: CALL_OW 255
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: LD_INT 30
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 30
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PPUSH
32242: CALL_OW 72
32246: ST_TO_ADDR
// for i = 1 to hexes do
32247: LD_ADDR_VAR 0 9
32251: PUSH
32252: DOUBLE
32253: LD_INT 1
32255: DEC
32256: ST_TO_ADDR
32257: LD_VAR 0 14
32261: PUSH
32262: FOR_TO
32263: IFFALSE 32939
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32265: LD_ADDR_VAR 0 13
32269: PUSH
32270: LD_VAR 0 14
32274: PUSH
32275: LD_VAR 0 9
32279: ARRAY
32280: PUSH
32281: LD_INT 1
32283: ARRAY
32284: PPUSH
32285: LD_VAR 0 14
32289: PUSH
32290: LD_VAR 0 9
32294: ARRAY
32295: PUSH
32296: LD_INT 2
32298: ARRAY
32299: PPUSH
32300: CALL_OW 428
32304: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32305: LD_VAR 0 14
32309: PUSH
32310: LD_VAR 0 9
32314: ARRAY
32315: PUSH
32316: LD_INT 1
32318: ARRAY
32319: PPUSH
32320: LD_VAR 0 14
32324: PUSH
32325: LD_VAR 0 9
32329: ARRAY
32330: PUSH
32331: LD_INT 2
32333: ARRAY
32334: PPUSH
32335: CALL_OW 351
32339: PUSH
32340: LD_VAR 0 14
32344: PUSH
32345: LD_VAR 0 9
32349: ARRAY
32350: PUSH
32351: LD_INT 1
32353: ARRAY
32354: PPUSH
32355: LD_VAR 0 14
32359: PUSH
32360: LD_VAR 0 9
32364: ARRAY
32365: PUSH
32366: LD_INT 2
32368: ARRAY
32369: PPUSH
32370: CALL_OW 488
32374: NOT
32375: OR
32376: PUSH
32377: LD_VAR 0 13
32381: PPUSH
32382: CALL_OW 247
32386: PUSH
32387: LD_INT 3
32389: EQUAL
32390: OR
32391: IFFALSE 32397
// exit ;
32393: POP
32394: POP
32395: GO 32941
// if not tmp then
32397: LD_VAR 0 13
32401: NOT
32402: IFFALSE 32406
// continue ;
32404: GO 32262
// result := true ;
32406: LD_ADDR_VAR 0 8
32410: PUSH
32411: LD_INT 1
32413: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32414: LD_VAR 0 6
32418: PUSH
32419: LD_VAR 0 13
32423: PPUSH
32424: CALL_OW 247
32428: PUSH
32429: LD_INT 2
32431: EQUAL
32432: AND
32433: PUSH
32434: LD_VAR 0 13
32438: PPUSH
32439: CALL_OW 263
32443: PUSH
32444: LD_INT 1
32446: EQUAL
32447: AND
32448: IFFALSE 32612
// begin if IsDrivenBy ( tmp ) then
32450: LD_VAR 0 13
32454: PPUSH
32455: CALL_OW 311
32459: IFFALSE 32463
// continue ;
32461: GO 32262
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32463: LD_VAR 0 6
32467: PPUSH
32468: LD_INT 3
32470: PUSH
32471: LD_INT 60
32473: PUSH
32474: EMPTY
32475: LIST
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 3
32483: PUSH
32484: LD_INT 55
32486: PUSH
32487: EMPTY
32488: LIST
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PPUSH
32498: CALL_OW 72
32502: IFFALSE 32610
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32504: LD_ADDR_VAR 0 18
32508: PUSH
32509: LD_VAR 0 6
32513: PPUSH
32514: LD_INT 3
32516: PUSH
32517: LD_INT 60
32519: PUSH
32520: EMPTY
32521: LIST
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: LD_INT 55
32532: PUSH
32533: EMPTY
32534: LIST
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PPUSH
32544: CALL_OW 72
32548: PUSH
32549: LD_INT 1
32551: ARRAY
32552: ST_TO_ADDR
// if IsInUnit ( driver ) then
32553: LD_VAR 0 18
32557: PPUSH
32558: CALL_OW 310
32562: IFFALSE 32573
// ComExit ( driver ) ;
32564: LD_VAR 0 18
32568: PPUSH
32569: CALL 57954 0 1
// AddComEnterUnit ( driver , tmp ) ;
32573: LD_VAR 0 18
32577: PPUSH
32578: LD_VAR 0 13
32582: PPUSH
32583: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32587: LD_VAR 0 18
32591: PPUSH
32592: LD_VAR 0 7
32596: PPUSH
32597: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32601: LD_VAR 0 18
32605: PPUSH
32606: CALL_OW 181
// end ; continue ;
32610: GO 32262
// end ; if not cleaners or not tmp in cleaners then
32612: LD_VAR 0 6
32616: NOT
32617: PUSH
32618: LD_VAR 0 13
32622: PUSH
32623: LD_VAR 0 6
32627: IN
32628: NOT
32629: OR
32630: IFFALSE 32937
// begin if dep then
32632: LD_VAR 0 17
32636: IFFALSE 32772
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32638: LD_ADDR_VAR 0 16
32642: PUSH
32643: LD_VAR 0 17
32647: PUSH
32648: LD_INT 1
32650: ARRAY
32651: PPUSH
32652: CALL_OW 250
32656: PPUSH
32657: LD_VAR 0 17
32661: PUSH
32662: LD_INT 1
32664: ARRAY
32665: PPUSH
32666: CALL_OW 254
32670: PPUSH
32671: LD_INT 5
32673: PPUSH
32674: CALL_OW 272
32678: PUSH
32679: LD_VAR 0 17
32683: PUSH
32684: LD_INT 1
32686: ARRAY
32687: PPUSH
32688: CALL_OW 251
32692: PPUSH
32693: LD_VAR 0 17
32697: PUSH
32698: LD_INT 1
32700: ARRAY
32701: PPUSH
32702: CALL_OW 254
32706: PPUSH
32707: LD_INT 5
32709: PPUSH
32710: CALL_OW 273
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32719: LD_VAR 0 16
32723: PUSH
32724: LD_INT 1
32726: ARRAY
32727: PPUSH
32728: LD_VAR 0 16
32732: PUSH
32733: LD_INT 2
32735: ARRAY
32736: PPUSH
32737: CALL_OW 488
32741: IFFALSE 32772
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32743: LD_VAR 0 13
32747: PPUSH
32748: LD_VAR 0 16
32752: PUSH
32753: LD_INT 1
32755: ARRAY
32756: PPUSH
32757: LD_VAR 0 16
32761: PUSH
32762: LD_INT 2
32764: ARRAY
32765: PPUSH
32766: CALL_OW 111
// continue ;
32770: GO 32262
// end ; end ; r := GetDir ( tmp ) ;
32772: LD_ADDR_VAR 0 15
32776: PUSH
32777: LD_VAR 0 13
32781: PPUSH
32782: CALL_OW 254
32786: ST_TO_ADDR
// if r = 5 then
32787: LD_VAR 0 15
32791: PUSH
32792: LD_INT 5
32794: EQUAL
32795: IFFALSE 32805
// r := 0 ;
32797: LD_ADDR_VAR 0 15
32801: PUSH
32802: LD_INT 0
32804: ST_TO_ADDR
// for j = r to 5 do
32805: LD_ADDR_VAR 0 10
32809: PUSH
32810: DOUBLE
32811: LD_VAR 0 15
32815: DEC
32816: ST_TO_ADDR
32817: LD_INT 5
32819: PUSH
32820: FOR_TO
32821: IFFALSE 32935
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32823: LD_ADDR_VAR 0 11
32827: PUSH
32828: LD_VAR 0 13
32832: PPUSH
32833: CALL_OW 250
32837: PPUSH
32838: LD_VAR 0 10
32842: PPUSH
32843: LD_INT 2
32845: PPUSH
32846: CALL_OW 272
32850: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32851: LD_ADDR_VAR 0 12
32855: PUSH
32856: LD_VAR 0 13
32860: PPUSH
32861: CALL_OW 251
32865: PPUSH
32866: LD_VAR 0 10
32870: PPUSH
32871: LD_INT 2
32873: PPUSH
32874: CALL_OW 273
32878: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32879: LD_VAR 0 11
32883: PPUSH
32884: LD_VAR 0 12
32888: PPUSH
32889: CALL_OW 488
32893: PUSH
32894: LD_VAR 0 11
32898: PPUSH
32899: LD_VAR 0 12
32903: PPUSH
32904: CALL_OW 428
32908: NOT
32909: AND
32910: IFFALSE 32933
// begin ComMoveXY ( tmp , _x , _y ) ;
32912: LD_VAR 0 13
32916: PPUSH
32917: LD_VAR 0 11
32921: PPUSH
32922: LD_VAR 0 12
32926: PPUSH
32927: CALL_OW 111
// break ;
32931: GO 32935
// end ; end ;
32933: GO 32820
32935: POP
32936: POP
// end ; end ;
32937: GO 32262
32939: POP
32940: POP
// end ;
32941: LD_VAR 0 8
32945: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32946: LD_INT 0
32948: PPUSH
// result := true ;
32949: LD_ADDR_VAR 0 3
32953: PUSH
32954: LD_INT 1
32956: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32957: LD_VAR 0 2
32961: PUSH
32962: LD_INT 24
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32976
32968: LD_INT 33
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 33001
32976: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: LD_INT 32
32984: PPUSH
32985: LD_VAR 0 1
32989: PPUSH
32990: CALL_OW 321
32994: PUSH
32995: LD_INT 2
32997: EQUAL
32998: ST_TO_ADDR
32999: GO 33317
33001: LD_INT 20
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33034
33009: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33010: LD_ADDR_VAR 0 3
33014: PUSH
33015: LD_INT 6
33017: PPUSH
33018: LD_VAR 0 1
33022: PPUSH
33023: CALL_OW 321
33027: PUSH
33028: LD_INT 2
33030: EQUAL
33031: ST_TO_ADDR
33032: GO 33317
33034: LD_INT 22
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33048
33040: LD_INT 36
33042: DOUBLE
33043: EQUAL
33044: IFTRUE 33048
33046: GO 33073
33048: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33049: LD_ADDR_VAR 0 3
33053: PUSH
33054: LD_INT 15
33056: PPUSH
33057: LD_VAR 0 1
33061: PPUSH
33062: CALL_OW 321
33066: PUSH
33067: LD_INT 2
33069: EQUAL
33070: ST_TO_ADDR
33071: GO 33317
33073: LD_INT 30
33075: DOUBLE
33076: EQUAL
33077: IFTRUE 33081
33079: GO 33106
33081: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33082: LD_ADDR_VAR 0 3
33086: PUSH
33087: LD_INT 20
33089: PPUSH
33090: LD_VAR 0 1
33094: PPUSH
33095: CALL_OW 321
33099: PUSH
33100: LD_INT 2
33102: EQUAL
33103: ST_TO_ADDR
33104: GO 33317
33106: LD_INT 28
33108: DOUBLE
33109: EQUAL
33110: IFTRUE 33120
33112: LD_INT 21
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33120
33118: GO 33145
33120: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33121: LD_ADDR_VAR 0 3
33125: PUSH
33126: LD_INT 21
33128: PPUSH
33129: LD_VAR 0 1
33133: PPUSH
33134: CALL_OW 321
33138: PUSH
33139: LD_INT 2
33141: EQUAL
33142: ST_TO_ADDR
33143: GO 33317
33145: LD_INT 16
33147: DOUBLE
33148: EQUAL
33149: IFTRUE 33153
33151: GO 33178
33153: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33154: LD_ADDR_VAR 0 3
33158: PUSH
33159: LD_INT 84
33161: PPUSH
33162: LD_VAR 0 1
33166: PPUSH
33167: CALL_OW 321
33171: PUSH
33172: LD_INT 2
33174: EQUAL
33175: ST_TO_ADDR
33176: GO 33317
33178: LD_INT 19
33180: DOUBLE
33181: EQUAL
33182: IFTRUE 33192
33184: LD_INT 23
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33217
33192: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33193: LD_ADDR_VAR 0 3
33197: PUSH
33198: LD_INT 83
33200: PPUSH
33201: LD_VAR 0 1
33205: PPUSH
33206: CALL_OW 321
33210: PUSH
33211: LD_INT 2
33213: EQUAL
33214: ST_TO_ADDR
33215: GO 33317
33217: LD_INT 17
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33250
33225: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33226: LD_ADDR_VAR 0 3
33230: PUSH
33231: LD_INT 39
33233: PPUSH
33234: LD_VAR 0 1
33238: PPUSH
33239: CALL_OW 321
33243: PUSH
33244: LD_INT 2
33246: EQUAL
33247: ST_TO_ADDR
33248: GO 33317
33250: LD_INT 18
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33258
33256: GO 33283
33258: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: LD_INT 40
33266: PPUSH
33267: LD_VAR 0 1
33271: PPUSH
33272: CALL_OW 321
33276: PUSH
33277: LD_INT 2
33279: EQUAL
33280: ST_TO_ADDR
33281: GO 33317
33283: LD_INT 27
33285: DOUBLE
33286: EQUAL
33287: IFTRUE 33291
33289: GO 33316
33291: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33292: LD_ADDR_VAR 0 3
33296: PUSH
33297: LD_INT 35
33299: PPUSH
33300: LD_VAR 0 1
33304: PPUSH
33305: CALL_OW 321
33309: PUSH
33310: LD_INT 2
33312: EQUAL
33313: ST_TO_ADDR
33314: GO 33317
33316: POP
// end ;
33317: LD_VAR 0 3
33321: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33322: LD_INT 0
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
33331: PPUSH
33332: PPUSH
33333: PPUSH
33334: PPUSH
// result := false ;
33335: LD_ADDR_VAR 0 6
33339: PUSH
33340: LD_INT 0
33342: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33343: LD_VAR 0 1
33347: NOT
33348: PUSH
33349: LD_VAR 0 1
33353: PPUSH
33354: CALL_OW 266
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: IN
33369: NOT
33370: OR
33371: PUSH
33372: LD_VAR 0 2
33376: NOT
33377: OR
33378: PUSH
33379: LD_VAR 0 5
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: LD_INT 3
33395: PUSH
33396: LD_INT 4
33398: PUSH
33399: LD_INT 5
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: IN
33410: NOT
33411: OR
33412: PUSH
33413: LD_VAR 0 3
33417: PPUSH
33418: LD_VAR 0 4
33422: PPUSH
33423: CALL_OW 488
33427: NOT
33428: OR
33429: IFFALSE 33433
// exit ;
33431: GO 34169
// side := GetSide ( depot ) ;
33433: LD_ADDR_VAR 0 9
33437: PUSH
33438: LD_VAR 0 1
33442: PPUSH
33443: CALL_OW 255
33447: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33448: LD_VAR 0 9
33452: PPUSH
33453: LD_VAR 0 2
33457: PPUSH
33458: CALL 32946 0 2
33462: NOT
33463: IFFALSE 33467
// exit ;
33465: GO 34169
// pom := GetBase ( depot ) ;
33467: LD_ADDR_VAR 0 10
33471: PUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: CALL_OW 274
33481: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33482: LD_ADDR_VAR 0 11
33486: PUSH
33487: LD_VAR 0 2
33491: PPUSH
33492: LD_VAR 0 1
33496: PPUSH
33497: CALL_OW 248
33501: PPUSH
33502: CALL_OW 450
33506: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33507: LD_VAR 0 10
33511: PPUSH
33512: LD_INT 1
33514: PPUSH
33515: CALL_OW 275
33519: PUSH
33520: LD_VAR 0 11
33524: PUSH
33525: LD_INT 1
33527: ARRAY
33528: GREATEREQUAL
33529: PUSH
33530: LD_VAR 0 10
33534: PPUSH
33535: LD_INT 2
33537: PPUSH
33538: CALL_OW 275
33542: PUSH
33543: LD_VAR 0 11
33547: PUSH
33548: LD_INT 2
33550: ARRAY
33551: GREATEREQUAL
33552: AND
33553: PUSH
33554: LD_VAR 0 10
33558: PPUSH
33559: LD_INT 3
33561: PPUSH
33562: CALL_OW 275
33566: PUSH
33567: LD_VAR 0 11
33571: PUSH
33572: LD_INT 3
33574: ARRAY
33575: GREATEREQUAL
33576: AND
33577: NOT
33578: IFFALSE 33582
// exit ;
33580: GO 34169
// if GetBType ( depot ) = b_depot then
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 266
33591: PUSH
33592: LD_INT 0
33594: EQUAL
33595: IFFALSE 33607
// dist := 28 else
33597: LD_ADDR_VAR 0 14
33601: PUSH
33602: LD_INT 28
33604: ST_TO_ADDR
33605: GO 33615
// dist := 36 ;
33607: LD_ADDR_VAR 0 14
33611: PUSH
33612: LD_INT 36
33614: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33615: LD_VAR 0 1
33619: PPUSH
33620: LD_VAR 0 3
33624: PPUSH
33625: LD_VAR 0 4
33629: PPUSH
33630: CALL_OW 297
33634: PUSH
33635: LD_VAR 0 14
33639: GREATER
33640: IFFALSE 33644
// exit ;
33642: GO 34169
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33644: LD_ADDR_VAR 0 12
33648: PUSH
33649: LD_VAR 0 2
33653: PPUSH
33654: LD_VAR 0 3
33658: PPUSH
33659: LD_VAR 0 4
33663: PPUSH
33664: LD_VAR 0 5
33668: PPUSH
33669: LD_VAR 0 1
33673: PPUSH
33674: CALL_OW 248
33678: PPUSH
33679: LD_INT 0
33681: PPUSH
33682: CALL 34174 0 6
33686: ST_TO_ADDR
// if not hexes then
33687: LD_VAR 0 12
33691: NOT
33692: IFFALSE 33696
// exit ;
33694: GO 34169
// hex := GetHexInfo ( x , y ) ;
33696: LD_ADDR_VAR 0 15
33700: PUSH
33701: LD_VAR 0 3
33705: PPUSH
33706: LD_VAR 0 4
33710: PPUSH
33711: CALL_OW 546
33715: ST_TO_ADDR
// if hex [ 1 ] then
33716: LD_VAR 0 15
33720: PUSH
33721: LD_INT 1
33723: ARRAY
33724: IFFALSE 33728
// exit ;
33726: GO 34169
// height := hex [ 2 ] ;
33728: LD_ADDR_VAR 0 13
33732: PUSH
33733: LD_VAR 0 15
33737: PUSH
33738: LD_INT 2
33740: ARRAY
33741: ST_TO_ADDR
// for i = 1 to hexes do
33742: LD_ADDR_VAR 0 7
33746: PUSH
33747: DOUBLE
33748: LD_INT 1
33750: DEC
33751: ST_TO_ADDR
33752: LD_VAR 0 12
33756: PUSH
33757: FOR_TO
33758: IFFALSE 34088
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33760: LD_VAR 0 12
33764: PUSH
33765: LD_VAR 0 7
33769: ARRAY
33770: PUSH
33771: LD_INT 1
33773: ARRAY
33774: PPUSH
33775: LD_VAR 0 12
33779: PUSH
33780: LD_VAR 0 7
33784: ARRAY
33785: PUSH
33786: LD_INT 2
33788: ARRAY
33789: PPUSH
33790: CALL_OW 488
33794: NOT
33795: PUSH
33796: LD_VAR 0 12
33800: PUSH
33801: LD_VAR 0 7
33805: ARRAY
33806: PUSH
33807: LD_INT 1
33809: ARRAY
33810: PPUSH
33811: LD_VAR 0 12
33815: PUSH
33816: LD_VAR 0 7
33820: ARRAY
33821: PUSH
33822: LD_INT 2
33824: ARRAY
33825: PPUSH
33826: CALL_OW 428
33830: PUSH
33831: LD_INT 0
33833: GREATER
33834: OR
33835: PUSH
33836: LD_VAR 0 12
33840: PUSH
33841: LD_VAR 0 7
33845: ARRAY
33846: PUSH
33847: LD_INT 1
33849: ARRAY
33850: PPUSH
33851: LD_VAR 0 12
33855: PUSH
33856: LD_VAR 0 7
33860: ARRAY
33861: PUSH
33862: LD_INT 2
33864: ARRAY
33865: PPUSH
33866: CALL_OW 351
33870: OR
33871: IFFALSE 33877
// exit ;
33873: POP
33874: POP
33875: GO 34169
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33877: LD_ADDR_VAR 0 8
33881: PUSH
33882: LD_VAR 0 12
33886: PUSH
33887: LD_VAR 0 7
33891: ARRAY
33892: PUSH
33893: LD_INT 1
33895: ARRAY
33896: PPUSH
33897: LD_VAR 0 12
33901: PUSH
33902: LD_VAR 0 7
33906: ARRAY
33907: PUSH
33908: LD_INT 2
33910: ARRAY
33911: PPUSH
33912: CALL_OW 546
33916: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33917: LD_VAR 0 8
33921: PUSH
33922: LD_INT 1
33924: ARRAY
33925: PUSH
33926: LD_VAR 0 8
33930: PUSH
33931: LD_INT 2
33933: ARRAY
33934: PUSH
33935: LD_VAR 0 13
33939: PUSH
33940: LD_INT 2
33942: PLUS
33943: GREATER
33944: OR
33945: PUSH
33946: LD_VAR 0 8
33950: PUSH
33951: LD_INT 2
33953: ARRAY
33954: PUSH
33955: LD_VAR 0 13
33959: PUSH
33960: LD_INT 2
33962: MINUS
33963: LESS
33964: OR
33965: PUSH
33966: LD_VAR 0 8
33970: PUSH
33971: LD_INT 3
33973: ARRAY
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: LD_INT 8
33980: PUSH
33981: LD_INT 9
33983: PUSH
33984: LD_INT 10
33986: PUSH
33987: LD_INT 11
33989: PUSH
33990: LD_INT 12
33992: PUSH
33993: LD_INT 13
33995: PUSH
33996: LD_INT 16
33998: PUSH
33999: LD_INT 17
34001: PUSH
34002: LD_INT 18
34004: PUSH
34005: LD_INT 19
34007: PUSH
34008: LD_INT 20
34010: PUSH
34011: LD_INT 21
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: IN
34029: NOT
34030: OR
34031: PUSH
34032: LD_VAR 0 8
34036: PUSH
34037: LD_INT 5
34039: ARRAY
34040: NOT
34041: OR
34042: PUSH
34043: LD_VAR 0 8
34047: PUSH
34048: LD_INT 6
34050: ARRAY
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: LD_INT 7
34060: PUSH
34061: LD_INT 9
34063: PUSH
34064: LD_INT 10
34066: PUSH
34067: LD_INT 11
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: IN
34078: NOT
34079: OR
34080: IFFALSE 34086
// exit ;
34082: POP
34083: POP
34084: GO 34169
// end ;
34086: GO 33757
34088: POP
34089: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34090: LD_VAR 0 9
34094: PPUSH
34095: LD_VAR 0 3
34099: PPUSH
34100: LD_VAR 0 4
34104: PPUSH
34105: LD_INT 20
34107: PPUSH
34108: CALL 26121 0 4
34112: PUSH
34113: LD_INT 4
34115: ARRAY
34116: IFFALSE 34120
// exit ;
34118: GO 34169
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34120: LD_VAR 0 2
34124: PUSH
34125: LD_INT 29
34127: PUSH
34128: LD_INT 30
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: IN
34135: PUSH
34136: LD_VAR 0 3
34140: PPUSH
34141: LD_VAR 0 4
34145: PPUSH
34146: LD_VAR 0 9
34150: PPUSH
34151: CALL_OW 440
34155: NOT
34156: AND
34157: IFFALSE 34161
// exit ;
34159: GO 34169
// result := true ;
34161: LD_ADDR_VAR 0 6
34165: PUSH
34166: LD_INT 1
34168: ST_TO_ADDR
// end ;
34169: LD_VAR 0 6
34173: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34174: LD_INT 0
34176: PPUSH
34177: PPUSH
34178: PPUSH
34179: PPUSH
34180: PPUSH
34181: PPUSH
34182: PPUSH
34183: PPUSH
34184: PPUSH
34185: PPUSH
34186: PPUSH
34187: PPUSH
34188: PPUSH
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
34211: PPUSH
34212: PPUSH
34213: PPUSH
34214: PPUSH
34215: PPUSH
34216: PPUSH
34217: PPUSH
34218: PPUSH
34219: PPUSH
34220: PPUSH
34221: PPUSH
34222: PPUSH
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
// result = [ ] ;
34234: LD_ADDR_VAR 0 7
34238: PUSH
34239: EMPTY
34240: ST_TO_ADDR
// temp_list = [ ] ;
34241: LD_ADDR_VAR 0 9
34245: PUSH
34246: EMPTY
34247: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34248: LD_VAR 0 4
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: LD_INT 3
34264: PUSH
34265: LD_INT 4
34267: PUSH
34268: LD_INT 5
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: IN
34279: NOT
34280: PUSH
34281: LD_VAR 0 1
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: IN
34296: PUSH
34297: LD_VAR 0 5
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 3
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: IN
34316: NOT
34317: AND
34318: OR
34319: IFFALSE 34323
// exit ;
34321: GO 52714
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34323: LD_VAR 0 1
34327: PUSH
34328: LD_INT 6
34330: PUSH
34331: LD_INT 7
34333: PUSH
34334: LD_INT 8
34336: PUSH
34337: LD_INT 13
34339: PUSH
34340: LD_INT 12
34342: PUSH
34343: LD_INT 15
34345: PUSH
34346: LD_INT 11
34348: PUSH
34349: LD_INT 14
34351: PUSH
34352: LD_INT 10
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: IN
34366: IFFALSE 34376
// btype = b_lab ;
34368: LD_ADDR_VAR 0 1
34372: PUSH
34373: LD_INT 6
34375: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34376: LD_VAR 0 6
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: IN
34395: NOT
34396: PUSH
34397: LD_VAR 0 1
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: LD_INT 3
34413: PUSH
34414: LD_INT 6
34416: PUSH
34417: LD_INT 36
34419: PUSH
34420: LD_INT 4
34422: PUSH
34423: LD_INT 5
34425: PUSH
34426: LD_INT 31
34428: PUSH
34429: LD_INT 32
34431: PUSH
34432: LD_INT 33
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: IN
34448: NOT
34449: PUSH
34450: LD_VAR 0 6
34454: PUSH
34455: LD_INT 1
34457: EQUAL
34458: AND
34459: OR
34460: PUSH
34461: LD_VAR 0 1
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: IN
34476: NOT
34477: PUSH
34478: LD_VAR 0 6
34482: PUSH
34483: LD_INT 2
34485: EQUAL
34486: AND
34487: OR
34488: IFFALSE 34498
// mode = 0 ;
34490: LD_ADDR_VAR 0 6
34494: PUSH
34495: LD_INT 0
34497: ST_TO_ADDR
// case mode of 0 :
34498: LD_VAR 0 6
34502: PUSH
34503: LD_INT 0
34505: DOUBLE
34506: EQUAL
34507: IFTRUE 34511
34509: GO 45964
34511: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34512: LD_ADDR_VAR 0 11
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: LD_INT 2
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: LD_INT 3
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 3
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34705: LD_ADDR_VAR 0 12
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: NEG
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: NEG
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 3
34862: NEG
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 3
34873: NEG
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34901: LD_ADDR_VAR 0 13
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: LD_INT 2
34986: NEG
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 2
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 2
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: NEG
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 2
35036: NEG
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: LD_INT 3
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 3
35060: NEG
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 3
35072: NEG
35073: PUSH
35074: LD_INT 3
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35100: LD_ADDR_VAR 0 14
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: LD_INT 2
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: LD_INT 3
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 3
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 2
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35296: LD_ADDR_VAR 0 15
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: NEG
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 3
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 3
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35489: LD_ADDR_VAR 0 16
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: LD_INT 2
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 3
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 2
35656: PUSH
35657: LD_INT 3
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35682: LD_ADDR_VAR 0 17
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: LD_INT 2
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 2
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 2
35881: NEG
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35912: LD_ADDR_VAR 0 18
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: LD_INT 1
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 2
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 2
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: NEG
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: LD_INT 2
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36142: LD_ADDR_VAR 0 19
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: LD_INT 2
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 2
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 2
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 2
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 2
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 2
36318: NEG
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36372: LD_ADDR_VAR 0 20
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 2
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 2
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 2
36548: NEG
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: NEG
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36602: LD_ADDR_VAR 0 21
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 2
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 2
36778: NEG
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 2
36801: NEG
36802: PUSH
36803: LD_INT 2
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36832: LD_ADDR_VAR 0 22
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: NEG
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: LD_INT 2
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: LD_INT 2
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 2
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 2
37008: NEG
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: NEG
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 2
37031: NEG
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37062: LD_ADDR_VAR 0 23
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: LD_INT 2
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 2
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: LD_INT 2
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: NEG
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 2
37261: NEG
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: LD_INT 3
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: LD_INT 3
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37342: LD_ADDR_VAR 0 24
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: LD_INT 2
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 2
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 2
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: NEG
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 2
37529: NEG
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 2
37541: NEG
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 2
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 3
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: LD_INT 2
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37618: LD_ADDR_VAR 0 25
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: LD_INT 2
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: LD_INT 2
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 2
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 1
37783: NEG
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 2
37794: NEG
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 2
37805: NEG
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: LD_INT 2
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 3
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: LD_INT 3
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 3
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37892: LD_ADDR_VAR 0 26
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: LD_INT 2
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: PUSH
38104: LD_INT 3
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: LD_INT 3
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38168: LD_ADDR_VAR 0 27
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 2
38344: NEG
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 2
38390: NEG
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 3
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 3
38413: NEG
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38448: LD_ADDR_VAR 0 28
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: NEG
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: NEG
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 2
38647: NEG
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 2
38659: NEG
38660: PUSH
38661: LD_INT 3
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: LD_INT 3
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 3
38683: NEG
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 3
38695: NEG
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38730: LD_ADDR_VAR 0 29
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: NEG
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: LD_INT 3
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 3
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 3
38974: NEG
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39009: LD_ADDR_VAR 0 30
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: LD_INT 2
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: LD_INT 2
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 2
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: NEG
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 3
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 3
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 2
39231: PUSH
39232: LD_INT 3
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 3
39252: NEG
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39287: LD_ADDR_VAR 0 31
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: NEG
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: LD_INT 3
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 3
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 3
39530: NEG
39531: PUSH
39532: LD_INT 2
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39565: LD_ADDR_VAR 0 32
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: NEG
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: LD_INT 3
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: LD_INT 2
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 3
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 3
39808: NEG
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39843: LD_ADDR_VAR 0 33
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 1
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: NEG
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: LD_INT 3
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 3
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: LD_INT 3
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 3
40087: NEG
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40122: LD_ADDR_VAR 0 34
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 3
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 3
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40402: LD_ADDR_VAR 0 35
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: NEG
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40514: LD_ADDR_VAR 0 36
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40626: LD_ADDR_VAR 0 37
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40738: LD_ADDR_VAR 0 38
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40850: LD_ADDR_VAR 0 39
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40962: LD_ADDR_VAR 0 40
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41074: LD_ADDR_VAR 0 41
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: LD_INT 3
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 3
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 3
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 3
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 3
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: LD_INT 3
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: NEG
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 3
41348: NEG
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 3
41359: NEG
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 3
41371: NEG
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: NEG
41384: PUSH
41385: LD_INT 3
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41424: LD_ADDR_VAR 0 42
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 2
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 3
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 3
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 3
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: LD_INT 3
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 3
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 3
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 3
41721: NEG
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 3
41733: NEG
41734: PUSH
41735: LD_INT 3
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41774: LD_ADDR_VAR 0 43
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: LD_INT 3
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 3
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 3
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 3
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 3
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 3
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 3
42070: NEG
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 3
42081: NEG
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42122: LD_ADDR_VAR 0 44
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: NEG
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: LD_INT 3
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 3
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 3
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 3
42396: NEG
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 3
42407: NEG
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 3
42419: NEG
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 3
42431: NEG
42432: PUSH
42433: LD_INT 3
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42472: LD_ADDR_VAR 0 45
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 3
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: LD_INT 3
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: LD_INT 3
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 3
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 3
42781: NEG
42782: PUSH
42783: LD_INT 3
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42822: LD_ADDR_VAR 0 46
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 3
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 3
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 3
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 3
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 3
43118: NEG
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 3
43129: NEG
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43170: LD_ADDR_VAR 0 47
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43321: LD_ADDR_VAR 0 48
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43468: LD_ADDR_VAR 0 49
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43612: LD_ADDR_VAR 0 50
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43756: LD_ADDR_VAR 0 51
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43903: LD_ADDR_VAR 0 52
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44054: LD_ADDR_VAR 0 53
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44284: LD_ADDR_VAR 0 54
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 2
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44514: LD_ADDR_VAR 0 55
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44744: LD_ADDR_VAR 0 56
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44974: LD_ADDR_VAR 0 57
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45204: LD_ADDR_VAR 0 58
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45434: LD_ADDR_VAR 0 59
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45522: LD_ADDR_VAR 0 60
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45610: LD_ADDR_VAR 0 61
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45698: LD_ADDR_VAR 0 62
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45786: LD_ADDR_VAR 0 63
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45874: LD_ADDR_VAR 0 64
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: ST_TO_ADDR
// end ; 1 :
45962: GO 51859
45964: LD_INT 1
45966: DOUBLE
45967: EQUAL
45968: IFTRUE 45972
45970: GO 48595
45972: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45973: LD_ADDR_VAR 0 11
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 3
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46017: LD_ADDR_VAR 0 12
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46058: LD_ADDR_VAR 0 13
46062: PUSH
46063: LD_INT 3
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 3
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 3
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46098: LD_ADDR_VAR 0 14
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: LIST
46138: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46139: LD_ADDR_VAR 0 15
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 3
46168: NEG
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46183: LD_ADDR_VAR 0 16
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 3
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 3
46202: NEG
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: LD_INT 3
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46229: LD_ADDR_VAR 0 17
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 3
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 3
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46273: LD_ADDR_VAR 0 18
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: LIST
46313: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46314: LD_ADDR_VAR 0 19
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: LD_INT 3
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: LIST
46353: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46354: LD_ADDR_VAR 0 20
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 3
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46395: LD_ADDR_VAR 0 21
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 3
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: LIST
46438: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46439: LD_ADDR_VAR 0 22
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 3
46458: NEG
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 3
46470: NEG
46471: PUSH
46472: LD_INT 3
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46485: LD_ADDR_VAR 0 23
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 3
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 4
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 3
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46529: LD_ADDR_VAR 0 24
46533: PUSH
46534: LD_INT 3
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 3
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 4
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46570: LD_ADDR_VAR 0 25
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: LD_INT 3
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 4
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 3
46597: PUSH
46598: LD_INT 4
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: LIST
46609: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46610: LD_ADDR_VAR 0 26
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 4
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: LIST
46650: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46651: LD_ADDR_VAR 0 27
46655: PUSH
46656: LD_INT 3
46658: NEG
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 4
46680: NEG
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46695: LD_ADDR_VAR 0 28
46699: PUSH
46700: LD_INT 3
46702: NEG
46703: PUSH
46704: LD_INT 3
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: LD_INT 4
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 4
46726: NEG
46727: PUSH
46728: LD_INT 3
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46741: LD_ADDR_VAR 0 29
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 3
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 3
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 2
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 4
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 4
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 3
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 5
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 5
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 4
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 6
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 6
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 5
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46896: LD_ADDR_VAR 0 30
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 4
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 4
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 4
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 5
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 5
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 5
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 6
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 6
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47039: LD_ADDR_VAR 0 31
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 4
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 4
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: LD_INT 4
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 5
47106: PUSH
47107: LD_INT 4
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 5
47116: PUSH
47117: LD_INT 5
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 4
47126: PUSH
47127: LD_INT 5
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 6
47136: PUSH
47137: LD_INT 5
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 6
47146: PUSH
47147: LD_INT 6
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 5
47156: PUSH
47157: LD_INT 6
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47178: LD_ADDR_VAR 0 32
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 4
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 4
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 3
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 5
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 5
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 4
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 6
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 6
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 5
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47321: LD_ADDR_VAR 0 33
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 4
47373: NEG
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 4
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 4
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 5
47407: NEG
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 5
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 5
47430: NEG
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 6
47441: NEG
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 6
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47476: LD_ADDR_VAR 0 34
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 3
47507: NEG
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: LD_INT 4
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 4
47531: NEG
47532: PUSH
47533: LD_INT 3
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 4
47543: NEG
47544: PUSH
47545: LD_INT 4
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 4
47555: NEG
47556: PUSH
47557: LD_INT 5
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 5
47567: NEG
47568: PUSH
47569: LD_INT 4
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 5
47579: NEG
47580: PUSH
47581: LD_INT 5
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 5
47591: NEG
47592: PUSH
47593: LD_INT 6
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 6
47603: NEG
47604: PUSH
47605: LD_INT 5
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 6
47615: NEG
47616: PUSH
47617: LD_INT 6
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47639: LD_ADDR_VAR 0 41
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: LD_INT 3
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47683: LD_ADDR_VAR 0 42
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47724: LD_ADDR_VAR 0 43
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 3
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47764: LD_ADDR_VAR 0 44
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47805: LD_ADDR_VAR 0 45
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47849: LD_ADDR_VAR 0 46
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 2
47868: NEG
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 3
47880: NEG
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: LIST
47894: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47895: LD_ADDR_VAR 0 47
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: LD_INT 3
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 3
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47928: LD_ADDR_VAR 0 48
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47959: LD_ADDR_VAR 0 49
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47988: LD_ADDR_VAR 0 50
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 3
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48017: LD_ADDR_VAR 0 51
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48048: LD_ADDR_VAR 0 52
48052: PUSH
48053: LD_INT 3
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48081: LD_ADDR_VAR 0 53
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 3
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 3
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: LIST
48124: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48125: LD_ADDR_VAR 0 54
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 3
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48166: LD_ADDR_VAR 0 55
48170: PUSH
48171: LD_INT 3
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 3
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48206: LD_ADDR_VAR 0 56
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48247: LD_ADDR_VAR 0 57
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 3
48265: NEG
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48291: LD_ADDR_VAR 0 58
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: LD_INT 3
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 3
48322: NEG
48323: PUSH
48324: LD_INT 3
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: LIST
48336: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48337: LD_ADDR_VAR 0 59
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: LIST
48380: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48381: LD_ADDR_VAR 0 60
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: LIST
48421: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48422: LD_ADDR_VAR 0 61
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48462: LD_ADDR_VAR 0 62
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48503: LD_ADDR_VAR 0 63
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48547: LD_ADDR_VAR 0 64
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: ST_TO_ADDR
// end ; 2 :
48593: GO 51859
48595: LD_INT 2
48597: DOUBLE
48598: EQUAL
48599: IFTRUE 48603
48601: GO 51858
48603: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48604: LD_ADDR_VAR 0 29
48608: PUSH
48609: LD_INT 4
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 4
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 5
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 5
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 4
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 5
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: PUSH
48705: LD_INT 3
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 4
48724: PUSH
48725: LD_INT 3
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 4
48734: PUSH
48735: LD_INT 4
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: LD_INT 4
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 3
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 4
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 4
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 4
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 4
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 5
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 5
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 4
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: LD_INT 5
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 3
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 3
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 4
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 4
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 4
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 4
48989: NEG
48990: PUSH
48991: LD_INT 4
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 4
49001: NEG
49002: PUSH
49003: LD_INT 5
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: LD_INT 4
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 3
49025: NEG
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 4
49037: NEG
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 5
49049: NEG
49050: PUSH
49051: LD_INT 4
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 5
49061: NEG
49062: PUSH
49063: LD_INT 5
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: NEG
49074: PUSH
49075: LD_INT 5
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 5
49085: NEG
49086: PUSH
49087: LD_INT 3
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49142: LD_ADDR_VAR 0 30
49146: PUSH
49147: LD_INT 4
49149: PUSH
49150: LD_INT 4
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 4
49159: PUSH
49160: LD_INT 3
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 5
49169: PUSH
49170: LD_INT 4
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 5
49179: PUSH
49180: LD_INT 5
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 4
49189: PUSH
49190: LD_INT 5
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: LD_INT 4
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 3
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 5
49219: PUSH
49220: LD_INT 3
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 3
49229: PUSH
49230: LD_INT 5
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 3
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 4
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 4
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 3
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: LD_INT 4
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 4
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 4
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 3
49355: NEG
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 4
49377: NEG
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 5
49388: NEG
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 5
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 5
49411: NEG
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 3
49423: NEG
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: LD_INT 3
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: LD_INT 4
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 4
49494: NEG
49495: PUSH
49496: LD_INT 3
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 4
49506: NEG
49507: PUSH
49508: LD_INT 4
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: LD_INT 4
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 4
49530: NEG
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 4
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 5
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: LD_INT 4
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 3
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 3
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 4
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 5
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 5
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49689: LD_ADDR_VAR 0 31
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 4
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: LD_INT 4
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 5
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 5
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 4
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 3
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 5
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 3
49834: NEG
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 4
49845: NEG
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 4
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 4
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 4
49891: NEG
49892: PUSH
49893: LD_INT 4
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 4
49903: NEG
49904: PUSH
49905: LD_INT 5
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: LD_INT 4
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 3
49927: NEG
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 4
49939: NEG
49940: PUSH
49941: LD_INT 3
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 5
49951: NEG
49952: PUSH
49953: LD_INT 4
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 5
49963: NEG
49964: PUSH
49965: LD_INT 5
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 3
49975: NEG
49976: PUSH
49977: LD_INT 5
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 5
49987: NEG
49988: PUSH
49989: LD_INT 3
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 4
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 4
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: LD_INT 4
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 4
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 4
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 5
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 5
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 4
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 3
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 3
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 5
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50239: LD_ADDR_VAR 0 32
50243: PUSH
50244: LD_INT 4
50246: NEG
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 4
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 4
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 5
50302: NEG
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 5
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 5
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: NEG
50349: PUSH
50350: LD_INT 3
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 3
50360: NEG
50361: PUSH
50362: LD_INT 4
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: NEG
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 4
50408: NEG
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 4
50420: NEG
50421: PUSH
50422: LD_INT 4
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 4
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 4
50444: NEG
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 4
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 5
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 4
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 3
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 4
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 5
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 3
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 5
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 3
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 4
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 4
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 4
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 4
50651: PUSH
50652: LD_INT 4
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 4
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 5
50671: PUSH
50672: LD_INT 4
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 5
50681: PUSH
50682: LD_INT 5
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 4
50691: PUSH
50692: LD_INT 5
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: LD_INT 4
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 5
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 3
50731: PUSH
50732: LD_INT 5
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50786: LD_ADDR_VAR 0 33
50790: PUSH
50791: LD_INT 4
50793: NEG
50794: PUSH
50795: LD_INT 4
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 4
50805: NEG
50806: PUSH
50807: LD_INT 5
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 3
50817: NEG
50818: PUSH
50819: LD_INT 4
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 3
50829: NEG
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 4
50841: NEG
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 5
50853: NEG
50854: PUSH
50855: LD_INT 4
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 5
50865: NEG
50866: PUSH
50867: LD_INT 5
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 3
50877: NEG
50878: PUSH
50879: LD_INT 5
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 5
50889: NEG
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 4
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 4
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 4
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 4
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 4
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 5
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 5
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 4
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 3
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 5
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 4
51126: PUSH
51127: LD_INT 4
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: LD_INT 4
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 4
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: LD_INT 4
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 4
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 4
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 5
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 5
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 4
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: LD_INT 5
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 3
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51324: LD_ADDR_VAR 0 34
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 4
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 5
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 4
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 3
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 4
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 5
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: LD_INT 3
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 5
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 4
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 3
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 4
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 4
51526: PUSH
51527: LD_INT 4
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 4
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 5
51546: PUSH
51547: LD_INT 4
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 5
51556: PUSH
51557: LD_INT 5
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 4
51566: PUSH
51567: LD_INT 5
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: LD_INT 4
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 5
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: PUSH
51607: LD_INT 5
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 4
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 4
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 3
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 4
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 4
51709: NEG
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 4
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: NEG
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: NEG
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 4
51754: NEG
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 5
51765: NEG
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 5
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 5
51788: NEG
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 3
51800: NEG
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: ST_TO_ADDR
// end ; end ;
51856: GO 51859
51858: POP
// case btype of b_depot , b_warehouse :
51859: LD_VAR 0 1
51863: PUSH
51864: LD_INT 0
51866: DOUBLE
51867: EQUAL
51868: IFTRUE 51878
51870: LD_INT 1
51872: DOUBLE
51873: EQUAL
51874: IFTRUE 51878
51876: GO 52079
51878: POP
// case nation of nation_american :
51879: LD_VAR 0 5
51883: PUSH
51884: LD_INT 1
51886: DOUBLE
51887: EQUAL
51888: IFTRUE 51892
51890: GO 51948
51892: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51893: LD_ADDR_VAR 0 9
51897: PUSH
51898: LD_VAR 0 11
51902: PUSH
51903: LD_VAR 0 12
51907: PUSH
51908: LD_VAR 0 13
51912: PUSH
51913: LD_VAR 0 14
51917: PUSH
51918: LD_VAR 0 15
51922: PUSH
51923: LD_VAR 0 16
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: PUSH
51936: LD_VAR 0 4
51940: PUSH
51941: LD_INT 1
51943: PLUS
51944: ARRAY
51945: ST_TO_ADDR
51946: GO 52077
51948: LD_INT 2
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51956
51954: GO 52012
51956: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51957: LD_ADDR_VAR 0 9
51961: PUSH
51962: LD_VAR 0 17
51966: PUSH
51967: LD_VAR 0 18
51971: PUSH
51972: LD_VAR 0 19
51976: PUSH
51977: LD_VAR 0 20
51981: PUSH
51982: LD_VAR 0 21
51986: PUSH
51987: LD_VAR 0 22
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: PUSH
52000: LD_VAR 0 4
52004: PUSH
52005: LD_INT 1
52007: PLUS
52008: ARRAY
52009: ST_TO_ADDR
52010: GO 52077
52012: LD_INT 3
52014: DOUBLE
52015: EQUAL
52016: IFTRUE 52020
52018: GO 52076
52020: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52021: LD_ADDR_VAR 0 9
52025: PUSH
52026: LD_VAR 0 23
52030: PUSH
52031: LD_VAR 0 24
52035: PUSH
52036: LD_VAR 0 25
52040: PUSH
52041: LD_VAR 0 26
52045: PUSH
52046: LD_VAR 0 27
52050: PUSH
52051: LD_VAR 0 28
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: PUSH
52064: LD_VAR 0 4
52068: PUSH
52069: LD_INT 1
52071: PLUS
52072: ARRAY
52073: ST_TO_ADDR
52074: GO 52077
52076: POP
52077: GO 52632
52079: LD_INT 2
52081: DOUBLE
52082: EQUAL
52083: IFTRUE 52093
52085: LD_INT 3
52087: DOUBLE
52088: EQUAL
52089: IFTRUE 52093
52091: GO 52149
52093: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52094: LD_ADDR_VAR 0 9
52098: PUSH
52099: LD_VAR 0 29
52103: PUSH
52104: LD_VAR 0 30
52108: PUSH
52109: LD_VAR 0 31
52113: PUSH
52114: LD_VAR 0 32
52118: PUSH
52119: LD_VAR 0 33
52123: PUSH
52124: LD_VAR 0 34
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: PUSH
52137: LD_VAR 0 4
52141: PUSH
52142: LD_INT 1
52144: PLUS
52145: ARRAY
52146: ST_TO_ADDR
52147: GO 52632
52149: LD_INT 16
52151: DOUBLE
52152: EQUAL
52153: IFTRUE 52211
52155: LD_INT 17
52157: DOUBLE
52158: EQUAL
52159: IFTRUE 52211
52161: LD_INT 18
52163: DOUBLE
52164: EQUAL
52165: IFTRUE 52211
52167: LD_INT 19
52169: DOUBLE
52170: EQUAL
52171: IFTRUE 52211
52173: LD_INT 22
52175: DOUBLE
52176: EQUAL
52177: IFTRUE 52211
52179: LD_INT 20
52181: DOUBLE
52182: EQUAL
52183: IFTRUE 52211
52185: LD_INT 21
52187: DOUBLE
52188: EQUAL
52189: IFTRUE 52211
52191: LD_INT 23
52193: DOUBLE
52194: EQUAL
52195: IFTRUE 52211
52197: LD_INT 24
52199: DOUBLE
52200: EQUAL
52201: IFTRUE 52211
52203: LD_INT 25
52205: DOUBLE
52206: EQUAL
52207: IFTRUE 52211
52209: GO 52267
52211: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52212: LD_ADDR_VAR 0 9
52216: PUSH
52217: LD_VAR 0 35
52221: PUSH
52222: LD_VAR 0 36
52226: PUSH
52227: LD_VAR 0 37
52231: PUSH
52232: LD_VAR 0 38
52236: PUSH
52237: LD_VAR 0 39
52241: PUSH
52242: LD_VAR 0 40
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: PUSH
52255: LD_VAR 0 4
52259: PUSH
52260: LD_INT 1
52262: PLUS
52263: ARRAY
52264: ST_TO_ADDR
52265: GO 52632
52267: LD_INT 6
52269: DOUBLE
52270: EQUAL
52271: IFTRUE 52323
52273: LD_INT 7
52275: DOUBLE
52276: EQUAL
52277: IFTRUE 52323
52279: LD_INT 8
52281: DOUBLE
52282: EQUAL
52283: IFTRUE 52323
52285: LD_INT 13
52287: DOUBLE
52288: EQUAL
52289: IFTRUE 52323
52291: LD_INT 12
52293: DOUBLE
52294: EQUAL
52295: IFTRUE 52323
52297: LD_INT 15
52299: DOUBLE
52300: EQUAL
52301: IFTRUE 52323
52303: LD_INT 11
52305: DOUBLE
52306: EQUAL
52307: IFTRUE 52323
52309: LD_INT 14
52311: DOUBLE
52312: EQUAL
52313: IFTRUE 52323
52315: LD_INT 10
52317: DOUBLE
52318: EQUAL
52319: IFTRUE 52323
52321: GO 52379
52323: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52324: LD_ADDR_VAR 0 9
52328: PUSH
52329: LD_VAR 0 41
52333: PUSH
52334: LD_VAR 0 42
52338: PUSH
52339: LD_VAR 0 43
52343: PUSH
52344: LD_VAR 0 44
52348: PUSH
52349: LD_VAR 0 45
52353: PUSH
52354: LD_VAR 0 46
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: PUSH
52367: LD_VAR 0 4
52371: PUSH
52372: LD_INT 1
52374: PLUS
52375: ARRAY
52376: ST_TO_ADDR
52377: GO 52632
52379: LD_INT 36
52381: DOUBLE
52382: EQUAL
52383: IFTRUE 52387
52385: GO 52443
52387: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52388: LD_ADDR_VAR 0 9
52392: PUSH
52393: LD_VAR 0 47
52397: PUSH
52398: LD_VAR 0 48
52402: PUSH
52403: LD_VAR 0 49
52407: PUSH
52408: LD_VAR 0 50
52412: PUSH
52413: LD_VAR 0 51
52417: PUSH
52418: LD_VAR 0 52
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: PUSH
52431: LD_VAR 0 4
52435: PUSH
52436: LD_INT 1
52438: PLUS
52439: ARRAY
52440: ST_TO_ADDR
52441: GO 52632
52443: LD_INT 4
52445: DOUBLE
52446: EQUAL
52447: IFTRUE 52469
52449: LD_INT 5
52451: DOUBLE
52452: EQUAL
52453: IFTRUE 52469
52455: LD_INT 34
52457: DOUBLE
52458: EQUAL
52459: IFTRUE 52469
52461: LD_INT 37
52463: DOUBLE
52464: EQUAL
52465: IFTRUE 52469
52467: GO 52525
52469: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52470: LD_ADDR_VAR 0 9
52474: PUSH
52475: LD_VAR 0 53
52479: PUSH
52480: LD_VAR 0 54
52484: PUSH
52485: LD_VAR 0 55
52489: PUSH
52490: LD_VAR 0 56
52494: PUSH
52495: LD_VAR 0 57
52499: PUSH
52500: LD_VAR 0 58
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: PUSH
52513: LD_VAR 0 4
52517: PUSH
52518: LD_INT 1
52520: PLUS
52521: ARRAY
52522: ST_TO_ADDR
52523: GO 52632
52525: LD_INT 31
52527: DOUBLE
52528: EQUAL
52529: IFTRUE 52575
52531: LD_INT 32
52533: DOUBLE
52534: EQUAL
52535: IFTRUE 52575
52537: LD_INT 33
52539: DOUBLE
52540: EQUAL
52541: IFTRUE 52575
52543: LD_INT 27
52545: DOUBLE
52546: EQUAL
52547: IFTRUE 52575
52549: LD_INT 26
52551: DOUBLE
52552: EQUAL
52553: IFTRUE 52575
52555: LD_INT 28
52557: DOUBLE
52558: EQUAL
52559: IFTRUE 52575
52561: LD_INT 29
52563: DOUBLE
52564: EQUAL
52565: IFTRUE 52575
52567: LD_INT 30
52569: DOUBLE
52570: EQUAL
52571: IFTRUE 52575
52573: GO 52631
52575: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52576: LD_ADDR_VAR 0 9
52580: PUSH
52581: LD_VAR 0 59
52585: PUSH
52586: LD_VAR 0 60
52590: PUSH
52591: LD_VAR 0 61
52595: PUSH
52596: LD_VAR 0 62
52600: PUSH
52601: LD_VAR 0 63
52605: PUSH
52606: LD_VAR 0 64
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: PUSH
52619: LD_VAR 0 4
52623: PUSH
52624: LD_INT 1
52626: PLUS
52627: ARRAY
52628: ST_TO_ADDR
52629: GO 52632
52631: POP
// temp_list2 = [ ] ;
52632: LD_ADDR_VAR 0 10
52636: PUSH
52637: EMPTY
52638: ST_TO_ADDR
// for i in temp_list do
52639: LD_ADDR_VAR 0 8
52643: PUSH
52644: LD_VAR 0 9
52648: PUSH
52649: FOR_IN
52650: IFFALSE 52702
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52652: LD_ADDR_VAR 0 10
52656: PUSH
52657: LD_VAR 0 10
52661: PUSH
52662: LD_VAR 0 8
52666: PUSH
52667: LD_INT 1
52669: ARRAY
52670: PUSH
52671: LD_VAR 0 2
52675: PLUS
52676: PUSH
52677: LD_VAR 0 8
52681: PUSH
52682: LD_INT 2
52684: ARRAY
52685: PUSH
52686: LD_VAR 0 3
52690: PLUS
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: ADD
52699: ST_TO_ADDR
52700: GO 52649
52702: POP
52703: POP
// result = temp_list2 ;
52704: LD_ADDR_VAR 0 7
52708: PUSH
52709: LD_VAR 0 10
52713: ST_TO_ADDR
// end ;
52714: LD_VAR 0 7
52718: RET
// export function EnemyInRange ( unit , dist ) ; begin
52719: LD_INT 0
52721: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52722: LD_ADDR_VAR 0 3
52726: PUSH
52727: LD_VAR 0 1
52731: PPUSH
52732: CALL_OW 255
52736: PPUSH
52737: LD_VAR 0 1
52741: PPUSH
52742: CALL_OW 250
52746: PPUSH
52747: LD_VAR 0 1
52751: PPUSH
52752: CALL_OW 251
52756: PPUSH
52757: LD_VAR 0 2
52761: PPUSH
52762: CALL 26121 0 4
52766: PUSH
52767: LD_INT 4
52769: ARRAY
52770: ST_TO_ADDR
// end ;
52771: LD_VAR 0 3
52775: RET
// export function PlayerSeeMe ( unit ) ; begin
52776: LD_INT 0
52778: PPUSH
// result := See ( your_side , unit ) ;
52779: LD_ADDR_VAR 0 2
52783: PUSH
52784: LD_OWVAR 2
52788: PPUSH
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL_OW 292
52798: ST_TO_ADDR
// end ;
52799: LD_VAR 0 2
52803: RET
// export function ReverseDir ( unit ) ; begin
52804: LD_INT 0
52806: PPUSH
// if not unit then
52807: LD_VAR 0 1
52811: NOT
52812: IFFALSE 52816
// exit ;
52814: GO 52839
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52816: LD_ADDR_VAR 0 2
52820: PUSH
52821: LD_VAR 0 1
52825: PPUSH
52826: CALL_OW 254
52830: PUSH
52831: LD_INT 3
52833: PLUS
52834: PUSH
52835: LD_INT 6
52837: MOD
52838: ST_TO_ADDR
// end ;
52839: LD_VAR 0 2
52843: RET
// export function ReverseArray ( array ) ; var i ; begin
52844: LD_INT 0
52846: PPUSH
52847: PPUSH
// if not array then
52848: LD_VAR 0 1
52852: NOT
52853: IFFALSE 52857
// exit ;
52855: GO 52912
// result := [ ] ;
52857: LD_ADDR_VAR 0 2
52861: PUSH
52862: EMPTY
52863: ST_TO_ADDR
// for i := array downto 1 do
52864: LD_ADDR_VAR 0 3
52868: PUSH
52869: DOUBLE
52870: LD_VAR 0 1
52874: INC
52875: ST_TO_ADDR
52876: LD_INT 1
52878: PUSH
52879: FOR_DOWNTO
52880: IFFALSE 52910
// result := Join ( result , array [ i ] ) ;
52882: LD_ADDR_VAR 0 2
52886: PUSH
52887: LD_VAR 0 2
52891: PPUSH
52892: LD_VAR 0 1
52896: PUSH
52897: LD_VAR 0 3
52901: ARRAY
52902: PPUSH
52903: CALL 57556 0 2
52907: ST_TO_ADDR
52908: GO 52879
52910: POP
52911: POP
// end ;
52912: LD_VAR 0 2
52916: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
52917: LD_INT 0
52919: PPUSH
52920: PPUSH
52921: PPUSH
52922: PPUSH
52923: PPUSH
52924: PPUSH
// if not unit or not hexes then
52925: LD_VAR 0 1
52929: NOT
52930: PUSH
52931: LD_VAR 0 2
52935: NOT
52936: OR
52937: IFFALSE 52941
// exit ;
52939: GO 53064
// dist := 9999 ;
52941: LD_ADDR_VAR 0 5
52945: PUSH
52946: LD_INT 9999
52948: ST_TO_ADDR
// for i = 1 to hexes do
52949: LD_ADDR_VAR 0 4
52953: PUSH
52954: DOUBLE
52955: LD_INT 1
52957: DEC
52958: ST_TO_ADDR
52959: LD_VAR 0 2
52963: PUSH
52964: FOR_TO
52965: IFFALSE 53052
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52967: LD_ADDR_VAR 0 6
52971: PUSH
52972: LD_VAR 0 1
52976: PPUSH
52977: LD_VAR 0 2
52981: PUSH
52982: LD_VAR 0 4
52986: ARRAY
52987: PUSH
52988: LD_INT 1
52990: ARRAY
52991: PPUSH
52992: LD_VAR 0 2
52996: PUSH
52997: LD_VAR 0 4
53001: ARRAY
53002: PUSH
53003: LD_INT 2
53005: ARRAY
53006: PPUSH
53007: CALL_OW 297
53011: ST_TO_ADDR
// if tdist < dist then
53012: LD_VAR 0 6
53016: PUSH
53017: LD_VAR 0 5
53021: LESS
53022: IFFALSE 53050
// begin hex := hexes [ i ] ;
53024: LD_ADDR_VAR 0 8
53028: PUSH
53029: LD_VAR 0 2
53033: PUSH
53034: LD_VAR 0 4
53038: ARRAY
53039: ST_TO_ADDR
// dist := tdist ;
53040: LD_ADDR_VAR 0 5
53044: PUSH
53045: LD_VAR 0 6
53049: ST_TO_ADDR
// end ; end ;
53050: GO 52964
53052: POP
53053: POP
// result := hex ;
53054: LD_ADDR_VAR 0 3
53058: PUSH
53059: LD_VAR 0 8
53063: ST_TO_ADDR
// end ;
53064: LD_VAR 0 3
53068: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53069: LD_INT 0
53071: PPUSH
53072: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53073: LD_VAR 0 1
53077: NOT
53078: PUSH
53079: LD_VAR 0 1
53083: PUSH
53084: LD_INT 21
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 23
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PPUSH
53108: CALL_OW 69
53112: IN
53113: NOT
53114: OR
53115: IFFALSE 53119
// exit ;
53117: GO 53166
// for i = 1 to 3 do
53119: LD_ADDR_VAR 0 3
53123: PUSH
53124: DOUBLE
53125: LD_INT 1
53127: DEC
53128: ST_TO_ADDR
53129: LD_INT 3
53131: PUSH
53132: FOR_TO
53133: IFFALSE 53164
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53135: LD_VAR 0 1
53139: PPUSH
53140: CALL_OW 250
53144: PPUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 251
53154: PPUSH
53155: LD_INT 1
53157: PPUSH
53158: CALL_OW 453
53162: GO 53132
53164: POP
53165: POP
// end ;
53166: LD_VAR 0 2
53170: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53171: LD_INT 0
53173: PPUSH
53174: PPUSH
53175: PPUSH
53176: PPUSH
53177: PPUSH
53178: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53179: LD_VAR 0 1
53183: NOT
53184: PUSH
53185: LD_VAR 0 2
53189: NOT
53190: OR
53191: PUSH
53192: LD_VAR 0 1
53196: PPUSH
53197: CALL_OW 314
53201: OR
53202: IFFALSE 53206
// exit ;
53204: GO 53673
// if GetLives ( i ) < 250 then
53206: LD_VAR 0 4
53210: PPUSH
53211: CALL_OW 256
53215: PUSH
53216: LD_INT 250
53218: LESS
53219: IFFALSE 53232
// begin ComAutodestruct ( i ) ;
53221: LD_VAR 0 4
53225: PPUSH
53226: CALL 53069 0 1
// exit ;
53230: GO 53673
// end ; x := GetX ( enemy_unit ) ;
53232: LD_ADDR_VAR 0 7
53236: PUSH
53237: LD_VAR 0 2
53241: PPUSH
53242: CALL_OW 250
53246: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53247: LD_ADDR_VAR 0 8
53251: PUSH
53252: LD_VAR 0 2
53256: PPUSH
53257: CALL_OW 251
53261: ST_TO_ADDR
// if not x or not y then
53262: LD_VAR 0 7
53266: NOT
53267: PUSH
53268: LD_VAR 0 8
53272: NOT
53273: OR
53274: IFFALSE 53278
// exit ;
53276: GO 53673
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53278: LD_ADDR_VAR 0 6
53282: PUSH
53283: LD_VAR 0 7
53287: PPUSH
53288: LD_INT 0
53290: PPUSH
53291: LD_INT 4
53293: PPUSH
53294: CALL_OW 272
53298: PUSH
53299: LD_VAR 0 8
53303: PPUSH
53304: LD_INT 0
53306: PPUSH
53307: LD_INT 4
53309: PPUSH
53310: CALL_OW 273
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_VAR 0 7
53323: PPUSH
53324: LD_INT 1
53326: PPUSH
53327: LD_INT 4
53329: PPUSH
53330: CALL_OW 272
53334: PUSH
53335: LD_VAR 0 8
53339: PPUSH
53340: LD_INT 1
53342: PPUSH
53343: LD_INT 4
53345: PPUSH
53346: CALL_OW 273
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_VAR 0 7
53359: PPUSH
53360: LD_INT 2
53362: PPUSH
53363: LD_INT 4
53365: PPUSH
53366: CALL_OW 272
53370: PUSH
53371: LD_VAR 0 8
53375: PPUSH
53376: LD_INT 2
53378: PPUSH
53379: LD_INT 4
53381: PPUSH
53382: CALL_OW 273
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_VAR 0 7
53395: PPUSH
53396: LD_INT 3
53398: PPUSH
53399: LD_INT 4
53401: PPUSH
53402: CALL_OW 272
53406: PUSH
53407: LD_VAR 0 8
53411: PPUSH
53412: LD_INT 3
53414: PPUSH
53415: LD_INT 4
53417: PPUSH
53418: CALL_OW 273
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_VAR 0 7
53431: PPUSH
53432: LD_INT 4
53434: PPUSH
53435: LD_INT 4
53437: PPUSH
53438: CALL_OW 272
53442: PUSH
53443: LD_VAR 0 8
53447: PPUSH
53448: LD_INT 4
53450: PPUSH
53451: LD_INT 4
53453: PPUSH
53454: CALL_OW 273
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_VAR 0 7
53467: PPUSH
53468: LD_INT 5
53470: PPUSH
53471: LD_INT 4
53473: PPUSH
53474: CALL_OW 272
53478: PUSH
53479: LD_VAR 0 8
53483: PPUSH
53484: LD_INT 5
53486: PPUSH
53487: LD_INT 4
53489: PPUSH
53490: CALL_OW 273
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: ST_TO_ADDR
// for i = tmp downto 1 do
53507: LD_ADDR_VAR 0 4
53511: PUSH
53512: DOUBLE
53513: LD_VAR 0 6
53517: INC
53518: ST_TO_ADDR
53519: LD_INT 1
53521: PUSH
53522: FOR_DOWNTO
53523: IFFALSE 53624
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53525: LD_VAR 0 6
53529: PUSH
53530: LD_VAR 0 4
53534: ARRAY
53535: PUSH
53536: LD_INT 1
53538: ARRAY
53539: PPUSH
53540: LD_VAR 0 6
53544: PUSH
53545: LD_VAR 0 4
53549: ARRAY
53550: PUSH
53551: LD_INT 2
53553: ARRAY
53554: PPUSH
53555: CALL_OW 488
53559: NOT
53560: PUSH
53561: LD_VAR 0 6
53565: PUSH
53566: LD_VAR 0 4
53570: ARRAY
53571: PUSH
53572: LD_INT 1
53574: ARRAY
53575: PPUSH
53576: LD_VAR 0 6
53580: PUSH
53581: LD_VAR 0 4
53585: ARRAY
53586: PUSH
53587: LD_INT 2
53589: ARRAY
53590: PPUSH
53591: CALL_OW 428
53595: PUSH
53596: LD_INT 0
53598: NONEQUAL
53599: OR
53600: IFFALSE 53622
// tmp := Delete ( tmp , i ) ;
53602: LD_ADDR_VAR 0 6
53606: PUSH
53607: LD_VAR 0 6
53611: PPUSH
53612: LD_VAR 0 4
53616: PPUSH
53617: CALL_OW 3
53621: ST_TO_ADDR
53622: GO 53522
53624: POP
53625: POP
// j := GetClosestHex ( unit , tmp ) ;
53626: LD_ADDR_VAR 0 5
53630: PUSH
53631: LD_VAR 0 1
53635: PPUSH
53636: LD_VAR 0 6
53640: PPUSH
53641: CALL 52917 0 2
53645: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53646: LD_VAR 0 1
53650: PPUSH
53651: LD_VAR 0 5
53655: PUSH
53656: LD_INT 1
53658: ARRAY
53659: PPUSH
53660: LD_VAR 0 5
53664: PUSH
53665: LD_INT 2
53667: ARRAY
53668: PPUSH
53669: CALL_OW 111
// end ;
53673: LD_VAR 0 3
53677: RET
// export function PrepareApemanSoldier ( ) ; begin
53678: LD_INT 0
53680: PPUSH
// uc_nation := 0 ;
53681: LD_ADDR_OWVAR 21
53685: PUSH
53686: LD_INT 0
53688: ST_TO_ADDR
// hc_sex := sex_male ;
53689: LD_ADDR_OWVAR 27
53693: PUSH
53694: LD_INT 1
53696: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
53697: LD_ADDR_OWVAR 28
53701: PUSH
53702: LD_INT 15
53704: ST_TO_ADDR
// hc_gallery :=  ;
53705: LD_ADDR_OWVAR 33
53709: PUSH
53710: LD_STRING 
53712: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53713: LD_ADDR_OWVAR 31
53717: PUSH
53718: LD_INT 0
53720: PPUSH
53721: LD_INT 3
53723: PPUSH
53724: CALL_OW 12
53728: PUSH
53729: LD_INT 0
53731: PPUSH
53732: LD_INT 3
53734: PPUSH
53735: CALL_OW 12
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// end ;
53752: LD_VAR 0 1
53756: RET
// export function PrepareApemanEngineer ( ) ; begin
53757: LD_INT 0
53759: PPUSH
// uc_nation := 0 ;
53760: LD_ADDR_OWVAR 21
53764: PUSH
53765: LD_INT 0
53767: ST_TO_ADDR
// hc_sex := sex_male ;
53768: LD_ADDR_OWVAR 27
53772: PUSH
53773: LD_INT 1
53775: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53776: LD_ADDR_OWVAR 28
53780: PUSH
53781: LD_INT 16
53783: ST_TO_ADDR
// hc_gallery :=  ;
53784: LD_ADDR_OWVAR 33
53788: PUSH
53789: LD_STRING 
53791: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53792: LD_ADDR_OWVAR 31
53796: PUSH
53797: LD_INT 0
53799: PPUSH
53800: LD_INT 3
53802: PPUSH
53803: CALL_OW 12
53807: PUSH
53808: LD_INT 0
53810: PPUSH
53811: LD_INT 3
53813: PPUSH
53814: CALL_OW 12
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: ST_TO_ADDR
// end ;
53831: LD_VAR 0 1
53835: RET
// export function PrepareApeman ( agressivity ) ; begin
53836: LD_INT 0
53838: PPUSH
// uc_side := 0 ;
53839: LD_ADDR_OWVAR 20
53843: PUSH
53844: LD_INT 0
53846: ST_TO_ADDR
// uc_nation := 0 ;
53847: LD_ADDR_OWVAR 21
53851: PUSH
53852: LD_INT 0
53854: ST_TO_ADDR
// hc_sex := sex_male ;
53855: LD_ADDR_OWVAR 27
53859: PUSH
53860: LD_INT 1
53862: ST_TO_ADDR
// hc_class := class_apeman ;
53863: LD_ADDR_OWVAR 28
53867: PUSH
53868: LD_INT 12
53870: ST_TO_ADDR
// hc_gallery :=  ;
53871: LD_ADDR_OWVAR 33
53875: PUSH
53876: LD_STRING 
53878: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53879: LD_ADDR_OWVAR 35
53883: PUSH
53884: LD_VAR 0 1
53888: NEG
53889: PPUSH
53890: LD_VAR 0 1
53894: PPUSH
53895: CALL_OW 12
53899: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53900: LD_ADDR_OWVAR 31
53904: PUSH
53905: LD_INT 0
53907: PPUSH
53908: LD_INT 3
53910: PPUSH
53911: CALL_OW 12
53915: PUSH
53916: LD_INT 0
53918: PPUSH
53919: LD_INT 3
53921: PPUSH
53922: CALL_OW 12
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: ST_TO_ADDR
// end ;
53939: LD_VAR 0 2
53943: RET
// export function PrepareTiger ( agressivity ) ; begin
53944: LD_INT 0
53946: PPUSH
// uc_side := 0 ;
53947: LD_ADDR_OWVAR 20
53951: PUSH
53952: LD_INT 0
53954: ST_TO_ADDR
// uc_nation := 0 ;
53955: LD_ADDR_OWVAR 21
53959: PUSH
53960: LD_INT 0
53962: ST_TO_ADDR
// hc_class := class_tiger ;
53963: LD_ADDR_OWVAR 28
53967: PUSH
53968: LD_INT 14
53970: ST_TO_ADDR
// hc_gallery :=  ;
53971: LD_ADDR_OWVAR 33
53975: PUSH
53976: LD_STRING 
53978: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53979: LD_ADDR_OWVAR 35
53983: PUSH
53984: LD_VAR 0 1
53988: NEG
53989: PPUSH
53990: LD_VAR 0 1
53994: PPUSH
53995: CALL_OW 12
53999: ST_TO_ADDR
// end ;
54000: LD_VAR 0 2
54004: RET
// export function PrepareEnchidna ( ) ; begin
54005: LD_INT 0
54007: PPUSH
// uc_side := 0 ;
54008: LD_ADDR_OWVAR 20
54012: PUSH
54013: LD_INT 0
54015: ST_TO_ADDR
// uc_nation := 0 ;
54016: LD_ADDR_OWVAR 21
54020: PUSH
54021: LD_INT 0
54023: ST_TO_ADDR
// hc_class := class_baggie ;
54024: LD_ADDR_OWVAR 28
54028: PUSH
54029: LD_INT 13
54031: ST_TO_ADDR
// hc_gallery :=  ;
54032: LD_ADDR_OWVAR 33
54036: PUSH
54037: LD_STRING 
54039: ST_TO_ADDR
// end ;
54040: LD_VAR 0 1
54044: RET
// export function PrepareFrog ( ) ; begin
54045: LD_INT 0
54047: PPUSH
// uc_side := 0 ;
54048: LD_ADDR_OWVAR 20
54052: PUSH
54053: LD_INT 0
54055: ST_TO_ADDR
// uc_nation := 0 ;
54056: LD_ADDR_OWVAR 21
54060: PUSH
54061: LD_INT 0
54063: ST_TO_ADDR
// hc_class := class_frog ;
54064: LD_ADDR_OWVAR 28
54068: PUSH
54069: LD_INT 19
54071: ST_TO_ADDR
// hc_gallery :=  ;
54072: LD_ADDR_OWVAR 33
54076: PUSH
54077: LD_STRING 
54079: ST_TO_ADDR
// end ;
54080: LD_VAR 0 1
54084: RET
// export function PrepareFish ( ) ; begin
54085: LD_INT 0
54087: PPUSH
// uc_side := 0 ;
54088: LD_ADDR_OWVAR 20
54092: PUSH
54093: LD_INT 0
54095: ST_TO_ADDR
// uc_nation := 0 ;
54096: LD_ADDR_OWVAR 21
54100: PUSH
54101: LD_INT 0
54103: ST_TO_ADDR
// hc_class := class_fish ;
54104: LD_ADDR_OWVAR 28
54108: PUSH
54109: LD_INT 20
54111: ST_TO_ADDR
// hc_gallery :=  ;
54112: LD_ADDR_OWVAR 33
54116: PUSH
54117: LD_STRING 
54119: ST_TO_ADDR
// end ;
54120: LD_VAR 0 1
54124: RET
// export function PrepareBird ( ) ; begin
54125: LD_INT 0
54127: PPUSH
// uc_side := 0 ;
54128: LD_ADDR_OWVAR 20
54132: PUSH
54133: LD_INT 0
54135: ST_TO_ADDR
// uc_nation := 0 ;
54136: LD_ADDR_OWVAR 21
54140: PUSH
54141: LD_INT 0
54143: ST_TO_ADDR
// hc_class := class_phororhacos ;
54144: LD_ADDR_OWVAR 28
54148: PUSH
54149: LD_INT 18
54151: ST_TO_ADDR
// hc_gallery :=  ;
54152: LD_ADDR_OWVAR 33
54156: PUSH
54157: LD_STRING 
54159: ST_TO_ADDR
// end ;
54160: LD_VAR 0 1
54164: RET
// export function PrepareHorse ( ) ; begin
54165: LD_INT 0
54167: PPUSH
// uc_side := 0 ;
54168: LD_ADDR_OWVAR 20
54172: PUSH
54173: LD_INT 0
54175: ST_TO_ADDR
// uc_nation := 0 ;
54176: LD_ADDR_OWVAR 21
54180: PUSH
54181: LD_INT 0
54183: ST_TO_ADDR
// hc_class := class_horse ;
54184: LD_ADDR_OWVAR 28
54188: PUSH
54189: LD_INT 21
54191: ST_TO_ADDR
// hc_gallery :=  ;
54192: LD_ADDR_OWVAR 33
54196: PUSH
54197: LD_STRING 
54199: ST_TO_ADDR
// end ;
54200: LD_VAR 0 1
54204: RET
// export function PrepareMastodont ( ) ; begin
54205: LD_INT 0
54207: PPUSH
// uc_side := 0 ;
54208: LD_ADDR_OWVAR 20
54212: PUSH
54213: LD_INT 0
54215: ST_TO_ADDR
// uc_nation := 0 ;
54216: LD_ADDR_OWVAR 21
54220: PUSH
54221: LD_INT 0
54223: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54224: LD_ADDR_OWVAR 37
54228: PUSH
54229: LD_INT 31
54231: ST_TO_ADDR
// vc_control := control_rider ;
54232: LD_ADDR_OWVAR 38
54236: PUSH
54237: LD_INT 4
54239: ST_TO_ADDR
// end ;
54240: LD_VAR 0 1
54244: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54245: LD_INT 0
54247: PPUSH
54248: PPUSH
54249: PPUSH
// uc_side = 0 ;
54250: LD_ADDR_OWVAR 20
54254: PUSH
54255: LD_INT 0
54257: ST_TO_ADDR
// uc_nation = 0 ;
54258: LD_ADDR_OWVAR 21
54262: PUSH
54263: LD_INT 0
54265: ST_TO_ADDR
// InitHc_All ( ) ;
54266: CALL_OW 584
// InitVc ;
54270: CALL_OW 20
// if mastodonts then
54274: LD_VAR 0 6
54278: IFFALSE 54345
// for i = 1 to mastodonts do
54280: LD_ADDR_VAR 0 11
54284: PUSH
54285: DOUBLE
54286: LD_INT 1
54288: DEC
54289: ST_TO_ADDR
54290: LD_VAR 0 6
54294: PUSH
54295: FOR_TO
54296: IFFALSE 54343
// begin vc_chassis := 31 ;
54298: LD_ADDR_OWVAR 37
54302: PUSH
54303: LD_INT 31
54305: ST_TO_ADDR
// vc_control := control_rider ;
54306: LD_ADDR_OWVAR 38
54310: PUSH
54311: LD_INT 4
54313: ST_TO_ADDR
// animal := CreateVehicle ;
54314: LD_ADDR_VAR 0 12
54318: PUSH
54319: CALL_OW 45
54323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54324: LD_VAR 0 12
54328: PPUSH
54329: LD_VAR 0 8
54333: PPUSH
54334: LD_INT 0
54336: PPUSH
54337: CALL 56473 0 3
// end ;
54341: GO 54295
54343: POP
54344: POP
// if horses then
54345: LD_VAR 0 5
54349: IFFALSE 54416
// for i = 1 to horses do
54351: LD_ADDR_VAR 0 11
54355: PUSH
54356: DOUBLE
54357: LD_INT 1
54359: DEC
54360: ST_TO_ADDR
54361: LD_VAR 0 5
54365: PUSH
54366: FOR_TO
54367: IFFALSE 54414
// begin hc_class := 21 ;
54369: LD_ADDR_OWVAR 28
54373: PUSH
54374: LD_INT 21
54376: ST_TO_ADDR
// hc_gallery :=  ;
54377: LD_ADDR_OWVAR 33
54381: PUSH
54382: LD_STRING 
54384: ST_TO_ADDR
// animal := CreateHuman ;
54385: LD_ADDR_VAR 0 12
54389: PUSH
54390: CALL_OW 44
54394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54395: LD_VAR 0 12
54399: PPUSH
54400: LD_VAR 0 8
54404: PPUSH
54405: LD_INT 0
54407: PPUSH
54408: CALL 56473 0 3
// end ;
54412: GO 54366
54414: POP
54415: POP
// if birds then
54416: LD_VAR 0 1
54420: IFFALSE 54487
// for i = 1 to birds do
54422: LD_ADDR_VAR 0 11
54426: PUSH
54427: DOUBLE
54428: LD_INT 1
54430: DEC
54431: ST_TO_ADDR
54432: LD_VAR 0 1
54436: PUSH
54437: FOR_TO
54438: IFFALSE 54485
// begin hc_class = 18 ;
54440: LD_ADDR_OWVAR 28
54444: PUSH
54445: LD_INT 18
54447: ST_TO_ADDR
// hc_gallery =  ;
54448: LD_ADDR_OWVAR 33
54452: PUSH
54453: LD_STRING 
54455: ST_TO_ADDR
// animal := CreateHuman ;
54456: LD_ADDR_VAR 0 12
54460: PUSH
54461: CALL_OW 44
54465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54466: LD_VAR 0 12
54470: PPUSH
54471: LD_VAR 0 8
54475: PPUSH
54476: LD_INT 0
54478: PPUSH
54479: CALL 56473 0 3
// end ;
54483: GO 54437
54485: POP
54486: POP
// if tigers then
54487: LD_VAR 0 2
54491: IFFALSE 54575
// for i = 1 to tigers do
54493: LD_ADDR_VAR 0 11
54497: PUSH
54498: DOUBLE
54499: LD_INT 1
54501: DEC
54502: ST_TO_ADDR
54503: LD_VAR 0 2
54507: PUSH
54508: FOR_TO
54509: IFFALSE 54573
// begin hc_class = class_tiger ;
54511: LD_ADDR_OWVAR 28
54515: PUSH
54516: LD_INT 14
54518: ST_TO_ADDR
// hc_gallery =  ;
54519: LD_ADDR_OWVAR 33
54523: PUSH
54524: LD_STRING 
54526: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54527: LD_ADDR_OWVAR 35
54531: PUSH
54532: LD_INT 7
54534: NEG
54535: PPUSH
54536: LD_INT 7
54538: PPUSH
54539: CALL_OW 12
54543: ST_TO_ADDR
// animal := CreateHuman ;
54544: LD_ADDR_VAR 0 12
54548: PUSH
54549: CALL_OW 44
54553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54554: LD_VAR 0 12
54558: PPUSH
54559: LD_VAR 0 8
54563: PPUSH
54564: LD_INT 0
54566: PPUSH
54567: CALL 56473 0 3
// end ;
54571: GO 54508
54573: POP
54574: POP
// if apemans then
54575: LD_VAR 0 3
54579: IFFALSE 54702
// for i = 1 to apemans do
54581: LD_ADDR_VAR 0 11
54585: PUSH
54586: DOUBLE
54587: LD_INT 1
54589: DEC
54590: ST_TO_ADDR
54591: LD_VAR 0 3
54595: PUSH
54596: FOR_TO
54597: IFFALSE 54700
// begin hc_class = class_apeman ;
54599: LD_ADDR_OWVAR 28
54603: PUSH
54604: LD_INT 12
54606: ST_TO_ADDR
// hc_gallery =  ;
54607: LD_ADDR_OWVAR 33
54611: PUSH
54612: LD_STRING 
54614: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54615: LD_ADDR_OWVAR 35
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PPUSH
54624: LD_INT 2
54626: PPUSH
54627: CALL_OW 12
54631: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54632: LD_ADDR_OWVAR 31
54636: PUSH
54637: LD_INT 1
54639: PPUSH
54640: LD_INT 3
54642: PPUSH
54643: CALL_OW 12
54647: PUSH
54648: LD_INT 1
54650: PPUSH
54651: LD_INT 3
54653: PPUSH
54654: CALL_OW 12
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: ST_TO_ADDR
// animal := CreateHuman ;
54671: LD_ADDR_VAR 0 12
54675: PUSH
54676: CALL_OW 44
54680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54681: LD_VAR 0 12
54685: PPUSH
54686: LD_VAR 0 8
54690: PPUSH
54691: LD_INT 0
54693: PPUSH
54694: CALL 56473 0 3
// end ;
54698: GO 54596
54700: POP
54701: POP
// if enchidnas then
54702: LD_VAR 0 4
54706: IFFALSE 54773
// for i = 1 to enchidnas do
54708: LD_ADDR_VAR 0 11
54712: PUSH
54713: DOUBLE
54714: LD_INT 1
54716: DEC
54717: ST_TO_ADDR
54718: LD_VAR 0 4
54722: PUSH
54723: FOR_TO
54724: IFFALSE 54771
// begin hc_class = 13 ;
54726: LD_ADDR_OWVAR 28
54730: PUSH
54731: LD_INT 13
54733: ST_TO_ADDR
// hc_gallery =  ;
54734: LD_ADDR_OWVAR 33
54738: PUSH
54739: LD_STRING 
54741: ST_TO_ADDR
// animal := CreateHuman ;
54742: LD_ADDR_VAR 0 12
54746: PUSH
54747: CALL_OW 44
54751: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54752: LD_VAR 0 12
54756: PPUSH
54757: LD_VAR 0 8
54761: PPUSH
54762: LD_INT 0
54764: PPUSH
54765: CALL 56473 0 3
// end ;
54769: GO 54723
54771: POP
54772: POP
// if fishes then
54773: LD_VAR 0 7
54777: IFFALSE 54844
// for i = 1 to fishes do
54779: LD_ADDR_VAR 0 11
54783: PUSH
54784: DOUBLE
54785: LD_INT 1
54787: DEC
54788: ST_TO_ADDR
54789: LD_VAR 0 7
54793: PUSH
54794: FOR_TO
54795: IFFALSE 54842
// begin hc_class = 20 ;
54797: LD_ADDR_OWVAR 28
54801: PUSH
54802: LD_INT 20
54804: ST_TO_ADDR
// hc_gallery =  ;
54805: LD_ADDR_OWVAR 33
54809: PUSH
54810: LD_STRING 
54812: ST_TO_ADDR
// animal := CreateHuman ;
54813: LD_ADDR_VAR 0 12
54817: PUSH
54818: CALL_OW 44
54822: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54823: LD_VAR 0 12
54827: PPUSH
54828: LD_VAR 0 9
54832: PPUSH
54833: LD_INT 0
54835: PPUSH
54836: CALL 56473 0 3
// end ;
54840: GO 54794
54842: POP
54843: POP
// end ;
54844: LD_VAR 0 10
54848: RET
// export function WantHeal ( sci , unit ) ; begin
54849: LD_INT 0
54851: PPUSH
// if GetTaskList ( sci ) > 0 then
54852: LD_VAR 0 1
54856: PPUSH
54857: CALL_OW 437
54861: PUSH
54862: LD_INT 0
54864: GREATER
54865: IFFALSE 54935
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54867: LD_VAR 0 1
54871: PPUSH
54872: CALL_OW 437
54876: PUSH
54877: LD_INT 1
54879: ARRAY
54880: PUSH
54881: LD_INT 1
54883: ARRAY
54884: PUSH
54885: LD_STRING l
54887: EQUAL
54888: PUSH
54889: LD_VAR 0 1
54893: PPUSH
54894: CALL_OW 437
54898: PUSH
54899: LD_INT 1
54901: ARRAY
54902: PUSH
54903: LD_INT 4
54905: ARRAY
54906: PUSH
54907: LD_VAR 0 2
54911: EQUAL
54912: AND
54913: IFFALSE 54925
// result := true else
54915: LD_ADDR_VAR 0 3
54919: PUSH
54920: LD_INT 1
54922: ST_TO_ADDR
54923: GO 54933
// result := false ;
54925: LD_ADDR_VAR 0 3
54929: PUSH
54930: LD_INT 0
54932: ST_TO_ADDR
// end else
54933: GO 54943
// result := false ;
54935: LD_ADDR_VAR 0 3
54939: PUSH
54940: LD_INT 0
54942: ST_TO_ADDR
// end ;
54943: LD_VAR 0 3
54947: RET
// export function HealTarget ( sci ) ; begin
54948: LD_INT 0
54950: PPUSH
// if not sci then
54951: LD_VAR 0 1
54955: NOT
54956: IFFALSE 54960
// exit ;
54958: GO 55025
// result := 0 ;
54960: LD_ADDR_VAR 0 2
54964: PUSH
54965: LD_INT 0
54967: ST_TO_ADDR
// if GetTaskList ( sci ) then
54968: LD_VAR 0 1
54972: PPUSH
54973: CALL_OW 437
54977: IFFALSE 55025
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54979: LD_VAR 0 1
54983: PPUSH
54984: CALL_OW 437
54988: PUSH
54989: LD_INT 1
54991: ARRAY
54992: PUSH
54993: LD_INT 1
54995: ARRAY
54996: PUSH
54997: LD_STRING l
54999: EQUAL
55000: IFFALSE 55025
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55002: LD_ADDR_VAR 0 2
55006: PUSH
55007: LD_VAR 0 1
55011: PPUSH
55012: CALL_OW 437
55016: PUSH
55017: LD_INT 1
55019: ARRAY
55020: PUSH
55021: LD_INT 4
55023: ARRAY
55024: ST_TO_ADDR
// end ;
55025: LD_VAR 0 2
55029: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55030: LD_INT 0
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
// if not base_units then
55036: LD_VAR 0 1
55040: NOT
55041: IFFALSE 55045
// exit ;
55043: GO 55132
// result := false ;
55045: LD_ADDR_VAR 0 2
55049: PUSH
55050: LD_INT 0
55052: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55053: LD_ADDR_VAR 0 5
55057: PUSH
55058: LD_VAR 0 1
55062: PPUSH
55063: LD_INT 21
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PPUSH
55073: CALL_OW 72
55077: ST_TO_ADDR
// if not tmp then
55078: LD_VAR 0 5
55082: NOT
55083: IFFALSE 55087
// exit ;
55085: GO 55132
// for i in tmp do
55087: LD_ADDR_VAR 0 3
55091: PUSH
55092: LD_VAR 0 5
55096: PUSH
55097: FOR_IN
55098: IFFALSE 55130
// begin result := EnemyInRange ( i , 22 ) ;
55100: LD_ADDR_VAR 0 2
55104: PUSH
55105: LD_VAR 0 3
55109: PPUSH
55110: LD_INT 22
55112: PPUSH
55113: CALL 52719 0 2
55117: ST_TO_ADDR
// if result then
55118: LD_VAR 0 2
55122: IFFALSE 55128
// exit ;
55124: POP
55125: POP
55126: GO 55132
// end ;
55128: GO 55097
55130: POP
55131: POP
// end ;
55132: LD_VAR 0 2
55136: RET
// export function FilterByTag ( units , tag ) ; begin
55137: LD_INT 0
55139: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55140: LD_ADDR_VAR 0 3
55144: PUSH
55145: LD_VAR 0 1
55149: PPUSH
55150: LD_INT 120
55152: PUSH
55153: LD_VAR 0 2
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PPUSH
55162: CALL_OW 72
55166: ST_TO_ADDR
// end ;
55167: LD_VAR 0 3
55171: RET
// export function IsDriver ( un ) ; begin
55172: LD_INT 0
55174: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55175: LD_ADDR_VAR 0 2
55179: PUSH
55180: LD_VAR 0 1
55184: PUSH
55185: LD_INT 55
55187: PUSH
55188: EMPTY
55189: LIST
55190: PPUSH
55191: CALL_OW 69
55195: IN
55196: ST_TO_ADDR
// end ;
55197: LD_VAR 0 2
55201: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55202: LD_INT 0
55204: PPUSH
55205: PPUSH
// list := [ ] ;
55206: LD_ADDR_VAR 0 5
55210: PUSH
55211: EMPTY
55212: ST_TO_ADDR
// case d of 0 :
55213: LD_VAR 0 3
55217: PUSH
55218: LD_INT 0
55220: DOUBLE
55221: EQUAL
55222: IFTRUE 55226
55224: GO 55359
55226: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55227: LD_ADDR_VAR 0 5
55231: PUSH
55232: LD_VAR 0 1
55236: PUSH
55237: LD_INT 4
55239: MINUS
55240: PUSH
55241: LD_VAR 0 2
55245: PUSH
55246: LD_INT 4
55248: MINUS
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: LIST
55257: PUSH
55258: LD_VAR 0 1
55262: PUSH
55263: LD_INT 3
55265: MINUS
55266: PUSH
55267: LD_VAR 0 2
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: PUSH
55280: LD_VAR 0 1
55284: PUSH
55285: LD_INT 4
55287: PLUS
55288: PUSH
55289: LD_VAR 0 2
55293: PUSH
55294: LD_INT 4
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: PUSH
55302: LD_VAR 0 1
55306: PUSH
55307: LD_INT 3
55309: PLUS
55310: PUSH
55311: LD_VAR 0 2
55315: PUSH
55316: LD_INT 3
55318: PLUS
55319: PUSH
55320: LD_INT 5
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: LIST
55327: PUSH
55328: LD_VAR 0 1
55332: PUSH
55333: LD_VAR 0 2
55337: PUSH
55338: LD_INT 4
55340: PLUS
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: ST_TO_ADDR
// end ; 1 :
55357: GO 56057
55359: LD_INT 1
55361: DOUBLE
55362: EQUAL
55363: IFTRUE 55367
55365: GO 55500
55367: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55368: LD_ADDR_VAR 0 5
55372: PUSH
55373: LD_VAR 0 1
55377: PUSH
55378: LD_VAR 0 2
55382: PUSH
55383: LD_INT 4
55385: MINUS
55386: PUSH
55387: LD_INT 3
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: PUSH
55395: LD_VAR 0 1
55399: PUSH
55400: LD_INT 3
55402: MINUS
55403: PUSH
55404: LD_VAR 0 2
55408: PUSH
55409: LD_INT 3
55411: MINUS
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: PUSH
55421: LD_VAR 0 1
55425: PUSH
55426: LD_INT 4
55428: MINUS
55429: PUSH
55430: LD_VAR 0 2
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: LIST
55442: PUSH
55443: LD_VAR 0 1
55447: PUSH
55448: LD_VAR 0 2
55452: PUSH
55453: LD_INT 3
55455: PLUS
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: LIST
55464: PUSH
55465: LD_VAR 0 1
55469: PUSH
55470: LD_INT 4
55472: PLUS
55473: PUSH
55474: LD_VAR 0 2
55478: PUSH
55479: LD_INT 4
55481: PLUS
55482: PUSH
55483: LD_INT 5
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: ST_TO_ADDR
// end ; 2 :
55498: GO 56057
55500: LD_INT 2
55502: DOUBLE
55503: EQUAL
55504: IFTRUE 55508
55506: GO 55637
55508: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55509: LD_ADDR_VAR 0 5
55513: PUSH
55514: LD_VAR 0 1
55518: PUSH
55519: LD_VAR 0 2
55523: PUSH
55524: LD_INT 3
55526: MINUS
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: PUSH
55536: LD_VAR 0 1
55540: PUSH
55541: LD_INT 4
55543: PLUS
55544: PUSH
55545: LD_VAR 0 2
55549: PUSH
55550: LD_INT 4
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: PUSH
55558: LD_VAR 0 1
55562: PUSH
55563: LD_VAR 0 2
55567: PUSH
55568: LD_INT 4
55570: PLUS
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: PUSH
55580: LD_VAR 0 1
55584: PUSH
55585: LD_INT 3
55587: MINUS
55588: PUSH
55589: LD_VAR 0 2
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: PUSH
55602: LD_VAR 0 1
55606: PUSH
55607: LD_INT 4
55609: MINUS
55610: PUSH
55611: LD_VAR 0 2
55615: PUSH
55616: LD_INT 4
55618: MINUS
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: LIST
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// end ; 3 :
55635: GO 56057
55637: LD_INT 3
55639: DOUBLE
55640: EQUAL
55641: IFTRUE 55645
55643: GO 55778
55645: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55646: LD_ADDR_VAR 0 5
55650: PUSH
55651: LD_VAR 0 1
55655: PUSH
55656: LD_INT 3
55658: PLUS
55659: PUSH
55660: LD_VAR 0 2
55664: PUSH
55665: LD_INT 4
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: LIST
55672: PUSH
55673: LD_VAR 0 1
55677: PUSH
55678: LD_INT 4
55680: PLUS
55681: PUSH
55682: LD_VAR 0 2
55686: PUSH
55687: LD_INT 4
55689: PLUS
55690: PUSH
55691: LD_INT 5
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: PUSH
55699: LD_VAR 0 1
55703: PUSH
55704: LD_INT 4
55706: MINUS
55707: PUSH
55708: LD_VAR 0 2
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: PUSH
55721: LD_VAR 0 1
55725: PUSH
55726: LD_VAR 0 2
55730: PUSH
55731: LD_INT 4
55733: MINUS
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: PUSH
55743: LD_VAR 0 1
55747: PUSH
55748: LD_INT 3
55750: MINUS
55751: PUSH
55752: LD_VAR 0 2
55756: PUSH
55757: LD_INT 3
55759: MINUS
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: ST_TO_ADDR
// end ; 4 :
55776: GO 56057
55778: LD_INT 4
55780: DOUBLE
55781: EQUAL
55782: IFTRUE 55786
55784: GO 55919
55786: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55787: LD_ADDR_VAR 0 5
55791: PUSH
55792: LD_VAR 0 1
55796: PUSH
55797: LD_VAR 0 2
55801: PUSH
55802: LD_INT 4
55804: PLUS
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: PUSH
55814: LD_VAR 0 1
55818: PUSH
55819: LD_INT 3
55821: PLUS
55822: PUSH
55823: LD_VAR 0 2
55827: PUSH
55828: LD_INT 3
55830: PLUS
55831: PUSH
55832: LD_INT 5
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: PUSH
55840: LD_VAR 0 1
55844: PUSH
55845: LD_INT 4
55847: PLUS
55848: PUSH
55849: LD_VAR 0 2
55853: PUSH
55854: LD_INT 4
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: LIST
55861: PUSH
55862: LD_VAR 0 1
55866: PUSH
55867: LD_VAR 0 2
55871: PUSH
55872: LD_INT 3
55874: MINUS
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: LIST
55883: PUSH
55884: LD_VAR 0 1
55888: PUSH
55889: LD_INT 4
55891: MINUS
55892: PUSH
55893: LD_VAR 0 2
55897: PUSH
55898: LD_INT 4
55900: MINUS
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: ST_TO_ADDR
// end ; 5 :
55917: GO 56057
55919: LD_INT 5
55921: DOUBLE
55922: EQUAL
55923: IFTRUE 55927
55925: GO 56056
55927: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55928: LD_ADDR_VAR 0 5
55932: PUSH
55933: LD_VAR 0 1
55937: PUSH
55938: LD_INT 4
55940: MINUS
55941: PUSH
55942: LD_VAR 0 2
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: PUSH
55955: LD_VAR 0 1
55959: PUSH
55960: LD_VAR 0 2
55964: PUSH
55965: LD_INT 4
55967: MINUS
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: PUSH
55977: LD_VAR 0 1
55981: PUSH
55982: LD_INT 4
55984: PLUS
55985: PUSH
55986: LD_VAR 0 2
55990: PUSH
55991: LD_INT 4
55993: PLUS
55994: PUSH
55995: LD_INT 5
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: PUSH
56003: LD_VAR 0 1
56007: PUSH
56008: LD_INT 3
56010: PLUS
56011: PUSH
56012: LD_VAR 0 2
56016: PUSH
56017: LD_INT 4
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: PUSH
56025: LD_VAR 0 1
56029: PUSH
56030: LD_VAR 0 2
56034: PUSH
56035: LD_INT 3
56037: PLUS
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// end ; end ;
56054: GO 56057
56056: POP
// result := list ;
56057: LD_ADDR_VAR 0 4
56061: PUSH
56062: LD_VAR 0 5
56066: ST_TO_ADDR
// end ;
56067: LD_VAR 0 4
56071: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56072: LD_INT 0
56074: PPUSH
56075: PPUSH
56076: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56077: LD_VAR 0 1
56081: NOT
56082: PUSH
56083: LD_VAR 0 2
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: LD_INT 4
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: IN
56106: NOT
56107: OR
56108: IFFALSE 56112
// exit ;
56110: GO 56195
// tmp := [ ] ;
56112: LD_ADDR_VAR 0 5
56116: PUSH
56117: EMPTY
56118: ST_TO_ADDR
// for i in units do
56119: LD_ADDR_VAR 0 4
56123: PUSH
56124: LD_VAR 0 1
56128: PUSH
56129: FOR_IN
56130: IFFALSE 56164
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56132: LD_ADDR_VAR 0 5
56136: PUSH
56137: LD_VAR 0 5
56141: PPUSH
56142: LD_VAR 0 4
56146: PPUSH
56147: LD_VAR 0 2
56151: PPUSH
56152: CALL_OW 259
56156: PPUSH
56157: CALL 57556 0 2
56161: ST_TO_ADDR
56162: GO 56129
56164: POP
56165: POP
// if not tmp then
56166: LD_VAR 0 5
56170: NOT
56171: IFFALSE 56175
// exit ;
56173: GO 56195
// result := SortListByListDesc ( units , tmp ) ;
56175: LD_ADDR_VAR 0 3
56179: PUSH
56180: LD_VAR 0 1
56184: PPUSH
56185: LD_VAR 0 5
56189: PPUSH
56190: CALL_OW 77
56194: ST_TO_ADDR
// end ;
56195: LD_VAR 0 3
56199: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56200: LD_INT 0
56202: PPUSH
56203: PPUSH
56204: PPUSH
// result := false ;
56205: LD_ADDR_VAR 0 3
56209: PUSH
56210: LD_INT 0
56212: ST_TO_ADDR
// if not building then
56213: LD_VAR 0 2
56217: NOT
56218: IFFALSE 56222
// exit ;
56220: GO 56360
// x := GetX ( building ) ;
56222: LD_ADDR_VAR 0 4
56226: PUSH
56227: LD_VAR 0 2
56231: PPUSH
56232: CALL_OW 250
56236: ST_TO_ADDR
// y := GetY ( building ) ;
56237: LD_ADDR_VAR 0 5
56241: PUSH
56242: LD_VAR 0 2
56246: PPUSH
56247: CALL_OW 251
56251: ST_TO_ADDR
// if not x or not y then
56252: LD_VAR 0 4
56256: NOT
56257: PUSH
56258: LD_VAR 0 5
56262: NOT
56263: OR
56264: IFFALSE 56268
// exit ;
56266: GO 56360
// if GetTaskList ( unit ) then
56268: LD_VAR 0 1
56272: PPUSH
56273: CALL_OW 437
56277: IFFALSE 56360
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56279: LD_STRING e
56281: PUSH
56282: LD_VAR 0 1
56286: PPUSH
56287: CALL_OW 437
56291: PUSH
56292: LD_INT 1
56294: ARRAY
56295: PUSH
56296: LD_INT 1
56298: ARRAY
56299: EQUAL
56300: PUSH
56301: LD_VAR 0 4
56305: PUSH
56306: LD_VAR 0 1
56310: PPUSH
56311: CALL_OW 437
56315: PUSH
56316: LD_INT 1
56318: ARRAY
56319: PUSH
56320: LD_INT 2
56322: ARRAY
56323: EQUAL
56324: AND
56325: PUSH
56326: LD_VAR 0 5
56330: PUSH
56331: LD_VAR 0 1
56335: PPUSH
56336: CALL_OW 437
56340: PUSH
56341: LD_INT 1
56343: ARRAY
56344: PUSH
56345: LD_INT 3
56347: ARRAY
56348: EQUAL
56349: AND
56350: IFFALSE 56360
// result := true end ;
56352: LD_ADDR_VAR 0 3
56356: PUSH
56357: LD_INT 1
56359: ST_TO_ADDR
// end ;
56360: LD_VAR 0 3
56364: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56365: LD_INT 0
56367: PPUSH
// result := false ;
56368: LD_ADDR_VAR 0 4
56372: PUSH
56373: LD_INT 0
56375: ST_TO_ADDR
// if GetTaskList ( unit ) then
56376: LD_VAR 0 1
56380: PPUSH
56381: CALL_OW 437
56385: IFFALSE 56468
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56387: LD_STRING M
56389: PUSH
56390: LD_VAR 0 1
56394: PPUSH
56395: CALL_OW 437
56399: PUSH
56400: LD_INT 1
56402: ARRAY
56403: PUSH
56404: LD_INT 1
56406: ARRAY
56407: EQUAL
56408: PUSH
56409: LD_VAR 0 2
56413: PUSH
56414: LD_VAR 0 1
56418: PPUSH
56419: CALL_OW 437
56423: PUSH
56424: LD_INT 1
56426: ARRAY
56427: PUSH
56428: LD_INT 2
56430: ARRAY
56431: EQUAL
56432: AND
56433: PUSH
56434: LD_VAR 0 3
56438: PUSH
56439: LD_VAR 0 1
56443: PPUSH
56444: CALL_OW 437
56448: PUSH
56449: LD_INT 1
56451: ARRAY
56452: PUSH
56453: LD_INT 3
56455: ARRAY
56456: EQUAL
56457: AND
56458: IFFALSE 56468
// result := true ;
56460: LD_ADDR_VAR 0 4
56464: PUSH
56465: LD_INT 1
56467: ST_TO_ADDR
// end ; end ;
56468: LD_VAR 0 4
56472: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56473: LD_INT 0
56475: PPUSH
56476: PPUSH
56477: PPUSH
56478: PPUSH
// if not unit or not area then
56479: LD_VAR 0 1
56483: NOT
56484: PUSH
56485: LD_VAR 0 2
56489: NOT
56490: OR
56491: IFFALSE 56495
// exit ;
56493: GO 56659
// tmp := AreaToList ( area , i ) ;
56495: LD_ADDR_VAR 0 6
56499: PUSH
56500: LD_VAR 0 2
56504: PPUSH
56505: LD_VAR 0 5
56509: PPUSH
56510: CALL_OW 517
56514: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56515: LD_ADDR_VAR 0 5
56519: PUSH
56520: DOUBLE
56521: LD_INT 1
56523: DEC
56524: ST_TO_ADDR
56525: LD_VAR 0 6
56529: PUSH
56530: LD_INT 1
56532: ARRAY
56533: PUSH
56534: FOR_TO
56535: IFFALSE 56657
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56537: LD_ADDR_VAR 0 7
56541: PUSH
56542: LD_VAR 0 6
56546: PUSH
56547: LD_INT 1
56549: ARRAY
56550: PUSH
56551: LD_VAR 0 5
56555: ARRAY
56556: PUSH
56557: LD_VAR 0 6
56561: PUSH
56562: LD_INT 2
56564: ARRAY
56565: PUSH
56566: LD_VAR 0 5
56570: ARRAY
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56576: LD_VAR 0 7
56580: PUSH
56581: LD_INT 1
56583: ARRAY
56584: PPUSH
56585: LD_VAR 0 7
56589: PUSH
56590: LD_INT 2
56592: ARRAY
56593: PPUSH
56594: CALL_OW 428
56598: PUSH
56599: LD_INT 0
56601: EQUAL
56602: IFFALSE 56655
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56604: LD_VAR 0 1
56608: PPUSH
56609: LD_VAR 0 7
56613: PUSH
56614: LD_INT 1
56616: ARRAY
56617: PPUSH
56618: LD_VAR 0 7
56622: PUSH
56623: LD_INT 2
56625: ARRAY
56626: PPUSH
56627: LD_VAR 0 3
56631: PPUSH
56632: CALL_OW 48
// result := IsPlaced ( unit ) ;
56636: LD_ADDR_VAR 0 4
56640: PUSH
56641: LD_VAR 0 1
56645: PPUSH
56646: CALL_OW 305
56650: ST_TO_ADDR
// exit ;
56651: POP
56652: POP
56653: GO 56659
// end ; end ;
56655: GO 56534
56657: POP
56658: POP
// end ;
56659: LD_VAR 0 4
56663: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56664: LD_INT 0
56666: PPUSH
56667: PPUSH
56668: PPUSH
// if not side or side > 8 then
56669: LD_VAR 0 1
56673: NOT
56674: PUSH
56675: LD_VAR 0 1
56679: PUSH
56680: LD_INT 8
56682: GREATER
56683: OR
56684: IFFALSE 56688
// exit ;
56686: GO 56875
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56688: LD_ADDR_VAR 0 4
56692: PUSH
56693: LD_INT 22
56695: PUSH
56696: LD_VAR 0 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 21
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PPUSH
56719: CALL_OW 69
56723: ST_TO_ADDR
// if not tmp then
56724: LD_VAR 0 4
56728: NOT
56729: IFFALSE 56733
// exit ;
56731: GO 56875
// enable_addtolog := true ;
56733: LD_ADDR_OWVAR 81
56737: PUSH
56738: LD_INT 1
56740: ST_TO_ADDR
// AddToLog ( [ ) ;
56741: LD_STRING [
56743: PPUSH
56744: CALL_OW 561
// for i in tmp do
56748: LD_ADDR_VAR 0 3
56752: PUSH
56753: LD_VAR 0 4
56757: PUSH
56758: FOR_IN
56759: IFFALSE 56866
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56761: LD_STRING [
56763: PUSH
56764: LD_VAR 0 3
56768: PPUSH
56769: CALL_OW 266
56773: STR
56774: PUSH
56775: LD_STRING , 
56777: STR
56778: PUSH
56779: LD_VAR 0 3
56783: PPUSH
56784: CALL_OW 250
56788: STR
56789: PUSH
56790: LD_STRING , 
56792: STR
56793: PUSH
56794: LD_VAR 0 3
56798: PPUSH
56799: CALL_OW 251
56803: STR
56804: PUSH
56805: LD_STRING , 
56807: STR
56808: PUSH
56809: LD_VAR 0 3
56813: PPUSH
56814: CALL_OW 254
56818: STR
56819: PUSH
56820: LD_STRING , 
56822: STR
56823: PUSH
56824: LD_VAR 0 3
56828: PPUSH
56829: LD_INT 1
56831: PPUSH
56832: CALL_OW 268
56836: STR
56837: PUSH
56838: LD_STRING , 
56840: STR
56841: PUSH
56842: LD_VAR 0 3
56846: PPUSH
56847: LD_INT 2
56849: PPUSH
56850: CALL_OW 268
56854: STR
56855: PUSH
56856: LD_STRING ],
56858: STR
56859: PPUSH
56860: CALL_OW 561
// end ;
56864: GO 56758
56866: POP
56867: POP
// AddToLog ( ]; ) ;
56868: LD_STRING ];
56870: PPUSH
56871: CALL_OW 561
// end ;
56875: LD_VAR 0 2
56879: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56880: LD_INT 0
56882: PPUSH
56883: PPUSH
56884: PPUSH
56885: PPUSH
56886: PPUSH
// if not area or not rate or not max then
56887: LD_VAR 0 1
56891: NOT
56892: PUSH
56893: LD_VAR 0 2
56897: NOT
56898: OR
56899: PUSH
56900: LD_VAR 0 4
56904: NOT
56905: OR
56906: IFFALSE 56910
// exit ;
56908: GO 57099
// while 1 do
56910: LD_INT 1
56912: IFFALSE 57099
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56914: LD_ADDR_VAR 0 9
56918: PUSH
56919: LD_VAR 0 1
56923: PPUSH
56924: LD_INT 1
56926: PPUSH
56927: CALL_OW 287
56931: PUSH
56932: LD_INT 10
56934: MUL
56935: ST_TO_ADDR
// r := rate / 10 ;
56936: LD_ADDR_VAR 0 7
56940: PUSH
56941: LD_VAR 0 2
56945: PUSH
56946: LD_INT 10
56948: DIVREAL
56949: ST_TO_ADDR
// time := 1 1$00 ;
56950: LD_ADDR_VAR 0 8
56954: PUSH
56955: LD_INT 2100
56957: ST_TO_ADDR
// if amount < min then
56958: LD_VAR 0 9
56962: PUSH
56963: LD_VAR 0 3
56967: LESS
56968: IFFALSE 56986
// r := r * 2 else
56970: LD_ADDR_VAR 0 7
56974: PUSH
56975: LD_VAR 0 7
56979: PUSH
56980: LD_INT 2
56982: MUL
56983: ST_TO_ADDR
56984: GO 57012
// if amount > max then
56986: LD_VAR 0 9
56990: PUSH
56991: LD_VAR 0 4
56995: GREATER
56996: IFFALSE 57012
// r := r / 2 ;
56998: LD_ADDR_VAR 0 7
57002: PUSH
57003: LD_VAR 0 7
57007: PUSH
57008: LD_INT 2
57010: DIVREAL
57011: ST_TO_ADDR
// time := time / r ;
57012: LD_ADDR_VAR 0 8
57016: PUSH
57017: LD_VAR 0 8
57021: PUSH
57022: LD_VAR 0 7
57026: DIVREAL
57027: ST_TO_ADDR
// if time < 0 then
57028: LD_VAR 0 8
57032: PUSH
57033: LD_INT 0
57035: LESS
57036: IFFALSE 57053
// time := time * - 1 ;
57038: LD_ADDR_VAR 0 8
57042: PUSH
57043: LD_VAR 0 8
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: MUL
57052: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57053: LD_VAR 0 8
57057: PUSH
57058: LD_INT 35
57060: PPUSH
57061: LD_INT 875
57063: PPUSH
57064: CALL_OW 12
57068: PLUS
57069: PPUSH
57070: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57074: LD_INT 1
57076: PPUSH
57077: LD_INT 5
57079: PPUSH
57080: CALL_OW 12
57084: PPUSH
57085: LD_VAR 0 1
57089: PPUSH
57090: LD_INT 1
57092: PPUSH
57093: CALL_OW 55
// end ;
57097: GO 56910
// end ;
57099: LD_VAR 0 5
57103: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57104: LD_INT 0
57106: PPUSH
57107: PPUSH
57108: PPUSH
57109: PPUSH
57110: PPUSH
57111: PPUSH
57112: PPUSH
57113: PPUSH
// if not turrets or not factories then
57114: LD_VAR 0 1
57118: NOT
57119: PUSH
57120: LD_VAR 0 2
57124: NOT
57125: OR
57126: IFFALSE 57130
// exit ;
57128: GO 57437
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57130: LD_ADDR_VAR 0 10
57134: PUSH
57135: LD_INT 5
57137: PUSH
57138: LD_INT 6
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: LD_INT 4
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 3
57157: PUSH
57158: LD_INT 5
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 24
57172: PUSH
57173: LD_INT 25
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 23
57182: PUSH
57183: LD_INT 27
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 42
57196: PUSH
57197: LD_INT 43
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 44
57206: PUSH
57207: LD_INT 46
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 45
57216: PUSH
57217: LD_INT 47
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: ST_TO_ADDR
// result := [ ] ;
57234: LD_ADDR_VAR 0 3
57238: PUSH
57239: EMPTY
57240: ST_TO_ADDR
// for i in turrets do
57241: LD_ADDR_VAR 0 4
57245: PUSH
57246: LD_VAR 0 1
57250: PUSH
57251: FOR_IN
57252: IFFALSE 57435
// begin nat := GetNation ( i ) ;
57254: LD_ADDR_VAR 0 7
57258: PUSH
57259: LD_VAR 0 4
57263: PPUSH
57264: CALL_OW 248
57268: ST_TO_ADDR
// weapon := 0 ;
57269: LD_ADDR_VAR 0 8
57273: PUSH
57274: LD_INT 0
57276: ST_TO_ADDR
// if not nat then
57277: LD_VAR 0 7
57281: NOT
57282: IFFALSE 57286
// continue ;
57284: GO 57251
// for j in list [ nat ] do
57286: LD_ADDR_VAR 0 5
57290: PUSH
57291: LD_VAR 0 10
57295: PUSH
57296: LD_VAR 0 7
57300: ARRAY
57301: PUSH
57302: FOR_IN
57303: IFFALSE 57344
// if GetBWeapon ( i ) = j [ 1 ] then
57305: LD_VAR 0 4
57309: PPUSH
57310: CALL_OW 269
57314: PUSH
57315: LD_VAR 0 5
57319: PUSH
57320: LD_INT 1
57322: ARRAY
57323: EQUAL
57324: IFFALSE 57342
// begin weapon := j [ 2 ] ;
57326: LD_ADDR_VAR 0 8
57330: PUSH
57331: LD_VAR 0 5
57335: PUSH
57336: LD_INT 2
57338: ARRAY
57339: ST_TO_ADDR
// break ;
57340: GO 57344
// end ;
57342: GO 57302
57344: POP
57345: POP
// if not weapon then
57346: LD_VAR 0 8
57350: NOT
57351: IFFALSE 57355
// continue ;
57353: GO 57251
// for k in factories do
57355: LD_ADDR_VAR 0 6
57359: PUSH
57360: LD_VAR 0 2
57364: PUSH
57365: FOR_IN
57366: IFFALSE 57431
// begin weapons := AvailableWeaponList ( k ) ;
57368: LD_ADDR_VAR 0 9
57372: PUSH
57373: LD_VAR 0 6
57377: PPUSH
57378: CALL_OW 478
57382: ST_TO_ADDR
// if not weapons then
57383: LD_VAR 0 9
57387: NOT
57388: IFFALSE 57392
// continue ;
57390: GO 57365
// if weapon in weapons then
57392: LD_VAR 0 8
57396: PUSH
57397: LD_VAR 0 9
57401: IN
57402: IFFALSE 57429
// begin result := [ i , weapon ] ;
57404: LD_ADDR_VAR 0 3
57408: PUSH
57409: LD_VAR 0 4
57413: PUSH
57414: LD_VAR 0 8
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: ST_TO_ADDR
// exit ;
57423: POP
57424: POP
57425: POP
57426: POP
57427: GO 57437
// end ; end ;
57429: GO 57365
57431: POP
57432: POP
// end ;
57433: GO 57251
57435: POP
57436: POP
// end ;
57437: LD_VAR 0 3
57441: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57442: LD_INT 0
57444: PPUSH
// if not side or side > 8 then
57445: LD_VAR 0 3
57449: NOT
57450: PUSH
57451: LD_VAR 0 3
57455: PUSH
57456: LD_INT 8
57458: GREATER
57459: OR
57460: IFFALSE 57464
// exit ;
57462: GO 57523
// if not range then
57464: LD_VAR 0 4
57468: NOT
57469: IFFALSE 57480
// range := - 12 ;
57471: LD_ADDR_VAR 0 4
57475: PUSH
57476: LD_INT 12
57478: NEG
57479: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57480: LD_VAR 0 1
57484: PPUSH
57485: LD_VAR 0 2
57489: PPUSH
57490: LD_VAR 0 3
57494: PPUSH
57495: LD_VAR 0 4
57499: PPUSH
57500: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57504: LD_VAR 0 1
57508: PPUSH
57509: LD_VAR 0 2
57513: PPUSH
57514: LD_VAR 0 3
57518: PPUSH
57519: CALL_OW 331
// end ;
57523: LD_VAR 0 5
57527: RET
// export function Video ( mode ) ; begin
57528: LD_INT 0
57530: PPUSH
// ingame_video = mode ;
57531: LD_ADDR_OWVAR 52
57535: PUSH
57536: LD_VAR 0 1
57540: ST_TO_ADDR
// interface_hidden = mode ;
57541: LD_ADDR_OWVAR 54
57545: PUSH
57546: LD_VAR 0 1
57550: ST_TO_ADDR
// end ;
57551: LD_VAR 0 2
57555: RET
// export function Join ( array , element ) ; begin
57556: LD_INT 0
57558: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57559: LD_ADDR_VAR 0 3
57563: PUSH
57564: LD_VAR 0 1
57568: PPUSH
57569: LD_VAR 0 1
57573: PUSH
57574: LD_INT 1
57576: PLUS
57577: PPUSH
57578: LD_VAR 0 2
57582: PPUSH
57583: CALL_OW 1
57587: ST_TO_ADDR
// end ;
57588: LD_VAR 0 3
57592: RET
// export function JoinUnion ( array , element ) ; begin
57593: LD_INT 0
57595: PPUSH
// result := array union element ;
57596: LD_ADDR_VAR 0 3
57600: PUSH
57601: LD_VAR 0 1
57605: PUSH
57606: LD_VAR 0 2
57610: UNION
57611: ST_TO_ADDR
// end ;
57612: LD_VAR 0 3
57616: RET
// export function GetBehemoths ( side ) ; begin
57617: LD_INT 0
57619: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
57620: LD_ADDR_VAR 0 2
57624: PUSH
57625: LD_INT 22
57627: PUSH
57628: LD_VAR 0 1
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 31
57639: PUSH
57640: LD_INT 25
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PPUSH
57651: CALL_OW 69
57655: ST_TO_ADDR
// end ;
57656: LD_VAR 0 2
57660: RET
// export function Shuffle ( array ) ; var i , index ; begin
57661: LD_INT 0
57663: PPUSH
57664: PPUSH
57665: PPUSH
// result := [ ] ;
57666: LD_ADDR_VAR 0 2
57670: PUSH
57671: EMPTY
57672: ST_TO_ADDR
// if not array then
57673: LD_VAR 0 1
57677: NOT
57678: IFFALSE 57682
// exit ;
57680: GO 57781
// Randomize ;
57682: CALL_OW 10
// for i = array downto 1 do
57686: LD_ADDR_VAR 0 3
57690: PUSH
57691: DOUBLE
57692: LD_VAR 0 1
57696: INC
57697: ST_TO_ADDR
57698: LD_INT 1
57700: PUSH
57701: FOR_DOWNTO
57702: IFFALSE 57779
// begin index := rand ( 1 , array ) ;
57704: LD_ADDR_VAR 0 4
57708: PUSH
57709: LD_INT 1
57711: PPUSH
57712: LD_VAR 0 1
57716: PPUSH
57717: CALL_OW 12
57721: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57722: LD_ADDR_VAR 0 2
57726: PUSH
57727: LD_VAR 0 2
57731: PPUSH
57732: LD_VAR 0 2
57736: PUSH
57737: LD_INT 1
57739: PLUS
57740: PPUSH
57741: LD_VAR 0 1
57745: PUSH
57746: LD_VAR 0 4
57750: ARRAY
57751: PPUSH
57752: CALL_OW 2
57756: ST_TO_ADDR
// array := Delete ( array , index ) ;
57757: LD_ADDR_VAR 0 1
57761: PUSH
57762: LD_VAR 0 1
57766: PPUSH
57767: LD_VAR 0 4
57771: PPUSH
57772: CALL_OW 3
57776: ST_TO_ADDR
// end ;
57777: GO 57701
57779: POP
57780: POP
// end ;
57781: LD_VAR 0 2
57785: RET
// export function GetBaseMaterials ( base ) ; begin
57786: LD_INT 0
57788: PPUSH
// result := [ 0 , 0 , 0 ] ;
57789: LD_ADDR_VAR 0 2
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: LIST
57807: ST_TO_ADDR
// if not base then
57808: LD_VAR 0 1
57812: NOT
57813: IFFALSE 57817
// exit ;
57815: GO 57866
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57817: LD_ADDR_VAR 0 2
57821: PUSH
57822: LD_VAR 0 1
57826: PPUSH
57827: LD_INT 1
57829: PPUSH
57830: CALL_OW 275
57834: PUSH
57835: LD_VAR 0 1
57839: PPUSH
57840: LD_INT 2
57842: PPUSH
57843: CALL_OW 275
57847: PUSH
57848: LD_VAR 0 1
57852: PPUSH
57853: LD_INT 3
57855: PPUSH
57856: CALL_OW 275
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// end ;
57866: LD_VAR 0 2
57870: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57871: LD_INT 0
57873: PPUSH
57874: PPUSH
// result := array ;
57875: LD_ADDR_VAR 0 3
57879: PUSH
57880: LD_VAR 0 1
57884: ST_TO_ADDR
// if size >= result then
57885: LD_VAR 0 2
57889: PUSH
57890: LD_VAR 0 3
57894: GREATEREQUAL
57895: IFFALSE 57899
// exit ;
57897: GO 57949
// if size then
57899: LD_VAR 0 2
57903: IFFALSE 57949
// for i := array downto size do
57905: LD_ADDR_VAR 0 4
57909: PUSH
57910: DOUBLE
57911: LD_VAR 0 1
57915: INC
57916: ST_TO_ADDR
57917: LD_VAR 0 2
57921: PUSH
57922: FOR_DOWNTO
57923: IFFALSE 57947
// result := Delete ( result , result ) ;
57925: LD_ADDR_VAR 0 3
57929: PUSH
57930: LD_VAR 0 3
57934: PPUSH
57935: LD_VAR 0 3
57939: PPUSH
57940: CALL_OW 3
57944: ST_TO_ADDR
57945: GO 57922
57947: POP
57948: POP
// end ;
57949: LD_VAR 0 3
57953: RET
// export function ComExit ( unit ) ; var tmp ; begin
57954: LD_INT 0
57956: PPUSH
57957: PPUSH
// if not IsInUnit ( unit ) then
57958: LD_VAR 0 1
57962: PPUSH
57963: CALL_OW 310
57967: NOT
57968: IFFALSE 57972
// exit ;
57970: GO 58032
// tmp := IsInUnit ( unit ) ;
57972: LD_ADDR_VAR 0 3
57976: PUSH
57977: LD_VAR 0 1
57981: PPUSH
57982: CALL_OW 310
57986: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57987: LD_VAR 0 3
57991: PPUSH
57992: CALL_OW 247
57996: PUSH
57997: LD_INT 2
57999: EQUAL
58000: IFFALSE 58013
// ComExitVehicle ( unit ) else
58002: LD_VAR 0 1
58006: PPUSH
58007: CALL_OW 121
58011: GO 58022
// ComExitBuilding ( unit ) ;
58013: LD_VAR 0 1
58017: PPUSH
58018: CALL_OW 122
// result := tmp ;
58022: LD_ADDR_VAR 0 2
58026: PUSH
58027: LD_VAR 0 3
58031: ST_TO_ADDR
// end ;
58032: LD_VAR 0 2
58036: RET
// export function ComExitAll ( units ) ; var i ; begin
58037: LD_INT 0
58039: PPUSH
58040: PPUSH
// if not units then
58041: LD_VAR 0 1
58045: NOT
58046: IFFALSE 58050
// exit ;
58048: GO 58076
// for i in units do
58050: LD_ADDR_VAR 0 3
58054: PUSH
58055: LD_VAR 0 1
58059: PUSH
58060: FOR_IN
58061: IFFALSE 58074
// ComExit ( i ) ;
58063: LD_VAR 0 3
58067: PPUSH
58068: CALL 57954 0 1
58072: GO 58060
58074: POP
58075: POP
// end ;
58076: LD_VAR 0 2
58080: RET
// export function ResetHc ; begin
58081: LD_INT 0
58083: PPUSH
// InitHc ;
58084: CALL_OW 19
// hc_importance := 0 ;
58088: LD_ADDR_OWVAR 32
58092: PUSH
58093: LD_INT 0
58095: ST_TO_ADDR
// end ;
58096: LD_VAR 0 1
58100: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58101: LD_INT 0
58103: PPUSH
58104: PPUSH
58105: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58106: LD_ADDR_VAR 0 6
58110: PUSH
58111: LD_VAR 0 1
58115: PUSH
58116: LD_VAR 0 3
58120: PLUS
58121: PUSH
58122: LD_INT 2
58124: DIV
58125: ST_TO_ADDR
// if _x < 0 then
58126: LD_VAR 0 6
58130: PUSH
58131: LD_INT 0
58133: LESS
58134: IFFALSE 58151
// _x := _x * - 1 ;
58136: LD_ADDR_VAR 0 6
58140: PUSH
58141: LD_VAR 0 6
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: MUL
58150: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58151: LD_ADDR_VAR 0 7
58155: PUSH
58156: LD_VAR 0 2
58160: PUSH
58161: LD_VAR 0 4
58165: PLUS
58166: PUSH
58167: LD_INT 2
58169: DIV
58170: ST_TO_ADDR
// if _y < 0 then
58171: LD_VAR 0 7
58175: PUSH
58176: LD_INT 0
58178: LESS
58179: IFFALSE 58196
// _y := _y * - 1 ;
58181: LD_ADDR_VAR 0 7
58185: PUSH
58186: LD_VAR 0 7
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: MUL
58195: ST_TO_ADDR
// result := [ _x , _y ] ;
58196: LD_ADDR_VAR 0 5
58200: PUSH
58201: LD_VAR 0 6
58205: PUSH
58206: LD_VAR 0 7
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: ST_TO_ADDR
// end ;
58215: LD_VAR 0 5
58219: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58220: LD_INT 0
58222: PPUSH
58223: PPUSH
58224: PPUSH
58225: PPUSH
// task := GetTaskList ( unit ) ;
58226: LD_ADDR_VAR 0 7
58230: PUSH
58231: LD_VAR 0 1
58235: PPUSH
58236: CALL_OW 437
58240: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58241: LD_VAR 0 7
58245: NOT
58246: PUSH
58247: LD_VAR 0 1
58251: PPUSH
58252: LD_VAR 0 2
58256: PPUSH
58257: CALL_OW 308
58261: NOT
58262: AND
58263: IFFALSE 58267
// exit ;
58265: GO 58385
// if IsInArea ( unit , area ) then
58267: LD_VAR 0 1
58271: PPUSH
58272: LD_VAR 0 2
58276: PPUSH
58277: CALL_OW 308
58281: IFFALSE 58299
// begin ComMoveToArea ( unit , goAway ) ;
58283: LD_VAR 0 1
58287: PPUSH
58288: LD_VAR 0 3
58292: PPUSH
58293: CALL_OW 113
// exit ;
58297: GO 58385
// end ; if task [ 1 ] [ 1 ] <> M then
58299: LD_VAR 0 7
58303: PUSH
58304: LD_INT 1
58306: ARRAY
58307: PUSH
58308: LD_INT 1
58310: ARRAY
58311: PUSH
58312: LD_STRING M
58314: NONEQUAL
58315: IFFALSE 58319
// exit ;
58317: GO 58385
// x := task [ 1 ] [ 2 ] ;
58319: LD_ADDR_VAR 0 5
58323: PUSH
58324: LD_VAR 0 7
58328: PUSH
58329: LD_INT 1
58331: ARRAY
58332: PUSH
58333: LD_INT 2
58335: ARRAY
58336: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58337: LD_ADDR_VAR 0 6
58341: PUSH
58342: LD_VAR 0 7
58346: PUSH
58347: LD_INT 1
58349: ARRAY
58350: PUSH
58351: LD_INT 3
58353: ARRAY
58354: ST_TO_ADDR
// if InArea ( x , y , area ) then
58355: LD_VAR 0 5
58359: PPUSH
58360: LD_VAR 0 6
58364: PPUSH
58365: LD_VAR 0 2
58369: PPUSH
58370: CALL_OW 309
58374: IFFALSE 58385
// ComStop ( unit ) ;
58376: LD_VAR 0 1
58380: PPUSH
58381: CALL_OW 141
// end ;
58385: LD_VAR 0 4
58389: RET
// export function Abs ( value ) ; begin
58390: LD_INT 0
58392: PPUSH
// result := value ;
58393: LD_ADDR_VAR 0 2
58397: PUSH
58398: LD_VAR 0 1
58402: ST_TO_ADDR
// if value < 0 then
58403: LD_VAR 0 1
58407: PUSH
58408: LD_INT 0
58410: LESS
58411: IFFALSE 58428
// result := value * - 1 ;
58413: LD_ADDR_VAR 0 2
58417: PUSH
58418: LD_VAR 0 1
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: MUL
58427: ST_TO_ADDR
// end ;
58428: LD_VAR 0 2
58432: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58433: LD_INT 0
58435: PPUSH
58436: PPUSH
58437: PPUSH
58438: PPUSH
58439: PPUSH
58440: PPUSH
58441: PPUSH
58442: PPUSH
// if not unit or not building then
58443: LD_VAR 0 1
58447: NOT
58448: PUSH
58449: LD_VAR 0 2
58453: NOT
58454: OR
58455: IFFALSE 58459
// exit ;
58457: GO 58685
// x := GetX ( building ) ;
58459: LD_ADDR_VAR 0 4
58463: PUSH
58464: LD_VAR 0 2
58468: PPUSH
58469: CALL_OW 250
58473: ST_TO_ADDR
// y := GetY ( building ) ;
58474: LD_ADDR_VAR 0 6
58478: PUSH
58479: LD_VAR 0 2
58483: PPUSH
58484: CALL_OW 251
58488: ST_TO_ADDR
// d := GetDir ( building ) ;
58489: LD_ADDR_VAR 0 8
58493: PUSH
58494: LD_VAR 0 2
58498: PPUSH
58499: CALL_OW 254
58503: ST_TO_ADDR
// r := 4 ;
58504: LD_ADDR_VAR 0 9
58508: PUSH
58509: LD_INT 4
58511: ST_TO_ADDR
// for i := 1 to 5 do
58512: LD_ADDR_VAR 0 10
58516: PUSH
58517: DOUBLE
58518: LD_INT 1
58520: DEC
58521: ST_TO_ADDR
58522: LD_INT 5
58524: PUSH
58525: FOR_TO
58526: IFFALSE 58683
// begin _x := ShiftX ( x , d , r + i ) ;
58528: LD_ADDR_VAR 0 5
58532: PUSH
58533: LD_VAR 0 4
58537: PPUSH
58538: LD_VAR 0 8
58542: PPUSH
58543: LD_VAR 0 9
58547: PUSH
58548: LD_VAR 0 10
58552: PLUS
58553: PPUSH
58554: CALL_OW 272
58558: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58559: LD_ADDR_VAR 0 7
58563: PUSH
58564: LD_VAR 0 6
58568: PPUSH
58569: LD_VAR 0 8
58573: PPUSH
58574: LD_VAR 0 9
58578: PUSH
58579: LD_VAR 0 10
58583: PLUS
58584: PPUSH
58585: CALL_OW 273
58589: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58590: LD_VAR 0 5
58594: PPUSH
58595: LD_VAR 0 7
58599: PPUSH
58600: CALL_OW 488
58604: PUSH
58605: LD_VAR 0 5
58609: PPUSH
58610: LD_VAR 0 7
58614: PPUSH
58615: CALL_OW 428
58619: PPUSH
58620: CALL_OW 247
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: IN
58635: NOT
58636: AND
58637: IFFALSE 58681
// begin ComMoveXY ( unit , _x , _y ) ;
58639: LD_VAR 0 1
58643: PPUSH
58644: LD_VAR 0 5
58648: PPUSH
58649: LD_VAR 0 7
58653: PPUSH
58654: CALL_OW 111
// result := [ _x , _y ] ;
58658: LD_ADDR_VAR 0 3
58662: PUSH
58663: LD_VAR 0 5
58667: PUSH
58668: LD_VAR 0 7
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// exit ;
58677: POP
58678: POP
58679: GO 58685
// end ; end ;
58681: GO 58525
58683: POP
58684: POP
// end ;
58685: LD_VAR 0 3
58689: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58690: LD_INT 0
58692: PPUSH
58693: PPUSH
58694: PPUSH
// result := 0 ;
58695: LD_ADDR_VAR 0 3
58699: PUSH
58700: LD_INT 0
58702: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58703: LD_VAR 0 1
58707: PUSH
58708: LD_INT 0
58710: LESS
58711: PUSH
58712: LD_VAR 0 1
58716: PUSH
58717: LD_INT 8
58719: GREATER
58720: OR
58721: PUSH
58722: LD_VAR 0 2
58726: PUSH
58727: LD_INT 0
58729: LESS
58730: OR
58731: PUSH
58732: LD_VAR 0 2
58736: PUSH
58737: LD_INT 8
58739: GREATER
58740: OR
58741: IFFALSE 58745
// exit ;
58743: GO 58820
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58745: LD_ADDR_VAR 0 4
58749: PUSH
58750: LD_INT 22
58752: PUSH
58753: LD_VAR 0 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PPUSH
58762: CALL_OW 69
58766: PUSH
58767: FOR_IN
58768: IFFALSE 58818
// begin un := UnitShoot ( i ) ;
58770: LD_ADDR_VAR 0 5
58774: PUSH
58775: LD_VAR 0 4
58779: PPUSH
58780: CALL_OW 504
58784: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58785: LD_VAR 0 5
58789: PPUSH
58790: CALL_OW 255
58794: PUSH
58795: LD_VAR 0 1
58799: EQUAL
58800: IFFALSE 58816
// begin result := un ;
58802: LD_ADDR_VAR 0 3
58806: PUSH
58807: LD_VAR 0 5
58811: ST_TO_ADDR
// exit ;
58812: POP
58813: POP
58814: GO 58820
// end ; end ;
58816: GO 58767
58818: POP
58819: POP
// end ;
58820: LD_VAR 0 3
58824: RET
// export function GetCargoBay ( units ) ; begin
58825: LD_INT 0
58827: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58828: LD_ADDR_VAR 0 2
58832: PUSH
58833: LD_VAR 0 1
58837: PPUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 34
58843: PUSH
58844: LD_INT 12
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 34
58853: PUSH
58854: LD_INT 51
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 34
58863: PUSH
58864: LD_INT 32
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 34
58873: PUSH
58874: LD_INT 89
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: PPUSH
58888: CALL_OW 72
58892: ST_TO_ADDR
// end ;
58893: LD_VAR 0 2
58897: RET
// export function Negate ( value ) ; begin
58898: LD_INT 0
58900: PPUSH
// result := not value ;
58901: LD_ADDR_VAR 0 2
58905: PUSH
58906: LD_VAR 0 1
58910: NOT
58911: ST_TO_ADDR
// end ;
58912: LD_VAR 0 2
58916: RET
// export function Inc ( value ) ; begin
58917: LD_INT 0
58919: PPUSH
// result := value + 1 ;
58920: LD_ADDR_VAR 0 2
58924: PUSH
58925: LD_VAR 0 1
58929: PUSH
58930: LD_INT 1
58932: PLUS
58933: ST_TO_ADDR
// end ;
58934: LD_VAR 0 2
58938: RET
// export function Dec ( value ) ; begin
58939: LD_INT 0
58941: PPUSH
// result := value - 1 ;
58942: LD_ADDR_VAR 0 2
58946: PUSH
58947: LD_VAR 0 1
58951: PUSH
58952: LD_INT 1
58954: MINUS
58955: ST_TO_ADDR
// end ;
58956: LD_VAR 0 2
58960: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58961: LD_INT 0
58963: PPUSH
58964: PPUSH
58965: PPUSH
58966: PPUSH
58967: PPUSH
58968: PPUSH
58969: PPUSH
58970: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58971: LD_VAR 0 1
58975: PPUSH
58976: LD_VAR 0 2
58980: PPUSH
58981: CALL_OW 488
58985: NOT
58986: PUSH
58987: LD_VAR 0 3
58991: PPUSH
58992: LD_VAR 0 4
58996: PPUSH
58997: CALL_OW 488
59001: NOT
59002: OR
59003: IFFALSE 59016
// begin result := - 1 ;
59005: LD_ADDR_VAR 0 5
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: ST_TO_ADDR
// exit ;
59014: GO 59251
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59016: LD_ADDR_VAR 0 12
59020: PUSH
59021: LD_VAR 0 1
59025: PPUSH
59026: LD_VAR 0 2
59030: PPUSH
59031: LD_VAR 0 3
59035: PPUSH
59036: LD_VAR 0 4
59040: PPUSH
59041: CALL 58101 0 4
59045: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59046: LD_ADDR_VAR 0 11
59050: PUSH
59051: LD_VAR 0 1
59055: PPUSH
59056: LD_VAR 0 2
59060: PPUSH
59061: LD_VAR 0 12
59065: PUSH
59066: LD_INT 1
59068: ARRAY
59069: PPUSH
59070: LD_VAR 0 12
59074: PUSH
59075: LD_INT 2
59077: ARRAY
59078: PPUSH
59079: CALL_OW 298
59083: ST_TO_ADDR
// distance := 9999 ;
59084: LD_ADDR_VAR 0 10
59088: PUSH
59089: LD_INT 9999
59091: ST_TO_ADDR
// for i := 0 to 5 do
59092: LD_ADDR_VAR 0 6
59096: PUSH
59097: DOUBLE
59098: LD_INT 0
59100: DEC
59101: ST_TO_ADDR
59102: LD_INT 5
59104: PUSH
59105: FOR_TO
59106: IFFALSE 59249
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59108: LD_ADDR_VAR 0 7
59112: PUSH
59113: LD_VAR 0 1
59117: PPUSH
59118: LD_VAR 0 6
59122: PPUSH
59123: LD_VAR 0 11
59127: PPUSH
59128: CALL_OW 272
59132: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59133: LD_ADDR_VAR 0 8
59137: PUSH
59138: LD_VAR 0 2
59142: PPUSH
59143: LD_VAR 0 6
59147: PPUSH
59148: LD_VAR 0 11
59152: PPUSH
59153: CALL_OW 273
59157: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59158: LD_VAR 0 7
59162: PPUSH
59163: LD_VAR 0 8
59167: PPUSH
59168: CALL_OW 488
59172: NOT
59173: IFFALSE 59177
// continue ;
59175: GO 59105
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59177: LD_ADDR_VAR 0 9
59181: PUSH
59182: LD_VAR 0 12
59186: PUSH
59187: LD_INT 1
59189: ARRAY
59190: PPUSH
59191: LD_VAR 0 12
59195: PUSH
59196: LD_INT 2
59198: ARRAY
59199: PPUSH
59200: LD_VAR 0 7
59204: PPUSH
59205: LD_VAR 0 8
59209: PPUSH
59210: CALL_OW 298
59214: ST_TO_ADDR
// if tmp < distance then
59215: LD_VAR 0 9
59219: PUSH
59220: LD_VAR 0 10
59224: LESS
59225: IFFALSE 59247
// begin result := i ;
59227: LD_ADDR_VAR 0 5
59231: PUSH
59232: LD_VAR 0 6
59236: ST_TO_ADDR
// distance := tmp ;
59237: LD_ADDR_VAR 0 10
59241: PUSH
59242: LD_VAR 0 9
59246: ST_TO_ADDR
// end ; end ;
59247: GO 59105
59249: POP
59250: POP
// end ;
59251: LD_VAR 0 5
59255: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59256: LD_INT 0
59258: PPUSH
59259: PPUSH
// if not driver or not IsInUnit ( driver ) then
59260: LD_VAR 0 1
59264: NOT
59265: PUSH
59266: LD_VAR 0 1
59270: PPUSH
59271: CALL_OW 310
59275: NOT
59276: OR
59277: IFFALSE 59281
// exit ;
59279: GO 59371
// vehicle := IsInUnit ( driver ) ;
59281: LD_ADDR_VAR 0 3
59285: PUSH
59286: LD_VAR 0 1
59290: PPUSH
59291: CALL_OW 310
59295: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59296: LD_VAR 0 1
59300: PPUSH
59301: LD_STRING \
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: PUSH
59331: LD_STRING E
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_VAR 0 3
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PPUSH
59367: CALL_OW 446
// end ;
59371: LD_VAR 0 2
59375: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59376: LD_INT 0
59378: PPUSH
59379: PPUSH
// if not driver or not IsInUnit ( driver ) then
59380: LD_VAR 0 1
59384: NOT
59385: PUSH
59386: LD_VAR 0 1
59390: PPUSH
59391: CALL_OW 310
59395: NOT
59396: OR
59397: IFFALSE 59401
// exit ;
59399: GO 59491
// vehicle := IsInUnit ( driver ) ;
59401: LD_ADDR_VAR 0 3
59405: PUSH
59406: LD_VAR 0 1
59410: PPUSH
59411: CALL_OW 310
59415: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59416: LD_VAR 0 1
59420: PPUSH
59421: LD_STRING \
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: PUSH
59451: LD_STRING E
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_VAR 0 3
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PPUSH
59487: CALL_OW 447
// end ;
59491: LD_VAR 0 2
59495: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59496: LD_INT 0
59498: PPUSH
59499: PPUSH
59500: PPUSH
// tmp := [ ] ;
59501: LD_ADDR_VAR 0 5
59505: PUSH
59506: EMPTY
59507: ST_TO_ADDR
// for i in units do
59508: LD_ADDR_VAR 0 4
59512: PUSH
59513: LD_VAR 0 1
59517: PUSH
59518: FOR_IN
59519: IFFALSE 59557
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59521: LD_ADDR_VAR 0 5
59525: PUSH
59526: LD_VAR 0 5
59530: PPUSH
59531: LD_VAR 0 5
59535: PUSH
59536: LD_INT 1
59538: PLUS
59539: PPUSH
59540: LD_VAR 0 4
59544: PPUSH
59545: CALL_OW 256
59549: PPUSH
59550: CALL_OW 2
59554: ST_TO_ADDR
59555: GO 59518
59557: POP
59558: POP
// if not tmp then
59559: LD_VAR 0 5
59563: NOT
59564: IFFALSE 59568
// exit ;
59566: GO 59616
// if asc then
59568: LD_VAR 0 2
59572: IFFALSE 59596
// result := SortListByListAsc ( units , tmp ) else
59574: LD_ADDR_VAR 0 3
59578: PUSH
59579: LD_VAR 0 1
59583: PPUSH
59584: LD_VAR 0 5
59588: PPUSH
59589: CALL_OW 76
59593: ST_TO_ADDR
59594: GO 59616
// result := SortListByListDesc ( units , tmp ) ;
59596: LD_ADDR_VAR 0 3
59600: PUSH
59601: LD_VAR 0 1
59605: PPUSH
59606: LD_VAR 0 5
59610: PPUSH
59611: CALL_OW 77
59615: ST_TO_ADDR
// end ;
59616: LD_VAR 0 3
59620: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59621: LD_INT 0
59623: PPUSH
59624: PPUSH
// task := GetTaskList ( mech ) ;
59625: LD_ADDR_VAR 0 4
59629: PUSH
59630: LD_VAR 0 1
59634: PPUSH
59635: CALL_OW 437
59639: ST_TO_ADDR
// if not task then
59640: LD_VAR 0 4
59644: NOT
59645: IFFALSE 59649
// exit ;
59647: GO 59691
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59649: LD_ADDR_VAR 0 3
59653: PUSH
59654: LD_VAR 0 4
59658: PUSH
59659: LD_INT 1
59661: ARRAY
59662: PUSH
59663: LD_INT 1
59665: ARRAY
59666: PUSH
59667: LD_STRING r
59669: EQUAL
59670: PUSH
59671: LD_VAR 0 4
59675: PUSH
59676: LD_INT 1
59678: ARRAY
59679: PUSH
59680: LD_INT 4
59682: ARRAY
59683: PUSH
59684: LD_VAR 0 2
59688: EQUAL
59689: AND
59690: ST_TO_ADDR
// end ;
59691: LD_VAR 0 3
59695: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59696: LD_INT 0
59698: PPUSH
// SetDir ( unit , d ) ;
59699: LD_VAR 0 1
59703: PPUSH
59704: LD_VAR 0 4
59708: PPUSH
59709: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59713: LD_VAR 0 1
59717: PPUSH
59718: LD_VAR 0 2
59722: PPUSH
59723: LD_VAR 0 3
59727: PPUSH
59728: LD_VAR 0 5
59732: PPUSH
59733: CALL_OW 48
// end ;
59737: LD_VAR 0 6
59741: RET
// export function ToNaturalNumber ( number ) ; begin
59742: LD_INT 0
59744: PPUSH
// result := number div 1 ;
59745: LD_ADDR_VAR 0 2
59749: PUSH
59750: LD_VAR 0 1
59754: PUSH
59755: LD_INT 1
59757: DIV
59758: ST_TO_ADDR
// if number < 0 then
59759: LD_VAR 0 1
59763: PUSH
59764: LD_INT 0
59766: LESS
59767: IFFALSE 59777
// result := 0 ;
59769: LD_ADDR_VAR 0 2
59773: PUSH
59774: LD_INT 0
59776: ST_TO_ADDR
// end ;
59777: LD_VAR 0 2
59781: RET
// export function SortByClass ( units , class ) ; var un ; begin
59782: LD_INT 0
59784: PPUSH
59785: PPUSH
// if not units or not class then
59786: LD_VAR 0 1
59790: NOT
59791: PUSH
59792: LD_VAR 0 2
59796: NOT
59797: OR
59798: IFFALSE 59802
// exit ;
59800: GO 59897
// result := [ ] ;
59802: LD_ADDR_VAR 0 3
59806: PUSH
59807: EMPTY
59808: ST_TO_ADDR
// for un in units do
59809: LD_ADDR_VAR 0 4
59813: PUSH
59814: LD_VAR 0 1
59818: PUSH
59819: FOR_IN
59820: IFFALSE 59895
// if GetClass ( un ) = class then
59822: LD_VAR 0 4
59826: PPUSH
59827: CALL_OW 257
59831: PUSH
59832: LD_VAR 0 2
59836: EQUAL
59837: IFFALSE 59864
// result := Insert ( result , 1 , un ) else
59839: LD_ADDR_VAR 0 3
59843: PUSH
59844: LD_VAR 0 3
59848: PPUSH
59849: LD_INT 1
59851: PPUSH
59852: LD_VAR 0 4
59856: PPUSH
59857: CALL_OW 2
59861: ST_TO_ADDR
59862: GO 59893
// result := Replace ( result , result + 1 , un ) ;
59864: LD_ADDR_VAR 0 3
59868: PUSH
59869: LD_VAR 0 3
59873: PPUSH
59874: LD_VAR 0 3
59878: PUSH
59879: LD_INT 1
59881: PLUS
59882: PPUSH
59883: LD_VAR 0 4
59887: PPUSH
59888: CALL_OW 1
59892: ST_TO_ADDR
59893: GO 59819
59895: POP
59896: POP
// end ;
59897: LD_VAR 0 3
59901: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59902: LD_INT 0
59904: PPUSH
59905: PPUSH
59906: PPUSH
59907: PPUSH
59908: PPUSH
59909: PPUSH
59910: PPUSH
// result := [ ] ;
59911: LD_ADDR_VAR 0 4
59915: PUSH
59916: EMPTY
59917: ST_TO_ADDR
// if x - r < 0 then
59918: LD_VAR 0 1
59922: PUSH
59923: LD_VAR 0 3
59927: MINUS
59928: PUSH
59929: LD_INT 0
59931: LESS
59932: IFFALSE 59944
// min_x := 0 else
59934: LD_ADDR_VAR 0 8
59938: PUSH
59939: LD_INT 0
59941: ST_TO_ADDR
59942: GO 59960
// min_x := x - r ;
59944: LD_ADDR_VAR 0 8
59948: PUSH
59949: LD_VAR 0 1
59953: PUSH
59954: LD_VAR 0 3
59958: MINUS
59959: ST_TO_ADDR
// if y - r < 0 then
59960: LD_VAR 0 2
59964: PUSH
59965: LD_VAR 0 3
59969: MINUS
59970: PUSH
59971: LD_INT 0
59973: LESS
59974: IFFALSE 59986
// min_y := 0 else
59976: LD_ADDR_VAR 0 7
59980: PUSH
59981: LD_INT 0
59983: ST_TO_ADDR
59984: GO 60002
// min_y := y - r ;
59986: LD_ADDR_VAR 0 7
59990: PUSH
59991: LD_VAR 0 2
59995: PUSH
59996: LD_VAR 0 3
60000: MINUS
60001: ST_TO_ADDR
// max_x := x + r ;
60002: LD_ADDR_VAR 0 9
60006: PUSH
60007: LD_VAR 0 1
60011: PUSH
60012: LD_VAR 0 3
60016: PLUS
60017: ST_TO_ADDR
// max_y := y + r ;
60018: LD_ADDR_VAR 0 10
60022: PUSH
60023: LD_VAR 0 2
60027: PUSH
60028: LD_VAR 0 3
60032: PLUS
60033: ST_TO_ADDR
// for _x = min_x to max_x do
60034: LD_ADDR_VAR 0 5
60038: PUSH
60039: DOUBLE
60040: LD_VAR 0 8
60044: DEC
60045: ST_TO_ADDR
60046: LD_VAR 0 9
60050: PUSH
60051: FOR_TO
60052: IFFALSE 60153
// for _y = min_y to max_y do
60054: LD_ADDR_VAR 0 6
60058: PUSH
60059: DOUBLE
60060: LD_VAR 0 7
60064: DEC
60065: ST_TO_ADDR
60066: LD_VAR 0 10
60070: PUSH
60071: FOR_TO
60072: IFFALSE 60149
// begin if not ValidHex ( _x , _y ) then
60074: LD_VAR 0 5
60078: PPUSH
60079: LD_VAR 0 6
60083: PPUSH
60084: CALL_OW 488
60088: NOT
60089: IFFALSE 60093
// continue ;
60091: GO 60071
// if GetResourceTypeXY ( _x , _y ) then
60093: LD_VAR 0 5
60097: PPUSH
60098: LD_VAR 0 6
60102: PPUSH
60103: CALL_OW 283
60107: IFFALSE 60147
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60109: LD_ADDR_VAR 0 4
60113: PUSH
60114: LD_VAR 0 4
60118: PPUSH
60119: LD_VAR 0 4
60123: PUSH
60124: LD_INT 1
60126: PLUS
60127: PPUSH
60128: LD_VAR 0 5
60132: PUSH
60133: LD_VAR 0 6
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PPUSH
60142: CALL_OW 1
60146: ST_TO_ADDR
// end ;
60147: GO 60071
60149: POP
60150: POP
60151: GO 60051
60153: POP
60154: POP
// end ;
60155: LD_VAR 0 4
60159: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60160: LD_INT 0
60162: PPUSH
60163: PPUSH
60164: PPUSH
60165: PPUSH
60166: PPUSH
60167: PPUSH
60168: PPUSH
60169: PPUSH
// if not units then
60170: LD_VAR 0 1
60174: NOT
60175: IFFALSE 60179
// exit ;
60177: GO 60703
// result := UnitFilter ( units , [ f_ok ] ) ;
60179: LD_ADDR_VAR 0 3
60183: PUSH
60184: LD_VAR 0 1
60188: PPUSH
60189: LD_INT 50
60191: PUSH
60192: EMPTY
60193: LIST
60194: PPUSH
60195: CALL_OW 72
60199: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60200: LD_ADDR_VAR 0 8
60204: PUSH
60205: LD_VAR 0 1
60209: PUSH
60210: LD_INT 1
60212: ARRAY
60213: PPUSH
60214: CALL_OW 255
60218: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60219: LD_ADDR_VAR 0 10
60223: PUSH
60224: LD_INT 29
60226: PUSH
60227: LD_INT 91
60229: PUSH
60230: LD_INT 49
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: LIST
60237: ST_TO_ADDR
// if not result then
60238: LD_VAR 0 3
60242: NOT
60243: IFFALSE 60247
// exit ;
60245: GO 60703
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60247: LD_ADDR_VAR 0 5
60251: PUSH
60252: LD_INT 81
60254: PUSH
60255: LD_VAR 0 8
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PPUSH
60264: CALL_OW 69
60268: ST_TO_ADDR
// for i in result do
60269: LD_ADDR_VAR 0 4
60273: PUSH
60274: LD_VAR 0 3
60278: PUSH
60279: FOR_IN
60280: IFFALSE 60701
// begin tag := GetTag ( i ) + 1 ;
60282: LD_ADDR_VAR 0 9
60286: PUSH
60287: LD_VAR 0 4
60291: PPUSH
60292: CALL_OW 110
60296: PUSH
60297: LD_INT 1
60299: PLUS
60300: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60301: LD_ADDR_VAR 0 7
60305: PUSH
60306: LD_VAR 0 4
60310: PPUSH
60311: CALL_OW 250
60315: PPUSH
60316: LD_VAR 0 4
60320: PPUSH
60321: CALL_OW 251
60325: PPUSH
60326: LD_INT 6
60328: PPUSH
60329: CALL 59902 0 3
60333: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60334: LD_VAR 0 4
60338: PPUSH
60339: CALL_OW 247
60343: PUSH
60344: LD_INT 2
60346: EQUAL
60347: PUSH
60348: LD_VAR 0 7
60352: AND
60353: PUSH
60354: LD_VAR 0 4
60358: PPUSH
60359: CALL_OW 264
60363: PUSH
60364: LD_VAR 0 10
60368: IN
60369: NOT
60370: AND
60371: IFFALSE 60410
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60373: LD_VAR 0 4
60377: PPUSH
60378: LD_VAR 0 7
60382: PUSH
60383: LD_INT 1
60385: ARRAY
60386: PUSH
60387: LD_INT 1
60389: ARRAY
60390: PPUSH
60391: LD_VAR 0 7
60395: PUSH
60396: LD_INT 1
60398: ARRAY
60399: PUSH
60400: LD_INT 2
60402: ARRAY
60403: PPUSH
60404: CALL_OW 116
60408: GO 60699
// if path > tag then
60410: LD_VAR 0 2
60414: PUSH
60415: LD_VAR 0 9
60419: GREATER
60420: IFFALSE 60628
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60422: LD_ADDR_VAR 0 6
60426: PUSH
60427: LD_VAR 0 5
60431: PPUSH
60432: LD_INT 91
60434: PUSH
60435: LD_VAR 0 4
60439: PUSH
60440: LD_INT 8
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: PPUSH
60448: CALL_OW 72
60452: ST_TO_ADDR
// if nearEnemy then
60453: LD_VAR 0 6
60457: IFFALSE 60526
// begin if GetWeapon ( i ) = ru_time_lapser then
60459: LD_VAR 0 4
60463: PPUSH
60464: CALL_OW 264
60468: PUSH
60469: LD_INT 49
60471: EQUAL
60472: IFFALSE 60500
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60474: LD_VAR 0 4
60478: PPUSH
60479: LD_VAR 0 6
60483: PPUSH
60484: LD_VAR 0 4
60488: PPUSH
60489: CALL_OW 74
60493: PPUSH
60494: CALL_OW 112
60498: GO 60524
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60500: LD_VAR 0 4
60504: PPUSH
60505: LD_VAR 0 6
60509: PPUSH
60510: LD_VAR 0 4
60514: PPUSH
60515: CALL_OW 74
60519: PPUSH
60520: CALL_OW 115
// end else
60524: GO 60626
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60526: LD_VAR 0 4
60530: PPUSH
60531: LD_VAR 0 2
60535: PUSH
60536: LD_VAR 0 9
60540: ARRAY
60541: PUSH
60542: LD_INT 1
60544: ARRAY
60545: PPUSH
60546: LD_VAR 0 2
60550: PUSH
60551: LD_VAR 0 9
60555: ARRAY
60556: PUSH
60557: LD_INT 2
60559: ARRAY
60560: PPUSH
60561: CALL_OW 297
60565: PUSH
60566: LD_INT 6
60568: GREATER
60569: IFFALSE 60612
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60571: LD_VAR 0 4
60575: PPUSH
60576: LD_VAR 0 2
60580: PUSH
60581: LD_VAR 0 9
60585: ARRAY
60586: PUSH
60587: LD_INT 1
60589: ARRAY
60590: PPUSH
60591: LD_VAR 0 2
60595: PUSH
60596: LD_VAR 0 9
60600: ARRAY
60601: PUSH
60602: LD_INT 2
60604: ARRAY
60605: PPUSH
60606: CALL_OW 114
60610: GO 60626
// SetTag ( i , tag ) ;
60612: LD_VAR 0 4
60616: PPUSH
60617: LD_VAR 0 9
60621: PPUSH
60622: CALL_OW 109
// end else
60626: GO 60699
// if enemy then
60628: LD_VAR 0 5
60632: IFFALSE 60699
// begin if GetWeapon ( i ) = ru_time_lapser then
60634: LD_VAR 0 4
60638: PPUSH
60639: CALL_OW 264
60643: PUSH
60644: LD_INT 49
60646: EQUAL
60647: IFFALSE 60675
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60649: LD_VAR 0 4
60653: PPUSH
60654: LD_VAR 0 5
60658: PPUSH
60659: LD_VAR 0 4
60663: PPUSH
60664: CALL_OW 74
60668: PPUSH
60669: CALL_OW 112
60673: GO 60699
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60675: LD_VAR 0 4
60679: PPUSH
60680: LD_VAR 0 5
60684: PPUSH
60685: LD_VAR 0 4
60689: PPUSH
60690: CALL_OW 74
60694: PPUSH
60695: CALL_OW 115
// end ; end ;
60699: GO 60279
60701: POP
60702: POP
// end ;
60703: LD_VAR 0 3
60707: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60708: LD_INT 0
60710: PPUSH
60711: PPUSH
60712: PPUSH
// if not unit or IsInUnit ( unit ) then
60713: LD_VAR 0 1
60717: NOT
60718: PUSH
60719: LD_VAR 0 1
60723: PPUSH
60724: CALL_OW 310
60728: OR
60729: IFFALSE 60733
// exit ;
60731: GO 60824
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60733: LD_ADDR_VAR 0 4
60737: PUSH
60738: LD_VAR 0 1
60742: PPUSH
60743: CALL_OW 250
60747: PPUSH
60748: LD_VAR 0 2
60752: PPUSH
60753: LD_INT 1
60755: PPUSH
60756: CALL_OW 272
60760: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60761: LD_ADDR_VAR 0 5
60765: PUSH
60766: LD_VAR 0 1
60770: PPUSH
60771: CALL_OW 251
60775: PPUSH
60776: LD_VAR 0 2
60780: PPUSH
60781: LD_INT 1
60783: PPUSH
60784: CALL_OW 273
60788: ST_TO_ADDR
// if ValidHex ( x , y ) then
60789: LD_VAR 0 4
60793: PPUSH
60794: LD_VAR 0 5
60798: PPUSH
60799: CALL_OW 488
60803: IFFALSE 60824
// ComTurnXY ( unit , x , y ) ;
60805: LD_VAR 0 1
60809: PPUSH
60810: LD_VAR 0 4
60814: PPUSH
60815: LD_VAR 0 5
60819: PPUSH
60820: CALL_OW 118
// end ;
60824: LD_VAR 0 3
60828: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60829: LD_INT 0
60831: PPUSH
60832: PPUSH
// result := false ;
60833: LD_ADDR_VAR 0 3
60837: PUSH
60838: LD_INT 0
60840: ST_TO_ADDR
// if not units then
60841: LD_VAR 0 2
60845: NOT
60846: IFFALSE 60850
// exit ;
60848: GO 60895
// for i in units do
60850: LD_ADDR_VAR 0 4
60854: PUSH
60855: LD_VAR 0 2
60859: PUSH
60860: FOR_IN
60861: IFFALSE 60893
// if See ( side , i ) then
60863: LD_VAR 0 1
60867: PPUSH
60868: LD_VAR 0 4
60872: PPUSH
60873: CALL_OW 292
60877: IFFALSE 60891
// begin result := true ;
60879: LD_ADDR_VAR 0 3
60883: PUSH
60884: LD_INT 1
60886: ST_TO_ADDR
// exit ;
60887: POP
60888: POP
60889: GO 60895
// end ;
60891: GO 60860
60893: POP
60894: POP
// end ;
60895: LD_VAR 0 3
60899: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60900: LD_INT 0
60902: PPUSH
60903: PPUSH
60904: PPUSH
60905: PPUSH
// if not unit or not points then
60906: LD_VAR 0 1
60910: NOT
60911: PUSH
60912: LD_VAR 0 2
60916: NOT
60917: OR
60918: IFFALSE 60922
// exit ;
60920: GO 61012
// dist := 99999 ;
60922: LD_ADDR_VAR 0 5
60926: PUSH
60927: LD_INT 99999
60929: ST_TO_ADDR
// for i in points do
60930: LD_ADDR_VAR 0 4
60934: PUSH
60935: LD_VAR 0 2
60939: PUSH
60940: FOR_IN
60941: IFFALSE 61010
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60943: LD_ADDR_VAR 0 6
60947: PUSH
60948: LD_VAR 0 1
60952: PPUSH
60953: LD_VAR 0 4
60957: PUSH
60958: LD_INT 1
60960: ARRAY
60961: PPUSH
60962: LD_VAR 0 4
60966: PUSH
60967: LD_INT 2
60969: ARRAY
60970: PPUSH
60971: CALL_OW 297
60975: ST_TO_ADDR
// if tmpDist < dist then
60976: LD_VAR 0 6
60980: PUSH
60981: LD_VAR 0 5
60985: LESS
60986: IFFALSE 61008
// begin result := i ;
60988: LD_ADDR_VAR 0 3
60992: PUSH
60993: LD_VAR 0 4
60997: ST_TO_ADDR
// dist := tmpDist ;
60998: LD_ADDR_VAR 0 5
61002: PUSH
61003: LD_VAR 0 6
61007: ST_TO_ADDR
// end ; end ;
61008: GO 60940
61010: POP
61011: POP
// end ;
61012: LD_VAR 0 3
61016: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61017: LD_INT 0
61019: PPUSH
// uc_side := side ;
61020: LD_ADDR_OWVAR 20
61024: PUSH
61025: LD_VAR 0 1
61029: ST_TO_ADDR
// uc_nation := 3 ;
61030: LD_ADDR_OWVAR 21
61034: PUSH
61035: LD_INT 3
61037: ST_TO_ADDR
// vc_chassis := 25 ;
61038: LD_ADDR_OWVAR 37
61042: PUSH
61043: LD_INT 25
61045: ST_TO_ADDR
// vc_engine := engine_siberite ;
61046: LD_ADDR_OWVAR 39
61050: PUSH
61051: LD_INT 3
61053: ST_TO_ADDR
// vc_control := control_computer ;
61054: LD_ADDR_OWVAR 38
61058: PUSH
61059: LD_INT 3
61061: ST_TO_ADDR
// vc_weapon := 59 ;
61062: LD_ADDR_OWVAR 40
61066: PUSH
61067: LD_INT 59
61069: ST_TO_ADDR
// result := CreateVehicle ;
61070: LD_ADDR_VAR 0 5
61074: PUSH
61075: CALL_OW 45
61079: ST_TO_ADDR
// SetDir ( result , d ) ;
61080: LD_VAR 0 5
61084: PPUSH
61085: LD_VAR 0 4
61089: PPUSH
61090: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61094: LD_VAR 0 5
61098: PPUSH
61099: LD_VAR 0 2
61103: PPUSH
61104: LD_VAR 0 3
61108: PPUSH
61109: LD_INT 0
61111: PPUSH
61112: CALL_OW 48
// end ;
61116: LD_VAR 0 5
61120: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61121: LD_INT 0
61123: PPUSH
61124: PPUSH
61125: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61126: LD_ADDR_VAR 0 2
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61149: LD_VAR 0 1
61153: NOT
61154: PUSH
61155: LD_VAR 0 1
61159: PPUSH
61160: CALL_OW 264
61164: PUSH
61165: LD_INT 12
61167: PUSH
61168: LD_INT 51
61170: PUSH
61171: LD_INT 32
61173: PUSH
61174: LD_INT 89
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: IN
61183: NOT
61184: OR
61185: IFFALSE 61189
// exit ;
61187: GO 61287
// for i := 1 to 3 do
61189: LD_ADDR_VAR 0 3
61193: PUSH
61194: DOUBLE
61195: LD_INT 1
61197: DEC
61198: ST_TO_ADDR
61199: LD_INT 3
61201: PUSH
61202: FOR_TO
61203: IFFALSE 61285
// begin tmp := GetCargo ( cargo , i ) ;
61205: LD_ADDR_VAR 0 4
61209: PUSH
61210: LD_VAR 0 1
61214: PPUSH
61215: LD_VAR 0 3
61219: PPUSH
61220: CALL_OW 289
61224: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61225: LD_ADDR_VAR 0 2
61229: PUSH
61230: LD_VAR 0 2
61234: PPUSH
61235: LD_VAR 0 3
61239: PPUSH
61240: LD_VAR 0 4
61244: PPUSH
61245: CALL_OW 1
61249: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61250: LD_ADDR_VAR 0 2
61254: PUSH
61255: LD_VAR 0 2
61259: PPUSH
61260: LD_INT 4
61262: PPUSH
61263: LD_VAR 0 2
61267: PUSH
61268: LD_INT 4
61270: ARRAY
61271: PUSH
61272: LD_VAR 0 4
61276: PLUS
61277: PPUSH
61278: CALL_OW 1
61282: ST_TO_ADDR
// end ;
61283: GO 61202
61285: POP
61286: POP
// end ;
61287: LD_VAR 0 2
61291: RET
// export function Length ( array ) ; begin
61292: LD_INT 0
61294: PPUSH
// result := array + 0 ;
61295: LD_ADDR_VAR 0 2
61299: PUSH
61300: LD_VAR 0 1
61304: PUSH
61305: LD_INT 0
61307: PLUS
61308: ST_TO_ADDR
// end ;
61309: LD_VAR 0 2
61313: RET
// export function PrepareArray ( array ) ; begin
61314: LD_INT 0
61316: PPUSH
// result := array diff 0 ;
61317: LD_ADDR_VAR 0 2
61321: PUSH
61322: LD_VAR 0 1
61326: PUSH
61327: LD_INT 0
61329: DIFF
61330: ST_TO_ADDR
// if not result [ 1 ] then
61331: LD_VAR 0 2
61335: PUSH
61336: LD_INT 1
61338: ARRAY
61339: NOT
61340: IFFALSE 61360
// result := Delete ( result , 1 ) ;
61342: LD_ADDR_VAR 0 2
61346: PUSH
61347: LD_VAR 0 2
61351: PPUSH
61352: LD_INT 1
61354: PPUSH
61355: CALL_OW 3
61359: ST_TO_ADDR
// end ;
61360: LD_VAR 0 2
61364: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61365: LD_INT 0
61367: PPUSH
61368: PPUSH
61369: PPUSH
61370: PPUSH
// sibRocketRange := 25 ;
61371: LD_ADDR_VAR 0 6
61375: PUSH
61376: LD_INT 25
61378: ST_TO_ADDR
// result := false ;
61379: LD_ADDR_VAR 0 4
61383: PUSH
61384: LD_INT 0
61386: ST_TO_ADDR
// for i := 0 to 5 do
61387: LD_ADDR_VAR 0 5
61391: PUSH
61392: DOUBLE
61393: LD_INT 0
61395: DEC
61396: ST_TO_ADDR
61397: LD_INT 5
61399: PUSH
61400: FOR_TO
61401: IFFALSE 61468
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61403: LD_VAR 0 1
61407: PPUSH
61408: LD_VAR 0 5
61412: PPUSH
61413: LD_VAR 0 6
61417: PPUSH
61418: CALL_OW 272
61422: PPUSH
61423: LD_VAR 0 2
61427: PPUSH
61428: LD_VAR 0 5
61432: PPUSH
61433: LD_VAR 0 6
61437: PPUSH
61438: CALL_OW 273
61442: PPUSH
61443: LD_VAR 0 3
61447: PPUSH
61448: CALL_OW 309
61452: IFFALSE 61466
// begin result := true ;
61454: LD_ADDR_VAR 0 4
61458: PUSH
61459: LD_INT 1
61461: ST_TO_ADDR
// exit ;
61462: POP
61463: POP
61464: GO 61470
// end ;
61466: GO 61400
61468: POP
61469: POP
// end ;
61470: LD_VAR 0 4
61474: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
61475: LD_INT 0
61477: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
61478: LD_VAR 0 1
61482: PPUSH
61483: LD_VAR 0 2
61487: PPUSH
61488: LD_INT 0
61490: PPUSH
61491: LD_INT 0
61493: PPUSH
61494: LD_INT 1
61496: PPUSH
61497: LD_INT 0
61499: PPUSH
61500: CALL_OW 587
// end ;
61504: LD_VAR 0 3
61508: RET
