// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_EXP 17
  25: EQUAL
  26: IFFALSE 98
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  28: LD_INT 68
  30: PPUSH
  31: LD_VAR 0 1
  35: PPUSH
  36: CALL_OW 255
  40: PPUSH
  41: CALL_OW 321
  45: PUSH
  46: LD_INT 2
  48: EQUAL
  49: IFFALSE 61
// eff := 70 else
  51: LD_ADDR_VAR 0 4
  55: PUSH
  56: LD_INT 70
  58: ST_TO_ADDR
  59: GO 69
// eff := 30 ;
  61: LD_ADDR_VAR 0 4
  65: PUSH
  66: LD_INT 30
  68: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  69: LD_VAR 0 1
  73: PPUSH
  74: CALL_OW 250
  78: PPUSH
  79: LD_VAR 0 1
  83: PPUSH
  84: CALL_OW 251
  88: PPUSH
  89: LD_VAR 0 4
  93: PPUSH
  94: CALL_OW 495
// end ; end ;
  98: LD_VAR 0 2
 102: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 103: LD_INT 0
 105: PPUSH
// end ;
 106: LD_VAR 0 4
 110: RET
// export function SOS_Command ( cmd ) ; begin
 111: LD_INT 0
 113: PPUSH
// end ;
 114: LD_VAR 0 2
 118: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
 119: LD_INT 0
 121: PPUSH
// end ;
 122: LD_VAR 0 6
 126: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 127: LD_INT 0
 129: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 130: LD_VAR 0 1
 134: PUSH
 135: LD_INT 250
 137: EQUAL
 138: PUSH
 139: LD_VAR 0 2
 143: PPUSH
 144: CALL_OW 264
 148: PUSH
 149: LD_EXP 20
 153: EQUAL
 154: AND
 155: IFFALSE 176
// MinerPlaceMine ( unit , x , y ) ;
 157: LD_VAR 0 2
 161: PPUSH
 162: LD_VAR 0 4
 166: PPUSH
 167: LD_VAR 0 5
 171: PPUSH
 172: CALL 2525 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 176: LD_VAR 0 1
 180: PUSH
 181: LD_INT 251
 183: EQUAL
 184: PUSH
 185: LD_VAR 0 2
 189: PPUSH
 190: CALL_OW 264
 194: PUSH
 195: LD_EXP 20
 199: EQUAL
 200: AND
 201: IFFALSE 222
// MinerDetonateMine ( unit , x , y ) ;
 203: LD_VAR 0 2
 207: PPUSH
 208: LD_VAR 0 4
 212: PPUSH
 213: LD_VAR 0 5
 217: PPUSH
 218: CALL 2802 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 222: LD_VAR 0 1
 226: PUSH
 227: LD_INT 252
 229: EQUAL
 230: PUSH
 231: LD_VAR 0 2
 235: PPUSH
 236: CALL_OW 264
 240: PUSH
 241: LD_EXP 20
 245: EQUAL
 246: AND
 247: IFFALSE 268
// MinerCreateMinefield ( unit , x , y ) ;
 249: LD_VAR 0 2
 253: PPUSH
 254: LD_VAR 0 4
 258: PPUSH
 259: LD_VAR 0 5
 263: PPUSH
 264: CALL 3219 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 268: LD_VAR 0 1
 272: PUSH
 273: LD_INT 253
 275: EQUAL
 276: PUSH
 277: LD_VAR 0 2
 281: PPUSH
 282: CALL_OW 257
 286: PUSH
 287: LD_INT 5
 289: EQUAL
 290: AND
 291: IFFALSE 312
// ComBinocular ( unit , x , y ) ;
 293: LD_VAR 0 2
 297: PPUSH
 298: LD_VAR 0 4
 302: PPUSH
 303: LD_VAR 0 5
 307: PPUSH
 308: CALL 3590 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 312: LD_VAR 0 1
 316: PUSH
 317: LD_INT 254
 319: EQUAL
 320: PUSH
 321: LD_VAR 0 2
 325: PPUSH
 326: CALL_OW 264
 330: PUSH
 331: LD_EXP 15
 335: EQUAL
 336: AND
 337: PUSH
 338: LD_VAR 0 3
 342: PPUSH
 343: CALL_OW 263
 347: PUSH
 348: LD_INT 3
 350: EQUAL
 351: AND
 352: IFFALSE 368
// HackDestroyVehicle ( unit , selectedUnit ) ;
 354: LD_VAR 0 2
 358: PPUSH
 359: LD_VAR 0 3
 363: PPUSH
 364: CALL 1885 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 368: LD_VAR 0 1
 372: PUSH
 373: LD_INT 255
 375: EQUAL
 376: PUSH
 377: LD_VAR 0 2
 381: PPUSH
 382: CALL_OW 264
 386: PUSH
 387: LD_INT 14
 389: PUSH
 390: LD_INT 53
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: IN
 397: AND
 398: PUSH
 399: LD_VAR 0 4
 403: PPUSH
 404: LD_VAR 0 5
 408: PPUSH
 409: CALL_OW 488
 413: AND
 414: IFFALSE 438
// CutTreeXYR ( unit , x , y , 12 ) ;
 416: LD_VAR 0 2
 420: PPUSH
 421: LD_VAR 0 4
 425: PPUSH
 426: LD_VAR 0 5
 430: PPUSH
 431: LD_INT 12
 433: PPUSH
 434: CALL 451 0 4
// end ;
 438: LD_VAR 0 6
 442: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
 443: LD_INT 0
 445: PPUSH
// end ;
 446: LD_VAR 0 4
 450: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 451: LD_INT 0
 453: PPUSH
 454: PPUSH
 455: PPUSH
 456: PPUSH
 457: PPUSH
 458: PPUSH
 459: PPUSH
 460: PPUSH
 461: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 462: LD_VAR 0 1
 466: NOT
 467: PUSH
 468: LD_VAR 0 2
 472: PPUSH
 473: LD_VAR 0 3
 477: PPUSH
 478: CALL_OW 488
 482: NOT
 483: OR
 484: PUSH
 485: LD_VAR 0 4
 489: NOT
 490: OR
 491: IFFALSE 495
// exit ;
 493: GO 835
// list := [ ] ;
 495: LD_ADDR_VAR 0 13
 499: PUSH
 500: EMPTY
 501: ST_TO_ADDR
// if x - r < 0 then
 502: LD_VAR 0 2
 506: PUSH
 507: LD_VAR 0 4
 511: MINUS
 512: PUSH
 513: LD_INT 0
 515: LESS
 516: IFFALSE 528
// min_x := 0 else
 518: LD_ADDR_VAR 0 7
 522: PUSH
 523: LD_INT 0
 525: ST_TO_ADDR
 526: GO 544
// min_x := x - r ;
 528: LD_ADDR_VAR 0 7
 532: PUSH
 533: LD_VAR 0 2
 537: PUSH
 538: LD_VAR 0 4
 542: MINUS
 543: ST_TO_ADDR
// if y - r < 0 then
 544: LD_VAR 0 3
 548: PUSH
 549: LD_VAR 0 4
 553: MINUS
 554: PUSH
 555: LD_INT 0
 557: LESS
 558: IFFALSE 570
// min_y := 0 else
 560: LD_ADDR_VAR 0 8
 564: PUSH
 565: LD_INT 0
 567: ST_TO_ADDR
 568: GO 586
// min_y := y - r ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: LD_VAR 0 3
 579: PUSH
 580: LD_VAR 0 4
 584: MINUS
 585: ST_TO_ADDR
// max_x := x + r ;
 586: LD_ADDR_VAR 0 9
 590: PUSH
 591: LD_VAR 0 2
 595: PUSH
 596: LD_VAR 0 4
 600: PLUS
 601: ST_TO_ADDR
// max_y := y + r ;
 602: LD_ADDR_VAR 0 10
 606: PUSH
 607: LD_VAR 0 3
 611: PUSH
 612: LD_VAR 0 4
 616: PLUS
 617: ST_TO_ADDR
// for _x = min_x to max_x do
 618: LD_ADDR_VAR 0 11
 622: PUSH
 623: DOUBLE
 624: LD_VAR 0 7
 628: DEC
 629: ST_TO_ADDR
 630: LD_VAR 0 9
 634: PUSH
 635: FOR_TO
 636: IFFALSE 753
// for _y = min_y to max_y do
 638: LD_ADDR_VAR 0 12
 642: PUSH
 643: DOUBLE
 644: LD_VAR 0 8
 648: DEC
 649: ST_TO_ADDR
 650: LD_VAR 0 10
 654: PUSH
 655: FOR_TO
 656: IFFALSE 749
// begin if not ValidHex ( _x , _y ) then
 658: LD_VAR 0 11
 662: PPUSH
 663: LD_VAR 0 12
 667: PPUSH
 668: CALL_OW 488
 672: NOT
 673: IFFALSE 677
// continue ;
 675: GO 655
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 677: LD_VAR 0 11
 681: PPUSH
 682: LD_VAR 0 12
 686: PPUSH
 687: CALL_OW 351
 691: PUSH
 692: LD_VAR 0 11
 696: PPUSH
 697: LD_VAR 0 12
 701: PPUSH
 702: CALL_OW 554
 706: AND
 707: IFFALSE 747
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
 709: LD_ADDR_VAR 0 13
 713: PUSH
 714: LD_VAR 0 13
 718: PPUSH
 719: LD_VAR 0 13
 723: PUSH
 724: LD_INT 1
 726: PLUS
 727: PPUSH
 728: LD_VAR 0 11
 732: PUSH
 733: LD_VAR 0 12
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 2
 746: ST_TO_ADDR
// end ;
 747: GO 655
 749: POP
 750: POP
 751: GO 635
 753: POP
 754: POP
// if not list then
 755: LD_VAR 0 13
 759: NOT
 760: IFFALSE 764
// exit ;
 762: GO 835
// for i in list do
 764: LD_ADDR_VAR 0 6
 768: PUSH
 769: LD_VAR 0 13
 773: PUSH
 774: FOR_IN
 775: IFFALSE 833
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
 777: LD_VAR 0 1
 781: PPUSH
 782: LD_STRING M
 784: PUSH
 785: LD_VAR 0 6
 789: PUSH
 790: LD_INT 1
 792: ARRAY
 793: PUSH
 794: LD_VAR 0 6
 798: PUSH
 799: LD_INT 2
 801: ARRAY
 802: PUSH
 803: LD_INT 0
 805: PUSH
 806: LD_INT 0
 808: PUSH
 809: LD_INT 0
 811: PUSH
 812: LD_INT 0
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: PPUSH
 827: CALL_OW 447
 831: GO 774
 833: POP
 834: POP
// end ;
 835: LD_VAR 0 5
 839: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
 840: LD_EXP 3
 844: NOT
 845: IFFALSE 895
 847: GO 849
 849: DISABLE
// begin initHack := true ;
 850: LD_ADDR_EXP 3
 854: PUSH
 855: LD_INT 1
 857: ST_TO_ADDR
// hackTanks := [ ] ;
 858: LD_ADDR_EXP 4
 862: PUSH
 863: EMPTY
 864: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
 865: LD_ADDR_EXP 5
 869: PUSH
 870: EMPTY
 871: ST_TO_ADDR
// hackLimit := 3 ;
 872: LD_ADDR_EXP 6
 876: PUSH
 877: LD_INT 3
 879: ST_TO_ADDR
// hackDist := 12 ;
 880: LD_ADDR_EXP 7
 884: PUSH
 885: LD_INT 12
 887: ST_TO_ADDR
// hackCounter := [ ] ;
 888: LD_ADDR_EXP 8
 892: PUSH
 893: EMPTY
 894: ST_TO_ADDR
// end ;
 895: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
 896: LD_EXP 3
 900: PUSH
 901: LD_INT 34
 903: PUSH
 904: LD_EXP 15
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PPUSH
 913: CALL_OW 69
 917: AND
 918: IFFALSE 1173
 920: GO 922
 922: DISABLE
 923: LD_INT 0
 925: PPUSH
 926: PPUSH
// begin enable ;
 927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
 928: LD_ADDR_VAR 0 1
 932: PUSH
 933: LD_INT 34
 935: PUSH
 936: LD_EXP 15
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 69
 949: PUSH
 950: FOR_IN
 951: IFFALSE 1171
// begin if not i in hackTanks then
 953: LD_VAR 0 1
 957: PUSH
 958: LD_EXP 4
 962: IN
 963: NOT
 964: IFFALSE 1047
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
 966: LD_ADDR_EXP 4
 970: PUSH
 971: LD_EXP 4
 975: PPUSH
 976: LD_EXP 4
 980: PUSH
 981: LD_INT 1
 983: PLUS
 984: PPUSH
 985: LD_VAR 0 1
 989: PPUSH
 990: CALL_OW 1
 994: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
 995: LD_ADDR_EXP 5
 999: PUSH
1000: LD_EXP 5
1004: PPUSH
1005: LD_EXP 5
1009: PUSH
1010: LD_INT 1
1012: PLUS
1013: PPUSH
1014: EMPTY
1015: PPUSH
1016: CALL_OW 1
1020: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1021: LD_ADDR_EXP 8
1025: PUSH
1026: LD_EXP 8
1030: PPUSH
1031: LD_EXP 8
1035: PUSH
1036: LD_INT 1
1038: PLUS
1039: PPUSH
1040: EMPTY
1041: PPUSH
1042: CALL_OW 1
1046: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1047: LD_VAR 0 1
1051: PPUSH
1052: CALL_OW 302
1056: NOT
1057: IFFALSE 1070
// begin HackUnlinkAll ( i ) ;
1059: LD_VAR 0 1
1063: PPUSH
1064: CALL 1176 0 1
// continue ;
1068: GO 950
// end ; HackCheckCapturedStatus ( i ) ;
1070: LD_VAR 0 1
1074: PPUSH
1075: CALL 1619 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: LD_INT 81
1086: PUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 255
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: LD_INT 33
1103: PUSH
1104: LD_INT 3
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 91
1113: PUSH
1114: LD_VAR 0 1
1118: PUSH
1119: LD_EXP 7
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 50
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PPUSH
1141: CALL_OW 69
1145: ST_TO_ADDR
// if not tmp then
1146: LD_VAR 0 2
1150: NOT
1151: IFFALSE 1155
// continue ;
1153: GO 950
// HackLink ( i , tmp ) ;
1155: LD_VAR 0 1
1159: PPUSH
1160: LD_VAR 0 2
1164: PPUSH
1165: CALL 1312 0 2
// end ;
1169: GO 950
1171: POP
1172: POP
// end ;
1173: PPOPN 2
1175: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1176: LD_INT 0
1178: PPUSH
1179: PPUSH
1180: PPUSH
// if not hack in hackTanks then
1181: LD_VAR 0 1
1185: PUSH
1186: LD_EXP 4
1190: IN
1191: NOT
1192: IFFALSE 1196
// exit ;
1194: GO 1307
// index := GetElementIndex ( hackTanks , hack ) ;
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: LD_EXP 4
1205: PPUSH
1206: LD_VAR 0 1
1210: PPUSH
1211: CALL 22734 0 2
1215: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1216: LD_EXP 5
1220: PUSH
1221: LD_VAR 0 4
1225: ARRAY
1226: IFFALSE 1307
// begin for i in hackTanksCaptured [ index ] do
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: LD_EXP 5
1237: PUSH
1238: LD_VAR 0 4
1242: ARRAY
1243: PUSH
1244: FOR_IN
1245: IFFALSE 1271
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1247: LD_VAR 0 3
1251: PUSH
1252: LD_INT 1
1254: ARRAY
1255: PPUSH
1256: LD_VAR 0 3
1260: PUSH
1261: LD_INT 2
1263: ARRAY
1264: PPUSH
1265: CALL_OW 235
1269: GO 1244
1271: POP
1272: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1273: LD_ADDR_EXP 5
1277: PUSH
1278: LD_EXP 5
1282: PPUSH
1283: LD_VAR 0 4
1287: PPUSH
1288: EMPTY
1289: PPUSH
1290: CALL_OW 1
1294: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1295: LD_VAR 0 1
1299: PPUSH
1300: LD_INT 0
1302: PPUSH
1303: CALL_OW 505
// end ; end ;
1307: LD_VAR 0 2
1311: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1312: LD_INT 0
1314: PPUSH
1315: PPUSH
1316: PPUSH
// if not hack in hackTanks or not vehicles then
1317: LD_VAR 0 1
1321: PUSH
1322: LD_EXP 4
1326: IN
1327: NOT
1328: PUSH
1329: LD_VAR 0 2
1333: NOT
1334: OR
1335: IFFALSE 1339
// exit ;
1337: GO 1614
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1339: LD_ADDR_VAR 0 2
1343: PUSH
1344: LD_VAR 0 1
1348: PPUSH
1349: LD_VAR 0 2
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PPUSH
1360: CALL 23384 0 4
1364: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1365: LD_ADDR_VAR 0 5
1369: PUSH
1370: LD_EXP 4
1374: PPUSH
1375: LD_VAR 0 1
1379: PPUSH
1380: CALL 22734 0 2
1384: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1385: LD_EXP 5
1389: PUSH
1390: LD_VAR 0 5
1394: ARRAY
1395: PUSH
1396: LD_EXP 6
1400: LESS
1401: IFFALSE 1590
// begin for i := 1 to vehicles do
1403: LD_ADDR_VAR 0 4
1407: PUSH
1408: DOUBLE
1409: LD_INT 1
1411: DEC
1412: ST_TO_ADDR
1413: LD_VAR 0 2
1417: PUSH
1418: FOR_TO
1419: IFFALSE 1588
// begin if hackTanksCaptured [ index ] = hackLimit then
1421: LD_EXP 5
1425: PUSH
1426: LD_VAR 0 5
1430: ARRAY
1431: PUSH
1432: LD_EXP 6
1436: EQUAL
1437: IFFALSE 1441
// break ;
1439: GO 1588
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1441: LD_ADDR_EXP 8
1445: PUSH
1446: LD_EXP 8
1450: PPUSH
1451: LD_VAR 0 5
1455: PPUSH
1456: LD_EXP 8
1460: PUSH
1461: LD_VAR 0 5
1465: ARRAY
1466: PUSH
1467: LD_INT 1
1469: PLUS
1470: PPUSH
1471: CALL_OW 1
1475: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1476: LD_ADDR_EXP 5
1480: PUSH
1481: LD_EXP 5
1485: PPUSH
1486: LD_VAR 0 5
1490: PUSH
1491: LD_EXP 5
1495: PUSH
1496: LD_VAR 0 5
1500: ARRAY
1501: PUSH
1502: LD_INT 1
1504: PLUS
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PPUSH
1510: LD_VAR 0 2
1514: PUSH
1515: LD_VAR 0 4
1519: ARRAY
1520: PUSH
1521: LD_VAR 0 2
1525: PUSH
1526: LD_VAR 0 4
1530: ARRAY
1531: PPUSH
1532: CALL_OW 255
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PPUSH
1541: CALL 22949 0 3
1545: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1546: LD_VAR 0 2
1550: PUSH
1551: LD_VAR 0 4
1555: ARRAY
1556: PPUSH
1557: LD_VAR 0 1
1561: PPUSH
1562: CALL_OW 255
1566: PPUSH
1567: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1571: LD_VAR 0 2
1575: PUSH
1576: LD_VAR 0 4
1580: ARRAY
1581: PPUSH
1582: CALL_OW 141
// end ;
1586: GO 1418
1588: POP
1589: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1590: LD_VAR 0 1
1594: PPUSH
1595: LD_EXP 5
1599: PUSH
1600: LD_VAR 0 5
1604: ARRAY
1605: PUSH
1606: LD_INT 0
1608: PLUS
1609: PPUSH
1610: CALL_OW 505
// end ;
1614: LD_VAR 0 3
1618: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1619: LD_INT 0
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// if not hack in hackTanks then
1625: LD_VAR 0 1
1629: PUSH
1630: LD_EXP 4
1634: IN
1635: NOT
1636: IFFALSE 1640
// exit ;
1638: GO 1880
// index := GetElementIndex ( hackTanks , hack ) ;
1640: LD_ADDR_VAR 0 4
1644: PUSH
1645: LD_EXP 4
1649: PPUSH
1650: LD_VAR 0 1
1654: PPUSH
1655: CALL 22734 0 2
1659: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1660: LD_ADDR_VAR 0 3
1664: PUSH
1665: DOUBLE
1666: LD_EXP 5
1670: PUSH
1671: LD_VAR 0 4
1675: ARRAY
1676: INC
1677: ST_TO_ADDR
1678: LD_INT 1
1680: PUSH
1681: FOR_DOWNTO
1682: IFFALSE 1854
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1684: LD_ADDR_VAR 0 5
1688: PUSH
1689: LD_EXP 5
1693: PUSH
1694: LD_VAR 0 4
1698: ARRAY
1699: PUSH
1700: LD_VAR 0 3
1704: ARRAY
1705: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1706: LD_VAR 0 5
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: CALL_OW 302
1719: NOT
1720: PUSH
1721: LD_VAR 0 5
1725: PUSH
1726: LD_INT 1
1728: ARRAY
1729: PPUSH
1730: CALL_OW 255
1734: PUSH
1735: LD_VAR 0 1
1739: PPUSH
1740: CALL_OW 255
1744: NONEQUAL
1745: OR
1746: IFFALSE 1852
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
1748: LD_VAR 0 5
1752: PUSH
1753: LD_INT 1
1755: ARRAY
1756: PPUSH
1757: CALL_OW 305
1761: PUSH
1762: LD_VAR 0 5
1766: PUSH
1767: LD_INT 1
1769: ARRAY
1770: PPUSH
1771: CALL_OW 255
1775: PUSH
1776: LD_VAR 0 1
1780: PPUSH
1781: CALL_OW 255
1785: EQUAL
1786: AND
1787: IFFALSE 1811
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
1789: LD_VAR 0 5
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_VAR 0 5
1802: PUSH
1803: LD_INT 2
1805: ARRAY
1806: PPUSH
1807: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
1811: LD_ADDR_EXP 5
1815: PUSH
1816: LD_EXP 5
1820: PPUSH
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_EXP 5
1830: PUSH
1831: LD_VAR 0 4
1835: ARRAY
1836: PPUSH
1837: LD_VAR 0 3
1841: PPUSH
1842: CALL_OW 3
1846: PPUSH
1847: CALL_OW 1
1851: ST_TO_ADDR
// end ; end ;
1852: GO 1681
1854: POP
1855: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1856: LD_VAR 0 1
1860: PPUSH
1861: LD_EXP 5
1865: PUSH
1866: LD_VAR 0 4
1870: ARRAY
1871: PUSH
1872: LD_INT 0
1874: PLUS
1875: PPUSH
1876: CALL_OW 505
// end ;
1880: LD_VAR 0 2
1884: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
1885: LD_INT 0
1887: PPUSH
1888: PPUSH
1889: PPUSH
1890: PPUSH
// if not hack in hackTanks then
1891: LD_VAR 0 1
1895: PUSH
1896: LD_EXP 4
1900: IN
1901: NOT
1902: IFFALSE 1906
// exit ;
1904: GO 1991
// index := GetElementIndex ( hackTanks , hack ) ;
1906: LD_ADDR_VAR 0 5
1910: PUSH
1911: LD_EXP 4
1915: PPUSH
1916: LD_VAR 0 1
1920: PPUSH
1921: CALL 22734 0 2
1925: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: DOUBLE
1932: LD_INT 1
1934: DEC
1935: ST_TO_ADDR
1936: LD_EXP 5
1940: PUSH
1941: LD_VAR 0 5
1945: ARRAY
1946: PUSH
1947: FOR_TO
1948: IFFALSE 1989
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
1950: LD_EXP 5
1954: PUSH
1955: LD_VAR 0 5
1959: ARRAY
1960: PUSH
1961: LD_VAR 0 4
1965: ARRAY
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PUSH
1971: LD_VAR 0 2
1975: EQUAL
1976: IFFALSE 1987
// KillUnit ( vehicle ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: CALL_OW 66
1987: GO 1947
1989: POP
1990: POP
// end ;
1991: LD_VAR 0 3
1995: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
1996: LD_EXP 9
2000: NOT
2001: IFFALSE 2036
2003: GO 2005
2005: DISABLE
// begin initMiner := true ;
2006: LD_ADDR_EXP 9
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// minersList := [ ] ;
2014: LD_ADDR_EXP 10
2018: PUSH
2019: EMPTY
2020: ST_TO_ADDR
// minerMinesList := [ ] ;
2021: LD_ADDR_EXP 11
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 5
2035: ST_TO_ADDR
// end ;
2036: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2037: LD_EXP 9
2041: PUSH
2042: LD_INT 34
2044: PUSH
2045: LD_EXP 20
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: AND
2059: IFFALSE 2522
2061: GO 2063
2063: DISABLE
2064: LD_INT 0
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
// begin enable ;
2070: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2071: LD_ADDR_VAR 0 1
2075: PUSH
2076: LD_INT 34
2078: PUSH
2079: LD_EXP 20
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PPUSH
2088: CALL_OW 69
2092: PUSH
2093: FOR_IN
2094: IFFALSE 2166
// begin if not i in minersList then
2096: LD_VAR 0 1
2100: PUSH
2101: LD_EXP 10
2105: IN
2106: NOT
2107: IFFALSE 2164
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2109: LD_ADDR_EXP 10
2113: PUSH
2114: LD_EXP 10
2118: PPUSH
2119: LD_EXP 10
2123: PUSH
2124: LD_INT 1
2126: PLUS
2127: PPUSH
2128: LD_VAR 0 1
2132: PPUSH
2133: CALL_OW 1
2137: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2138: LD_ADDR_EXP 11
2142: PUSH
2143: LD_EXP 11
2147: PPUSH
2148: LD_EXP 11
2152: PUSH
2153: LD_INT 1
2155: PLUS
2156: PPUSH
2157: EMPTY
2158: PPUSH
2159: CALL_OW 1
2163: ST_TO_ADDR
// end end ;
2164: GO 2093
2166: POP
2167: POP
// for i := minerMinesList downto 1 do
2168: LD_ADDR_VAR 0 1
2172: PUSH
2173: DOUBLE
2174: LD_EXP 11
2178: INC
2179: ST_TO_ADDR
2180: LD_INT 1
2182: PUSH
2183: FOR_DOWNTO
2184: IFFALSE 2520
// begin if IsLive ( minersList [ i ] ) then
2186: LD_EXP 10
2190: PUSH
2191: LD_VAR 0 1
2195: ARRAY
2196: PPUSH
2197: CALL_OW 300
2201: IFFALSE 2229
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2203: LD_EXP 10
2207: PUSH
2208: LD_VAR 0 1
2212: ARRAY
2213: PPUSH
2214: LD_EXP 11
2218: PUSH
2219: LD_VAR 0 1
2223: ARRAY
2224: PPUSH
2225: CALL_OW 505
// if not minerMinesList [ i ] then
2229: LD_EXP 11
2233: PUSH
2234: LD_VAR 0 1
2238: ARRAY
2239: NOT
2240: IFFALSE 2244
// continue ;
2242: GO 2183
// for j := minerMinesList [ i ] downto 1 do
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: DOUBLE
2250: LD_EXP 11
2254: PUSH
2255: LD_VAR 0 1
2259: ARRAY
2260: INC
2261: ST_TO_ADDR
2262: LD_INT 1
2264: PUSH
2265: FOR_DOWNTO
2266: IFFALSE 2516
// begin side := GetSide ( minersList [ i ] ) ;
2268: LD_ADDR_VAR 0 3
2272: PUSH
2273: LD_EXP 10
2277: PUSH
2278: LD_VAR 0 1
2282: ARRAY
2283: PPUSH
2284: CALL_OW 255
2288: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2289: LD_ADDR_VAR 0 4
2293: PUSH
2294: LD_EXP 11
2298: PUSH
2299: LD_VAR 0 1
2303: ARRAY
2304: PUSH
2305: LD_VAR 0 2
2309: ARRAY
2310: PUSH
2311: LD_INT 1
2313: ARRAY
2314: PPUSH
2315: LD_EXP 11
2319: PUSH
2320: LD_VAR 0 1
2324: ARRAY
2325: PUSH
2326: LD_VAR 0 2
2330: ARRAY
2331: PUSH
2332: LD_INT 2
2334: ARRAY
2335: PPUSH
2336: CALL_OW 428
2340: ST_TO_ADDR
// if not tmp then
2341: LD_VAR 0 4
2345: NOT
2346: IFFALSE 2350
// continue ;
2348: GO 2265
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2350: LD_VAR 0 4
2354: PUSH
2355: LD_INT 81
2357: PUSH
2358: LD_VAR 0 3
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: IN
2372: PUSH
2373: LD_EXP 11
2377: PUSH
2378: LD_VAR 0 1
2382: ARRAY
2383: PUSH
2384: LD_VAR 0 2
2388: ARRAY
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: PPUSH
2394: LD_EXP 11
2398: PUSH
2399: LD_VAR 0 1
2403: ARRAY
2404: PUSH
2405: LD_VAR 0 2
2409: ARRAY
2410: PUSH
2411: LD_INT 2
2413: ARRAY
2414: PPUSH
2415: CALL_OW 458
2419: AND
2420: IFFALSE 2514
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
2422: LD_EXP 11
2426: PUSH
2427: LD_VAR 0 1
2431: ARRAY
2432: PUSH
2433: LD_VAR 0 2
2437: ARRAY
2438: PUSH
2439: LD_INT 1
2441: ARRAY
2442: PPUSH
2443: LD_EXP 11
2447: PUSH
2448: LD_VAR 0 1
2452: ARRAY
2453: PUSH
2454: LD_VAR 0 2
2458: ARRAY
2459: PUSH
2460: LD_INT 2
2462: ARRAY
2463: PPUSH
2464: LD_VAR 0 3
2468: PPUSH
2469: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
2473: LD_ADDR_EXP 11
2477: PUSH
2478: LD_EXP 11
2482: PPUSH
2483: LD_VAR 0 1
2487: PPUSH
2488: LD_EXP 11
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 2
2503: PPUSH
2504: CALL_OW 3
2508: PPUSH
2509: CALL_OW 1
2513: ST_TO_ADDR
// end ; end ;
2514: GO 2265
2516: POP
2517: POP
// end ;
2518: GO 2183
2520: POP
2521: POP
// end ;
2522: PPOPN 4
2524: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
2525: LD_INT 0
2527: PPUSH
2528: PPUSH
// result := false ;
2529: LD_ADDR_VAR 0 4
2533: PUSH
2534: LD_INT 0
2536: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
2537: LD_VAR 0 1
2541: PPUSH
2542: CALL_OW 264
2546: PUSH
2547: LD_EXP 20
2551: EQUAL
2552: NOT
2553: IFFALSE 2557
// exit ;
2555: GO 2797
// index := GetElementIndex ( minersList , unit ) ;
2557: LD_ADDR_VAR 0 5
2561: PUSH
2562: LD_EXP 10
2566: PPUSH
2567: LD_VAR 0 1
2571: PPUSH
2572: CALL 22734 0 2
2576: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
2577: LD_EXP 11
2581: PUSH
2582: LD_VAR 0 5
2586: ARRAY
2587: PUSH
2588: LD_EXP 12
2592: GREATEREQUAL
2593: IFFALSE 2597
// exit ;
2595: GO 2797
// ComMoveXY ( unit , x , y ) ;
2597: LD_VAR 0 1
2601: PPUSH
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_VAR 0 3
2611: PPUSH
2612: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2616: LD_INT 35
2618: PPUSH
2619: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
2623: LD_VAR 0 1
2627: PPUSH
2628: LD_VAR 0 2
2632: PPUSH
2633: LD_VAR 0 3
2637: PPUSH
2638: CALL 53506 0 3
2642: NOT
2643: PUSH
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL_OW 314
2653: AND
2654: IFFALSE 2658
// exit ;
2656: GO 2797
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
2658: LD_VAR 0 2
2662: PPUSH
2663: LD_VAR 0 3
2667: PPUSH
2668: CALL_OW 428
2672: PUSH
2673: LD_VAR 0 1
2677: EQUAL
2678: PUSH
2679: LD_VAR 0 1
2683: PPUSH
2684: CALL_OW 314
2688: NOT
2689: AND
2690: IFFALSE 2616
// PlaySoundXY ( x , y , PlantMine ) ;
2692: LD_VAR 0 2
2696: PPUSH
2697: LD_VAR 0 3
2701: PPUSH
2702: LD_STRING PlantMine
2704: PPUSH
2705: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
2709: LD_VAR 0 2
2713: PPUSH
2714: LD_VAR 0 3
2718: PPUSH
2719: LD_VAR 0 1
2723: PPUSH
2724: CALL_OW 255
2728: PPUSH
2729: LD_INT 0
2731: PPUSH
2732: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
2736: LD_ADDR_EXP 11
2740: PUSH
2741: LD_EXP 11
2745: PPUSH
2746: LD_VAR 0 5
2750: PUSH
2751: LD_EXP 11
2755: PUSH
2756: LD_VAR 0 5
2760: ARRAY
2761: PUSH
2762: LD_INT 1
2764: PLUS
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PPUSH
2770: LD_VAR 0 2
2774: PUSH
2775: LD_VAR 0 3
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL 22949 0 3
2788: ST_TO_ADDR
// result := true ;
2789: LD_ADDR_VAR 0 4
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// end ;
2797: LD_VAR 0 4
2801: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
2802: LD_INT 0
2804: PPUSH
2805: PPUSH
2806: PPUSH
// if not unit in minersList then
2807: LD_VAR 0 1
2811: PUSH
2812: LD_EXP 10
2816: IN
2817: NOT
2818: IFFALSE 2822
// exit ;
2820: GO 3214
// index := GetElementIndex ( minersList , unit ) ;
2822: LD_ADDR_VAR 0 6
2826: PUSH
2827: LD_EXP 10
2831: PPUSH
2832: LD_VAR 0 1
2836: PPUSH
2837: CALL 22734 0 2
2841: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
2842: LD_ADDR_VAR 0 5
2846: PUSH
2847: DOUBLE
2848: LD_EXP 11
2852: PUSH
2853: LD_VAR 0 6
2857: ARRAY
2858: INC
2859: ST_TO_ADDR
2860: LD_INT 1
2862: PUSH
2863: FOR_DOWNTO
2864: IFFALSE 3025
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
2866: LD_EXP 11
2870: PUSH
2871: LD_VAR 0 6
2875: ARRAY
2876: PUSH
2877: LD_VAR 0 5
2881: ARRAY
2882: PUSH
2883: LD_INT 1
2885: ARRAY
2886: PUSH
2887: LD_VAR 0 2
2891: EQUAL
2892: PUSH
2893: LD_EXP 11
2897: PUSH
2898: LD_VAR 0 6
2902: ARRAY
2903: PUSH
2904: LD_VAR 0 5
2908: ARRAY
2909: PUSH
2910: LD_INT 2
2912: ARRAY
2913: PUSH
2914: LD_VAR 0 3
2918: EQUAL
2919: AND
2920: IFFALSE 3023
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
2922: LD_EXP 11
2926: PUSH
2927: LD_VAR 0 6
2931: ARRAY
2932: PUSH
2933: LD_VAR 0 5
2937: ARRAY
2938: PUSH
2939: LD_INT 1
2941: ARRAY
2942: PPUSH
2943: LD_EXP 11
2947: PUSH
2948: LD_VAR 0 6
2952: ARRAY
2953: PUSH
2954: LD_VAR 0 5
2958: ARRAY
2959: PUSH
2960: LD_INT 2
2962: ARRAY
2963: PPUSH
2964: LD_VAR 0 1
2968: PPUSH
2969: CALL_OW 255
2973: PPUSH
2974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
2978: LD_ADDR_EXP 11
2982: PUSH
2983: LD_EXP 11
2987: PPUSH
2988: LD_VAR 0 6
2992: PPUSH
2993: LD_EXP 11
2997: PUSH
2998: LD_VAR 0 6
3002: ARRAY
3003: PPUSH
3004: LD_VAR 0 5
3008: PPUSH
3009: CALL_OW 3
3013: PPUSH
3014: CALL_OW 1
3018: ST_TO_ADDR
// exit ;
3019: POP
3020: POP
3021: GO 3214
// end ; end ;
3023: GO 2863
3025: POP
3026: POP
// for i := minerMinesList [ index ] downto 1 do
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: DOUBLE
3033: LD_EXP 11
3037: PUSH
3038: LD_VAR 0 6
3042: ARRAY
3043: INC
3044: ST_TO_ADDR
3045: LD_INT 1
3047: PUSH
3048: FOR_DOWNTO
3049: IFFALSE 3212
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3051: LD_EXP 11
3055: PUSH
3056: LD_VAR 0 6
3060: ARRAY
3061: PUSH
3062: LD_VAR 0 5
3066: ARRAY
3067: PUSH
3068: LD_INT 1
3070: ARRAY
3071: PPUSH
3072: LD_EXP 11
3076: PUSH
3077: LD_VAR 0 6
3081: ARRAY
3082: PUSH
3083: LD_VAR 0 5
3087: ARRAY
3088: PUSH
3089: LD_INT 2
3091: ARRAY
3092: PPUSH
3093: LD_VAR 0 2
3097: PPUSH
3098: LD_VAR 0 3
3102: PPUSH
3103: CALL_OW 298
3107: PUSH
3108: LD_INT 6
3110: LESS
3111: IFFALSE 3210
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3113: LD_EXP 11
3117: PUSH
3118: LD_VAR 0 6
3122: ARRAY
3123: PUSH
3124: LD_VAR 0 5
3128: ARRAY
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_EXP 11
3138: PUSH
3139: LD_VAR 0 6
3143: ARRAY
3144: PUSH
3145: LD_VAR 0 5
3149: ARRAY
3150: PUSH
3151: LD_INT 2
3153: ARRAY
3154: PPUSH
3155: LD_VAR 0 1
3159: PPUSH
3160: CALL_OW 255
3164: PPUSH
3165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3169: LD_ADDR_EXP 11
3173: PUSH
3174: LD_EXP 11
3178: PPUSH
3179: LD_VAR 0 6
3183: PPUSH
3184: LD_EXP 11
3188: PUSH
3189: LD_VAR 0 6
3193: ARRAY
3194: PPUSH
3195: LD_VAR 0 5
3199: PPUSH
3200: CALL_OW 3
3204: PPUSH
3205: CALL_OW 1
3209: ST_TO_ADDR
// end ; end ;
3210: GO 3048
3212: POP
3213: POP
// end ;
3214: LD_VAR 0 4
3218: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3219: LD_INT 0
3221: PPUSH
3222: PPUSH
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
3229: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3230: LD_VAR 0 1
3234: PPUSH
3235: CALL_OW 264
3239: PUSH
3240: LD_EXP 20
3244: EQUAL
3245: NOT
3246: PUSH
3247: LD_VAR 0 1
3251: PUSH
3252: LD_EXP 10
3256: IN
3257: NOT
3258: OR
3259: IFFALSE 3263
// exit ;
3261: GO 3585
// index := GetElementIndex ( minersList , unit ) ;
3263: LD_ADDR_VAR 0 6
3267: PUSH
3268: LD_EXP 10
3272: PPUSH
3273: LD_VAR 0 1
3277: PPUSH
3278: CALL 22734 0 2
3282: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3283: LD_ADDR_VAR 0 8
3287: PUSH
3288: LD_EXP 12
3292: PUSH
3293: LD_EXP 11
3297: PUSH
3298: LD_VAR 0 6
3302: ARRAY
3303: MINUS
3304: ST_TO_ADDR
// if not minesFreeAmount then
3305: LD_VAR 0 8
3309: NOT
3310: IFFALSE 3314
// exit ;
3312: GO 3585
// tmp := [ ] ;
3314: LD_ADDR_VAR 0 7
3318: PUSH
3319: EMPTY
3320: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3321: LD_ADDR_VAR 0 5
3325: PUSH
3326: DOUBLE
3327: LD_INT 1
3329: DEC
3330: ST_TO_ADDR
3331: LD_VAR 0 8
3335: PUSH
3336: FOR_TO
3337: IFFALSE 3532
// begin _d := rand ( 0 , 5 ) ;
3339: LD_ADDR_VAR 0 11
3343: PUSH
3344: LD_INT 0
3346: PPUSH
3347: LD_INT 5
3349: PPUSH
3350: CALL_OW 12
3354: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3355: LD_ADDR_VAR 0 12
3359: PUSH
3360: LD_INT 2
3362: PPUSH
3363: LD_INT 6
3365: PPUSH
3366: CALL_OW 12
3370: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 2
3380: PPUSH
3381: LD_VAR 0 11
3385: PPUSH
3386: LD_VAR 0 12
3390: PPUSH
3391: CALL_OW 272
3395: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
3396: LD_ADDR_VAR 0 10
3400: PUSH
3401: LD_VAR 0 3
3405: PPUSH
3406: LD_VAR 0 11
3410: PPUSH
3411: LD_VAR 0 12
3415: PPUSH
3416: CALL_OW 273
3420: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
3421: LD_VAR 0 9
3425: PPUSH
3426: LD_VAR 0 10
3430: PPUSH
3431: CALL_OW 488
3435: PUSH
3436: LD_VAR 0 9
3440: PUSH
3441: LD_VAR 0 10
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: LD_VAR 0 7
3454: IN
3455: NOT
3456: AND
3457: PUSH
3458: LD_VAR 0 9
3462: PPUSH
3463: LD_VAR 0 10
3467: PPUSH
3468: CALL_OW 458
3472: NOT
3473: AND
3474: IFFALSE 3516
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
3476: LD_ADDR_VAR 0 7
3480: PUSH
3481: LD_VAR 0 7
3485: PPUSH
3486: LD_VAR 0 7
3490: PUSH
3491: LD_INT 1
3493: PLUS
3494: PPUSH
3495: LD_VAR 0 9
3499: PUSH
3500: LD_VAR 0 10
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PPUSH
3509: CALL_OW 1
3513: ST_TO_ADDR
3514: GO 3530
// i := i - 1 ;
3516: LD_ADDR_VAR 0 5
3520: PUSH
3521: LD_VAR 0 5
3525: PUSH
3526: LD_INT 1
3528: MINUS
3529: ST_TO_ADDR
// end ;
3530: GO 3336
3532: POP
3533: POP
// for i in tmp do
3534: LD_ADDR_VAR 0 5
3538: PUSH
3539: LD_VAR 0 7
3543: PUSH
3544: FOR_IN
3545: IFFALSE 3583
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
3547: LD_VAR 0 1
3551: PPUSH
3552: LD_VAR 0 5
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: LD_VAR 0 5
3565: PUSH
3566: LD_INT 2
3568: ARRAY
3569: PPUSH
3570: CALL 2525 0 3
3574: NOT
3575: IFFALSE 3581
// exit ;
3577: POP
3578: POP
3579: GO 3585
3581: GO 3544
3583: POP
3584: POP
// end ;
3585: LD_VAR 0 4
3589: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
3590: LD_INT 0
3592: PPUSH
3593: PPUSH
3594: PPUSH
3595: PPUSH
3596: PPUSH
3597: PPUSH
3598: PPUSH
// if not GetClass ( unit ) = class_sniper then
3599: LD_VAR 0 1
3603: PPUSH
3604: CALL_OW 257
3608: PUSH
3609: LD_INT 5
3611: EQUAL
3612: NOT
3613: IFFALSE 3617
// exit ;
3615: GO 4005
// dist := 8 ;
3617: LD_ADDR_VAR 0 5
3621: PUSH
3622: LD_INT 8
3624: ST_TO_ADDR
// viewRange := 12 ;
3625: LD_ADDR_VAR 0 7
3629: PUSH
3630: LD_INT 12
3632: ST_TO_ADDR
// side := GetSide ( unit ) ;
3633: LD_ADDR_VAR 0 6
3637: PUSH
3638: LD_VAR 0 1
3642: PPUSH
3643: CALL_OW 255
3647: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
3648: LD_INT 61
3650: PPUSH
3651: LD_VAR 0 6
3655: PPUSH
3656: CALL_OW 321
3660: PUSH
3661: LD_INT 2
3663: EQUAL
3664: IFFALSE 3674
// viewRange := 16 ;
3666: LD_ADDR_VAR 0 7
3670: PUSH
3671: LD_INT 16
3673: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
3674: LD_VAR 0 1
3678: PPUSH
3679: LD_VAR 0 2
3683: PPUSH
3684: LD_VAR 0 3
3688: PPUSH
3689: CALL_OW 297
3693: PUSH
3694: LD_VAR 0 5
3698: GREATER
3699: IFFALSE 3778
// begin ComMoveXY ( unit , x , y ) ;
3701: LD_VAR 0 1
3705: PPUSH
3706: LD_VAR 0 2
3710: PPUSH
3711: LD_VAR 0 3
3715: PPUSH
3716: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3720: LD_INT 35
3722: PPUSH
3723: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
3727: LD_VAR 0 1
3731: PPUSH
3732: LD_VAR 0 2
3736: PPUSH
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL 53506 0 3
3746: NOT
3747: IFFALSE 3751
// exit ;
3749: GO 4005
// until GetDistUnitXY ( unit , x , y ) < dist ;
3751: LD_VAR 0 1
3755: PPUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: CALL_OW 297
3770: PUSH
3771: LD_VAR 0 5
3775: LESS
3776: IFFALSE 3720
// end ; ComTurnXY ( unit , x , y ) ;
3778: LD_VAR 0 1
3782: PPUSH
3783: LD_VAR 0 2
3787: PPUSH
3788: LD_VAR 0 3
3792: PPUSH
3793: CALL_OW 118
// wait ( 5 ) ;
3797: LD_INT 5
3799: PPUSH
3800: CALL_OW 67
// _d := GetDir ( unit ) ;
3804: LD_ADDR_VAR 0 10
3808: PUSH
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 254
3818: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
3819: LD_ADDR_VAR 0 8
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 250
3833: PPUSH
3834: LD_VAR 0 10
3838: PPUSH
3839: LD_VAR 0 5
3843: PPUSH
3844: CALL_OW 272
3848: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
3849: LD_ADDR_VAR 0 9
3853: PUSH
3854: LD_VAR 0 1
3858: PPUSH
3859: CALL_OW 251
3863: PPUSH
3864: LD_VAR 0 10
3868: PPUSH
3869: LD_VAR 0 5
3873: PPUSH
3874: CALL_OW 273
3878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3879: LD_VAR 0 8
3883: PPUSH
3884: LD_VAR 0 9
3888: PPUSH
3889: CALL_OW 488
3893: NOT
3894: IFFALSE 3898
// exit ;
3896: GO 4005
// ComAnimCustom ( unit , 1 ) ;
3898: LD_VAR 0 1
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
3910: LD_VAR 0 8
3914: PPUSH
3915: LD_VAR 0 9
3919: PPUSH
3920: LD_VAR 0 6
3924: PPUSH
3925: LD_VAR 0 7
3929: PPUSH
3930: CALL_OW 330
// repeat wait ( 1 ) ;
3934: LD_INT 1
3936: PPUSH
3937: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 316
3950: PUSH
3951: LD_VAR 0 1
3955: PPUSH
3956: CALL_OW 314
3960: OR
3961: PUSH
3962: LD_VAR 0 1
3966: PPUSH
3967: CALL_OW 302
3971: NOT
3972: OR
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 301
3983: OR
3984: IFFALSE 3934
// RemoveSeeing ( _x , _y , side ) ;
3986: LD_VAR 0 8
3990: PPUSH
3991: LD_VAR 0 9
3995: PPUSH
3996: LD_VAR 0 6
4000: PPUSH
4001: CALL_OW 331
// end ; end_of_file
4005: LD_VAR 0 4
4009: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4010: LD_INT 0
4012: PPUSH
// ar_miner := 81 ;
4013: LD_ADDR_EXP 20
4017: PUSH
4018: LD_INT 81
4020: ST_TO_ADDR
// ar_crane := 88 ;
4021: LD_ADDR_EXP 19
4025: PUSH
4026: LD_INT 88
4028: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4029: LD_ADDR_EXP 14
4033: PUSH
4034: LD_INT 89
4036: ST_TO_ADDR
// us_hack := 99 ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_INT 99
4044: ST_TO_ADDR
// us_artillery := 97 ;
4045: LD_ADDR_EXP 16
4049: PUSH
4050: LD_INT 97
4052: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4053: LD_ADDR_EXP 17
4057: PUSH
4058: LD_INT 91
4060: ST_TO_ADDR
// ar_mortar := 92 ;
4061: LD_ADDR_EXP 18
4065: PUSH
4066: LD_INT 92
4068: ST_TO_ADDR
// ru_radar := 98 ;
4069: LD_ADDR_EXP 13
4073: PUSH
4074: LD_INT 98
4076: ST_TO_ADDR
// tech_Artillery := 80 ;
4077: LD_ADDR_EXP 21
4081: PUSH
4082: LD_INT 80
4084: ST_TO_ADDR
// tech_RadMat := 81 ;
4085: LD_ADDR_EXP 22
4089: PUSH
4090: LD_INT 81
4092: ST_TO_ADDR
// tech_BasicTools := 82 ;
4093: LD_ADDR_EXP 23
4097: PUSH
4098: LD_INT 82
4100: ST_TO_ADDR
// tech_Cargo := 83 ;
4101: LD_ADDR_EXP 24
4105: PUSH
4106: LD_INT 83
4108: ST_TO_ADDR
// tech_Track := 84 ;
4109: LD_ADDR_EXP 25
4113: PUSH
4114: LD_INT 84
4116: ST_TO_ADDR
// tech_Crane := 85 ;
4117: LD_ADDR_EXP 26
4121: PUSH
4122: LD_INT 85
4124: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4125: LD_ADDR_EXP 27
4129: PUSH
4130: LD_INT 86
4132: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4133: LD_ADDR_EXP 28
4137: PUSH
4138: LD_INT 87
4140: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4141: LD_ADDR_EXP 29
4145: PUSH
4146: LD_INT 88
4148: ST_TO_ADDR
// class_mastodont := 31 ;
4149: LD_ADDR_EXP 30
4153: PUSH
4154: LD_INT 31
4156: ST_TO_ADDR
// class_horse := 21 ;
4157: LD_ADDR_EXP 31
4161: PUSH
4162: LD_INT 21
4164: ST_TO_ADDR
// end ;
4165: LD_VAR 0 1
4169: RET
// every 1 do
4170: GO 4172
4172: DISABLE
// InitGlobalVariables ; end_of_file
4173: CALL 4010 0 0
4177: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4178: LD_INT 0
4180: PPUSH
// if p2 = 100 then
4181: LD_VAR 0 2
4185: PUSH
4186: LD_INT 100
4188: EQUAL
4189: IFFALSE 5192
// begin if not StreamModeActive then
4191: LD_EXP 32
4195: NOT
4196: IFFALSE 4206
// StreamModeActive := true ;
4198: LD_ADDR_EXP 32
4202: PUSH
4203: LD_INT 1
4205: ST_TO_ADDR
// if p3 = 0 then
4206: LD_VAR 0 3
4210: PUSH
4211: LD_INT 0
4213: EQUAL
4214: IFFALSE 4220
// InitStreamMode ;
4216: CALL 5352 0 0
// if p3 = 1 then
4220: LD_VAR 0 3
4224: PUSH
4225: LD_INT 1
4227: EQUAL
4228: IFFALSE 4238
// sRocket := true ;
4230: LD_ADDR_EXP 37
4234: PUSH
4235: LD_INT 1
4237: ST_TO_ADDR
// if p3 = 2 then
4238: LD_VAR 0 3
4242: PUSH
4243: LD_INT 2
4245: EQUAL
4246: IFFALSE 4256
// sSpeed := true ;
4248: LD_ADDR_EXP 36
4252: PUSH
4253: LD_INT 1
4255: ST_TO_ADDR
// if p3 = 3 then
4256: LD_VAR 0 3
4260: PUSH
4261: LD_INT 3
4263: EQUAL
4264: IFFALSE 4274
// sEngine := true ;
4266: LD_ADDR_EXP 38
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// if p3 = 4 then
4274: LD_VAR 0 3
4278: PUSH
4279: LD_INT 4
4281: EQUAL
4282: IFFALSE 4292
// sSpec := true ;
4284: LD_ADDR_EXP 35
4288: PUSH
4289: LD_INT 1
4291: ST_TO_ADDR
// if p3 = 5 then
4292: LD_VAR 0 3
4296: PUSH
4297: LD_INT 5
4299: EQUAL
4300: IFFALSE 4310
// sLevel := true ;
4302: LD_ADDR_EXP 39
4306: PUSH
4307: LD_INT 1
4309: ST_TO_ADDR
// if p3 = 6 then
4310: LD_VAR 0 3
4314: PUSH
4315: LD_INT 6
4317: EQUAL
4318: IFFALSE 4328
// sArmoury := true ;
4320: LD_ADDR_EXP 40
4324: PUSH
4325: LD_INT 1
4327: ST_TO_ADDR
// if p3 = 7 then
4328: LD_VAR 0 3
4332: PUSH
4333: LD_INT 7
4335: EQUAL
4336: IFFALSE 4346
// sRadar := true ;
4338: LD_ADDR_EXP 41
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// if p3 = 8 then
4346: LD_VAR 0 3
4350: PUSH
4351: LD_INT 8
4353: EQUAL
4354: IFFALSE 4364
// sBunker := true ;
4356: LD_ADDR_EXP 42
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// if p3 = 9 then
4364: LD_VAR 0 3
4368: PUSH
4369: LD_INT 9
4371: EQUAL
4372: IFFALSE 4382
// sHack := true ;
4374: LD_ADDR_EXP 43
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// if p3 = 10 then
4382: LD_VAR 0 3
4386: PUSH
4387: LD_INT 10
4389: EQUAL
4390: IFFALSE 4400
// sFire := true ;
4392: LD_ADDR_EXP 44
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// if p3 = 11 then
4400: LD_VAR 0 3
4404: PUSH
4405: LD_INT 11
4407: EQUAL
4408: IFFALSE 4418
// sRefresh := true ;
4410: LD_ADDR_EXP 45
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// if p3 = 12 then
4418: LD_VAR 0 3
4422: PUSH
4423: LD_INT 12
4425: EQUAL
4426: IFFALSE 4436
// sExp := true ;
4428: LD_ADDR_EXP 46
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// if p3 = 13 then
4436: LD_VAR 0 3
4440: PUSH
4441: LD_INT 13
4443: EQUAL
4444: IFFALSE 4454
// sDepot := true ;
4446: LD_ADDR_EXP 47
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// if p3 = 14 then
4454: LD_VAR 0 3
4458: PUSH
4459: LD_INT 14
4461: EQUAL
4462: IFFALSE 4472
// sFlag := true ;
4464: LD_ADDR_EXP 48
4468: PUSH
4469: LD_INT 1
4471: ST_TO_ADDR
// if p3 = 15 then
4472: LD_VAR 0 3
4476: PUSH
4477: LD_INT 15
4479: EQUAL
4480: IFFALSE 4490
// sKamikadze := true ;
4482: LD_ADDR_EXP 56
4486: PUSH
4487: LD_INT 1
4489: ST_TO_ADDR
// if p3 = 16 then
4490: LD_VAR 0 3
4494: PUSH
4495: LD_INT 16
4497: EQUAL
4498: IFFALSE 4508
// sTroll := true ;
4500: LD_ADDR_EXP 57
4504: PUSH
4505: LD_INT 1
4507: ST_TO_ADDR
// if p3 = 17 then
4508: LD_VAR 0 3
4512: PUSH
4513: LD_INT 17
4515: EQUAL
4516: IFFALSE 4526
// sSlow := true ;
4518: LD_ADDR_EXP 58
4522: PUSH
4523: LD_INT 1
4525: ST_TO_ADDR
// if p3 = 18 then
4526: LD_VAR 0 3
4530: PUSH
4531: LD_INT 18
4533: EQUAL
4534: IFFALSE 4544
// sLack := true ;
4536: LD_ADDR_EXP 59
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
// if p3 = 19 then
4544: LD_VAR 0 3
4548: PUSH
4549: LD_INT 19
4551: EQUAL
4552: IFFALSE 4562
// sTank := true ;
4554: LD_ADDR_EXP 61
4558: PUSH
4559: LD_INT 1
4561: ST_TO_ADDR
// if p3 = 20 then
4562: LD_VAR 0 3
4566: PUSH
4567: LD_INT 20
4569: EQUAL
4570: IFFALSE 4580
// sRemote := true ;
4572: LD_ADDR_EXP 62
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// if p3 = 21 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 21
4587: EQUAL
4588: IFFALSE 4598
// sPowell := true ;
4590: LD_ADDR_EXP 63
4594: PUSH
4595: LD_INT 1
4597: ST_TO_ADDR
// if p3 = 22 then
4598: LD_VAR 0 3
4602: PUSH
4603: LD_INT 22
4605: EQUAL
4606: IFFALSE 4616
// sTeleport := true ;
4608: LD_ADDR_EXP 66
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// if p3 = 23 then
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 23
4623: EQUAL
4624: IFFALSE 4634
// sOilTower := true ;
4626: LD_ADDR_EXP 68
4630: PUSH
4631: LD_INT 1
4633: ST_TO_ADDR
// if p3 = 24 then
4634: LD_VAR 0 3
4638: PUSH
4639: LD_INT 24
4641: EQUAL
4642: IFFALSE 4652
// sShovel := true ;
4644: LD_ADDR_EXP 69
4648: PUSH
4649: LD_INT 1
4651: ST_TO_ADDR
// if p3 = 25 then
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 25
4659: EQUAL
4660: IFFALSE 4670
// sSheik := true ;
4662: LD_ADDR_EXP 70
4666: PUSH
4667: LD_INT 1
4669: ST_TO_ADDR
// if p3 = 26 then
4670: LD_VAR 0 3
4674: PUSH
4675: LD_INT 26
4677: EQUAL
4678: IFFALSE 4688
// sEarthquake := true ;
4680: LD_ADDR_EXP 72
4684: PUSH
4685: LD_INT 1
4687: ST_TO_ADDR
// if p3 = 27 then
4688: LD_VAR 0 3
4692: PUSH
4693: LD_INT 27
4695: EQUAL
4696: IFFALSE 4706
// sAI := true ;
4698: LD_ADDR_EXP 73
4702: PUSH
4703: LD_INT 1
4705: ST_TO_ADDR
// if p3 = 28 then
4706: LD_VAR 0 3
4710: PUSH
4711: LD_INT 28
4713: EQUAL
4714: IFFALSE 4724
// sCargo := true ;
4716: LD_ADDR_EXP 76
4720: PUSH
4721: LD_INT 1
4723: ST_TO_ADDR
// if p3 = 29 then
4724: LD_VAR 0 3
4728: PUSH
4729: LD_INT 29
4731: EQUAL
4732: IFFALSE 4742
// sDLaser := true ;
4734: LD_ADDR_EXP 77
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// if p3 = 30 then
4742: LD_VAR 0 3
4746: PUSH
4747: LD_INT 30
4749: EQUAL
4750: IFFALSE 4760
// sExchange := true ;
4752: LD_ADDR_EXP 78
4756: PUSH
4757: LD_INT 1
4759: ST_TO_ADDR
// if p3 = 31 then
4760: LD_VAR 0 3
4764: PUSH
4765: LD_INT 31
4767: EQUAL
4768: IFFALSE 4778
// sFac := true ;
4770: LD_ADDR_EXP 79
4774: PUSH
4775: LD_INT 1
4777: ST_TO_ADDR
// if p3 = 32 then
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 32
4785: EQUAL
4786: IFFALSE 4796
// sPower := true ;
4788: LD_ADDR_EXP 80
4792: PUSH
4793: LD_INT 1
4795: ST_TO_ADDR
// if p3 = 33 then
4796: LD_VAR 0 3
4800: PUSH
4801: LD_INT 33
4803: EQUAL
4804: IFFALSE 4814
// sRandom := true ;
4806: LD_ADDR_EXP 81
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// if p3 = 34 then
4814: LD_VAR 0 3
4818: PUSH
4819: LD_INT 34
4821: EQUAL
4822: IFFALSE 4832
// sShield := true ;
4824: LD_ADDR_EXP 82
4828: PUSH
4829: LD_INT 1
4831: ST_TO_ADDR
// if p3 = 35 then
4832: LD_VAR 0 3
4836: PUSH
4837: LD_INT 35
4839: EQUAL
4840: IFFALSE 4850
// sTime := true ;
4842: LD_ADDR_EXP 83
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// if p3 = 36 then
4850: LD_VAR 0 3
4854: PUSH
4855: LD_INT 36
4857: EQUAL
4858: IFFALSE 4868
// sTools := true ;
4860: LD_ADDR_EXP 84
4864: PUSH
4865: LD_INT 1
4867: ST_TO_ADDR
// if p3 = 101 then
4868: LD_VAR 0 3
4872: PUSH
4873: LD_INT 101
4875: EQUAL
4876: IFFALSE 4886
// sSold := true ;
4878: LD_ADDR_EXP 49
4882: PUSH
4883: LD_INT 1
4885: ST_TO_ADDR
// if p3 = 102 then
4886: LD_VAR 0 3
4890: PUSH
4891: LD_INT 102
4893: EQUAL
4894: IFFALSE 4904
// sDiff := true ;
4896: LD_ADDR_EXP 50
4900: PUSH
4901: LD_INT 1
4903: ST_TO_ADDR
// if p3 = 103 then
4904: LD_VAR 0 3
4908: PUSH
4909: LD_INT 103
4911: EQUAL
4912: IFFALSE 4922
// sFog := true ;
4914: LD_ADDR_EXP 53
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// if p3 = 104 then
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 104
4929: EQUAL
4930: IFFALSE 4940
// sReset := true ;
4932: LD_ADDR_EXP 54
4936: PUSH
4937: LD_INT 1
4939: ST_TO_ADDR
// if p3 = 105 then
4940: LD_VAR 0 3
4944: PUSH
4945: LD_INT 105
4947: EQUAL
4948: IFFALSE 4958
// sSun := true ;
4950: LD_ADDR_EXP 55
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// if p3 = 106 then
4958: LD_VAR 0 3
4962: PUSH
4963: LD_INT 106
4965: EQUAL
4966: IFFALSE 4976
// sTiger := true ;
4968: LD_ADDR_EXP 51
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// if p3 = 107 then
4976: LD_VAR 0 3
4980: PUSH
4981: LD_INT 107
4983: EQUAL
4984: IFFALSE 4994
// sBomb := true ;
4986: LD_ADDR_EXP 52
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// if p3 = 108 then
4994: LD_VAR 0 3
4998: PUSH
4999: LD_INT 108
5001: EQUAL
5002: IFFALSE 5012
// sWound := true ;
5004: LD_ADDR_EXP 60
5008: PUSH
5009: LD_INT 1
5011: ST_TO_ADDR
// if p3 = 109 then
5012: LD_VAR 0 3
5016: PUSH
5017: LD_INT 109
5019: EQUAL
5020: IFFALSE 5030
// sBetray := true ;
5022: LD_ADDR_EXP 64
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// if p3 = 110 then
5030: LD_VAR 0 3
5034: PUSH
5035: LD_INT 110
5037: EQUAL
5038: IFFALSE 5048
// sContamin := true ;
5040: LD_ADDR_EXP 65
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// if p3 = 111 then
5048: LD_VAR 0 3
5052: PUSH
5053: LD_INT 111
5055: EQUAL
5056: IFFALSE 5066
// sOil := true ;
5058: LD_ADDR_EXP 67
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// if p3 = 112 then
5066: LD_VAR 0 3
5070: PUSH
5071: LD_INT 112
5073: EQUAL
5074: IFFALSE 5084
// sStu := true ;
5076: LD_ADDR_EXP 71
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// if p3 = 113 then
5084: LD_VAR 0 3
5088: PUSH
5089: LD_INT 113
5091: EQUAL
5092: IFFALSE 5102
// sBazooka := true ;
5094: LD_ADDR_EXP 74
5098: PUSH
5099: LD_INT 1
5101: ST_TO_ADDR
// if p3 = 114 then
5102: LD_VAR 0 3
5106: PUSH
5107: LD_INT 114
5109: EQUAL
5110: IFFALSE 5120
// sMortar := true ;
5112: LD_ADDR_EXP 75
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// if p3 = 115 then
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 115
5127: EQUAL
5128: IFFALSE 5138
// sRanger := true ;
5130: LD_ADDR_EXP 85
5134: PUSH
5135: LD_INT 1
5137: ST_TO_ADDR
// if p3 = 116 then
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 116
5145: EQUAL
5146: IFFALSE 5156
// sComputer := true ;
5148: LD_ADDR_EXP 86
5152: PUSH
5153: LD_INT 1
5155: ST_TO_ADDR
// if p3 = 117 then
5156: LD_VAR 0 3
5160: PUSH
5161: LD_INT 117
5163: EQUAL
5164: IFFALSE 5174
// s30 := true ;
5166: LD_ADDR_EXP 87
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// if p3 = 118 then
5174: LD_VAR 0 3
5178: PUSH
5179: LD_INT 118
5181: EQUAL
5182: IFFALSE 5192
// s60 := true ;
5184: LD_ADDR_EXP 88
5188: PUSH
5189: LD_INT 1
5191: ST_TO_ADDR
// end ; if p2 = 101 then
5192: LD_VAR 0 2
5196: PUSH
5197: LD_INT 101
5199: EQUAL
5200: IFFALSE 5328
// begin case p3 of 1 :
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 1
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5222
5215: POP
// hHackUnlimitedResources ; 2 :
5216: CALL 16924 0 0
5220: GO 5328
5222: LD_INT 2
5224: DOUBLE
5225: EQUAL
5226: IFTRUE 5230
5228: GO 5237
5230: POP
// hHackSetLevel10 ; 3 :
5231: CALL 17057 0 0
5235: GO 5328
5237: LD_INT 3
5239: DOUBLE
5240: EQUAL
5241: IFTRUE 5245
5243: GO 5252
5245: POP
// hHackSetLevel10YourUnits ; 4 :
5246: CALL 17142 0 0
5250: GO 5328
5252: LD_INT 4
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5260
5258: GO 5267
5260: POP
// hHackInvincible ; 5 :
5261: CALL 17590 0 0
5265: GO 5328
5267: LD_INT 5
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5282
5275: POP
// hHackInvisible ; 6 :
5276: CALL 17701 0 0
5280: GO 5328
5282: LD_INT 6
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5297
5290: POP
// hHackChangeYourSide ; 7 :
5291: CALL 17758 0 0
5295: GO 5328
5297: LD_INT 7
5299: DOUBLE
5300: EQUAL
5301: IFTRUE 5305
5303: GO 5312
5305: POP
// hHackChangeUnitSide ; 8 :
5306: CALL 17800 0 0
5310: GO 5328
5312: LD_INT 8
5314: DOUBLE
5315: EQUAL
5316: IFTRUE 5320
5318: GO 5327
5320: POP
// hHackFog ; end ;
5321: CALL 17901 0 0
5325: GO 5328
5327: POP
// end ; end ;
5328: LD_VAR 0 7
5332: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5333: GO 5335
5335: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5336: LD_STRING initStreamRollete();
5338: PPUSH
5339: CALL_OW 559
// InitStreamMode ;
5343: CALL 5352 0 0
// DefineStreamItems ( ) ;
5347: CALL 5816 0 0
// end ;
5351: END
// function InitStreamMode ; begin
5352: LD_INT 0
5354: PPUSH
// streamModeActive := false ;
5355: LD_ADDR_EXP 32
5359: PUSH
5360: LD_INT 0
5362: ST_TO_ADDR
// normalCounter := 36 ;
5363: LD_ADDR_EXP 33
5367: PUSH
5368: LD_INT 36
5370: ST_TO_ADDR
// hardcoreCounter := 16 ;
5371: LD_ADDR_EXP 34
5375: PUSH
5376: LD_INT 16
5378: ST_TO_ADDR
// sRocket := false ;
5379: LD_ADDR_EXP 37
5383: PUSH
5384: LD_INT 0
5386: ST_TO_ADDR
// sSpeed := false ;
5387: LD_ADDR_EXP 36
5391: PUSH
5392: LD_INT 0
5394: ST_TO_ADDR
// sEngine := false ;
5395: LD_ADDR_EXP 38
5399: PUSH
5400: LD_INT 0
5402: ST_TO_ADDR
// sSpec := false ;
5403: LD_ADDR_EXP 35
5407: PUSH
5408: LD_INT 0
5410: ST_TO_ADDR
// sLevel := false ;
5411: LD_ADDR_EXP 39
5415: PUSH
5416: LD_INT 0
5418: ST_TO_ADDR
// sArmoury := false ;
5419: LD_ADDR_EXP 40
5423: PUSH
5424: LD_INT 0
5426: ST_TO_ADDR
// sRadar := false ;
5427: LD_ADDR_EXP 41
5431: PUSH
5432: LD_INT 0
5434: ST_TO_ADDR
// sBunker := false ;
5435: LD_ADDR_EXP 42
5439: PUSH
5440: LD_INT 0
5442: ST_TO_ADDR
// sHack := false ;
5443: LD_ADDR_EXP 43
5447: PUSH
5448: LD_INT 0
5450: ST_TO_ADDR
// sFire := false ;
5451: LD_ADDR_EXP 44
5455: PUSH
5456: LD_INT 0
5458: ST_TO_ADDR
// sRefresh := false ;
5459: LD_ADDR_EXP 45
5463: PUSH
5464: LD_INT 0
5466: ST_TO_ADDR
// sExp := false ;
5467: LD_ADDR_EXP 46
5471: PUSH
5472: LD_INT 0
5474: ST_TO_ADDR
// sDepot := false ;
5475: LD_ADDR_EXP 47
5479: PUSH
5480: LD_INT 0
5482: ST_TO_ADDR
// sFlag := false ;
5483: LD_ADDR_EXP 48
5487: PUSH
5488: LD_INT 0
5490: ST_TO_ADDR
// sKamikadze := false ;
5491: LD_ADDR_EXP 56
5495: PUSH
5496: LD_INT 0
5498: ST_TO_ADDR
// sTroll := false ;
5499: LD_ADDR_EXP 57
5503: PUSH
5504: LD_INT 0
5506: ST_TO_ADDR
// sSlow := false ;
5507: LD_ADDR_EXP 58
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
// sLack := false ;
5515: LD_ADDR_EXP 59
5519: PUSH
5520: LD_INT 0
5522: ST_TO_ADDR
// sTank := false ;
5523: LD_ADDR_EXP 61
5527: PUSH
5528: LD_INT 0
5530: ST_TO_ADDR
// sRemote := false ;
5531: LD_ADDR_EXP 62
5535: PUSH
5536: LD_INT 0
5538: ST_TO_ADDR
// sPowell := false ;
5539: LD_ADDR_EXP 63
5543: PUSH
5544: LD_INT 0
5546: ST_TO_ADDR
// sTeleport := false ;
5547: LD_ADDR_EXP 66
5551: PUSH
5552: LD_INT 0
5554: ST_TO_ADDR
// sOilTower := false ;
5555: LD_ADDR_EXP 68
5559: PUSH
5560: LD_INT 0
5562: ST_TO_ADDR
// sShovel := false ;
5563: LD_ADDR_EXP 69
5567: PUSH
5568: LD_INT 0
5570: ST_TO_ADDR
// sSheik := false ;
5571: LD_ADDR_EXP 70
5575: PUSH
5576: LD_INT 0
5578: ST_TO_ADDR
// sEarthquake := false ;
5579: LD_ADDR_EXP 72
5583: PUSH
5584: LD_INT 0
5586: ST_TO_ADDR
// sAI := false ;
5587: LD_ADDR_EXP 73
5591: PUSH
5592: LD_INT 0
5594: ST_TO_ADDR
// sCargo := false ;
5595: LD_ADDR_EXP 76
5599: PUSH
5600: LD_INT 0
5602: ST_TO_ADDR
// sDLaser := false ;
5603: LD_ADDR_EXP 77
5607: PUSH
5608: LD_INT 0
5610: ST_TO_ADDR
// sExchange := false ;
5611: LD_ADDR_EXP 78
5615: PUSH
5616: LD_INT 0
5618: ST_TO_ADDR
// sFac := false ;
5619: LD_ADDR_EXP 79
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// sPower := false ;
5627: LD_ADDR_EXP 80
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// sRandom := false ;
5635: LD_ADDR_EXP 81
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// sShield := false ;
5643: LD_ADDR_EXP 82
5647: PUSH
5648: LD_INT 0
5650: ST_TO_ADDR
// sTime := false ;
5651: LD_ADDR_EXP 83
5655: PUSH
5656: LD_INT 0
5658: ST_TO_ADDR
// sTools := false ;
5659: LD_ADDR_EXP 84
5663: PUSH
5664: LD_INT 0
5666: ST_TO_ADDR
// sSold := false ;
5667: LD_ADDR_EXP 49
5671: PUSH
5672: LD_INT 0
5674: ST_TO_ADDR
// sDiff := false ;
5675: LD_ADDR_EXP 50
5679: PUSH
5680: LD_INT 0
5682: ST_TO_ADDR
// sFog := false ;
5683: LD_ADDR_EXP 53
5687: PUSH
5688: LD_INT 0
5690: ST_TO_ADDR
// sReset := false ;
5691: LD_ADDR_EXP 54
5695: PUSH
5696: LD_INT 0
5698: ST_TO_ADDR
// sSun := false ;
5699: LD_ADDR_EXP 55
5703: PUSH
5704: LD_INT 0
5706: ST_TO_ADDR
// sTiger := false ;
5707: LD_ADDR_EXP 51
5711: PUSH
5712: LD_INT 0
5714: ST_TO_ADDR
// sBomb := false ;
5715: LD_ADDR_EXP 52
5719: PUSH
5720: LD_INT 0
5722: ST_TO_ADDR
// sWound := false ;
5723: LD_ADDR_EXP 60
5727: PUSH
5728: LD_INT 0
5730: ST_TO_ADDR
// sBetray := false ;
5731: LD_ADDR_EXP 64
5735: PUSH
5736: LD_INT 0
5738: ST_TO_ADDR
// sContamin := false ;
5739: LD_ADDR_EXP 65
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// sOil := false ;
5747: LD_ADDR_EXP 67
5751: PUSH
5752: LD_INT 0
5754: ST_TO_ADDR
// sStu := false ;
5755: LD_ADDR_EXP 71
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// sBazooka := false ;
5763: LD_ADDR_EXP 74
5767: PUSH
5768: LD_INT 0
5770: ST_TO_ADDR
// sMortar := false ;
5771: LD_ADDR_EXP 75
5775: PUSH
5776: LD_INT 0
5778: ST_TO_ADDR
// sRanger := false ;
5779: LD_ADDR_EXP 85
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// sComputer := false ;
5787: LD_ADDR_EXP 86
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// s30 := false ;
5795: LD_ADDR_EXP 87
5799: PUSH
5800: LD_INT 0
5802: ST_TO_ADDR
// s60 := false ;
5803: LD_ADDR_EXP 88
5807: PUSH
5808: LD_INT 0
5810: ST_TO_ADDR
// end ;
5811: LD_VAR 0 1
5815: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5816: LD_INT 0
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
5822: PPUSH
// result := [ ] ;
5823: LD_ADDR_VAR 0 1
5827: PUSH
5828: EMPTY
5829: ST_TO_ADDR
// if campaign_id = 1 then
5830: LD_OWVAR 69
5834: PUSH
5835: LD_INT 1
5837: EQUAL
5838: IFFALSE 9004
// begin case mission_number of 1 :
5840: LD_OWVAR 70
5844: PUSH
5845: LD_INT 1
5847: DOUBLE
5848: EQUAL
5849: IFTRUE 5853
5851: GO 5929
5853: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5854: LD_ADDR_VAR 0 1
5858: PUSH
5859: LD_INT 2
5861: PUSH
5862: LD_INT 4
5864: PUSH
5865: LD_INT 11
5867: PUSH
5868: LD_INT 12
5870: PUSH
5871: LD_INT 15
5873: PUSH
5874: LD_INT 16
5876: PUSH
5877: LD_INT 22
5879: PUSH
5880: LD_INT 23
5882: PUSH
5883: LD_INT 26
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: PUSH
5897: LD_INT 101
5899: PUSH
5900: LD_INT 102
5902: PUSH
5903: LD_INT 106
5905: PUSH
5906: LD_INT 116
5908: PUSH
5909: LD_INT 117
5911: PUSH
5912: LD_INT 118
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: ST_TO_ADDR
5927: GO 9002
5929: LD_INT 2
5931: DOUBLE
5932: EQUAL
5933: IFTRUE 5937
5935: GO 6021
5937: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
5938: LD_ADDR_VAR 0 1
5942: PUSH
5943: LD_INT 2
5945: PUSH
5946: LD_INT 4
5948: PUSH
5949: LD_INT 11
5951: PUSH
5952: LD_INT 12
5954: PUSH
5955: LD_INT 15
5957: PUSH
5958: LD_INT 16
5960: PUSH
5961: LD_INT 22
5963: PUSH
5964: LD_INT 23
5966: PUSH
5967: LD_INT 26
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: LD_INT 101
5983: PUSH
5984: LD_INT 102
5986: PUSH
5987: LD_INT 105
5989: PUSH
5990: LD_INT 106
5992: PUSH
5993: LD_INT 108
5995: PUSH
5996: LD_INT 116
5998: PUSH
5999: LD_INT 117
6001: PUSH
6002: LD_INT 118
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: ST_TO_ADDR
6019: GO 9002
6021: LD_INT 3
6023: DOUBLE
6024: EQUAL
6025: IFTRUE 6029
6027: GO 6117
6029: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_INT 2
6037: PUSH
6038: LD_INT 4
6040: PUSH
6041: LD_INT 5
6043: PUSH
6044: LD_INT 11
6046: PUSH
6047: LD_INT 12
6049: PUSH
6050: LD_INT 15
6052: PUSH
6053: LD_INT 16
6055: PUSH
6056: LD_INT 22
6058: PUSH
6059: LD_INT 26
6061: PUSH
6062: LD_INT 36
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: PUSH
6077: LD_INT 101
6079: PUSH
6080: LD_INT 102
6082: PUSH
6083: LD_INT 105
6085: PUSH
6086: LD_INT 106
6088: PUSH
6089: LD_INT 108
6091: PUSH
6092: LD_INT 116
6094: PUSH
6095: LD_INT 117
6097: PUSH
6098: LD_INT 118
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: ST_TO_ADDR
6115: GO 9002
6117: LD_INT 4
6119: DOUBLE
6120: EQUAL
6121: IFTRUE 6125
6123: GO 6221
6125: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6126: LD_ADDR_VAR 0 1
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: LD_INT 4
6136: PUSH
6137: LD_INT 5
6139: PUSH
6140: LD_INT 8
6142: PUSH
6143: LD_INT 11
6145: PUSH
6146: LD_INT 12
6148: PUSH
6149: LD_INT 15
6151: PUSH
6152: LD_INT 16
6154: PUSH
6155: LD_INT 22
6157: PUSH
6158: LD_INT 23
6160: PUSH
6161: LD_INT 26
6163: PUSH
6164: LD_INT 36
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 101
6183: PUSH
6184: LD_INT 102
6186: PUSH
6187: LD_INT 105
6189: PUSH
6190: LD_INT 106
6192: PUSH
6193: LD_INT 108
6195: PUSH
6196: LD_INT 116
6198: PUSH
6199: LD_INT 117
6201: PUSH
6202: LD_INT 118
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: ST_TO_ADDR
6219: GO 9002
6221: LD_INT 5
6223: DOUBLE
6224: EQUAL
6225: IFTRUE 6229
6227: GO 6341
6229: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6230: LD_ADDR_VAR 0 1
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: LD_INT 4
6240: PUSH
6241: LD_INT 5
6243: PUSH
6244: LD_INT 6
6246: PUSH
6247: LD_INT 8
6249: PUSH
6250: LD_INT 11
6252: PUSH
6253: LD_INT 12
6255: PUSH
6256: LD_INT 15
6258: PUSH
6259: LD_INT 16
6261: PUSH
6262: LD_INT 22
6264: PUSH
6265: LD_INT 23
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 26
6273: PUSH
6274: LD_INT 36
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 101
6295: PUSH
6296: LD_INT 102
6298: PUSH
6299: LD_INT 105
6301: PUSH
6302: LD_INT 106
6304: PUSH
6305: LD_INT 108
6307: PUSH
6308: LD_INT 109
6310: PUSH
6311: LD_INT 112
6313: PUSH
6314: LD_INT 116
6316: PUSH
6317: LD_INT 117
6319: PUSH
6320: LD_INT 118
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: ST_TO_ADDR
6339: GO 9002
6341: LD_INT 6
6343: DOUBLE
6344: EQUAL
6345: IFTRUE 6349
6347: GO 6481
6349: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6350: LD_ADDR_VAR 0 1
6354: PUSH
6355: LD_INT 2
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 6
6366: PUSH
6367: LD_INT 8
6369: PUSH
6370: LD_INT 11
6372: PUSH
6373: LD_INT 12
6375: PUSH
6376: LD_INT 15
6378: PUSH
6379: LD_INT 16
6381: PUSH
6382: LD_INT 20
6384: PUSH
6385: LD_INT 21
6387: PUSH
6388: LD_INT 22
6390: PUSH
6391: LD_INT 23
6393: PUSH
6394: LD_INT 25
6396: PUSH
6397: LD_INT 26
6399: PUSH
6400: LD_INT 30
6402: PUSH
6403: LD_INT 31
6405: PUSH
6406: LD_INT 32
6408: PUSH
6409: LD_INT 36
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 101
6435: PUSH
6436: LD_INT 102
6438: PUSH
6439: LD_INT 105
6441: PUSH
6442: LD_INT 106
6444: PUSH
6445: LD_INT 108
6447: PUSH
6448: LD_INT 109
6450: PUSH
6451: LD_INT 112
6453: PUSH
6454: LD_INT 116
6456: PUSH
6457: LD_INT 117
6459: PUSH
6460: LD_INT 118
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: ST_TO_ADDR
6479: GO 9002
6481: LD_INT 7
6483: DOUBLE
6484: EQUAL
6485: IFTRUE 6489
6487: GO 6601
6489: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6490: LD_ADDR_VAR 0 1
6494: PUSH
6495: LD_INT 2
6497: PUSH
6498: LD_INT 4
6500: PUSH
6501: LD_INT 5
6503: PUSH
6504: LD_INT 7
6506: PUSH
6507: LD_INT 11
6509: PUSH
6510: LD_INT 12
6512: PUSH
6513: LD_INT 15
6515: PUSH
6516: LD_INT 16
6518: PUSH
6519: LD_INT 20
6521: PUSH
6522: LD_INT 21
6524: PUSH
6525: LD_INT 22
6527: PUSH
6528: LD_INT 23
6530: PUSH
6531: LD_INT 25
6533: PUSH
6534: LD_INT 26
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 101
6555: PUSH
6556: LD_INT 102
6558: PUSH
6559: LD_INT 103
6561: PUSH
6562: LD_INT 105
6564: PUSH
6565: LD_INT 106
6567: PUSH
6568: LD_INT 108
6570: PUSH
6571: LD_INT 112
6573: PUSH
6574: LD_INT 116
6576: PUSH
6577: LD_INT 117
6579: PUSH
6580: LD_INT 118
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: ST_TO_ADDR
6599: GO 9002
6601: LD_INT 8
6603: DOUBLE
6604: EQUAL
6605: IFTRUE 6609
6607: GO 6749
6609: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6610: LD_ADDR_VAR 0 1
6614: PUSH
6615: LD_INT 2
6617: PUSH
6618: LD_INT 4
6620: PUSH
6621: LD_INT 5
6623: PUSH
6624: LD_INT 6
6626: PUSH
6627: LD_INT 7
6629: PUSH
6630: LD_INT 8
6632: PUSH
6633: LD_INT 11
6635: PUSH
6636: LD_INT 12
6638: PUSH
6639: LD_INT 15
6641: PUSH
6642: LD_INT 16
6644: PUSH
6645: LD_INT 20
6647: PUSH
6648: LD_INT 21
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 23
6656: PUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 26
6662: PUSH
6663: LD_INT 30
6665: PUSH
6666: LD_INT 31
6668: PUSH
6669: LD_INT 32
6671: PUSH
6672: LD_INT 36
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 101
6699: PUSH
6700: LD_INT 102
6702: PUSH
6703: LD_INT 103
6705: PUSH
6706: LD_INT 105
6708: PUSH
6709: LD_INT 106
6711: PUSH
6712: LD_INT 108
6714: PUSH
6715: LD_INT 109
6717: PUSH
6718: LD_INT 112
6720: PUSH
6721: LD_INT 116
6723: PUSH
6724: LD_INT 117
6726: PUSH
6727: LD_INT 118
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: ST_TO_ADDR
6747: GO 9002
6749: LD_INT 9
6751: DOUBLE
6752: EQUAL
6753: IFTRUE 6757
6755: GO 6905
6757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6758: LD_ADDR_VAR 0 1
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: LD_INT 4
6768: PUSH
6769: LD_INT 5
6771: PUSH
6772: LD_INT 6
6774: PUSH
6775: LD_INT 7
6777: PUSH
6778: LD_INT 8
6780: PUSH
6781: LD_INT 11
6783: PUSH
6784: LD_INT 12
6786: PUSH
6787: LD_INT 15
6789: PUSH
6790: LD_INT 16
6792: PUSH
6793: LD_INT 20
6795: PUSH
6796: LD_INT 21
6798: PUSH
6799: LD_INT 22
6801: PUSH
6802: LD_INT 23
6804: PUSH
6805: LD_INT 25
6807: PUSH
6808: LD_INT 26
6810: PUSH
6811: LD_INT 28
6813: PUSH
6814: LD_INT 30
6816: PUSH
6817: LD_INT 31
6819: PUSH
6820: LD_INT 32
6822: PUSH
6823: LD_INT 36
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 101
6851: PUSH
6852: LD_INT 102
6854: PUSH
6855: LD_INT 103
6857: PUSH
6858: LD_INT 105
6860: PUSH
6861: LD_INT 106
6863: PUSH
6864: LD_INT 108
6866: PUSH
6867: LD_INT 109
6869: PUSH
6870: LD_INT 112
6872: PUSH
6873: LD_INT 114
6875: PUSH
6876: LD_INT 116
6878: PUSH
6879: LD_INT 117
6881: PUSH
6882: LD_INT 118
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: ST_TO_ADDR
6903: GO 9002
6905: LD_INT 10
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7109
6913: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
6914: LD_ADDR_VAR 0 1
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 4
6924: PUSH
6925: LD_INT 5
6927: PUSH
6928: LD_INT 6
6930: PUSH
6931: LD_INT 7
6933: PUSH
6934: LD_INT 8
6936: PUSH
6937: LD_INT 9
6939: PUSH
6940: LD_INT 10
6942: PUSH
6943: LD_INT 11
6945: PUSH
6946: LD_INT 12
6948: PUSH
6949: LD_INT 13
6951: PUSH
6952: LD_INT 14
6954: PUSH
6955: LD_INT 15
6957: PUSH
6958: LD_INT 16
6960: PUSH
6961: LD_INT 17
6963: PUSH
6964: LD_INT 18
6966: PUSH
6967: LD_INT 19
6969: PUSH
6970: LD_INT 20
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 22
6978: PUSH
6979: LD_INT 23
6981: PUSH
6982: LD_INT 24
6984: PUSH
6985: LD_INT 25
6987: PUSH
6988: LD_INT 26
6990: PUSH
6991: LD_INT 28
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 31
6999: PUSH
7000: LD_INT 32
7002: PUSH
7003: LD_INT 36
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 101
7039: PUSH
7040: LD_INT 102
7042: PUSH
7043: LD_INT 103
7045: PUSH
7046: LD_INT 104
7048: PUSH
7049: LD_INT 105
7051: PUSH
7052: LD_INT 106
7054: PUSH
7055: LD_INT 107
7057: PUSH
7058: LD_INT 108
7060: PUSH
7061: LD_INT 109
7063: PUSH
7064: LD_INT 110
7066: PUSH
7067: LD_INT 111
7069: PUSH
7070: LD_INT 112
7072: PUSH
7073: LD_INT 114
7075: PUSH
7076: LD_INT 116
7078: PUSH
7079: LD_INT 117
7081: PUSH
7082: LD_INT 118
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: ST_TO_ADDR
7107: GO 9002
7109: LD_INT 11
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7321
7117: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7118: LD_ADDR_VAR 0 1
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: LD_INT 3
7128: PUSH
7129: LD_INT 4
7131: PUSH
7132: LD_INT 5
7134: PUSH
7135: LD_INT 6
7137: PUSH
7138: LD_INT 7
7140: PUSH
7141: LD_INT 8
7143: PUSH
7144: LD_INT 9
7146: PUSH
7147: LD_INT 10
7149: PUSH
7150: LD_INT 11
7152: PUSH
7153: LD_INT 12
7155: PUSH
7156: LD_INT 13
7158: PUSH
7159: LD_INT 14
7161: PUSH
7162: LD_INT 15
7164: PUSH
7165: LD_INT 16
7167: PUSH
7168: LD_INT 17
7170: PUSH
7171: LD_INT 18
7173: PUSH
7174: LD_INT 19
7176: PUSH
7177: LD_INT 20
7179: PUSH
7180: LD_INT 21
7182: PUSH
7183: LD_INT 22
7185: PUSH
7186: LD_INT 23
7188: PUSH
7189: LD_INT 24
7191: PUSH
7192: LD_INT 25
7194: PUSH
7195: LD_INT 26
7197: PUSH
7198: LD_INT 28
7200: PUSH
7201: LD_INT 30
7203: PUSH
7204: LD_INT 31
7206: PUSH
7207: LD_INT 32
7209: PUSH
7210: LD_INT 34
7212: PUSH
7213: LD_INT 36
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 101
7251: PUSH
7252: LD_INT 102
7254: PUSH
7255: LD_INT 103
7257: PUSH
7258: LD_INT 104
7260: PUSH
7261: LD_INT 105
7263: PUSH
7264: LD_INT 106
7266: PUSH
7267: LD_INT 107
7269: PUSH
7270: LD_INT 108
7272: PUSH
7273: LD_INT 109
7275: PUSH
7276: LD_INT 110
7278: PUSH
7279: LD_INT 111
7281: PUSH
7282: LD_INT 112
7284: PUSH
7285: LD_INT 114
7287: PUSH
7288: LD_INT 116
7290: PUSH
7291: LD_INT 117
7293: PUSH
7294: LD_INT 118
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: ST_TO_ADDR
7319: GO 9002
7321: LD_INT 12
7323: DOUBLE
7324: EQUAL
7325: IFTRUE 7329
7327: GO 7549
7329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7330: LD_ADDR_VAR 0 1
7334: PUSH
7335: LD_INT 1
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 3
7343: PUSH
7344: LD_INT 4
7346: PUSH
7347: LD_INT 5
7349: PUSH
7350: LD_INT 6
7352: PUSH
7353: LD_INT 7
7355: PUSH
7356: LD_INT 8
7358: PUSH
7359: LD_INT 9
7361: PUSH
7362: LD_INT 10
7364: PUSH
7365: LD_INT 11
7367: PUSH
7368: LD_INT 12
7370: PUSH
7371: LD_INT 13
7373: PUSH
7374: LD_INT 14
7376: PUSH
7377: LD_INT 15
7379: PUSH
7380: LD_INT 16
7382: PUSH
7383: LD_INT 17
7385: PUSH
7386: LD_INT 18
7388: PUSH
7389: LD_INT 19
7391: PUSH
7392: LD_INT 20
7394: PUSH
7395: LD_INT 21
7397: PUSH
7398: LD_INT 22
7400: PUSH
7401: LD_INT 23
7403: PUSH
7404: LD_INT 24
7406: PUSH
7407: LD_INT 25
7409: PUSH
7410: LD_INT 26
7412: PUSH
7413: LD_INT 27
7415: PUSH
7416: LD_INT 28
7418: PUSH
7419: LD_INT 30
7421: PUSH
7422: LD_INT 31
7424: PUSH
7425: LD_INT 32
7427: PUSH
7428: LD_INT 33
7430: PUSH
7431: LD_INT 34
7433: PUSH
7434: LD_INT 36
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 101
7475: PUSH
7476: LD_INT 102
7478: PUSH
7479: LD_INT 103
7481: PUSH
7482: LD_INT 104
7484: PUSH
7485: LD_INT 105
7487: PUSH
7488: LD_INT 106
7490: PUSH
7491: LD_INT 107
7493: PUSH
7494: LD_INT 108
7496: PUSH
7497: LD_INT 109
7499: PUSH
7500: LD_INT 110
7502: PUSH
7503: LD_INT 111
7505: PUSH
7506: LD_INT 112
7508: PUSH
7509: LD_INT 113
7511: PUSH
7512: LD_INT 114
7514: PUSH
7515: LD_INT 116
7517: PUSH
7518: LD_INT 117
7520: PUSH
7521: LD_INT 118
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: ST_TO_ADDR
7547: GO 9002
7549: LD_INT 13
7551: DOUBLE
7552: EQUAL
7553: IFTRUE 7557
7555: GO 7765
7557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7558: LD_ADDR_VAR 0 1
7562: PUSH
7563: LD_INT 1
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: LD_INT 3
7571: PUSH
7572: LD_INT 4
7574: PUSH
7575: LD_INT 5
7577: PUSH
7578: LD_INT 8
7580: PUSH
7581: LD_INT 9
7583: PUSH
7584: LD_INT 10
7586: PUSH
7587: LD_INT 11
7589: PUSH
7590: LD_INT 12
7592: PUSH
7593: LD_INT 14
7595: PUSH
7596: LD_INT 15
7598: PUSH
7599: LD_INT 16
7601: PUSH
7602: LD_INT 17
7604: PUSH
7605: LD_INT 18
7607: PUSH
7608: LD_INT 19
7610: PUSH
7611: LD_INT 20
7613: PUSH
7614: LD_INT 21
7616: PUSH
7617: LD_INT 22
7619: PUSH
7620: LD_INT 23
7622: PUSH
7623: LD_INT 24
7625: PUSH
7626: LD_INT 25
7628: PUSH
7629: LD_INT 26
7631: PUSH
7632: LD_INT 27
7634: PUSH
7635: LD_INT 28
7637: PUSH
7638: LD_INT 30
7640: PUSH
7641: LD_INT 31
7643: PUSH
7644: LD_INT 32
7646: PUSH
7647: LD_INT 33
7649: PUSH
7650: LD_INT 34
7652: PUSH
7653: LD_INT 36
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 101
7691: PUSH
7692: LD_INT 102
7694: PUSH
7695: LD_INT 103
7697: PUSH
7698: LD_INT 104
7700: PUSH
7701: LD_INT 105
7703: PUSH
7704: LD_INT 106
7706: PUSH
7707: LD_INT 107
7709: PUSH
7710: LD_INT 108
7712: PUSH
7713: LD_INT 109
7715: PUSH
7716: LD_INT 110
7718: PUSH
7719: LD_INT 111
7721: PUSH
7722: LD_INT 112
7724: PUSH
7725: LD_INT 113
7727: PUSH
7728: LD_INT 114
7730: PUSH
7731: LD_INT 116
7733: PUSH
7734: LD_INT 117
7736: PUSH
7737: LD_INT 118
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: ST_TO_ADDR
7763: GO 9002
7765: LD_INT 14
7767: DOUBLE
7768: EQUAL
7769: IFTRUE 7773
7771: GO 7997
7773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7774: LD_ADDR_VAR 0 1
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: LD_INT 2
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 4
7790: PUSH
7791: LD_INT 5
7793: PUSH
7794: LD_INT 6
7796: PUSH
7797: LD_INT 7
7799: PUSH
7800: LD_INT 8
7802: PUSH
7803: LD_INT 9
7805: PUSH
7806: LD_INT 10
7808: PUSH
7809: LD_INT 11
7811: PUSH
7812: LD_INT 12
7814: PUSH
7815: LD_INT 13
7817: PUSH
7818: LD_INT 14
7820: PUSH
7821: LD_INT 15
7823: PUSH
7824: LD_INT 16
7826: PUSH
7827: LD_INT 17
7829: PUSH
7830: LD_INT 18
7832: PUSH
7833: LD_INT 19
7835: PUSH
7836: LD_INT 20
7838: PUSH
7839: LD_INT 21
7841: PUSH
7842: LD_INT 22
7844: PUSH
7845: LD_INT 23
7847: PUSH
7848: LD_INT 24
7850: PUSH
7851: LD_INT 25
7853: PUSH
7854: LD_INT 26
7856: PUSH
7857: LD_INT 27
7859: PUSH
7860: LD_INT 28
7862: PUSH
7863: LD_INT 29
7865: PUSH
7866: LD_INT 30
7868: PUSH
7869: LD_INT 31
7871: PUSH
7872: LD_INT 32
7874: PUSH
7875: LD_INT 33
7877: PUSH
7878: LD_INT 34
7880: PUSH
7881: LD_INT 36
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 101
7923: PUSH
7924: LD_INT 102
7926: PUSH
7927: LD_INT 103
7929: PUSH
7930: LD_INT 104
7932: PUSH
7933: LD_INT 105
7935: PUSH
7936: LD_INT 106
7938: PUSH
7939: LD_INT 107
7941: PUSH
7942: LD_INT 108
7944: PUSH
7945: LD_INT 109
7947: PUSH
7948: LD_INT 110
7950: PUSH
7951: LD_INT 111
7953: PUSH
7954: LD_INT 112
7956: PUSH
7957: LD_INT 113
7959: PUSH
7960: LD_INT 114
7962: PUSH
7963: LD_INT 116
7965: PUSH
7966: LD_INT 117
7968: PUSH
7969: LD_INT 118
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: ST_TO_ADDR
7995: GO 9002
7997: LD_INT 15
7999: DOUBLE
8000: EQUAL
8001: IFTRUE 8005
8003: GO 8229
8005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8006: LD_ADDR_VAR 0 1
8010: PUSH
8011: LD_INT 1
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: LD_INT 4
8022: PUSH
8023: LD_INT 5
8025: PUSH
8026: LD_INT 6
8028: PUSH
8029: LD_INT 7
8031: PUSH
8032: LD_INT 8
8034: PUSH
8035: LD_INT 9
8037: PUSH
8038: LD_INT 10
8040: PUSH
8041: LD_INT 11
8043: PUSH
8044: LD_INT 12
8046: PUSH
8047: LD_INT 13
8049: PUSH
8050: LD_INT 14
8052: PUSH
8053: LD_INT 15
8055: PUSH
8056: LD_INT 16
8058: PUSH
8059: LD_INT 17
8061: PUSH
8062: LD_INT 18
8064: PUSH
8065: LD_INT 19
8067: PUSH
8068: LD_INT 20
8070: PUSH
8071: LD_INT 21
8073: PUSH
8074: LD_INT 22
8076: PUSH
8077: LD_INT 23
8079: PUSH
8080: LD_INT 24
8082: PUSH
8083: LD_INT 25
8085: PUSH
8086: LD_INT 26
8088: PUSH
8089: LD_INT 27
8091: PUSH
8092: LD_INT 28
8094: PUSH
8095: LD_INT 29
8097: PUSH
8098: LD_INT 30
8100: PUSH
8101: LD_INT 31
8103: PUSH
8104: LD_INT 32
8106: PUSH
8107: LD_INT 33
8109: PUSH
8110: LD_INT 34
8112: PUSH
8113: LD_INT 36
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 101
8155: PUSH
8156: LD_INT 102
8158: PUSH
8159: LD_INT 103
8161: PUSH
8162: LD_INT 104
8164: PUSH
8165: LD_INT 105
8167: PUSH
8168: LD_INT 106
8170: PUSH
8171: LD_INT 107
8173: PUSH
8174: LD_INT 108
8176: PUSH
8177: LD_INT 109
8179: PUSH
8180: LD_INT 110
8182: PUSH
8183: LD_INT 111
8185: PUSH
8186: LD_INT 112
8188: PUSH
8189: LD_INT 113
8191: PUSH
8192: LD_INT 114
8194: PUSH
8195: LD_INT 116
8197: PUSH
8198: LD_INT 117
8200: PUSH
8201: LD_INT 118
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: ST_TO_ADDR
8227: GO 9002
8229: LD_INT 16
8231: DOUBLE
8232: EQUAL
8233: IFTRUE 8237
8235: GO 8373
8237: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8238: LD_ADDR_VAR 0 1
8242: PUSH
8243: LD_INT 2
8245: PUSH
8246: LD_INT 4
8248: PUSH
8249: LD_INT 5
8251: PUSH
8252: LD_INT 7
8254: PUSH
8255: LD_INT 11
8257: PUSH
8258: LD_INT 12
8260: PUSH
8261: LD_INT 15
8263: PUSH
8264: LD_INT 16
8266: PUSH
8267: LD_INT 20
8269: PUSH
8270: LD_INT 21
8272: PUSH
8273: LD_INT 22
8275: PUSH
8276: LD_INT 23
8278: PUSH
8279: LD_INT 25
8281: PUSH
8282: LD_INT 26
8284: PUSH
8285: LD_INT 30
8287: PUSH
8288: LD_INT 31
8290: PUSH
8291: LD_INT 32
8293: PUSH
8294: LD_INT 33
8296: PUSH
8297: LD_INT 34
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: PUSH
8321: LD_INT 101
8323: PUSH
8324: LD_INT 102
8326: PUSH
8327: LD_INT 103
8329: PUSH
8330: LD_INT 106
8332: PUSH
8333: LD_INT 108
8335: PUSH
8336: LD_INT 112
8338: PUSH
8339: LD_INT 113
8341: PUSH
8342: LD_INT 114
8344: PUSH
8345: LD_INT 116
8347: PUSH
8348: LD_INT 117
8350: PUSH
8351: LD_INT 118
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: ST_TO_ADDR
8371: GO 9002
8373: LD_INT 17
8375: DOUBLE
8376: EQUAL
8377: IFTRUE 8381
8379: GO 8605
8381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8382: LD_ADDR_VAR 0 1
8386: PUSH
8387: LD_INT 1
8389: PUSH
8390: LD_INT 2
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: LD_INT 4
8398: PUSH
8399: LD_INT 5
8401: PUSH
8402: LD_INT 6
8404: PUSH
8405: LD_INT 7
8407: PUSH
8408: LD_INT 8
8410: PUSH
8411: LD_INT 9
8413: PUSH
8414: LD_INT 10
8416: PUSH
8417: LD_INT 11
8419: PUSH
8420: LD_INT 12
8422: PUSH
8423: LD_INT 13
8425: PUSH
8426: LD_INT 14
8428: PUSH
8429: LD_INT 15
8431: PUSH
8432: LD_INT 16
8434: PUSH
8435: LD_INT 17
8437: PUSH
8438: LD_INT 18
8440: PUSH
8441: LD_INT 19
8443: PUSH
8444: LD_INT 20
8446: PUSH
8447: LD_INT 21
8449: PUSH
8450: LD_INT 22
8452: PUSH
8453: LD_INT 23
8455: PUSH
8456: LD_INT 24
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 26
8464: PUSH
8465: LD_INT 27
8467: PUSH
8468: LD_INT 28
8470: PUSH
8471: LD_INT 29
8473: PUSH
8474: LD_INT 30
8476: PUSH
8477: LD_INT 31
8479: PUSH
8480: LD_INT 32
8482: PUSH
8483: LD_INT 33
8485: PUSH
8486: LD_INT 34
8488: PUSH
8489: LD_INT 36
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 101
8531: PUSH
8532: LD_INT 102
8534: PUSH
8535: LD_INT 103
8537: PUSH
8538: LD_INT 104
8540: PUSH
8541: LD_INT 105
8543: PUSH
8544: LD_INT 106
8546: PUSH
8547: LD_INT 107
8549: PUSH
8550: LD_INT 108
8552: PUSH
8553: LD_INT 109
8555: PUSH
8556: LD_INT 110
8558: PUSH
8559: LD_INT 111
8561: PUSH
8562: LD_INT 112
8564: PUSH
8565: LD_INT 113
8567: PUSH
8568: LD_INT 114
8570: PUSH
8571: LD_INT 116
8573: PUSH
8574: LD_INT 117
8576: PUSH
8577: LD_INT 118
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: ST_TO_ADDR
8603: GO 9002
8605: LD_INT 18
8607: DOUBLE
8608: EQUAL
8609: IFTRUE 8613
8611: GO 8761
8613: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8614: LD_ADDR_VAR 0 1
8618: PUSH
8619: LD_INT 2
8621: PUSH
8622: LD_INT 4
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: LD_INT 7
8630: PUSH
8631: LD_INT 11
8633: PUSH
8634: LD_INT 12
8636: PUSH
8637: LD_INT 15
8639: PUSH
8640: LD_INT 16
8642: PUSH
8643: LD_INT 20
8645: PUSH
8646: LD_INT 21
8648: PUSH
8649: LD_INT 22
8651: PUSH
8652: LD_INT 23
8654: PUSH
8655: LD_INT 25
8657: PUSH
8658: LD_INT 26
8660: PUSH
8661: LD_INT 30
8663: PUSH
8664: LD_INT 31
8666: PUSH
8667: LD_INT 32
8669: PUSH
8670: LD_INT 33
8672: PUSH
8673: LD_INT 34
8675: PUSH
8676: LD_INT 35
8678: PUSH
8679: LD_INT 36
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: PUSH
8705: LD_INT 101
8707: PUSH
8708: LD_INT 102
8710: PUSH
8711: LD_INT 103
8713: PUSH
8714: LD_INT 106
8716: PUSH
8717: LD_INT 108
8719: PUSH
8720: LD_INT 112
8722: PUSH
8723: LD_INT 113
8725: PUSH
8726: LD_INT 114
8728: PUSH
8729: LD_INT 115
8731: PUSH
8732: LD_INT 116
8734: PUSH
8735: LD_INT 117
8737: PUSH
8738: LD_INT 118
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: ST_TO_ADDR
8759: GO 9002
8761: LD_INT 19
8763: DOUBLE
8764: EQUAL
8765: IFTRUE 8769
8767: GO 9001
8769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8770: LD_ADDR_VAR 0 1
8774: PUSH
8775: LD_INT 1
8777: PUSH
8778: LD_INT 2
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: LD_INT 4
8786: PUSH
8787: LD_INT 5
8789: PUSH
8790: LD_INT 6
8792: PUSH
8793: LD_INT 7
8795: PUSH
8796: LD_INT 8
8798: PUSH
8799: LD_INT 9
8801: PUSH
8802: LD_INT 10
8804: PUSH
8805: LD_INT 11
8807: PUSH
8808: LD_INT 12
8810: PUSH
8811: LD_INT 13
8813: PUSH
8814: LD_INT 14
8816: PUSH
8817: LD_INT 15
8819: PUSH
8820: LD_INT 16
8822: PUSH
8823: LD_INT 17
8825: PUSH
8826: LD_INT 18
8828: PUSH
8829: LD_INT 19
8831: PUSH
8832: LD_INT 20
8834: PUSH
8835: LD_INT 21
8837: PUSH
8838: LD_INT 22
8840: PUSH
8841: LD_INT 23
8843: PUSH
8844: LD_INT 24
8846: PUSH
8847: LD_INT 25
8849: PUSH
8850: LD_INT 26
8852: PUSH
8853: LD_INT 27
8855: PUSH
8856: LD_INT 28
8858: PUSH
8859: LD_INT 29
8861: PUSH
8862: LD_INT 30
8864: PUSH
8865: LD_INT 31
8867: PUSH
8868: LD_INT 32
8870: PUSH
8871: LD_INT 33
8873: PUSH
8874: LD_INT 34
8876: PUSH
8877: LD_INT 35
8879: PUSH
8880: LD_INT 36
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 101
8923: PUSH
8924: LD_INT 102
8926: PUSH
8927: LD_INT 103
8929: PUSH
8930: LD_INT 104
8932: PUSH
8933: LD_INT 105
8935: PUSH
8936: LD_INT 106
8938: PUSH
8939: LD_INT 107
8941: PUSH
8942: LD_INT 108
8944: PUSH
8945: LD_INT 109
8947: PUSH
8948: LD_INT 110
8950: PUSH
8951: LD_INT 111
8953: PUSH
8954: LD_INT 112
8956: PUSH
8957: LD_INT 113
8959: PUSH
8960: LD_INT 114
8962: PUSH
8963: LD_INT 115
8965: PUSH
8966: LD_INT 116
8968: PUSH
8969: LD_INT 117
8971: PUSH
8972: LD_INT 118
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: ST_TO_ADDR
8999: GO 9002
9001: POP
// end else
9002: GO 9233
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: LD_INT 1
9011: PUSH
9012: LD_INT 2
9014: PUSH
9015: LD_INT 3
9017: PUSH
9018: LD_INT 4
9020: PUSH
9021: LD_INT 5
9023: PUSH
9024: LD_INT 6
9026: PUSH
9027: LD_INT 7
9029: PUSH
9030: LD_INT 8
9032: PUSH
9033: LD_INT 9
9035: PUSH
9036: LD_INT 10
9038: PUSH
9039: LD_INT 11
9041: PUSH
9042: LD_INT 12
9044: PUSH
9045: LD_INT 13
9047: PUSH
9048: LD_INT 14
9050: PUSH
9051: LD_INT 15
9053: PUSH
9054: LD_INT 16
9056: PUSH
9057: LD_INT 17
9059: PUSH
9060: LD_INT 18
9062: PUSH
9063: LD_INT 19
9065: PUSH
9066: LD_INT 20
9068: PUSH
9069: LD_INT 21
9071: PUSH
9072: LD_INT 22
9074: PUSH
9075: LD_INT 23
9077: PUSH
9078: LD_INT 24
9080: PUSH
9081: LD_INT 25
9083: PUSH
9084: LD_INT 26
9086: PUSH
9087: LD_INT 27
9089: PUSH
9090: LD_INT 28
9092: PUSH
9093: LD_INT 29
9095: PUSH
9096: LD_INT 30
9098: PUSH
9099: LD_INT 31
9101: PUSH
9102: LD_INT 32
9104: PUSH
9105: LD_INT 33
9107: PUSH
9108: LD_INT 34
9110: PUSH
9111: LD_INT 35
9113: PUSH
9114: LD_INT 36
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 101
9157: PUSH
9158: LD_INT 102
9160: PUSH
9161: LD_INT 103
9163: PUSH
9164: LD_INT 104
9166: PUSH
9167: LD_INT 105
9169: PUSH
9170: LD_INT 106
9172: PUSH
9173: LD_INT 107
9175: PUSH
9176: LD_INT 108
9178: PUSH
9179: LD_INT 109
9181: PUSH
9182: LD_INT 110
9184: PUSH
9185: LD_INT 111
9187: PUSH
9188: LD_INT 112
9190: PUSH
9191: LD_INT 113
9193: PUSH
9194: LD_INT 114
9196: PUSH
9197: LD_INT 115
9199: PUSH
9200: LD_INT 116
9202: PUSH
9203: LD_INT 117
9205: PUSH
9206: LD_INT 118
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: ST_TO_ADDR
// if result then
9233: LD_VAR 0 1
9237: IFFALSE 9526
// begin normal :=  ;
9239: LD_ADDR_VAR 0 3
9243: PUSH
9244: LD_STRING 
9246: ST_TO_ADDR
// hardcore :=  ;
9247: LD_ADDR_VAR 0 4
9251: PUSH
9252: LD_STRING 
9254: ST_TO_ADDR
// for i = 1 to normalCounter do
9255: LD_ADDR_VAR 0 5
9259: PUSH
9260: DOUBLE
9261: LD_INT 1
9263: DEC
9264: ST_TO_ADDR
9265: LD_EXP 33
9269: PUSH
9270: FOR_TO
9271: IFFALSE 9372
// begin tmp := 0 ;
9273: LD_ADDR_VAR 0 2
9277: PUSH
9278: LD_STRING 0
9280: ST_TO_ADDR
// if result [ 1 ] then
9281: LD_VAR 0 1
9285: PUSH
9286: LD_INT 1
9288: ARRAY
9289: IFFALSE 9354
// if result [ 1 ] [ 1 ] = i then
9291: LD_VAR 0 1
9295: PUSH
9296: LD_INT 1
9298: ARRAY
9299: PUSH
9300: LD_INT 1
9302: ARRAY
9303: PUSH
9304: LD_VAR 0 5
9308: EQUAL
9309: IFFALSE 9354
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9311: LD_ADDR_VAR 0 1
9315: PUSH
9316: LD_VAR 0 1
9320: PPUSH
9321: LD_INT 1
9323: PPUSH
9324: LD_VAR 0 1
9328: PUSH
9329: LD_INT 1
9331: ARRAY
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: CALL_OW 3
9340: PPUSH
9341: CALL_OW 1
9345: ST_TO_ADDR
// tmp := 1 ;
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: LD_STRING 1
9353: ST_TO_ADDR
// end ; normal := normal & tmp ;
9354: LD_ADDR_VAR 0 3
9358: PUSH
9359: LD_VAR 0 3
9363: PUSH
9364: LD_VAR 0 2
9368: STR
9369: ST_TO_ADDR
// end ;
9370: GO 9270
9372: POP
9373: POP
// for i = 1 to hardcoreCounter do
9374: LD_ADDR_VAR 0 5
9378: PUSH
9379: DOUBLE
9380: LD_INT 1
9382: DEC
9383: ST_TO_ADDR
9384: LD_EXP 34
9388: PUSH
9389: FOR_TO
9390: IFFALSE 9495
// begin tmp := 0 ;
9392: LD_ADDR_VAR 0 2
9396: PUSH
9397: LD_STRING 0
9399: ST_TO_ADDR
// if result [ 2 ] then
9400: LD_VAR 0 1
9404: PUSH
9405: LD_INT 2
9407: ARRAY
9408: IFFALSE 9477
// if result [ 2 ] [ 1 ] = 100 + i then
9410: LD_VAR 0 1
9414: PUSH
9415: LD_INT 2
9417: ARRAY
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: PUSH
9423: LD_INT 100
9425: PUSH
9426: LD_VAR 0 5
9430: PLUS
9431: EQUAL
9432: IFFALSE 9477
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9434: LD_ADDR_VAR 0 1
9438: PUSH
9439: LD_VAR 0 1
9443: PPUSH
9444: LD_INT 2
9446: PPUSH
9447: LD_VAR 0 1
9451: PUSH
9452: LD_INT 2
9454: ARRAY
9455: PPUSH
9456: LD_INT 1
9458: PPUSH
9459: CALL_OW 3
9463: PPUSH
9464: CALL_OW 1
9468: ST_TO_ADDR
// tmp := 1 ;
9469: LD_ADDR_VAR 0 2
9473: PUSH
9474: LD_STRING 1
9476: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: LD_VAR 0 4
9486: PUSH
9487: LD_VAR 0 2
9491: STR
9492: ST_TO_ADDR
// end ;
9493: GO 9389
9495: POP
9496: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9497: LD_STRING getStreamItemsFromMission("
9499: PUSH
9500: LD_VAR 0 3
9504: STR
9505: PUSH
9506: LD_STRING ","
9508: STR
9509: PUSH
9510: LD_VAR 0 4
9514: STR
9515: PUSH
9516: LD_STRING ")
9518: STR
9519: PPUSH
9520: CALL_OW 559
// end else
9524: GO 9533
// ToLua ( getStreamItemsFromMission("","") ) ;
9526: LD_STRING getStreamItemsFromMission("","")
9528: PPUSH
9529: CALL_OW 559
// end ;
9533: LD_VAR 0 1
9537: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9538: LD_EXP 32
9542: PUSH
9543: LD_EXP 37
9547: AND
9548: IFFALSE 9672
9550: GO 9552
9552: DISABLE
9553: LD_INT 0
9555: PPUSH
9556: PPUSH
// begin enable ;
9557: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9558: LD_ADDR_VAR 0 2
9562: PUSH
9563: LD_INT 22
9565: PUSH
9566: LD_OWVAR 2
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 34
9580: PUSH
9581: LD_INT 7
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 34
9590: PUSH
9591: LD_INT 45
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 34
9600: PUSH
9601: LD_INT 28
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 34
9610: PUSH
9611: LD_INT 47
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 69
9633: ST_TO_ADDR
// if not tmp then
9634: LD_VAR 0 2
9638: NOT
9639: IFFALSE 9643
// exit ;
9641: GO 9672
// for i in tmp do
9643: LD_ADDR_VAR 0 1
9647: PUSH
9648: LD_VAR 0 2
9652: PUSH
9653: FOR_IN
9654: IFFALSE 9670
// begin SetLives ( i , 0 ) ;
9656: LD_VAR 0 1
9660: PPUSH
9661: LD_INT 0
9663: PPUSH
9664: CALL_OW 234
// end ;
9668: GO 9653
9670: POP
9671: POP
// end ;
9672: PPOPN 2
9674: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9675: LD_EXP 32
9679: PUSH
9680: LD_EXP 38
9684: AND
9685: IFFALSE 9769
9687: GO 9689
9689: DISABLE
9690: LD_INT 0
9692: PPUSH
9693: PPUSH
// begin enable ;
9694: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9695: LD_ADDR_VAR 0 2
9699: PUSH
9700: LD_INT 22
9702: PUSH
9703: LD_OWVAR 2
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 32
9714: PUSH
9715: LD_INT 3
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PPUSH
9726: CALL_OW 69
9730: ST_TO_ADDR
// if not tmp then
9731: LD_VAR 0 2
9735: NOT
9736: IFFALSE 9740
// exit ;
9738: GO 9769
// for i in tmp do
9740: LD_ADDR_VAR 0 1
9744: PUSH
9745: LD_VAR 0 2
9749: PUSH
9750: FOR_IN
9751: IFFALSE 9767
// begin SetLives ( i , 0 ) ;
9753: LD_VAR 0 1
9757: PPUSH
9758: LD_INT 0
9760: PPUSH
9761: CALL_OW 234
// end ;
9765: GO 9750
9767: POP
9768: POP
// end ;
9769: PPOPN 2
9771: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9772: LD_EXP 32
9776: PUSH
9777: LD_EXP 35
9781: AND
9782: IFFALSE 9875
9784: GO 9786
9786: DISABLE
9787: LD_INT 0
9789: PPUSH
// begin enable ;
9790: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9791: LD_ADDR_VAR 0 1
9795: PUSH
9796: LD_INT 22
9798: PUSH
9799: LD_OWVAR 2
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 2
9810: PUSH
9811: LD_INT 25
9813: PUSH
9814: LD_INT 5
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 25
9823: PUSH
9824: LD_INT 9
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 25
9833: PUSH
9834: LD_INT 8
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 69
9855: PUSH
9856: FOR_IN
9857: IFFALSE 9873
// begin SetClass ( i , 1 ) ;
9859: LD_VAR 0 1
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 336
// end ;
9871: GO 9856
9873: POP
9874: POP
// end ;
9875: PPOPN 1
9877: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9878: LD_EXP 32
9882: PUSH
9883: LD_EXP 36
9887: AND
9888: PUSH
9889: LD_OWVAR 65
9893: PUSH
9894: LD_INT 7
9896: LESS
9897: AND
9898: IFFALSE 9912
9900: GO 9902
9902: DISABLE
// begin enable ;
9903: ENABLE
// game_speed := 7 ;
9904: LD_ADDR_OWVAR 65
9908: PUSH
9909: LD_INT 7
9911: ST_TO_ADDR
// end ;
9912: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9913: LD_EXP 32
9917: PUSH
9918: LD_EXP 39
9922: AND
9923: IFFALSE 10125
9925: GO 9927
9927: DISABLE
9928: LD_INT 0
9930: PPUSH
9931: PPUSH
9932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9933: LD_ADDR_VAR 0 3
9937: PUSH
9938: LD_INT 81
9940: PUSH
9941: LD_OWVAR 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 21
9952: PUSH
9953: LD_INT 1
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: ST_TO_ADDR
// if not tmp then
9969: LD_VAR 0 3
9973: NOT
9974: IFFALSE 9978
// exit ;
9976: GO 10125
// if tmp > 5 then
9978: LD_VAR 0 3
9982: PUSH
9983: LD_INT 5
9985: GREATER
9986: IFFALSE 9998
// k := 5 else
9988: LD_ADDR_VAR 0 2
9992: PUSH
9993: LD_INT 5
9995: ST_TO_ADDR
9996: GO 10008
// k := tmp ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_VAR 0 3
10007: ST_TO_ADDR
// for i := 1 to k do
10008: LD_ADDR_VAR 0 1
10012: PUSH
10013: DOUBLE
10014: LD_INT 1
10016: DEC
10017: ST_TO_ADDR
10018: LD_VAR 0 2
10022: PUSH
10023: FOR_TO
10024: IFFALSE 10123
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10026: LD_VAR 0 3
10030: PUSH
10031: LD_VAR 0 1
10035: ARRAY
10036: PPUSH
10037: LD_VAR 0 1
10041: PUSH
10042: LD_INT 4
10044: MOD
10045: PUSH
10046: LD_INT 1
10048: PLUS
10049: PPUSH
10050: CALL_OW 259
10054: PUSH
10055: LD_INT 10
10057: LESS
10058: IFFALSE 10121
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10060: LD_VAR 0 3
10064: PUSH
10065: LD_VAR 0 1
10069: ARRAY
10070: PPUSH
10071: LD_VAR 0 1
10075: PUSH
10076: LD_INT 4
10078: MOD
10079: PUSH
10080: LD_INT 1
10082: PLUS
10083: PPUSH
10084: LD_VAR 0 3
10088: PUSH
10089: LD_VAR 0 1
10093: ARRAY
10094: PPUSH
10095: LD_VAR 0 1
10099: PUSH
10100: LD_INT 4
10102: MOD
10103: PUSH
10104: LD_INT 1
10106: PLUS
10107: PPUSH
10108: CALL_OW 259
10112: PUSH
10113: LD_INT 1
10115: PLUS
10116: PPUSH
10117: CALL_OW 237
10121: GO 10023
10123: POP
10124: POP
// end ;
10125: PPOPN 3
10127: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10128: LD_EXP 32
10132: PUSH
10133: LD_EXP 40
10137: AND
10138: IFFALSE 10158
10140: GO 10142
10142: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10143: LD_INT 4
10145: PPUSH
10146: LD_OWVAR 2
10150: PPUSH
10151: LD_INT 0
10153: PPUSH
10154: CALL_OW 324
10158: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10159: LD_EXP 32
10163: PUSH
10164: LD_EXP 69
10168: AND
10169: IFFALSE 10189
10171: GO 10173
10173: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10174: LD_INT 19
10176: PPUSH
10177: LD_OWVAR 2
10181: PPUSH
10182: LD_INT 0
10184: PPUSH
10185: CALL_OW 324
10189: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10190: LD_EXP 32
10194: PUSH
10195: LD_EXP 41
10199: AND
10200: IFFALSE 10302
10202: GO 10204
10204: DISABLE
10205: LD_INT 0
10207: PPUSH
10208: PPUSH
// begin enable ;
10209: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10210: LD_ADDR_VAR 0 2
10214: PUSH
10215: LD_INT 22
10217: PUSH
10218: LD_OWVAR 2
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 2
10229: PUSH
10230: LD_INT 34
10232: PUSH
10233: LD_INT 11
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 34
10242: PUSH
10243: LD_INT 30
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 69
10263: ST_TO_ADDR
// if not tmp then
10264: LD_VAR 0 2
10268: NOT
10269: IFFALSE 10273
// exit ;
10271: GO 10302
// for i in tmp do
10273: LD_ADDR_VAR 0 1
10277: PUSH
10278: LD_VAR 0 2
10282: PUSH
10283: FOR_IN
10284: IFFALSE 10300
// begin SetLives ( i , 0 ) ;
10286: LD_VAR 0 1
10290: PPUSH
10291: LD_INT 0
10293: PPUSH
10294: CALL_OW 234
// end ;
10298: GO 10283
10300: POP
10301: POP
// end ;
10302: PPOPN 2
10304: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10305: LD_EXP 32
10309: PUSH
10310: LD_EXP 42
10314: AND
10315: IFFALSE 10335
10317: GO 10319
10319: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10320: LD_INT 32
10322: PPUSH
10323: LD_OWVAR 2
10327: PPUSH
10328: LD_INT 0
10330: PPUSH
10331: CALL_OW 324
10335: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10336: LD_EXP 32
10340: PUSH
10341: LD_EXP 43
10345: AND
10346: IFFALSE 10527
10348: GO 10350
10350: DISABLE
10351: LD_INT 0
10353: PPUSH
10354: PPUSH
10355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10356: LD_ADDR_VAR 0 2
10360: PUSH
10361: LD_INT 22
10363: PUSH
10364: LD_OWVAR 2
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 33
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: ST_TO_ADDR
// if not tmp then
10392: LD_VAR 0 2
10396: NOT
10397: IFFALSE 10401
// exit ;
10399: GO 10527
// side := 0 ;
10401: LD_ADDR_VAR 0 3
10405: PUSH
10406: LD_INT 0
10408: ST_TO_ADDR
// for i := 1 to 8 do
10409: LD_ADDR_VAR 0 1
10413: PUSH
10414: DOUBLE
10415: LD_INT 1
10417: DEC
10418: ST_TO_ADDR
10419: LD_INT 8
10421: PUSH
10422: FOR_TO
10423: IFFALSE 10471
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10425: LD_OWVAR 2
10429: PUSH
10430: LD_VAR 0 1
10434: NONEQUAL
10435: PUSH
10436: LD_OWVAR 2
10440: PPUSH
10441: LD_VAR 0 1
10445: PPUSH
10446: CALL_OW 81
10450: PUSH
10451: LD_INT 2
10453: EQUAL
10454: AND
10455: IFFALSE 10469
// begin side := i ;
10457: LD_ADDR_VAR 0 3
10461: PUSH
10462: LD_VAR 0 1
10466: ST_TO_ADDR
// break ;
10467: GO 10471
// end ;
10469: GO 10422
10471: POP
10472: POP
// if not side then
10473: LD_VAR 0 3
10477: NOT
10478: IFFALSE 10482
// exit ;
10480: GO 10527
// for i := 1 to tmp do
10482: LD_ADDR_VAR 0 1
10486: PUSH
10487: DOUBLE
10488: LD_INT 1
10490: DEC
10491: ST_TO_ADDR
10492: LD_VAR 0 2
10496: PUSH
10497: FOR_TO
10498: IFFALSE 10525
// if Prob ( 60 ) then
10500: LD_INT 60
10502: PPUSH
10503: CALL_OW 13
10507: IFFALSE 10523
// SetSide ( i , side ) ;
10509: LD_VAR 0 1
10513: PPUSH
10514: LD_VAR 0 3
10518: PPUSH
10519: CALL_OW 235
10523: GO 10497
10525: POP
10526: POP
// end ;
10527: PPOPN 3
10529: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10530: LD_EXP 32
10534: PUSH
10535: LD_EXP 45
10539: AND
10540: IFFALSE 10659
10542: GO 10544
10544: DISABLE
10545: LD_INT 0
10547: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10548: LD_ADDR_VAR 0 1
10552: PUSH
10553: LD_INT 22
10555: PUSH
10556: LD_OWVAR 2
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 21
10567: PUSH
10568: LD_INT 1
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 3
10577: PUSH
10578: LD_INT 23
10580: PUSH
10581: LD_INT 0
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: PUSH
10602: FOR_IN
10603: IFFALSE 10657
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10605: LD_VAR 0 1
10609: PPUSH
10610: CALL_OW 257
10614: PUSH
10615: LD_INT 1
10617: PUSH
10618: LD_INT 2
10620: PUSH
10621: LD_INT 3
10623: PUSH
10624: LD_INT 4
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: IN
10633: IFFALSE 10655
// SetClass ( un , rand ( 1 , 4 ) ) ;
10635: LD_VAR 0 1
10639: PPUSH
10640: LD_INT 1
10642: PPUSH
10643: LD_INT 4
10645: PPUSH
10646: CALL_OW 12
10650: PPUSH
10651: CALL_OW 336
10655: GO 10602
10657: POP
10658: POP
// end ;
10659: PPOPN 1
10661: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10662: LD_EXP 32
10666: PUSH
10667: LD_EXP 44
10671: AND
10672: IFFALSE 10751
10674: GO 10676
10676: DISABLE
10677: LD_INT 0
10679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10680: LD_ADDR_VAR 0 1
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_OWVAR 2
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 21
10699: PUSH
10700: LD_INT 3
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 69
10715: ST_TO_ADDR
// if not tmp then
10716: LD_VAR 0 1
10720: NOT
10721: IFFALSE 10725
// exit ;
10723: GO 10751
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10725: LD_VAR 0 1
10729: PUSH
10730: LD_INT 1
10732: PPUSH
10733: LD_VAR 0 1
10737: PPUSH
10738: CALL_OW 12
10742: ARRAY
10743: PPUSH
10744: LD_INT 100
10746: PPUSH
10747: CALL_OW 234
// end ;
10751: PPOPN 1
10753: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10754: LD_EXP 32
10758: PUSH
10759: LD_EXP 46
10763: AND
10764: IFFALSE 10862
10766: GO 10768
10768: DISABLE
10769: LD_INT 0
10771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10772: LD_ADDR_VAR 0 1
10776: PUSH
10777: LD_INT 22
10779: PUSH
10780: LD_OWVAR 2
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 21
10791: PUSH
10792: LD_INT 1
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PPUSH
10803: CALL_OW 69
10807: ST_TO_ADDR
// if not tmp then
10808: LD_VAR 0 1
10812: NOT
10813: IFFALSE 10817
// exit ;
10815: GO 10862
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10817: LD_VAR 0 1
10821: PUSH
10822: LD_INT 1
10824: PPUSH
10825: LD_VAR 0 1
10829: PPUSH
10830: CALL_OW 12
10834: ARRAY
10835: PPUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_INT 4
10841: PPUSH
10842: CALL_OW 12
10846: PPUSH
10847: LD_INT 3000
10849: PPUSH
10850: LD_INT 9000
10852: PPUSH
10853: CALL_OW 12
10857: PPUSH
10858: CALL_OW 492
// end ;
10862: PPOPN 1
10864: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10865: LD_EXP 32
10869: PUSH
10870: LD_EXP 47
10874: AND
10875: IFFALSE 10895
10877: GO 10879
10879: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10880: LD_INT 1
10882: PPUSH
10883: LD_OWVAR 2
10887: PPUSH
10888: LD_INT 0
10890: PPUSH
10891: CALL_OW 324
10895: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10896: LD_EXP 32
10900: PUSH
10901: LD_EXP 48
10905: AND
10906: IFFALSE 10989
10908: GO 10910
10910: DISABLE
10911: LD_INT 0
10913: PPUSH
10914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10915: LD_ADDR_VAR 0 2
10919: PUSH
10920: LD_INT 22
10922: PUSH
10923: LD_OWVAR 2
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 21
10934: PUSH
10935: LD_INT 3
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PPUSH
10946: CALL_OW 69
10950: ST_TO_ADDR
// if not tmp then
10951: LD_VAR 0 2
10955: NOT
10956: IFFALSE 10960
// exit ;
10958: GO 10989
// for i in tmp do
10960: LD_ADDR_VAR 0 1
10964: PUSH
10965: LD_VAR 0 2
10969: PUSH
10970: FOR_IN
10971: IFFALSE 10987
// SetBLevel ( i , 10 ) ;
10973: LD_VAR 0 1
10977: PPUSH
10978: LD_INT 10
10980: PPUSH
10981: CALL_OW 241
10985: GO 10970
10987: POP
10988: POP
// end ;
10989: PPOPN 2
10991: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10992: LD_EXP 32
10996: PUSH
10997: LD_EXP 49
11001: AND
11002: IFFALSE 11113
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
11010: PPUSH
11011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11012: LD_ADDR_VAR 0 3
11016: PUSH
11017: LD_INT 22
11019: PUSH
11020: LD_OWVAR 2
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: LD_INT 25
11031: PUSH
11032: LD_INT 1
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PPUSH
11043: CALL_OW 69
11047: ST_TO_ADDR
// if not tmp then
11048: LD_VAR 0 3
11052: NOT
11053: IFFALSE 11057
// exit ;
11055: GO 11113
// un := tmp [ rand ( 1 , tmp ) ] ;
11057: LD_ADDR_VAR 0 2
11061: PUSH
11062: LD_VAR 0 3
11066: PUSH
11067: LD_INT 1
11069: PPUSH
11070: LD_VAR 0 3
11074: PPUSH
11075: CALL_OW 12
11079: ARRAY
11080: ST_TO_ADDR
// if Crawls ( un ) then
11081: LD_VAR 0 2
11085: PPUSH
11086: CALL_OW 318
11090: IFFALSE 11101
// ComWalk ( un ) ;
11092: LD_VAR 0 2
11096: PPUSH
11097: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11101: LD_VAR 0 2
11105: PPUSH
11106: LD_INT 5
11108: PPUSH
11109: CALL_OW 336
// end ;
11113: PPOPN 3
11115: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11116: LD_EXP 32
11120: PUSH
11121: LD_EXP 50
11125: AND
11126: PUSH
11127: LD_OWVAR 67
11131: PUSH
11132: LD_INT 4
11134: LESS
11135: AND
11136: IFFALSE 11155
11138: GO 11140
11140: DISABLE
// begin Difficulty := Difficulty + 1 ;
11141: LD_ADDR_OWVAR 67
11145: PUSH
11146: LD_OWVAR 67
11150: PUSH
11151: LD_INT 1
11153: PLUS
11154: ST_TO_ADDR
// end ;
11155: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11156: LD_EXP 32
11160: PUSH
11161: LD_EXP 51
11165: AND
11166: IFFALSE 11269
11168: GO 11170
11170: DISABLE
11171: LD_INT 0
11173: PPUSH
// begin for i := 1 to 5 do
11174: LD_ADDR_VAR 0 1
11178: PUSH
11179: DOUBLE
11180: LD_INT 1
11182: DEC
11183: ST_TO_ADDR
11184: LD_INT 5
11186: PUSH
11187: FOR_TO
11188: IFFALSE 11267
// begin uc_nation := nation_nature ;
11190: LD_ADDR_OWVAR 21
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// uc_side := 0 ;
11198: LD_ADDR_OWVAR 20
11202: PUSH
11203: LD_INT 0
11205: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11206: LD_ADDR_OWVAR 29
11210: PUSH
11211: LD_INT 12
11213: PUSH
11214: LD_INT 12
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: ST_TO_ADDR
// hc_agressivity := 20 ;
11221: LD_ADDR_OWVAR 35
11225: PUSH
11226: LD_INT 20
11228: ST_TO_ADDR
// hc_class := class_tiger ;
11229: LD_ADDR_OWVAR 28
11233: PUSH
11234: LD_INT 14
11236: ST_TO_ADDR
// hc_gallery :=  ;
11237: LD_ADDR_OWVAR 33
11241: PUSH
11242: LD_STRING 
11244: ST_TO_ADDR
// hc_name :=  ;
11245: LD_ADDR_OWVAR 26
11249: PUSH
11250: LD_STRING 
11252: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11253: CALL_OW 44
11257: PPUSH
11258: LD_INT 0
11260: PPUSH
11261: CALL_OW 51
// end ;
11265: GO 11187
11267: POP
11268: POP
// end ;
11269: PPOPN 1
11271: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11272: LD_EXP 32
11276: PUSH
11277: LD_EXP 52
11281: AND
11282: IFFALSE 11291
11284: GO 11286
11286: DISABLE
// StreamSibBomb ;
11287: CALL 11292 0 0
11291: END
// export function StreamSibBomb ; var i , x , y ; begin
11292: LD_INT 0
11294: PPUSH
11295: PPUSH
11296: PPUSH
11297: PPUSH
// result := false ;
11298: LD_ADDR_VAR 0 1
11302: PUSH
11303: LD_INT 0
11305: ST_TO_ADDR
// for i := 1 to 16 do
11306: LD_ADDR_VAR 0 2
11310: PUSH
11311: DOUBLE
11312: LD_INT 1
11314: DEC
11315: ST_TO_ADDR
11316: LD_INT 16
11318: PUSH
11319: FOR_TO
11320: IFFALSE 11519
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11322: LD_ADDR_VAR 0 3
11326: PUSH
11327: LD_INT 10
11329: PUSH
11330: LD_INT 20
11332: PUSH
11333: LD_INT 30
11335: PUSH
11336: LD_INT 40
11338: PUSH
11339: LD_INT 50
11341: PUSH
11342: LD_INT 60
11344: PUSH
11345: LD_INT 70
11347: PUSH
11348: LD_INT 80
11350: PUSH
11351: LD_INT 90
11353: PUSH
11354: LD_INT 100
11356: PUSH
11357: LD_INT 110
11359: PUSH
11360: LD_INT 120
11362: PUSH
11363: LD_INT 130
11365: PUSH
11366: LD_INT 140
11368: PUSH
11369: LD_INT 150
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 1
11391: PPUSH
11392: LD_INT 15
11394: PPUSH
11395: CALL_OW 12
11399: ARRAY
11400: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11401: LD_ADDR_VAR 0 4
11405: PUSH
11406: LD_INT 10
11408: PUSH
11409: LD_INT 20
11411: PUSH
11412: LD_INT 30
11414: PUSH
11415: LD_INT 40
11417: PUSH
11418: LD_INT 50
11420: PUSH
11421: LD_INT 60
11423: PUSH
11424: LD_INT 70
11426: PUSH
11427: LD_INT 80
11429: PUSH
11430: LD_INT 90
11432: PUSH
11433: LD_INT 100
11435: PUSH
11436: LD_INT 110
11438: PUSH
11439: LD_INT 120
11441: PUSH
11442: LD_INT 130
11444: PUSH
11445: LD_INT 140
11447: PUSH
11448: LD_INT 150
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 1
11470: PPUSH
11471: LD_INT 15
11473: PPUSH
11474: CALL_OW 12
11478: ARRAY
11479: ST_TO_ADDR
// if ValidHex ( x , y ) then
11480: LD_VAR 0 3
11484: PPUSH
11485: LD_VAR 0 4
11489: PPUSH
11490: CALL_OW 488
11494: IFFALSE 11517
// begin result := [ x , y ] ;
11496: LD_ADDR_VAR 0 1
11500: PUSH
11501: LD_VAR 0 3
11505: PUSH
11506: LD_VAR 0 4
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: ST_TO_ADDR
// break ;
11515: GO 11519
// end ; end ;
11517: GO 11319
11519: POP
11520: POP
// if result then
11521: LD_VAR 0 1
11525: IFFALSE 11585
// begin ToLua ( playSibBomb() ) ;
11527: LD_STRING playSibBomb()
11529: PPUSH
11530: CALL_OW 559
// wait ( 0 0$14 ) ;
11534: LD_INT 490
11536: PPUSH
11537: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11541: LD_VAR 0 1
11545: PUSH
11546: LD_INT 1
11548: ARRAY
11549: PPUSH
11550: LD_VAR 0 1
11554: PUSH
11555: LD_INT 2
11557: ARRAY
11558: PPUSH
11559: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11563: LD_VAR 0 1
11567: PUSH
11568: LD_INT 1
11570: ARRAY
11571: PPUSH
11572: LD_VAR 0 1
11576: PUSH
11577: LD_INT 2
11579: ARRAY
11580: PPUSH
11581: CALL_OW 429
// end ; end ;
11585: LD_VAR 0 1
11589: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11590: LD_EXP 32
11594: PUSH
11595: LD_EXP 54
11599: AND
11600: IFFALSE 11612
11602: GO 11604
11604: DISABLE
// YouLost (  ) ;
11605: LD_STRING 
11607: PPUSH
11608: CALL_OW 104
11612: END
// every 0 0$1 trigger StreamModeActive and sFog do
11613: LD_EXP 32
11617: PUSH
11618: LD_EXP 53
11622: AND
11623: IFFALSE 11637
11625: GO 11627
11627: DISABLE
// FogOff ( your_side ) ;
11628: LD_OWVAR 2
11632: PPUSH
11633: CALL_OW 344
11637: END
// every 0 0$1 trigger StreamModeActive and sSun do
11638: LD_EXP 32
11642: PUSH
11643: LD_EXP 55
11647: AND
11648: IFFALSE 11676
11650: GO 11652
11652: DISABLE
// begin solar_recharge_percent := 0 ;
11653: LD_ADDR_OWVAR 79
11657: PUSH
11658: LD_INT 0
11660: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11661: LD_INT 10500
11663: PPUSH
11664: CALL_OW 67
// solar_recharge_percent := 100 ;
11668: LD_ADDR_OWVAR 79
11672: PUSH
11673: LD_INT 100
11675: ST_TO_ADDR
// end ;
11676: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11677: LD_EXP 32
11681: PUSH
11682: LD_EXP 56
11686: AND
11687: IFFALSE 11926
11689: GO 11691
11691: DISABLE
11692: LD_INT 0
11694: PPUSH
11695: PPUSH
11696: PPUSH
// begin tmp := [ ] ;
11697: LD_ADDR_VAR 0 3
11701: PUSH
11702: EMPTY
11703: ST_TO_ADDR
// for i := 1 to 6 do
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: DOUBLE
11710: LD_INT 1
11712: DEC
11713: ST_TO_ADDR
11714: LD_INT 6
11716: PUSH
11717: FOR_TO
11718: IFFALSE 11823
// begin uc_nation := nation_nature ;
11720: LD_ADDR_OWVAR 21
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// uc_side := 0 ;
11728: LD_ADDR_OWVAR 20
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11736: LD_ADDR_OWVAR 29
11740: PUSH
11741: LD_INT 12
11743: PUSH
11744: LD_INT 12
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: ST_TO_ADDR
// hc_agressivity := 20 ;
11751: LD_ADDR_OWVAR 35
11755: PUSH
11756: LD_INT 20
11758: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11759: LD_ADDR_OWVAR 28
11763: PUSH
11764: LD_INT 17
11766: ST_TO_ADDR
// hc_gallery :=  ;
11767: LD_ADDR_OWVAR 33
11771: PUSH
11772: LD_STRING 
11774: ST_TO_ADDR
// hc_name :=  ;
11775: LD_ADDR_OWVAR 26
11779: PUSH
11780: LD_STRING 
11782: ST_TO_ADDR
// un := CreateHuman ;
11783: LD_ADDR_VAR 0 2
11787: PUSH
11788: CALL_OW 44
11792: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: CALL_OW 51
// tmp := tmp ^ un ;
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: LD_VAR 0 3
11814: PUSH
11815: LD_VAR 0 2
11819: ADD
11820: ST_TO_ADDR
// end ;
11821: GO 11717
11823: POP
11824: POP
// repeat wait ( 0 0$1 ) ;
11825: LD_INT 35
11827: PPUSH
11828: CALL_OW 67
// for un in tmp do
11832: LD_ADDR_VAR 0 2
11836: PUSH
11837: LD_VAR 0 3
11841: PUSH
11842: FOR_IN
11843: IFFALSE 11917
// begin if IsDead ( un ) then
11845: LD_VAR 0 2
11849: PPUSH
11850: CALL_OW 301
11854: IFFALSE 11874
// begin tmp := tmp diff un ;
11856: LD_ADDR_VAR 0 3
11860: PUSH
11861: LD_VAR 0 3
11865: PUSH
11866: LD_VAR 0 2
11870: DIFF
11871: ST_TO_ADDR
// continue ;
11872: GO 11842
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11874: LD_VAR 0 2
11878: PPUSH
11879: LD_INT 3
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_INT 0
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 69
11900: PPUSH
11901: LD_VAR 0 2
11905: PPUSH
11906: CALL_OW 74
11910: PPUSH
11911: CALL_OW 115
// end ;
11915: GO 11842
11917: POP
11918: POP
// until not tmp ;
11919: LD_VAR 0 3
11923: NOT
11924: IFFALSE 11825
// end ;
11926: PPOPN 3
11928: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11929: LD_EXP 32
11933: PUSH
11934: LD_EXP 57
11938: AND
11939: IFFALSE 11993
11941: GO 11943
11943: DISABLE
// begin ToLua ( displayTroll(); ) ;
11944: LD_STRING displayTroll();
11946: PPUSH
11947: CALL_OW 559
// wait ( 3 3$00 ) ;
11951: LD_INT 6300
11953: PPUSH
11954: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11958: LD_STRING hideTroll();
11960: PPUSH
11961: CALL_OW 559
// wait ( 1 1$00 ) ;
11965: LD_INT 2100
11967: PPUSH
11968: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11972: LD_STRING displayTroll();
11974: PPUSH
11975: CALL_OW 559
// wait ( 1 1$00 ) ;
11979: LD_INT 2100
11981: PPUSH
11982: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11986: LD_STRING hideTroll();
11988: PPUSH
11989: CALL_OW 559
// end ;
11993: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11994: LD_EXP 32
11998: PUSH
11999: LD_EXP 58
12003: AND
12004: IFFALSE 12067
12006: GO 12008
12008: DISABLE
12009: LD_INT 0
12011: PPUSH
// begin p := 0 ;
12012: LD_ADDR_VAR 0 1
12016: PUSH
12017: LD_INT 0
12019: ST_TO_ADDR
// repeat game_speed := 1 ;
12020: LD_ADDR_OWVAR 65
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12028: LD_INT 35
12030: PPUSH
12031: CALL_OW 67
// p := p + 1 ;
12035: LD_ADDR_VAR 0 1
12039: PUSH
12040: LD_VAR 0 1
12044: PUSH
12045: LD_INT 1
12047: PLUS
12048: ST_TO_ADDR
// until p >= 60 ;
12049: LD_VAR 0 1
12053: PUSH
12054: LD_INT 60
12056: GREATEREQUAL
12057: IFFALSE 12020
// game_speed := 4 ;
12059: LD_ADDR_OWVAR 65
12063: PUSH
12064: LD_INT 4
12066: ST_TO_ADDR
// end ;
12067: PPOPN 1
12069: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12070: LD_EXP 32
12074: PUSH
12075: LD_EXP 59
12079: AND
12080: IFFALSE 12226
12082: GO 12084
12084: DISABLE
12085: LD_INT 0
12087: PPUSH
12088: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12089: LD_ADDR_VAR 0 1
12093: PUSH
12094: LD_INT 22
12096: PUSH
12097: LD_OWVAR 2
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 0
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 30
12121: PUSH
12122: LD_INT 1
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PPUSH
12138: CALL_OW 69
12142: ST_TO_ADDR
// if not depot then
12143: LD_VAR 0 1
12147: NOT
12148: IFFALSE 12152
// exit ;
12150: GO 12226
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12152: LD_ADDR_VAR 0 2
12156: PUSH
12157: LD_VAR 0 1
12161: PUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL_OW 12
12174: ARRAY
12175: PPUSH
12176: CALL_OW 274
12180: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12181: LD_VAR 0 2
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: LD_INT 0
12191: PPUSH
12192: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12196: LD_VAR 0 2
12200: PPUSH
12201: LD_INT 2
12203: PPUSH
12204: LD_INT 0
12206: PPUSH
12207: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12211: LD_VAR 0 2
12215: PPUSH
12216: LD_INT 3
12218: PPUSH
12219: LD_INT 0
12221: PPUSH
12222: CALL_OW 277
// end ;
12226: PPOPN 2
12228: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12229: LD_EXP 32
12233: PUSH
12234: LD_EXP 60
12238: AND
12239: IFFALSE 12336
12241: GO 12243
12243: DISABLE
12244: LD_INT 0
12246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12247: LD_ADDR_VAR 0 1
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_OWVAR 2
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 21
12266: PUSH
12267: LD_INT 1
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 3
12276: PUSH
12277: LD_INT 23
12279: PUSH
12280: LD_INT 0
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 69
12300: ST_TO_ADDR
// if not tmp then
12301: LD_VAR 0 1
12305: NOT
12306: IFFALSE 12310
// exit ;
12308: GO 12336
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12310: LD_VAR 0 1
12314: PUSH
12315: LD_INT 1
12317: PPUSH
12318: LD_VAR 0 1
12322: PPUSH
12323: CALL_OW 12
12327: ARRAY
12328: PPUSH
12329: LD_INT 200
12331: PPUSH
12332: CALL_OW 234
// end ;
12336: PPOPN 1
12338: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12339: LD_EXP 32
12343: PUSH
12344: LD_EXP 61
12348: AND
12349: IFFALSE 12428
12351: GO 12353
12353: DISABLE
12354: LD_INT 0
12356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12357: LD_ADDR_VAR 0 1
12361: PUSH
12362: LD_INT 22
12364: PUSH
12365: LD_OWVAR 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 21
12376: PUSH
12377: LD_INT 2
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: ST_TO_ADDR
// if not tmp then
12393: LD_VAR 0 1
12397: NOT
12398: IFFALSE 12402
// exit ;
12400: GO 12428
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12402: LD_VAR 0 1
12406: PUSH
12407: LD_INT 1
12409: PPUSH
12410: LD_VAR 0 1
12414: PPUSH
12415: CALL_OW 12
12419: ARRAY
12420: PPUSH
12421: LD_INT 60
12423: PPUSH
12424: CALL_OW 234
// end ;
12428: PPOPN 1
12430: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12431: LD_EXP 32
12435: PUSH
12436: LD_EXP 62
12440: AND
12441: IFFALSE 12540
12443: GO 12445
12445: DISABLE
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// begin enable ;
12450: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_OWVAR 2
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 61
12470: PUSH
12471: EMPTY
12472: LIST
12473: PUSH
12474: LD_INT 33
12476: PUSH
12477: LD_INT 2
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: PPUSH
12489: CALL_OW 69
12493: ST_TO_ADDR
// if not tmp then
12494: LD_VAR 0 1
12498: NOT
12499: IFFALSE 12503
// exit ;
12501: GO 12540
// for i in tmp do
12503: LD_ADDR_VAR 0 2
12507: PUSH
12508: LD_VAR 0 1
12512: PUSH
12513: FOR_IN
12514: IFFALSE 12538
// if IsControledBy ( i ) then
12516: LD_VAR 0 2
12520: PPUSH
12521: CALL_OW 312
12525: IFFALSE 12536
// ComUnlink ( i ) ;
12527: LD_VAR 0 2
12531: PPUSH
12532: CALL_OW 136
12536: GO 12513
12538: POP
12539: POP
// end ;
12540: PPOPN 2
12542: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12543: LD_EXP 32
12547: PUSH
12548: LD_EXP 63
12552: AND
12553: IFFALSE 12693
12555: GO 12557
12557: DISABLE
12558: LD_INT 0
12560: PPUSH
12561: PPUSH
// begin ToLua ( displayPowell(); ) ;
12562: LD_STRING displayPowell();
12564: PPUSH
12565: CALL_OW 559
// uc_side := 0 ;
12569: LD_ADDR_OWVAR 20
12573: PUSH
12574: LD_INT 0
12576: ST_TO_ADDR
// uc_nation := 2 ;
12577: LD_ADDR_OWVAR 21
12581: PUSH
12582: LD_INT 2
12584: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12585: LD_ADDR_OWVAR 37
12589: PUSH
12590: LD_INT 14
12592: ST_TO_ADDR
// vc_engine := engine_siberite ;
12593: LD_ADDR_OWVAR 39
12597: PUSH
12598: LD_INT 3
12600: ST_TO_ADDR
// vc_control := control_apeman ;
12601: LD_ADDR_OWVAR 38
12605: PUSH
12606: LD_INT 5
12608: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12609: LD_ADDR_OWVAR 40
12613: PUSH
12614: LD_INT 29
12616: ST_TO_ADDR
// un := CreateVehicle ;
12617: LD_ADDR_VAR 0 2
12621: PUSH
12622: CALL_OW 45
12626: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12627: LD_VAR 0 2
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12639: LD_INT 35
12641: PPUSH
12642: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12646: LD_VAR 0 2
12650: PPUSH
12651: LD_INT 22
12653: PUSH
12654: LD_OWVAR 2
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PPUSH
12663: CALL_OW 69
12667: PPUSH
12668: LD_VAR 0 2
12672: PPUSH
12673: CALL_OW 74
12677: PPUSH
12678: CALL_OW 115
// until IsDead ( un ) ;
12682: LD_VAR 0 2
12686: PPUSH
12687: CALL_OW 301
12691: IFFALSE 12639
// end ;
12693: PPOPN 2
12695: END
// every 0 0$1 trigger StreamModeActive and sStu do
12696: LD_EXP 32
12700: PUSH
12701: LD_EXP 71
12705: AND
12706: IFFALSE 12722
12708: GO 12710
12710: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12711: LD_STRING displayStucuk();
12713: PPUSH
12714: CALL_OW 559
// ResetFog ;
12718: CALL_OW 335
// end ;
12722: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12723: LD_EXP 32
12727: PUSH
12728: LD_EXP 64
12732: AND
12733: IFFALSE 12874
12735: GO 12737
12737: DISABLE
12738: LD_INT 0
12740: PPUSH
12741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12742: LD_ADDR_VAR 0 2
12746: PUSH
12747: LD_INT 22
12749: PUSH
12750: LD_OWVAR 2
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 21
12761: PUSH
12762: LD_INT 1
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PPUSH
12773: CALL_OW 69
12777: ST_TO_ADDR
// if not tmp then
12778: LD_VAR 0 2
12782: NOT
12783: IFFALSE 12787
// exit ;
12785: GO 12874
// un := tmp [ rand ( 1 , tmp ) ] ;
12787: LD_ADDR_VAR 0 1
12791: PUSH
12792: LD_VAR 0 2
12796: PUSH
12797: LD_INT 1
12799: PPUSH
12800: LD_VAR 0 2
12804: PPUSH
12805: CALL_OW 12
12809: ARRAY
12810: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12811: LD_VAR 0 1
12815: PPUSH
12816: LD_INT 0
12818: PPUSH
12819: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12823: LD_VAR 0 1
12827: PPUSH
12828: LD_OWVAR 3
12832: PUSH
12833: LD_VAR 0 1
12837: DIFF
12838: PPUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL_OW 74
12848: PPUSH
12849: CALL_OW 115
// wait ( 0 0$20 ) ;
12853: LD_INT 700
12855: PPUSH
12856: CALL_OW 67
// SetSide ( un , your_side ) ;
12860: LD_VAR 0 1
12864: PPUSH
12865: LD_OWVAR 2
12869: PPUSH
12870: CALL_OW 235
// end ;
12874: PPOPN 2
12876: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12877: LD_EXP 32
12881: PUSH
12882: LD_EXP 65
12886: AND
12887: IFFALSE 12993
12889: GO 12891
12891: DISABLE
12892: LD_INT 0
12894: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12895: LD_ADDR_VAR 0 1
12899: PUSH
12900: LD_INT 22
12902: PUSH
12903: LD_OWVAR 2
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 2
12914: PUSH
12915: LD_INT 30
12917: PUSH
12918: LD_INT 0
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 30
12927: PUSH
12928: LD_INT 1
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: ST_TO_ADDR
// if not depot then
12949: LD_VAR 0 1
12953: NOT
12954: IFFALSE 12958
// exit ;
12956: GO 12993
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12958: LD_VAR 0 1
12962: PUSH
12963: LD_INT 1
12965: ARRAY
12966: PPUSH
12967: CALL_OW 250
12971: PPUSH
12972: LD_VAR 0 1
12976: PUSH
12977: LD_INT 1
12979: ARRAY
12980: PPUSH
12981: CALL_OW 251
12985: PPUSH
12986: LD_INT 70
12988: PPUSH
12989: CALL_OW 495
// end ;
12993: PPOPN 1
12995: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12996: LD_EXP 32
13000: PUSH
13001: LD_EXP 66
13005: AND
13006: IFFALSE 13217
13008: GO 13010
13010: DISABLE
13011: LD_INT 0
13013: PPUSH
13014: PPUSH
13015: PPUSH
13016: PPUSH
13017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13018: LD_ADDR_VAR 0 5
13022: PUSH
13023: LD_INT 22
13025: PUSH
13026: LD_OWVAR 2
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 21
13037: PUSH
13038: LD_INT 1
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 69
13053: ST_TO_ADDR
// if not tmp then
13054: LD_VAR 0 5
13058: NOT
13059: IFFALSE 13063
// exit ;
13061: GO 13217
// for i in tmp do
13063: LD_ADDR_VAR 0 1
13067: PUSH
13068: LD_VAR 0 5
13072: PUSH
13073: FOR_IN
13074: IFFALSE 13215
// begin d := rand ( 0 , 5 ) ;
13076: LD_ADDR_VAR 0 4
13080: PUSH
13081: LD_INT 0
13083: PPUSH
13084: LD_INT 5
13086: PPUSH
13087: CALL_OW 12
13091: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: LD_VAR 0 1
13101: PPUSH
13102: CALL_OW 250
13106: PPUSH
13107: LD_VAR 0 4
13111: PPUSH
13112: LD_INT 3
13114: PPUSH
13115: LD_INT 12
13117: PPUSH
13118: CALL_OW 12
13122: PPUSH
13123: CALL_OW 272
13127: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13128: LD_ADDR_VAR 0 3
13132: PUSH
13133: LD_VAR 0 1
13137: PPUSH
13138: CALL_OW 251
13142: PPUSH
13143: LD_VAR 0 4
13147: PPUSH
13148: LD_INT 3
13150: PPUSH
13151: LD_INT 12
13153: PPUSH
13154: CALL_OW 12
13158: PPUSH
13159: CALL_OW 273
13163: ST_TO_ADDR
// if ValidHex ( x , y ) then
13164: LD_VAR 0 2
13168: PPUSH
13169: LD_VAR 0 3
13173: PPUSH
13174: CALL_OW 488
13178: IFFALSE 13213
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13180: LD_VAR 0 1
13184: PPUSH
13185: LD_VAR 0 2
13189: PPUSH
13190: LD_VAR 0 3
13194: PPUSH
13195: LD_INT 3
13197: PPUSH
13198: LD_INT 6
13200: PPUSH
13201: CALL_OW 12
13205: PPUSH
13206: LD_INT 1
13208: PPUSH
13209: CALL_OW 483
// end ;
13213: GO 13073
13215: POP
13216: POP
// end ;
13217: PPOPN 5
13219: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13220: LD_EXP 32
13224: PUSH
13225: LD_EXP 67
13229: AND
13230: IFFALSE 13324
13232: GO 13234
13234: DISABLE
13235: LD_INT 0
13237: PPUSH
13238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13239: LD_ADDR_VAR 0 2
13243: PUSH
13244: LD_INT 22
13246: PUSH
13247: LD_OWVAR 2
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 32
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 21
13268: PUSH
13269: LD_INT 2
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 69
13285: ST_TO_ADDR
// if not tmp then
13286: LD_VAR 0 2
13290: NOT
13291: IFFALSE 13295
// exit ;
13293: GO 13324
// for i in tmp do
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_VAR 0 2
13304: PUSH
13305: FOR_IN
13306: IFFALSE 13322
// SetFuel ( i , 0 ) ;
13308: LD_VAR 0 1
13312: PPUSH
13313: LD_INT 0
13315: PPUSH
13316: CALL_OW 240
13320: GO 13305
13322: POP
13323: POP
// end ;
13324: PPOPN 2
13326: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13327: LD_EXP 32
13331: PUSH
13332: LD_EXP 68
13336: AND
13337: IFFALSE 13403
13339: GO 13341
13341: DISABLE
13342: LD_INT 0
13344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13345: LD_ADDR_VAR 0 1
13349: PUSH
13350: LD_INT 22
13352: PUSH
13353: LD_OWVAR 2
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 30
13364: PUSH
13365: LD_INT 29
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 69
13380: ST_TO_ADDR
// if not tmp then
13381: LD_VAR 0 1
13385: NOT
13386: IFFALSE 13390
// exit ;
13388: GO 13403
// DestroyUnit ( tmp [ 1 ] ) ;
13390: LD_VAR 0 1
13394: PUSH
13395: LD_INT 1
13397: ARRAY
13398: PPUSH
13399: CALL_OW 65
// end ;
13403: PPOPN 1
13405: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13406: LD_EXP 32
13410: PUSH
13411: LD_EXP 70
13415: AND
13416: IFFALSE 13545
13418: GO 13420
13420: DISABLE
13421: LD_INT 0
13423: PPUSH
// begin uc_side := 0 ;
13424: LD_ADDR_OWVAR 20
13428: PUSH
13429: LD_INT 0
13431: ST_TO_ADDR
// uc_nation := nation_arabian ;
13432: LD_ADDR_OWVAR 21
13436: PUSH
13437: LD_INT 2
13439: ST_TO_ADDR
// hc_gallery :=  ;
13440: LD_ADDR_OWVAR 33
13444: PUSH
13445: LD_STRING 
13447: ST_TO_ADDR
// hc_name :=  ;
13448: LD_ADDR_OWVAR 26
13452: PUSH
13453: LD_STRING 
13455: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13456: LD_INT 1
13458: PPUSH
13459: LD_INT 11
13461: PPUSH
13462: LD_INT 10
13464: PPUSH
13465: CALL_OW 380
// un := CreateHuman ;
13469: LD_ADDR_VAR 0 1
13473: PUSH
13474: CALL_OW 44
13478: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13479: LD_VAR 0 1
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13491: LD_INT 35
13493: PPUSH
13494: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13498: LD_VAR 0 1
13502: PPUSH
13503: LD_INT 22
13505: PUSH
13506: LD_OWVAR 2
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 69
13519: PPUSH
13520: LD_VAR 0 1
13524: PPUSH
13525: CALL_OW 74
13529: PPUSH
13530: CALL_OW 115
// until IsDead ( un ) ;
13534: LD_VAR 0 1
13538: PPUSH
13539: CALL_OW 301
13543: IFFALSE 13491
// end ;
13545: PPOPN 1
13547: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13548: LD_EXP 32
13552: PUSH
13553: LD_EXP 72
13557: AND
13558: IFFALSE 13570
13560: GO 13562
13562: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13563: LD_STRING earthquake(getX(game), 0, 32)
13565: PPUSH
13566: CALL_OW 559
13570: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13571: LD_EXP 32
13575: PUSH
13576: LD_EXP 73
13580: AND
13581: IFFALSE 13672
13583: GO 13585
13585: DISABLE
13586: LD_INT 0
13588: PPUSH
// begin enable ;
13589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13590: LD_ADDR_VAR 0 1
13594: PUSH
13595: LD_INT 22
13597: PUSH
13598: LD_OWVAR 2
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 21
13609: PUSH
13610: LD_INT 2
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 33
13619: PUSH
13620: LD_INT 3
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: PPUSH
13632: CALL_OW 69
13636: ST_TO_ADDR
// if not tmp then
13637: LD_VAR 0 1
13641: NOT
13642: IFFALSE 13646
// exit ;
13644: GO 13672
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13646: LD_VAR 0 1
13650: PUSH
13651: LD_INT 1
13653: PPUSH
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 12
13663: ARRAY
13664: PPUSH
13665: LD_INT 1
13667: PPUSH
13668: CALL_OW 234
// end ;
13672: PPOPN 1
13674: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13675: LD_EXP 32
13679: PUSH
13680: LD_EXP 74
13684: AND
13685: IFFALSE 13826
13687: GO 13689
13689: DISABLE
13690: LD_INT 0
13692: PPUSH
13693: PPUSH
13694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13695: LD_ADDR_VAR 0 3
13699: PUSH
13700: LD_INT 22
13702: PUSH
13703: LD_OWVAR 2
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 25
13714: PUSH
13715: LD_INT 1
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: ST_TO_ADDR
// if not tmp then
13731: LD_VAR 0 3
13735: NOT
13736: IFFALSE 13740
// exit ;
13738: GO 13826
// un := tmp [ rand ( 1 , tmp ) ] ;
13740: LD_ADDR_VAR 0 2
13744: PUSH
13745: LD_VAR 0 3
13749: PUSH
13750: LD_INT 1
13752: PPUSH
13753: LD_VAR 0 3
13757: PPUSH
13758: CALL_OW 12
13762: ARRAY
13763: ST_TO_ADDR
// if Crawls ( un ) then
13764: LD_VAR 0 2
13768: PPUSH
13769: CALL_OW 318
13773: IFFALSE 13784
// ComWalk ( un ) ;
13775: LD_VAR 0 2
13779: PPUSH
13780: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13784: LD_VAR 0 2
13788: PPUSH
13789: LD_INT 9
13791: PPUSH
13792: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13796: LD_INT 28
13798: PPUSH
13799: LD_OWVAR 2
13803: PPUSH
13804: LD_INT 2
13806: PPUSH
13807: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13811: LD_INT 29
13813: PPUSH
13814: LD_OWVAR 2
13818: PPUSH
13819: LD_INT 2
13821: PPUSH
13822: CALL_OW 322
// end ;
13826: PPOPN 3
13828: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13829: LD_EXP 32
13833: PUSH
13834: LD_EXP 75
13838: AND
13839: IFFALSE 13950
13841: GO 13843
13843: DISABLE
13844: LD_INT 0
13846: PPUSH
13847: PPUSH
13848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13849: LD_ADDR_VAR 0 3
13853: PUSH
13854: LD_INT 22
13856: PUSH
13857: LD_OWVAR 2
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 25
13868: PUSH
13869: LD_INT 1
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PPUSH
13880: CALL_OW 69
13884: ST_TO_ADDR
// if not tmp then
13885: LD_VAR 0 3
13889: NOT
13890: IFFALSE 13894
// exit ;
13892: GO 13950
// un := tmp [ rand ( 1 , tmp ) ] ;
13894: LD_ADDR_VAR 0 2
13898: PUSH
13899: LD_VAR 0 3
13903: PUSH
13904: LD_INT 1
13906: PPUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: CALL_OW 12
13916: ARRAY
13917: ST_TO_ADDR
// if Crawls ( un ) then
13918: LD_VAR 0 2
13922: PPUSH
13923: CALL_OW 318
13927: IFFALSE 13938
// ComWalk ( un ) ;
13929: LD_VAR 0 2
13933: PPUSH
13934: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13938: LD_VAR 0 2
13942: PPUSH
13943: LD_INT 8
13945: PPUSH
13946: CALL_OW 336
// end ;
13950: PPOPN 3
13952: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13953: LD_EXP 32
13957: PUSH
13958: LD_EXP 76
13962: AND
13963: IFFALSE 14107
13965: GO 13967
13967: DISABLE
13968: LD_INT 0
13970: PPUSH
13971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13972: LD_ADDR_VAR 0 2
13976: PUSH
13977: LD_INT 22
13979: PUSH
13980: LD_OWVAR 2
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 2
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 2
14001: PUSH
14002: LD_INT 34
14004: PUSH
14005: LD_INT 12
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 34
14014: PUSH
14015: LD_INT 51
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 34
14024: PUSH
14025: LD_INT 32
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: PPUSH
14043: CALL_OW 69
14047: ST_TO_ADDR
// if not tmp then
14048: LD_VAR 0 2
14052: NOT
14053: IFFALSE 14057
// exit ;
14055: GO 14107
// for i in tmp do
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: LD_VAR 0 2
14066: PUSH
14067: FOR_IN
14068: IFFALSE 14105
// if GetCargo ( i , mat_artifact ) = 0 then
14070: LD_VAR 0 1
14074: PPUSH
14075: LD_INT 4
14077: PPUSH
14078: CALL_OW 289
14082: PUSH
14083: LD_INT 0
14085: EQUAL
14086: IFFALSE 14103
// SetCargo ( i , mat_siberit , 100 ) ;
14088: LD_VAR 0 1
14092: PPUSH
14093: LD_INT 3
14095: PPUSH
14096: LD_INT 100
14098: PPUSH
14099: CALL_OW 290
14103: GO 14067
14105: POP
14106: POP
// end ;
14107: PPOPN 2
14109: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14110: LD_EXP 32
14114: PUSH
14115: LD_EXP 77
14119: AND
14120: IFFALSE 14303
14122: GO 14124
14124: DISABLE
14125: LD_INT 0
14127: PPUSH
14128: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14129: LD_ADDR_VAR 0 2
14133: PUSH
14134: LD_INT 22
14136: PUSH
14137: LD_OWVAR 2
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PPUSH
14146: CALL_OW 69
14150: ST_TO_ADDR
// if not tmp then
14151: LD_VAR 0 2
14155: NOT
14156: IFFALSE 14160
// exit ;
14158: GO 14303
// for i := 1 to 2 do
14160: LD_ADDR_VAR 0 1
14164: PUSH
14165: DOUBLE
14166: LD_INT 1
14168: DEC
14169: ST_TO_ADDR
14170: LD_INT 2
14172: PUSH
14173: FOR_TO
14174: IFFALSE 14301
// begin uc_side := your_side ;
14176: LD_ADDR_OWVAR 20
14180: PUSH
14181: LD_OWVAR 2
14185: ST_TO_ADDR
// uc_nation := nation_american ;
14186: LD_ADDR_OWVAR 21
14190: PUSH
14191: LD_INT 1
14193: ST_TO_ADDR
// vc_chassis := us_morphling ;
14194: LD_ADDR_OWVAR 37
14198: PUSH
14199: LD_INT 5
14201: ST_TO_ADDR
// vc_engine := engine_siberite ;
14202: LD_ADDR_OWVAR 39
14206: PUSH
14207: LD_INT 3
14209: ST_TO_ADDR
// vc_control := control_computer ;
14210: LD_ADDR_OWVAR 38
14214: PUSH
14215: LD_INT 3
14217: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14218: LD_ADDR_OWVAR 40
14222: PUSH
14223: LD_INT 10
14225: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14226: LD_VAR 0 2
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: CALL_OW 310
14239: NOT
14240: IFFALSE 14287
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14242: CALL_OW 45
14246: PPUSH
14247: LD_VAR 0 2
14251: PUSH
14252: LD_INT 1
14254: ARRAY
14255: PPUSH
14256: CALL_OW 250
14260: PPUSH
14261: LD_VAR 0 2
14265: PUSH
14266: LD_INT 1
14268: ARRAY
14269: PPUSH
14270: CALL_OW 251
14274: PPUSH
14275: LD_INT 12
14277: PPUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 50
14285: GO 14299
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14287: CALL_OW 45
14291: PPUSH
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 51
// end ;
14299: GO 14173
14301: POP
14302: POP
// end ;
14303: PPOPN 2
14305: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14306: LD_EXP 32
14310: PUSH
14311: LD_EXP 78
14315: AND
14316: IFFALSE 14538
14318: GO 14320
14320: DISABLE
14321: LD_INT 0
14323: PPUSH
14324: PPUSH
14325: PPUSH
14326: PPUSH
14327: PPUSH
14328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14329: LD_ADDR_VAR 0 6
14333: PUSH
14334: LD_INT 22
14336: PUSH
14337: LD_OWVAR 2
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 21
14348: PUSH
14349: LD_INT 1
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 3
14358: PUSH
14359: LD_INT 23
14361: PUSH
14362: LD_INT 0
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: ST_TO_ADDR
// if not tmp then
14383: LD_VAR 0 6
14387: NOT
14388: IFFALSE 14392
// exit ;
14390: GO 14538
// s1 := rand ( 1 , 4 ) ;
14392: LD_ADDR_VAR 0 2
14396: PUSH
14397: LD_INT 1
14399: PPUSH
14400: LD_INT 4
14402: PPUSH
14403: CALL_OW 12
14407: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14408: LD_ADDR_VAR 0 4
14412: PUSH
14413: LD_VAR 0 6
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: PPUSH
14422: LD_VAR 0 2
14426: PPUSH
14427: CALL_OW 259
14431: ST_TO_ADDR
// if s1 = 1 then
14432: LD_VAR 0 2
14436: PUSH
14437: LD_INT 1
14439: EQUAL
14440: IFFALSE 14460
// s2 := rand ( 2 , 4 ) else
14442: LD_ADDR_VAR 0 3
14446: PUSH
14447: LD_INT 2
14449: PPUSH
14450: LD_INT 4
14452: PPUSH
14453: CALL_OW 12
14457: ST_TO_ADDR
14458: GO 14468
// s2 := 1 ;
14460: LD_ADDR_VAR 0 3
14464: PUSH
14465: LD_INT 1
14467: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14468: LD_ADDR_VAR 0 5
14472: PUSH
14473: LD_VAR 0 6
14477: PUSH
14478: LD_INT 1
14480: ARRAY
14481: PPUSH
14482: LD_VAR 0 3
14486: PPUSH
14487: CALL_OW 259
14491: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14492: LD_VAR 0 6
14496: PUSH
14497: LD_INT 1
14499: ARRAY
14500: PPUSH
14501: LD_VAR 0 2
14505: PPUSH
14506: LD_VAR 0 5
14510: PPUSH
14511: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14515: LD_VAR 0 6
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: PPUSH
14524: LD_VAR 0 3
14528: PPUSH
14529: LD_VAR 0 4
14533: PPUSH
14534: CALL_OW 237
// end ;
14538: PPOPN 6
14540: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14541: LD_EXP 32
14545: PUSH
14546: LD_EXP 79
14550: AND
14551: IFFALSE 14630
14553: GO 14555
14555: DISABLE
14556: LD_INT 0
14558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14559: LD_ADDR_VAR 0 1
14563: PUSH
14564: LD_INT 22
14566: PUSH
14567: LD_OWVAR 2
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 30
14578: PUSH
14579: LD_INT 3
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PPUSH
14590: CALL_OW 69
14594: ST_TO_ADDR
// if not tmp then
14595: LD_VAR 0 1
14599: NOT
14600: IFFALSE 14604
// exit ;
14602: GO 14630
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14604: LD_VAR 0 1
14608: PUSH
14609: LD_INT 1
14611: PPUSH
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 12
14621: ARRAY
14622: PPUSH
14623: LD_INT 1
14625: PPUSH
14626: CALL_OW 234
// end ;
14630: PPOPN 1
14632: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14633: LD_EXP 32
14637: PUSH
14638: LD_EXP 80
14642: AND
14643: IFFALSE 14755
14645: GO 14647
14647: DISABLE
14648: LD_INT 0
14650: PPUSH
14651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14652: LD_ADDR_VAR 0 2
14656: PUSH
14657: LD_INT 22
14659: PUSH
14660: LD_OWVAR 2
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 2
14671: PUSH
14672: LD_INT 30
14674: PUSH
14675: LD_INT 27
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 30
14684: PUSH
14685: LD_INT 26
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 30
14694: PUSH
14695: LD_INT 28
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PPUSH
14712: CALL_OW 69
14716: ST_TO_ADDR
// if not tmp then
14717: LD_VAR 0 2
14721: NOT
14722: IFFALSE 14726
// exit ;
14724: GO 14755
// for i in tmp do
14726: LD_ADDR_VAR 0 1
14730: PUSH
14731: LD_VAR 0 2
14735: PUSH
14736: FOR_IN
14737: IFFALSE 14753
// SetLives ( i , 1 ) ;
14739: LD_VAR 0 1
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: CALL_OW 234
14751: GO 14736
14753: POP
14754: POP
// end ;
14755: PPOPN 2
14757: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14758: LD_EXP 32
14762: PUSH
14763: LD_EXP 81
14767: AND
14768: IFFALSE 15055
14770: GO 14772
14772: DISABLE
14773: LD_INT 0
14775: PPUSH
14776: PPUSH
14777: PPUSH
// begin i := rand ( 1 , 7 ) ;
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_INT 1
14785: PPUSH
14786: LD_INT 7
14788: PPUSH
14789: CALL_OW 12
14793: ST_TO_ADDR
// case i of 1 :
14794: LD_VAR 0 1
14798: PUSH
14799: LD_INT 1
14801: DOUBLE
14802: EQUAL
14803: IFTRUE 14807
14805: GO 14817
14807: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14808: LD_STRING earthquake(getX(game), 0, 32)
14810: PPUSH
14811: CALL_OW 559
14815: GO 15055
14817: LD_INT 2
14819: DOUBLE
14820: EQUAL
14821: IFTRUE 14825
14823: GO 14839
14825: POP
// begin ToLua ( displayStucuk(); ) ;
14826: LD_STRING displayStucuk();
14828: PPUSH
14829: CALL_OW 559
// ResetFog ;
14833: CALL_OW 335
// end ; 3 :
14837: GO 15055
14839: LD_INT 3
14841: DOUBLE
14842: EQUAL
14843: IFTRUE 14847
14845: GO 14951
14847: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14848: LD_ADDR_VAR 0 2
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_OWVAR 2
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 25
14867: PUSH
14868: LD_INT 1
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 69
14883: ST_TO_ADDR
// if not tmp then
14884: LD_VAR 0 2
14888: NOT
14889: IFFALSE 14893
// exit ;
14891: GO 15055
// un := tmp [ rand ( 1 , tmp ) ] ;
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: LD_VAR 0 2
14902: PUSH
14903: LD_INT 1
14905: PPUSH
14906: LD_VAR 0 2
14910: PPUSH
14911: CALL_OW 12
14915: ARRAY
14916: ST_TO_ADDR
// if Crawls ( un ) then
14917: LD_VAR 0 3
14921: PPUSH
14922: CALL_OW 318
14926: IFFALSE 14937
// ComWalk ( un ) ;
14928: LD_VAR 0 3
14932: PPUSH
14933: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14937: LD_VAR 0 3
14941: PPUSH
14942: LD_INT 8
14944: PPUSH
14945: CALL_OW 336
// end ; 4 :
14949: GO 15055
14951: LD_INT 4
14953: DOUBLE
14954: EQUAL
14955: IFTRUE 14959
14957: GO 15033
14959: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14960: LD_ADDR_VAR 0 2
14964: PUSH
14965: LD_INT 22
14967: PUSH
14968: LD_OWVAR 2
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 30
14979: PUSH
14980: LD_INT 29
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PPUSH
14991: CALL_OW 69
14995: ST_TO_ADDR
// if not tmp then
14996: LD_VAR 0 2
15000: NOT
15001: IFFALSE 15005
// exit ;
15003: GO 15055
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15005: LD_VAR 0 2
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: PPUSH
15014: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15018: LD_VAR 0 2
15022: PUSH
15023: LD_INT 1
15025: ARRAY
15026: PPUSH
15027: CALL_OW 65
// end ; 5 .. 7 :
15031: GO 15055
15033: LD_INT 5
15035: DOUBLE
15036: GREATEREQUAL
15037: IFFALSE 15045
15039: LD_INT 7
15041: DOUBLE
15042: LESSEQUAL
15043: IFTRUE 15047
15045: GO 15054
15047: POP
// StreamSibBomb ; end ;
15048: CALL 11292 0 0
15052: GO 15055
15054: POP
// end ;
15055: PPOPN 3
15057: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15058: LD_EXP 32
15062: PUSH
15063: LD_EXP 82
15067: AND
15068: IFFALSE 15224
15070: GO 15072
15072: DISABLE
15073: LD_INT 0
15075: PPUSH
15076: PPUSH
15077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: LD_INT 81
15085: PUSH
15086: LD_OWVAR 2
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: LD_INT 2
15097: PUSH
15098: LD_INT 21
15100: PUSH
15101: LD_INT 1
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 21
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 69
15131: ST_TO_ADDR
// if not tmp then
15132: LD_VAR 0 2
15136: NOT
15137: IFFALSE 15141
// exit ;
15139: GO 15224
// p := 0 ;
15141: LD_ADDR_VAR 0 3
15145: PUSH
15146: LD_INT 0
15148: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15149: LD_INT 35
15151: PPUSH
15152: CALL_OW 67
// p := p + 1 ;
15156: LD_ADDR_VAR 0 3
15160: PUSH
15161: LD_VAR 0 3
15165: PUSH
15166: LD_INT 1
15168: PLUS
15169: ST_TO_ADDR
// for i in tmp do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_VAR 0 2
15179: PUSH
15180: FOR_IN
15181: IFFALSE 15212
// if GetLives ( i ) < 1000 then
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 256
15192: PUSH
15193: LD_INT 1000
15195: LESS
15196: IFFALSE 15210
// SetLives ( i , 1000 ) ;
15198: LD_VAR 0 1
15202: PPUSH
15203: LD_INT 1000
15205: PPUSH
15206: CALL_OW 234
15210: GO 15180
15212: POP
15213: POP
// until p > 20 ;
15214: LD_VAR 0 3
15218: PUSH
15219: LD_INT 20
15221: GREATER
15222: IFFALSE 15149
// end ;
15224: PPOPN 3
15226: END
// every 0 0$1 trigger StreamModeActive and sTime do
15227: LD_EXP 32
15231: PUSH
15232: LD_EXP 83
15236: AND
15237: IFFALSE 15272
15239: GO 15241
15241: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15242: LD_INT 28
15244: PPUSH
15245: LD_OWVAR 2
15249: PPUSH
15250: LD_INT 2
15252: PPUSH
15253: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15257: LD_INT 30
15259: PPUSH
15260: LD_OWVAR 2
15264: PPUSH
15265: LD_INT 2
15267: PPUSH
15268: CALL_OW 322
// end ;
15272: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15273: LD_EXP 32
15277: PUSH
15278: LD_EXP 84
15282: AND
15283: IFFALSE 15404
15285: GO 15287
15287: DISABLE
15288: LD_INT 0
15290: PPUSH
15291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15292: LD_ADDR_VAR 0 2
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_OWVAR 2
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 21
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: LD_INT 23
15324: PUSH
15325: LD_INT 0
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: ST_TO_ADDR
// if not tmp then
15346: LD_VAR 0 2
15350: NOT
15351: IFFALSE 15355
// exit ;
15353: GO 15404
// for i in tmp do
15355: LD_ADDR_VAR 0 1
15359: PUSH
15360: LD_VAR 0 2
15364: PUSH
15365: FOR_IN
15366: IFFALSE 15402
// begin if Crawls ( i ) then
15368: LD_VAR 0 1
15372: PPUSH
15373: CALL_OW 318
15377: IFFALSE 15388
// ComWalk ( i ) ;
15379: LD_VAR 0 1
15383: PPUSH
15384: CALL_OW 138
// SetClass ( i , 2 ) ;
15388: LD_VAR 0 1
15392: PPUSH
15393: LD_INT 2
15395: PPUSH
15396: CALL_OW 336
// end ;
15400: GO 15365
15402: POP
15403: POP
// end ;
15404: PPOPN 2
15406: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15407: LD_EXP 32
15411: PUSH
15412: LD_EXP 85
15416: AND
15417: IFFALSE 15705
15419: GO 15421
15421: DISABLE
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15427: LD_OWVAR 2
15431: PPUSH
15432: LD_INT 9
15434: PPUSH
15435: LD_INT 1
15437: PPUSH
15438: LD_INT 1
15440: PPUSH
15441: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15445: LD_INT 9
15447: PPUSH
15448: LD_OWVAR 2
15452: PPUSH
15453: CALL_OW 343
// uc_side := 9 ;
15457: LD_ADDR_OWVAR 20
15461: PUSH
15462: LD_INT 9
15464: ST_TO_ADDR
// uc_nation := 2 ;
15465: LD_ADDR_OWVAR 21
15469: PUSH
15470: LD_INT 2
15472: ST_TO_ADDR
// hc_name := Dark Warrior ;
15473: LD_ADDR_OWVAR 26
15477: PUSH
15478: LD_STRING Dark Warrior
15480: ST_TO_ADDR
// hc_gallery :=  ;
15481: LD_ADDR_OWVAR 33
15485: PUSH
15486: LD_STRING 
15488: ST_TO_ADDR
// hc_noskilllimit := true ;
15489: LD_ADDR_OWVAR 76
15493: PUSH
15494: LD_INT 1
15496: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15497: LD_ADDR_OWVAR 31
15501: PUSH
15502: LD_INT 30
15504: PUSH
15505: LD_INT 30
15507: PUSH
15508: LD_INT 30
15510: PUSH
15511: LD_INT 30
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: ST_TO_ADDR
// un := CreateHuman ;
15520: LD_ADDR_VAR 0 3
15524: PUSH
15525: CALL_OW 44
15529: ST_TO_ADDR
// hc_noskilllimit := false ;
15530: LD_ADDR_OWVAR 76
15534: PUSH
15535: LD_INT 0
15537: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15538: LD_VAR 0 3
15542: PPUSH
15543: LD_INT 1
15545: PPUSH
15546: CALL_OW 51
// ToLua ( playRanger() ) ;
15550: LD_STRING playRanger()
15552: PPUSH
15553: CALL_OW 559
// p := 0 ;
15557: LD_ADDR_VAR 0 2
15561: PUSH
15562: LD_INT 0
15564: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15565: LD_INT 35
15567: PPUSH
15568: CALL_OW 67
// p := p + 1 ;
15572: LD_ADDR_VAR 0 2
15576: PUSH
15577: LD_VAR 0 2
15581: PUSH
15582: LD_INT 1
15584: PLUS
15585: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15586: LD_VAR 0 3
15590: PPUSH
15591: CALL_OW 256
15595: PUSH
15596: LD_INT 1000
15598: LESS
15599: IFFALSE 15613
// SetLives ( un , 1000 ) ;
15601: LD_VAR 0 3
15605: PPUSH
15606: LD_INT 1000
15608: PPUSH
15609: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15613: LD_VAR 0 3
15617: PPUSH
15618: LD_INT 81
15620: PUSH
15621: LD_OWVAR 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 91
15632: PUSH
15633: LD_VAR 0 3
15637: PUSH
15638: LD_INT 30
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PPUSH
15650: CALL_OW 69
15654: PPUSH
15655: LD_VAR 0 3
15659: PPUSH
15660: CALL_OW 74
15664: PPUSH
15665: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
15669: LD_VAR 0 2
15673: PUSH
15674: LD_INT 80
15676: GREATER
15677: PUSH
15678: LD_VAR 0 3
15682: PPUSH
15683: CALL_OW 301
15687: OR
15688: IFFALSE 15565
// if un then
15690: LD_VAR 0 3
15694: IFFALSE 15705
// RemoveUnit ( un ) ;
15696: LD_VAR 0 3
15700: PPUSH
15701: CALL_OW 64
// end ;
15705: PPOPN 3
15707: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
15708: LD_EXP 86
15712: IFFALSE 15828
15714: GO 15716
15716: DISABLE
15717: LD_INT 0
15719: PPUSH
15720: PPUSH
15721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15722: LD_ADDR_VAR 0 2
15726: PUSH
15727: LD_INT 81
15729: PUSH
15730: LD_OWVAR 2
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 21
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PPUSH
15753: CALL_OW 69
15757: ST_TO_ADDR
// ToLua ( playComputer() ) ;
15758: LD_STRING playComputer()
15760: PPUSH
15761: CALL_OW 559
// if not tmp then
15765: LD_VAR 0 2
15769: NOT
15770: IFFALSE 15774
// exit ;
15772: GO 15828
// for i in tmp do
15774: LD_ADDR_VAR 0 1
15778: PUSH
15779: LD_VAR 0 2
15783: PUSH
15784: FOR_IN
15785: IFFALSE 15826
// for j := 1 to 4 do
15787: LD_ADDR_VAR 0 3
15791: PUSH
15792: DOUBLE
15793: LD_INT 1
15795: DEC
15796: ST_TO_ADDR
15797: LD_INT 4
15799: PUSH
15800: FOR_TO
15801: IFFALSE 15822
// SetSkill ( i , j , 10 ) ;
15803: LD_VAR 0 1
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_INT 10
15815: PPUSH
15816: CALL_OW 237
15820: GO 15800
15822: POP
15823: POP
15824: GO 15784
15826: POP
15827: POP
// end ;
15828: PPOPN 3
15830: END
// every 0 0$1 trigger s30 do var i , tmp ;
15831: LD_EXP 87
15835: IFFALSE 15904
15837: GO 15839
15839: DISABLE
15840: LD_INT 0
15842: PPUSH
15843: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15844: LD_ADDR_VAR 0 2
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_OWVAR 2
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: ST_TO_ADDR
// if not tmp then
15866: LD_VAR 0 2
15870: NOT
15871: IFFALSE 15875
// exit ;
15873: GO 15904
// for i in tmp do
15875: LD_ADDR_VAR 0 1
15879: PUSH
15880: LD_VAR 0 2
15884: PUSH
15885: FOR_IN
15886: IFFALSE 15902
// SetLives ( i , 300 ) ;
15888: LD_VAR 0 1
15892: PPUSH
15893: LD_INT 300
15895: PPUSH
15896: CALL_OW 234
15900: GO 15885
15902: POP
15903: POP
// end ;
15904: PPOPN 2
15906: END
// every 0 0$1 trigger s60 do var i , tmp ;
15907: LD_EXP 88
15911: IFFALSE 15980
15913: GO 15915
15915: DISABLE
15916: LD_INT 0
15918: PPUSH
15919: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15920: LD_ADDR_VAR 0 2
15924: PUSH
15925: LD_INT 22
15927: PUSH
15928: LD_OWVAR 2
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 69
15941: ST_TO_ADDR
// if not tmp then
15942: LD_VAR 0 2
15946: NOT
15947: IFFALSE 15951
// exit ;
15949: GO 15980
// for i in tmp do
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_VAR 0 2
15960: PUSH
15961: FOR_IN
15962: IFFALSE 15978
// SetLives ( i , 600 ) ;
15964: LD_VAR 0 1
15968: PPUSH
15969: LD_INT 600
15971: PPUSH
15972: CALL_OW 234
15976: GO 15961
15978: POP
15979: POP
// end ;
15980: PPOPN 2
15982: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15983: LD_INT 0
15985: PPUSH
// case cmd of 301 :
15986: LD_VAR 0 1
15990: PUSH
15991: LD_INT 301
15993: DOUBLE
15994: EQUAL
15995: IFTRUE 15999
15997: GO 16031
15999: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16000: LD_VAR 0 6
16004: PPUSH
16005: LD_VAR 0 7
16009: PPUSH
16010: LD_VAR 0 8
16014: PPUSH
16015: LD_VAR 0 4
16019: PPUSH
16020: LD_VAR 0 5
16024: PPUSH
16025: CALL 17232 0 5
16029: GO 16152
16031: LD_INT 302
16033: DOUBLE
16034: EQUAL
16035: IFTRUE 16039
16037: GO 16076
16039: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16040: LD_VAR 0 6
16044: PPUSH
16045: LD_VAR 0 7
16049: PPUSH
16050: LD_VAR 0 8
16054: PPUSH
16055: LD_VAR 0 9
16059: PPUSH
16060: LD_VAR 0 4
16064: PPUSH
16065: LD_VAR 0 5
16069: PPUSH
16070: CALL 17323 0 6
16074: GO 16152
16076: LD_INT 303
16078: DOUBLE
16079: EQUAL
16080: IFTRUE 16084
16082: GO 16121
16084: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16085: LD_VAR 0 6
16089: PPUSH
16090: LD_VAR 0 7
16094: PPUSH
16095: LD_VAR 0 8
16099: PPUSH
16100: LD_VAR 0 9
16104: PPUSH
16105: LD_VAR 0 4
16109: PPUSH
16110: LD_VAR 0 5
16114: PPUSH
16115: CALL 16157 0 6
16119: GO 16152
16121: LD_INT 304
16123: DOUBLE
16124: EQUAL
16125: IFTRUE 16129
16127: GO 16151
16129: POP
// hHackTeleport ( unit , x , y ) ; end ;
16130: LD_VAR 0 2
16134: PPUSH
16135: LD_VAR 0 4
16139: PPUSH
16140: LD_VAR 0 5
16144: PPUSH
16145: CALL 17916 0 3
16149: GO 16152
16151: POP
// end ;
16152: LD_VAR 0 12
16156: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16157: LD_INT 0
16159: PPUSH
16160: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16161: LD_VAR 0 1
16165: PUSH
16166: LD_INT 1
16168: LESS
16169: PUSH
16170: LD_VAR 0 1
16174: PUSH
16175: LD_INT 3
16177: GREATER
16178: OR
16179: PUSH
16180: LD_VAR 0 5
16184: PPUSH
16185: LD_VAR 0 6
16189: PPUSH
16190: CALL_OW 428
16194: OR
16195: IFFALSE 16199
// exit ;
16197: GO 16919
// uc_side := your_side ;
16199: LD_ADDR_OWVAR 20
16203: PUSH
16204: LD_OWVAR 2
16208: ST_TO_ADDR
// uc_nation := nation ;
16209: LD_ADDR_OWVAR 21
16213: PUSH
16214: LD_VAR 0 1
16218: ST_TO_ADDR
// bc_level = 1 ;
16219: LD_ADDR_OWVAR 43
16223: PUSH
16224: LD_INT 1
16226: ST_TO_ADDR
// case btype of 1 :
16227: LD_VAR 0 2
16231: PUSH
16232: LD_INT 1
16234: DOUBLE
16235: EQUAL
16236: IFTRUE 16240
16238: GO 16251
16240: POP
// bc_type := b_depot ; 2 :
16241: LD_ADDR_OWVAR 42
16245: PUSH
16246: LD_INT 0
16248: ST_TO_ADDR
16249: GO 16863
16251: LD_INT 2
16253: DOUBLE
16254: EQUAL
16255: IFTRUE 16259
16257: GO 16270
16259: POP
// bc_type := b_warehouse ; 3 :
16260: LD_ADDR_OWVAR 42
16264: PUSH
16265: LD_INT 1
16267: ST_TO_ADDR
16268: GO 16863
16270: LD_INT 3
16272: DOUBLE
16273: EQUAL
16274: IFTRUE 16278
16276: GO 16289
16278: POP
// bc_type := b_lab ; 4 .. 9 :
16279: LD_ADDR_OWVAR 42
16283: PUSH
16284: LD_INT 6
16286: ST_TO_ADDR
16287: GO 16863
16289: LD_INT 4
16291: DOUBLE
16292: GREATEREQUAL
16293: IFFALSE 16301
16295: LD_INT 9
16297: DOUBLE
16298: LESSEQUAL
16299: IFTRUE 16303
16301: GO 16355
16303: POP
// begin bc_type := b_lab_half ;
16304: LD_ADDR_OWVAR 42
16308: PUSH
16309: LD_INT 7
16311: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16312: LD_ADDR_OWVAR 44
16316: PUSH
16317: LD_INT 10
16319: PUSH
16320: LD_INT 11
16322: PUSH
16323: LD_INT 12
16325: PUSH
16326: LD_INT 15
16328: PUSH
16329: LD_INT 14
16331: PUSH
16332: LD_INT 13
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: PUSH
16343: LD_VAR 0 2
16347: PUSH
16348: LD_INT 3
16350: MINUS
16351: ARRAY
16352: ST_TO_ADDR
// end ; 10 .. 13 :
16353: GO 16863
16355: LD_INT 10
16357: DOUBLE
16358: GREATEREQUAL
16359: IFFALSE 16367
16361: LD_INT 13
16363: DOUBLE
16364: LESSEQUAL
16365: IFTRUE 16369
16367: GO 16446
16369: POP
// begin bc_type := b_lab_full ;
16370: LD_ADDR_OWVAR 42
16374: PUSH
16375: LD_INT 8
16377: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16378: LD_ADDR_OWVAR 44
16382: PUSH
16383: LD_INT 10
16385: PUSH
16386: LD_INT 12
16388: PUSH
16389: LD_INT 14
16391: PUSH
16392: LD_INT 13
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: PUSH
16401: LD_VAR 0 2
16405: PUSH
16406: LD_INT 9
16408: MINUS
16409: ARRAY
16410: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16411: LD_ADDR_OWVAR 45
16415: PUSH
16416: LD_INT 11
16418: PUSH
16419: LD_INT 15
16421: PUSH
16422: LD_INT 12
16424: PUSH
16425: LD_INT 15
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: PUSH
16434: LD_VAR 0 2
16438: PUSH
16439: LD_INT 9
16441: MINUS
16442: ARRAY
16443: ST_TO_ADDR
// end ; 14 :
16444: GO 16863
16446: LD_INT 14
16448: DOUBLE
16449: EQUAL
16450: IFTRUE 16454
16452: GO 16465
16454: POP
// bc_type := b_workshop ; 15 :
16455: LD_ADDR_OWVAR 42
16459: PUSH
16460: LD_INT 2
16462: ST_TO_ADDR
16463: GO 16863
16465: LD_INT 15
16467: DOUBLE
16468: EQUAL
16469: IFTRUE 16473
16471: GO 16484
16473: POP
// bc_type := b_factory ; 16 :
16474: LD_ADDR_OWVAR 42
16478: PUSH
16479: LD_INT 3
16481: ST_TO_ADDR
16482: GO 16863
16484: LD_INT 16
16486: DOUBLE
16487: EQUAL
16488: IFTRUE 16492
16490: GO 16503
16492: POP
// bc_type := b_ext_gun ; 17 :
16493: LD_ADDR_OWVAR 42
16497: PUSH
16498: LD_INT 17
16500: ST_TO_ADDR
16501: GO 16863
16503: LD_INT 17
16505: DOUBLE
16506: EQUAL
16507: IFTRUE 16511
16509: GO 16539
16511: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16512: LD_ADDR_OWVAR 42
16516: PUSH
16517: LD_INT 19
16519: PUSH
16520: LD_INT 23
16522: PUSH
16523: LD_INT 19
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: LD_VAR 0 1
16535: ARRAY
16536: ST_TO_ADDR
16537: GO 16863
16539: LD_INT 18
16541: DOUBLE
16542: EQUAL
16543: IFTRUE 16547
16545: GO 16558
16547: POP
// bc_type := b_ext_radar ; 19 :
16548: LD_ADDR_OWVAR 42
16552: PUSH
16553: LD_INT 20
16555: ST_TO_ADDR
16556: GO 16863
16558: LD_INT 19
16560: DOUBLE
16561: EQUAL
16562: IFTRUE 16566
16564: GO 16577
16566: POP
// bc_type := b_ext_radio ; 20 :
16567: LD_ADDR_OWVAR 42
16571: PUSH
16572: LD_INT 22
16574: ST_TO_ADDR
16575: GO 16863
16577: LD_INT 20
16579: DOUBLE
16580: EQUAL
16581: IFTRUE 16585
16583: GO 16596
16585: POP
// bc_type := b_ext_siberium ; 21 :
16586: LD_ADDR_OWVAR 42
16590: PUSH
16591: LD_INT 21
16593: ST_TO_ADDR
16594: GO 16863
16596: LD_INT 21
16598: DOUBLE
16599: EQUAL
16600: IFTRUE 16604
16602: GO 16615
16604: POP
// bc_type := b_ext_computer ; 22 :
16605: LD_ADDR_OWVAR 42
16609: PUSH
16610: LD_INT 24
16612: ST_TO_ADDR
16613: GO 16863
16615: LD_INT 22
16617: DOUBLE
16618: EQUAL
16619: IFTRUE 16623
16621: GO 16634
16623: POP
// bc_type := b_ext_track ; 23 :
16624: LD_ADDR_OWVAR 42
16628: PUSH
16629: LD_INT 16
16631: ST_TO_ADDR
16632: GO 16863
16634: LD_INT 23
16636: DOUBLE
16637: EQUAL
16638: IFTRUE 16642
16640: GO 16653
16642: POP
// bc_type := b_ext_laser ; 24 :
16643: LD_ADDR_OWVAR 42
16647: PUSH
16648: LD_INT 25
16650: ST_TO_ADDR
16651: GO 16863
16653: LD_INT 24
16655: DOUBLE
16656: EQUAL
16657: IFTRUE 16661
16659: GO 16672
16661: POP
// bc_type := b_control_tower ; 25 :
16662: LD_ADDR_OWVAR 42
16666: PUSH
16667: LD_INT 36
16669: ST_TO_ADDR
16670: GO 16863
16672: LD_INT 25
16674: DOUBLE
16675: EQUAL
16676: IFTRUE 16680
16678: GO 16691
16680: POP
// bc_type := b_breastwork ; 26 :
16681: LD_ADDR_OWVAR 42
16685: PUSH
16686: LD_INT 31
16688: ST_TO_ADDR
16689: GO 16863
16691: LD_INT 26
16693: DOUBLE
16694: EQUAL
16695: IFTRUE 16699
16697: GO 16710
16699: POP
// bc_type := b_bunker ; 27 :
16700: LD_ADDR_OWVAR 42
16704: PUSH
16705: LD_INT 32
16707: ST_TO_ADDR
16708: GO 16863
16710: LD_INT 27
16712: DOUBLE
16713: EQUAL
16714: IFTRUE 16718
16716: GO 16729
16718: POP
// bc_type := b_turret ; 28 :
16719: LD_ADDR_OWVAR 42
16723: PUSH
16724: LD_INT 33
16726: ST_TO_ADDR
16727: GO 16863
16729: LD_INT 28
16731: DOUBLE
16732: EQUAL
16733: IFTRUE 16737
16735: GO 16748
16737: POP
// bc_type := b_armoury ; 29 :
16738: LD_ADDR_OWVAR 42
16742: PUSH
16743: LD_INT 4
16745: ST_TO_ADDR
16746: GO 16863
16748: LD_INT 29
16750: DOUBLE
16751: EQUAL
16752: IFTRUE 16756
16754: GO 16767
16756: POP
// bc_type := b_barracks ; 30 :
16757: LD_ADDR_OWVAR 42
16761: PUSH
16762: LD_INT 5
16764: ST_TO_ADDR
16765: GO 16863
16767: LD_INT 30
16769: DOUBLE
16770: EQUAL
16771: IFTRUE 16775
16773: GO 16786
16775: POP
// bc_type := b_solar_power ; 31 :
16776: LD_ADDR_OWVAR 42
16780: PUSH
16781: LD_INT 27
16783: ST_TO_ADDR
16784: GO 16863
16786: LD_INT 31
16788: DOUBLE
16789: EQUAL
16790: IFTRUE 16794
16792: GO 16805
16794: POP
// bc_type := b_oil_power ; 32 :
16795: LD_ADDR_OWVAR 42
16799: PUSH
16800: LD_INT 26
16802: ST_TO_ADDR
16803: GO 16863
16805: LD_INT 32
16807: DOUBLE
16808: EQUAL
16809: IFTRUE 16813
16811: GO 16824
16813: POP
// bc_type := b_siberite_power ; 33 :
16814: LD_ADDR_OWVAR 42
16818: PUSH
16819: LD_INT 28
16821: ST_TO_ADDR
16822: GO 16863
16824: LD_INT 33
16826: DOUBLE
16827: EQUAL
16828: IFTRUE 16832
16830: GO 16843
16832: POP
// bc_type := b_oil_mine ; 34 :
16833: LD_ADDR_OWVAR 42
16837: PUSH
16838: LD_INT 29
16840: ST_TO_ADDR
16841: GO 16863
16843: LD_INT 34
16845: DOUBLE
16846: EQUAL
16847: IFTRUE 16851
16849: GO 16862
16851: POP
// bc_type := b_siberite_mine ; end ;
16852: LD_ADDR_OWVAR 42
16856: PUSH
16857: LD_INT 30
16859: ST_TO_ADDR
16860: GO 16863
16862: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16863: LD_ADDR_VAR 0 8
16867: PUSH
16868: LD_VAR 0 5
16872: PPUSH
16873: LD_VAR 0 6
16877: PPUSH
16878: LD_VAR 0 3
16882: PPUSH
16883: CALL_OW 47
16887: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16888: LD_OWVAR 42
16892: PUSH
16893: LD_INT 32
16895: PUSH
16896: LD_INT 33
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: IN
16903: IFFALSE 16919
// PlaceWeaponTurret ( b , weapon ) ;
16905: LD_VAR 0 8
16909: PPUSH
16910: LD_VAR 0 4
16914: PPUSH
16915: CALL_OW 431
// end ;
16919: LD_VAR 0 7
16923: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16924: LD_INT 0
16926: PPUSH
16927: PPUSH
16928: PPUSH
16929: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16930: LD_ADDR_VAR 0 4
16934: PUSH
16935: LD_INT 22
16937: PUSH
16938: LD_OWVAR 2
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: LD_INT 30
16952: PUSH
16953: LD_INT 0
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 30
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PPUSH
16979: CALL_OW 69
16983: ST_TO_ADDR
// if not tmp then
16984: LD_VAR 0 4
16988: NOT
16989: IFFALSE 16993
// exit ;
16991: GO 17052
// for i in tmp do
16993: LD_ADDR_VAR 0 2
16997: PUSH
16998: LD_VAR 0 4
17002: PUSH
17003: FOR_IN
17004: IFFALSE 17050
// for j = 1 to 3 do
17006: LD_ADDR_VAR 0 3
17010: PUSH
17011: DOUBLE
17012: LD_INT 1
17014: DEC
17015: ST_TO_ADDR
17016: LD_INT 3
17018: PUSH
17019: FOR_TO
17020: IFFALSE 17046
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17022: LD_VAR 0 2
17026: PPUSH
17027: CALL_OW 274
17031: PPUSH
17032: LD_VAR 0 3
17036: PPUSH
17037: LD_INT 99999
17039: PPUSH
17040: CALL_OW 277
17044: GO 17019
17046: POP
17047: POP
17048: GO 17003
17050: POP
17051: POP
// end ;
17052: LD_VAR 0 1
17056: RET
// export function hHackSetLevel10 ; var i , j ; begin
17057: LD_INT 0
17059: PPUSH
17060: PPUSH
17061: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17062: LD_ADDR_VAR 0 2
17066: PUSH
17067: LD_INT 21
17069: PUSH
17070: LD_INT 1
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PPUSH
17077: CALL_OW 69
17081: PUSH
17082: FOR_IN
17083: IFFALSE 17135
// if IsSelected ( i ) then
17085: LD_VAR 0 2
17089: PPUSH
17090: CALL_OW 306
17094: IFFALSE 17133
// begin for j := 1 to 4 do
17096: LD_ADDR_VAR 0 3
17100: PUSH
17101: DOUBLE
17102: LD_INT 1
17104: DEC
17105: ST_TO_ADDR
17106: LD_INT 4
17108: PUSH
17109: FOR_TO
17110: IFFALSE 17131
// SetSkill ( i , j , 10 ) ;
17112: LD_VAR 0 2
17116: PPUSH
17117: LD_VAR 0 3
17121: PPUSH
17122: LD_INT 10
17124: PPUSH
17125: CALL_OW 237
17129: GO 17109
17131: POP
17132: POP
// end ;
17133: GO 17082
17135: POP
17136: POP
// end ;
17137: LD_VAR 0 1
17141: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
17146: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17147: LD_ADDR_VAR 0 2
17151: PUSH
17152: LD_INT 22
17154: PUSH
17155: LD_OWVAR 2
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 21
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 69
17182: PUSH
17183: FOR_IN
17184: IFFALSE 17225
// begin for j := 1 to 4 do
17186: LD_ADDR_VAR 0 3
17190: PUSH
17191: DOUBLE
17192: LD_INT 1
17194: DEC
17195: ST_TO_ADDR
17196: LD_INT 4
17198: PUSH
17199: FOR_TO
17200: IFFALSE 17221
// SetSkill ( i , j , 10 ) ;
17202: LD_VAR 0 2
17206: PPUSH
17207: LD_VAR 0 3
17211: PPUSH
17212: LD_INT 10
17214: PPUSH
17215: CALL_OW 237
17219: GO 17199
17221: POP
17222: POP
// end ;
17223: GO 17183
17225: POP
17226: POP
// end ;
17227: LD_VAR 0 1
17231: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17232: LD_INT 0
17234: PPUSH
// uc_side := your_side ;
17235: LD_ADDR_OWVAR 20
17239: PUSH
17240: LD_OWVAR 2
17244: ST_TO_ADDR
// uc_nation := nation ;
17245: LD_ADDR_OWVAR 21
17249: PUSH
17250: LD_VAR 0 1
17254: ST_TO_ADDR
// InitHc ;
17255: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17259: LD_INT 0
17261: PPUSH
17262: LD_VAR 0 2
17266: PPUSH
17267: LD_VAR 0 3
17271: PPUSH
17272: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17276: LD_VAR 0 4
17280: PPUSH
17281: LD_VAR 0 5
17285: PPUSH
17286: CALL_OW 428
17290: PUSH
17291: LD_INT 0
17293: EQUAL
17294: IFFALSE 17318
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17296: CALL_OW 44
17300: PPUSH
17301: LD_VAR 0 4
17305: PPUSH
17306: LD_VAR 0 5
17310: PPUSH
17311: LD_INT 1
17313: PPUSH
17314: CALL_OW 48
// end ;
17318: LD_VAR 0 6
17322: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17323: LD_INT 0
17325: PPUSH
17326: PPUSH
// uc_side := your_side ;
17327: LD_ADDR_OWVAR 20
17331: PUSH
17332: LD_OWVAR 2
17336: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17337: LD_VAR 0 1
17341: PUSH
17342: LD_INT 1
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 4
17353: PUSH
17354: LD_INT 5
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: IN
17364: IFFALSE 17376
// uc_nation := nation_american else
17366: LD_ADDR_OWVAR 21
17370: PUSH
17371: LD_INT 1
17373: ST_TO_ADDR
17374: GO 17419
// if chassis in [ 11 , 12 , 13 , 14 ] then
17376: LD_VAR 0 1
17380: PUSH
17381: LD_INT 11
17383: PUSH
17384: LD_INT 12
17386: PUSH
17387: LD_INT 13
17389: PUSH
17390: LD_INT 14
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: IN
17399: IFFALSE 17411
// uc_nation := nation_arabian else
17401: LD_ADDR_OWVAR 21
17405: PUSH
17406: LD_INT 2
17408: ST_TO_ADDR
17409: GO 17419
// uc_nation := nation_russian ;
17411: LD_ADDR_OWVAR 21
17415: PUSH
17416: LD_INT 3
17418: ST_TO_ADDR
// vc_chassis := chassis ;
17419: LD_ADDR_OWVAR 37
17423: PUSH
17424: LD_VAR 0 1
17428: ST_TO_ADDR
// vc_engine := engine ;
17429: LD_ADDR_OWVAR 39
17433: PUSH
17434: LD_VAR 0 2
17438: ST_TO_ADDR
// vc_control := control ;
17439: LD_ADDR_OWVAR 38
17443: PUSH
17444: LD_VAR 0 3
17448: ST_TO_ADDR
// vc_weapon := weapon ;
17449: LD_ADDR_OWVAR 40
17453: PUSH
17454: LD_VAR 0 4
17458: ST_TO_ADDR
// un := CreateVehicle ;
17459: LD_ADDR_VAR 0 8
17463: PUSH
17464: CALL_OW 45
17468: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17469: LD_VAR 0 8
17473: PPUSH
17474: LD_INT 0
17476: PPUSH
17477: LD_INT 5
17479: PPUSH
17480: CALL_OW 12
17484: PPUSH
17485: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17489: LD_VAR 0 8
17493: PPUSH
17494: LD_VAR 0 5
17498: PPUSH
17499: LD_VAR 0 6
17503: PPUSH
17504: LD_INT 1
17506: PPUSH
17507: CALL_OW 48
// end ;
17511: LD_VAR 0 7
17515: RET
// export hInvincible ; every 1 do
17516: GO 17518
17518: DISABLE
// hInvincible := [ ] ;
17519: LD_ADDR_EXP 89
17523: PUSH
17524: EMPTY
17525: ST_TO_ADDR
17526: END
// every 10 do var i ;
17527: GO 17529
17529: DISABLE
17530: LD_INT 0
17532: PPUSH
// begin enable ;
17533: ENABLE
// if not hInvincible then
17534: LD_EXP 89
17538: NOT
17539: IFFALSE 17543
// exit ;
17541: GO 17587
// for i in hInvincible do
17543: LD_ADDR_VAR 0 1
17547: PUSH
17548: LD_EXP 89
17552: PUSH
17553: FOR_IN
17554: IFFALSE 17585
// if GetLives ( i ) < 1000 then
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 256
17565: PUSH
17566: LD_INT 1000
17568: LESS
17569: IFFALSE 17583
// SetLives ( i , 1000 ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_INT 1000
17578: PPUSH
17579: CALL_OW 234
17583: GO 17553
17585: POP
17586: POP
// end ;
17587: PPOPN 1
17589: END
// export function hHackInvincible ; var i ; begin
17590: LD_INT 0
17592: PPUSH
17593: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17594: LD_ADDR_VAR 0 2
17598: PUSH
17599: LD_INT 2
17601: PUSH
17602: LD_INT 21
17604: PUSH
17605: LD_INT 1
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 21
17614: PUSH
17615: LD_INT 2
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: LIST
17626: PPUSH
17627: CALL_OW 69
17631: PUSH
17632: FOR_IN
17633: IFFALSE 17694
// if IsSelected ( i ) then
17635: LD_VAR 0 2
17639: PPUSH
17640: CALL_OW 306
17644: IFFALSE 17692
// begin if i in hInvincible then
17646: LD_VAR 0 2
17650: PUSH
17651: LD_EXP 89
17655: IN
17656: IFFALSE 17676
// hInvincible := hInvincible diff i else
17658: LD_ADDR_EXP 89
17662: PUSH
17663: LD_EXP 89
17667: PUSH
17668: LD_VAR 0 2
17672: DIFF
17673: ST_TO_ADDR
17674: GO 17692
// hInvincible := hInvincible union i ;
17676: LD_ADDR_EXP 89
17680: PUSH
17681: LD_EXP 89
17685: PUSH
17686: LD_VAR 0 2
17690: UNION
17691: ST_TO_ADDR
// end ;
17692: GO 17632
17694: POP
17695: POP
// end ;
17696: LD_VAR 0 1
17700: RET
// export function hHackInvisible ; var i , j ; begin
17701: LD_INT 0
17703: PPUSH
17704: PPUSH
17705: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_INT 21
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: PUSH
17726: FOR_IN
17727: IFFALSE 17751
// if IsSelected ( i ) then
17729: LD_VAR 0 2
17733: PPUSH
17734: CALL_OW 306
17738: IFFALSE 17749
// ComForceInvisible ( i ) ;
17740: LD_VAR 0 2
17744: PPUSH
17745: CALL_OW 496
17749: GO 17726
17751: POP
17752: POP
// end ;
17753: LD_VAR 0 1
17757: RET
// export function hHackChangeYourSide ; begin
17758: LD_INT 0
17760: PPUSH
// if your_side = 8 then
17761: LD_OWVAR 2
17765: PUSH
17766: LD_INT 8
17768: EQUAL
17769: IFFALSE 17781
// your_side := 0 else
17771: LD_ADDR_OWVAR 2
17775: PUSH
17776: LD_INT 0
17778: ST_TO_ADDR
17779: GO 17795
// your_side := your_side + 1 ;
17781: LD_ADDR_OWVAR 2
17785: PUSH
17786: LD_OWVAR 2
17790: PUSH
17791: LD_INT 1
17793: PLUS
17794: ST_TO_ADDR
// end ;
17795: LD_VAR 0 1
17799: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17800: LD_INT 0
17802: PPUSH
17803: PPUSH
17804: PPUSH
// for i in all_units do
17805: LD_ADDR_VAR 0 2
17809: PUSH
17810: LD_OWVAR 3
17814: PUSH
17815: FOR_IN
17816: IFFALSE 17894
// if IsSelected ( i ) then
17818: LD_VAR 0 2
17822: PPUSH
17823: CALL_OW 306
17827: IFFALSE 17892
// begin j := GetSide ( i ) ;
17829: LD_ADDR_VAR 0 3
17833: PUSH
17834: LD_VAR 0 2
17838: PPUSH
17839: CALL_OW 255
17843: ST_TO_ADDR
// if j = 8 then
17844: LD_VAR 0 3
17848: PUSH
17849: LD_INT 8
17851: EQUAL
17852: IFFALSE 17864
// j := 0 else
17854: LD_ADDR_VAR 0 3
17858: PUSH
17859: LD_INT 0
17861: ST_TO_ADDR
17862: GO 17878
// j := j + 1 ;
17864: LD_ADDR_VAR 0 3
17868: PUSH
17869: LD_VAR 0 3
17873: PUSH
17874: LD_INT 1
17876: PLUS
17877: ST_TO_ADDR
// SetSide ( i , j ) ;
17878: LD_VAR 0 2
17882: PPUSH
17883: LD_VAR 0 3
17887: PPUSH
17888: CALL_OW 235
// end ;
17892: GO 17815
17894: POP
17895: POP
// end ;
17896: LD_VAR 0 1
17900: RET
// export function hHackFog ; begin
17901: LD_INT 0
17903: PPUSH
// FogOff ( true ) ;
17904: LD_INT 1
17906: PPUSH
17907: CALL_OW 344
// end ;
17911: LD_VAR 0 1
17915: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17916: LD_INT 0
17918: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17919: LD_VAR 0 1
17923: PPUSH
17924: LD_VAR 0 2
17928: PPUSH
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: CALL_OW 483
// CenterOnXY ( x , y ) ;
17944: LD_VAR 0 2
17948: PPUSH
17949: LD_VAR 0 3
17953: PPUSH
17954: CALL_OW 84
// end ; end_of_file
17958: LD_VAR 0 4
17962: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17963: LD_INT 0
17965: PPUSH
17966: PPUSH
// if exist_mode then
17967: LD_VAR 0 2
17971: IFFALSE 17996
// unit := CreateCharacter ( prefix & ident ) else
17973: LD_ADDR_VAR 0 5
17977: PUSH
17978: LD_VAR 0 3
17982: PUSH
17983: LD_VAR 0 1
17987: STR
17988: PPUSH
17989: CALL_OW 34
17993: ST_TO_ADDR
17994: GO 18011
// unit := NewCharacter ( ident ) ;
17996: LD_ADDR_VAR 0 5
18000: PUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 25
18010: ST_TO_ADDR
// result := unit ;
18011: LD_ADDR_VAR 0 4
18015: PUSH
18016: LD_VAR 0 5
18020: ST_TO_ADDR
// end ;
18021: LD_VAR 0 4
18025: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
18026: LD_INT 0
18028: PPUSH
18029: PPUSH
// if not side or not nation then
18030: LD_VAR 0 1
18034: NOT
18035: PUSH
18036: LD_VAR 0 2
18040: NOT
18041: OR
18042: IFFALSE 18046
// exit ;
18044: GO 18814
// case nation of nation_american :
18046: LD_VAR 0 2
18050: PUSH
18051: LD_INT 1
18053: DOUBLE
18054: EQUAL
18055: IFTRUE 18059
18057: GO 18273
18059: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
18060: LD_ADDR_VAR 0 4
18064: PUSH
18065: LD_INT 35
18067: PUSH
18068: LD_INT 45
18070: PUSH
18071: LD_INT 46
18073: PUSH
18074: LD_INT 47
18076: PUSH
18077: LD_INT 82
18079: PUSH
18080: LD_INT 83
18082: PUSH
18083: LD_INT 84
18085: PUSH
18086: LD_INT 85
18088: PUSH
18089: LD_INT 86
18091: PUSH
18092: LD_INT 1
18094: PUSH
18095: LD_INT 2
18097: PUSH
18098: LD_INT 6
18100: PUSH
18101: LD_INT 15
18103: PUSH
18104: LD_INT 16
18106: PUSH
18107: LD_INT 7
18109: PUSH
18110: LD_INT 12
18112: PUSH
18113: LD_INT 13
18115: PUSH
18116: LD_INT 10
18118: PUSH
18119: LD_INT 14
18121: PUSH
18122: LD_INT 20
18124: PUSH
18125: LD_INT 21
18127: PUSH
18128: LD_INT 22
18130: PUSH
18131: LD_INT 25
18133: PUSH
18134: LD_INT 32
18136: PUSH
18137: LD_INT 27
18139: PUSH
18140: LD_INT 36
18142: PUSH
18143: LD_INT 69
18145: PUSH
18146: LD_INT 39
18148: PUSH
18149: LD_INT 34
18151: PUSH
18152: LD_INT 40
18154: PUSH
18155: LD_INT 48
18157: PUSH
18158: LD_INT 49
18160: PUSH
18161: LD_INT 50
18163: PUSH
18164: LD_INT 51
18166: PUSH
18167: LD_INT 52
18169: PUSH
18170: LD_INT 53
18172: PUSH
18173: LD_INT 54
18175: PUSH
18176: LD_INT 55
18178: PUSH
18179: LD_INT 56
18181: PUSH
18182: LD_INT 57
18184: PUSH
18185: LD_INT 58
18187: PUSH
18188: LD_INT 59
18190: PUSH
18191: LD_INT 60
18193: PUSH
18194: LD_INT 61
18196: PUSH
18197: LD_INT 62
18199: PUSH
18200: LD_INT 80
18202: PUSH
18203: LD_INT 82
18205: PUSH
18206: LD_INT 83
18208: PUSH
18209: LD_INT 84
18211: PUSH
18212: LD_INT 85
18214: PUSH
18215: LD_INT 86
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: ST_TO_ADDR
18271: GO 18738
18273: LD_INT 2
18275: DOUBLE
18276: EQUAL
18277: IFTRUE 18281
18279: GO 18507
18281: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
18282: LD_ADDR_VAR 0 4
18286: PUSH
18287: LD_INT 35
18289: PUSH
18290: LD_INT 45
18292: PUSH
18293: LD_INT 46
18295: PUSH
18296: LD_INT 47
18298: PUSH
18299: LD_INT 82
18301: PUSH
18302: LD_INT 83
18304: PUSH
18305: LD_INT 84
18307: PUSH
18308: LD_INT 85
18310: PUSH
18311: LD_INT 87
18313: PUSH
18314: LD_INT 70
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: LD_INT 11
18322: PUSH
18323: LD_INT 3
18325: PUSH
18326: LD_INT 4
18328: PUSH
18329: LD_INT 5
18331: PUSH
18332: LD_INT 6
18334: PUSH
18335: LD_INT 15
18337: PUSH
18338: LD_INT 18
18340: PUSH
18341: LD_INT 7
18343: PUSH
18344: LD_INT 17
18346: PUSH
18347: LD_INT 8
18349: PUSH
18350: LD_INT 20
18352: PUSH
18353: LD_INT 21
18355: PUSH
18356: LD_INT 22
18358: PUSH
18359: LD_INT 72
18361: PUSH
18362: LD_INT 26
18364: PUSH
18365: LD_INT 69
18367: PUSH
18368: LD_INT 39
18370: PUSH
18371: LD_INT 40
18373: PUSH
18374: LD_INT 41
18376: PUSH
18377: LD_INT 42
18379: PUSH
18380: LD_INT 43
18382: PUSH
18383: LD_INT 48
18385: PUSH
18386: LD_INT 49
18388: PUSH
18389: LD_INT 50
18391: PUSH
18392: LD_INT 51
18394: PUSH
18395: LD_INT 52
18397: PUSH
18398: LD_INT 53
18400: PUSH
18401: LD_INT 54
18403: PUSH
18404: LD_INT 55
18406: PUSH
18407: LD_INT 56
18409: PUSH
18410: LD_INT 60
18412: PUSH
18413: LD_INT 61
18415: PUSH
18416: LD_INT 62
18418: PUSH
18419: LD_INT 66
18421: PUSH
18422: LD_INT 67
18424: PUSH
18425: LD_INT 68
18427: PUSH
18428: LD_INT 81
18430: PUSH
18431: LD_INT 82
18433: PUSH
18434: LD_INT 83
18436: PUSH
18437: LD_INT 84
18439: PUSH
18440: LD_INT 85
18442: PUSH
18443: LD_INT 87
18445: PUSH
18446: LD_INT 88
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: ST_TO_ADDR
18505: GO 18738
18507: LD_INT 3
18509: DOUBLE
18510: EQUAL
18511: IFTRUE 18515
18513: GO 18737
18515: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
18516: LD_ADDR_VAR 0 4
18520: PUSH
18521: LD_INT 46
18523: PUSH
18524: LD_INT 47
18526: PUSH
18527: LD_INT 1
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: LD_INT 82
18535: PUSH
18536: LD_INT 83
18538: PUSH
18539: LD_INT 84
18541: PUSH
18542: LD_INT 85
18544: PUSH
18545: LD_INT 86
18547: PUSH
18548: LD_INT 11
18550: PUSH
18551: LD_INT 9
18553: PUSH
18554: LD_INT 20
18556: PUSH
18557: LD_INT 19
18559: PUSH
18560: LD_INT 21
18562: PUSH
18563: LD_INT 24
18565: PUSH
18566: LD_INT 22
18568: PUSH
18569: LD_INT 25
18571: PUSH
18572: LD_INT 28
18574: PUSH
18575: LD_INT 29
18577: PUSH
18578: LD_INT 30
18580: PUSH
18581: LD_INT 31
18583: PUSH
18584: LD_INT 37
18586: PUSH
18587: LD_INT 38
18589: PUSH
18590: LD_INT 32
18592: PUSH
18593: LD_INT 27
18595: PUSH
18596: LD_INT 33
18598: PUSH
18599: LD_INT 69
18601: PUSH
18602: LD_INT 39
18604: PUSH
18605: LD_INT 34
18607: PUSH
18608: LD_INT 40
18610: PUSH
18611: LD_INT 71
18613: PUSH
18614: LD_INT 23
18616: PUSH
18617: LD_INT 44
18619: PUSH
18620: LD_INT 48
18622: PUSH
18623: LD_INT 49
18625: PUSH
18626: LD_INT 50
18628: PUSH
18629: LD_INT 51
18631: PUSH
18632: LD_INT 52
18634: PUSH
18635: LD_INT 53
18637: PUSH
18638: LD_INT 54
18640: PUSH
18641: LD_INT 55
18643: PUSH
18644: LD_INT 56
18646: PUSH
18647: LD_INT 57
18649: PUSH
18650: LD_INT 58
18652: PUSH
18653: LD_INT 59
18655: PUSH
18656: LD_INT 63
18658: PUSH
18659: LD_INT 64
18661: PUSH
18662: LD_INT 65
18664: PUSH
18665: LD_INT 82
18667: PUSH
18668: LD_INT 83
18670: PUSH
18671: LD_INT 84
18673: PUSH
18674: LD_INT 85
18676: PUSH
18677: LD_INT 86
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: ST_TO_ADDR
18735: GO 18738
18737: POP
// if state > - 1 and state < 3 then
18738: LD_VAR 0 3
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: GREATER
18747: PUSH
18748: LD_VAR 0 3
18752: PUSH
18753: LD_INT 3
18755: LESS
18756: AND
18757: IFFALSE 18814
// for i in result do
18759: LD_ADDR_VAR 0 5
18763: PUSH
18764: LD_VAR 0 4
18768: PUSH
18769: FOR_IN
18770: IFFALSE 18812
// if GetTech ( i , side ) <> state then
18772: LD_VAR 0 5
18776: PPUSH
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 321
18786: PUSH
18787: LD_VAR 0 3
18791: NONEQUAL
18792: IFFALSE 18810
// result := result diff i ;
18794: LD_ADDR_VAR 0 4
18798: PUSH
18799: LD_VAR 0 4
18803: PUSH
18804: LD_VAR 0 5
18808: DIFF
18809: ST_TO_ADDR
18810: GO 18769
18812: POP
18813: POP
// end ;
18814: LD_VAR 0 4
18818: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18819: LD_INT 0
18821: PPUSH
18822: PPUSH
18823: PPUSH
// result := true ;
18824: LD_ADDR_VAR 0 3
18828: PUSH
18829: LD_INT 1
18831: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18832: LD_ADDR_VAR 0 5
18836: PUSH
18837: LD_VAR 0 2
18841: PPUSH
18842: CALL_OW 480
18846: ST_TO_ADDR
// if not tmp then
18847: LD_VAR 0 5
18851: NOT
18852: IFFALSE 18856
// exit ;
18854: GO 18905
// for i in tmp do
18856: LD_ADDR_VAR 0 4
18860: PUSH
18861: LD_VAR 0 5
18865: PUSH
18866: FOR_IN
18867: IFFALSE 18903
// if GetTech ( i , side ) <> state_researched then
18869: LD_VAR 0 4
18873: PPUSH
18874: LD_VAR 0 1
18878: PPUSH
18879: CALL_OW 321
18883: PUSH
18884: LD_INT 2
18886: NONEQUAL
18887: IFFALSE 18901
// begin result := false ;
18889: LD_ADDR_VAR 0 3
18893: PUSH
18894: LD_INT 0
18896: ST_TO_ADDR
// exit ;
18897: POP
18898: POP
18899: GO 18905
// end ;
18901: GO 18866
18903: POP
18904: POP
// end ;
18905: LD_VAR 0 3
18909: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18910: LD_INT 0
18912: PPUSH
18913: PPUSH
18914: PPUSH
18915: PPUSH
18916: PPUSH
18917: PPUSH
18918: PPUSH
18919: PPUSH
18920: PPUSH
18921: PPUSH
18922: PPUSH
18923: PPUSH
18924: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18925: LD_VAR 0 1
18929: NOT
18930: PUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 257
18940: PUSH
18941: LD_INT 9
18943: NONEQUAL
18944: OR
18945: IFFALSE 18949
// exit ;
18947: GO 19522
// side := GetSide ( unit ) ;
18949: LD_ADDR_VAR 0 9
18953: PUSH
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 255
18963: ST_TO_ADDR
// tech_space := tech_spacanom ;
18964: LD_ADDR_VAR 0 12
18968: PUSH
18969: LD_INT 29
18971: ST_TO_ADDR
// tech_time := tech_taurad ;
18972: LD_ADDR_VAR 0 13
18976: PUSH
18977: LD_INT 28
18979: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18980: LD_ADDR_VAR 0 11
18984: PUSH
18985: LD_VAR 0 1
18989: PPUSH
18990: CALL_OW 310
18994: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18995: LD_VAR 0 11
18999: PPUSH
19000: CALL_OW 247
19004: PUSH
19005: LD_INT 2
19007: EQUAL
19008: IFFALSE 19012
// exit ;
19010: GO 19522
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19012: LD_ADDR_VAR 0 8
19016: PUSH
19017: LD_INT 81
19019: PUSH
19020: LD_VAR 0 9
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 3
19031: PUSH
19032: LD_INT 21
19034: PUSH
19035: LD_INT 3
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PPUSH
19050: CALL_OW 69
19054: ST_TO_ADDR
// if not tmp then
19055: LD_VAR 0 8
19059: NOT
19060: IFFALSE 19064
// exit ;
19062: GO 19522
// if in_unit then
19064: LD_VAR 0 11
19068: IFFALSE 19092
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
19070: LD_ADDR_VAR 0 10
19074: PUSH
19075: LD_VAR 0 8
19079: PPUSH
19080: LD_VAR 0 11
19084: PPUSH
19085: CALL_OW 74
19089: ST_TO_ADDR
19090: GO 19112
// enemy := NearestUnitToUnit ( tmp , unit ) ;
19092: LD_ADDR_VAR 0 10
19096: PUSH
19097: LD_VAR 0 8
19101: PPUSH
19102: LD_VAR 0 1
19106: PPUSH
19107: CALL_OW 74
19111: ST_TO_ADDR
// if not enemy then
19112: LD_VAR 0 10
19116: NOT
19117: IFFALSE 19121
// exit ;
19119: GO 19522
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
19121: LD_VAR 0 11
19125: PUSH
19126: LD_VAR 0 11
19130: PPUSH
19131: LD_VAR 0 10
19135: PPUSH
19136: CALL_OW 296
19140: PUSH
19141: LD_INT 13
19143: GREATER
19144: AND
19145: PUSH
19146: LD_VAR 0 1
19150: PPUSH
19151: LD_VAR 0 10
19155: PPUSH
19156: CALL_OW 296
19160: PUSH
19161: LD_INT 12
19163: GREATER
19164: OR
19165: IFFALSE 19169
// exit ;
19167: GO 19522
// missile := [ 1 ] ;
19169: LD_ADDR_VAR 0 14
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: EMPTY
19178: LIST
19179: ST_TO_ADDR
// if Researched ( side , tech_space ) then
19180: LD_VAR 0 9
19184: PPUSH
19185: LD_VAR 0 12
19189: PPUSH
19190: CALL_OW 325
19194: IFFALSE 19223
// missile := Insert ( missile , missile + 1 , 2 ) ;
19196: LD_ADDR_VAR 0 14
19200: PUSH
19201: LD_VAR 0 14
19205: PPUSH
19206: LD_VAR 0 14
19210: PUSH
19211: LD_INT 1
19213: PLUS
19214: PPUSH
19215: LD_INT 2
19217: PPUSH
19218: CALL_OW 2
19222: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
19223: LD_VAR 0 9
19227: PPUSH
19228: LD_VAR 0 13
19232: PPUSH
19233: CALL_OW 325
19237: PUSH
19238: LD_VAR 0 10
19242: PPUSH
19243: CALL_OW 255
19247: PPUSH
19248: LD_VAR 0 13
19252: PPUSH
19253: CALL_OW 325
19257: NOT
19258: AND
19259: IFFALSE 19288
// missile := Insert ( missile , missile + 1 , 3 ) ;
19261: LD_ADDR_VAR 0 14
19265: PUSH
19266: LD_VAR 0 14
19270: PPUSH
19271: LD_VAR 0 14
19275: PUSH
19276: LD_INT 1
19278: PLUS
19279: PPUSH
19280: LD_INT 3
19282: PPUSH
19283: CALL_OW 2
19287: ST_TO_ADDR
// if missile < 2 then
19288: LD_VAR 0 14
19292: PUSH
19293: LD_INT 2
19295: LESS
19296: IFFALSE 19300
// exit ;
19298: GO 19522
// x := GetX ( enemy ) ;
19300: LD_ADDR_VAR 0 4
19304: PUSH
19305: LD_VAR 0 10
19309: PPUSH
19310: CALL_OW 250
19314: ST_TO_ADDR
// y := GetY ( enemy ) ;
19315: LD_ADDR_VAR 0 5
19319: PUSH
19320: LD_VAR 0 10
19324: PPUSH
19325: CALL_OW 251
19329: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19330: LD_ADDR_VAR 0 6
19334: PUSH
19335: LD_VAR 0 4
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PPUSH
19344: LD_INT 1
19346: PPUSH
19347: CALL_OW 12
19351: PLUS
19352: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19353: LD_ADDR_VAR 0 7
19357: PUSH
19358: LD_VAR 0 5
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PPUSH
19367: LD_INT 1
19369: PPUSH
19370: CALL_OW 12
19374: PLUS
19375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19376: LD_VAR 0 6
19380: PPUSH
19381: LD_VAR 0 7
19385: PPUSH
19386: CALL_OW 488
19390: NOT
19391: IFFALSE 19413
// begin _x := x ;
19393: LD_ADDR_VAR 0 6
19397: PUSH
19398: LD_VAR 0 4
19402: ST_TO_ADDR
// _y := y ;
19403: LD_ADDR_VAR 0 7
19407: PUSH
19408: LD_VAR 0 5
19412: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: LD_INT 1
19420: PPUSH
19421: LD_VAR 0 14
19425: PPUSH
19426: CALL_OW 12
19430: ST_TO_ADDR
// case i of 1 :
19431: LD_VAR 0 3
19435: PUSH
19436: LD_INT 1
19438: DOUBLE
19439: EQUAL
19440: IFTRUE 19444
19442: GO 19461
19444: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19445: LD_VAR 0 1
19449: PPUSH
19450: LD_VAR 0 10
19454: PPUSH
19455: CALL_OW 115
19459: GO 19522
19461: LD_INT 2
19463: DOUBLE
19464: EQUAL
19465: IFTRUE 19469
19467: GO 19491
19469: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_VAR 0 6
19479: PPUSH
19480: LD_VAR 0 7
19484: PPUSH
19485: CALL_OW 153
19489: GO 19522
19491: LD_INT 3
19493: DOUBLE
19494: EQUAL
19495: IFTRUE 19499
19497: GO 19521
19499: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19500: LD_VAR 0 1
19504: PPUSH
19505: LD_VAR 0 6
19509: PPUSH
19510: LD_VAR 0 7
19514: PPUSH
19515: CALL_OW 154
19519: GO 19522
19521: POP
// end ;
19522: LD_VAR 0 2
19526: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19527: LD_INT 0
19529: PPUSH
19530: PPUSH
19531: PPUSH
19532: PPUSH
19533: PPUSH
19534: PPUSH
// if not unit or not building then
19535: LD_VAR 0 1
19539: NOT
19540: PUSH
19541: LD_VAR 0 2
19545: NOT
19546: OR
19547: IFFALSE 19551
// exit ;
19549: GO 19709
// x := GetX ( building ) ;
19551: LD_ADDR_VAR 0 5
19555: PUSH
19556: LD_VAR 0 2
19560: PPUSH
19561: CALL_OW 250
19565: ST_TO_ADDR
// y := GetY ( building ) ;
19566: LD_ADDR_VAR 0 6
19570: PUSH
19571: LD_VAR 0 2
19575: PPUSH
19576: CALL_OW 251
19580: ST_TO_ADDR
// for i = 0 to 5 do
19581: LD_ADDR_VAR 0 4
19585: PUSH
19586: DOUBLE
19587: LD_INT 0
19589: DEC
19590: ST_TO_ADDR
19591: LD_INT 5
19593: PUSH
19594: FOR_TO
19595: IFFALSE 19707
// begin _x := ShiftX ( x , i , 3 ) ;
19597: LD_ADDR_VAR 0 7
19601: PUSH
19602: LD_VAR 0 5
19606: PPUSH
19607: LD_VAR 0 4
19611: PPUSH
19612: LD_INT 3
19614: PPUSH
19615: CALL_OW 272
19619: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19620: LD_ADDR_VAR 0 8
19624: PUSH
19625: LD_VAR 0 6
19629: PPUSH
19630: LD_VAR 0 4
19634: PPUSH
19635: LD_INT 3
19637: PPUSH
19638: CALL_OW 273
19642: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19643: LD_VAR 0 7
19647: PPUSH
19648: LD_VAR 0 8
19652: PPUSH
19653: CALL_OW 488
19657: NOT
19658: IFFALSE 19662
// continue ;
19660: GO 19594
// if HexInfo ( _x , _y ) = 0 then
19662: LD_VAR 0 7
19666: PPUSH
19667: LD_VAR 0 8
19671: PPUSH
19672: CALL_OW 428
19676: PUSH
19677: LD_INT 0
19679: EQUAL
19680: IFFALSE 19705
// begin ComMoveXY ( unit , _x , _y ) ;
19682: LD_VAR 0 1
19686: PPUSH
19687: LD_VAR 0 7
19691: PPUSH
19692: LD_VAR 0 8
19696: PPUSH
19697: CALL_OW 111
// exit ;
19701: POP
19702: POP
19703: GO 19709
// end ; end ;
19705: GO 19594
19707: POP
19708: POP
// end ;
19709: LD_VAR 0 3
19713: RET
// export function ScanBase ( side , base_area ) ; begin
19714: LD_INT 0
19716: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19717: LD_ADDR_VAR 0 3
19721: PUSH
19722: LD_VAR 0 2
19726: PPUSH
19727: LD_INT 81
19729: PUSH
19730: LD_VAR 0 1
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PPUSH
19739: CALL_OW 70
19743: ST_TO_ADDR
// end ;
19744: LD_VAR 0 3
19748: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19749: LD_INT 0
19751: PPUSH
19752: PPUSH
19753: PPUSH
19754: PPUSH
// result := false ;
19755: LD_ADDR_VAR 0 2
19759: PUSH
19760: LD_INT 0
19762: ST_TO_ADDR
// side := GetSide ( unit ) ;
19763: LD_ADDR_VAR 0 3
19767: PUSH
19768: LD_VAR 0 1
19772: PPUSH
19773: CALL_OW 255
19777: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19778: LD_ADDR_VAR 0 4
19782: PUSH
19783: LD_VAR 0 1
19787: PPUSH
19788: CALL_OW 248
19792: ST_TO_ADDR
// case nat of 1 :
19793: LD_VAR 0 4
19797: PUSH
19798: LD_INT 1
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19817
19806: POP
// tech := tech_lassight ; 2 :
19807: LD_ADDR_VAR 0 5
19811: PUSH
19812: LD_INT 12
19814: ST_TO_ADDR
19815: GO 19856
19817: LD_INT 2
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19836
19825: POP
// tech := tech_mortar ; 3 :
19826: LD_ADDR_VAR 0 5
19830: PUSH
19831: LD_INT 41
19833: ST_TO_ADDR
19834: GO 19856
19836: LD_INT 3
19838: DOUBLE
19839: EQUAL
19840: IFTRUE 19844
19842: GO 19855
19844: POP
// tech := tech_bazooka ; end ;
19845: LD_ADDR_VAR 0 5
19849: PUSH
19850: LD_INT 44
19852: ST_TO_ADDR
19853: GO 19856
19855: POP
// if Researched ( side , tech ) then
19856: LD_VAR 0 3
19860: PPUSH
19861: LD_VAR 0 5
19865: PPUSH
19866: CALL_OW 325
19870: IFFALSE 19897
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19872: LD_ADDR_VAR 0 2
19876: PUSH
19877: LD_INT 5
19879: PUSH
19880: LD_INT 8
19882: PUSH
19883: LD_INT 9
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: LIST
19890: PUSH
19891: LD_VAR 0 4
19895: ARRAY
19896: ST_TO_ADDR
// end ;
19897: LD_VAR 0 2
19901: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19902: LD_INT 0
19904: PPUSH
19905: PPUSH
19906: PPUSH
// if not mines then
19907: LD_VAR 0 2
19911: NOT
19912: IFFALSE 19916
// exit ;
19914: GO 20060
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19916: LD_ADDR_VAR 0 5
19920: PUSH
19921: LD_INT 81
19923: PUSH
19924: LD_VAR 0 1
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 3
19935: PUSH
19936: LD_INT 21
19938: PUSH
19939: LD_INT 3
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PPUSH
19954: CALL_OW 69
19958: ST_TO_ADDR
// for i in mines do
19959: LD_ADDR_VAR 0 4
19963: PUSH
19964: LD_VAR 0 2
19968: PUSH
19969: FOR_IN
19970: IFFALSE 20058
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19972: LD_VAR 0 4
19976: PUSH
19977: LD_INT 1
19979: ARRAY
19980: PPUSH
19981: LD_VAR 0 4
19985: PUSH
19986: LD_INT 2
19988: ARRAY
19989: PPUSH
19990: CALL_OW 458
19994: NOT
19995: IFFALSE 19999
// continue ;
19997: GO 19969
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19999: LD_VAR 0 4
20003: PUSH
20004: LD_INT 1
20006: ARRAY
20007: PPUSH
20008: LD_VAR 0 4
20012: PUSH
20013: LD_INT 2
20015: ARRAY
20016: PPUSH
20017: CALL_OW 428
20021: PUSH
20022: LD_VAR 0 5
20026: IN
20027: IFFALSE 20056
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
20029: LD_VAR 0 4
20033: PUSH
20034: LD_INT 1
20036: ARRAY
20037: PPUSH
20038: LD_VAR 0 4
20042: PUSH
20043: LD_INT 2
20045: ARRAY
20046: PPUSH
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 456
// end ;
20056: GO 19969
20058: POP
20059: POP
// end ;
20060: LD_VAR 0 3
20064: RET
// export function Count ( array ) ; var i ; begin
20065: LD_INT 0
20067: PPUSH
20068: PPUSH
// result := 0 ;
20069: LD_ADDR_VAR 0 2
20073: PUSH
20074: LD_INT 0
20076: ST_TO_ADDR
// for i in array do
20077: LD_ADDR_VAR 0 3
20081: PUSH
20082: LD_VAR 0 1
20086: PUSH
20087: FOR_IN
20088: IFFALSE 20112
// if i then
20090: LD_VAR 0 3
20094: IFFALSE 20110
// result := result + 1 ;
20096: LD_ADDR_VAR 0 2
20100: PUSH
20101: LD_VAR 0 2
20105: PUSH
20106: LD_INT 1
20108: PLUS
20109: ST_TO_ADDR
20110: GO 20087
20112: POP
20113: POP
// end ;
20114: LD_VAR 0 2
20118: RET
// export function IsEmpty ( building ) ; begin
20119: LD_INT 0
20121: PPUSH
// if not building then
20122: LD_VAR 0 1
20126: NOT
20127: IFFALSE 20131
// exit ;
20129: GO 20174
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
20131: LD_ADDR_VAR 0 2
20135: PUSH
20136: LD_VAR 0 1
20140: PUSH
20141: LD_INT 22
20143: PUSH
20144: LD_VAR 0 1
20148: PPUSH
20149: CALL_OW 255
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 58
20160: PUSH
20161: EMPTY
20162: LIST
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PPUSH
20168: CALL_OW 69
20172: IN
20173: ST_TO_ADDR
// end ;
20174: LD_VAR 0 2
20178: RET
// export function IsNotFull ( building ) ; begin
20179: LD_INT 0
20181: PPUSH
// if not building then
20182: LD_VAR 0 1
20186: NOT
20187: IFFALSE 20191
// exit ;
20189: GO 20210
// result := UnitsInside ( building ) < 6 ;
20191: LD_ADDR_VAR 0 2
20195: PUSH
20196: LD_VAR 0 1
20200: PPUSH
20201: CALL_OW 313
20205: PUSH
20206: LD_INT 6
20208: LESS
20209: ST_TO_ADDR
// end ;
20210: LD_VAR 0 2
20214: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
20215: LD_INT 0
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
// tmp := [ ] ;
20221: LD_ADDR_VAR 0 3
20225: PUSH
20226: EMPTY
20227: ST_TO_ADDR
// list := [ ] ;
20228: LD_ADDR_VAR 0 5
20232: PUSH
20233: EMPTY
20234: ST_TO_ADDR
// for i = 16 to 25 do
20235: LD_ADDR_VAR 0 4
20239: PUSH
20240: DOUBLE
20241: LD_INT 16
20243: DEC
20244: ST_TO_ADDR
20245: LD_INT 25
20247: PUSH
20248: FOR_TO
20249: IFFALSE 20322
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
20251: LD_ADDR_VAR 0 3
20255: PUSH
20256: LD_VAR 0 3
20260: PUSH
20261: LD_INT 22
20263: PUSH
20264: LD_VAR 0 1
20268: PPUSH
20269: CALL_OW 255
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 91
20280: PUSH
20281: LD_VAR 0 1
20285: PUSH
20286: LD_INT 6
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 30
20296: PUSH
20297: LD_VAR 0 4
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: LIST
20310: PUSH
20311: EMPTY
20312: LIST
20313: PPUSH
20314: CALL_OW 69
20318: ADD
20319: ST_TO_ADDR
20320: GO 20248
20322: POP
20323: POP
// for i = 1 to tmp do
20324: LD_ADDR_VAR 0 4
20328: PUSH
20329: DOUBLE
20330: LD_INT 1
20332: DEC
20333: ST_TO_ADDR
20334: LD_VAR 0 3
20338: PUSH
20339: FOR_TO
20340: IFFALSE 20428
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
20342: LD_ADDR_VAR 0 5
20346: PUSH
20347: LD_VAR 0 5
20351: PUSH
20352: LD_VAR 0 3
20356: PUSH
20357: LD_VAR 0 4
20361: ARRAY
20362: PPUSH
20363: CALL_OW 266
20367: PUSH
20368: LD_VAR 0 3
20372: PUSH
20373: LD_VAR 0 4
20377: ARRAY
20378: PPUSH
20379: CALL_OW 250
20383: PUSH
20384: LD_VAR 0 3
20388: PUSH
20389: LD_VAR 0 4
20393: ARRAY
20394: PPUSH
20395: CALL_OW 251
20399: PUSH
20400: LD_VAR 0 3
20404: PUSH
20405: LD_VAR 0 4
20409: ARRAY
20410: PPUSH
20411: CALL_OW 254
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: PUSH
20422: EMPTY
20423: LIST
20424: ADD
20425: ST_TO_ADDR
20426: GO 20339
20428: POP
20429: POP
// result := list ;
20430: LD_ADDR_VAR 0 2
20434: PUSH
20435: LD_VAR 0 5
20439: ST_TO_ADDR
// end ;
20440: LD_VAR 0 2
20444: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20445: LD_INT 0
20447: PPUSH
20448: PPUSH
20449: PPUSH
20450: PPUSH
20451: PPUSH
20452: PPUSH
20453: PPUSH
// if not factory then
20454: LD_VAR 0 1
20458: NOT
20459: IFFALSE 20463
// exit ;
20461: GO 21056
// if control = control_apeman then
20463: LD_VAR 0 4
20467: PUSH
20468: LD_INT 5
20470: EQUAL
20471: IFFALSE 20580
// begin tmp := UnitsInside ( factory ) ;
20473: LD_ADDR_VAR 0 8
20477: PUSH
20478: LD_VAR 0 1
20482: PPUSH
20483: CALL_OW 313
20487: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20488: LD_VAR 0 8
20492: PPUSH
20493: LD_INT 25
20495: PUSH
20496: LD_INT 12
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PPUSH
20503: CALL_OW 72
20507: NOT
20508: IFFALSE 20518
// control := control_manual ;
20510: LD_ADDR_VAR 0 4
20514: PUSH
20515: LD_INT 1
20517: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20518: LD_ADDR_VAR 0 8
20522: PUSH
20523: LD_VAR 0 1
20527: PPUSH
20528: CALL 20215 0 1
20532: ST_TO_ADDR
// if tmp then
20533: LD_VAR 0 8
20537: IFFALSE 20580
// begin for i in tmp do
20539: LD_ADDR_VAR 0 7
20543: PUSH
20544: LD_VAR 0 8
20548: PUSH
20549: FOR_IN
20550: IFFALSE 20578
// if i [ 1 ] = b_ext_radio then
20552: LD_VAR 0 7
20556: PUSH
20557: LD_INT 1
20559: ARRAY
20560: PUSH
20561: LD_INT 22
20563: EQUAL
20564: IFFALSE 20576
// begin control := control_remote ;
20566: LD_ADDR_VAR 0 4
20570: PUSH
20571: LD_INT 2
20573: ST_TO_ADDR
// break ;
20574: GO 20578
// end ;
20576: GO 20549
20578: POP
20579: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20580: LD_VAR 0 1
20584: PPUSH
20585: LD_VAR 0 2
20589: PPUSH
20590: LD_VAR 0 3
20594: PPUSH
20595: LD_VAR 0 4
20599: PPUSH
20600: LD_VAR 0 5
20604: PPUSH
20605: CALL_OW 448
20609: IFFALSE 20644
// begin result := [ chassis , engine , control , weapon ] ;
20611: LD_ADDR_VAR 0 6
20615: PUSH
20616: LD_VAR 0 2
20620: PUSH
20621: LD_VAR 0 3
20625: PUSH
20626: LD_VAR 0 4
20630: PUSH
20631: LD_VAR 0 5
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: ST_TO_ADDR
// exit ;
20642: GO 21056
// end ; _chassis := AvailableChassisList ( factory ) ;
20644: LD_ADDR_VAR 0 9
20648: PUSH
20649: LD_VAR 0 1
20653: PPUSH
20654: CALL_OW 475
20658: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20659: LD_ADDR_VAR 0 11
20663: PUSH
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 476
20673: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20674: LD_ADDR_VAR 0 12
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 477
20688: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20689: LD_ADDR_VAR 0 10
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 478
20703: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20704: LD_VAR 0 9
20708: NOT
20709: PUSH
20710: LD_VAR 0 11
20714: NOT
20715: OR
20716: PUSH
20717: LD_VAR 0 12
20721: NOT
20722: OR
20723: PUSH
20724: LD_VAR 0 10
20728: NOT
20729: OR
20730: IFFALSE 20765
// begin result := [ chassis , engine , control , weapon ] ;
20732: LD_ADDR_VAR 0 6
20736: PUSH
20737: LD_VAR 0 2
20741: PUSH
20742: LD_VAR 0 3
20746: PUSH
20747: LD_VAR 0 4
20751: PUSH
20752: LD_VAR 0 5
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: ST_TO_ADDR
// exit ;
20763: GO 21056
// end ; if not chassis in _chassis then
20765: LD_VAR 0 2
20769: PUSH
20770: LD_VAR 0 9
20774: IN
20775: NOT
20776: IFFALSE 20802
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20778: LD_ADDR_VAR 0 2
20782: PUSH
20783: LD_VAR 0 9
20787: PUSH
20788: LD_INT 1
20790: PPUSH
20791: LD_VAR 0 9
20795: PPUSH
20796: CALL_OW 12
20800: ARRAY
20801: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20802: LD_VAR 0 2
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: CALL 21061 0 2
20816: NOT
20817: IFFALSE 20876
// repeat engine := _engine [ 1 ] ;
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_VAR 0 11
20828: PUSH
20829: LD_INT 1
20831: ARRAY
20832: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20833: LD_ADDR_VAR 0 11
20837: PUSH
20838: LD_VAR 0 11
20842: PPUSH
20843: LD_INT 1
20845: PPUSH
20846: CALL_OW 3
20850: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20851: LD_VAR 0 2
20855: PPUSH
20856: LD_VAR 0 3
20860: PPUSH
20861: CALL 21061 0 2
20865: PUSH
20866: LD_VAR 0 11
20870: PUSH
20871: EMPTY
20872: EQUAL
20873: OR
20874: IFFALSE 20819
// if not control in _control then
20876: LD_VAR 0 4
20880: PUSH
20881: LD_VAR 0 12
20885: IN
20886: NOT
20887: IFFALSE 20913
// control := _control [ rand ( 1 , _control ) ] ;
20889: LD_ADDR_VAR 0 4
20893: PUSH
20894: LD_VAR 0 12
20898: PUSH
20899: LD_INT 1
20901: PPUSH
20902: LD_VAR 0 12
20906: PPUSH
20907: CALL_OW 12
20911: ARRAY
20912: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20913: LD_VAR 0 2
20917: PPUSH
20918: LD_VAR 0 5
20922: PPUSH
20923: CALL 21281 0 2
20927: NOT
20928: IFFALSE 20987
// repeat weapon := _weapon [ 1 ] ;
20930: LD_ADDR_VAR 0 5
20934: PUSH
20935: LD_VAR 0 10
20939: PUSH
20940: LD_INT 1
20942: ARRAY
20943: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20944: LD_ADDR_VAR 0 10
20948: PUSH
20949: LD_VAR 0 10
20953: PPUSH
20954: LD_INT 1
20956: PPUSH
20957: CALL_OW 3
20961: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20962: LD_VAR 0 2
20966: PPUSH
20967: LD_VAR 0 5
20971: PPUSH
20972: CALL 21281 0 2
20976: PUSH
20977: LD_VAR 0 10
20981: PUSH
20982: EMPTY
20983: EQUAL
20984: OR
20985: IFFALSE 20930
// result := [ ] ;
20987: LD_ADDR_VAR 0 6
20991: PUSH
20992: EMPTY
20993: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20994: LD_VAR 0 1
20998: PPUSH
20999: LD_VAR 0 2
21003: PPUSH
21004: LD_VAR 0 3
21008: PPUSH
21009: LD_VAR 0 4
21013: PPUSH
21014: LD_VAR 0 5
21018: PPUSH
21019: CALL_OW 448
21023: IFFALSE 21056
// result := [ chassis , engine , control , weapon ] ;
21025: LD_ADDR_VAR 0 6
21029: PUSH
21030: LD_VAR 0 2
21034: PUSH
21035: LD_VAR 0 3
21039: PUSH
21040: LD_VAR 0 4
21044: PUSH
21045: LD_VAR 0 5
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: ST_TO_ADDR
// end ;
21056: LD_VAR 0 6
21060: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
21061: LD_INT 0
21063: PPUSH
// if not chassis or not engine then
21064: LD_VAR 0 1
21068: NOT
21069: PUSH
21070: LD_VAR 0 2
21074: NOT
21075: OR
21076: IFFALSE 21080
// exit ;
21078: GO 21276
// case engine of engine_solar :
21080: LD_VAR 0 2
21084: PUSH
21085: LD_INT 2
21087: DOUBLE
21088: EQUAL
21089: IFTRUE 21093
21091: GO 21131
21093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
21094: LD_ADDR_VAR 0 3
21098: PUSH
21099: LD_INT 11
21101: PUSH
21102: LD_INT 12
21104: PUSH
21105: LD_INT 13
21107: PUSH
21108: LD_INT 14
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: ST_TO_ADDR
21129: GO 21260
21131: LD_INT 1
21133: DOUBLE
21134: EQUAL
21135: IFTRUE 21139
21137: GO 21201
21139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
21140: LD_ADDR_VAR 0 3
21144: PUSH
21145: LD_INT 11
21147: PUSH
21148: LD_INT 12
21150: PUSH
21151: LD_INT 13
21153: PUSH
21154: LD_INT 14
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: LD_INT 4
21168: PUSH
21169: LD_INT 5
21171: PUSH
21172: LD_INT 21
21174: PUSH
21175: LD_INT 23
21177: PUSH
21178: LD_INT 22
21180: PUSH
21181: LD_INT 24
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: ST_TO_ADDR
21199: GO 21260
21201: LD_INT 3
21203: DOUBLE
21204: EQUAL
21205: IFTRUE 21209
21207: GO 21259
21209: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21210: LD_ADDR_VAR 0 3
21214: PUSH
21215: LD_INT 13
21217: PUSH
21218: LD_INT 14
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: LD_INT 3
21226: PUSH
21227: LD_INT 4
21229: PUSH
21230: LD_INT 5
21232: PUSH
21233: LD_INT 21
21235: PUSH
21236: LD_INT 22
21238: PUSH
21239: LD_INT 23
21241: PUSH
21242: LD_INT 24
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: ST_TO_ADDR
21257: GO 21260
21259: POP
// result := ( chassis in result ) ;
21260: LD_ADDR_VAR 0 3
21264: PUSH
21265: LD_VAR 0 1
21269: PUSH
21270: LD_VAR 0 3
21274: IN
21275: ST_TO_ADDR
// end ;
21276: LD_VAR 0 3
21280: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
21281: LD_INT 0
21283: PPUSH
// if not chassis or not weapon then
21284: LD_VAR 0 1
21288: NOT
21289: PUSH
21290: LD_VAR 0 2
21294: NOT
21295: OR
21296: IFFALSE 21300
// exit ;
21298: GO 22362
// case weapon of us_machine_gun :
21300: LD_VAR 0 2
21304: PUSH
21305: LD_INT 2
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21343
21313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_INT 1
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 3
21327: PUSH
21328: LD_INT 4
21330: PUSH
21331: LD_INT 5
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: ST_TO_ADDR
21341: GO 22346
21343: LD_INT 3
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21381
21351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
21352: LD_ADDR_VAR 0 3
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: LD_INT 3
21365: PUSH
21366: LD_INT 4
21368: PUSH
21369: LD_INT 5
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: ST_TO_ADDR
21379: GO 22346
21381: LD_INT 11
21383: DOUBLE
21384: EQUAL
21385: IFTRUE 21389
21387: GO 21419
21389: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
21390: LD_ADDR_VAR 0 3
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: LD_INT 3
21403: PUSH
21404: LD_INT 4
21406: PUSH
21407: LD_INT 5
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: ST_TO_ADDR
21417: GO 22346
21419: LD_INT 4
21421: DOUBLE
21422: EQUAL
21423: IFTRUE 21427
21425: GO 21453
21427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21428: LD_ADDR_VAR 0 3
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 3
21438: PUSH
21439: LD_INT 4
21441: PUSH
21442: LD_INT 5
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: ST_TO_ADDR
21451: GO 22346
21453: LD_INT 5
21455: DOUBLE
21456: EQUAL
21457: IFTRUE 21461
21459: GO 21487
21461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21462: LD_ADDR_VAR 0 3
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 3
21472: PUSH
21473: LD_INT 4
21475: PUSH
21476: LD_INT 5
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: ST_TO_ADDR
21485: GO 22346
21487: LD_INT 9
21489: DOUBLE
21490: EQUAL
21491: IFTRUE 21495
21493: GO 21521
21495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21496: LD_ADDR_VAR 0 3
21500: PUSH
21501: LD_INT 2
21503: PUSH
21504: LD_INT 3
21506: PUSH
21507: LD_INT 4
21509: PUSH
21510: LD_INT 5
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: ST_TO_ADDR
21519: GO 22346
21521: LD_INT 7
21523: DOUBLE
21524: EQUAL
21525: IFTRUE 21529
21527: GO 21555
21529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21530: LD_ADDR_VAR 0 3
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: LD_INT 3
21540: PUSH
21541: LD_INT 4
21543: PUSH
21544: LD_INT 5
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: ST_TO_ADDR
21553: GO 22346
21555: LD_INT 12
21557: DOUBLE
21558: EQUAL
21559: IFTRUE 21563
21561: GO 21589
21563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21564: LD_ADDR_VAR 0 3
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: LD_INT 3
21574: PUSH
21575: LD_INT 4
21577: PUSH
21578: LD_INT 5
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: ST_TO_ADDR
21587: GO 22346
21589: LD_INT 13
21591: DOUBLE
21592: EQUAL
21593: IFTRUE 21597
21595: GO 21623
21597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21598: LD_ADDR_VAR 0 3
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: LD_INT 3
21608: PUSH
21609: LD_INT 4
21611: PUSH
21612: LD_INT 5
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: ST_TO_ADDR
21621: GO 22346
21623: LD_INT 14
21625: DOUBLE
21626: EQUAL
21627: IFTRUE 21631
21629: GO 21649
21631: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21632: LD_ADDR_VAR 0 3
21636: PUSH
21637: LD_INT 4
21639: PUSH
21640: LD_INT 5
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: ST_TO_ADDR
21647: GO 22346
21649: LD_INT 6
21651: DOUBLE
21652: EQUAL
21653: IFTRUE 21657
21655: GO 21675
21657: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21658: LD_ADDR_VAR 0 3
21662: PUSH
21663: LD_INT 4
21665: PUSH
21666: LD_INT 5
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: ST_TO_ADDR
21673: GO 22346
21675: LD_INT 10
21677: DOUBLE
21678: EQUAL
21679: IFTRUE 21683
21681: GO 21701
21683: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21684: LD_ADDR_VAR 0 3
21688: PUSH
21689: LD_INT 4
21691: PUSH
21692: LD_INT 5
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: ST_TO_ADDR
21699: GO 22346
21701: LD_INT 22
21703: DOUBLE
21704: EQUAL
21705: IFTRUE 21709
21707: GO 21735
21709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21710: LD_ADDR_VAR 0 3
21714: PUSH
21715: LD_INT 11
21717: PUSH
21718: LD_INT 12
21720: PUSH
21721: LD_INT 13
21723: PUSH
21724: LD_INT 14
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: ST_TO_ADDR
21733: GO 22346
21735: LD_INT 23
21737: DOUBLE
21738: EQUAL
21739: IFTRUE 21743
21741: GO 21769
21743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21744: LD_ADDR_VAR 0 3
21748: PUSH
21749: LD_INT 11
21751: PUSH
21752: LD_INT 12
21754: PUSH
21755: LD_INT 13
21757: PUSH
21758: LD_INT 14
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: ST_TO_ADDR
21767: GO 22346
21769: LD_INT 24
21771: DOUBLE
21772: EQUAL
21773: IFTRUE 21777
21775: GO 21803
21777: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21778: LD_ADDR_VAR 0 3
21782: PUSH
21783: LD_INT 11
21785: PUSH
21786: LD_INT 12
21788: PUSH
21789: LD_INT 13
21791: PUSH
21792: LD_INT 14
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: ST_TO_ADDR
21801: GO 22346
21803: LD_INT 30
21805: DOUBLE
21806: EQUAL
21807: IFTRUE 21811
21809: GO 21837
21811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21812: LD_ADDR_VAR 0 3
21816: PUSH
21817: LD_INT 11
21819: PUSH
21820: LD_INT 12
21822: PUSH
21823: LD_INT 13
21825: PUSH
21826: LD_INT 14
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: ST_TO_ADDR
21835: GO 22346
21837: LD_INT 25
21839: DOUBLE
21840: EQUAL
21841: IFTRUE 21845
21843: GO 21863
21845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21846: LD_ADDR_VAR 0 3
21850: PUSH
21851: LD_INT 13
21853: PUSH
21854: LD_INT 14
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: ST_TO_ADDR
21861: GO 22346
21863: LD_INT 27
21865: DOUBLE
21866: EQUAL
21867: IFTRUE 21871
21869: GO 21889
21871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21872: LD_ADDR_VAR 0 3
21876: PUSH
21877: LD_INT 13
21879: PUSH
21880: LD_INT 14
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: ST_TO_ADDR
21887: GO 22346
21889: LD_EXP 18
21893: DOUBLE
21894: EQUAL
21895: IFTRUE 21899
21897: GO 21925
21899: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21900: LD_ADDR_VAR 0 3
21904: PUSH
21905: LD_INT 11
21907: PUSH
21908: LD_INT 12
21910: PUSH
21911: LD_INT 13
21913: PUSH
21914: LD_INT 14
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: ST_TO_ADDR
21923: GO 22346
21925: LD_INT 28
21927: DOUBLE
21928: EQUAL
21929: IFTRUE 21933
21931: GO 21951
21933: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21934: LD_ADDR_VAR 0 3
21938: PUSH
21939: LD_INT 13
21941: PUSH
21942: LD_INT 14
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: ST_TO_ADDR
21949: GO 22346
21951: LD_INT 29
21953: DOUBLE
21954: EQUAL
21955: IFTRUE 21959
21957: GO 21977
21959: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21960: LD_ADDR_VAR 0 3
21964: PUSH
21965: LD_INT 13
21967: PUSH
21968: LD_INT 14
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: ST_TO_ADDR
21975: GO 22346
21977: LD_INT 31
21979: DOUBLE
21980: EQUAL
21981: IFTRUE 21985
21983: GO 22003
21985: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21986: LD_ADDR_VAR 0 3
21990: PUSH
21991: LD_INT 13
21993: PUSH
21994: LD_INT 14
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: ST_TO_ADDR
22001: GO 22346
22003: LD_INT 26
22005: DOUBLE
22006: EQUAL
22007: IFTRUE 22011
22009: GO 22029
22011: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
22012: LD_ADDR_VAR 0 3
22016: PUSH
22017: LD_INT 13
22019: PUSH
22020: LD_INT 14
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: ST_TO_ADDR
22027: GO 22346
22029: LD_INT 42
22031: DOUBLE
22032: EQUAL
22033: IFTRUE 22037
22035: GO 22063
22037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
22038: LD_ADDR_VAR 0 3
22042: PUSH
22043: LD_INT 21
22045: PUSH
22046: LD_INT 22
22048: PUSH
22049: LD_INT 23
22051: PUSH
22052: LD_INT 24
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: ST_TO_ADDR
22061: GO 22346
22063: LD_INT 43
22065: DOUBLE
22066: EQUAL
22067: IFTRUE 22071
22069: GO 22097
22071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
22072: LD_ADDR_VAR 0 3
22076: PUSH
22077: LD_INT 21
22079: PUSH
22080: LD_INT 22
22082: PUSH
22083: LD_INT 23
22085: PUSH
22086: LD_INT 24
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: ST_TO_ADDR
22095: GO 22346
22097: LD_INT 44
22099: DOUBLE
22100: EQUAL
22101: IFTRUE 22105
22103: GO 22131
22105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
22106: LD_ADDR_VAR 0 3
22110: PUSH
22111: LD_INT 21
22113: PUSH
22114: LD_INT 22
22116: PUSH
22117: LD_INT 23
22119: PUSH
22120: LD_INT 24
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: ST_TO_ADDR
22129: GO 22346
22131: LD_INT 45
22133: DOUBLE
22134: EQUAL
22135: IFTRUE 22139
22137: GO 22165
22139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
22140: LD_ADDR_VAR 0 3
22144: PUSH
22145: LD_INT 21
22147: PUSH
22148: LD_INT 22
22150: PUSH
22151: LD_INT 23
22153: PUSH
22154: LD_INT 24
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: ST_TO_ADDR
22163: GO 22346
22165: LD_INT 49
22167: DOUBLE
22168: EQUAL
22169: IFTRUE 22173
22171: GO 22199
22173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
22174: LD_ADDR_VAR 0 3
22178: PUSH
22179: LD_INT 21
22181: PUSH
22182: LD_INT 22
22184: PUSH
22185: LD_INT 23
22187: PUSH
22188: LD_INT 24
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: ST_TO_ADDR
22197: GO 22346
22199: LD_INT 51
22201: DOUBLE
22202: EQUAL
22203: IFTRUE 22207
22205: GO 22233
22207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
22208: LD_ADDR_VAR 0 3
22212: PUSH
22213: LD_INT 21
22215: PUSH
22216: LD_INT 22
22218: PUSH
22219: LD_INT 23
22221: PUSH
22222: LD_INT 24
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: ST_TO_ADDR
22231: GO 22346
22233: LD_INT 52
22235: DOUBLE
22236: EQUAL
22237: IFTRUE 22241
22239: GO 22267
22241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
22242: LD_ADDR_VAR 0 3
22246: PUSH
22247: LD_INT 21
22249: PUSH
22250: LD_INT 22
22252: PUSH
22253: LD_INT 23
22255: PUSH
22256: LD_INT 24
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: ST_TO_ADDR
22265: GO 22346
22267: LD_INT 53
22269: DOUBLE
22270: EQUAL
22271: IFTRUE 22275
22273: GO 22293
22275: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
22276: LD_ADDR_VAR 0 3
22280: PUSH
22281: LD_INT 23
22283: PUSH
22284: LD_INT 24
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: ST_TO_ADDR
22291: GO 22346
22293: LD_INT 46
22295: DOUBLE
22296: EQUAL
22297: IFTRUE 22301
22299: GO 22319
22301: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
22302: LD_ADDR_VAR 0 3
22306: PUSH
22307: LD_INT 23
22309: PUSH
22310: LD_INT 24
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: ST_TO_ADDR
22317: GO 22346
22319: LD_INT 47
22321: DOUBLE
22322: EQUAL
22323: IFTRUE 22327
22325: GO 22345
22327: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22328: LD_ADDR_VAR 0 3
22332: PUSH
22333: LD_INT 23
22335: PUSH
22336: LD_INT 24
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: ST_TO_ADDR
22343: GO 22346
22345: POP
// result := ( chassis in result ) ;
22346: LD_ADDR_VAR 0 3
22350: PUSH
22351: LD_VAR 0 1
22355: PUSH
22356: LD_VAR 0 3
22360: IN
22361: ST_TO_ADDR
// end ;
22362: LD_VAR 0 3
22366: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
22367: LD_INT 0
22369: PPUSH
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
22375: PPUSH
// result := array ;
22376: LD_ADDR_VAR 0 5
22380: PUSH
22381: LD_VAR 0 1
22385: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
22386: LD_VAR 0 1
22390: NOT
22391: PUSH
22392: LD_VAR 0 2
22396: NOT
22397: OR
22398: PUSH
22399: LD_VAR 0 3
22403: NOT
22404: OR
22405: PUSH
22406: LD_VAR 0 2
22410: PUSH
22411: LD_VAR 0 1
22415: GREATER
22416: OR
22417: PUSH
22418: LD_VAR 0 3
22422: PUSH
22423: LD_VAR 0 1
22427: GREATER
22428: OR
22429: IFFALSE 22433
// exit ;
22431: GO 22729
// if direction then
22433: LD_VAR 0 4
22437: IFFALSE 22501
// begin d := 1 ;
22439: LD_ADDR_VAR 0 9
22443: PUSH
22444: LD_INT 1
22446: ST_TO_ADDR
// if i_from > i_to then
22447: LD_VAR 0 2
22451: PUSH
22452: LD_VAR 0 3
22456: GREATER
22457: IFFALSE 22483
// length := ( array - i_from ) + i_to else
22459: LD_ADDR_VAR 0 11
22463: PUSH
22464: LD_VAR 0 1
22468: PUSH
22469: LD_VAR 0 2
22473: MINUS
22474: PUSH
22475: LD_VAR 0 3
22479: PLUS
22480: ST_TO_ADDR
22481: GO 22499
// length := i_to - i_from ;
22483: LD_ADDR_VAR 0 11
22487: PUSH
22488: LD_VAR 0 3
22492: PUSH
22493: LD_VAR 0 2
22497: MINUS
22498: ST_TO_ADDR
// end else
22499: GO 22562
// begin d := - 1 ;
22501: LD_ADDR_VAR 0 9
22505: PUSH
22506: LD_INT 1
22508: NEG
22509: ST_TO_ADDR
// if i_from > i_to then
22510: LD_VAR 0 2
22514: PUSH
22515: LD_VAR 0 3
22519: GREATER
22520: IFFALSE 22540
// length := i_from - i_to else
22522: LD_ADDR_VAR 0 11
22526: PUSH
22527: LD_VAR 0 2
22531: PUSH
22532: LD_VAR 0 3
22536: MINUS
22537: ST_TO_ADDR
22538: GO 22562
// length := ( array - i_to ) + i_from ;
22540: LD_ADDR_VAR 0 11
22544: PUSH
22545: LD_VAR 0 1
22549: PUSH
22550: LD_VAR 0 3
22554: MINUS
22555: PUSH
22556: LD_VAR 0 2
22560: PLUS
22561: ST_TO_ADDR
// end ; if not length then
22562: LD_VAR 0 11
22566: NOT
22567: IFFALSE 22571
// exit ;
22569: GO 22729
// tmp := array ;
22571: LD_ADDR_VAR 0 10
22575: PUSH
22576: LD_VAR 0 1
22580: ST_TO_ADDR
// for i = 1 to length do
22581: LD_ADDR_VAR 0 6
22585: PUSH
22586: DOUBLE
22587: LD_INT 1
22589: DEC
22590: ST_TO_ADDR
22591: LD_VAR 0 11
22595: PUSH
22596: FOR_TO
22597: IFFALSE 22717
// begin for j = 1 to array do
22599: LD_ADDR_VAR 0 7
22603: PUSH
22604: DOUBLE
22605: LD_INT 1
22607: DEC
22608: ST_TO_ADDR
22609: LD_VAR 0 1
22613: PUSH
22614: FOR_TO
22615: IFFALSE 22703
// begin k := j + d ;
22617: LD_ADDR_VAR 0 8
22621: PUSH
22622: LD_VAR 0 7
22626: PUSH
22627: LD_VAR 0 9
22631: PLUS
22632: ST_TO_ADDR
// if k > array then
22633: LD_VAR 0 8
22637: PUSH
22638: LD_VAR 0 1
22642: GREATER
22643: IFFALSE 22653
// k := 1 ;
22645: LD_ADDR_VAR 0 8
22649: PUSH
22650: LD_INT 1
22652: ST_TO_ADDR
// if not k then
22653: LD_VAR 0 8
22657: NOT
22658: IFFALSE 22670
// k := array ;
22660: LD_ADDR_VAR 0 8
22664: PUSH
22665: LD_VAR 0 1
22669: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22670: LD_ADDR_VAR 0 10
22674: PUSH
22675: LD_VAR 0 10
22679: PPUSH
22680: LD_VAR 0 8
22684: PPUSH
22685: LD_VAR 0 1
22689: PUSH
22690: LD_VAR 0 7
22694: ARRAY
22695: PPUSH
22696: CALL_OW 1
22700: ST_TO_ADDR
// end ;
22701: GO 22614
22703: POP
22704: POP
// array := tmp ;
22705: LD_ADDR_VAR 0 1
22709: PUSH
22710: LD_VAR 0 10
22714: ST_TO_ADDR
// end ;
22715: GO 22596
22717: POP
22718: POP
// result := array ;
22719: LD_ADDR_VAR 0 5
22723: PUSH
22724: LD_VAR 0 1
22728: ST_TO_ADDR
// end ;
22729: LD_VAR 0 5
22733: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22734: LD_INT 0
22736: PPUSH
22737: PPUSH
// result := 0 ;
22738: LD_ADDR_VAR 0 3
22742: PUSH
22743: LD_INT 0
22745: ST_TO_ADDR
// if not array or not value in array then
22746: LD_VAR 0 1
22750: NOT
22751: PUSH
22752: LD_VAR 0 2
22756: PUSH
22757: LD_VAR 0 1
22761: IN
22762: NOT
22763: OR
22764: IFFALSE 22768
// exit ;
22766: GO 22822
// for i = 1 to array do
22768: LD_ADDR_VAR 0 4
22772: PUSH
22773: DOUBLE
22774: LD_INT 1
22776: DEC
22777: ST_TO_ADDR
22778: LD_VAR 0 1
22782: PUSH
22783: FOR_TO
22784: IFFALSE 22820
// if value = array [ i ] then
22786: LD_VAR 0 2
22790: PUSH
22791: LD_VAR 0 1
22795: PUSH
22796: LD_VAR 0 4
22800: ARRAY
22801: EQUAL
22802: IFFALSE 22818
// begin result := i ;
22804: LD_ADDR_VAR 0 3
22808: PUSH
22809: LD_VAR 0 4
22813: ST_TO_ADDR
// exit ;
22814: POP
22815: POP
22816: GO 22822
// end ;
22818: GO 22783
22820: POP
22821: POP
// end ;
22822: LD_VAR 0 3
22826: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22827: LD_INT 0
22829: PPUSH
// vc_chassis := chassis ;
22830: LD_ADDR_OWVAR 37
22834: PUSH
22835: LD_VAR 0 1
22839: ST_TO_ADDR
// vc_engine := engine ;
22840: LD_ADDR_OWVAR 39
22844: PUSH
22845: LD_VAR 0 2
22849: ST_TO_ADDR
// vc_control := control ;
22850: LD_ADDR_OWVAR 38
22854: PUSH
22855: LD_VAR 0 3
22859: ST_TO_ADDR
// vc_weapon := weapon ;
22860: LD_ADDR_OWVAR 40
22864: PUSH
22865: LD_VAR 0 4
22869: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22870: LD_ADDR_OWVAR 41
22874: PUSH
22875: LD_VAR 0 5
22879: ST_TO_ADDR
// end ;
22880: LD_VAR 0 6
22884: RET
// export function WantPlant ( unit ) ; var task ; begin
22885: LD_INT 0
22887: PPUSH
22888: PPUSH
// result := false ;
22889: LD_ADDR_VAR 0 2
22893: PUSH
22894: LD_INT 0
22896: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22897: LD_ADDR_VAR 0 3
22901: PUSH
22902: LD_VAR 0 1
22906: PPUSH
22907: CALL_OW 437
22911: ST_TO_ADDR
// if task then
22912: LD_VAR 0 3
22916: IFFALSE 22944
// if task [ 1 ] [ 1 ] = p then
22918: LD_VAR 0 3
22922: PUSH
22923: LD_INT 1
22925: ARRAY
22926: PUSH
22927: LD_INT 1
22929: ARRAY
22930: PUSH
22931: LD_STRING p
22933: EQUAL
22934: IFFALSE 22944
// result := true ;
22936: LD_ADDR_VAR 0 2
22940: PUSH
22941: LD_INT 1
22943: ST_TO_ADDR
// end ;
22944: LD_VAR 0 2
22948: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22949: LD_INT 0
22951: PPUSH
22952: PPUSH
22953: PPUSH
22954: PPUSH
// if pos < 1 then
22955: LD_VAR 0 2
22959: PUSH
22960: LD_INT 1
22962: LESS
22963: IFFALSE 22967
// exit ;
22965: GO 23270
// if pos = 1 then
22967: LD_VAR 0 2
22971: PUSH
22972: LD_INT 1
22974: EQUAL
22975: IFFALSE 23008
// result := Replace ( arr , pos [ 1 ] , value ) else
22977: LD_ADDR_VAR 0 4
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: LD_VAR 0 2
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: PPUSH
22996: LD_VAR 0 3
23000: PPUSH
23001: CALL_OW 1
23005: ST_TO_ADDR
23006: GO 23270
// begin tmp := arr ;
23008: LD_ADDR_VAR 0 6
23012: PUSH
23013: LD_VAR 0 1
23017: ST_TO_ADDR
// s_arr := [ tmp ] ;
23018: LD_ADDR_VAR 0 7
23022: PUSH
23023: LD_VAR 0 6
23027: PUSH
23028: EMPTY
23029: LIST
23030: ST_TO_ADDR
// for i = 1 to pos - 1 do
23031: LD_ADDR_VAR 0 5
23035: PUSH
23036: DOUBLE
23037: LD_INT 1
23039: DEC
23040: ST_TO_ADDR
23041: LD_VAR 0 2
23045: PUSH
23046: LD_INT 1
23048: MINUS
23049: PUSH
23050: FOR_TO
23051: IFFALSE 23096
// begin tmp := tmp [ pos [ i ] ] ;
23053: LD_ADDR_VAR 0 6
23057: PUSH
23058: LD_VAR 0 6
23062: PUSH
23063: LD_VAR 0 2
23067: PUSH
23068: LD_VAR 0 5
23072: ARRAY
23073: ARRAY
23074: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
23075: LD_ADDR_VAR 0 7
23079: PUSH
23080: LD_VAR 0 7
23084: PUSH
23085: LD_VAR 0 6
23089: PUSH
23090: EMPTY
23091: LIST
23092: ADD
23093: ST_TO_ADDR
// end ;
23094: GO 23050
23096: POP
23097: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
23098: LD_ADDR_VAR 0 6
23102: PUSH
23103: LD_VAR 0 6
23107: PPUSH
23108: LD_VAR 0 2
23112: PUSH
23113: LD_VAR 0 2
23117: ARRAY
23118: PPUSH
23119: LD_VAR 0 3
23123: PPUSH
23124: CALL_OW 1
23128: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
23129: LD_ADDR_VAR 0 7
23133: PUSH
23134: LD_VAR 0 7
23138: PPUSH
23139: LD_VAR 0 7
23143: PPUSH
23144: LD_VAR 0 6
23148: PPUSH
23149: CALL_OW 1
23153: ST_TO_ADDR
// for i = s_arr downto 2 do
23154: LD_ADDR_VAR 0 5
23158: PUSH
23159: DOUBLE
23160: LD_VAR 0 7
23164: INC
23165: ST_TO_ADDR
23166: LD_INT 2
23168: PUSH
23169: FOR_DOWNTO
23170: IFFALSE 23254
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
23172: LD_ADDR_VAR 0 6
23176: PUSH
23177: LD_VAR 0 7
23181: PUSH
23182: LD_VAR 0 5
23186: PUSH
23187: LD_INT 1
23189: MINUS
23190: ARRAY
23191: PPUSH
23192: LD_VAR 0 2
23196: PUSH
23197: LD_VAR 0 5
23201: PUSH
23202: LD_INT 1
23204: MINUS
23205: ARRAY
23206: PPUSH
23207: LD_VAR 0 7
23211: PUSH
23212: LD_VAR 0 5
23216: ARRAY
23217: PPUSH
23218: CALL_OW 1
23222: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
23223: LD_ADDR_VAR 0 7
23227: PUSH
23228: LD_VAR 0 7
23232: PPUSH
23233: LD_VAR 0 5
23237: PUSH
23238: LD_INT 1
23240: MINUS
23241: PPUSH
23242: LD_VAR 0 6
23246: PPUSH
23247: CALL_OW 1
23251: ST_TO_ADDR
// end ;
23252: GO 23169
23254: POP
23255: POP
// result := s_arr [ 1 ] ;
23256: LD_ADDR_VAR 0 4
23260: PUSH
23261: LD_VAR 0 7
23265: PUSH
23266: LD_INT 1
23268: ARRAY
23269: ST_TO_ADDR
// end ; end ;
23270: LD_VAR 0 4
23274: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
23275: LD_INT 0
23277: PPUSH
23278: PPUSH
// if not list then
23279: LD_VAR 0 1
23283: NOT
23284: IFFALSE 23288
// exit ;
23286: GO 23379
// i := list [ pos1 ] ;
23288: LD_ADDR_VAR 0 5
23292: PUSH
23293: LD_VAR 0 1
23297: PUSH
23298: LD_VAR 0 2
23302: ARRAY
23303: ST_TO_ADDR
// if not i then
23304: LD_VAR 0 5
23308: NOT
23309: IFFALSE 23313
// exit ;
23311: GO 23379
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
23313: LD_ADDR_VAR 0 1
23317: PUSH
23318: LD_VAR 0 1
23322: PPUSH
23323: LD_VAR 0 2
23327: PPUSH
23328: LD_VAR 0 1
23332: PUSH
23333: LD_VAR 0 3
23337: ARRAY
23338: PPUSH
23339: CALL_OW 1
23343: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
23344: LD_ADDR_VAR 0 1
23348: PUSH
23349: LD_VAR 0 1
23353: PPUSH
23354: LD_VAR 0 3
23358: PPUSH
23359: LD_VAR 0 5
23363: PPUSH
23364: CALL_OW 1
23368: ST_TO_ADDR
// result := list ;
23369: LD_ADDR_VAR 0 4
23373: PUSH
23374: LD_VAR 0 1
23378: ST_TO_ADDR
// end ;
23379: LD_VAR 0 4
23383: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
23384: LD_INT 0
23386: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
23387: LD_ADDR_VAR 0 5
23391: PUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 250
23401: PPUSH
23402: LD_VAR 0 1
23406: PPUSH
23407: CALL_OW 251
23411: PPUSH
23412: LD_VAR 0 2
23416: PPUSH
23417: LD_VAR 0 3
23421: PPUSH
23422: LD_VAR 0 4
23426: PPUSH
23427: CALL 23437 0 5
23431: ST_TO_ADDR
// end ;
23432: LD_VAR 0 5
23436: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
23441: PPUSH
23442: PPUSH
// if not list then
23443: LD_VAR 0 3
23447: NOT
23448: IFFALSE 23452
// exit ;
23450: GO 23840
// result := [ ] ;
23452: LD_ADDR_VAR 0 6
23456: PUSH
23457: EMPTY
23458: ST_TO_ADDR
// for i in list do
23459: LD_ADDR_VAR 0 7
23463: PUSH
23464: LD_VAR 0 3
23468: PUSH
23469: FOR_IN
23470: IFFALSE 23672
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23472: LD_ADDR_VAR 0 9
23476: PUSH
23477: LD_VAR 0 7
23481: PPUSH
23482: LD_VAR 0 1
23486: PPUSH
23487: LD_VAR 0 2
23491: PPUSH
23492: CALL_OW 297
23496: ST_TO_ADDR
// if not result then
23497: LD_VAR 0 6
23501: NOT
23502: IFFALSE 23528
// result := [ [ i , tmp ] ] else
23504: LD_ADDR_VAR 0 6
23508: PUSH
23509: LD_VAR 0 7
23513: PUSH
23514: LD_VAR 0 9
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: ST_TO_ADDR
23526: GO 23670
// begin if result [ result ] [ 2 ] < tmp then
23528: LD_VAR 0 6
23532: PUSH
23533: LD_VAR 0 6
23537: ARRAY
23538: PUSH
23539: LD_INT 2
23541: ARRAY
23542: PUSH
23543: LD_VAR 0 9
23547: LESS
23548: IFFALSE 23590
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23550: LD_ADDR_VAR 0 6
23554: PUSH
23555: LD_VAR 0 6
23559: PPUSH
23560: LD_VAR 0 6
23564: PUSH
23565: LD_INT 1
23567: PLUS
23568: PPUSH
23569: LD_VAR 0 7
23573: PUSH
23574: LD_VAR 0 9
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PPUSH
23583: CALL_OW 2
23587: ST_TO_ADDR
23588: GO 23670
// for j = 1 to result do
23590: LD_ADDR_VAR 0 8
23594: PUSH
23595: DOUBLE
23596: LD_INT 1
23598: DEC
23599: ST_TO_ADDR
23600: LD_VAR 0 6
23604: PUSH
23605: FOR_TO
23606: IFFALSE 23668
// begin if tmp < result [ j ] [ 2 ] then
23608: LD_VAR 0 9
23612: PUSH
23613: LD_VAR 0 6
23617: PUSH
23618: LD_VAR 0 8
23622: ARRAY
23623: PUSH
23624: LD_INT 2
23626: ARRAY
23627: LESS
23628: IFFALSE 23666
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23630: LD_ADDR_VAR 0 6
23634: PUSH
23635: LD_VAR 0 6
23639: PPUSH
23640: LD_VAR 0 8
23644: PPUSH
23645: LD_VAR 0 7
23649: PUSH
23650: LD_VAR 0 9
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PPUSH
23659: CALL_OW 2
23663: ST_TO_ADDR
// break ;
23664: GO 23668
// end ; end ;
23666: GO 23605
23668: POP
23669: POP
// end ; end ;
23670: GO 23469
23672: POP
23673: POP
// if result and not asc then
23674: LD_VAR 0 6
23678: PUSH
23679: LD_VAR 0 4
23683: NOT
23684: AND
23685: IFFALSE 23760
// begin tmp := result ;
23687: LD_ADDR_VAR 0 9
23691: PUSH
23692: LD_VAR 0 6
23696: ST_TO_ADDR
// for i = tmp downto 1 do
23697: LD_ADDR_VAR 0 7
23701: PUSH
23702: DOUBLE
23703: LD_VAR 0 9
23707: INC
23708: ST_TO_ADDR
23709: LD_INT 1
23711: PUSH
23712: FOR_DOWNTO
23713: IFFALSE 23758
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23715: LD_ADDR_VAR 0 6
23719: PUSH
23720: LD_VAR 0 6
23724: PPUSH
23725: LD_VAR 0 9
23729: PUSH
23730: LD_VAR 0 7
23734: MINUS
23735: PUSH
23736: LD_INT 1
23738: PLUS
23739: PPUSH
23740: LD_VAR 0 9
23744: PUSH
23745: LD_VAR 0 7
23749: ARRAY
23750: PPUSH
23751: CALL_OW 1
23755: ST_TO_ADDR
23756: GO 23712
23758: POP
23759: POP
// end ; tmp := [ ] ;
23760: LD_ADDR_VAR 0 9
23764: PUSH
23765: EMPTY
23766: ST_TO_ADDR
// if mode then
23767: LD_VAR 0 5
23771: IFFALSE 23840
// begin for i = 1 to result do
23773: LD_ADDR_VAR 0 7
23777: PUSH
23778: DOUBLE
23779: LD_INT 1
23781: DEC
23782: ST_TO_ADDR
23783: LD_VAR 0 6
23787: PUSH
23788: FOR_TO
23789: IFFALSE 23828
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23791: LD_ADDR_VAR 0 9
23795: PUSH
23796: LD_VAR 0 9
23800: PPUSH
23801: LD_VAR 0 7
23805: PPUSH
23806: LD_VAR 0 6
23810: PUSH
23811: LD_VAR 0 7
23815: ARRAY
23816: PUSH
23817: LD_INT 1
23819: ARRAY
23820: PPUSH
23821: CALL_OW 1
23825: ST_TO_ADDR
23826: GO 23788
23828: POP
23829: POP
// result := tmp ;
23830: LD_ADDR_VAR 0 6
23834: PUSH
23835: LD_VAR 0 9
23839: ST_TO_ADDR
// end ; end ;
23840: LD_VAR 0 6
23844: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23845: LD_INT 0
23847: PPUSH
23848: PPUSH
23849: PPUSH
23850: PPUSH
23851: PPUSH
23852: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23853: LD_ADDR_VAR 0 5
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: EMPTY
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: ST_TO_ADDR
// if not x or not y then
23875: LD_VAR 0 2
23879: NOT
23880: PUSH
23881: LD_VAR 0 3
23885: NOT
23886: OR
23887: IFFALSE 23891
// exit ;
23889: GO 25543
// if not range then
23891: LD_VAR 0 4
23895: NOT
23896: IFFALSE 23906
// range := 10 ;
23898: LD_ADDR_VAR 0 4
23902: PUSH
23903: LD_INT 10
23905: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23906: LD_ADDR_VAR 0 8
23910: PUSH
23911: LD_INT 81
23913: PUSH
23914: LD_VAR 0 1
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 92
23925: PUSH
23926: LD_VAR 0 2
23930: PUSH
23931: LD_VAR 0 3
23935: PUSH
23936: LD_VAR 0 4
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 3
23949: PUSH
23950: LD_INT 21
23952: PUSH
23953: LD_INT 3
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: LIST
23968: PPUSH
23969: CALL_OW 69
23973: ST_TO_ADDR
// if not tmp then
23974: LD_VAR 0 8
23978: NOT
23979: IFFALSE 23983
// exit ;
23981: GO 25543
// for i in tmp do
23983: LD_ADDR_VAR 0 6
23987: PUSH
23988: LD_VAR 0 8
23992: PUSH
23993: FOR_IN
23994: IFFALSE 25518
// begin points := [ 0 , 0 , 0 ] ;
23996: LD_ADDR_VAR 0 9
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: LD_INT 0
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: LIST
24014: ST_TO_ADDR
// bpoints := 1 ;
24015: LD_ADDR_VAR 0 10
24019: PUSH
24020: LD_INT 1
24022: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24023: LD_VAR 0 6
24027: PPUSH
24028: CALL_OW 247
24032: PUSH
24033: LD_INT 1
24035: DOUBLE
24036: EQUAL
24037: IFTRUE 24041
24039: GO 24619
24041: POP
// begin if GetClass ( i ) = 1 then
24042: LD_VAR 0 6
24046: PPUSH
24047: CALL_OW 257
24051: PUSH
24052: LD_INT 1
24054: EQUAL
24055: IFFALSE 24076
// points := [ 10 , 5 , 3 ] ;
24057: LD_ADDR_VAR 0 9
24061: PUSH
24062: LD_INT 10
24064: PUSH
24065: LD_INT 5
24067: PUSH
24068: LD_INT 3
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: LIST
24075: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24076: LD_VAR 0 6
24080: PPUSH
24081: CALL_OW 257
24085: PUSH
24086: LD_INT 2
24088: PUSH
24089: LD_INT 3
24091: PUSH
24092: LD_INT 4
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: LIST
24099: IN
24100: IFFALSE 24121
// points := [ 3 , 2 , 1 ] ;
24102: LD_ADDR_VAR 0 9
24106: PUSH
24107: LD_INT 3
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: LIST
24120: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24121: LD_VAR 0 6
24125: PPUSH
24126: CALL_OW 257
24130: PUSH
24131: LD_INT 5
24133: EQUAL
24134: IFFALSE 24155
// points := [ 130 , 5 , 2 ] ;
24136: LD_ADDR_VAR 0 9
24140: PUSH
24141: LD_INT 130
24143: PUSH
24144: LD_INT 5
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24155: LD_VAR 0 6
24159: PPUSH
24160: CALL_OW 257
24164: PUSH
24165: LD_INT 8
24167: EQUAL
24168: IFFALSE 24189
// points := [ 35 , 35 , 30 ] ;
24170: LD_ADDR_VAR 0 9
24174: PUSH
24175: LD_INT 35
24177: PUSH
24178: LD_INT 35
24180: PUSH
24181: LD_INT 30
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24189: LD_VAR 0 6
24193: PPUSH
24194: CALL_OW 257
24198: PUSH
24199: LD_INT 9
24201: EQUAL
24202: IFFALSE 24223
// points := [ 20 , 55 , 40 ] ;
24204: LD_ADDR_VAR 0 9
24208: PUSH
24209: LD_INT 20
24211: PUSH
24212: LD_INT 55
24214: PUSH
24215: LD_INT 40
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24223: LD_VAR 0 6
24227: PPUSH
24228: CALL_OW 257
24232: PUSH
24233: LD_INT 12
24235: PUSH
24236: LD_INT 16
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: IN
24243: IFFALSE 24264
// points := [ 5 , 3 , 2 ] ;
24245: LD_ADDR_VAR 0 9
24249: PUSH
24250: LD_INT 5
24252: PUSH
24253: LD_INT 3
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24264: LD_VAR 0 6
24268: PPUSH
24269: CALL_OW 257
24273: PUSH
24274: LD_INT 17
24276: EQUAL
24277: IFFALSE 24298
// points := [ 100 , 50 , 75 ] ;
24279: LD_ADDR_VAR 0 9
24283: PUSH
24284: LD_INT 100
24286: PUSH
24287: LD_INT 50
24289: PUSH
24290: LD_INT 75
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24298: LD_VAR 0 6
24302: PPUSH
24303: CALL_OW 257
24307: PUSH
24308: LD_INT 15
24310: EQUAL
24311: IFFALSE 24332
// points := [ 10 , 5 , 3 ] ;
24313: LD_ADDR_VAR 0 9
24317: PUSH
24318: LD_INT 10
24320: PUSH
24321: LD_INT 5
24323: PUSH
24324: LD_INT 3
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: LIST
24331: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24332: LD_VAR 0 6
24336: PPUSH
24337: CALL_OW 257
24341: PUSH
24342: LD_INT 14
24344: EQUAL
24345: IFFALSE 24366
// points := [ 10 , 0 , 0 ] ;
24347: LD_ADDR_VAR 0 9
24351: PUSH
24352: LD_INT 10
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24366: LD_VAR 0 6
24370: PPUSH
24371: CALL_OW 257
24375: PUSH
24376: LD_INT 11
24378: EQUAL
24379: IFFALSE 24400
// points := [ 30 , 10 , 5 ] ;
24381: LD_ADDR_VAR 0 9
24385: PUSH
24386: LD_INT 30
24388: PUSH
24389: LD_INT 10
24391: PUSH
24392: LD_INT 5
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24400: LD_VAR 0 1
24404: PPUSH
24405: LD_INT 5
24407: PPUSH
24408: CALL_OW 321
24412: PUSH
24413: LD_INT 2
24415: EQUAL
24416: IFFALSE 24433
// bpoints := bpoints * 1.8 ;
24418: LD_ADDR_VAR 0 10
24422: PUSH
24423: LD_VAR 0 10
24427: PUSH
24428: LD_REAL  1.80000000000000E+0000
24431: MUL
24432: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24433: LD_VAR 0 6
24437: PPUSH
24438: CALL_OW 257
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: LD_INT 3
24451: PUSH
24452: LD_INT 4
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: IN
24461: PUSH
24462: LD_VAR 0 1
24466: PPUSH
24467: LD_INT 51
24469: PPUSH
24470: CALL_OW 321
24474: PUSH
24475: LD_INT 2
24477: EQUAL
24478: AND
24479: IFFALSE 24496
// bpoints := bpoints * 1.2 ;
24481: LD_ADDR_VAR 0 10
24485: PUSH
24486: LD_VAR 0 10
24490: PUSH
24491: LD_REAL  1.20000000000000E+0000
24494: MUL
24495: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24496: LD_VAR 0 6
24500: PPUSH
24501: CALL_OW 257
24505: PUSH
24506: LD_INT 5
24508: PUSH
24509: LD_INT 7
24511: PUSH
24512: LD_INT 9
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: IN
24520: PUSH
24521: LD_VAR 0 1
24525: PPUSH
24526: LD_INT 52
24528: PPUSH
24529: CALL_OW 321
24533: PUSH
24534: LD_INT 2
24536: EQUAL
24537: AND
24538: IFFALSE 24555
// bpoints := bpoints * 1.5 ;
24540: LD_ADDR_VAR 0 10
24544: PUSH
24545: LD_VAR 0 10
24549: PUSH
24550: LD_REAL  1.50000000000000E+0000
24553: MUL
24554: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24555: LD_VAR 0 1
24559: PPUSH
24560: LD_INT 66
24562: PPUSH
24563: CALL_OW 321
24567: PUSH
24568: LD_INT 2
24570: EQUAL
24571: IFFALSE 24588
// bpoints := bpoints * 1.1 ;
24573: LD_ADDR_VAR 0 10
24577: PUSH
24578: LD_VAR 0 10
24582: PUSH
24583: LD_REAL  1.10000000000000E+0000
24586: MUL
24587: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24588: LD_ADDR_VAR 0 10
24592: PUSH
24593: LD_VAR 0 10
24597: PUSH
24598: LD_VAR 0 6
24602: PPUSH
24603: LD_INT 1
24605: PPUSH
24606: CALL_OW 259
24610: PUSH
24611: LD_REAL  1.15000000000000E+0000
24614: MUL
24615: MUL
24616: ST_TO_ADDR
// end ; unit_vehicle :
24617: GO 25447
24619: LD_INT 2
24621: DOUBLE
24622: EQUAL
24623: IFTRUE 24627
24625: GO 25435
24627: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24628: LD_VAR 0 6
24632: PPUSH
24633: CALL_OW 264
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: LD_INT 42
24643: PUSH
24644: LD_INT 24
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: LIST
24651: IN
24652: IFFALSE 24673
// points := [ 25 , 5 , 3 ] ;
24654: LD_ADDR_VAR 0 9
24658: PUSH
24659: LD_INT 25
24661: PUSH
24662: LD_INT 5
24664: PUSH
24665: LD_INT 3
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: LIST
24672: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24673: LD_VAR 0 6
24677: PPUSH
24678: CALL_OW 264
24682: PUSH
24683: LD_INT 4
24685: PUSH
24686: LD_INT 43
24688: PUSH
24689: LD_INT 25
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: LIST
24696: IN
24697: IFFALSE 24718
// points := [ 40 , 15 , 5 ] ;
24699: LD_ADDR_VAR 0 9
24703: PUSH
24704: LD_INT 40
24706: PUSH
24707: LD_INT 15
24709: PUSH
24710: LD_INT 5
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24718: LD_VAR 0 6
24722: PPUSH
24723: CALL_OW 264
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: LD_INT 23
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: IN
24738: IFFALSE 24759
// points := [ 7 , 25 , 8 ] ;
24740: LD_ADDR_VAR 0 9
24744: PUSH
24745: LD_INT 7
24747: PUSH
24748: LD_INT 25
24750: PUSH
24751: LD_INT 8
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: LIST
24758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24759: LD_VAR 0 6
24763: PPUSH
24764: CALL_OW 264
24768: PUSH
24769: LD_INT 5
24771: PUSH
24772: LD_INT 27
24774: PUSH
24775: LD_INT 44
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: IN
24783: IFFALSE 24804
// points := [ 14 , 50 , 16 ] ;
24785: LD_ADDR_VAR 0 9
24789: PUSH
24790: LD_INT 14
24792: PUSH
24793: LD_INT 50
24795: PUSH
24796: LD_INT 16
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24804: LD_VAR 0 6
24808: PPUSH
24809: CALL_OW 264
24813: PUSH
24814: LD_INT 6
24816: PUSH
24817: LD_INT 46
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: IN
24824: IFFALSE 24845
// points := [ 32 , 120 , 70 ] ;
24826: LD_ADDR_VAR 0 9
24830: PUSH
24831: LD_INT 32
24833: PUSH
24834: LD_INT 120
24836: PUSH
24837: LD_INT 70
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: LIST
24844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24845: LD_VAR 0 6
24849: PPUSH
24850: CALL_OW 264
24854: PUSH
24855: LD_INT 7
24857: PUSH
24858: LD_INT 28
24860: PUSH
24861: LD_INT 45
24863: PUSH
24864: LD_EXP 18
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: IN
24875: IFFALSE 24896
// points := [ 35 , 20 , 45 ] ;
24877: LD_ADDR_VAR 0 9
24881: PUSH
24882: LD_INT 35
24884: PUSH
24885: LD_INT 20
24887: PUSH
24888: LD_INT 45
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: LIST
24895: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24896: LD_VAR 0 6
24900: PPUSH
24901: CALL_OW 264
24905: PUSH
24906: LD_INT 47
24908: PUSH
24909: EMPTY
24910: LIST
24911: IN
24912: IFFALSE 24933
// points := [ 67 , 45 , 75 ] ;
24914: LD_ADDR_VAR 0 9
24918: PUSH
24919: LD_INT 67
24921: PUSH
24922: LD_INT 45
24924: PUSH
24925: LD_INT 75
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: LIST
24932: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24933: LD_VAR 0 6
24937: PPUSH
24938: CALL_OW 264
24942: PUSH
24943: LD_INT 26
24945: PUSH
24946: EMPTY
24947: LIST
24948: IN
24949: IFFALSE 24970
// points := [ 120 , 30 , 80 ] ;
24951: LD_ADDR_VAR 0 9
24955: PUSH
24956: LD_INT 120
24958: PUSH
24959: LD_INT 30
24961: PUSH
24962: LD_INT 80
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: LIST
24969: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24970: LD_VAR 0 6
24974: PPUSH
24975: CALL_OW 264
24979: PUSH
24980: LD_INT 22
24982: PUSH
24983: EMPTY
24984: LIST
24985: IN
24986: IFFALSE 25007
// points := [ 40 , 1 , 1 ] ;
24988: LD_ADDR_VAR 0 9
24992: PUSH
24993: LD_INT 40
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: LIST
25006: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25007: LD_VAR 0 6
25011: PPUSH
25012: CALL_OW 264
25016: PUSH
25017: LD_INT 29
25019: PUSH
25020: EMPTY
25021: LIST
25022: IN
25023: IFFALSE 25044
// points := [ 70 , 200 , 400 ] ;
25025: LD_ADDR_VAR 0 9
25029: PUSH
25030: LD_INT 70
25032: PUSH
25033: LD_INT 200
25035: PUSH
25036: LD_INT 400
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25044: LD_VAR 0 6
25048: PPUSH
25049: CALL_OW 264
25053: PUSH
25054: LD_INT 14
25056: PUSH
25057: LD_INT 53
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: IN
25064: IFFALSE 25085
// points := [ 40 , 10 , 20 ] ;
25066: LD_ADDR_VAR 0 9
25070: PUSH
25071: LD_INT 40
25073: PUSH
25074: LD_INT 10
25076: PUSH
25077: LD_INT 20
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25085: LD_VAR 0 6
25089: PPUSH
25090: CALL_OW 264
25094: PUSH
25095: LD_INT 9
25097: PUSH
25098: EMPTY
25099: LIST
25100: IN
25101: IFFALSE 25122
// points := [ 5 , 70 , 20 ] ;
25103: LD_ADDR_VAR 0 9
25107: PUSH
25108: LD_INT 5
25110: PUSH
25111: LD_INT 70
25113: PUSH
25114: LD_INT 20
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25122: LD_VAR 0 6
25126: PPUSH
25127: CALL_OW 264
25131: PUSH
25132: LD_INT 10
25134: PUSH
25135: EMPTY
25136: LIST
25137: IN
25138: IFFALSE 25159
// points := [ 35 , 110 , 70 ] ;
25140: LD_ADDR_VAR 0 9
25144: PUSH
25145: LD_INT 35
25147: PUSH
25148: LD_INT 110
25150: PUSH
25151: LD_INT 70
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: LIST
25158: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25159: LD_VAR 0 6
25163: PPUSH
25164: CALL_OW 265
25168: PUSH
25169: LD_INT 25
25171: EQUAL
25172: IFFALSE 25193
// points := [ 80 , 65 , 100 ] ;
25174: LD_ADDR_VAR 0 9
25178: PUSH
25179: LD_INT 80
25181: PUSH
25182: LD_INT 65
25184: PUSH
25185: LD_INT 100
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25193: LD_VAR 0 6
25197: PPUSH
25198: CALL_OW 263
25202: PUSH
25203: LD_INT 1
25205: EQUAL
25206: IFFALSE 25241
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25208: LD_ADDR_VAR 0 10
25212: PUSH
25213: LD_VAR 0 10
25217: PUSH
25218: LD_VAR 0 6
25222: PPUSH
25223: CALL_OW 311
25227: PPUSH
25228: LD_INT 3
25230: PPUSH
25231: CALL_OW 259
25235: PUSH
25236: LD_INT 4
25238: MUL
25239: MUL
25240: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25241: LD_VAR 0 6
25245: PPUSH
25246: CALL_OW 263
25250: PUSH
25251: LD_INT 2
25253: EQUAL
25254: IFFALSE 25305
// begin j := IsControledBy ( i ) ;
25256: LD_ADDR_VAR 0 7
25260: PUSH
25261: LD_VAR 0 6
25265: PPUSH
25266: CALL_OW 312
25270: ST_TO_ADDR
// if j then
25271: LD_VAR 0 7
25275: IFFALSE 25305
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25277: LD_ADDR_VAR 0 10
25281: PUSH
25282: LD_VAR 0 10
25286: PUSH
25287: LD_VAR 0 7
25291: PPUSH
25292: LD_INT 3
25294: PPUSH
25295: CALL_OW 259
25299: PUSH
25300: LD_INT 3
25302: MUL
25303: MUL
25304: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25305: LD_VAR 0 6
25309: PPUSH
25310: CALL_OW 264
25314: PUSH
25315: LD_INT 5
25317: PUSH
25318: LD_INT 6
25320: PUSH
25321: LD_INT 46
25323: PUSH
25324: LD_INT 44
25326: PUSH
25327: LD_INT 47
25329: PUSH
25330: LD_INT 45
25332: PUSH
25333: LD_INT 28
25335: PUSH
25336: LD_INT 7
25338: PUSH
25339: LD_INT 27
25341: PUSH
25342: LD_INT 29
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: IN
25357: PUSH
25358: LD_VAR 0 1
25362: PPUSH
25363: LD_INT 52
25365: PPUSH
25366: CALL_OW 321
25370: PUSH
25371: LD_INT 2
25373: EQUAL
25374: AND
25375: IFFALSE 25392
// bpoints := bpoints * 1.2 ;
25377: LD_ADDR_VAR 0 10
25381: PUSH
25382: LD_VAR 0 10
25386: PUSH
25387: LD_REAL  1.20000000000000E+0000
25390: MUL
25391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25392: LD_VAR 0 6
25396: PPUSH
25397: CALL_OW 264
25401: PUSH
25402: LD_INT 6
25404: PUSH
25405: LD_INT 46
25407: PUSH
25408: LD_INT 47
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: IN
25416: IFFALSE 25433
// bpoints := bpoints * 1.2 ;
25418: LD_ADDR_VAR 0 10
25422: PUSH
25423: LD_VAR 0 10
25427: PUSH
25428: LD_REAL  1.20000000000000E+0000
25431: MUL
25432: ST_TO_ADDR
// end ; unit_building :
25433: GO 25447
25435: LD_INT 3
25437: DOUBLE
25438: EQUAL
25439: IFTRUE 25443
25441: GO 25446
25443: POP
// ; end ;
25444: GO 25447
25446: POP
// for j = 1 to 3 do
25447: LD_ADDR_VAR 0 7
25451: PUSH
25452: DOUBLE
25453: LD_INT 1
25455: DEC
25456: ST_TO_ADDR
25457: LD_INT 3
25459: PUSH
25460: FOR_TO
25461: IFFALSE 25514
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25463: LD_ADDR_VAR 0 5
25467: PUSH
25468: LD_VAR 0 5
25472: PPUSH
25473: LD_VAR 0 7
25477: PPUSH
25478: LD_VAR 0 5
25482: PUSH
25483: LD_VAR 0 7
25487: ARRAY
25488: PUSH
25489: LD_VAR 0 9
25493: PUSH
25494: LD_VAR 0 7
25498: ARRAY
25499: PUSH
25500: LD_VAR 0 10
25504: MUL
25505: PLUS
25506: PPUSH
25507: CALL_OW 1
25511: ST_TO_ADDR
25512: GO 25460
25514: POP
25515: POP
// end ;
25516: GO 23993
25518: POP
25519: POP
// result := Replace ( result , 4 , tmp ) ;
25520: LD_ADDR_VAR 0 5
25524: PUSH
25525: LD_VAR 0 5
25529: PPUSH
25530: LD_INT 4
25532: PPUSH
25533: LD_VAR 0 8
25537: PPUSH
25538: CALL_OW 1
25542: ST_TO_ADDR
// end ;
25543: LD_VAR 0 5
25547: RET
// export function DangerAtRange ( unit , range ) ; begin
25548: LD_INT 0
25550: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25551: LD_ADDR_VAR 0 3
25555: PUSH
25556: LD_VAR 0 1
25560: PPUSH
25561: CALL_OW 255
25565: PPUSH
25566: LD_VAR 0 1
25570: PPUSH
25571: CALL_OW 250
25575: PPUSH
25576: LD_VAR 0 1
25580: PPUSH
25581: CALL_OW 251
25585: PPUSH
25586: LD_VAR 0 2
25590: PPUSH
25591: CALL 23845 0 4
25595: ST_TO_ADDR
// end ;
25596: LD_VAR 0 3
25600: RET
// export function DangerInArea ( side , area ) ; begin
25601: LD_INT 0
25603: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25604: LD_ADDR_VAR 0 3
25608: PUSH
25609: LD_VAR 0 2
25613: PPUSH
25614: LD_INT 81
25616: PUSH
25617: LD_VAR 0 1
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PPUSH
25626: CALL_OW 70
25630: ST_TO_ADDR
// end ;
25631: LD_VAR 0 3
25635: RET
// export function IsExtension ( b ) ; begin
25636: LD_INT 0
25638: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25639: LD_ADDR_VAR 0 2
25643: PUSH
25644: LD_VAR 0 1
25648: PUSH
25649: LD_INT 23
25651: PUSH
25652: LD_INT 20
25654: PUSH
25655: LD_INT 22
25657: PUSH
25658: LD_INT 17
25660: PUSH
25661: LD_INT 24
25663: PUSH
25664: LD_INT 21
25666: PUSH
25667: LD_INT 19
25669: PUSH
25670: LD_INT 16
25672: PUSH
25673: LD_INT 25
25675: PUSH
25676: LD_INT 18
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: IN
25691: ST_TO_ADDR
// end ;
25692: LD_VAR 0 2
25696: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25697: LD_INT 0
25699: PPUSH
25700: PPUSH
25701: PPUSH
// result := [ ] ;
25702: LD_ADDR_VAR 0 4
25706: PUSH
25707: EMPTY
25708: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25709: LD_ADDR_VAR 0 5
25713: PUSH
25714: LD_VAR 0 2
25718: PPUSH
25719: LD_INT 21
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PPUSH
25729: CALL_OW 70
25733: ST_TO_ADDR
// if not tmp then
25734: LD_VAR 0 5
25738: NOT
25739: IFFALSE 25743
// exit ;
25741: GO 25807
// if checkLink then
25743: LD_VAR 0 3
25747: IFFALSE 25797
// begin for i in tmp do
25749: LD_ADDR_VAR 0 6
25753: PUSH
25754: LD_VAR 0 5
25758: PUSH
25759: FOR_IN
25760: IFFALSE 25795
// if GetBase ( i ) <> base then
25762: LD_VAR 0 6
25766: PPUSH
25767: CALL_OW 274
25771: PUSH
25772: LD_VAR 0 1
25776: NONEQUAL
25777: IFFALSE 25793
// ComLinkToBase ( base , i ) ;
25779: LD_VAR 0 1
25783: PPUSH
25784: LD_VAR 0 6
25788: PPUSH
25789: CALL_OW 169
25793: GO 25759
25795: POP
25796: POP
// end ; result := tmp ;
25797: LD_ADDR_VAR 0 4
25801: PUSH
25802: LD_VAR 0 5
25806: ST_TO_ADDR
// end ;
25807: LD_VAR 0 4
25811: RET
// export function ComComplete ( units , b ) ; var i ; begin
25812: LD_INT 0
25814: PPUSH
25815: PPUSH
// if not units then
25816: LD_VAR 0 1
25820: NOT
25821: IFFALSE 25825
// exit ;
25823: GO 25915
// for i in units do
25825: LD_ADDR_VAR 0 4
25829: PUSH
25830: LD_VAR 0 1
25834: PUSH
25835: FOR_IN
25836: IFFALSE 25913
// if BuildingStatus ( b ) = bs_build then
25838: LD_VAR 0 2
25842: PPUSH
25843: CALL_OW 461
25847: PUSH
25848: LD_INT 1
25850: EQUAL
25851: IFFALSE 25911
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25853: LD_VAR 0 4
25857: PPUSH
25858: LD_STRING h
25860: PUSH
25861: LD_VAR 0 2
25865: PPUSH
25866: CALL_OW 250
25870: PUSH
25871: LD_VAR 0 2
25875: PPUSH
25876: CALL_OW 251
25880: PUSH
25881: LD_VAR 0 2
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: PUSH
25904: EMPTY
25905: LIST
25906: PPUSH
25907: CALL_OW 446
25911: GO 25835
25913: POP
25914: POP
// end ;
25915: LD_VAR 0 3
25919: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25920: LD_INT 0
25922: PPUSH
25923: PPUSH
25924: PPUSH
25925: PPUSH
25926: PPUSH
25927: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25928: LD_VAR 0 1
25932: NOT
25933: PUSH
25934: LD_VAR 0 1
25938: PPUSH
25939: CALL_OW 263
25943: PUSH
25944: LD_INT 2
25946: NONEQUAL
25947: OR
25948: IFFALSE 25952
// exit ;
25950: GO 26268
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25952: LD_ADDR_VAR 0 6
25956: PUSH
25957: LD_INT 22
25959: PUSH
25960: LD_VAR 0 1
25964: PPUSH
25965: CALL_OW 255
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 30
25979: PUSH
25980: LD_INT 36
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 34
25989: PUSH
25990: LD_INT 31
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PPUSH
26006: CALL_OW 69
26010: ST_TO_ADDR
// if not tmp then
26011: LD_VAR 0 6
26015: NOT
26016: IFFALSE 26020
// exit ;
26018: GO 26268
// result := [ ] ;
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: EMPTY
26026: ST_TO_ADDR
// for i in tmp do
26027: LD_ADDR_VAR 0 3
26031: PUSH
26032: LD_VAR 0 6
26036: PUSH
26037: FOR_IN
26038: IFFALSE 26109
// begin t := UnitsInside ( i ) ;
26040: LD_ADDR_VAR 0 4
26044: PUSH
26045: LD_VAR 0 3
26049: PPUSH
26050: CALL_OW 313
26054: ST_TO_ADDR
// if t then
26055: LD_VAR 0 4
26059: IFFALSE 26107
// for j in t do
26061: LD_ADDR_VAR 0 7
26065: PUSH
26066: LD_VAR 0 4
26070: PUSH
26071: FOR_IN
26072: IFFALSE 26105
// result := Replace ( result , result + 1 , j ) ;
26074: LD_ADDR_VAR 0 2
26078: PUSH
26079: LD_VAR 0 2
26083: PPUSH
26084: LD_VAR 0 2
26088: PUSH
26089: LD_INT 1
26091: PLUS
26092: PPUSH
26093: LD_VAR 0 7
26097: PPUSH
26098: CALL_OW 1
26102: ST_TO_ADDR
26103: GO 26071
26105: POP
26106: POP
// end ;
26107: GO 26037
26109: POP
26110: POP
// if not result then
26111: LD_VAR 0 2
26115: NOT
26116: IFFALSE 26120
// exit ;
26118: GO 26268
// mech := result [ 1 ] ;
26120: LD_ADDR_VAR 0 5
26124: PUSH
26125: LD_VAR 0 2
26129: PUSH
26130: LD_INT 1
26132: ARRAY
26133: ST_TO_ADDR
// if result > 1 then
26134: LD_VAR 0 2
26138: PUSH
26139: LD_INT 1
26141: GREATER
26142: IFFALSE 26254
// begin for i = 2 to result do
26144: LD_ADDR_VAR 0 3
26148: PUSH
26149: DOUBLE
26150: LD_INT 2
26152: DEC
26153: ST_TO_ADDR
26154: LD_VAR 0 2
26158: PUSH
26159: FOR_TO
26160: IFFALSE 26252
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26162: LD_ADDR_VAR 0 4
26166: PUSH
26167: LD_VAR 0 2
26171: PUSH
26172: LD_VAR 0 3
26176: ARRAY
26177: PPUSH
26178: LD_INT 3
26180: PPUSH
26181: CALL_OW 259
26185: PUSH
26186: LD_VAR 0 2
26190: PUSH
26191: LD_VAR 0 3
26195: ARRAY
26196: PPUSH
26197: CALL_OW 432
26201: MINUS
26202: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26203: LD_VAR 0 4
26207: PUSH
26208: LD_VAR 0 5
26212: PPUSH
26213: LD_INT 3
26215: PPUSH
26216: CALL_OW 259
26220: PUSH
26221: LD_VAR 0 5
26225: PPUSH
26226: CALL_OW 432
26230: MINUS
26231: GREATEREQUAL
26232: IFFALSE 26250
// mech := result [ i ] ;
26234: LD_ADDR_VAR 0 5
26238: PUSH
26239: LD_VAR 0 2
26243: PUSH
26244: LD_VAR 0 3
26248: ARRAY
26249: ST_TO_ADDR
// end ;
26250: GO 26159
26252: POP
26253: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26254: LD_VAR 0 1
26258: PPUSH
26259: LD_VAR 0 5
26263: PPUSH
26264: CALL_OW 135
// end ;
26268: LD_VAR 0 2
26272: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
26283: PPUSH
26284: PPUSH
26285: PPUSH
26286: PPUSH
26287: PPUSH
// result := [ ] ;
26288: LD_ADDR_VAR 0 7
26292: PUSH
26293: EMPTY
26294: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26295: LD_VAR 0 1
26299: PPUSH
26300: CALL_OW 266
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: IN
26315: NOT
26316: IFFALSE 26320
// exit ;
26318: GO 27954
// if name then
26320: LD_VAR 0 3
26324: IFFALSE 26340
// SetBName ( base_dep , name ) ;
26326: LD_VAR 0 1
26330: PPUSH
26331: LD_VAR 0 3
26335: PPUSH
26336: CALL_OW 500
// base := GetBase ( base_dep ) ;
26340: LD_ADDR_VAR 0 15
26344: PUSH
26345: LD_VAR 0 1
26349: PPUSH
26350: CALL_OW 274
26354: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26355: LD_ADDR_VAR 0 16
26359: PUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 255
26369: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26370: LD_ADDR_VAR 0 17
26374: PUSH
26375: LD_VAR 0 1
26379: PPUSH
26380: CALL_OW 248
26384: ST_TO_ADDR
// if sources then
26385: LD_VAR 0 5
26389: IFFALSE 26436
// for i = 1 to 3 do
26391: LD_ADDR_VAR 0 8
26395: PUSH
26396: DOUBLE
26397: LD_INT 1
26399: DEC
26400: ST_TO_ADDR
26401: LD_INT 3
26403: PUSH
26404: FOR_TO
26405: IFFALSE 26434
// AddResourceType ( base , i , sources [ i ] ) ;
26407: LD_VAR 0 15
26411: PPUSH
26412: LD_VAR 0 8
26416: PPUSH
26417: LD_VAR 0 5
26421: PUSH
26422: LD_VAR 0 8
26426: ARRAY
26427: PPUSH
26428: CALL_OW 276
26432: GO 26404
26434: POP
26435: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26436: LD_ADDR_VAR 0 18
26440: PUSH
26441: LD_VAR 0 15
26445: PPUSH
26446: LD_VAR 0 2
26450: PPUSH
26451: LD_INT 1
26453: PPUSH
26454: CALL 25697 0 3
26458: ST_TO_ADDR
// InitHc ;
26459: CALL_OW 19
// InitUc ;
26463: CALL_OW 18
// uc_side := side ;
26467: LD_ADDR_OWVAR 20
26471: PUSH
26472: LD_VAR 0 16
26476: ST_TO_ADDR
// uc_nation := nation ;
26477: LD_ADDR_OWVAR 21
26481: PUSH
26482: LD_VAR 0 17
26486: ST_TO_ADDR
// if buildings then
26487: LD_VAR 0 18
26491: IFFALSE 27813
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26493: LD_ADDR_VAR 0 19
26497: PUSH
26498: LD_VAR 0 18
26502: PPUSH
26503: LD_INT 2
26505: PUSH
26506: LD_INT 30
26508: PUSH
26509: LD_INT 29
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 30
26518: PUSH
26519: LD_INT 30
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 72
26535: ST_TO_ADDR
// if tmp then
26536: LD_VAR 0 19
26540: IFFALSE 26588
// for i in tmp do
26542: LD_ADDR_VAR 0 8
26546: PUSH
26547: LD_VAR 0 19
26551: PUSH
26552: FOR_IN
26553: IFFALSE 26586
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26555: LD_VAR 0 8
26559: PPUSH
26560: CALL_OW 250
26564: PPUSH
26565: LD_VAR 0 8
26569: PPUSH
26570: CALL_OW 251
26574: PPUSH
26575: LD_VAR 0 16
26579: PPUSH
26580: CALL_OW 441
26584: GO 26552
26586: POP
26587: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26588: LD_VAR 0 18
26592: PPUSH
26593: LD_INT 2
26595: PUSH
26596: LD_INT 30
26598: PUSH
26599: LD_INT 32
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 30
26608: PUSH
26609: LD_INT 33
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: PPUSH
26621: CALL_OW 72
26625: IFFALSE 26713
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26627: LD_ADDR_VAR 0 8
26631: PUSH
26632: LD_VAR 0 18
26636: PPUSH
26637: LD_INT 2
26639: PUSH
26640: LD_INT 30
26642: PUSH
26643: LD_INT 32
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 30
26652: PUSH
26653: LD_INT 33
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: PPUSH
26665: CALL_OW 72
26669: PUSH
26670: FOR_IN
26671: IFFALSE 26711
// begin if not GetBWeapon ( i ) then
26673: LD_VAR 0 8
26677: PPUSH
26678: CALL_OW 269
26682: NOT
26683: IFFALSE 26709
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26685: LD_VAR 0 8
26689: PPUSH
26690: LD_VAR 0 8
26694: PPUSH
26695: LD_VAR 0 2
26699: PPUSH
26700: CALL 27959 0 2
26704: PPUSH
26705: CALL_OW 431
// end ;
26709: GO 26670
26711: POP
26712: POP
// end ; for i = 1 to personel do
26713: LD_ADDR_VAR 0 8
26717: PUSH
26718: DOUBLE
26719: LD_INT 1
26721: DEC
26722: ST_TO_ADDR
26723: LD_VAR 0 6
26727: PUSH
26728: FOR_TO
26729: IFFALSE 27793
// begin if i > 4 then
26731: LD_VAR 0 8
26735: PUSH
26736: LD_INT 4
26738: GREATER
26739: IFFALSE 26743
// break ;
26741: GO 27793
// case i of 1 :
26743: LD_VAR 0 8
26747: PUSH
26748: LD_INT 1
26750: DOUBLE
26751: EQUAL
26752: IFTRUE 26756
26754: GO 26836
26756: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26757: LD_ADDR_VAR 0 12
26761: PUSH
26762: LD_VAR 0 18
26766: PPUSH
26767: LD_INT 22
26769: PUSH
26770: LD_VAR 0 16
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 58
26781: PUSH
26782: EMPTY
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 30
26790: PUSH
26791: LD_INT 32
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 30
26800: PUSH
26801: LD_INT 4
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 30
26810: PUSH
26811: LD_INT 5
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: PPUSH
26829: CALL_OW 72
26833: ST_TO_ADDR
26834: GO 27058
26836: LD_INT 2
26838: DOUBLE
26839: EQUAL
26840: IFTRUE 26844
26842: GO 26906
26844: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26845: LD_ADDR_VAR 0 12
26849: PUSH
26850: LD_VAR 0 18
26854: PPUSH
26855: LD_INT 22
26857: PUSH
26858: LD_VAR 0 16
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 2
26869: PUSH
26870: LD_INT 30
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 30
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PPUSH
26899: CALL_OW 72
26903: ST_TO_ADDR
26904: GO 27058
26906: LD_INT 3
26908: DOUBLE
26909: EQUAL
26910: IFTRUE 26914
26912: GO 26976
26914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26915: LD_ADDR_VAR 0 12
26919: PUSH
26920: LD_VAR 0 18
26924: PPUSH
26925: LD_INT 22
26927: PUSH
26928: LD_VAR 0 16
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: LD_INT 30
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 30
26952: PUSH
26953: LD_INT 3
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PPUSH
26969: CALL_OW 72
26973: ST_TO_ADDR
26974: GO 27058
26976: LD_INT 4
26978: DOUBLE
26979: EQUAL
26980: IFTRUE 26984
26982: GO 27057
26984: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26985: LD_ADDR_VAR 0 12
26989: PUSH
26990: LD_VAR 0 18
26994: PPUSH
26995: LD_INT 22
26997: PUSH
26998: LD_VAR 0 16
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: LD_INT 30
27012: PUSH
27013: LD_INT 6
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 30
27022: PUSH
27023: LD_INT 7
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 30
27032: PUSH
27033: LD_INT 8
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PPUSH
27050: CALL_OW 72
27054: ST_TO_ADDR
27055: GO 27058
27057: POP
// if i = 1 then
27058: LD_VAR 0 8
27062: PUSH
27063: LD_INT 1
27065: EQUAL
27066: IFFALSE 27177
// begin tmp := [ ] ;
27068: LD_ADDR_VAR 0 19
27072: PUSH
27073: EMPTY
27074: ST_TO_ADDR
// for j in f do
27075: LD_ADDR_VAR 0 9
27079: PUSH
27080: LD_VAR 0 12
27084: PUSH
27085: FOR_IN
27086: IFFALSE 27159
// if GetBType ( j ) = b_bunker then
27088: LD_VAR 0 9
27092: PPUSH
27093: CALL_OW 266
27097: PUSH
27098: LD_INT 32
27100: EQUAL
27101: IFFALSE 27128
// tmp := Insert ( tmp , 1 , j ) else
27103: LD_ADDR_VAR 0 19
27107: PUSH
27108: LD_VAR 0 19
27112: PPUSH
27113: LD_INT 1
27115: PPUSH
27116: LD_VAR 0 9
27120: PPUSH
27121: CALL_OW 2
27125: ST_TO_ADDR
27126: GO 27157
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27128: LD_ADDR_VAR 0 19
27132: PUSH
27133: LD_VAR 0 19
27137: PPUSH
27138: LD_VAR 0 19
27142: PUSH
27143: LD_INT 1
27145: PLUS
27146: PPUSH
27147: LD_VAR 0 9
27151: PPUSH
27152: CALL_OW 2
27156: ST_TO_ADDR
27157: GO 27085
27159: POP
27160: POP
// if tmp then
27161: LD_VAR 0 19
27165: IFFALSE 27177
// f := tmp ;
27167: LD_ADDR_VAR 0 12
27171: PUSH
27172: LD_VAR 0 19
27176: ST_TO_ADDR
// end ; x := personel [ i ] ;
27177: LD_ADDR_VAR 0 13
27181: PUSH
27182: LD_VAR 0 6
27186: PUSH
27187: LD_VAR 0 8
27191: ARRAY
27192: ST_TO_ADDR
// if x = - 1 then
27193: LD_VAR 0 13
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: EQUAL
27202: IFFALSE 27411
// begin for j in f do
27204: LD_ADDR_VAR 0 9
27208: PUSH
27209: LD_VAR 0 12
27213: PUSH
27214: FOR_IN
27215: IFFALSE 27407
// repeat InitHc ;
27217: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27221: LD_VAR 0 9
27225: PPUSH
27226: CALL_OW 266
27230: PUSH
27231: LD_INT 5
27233: EQUAL
27234: IFFALSE 27304
// begin if UnitsInside ( j ) < 3 then
27236: LD_VAR 0 9
27240: PPUSH
27241: CALL_OW 313
27245: PUSH
27246: LD_INT 3
27248: LESS
27249: IFFALSE 27285
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27251: LD_INT 0
27253: PPUSH
27254: LD_INT 5
27256: PUSH
27257: LD_INT 8
27259: PUSH
27260: LD_INT 9
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: LIST
27267: PUSH
27268: LD_VAR 0 17
27272: ARRAY
27273: PPUSH
27274: LD_VAR 0 4
27278: PPUSH
27279: CALL_OW 380
27283: GO 27302
// PrepareHuman ( false , i , skill ) ;
27285: LD_INT 0
27287: PPUSH
27288: LD_VAR 0 8
27292: PPUSH
27293: LD_VAR 0 4
27297: PPUSH
27298: CALL_OW 380
// end else
27302: GO 27321
// PrepareHuman ( false , i , skill ) ;
27304: LD_INT 0
27306: PPUSH
27307: LD_VAR 0 8
27311: PPUSH
27312: LD_VAR 0 4
27316: PPUSH
27317: CALL_OW 380
// un := CreateHuman ;
27321: LD_ADDR_VAR 0 14
27325: PUSH
27326: CALL_OW 44
27330: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27331: LD_ADDR_VAR 0 7
27335: PUSH
27336: LD_VAR 0 7
27340: PPUSH
27341: LD_INT 1
27343: PPUSH
27344: LD_VAR 0 14
27348: PPUSH
27349: CALL_OW 2
27353: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27354: LD_VAR 0 14
27358: PPUSH
27359: LD_VAR 0 9
27363: PPUSH
27364: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27368: LD_VAR 0 9
27372: PPUSH
27373: CALL_OW 313
27377: PUSH
27378: LD_INT 6
27380: EQUAL
27381: PUSH
27382: LD_VAR 0 9
27386: PPUSH
27387: CALL_OW 266
27391: PUSH
27392: LD_INT 32
27394: PUSH
27395: LD_INT 31
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: IN
27402: OR
27403: IFFALSE 27217
27405: GO 27214
27407: POP
27408: POP
// end else
27409: GO 27791
// for j = 1 to x do
27411: LD_ADDR_VAR 0 9
27415: PUSH
27416: DOUBLE
27417: LD_INT 1
27419: DEC
27420: ST_TO_ADDR
27421: LD_VAR 0 13
27425: PUSH
27426: FOR_TO
27427: IFFALSE 27789
// begin InitHc ;
27429: CALL_OW 19
// if not f then
27433: LD_VAR 0 12
27437: NOT
27438: IFFALSE 27527
// begin PrepareHuman ( false , i , skill ) ;
27440: LD_INT 0
27442: PPUSH
27443: LD_VAR 0 8
27447: PPUSH
27448: LD_VAR 0 4
27452: PPUSH
27453: CALL_OW 380
// un := CreateHuman ;
27457: LD_ADDR_VAR 0 14
27461: PUSH
27462: CALL_OW 44
27466: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27467: LD_ADDR_VAR 0 7
27471: PUSH
27472: LD_VAR 0 7
27476: PPUSH
27477: LD_INT 1
27479: PPUSH
27480: LD_VAR 0 14
27484: PPUSH
27485: CALL_OW 2
27489: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27490: LD_VAR 0 14
27494: PPUSH
27495: LD_VAR 0 1
27499: PPUSH
27500: CALL_OW 250
27504: PPUSH
27505: LD_VAR 0 1
27509: PPUSH
27510: CALL_OW 251
27514: PPUSH
27515: LD_INT 10
27517: PPUSH
27518: LD_INT 0
27520: PPUSH
27521: CALL_OW 50
// continue ;
27525: GO 27426
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27527: LD_VAR 0 12
27531: PUSH
27532: LD_INT 1
27534: ARRAY
27535: PPUSH
27536: CALL_OW 313
27540: PUSH
27541: LD_VAR 0 12
27545: PUSH
27546: LD_INT 1
27548: ARRAY
27549: PPUSH
27550: CALL_OW 266
27554: PUSH
27555: LD_INT 32
27557: PUSH
27558: LD_INT 31
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: IN
27565: AND
27566: PUSH
27567: LD_VAR 0 12
27571: PUSH
27572: LD_INT 1
27574: ARRAY
27575: PPUSH
27576: CALL_OW 313
27580: PUSH
27581: LD_INT 6
27583: EQUAL
27584: OR
27585: IFFALSE 27605
// f := Delete ( f , 1 ) ;
27587: LD_ADDR_VAR 0 12
27591: PUSH
27592: LD_VAR 0 12
27596: PPUSH
27597: LD_INT 1
27599: PPUSH
27600: CALL_OW 3
27604: ST_TO_ADDR
// if not f then
27605: LD_VAR 0 12
27609: NOT
27610: IFFALSE 27628
// begin x := x + 2 ;
27612: LD_ADDR_VAR 0 13
27616: PUSH
27617: LD_VAR 0 13
27621: PUSH
27622: LD_INT 2
27624: PLUS
27625: ST_TO_ADDR
// continue ;
27626: GO 27426
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27628: LD_VAR 0 12
27632: PUSH
27633: LD_INT 1
27635: ARRAY
27636: PPUSH
27637: CALL_OW 266
27641: PUSH
27642: LD_INT 5
27644: EQUAL
27645: IFFALSE 27719
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27647: LD_VAR 0 12
27651: PUSH
27652: LD_INT 1
27654: ARRAY
27655: PPUSH
27656: CALL_OW 313
27660: PUSH
27661: LD_INT 3
27663: LESS
27664: IFFALSE 27700
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27666: LD_INT 0
27668: PPUSH
27669: LD_INT 5
27671: PUSH
27672: LD_INT 8
27674: PUSH
27675: LD_INT 9
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: PUSH
27683: LD_VAR 0 17
27687: ARRAY
27688: PPUSH
27689: LD_VAR 0 4
27693: PPUSH
27694: CALL_OW 380
27698: GO 27717
// PrepareHuman ( false , i , skill ) ;
27700: LD_INT 0
27702: PPUSH
27703: LD_VAR 0 8
27707: PPUSH
27708: LD_VAR 0 4
27712: PPUSH
27713: CALL_OW 380
// end else
27717: GO 27736
// PrepareHuman ( false , i , skill ) ;
27719: LD_INT 0
27721: PPUSH
27722: LD_VAR 0 8
27726: PPUSH
27727: LD_VAR 0 4
27731: PPUSH
27732: CALL_OW 380
// un := CreateHuman ;
27736: LD_ADDR_VAR 0 14
27740: PUSH
27741: CALL_OW 44
27745: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27746: LD_ADDR_VAR 0 7
27750: PUSH
27751: LD_VAR 0 7
27755: PPUSH
27756: LD_INT 1
27758: PPUSH
27759: LD_VAR 0 14
27763: PPUSH
27764: CALL_OW 2
27768: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27769: LD_VAR 0 14
27773: PPUSH
27774: LD_VAR 0 12
27778: PUSH
27779: LD_INT 1
27781: ARRAY
27782: PPUSH
27783: CALL_OW 52
// end ;
27787: GO 27426
27789: POP
27790: POP
// end ;
27791: GO 26728
27793: POP
27794: POP
// result := result ^ buildings ;
27795: LD_ADDR_VAR 0 7
27799: PUSH
27800: LD_VAR 0 7
27804: PUSH
27805: LD_VAR 0 18
27809: ADD
27810: ST_TO_ADDR
// end else
27811: GO 27954
// begin for i = 1 to personel do
27813: LD_ADDR_VAR 0 8
27817: PUSH
27818: DOUBLE
27819: LD_INT 1
27821: DEC
27822: ST_TO_ADDR
27823: LD_VAR 0 6
27827: PUSH
27828: FOR_TO
27829: IFFALSE 27952
// begin if i > 4 then
27831: LD_VAR 0 8
27835: PUSH
27836: LD_INT 4
27838: GREATER
27839: IFFALSE 27843
// break ;
27841: GO 27952
// x := personel [ i ] ;
27843: LD_ADDR_VAR 0 13
27847: PUSH
27848: LD_VAR 0 6
27852: PUSH
27853: LD_VAR 0 8
27857: ARRAY
27858: ST_TO_ADDR
// if x = - 1 then
27859: LD_VAR 0 13
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: EQUAL
27868: IFFALSE 27872
// continue ;
27870: GO 27828
// PrepareHuman ( false , i , skill ) ;
27872: LD_INT 0
27874: PPUSH
27875: LD_VAR 0 8
27879: PPUSH
27880: LD_VAR 0 4
27884: PPUSH
27885: CALL_OW 380
// un := CreateHuman ;
27889: LD_ADDR_VAR 0 14
27893: PUSH
27894: CALL_OW 44
27898: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27899: LD_VAR 0 14
27903: PPUSH
27904: LD_VAR 0 1
27908: PPUSH
27909: CALL_OW 250
27913: PPUSH
27914: LD_VAR 0 1
27918: PPUSH
27919: CALL_OW 251
27923: PPUSH
27924: LD_INT 10
27926: PPUSH
27927: LD_INT 0
27929: PPUSH
27930: CALL_OW 50
// result := result ^ un ;
27934: LD_ADDR_VAR 0 7
27938: PUSH
27939: LD_VAR 0 7
27943: PUSH
27944: LD_VAR 0 14
27948: ADD
27949: ST_TO_ADDR
// end ;
27950: GO 27828
27952: POP
27953: POP
// end ; end ;
27954: LD_VAR 0 7
27958: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27959: LD_INT 0
27961: PPUSH
27962: PPUSH
27963: PPUSH
27964: PPUSH
27965: PPUSH
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
27974: PPUSH
27975: PPUSH
27976: PPUSH
// result := false ;
27977: LD_ADDR_VAR 0 3
27981: PUSH
27982: LD_INT 0
27984: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27985: LD_VAR 0 1
27989: NOT
27990: PUSH
27991: LD_VAR 0 1
27995: PPUSH
27996: CALL_OW 266
28000: PUSH
28001: LD_INT 32
28003: PUSH
28004: LD_INT 33
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: IN
28011: NOT
28012: OR
28013: IFFALSE 28017
// exit ;
28015: GO 29126
// nat := GetNation ( tower ) ;
28017: LD_ADDR_VAR 0 12
28021: PUSH
28022: LD_VAR 0 1
28026: PPUSH
28027: CALL_OW 248
28031: ST_TO_ADDR
// side := GetSide ( tower ) ;
28032: LD_ADDR_VAR 0 16
28036: PUSH
28037: LD_VAR 0 1
28041: PPUSH
28042: CALL_OW 255
28046: ST_TO_ADDR
// x := GetX ( tower ) ;
28047: LD_ADDR_VAR 0 10
28051: PUSH
28052: LD_VAR 0 1
28056: PPUSH
28057: CALL_OW 250
28061: ST_TO_ADDR
// y := GetY ( tower ) ;
28062: LD_ADDR_VAR 0 11
28066: PUSH
28067: LD_VAR 0 1
28071: PPUSH
28072: CALL_OW 251
28076: ST_TO_ADDR
// if not x or not y then
28077: LD_VAR 0 10
28081: NOT
28082: PUSH
28083: LD_VAR 0 11
28087: NOT
28088: OR
28089: IFFALSE 28093
// exit ;
28091: GO 29126
// weapon := 0 ;
28093: LD_ADDR_VAR 0 18
28097: PUSH
28098: LD_INT 0
28100: ST_TO_ADDR
// fac_list := [ ] ;
28101: LD_ADDR_VAR 0 17
28105: PUSH
28106: EMPTY
28107: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28108: LD_ADDR_VAR 0 6
28112: PUSH
28113: LD_VAR 0 1
28117: PPUSH
28118: CALL_OW 274
28122: PPUSH
28123: LD_VAR 0 2
28127: PPUSH
28128: LD_INT 0
28130: PPUSH
28131: CALL 25697 0 3
28135: PPUSH
28136: LD_INT 30
28138: PUSH
28139: LD_INT 3
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PPUSH
28146: CALL_OW 72
28150: ST_TO_ADDR
// if not factories then
28151: LD_VAR 0 6
28155: NOT
28156: IFFALSE 28160
// exit ;
28158: GO 29126
// for i in factories do
28160: LD_ADDR_VAR 0 8
28164: PUSH
28165: LD_VAR 0 6
28169: PUSH
28170: FOR_IN
28171: IFFALSE 28196
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28173: LD_ADDR_VAR 0 17
28177: PUSH
28178: LD_VAR 0 17
28182: PUSH
28183: LD_VAR 0 8
28187: PPUSH
28188: CALL_OW 478
28192: UNION
28193: ST_TO_ADDR
28194: GO 28170
28196: POP
28197: POP
// if not fac_list then
28198: LD_VAR 0 17
28202: NOT
28203: IFFALSE 28207
// exit ;
28205: GO 29126
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28207: LD_ADDR_VAR 0 5
28211: PUSH
28212: LD_INT 4
28214: PUSH
28215: LD_INT 5
28217: PUSH
28218: LD_INT 9
28220: PUSH
28221: LD_INT 10
28223: PUSH
28224: LD_INT 6
28226: PUSH
28227: LD_INT 7
28229: PUSH
28230: LD_INT 11
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 27
28244: PUSH
28245: LD_INT 28
28247: PUSH
28248: LD_INT 26
28250: PUSH
28251: LD_INT 30
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 43
28262: PUSH
28263: LD_INT 44
28265: PUSH
28266: LD_INT 46
28268: PUSH
28269: LD_INT 45
28271: PUSH
28272: LD_INT 47
28274: PUSH
28275: LD_INT 49
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: PUSH
28291: LD_VAR 0 12
28295: ARRAY
28296: ST_TO_ADDR
// list := list isect fac_list ;
28297: LD_ADDR_VAR 0 5
28301: PUSH
28302: LD_VAR 0 5
28306: PUSH
28307: LD_VAR 0 17
28311: ISECT
28312: ST_TO_ADDR
// if not list then
28313: LD_VAR 0 5
28317: NOT
28318: IFFALSE 28322
// exit ;
28320: GO 29126
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28322: LD_VAR 0 12
28326: PUSH
28327: LD_INT 3
28329: EQUAL
28330: PUSH
28331: LD_INT 49
28333: PUSH
28334: LD_VAR 0 5
28338: IN
28339: AND
28340: PUSH
28341: LD_INT 31
28343: PPUSH
28344: LD_VAR 0 16
28348: PPUSH
28349: CALL_OW 321
28353: PUSH
28354: LD_INT 2
28356: EQUAL
28357: AND
28358: IFFALSE 28418
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28360: LD_INT 22
28362: PUSH
28363: LD_VAR 0 16
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 35
28374: PUSH
28375: LD_INT 49
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 91
28384: PUSH
28385: LD_VAR 0 1
28389: PUSH
28390: LD_INT 10
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: PPUSH
28403: CALL_OW 69
28407: NOT
28408: IFFALSE 28418
// weapon := ru_time_lapser ;
28410: LD_ADDR_VAR 0 18
28414: PUSH
28415: LD_INT 49
28417: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28418: LD_VAR 0 12
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 2
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: IN
28433: PUSH
28434: LD_INT 11
28436: PUSH
28437: LD_VAR 0 5
28441: IN
28442: PUSH
28443: LD_INT 30
28445: PUSH
28446: LD_VAR 0 5
28450: IN
28451: OR
28452: AND
28453: PUSH
28454: LD_INT 6
28456: PPUSH
28457: LD_VAR 0 16
28461: PPUSH
28462: CALL_OW 321
28466: PUSH
28467: LD_INT 2
28469: EQUAL
28470: AND
28471: IFFALSE 28636
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28473: LD_INT 22
28475: PUSH
28476: LD_VAR 0 16
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 2
28487: PUSH
28488: LD_INT 35
28490: PUSH
28491: LD_INT 11
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 35
28500: PUSH
28501: LD_INT 30
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 91
28515: PUSH
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 18
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: PPUSH
28534: CALL_OW 69
28538: NOT
28539: PUSH
28540: LD_INT 22
28542: PUSH
28543: LD_VAR 0 16
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 2
28554: PUSH
28555: LD_INT 30
28557: PUSH
28558: LD_INT 32
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 30
28567: PUSH
28568: LD_INT 33
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 91
28582: PUSH
28583: LD_VAR 0 1
28587: PUSH
28588: LD_INT 12
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: PPUSH
28604: CALL_OW 69
28608: PUSH
28609: LD_INT 2
28611: GREATER
28612: AND
28613: IFFALSE 28636
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28615: LD_ADDR_VAR 0 18
28619: PUSH
28620: LD_INT 11
28622: PUSH
28623: LD_INT 30
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_VAR 0 12
28634: ARRAY
28635: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28636: LD_VAR 0 18
28640: NOT
28641: PUSH
28642: LD_INT 40
28644: PPUSH
28645: LD_VAR 0 16
28649: PPUSH
28650: CALL_OW 321
28654: PUSH
28655: LD_INT 2
28657: EQUAL
28658: AND
28659: PUSH
28660: LD_INT 7
28662: PUSH
28663: LD_VAR 0 5
28667: IN
28668: PUSH
28669: LD_INT 28
28671: PUSH
28672: LD_VAR 0 5
28676: IN
28677: OR
28678: PUSH
28679: LD_INT 45
28681: PUSH
28682: LD_VAR 0 5
28686: IN
28687: OR
28688: AND
28689: IFFALSE 28943
// begin hex := GetHexInfo ( x , y ) ;
28691: LD_ADDR_VAR 0 4
28695: PUSH
28696: LD_VAR 0 10
28700: PPUSH
28701: LD_VAR 0 11
28705: PPUSH
28706: CALL_OW 546
28710: ST_TO_ADDR
// if hex [ 1 ] then
28711: LD_VAR 0 4
28715: PUSH
28716: LD_INT 1
28718: ARRAY
28719: IFFALSE 28723
// exit ;
28721: GO 29126
// height := hex [ 2 ] ;
28723: LD_ADDR_VAR 0 15
28727: PUSH
28728: LD_VAR 0 4
28732: PUSH
28733: LD_INT 2
28735: ARRAY
28736: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28737: LD_ADDR_VAR 0 14
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 3
28750: PUSH
28751: LD_INT 5
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: ST_TO_ADDR
// for i in tmp do
28760: LD_ADDR_VAR 0 8
28764: PUSH
28765: LD_VAR 0 14
28769: PUSH
28770: FOR_IN
28771: IFFALSE 28941
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28773: LD_ADDR_VAR 0 9
28777: PUSH
28778: LD_VAR 0 10
28782: PPUSH
28783: LD_VAR 0 8
28787: PPUSH
28788: LD_INT 5
28790: PPUSH
28791: CALL_OW 272
28795: PUSH
28796: LD_VAR 0 11
28800: PPUSH
28801: LD_VAR 0 8
28805: PPUSH
28806: LD_INT 5
28808: PPUSH
28809: CALL_OW 273
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28818: LD_VAR 0 9
28822: PUSH
28823: LD_INT 1
28825: ARRAY
28826: PPUSH
28827: LD_VAR 0 9
28831: PUSH
28832: LD_INT 2
28834: ARRAY
28835: PPUSH
28836: CALL_OW 488
28840: IFFALSE 28939
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28842: LD_ADDR_VAR 0 4
28846: PUSH
28847: LD_VAR 0 9
28851: PUSH
28852: LD_INT 1
28854: ARRAY
28855: PPUSH
28856: LD_VAR 0 9
28860: PUSH
28861: LD_INT 2
28863: ARRAY
28864: PPUSH
28865: CALL_OW 546
28869: ST_TO_ADDR
// if hex [ 1 ] then
28870: LD_VAR 0 4
28874: PUSH
28875: LD_INT 1
28877: ARRAY
28878: IFFALSE 28882
// continue ;
28880: GO 28770
// h := hex [ 2 ] ;
28882: LD_ADDR_VAR 0 13
28886: PUSH
28887: LD_VAR 0 4
28891: PUSH
28892: LD_INT 2
28894: ARRAY
28895: ST_TO_ADDR
// if h + 7 < height then
28896: LD_VAR 0 13
28900: PUSH
28901: LD_INT 7
28903: PLUS
28904: PUSH
28905: LD_VAR 0 15
28909: LESS
28910: IFFALSE 28939
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28912: LD_ADDR_VAR 0 18
28916: PUSH
28917: LD_INT 7
28919: PUSH
28920: LD_INT 28
28922: PUSH
28923: LD_INT 45
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: LIST
28930: PUSH
28931: LD_VAR 0 12
28935: ARRAY
28936: ST_TO_ADDR
// break ;
28937: GO 28941
// end ; end ; end ;
28939: GO 28770
28941: POP
28942: POP
// end ; if not weapon then
28943: LD_VAR 0 18
28947: NOT
28948: IFFALSE 29008
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28950: LD_ADDR_VAR 0 5
28954: PUSH
28955: LD_VAR 0 5
28959: PUSH
28960: LD_INT 11
28962: PUSH
28963: LD_INT 30
28965: PUSH
28966: LD_INT 49
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: LIST
28973: DIFF
28974: ST_TO_ADDR
// if not list then
28975: LD_VAR 0 5
28979: NOT
28980: IFFALSE 28984
// exit ;
28982: GO 29126
// weapon := list [ rand ( 1 , list ) ] ;
28984: LD_ADDR_VAR 0 18
28988: PUSH
28989: LD_VAR 0 5
28993: PUSH
28994: LD_INT 1
28996: PPUSH
28997: LD_VAR 0 5
29001: PPUSH
29002: CALL_OW 12
29006: ARRAY
29007: ST_TO_ADDR
// end ; if weapon then
29008: LD_VAR 0 18
29012: IFFALSE 29126
// begin tmp := CostOfWeapon ( weapon ) ;
29014: LD_ADDR_VAR 0 14
29018: PUSH
29019: LD_VAR 0 18
29023: PPUSH
29024: CALL_OW 451
29028: ST_TO_ADDR
// j := GetBase ( tower ) ;
29029: LD_ADDR_VAR 0 9
29033: PUSH
29034: LD_VAR 0 1
29038: PPUSH
29039: CALL_OW 274
29043: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29044: LD_VAR 0 9
29048: PPUSH
29049: LD_INT 1
29051: PPUSH
29052: CALL_OW 275
29056: PUSH
29057: LD_VAR 0 14
29061: PUSH
29062: LD_INT 1
29064: ARRAY
29065: GREATEREQUAL
29066: PUSH
29067: LD_VAR 0 9
29071: PPUSH
29072: LD_INT 2
29074: PPUSH
29075: CALL_OW 275
29079: PUSH
29080: LD_VAR 0 14
29084: PUSH
29085: LD_INT 2
29087: ARRAY
29088: GREATEREQUAL
29089: AND
29090: PUSH
29091: LD_VAR 0 9
29095: PPUSH
29096: LD_INT 3
29098: PPUSH
29099: CALL_OW 275
29103: PUSH
29104: LD_VAR 0 14
29108: PUSH
29109: LD_INT 3
29111: ARRAY
29112: GREATEREQUAL
29113: AND
29114: IFFALSE 29126
// result := weapon ;
29116: LD_ADDR_VAR 0 3
29120: PUSH
29121: LD_VAR 0 18
29125: ST_TO_ADDR
// end ; end ;
29126: LD_VAR 0 3
29130: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29131: LD_INT 0
29133: PPUSH
29134: PPUSH
// result := true ;
29135: LD_ADDR_VAR 0 3
29139: PUSH
29140: LD_INT 1
29142: ST_TO_ADDR
// if array1 = array2 then
29143: LD_VAR 0 1
29147: PUSH
29148: LD_VAR 0 2
29152: EQUAL
29153: IFFALSE 29213
// begin for i = 1 to array1 do
29155: LD_ADDR_VAR 0 4
29159: PUSH
29160: DOUBLE
29161: LD_INT 1
29163: DEC
29164: ST_TO_ADDR
29165: LD_VAR 0 1
29169: PUSH
29170: FOR_TO
29171: IFFALSE 29209
// if array1 [ i ] <> array2 [ i ] then
29173: LD_VAR 0 1
29177: PUSH
29178: LD_VAR 0 4
29182: ARRAY
29183: PUSH
29184: LD_VAR 0 2
29188: PUSH
29189: LD_VAR 0 4
29193: ARRAY
29194: NONEQUAL
29195: IFFALSE 29207
// begin result := false ;
29197: LD_ADDR_VAR 0 3
29201: PUSH
29202: LD_INT 0
29204: ST_TO_ADDR
// break ;
29205: GO 29209
// end ;
29207: GO 29170
29209: POP
29210: POP
// end else
29211: GO 29221
// result := false ;
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_INT 0
29220: ST_TO_ADDR
// end ;
29221: LD_VAR 0 3
29225: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29226: LD_INT 0
29228: PPUSH
29229: PPUSH
// if not array1 or not array2 then
29230: LD_VAR 0 1
29234: NOT
29235: PUSH
29236: LD_VAR 0 2
29240: NOT
29241: OR
29242: IFFALSE 29246
// exit ;
29244: GO 29310
// result := true ;
29246: LD_ADDR_VAR 0 3
29250: PUSH
29251: LD_INT 1
29253: ST_TO_ADDR
// for i = 1 to array1 do
29254: LD_ADDR_VAR 0 4
29258: PUSH
29259: DOUBLE
29260: LD_INT 1
29262: DEC
29263: ST_TO_ADDR
29264: LD_VAR 0 1
29268: PUSH
29269: FOR_TO
29270: IFFALSE 29308
// if array1 [ i ] <> array2 [ i ] then
29272: LD_VAR 0 1
29276: PUSH
29277: LD_VAR 0 4
29281: ARRAY
29282: PUSH
29283: LD_VAR 0 2
29287: PUSH
29288: LD_VAR 0 4
29292: ARRAY
29293: NONEQUAL
29294: IFFALSE 29306
// begin result := false ;
29296: LD_ADDR_VAR 0 3
29300: PUSH
29301: LD_INT 0
29303: ST_TO_ADDR
// break ;
29304: GO 29308
// end ;
29306: GO 29269
29308: POP
29309: POP
// end ;
29310: LD_VAR 0 3
29314: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29315: LD_INT 0
29317: PPUSH
29318: PPUSH
29319: PPUSH
// pom := GetBase ( fac ) ;
29320: LD_ADDR_VAR 0 5
29324: PUSH
29325: LD_VAR 0 1
29329: PPUSH
29330: CALL_OW 274
29334: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29335: LD_ADDR_VAR 0 4
29339: PUSH
29340: LD_VAR 0 2
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: PPUSH
29349: LD_VAR 0 2
29353: PUSH
29354: LD_INT 2
29356: ARRAY
29357: PPUSH
29358: LD_VAR 0 2
29362: PUSH
29363: LD_INT 3
29365: ARRAY
29366: PPUSH
29367: LD_VAR 0 2
29371: PUSH
29372: LD_INT 4
29374: ARRAY
29375: PPUSH
29376: CALL_OW 449
29380: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_VAR 0 5
29390: PPUSH
29391: LD_INT 1
29393: PPUSH
29394: CALL_OW 275
29398: PUSH
29399: LD_VAR 0 4
29403: PUSH
29404: LD_INT 1
29406: ARRAY
29407: GREATEREQUAL
29408: PUSH
29409: LD_VAR 0 5
29413: PPUSH
29414: LD_INT 2
29416: PPUSH
29417: CALL_OW 275
29421: PUSH
29422: LD_VAR 0 4
29426: PUSH
29427: LD_INT 2
29429: ARRAY
29430: GREATEREQUAL
29431: AND
29432: PUSH
29433: LD_VAR 0 5
29437: PPUSH
29438: LD_INT 3
29440: PPUSH
29441: CALL_OW 275
29445: PUSH
29446: LD_VAR 0 4
29450: PUSH
29451: LD_INT 3
29453: ARRAY
29454: GREATEREQUAL
29455: AND
29456: ST_TO_ADDR
// end ;
29457: LD_VAR 0 3
29461: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29462: LD_INT 0
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
// pom := GetBase ( building ) ;
29468: LD_ADDR_VAR 0 3
29472: PUSH
29473: LD_VAR 0 1
29477: PPUSH
29478: CALL_OW 274
29482: ST_TO_ADDR
// if not pom then
29483: LD_VAR 0 3
29487: NOT
29488: IFFALSE 29492
// exit ;
29490: GO 29662
// btype := GetBType ( building ) ;
29492: LD_ADDR_VAR 0 5
29496: PUSH
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL_OW 266
29506: ST_TO_ADDR
// if btype = b_armoury then
29507: LD_VAR 0 5
29511: PUSH
29512: LD_INT 4
29514: EQUAL
29515: IFFALSE 29525
// btype := b_barracks ;
29517: LD_ADDR_VAR 0 5
29521: PUSH
29522: LD_INT 5
29524: ST_TO_ADDR
// if btype = b_depot then
29525: LD_VAR 0 5
29529: PUSH
29530: LD_INT 0
29532: EQUAL
29533: IFFALSE 29543
// btype := b_warehouse ;
29535: LD_ADDR_VAR 0 5
29539: PUSH
29540: LD_INT 1
29542: ST_TO_ADDR
// if btype = b_workshop then
29543: LD_VAR 0 5
29547: PUSH
29548: LD_INT 2
29550: EQUAL
29551: IFFALSE 29561
// btype := b_factory ;
29553: LD_ADDR_VAR 0 5
29557: PUSH
29558: LD_INT 3
29560: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29561: LD_ADDR_VAR 0 4
29565: PUSH
29566: LD_VAR 0 5
29570: PPUSH
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 248
29580: PPUSH
29581: CALL_OW 450
29585: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29586: LD_ADDR_VAR 0 2
29590: PUSH
29591: LD_VAR 0 3
29595: PPUSH
29596: LD_INT 1
29598: PPUSH
29599: CALL_OW 275
29603: PUSH
29604: LD_VAR 0 4
29608: PUSH
29609: LD_INT 1
29611: ARRAY
29612: GREATEREQUAL
29613: PUSH
29614: LD_VAR 0 3
29618: PPUSH
29619: LD_INT 2
29621: PPUSH
29622: CALL_OW 275
29626: PUSH
29627: LD_VAR 0 4
29631: PUSH
29632: LD_INT 2
29634: ARRAY
29635: GREATEREQUAL
29636: AND
29637: PUSH
29638: LD_VAR 0 3
29642: PPUSH
29643: LD_INT 3
29645: PPUSH
29646: CALL_OW 275
29650: PUSH
29651: LD_VAR 0 4
29655: PUSH
29656: LD_INT 3
29658: ARRAY
29659: GREATEREQUAL
29660: AND
29661: ST_TO_ADDR
// end ;
29662: LD_VAR 0 2
29666: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29667: LD_INT 0
29669: PPUSH
29670: PPUSH
29671: PPUSH
// pom := GetBase ( building ) ;
29672: LD_ADDR_VAR 0 4
29676: PUSH
29677: LD_VAR 0 1
29681: PPUSH
29682: CALL_OW 274
29686: ST_TO_ADDR
// if not pom then
29687: LD_VAR 0 4
29691: NOT
29692: IFFALSE 29696
// exit ;
29694: GO 29797
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29696: LD_ADDR_VAR 0 5
29700: PUSH
29701: LD_VAR 0 2
29705: PPUSH
29706: LD_VAR 0 1
29710: PPUSH
29711: CALL_OW 248
29715: PPUSH
29716: CALL_OW 450
29720: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29721: LD_ADDR_VAR 0 3
29725: PUSH
29726: LD_VAR 0 4
29730: PPUSH
29731: LD_INT 1
29733: PPUSH
29734: CALL_OW 275
29738: PUSH
29739: LD_VAR 0 5
29743: PUSH
29744: LD_INT 1
29746: ARRAY
29747: GREATEREQUAL
29748: PUSH
29749: LD_VAR 0 4
29753: PPUSH
29754: LD_INT 2
29756: PPUSH
29757: CALL_OW 275
29761: PUSH
29762: LD_VAR 0 5
29766: PUSH
29767: LD_INT 2
29769: ARRAY
29770: GREATEREQUAL
29771: AND
29772: PUSH
29773: LD_VAR 0 4
29777: PPUSH
29778: LD_INT 3
29780: PPUSH
29781: CALL_OW 275
29785: PUSH
29786: LD_VAR 0 5
29790: PUSH
29791: LD_INT 3
29793: ARRAY
29794: GREATEREQUAL
29795: AND
29796: ST_TO_ADDR
// end ;
29797: LD_VAR 0 3
29801: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29802: LD_INT 0
29804: PPUSH
29805: PPUSH
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
29811: PPUSH
29812: PPUSH
29813: PPUSH
29814: PPUSH
// result := false ;
29815: LD_ADDR_VAR 0 8
29819: PUSH
29820: LD_INT 0
29822: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29823: LD_VAR 0 5
29827: NOT
29828: PUSH
29829: LD_VAR 0 1
29833: NOT
29834: OR
29835: PUSH
29836: LD_VAR 0 2
29840: NOT
29841: OR
29842: PUSH
29843: LD_VAR 0 3
29847: NOT
29848: OR
29849: IFFALSE 29853
// exit ;
29851: GO 30667
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29853: LD_ADDR_VAR 0 14
29857: PUSH
29858: LD_VAR 0 1
29862: PPUSH
29863: LD_VAR 0 2
29867: PPUSH
29868: LD_VAR 0 3
29872: PPUSH
29873: LD_VAR 0 4
29877: PPUSH
29878: LD_VAR 0 5
29882: PUSH
29883: LD_INT 1
29885: ARRAY
29886: PPUSH
29887: CALL_OW 248
29891: PPUSH
29892: LD_INT 0
29894: PPUSH
29895: CALL 31904 0 6
29899: ST_TO_ADDR
// if not hexes then
29900: LD_VAR 0 14
29904: NOT
29905: IFFALSE 29909
// exit ;
29907: GO 30667
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29909: LD_ADDR_VAR 0 17
29913: PUSH
29914: LD_VAR 0 5
29918: PPUSH
29919: LD_INT 22
29921: PUSH
29922: LD_VAR 0 13
29926: PPUSH
29927: CALL_OW 255
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 2
29938: PUSH
29939: LD_INT 30
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 30
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: LIST
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PPUSH
29968: CALL_OW 72
29972: ST_TO_ADDR
// for i = 1 to hexes do
29973: LD_ADDR_VAR 0 9
29977: PUSH
29978: DOUBLE
29979: LD_INT 1
29981: DEC
29982: ST_TO_ADDR
29983: LD_VAR 0 14
29987: PUSH
29988: FOR_TO
29989: IFFALSE 30665
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29991: LD_ADDR_VAR 0 13
29995: PUSH
29996: LD_VAR 0 14
30000: PUSH
30001: LD_VAR 0 9
30005: ARRAY
30006: PUSH
30007: LD_INT 1
30009: ARRAY
30010: PPUSH
30011: LD_VAR 0 14
30015: PUSH
30016: LD_VAR 0 9
30020: ARRAY
30021: PUSH
30022: LD_INT 2
30024: ARRAY
30025: PPUSH
30026: CALL_OW 428
30030: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30031: LD_VAR 0 14
30035: PUSH
30036: LD_VAR 0 9
30040: ARRAY
30041: PUSH
30042: LD_INT 1
30044: ARRAY
30045: PPUSH
30046: LD_VAR 0 14
30050: PUSH
30051: LD_VAR 0 9
30055: ARRAY
30056: PUSH
30057: LD_INT 2
30059: ARRAY
30060: PPUSH
30061: CALL_OW 351
30065: PUSH
30066: LD_VAR 0 14
30070: PUSH
30071: LD_VAR 0 9
30075: ARRAY
30076: PUSH
30077: LD_INT 1
30079: ARRAY
30080: PPUSH
30081: LD_VAR 0 14
30085: PUSH
30086: LD_VAR 0 9
30090: ARRAY
30091: PUSH
30092: LD_INT 2
30094: ARRAY
30095: PPUSH
30096: CALL_OW 488
30100: NOT
30101: OR
30102: PUSH
30103: LD_VAR 0 13
30107: PPUSH
30108: CALL_OW 247
30112: PUSH
30113: LD_INT 3
30115: EQUAL
30116: OR
30117: IFFALSE 30123
// exit ;
30119: POP
30120: POP
30121: GO 30667
// if not tmp then
30123: LD_VAR 0 13
30127: NOT
30128: IFFALSE 30132
// continue ;
30130: GO 29988
// result := true ;
30132: LD_ADDR_VAR 0 8
30136: PUSH
30137: LD_INT 1
30139: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30140: LD_VAR 0 6
30144: PUSH
30145: LD_VAR 0 13
30149: PPUSH
30150: CALL_OW 247
30154: PUSH
30155: LD_INT 2
30157: EQUAL
30158: AND
30159: PUSH
30160: LD_VAR 0 13
30164: PPUSH
30165: CALL_OW 263
30169: PUSH
30170: LD_INT 1
30172: EQUAL
30173: AND
30174: IFFALSE 30338
// begin if IsDrivenBy ( tmp ) then
30176: LD_VAR 0 13
30180: PPUSH
30181: CALL_OW 311
30185: IFFALSE 30189
// continue ;
30187: GO 29988
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30189: LD_VAR 0 6
30193: PPUSH
30194: LD_INT 3
30196: PUSH
30197: LD_INT 60
30199: PUSH
30200: EMPTY
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 3
30209: PUSH
30210: LD_INT 55
30212: PUSH
30213: EMPTY
30214: LIST
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PPUSH
30224: CALL_OW 72
30228: IFFALSE 30336
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30230: LD_ADDR_VAR 0 18
30234: PUSH
30235: LD_VAR 0 6
30239: PPUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 60
30245: PUSH
30246: EMPTY
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: LD_INT 55
30258: PUSH
30259: EMPTY
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PPUSH
30270: CALL_OW 72
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: ST_TO_ADDR
// if IsInUnit ( driver ) then
30279: LD_VAR 0 18
30283: PPUSH
30284: CALL_OW 310
30288: IFFALSE 30299
// ComExit ( driver ) ;
30290: LD_VAR 0 18
30294: PPUSH
30295: CALL 55088 0 1
// AddComEnterUnit ( driver , tmp ) ;
30299: LD_VAR 0 18
30303: PPUSH
30304: LD_VAR 0 13
30308: PPUSH
30309: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30313: LD_VAR 0 18
30317: PPUSH
30318: LD_VAR 0 7
30322: PPUSH
30323: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30327: LD_VAR 0 18
30331: PPUSH
30332: CALL_OW 181
// end ; continue ;
30336: GO 29988
// end ; if not cleaners or not tmp in cleaners then
30338: LD_VAR 0 6
30342: NOT
30343: PUSH
30344: LD_VAR 0 13
30348: PUSH
30349: LD_VAR 0 6
30353: IN
30354: NOT
30355: OR
30356: IFFALSE 30663
// begin if dep then
30358: LD_VAR 0 17
30362: IFFALSE 30498
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30364: LD_ADDR_VAR 0 16
30368: PUSH
30369: LD_VAR 0 17
30373: PUSH
30374: LD_INT 1
30376: ARRAY
30377: PPUSH
30378: CALL_OW 250
30382: PPUSH
30383: LD_VAR 0 17
30387: PUSH
30388: LD_INT 1
30390: ARRAY
30391: PPUSH
30392: CALL_OW 254
30396: PPUSH
30397: LD_INT 5
30399: PPUSH
30400: CALL_OW 272
30404: PUSH
30405: LD_VAR 0 17
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: CALL_OW 251
30418: PPUSH
30419: LD_VAR 0 17
30423: PUSH
30424: LD_INT 1
30426: ARRAY
30427: PPUSH
30428: CALL_OW 254
30432: PPUSH
30433: LD_INT 5
30435: PPUSH
30436: CALL_OW 273
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30445: LD_VAR 0 16
30449: PUSH
30450: LD_INT 1
30452: ARRAY
30453: PPUSH
30454: LD_VAR 0 16
30458: PUSH
30459: LD_INT 2
30461: ARRAY
30462: PPUSH
30463: CALL_OW 488
30467: IFFALSE 30498
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30469: LD_VAR 0 13
30473: PPUSH
30474: LD_VAR 0 16
30478: PUSH
30479: LD_INT 1
30481: ARRAY
30482: PPUSH
30483: LD_VAR 0 16
30487: PUSH
30488: LD_INT 2
30490: ARRAY
30491: PPUSH
30492: CALL_OW 111
// continue ;
30496: GO 29988
// end ; end ; r := GetDir ( tmp ) ;
30498: LD_ADDR_VAR 0 15
30502: PUSH
30503: LD_VAR 0 13
30507: PPUSH
30508: CALL_OW 254
30512: ST_TO_ADDR
// if r = 5 then
30513: LD_VAR 0 15
30517: PUSH
30518: LD_INT 5
30520: EQUAL
30521: IFFALSE 30531
// r := 0 ;
30523: LD_ADDR_VAR 0 15
30527: PUSH
30528: LD_INT 0
30530: ST_TO_ADDR
// for j = r to 5 do
30531: LD_ADDR_VAR 0 10
30535: PUSH
30536: DOUBLE
30537: LD_VAR 0 15
30541: DEC
30542: ST_TO_ADDR
30543: LD_INT 5
30545: PUSH
30546: FOR_TO
30547: IFFALSE 30661
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30549: LD_ADDR_VAR 0 11
30553: PUSH
30554: LD_VAR 0 13
30558: PPUSH
30559: CALL_OW 250
30563: PPUSH
30564: LD_VAR 0 10
30568: PPUSH
30569: LD_INT 2
30571: PPUSH
30572: CALL_OW 272
30576: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30577: LD_ADDR_VAR 0 12
30581: PUSH
30582: LD_VAR 0 13
30586: PPUSH
30587: CALL_OW 251
30591: PPUSH
30592: LD_VAR 0 10
30596: PPUSH
30597: LD_INT 2
30599: PPUSH
30600: CALL_OW 273
30604: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30605: LD_VAR 0 11
30609: PPUSH
30610: LD_VAR 0 12
30614: PPUSH
30615: CALL_OW 488
30619: PUSH
30620: LD_VAR 0 11
30624: PPUSH
30625: LD_VAR 0 12
30629: PPUSH
30630: CALL_OW 428
30634: NOT
30635: AND
30636: IFFALSE 30659
// begin ComMoveXY ( tmp , _x , _y ) ;
30638: LD_VAR 0 13
30642: PPUSH
30643: LD_VAR 0 11
30647: PPUSH
30648: LD_VAR 0 12
30652: PPUSH
30653: CALL_OW 111
// break ;
30657: GO 30661
// end ; end ;
30659: GO 30546
30661: POP
30662: POP
// end ; end ;
30663: GO 29988
30665: POP
30666: POP
// end ;
30667: LD_VAR 0 8
30671: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30672: LD_INT 0
30674: PPUSH
// result := true ;
30675: LD_ADDR_VAR 0 3
30679: PUSH
30680: LD_INT 1
30682: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30683: LD_VAR 0 2
30687: PUSH
30688: LD_INT 24
30690: DOUBLE
30691: EQUAL
30692: IFTRUE 30702
30694: LD_INT 33
30696: DOUBLE
30697: EQUAL
30698: IFTRUE 30702
30700: GO 30727
30702: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30703: LD_ADDR_VAR 0 3
30707: PUSH
30708: LD_INT 32
30710: PPUSH
30711: LD_VAR 0 1
30715: PPUSH
30716: CALL_OW 321
30720: PUSH
30721: LD_INT 2
30723: EQUAL
30724: ST_TO_ADDR
30725: GO 31047
30727: LD_INT 20
30729: DOUBLE
30730: EQUAL
30731: IFTRUE 30735
30733: GO 30760
30735: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30736: LD_ADDR_VAR 0 3
30740: PUSH
30741: LD_INT 6
30743: PPUSH
30744: LD_VAR 0 1
30748: PPUSH
30749: CALL_OW 321
30753: PUSH
30754: LD_INT 2
30756: EQUAL
30757: ST_TO_ADDR
30758: GO 31047
30760: LD_INT 22
30762: DOUBLE
30763: EQUAL
30764: IFTRUE 30774
30766: LD_INT 36
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30799
30774: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30775: LD_ADDR_VAR 0 3
30779: PUSH
30780: LD_INT 15
30782: PPUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 321
30792: PUSH
30793: LD_INT 2
30795: EQUAL
30796: ST_TO_ADDR
30797: GO 31047
30799: LD_INT 30
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30832
30807: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30808: LD_ADDR_VAR 0 3
30812: PUSH
30813: LD_INT 20
30815: PPUSH
30816: LD_VAR 0 1
30820: PPUSH
30821: CALL_OW 321
30825: PUSH
30826: LD_INT 2
30828: EQUAL
30829: ST_TO_ADDR
30830: GO 31047
30832: LD_INT 28
30834: DOUBLE
30835: EQUAL
30836: IFTRUE 30846
30838: LD_INT 21
30840: DOUBLE
30841: EQUAL
30842: IFTRUE 30846
30844: GO 30871
30846: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30847: LD_ADDR_VAR 0 3
30851: PUSH
30852: LD_INT 21
30854: PPUSH
30855: LD_VAR 0 1
30859: PPUSH
30860: CALL_OW 321
30864: PUSH
30865: LD_INT 2
30867: EQUAL
30868: ST_TO_ADDR
30869: GO 31047
30871: LD_INT 16
30873: DOUBLE
30874: EQUAL
30875: IFTRUE 30879
30877: GO 30906
30879: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30880: LD_ADDR_VAR 0 3
30884: PUSH
30885: LD_EXP 25
30889: PPUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 321
30899: PUSH
30900: LD_INT 2
30902: EQUAL
30903: ST_TO_ADDR
30904: GO 31047
30906: LD_INT 19
30908: DOUBLE
30909: EQUAL
30910: IFTRUE 30920
30912: LD_INT 23
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30920
30918: GO 30947
30920: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30921: LD_ADDR_VAR 0 3
30925: PUSH
30926: LD_EXP 24
30930: PPUSH
30931: LD_VAR 0 1
30935: PPUSH
30936: CALL_OW 321
30940: PUSH
30941: LD_INT 2
30943: EQUAL
30944: ST_TO_ADDR
30945: GO 31047
30947: LD_INT 17
30949: DOUBLE
30950: EQUAL
30951: IFTRUE 30955
30953: GO 30980
30955: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30956: LD_ADDR_VAR 0 3
30960: PUSH
30961: LD_INT 39
30963: PPUSH
30964: LD_VAR 0 1
30968: PPUSH
30969: CALL_OW 321
30973: PUSH
30974: LD_INT 2
30976: EQUAL
30977: ST_TO_ADDR
30978: GO 31047
30980: LD_INT 18
30982: DOUBLE
30983: EQUAL
30984: IFTRUE 30988
30986: GO 31013
30988: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30989: LD_ADDR_VAR 0 3
30993: PUSH
30994: LD_INT 40
30996: PPUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL_OW 321
31006: PUSH
31007: LD_INT 2
31009: EQUAL
31010: ST_TO_ADDR
31011: GO 31047
31013: LD_INT 27
31015: DOUBLE
31016: EQUAL
31017: IFTRUE 31021
31019: GO 31046
31021: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31022: LD_ADDR_VAR 0 3
31026: PUSH
31027: LD_INT 35
31029: PPUSH
31030: LD_VAR 0 1
31034: PPUSH
31035: CALL_OW 321
31039: PUSH
31040: LD_INT 2
31042: EQUAL
31043: ST_TO_ADDR
31044: GO 31047
31046: POP
// end ;
31047: LD_VAR 0 3
31051: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31052: LD_INT 0
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
// result := false ;
31065: LD_ADDR_VAR 0 6
31069: PUSH
31070: LD_INT 0
31072: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31073: LD_VAR 0 1
31077: NOT
31078: PUSH
31079: LD_VAR 0 1
31083: PPUSH
31084: CALL_OW 266
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: IN
31099: NOT
31100: OR
31101: PUSH
31102: LD_VAR 0 2
31106: NOT
31107: OR
31108: PUSH
31109: LD_VAR 0 5
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 4
31128: PUSH
31129: LD_INT 5
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: IN
31140: NOT
31141: OR
31142: PUSH
31143: LD_VAR 0 3
31147: PPUSH
31148: LD_VAR 0 4
31152: PPUSH
31153: CALL_OW 488
31157: NOT
31158: OR
31159: IFFALSE 31163
// exit ;
31161: GO 31899
// side := GetSide ( depot ) ;
31163: LD_ADDR_VAR 0 9
31167: PUSH
31168: LD_VAR 0 1
31172: PPUSH
31173: CALL_OW 255
31177: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31178: LD_VAR 0 9
31182: PPUSH
31183: LD_VAR 0 2
31187: PPUSH
31188: CALL 30672 0 2
31192: NOT
31193: IFFALSE 31197
// exit ;
31195: GO 31899
// pom := GetBase ( depot ) ;
31197: LD_ADDR_VAR 0 10
31201: PUSH
31202: LD_VAR 0 1
31206: PPUSH
31207: CALL_OW 274
31211: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31212: LD_ADDR_VAR 0 11
31216: PUSH
31217: LD_VAR 0 2
31221: PPUSH
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 248
31231: PPUSH
31232: CALL_OW 450
31236: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31237: LD_VAR 0 10
31241: PPUSH
31242: LD_INT 1
31244: PPUSH
31245: CALL_OW 275
31249: PUSH
31250: LD_VAR 0 11
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: GREATEREQUAL
31259: PUSH
31260: LD_VAR 0 10
31264: PPUSH
31265: LD_INT 2
31267: PPUSH
31268: CALL_OW 275
31272: PUSH
31273: LD_VAR 0 11
31277: PUSH
31278: LD_INT 2
31280: ARRAY
31281: GREATEREQUAL
31282: AND
31283: PUSH
31284: LD_VAR 0 10
31288: PPUSH
31289: LD_INT 3
31291: PPUSH
31292: CALL_OW 275
31296: PUSH
31297: LD_VAR 0 11
31301: PUSH
31302: LD_INT 3
31304: ARRAY
31305: GREATEREQUAL
31306: AND
31307: NOT
31308: IFFALSE 31312
// exit ;
31310: GO 31899
// if GetBType ( depot ) = b_depot then
31312: LD_VAR 0 1
31316: PPUSH
31317: CALL_OW 266
31321: PUSH
31322: LD_INT 0
31324: EQUAL
31325: IFFALSE 31337
// dist := 28 else
31327: LD_ADDR_VAR 0 14
31331: PUSH
31332: LD_INT 28
31334: ST_TO_ADDR
31335: GO 31345
// dist := 36 ;
31337: LD_ADDR_VAR 0 14
31341: PUSH
31342: LD_INT 36
31344: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31345: LD_VAR 0 1
31349: PPUSH
31350: LD_VAR 0 3
31354: PPUSH
31355: LD_VAR 0 4
31359: PPUSH
31360: CALL_OW 297
31364: PUSH
31365: LD_VAR 0 14
31369: GREATER
31370: IFFALSE 31374
// exit ;
31372: GO 31899
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31374: LD_ADDR_VAR 0 12
31378: PUSH
31379: LD_VAR 0 2
31383: PPUSH
31384: LD_VAR 0 3
31388: PPUSH
31389: LD_VAR 0 4
31393: PPUSH
31394: LD_VAR 0 5
31398: PPUSH
31399: LD_VAR 0 1
31403: PPUSH
31404: CALL_OW 248
31408: PPUSH
31409: LD_INT 0
31411: PPUSH
31412: CALL 31904 0 6
31416: ST_TO_ADDR
// if not hexes then
31417: LD_VAR 0 12
31421: NOT
31422: IFFALSE 31426
// exit ;
31424: GO 31899
// hex := GetHexInfo ( x , y ) ;
31426: LD_ADDR_VAR 0 15
31430: PUSH
31431: LD_VAR 0 3
31435: PPUSH
31436: LD_VAR 0 4
31440: PPUSH
31441: CALL_OW 546
31445: ST_TO_ADDR
// if hex [ 1 ] then
31446: LD_VAR 0 15
31450: PUSH
31451: LD_INT 1
31453: ARRAY
31454: IFFALSE 31458
// exit ;
31456: GO 31899
// height := hex [ 2 ] ;
31458: LD_ADDR_VAR 0 13
31462: PUSH
31463: LD_VAR 0 15
31467: PUSH
31468: LD_INT 2
31470: ARRAY
31471: ST_TO_ADDR
// for i = 1 to hexes do
31472: LD_ADDR_VAR 0 7
31476: PUSH
31477: DOUBLE
31478: LD_INT 1
31480: DEC
31481: ST_TO_ADDR
31482: LD_VAR 0 12
31486: PUSH
31487: FOR_TO
31488: IFFALSE 31818
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31490: LD_VAR 0 12
31494: PUSH
31495: LD_VAR 0 7
31499: ARRAY
31500: PUSH
31501: LD_INT 1
31503: ARRAY
31504: PPUSH
31505: LD_VAR 0 12
31509: PUSH
31510: LD_VAR 0 7
31514: ARRAY
31515: PUSH
31516: LD_INT 2
31518: ARRAY
31519: PPUSH
31520: CALL_OW 488
31524: NOT
31525: PUSH
31526: LD_VAR 0 12
31530: PUSH
31531: LD_VAR 0 7
31535: ARRAY
31536: PUSH
31537: LD_INT 1
31539: ARRAY
31540: PPUSH
31541: LD_VAR 0 12
31545: PUSH
31546: LD_VAR 0 7
31550: ARRAY
31551: PUSH
31552: LD_INT 2
31554: ARRAY
31555: PPUSH
31556: CALL_OW 428
31560: PUSH
31561: LD_INT 0
31563: GREATER
31564: OR
31565: PUSH
31566: LD_VAR 0 12
31570: PUSH
31571: LD_VAR 0 7
31575: ARRAY
31576: PUSH
31577: LD_INT 1
31579: ARRAY
31580: PPUSH
31581: LD_VAR 0 12
31585: PUSH
31586: LD_VAR 0 7
31590: ARRAY
31591: PUSH
31592: LD_INT 2
31594: ARRAY
31595: PPUSH
31596: CALL_OW 351
31600: OR
31601: IFFALSE 31607
// exit ;
31603: POP
31604: POP
31605: GO 31899
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31607: LD_ADDR_VAR 0 8
31611: PUSH
31612: LD_VAR 0 12
31616: PUSH
31617: LD_VAR 0 7
31621: ARRAY
31622: PUSH
31623: LD_INT 1
31625: ARRAY
31626: PPUSH
31627: LD_VAR 0 12
31631: PUSH
31632: LD_VAR 0 7
31636: ARRAY
31637: PUSH
31638: LD_INT 2
31640: ARRAY
31641: PPUSH
31642: CALL_OW 546
31646: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31647: LD_VAR 0 8
31651: PUSH
31652: LD_INT 1
31654: ARRAY
31655: PUSH
31656: LD_VAR 0 8
31660: PUSH
31661: LD_INT 2
31663: ARRAY
31664: PUSH
31665: LD_VAR 0 13
31669: PUSH
31670: LD_INT 2
31672: PLUS
31673: GREATER
31674: OR
31675: PUSH
31676: LD_VAR 0 8
31680: PUSH
31681: LD_INT 2
31683: ARRAY
31684: PUSH
31685: LD_VAR 0 13
31689: PUSH
31690: LD_INT 2
31692: MINUS
31693: LESS
31694: OR
31695: PUSH
31696: LD_VAR 0 8
31700: PUSH
31701: LD_INT 3
31703: ARRAY
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: LD_INT 8
31710: PUSH
31711: LD_INT 9
31713: PUSH
31714: LD_INT 10
31716: PUSH
31717: LD_INT 11
31719: PUSH
31720: LD_INT 12
31722: PUSH
31723: LD_INT 13
31725: PUSH
31726: LD_INT 16
31728: PUSH
31729: LD_INT 17
31731: PUSH
31732: LD_INT 18
31734: PUSH
31735: LD_INT 19
31737: PUSH
31738: LD_INT 20
31740: PUSH
31741: LD_INT 21
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: IN
31759: NOT
31760: OR
31761: PUSH
31762: LD_VAR 0 8
31766: PUSH
31767: LD_INT 5
31769: ARRAY
31770: NOT
31771: OR
31772: PUSH
31773: LD_VAR 0 8
31777: PUSH
31778: LD_INT 6
31780: ARRAY
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: LD_INT 2
31787: PUSH
31788: LD_INT 7
31790: PUSH
31791: LD_INT 9
31793: PUSH
31794: LD_INT 10
31796: PUSH
31797: LD_INT 11
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: IN
31808: NOT
31809: OR
31810: IFFALSE 31816
// exit ;
31812: POP
31813: POP
31814: GO 31899
// end ;
31816: GO 31487
31818: POP
31819: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31820: LD_VAR 0 9
31824: PPUSH
31825: LD_VAR 0 3
31829: PPUSH
31830: LD_VAR 0 4
31834: PPUSH
31835: LD_INT 20
31837: PPUSH
31838: CALL 23845 0 4
31842: PUSH
31843: LD_INT 4
31845: ARRAY
31846: IFFALSE 31850
// exit ;
31848: GO 31899
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31850: LD_VAR 0 2
31854: PUSH
31855: LD_INT 29
31857: PUSH
31858: LD_INT 30
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: IN
31865: PUSH
31866: LD_VAR 0 3
31870: PPUSH
31871: LD_VAR 0 4
31875: PPUSH
31876: LD_VAR 0 9
31880: PPUSH
31881: CALL_OW 440
31885: NOT
31886: AND
31887: IFFALSE 31891
// exit ;
31889: GO 31899
// result := true ;
31891: LD_ADDR_VAR 0 6
31895: PUSH
31896: LD_INT 1
31898: ST_TO_ADDR
// end ;
31899: LD_VAR 0 6
31903: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31904: LD_INT 0
31906: PPUSH
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
31917: PPUSH
31918: PPUSH
31919: PPUSH
31920: PPUSH
31921: PPUSH
31922: PPUSH
31923: PPUSH
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
31931: PPUSH
31932: PPUSH
31933: PPUSH
31934: PPUSH
31935: PPUSH
31936: PPUSH
31937: PPUSH
31938: PPUSH
31939: PPUSH
31940: PPUSH
31941: PPUSH
31942: PPUSH
31943: PPUSH
31944: PPUSH
31945: PPUSH
31946: PPUSH
31947: PPUSH
31948: PPUSH
31949: PPUSH
31950: PPUSH
31951: PPUSH
31952: PPUSH
31953: PPUSH
31954: PPUSH
31955: PPUSH
31956: PPUSH
31957: PPUSH
31958: PPUSH
31959: PPUSH
31960: PPUSH
31961: PPUSH
31962: PPUSH
31963: PPUSH
// result = [ ] ;
31964: LD_ADDR_VAR 0 7
31968: PUSH
31969: EMPTY
31970: ST_TO_ADDR
// temp_list = [ ] ;
31971: LD_ADDR_VAR 0 9
31975: PUSH
31976: EMPTY
31977: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31978: LD_VAR 0 4
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: LD_INT 3
31994: PUSH
31995: LD_INT 4
31997: PUSH
31998: LD_INT 5
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: IN
32009: NOT
32010: PUSH
32011: LD_VAR 0 1
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: IN
32026: PUSH
32027: LD_VAR 0 5
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: LIST
32045: IN
32046: NOT
32047: AND
32048: OR
32049: IFFALSE 32053
// exit ;
32051: GO 50444
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32053: LD_VAR 0 1
32057: PUSH
32058: LD_INT 6
32060: PUSH
32061: LD_INT 7
32063: PUSH
32064: LD_INT 8
32066: PUSH
32067: LD_INT 13
32069: PUSH
32070: LD_INT 12
32072: PUSH
32073: LD_INT 15
32075: PUSH
32076: LD_INT 11
32078: PUSH
32079: LD_INT 14
32081: PUSH
32082: LD_INT 10
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: IN
32096: IFFALSE 32106
// btype = b_lab ;
32098: LD_ADDR_VAR 0 1
32102: PUSH
32103: LD_INT 6
32105: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32106: LD_VAR 0 6
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: IN
32125: NOT
32126: PUSH
32127: LD_VAR 0 1
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: LD_INT 3
32143: PUSH
32144: LD_INT 6
32146: PUSH
32147: LD_INT 36
32149: PUSH
32150: LD_INT 4
32152: PUSH
32153: LD_INT 5
32155: PUSH
32156: LD_INT 31
32158: PUSH
32159: LD_INT 32
32161: PUSH
32162: LD_INT 33
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: IN
32178: NOT
32179: PUSH
32180: LD_VAR 0 6
32184: PUSH
32185: LD_INT 1
32187: EQUAL
32188: AND
32189: OR
32190: PUSH
32191: LD_VAR 0 1
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: IN
32206: NOT
32207: PUSH
32208: LD_VAR 0 6
32212: PUSH
32213: LD_INT 2
32215: EQUAL
32216: AND
32217: OR
32218: IFFALSE 32228
// mode = 0 ;
32220: LD_ADDR_VAR 0 6
32224: PUSH
32225: LD_INT 0
32227: ST_TO_ADDR
// case mode of 0 :
32228: LD_VAR 0 6
32232: PUSH
32233: LD_INT 0
32235: DOUBLE
32236: EQUAL
32237: IFTRUE 32241
32239: GO 43694
32241: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32242: LD_ADDR_VAR 0 11
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 1
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 0
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: NEG
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 1
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 3
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32435: LD_ADDR_VAR 0 12
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 1
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: NEG
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 2
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 3
32592: NEG
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 3
32603: NEG
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32631: LD_ADDR_VAR 0 13
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: LD_INT 2
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: LD_INT 3
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: LD_INT 3
32806: NEG
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32830: LD_ADDR_VAR 0 14
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: LD_INT 2
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 2
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: NEG
32977: PUSH
32978: LD_INT 3
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33026: LD_ADDR_VAR 0 15
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 0
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 2
33160: NEG
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 3
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 3
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33219: LD_ADDR_VAR 0 16
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 2
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: LD_INT 1
33346: NEG
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: LD_INT 2
33358: NEG
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 3
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: LD_INT 3
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33412: LD_ADDR_VAR 0 17
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: NEG
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 2
33588: NEG
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 2
33599: NEG
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: LD_INT 2
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33642: LD_ADDR_VAR 0 18
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 2
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: LD_INT 2
33738: NEG
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 2
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 2
33777: PUSH
33778: LD_INT 2
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: LD_INT 2
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: LD_INT 2
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 1
33807: NEG
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 2
33818: NEG
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33872: LD_ADDR_VAR 0 19
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: LD_INT 1
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 1
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 2
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 2
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: LD_INT 2
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: NEG
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: LD_INT 2
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34102: LD_ADDR_VAR 0 20
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: LD_INT 0
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: LD_INT 1
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: NEG
34184: PUSH
34185: LD_INT 2
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: LD_INT 2
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 2
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: PUSH
34248: LD_INT 2
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 2
34289: NEG
34290: PUSH
34291: LD_INT 1
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 2
34301: NEG
34302: PUSH
34303: LD_INT 2
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34332: LD_ADDR_VAR 0 21
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: LD_INT 0
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: NEG
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: NEG
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: NEG
34532: PUSH
34533: LD_INT 2
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34562: LD_ADDR_VAR 0 22
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 2
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: NEG
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: NEG
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 2
34761: NEG
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34792: LD_ADDR_VAR 0 23
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 0
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: LD_INT 2
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: LD_INT 2
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 1
34957: NEG
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 2
34968: NEG
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: NEG
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: NEG
34992: PUSH
34993: LD_INT 2
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 2
35003: NEG
35004: PUSH
35005: LD_INT 3
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 3
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 2
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35072: LD_ADDR_VAR 0 24
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: LD_INT 0
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: LD_INT 2
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 2
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 2
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 2
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: LD_INT 2
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: LD_INT 2
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 2
35248: NEG
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 2
35259: NEG
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 3
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35348: LD_ADDR_VAR 0 25
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: NEG
35430: PUSH
35431: LD_INT 2
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: LD_INT 2
35444: NEG
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: NEG
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: NEG
35548: PUSH
35549: LD_INT 2
35551: NEG
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 3
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 2
35579: PUSH
35580: LD_INT 3
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35622: LD_ADDR_VAR 0 26
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: LD_INT 2
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: LD_INT 2
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 2
35798: NEG
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: LD_INT 3
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 2
35864: NEG
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35898: LD_ADDR_VAR 0 27
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: LD_INT 1
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 1
35956: NEG
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: LD_INT 2
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 2
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 3
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 3
36143: NEG
36144: PUSH
36145: LD_INT 2
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36178: LD_ADDR_VAR 0 28
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 1
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: LD_INT 2
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 2
36354: NEG
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: NEG
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 2
36377: NEG
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: LD_INT 3
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 3
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 3
36413: NEG
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 3
36425: NEG
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36460: LD_ADDR_VAR 0 29
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 1
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 2
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: LD_INT 3
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 3
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: LD_INT 3
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 3
36704: NEG
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36739: LD_ADDR_VAR 0 30
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: LD_INT 2
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 2
36905: NEG
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: LD_INT 3
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 3
36951: PUSH
36952: LD_INT 2
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 3
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: NEG
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 3
36982: NEG
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37017: LD_ADDR_VAR 0 31
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: LD_INT 2
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: LD_INT 3
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 3
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: LD_INT 3
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 3
37260: NEG
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37295: LD_ADDR_VAR 0 32
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: NEG
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: LD_INT 3
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 2
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: LD_INT 3
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: NEG
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 3
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37573: LD_ADDR_VAR 0 33
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 2
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: LD_INT 2
37755: NEG
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 2
37763: NEG
37764: PUSH
37765: LD_INT 3
37767: NEG
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 3
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 3
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 3
37817: NEG
37818: PUSH
37819: LD_INT 2
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37852: LD_ADDR_VAR 0 34
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: LD_INT 3
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 3
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 3
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 2
38086: NEG
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: NEG
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38132: LD_ADDR_VAR 0 35
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38244: LD_ADDR_VAR 0 36
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 2
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38356: LD_ADDR_VAR 0 37
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: NEG
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 1
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38468: LD_ADDR_VAR 0 38
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38580: LD_ADDR_VAR 0 39
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 0
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 0
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 2
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38692: LD_ADDR_VAR 0 40
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: LD_INT 1
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38804: LD_ADDR_VAR 0 41
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: LD_INT 3
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 3
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 3
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 3
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 3
39078: NEG
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 3
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 3
39101: NEG
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 3
39113: NEG
39114: PUSH
39115: LD_INT 3
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39154: LD_ADDR_VAR 0 42
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: LD_INT 2
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: LD_INT 2
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: NEG
39333: PUSH
39334: LD_INT 2
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: LD_INT 3
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: LD_INT 3
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 3
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 3
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: LD_INT 3
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 3
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: NEG
39452: PUSH
39453: LD_INT 2
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: LD_INT 3
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39504: LD_ADDR_VAR 0 43
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: LD_INT 1
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 3
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 3
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 3
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 3
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: LD_INT 3
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 3
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 3
39800: NEG
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 3
39811: NEG
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39852: LD_ADDR_VAR 0 44
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 2
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 2
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: LD_INT 3
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 3
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 3
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: PUSH
40096: LD_INT 3
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: PUSH
40106: LD_INT 3
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 3
40126: NEG
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 3
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 3
40149: NEG
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 3
40161: NEG
40162: PUSH
40163: LD_INT 3
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40202: LD_ADDR_VAR 0 45
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 2
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 3
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: LD_INT 3
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 3
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 3
40499: NEG
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 3
40511: NEG
40512: PUSH
40513: LD_INT 3
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40552: LD_ADDR_VAR 0 46
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 2
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 3
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 3
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 3
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 3
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 3
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 3
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 3
40848: NEG
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: NEG
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40900: LD_ADDR_VAR 0 47
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 2
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41051: LD_ADDR_VAR 0 48
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 2
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41198: LD_ADDR_VAR 0 49
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41342: LD_ADDR_VAR 0 50
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41486: LD_ADDR_VAR 0 51
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41633: LD_ADDR_VAR 0 52
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41784: LD_ADDR_VAR 0 53
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: LD_INT 2
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 2
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42014: LD_ADDR_VAR 0 54
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: NEG
42214: PUSH
42215: LD_INT 2
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42244: LD_ADDR_VAR 0 55
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: LD_INT 2
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 2
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42474: LD_ADDR_VAR 0 56
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: LD_INT 2
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42704: LD_ADDR_VAR 0 57
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 2
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42934: LD_ADDR_VAR 0 58
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43164: LD_ADDR_VAR 0 59
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43252: LD_ADDR_VAR 0 60
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43340: LD_ADDR_VAR 0 61
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43428: LD_ADDR_VAR 0 62
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43516: LD_ADDR_VAR 0 63
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43604: LD_ADDR_VAR 0 64
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: ST_TO_ADDR
// end ; 1 :
43692: GO 49589
43694: LD_INT 1
43696: DOUBLE
43697: EQUAL
43698: IFTRUE 43702
43700: GO 46325
43702: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43703: LD_ADDR_VAR 0 11
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 3
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 3
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43747: LD_ADDR_VAR 0 12
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 3
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43788: LD_ADDR_VAR 0 13
43792: PUSH
43793: LD_INT 3
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 3
43805: PUSH
43806: LD_INT 3
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43828: LD_ADDR_VAR 0 14
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 3
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 3
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43869: LD_ADDR_VAR 0 15
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43913: LD_ADDR_VAR 0 16
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: LD_INT 3
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 3
43944: NEG
43945: PUSH
43946: LD_INT 3
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43959: LD_ADDR_VAR 0 17
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 3
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 3
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44003: LD_ADDR_VAR 0 18
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 3
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44044: LD_ADDR_VAR 0 19
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 3
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44084: LD_ADDR_VAR 0 20
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 3
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 3
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44125: LD_ADDR_VAR 0 21
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: NEG
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44169: LD_ADDR_VAR 0 22
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 3
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 3
44200: NEG
44201: PUSH
44202: LD_INT 3
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44215: LD_ADDR_VAR 0 23
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: LD_INT 4
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 3
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44259: LD_ADDR_VAR 0 24
44263: PUSH
44264: LD_INT 3
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 4
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44300: LD_ADDR_VAR 0 25
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: LD_INT 3
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 4
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 3
44327: PUSH
44328: LD_INT 4
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44340: LD_ADDR_VAR 0 26
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 3
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 4
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44381: LD_ADDR_VAR 0 27
44385: PUSH
44386: LD_INT 3
44388: NEG
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 3
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 4
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44425: LD_ADDR_VAR 0 28
44429: PUSH
44430: LD_INT 3
44432: NEG
44433: PUSH
44434: LD_INT 3
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: NEG
44445: PUSH
44446: LD_INT 4
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 4
44456: NEG
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44471: LD_ADDR_VAR 0 29
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 3
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 3
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: LD_INT 4
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 4
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 3
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: LD_INT 5
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 5
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 4
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 6
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 6
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: LD_INT 5
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44626: LD_ADDR_VAR 0 30
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 4
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 4
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 4
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 5
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 5
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 5
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 6
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 6
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44769: LD_ADDR_VAR 0 31
44773: PUSH
44774: LD_INT 3
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: LD_INT 3
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: LD_INT 3
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 4
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 4
44816: PUSH
44817: LD_INT 4
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 3
44826: PUSH
44827: LD_INT 4
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 5
44836: PUSH
44837: LD_INT 4
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 5
44846: PUSH
44847: LD_INT 5
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 4
44856: PUSH
44857: LD_INT 5
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 6
44866: PUSH
44867: LD_INT 5
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 6
44876: PUSH
44877: LD_INT 6
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 5
44886: PUSH
44887: LD_INT 6
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44908: LD_ADDR_VAR 0 32
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 3
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: LD_INT 4
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 4
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 3
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 5
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 5
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 4
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 6
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 6
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 5
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45051: LD_ADDR_VAR 0 33
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 3
45069: NEG
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 3
45092: NEG
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 4
45103: NEG
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 4
45114: NEG
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 4
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 5
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 5
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 5
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 6
45171: NEG
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 6
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45206: LD_ADDR_VAR 0 34
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 3
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 3
45225: NEG
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 3
45237: NEG
45238: PUSH
45239: LD_INT 3
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 3
45249: NEG
45250: PUSH
45251: LD_INT 4
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 4
45261: NEG
45262: PUSH
45263: LD_INT 3
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 4
45273: NEG
45274: PUSH
45275: LD_INT 4
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 4
45285: NEG
45286: PUSH
45287: LD_INT 5
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 5
45297: NEG
45298: PUSH
45299: LD_INT 4
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 5
45309: NEG
45310: PUSH
45311: LD_INT 5
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 5
45321: NEG
45322: PUSH
45323: LD_INT 6
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 6
45333: NEG
45334: PUSH
45335: LD_INT 5
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 6
45345: NEG
45346: PUSH
45347: LD_INT 6
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45369: LD_ADDR_VAR 0 41
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 3
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45413: LD_ADDR_VAR 0 42
45417: PUSH
45418: LD_INT 2
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 3
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45454: LD_ADDR_VAR 0 43
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 3
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45494: LD_ADDR_VAR 0 44
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 2
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45535: LD_ADDR_VAR 0 45
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: NEG
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45579: LD_ADDR_VAR 0 46
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 3
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 3
45610: NEG
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: LIST
45624: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45625: LD_ADDR_VAR 0 47
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 3
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45658: LD_ADDR_VAR 0 48
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45689: LD_ADDR_VAR 0 49
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45718: LD_ADDR_VAR 0 50
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45747: LD_ADDR_VAR 0 51
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45778: LD_ADDR_VAR 0 52
45782: PUSH
45783: LD_INT 3
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 3
45797: NEG
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45811: LD_ADDR_VAR 0 53
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 3
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 3
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45855: LD_ADDR_VAR 0 54
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45896: LD_ADDR_VAR 0 55
45900: PUSH
45901: LD_INT 3
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 3
45913: PUSH
45914: LD_INT 3
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: LIST
45935: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45936: LD_ADDR_VAR 0 56
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45977: LD_ADDR_VAR 0 57
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 3
45995: NEG
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 3
46006: NEG
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46021: LD_ADDR_VAR 0 58
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: LD_INT 3
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: LIST
46066: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46067: LD_ADDR_VAR 0 59
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 2
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46111: LD_ADDR_VAR 0 60
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46152: LD_ADDR_VAR 0 61
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46192: LD_ADDR_VAR 0 62
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46233: LD_ADDR_VAR 0 63
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46277: LD_ADDR_VAR 0 64
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: ST_TO_ADDR
// end ; 2 :
46323: GO 49589
46325: LD_INT 2
46327: DOUBLE
46328: EQUAL
46329: IFTRUE 46333
46331: GO 49588
46333: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46334: LD_ADDR_VAR 0 29
46338: PUSH
46339: LD_INT 4
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 4
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 5
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 5
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 4
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 3
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 5
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 3
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 3
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 4
46454: PUSH
46455: LD_INT 3
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 4
46464: PUSH
46465: LD_INT 4
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 3
46474: PUSH
46475: LD_INT 4
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 3
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 4
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 4
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 4
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 4
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 5
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 5
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 4
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 5
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 3
46617: NEG
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 4
46673: NEG
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 4
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 4
46696: NEG
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 4
46719: NEG
46720: PUSH
46721: LD_INT 4
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 4
46731: NEG
46732: PUSH
46733: LD_INT 5
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 3
46743: NEG
46744: PUSH
46745: LD_INT 4
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 3
46755: NEG
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 4
46767: NEG
46768: PUSH
46769: LD_INT 3
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 5
46779: NEG
46780: PUSH
46781: LD_INT 4
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 5
46791: NEG
46792: PUSH
46793: LD_INT 5
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 3
46803: NEG
46804: PUSH
46805: LD_INT 5
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 5
46815: NEG
46816: PUSH
46817: LD_INT 3
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46872: LD_ADDR_VAR 0 30
46876: PUSH
46877: LD_INT 4
46879: PUSH
46880: LD_INT 4
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 4
46889: PUSH
46890: LD_INT 3
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 5
46899: PUSH
46900: LD_INT 4
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 5
46909: PUSH
46910: LD_INT 5
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 4
46919: PUSH
46920: LD_INT 5
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: PUSH
46930: LD_INT 4
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 5
46949: PUSH
46950: LD_INT 3
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 3
46959: PUSH
46960: LD_INT 5
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 3
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 3
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 4
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 4
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 4
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 4
47062: NEG
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 4
47073: NEG
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 3
47085: NEG
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 4
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 5
47118: NEG
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 5
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 5
47141: NEG
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 3
47153: NEG
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 3
47164: NEG
47165: PUSH
47166: LD_INT 3
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: LD_INT 4
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 3
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 4
47224: NEG
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 4
47236: NEG
47237: PUSH
47238: LD_INT 4
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: LD_INT 4
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 4
47260: NEG
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 4
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 5
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 4
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 3
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 3
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: LD_INT 4
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 5
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 3
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 5
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47419: LD_ADDR_VAR 0 31
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 4
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 4
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 5
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 5
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 4
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: LD_INT 5
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: LD_INT 3
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 3
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 3
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 4
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 4
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 4
47598: NEG
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 4
47621: NEG
47622: PUSH
47623: LD_INT 4
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 4
47633: NEG
47634: PUSH
47635: LD_INT 5
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 3
47645: NEG
47646: PUSH
47647: LD_INT 4
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 3
47657: NEG
47658: PUSH
47659: LD_INT 3
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 4
47669: NEG
47670: PUSH
47671: LD_INT 3
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 5
47681: NEG
47682: PUSH
47683: LD_INT 4
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 5
47693: NEG
47694: PUSH
47695: LD_INT 5
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 3
47705: NEG
47706: PUSH
47707: LD_INT 5
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 5
47717: NEG
47718: PUSH
47719: LD_INT 3
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 3
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 4
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 3
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 4
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 4
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 4
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 4
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 5
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 5
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 4
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 3
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 5
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47969: LD_ADDR_VAR 0 32
47973: PUSH
47974: LD_INT 4
47976: NEG
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 4
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 3
47999: NEG
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 4
48021: NEG
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 5
48032: NEG
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 5
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 5
48055: NEG
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 3
48078: NEG
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 3
48090: NEG
48091: PUSH
48092: LD_INT 4
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 3
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 3
48126: NEG
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 4
48138: NEG
48139: PUSH
48140: LD_INT 3
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 4
48150: NEG
48151: PUSH
48152: LD_INT 4
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 4
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 4
48174: NEG
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 4
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 5
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 4
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 3
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 4
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 5
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: LD_INT 3
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: LD_INT 5
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 3
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 3
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 4
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 4
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 3
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 4
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 4
48381: PUSH
48382: LD_INT 4
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 4
48391: PUSH
48392: LD_INT 3
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 5
48401: PUSH
48402: LD_INT 4
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 5
48411: PUSH
48412: LD_INT 5
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 4
48421: PUSH
48422: LD_INT 5
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: PUSH
48432: LD_INT 4
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 3
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 5
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: LD_INT 5
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48516: LD_ADDR_VAR 0 33
48520: PUSH
48521: LD_INT 4
48523: NEG
48524: PUSH
48525: LD_INT 4
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 4
48535: NEG
48536: PUSH
48537: LD_INT 5
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: NEG
48548: PUSH
48549: LD_INT 4
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: LD_INT 3
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 4
48571: NEG
48572: PUSH
48573: LD_INT 3
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 5
48583: NEG
48584: PUSH
48585: LD_INT 4
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 5
48595: NEG
48596: PUSH
48597: LD_INT 5
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: LD_INT 5
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 5
48619: NEG
48620: PUSH
48621: LD_INT 3
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 3
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 4
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 3
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 4
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 4
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 4
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 4
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 5
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 5
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 4
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 3
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 3
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 5
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 3
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 3
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 4
48846: PUSH
48847: LD_INT 3
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 4
48856: PUSH
48857: LD_INT 4
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 3
48866: PUSH
48867: LD_INT 4
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 4
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: LD_INT 4
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 4
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 3
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: LD_INT 4
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: LD_INT 5
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 5
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 4
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 5
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49054: LD_ADDR_VAR 0 34
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 4
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 5
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 4
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 3
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 3
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: LD_INT 4
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 5
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: LD_INT 5
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 4
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 4
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 3
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 4
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 4
49256: PUSH
49257: LD_INT 4
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 4
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 5
49276: PUSH
49277: LD_INT 4
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 5
49286: PUSH
49287: LD_INT 5
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 4
49296: PUSH
49297: LD_INT 5
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: LD_INT 4
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 5
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 3
49336: PUSH
49337: LD_INT 5
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 3
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 4
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 4
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: LD_INT 4
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 4
49439: NEG
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 4
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 4
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 5
49495: NEG
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 5
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 5
49518: NEG
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 3
49530: NEG
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: ST_TO_ADDR
// end ; end ;
49586: GO 49589
49588: POP
// case btype of b_depot , b_warehouse :
49589: LD_VAR 0 1
49593: PUSH
49594: LD_INT 0
49596: DOUBLE
49597: EQUAL
49598: IFTRUE 49608
49600: LD_INT 1
49602: DOUBLE
49603: EQUAL
49604: IFTRUE 49608
49606: GO 49809
49608: POP
// case nation of nation_american :
49609: LD_VAR 0 5
49613: PUSH
49614: LD_INT 1
49616: DOUBLE
49617: EQUAL
49618: IFTRUE 49622
49620: GO 49678
49622: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49623: LD_ADDR_VAR 0 9
49627: PUSH
49628: LD_VAR 0 11
49632: PUSH
49633: LD_VAR 0 12
49637: PUSH
49638: LD_VAR 0 13
49642: PUSH
49643: LD_VAR 0 14
49647: PUSH
49648: LD_VAR 0 15
49652: PUSH
49653: LD_VAR 0 16
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: PUSH
49666: LD_VAR 0 4
49670: PUSH
49671: LD_INT 1
49673: PLUS
49674: ARRAY
49675: ST_TO_ADDR
49676: GO 49807
49678: LD_INT 2
49680: DOUBLE
49681: EQUAL
49682: IFTRUE 49686
49684: GO 49742
49686: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49687: LD_ADDR_VAR 0 9
49691: PUSH
49692: LD_VAR 0 17
49696: PUSH
49697: LD_VAR 0 18
49701: PUSH
49702: LD_VAR 0 19
49706: PUSH
49707: LD_VAR 0 20
49711: PUSH
49712: LD_VAR 0 21
49716: PUSH
49717: LD_VAR 0 22
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: PUSH
49730: LD_VAR 0 4
49734: PUSH
49735: LD_INT 1
49737: PLUS
49738: ARRAY
49739: ST_TO_ADDR
49740: GO 49807
49742: LD_INT 3
49744: DOUBLE
49745: EQUAL
49746: IFTRUE 49750
49748: GO 49806
49750: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49751: LD_ADDR_VAR 0 9
49755: PUSH
49756: LD_VAR 0 23
49760: PUSH
49761: LD_VAR 0 24
49765: PUSH
49766: LD_VAR 0 25
49770: PUSH
49771: LD_VAR 0 26
49775: PUSH
49776: LD_VAR 0 27
49780: PUSH
49781: LD_VAR 0 28
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: PUSH
49794: LD_VAR 0 4
49798: PUSH
49799: LD_INT 1
49801: PLUS
49802: ARRAY
49803: ST_TO_ADDR
49804: GO 49807
49806: POP
49807: GO 50362
49809: LD_INT 2
49811: DOUBLE
49812: EQUAL
49813: IFTRUE 49823
49815: LD_INT 3
49817: DOUBLE
49818: EQUAL
49819: IFTRUE 49823
49821: GO 49879
49823: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49824: LD_ADDR_VAR 0 9
49828: PUSH
49829: LD_VAR 0 29
49833: PUSH
49834: LD_VAR 0 30
49838: PUSH
49839: LD_VAR 0 31
49843: PUSH
49844: LD_VAR 0 32
49848: PUSH
49849: LD_VAR 0 33
49853: PUSH
49854: LD_VAR 0 34
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: PUSH
49867: LD_VAR 0 4
49871: PUSH
49872: LD_INT 1
49874: PLUS
49875: ARRAY
49876: ST_TO_ADDR
49877: GO 50362
49879: LD_INT 16
49881: DOUBLE
49882: EQUAL
49883: IFTRUE 49941
49885: LD_INT 17
49887: DOUBLE
49888: EQUAL
49889: IFTRUE 49941
49891: LD_INT 18
49893: DOUBLE
49894: EQUAL
49895: IFTRUE 49941
49897: LD_INT 19
49899: DOUBLE
49900: EQUAL
49901: IFTRUE 49941
49903: LD_INT 22
49905: DOUBLE
49906: EQUAL
49907: IFTRUE 49941
49909: LD_INT 20
49911: DOUBLE
49912: EQUAL
49913: IFTRUE 49941
49915: LD_INT 21
49917: DOUBLE
49918: EQUAL
49919: IFTRUE 49941
49921: LD_INT 23
49923: DOUBLE
49924: EQUAL
49925: IFTRUE 49941
49927: LD_INT 24
49929: DOUBLE
49930: EQUAL
49931: IFTRUE 49941
49933: LD_INT 25
49935: DOUBLE
49936: EQUAL
49937: IFTRUE 49941
49939: GO 49997
49941: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49942: LD_ADDR_VAR 0 9
49946: PUSH
49947: LD_VAR 0 35
49951: PUSH
49952: LD_VAR 0 36
49956: PUSH
49957: LD_VAR 0 37
49961: PUSH
49962: LD_VAR 0 38
49966: PUSH
49967: LD_VAR 0 39
49971: PUSH
49972: LD_VAR 0 40
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: PUSH
49985: LD_VAR 0 4
49989: PUSH
49990: LD_INT 1
49992: PLUS
49993: ARRAY
49994: ST_TO_ADDR
49995: GO 50362
49997: LD_INT 6
49999: DOUBLE
50000: EQUAL
50001: IFTRUE 50053
50003: LD_INT 7
50005: DOUBLE
50006: EQUAL
50007: IFTRUE 50053
50009: LD_INT 8
50011: DOUBLE
50012: EQUAL
50013: IFTRUE 50053
50015: LD_INT 13
50017: DOUBLE
50018: EQUAL
50019: IFTRUE 50053
50021: LD_INT 12
50023: DOUBLE
50024: EQUAL
50025: IFTRUE 50053
50027: LD_INT 15
50029: DOUBLE
50030: EQUAL
50031: IFTRUE 50053
50033: LD_INT 11
50035: DOUBLE
50036: EQUAL
50037: IFTRUE 50053
50039: LD_INT 14
50041: DOUBLE
50042: EQUAL
50043: IFTRUE 50053
50045: LD_INT 10
50047: DOUBLE
50048: EQUAL
50049: IFTRUE 50053
50051: GO 50109
50053: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50054: LD_ADDR_VAR 0 9
50058: PUSH
50059: LD_VAR 0 41
50063: PUSH
50064: LD_VAR 0 42
50068: PUSH
50069: LD_VAR 0 43
50073: PUSH
50074: LD_VAR 0 44
50078: PUSH
50079: LD_VAR 0 45
50083: PUSH
50084: LD_VAR 0 46
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: PUSH
50097: LD_VAR 0 4
50101: PUSH
50102: LD_INT 1
50104: PLUS
50105: ARRAY
50106: ST_TO_ADDR
50107: GO 50362
50109: LD_INT 36
50111: DOUBLE
50112: EQUAL
50113: IFTRUE 50117
50115: GO 50173
50117: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50118: LD_ADDR_VAR 0 9
50122: PUSH
50123: LD_VAR 0 47
50127: PUSH
50128: LD_VAR 0 48
50132: PUSH
50133: LD_VAR 0 49
50137: PUSH
50138: LD_VAR 0 50
50142: PUSH
50143: LD_VAR 0 51
50147: PUSH
50148: LD_VAR 0 52
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: PUSH
50161: LD_VAR 0 4
50165: PUSH
50166: LD_INT 1
50168: PLUS
50169: ARRAY
50170: ST_TO_ADDR
50171: GO 50362
50173: LD_INT 4
50175: DOUBLE
50176: EQUAL
50177: IFTRUE 50199
50179: LD_INT 5
50181: DOUBLE
50182: EQUAL
50183: IFTRUE 50199
50185: LD_INT 34
50187: DOUBLE
50188: EQUAL
50189: IFTRUE 50199
50191: LD_INT 37
50193: DOUBLE
50194: EQUAL
50195: IFTRUE 50199
50197: GO 50255
50199: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50200: LD_ADDR_VAR 0 9
50204: PUSH
50205: LD_VAR 0 53
50209: PUSH
50210: LD_VAR 0 54
50214: PUSH
50215: LD_VAR 0 55
50219: PUSH
50220: LD_VAR 0 56
50224: PUSH
50225: LD_VAR 0 57
50229: PUSH
50230: LD_VAR 0 58
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: PUSH
50243: LD_VAR 0 4
50247: PUSH
50248: LD_INT 1
50250: PLUS
50251: ARRAY
50252: ST_TO_ADDR
50253: GO 50362
50255: LD_INT 31
50257: DOUBLE
50258: EQUAL
50259: IFTRUE 50305
50261: LD_INT 32
50263: DOUBLE
50264: EQUAL
50265: IFTRUE 50305
50267: LD_INT 33
50269: DOUBLE
50270: EQUAL
50271: IFTRUE 50305
50273: LD_INT 27
50275: DOUBLE
50276: EQUAL
50277: IFTRUE 50305
50279: LD_INT 26
50281: DOUBLE
50282: EQUAL
50283: IFTRUE 50305
50285: LD_INT 28
50287: DOUBLE
50288: EQUAL
50289: IFTRUE 50305
50291: LD_INT 29
50293: DOUBLE
50294: EQUAL
50295: IFTRUE 50305
50297: LD_INT 30
50299: DOUBLE
50300: EQUAL
50301: IFTRUE 50305
50303: GO 50361
50305: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50306: LD_ADDR_VAR 0 9
50310: PUSH
50311: LD_VAR 0 59
50315: PUSH
50316: LD_VAR 0 60
50320: PUSH
50321: LD_VAR 0 61
50325: PUSH
50326: LD_VAR 0 62
50330: PUSH
50331: LD_VAR 0 63
50335: PUSH
50336: LD_VAR 0 64
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: PUSH
50349: LD_VAR 0 4
50353: PUSH
50354: LD_INT 1
50356: PLUS
50357: ARRAY
50358: ST_TO_ADDR
50359: GO 50362
50361: POP
// temp_list2 = [ ] ;
50362: LD_ADDR_VAR 0 10
50366: PUSH
50367: EMPTY
50368: ST_TO_ADDR
// for i in temp_list do
50369: LD_ADDR_VAR 0 8
50373: PUSH
50374: LD_VAR 0 9
50378: PUSH
50379: FOR_IN
50380: IFFALSE 50432
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50382: LD_ADDR_VAR 0 10
50386: PUSH
50387: LD_VAR 0 10
50391: PUSH
50392: LD_VAR 0 8
50396: PUSH
50397: LD_INT 1
50399: ARRAY
50400: PUSH
50401: LD_VAR 0 2
50405: PLUS
50406: PUSH
50407: LD_VAR 0 8
50411: PUSH
50412: LD_INT 2
50414: ARRAY
50415: PUSH
50416: LD_VAR 0 3
50420: PLUS
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: EMPTY
50427: LIST
50428: ADD
50429: ST_TO_ADDR
50430: GO 50379
50432: POP
50433: POP
// result = temp_list2 ;
50434: LD_ADDR_VAR 0 7
50438: PUSH
50439: LD_VAR 0 10
50443: ST_TO_ADDR
// end ;
50444: LD_VAR 0 7
50448: RET
// export function EnemyInRange ( unit , dist ) ; begin
50449: LD_INT 0
50451: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50452: LD_ADDR_VAR 0 3
50456: PUSH
50457: LD_VAR 0 1
50461: PPUSH
50462: CALL_OW 255
50466: PPUSH
50467: LD_VAR 0 1
50471: PPUSH
50472: CALL_OW 250
50476: PPUSH
50477: LD_VAR 0 1
50481: PPUSH
50482: CALL_OW 251
50486: PPUSH
50487: LD_VAR 0 2
50491: PPUSH
50492: CALL 23845 0 4
50496: PUSH
50497: LD_INT 4
50499: ARRAY
50500: ST_TO_ADDR
// end ;
50501: LD_VAR 0 3
50505: RET
// export function PlayerSeeMe ( unit ) ; begin
50506: LD_INT 0
50508: PPUSH
// result := See ( your_side , unit ) ;
50509: LD_ADDR_VAR 0 2
50513: PUSH
50514: LD_OWVAR 2
50518: PPUSH
50519: LD_VAR 0 1
50523: PPUSH
50524: CALL_OW 292
50528: ST_TO_ADDR
// end ;
50529: LD_VAR 0 2
50533: RET
// export function ReverseDir ( unit ) ; begin
50534: LD_INT 0
50536: PPUSH
// if not unit then
50537: LD_VAR 0 1
50541: NOT
50542: IFFALSE 50546
// exit ;
50544: GO 50569
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50546: LD_ADDR_VAR 0 2
50550: PUSH
50551: LD_VAR 0 1
50555: PPUSH
50556: CALL_OW 254
50560: PUSH
50561: LD_INT 3
50563: PLUS
50564: PUSH
50565: LD_INT 6
50567: MOD
50568: ST_TO_ADDR
// end ;
50569: LD_VAR 0 2
50573: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
50574: LD_INT 0
50576: PPUSH
50577: PPUSH
50578: PPUSH
50579: PPUSH
50580: PPUSH
// if not hexes then
50581: LD_VAR 0 2
50585: NOT
50586: IFFALSE 50590
// exit ;
50588: GO 50738
// dist := 9999 ;
50590: LD_ADDR_VAR 0 5
50594: PUSH
50595: LD_INT 9999
50597: ST_TO_ADDR
// for i = 1 to hexes do
50598: LD_ADDR_VAR 0 4
50602: PUSH
50603: DOUBLE
50604: LD_INT 1
50606: DEC
50607: ST_TO_ADDR
50608: LD_VAR 0 2
50612: PUSH
50613: FOR_TO
50614: IFFALSE 50726
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
50616: LD_VAR 0 1
50620: PPUSH
50621: LD_VAR 0 2
50625: PUSH
50626: LD_VAR 0 4
50630: ARRAY
50631: PUSH
50632: LD_INT 1
50634: ARRAY
50635: PPUSH
50636: LD_VAR 0 2
50640: PUSH
50641: LD_VAR 0 4
50645: ARRAY
50646: PUSH
50647: LD_INT 2
50649: ARRAY
50650: PPUSH
50651: CALL_OW 297
50655: PUSH
50656: LD_VAR 0 5
50660: LESS
50661: IFFALSE 50724
// begin hex := hexes [ i ] ;
50663: LD_ADDR_VAR 0 7
50667: PUSH
50668: LD_VAR 0 2
50672: PUSH
50673: LD_VAR 0 4
50677: ARRAY
50678: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50679: LD_ADDR_VAR 0 5
50683: PUSH
50684: LD_VAR 0 1
50688: PPUSH
50689: LD_VAR 0 2
50693: PUSH
50694: LD_VAR 0 4
50698: ARRAY
50699: PUSH
50700: LD_INT 1
50702: ARRAY
50703: PPUSH
50704: LD_VAR 0 2
50708: PUSH
50709: LD_VAR 0 4
50713: ARRAY
50714: PUSH
50715: LD_INT 2
50717: ARRAY
50718: PPUSH
50719: CALL_OW 297
50723: ST_TO_ADDR
// end ; end ;
50724: GO 50613
50726: POP
50727: POP
// result := hex ;
50728: LD_ADDR_VAR 0 3
50732: PUSH
50733: LD_VAR 0 7
50737: ST_TO_ADDR
// end ;
50738: LD_VAR 0 3
50742: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50743: LD_INT 0
50745: PPUSH
50746: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50747: LD_VAR 0 1
50751: NOT
50752: PUSH
50753: LD_VAR 0 1
50757: PUSH
50758: LD_INT 21
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 23
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PPUSH
50782: CALL_OW 69
50786: IN
50787: NOT
50788: OR
50789: IFFALSE 50793
// exit ;
50791: GO 50840
// for i = 1 to 3 do
50793: LD_ADDR_VAR 0 3
50797: PUSH
50798: DOUBLE
50799: LD_INT 1
50801: DEC
50802: ST_TO_ADDR
50803: LD_INT 3
50805: PUSH
50806: FOR_TO
50807: IFFALSE 50838
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50809: LD_VAR 0 1
50813: PPUSH
50814: CALL_OW 250
50818: PPUSH
50819: LD_VAR 0 1
50823: PPUSH
50824: CALL_OW 251
50828: PPUSH
50829: LD_INT 1
50831: PPUSH
50832: CALL_OW 453
50836: GO 50806
50838: POP
50839: POP
// end ;
50840: LD_VAR 0 2
50844: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50845: LD_INT 0
50847: PPUSH
50848: PPUSH
50849: PPUSH
50850: PPUSH
50851: PPUSH
50852: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50853: LD_VAR 0 1
50857: NOT
50858: PUSH
50859: LD_VAR 0 2
50863: NOT
50864: OR
50865: PUSH
50866: LD_VAR 0 1
50870: PPUSH
50871: CALL_OW 314
50875: OR
50876: IFFALSE 50880
// exit ;
50878: GO 51321
// x := GetX ( enemy_unit ) ;
50880: LD_ADDR_VAR 0 7
50884: PUSH
50885: LD_VAR 0 2
50889: PPUSH
50890: CALL_OW 250
50894: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50895: LD_ADDR_VAR 0 8
50899: PUSH
50900: LD_VAR 0 2
50904: PPUSH
50905: CALL_OW 251
50909: ST_TO_ADDR
// if not x or not y then
50910: LD_VAR 0 7
50914: NOT
50915: PUSH
50916: LD_VAR 0 8
50920: NOT
50921: OR
50922: IFFALSE 50926
// exit ;
50924: GO 51321
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50926: LD_ADDR_VAR 0 6
50930: PUSH
50931: LD_VAR 0 7
50935: PPUSH
50936: LD_INT 0
50938: PPUSH
50939: LD_INT 4
50941: PPUSH
50942: CALL_OW 272
50946: PUSH
50947: LD_VAR 0 8
50951: PPUSH
50952: LD_INT 0
50954: PPUSH
50955: LD_INT 4
50957: PPUSH
50958: CALL_OW 273
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_VAR 0 7
50971: PPUSH
50972: LD_INT 1
50974: PPUSH
50975: LD_INT 4
50977: PPUSH
50978: CALL_OW 272
50982: PUSH
50983: LD_VAR 0 8
50987: PPUSH
50988: LD_INT 1
50990: PPUSH
50991: LD_INT 4
50993: PPUSH
50994: CALL_OW 273
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_VAR 0 7
51007: PPUSH
51008: LD_INT 2
51010: PPUSH
51011: LD_INT 4
51013: PPUSH
51014: CALL_OW 272
51018: PUSH
51019: LD_VAR 0 8
51023: PPUSH
51024: LD_INT 2
51026: PPUSH
51027: LD_INT 4
51029: PPUSH
51030: CALL_OW 273
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_VAR 0 7
51043: PPUSH
51044: LD_INT 3
51046: PPUSH
51047: LD_INT 4
51049: PPUSH
51050: CALL_OW 272
51054: PUSH
51055: LD_VAR 0 8
51059: PPUSH
51060: LD_INT 3
51062: PPUSH
51063: LD_INT 4
51065: PPUSH
51066: CALL_OW 273
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_VAR 0 7
51079: PPUSH
51080: LD_INT 4
51082: PPUSH
51083: LD_INT 4
51085: PPUSH
51086: CALL_OW 272
51090: PUSH
51091: LD_VAR 0 8
51095: PPUSH
51096: LD_INT 4
51098: PPUSH
51099: LD_INT 4
51101: PPUSH
51102: CALL_OW 273
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_VAR 0 7
51115: PPUSH
51116: LD_INT 5
51118: PPUSH
51119: LD_INT 4
51121: PPUSH
51122: CALL_OW 272
51126: PUSH
51127: LD_VAR 0 8
51131: PPUSH
51132: LD_INT 5
51134: PPUSH
51135: LD_INT 4
51137: PPUSH
51138: CALL_OW 273
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: ST_TO_ADDR
// for i = tmp downto 1 do
51155: LD_ADDR_VAR 0 4
51159: PUSH
51160: DOUBLE
51161: LD_VAR 0 6
51165: INC
51166: ST_TO_ADDR
51167: LD_INT 1
51169: PUSH
51170: FOR_DOWNTO
51171: IFFALSE 51272
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51173: LD_VAR 0 6
51177: PUSH
51178: LD_VAR 0 4
51182: ARRAY
51183: PUSH
51184: LD_INT 1
51186: ARRAY
51187: PPUSH
51188: LD_VAR 0 6
51192: PUSH
51193: LD_VAR 0 4
51197: ARRAY
51198: PUSH
51199: LD_INT 2
51201: ARRAY
51202: PPUSH
51203: CALL_OW 488
51207: NOT
51208: PUSH
51209: LD_VAR 0 6
51213: PUSH
51214: LD_VAR 0 4
51218: ARRAY
51219: PUSH
51220: LD_INT 1
51222: ARRAY
51223: PPUSH
51224: LD_VAR 0 6
51228: PUSH
51229: LD_VAR 0 4
51233: ARRAY
51234: PUSH
51235: LD_INT 2
51237: ARRAY
51238: PPUSH
51239: CALL_OW 428
51243: PUSH
51244: LD_INT 0
51246: NONEQUAL
51247: OR
51248: IFFALSE 51270
// tmp := Delete ( tmp , i ) ;
51250: LD_ADDR_VAR 0 6
51254: PUSH
51255: LD_VAR 0 6
51259: PPUSH
51260: LD_VAR 0 4
51264: PPUSH
51265: CALL_OW 3
51269: ST_TO_ADDR
51270: GO 51170
51272: POP
51273: POP
// j := GetClosestHex ( unit , tmp ) ;
51274: LD_ADDR_VAR 0 5
51278: PUSH
51279: LD_VAR 0 1
51283: PPUSH
51284: LD_VAR 0 6
51288: PPUSH
51289: CALL 50574 0 2
51293: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51294: LD_VAR 0 1
51298: PPUSH
51299: LD_VAR 0 5
51303: PUSH
51304: LD_INT 1
51306: ARRAY
51307: PPUSH
51308: LD_VAR 0 5
51312: PUSH
51313: LD_INT 2
51315: ARRAY
51316: PPUSH
51317: CALL_OW 111
// end ;
51321: LD_VAR 0 3
51325: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51326: LD_INT 0
51328: PPUSH
51329: PPUSH
51330: PPUSH
// uc_side = 0 ;
51331: LD_ADDR_OWVAR 20
51335: PUSH
51336: LD_INT 0
51338: ST_TO_ADDR
// uc_nation = 0 ;
51339: LD_ADDR_OWVAR 21
51343: PUSH
51344: LD_INT 0
51346: ST_TO_ADDR
// InitHc_All ( ) ;
51347: CALL_OW 584
// InitVc ;
51351: CALL_OW 20
// if mastodonts then
51355: LD_VAR 0 6
51359: IFFALSE 51426
// for i = 1 to mastodonts do
51361: LD_ADDR_VAR 0 11
51365: PUSH
51366: DOUBLE
51367: LD_INT 1
51369: DEC
51370: ST_TO_ADDR
51371: LD_VAR 0 6
51375: PUSH
51376: FOR_TO
51377: IFFALSE 51424
// begin vc_chassis := 31 ;
51379: LD_ADDR_OWVAR 37
51383: PUSH
51384: LD_INT 31
51386: ST_TO_ADDR
// vc_control := control_rider ;
51387: LD_ADDR_OWVAR 38
51391: PUSH
51392: LD_INT 4
51394: ST_TO_ADDR
// animal := CreateVehicle ;
51395: LD_ADDR_VAR 0 12
51399: PUSH
51400: CALL_OW 45
51404: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51405: LD_VAR 0 12
51409: PPUSH
51410: LD_VAR 0 8
51414: PPUSH
51415: LD_INT 0
51417: PPUSH
51418: CALL 53614 0 3
// end ;
51422: GO 51376
51424: POP
51425: POP
// if horses then
51426: LD_VAR 0 5
51430: IFFALSE 51497
// for i = 1 to horses do
51432: LD_ADDR_VAR 0 11
51436: PUSH
51437: DOUBLE
51438: LD_INT 1
51440: DEC
51441: ST_TO_ADDR
51442: LD_VAR 0 5
51446: PUSH
51447: FOR_TO
51448: IFFALSE 51495
// begin hc_class := 21 ;
51450: LD_ADDR_OWVAR 28
51454: PUSH
51455: LD_INT 21
51457: ST_TO_ADDR
// hc_gallery :=  ;
51458: LD_ADDR_OWVAR 33
51462: PUSH
51463: LD_STRING 
51465: ST_TO_ADDR
// animal := CreateHuman ;
51466: LD_ADDR_VAR 0 12
51470: PUSH
51471: CALL_OW 44
51475: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51476: LD_VAR 0 12
51480: PPUSH
51481: LD_VAR 0 8
51485: PPUSH
51486: LD_INT 0
51488: PPUSH
51489: CALL 53614 0 3
// end ;
51493: GO 51447
51495: POP
51496: POP
// if birds then
51497: LD_VAR 0 1
51501: IFFALSE 51568
// for i = 1 to birds do
51503: LD_ADDR_VAR 0 11
51507: PUSH
51508: DOUBLE
51509: LD_INT 1
51511: DEC
51512: ST_TO_ADDR
51513: LD_VAR 0 1
51517: PUSH
51518: FOR_TO
51519: IFFALSE 51566
// begin hc_class = 18 ;
51521: LD_ADDR_OWVAR 28
51525: PUSH
51526: LD_INT 18
51528: ST_TO_ADDR
// hc_gallery =  ;
51529: LD_ADDR_OWVAR 33
51533: PUSH
51534: LD_STRING 
51536: ST_TO_ADDR
// animal := CreateHuman ;
51537: LD_ADDR_VAR 0 12
51541: PUSH
51542: CALL_OW 44
51546: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51547: LD_VAR 0 12
51551: PPUSH
51552: LD_VAR 0 8
51556: PPUSH
51557: LD_INT 0
51559: PPUSH
51560: CALL 53614 0 3
// end ;
51564: GO 51518
51566: POP
51567: POP
// if tigers then
51568: LD_VAR 0 2
51572: IFFALSE 51656
// for i = 1 to tigers do
51574: LD_ADDR_VAR 0 11
51578: PUSH
51579: DOUBLE
51580: LD_INT 1
51582: DEC
51583: ST_TO_ADDR
51584: LD_VAR 0 2
51588: PUSH
51589: FOR_TO
51590: IFFALSE 51654
// begin hc_class = class_tiger ;
51592: LD_ADDR_OWVAR 28
51596: PUSH
51597: LD_INT 14
51599: ST_TO_ADDR
// hc_gallery =  ;
51600: LD_ADDR_OWVAR 33
51604: PUSH
51605: LD_STRING 
51607: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51608: LD_ADDR_OWVAR 35
51612: PUSH
51613: LD_INT 7
51615: NEG
51616: PPUSH
51617: LD_INT 7
51619: PPUSH
51620: CALL_OW 12
51624: ST_TO_ADDR
// animal := CreateHuman ;
51625: LD_ADDR_VAR 0 12
51629: PUSH
51630: CALL_OW 44
51634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51635: LD_VAR 0 12
51639: PPUSH
51640: LD_VAR 0 8
51644: PPUSH
51645: LD_INT 0
51647: PPUSH
51648: CALL 53614 0 3
// end ;
51652: GO 51589
51654: POP
51655: POP
// if apemans then
51656: LD_VAR 0 3
51660: IFFALSE 51783
// for i = 1 to apemans do
51662: LD_ADDR_VAR 0 11
51666: PUSH
51667: DOUBLE
51668: LD_INT 1
51670: DEC
51671: ST_TO_ADDR
51672: LD_VAR 0 3
51676: PUSH
51677: FOR_TO
51678: IFFALSE 51781
// begin hc_class = class_apeman ;
51680: LD_ADDR_OWVAR 28
51684: PUSH
51685: LD_INT 12
51687: ST_TO_ADDR
// hc_gallery =  ;
51688: LD_ADDR_OWVAR 33
51692: PUSH
51693: LD_STRING 
51695: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51696: LD_ADDR_OWVAR 35
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PPUSH
51705: LD_INT 2
51707: PPUSH
51708: CALL_OW 12
51712: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51713: LD_ADDR_OWVAR 31
51717: PUSH
51718: LD_INT 1
51720: PPUSH
51721: LD_INT 3
51723: PPUSH
51724: CALL_OW 12
51728: PUSH
51729: LD_INT 1
51731: PPUSH
51732: LD_INT 3
51734: PPUSH
51735: CALL_OW 12
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// animal := CreateHuman ;
51752: LD_ADDR_VAR 0 12
51756: PUSH
51757: CALL_OW 44
51761: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51762: LD_VAR 0 12
51766: PPUSH
51767: LD_VAR 0 8
51771: PPUSH
51772: LD_INT 0
51774: PPUSH
51775: CALL 53614 0 3
// end ;
51779: GO 51677
51781: POP
51782: POP
// if enchidnas then
51783: LD_VAR 0 4
51787: IFFALSE 51854
// for i = 1 to enchidnas do
51789: LD_ADDR_VAR 0 11
51793: PUSH
51794: DOUBLE
51795: LD_INT 1
51797: DEC
51798: ST_TO_ADDR
51799: LD_VAR 0 4
51803: PUSH
51804: FOR_TO
51805: IFFALSE 51852
// begin hc_class = 13 ;
51807: LD_ADDR_OWVAR 28
51811: PUSH
51812: LD_INT 13
51814: ST_TO_ADDR
// hc_gallery =  ;
51815: LD_ADDR_OWVAR 33
51819: PUSH
51820: LD_STRING 
51822: ST_TO_ADDR
// animal := CreateHuman ;
51823: LD_ADDR_VAR 0 12
51827: PUSH
51828: CALL_OW 44
51832: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51833: LD_VAR 0 12
51837: PPUSH
51838: LD_VAR 0 8
51842: PPUSH
51843: LD_INT 0
51845: PPUSH
51846: CALL 53614 0 3
// end ;
51850: GO 51804
51852: POP
51853: POP
// if fishes then
51854: LD_VAR 0 7
51858: IFFALSE 51925
// for i = 1 to fishes do
51860: LD_ADDR_VAR 0 11
51864: PUSH
51865: DOUBLE
51866: LD_INT 1
51868: DEC
51869: ST_TO_ADDR
51870: LD_VAR 0 7
51874: PUSH
51875: FOR_TO
51876: IFFALSE 51923
// begin hc_class = 20 ;
51878: LD_ADDR_OWVAR 28
51882: PUSH
51883: LD_INT 20
51885: ST_TO_ADDR
// hc_gallery =  ;
51886: LD_ADDR_OWVAR 33
51890: PUSH
51891: LD_STRING 
51893: ST_TO_ADDR
// animal := CreateHuman ;
51894: LD_ADDR_VAR 0 12
51898: PUSH
51899: CALL_OW 44
51903: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51904: LD_VAR 0 12
51908: PPUSH
51909: LD_VAR 0 9
51913: PPUSH
51914: LD_INT 0
51916: PPUSH
51917: CALL 53614 0 3
// end ;
51921: GO 51875
51923: POP
51924: POP
// end ;
51925: LD_VAR 0 10
51929: RET
// export function WantHeal ( sci , unit ) ; begin
51930: LD_INT 0
51932: PPUSH
// if GetTaskList ( sci ) > 0 then
51933: LD_VAR 0 1
51937: PPUSH
51938: CALL_OW 437
51942: PUSH
51943: LD_INT 0
51945: GREATER
51946: IFFALSE 52016
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51948: LD_VAR 0 1
51952: PPUSH
51953: CALL_OW 437
51957: PUSH
51958: LD_INT 1
51960: ARRAY
51961: PUSH
51962: LD_INT 1
51964: ARRAY
51965: PUSH
51966: LD_STRING l
51968: EQUAL
51969: PUSH
51970: LD_VAR 0 1
51974: PPUSH
51975: CALL_OW 437
51979: PUSH
51980: LD_INT 1
51982: ARRAY
51983: PUSH
51984: LD_INT 4
51986: ARRAY
51987: PUSH
51988: LD_VAR 0 2
51992: EQUAL
51993: AND
51994: IFFALSE 52006
// result := true else
51996: LD_ADDR_VAR 0 3
52000: PUSH
52001: LD_INT 1
52003: ST_TO_ADDR
52004: GO 52014
// result := false ;
52006: LD_ADDR_VAR 0 3
52010: PUSH
52011: LD_INT 0
52013: ST_TO_ADDR
// end else
52014: GO 52024
// result := false ;
52016: LD_ADDR_VAR 0 3
52020: PUSH
52021: LD_INT 0
52023: ST_TO_ADDR
// end ;
52024: LD_VAR 0 3
52028: RET
// export function HealTarget ( sci ) ; begin
52029: LD_INT 0
52031: PPUSH
// if not sci then
52032: LD_VAR 0 1
52036: NOT
52037: IFFALSE 52041
// exit ;
52039: GO 52106
// result := 0 ;
52041: LD_ADDR_VAR 0 2
52045: PUSH
52046: LD_INT 0
52048: ST_TO_ADDR
// if GetTaskList ( sci ) then
52049: LD_VAR 0 1
52053: PPUSH
52054: CALL_OW 437
52058: IFFALSE 52106
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52060: LD_VAR 0 1
52064: PPUSH
52065: CALL_OW 437
52069: PUSH
52070: LD_INT 1
52072: ARRAY
52073: PUSH
52074: LD_INT 1
52076: ARRAY
52077: PUSH
52078: LD_STRING l
52080: EQUAL
52081: IFFALSE 52106
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52083: LD_ADDR_VAR 0 2
52087: PUSH
52088: LD_VAR 0 1
52092: PPUSH
52093: CALL_OW 437
52097: PUSH
52098: LD_INT 1
52100: ARRAY
52101: PUSH
52102: LD_INT 4
52104: ARRAY
52105: ST_TO_ADDR
// end ;
52106: LD_VAR 0 2
52110: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52111: LD_INT 0
52113: PPUSH
52114: PPUSH
52115: PPUSH
52116: PPUSH
// if not base_units then
52117: LD_VAR 0 1
52121: NOT
52122: IFFALSE 52126
// exit ;
52124: GO 52213
// result := false ;
52126: LD_ADDR_VAR 0 2
52130: PUSH
52131: LD_INT 0
52133: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52134: LD_ADDR_VAR 0 5
52138: PUSH
52139: LD_VAR 0 1
52143: PPUSH
52144: LD_INT 21
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PPUSH
52154: CALL_OW 72
52158: ST_TO_ADDR
// if not tmp then
52159: LD_VAR 0 5
52163: NOT
52164: IFFALSE 52168
// exit ;
52166: GO 52213
// for i in tmp do
52168: LD_ADDR_VAR 0 3
52172: PUSH
52173: LD_VAR 0 5
52177: PUSH
52178: FOR_IN
52179: IFFALSE 52211
// begin result := EnemyInRange ( i , 22 ) ;
52181: LD_ADDR_VAR 0 2
52185: PUSH
52186: LD_VAR 0 3
52190: PPUSH
52191: LD_INT 22
52193: PPUSH
52194: CALL 50449 0 2
52198: ST_TO_ADDR
// if result then
52199: LD_VAR 0 2
52203: IFFALSE 52209
// exit ;
52205: POP
52206: POP
52207: GO 52213
// end ;
52209: GO 52178
52211: POP
52212: POP
// end ;
52213: LD_VAR 0 2
52217: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52218: LD_INT 0
52220: PPUSH
52221: PPUSH
// if not units then
52222: LD_VAR 0 1
52226: NOT
52227: IFFALSE 52231
// exit ;
52229: GO 52301
// result := [ ] ;
52231: LD_ADDR_VAR 0 3
52235: PUSH
52236: EMPTY
52237: ST_TO_ADDR
// for i in units do
52238: LD_ADDR_VAR 0 4
52242: PUSH
52243: LD_VAR 0 1
52247: PUSH
52248: FOR_IN
52249: IFFALSE 52299
// if GetTag ( i ) = tag then
52251: LD_VAR 0 4
52255: PPUSH
52256: CALL_OW 110
52260: PUSH
52261: LD_VAR 0 2
52265: EQUAL
52266: IFFALSE 52297
// result := Replace ( result , result + 1 , i ) ;
52268: LD_ADDR_VAR 0 3
52272: PUSH
52273: LD_VAR 0 3
52277: PPUSH
52278: LD_VAR 0 3
52282: PUSH
52283: LD_INT 1
52285: PLUS
52286: PPUSH
52287: LD_VAR 0 4
52291: PPUSH
52292: CALL_OW 1
52296: ST_TO_ADDR
52297: GO 52248
52299: POP
52300: POP
// end ;
52301: LD_VAR 0 3
52305: RET
// export function IsDriver ( un ) ; begin
52306: LD_INT 0
52308: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52309: LD_ADDR_VAR 0 2
52313: PUSH
52314: LD_VAR 0 1
52318: PUSH
52319: LD_INT 55
52321: PUSH
52322: EMPTY
52323: LIST
52324: PPUSH
52325: CALL_OW 69
52329: IN
52330: ST_TO_ADDR
// end ;
52331: LD_VAR 0 2
52335: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52336: LD_INT 0
52338: PPUSH
52339: PPUSH
// list := [ ] ;
52340: LD_ADDR_VAR 0 5
52344: PUSH
52345: EMPTY
52346: ST_TO_ADDR
// case d of 0 :
52347: LD_VAR 0 3
52351: PUSH
52352: LD_INT 0
52354: DOUBLE
52355: EQUAL
52356: IFTRUE 52360
52358: GO 52493
52360: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52361: LD_ADDR_VAR 0 5
52365: PUSH
52366: LD_VAR 0 1
52370: PUSH
52371: LD_INT 4
52373: MINUS
52374: PUSH
52375: LD_VAR 0 2
52379: PUSH
52380: LD_INT 4
52382: MINUS
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: PUSH
52392: LD_VAR 0 1
52396: PUSH
52397: LD_INT 3
52399: MINUS
52400: PUSH
52401: LD_VAR 0 2
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: PUSH
52414: LD_VAR 0 1
52418: PUSH
52419: LD_INT 4
52421: PLUS
52422: PUSH
52423: LD_VAR 0 2
52427: PUSH
52428: LD_INT 4
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: PUSH
52436: LD_VAR 0 1
52440: PUSH
52441: LD_INT 3
52443: PLUS
52444: PUSH
52445: LD_VAR 0 2
52449: PUSH
52450: LD_INT 3
52452: PLUS
52453: PUSH
52454: LD_INT 5
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: PUSH
52462: LD_VAR 0 1
52466: PUSH
52467: LD_VAR 0 2
52471: PUSH
52472: LD_INT 4
52474: PLUS
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: ST_TO_ADDR
// end ; 1 :
52491: GO 53191
52493: LD_INT 1
52495: DOUBLE
52496: EQUAL
52497: IFTRUE 52501
52499: GO 52634
52501: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52502: LD_ADDR_VAR 0 5
52506: PUSH
52507: LD_VAR 0 1
52511: PUSH
52512: LD_VAR 0 2
52516: PUSH
52517: LD_INT 4
52519: MINUS
52520: PUSH
52521: LD_INT 3
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: PUSH
52529: LD_VAR 0 1
52533: PUSH
52534: LD_INT 3
52536: MINUS
52537: PUSH
52538: LD_VAR 0 2
52542: PUSH
52543: LD_INT 3
52545: MINUS
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: PUSH
52555: LD_VAR 0 1
52559: PUSH
52560: LD_INT 4
52562: MINUS
52563: PUSH
52564: LD_VAR 0 2
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: PUSH
52577: LD_VAR 0 1
52581: PUSH
52582: LD_VAR 0 2
52586: PUSH
52587: LD_INT 3
52589: PLUS
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: PUSH
52599: LD_VAR 0 1
52603: PUSH
52604: LD_INT 4
52606: PLUS
52607: PUSH
52608: LD_VAR 0 2
52612: PUSH
52613: LD_INT 4
52615: PLUS
52616: PUSH
52617: LD_INT 5
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// end ; 2 :
52632: GO 53191
52634: LD_INT 2
52636: DOUBLE
52637: EQUAL
52638: IFTRUE 52642
52640: GO 52771
52642: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52643: LD_ADDR_VAR 0 5
52647: PUSH
52648: LD_VAR 0 1
52652: PUSH
52653: LD_VAR 0 2
52657: PUSH
52658: LD_INT 3
52660: MINUS
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: PUSH
52670: LD_VAR 0 1
52674: PUSH
52675: LD_INT 4
52677: PLUS
52678: PUSH
52679: LD_VAR 0 2
52683: PUSH
52684: LD_INT 4
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: PUSH
52692: LD_VAR 0 1
52696: PUSH
52697: LD_VAR 0 2
52701: PUSH
52702: LD_INT 4
52704: PLUS
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: PUSH
52714: LD_VAR 0 1
52718: PUSH
52719: LD_INT 3
52721: MINUS
52722: PUSH
52723: LD_VAR 0 2
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: PUSH
52736: LD_VAR 0 1
52740: PUSH
52741: LD_INT 4
52743: MINUS
52744: PUSH
52745: LD_VAR 0 2
52749: PUSH
52750: LD_INT 4
52752: MINUS
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: ST_TO_ADDR
// end ; 3 :
52769: GO 53191
52771: LD_INT 3
52773: DOUBLE
52774: EQUAL
52775: IFTRUE 52779
52777: GO 52912
52779: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52780: LD_ADDR_VAR 0 5
52784: PUSH
52785: LD_VAR 0 1
52789: PUSH
52790: LD_INT 3
52792: PLUS
52793: PUSH
52794: LD_VAR 0 2
52798: PUSH
52799: LD_INT 4
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: LIST
52806: PUSH
52807: LD_VAR 0 1
52811: PUSH
52812: LD_INT 4
52814: PLUS
52815: PUSH
52816: LD_VAR 0 2
52820: PUSH
52821: LD_INT 4
52823: PLUS
52824: PUSH
52825: LD_INT 5
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: LIST
52832: PUSH
52833: LD_VAR 0 1
52837: PUSH
52838: LD_INT 4
52840: MINUS
52841: PUSH
52842: LD_VAR 0 2
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: LIST
52854: PUSH
52855: LD_VAR 0 1
52859: PUSH
52860: LD_VAR 0 2
52864: PUSH
52865: LD_INT 4
52867: MINUS
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: LIST
52876: PUSH
52877: LD_VAR 0 1
52881: PUSH
52882: LD_INT 3
52884: MINUS
52885: PUSH
52886: LD_VAR 0 2
52890: PUSH
52891: LD_INT 3
52893: MINUS
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: ST_TO_ADDR
// end ; 4 :
52910: GO 53191
52912: LD_INT 4
52914: DOUBLE
52915: EQUAL
52916: IFTRUE 52920
52918: GO 53053
52920: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52921: LD_ADDR_VAR 0 5
52925: PUSH
52926: LD_VAR 0 1
52930: PUSH
52931: LD_VAR 0 2
52935: PUSH
52936: LD_INT 4
52938: PLUS
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: PUSH
52948: LD_VAR 0 1
52952: PUSH
52953: LD_INT 3
52955: PLUS
52956: PUSH
52957: LD_VAR 0 2
52961: PUSH
52962: LD_INT 3
52964: PLUS
52965: PUSH
52966: LD_INT 5
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: PUSH
52974: LD_VAR 0 1
52978: PUSH
52979: LD_INT 4
52981: PLUS
52982: PUSH
52983: LD_VAR 0 2
52987: PUSH
52988: LD_INT 4
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: PUSH
52996: LD_VAR 0 1
53000: PUSH
53001: LD_VAR 0 2
53005: PUSH
53006: LD_INT 3
53008: MINUS
53009: PUSH
53010: LD_INT 3
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: PUSH
53018: LD_VAR 0 1
53022: PUSH
53023: LD_INT 4
53025: MINUS
53026: PUSH
53027: LD_VAR 0 2
53031: PUSH
53032: LD_INT 4
53034: MINUS
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// end ; 5 :
53051: GO 53191
53053: LD_INT 5
53055: DOUBLE
53056: EQUAL
53057: IFTRUE 53061
53059: GO 53190
53061: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53062: LD_ADDR_VAR 0 5
53066: PUSH
53067: LD_VAR 0 1
53071: PUSH
53072: LD_INT 4
53074: MINUS
53075: PUSH
53076: LD_VAR 0 2
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: PUSH
53089: LD_VAR 0 1
53093: PUSH
53094: LD_VAR 0 2
53098: PUSH
53099: LD_INT 4
53101: MINUS
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: LIST
53110: PUSH
53111: LD_VAR 0 1
53115: PUSH
53116: LD_INT 4
53118: PLUS
53119: PUSH
53120: LD_VAR 0 2
53124: PUSH
53125: LD_INT 4
53127: PLUS
53128: PUSH
53129: LD_INT 5
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: LIST
53136: PUSH
53137: LD_VAR 0 1
53141: PUSH
53142: LD_INT 3
53144: PLUS
53145: PUSH
53146: LD_VAR 0 2
53150: PUSH
53151: LD_INT 4
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: PUSH
53159: LD_VAR 0 1
53163: PUSH
53164: LD_VAR 0 2
53168: PUSH
53169: LD_INT 3
53171: PLUS
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// end ; end ;
53188: GO 53191
53190: POP
// result := list ;
53191: LD_ADDR_VAR 0 4
53195: PUSH
53196: LD_VAR 0 5
53200: ST_TO_ADDR
// end ;
53201: LD_VAR 0 4
53205: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53206: LD_INT 0
53208: PPUSH
53209: PPUSH
53210: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53211: LD_VAR 0 1
53215: NOT
53216: PUSH
53217: LD_VAR 0 2
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 3
53230: PUSH
53231: LD_INT 4
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: IN
53240: NOT
53241: OR
53242: IFFALSE 53246
// exit ;
53244: GO 53338
// tmp := [ ] ;
53246: LD_ADDR_VAR 0 5
53250: PUSH
53251: EMPTY
53252: ST_TO_ADDR
// for i in units do
53253: LD_ADDR_VAR 0 4
53257: PUSH
53258: LD_VAR 0 1
53262: PUSH
53263: FOR_IN
53264: IFFALSE 53307
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53266: LD_ADDR_VAR 0 5
53270: PUSH
53271: LD_VAR 0 5
53275: PPUSH
53276: LD_VAR 0 5
53280: PUSH
53281: LD_INT 1
53283: PLUS
53284: PPUSH
53285: LD_VAR 0 4
53289: PPUSH
53290: LD_VAR 0 2
53294: PPUSH
53295: CALL_OW 259
53299: PPUSH
53300: CALL_OW 2
53304: ST_TO_ADDR
53305: GO 53263
53307: POP
53308: POP
// if not tmp then
53309: LD_VAR 0 5
53313: NOT
53314: IFFALSE 53318
// exit ;
53316: GO 53338
// result := SortListByListDesc ( units , tmp ) ;
53318: LD_ADDR_VAR 0 3
53322: PUSH
53323: LD_VAR 0 1
53327: PPUSH
53328: LD_VAR 0 5
53332: PPUSH
53333: CALL_OW 77
53337: ST_TO_ADDR
// end ;
53338: LD_VAR 0 3
53342: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53343: LD_INT 0
53345: PPUSH
53346: PPUSH
53347: PPUSH
// result := false ;
53348: LD_ADDR_VAR 0 3
53352: PUSH
53353: LD_INT 0
53355: ST_TO_ADDR
// x := GetX ( building ) ;
53356: LD_ADDR_VAR 0 4
53360: PUSH
53361: LD_VAR 0 2
53365: PPUSH
53366: CALL_OW 250
53370: ST_TO_ADDR
// y := GetY ( building ) ;
53371: LD_ADDR_VAR 0 5
53375: PUSH
53376: LD_VAR 0 2
53380: PPUSH
53381: CALL_OW 251
53385: ST_TO_ADDR
// if not building or not x or not y then
53386: LD_VAR 0 2
53390: NOT
53391: PUSH
53392: LD_VAR 0 4
53396: NOT
53397: OR
53398: PUSH
53399: LD_VAR 0 5
53403: NOT
53404: OR
53405: IFFALSE 53409
// exit ;
53407: GO 53501
// if GetTaskList ( unit ) then
53409: LD_VAR 0 1
53413: PPUSH
53414: CALL_OW 437
53418: IFFALSE 53501
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53420: LD_STRING e
53422: PUSH
53423: LD_VAR 0 1
53427: PPUSH
53428: CALL_OW 437
53432: PUSH
53433: LD_INT 1
53435: ARRAY
53436: PUSH
53437: LD_INT 1
53439: ARRAY
53440: EQUAL
53441: PUSH
53442: LD_VAR 0 4
53446: PUSH
53447: LD_VAR 0 1
53451: PPUSH
53452: CALL_OW 437
53456: PUSH
53457: LD_INT 1
53459: ARRAY
53460: PUSH
53461: LD_INT 2
53463: ARRAY
53464: EQUAL
53465: AND
53466: PUSH
53467: LD_VAR 0 5
53471: PUSH
53472: LD_VAR 0 1
53476: PPUSH
53477: CALL_OW 437
53481: PUSH
53482: LD_INT 1
53484: ARRAY
53485: PUSH
53486: LD_INT 3
53488: ARRAY
53489: EQUAL
53490: AND
53491: IFFALSE 53501
// result := true end ;
53493: LD_ADDR_VAR 0 3
53497: PUSH
53498: LD_INT 1
53500: ST_TO_ADDR
// end ;
53501: LD_VAR 0 3
53505: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53506: LD_INT 0
53508: PPUSH
// result := false ;
53509: LD_ADDR_VAR 0 4
53513: PUSH
53514: LD_INT 0
53516: ST_TO_ADDR
// if GetTaskList ( unit ) then
53517: LD_VAR 0 1
53521: PPUSH
53522: CALL_OW 437
53526: IFFALSE 53609
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53528: LD_STRING M
53530: PUSH
53531: LD_VAR 0 1
53535: PPUSH
53536: CALL_OW 437
53540: PUSH
53541: LD_INT 1
53543: ARRAY
53544: PUSH
53545: LD_INT 1
53547: ARRAY
53548: EQUAL
53549: PUSH
53550: LD_VAR 0 2
53554: PUSH
53555: LD_VAR 0 1
53559: PPUSH
53560: CALL_OW 437
53564: PUSH
53565: LD_INT 1
53567: ARRAY
53568: PUSH
53569: LD_INT 2
53571: ARRAY
53572: EQUAL
53573: AND
53574: PUSH
53575: LD_VAR 0 3
53579: PUSH
53580: LD_VAR 0 1
53584: PPUSH
53585: CALL_OW 437
53589: PUSH
53590: LD_INT 1
53592: ARRAY
53593: PUSH
53594: LD_INT 3
53596: ARRAY
53597: EQUAL
53598: AND
53599: IFFALSE 53609
// result := true ;
53601: LD_ADDR_VAR 0 4
53605: PUSH
53606: LD_INT 1
53608: ST_TO_ADDR
// end ; end ;
53609: LD_VAR 0 4
53613: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53614: LD_INT 0
53616: PPUSH
53617: PPUSH
53618: PPUSH
53619: PPUSH
// if not unit or not area then
53620: LD_VAR 0 1
53624: NOT
53625: PUSH
53626: LD_VAR 0 2
53630: NOT
53631: OR
53632: IFFALSE 53636
// exit ;
53634: GO 53800
// tmp := AreaToList ( area , i ) ;
53636: LD_ADDR_VAR 0 6
53640: PUSH
53641: LD_VAR 0 2
53645: PPUSH
53646: LD_VAR 0 5
53650: PPUSH
53651: CALL_OW 517
53655: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53656: LD_ADDR_VAR 0 5
53660: PUSH
53661: DOUBLE
53662: LD_INT 1
53664: DEC
53665: ST_TO_ADDR
53666: LD_VAR 0 6
53670: PUSH
53671: LD_INT 1
53673: ARRAY
53674: PUSH
53675: FOR_TO
53676: IFFALSE 53798
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53678: LD_ADDR_VAR 0 7
53682: PUSH
53683: LD_VAR 0 6
53687: PUSH
53688: LD_INT 1
53690: ARRAY
53691: PUSH
53692: LD_VAR 0 5
53696: ARRAY
53697: PUSH
53698: LD_VAR 0 6
53702: PUSH
53703: LD_INT 2
53705: ARRAY
53706: PUSH
53707: LD_VAR 0 5
53711: ARRAY
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53717: LD_VAR 0 7
53721: PUSH
53722: LD_INT 1
53724: ARRAY
53725: PPUSH
53726: LD_VAR 0 7
53730: PUSH
53731: LD_INT 2
53733: ARRAY
53734: PPUSH
53735: CALL_OW 428
53739: PUSH
53740: LD_INT 0
53742: EQUAL
53743: IFFALSE 53796
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53745: LD_VAR 0 1
53749: PPUSH
53750: LD_VAR 0 7
53754: PUSH
53755: LD_INT 1
53757: ARRAY
53758: PPUSH
53759: LD_VAR 0 7
53763: PUSH
53764: LD_INT 2
53766: ARRAY
53767: PPUSH
53768: LD_VAR 0 3
53772: PPUSH
53773: CALL_OW 48
// result := IsPlaced ( unit ) ;
53777: LD_ADDR_VAR 0 4
53781: PUSH
53782: LD_VAR 0 1
53786: PPUSH
53787: CALL_OW 305
53791: ST_TO_ADDR
// exit ;
53792: POP
53793: POP
53794: GO 53800
// end ; end ;
53796: GO 53675
53798: POP
53799: POP
// end ;
53800: LD_VAR 0 4
53804: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53805: LD_INT 0
53807: PPUSH
53808: PPUSH
53809: PPUSH
// if not side or side > 8 then
53810: LD_VAR 0 1
53814: NOT
53815: PUSH
53816: LD_VAR 0 1
53820: PUSH
53821: LD_INT 8
53823: GREATER
53824: OR
53825: IFFALSE 53829
// exit ;
53827: GO 54016
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53829: LD_ADDR_VAR 0 4
53833: PUSH
53834: LD_INT 22
53836: PUSH
53837: LD_VAR 0 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 21
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PPUSH
53860: CALL_OW 69
53864: ST_TO_ADDR
// if not tmp then
53865: LD_VAR 0 4
53869: NOT
53870: IFFALSE 53874
// exit ;
53872: GO 54016
// enable_addtolog := true ;
53874: LD_ADDR_OWVAR 81
53878: PUSH
53879: LD_INT 1
53881: ST_TO_ADDR
// AddToLog ( [ ) ;
53882: LD_STRING [
53884: PPUSH
53885: CALL_OW 561
// for i in tmp do
53889: LD_ADDR_VAR 0 3
53893: PUSH
53894: LD_VAR 0 4
53898: PUSH
53899: FOR_IN
53900: IFFALSE 54007
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53902: LD_STRING [
53904: PUSH
53905: LD_VAR 0 3
53909: PPUSH
53910: CALL_OW 266
53914: STR
53915: PUSH
53916: LD_STRING , 
53918: STR
53919: PUSH
53920: LD_VAR 0 3
53924: PPUSH
53925: CALL_OW 250
53929: STR
53930: PUSH
53931: LD_STRING , 
53933: STR
53934: PUSH
53935: LD_VAR 0 3
53939: PPUSH
53940: CALL_OW 251
53944: STR
53945: PUSH
53946: LD_STRING , 
53948: STR
53949: PUSH
53950: LD_VAR 0 3
53954: PPUSH
53955: CALL_OW 254
53959: STR
53960: PUSH
53961: LD_STRING , 
53963: STR
53964: PUSH
53965: LD_VAR 0 3
53969: PPUSH
53970: LD_INT 1
53972: PPUSH
53973: CALL_OW 268
53977: STR
53978: PUSH
53979: LD_STRING , 
53981: STR
53982: PUSH
53983: LD_VAR 0 3
53987: PPUSH
53988: LD_INT 2
53990: PPUSH
53991: CALL_OW 268
53995: STR
53996: PUSH
53997: LD_STRING ],
53999: STR
54000: PPUSH
54001: CALL_OW 561
// end ;
54005: GO 53899
54007: POP
54008: POP
// AddToLog ( ]; ) ;
54009: LD_STRING ];
54011: PPUSH
54012: CALL_OW 561
// end ;
54016: LD_VAR 0 2
54020: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54021: LD_INT 0
54023: PPUSH
54024: PPUSH
54025: PPUSH
54026: PPUSH
54027: PPUSH
// if not area or not rate or not max then
54028: LD_VAR 0 1
54032: NOT
54033: PUSH
54034: LD_VAR 0 2
54038: NOT
54039: OR
54040: PUSH
54041: LD_VAR 0 4
54045: NOT
54046: OR
54047: IFFALSE 54051
// exit ;
54049: GO 54243
// while 1 do
54051: LD_INT 1
54053: IFFALSE 54243
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54055: LD_ADDR_VAR 0 9
54059: PUSH
54060: LD_VAR 0 1
54064: PPUSH
54065: LD_INT 1
54067: PPUSH
54068: CALL_OW 287
54072: PUSH
54073: LD_INT 10
54075: MUL
54076: ST_TO_ADDR
// r := rate / 10 ;
54077: LD_ADDR_VAR 0 7
54081: PUSH
54082: LD_VAR 0 2
54086: PUSH
54087: LD_INT 10
54089: DIVREAL
54090: ST_TO_ADDR
// time := 1 1$00 ;
54091: LD_ADDR_VAR 0 8
54095: PUSH
54096: LD_INT 2100
54098: ST_TO_ADDR
// if amount < min then
54099: LD_VAR 0 9
54103: PUSH
54104: LD_VAR 0 3
54108: LESS
54109: IFFALSE 54127
// r := r * 2 else
54111: LD_ADDR_VAR 0 7
54115: PUSH
54116: LD_VAR 0 7
54120: PUSH
54121: LD_INT 2
54123: MUL
54124: ST_TO_ADDR
54125: GO 54153
// if amount > max then
54127: LD_VAR 0 9
54131: PUSH
54132: LD_VAR 0 4
54136: GREATER
54137: IFFALSE 54153
// r := r / 2 ;
54139: LD_ADDR_VAR 0 7
54143: PUSH
54144: LD_VAR 0 7
54148: PUSH
54149: LD_INT 2
54151: DIVREAL
54152: ST_TO_ADDR
// time := time / r ;
54153: LD_ADDR_VAR 0 8
54157: PUSH
54158: LD_VAR 0 8
54162: PUSH
54163: LD_VAR 0 7
54167: DIVREAL
54168: ST_TO_ADDR
// if time < 0 then
54169: LD_VAR 0 8
54173: PUSH
54174: LD_INT 0
54176: LESS
54177: IFFALSE 54194
// time := time * - 1 ;
54179: LD_ADDR_VAR 0 8
54183: PUSH
54184: LD_VAR 0 8
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: MUL
54193: ST_TO_ADDR
// wait ( time ) ;
54194: LD_VAR 0 8
54198: PPUSH
54199: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54203: LD_INT 35
54205: PPUSH
54206: LD_INT 875
54208: PPUSH
54209: CALL_OW 12
54213: PPUSH
54214: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54218: LD_INT 1
54220: PPUSH
54221: LD_INT 5
54223: PPUSH
54224: CALL_OW 12
54228: PPUSH
54229: LD_VAR 0 1
54233: PPUSH
54234: LD_INT 1
54236: PPUSH
54237: CALL_OW 55
// end ;
54241: GO 54051
// end ;
54243: LD_VAR 0 5
54247: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54248: LD_INT 0
54250: PPUSH
54251: PPUSH
54252: PPUSH
54253: PPUSH
54254: PPUSH
54255: PPUSH
54256: PPUSH
54257: PPUSH
// if not turrets or not factories then
54258: LD_VAR 0 1
54262: NOT
54263: PUSH
54264: LD_VAR 0 2
54268: NOT
54269: OR
54270: IFFALSE 54274
// exit ;
54272: GO 54581
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54274: LD_ADDR_VAR 0 10
54278: PUSH
54279: LD_INT 5
54281: PUSH
54282: LD_INT 6
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 4
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 3
54301: PUSH
54302: LD_INT 5
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 24
54316: PUSH
54317: LD_INT 25
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 23
54326: PUSH
54327: LD_INT 27
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 42
54340: PUSH
54341: LD_INT 43
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 44
54350: PUSH
54351: LD_INT 46
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 45
54360: PUSH
54361: LD_INT 47
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: LIST
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: LIST
54377: ST_TO_ADDR
// result := [ ] ;
54378: LD_ADDR_VAR 0 3
54382: PUSH
54383: EMPTY
54384: ST_TO_ADDR
// for i in turrets do
54385: LD_ADDR_VAR 0 4
54389: PUSH
54390: LD_VAR 0 1
54394: PUSH
54395: FOR_IN
54396: IFFALSE 54579
// begin nat := GetNation ( i ) ;
54398: LD_ADDR_VAR 0 7
54402: PUSH
54403: LD_VAR 0 4
54407: PPUSH
54408: CALL_OW 248
54412: ST_TO_ADDR
// weapon := 0 ;
54413: LD_ADDR_VAR 0 8
54417: PUSH
54418: LD_INT 0
54420: ST_TO_ADDR
// if not nat then
54421: LD_VAR 0 7
54425: NOT
54426: IFFALSE 54430
// continue ;
54428: GO 54395
// for j in list [ nat ] do
54430: LD_ADDR_VAR 0 5
54434: PUSH
54435: LD_VAR 0 10
54439: PUSH
54440: LD_VAR 0 7
54444: ARRAY
54445: PUSH
54446: FOR_IN
54447: IFFALSE 54488
// if GetBWeapon ( i ) = j [ 1 ] then
54449: LD_VAR 0 4
54453: PPUSH
54454: CALL_OW 269
54458: PUSH
54459: LD_VAR 0 5
54463: PUSH
54464: LD_INT 1
54466: ARRAY
54467: EQUAL
54468: IFFALSE 54486
// begin weapon := j [ 2 ] ;
54470: LD_ADDR_VAR 0 8
54474: PUSH
54475: LD_VAR 0 5
54479: PUSH
54480: LD_INT 2
54482: ARRAY
54483: ST_TO_ADDR
// break ;
54484: GO 54488
// end ;
54486: GO 54446
54488: POP
54489: POP
// if not weapon then
54490: LD_VAR 0 8
54494: NOT
54495: IFFALSE 54499
// continue ;
54497: GO 54395
// for k in factories do
54499: LD_ADDR_VAR 0 6
54503: PUSH
54504: LD_VAR 0 2
54508: PUSH
54509: FOR_IN
54510: IFFALSE 54575
// begin weapons := AvailableWeaponList ( k ) ;
54512: LD_ADDR_VAR 0 9
54516: PUSH
54517: LD_VAR 0 6
54521: PPUSH
54522: CALL_OW 478
54526: ST_TO_ADDR
// if not weapons then
54527: LD_VAR 0 9
54531: NOT
54532: IFFALSE 54536
// continue ;
54534: GO 54509
// if weapon in weapons then
54536: LD_VAR 0 8
54540: PUSH
54541: LD_VAR 0 9
54545: IN
54546: IFFALSE 54573
// begin result := [ i , weapon ] ;
54548: LD_ADDR_VAR 0 3
54552: PUSH
54553: LD_VAR 0 4
54557: PUSH
54558: LD_VAR 0 8
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: ST_TO_ADDR
// exit ;
54567: POP
54568: POP
54569: POP
54570: POP
54571: GO 54581
// end ; end ;
54573: GO 54509
54575: POP
54576: POP
// end ;
54577: GO 54395
54579: POP
54580: POP
// end ;
54581: LD_VAR 0 3
54585: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54586: LD_INT 0
54588: PPUSH
// if not side or side > 8 then
54589: LD_VAR 0 3
54593: NOT
54594: PUSH
54595: LD_VAR 0 3
54599: PUSH
54600: LD_INT 8
54602: GREATER
54603: OR
54604: IFFALSE 54608
// exit ;
54606: GO 54667
// if not range then
54608: LD_VAR 0 4
54612: NOT
54613: IFFALSE 54624
// range := - 12 ;
54615: LD_ADDR_VAR 0 4
54619: PUSH
54620: LD_INT 12
54622: NEG
54623: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54624: LD_VAR 0 1
54628: PPUSH
54629: LD_VAR 0 2
54633: PPUSH
54634: LD_VAR 0 3
54638: PPUSH
54639: LD_VAR 0 4
54643: PPUSH
54644: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54648: LD_VAR 0 1
54652: PPUSH
54653: LD_VAR 0 2
54657: PPUSH
54658: LD_VAR 0 3
54662: PPUSH
54663: CALL_OW 331
// end ;
54667: LD_VAR 0 5
54671: RET
// export function Video ( mode ) ; begin
54672: LD_INT 0
54674: PPUSH
// ingame_video = mode ;
54675: LD_ADDR_OWVAR 52
54679: PUSH
54680: LD_VAR 0 1
54684: ST_TO_ADDR
// interface_hidden = mode ;
54685: LD_ADDR_OWVAR 54
54689: PUSH
54690: LD_VAR 0 1
54694: ST_TO_ADDR
// end ;
54695: LD_VAR 0 2
54699: RET
// export function Join ( array , element ) ; begin
54700: LD_INT 0
54702: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54703: LD_ADDR_VAR 0 3
54707: PUSH
54708: LD_VAR 0 1
54712: PPUSH
54713: LD_VAR 0 1
54717: PUSH
54718: LD_INT 1
54720: PLUS
54721: PPUSH
54722: LD_VAR 0 2
54726: PPUSH
54727: CALL_OW 1
54731: ST_TO_ADDR
// end ;
54732: LD_VAR 0 3
54736: RET
// export function JoinUnion ( array , element ) ; begin
54737: LD_INT 0
54739: PPUSH
// result := array union element ;
54740: LD_ADDR_VAR 0 3
54744: PUSH
54745: LD_VAR 0 1
54749: PUSH
54750: LD_VAR 0 2
54754: UNION
54755: ST_TO_ADDR
// end ;
54756: LD_VAR 0 3
54760: RET
// export function GetBehemoths ( side ) ; begin
54761: LD_INT 0
54763: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
54764: LD_ADDR_VAR 0 2
54768: PUSH
54769: LD_INT 22
54771: PUSH
54772: LD_VAR 0 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 31
54783: PUSH
54784: LD_INT 25
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PPUSH
54795: CALL_OW 69
54799: ST_TO_ADDR
// end ;
54800: LD_VAR 0 2
54804: RET
// export function Shuffle ( array ) ; var i , index ; begin
54805: LD_INT 0
54807: PPUSH
54808: PPUSH
54809: PPUSH
// result := [ ] ;
54810: LD_ADDR_VAR 0 2
54814: PUSH
54815: EMPTY
54816: ST_TO_ADDR
// if not array then
54817: LD_VAR 0 1
54821: NOT
54822: IFFALSE 54826
// exit ;
54824: GO 54925
// Randomize ;
54826: CALL_OW 10
// for i = array downto 1 do
54830: LD_ADDR_VAR 0 3
54834: PUSH
54835: DOUBLE
54836: LD_VAR 0 1
54840: INC
54841: ST_TO_ADDR
54842: LD_INT 1
54844: PUSH
54845: FOR_DOWNTO
54846: IFFALSE 54923
// begin index := rand ( 1 , array ) ;
54848: LD_ADDR_VAR 0 4
54852: PUSH
54853: LD_INT 1
54855: PPUSH
54856: LD_VAR 0 1
54860: PPUSH
54861: CALL_OW 12
54865: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54866: LD_ADDR_VAR 0 2
54870: PUSH
54871: LD_VAR 0 2
54875: PPUSH
54876: LD_VAR 0 2
54880: PUSH
54881: LD_INT 1
54883: PLUS
54884: PPUSH
54885: LD_VAR 0 1
54889: PUSH
54890: LD_VAR 0 4
54894: ARRAY
54895: PPUSH
54896: CALL_OW 2
54900: ST_TO_ADDR
// array := Delete ( array , index ) ;
54901: LD_ADDR_VAR 0 1
54905: PUSH
54906: LD_VAR 0 1
54910: PPUSH
54911: LD_VAR 0 4
54915: PPUSH
54916: CALL_OW 3
54920: ST_TO_ADDR
// end ;
54921: GO 54845
54923: POP
54924: POP
// end ;
54925: LD_VAR 0 2
54929: RET
// export function GetBaseMaterials ( base ) ; begin
54930: LD_INT 0
54932: PPUSH
// result := [ 0 , 0 , 0 ] ;
54933: LD_ADDR_VAR 0 2
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// if not base then
54952: LD_VAR 0 1
54956: NOT
54957: IFFALSE 54961
// exit ;
54959: GO 55010
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54961: LD_ADDR_VAR 0 2
54965: PUSH
54966: LD_VAR 0 1
54970: PPUSH
54971: LD_INT 1
54973: PPUSH
54974: CALL_OW 275
54978: PUSH
54979: LD_VAR 0 1
54983: PPUSH
54984: LD_INT 2
54986: PPUSH
54987: CALL_OW 275
54991: PUSH
54992: LD_VAR 0 1
54996: PPUSH
54997: LD_INT 3
54999: PPUSH
55000: CALL_OW 275
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: ST_TO_ADDR
// end ;
55010: LD_VAR 0 2
55014: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55015: LD_INT 0
55017: PPUSH
55018: PPUSH
// result := array ;
55019: LD_ADDR_VAR 0 3
55023: PUSH
55024: LD_VAR 0 1
55028: ST_TO_ADDR
// if size > 0 then
55029: LD_VAR 0 2
55033: PUSH
55034: LD_INT 0
55036: GREATER
55037: IFFALSE 55083
// for i := array downto size do
55039: LD_ADDR_VAR 0 4
55043: PUSH
55044: DOUBLE
55045: LD_VAR 0 1
55049: INC
55050: ST_TO_ADDR
55051: LD_VAR 0 2
55055: PUSH
55056: FOR_DOWNTO
55057: IFFALSE 55081
// result := Delete ( result , result ) ;
55059: LD_ADDR_VAR 0 3
55063: PUSH
55064: LD_VAR 0 3
55068: PPUSH
55069: LD_VAR 0 3
55073: PPUSH
55074: CALL_OW 3
55078: ST_TO_ADDR
55079: GO 55056
55081: POP
55082: POP
// end ;
55083: LD_VAR 0 3
55087: RET
// export function ComExit ( unit ) ; var tmp ; begin
55088: LD_INT 0
55090: PPUSH
55091: PPUSH
// if not IsInUnit ( unit ) then
55092: LD_VAR 0 1
55096: PPUSH
55097: CALL_OW 310
55101: NOT
55102: IFFALSE 55106
// exit ;
55104: GO 55166
// tmp := IsInUnit ( unit ) ;
55106: LD_ADDR_VAR 0 3
55110: PUSH
55111: LD_VAR 0 1
55115: PPUSH
55116: CALL_OW 310
55120: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55121: LD_VAR 0 3
55125: PPUSH
55126: CALL_OW 247
55130: PUSH
55131: LD_INT 2
55133: EQUAL
55134: IFFALSE 55147
// ComExitVehicle ( unit ) else
55136: LD_VAR 0 1
55140: PPUSH
55141: CALL_OW 121
55145: GO 55156
// ComExitBuilding ( unit ) ;
55147: LD_VAR 0 1
55151: PPUSH
55152: CALL_OW 122
// result := tmp ;
55156: LD_ADDR_VAR 0 2
55160: PUSH
55161: LD_VAR 0 3
55165: ST_TO_ADDR
// end ;
55166: LD_VAR 0 2
55170: RET
// export function ComExitAll ( units ) ; var i ; begin
55171: LD_INT 0
55173: PPUSH
55174: PPUSH
// if not units then
55175: LD_VAR 0 1
55179: NOT
55180: IFFALSE 55184
// exit ;
55182: GO 55210
// for i in units do
55184: LD_ADDR_VAR 0 3
55188: PUSH
55189: LD_VAR 0 1
55193: PUSH
55194: FOR_IN
55195: IFFALSE 55208
// ComExit ( i ) ;
55197: LD_VAR 0 3
55201: PPUSH
55202: CALL 55088 0 1
55206: GO 55194
55208: POP
55209: POP
// end ;
55210: LD_VAR 0 2
55214: RET
// export function ResetHc ; begin
55215: LD_INT 0
55217: PPUSH
// InitHc ;
55218: CALL_OW 19
// hc_importance := 0 ;
55222: LD_ADDR_OWVAR 32
55226: PUSH
55227: LD_INT 0
55229: ST_TO_ADDR
// end ;
55230: LD_VAR 0 1
55234: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55235: LD_INT 0
55237: PPUSH
55238: PPUSH
55239: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55240: LD_ADDR_VAR 0 6
55244: PUSH
55245: LD_VAR 0 1
55249: PUSH
55250: LD_VAR 0 3
55254: PLUS
55255: PUSH
55256: LD_INT 2
55258: DIV
55259: ST_TO_ADDR
// if _x < 0 then
55260: LD_VAR 0 6
55264: PUSH
55265: LD_INT 0
55267: LESS
55268: IFFALSE 55285
// _x := _x * - 1 ;
55270: LD_ADDR_VAR 0 6
55274: PUSH
55275: LD_VAR 0 6
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: MUL
55284: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55285: LD_ADDR_VAR 0 7
55289: PUSH
55290: LD_VAR 0 2
55294: PUSH
55295: LD_VAR 0 4
55299: PLUS
55300: PUSH
55301: LD_INT 2
55303: DIV
55304: ST_TO_ADDR
// if _y < 0 then
55305: LD_VAR 0 7
55309: PUSH
55310: LD_INT 0
55312: LESS
55313: IFFALSE 55330
// _y := _y * - 1 ;
55315: LD_ADDR_VAR 0 7
55319: PUSH
55320: LD_VAR 0 7
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: MUL
55329: ST_TO_ADDR
// result := [ _x , _y ] ;
55330: LD_ADDR_VAR 0 5
55334: PUSH
55335: LD_VAR 0 6
55339: PUSH
55340: LD_VAR 0 7
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: ST_TO_ADDR
// end ;
55349: LD_VAR 0 5
55353: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55354: LD_INT 0
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
// task := GetTaskList ( unit ) ;
55360: LD_ADDR_VAR 0 7
55364: PUSH
55365: LD_VAR 0 1
55369: PPUSH
55370: CALL_OW 437
55374: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55375: LD_VAR 0 7
55379: NOT
55380: PUSH
55381: LD_VAR 0 1
55385: PPUSH
55386: LD_VAR 0 2
55390: PPUSH
55391: CALL_OW 308
55395: NOT
55396: AND
55397: IFFALSE 55401
// exit ;
55399: GO 55519
// if IsInArea ( unit , area ) then
55401: LD_VAR 0 1
55405: PPUSH
55406: LD_VAR 0 2
55410: PPUSH
55411: CALL_OW 308
55415: IFFALSE 55433
// begin ComMoveToArea ( unit , goAway ) ;
55417: LD_VAR 0 1
55421: PPUSH
55422: LD_VAR 0 3
55426: PPUSH
55427: CALL_OW 113
// exit ;
55431: GO 55519
// end ; if task [ 1 ] [ 1 ] <> M then
55433: LD_VAR 0 7
55437: PUSH
55438: LD_INT 1
55440: ARRAY
55441: PUSH
55442: LD_INT 1
55444: ARRAY
55445: PUSH
55446: LD_STRING M
55448: NONEQUAL
55449: IFFALSE 55453
// exit ;
55451: GO 55519
// x := task [ 1 ] [ 2 ] ;
55453: LD_ADDR_VAR 0 5
55457: PUSH
55458: LD_VAR 0 7
55462: PUSH
55463: LD_INT 1
55465: ARRAY
55466: PUSH
55467: LD_INT 2
55469: ARRAY
55470: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55471: LD_ADDR_VAR 0 6
55475: PUSH
55476: LD_VAR 0 7
55480: PUSH
55481: LD_INT 1
55483: ARRAY
55484: PUSH
55485: LD_INT 3
55487: ARRAY
55488: ST_TO_ADDR
// if InArea ( x , y , area ) then
55489: LD_VAR 0 5
55493: PPUSH
55494: LD_VAR 0 6
55498: PPUSH
55499: LD_VAR 0 2
55503: PPUSH
55504: CALL_OW 309
55508: IFFALSE 55519
// ComStop ( unit ) ;
55510: LD_VAR 0 1
55514: PPUSH
55515: CALL_OW 141
// end ;
55519: LD_VAR 0 4
55523: RET
// export function Abs ( value ) ; begin
55524: LD_INT 0
55526: PPUSH
// result := value ;
55527: LD_ADDR_VAR 0 2
55531: PUSH
55532: LD_VAR 0 1
55536: ST_TO_ADDR
// if value < 0 then
55537: LD_VAR 0 1
55541: PUSH
55542: LD_INT 0
55544: LESS
55545: IFFALSE 55562
// result := value * - 1 ;
55547: LD_ADDR_VAR 0 2
55551: PUSH
55552: LD_VAR 0 1
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: MUL
55561: ST_TO_ADDR
// end ;
55562: LD_VAR 0 2
55566: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55567: LD_INT 0
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
55575: PPUSH
55576: PPUSH
// if not unit or not building then
55577: LD_VAR 0 1
55581: NOT
55582: PUSH
55583: LD_VAR 0 2
55587: NOT
55588: OR
55589: IFFALSE 55593
// exit ;
55591: GO 55819
// x := GetX ( building ) ;
55593: LD_ADDR_VAR 0 4
55597: PUSH
55598: LD_VAR 0 2
55602: PPUSH
55603: CALL_OW 250
55607: ST_TO_ADDR
// y := GetY ( building ) ;
55608: LD_ADDR_VAR 0 6
55612: PUSH
55613: LD_VAR 0 2
55617: PPUSH
55618: CALL_OW 251
55622: ST_TO_ADDR
// d := GetDir ( building ) ;
55623: LD_ADDR_VAR 0 8
55627: PUSH
55628: LD_VAR 0 2
55632: PPUSH
55633: CALL_OW 254
55637: ST_TO_ADDR
// r := 4 ;
55638: LD_ADDR_VAR 0 9
55642: PUSH
55643: LD_INT 4
55645: ST_TO_ADDR
// for i := 1 to 5 do
55646: LD_ADDR_VAR 0 10
55650: PUSH
55651: DOUBLE
55652: LD_INT 1
55654: DEC
55655: ST_TO_ADDR
55656: LD_INT 5
55658: PUSH
55659: FOR_TO
55660: IFFALSE 55817
// begin _x := ShiftX ( x , d , r + i ) ;
55662: LD_ADDR_VAR 0 5
55666: PUSH
55667: LD_VAR 0 4
55671: PPUSH
55672: LD_VAR 0 8
55676: PPUSH
55677: LD_VAR 0 9
55681: PUSH
55682: LD_VAR 0 10
55686: PLUS
55687: PPUSH
55688: CALL_OW 272
55692: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55693: LD_ADDR_VAR 0 7
55697: PUSH
55698: LD_VAR 0 6
55702: PPUSH
55703: LD_VAR 0 8
55707: PPUSH
55708: LD_VAR 0 9
55712: PUSH
55713: LD_VAR 0 10
55717: PLUS
55718: PPUSH
55719: CALL_OW 273
55723: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55724: LD_VAR 0 5
55728: PPUSH
55729: LD_VAR 0 7
55733: PPUSH
55734: CALL_OW 488
55738: PUSH
55739: LD_VAR 0 5
55743: PPUSH
55744: LD_VAR 0 7
55748: PPUSH
55749: CALL_OW 428
55753: PPUSH
55754: CALL_OW 247
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: IN
55769: NOT
55770: AND
55771: IFFALSE 55815
// begin ComMoveXY ( unit , _x , _y ) ;
55773: LD_VAR 0 1
55777: PPUSH
55778: LD_VAR 0 5
55782: PPUSH
55783: LD_VAR 0 7
55787: PPUSH
55788: CALL_OW 111
// result := [ _x , _y ] ;
55792: LD_ADDR_VAR 0 3
55796: PUSH
55797: LD_VAR 0 5
55801: PUSH
55802: LD_VAR 0 7
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// exit ;
55811: POP
55812: POP
55813: GO 55819
// end ; end ;
55815: GO 55659
55817: POP
55818: POP
// end ;
55819: LD_VAR 0 3
55823: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55824: LD_INT 0
55826: PPUSH
55827: PPUSH
55828: PPUSH
// result := 0 ;
55829: LD_ADDR_VAR 0 3
55833: PUSH
55834: LD_INT 0
55836: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55837: LD_VAR 0 1
55841: PUSH
55842: LD_INT 0
55844: LESS
55845: PUSH
55846: LD_VAR 0 1
55850: PUSH
55851: LD_INT 8
55853: GREATER
55854: OR
55855: PUSH
55856: LD_VAR 0 2
55860: PUSH
55861: LD_INT 0
55863: LESS
55864: OR
55865: PUSH
55866: LD_VAR 0 2
55870: PUSH
55871: LD_INT 8
55873: GREATER
55874: OR
55875: IFFALSE 55879
// exit ;
55877: GO 55954
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55879: LD_ADDR_VAR 0 4
55883: PUSH
55884: LD_INT 22
55886: PUSH
55887: LD_VAR 0 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PPUSH
55896: CALL_OW 69
55900: PUSH
55901: FOR_IN
55902: IFFALSE 55952
// begin un := UnitShoot ( i ) ;
55904: LD_ADDR_VAR 0 5
55908: PUSH
55909: LD_VAR 0 4
55913: PPUSH
55914: CALL_OW 504
55918: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55919: LD_VAR 0 5
55923: PPUSH
55924: CALL_OW 255
55928: PUSH
55929: LD_VAR 0 1
55933: EQUAL
55934: IFFALSE 55950
// begin result := un ;
55936: LD_ADDR_VAR 0 3
55940: PUSH
55941: LD_VAR 0 5
55945: ST_TO_ADDR
// exit ;
55946: POP
55947: POP
55948: GO 55954
// end ; end ;
55950: GO 55901
55952: POP
55953: POP
// end ;
55954: LD_VAR 0 3
55958: RET
// export function GetCargoBay ( units ) ; begin
55959: LD_INT 0
55961: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55962: LD_ADDR_VAR 0 2
55966: PUSH
55967: LD_VAR 0 1
55971: PPUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 34
55977: PUSH
55978: LD_INT 12
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 34
55987: PUSH
55988: LD_INT 51
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 34
55997: PUSH
55998: LD_INT 32
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 34
56007: PUSH
56008: LD_EXP 14
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: PPUSH
56024: CALL_OW 72
56028: ST_TO_ADDR
// end ;
56029: LD_VAR 0 2
56033: RET
// export function Negate ( value ) ; begin
56034: LD_INT 0
56036: PPUSH
// result := not value ;
56037: LD_ADDR_VAR 0 2
56041: PUSH
56042: LD_VAR 0 1
56046: NOT
56047: ST_TO_ADDR
// end ;
56048: LD_VAR 0 2
56052: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
56053: LD_INT 0
56055: PPUSH
// if x1 = x2 then
56056: LD_VAR 0 1
56060: PUSH
56061: LD_VAR 0 3
56065: EQUAL
56066: IFFALSE 56100
// begin if y1 > y2 then
56068: LD_VAR 0 2
56072: PUSH
56073: LD_VAR 0 4
56077: GREATER
56078: IFFALSE 56090
// result := 0 else
56080: LD_ADDR_VAR 0 5
56084: PUSH
56085: LD_INT 0
56087: ST_TO_ADDR
56088: GO 56098
// result := 3 ;
56090: LD_ADDR_VAR 0 5
56094: PUSH
56095: LD_INT 3
56097: ST_TO_ADDR
// exit ;
56098: GO 56186
// end ; if y1 = y2 then
56100: LD_VAR 0 2
56104: PUSH
56105: LD_VAR 0 4
56109: EQUAL
56110: IFFALSE 56144
// begin if x1 > x2 then
56112: LD_VAR 0 1
56116: PUSH
56117: LD_VAR 0 3
56121: GREATER
56122: IFFALSE 56134
// result := 1 else
56124: LD_ADDR_VAR 0 5
56128: PUSH
56129: LD_INT 1
56131: ST_TO_ADDR
56132: GO 56142
// result := 4 ;
56134: LD_ADDR_VAR 0 5
56138: PUSH
56139: LD_INT 4
56141: ST_TO_ADDR
// exit ;
56142: GO 56186
// end ; if x1 > x2 and y1 > y2 then
56144: LD_VAR 0 1
56148: PUSH
56149: LD_VAR 0 3
56153: GREATER
56154: PUSH
56155: LD_VAR 0 2
56159: PUSH
56160: LD_VAR 0 4
56164: GREATER
56165: AND
56166: IFFALSE 56178
// result := 2 else
56168: LD_ADDR_VAR 0 5
56172: PUSH
56173: LD_INT 2
56175: ST_TO_ADDR
56176: GO 56186
// result := 5 ;
56178: LD_ADDR_VAR 0 5
56182: PUSH
56183: LD_INT 5
56185: ST_TO_ADDR
// end ;
56186: LD_VAR 0 5
56190: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56191: LD_INT 0
56193: PPUSH
56194: PPUSH
// if not driver or not IsInUnit ( driver ) then
56195: LD_VAR 0 1
56199: NOT
56200: PUSH
56201: LD_VAR 0 1
56205: PPUSH
56206: CALL_OW 310
56210: NOT
56211: OR
56212: IFFALSE 56216
// exit ;
56214: GO 56306
// vehicle := IsInUnit ( driver ) ;
56216: LD_ADDR_VAR 0 3
56220: PUSH
56221: LD_VAR 0 1
56225: PPUSH
56226: CALL_OW 310
56230: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56231: LD_VAR 0 1
56235: PPUSH
56236: LD_STRING \
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: PUSH
56266: LD_STRING E
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_VAR 0 3
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PPUSH
56302: CALL_OW 446
// end ;
56306: LD_VAR 0 2
56310: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56311: LD_INT 0
56313: PPUSH
56314: PPUSH
// if not driver or not IsInUnit ( driver ) then
56315: LD_VAR 0 1
56319: NOT
56320: PUSH
56321: LD_VAR 0 1
56325: PPUSH
56326: CALL_OW 310
56330: NOT
56331: OR
56332: IFFALSE 56336
// exit ;
56334: GO 56426
// vehicle := IsInUnit ( driver ) ;
56336: LD_ADDR_VAR 0 3
56340: PUSH
56341: LD_VAR 0 1
56345: PPUSH
56346: CALL_OW 310
56350: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56351: LD_VAR 0 1
56355: PPUSH
56356: LD_STRING \
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: PUSH
56386: LD_STRING E
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_VAR 0 3
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PPUSH
56422: CALL_OW 447
// end ;
56426: LD_VAR 0 2
56430: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56431: LD_INT 0
56433: PPUSH
56434: PPUSH
56435: PPUSH
// tmp := [ ] ;
56436: LD_ADDR_VAR 0 5
56440: PUSH
56441: EMPTY
56442: ST_TO_ADDR
// for i in units do
56443: LD_ADDR_VAR 0 4
56447: PUSH
56448: LD_VAR 0 1
56452: PUSH
56453: FOR_IN
56454: IFFALSE 56492
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56456: LD_ADDR_VAR 0 5
56460: PUSH
56461: LD_VAR 0 5
56465: PPUSH
56466: LD_VAR 0 5
56470: PUSH
56471: LD_INT 1
56473: PLUS
56474: PPUSH
56475: LD_VAR 0 4
56479: PPUSH
56480: CALL_OW 256
56484: PPUSH
56485: CALL_OW 2
56489: ST_TO_ADDR
56490: GO 56453
56492: POP
56493: POP
// if not tmp then
56494: LD_VAR 0 5
56498: NOT
56499: IFFALSE 56503
// exit ;
56501: GO 56551
// if asc then
56503: LD_VAR 0 2
56507: IFFALSE 56531
// result := SortListByListAsc ( units , tmp ) else
56509: LD_ADDR_VAR 0 3
56513: PUSH
56514: LD_VAR 0 1
56518: PPUSH
56519: LD_VAR 0 5
56523: PPUSH
56524: CALL_OW 76
56528: ST_TO_ADDR
56529: GO 56551
// result := SortListByListDesc ( units , tmp ) ;
56531: LD_ADDR_VAR 0 3
56535: PUSH
56536: LD_VAR 0 1
56540: PPUSH
56541: LD_VAR 0 5
56545: PPUSH
56546: CALL_OW 77
56550: ST_TO_ADDR
// end ;
56551: LD_VAR 0 3
56555: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56556: LD_INT 0
56558: PPUSH
56559: PPUSH
// task := GetTaskList ( mech ) ;
56560: LD_ADDR_VAR 0 4
56564: PUSH
56565: LD_VAR 0 1
56569: PPUSH
56570: CALL_OW 437
56574: ST_TO_ADDR
// if not task then
56575: LD_VAR 0 4
56579: NOT
56580: IFFALSE 56584
// exit ;
56582: GO 56626
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56584: LD_ADDR_VAR 0 3
56588: PUSH
56589: LD_VAR 0 4
56593: PUSH
56594: LD_INT 1
56596: ARRAY
56597: PUSH
56598: LD_INT 1
56600: ARRAY
56601: PUSH
56602: LD_STRING r
56604: EQUAL
56605: PUSH
56606: LD_VAR 0 4
56610: PUSH
56611: LD_INT 1
56613: ARRAY
56614: PUSH
56615: LD_INT 4
56617: ARRAY
56618: PUSH
56619: LD_VAR 0 2
56623: EQUAL
56624: AND
56625: ST_TO_ADDR
// end ;
56626: LD_VAR 0 3
56630: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56631: LD_INT 0
56633: PPUSH
// SetDir ( unit , d ) ;
56634: LD_VAR 0 1
56638: PPUSH
56639: LD_VAR 0 4
56643: PPUSH
56644: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56648: LD_VAR 0 1
56652: PPUSH
56653: LD_VAR 0 2
56657: PPUSH
56658: LD_VAR 0 3
56662: PPUSH
56663: LD_VAR 0 5
56667: PPUSH
56668: CALL_OW 48
// end ;
56672: LD_VAR 0 6
56676: RET
// export function ToNaturalNumber ( number ) ; begin
56677: LD_INT 0
56679: PPUSH
// result := number div 1 ;
56680: LD_ADDR_VAR 0 2
56684: PUSH
56685: LD_VAR 0 1
56689: PUSH
56690: LD_INT 1
56692: DIV
56693: ST_TO_ADDR
// if number < 0 then
56694: LD_VAR 0 1
56698: PUSH
56699: LD_INT 0
56701: LESS
56702: IFFALSE 56712
// result := 0 ;
56704: LD_ADDR_VAR 0 2
56708: PUSH
56709: LD_INT 0
56711: ST_TO_ADDR
// end ;
56712: LD_VAR 0 2
56716: RET
// export function SortByClass ( units , class ) ; var un ; begin
56717: LD_INT 0
56719: PPUSH
56720: PPUSH
// if not units or not class then
56721: LD_VAR 0 1
56725: NOT
56726: PUSH
56727: LD_VAR 0 2
56731: NOT
56732: OR
56733: IFFALSE 56737
// exit ;
56735: GO 56832
// result := [ ] ;
56737: LD_ADDR_VAR 0 3
56741: PUSH
56742: EMPTY
56743: ST_TO_ADDR
// for un in units do
56744: LD_ADDR_VAR 0 4
56748: PUSH
56749: LD_VAR 0 1
56753: PUSH
56754: FOR_IN
56755: IFFALSE 56830
// if GetClass ( un ) = class then
56757: LD_VAR 0 4
56761: PPUSH
56762: CALL_OW 257
56766: PUSH
56767: LD_VAR 0 2
56771: EQUAL
56772: IFFALSE 56799
// result := Insert ( result , 1 , un ) else
56774: LD_ADDR_VAR 0 3
56778: PUSH
56779: LD_VAR 0 3
56783: PPUSH
56784: LD_INT 1
56786: PPUSH
56787: LD_VAR 0 4
56791: PPUSH
56792: CALL_OW 2
56796: ST_TO_ADDR
56797: GO 56828
// result := Replace ( result , result + 1 , un ) ;
56799: LD_ADDR_VAR 0 3
56803: PUSH
56804: LD_VAR 0 3
56808: PPUSH
56809: LD_VAR 0 3
56813: PUSH
56814: LD_INT 1
56816: PLUS
56817: PPUSH
56818: LD_VAR 0 4
56822: PPUSH
56823: CALL_OW 1
56827: ST_TO_ADDR
56828: GO 56754
56830: POP
56831: POP
// end ;
56832: LD_VAR 0 3
56836: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56837: LD_INT 0
56839: PPUSH
56840: PPUSH
56841: PPUSH
56842: PPUSH
56843: PPUSH
56844: PPUSH
56845: PPUSH
// result := [ ] ;
56846: LD_ADDR_VAR 0 4
56850: PUSH
56851: EMPTY
56852: ST_TO_ADDR
// if x - r < 0 then
56853: LD_VAR 0 1
56857: PUSH
56858: LD_VAR 0 3
56862: MINUS
56863: PUSH
56864: LD_INT 0
56866: LESS
56867: IFFALSE 56879
// min_x := 0 else
56869: LD_ADDR_VAR 0 8
56873: PUSH
56874: LD_INT 0
56876: ST_TO_ADDR
56877: GO 56895
// min_x := x - r ;
56879: LD_ADDR_VAR 0 8
56883: PUSH
56884: LD_VAR 0 1
56888: PUSH
56889: LD_VAR 0 3
56893: MINUS
56894: ST_TO_ADDR
// if y - r < 0 then
56895: LD_VAR 0 2
56899: PUSH
56900: LD_VAR 0 3
56904: MINUS
56905: PUSH
56906: LD_INT 0
56908: LESS
56909: IFFALSE 56921
// min_y := 0 else
56911: LD_ADDR_VAR 0 7
56915: PUSH
56916: LD_INT 0
56918: ST_TO_ADDR
56919: GO 56937
// min_y := y - r ;
56921: LD_ADDR_VAR 0 7
56925: PUSH
56926: LD_VAR 0 2
56930: PUSH
56931: LD_VAR 0 3
56935: MINUS
56936: ST_TO_ADDR
// max_x := x + r ;
56937: LD_ADDR_VAR 0 9
56941: PUSH
56942: LD_VAR 0 1
56946: PUSH
56947: LD_VAR 0 3
56951: PLUS
56952: ST_TO_ADDR
// max_y := y + r ;
56953: LD_ADDR_VAR 0 10
56957: PUSH
56958: LD_VAR 0 2
56962: PUSH
56963: LD_VAR 0 3
56967: PLUS
56968: ST_TO_ADDR
// for _x = min_x to max_x do
56969: LD_ADDR_VAR 0 5
56973: PUSH
56974: DOUBLE
56975: LD_VAR 0 8
56979: DEC
56980: ST_TO_ADDR
56981: LD_VAR 0 9
56985: PUSH
56986: FOR_TO
56987: IFFALSE 57088
// for _y = min_y to max_y do
56989: LD_ADDR_VAR 0 6
56993: PUSH
56994: DOUBLE
56995: LD_VAR 0 7
56999: DEC
57000: ST_TO_ADDR
57001: LD_VAR 0 10
57005: PUSH
57006: FOR_TO
57007: IFFALSE 57084
// begin if not ValidHex ( _x , _y ) then
57009: LD_VAR 0 5
57013: PPUSH
57014: LD_VAR 0 6
57018: PPUSH
57019: CALL_OW 488
57023: NOT
57024: IFFALSE 57028
// continue ;
57026: GO 57006
// if GetResourceTypeXY ( _x , _y ) then
57028: LD_VAR 0 5
57032: PPUSH
57033: LD_VAR 0 6
57037: PPUSH
57038: CALL_OW 283
57042: IFFALSE 57082
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57044: LD_ADDR_VAR 0 4
57048: PUSH
57049: LD_VAR 0 4
57053: PPUSH
57054: LD_VAR 0 4
57058: PUSH
57059: LD_INT 1
57061: PLUS
57062: PPUSH
57063: LD_VAR 0 5
57067: PUSH
57068: LD_VAR 0 6
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PPUSH
57077: CALL_OW 1
57081: ST_TO_ADDR
// end ;
57082: GO 57006
57084: POP
57085: POP
57086: GO 56986
57088: POP
57089: POP
// end ;
57090: LD_VAR 0 4
57094: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
57095: LD_INT 0
57097: PPUSH
57098: PPUSH
57099: PPUSH
57100: PPUSH
57101: PPUSH
57102: PPUSH
// if not units then
57103: LD_VAR 0 1
57107: NOT
57108: IFFALSE 57112
// exit ;
57110: GO 57513
// result := UnitFilter ( units , [ f_ok ] ) ;
57112: LD_ADDR_VAR 0 3
57116: PUSH
57117: LD_VAR 0 1
57121: PPUSH
57122: LD_INT 50
57124: PUSH
57125: EMPTY
57126: LIST
57127: PPUSH
57128: CALL_OW 72
57132: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57133: LD_ADDR_VAR 0 7
57137: PUSH
57138: LD_VAR 0 1
57142: PUSH
57143: LD_INT 1
57145: ARRAY
57146: PPUSH
57147: CALL_OW 255
57151: ST_TO_ADDR
// if not result then
57152: LD_VAR 0 3
57156: NOT
57157: IFFALSE 57161
// exit ;
57159: GO 57513
// for i in result do
57161: LD_ADDR_VAR 0 4
57165: PUSH
57166: LD_VAR 0 3
57170: PUSH
57171: FOR_IN
57172: IFFALSE 57511
// begin tag := GetTag ( i ) + 1 ;
57174: LD_ADDR_VAR 0 8
57178: PUSH
57179: LD_VAR 0 4
57183: PPUSH
57184: CALL_OW 110
57188: PUSH
57189: LD_INT 1
57191: PLUS
57192: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57193: LD_ADDR_VAR 0 6
57197: PUSH
57198: LD_VAR 0 4
57202: PPUSH
57203: CALL_OW 250
57207: PPUSH
57208: LD_VAR 0 4
57212: PPUSH
57213: CALL_OW 251
57217: PPUSH
57218: LD_INT 6
57220: PPUSH
57221: CALL 56837 0 3
57225: ST_TO_ADDR
// if cr then
57226: LD_VAR 0 6
57230: IFFALSE 57269
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57232: LD_VAR 0 4
57236: PPUSH
57237: LD_VAR 0 6
57241: PUSH
57242: LD_INT 1
57244: ARRAY
57245: PUSH
57246: LD_INT 1
57248: ARRAY
57249: PPUSH
57250: LD_VAR 0 6
57254: PUSH
57255: LD_INT 1
57257: ARRAY
57258: PUSH
57259: LD_INT 2
57261: ARRAY
57262: PPUSH
57263: CALL_OW 116
57267: GO 57509
// if path > tag then
57269: LD_VAR 0 2
57273: PUSH
57274: LD_VAR 0 8
57278: GREATER
57279: IFFALSE 57457
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
57281: LD_ADDR_VAR 0 5
57285: PUSH
57286: LD_INT 81
57288: PUSH
57289: LD_VAR 0 7
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 91
57300: PUSH
57301: LD_VAR 0 4
57305: PUSH
57306: LD_INT 12
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PPUSH
57318: CALL_OW 69
57322: ST_TO_ADDR
// if enemy then
57323: LD_VAR 0 5
57327: IFFALSE 57355
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57329: LD_VAR 0 4
57333: PPUSH
57334: LD_VAR 0 5
57338: PPUSH
57339: LD_VAR 0 4
57343: PPUSH
57344: CALL_OW 74
57348: PPUSH
57349: CALL_OW 115
57353: GO 57455
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57355: LD_VAR 0 4
57359: PPUSH
57360: LD_VAR 0 2
57364: PUSH
57365: LD_VAR 0 8
57369: ARRAY
57370: PUSH
57371: LD_INT 1
57373: ARRAY
57374: PPUSH
57375: LD_VAR 0 2
57379: PUSH
57380: LD_VAR 0 8
57384: ARRAY
57385: PUSH
57386: LD_INT 2
57388: ARRAY
57389: PPUSH
57390: CALL_OW 297
57394: PUSH
57395: LD_INT 6
57397: GREATER
57398: IFFALSE 57441
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57400: LD_VAR 0 4
57404: PPUSH
57405: LD_VAR 0 2
57409: PUSH
57410: LD_VAR 0 8
57414: ARRAY
57415: PUSH
57416: LD_INT 1
57418: ARRAY
57419: PPUSH
57420: LD_VAR 0 2
57424: PUSH
57425: LD_VAR 0 8
57429: ARRAY
57430: PUSH
57431: LD_INT 2
57433: ARRAY
57434: PPUSH
57435: CALL_OW 114
57439: GO 57455
// SetTag ( i , tag ) ;
57441: LD_VAR 0 4
57445: PPUSH
57446: LD_VAR 0 8
57450: PPUSH
57451: CALL_OW 109
// end else
57455: GO 57509
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57457: LD_ADDR_VAR 0 5
57461: PUSH
57462: LD_INT 81
57464: PUSH
57465: LD_VAR 0 7
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PPUSH
57474: CALL_OW 69
57478: ST_TO_ADDR
// if enemy then
57479: LD_VAR 0 5
57483: IFFALSE 57509
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57485: LD_VAR 0 4
57489: PPUSH
57490: LD_VAR 0 5
57494: PPUSH
57495: LD_VAR 0 4
57499: PPUSH
57500: CALL_OW 74
57504: PPUSH
57505: CALL_OW 115
// end ; end ;
57509: GO 57171
57511: POP
57512: POP
// end ;
57513: LD_VAR 0 3
57517: RET
