// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_EXP 17
  25: EQUAL
  26: IFFALSE 98
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  28: LD_INT 68
  30: PPUSH
  31: LD_VAR 0 1
  35: PPUSH
  36: CALL_OW 255
  40: PPUSH
  41: CALL_OW 321
  45: PUSH
  46: LD_INT 2
  48: EQUAL
  49: IFFALSE 61
// eff := 70 else
  51: LD_ADDR_VAR 0 4
  55: PUSH
  56: LD_INT 70
  58: ST_TO_ADDR
  59: GO 69
// eff := 30 ;
  61: LD_ADDR_VAR 0 4
  65: PUSH
  66: LD_INT 30
  68: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  69: LD_VAR 0 1
  73: PPUSH
  74: CALL_OW 250
  78: PPUSH
  79: LD_VAR 0 1
  83: PPUSH
  84: CALL_OW 251
  88: PPUSH
  89: LD_VAR 0 4
  93: PPUSH
  94: CALL_OW 495
// end ; end ;
  98: LD_VAR 0 2
 102: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 103: LD_INT 0
 105: PPUSH
// end ;
 106: LD_VAR 0 4
 110: RET
// export function SOS_Command ( cmd ) ; begin
 111: LD_INT 0
 113: PPUSH
// end ;
 114: LD_VAR 0 2
 118: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
 119: LD_INT 0
 121: PPUSH
// end ;
 122: LD_VAR 0 6
 126: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 127: LD_INT 0
 129: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 130: LD_VAR 0 1
 134: PUSH
 135: LD_INT 250
 137: EQUAL
 138: PUSH
 139: LD_VAR 0 2
 143: PPUSH
 144: CALL_OW 264
 148: PUSH
 149: LD_EXP 20
 153: EQUAL
 154: AND
 155: IFFALSE 176
// MinerPlaceMine ( unit , x , y ) ;
 157: LD_VAR 0 2
 161: PPUSH
 162: LD_VAR 0 4
 166: PPUSH
 167: LD_VAR 0 5
 171: PPUSH
 172: CALL 2525 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 176: LD_VAR 0 1
 180: PUSH
 181: LD_INT 251
 183: EQUAL
 184: PUSH
 185: LD_VAR 0 2
 189: PPUSH
 190: CALL_OW 264
 194: PUSH
 195: LD_EXP 20
 199: EQUAL
 200: AND
 201: IFFALSE 222
// MinerDetonateMine ( unit , x , y ) ;
 203: LD_VAR 0 2
 207: PPUSH
 208: LD_VAR 0 4
 212: PPUSH
 213: LD_VAR 0 5
 217: PPUSH
 218: CALL 2802 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 222: LD_VAR 0 1
 226: PUSH
 227: LD_INT 252
 229: EQUAL
 230: PUSH
 231: LD_VAR 0 2
 235: PPUSH
 236: CALL_OW 264
 240: PUSH
 241: LD_EXP 20
 245: EQUAL
 246: AND
 247: IFFALSE 268
// MinerCreateMinefield ( unit , x , y ) ;
 249: LD_VAR 0 2
 253: PPUSH
 254: LD_VAR 0 4
 258: PPUSH
 259: LD_VAR 0 5
 263: PPUSH
 264: CALL 3219 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 268: LD_VAR 0 1
 272: PUSH
 273: LD_INT 253
 275: EQUAL
 276: PUSH
 277: LD_VAR 0 2
 281: PPUSH
 282: CALL_OW 257
 286: PUSH
 287: LD_INT 5
 289: EQUAL
 290: AND
 291: IFFALSE 312
// ComBinocular ( unit , x , y ) ;
 293: LD_VAR 0 2
 297: PPUSH
 298: LD_VAR 0 4
 302: PPUSH
 303: LD_VAR 0 5
 307: PPUSH
 308: CALL 3590 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 312: LD_VAR 0 1
 316: PUSH
 317: LD_INT 254
 319: EQUAL
 320: PUSH
 321: LD_VAR 0 2
 325: PPUSH
 326: CALL_OW 264
 330: PUSH
 331: LD_EXP 15
 335: EQUAL
 336: AND
 337: PUSH
 338: LD_VAR 0 3
 342: PPUSH
 343: CALL_OW 263
 347: PUSH
 348: LD_INT 3
 350: EQUAL
 351: AND
 352: IFFALSE 368
// HackDestroyVehicle ( unit , selectedUnit ) ;
 354: LD_VAR 0 2
 358: PPUSH
 359: LD_VAR 0 3
 363: PPUSH
 364: CALL 1885 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 368: LD_VAR 0 1
 372: PUSH
 373: LD_INT 255
 375: EQUAL
 376: PUSH
 377: LD_VAR 0 2
 381: PPUSH
 382: CALL_OW 264
 386: PUSH
 387: LD_INT 14
 389: PUSH
 390: LD_INT 53
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: IN
 397: AND
 398: PUSH
 399: LD_VAR 0 4
 403: PPUSH
 404: LD_VAR 0 5
 408: PPUSH
 409: CALL_OW 488
 413: AND
 414: IFFALSE 438
// CutTreeXYR ( unit , x , y , 12 ) ;
 416: LD_VAR 0 2
 420: PPUSH
 421: LD_VAR 0 4
 425: PPUSH
 426: LD_VAR 0 5
 430: PPUSH
 431: LD_INT 12
 433: PPUSH
 434: CALL 451 0 4
// end ;
 438: LD_VAR 0 6
 442: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
 443: LD_INT 0
 445: PPUSH
// end ;
 446: LD_VAR 0 4
 450: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 451: LD_INT 0
 453: PPUSH
 454: PPUSH
 455: PPUSH
 456: PPUSH
 457: PPUSH
 458: PPUSH
 459: PPUSH
 460: PPUSH
 461: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 462: LD_VAR 0 1
 466: NOT
 467: PUSH
 468: LD_VAR 0 2
 472: PPUSH
 473: LD_VAR 0 3
 477: PPUSH
 478: CALL_OW 488
 482: NOT
 483: OR
 484: PUSH
 485: LD_VAR 0 4
 489: NOT
 490: OR
 491: IFFALSE 495
// exit ;
 493: GO 835
// list := [ ] ;
 495: LD_ADDR_VAR 0 13
 499: PUSH
 500: EMPTY
 501: ST_TO_ADDR
// if x - r < 0 then
 502: LD_VAR 0 2
 506: PUSH
 507: LD_VAR 0 4
 511: MINUS
 512: PUSH
 513: LD_INT 0
 515: LESS
 516: IFFALSE 528
// min_x := 0 else
 518: LD_ADDR_VAR 0 7
 522: PUSH
 523: LD_INT 0
 525: ST_TO_ADDR
 526: GO 544
// min_x := x - r ;
 528: LD_ADDR_VAR 0 7
 532: PUSH
 533: LD_VAR 0 2
 537: PUSH
 538: LD_VAR 0 4
 542: MINUS
 543: ST_TO_ADDR
// if y - r < 0 then
 544: LD_VAR 0 3
 548: PUSH
 549: LD_VAR 0 4
 553: MINUS
 554: PUSH
 555: LD_INT 0
 557: LESS
 558: IFFALSE 570
// min_y := 0 else
 560: LD_ADDR_VAR 0 8
 564: PUSH
 565: LD_INT 0
 567: ST_TO_ADDR
 568: GO 586
// min_y := y - r ;
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: LD_VAR 0 3
 579: PUSH
 580: LD_VAR 0 4
 584: MINUS
 585: ST_TO_ADDR
// max_x := x + r ;
 586: LD_ADDR_VAR 0 9
 590: PUSH
 591: LD_VAR 0 2
 595: PUSH
 596: LD_VAR 0 4
 600: PLUS
 601: ST_TO_ADDR
// max_y := y + r ;
 602: LD_ADDR_VAR 0 10
 606: PUSH
 607: LD_VAR 0 3
 611: PUSH
 612: LD_VAR 0 4
 616: PLUS
 617: ST_TO_ADDR
// for _x = min_x to max_x do
 618: LD_ADDR_VAR 0 11
 622: PUSH
 623: DOUBLE
 624: LD_VAR 0 7
 628: DEC
 629: ST_TO_ADDR
 630: LD_VAR 0 9
 634: PUSH
 635: FOR_TO
 636: IFFALSE 753
// for _y = min_y to max_y do
 638: LD_ADDR_VAR 0 12
 642: PUSH
 643: DOUBLE
 644: LD_VAR 0 8
 648: DEC
 649: ST_TO_ADDR
 650: LD_VAR 0 10
 654: PUSH
 655: FOR_TO
 656: IFFALSE 749
// begin if not ValidHex ( _x , _y ) then
 658: LD_VAR 0 11
 662: PPUSH
 663: LD_VAR 0 12
 667: PPUSH
 668: CALL_OW 488
 672: NOT
 673: IFFALSE 677
// continue ;
 675: GO 655
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 677: LD_VAR 0 11
 681: PPUSH
 682: LD_VAR 0 12
 686: PPUSH
 687: CALL_OW 351
 691: PUSH
 692: LD_VAR 0 11
 696: PPUSH
 697: LD_VAR 0 12
 701: PPUSH
 702: CALL_OW 554
 706: AND
 707: IFFALSE 747
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
 709: LD_ADDR_VAR 0 13
 713: PUSH
 714: LD_VAR 0 13
 718: PPUSH
 719: LD_VAR 0 13
 723: PUSH
 724: LD_INT 1
 726: PLUS
 727: PPUSH
 728: LD_VAR 0 11
 732: PUSH
 733: LD_VAR 0 12
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 2
 746: ST_TO_ADDR
// end ;
 747: GO 655
 749: POP
 750: POP
 751: GO 635
 753: POP
 754: POP
// if not list then
 755: LD_VAR 0 13
 759: NOT
 760: IFFALSE 764
// exit ;
 762: GO 835
// for i in list do
 764: LD_ADDR_VAR 0 6
 768: PUSH
 769: LD_VAR 0 13
 773: PUSH
 774: FOR_IN
 775: IFFALSE 833
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
 777: LD_VAR 0 1
 781: PPUSH
 782: LD_STRING M
 784: PUSH
 785: LD_VAR 0 6
 789: PUSH
 790: LD_INT 1
 792: ARRAY
 793: PUSH
 794: LD_VAR 0 6
 798: PUSH
 799: LD_INT 2
 801: ARRAY
 802: PUSH
 803: LD_INT 0
 805: PUSH
 806: LD_INT 0
 808: PUSH
 809: LD_INT 0
 811: PUSH
 812: LD_INT 0
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: PPUSH
 827: CALL_OW 447
 831: GO 774
 833: POP
 834: POP
// end ;
 835: LD_VAR 0 5
 839: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
 840: LD_EXP 3
 844: NOT
 845: IFFALSE 895
 847: GO 849
 849: DISABLE
// begin initHack := true ;
 850: LD_ADDR_EXP 3
 854: PUSH
 855: LD_INT 1
 857: ST_TO_ADDR
// hackTanks := [ ] ;
 858: LD_ADDR_EXP 4
 862: PUSH
 863: EMPTY
 864: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
 865: LD_ADDR_EXP 5
 869: PUSH
 870: EMPTY
 871: ST_TO_ADDR
// hackLimit := 3 ;
 872: LD_ADDR_EXP 6
 876: PUSH
 877: LD_INT 3
 879: ST_TO_ADDR
// hackDist := 12 ;
 880: LD_ADDR_EXP 7
 884: PUSH
 885: LD_INT 12
 887: ST_TO_ADDR
// hackCounter := [ ] ;
 888: LD_ADDR_EXP 8
 892: PUSH
 893: EMPTY
 894: ST_TO_ADDR
// end ;
 895: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
 896: LD_EXP 3
 900: PUSH
 901: LD_INT 34
 903: PUSH
 904: LD_EXP 15
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PPUSH
 913: CALL_OW 69
 917: AND
 918: IFFALSE 1173
 920: GO 922
 922: DISABLE
 923: LD_INT 0
 925: PPUSH
 926: PPUSH
// begin enable ;
 927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
 928: LD_ADDR_VAR 0 1
 932: PUSH
 933: LD_INT 34
 935: PUSH
 936: LD_EXP 15
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 69
 949: PUSH
 950: FOR_IN
 951: IFFALSE 1171
// begin if not i in hackTanks then
 953: LD_VAR 0 1
 957: PUSH
 958: LD_EXP 4
 962: IN
 963: NOT
 964: IFFALSE 1047
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
 966: LD_ADDR_EXP 4
 970: PUSH
 971: LD_EXP 4
 975: PPUSH
 976: LD_EXP 4
 980: PUSH
 981: LD_INT 1
 983: PLUS
 984: PPUSH
 985: LD_VAR 0 1
 989: PPUSH
 990: CALL_OW 1
 994: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
 995: LD_ADDR_EXP 5
 999: PUSH
1000: LD_EXP 5
1004: PPUSH
1005: LD_EXP 5
1009: PUSH
1010: LD_INT 1
1012: PLUS
1013: PPUSH
1014: EMPTY
1015: PPUSH
1016: CALL_OW 1
1020: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1021: LD_ADDR_EXP 8
1025: PUSH
1026: LD_EXP 8
1030: PPUSH
1031: LD_EXP 8
1035: PUSH
1036: LD_INT 1
1038: PLUS
1039: PPUSH
1040: EMPTY
1041: PPUSH
1042: CALL_OW 1
1046: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1047: LD_VAR 0 1
1051: PPUSH
1052: CALL_OW 302
1056: NOT
1057: IFFALSE 1070
// begin HackUnlinkAll ( i ) ;
1059: LD_VAR 0 1
1063: PPUSH
1064: CALL 1176 0 1
// continue ;
1068: GO 950
// end ; HackCheckCapturedStatus ( i ) ;
1070: LD_VAR 0 1
1074: PPUSH
1075: CALL 1619 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: LD_INT 81
1086: PUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 255
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: LD_INT 33
1103: PUSH
1104: LD_INT 3
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 91
1113: PUSH
1114: LD_VAR 0 1
1118: PUSH
1119: LD_EXP 7
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 50
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PPUSH
1141: CALL_OW 69
1145: ST_TO_ADDR
// if not tmp then
1146: LD_VAR 0 2
1150: NOT
1151: IFFALSE 1155
// continue ;
1153: GO 950
// HackLink ( i , tmp ) ;
1155: LD_VAR 0 1
1159: PPUSH
1160: LD_VAR 0 2
1164: PPUSH
1165: CALL 1312 0 2
// end ;
1169: GO 950
1171: POP
1172: POP
// end ;
1173: PPOPN 2
1175: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1176: LD_INT 0
1178: PPUSH
1179: PPUSH
1180: PPUSH
// if not hack in hackTanks then
1181: LD_VAR 0 1
1185: PUSH
1186: LD_EXP 4
1190: IN
1191: NOT
1192: IFFALSE 1196
// exit ;
1194: GO 1307
// index := GetElementIndex ( hackTanks , hack ) ;
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: LD_EXP 4
1205: PPUSH
1206: LD_VAR 0 1
1210: PPUSH
1211: CALL 22756 0 2
1215: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1216: LD_EXP 5
1220: PUSH
1221: LD_VAR 0 4
1225: ARRAY
1226: IFFALSE 1307
// begin for i in hackTanksCaptured [ index ] do
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: LD_EXP 5
1237: PUSH
1238: LD_VAR 0 4
1242: ARRAY
1243: PUSH
1244: FOR_IN
1245: IFFALSE 1271
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1247: LD_VAR 0 3
1251: PUSH
1252: LD_INT 1
1254: ARRAY
1255: PPUSH
1256: LD_VAR 0 3
1260: PUSH
1261: LD_INT 2
1263: ARRAY
1264: PPUSH
1265: CALL_OW 235
1269: GO 1244
1271: POP
1272: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1273: LD_ADDR_EXP 5
1277: PUSH
1278: LD_EXP 5
1282: PPUSH
1283: LD_VAR 0 4
1287: PPUSH
1288: EMPTY
1289: PPUSH
1290: CALL_OW 1
1294: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1295: LD_VAR 0 1
1299: PPUSH
1300: LD_INT 0
1302: PPUSH
1303: CALL_OW 505
// end ; end ;
1307: LD_VAR 0 2
1311: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1312: LD_INT 0
1314: PPUSH
1315: PPUSH
1316: PPUSH
// if not hack in hackTanks or not vehicles then
1317: LD_VAR 0 1
1321: PUSH
1322: LD_EXP 4
1326: IN
1327: NOT
1328: PUSH
1329: LD_VAR 0 2
1333: NOT
1334: OR
1335: IFFALSE 1339
// exit ;
1337: GO 1614
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1339: LD_ADDR_VAR 0 2
1343: PUSH
1344: LD_VAR 0 1
1348: PPUSH
1349: LD_VAR 0 2
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PPUSH
1360: CALL 23406 0 4
1364: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1365: LD_ADDR_VAR 0 5
1369: PUSH
1370: LD_EXP 4
1374: PPUSH
1375: LD_VAR 0 1
1379: PPUSH
1380: CALL 22756 0 2
1384: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1385: LD_EXP 5
1389: PUSH
1390: LD_VAR 0 5
1394: ARRAY
1395: PUSH
1396: LD_EXP 6
1400: LESS
1401: IFFALSE 1590
// begin for i := 1 to vehicles do
1403: LD_ADDR_VAR 0 4
1407: PUSH
1408: DOUBLE
1409: LD_INT 1
1411: DEC
1412: ST_TO_ADDR
1413: LD_VAR 0 2
1417: PUSH
1418: FOR_TO
1419: IFFALSE 1588
// begin if hackTanksCaptured [ index ] = hackLimit then
1421: LD_EXP 5
1425: PUSH
1426: LD_VAR 0 5
1430: ARRAY
1431: PUSH
1432: LD_EXP 6
1436: EQUAL
1437: IFFALSE 1441
// break ;
1439: GO 1588
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1441: LD_ADDR_EXP 8
1445: PUSH
1446: LD_EXP 8
1450: PPUSH
1451: LD_VAR 0 5
1455: PPUSH
1456: LD_EXP 8
1460: PUSH
1461: LD_VAR 0 5
1465: ARRAY
1466: PUSH
1467: LD_INT 1
1469: PLUS
1470: PPUSH
1471: CALL_OW 1
1475: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1476: LD_ADDR_EXP 5
1480: PUSH
1481: LD_EXP 5
1485: PPUSH
1486: LD_VAR 0 5
1490: PUSH
1491: LD_EXP 5
1495: PUSH
1496: LD_VAR 0 5
1500: ARRAY
1501: PUSH
1502: LD_INT 1
1504: PLUS
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PPUSH
1510: LD_VAR 0 2
1514: PUSH
1515: LD_VAR 0 4
1519: ARRAY
1520: PUSH
1521: LD_VAR 0 2
1525: PUSH
1526: LD_VAR 0 4
1530: ARRAY
1531: PPUSH
1532: CALL_OW 255
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PPUSH
1541: CALL 22971 0 3
1545: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1546: LD_VAR 0 2
1550: PUSH
1551: LD_VAR 0 4
1555: ARRAY
1556: PPUSH
1557: LD_VAR 0 1
1561: PPUSH
1562: CALL_OW 255
1566: PPUSH
1567: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1571: LD_VAR 0 2
1575: PUSH
1576: LD_VAR 0 4
1580: ARRAY
1581: PPUSH
1582: CALL_OW 141
// end ;
1586: GO 1418
1588: POP
1589: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1590: LD_VAR 0 1
1594: PPUSH
1595: LD_EXP 5
1599: PUSH
1600: LD_VAR 0 5
1604: ARRAY
1605: PUSH
1606: LD_INT 0
1608: PLUS
1609: PPUSH
1610: CALL_OW 505
// end ;
1614: LD_VAR 0 3
1618: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1619: LD_INT 0
1621: PPUSH
1622: PPUSH
1623: PPUSH
1624: PPUSH
// if not hack in hackTanks then
1625: LD_VAR 0 1
1629: PUSH
1630: LD_EXP 4
1634: IN
1635: NOT
1636: IFFALSE 1640
// exit ;
1638: GO 1880
// index := GetElementIndex ( hackTanks , hack ) ;
1640: LD_ADDR_VAR 0 4
1644: PUSH
1645: LD_EXP 4
1649: PPUSH
1650: LD_VAR 0 1
1654: PPUSH
1655: CALL 22756 0 2
1659: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1660: LD_ADDR_VAR 0 3
1664: PUSH
1665: DOUBLE
1666: LD_EXP 5
1670: PUSH
1671: LD_VAR 0 4
1675: ARRAY
1676: INC
1677: ST_TO_ADDR
1678: LD_INT 1
1680: PUSH
1681: FOR_DOWNTO
1682: IFFALSE 1854
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1684: LD_ADDR_VAR 0 5
1688: PUSH
1689: LD_EXP 5
1693: PUSH
1694: LD_VAR 0 4
1698: ARRAY
1699: PUSH
1700: LD_VAR 0 3
1704: ARRAY
1705: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1706: LD_VAR 0 5
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: CALL_OW 302
1719: NOT
1720: PUSH
1721: LD_VAR 0 5
1725: PUSH
1726: LD_INT 1
1728: ARRAY
1729: PPUSH
1730: CALL_OW 255
1734: PUSH
1735: LD_VAR 0 1
1739: PPUSH
1740: CALL_OW 255
1744: NONEQUAL
1745: OR
1746: IFFALSE 1852
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
1748: LD_VAR 0 5
1752: PUSH
1753: LD_INT 1
1755: ARRAY
1756: PPUSH
1757: CALL_OW 305
1761: PUSH
1762: LD_VAR 0 5
1766: PUSH
1767: LD_INT 1
1769: ARRAY
1770: PPUSH
1771: CALL_OW 255
1775: PUSH
1776: LD_VAR 0 1
1780: PPUSH
1781: CALL_OW 255
1785: EQUAL
1786: AND
1787: IFFALSE 1811
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
1789: LD_VAR 0 5
1793: PUSH
1794: LD_INT 1
1796: ARRAY
1797: PPUSH
1798: LD_VAR 0 5
1802: PUSH
1803: LD_INT 2
1805: ARRAY
1806: PPUSH
1807: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
1811: LD_ADDR_EXP 5
1815: PUSH
1816: LD_EXP 5
1820: PPUSH
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_EXP 5
1830: PUSH
1831: LD_VAR 0 4
1835: ARRAY
1836: PPUSH
1837: LD_VAR 0 3
1841: PPUSH
1842: CALL_OW 3
1846: PPUSH
1847: CALL_OW 1
1851: ST_TO_ADDR
// end ; end ;
1852: GO 1681
1854: POP
1855: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1856: LD_VAR 0 1
1860: PPUSH
1861: LD_EXP 5
1865: PUSH
1866: LD_VAR 0 4
1870: ARRAY
1871: PUSH
1872: LD_INT 0
1874: PLUS
1875: PPUSH
1876: CALL_OW 505
// end ;
1880: LD_VAR 0 2
1884: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
1885: LD_INT 0
1887: PPUSH
1888: PPUSH
1889: PPUSH
1890: PPUSH
// if not hack in hackTanks then
1891: LD_VAR 0 1
1895: PUSH
1896: LD_EXP 4
1900: IN
1901: NOT
1902: IFFALSE 1906
// exit ;
1904: GO 1991
// index := GetElementIndex ( hackTanks , hack ) ;
1906: LD_ADDR_VAR 0 5
1910: PUSH
1911: LD_EXP 4
1915: PPUSH
1916: LD_VAR 0 1
1920: PPUSH
1921: CALL 22756 0 2
1925: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: DOUBLE
1932: LD_INT 1
1934: DEC
1935: ST_TO_ADDR
1936: LD_EXP 5
1940: PUSH
1941: LD_VAR 0 5
1945: ARRAY
1946: PUSH
1947: FOR_TO
1948: IFFALSE 1989
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
1950: LD_EXP 5
1954: PUSH
1955: LD_VAR 0 5
1959: ARRAY
1960: PUSH
1961: LD_VAR 0 4
1965: ARRAY
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PUSH
1971: LD_VAR 0 2
1975: EQUAL
1976: IFFALSE 1987
// KillUnit ( vehicle ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: CALL_OW 66
1987: GO 1947
1989: POP
1990: POP
// end ;
1991: LD_VAR 0 3
1995: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
1996: LD_EXP 9
2000: NOT
2001: IFFALSE 2036
2003: GO 2005
2005: DISABLE
// begin initMiner := true ;
2006: LD_ADDR_EXP 9
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// minersList := [ ] ;
2014: LD_ADDR_EXP 10
2018: PUSH
2019: EMPTY
2020: ST_TO_ADDR
// minerMinesList := [ ] ;
2021: LD_ADDR_EXP 11
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2028: LD_ADDR_EXP 12
2032: PUSH
2033: LD_INT 5
2035: ST_TO_ADDR
// end ;
2036: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2037: LD_EXP 9
2041: PUSH
2042: LD_INT 34
2044: PUSH
2045: LD_EXP 20
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PPUSH
2054: CALL_OW 69
2058: AND
2059: IFFALSE 2522
2061: GO 2063
2063: DISABLE
2064: LD_INT 0
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
// begin enable ;
2070: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2071: LD_ADDR_VAR 0 1
2075: PUSH
2076: LD_INT 34
2078: PUSH
2079: LD_EXP 20
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PPUSH
2088: CALL_OW 69
2092: PUSH
2093: FOR_IN
2094: IFFALSE 2166
// begin if not i in minersList then
2096: LD_VAR 0 1
2100: PUSH
2101: LD_EXP 10
2105: IN
2106: NOT
2107: IFFALSE 2164
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2109: LD_ADDR_EXP 10
2113: PUSH
2114: LD_EXP 10
2118: PPUSH
2119: LD_EXP 10
2123: PUSH
2124: LD_INT 1
2126: PLUS
2127: PPUSH
2128: LD_VAR 0 1
2132: PPUSH
2133: CALL_OW 1
2137: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2138: LD_ADDR_EXP 11
2142: PUSH
2143: LD_EXP 11
2147: PPUSH
2148: LD_EXP 11
2152: PUSH
2153: LD_INT 1
2155: PLUS
2156: PPUSH
2157: EMPTY
2158: PPUSH
2159: CALL_OW 1
2163: ST_TO_ADDR
// end end ;
2164: GO 2093
2166: POP
2167: POP
// for i := minerMinesList downto 1 do
2168: LD_ADDR_VAR 0 1
2172: PUSH
2173: DOUBLE
2174: LD_EXP 11
2178: INC
2179: ST_TO_ADDR
2180: LD_INT 1
2182: PUSH
2183: FOR_DOWNTO
2184: IFFALSE 2520
// begin if IsLive ( minersList [ i ] ) then
2186: LD_EXP 10
2190: PUSH
2191: LD_VAR 0 1
2195: ARRAY
2196: PPUSH
2197: CALL_OW 300
2201: IFFALSE 2229
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2203: LD_EXP 10
2207: PUSH
2208: LD_VAR 0 1
2212: ARRAY
2213: PPUSH
2214: LD_EXP 11
2218: PUSH
2219: LD_VAR 0 1
2223: ARRAY
2224: PPUSH
2225: CALL_OW 505
// if not minerMinesList [ i ] then
2229: LD_EXP 11
2233: PUSH
2234: LD_VAR 0 1
2238: ARRAY
2239: NOT
2240: IFFALSE 2244
// continue ;
2242: GO 2183
// for j := minerMinesList [ i ] downto 1 do
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: DOUBLE
2250: LD_EXP 11
2254: PUSH
2255: LD_VAR 0 1
2259: ARRAY
2260: INC
2261: ST_TO_ADDR
2262: LD_INT 1
2264: PUSH
2265: FOR_DOWNTO
2266: IFFALSE 2516
// begin side := GetSide ( minersList [ i ] ) ;
2268: LD_ADDR_VAR 0 3
2272: PUSH
2273: LD_EXP 10
2277: PUSH
2278: LD_VAR 0 1
2282: ARRAY
2283: PPUSH
2284: CALL_OW 255
2288: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2289: LD_ADDR_VAR 0 4
2293: PUSH
2294: LD_EXP 11
2298: PUSH
2299: LD_VAR 0 1
2303: ARRAY
2304: PUSH
2305: LD_VAR 0 2
2309: ARRAY
2310: PUSH
2311: LD_INT 1
2313: ARRAY
2314: PPUSH
2315: LD_EXP 11
2319: PUSH
2320: LD_VAR 0 1
2324: ARRAY
2325: PUSH
2326: LD_VAR 0 2
2330: ARRAY
2331: PUSH
2332: LD_INT 2
2334: ARRAY
2335: PPUSH
2336: CALL_OW 428
2340: ST_TO_ADDR
// if not tmp then
2341: LD_VAR 0 4
2345: NOT
2346: IFFALSE 2350
// continue ;
2348: GO 2265
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2350: LD_VAR 0 4
2354: PUSH
2355: LD_INT 81
2357: PUSH
2358: LD_VAR 0 3
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: IN
2372: PUSH
2373: LD_EXP 11
2377: PUSH
2378: LD_VAR 0 1
2382: ARRAY
2383: PUSH
2384: LD_VAR 0 2
2388: ARRAY
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: PPUSH
2394: LD_EXP 11
2398: PUSH
2399: LD_VAR 0 1
2403: ARRAY
2404: PUSH
2405: LD_VAR 0 2
2409: ARRAY
2410: PUSH
2411: LD_INT 2
2413: ARRAY
2414: PPUSH
2415: CALL_OW 458
2419: AND
2420: IFFALSE 2514
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
2422: LD_EXP 11
2426: PUSH
2427: LD_VAR 0 1
2431: ARRAY
2432: PUSH
2433: LD_VAR 0 2
2437: ARRAY
2438: PUSH
2439: LD_INT 1
2441: ARRAY
2442: PPUSH
2443: LD_EXP 11
2447: PUSH
2448: LD_VAR 0 1
2452: ARRAY
2453: PUSH
2454: LD_VAR 0 2
2458: ARRAY
2459: PUSH
2460: LD_INT 2
2462: ARRAY
2463: PPUSH
2464: LD_VAR 0 3
2468: PPUSH
2469: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
2473: LD_ADDR_EXP 11
2477: PUSH
2478: LD_EXP 11
2482: PPUSH
2483: LD_VAR 0 1
2487: PPUSH
2488: LD_EXP 11
2492: PUSH
2493: LD_VAR 0 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 2
2503: PPUSH
2504: CALL_OW 3
2508: PPUSH
2509: CALL_OW 1
2513: ST_TO_ADDR
// end ; end ;
2514: GO 2265
2516: POP
2517: POP
// end ;
2518: GO 2183
2520: POP
2521: POP
// end ;
2522: PPOPN 4
2524: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
2525: LD_INT 0
2527: PPUSH
2528: PPUSH
// result := false ;
2529: LD_ADDR_VAR 0 4
2533: PUSH
2534: LD_INT 0
2536: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
2537: LD_VAR 0 1
2541: PPUSH
2542: CALL_OW 264
2546: PUSH
2547: LD_EXP 20
2551: EQUAL
2552: NOT
2553: IFFALSE 2557
// exit ;
2555: GO 2797
// index := GetElementIndex ( minersList , unit ) ;
2557: LD_ADDR_VAR 0 5
2561: PUSH
2562: LD_EXP 10
2566: PPUSH
2567: LD_VAR 0 1
2571: PPUSH
2572: CALL 22756 0 2
2576: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
2577: LD_EXP 11
2581: PUSH
2582: LD_VAR 0 5
2586: ARRAY
2587: PUSH
2588: LD_EXP 12
2592: GREATEREQUAL
2593: IFFALSE 2597
// exit ;
2595: GO 2797
// ComMoveXY ( unit , x , y ) ;
2597: LD_VAR 0 1
2601: PPUSH
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_VAR 0 3
2611: PPUSH
2612: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2616: LD_INT 35
2618: PPUSH
2619: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
2623: LD_VAR 0 1
2627: PPUSH
2628: LD_VAR 0 2
2632: PPUSH
2633: LD_VAR 0 3
2637: PPUSH
2638: CALL 53528 0 3
2642: NOT
2643: PUSH
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL_OW 314
2653: AND
2654: IFFALSE 2658
// exit ;
2656: GO 2797
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
2658: LD_VAR 0 2
2662: PPUSH
2663: LD_VAR 0 3
2667: PPUSH
2668: CALL_OW 428
2672: PUSH
2673: LD_VAR 0 1
2677: EQUAL
2678: PUSH
2679: LD_VAR 0 1
2683: PPUSH
2684: CALL_OW 314
2688: NOT
2689: AND
2690: IFFALSE 2616
// PlaySoundXY ( x , y , PlantMine ) ;
2692: LD_VAR 0 2
2696: PPUSH
2697: LD_VAR 0 3
2701: PPUSH
2702: LD_STRING PlantMine
2704: PPUSH
2705: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
2709: LD_VAR 0 2
2713: PPUSH
2714: LD_VAR 0 3
2718: PPUSH
2719: LD_VAR 0 1
2723: PPUSH
2724: CALL_OW 255
2728: PPUSH
2729: LD_INT 0
2731: PPUSH
2732: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
2736: LD_ADDR_EXP 11
2740: PUSH
2741: LD_EXP 11
2745: PPUSH
2746: LD_VAR 0 5
2750: PUSH
2751: LD_EXP 11
2755: PUSH
2756: LD_VAR 0 5
2760: ARRAY
2761: PUSH
2762: LD_INT 1
2764: PLUS
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PPUSH
2770: LD_VAR 0 2
2774: PUSH
2775: LD_VAR 0 3
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL 22971 0 3
2788: ST_TO_ADDR
// result := true ;
2789: LD_ADDR_VAR 0 4
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// end ;
2797: LD_VAR 0 4
2801: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
2802: LD_INT 0
2804: PPUSH
2805: PPUSH
2806: PPUSH
// if not unit in minersList then
2807: LD_VAR 0 1
2811: PUSH
2812: LD_EXP 10
2816: IN
2817: NOT
2818: IFFALSE 2822
// exit ;
2820: GO 3214
// index := GetElementIndex ( minersList , unit ) ;
2822: LD_ADDR_VAR 0 6
2826: PUSH
2827: LD_EXP 10
2831: PPUSH
2832: LD_VAR 0 1
2836: PPUSH
2837: CALL 22756 0 2
2841: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
2842: LD_ADDR_VAR 0 5
2846: PUSH
2847: DOUBLE
2848: LD_EXP 11
2852: PUSH
2853: LD_VAR 0 6
2857: ARRAY
2858: INC
2859: ST_TO_ADDR
2860: LD_INT 1
2862: PUSH
2863: FOR_DOWNTO
2864: IFFALSE 3025
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
2866: LD_EXP 11
2870: PUSH
2871: LD_VAR 0 6
2875: ARRAY
2876: PUSH
2877: LD_VAR 0 5
2881: ARRAY
2882: PUSH
2883: LD_INT 1
2885: ARRAY
2886: PUSH
2887: LD_VAR 0 2
2891: EQUAL
2892: PUSH
2893: LD_EXP 11
2897: PUSH
2898: LD_VAR 0 6
2902: ARRAY
2903: PUSH
2904: LD_VAR 0 5
2908: ARRAY
2909: PUSH
2910: LD_INT 2
2912: ARRAY
2913: PUSH
2914: LD_VAR 0 3
2918: EQUAL
2919: AND
2920: IFFALSE 3023
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
2922: LD_EXP 11
2926: PUSH
2927: LD_VAR 0 6
2931: ARRAY
2932: PUSH
2933: LD_VAR 0 5
2937: ARRAY
2938: PUSH
2939: LD_INT 1
2941: ARRAY
2942: PPUSH
2943: LD_EXP 11
2947: PUSH
2948: LD_VAR 0 6
2952: ARRAY
2953: PUSH
2954: LD_VAR 0 5
2958: ARRAY
2959: PUSH
2960: LD_INT 2
2962: ARRAY
2963: PPUSH
2964: LD_VAR 0 1
2968: PPUSH
2969: CALL_OW 255
2973: PPUSH
2974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
2978: LD_ADDR_EXP 11
2982: PUSH
2983: LD_EXP 11
2987: PPUSH
2988: LD_VAR 0 6
2992: PPUSH
2993: LD_EXP 11
2997: PUSH
2998: LD_VAR 0 6
3002: ARRAY
3003: PPUSH
3004: LD_VAR 0 5
3008: PPUSH
3009: CALL_OW 3
3013: PPUSH
3014: CALL_OW 1
3018: ST_TO_ADDR
// exit ;
3019: POP
3020: POP
3021: GO 3214
// end ; end ;
3023: GO 2863
3025: POP
3026: POP
// for i := minerMinesList [ index ] downto 1 do
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: DOUBLE
3033: LD_EXP 11
3037: PUSH
3038: LD_VAR 0 6
3042: ARRAY
3043: INC
3044: ST_TO_ADDR
3045: LD_INT 1
3047: PUSH
3048: FOR_DOWNTO
3049: IFFALSE 3212
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3051: LD_EXP 11
3055: PUSH
3056: LD_VAR 0 6
3060: ARRAY
3061: PUSH
3062: LD_VAR 0 5
3066: ARRAY
3067: PUSH
3068: LD_INT 1
3070: ARRAY
3071: PPUSH
3072: LD_EXP 11
3076: PUSH
3077: LD_VAR 0 6
3081: ARRAY
3082: PUSH
3083: LD_VAR 0 5
3087: ARRAY
3088: PUSH
3089: LD_INT 2
3091: ARRAY
3092: PPUSH
3093: LD_VAR 0 2
3097: PPUSH
3098: LD_VAR 0 3
3102: PPUSH
3103: CALL_OW 298
3107: PUSH
3108: LD_INT 6
3110: LESS
3111: IFFALSE 3210
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3113: LD_EXP 11
3117: PUSH
3118: LD_VAR 0 6
3122: ARRAY
3123: PUSH
3124: LD_VAR 0 5
3128: ARRAY
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_EXP 11
3138: PUSH
3139: LD_VAR 0 6
3143: ARRAY
3144: PUSH
3145: LD_VAR 0 5
3149: ARRAY
3150: PUSH
3151: LD_INT 2
3153: ARRAY
3154: PPUSH
3155: LD_VAR 0 1
3159: PPUSH
3160: CALL_OW 255
3164: PPUSH
3165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3169: LD_ADDR_EXP 11
3173: PUSH
3174: LD_EXP 11
3178: PPUSH
3179: LD_VAR 0 6
3183: PPUSH
3184: LD_EXP 11
3188: PUSH
3189: LD_VAR 0 6
3193: ARRAY
3194: PPUSH
3195: LD_VAR 0 5
3199: PPUSH
3200: CALL_OW 3
3204: PPUSH
3205: CALL_OW 1
3209: ST_TO_ADDR
// end ; end ;
3210: GO 3048
3212: POP
3213: POP
// end ;
3214: LD_VAR 0 4
3218: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3219: LD_INT 0
3221: PPUSH
3222: PPUSH
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
3229: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3230: LD_VAR 0 1
3234: PPUSH
3235: CALL_OW 264
3239: PUSH
3240: LD_EXP 20
3244: EQUAL
3245: NOT
3246: PUSH
3247: LD_VAR 0 1
3251: PUSH
3252: LD_EXP 10
3256: IN
3257: NOT
3258: OR
3259: IFFALSE 3263
// exit ;
3261: GO 3585
// index := GetElementIndex ( minersList , unit ) ;
3263: LD_ADDR_VAR 0 6
3267: PUSH
3268: LD_EXP 10
3272: PPUSH
3273: LD_VAR 0 1
3277: PPUSH
3278: CALL 22756 0 2
3282: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3283: LD_ADDR_VAR 0 8
3287: PUSH
3288: LD_EXP 12
3292: PUSH
3293: LD_EXP 11
3297: PUSH
3298: LD_VAR 0 6
3302: ARRAY
3303: MINUS
3304: ST_TO_ADDR
// if not minesFreeAmount then
3305: LD_VAR 0 8
3309: NOT
3310: IFFALSE 3314
// exit ;
3312: GO 3585
// tmp := [ ] ;
3314: LD_ADDR_VAR 0 7
3318: PUSH
3319: EMPTY
3320: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3321: LD_ADDR_VAR 0 5
3325: PUSH
3326: DOUBLE
3327: LD_INT 1
3329: DEC
3330: ST_TO_ADDR
3331: LD_VAR 0 8
3335: PUSH
3336: FOR_TO
3337: IFFALSE 3532
// begin _d := rand ( 0 , 5 ) ;
3339: LD_ADDR_VAR 0 11
3343: PUSH
3344: LD_INT 0
3346: PPUSH
3347: LD_INT 5
3349: PPUSH
3350: CALL_OW 12
3354: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3355: LD_ADDR_VAR 0 12
3359: PUSH
3360: LD_INT 2
3362: PPUSH
3363: LD_INT 6
3365: PPUSH
3366: CALL_OW 12
3370: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 2
3380: PPUSH
3381: LD_VAR 0 11
3385: PPUSH
3386: LD_VAR 0 12
3390: PPUSH
3391: CALL_OW 272
3395: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
3396: LD_ADDR_VAR 0 10
3400: PUSH
3401: LD_VAR 0 3
3405: PPUSH
3406: LD_VAR 0 11
3410: PPUSH
3411: LD_VAR 0 12
3415: PPUSH
3416: CALL_OW 273
3420: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
3421: LD_VAR 0 9
3425: PPUSH
3426: LD_VAR 0 10
3430: PPUSH
3431: CALL_OW 488
3435: PUSH
3436: LD_VAR 0 9
3440: PUSH
3441: LD_VAR 0 10
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: LD_VAR 0 7
3454: IN
3455: NOT
3456: AND
3457: PUSH
3458: LD_VAR 0 9
3462: PPUSH
3463: LD_VAR 0 10
3467: PPUSH
3468: CALL_OW 458
3472: NOT
3473: AND
3474: IFFALSE 3516
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
3476: LD_ADDR_VAR 0 7
3480: PUSH
3481: LD_VAR 0 7
3485: PPUSH
3486: LD_VAR 0 7
3490: PUSH
3491: LD_INT 1
3493: PLUS
3494: PPUSH
3495: LD_VAR 0 9
3499: PUSH
3500: LD_VAR 0 10
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PPUSH
3509: CALL_OW 1
3513: ST_TO_ADDR
3514: GO 3530
// i := i - 1 ;
3516: LD_ADDR_VAR 0 5
3520: PUSH
3521: LD_VAR 0 5
3525: PUSH
3526: LD_INT 1
3528: MINUS
3529: ST_TO_ADDR
// end ;
3530: GO 3336
3532: POP
3533: POP
// for i in tmp do
3534: LD_ADDR_VAR 0 5
3538: PUSH
3539: LD_VAR 0 7
3543: PUSH
3544: FOR_IN
3545: IFFALSE 3583
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
3547: LD_VAR 0 1
3551: PPUSH
3552: LD_VAR 0 5
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PPUSH
3561: LD_VAR 0 5
3565: PUSH
3566: LD_INT 2
3568: ARRAY
3569: PPUSH
3570: CALL 2525 0 3
3574: NOT
3575: IFFALSE 3581
// exit ;
3577: POP
3578: POP
3579: GO 3585
3581: GO 3544
3583: POP
3584: POP
// end ;
3585: LD_VAR 0 4
3589: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
3590: LD_INT 0
3592: PPUSH
3593: PPUSH
3594: PPUSH
3595: PPUSH
3596: PPUSH
3597: PPUSH
3598: PPUSH
// if not GetClass ( unit ) = class_sniper then
3599: LD_VAR 0 1
3603: PPUSH
3604: CALL_OW 257
3608: PUSH
3609: LD_INT 5
3611: EQUAL
3612: NOT
3613: IFFALSE 3617
// exit ;
3615: GO 4005
// dist := 8 ;
3617: LD_ADDR_VAR 0 5
3621: PUSH
3622: LD_INT 8
3624: ST_TO_ADDR
// viewRange := 12 ;
3625: LD_ADDR_VAR 0 7
3629: PUSH
3630: LD_INT 12
3632: ST_TO_ADDR
// side := GetSide ( unit ) ;
3633: LD_ADDR_VAR 0 6
3637: PUSH
3638: LD_VAR 0 1
3642: PPUSH
3643: CALL_OW 255
3647: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
3648: LD_INT 61
3650: PPUSH
3651: LD_VAR 0 6
3655: PPUSH
3656: CALL_OW 321
3660: PUSH
3661: LD_INT 2
3663: EQUAL
3664: IFFALSE 3674
// viewRange := 16 ;
3666: LD_ADDR_VAR 0 7
3670: PUSH
3671: LD_INT 16
3673: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
3674: LD_VAR 0 1
3678: PPUSH
3679: LD_VAR 0 2
3683: PPUSH
3684: LD_VAR 0 3
3688: PPUSH
3689: CALL_OW 297
3693: PUSH
3694: LD_VAR 0 5
3698: GREATER
3699: IFFALSE 3778
// begin ComMoveXY ( unit , x , y ) ;
3701: LD_VAR 0 1
3705: PPUSH
3706: LD_VAR 0 2
3710: PPUSH
3711: LD_VAR 0 3
3715: PPUSH
3716: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3720: LD_INT 35
3722: PPUSH
3723: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
3727: LD_VAR 0 1
3731: PPUSH
3732: LD_VAR 0 2
3736: PPUSH
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL 53528 0 3
3746: NOT
3747: IFFALSE 3751
// exit ;
3749: GO 4005
// until GetDistUnitXY ( unit , x , y ) < dist ;
3751: LD_VAR 0 1
3755: PPUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: CALL_OW 297
3770: PUSH
3771: LD_VAR 0 5
3775: LESS
3776: IFFALSE 3720
// end ; ComTurnXY ( unit , x , y ) ;
3778: LD_VAR 0 1
3782: PPUSH
3783: LD_VAR 0 2
3787: PPUSH
3788: LD_VAR 0 3
3792: PPUSH
3793: CALL_OW 118
// wait ( 5 ) ;
3797: LD_INT 5
3799: PPUSH
3800: CALL_OW 67
// _d := GetDir ( unit ) ;
3804: LD_ADDR_VAR 0 10
3808: PUSH
3809: LD_VAR 0 1
3813: PPUSH
3814: CALL_OW 254
3818: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
3819: LD_ADDR_VAR 0 8
3823: PUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL_OW 250
3833: PPUSH
3834: LD_VAR 0 10
3838: PPUSH
3839: LD_VAR 0 5
3843: PPUSH
3844: CALL_OW 272
3848: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
3849: LD_ADDR_VAR 0 9
3853: PUSH
3854: LD_VAR 0 1
3858: PPUSH
3859: CALL_OW 251
3863: PPUSH
3864: LD_VAR 0 10
3868: PPUSH
3869: LD_VAR 0 5
3873: PPUSH
3874: CALL_OW 273
3878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3879: LD_VAR 0 8
3883: PPUSH
3884: LD_VAR 0 9
3888: PPUSH
3889: CALL_OW 488
3893: NOT
3894: IFFALSE 3898
// exit ;
3896: GO 4005
// ComAnimCustom ( unit , 1 ) ;
3898: LD_VAR 0 1
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
3910: LD_VAR 0 8
3914: PPUSH
3915: LD_VAR 0 9
3919: PPUSH
3920: LD_VAR 0 6
3924: PPUSH
3925: LD_VAR 0 7
3929: PPUSH
3930: CALL_OW 330
// repeat wait ( 1 ) ;
3934: LD_INT 1
3936: PPUSH
3937: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 316
3950: PUSH
3951: LD_VAR 0 1
3955: PPUSH
3956: CALL_OW 314
3960: OR
3961: PUSH
3962: LD_VAR 0 1
3966: PPUSH
3967: CALL_OW 302
3971: NOT
3972: OR
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 301
3983: OR
3984: IFFALSE 3934
// RemoveSeeing ( _x , _y , side ) ;
3986: LD_VAR 0 8
3990: PPUSH
3991: LD_VAR 0 9
3995: PPUSH
3996: LD_VAR 0 6
4000: PPUSH
4001: CALL_OW 331
// end ; end_of_file
4005: LD_VAR 0 4
4009: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4010: LD_INT 0
4012: PPUSH
// ar_miner := 81 ;
4013: LD_ADDR_EXP 20
4017: PUSH
4018: LD_INT 81
4020: ST_TO_ADDR
// ar_crane := 88 ;
4021: LD_ADDR_EXP 19
4025: PUSH
4026: LD_INT 88
4028: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4029: LD_ADDR_EXP 14
4033: PUSH
4034: LD_INT 89
4036: ST_TO_ADDR
// us_hack := 99 ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_INT 99
4044: ST_TO_ADDR
// us_artillery := 97 ;
4045: LD_ADDR_EXP 16
4049: PUSH
4050: LD_INT 97
4052: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4053: LD_ADDR_EXP 17
4057: PUSH
4058: LD_INT 91
4060: ST_TO_ADDR
// ar_mortar := 92 ;
4061: LD_ADDR_EXP 18
4065: PUSH
4066: LD_INT 92
4068: ST_TO_ADDR
// ru_radar := 98 ;
4069: LD_ADDR_EXP 13
4073: PUSH
4074: LD_INT 98
4076: ST_TO_ADDR
// tech_Artillery := 80 ;
4077: LD_ADDR_EXP 21
4081: PUSH
4082: LD_INT 80
4084: ST_TO_ADDR
// tech_RadMat := 81 ;
4085: LD_ADDR_EXP 22
4089: PUSH
4090: LD_INT 81
4092: ST_TO_ADDR
// tech_BasicTools := 82 ;
4093: LD_ADDR_EXP 23
4097: PUSH
4098: LD_INT 82
4100: ST_TO_ADDR
// tech_Cargo := 83 ;
4101: LD_ADDR_EXP 24
4105: PUSH
4106: LD_INT 83
4108: ST_TO_ADDR
// tech_Track := 84 ;
4109: LD_ADDR_EXP 25
4113: PUSH
4114: LD_INT 84
4116: ST_TO_ADDR
// tech_Crane := 85 ;
4117: LD_ADDR_EXP 26
4121: PUSH
4122: LD_INT 85
4124: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4125: LD_ADDR_EXP 27
4129: PUSH
4130: LD_INT 86
4132: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4133: LD_ADDR_EXP 28
4137: PUSH
4138: LD_INT 87
4140: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4141: LD_ADDR_EXP 29
4145: PUSH
4146: LD_INT 88
4148: ST_TO_ADDR
// class_mastodont := 31 ;
4149: LD_ADDR_EXP 30
4153: PUSH
4154: LD_INT 31
4156: ST_TO_ADDR
// class_horse := 21 ;
4157: LD_ADDR_EXP 31
4161: PUSH
4162: LD_INT 21
4164: ST_TO_ADDR
// end ;
4165: LD_VAR 0 1
4169: RET
// every 1 do
4170: GO 4172
4172: DISABLE
// InitGlobalVariables ; end_of_file
4173: CALL 4010 0 0
4177: END
// every 0 0$1 do
4178: GO 4180
4180: DISABLE
// begin enable ;
4181: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4182: LD_STRING updateTimer(
4184: PUSH
4185: LD_OWVAR 1
4189: STR
4190: PUSH
4191: LD_STRING );
4193: STR
4194: PPUSH
4195: CALL_OW 559
// end ;
4199: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4200: LD_INT 0
4202: PPUSH
// if p2 = 100 then
4203: LD_VAR 0 2
4207: PUSH
4208: LD_INT 100
4210: EQUAL
4211: IFFALSE 5214
// begin if not StreamModeActive then
4213: LD_EXP 32
4217: NOT
4218: IFFALSE 4228
// StreamModeActive := true ;
4220: LD_ADDR_EXP 32
4224: PUSH
4225: LD_INT 1
4227: ST_TO_ADDR
// if p3 = 0 then
4228: LD_VAR 0 3
4232: PUSH
4233: LD_INT 0
4235: EQUAL
4236: IFFALSE 4242
// InitStreamMode ;
4238: CALL 5374 0 0
// if p3 = 1 then
4242: LD_VAR 0 3
4246: PUSH
4247: LD_INT 1
4249: EQUAL
4250: IFFALSE 4260
// sRocket := true ;
4252: LD_ADDR_EXP 37
4256: PUSH
4257: LD_INT 1
4259: ST_TO_ADDR
// if p3 = 2 then
4260: LD_VAR 0 3
4264: PUSH
4265: LD_INT 2
4267: EQUAL
4268: IFFALSE 4278
// sSpeed := true ;
4270: LD_ADDR_EXP 36
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// if p3 = 3 then
4278: LD_VAR 0 3
4282: PUSH
4283: LD_INT 3
4285: EQUAL
4286: IFFALSE 4296
// sEngine := true ;
4288: LD_ADDR_EXP 38
4292: PUSH
4293: LD_INT 1
4295: ST_TO_ADDR
// if p3 = 4 then
4296: LD_VAR 0 3
4300: PUSH
4301: LD_INT 4
4303: EQUAL
4304: IFFALSE 4314
// sSpec := true ;
4306: LD_ADDR_EXP 35
4310: PUSH
4311: LD_INT 1
4313: ST_TO_ADDR
// if p3 = 5 then
4314: LD_VAR 0 3
4318: PUSH
4319: LD_INT 5
4321: EQUAL
4322: IFFALSE 4332
// sLevel := true ;
4324: LD_ADDR_EXP 39
4328: PUSH
4329: LD_INT 1
4331: ST_TO_ADDR
// if p3 = 6 then
4332: LD_VAR 0 3
4336: PUSH
4337: LD_INT 6
4339: EQUAL
4340: IFFALSE 4350
// sArmoury := true ;
4342: LD_ADDR_EXP 40
4346: PUSH
4347: LD_INT 1
4349: ST_TO_ADDR
// if p3 = 7 then
4350: LD_VAR 0 3
4354: PUSH
4355: LD_INT 7
4357: EQUAL
4358: IFFALSE 4368
// sRadar := true ;
4360: LD_ADDR_EXP 41
4364: PUSH
4365: LD_INT 1
4367: ST_TO_ADDR
// if p3 = 8 then
4368: LD_VAR 0 3
4372: PUSH
4373: LD_INT 8
4375: EQUAL
4376: IFFALSE 4386
// sBunker := true ;
4378: LD_ADDR_EXP 42
4382: PUSH
4383: LD_INT 1
4385: ST_TO_ADDR
// if p3 = 9 then
4386: LD_VAR 0 3
4390: PUSH
4391: LD_INT 9
4393: EQUAL
4394: IFFALSE 4404
// sHack := true ;
4396: LD_ADDR_EXP 43
4400: PUSH
4401: LD_INT 1
4403: ST_TO_ADDR
// if p3 = 10 then
4404: LD_VAR 0 3
4408: PUSH
4409: LD_INT 10
4411: EQUAL
4412: IFFALSE 4422
// sFire := true ;
4414: LD_ADDR_EXP 44
4418: PUSH
4419: LD_INT 1
4421: ST_TO_ADDR
// if p3 = 11 then
4422: LD_VAR 0 3
4426: PUSH
4427: LD_INT 11
4429: EQUAL
4430: IFFALSE 4440
// sRefresh := true ;
4432: LD_ADDR_EXP 45
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// if p3 = 12 then
4440: LD_VAR 0 3
4444: PUSH
4445: LD_INT 12
4447: EQUAL
4448: IFFALSE 4458
// sExp := true ;
4450: LD_ADDR_EXP 46
4454: PUSH
4455: LD_INT 1
4457: ST_TO_ADDR
// if p3 = 13 then
4458: LD_VAR 0 3
4462: PUSH
4463: LD_INT 13
4465: EQUAL
4466: IFFALSE 4476
// sDepot := true ;
4468: LD_ADDR_EXP 47
4472: PUSH
4473: LD_INT 1
4475: ST_TO_ADDR
// if p3 = 14 then
4476: LD_VAR 0 3
4480: PUSH
4481: LD_INT 14
4483: EQUAL
4484: IFFALSE 4494
// sFlag := true ;
4486: LD_ADDR_EXP 48
4490: PUSH
4491: LD_INT 1
4493: ST_TO_ADDR
// if p3 = 15 then
4494: LD_VAR 0 3
4498: PUSH
4499: LD_INT 15
4501: EQUAL
4502: IFFALSE 4512
// sKamikadze := true ;
4504: LD_ADDR_EXP 56
4508: PUSH
4509: LD_INT 1
4511: ST_TO_ADDR
// if p3 = 16 then
4512: LD_VAR 0 3
4516: PUSH
4517: LD_INT 16
4519: EQUAL
4520: IFFALSE 4530
// sTroll := true ;
4522: LD_ADDR_EXP 57
4526: PUSH
4527: LD_INT 1
4529: ST_TO_ADDR
// if p3 = 17 then
4530: LD_VAR 0 3
4534: PUSH
4535: LD_INT 17
4537: EQUAL
4538: IFFALSE 4548
// sSlow := true ;
4540: LD_ADDR_EXP 58
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// if p3 = 18 then
4548: LD_VAR 0 3
4552: PUSH
4553: LD_INT 18
4555: EQUAL
4556: IFFALSE 4566
// sLack := true ;
4558: LD_ADDR_EXP 59
4562: PUSH
4563: LD_INT 1
4565: ST_TO_ADDR
// if p3 = 19 then
4566: LD_VAR 0 3
4570: PUSH
4571: LD_INT 19
4573: EQUAL
4574: IFFALSE 4584
// sTank := true ;
4576: LD_ADDR_EXP 61
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// if p3 = 20 then
4584: LD_VAR 0 3
4588: PUSH
4589: LD_INT 20
4591: EQUAL
4592: IFFALSE 4602
// sRemote := true ;
4594: LD_ADDR_EXP 62
4598: PUSH
4599: LD_INT 1
4601: ST_TO_ADDR
// if p3 = 21 then
4602: LD_VAR 0 3
4606: PUSH
4607: LD_INT 21
4609: EQUAL
4610: IFFALSE 4620
// sPowell := true ;
4612: LD_ADDR_EXP 63
4616: PUSH
4617: LD_INT 1
4619: ST_TO_ADDR
// if p3 = 22 then
4620: LD_VAR 0 3
4624: PUSH
4625: LD_INT 22
4627: EQUAL
4628: IFFALSE 4638
// sTeleport := true ;
4630: LD_ADDR_EXP 66
4634: PUSH
4635: LD_INT 1
4637: ST_TO_ADDR
// if p3 = 23 then
4638: LD_VAR 0 3
4642: PUSH
4643: LD_INT 23
4645: EQUAL
4646: IFFALSE 4656
// sOilTower := true ;
4648: LD_ADDR_EXP 68
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// if p3 = 24 then
4656: LD_VAR 0 3
4660: PUSH
4661: LD_INT 24
4663: EQUAL
4664: IFFALSE 4674
// sShovel := true ;
4666: LD_ADDR_EXP 69
4670: PUSH
4671: LD_INT 1
4673: ST_TO_ADDR
// if p3 = 25 then
4674: LD_VAR 0 3
4678: PUSH
4679: LD_INT 25
4681: EQUAL
4682: IFFALSE 4692
// sSheik := true ;
4684: LD_ADDR_EXP 70
4688: PUSH
4689: LD_INT 1
4691: ST_TO_ADDR
// if p3 = 26 then
4692: LD_VAR 0 3
4696: PUSH
4697: LD_INT 26
4699: EQUAL
4700: IFFALSE 4710
// sEarthquake := true ;
4702: LD_ADDR_EXP 72
4706: PUSH
4707: LD_INT 1
4709: ST_TO_ADDR
// if p3 = 27 then
4710: LD_VAR 0 3
4714: PUSH
4715: LD_INT 27
4717: EQUAL
4718: IFFALSE 4728
// sAI := true ;
4720: LD_ADDR_EXP 73
4724: PUSH
4725: LD_INT 1
4727: ST_TO_ADDR
// if p3 = 28 then
4728: LD_VAR 0 3
4732: PUSH
4733: LD_INT 28
4735: EQUAL
4736: IFFALSE 4746
// sCargo := true ;
4738: LD_ADDR_EXP 76
4742: PUSH
4743: LD_INT 1
4745: ST_TO_ADDR
// if p3 = 29 then
4746: LD_VAR 0 3
4750: PUSH
4751: LD_INT 29
4753: EQUAL
4754: IFFALSE 4764
// sDLaser := true ;
4756: LD_ADDR_EXP 77
4760: PUSH
4761: LD_INT 1
4763: ST_TO_ADDR
// if p3 = 30 then
4764: LD_VAR 0 3
4768: PUSH
4769: LD_INT 30
4771: EQUAL
4772: IFFALSE 4782
// sExchange := true ;
4774: LD_ADDR_EXP 78
4778: PUSH
4779: LD_INT 1
4781: ST_TO_ADDR
// if p3 = 31 then
4782: LD_VAR 0 3
4786: PUSH
4787: LD_INT 31
4789: EQUAL
4790: IFFALSE 4800
// sFac := true ;
4792: LD_ADDR_EXP 79
4796: PUSH
4797: LD_INT 1
4799: ST_TO_ADDR
// if p3 = 32 then
4800: LD_VAR 0 3
4804: PUSH
4805: LD_INT 32
4807: EQUAL
4808: IFFALSE 4818
// sPower := true ;
4810: LD_ADDR_EXP 80
4814: PUSH
4815: LD_INT 1
4817: ST_TO_ADDR
// if p3 = 33 then
4818: LD_VAR 0 3
4822: PUSH
4823: LD_INT 33
4825: EQUAL
4826: IFFALSE 4836
// sRandom := true ;
4828: LD_ADDR_EXP 81
4832: PUSH
4833: LD_INT 1
4835: ST_TO_ADDR
// if p3 = 34 then
4836: LD_VAR 0 3
4840: PUSH
4841: LD_INT 34
4843: EQUAL
4844: IFFALSE 4854
// sShield := true ;
4846: LD_ADDR_EXP 82
4850: PUSH
4851: LD_INT 1
4853: ST_TO_ADDR
// if p3 = 35 then
4854: LD_VAR 0 3
4858: PUSH
4859: LD_INT 35
4861: EQUAL
4862: IFFALSE 4872
// sTime := true ;
4864: LD_ADDR_EXP 83
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// if p3 = 36 then
4872: LD_VAR 0 3
4876: PUSH
4877: LD_INT 36
4879: EQUAL
4880: IFFALSE 4890
// sTools := true ;
4882: LD_ADDR_EXP 84
4886: PUSH
4887: LD_INT 1
4889: ST_TO_ADDR
// if p3 = 101 then
4890: LD_VAR 0 3
4894: PUSH
4895: LD_INT 101
4897: EQUAL
4898: IFFALSE 4908
// sSold := true ;
4900: LD_ADDR_EXP 49
4904: PUSH
4905: LD_INT 1
4907: ST_TO_ADDR
// if p3 = 102 then
4908: LD_VAR 0 3
4912: PUSH
4913: LD_INT 102
4915: EQUAL
4916: IFFALSE 4926
// sDiff := true ;
4918: LD_ADDR_EXP 50
4922: PUSH
4923: LD_INT 1
4925: ST_TO_ADDR
// if p3 = 103 then
4926: LD_VAR 0 3
4930: PUSH
4931: LD_INT 103
4933: EQUAL
4934: IFFALSE 4944
// sFog := true ;
4936: LD_ADDR_EXP 53
4940: PUSH
4941: LD_INT 1
4943: ST_TO_ADDR
// if p3 = 104 then
4944: LD_VAR 0 3
4948: PUSH
4949: LD_INT 104
4951: EQUAL
4952: IFFALSE 4962
// sReset := true ;
4954: LD_ADDR_EXP 54
4958: PUSH
4959: LD_INT 1
4961: ST_TO_ADDR
// if p3 = 105 then
4962: LD_VAR 0 3
4966: PUSH
4967: LD_INT 105
4969: EQUAL
4970: IFFALSE 4980
// sSun := true ;
4972: LD_ADDR_EXP 55
4976: PUSH
4977: LD_INT 1
4979: ST_TO_ADDR
// if p3 = 106 then
4980: LD_VAR 0 3
4984: PUSH
4985: LD_INT 106
4987: EQUAL
4988: IFFALSE 4998
// sTiger := true ;
4990: LD_ADDR_EXP 51
4994: PUSH
4995: LD_INT 1
4997: ST_TO_ADDR
// if p3 = 107 then
4998: LD_VAR 0 3
5002: PUSH
5003: LD_INT 107
5005: EQUAL
5006: IFFALSE 5016
// sBomb := true ;
5008: LD_ADDR_EXP 52
5012: PUSH
5013: LD_INT 1
5015: ST_TO_ADDR
// if p3 = 108 then
5016: LD_VAR 0 3
5020: PUSH
5021: LD_INT 108
5023: EQUAL
5024: IFFALSE 5034
// sWound := true ;
5026: LD_ADDR_EXP 60
5030: PUSH
5031: LD_INT 1
5033: ST_TO_ADDR
// if p3 = 109 then
5034: LD_VAR 0 3
5038: PUSH
5039: LD_INT 109
5041: EQUAL
5042: IFFALSE 5052
// sBetray := true ;
5044: LD_ADDR_EXP 64
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
// if p3 = 110 then
5052: LD_VAR 0 3
5056: PUSH
5057: LD_INT 110
5059: EQUAL
5060: IFFALSE 5070
// sContamin := true ;
5062: LD_ADDR_EXP 65
5066: PUSH
5067: LD_INT 1
5069: ST_TO_ADDR
// if p3 = 111 then
5070: LD_VAR 0 3
5074: PUSH
5075: LD_INT 111
5077: EQUAL
5078: IFFALSE 5088
// sOil := true ;
5080: LD_ADDR_EXP 67
5084: PUSH
5085: LD_INT 1
5087: ST_TO_ADDR
// if p3 = 112 then
5088: LD_VAR 0 3
5092: PUSH
5093: LD_INT 112
5095: EQUAL
5096: IFFALSE 5106
// sStu := true ;
5098: LD_ADDR_EXP 71
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// if p3 = 113 then
5106: LD_VAR 0 3
5110: PUSH
5111: LD_INT 113
5113: EQUAL
5114: IFFALSE 5124
// sBazooka := true ;
5116: LD_ADDR_EXP 74
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// if p3 = 114 then
5124: LD_VAR 0 3
5128: PUSH
5129: LD_INT 114
5131: EQUAL
5132: IFFALSE 5142
// sMortar := true ;
5134: LD_ADDR_EXP 75
5138: PUSH
5139: LD_INT 1
5141: ST_TO_ADDR
// if p3 = 115 then
5142: LD_VAR 0 3
5146: PUSH
5147: LD_INT 115
5149: EQUAL
5150: IFFALSE 5160
// sRanger := true ;
5152: LD_ADDR_EXP 85
5156: PUSH
5157: LD_INT 1
5159: ST_TO_ADDR
// if p3 = 116 then
5160: LD_VAR 0 3
5164: PUSH
5165: LD_INT 116
5167: EQUAL
5168: IFFALSE 5178
// sComputer := true ;
5170: LD_ADDR_EXP 86
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// if p3 = 117 then
5178: LD_VAR 0 3
5182: PUSH
5183: LD_INT 117
5185: EQUAL
5186: IFFALSE 5196
// s30 := true ;
5188: LD_ADDR_EXP 87
5192: PUSH
5193: LD_INT 1
5195: ST_TO_ADDR
// if p3 = 118 then
5196: LD_VAR 0 3
5200: PUSH
5201: LD_INT 118
5203: EQUAL
5204: IFFALSE 5214
// s60 := true ;
5206: LD_ADDR_EXP 88
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; if p2 = 101 then
5214: LD_VAR 0 2
5218: PUSH
5219: LD_INT 101
5221: EQUAL
5222: IFFALSE 5350
// begin case p3 of 1 :
5224: LD_VAR 0 3
5228: PUSH
5229: LD_INT 1
5231: DOUBLE
5232: EQUAL
5233: IFTRUE 5237
5235: GO 5244
5237: POP
// hHackUnlimitedResources ; 2 :
5238: CALL 16946 0 0
5242: GO 5350
5244: LD_INT 2
5246: DOUBLE
5247: EQUAL
5248: IFTRUE 5252
5250: GO 5259
5252: POP
// hHackSetLevel10 ; 3 :
5253: CALL 17079 0 0
5257: GO 5350
5259: LD_INT 3
5261: DOUBLE
5262: EQUAL
5263: IFTRUE 5267
5265: GO 5274
5267: POP
// hHackSetLevel10YourUnits ; 4 :
5268: CALL 17164 0 0
5272: GO 5350
5274: LD_INT 4
5276: DOUBLE
5277: EQUAL
5278: IFTRUE 5282
5280: GO 5289
5282: POP
// hHackInvincible ; 5 :
5283: CALL 17612 0 0
5287: GO 5350
5289: LD_INT 5
5291: DOUBLE
5292: EQUAL
5293: IFTRUE 5297
5295: GO 5304
5297: POP
// hHackInvisible ; 6 :
5298: CALL 17723 0 0
5302: GO 5350
5304: LD_INT 6
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5319
5312: POP
// hHackChangeYourSide ; 7 :
5313: CALL 17780 0 0
5317: GO 5350
5319: LD_INT 7
5321: DOUBLE
5322: EQUAL
5323: IFTRUE 5327
5325: GO 5334
5327: POP
// hHackChangeUnitSide ; 8 :
5328: CALL 17822 0 0
5332: GO 5350
5334: LD_INT 8
5336: DOUBLE
5337: EQUAL
5338: IFTRUE 5342
5340: GO 5349
5342: POP
// hHackFog ; end ;
5343: CALL 17923 0 0
5347: GO 5350
5349: POP
// end ; end ;
5350: LD_VAR 0 7
5354: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5355: GO 5357
5357: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5358: LD_STRING initStreamRollete();
5360: PPUSH
5361: CALL_OW 559
// InitStreamMode ;
5365: CALL 5374 0 0
// DefineStreamItems ( ) ;
5369: CALL 5838 0 0
// end ;
5373: END
// function InitStreamMode ; begin
5374: LD_INT 0
5376: PPUSH
// streamModeActive := false ;
5377: LD_ADDR_EXP 32
5381: PUSH
5382: LD_INT 0
5384: ST_TO_ADDR
// normalCounter := 36 ;
5385: LD_ADDR_EXP 33
5389: PUSH
5390: LD_INT 36
5392: ST_TO_ADDR
// hardcoreCounter := 16 ;
5393: LD_ADDR_EXP 34
5397: PUSH
5398: LD_INT 16
5400: ST_TO_ADDR
// sRocket := false ;
5401: LD_ADDR_EXP 37
5405: PUSH
5406: LD_INT 0
5408: ST_TO_ADDR
// sSpeed := false ;
5409: LD_ADDR_EXP 36
5413: PUSH
5414: LD_INT 0
5416: ST_TO_ADDR
// sEngine := false ;
5417: LD_ADDR_EXP 38
5421: PUSH
5422: LD_INT 0
5424: ST_TO_ADDR
// sSpec := false ;
5425: LD_ADDR_EXP 35
5429: PUSH
5430: LD_INT 0
5432: ST_TO_ADDR
// sLevel := false ;
5433: LD_ADDR_EXP 39
5437: PUSH
5438: LD_INT 0
5440: ST_TO_ADDR
// sArmoury := false ;
5441: LD_ADDR_EXP 40
5445: PUSH
5446: LD_INT 0
5448: ST_TO_ADDR
// sRadar := false ;
5449: LD_ADDR_EXP 41
5453: PUSH
5454: LD_INT 0
5456: ST_TO_ADDR
// sBunker := false ;
5457: LD_ADDR_EXP 42
5461: PUSH
5462: LD_INT 0
5464: ST_TO_ADDR
// sHack := false ;
5465: LD_ADDR_EXP 43
5469: PUSH
5470: LD_INT 0
5472: ST_TO_ADDR
// sFire := false ;
5473: LD_ADDR_EXP 44
5477: PUSH
5478: LD_INT 0
5480: ST_TO_ADDR
// sRefresh := false ;
5481: LD_ADDR_EXP 45
5485: PUSH
5486: LD_INT 0
5488: ST_TO_ADDR
// sExp := false ;
5489: LD_ADDR_EXP 46
5493: PUSH
5494: LD_INT 0
5496: ST_TO_ADDR
// sDepot := false ;
5497: LD_ADDR_EXP 47
5501: PUSH
5502: LD_INT 0
5504: ST_TO_ADDR
// sFlag := false ;
5505: LD_ADDR_EXP 48
5509: PUSH
5510: LD_INT 0
5512: ST_TO_ADDR
// sKamikadze := false ;
5513: LD_ADDR_EXP 56
5517: PUSH
5518: LD_INT 0
5520: ST_TO_ADDR
// sTroll := false ;
5521: LD_ADDR_EXP 57
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// sSlow := false ;
5529: LD_ADDR_EXP 58
5533: PUSH
5534: LD_INT 0
5536: ST_TO_ADDR
// sLack := false ;
5537: LD_ADDR_EXP 59
5541: PUSH
5542: LD_INT 0
5544: ST_TO_ADDR
// sTank := false ;
5545: LD_ADDR_EXP 61
5549: PUSH
5550: LD_INT 0
5552: ST_TO_ADDR
// sRemote := false ;
5553: LD_ADDR_EXP 62
5557: PUSH
5558: LD_INT 0
5560: ST_TO_ADDR
// sPowell := false ;
5561: LD_ADDR_EXP 63
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
// sTeleport := false ;
5569: LD_ADDR_EXP 66
5573: PUSH
5574: LD_INT 0
5576: ST_TO_ADDR
// sOilTower := false ;
5577: LD_ADDR_EXP 68
5581: PUSH
5582: LD_INT 0
5584: ST_TO_ADDR
// sShovel := false ;
5585: LD_ADDR_EXP 69
5589: PUSH
5590: LD_INT 0
5592: ST_TO_ADDR
// sSheik := false ;
5593: LD_ADDR_EXP 70
5597: PUSH
5598: LD_INT 0
5600: ST_TO_ADDR
// sEarthquake := false ;
5601: LD_ADDR_EXP 72
5605: PUSH
5606: LD_INT 0
5608: ST_TO_ADDR
// sAI := false ;
5609: LD_ADDR_EXP 73
5613: PUSH
5614: LD_INT 0
5616: ST_TO_ADDR
// sCargo := false ;
5617: LD_ADDR_EXP 76
5621: PUSH
5622: LD_INT 0
5624: ST_TO_ADDR
// sDLaser := false ;
5625: LD_ADDR_EXP 77
5629: PUSH
5630: LD_INT 0
5632: ST_TO_ADDR
// sExchange := false ;
5633: LD_ADDR_EXP 78
5637: PUSH
5638: LD_INT 0
5640: ST_TO_ADDR
// sFac := false ;
5641: LD_ADDR_EXP 79
5645: PUSH
5646: LD_INT 0
5648: ST_TO_ADDR
// sPower := false ;
5649: LD_ADDR_EXP 80
5653: PUSH
5654: LD_INT 0
5656: ST_TO_ADDR
// sRandom := false ;
5657: LD_ADDR_EXP 81
5661: PUSH
5662: LD_INT 0
5664: ST_TO_ADDR
// sShield := false ;
5665: LD_ADDR_EXP 82
5669: PUSH
5670: LD_INT 0
5672: ST_TO_ADDR
// sTime := false ;
5673: LD_ADDR_EXP 83
5677: PUSH
5678: LD_INT 0
5680: ST_TO_ADDR
// sTools := false ;
5681: LD_ADDR_EXP 84
5685: PUSH
5686: LD_INT 0
5688: ST_TO_ADDR
// sSold := false ;
5689: LD_ADDR_EXP 49
5693: PUSH
5694: LD_INT 0
5696: ST_TO_ADDR
// sDiff := false ;
5697: LD_ADDR_EXP 50
5701: PUSH
5702: LD_INT 0
5704: ST_TO_ADDR
// sFog := false ;
5705: LD_ADDR_EXP 53
5709: PUSH
5710: LD_INT 0
5712: ST_TO_ADDR
// sReset := false ;
5713: LD_ADDR_EXP 54
5717: PUSH
5718: LD_INT 0
5720: ST_TO_ADDR
// sSun := false ;
5721: LD_ADDR_EXP 55
5725: PUSH
5726: LD_INT 0
5728: ST_TO_ADDR
// sTiger := false ;
5729: LD_ADDR_EXP 51
5733: PUSH
5734: LD_INT 0
5736: ST_TO_ADDR
// sBomb := false ;
5737: LD_ADDR_EXP 52
5741: PUSH
5742: LD_INT 0
5744: ST_TO_ADDR
// sWound := false ;
5745: LD_ADDR_EXP 60
5749: PUSH
5750: LD_INT 0
5752: ST_TO_ADDR
// sBetray := false ;
5753: LD_ADDR_EXP 64
5757: PUSH
5758: LD_INT 0
5760: ST_TO_ADDR
// sContamin := false ;
5761: LD_ADDR_EXP 65
5765: PUSH
5766: LD_INT 0
5768: ST_TO_ADDR
// sOil := false ;
5769: LD_ADDR_EXP 67
5773: PUSH
5774: LD_INT 0
5776: ST_TO_ADDR
// sStu := false ;
5777: LD_ADDR_EXP 71
5781: PUSH
5782: LD_INT 0
5784: ST_TO_ADDR
// sBazooka := false ;
5785: LD_ADDR_EXP 74
5789: PUSH
5790: LD_INT 0
5792: ST_TO_ADDR
// sMortar := false ;
5793: LD_ADDR_EXP 75
5797: PUSH
5798: LD_INT 0
5800: ST_TO_ADDR
// sRanger := false ;
5801: LD_ADDR_EXP 85
5805: PUSH
5806: LD_INT 0
5808: ST_TO_ADDR
// sComputer := false ;
5809: LD_ADDR_EXP 86
5813: PUSH
5814: LD_INT 0
5816: ST_TO_ADDR
// s30 := false ;
5817: LD_ADDR_EXP 87
5821: PUSH
5822: LD_INT 0
5824: ST_TO_ADDR
// s60 := false ;
5825: LD_ADDR_EXP 88
5829: PUSH
5830: LD_INT 0
5832: ST_TO_ADDR
// end ;
5833: LD_VAR 0 1
5837: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5838: LD_INT 0
5840: PPUSH
5841: PPUSH
5842: PPUSH
5843: PPUSH
5844: PPUSH
// result := [ ] ;
5845: LD_ADDR_VAR 0 1
5849: PUSH
5850: EMPTY
5851: ST_TO_ADDR
// if campaign_id = 1 then
5852: LD_OWVAR 69
5856: PUSH
5857: LD_INT 1
5859: EQUAL
5860: IFFALSE 9026
// begin case mission_number of 1 :
5862: LD_OWVAR 70
5866: PUSH
5867: LD_INT 1
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5875
5873: GO 5951
5875: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5876: LD_ADDR_VAR 0 1
5880: PUSH
5881: LD_INT 2
5883: PUSH
5884: LD_INT 4
5886: PUSH
5887: LD_INT 11
5889: PUSH
5890: LD_INT 12
5892: PUSH
5893: LD_INT 15
5895: PUSH
5896: LD_INT 16
5898: PUSH
5899: LD_INT 22
5901: PUSH
5902: LD_INT 23
5904: PUSH
5905: LD_INT 26
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 101
5921: PUSH
5922: LD_INT 102
5924: PUSH
5925: LD_INT 106
5927: PUSH
5928: LD_INT 116
5930: PUSH
5931: LD_INT 117
5933: PUSH
5934: LD_INT 118
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: ST_TO_ADDR
5949: GO 9024
5951: LD_INT 2
5953: DOUBLE
5954: EQUAL
5955: IFTRUE 5959
5957: GO 6043
5959: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
5960: LD_ADDR_VAR 0 1
5964: PUSH
5965: LD_INT 2
5967: PUSH
5968: LD_INT 4
5970: PUSH
5971: LD_INT 11
5973: PUSH
5974: LD_INT 12
5976: PUSH
5977: LD_INT 15
5979: PUSH
5980: LD_INT 16
5982: PUSH
5983: LD_INT 22
5985: PUSH
5986: LD_INT 23
5988: PUSH
5989: LD_INT 26
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: PUSH
6003: LD_INT 101
6005: PUSH
6006: LD_INT 102
6008: PUSH
6009: LD_INT 105
6011: PUSH
6012: LD_INT 106
6014: PUSH
6015: LD_INT 108
6017: PUSH
6018: LD_INT 116
6020: PUSH
6021: LD_INT 117
6023: PUSH
6024: LD_INT 118
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: ST_TO_ADDR
6041: GO 9024
6043: LD_INT 3
6045: DOUBLE
6046: EQUAL
6047: IFTRUE 6051
6049: GO 6139
6051: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6052: LD_ADDR_VAR 0 1
6056: PUSH
6057: LD_INT 2
6059: PUSH
6060: LD_INT 4
6062: PUSH
6063: LD_INT 5
6065: PUSH
6066: LD_INT 11
6068: PUSH
6069: LD_INT 12
6071: PUSH
6072: LD_INT 15
6074: PUSH
6075: LD_INT 16
6077: PUSH
6078: LD_INT 22
6080: PUSH
6081: LD_INT 26
6083: PUSH
6084: LD_INT 36
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 101
6101: PUSH
6102: LD_INT 102
6104: PUSH
6105: LD_INT 105
6107: PUSH
6108: LD_INT 106
6110: PUSH
6111: LD_INT 108
6113: PUSH
6114: LD_INT 116
6116: PUSH
6117: LD_INT 117
6119: PUSH
6120: LD_INT 118
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: ST_TO_ADDR
6137: GO 9024
6139: LD_INT 4
6141: DOUBLE
6142: EQUAL
6143: IFTRUE 6147
6145: GO 6243
6147: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6148: LD_ADDR_VAR 0 1
6152: PUSH
6153: LD_INT 2
6155: PUSH
6156: LD_INT 4
6158: PUSH
6159: LD_INT 5
6161: PUSH
6162: LD_INT 8
6164: PUSH
6165: LD_INT 11
6167: PUSH
6168: LD_INT 12
6170: PUSH
6171: LD_INT 15
6173: PUSH
6174: LD_INT 16
6176: PUSH
6177: LD_INT 22
6179: PUSH
6180: LD_INT 23
6182: PUSH
6183: LD_INT 26
6185: PUSH
6186: LD_INT 36
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 101
6205: PUSH
6206: LD_INT 102
6208: PUSH
6209: LD_INT 105
6211: PUSH
6212: LD_INT 106
6214: PUSH
6215: LD_INT 108
6217: PUSH
6218: LD_INT 116
6220: PUSH
6221: LD_INT 117
6223: PUSH
6224: LD_INT 118
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: ST_TO_ADDR
6241: GO 9024
6243: LD_INT 5
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6251
6249: GO 6363
6251: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6252: LD_ADDR_VAR 0 1
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: LD_INT 4
6262: PUSH
6263: LD_INT 5
6265: PUSH
6266: LD_INT 6
6268: PUSH
6269: LD_INT 8
6271: PUSH
6272: LD_INT 11
6274: PUSH
6275: LD_INT 12
6277: PUSH
6278: LD_INT 15
6280: PUSH
6281: LD_INT 16
6283: PUSH
6284: LD_INT 22
6286: PUSH
6287: LD_INT 23
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 26
6295: PUSH
6296: LD_INT 36
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 101
6317: PUSH
6318: LD_INT 102
6320: PUSH
6321: LD_INT 105
6323: PUSH
6324: LD_INT 106
6326: PUSH
6327: LD_INT 108
6329: PUSH
6330: LD_INT 109
6332: PUSH
6333: LD_INT 112
6335: PUSH
6336: LD_INT 116
6338: PUSH
6339: LD_INT 117
6341: PUSH
6342: LD_INT 118
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: ST_TO_ADDR
6361: GO 9024
6363: LD_INT 6
6365: DOUBLE
6366: EQUAL
6367: IFTRUE 6371
6369: GO 6503
6371: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6372: LD_ADDR_VAR 0 1
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: LD_INT 4
6382: PUSH
6383: LD_INT 5
6385: PUSH
6386: LD_INT 6
6388: PUSH
6389: LD_INT 8
6391: PUSH
6392: LD_INT 11
6394: PUSH
6395: LD_INT 12
6397: PUSH
6398: LD_INT 15
6400: PUSH
6401: LD_INT 16
6403: PUSH
6404: LD_INT 20
6406: PUSH
6407: LD_INT 21
6409: PUSH
6410: LD_INT 22
6412: PUSH
6413: LD_INT 23
6415: PUSH
6416: LD_INT 25
6418: PUSH
6419: LD_INT 26
6421: PUSH
6422: LD_INT 30
6424: PUSH
6425: LD_INT 31
6427: PUSH
6428: LD_INT 32
6430: PUSH
6431: LD_INT 36
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 101
6457: PUSH
6458: LD_INT 102
6460: PUSH
6461: LD_INT 105
6463: PUSH
6464: LD_INT 106
6466: PUSH
6467: LD_INT 108
6469: PUSH
6470: LD_INT 109
6472: PUSH
6473: LD_INT 112
6475: PUSH
6476: LD_INT 116
6478: PUSH
6479: LD_INT 117
6481: PUSH
6482: LD_INT 118
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: ST_TO_ADDR
6501: GO 9024
6503: LD_INT 7
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6623
6511: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6512: LD_ADDR_VAR 0 1
6516: PUSH
6517: LD_INT 2
6519: PUSH
6520: LD_INT 4
6522: PUSH
6523: LD_INT 5
6525: PUSH
6526: LD_INT 7
6528: PUSH
6529: LD_INT 11
6531: PUSH
6532: LD_INT 12
6534: PUSH
6535: LD_INT 15
6537: PUSH
6538: LD_INT 16
6540: PUSH
6541: LD_INT 20
6543: PUSH
6544: LD_INT 21
6546: PUSH
6547: LD_INT 22
6549: PUSH
6550: LD_INT 23
6552: PUSH
6553: LD_INT 25
6555: PUSH
6556: LD_INT 26
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 101
6577: PUSH
6578: LD_INT 102
6580: PUSH
6581: LD_INT 103
6583: PUSH
6584: LD_INT 105
6586: PUSH
6587: LD_INT 106
6589: PUSH
6590: LD_INT 108
6592: PUSH
6593: LD_INT 112
6595: PUSH
6596: LD_INT 116
6598: PUSH
6599: LD_INT 117
6601: PUSH
6602: LD_INT 118
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: ST_TO_ADDR
6621: GO 9024
6623: LD_INT 8
6625: DOUBLE
6626: EQUAL
6627: IFTRUE 6631
6629: GO 6771
6631: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6632: LD_ADDR_VAR 0 1
6636: PUSH
6637: LD_INT 2
6639: PUSH
6640: LD_INT 4
6642: PUSH
6643: LD_INT 5
6645: PUSH
6646: LD_INT 6
6648: PUSH
6649: LD_INT 7
6651: PUSH
6652: LD_INT 8
6654: PUSH
6655: LD_INT 11
6657: PUSH
6658: LD_INT 12
6660: PUSH
6661: LD_INT 15
6663: PUSH
6664: LD_INT 16
6666: PUSH
6667: LD_INT 20
6669: PUSH
6670: LD_INT 21
6672: PUSH
6673: LD_INT 22
6675: PUSH
6676: LD_INT 23
6678: PUSH
6679: LD_INT 25
6681: PUSH
6682: LD_INT 26
6684: PUSH
6685: LD_INT 30
6687: PUSH
6688: LD_INT 31
6690: PUSH
6691: LD_INT 32
6693: PUSH
6694: LD_INT 36
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 101
6721: PUSH
6722: LD_INT 102
6724: PUSH
6725: LD_INT 103
6727: PUSH
6728: LD_INT 105
6730: PUSH
6731: LD_INT 106
6733: PUSH
6734: LD_INT 108
6736: PUSH
6737: LD_INT 109
6739: PUSH
6740: LD_INT 112
6742: PUSH
6743: LD_INT 116
6745: PUSH
6746: LD_INT 117
6748: PUSH
6749: LD_INT 118
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: ST_TO_ADDR
6769: GO 9024
6771: LD_INT 9
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6927
6779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6780: LD_ADDR_VAR 0 1
6784: PUSH
6785: LD_INT 2
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: LD_INT 6
6796: PUSH
6797: LD_INT 7
6799: PUSH
6800: LD_INT 8
6802: PUSH
6803: LD_INT 11
6805: PUSH
6806: LD_INT 12
6808: PUSH
6809: LD_INT 15
6811: PUSH
6812: LD_INT 16
6814: PUSH
6815: LD_INT 20
6817: PUSH
6818: LD_INT 21
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 25
6829: PUSH
6830: LD_INT 26
6832: PUSH
6833: LD_INT 28
6835: PUSH
6836: LD_INT 30
6838: PUSH
6839: LD_INT 31
6841: PUSH
6842: LD_INT 32
6844: PUSH
6845: LD_INT 36
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 101
6873: PUSH
6874: LD_INT 102
6876: PUSH
6877: LD_INT 103
6879: PUSH
6880: LD_INT 105
6882: PUSH
6883: LD_INT 106
6885: PUSH
6886: LD_INT 108
6888: PUSH
6889: LD_INT 109
6891: PUSH
6892: LD_INT 112
6894: PUSH
6895: LD_INT 114
6897: PUSH
6898: LD_INT 116
6900: PUSH
6901: LD_INT 117
6903: PUSH
6904: LD_INT 118
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: ST_TO_ADDR
6925: GO 9024
6927: LD_INT 10
6929: DOUBLE
6930: EQUAL
6931: IFTRUE 6935
6933: GO 7131
6935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
6936: LD_ADDR_VAR 0 1
6940: PUSH
6941: LD_INT 2
6943: PUSH
6944: LD_INT 4
6946: PUSH
6947: LD_INT 5
6949: PUSH
6950: LD_INT 6
6952: PUSH
6953: LD_INT 7
6955: PUSH
6956: LD_INT 8
6958: PUSH
6959: LD_INT 9
6961: PUSH
6962: LD_INT 10
6964: PUSH
6965: LD_INT 11
6967: PUSH
6968: LD_INT 12
6970: PUSH
6971: LD_INT 13
6973: PUSH
6974: LD_INT 14
6976: PUSH
6977: LD_INT 15
6979: PUSH
6980: LD_INT 16
6982: PUSH
6983: LD_INT 17
6985: PUSH
6986: LD_INT 18
6988: PUSH
6989: LD_INT 19
6991: PUSH
6992: LD_INT 20
6994: PUSH
6995: LD_INT 21
6997: PUSH
6998: LD_INT 22
7000: PUSH
7001: LD_INT 23
7003: PUSH
7004: LD_INT 24
7006: PUSH
7007: LD_INT 25
7009: PUSH
7010: LD_INT 26
7012: PUSH
7013: LD_INT 28
7015: PUSH
7016: LD_INT 30
7018: PUSH
7019: LD_INT 31
7021: PUSH
7022: LD_INT 32
7024: PUSH
7025: LD_INT 36
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 101
7061: PUSH
7062: LD_INT 102
7064: PUSH
7065: LD_INT 103
7067: PUSH
7068: LD_INT 104
7070: PUSH
7071: LD_INT 105
7073: PUSH
7074: LD_INT 106
7076: PUSH
7077: LD_INT 107
7079: PUSH
7080: LD_INT 108
7082: PUSH
7083: LD_INT 109
7085: PUSH
7086: LD_INT 110
7088: PUSH
7089: LD_INT 111
7091: PUSH
7092: LD_INT 112
7094: PUSH
7095: LD_INT 114
7097: PUSH
7098: LD_INT 116
7100: PUSH
7101: LD_INT 117
7103: PUSH
7104: LD_INT 118
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: ST_TO_ADDR
7129: GO 9024
7131: LD_INT 11
7133: DOUBLE
7134: EQUAL
7135: IFTRUE 7139
7137: GO 7343
7139: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7140: LD_ADDR_VAR 0 1
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: LD_INT 3
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: LD_INT 5
7156: PUSH
7157: LD_INT 6
7159: PUSH
7160: LD_INT 7
7162: PUSH
7163: LD_INT 8
7165: PUSH
7166: LD_INT 9
7168: PUSH
7169: LD_INT 10
7171: PUSH
7172: LD_INT 11
7174: PUSH
7175: LD_INT 12
7177: PUSH
7178: LD_INT 13
7180: PUSH
7181: LD_INT 14
7183: PUSH
7184: LD_INT 15
7186: PUSH
7187: LD_INT 16
7189: PUSH
7190: LD_INT 17
7192: PUSH
7193: LD_INT 18
7195: PUSH
7196: LD_INT 19
7198: PUSH
7199: LD_INT 20
7201: PUSH
7202: LD_INT 21
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: LD_INT 23
7210: PUSH
7211: LD_INT 24
7213: PUSH
7214: LD_INT 25
7216: PUSH
7217: LD_INT 26
7219: PUSH
7220: LD_INT 28
7222: PUSH
7223: LD_INT 30
7225: PUSH
7226: LD_INT 31
7228: PUSH
7229: LD_INT 32
7231: PUSH
7232: LD_INT 34
7234: PUSH
7235: LD_INT 36
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 101
7273: PUSH
7274: LD_INT 102
7276: PUSH
7277: LD_INT 103
7279: PUSH
7280: LD_INT 104
7282: PUSH
7283: LD_INT 105
7285: PUSH
7286: LD_INT 106
7288: PUSH
7289: LD_INT 107
7291: PUSH
7292: LD_INT 108
7294: PUSH
7295: LD_INT 109
7297: PUSH
7298: LD_INT 110
7300: PUSH
7301: LD_INT 111
7303: PUSH
7304: LD_INT 112
7306: PUSH
7307: LD_INT 114
7309: PUSH
7310: LD_INT 116
7312: PUSH
7313: LD_INT 117
7315: PUSH
7316: LD_INT 118
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: ST_TO_ADDR
7341: GO 9024
7343: LD_INT 12
7345: DOUBLE
7346: EQUAL
7347: IFTRUE 7351
7349: GO 7571
7351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7352: LD_ADDR_VAR 0 1
7356: PUSH
7357: LD_INT 1
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 3
7365: PUSH
7366: LD_INT 4
7368: PUSH
7369: LD_INT 5
7371: PUSH
7372: LD_INT 6
7374: PUSH
7375: LD_INT 7
7377: PUSH
7378: LD_INT 8
7380: PUSH
7381: LD_INT 9
7383: PUSH
7384: LD_INT 10
7386: PUSH
7387: LD_INT 11
7389: PUSH
7390: LD_INT 12
7392: PUSH
7393: LD_INT 13
7395: PUSH
7396: LD_INT 14
7398: PUSH
7399: LD_INT 15
7401: PUSH
7402: LD_INT 16
7404: PUSH
7405: LD_INT 17
7407: PUSH
7408: LD_INT 18
7410: PUSH
7411: LD_INT 19
7413: PUSH
7414: LD_INT 20
7416: PUSH
7417: LD_INT 21
7419: PUSH
7420: LD_INT 22
7422: PUSH
7423: LD_INT 23
7425: PUSH
7426: LD_INT 24
7428: PUSH
7429: LD_INT 25
7431: PUSH
7432: LD_INT 26
7434: PUSH
7435: LD_INT 27
7437: PUSH
7438: LD_INT 28
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 31
7446: PUSH
7447: LD_INT 32
7449: PUSH
7450: LD_INT 33
7452: PUSH
7453: LD_INT 34
7455: PUSH
7456: LD_INT 36
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 101
7497: PUSH
7498: LD_INT 102
7500: PUSH
7501: LD_INT 103
7503: PUSH
7504: LD_INT 104
7506: PUSH
7507: LD_INT 105
7509: PUSH
7510: LD_INT 106
7512: PUSH
7513: LD_INT 107
7515: PUSH
7516: LD_INT 108
7518: PUSH
7519: LD_INT 109
7521: PUSH
7522: LD_INT 110
7524: PUSH
7525: LD_INT 111
7527: PUSH
7528: LD_INT 112
7530: PUSH
7531: LD_INT 113
7533: PUSH
7534: LD_INT 114
7536: PUSH
7537: LD_INT 116
7539: PUSH
7540: LD_INT 117
7542: PUSH
7543: LD_INT 118
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: ST_TO_ADDR
7569: GO 9024
7571: LD_INT 13
7573: DOUBLE
7574: EQUAL
7575: IFTRUE 7579
7577: GO 7787
7579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7580: LD_ADDR_VAR 0 1
7584: PUSH
7585: LD_INT 1
7587: PUSH
7588: LD_INT 2
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: LD_INT 4
7596: PUSH
7597: LD_INT 5
7599: PUSH
7600: LD_INT 8
7602: PUSH
7603: LD_INT 9
7605: PUSH
7606: LD_INT 10
7608: PUSH
7609: LD_INT 11
7611: PUSH
7612: LD_INT 12
7614: PUSH
7615: LD_INT 14
7617: PUSH
7618: LD_INT 15
7620: PUSH
7621: LD_INT 16
7623: PUSH
7624: LD_INT 17
7626: PUSH
7627: LD_INT 18
7629: PUSH
7630: LD_INT 19
7632: PUSH
7633: LD_INT 20
7635: PUSH
7636: LD_INT 21
7638: PUSH
7639: LD_INT 22
7641: PUSH
7642: LD_INT 23
7644: PUSH
7645: LD_INT 24
7647: PUSH
7648: LD_INT 25
7650: PUSH
7651: LD_INT 26
7653: PUSH
7654: LD_INT 27
7656: PUSH
7657: LD_INT 28
7659: PUSH
7660: LD_INT 30
7662: PUSH
7663: LD_INT 31
7665: PUSH
7666: LD_INT 32
7668: PUSH
7669: LD_INT 33
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 36
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 101
7713: PUSH
7714: LD_INT 102
7716: PUSH
7717: LD_INT 103
7719: PUSH
7720: LD_INT 104
7722: PUSH
7723: LD_INT 105
7725: PUSH
7726: LD_INT 106
7728: PUSH
7729: LD_INT 107
7731: PUSH
7732: LD_INT 108
7734: PUSH
7735: LD_INT 109
7737: PUSH
7738: LD_INT 110
7740: PUSH
7741: LD_INT 111
7743: PUSH
7744: LD_INT 112
7746: PUSH
7747: LD_INT 113
7749: PUSH
7750: LD_INT 114
7752: PUSH
7753: LD_INT 116
7755: PUSH
7756: LD_INT 117
7758: PUSH
7759: LD_INT 118
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: ST_TO_ADDR
7785: GO 9024
7787: LD_INT 14
7789: DOUBLE
7790: EQUAL
7791: IFTRUE 7795
7793: GO 8019
7795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7796: LD_ADDR_VAR 0 1
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 2
7806: PUSH
7807: LD_INT 3
7809: PUSH
7810: LD_INT 4
7812: PUSH
7813: LD_INT 5
7815: PUSH
7816: LD_INT 6
7818: PUSH
7819: LD_INT 7
7821: PUSH
7822: LD_INT 8
7824: PUSH
7825: LD_INT 9
7827: PUSH
7828: LD_INT 10
7830: PUSH
7831: LD_INT 11
7833: PUSH
7834: LD_INT 12
7836: PUSH
7837: LD_INT 13
7839: PUSH
7840: LD_INT 14
7842: PUSH
7843: LD_INT 15
7845: PUSH
7846: LD_INT 16
7848: PUSH
7849: LD_INT 17
7851: PUSH
7852: LD_INT 18
7854: PUSH
7855: LD_INT 19
7857: PUSH
7858: LD_INT 20
7860: PUSH
7861: LD_INT 21
7863: PUSH
7864: LD_INT 22
7866: PUSH
7867: LD_INT 23
7869: PUSH
7870: LD_INT 24
7872: PUSH
7873: LD_INT 25
7875: PUSH
7876: LD_INT 26
7878: PUSH
7879: LD_INT 27
7881: PUSH
7882: LD_INT 28
7884: PUSH
7885: LD_INT 29
7887: PUSH
7888: LD_INT 30
7890: PUSH
7891: LD_INT 31
7893: PUSH
7894: LD_INT 32
7896: PUSH
7897: LD_INT 33
7899: PUSH
7900: LD_INT 34
7902: PUSH
7903: LD_INT 36
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 101
7945: PUSH
7946: LD_INT 102
7948: PUSH
7949: LD_INT 103
7951: PUSH
7952: LD_INT 104
7954: PUSH
7955: LD_INT 105
7957: PUSH
7958: LD_INT 106
7960: PUSH
7961: LD_INT 107
7963: PUSH
7964: LD_INT 108
7966: PUSH
7967: LD_INT 109
7969: PUSH
7970: LD_INT 110
7972: PUSH
7973: LD_INT 111
7975: PUSH
7976: LD_INT 112
7978: PUSH
7979: LD_INT 113
7981: PUSH
7982: LD_INT 114
7984: PUSH
7985: LD_INT 116
7987: PUSH
7988: LD_INT 117
7990: PUSH
7991: LD_INT 118
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: ST_TO_ADDR
8017: GO 9024
8019: LD_INT 15
8021: DOUBLE
8022: EQUAL
8023: IFTRUE 8027
8025: GO 8251
8027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8028: LD_ADDR_VAR 0 1
8032: PUSH
8033: LD_INT 1
8035: PUSH
8036: LD_INT 2
8038: PUSH
8039: LD_INT 3
8041: PUSH
8042: LD_INT 4
8044: PUSH
8045: LD_INT 5
8047: PUSH
8048: LD_INT 6
8050: PUSH
8051: LD_INT 7
8053: PUSH
8054: LD_INT 8
8056: PUSH
8057: LD_INT 9
8059: PUSH
8060: LD_INT 10
8062: PUSH
8063: LD_INT 11
8065: PUSH
8066: LD_INT 12
8068: PUSH
8069: LD_INT 13
8071: PUSH
8072: LD_INT 14
8074: PUSH
8075: LD_INT 15
8077: PUSH
8078: LD_INT 16
8080: PUSH
8081: LD_INT 17
8083: PUSH
8084: LD_INT 18
8086: PUSH
8087: LD_INT 19
8089: PUSH
8090: LD_INT 20
8092: PUSH
8093: LD_INT 21
8095: PUSH
8096: LD_INT 22
8098: PUSH
8099: LD_INT 23
8101: PUSH
8102: LD_INT 24
8104: PUSH
8105: LD_INT 25
8107: PUSH
8108: LD_INT 26
8110: PUSH
8111: LD_INT 27
8113: PUSH
8114: LD_INT 28
8116: PUSH
8117: LD_INT 29
8119: PUSH
8120: LD_INT 30
8122: PUSH
8123: LD_INT 31
8125: PUSH
8126: LD_INT 32
8128: PUSH
8129: LD_INT 33
8131: PUSH
8132: LD_INT 34
8134: PUSH
8135: LD_INT 36
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: PUSH
8175: LD_INT 101
8177: PUSH
8178: LD_INT 102
8180: PUSH
8181: LD_INT 103
8183: PUSH
8184: LD_INT 104
8186: PUSH
8187: LD_INT 105
8189: PUSH
8190: LD_INT 106
8192: PUSH
8193: LD_INT 107
8195: PUSH
8196: LD_INT 108
8198: PUSH
8199: LD_INT 109
8201: PUSH
8202: LD_INT 110
8204: PUSH
8205: LD_INT 111
8207: PUSH
8208: LD_INT 112
8210: PUSH
8211: LD_INT 113
8213: PUSH
8214: LD_INT 114
8216: PUSH
8217: LD_INT 116
8219: PUSH
8220: LD_INT 117
8222: PUSH
8223: LD_INT 118
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: ST_TO_ADDR
8249: GO 9024
8251: LD_INT 16
8253: DOUBLE
8254: EQUAL
8255: IFTRUE 8259
8257: GO 8395
8259: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8260: LD_ADDR_VAR 0 1
8264: PUSH
8265: LD_INT 2
8267: PUSH
8268: LD_INT 4
8270: PUSH
8271: LD_INT 5
8273: PUSH
8274: LD_INT 7
8276: PUSH
8277: LD_INT 11
8279: PUSH
8280: LD_INT 12
8282: PUSH
8283: LD_INT 15
8285: PUSH
8286: LD_INT 16
8288: PUSH
8289: LD_INT 20
8291: PUSH
8292: LD_INT 21
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_INT 23
8300: PUSH
8301: LD_INT 25
8303: PUSH
8304: LD_INT 26
8306: PUSH
8307: LD_INT 30
8309: PUSH
8310: LD_INT 31
8312: PUSH
8313: LD_INT 32
8315: PUSH
8316: LD_INT 33
8318: PUSH
8319: LD_INT 34
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 101
8345: PUSH
8346: LD_INT 102
8348: PUSH
8349: LD_INT 103
8351: PUSH
8352: LD_INT 106
8354: PUSH
8355: LD_INT 108
8357: PUSH
8358: LD_INT 112
8360: PUSH
8361: LD_INT 113
8363: PUSH
8364: LD_INT 114
8366: PUSH
8367: LD_INT 116
8369: PUSH
8370: LD_INT 117
8372: PUSH
8373: LD_INT 118
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: ST_TO_ADDR
8393: GO 9024
8395: LD_INT 17
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8627
8403: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8404: LD_ADDR_VAR 0 1
8408: PUSH
8409: LD_INT 1
8411: PUSH
8412: LD_INT 2
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: LD_INT 4
8420: PUSH
8421: LD_INT 5
8423: PUSH
8424: LD_INT 6
8426: PUSH
8427: LD_INT 7
8429: PUSH
8430: LD_INT 8
8432: PUSH
8433: LD_INT 9
8435: PUSH
8436: LD_INT 10
8438: PUSH
8439: LD_INT 11
8441: PUSH
8442: LD_INT 12
8444: PUSH
8445: LD_INT 13
8447: PUSH
8448: LD_INT 14
8450: PUSH
8451: LD_INT 15
8453: PUSH
8454: LD_INT 16
8456: PUSH
8457: LD_INT 17
8459: PUSH
8460: LD_INT 18
8462: PUSH
8463: LD_INT 19
8465: PUSH
8466: LD_INT 20
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 22
8474: PUSH
8475: LD_INT 23
8477: PUSH
8478: LD_INT 24
8480: PUSH
8481: LD_INT 25
8483: PUSH
8484: LD_INT 26
8486: PUSH
8487: LD_INT 27
8489: PUSH
8490: LD_INT 28
8492: PUSH
8493: LD_INT 29
8495: PUSH
8496: LD_INT 30
8498: PUSH
8499: LD_INT 31
8501: PUSH
8502: LD_INT 32
8504: PUSH
8505: LD_INT 33
8507: PUSH
8508: LD_INT 34
8510: PUSH
8511: LD_INT 36
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 101
8553: PUSH
8554: LD_INT 102
8556: PUSH
8557: LD_INT 103
8559: PUSH
8560: LD_INT 104
8562: PUSH
8563: LD_INT 105
8565: PUSH
8566: LD_INT 106
8568: PUSH
8569: LD_INT 107
8571: PUSH
8572: LD_INT 108
8574: PUSH
8575: LD_INT 109
8577: PUSH
8578: LD_INT 110
8580: PUSH
8581: LD_INT 111
8583: PUSH
8584: LD_INT 112
8586: PUSH
8587: LD_INT 113
8589: PUSH
8590: LD_INT 114
8592: PUSH
8593: LD_INT 116
8595: PUSH
8596: LD_INT 117
8598: PUSH
8599: LD_INT 118
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: ST_TO_ADDR
8625: GO 9024
8627: LD_INT 18
8629: DOUBLE
8630: EQUAL
8631: IFTRUE 8635
8633: GO 8783
8635: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8636: LD_ADDR_VAR 0 1
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: LD_INT 4
8646: PUSH
8647: LD_INT 5
8649: PUSH
8650: LD_INT 7
8652: PUSH
8653: LD_INT 11
8655: PUSH
8656: LD_INT 12
8658: PUSH
8659: LD_INT 15
8661: PUSH
8662: LD_INT 16
8664: PUSH
8665: LD_INT 20
8667: PUSH
8668: LD_INT 21
8670: PUSH
8671: LD_INT 22
8673: PUSH
8674: LD_INT 23
8676: PUSH
8677: LD_INT 25
8679: PUSH
8680: LD_INT 26
8682: PUSH
8683: LD_INT 30
8685: PUSH
8686: LD_INT 31
8688: PUSH
8689: LD_INT 32
8691: PUSH
8692: LD_INT 33
8694: PUSH
8695: LD_INT 34
8697: PUSH
8698: LD_INT 35
8700: PUSH
8701: LD_INT 36
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 101
8729: PUSH
8730: LD_INT 102
8732: PUSH
8733: LD_INT 103
8735: PUSH
8736: LD_INT 106
8738: PUSH
8739: LD_INT 108
8741: PUSH
8742: LD_INT 112
8744: PUSH
8745: LD_INT 113
8747: PUSH
8748: LD_INT 114
8750: PUSH
8751: LD_INT 115
8753: PUSH
8754: LD_INT 116
8756: PUSH
8757: LD_INT 117
8759: PUSH
8760: LD_INT 118
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: ST_TO_ADDR
8781: GO 9024
8783: LD_INT 19
8785: DOUBLE
8786: EQUAL
8787: IFTRUE 8791
8789: GO 9023
8791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8792: LD_ADDR_VAR 0 1
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: LD_INT 2
8802: PUSH
8803: LD_INT 3
8805: PUSH
8806: LD_INT 4
8808: PUSH
8809: LD_INT 5
8811: PUSH
8812: LD_INT 6
8814: PUSH
8815: LD_INT 7
8817: PUSH
8818: LD_INT 8
8820: PUSH
8821: LD_INT 9
8823: PUSH
8824: LD_INT 10
8826: PUSH
8827: LD_INT 11
8829: PUSH
8830: LD_INT 12
8832: PUSH
8833: LD_INT 13
8835: PUSH
8836: LD_INT 14
8838: PUSH
8839: LD_INT 15
8841: PUSH
8842: LD_INT 16
8844: PUSH
8845: LD_INT 17
8847: PUSH
8848: LD_INT 18
8850: PUSH
8851: LD_INT 19
8853: PUSH
8854: LD_INT 20
8856: PUSH
8857: LD_INT 21
8859: PUSH
8860: LD_INT 22
8862: PUSH
8863: LD_INT 23
8865: PUSH
8866: LD_INT 24
8868: PUSH
8869: LD_INT 25
8871: PUSH
8872: LD_INT 26
8874: PUSH
8875: LD_INT 27
8877: PUSH
8878: LD_INT 28
8880: PUSH
8881: LD_INT 29
8883: PUSH
8884: LD_INT 30
8886: PUSH
8887: LD_INT 31
8889: PUSH
8890: LD_INT 32
8892: PUSH
8893: LD_INT 33
8895: PUSH
8896: LD_INT 34
8898: PUSH
8899: LD_INT 35
8901: PUSH
8902: LD_INT 36
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 101
8945: PUSH
8946: LD_INT 102
8948: PUSH
8949: LD_INT 103
8951: PUSH
8952: LD_INT 104
8954: PUSH
8955: LD_INT 105
8957: PUSH
8958: LD_INT 106
8960: PUSH
8961: LD_INT 107
8963: PUSH
8964: LD_INT 108
8966: PUSH
8967: LD_INT 109
8969: PUSH
8970: LD_INT 110
8972: PUSH
8973: LD_INT 111
8975: PUSH
8976: LD_INT 112
8978: PUSH
8979: LD_INT 113
8981: PUSH
8982: LD_INT 114
8984: PUSH
8985: LD_INT 115
8987: PUSH
8988: LD_INT 116
8990: PUSH
8991: LD_INT 117
8993: PUSH
8994: LD_INT 118
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: ST_TO_ADDR
9021: GO 9024
9023: POP
// end else
9024: GO 9255
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9026: LD_ADDR_VAR 0 1
9030: PUSH
9031: LD_INT 1
9033: PUSH
9034: LD_INT 2
9036: PUSH
9037: LD_INT 3
9039: PUSH
9040: LD_INT 4
9042: PUSH
9043: LD_INT 5
9045: PUSH
9046: LD_INT 6
9048: PUSH
9049: LD_INT 7
9051: PUSH
9052: LD_INT 8
9054: PUSH
9055: LD_INT 9
9057: PUSH
9058: LD_INT 10
9060: PUSH
9061: LD_INT 11
9063: PUSH
9064: LD_INT 12
9066: PUSH
9067: LD_INT 13
9069: PUSH
9070: LD_INT 14
9072: PUSH
9073: LD_INT 15
9075: PUSH
9076: LD_INT 16
9078: PUSH
9079: LD_INT 17
9081: PUSH
9082: LD_INT 18
9084: PUSH
9085: LD_INT 19
9087: PUSH
9088: LD_INT 20
9090: PUSH
9091: LD_INT 21
9093: PUSH
9094: LD_INT 22
9096: PUSH
9097: LD_INT 23
9099: PUSH
9100: LD_INT 24
9102: PUSH
9103: LD_INT 25
9105: PUSH
9106: LD_INT 26
9108: PUSH
9109: LD_INT 27
9111: PUSH
9112: LD_INT 28
9114: PUSH
9115: LD_INT 29
9117: PUSH
9118: LD_INT 30
9120: PUSH
9121: LD_INT 31
9123: PUSH
9124: LD_INT 32
9126: PUSH
9127: LD_INT 33
9129: PUSH
9130: LD_INT 34
9132: PUSH
9133: LD_INT 35
9135: PUSH
9136: LD_INT 36
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 101
9179: PUSH
9180: LD_INT 102
9182: PUSH
9183: LD_INT 103
9185: PUSH
9186: LD_INT 104
9188: PUSH
9189: LD_INT 105
9191: PUSH
9192: LD_INT 106
9194: PUSH
9195: LD_INT 107
9197: PUSH
9198: LD_INT 108
9200: PUSH
9201: LD_INT 109
9203: PUSH
9204: LD_INT 110
9206: PUSH
9207: LD_INT 111
9209: PUSH
9210: LD_INT 112
9212: PUSH
9213: LD_INT 113
9215: PUSH
9216: LD_INT 114
9218: PUSH
9219: LD_INT 115
9221: PUSH
9222: LD_INT 116
9224: PUSH
9225: LD_INT 117
9227: PUSH
9228: LD_INT 118
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: ST_TO_ADDR
// if result then
9255: LD_VAR 0 1
9259: IFFALSE 9548
// begin normal :=  ;
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: LD_STRING 
9268: ST_TO_ADDR
// hardcore :=  ;
9269: LD_ADDR_VAR 0 4
9273: PUSH
9274: LD_STRING 
9276: ST_TO_ADDR
// for i = 1 to normalCounter do
9277: LD_ADDR_VAR 0 5
9281: PUSH
9282: DOUBLE
9283: LD_INT 1
9285: DEC
9286: ST_TO_ADDR
9287: LD_EXP 33
9291: PUSH
9292: FOR_TO
9293: IFFALSE 9394
// begin tmp := 0 ;
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_STRING 0
9302: ST_TO_ADDR
// if result [ 1 ] then
9303: LD_VAR 0 1
9307: PUSH
9308: LD_INT 1
9310: ARRAY
9311: IFFALSE 9376
// if result [ 1 ] [ 1 ] = i then
9313: LD_VAR 0 1
9317: PUSH
9318: LD_INT 1
9320: ARRAY
9321: PUSH
9322: LD_INT 1
9324: ARRAY
9325: PUSH
9326: LD_VAR 0 5
9330: EQUAL
9331: IFFALSE 9376
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9333: LD_ADDR_VAR 0 1
9337: PUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: LD_VAR 0 1
9350: PUSH
9351: LD_INT 1
9353: ARRAY
9354: PPUSH
9355: LD_INT 1
9357: PPUSH
9358: CALL_OW 3
9362: PPUSH
9363: CALL_OW 1
9367: ST_TO_ADDR
// tmp := 1 ;
9368: LD_ADDR_VAR 0 2
9372: PUSH
9373: LD_STRING 1
9375: ST_TO_ADDR
// end ; normal := normal & tmp ;
9376: LD_ADDR_VAR 0 3
9380: PUSH
9381: LD_VAR 0 3
9385: PUSH
9386: LD_VAR 0 2
9390: STR
9391: ST_TO_ADDR
// end ;
9392: GO 9292
9394: POP
9395: POP
// for i = 1 to hardcoreCounter do
9396: LD_ADDR_VAR 0 5
9400: PUSH
9401: DOUBLE
9402: LD_INT 1
9404: DEC
9405: ST_TO_ADDR
9406: LD_EXP 34
9410: PUSH
9411: FOR_TO
9412: IFFALSE 9517
// begin tmp := 0 ;
9414: LD_ADDR_VAR 0 2
9418: PUSH
9419: LD_STRING 0
9421: ST_TO_ADDR
// if result [ 2 ] then
9422: LD_VAR 0 1
9426: PUSH
9427: LD_INT 2
9429: ARRAY
9430: IFFALSE 9499
// if result [ 2 ] [ 1 ] = 100 + i then
9432: LD_VAR 0 1
9436: PUSH
9437: LD_INT 2
9439: ARRAY
9440: PUSH
9441: LD_INT 1
9443: ARRAY
9444: PUSH
9445: LD_INT 100
9447: PUSH
9448: LD_VAR 0 5
9452: PLUS
9453: EQUAL
9454: IFFALSE 9499
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9456: LD_ADDR_VAR 0 1
9460: PUSH
9461: LD_VAR 0 1
9465: PPUSH
9466: LD_INT 2
9468: PPUSH
9469: LD_VAR 0 1
9473: PUSH
9474: LD_INT 2
9476: ARRAY
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 3
9485: PPUSH
9486: CALL_OW 1
9490: ST_TO_ADDR
// tmp := 1 ;
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: LD_STRING 1
9498: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9499: LD_ADDR_VAR 0 4
9503: PUSH
9504: LD_VAR 0 4
9508: PUSH
9509: LD_VAR 0 2
9513: STR
9514: ST_TO_ADDR
// end ;
9515: GO 9411
9517: POP
9518: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9519: LD_STRING getStreamItemsFromMission("
9521: PUSH
9522: LD_VAR 0 3
9526: STR
9527: PUSH
9528: LD_STRING ","
9530: STR
9531: PUSH
9532: LD_VAR 0 4
9536: STR
9537: PUSH
9538: LD_STRING ")
9540: STR
9541: PPUSH
9542: CALL_OW 559
// end else
9546: GO 9555
// ToLua ( getStreamItemsFromMission("","") ) ;
9548: LD_STRING getStreamItemsFromMission("","")
9550: PPUSH
9551: CALL_OW 559
// end ;
9555: LD_VAR 0 1
9559: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9560: LD_EXP 32
9564: PUSH
9565: LD_EXP 37
9569: AND
9570: IFFALSE 9694
9572: GO 9574
9574: DISABLE
9575: LD_INT 0
9577: PPUSH
9578: PPUSH
// begin enable ;
9579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9580: LD_ADDR_VAR 0 2
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_OWVAR 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 2
9599: PUSH
9600: LD_INT 34
9602: PUSH
9603: LD_INT 7
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 34
9612: PUSH
9613: LD_INT 45
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 34
9622: PUSH
9623: LD_INT 28
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 34
9632: PUSH
9633: LD_INT 47
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: ST_TO_ADDR
// if not tmp then
9656: LD_VAR 0 2
9660: NOT
9661: IFFALSE 9665
// exit ;
9663: GO 9694
// for i in tmp do
9665: LD_ADDR_VAR 0 1
9669: PUSH
9670: LD_VAR 0 2
9674: PUSH
9675: FOR_IN
9676: IFFALSE 9692
// begin SetLives ( i , 0 ) ;
9678: LD_VAR 0 1
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: CALL_OW 234
// end ;
9690: GO 9675
9692: POP
9693: POP
// end ;
9694: PPOPN 2
9696: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9697: LD_EXP 32
9701: PUSH
9702: LD_EXP 38
9706: AND
9707: IFFALSE 9791
9709: GO 9711
9711: DISABLE
9712: LD_INT 0
9714: PPUSH
9715: PPUSH
// begin enable ;
9716: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9717: LD_ADDR_VAR 0 2
9721: PUSH
9722: LD_INT 22
9724: PUSH
9725: LD_OWVAR 2
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 32
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 69
9752: ST_TO_ADDR
// if not tmp then
9753: LD_VAR 0 2
9757: NOT
9758: IFFALSE 9762
// exit ;
9760: GO 9791
// for i in tmp do
9762: LD_ADDR_VAR 0 1
9766: PUSH
9767: LD_VAR 0 2
9771: PUSH
9772: FOR_IN
9773: IFFALSE 9789
// begin SetLives ( i , 0 ) ;
9775: LD_VAR 0 1
9779: PPUSH
9780: LD_INT 0
9782: PPUSH
9783: CALL_OW 234
// end ;
9787: GO 9772
9789: POP
9790: POP
// end ;
9791: PPOPN 2
9793: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9794: LD_EXP 32
9798: PUSH
9799: LD_EXP 35
9803: AND
9804: IFFALSE 9897
9806: GO 9808
9808: DISABLE
9809: LD_INT 0
9811: PPUSH
// begin enable ;
9812: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9813: LD_ADDR_VAR 0 1
9817: PUSH
9818: LD_INT 22
9820: PUSH
9821: LD_OWVAR 2
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 5
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 25
9845: PUSH
9846: LD_INT 9
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 25
9855: PUSH
9856: LD_INT 8
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 69
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9895
// begin SetClass ( i , 1 ) ;
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_INT 1
9888: PPUSH
9889: CALL_OW 336
// end ;
9893: GO 9878
9895: POP
9896: POP
// end ;
9897: PPOPN 1
9899: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9900: LD_EXP 32
9904: PUSH
9905: LD_EXP 36
9909: AND
9910: PUSH
9911: LD_OWVAR 65
9915: PUSH
9916: LD_INT 7
9918: LESS
9919: AND
9920: IFFALSE 9934
9922: GO 9924
9924: DISABLE
// begin enable ;
9925: ENABLE
// game_speed := 7 ;
9926: LD_ADDR_OWVAR 65
9930: PUSH
9931: LD_INT 7
9933: ST_TO_ADDR
// end ;
9934: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9935: LD_EXP 32
9939: PUSH
9940: LD_EXP 39
9944: AND
9945: IFFALSE 10147
9947: GO 9949
9949: DISABLE
9950: LD_INT 0
9952: PPUSH
9953: PPUSH
9954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9955: LD_ADDR_VAR 0 3
9959: PUSH
9960: LD_INT 81
9962: PUSH
9963: LD_OWVAR 2
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 1
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 69
9990: ST_TO_ADDR
// if not tmp then
9991: LD_VAR 0 3
9995: NOT
9996: IFFALSE 10000
// exit ;
9998: GO 10147
// if tmp > 5 then
10000: LD_VAR 0 3
10004: PUSH
10005: LD_INT 5
10007: GREATER
10008: IFFALSE 10020
// k := 5 else
10010: LD_ADDR_VAR 0 2
10014: PUSH
10015: LD_INT 5
10017: ST_TO_ADDR
10018: GO 10030
// k := tmp ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_VAR 0 3
10029: ST_TO_ADDR
// for i := 1 to k do
10030: LD_ADDR_VAR 0 1
10034: PUSH
10035: DOUBLE
10036: LD_INT 1
10038: DEC
10039: ST_TO_ADDR
10040: LD_VAR 0 2
10044: PUSH
10045: FOR_TO
10046: IFFALSE 10145
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10048: LD_VAR 0 3
10052: PUSH
10053: LD_VAR 0 1
10057: ARRAY
10058: PPUSH
10059: LD_VAR 0 1
10063: PUSH
10064: LD_INT 4
10066: MOD
10067: PUSH
10068: LD_INT 1
10070: PLUS
10071: PPUSH
10072: CALL_OW 259
10076: PUSH
10077: LD_INT 10
10079: LESS
10080: IFFALSE 10143
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10082: LD_VAR 0 3
10086: PUSH
10087: LD_VAR 0 1
10091: ARRAY
10092: PPUSH
10093: LD_VAR 0 1
10097: PUSH
10098: LD_INT 4
10100: MOD
10101: PUSH
10102: LD_INT 1
10104: PLUS
10105: PPUSH
10106: LD_VAR 0 3
10110: PUSH
10111: LD_VAR 0 1
10115: ARRAY
10116: PPUSH
10117: LD_VAR 0 1
10121: PUSH
10122: LD_INT 4
10124: MOD
10125: PUSH
10126: LD_INT 1
10128: PLUS
10129: PPUSH
10130: CALL_OW 259
10134: PUSH
10135: LD_INT 1
10137: PLUS
10138: PPUSH
10139: CALL_OW 237
10143: GO 10045
10145: POP
10146: POP
// end ;
10147: PPOPN 3
10149: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10150: LD_EXP 32
10154: PUSH
10155: LD_EXP 40
10159: AND
10160: IFFALSE 10180
10162: GO 10164
10164: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10165: LD_INT 4
10167: PPUSH
10168: LD_OWVAR 2
10172: PPUSH
10173: LD_INT 0
10175: PPUSH
10176: CALL_OW 324
10180: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10181: LD_EXP 32
10185: PUSH
10186: LD_EXP 69
10190: AND
10191: IFFALSE 10211
10193: GO 10195
10195: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10196: LD_INT 19
10198: PPUSH
10199: LD_OWVAR 2
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 324
10211: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10212: LD_EXP 32
10216: PUSH
10217: LD_EXP 41
10221: AND
10222: IFFALSE 10324
10224: GO 10226
10226: DISABLE
10227: LD_INT 0
10229: PPUSH
10230: PPUSH
// begin enable ;
10231: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10232: LD_ADDR_VAR 0 2
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_OWVAR 2
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 2
10251: PUSH
10252: LD_INT 34
10254: PUSH
10255: LD_INT 11
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 34
10264: PUSH
10265: LD_INT 30
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PPUSH
10281: CALL_OW 69
10285: ST_TO_ADDR
// if not tmp then
10286: LD_VAR 0 2
10290: NOT
10291: IFFALSE 10295
// exit ;
10293: GO 10324
// for i in tmp do
10295: LD_ADDR_VAR 0 1
10299: PUSH
10300: LD_VAR 0 2
10304: PUSH
10305: FOR_IN
10306: IFFALSE 10322
// begin SetLives ( i , 0 ) ;
10308: LD_VAR 0 1
10312: PPUSH
10313: LD_INT 0
10315: PPUSH
10316: CALL_OW 234
// end ;
10320: GO 10305
10322: POP
10323: POP
// end ;
10324: PPOPN 2
10326: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10327: LD_EXP 32
10331: PUSH
10332: LD_EXP 42
10336: AND
10337: IFFALSE 10357
10339: GO 10341
10341: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10342: LD_INT 32
10344: PPUSH
10345: LD_OWVAR 2
10349: PPUSH
10350: LD_INT 0
10352: PPUSH
10353: CALL_OW 324
10357: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10358: LD_EXP 32
10362: PUSH
10363: LD_EXP 43
10367: AND
10368: IFFALSE 10549
10370: GO 10372
10372: DISABLE
10373: LD_INT 0
10375: PPUSH
10376: PPUSH
10377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 22
10385: PUSH
10386: LD_OWVAR 2
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 33
10397: PUSH
10398: LD_INT 3
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PPUSH
10409: CALL_OW 69
10413: ST_TO_ADDR
// if not tmp then
10414: LD_VAR 0 2
10418: NOT
10419: IFFALSE 10423
// exit ;
10421: GO 10549
// side := 0 ;
10423: LD_ADDR_VAR 0 3
10427: PUSH
10428: LD_INT 0
10430: ST_TO_ADDR
// for i := 1 to 8 do
10431: LD_ADDR_VAR 0 1
10435: PUSH
10436: DOUBLE
10437: LD_INT 1
10439: DEC
10440: ST_TO_ADDR
10441: LD_INT 8
10443: PUSH
10444: FOR_TO
10445: IFFALSE 10493
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10447: LD_OWVAR 2
10451: PUSH
10452: LD_VAR 0 1
10456: NONEQUAL
10457: PUSH
10458: LD_OWVAR 2
10462: PPUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: CALL_OW 81
10472: PUSH
10473: LD_INT 2
10475: EQUAL
10476: AND
10477: IFFALSE 10491
// begin side := i ;
10479: LD_ADDR_VAR 0 3
10483: PUSH
10484: LD_VAR 0 1
10488: ST_TO_ADDR
// break ;
10489: GO 10493
// end ;
10491: GO 10444
10493: POP
10494: POP
// if not side then
10495: LD_VAR 0 3
10499: NOT
10500: IFFALSE 10504
// exit ;
10502: GO 10549
// for i := 1 to tmp do
10504: LD_ADDR_VAR 0 1
10508: PUSH
10509: DOUBLE
10510: LD_INT 1
10512: DEC
10513: ST_TO_ADDR
10514: LD_VAR 0 2
10518: PUSH
10519: FOR_TO
10520: IFFALSE 10547
// if Prob ( 60 ) then
10522: LD_INT 60
10524: PPUSH
10525: CALL_OW 13
10529: IFFALSE 10545
// SetSide ( i , side ) ;
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_VAR 0 3
10540: PPUSH
10541: CALL_OW 235
10545: GO 10519
10547: POP
10548: POP
// end ;
10549: PPOPN 3
10551: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10552: LD_EXP 32
10556: PUSH
10557: LD_EXP 45
10561: AND
10562: IFFALSE 10681
10564: GO 10566
10566: DISABLE
10567: LD_INT 0
10569: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10570: LD_ADDR_VAR 0 1
10574: PUSH
10575: LD_INT 22
10577: PUSH
10578: LD_OWVAR 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: PUSH
10587: LD_INT 21
10589: PUSH
10590: LD_INT 1
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 3
10599: PUSH
10600: LD_INT 23
10602: PUSH
10603: LD_INT 0
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PPUSH
10619: CALL_OW 69
10623: PUSH
10624: FOR_IN
10625: IFFALSE 10679
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10627: LD_VAR 0 1
10631: PPUSH
10632: CALL_OW 257
10636: PUSH
10637: LD_INT 1
10639: PUSH
10640: LD_INT 2
10642: PUSH
10643: LD_INT 3
10645: PUSH
10646: LD_INT 4
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: IN
10655: IFFALSE 10677
// SetClass ( un , rand ( 1 , 4 ) ) ;
10657: LD_VAR 0 1
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: LD_INT 4
10667: PPUSH
10668: CALL_OW 12
10672: PPUSH
10673: CALL_OW 336
10677: GO 10624
10679: POP
10680: POP
// end ;
10681: PPOPN 1
10683: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10684: LD_EXP 32
10688: PUSH
10689: LD_EXP 44
10693: AND
10694: IFFALSE 10773
10696: GO 10698
10698: DISABLE
10699: LD_INT 0
10701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10702: LD_ADDR_VAR 0 1
10706: PUSH
10707: LD_INT 22
10709: PUSH
10710: LD_OWVAR 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 21
10721: PUSH
10722: LD_INT 3
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 69
10737: ST_TO_ADDR
// if not tmp then
10738: LD_VAR 0 1
10742: NOT
10743: IFFALSE 10747
// exit ;
10745: GO 10773
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10747: LD_VAR 0 1
10751: PUSH
10752: LD_INT 1
10754: PPUSH
10755: LD_VAR 0 1
10759: PPUSH
10760: CALL_OW 12
10764: ARRAY
10765: PPUSH
10766: LD_INT 100
10768: PPUSH
10769: CALL_OW 234
// end ;
10773: PPOPN 1
10775: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10776: LD_EXP 32
10780: PUSH
10781: LD_EXP 46
10785: AND
10786: IFFALSE 10884
10788: GO 10790
10790: DISABLE
10791: LD_INT 0
10793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: LD_INT 22
10801: PUSH
10802: LD_OWVAR 2
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 21
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PPUSH
10825: CALL_OW 69
10829: ST_TO_ADDR
// if not tmp then
10830: LD_VAR 0 1
10834: NOT
10835: IFFALSE 10839
// exit ;
10837: GO 10884
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10839: LD_VAR 0 1
10843: PUSH
10844: LD_INT 1
10846: PPUSH
10847: LD_VAR 0 1
10851: PPUSH
10852: CALL_OW 12
10856: ARRAY
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: LD_INT 4
10863: PPUSH
10864: CALL_OW 12
10868: PPUSH
10869: LD_INT 3000
10871: PPUSH
10872: LD_INT 9000
10874: PPUSH
10875: CALL_OW 12
10879: PPUSH
10880: CALL_OW 492
// end ;
10884: PPOPN 1
10886: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10887: LD_EXP 32
10891: PUSH
10892: LD_EXP 47
10896: AND
10897: IFFALSE 10917
10899: GO 10901
10901: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10902: LD_INT 1
10904: PPUSH
10905: LD_OWVAR 2
10909: PPUSH
10910: LD_INT 0
10912: PPUSH
10913: CALL_OW 324
10917: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10918: LD_EXP 32
10922: PUSH
10923: LD_EXP 48
10927: AND
10928: IFFALSE 11011
10930: GO 10932
10932: DISABLE
10933: LD_INT 0
10935: PPUSH
10936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10937: LD_ADDR_VAR 0 2
10941: PUSH
10942: LD_INT 22
10944: PUSH
10945: LD_OWVAR 2
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 21
10956: PUSH
10957: LD_INT 3
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PPUSH
10968: CALL_OW 69
10972: ST_TO_ADDR
// if not tmp then
10973: LD_VAR 0 2
10977: NOT
10978: IFFALSE 10982
// exit ;
10980: GO 11011
// for i in tmp do
10982: LD_ADDR_VAR 0 1
10986: PUSH
10987: LD_VAR 0 2
10991: PUSH
10992: FOR_IN
10993: IFFALSE 11009
// SetBLevel ( i , 10 ) ;
10995: LD_VAR 0 1
10999: PPUSH
11000: LD_INT 10
11002: PPUSH
11003: CALL_OW 241
11007: GO 10992
11009: POP
11010: POP
// end ;
11011: PPOPN 2
11013: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11014: LD_EXP 32
11018: PUSH
11019: LD_EXP 49
11023: AND
11024: IFFALSE 11135
11026: GO 11028
11028: DISABLE
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
11033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11034: LD_ADDR_VAR 0 3
11038: PUSH
11039: LD_INT 22
11041: PUSH
11042: LD_OWVAR 2
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 25
11053: PUSH
11054: LD_INT 1
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL_OW 69
11069: ST_TO_ADDR
// if not tmp then
11070: LD_VAR 0 3
11074: NOT
11075: IFFALSE 11079
// exit ;
11077: GO 11135
// un := tmp [ rand ( 1 , tmp ) ] ;
11079: LD_ADDR_VAR 0 2
11083: PUSH
11084: LD_VAR 0 3
11088: PUSH
11089: LD_INT 1
11091: PPUSH
11092: LD_VAR 0 3
11096: PPUSH
11097: CALL_OW 12
11101: ARRAY
11102: ST_TO_ADDR
// if Crawls ( un ) then
11103: LD_VAR 0 2
11107: PPUSH
11108: CALL_OW 318
11112: IFFALSE 11123
// ComWalk ( un ) ;
11114: LD_VAR 0 2
11118: PPUSH
11119: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11123: LD_VAR 0 2
11127: PPUSH
11128: LD_INT 5
11130: PPUSH
11131: CALL_OW 336
// end ;
11135: PPOPN 3
11137: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11138: LD_EXP 32
11142: PUSH
11143: LD_EXP 50
11147: AND
11148: PUSH
11149: LD_OWVAR 67
11153: PUSH
11154: LD_INT 4
11156: LESS
11157: AND
11158: IFFALSE 11177
11160: GO 11162
11162: DISABLE
// begin Difficulty := Difficulty + 1 ;
11163: LD_ADDR_OWVAR 67
11167: PUSH
11168: LD_OWVAR 67
11172: PUSH
11173: LD_INT 1
11175: PLUS
11176: ST_TO_ADDR
// end ;
11177: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11178: LD_EXP 32
11182: PUSH
11183: LD_EXP 51
11187: AND
11188: IFFALSE 11291
11190: GO 11192
11192: DISABLE
11193: LD_INT 0
11195: PPUSH
// begin for i := 1 to 5 do
11196: LD_ADDR_VAR 0 1
11200: PUSH
11201: DOUBLE
11202: LD_INT 1
11204: DEC
11205: ST_TO_ADDR
11206: LD_INT 5
11208: PUSH
11209: FOR_TO
11210: IFFALSE 11289
// begin uc_nation := nation_nature ;
11212: LD_ADDR_OWVAR 21
11216: PUSH
11217: LD_INT 0
11219: ST_TO_ADDR
// uc_side := 0 ;
11220: LD_ADDR_OWVAR 20
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11228: LD_ADDR_OWVAR 29
11232: PUSH
11233: LD_INT 12
11235: PUSH
11236: LD_INT 12
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: ST_TO_ADDR
// hc_agressivity := 20 ;
11243: LD_ADDR_OWVAR 35
11247: PUSH
11248: LD_INT 20
11250: ST_TO_ADDR
// hc_class := class_tiger ;
11251: LD_ADDR_OWVAR 28
11255: PUSH
11256: LD_INT 14
11258: ST_TO_ADDR
// hc_gallery :=  ;
11259: LD_ADDR_OWVAR 33
11263: PUSH
11264: LD_STRING 
11266: ST_TO_ADDR
// hc_name :=  ;
11267: LD_ADDR_OWVAR 26
11271: PUSH
11272: LD_STRING 
11274: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11275: CALL_OW 44
11279: PPUSH
11280: LD_INT 0
11282: PPUSH
11283: CALL_OW 51
// end ;
11287: GO 11209
11289: POP
11290: POP
// end ;
11291: PPOPN 1
11293: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11294: LD_EXP 32
11298: PUSH
11299: LD_EXP 52
11303: AND
11304: IFFALSE 11313
11306: GO 11308
11308: DISABLE
// StreamSibBomb ;
11309: CALL 11314 0 0
11313: END
// export function StreamSibBomb ; var i , x , y ; begin
11314: LD_INT 0
11316: PPUSH
11317: PPUSH
11318: PPUSH
11319: PPUSH
// result := false ;
11320: LD_ADDR_VAR 0 1
11324: PUSH
11325: LD_INT 0
11327: ST_TO_ADDR
// for i := 1 to 16 do
11328: LD_ADDR_VAR 0 2
11332: PUSH
11333: DOUBLE
11334: LD_INT 1
11336: DEC
11337: ST_TO_ADDR
11338: LD_INT 16
11340: PUSH
11341: FOR_TO
11342: IFFALSE 11541
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11344: LD_ADDR_VAR 0 3
11348: PUSH
11349: LD_INT 10
11351: PUSH
11352: LD_INT 20
11354: PUSH
11355: LD_INT 30
11357: PUSH
11358: LD_INT 40
11360: PUSH
11361: LD_INT 50
11363: PUSH
11364: LD_INT 60
11366: PUSH
11367: LD_INT 70
11369: PUSH
11370: LD_INT 80
11372: PUSH
11373: LD_INT 90
11375: PUSH
11376: LD_INT 100
11378: PUSH
11379: LD_INT 110
11381: PUSH
11382: LD_INT 120
11384: PUSH
11385: LD_INT 130
11387: PUSH
11388: LD_INT 140
11390: PUSH
11391: LD_INT 150
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 1
11413: PPUSH
11414: LD_INT 15
11416: PPUSH
11417: CALL_OW 12
11421: ARRAY
11422: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11423: LD_ADDR_VAR 0 4
11427: PUSH
11428: LD_INT 10
11430: PUSH
11431: LD_INT 20
11433: PUSH
11434: LD_INT 30
11436: PUSH
11437: LD_INT 40
11439: PUSH
11440: LD_INT 50
11442: PUSH
11443: LD_INT 60
11445: PUSH
11446: LD_INT 70
11448: PUSH
11449: LD_INT 80
11451: PUSH
11452: LD_INT 90
11454: PUSH
11455: LD_INT 100
11457: PUSH
11458: LD_INT 110
11460: PUSH
11461: LD_INT 120
11463: PUSH
11464: LD_INT 130
11466: PUSH
11467: LD_INT 140
11469: PUSH
11470: LD_INT 150
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 1
11492: PPUSH
11493: LD_INT 15
11495: PPUSH
11496: CALL_OW 12
11500: ARRAY
11501: ST_TO_ADDR
// if ValidHex ( x , y ) then
11502: LD_VAR 0 3
11506: PPUSH
11507: LD_VAR 0 4
11511: PPUSH
11512: CALL_OW 488
11516: IFFALSE 11539
// begin result := [ x , y ] ;
11518: LD_ADDR_VAR 0 1
11522: PUSH
11523: LD_VAR 0 3
11527: PUSH
11528: LD_VAR 0 4
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: ST_TO_ADDR
// break ;
11537: GO 11541
// end ; end ;
11539: GO 11341
11541: POP
11542: POP
// if result then
11543: LD_VAR 0 1
11547: IFFALSE 11607
// begin ToLua ( playSibBomb() ) ;
11549: LD_STRING playSibBomb()
11551: PPUSH
11552: CALL_OW 559
// wait ( 0 0$14 ) ;
11556: LD_INT 490
11558: PPUSH
11559: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11563: LD_VAR 0 1
11567: PUSH
11568: LD_INT 1
11570: ARRAY
11571: PPUSH
11572: LD_VAR 0 1
11576: PUSH
11577: LD_INT 2
11579: ARRAY
11580: PPUSH
11581: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11585: LD_VAR 0 1
11589: PUSH
11590: LD_INT 1
11592: ARRAY
11593: PPUSH
11594: LD_VAR 0 1
11598: PUSH
11599: LD_INT 2
11601: ARRAY
11602: PPUSH
11603: CALL_OW 429
// end ; end ;
11607: LD_VAR 0 1
11611: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11612: LD_EXP 32
11616: PUSH
11617: LD_EXP 54
11621: AND
11622: IFFALSE 11634
11624: GO 11626
11626: DISABLE
// YouLost (  ) ;
11627: LD_STRING 
11629: PPUSH
11630: CALL_OW 104
11634: END
// every 0 0$1 trigger StreamModeActive and sFog do
11635: LD_EXP 32
11639: PUSH
11640: LD_EXP 53
11644: AND
11645: IFFALSE 11659
11647: GO 11649
11649: DISABLE
// FogOff ( your_side ) ;
11650: LD_OWVAR 2
11654: PPUSH
11655: CALL_OW 344
11659: END
// every 0 0$1 trigger StreamModeActive and sSun do
11660: LD_EXP 32
11664: PUSH
11665: LD_EXP 55
11669: AND
11670: IFFALSE 11698
11672: GO 11674
11674: DISABLE
// begin solar_recharge_percent := 0 ;
11675: LD_ADDR_OWVAR 79
11679: PUSH
11680: LD_INT 0
11682: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11683: LD_INT 10500
11685: PPUSH
11686: CALL_OW 67
// solar_recharge_percent := 100 ;
11690: LD_ADDR_OWVAR 79
11694: PUSH
11695: LD_INT 100
11697: ST_TO_ADDR
// end ;
11698: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11699: LD_EXP 32
11703: PUSH
11704: LD_EXP 56
11708: AND
11709: IFFALSE 11948
11711: GO 11713
11713: DISABLE
11714: LD_INT 0
11716: PPUSH
11717: PPUSH
11718: PPUSH
// begin tmp := [ ] ;
11719: LD_ADDR_VAR 0 3
11723: PUSH
11724: EMPTY
11725: ST_TO_ADDR
// for i := 1 to 6 do
11726: LD_ADDR_VAR 0 1
11730: PUSH
11731: DOUBLE
11732: LD_INT 1
11734: DEC
11735: ST_TO_ADDR
11736: LD_INT 6
11738: PUSH
11739: FOR_TO
11740: IFFALSE 11845
// begin uc_nation := nation_nature ;
11742: LD_ADDR_OWVAR 21
11746: PUSH
11747: LD_INT 0
11749: ST_TO_ADDR
// uc_side := 0 ;
11750: LD_ADDR_OWVAR 20
11754: PUSH
11755: LD_INT 0
11757: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11758: LD_ADDR_OWVAR 29
11762: PUSH
11763: LD_INT 12
11765: PUSH
11766: LD_INT 12
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: ST_TO_ADDR
// hc_agressivity := 20 ;
11773: LD_ADDR_OWVAR 35
11777: PUSH
11778: LD_INT 20
11780: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11781: LD_ADDR_OWVAR 28
11785: PUSH
11786: LD_INT 17
11788: ST_TO_ADDR
// hc_gallery :=  ;
11789: LD_ADDR_OWVAR 33
11793: PUSH
11794: LD_STRING 
11796: ST_TO_ADDR
// hc_name :=  ;
11797: LD_ADDR_OWVAR 26
11801: PUSH
11802: LD_STRING 
11804: ST_TO_ADDR
// un := CreateHuman ;
11805: LD_ADDR_VAR 0 2
11809: PUSH
11810: CALL_OW 44
11814: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11815: LD_VAR 0 2
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 51
// tmp := tmp ^ un ;
11827: LD_ADDR_VAR 0 3
11831: PUSH
11832: LD_VAR 0 3
11836: PUSH
11837: LD_VAR 0 2
11841: ADD
11842: ST_TO_ADDR
// end ;
11843: GO 11739
11845: POP
11846: POP
// repeat wait ( 0 0$1 ) ;
11847: LD_INT 35
11849: PPUSH
11850: CALL_OW 67
// for un in tmp do
11854: LD_ADDR_VAR 0 2
11858: PUSH
11859: LD_VAR 0 3
11863: PUSH
11864: FOR_IN
11865: IFFALSE 11939
// begin if IsDead ( un ) then
11867: LD_VAR 0 2
11871: PPUSH
11872: CALL_OW 301
11876: IFFALSE 11896
// begin tmp := tmp diff un ;
11878: LD_ADDR_VAR 0 3
11882: PUSH
11883: LD_VAR 0 3
11887: PUSH
11888: LD_VAR 0 2
11892: DIFF
11893: ST_TO_ADDR
// continue ;
11894: GO 11864
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11896: LD_VAR 0 2
11900: PPUSH
11901: LD_INT 3
11903: PUSH
11904: LD_INT 22
11906: PUSH
11907: LD_INT 0
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PPUSH
11918: CALL_OW 69
11922: PPUSH
11923: LD_VAR 0 2
11927: PPUSH
11928: CALL_OW 74
11932: PPUSH
11933: CALL_OW 115
// end ;
11937: GO 11864
11939: POP
11940: POP
// until not tmp ;
11941: LD_VAR 0 3
11945: NOT
11946: IFFALSE 11847
// end ;
11948: PPOPN 3
11950: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11951: LD_EXP 32
11955: PUSH
11956: LD_EXP 57
11960: AND
11961: IFFALSE 12015
11963: GO 11965
11965: DISABLE
// begin ToLua ( displayTroll(); ) ;
11966: LD_STRING displayTroll();
11968: PPUSH
11969: CALL_OW 559
// wait ( 3 3$00 ) ;
11973: LD_INT 6300
11975: PPUSH
11976: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11980: LD_STRING hideTroll();
11982: PPUSH
11983: CALL_OW 559
// wait ( 1 1$00 ) ;
11987: LD_INT 2100
11989: PPUSH
11990: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11994: LD_STRING displayTroll();
11996: PPUSH
11997: CALL_OW 559
// wait ( 1 1$00 ) ;
12001: LD_INT 2100
12003: PPUSH
12004: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12008: LD_STRING hideTroll();
12010: PPUSH
12011: CALL_OW 559
// end ;
12015: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12016: LD_EXP 32
12020: PUSH
12021: LD_EXP 58
12025: AND
12026: IFFALSE 12089
12028: GO 12030
12030: DISABLE
12031: LD_INT 0
12033: PPUSH
// begin p := 0 ;
12034: LD_ADDR_VAR 0 1
12038: PUSH
12039: LD_INT 0
12041: ST_TO_ADDR
// repeat game_speed := 1 ;
12042: LD_ADDR_OWVAR 65
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12050: LD_INT 35
12052: PPUSH
12053: CALL_OW 67
// p := p + 1 ;
12057: LD_ADDR_VAR 0 1
12061: PUSH
12062: LD_VAR 0 1
12066: PUSH
12067: LD_INT 1
12069: PLUS
12070: ST_TO_ADDR
// until p >= 60 ;
12071: LD_VAR 0 1
12075: PUSH
12076: LD_INT 60
12078: GREATEREQUAL
12079: IFFALSE 12042
// game_speed := 4 ;
12081: LD_ADDR_OWVAR 65
12085: PUSH
12086: LD_INT 4
12088: ST_TO_ADDR
// end ;
12089: PPOPN 1
12091: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12092: LD_EXP 32
12096: PUSH
12097: LD_EXP 59
12101: AND
12102: IFFALSE 12248
12104: GO 12106
12106: DISABLE
12107: LD_INT 0
12109: PPUSH
12110: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12111: LD_ADDR_VAR 0 1
12115: PUSH
12116: LD_INT 22
12118: PUSH
12119: LD_OWVAR 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 30
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PPUSH
12160: CALL_OW 69
12164: ST_TO_ADDR
// if not depot then
12165: LD_VAR 0 1
12169: NOT
12170: IFFALSE 12174
// exit ;
12172: GO 12248
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12174: LD_ADDR_VAR 0 2
12178: PUSH
12179: LD_VAR 0 1
12183: PUSH
12184: LD_INT 1
12186: PPUSH
12187: LD_VAR 0 1
12191: PPUSH
12192: CALL_OW 12
12196: ARRAY
12197: PPUSH
12198: CALL_OW 274
12202: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12203: LD_VAR 0 2
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_INT 0
12213: PPUSH
12214: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12218: LD_VAR 0 2
12222: PPUSH
12223: LD_INT 2
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12233: LD_VAR 0 2
12237: PPUSH
12238: LD_INT 3
12240: PPUSH
12241: LD_INT 0
12243: PPUSH
12244: CALL_OW 277
// end ;
12248: PPOPN 2
12250: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12251: LD_EXP 32
12255: PUSH
12256: LD_EXP 60
12260: AND
12261: IFFALSE 12358
12263: GO 12265
12265: DISABLE
12266: LD_INT 0
12268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12269: LD_ADDR_VAR 0 1
12273: PUSH
12274: LD_INT 22
12276: PUSH
12277: LD_OWVAR 2
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 21
12288: PUSH
12289: LD_INT 1
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 3
12298: PUSH
12299: LD_INT 23
12301: PUSH
12302: LD_INT 0
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: PPUSH
12318: CALL_OW 69
12322: ST_TO_ADDR
// if not tmp then
12323: LD_VAR 0 1
12327: NOT
12328: IFFALSE 12332
// exit ;
12330: GO 12358
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12332: LD_VAR 0 1
12336: PUSH
12337: LD_INT 1
12339: PPUSH
12340: LD_VAR 0 1
12344: PPUSH
12345: CALL_OW 12
12349: ARRAY
12350: PPUSH
12351: LD_INT 200
12353: PPUSH
12354: CALL_OW 234
// end ;
12358: PPOPN 1
12360: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12361: LD_EXP 32
12365: PUSH
12366: LD_EXP 61
12370: AND
12371: IFFALSE 12450
12373: GO 12375
12375: DISABLE
12376: LD_INT 0
12378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12379: LD_ADDR_VAR 0 1
12383: PUSH
12384: LD_INT 22
12386: PUSH
12387: LD_OWVAR 2
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 21
12398: PUSH
12399: LD_INT 2
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 69
12414: ST_TO_ADDR
// if not tmp then
12415: LD_VAR 0 1
12419: NOT
12420: IFFALSE 12424
// exit ;
12422: GO 12450
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12424: LD_VAR 0 1
12428: PUSH
12429: LD_INT 1
12431: PPUSH
12432: LD_VAR 0 1
12436: PPUSH
12437: CALL_OW 12
12441: ARRAY
12442: PPUSH
12443: LD_INT 60
12445: PPUSH
12446: CALL_OW 234
// end ;
12450: PPOPN 1
12452: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12453: LD_EXP 32
12457: PUSH
12458: LD_EXP 62
12462: AND
12463: IFFALSE 12562
12465: GO 12467
12467: DISABLE
12468: LD_INT 0
12470: PPUSH
12471: PPUSH
// begin enable ;
12472: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12473: LD_ADDR_VAR 0 1
12477: PUSH
12478: LD_INT 22
12480: PUSH
12481: LD_OWVAR 2
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 61
12492: PUSH
12493: EMPTY
12494: LIST
12495: PUSH
12496: LD_INT 33
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: PPUSH
12511: CALL_OW 69
12515: ST_TO_ADDR
// if not tmp then
12516: LD_VAR 0 1
12520: NOT
12521: IFFALSE 12525
// exit ;
12523: GO 12562
// for i in tmp do
12525: LD_ADDR_VAR 0 2
12529: PUSH
12530: LD_VAR 0 1
12534: PUSH
12535: FOR_IN
12536: IFFALSE 12560
// if IsControledBy ( i ) then
12538: LD_VAR 0 2
12542: PPUSH
12543: CALL_OW 312
12547: IFFALSE 12558
// ComUnlink ( i ) ;
12549: LD_VAR 0 2
12553: PPUSH
12554: CALL_OW 136
12558: GO 12535
12560: POP
12561: POP
// end ;
12562: PPOPN 2
12564: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12565: LD_EXP 32
12569: PUSH
12570: LD_EXP 63
12574: AND
12575: IFFALSE 12715
12577: GO 12579
12579: DISABLE
12580: LD_INT 0
12582: PPUSH
12583: PPUSH
// begin ToLua ( displayPowell(); ) ;
12584: LD_STRING displayPowell();
12586: PPUSH
12587: CALL_OW 559
// uc_side := 0 ;
12591: LD_ADDR_OWVAR 20
12595: PUSH
12596: LD_INT 0
12598: ST_TO_ADDR
// uc_nation := 2 ;
12599: LD_ADDR_OWVAR 21
12603: PUSH
12604: LD_INT 2
12606: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12607: LD_ADDR_OWVAR 37
12611: PUSH
12612: LD_INT 14
12614: ST_TO_ADDR
// vc_engine := engine_siberite ;
12615: LD_ADDR_OWVAR 39
12619: PUSH
12620: LD_INT 3
12622: ST_TO_ADDR
// vc_control := control_apeman ;
12623: LD_ADDR_OWVAR 38
12627: PUSH
12628: LD_INT 5
12630: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12631: LD_ADDR_OWVAR 40
12635: PUSH
12636: LD_INT 29
12638: ST_TO_ADDR
// un := CreateVehicle ;
12639: LD_ADDR_VAR 0 2
12643: PUSH
12644: CALL_OW 45
12648: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12649: LD_VAR 0 2
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12661: LD_INT 35
12663: PPUSH
12664: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12668: LD_VAR 0 2
12672: PPUSH
12673: LD_INT 22
12675: PUSH
12676: LD_OWVAR 2
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PPUSH
12685: CALL_OW 69
12689: PPUSH
12690: LD_VAR 0 2
12694: PPUSH
12695: CALL_OW 74
12699: PPUSH
12700: CALL_OW 115
// until IsDead ( un ) ;
12704: LD_VAR 0 2
12708: PPUSH
12709: CALL_OW 301
12713: IFFALSE 12661
// end ;
12715: PPOPN 2
12717: END
// every 0 0$1 trigger StreamModeActive and sStu do
12718: LD_EXP 32
12722: PUSH
12723: LD_EXP 71
12727: AND
12728: IFFALSE 12744
12730: GO 12732
12732: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12733: LD_STRING displayStucuk();
12735: PPUSH
12736: CALL_OW 559
// ResetFog ;
12740: CALL_OW 335
// end ;
12744: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12745: LD_EXP 32
12749: PUSH
12750: LD_EXP 64
12754: AND
12755: IFFALSE 12896
12757: GO 12759
12759: DISABLE
12760: LD_INT 0
12762: PPUSH
12763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12764: LD_ADDR_VAR 0 2
12768: PUSH
12769: LD_INT 22
12771: PUSH
12772: LD_OWVAR 2
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 21
12783: PUSH
12784: LD_INT 1
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: ST_TO_ADDR
// if not tmp then
12800: LD_VAR 0 2
12804: NOT
12805: IFFALSE 12809
// exit ;
12807: GO 12896
// un := tmp [ rand ( 1 , tmp ) ] ;
12809: LD_ADDR_VAR 0 1
12813: PUSH
12814: LD_VAR 0 2
12818: PUSH
12819: LD_INT 1
12821: PPUSH
12822: LD_VAR 0 2
12826: PPUSH
12827: CALL_OW 12
12831: ARRAY
12832: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12833: LD_VAR 0 1
12837: PPUSH
12838: LD_INT 0
12840: PPUSH
12841: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12845: LD_VAR 0 1
12849: PPUSH
12850: LD_OWVAR 3
12854: PUSH
12855: LD_VAR 0 1
12859: DIFF
12860: PPUSH
12861: LD_VAR 0 1
12865: PPUSH
12866: CALL_OW 74
12870: PPUSH
12871: CALL_OW 115
// wait ( 0 0$20 ) ;
12875: LD_INT 700
12877: PPUSH
12878: CALL_OW 67
// SetSide ( un , your_side ) ;
12882: LD_VAR 0 1
12886: PPUSH
12887: LD_OWVAR 2
12891: PPUSH
12892: CALL_OW 235
// end ;
12896: PPOPN 2
12898: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12899: LD_EXP 32
12903: PUSH
12904: LD_EXP 65
12908: AND
12909: IFFALSE 13015
12911: GO 12913
12913: DISABLE
12914: LD_INT 0
12916: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12917: LD_ADDR_VAR 0 1
12921: PUSH
12922: LD_INT 22
12924: PUSH
12925: LD_OWVAR 2
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: LD_INT 2
12936: PUSH
12937: LD_INT 30
12939: PUSH
12940: LD_INT 0
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 30
12949: PUSH
12950: LD_INT 1
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PPUSH
12966: CALL_OW 69
12970: ST_TO_ADDR
// if not depot then
12971: LD_VAR 0 1
12975: NOT
12976: IFFALSE 12980
// exit ;
12978: GO 13015
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12980: LD_VAR 0 1
12984: PUSH
12985: LD_INT 1
12987: ARRAY
12988: PPUSH
12989: CALL_OW 250
12993: PPUSH
12994: LD_VAR 0 1
12998: PUSH
12999: LD_INT 1
13001: ARRAY
13002: PPUSH
13003: CALL_OW 251
13007: PPUSH
13008: LD_INT 70
13010: PPUSH
13011: CALL_OW 495
// end ;
13015: PPOPN 1
13017: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13018: LD_EXP 32
13022: PUSH
13023: LD_EXP 66
13027: AND
13028: IFFALSE 13239
13030: GO 13032
13032: DISABLE
13033: LD_INT 0
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13040: LD_ADDR_VAR 0 5
13044: PUSH
13045: LD_INT 22
13047: PUSH
13048: LD_OWVAR 2
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 21
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: ST_TO_ADDR
// if not tmp then
13076: LD_VAR 0 5
13080: NOT
13081: IFFALSE 13085
// exit ;
13083: GO 13239
// for i in tmp do
13085: LD_ADDR_VAR 0 1
13089: PUSH
13090: LD_VAR 0 5
13094: PUSH
13095: FOR_IN
13096: IFFALSE 13237
// begin d := rand ( 0 , 5 ) ;
13098: LD_ADDR_VAR 0 4
13102: PUSH
13103: LD_INT 0
13105: PPUSH
13106: LD_INT 5
13108: PPUSH
13109: CALL_OW 12
13113: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13114: LD_ADDR_VAR 0 2
13118: PUSH
13119: LD_VAR 0 1
13123: PPUSH
13124: CALL_OW 250
13128: PPUSH
13129: LD_VAR 0 4
13133: PPUSH
13134: LD_INT 3
13136: PPUSH
13137: LD_INT 12
13139: PPUSH
13140: CALL_OW 12
13144: PPUSH
13145: CALL_OW 272
13149: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13150: LD_ADDR_VAR 0 3
13154: PUSH
13155: LD_VAR 0 1
13159: PPUSH
13160: CALL_OW 251
13164: PPUSH
13165: LD_VAR 0 4
13169: PPUSH
13170: LD_INT 3
13172: PPUSH
13173: LD_INT 12
13175: PPUSH
13176: CALL_OW 12
13180: PPUSH
13181: CALL_OW 273
13185: ST_TO_ADDR
// if ValidHex ( x , y ) then
13186: LD_VAR 0 2
13190: PPUSH
13191: LD_VAR 0 3
13195: PPUSH
13196: CALL_OW 488
13200: IFFALSE 13235
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13202: LD_VAR 0 1
13206: PPUSH
13207: LD_VAR 0 2
13211: PPUSH
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 3
13219: PPUSH
13220: LD_INT 6
13222: PPUSH
13223: CALL_OW 12
13227: PPUSH
13228: LD_INT 1
13230: PPUSH
13231: CALL_OW 483
// end ;
13235: GO 13095
13237: POP
13238: POP
// end ;
13239: PPOPN 5
13241: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13242: LD_EXP 32
13246: PUSH
13247: LD_EXP 67
13251: AND
13252: IFFALSE 13346
13254: GO 13256
13256: DISABLE
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_OWVAR 2
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 32
13280: PUSH
13281: LD_INT 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 21
13290: PUSH
13291: LD_INT 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 69
13307: ST_TO_ADDR
// if not tmp then
13308: LD_VAR 0 2
13312: NOT
13313: IFFALSE 13317
// exit ;
13315: GO 13346
// for i in tmp do
13317: LD_ADDR_VAR 0 1
13321: PUSH
13322: LD_VAR 0 2
13326: PUSH
13327: FOR_IN
13328: IFFALSE 13344
// SetFuel ( i , 0 ) ;
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_INT 0
13337: PPUSH
13338: CALL_OW 240
13342: GO 13327
13344: POP
13345: POP
// end ;
13346: PPOPN 2
13348: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13349: LD_EXP 32
13353: PUSH
13354: LD_EXP 68
13358: AND
13359: IFFALSE 13425
13361: GO 13363
13363: DISABLE
13364: LD_INT 0
13366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13367: LD_ADDR_VAR 0 1
13371: PUSH
13372: LD_INT 22
13374: PUSH
13375: LD_OWVAR 2
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 30
13386: PUSH
13387: LD_INT 29
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PPUSH
13398: CALL_OW 69
13402: ST_TO_ADDR
// if not tmp then
13403: LD_VAR 0 1
13407: NOT
13408: IFFALSE 13412
// exit ;
13410: GO 13425
// DestroyUnit ( tmp [ 1 ] ) ;
13412: LD_VAR 0 1
13416: PUSH
13417: LD_INT 1
13419: ARRAY
13420: PPUSH
13421: CALL_OW 65
// end ;
13425: PPOPN 1
13427: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13428: LD_EXP 32
13432: PUSH
13433: LD_EXP 70
13437: AND
13438: IFFALSE 13567
13440: GO 13442
13442: DISABLE
13443: LD_INT 0
13445: PPUSH
// begin uc_side := 0 ;
13446: LD_ADDR_OWVAR 20
13450: PUSH
13451: LD_INT 0
13453: ST_TO_ADDR
// uc_nation := nation_arabian ;
13454: LD_ADDR_OWVAR 21
13458: PUSH
13459: LD_INT 2
13461: ST_TO_ADDR
// hc_gallery :=  ;
13462: LD_ADDR_OWVAR 33
13466: PUSH
13467: LD_STRING 
13469: ST_TO_ADDR
// hc_name :=  ;
13470: LD_ADDR_OWVAR 26
13474: PUSH
13475: LD_STRING 
13477: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13478: LD_INT 1
13480: PPUSH
13481: LD_INT 11
13483: PPUSH
13484: LD_INT 10
13486: PPUSH
13487: CALL_OW 380
// un := CreateHuman ;
13491: LD_ADDR_VAR 0 1
13495: PUSH
13496: CALL_OW 44
13500: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13501: LD_VAR 0 1
13505: PPUSH
13506: LD_INT 1
13508: PPUSH
13509: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13513: LD_INT 35
13515: PPUSH
13516: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13520: LD_VAR 0 1
13524: PPUSH
13525: LD_INT 22
13527: PUSH
13528: LD_OWVAR 2
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PPUSH
13537: CALL_OW 69
13541: PPUSH
13542: LD_VAR 0 1
13546: PPUSH
13547: CALL_OW 74
13551: PPUSH
13552: CALL_OW 115
// until IsDead ( un ) ;
13556: LD_VAR 0 1
13560: PPUSH
13561: CALL_OW 301
13565: IFFALSE 13513
// end ;
13567: PPOPN 1
13569: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13570: LD_EXP 32
13574: PUSH
13575: LD_EXP 72
13579: AND
13580: IFFALSE 13592
13582: GO 13584
13584: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13585: LD_STRING earthquake(getX(game), 0, 32)
13587: PPUSH
13588: CALL_OW 559
13592: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13593: LD_EXP 32
13597: PUSH
13598: LD_EXP 73
13602: AND
13603: IFFALSE 13694
13605: GO 13607
13607: DISABLE
13608: LD_INT 0
13610: PPUSH
// begin enable ;
13611: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13612: LD_ADDR_VAR 0 1
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_OWVAR 2
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 21
13631: PUSH
13632: LD_INT 2
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 33
13641: PUSH
13642: LD_INT 3
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: PPUSH
13654: CALL_OW 69
13658: ST_TO_ADDR
// if not tmp then
13659: LD_VAR 0 1
13663: NOT
13664: IFFALSE 13668
// exit ;
13666: GO 13694
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13668: LD_VAR 0 1
13672: PUSH
13673: LD_INT 1
13675: PPUSH
13676: LD_VAR 0 1
13680: PPUSH
13681: CALL_OW 12
13685: ARRAY
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 234
// end ;
13694: PPOPN 1
13696: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13697: LD_EXP 32
13701: PUSH
13702: LD_EXP 74
13706: AND
13707: IFFALSE 13848
13709: GO 13711
13711: DISABLE
13712: LD_INT 0
13714: PPUSH
13715: PPUSH
13716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13717: LD_ADDR_VAR 0 3
13721: PUSH
13722: LD_INT 22
13724: PUSH
13725: LD_OWVAR 2
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 25
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: ST_TO_ADDR
// if not tmp then
13753: LD_VAR 0 3
13757: NOT
13758: IFFALSE 13762
// exit ;
13760: GO 13848
// un := tmp [ rand ( 1 , tmp ) ] ;
13762: LD_ADDR_VAR 0 2
13766: PUSH
13767: LD_VAR 0 3
13771: PUSH
13772: LD_INT 1
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: CALL_OW 12
13784: ARRAY
13785: ST_TO_ADDR
// if Crawls ( un ) then
13786: LD_VAR 0 2
13790: PPUSH
13791: CALL_OW 318
13795: IFFALSE 13806
// ComWalk ( un ) ;
13797: LD_VAR 0 2
13801: PPUSH
13802: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_INT 9
13813: PPUSH
13814: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13818: LD_INT 28
13820: PPUSH
13821: LD_OWVAR 2
13825: PPUSH
13826: LD_INT 2
13828: PPUSH
13829: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13833: LD_INT 29
13835: PPUSH
13836: LD_OWVAR 2
13840: PPUSH
13841: LD_INT 2
13843: PPUSH
13844: CALL_OW 322
// end ;
13848: PPOPN 3
13850: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13851: LD_EXP 32
13855: PUSH
13856: LD_EXP 75
13860: AND
13861: IFFALSE 13972
13863: GO 13865
13865: DISABLE
13866: LD_INT 0
13868: PPUSH
13869: PPUSH
13870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13871: LD_ADDR_VAR 0 3
13875: PUSH
13876: LD_INT 22
13878: PUSH
13879: LD_OWVAR 2
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 25
13890: PUSH
13891: LD_INT 1
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 69
13906: ST_TO_ADDR
// if not tmp then
13907: LD_VAR 0 3
13911: NOT
13912: IFFALSE 13916
// exit ;
13914: GO 13972
// un := tmp [ rand ( 1 , tmp ) ] ;
13916: LD_ADDR_VAR 0 2
13920: PUSH
13921: LD_VAR 0 3
13925: PUSH
13926: LD_INT 1
13928: PPUSH
13929: LD_VAR 0 3
13933: PPUSH
13934: CALL_OW 12
13938: ARRAY
13939: ST_TO_ADDR
// if Crawls ( un ) then
13940: LD_VAR 0 2
13944: PPUSH
13945: CALL_OW 318
13949: IFFALSE 13960
// ComWalk ( un ) ;
13951: LD_VAR 0 2
13955: PPUSH
13956: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13960: LD_VAR 0 2
13964: PPUSH
13965: LD_INT 8
13967: PPUSH
13968: CALL_OW 336
// end ;
13972: PPOPN 3
13974: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13975: LD_EXP 32
13979: PUSH
13980: LD_EXP 76
13984: AND
13985: IFFALSE 14129
13987: GO 13989
13989: DISABLE
13990: LD_INT 0
13992: PPUSH
13993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13994: LD_ADDR_VAR 0 2
13998: PUSH
13999: LD_INT 22
14001: PUSH
14002: LD_OWVAR 2
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 21
14013: PUSH
14014: LD_INT 2
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: LD_INT 34
14026: PUSH
14027: LD_INT 12
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 34
14036: PUSH
14037: LD_INT 51
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 34
14046: PUSH
14047: LD_INT 32
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: PPUSH
14065: CALL_OW 69
14069: ST_TO_ADDR
// if not tmp then
14070: LD_VAR 0 2
14074: NOT
14075: IFFALSE 14079
// exit ;
14077: GO 14129
// for i in tmp do
14079: LD_ADDR_VAR 0 1
14083: PUSH
14084: LD_VAR 0 2
14088: PUSH
14089: FOR_IN
14090: IFFALSE 14127
// if GetCargo ( i , mat_artifact ) = 0 then
14092: LD_VAR 0 1
14096: PPUSH
14097: LD_INT 4
14099: PPUSH
14100: CALL_OW 289
14104: PUSH
14105: LD_INT 0
14107: EQUAL
14108: IFFALSE 14125
// SetCargo ( i , mat_siberit , 100 ) ;
14110: LD_VAR 0 1
14114: PPUSH
14115: LD_INT 3
14117: PPUSH
14118: LD_INT 100
14120: PPUSH
14121: CALL_OW 290
14125: GO 14089
14127: POP
14128: POP
// end ;
14129: PPOPN 2
14131: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14132: LD_EXP 32
14136: PUSH
14137: LD_EXP 77
14141: AND
14142: IFFALSE 14325
14144: GO 14146
14146: DISABLE
14147: LD_INT 0
14149: PPUSH
14150: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14151: LD_ADDR_VAR 0 2
14155: PUSH
14156: LD_INT 22
14158: PUSH
14159: LD_OWVAR 2
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PPUSH
14168: CALL_OW 69
14172: ST_TO_ADDR
// if not tmp then
14173: LD_VAR 0 2
14177: NOT
14178: IFFALSE 14182
// exit ;
14180: GO 14325
// for i := 1 to 2 do
14182: LD_ADDR_VAR 0 1
14186: PUSH
14187: DOUBLE
14188: LD_INT 1
14190: DEC
14191: ST_TO_ADDR
14192: LD_INT 2
14194: PUSH
14195: FOR_TO
14196: IFFALSE 14323
// begin uc_side := your_side ;
14198: LD_ADDR_OWVAR 20
14202: PUSH
14203: LD_OWVAR 2
14207: ST_TO_ADDR
// uc_nation := nation_american ;
14208: LD_ADDR_OWVAR 21
14212: PUSH
14213: LD_INT 1
14215: ST_TO_ADDR
// vc_chassis := us_morphling ;
14216: LD_ADDR_OWVAR 37
14220: PUSH
14221: LD_INT 5
14223: ST_TO_ADDR
// vc_engine := engine_siberite ;
14224: LD_ADDR_OWVAR 39
14228: PUSH
14229: LD_INT 3
14231: ST_TO_ADDR
// vc_control := control_computer ;
14232: LD_ADDR_OWVAR 38
14236: PUSH
14237: LD_INT 3
14239: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14240: LD_ADDR_OWVAR 40
14244: PUSH
14245: LD_INT 10
14247: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14248: LD_VAR 0 2
14252: PUSH
14253: LD_INT 1
14255: ARRAY
14256: PPUSH
14257: CALL_OW 310
14261: NOT
14262: IFFALSE 14309
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14264: CALL_OW 45
14268: PPUSH
14269: LD_VAR 0 2
14273: PUSH
14274: LD_INT 1
14276: ARRAY
14277: PPUSH
14278: CALL_OW 250
14282: PPUSH
14283: LD_VAR 0 2
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: CALL_OW 251
14296: PPUSH
14297: LD_INT 12
14299: PPUSH
14300: LD_INT 1
14302: PPUSH
14303: CALL_OW 50
14307: GO 14321
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14309: CALL_OW 45
14313: PPUSH
14314: LD_INT 1
14316: PPUSH
14317: CALL_OW 51
// end ;
14321: GO 14195
14323: POP
14324: POP
// end ;
14325: PPOPN 2
14327: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14328: LD_EXP 32
14332: PUSH
14333: LD_EXP 78
14337: AND
14338: IFFALSE 14560
14340: GO 14342
14342: DISABLE
14343: LD_INT 0
14345: PPUSH
14346: PPUSH
14347: PPUSH
14348: PPUSH
14349: PPUSH
14350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14351: LD_ADDR_VAR 0 6
14355: PUSH
14356: LD_INT 22
14358: PUSH
14359: LD_OWVAR 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 21
14370: PUSH
14371: LD_INT 1
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 3
14380: PUSH
14381: LD_INT 23
14383: PUSH
14384: LD_INT 0
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 69
14404: ST_TO_ADDR
// if not tmp then
14405: LD_VAR 0 6
14409: NOT
14410: IFFALSE 14414
// exit ;
14412: GO 14560
// s1 := rand ( 1 , 4 ) ;
14414: LD_ADDR_VAR 0 2
14418: PUSH
14419: LD_INT 1
14421: PPUSH
14422: LD_INT 4
14424: PPUSH
14425: CALL_OW 12
14429: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14430: LD_ADDR_VAR 0 4
14434: PUSH
14435: LD_VAR 0 6
14439: PUSH
14440: LD_INT 1
14442: ARRAY
14443: PPUSH
14444: LD_VAR 0 2
14448: PPUSH
14449: CALL_OW 259
14453: ST_TO_ADDR
// if s1 = 1 then
14454: LD_VAR 0 2
14458: PUSH
14459: LD_INT 1
14461: EQUAL
14462: IFFALSE 14482
// s2 := rand ( 2 , 4 ) else
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_INT 2
14471: PPUSH
14472: LD_INT 4
14474: PPUSH
14475: CALL_OW 12
14479: ST_TO_ADDR
14480: GO 14490
// s2 := 1 ;
14482: LD_ADDR_VAR 0 3
14486: PUSH
14487: LD_INT 1
14489: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14490: LD_ADDR_VAR 0 5
14494: PUSH
14495: LD_VAR 0 6
14499: PUSH
14500: LD_INT 1
14502: ARRAY
14503: PPUSH
14504: LD_VAR 0 3
14508: PPUSH
14509: CALL_OW 259
14513: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14514: LD_VAR 0 6
14518: PUSH
14519: LD_INT 1
14521: ARRAY
14522: PPUSH
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_VAR 0 5
14532: PPUSH
14533: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14537: LD_VAR 0 6
14541: PUSH
14542: LD_INT 1
14544: ARRAY
14545: PPUSH
14546: LD_VAR 0 3
14550: PPUSH
14551: LD_VAR 0 4
14555: PPUSH
14556: CALL_OW 237
// end ;
14560: PPOPN 6
14562: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14563: LD_EXP 32
14567: PUSH
14568: LD_EXP 79
14572: AND
14573: IFFALSE 14652
14575: GO 14577
14577: DISABLE
14578: LD_INT 0
14580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14581: LD_ADDR_VAR 0 1
14585: PUSH
14586: LD_INT 22
14588: PUSH
14589: LD_OWVAR 2
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 30
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PPUSH
14612: CALL_OW 69
14616: ST_TO_ADDR
// if not tmp then
14617: LD_VAR 0 1
14621: NOT
14622: IFFALSE 14626
// exit ;
14624: GO 14652
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14626: LD_VAR 0 1
14630: PUSH
14631: LD_INT 1
14633: PPUSH
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 12
14643: ARRAY
14644: PPUSH
14645: LD_INT 1
14647: PPUSH
14648: CALL_OW 234
// end ;
14652: PPOPN 1
14654: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14655: LD_EXP 32
14659: PUSH
14660: LD_EXP 80
14664: AND
14665: IFFALSE 14777
14667: GO 14669
14669: DISABLE
14670: LD_INT 0
14672: PPUSH
14673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14674: LD_ADDR_VAR 0 2
14678: PUSH
14679: LD_INT 22
14681: PUSH
14682: LD_OWVAR 2
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 2
14693: PUSH
14694: LD_INT 30
14696: PUSH
14697: LD_INT 27
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 30
14706: PUSH
14707: LD_INT 26
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 30
14716: PUSH
14717: LD_INT 28
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PPUSH
14734: CALL_OW 69
14738: ST_TO_ADDR
// if not tmp then
14739: LD_VAR 0 2
14743: NOT
14744: IFFALSE 14748
// exit ;
14746: GO 14777
// for i in tmp do
14748: LD_ADDR_VAR 0 1
14752: PUSH
14753: LD_VAR 0 2
14757: PUSH
14758: FOR_IN
14759: IFFALSE 14775
// SetLives ( i , 1 ) ;
14761: LD_VAR 0 1
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 234
14773: GO 14758
14775: POP
14776: POP
// end ;
14777: PPOPN 2
14779: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14780: LD_EXP 32
14784: PUSH
14785: LD_EXP 81
14789: AND
14790: IFFALSE 15077
14792: GO 14794
14794: DISABLE
14795: LD_INT 0
14797: PPUSH
14798: PPUSH
14799: PPUSH
// begin i := rand ( 1 , 7 ) ;
14800: LD_ADDR_VAR 0 1
14804: PUSH
14805: LD_INT 1
14807: PPUSH
14808: LD_INT 7
14810: PPUSH
14811: CALL_OW 12
14815: ST_TO_ADDR
// case i of 1 :
14816: LD_VAR 0 1
14820: PUSH
14821: LD_INT 1
14823: DOUBLE
14824: EQUAL
14825: IFTRUE 14829
14827: GO 14839
14829: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14830: LD_STRING earthquake(getX(game), 0, 32)
14832: PPUSH
14833: CALL_OW 559
14837: GO 15077
14839: LD_INT 2
14841: DOUBLE
14842: EQUAL
14843: IFTRUE 14847
14845: GO 14861
14847: POP
// begin ToLua ( displayStucuk(); ) ;
14848: LD_STRING displayStucuk();
14850: PPUSH
14851: CALL_OW 559
// ResetFog ;
14855: CALL_OW 335
// end ; 3 :
14859: GO 15077
14861: LD_INT 3
14863: DOUBLE
14864: EQUAL
14865: IFTRUE 14869
14867: GO 14973
14869: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14870: LD_ADDR_VAR 0 2
14874: PUSH
14875: LD_INT 22
14877: PUSH
14878: LD_OWVAR 2
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 25
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 69
14905: ST_TO_ADDR
// if not tmp then
14906: LD_VAR 0 2
14910: NOT
14911: IFFALSE 14915
// exit ;
14913: GO 15077
// un := tmp [ rand ( 1 , tmp ) ] ;
14915: LD_ADDR_VAR 0 3
14919: PUSH
14920: LD_VAR 0 2
14924: PUSH
14925: LD_INT 1
14927: PPUSH
14928: LD_VAR 0 2
14932: PPUSH
14933: CALL_OW 12
14937: ARRAY
14938: ST_TO_ADDR
// if Crawls ( un ) then
14939: LD_VAR 0 3
14943: PPUSH
14944: CALL_OW 318
14948: IFFALSE 14959
// ComWalk ( un ) ;
14950: LD_VAR 0 3
14954: PPUSH
14955: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14959: LD_VAR 0 3
14963: PPUSH
14964: LD_INT 8
14966: PPUSH
14967: CALL_OW 336
// end ; 4 :
14971: GO 15077
14973: LD_INT 4
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15055
14981: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14982: LD_ADDR_VAR 0 2
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 30
15001: PUSH
15002: LD_INT 29
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 69
15017: ST_TO_ADDR
// if not tmp then
15018: LD_VAR 0 2
15022: NOT
15023: IFFALSE 15027
// exit ;
15025: GO 15077
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15027: LD_VAR 0 2
15031: PUSH
15032: LD_INT 1
15034: ARRAY
15035: PPUSH
15036: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15040: LD_VAR 0 2
15044: PUSH
15045: LD_INT 1
15047: ARRAY
15048: PPUSH
15049: CALL_OW 65
// end ; 5 .. 7 :
15053: GO 15077
15055: LD_INT 5
15057: DOUBLE
15058: GREATEREQUAL
15059: IFFALSE 15067
15061: LD_INT 7
15063: DOUBLE
15064: LESSEQUAL
15065: IFTRUE 15069
15067: GO 15076
15069: POP
// StreamSibBomb ; end ;
15070: CALL 11314 0 0
15074: GO 15077
15076: POP
// end ;
15077: PPOPN 3
15079: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15080: LD_EXP 32
15084: PUSH
15085: LD_EXP 82
15089: AND
15090: IFFALSE 15246
15092: GO 15094
15094: DISABLE
15095: LD_INT 0
15097: PPUSH
15098: PPUSH
15099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15100: LD_ADDR_VAR 0 2
15104: PUSH
15105: LD_INT 81
15107: PUSH
15108: LD_OWVAR 2
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 2
15119: PUSH
15120: LD_INT 21
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 21
15132: PUSH
15133: LD_INT 2
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PPUSH
15149: CALL_OW 69
15153: ST_TO_ADDR
// if not tmp then
15154: LD_VAR 0 2
15158: NOT
15159: IFFALSE 15163
// exit ;
15161: GO 15246
// p := 0 ;
15163: LD_ADDR_VAR 0 3
15167: PUSH
15168: LD_INT 0
15170: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15171: LD_INT 35
15173: PPUSH
15174: CALL_OW 67
// p := p + 1 ;
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_VAR 0 3
15187: PUSH
15188: LD_INT 1
15190: PLUS
15191: ST_TO_ADDR
// for i in tmp do
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: LD_VAR 0 2
15201: PUSH
15202: FOR_IN
15203: IFFALSE 15234
// if GetLives ( i ) < 1000 then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 256
15214: PUSH
15215: LD_INT 1000
15217: LESS
15218: IFFALSE 15232
// SetLives ( i , 1000 ) ;
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 1000
15227: PPUSH
15228: CALL_OW 234
15232: GO 15202
15234: POP
15235: POP
// until p > 20 ;
15236: LD_VAR 0 3
15240: PUSH
15241: LD_INT 20
15243: GREATER
15244: IFFALSE 15171
// end ;
15246: PPOPN 3
15248: END
// every 0 0$1 trigger StreamModeActive and sTime do
15249: LD_EXP 32
15253: PUSH
15254: LD_EXP 83
15258: AND
15259: IFFALSE 15294
15261: GO 15263
15263: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15264: LD_INT 28
15266: PPUSH
15267: LD_OWVAR 2
15271: PPUSH
15272: LD_INT 2
15274: PPUSH
15275: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15279: LD_INT 30
15281: PPUSH
15282: LD_OWVAR 2
15286: PPUSH
15287: LD_INT 2
15289: PPUSH
15290: CALL_OW 322
// end ;
15294: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15295: LD_EXP 32
15299: PUSH
15300: LD_EXP 84
15304: AND
15305: IFFALSE 15426
15307: GO 15309
15309: DISABLE
15310: LD_INT 0
15312: PPUSH
15313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15314: LD_ADDR_VAR 0 2
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_OWVAR 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 3
15343: PUSH
15344: LD_INT 23
15346: PUSH
15347: LD_INT 0
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: ST_TO_ADDR
// if not tmp then
15368: LD_VAR 0 2
15372: NOT
15373: IFFALSE 15377
// exit ;
15375: GO 15426
// for i in tmp do
15377: LD_ADDR_VAR 0 1
15381: PUSH
15382: LD_VAR 0 2
15386: PUSH
15387: FOR_IN
15388: IFFALSE 15424
// begin if Crawls ( i ) then
15390: LD_VAR 0 1
15394: PPUSH
15395: CALL_OW 318
15399: IFFALSE 15410
// ComWalk ( i ) ;
15401: LD_VAR 0 1
15405: PPUSH
15406: CALL_OW 138
// SetClass ( i , 2 ) ;
15410: LD_VAR 0 1
15414: PPUSH
15415: LD_INT 2
15417: PPUSH
15418: CALL_OW 336
// end ;
15422: GO 15387
15424: POP
15425: POP
// end ;
15426: PPOPN 2
15428: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15429: LD_EXP 32
15433: PUSH
15434: LD_EXP 85
15438: AND
15439: IFFALSE 15727
15441: GO 15443
15443: DISABLE
15444: LD_INT 0
15446: PPUSH
15447: PPUSH
15448: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15449: LD_OWVAR 2
15453: PPUSH
15454: LD_INT 9
15456: PPUSH
15457: LD_INT 1
15459: PPUSH
15460: LD_INT 1
15462: PPUSH
15463: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15467: LD_INT 9
15469: PPUSH
15470: LD_OWVAR 2
15474: PPUSH
15475: CALL_OW 343
// uc_side := 9 ;
15479: LD_ADDR_OWVAR 20
15483: PUSH
15484: LD_INT 9
15486: ST_TO_ADDR
// uc_nation := 2 ;
15487: LD_ADDR_OWVAR 21
15491: PUSH
15492: LD_INT 2
15494: ST_TO_ADDR
// hc_name := Dark Warrior ;
15495: LD_ADDR_OWVAR 26
15499: PUSH
15500: LD_STRING Dark Warrior
15502: ST_TO_ADDR
// hc_gallery :=  ;
15503: LD_ADDR_OWVAR 33
15507: PUSH
15508: LD_STRING 
15510: ST_TO_ADDR
// hc_noskilllimit := true ;
15511: LD_ADDR_OWVAR 76
15515: PUSH
15516: LD_INT 1
15518: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15519: LD_ADDR_OWVAR 31
15523: PUSH
15524: LD_INT 30
15526: PUSH
15527: LD_INT 30
15529: PUSH
15530: LD_INT 30
15532: PUSH
15533: LD_INT 30
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: ST_TO_ADDR
// un := CreateHuman ;
15542: LD_ADDR_VAR 0 3
15546: PUSH
15547: CALL_OW 44
15551: ST_TO_ADDR
// hc_noskilllimit := false ;
15552: LD_ADDR_OWVAR 76
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15560: LD_VAR 0 3
15564: PPUSH
15565: LD_INT 1
15567: PPUSH
15568: CALL_OW 51
// ToLua ( playRanger() ) ;
15572: LD_STRING playRanger()
15574: PPUSH
15575: CALL_OW 559
// p := 0 ;
15579: LD_ADDR_VAR 0 2
15583: PUSH
15584: LD_INT 0
15586: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15587: LD_INT 35
15589: PPUSH
15590: CALL_OW 67
// p := p + 1 ;
15594: LD_ADDR_VAR 0 2
15598: PUSH
15599: LD_VAR 0 2
15603: PUSH
15604: LD_INT 1
15606: PLUS
15607: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15608: LD_VAR 0 3
15612: PPUSH
15613: CALL_OW 256
15617: PUSH
15618: LD_INT 1000
15620: LESS
15621: IFFALSE 15635
// SetLives ( un , 1000 ) ;
15623: LD_VAR 0 3
15627: PPUSH
15628: LD_INT 1000
15630: PPUSH
15631: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15635: LD_VAR 0 3
15639: PPUSH
15640: LD_INT 81
15642: PUSH
15643: LD_OWVAR 2
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 91
15654: PUSH
15655: LD_VAR 0 3
15659: PUSH
15660: LD_INT 30
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 69
15676: PPUSH
15677: LD_VAR 0 3
15681: PPUSH
15682: CALL_OW 74
15686: PPUSH
15687: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
15691: LD_VAR 0 2
15695: PUSH
15696: LD_INT 80
15698: GREATER
15699: PUSH
15700: LD_VAR 0 3
15704: PPUSH
15705: CALL_OW 301
15709: OR
15710: IFFALSE 15587
// if un then
15712: LD_VAR 0 3
15716: IFFALSE 15727
// RemoveUnit ( un ) ;
15718: LD_VAR 0 3
15722: PPUSH
15723: CALL_OW 64
// end ;
15727: PPOPN 3
15729: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
15730: LD_EXP 86
15734: IFFALSE 15850
15736: GO 15738
15738: DISABLE
15739: LD_INT 0
15741: PPUSH
15742: PPUSH
15743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15744: LD_ADDR_VAR 0 2
15748: PUSH
15749: LD_INT 81
15751: PUSH
15752: LD_OWVAR 2
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 21
15763: PUSH
15764: LD_INT 1
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PPUSH
15775: CALL_OW 69
15779: ST_TO_ADDR
// ToLua ( playComputer() ) ;
15780: LD_STRING playComputer()
15782: PPUSH
15783: CALL_OW 559
// if not tmp then
15787: LD_VAR 0 2
15791: NOT
15792: IFFALSE 15796
// exit ;
15794: GO 15850
// for i in tmp do
15796: LD_ADDR_VAR 0 1
15800: PUSH
15801: LD_VAR 0 2
15805: PUSH
15806: FOR_IN
15807: IFFALSE 15848
// for j := 1 to 4 do
15809: LD_ADDR_VAR 0 3
15813: PUSH
15814: DOUBLE
15815: LD_INT 1
15817: DEC
15818: ST_TO_ADDR
15819: LD_INT 4
15821: PUSH
15822: FOR_TO
15823: IFFALSE 15844
// SetSkill ( i , j , 10 ) ;
15825: LD_VAR 0 1
15829: PPUSH
15830: LD_VAR 0 3
15834: PPUSH
15835: LD_INT 10
15837: PPUSH
15838: CALL_OW 237
15842: GO 15822
15844: POP
15845: POP
15846: GO 15806
15848: POP
15849: POP
// end ;
15850: PPOPN 3
15852: END
// every 0 0$1 trigger s30 do var i , tmp ;
15853: LD_EXP 87
15857: IFFALSE 15926
15859: GO 15861
15861: DISABLE
15862: LD_INT 0
15864: PPUSH
15865: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15866: LD_ADDR_VAR 0 2
15870: PUSH
15871: LD_INT 22
15873: PUSH
15874: LD_OWVAR 2
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: CALL_OW 69
15887: ST_TO_ADDR
// if not tmp then
15888: LD_VAR 0 2
15892: NOT
15893: IFFALSE 15897
// exit ;
15895: GO 15926
// for i in tmp do
15897: LD_ADDR_VAR 0 1
15901: PUSH
15902: LD_VAR 0 2
15906: PUSH
15907: FOR_IN
15908: IFFALSE 15924
// SetLives ( i , 300 ) ;
15910: LD_VAR 0 1
15914: PPUSH
15915: LD_INT 300
15917: PPUSH
15918: CALL_OW 234
15922: GO 15907
15924: POP
15925: POP
// end ;
15926: PPOPN 2
15928: END
// every 0 0$1 trigger s60 do var i , tmp ;
15929: LD_EXP 88
15933: IFFALSE 16002
15935: GO 15937
15937: DISABLE
15938: LD_INT 0
15940: PPUSH
15941: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15942: LD_ADDR_VAR 0 2
15946: PUSH
15947: LD_INT 22
15949: PUSH
15950: LD_OWVAR 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PPUSH
15959: CALL_OW 69
15963: ST_TO_ADDR
// if not tmp then
15964: LD_VAR 0 2
15968: NOT
15969: IFFALSE 15973
// exit ;
15971: GO 16002
// for i in tmp do
15973: LD_ADDR_VAR 0 1
15977: PUSH
15978: LD_VAR 0 2
15982: PUSH
15983: FOR_IN
15984: IFFALSE 16000
// SetLives ( i , 600 ) ;
15986: LD_VAR 0 1
15990: PPUSH
15991: LD_INT 600
15993: PPUSH
15994: CALL_OW 234
15998: GO 15983
16000: POP
16001: POP
// end ;
16002: PPOPN 2
16004: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16005: LD_INT 0
16007: PPUSH
// case cmd of 301 :
16008: LD_VAR 0 1
16012: PUSH
16013: LD_INT 301
16015: DOUBLE
16016: EQUAL
16017: IFTRUE 16021
16019: GO 16053
16021: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16022: LD_VAR 0 6
16026: PPUSH
16027: LD_VAR 0 7
16031: PPUSH
16032: LD_VAR 0 8
16036: PPUSH
16037: LD_VAR 0 4
16041: PPUSH
16042: LD_VAR 0 5
16046: PPUSH
16047: CALL 17254 0 5
16051: GO 16174
16053: LD_INT 302
16055: DOUBLE
16056: EQUAL
16057: IFTRUE 16061
16059: GO 16098
16061: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16062: LD_VAR 0 6
16066: PPUSH
16067: LD_VAR 0 7
16071: PPUSH
16072: LD_VAR 0 8
16076: PPUSH
16077: LD_VAR 0 9
16081: PPUSH
16082: LD_VAR 0 4
16086: PPUSH
16087: LD_VAR 0 5
16091: PPUSH
16092: CALL 17345 0 6
16096: GO 16174
16098: LD_INT 303
16100: DOUBLE
16101: EQUAL
16102: IFTRUE 16106
16104: GO 16143
16106: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16107: LD_VAR 0 6
16111: PPUSH
16112: LD_VAR 0 7
16116: PPUSH
16117: LD_VAR 0 8
16121: PPUSH
16122: LD_VAR 0 9
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: LD_VAR 0 5
16136: PPUSH
16137: CALL 16179 0 6
16141: GO 16174
16143: LD_INT 304
16145: DOUBLE
16146: EQUAL
16147: IFTRUE 16151
16149: GO 16173
16151: POP
// hHackTeleport ( unit , x , y ) ; end ;
16152: LD_VAR 0 2
16156: PPUSH
16157: LD_VAR 0 4
16161: PPUSH
16162: LD_VAR 0 5
16166: PPUSH
16167: CALL 17938 0 3
16171: GO 16174
16173: POP
// end ;
16174: LD_VAR 0 12
16178: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16179: LD_INT 0
16181: PPUSH
16182: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16183: LD_VAR 0 1
16187: PUSH
16188: LD_INT 1
16190: LESS
16191: PUSH
16192: LD_VAR 0 1
16196: PUSH
16197: LD_INT 3
16199: GREATER
16200: OR
16201: PUSH
16202: LD_VAR 0 5
16206: PPUSH
16207: LD_VAR 0 6
16211: PPUSH
16212: CALL_OW 428
16216: OR
16217: IFFALSE 16221
// exit ;
16219: GO 16941
// uc_side := your_side ;
16221: LD_ADDR_OWVAR 20
16225: PUSH
16226: LD_OWVAR 2
16230: ST_TO_ADDR
// uc_nation := nation ;
16231: LD_ADDR_OWVAR 21
16235: PUSH
16236: LD_VAR 0 1
16240: ST_TO_ADDR
// bc_level = 1 ;
16241: LD_ADDR_OWVAR 43
16245: PUSH
16246: LD_INT 1
16248: ST_TO_ADDR
// case btype of 1 :
16249: LD_VAR 0 2
16253: PUSH
16254: LD_INT 1
16256: DOUBLE
16257: EQUAL
16258: IFTRUE 16262
16260: GO 16273
16262: POP
// bc_type := b_depot ; 2 :
16263: LD_ADDR_OWVAR 42
16267: PUSH
16268: LD_INT 0
16270: ST_TO_ADDR
16271: GO 16885
16273: LD_INT 2
16275: DOUBLE
16276: EQUAL
16277: IFTRUE 16281
16279: GO 16292
16281: POP
// bc_type := b_warehouse ; 3 :
16282: LD_ADDR_OWVAR 42
16286: PUSH
16287: LD_INT 1
16289: ST_TO_ADDR
16290: GO 16885
16292: LD_INT 3
16294: DOUBLE
16295: EQUAL
16296: IFTRUE 16300
16298: GO 16311
16300: POP
// bc_type := b_lab ; 4 .. 9 :
16301: LD_ADDR_OWVAR 42
16305: PUSH
16306: LD_INT 6
16308: ST_TO_ADDR
16309: GO 16885
16311: LD_INT 4
16313: DOUBLE
16314: GREATEREQUAL
16315: IFFALSE 16323
16317: LD_INT 9
16319: DOUBLE
16320: LESSEQUAL
16321: IFTRUE 16325
16323: GO 16377
16325: POP
// begin bc_type := b_lab_half ;
16326: LD_ADDR_OWVAR 42
16330: PUSH
16331: LD_INT 7
16333: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16334: LD_ADDR_OWVAR 44
16338: PUSH
16339: LD_INT 10
16341: PUSH
16342: LD_INT 11
16344: PUSH
16345: LD_INT 12
16347: PUSH
16348: LD_INT 15
16350: PUSH
16351: LD_INT 14
16353: PUSH
16354: LD_INT 13
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: PUSH
16365: LD_VAR 0 2
16369: PUSH
16370: LD_INT 3
16372: MINUS
16373: ARRAY
16374: ST_TO_ADDR
// end ; 10 .. 13 :
16375: GO 16885
16377: LD_INT 10
16379: DOUBLE
16380: GREATEREQUAL
16381: IFFALSE 16389
16383: LD_INT 13
16385: DOUBLE
16386: LESSEQUAL
16387: IFTRUE 16391
16389: GO 16468
16391: POP
// begin bc_type := b_lab_full ;
16392: LD_ADDR_OWVAR 42
16396: PUSH
16397: LD_INT 8
16399: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16400: LD_ADDR_OWVAR 44
16404: PUSH
16405: LD_INT 10
16407: PUSH
16408: LD_INT 12
16410: PUSH
16411: LD_INT 14
16413: PUSH
16414: LD_INT 13
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: PUSH
16423: LD_VAR 0 2
16427: PUSH
16428: LD_INT 9
16430: MINUS
16431: ARRAY
16432: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16433: LD_ADDR_OWVAR 45
16437: PUSH
16438: LD_INT 11
16440: PUSH
16441: LD_INT 15
16443: PUSH
16444: LD_INT 12
16446: PUSH
16447: LD_INT 15
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: PUSH
16456: LD_VAR 0 2
16460: PUSH
16461: LD_INT 9
16463: MINUS
16464: ARRAY
16465: ST_TO_ADDR
// end ; 14 :
16466: GO 16885
16468: LD_INT 14
16470: DOUBLE
16471: EQUAL
16472: IFTRUE 16476
16474: GO 16487
16476: POP
// bc_type := b_workshop ; 15 :
16477: LD_ADDR_OWVAR 42
16481: PUSH
16482: LD_INT 2
16484: ST_TO_ADDR
16485: GO 16885
16487: LD_INT 15
16489: DOUBLE
16490: EQUAL
16491: IFTRUE 16495
16493: GO 16506
16495: POP
// bc_type := b_factory ; 16 :
16496: LD_ADDR_OWVAR 42
16500: PUSH
16501: LD_INT 3
16503: ST_TO_ADDR
16504: GO 16885
16506: LD_INT 16
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16525
16514: POP
// bc_type := b_ext_gun ; 17 :
16515: LD_ADDR_OWVAR 42
16519: PUSH
16520: LD_INT 17
16522: ST_TO_ADDR
16523: GO 16885
16525: LD_INT 17
16527: DOUBLE
16528: EQUAL
16529: IFTRUE 16533
16531: GO 16561
16533: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16534: LD_ADDR_OWVAR 42
16538: PUSH
16539: LD_INT 19
16541: PUSH
16542: LD_INT 23
16544: PUSH
16545: LD_INT 19
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: PUSH
16553: LD_VAR 0 1
16557: ARRAY
16558: ST_TO_ADDR
16559: GO 16885
16561: LD_INT 18
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16580
16569: POP
// bc_type := b_ext_radar ; 19 :
16570: LD_ADDR_OWVAR 42
16574: PUSH
16575: LD_INT 20
16577: ST_TO_ADDR
16578: GO 16885
16580: LD_INT 19
16582: DOUBLE
16583: EQUAL
16584: IFTRUE 16588
16586: GO 16599
16588: POP
// bc_type := b_ext_radio ; 20 :
16589: LD_ADDR_OWVAR 42
16593: PUSH
16594: LD_INT 22
16596: ST_TO_ADDR
16597: GO 16885
16599: LD_INT 20
16601: DOUBLE
16602: EQUAL
16603: IFTRUE 16607
16605: GO 16618
16607: POP
// bc_type := b_ext_siberium ; 21 :
16608: LD_ADDR_OWVAR 42
16612: PUSH
16613: LD_INT 21
16615: ST_TO_ADDR
16616: GO 16885
16618: LD_INT 21
16620: DOUBLE
16621: EQUAL
16622: IFTRUE 16626
16624: GO 16637
16626: POP
// bc_type := b_ext_computer ; 22 :
16627: LD_ADDR_OWVAR 42
16631: PUSH
16632: LD_INT 24
16634: ST_TO_ADDR
16635: GO 16885
16637: LD_INT 22
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 16656
16645: POP
// bc_type := b_ext_track ; 23 :
16646: LD_ADDR_OWVAR 42
16650: PUSH
16651: LD_INT 16
16653: ST_TO_ADDR
16654: GO 16885
16656: LD_INT 23
16658: DOUBLE
16659: EQUAL
16660: IFTRUE 16664
16662: GO 16675
16664: POP
// bc_type := b_ext_laser ; 24 :
16665: LD_ADDR_OWVAR 42
16669: PUSH
16670: LD_INT 25
16672: ST_TO_ADDR
16673: GO 16885
16675: LD_INT 24
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16683
16681: GO 16694
16683: POP
// bc_type := b_control_tower ; 25 :
16684: LD_ADDR_OWVAR 42
16688: PUSH
16689: LD_INT 36
16691: ST_TO_ADDR
16692: GO 16885
16694: LD_INT 25
16696: DOUBLE
16697: EQUAL
16698: IFTRUE 16702
16700: GO 16713
16702: POP
// bc_type := b_breastwork ; 26 :
16703: LD_ADDR_OWVAR 42
16707: PUSH
16708: LD_INT 31
16710: ST_TO_ADDR
16711: GO 16885
16713: LD_INT 26
16715: DOUBLE
16716: EQUAL
16717: IFTRUE 16721
16719: GO 16732
16721: POP
// bc_type := b_bunker ; 27 :
16722: LD_ADDR_OWVAR 42
16726: PUSH
16727: LD_INT 32
16729: ST_TO_ADDR
16730: GO 16885
16732: LD_INT 27
16734: DOUBLE
16735: EQUAL
16736: IFTRUE 16740
16738: GO 16751
16740: POP
// bc_type := b_turret ; 28 :
16741: LD_ADDR_OWVAR 42
16745: PUSH
16746: LD_INT 33
16748: ST_TO_ADDR
16749: GO 16885
16751: LD_INT 28
16753: DOUBLE
16754: EQUAL
16755: IFTRUE 16759
16757: GO 16770
16759: POP
// bc_type := b_armoury ; 29 :
16760: LD_ADDR_OWVAR 42
16764: PUSH
16765: LD_INT 4
16767: ST_TO_ADDR
16768: GO 16885
16770: LD_INT 29
16772: DOUBLE
16773: EQUAL
16774: IFTRUE 16778
16776: GO 16789
16778: POP
// bc_type := b_barracks ; 30 :
16779: LD_ADDR_OWVAR 42
16783: PUSH
16784: LD_INT 5
16786: ST_TO_ADDR
16787: GO 16885
16789: LD_INT 30
16791: DOUBLE
16792: EQUAL
16793: IFTRUE 16797
16795: GO 16808
16797: POP
// bc_type := b_solar_power ; 31 :
16798: LD_ADDR_OWVAR 42
16802: PUSH
16803: LD_INT 27
16805: ST_TO_ADDR
16806: GO 16885
16808: LD_INT 31
16810: DOUBLE
16811: EQUAL
16812: IFTRUE 16816
16814: GO 16827
16816: POP
// bc_type := b_oil_power ; 32 :
16817: LD_ADDR_OWVAR 42
16821: PUSH
16822: LD_INT 26
16824: ST_TO_ADDR
16825: GO 16885
16827: LD_INT 32
16829: DOUBLE
16830: EQUAL
16831: IFTRUE 16835
16833: GO 16846
16835: POP
// bc_type := b_siberite_power ; 33 :
16836: LD_ADDR_OWVAR 42
16840: PUSH
16841: LD_INT 28
16843: ST_TO_ADDR
16844: GO 16885
16846: LD_INT 33
16848: DOUBLE
16849: EQUAL
16850: IFTRUE 16854
16852: GO 16865
16854: POP
// bc_type := b_oil_mine ; 34 :
16855: LD_ADDR_OWVAR 42
16859: PUSH
16860: LD_INT 29
16862: ST_TO_ADDR
16863: GO 16885
16865: LD_INT 34
16867: DOUBLE
16868: EQUAL
16869: IFTRUE 16873
16871: GO 16884
16873: POP
// bc_type := b_siberite_mine ; end ;
16874: LD_ADDR_OWVAR 42
16878: PUSH
16879: LD_INT 30
16881: ST_TO_ADDR
16882: GO 16885
16884: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16885: LD_ADDR_VAR 0 8
16889: PUSH
16890: LD_VAR 0 5
16894: PPUSH
16895: LD_VAR 0 6
16899: PPUSH
16900: LD_VAR 0 3
16904: PPUSH
16905: CALL_OW 47
16909: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16910: LD_OWVAR 42
16914: PUSH
16915: LD_INT 32
16917: PUSH
16918: LD_INT 33
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: IN
16925: IFFALSE 16941
// PlaceWeaponTurret ( b , weapon ) ;
16927: LD_VAR 0 8
16931: PPUSH
16932: LD_VAR 0 4
16936: PPUSH
16937: CALL_OW 431
// end ;
16941: LD_VAR 0 7
16945: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16946: LD_INT 0
16948: PPUSH
16949: PPUSH
16950: PPUSH
16951: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16952: LD_ADDR_VAR 0 4
16956: PUSH
16957: LD_INT 22
16959: PUSH
16960: LD_OWVAR 2
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: LD_INT 30
16974: PUSH
16975: LD_INT 0
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 30
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: LIST
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PPUSH
17001: CALL_OW 69
17005: ST_TO_ADDR
// if not tmp then
17006: LD_VAR 0 4
17010: NOT
17011: IFFALSE 17015
// exit ;
17013: GO 17074
// for i in tmp do
17015: LD_ADDR_VAR 0 2
17019: PUSH
17020: LD_VAR 0 4
17024: PUSH
17025: FOR_IN
17026: IFFALSE 17072
// for j = 1 to 3 do
17028: LD_ADDR_VAR 0 3
17032: PUSH
17033: DOUBLE
17034: LD_INT 1
17036: DEC
17037: ST_TO_ADDR
17038: LD_INT 3
17040: PUSH
17041: FOR_TO
17042: IFFALSE 17068
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17044: LD_VAR 0 2
17048: PPUSH
17049: CALL_OW 274
17053: PPUSH
17054: LD_VAR 0 3
17058: PPUSH
17059: LD_INT 99999
17061: PPUSH
17062: CALL_OW 277
17066: GO 17041
17068: POP
17069: POP
17070: GO 17025
17072: POP
17073: POP
// end ;
17074: LD_VAR 0 1
17078: RET
// export function hHackSetLevel10 ; var i , j ; begin
17079: LD_INT 0
17081: PPUSH
17082: PPUSH
17083: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17084: LD_ADDR_VAR 0 2
17088: PUSH
17089: LD_INT 21
17091: PUSH
17092: LD_INT 1
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PPUSH
17099: CALL_OW 69
17103: PUSH
17104: FOR_IN
17105: IFFALSE 17157
// if IsSelected ( i ) then
17107: LD_VAR 0 2
17111: PPUSH
17112: CALL_OW 306
17116: IFFALSE 17155
// begin for j := 1 to 4 do
17118: LD_ADDR_VAR 0 3
17122: PUSH
17123: DOUBLE
17124: LD_INT 1
17126: DEC
17127: ST_TO_ADDR
17128: LD_INT 4
17130: PUSH
17131: FOR_TO
17132: IFFALSE 17153
// SetSkill ( i , j , 10 ) ;
17134: LD_VAR 0 2
17138: PPUSH
17139: LD_VAR 0 3
17143: PPUSH
17144: LD_INT 10
17146: PPUSH
17147: CALL_OW 237
17151: GO 17131
17153: POP
17154: POP
// end ;
17155: GO 17104
17157: POP
17158: POP
// end ;
17159: LD_VAR 0 1
17163: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17164: LD_INT 0
17166: PPUSH
17167: PPUSH
17168: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17169: LD_ADDR_VAR 0 2
17173: PUSH
17174: LD_INT 22
17176: PUSH
17177: LD_OWVAR 2
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 21
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: PUSH
17205: FOR_IN
17206: IFFALSE 17247
// begin for j := 1 to 4 do
17208: LD_ADDR_VAR 0 3
17212: PUSH
17213: DOUBLE
17214: LD_INT 1
17216: DEC
17217: ST_TO_ADDR
17218: LD_INT 4
17220: PUSH
17221: FOR_TO
17222: IFFALSE 17243
// SetSkill ( i , j , 10 ) ;
17224: LD_VAR 0 2
17228: PPUSH
17229: LD_VAR 0 3
17233: PPUSH
17234: LD_INT 10
17236: PPUSH
17237: CALL_OW 237
17241: GO 17221
17243: POP
17244: POP
// end ;
17245: GO 17205
17247: POP
17248: POP
// end ;
17249: LD_VAR 0 1
17253: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17254: LD_INT 0
17256: PPUSH
// uc_side := your_side ;
17257: LD_ADDR_OWVAR 20
17261: PUSH
17262: LD_OWVAR 2
17266: ST_TO_ADDR
// uc_nation := nation ;
17267: LD_ADDR_OWVAR 21
17271: PUSH
17272: LD_VAR 0 1
17276: ST_TO_ADDR
// InitHc ;
17277: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17281: LD_INT 0
17283: PPUSH
17284: LD_VAR 0 2
17288: PPUSH
17289: LD_VAR 0 3
17293: PPUSH
17294: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17298: LD_VAR 0 4
17302: PPUSH
17303: LD_VAR 0 5
17307: PPUSH
17308: CALL_OW 428
17312: PUSH
17313: LD_INT 0
17315: EQUAL
17316: IFFALSE 17340
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17318: CALL_OW 44
17322: PPUSH
17323: LD_VAR 0 4
17327: PPUSH
17328: LD_VAR 0 5
17332: PPUSH
17333: LD_INT 1
17335: PPUSH
17336: CALL_OW 48
// end ;
17340: LD_VAR 0 6
17344: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17345: LD_INT 0
17347: PPUSH
17348: PPUSH
// uc_side := your_side ;
17349: LD_ADDR_OWVAR 20
17353: PUSH
17354: LD_OWVAR 2
17358: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17359: LD_VAR 0 1
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 4
17375: PUSH
17376: LD_INT 5
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: IN
17386: IFFALSE 17398
// uc_nation := nation_american else
17388: LD_ADDR_OWVAR 21
17392: PUSH
17393: LD_INT 1
17395: ST_TO_ADDR
17396: GO 17441
// if chassis in [ 11 , 12 , 13 , 14 ] then
17398: LD_VAR 0 1
17402: PUSH
17403: LD_INT 11
17405: PUSH
17406: LD_INT 12
17408: PUSH
17409: LD_INT 13
17411: PUSH
17412: LD_INT 14
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: IN
17421: IFFALSE 17433
// uc_nation := nation_arabian else
17423: LD_ADDR_OWVAR 21
17427: PUSH
17428: LD_INT 2
17430: ST_TO_ADDR
17431: GO 17441
// uc_nation := nation_russian ;
17433: LD_ADDR_OWVAR 21
17437: PUSH
17438: LD_INT 3
17440: ST_TO_ADDR
// vc_chassis := chassis ;
17441: LD_ADDR_OWVAR 37
17445: PUSH
17446: LD_VAR 0 1
17450: ST_TO_ADDR
// vc_engine := engine ;
17451: LD_ADDR_OWVAR 39
17455: PUSH
17456: LD_VAR 0 2
17460: ST_TO_ADDR
// vc_control := control ;
17461: LD_ADDR_OWVAR 38
17465: PUSH
17466: LD_VAR 0 3
17470: ST_TO_ADDR
// vc_weapon := weapon ;
17471: LD_ADDR_OWVAR 40
17475: PUSH
17476: LD_VAR 0 4
17480: ST_TO_ADDR
// un := CreateVehicle ;
17481: LD_ADDR_VAR 0 8
17485: PUSH
17486: CALL_OW 45
17490: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17491: LD_VAR 0 8
17495: PPUSH
17496: LD_INT 0
17498: PPUSH
17499: LD_INT 5
17501: PPUSH
17502: CALL_OW 12
17506: PPUSH
17507: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17511: LD_VAR 0 8
17515: PPUSH
17516: LD_VAR 0 5
17520: PPUSH
17521: LD_VAR 0 6
17525: PPUSH
17526: LD_INT 1
17528: PPUSH
17529: CALL_OW 48
// end ;
17533: LD_VAR 0 7
17537: RET
// export hInvincible ; every 1 do
17538: GO 17540
17540: DISABLE
// hInvincible := [ ] ;
17541: LD_ADDR_EXP 89
17545: PUSH
17546: EMPTY
17547: ST_TO_ADDR
17548: END
// every 10 do var i ;
17549: GO 17551
17551: DISABLE
17552: LD_INT 0
17554: PPUSH
// begin enable ;
17555: ENABLE
// if not hInvincible then
17556: LD_EXP 89
17560: NOT
17561: IFFALSE 17565
// exit ;
17563: GO 17609
// for i in hInvincible do
17565: LD_ADDR_VAR 0 1
17569: PUSH
17570: LD_EXP 89
17574: PUSH
17575: FOR_IN
17576: IFFALSE 17607
// if GetLives ( i ) < 1000 then
17578: LD_VAR 0 1
17582: PPUSH
17583: CALL_OW 256
17587: PUSH
17588: LD_INT 1000
17590: LESS
17591: IFFALSE 17605
// SetLives ( i , 1000 ) ;
17593: LD_VAR 0 1
17597: PPUSH
17598: LD_INT 1000
17600: PPUSH
17601: CALL_OW 234
17605: GO 17575
17607: POP
17608: POP
// end ;
17609: PPOPN 1
17611: END
// export function hHackInvincible ; var i ; begin
17612: LD_INT 0
17614: PPUSH
17615: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17616: LD_ADDR_VAR 0 2
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 21
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 21
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: PPUSH
17649: CALL_OW 69
17653: PUSH
17654: FOR_IN
17655: IFFALSE 17716
// if IsSelected ( i ) then
17657: LD_VAR 0 2
17661: PPUSH
17662: CALL_OW 306
17666: IFFALSE 17714
// begin if i in hInvincible then
17668: LD_VAR 0 2
17672: PUSH
17673: LD_EXP 89
17677: IN
17678: IFFALSE 17698
// hInvincible := hInvincible diff i else
17680: LD_ADDR_EXP 89
17684: PUSH
17685: LD_EXP 89
17689: PUSH
17690: LD_VAR 0 2
17694: DIFF
17695: ST_TO_ADDR
17696: GO 17714
// hInvincible := hInvincible union i ;
17698: LD_ADDR_EXP 89
17702: PUSH
17703: LD_EXP 89
17707: PUSH
17708: LD_VAR 0 2
17712: UNION
17713: ST_TO_ADDR
// end ;
17714: GO 17654
17716: POP
17717: POP
// end ;
17718: LD_VAR 0 1
17722: RET
// export function hHackInvisible ; var i , j ; begin
17723: LD_INT 0
17725: PPUSH
17726: PPUSH
17727: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_INT 21
17735: PUSH
17736: LD_INT 1
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PPUSH
17743: CALL_OW 69
17747: PUSH
17748: FOR_IN
17749: IFFALSE 17773
// if IsSelected ( i ) then
17751: LD_VAR 0 2
17755: PPUSH
17756: CALL_OW 306
17760: IFFALSE 17771
// ComForceInvisible ( i ) ;
17762: LD_VAR 0 2
17766: PPUSH
17767: CALL_OW 496
17771: GO 17748
17773: POP
17774: POP
// end ;
17775: LD_VAR 0 1
17779: RET
// export function hHackChangeYourSide ; begin
17780: LD_INT 0
17782: PPUSH
// if your_side = 8 then
17783: LD_OWVAR 2
17787: PUSH
17788: LD_INT 8
17790: EQUAL
17791: IFFALSE 17803
// your_side := 0 else
17793: LD_ADDR_OWVAR 2
17797: PUSH
17798: LD_INT 0
17800: ST_TO_ADDR
17801: GO 17817
// your_side := your_side + 1 ;
17803: LD_ADDR_OWVAR 2
17807: PUSH
17808: LD_OWVAR 2
17812: PUSH
17813: LD_INT 1
17815: PLUS
17816: ST_TO_ADDR
// end ;
17817: LD_VAR 0 1
17821: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17822: LD_INT 0
17824: PPUSH
17825: PPUSH
17826: PPUSH
// for i in all_units do
17827: LD_ADDR_VAR 0 2
17831: PUSH
17832: LD_OWVAR 3
17836: PUSH
17837: FOR_IN
17838: IFFALSE 17916
// if IsSelected ( i ) then
17840: LD_VAR 0 2
17844: PPUSH
17845: CALL_OW 306
17849: IFFALSE 17914
// begin j := GetSide ( i ) ;
17851: LD_ADDR_VAR 0 3
17855: PUSH
17856: LD_VAR 0 2
17860: PPUSH
17861: CALL_OW 255
17865: ST_TO_ADDR
// if j = 8 then
17866: LD_VAR 0 3
17870: PUSH
17871: LD_INT 8
17873: EQUAL
17874: IFFALSE 17886
// j := 0 else
17876: LD_ADDR_VAR 0 3
17880: PUSH
17881: LD_INT 0
17883: ST_TO_ADDR
17884: GO 17900
// j := j + 1 ;
17886: LD_ADDR_VAR 0 3
17890: PUSH
17891: LD_VAR 0 3
17895: PUSH
17896: LD_INT 1
17898: PLUS
17899: ST_TO_ADDR
// SetSide ( i , j ) ;
17900: LD_VAR 0 2
17904: PPUSH
17905: LD_VAR 0 3
17909: PPUSH
17910: CALL_OW 235
// end ;
17914: GO 17837
17916: POP
17917: POP
// end ;
17918: LD_VAR 0 1
17922: RET
// export function hHackFog ; begin
17923: LD_INT 0
17925: PPUSH
// FogOff ( true ) ;
17926: LD_INT 1
17928: PPUSH
17929: CALL_OW 344
// end ;
17933: LD_VAR 0 1
17937: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17938: LD_INT 0
17940: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17941: LD_VAR 0 1
17945: PPUSH
17946: LD_VAR 0 2
17950: PPUSH
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: CALL_OW 483
// CenterOnXY ( x , y ) ;
17966: LD_VAR 0 2
17970: PPUSH
17971: LD_VAR 0 3
17975: PPUSH
17976: CALL_OW 84
// end ; end_of_file
17980: LD_VAR 0 4
17984: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17985: LD_INT 0
17987: PPUSH
17988: PPUSH
// if exist_mode then
17989: LD_VAR 0 2
17993: IFFALSE 18018
// unit := CreateCharacter ( prefix & ident ) else
17995: LD_ADDR_VAR 0 5
17999: PUSH
18000: LD_VAR 0 3
18004: PUSH
18005: LD_VAR 0 1
18009: STR
18010: PPUSH
18011: CALL_OW 34
18015: ST_TO_ADDR
18016: GO 18033
// unit := NewCharacter ( ident ) ;
18018: LD_ADDR_VAR 0 5
18022: PUSH
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 25
18032: ST_TO_ADDR
// result := unit ;
18033: LD_ADDR_VAR 0 4
18037: PUSH
18038: LD_VAR 0 5
18042: ST_TO_ADDR
// end ;
18043: LD_VAR 0 4
18047: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
18048: LD_INT 0
18050: PPUSH
18051: PPUSH
// if not side or not nation then
18052: LD_VAR 0 1
18056: NOT
18057: PUSH
18058: LD_VAR 0 2
18062: NOT
18063: OR
18064: IFFALSE 18068
// exit ;
18066: GO 18836
// case nation of nation_american :
18068: LD_VAR 0 2
18072: PUSH
18073: LD_INT 1
18075: DOUBLE
18076: EQUAL
18077: IFTRUE 18081
18079: GO 18295
18081: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
18082: LD_ADDR_VAR 0 4
18086: PUSH
18087: LD_INT 35
18089: PUSH
18090: LD_INT 45
18092: PUSH
18093: LD_INT 46
18095: PUSH
18096: LD_INT 47
18098: PUSH
18099: LD_INT 82
18101: PUSH
18102: LD_INT 83
18104: PUSH
18105: LD_INT 84
18107: PUSH
18108: LD_INT 85
18110: PUSH
18111: LD_INT 86
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: LD_INT 2
18119: PUSH
18120: LD_INT 6
18122: PUSH
18123: LD_INT 15
18125: PUSH
18126: LD_INT 16
18128: PUSH
18129: LD_INT 7
18131: PUSH
18132: LD_INT 12
18134: PUSH
18135: LD_INT 13
18137: PUSH
18138: LD_INT 10
18140: PUSH
18141: LD_INT 14
18143: PUSH
18144: LD_INT 20
18146: PUSH
18147: LD_INT 21
18149: PUSH
18150: LD_INT 22
18152: PUSH
18153: LD_INT 25
18155: PUSH
18156: LD_INT 32
18158: PUSH
18159: LD_INT 27
18161: PUSH
18162: LD_INT 36
18164: PUSH
18165: LD_INT 69
18167: PUSH
18168: LD_INT 39
18170: PUSH
18171: LD_INT 34
18173: PUSH
18174: LD_INT 40
18176: PUSH
18177: LD_INT 48
18179: PUSH
18180: LD_INT 49
18182: PUSH
18183: LD_INT 50
18185: PUSH
18186: LD_INT 51
18188: PUSH
18189: LD_INT 52
18191: PUSH
18192: LD_INT 53
18194: PUSH
18195: LD_INT 54
18197: PUSH
18198: LD_INT 55
18200: PUSH
18201: LD_INT 56
18203: PUSH
18204: LD_INT 57
18206: PUSH
18207: LD_INT 58
18209: PUSH
18210: LD_INT 59
18212: PUSH
18213: LD_INT 60
18215: PUSH
18216: LD_INT 61
18218: PUSH
18219: LD_INT 62
18221: PUSH
18222: LD_INT 80
18224: PUSH
18225: LD_INT 82
18227: PUSH
18228: LD_INT 83
18230: PUSH
18231: LD_INT 84
18233: PUSH
18234: LD_INT 85
18236: PUSH
18237: LD_INT 86
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: ST_TO_ADDR
18293: GO 18760
18295: LD_INT 2
18297: DOUBLE
18298: EQUAL
18299: IFTRUE 18303
18301: GO 18529
18303: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
18304: LD_ADDR_VAR 0 4
18308: PUSH
18309: LD_INT 35
18311: PUSH
18312: LD_INT 45
18314: PUSH
18315: LD_INT 46
18317: PUSH
18318: LD_INT 47
18320: PUSH
18321: LD_INT 82
18323: PUSH
18324: LD_INT 83
18326: PUSH
18327: LD_INT 84
18329: PUSH
18330: LD_INT 85
18332: PUSH
18333: LD_INT 87
18335: PUSH
18336: LD_INT 70
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: LD_INT 11
18344: PUSH
18345: LD_INT 3
18347: PUSH
18348: LD_INT 4
18350: PUSH
18351: LD_INT 5
18353: PUSH
18354: LD_INT 6
18356: PUSH
18357: LD_INT 15
18359: PUSH
18360: LD_INT 18
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: LD_INT 17
18368: PUSH
18369: LD_INT 8
18371: PUSH
18372: LD_INT 20
18374: PUSH
18375: LD_INT 21
18377: PUSH
18378: LD_INT 22
18380: PUSH
18381: LD_INT 72
18383: PUSH
18384: LD_INT 26
18386: PUSH
18387: LD_INT 69
18389: PUSH
18390: LD_INT 39
18392: PUSH
18393: LD_INT 40
18395: PUSH
18396: LD_INT 41
18398: PUSH
18399: LD_INT 42
18401: PUSH
18402: LD_INT 43
18404: PUSH
18405: LD_INT 48
18407: PUSH
18408: LD_INT 49
18410: PUSH
18411: LD_INT 50
18413: PUSH
18414: LD_INT 51
18416: PUSH
18417: LD_INT 52
18419: PUSH
18420: LD_INT 53
18422: PUSH
18423: LD_INT 54
18425: PUSH
18426: LD_INT 55
18428: PUSH
18429: LD_INT 56
18431: PUSH
18432: LD_INT 60
18434: PUSH
18435: LD_INT 61
18437: PUSH
18438: LD_INT 62
18440: PUSH
18441: LD_INT 66
18443: PUSH
18444: LD_INT 67
18446: PUSH
18447: LD_INT 68
18449: PUSH
18450: LD_INT 81
18452: PUSH
18453: LD_INT 82
18455: PUSH
18456: LD_INT 83
18458: PUSH
18459: LD_INT 84
18461: PUSH
18462: LD_INT 85
18464: PUSH
18465: LD_INT 87
18467: PUSH
18468: LD_INT 88
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: ST_TO_ADDR
18527: GO 18760
18529: LD_INT 3
18531: DOUBLE
18532: EQUAL
18533: IFTRUE 18537
18535: GO 18759
18537: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
18538: LD_ADDR_VAR 0 4
18542: PUSH
18543: LD_INT 46
18545: PUSH
18546: LD_INT 47
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: LD_INT 2
18554: PUSH
18555: LD_INT 82
18557: PUSH
18558: LD_INT 83
18560: PUSH
18561: LD_INT 84
18563: PUSH
18564: LD_INT 85
18566: PUSH
18567: LD_INT 86
18569: PUSH
18570: LD_INT 11
18572: PUSH
18573: LD_INT 9
18575: PUSH
18576: LD_INT 20
18578: PUSH
18579: LD_INT 19
18581: PUSH
18582: LD_INT 21
18584: PUSH
18585: LD_INT 24
18587: PUSH
18588: LD_INT 22
18590: PUSH
18591: LD_INT 25
18593: PUSH
18594: LD_INT 28
18596: PUSH
18597: LD_INT 29
18599: PUSH
18600: LD_INT 30
18602: PUSH
18603: LD_INT 31
18605: PUSH
18606: LD_INT 37
18608: PUSH
18609: LD_INT 38
18611: PUSH
18612: LD_INT 32
18614: PUSH
18615: LD_INT 27
18617: PUSH
18618: LD_INT 33
18620: PUSH
18621: LD_INT 69
18623: PUSH
18624: LD_INT 39
18626: PUSH
18627: LD_INT 34
18629: PUSH
18630: LD_INT 40
18632: PUSH
18633: LD_INT 71
18635: PUSH
18636: LD_INT 23
18638: PUSH
18639: LD_INT 44
18641: PUSH
18642: LD_INT 48
18644: PUSH
18645: LD_INT 49
18647: PUSH
18648: LD_INT 50
18650: PUSH
18651: LD_INT 51
18653: PUSH
18654: LD_INT 52
18656: PUSH
18657: LD_INT 53
18659: PUSH
18660: LD_INT 54
18662: PUSH
18663: LD_INT 55
18665: PUSH
18666: LD_INT 56
18668: PUSH
18669: LD_INT 57
18671: PUSH
18672: LD_INT 58
18674: PUSH
18675: LD_INT 59
18677: PUSH
18678: LD_INT 63
18680: PUSH
18681: LD_INT 64
18683: PUSH
18684: LD_INT 65
18686: PUSH
18687: LD_INT 82
18689: PUSH
18690: LD_INT 83
18692: PUSH
18693: LD_INT 84
18695: PUSH
18696: LD_INT 85
18698: PUSH
18699: LD_INT 86
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: ST_TO_ADDR
18757: GO 18760
18759: POP
// if state > - 1 and state < 3 then
18760: LD_VAR 0 3
18764: PUSH
18765: LD_INT 1
18767: NEG
18768: GREATER
18769: PUSH
18770: LD_VAR 0 3
18774: PUSH
18775: LD_INT 3
18777: LESS
18778: AND
18779: IFFALSE 18836
// for i in result do
18781: LD_ADDR_VAR 0 5
18785: PUSH
18786: LD_VAR 0 4
18790: PUSH
18791: FOR_IN
18792: IFFALSE 18834
// if GetTech ( i , side ) <> state then
18794: LD_VAR 0 5
18798: PPUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 321
18808: PUSH
18809: LD_VAR 0 3
18813: NONEQUAL
18814: IFFALSE 18832
// result := result diff i ;
18816: LD_ADDR_VAR 0 4
18820: PUSH
18821: LD_VAR 0 4
18825: PUSH
18826: LD_VAR 0 5
18830: DIFF
18831: ST_TO_ADDR
18832: GO 18791
18834: POP
18835: POP
// end ;
18836: LD_VAR 0 4
18840: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18841: LD_INT 0
18843: PPUSH
18844: PPUSH
18845: PPUSH
// result := true ;
18846: LD_ADDR_VAR 0 3
18850: PUSH
18851: LD_INT 1
18853: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18854: LD_ADDR_VAR 0 5
18858: PUSH
18859: LD_VAR 0 2
18863: PPUSH
18864: CALL_OW 480
18868: ST_TO_ADDR
// if not tmp then
18869: LD_VAR 0 5
18873: NOT
18874: IFFALSE 18878
// exit ;
18876: GO 18927
// for i in tmp do
18878: LD_ADDR_VAR 0 4
18882: PUSH
18883: LD_VAR 0 5
18887: PUSH
18888: FOR_IN
18889: IFFALSE 18925
// if GetTech ( i , side ) <> state_researched then
18891: LD_VAR 0 4
18895: PPUSH
18896: LD_VAR 0 1
18900: PPUSH
18901: CALL_OW 321
18905: PUSH
18906: LD_INT 2
18908: NONEQUAL
18909: IFFALSE 18923
// begin result := false ;
18911: LD_ADDR_VAR 0 3
18915: PUSH
18916: LD_INT 0
18918: ST_TO_ADDR
// exit ;
18919: POP
18920: POP
18921: GO 18927
// end ;
18923: GO 18888
18925: POP
18926: POP
// end ;
18927: LD_VAR 0 3
18931: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18932: LD_INT 0
18934: PPUSH
18935: PPUSH
18936: PPUSH
18937: PPUSH
18938: PPUSH
18939: PPUSH
18940: PPUSH
18941: PPUSH
18942: PPUSH
18943: PPUSH
18944: PPUSH
18945: PPUSH
18946: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18947: LD_VAR 0 1
18951: NOT
18952: PUSH
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 257
18962: PUSH
18963: LD_INT 9
18965: NONEQUAL
18966: OR
18967: IFFALSE 18971
// exit ;
18969: GO 19544
// side := GetSide ( unit ) ;
18971: LD_ADDR_VAR 0 9
18975: PUSH
18976: LD_VAR 0 1
18980: PPUSH
18981: CALL_OW 255
18985: ST_TO_ADDR
// tech_space := tech_spacanom ;
18986: LD_ADDR_VAR 0 12
18990: PUSH
18991: LD_INT 29
18993: ST_TO_ADDR
// tech_time := tech_taurad ;
18994: LD_ADDR_VAR 0 13
18998: PUSH
18999: LD_INT 28
19001: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
19002: LD_ADDR_VAR 0 11
19006: PUSH
19007: LD_VAR 0 1
19011: PPUSH
19012: CALL_OW 310
19016: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
19017: LD_VAR 0 11
19021: PPUSH
19022: CALL_OW 247
19026: PUSH
19027: LD_INT 2
19029: EQUAL
19030: IFFALSE 19034
// exit ;
19032: GO 19544
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19034: LD_ADDR_VAR 0 8
19038: PUSH
19039: LD_INT 81
19041: PUSH
19042: LD_VAR 0 9
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 3
19053: PUSH
19054: LD_INT 21
19056: PUSH
19057: LD_INT 3
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: ST_TO_ADDR
// if not tmp then
19077: LD_VAR 0 8
19081: NOT
19082: IFFALSE 19086
// exit ;
19084: GO 19544
// if in_unit then
19086: LD_VAR 0 11
19090: IFFALSE 19114
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
19092: LD_ADDR_VAR 0 10
19096: PUSH
19097: LD_VAR 0 8
19101: PPUSH
19102: LD_VAR 0 11
19106: PPUSH
19107: CALL_OW 74
19111: ST_TO_ADDR
19112: GO 19134
// enemy := NearestUnitToUnit ( tmp , unit ) ;
19114: LD_ADDR_VAR 0 10
19118: PUSH
19119: LD_VAR 0 8
19123: PPUSH
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL_OW 74
19133: ST_TO_ADDR
// if not enemy then
19134: LD_VAR 0 10
19138: NOT
19139: IFFALSE 19143
// exit ;
19141: GO 19544
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
19143: LD_VAR 0 11
19147: PUSH
19148: LD_VAR 0 11
19152: PPUSH
19153: LD_VAR 0 10
19157: PPUSH
19158: CALL_OW 296
19162: PUSH
19163: LD_INT 13
19165: GREATER
19166: AND
19167: PUSH
19168: LD_VAR 0 1
19172: PPUSH
19173: LD_VAR 0 10
19177: PPUSH
19178: CALL_OW 296
19182: PUSH
19183: LD_INT 12
19185: GREATER
19186: OR
19187: IFFALSE 19191
// exit ;
19189: GO 19544
// missile := [ 1 ] ;
19191: LD_ADDR_VAR 0 14
19195: PUSH
19196: LD_INT 1
19198: PUSH
19199: EMPTY
19200: LIST
19201: ST_TO_ADDR
// if Researched ( side , tech_space ) then
19202: LD_VAR 0 9
19206: PPUSH
19207: LD_VAR 0 12
19211: PPUSH
19212: CALL_OW 325
19216: IFFALSE 19245
// missile := Insert ( missile , missile + 1 , 2 ) ;
19218: LD_ADDR_VAR 0 14
19222: PUSH
19223: LD_VAR 0 14
19227: PPUSH
19228: LD_VAR 0 14
19232: PUSH
19233: LD_INT 1
19235: PLUS
19236: PPUSH
19237: LD_INT 2
19239: PPUSH
19240: CALL_OW 2
19244: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
19245: LD_VAR 0 9
19249: PPUSH
19250: LD_VAR 0 13
19254: PPUSH
19255: CALL_OW 325
19259: PUSH
19260: LD_VAR 0 10
19264: PPUSH
19265: CALL_OW 255
19269: PPUSH
19270: LD_VAR 0 13
19274: PPUSH
19275: CALL_OW 325
19279: NOT
19280: AND
19281: IFFALSE 19310
// missile := Insert ( missile , missile + 1 , 3 ) ;
19283: LD_ADDR_VAR 0 14
19287: PUSH
19288: LD_VAR 0 14
19292: PPUSH
19293: LD_VAR 0 14
19297: PUSH
19298: LD_INT 1
19300: PLUS
19301: PPUSH
19302: LD_INT 3
19304: PPUSH
19305: CALL_OW 2
19309: ST_TO_ADDR
// if missile < 2 then
19310: LD_VAR 0 14
19314: PUSH
19315: LD_INT 2
19317: LESS
19318: IFFALSE 19322
// exit ;
19320: GO 19544
// x := GetX ( enemy ) ;
19322: LD_ADDR_VAR 0 4
19326: PUSH
19327: LD_VAR 0 10
19331: PPUSH
19332: CALL_OW 250
19336: ST_TO_ADDR
// y := GetY ( enemy ) ;
19337: LD_ADDR_VAR 0 5
19341: PUSH
19342: LD_VAR 0 10
19346: PPUSH
19347: CALL_OW 251
19351: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19352: LD_ADDR_VAR 0 6
19356: PUSH
19357: LD_VAR 0 4
19361: PUSH
19362: LD_INT 1
19364: NEG
19365: PPUSH
19366: LD_INT 1
19368: PPUSH
19369: CALL_OW 12
19373: PLUS
19374: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19375: LD_ADDR_VAR 0 7
19379: PUSH
19380: LD_VAR 0 5
19384: PUSH
19385: LD_INT 1
19387: NEG
19388: PPUSH
19389: LD_INT 1
19391: PPUSH
19392: CALL_OW 12
19396: PLUS
19397: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19398: LD_VAR 0 6
19402: PPUSH
19403: LD_VAR 0 7
19407: PPUSH
19408: CALL_OW 488
19412: NOT
19413: IFFALSE 19435
// begin _x := x ;
19415: LD_ADDR_VAR 0 6
19419: PUSH
19420: LD_VAR 0 4
19424: ST_TO_ADDR
// _y := y ;
19425: LD_ADDR_VAR 0 7
19429: PUSH
19430: LD_VAR 0 5
19434: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19435: LD_ADDR_VAR 0 3
19439: PUSH
19440: LD_INT 1
19442: PPUSH
19443: LD_VAR 0 14
19447: PPUSH
19448: CALL_OW 12
19452: ST_TO_ADDR
// case i of 1 :
19453: LD_VAR 0 3
19457: PUSH
19458: LD_INT 1
19460: DOUBLE
19461: EQUAL
19462: IFTRUE 19466
19464: GO 19483
19466: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19467: LD_VAR 0 1
19471: PPUSH
19472: LD_VAR 0 10
19476: PPUSH
19477: CALL_OW 115
19481: GO 19544
19483: LD_INT 2
19485: DOUBLE
19486: EQUAL
19487: IFTRUE 19491
19489: GO 19513
19491: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19492: LD_VAR 0 1
19496: PPUSH
19497: LD_VAR 0 6
19501: PPUSH
19502: LD_VAR 0 7
19506: PPUSH
19507: CALL_OW 153
19511: GO 19544
19513: LD_INT 3
19515: DOUBLE
19516: EQUAL
19517: IFTRUE 19521
19519: GO 19543
19521: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19522: LD_VAR 0 1
19526: PPUSH
19527: LD_VAR 0 6
19531: PPUSH
19532: LD_VAR 0 7
19536: PPUSH
19537: CALL_OW 154
19541: GO 19544
19543: POP
// end ;
19544: LD_VAR 0 2
19548: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19549: LD_INT 0
19551: PPUSH
19552: PPUSH
19553: PPUSH
19554: PPUSH
19555: PPUSH
19556: PPUSH
// if not unit or not building then
19557: LD_VAR 0 1
19561: NOT
19562: PUSH
19563: LD_VAR 0 2
19567: NOT
19568: OR
19569: IFFALSE 19573
// exit ;
19571: GO 19731
// x := GetX ( building ) ;
19573: LD_ADDR_VAR 0 5
19577: PUSH
19578: LD_VAR 0 2
19582: PPUSH
19583: CALL_OW 250
19587: ST_TO_ADDR
// y := GetY ( building ) ;
19588: LD_ADDR_VAR 0 6
19592: PUSH
19593: LD_VAR 0 2
19597: PPUSH
19598: CALL_OW 251
19602: ST_TO_ADDR
// for i = 0 to 5 do
19603: LD_ADDR_VAR 0 4
19607: PUSH
19608: DOUBLE
19609: LD_INT 0
19611: DEC
19612: ST_TO_ADDR
19613: LD_INT 5
19615: PUSH
19616: FOR_TO
19617: IFFALSE 19729
// begin _x := ShiftX ( x , i , 3 ) ;
19619: LD_ADDR_VAR 0 7
19623: PUSH
19624: LD_VAR 0 5
19628: PPUSH
19629: LD_VAR 0 4
19633: PPUSH
19634: LD_INT 3
19636: PPUSH
19637: CALL_OW 272
19641: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19642: LD_ADDR_VAR 0 8
19646: PUSH
19647: LD_VAR 0 6
19651: PPUSH
19652: LD_VAR 0 4
19656: PPUSH
19657: LD_INT 3
19659: PPUSH
19660: CALL_OW 273
19664: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19665: LD_VAR 0 7
19669: PPUSH
19670: LD_VAR 0 8
19674: PPUSH
19675: CALL_OW 488
19679: NOT
19680: IFFALSE 19684
// continue ;
19682: GO 19616
// if HexInfo ( _x , _y ) = 0 then
19684: LD_VAR 0 7
19688: PPUSH
19689: LD_VAR 0 8
19693: PPUSH
19694: CALL_OW 428
19698: PUSH
19699: LD_INT 0
19701: EQUAL
19702: IFFALSE 19727
// begin ComMoveXY ( unit , _x , _y ) ;
19704: LD_VAR 0 1
19708: PPUSH
19709: LD_VAR 0 7
19713: PPUSH
19714: LD_VAR 0 8
19718: PPUSH
19719: CALL_OW 111
// exit ;
19723: POP
19724: POP
19725: GO 19731
// end ; end ;
19727: GO 19616
19729: POP
19730: POP
// end ;
19731: LD_VAR 0 3
19735: RET
// export function ScanBase ( side , base_area ) ; begin
19736: LD_INT 0
19738: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19739: LD_ADDR_VAR 0 3
19743: PUSH
19744: LD_VAR 0 2
19748: PPUSH
19749: LD_INT 81
19751: PUSH
19752: LD_VAR 0 1
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PPUSH
19761: CALL_OW 70
19765: ST_TO_ADDR
// end ;
19766: LD_VAR 0 3
19770: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19771: LD_INT 0
19773: PPUSH
19774: PPUSH
19775: PPUSH
19776: PPUSH
// result := false ;
19777: LD_ADDR_VAR 0 2
19781: PUSH
19782: LD_INT 0
19784: ST_TO_ADDR
// side := GetSide ( unit ) ;
19785: LD_ADDR_VAR 0 3
19789: PUSH
19790: LD_VAR 0 1
19794: PPUSH
19795: CALL_OW 255
19799: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19800: LD_ADDR_VAR 0 4
19804: PUSH
19805: LD_VAR 0 1
19809: PPUSH
19810: CALL_OW 248
19814: ST_TO_ADDR
// case nat of 1 :
19815: LD_VAR 0 4
19819: PUSH
19820: LD_INT 1
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19839
19828: POP
// tech := tech_lassight ; 2 :
19829: LD_ADDR_VAR 0 5
19833: PUSH
19834: LD_INT 12
19836: ST_TO_ADDR
19837: GO 19878
19839: LD_INT 2
19841: DOUBLE
19842: EQUAL
19843: IFTRUE 19847
19845: GO 19858
19847: POP
// tech := tech_mortar ; 3 :
19848: LD_ADDR_VAR 0 5
19852: PUSH
19853: LD_INT 41
19855: ST_TO_ADDR
19856: GO 19878
19858: LD_INT 3
19860: DOUBLE
19861: EQUAL
19862: IFTRUE 19866
19864: GO 19877
19866: POP
// tech := tech_bazooka ; end ;
19867: LD_ADDR_VAR 0 5
19871: PUSH
19872: LD_INT 44
19874: ST_TO_ADDR
19875: GO 19878
19877: POP
// if Researched ( side , tech ) then
19878: LD_VAR 0 3
19882: PPUSH
19883: LD_VAR 0 5
19887: PPUSH
19888: CALL_OW 325
19892: IFFALSE 19919
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19894: LD_ADDR_VAR 0 2
19898: PUSH
19899: LD_INT 5
19901: PUSH
19902: LD_INT 8
19904: PUSH
19905: LD_INT 9
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: PUSH
19913: LD_VAR 0 4
19917: ARRAY
19918: ST_TO_ADDR
// end ;
19919: LD_VAR 0 2
19923: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19924: LD_INT 0
19926: PPUSH
19927: PPUSH
19928: PPUSH
// if not mines then
19929: LD_VAR 0 2
19933: NOT
19934: IFFALSE 19938
// exit ;
19936: GO 20082
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19938: LD_ADDR_VAR 0 5
19942: PUSH
19943: LD_INT 81
19945: PUSH
19946: LD_VAR 0 1
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 3
19957: PUSH
19958: LD_INT 21
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PPUSH
19976: CALL_OW 69
19980: ST_TO_ADDR
// for i in mines do
19981: LD_ADDR_VAR 0 4
19985: PUSH
19986: LD_VAR 0 2
19990: PUSH
19991: FOR_IN
19992: IFFALSE 20080
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19994: LD_VAR 0 4
19998: PUSH
19999: LD_INT 1
20001: ARRAY
20002: PPUSH
20003: LD_VAR 0 4
20007: PUSH
20008: LD_INT 2
20010: ARRAY
20011: PPUSH
20012: CALL_OW 458
20016: NOT
20017: IFFALSE 20021
// continue ;
20019: GO 19991
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
20021: LD_VAR 0 4
20025: PUSH
20026: LD_INT 1
20028: ARRAY
20029: PPUSH
20030: LD_VAR 0 4
20034: PUSH
20035: LD_INT 2
20037: ARRAY
20038: PPUSH
20039: CALL_OW 428
20043: PUSH
20044: LD_VAR 0 5
20048: IN
20049: IFFALSE 20078
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
20051: LD_VAR 0 4
20055: PUSH
20056: LD_INT 1
20058: ARRAY
20059: PPUSH
20060: LD_VAR 0 4
20064: PUSH
20065: LD_INT 2
20067: ARRAY
20068: PPUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 456
// end ;
20078: GO 19991
20080: POP
20081: POP
// end ;
20082: LD_VAR 0 3
20086: RET
// export function Count ( array ) ; var i ; begin
20087: LD_INT 0
20089: PPUSH
20090: PPUSH
// result := 0 ;
20091: LD_ADDR_VAR 0 2
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// for i in array do
20099: LD_ADDR_VAR 0 3
20103: PUSH
20104: LD_VAR 0 1
20108: PUSH
20109: FOR_IN
20110: IFFALSE 20134
// if i then
20112: LD_VAR 0 3
20116: IFFALSE 20132
// result := result + 1 ;
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: LD_VAR 0 2
20127: PUSH
20128: LD_INT 1
20130: PLUS
20131: ST_TO_ADDR
20132: GO 20109
20134: POP
20135: POP
// end ;
20136: LD_VAR 0 2
20140: RET
// export function IsEmpty ( building ) ; begin
20141: LD_INT 0
20143: PPUSH
// if not building then
20144: LD_VAR 0 1
20148: NOT
20149: IFFALSE 20153
// exit ;
20151: GO 20196
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
20153: LD_ADDR_VAR 0 2
20157: PUSH
20158: LD_VAR 0 1
20162: PUSH
20163: LD_INT 22
20165: PUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 255
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 58
20182: PUSH
20183: EMPTY
20184: LIST
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PPUSH
20190: CALL_OW 69
20194: IN
20195: ST_TO_ADDR
// end ;
20196: LD_VAR 0 2
20200: RET
// export function IsNotFull ( building ) ; begin
20201: LD_INT 0
20203: PPUSH
// if not building then
20204: LD_VAR 0 1
20208: NOT
20209: IFFALSE 20213
// exit ;
20211: GO 20232
// result := UnitsInside ( building ) < 6 ;
20213: LD_ADDR_VAR 0 2
20217: PUSH
20218: LD_VAR 0 1
20222: PPUSH
20223: CALL_OW 313
20227: PUSH
20228: LD_INT 6
20230: LESS
20231: ST_TO_ADDR
// end ;
20232: LD_VAR 0 2
20236: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
20237: LD_INT 0
20239: PPUSH
20240: PPUSH
20241: PPUSH
20242: PPUSH
// tmp := [ ] ;
20243: LD_ADDR_VAR 0 3
20247: PUSH
20248: EMPTY
20249: ST_TO_ADDR
// list := [ ] ;
20250: LD_ADDR_VAR 0 5
20254: PUSH
20255: EMPTY
20256: ST_TO_ADDR
// for i = 16 to 25 do
20257: LD_ADDR_VAR 0 4
20261: PUSH
20262: DOUBLE
20263: LD_INT 16
20265: DEC
20266: ST_TO_ADDR
20267: LD_INT 25
20269: PUSH
20270: FOR_TO
20271: IFFALSE 20344
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
20273: LD_ADDR_VAR 0 3
20277: PUSH
20278: LD_VAR 0 3
20282: PUSH
20283: LD_INT 22
20285: PUSH
20286: LD_VAR 0 1
20290: PPUSH
20291: CALL_OW 255
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 91
20302: PUSH
20303: LD_VAR 0 1
20307: PUSH
20308: LD_INT 6
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 30
20318: PUSH
20319: LD_VAR 0 4
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: PPUSH
20336: CALL_OW 69
20340: ADD
20341: ST_TO_ADDR
20342: GO 20270
20344: POP
20345: POP
// for i = 1 to tmp do
20346: LD_ADDR_VAR 0 4
20350: PUSH
20351: DOUBLE
20352: LD_INT 1
20354: DEC
20355: ST_TO_ADDR
20356: LD_VAR 0 3
20360: PUSH
20361: FOR_TO
20362: IFFALSE 20450
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
20364: LD_ADDR_VAR 0 5
20368: PUSH
20369: LD_VAR 0 5
20373: PUSH
20374: LD_VAR 0 3
20378: PUSH
20379: LD_VAR 0 4
20383: ARRAY
20384: PPUSH
20385: CALL_OW 266
20389: PUSH
20390: LD_VAR 0 3
20394: PUSH
20395: LD_VAR 0 4
20399: ARRAY
20400: PPUSH
20401: CALL_OW 250
20405: PUSH
20406: LD_VAR 0 3
20410: PUSH
20411: LD_VAR 0 4
20415: ARRAY
20416: PPUSH
20417: CALL_OW 251
20421: PUSH
20422: LD_VAR 0 3
20426: PUSH
20427: LD_VAR 0 4
20431: ARRAY
20432: PPUSH
20433: CALL_OW 254
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: PUSH
20444: EMPTY
20445: LIST
20446: ADD
20447: ST_TO_ADDR
20448: GO 20361
20450: POP
20451: POP
// result := list ;
20452: LD_ADDR_VAR 0 2
20456: PUSH
20457: LD_VAR 0 5
20461: ST_TO_ADDR
// end ;
20462: LD_VAR 0 2
20466: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20467: LD_INT 0
20469: PPUSH
20470: PPUSH
20471: PPUSH
20472: PPUSH
20473: PPUSH
20474: PPUSH
20475: PPUSH
// if not factory then
20476: LD_VAR 0 1
20480: NOT
20481: IFFALSE 20485
// exit ;
20483: GO 21078
// if control = control_apeman then
20485: LD_VAR 0 4
20489: PUSH
20490: LD_INT 5
20492: EQUAL
20493: IFFALSE 20602
// begin tmp := UnitsInside ( factory ) ;
20495: LD_ADDR_VAR 0 8
20499: PUSH
20500: LD_VAR 0 1
20504: PPUSH
20505: CALL_OW 313
20509: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20510: LD_VAR 0 8
20514: PPUSH
20515: LD_INT 25
20517: PUSH
20518: LD_INT 12
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PPUSH
20525: CALL_OW 72
20529: NOT
20530: IFFALSE 20540
// control := control_manual ;
20532: LD_ADDR_VAR 0 4
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20540: LD_ADDR_VAR 0 8
20544: PUSH
20545: LD_VAR 0 1
20549: PPUSH
20550: CALL 20237 0 1
20554: ST_TO_ADDR
// if tmp then
20555: LD_VAR 0 8
20559: IFFALSE 20602
// begin for i in tmp do
20561: LD_ADDR_VAR 0 7
20565: PUSH
20566: LD_VAR 0 8
20570: PUSH
20571: FOR_IN
20572: IFFALSE 20600
// if i [ 1 ] = b_ext_radio then
20574: LD_VAR 0 7
20578: PUSH
20579: LD_INT 1
20581: ARRAY
20582: PUSH
20583: LD_INT 22
20585: EQUAL
20586: IFFALSE 20598
// begin control := control_remote ;
20588: LD_ADDR_VAR 0 4
20592: PUSH
20593: LD_INT 2
20595: ST_TO_ADDR
// break ;
20596: GO 20600
// end ;
20598: GO 20571
20600: POP
20601: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20602: LD_VAR 0 1
20606: PPUSH
20607: LD_VAR 0 2
20611: PPUSH
20612: LD_VAR 0 3
20616: PPUSH
20617: LD_VAR 0 4
20621: PPUSH
20622: LD_VAR 0 5
20626: PPUSH
20627: CALL_OW 448
20631: IFFALSE 20666
// begin result := [ chassis , engine , control , weapon ] ;
20633: LD_ADDR_VAR 0 6
20637: PUSH
20638: LD_VAR 0 2
20642: PUSH
20643: LD_VAR 0 3
20647: PUSH
20648: LD_VAR 0 4
20652: PUSH
20653: LD_VAR 0 5
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: ST_TO_ADDR
// exit ;
20664: GO 21078
// end ; _chassis := AvailableChassisList ( factory ) ;
20666: LD_ADDR_VAR 0 9
20670: PUSH
20671: LD_VAR 0 1
20675: PPUSH
20676: CALL_OW 475
20680: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20681: LD_ADDR_VAR 0 11
20685: PUSH
20686: LD_VAR 0 1
20690: PPUSH
20691: CALL_OW 476
20695: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20696: LD_ADDR_VAR 0 12
20700: PUSH
20701: LD_VAR 0 1
20705: PPUSH
20706: CALL_OW 477
20710: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20711: LD_ADDR_VAR 0 10
20715: PUSH
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 478
20725: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20726: LD_VAR 0 9
20730: NOT
20731: PUSH
20732: LD_VAR 0 11
20736: NOT
20737: OR
20738: PUSH
20739: LD_VAR 0 12
20743: NOT
20744: OR
20745: PUSH
20746: LD_VAR 0 10
20750: NOT
20751: OR
20752: IFFALSE 20787
// begin result := [ chassis , engine , control , weapon ] ;
20754: LD_ADDR_VAR 0 6
20758: PUSH
20759: LD_VAR 0 2
20763: PUSH
20764: LD_VAR 0 3
20768: PUSH
20769: LD_VAR 0 4
20773: PUSH
20774: LD_VAR 0 5
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: ST_TO_ADDR
// exit ;
20785: GO 21078
// end ; if not chassis in _chassis then
20787: LD_VAR 0 2
20791: PUSH
20792: LD_VAR 0 9
20796: IN
20797: NOT
20798: IFFALSE 20824
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20800: LD_ADDR_VAR 0 2
20804: PUSH
20805: LD_VAR 0 9
20809: PUSH
20810: LD_INT 1
20812: PPUSH
20813: LD_VAR 0 9
20817: PPUSH
20818: CALL_OW 12
20822: ARRAY
20823: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20824: LD_VAR 0 2
20828: PPUSH
20829: LD_VAR 0 3
20833: PPUSH
20834: CALL 21083 0 2
20838: NOT
20839: IFFALSE 20898
// repeat engine := _engine [ 1 ] ;
20841: LD_ADDR_VAR 0 3
20845: PUSH
20846: LD_VAR 0 11
20850: PUSH
20851: LD_INT 1
20853: ARRAY
20854: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20855: LD_ADDR_VAR 0 11
20859: PUSH
20860: LD_VAR 0 11
20864: PPUSH
20865: LD_INT 1
20867: PPUSH
20868: CALL_OW 3
20872: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20873: LD_VAR 0 2
20877: PPUSH
20878: LD_VAR 0 3
20882: PPUSH
20883: CALL 21083 0 2
20887: PUSH
20888: LD_VAR 0 11
20892: PUSH
20893: EMPTY
20894: EQUAL
20895: OR
20896: IFFALSE 20841
// if not control in _control then
20898: LD_VAR 0 4
20902: PUSH
20903: LD_VAR 0 12
20907: IN
20908: NOT
20909: IFFALSE 20935
// control := _control [ rand ( 1 , _control ) ] ;
20911: LD_ADDR_VAR 0 4
20915: PUSH
20916: LD_VAR 0 12
20920: PUSH
20921: LD_INT 1
20923: PPUSH
20924: LD_VAR 0 12
20928: PPUSH
20929: CALL_OW 12
20933: ARRAY
20934: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20935: LD_VAR 0 2
20939: PPUSH
20940: LD_VAR 0 5
20944: PPUSH
20945: CALL 21303 0 2
20949: NOT
20950: IFFALSE 21009
// repeat weapon := _weapon [ 1 ] ;
20952: LD_ADDR_VAR 0 5
20956: PUSH
20957: LD_VAR 0 10
20961: PUSH
20962: LD_INT 1
20964: ARRAY
20965: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20966: LD_ADDR_VAR 0 10
20970: PUSH
20971: LD_VAR 0 10
20975: PPUSH
20976: LD_INT 1
20978: PPUSH
20979: CALL_OW 3
20983: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20984: LD_VAR 0 2
20988: PPUSH
20989: LD_VAR 0 5
20993: PPUSH
20994: CALL 21303 0 2
20998: PUSH
20999: LD_VAR 0 10
21003: PUSH
21004: EMPTY
21005: EQUAL
21006: OR
21007: IFFALSE 20952
// result := [ ] ;
21009: LD_ADDR_VAR 0 6
21013: PUSH
21014: EMPTY
21015: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21016: LD_VAR 0 1
21020: PPUSH
21021: LD_VAR 0 2
21025: PPUSH
21026: LD_VAR 0 3
21030: PPUSH
21031: LD_VAR 0 4
21035: PPUSH
21036: LD_VAR 0 5
21040: PPUSH
21041: CALL_OW 448
21045: IFFALSE 21078
// result := [ chassis , engine , control , weapon ] ;
21047: LD_ADDR_VAR 0 6
21051: PUSH
21052: LD_VAR 0 2
21056: PUSH
21057: LD_VAR 0 3
21061: PUSH
21062: LD_VAR 0 4
21066: PUSH
21067: LD_VAR 0 5
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: ST_TO_ADDR
// end ;
21078: LD_VAR 0 6
21082: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
21083: LD_INT 0
21085: PPUSH
// if not chassis or not engine then
21086: LD_VAR 0 1
21090: NOT
21091: PUSH
21092: LD_VAR 0 2
21096: NOT
21097: OR
21098: IFFALSE 21102
// exit ;
21100: GO 21298
// case engine of engine_solar :
21102: LD_VAR 0 2
21106: PUSH
21107: LD_INT 2
21109: DOUBLE
21110: EQUAL
21111: IFTRUE 21115
21113: GO 21153
21115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
21116: LD_ADDR_VAR 0 3
21120: PUSH
21121: LD_INT 11
21123: PUSH
21124: LD_INT 12
21126: PUSH
21127: LD_INT 13
21129: PUSH
21130: LD_INT 14
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: LD_INT 2
21138: PUSH
21139: LD_INT 3
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: ST_TO_ADDR
21151: GO 21282
21153: LD_INT 1
21155: DOUBLE
21156: EQUAL
21157: IFTRUE 21161
21159: GO 21223
21161: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
21162: LD_ADDR_VAR 0 3
21166: PUSH
21167: LD_INT 11
21169: PUSH
21170: LD_INT 12
21172: PUSH
21173: LD_INT 13
21175: PUSH
21176: LD_INT 14
21178: PUSH
21179: LD_INT 1
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: LD_INT 3
21187: PUSH
21188: LD_INT 4
21190: PUSH
21191: LD_INT 5
21193: PUSH
21194: LD_INT 21
21196: PUSH
21197: LD_INT 23
21199: PUSH
21200: LD_INT 22
21202: PUSH
21203: LD_INT 24
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: ST_TO_ADDR
21221: GO 21282
21223: LD_INT 3
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21281
21231: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21232: LD_ADDR_VAR 0 3
21236: PUSH
21237: LD_INT 13
21239: PUSH
21240: LD_INT 14
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 3
21248: PUSH
21249: LD_INT 4
21251: PUSH
21252: LD_INT 5
21254: PUSH
21255: LD_INT 21
21257: PUSH
21258: LD_INT 22
21260: PUSH
21261: LD_INT 23
21263: PUSH
21264: LD_INT 24
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: ST_TO_ADDR
21279: GO 21282
21281: POP
// result := ( chassis in result ) ;
21282: LD_ADDR_VAR 0 3
21286: PUSH
21287: LD_VAR 0 1
21291: PUSH
21292: LD_VAR 0 3
21296: IN
21297: ST_TO_ADDR
// end ;
21298: LD_VAR 0 3
21302: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
21303: LD_INT 0
21305: PPUSH
// if not chassis or not weapon then
21306: LD_VAR 0 1
21310: NOT
21311: PUSH
21312: LD_VAR 0 2
21316: NOT
21317: OR
21318: IFFALSE 21322
// exit ;
21320: GO 22384
// case weapon of us_machine_gun :
21322: LD_VAR 0 2
21326: PUSH
21327: LD_INT 2
21329: DOUBLE
21330: EQUAL
21331: IFTRUE 21335
21333: GO 21365
21335: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
21336: LD_ADDR_VAR 0 3
21340: PUSH
21341: LD_INT 1
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 3
21349: PUSH
21350: LD_INT 4
21352: PUSH
21353: LD_INT 5
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: ST_TO_ADDR
21363: GO 22368
21365: LD_INT 3
21367: DOUBLE
21368: EQUAL
21369: IFTRUE 21373
21371: GO 21403
21373: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
21374: LD_ADDR_VAR 0 3
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: LD_INT 3
21387: PUSH
21388: LD_INT 4
21390: PUSH
21391: LD_INT 5
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: ST_TO_ADDR
21401: GO 22368
21403: LD_INT 11
21405: DOUBLE
21406: EQUAL
21407: IFTRUE 21411
21409: GO 21441
21411: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
21412: LD_ADDR_VAR 0 3
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: LD_INT 3
21425: PUSH
21426: LD_INT 4
21428: PUSH
21429: LD_INT 5
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: ST_TO_ADDR
21439: GO 22368
21441: LD_INT 4
21443: DOUBLE
21444: EQUAL
21445: IFTRUE 21449
21447: GO 21475
21449: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21450: LD_ADDR_VAR 0 3
21454: PUSH
21455: LD_INT 2
21457: PUSH
21458: LD_INT 3
21460: PUSH
21461: LD_INT 4
21463: PUSH
21464: LD_INT 5
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: ST_TO_ADDR
21473: GO 22368
21475: LD_INT 5
21477: DOUBLE
21478: EQUAL
21479: IFTRUE 21483
21481: GO 21509
21483: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21484: LD_ADDR_VAR 0 3
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: LD_INT 3
21494: PUSH
21495: LD_INT 4
21497: PUSH
21498: LD_INT 5
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: ST_TO_ADDR
21507: GO 22368
21509: LD_INT 9
21511: DOUBLE
21512: EQUAL
21513: IFTRUE 21517
21515: GO 21543
21517: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21518: LD_ADDR_VAR 0 3
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: LD_INT 3
21528: PUSH
21529: LD_INT 4
21531: PUSH
21532: LD_INT 5
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: ST_TO_ADDR
21541: GO 22368
21543: LD_INT 7
21545: DOUBLE
21546: EQUAL
21547: IFTRUE 21551
21549: GO 21577
21551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21552: LD_ADDR_VAR 0 3
21556: PUSH
21557: LD_INT 2
21559: PUSH
21560: LD_INT 3
21562: PUSH
21563: LD_INT 4
21565: PUSH
21566: LD_INT 5
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: ST_TO_ADDR
21575: GO 22368
21577: LD_INT 12
21579: DOUBLE
21580: EQUAL
21581: IFTRUE 21585
21583: GO 21611
21585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21586: LD_ADDR_VAR 0 3
21590: PUSH
21591: LD_INT 2
21593: PUSH
21594: LD_INT 3
21596: PUSH
21597: LD_INT 4
21599: PUSH
21600: LD_INT 5
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: ST_TO_ADDR
21609: GO 22368
21611: LD_INT 13
21613: DOUBLE
21614: EQUAL
21615: IFTRUE 21619
21617: GO 21645
21619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21620: LD_ADDR_VAR 0 3
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: LD_INT 4
21633: PUSH
21634: LD_INT 5
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: ST_TO_ADDR
21643: GO 22368
21645: LD_INT 14
21647: DOUBLE
21648: EQUAL
21649: IFTRUE 21653
21651: GO 21671
21653: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21654: LD_ADDR_VAR 0 3
21658: PUSH
21659: LD_INT 4
21661: PUSH
21662: LD_INT 5
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: ST_TO_ADDR
21669: GO 22368
21671: LD_INT 6
21673: DOUBLE
21674: EQUAL
21675: IFTRUE 21679
21677: GO 21697
21679: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21680: LD_ADDR_VAR 0 3
21684: PUSH
21685: LD_INT 4
21687: PUSH
21688: LD_INT 5
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: ST_TO_ADDR
21695: GO 22368
21697: LD_INT 10
21699: DOUBLE
21700: EQUAL
21701: IFTRUE 21705
21703: GO 21723
21705: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21706: LD_ADDR_VAR 0 3
21710: PUSH
21711: LD_INT 4
21713: PUSH
21714: LD_INT 5
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: ST_TO_ADDR
21721: GO 22368
21723: LD_INT 22
21725: DOUBLE
21726: EQUAL
21727: IFTRUE 21731
21729: GO 21757
21731: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21732: LD_ADDR_VAR 0 3
21736: PUSH
21737: LD_INT 11
21739: PUSH
21740: LD_INT 12
21742: PUSH
21743: LD_INT 13
21745: PUSH
21746: LD_INT 14
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: ST_TO_ADDR
21755: GO 22368
21757: LD_INT 23
21759: DOUBLE
21760: EQUAL
21761: IFTRUE 21765
21763: GO 21791
21765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21766: LD_ADDR_VAR 0 3
21770: PUSH
21771: LD_INT 11
21773: PUSH
21774: LD_INT 12
21776: PUSH
21777: LD_INT 13
21779: PUSH
21780: LD_INT 14
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: ST_TO_ADDR
21789: GO 22368
21791: LD_INT 24
21793: DOUBLE
21794: EQUAL
21795: IFTRUE 21799
21797: GO 21825
21799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21800: LD_ADDR_VAR 0 3
21804: PUSH
21805: LD_INT 11
21807: PUSH
21808: LD_INT 12
21810: PUSH
21811: LD_INT 13
21813: PUSH
21814: LD_INT 14
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: ST_TO_ADDR
21823: GO 22368
21825: LD_INT 30
21827: DOUBLE
21828: EQUAL
21829: IFTRUE 21833
21831: GO 21859
21833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21834: LD_ADDR_VAR 0 3
21838: PUSH
21839: LD_INT 11
21841: PUSH
21842: LD_INT 12
21844: PUSH
21845: LD_INT 13
21847: PUSH
21848: LD_INT 14
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: ST_TO_ADDR
21857: GO 22368
21859: LD_INT 25
21861: DOUBLE
21862: EQUAL
21863: IFTRUE 21867
21865: GO 21885
21867: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21868: LD_ADDR_VAR 0 3
21872: PUSH
21873: LD_INT 13
21875: PUSH
21876: LD_INT 14
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: ST_TO_ADDR
21883: GO 22368
21885: LD_INT 27
21887: DOUBLE
21888: EQUAL
21889: IFTRUE 21893
21891: GO 21911
21893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21894: LD_ADDR_VAR 0 3
21898: PUSH
21899: LD_INT 13
21901: PUSH
21902: LD_INT 14
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: ST_TO_ADDR
21909: GO 22368
21911: LD_EXP 18
21915: DOUBLE
21916: EQUAL
21917: IFTRUE 21921
21919: GO 21947
21921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21922: LD_ADDR_VAR 0 3
21926: PUSH
21927: LD_INT 11
21929: PUSH
21930: LD_INT 12
21932: PUSH
21933: LD_INT 13
21935: PUSH
21936: LD_INT 14
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: ST_TO_ADDR
21945: GO 22368
21947: LD_INT 28
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 21973
21955: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21956: LD_ADDR_VAR 0 3
21960: PUSH
21961: LD_INT 13
21963: PUSH
21964: LD_INT 14
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: ST_TO_ADDR
21971: GO 22368
21973: LD_INT 29
21975: DOUBLE
21976: EQUAL
21977: IFTRUE 21981
21979: GO 21999
21981: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21982: LD_ADDR_VAR 0 3
21986: PUSH
21987: LD_INT 13
21989: PUSH
21990: LD_INT 14
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: ST_TO_ADDR
21997: GO 22368
21999: LD_INT 31
22001: DOUBLE
22002: EQUAL
22003: IFTRUE 22007
22005: GO 22025
22007: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
22008: LD_ADDR_VAR 0 3
22012: PUSH
22013: LD_INT 13
22015: PUSH
22016: LD_INT 14
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: ST_TO_ADDR
22023: GO 22368
22025: LD_INT 26
22027: DOUBLE
22028: EQUAL
22029: IFTRUE 22033
22031: GO 22051
22033: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
22034: LD_ADDR_VAR 0 3
22038: PUSH
22039: LD_INT 13
22041: PUSH
22042: LD_INT 14
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: ST_TO_ADDR
22049: GO 22368
22051: LD_INT 42
22053: DOUBLE
22054: EQUAL
22055: IFTRUE 22059
22057: GO 22085
22059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
22060: LD_ADDR_VAR 0 3
22064: PUSH
22065: LD_INT 21
22067: PUSH
22068: LD_INT 22
22070: PUSH
22071: LD_INT 23
22073: PUSH
22074: LD_INT 24
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: ST_TO_ADDR
22083: GO 22368
22085: LD_INT 43
22087: DOUBLE
22088: EQUAL
22089: IFTRUE 22093
22091: GO 22119
22093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
22094: LD_ADDR_VAR 0 3
22098: PUSH
22099: LD_INT 21
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_INT 23
22107: PUSH
22108: LD_INT 24
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: ST_TO_ADDR
22117: GO 22368
22119: LD_INT 44
22121: DOUBLE
22122: EQUAL
22123: IFTRUE 22127
22125: GO 22153
22127: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
22128: LD_ADDR_VAR 0 3
22132: PUSH
22133: LD_INT 21
22135: PUSH
22136: LD_INT 22
22138: PUSH
22139: LD_INT 23
22141: PUSH
22142: LD_INT 24
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: ST_TO_ADDR
22151: GO 22368
22153: LD_INT 45
22155: DOUBLE
22156: EQUAL
22157: IFTRUE 22161
22159: GO 22187
22161: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
22162: LD_ADDR_VAR 0 3
22166: PUSH
22167: LD_INT 21
22169: PUSH
22170: LD_INT 22
22172: PUSH
22173: LD_INT 23
22175: PUSH
22176: LD_INT 24
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: ST_TO_ADDR
22185: GO 22368
22187: LD_INT 49
22189: DOUBLE
22190: EQUAL
22191: IFTRUE 22195
22193: GO 22221
22195: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
22196: LD_ADDR_VAR 0 3
22200: PUSH
22201: LD_INT 21
22203: PUSH
22204: LD_INT 22
22206: PUSH
22207: LD_INT 23
22209: PUSH
22210: LD_INT 24
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: ST_TO_ADDR
22219: GO 22368
22221: LD_INT 51
22223: DOUBLE
22224: EQUAL
22225: IFTRUE 22229
22227: GO 22255
22229: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
22230: LD_ADDR_VAR 0 3
22234: PUSH
22235: LD_INT 21
22237: PUSH
22238: LD_INT 22
22240: PUSH
22241: LD_INT 23
22243: PUSH
22244: LD_INT 24
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: ST_TO_ADDR
22253: GO 22368
22255: LD_INT 52
22257: DOUBLE
22258: EQUAL
22259: IFTRUE 22263
22261: GO 22289
22263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
22264: LD_ADDR_VAR 0 3
22268: PUSH
22269: LD_INT 21
22271: PUSH
22272: LD_INT 22
22274: PUSH
22275: LD_INT 23
22277: PUSH
22278: LD_INT 24
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: ST_TO_ADDR
22287: GO 22368
22289: LD_INT 53
22291: DOUBLE
22292: EQUAL
22293: IFTRUE 22297
22295: GO 22315
22297: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
22298: LD_ADDR_VAR 0 3
22302: PUSH
22303: LD_INT 23
22305: PUSH
22306: LD_INT 24
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: ST_TO_ADDR
22313: GO 22368
22315: LD_INT 46
22317: DOUBLE
22318: EQUAL
22319: IFTRUE 22323
22321: GO 22341
22323: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
22324: LD_ADDR_VAR 0 3
22328: PUSH
22329: LD_INT 23
22331: PUSH
22332: LD_INT 24
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: ST_TO_ADDR
22339: GO 22368
22341: LD_INT 47
22343: DOUBLE
22344: EQUAL
22345: IFTRUE 22349
22347: GO 22367
22349: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22350: LD_ADDR_VAR 0 3
22354: PUSH
22355: LD_INT 23
22357: PUSH
22358: LD_INT 24
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: ST_TO_ADDR
22365: GO 22368
22367: POP
// result := ( chassis in result ) ;
22368: LD_ADDR_VAR 0 3
22372: PUSH
22373: LD_VAR 0 1
22377: PUSH
22378: LD_VAR 0 3
22382: IN
22383: ST_TO_ADDR
// end ;
22384: LD_VAR 0 3
22388: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
22389: LD_INT 0
22391: PPUSH
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
// result := array ;
22398: LD_ADDR_VAR 0 5
22402: PUSH
22403: LD_VAR 0 1
22407: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
22408: LD_VAR 0 1
22412: NOT
22413: PUSH
22414: LD_VAR 0 2
22418: NOT
22419: OR
22420: PUSH
22421: LD_VAR 0 3
22425: NOT
22426: OR
22427: PUSH
22428: LD_VAR 0 2
22432: PUSH
22433: LD_VAR 0 1
22437: GREATER
22438: OR
22439: PUSH
22440: LD_VAR 0 3
22444: PUSH
22445: LD_VAR 0 1
22449: GREATER
22450: OR
22451: IFFALSE 22455
// exit ;
22453: GO 22751
// if direction then
22455: LD_VAR 0 4
22459: IFFALSE 22523
// begin d := 1 ;
22461: LD_ADDR_VAR 0 9
22465: PUSH
22466: LD_INT 1
22468: ST_TO_ADDR
// if i_from > i_to then
22469: LD_VAR 0 2
22473: PUSH
22474: LD_VAR 0 3
22478: GREATER
22479: IFFALSE 22505
// length := ( array - i_from ) + i_to else
22481: LD_ADDR_VAR 0 11
22485: PUSH
22486: LD_VAR 0 1
22490: PUSH
22491: LD_VAR 0 2
22495: MINUS
22496: PUSH
22497: LD_VAR 0 3
22501: PLUS
22502: ST_TO_ADDR
22503: GO 22521
// length := i_to - i_from ;
22505: LD_ADDR_VAR 0 11
22509: PUSH
22510: LD_VAR 0 3
22514: PUSH
22515: LD_VAR 0 2
22519: MINUS
22520: ST_TO_ADDR
// end else
22521: GO 22584
// begin d := - 1 ;
22523: LD_ADDR_VAR 0 9
22527: PUSH
22528: LD_INT 1
22530: NEG
22531: ST_TO_ADDR
// if i_from > i_to then
22532: LD_VAR 0 2
22536: PUSH
22537: LD_VAR 0 3
22541: GREATER
22542: IFFALSE 22562
// length := i_from - i_to else
22544: LD_ADDR_VAR 0 11
22548: PUSH
22549: LD_VAR 0 2
22553: PUSH
22554: LD_VAR 0 3
22558: MINUS
22559: ST_TO_ADDR
22560: GO 22584
// length := ( array - i_to ) + i_from ;
22562: LD_ADDR_VAR 0 11
22566: PUSH
22567: LD_VAR 0 1
22571: PUSH
22572: LD_VAR 0 3
22576: MINUS
22577: PUSH
22578: LD_VAR 0 2
22582: PLUS
22583: ST_TO_ADDR
// end ; if not length then
22584: LD_VAR 0 11
22588: NOT
22589: IFFALSE 22593
// exit ;
22591: GO 22751
// tmp := array ;
22593: LD_ADDR_VAR 0 10
22597: PUSH
22598: LD_VAR 0 1
22602: ST_TO_ADDR
// for i = 1 to length do
22603: LD_ADDR_VAR 0 6
22607: PUSH
22608: DOUBLE
22609: LD_INT 1
22611: DEC
22612: ST_TO_ADDR
22613: LD_VAR 0 11
22617: PUSH
22618: FOR_TO
22619: IFFALSE 22739
// begin for j = 1 to array do
22621: LD_ADDR_VAR 0 7
22625: PUSH
22626: DOUBLE
22627: LD_INT 1
22629: DEC
22630: ST_TO_ADDR
22631: LD_VAR 0 1
22635: PUSH
22636: FOR_TO
22637: IFFALSE 22725
// begin k := j + d ;
22639: LD_ADDR_VAR 0 8
22643: PUSH
22644: LD_VAR 0 7
22648: PUSH
22649: LD_VAR 0 9
22653: PLUS
22654: ST_TO_ADDR
// if k > array then
22655: LD_VAR 0 8
22659: PUSH
22660: LD_VAR 0 1
22664: GREATER
22665: IFFALSE 22675
// k := 1 ;
22667: LD_ADDR_VAR 0 8
22671: PUSH
22672: LD_INT 1
22674: ST_TO_ADDR
// if not k then
22675: LD_VAR 0 8
22679: NOT
22680: IFFALSE 22692
// k := array ;
22682: LD_ADDR_VAR 0 8
22686: PUSH
22687: LD_VAR 0 1
22691: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22692: LD_ADDR_VAR 0 10
22696: PUSH
22697: LD_VAR 0 10
22701: PPUSH
22702: LD_VAR 0 8
22706: PPUSH
22707: LD_VAR 0 1
22711: PUSH
22712: LD_VAR 0 7
22716: ARRAY
22717: PPUSH
22718: CALL_OW 1
22722: ST_TO_ADDR
// end ;
22723: GO 22636
22725: POP
22726: POP
// array := tmp ;
22727: LD_ADDR_VAR 0 1
22731: PUSH
22732: LD_VAR 0 10
22736: ST_TO_ADDR
// end ;
22737: GO 22618
22739: POP
22740: POP
// result := array ;
22741: LD_ADDR_VAR 0 5
22745: PUSH
22746: LD_VAR 0 1
22750: ST_TO_ADDR
// end ;
22751: LD_VAR 0 5
22755: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22756: LD_INT 0
22758: PPUSH
22759: PPUSH
// result := 0 ;
22760: LD_ADDR_VAR 0 3
22764: PUSH
22765: LD_INT 0
22767: ST_TO_ADDR
// if not array or not value in array then
22768: LD_VAR 0 1
22772: NOT
22773: PUSH
22774: LD_VAR 0 2
22778: PUSH
22779: LD_VAR 0 1
22783: IN
22784: NOT
22785: OR
22786: IFFALSE 22790
// exit ;
22788: GO 22844
// for i = 1 to array do
22790: LD_ADDR_VAR 0 4
22794: PUSH
22795: DOUBLE
22796: LD_INT 1
22798: DEC
22799: ST_TO_ADDR
22800: LD_VAR 0 1
22804: PUSH
22805: FOR_TO
22806: IFFALSE 22842
// if value = array [ i ] then
22808: LD_VAR 0 2
22812: PUSH
22813: LD_VAR 0 1
22817: PUSH
22818: LD_VAR 0 4
22822: ARRAY
22823: EQUAL
22824: IFFALSE 22840
// begin result := i ;
22826: LD_ADDR_VAR 0 3
22830: PUSH
22831: LD_VAR 0 4
22835: ST_TO_ADDR
// exit ;
22836: POP
22837: POP
22838: GO 22844
// end ;
22840: GO 22805
22842: POP
22843: POP
// end ;
22844: LD_VAR 0 3
22848: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22849: LD_INT 0
22851: PPUSH
// vc_chassis := chassis ;
22852: LD_ADDR_OWVAR 37
22856: PUSH
22857: LD_VAR 0 1
22861: ST_TO_ADDR
// vc_engine := engine ;
22862: LD_ADDR_OWVAR 39
22866: PUSH
22867: LD_VAR 0 2
22871: ST_TO_ADDR
// vc_control := control ;
22872: LD_ADDR_OWVAR 38
22876: PUSH
22877: LD_VAR 0 3
22881: ST_TO_ADDR
// vc_weapon := weapon ;
22882: LD_ADDR_OWVAR 40
22886: PUSH
22887: LD_VAR 0 4
22891: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22892: LD_ADDR_OWVAR 41
22896: PUSH
22897: LD_VAR 0 5
22901: ST_TO_ADDR
// end ;
22902: LD_VAR 0 6
22906: RET
// export function WantPlant ( unit ) ; var task ; begin
22907: LD_INT 0
22909: PPUSH
22910: PPUSH
// result := false ;
22911: LD_ADDR_VAR 0 2
22915: PUSH
22916: LD_INT 0
22918: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22919: LD_ADDR_VAR 0 3
22923: PUSH
22924: LD_VAR 0 1
22928: PPUSH
22929: CALL_OW 437
22933: ST_TO_ADDR
// if task then
22934: LD_VAR 0 3
22938: IFFALSE 22966
// if task [ 1 ] [ 1 ] = p then
22940: LD_VAR 0 3
22944: PUSH
22945: LD_INT 1
22947: ARRAY
22948: PUSH
22949: LD_INT 1
22951: ARRAY
22952: PUSH
22953: LD_STRING p
22955: EQUAL
22956: IFFALSE 22966
// result := true ;
22958: LD_ADDR_VAR 0 2
22962: PUSH
22963: LD_INT 1
22965: ST_TO_ADDR
// end ;
22966: LD_VAR 0 2
22970: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22971: LD_INT 0
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
// if pos < 1 then
22977: LD_VAR 0 2
22981: PUSH
22982: LD_INT 1
22984: LESS
22985: IFFALSE 22989
// exit ;
22987: GO 23292
// if pos = 1 then
22989: LD_VAR 0 2
22993: PUSH
22994: LD_INT 1
22996: EQUAL
22997: IFFALSE 23030
// result := Replace ( arr , pos [ 1 ] , value ) else
22999: LD_ADDR_VAR 0 4
23003: PUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: LD_VAR 0 2
23013: PUSH
23014: LD_INT 1
23016: ARRAY
23017: PPUSH
23018: LD_VAR 0 3
23022: PPUSH
23023: CALL_OW 1
23027: ST_TO_ADDR
23028: GO 23292
// begin tmp := arr ;
23030: LD_ADDR_VAR 0 6
23034: PUSH
23035: LD_VAR 0 1
23039: ST_TO_ADDR
// s_arr := [ tmp ] ;
23040: LD_ADDR_VAR 0 7
23044: PUSH
23045: LD_VAR 0 6
23049: PUSH
23050: EMPTY
23051: LIST
23052: ST_TO_ADDR
// for i = 1 to pos - 1 do
23053: LD_ADDR_VAR 0 5
23057: PUSH
23058: DOUBLE
23059: LD_INT 1
23061: DEC
23062: ST_TO_ADDR
23063: LD_VAR 0 2
23067: PUSH
23068: LD_INT 1
23070: MINUS
23071: PUSH
23072: FOR_TO
23073: IFFALSE 23118
// begin tmp := tmp [ pos [ i ] ] ;
23075: LD_ADDR_VAR 0 6
23079: PUSH
23080: LD_VAR 0 6
23084: PUSH
23085: LD_VAR 0 2
23089: PUSH
23090: LD_VAR 0 5
23094: ARRAY
23095: ARRAY
23096: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
23097: LD_ADDR_VAR 0 7
23101: PUSH
23102: LD_VAR 0 7
23106: PUSH
23107: LD_VAR 0 6
23111: PUSH
23112: EMPTY
23113: LIST
23114: ADD
23115: ST_TO_ADDR
// end ;
23116: GO 23072
23118: POP
23119: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
23120: LD_ADDR_VAR 0 6
23124: PUSH
23125: LD_VAR 0 6
23129: PPUSH
23130: LD_VAR 0 2
23134: PUSH
23135: LD_VAR 0 2
23139: ARRAY
23140: PPUSH
23141: LD_VAR 0 3
23145: PPUSH
23146: CALL_OW 1
23150: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
23151: LD_ADDR_VAR 0 7
23155: PUSH
23156: LD_VAR 0 7
23160: PPUSH
23161: LD_VAR 0 7
23165: PPUSH
23166: LD_VAR 0 6
23170: PPUSH
23171: CALL_OW 1
23175: ST_TO_ADDR
// for i = s_arr downto 2 do
23176: LD_ADDR_VAR 0 5
23180: PUSH
23181: DOUBLE
23182: LD_VAR 0 7
23186: INC
23187: ST_TO_ADDR
23188: LD_INT 2
23190: PUSH
23191: FOR_DOWNTO
23192: IFFALSE 23276
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
23194: LD_ADDR_VAR 0 6
23198: PUSH
23199: LD_VAR 0 7
23203: PUSH
23204: LD_VAR 0 5
23208: PUSH
23209: LD_INT 1
23211: MINUS
23212: ARRAY
23213: PPUSH
23214: LD_VAR 0 2
23218: PUSH
23219: LD_VAR 0 5
23223: PUSH
23224: LD_INT 1
23226: MINUS
23227: ARRAY
23228: PPUSH
23229: LD_VAR 0 7
23233: PUSH
23234: LD_VAR 0 5
23238: ARRAY
23239: PPUSH
23240: CALL_OW 1
23244: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
23245: LD_ADDR_VAR 0 7
23249: PUSH
23250: LD_VAR 0 7
23254: PPUSH
23255: LD_VAR 0 5
23259: PUSH
23260: LD_INT 1
23262: MINUS
23263: PPUSH
23264: LD_VAR 0 6
23268: PPUSH
23269: CALL_OW 1
23273: ST_TO_ADDR
// end ;
23274: GO 23191
23276: POP
23277: POP
// result := s_arr [ 1 ] ;
23278: LD_ADDR_VAR 0 4
23282: PUSH
23283: LD_VAR 0 7
23287: PUSH
23288: LD_INT 1
23290: ARRAY
23291: ST_TO_ADDR
// end ; end ;
23292: LD_VAR 0 4
23296: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
23297: LD_INT 0
23299: PPUSH
23300: PPUSH
// if not list then
23301: LD_VAR 0 1
23305: NOT
23306: IFFALSE 23310
// exit ;
23308: GO 23401
// i := list [ pos1 ] ;
23310: LD_ADDR_VAR 0 5
23314: PUSH
23315: LD_VAR 0 1
23319: PUSH
23320: LD_VAR 0 2
23324: ARRAY
23325: ST_TO_ADDR
// if not i then
23326: LD_VAR 0 5
23330: NOT
23331: IFFALSE 23335
// exit ;
23333: GO 23401
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
23335: LD_ADDR_VAR 0 1
23339: PUSH
23340: LD_VAR 0 1
23344: PPUSH
23345: LD_VAR 0 2
23349: PPUSH
23350: LD_VAR 0 1
23354: PUSH
23355: LD_VAR 0 3
23359: ARRAY
23360: PPUSH
23361: CALL_OW 1
23365: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
23366: LD_ADDR_VAR 0 1
23370: PUSH
23371: LD_VAR 0 1
23375: PPUSH
23376: LD_VAR 0 3
23380: PPUSH
23381: LD_VAR 0 5
23385: PPUSH
23386: CALL_OW 1
23390: ST_TO_ADDR
// result := list ;
23391: LD_ADDR_VAR 0 4
23395: PUSH
23396: LD_VAR 0 1
23400: ST_TO_ADDR
// end ;
23401: LD_VAR 0 4
23405: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
23406: LD_INT 0
23408: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
23409: LD_ADDR_VAR 0 5
23413: PUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 250
23423: PPUSH
23424: LD_VAR 0 1
23428: PPUSH
23429: CALL_OW 251
23433: PPUSH
23434: LD_VAR 0 2
23438: PPUSH
23439: LD_VAR 0 3
23443: PPUSH
23444: LD_VAR 0 4
23448: PPUSH
23449: CALL 23459 0 5
23453: ST_TO_ADDR
// end ;
23454: LD_VAR 0 5
23458: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23459: LD_INT 0
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
// if not list then
23465: LD_VAR 0 3
23469: NOT
23470: IFFALSE 23474
// exit ;
23472: GO 23862
// result := [ ] ;
23474: LD_ADDR_VAR 0 6
23478: PUSH
23479: EMPTY
23480: ST_TO_ADDR
// for i in list do
23481: LD_ADDR_VAR 0 7
23485: PUSH
23486: LD_VAR 0 3
23490: PUSH
23491: FOR_IN
23492: IFFALSE 23694
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23494: LD_ADDR_VAR 0 9
23498: PUSH
23499: LD_VAR 0 7
23503: PPUSH
23504: LD_VAR 0 1
23508: PPUSH
23509: LD_VAR 0 2
23513: PPUSH
23514: CALL_OW 297
23518: ST_TO_ADDR
// if not result then
23519: LD_VAR 0 6
23523: NOT
23524: IFFALSE 23550
// result := [ [ i , tmp ] ] else
23526: LD_ADDR_VAR 0 6
23530: PUSH
23531: LD_VAR 0 7
23535: PUSH
23536: LD_VAR 0 9
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: ST_TO_ADDR
23548: GO 23692
// begin if result [ result ] [ 2 ] < tmp then
23550: LD_VAR 0 6
23554: PUSH
23555: LD_VAR 0 6
23559: ARRAY
23560: PUSH
23561: LD_INT 2
23563: ARRAY
23564: PUSH
23565: LD_VAR 0 9
23569: LESS
23570: IFFALSE 23612
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23572: LD_ADDR_VAR 0 6
23576: PUSH
23577: LD_VAR 0 6
23581: PPUSH
23582: LD_VAR 0 6
23586: PUSH
23587: LD_INT 1
23589: PLUS
23590: PPUSH
23591: LD_VAR 0 7
23595: PUSH
23596: LD_VAR 0 9
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 2
23609: ST_TO_ADDR
23610: GO 23692
// for j = 1 to result do
23612: LD_ADDR_VAR 0 8
23616: PUSH
23617: DOUBLE
23618: LD_INT 1
23620: DEC
23621: ST_TO_ADDR
23622: LD_VAR 0 6
23626: PUSH
23627: FOR_TO
23628: IFFALSE 23690
// begin if tmp < result [ j ] [ 2 ] then
23630: LD_VAR 0 9
23634: PUSH
23635: LD_VAR 0 6
23639: PUSH
23640: LD_VAR 0 8
23644: ARRAY
23645: PUSH
23646: LD_INT 2
23648: ARRAY
23649: LESS
23650: IFFALSE 23688
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23652: LD_ADDR_VAR 0 6
23656: PUSH
23657: LD_VAR 0 6
23661: PPUSH
23662: LD_VAR 0 8
23666: PPUSH
23667: LD_VAR 0 7
23671: PUSH
23672: LD_VAR 0 9
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PPUSH
23681: CALL_OW 2
23685: ST_TO_ADDR
// break ;
23686: GO 23690
// end ; end ;
23688: GO 23627
23690: POP
23691: POP
// end ; end ;
23692: GO 23491
23694: POP
23695: POP
// if result and not asc then
23696: LD_VAR 0 6
23700: PUSH
23701: LD_VAR 0 4
23705: NOT
23706: AND
23707: IFFALSE 23782
// begin tmp := result ;
23709: LD_ADDR_VAR 0 9
23713: PUSH
23714: LD_VAR 0 6
23718: ST_TO_ADDR
// for i = tmp downto 1 do
23719: LD_ADDR_VAR 0 7
23723: PUSH
23724: DOUBLE
23725: LD_VAR 0 9
23729: INC
23730: ST_TO_ADDR
23731: LD_INT 1
23733: PUSH
23734: FOR_DOWNTO
23735: IFFALSE 23780
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23737: LD_ADDR_VAR 0 6
23741: PUSH
23742: LD_VAR 0 6
23746: PPUSH
23747: LD_VAR 0 9
23751: PUSH
23752: LD_VAR 0 7
23756: MINUS
23757: PUSH
23758: LD_INT 1
23760: PLUS
23761: PPUSH
23762: LD_VAR 0 9
23766: PUSH
23767: LD_VAR 0 7
23771: ARRAY
23772: PPUSH
23773: CALL_OW 1
23777: ST_TO_ADDR
23778: GO 23734
23780: POP
23781: POP
// end ; tmp := [ ] ;
23782: LD_ADDR_VAR 0 9
23786: PUSH
23787: EMPTY
23788: ST_TO_ADDR
// if mode then
23789: LD_VAR 0 5
23793: IFFALSE 23862
// begin for i = 1 to result do
23795: LD_ADDR_VAR 0 7
23799: PUSH
23800: DOUBLE
23801: LD_INT 1
23803: DEC
23804: ST_TO_ADDR
23805: LD_VAR 0 6
23809: PUSH
23810: FOR_TO
23811: IFFALSE 23850
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23813: LD_ADDR_VAR 0 9
23817: PUSH
23818: LD_VAR 0 9
23822: PPUSH
23823: LD_VAR 0 7
23827: PPUSH
23828: LD_VAR 0 6
23832: PUSH
23833: LD_VAR 0 7
23837: ARRAY
23838: PUSH
23839: LD_INT 1
23841: ARRAY
23842: PPUSH
23843: CALL_OW 1
23847: ST_TO_ADDR
23848: GO 23810
23850: POP
23851: POP
// result := tmp ;
23852: LD_ADDR_VAR 0 6
23856: PUSH
23857: LD_VAR 0 9
23861: ST_TO_ADDR
// end ; end ;
23862: LD_VAR 0 6
23866: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23867: LD_INT 0
23869: PPUSH
23870: PPUSH
23871: PPUSH
23872: PPUSH
23873: PPUSH
23874: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23875: LD_ADDR_VAR 0 5
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: EMPTY
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: ST_TO_ADDR
// if not x or not y then
23897: LD_VAR 0 2
23901: NOT
23902: PUSH
23903: LD_VAR 0 3
23907: NOT
23908: OR
23909: IFFALSE 23913
// exit ;
23911: GO 25565
// if not range then
23913: LD_VAR 0 4
23917: NOT
23918: IFFALSE 23928
// range := 10 ;
23920: LD_ADDR_VAR 0 4
23924: PUSH
23925: LD_INT 10
23927: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23928: LD_ADDR_VAR 0 8
23932: PUSH
23933: LD_INT 81
23935: PUSH
23936: LD_VAR 0 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 92
23947: PUSH
23948: LD_VAR 0 2
23952: PUSH
23953: LD_VAR 0 3
23957: PUSH
23958: LD_VAR 0 4
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 3
23971: PUSH
23972: LD_INT 21
23974: PUSH
23975: LD_INT 3
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: PPUSH
23991: CALL_OW 69
23995: ST_TO_ADDR
// if not tmp then
23996: LD_VAR 0 8
24000: NOT
24001: IFFALSE 24005
// exit ;
24003: GO 25565
// for i in tmp do
24005: LD_ADDR_VAR 0 6
24009: PUSH
24010: LD_VAR 0 8
24014: PUSH
24015: FOR_IN
24016: IFFALSE 25540
// begin points := [ 0 , 0 , 0 ] ;
24018: LD_ADDR_VAR 0 9
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: LD_INT 0
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: ST_TO_ADDR
// bpoints := 1 ;
24037: LD_ADDR_VAR 0 10
24041: PUSH
24042: LD_INT 1
24044: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24045: LD_VAR 0 6
24049: PPUSH
24050: CALL_OW 247
24054: PUSH
24055: LD_INT 1
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24641
24063: POP
// begin if GetClass ( i ) = 1 then
24064: LD_VAR 0 6
24068: PPUSH
24069: CALL_OW 257
24073: PUSH
24074: LD_INT 1
24076: EQUAL
24077: IFFALSE 24098
// points := [ 10 , 5 , 3 ] ;
24079: LD_ADDR_VAR 0 9
24083: PUSH
24084: LD_INT 10
24086: PUSH
24087: LD_INT 5
24089: PUSH
24090: LD_INT 3
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: LIST
24097: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24098: LD_VAR 0 6
24102: PPUSH
24103: CALL_OW 257
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: LD_INT 3
24113: PUSH
24114: LD_INT 4
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: LIST
24121: IN
24122: IFFALSE 24143
// points := [ 3 , 2 , 1 ] ;
24124: LD_ADDR_VAR 0 9
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24143: LD_VAR 0 6
24147: PPUSH
24148: CALL_OW 257
24152: PUSH
24153: LD_INT 5
24155: EQUAL
24156: IFFALSE 24177
// points := [ 130 , 5 , 2 ] ;
24158: LD_ADDR_VAR 0 9
24162: PUSH
24163: LD_INT 130
24165: PUSH
24166: LD_INT 5
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24177: LD_VAR 0 6
24181: PPUSH
24182: CALL_OW 257
24186: PUSH
24187: LD_INT 8
24189: EQUAL
24190: IFFALSE 24211
// points := [ 35 , 35 , 30 ] ;
24192: LD_ADDR_VAR 0 9
24196: PUSH
24197: LD_INT 35
24199: PUSH
24200: LD_INT 35
24202: PUSH
24203: LD_INT 30
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24211: LD_VAR 0 6
24215: PPUSH
24216: CALL_OW 257
24220: PUSH
24221: LD_INT 9
24223: EQUAL
24224: IFFALSE 24245
// points := [ 20 , 55 , 40 ] ;
24226: LD_ADDR_VAR 0 9
24230: PUSH
24231: LD_INT 20
24233: PUSH
24234: LD_INT 55
24236: PUSH
24237: LD_INT 40
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: LIST
24244: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24245: LD_VAR 0 6
24249: PPUSH
24250: CALL_OW 257
24254: PUSH
24255: LD_INT 12
24257: PUSH
24258: LD_INT 16
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: IN
24265: IFFALSE 24286
// points := [ 5 , 3 , 2 ] ;
24267: LD_ADDR_VAR 0 9
24271: PUSH
24272: LD_INT 5
24274: PUSH
24275: LD_INT 3
24277: PUSH
24278: LD_INT 2
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: LIST
24285: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24286: LD_VAR 0 6
24290: PPUSH
24291: CALL_OW 257
24295: PUSH
24296: LD_INT 17
24298: EQUAL
24299: IFFALSE 24320
// points := [ 100 , 50 , 75 ] ;
24301: LD_ADDR_VAR 0 9
24305: PUSH
24306: LD_INT 100
24308: PUSH
24309: LD_INT 50
24311: PUSH
24312: LD_INT 75
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: LIST
24319: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24320: LD_VAR 0 6
24324: PPUSH
24325: CALL_OW 257
24329: PUSH
24330: LD_INT 15
24332: EQUAL
24333: IFFALSE 24354
// points := [ 10 , 5 , 3 ] ;
24335: LD_ADDR_VAR 0 9
24339: PUSH
24340: LD_INT 10
24342: PUSH
24343: LD_INT 5
24345: PUSH
24346: LD_INT 3
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24354: LD_VAR 0 6
24358: PPUSH
24359: CALL_OW 257
24363: PUSH
24364: LD_INT 14
24366: EQUAL
24367: IFFALSE 24388
// points := [ 10 , 0 , 0 ] ;
24369: LD_ADDR_VAR 0 9
24373: PUSH
24374: LD_INT 10
24376: PUSH
24377: LD_INT 0
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24388: LD_VAR 0 6
24392: PPUSH
24393: CALL_OW 257
24397: PUSH
24398: LD_INT 11
24400: EQUAL
24401: IFFALSE 24422
// points := [ 30 , 10 , 5 ] ;
24403: LD_ADDR_VAR 0 9
24407: PUSH
24408: LD_INT 30
24410: PUSH
24411: LD_INT 10
24413: PUSH
24414: LD_INT 5
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24422: LD_VAR 0 1
24426: PPUSH
24427: LD_INT 5
24429: PPUSH
24430: CALL_OW 321
24434: PUSH
24435: LD_INT 2
24437: EQUAL
24438: IFFALSE 24455
// bpoints := bpoints * 1.8 ;
24440: LD_ADDR_VAR 0 10
24444: PUSH
24445: LD_VAR 0 10
24449: PUSH
24450: LD_REAL  1.80000000000000E+0000
24453: MUL
24454: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24455: LD_VAR 0 6
24459: PPUSH
24460: CALL_OW 257
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: LD_INT 3
24473: PUSH
24474: LD_INT 4
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: IN
24483: PUSH
24484: LD_VAR 0 1
24488: PPUSH
24489: LD_INT 51
24491: PPUSH
24492: CALL_OW 321
24496: PUSH
24497: LD_INT 2
24499: EQUAL
24500: AND
24501: IFFALSE 24518
// bpoints := bpoints * 1.2 ;
24503: LD_ADDR_VAR 0 10
24507: PUSH
24508: LD_VAR 0 10
24512: PUSH
24513: LD_REAL  1.20000000000000E+0000
24516: MUL
24517: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24518: LD_VAR 0 6
24522: PPUSH
24523: CALL_OW 257
24527: PUSH
24528: LD_INT 5
24530: PUSH
24531: LD_INT 7
24533: PUSH
24534: LD_INT 9
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: LIST
24541: IN
24542: PUSH
24543: LD_VAR 0 1
24547: PPUSH
24548: LD_INT 52
24550: PPUSH
24551: CALL_OW 321
24555: PUSH
24556: LD_INT 2
24558: EQUAL
24559: AND
24560: IFFALSE 24577
// bpoints := bpoints * 1.5 ;
24562: LD_ADDR_VAR 0 10
24566: PUSH
24567: LD_VAR 0 10
24571: PUSH
24572: LD_REAL  1.50000000000000E+0000
24575: MUL
24576: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_INT 66
24584: PPUSH
24585: CALL_OW 321
24589: PUSH
24590: LD_INT 2
24592: EQUAL
24593: IFFALSE 24610
// bpoints := bpoints * 1.1 ;
24595: LD_ADDR_VAR 0 10
24599: PUSH
24600: LD_VAR 0 10
24604: PUSH
24605: LD_REAL  1.10000000000000E+0000
24608: MUL
24609: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24610: LD_ADDR_VAR 0 10
24614: PUSH
24615: LD_VAR 0 10
24619: PUSH
24620: LD_VAR 0 6
24624: PPUSH
24625: LD_INT 1
24627: PPUSH
24628: CALL_OW 259
24632: PUSH
24633: LD_REAL  1.15000000000000E+0000
24636: MUL
24637: MUL
24638: ST_TO_ADDR
// end ; unit_vehicle :
24639: GO 25469
24641: LD_INT 2
24643: DOUBLE
24644: EQUAL
24645: IFTRUE 24649
24647: GO 25457
24649: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24650: LD_VAR 0 6
24654: PPUSH
24655: CALL_OW 264
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 42
24665: PUSH
24666: LD_INT 24
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: LIST
24673: IN
24674: IFFALSE 24695
// points := [ 25 , 5 , 3 ] ;
24676: LD_ADDR_VAR 0 9
24680: PUSH
24681: LD_INT 25
24683: PUSH
24684: LD_INT 5
24686: PUSH
24687: LD_INT 3
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24695: LD_VAR 0 6
24699: PPUSH
24700: CALL_OW 264
24704: PUSH
24705: LD_INT 4
24707: PUSH
24708: LD_INT 43
24710: PUSH
24711: LD_INT 25
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: LIST
24718: IN
24719: IFFALSE 24740
// points := [ 40 , 15 , 5 ] ;
24721: LD_ADDR_VAR 0 9
24725: PUSH
24726: LD_INT 40
24728: PUSH
24729: LD_INT 15
24731: PUSH
24732: LD_INT 5
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: LIST
24739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24740: LD_VAR 0 6
24744: PPUSH
24745: CALL_OW 264
24749: PUSH
24750: LD_INT 3
24752: PUSH
24753: LD_INT 23
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: IN
24760: IFFALSE 24781
// points := [ 7 , 25 , 8 ] ;
24762: LD_ADDR_VAR 0 9
24766: PUSH
24767: LD_INT 7
24769: PUSH
24770: LD_INT 25
24772: PUSH
24773: LD_INT 8
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24781: LD_VAR 0 6
24785: PPUSH
24786: CALL_OW 264
24790: PUSH
24791: LD_INT 5
24793: PUSH
24794: LD_INT 27
24796: PUSH
24797: LD_INT 44
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: LIST
24804: IN
24805: IFFALSE 24826
// points := [ 14 , 50 , 16 ] ;
24807: LD_ADDR_VAR 0 9
24811: PUSH
24812: LD_INT 14
24814: PUSH
24815: LD_INT 50
24817: PUSH
24818: LD_INT 16
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24826: LD_VAR 0 6
24830: PPUSH
24831: CALL_OW 264
24835: PUSH
24836: LD_INT 6
24838: PUSH
24839: LD_INT 46
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: IN
24846: IFFALSE 24867
// points := [ 32 , 120 , 70 ] ;
24848: LD_ADDR_VAR 0 9
24852: PUSH
24853: LD_INT 32
24855: PUSH
24856: LD_INT 120
24858: PUSH
24859: LD_INT 70
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24867: LD_VAR 0 6
24871: PPUSH
24872: CALL_OW 264
24876: PUSH
24877: LD_INT 7
24879: PUSH
24880: LD_INT 28
24882: PUSH
24883: LD_INT 45
24885: PUSH
24886: LD_EXP 18
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: IN
24897: IFFALSE 24918
// points := [ 35 , 20 , 45 ] ;
24899: LD_ADDR_VAR 0 9
24903: PUSH
24904: LD_INT 35
24906: PUSH
24907: LD_INT 20
24909: PUSH
24910: LD_INT 45
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24918: LD_VAR 0 6
24922: PPUSH
24923: CALL_OW 264
24927: PUSH
24928: LD_INT 47
24930: PUSH
24931: EMPTY
24932: LIST
24933: IN
24934: IFFALSE 24955
// points := [ 67 , 45 , 75 ] ;
24936: LD_ADDR_VAR 0 9
24940: PUSH
24941: LD_INT 67
24943: PUSH
24944: LD_INT 45
24946: PUSH
24947: LD_INT 75
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24955: LD_VAR 0 6
24959: PPUSH
24960: CALL_OW 264
24964: PUSH
24965: LD_INT 26
24967: PUSH
24968: EMPTY
24969: LIST
24970: IN
24971: IFFALSE 24992
// points := [ 120 , 30 , 80 ] ;
24973: LD_ADDR_VAR 0 9
24977: PUSH
24978: LD_INT 120
24980: PUSH
24981: LD_INT 30
24983: PUSH
24984: LD_INT 80
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: LIST
24991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24992: LD_VAR 0 6
24996: PPUSH
24997: CALL_OW 264
25001: PUSH
25002: LD_INT 22
25004: PUSH
25005: EMPTY
25006: LIST
25007: IN
25008: IFFALSE 25029
// points := [ 40 , 1 , 1 ] ;
25010: LD_ADDR_VAR 0 9
25014: PUSH
25015: LD_INT 40
25017: PUSH
25018: LD_INT 1
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25029: LD_VAR 0 6
25033: PPUSH
25034: CALL_OW 264
25038: PUSH
25039: LD_INT 29
25041: PUSH
25042: EMPTY
25043: LIST
25044: IN
25045: IFFALSE 25066
// points := [ 70 , 200 , 400 ] ;
25047: LD_ADDR_VAR 0 9
25051: PUSH
25052: LD_INT 70
25054: PUSH
25055: LD_INT 200
25057: PUSH
25058: LD_INT 400
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25066: LD_VAR 0 6
25070: PPUSH
25071: CALL_OW 264
25075: PUSH
25076: LD_INT 14
25078: PUSH
25079: LD_INT 53
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: IN
25086: IFFALSE 25107
// points := [ 40 , 10 , 20 ] ;
25088: LD_ADDR_VAR 0 9
25092: PUSH
25093: LD_INT 40
25095: PUSH
25096: LD_INT 10
25098: PUSH
25099: LD_INT 20
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25107: LD_VAR 0 6
25111: PPUSH
25112: CALL_OW 264
25116: PUSH
25117: LD_INT 9
25119: PUSH
25120: EMPTY
25121: LIST
25122: IN
25123: IFFALSE 25144
// points := [ 5 , 70 , 20 ] ;
25125: LD_ADDR_VAR 0 9
25129: PUSH
25130: LD_INT 5
25132: PUSH
25133: LD_INT 70
25135: PUSH
25136: LD_INT 20
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25144: LD_VAR 0 6
25148: PPUSH
25149: CALL_OW 264
25153: PUSH
25154: LD_INT 10
25156: PUSH
25157: EMPTY
25158: LIST
25159: IN
25160: IFFALSE 25181
// points := [ 35 , 110 , 70 ] ;
25162: LD_ADDR_VAR 0 9
25166: PUSH
25167: LD_INT 35
25169: PUSH
25170: LD_INT 110
25172: PUSH
25173: LD_INT 70
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: LIST
25180: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25181: LD_VAR 0 6
25185: PPUSH
25186: CALL_OW 265
25190: PUSH
25191: LD_INT 25
25193: EQUAL
25194: IFFALSE 25215
// points := [ 80 , 65 , 100 ] ;
25196: LD_ADDR_VAR 0 9
25200: PUSH
25201: LD_INT 80
25203: PUSH
25204: LD_INT 65
25206: PUSH
25207: LD_INT 100
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: LIST
25214: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25215: LD_VAR 0 6
25219: PPUSH
25220: CALL_OW 263
25224: PUSH
25225: LD_INT 1
25227: EQUAL
25228: IFFALSE 25263
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25230: LD_ADDR_VAR 0 10
25234: PUSH
25235: LD_VAR 0 10
25239: PUSH
25240: LD_VAR 0 6
25244: PPUSH
25245: CALL_OW 311
25249: PPUSH
25250: LD_INT 3
25252: PPUSH
25253: CALL_OW 259
25257: PUSH
25258: LD_INT 4
25260: MUL
25261: MUL
25262: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25263: LD_VAR 0 6
25267: PPUSH
25268: CALL_OW 263
25272: PUSH
25273: LD_INT 2
25275: EQUAL
25276: IFFALSE 25327
// begin j := IsControledBy ( i ) ;
25278: LD_ADDR_VAR 0 7
25282: PUSH
25283: LD_VAR 0 6
25287: PPUSH
25288: CALL_OW 312
25292: ST_TO_ADDR
// if j then
25293: LD_VAR 0 7
25297: IFFALSE 25327
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25299: LD_ADDR_VAR 0 10
25303: PUSH
25304: LD_VAR 0 10
25308: PUSH
25309: LD_VAR 0 7
25313: PPUSH
25314: LD_INT 3
25316: PPUSH
25317: CALL_OW 259
25321: PUSH
25322: LD_INT 3
25324: MUL
25325: MUL
25326: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25327: LD_VAR 0 6
25331: PPUSH
25332: CALL_OW 264
25336: PUSH
25337: LD_INT 5
25339: PUSH
25340: LD_INT 6
25342: PUSH
25343: LD_INT 46
25345: PUSH
25346: LD_INT 44
25348: PUSH
25349: LD_INT 47
25351: PUSH
25352: LD_INT 45
25354: PUSH
25355: LD_INT 28
25357: PUSH
25358: LD_INT 7
25360: PUSH
25361: LD_INT 27
25363: PUSH
25364: LD_INT 29
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: IN
25379: PUSH
25380: LD_VAR 0 1
25384: PPUSH
25385: LD_INT 52
25387: PPUSH
25388: CALL_OW 321
25392: PUSH
25393: LD_INT 2
25395: EQUAL
25396: AND
25397: IFFALSE 25414
// bpoints := bpoints * 1.2 ;
25399: LD_ADDR_VAR 0 10
25403: PUSH
25404: LD_VAR 0 10
25408: PUSH
25409: LD_REAL  1.20000000000000E+0000
25412: MUL
25413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25414: LD_VAR 0 6
25418: PPUSH
25419: CALL_OW 264
25423: PUSH
25424: LD_INT 6
25426: PUSH
25427: LD_INT 46
25429: PUSH
25430: LD_INT 47
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: LIST
25437: IN
25438: IFFALSE 25455
// bpoints := bpoints * 1.2 ;
25440: LD_ADDR_VAR 0 10
25444: PUSH
25445: LD_VAR 0 10
25449: PUSH
25450: LD_REAL  1.20000000000000E+0000
25453: MUL
25454: ST_TO_ADDR
// end ; unit_building :
25455: GO 25469
25457: LD_INT 3
25459: DOUBLE
25460: EQUAL
25461: IFTRUE 25465
25463: GO 25468
25465: POP
// ; end ;
25466: GO 25469
25468: POP
// for j = 1 to 3 do
25469: LD_ADDR_VAR 0 7
25473: PUSH
25474: DOUBLE
25475: LD_INT 1
25477: DEC
25478: ST_TO_ADDR
25479: LD_INT 3
25481: PUSH
25482: FOR_TO
25483: IFFALSE 25536
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25485: LD_ADDR_VAR 0 5
25489: PUSH
25490: LD_VAR 0 5
25494: PPUSH
25495: LD_VAR 0 7
25499: PPUSH
25500: LD_VAR 0 5
25504: PUSH
25505: LD_VAR 0 7
25509: ARRAY
25510: PUSH
25511: LD_VAR 0 9
25515: PUSH
25516: LD_VAR 0 7
25520: ARRAY
25521: PUSH
25522: LD_VAR 0 10
25526: MUL
25527: PLUS
25528: PPUSH
25529: CALL_OW 1
25533: ST_TO_ADDR
25534: GO 25482
25536: POP
25537: POP
// end ;
25538: GO 24015
25540: POP
25541: POP
// result := Replace ( result , 4 , tmp ) ;
25542: LD_ADDR_VAR 0 5
25546: PUSH
25547: LD_VAR 0 5
25551: PPUSH
25552: LD_INT 4
25554: PPUSH
25555: LD_VAR 0 8
25559: PPUSH
25560: CALL_OW 1
25564: ST_TO_ADDR
// end ;
25565: LD_VAR 0 5
25569: RET
// export function DangerAtRange ( unit , range ) ; begin
25570: LD_INT 0
25572: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25573: LD_ADDR_VAR 0 3
25577: PUSH
25578: LD_VAR 0 1
25582: PPUSH
25583: CALL_OW 255
25587: PPUSH
25588: LD_VAR 0 1
25592: PPUSH
25593: CALL_OW 250
25597: PPUSH
25598: LD_VAR 0 1
25602: PPUSH
25603: CALL_OW 251
25607: PPUSH
25608: LD_VAR 0 2
25612: PPUSH
25613: CALL 23867 0 4
25617: ST_TO_ADDR
// end ;
25618: LD_VAR 0 3
25622: RET
// export function DangerInArea ( side , area ) ; begin
25623: LD_INT 0
25625: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25626: LD_ADDR_VAR 0 3
25630: PUSH
25631: LD_VAR 0 2
25635: PPUSH
25636: LD_INT 81
25638: PUSH
25639: LD_VAR 0 1
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PPUSH
25648: CALL_OW 70
25652: ST_TO_ADDR
// end ;
25653: LD_VAR 0 3
25657: RET
// export function IsExtension ( b ) ; begin
25658: LD_INT 0
25660: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25661: LD_ADDR_VAR 0 2
25665: PUSH
25666: LD_VAR 0 1
25670: PUSH
25671: LD_INT 23
25673: PUSH
25674: LD_INT 20
25676: PUSH
25677: LD_INT 22
25679: PUSH
25680: LD_INT 17
25682: PUSH
25683: LD_INT 24
25685: PUSH
25686: LD_INT 21
25688: PUSH
25689: LD_INT 19
25691: PUSH
25692: LD_INT 16
25694: PUSH
25695: LD_INT 25
25697: PUSH
25698: LD_INT 18
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: IN
25713: ST_TO_ADDR
// end ;
25714: LD_VAR 0 2
25718: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25719: LD_INT 0
25721: PPUSH
25722: PPUSH
25723: PPUSH
// result := [ ] ;
25724: LD_ADDR_VAR 0 4
25728: PUSH
25729: EMPTY
25730: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25731: LD_ADDR_VAR 0 5
25735: PUSH
25736: LD_VAR 0 2
25740: PPUSH
25741: LD_INT 21
25743: PUSH
25744: LD_INT 3
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PPUSH
25751: CALL_OW 70
25755: ST_TO_ADDR
// if not tmp then
25756: LD_VAR 0 5
25760: NOT
25761: IFFALSE 25765
// exit ;
25763: GO 25829
// if checkLink then
25765: LD_VAR 0 3
25769: IFFALSE 25819
// begin for i in tmp do
25771: LD_ADDR_VAR 0 6
25775: PUSH
25776: LD_VAR 0 5
25780: PUSH
25781: FOR_IN
25782: IFFALSE 25817
// if GetBase ( i ) <> base then
25784: LD_VAR 0 6
25788: PPUSH
25789: CALL_OW 274
25793: PUSH
25794: LD_VAR 0 1
25798: NONEQUAL
25799: IFFALSE 25815
// ComLinkToBase ( base , i ) ;
25801: LD_VAR 0 1
25805: PPUSH
25806: LD_VAR 0 6
25810: PPUSH
25811: CALL_OW 169
25815: GO 25781
25817: POP
25818: POP
// end ; result := tmp ;
25819: LD_ADDR_VAR 0 4
25823: PUSH
25824: LD_VAR 0 5
25828: ST_TO_ADDR
// end ;
25829: LD_VAR 0 4
25833: RET
// export function ComComplete ( units , b ) ; var i ; begin
25834: LD_INT 0
25836: PPUSH
25837: PPUSH
// if not units then
25838: LD_VAR 0 1
25842: NOT
25843: IFFALSE 25847
// exit ;
25845: GO 25937
// for i in units do
25847: LD_ADDR_VAR 0 4
25851: PUSH
25852: LD_VAR 0 1
25856: PUSH
25857: FOR_IN
25858: IFFALSE 25935
// if BuildingStatus ( b ) = bs_build then
25860: LD_VAR 0 2
25864: PPUSH
25865: CALL_OW 461
25869: PUSH
25870: LD_INT 1
25872: EQUAL
25873: IFFALSE 25933
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25875: LD_VAR 0 4
25879: PPUSH
25880: LD_STRING h
25882: PUSH
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 250
25892: PUSH
25893: LD_VAR 0 2
25897: PPUSH
25898: CALL_OW 251
25902: PUSH
25903: LD_VAR 0 2
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: PPUSH
25929: CALL_OW 446
25933: GO 25857
25935: POP
25936: POP
// end ;
25937: LD_VAR 0 3
25941: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25942: LD_INT 0
25944: PPUSH
25945: PPUSH
25946: PPUSH
25947: PPUSH
25948: PPUSH
25949: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25950: LD_VAR 0 1
25954: NOT
25955: PUSH
25956: LD_VAR 0 1
25960: PPUSH
25961: CALL_OW 263
25965: PUSH
25966: LD_INT 2
25968: NONEQUAL
25969: OR
25970: IFFALSE 25974
// exit ;
25972: GO 26290
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25974: LD_ADDR_VAR 0 6
25978: PUSH
25979: LD_INT 22
25981: PUSH
25982: LD_VAR 0 1
25986: PPUSH
25987: CALL_OW 255
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: LD_INT 30
26001: PUSH
26002: LD_INT 36
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 34
26011: PUSH
26012: LD_INT 31
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: LIST
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PPUSH
26028: CALL_OW 69
26032: ST_TO_ADDR
// if not tmp then
26033: LD_VAR 0 6
26037: NOT
26038: IFFALSE 26042
// exit ;
26040: GO 26290
// result := [ ] ;
26042: LD_ADDR_VAR 0 2
26046: PUSH
26047: EMPTY
26048: ST_TO_ADDR
// for i in tmp do
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_VAR 0 6
26058: PUSH
26059: FOR_IN
26060: IFFALSE 26131
// begin t := UnitsInside ( i ) ;
26062: LD_ADDR_VAR 0 4
26066: PUSH
26067: LD_VAR 0 3
26071: PPUSH
26072: CALL_OW 313
26076: ST_TO_ADDR
// if t then
26077: LD_VAR 0 4
26081: IFFALSE 26129
// for j in t do
26083: LD_ADDR_VAR 0 7
26087: PUSH
26088: LD_VAR 0 4
26092: PUSH
26093: FOR_IN
26094: IFFALSE 26127
// result := Replace ( result , result + 1 , j ) ;
26096: LD_ADDR_VAR 0 2
26100: PUSH
26101: LD_VAR 0 2
26105: PPUSH
26106: LD_VAR 0 2
26110: PUSH
26111: LD_INT 1
26113: PLUS
26114: PPUSH
26115: LD_VAR 0 7
26119: PPUSH
26120: CALL_OW 1
26124: ST_TO_ADDR
26125: GO 26093
26127: POP
26128: POP
// end ;
26129: GO 26059
26131: POP
26132: POP
// if not result then
26133: LD_VAR 0 2
26137: NOT
26138: IFFALSE 26142
// exit ;
26140: GO 26290
// mech := result [ 1 ] ;
26142: LD_ADDR_VAR 0 5
26146: PUSH
26147: LD_VAR 0 2
26151: PUSH
26152: LD_INT 1
26154: ARRAY
26155: ST_TO_ADDR
// if result > 1 then
26156: LD_VAR 0 2
26160: PUSH
26161: LD_INT 1
26163: GREATER
26164: IFFALSE 26276
// begin for i = 2 to result do
26166: LD_ADDR_VAR 0 3
26170: PUSH
26171: DOUBLE
26172: LD_INT 2
26174: DEC
26175: ST_TO_ADDR
26176: LD_VAR 0 2
26180: PUSH
26181: FOR_TO
26182: IFFALSE 26274
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26184: LD_ADDR_VAR 0 4
26188: PUSH
26189: LD_VAR 0 2
26193: PUSH
26194: LD_VAR 0 3
26198: ARRAY
26199: PPUSH
26200: LD_INT 3
26202: PPUSH
26203: CALL_OW 259
26207: PUSH
26208: LD_VAR 0 2
26212: PUSH
26213: LD_VAR 0 3
26217: ARRAY
26218: PPUSH
26219: CALL_OW 432
26223: MINUS
26224: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26225: LD_VAR 0 4
26229: PUSH
26230: LD_VAR 0 5
26234: PPUSH
26235: LD_INT 3
26237: PPUSH
26238: CALL_OW 259
26242: PUSH
26243: LD_VAR 0 5
26247: PPUSH
26248: CALL_OW 432
26252: MINUS
26253: GREATEREQUAL
26254: IFFALSE 26272
// mech := result [ i ] ;
26256: LD_ADDR_VAR 0 5
26260: PUSH
26261: LD_VAR 0 2
26265: PUSH
26266: LD_VAR 0 3
26270: ARRAY
26271: ST_TO_ADDR
// end ;
26272: GO 26181
26274: POP
26275: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26276: LD_VAR 0 1
26280: PPUSH
26281: LD_VAR 0 5
26285: PPUSH
26286: CALL_OW 135
// end ;
26290: LD_VAR 0 2
26294: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26295: LD_INT 0
26297: PPUSH
26298: PPUSH
26299: PPUSH
26300: PPUSH
26301: PPUSH
26302: PPUSH
26303: PPUSH
26304: PPUSH
26305: PPUSH
26306: PPUSH
26307: PPUSH
26308: PPUSH
26309: PPUSH
// result := [ ] ;
26310: LD_ADDR_VAR 0 7
26314: PUSH
26315: EMPTY
26316: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26317: LD_VAR 0 1
26321: PPUSH
26322: CALL_OW 266
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: IN
26337: NOT
26338: IFFALSE 26342
// exit ;
26340: GO 27976
// if name then
26342: LD_VAR 0 3
26346: IFFALSE 26362
// SetBName ( base_dep , name ) ;
26348: LD_VAR 0 1
26352: PPUSH
26353: LD_VAR 0 3
26357: PPUSH
26358: CALL_OW 500
// base := GetBase ( base_dep ) ;
26362: LD_ADDR_VAR 0 15
26366: PUSH
26367: LD_VAR 0 1
26371: PPUSH
26372: CALL_OW 274
26376: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26377: LD_ADDR_VAR 0 16
26381: PUSH
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL_OW 255
26391: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26392: LD_ADDR_VAR 0 17
26396: PUSH
26397: LD_VAR 0 1
26401: PPUSH
26402: CALL_OW 248
26406: ST_TO_ADDR
// if sources then
26407: LD_VAR 0 5
26411: IFFALSE 26458
// for i = 1 to 3 do
26413: LD_ADDR_VAR 0 8
26417: PUSH
26418: DOUBLE
26419: LD_INT 1
26421: DEC
26422: ST_TO_ADDR
26423: LD_INT 3
26425: PUSH
26426: FOR_TO
26427: IFFALSE 26456
// AddResourceType ( base , i , sources [ i ] ) ;
26429: LD_VAR 0 15
26433: PPUSH
26434: LD_VAR 0 8
26438: PPUSH
26439: LD_VAR 0 5
26443: PUSH
26444: LD_VAR 0 8
26448: ARRAY
26449: PPUSH
26450: CALL_OW 276
26454: GO 26426
26456: POP
26457: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26458: LD_ADDR_VAR 0 18
26462: PUSH
26463: LD_VAR 0 15
26467: PPUSH
26468: LD_VAR 0 2
26472: PPUSH
26473: LD_INT 1
26475: PPUSH
26476: CALL 25719 0 3
26480: ST_TO_ADDR
// InitHc ;
26481: CALL_OW 19
// InitUc ;
26485: CALL_OW 18
// uc_side := side ;
26489: LD_ADDR_OWVAR 20
26493: PUSH
26494: LD_VAR 0 16
26498: ST_TO_ADDR
// uc_nation := nation ;
26499: LD_ADDR_OWVAR 21
26503: PUSH
26504: LD_VAR 0 17
26508: ST_TO_ADDR
// if buildings then
26509: LD_VAR 0 18
26513: IFFALSE 27835
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26515: LD_ADDR_VAR 0 19
26519: PUSH
26520: LD_VAR 0 18
26524: PPUSH
26525: LD_INT 2
26527: PUSH
26528: LD_INT 30
26530: PUSH
26531: LD_INT 29
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 30
26540: PUSH
26541: LD_INT 30
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: PPUSH
26553: CALL_OW 72
26557: ST_TO_ADDR
// if tmp then
26558: LD_VAR 0 19
26562: IFFALSE 26610
// for i in tmp do
26564: LD_ADDR_VAR 0 8
26568: PUSH
26569: LD_VAR 0 19
26573: PUSH
26574: FOR_IN
26575: IFFALSE 26608
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26577: LD_VAR 0 8
26581: PPUSH
26582: CALL_OW 250
26586: PPUSH
26587: LD_VAR 0 8
26591: PPUSH
26592: CALL_OW 251
26596: PPUSH
26597: LD_VAR 0 16
26601: PPUSH
26602: CALL_OW 441
26606: GO 26574
26608: POP
26609: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26610: LD_VAR 0 18
26614: PPUSH
26615: LD_INT 2
26617: PUSH
26618: LD_INT 30
26620: PUSH
26621: LD_INT 32
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 30
26630: PUSH
26631: LD_INT 33
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: PPUSH
26643: CALL_OW 72
26647: IFFALSE 26735
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26649: LD_ADDR_VAR 0 8
26653: PUSH
26654: LD_VAR 0 18
26658: PPUSH
26659: LD_INT 2
26661: PUSH
26662: LD_INT 30
26664: PUSH
26665: LD_INT 32
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 30
26674: PUSH
26675: LD_INT 33
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: PPUSH
26687: CALL_OW 72
26691: PUSH
26692: FOR_IN
26693: IFFALSE 26733
// begin if not GetBWeapon ( i ) then
26695: LD_VAR 0 8
26699: PPUSH
26700: CALL_OW 269
26704: NOT
26705: IFFALSE 26731
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26707: LD_VAR 0 8
26711: PPUSH
26712: LD_VAR 0 8
26716: PPUSH
26717: LD_VAR 0 2
26721: PPUSH
26722: CALL 27981 0 2
26726: PPUSH
26727: CALL_OW 431
// end ;
26731: GO 26692
26733: POP
26734: POP
// end ; for i = 1 to personel do
26735: LD_ADDR_VAR 0 8
26739: PUSH
26740: DOUBLE
26741: LD_INT 1
26743: DEC
26744: ST_TO_ADDR
26745: LD_VAR 0 6
26749: PUSH
26750: FOR_TO
26751: IFFALSE 27815
// begin if i > 4 then
26753: LD_VAR 0 8
26757: PUSH
26758: LD_INT 4
26760: GREATER
26761: IFFALSE 26765
// break ;
26763: GO 27815
// case i of 1 :
26765: LD_VAR 0 8
26769: PUSH
26770: LD_INT 1
26772: DOUBLE
26773: EQUAL
26774: IFTRUE 26778
26776: GO 26858
26778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26779: LD_ADDR_VAR 0 12
26783: PUSH
26784: LD_VAR 0 18
26788: PPUSH
26789: LD_INT 22
26791: PUSH
26792: LD_VAR 0 16
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 58
26803: PUSH
26804: EMPTY
26805: LIST
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: LD_INT 30
26812: PUSH
26813: LD_INT 32
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 30
26822: PUSH
26823: LD_INT 4
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 30
26832: PUSH
26833: LD_INT 5
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: LIST
26850: PPUSH
26851: CALL_OW 72
26855: ST_TO_ADDR
26856: GO 27080
26858: LD_INT 2
26860: DOUBLE
26861: EQUAL
26862: IFTRUE 26866
26864: GO 26928
26866: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26867: LD_ADDR_VAR 0 12
26871: PUSH
26872: LD_VAR 0 18
26876: PPUSH
26877: LD_INT 22
26879: PUSH
26880: LD_VAR 0 16
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 30
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 30
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PPUSH
26921: CALL_OW 72
26925: ST_TO_ADDR
26926: GO 27080
26928: LD_INT 3
26930: DOUBLE
26931: EQUAL
26932: IFTRUE 26936
26934: GO 26998
26936: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26937: LD_ADDR_VAR 0 12
26941: PUSH
26942: LD_VAR 0 18
26946: PPUSH
26947: LD_INT 22
26949: PUSH
26950: LD_VAR 0 16
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 2
26961: PUSH
26962: LD_INT 30
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 30
26974: PUSH
26975: LD_INT 3
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 72
26995: ST_TO_ADDR
26996: GO 27080
26998: LD_INT 4
27000: DOUBLE
27001: EQUAL
27002: IFTRUE 27006
27004: GO 27079
27006: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
27007: LD_ADDR_VAR 0 12
27011: PUSH
27012: LD_VAR 0 18
27016: PPUSH
27017: LD_INT 22
27019: PUSH
27020: LD_VAR 0 16
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: LD_INT 30
27034: PUSH
27035: LD_INT 6
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 30
27044: PUSH
27045: LD_INT 7
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 30
27054: PUSH
27055: LD_INT 8
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PPUSH
27072: CALL_OW 72
27076: ST_TO_ADDR
27077: GO 27080
27079: POP
// if i = 1 then
27080: LD_VAR 0 8
27084: PUSH
27085: LD_INT 1
27087: EQUAL
27088: IFFALSE 27199
// begin tmp := [ ] ;
27090: LD_ADDR_VAR 0 19
27094: PUSH
27095: EMPTY
27096: ST_TO_ADDR
// for j in f do
27097: LD_ADDR_VAR 0 9
27101: PUSH
27102: LD_VAR 0 12
27106: PUSH
27107: FOR_IN
27108: IFFALSE 27181
// if GetBType ( j ) = b_bunker then
27110: LD_VAR 0 9
27114: PPUSH
27115: CALL_OW 266
27119: PUSH
27120: LD_INT 32
27122: EQUAL
27123: IFFALSE 27150
// tmp := Insert ( tmp , 1 , j ) else
27125: LD_ADDR_VAR 0 19
27129: PUSH
27130: LD_VAR 0 19
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: LD_VAR 0 9
27142: PPUSH
27143: CALL_OW 2
27147: ST_TO_ADDR
27148: GO 27179
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27150: LD_ADDR_VAR 0 19
27154: PUSH
27155: LD_VAR 0 19
27159: PPUSH
27160: LD_VAR 0 19
27164: PUSH
27165: LD_INT 1
27167: PLUS
27168: PPUSH
27169: LD_VAR 0 9
27173: PPUSH
27174: CALL_OW 2
27178: ST_TO_ADDR
27179: GO 27107
27181: POP
27182: POP
// if tmp then
27183: LD_VAR 0 19
27187: IFFALSE 27199
// f := tmp ;
27189: LD_ADDR_VAR 0 12
27193: PUSH
27194: LD_VAR 0 19
27198: ST_TO_ADDR
// end ; x := personel [ i ] ;
27199: LD_ADDR_VAR 0 13
27203: PUSH
27204: LD_VAR 0 6
27208: PUSH
27209: LD_VAR 0 8
27213: ARRAY
27214: ST_TO_ADDR
// if x = - 1 then
27215: LD_VAR 0 13
27219: PUSH
27220: LD_INT 1
27222: NEG
27223: EQUAL
27224: IFFALSE 27433
// begin for j in f do
27226: LD_ADDR_VAR 0 9
27230: PUSH
27231: LD_VAR 0 12
27235: PUSH
27236: FOR_IN
27237: IFFALSE 27429
// repeat InitHc ;
27239: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27243: LD_VAR 0 9
27247: PPUSH
27248: CALL_OW 266
27252: PUSH
27253: LD_INT 5
27255: EQUAL
27256: IFFALSE 27326
// begin if UnitsInside ( j ) < 3 then
27258: LD_VAR 0 9
27262: PPUSH
27263: CALL_OW 313
27267: PUSH
27268: LD_INT 3
27270: LESS
27271: IFFALSE 27307
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27273: LD_INT 0
27275: PPUSH
27276: LD_INT 5
27278: PUSH
27279: LD_INT 8
27281: PUSH
27282: LD_INT 9
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: PUSH
27290: LD_VAR 0 17
27294: ARRAY
27295: PPUSH
27296: LD_VAR 0 4
27300: PPUSH
27301: CALL_OW 380
27305: GO 27324
// PrepareHuman ( false , i , skill ) ;
27307: LD_INT 0
27309: PPUSH
27310: LD_VAR 0 8
27314: PPUSH
27315: LD_VAR 0 4
27319: PPUSH
27320: CALL_OW 380
// end else
27324: GO 27343
// PrepareHuman ( false , i , skill ) ;
27326: LD_INT 0
27328: PPUSH
27329: LD_VAR 0 8
27333: PPUSH
27334: LD_VAR 0 4
27338: PPUSH
27339: CALL_OW 380
// un := CreateHuman ;
27343: LD_ADDR_VAR 0 14
27347: PUSH
27348: CALL_OW 44
27352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27353: LD_ADDR_VAR 0 7
27357: PUSH
27358: LD_VAR 0 7
27362: PPUSH
27363: LD_INT 1
27365: PPUSH
27366: LD_VAR 0 14
27370: PPUSH
27371: CALL_OW 2
27375: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27376: LD_VAR 0 14
27380: PPUSH
27381: LD_VAR 0 9
27385: PPUSH
27386: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27390: LD_VAR 0 9
27394: PPUSH
27395: CALL_OW 313
27399: PUSH
27400: LD_INT 6
27402: EQUAL
27403: PUSH
27404: LD_VAR 0 9
27408: PPUSH
27409: CALL_OW 266
27413: PUSH
27414: LD_INT 32
27416: PUSH
27417: LD_INT 31
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: IN
27424: OR
27425: IFFALSE 27239
27427: GO 27236
27429: POP
27430: POP
// end else
27431: GO 27813
// for j = 1 to x do
27433: LD_ADDR_VAR 0 9
27437: PUSH
27438: DOUBLE
27439: LD_INT 1
27441: DEC
27442: ST_TO_ADDR
27443: LD_VAR 0 13
27447: PUSH
27448: FOR_TO
27449: IFFALSE 27811
// begin InitHc ;
27451: CALL_OW 19
// if not f then
27455: LD_VAR 0 12
27459: NOT
27460: IFFALSE 27549
// begin PrepareHuman ( false , i , skill ) ;
27462: LD_INT 0
27464: PPUSH
27465: LD_VAR 0 8
27469: PPUSH
27470: LD_VAR 0 4
27474: PPUSH
27475: CALL_OW 380
// un := CreateHuman ;
27479: LD_ADDR_VAR 0 14
27483: PUSH
27484: CALL_OW 44
27488: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27489: LD_ADDR_VAR 0 7
27493: PUSH
27494: LD_VAR 0 7
27498: PPUSH
27499: LD_INT 1
27501: PPUSH
27502: LD_VAR 0 14
27506: PPUSH
27507: CALL_OW 2
27511: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27512: LD_VAR 0 14
27516: PPUSH
27517: LD_VAR 0 1
27521: PPUSH
27522: CALL_OW 250
27526: PPUSH
27527: LD_VAR 0 1
27531: PPUSH
27532: CALL_OW 251
27536: PPUSH
27537: LD_INT 10
27539: PPUSH
27540: LD_INT 0
27542: PPUSH
27543: CALL_OW 50
// continue ;
27547: GO 27448
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27549: LD_VAR 0 12
27553: PUSH
27554: LD_INT 1
27556: ARRAY
27557: PPUSH
27558: CALL_OW 313
27562: PUSH
27563: LD_VAR 0 12
27567: PUSH
27568: LD_INT 1
27570: ARRAY
27571: PPUSH
27572: CALL_OW 266
27576: PUSH
27577: LD_INT 32
27579: PUSH
27580: LD_INT 31
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: IN
27587: AND
27588: PUSH
27589: LD_VAR 0 12
27593: PUSH
27594: LD_INT 1
27596: ARRAY
27597: PPUSH
27598: CALL_OW 313
27602: PUSH
27603: LD_INT 6
27605: EQUAL
27606: OR
27607: IFFALSE 27627
// f := Delete ( f , 1 ) ;
27609: LD_ADDR_VAR 0 12
27613: PUSH
27614: LD_VAR 0 12
27618: PPUSH
27619: LD_INT 1
27621: PPUSH
27622: CALL_OW 3
27626: ST_TO_ADDR
// if not f then
27627: LD_VAR 0 12
27631: NOT
27632: IFFALSE 27650
// begin x := x + 2 ;
27634: LD_ADDR_VAR 0 13
27638: PUSH
27639: LD_VAR 0 13
27643: PUSH
27644: LD_INT 2
27646: PLUS
27647: ST_TO_ADDR
// continue ;
27648: GO 27448
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27650: LD_VAR 0 12
27654: PUSH
27655: LD_INT 1
27657: ARRAY
27658: PPUSH
27659: CALL_OW 266
27663: PUSH
27664: LD_INT 5
27666: EQUAL
27667: IFFALSE 27741
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27669: LD_VAR 0 12
27673: PUSH
27674: LD_INT 1
27676: ARRAY
27677: PPUSH
27678: CALL_OW 313
27682: PUSH
27683: LD_INT 3
27685: LESS
27686: IFFALSE 27722
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27688: LD_INT 0
27690: PPUSH
27691: LD_INT 5
27693: PUSH
27694: LD_INT 8
27696: PUSH
27697: LD_INT 9
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: PUSH
27705: LD_VAR 0 17
27709: ARRAY
27710: PPUSH
27711: LD_VAR 0 4
27715: PPUSH
27716: CALL_OW 380
27720: GO 27739
// PrepareHuman ( false , i , skill ) ;
27722: LD_INT 0
27724: PPUSH
27725: LD_VAR 0 8
27729: PPUSH
27730: LD_VAR 0 4
27734: PPUSH
27735: CALL_OW 380
// end else
27739: GO 27758
// PrepareHuman ( false , i , skill ) ;
27741: LD_INT 0
27743: PPUSH
27744: LD_VAR 0 8
27748: PPUSH
27749: LD_VAR 0 4
27753: PPUSH
27754: CALL_OW 380
// un := CreateHuman ;
27758: LD_ADDR_VAR 0 14
27762: PUSH
27763: CALL_OW 44
27767: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27768: LD_ADDR_VAR 0 7
27772: PUSH
27773: LD_VAR 0 7
27777: PPUSH
27778: LD_INT 1
27780: PPUSH
27781: LD_VAR 0 14
27785: PPUSH
27786: CALL_OW 2
27790: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27791: LD_VAR 0 14
27795: PPUSH
27796: LD_VAR 0 12
27800: PUSH
27801: LD_INT 1
27803: ARRAY
27804: PPUSH
27805: CALL_OW 52
// end ;
27809: GO 27448
27811: POP
27812: POP
// end ;
27813: GO 26750
27815: POP
27816: POP
// result := result ^ buildings ;
27817: LD_ADDR_VAR 0 7
27821: PUSH
27822: LD_VAR 0 7
27826: PUSH
27827: LD_VAR 0 18
27831: ADD
27832: ST_TO_ADDR
// end else
27833: GO 27976
// begin for i = 1 to personel do
27835: LD_ADDR_VAR 0 8
27839: PUSH
27840: DOUBLE
27841: LD_INT 1
27843: DEC
27844: ST_TO_ADDR
27845: LD_VAR 0 6
27849: PUSH
27850: FOR_TO
27851: IFFALSE 27974
// begin if i > 4 then
27853: LD_VAR 0 8
27857: PUSH
27858: LD_INT 4
27860: GREATER
27861: IFFALSE 27865
// break ;
27863: GO 27974
// x := personel [ i ] ;
27865: LD_ADDR_VAR 0 13
27869: PUSH
27870: LD_VAR 0 6
27874: PUSH
27875: LD_VAR 0 8
27879: ARRAY
27880: ST_TO_ADDR
// if x = - 1 then
27881: LD_VAR 0 13
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: EQUAL
27890: IFFALSE 27894
// continue ;
27892: GO 27850
// PrepareHuman ( false , i , skill ) ;
27894: LD_INT 0
27896: PPUSH
27897: LD_VAR 0 8
27901: PPUSH
27902: LD_VAR 0 4
27906: PPUSH
27907: CALL_OW 380
// un := CreateHuman ;
27911: LD_ADDR_VAR 0 14
27915: PUSH
27916: CALL_OW 44
27920: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27921: LD_VAR 0 14
27925: PPUSH
27926: LD_VAR 0 1
27930: PPUSH
27931: CALL_OW 250
27935: PPUSH
27936: LD_VAR 0 1
27940: PPUSH
27941: CALL_OW 251
27945: PPUSH
27946: LD_INT 10
27948: PPUSH
27949: LD_INT 0
27951: PPUSH
27952: CALL_OW 50
// result := result ^ un ;
27956: LD_ADDR_VAR 0 7
27960: PUSH
27961: LD_VAR 0 7
27965: PUSH
27966: LD_VAR 0 14
27970: ADD
27971: ST_TO_ADDR
// end ;
27972: GO 27850
27974: POP
27975: POP
// end ; end ;
27976: LD_VAR 0 7
27980: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27981: LD_INT 0
27983: PPUSH
27984: PPUSH
27985: PPUSH
27986: PPUSH
27987: PPUSH
27988: PPUSH
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
27993: PPUSH
27994: PPUSH
27995: PPUSH
27996: PPUSH
27997: PPUSH
27998: PPUSH
// result := false ;
27999: LD_ADDR_VAR 0 3
28003: PUSH
28004: LD_INT 0
28006: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
28007: LD_VAR 0 1
28011: NOT
28012: PUSH
28013: LD_VAR 0 1
28017: PPUSH
28018: CALL_OW 266
28022: PUSH
28023: LD_INT 32
28025: PUSH
28026: LD_INT 33
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: IN
28033: NOT
28034: OR
28035: IFFALSE 28039
// exit ;
28037: GO 29148
// nat := GetNation ( tower ) ;
28039: LD_ADDR_VAR 0 12
28043: PUSH
28044: LD_VAR 0 1
28048: PPUSH
28049: CALL_OW 248
28053: ST_TO_ADDR
// side := GetSide ( tower ) ;
28054: LD_ADDR_VAR 0 16
28058: PUSH
28059: LD_VAR 0 1
28063: PPUSH
28064: CALL_OW 255
28068: ST_TO_ADDR
// x := GetX ( tower ) ;
28069: LD_ADDR_VAR 0 10
28073: PUSH
28074: LD_VAR 0 1
28078: PPUSH
28079: CALL_OW 250
28083: ST_TO_ADDR
// y := GetY ( tower ) ;
28084: LD_ADDR_VAR 0 11
28088: PUSH
28089: LD_VAR 0 1
28093: PPUSH
28094: CALL_OW 251
28098: ST_TO_ADDR
// if not x or not y then
28099: LD_VAR 0 10
28103: NOT
28104: PUSH
28105: LD_VAR 0 11
28109: NOT
28110: OR
28111: IFFALSE 28115
// exit ;
28113: GO 29148
// weapon := 0 ;
28115: LD_ADDR_VAR 0 18
28119: PUSH
28120: LD_INT 0
28122: ST_TO_ADDR
// fac_list := [ ] ;
28123: LD_ADDR_VAR 0 17
28127: PUSH
28128: EMPTY
28129: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28130: LD_ADDR_VAR 0 6
28134: PUSH
28135: LD_VAR 0 1
28139: PPUSH
28140: CALL_OW 274
28144: PPUSH
28145: LD_VAR 0 2
28149: PPUSH
28150: LD_INT 0
28152: PPUSH
28153: CALL 25719 0 3
28157: PPUSH
28158: LD_INT 30
28160: PUSH
28161: LD_INT 3
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PPUSH
28168: CALL_OW 72
28172: ST_TO_ADDR
// if not factories then
28173: LD_VAR 0 6
28177: NOT
28178: IFFALSE 28182
// exit ;
28180: GO 29148
// for i in factories do
28182: LD_ADDR_VAR 0 8
28186: PUSH
28187: LD_VAR 0 6
28191: PUSH
28192: FOR_IN
28193: IFFALSE 28218
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28195: LD_ADDR_VAR 0 17
28199: PUSH
28200: LD_VAR 0 17
28204: PUSH
28205: LD_VAR 0 8
28209: PPUSH
28210: CALL_OW 478
28214: UNION
28215: ST_TO_ADDR
28216: GO 28192
28218: POP
28219: POP
// if not fac_list then
28220: LD_VAR 0 17
28224: NOT
28225: IFFALSE 28229
// exit ;
28227: GO 29148
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28229: LD_ADDR_VAR 0 5
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: LD_INT 5
28239: PUSH
28240: LD_INT 9
28242: PUSH
28243: LD_INT 10
28245: PUSH
28246: LD_INT 6
28248: PUSH
28249: LD_INT 7
28251: PUSH
28252: LD_INT 11
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 27
28266: PUSH
28267: LD_INT 28
28269: PUSH
28270: LD_INT 26
28272: PUSH
28273: LD_INT 30
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 43
28284: PUSH
28285: LD_INT 44
28287: PUSH
28288: LD_INT 46
28290: PUSH
28291: LD_INT 45
28293: PUSH
28294: LD_INT 47
28296: PUSH
28297: LD_INT 49
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: LIST
28312: PUSH
28313: LD_VAR 0 12
28317: ARRAY
28318: ST_TO_ADDR
// list := list isect fac_list ;
28319: LD_ADDR_VAR 0 5
28323: PUSH
28324: LD_VAR 0 5
28328: PUSH
28329: LD_VAR 0 17
28333: ISECT
28334: ST_TO_ADDR
// if not list then
28335: LD_VAR 0 5
28339: NOT
28340: IFFALSE 28344
// exit ;
28342: GO 29148
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28344: LD_VAR 0 12
28348: PUSH
28349: LD_INT 3
28351: EQUAL
28352: PUSH
28353: LD_INT 49
28355: PUSH
28356: LD_VAR 0 5
28360: IN
28361: AND
28362: PUSH
28363: LD_INT 31
28365: PPUSH
28366: LD_VAR 0 16
28370: PPUSH
28371: CALL_OW 321
28375: PUSH
28376: LD_INT 2
28378: EQUAL
28379: AND
28380: IFFALSE 28440
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28382: LD_INT 22
28384: PUSH
28385: LD_VAR 0 16
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 35
28396: PUSH
28397: LD_INT 49
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 91
28406: PUSH
28407: LD_VAR 0 1
28411: PUSH
28412: LD_INT 10
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: PPUSH
28425: CALL_OW 69
28429: NOT
28430: IFFALSE 28440
// weapon := ru_time_lapser ;
28432: LD_ADDR_VAR 0 18
28436: PUSH
28437: LD_INT 49
28439: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28440: LD_VAR 0 12
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: IN
28455: PUSH
28456: LD_INT 11
28458: PUSH
28459: LD_VAR 0 5
28463: IN
28464: PUSH
28465: LD_INT 30
28467: PUSH
28468: LD_VAR 0 5
28472: IN
28473: OR
28474: AND
28475: PUSH
28476: LD_INT 6
28478: PPUSH
28479: LD_VAR 0 16
28483: PPUSH
28484: CALL_OW 321
28488: PUSH
28489: LD_INT 2
28491: EQUAL
28492: AND
28493: IFFALSE 28658
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28495: LD_INT 22
28497: PUSH
28498: LD_VAR 0 16
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 2
28509: PUSH
28510: LD_INT 35
28512: PUSH
28513: LD_INT 11
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 35
28522: PUSH
28523: LD_INT 30
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 91
28537: PUSH
28538: LD_VAR 0 1
28542: PUSH
28543: LD_INT 18
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: LIST
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: PPUSH
28556: CALL_OW 69
28560: NOT
28561: PUSH
28562: LD_INT 22
28564: PUSH
28565: LD_VAR 0 16
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 2
28576: PUSH
28577: LD_INT 30
28579: PUSH
28580: LD_INT 32
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 30
28589: PUSH
28590: LD_INT 33
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 91
28604: PUSH
28605: LD_VAR 0 1
28609: PUSH
28610: LD_INT 12
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: PUSH
28623: EMPTY
28624: LIST
28625: PPUSH
28626: CALL_OW 69
28630: PUSH
28631: LD_INT 2
28633: GREATER
28634: AND
28635: IFFALSE 28658
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28637: LD_ADDR_VAR 0 18
28641: PUSH
28642: LD_INT 11
28644: PUSH
28645: LD_INT 30
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_VAR 0 12
28656: ARRAY
28657: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28658: LD_VAR 0 18
28662: NOT
28663: PUSH
28664: LD_INT 40
28666: PPUSH
28667: LD_VAR 0 16
28671: PPUSH
28672: CALL_OW 321
28676: PUSH
28677: LD_INT 2
28679: EQUAL
28680: AND
28681: PUSH
28682: LD_INT 7
28684: PUSH
28685: LD_VAR 0 5
28689: IN
28690: PUSH
28691: LD_INT 28
28693: PUSH
28694: LD_VAR 0 5
28698: IN
28699: OR
28700: PUSH
28701: LD_INT 45
28703: PUSH
28704: LD_VAR 0 5
28708: IN
28709: OR
28710: AND
28711: IFFALSE 28965
// begin hex := GetHexInfo ( x , y ) ;
28713: LD_ADDR_VAR 0 4
28717: PUSH
28718: LD_VAR 0 10
28722: PPUSH
28723: LD_VAR 0 11
28727: PPUSH
28728: CALL_OW 546
28732: ST_TO_ADDR
// if hex [ 1 ] then
28733: LD_VAR 0 4
28737: PUSH
28738: LD_INT 1
28740: ARRAY
28741: IFFALSE 28745
// exit ;
28743: GO 29148
// height := hex [ 2 ] ;
28745: LD_ADDR_VAR 0 15
28749: PUSH
28750: LD_VAR 0 4
28754: PUSH
28755: LD_INT 2
28757: ARRAY
28758: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28759: LD_ADDR_VAR 0 14
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: LD_INT 3
28772: PUSH
28773: LD_INT 5
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: ST_TO_ADDR
// for i in tmp do
28782: LD_ADDR_VAR 0 8
28786: PUSH
28787: LD_VAR 0 14
28791: PUSH
28792: FOR_IN
28793: IFFALSE 28963
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28795: LD_ADDR_VAR 0 9
28799: PUSH
28800: LD_VAR 0 10
28804: PPUSH
28805: LD_VAR 0 8
28809: PPUSH
28810: LD_INT 5
28812: PPUSH
28813: CALL_OW 272
28817: PUSH
28818: LD_VAR 0 11
28822: PPUSH
28823: LD_VAR 0 8
28827: PPUSH
28828: LD_INT 5
28830: PPUSH
28831: CALL_OW 273
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28840: LD_VAR 0 9
28844: PUSH
28845: LD_INT 1
28847: ARRAY
28848: PPUSH
28849: LD_VAR 0 9
28853: PUSH
28854: LD_INT 2
28856: ARRAY
28857: PPUSH
28858: CALL_OW 488
28862: IFFALSE 28961
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28864: LD_ADDR_VAR 0 4
28868: PUSH
28869: LD_VAR 0 9
28873: PUSH
28874: LD_INT 1
28876: ARRAY
28877: PPUSH
28878: LD_VAR 0 9
28882: PUSH
28883: LD_INT 2
28885: ARRAY
28886: PPUSH
28887: CALL_OW 546
28891: ST_TO_ADDR
// if hex [ 1 ] then
28892: LD_VAR 0 4
28896: PUSH
28897: LD_INT 1
28899: ARRAY
28900: IFFALSE 28904
// continue ;
28902: GO 28792
// h := hex [ 2 ] ;
28904: LD_ADDR_VAR 0 13
28908: PUSH
28909: LD_VAR 0 4
28913: PUSH
28914: LD_INT 2
28916: ARRAY
28917: ST_TO_ADDR
// if h + 7 < height then
28918: LD_VAR 0 13
28922: PUSH
28923: LD_INT 7
28925: PLUS
28926: PUSH
28927: LD_VAR 0 15
28931: LESS
28932: IFFALSE 28961
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28934: LD_ADDR_VAR 0 18
28938: PUSH
28939: LD_INT 7
28941: PUSH
28942: LD_INT 28
28944: PUSH
28945: LD_INT 45
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: LIST
28952: PUSH
28953: LD_VAR 0 12
28957: ARRAY
28958: ST_TO_ADDR
// break ;
28959: GO 28963
// end ; end ; end ;
28961: GO 28792
28963: POP
28964: POP
// end ; if not weapon then
28965: LD_VAR 0 18
28969: NOT
28970: IFFALSE 29030
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28972: LD_ADDR_VAR 0 5
28976: PUSH
28977: LD_VAR 0 5
28981: PUSH
28982: LD_INT 11
28984: PUSH
28985: LD_INT 30
28987: PUSH
28988: LD_INT 49
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: LIST
28995: DIFF
28996: ST_TO_ADDR
// if not list then
28997: LD_VAR 0 5
29001: NOT
29002: IFFALSE 29006
// exit ;
29004: GO 29148
// weapon := list [ rand ( 1 , list ) ] ;
29006: LD_ADDR_VAR 0 18
29010: PUSH
29011: LD_VAR 0 5
29015: PUSH
29016: LD_INT 1
29018: PPUSH
29019: LD_VAR 0 5
29023: PPUSH
29024: CALL_OW 12
29028: ARRAY
29029: ST_TO_ADDR
// end ; if weapon then
29030: LD_VAR 0 18
29034: IFFALSE 29148
// begin tmp := CostOfWeapon ( weapon ) ;
29036: LD_ADDR_VAR 0 14
29040: PUSH
29041: LD_VAR 0 18
29045: PPUSH
29046: CALL_OW 451
29050: ST_TO_ADDR
// j := GetBase ( tower ) ;
29051: LD_ADDR_VAR 0 9
29055: PUSH
29056: LD_VAR 0 1
29060: PPUSH
29061: CALL_OW 274
29065: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29066: LD_VAR 0 9
29070: PPUSH
29071: LD_INT 1
29073: PPUSH
29074: CALL_OW 275
29078: PUSH
29079: LD_VAR 0 14
29083: PUSH
29084: LD_INT 1
29086: ARRAY
29087: GREATEREQUAL
29088: PUSH
29089: LD_VAR 0 9
29093: PPUSH
29094: LD_INT 2
29096: PPUSH
29097: CALL_OW 275
29101: PUSH
29102: LD_VAR 0 14
29106: PUSH
29107: LD_INT 2
29109: ARRAY
29110: GREATEREQUAL
29111: AND
29112: PUSH
29113: LD_VAR 0 9
29117: PPUSH
29118: LD_INT 3
29120: PPUSH
29121: CALL_OW 275
29125: PUSH
29126: LD_VAR 0 14
29130: PUSH
29131: LD_INT 3
29133: ARRAY
29134: GREATEREQUAL
29135: AND
29136: IFFALSE 29148
// result := weapon ;
29138: LD_ADDR_VAR 0 3
29142: PUSH
29143: LD_VAR 0 18
29147: ST_TO_ADDR
// end ; end ;
29148: LD_VAR 0 3
29152: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29153: LD_INT 0
29155: PPUSH
29156: PPUSH
// result := true ;
29157: LD_ADDR_VAR 0 3
29161: PUSH
29162: LD_INT 1
29164: ST_TO_ADDR
// if array1 = array2 then
29165: LD_VAR 0 1
29169: PUSH
29170: LD_VAR 0 2
29174: EQUAL
29175: IFFALSE 29235
// begin for i = 1 to array1 do
29177: LD_ADDR_VAR 0 4
29181: PUSH
29182: DOUBLE
29183: LD_INT 1
29185: DEC
29186: ST_TO_ADDR
29187: LD_VAR 0 1
29191: PUSH
29192: FOR_TO
29193: IFFALSE 29231
// if array1 [ i ] <> array2 [ i ] then
29195: LD_VAR 0 1
29199: PUSH
29200: LD_VAR 0 4
29204: ARRAY
29205: PUSH
29206: LD_VAR 0 2
29210: PUSH
29211: LD_VAR 0 4
29215: ARRAY
29216: NONEQUAL
29217: IFFALSE 29229
// begin result := false ;
29219: LD_ADDR_VAR 0 3
29223: PUSH
29224: LD_INT 0
29226: ST_TO_ADDR
// break ;
29227: GO 29231
// end ;
29229: GO 29192
29231: POP
29232: POP
// end else
29233: GO 29243
// result := false ;
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_INT 0
29242: ST_TO_ADDR
// end ;
29243: LD_VAR 0 3
29247: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29248: LD_INT 0
29250: PPUSH
29251: PPUSH
// if not array1 or not array2 then
29252: LD_VAR 0 1
29256: NOT
29257: PUSH
29258: LD_VAR 0 2
29262: NOT
29263: OR
29264: IFFALSE 29268
// exit ;
29266: GO 29332
// result := true ;
29268: LD_ADDR_VAR 0 3
29272: PUSH
29273: LD_INT 1
29275: ST_TO_ADDR
// for i = 1 to array1 do
29276: LD_ADDR_VAR 0 4
29280: PUSH
29281: DOUBLE
29282: LD_INT 1
29284: DEC
29285: ST_TO_ADDR
29286: LD_VAR 0 1
29290: PUSH
29291: FOR_TO
29292: IFFALSE 29330
// if array1 [ i ] <> array2 [ i ] then
29294: LD_VAR 0 1
29298: PUSH
29299: LD_VAR 0 4
29303: ARRAY
29304: PUSH
29305: LD_VAR 0 2
29309: PUSH
29310: LD_VAR 0 4
29314: ARRAY
29315: NONEQUAL
29316: IFFALSE 29328
// begin result := false ;
29318: LD_ADDR_VAR 0 3
29322: PUSH
29323: LD_INT 0
29325: ST_TO_ADDR
// break ;
29326: GO 29330
// end ;
29328: GO 29291
29330: POP
29331: POP
// end ;
29332: LD_VAR 0 3
29336: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29337: LD_INT 0
29339: PPUSH
29340: PPUSH
29341: PPUSH
// pom := GetBase ( fac ) ;
29342: LD_ADDR_VAR 0 5
29346: PUSH
29347: LD_VAR 0 1
29351: PPUSH
29352: CALL_OW 274
29356: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29357: LD_ADDR_VAR 0 4
29361: PUSH
29362: LD_VAR 0 2
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: LD_VAR 0 2
29375: PUSH
29376: LD_INT 2
29378: ARRAY
29379: PPUSH
29380: LD_VAR 0 2
29384: PUSH
29385: LD_INT 3
29387: ARRAY
29388: PPUSH
29389: LD_VAR 0 2
29393: PUSH
29394: LD_INT 4
29396: ARRAY
29397: PPUSH
29398: CALL_OW 449
29402: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29403: LD_ADDR_VAR 0 3
29407: PUSH
29408: LD_VAR 0 5
29412: PPUSH
29413: LD_INT 1
29415: PPUSH
29416: CALL_OW 275
29420: PUSH
29421: LD_VAR 0 4
29425: PUSH
29426: LD_INT 1
29428: ARRAY
29429: GREATEREQUAL
29430: PUSH
29431: LD_VAR 0 5
29435: PPUSH
29436: LD_INT 2
29438: PPUSH
29439: CALL_OW 275
29443: PUSH
29444: LD_VAR 0 4
29448: PUSH
29449: LD_INT 2
29451: ARRAY
29452: GREATEREQUAL
29453: AND
29454: PUSH
29455: LD_VAR 0 5
29459: PPUSH
29460: LD_INT 3
29462: PPUSH
29463: CALL_OW 275
29467: PUSH
29468: LD_VAR 0 4
29472: PUSH
29473: LD_INT 3
29475: ARRAY
29476: GREATEREQUAL
29477: AND
29478: ST_TO_ADDR
// end ;
29479: LD_VAR 0 3
29483: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29484: LD_INT 0
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
// pom := GetBase ( building ) ;
29490: LD_ADDR_VAR 0 3
29494: PUSH
29495: LD_VAR 0 1
29499: PPUSH
29500: CALL_OW 274
29504: ST_TO_ADDR
// if not pom then
29505: LD_VAR 0 3
29509: NOT
29510: IFFALSE 29514
// exit ;
29512: GO 29684
// btype := GetBType ( building ) ;
29514: LD_ADDR_VAR 0 5
29518: PUSH
29519: LD_VAR 0 1
29523: PPUSH
29524: CALL_OW 266
29528: ST_TO_ADDR
// if btype = b_armoury then
29529: LD_VAR 0 5
29533: PUSH
29534: LD_INT 4
29536: EQUAL
29537: IFFALSE 29547
// btype := b_barracks ;
29539: LD_ADDR_VAR 0 5
29543: PUSH
29544: LD_INT 5
29546: ST_TO_ADDR
// if btype = b_depot then
29547: LD_VAR 0 5
29551: PUSH
29552: LD_INT 0
29554: EQUAL
29555: IFFALSE 29565
// btype := b_warehouse ;
29557: LD_ADDR_VAR 0 5
29561: PUSH
29562: LD_INT 1
29564: ST_TO_ADDR
// if btype = b_workshop then
29565: LD_VAR 0 5
29569: PUSH
29570: LD_INT 2
29572: EQUAL
29573: IFFALSE 29583
// btype := b_factory ;
29575: LD_ADDR_VAR 0 5
29579: PUSH
29580: LD_INT 3
29582: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29583: LD_ADDR_VAR 0 4
29587: PUSH
29588: LD_VAR 0 5
29592: PPUSH
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL_OW 248
29602: PPUSH
29603: CALL_OW 450
29607: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29608: LD_ADDR_VAR 0 2
29612: PUSH
29613: LD_VAR 0 3
29617: PPUSH
29618: LD_INT 1
29620: PPUSH
29621: CALL_OW 275
29625: PUSH
29626: LD_VAR 0 4
29630: PUSH
29631: LD_INT 1
29633: ARRAY
29634: GREATEREQUAL
29635: PUSH
29636: LD_VAR 0 3
29640: PPUSH
29641: LD_INT 2
29643: PPUSH
29644: CALL_OW 275
29648: PUSH
29649: LD_VAR 0 4
29653: PUSH
29654: LD_INT 2
29656: ARRAY
29657: GREATEREQUAL
29658: AND
29659: PUSH
29660: LD_VAR 0 3
29664: PPUSH
29665: LD_INT 3
29667: PPUSH
29668: CALL_OW 275
29672: PUSH
29673: LD_VAR 0 4
29677: PUSH
29678: LD_INT 3
29680: ARRAY
29681: GREATEREQUAL
29682: AND
29683: ST_TO_ADDR
// end ;
29684: LD_VAR 0 2
29688: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29689: LD_INT 0
29691: PPUSH
29692: PPUSH
29693: PPUSH
// pom := GetBase ( building ) ;
29694: LD_ADDR_VAR 0 4
29698: PUSH
29699: LD_VAR 0 1
29703: PPUSH
29704: CALL_OW 274
29708: ST_TO_ADDR
// if not pom then
29709: LD_VAR 0 4
29713: NOT
29714: IFFALSE 29718
// exit ;
29716: GO 29819
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29718: LD_ADDR_VAR 0 5
29722: PUSH
29723: LD_VAR 0 2
29727: PPUSH
29728: LD_VAR 0 1
29732: PPUSH
29733: CALL_OW 248
29737: PPUSH
29738: CALL_OW 450
29742: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29743: LD_ADDR_VAR 0 3
29747: PUSH
29748: LD_VAR 0 4
29752: PPUSH
29753: LD_INT 1
29755: PPUSH
29756: CALL_OW 275
29760: PUSH
29761: LD_VAR 0 5
29765: PUSH
29766: LD_INT 1
29768: ARRAY
29769: GREATEREQUAL
29770: PUSH
29771: LD_VAR 0 4
29775: PPUSH
29776: LD_INT 2
29778: PPUSH
29779: CALL_OW 275
29783: PUSH
29784: LD_VAR 0 5
29788: PUSH
29789: LD_INT 2
29791: ARRAY
29792: GREATEREQUAL
29793: AND
29794: PUSH
29795: LD_VAR 0 4
29799: PPUSH
29800: LD_INT 3
29802: PPUSH
29803: CALL_OW 275
29807: PUSH
29808: LD_VAR 0 5
29812: PUSH
29813: LD_INT 3
29815: ARRAY
29816: GREATEREQUAL
29817: AND
29818: ST_TO_ADDR
// end ;
29819: LD_VAR 0 3
29823: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29824: LD_INT 0
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
29836: PPUSH
// result := false ;
29837: LD_ADDR_VAR 0 8
29841: PUSH
29842: LD_INT 0
29844: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29845: LD_VAR 0 5
29849: NOT
29850: PUSH
29851: LD_VAR 0 1
29855: NOT
29856: OR
29857: PUSH
29858: LD_VAR 0 2
29862: NOT
29863: OR
29864: PUSH
29865: LD_VAR 0 3
29869: NOT
29870: OR
29871: IFFALSE 29875
// exit ;
29873: GO 30689
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29875: LD_ADDR_VAR 0 14
29879: PUSH
29880: LD_VAR 0 1
29884: PPUSH
29885: LD_VAR 0 2
29889: PPUSH
29890: LD_VAR 0 3
29894: PPUSH
29895: LD_VAR 0 4
29899: PPUSH
29900: LD_VAR 0 5
29904: PUSH
29905: LD_INT 1
29907: ARRAY
29908: PPUSH
29909: CALL_OW 248
29913: PPUSH
29914: LD_INT 0
29916: PPUSH
29917: CALL 31926 0 6
29921: ST_TO_ADDR
// if not hexes then
29922: LD_VAR 0 14
29926: NOT
29927: IFFALSE 29931
// exit ;
29929: GO 30689
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29931: LD_ADDR_VAR 0 17
29935: PUSH
29936: LD_VAR 0 5
29940: PPUSH
29941: LD_INT 22
29943: PUSH
29944: LD_VAR 0 13
29948: PPUSH
29949: CALL_OW 255
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: LD_INT 30
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 30
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PPUSH
29990: CALL_OW 72
29994: ST_TO_ADDR
// for i = 1 to hexes do
29995: LD_ADDR_VAR 0 9
29999: PUSH
30000: DOUBLE
30001: LD_INT 1
30003: DEC
30004: ST_TO_ADDR
30005: LD_VAR 0 14
30009: PUSH
30010: FOR_TO
30011: IFFALSE 30687
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30013: LD_ADDR_VAR 0 13
30017: PUSH
30018: LD_VAR 0 14
30022: PUSH
30023: LD_VAR 0 9
30027: ARRAY
30028: PUSH
30029: LD_INT 1
30031: ARRAY
30032: PPUSH
30033: LD_VAR 0 14
30037: PUSH
30038: LD_VAR 0 9
30042: ARRAY
30043: PUSH
30044: LD_INT 2
30046: ARRAY
30047: PPUSH
30048: CALL_OW 428
30052: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30053: LD_VAR 0 14
30057: PUSH
30058: LD_VAR 0 9
30062: ARRAY
30063: PUSH
30064: LD_INT 1
30066: ARRAY
30067: PPUSH
30068: LD_VAR 0 14
30072: PUSH
30073: LD_VAR 0 9
30077: ARRAY
30078: PUSH
30079: LD_INT 2
30081: ARRAY
30082: PPUSH
30083: CALL_OW 351
30087: PUSH
30088: LD_VAR 0 14
30092: PUSH
30093: LD_VAR 0 9
30097: ARRAY
30098: PUSH
30099: LD_INT 1
30101: ARRAY
30102: PPUSH
30103: LD_VAR 0 14
30107: PUSH
30108: LD_VAR 0 9
30112: ARRAY
30113: PUSH
30114: LD_INT 2
30116: ARRAY
30117: PPUSH
30118: CALL_OW 488
30122: NOT
30123: OR
30124: PUSH
30125: LD_VAR 0 13
30129: PPUSH
30130: CALL_OW 247
30134: PUSH
30135: LD_INT 3
30137: EQUAL
30138: OR
30139: IFFALSE 30145
// exit ;
30141: POP
30142: POP
30143: GO 30689
// if not tmp then
30145: LD_VAR 0 13
30149: NOT
30150: IFFALSE 30154
// continue ;
30152: GO 30010
// result := true ;
30154: LD_ADDR_VAR 0 8
30158: PUSH
30159: LD_INT 1
30161: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30162: LD_VAR 0 6
30166: PUSH
30167: LD_VAR 0 13
30171: PPUSH
30172: CALL_OW 247
30176: PUSH
30177: LD_INT 2
30179: EQUAL
30180: AND
30181: PUSH
30182: LD_VAR 0 13
30186: PPUSH
30187: CALL_OW 263
30191: PUSH
30192: LD_INT 1
30194: EQUAL
30195: AND
30196: IFFALSE 30360
// begin if IsDrivenBy ( tmp ) then
30198: LD_VAR 0 13
30202: PPUSH
30203: CALL_OW 311
30207: IFFALSE 30211
// continue ;
30209: GO 30010
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30211: LD_VAR 0 6
30215: PPUSH
30216: LD_INT 3
30218: PUSH
30219: LD_INT 60
30221: PUSH
30222: EMPTY
30223: LIST
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: LD_INT 55
30234: PUSH
30235: EMPTY
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PPUSH
30246: CALL_OW 72
30250: IFFALSE 30358
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30252: LD_ADDR_VAR 0 18
30256: PUSH
30257: LD_VAR 0 6
30261: PPUSH
30262: LD_INT 3
30264: PUSH
30265: LD_INT 60
30267: PUSH
30268: EMPTY
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 3
30277: PUSH
30278: LD_INT 55
30280: PUSH
30281: EMPTY
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PPUSH
30292: CALL_OW 72
30296: PUSH
30297: LD_INT 1
30299: ARRAY
30300: ST_TO_ADDR
// if IsInUnit ( driver ) then
30301: LD_VAR 0 18
30305: PPUSH
30306: CALL_OW 310
30310: IFFALSE 30321
// ComExit ( driver ) ;
30312: LD_VAR 0 18
30316: PPUSH
30317: CALL 55110 0 1
// AddComEnterUnit ( driver , tmp ) ;
30321: LD_VAR 0 18
30325: PPUSH
30326: LD_VAR 0 13
30330: PPUSH
30331: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30335: LD_VAR 0 18
30339: PPUSH
30340: LD_VAR 0 7
30344: PPUSH
30345: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30349: LD_VAR 0 18
30353: PPUSH
30354: CALL_OW 181
// end ; continue ;
30358: GO 30010
// end ; if not cleaners or not tmp in cleaners then
30360: LD_VAR 0 6
30364: NOT
30365: PUSH
30366: LD_VAR 0 13
30370: PUSH
30371: LD_VAR 0 6
30375: IN
30376: NOT
30377: OR
30378: IFFALSE 30685
// begin if dep then
30380: LD_VAR 0 17
30384: IFFALSE 30520
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30386: LD_ADDR_VAR 0 16
30390: PUSH
30391: LD_VAR 0 17
30395: PUSH
30396: LD_INT 1
30398: ARRAY
30399: PPUSH
30400: CALL_OW 250
30404: PPUSH
30405: LD_VAR 0 17
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: CALL_OW 254
30418: PPUSH
30419: LD_INT 5
30421: PPUSH
30422: CALL_OW 272
30426: PUSH
30427: LD_VAR 0 17
30431: PUSH
30432: LD_INT 1
30434: ARRAY
30435: PPUSH
30436: CALL_OW 251
30440: PPUSH
30441: LD_VAR 0 17
30445: PUSH
30446: LD_INT 1
30448: ARRAY
30449: PPUSH
30450: CALL_OW 254
30454: PPUSH
30455: LD_INT 5
30457: PPUSH
30458: CALL_OW 273
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30467: LD_VAR 0 16
30471: PUSH
30472: LD_INT 1
30474: ARRAY
30475: PPUSH
30476: LD_VAR 0 16
30480: PUSH
30481: LD_INT 2
30483: ARRAY
30484: PPUSH
30485: CALL_OW 488
30489: IFFALSE 30520
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30491: LD_VAR 0 13
30495: PPUSH
30496: LD_VAR 0 16
30500: PUSH
30501: LD_INT 1
30503: ARRAY
30504: PPUSH
30505: LD_VAR 0 16
30509: PUSH
30510: LD_INT 2
30512: ARRAY
30513: PPUSH
30514: CALL_OW 111
// continue ;
30518: GO 30010
// end ; end ; r := GetDir ( tmp ) ;
30520: LD_ADDR_VAR 0 15
30524: PUSH
30525: LD_VAR 0 13
30529: PPUSH
30530: CALL_OW 254
30534: ST_TO_ADDR
// if r = 5 then
30535: LD_VAR 0 15
30539: PUSH
30540: LD_INT 5
30542: EQUAL
30543: IFFALSE 30553
// r := 0 ;
30545: LD_ADDR_VAR 0 15
30549: PUSH
30550: LD_INT 0
30552: ST_TO_ADDR
// for j = r to 5 do
30553: LD_ADDR_VAR 0 10
30557: PUSH
30558: DOUBLE
30559: LD_VAR 0 15
30563: DEC
30564: ST_TO_ADDR
30565: LD_INT 5
30567: PUSH
30568: FOR_TO
30569: IFFALSE 30683
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30571: LD_ADDR_VAR 0 11
30575: PUSH
30576: LD_VAR 0 13
30580: PPUSH
30581: CALL_OW 250
30585: PPUSH
30586: LD_VAR 0 10
30590: PPUSH
30591: LD_INT 2
30593: PPUSH
30594: CALL_OW 272
30598: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30599: LD_ADDR_VAR 0 12
30603: PUSH
30604: LD_VAR 0 13
30608: PPUSH
30609: CALL_OW 251
30613: PPUSH
30614: LD_VAR 0 10
30618: PPUSH
30619: LD_INT 2
30621: PPUSH
30622: CALL_OW 273
30626: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30627: LD_VAR 0 11
30631: PPUSH
30632: LD_VAR 0 12
30636: PPUSH
30637: CALL_OW 488
30641: PUSH
30642: LD_VAR 0 11
30646: PPUSH
30647: LD_VAR 0 12
30651: PPUSH
30652: CALL_OW 428
30656: NOT
30657: AND
30658: IFFALSE 30681
// begin ComMoveXY ( tmp , _x , _y ) ;
30660: LD_VAR 0 13
30664: PPUSH
30665: LD_VAR 0 11
30669: PPUSH
30670: LD_VAR 0 12
30674: PPUSH
30675: CALL_OW 111
// break ;
30679: GO 30683
// end ; end ;
30681: GO 30568
30683: POP
30684: POP
// end ; end ;
30685: GO 30010
30687: POP
30688: POP
// end ;
30689: LD_VAR 0 8
30693: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30694: LD_INT 0
30696: PPUSH
// result := true ;
30697: LD_ADDR_VAR 0 3
30701: PUSH
30702: LD_INT 1
30704: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30705: LD_VAR 0 2
30709: PUSH
30710: LD_INT 24
30712: DOUBLE
30713: EQUAL
30714: IFTRUE 30724
30716: LD_INT 33
30718: DOUBLE
30719: EQUAL
30720: IFTRUE 30724
30722: GO 30749
30724: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30725: LD_ADDR_VAR 0 3
30729: PUSH
30730: LD_INT 32
30732: PPUSH
30733: LD_VAR 0 1
30737: PPUSH
30738: CALL_OW 321
30742: PUSH
30743: LD_INT 2
30745: EQUAL
30746: ST_TO_ADDR
30747: GO 31069
30749: LD_INT 20
30751: DOUBLE
30752: EQUAL
30753: IFTRUE 30757
30755: GO 30782
30757: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30758: LD_ADDR_VAR 0 3
30762: PUSH
30763: LD_INT 6
30765: PPUSH
30766: LD_VAR 0 1
30770: PPUSH
30771: CALL_OW 321
30775: PUSH
30776: LD_INT 2
30778: EQUAL
30779: ST_TO_ADDR
30780: GO 31069
30782: LD_INT 22
30784: DOUBLE
30785: EQUAL
30786: IFTRUE 30796
30788: LD_INT 36
30790: DOUBLE
30791: EQUAL
30792: IFTRUE 30796
30794: GO 30821
30796: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30797: LD_ADDR_VAR 0 3
30801: PUSH
30802: LD_INT 15
30804: PPUSH
30805: LD_VAR 0 1
30809: PPUSH
30810: CALL_OW 321
30814: PUSH
30815: LD_INT 2
30817: EQUAL
30818: ST_TO_ADDR
30819: GO 31069
30821: LD_INT 30
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30854
30829: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30830: LD_ADDR_VAR 0 3
30834: PUSH
30835: LD_INT 20
30837: PPUSH
30838: LD_VAR 0 1
30842: PPUSH
30843: CALL_OW 321
30847: PUSH
30848: LD_INT 2
30850: EQUAL
30851: ST_TO_ADDR
30852: GO 31069
30854: LD_INT 28
30856: DOUBLE
30857: EQUAL
30858: IFTRUE 30868
30860: LD_INT 21
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 30893
30868: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30869: LD_ADDR_VAR 0 3
30873: PUSH
30874: LD_INT 21
30876: PPUSH
30877: LD_VAR 0 1
30881: PPUSH
30882: CALL_OW 321
30886: PUSH
30887: LD_INT 2
30889: EQUAL
30890: ST_TO_ADDR
30891: GO 31069
30893: LD_INT 16
30895: DOUBLE
30896: EQUAL
30897: IFTRUE 30901
30899: GO 30928
30901: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30902: LD_ADDR_VAR 0 3
30906: PUSH
30907: LD_EXP 25
30911: PPUSH
30912: LD_VAR 0 1
30916: PPUSH
30917: CALL_OW 321
30921: PUSH
30922: LD_INT 2
30924: EQUAL
30925: ST_TO_ADDR
30926: GO 31069
30928: LD_INT 19
30930: DOUBLE
30931: EQUAL
30932: IFTRUE 30942
30934: LD_INT 23
30936: DOUBLE
30937: EQUAL
30938: IFTRUE 30942
30940: GO 30969
30942: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_EXP 24
30952: PPUSH
30953: LD_VAR 0 1
30957: PPUSH
30958: CALL_OW 321
30962: PUSH
30963: LD_INT 2
30965: EQUAL
30966: ST_TO_ADDR
30967: GO 31069
30969: LD_INT 17
30971: DOUBLE
30972: EQUAL
30973: IFTRUE 30977
30975: GO 31002
30977: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30978: LD_ADDR_VAR 0 3
30982: PUSH
30983: LD_INT 39
30985: PPUSH
30986: LD_VAR 0 1
30990: PPUSH
30991: CALL_OW 321
30995: PUSH
30996: LD_INT 2
30998: EQUAL
30999: ST_TO_ADDR
31000: GO 31069
31002: LD_INT 18
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31035
31010: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
31011: LD_ADDR_VAR 0 3
31015: PUSH
31016: LD_INT 40
31018: PPUSH
31019: LD_VAR 0 1
31023: PPUSH
31024: CALL_OW 321
31028: PUSH
31029: LD_INT 2
31031: EQUAL
31032: ST_TO_ADDR
31033: GO 31069
31035: LD_INT 27
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31068
31043: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 35
31051: PPUSH
31052: LD_VAR 0 1
31056: PPUSH
31057: CALL_OW 321
31061: PUSH
31062: LD_INT 2
31064: EQUAL
31065: ST_TO_ADDR
31066: GO 31069
31068: POP
// end ;
31069: LD_VAR 0 3
31073: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31074: LD_INT 0
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
31083: PPUSH
31084: PPUSH
31085: PPUSH
31086: PPUSH
// result := false ;
31087: LD_ADDR_VAR 0 6
31091: PUSH
31092: LD_INT 0
31094: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31095: LD_VAR 0 1
31099: NOT
31100: PUSH
31101: LD_VAR 0 1
31105: PPUSH
31106: CALL_OW 266
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: IN
31121: NOT
31122: OR
31123: PUSH
31124: LD_VAR 0 2
31128: NOT
31129: OR
31130: PUSH
31131: LD_VAR 0 5
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: LD_INT 2
31144: PUSH
31145: LD_INT 3
31147: PUSH
31148: LD_INT 4
31150: PUSH
31151: LD_INT 5
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: IN
31162: NOT
31163: OR
31164: PUSH
31165: LD_VAR 0 3
31169: PPUSH
31170: LD_VAR 0 4
31174: PPUSH
31175: CALL_OW 488
31179: NOT
31180: OR
31181: IFFALSE 31185
// exit ;
31183: GO 31921
// side := GetSide ( depot ) ;
31185: LD_ADDR_VAR 0 9
31189: PUSH
31190: LD_VAR 0 1
31194: PPUSH
31195: CALL_OW 255
31199: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31200: LD_VAR 0 9
31204: PPUSH
31205: LD_VAR 0 2
31209: PPUSH
31210: CALL 30694 0 2
31214: NOT
31215: IFFALSE 31219
// exit ;
31217: GO 31921
// pom := GetBase ( depot ) ;
31219: LD_ADDR_VAR 0 10
31223: PUSH
31224: LD_VAR 0 1
31228: PPUSH
31229: CALL_OW 274
31233: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31234: LD_ADDR_VAR 0 11
31238: PUSH
31239: LD_VAR 0 2
31243: PPUSH
31244: LD_VAR 0 1
31248: PPUSH
31249: CALL_OW 248
31253: PPUSH
31254: CALL_OW 450
31258: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31259: LD_VAR 0 10
31263: PPUSH
31264: LD_INT 1
31266: PPUSH
31267: CALL_OW 275
31271: PUSH
31272: LD_VAR 0 11
31276: PUSH
31277: LD_INT 1
31279: ARRAY
31280: GREATEREQUAL
31281: PUSH
31282: LD_VAR 0 10
31286: PPUSH
31287: LD_INT 2
31289: PPUSH
31290: CALL_OW 275
31294: PUSH
31295: LD_VAR 0 11
31299: PUSH
31300: LD_INT 2
31302: ARRAY
31303: GREATEREQUAL
31304: AND
31305: PUSH
31306: LD_VAR 0 10
31310: PPUSH
31311: LD_INT 3
31313: PPUSH
31314: CALL_OW 275
31318: PUSH
31319: LD_VAR 0 11
31323: PUSH
31324: LD_INT 3
31326: ARRAY
31327: GREATEREQUAL
31328: AND
31329: NOT
31330: IFFALSE 31334
// exit ;
31332: GO 31921
// if GetBType ( depot ) = b_depot then
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 266
31343: PUSH
31344: LD_INT 0
31346: EQUAL
31347: IFFALSE 31359
// dist := 28 else
31349: LD_ADDR_VAR 0 14
31353: PUSH
31354: LD_INT 28
31356: ST_TO_ADDR
31357: GO 31367
// dist := 36 ;
31359: LD_ADDR_VAR 0 14
31363: PUSH
31364: LD_INT 36
31366: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31367: LD_VAR 0 1
31371: PPUSH
31372: LD_VAR 0 3
31376: PPUSH
31377: LD_VAR 0 4
31381: PPUSH
31382: CALL_OW 297
31386: PUSH
31387: LD_VAR 0 14
31391: GREATER
31392: IFFALSE 31396
// exit ;
31394: GO 31921
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31396: LD_ADDR_VAR 0 12
31400: PUSH
31401: LD_VAR 0 2
31405: PPUSH
31406: LD_VAR 0 3
31410: PPUSH
31411: LD_VAR 0 4
31415: PPUSH
31416: LD_VAR 0 5
31420: PPUSH
31421: LD_VAR 0 1
31425: PPUSH
31426: CALL_OW 248
31430: PPUSH
31431: LD_INT 0
31433: PPUSH
31434: CALL 31926 0 6
31438: ST_TO_ADDR
// if not hexes then
31439: LD_VAR 0 12
31443: NOT
31444: IFFALSE 31448
// exit ;
31446: GO 31921
// hex := GetHexInfo ( x , y ) ;
31448: LD_ADDR_VAR 0 15
31452: PUSH
31453: LD_VAR 0 3
31457: PPUSH
31458: LD_VAR 0 4
31462: PPUSH
31463: CALL_OW 546
31467: ST_TO_ADDR
// if hex [ 1 ] then
31468: LD_VAR 0 15
31472: PUSH
31473: LD_INT 1
31475: ARRAY
31476: IFFALSE 31480
// exit ;
31478: GO 31921
// height := hex [ 2 ] ;
31480: LD_ADDR_VAR 0 13
31484: PUSH
31485: LD_VAR 0 15
31489: PUSH
31490: LD_INT 2
31492: ARRAY
31493: ST_TO_ADDR
// for i = 1 to hexes do
31494: LD_ADDR_VAR 0 7
31498: PUSH
31499: DOUBLE
31500: LD_INT 1
31502: DEC
31503: ST_TO_ADDR
31504: LD_VAR 0 12
31508: PUSH
31509: FOR_TO
31510: IFFALSE 31840
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31512: LD_VAR 0 12
31516: PUSH
31517: LD_VAR 0 7
31521: ARRAY
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: PPUSH
31527: LD_VAR 0 12
31531: PUSH
31532: LD_VAR 0 7
31536: ARRAY
31537: PUSH
31538: LD_INT 2
31540: ARRAY
31541: PPUSH
31542: CALL_OW 488
31546: NOT
31547: PUSH
31548: LD_VAR 0 12
31552: PUSH
31553: LD_VAR 0 7
31557: ARRAY
31558: PUSH
31559: LD_INT 1
31561: ARRAY
31562: PPUSH
31563: LD_VAR 0 12
31567: PUSH
31568: LD_VAR 0 7
31572: ARRAY
31573: PUSH
31574: LD_INT 2
31576: ARRAY
31577: PPUSH
31578: CALL_OW 428
31582: PUSH
31583: LD_INT 0
31585: GREATER
31586: OR
31587: PUSH
31588: LD_VAR 0 12
31592: PUSH
31593: LD_VAR 0 7
31597: ARRAY
31598: PUSH
31599: LD_INT 1
31601: ARRAY
31602: PPUSH
31603: LD_VAR 0 12
31607: PUSH
31608: LD_VAR 0 7
31612: ARRAY
31613: PUSH
31614: LD_INT 2
31616: ARRAY
31617: PPUSH
31618: CALL_OW 351
31622: OR
31623: IFFALSE 31629
// exit ;
31625: POP
31626: POP
31627: GO 31921
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31629: LD_ADDR_VAR 0 8
31633: PUSH
31634: LD_VAR 0 12
31638: PUSH
31639: LD_VAR 0 7
31643: ARRAY
31644: PUSH
31645: LD_INT 1
31647: ARRAY
31648: PPUSH
31649: LD_VAR 0 12
31653: PUSH
31654: LD_VAR 0 7
31658: ARRAY
31659: PUSH
31660: LD_INT 2
31662: ARRAY
31663: PPUSH
31664: CALL_OW 546
31668: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31669: LD_VAR 0 8
31673: PUSH
31674: LD_INT 1
31676: ARRAY
31677: PUSH
31678: LD_VAR 0 8
31682: PUSH
31683: LD_INT 2
31685: ARRAY
31686: PUSH
31687: LD_VAR 0 13
31691: PUSH
31692: LD_INT 2
31694: PLUS
31695: GREATER
31696: OR
31697: PUSH
31698: LD_VAR 0 8
31702: PUSH
31703: LD_INT 2
31705: ARRAY
31706: PUSH
31707: LD_VAR 0 13
31711: PUSH
31712: LD_INT 2
31714: MINUS
31715: LESS
31716: OR
31717: PUSH
31718: LD_VAR 0 8
31722: PUSH
31723: LD_INT 3
31725: ARRAY
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: LD_INT 8
31732: PUSH
31733: LD_INT 9
31735: PUSH
31736: LD_INT 10
31738: PUSH
31739: LD_INT 11
31741: PUSH
31742: LD_INT 12
31744: PUSH
31745: LD_INT 13
31747: PUSH
31748: LD_INT 16
31750: PUSH
31751: LD_INT 17
31753: PUSH
31754: LD_INT 18
31756: PUSH
31757: LD_INT 19
31759: PUSH
31760: LD_INT 20
31762: PUSH
31763: LD_INT 21
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: IN
31781: NOT
31782: OR
31783: PUSH
31784: LD_VAR 0 8
31788: PUSH
31789: LD_INT 5
31791: ARRAY
31792: NOT
31793: OR
31794: PUSH
31795: LD_VAR 0 8
31799: PUSH
31800: LD_INT 6
31802: ARRAY
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 7
31812: PUSH
31813: LD_INT 9
31815: PUSH
31816: LD_INT 10
31818: PUSH
31819: LD_INT 11
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: IN
31830: NOT
31831: OR
31832: IFFALSE 31838
// exit ;
31834: POP
31835: POP
31836: GO 31921
// end ;
31838: GO 31509
31840: POP
31841: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31842: LD_VAR 0 9
31846: PPUSH
31847: LD_VAR 0 3
31851: PPUSH
31852: LD_VAR 0 4
31856: PPUSH
31857: LD_INT 20
31859: PPUSH
31860: CALL 23867 0 4
31864: PUSH
31865: LD_INT 4
31867: ARRAY
31868: IFFALSE 31872
// exit ;
31870: GO 31921
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31872: LD_VAR 0 2
31876: PUSH
31877: LD_INT 29
31879: PUSH
31880: LD_INT 30
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: IN
31887: PUSH
31888: LD_VAR 0 3
31892: PPUSH
31893: LD_VAR 0 4
31897: PPUSH
31898: LD_VAR 0 9
31902: PPUSH
31903: CALL_OW 440
31907: NOT
31908: AND
31909: IFFALSE 31913
// exit ;
31911: GO 31921
// result := true ;
31913: LD_ADDR_VAR 0 6
31917: PUSH
31918: LD_INT 1
31920: ST_TO_ADDR
// end ;
31921: LD_VAR 0 6
31925: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31926: LD_INT 0
31928: PPUSH
31929: PPUSH
31930: PPUSH
31931: PPUSH
31932: PPUSH
31933: PPUSH
31934: PPUSH
31935: PPUSH
31936: PPUSH
31937: PPUSH
31938: PPUSH
31939: PPUSH
31940: PPUSH
31941: PPUSH
31942: PPUSH
31943: PPUSH
31944: PPUSH
31945: PPUSH
31946: PPUSH
31947: PPUSH
31948: PPUSH
31949: PPUSH
31950: PPUSH
31951: PPUSH
31952: PPUSH
31953: PPUSH
31954: PPUSH
31955: PPUSH
31956: PPUSH
31957: PPUSH
31958: PPUSH
31959: PPUSH
31960: PPUSH
31961: PPUSH
31962: PPUSH
31963: PPUSH
31964: PPUSH
31965: PPUSH
31966: PPUSH
31967: PPUSH
31968: PPUSH
31969: PPUSH
31970: PPUSH
31971: PPUSH
31972: PPUSH
31973: PPUSH
31974: PPUSH
31975: PPUSH
31976: PPUSH
31977: PPUSH
31978: PPUSH
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
31983: PPUSH
31984: PPUSH
31985: PPUSH
// result = [ ] ;
31986: LD_ADDR_VAR 0 7
31990: PUSH
31991: EMPTY
31992: ST_TO_ADDR
// temp_list = [ ] ;
31993: LD_ADDR_VAR 0 9
31997: PUSH
31998: EMPTY
31999: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32000: LD_VAR 0 4
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: LD_INT 4
32019: PUSH
32020: LD_INT 5
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: IN
32031: NOT
32032: PUSH
32033: LD_VAR 0 1
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: IN
32048: PUSH
32049: LD_VAR 0 5
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: LD_INT 3
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: LIST
32067: IN
32068: NOT
32069: AND
32070: OR
32071: IFFALSE 32075
// exit ;
32073: GO 50466
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32075: LD_VAR 0 1
32079: PUSH
32080: LD_INT 6
32082: PUSH
32083: LD_INT 7
32085: PUSH
32086: LD_INT 8
32088: PUSH
32089: LD_INT 13
32091: PUSH
32092: LD_INT 12
32094: PUSH
32095: LD_INT 15
32097: PUSH
32098: LD_INT 11
32100: PUSH
32101: LD_INT 14
32103: PUSH
32104: LD_INT 10
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: IN
32118: IFFALSE 32128
// btype = b_lab ;
32120: LD_ADDR_VAR 0 1
32124: PUSH
32125: LD_INT 6
32127: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32128: LD_VAR 0 6
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: IN
32147: NOT
32148: PUSH
32149: LD_VAR 0 1
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: LD_INT 3
32165: PUSH
32166: LD_INT 6
32168: PUSH
32169: LD_INT 36
32171: PUSH
32172: LD_INT 4
32174: PUSH
32175: LD_INT 5
32177: PUSH
32178: LD_INT 31
32180: PUSH
32181: LD_INT 32
32183: PUSH
32184: LD_INT 33
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: IN
32200: NOT
32201: PUSH
32202: LD_VAR 0 6
32206: PUSH
32207: LD_INT 1
32209: EQUAL
32210: AND
32211: OR
32212: PUSH
32213: LD_VAR 0 1
32217: PUSH
32218: LD_INT 2
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: IN
32228: NOT
32229: PUSH
32230: LD_VAR 0 6
32234: PUSH
32235: LD_INT 2
32237: EQUAL
32238: AND
32239: OR
32240: IFFALSE 32250
// mode = 0 ;
32242: LD_ADDR_VAR 0 6
32246: PUSH
32247: LD_INT 0
32249: ST_TO_ADDR
// case mode of 0 :
32250: LD_VAR 0 6
32254: PUSH
32255: LD_INT 0
32257: DOUBLE
32258: EQUAL
32259: IFTRUE 32263
32261: GO 43716
32263: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32264: LD_ADDR_VAR 0 11
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: NEG
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: NEG
32334: PUSH
32335: LD_INT 1
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: LD_INT 2
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: LD_INT 2
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32457: LD_ADDR_VAR 0 12
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 1
32515: NEG
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: NEG
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 3
32614: NEG
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: LD_INT 1
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32653: LD_ADDR_VAR 0 13
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: NEG
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: NEG
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 2
32800: NEG
32801: PUSH
32802: LD_INT 3
32804: NEG
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 3
32812: NEG
32813: PUSH
32814: LD_INT 2
32816: NEG
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 3
32824: NEG
32825: PUSH
32826: LD_INT 3
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32852: LD_ADDR_VAR 0 14
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: LD_INT 3
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 3
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33048: LD_ADDR_VAR 0 15
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 2
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: NEG
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: NEG
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: NEG
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 3
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 3
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33241: LD_ADDR_VAR 0 16
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: LD_INT 1
33261: NEG
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 1
33310: NEG
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: PUSH
33355: LD_INT 2
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 2
33364: NEG
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: NEG
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 3
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 3
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 3
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33434: LD_ADDR_VAR 0 17
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: LD_INT 2
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 1
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 2
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 2
33610: NEG
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: LD_INT 2
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33664: LD_ADDR_VAR 0 18
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 1
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 2
33840: NEG
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: NEG
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: LD_INT 2
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33894: LD_ADDR_VAR 0 19
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 1
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 1
33952: NEG
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 1
33963: NEG
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 0
33987: PUSH
33988: LD_INT 2
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 2
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 2
34081: NEG
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 2
34093: NEG
34094: PUSH
34095: LD_INT 2
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34124: LD_ADDR_VAR 0 20
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 1
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: NEG
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 1
34205: NEG
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: LD_INT 2
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 2
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: NEG
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 2
34311: NEG
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 2
34323: NEG
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34354: LD_ADDR_VAR 0 21
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 2
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: LD_INT 2
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 2
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: LD_INT 2
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: LD_INT 2
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 2
34530: NEG
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 2
34541: NEG
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 2
34553: NEG
34554: PUSH
34555: LD_INT 2
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34584: LD_ADDR_VAR 0 22
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: LD_INT 1
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: LD_INT 2
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: LD_INT 2
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 1
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: LD_INT 2
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: NEG
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: NEG
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 2
34783: NEG
34784: PUSH
34785: LD_INT 2
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34814: LD_ADDR_VAR 0 23
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: LD_INT 2
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 2
34990: NEG
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: LD_INT 2
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: LD_INT 3
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: LD_INT 3
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35094: LD_ADDR_VAR 0 24
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: NEG
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: NEG
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: LD_INT 2
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35370: LD_ADDR_VAR 0 25
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: LD_INT 2
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: LD_INT 2
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 2
35569: NEG
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 3
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 3
35591: PUSH
35592: LD_INT 2
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: PUSH
35602: LD_INT 3
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: LD_INT 3
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35644: LD_ADDR_VAR 0 26
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: LD_INT 2
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 2
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: NEG
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: LD_INT 1
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: LD_INT 2
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 2
35855: PUSH
35856: LD_INT 3
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35920: LD_ADDR_VAR 0 27
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: NEG
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: NEG
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 3
36153: NEG
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 3
36165: NEG
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36200: LD_ADDR_VAR 0 28
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 2
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 2
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: NEG
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 2
36387: NEG
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: NEG
36412: PUSH
36413: LD_INT 3
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: LD_INT 3
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 3
36435: NEG
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 3
36447: NEG
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36482: LD_ADDR_VAR 0 29
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 2
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 2
36660: NEG
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: LD_INT 3
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 2
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 3
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: LD_INT 3
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: LD_INT 2
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 3
36726: NEG
36727: PUSH
36728: LD_INT 2
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36761: LD_ADDR_VAR 0 30
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: LD_INT 1
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 1
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 2
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 2
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: LD_INT 2
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: LD_INT 3
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: LD_INT 2
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: LD_INT 3
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: NEG
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 3
37004: NEG
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37039: LD_ADDR_VAR 0 31
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: LD_INT 0
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 2
37204: NEG
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 2
37216: NEG
37217: PUSH
37218: LD_INT 2
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 2
37228: NEG
37229: PUSH
37230: LD_INT 3
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 3
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 3
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37317: LD_ADDR_VAR 0 32
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: LD_INT 1
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: LD_INT 2
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: LD_INT 2
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: LD_INT 3
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: LD_INT 2
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 3
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: LD_INT 3
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 3
37560: NEG
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37595: LD_ADDR_VAR 0 33
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: LD_INT 2
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 2
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 2
37773: NEG
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: NEG
37786: PUSH
37787: LD_INT 3
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 3
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 3
37839: NEG
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37874: LD_ADDR_VAR 0 34
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 2
38030: NEG
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: LD_INT 2
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 3
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: LD_INT 2
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 3
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: LD_INT 3
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38154: LD_ADDR_VAR 0 35
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: NEG
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38266: LD_ADDR_VAR 0 36
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: NEG
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38378: LD_ADDR_VAR 0 37
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38490: LD_ADDR_VAR 0 38
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38602: LD_ADDR_VAR 0 39
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 1
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: LD_INT 2
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 2
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38714: LD_ADDR_VAR 0 40
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38826: LD_ADDR_VAR 0 41
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: LD_INT 2
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 2
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 2
39004: NEG
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: LD_INT 3
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 3
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: NEG
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 3
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 3
39123: NEG
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 3
39135: NEG
39136: PUSH
39137: LD_INT 3
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39176: LD_ADDR_VAR 0 42
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 2
39342: NEG
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: LD_INT 3
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: LD_INT 3
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 3
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 3
39422: PUSH
39423: LD_INT 3
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 3
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: LD_INT 3
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 0
39452: PUSH
39453: LD_INT 3
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 3
39473: NEG
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 3
39485: NEG
39486: PUSH
39487: LD_INT 3
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39526: LD_ADDR_VAR 0 43
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 2
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 2
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: LD_INT 3
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: LD_INT 3
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 2
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 3
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: LD_INT 3
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 3
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 2
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 3
39822: NEG
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: NEG
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39874: LD_ADDR_VAR 0 44
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: LD_INT 2
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 3
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 3
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 3
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 3
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: LD_INT 3
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 3
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 3
40148: NEG
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 3
40159: NEG
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 3
40171: NEG
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 3
40183: NEG
40184: PUSH
40185: LD_INT 3
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40224: LD_ADDR_VAR 0 45
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: LD_INT 2
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 2
40414: NEG
40415: PUSH
40416: LD_INT 3
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 3
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 3
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 3
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 3
40521: NEG
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: NEG
40534: PUSH
40535: LD_INT 3
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40574: LD_ADDR_VAR 0 46
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: LD_INT 3
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 3
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 3
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: LD_INT 3
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: LD_INT 3
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 2
40859: NEG
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 3
40870: NEG
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 3
40881: NEG
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40922: LD_ADDR_VAR 0 47
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: NEG
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41073: LD_ADDR_VAR 0 48
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41220: LD_ADDR_VAR 0 49
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41364: LD_ADDR_VAR 0 50
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41508: LD_ADDR_VAR 0 51
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 2
41631: NEG
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41655: LD_ADDR_VAR 0 52
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: LD_INT 2
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41806: LD_ADDR_VAR 0 53
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 2
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42036: LD_ADDR_VAR 0 54
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 2
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 2
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42266: LD_ADDR_VAR 0 55
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: NEG
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42496: LD_ADDR_VAR 0 56
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 2
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 2
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42726: LD_ADDR_VAR 0 57
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: NEG
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42956: LD_ADDR_VAR 0 58
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43186: LD_ADDR_VAR 0 59
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43274: LD_ADDR_VAR 0 60
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43362: LD_ADDR_VAR 0 61
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43450: LD_ADDR_VAR 0 62
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43538: LD_ADDR_VAR 0 63
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43626: LD_ADDR_VAR 0 64
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: ST_TO_ADDR
// end ; 1 :
43714: GO 49611
43716: LD_INT 1
43718: DOUBLE
43719: EQUAL
43720: IFTRUE 43724
43722: GO 46347
43724: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43725: LD_ADDR_VAR 0 11
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 3
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 3
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: LIST
43768: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43769: LD_ADDR_VAR 0 12
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 3
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 3
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43810: LD_ADDR_VAR 0 13
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 3
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: LD_INT 3
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43850: LD_ADDR_VAR 0 14
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43891: LD_ADDR_VAR 0 15
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 3
43909: NEG
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43935: LD_ADDR_VAR 0 16
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: LD_INT 3
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 3
43954: NEG
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 3
43966: NEG
43967: PUSH
43968: LD_INT 3
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: LIST
43980: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43981: LD_ADDR_VAR 0 17
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: LD_INT 3
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44025: LD_ADDR_VAR 0 18
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 3
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 3
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: LIST
44065: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44066: LD_ADDR_VAR 0 19
44070: PUSH
44071: LD_INT 3
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 3
44083: PUSH
44084: LD_INT 3
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44106: LD_ADDR_VAR 0 20
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: LD_INT 3
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 3
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: LIST
44146: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44147: LD_ADDR_VAR 0 21
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 3
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 3
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44191: LD_ADDR_VAR 0 22
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: LD_INT 3
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 3
44210: NEG
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 3
44222: NEG
44223: PUSH
44224: LD_INT 3
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44237: LD_ADDR_VAR 0 23
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 3
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 4
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 3
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44281: LD_ADDR_VAR 0 24
44285: PUSH
44286: LD_INT 3
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 4
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44322: LD_ADDR_VAR 0 25
44326: PUSH
44327: LD_INT 3
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 4
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 3
44349: PUSH
44350: LD_INT 4
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: LIST
44361: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44362: LD_ADDR_VAR 0 26
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 3
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 4
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 3
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44403: LD_ADDR_VAR 0 27
44407: PUSH
44408: LD_INT 3
44410: NEG
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 3
44421: NEG
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 4
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44447: LD_ADDR_VAR 0 28
44451: PUSH
44452: LD_INT 3
44454: NEG
44455: PUSH
44456: LD_INT 3
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 3
44466: NEG
44467: PUSH
44468: LD_INT 4
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 4
44478: NEG
44479: PUSH
44480: LD_INT 3
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44493: LD_ADDR_VAR 0 29
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 3
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 3
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 4
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 4
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: LD_INT 3
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 5
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 5
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 4
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 6
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 6
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 5
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44648: LD_ADDR_VAR 0 30
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 3
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 4
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 4
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 4
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 5
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 5
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 5
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 6
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 6
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44791: LD_ADDR_VAR 0 31
44795: PUSH
44796: LD_INT 3
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 3
44808: PUSH
44809: LD_INT 3
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 4
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 4
44838: PUSH
44839: LD_INT 4
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 3
44848: PUSH
44849: LD_INT 4
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 5
44858: PUSH
44859: LD_INT 4
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 5
44868: PUSH
44869: LD_INT 5
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 4
44878: PUSH
44879: LD_INT 5
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 6
44888: PUSH
44889: LD_INT 5
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 6
44898: PUSH
44899: LD_INT 6
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 5
44908: PUSH
44909: LD_INT 6
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44930: LD_ADDR_VAR 0 32
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: LD_INT 3
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 3
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 4
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 4
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 5
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 5
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 4
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 6
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 6
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 5
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45073: LD_ADDR_VAR 0 33
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 3
45091: NEG
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 3
45114: NEG
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 4
45125: NEG
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 4
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 4
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 5
45159: NEG
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 5
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 5
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 6
45193: NEG
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 6
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45228: LD_ADDR_VAR 0 34
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 3
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 3
45247: NEG
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 3
45259: NEG
45260: PUSH
45261: LD_INT 3
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 3
45271: NEG
45272: PUSH
45273: LD_INT 4
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 4
45283: NEG
45284: PUSH
45285: LD_INT 3
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 4
45295: NEG
45296: PUSH
45297: LD_INT 4
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 4
45307: NEG
45308: PUSH
45309: LD_INT 5
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 5
45319: NEG
45320: PUSH
45321: LD_INT 4
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 5
45331: NEG
45332: PUSH
45333: LD_INT 5
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 5
45343: NEG
45344: PUSH
45345: LD_INT 6
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 6
45355: NEG
45356: PUSH
45357: LD_INT 5
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 6
45367: NEG
45368: PUSH
45369: LD_INT 6
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45391: LD_ADDR_VAR 0 41
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45435: LD_ADDR_VAR 0 42
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45476: LD_ADDR_VAR 0 43
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 3
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45516: LD_ADDR_VAR 0 44
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45557: LD_ADDR_VAR 0 45
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45601: LD_ADDR_VAR 0 46
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: LD_INT 3
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 3
45632: NEG
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45647: LD_ADDR_VAR 0 47
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: LD_INT 3
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 3
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45680: LD_ADDR_VAR 0 48
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45711: LD_ADDR_VAR 0 49
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45740: LD_ADDR_VAR 0 50
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45769: LD_ADDR_VAR 0 51
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45800: LD_ADDR_VAR 0 52
45804: PUSH
45805: LD_INT 3
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 3
45819: NEG
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45833: LD_ADDR_VAR 0 53
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 3
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: LIST
45876: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45877: LD_ADDR_VAR 0 54
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45918: LD_ADDR_VAR 0 55
45922: PUSH
45923: LD_INT 3
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 3
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45958: LD_ADDR_VAR 0 56
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45999: LD_ADDR_VAR 0 57
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 3
46017: NEG
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 3
46028: NEG
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46043: LD_ADDR_VAR 0 58
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 3
46062: NEG
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: LD_INT 3
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46089: LD_ADDR_VAR 0 59
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46133: LD_ADDR_VAR 0 60
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46174: LD_ADDR_VAR 0 61
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46214: LD_ADDR_VAR 0 62
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46255: LD_ADDR_VAR 0 63
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46299: LD_ADDR_VAR 0 64
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: LIST
46344: ST_TO_ADDR
// end ; 2 :
46345: GO 49611
46347: LD_INT 2
46349: DOUBLE
46350: EQUAL
46351: IFTRUE 46355
46353: GO 49610
46355: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46356: LD_ADDR_VAR 0 29
46360: PUSH
46361: LD_INT 4
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 4
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 5
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 5
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 4
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 3
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 3
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 5
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 3
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 4
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 4
46486: PUSH
46487: LD_INT 4
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: LD_INT 4
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 4
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: LD_INT 4
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 4
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 4
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 5
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 5
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 4
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 3
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: LD_INT 5
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 4
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 4
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 4
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 4
46741: NEG
46742: PUSH
46743: LD_INT 4
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 4
46753: NEG
46754: PUSH
46755: LD_INT 5
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 3
46765: NEG
46766: PUSH
46767: LD_INT 4
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 3
46777: NEG
46778: PUSH
46779: LD_INT 3
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 4
46789: NEG
46790: PUSH
46791: LD_INT 3
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 5
46801: NEG
46802: PUSH
46803: LD_INT 4
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 5
46813: NEG
46814: PUSH
46815: LD_INT 5
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: LD_INT 5
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 5
46837: NEG
46838: PUSH
46839: LD_INT 3
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46894: LD_ADDR_VAR 0 30
46898: PUSH
46899: LD_INT 4
46901: PUSH
46902: LD_INT 4
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 4
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 5
46921: PUSH
46922: LD_INT 4
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 5
46931: PUSH
46932: LD_INT 5
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 4
46941: PUSH
46942: LD_INT 5
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: LD_INT 4
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: LD_INT 3
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 5
46971: PUSH
46972: LD_INT 3
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: LD_INT 5
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 3
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 4
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 4
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: LD_INT 4
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 4
47084: NEG
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 4
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 3
47107: NEG
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: NEG
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 4
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 5
47140: NEG
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 5
47151: NEG
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 5
47163: NEG
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 3
47175: NEG
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 3
47186: NEG
47187: PUSH
47188: LD_INT 3
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: NEG
47199: PUSH
47200: LD_INT 4
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 3
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 2
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 4
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 4
47258: NEG
47259: PUSH
47260: LD_INT 4
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 4
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 4
47282: NEG
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 4
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 5
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 4
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 3
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 4
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 5
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: LD_INT 5
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47441: LD_ADDR_VAR 0 31
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 4
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 3
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 4
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 5
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 5
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 4
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 3
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 5
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 3
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 3
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 4
47597: NEG
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 4
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 4
47620: NEG
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 4
47643: NEG
47644: PUSH
47645: LD_INT 4
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 4
47655: NEG
47656: PUSH
47657: LD_INT 5
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 3
47667: NEG
47668: PUSH
47669: LD_INT 4
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 4
47691: NEG
47692: PUSH
47693: LD_INT 3
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 5
47703: NEG
47704: PUSH
47705: LD_INT 4
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 5
47715: NEG
47716: PUSH
47717: LD_INT 5
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: NEG
47728: PUSH
47729: LD_INT 5
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 5
47739: NEG
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 4
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 3
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: LD_INT 3
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 4
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: LD_INT 4
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 4
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 4
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 5
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 5
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 4
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 3
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 3
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 3
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 5
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47991: LD_ADDR_VAR 0 32
47995: PUSH
47996: LD_INT 4
47998: NEG
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 4
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 3
48021: NEG
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: NEG
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 4
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 5
48054: NEG
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 5
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 5
48077: NEG
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: LD_INT 3
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 3
48112: NEG
48113: PUSH
48114: LD_INT 4
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 3
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 3
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 4
48160: NEG
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 4
48172: NEG
48173: PUSH
48174: LD_INT 4
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: LD_INT 4
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 4
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 4
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 5
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 4
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 4
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 5
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: LD_INT 5
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 4
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 4
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 3
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 4
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 4
48403: PUSH
48404: LD_INT 4
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 4
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 5
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 5
48433: PUSH
48434: LD_INT 5
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 4
48443: PUSH
48444: LD_INT 5
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 4
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 3
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 5
48473: PUSH
48474: LD_INT 3
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 3
48483: PUSH
48484: LD_INT 5
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48538: LD_ADDR_VAR 0 33
48542: PUSH
48543: LD_INT 4
48545: NEG
48546: PUSH
48547: LD_INT 4
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 4
48557: NEG
48558: PUSH
48559: LD_INT 5
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: NEG
48570: PUSH
48571: LD_INT 4
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: LD_INT 3
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 4
48593: NEG
48594: PUSH
48595: LD_INT 3
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 5
48605: NEG
48606: PUSH
48607: LD_INT 4
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 5
48617: NEG
48618: PUSH
48619: LD_INT 5
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 3
48629: NEG
48630: PUSH
48631: LD_INT 5
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 5
48641: NEG
48642: PUSH
48643: LD_INT 3
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 4
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 3
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 4
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 4
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 4
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 4
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 5
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 5
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 4
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 5
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 4
48868: PUSH
48869: LD_INT 3
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 4
48878: PUSH
48879: LD_INT 4
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: LD_INT 4
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 4
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 4
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 4
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 4
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 5
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 5
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 4
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 5
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49076: LD_ADDR_VAR 0 34
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 4
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 5
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 4
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 3
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 3
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: LD_INT 4
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 5
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: LD_INT 5
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 4
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 4
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 3
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 4
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 4
49278: PUSH
49279: LD_INT 4
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 4
49288: PUSH
49289: LD_INT 3
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 5
49298: PUSH
49299: LD_INT 4
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 5
49308: PUSH
49309: LD_INT 5
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 4
49318: PUSH
49319: LD_INT 5
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: LD_INT 4
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 5
49348: PUSH
49349: LD_INT 3
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: LD_INT 5
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 3
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 4
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 4
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 4
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 4
49461: NEG
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 4
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 4
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 5
49517: NEG
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 5
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 5
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: ST_TO_ADDR
// end ; end ;
49608: GO 49611
49610: POP
// case btype of b_depot , b_warehouse :
49611: LD_VAR 0 1
49615: PUSH
49616: LD_INT 0
49618: DOUBLE
49619: EQUAL
49620: IFTRUE 49630
49622: LD_INT 1
49624: DOUBLE
49625: EQUAL
49626: IFTRUE 49630
49628: GO 49831
49630: POP
// case nation of nation_american :
49631: LD_VAR 0 5
49635: PUSH
49636: LD_INT 1
49638: DOUBLE
49639: EQUAL
49640: IFTRUE 49644
49642: GO 49700
49644: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49645: LD_ADDR_VAR 0 9
49649: PUSH
49650: LD_VAR 0 11
49654: PUSH
49655: LD_VAR 0 12
49659: PUSH
49660: LD_VAR 0 13
49664: PUSH
49665: LD_VAR 0 14
49669: PUSH
49670: LD_VAR 0 15
49674: PUSH
49675: LD_VAR 0 16
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: PUSH
49688: LD_VAR 0 4
49692: PUSH
49693: LD_INT 1
49695: PLUS
49696: ARRAY
49697: ST_TO_ADDR
49698: GO 49829
49700: LD_INT 2
49702: DOUBLE
49703: EQUAL
49704: IFTRUE 49708
49706: GO 49764
49708: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49709: LD_ADDR_VAR 0 9
49713: PUSH
49714: LD_VAR 0 17
49718: PUSH
49719: LD_VAR 0 18
49723: PUSH
49724: LD_VAR 0 19
49728: PUSH
49729: LD_VAR 0 20
49733: PUSH
49734: LD_VAR 0 21
49738: PUSH
49739: LD_VAR 0 22
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: PUSH
49752: LD_VAR 0 4
49756: PUSH
49757: LD_INT 1
49759: PLUS
49760: ARRAY
49761: ST_TO_ADDR
49762: GO 49829
49764: LD_INT 3
49766: DOUBLE
49767: EQUAL
49768: IFTRUE 49772
49770: GO 49828
49772: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49773: LD_ADDR_VAR 0 9
49777: PUSH
49778: LD_VAR 0 23
49782: PUSH
49783: LD_VAR 0 24
49787: PUSH
49788: LD_VAR 0 25
49792: PUSH
49793: LD_VAR 0 26
49797: PUSH
49798: LD_VAR 0 27
49802: PUSH
49803: LD_VAR 0 28
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: PUSH
49816: LD_VAR 0 4
49820: PUSH
49821: LD_INT 1
49823: PLUS
49824: ARRAY
49825: ST_TO_ADDR
49826: GO 49829
49828: POP
49829: GO 50384
49831: LD_INT 2
49833: DOUBLE
49834: EQUAL
49835: IFTRUE 49845
49837: LD_INT 3
49839: DOUBLE
49840: EQUAL
49841: IFTRUE 49845
49843: GO 49901
49845: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49846: LD_ADDR_VAR 0 9
49850: PUSH
49851: LD_VAR 0 29
49855: PUSH
49856: LD_VAR 0 30
49860: PUSH
49861: LD_VAR 0 31
49865: PUSH
49866: LD_VAR 0 32
49870: PUSH
49871: LD_VAR 0 33
49875: PUSH
49876: LD_VAR 0 34
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: PUSH
49889: LD_VAR 0 4
49893: PUSH
49894: LD_INT 1
49896: PLUS
49897: ARRAY
49898: ST_TO_ADDR
49899: GO 50384
49901: LD_INT 16
49903: DOUBLE
49904: EQUAL
49905: IFTRUE 49963
49907: LD_INT 17
49909: DOUBLE
49910: EQUAL
49911: IFTRUE 49963
49913: LD_INT 18
49915: DOUBLE
49916: EQUAL
49917: IFTRUE 49963
49919: LD_INT 19
49921: DOUBLE
49922: EQUAL
49923: IFTRUE 49963
49925: LD_INT 22
49927: DOUBLE
49928: EQUAL
49929: IFTRUE 49963
49931: LD_INT 20
49933: DOUBLE
49934: EQUAL
49935: IFTRUE 49963
49937: LD_INT 21
49939: DOUBLE
49940: EQUAL
49941: IFTRUE 49963
49943: LD_INT 23
49945: DOUBLE
49946: EQUAL
49947: IFTRUE 49963
49949: LD_INT 24
49951: DOUBLE
49952: EQUAL
49953: IFTRUE 49963
49955: LD_INT 25
49957: DOUBLE
49958: EQUAL
49959: IFTRUE 49963
49961: GO 50019
49963: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49964: LD_ADDR_VAR 0 9
49968: PUSH
49969: LD_VAR 0 35
49973: PUSH
49974: LD_VAR 0 36
49978: PUSH
49979: LD_VAR 0 37
49983: PUSH
49984: LD_VAR 0 38
49988: PUSH
49989: LD_VAR 0 39
49993: PUSH
49994: LD_VAR 0 40
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: PUSH
50007: LD_VAR 0 4
50011: PUSH
50012: LD_INT 1
50014: PLUS
50015: ARRAY
50016: ST_TO_ADDR
50017: GO 50384
50019: LD_INT 6
50021: DOUBLE
50022: EQUAL
50023: IFTRUE 50075
50025: LD_INT 7
50027: DOUBLE
50028: EQUAL
50029: IFTRUE 50075
50031: LD_INT 8
50033: DOUBLE
50034: EQUAL
50035: IFTRUE 50075
50037: LD_INT 13
50039: DOUBLE
50040: EQUAL
50041: IFTRUE 50075
50043: LD_INT 12
50045: DOUBLE
50046: EQUAL
50047: IFTRUE 50075
50049: LD_INT 15
50051: DOUBLE
50052: EQUAL
50053: IFTRUE 50075
50055: LD_INT 11
50057: DOUBLE
50058: EQUAL
50059: IFTRUE 50075
50061: LD_INT 14
50063: DOUBLE
50064: EQUAL
50065: IFTRUE 50075
50067: LD_INT 10
50069: DOUBLE
50070: EQUAL
50071: IFTRUE 50075
50073: GO 50131
50075: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50076: LD_ADDR_VAR 0 9
50080: PUSH
50081: LD_VAR 0 41
50085: PUSH
50086: LD_VAR 0 42
50090: PUSH
50091: LD_VAR 0 43
50095: PUSH
50096: LD_VAR 0 44
50100: PUSH
50101: LD_VAR 0 45
50105: PUSH
50106: LD_VAR 0 46
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: PUSH
50119: LD_VAR 0 4
50123: PUSH
50124: LD_INT 1
50126: PLUS
50127: ARRAY
50128: ST_TO_ADDR
50129: GO 50384
50131: LD_INT 36
50133: DOUBLE
50134: EQUAL
50135: IFTRUE 50139
50137: GO 50195
50139: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50140: LD_ADDR_VAR 0 9
50144: PUSH
50145: LD_VAR 0 47
50149: PUSH
50150: LD_VAR 0 48
50154: PUSH
50155: LD_VAR 0 49
50159: PUSH
50160: LD_VAR 0 50
50164: PUSH
50165: LD_VAR 0 51
50169: PUSH
50170: LD_VAR 0 52
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: PUSH
50183: LD_VAR 0 4
50187: PUSH
50188: LD_INT 1
50190: PLUS
50191: ARRAY
50192: ST_TO_ADDR
50193: GO 50384
50195: LD_INT 4
50197: DOUBLE
50198: EQUAL
50199: IFTRUE 50221
50201: LD_INT 5
50203: DOUBLE
50204: EQUAL
50205: IFTRUE 50221
50207: LD_INT 34
50209: DOUBLE
50210: EQUAL
50211: IFTRUE 50221
50213: LD_INT 37
50215: DOUBLE
50216: EQUAL
50217: IFTRUE 50221
50219: GO 50277
50221: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50222: LD_ADDR_VAR 0 9
50226: PUSH
50227: LD_VAR 0 53
50231: PUSH
50232: LD_VAR 0 54
50236: PUSH
50237: LD_VAR 0 55
50241: PUSH
50242: LD_VAR 0 56
50246: PUSH
50247: LD_VAR 0 57
50251: PUSH
50252: LD_VAR 0 58
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: PUSH
50265: LD_VAR 0 4
50269: PUSH
50270: LD_INT 1
50272: PLUS
50273: ARRAY
50274: ST_TO_ADDR
50275: GO 50384
50277: LD_INT 31
50279: DOUBLE
50280: EQUAL
50281: IFTRUE 50327
50283: LD_INT 32
50285: DOUBLE
50286: EQUAL
50287: IFTRUE 50327
50289: LD_INT 33
50291: DOUBLE
50292: EQUAL
50293: IFTRUE 50327
50295: LD_INT 27
50297: DOUBLE
50298: EQUAL
50299: IFTRUE 50327
50301: LD_INT 26
50303: DOUBLE
50304: EQUAL
50305: IFTRUE 50327
50307: LD_INT 28
50309: DOUBLE
50310: EQUAL
50311: IFTRUE 50327
50313: LD_INT 29
50315: DOUBLE
50316: EQUAL
50317: IFTRUE 50327
50319: LD_INT 30
50321: DOUBLE
50322: EQUAL
50323: IFTRUE 50327
50325: GO 50383
50327: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50328: LD_ADDR_VAR 0 9
50332: PUSH
50333: LD_VAR 0 59
50337: PUSH
50338: LD_VAR 0 60
50342: PUSH
50343: LD_VAR 0 61
50347: PUSH
50348: LD_VAR 0 62
50352: PUSH
50353: LD_VAR 0 63
50357: PUSH
50358: LD_VAR 0 64
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: PUSH
50371: LD_VAR 0 4
50375: PUSH
50376: LD_INT 1
50378: PLUS
50379: ARRAY
50380: ST_TO_ADDR
50381: GO 50384
50383: POP
// temp_list2 = [ ] ;
50384: LD_ADDR_VAR 0 10
50388: PUSH
50389: EMPTY
50390: ST_TO_ADDR
// for i in temp_list do
50391: LD_ADDR_VAR 0 8
50395: PUSH
50396: LD_VAR 0 9
50400: PUSH
50401: FOR_IN
50402: IFFALSE 50454
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50404: LD_ADDR_VAR 0 10
50408: PUSH
50409: LD_VAR 0 10
50413: PUSH
50414: LD_VAR 0 8
50418: PUSH
50419: LD_INT 1
50421: ARRAY
50422: PUSH
50423: LD_VAR 0 2
50427: PLUS
50428: PUSH
50429: LD_VAR 0 8
50433: PUSH
50434: LD_INT 2
50436: ARRAY
50437: PUSH
50438: LD_VAR 0 3
50442: PLUS
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: EMPTY
50449: LIST
50450: ADD
50451: ST_TO_ADDR
50452: GO 50401
50454: POP
50455: POP
// result = temp_list2 ;
50456: LD_ADDR_VAR 0 7
50460: PUSH
50461: LD_VAR 0 10
50465: ST_TO_ADDR
// end ;
50466: LD_VAR 0 7
50470: RET
// export function EnemyInRange ( unit , dist ) ; begin
50471: LD_INT 0
50473: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50474: LD_ADDR_VAR 0 3
50478: PUSH
50479: LD_VAR 0 1
50483: PPUSH
50484: CALL_OW 255
50488: PPUSH
50489: LD_VAR 0 1
50493: PPUSH
50494: CALL_OW 250
50498: PPUSH
50499: LD_VAR 0 1
50503: PPUSH
50504: CALL_OW 251
50508: PPUSH
50509: LD_VAR 0 2
50513: PPUSH
50514: CALL 23867 0 4
50518: PUSH
50519: LD_INT 4
50521: ARRAY
50522: ST_TO_ADDR
// end ;
50523: LD_VAR 0 3
50527: RET
// export function PlayerSeeMe ( unit ) ; begin
50528: LD_INT 0
50530: PPUSH
// result := See ( your_side , unit ) ;
50531: LD_ADDR_VAR 0 2
50535: PUSH
50536: LD_OWVAR 2
50540: PPUSH
50541: LD_VAR 0 1
50545: PPUSH
50546: CALL_OW 292
50550: ST_TO_ADDR
// end ;
50551: LD_VAR 0 2
50555: RET
// export function ReverseDir ( unit ) ; begin
50556: LD_INT 0
50558: PPUSH
// if not unit then
50559: LD_VAR 0 1
50563: NOT
50564: IFFALSE 50568
// exit ;
50566: GO 50591
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50568: LD_ADDR_VAR 0 2
50572: PUSH
50573: LD_VAR 0 1
50577: PPUSH
50578: CALL_OW 254
50582: PUSH
50583: LD_INT 3
50585: PLUS
50586: PUSH
50587: LD_INT 6
50589: MOD
50590: ST_TO_ADDR
// end ;
50591: LD_VAR 0 2
50595: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
50596: LD_INT 0
50598: PPUSH
50599: PPUSH
50600: PPUSH
50601: PPUSH
50602: PPUSH
// if not hexes then
50603: LD_VAR 0 2
50607: NOT
50608: IFFALSE 50612
// exit ;
50610: GO 50760
// dist := 9999 ;
50612: LD_ADDR_VAR 0 5
50616: PUSH
50617: LD_INT 9999
50619: ST_TO_ADDR
// for i = 1 to hexes do
50620: LD_ADDR_VAR 0 4
50624: PUSH
50625: DOUBLE
50626: LD_INT 1
50628: DEC
50629: ST_TO_ADDR
50630: LD_VAR 0 2
50634: PUSH
50635: FOR_TO
50636: IFFALSE 50748
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
50638: LD_VAR 0 1
50642: PPUSH
50643: LD_VAR 0 2
50647: PUSH
50648: LD_VAR 0 4
50652: ARRAY
50653: PUSH
50654: LD_INT 1
50656: ARRAY
50657: PPUSH
50658: LD_VAR 0 2
50662: PUSH
50663: LD_VAR 0 4
50667: ARRAY
50668: PUSH
50669: LD_INT 2
50671: ARRAY
50672: PPUSH
50673: CALL_OW 297
50677: PUSH
50678: LD_VAR 0 5
50682: LESS
50683: IFFALSE 50746
// begin hex := hexes [ i ] ;
50685: LD_ADDR_VAR 0 7
50689: PUSH
50690: LD_VAR 0 2
50694: PUSH
50695: LD_VAR 0 4
50699: ARRAY
50700: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50701: LD_ADDR_VAR 0 5
50705: PUSH
50706: LD_VAR 0 1
50710: PPUSH
50711: LD_VAR 0 2
50715: PUSH
50716: LD_VAR 0 4
50720: ARRAY
50721: PUSH
50722: LD_INT 1
50724: ARRAY
50725: PPUSH
50726: LD_VAR 0 2
50730: PUSH
50731: LD_VAR 0 4
50735: ARRAY
50736: PUSH
50737: LD_INT 2
50739: ARRAY
50740: PPUSH
50741: CALL_OW 297
50745: ST_TO_ADDR
// end ; end ;
50746: GO 50635
50748: POP
50749: POP
// result := hex ;
50750: LD_ADDR_VAR 0 3
50754: PUSH
50755: LD_VAR 0 7
50759: ST_TO_ADDR
// end ;
50760: LD_VAR 0 3
50764: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50765: LD_INT 0
50767: PPUSH
50768: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50769: LD_VAR 0 1
50773: NOT
50774: PUSH
50775: LD_VAR 0 1
50779: PUSH
50780: LD_INT 21
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 23
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PPUSH
50804: CALL_OW 69
50808: IN
50809: NOT
50810: OR
50811: IFFALSE 50815
// exit ;
50813: GO 50862
// for i = 1 to 3 do
50815: LD_ADDR_VAR 0 3
50819: PUSH
50820: DOUBLE
50821: LD_INT 1
50823: DEC
50824: ST_TO_ADDR
50825: LD_INT 3
50827: PUSH
50828: FOR_TO
50829: IFFALSE 50860
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50831: LD_VAR 0 1
50835: PPUSH
50836: CALL_OW 250
50840: PPUSH
50841: LD_VAR 0 1
50845: PPUSH
50846: CALL_OW 251
50850: PPUSH
50851: LD_INT 1
50853: PPUSH
50854: CALL_OW 453
50858: GO 50828
50860: POP
50861: POP
// end ;
50862: LD_VAR 0 2
50866: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50867: LD_INT 0
50869: PPUSH
50870: PPUSH
50871: PPUSH
50872: PPUSH
50873: PPUSH
50874: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50875: LD_VAR 0 1
50879: NOT
50880: PUSH
50881: LD_VAR 0 2
50885: NOT
50886: OR
50887: PUSH
50888: LD_VAR 0 1
50892: PPUSH
50893: CALL_OW 314
50897: OR
50898: IFFALSE 50902
// exit ;
50900: GO 51343
// x := GetX ( enemy_unit ) ;
50902: LD_ADDR_VAR 0 7
50906: PUSH
50907: LD_VAR 0 2
50911: PPUSH
50912: CALL_OW 250
50916: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50917: LD_ADDR_VAR 0 8
50921: PUSH
50922: LD_VAR 0 2
50926: PPUSH
50927: CALL_OW 251
50931: ST_TO_ADDR
// if not x or not y then
50932: LD_VAR 0 7
50936: NOT
50937: PUSH
50938: LD_VAR 0 8
50942: NOT
50943: OR
50944: IFFALSE 50948
// exit ;
50946: GO 51343
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50948: LD_ADDR_VAR 0 6
50952: PUSH
50953: LD_VAR 0 7
50957: PPUSH
50958: LD_INT 0
50960: PPUSH
50961: LD_INT 4
50963: PPUSH
50964: CALL_OW 272
50968: PUSH
50969: LD_VAR 0 8
50973: PPUSH
50974: LD_INT 0
50976: PPUSH
50977: LD_INT 4
50979: PPUSH
50980: CALL_OW 273
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_VAR 0 7
50993: PPUSH
50994: LD_INT 1
50996: PPUSH
50997: LD_INT 4
50999: PPUSH
51000: CALL_OW 272
51004: PUSH
51005: LD_VAR 0 8
51009: PPUSH
51010: LD_INT 1
51012: PPUSH
51013: LD_INT 4
51015: PPUSH
51016: CALL_OW 273
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_VAR 0 7
51029: PPUSH
51030: LD_INT 2
51032: PPUSH
51033: LD_INT 4
51035: PPUSH
51036: CALL_OW 272
51040: PUSH
51041: LD_VAR 0 8
51045: PPUSH
51046: LD_INT 2
51048: PPUSH
51049: LD_INT 4
51051: PPUSH
51052: CALL_OW 273
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_VAR 0 7
51065: PPUSH
51066: LD_INT 3
51068: PPUSH
51069: LD_INT 4
51071: PPUSH
51072: CALL_OW 272
51076: PUSH
51077: LD_VAR 0 8
51081: PPUSH
51082: LD_INT 3
51084: PPUSH
51085: LD_INT 4
51087: PPUSH
51088: CALL_OW 273
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_VAR 0 7
51101: PPUSH
51102: LD_INT 4
51104: PPUSH
51105: LD_INT 4
51107: PPUSH
51108: CALL_OW 272
51112: PUSH
51113: LD_VAR 0 8
51117: PPUSH
51118: LD_INT 4
51120: PPUSH
51121: LD_INT 4
51123: PPUSH
51124: CALL_OW 273
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_VAR 0 7
51137: PPUSH
51138: LD_INT 5
51140: PPUSH
51141: LD_INT 4
51143: PPUSH
51144: CALL_OW 272
51148: PUSH
51149: LD_VAR 0 8
51153: PPUSH
51154: LD_INT 5
51156: PPUSH
51157: LD_INT 4
51159: PPUSH
51160: CALL_OW 273
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: ST_TO_ADDR
// for i = tmp downto 1 do
51177: LD_ADDR_VAR 0 4
51181: PUSH
51182: DOUBLE
51183: LD_VAR 0 6
51187: INC
51188: ST_TO_ADDR
51189: LD_INT 1
51191: PUSH
51192: FOR_DOWNTO
51193: IFFALSE 51294
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51195: LD_VAR 0 6
51199: PUSH
51200: LD_VAR 0 4
51204: ARRAY
51205: PUSH
51206: LD_INT 1
51208: ARRAY
51209: PPUSH
51210: LD_VAR 0 6
51214: PUSH
51215: LD_VAR 0 4
51219: ARRAY
51220: PUSH
51221: LD_INT 2
51223: ARRAY
51224: PPUSH
51225: CALL_OW 488
51229: NOT
51230: PUSH
51231: LD_VAR 0 6
51235: PUSH
51236: LD_VAR 0 4
51240: ARRAY
51241: PUSH
51242: LD_INT 1
51244: ARRAY
51245: PPUSH
51246: LD_VAR 0 6
51250: PUSH
51251: LD_VAR 0 4
51255: ARRAY
51256: PUSH
51257: LD_INT 2
51259: ARRAY
51260: PPUSH
51261: CALL_OW 428
51265: PUSH
51266: LD_INT 0
51268: NONEQUAL
51269: OR
51270: IFFALSE 51292
// tmp := Delete ( tmp , i ) ;
51272: LD_ADDR_VAR 0 6
51276: PUSH
51277: LD_VAR 0 6
51281: PPUSH
51282: LD_VAR 0 4
51286: PPUSH
51287: CALL_OW 3
51291: ST_TO_ADDR
51292: GO 51192
51294: POP
51295: POP
// j := GetClosestHex ( unit , tmp ) ;
51296: LD_ADDR_VAR 0 5
51300: PUSH
51301: LD_VAR 0 1
51305: PPUSH
51306: LD_VAR 0 6
51310: PPUSH
51311: CALL 50596 0 2
51315: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51316: LD_VAR 0 1
51320: PPUSH
51321: LD_VAR 0 5
51325: PUSH
51326: LD_INT 1
51328: ARRAY
51329: PPUSH
51330: LD_VAR 0 5
51334: PUSH
51335: LD_INT 2
51337: ARRAY
51338: PPUSH
51339: CALL_OW 111
// end ;
51343: LD_VAR 0 3
51347: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51348: LD_INT 0
51350: PPUSH
51351: PPUSH
51352: PPUSH
// uc_side = 0 ;
51353: LD_ADDR_OWVAR 20
51357: PUSH
51358: LD_INT 0
51360: ST_TO_ADDR
// uc_nation = 0 ;
51361: LD_ADDR_OWVAR 21
51365: PUSH
51366: LD_INT 0
51368: ST_TO_ADDR
// InitHc_All ( ) ;
51369: CALL_OW 584
// InitVc ;
51373: CALL_OW 20
// if mastodonts then
51377: LD_VAR 0 6
51381: IFFALSE 51448
// for i = 1 to mastodonts do
51383: LD_ADDR_VAR 0 11
51387: PUSH
51388: DOUBLE
51389: LD_INT 1
51391: DEC
51392: ST_TO_ADDR
51393: LD_VAR 0 6
51397: PUSH
51398: FOR_TO
51399: IFFALSE 51446
// begin vc_chassis := 31 ;
51401: LD_ADDR_OWVAR 37
51405: PUSH
51406: LD_INT 31
51408: ST_TO_ADDR
// vc_control := control_rider ;
51409: LD_ADDR_OWVAR 38
51413: PUSH
51414: LD_INT 4
51416: ST_TO_ADDR
// animal := CreateVehicle ;
51417: LD_ADDR_VAR 0 12
51421: PUSH
51422: CALL_OW 45
51426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51427: LD_VAR 0 12
51431: PPUSH
51432: LD_VAR 0 8
51436: PPUSH
51437: LD_INT 0
51439: PPUSH
51440: CALL 53636 0 3
// end ;
51444: GO 51398
51446: POP
51447: POP
// if horses then
51448: LD_VAR 0 5
51452: IFFALSE 51519
// for i = 1 to horses do
51454: LD_ADDR_VAR 0 11
51458: PUSH
51459: DOUBLE
51460: LD_INT 1
51462: DEC
51463: ST_TO_ADDR
51464: LD_VAR 0 5
51468: PUSH
51469: FOR_TO
51470: IFFALSE 51517
// begin hc_class := 21 ;
51472: LD_ADDR_OWVAR 28
51476: PUSH
51477: LD_INT 21
51479: ST_TO_ADDR
// hc_gallery :=  ;
51480: LD_ADDR_OWVAR 33
51484: PUSH
51485: LD_STRING 
51487: ST_TO_ADDR
// animal := CreateHuman ;
51488: LD_ADDR_VAR 0 12
51492: PUSH
51493: CALL_OW 44
51497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51498: LD_VAR 0 12
51502: PPUSH
51503: LD_VAR 0 8
51507: PPUSH
51508: LD_INT 0
51510: PPUSH
51511: CALL 53636 0 3
// end ;
51515: GO 51469
51517: POP
51518: POP
// if birds then
51519: LD_VAR 0 1
51523: IFFALSE 51590
// for i = 1 to birds do
51525: LD_ADDR_VAR 0 11
51529: PUSH
51530: DOUBLE
51531: LD_INT 1
51533: DEC
51534: ST_TO_ADDR
51535: LD_VAR 0 1
51539: PUSH
51540: FOR_TO
51541: IFFALSE 51588
// begin hc_class = 18 ;
51543: LD_ADDR_OWVAR 28
51547: PUSH
51548: LD_INT 18
51550: ST_TO_ADDR
// hc_gallery =  ;
51551: LD_ADDR_OWVAR 33
51555: PUSH
51556: LD_STRING 
51558: ST_TO_ADDR
// animal := CreateHuman ;
51559: LD_ADDR_VAR 0 12
51563: PUSH
51564: CALL_OW 44
51568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51569: LD_VAR 0 12
51573: PPUSH
51574: LD_VAR 0 8
51578: PPUSH
51579: LD_INT 0
51581: PPUSH
51582: CALL 53636 0 3
// end ;
51586: GO 51540
51588: POP
51589: POP
// if tigers then
51590: LD_VAR 0 2
51594: IFFALSE 51678
// for i = 1 to tigers do
51596: LD_ADDR_VAR 0 11
51600: PUSH
51601: DOUBLE
51602: LD_INT 1
51604: DEC
51605: ST_TO_ADDR
51606: LD_VAR 0 2
51610: PUSH
51611: FOR_TO
51612: IFFALSE 51676
// begin hc_class = class_tiger ;
51614: LD_ADDR_OWVAR 28
51618: PUSH
51619: LD_INT 14
51621: ST_TO_ADDR
// hc_gallery =  ;
51622: LD_ADDR_OWVAR 33
51626: PUSH
51627: LD_STRING 
51629: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51630: LD_ADDR_OWVAR 35
51634: PUSH
51635: LD_INT 7
51637: NEG
51638: PPUSH
51639: LD_INT 7
51641: PPUSH
51642: CALL_OW 12
51646: ST_TO_ADDR
// animal := CreateHuman ;
51647: LD_ADDR_VAR 0 12
51651: PUSH
51652: CALL_OW 44
51656: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51657: LD_VAR 0 12
51661: PPUSH
51662: LD_VAR 0 8
51666: PPUSH
51667: LD_INT 0
51669: PPUSH
51670: CALL 53636 0 3
// end ;
51674: GO 51611
51676: POP
51677: POP
// if apemans then
51678: LD_VAR 0 3
51682: IFFALSE 51805
// for i = 1 to apemans do
51684: LD_ADDR_VAR 0 11
51688: PUSH
51689: DOUBLE
51690: LD_INT 1
51692: DEC
51693: ST_TO_ADDR
51694: LD_VAR 0 3
51698: PUSH
51699: FOR_TO
51700: IFFALSE 51803
// begin hc_class = class_apeman ;
51702: LD_ADDR_OWVAR 28
51706: PUSH
51707: LD_INT 12
51709: ST_TO_ADDR
// hc_gallery =  ;
51710: LD_ADDR_OWVAR 33
51714: PUSH
51715: LD_STRING 
51717: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51718: LD_ADDR_OWVAR 35
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PPUSH
51727: LD_INT 2
51729: PPUSH
51730: CALL_OW 12
51734: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51735: LD_ADDR_OWVAR 31
51739: PUSH
51740: LD_INT 1
51742: PPUSH
51743: LD_INT 3
51745: PPUSH
51746: CALL_OW 12
51750: PUSH
51751: LD_INT 1
51753: PPUSH
51754: LD_INT 3
51756: PPUSH
51757: CALL_OW 12
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: ST_TO_ADDR
// animal := CreateHuman ;
51774: LD_ADDR_VAR 0 12
51778: PUSH
51779: CALL_OW 44
51783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51784: LD_VAR 0 12
51788: PPUSH
51789: LD_VAR 0 8
51793: PPUSH
51794: LD_INT 0
51796: PPUSH
51797: CALL 53636 0 3
// end ;
51801: GO 51699
51803: POP
51804: POP
// if enchidnas then
51805: LD_VAR 0 4
51809: IFFALSE 51876
// for i = 1 to enchidnas do
51811: LD_ADDR_VAR 0 11
51815: PUSH
51816: DOUBLE
51817: LD_INT 1
51819: DEC
51820: ST_TO_ADDR
51821: LD_VAR 0 4
51825: PUSH
51826: FOR_TO
51827: IFFALSE 51874
// begin hc_class = 13 ;
51829: LD_ADDR_OWVAR 28
51833: PUSH
51834: LD_INT 13
51836: ST_TO_ADDR
// hc_gallery =  ;
51837: LD_ADDR_OWVAR 33
51841: PUSH
51842: LD_STRING 
51844: ST_TO_ADDR
// animal := CreateHuman ;
51845: LD_ADDR_VAR 0 12
51849: PUSH
51850: CALL_OW 44
51854: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51855: LD_VAR 0 12
51859: PPUSH
51860: LD_VAR 0 8
51864: PPUSH
51865: LD_INT 0
51867: PPUSH
51868: CALL 53636 0 3
// end ;
51872: GO 51826
51874: POP
51875: POP
// if fishes then
51876: LD_VAR 0 7
51880: IFFALSE 51947
// for i = 1 to fishes do
51882: LD_ADDR_VAR 0 11
51886: PUSH
51887: DOUBLE
51888: LD_INT 1
51890: DEC
51891: ST_TO_ADDR
51892: LD_VAR 0 7
51896: PUSH
51897: FOR_TO
51898: IFFALSE 51945
// begin hc_class = 20 ;
51900: LD_ADDR_OWVAR 28
51904: PUSH
51905: LD_INT 20
51907: ST_TO_ADDR
// hc_gallery =  ;
51908: LD_ADDR_OWVAR 33
51912: PUSH
51913: LD_STRING 
51915: ST_TO_ADDR
// animal := CreateHuman ;
51916: LD_ADDR_VAR 0 12
51920: PUSH
51921: CALL_OW 44
51925: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51926: LD_VAR 0 12
51930: PPUSH
51931: LD_VAR 0 9
51935: PPUSH
51936: LD_INT 0
51938: PPUSH
51939: CALL 53636 0 3
// end ;
51943: GO 51897
51945: POP
51946: POP
// end ;
51947: LD_VAR 0 10
51951: RET
// export function WantHeal ( sci , unit ) ; begin
51952: LD_INT 0
51954: PPUSH
// if GetTaskList ( sci ) > 0 then
51955: LD_VAR 0 1
51959: PPUSH
51960: CALL_OW 437
51964: PUSH
51965: LD_INT 0
51967: GREATER
51968: IFFALSE 52038
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51970: LD_VAR 0 1
51974: PPUSH
51975: CALL_OW 437
51979: PUSH
51980: LD_INT 1
51982: ARRAY
51983: PUSH
51984: LD_INT 1
51986: ARRAY
51987: PUSH
51988: LD_STRING l
51990: EQUAL
51991: PUSH
51992: LD_VAR 0 1
51996: PPUSH
51997: CALL_OW 437
52001: PUSH
52002: LD_INT 1
52004: ARRAY
52005: PUSH
52006: LD_INT 4
52008: ARRAY
52009: PUSH
52010: LD_VAR 0 2
52014: EQUAL
52015: AND
52016: IFFALSE 52028
// result := true else
52018: LD_ADDR_VAR 0 3
52022: PUSH
52023: LD_INT 1
52025: ST_TO_ADDR
52026: GO 52036
// result := false ;
52028: LD_ADDR_VAR 0 3
52032: PUSH
52033: LD_INT 0
52035: ST_TO_ADDR
// end else
52036: GO 52046
// result := false ;
52038: LD_ADDR_VAR 0 3
52042: PUSH
52043: LD_INT 0
52045: ST_TO_ADDR
// end ;
52046: LD_VAR 0 3
52050: RET
// export function HealTarget ( sci ) ; begin
52051: LD_INT 0
52053: PPUSH
// if not sci then
52054: LD_VAR 0 1
52058: NOT
52059: IFFALSE 52063
// exit ;
52061: GO 52128
// result := 0 ;
52063: LD_ADDR_VAR 0 2
52067: PUSH
52068: LD_INT 0
52070: ST_TO_ADDR
// if GetTaskList ( sci ) then
52071: LD_VAR 0 1
52075: PPUSH
52076: CALL_OW 437
52080: IFFALSE 52128
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52082: LD_VAR 0 1
52086: PPUSH
52087: CALL_OW 437
52091: PUSH
52092: LD_INT 1
52094: ARRAY
52095: PUSH
52096: LD_INT 1
52098: ARRAY
52099: PUSH
52100: LD_STRING l
52102: EQUAL
52103: IFFALSE 52128
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52105: LD_ADDR_VAR 0 2
52109: PUSH
52110: LD_VAR 0 1
52114: PPUSH
52115: CALL_OW 437
52119: PUSH
52120: LD_INT 1
52122: ARRAY
52123: PUSH
52124: LD_INT 4
52126: ARRAY
52127: ST_TO_ADDR
// end ;
52128: LD_VAR 0 2
52132: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52133: LD_INT 0
52135: PPUSH
52136: PPUSH
52137: PPUSH
52138: PPUSH
// if not base_units then
52139: LD_VAR 0 1
52143: NOT
52144: IFFALSE 52148
// exit ;
52146: GO 52235
// result := false ;
52148: LD_ADDR_VAR 0 2
52152: PUSH
52153: LD_INT 0
52155: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52156: LD_ADDR_VAR 0 5
52160: PUSH
52161: LD_VAR 0 1
52165: PPUSH
52166: LD_INT 21
52168: PUSH
52169: LD_INT 3
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PPUSH
52176: CALL_OW 72
52180: ST_TO_ADDR
// if not tmp then
52181: LD_VAR 0 5
52185: NOT
52186: IFFALSE 52190
// exit ;
52188: GO 52235
// for i in tmp do
52190: LD_ADDR_VAR 0 3
52194: PUSH
52195: LD_VAR 0 5
52199: PUSH
52200: FOR_IN
52201: IFFALSE 52233
// begin result := EnemyInRange ( i , 22 ) ;
52203: LD_ADDR_VAR 0 2
52207: PUSH
52208: LD_VAR 0 3
52212: PPUSH
52213: LD_INT 22
52215: PPUSH
52216: CALL 50471 0 2
52220: ST_TO_ADDR
// if result then
52221: LD_VAR 0 2
52225: IFFALSE 52231
// exit ;
52227: POP
52228: POP
52229: GO 52235
// end ;
52231: GO 52200
52233: POP
52234: POP
// end ;
52235: LD_VAR 0 2
52239: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52240: LD_INT 0
52242: PPUSH
52243: PPUSH
// if not units then
52244: LD_VAR 0 1
52248: NOT
52249: IFFALSE 52253
// exit ;
52251: GO 52323
// result := [ ] ;
52253: LD_ADDR_VAR 0 3
52257: PUSH
52258: EMPTY
52259: ST_TO_ADDR
// for i in units do
52260: LD_ADDR_VAR 0 4
52264: PUSH
52265: LD_VAR 0 1
52269: PUSH
52270: FOR_IN
52271: IFFALSE 52321
// if GetTag ( i ) = tag then
52273: LD_VAR 0 4
52277: PPUSH
52278: CALL_OW 110
52282: PUSH
52283: LD_VAR 0 2
52287: EQUAL
52288: IFFALSE 52319
// result := Replace ( result , result + 1 , i ) ;
52290: LD_ADDR_VAR 0 3
52294: PUSH
52295: LD_VAR 0 3
52299: PPUSH
52300: LD_VAR 0 3
52304: PUSH
52305: LD_INT 1
52307: PLUS
52308: PPUSH
52309: LD_VAR 0 4
52313: PPUSH
52314: CALL_OW 1
52318: ST_TO_ADDR
52319: GO 52270
52321: POP
52322: POP
// end ;
52323: LD_VAR 0 3
52327: RET
// export function IsDriver ( un ) ; begin
52328: LD_INT 0
52330: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52331: LD_ADDR_VAR 0 2
52335: PUSH
52336: LD_VAR 0 1
52340: PUSH
52341: LD_INT 55
52343: PUSH
52344: EMPTY
52345: LIST
52346: PPUSH
52347: CALL_OW 69
52351: IN
52352: ST_TO_ADDR
// end ;
52353: LD_VAR 0 2
52357: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52358: LD_INT 0
52360: PPUSH
52361: PPUSH
// list := [ ] ;
52362: LD_ADDR_VAR 0 5
52366: PUSH
52367: EMPTY
52368: ST_TO_ADDR
// case d of 0 :
52369: LD_VAR 0 3
52373: PUSH
52374: LD_INT 0
52376: DOUBLE
52377: EQUAL
52378: IFTRUE 52382
52380: GO 52515
52382: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52383: LD_ADDR_VAR 0 5
52387: PUSH
52388: LD_VAR 0 1
52392: PUSH
52393: LD_INT 4
52395: MINUS
52396: PUSH
52397: LD_VAR 0 2
52401: PUSH
52402: LD_INT 4
52404: MINUS
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: PUSH
52414: LD_VAR 0 1
52418: PUSH
52419: LD_INT 3
52421: MINUS
52422: PUSH
52423: LD_VAR 0 2
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: PUSH
52436: LD_VAR 0 1
52440: PUSH
52441: LD_INT 4
52443: PLUS
52444: PUSH
52445: LD_VAR 0 2
52449: PUSH
52450: LD_INT 4
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: LIST
52457: PUSH
52458: LD_VAR 0 1
52462: PUSH
52463: LD_INT 3
52465: PLUS
52466: PUSH
52467: LD_VAR 0 2
52471: PUSH
52472: LD_INT 3
52474: PLUS
52475: PUSH
52476: LD_INT 5
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: PUSH
52484: LD_VAR 0 1
52488: PUSH
52489: LD_VAR 0 2
52493: PUSH
52494: LD_INT 4
52496: PLUS
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// end ; 1 :
52513: GO 53213
52515: LD_INT 1
52517: DOUBLE
52518: EQUAL
52519: IFTRUE 52523
52521: GO 52656
52523: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52524: LD_ADDR_VAR 0 5
52528: PUSH
52529: LD_VAR 0 1
52533: PUSH
52534: LD_VAR 0 2
52538: PUSH
52539: LD_INT 4
52541: MINUS
52542: PUSH
52543: LD_INT 3
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: PUSH
52551: LD_VAR 0 1
52555: PUSH
52556: LD_INT 3
52558: MINUS
52559: PUSH
52560: LD_VAR 0 2
52564: PUSH
52565: LD_INT 3
52567: MINUS
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: PUSH
52577: LD_VAR 0 1
52581: PUSH
52582: LD_INT 4
52584: MINUS
52585: PUSH
52586: LD_VAR 0 2
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: PUSH
52599: LD_VAR 0 1
52603: PUSH
52604: LD_VAR 0 2
52608: PUSH
52609: LD_INT 3
52611: PLUS
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: PUSH
52621: LD_VAR 0 1
52625: PUSH
52626: LD_INT 4
52628: PLUS
52629: PUSH
52630: LD_VAR 0 2
52634: PUSH
52635: LD_INT 4
52637: PLUS
52638: PUSH
52639: LD_INT 5
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: ST_TO_ADDR
// end ; 2 :
52654: GO 53213
52656: LD_INT 2
52658: DOUBLE
52659: EQUAL
52660: IFTRUE 52664
52662: GO 52793
52664: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52665: LD_ADDR_VAR 0 5
52669: PUSH
52670: LD_VAR 0 1
52674: PUSH
52675: LD_VAR 0 2
52679: PUSH
52680: LD_INT 3
52682: MINUS
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: PUSH
52692: LD_VAR 0 1
52696: PUSH
52697: LD_INT 4
52699: PLUS
52700: PUSH
52701: LD_VAR 0 2
52705: PUSH
52706: LD_INT 4
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: PUSH
52714: LD_VAR 0 1
52718: PUSH
52719: LD_VAR 0 2
52723: PUSH
52724: LD_INT 4
52726: PLUS
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: PUSH
52736: LD_VAR 0 1
52740: PUSH
52741: LD_INT 3
52743: MINUS
52744: PUSH
52745: LD_VAR 0 2
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: LIST
52757: PUSH
52758: LD_VAR 0 1
52762: PUSH
52763: LD_INT 4
52765: MINUS
52766: PUSH
52767: LD_VAR 0 2
52771: PUSH
52772: LD_INT 4
52774: MINUS
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: LIST
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: ST_TO_ADDR
// end ; 3 :
52791: GO 53213
52793: LD_INT 3
52795: DOUBLE
52796: EQUAL
52797: IFTRUE 52801
52799: GO 52934
52801: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52802: LD_ADDR_VAR 0 5
52806: PUSH
52807: LD_VAR 0 1
52811: PUSH
52812: LD_INT 3
52814: PLUS
52815: PUSH
52816: LD_VAR 0 2
52820: PUSH
52821: LD_INT 4
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: LIST
52828: PUSH
52829: LD_VAR 0 1
52833: PUSH
52834: LD_INT 4
52836: PLUS
52837: PUSH
52838: LD_VAR 0 2
52842: PUSH
52843: LD_INT 4
52845: PLUS
52846: PUSH
52847: LD_INT 5
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: LIST
52854: PUSH
52855: LD_VAR 0 1
52859: PUSH
52860: LD_INT 4
52862: MINUS
52863: PUSH
52864: LD_VAR 0 2
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: LIST
52876: PUSH
52877: LD_VAR 0 1
52881: PUSH
52882: LD_VAR 0 2
52886: PUSH
52887: LD_INT 4
52889: MINUS
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: LIST
52898: PUSH
52899: LD_VAR 0 1
52903: PUSH
52904: LD_INT 3
52906: MINUS
52907: PUSH
52908: LD_VAR 0 2
52912: PUSH
52913: LD_INT 3
52915: MINUS
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: ST_TO_ADDR
// end ; 4 :
52932: GO 53213
52934: LD_INT 4
52936: DOUBLE
52937: EQUAL
52938: IFTRUE 52942
52940: GO 53075
52942: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52943: LD_ADDR_VAR 0 5
52947: PUSH
52948: LD_VAR 0 1
52952: PUSH
52953: LD_VAR 0 2
52957: PUSH
52958: LD_INT 4
52960: PLUS
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: PUSH
52970: LD_VAR 0 1
52974: PUSH
52975: LD_INT 3
52977: PLUS
52978: PUSH
52979: LD_VAR 0 2
52983: PUSH
52984: LD_INT 3
52986: PLUS
52987: PUSH
52988: LD_INT 5
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: PUSH
52996: LD_VAR 0 1
53000: PUSH
53001: LD_INT 4
53003: PLUS
53004: PUSH
53005: LD_VAR 0 2
53009: PUSH
53010: LD_INT 4
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: PUSH
53018: LD_VAR 0 1
53022: PUSH
53023: LD_VAR 0 2
53027: PUSH
53028: LD_INT 3
53030: MINUS
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: PUSH
53040: LD_VAR 0 1
53044: PUSH
53045: LD_INT 4
53047: MINUS
53048: PUSH
53049: LD_VAR 0 2
53053: PUSH
53054: LD_INT 4
53056: MINUS
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: ST_TO_ADDR
// end ; 5 :
53073: GO 53213
53075: LD_INT 5
53077: DOUBLE
53078: EQUAL
53079: IFTRUE 53083
53081: GO 53212
53083: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53084: LD_ADDR_VAR 0 5
53088: PUSH
53089: LD_VAR 0 1
53093: PUSH
53094: LD_INT 4
53096: MINUS
53097: PUSH
53098: LD_VAR 0 2
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: LIST
53110: PUSH
53111: LD_VAR 0 1
53115: PUSH
53116: LD_VAR 0 2
53120: PUSH
53121: LD_INT 4
53123: MINUS
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: PUSH
53133: LD_VAR 0 1
53137: PUSH
53138: LD_INT 4
53140: PLUS
53141: PUSH
53142: LD_VAR 0 2
53146: PUSH
53147: LD_INT 4
53149: PLUS
53150: PUSH
53151: LD_INT 5
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: PUSH
53159: LD_VAR 0 1
53163: PUSH
53164: LD_INT 3
53166: PLUS
53167: PUSH
53168: LD_VAR 0 2
53172: PUSH
53173: LD_INT 4
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: LIST
53180: PUSH
53181: LD_VAR 0 1
53185: PUSH
53186: LD_VAR 0 2
53190: PUSH
53191: LD_INT 3
53193: PLUS
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: ST_TO_ADDR
// end ; end ;
53210: GO 53213
53212: POP
// result := list ;
53213: LD_ADDR_VAR 0 4
53217: PUSH
53218: LD_VAR 0 5
53222: ST_TO_ADDR
// end ;
53223: LD_VAR 0 4
53227: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53228: LD_INT 0
53230: PPUSH
53231: PPUSH
53232: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53233: LD_VAR 0 1
53237: NOT
53238: PUSH
53239: LD_VAR 0 2
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: LD_INT 4
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: IN
53262: NOT
53263: OR
53264: IFFALSE 53268
// exit ;
53266: GO 53360
// tmp := [ ] ;
53268: LD_ADDR_VAR 0 5
53272: PUSH
53273: EMPTY
53274: ST_TO_ADDR
// for i in units do
53275: LD_ADDR_VAR 0 4
53279: PUSH
53280: LD_VAR 0 1
53284: PUSH
53285: FOR_IN
53286: IFFALSE 53329
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53288: LD_ADDR_VAR 0 5
53292: PUSH
53293: LD_VAR 0 5
53297: PPUSH
53298: LD_VAR 0 5
53302: PUSH
53303: LD_INT 1
53305: PLUS
53306: PPUSH
53307: LD_VAR 0 4
53311: PPUSH
53312: LD_VAR 0 2
53316: PPUSH
53317: CALL_OW 259
53321: PPUSH
53322: CALL_OW 2
53326: ST_TO_ADDR
53327: GO 53285
53329: POP
53330: POP
// if not tmp then
53331: LD_VAR 0 5
53335: NOT
53336: IFFALSE 53340
// exit ;
53338: GO 53360
// result := SortListByListDesc ( units , tmp ) ;
53340: LD_ADDR_VAR 0 3
53344: PUSH
53345: LD_VAR 0 1
53349: PPUSH
53350: LD_VAR 0 5
53354: PPUSH
53355: CALL_OW 77
53359: ST_TO_ADDR
// end ;
53360: LD_VAR 0 3
53364: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53365: LD_INT 0
53367: PPUSH
53368: PPUSH
53369: PPUSH
// result := false ;
53370: LD_ADDR_VAR 0 3
53374: PUSH
53375: LD_INT 0
53377: ST_TO_ADDR
// x := GetX ( building ) ;
53378: LD_ADDR_VAR 0 4
53382: PUSH
53383: LD_VAR 0 2
53387: PPUSH
53388: CALL_OW 250
53392: ST_TO_ADDR
// y := GetY ( building ) ;
53393: LD_ADDR_VAR 0 5
53397: PUSH
53398: LD_VAR 0 2
53402: PPUSH
53403: CALL_OW 251
53407: ST_TO_ADDR
// if not building or not x or not y then
53408: LD_VAR 0 2
53412: NOT
53413: PUSH
53414: LD_VAR 0 4
53418: NOT
53419: OR
53420: PUSH
53421: LD_VAR 0 5
53425: NOT
53426: OR
53427: IFFALSE 53431
// exit ;
53429: GO 53523
// if GetTaskList ( unit ) then
53431: LD_VAR 0 1
53435: PPUSH
53436: CALL_OW 437
53440: IFFALSE 53523
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53442: LD_STRING e
53444: PUSH
53445: LD_VAR 0 1
53449: PPUSH
53450: CALL_OW 437
53454: PUSH
53455: LD_INT 1
53457: ARRAY
53458: PUSH
53459: LD_INT 1
53461: ARRAY
53462: EQUAL
53463: PUSH
53464: LD_VAR 0 4
53468: PUSH
53469: LD_VAR 0 1
53473: PPUSH
53474: CALL_OW 437
53478: PUSH
53479: LD_INT 1
53481: ARRAY
53482: PUSH
53483: LD_INT 2
53485: ARRAY
53486: EQUAL
53487: AND
53488: PUSH
53489: LD_VAR 0 5
53493: PUSH
53494: LD_VAR 0 1
53498: PPUSH
53499: CALL_OW 437
53503: PUSH
53504: LD_INT 1
53506: ARRAY
53507: PUSH
53508: LD_INT 3
53510: ARRAY
53511: EQUAL
53512: AND
53513: IFFALSE 53523
// result := true end ;
53515: LD_ADDR_VAR 0 3
53519: PUSH
53520: LD_INT 1
53522: ST_TO_ADDR
// end ;
53523: LD_VAR 0 3
53527: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53528: LD_INT 0
53530: PPUSH
// result := false ;
53531: LD_ADDR_VAR 0 4
53535: PUSH
53536: LD_INT 0
53538: ST_TO_ADDR
// if GetTaskList ( unit ) then
53539: LD_VAR 0 1
53543: PPUSH
53544: CALL_OW 437
53548: IFFALSE 53631
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53550: LD_STRING M
53552: PUSH
53553: LD_VAR 0 1
53557: PPUSH
53558: CALL_OW 437
53562: PUSH
53563: LD_INT 1
53565: ARRAY
53566: PUSH
53567: LD_INT 1
53569: ARRAY
53570: EQUAL
53571: PUSH
53572: LD_VAR 0 2
53576: PUSH
53577: LD_VAR 0 1
53581: PPUSH
53582: CALL_OW 437
53586: PUSH
53587: LD_INT 1
53589: ARRAY
53590: PUSH
53591: LD_INT 2
53593: ARRAY
53594: EQUAL
53595: AND
53596: PUSH
53597: LD_VAR 0 3
53601: PUSH
53602: LD_VAR 0 1
53606: PPUSH
53607: CALL_OW 437
53611: PUSH
53612: LD_INT 1
53614: ARRAY
53615: PUSH
53616: LD_INT 3
53618: ARRAY
53619: EQUAL
53620: AND
53621: IFFALSE 53631
// result := true ;
53623: LD_ADDR_VAR 0 4
53627: PUSH
53628: LD_INT 1
53630: ST_TO_ADDR
// end ; end ;
53631: LD_VAR 0 4
53635: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53636: LD_INT 0
53638: PPUSH
53639: PPUSH
53640: PPUSH
53641: PPUSH
// if not unit or not area then
53642: LD_VAR 0 1
53646: NOT
53647: PUSH
53648: LD_VAR 0 2
53652: NOT
53653: OR
53654: IFFALSE 53658
// exit ;
53656: GO 53822
// tmp := AreaToList ( area , i ) ;
53658: LD_ADDR_VAR 0 6
53662: PUSH
53663: LD_VAR 0 2
53667: PPUSH
53668: LD_VAR 0 5
53672: PPUSH
53673: CALL_OW 517
53677: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53678: LD_ADDR_VAR 0 5
53682: PUSH
53683: DOUBLE
53684: LD_INT 1
53686: DEC
53687: ST_TO_ADDR
53688: LD_VAR 0 6
53692: PUSH
53693: LD_INT 1
53695: ARRAY
53696: PUSH
53697: FOR_TO
53698: IFFALSE 53820
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53700: LD_ADDR_VAR 0 7
53704: PUSH
53705: LD_VAR 0 6
53709: PUSH
53710: LD_INT 1
53712: ARRAY
53713: PUSH
53714: LD_VAR 0 5
53718: ARRAY
53719: PUSH
53720: LD_VAR 0 6
53724: PUSH
53725: LD_INT 2
53727: ARRAY
53728: PUSH
53729: LD_VAR 0 5
53733: ARRAY
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53739: LD_VAR 0 7
53743: PUSH
53744: LD_INT 1
53746: ARRAY
53747: PPUSH
53748: LD_VAR 0 7
53752: PUSH
53753: LD_INT 2
53755: ARRAY
53756: PPUSH
53757: CALL_OW 428
53761: PUSH
53762: LD_INT 0
53764: EQUAL
53765: IFFALSE 53818
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53767: LD_VAR 0 1
53771: PPUSH
53772: LD_VAR 0 7
53776: PUSH
53777: LD_INT 1
53779: ARRAY
53780: PPUSH
53781: LD_VAR 0 7
53785: PUSH
53786: LD_INT 2
53788: ARRAY
53789: PPUSH
53790: LD_VAR 0 3
53794: PPUSH
53795: CALL_OW 48
// result := IsPlaced ( unit ) ;
53799: LD_ADDR_VAR 0 4
53803: PUSH
53804: LD_VAR 0 1
53808: PPUSH
53809: CALL_OW 305
53813: ST_TO_ADDR
// exit ;
53814: POP
53815: POP
53816: GO 53822
// end ; end ;
53818: GO 53697
53820: POP
53821: POP
// end ;
53822: LD_VAR 0 4
53826: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53827: LD_INT 0
53829: PPUSH
53830: PPUSH
53831: PPUSH
// if not side or side > 8 then
53832: LD_VAR 0 1
53836: NOT
53837: PUSH
53838: LD_VAR 0 1
53842: PUSH
53843: LD_INT 8
53845: GREATER
53846: OR
53847: IFFALSE 53851
// exit ;
53849: GO 54038
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53851: LD_ADDR_VAR 0 4
53855: PUSH
53856: LD_INT 22
53858: PUSH
53859: LD_VAR 0 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 21
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PPUSH
53882: CALL_OW 69
53886: ST_TO_ADDR
// if not tmp then
53887: LD_VAR 0 4
53891: NOT
53892: IFFALSE 53896
// exit ;
53894: GO 54038
// enable_addtolog := true ;
53896: LD_ADDR_OWVAR 81
53900: PUSH
53901: LD_INT 1
53903: ST_TO_ADDR
// AddToLog ( [ ) ;
53904: LD_STRING [
53906: PPUSH
53907: CALL_OW 561
// for i in tmp do
53911: LD_ADDR_VAR 0 3
53915: PUSH
53916: LD_VAR 0 4
53920: PUSH
53921: FOR_IN
53922: IFFALSE 54029
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53924: LD_STRING [
53926: PUSH
53927: LD_VAR 0 3
53931: PPUSH
53932: CALL_OW 266
53936: STR
53937: PUSH
53938: LD_STRING , 
53940: STR
53941: PUSH
53942: LD_VAR 0 3
53946: PPUSH
53947: CALL_OW 250
53951: STR
53952: PUSH
53953: LD_STRING , 
53955: STR
53956: PUSH
53957: LD_VAR 0 3
53961: PPUSH
53962: CALL_OW 251
53966: STR
53967: PUSH
53968: LD_STRING , 
53970: STR
53971: PUSH
53972: LD_VAR 0 3
53976: PPUSH
53977: CALL_OW 254
53981: STR
53982: PUSH
53983: LD_STRING , 
53985: STR
53986: PUSH
53987: LD_VAR 0 3
53991: PPUSH
53992: LD_INT 1
53994: PPUSH
53995: CALL_OW 268
53999: STR
54000: PUSH
54001: LD_STRING , 
54003: STR
54004: PUSH
54005: LD_VAR 0 3
54009: PPUSH
54010: LD_INT 2
54012: PPUSH
54013: CALL_OW 268
54017: STR
54018: PUSH
54019: LD_STRING ],
54021: STR
54022: PPUSH
54023: CALL_OW 561
// end ;
54027: GO 53921
54029: POP
54030: POP
// AddToLog ( ]; ) ;
54031: LD_STRING ];
54033: PPUSH
54034: CALL_OW 561
// end ;
54038: LD_VAR 0 2
54042: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54043: LD_INT 0
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
54049: PPUSH
// if not area or not rate or not max then
54050: LD_VAR 0 1
54054: NOT
54055: PUSH
54056: LD_VAR 0 2
54060: NOT
54061: OR
54062: PUSH
54063: LD_VAR 0 4
54067: NOT
54068: OR
54069: IFFALSE 54073
// exit ;
54071: GO 54265
// while 1 do
54073: LD_INT 1
54075: IFFALSE 54265
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54077: LD_ADDR_VAR 0 9
54081: PUSH
54082: LD_VAR 0 1
54086: PPUSH
54087: LD_INT 1
54089: PPUSH
54090: CALL_OW 287
54094: PUSH
54095: LD_INT 10
54097: MUL
54098: ST_TO_ADDR
// r := rate / 10 ;
54099: LD_ADDR_VAR 0 7
54103: PUSH
54104: LD_VAR 0 2
54108: PUSH
54109: LD_INT 10
54111: DIVREAL
54112: ST_TO_ADDR
// time := 1 1$00 ;
54113: LD_ADDR_VAR 0 8
54117: PUSH
54118: LD_INT 2100
54120: ST_TO_ADDR
// if amount < min then
54121: LD_VAR 0 9
54125: PUSH
54126: LD_VAR 0 3
54130: LESS
54131: IFFALSE 54149
// r := r * 2 else
54133: LD_ADDR_VAR 0 7
54137: PUSH
54138: LD_VAR 0 7
54142: PUSH
54143: LD_INT 2
54145: MUL
54146: ST_TO_ADDR
54147: GO 54175
// if amount > max then
54149: LD_VAR 0 9
54153: PUSH
54154: LD_VAR 0 4
54158: GREATER
54159: IFFALSE 54175
// r := r / 2 ;
54161: LD_ADDR_VAR 0 7
54165: PUSH
54166: LD_VAR 0 7
54170: PUSH
54171: LD_INT 2
54173: DIVREAL
54174: ST_TO_ADDR
// time := time / r ;
54175: LD_ADDR_VAR 0 8
54179: PUSH
54180: LD_VAR 0 8
54184: PUSH
54185: LD_VAR 0 7
54189: DIVREAL
54190: ST_TO_ADDR
// if time < 0 then
54191: LD_VAR 0 8
54195: PUSH
54196: LD_INT 0
54198: LESS
54199: IFFALSE 54216
// time := time * - 1 ;
54201: LD_ADDR_VAR 0 8
54205: PUSH
54206: LD_VAR 0 8
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: MUL
54215: ST_TO_ADDR
// wait ( time ) ;
54216: LD_VAR 0 8
54220: PPUSH
54221: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54225: LD_INT 35
54227: PPUSH
54228: LD_INT 875
54230: PPUSH
54231: CALL_OW 12
54235: PPUSH
54236: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54240: LD_INT 1
54242: PPUSH
54243: LD_INT 5
54245: PPUSH
54246: CALL_OW 12
54250: PPUSH
54251: LD_VAR 0 1
54255: PPUSH
54256: LD_INT 1
54258: PPUSH
54259: CALL_OW 55
// end ;
54263: GO 54073
// end ;
54265: LD_VAR 0 5
54269: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54270: LD_INT 0
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
54276: PPUSH
54277: PPUSH
54278: PPUSH
54279: PPUSH
// if not turrets or not factories then
54280: LD_VAR 0 1
54284: NOT
54285: PUSH
54286: LD_VAR 0 2
54290: NOT
54291: OR
54292: IFFALSE 54296
// exit ;
54294: GO 54603
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54296: LD_ADDR_VAR 0 10
54300: PUSH
54301: LD_INT 5
54303: PUSH
54304: LD_INT 6
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: LD_INT 4
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: LD_INT 5
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 24
54338: PUSH
54339: LD_INT 25
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 23
54348: PUSH
54349: LD_INT 27
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 42
54362: PUSH
54363: LD_INT 43
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 44
54372: PUSH
54373: LD_INT 46
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 45
54382: PUSH
54383: LD_INT 47
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: ST_TO_ADDR
// result := [ ] ;
54400: LD_ADDR_VAR 0 3
54404: PUSH
54405: EMPTY
54406: ST_TO_ADDR
// for i in turrets do
54407: LD_ADDR_VAR 0 4
54411: PUSH
54412: LD_VAR 0 1
54416: PUSH
54417: FOR_IN
54418: IFFALSE 54601
// begin nat := GetNation ( i ) ;
54420: LD_ADDR_VAR 0 7
54424: PUSH
54425: LD_VAR 0 4
54429: PPUSH
54430: CALL_OW 248
54434: ST_TO_ADDR
// weapon := 0 ;
54435: LD_ADDR_VAR 0 8
54439: PUSH
54440: LD_INT 0
54442: ST_TO_ADDR
// if not nat then
54443: LD_VAR 0 7
54447: NOT
54448: IFFALSE 54452
// continue ;
54450: GO 54417
// for j in list [ nat ] do
54452: LD_ADDR_VAR 0 5
54456: PUSH
54457: LD_VAR 0 10
54461: PUSH
54462: LD_VAR 0 7
54466: ARRAY
54467: PUSH
54468: FOR_IN
54469: IFFALSE 54510
// if GetBWeapon ( i ) = j [ 1 ] then
54471: LD_VAR 0 4
54475: PPUSH
54476: CALL_OW 269
54480: PUSH
54481: LD_VAR 0 5
54485: PUSH
54486: LD_INT 1
54488: ARRAY
54489: EQUAL
54490: IFFALSE 54508
// begin weapon := j [ 2 ] ;
54492: LD_ADDR_VAR 0 8
54496: PUSH
54497: LD_VAR 0 5
54501: PUSH
54502: LD_INT 2
54504: ARRAY
54505: ST_TO_ADDR
// break ;
54506: GO 54510
// end ;
54508: GO 54468
54510: POP
54511: POP
// if not weapon then
54512: LD_VAR 0 8
54516: NOT
54517: IFFALSE 54521
// continue ;
54519: GO 54417
// for k in factories do
54521: LD_ADDR_VAR 0 6
54525: PUSH
54526: LD_VAR 0 2
54530: PUSH
54531: FOR_IN
54532: IFFALSE 54597
// begin weapons := AvailableWeaponList ( k ) ;
54534: LD_ADDR_VAR 0 9
54538: PUSH
54539: LD_VAR 0 6
54543: PPUSH
54544: CALL_OW 478
54548: ST_TO_ADDR
// if not weapons then
54549: LD_VAR 0 9
54553: NOT
54554: IFFALSE 54558
// continue ;
54556: GO 54531
// if weapon in weapons then
54558: LD_VAR 0 8
54562: PUSH
54563: LD_VAR 0 9
54567: IN
54568: IFFALSE 54595
// begin result := [ i , weapon ] ;
54570: LD_ADDR_VAR 0 3
54574: PUSH
54575: LD_VAR 0 4
54579: PUSH
54580: LD_VAR 0 8
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: ST_TO_ADDR
// exit ;
54589: POP
54590: POP
54591: POP
54592: POP
54593: GO 54603
// end ; end ;
54595: GO 54531
54597: POP
54598: POP
// end ;
54599: GO 54417
54601: POP
54602: POP
// end ;
54603: LD_VAR 0 3
54607: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54608: LD_INT 0
54610: PPUSH
// if not side or side > 8 then
54611: LD_VAR 0 3
54615: NOT
54616: PUSH
54617: LD_VAR 0 3
54621: PUSH
54622: LD_INT 8
54624: GREATER
54625: OR
54626: IFFALSE 54630
// exit ;
54628: GO 54689
// if not range then
54630: LD_VAR 0 4
54634: NOT
54635: IFFALSE 54646
// range := - 12 ;
54637: LD_ADDR_VAR 0 4
54641: PUSH
54642: LD_INT 12
54644: NEG
54645: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54646: LD_VAR 0 1
54650: PPUSH
54651: LD_VAR 0 2
54655: PPUSH
54656: LD_VAR 0 3
54660: PPUSH
54661: LD_VAR 0 4
54665: PPUSH
54666: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54670: LD_VAR 0 1
54674: PPUSH
54675: LD_VAR 0 2
54679: PPUSH
54680: LD_VAR 0 3
54684: PPUSH
54685: CALL_OW 331
// end ;
54689: LD_VAR 0 5
54693: RET
// export function Video ( mode ) ; begin
54694: LD_INT 0
54696: PPUSH
// ingame_video = mode ;
54697: LD_ADDR_OWVAR 52
54701: PUSH
54702: LD_VAR 0 1
54706: ST_TO_ADDR
// interface_hidden = mode ;
54707: LD_ADDR_OWVAR 54
54711: PUSH
54712: LD_VAR 0 1
54716: ST_TO_ADDR
// end ;
54717: LD_VAR 0 2
54721: RET
// export function Join ( array , element ) ; begin
54722: LD_INT 0
54724: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54725: LD_ADDR_VAR 0 3
54729: PUSH
54730: LD_VAR 0 1
54734: PPUSH
54735: LD_VAR 0 1
54739: PUSH
54740: LD_INT 1
54742: PLUS
54743: PPUSH
54744: LD_VAR 0 2
54748: PPUSH
54749: CALL_OW 1
54753: ST_TO_ADDR
// end ;
54754: LD_VAR 0 3
54758: RET
// export function JoinUnion ( array , element ) ; begin
54759: LD_INT 0
54761: PPUSH
// result := array union element ;
54762: LD_ADDR_VAR 0 3
54766: PUSH
54767: LD_VAR 0 1
54771: PUSH
54772: LD_VAR 0 2
54776: UNION
54777: ST_TO_ADDR
// end ;
54778: LD_VAR 0 3
54782: RET
// export function GetBehemoths ( side ) ; begin
54783: LD_INT 0
54785: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
54786: LD_ADDR_VAR 0 2
54790: PUSH
54791: LD_INT 22
54793: PUSH
54794: LD_VAR 0 1
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 31
54805: PUSH
54806: LD_INT 25
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PPUSH
54817: CALL_OW 69
54821: ST_TO_ADDR
// end ;
54822: LD_VAR 0 2
54826: RET
// export function Shuffle ( array ) ; var i , index ; begin
54827: LD_INT 0
54829: PPUSH
54830: PPUSH
54831: PPUSH
// result := [ ] ;
54832: LD_ADDR_VAR 0 2
54836: PUSH
54837: EMPTY
54838: ST_TO_ADDR
// if not array then
54839: LD_VAR 0 1
54843: NOT
54844: IFFALSE 54848
// exit ;
54846: GO 54947
// Randomize ;
54848: CALL_OW 10
// for i = array downto 1 do
54852: LD_ADDR_VAR 0 3
54856: PUSH
54857: DOUBLE
54858: LD_VAR 0 1
54862: INC
54863: ST_TO_ADDR
54864: LD_INT 1
54866: PUSH
54867: FOR_DOWNTO
54868: IFFALSE 54945
// begin index := rand ( 1 , array ) ;
54870: LD_ADDR_VAR 0 4
54874: PUSH
54875: LD_INT 1
54877: PPUSH
54878: LD_VAR 0 1
54882: PPUSH
54883: CALL_OW 12
54887: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54888: LD_ADDR_VAR 0 2
54892: PUSH
54893: LD_VAR 0 2
54897: PPUSH
54898: LD_VAR 0 2
54902: PUSH
54903: LD_INT 1
54905: PLUS
54906: PPUSH
54907: LD_VAR 0 1
54911: PUSH
54912: LD_VAR 0 4
54916: ARRAY
54917: PPUSH
54918: CALL_OW 2
54922: ST_TO_ADDR
// array := Delete ( array , index ) ;
54923: LD_ADDR_VAR 0 1
54927: PUSH
54928: LD_VAR 0 1
54932: PPUSH
54933: LD_VAR 0 4
54937: PPUSH
54938: CALL_OW 3
54942: ST_TO_ADDR
// end ;
54943: GO 54867
54945: POP
54946: POP
// end ;
54947: LD_VAR 0 2
54951: RET
// export function GetBaseMaterials ( base ) ; begin
54952: LD_INT 0
54954: PPUSH
// result := [ 0 , 0 , 0 ] ;
54955: LD_ADDR_VAR 0 2
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: ST_TO_ADDR
// if not base then
54974: LD_VAR 0 1
54978: NOT
54979: IFFALSE 54983
// exit ;
54981: GO 55032
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54983: LD_ADDR_VAR 0 2
54987: PUSH
54988: LD_VAR 0 1
54992: PPUSH
54993: LD_INT 1
54995: PPUSH
54996: CALL_OW 275
55000: PUSH
55001: LD_VAR 0 1
55005: PPUSH
55006: LD_INT 2
55008: PPUSH
55009: CALL_OW 275
55013: PUSH
55014: LD_VAR 0 1
55018: PPUSH
55019: LD_INT 3
55021: PPUSH
55022: CALL_OW 275
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: LIST
55031: ST_TO_ADDR
// end ;
55032: LD_VAR 0 2
55036: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55037: LD_INT 0
55039: PPUSH
55040: PPUSH
// result := array ;
55041: LD_ADDR_VAR 0 3
55045: PUSH
55046: LD_VAR 0 1
55050: ST_TO_ADDR
// if size > 0 then
55051: LD_VAR 0 2
55055: PUSH
55056: LD_INT 0
55058: GREATER
55059: IFFALSE 55105
// for i := array downto size do
55061: LD_ADDR_VAR 0 4
55065: PUSH
55066: DOUBLE
55067: LD_VAR 0 1
55071: INC
55072: ST_TO_ADDR
55073: LD_VAR 0 2
55077: PUSH
55078: FOR_DOWNTO
55079: IFFALSE 55103
// result := Delete ( result , result ) ;
55081: LD_ADDR_VAR 0 3
55085: PUSH
55086: LD_VAR 0 3
55090: PPUSH
55091: LD_VAR 0 3
55095: PPUSH
55096: CALL_OW 3
55100: ST_TO_ADDR
55101: GO 55078
55103: POP
55104: POP
// end ;
55105: LD_VAR 0 3
55109: RET
// export function ComExit ( unit ) ; var tmp ; begin
55110: LD_INT 0
55112: PPUSH
55113: PPUSH
// if not IsInUnit ( unit ) then
55114: LD_VAR 0 1
55118: PPUSH
55119: CALL_OW 310
55123: NOT
55124: IFFALSE 55128
// exit ;
55126: GO 55188
// tmp := IsInUnit ( unit ) ;
55128: LD_ADDR_VAR 0 3
55132: PUSH
55133: LD_VAR 0 1
55137: PPUSH
55138: CALL_OW 310
55142: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55143: LD_VAR 0 3
55147: PPUSH
55148: CALL_OW 247
55152: PUSH
55153: LD_INT 2
55155: EQUAL
55156: IFFALSE 55169
// ComExitVehicle ( unit ) else
55158: LD_VAR 0 1
55162: PPUSH
55163: CALL_OW 121
55167: GO 55178
// ComExitBuilding ( unit ) ;
55169: LD_VAR 0 1
55173: PPUSH
55174: CALL_OW 122
// result := tmp ;
55178: LD_ADDR_VAR 0 2
55182: PUSH
55183: LD_VAR 0 3
55187: ST_TO_ADDR
// end ;
55188: LD_VAR 0 2
55192: RET
// export function ComExitAll ( units ) ; var i ; begin
55193: LD_INT 0
55195: PPUSH
55196: PPUSH
// if not units then
55197: LD_VAR 0 1
55201: NOT
55202: IFFALSE 55206
// exit ;
55204: GO 55232
// for i in units do
55206: LD_ADDR_VAR 0 3
55210: PUSH
55211: LD_VAR 0 1
55215: PUSH
55216: FOR_IN
55217: IFFALSE 55230
// ComExit ( i ) ;
55219: LD_VAR 0 3
55223: PPUSH
55224: CALL 55110 0 1
55228: GO 55216
55230: POP
55231: POP
// end ;
55232: LD_VAR 0 2
55236: RET
// export function ResetHc ; begin
55237: LD_INT 0
55239: PPUSH
// InitHc ;
55240: CALL_OW 19
// hc_importance := 0 ;
55244: LD_ADDR_OWVAR 32
55248: PUSH
55249: LD_INT 0
55251: ST_TO_ADDR
// end ;
55252: LD_VAR 0 1
55256: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55257: LD_INT 0
55259: PPUSH
55260: PPUSH
55261: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55262: LD_ADDR_VAR 0 6
55266: PUSH
55267: LD_VAR 0 1
55271: PUSH
55272: LD_VAR 0 3
55276: PLUS
55277: PUSH
55278: LD_INT 2
55280: DIV
55281: ST_TO_ADDR
// if _x < 0 then
55282: LD_VAR 0 6
55286: PUSH
55287: LD_INT 0
55289: LESS
55290: IFFALSE 55307
// _x := _x * - 1 ;
55292: LD_ADDR_VAR 0 6
55296: PUSH
55297: LD_VAR 0 6
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: MUL
55306: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55307: LD_ADDR_VAR 0 7
55311: PUSH
55312: LD_VAR 0 2
55316: PUSH
55317: LD_VAR 0 4
55321: PLUS
55322: PUSH
55323: LD_INT 2
55325: DIV
55326: ST_TO_ADDR
// if _y < 0 then
55327: LD_VAR 0 7
55331: PUSH
55332: LD_INT 0
55334: LESS
55335: IFFALSE 55352
// _y := _y * - 1 ;
55337: LD_ADDR_VAR 0 7
55341: PUSH
55342: LD_VAR 0 7
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: MUL
55351: ST_TO_ADDR
// result := [ _x , _y ] ;
55352: LD_ADDR_VAR 0 5
55356: PUSH
55357: LD_VAR 0 6
55361: PUSH
55362: LD_VAR 0 7
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// end ;
55371: LD_VAR 0 5
55375: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55376: LD_INT 0
55378: PPUSH
55379: PPUSH
55380: PPUSH
55381: PPUSH
// task := GetTaskList ( unit ) ;
55382: LD_ADDR_VAR 0 7
55386: PUSH
55387: LD_VAR 0 1
55391: PPUSH
55392: CALL_OW 437
55396: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55397: LD_VAR 0 7
55401: NOT
55402: PUSH
55403: LD_VAR 0 1
55407: PPUSH
55408: LD_VAR 0 2
55412: PPUSH
55413: CALL_OW 308
55417: NOT
55418: AND
55419: IFFALSE 55423
// exit ;
55421: GO 55541
// if IsInArea ( unit , area ) then
55423: LD_VAR 0 1
55427: PPUSH
55428: LD_VAR 0 2
55432: PPUSH
55433: CALL_OW 308
55437: IFFALSE 55455
// begin ComMoveToArea ( unit , goAway ) ;
55439: LD_VAR 0 1
55443: PPUSH
55444: LD_VAR 0 3
55448: PPUSH
55449: CALL_OW 113
// exit ;
55453: GO 55541
// end ; if task [ 1 ] [ 1 ] <> M then
55455: LD_VAR 0 7
55459: PUSH
55460: LD_INT 1
55462: ARRAY
55463: PUSH
55464: LD_INT 1
55466: ARRAY
55467: PUSH
55468: LD_STRING M
55470: NONEQUAL
55471: IFFALSE 55475
// exit ;
55473: GO 55541
// x := task [ 1 ] [ 2 ] ;
55475: LD_ADDR_VAR 0 5
55479: PUSH
55480: LD_VAR 0 7
55484: PUSH
55485: LD_INT 1
55487: ARRAY
55488: PUSH
55489: LD_INT 2
55491: ARRAY
55492: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55493: LD_ADDR_VAR 0 6
55497: PUSH
55498: LD_VAR 0 7
55502: PUSH
55503: LD_INT 1
55505: ARRAY
55506: PUSH
55507: LD_INT 3
55509: ARRAY
55510: ST_TO_ADDR
// if InArea ( x , y , area ) then
55511: LD_VAR 0 5
55515: PPUSH
55516: LD_VAR 0 6
55520: PPUSH
55521: LD_VAR 0 2
55525: PPUSH
55526: CALL_OW 309
55530: IFFALSE 55541
// ComStop ( unit ) ;
55532: LD_VAR 0 1
55536: PPUSH
55537: CALL_OW 141
// end ;
55541: LD_VAR 0 4
55545: RET
// export function Abs ( value ) ; begin
55546: LD_INT 0
55548: PPUSH
// result := value ;
55549: LD_ADDR_VAR 0 2
55553: PUSH
55554: LD_VAR 0 1
55558: ST_TO_ADDR
// if value < 0 then
55559: LD_VAR 0 1
55563: PUSH
55564: LD_INT 0
55566: LESS
55567: IFFALSE 55584
// result := value * - 1 ;
55569: LD_ADDR_VAR 0 2
55573: PUSH
55574: LD_VAR 0 1
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: MUL
55583: ST_TO_ADDR
// end ;
55584: LD_VAR 0 2
55588: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55589: LD_INT 0
55591: PPUSH
55592: PPUSH
55593: PPUSH
55594: PPUSH
55595: PPUSH
55596: PPUSH
55597: PPUSH
55598: PPUSH
// if not unit or not building then
55599: LD_VAR 0 1
55603: NOT
55604: PUSH
55605: LD_VAR 0 2
55609: NOT
55610: OR
55611: IFFALSE 55615
// exit ;
55613: GO 55841
// x := GetX ( building ) ;
55615: LD_ADDR_VAR 0 4
55619: PUSH
55620: LD_VAR 0 2
55624: PPUSH
55625: CALL_OW 250
55629: ST_TO_ADDR
// y := GetY ( building ) ;
55630: LD_ADDR_VAR 0 6
55634: PUSH
55635: LD_VAR 0 2
55639: PPUSH
55640: CALL_OW 251
55644: ST_TO_ADDR
// d := GetDir ( building ) ;
55645: LD_ADDR_VAR 0 8
55649: PUSH
55650: LD_VAR 0 2
55654: PPUSH
55655: CALL_OW 254
55659: ST_TO_ADDR
// r := 4 ;
55660: LD_ADDR_VAR 0 9
55664: PUSH
55665: LD_INT 4
55667: ST_TO_ADDR
// for i := 1 to 5 do
55668: LD_ADDR_VAR 0 10
55672: PUSH
55673: DOUBLE
55674: LD_INT 1
55676: DEC
55677: ST_TO_ADDR
55678: LD_INT 5
55680: PUSH
55681: FOR_TO
55682: IFFALSE 55839
// begin _x := ShiftX ( x , d , r + i ) ;
55684: LD_ADDR_VAR 0 5
55688: PUSH
55689: LD_VAR 0 4
55693: PPUSH
55694: LD_VAR 0 8
55698: PPUSH
55699: LD_VAR 0 9
55703: PUSH
55704: LD_VAR 0 10
55708: PLUS
55709: PPUSH
55710: CALL_OW 272
55714: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55715: LD_ADDR_VAR 0 7
55719: PUSH
55720: LD_VAR 0 6
55724: PPUSH
55725: LD_VAR 0 8
55729: PPUSH
55730: LD_VAR 0 9
55734: PUSH
55735: LD_VAR 0 10
55739: PLUS
55740: PPUSH
55741: CALL_OW 273
55745: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55746: LD_VAR 0 5
55750: PPUSH
55751: LD_VAR 0 7
55755: PPUSH
55756: CALL_OW 488
55760: PUSH
55761: LD_VAR 0 5
55765: PPUSH
55766: LD_VAR 0 7
55770: PPUSH
55771: CALL_OW 428
55775: PPUSH
55776: CALL_OW 247
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: IN
55791: NOT
55792: AND
55793: IFFALSE 55837
// begin ComMoveXY ( unit , _x , _y ) ;
55795: LD_VAR 0 1
55799: PPUSH
55800: LD_VAR 0 5
55804: PPUSH
55805: LD_VAR 0 7
55809: PPUSH
55810: CALL_OW 111
// result := [ _x , _y ] ;
55814: LD_ADDR_VAR 0 3
55818: PUSH
55819: LD_VAR 0 5
55823: PUSH
55824: LD_VAR 0 7
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: ST_TO_ADDR
// exit ;
55833: POP
55834: POP
55835: GO 55841
// end ; end ;
55837: GO 55681
55839: POP
55840: POP
// end ;
55841: LD_VAR 0 3
55845: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55846: LD_INT 0
55848: PPUSH
55849: PPUSH
55850: PPUSH
// result := 0 ;
55851: LD_ADDR_VAR 0 3
55855: PUSH
55856: LD_INT 0
55858: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55859: LD_VAR 0 1
55863: PUSH
55864: LD_INT 0
55866: LESS
55867: PUSH
55868: LD_VAR 0 1
55872: PUSH
55873: LD_INT 8
55875: GREATER
55876: OR
55877: PUSH
55878: LD_VAR 0 2
55882: PUSH
55883: LD_INT 0
55885: LESS
55886: OR
55887: PUSH
55888: LD_VAR 0 2
55892: PUSH
55893: LD_INT 8
55895: GREATER
55896: OR
55897: IFFALSE 55901
// exit ;
55899: GO 55976
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55901: LD_ADDR_VAR 0 4
55905: PUSH
55906: LD_INT 22
55908: PUSH
55909: LD_VAR 0 2
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PPUSH
55918: CALL_OW 69
55922: PUSH
55923: FOR_IN
55924: IFFALSE 55974
// begin un := UnitShoot ( i ) ;
55926: LD_ADDR_VAR 0 5
55930: PUSH
55931: LD_VAR 0 4
55935: PPUSH
55936: CALL_OW 504
55940: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55941: LD_VAR 0 5
55945: PPUSH
55946: CALL_OW 255
55950: PUSH
55951: LD_VAR 0 1
55955: EQUAL
55956: IFFALSE 55972
// begin result := un ;
55958: LD_ADDR_VAR 0 3
55962: PUSH
55963: LD_VAR 0 5
55967: ST_TO_ADDR
// exit ;
55968: POP
55969: POP
55970: GO 55976
// end ; end ;
55972: GO 55923
55974: POP
55975: POP
// end ;
55976: LD_VAR 0 3
55980: RET
// export function GetCargoBay ( units ) ; begin
55981: LD_INT 0
55983: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55984: LD_ADDR_VAR 0 2
55988: PUSH
55989: LD_VAR 0 1
55993: PPUSH
55994: LD_INT 2
55996: PUSH
55997: LD_INT 34
55999: PUSH
56000: LD_INT 12
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 34
56009: PUSH
56010: LD_INT 51
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 34
56019: PUSH
56020: LD_INT 32
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 34
56029: PUSH
56030: LD_EXP 14
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: PPUSH
56046: CALL_OW 72
56050: ST_TO_ADDR
// end ;
56051: LD_VAR 0 2
56055: RET
// export function Negate ( value ) ; begin
56056: LD_INT 0
56058: PPUSH
// result := not value ;
56059: LD_ADDR_VAR 0 2
56063: PUSH
56064: LD_VAR 0 1
56068: NOT
56069: ST_TO_ADDR
// end ;
56070: LD_VAR 0 2
56074: RET
// export function Inc ( value ) ; begin
56075: LD_INT 0
56077: PPUSH
// result := value + 1 ;
56078: LD_ADDR_VAR 0 2
56082: PUSH
56083: LD_VAR 0 1
56087: PUSH
56088: LD_INT 1
56090: PLUS
56091: ST_TO_ADDR
// end ;
56092: LD_VAR 0 2
56096: RET
// export function Dec ( value ) ; begin
56097: LD_INT 0
56099: PPUSH
// result := value - 1 ;
56100: LD_ADDR_VAR 0 2
56104: PUSH
56105: LD_VAR 0 1
56109: PUSH
56110: LD_INT 1
56112: MINUS
56113: ST_TO_ADDR
// end ;
56114: LD_VAR 0 2
56118: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56119: LD_INT 0
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
56125: PPUSH
56126: PPUSH
56127: PPUSH
56128: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56129: LD_VAR 0 1
56133: PPUSH
56134: LD_VAR 0 2
56138: PPUSH
56139: CALL_OW 488
56143: NOT
56144: PUSH
56145: LD_VAR 0 3
56149: PPUSH
56150: LD_VAR 0 4
56154: PPUSH
56155: CALL_OW 488
56159: NOT
56160: OR
56161: IFFALSE 56174
// begin result := - 1 ;
56163: LD_ADDR_VAR 0 5
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: ST_TO_ADDR
// exit ;
56172: GO 56409
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56174: LD_ADDR_VAR 0 12
56178: PUSH
56179: LD_VAR 0 1
56183: PPUSH
56184: LD_VAR 0 2
56188: PPUSH
56189: LD_VAR 0 3
56193: PPUSH
56194: LD_VAR 0 4
56198: PPUSH
56199: CALL 55257 0 4
56203: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56204: LD_ADDR_VAR 0 11
56208: PUSH
56209: LD_VAR 0 1
56213: PPUSH
56214: LD_VAR 0 2
56218: PPUSH
56219: LD_VAR 0 12
56223: PUSH
56224: LD_INT 1
56226: ARRAY
56227: PPUSH
56228: LD_VAR 0 12
56232: PUSH
56233: LD_INT 2
56235: ARRAY
56236: PPUSH
56237: CALL_OW 298
56241: ST_TO_ADDR
// distance := 9999 ;
56242: LD_ADDR_VAR 0 10
56246: PUSH
56247: LD_INT 9999
56249: ST_TO_ADDR
// for i := 0 to 5 do
56250: LD_ADDR_VAR 0 6
56254: PUSH
56255: DOUBLE
56256: LD_INT 0
56258: DEC
56259: ST_TO_ADDR
56260: LD_INT 5
56262: PUSH
56263: FOR_TO
56264: IFFALSE 56407
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56266: LD_ADDR_VAR 0 7
56270: PUSH
56271: LD_VAR 0 1
56275: PPUSH
56276: LD_VAR 0 6
56280: PPUSH
56281: LD_VAR 0 11
56285: PPUSH
56286: CALL_OW 272
56290: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56291: LD_ADDR_VAR 0 8
56295: PUSH
56296: LD_VAR 0 2
56300: PPUSH
56301: LD_VAR 0 6
56305: PPUSH
56306: LD_VAR 0 11
56310: PPUSH
56311: CALL_OW 273
56315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56316: LD_VAR 0 7
56320: PPUSH
56321: LD_VAR 0 8
56325: PPUSH
56326: CALL_OW 488
56330: NOT
56331: IFFALSE 56335
// continue ;
56333: GO 56263
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56335: LD_ADDR_VAR 0 9
56339: PUSH
56340: LD_VAR 0 12
56344: PUSH
56345: LD_INT 1
56347: ARRAY
56348: PPUSH
56349: LD_VAR 0 12
56353: PUSH
56354: LD_INT 2
56356: ARRAY
56357: PPUSH
56358: LD_VAR 0 7
56362: PPUSH
56363: LD_VAR 0 8
56367: PPUSH
56368: CALL_OW 298
56372: ST_TO_ADDR
// if tmp < distance then
56373: LD_VAR 0 9
56377: PUSH
56378: LD_VAR 0 10
56382: LESS
56383: IFFALSE 56405
// begin result := i ;
56385: LD_ADDR_VAR 0 5
56389: PUSH
56390: LD_VAR 0 6
56394: ST_TO_ADDR
// distance := tmp ;
56395: LD_ADDR_VAR 0 10
56399: PUSH
56400: LD_VAR 0 9
56404: ST_TO_ADDR
// end ; end ;
56405: GO 56263
56407: POP
56408: POP
// end ;
56409: LD_VAR 0 5
56413: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56414: LD_INT 0
56416: PPUSH
56417: PPUSH
// if not driver or not IsInUnit ( driver ) then
56418: LD_VAR 0 1
56422: NOT
56423: PUSH
56424: LD_VAR 0 1
56428: PPUSH
56429: CALL_OW 310
56433: NOT
56434: OR
56435: IFFALSE 56439
// exit ;
56437: GO 56529
// vehicle := IsInUnit ( driver ) ;
56439: LD_ADDR_VAR 0 3
56443: PUSH
56444: LD_VAR 0 1
56448: PPUSH
56449: CALL_OW 310
56453: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56454: LD_VAR 0 1
56458: PPUSH
56459: LD_STRING \
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: PUSH
56489: LD_STRING E
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: LD_VAR 0 3
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PPUSH
56525: CALL_OW 446
// end ;
56529: LD_VAR 0 2
56533: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56534: LD_INT 0
56536: PPUSH
56537: PPUSH
// if not driver or not IsInUnit ( driver ) then
56538: LD_VAR 0 1
56542: NOT
56543: PUSH
56544: LD_VAR 0 1
56548: PPUSH
56549: CALL_OW 310
56553: NOT
56554: OR
56555: IFFALSE 56559
// exit ;
56557: GO 56649
// vehicle := IsInUnit ( driver ) ;
56559: LD_ADDR_VAR 0 3
56563: PUSH
56564: LD_VAR 0 1
56568: PPUSH
56569: CALL_OW 310
56573: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56574: LD_VAR 0 1
56578: PPUSH
56579: LD_STRING \
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: PUSH
56609: LD_STRING E
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_VAR 0 3
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PPUSH
56645: CALL_OW 447
// end ;
56649: LD_VAR 0 2
56653: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56654: LD_INT 0
56656: PPUSH
56657: PPUSH
56658: PPUSH
// tmp := [ ] ;
56659: LD_ADDR_VAR 0 5
56663: PUSH
56664: EMPTY
56665: ST_TO_ADDR
// for i in units do
56666: LD_ADDR_VAR 0 4
56670: PUSH
56671: LD_VAR 0 1
56675: PUSH
56676: FOR_IN
56677: IFFALSE 56715
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56679: LD_ADDR_VAR 0 5
56683: PUSH
56684: LD_VAR 0 5
56688: PPUSH
56689: LD_VAR 0 5
56693: PUSH
56694: LD_INT 1
56696: PLUS
56697: PPUSH
56698: LD_VAR 0 4
56702: PPUSH
56703: CALL_OW 256
56707: PPUSH
56708: CALL_OW 2
56712: ST_TO_ADDR
56713: GO 56676
56715: POP
56716: POP
// if not tmp then
56717: LD_VAR 0 5
56721: NOT
56722: IFFALSE 56726
// exit ;
56724: GO 56774
// if asc then
56726: LD_VAR 0 2
56730: IFFALSE 56754
// result := SortListByListAsc ( units , tmp ) else
56732: LD_ADDR_VAR 0 3
56736: PUSH
56737: LD_VAR 0 1
56741: PPUSH
56742: LD_VAR 0 5
56746: PPUSH
56747: CALL_OW 76
56751: ST_TO_ADDR
56752: GO 56774
// result := SortListByListDesc ( units , tmp ) ;
56754: LD_ADDR_VAR 0 3
56758: PUSH
56759: LD_VAR 0 1
56763: PPUSH
56764: LD_VAR 0 5
56768: PPUSH
56769: CALL_OW 77
56773: ST_TO_ADDR
// end ;
56774: LD_VAR 0 3
56778: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56779: LD_INT 0
56781: PPUSH
56782: PPUSH
// task := GetTaskList ( mech ) ;
56783: LD_ADDR_VAR 0 4
56787: PUSH
56788: LD_VAR 0 1
56792: PPUSH
56793: CALL_OW 437
56797: ST_TO_ADDR
// if not task then
56798: LD_VAR 0 4
56802: NOT
56803: IFFALSE 56807
// exit ;
56805: GO 56849
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56807: LD_ADDR_VAR 0 3
56811: PUSH
56812: LD_VAR 0 4
56816: PUSH
56817: LD_INT 1
56819: ARRAY
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PUSH
56825: LD_STRING r
56827: EQUAL
56828: PUSH
56829: LD_VAR 0 4
56833: PUSH
56834: LD_INT 1
56836: ARRAY
56837: PUSH
56838: LD_INT 4
56840: ARRAY
56841: PUSH
56842: LD_VAR 0 2
56846: EQUAL
56847: AND
56848: ST_TO_ADDR
// end ;
56849: LD_VAR 0 3
56853: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56854: LD_INT 0
56856: PPUSH
// SetDir ( unit , d ) ;
56857: LD_VAR 0 1
56861: PPUSH
56862: LD_VAR 0 4
56866: PPUSH
56867: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56871: LD_VAR 0 1
56875: PPUSH
56876: LD_VAR 0 2
56880: PPUSH
56881: LD_VAR 0 3
56885: PPUSH
56886: LD_VAR 0 5
56890: PPUSH
56891: CALL_OW 48
// end ;
56895: LD_VAR 0 6
56899: RET
// export function ToNaturalNumber ( number ) ; begin
56900: LD_INT 0
56902: PPUSH
// result := number div 1 ;
56903: LD_ADDR_VAR 0 2
56907: PUSH
56908: LD_VAR 0 1
56912: PUSH
56913: LD_INT 1
56915: DIV
56916: ST_TO_ADDR
// if number < 0 then
56917: LD_VAR 0 1
56921: PUSH
56922: LD_INT 0
56924: LESS
56925: IFFALSE 56935
// result := 0 ;
56927: LD_ADDR_VAR 0 2
56931: PUSH
56932: LD_INT 0
56934: ST_TO_ADDR
// end ;
56935: LD_VAR 0 2
56939: RET
// export function SortByClass ( units , class ) ; var un ; begin
56940: LD_INT 0
56942: PPUSH
56943: PPUSH
// if not units or not class then
56944: LD_VAR 0 1
56948: NOT
56949: PUSH
56950: LD_VAR 0 2
56954: NOT
56955: OR
56956: IFFALSE 56960
// exit ;
56958: GO 57055
// result := [ ] ;
56960: LD_ADDR_VAR 0 3
56964: PUSH
56965: EMPTY
56966: ST_TO_ADDR
// for un in units do
56967: LD_ADDR_VAR 0 4
56971: PUSH
56972: LD_VAR 0 1
56976: PUSH
56977: FOR_IN
56978: IFFALSE 57053
// if GetClass ( un ) = class then
56980: LD_VAR 0 4
56984: PPUSH
56985: CALL_OW 257
56989: PUSH
56990: LD_VAR 0 2
56994: EQUAL
56995: IFFALSE 57022
// result := Insert ( result , 1 , un ) else
56997: LD_ADDR_VAR 0 3
57001: PUSH
57002: LD_VAR 0 3
57006: PPUSH
57007: LD_INT 1
57009: PPUSH
57010: LD_VAR 0 4
57014: PPUSH
57015: CALL_OW 2
57019: ST_TO_ADDR
57020: GO 57051
// result := Replace ( result , result + 1 , un ) ;
57022: LD_ADDR_VAR 0 3
57026: PUSH
57027: LD_VAR 0 3
57031: PPUSH
57032: LD_VAR 0 3
57036: PUSH
57037: LD_INT 1
57039: PLUS
57040: PPUSH
57041: LD_VAR 0 4
57045: PPUSH
57046: CALL_OW 1
57050: ST_TO_ADDR
57051: GO 56977
57053: POP
57054: POP
// end ;
57055: LD_VAR 0 3
57059: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57060: LD_INT 0
57062: PPUSH
57063: PPUSH
57064: PPUSH
57065: PPUSH
57066: PPUSH
57067: PPUSH
57068: PPUSH
// result := [ ] ;
57069: LD_ADDR_VAR 0 4
57073: PUSH
57074: EMPTY
57075: ST_TO_ADDR
// if x - r < 0 then
57076: LD_VAR 0 1
57080: PUSH
57081: LD_VAR 0 3
57085: MINUS
57086: PUSH
57087: LD_INT 0
57089: LESS
57090: IFFALSE 57102
// min_x := 0 else
57092: LD_ADDR_VAR 0 8
57096: PUSH
57097: LD_INT 0
57099: ST_TO_ADDR
57100: GO 57118
// min_x := x - r ;
57102: LD_ADDR_VAR 0 8
57106: PUSH
57107: LD_VAR 0 1
57111: PUSH
57112: LD_VAR 0 3
57116: MINUS
57117: ST_TO_ADDR
// if y - r < 0 then
57118: LD_VAR 0 2
57122: PUSH
57123: LD_VAR 0 3
57127: MINUS
57128: PUSH
57129: LD_INT 0
57131: LESS
57132: IFFALSE 57144
// min_y := 0 else
57134: LD_ADDR_VAR 0 7
57138: PUSH
57139: LD_INT 0
57141: ST_TO_ADDR
57142: GO 57160
// min_y := y - r ;
57144: LD_ADDR_VAR 0 7
57148: PUSH
57149: LD_VAR 0 2
57153: PUSH
57154: LD_VAR 0 3
57158: MINUS
57159: ST_TO_ADDR
// max_x := x + r ;
57160: LD_ADDR_VAR 0 9
57164: PUSH
57165: LD_VAR 0 1
57169: PUSH
57170: LD_VAR 0 3
57174: PLUS
57175: ST_TO_ADDR
// max_y := y + r ;
57176: LD_ADDR_VAR 0 10
57180: PUSH
57181: LD_VAR 0 2
57185: PUSH
57186: LD_VAR 0 3
57190: PLUS
57191: ST_TO_ADDR
// for _x = min_x to max_x do
57192: LD_ADDR_VAR 0 5
57196: PUSH
57197: DOUBLE
57198: LD_VAR 0 8
57202: DEC
57203: ST_TO_ADDR
57204: LD_VAR 0 9
57208: PUSH
57209: FOR_TO
57210: IFFALSE 57311
// for _y = min_y to max_y do
57212: LD_ADDR_VAR 0 6
57216: PUSH
57217: DOUBLE
57218: LD_VAR 0 7
57222: DEC
57223: ST_TO_ADDR
57224: LD_VAR 0 10
57228: PUSH
57229: FOR_TO
57230: IFFALSE 57307
// begin if not ValidHex ( _x , _y ) then
57232: LD_VAR 0 5
57236: PPUSH
57237: LD_VAR 0 6
57241: PPUSH
57242: CALL_OW 488
57246: NOT
57247: IFFALSE 57251
// continue ;
57249: GO 57229
// if GetResourceTypeXY ( _x , _y ) then
57251: LD_VAR 0 5
57255: PPUSH
57256: LD_VAR 0 6
57260: PPUSH
57261: CALL_OW 283
57265: IFFALSE 57305
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57267: LD_ADDR_VAR 0 4
57271: PUSH
57272: LD_VAR 0 4
57276: PPUSH
57277: LD_VAR 0 4
57281: PUSH
57282: LD_INT 1
57284: PLUS
57285: PPUSH
57286: LD_VAR 0 5
57290: PUSH
57291: LD_VAR 0 6
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PPUSH
57300: CALL_OW 1
57304: ST_TO_ADDR
// end ;
57305: GO 57229
57307: POP
57308: POP
57309: GO 57209
57311: POP
57312: POP
// end ;
57313: LD_VAR 0 4
57317: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57318: LD_INT 0
57320: PPUSH
57321: PPUSH
57322: PPUSH
57323: PPUSH
57324: PPUSH
57325: PPUSH
57326: PPUSH
57327: PPUSH
// if not units then
57328: LD_VAR 0 1
57332: NOT
57333: IFFALSE 57337
// exit ;
57335: GO 57762
// result := UnitFilter ( units , [ f_ok ] ) ;
57337: LD_ADDR_VAR 0 3
57341: PUSH
57342: LD_VAR 0 1
57346: PPUSH
57347: LD_INT 50
57349: PUSH
57350: EMPTY
57351: LIST
57352: PPUSH
57353: CALL_OW 72
57357: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57358: LD_ADDR_VAR 0 8
57362: PUSH
57363: LD_VAR 0 1
57367: PUSH
57368: LD_INT 1
57370: ARRAY
57371: PPUSH
57372: CALL_OW 255
57376: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
57377: LD_ADDR_VAR 0 10
57381: PUSH
57382: LD_INT 29
57384: PUSH
57385: LD_EXP 17
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: ST_TO_ADDR
// if not result then
57394: LD_VAR 0 3
57398: NOT
57399: IFFALSE 57403
// exit ;
57401: GO 57762
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57403: LD_ADDR_VAR 0 5
57407: PUSH
57408: LD_INT 81
57410: PUSH
57411: LD_VAR 0 8
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PPUSH
57420: CALL_OW 69
57424: ST_TO_ADDR
// for i in result do
57425: LD_ADDR_VAR 0 4
57429: PUSH
57430: LD_VAR 0 3
57434: PUSH
57435: FOR_IN
57436: IFFALSE 57760
// begin tag := GetTag ( i ) + 1 ;
57438: LD_ADDR_VAR 0 9
57442: PUSH
57443: LD_VAR 0 4
57447: PPUSH
57448: CALL_OW 110
57452: PUSH
57453: LD_INT 1
57455: PLUS
57456: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57457: LD_ADDR_VAR 0 7
57461: PUSH
57462: LD_VAR 0 4
57466: PPUSH
57467: CALL_OW 250
57471: PPUSH
57472: LD_VAR 0 4
57476: PPUSH
57477: CALL_OW 251
57481: PPUSH
57482: LD_INT 6
57484: PPUSH
57485: CALL 57060 0 3
57489: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57490: LD_VAR 0 7
57494: PUSH
57495: LD_VAR 0 4
57499: PPUSH
57500: CALL_OW 264
57504: PUSH
57505: LD_VAR 0 10
57509: IN
57510: NOT
57511: AND
57512: IFFALSE 57551
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57514: LD_VAR 0 4
57518: PPUSH
57519: LD_VAR 0 7
57523: PUSH
57524: LD_INT 1
57526: ARRAY
57527: PUSH
57528: LD_INT 1
57530: ARRAY
57531: PPUSH
57532: LD_VAR 0 7
57536: PUSH
57537: LD_INT 1
57539: ARRAY
57540: PUSH
57541: LD_INT 2
57543: ARRAY
57544: PPUSH
57545: CALL_OW 116
57549: GO 57758
// if path > tag then
57551: LD_VAR 0 2
57555: PUSH
57556: LD_VAR 0 9
57560: GREATER
57561: IFFALSE 57728
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
57563: LD_ADDR_VAR 0 6
57567: PUSH
57568: LD_VAR 0 5
57572: PPUSH
57573: LD_INT 91
57575: PUSH
57576: LD_VAR 0 4
57580: PUSH
57581: LD_INT 12
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: PPUSH
57589: CALL_OW 72
57593: ST_TO_ADDR
// if nearEnemy then
57594: LD_VAR 0 6
57598: IFFALSE 57626
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57600: LD_VAR 0 4
57604: PPUSH
57605: LD_VAR 0 6
57609: PPUSH
57610: LD_VAR 0 4
57614: PPUSH
57615: CALL_OW 74
57619: PPUSH
57620: CALL_OW 115
57624: GO 57726
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57626: LD_VAR 0 4
57630: PPUSH
57631: LD_VAR 0 2
57635: PUSH
57636: LD_VAR 0 9
57640: ARRAY
57641: PUSH
57642: LD_INT 1
57644: ARRAY
57645: PPUSH
57646: LD_VAR 0 2
57650: PUSH
57651: LD_VAR 0 9
57655: ARRAY
57656: PUSH
57657: LD_INT 2
57659: ARRAY
57660: PPUSH
57661: CALL_OW 297
57665: PUSH
57666: LD_INT 6
57668: GREATER
57669: IFFALSE 57712
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57671: LD_VAR 0 4
57675: PPUSH
57676: LD_VAR 0 2
57680: PUSH
57681: LD_VAR 0 9
57685: ARRAY
57686: PUSH
57687: LD_INT 1
57689: ARRAY
57690: PPUSH
57691: LD_VAR 0 2
57695: PUSH
57696: LD_VAR 0 9
57700: ARRAY
57701: PUSH
57702: LD_INT 2
57704: ARRAY
57705: PPUSH
57706: CALL_OW 114
57710: GO 57726
// SetTag ( i , tag ) ;
57712: LD_VAR 0 4
57716: PPUSH
57717: LD_VAR 0 9
57721: PPUSH
57722: CALL_OW 109
// end else
57726: GO 57758
// if enemy then
57728: LD_VAR 0 5
57732: IFFALSE 57758
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57734: LD_VAR 0 4
57738: PPUSH
57739: LD_VAR 0 5
57743: PPUSH
57744: LD_VAR 0 4
57748: PPUSH
57749: CALL_OW 74
57753: PPUSH
57754: CALL_OW 115
// end ;
57758: GO 57435
57760: POP
57761: POP
// end ;
57762: LD_VAR 0 3
57766: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57767: LD_INT 0
57769: PPUSH
57770: PPUSH
57771: PPUSH
// if not unit or IsInUnit ( unit ) then
57772: LD_VAR 0 1
57776: NOT
57777: PUSH
57778: LD_VAR 0 1
57782: PPUSH
57783: CALL_OW 310
57787: OR
57788: IFFALSE 57792
// exit ;
57790: GO 57883
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57792: LD_ADDR_VAR 0 4
57796: PUSH
57797: LD_VAR 0 1
57801: PPUSH
57802: CALL_OW 250
57806: PPUSH
57807: LD_VAR 0 2
57811: PPUSH
57812: LD_INT 1
57814: PPUSH
57815: CALL_OW 272
57819: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57820: LD_ADDR_VAR 0 5
57824: PUSH
57825: LD_VAR 0 1
57829: PPUSH
57830: CALL_OW 251
57834: PPUSH
57835: LD_VAR 0 2
57839: PPUSH
57840: LD_INT 1
57842: PPUSH
57843: CALL_OW 273
57847: ST_TO_ADDR
// if ValidHex ( x , y ) then
57848: LD_VAR 0 4
57852: PPUSH
57853: LD_VAR 0 5
57857: PPUSH
57858: CALL_OW 488
57862: IFFALSE 57883
// ComTurnXY ( unit , x , y ) ;
57864: LD_VAR 0 1
57868: PPUSH
57869: LD_VAR 0 4
57873: PPUSH
57874: LD_VAR 0 5
57878: PPUSH
57879: CALL_OW 118
// end ;
57883: LD_VAR 0 3
57887: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57888: LD_INT 0
57890: PPUSH
57891: PPUSH
// result := false ;
57892: LD_ADDR_VAR 0 3
57896: PUSH
57897: LD_INT 0
57899: ST_TO_ADDR
// if not units then
57900: LD_VAR 0 2
57904: NOT
57905: IFFALSE 57909
// exit ;
57907: GO 57954
// for i in units do
57909: LD_ADDR_VAR 0 4
57913: PUSH
57914: LD_VAR 0 2
57918: PUSH
57919: FOR_IN
57920: IFFALSE 57952
// if See ( side , i ) then
57922: LD_VAR 0 1
57926: PPUSH
57927: LD_VAR 0 4
57931: PPUSH
57932: CALL_OW 292
57936: IFFALSE 57950
// begin result := true ;
57938: LD_ADDR_VAR 0 3
57942: PUSH
57943: LD_INT 1
57945: ST_TO_ADDR
// exit ;
57946: POP
57947: POP
57948: GO 57954
// end ;
57950: GO 57919
57952: POP
57953: POP
// end ;
57954: LD_VAR 0 3
57958: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57959: LD_INT 0
57961: PPUSH
57962: PPUSH
57963: PPUSH
57964: PPUSH
// if not unit or not points then
57965: LD_VAR 0 1
57969: NOT
57970: PUSH
57971: LD_VAR 0 2
57975: NOT
57976: OR
57977: IFFALSE 57981
// exit ;
57979: GO 58071
// dist := 99999 ;
57981: LD_ADDR_VAR 0 5
57985: PUSH
57986: LD_INT 99999
57988: ST_TO_ADDR
// for i in points do
57989: LD_ADDR_VAR 0 4
57993: PUSH
57994: LD_VAR 0 2
57998: PUSH
57999: FOR_IN
58000: IFFALSE 58069
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58002: LD_ADDR_VAR 0 6
58006: PUSH
58007: LD_VAR 0 1
58011: PPUSH
58012: LD_VAR 0 4
58016: PUSH
58017: LD_INT 1
58019: ARRAY
58020: PPUSH
58021: LD_VAR 0 4
58025: PUSH
58026: LD_INT 2
58028: ARRAY
58029: PPUSH
58030: CALL_OW 297
58034: ST_TO_ADDR
// if tmpDist < dist then
58035: LD_VAR 0 6
58039: PUSH
58040: LD_VAR 0 5
58044: LESS
58045: IFFALSE 58067
// begin result := i ;
58047: LD_ADDR_VAR 0 3
58051: PUSH
58052: LD_VAR 0 4
58056: ST_TO_ADDR
// dist := tmpDist ;
58057: LD_ADDR_VAR 0 5
58061: PUSH
58062: LD_VAR 0 6
58066: ST_TO_ADDR
// end ; end ;
58067: GO 57999
58069: POP
58070: POP
// end ;
58071: LD_VAR 0 3
58075: RET
