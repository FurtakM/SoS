// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_EXP 17
  25: EQUAL
  26: IFFALSE 98
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  28: LD_INT 68
  30: PPUSH
  31: LD_VAR 0 1
  35: PPUSH
  36: CALL_OW 255
  40: PPUSH
  41: CALL_OW 321
  45: PUSH
  46: LD_INT 2
  48: EQUAL
  49: IFFALSE 61
// eff := 70 else
  51: LD_ADDR_VAR 0 4
  55: PUSH
  56: LD_INT 70
  58: ST_TO_ADDR
  59: GO 69
// eff := 30 ;
  61: LD_ADDR_VAR 0 4
  65: PUSH
  66: LD_INT 30
  68: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  69: LD_VAR 0 1
  73: PPUSH
  74: CALL_OW 250
  78: PPUSH
  79: LD_VAR 0 1
  83: PPUSH
  84: CALL_OW 251
  88: PPUSH
  89: LD_VAR 0 4
  93: PPUSH
  94: CALL_OW 495
// end ; end ;
  98: LD_VAR 0 2
 102: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 103: LD_INT 0
 105: PPUSH
// end ;
 106: LD_VAR 0 4
 110: RET
// export function SOS_Command ( cmd ) ; begin
 111: LD_INT 0
 113: PPUSH
// end ;
 114: LD_VAR 0 2
 118: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
 119: LD_INT 0
 121: PPUSH
// if cmd = 121 then
 122: LD_VAR 0 1
 126: PUSH
 127: LD_INT 121
 129: EQUAL
 130: IFFALSE 132
// end ;
 132: LD_VAR 0 6
 136: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 137: LD_INT 0
 139: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 140: LD_VAR 0 1
 144: PUSH
 145: LD_INT 250
 147: EQUAL
 148: PUSH
 149: LD_VAR 0 2
 153: PPUSH
 154: CALL_OW 264
 158: PUSH
 159: LD_EXP 20
 163: EQUAL
 164: AND
 165: IFFALSE 186
// MinerPlaceMine ( unit , x , y ) ;
 167: LD_VAR 0 2
 171: PPUSH
 172: LD_VAR 0 4
 176: PPUSH
 177: LD_VAR 0 5
 181: PPUSH
 182: CALL 2535 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 186: LD_VAR 0 1
 190: PUSH
 191: LD_INT 251
 193: EQUAL
 194: PUSH
 195: LD_VAR 0 2
 199: PPUSH
 200: CALL_OW 264
 204: PUSH
 205: LD_EXP 20
 209: EQUAL
 210: AND
 211: IFFALSE 232
// MinerDetonateMine ( unit , x , y ) ;
 213: LD_VAR 0 2
 217: PPUSH
 218: LD_VAR 0 4
 222: PPUSH
 223: LD_VAR 0 5
 227: PPUSH
 228: CALL 2812 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 232: LD_VAR 0 1
 236: PUSH
 237: LD_INT 252
 239: EQUAL
 240: PUSH
 241: LD_VAR 0 2
 245: PPUSH
 246: CALL_OW 264
 250: PUSH
 251: LD_EXP 20
 255: EQUAL
 256: AND
 257: IFFALSE 278
// MinerCreateMinefield ( unit , x , y ) ;
 259: LD_VAR 0 2
 263: PPUSH
 264: LD_VAR 0 4
 268: PPUSH
 269: LD_VAR 0 5
 273: PPUSH
 274: CALL 3229 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 278: LD_VAR 0 1
 282: PUSH
 283: LD_INT 253
 285: EQUAL
 286: PUSH
 287: LD_VAR 0 2
 291: PPUSH
 292: CALL_OW 257
 296: PUSH
 297: LD_INT 5
 299: EQUAL
 300: AND
 301: IFFALSE 322
// ComBinocular ( unit , x , y ) ;
 303: LD_VAR 0 2
 307: PPUSH
 308: LD_VAR 0 4
 312: PPUSH
 313: LD_VAR 0 5
 317: PPUSH
 318: CALL 3600 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 322: LD_VAR 0 1
 326: PUSH
 327: LD_INT 254
 329: EQUAL
 330: PUSH
 331: LD_VAR 0 2
 335: PPUSH
 336: CALL_OW 264
 340: PUSH
 341: LD_EXP 15
 345: EQUAL
 346: AND
 347: PUSH
 348: LD_VAR 0 3
 352: PPUSH
 353: CALL_OW 263
 357: PUSH
 358: LD_INT 3
 360: EQUAL
 361: AND
 362: IFFALSE 378
// HackDestroyVehicle ( unit , selectedUnit ) ;
 364: LD_VAR 0 2
 368: PPUSH
 369: LD_VAR 0 3
 373: PPUSH
 374: CALL 1895 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 378: LD_VAR 0 1
 382: PUSH
 383: LD_INT 255
 385: EQUAL
 386: PUSH
 387: LD_VAR 0 2
 391: PPUSH
 392: CALL_OW 264
 396: PUSH
 397: LD_INT 14
 399: PUSH
 400: LD_INT 53
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: IN
 407: AND
 408: PUSH
 409: LD_VAR 0 4
 413: PPUSH
 414: LD_VAR 0 5
 418: PPUSH
 419: CALL_OW 488
 423: AND
 424: IFFALSE 448
// CutTreeXYR ( unit , x , y , 12 ) ;
 426: LD_VAR 0 2
 430: PPUSH
 431: LD_VAR 0 4
 435: PPUSH
 436: LD_VAR 0 5
 440: PPUSH
 441: LD_INT 12
 443: PPUSH
 444: CALL 461 0 4
// end ;
 448: LD_VAR 0 6
 452: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
 453: LD_INT 0
 455: PPUSH
// end ;
 456: LD_VAR 0 4
 460: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 461: LD_INT 0
 463: PPUSH
 464: PPUSH
 465: PPUSH
 466: PPUSH
 467: PPUSH
 468: PPUSH
 469: PPUSH
 470: PPUSH
 471: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 472: LD_VAR 0 1
 476: NOT
 477: PUSH
 478: LD_VAR 0 2
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL_OW 488
 492: NOT
 493: OR
 494: PUSH
 495: LD_VAR 0 4
 499: NOT
 500: OR
 501: IFFALSE 505
// exit ;
 503: GO 845
// list := [ ] ;
 505: LD_ADDR_VAR 0 13
 509: PUSH
 510: EMPTY
 511: ST_TO_ADDR
// if x - r < 0 then
 512: LD_VAR 0 2
 516: PUSH
 517: LD_VAR 0 4
 521: MINUS
 522: PUSH
 523: LD_INT 0
 525: LESS
 526: IFFALSE 538
// min_x := 0 else
 528: LD_ADDR_VAR 0 7
 532: PUSH
 533: LD_INT 0
 535: ST_TO_ADDR
 536: GO 554
// min_x := x - r ;
 538: LD_ADDR_VAR 0 7
 542: PUSH
 543: LD_VAR 0 2
 547: PUSH
 548: LD_VAR 0 4
 552: MINUS
 553: ST_TO_ADDR
// if y - r < 0 then
 554: LD_VAR 0 3
 558: PUSH
 559: LD_VAR 0 4
 563: MINUS
 564: PUSH
 565: LD_INT 0
 567: LESS
 568: IFFALSE 580
// min_y := 0 else
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: LD_INT 0
 577: ST_TO_ADDR
 578: GO 596
// min_y := y - r ;
 580: LD_ADDR_VAR 0 8
 584: PUSH
 585: LD_VAR 0 3
 589: PUSH
 590: LD_VAR 0 4
 594: MINUS
 595: ST_TO_ADDR
// max_x := x + r ;
 596: LD_ADDR_VAR 0 9
 600: PUSH
 601: LD_VAR 0 2
 605: PUSH
 606: LD_VAR 0 4
 610: PLUS
 611: ST_TO_ADDR
// max_y := y + r ;
 612: LD_ADDR_VAR 0 10
 616: PUSH
 617: LD_VAR 0 3
 621: PUSH
 622: LD_VAR 0 4
 626: PLUS
 627: ST_TO_ADDR
// for _x = min_x to max_x do
 628: LD_ADDR_VAR 0 11
 632: PUSH
 633: DOUBLE
 634: LD_VAR 0 7
 638: DEC
 639: ST_TO_ADDR
 640: LD_VAR 0 9
 644: PUSH
 645: FOR_TO
 646: IFFALSE 763
// for _y = min_y to max_y do
 648: LD_ADDR_VAR 0 12
 652: PUSH
 653: DOUBLE
 654: LD_VAR 0 8
 658: DEC
 659: ST_TO_ADDR
 660: LD_VAR 0 10
 664: PUSH
 665: FOR_TO
 666: IFFALSE 759
// begin if not ValidHex ( _x , _y ) then
 668: LD_VAR 0 11
 672: PPUSH
 673: LD_VAR 0 12
 677: PPUSH
 678: CALL_OW 488
 682: NOT
 683: IFFALSE 687
// continue ;
 685: GO 665
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 687: LD_VAR 0 11
 691: PPUSH
 692: LD_VAR 0 12
 696: PPUSH
 697: CALL_OW 351
 701: PUSH
 702: LD_VAR 0 11
 706: PPUSH
 707: LD_VAR 0 12
 711: PPUSH
 712: CALL_OW 554
 716: AND
 717: IFFALSE 757
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
 719: LD_ADDR_VAR 0 13
 723: PUSH
 724: LD_VAR 0 13
 728: PPUSH
 729: LD_VAR 0 13
 733: PUSH
 734: LD_INT 1
 736: PLUS
 737: PPUSH
 738: LD_VAR 0 11
 742: PUSH
 743: LD_VAR 0 12
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PPUSH
 752: CALL_OW 2
 756: ST_TO_ADDR
// end ;
 757: GO 665
 759: POP
 760: POP
 761: GO 645
 763: POP
 764: POP
// if not list then
 765: LD_VAR 0 13
 769: NOT
 770: IFFALSE 774
// exit ;
 772: GO 845
// for i in list do
 774: LD_ADDR_VAR 0 6
 778: PUSH
 779: LD_VAR 0 13
 783: PUSH
 784: FOR_IN
 785: IFFALSE 843
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: LD_STRING M
 794: PUSH
 795: LD_VAR 0 6
 799: PUSH
 800: LD_INT 1
 802: ARRAY
 803: PUSH
 804: LD_VAR 0 6
 808: PUSH
 809: LD_INT 2
 811: ARRAY
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: PPUSH
 837: CALL_OW 447
 841: GO 784
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 5
 849: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
 850: LD_EXP 3
 854: NOT
 855: IFFALSE 905
 857: GO 859
 859: DISABLE
// begin initHack := true ;
 860: LD_ADDR_EXP 3
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// hackTanks := [ ] ;
 868: LD_ADDR_EXP 4
 872: PUSH
 873: EMPTY
 874: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
 875: LD_ADDR_EXP 5
 879: PUSH
 880: EMPTY
 881: ST_TO_ADDR
// hackLimit := 3 ;
 882: LD_ADDR_EXP 6
 886: PUSH
 887: LD_INT 3
 889: ST_TO_ADDR
// hackDist := 12 ;
 890: LD_ADDR_EXP 7
 894: PUSH
 895: LD_INT 12
 897: ST_TO_ADDR
// hackCounter := [ ] ;
 898: LD_ADDR_EXP 8
 902: PUSH
 903: EMPTY
 904: ST_TO_ADDR
// end ;
 905: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
 906: LD_EXP 3
 910: PUSH
 911: LD_INT 34
 913: PUSH
 914: LD_EXP 15
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PPUSH
 923: CALL_OW 69
 927: AND
 928: IFFALSE 1183
 930: GO 932
 932: DISABLE
 933: LD_INT 0
 935: PPUSH
 936: PPUSH
// begin enable ;
 937: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
 938: LD_ADDR_VAR 0 1
 942: PUSH
 943: LD_INT 34
 945: PUSH
 946: LD_EXP 15
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: PUSH
 960: FOR_IN
 961: IFFALSE 1181
// begin if not i in hackTanks then
 963: LD_VAR 0 1
 967: PUSH
 968: LD_EXP 4
 972: IN
 973: NOT
 974: IFFALSE 1057
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
 976: LD_ADDR_EXP 4
 980: PUSH
 981: LD_EXP 4
 985: PPUSH
 986: LD_EXP 4
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: PPUSH
 995: LD_VAR 0 1
 999: PPUSH
1000: CALL_OW 1
1004: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
1005: LD_ADDR_EXP 5
1009: PUSH
1010: LD_EXP 5
1014: PPUSH
1015: LD_EXP 5
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: PPUSH
1024: EMPTY
1025: PPUSH
1026: CALL_OW 1
1030: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1031: LD_ADDR_EXP 8
1035: PUSH
1036: LD_EXP 8
1040: PPUSH
1041: LD_EXP 8
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: PPUSH
1050: EMPTY
1051: PPUSH
1052: CALL_OW 1
1056: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1057: LD_VAR 0 1
1061: PPUSH
1062: CALL_OW 302
1066: NOT
1067: IFFALSE 1080
// begin HackUnlinkAll ( i ) ;
1069: LD_VAR 0 1
1073: PPUSH
1074: CALL 1186 0 1
// continue ;
1078: GO 960
// end ; HackCheckCapturedStatus ( i ) ;
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL 1629 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1089: LD_ADDR_VAR 0 2
1093: PUSH
1094: LD_INT 81
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 255
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 33
1113: PUSH
1114: LD_INT 3
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 91
1123: PUSH
1124: LD_VAR 0 1
1128: PUSH
1129: LD_EXP 7
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_INT 50
1141: PUSH
1142: EMPTY
1143: LIST
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// if not tmp then
1156: LD_VAR 0 2
1160: NOT
1161: IFFALSE 1165
// continue ;
1163: GO 960
// HackLink ( i , tmp ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 2
1174: PPUSH
1175: CALL 1322 0 2
// end ;
1179: GO 960
1181: POP
1182: POP
// end ;
1183: PPOPN 2
1185: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1186: LD_INT 0
1188: PPUSH
1189: PPUSH
1190: PPUSH
// if not hack in hackTanks then
1191: LD_VAR 0 1
1195: PUSH
1196: LD_EXP 4
1200: IN
1201: NOT
1202: IFFALSE 1206
// exit ;
1204: GO 1317
// index := GetElementIndex ( hackTanks , hack ) ;
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_EXP 4
1215: PPUSH
1216: LD_VAR 0 1
1220: PPUSH
1221: CALL 22131 0 2
1225: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1226: LD_EXP 5
1230: PUSH
1231: LD_VAR 0 4
1235: ARRAY
1236: IFFALSE 1317
// begin for i in hackTanksCaptured [ index ] do
1238: LD_ADDR_VAR 0 3
1242: PUSH
1243: LD_EXP 5
1247: PUSH
1248: LD_VAR 0 4
1252: ARRAY
1253: PUSH
1254: FOR_IN
1255: IFFALSE 1281
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1257: LD_VAR 0 3
1261: PUSH
1262: LD_INT 1
1264: ARRAY
1265: PPUSH
1266: LD_VAR 0 3
1270: PUSH
1271: LD_INT 2
1273: ARRAY
1274: PPUSH
1275: CALL_OW 235
1279: GO 1254
1281: POP
1282: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1283: LD_ADDR_EXP 5
1287: PUSH
1288: LD_EXP 5
1292: PPUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: EMPTY
1299: PPUSH
1300: CALL_OW 1
1304: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1305: LD_VAR 0 1
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 505
// end ; end ;
1317: LD_VAR 0 2
1321: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1322: LD_INT 0
1324: PPUSH
1325: PPUSH
1326: PPUSH
// if not hack in hackTanks or not vehicles then
1327: LD_VAR 0 1
1331: PUSH
1332: LD_EXP 4
1336: IN
1337: NOT
1338: PUSH
1339: LD_VAR 0 2
1343: NOT
1344: OR
1345: IFFALSE 1349
// exit ;
1347: GO 1624
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: LD_VAR 0 1
1358: PPUSH
1359: LD_VAR 0 2
1363: PPUSH
1364: LD_INT 1
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 22781 0 4
1374: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1375: LD_ADDR_VAR 0 5
1379: PUSH
1380: LD_EXP 4
1384: PPUSH
1385: LD_VAR 0 1
1389: PPUSH
1390: CALL 22131 0 2
1394: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1395: LD_EXP 5
1399: PUSH
1400: LD_VAR 0 5
1404: ARRAY
1405: PUSH
1406: LD_EXP 6
1410: LESS
1411: IFFALSE 1600
// begin for i := 1 to vehicles do
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: DOUBLE
1419: LD_INT 1
1421: DEC
1422: ST_TO_ADDR
1423: LD_VAR 0 2
1427: PUSH
1428: FOR_TO
1429: IFFALSE 1598
// begin if hackTanksCaptured [ index ] = hackLimit then
1431: LD_EXP 5
1435: PUSH
1436: LD_VAR 0 5
1440: ARRAY
1441: PUSH
1442: LD_EXP 6
1446: EQUAL
1447: IFFALSE 1451
// break ;
1449: GO 1598
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1451: LD_ADDR_EXP 8
1455: PUSH
1456: LD_EXP 8
1460: PPUSH
1461: LD_VAR 0 5
1465: PPUSH
1466: LD_EXP 8
1470: PUSH
1471: LD_VAR 0 5
1475: ARRAY
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: PPUSH
1481: CALL_OW 1
1485: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1486: LD_ADDR_EXP 5
1490: PUSH
1491: LD_EXP 5
1495: PPUSH
1496: LD_VAR 0 5
1500: PUSH
1501: LD_EXP 5
1505: PUSH
1506: LD_VAR 0 5
1510: ARRAY
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: LD_VAR 0 2
1524: PUSH
1525: LD_VAR 0 4
1529: ARRAY
1530: PUSH
1531: LD_VAR 0 2
1535: PUSH
1536: LD_VAR 0 4
1540: ARRAY
1541: PPUSH
1542: CALL_OW 255
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PPUSH
1551: CALL 22346 0 3
1555: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1556: LD_VAR 0 2
1560: PUSH
1561: LD_VAR 0 4
1565: ARRAY
1566: PPUSH
1567: LD_VAR 0 1
1571: PPUSH
1572: CALL_OW 255
1576: PPUSH
1577: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1581: LD_VAR 0 2
1585: PUSH
1586: LD_VAR 0 4
1590: ARRAY
1591: PPUSH
1592: CALL_OW 141
// end ;
1596: GO 1428
1598: POP
1599: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1600: LD_VAR 0 1
1604: PPUSH
1605: LD_EXP 5
1609: PUSH
1610: LD_VAR 0 5
1614: ARRAY
1615: PUSH
1616: LD_INT 0
1618: PLUS
1619: PPUSH
1620: CALL_OW 505
// end ;
1624: LD_VAR 0 3
1628: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
// if not hack in hackTanks then
1635: LD_VAR 0 1
1639: PUSH
1640: LD_EXP 4
1644: IN
1645: NOT
1646: IFFALSE 1650
// exit ;
1648: GO 1890
// index := GetElementIndex ( hackTanks , hack ) ;
1650: LD_ADDR_VAR 0 4
1654: PUSH
1655: LD_EXP 4
1659: PPUSH
1660: LD_VAR 0 1
1664: PPUSH
1665: CALL 22131 0 2
1669: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1670: LD_ADDR_VAR 0 3
1674: PUSH
1675: DOUBLE
1676: LD_EXP 5
1680: PUSH
1681: LD_VAR 0 4
1685: ARRAY
1686: INC
1687: ST_TO_ADDR
1688: LD_INT 1
1690: PUSH
1691: FOR_DOWNTO
1692: IFFALSE 1864
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1694: LD_ADDR_VAR 0 5
1698: PUSH
1699: LD_EXP 5
1703: PUSH
1704: LD_VAR 0 4
1708: ARRAY
1709: PUSH
1710: LD_VAR 0 3
1714: ARRAY
1715: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1716: LD_VAR 0 5
1720: PUSH
1721: LD_INT 1
1723: ARRAY
1724: PPUSH
1725: CALL_OW 302
1729: NOT
1730: PUSH
1731: LD_VAR 0 5
1735: PUSH
1736: LD_INT 1
1738: ARRAY
1739: PPUSH
1740: CALL_OW 255
1744: PUSH
1745: LD_VAR 0 1
1749: PPUSH
1750: CALL_OW 255
1754: NONEQUAL
1755: OR
1756: IFFALSE 1862
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
1758: LD_VAR 0 5
1762: PUSH
1763: LD_INT 1
1765: ARRAY
1766: PPUSH
1767: CALL_OW 305
1771: PUSH
1772: LD_VAR 0 5
1776: PUSH
1777: LD_INT 1
1779: ARRAY
1780: PPUSH
1781: CALL_OW 255
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: CALL_OW 255
1795: EQUAL
1796: AND
1797: IFFALSE 1821
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
1799: LD_VAR 0 5
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PPUSH
1808: LD_VAR 0 5
1812: PUSH
1813: LD_INT 2
1815: ARRAY
1816: PPUSH
1817: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
1821: LD_ADDR_EXP 5
1825: PUSH
1826: LD_EXP 5
1830: PPUSH
1831: LD_VAR 0 4
1835: PPUSH
1836: LD_EXP 5
1840: PUSH
1841: LD_VAR 0 4
1845: ARRAY
1846: PPUSH
1847: LD_VAR 0 3
1851: PPUSH
1852: CALL_OW 3
1856: PPUSH
1857: CALL_OW 1
1861: ST_TO_ADDR
// end ; end ;
1862: GO 1691
1864: POP
1865: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1866: LD_VAR 0 1
1870: PPUSH
1871: LD_EXP 5
1875: PUSH
1876: LD_VAR 0 4
1880: ARRAY
1881: PUSH
1882: LD_INT 0
1884: PLUS
1885: PPUSH
1886: CALL_OW 505
// end ;
1890: LD_VAR 0 2
1894: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
1895: LD_INT 0
1897: PPUSH
1898: PPUSH
1899: PPUSH
1900: PPUSH
// if not hack in hackTanks then
1901: LD_VAR 0 1
1905: PUSH
1906: LD_EXP 4
1910: IN
1911: NOT
1912: IFFALSE 1916
// exit ;
1914: GO 2001
// index := GetElementIndex ( hackTanks , hack ) ;
1916: LD_ADDR_VAR 0 5
1920: PUSH
1921: LD_EXP 4
1925: PPUSH
1926: LD_VAR 0 1
1930: PPUSH
1931: CALL 22131 0 2
1935: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
1936: LD_ADDR_VAR 0 4
1940: PUSH
1941: DOUBLE
1942: LD_INT 1
1944: DEC
1945: ST_TO_ADDR
1946: LD_EXP 5
1950: PUSH
1951: LD_VAR 0 5
1955: ARRAY
1956: PUSH
1957: FOR_TO
1958: IFFALSE 1999
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
1960: LD_EXP 5
1964: PUSH
1965: LD_VAR 0 5
1969: ARRAY
1970: PUSH
1971: LD_VAR 0 4
1975: ARRAY
1976: PUSH
1977: LD_INT 1
1979: ARRAY
1980: PUSH
1981: LD_VAR 0 2
1985: EQUAL
1986: IFFALSE 1997
// KillUnit ( vehicle ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: CALL_OW 66
1997: GO 1957
1999: POP
2000: POP
// end ;
2001: LD_VAR 0 3
2005: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
2006: LD_EXP 9
2010: NOT
2011: IFFALSE 2046
2013: GO 2015
2015: DISABLE
// begin initMiner := true ;
2016: LD_ADDR_EXP 9
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// minersList := [ ] ;
2024: LD_ADDR_EXP 10
2028: PUSH
2029: EMPTY
2030: ST_TO_ADDR
// minerMinesList := [ ] ;
2031: LD_ADDR_EXP 11
2035: PUSH
2036: EMPTY
2037: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2038: LD_ADDR_EXP 12
2042: PUSH
2043: LD_INT 5
2045: ST_TO_ADDR
// end ;
2046: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2047: LD_EXP 9
2051: PUSH
2052: LD_INT 34
2054: PUSH
2055: LD_EXP 20
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: AND
2069: IFFALSE 2532
2071: GO 2073
2073: DISABLE
2074: LD_INT 0
2076: PPUSH
2077: PPUSH
2078: PPUSH
2079: PPUSH
// begin enable ;
2080: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2081: LD_ADDR_VAR 0 1
2085: PUSH
2086: LD_INT 34
2088: PUSH
2089: LD_EXP 20
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PPUSH
2098: CALL_OW 69
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2176
// begin if not i in minersList then
2106: LD_VAR 0 1
2110: PUSH
2111: LD_EXP 10
2115: IN
2116: NOT
2117: IFFALSE 2174
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2119: LD_ADDR_EXP 10
2123: PUSH
2124: LD_EXP 10
2128: PPUSH
2129: LD_EXP 10
2133: PUSH
2134: LD_INT 1
2136: PLUS
2137: PPUSH
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 1
2147: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2148: LD_ADDR_EXP 11
2152: PUSH
2153: LD_EXP 11
2157: PPUSH
2158: LD_EXP 11
2162: PUSH
2163: LD_INT 1
2165: PLUS
2166: PPUSH
2167: EMPTY
2168: PPUSH
2169: CALL_OW 1
2173: ST_TO_ADDR
// end end ;
2174: GO 2103
2176: POP
2177: POP
// for i := minerMinesList downto 1 do
2178: LD_ADDR_VAR 0 1
2182: PUSH
2183: DOUBLE
2184: LD_EXP 11
2188: INC
2189: ST_TO_ADDR
2190: LD_INT 1
2192: PUSH
2193: FOR_DOWNTO
2194: IFFALSE 2530
// begin if IsLive ( minersList [ i ] ) then
2196: LD_EXP 10
2200: PUSH
2201: LD_VAR 0 1
2205: ARRAY
2206: PPUSH
2207: CALL_OW 300
2211: IFFALSE 2239
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2213: LD_EXP 10
2217: PUSH
2218: LD_VAR 0 1
2222: ARRAY
2223: PPUSH
2224: LD_EXP 11
2228: PUSH
2229: LD_VAR 0 1
2233: ARRAY
2234: PPUSH
2235: CALL_OW 505
// if not minerMinesList [ i ] then
2239: LD_EXP 11
2243: PUSH
2244: LD_VAR 0 1
2248: ARRAY
2249: NOT
2250: IFFALSE 2254
// continue ;
2252: GO 2193
// for j := minerMinesList [ i ] downto 1 do
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: DOUBLE
2260: LD_EXP 11
2264: PUSH
2265: LD_VAR 0 1
2269: ARRAY
2270: INC
2271: ST_TO_ADDR
2272: LD_INT 1
2274: PUSH
2275: FOR_DOWNTO
2276: IFFALSE 2526
// begin side := GetSide ( minersList [ i ] ) ;
2278: LD_ADDR_VAR 0 3
2282: PUSH
2283: LD_EXP 10
2287: PUSH
2288: LD_VAR 0 1
2292: ARRAY
2293: PPUSH
2294: CALL_OW 255
2298: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_EXP 11
2308: PUSH
2309: LD_VAR 0 1
2313: ARRAY
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 11
2329: PUSH
2330: LD_VAR 0 1
2334: ARRAY
2335: PUSH
2336: LD_VAR 0 2
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: CALL_OW 428
2350: ST_TO_ADDR
// if not tmp then
2351: LD_VAR 0 4
2355: NOT
2356: IFFALSE 2360
// continue ;
2358: GO 2275
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2360: LD_VAR 0 4
2364: PUSH
2365: LD_INT 81
2367: PUSH
2368: LD_VAR 0 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PPUSH
2377: CALL_OW 69
2381: IN
2382: PUSH
2383: LD_EXP 11
2387: PUSH
2388: LD_VAR 0 1
2392: ARRAY
2393: PUSH
2394: LD_VAR 0 2
2398: ARRAY
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_EXP 11
2408: PUSH
2409: LD_VAR 0 1
2413: ARRAY
2414: PUSH
2415: LD_VAR 0 2
2419: ARRAY
2420: PUSH
2421: LD_INT 2
2423: ARRAY
2424: PPUSH
2425: CALL_OW 458
2429: AND
2430: IFFALSE 2524
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
2432: LD_EXP 11
2436: PUSH
2437: LD_VAR 0 1
2441: ARRAY
2442: PUSH
2443: LD_VAR 0 2
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_EXP 11
2457: PUSH
2458: LD_VAR 0 1
2462: ARRAY
2463: PUSH
2464: LD_VAR 0 2
2468: ARRAY
2469: PUSH
2470: LD_INT 2
2472: ARRAY
2473: PPUSH
2474: LD_VAR 0 3
2478: PPUSH
2479: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
2483: LD_ADDR_EXP 11
2487: PUSH
2488: LD_EXP 11
2492: PPUSH
2493: LD_VAR 0 1
2497: PPUSH
2498: LD_EXP 11
2502: PUSH
2503: LD_VAR 0 1
2507: ARRAY
2508: PPUSH
2509: LD_VAR 0 2
2513: PPUSH
2514: CALL_OW 3
2518: PPUSH
2519: CALL_OW 1
2523: ST_TO_ADDR
// end ; end ;
2524: GO 2275
2526: POP
2527: POP
// end ;
2528: GO 2193
2530: POP
2531: POP
// end ;
2532: PPOPN 4
2534: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
// result := false ;
2539: LD_ADDR_VAR 0 4
2543: PUSH
2544: LD_INT 0
2546: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 264
2556: PUSH
2557: LD_EXP 20
2561: EQUAL
2562: NOT
2563: IFFALSE 2567
// exit ;
2565: GO 2807
// index := GetElementIndex ( minersList , unit ) ;
2567: LD_ADDR_VAR 0 5
2571: PUSH
2572: LD_EXP 10
2576: PPUSH
2577: LD_VAR 0 1
2581: PPUSH
2582: CALL 22131 0 2
2586: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
2587: LD_EXP 11
2591: PUSH
2592: LD_VAR 0 5
2596: ARRAY
2597: PUSH
2598: LD_EXP 12
2602: GREATEREQUAL
2603: IFFALSE 2607
// exit ;
2605: GO 2807
// ComMoveXY ( unit , x , y ) ;
2607: LD_VAR 0 1
2611: PPUSH
2612: LD_VAR 0 2
2616: PPUSH
2617: LD_VAR 0 3
2621: PPUSH
2622: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2626: LD_INT 35
2628: PPUSH
2629: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
2633: LD_VAR 0 1
2637: PPUSH
2638: LD_VAR 0 2
2642: PPUSH
2643: LD_VAR 0 3
2647: PPUSH
2648: CALL 52903 0 3
2652: NOT
2653: PUSH
2654: LD_VAR 0 1
2658: PPUSH
2659: CALL_OW 314
2663: AND
2664: IFFALSE 2668
// exit ;
2666: GO 2807
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
2668: LD_VAR 0 2
2672: PPUSH
2673: LD_VAR 0 3
2677: PPUSH
2678: CALL_OW 428
2682: PUSH
2683: LD_VAR 0 1
2687: EQUAL
2688: PUSH
2689: LD_VAR 0 1
2693: PPUSH
2694: CALL_OW 314
2698: NOT
2699: AND
2700: IFFALSE 2626
// PlaySoundXY ( x , y , PlantMine ) ;
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_VAR 0 3
2711: PPUSH
2712: LD_STRING PlantMine
2714: PPUSH
2715: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
2719: LD_VAR 0 2
2723: PPUSH
2724: LD_VAR 0 3
2728: PPUSH
2729: LD_VAR 0 1
2733: PPUSH
2734: CALL_OW 255
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
2746: LD_ADDR_EXP 11
2750: PUSH
2751: LD_EXP 11
2755: PPUSH
2756: LD_VAR 0 5
2760: PUSH
2761: LD_EXP 11
2765: PUSH
2766: LD_VAR 0 5
2770: ARRAY
2771: PUSH
2772: LD_INT 1
2774: PLUS
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PPUSH
2780: LD_VAR 0 2
2784: PUSH
2785: LD_VAR 0 3
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL 22346 0 3
2798: ST_TO_ADDR
// result := true ;
2799: LD_ADDR_VAR 0 4
2803: PUSH
2804: LD_INT 1
2806: ST_TO_ADDR
// end ;
2807: LD_VAR 0 4
2811: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
2812: LD_INT 0
2814: PPUSH
2815: PPUSH
2816: PPUSH
// if not unit in minersList then
2817: LD_VAR 0 1
2821: PUSH
2822: LD_EXP 10
2826: IN
2827: NOT
2828: IFFALSE 2832
// exit ;
2830: GO 3224
// index := GetElementIndex ( minersList , unit ) ;
2832: LD_ADDR_VAR 0 6
2836: PUSH
2837: LD_EXP 10
2841: PPUSH
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 22131 0 2
2851: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
2852: LD_ADDR_VAR 0 5
2856: PUSH
2857: DOUBLE
2858: LD_EXP 11
2862: PUSH
2863: LD_VAR 0 6
2867: ARRAY
2868: INC
2869: ST_TO_ADDR
2870: LD_INT 1
2872: PUSH
2873: FOR_DOWNTO
2874: IFFALSE 3035
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
2876: LD_EXP 11
2880: PUSH
2881: LD_VAR 0 6
2885: ARRAY
2886: PUSH
2887: LD_VAR 0 5
2891: ARRAY
2892: PUSH
2893: LD_INT 1
2895: ARRAY
2896: PUSH
2897: LD_VAR 0 2
2901: EQUAL
2902: PUSH
2903: LD_EXP 11
2907: PUSH
2908: LD_VAR 0 6
2912: ARRAY
2913: PUSH
2914: LD_VAR 0 5
2918: ARRAY
2919: PUSH
2920: LD_INT 2
2922: ARRAY
2923: PUSH
2924: LD_VAR 0 3
2928: EQUAL
2929: AND
2930: IFFALSE 3033
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
2932: LD_EXP 11
2936: PUSH
2937: LD_VAR 0 6
2941: ARRAY
2942: PUSH
2943: LD_VAR 0 5
2947: ARRAY
2948: PUSH
2949: LD_INT 1
2951: ARRAY
2952: PPUSH
2953: LD_EXP 11
2957: PUSH
2958: LD_VAR 0 6
2962: ARRAY
2963: PUSH
2964: LD_VAR 0 5
2968: ARRAY
2969: PUSH
2970: LD_INT 2
2972: ARRAY
2973: PPUSH
2974: LD_VAR 0 1
2978: PPUSH
2979: CALL_OW 255
2983: PPUSH
2984: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
2988: LD_ADDR_EXP 11
2992: PUSH
2993: LD_EXP 11
2997: PPUSH
2998: LD_VAR 0 6
3002: PPUSH
3003: LD_EXP 11
3007: PUSH
3008: LD_VAR 0 6
3012: ARRAY
3013: PPUSH
3014: LD_VAR 0 5
3018: PPUSH
3019: CALL_OW 3
3023: PPUSH
3024: CALL_OW 1
3028: ST_TO_ADDR
// exit ;
3029: POP
3030: POP
3031: GO 3224
// end ; end ;
3033: GO 2873
3035: POP
3036: POP
// for i := minerMinesList [ index ] downto 1 do
3037: LD_ADDR_VAR 0 5
3041: PUSH
3042: DOUBLE
3043: LD_EXP 11
3047: PUSH
3048: LD_VAR 0 6
3052: ARRAY
3053: INC
3054: ST_TO_ADDR
3055: LD_INT 1
3057: PUSH
3058: FOR_DOWNTO
3059: IFFALSE 3222
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3061: LD_EXP 11
3065: PUSH
3066: LD_VAR 0 6
3070: ARRAY
3071: PUSH
3072: LD_VAR 0 5
3076: ARRAY
3077: PUSH
3078: LD_INT 1
3080: ARRAY
3081: PPUSH
3082: LD_EXP 11
3086: PUSH
3087: LD_VAR 0 6
3091: ARRAY
3092: PUSH
3093: LD_VAR 0 5
3097: ARRAY
3098: PUSH
3099: LD_INT 2
3101: ARRAY
3102: PPUSH
3103: LD_VAR 0 2
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: CALL_OW 298
3117: PUSH
3118: LD_INT 6
3120: LESS
3121: IFFALSE 3220
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3123: LD_EXP 11
3127: PUSH
3128: LD_VAR 0 6
3132: ARRAY
3133: PUSH
3134: LD_VAR 0 5
3138: ARRAY
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: LD_EXP 11
3148: PUSH
3149: LD_VAR 0 6
3153: ARRAY
3154: PUSH
3155: LD_VAR 0 5
3159: ARRAY
3160: PUSH
3161: LD_INT 2
3163: ARRAY
3164: PPUSH
3165: LD_VAR 0 1
3169: PPUSH
3170: CALL_OW 255
3174: PPUSH
3175: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3179: LD_ADDR_EXP 11
3183: PUSH
3184: LD_EXP 11
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: LD_EXP 11
3198: PUSH
3199: LD_VAR 0 6
3203: ARRAY
3204: PPUSH
3205: LD_VAR 0 5
3209: PPUSH
3210: CALL_OW 3
3214: PPUSH
3215: CALL_OW 1
3219: ST_TO_ADDR
// end ; end ;
3220: GO 3058
3222: POP
3223: POP
// end ;
3224: LD_VAR 0 4
3228: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
3233: PPUSH
3234: PPUSH
3235: PPUSH
3236: PPUSH
3237: PPUSH
3238: PPUSH
3239: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3240: LD_VAR 0 1
3244: PPUSH
3245: CALL_OW 264
3249: PUSH
3250: LD_EXP 20
3254: EQUAL
3255: NOT
3256: PUSH
3257: LD_VAR 0 1
3261: PUSH
3262: LD_EXP 10
3266: IN
3267: NOT
3268: OR
3269: IFFALSE 3273
// exit ;
3271: GO 3595
// index := GetElementIndex ( minersList , unit ) ;
3273: LD_ADDR_VAR 0 6
3277: PUSH
3278: LD_EXP 10
3282: PPUSH
3283: LD_VAR 0 1
3287: PPUSH
3288: CALL 22131 0 2
3292: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3293: LD_ADDR_VAR 0 8
3297: PUSH
3298: LD_EXP 12
3302: PUSH
3303: LD_EXP 11
3307: PUSH
3308: LD_VAR 0 6
3312: ARRAY
3313: MINUS
3314: ST_TO_ADDR
// if not minesFreeAmount then
3315: LD_VAR 0 8
3319: NOT
3320: IFFALSE 3324
// exit ;
3322: GO 3595
// tmp := [ ] ;
3324: LD_ADDR_VAR 0 7
3328: PUSH
3329: EMPTY
3330: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3331: LD_ADDR_VAR 0 5
3335: PUSH
3336: DOUBLE
3337: LD_INT 1
3339: DEC
3340: ST_TO_ADDR
3341: LD_VAR 0 8
3345: PUSH
3346: FOR_TO
3347: IFFALSE 3542
// begin _d := rand ( 0 , 5 ) ;
3349: LD_ADDR_VAR 0 11
3353: PUSH
3354: LD_INT 0
3356: PPUSH
3357: LD_INT 5
3359: PPUSH
3360: CALL_OW 12
3364: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3365: LD_ADDR_VAR 0 12
3369: PUSH
3370: LD_INT 2
3372: PPUSH
3373: LD_INT 6
3375: PPUSH
3376: CALL_OW 12
3380: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
3381: LD_ADDR_VAR 0 9
3385: PUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: LD_VAR 0 11
3395: PPUSH
3396: LD_VAR 0 12
3400: PPUSH
3401: CALL_OW 272
3405: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
3406: LD_ADDR_VAR 0 10
3410: PUSH
3411: LD_VAR 0 3
3415: PPUSH
3416: LD_VAR 0 11
3420: PPUSH
3421: LD_VAR 0 12
3425: PPUSH
3426: CALL_OW 273
3430: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
3431: LD_VAR 0 9
3435: PPUSH
3436: LD_VAR 0 10
3440: PPUSH
3441: CALL_OW 488
3445: PUSH
3446: LD_VAR 0 9
3450: PUSH
3451: LD_VAR 0 10
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: LD_VAR 0 7
3464: IN
3465: NOT
3466: AND
3467: PUSH
3468: LD_VAR 0 9
3472: PPUSH
3473: LD_VAR 0 10
3477: PPUSH
3478: CALL_OW 458
3482: NOT
3483: AND
3484: IFFALSE 3526
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
3486: LD_ADDR_VAR 0 7
3490: PUSH
3491: LD_VAR 0 7
3495: PPUSH
3496: LD_VAR 0 7
3500: PUSH
3501: LD_INT 1
3503: PLUS
3504: PPUSH
3505: LD_VAR 0 9
3509: PUSH
3510: LD_VAR 0 10
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PPUSH
3519: CALL_OW 1
3523: ST_TO_ADDR
3524: GO 3540
// i := i - 1 ;
3526: LD_ADDR_VAR 0 5
3530: PUSH
3531: LD_VAR 0 5
3535: PUSH
3536: LD_INT 1
3538: MINUS
3539: ST_TO_ADDR
// end ;
3540: GO 3346
3542: POP
3543: POP
// for i in tmp do
3544: LD_ADDR_VAR 0 5
3548: PUSH
3549: LD_VAR 0 7
3553: PUSH
3554: FOR_IN
3555: IFFALSE 3593
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
3557: LD_VAR 0 1
3561: PPUSH
3562: LD_VAR 0 5
3566: PUSH
3567: LD_INT 1
3569: ARRAY
3570: PPUSH
3571: LD_VAR 0 5
3575: PUSH
3576: LD_INT 2
3578: ARRAY
3579: PPUSH
3580: CALL 2535 0 3
3584: NOT
3585: IFFALSE 3591
// exit ;
3587: POP
3588: POP
3589: GO 3595
3591: GO 3554
3593: POP
3594: POP
// end ;
3595: LD_VAR 0 4
3599: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
3600: LD_INT 0
3602: PPUSH
3603: PPUSH
3604: PPUSH
3605: PPUSH
3606: PPUSH
3607: PPUSH
3608: PPUSH
// if not GetClass ( unit ) = class_sniper then
3609: LD_VAR 0 1
3613: PPUSH
3614: CALL_OW 257
3618: PUSH
3619: LD_INT 5
3621: EQUAL
3622: NOT
3623: IFFALSE 3627
// exit ;
3625: GO 4015
// dist := 8 ;
3627: LD_ADDR_VAR 0 5
3631: PUSH
3632: LD_INT 8
3634: ST_TO_ADDR
// viewRange := 12 ;
3635: LD_ADDR_VAR 0 7
3639: PUSH
3640: LD_INT 12
3642: ST_TO_ADDR
// side := GetSide ( unit ) ;
3643: LD_ADDR_VAR 0 6
3647: PUSH
3648: LD_VAR 0 1
3652: PPUSH
3653: CALL_OW 255
3657: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
3658: LD_INT 61
3660: PPUSH
3661: LD_VAR 0 6
3665: PPUSH
3666: CALL_OW 321
3670: PUSH
3671: LD_INT 2
3673: EQUAL
3674: IFFALSE 3684
// viewRange := 16 ;
3676: LD_ADDR_VAR 0 7
3680: PUSH
3681: LD_INT 16
3683: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
3684: LD_VAR 0 1
3688: PPUSH
3689: LD_VAR 0 2
3693: PPUSH
3694: LD_VAR 0 3
3698: PPUSH
3699: CALL_OW 297
3703: PUSH
3704: LD_VAR 0 5
3708: GREATER
3709: IFFALSE 3788
// begin ComMoveXY ( unit , x , y ) ;
3711: LD_VAR 0 1
3715: PPUSH
3716: LD_VAR 0 2
3720: PPUSH
3721: LD_VAR 0 3
3725: PPUSH
3726: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3730: LD_INT 35
3732: PPUSH
3733: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
3737: LD_VAR 0 1
3741: PPUSH
3742: LD_VAR 0 2
3746: PPUSH
3747: LD_VAR 0 3
3751: PPUSH
3752: CALL 52903 0 3
3756: NOT
3757: IFFALSE 3761
// exit ;
3759: GO 4015
// until GetDistUnitXY ( unit , x , y ) < dist ;
3761: LD_VAR 0 1
3765: PPUSH
3766: LD_VAR 0 2
3770: PPUSH
3771: LD_VAR 0 3
3775: PPUSH
3776: CALL_OW 297
3780: PUSH
3781: LD_VAR 0 5
3785: LESS
3786: IFFALSE 3730
// end ; ComTurnXY ( unit , x , y ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_VAR 0 2
3797: PPUSH
3798: LD_VAR 0 3
3802: PPUSH
3803: CALL_OW 118
// wait ( 5 ) ;
3807: LD_INT 5
3809: PPUSH
3810: CALL_OW 67
// _d := GetDir ( unit ) ;
3814: LD_ADDR_VAR 0 10
3818: PUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 254
3828: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
3829: LD_ADDR_VAR 0 8
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 250
3843: PPUSH
3844: LD_VAR 0 10
3848: PPUSH
3849: LD_VAR 0 5
3853: PPUSH
3854: CALL_OW 272
3858: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_VAR 0 1
3868: PPUSH
3869: CALL_OW 251
3873: PPUSH
3874: LD_VAR 0 10
3878: PPUSH
3879: LD_VAR 0 5
3883: PPUSH
3884: CALL_OW 273
3888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3889: LD_VAR 0 8
3893: PPUSH
3894: LD_VAR 0 9
3898: PPUSH
3899: CALL_OW 488
3903: NOT
3904: IFFALSE 3908
// exit ;
3906: GO 4015
// ComAnimCustom ( unit , 1 ) ;
3908: LD_VAR 0 1
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
3920: LD_VAR 0 8
3924: PPUSH
3925: LD_VAR 0 9
3929: PPUSH
3930: LD_VAR 0 6
3934: PPUSH
3935: LD_VAR 0 7
3939: PPUSH
3940: CALL_OW 330
// repeat wait ( 1 ) ;
3944: LD_INT 1
3946: PPUSH
3947: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
3951: LD_VAR 0 1
3955: PPUSH
3956: CALL_OW 316
3960: PUSH
3961: LD_VAR 0 1
3965: PPUSH
3966: CALL_OW 314
3970: OR
3971: PUSH
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 302
3981: NOT
3982: OR
3983: PUSH
3984: LD_VAR 0 1
3988: PPUSH
3989: CALL_OW 301
3993: OR
3994: IFFALSE 3944
// RemoveSeeing ( _x , _y , side ) ;
3996: LD_VAR 0 8
4000: PPUSH
4001: LD_VAR 0 9
4005: PPUSH
4006: LD_VAR 0 6
4010: PPUSH
4011: CALL_OW 331
// end ; end_of_file
4015: LD_VAR 0 4
4019: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4020: LD_INT 0
4022: PPUSH
// ar_miner := 81 ;
4023: LD_ADDR_EXP 20
4027: PUSH
4028: LD_INT 81
4030: ST_TO_ADDR
// ar_crane := 88 ;
4031: LD_ADDR_EXP 19
4035: PUSH
4036: LD_INT 88
4038: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4039: LD_ADDR_EXP 14
4043: PUSH
4044: LD_INT 89
4046: ST_TO_ADDR
// us_hack := 99 ;
4047: LD_ADDR_EXP 15
4051: PUSH
4052: LD_INT 99
4054: ST_TO_ADDR
// us_artillery := 97 ;
4055: LD_ADDR_EXP 16
4059: PUSH
4060: LD_INT 97
4062: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4063: LD_ADDR_EXP 17
4067: PUSH
4068: LD_INT 91
4070: ST_TO_ADDR
// ar_mortar := 92 ;
4071: LD_ADDR_EXP 18
4075: PUSH
4076: LD_INT 92
4078: ST_TO_ADDR
// ru_radar := 98 ;
4079: LD_ADDR_EXP 13
4083: PUSH
4084: LD_INT 98
4086: ST_TO_ADDR
// tech_Artillery := 80 ;
4087: LD_ADDR_EXP 21
4091: PUSH
4092: LD_INT 80
4094: ST_TO_ADDR
// tech_RadMat := 81 ;
4095: LD_ADDR_EXP 22
4099: PUSH
4100: LD_INT 81
4102: ST_TO_ADDR
// tech_BasicTools := 82 ;
4103: LD_ADDR_EXP 23
4107: PUSH
4108: LD_INT 82
4110: ST_TO_ADDR
// tech_Cargo := 83 ;
4111: LD_ADDR_EXP 24
4115: PUSH
4116: LD_INT 83
4118: ST_TO_ADDR
// tech_Track := 84 ;
4119: LD_ADDR_EXP 25
4123: PUSH
4124: LD_INT 84
4126: ST_TO_ADDR
// tech_Crane := 85 ;
4127: LD_ADDR_EXP 26
4131: PUSH
4132: LD_INT 85
4134: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4135: LD_ADDR_EXP 27
4139: PUSH
4140: LD_INT 86
4142: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4143: LD_ADDR_EXP 28
4147: PUSH
4148: LD_INT 87
4150: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4151: LD_ADDR_EXP 29
4155: PUSH
4156: LD_INT 88
4158: ST_TO_ADDR
// class_mastodont := 31 ;
4159: LD_ADDR_EXP 30
4163: PUSH
4164: LD_INT 31
4166: ST_TO_ADDR
// class_horse := 21 ;
4167: LD_ADDR_EXP 31
4171: PUSH
4172: LD_INT 21
4174: ST_TO_ADDR
// end ;
4175: LD_VAR 0 1
4179: RET
// every 1 do
4180: GO 4182
4182: DISABLE
// InitGlobalVariables ; end_of_file
4183: CALL 4020 0 0
4187: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4188: LD_INT 0
4190: PPUSH
// if p2 = 100 then
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 100
4198: EQUAL
4199: IFFALSE 5148
// begin if not StreamModeActive then
4201: LD_EXP 32
4205: NOT
4206: IFFALSE 4216
// StreamModeActive := true ;
4208: LD_ADDR_EXP 32
4212: PUSH
4213: LD_INT 1
4215: ST_TO_ADDR
// if p3 = 0 then
4216: LD_VAR 0 3
4220: PUSH
4221: LD_INT 0
4223: EQUAL
4224: IFFALSE 4230
// InitStreamMode ;
4226: CALL 5308 0 0
// if p3 = 1 then
4230: LD_VAR 0 3
4234: PUSH
4235: LD_INT 1
4237: EQUAL
4238: IFFALSE 4248
// sRocket := true ;
4240: LD_ADDR_EXP 37
4244: PUSH
4245: LD_INT 1
4247: ST_TO_ADDR
// if p3 = 2 then
4248: LD_VAR 0 3
4252: PUSH
4253: LD_INT 2
4255: EQUAL
4256: IFFALSE 4266
// sSpeed := true ;
4258: LD_ADDR_EXP 36
4262: PUSH
4263: LD_INT 1
4265: ST_TO_ADDR
// if p3 = 3 then
4266: LD_VAR 0 3
4270: PUSH
4271: LD_INT 3
4273: EQUAL
4274: IFFALSE 4284
// sEngine := true ;
4276: LD_ADDR_EXP 38
4280: PUSH
4281: LD_INT 1
4283: ST_TO_ADDR
// if p3 = 4 then
4284: LD_VAR 0 3
4288: PUSH
4289: LD_INT 4
4291: EQUAL
4292: IFFALSE 4302
// sSpec := true ;
4294: LD_ADDR_EXP 35
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// if p3 = 5 then
4302: LD_VAR 0 3
4306: PUSH
4307: LD_INT 5
4309: EQUAL
4310: IFFALSE 4320
// sLevel := true ;
4312: LD_ADDR_EXP 39
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// if p3 = 6 then
4320: LD_VAR 0 3
4324: PUSH
4325: LD_INT 6
4327: EQUAL
4328: IFFALSE 4338
// sArmoury := true ;
4330: LD_ADDR_EXP 40
4334: PUSH
4335: LD_INT 1
4337: ST_TO_ADDR
// if p3 = 7 then
4338: LD_VAR 0 3
4342: PUSH
4343: LD_INT 7
4345: EQUAL
4346: IFFALSE 4356
// sRadar := true ;
4348: LD_ADDR_EXP 41
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// if p3 = 8 then
4356: LD_VAR 0 3
4360: PUSH
4361: LD_INT 8
4363: EQUAL
4364: IFFALSE 4374
// sBunker := true ;
4366: LD_ADDR_EXP 42
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// if p3 = 9 then
4374: LD_VAR 0 3
4378: PUSH
4379: LD_INT 9
4381: EQUAL
4382: IFFALSE 4392
// sHack := true ;
4384: LD_ADDR_EXP 43
4388: PUSH
4389: LD_INT 1
4391: ST_TO_ADDR
// if p3 = 10 then
4392: LD_VAR 0 3
4396: PUSH
4397: LD_INT 10
4399: EQUAL
4400: IFFALSE 4410
// sFire := true ;
4402: LD_ADDR_EXP 44
4406: PUSH
4407: LD_INT 1
4409: ST_TO_ADDR
// if p3 = 11 then
4410: LD_VAR 0 3
4414: PUSH
4415: LD_INT 11
4417: EQUAL
4418: IFFALSE 4428
// sRefresh := true ;
4420: LD_ADDR_EXP 45
4424: PUSH
4425: LD_INT 1
4427: ST_TO_ADDR
// if p3 = 12 then
4428: LD_VAR 0 3
4432: PUSH
4433: LD_INT 12
4435: EQUAL
4436: IFFALSE 4446
// sExp := true ;
4438: LD_ADDR_EXP 46
4442: PUSH
4443: LD_INT 1
4445: ST_TO_ADDR
// if p3 = 13 then
4446: LD_VAR 0 3
4450: PUSH
4451: LD_INT 13
4453: EQUAL
4454: IFFALSE 4464
// sDepot := true ;
4456: LD_ADDR_EXP 47
4460: PUSH
4461: LD_INT 1
4463: ST_TO_ADDR
// if p3 = 14 then
4464: LD_VAR 0 3
4468: PUSH
4469: LD_INT 14
4471: EQUAL
4472: IFFALSE 4482
// sFlag := true ;
4474: LD_ADDR_EXP 48
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// if p3 = 15 then
4482: LD_VAR 0 3
4486: PUSH
4487: LD_INT 15
4489: EQUAL
4490: IFFALSE 4500
// sKamikadze := true ;
4492: LD_ADDR_EXP 56
4496: PUSH
4497: LD_INT 1
4499: ST_TO_ADDR
// if p3 = 16 then
4500: LD_VAR 0 3
4504: PUSH
4505: LD_INT 16
4507: EQUAL
4508: IFFALSE 4518
// sTroll := true ;
4510: LD_ADDR_EXP 57
4514: PUSH
4515: LD_INT 1
4517: ST_TO_ADDR
// if p3 = 17 then
4518: LD_VAR 0 3
4522: PUSH
4523: LD_INT 17
4525: EQUAL
4526: IFFALSE 4536
// sSlow := true ;
4528: LD_ADDR_EXP 58
4532: PUSH
4533: LD_INT 1
4535: ST_TO_ADDR
// if p3 = 18 then
4536: LD_VAR 0 3
4540: PUSH
4541: LD_INT 18
4543: EQUAL
4544: IFFALSE 4554
// sLack := true ;
4546: LD_ADDR_EXP 59
4550: PUSH
4551: LD_INT 1
4553: ST_TO_ADDR
// if p3 = 19 then
4554: LD_VAR 0 3
4558: PUSH
4559: LD_INT 19
4561: EQUAL
4562: IFFALSE 4572
// sTank := true ;
4564: LD_ADDR_EXP 61
4568: PUSH
4569: LD_INT 1
4571: ST_TO_ADDR
// if p3 = 20 then
4572: LD_VAR 0 3
4576: PUSH
4577: LD_INT 20
4579: EQUAL
4580: IFFALSE 4590
// sRemote := true ;
4582: LD_ADDR_EXP 62
4586: PUSH
4587: LD_INT 1
4589: ST_TO_ADDR
// if p3 = 21 then
4590: LD_VAR 0 3
4594: PUSH
4595: LD_INT 21
4597: EQUAL
4598: IFFALSE 4608
// sPowell := true ;
4600: LD_ADDR_EXP 63
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// if p3 = 22 then
4608: LD_VAR 0 3
4612: PUSH
4613: LD_INT 22
4615: EQUAL
4616: IFFALSE 4626
// sTeleport := true ;
4618: LD_ADDR_EXP 66
4622: PUSH
4623: LD_INT 1
4625: ST_TO_ADDR
// if p3 = 23 then
4626: LD_VAR 0 3
4630: PUSH
4631: LD_INT 23
4633: EQUAL
4634: IFFALSE 4644
// sOilTower := true ;
4636: LD_ADDR_EXP 68
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// if p3 = 24 then
4644: LD_VAR 0 3
4648: PUSH
4649: LD_INT 24
4651: EQUAL
4652: IFFALSE 4662
// sShovel := true ;
4654: LD_ADDR_EXP 69
4658: PUSH
4659: LD_INT 1
4661: ST_TO_ADDR
// if p3 = 25 then
4662: LD_VAR 0 3
4666: PUSH
4667: LD_INT 25
4669: EQUAL
4670: IFFALSE 4680
// sSheik := true ;
4672: LD_ADDR_EXP 70
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// if p3 = 26 then
4680: LD_VAR 0 3
4684: PUSH
4685: LD_INT 26
4687: EQUAL
4688: IFFALSE 4698
// sEarthquake := true ;
4690: LD_ADDR_EXP 72
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// if p3 = 27 then
4698: LD_VAR 0 3
4702: PUSH
4703: LD_INT 27
4705: EQUAL
4706: IFFALSE 4716
// sAI := true ;
4708: LD_ADDR_EXP 73
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// if p3 = 28 then
4716: LD_VAR 0 3
4720: PUSH
4721: LD_INT 28
4723: EQUAL
4724: IFFALSE 4734
// sCargo := true ;
4726: LD_ADDR_EXP 76
4730: PUSH
4731: LD_INT 1
4733: ST_TO_ADDR
// if p3 = 29 then
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 29
4741: EQUAL
4742: IFFALSE 4752
// sDLaser := true ;
4744: LD_ADDR_EXP 77
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// if p3 = 30 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 30
4759: EQUAL
4760: IFFALSE 4770
// sExchange := true ;
4762: LD_ADDR_EXP 78
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 31 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 31
4777: EQUAL
4778: IFFALSE 4788
// sFac := true ;
4780: LD_ADDR_EXP 79
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 32 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 32
4795: EQUAL
4796: IFFALSE 4806
// sPower := true ;
4798: LD_ADDR_EXP 80
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 33 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 33
4813: EQUAL
4814: IFFALSE 4824
// sRandom := true ;
4816: LD_ADDR_EXP 81
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 34 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 34
4831: EQUAL
4832: IFFALSE 4842
// sShield := true ;
4834: LD_ADDR_EXP 82
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 35 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 35
4849: EQUAL
4850: IFFALSE 4860
// sTime := true ;
4852: LD_ADDR_EXP 83
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 36 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 36
4867: EQUAL
4868: IFFALSE 4878
// sTools := true ;
4870: LD_ADDR_EXP 84
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 101 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 101
4885: EQUAL
4886: IFFALSE 4896
// sSold := true ;
4888: LD_ADDR_EXP 49
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 102 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 102
4903: EQUAL
4904: IFFALSE 4914
// sDiff := true ;
4906: LD_ADDR_EXP 50
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 103 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 103
4921: EQUAL
4922: IFFALSE 4932
// sFog := true ;
4924: LD_ADDR_EXP 53
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 104 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 104
4939: EQUAL
4940: IFFALSE 4950
// sReset := true ;
4942: LD_ADDR_EXP 54
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 105 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 105
4957: EQUAL
4958: IFFALSE 4968
// sSun := true ;
4960: LD_ADDR_EXP 55
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 106 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 106
4975: EQUAL
4976: IFFALSE 4986
// sTiger := true ;
4978: LD_ADDR_EXP 51
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 107 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 107
4993: EQUAL
4994: IFFALSE 5004
// sBomb := true ;
4996: LD_ADDR_EXP 52
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 108 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 108
5011: EQUAL
5012: IFFALSE 5022
// sWound := true ;
5014: LD_ADDR_EXP 60
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 109 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 109
5029: EQUAL
5030: IFFALSE 5040
// sBetray := true ;
5032: LD_ADDR_EXP 64
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 110 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 110
5047: EQUAL
5048: IFFALSE 5058
// sContamin := true ;
5050: LD_ADDR_EXP 65
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 111 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 111
5065: EQUAL
5066: IFFALSE 5076
// sOil := true ;
5068: LD_ADDR_EXP 67
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 112 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 112
5083: EQUAL
5084: IFFALSE 5094
// sStu := true ;
5086: LD_ADDR_EXP 71
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 113 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 113
5101: EQUAL
5102: IFFALSE 5112
// sBazooka := true ;
5104: LD_ADDR_EXP 74
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 114 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 114
5119: EQUAL
5120: IFFALSE 5130
// sMortar := true ;
5122: LD_ADDR_EXP 75
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 115 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 115
5137: EQUAL
5138: IFFALSE 5148
// sRanger := true ;
5140: LD_ADDR_EXP 85
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// end ; if p2 = 101 then
5148: LD_VAR 0 2
5152: PUSH
5153: LD_INT 101
5155: EQUAL
5156: IFFALSE 5284
// begin case p3 of 1 :
5158: LD_VAR 0 3
5162: PUSH
5163: LD_INT 1
5165: DOUBLE
5166: EQUAL
5167: IFTRUE 5171
5169: GO 5178
5171: POP
// hHackUnlimitedResources ; 2 :
5172: CALL 16321 0 0
5176: GO 5284
5178: LD_INT 2
5180: DOUBLE
5181: EQUAL
5182: IFTRUE 5186
5184: GO 5193
5186: POP
// hHackSetLevel10 ; 3 :
5187: CALL 16454 0 0
5191: GO 5284
5193: LD_INT 3
5195: DOUBLE
5196: EQUAL
5197: IFTRUE 5201
5199: GO 5208
5201: POP
// hHackSetLevel10YourUnits ; 4 :
5202: CALL 16539 0 0
5206: GO 5284
5208: LD_INT 4
5210: DOUBLE
5211: EQUAL
5212: IFTRUE 5216
5214: GO 5223
5216: POP
// hHackInvincible ; 5 :
5217: CALL 16987 0 0
5221: GO 5284
5223: LD_INT 5
5225: DOUBLE
5226: EQUAL
5227: IFTRUE 5231
5229: GO 5238
5231: POP
// hHackInvisible ; 6 :
5232: CALL 17098 0 0
5236: GO 5284
5238: LD_INT 6
5240: DOUBLE
5241: EQUAL
5242: IFTRUE 5246
5244: GO 5253
5246: POP
// hHackChangeYourSide ; 7 :
5247: CALL 17155 0 0
5251: GO 5284
5253: LD_INT 7
5255: DOUBLE
5256: EQUAL
5257: IFTRUE 5261
5259: GO 5268
5261: POP
// hHackChangeUnitSide ; 8 :
5262: CALL 17197 0 0
5266: GO 5284
5268: LD_INT 8
5270: DOUBLE
5271: EQUAL
5272: IFTRUE 5276
5274: GO 5283
5276: POP
// hHackFog ; end ;
5277: CALL 17298 0 0
5281: GO 5284
5283: POP
// end ; end ;
5284: LD_VAR 0 7
5288: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5289: GO 5291
5291: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5292: LD_STRING initStreamRollete();
5294: PPUSH
5295: CALL_OW 559
// InitStreamMode ;
5299: CALL 5308 0 0
// DefineStreamItems ( ) ;
5303: CALL 5748 0 0
// end ;
5307: END
// function InitStreamMode ; begin
5308: LD_INT 0
5310: PPUSH
// streamModeActive := false ;
5311: LD_ADDR_EXP 32
5315: PUSH
5316: LD_INT 0
5318: ST_TO_ADDR
// normalCounter := 36 ;
5319: LD_ADDR_EXP 33
5323: PUSH
5324: LD_INT 36
5326: ST_TO_ADDR
// hardcoreCounter := 16 ;
5327: LD_ADDR_EXP 34
5331: PUSH
5332: LD_INT 16
5334: ST_TO_ADDR
// sRocket := false ;
5335: LD_ADDR_EXP 37
5339: PUSH
5340: LD_INT 0
5342: ST_TO_ADDR
// sSpeed := false ;
5343: LD_ADDR_EXP 36
5347: PUSH
5348: LD_INT 0
5350: ST_TO_ADDR
// sEngine := false ;
5351: LD_ADDR_EXP 38
5355: PUSH
5356: LD_INT 0
5358: ST_TO_ADDR
// sSpec := false ;
5359: LD_ADDR_EXP 35
5363: PUSH
5364: LD_INT 0
5366: ST_TO_ADDR
// sLevel := false ;
5367: LD_ADDR_EXP 39
5371: PUSH
5372: LD_INT 0
5374: ST_TO_ADDR
// sArmoury := false ;
5375: LD_ADDR_EXP 40
5379: PUSH
5380: LD_INT 0
5382: ST_TO_ADDR
// sRadar := false ;
5383: LD_ADDR_EXP 41
5387: PUSH
5388: LD_INT 0
5390: ST_TO_ADDR
// sBunker := false ;
5391: LD_ADDR_EXP 42
5395: PUSH
5396: LD_INT 0
5398: ST_TO_ADDR
// sHack := false ;
5399: LD_ADDR_EXP 43
5403: PUSH
5404: LD_INT 0
5406: ST_TO_ADDR
// sFire := false ;
5407: LD_ADDR_EXP 44
5411: PUSH
5412: LD_INT 0
5414: ST_TO_ADDR
// sRefresh := false ;
5415: LD_ADDR_EXP 45
5419: PUSH
5420: LD_INT 0
5422: ST_TO_ADDR
// sExp := false ;
5423: LD_ADDR_EXP 46
5427: PUSH
5428: LD_INT 0
5430: ST_TO_ADDR
// sDepot := false ;
5431: LD_ADDR_EXP 47
5435: PUSH
5436: LD_INT 0
5438: ST_TO_ADDR
// sFlag := false ;
5439: LD_ADDR_EXP 48
5443: PUSH
5444: LD_INT 0
5446: ST_TO_ADDR
// sKamikadze := false ;
5447: LD_ADDR_EXP 56
5451: PUSH
5452: LD_INT 0
5454: ST_TO_ADDR
// sTroll := false ;
5455: LD_ADDR_EXP 57
5459: PUSH
5460: LD_INT 0
5462: ST_TO_ADDR
// sSlow := false ;
5463: LD_ADDR_EXP 58
5467: PUSH
5468: LD_INT 0
5470: ST_TO_ADDR
// sLack := false ;
5471: LD_ADDR_EXP 59
5475: PUSH
5476: LD_INT 0
5478: ST_TO_ADDR
// sTank := false ;
5479: LD_ADDR_EXP 61
5483: PUSH
5484: LD_INT 0
5486: ST_TO_ADDR
// sRemote := false ;
5487: LD_ADDR_EXP 62
5491: PUSH
5492: LD_INT 0
5494: ST_TO_ADDR
// sPowell := false ;
5495: LD_ADDR_EXP 63
5499: PUSH
5500: LD_INT 0
5502: ST_TO_ADDR
// sTeleport := false ;
5503: LD_ADDR_EXP 66
5507: PUSH
5508: LD_INT 0
5510: ST_TO_ADDR
// sOilTower := false ;
5511: LD_ADDR_EXP 68
5515: PUSH
5516: LD_INT 0
5518: ST_TO_ADDR
// sShovel := false ;
5519: LD_ADDR_EXP 69
5523: PUSH
5524: LD_INT 0
5526: ST_TO_ADDR
// sSheik := false ;
5527: LD_ADDR_EXP 70
5531: PUSH
5532: LD_INT 0
5534: ST_TO_ADDR
// sEarthquake := false ;
5535: LD_ADDR_EXP 72
5539: PUSH
5540: LD_INT 0
5542: ST_TO_ADDR
// sAI := false ;
5543: LD_ADDR_EXP 73
5547: PUSH
5548: LD_INT 0
5550: ST_TO_ADDR
// sCargo := false ;
5551: LD_ADDR_EXP 76
5555: PUSH
5556: LD_INT 0
5558: ST_TO_ADDR
// sDLaser := false ;
5559: LD_ADDR_EXP 77
5563: PUSH
5564: LD_INT 0
5566: ST_TO_ADDR
// sExchange := false ;
5567: LD_ADDR_EXP 78
5571: PUSH
5572: LD_INT 0
5574: ST_TO_ADDR
// sFac := false ;
5575: LD_ADDR_EXP 79
5579: PUSH
5580: LD_INT 0
5582: ST_TO_ADDR
// sPower := false ;
5583: LD_ADDR_EXP 80
5587: PUSH
5588: LD_INT 0
5590: ST_TO_ADDR
// sRandom := false ;
5591: LD_ADDR_EXP 81
5595: PUSH
5596: LD_INT 0
5598: ST_TO_ADDR
// sShield := false ;
5599: LD_ADDR_EXP 82
5603: PUSH
5604: LD_INT 0
5606: ST_TO_ADDR
// sTime := false ;
5607: LD_ADDR_EXP 83
5611: PUSH
5612: LD_INT 0
5614: ST_TO_ADDR
// sTools := false ;
5615: LD_ADDR_EXP 84
5619: PUSH
5620: LD_INT 0
5622: ST_TO_ADDR
// sSold := false ;
5623: LD_ADDR_EXP 49
5627: PUSH
5628: LD_INT 0
5630: ST_TO_ADDR
// sDiff := false ;
5631: LD_ADDR_EXP 50
5635: PUSH
5636: LD_INT 0
5638: ST_TO_ADDR
// sFog := false ;
5639: LD_ADDR_EXP 53
5643: PUSH
5644: LD_INT 0
5646: ST_TO_ADDR
// sReset := false ;
5647: LD_ADDR_EXP 54
5651: PUSH
5652: LD_INT 0
5654: ST_TO_ADDR
// sSun := false ;
5655: LD_ADDR_EXP 55
5659: PUSH
5660: LD_INT 0
5662: ST_TO_ADDR
// sTiger := false ;
5663: LD_ADDR_EXP 51
5667: PUSH
5668: LD_INT 0
5670: ST_TO_ADDR
// sBomb := false ;
5671: LD_ADDR_EXP 52
5675: PUSH
5676: LD_INT 0
5678: ST_TO_ADDR
// sWound := false ;
5679: LD_ADDR_EXP 60
5683: PUSH
5684: LD_INT 0
5686: ST_TO_ADDR
// sBetray := false ;
5687: LD_ADDR_EXP 64
5691: PUSH
5692: LD_INT 0
5694: ST_TO_ADDR
// sContamin := false ;
5695: LD_ADDR_EXP 65
5699: PUSH
5700: LD_INT 0
5702: ST_TO_ADDR
// sOil := false ;
5703: LD_ADDR_EXP 67
5707: PUSH
5708: LD_INT 0
5710: ST_TO_ADDR
// sStu := false ;
5711: LD_ADDR_EXP 71
5715: PUSH
5716: LD_INT 0
5718: ST_TO_ADDR
// sBazooka := false ;
5719: LD_ADDR_EXP 74
5723: PUSH
5724: LD_INT 0
5726: ST_TO_ADDR
// sMortar := false ;
5727: LD_ADDR_EXP 75
5731: PUSH
5732: LD_INT 0
5734: ST_TO_ADDR
// sRanger := false ;
5735: LD_ADDR_EXP 85
5739: PUSH
5740: LD_INT 0
5742: ST_TO_ADDR
// end ;
5743: LD_VAR 0 1
5747: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5748: LD_INT 0
5750: PPUSH
5751: PPUSH
5752: PPUSH
5753: PPUSH
5754: PPUSH
// result := [ ] ;
5755: LD_ADDR_VAR 0 1
5759: PUSH
5760: EMPTY
5761: ST_TO_ADDR
// if campaign_id = 1 then
5762: LD_OWVAR 69
5766: PUSH
5767: LD_INT 1
5769: EQUAL
5770: IFFALSE 8708
// begin case mission_number of 1 :
5772: LD_OWVAR 70
5776: PUSH
5777: LD_INT 1
5779: DOUBLE
5780: EQUAL
5781: IFTRUE 5785
5783: GO 5849
5785: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5786: LD_ADDR_VAR 0 1
5790: PUSH
5791: LD_INT 2
5793: PUSH
5794: LD_INT 4
5796: PUSH
5797: LD_INT 11
5799: PUSH
5800: LD_INT 12
5802: PUSH
5803: LD_INT 15
5805: PUSH
5806: LD_INT 16
5808: PUSH
5809: LD_INT 22
5811: PUSH
5812: LD_INT 23
5814: PUSH
5815: LD_INT 26
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 101
5831: PUSH
5832: LD_INT 102
5834: PUSH
5835: LD_INT 106
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: LIST
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: ST_TO_ADDR
5847: GO 8706
5849: LD_INT 2
5851: DOUBLE
5852: EQUAL
5853: IFTRUE 5857
5855: GO 5929
5857: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5858: LD_ADDR_VAR 0 1
5862: PUSH
5863: LD_INT 2
5865: PUSH
5866: LD_INT 4
5868: PUSH
5869: LD_INT 11
5871: PUSH
5872: LD_INT 12
5874: PUSH
5875: LD_INT 15
5877: PUSH
5878: LD_INT 16
5880: PUSH
5881: LD_INT 22
5883: PUSH
5884: LD_INT 23
5886: PUSH
5887: LD_INT 26
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 101
5903: PUSH
5904: LD_INT 102
5906: PUSH
5907: LD_INT 105
5909: PUSH
5910: LD_INT 106
5912: PUSH
5913: LD_INT 108
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: ST_TO_ADDR
5927: GO 8706
5929: LD_INT 3
5931: DOUBLE
5932: EQUAL
5933: IFTRUE 5937
5935: GO 6013
5937: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5938: LD_ADDR_VAR 0 1
5942: PUSH
5943: LD_INT 2
5945: PUSH
5946: LD_INT 4
5948: PUSH
5949: LD_INT 5
5951: PUSH
5952: LD_INT 11
5954: PUSH
5955: LD_INT 12
5957: PUSH
5958: LD_INT 15
5960: PUSH
5961: LD_INT 16
5963: PUSH
5964: LD_INT 22
5966: PUSH
5967: LD_INT 26
5969: PUSH
5970: LD_INT 36
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 101
5987: PUSH
5988: LD_INT 102
5990: PUSH
5991: LD_INT 105
5993: PUSH
5994: LD_INT 106
5996: PUSH
5997: LD_INT 108
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: ST_TO_ADDR
6011: GO 8706
6013: LD_INT 4
6015: DOUBLE
6016: EQUAL
6017: IFTRUE 6021
6019: GO 6105
6021: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6022: LD_ADDR_VAR 0 1
6026: PUSH
6027: LD_INT 2
6029: PUSH
6030: LD_INT 4
6032: PUSH
6033: LD_INT 5
6035: PUSH
6036: LD_INT 8
6038: PUSH
6039: LD_INT 11
6041: PUSH
6042: LD_INT 12
6044: PUSH
6045: LD_INT 15
6047: PUSH
6048: LD_INT 16
6050: PUSH
6051: LD_INT 22
6053: PUSH
6054: LD_INT 23
6056: PUSH
6057: LD_INT 26
6059: PUSH
6060: LD_INT 36
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: PUSH
6077: LD_INT 101
6079: PUSH
6080: LD_INT 102
6082: PUSH
6083: LD_INT 105
6085: PUSH
6086: LD_INT 106
6088: PUSH
6089: LD_INT 108
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: ST_TO_ADDR
6103: GO 8706
6105: LD_INT 5
6107: DOUBLE
6108: EQUAL
6109: IFTRUE 6113
6111: GO 6213
6113: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6114: LD_ADDR_VAR 0 1
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: LD_INT 4
6124: PUSH
6125: LD_INT 5
6127: PUSH
6128: LD_INT 6
6130: PUSH
6131: LD_INT 8
6133: PUSH
6134: LD_INT 11
6136: PUSH
6137: LD_INT 12
6139: PUSH
6140: LD_INT 15
6142: PUSH
6143: LD_INT 16
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 23
6151: PUSH
6152: LD_INT 25
6154: PUSH
6155: LD_INT 26
6157: PUSH
6158: LD_INT 36
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 101
6179: PUSH
6180: LD_INT 102
6182: PUSH
6183: LD_INT 105
6185: PUSH
6186: LD_INT 106
6188: PUSH
6189: LD_INT 108
6191: PUSH
6192: LD_INT 109
6194: PUSH
6195: LD_INT 112
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: ST_TO_ADDR
6211: GO 8706
6213: LD_INT 6
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6221
6219: GO 6341
6221: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6222: LD_ADDR_VAR 0 1
6226: PUSH
6227: LD_INT 2
6229: PUSH
6230: LD_INT 4
6232: PUSH
6233: LD_INT 5
6235: PUSH
6236: LD_INT 6
6238: PUSH
6239: LD_INT 8
6241: PUSH
6242: LD_INT 11
6244: PUSH
6245: LD_INT 12
6247: PUSH
6248: LD_INT 15
6250: PUSH
6251: LD_INT 16
6253: PUSH
6254: LD_INT 20
6256: PUSH
6257: LD_INT 21
6259: PUSH
6260: LD_INT 22
6262: PUSH
6263: LD_INT 23
6265: PUSH
6266: LD_INT 25
6268: PUSH
6269: LD_INT 26
6271: PUSH
6272: LD_INT 30
6274: PUSH
6275: LD_INT 31
6277: PUSH
6278: LD_INT 32
6280: PUSH
6281: LD_INT 36
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: PUSH
6305: LD_INT 101
6307: PUSH
6308: LD_INT 102
6310: PUSH
6311: LD_INT 105
6313: PUSH
6314: LD_INT 106
6316: PUSH
6317: LD_INT 108
6319: PUSH
6320: LD_INT 109
6322: PUSH
6323: LD_INT 112
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: ST_TO_ADDR
6339: GO 8706
6341: LD_INT 7
6343: DOUBLE
6344: EQUAL
6345: IFTRUE 6349
6347: GO 6449
6349: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6350: LD_ADDR_VAR 0 1
6354: PUSH
6355: LD_INT 2
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 7
6366: PUSH
6367: LD_INT 11
6369: PUSH
6370: LD_INT 12
6372: PUSH
6373: LD_INT 15
6375: PUSH
6376: LD_INT 16
6378: PUSH
6379: LD_INT 20
6381: PUSH
6382: LD_INT 21
6384: PUSH
6385: LD_INT 22
6387: PUSH
6388: LD_INT 23
6390: PUSH
6391: LD_INT 25
6393: PUSH
6394: LD_INT 26
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 101
6415: PUSH
6416: LD_INT 102
6418: PUSH
6419: LD_INT 103
6421: PUSH
6422: LD_INT 105
6424: PUSH
6425: LD_INT 106
6427: PUSH
6428: LD_INT 108
6430: PUSH
6431: LD_INT 112
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: ST_TO_ADDR
6447: GO 8706
6449: LD_INT 8
6451: DOUBLE
6452: EQUAL
6453: IFTRUE 6457
6455: GO 6585
6457: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6458: LD_ADDR_VAR 0 1
6462: PUSH
6463: LD_INT 2
6465: PUSH
6466: LD_INT 4
6468: PUSH
6469: LD_INT 5
6471: PUSH
6472: LD_INT 6
6474: PUSH
6475: LD_INT 7
6477: PUSH
6478: LD_INT 8
6480: PUSH
6481: LD_INT 11
6483: PUSH
6484: LD_INT 12
6486: PUSH
6487: LD_INT 15
6489: PUSH
6490: LD_INT 16
6492: PUSH
6493: LD_INT 20
6495: PUSH
6496: LD_INT 21
6498: PUSH
6499: LD_INT 22
6501: PUSH
6502: LD_INT 23
6504: PUSH
6505: LD_INT 25
6507: PUSH
6508: LD_INT 26
6510: PUSH
6511: LD_INT 30
6513: PUSH
6514: LD_INT 31
6516: PUSH
6517: LD_INT 32
6519: PUSH
6520: LD_INT 36
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 101
6547: PUSH
6548: LD_INT 102
6550: PUSH
6551: LD_INT 103
6553: PUSH
6554: LD_INT 105
6556: PUSH
6557: LD_INT 106
6559: PUSH
6560: LD_INT 108
6562: PUSH
6563: LD_INT 109
6565: PUSH
6566: LD_INT 112
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: ST_TO_ADDR
6583: GO 8706
6585: LD_INT 9
6587: DOUBLE
6588: EQUAL
6589: IFTRUE 6593
6591: GO 6729
6593: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6594: LD_ADDR_VAR 0 1
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: LD_INT 4
6604: PUSH
6605: LD_INT 5
6607: PUSH
6608: LD_INT 6
6610: PUSH
6611: LD_INT 7
6613: PUSH
6614: LD_INT 8
6616: PUSH
6617: LD_INT 11
6619: PUSH
6620: LD_INT 12
6622: PUSH
6623: LD_INT 15
6625: PUSH
6626: LD_INT 16
6628: PUSH
6629: LD_INT 20
6631: PUSH
6632: LD_INT 21
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 23
6640: PUSH
6641: LD_INT 25
6643: PUSH
6644: LD_INT 26
6646: PUSH
6647: LD_INT 28
6649: PUSH
6650: LD_INT 30
6652: PUSH
6653: LD_INT 31
6655: PUSH
6656: LD_INT 32
6658: PUSH
6659: LD_INT 36
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: PUSH
6685: LD_INT 101
6687: PUSH
6688: LD_INT 102
6690: PUSH
6691: LD_INT 103
6693: PUSH
6694: LD_INT 105
6696: PUSH
6697: LD_INT 106
6699: PUSH
6700: LD_INT 108
6702: PUSH
6703: LD_INT 109
6705: PUSH
6706: LD_INT 112
6708: PUSH
6709: LD_INT 114
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: ST_TO_ADDR
6727: GO 8706
6729: LD_INT 10
6731: DOUBLE
6732: EQUAL
6733: IFTRUE 6737
6735: GO 6921
6737: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6738: LD_ADDR_VAR 0 1
6742: PUSH
6743: LD_INT 2
6745: PUSH
6746: LD_INT 4
6748: PUSH
6749: LD_INT 5
6751: PUSH
6752: LD_INT 6
6754: PUSH
6755: LD_INT 7
6757: PUSH
6758: LD_INT 8
6760: PUSH
6761: LD_INT 9
6763: PUSH
6764: LD_INT 10
6766: PUSH
6767: LD_INT 11
6769: PUSH
6770: LD_INT 12
6772: PUSH
6773: LD_INT 13
6775: PUSH
6776: LD_INT 14
6778: PUSH
6779: LD_INT 15
6781: PUSH
6782: LD_INT 16
6784: PUSH
6785: LD_INT 17
6787: PUSH
6788: LD_INT 18
6790: PUSH
6791: LD_INT 19
6793: PUSH
6794: LD_INT 20
6796: PUSH
6797: LD_INT 21
6799: PUSH
6800: LD_INT 22
6802: PUSH
6803: LD_INT 23
6805: PUSH
6806: LD_INT 24
6808: PUSH
6809: LD_INT 25
6811: PUSH
6812: LD_INT 26
6814: PUSH
6815: LD_INT 28
6817: PUSH
6818: LD_INT 30
6820: PUSH
6821: LD_INT 31
6823: PUSH
6824: LD_INT 32
6826: PUSH
6827: LD_INT 36
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 101
6863: PUSH
6864: LD_INT 102
6866: PUSH
6867: LD_INT 103
6869: PUSH
6870: LD_INT 104
6872: PUSH
6873: LD_INT 105
6875: PUSH
6876: LD_INT 106
6878: PUSH
6879: LD_INT 107
6881: PUSH
6882: LD_INT 108
6884: PUSH
6885: LD_INT 109
6887: PUSH
6888: LD_INT 110
6890: PUSH
6891: LD_INT 111
6893: PUSH
6894: LD_INT 112
6896: PUSH
6897: LD_INT 114
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: ST_TO_ADDR
6919: GO 8706
6921: LD_INT 11
6923: DOUBLE
6924: EQUAL
6925: IFTRUE 6929
6927: GO 7121
6929: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6930: LD_ADDR_VAR 0 1
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 3
6940: PUSH
6941: LD_INT 4
6943: PUSH
6944: LD_INT 5
6946: PUSH
6947: LD_INT 6
6949: PUSH
6950: LD_INT 7
6952: PUSH
6953: LD_INT 8
6955: PUSH
6956: LD_INT 9
6958: PUSH
6959: LD_INT 10
6961: PUSH
6962: LD_INT 11
6964: PUSH
6965: LD_INT 12
6967: PUSH
6968: LD_INT 13
6970: PUSH
6971: LD_INT 14
6973: PUSH
6974: LD_INT 15
6976: PUSH
6977: LD_INT 16
6979: PUSH
6980: LD_INT 17
6982: PUSH
6983: LD_INT 18
6985: PUSH
6986: LD_INT 19
6988: PUSH
6989: LD_INT 20
6991: PUSH
6992: LD_INT 21
6994: PUSH
6995: LD_INT 22
6997: PUSH
6998: LD_INT 23
7000: PUSH
7001: LD_INT 24
7003: PUSH
7004: LD_INT 25
7006: PUSH
7007: LD_INT 26
7009: PUSH
7010: LD_INT 28
7012: PUSH
7013: LD_INT 30
7015: PUSH
7016: LD_INT 31
7018: PUSH
7019: LD_INT 32
7021: PUSH
7022: LD_INT 34
7024: PUSH
7025: LD_INT 36
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 101
7063: PUSH
7064: LD_INT 102
7066: PUSH
7067: LD_INT 103
7069: PUSH
7070: LD_INT 104
7072: PUSH
7073: LD_INT 105
7075: PUSH
7076: LD_INT 106
7078: PUSH
7079: LD_INT 107
7081: PUSH
7082: LD_INT 108
7084: PUSH
7085: LD_INT 109
7087: PUSH
7088: LD_INT 110
7090: PUSH
7091: LD_INT 111
7093: PUSH
7094: LD_INT 112
7096: PUSH
7097: LD_INT 114
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: ST_TO_ADDR
7119: GO 8706
7121: LD_INT 12
7123: DOUBLE
7124: EQUAL
7125: IFTRUE 7129
7127: GO 7337
7129: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7130: LD_ADDR_VAR 0 1
7134: PUSH
7135: LD_INT 1
7137: PUSH
7138: LD_INT 2
7140: PUSH
7141: LD_INT 3
7143: PUSH
7144: LD_INT 4
7146: PUSH
7147: LD_INT 5
7149: PUSH
7150: LD_INT 6
7152: PUSH
7153: LD_INT 7
7155: PUSH
7156: LD_INT 8
7158: PUSH
7159: LD_INT 9
7161: PUSH
7162: LD_INT 10
7164: PUSH
7165: LD_INT 11
7167: PUSH
7168: LD_INT 12
7170: PUSH
7171: LD_INT 13
7173: PUSH
7174: LD_INT 14
7176: PUSH
7177: LD_INT 15
7179: PUSH
7180: LD_INT 16
7182: PUSH
7183: LD_INT 17
7185: PUSH
7186: LD_INT 18
7188: PUSH
7189: LD_INT 19
7191: PUSH
7192: LD_INT 20
7194: PUSH
7195: LD_INT 21
7197: PUSH
7198: LD_INT 22
7200: PUSH
7201: LD_INT 23
7203: PUSH
7204: LD_INT 24
7206: PUSH
7207: LD_INT 25
7209: PUSH
7210: LD_INT 26
7212: PUSH
7213: LD_INT 27
7215: PUSH
7216: LD_INT 28
7218: PUSH
7219: LD_INT 30
7221: PUSH
7222: LD_INT 31
7224: PUSH
7225: LD_INT 32
7227: PUSH
7228: LD_INT 33
7230: PUSH
7231: LD_INT 34
7233: PUSH
7234: LD_INT 36
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 101
7275: PUSH
7276: LD_INT 102
7278: PUSH
7279: LD_INT 103
7281: PUSH
7282: LD_INT 104
7284: PUSH
7285: LD_INT 105
7287: PUSH
7288: LD_INT 106
7290: PUSH
7291: LD_INT 107
7293: PUSH
7294: LD_INT 108
7296: PUSH
7297: LD_INT 109
7299: PUSH
7300: LD_INT 110
7302: PUSH
7303: LD_INT 111
7305: PUSH
7306: LD_INT 112
7308: PUSH
7309: LD_INT 113
7311: PUSH
7312: LD_INT 114
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: ST_TO_ADDR
7335: GO 8706
7337: LD_INT 13
7339: DOUBLE
7340: EQUAL
7341: IFTRUE 7345
7343: GO 7541
7345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7346: LD_ADDR_VAR 0 1
7350: PUSH
7351: LD_INT 1
7353: PUSH
7354: LD_INT 2
7356: PUSH
7357: LD_INT 3
7359: PUSH
7360: LD_INT 4
7362: PUSH
7363: LD_INT 5
7365: PUSH
7366: LD_INT 8
7368: PUSH
7369: LD_INT 9
7371: PUSH
7372: LD_INT 10
7374: PUSH
7375: LD_INT 11
7377: PUSH
7378: LD_INT 12
7380: PUSH
7381: LD_INT 14
7383: PUSH
7384: LD_INT 15
7386: PUSH
7387: LD_INT 16
7389: PUSH
7390: LD_INT 17
7392: PUSH
7393: LD_INT 18
7395: PUSH
7396: LD_INT 19
7398: PUSH
7399: LD_INT 20
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_INT 23
7410: PUSH
7411: LD_INT 24
7413: PUSH
7414: LD_INT 25
7416: PUSH
7417: LD_INT 26
7419: PUSH
7420: LD_INT 27
7422: PUSH
7423: LD_INT 28
7425: PUSH
7426: LD_INT 30
7428: PUSH
7429: LD_INT 31
7431: PUSH
7432: LD_INT 32
7434: PUSH
7435: LD_INT 33
7437: PUSH
7438: LD_INT 34
7440: PUSH
7441: LD_INT 36
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: PUSH
7477: LD_INT 101
7479: PUSH
7480: LD_INT 102
7482: PUSH
7483: LD_INT 103
7485: PUSH
7486: LD_INT 104
7488: PUSH
7489: LD_INT 105
7491: PUSH
7492: LD_INT 106
7494: PUSH
7495: LD_INT 107
7497: PUSH
7498: LD_INT 108
7500: PUSH
7501: LD_INT 109
7503: PUSH
7504: LD_INT 110
7506: PUSH
7507: LD_INT 111
7509: PUSH
7510: LD_INT 112
7512: PUSH
7513: LD_INT 113
7515: PUSH
7516: LD_INT 114
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: ST_TO_ADDR
7539: GO 8706
7541: LD_INT 14
7543: DOUBLE
7544: EQUAL
7545: IFTRUE 7549
7547: GO 7761
7549: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7550: LD_ADDR_VAR 0 1
7554: PUSH
7555: LD_INT 1
7557: PUSH
7558: LD_INT 2
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: LD_INT 4
7566: PUSH
7567: LD_INT 5
7569: PUSH
7570: LD_INT 6
7572: PUSH
7573: LD_INT 7
7575: PUSH
7576: LD_INT 8
7578: PUSH
7579: LD_INT 9
7581: PUSH
7582: LD_INT 10
7584: PUSH
7585: LD_INT 11
7587: PUSH
7588: LD_INT 12
7590: PUSH
7591: LD_INT 13
7593: PUSH
7594: LD_INT 14
7596: PUSH
7597: LD_INT 15
7599: PUSH
7600: LD_INT 16
7602: PUSH
7603: LD_INT 17
7605: PUSH
7606: LD_INT 18
7608: PUSH
7609: LD_INT 19
7611: PUSH
7612: LD_INT 20
7614: PUSH
7615: LD_INT 21
7617: PUSH
7618: LD_INT 22
7620: PUSH
7621: LD_INT 23
7623: PUSH
7624: LD_INT 24
7626: PUSH
7627: LD_INT 25
7629: PUSH
7630: LD_INT 26
7632: PUSH
7633: LD_INT 27
7635: PUSH
7636: LD_INT 28
7638: PUSH
7639: LD_INT 29
7641: PUSH
7642: LD_INT 30
7644: PUSH
7645: LD_INT 31
7647: PUSH
7648: LD_INT 32
7650: PUSH
7651: LD_INT 33
7653: PUSH
7654: LD_INT 34
7656: PUSH
7657: LD_INT 36
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 101
7699: PUSH
7700: LD_INT 102
7702: PUSH
7703: LD_INT 103
7705: PUSH
7706: LD_INT 104
7708: PUSH
7709: LD_INT 105
7711: PUSH
7712: LD_INT 106
7714: PUSH
7715: LD_INT 107
7717: PUSH
7718: LD_INT 108
7720: PUSH
7721: LD_INT 109
7723: PUSH
7724: LD_INT 110
7726: PUSH
7727: LD_INT 111
7729: PUSH
7730: LD_INT 112
7732: PUSH
7733: LD_INT 113
7735: PUSH
7736: LD_INT 114
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: ST_TO_ADDR
7759: GO 8706
7761: LD_INT 15
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7981
7769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7770: LD_ADDR_VAR 0 1
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: LD_INT 2
7780: PUSH
7781: LD_INT 3
7783: PUSH
7784: LD_INT 4
7786: PUSH
7787: LD_INT 5
7789: PUSH
7790: LD_INT 6
7792: PUSH
7793: LD_INT 7
7795: PUSH
7796: LD_INT 8
7798: PUSH
7799: LD_INT 9
7801: PUSH
7802: LD_INT 10
7804: PUSH
7805: LD_INT 11
7807: PUSH
7808: LD_INT 12
7810: PUSH
7811: LD_INT 13
7813: PUSH
7814: LD_INT 14
7816: PUSH
7817: LD_INT 15
7819: PUSH
7820: LD_INT 16
7822: PUSH
7823: LD_INT 17
7825: PUSH
7826: LD_INT 18
7828: PUSH
7829: LD_INT 19
7831: PUSH
7832: LD_INT 20
7834: PUSH
7835: LD_INT 21
7837: PUSH
7838: LD_INT 22
7840: PUSH
7841: LD_INT 23
7843: PUSH
7844: LD_INT 24
7846: PUSH
7847: LD_INT 25
7849: PUSH
7850: LD_INT 26
7852: PUSH
7853: LD_INT 27
7855: PUSH
7856: LD_INT 28
7858: PUSH
7859: LD_INT 29
7861: PUSH
7862: LD_INT 30
7864: PUSH
7865: LD_INT 31
7867: PUSH
7868: LD_INT 32
7870: PUSH
7871: LD_INT 33
7873: PUSH
7874: LD_INT 34
7876: PUSH
7877: LD_INT 36
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 101
7919: PUSH
7920: LD_INT 102
7922: PUSH
7923: LD_INT 103
7925: PUSH
7926: LD_INT 104
7928: PUSH
7929: LD_INT 105
7931: PUSH
7932: LD_INT 106
7934: PUSH
7935: LD_INT 107
7937: PUSH
7938: LD_INT 108
7940: PUSH
7941: LD_INT 109
7943: PUSH
7944: LD_INT 110
7946: PUSH
7947: LD_INT 111
7949: PUSH
7950: LD_INT 112
7952: PUSH
7953: LD_INT 113
7955: PUSH
7956: LD_INT 114
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: ST_TO_ADDR
7979: GO 8706
7981: LD_INT 16
7983: DOUBLE
7984: EQUAL
7985: IFTRUE 7989
7987: GO 8113
7989: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7990: LD_ADDR_VAR 0 1
7994: PUSH
7995: LD_INT 2
7997: PUSH
7998: LD_INT 4
8000: PUSH
8001: LD_INT 5
8003: PUSH
8004: LD_INT 7
8006: PUSH
8007: LD_INT 11
8009: PUSH
8010: LD_INT 12
8012: PUSH
8013: LD_INT 15
8015: PUSH
8016: LD_INT 16
8018: PUSH
8019: LD_INT 20
8021: PUSH
8022: LD_INT 21
8024: PUSH
8025: LD_INT 22
8027: PUSH
8028: LD_INT 23
8030: PUSH
8031: LD_INT 25
8033: PUSH
8034: LD_INT 26
8036: PUSH
8037: LD_INT 30
8039: PUSH
8040: LD_INT 31
8042: PUSH
8043: LD_INT 32
8045: PUSH
8046: LD_INT 33
8048: PUSH
8049: LD_INT 34
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 101
8075: PUSH
8076: LD_INT 102
8078: PUSH
8079: LD_INT 103
8081: PUSH
8082: LD_INT 106
8084: PUSH
8085: LD_INT 108
8087: PUSH
8088: LD_INT 112
8090: PUSH
8091: LD_INT 113
8093: PUSH
8094: LD_INT 114
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: ST_TO_ADDR
8111: GO 8706
8113: LD_INT 17
8115: DOUBLE
8116: EQUAL
8117: IFTRUE 8121
8119: GO 8333
8121: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8122: LD_ADDR_VAR 0 1
8126: PUSH
8127: LD_INT 1
8129: PUSH
8130: LD_INT 2
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: LD_INT 4
8138: PUSH
8139: LD_INT 5
8141: PUSH
8142: LD_INT 6
8144: PUSH
8145: LD_INT 7
8147: PUSH
8148: LD_INT 8
8150: PUSH
8151: LD_INT 9
8153: PUSH
8154: LD_INT 10
8156: PUSH
8157: LD_INT 11
8159: PUSH
8160: LD_INT 12
8162: PUSH
8163: LD_INT 13
8165: PUSH
8166: LD_INT 14
8168: PUSH
8169: LD_INT 15
8171: PUSH
8172: LD_INT 16
8174: PUSH
8175: LD_INT 17
8177: PUSH
8178: LD_INT 18
8180: PUSH
8181: LD_INT 19
8183: PUSH
8184: LD_INT 20
8186: PUSH
8187: LD_INT 21
8189: PUSH
8190: LD_INT 22
8192: PUSH
8193: LD_INT 23
8195: PUSH
8196: LD_INT 24
8198: PUSH
8199: LD_INT 25
8201: PUSH
8202: LD_INT 26
8204: PUSH
8205: LD_INT 27
8207: PUSH
8208: LD_INT 28
8210: PUSH
8211: LD_INT 29
8213: PUSH
8214: LD_INT 30
8216: PUSH
8217: LD_INT 31
8219: PUSH
8220: LD_INT 32
8222: PUSH
8223: LD_INT 33
8225: PUSH
8226: LD_INT 34
8228: PUSH
8229: LD_INT 36
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 101
8271: PUSH
8272: LD_INT 102
8274: PUSH
8275: LD_INT 103
8277: PUSH
8278: LD_INT 104
8280: PUSH
8281: LD_INT 105
8283: PUSH
8284: LD_INT 106
8286: PUSH
8287: LD_INT 107
8289: PUSH
8290: LD_INT 108
8292: PUSH
8293: LD_INT 109
8295: PUSH
8296: LD_INT 110
8298: PUSH
8299: LD_INT 111
8301: PUSH
8302: LD_INT 112
8304: PUSH
8305: LD_INT 113
8307: PUSH
8308: LD_INT 114
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: ST_TO_ADDR
8331: GO 8706
8333: LD_INT 18
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8477
8341: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8342: LD_ADDR_VAR 0 1
8346: PUSH
8347: LD_INT 2
8349: PUSH
8350: LD_INT 4
8352: PUSH
8353: LD_INT 5
8355: PUSH
8356: LD_INT 7
8358: PUSH
8359: LD_INT 11
8361: PUSH
8362: LD_INT 12
8364: PUSH
8365: LD_INT 15
8367: PUSH
8368: LD_INT 16
8370: PUSH
8371: LD_INT 20
8373: PUSH
8374: LD_INT 21
8376: PUSH
8377: LD_INT 22
8379: PUSH
8380: LD_INT 23
8382: PUSH
8383: LD_INT 25
8385: PUSH
8386: LD_INT 26
8388: PUSH
8389: LD_INT 30
8391: PUSH
8392: LD_INT 31
8394: PUSH
8395: LD_INT 32
8397: PUSH
8398: LD_INT 33
8400: PUSH
8401: LD_INT 34
8403: PUSH
8404: LD_INT 35
8406: PUSH
8407: LD_INT 36
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: PUSH
8433: LD_INT 101
8435: PUSH
8436: LD_INT 102
8438: PUSH
8439: LD_INT 103
8441: PUSH
8442: LD_INT 106
8444: PUSH
8445: LD_INT 108
8447: PUSH
8448: LD_INT 112
8450: PUSH
8451: LD_INT 113
8453: PUSH
8454: LD_INT 114
8456: PUSH
8457: LD_INT 115
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: ST_TO_ADDR
8475: GO 8706
8477: LD_INT 19
8479: DOUBLE
8480: EQUAL
8481: IFTRUE 8485
8483: GO 8705
8485: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8486: LD_ADDR_VAR 0 1
8490: PUSH
8491: LD_INT 1
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: LD_INT 3
8499: PUSH
8500: LD_INT 4
8502: PUSH
8503: LD_INT 5
8505: PUSH
8506: LD_INT 6
8508: PUSH
8509: LD_INT 7
8511: PUSH
8512: LD_INT 8
8514: PUSH
8515: LD_INT 9
8517: PUSH
8518: LD_INT 10
8520: PUSH
8521: LD_INT 11
8523: PUSH
8524: LD_INT 12
8526: PUSH
8527: LD_INT 13
8529: PUSH
8530: LD_INT 14
8532: PUSH
8533: LD_INT 15
8535: PUSH
8536: LD_INT 16
8538: PUSH
8539: LD_INT 17
8541: PUSH
8542: LD_INT 18
8544: PUSH
8545: LD_INT 19
8547: PUSH
8548: LD_INT 20
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 22
8556: PUSH
8557: LD_INT 23
8559: PUSH
8560: LD_INT 24
8562: PUSH
8563: LD_INT 25
8565: PUSH
8566: LD_INT 26
8568: PUSH
8569: LD_INT 27
8571: PUSH
8572: LD_INT 28
8574: PUSH
8575: LD_INT 29
8577: PUSH
8578: LD_INT 30
8580: PUSH
8581: LD_INT 31
8583: PUSH
8584: LD_INT 32
8586: PUSH
8587: LD_INT 33
8589: PUSH
8590: LD_INT 34
8592: PUSH
8593: LD_INT 35
8595: PUSH
8596: LD_INT 36
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 101
8639: PUSH
8640: LD_INT 102
8642: PUSH
8643: LD_INT 103
8645: PUSH
8646: LD_INT 104
8648: PUSH
8649: LD_INT 105
8651: PUSH
8652: LD_INT 106
8654: PUSH
8655: LD_INT 107
8657: PUSH
8658: LD_INT 108
8660: PUSH
8661: LD_INT 109
8663: PUSH
8664: LD_INT 110
8666: PUSH
8667: LD_INT 111
8669: PUSH
8670: LD_INT 112
8672: PUSH
8673: LD_INT 113
8675: PUSH
8676: LD_INT 114
8678: PUSH
8679: LD_INT 115
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: ST_TO_ADDR
8703: GO 8706
8705: POP
// end else
8706: GO 8925
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8708: LD_ADDR_VAR 0 1
8712: PUSH
8713: LD_INT 1
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: LD_INT 3
8721: PUSH
8722: LD_INT 4
8724: PUSH
8725: LD_INT 5
8727: PUSH
8728: LD_INT 6
8730: PUSH
8731: LD_INT 7
8733: PUSH
8734: LD_INT 8
8736: PUSH
8737: LD_INT 9
8739: PUSH
8740: LD_INT 10
8742: PUSH
8743: LD_INT 11
8745: PUSH
8746: LD_INT 12
8748: PUSH
8749: LD_INT 13
8751: PUSH
8752: LD_INT 14
8754: PUSH
8755: LD_INT 15
8757: PUSH
8758: LD_INT 16
8760: PUSH
8761: LD_INT 17
8763: PUSH
8764: LD_INT 18
8766: PUSH
8767: LD_INT 19
8769: PUSH
8770: LD_INT 20
8772: PUSH
8773: LD_INT 21
8775: PUSH
8776: LD_INT 22
8778: PUSH
8779: LD_INT 23
8781: PUSH
8782: LD_INT 24
8784: PUSH
8785: LD_INT 25
8787: PUSH
8788: LD_INT 26
8790: PUSH
8791: LD_INT 27
8793: PUSH
8794: LD_INT 28
8796: PUSH
8797: LD_INT 29
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 31
8805: PUSH
8806: LD_INT 32
8808: PUSH
8809: LD_INT 33
8811: PUSH
8812: LD_INT 34
8814: PUSH
8815: LD_INT 35
8817: PUSH
8818: LD_INT 36
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 101
8861: PUSH
8862: LD_INT 102
8864: PUSH
8865: LD_INT 103
8867: PUSH
8868: LD_INT 104
8870: PUSH
8871: LD_INT 105
8873: PUSH
8874: LD_INT 106
8876: PUSH
8877: LD_INT 107
8879: PUSH
8880: LD_INT 108
8882: PUSH
8883: LD_INT 109
8885: PUSH
8886: LD_INT 110
8888: PUSH
8889: LD_INT 111
8891: PUSH
8892: LD_INT 112
8894: PUSH
8895: LD_INT 113
8897: PUSH
8898: LD_INT 114
8900: PUSH
8901: LD_INT 115
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: ST_TO_ADDR
// if result then
8925: LD_VAR 0 1
8929: IFFALSE 9218
// begin normal :=  ;
8931: LD_ADDR_VAR 0 3
8935: PUSH
8936: LD_STRING 
8938: ST_TO_ADDR
// hardcore :=  ;
8939: LD_ADDR_VAR 0 4
8943: PUSH
8944: LD_STRING 
8946: ST_TO_ADDR
// for i = 1 to normalCounter do
8947: LD_ADDR_VAR 0 5
8951: PUSH
8952: DOUBLE
8953: LD_INT 1
8955: DEC
8956: ST_TO_ADDR
8957: LD_EXP 33
8961: PUSH
8962: FOR_TO
8963: IFFALSE 9064
// begin tmp := 0 ;
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_STRING 0
8972: ST_TO_ADDR
// if result [ 1 ] then
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 1
8980: ARRAY
8981: IFFALSE 9046
// if result [ 1 ] [ 1 ] = i then
8983: LD_VAR 0 1
8987: PUSH
8988: LD_INT 1
8990: ARRAY
8991: PUSH
8992: LD_INT 1
8994: ARRAY
8995: PUSH
8996: LD_VAR 0 5
9000: EQUAL
9001: IFFALSE 9046
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9003: LD_ADDR_VAR 0 1
9007: PUSH
9008: LD_VAR 0 1
9012: PPUSH
9013: LD_INT 1
9015: PPUSH
9016: LD_VAR 0 1
9020: PUSH
9021: LD_INT 1
9023: ARRAY
9024: PPUSH
9025: LD_INT 1
9027: PPUSH
9028: CALL_OW 3
9032: PPUSH
9033: CALL_OW 1
9037: ST_TO_ADDR
// tmp := 1 ;
9038: LD_ADDR_VAR 0 2
9042: PUSH
9043: LD_STRING 1
9045: ST_TO_ADDR
// end ; normal := normal & tmp ;
9046: LD_ADDR_VAR 0 3
9050: PUSH
9051: LD_VAR 0 3
9055: PUSH
9056: LD_VAR 0 2
9060: STR
9061: ST_TO_ADDR
// end ;
9062: GO 8962
9064: POP
9065: POP
// for i = 1 to hardcoreCounter do
9066: LD_ADDR_VAR 0 5
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_EXP 34
9080: PUSH
9081: FOR_TO
9082: IFFALSE 9187
// begin tmp := 0 ;
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: LD_STRING 0
9091: ST_TO_ADDR
// if result [ 2 ] then
9092: LD_VAR 0 1
9096: PUSH
9097: LD_INT 2
9099: ARRAY
9100: IFFALSE 9169
// if result [ 2 ] [ 1 ] = 100 + i then
9102: LD_VAR 0 1
9106: PUSH
9107: LD_INT 2
9109: ARRAY
9110: PUSH
9111: LD_INT 1
9113: ARRAY
9114: PUSH
9115: LD_INT 100
9117: PUSH
9118: LD_VAR 0 5
9122: PLUS
9123: EQUAL
9124: IFFALSE 9169
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9126: LD_ADDR_VAR 0 1
9130: PUSH
9131: LD_VAR 0 1
9135: PPUSH
9136: LD_INT 2
9138: PPUSH
9139: LD_VAR 0 1
9143: PUSH
9144: LD_INT 2
9146: ARRAY
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL_OW 3
9155: PPUSH
9156: CALL_OW 1
9160: ST_TO_ADDR
// tmp := 1 ;
9161: LD_ADDR_VAR 0 2
9165: PUSH
9166: LD_STRING 1
9168: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9169: LD_ADDR_VAR 0 4
9173: PUSH
9174: LD_VAR 0 4
9178: PUSH
9179: LD_VAR 0 2
9183: STR
9184: ST_TO_ADDR
// end ;
9185: GO 9081
9187: POP
9188: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9189: LD_STRING getStreamItemsFromMission("
9191: PUSH
9192: LD_VAR 0 3
9196: STR
9197: PUSH
9198: LD_STRING ","
9200: STR
9201: PUSH
9202: LD_VAR 0 4
9206: STR
9207: PUSH
9208: LD_STRING ")
9210: STR
9211: PPUSH
9212: CALL_OW 559
// end else
9216: GO 9225
// ToLua ( getStreamItemsFromMission("","") ) ;
9218: LD_STRING getStreamItemsFromMission("","")
9220: PPUSH
9221: CALL_OW 559
// end ;
9225: LD_VAR 0 1
9229: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9230: LD_EXP 32
9234: PUSH
9235: LD_EXP 37
9239: AND
9240: IFFALSE 9364
9242: GO 9244
9244: DISABLE
9245: LD_INT 0
9247: PPUSH
9248: PPUSH
// begin enable ;
9249: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9250: LD_ADDR_VAR 0 2
9254: PUSH
9255: LD_INT 22
9257: PUSH
9258: LD_OWVAR 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 2
9269: PUSH
9270: LD_INT 34
9272: PUSH
9273: LD_INT 7
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 34
9282: PUSH
9283: LD_INT 45
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 34
9292: PUSH
9293: LD_INT 28
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 34
9302: PUSH
9303: LD_INT 47
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PPUSH
9321: CALL_OW 69
9325: ST_TO_ADDR
// if not tmp then
9326: LD_VAR 0 2
9330: NOT
9331: IFFALSE 9335
// exit ;
9333: GO 9364
// for i in tmp do
9335: LD_ADDR_VAR 0 1
9339: PUSH
9340: LD_VAR 0 2
9344: PUSH
9345: FOR_IN
9346: IFFALSE 9362
// begin SetLives ( i , 0 ) ;
9348: LD_VAR 0 1
9352: PPUSH
9353: LD_INT 0
9355: PPUSH
9356: CALL_OW 234
// end ;
9360: GO 9345
9362: POP
9363: POP
// end ;
9364: PPOPN 2
9366: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9367: LD_EXP 32
9371: PUSH
9372: LD_EXP 38
9376: AND
9377: IFFALSE 9461
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
// begin enable ;
9386: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: LD_INT 22
9394: PUSH
9395: LD_OWVAR 2
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 32
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 69
9422: ST_TO_ADDR
// if not tmp then
9423: LD_VAR 0 2
9427: NOT
9428: IFFALSE 9432
// exit ;
9430: GO 9461
// for i in tmp do
9432: LD_ADDR_VAR 0 1
9436: PUSH
9437: LD_VAR 0 2
9441: PUSH
9442: FOR_IN
9443: IFFALSE 9459
// begin SetLives ( i , 0 ) ;
9445: LD_VAR 0 1
9449: PPUSH
9450: LD_INT 0
9452: PPUSH
9453: CALL_OW 234
// end ;
9457: GO 9442
9459: POP
9460: POP
// end ;
9461: PPOPN 2
9463: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9464: LD_EXP 32
9468: PUSH
9469: LD_EXP 35
9473: AND
9474: IFFALSE 9567
9476: GO 9478
9478: DISABLE
9479: LD_INT 0
9481: PPUSH
// begin enable ;
9482: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9483: LD_ADDR_VAR 0 1
9487: PUSH
9488: LD_INT 22
9490: PUSH
9491: LD_OWVAR 2
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: LD_INT 25
9505: PUSH
9506: LD_INT 5
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: LD_INT 25
9515: PUSH
9516: LD_INT 9
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 25
9525: PUSH
9526: LD_INT 8
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PPUSH
9543: CALL_OW 69
9547: PUSH
9548: FOR_IN
9549: IFFALSE 9565
// begin SetClass ( i , 1 ) ;
9551: LD_VAR 0 1
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: CALL_OW 336
// end ;
9563: GO 9548
9565: POP
9566: POP
// end ;
9567: PPOPN 1
9569: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9570: LD_EXP 32
9574: PUSH
9575: LD_EXP 36
9579: AND
9580: PUSH
9581: LD_OWVAR 65
9585: PUSH
9586: LD_INT 7
9588: LESS
9589: AND
9590: IFFALSE 9604
9592: GO 9594
9594: DISABLE
// begin enable ;
9595: ENABLE
// game_speed := 7 ;
9596: LD_ADDR_OWVAR 65
9600: PUSH
9601: LD_INT 7
9603: ST_TO_ADDR
// end ;
9604: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9605: LD_EXP 32
9609: PUSH
9610: LD_EXP 39
9614: AND
9615: IFFALSE 9817
9617: GO 9619
9619: DISABLE
9620: LD_INT 0
9622: PPUSH
9623: PPUSH
9624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9625: LD_ADDR_VAR 0 3
9629: PUSH
9630: LD_INT 81
9632: PUSH
9633: LD_OWVAR 2
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 21
9644: PUSH
9645: LD_INT 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PPUSH
9656: CALL_OW 69
9660: ST_TO_ADDR
// if not tmp then
9661: LD_VAR 0 3
9665: NOT
9666: IFFALSE 9670
// exit ;
9668: GO 9817
// if tmp > 5 then
9670: LD_VAR 0 3
9674: PUSH
9675: LD_INT 5
9677: GREATER
9678: IFFALSE 9690
// k := 5 else
9680: LD_ADDR_VAR 0 2
9684: PUSH
9685: LD_INT 5
9687: ST_TO_ADDR
9688: GO 9700
// k := tmp ;
9690: LD_ADDR_VAR 0 2
9694: PUSH
9695: LD_VAR 0 3
9699: ST_TO_ADDR
// for i := 1 to k do
9700: LD_ADDR_VAR 0 1
9704: PUSH
9705: DOUBLE
9706: LD_INT 1
9708: DEC
9709: ST_TO_ADDR
9710: LD_VAR 0 2
9714: PUSH
9715: FOR_TO
9716: IFFALSE 9815
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9718: LD_VAR 0 3
9722: PUSH
9723: LD_VAR 0 1
9727: ARRAY
9728: PPUSH
9729: LD_VAR 0 1
9733: PUSH
9734: LD_INT 4
9736: MOD
9737: PUSH
9738: LD_INT 1
9740: PLUS
9741: PPUSH
9742: CALL_OW 259
9746: PUSH
9747: LD_INT 10
9749: LESS
9750: IFFALSE 9813
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9752: LD_VAR 0 3
9756: PUSH
9757: LD_VAR 0 1
9761: ARRAY
9762: PPUSH
9763: LD_VAR 0 1
9767: PUSH
9768: LD_INT 4
9770: MOD
9771: PUSH
9772: LD_INT 1
9774: PLUS
9775: PPUSH
9776: LD_VAR 0 3
9780: PUSH
9781: LD_VAR 0 1
9785: ARRAY
9786: PPUSH
9787: LD_VAR 0 1
9791: PUSH
9792: LD_INT 4
9794: MOD
9795: PUSH
9796: LD_INT 1
9798: PLUS
9799: PPUSH
9800: CALL_OW 259
9804: PUSH
9805: LD_INT 1
9807: PLUS
9808: PPUSH
9809: CALL_OW 237
9813: GO 9715
9815: POP
9816: POP
// end ;
9817: PPOPN 3
9819: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9820: LD_EXP 32
9824: PUSH
9825: LD_EXP 40
9829: AND
9830: IFFALSE 9850
9832: GO 9834
9834: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9835: LD_INT 4
9837: PPUSH
9838: LD_OWVAR 2
9842: PPUSH
9843: LD_INT 0
9845: PPUSH
9846: CALL_OW 324
9850: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9851: LD_EXP 32
9855: PUSH
9856: LD_EXP 69
9860: AND
9861: IFFALSE 9881
9863: GO 9865
9865: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9866: LD_INT 19
9868: PPUSH
9869: LD_OWVAR 2
9873: PPUSH
9874: LD_INT 0
9876: PPUSH
9877: CALL_OW 324
9881: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9882: LD_EXP 32
9886: PUSH
9887: LD_EXP 41
9891: AND
9892: IFFALSE 9994
9894: GO 9896
9896: DISABLE
9897: LD_INT 0
9899: PPUSH
9900: PPUSH
// begin enable ;
9901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9902: LD_ADDR_VAR 0 2
9906: PUSH
9907: LD_INT 22
9909: PUSH
9910: LD_OWVAR 2
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: LD_INT 2
9921: PUSH
9922: LD_INT 34
9924: PUSH
9925: LD_INT 11
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 34
9934: PUSH
9935: LD_INT 30
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PPUSH
9951: CALL_OW 69
9955: ST_TO_ADDR
// if not tmp then
9956: LD_VAR 0 2
9960: NOT
9961: IFFALSE 9965
// exit ;
9963: GO 9994
// for i in tmp do
9965: LD_ADDR_VAR 0 1
9969: PUSH
9970: LD_VAR 0 2
9974: PUSH
9975: FOR_IN
9976: IFFALSE 9992
// begin SetLives ( i , 0 ) ;
9978: LD_VAR 0 1
9982: PPUSH
9983: LD_INT 0
9985: PPUSH
9986: CALL_OW 234
// end ;
9990: GO 9975
9992: POP
9993: POP
// end ;
9994: PPOPN 2
9996: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9997: LD_EXP 32
10001: PUSH
10002: LD_EXP 42
10006: AND
10007: IFFALSE 10027
10009: GO 10011
10011: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10012: LD_INT 32
10014: PPUSH
10015: LD_OWVAR 2
10019: PPUSH
10020: LD_INT 0
10022: PPUSH
10023: CALL_OW 324
10027: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10028: LD_EXP 32
10032: PUSH
10033: LD_EXP 43
10037: AND
10038: IFFALSE 10219
10040: GO 10042
10042: DISABLE
10043: LD_INT 0
10045: PPUSH
10046: PPUSH
10047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10048: LD_ADDR_VAR 0 2
10052: PUSH
10053: LD_INT 22
10055: PUSH
10056: LD_OWVAR 2
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 33
10067: PUSH
10068: LD_INT 3
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PPUSH
10079: CALL_OW 69
10083: ST_TO_ADDR
// if not tmp then
10084: LD_VAR 0 2
10088: NOT
10089: IFFALSE 10093
// exit ;
10091: GO 10219
// side := 0 ;
10093: LD_ADDR_VAR 0 3
10097: PUSH
10098: LD_INT 0
10100: ST_TO_ADDR
// for i := 1 to 8 do
10101: LD_ADDR_VAR 0 1
10105: PUSH
10106: DOUBLE
10107: LD_INT 1
10109: DEC
10110: ST_TO_ADDR
10111: LD_INT 8
10113: PUSH
10114: FOR_TO
10115: IFFALSE 10163
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10117: LD_OWVAR 2
10121: PUSH
10122: LD_VAR 0 1
10126: NONEQUAL
10127: PUSH
10128: LD_OWVAR 2
10132: PPUSH
10133: LD_VAR 0 1
10137: PPUSH
10138: CALL_OW 81
10142: PUSH
10143: LD_INT 2
10145: EQUAL
10146: AND
10147: IFFALSE 10161
// begin side := i ;
10149: LD_ADDR_VAR 0 3
10153: PUSH
10154: LD_VAR 0 1
10158: ST_TO_ADDR
// break ;
10159: GO 10163
// end ;
10161: GO 10114
10163: POP
10164: POP
// if not side then
10165: LD_VAR 0 3
10169: NOT
10170: IFFALSE 10174
// exit ;
10172: GO 10219
// for i := 1 to tmp do
10174: LD_ADDR_VAR 0 1
10178: PUSH
10179: DOUBLE
10180: LD_INT 1
10182: DEC
10183: ST_TO_ADDR
10184: LD_VAR 0 2
10188: PUSH
10189: FOR_TO
10190: IFFALSE 10217
// if Prob ( 60 ) then
10192: LD_INT 60
10194: PPUSH
10195: CALL_OW 13
10199: IFFALSE 10215
// SetSide ( i , side ) ;
10201: LD_VAR 0 1
10205: PPUSH
10206: LD_VAR 0 3
10210: PPUSH
10211: CALL_OW 235
10215: GO 10189
10217: POP
10218: POP
// end ;
10219: PPOPN 3
10221: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10222: LD_EXP 32
10226: PUSH
10227: LD_EXP 45
10231: AND
10232: IFFALSE 10351
10234: GO 10236
10236: DISABLE
10237: LD_INT 0
10239: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10240: LD_ADDR_VAR 0 1
10244: PUSH
10245: LD_INT 22
10247: PUSH
10248: LD_OWVAR 2
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 21
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 3
10269: PUSH
10270: LD_INT 23
10272: PUSH
10273: LD_INT 0
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: LIST
10288: PPUSH
10289: CALL_OW 69
10293: PUSH
10294: FOR_IN
10295: IFFALSE 10349
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 257
10306: PUSH
10307: LD_INT 1
10309: PUSH
10310: LD_INT 2
10312: PUSH
10313: LD_INT 3
10315: PUSH
10316: LD_INT 4
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: IN
10325: IFFALSE 10347
// SetClass ( un , rand ( 1 , 4 ) ) ;
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: LD_INT 4
10337: PPUSH
10338: CALL_OW 12
10342: PPUSH
10343: CALL_OW 336
10347: GO 10294
10349: POP
10350: POP
// end ;
10351: PPOPN 1
10353: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10354: LD_EXP 32
10358: PUSH
10359: LD_EXP 44
10363: AND
10364: IFFALSE 10443
10366: GO 10368
10368: DISABLE
10369: LD_INT 0
10371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10372: LD_ADDR_VAR 0 1
10376: PUSH
10377: LD_INT 22
10379: PUSH
10380: LD_OWVAR 2
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 21
10391: PUSH
10392: LD_INT 3
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 69
10407: ST_TO_ADDR
// if not tmp then
10408: LD_VAR 0 1
10412: NOT
10413: IFFALSE 10417
// exit ;
10415: GO 10443
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10417: LD_VAR 0 1
10421: PUSH
10422: LD_INT 1
10424: PPUSH
10425: LD_VAR 0 1
10429: PPUSH
10430: CALL_OW 12
10434: ARRAY
10435: PPUSH
10436: LD_INT 100
10438: PPUSH
10439: CALL_OW 234
// end ;
10443: PPOPN 1
10445: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10446: LD_EXP 32
10450: PUSH
10451: LD_EXP 46
10455: AND
10456: IFFALSE 10554
10458: GO 10460
10460: DISABLE
10461: LD_INT 0
10463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10464: LD_ADDR_VAR 0 1
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_OWVAR 2
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 21
10483: PUSH
10484: LD_INT 1
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PPUSH
10495: CALL_OW 69
10499: ST_TO_ADDR
// if not tmp then
10500: LD_VAR 0 1
10504: NOT
10505: IFFALSE 10509
// exit ;
10507: GO 10554
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10509: LD_VAR 0 1
10513: PUSH
10514: LD_INT 1
10516: PPUSH
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 12
10526: ARRAY
10527: PPUSH
10528: LD_INT 1
10530: PPUSH
10531: LD_INT 4
10533: PPUSH
10534: CALL_OW 12
10538: PPUSH
10539: LD_INT 3000
10541: PPUSH
10542: LD_INT 9000
10544: PPUSH
10545: CALL_OW 12
10549: PPUSH
10550: CALL_OW 492
// end ;
10554: PPOPN 1
10556: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10557: LD_EXP 32
10561: PUSH
10562: LD_EXP 47
10566: AND
10567: IFFALSE 10587
10569: GO 10571
10571: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10572: LD_INT 1
10574: PPUSH
10575: LD_OWVAR 2
10579: PPUSH
10580: LD_INT 0
10582: PPUSH
10583: CALL_OW 324
10587: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10588: LD_EXP 32
10592: PUSH
10593: LD_EXP 48
10597: AND
10598: IFFALSE 10681
10600: GO 10602
10602: DISABLE
10603: LD_INT 0
10605: PPUSH
10606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10607: LD_ADDR_VAR 0 2
10611: PUSH
10612: LD_INT 22
10614: PUSH
10615: LD_OWVAR 2
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 21
10626: PUSH
10627: LD_INT 3
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 69
10642: ST_TO_ADDR
// if not tmp then
10643: LD_VAR 0 2
10647: NOT
10648: IFFALSE 10652
// exit ;
10650: GO 10681
// for i in tmp do
10652: LD_ADDR_VAR 0 1
10656: PUSH
10657: LD_VAR 0 2
10661: PUSH
10662: FOR_IN
10663: IFFALSE 10679
// SetBLevel ( i , 10 ) ;
10665: LD_VAR 0 1
10669: PPUSH
10670: LD_INT 10
10672: PPUSH
10673: CALL_OW 241
10677: GO 10662
10679: POP
10680: POP
// end ;
10681: PPOPN 2
10683: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10684: LD_EXP 32
10688: PUSH
10689: LD_EXP 49
10693: AND
10694: IFFALSE 10805
10696: GO 10698
10698: DISABLE
10699: LD_INT 0
10701: PPUSH
10702: PPUSH
10703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_INT 22
10711: PUSH
10712: LD_OWVAR 2
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 25
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PPUSH
10735: CALL_OW 69
10739: ST_TO_ADDR
// if not tmp then
10740: LD_VAR 0 3
10744: NOT
10745: IFFALSE 10749
// exit ;
10747: GO 10805
// un := tmp [ rand ( 1 , tmp ) ] ;
10749: LD_ADDR_VAR 0 2
10753: PUSH
10754: LD_VAR 0 3
10758: PUSH
10759: LD_INT 1
10761: PPUSH
10762: LD_VAR 0 3
10766: PPUSH
10767: CALL_OW 12
10771: ARRAY
10772: ST_TO_ADDR
// if Crawls ( un ) then
10773: LD_VAR 0 2
10777: PPUSH
10778: CALL_OW 318
10782: IFFALSE 10793
// ComWalk ( un ) ;
10784: LD_VAR 0 2
10788: PPUSH
10789: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10793: LD_VAR 0 2
10797: PPUSH
10798: LD_INT 5
10800: PPUSH
10801: CALL_OW 336
// end ;
10805: PPOPN 3
10807: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10808: LD_EXP 32
10812: PUSH
10813: LD_EXP 50
10817: AND
10818: PUSH
10819: LD_OWVAR 67
10823: PUSH
10824: LD_INT 3
10826: LESS
10827: AND
10828: IFFALSE 10847
10830: GO 10832
10832: DISABLE
// Difficulty := Difficulty + 1 ;
10833: LD_ADDR_OWVAR 67
10837: PUSH
10838: LD_OWVAR 67
10842: PUSH
10843: LD_INT 1
10845: PLUS
10846: ST_TO_ADDR
10847: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10848: LD_EXP 32
10852: PUSH
10853: LD_EXP 51
10857: AND
10858: IFFALSE 10961
10860: GO 10862
10862: DISABLE
10863: LD_INT 0
10865: PPUSH
// begin for i := 1 to 5 do
10866: LD_ADDR_VAR 0 1
10870: PUSH
10871: DOUBLE
10872: LD_INT 1
10874: DEC
10875: ST_TO_ADDR
10876: LD_INT 5
10878: PUSH
10879: FOR_TO
10880: IFFALSE 10959
// begin uc_nation := nation_nature ;
10882: LD_ADDR_OWVAR 21
10886: PUSH
10887: LD_INT 0
10889: ST_TO_ADDR
// uc_side := 0 ;
10890: LD_ADDR_OWVAR 20
10894: PUSH
10895: LD_INT 0
10897: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10898: LD_ADDR_OWVAR 29
10902: PUSH
10903: LD_INT 12
10905: PUSH
10906: LD_INT 12
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: ST_TO_ADDR
// hc_agressivity := 20 ;
10913: LD_ADDR_OWVAR 35
10917: PUSH
10918: LD_INT 20
10920: ST_TO_ADDR
// hc_class := class_tiger ;
10921: LD_ADDR_OWVAR 28
10925: PUSH
10926: LD_INT 14
10928: ST_TO_ADDR
// hc_gallery :=  ;
10929: LD_ADDR_OWVAR 33
10933: PUSH
10934: LD_STRING 
10936: ST_TO_ADDR
// hc_name :=  ;
10937: LD_ADDR_OWVAR 26
10941: PUSH
10942: LD_STRING 
10944: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10945: CALL_OW 44
10949: PPUSH
10950: LD_INT 0
10952: PPUSH
10953: CALL_OW 51
// end ;
10957: GO 10879
10959: POP
10960: POP
// end ;
10961: PPOPN 1
10963: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10964: LD_EXP 32
10968: PUSH
10969: LD_EXP 52
10973: AND
10974: IFFALSE 10983
10976: GO 10978
10978: DISABLE
// StreamSibBomb ;
10979: CALL 10984 0 0
10983: END
// export function StreamSibBomb ; var i , x , y ; begin
10984: LD_INT 0
10986: PPUSH
10987: PPUSH
10988: PPUSH
10989: PPUSH
// result := false ;
10990: LD_ADDR_VAR 0 1
10994: PUSH
10995: LD_INT 0
10997: ST_TO_ADDR
// for i := 1 to 16 do
10998: LD_ADDR_VAR 0 2
11002: PUSH
11003: DOUBLE
11004: LD_INT 1
11006: DEC
11007: ST_TO_ADDR
11008: LD_INT 16
11010: PUSH
11011: FOR_TO
11012: IFFALSE 11211
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11014: LD_ADDR_VAR 0 3
11018: PUSH
11019: LD_INT 10
11021: PUSH
11022: LD_INT 20
11024: PUSH
11025: LD_INT 30
11027: PUSH
11028: LD_INT 40
11030: PUSH
11031: LD_INT 50
11033: PUSH
11034: LD_INT 60
11036: PUSH
11037: LD_INT 70
11039: PUSH
11040: LD_INT 80
11042: PUSH
11043: LD_INT 90
11045: PUSH
11046: LD_INT 100
11048: PUSH
11049: LD_INT 110
11051: PUSH
11052: LD_INT 120
11054: PUSH
11055: LD_INT 130
11057: PUSH
11058: LD_INT 140
11060: PUSH
11061: LD_INT 150
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 1
11083: PPUSH
11084: LD_INT 15
11086: PPUSH
11087: CALL_OW 12
11091: ARRAY
11092: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11093: LD_ADDR_VAR 0 4
11097: PUSH
11098: LD_INT 10
11100: PUSH
11101: LD_INT 20
11103: PUSH
11104: LD_INT 30
11106: PUSH
11107: LD_INT 40
11109: PUSH
11110: LD_INT 50
11112: PUSH
11113: LD_INT 60
11115: PUSH
11116: LD_INT 70
11118: PUSH
11119: LD_INT 80
11121: PUSH
11122: LD_INT 90
11124: PUSH
11125: LD_INT 100
11127: PUSH
11128: LD_INT 110
11130: PUSH
11131: LD_INT 120
11133: PUSH
11134: LD_INT 130
11136: PUSH
11137: LD_INT 140
11139: PUSH
11140: LD_INT 150
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 1
11162: PPUSH
11163: LD_INT 15
11165: PPUSH
11166: CALL_OW 12
11170: ARRAY
11171: ST_TO_ADDR
// if ValidHex ( x , y ) then
11172: LD_VAR 0 3
11176: PPUSH
11177: LD_VAR 0 4
11181: PPUSH
11182: CALL_OW 488
11186: IFFALSE 11209
// begin result := [ x , y ] ;
11188: LD_ADDR_VAR 0 1
11192: PUSH
11193: LD_VAR 0 3
11197: PUSH
11198: LD_VAR 0 4
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: ST_TO_ADDR
// break ;
11207: GO 11211
// end ; end ;
11209: GO 11011
11211: POP
11212: POP
// if result then
11213: LD_VAR 0 1
11217: IFFALSE 11277
// begin ToLua ( playSibBomb() ) ;
11219: LD_STRING playSibBomb()
11221: PPUSH
11222: CALL_OW 559
// wait ( 0 0$14 ) ;
11226: LD_INT 490
11228: PPUSH
11229: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11233: LD_VAR 0 1
11237: PUSH
11238: LD_INT 1
11240: ARRAY
11241: PPUSH
11242: LD_VAR 0 1
11246: PUSH
11247: LD_INT 2
11249: ARRAY
11250: PPUSH
11251: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11255: LD_VAR 0 1
11259: PUSH
11260: LD_INT 1
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PUSH
11269: LD_INT 2
11271: ARRAY
11272: PPUSH
11273: CALL_OW 429
// end ; end ;
11277: LD_VAR 0 1
11281: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11282: LD_EXP 32
11286: PUSH
11287: LD_EXP 54
11291: AND
11292: IFFALSE 11304
11294: GO 11296
11296: DISABLE
// YouLost (  ) ;
11297: LD_STRING 
11299: PPUSH
11300: CALL_OW 104
11304: END
// every 0 0$1 trigger StreamModeActive and sFog do
11305: LD_EXP 32
11309: PUSH
11310: LD_EXP 53
11314: AND
11315: IFFALSE 11329
11317: GO 11319
11319: DISABLE
// FogOff ( your_side ) ;
11320: LD_OWVAR 2
11324: PPUSH
11325: CALL_OW 344
11329: END
// every 0 0$1 trigger StreamModeActive and sSun do
11330: LD_EXP 32
11334: PUSH
11335: LD_EXP 55
11339: AND
11340: IFFALSE 11368
11342: GO 11344
11344: DISABLE
// begin solar_recharge_percent := 0 ;
11345: LD_ADDR_OWVAR 79
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11353: LD_INT 10500
11355: PPUSH
11356: CALL_OW 67
// solar_recharge_percent := 100 ;
11360: LD_ADDR_OWVAR 79
11364: PUSH
11365: LD_INT 100
11367: ST_TO_ADDR
// end ;
11368: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11369: LD_EXP 32
11373: PUSH
11374: LD_EXP 56
11378: AND
11379: IFFALSE 11618
11381: GO 11383
11383: DISABLE
11384: LD_INT 0
11386: PPUSH
11387: PPUSH
11388: PPUSH
// begin tmp := [ ] ;
11389: LD_ADDR_VAR 0 3
11393: PUSH
11394: EMPTY
11395: ST_TO_ADDR
// for i := 1 to 6 do
11396: LD_ADDR_VAR 0 1
11400: PUSH
11401: DOUBLE
11402: LD_INT 1
11404: DEC
11405: ST_TO_ADDR
11406: LD_INT 6
11408: PUSH
11409: FOR_TO
11410: IFFALSE 11515
// begin uc_nation := nation_nature ;
11412: LD_ADDR_OWVAR 21
11416: PUSH
11417: LD_INT 0
11419: ST_TO_ADDR
// uc_side := 0 ;
11420: LD_ADDR_OWVAR 20
11424: PUSH
11425: LD_INT 0
11427: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11428: LD_ADDR_OWVAR 29
11432: PUSH
11433: LD_INT 12
11435: PUSH
11436: LD_INT 12
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: ST_TO_ADDR
// hc_agressivity := 20 ;
11443: LD_ADDR_OWVAR 35
11447: PUSH
11448: LD_INT 20
11450: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11451: LD_ADDR_OWVAR 28
11455: PUSH
11456: LD_INT 17
11458: ST_TO_ADDR
// hc_gallery :=  ;
11459: LD_ADDR_OWVAR 33
11463: PUSH
11464: LD_STRING 
11466: ST_TO_ADDR
// hc_name :=  ;
11467: LD_ADDR_OWVAR 26
11471: PUSH
11472: LD_STRING 
11474: ST_TO_ADDR
// un := CreateHuman ;
11475: LD_ADDR_VAR 0 2
11479: PUSH
11480: CALL_OW 44
11484: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11485: LD_VAR 0 2
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 51
// tmp := tmp ^ un ;
11497: LD_ADDR_VAR 0 3
11501: PUSH
11502: LD_VAR 0 3
11506: PUSH
11507: LD_VAR 0 2
11511: ADD
11512: ST_TO_ADDR
// end ;
11513: GO 11409
11515: POP
11516: POP
// repeat wait ( 0 0$1 ) ;
11517: LD_INT 35
11519: PPUSH
11520: CALL_OW 67
// for un in tmp do
11524: LD_ADDR_VAR 0 2
11528: PUSH
11529: LD_VAR 0 3
11533: PUSH
11534: FOR_IN
11535: IFFALSE 11609
// begin if IsDead ( un ) then
11537: LD_VAR 0 2
11541: PPUSH
11542: CALL_OW 301
11546: IFFALSE 11566
// begin tmp := tmp diff un ;
11548: LD_ADDR_VAR 0 3
11552: PUSH
11553: LD_VAR 0 3
11557: PUSH
11558: LD_VAR 0 2
11562: DIFF
11563: ST_TO_ADDR
// continue ;
11564: GO 11534
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11566: LD_VAR 0 2
11570: PPUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 22
11576: PUSH
11577: LD_INT 0
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PPUSH
11588: CALL_OW 69
11592: PPUSH
11593: LD_VAR 0 2
11597: PPUSH
11598: CALL_OW 74
11602: PPUSH
11603: CALL_OW 115
// end ;
11607: GO 11534
11609: POP
11610: POP
// until not tmp ;
11611: LD_VAR 0 3
11615: NOT
11616: IFFALSE 11517
// end ;
11618: PPOPN 3
11620: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11621: LD_EXP 32
11625: PUSH
11626: LD_EXP 57
11630: AND
11631: IFFALSE 11685
11633: GO 11635
11635: DISABLE
// begin ToLua ( displayTroll(); ) ;
11636: LD_STRING displayTroll();
11638: PPUSH
11639: CALL_OW 559
// wait ( 3 3$00 ) ;
11643: LD_INT 6300
11645: PPUSH
11646: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11650: LD_STRING hideTroll();
11652: PPUSH
11653: CALL_OW 559
// wait ( 1 1$00 ) ;
11657: LD_INT 2100
11659: PPUSH
11660: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11664: LD_STRING displayTroll();
11666: PPUSH
11667: CALL_OW 559
// wait ( 1 1$00 ) ;
11671: LD_INT 2100
11673: PPUSH
11674: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11678: LD_STRING hideTroll();
11680: PPUSH
11681: CALL_OW 559
// end ;
11685: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11686: LD_EXP 32
11690: PUSH
11691: LD_EXP 58
11695: AND
11696: IFFALSE 11759
11698: GO 11700
11700: DISABLE
11701: LD_INT 0
11703: PPUSH
// begin p := 0 ;
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// repeat game_speed := 1 ;
11712: LD_ADDR_OWVAR 65
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11720: LD_INT 35
11722: PPUSH
11723: CALL_OW 67
// p := p + 1 ;
11727: LD_ADDR_VAR 0 1
11731: PUSH
11732: LD_VAR 0 1
11736: PUSH
11737: LD_INT 1
11739: PLUS
11740: ST_TO_ADDR
// until p >= 60 ;
11741: LD_VAR 0 1
11745: PUSH
11746: LD_INT 60
11748: GREATEREQUAL
11749: IFFALSE 11712
// game_speed := 4 ;
11751: LD_ADDR_OWVAR 65
11755: PUSH
11756: LD_INT 4
11758: ST_TO_ADDR
// end ;
11759: PPOPN 1
11761: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11762: LD_EXP 32
11766: PUSH
11767: LD_EXP 59
11771: AND
11772: IFFALSE 11918
11774: GO 11776
11776: DISABLE
11777: LD_INT 0
11779: PPUSH
11780: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11781: LD_ADDR_VAR 0 1
11785: PUSH
11786: LD_INT 22
11788: PUSH
11789: LD_OWVAR 2
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 2
11800: PUSH
11801: LD_INT 30
11803: PUSH
11804: LD_INT 0
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 30
11813: PUSH
11814: LD_INT 1
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL_OW 69
11834: ST_TO_ADDR
// if not depot then
11835: LD_VAR 0 1
11839: NOT
11840: IFFALSE 11844
// exit ;
11842: GO 11918
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11844: LD_ADDR_VAR 0 2
11848: PUSH
11849: LD_VAR 0 1
11853: PUSH
11854: LD_INT 1
11856: PPUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 12
11866: ARRAY
11867: PPUSH
11868: CALL_OW 274
11872: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11873: LD_VAR 0 2
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: LD_INT 0
11883: PPUSH
11884: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11888: LD_VAR 0 2
11892: PPUSH
11893: LD_INT 2
11895: PPUSH
11896: LD_INT 0
11898: PPUSH
11899: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11903: LD_VAR 0 2
11907: PPUSH
11908: LD_INT 3
11910: PPUSH
11911: LD_INT 0
11913: PPUSH
11914: CALL_OW 277
// end ;
11918: PPOPN 2
11920: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11921: LD_EXP 32
11925: PUSH
11926: LD_EXP 60
11930: AND
11931: IFFALSE 12028
11933: GO 11935
11935: DISABLE
11936: LD_INT 0
11938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_INT 22
11946: PUSH
11947: LD_OWVAR 2
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 21
11958: PUSH
11959: LD_INT 1
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 3
11968: PUSH
11969: LD_INT 23
11971: PUSH
11972: LD_INT 0
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 69
11992: ST_TO_ADDR
// if not tmp then
11993: LD_VAR 0 1
11997: NOT
11998: IFFALSE 12002
// exit ;
12000: GO 12028
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12002: LD_VAR 0 1
12006: PUSH
12007: LD_INT 1
12009: PPUSH
12010: LD_VAR 0 1
12014: PPUSH
12015: CALL_OW 12
12019: ARRAY
12020: PPUSH
12021: LD_INT 200
12023: PPUSH
12024: CALL_OW 234
// end ;
12028: PPOPN 1
12030: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12031: LD_EXP 32
12035: PUSH
12036: LD_EXP 61
12040: AND
12041: IFFALSE 12120
12043: GO 12045
12045: DISABLE
12046: LD_INT 0
12048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12049: LD_ADDR_VAR 0 1
12053: PUSH
12054: LD_INT 22
12056: PUSH
12057: LD_OWVAR 2
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 21
12068: PUSH
12069: LD_INT 2
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PPUSH
12080: CALL_OW 69
12084: ST_TO_ADDR
// if not tmp then
12085: LD_VAR 0 1
12089: NOT
12090: IFFALSE 12094
// exit ;
12092: GO 12120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12094: LD_VAR 0 1
12098: PUSH
12099: LD_INT 1
12101: PPUSH
12102: LD_VAR 0 1
12106: PPUSH
12107: CALL_OW 12
12111: ARRAY
12112: PPUSH
12113: LD_INT 60
12115: PPUSH
12116: CALL_OW 234
// end ;
12120: PPOPN 1
12122: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12123: LD_EXP 32
12127: PUSH
12128: LD_EXP 62
12132: AND
12133: IFFALSE 12232
12135: GO 12137
12137: DISABLE
12138: LD_INT 0
12140: PPUSH
12141: PPUSH
// begin enable ;
12142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12143: LD_ADDR_VAR 0 1
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_OWVAR 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 61
12162: PUSH
12163: EMPTY
12164: LIST
12165: PUSH
12166: LD_INT 33
12168: PUSH
12169: LD_INT 2
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: PPUSH
12181: CALL_OW 69
12185: ST_TO_ADDR
// if not tmp then
12186: LD_VAR 0 1
12190: NOT
12191: IFFALSE 12195
// exit ;
12193: GO 12232
// for i in tmp do
12195: LD_ADDR_VAR 0 2
12199: PUSH
12200: LD_VAR 0 1
12204: PUSH
12205: FOR_IN
12206: IFFALSE 12230
// if IsControledBy ( i ) then
12208: LD_VAR 0 2
12212: PPUSH
12213: CALL_OW 312
12217: IFFALSE 12228
// ComUnlink ( i ) ;
12219: LD_VAR 0 2
12223: PPUSH
12224: CALL_OW 136
12228: GO 12205
12230: POP
12231: POP
// end ;
12232: PPOPN 2
12234: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12235: LD_EXP 32
12239: PUSH
12240: LD_EXP 63
12244: AND
12245: IFFALSE 12385
12247: GO 12249
12249: DISABLE
12250: LD_INT 0
12252: PPUSH
12253: PPUSH
// begin ToLua ( displayPowell(); ) ;
12254: LD_STRING displayPowell();
12256: PPUSH
12257: CALL_OW 559
// uc_side := 0 ;
12261: LD_ADDR_OWVAR 20
12265: PUSH
12266: LD_INT 0
12268: ST_TO_ADDR
// uc_nation := 2 ;
12269: LD_ADDR_OWVAR 21
12273: PUSH
12274: LD_INT 2
12276: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12277: LD_ADDR_OWVAR 37
12281: PUSH
12282: LD_INT 14
12284: ST_TO_ADDR
// vc_engine := engine_siberite ;
12285: LD_ADDR_OWVAR 39
12289: PUSH
12290: LD_INT 3
12292: ST_TO_ADDR
// vc_control := control_apeman ;
12293: LD_ADDR_OWVAR 38
12297: PUSH
12298: LD_INT 5
12300: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12301: LD_ADDR_OWVAR 40
12305: PUSH
12306: LD_INT 29
12308: ST_TO_ADDR
// un := CreateVehicle ;
12309: LD_ADDR_VAR 0 2
12313: PUSH
12314: CALL_OW 45
12318: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12319: LD_VAR 0 2
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12331: LD_INT 35
12333: PPUSH
12334: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12338: LD_VAR 0 2
12342: PPUSH
12343: LD_INT 22
12345: PUSH
12346: LD_OWVAR 2
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 69
12359: PPUSH
12360: LD_VAR 0 2
12364: PPUSH
12365: CALL_OW 74
12369: PPUSH
12370: CALL_OW 115
// until IsDead ( un ) ;
12374: LD_VAR 0 2
12378: PPUSH
12379: CALL_OW 301
12383: IFFALSE 12331
// end ;
12385: PPOPN 2
12387: END
// every 0 0$1 trigger StreamModeActive and sStu do
12388: LD_EXP 32
12392: PUSH
12393: LD_EXP 71
12397: AND
12398: IFFALSE 12414
12400: GO 12402
12402: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12403: LD_STRING displayStucuk();
12405: PPUSH
12406: CALL_OW 559
// ResetFog ;
12410: CALL_OW 335
// end ;
12414: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12415: LD_EXP 32
12419: PUSH
12420: LD_EXP 64
12424: AND
12425: IFFALSE 12566
12427: GO 12429
12429: DISABLE
12430: LD_INT 0
12432: PPUSH
12433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12434: LD_ADDR_VAR 0 2
12438: PUSH
12439: LD_INT 22
12441: PUSH
12442: LD_OWVAR 2
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 21
12453: PUSH
12454: LD_INT 1
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 69
12469: ST_TO_ADDR
// if not tmp then
12470: LD_VAR 0 2
12474: NOT
12475: IFFALSE 12479
// exit ;
12477: GO 12566
// un := tmp [ rand ( 1 , tmp ) ] ;
12479: LD_ADDR_VAR 0 1
12483: PUSH
12484: LD_VAR 0 2
12488: PUSH
12489: LD_INT 1
12491: PPUSH
12492: LD_VAR 0 2
12496: PPUSH
12497: CALL_OW 12
12501: ARRAY
12502: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12503: LD_VAR 0 1
12507: PPUSH
12508: LD_INT 0
12510: PPUSH
12511: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12515: LD_VAR 0 1
12519: PPUSH
12520: LD_OWVAR 3
12524: PUSH
12525: LD_VAR 0 1
12529: DIFF
12530: PPUSH
12531: LD_VAR 0 1
12535: PPUSH
12536: CALL_OW 74
12540: PPUSH
12541: CALL_OW 115
// wait ( 0 0$20 ) ;
12545: LD_INT 700
12547: PPUSH
12548: CALL_OW 67
// SetSide ( un , your_side ) ;
12552: LD_VAR 0 1
12556: PPUSH
12557: LD_OWVAR 2
12561: PPUSH
12562: CALL_OW 235
// end ;
12566: PPOPN 2
12568: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12569: LD_EXP 32
12573: PUSH
12574: LD_EXP 65
12578: AND
12579: IFFALSE 12685
12581: GO 12583
12583: DISABLE
12584: LD_INT 0
12586: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12587: LD_ADDR_VAR 0 1
12591: PUSH
12592: LD_INT 22
12594: PUSH
12595: LD_OWVAR 2
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: LD_INT 30
12609: PUSH
12610: LD_INT 0
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 30
12619: PUSH
12620: LD_INT 1
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PPUSH
12636: CALL_OW 69
12640: ST_TO_ADDR
// if not depot then
12641: LD_VAR 0 1
12645: NOT
12646: IFFALSE 12650
// exit ;
12648: GO 12685
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12650: LD_VAR 0 1
12654: PUSH
12655: LD_INT 1
12657: ARRAY
12658: PPUSH
12659: CALL_OW 250
12663: PPUSH
12664: LD_VAR 0 1
12668: PUSH
12669: LD_INT 1
12671: ARRAY
12672: PPUSH
12673: CALL_OW 251
12677: PPUSH
12678: LD_INT 70
12680: PPUSH
12681: CALL_OW 495
// end ;
12685: PPOPN 1
12687: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12688: LD_EXP 32
12692: PUSH
12693: LD_EXP 66
12697: AND
12698: IFFALSE 12909
12700: GO 12702
12702: DISABLE
12703: LD_INT 0
12705: PPUSH
12706: PPUSH
12707: PPUSH
12708: PPUSH
12709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12710: LD_ADDR_VAR 0 5
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_OWVAR 2
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 1
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 69
12745: ST_TO_ADDR
// if not tmp then
12746: LD_VAR 0 5
12750: NOT
12751: IFFALSE 12755
// exit ;
12753: GO 12909
// for i in tmp do
12755: LD_ADDR_VAR 0 1
12759: PUSH
12760: LD_VAR 0 5
12764: PUSH
12765: FOR_IN
12766: IFFALSE 12907
// begin d := rand ( 0 , 5 ) ;
12768: LD_ADDR_VAR 0 4
12772: PUSH
12773: LD_INT 0
12775: PPUSH
12776: LD_INT 5
12778: PPUSH
12779: CALL_OW 12
12783: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12784: LD_ADDR_VAR 0 2
12788: PUSH
12789: LD_VAR 0 1
12793: PPUSH
12794: CALL_OW 250
12798: PPUSH
12799: LD_VAR 0 4
12803: PPUSH
12804: LD_INT 3
12806: PPUSH
12807: LD_INT 12
12809: PPUSH
12810: CALL_OW 12
12814: PPUSH
12815: CALL_OW 272
12819: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 251
12834: PPUSH
12835: LD_VAR 0 4
12839: PPUSH
12840: LD_INT 3
12842: PPUSH
12843: LD_INT 12
12845: PPUSH
12846: CALL_OW 12
12850: PPUSH
12851: CALL_OW 273
12855: ST_TO_ADDR
// if ValidHex ( x , y ) then
12856: LD_VAR 0 2
12860: PPUSH
12861: LD_VAR 0 3
12865: PPUSH
12866: CALL_OW 488
12870: IFFALSE 12905
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12872: LD_VAR 0 1
12876: PPUSH
12877: LD_VAR 0 2
12881: PPUSH
12882: LD_VAR 0 3
12886: PPUSH
12887: LD_INT 3
12889: PPUSH
12890: LD_INT 6
12892: PPUSH
12893: CALL_OW 12
12897: PPUSH
12898: LD_INT 1
12900: PPUSH
12901: CALL_OW 483
// end ;
12905: GO 12765
12907: POP
12908: POP
// end ;
12909: PPOPN 5
12911: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12912: LD_EXP 32
12916: PUSH
12917: LD_EXP 67
12921: AND
12922: IFFALSE 13016
12924: GO 12926
12926: DISABLE
12927: LD_INT 0
12929: PPUSH
12930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12931: LD_ADDR_VAR 0 2
12935: PUSH
12936: LD_INT 22
12938: PUSH
12939: LD_OWVAR 2
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 32
12950: PUSH
12951: LD_INT 1
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 21
12960: PUSH
12961: LD_INT 2
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: ST_TO_ADDR
// if not tmp then
12978: LD_VAR 0 2
12982: NOT
12983: IFFALSE 12987
// exit ;
12985: GO 13016
// for i in tmp do
12987: LD_ADDR_VAR 0 1
12991: PUSH
12992: LD_VAR 0 2
12996: PUSH
12997: FOR_IN
12998: IFFALSE 13014
// SetFuel ( i , 0 ) ;
13000: LD_VAR 0 1
13004: PPUSH
13005: LD_INT 0
13007: PPUSH
13008: CALL_OW 240
13012: GO 12997
13014: POP
13015: POP
// end ;
13016: PPOPN 2
13018: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13019: LD_EXP 32
13023: PUSH
13024: LD_EXP 68
13028: AND
13029: IFFALSE 13095
13031: GO 13033
13033: DISABLE
13034: LD_INT 0
13036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13037: LD_ADDR_VAR 0 1
13041: PUSH
13042: LD_INT 22
13044: PUSH
13045: LD_OWVAR 2
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 30
13056: PUSH
13057: LD_INT 29
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 69
13072: ST_TO_ADDR
// if not tmp then
13073: LD_VAR 0 1
13077: NOT
13078: IFFALSE 13082
// exit ;
13080: GO 13095
// DestroyUnit ( tmp [ 1 ] ) ;
13082: LD_VAR 0 1
13086: PUSH
13087: LD_INT 1
13089: ARRAY
13090: PPUSH
13091: CALL_OW 65
// end ;
13095: PPOPN 1
13097: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13098: LD_EXP 32
13102: PUSH
13103: LD_EXP 70
13107: AND
13108: IFFALSE 13237
13110: GO 13112
13112: DISABLE
13113: LD_INT 0
13115: PPUSH
// begin uc_side := 0 ;
13116: LD_ADDR_OWVAR 20
13120: PUSH
13121: LD_INT 0
13123: ST_TO_ADDR
// uc_nation := nation_arabian ;
13124: LD_ADDR_OWVAR 21
13128: PUSH
13129: LD_INT 2
13131: ST_TO_ADDR
// hc_gallery :=  ;
13132: LD_ADDR_OWVAR 33
13136: PUSH
13137: LD_STRING 
13139: ST_TO_ADDR
// hc_name :=  ;
13140: LD_ADDR_OWVAR 26
13144: PUSH
13145: LD_STRING 
13147: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13148: LD_INT 1
13150: PPUSH
13151: LD_INT 11
13153: PPUSH
13154: LD_INT 10
13156: PPUSH
13157: CALL_OW 380
// un := CreateHuman ;
13161: LD_ADDR_VAR 0 1
13165: PUSH
13166: CALL_OW 44
13170: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13171: LD_VAR 0 1
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13183: LD_INT 35
13185: PPUSH
13186: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13190: LD_VAR 0 1
13194: PPUSH
13195: LD_INT 22
13197: PUSH
13198: LD_OWVAR 2
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: PPUSH
13212: LD_VAR 0 1
13216: PPUSH
13217: CALL_OW 74
13221: PPUSH
13222: CALL_OW 115
// until IsDead ( un ) ;
13226: LD_VAR 0 1
13230: PPUSH
13231: CALL_OW 301
13235: IFFALSE 13183
// end ;
13237: PPOPN 1
13239: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13240: LD_EXP 32
13244: PUSH
13245: LD_EXP 72
13249: AND
13250: IFFALSE 13262
13252: GO 13254
13254: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13255: LD_STRING earthquake(getX(game), 0, 32)
13257: PPUSH
13258: CALL_OW 559
13262: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13263: LD_EXP 32
13267: PUSH
13268: LD_EXP 73
13272: AND
13273: IFFALSE 13364
13275: GO 13277
13277: DISABLE
13278: LD_INT 0
13280: PPUSH
// begin enable ;
13281: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13282: LD_ADDR_VAR 0 1
13286: PUSH
13287: LD_INT 22
13289: PUSH
13290: LD_OWVAR 2
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: LD_INT 21
13301: PUSH
13302: LD_INT 2
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PUSH
13309: LD_INT 33
13311: PUSH
13312: LD_INT 3
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: PPUSH
13324: CALL_OW 69
13328: ST_TO_ADDR
// if not tmp then
13329: LD_VAR 0 1
13333: NOT
13334: IFFALSE 13338
// exit ;
13336: GO 13364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13338: LD_VAR 0 1
13342: PUSH
13343: LD_INT 1
13345: PPUSH
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 12
13355: ARRAY
13356: PPUSH
13357: LD_INT 1
13359: PPUSH
13360: CALL_OW 234
// end ;
13364: PPOPN 1
13366: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13367: LD_EXP 32
13371: PUSH
13372: LD_EXP 74
13376: AND
13377: IFFALSE 13518
13379: GO 13381
13381: DISABLE
13382: LD_INT 0
13384: PPUSH
13385: PPUSH
13386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13387: LD_ADDR_VAR 0 3
13391: PUSH
13392: LD_INT 22
13394: PUSH
13395: LD_OWVAR 2
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 25
13406: PUSH
13407: LD_INT 1
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PPUSH
13418: CALL_OW 69
13422: ST_TO_ADDR
// if not tmp then
13423: LD_VAR 0 3
13427: NOT
13428: IFFALSE 13432
// exit ;
13430: GO 13518
// un := tmp [ rand ( 1 , tmp ) ] ;
13432: LD_ADDR_VAR 0 2
13436: PUSH
13437: LD_VAR 0 3
13441: PUSH
13442: LD_INT 1
13444: PPUSH
13445: LD_VAR 0 3
13449: PPUSH
13450: CALL_OW 12
13454: ARRAY
13455: ST_TO_ADDR
// if Crawls ( un ) then
13456: LD_VAR 0 2
13460: PPUSH
13461: CALL_OW 318
13465: IFFALSE 13476
// ComWalk ( un ) ;
13467: LD_VAR 0 2
13471: PPUSH
13472: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13476: LD_VAR 0 2
13480: PPUSH
13481: LD_INT 9
13483: PPUSH
13484: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13488: LD_INT 28
13490: PPUSH
13491: LD_OWVAR 2
13495: PPUSH
13496: LD_INT 2
13498: PPUSH
13499: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13503: LD_INT 29
13505: PPUSH
13506: LD_OWVAR 2
13510: PPUSH
13511: LD_INT 2
13513: PPUSH
13514: CALL_OW 322
// end ;
13518: PPOPN 3
13520: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13521: LD_EXP 32
13525: PUSH
13526: LD_EXP 75
13530: AND
13531: IFFALSE 13642
13533: GO 13535
13535: DISABLE
13536: LD_INT 0
13538: PPUSH
13539: PPUSH
13540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13541: LD_ADDR_VAR 0 3
13545: PUSH
13546: LD_INT 22
13548: PUSH
13549: LD_OWVAR 2
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 25
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PPUSH
13572: CALL_OW 69
13576: ST_TO_ADDR
// if not tmp then
13577: LD_VAR 0 3
13581: NOT
13582: IFFALSE 13586
// exit ;
13584: GO 13642
// un := tmp [ rand ( 1 , tmp ) ] ;
13586: LD_ADDR_VAR 0 2
13590: PUSH
13591: LD_VAR 0 3
13595: PUSH
13596: LD_INT 1
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: CALL_OW 12
13608: ARRAY
13609: ST_TO_ADDR
// if Crawls ( un ) then
13610: LD_VAR 0 2
13614: PPUSH
13615: CALL_OW 318
13619: IFFALSE 13630
// ComWalk ( un ) ;
13621: LD_VAR 0 2
13625: PPUSH
13626: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13630: LD_VAR 0 2
13634: PPUSH
13635: LD_INT 8
13637: PPUSH
13638: CALL_OW 336
// end ;
13642: PPOPN 3
13644: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13645: LD_EXP 32
13649: PUSH
13650: LD_EXP 76
13654: AND
13655: IFFALSE 13799
13657: GO 13659
13659: DISABLE
13660: LD_INT 0
13662: PPUSH
13663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13664: LD_ADDR_VAR 0 2
13668: PUSH
13669: LD_INT 22
13671: PUSH
13672: LD_OWVAR 2
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 21
13683: PUSH
13684: LD_INT 2
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: LD_INT 34
13696: PUSH
13697: LD_INT 12
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 34
13706: PUSH
13707: LD_INT 51
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 34
13716: PUSH
13717: LD_INT 32
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: PPUSH
13735: CALL_OW 69
13739: ST_TO_ADDR
// if not tmp then
13740: LD_VAR 0 2
13744: NOT
13745: IFFALSE 13749
// exit ;
13747: GO 13799
// for i in tmp do
13749: LD_ADDR_VAR 0 1
13753: PUSH
13754: LD_VAR 0 2
13758: PUSH
13759: FOR_IN
13760: IFFALSE 13797
// if GetCargo ( i , mat_artifact ) = 0 then
13762: LD_VAR 0 1
13766: PPUSH
13767: LD_INT 4
13769: PPUSH
13770: CALL_OW 289
13774: PUSH
13775: LD_INT 0
13777: EQUAL
13778: IFFALSE 13795
// SetCargo ( i , mat_siberit , 100 ) ;
13780: LD_VAR 0 1
13784: PPUSH
13785: LD_INT 3
13787: PPUSH
13788: LD_INT 100
13790: PPUSH
13791: CALL_OW 290
13795: GO 13759
13797: POP
13798: POP
// end ;
13799: PPOPN 2
13801: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13802: LD_EXP 32
13806: PUSH
13807: LD_EXP 77
13811: AND
13812: IFFALSE 13995
13814: GO 13816
13816: DISABLE
13817: LD_INT 0
13819: PPUSH
13820: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13821: LD_ADDR_VAR 0 2
13825: PUSH
13826: LD_INT 22
13828: PUSH
13829: LD_OWVAR 2
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PPUSH
13838: CALL_OW 69
13842: ST_TO_ADDR
// if not tmp then
13843: LD_VAR 0 2
13847: NOT
13848: IFFALSE 13852
// exit ;
13850: GO 13995
// for i := 1 to 2 do
13852: LD_ADDR_VAR 0 1
13856: PUSH
13857: DOUBLE
13858: LD_INT 1
13860: DEC
13861: ST_TO_ADDR
13862: LD_INT 2
13864: PUSH
13865: FOR_TO
13866: IFFALSE 13993
// begin uc_side := your_side ;
13868: LD_ADDR_OWVAR 20
13872: PUSH
13873: LD_OWVAR 2
13877: ST_TO_ADDR
// uc_nation := nation_american ;
13878: LD_ADDR_OWVAR 21
13882: PUSH
13883: LD_INT 1
13885: ST_TO_ADDR
// vc_chassis := us_morphling ;
13886: LD_ADDR_OWVAR 37
13890: PUSH
13891: LD_INT 5
13893: ST_TO_ADDR
// vc_engine := engine_siberite ;
13894: LD_ADDR_OWVAR 39
13898: PUSH
13899: LD_INT 3
13901: ST_TO_ADDR
// vc_control := control_computer ;
13902: LD_ADDR_OWVAR 38
13906: PUSH
13907: LD_INT 3
13909: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13910: LD_ADDR_OWVAR 40
13914: PUSH
13915: LD_INT 10
13917: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13918: LD_VAR 0 2
13922: PUSH
13923: LD_INT 1
13925: ARRAY
13926: PPUSH
13927: CALL_OW 310
13931: NOT
13932: IFFALSE 13979
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
13934: CALL_OW 45
13938: PPUSH
13939: LD_VAR 0 2
13943: PUSH
13944: LD_INT 1
13946: ARRAY
13947: PPUSH
13948: CALL_OW 250
13952: PPUSH
13953: LD_VAR 0 2
13957: PUSH
13958: LD_INT 1
13960: ARRAY
13961: PPUSH
13962: CALL_OW 251
13966: PPUSH
13967: LD_INT 12
13969: PPUSH
13970: LD_INT 1
13972: PPUSH
13973: CALL_OW 50
13977: GO 13991
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
13979: CALL_OW 45
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: CALL_OW 51
// end ;
13991: GO 13865
13993: POP
13994: POP
// end ;
13995: PPOPN 2
13997: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13998: LD_EXP 32
14002: PUSH
14003: LD_EXP 78
14007: AND
14008: IFFALSE 14230
14010: GO 14012
14012: DISABLE
14013: LD_INT 0
14015: PPUSH
14016: PPUSH
14017: PPUSH
14018: PPUSH
14019: PPUSH
14020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14021: LD_ADDR_VAR 0 6
14025: PUSH
14026: LD_INT 22
14028: PUSH
14029: LD_OWVAR 2
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 21
14040: PUSH
14041: LD_INT 1
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 3
14050: PUSH
14051: LD_INT 23
14053: PUSH
14054: LD_INT 0
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: PPUSH
14070: CALL_OW 69
14074: ST_TO_ADDR
// if not tmp then
14075: LD_VAR 0 6
14079: NOT
14080: IFFALSE 14084
// exit ;
14082: GO 14230
// s1 := rand ( 1 , 4 ) ;
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_INT 1
14091: PPUSH
14092: LD_INT 4
14094: PPUSH
14095: CALL_OW 12
14099: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14100: LD_ADDR_VAR 0 4
14104: PUSH
14105: LD_VAR 0 6
14109: PUSH
14110: LD_INT 1
14112: ARRAY
14113: PPUSH
14114: LD_VAR 0 2
14118: PPUSH
14119: CALL_OW 259
14123: ST_TO_ADDR
// if s1 = 1 then
14124: LD_VAR 0 2
14128: PUSH
14129: LD_INT 1
14131: EQUAL
14132: IFFALSE 14152
// s2 := rand ( 2 , 4 ) else
14134: LD_ADDR_VAR 0 3
14138: PUSH
14139: LD_INT 2
14141: PPUSH
14142: LD_INT 4
14144: PPUSH
14145: CALL_OW 12
14149: ST_TO_ADDR
14150: GO 14160
// s2 := 1 ;
14152: LD_ADDR_VAR 0 3
14156: PUSH
14157: LD_INT 1
14159: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14160: LD_ADDR_VAR 0 5
14164: PUSH
14165: LD_VAR 0 6
14169: PUSH
14170: LD_INT 1
14172: ARRAY
14173: PPUSH
14174: LD_VAR 0 3
14178: PPUSH
14179: CALL_OW 259
14183: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14184: LD_VAR 0 6
14188: PUSH
14189: LD_INT 1
14191: ARRAY
14192: PPUSH
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_VAR 0 5
14202: PPUSH
14203: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14207: LD_VAR 0 6
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: LD_VAR 0 4
14225: PPUSH
14226: CALL_OW 237
// end ;
14230: PPOPN 6
14232: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14233: LD_EXP 32
14237: PUSH
14238: LD_EXP 79
14242: AND
14243: IFFALSE 14322
14245: GO 14247
14247: DISABLE
14248: LD_INT 0
14250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14251: LD_ADDR_VAR 0 1
14255: PUSH
14256: LD_INT 22
14258: PUSH
14259: LD_OWVAR 2
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 30
14270: PUSH
14271: LD_INT 3
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 69
14286: ST_TO_ADDR
// if not tmp then
14287: LD_VAR 0 1
14291: NOT
14292: IFFALSE 14296
// exit ;
14294: GO 14322
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14296: LD_VAR 0 1
14300: PUSH
14301: LD_INT 1
14303: PPUSH
14304: LD_VAR 0 1
14308: PPUSH
14309: CALL_OW 12
14313: ARRAY
14314: PPUSH
14315: LD_INT 1
14317: PPUSH
14318: CALL_OW 234
// end ;
14322: PPOPN 1
14324: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14325: LD_EXP 32
14329: PUSH
14330: LD_EXP 80
14334: AND
14335: IFFALSE 14447
14337: GO 14339
14339: DISABLE
14340: LD_INT 0
14342: PPUSH
14343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14344: LD_ADDR_VAR 0 2
14348: PUSH
14349: LD_INT 22
14351: PUSH
14352: LD_OWVAR 2
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: LD_INT 30
14366: PUSH
14367: LD_INT 27
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 30
14376: PUSH
14377: LD_INT 26
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 30
14386: PUSH
14387: LD_INT 28
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: ST_TO_ADDR
// if not tmp then
14409: LD_VAR 0 2
14413: NOT
14414: IFFALSE 14418
// exit ;
14416: GO 14447
// for i in tmp do
14418: LD_ADDR_VAR 0 1
14422: PUSH
14423: LD_VAR 0 2
14427: PUSH
14428: FOR_IN
14429: IFFALSE 14445
// SetLives ( i , 1 ) ;
14431: LD_VAR 0 1
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 234
14443: GO 14428
14445: POP
14446: POP
// end ;
14447: PPOPN 2
14449: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14450: LD_EXP 32
14454: PUSH
14455: LD_EXP 81
14459: AND
14460: IFFALSE 14734
14462: GO 14464
14464: DISABLE
14465: LD_INT 0
14467: PPUSH
14468: PPUSH
14469: PPUSH
// begin i := rand ( 1 , 7 ) ;
14470: LD_ADDR_VAR 0 1
14474: PUSH
14475: LD_INT 1
14477: PPUSH
14478: LD_INT 7
14480: PPUSH
14481: CALL_OW 12
14485: ST_TO_ADDR
// case i of 1 :
14486: LD_VAR 0 1
14490: PUSH
14491: LD_INT 1
14493: DOUBLE
14494: EQUAL
14495: IFTRUE 14499
14497: GO 14509
14499: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14500: LD_STRING earthquake(getX(game), 0, 32)
14502: PPUSH
14503: CALL_OW 559
14507: GO 14734
14509: LD_INT 2
14511: DOUBLE
14512: EQUAL
14513: IFTRUE 14517
14515: GO 14531
14517: POP
// begin ToLua ( displayStucuk(); ) ;
14518: LD_STRING displayStucuk();
14520: PPUSH
14521: CALL_OW 559
// ResetFog ;
14525: CALL_OW 335
// end ; 3 :
14529: GO 14734
14531: LD_INT 3
14533: DOUBLE
14534: EQUAL
14535: IFTRUE 14539
14537: GO 14643
14539: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14540: LD_ADDR_VAR 0 2
14544: PUSH
14545: LD_INT 22
14547: PUSH
14548: LD_OWVAR 2
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 25
14559: PUSH
14560: LD_INT 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 69
14575: ST_TO_ADDR
// if not tmp then
14576: LD_VAR 0 2
14580: NOT
14581: IFFALSE 14585
// exit ;
14583: GO 14734
// un := tmp [ rand ( 1 , tmp ) ] ;
14585: LD_ADDR_VAR 0 3
14589: PUSH
14590: LD_VAR 0 2
14594: PUSH
14595: LD_INT 1
14597: PPUSH
14598: LD_VAR 0 2
14602: PPUSH
14603: CALL_OW 12
14607: ARRAY
14608: ST_TO_ADDR
// if Crawls ( un ) then
14609: LD_VAR 0 3
14613: PPUSH
14614: CALL_OW 318
14618: IFFALSE 14629
// ComWalk ( un ) ;
14620: LD_VAR 0 3
14624: PPUSH
14625: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14629: LD_VAR 0 3
14633: PPUSH
14634: LD_INT 8
14636: PPUSH
14637: CALL_OW 336
// end ; 4 :
14641: GO 14734
14643: LD_INT 4
14645: DOUBLE
14646: EQUAL
14647: IFTRUE 14651
14649: GO 14712
14651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14652: LD_ADDR_VAR 0 2
14656: PUSH
14657: LD_INT 22
14659: PUSH
14660: LD_OWVAR 2
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 30
14671: PUSH
14672: LD_INT 29
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PPUSH
14683: CALL_OW 69
14687: ST_TO_ADDR
// if not tmp then
14688: LD_VAR 0 2
14692: NOT
14693: IFFALSE 14697
// exit ;
14695: GO 14734
// DestroyUnit ( tmp [ 1 ] ) ;
14697: LD_VAR 0 2
14701: PUSH
14702: LD_INT 1
14704: ARRAY
14705: PPUSH
14706: CALL_OW 65
// end ; 5 .. 7 :
14710: GO 14734
14712: LD_INT 5
14714: DOUBLE
14715: GREATEREQUAL
14716: IFFALSE 14724
14718: LD_INT 7
14720: DOUBLE
14721: LESSEQUAL
14722: IFTRUE 14726
14724: GO 14733
14726: POP
// StreamSibBomb ; end ;
14727: CALL 10984 0 0
14731: GO 14734
14733: POP
// end ;
14734: PPOPN 3
14736: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14737: LD_EXP 32
14741: PUSH
14742: LD_EXP 82
14746: AND
14747: IFFALSE 14903
14749: GO 14751
14751: DISABLE
14752: LD_INT 0
14754: PPUSH
14755: PPUSH
14756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14757: LD_ADDR_VAR 0 2
14761: PUSH
14762: LD_INT 81
14764: PUSH
14765: LD_OWVAR 2
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 2
14776: PUSH
14777: LD_INT 21
14779: PUSH
14780: LD_INT 1
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 21
14789: PUSH
14790: LD_INT 2
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: ST_TO_ADDR
// if not tmp then
14811: LD_VAR 0 2
14815: NOT
14816: IFFALSE 14820
// exit ;
14818: GO 14903
// p := 0 ;
14820: LD_ADDR_VAR 0 3
14824: PUSH
14825: LD_INT 0
14827: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14828: LD_INT 35
14830: PPUSH
14831: CALL_OW 67
// p := p + 1 ;
14835: LD_ADDR_VAR 0 3
14839: PUSH
14840: LD_VAR 0 3
14844: PUSH
14845: LD_INT 1
14847: PLUS
14848: ST_TO_ADDR
// for i in tmp do
14849: LD_ADDR_VAR 0 1
14853: PUSH
14854: LD_VAR 0 2
14858: PUSH
14859: FOR_IN
14860: IFFALSE 14891
// if GetLives ( i ) < 1000 then
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 256
14871: PUSH
14872: LD_INT 1000
14874: LESS
14875: IFFALSE 14889
// SetLives ( i , 1000 ) ;
14877: LD_VAR 0 1
14881: PPUSH
14882: LD_INT 1000
14884: PPUSH
14885: CALL_OW 234
14889: GO 14859
14891: POP
14892: POP
// until p > 20 ;
14893: LD_VAR 0 3
14897: PUSH
14898: LD_INT 20
14900: GREATER
14901: IFFALSE 14828
// end ;
14903: PPOPN 3
14905: END
// every 0 0$1 trigger StreamModeActive and sTime do
14906: LD_EXP 32
14910: PUSH
14911: LD_EXP 83
14915: AND
14916: IFFALSE 14951
14918: GO 14920
14920: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14921: LD_INT 28
14923: PPUSH
14924: LD_OWVAR 2
14928: PPUSH
14929: LD_INT 2
14931: PPUSH
14932: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14936: LD_INT 30
14938: PPUSH
14939: LD_OWVAR 2
14943: PPUSH
14944: LD_INT 2
14946: PPUSH
14947: CALL_OW 322
// end ;
14951: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14952: LD_EXP 32
14956: PUSH
14957: LD_EXP 84
14961: AND
14962: IFFALSE 15083
14964: GO 14966
14966: DISABLE
14967: LD_INT 0
14969: PPUSH
14970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14971: LD_ADDR_VAR 0 2
14975: PUSH
14976: LD_INT 22
14978: PUSH
14979: LD_OWVAR 2
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 21
14990: PUSH
14991: LD_INT 1
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 3
15000: PUSH
15001: LD_INT 23
15003: PUSH
15004: LD_INT 0
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: ST_TO_ADDR
// if not tmp then
15025: LD_VAR 0 2
15029: NOT
15030: IFFALSE 15034
// exit ;
15032: GO 15083
// for i in tmp do
15034: LD_ADDR_VAR 0 1
15038: PUSH
15039: LD_VAR 0 2
15043: PUSH
15044: FOR_IN
15045: IFFALSE 15081
// begin if Crawls ( i ) then
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 318
15056: IFFALSE 15067
// ComWalk ( i ) ;
15058: LD_VAR 0 1
15062: PPUSH
15063: CALL_OW 138
// SetClass ( i , 2 ) ;
15067: LD_VAR 0 1
15071: PPUSH
15072: LD_INT 2
15074: PPUSH
15075: CALL_OW 336
// end ;
15079: GO 15044
15081: POP
15082: POP
// end ;
15083: PPOPN 2
15085: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15086: LD_EXP 32
15090: PUSH
15091: LD_EXP 85
15095: AND
15096: IFFALSE 15377
15098: GO 15100
15100: DISABLE
15101: LD_INT 0
15103: PPUSH
15104: PPUSH
15105: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15106: LD_OWVAR 2
15110: PPUSH
15111: LD_INT 9
15113: PPUSH
15114: LD_INT 1
15116: PPUSH
15117: LD_INT 1
15119: PPUSH
15120: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15124: LD_INT 9
15126: PPUSH
15127: LD_OWVAR 2
15131: PPUSH
15132: CALL_OW 343
// uc_side := 9 ;
15136: LD_ADDR_OWVAR 20
15140: PUSH
15141: LD_INT 9
15143: ST_TO_ADDR
// uc_nation := 2 ;
15144: LD_ADDR_OWVAR 21
15148: PUSH
15149: LD_INT 2
15151: ST_TO_ADDR
// hc_name := Dark Warrior ;
15152: LD_ADDR_OWVAR 26
15156: PUSH
15157: LD_STRING Dark Warrior
15159: ST_TO_ADDR
// hc_gallery :=  ;
15160: LD_ADDR_OWVAR 33
15164: PUSH
15165: LD_STRING 
15167: ST_TO_ADDR
// hc_noskilllimit := true ;
15168: LD_ADDR_OWVAR 76
15172: PUSH
15173: LD_INT 1
15175: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15176: LD_ADDR_OWVAR 31
15180: PUSH
15181: LD_INT 30
15183: PUSH
15184: LD_INT 30
15186: PUSH
15187: LD_INT 30
15189: PUSH
15190: LD_INT 30
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: ST_TO_ADDR
// un := CreateHuman ;
15199: LD_ADDR_VAR 0 3
15203: PUSH
15204: CALL_OW 44
15208: ST_TO_ADDR
// hc_noskilllimit := false ;
15209: LD_ADDR_OWVAR 76
15213: PUSH
15214: LD_INT 0
15216: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15217: LD_VAR 0 3
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 51
// p := 0 ;
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_INT 0
15236: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15237: LD_INT 35
15239: PPUSH
15240: CALL_OW 67
// p := p + 1 ;
15244: LD_ADDR_VAR 0 2
15248: PUSH
15249: LD_VAR 0 2
15253: PUSH
15254: LD_INT 1
15256: PLUS
15257: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15258: LD_VAR 0 3
15262: PPUSH
15263: CALL_OW 256
15267: PUSH
15268: LD_INT 1000
15270: LESS
15271: IFFALSE 15285
// SetLives ( un , 1000 ) ;
15273: LD_VAR 0 3
15277: PPUSH
15278: LD_INT 1000
15280: PPUSH
15281: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15285: LD_VAR 0 3
15289: PPUSH
15290: LD_INT 81
15292: PUSH
15293: LD_OWVAR 2
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 91
15304: PUSH
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 30
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PPUSH
15322: CALL_OW 69
15326: PPUSH
15327: LD_VAR 0 3
15331: PPUSH
15332: CALL_OW 74
15336: PPUSH
15337: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15341: LD_VAR 0 2
15345: PUSH
15346: LD_INT 60
15348: GREATER
15349: PUSH
15350: LD_VAR 0 3
15354: PPUSH
15355: CALL_OW 301
15359: OR
15360: IFFALSE 15237
// if un then
15362: LD_VAR 0 3
15366: IFFALSE 15377
// RemoveUnit ( un ) ;
15368: LD_VAR 0 3
15372: PPUSH
15373: CALL_OW 64
// end ;
15377: PPOPN 3
15379: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15380: LD_INT 0
15382: PPUSH
// case cmd of 301 :
15383: LD_VAR 0 1
15387: PUSH
15388: LD_INT 301
15390: DOUBLE
15391: EQUAL
15392: IFTRUE 15396
15394: GO 15428
15396: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15397: LD_VAR 0 6
15401: PPUSH
15402: LD_VAR 0 7
15406: PPUSH
15407: LD_VAR 0 8
15411: PPUSH
15412: LD_VAR 0 4
15416: PPUSH
15417: LD_VAR 0 5
15421: PPUSH
15422: CALL 16629 0 5
15426: GO 15549
15428: LD_INT 302
15430: DOUBLE
15431: EQUAL
15432: IFTRUE 15436
15434: GO 15473
15436: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15437: LD_VAR 0 6
15441: PPUSH
15442: LD_VAR 0 7
15446: PPUSH
15447: LD_VAR 0 8
15451: PPUSH
15452: LD_VAR 0 9
15456: PPUSH
15457: LD_VAR 0 4
15461: PPUSH
15462: LD_VAR 0 5
15466: PPUSH
15467: CALL 16720 0 6
15471: GO 15549
15473: LD_INT 303
15475: DOUBLE
15476: EQUAL
15477: IFTRUE 15481
15479: GO 15518
15481: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15482: LD_VAR 0 6
15486: PPUSH
15487: LD_VAR 0 7
15491: PPUSH
15492: LD_VAR 0 8
15496: PPUSH
15497: LD_VAR 0 9
15501: PPUSH
15502: LD_VAR 0 4
15506: PPUSH
15507: LD_VAR 0 5
15511: PPUSH
15512: CALL 15554 0 6
15516: GO 15549
15518: LD_INT 304
15520: DOUBLE
15521: EQUAL
15522: IFTRUE 15526
15524: GO 15548
15526: POP
// hHackTeleport ( unit , x , y ) ; end ;
15527: LD_VAR 0 2
15531: PPUSH
15532: LD_VAR 0 4
15536: PPUSH
15537: LD_VAR 0 5
15541: PPUSH
15542: CALL 17313 0 3
15546: GO 15549
15548: POP
// end ;
15549: LD_VAR 0 12
15553: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15554: LD_INT 0
15556: PPUSH
15557: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15558: LD_VAR 0 1
15562: PUSH
15563: LD_INT 1
15565: LESS
15566: PUSH
15567: LD_VAR 0 1
15571: PUSH
15572: LD_INT 3
15574: GREATER
15575: OR
15576: PUSH
15577: LD_VAR 0 5
15581: PPUSH
15582: LD_VAR 0 6
15586: PPUSH
15587: CALL_OW 428
15591: OR
15592: IFFALSE 15596
// exit ;
15594: GO 16316
// uc_side := your_side ;
15596: LD_ADDR_OWVAR 20
15600: PUSH
15601: LD_OWVAR 2
15605: ST_TO_ADDR
// uc_nation := nation ;
15606: LD_ADDR_OWVAR 21
15610: PUSH
15611: LD_VAR 0 1
15615: ST_TO_ADDR
// bc_level = 1 ;
15616: LD_ADDR_OWVAR 43
15620: PUSH
15621: LD_INT 1
15623: ST_TO_ADDR
// case btype of 1 :
15624: LD_VAR 0 2
15628: PUSH
15629: LD_INT 1
15631: DOUBLE
15632: EQUAL
15633: IFTRUE 15637
15635: GO 15648
15637: POP
// bc_type := b_depot ; 2 :
15638: LD_ADDR_OWVAR 42
15642: PUSH
15643: LD_INT 0
15645: ST_TO_ADDR
15646: GO 16260
15648: LD_INT 2
15650: DOUBLE
15651: EQUAL
15652: IFTRUE 15656
15654: GO 15667
15656: POP
// bc_type := b_warehouse ; 3 :
15657: LD_ADDR_OWVAR 42
15661: PUSH
15662: LD_INT 1
15664: ST_TO_ADDR
15665: GO 16260
15667: LD_INT 3
15669: DOUBLE
15670: EQUAL
15671: IFTRUE 15675
15673: GO 15686
15675: POP
// bc_type := b_lab ; 4 .. 9 :
15676: LD_ADDR_OWVAR 42
15680: PUSH
15681: LD_INT 6
15683: ST_TO_ADDR
15684: GO 16260
15686: LD_INT 4
15688: DOUBLE
15689: GREATEREQUAL
15690: IFFALSE 15698
15692: LD_INT 9
15694: DOUBLE
15695: LESSEQUAL
15696: IFTRUE 15700
15698: GO 15752
15700: POP
// begin bc_type := b_lab_half ;
15701: LD_ADDR_OWVAR 42
15705: PUSH
15706: LD_INT 7
15708: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15709: LD_ADDR_OWVAR 44
15713: PUSH
15714: LD_INT 10
15716: PUSH
15717: LD_INT 11
15719: PUSH
15720: LD_INT 12
15722: PUSH
15723: LD_INT 15
15725: PUSH
15726: LD_INT 14
15728: PUSH
15729: LD_INT 13
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: LD_VAR 0 2
15744: PUSH
15745: LD_INT 3
15747: MINUS
15748: ARRAY
15749: ST_TO_ADDR
// end ; 10 .. 13 :
15750: GO 16260
15752: LD_INT 10
15754: DOUBLE
15755: GREATEREQUAL
15756: IFFALSE 15764
15758: LD_INT 13
15760: DOUBLE
15761: LESSEQUAL
15762: IFTRUE 15766
15764: GO 15843
15766: POP
// begin bc_type := b_lab_full ;
15767: LD_ADDR_OWVAR 42
15771: PUSH
15772: LD_INT 8
15774: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15775: LD_ADDR_OWVAR 44
15779: PUSH
15780: LD_INT 10
15782: PUSH
15783: LD_INT 12
15785: PUSH
15786: LD_INT 14
15788: PUSH
15789: LD_INT 13
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: LD_VAR 0 2
15802: PUSH
15803: LD_INT 9
15805: MINUS
15806: ARRAY
15807: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15808: LD_ADDR_OWVAR 45
15812: PUSH
15813: LD_INT 11
15815: PUSH
15816: LD_INT 15
15818: PUSH
15819: LD_INT 12
15821: PUSH
15822: LD_INT 15
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: PUSH
15831: LD_VAR 0 2
15835: PUSH
15836: LD_INT 9
15838: MINUS
15839: ARRAY
15840: ST_TO_ADDR
// end ; 14 :
15841: GO 16260
15843: LD_INT 14
15845: DOUBLE
15846: EQUAL
15847: IFTRUE 15851
15849: GO 15862
15851: POP
// bc_type := b_workshop ; 15 :
15852: LD_ADDR_OWVAR 42
15856: PUSH
15857: LD_INT 2
15859: ST_TO_ADDR
15860: GO 16260
15862: LD_INT 15
15864: DOUBLE
15865: EQUAL
15866: IFTRUE 15870
15868: GO 15881
15870: POP
// bc_type := b_factory ; 16 :
15871: LD_ADDR_OWVAR 42
15875: PUSH
15876: LD_INT 3
15878: ST_TO_ADDR
15879: GO 16260
15881: LD_INT 16
15883: DOUBLE
15884: EQUAL
15885: IFTRUE 15889
15887: GO 15900
15889: POP
// bc_type := b_ext_gun ; 17 :
15890: LD_ADDR_OWVAR 42
15894: PUSH
15895: LD_INT 17
15897: ST_TO_ADDR
15898: GO 16260
15900: LD_INT 17
15902: DOUBLE
15903: EQUAL
15904: IFTRUE 15908
15906: GO 15936
15908: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15909: LD_ADDR_OWVAR 42
15913: PUSH
15914: LD_INT 19
15916: PUSH
15917: LD_INT 23
15919: PUSH
15920: LD_INT 19
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: PUSH
15928: LD_VAR 0 1
15932: ARRAY
15933: ST_TO_ADDR
15934: GO 16260
15936: LD_INT 18
15938: DOUBLE
15939: EQUAL
15940: IFTRUE 15944
15942: GO 15955
15944: POP
// bc_type := b_ext_radar ; 19 :
15945: LD_ADDR_OWVAR 42
15949: PUSH
15950: LD_INT 20
15952: ST_TO_ADDR
15953: GO 16260
15955: LD_INT 19
15957: DOUBLE
15958: EQUAL
15959: IFTRUE 15963
15961: GO 15974
15963: POP
// bc_type := b_ext_radio ; 20 :
15964: LD_ADDR_OWVAR 42
15968: PUSH
15969: LD_INT 22
15971: ST_TO_ADDR
15972: GO 16260
15974: LD_INT 20
15976: DOUBLE
15977: EQUAL
15978: IFTRUE 15982
15980: GO 15993
15982: POP
// bc_type := b_ext_siberium ; 21 :
15983: LD_ADDR_OWVAR 42
15987: PUSH
15988: LD_INT 21
15990: ST_TO_ADDR
15991: GO 16260
15993: LD_INT 21
15995: DOUBLE
15996: EQUAL
15997: IFTRUE 16001
15999: GO 16012
16001: POP
// bc_type := b_ext_computer ; 22 :
16002: LD_ADDR_OWVAR 42
16006: PUSH
16007: LD_INT 24
16009: ST_TO_ADDR
16010: GO 16260
16012: LD_INT 22
16014: DOUBLE
16015: EQUAL
16016: IFTRUE 16020
16018: GO 16031
16020: POP
// bc_type := b_ext_track ; 23 :
16021: LD_ADDR_OWVAR 42
16025: PUSH
16026: LD_INT 16
16028: ST_TO_ADDR
16029: GO 16260
16031: LD_INT 23
16033: DOUBLE
16034: EQUAL
16035: IFTRUE 16039
16037: GO 16050
16039: POP
// bc_type := b_ext_laser ; 24 :
16040: LD_ADDR_OWVAR 42
16044: PUSH
16045: LD_INT 25
16047: ST_TO_ADDR
16048: GO 16260
16050: LD_INT 24
16052: DOUBLE
16053: EQUAL
16054: IFTRUE 16058
16056: GO 16069
16058: POP
// bc_type := b_control_tower ; 25 :
16059: LD_ADDR_OWVAR 42
16063: PUSH
16064: LD_INT 36
16066: ST_TO_ADDR
16067: GO 16260
16069: LD_INT 25
16071: DOUBLE
16072: EQUAL
16073: IFTRUE 16077
16075: GO 16088
16077: POP
// bc_type := b_breastwork ; 26 :
16078: LD_ADDR_OWVAR 42
16082: PUSH
16083: LD_INT 31
16085: ST_TO_ADDR
16086: GO 16260
16088: LD_INT 26
16090: DOUBLE
16091: EQUAL
16092: IFTRUE 16096
16094: GO 16107
16096: POP
// bc_type := b_bunker ; 27 :
16097: LD_ADDR_OWVAR 42
16101: PUSH
16102: LD_INT 32
16104: ST_TO_ADDR
16105: GO 16260
16107: LD_INT 27
16109: DOUBLE
16110: EQUAL
16111: IFTRUE 16115
16113: GO 16126
16115: POP
// bc_type := b_turret ; 28 :
16116: LD_ADDR_OWVAR 42
16120: PUSH
16121: LD_INT 33
16123: ST_TO_ADDR
16124: GO 16260
16126: LD_INT 28
16128: DOUBLE
16129: EQUAL
16130: IFTRUE 16134
16132: GO 16145
16134: POP
// bc_type := b_armoury ; 29 :
16135: LD_ADDR_OWVAR 42
16139: PUSH
16140: LD_INT 4
16142: ST_TO_ADDR
16143: GO 16260
16145: LD_INT 29
16147: DOUBLE
16148: EQUAL
16149: IFTRUE 16153
16151: GO 16164
16153: POP
// bc_type := b_barracks ; 30 :
16154: LD_ADDR_OWVAR 42
16158: PUSH
16159: LD_INT 5
16161: ST_TO_ADDR
16162: GO 16260
16164: LD_INT 30
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16183
16172: POP
// bc_type := b_solar_power ; 31 :
16173: LD_ADDR_OWVAR 42
16177: PUSH
16178: LD_INT 27
16180: ST_TO_ADDR
16181: GO 16260
16183: LD_INT 31
16185: DOUBLE
16186: EQUAL
16187: IFTRUE 16191
16189: GO 16202
16191: POP
// bc_type := b_oil_power ; 32 :
16192: LD_ADDR_OWVAR 42
16196: PUSH
16197: LD_INT 26
16199: ST_TO_ADDR
16200: GO 16260
16202: LD_INT 32
16204: DOUBLE
16205: EQUAL
16206: IFTRUE 16210
16208: GO 16221
16210: POP
// bc_type := b_siberite_power ; 33 :
16211: LD_ADDR_OWVAR 42
16215: PUSH
16216: LD_INT 28
16218: ST_TO_ADDR
16219: GO 16260
16221: LD_INT 33
16223: DOUBLE
16224: EQUAL
16225: IFTRUE 16229
16227: GO 16240
16229: POP
// bc_type := b_oil_mine ; 34 :
16230: LD_ADDR_OWVAR 42
16234: PUSH
16235: LD_INT 29
16237: ST_TO_ADDR
16238: GO 16260
16240: LD_INT 34
16242: DOUBLE
16243: EQUAL
16244: IFTRUE 16248
16246: GO 16259
16248: POP
// bc_type := b_siberite_mine ; end ;
16249: LD_ADDR_OWVAR 42
16253: PUSH
16254: LD_INT 30
16256: ST_TO_ADDR
16257: GO 16260
16259: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16260: LD_ADDR_VAR 0 8
16264: PUSH
16265: LD_VAR 0 5
16269: PPUSH
16270: LD_VAR 0 6
16274: PPUSH
16275: LD_VAR 0 3
16279: PPUSH
16280: CALL_OW 47
16284: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16285: LD_OWVAR 42
16289: PUSH
16290: LD_INT 32
16292: PUSH
16293: LD_INT 33
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: IN
16300: IFFALSE 16316
// PlaceWeaponTurret ( b , weapon ) ;
16302: LD_VAR 0 8
16306: PPUSH
16307: LD_VAR 0 4
16311: PPUSH
16312: CALL_OW 431
// end ;
16316: LD_VAR 0 7
16320: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16321: LD_INT 0
16323: PPUSH
16324: PPUSH
16325: PPUSH
16326: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16327: LD_ADDR_VAR 0 4
16331: PUSH
16332: LD_INT 22
16334: PUSH
16335: LD_OWVAR 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 2
16346: PUSH
16347: LD_INT 30
16349: PUSH
16350: LD_INT 0
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 30
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PPUSH
16376: CALL_OW 69
16380: ST_TO_ADDR
// if not tmp then
16381: LD_VAR 0 4
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16449
// for i in tmp do
16390: LD_ADDR_VAR 0 2
16394: PUSH
16395: LD_VAR 0 4
16399: PUSH
16400: FOR_IN
16401: IFFALSE 16447
// for j = 1 to 3 do
16403: LD_ADDR_VAR 0 3
16407: PUSH
16408: DOUBLE
16409: LD_INT 1
16411: DEC
16412: ST_TO_ADDR
16413: LD_INT 3
16415: PUSH
16416: FOR_TO
16417: IFFALSE 16443
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16419: LD_VAR 0 2
16423: PPUSH
16424: CALL_OW 274
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_INT 99999
16436: PPUSH
16437: CALL_OW 277
16441: GO 16416
16443: POP
16444: POP
16445: GO 16400
16447: POP
16448: POP
// end ;
16449: LD_VAR 0 1
16453: RET
// export function hHackSetLevel10 ; var i , j ; begin
16454: LD_INT 0
16456: PPUSH
16457: PPUSH
16458: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16459: LD_ADDR_VAR 0 2
16463: PUSH
16464: LD_INT 21
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL_OW 69
16478: PUSH
16479: FOR_IN
16480: IFFALSE 16532
// if IsSelected ( i ) then
16482: LD_VAR 0 2
16486: PPUSH
16487: CALL_OW 306
16491: IFFALSE 16530
// begin for j := 1 to 4 do
16493: LD_ADDR_VAR 0 3
16497: PUSH
16498: DOUBLE
16499: LD_INT 1
16501: DEC
16502: ST_TO_ADDR
16503: LD_INT 4
16505: PUSH
16506: FOR_TO
16507: IFFALSE 16528
// SetSkill ( i , j , 10 ) ;
16509: LD_VAR 0 2
16513: PPUSH
16514: LD_VAR 0 3
16518: PPUSH
16519: LD_INT 10
16521: PPUSH
16522: CALL_OW 237
16526: GO 16506
16528: POP
16529: POP
// end ;
16530: GO 16479
16532: POP
16533: POP
// end ;
16534: LD_VAR 0 1
16538: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16539: LD_INT 0
16541: PPUSH
16542: PPUSH
16543: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16544: LD_ADDR_VAR 0 2
16548: PUSH
16549: LD_INT 22
16551: PUSH
16552: LD_OWVAR 2
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 21
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PPUSH
16575: CALL_OW 69
16579: PUSH
16580: FOR_IN
16581: IFFALSE 16622
// begin for j := 1 to 4 do
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: DOUBLE
16589: LD_INT 1
16591: DEC
16592: ST_TO_ADDR
16593: LD_INT 4
16595: PUSH
16596: FOR_TO
16597: IFFALSE 16618
// SetSkill ( i , j , 10 ) ;
16599: LD_VAR 0 2
16603: PPUSH
16604: LD_VAR 0 3
16608: PPUSH
16609: LD_INT 10
16611: PPUSH
16612: CALL_OW 237
16616: GO 16596
16618: POP
16619: POP
// end ;
16620: GO 16580
16622: POP
16623: POP
// end ;
16624: LD_VAR 0 1
16628: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16629: LD_INT 0
16631: PPUSH
// uc_side := your_side ;
16632: LD_ADDR_OWVAR 20
16636: PUSH
16637: LD_OWVAR 2
16641: ST_TO_ADDR
// uc_nation := nation ;
16642: LD_ADDR_OWVAR 21
16646: PUSH
16647: LD_VAR 0 1
16651: ST_TO_ADDR
// InitHc ;
16652: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16656: LD_INT 0
16658: PPUSH
16659: LD_VAR 0 2
16663: PPUSH
16664: LD_VAR 0 3
16668: PPUSH
16669: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16673: LD_VAR 0 4
16677: PPUSH
16678: LD_VAR 0 5
16682: PPUSH
16683: CALL_OW 428
16687: PUSH
16688: LD_INT 0
16690: EQUAL
16691: IFFALSE 16715
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16693: CALL_OW 44
16697: PPUSH
16698: LD_VAR 0 4
16702: PPUSH
16703: LD_VAR 0 5
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 48
// end ;
16715: LD_VAR 0 6
16719: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16720: LD_INT 0
16722: PPUSH
16723: PPUSH
// uc_side := your_side ;
16724: LD_ADDR_OWVAR 20
16728: PUSH
16729: LD_OWVAR 2
16733: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16734: LD_VAR 0 1
16738: PUSH
16739: LD_INT 1
16741: PUSH
16742: LD_INT 2
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: LD_INT 4
16750: PUSH
16751: LD_INT 5
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: IN
16761: IFFALSE 16773
// uc_nation := nation_american else
16763: LD_ADDR_OWVAR 21
16767: PUSH
16768: LD_INT 1
16770: ST_TO_ADDR
16771: GO 16816
// if chassis in [ 11 , 12 , 13 , 14 ] then
16773: LD_VAR 0 1
16777: PUSH
16778: LD_INT 11
16780: PUSH
16781: LD_INT 12
16783: PUSH
16784: LD_INT 13
16786: PUSH
16787: LD_INT 14
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: IN
16796: IFFALSE 16808
// uc_nation := nation_arabian else
16798: LD_ADDR_OWVAR 21
16802: PUSH
16803: LD_INT 2
16805: ST_TO_ADDR
16806: GO 16816
// uc_nation := nation_russian ;
16808: LD_ADDR_OWVAR 21
16812: PUSH
16813: LD_INT 3
16815: ST_TO_ADDR
// vc_chassis := chassis ;
16816: LD_ADDR_OWVAR 37
16820: PUSH
16821: LD_VAR 0 1
16825: ST_TO_ADDR
// vc_engine := engine ;
16826: LD_ADDR_OWVAR 39
16830: PUSH
16831: LD_VAR 0 2
16835: ST_TO_ADDR
// vc_control := control ;
16836: LD_ADDR_OWVAR 38
16840: PUSH
16841: LD_VAR 0 3
16845: ST_TO_ADDR
// vc_weapon := weapon ;
16846: LD_ADDR_OWVAR 40
16850: PUSH
16851: LD_VAR 0 4
16855: ST_TO_ADDR
// un := CreateVehicle ;
16856: LD_ADDR_VAR 0 8
16860: PUSH
16861: CALL_OW 45
16865: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16866: LD_VAR 0 8
16870: PPUSH
16871: LD_INT 0
16873: PPUSH
16874: LD_INT 5
16876: PPUSH
16877: CALL_OW 12
16881: PPUSH
16882: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16886: LD_VAR 0 8
16890: PPUSH
16891: LD_VAR 0 5
16895: PPUSH
16896: LD_VAR 0 6
16900: PPUSH
16901: LD_INT 1
16903: PPUSH
16904: CALL_OW 48
// end ;
16908: LD_VAR 0 7
16912: RET
// export hInvincible ; every 1 do
16913: GO 16915
16915: DISABLE
// hInvincible := [ ] ;
16916: LD_ADDR_EXP 86
16920: PUSH
16921: EMPTY
16922: ST_TO_ADDR
16923: END
// every 10 do var i ;
16924: GO 16926
16926: DISABLE
16927: LD_INT 0
16929: PPUSH
// begin enable ;
16930: ENABLE
// if not hInvincible then
16931: LD_EXP 86
16935: NOT
16936: IFFALSE 16940
// exit ;
16938: GO 16984
// for i in hInvincible do
16940: LD_ADDR_VAR 0 1
16944: PUSH
16945: LD_EXP 86
16949: PUSH
16950: FOR_IN
16951: IFFALSE 16982
// if GetLives ( i ) < 1000 then
16953: LD_VAR 0 1
16957: PPUSH
16958: CALL_OW 256
16962: PUSH
16963: LD_INT 1000
16965: LESS
16966: IFFALSE 16980
// SetLives ( i , 1000 ) ;
16968: LD_VAR 0 1
16972: PPUSH
16973: LD_INT 1000
16975: PPUSH
16976: CALL_OW 234
16980: GO 16950
16982: POP
16983: POP
// end ;
16984: PPOPN 1
16986: END
// export function hHackInvincible ; var i ; begin
16987: LD_INT 0
16989: PPUSH
16990: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 21
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 21
17011: PUSH
17012: LD_INT 2
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: PPUSH
17024: CALL_OW 69
17028: PUSH
17029: FOR_IN
17030: IFFALSE 17091
// if IsSelected ( i ) then
17032: LD_VAR 0 2
17036: PPUSH
17037: CALL_OW 306
17041: IFFALSE 17089
// begin if i in hInvincible then
17043: LD_VAR 0 2
17047: PUSH
17048: LD_EXP 86
17052: IN
17053: IFFALSE 17073
// hInvincible := hInvincible diff i else
17055: LD_ADDR_EXP 86
17059: PUSH
17060: LD_EXP 86
17064: PUSH
17065: LD_VAR 0 2
17069: DIFF
17070: ST_TO_ADDR
17071: GO 17089
// hInvincible := hInvincible union i ;
17073: LD_ADDR_EXP 86
17077: PUSH
17078: LD_EXP 86
17082: PUSH
17083: LD_VAR 0 2
17087: UNION
17088: ST_TO_ADDR
// end ;
17089: GO 17029
17091: POP
17092: POP
// end ;
17093: LD_VAR 0 1
17097: RET
// export function hHackInvisible ; var i , j ; begin
17098: LD_INT 0
17100: PPUSH
17101: PPUSH
17102: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17103: LD_ADDR_VAR 0 2
17107: PUSH
17108: LD_INT 21
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PPUSH
17118: CALL_OW 69
17122: PUSH
17123: FOR_IN
17124: IFFALSE 17148
// if IsSelected ( i ) then
17126: LD_VAR 0 2
17130: PPUSH
17131: CALL_OW 306
17135: IFFALSE 17146
// ComForceInvisible ( i ) ;
17137: LD_VAR 0 2
17141: PPUSH
17142: CALL_OW 496
17146: GO 17123
17148: POP
17149: POP
// end ;
17150: LD_VAR 0 1
17154: RET
// export function hHackChangeYourSide ; begin
17155: LD_INT 0
17157: PPUSH
// if your_side = 8 then
17158: LD_OWVAR 2
17162: PUSH
17163: LD_INT 8
17165: EQUAL
17166: IFFALSE 17178
// your_side := 0 else
17168: LD_ADDR_OWVAR 2
17172: PUSH
17173: LD_INT 0
17175: ST_TO_ADDR
17176: GO 17192
// your_side := your_side + 1 ;
17178: LD_ADDR_OWVAR 2
17182: PUSH
17183: LD_OWVAR 2
17187: PUSH
17188: LD_INT 1
17190: PLUS
17191: ST_TO_ADDR
// end ;
17192: LD_VAR 0 1
17196: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17197: LD_INT 0
17199: PPUSH
17200: PPUSH
17201: PPUSH
// for i in all_units do
17202: LD_ADDR_VAR 0 2
17206: PUSH
17207: LD_OWVAR 3
17211: PUSH
17212: FOR_IN
17213: IFFALSE 17291
// if IsSelected ( i ) then
17215: LD_VAR 0 2
17219: PPUSH
17220: CALL_OW 306
17224: IFFALSE 17289
// begin j := GetSide ( i ) ;
17226: LD_ADDR_VAR 0 3
17230: PUSH
17231: LD_VAR 0 2
17235: PPUSH
17236: CALL_OW 255
17240: ST_TO_ADDR
// if j = 8 then
17241: LD_VAR 0 3
17245: PUSH
17246: LD_INT 8
17248: EQUAL
17249: IFFALSE 17261
// j := 0 else
17251: LD_ADDR_VAR 0 3
17255: PUSH
17256: LD_INT 0
17258: ST_TO_ADDR
17259: GO 17275
// j := j + 1 ;
17261: LD_ADDR_VAR 0 3
17265: PUSH
17266: LD_VAR 0 3
17270: PUSH
17271: LD_INT 1
17273: PLUS
17274: ST_TO_ADDR
// SetSide ( i , j ) ;
17275: LD_VAR 0 2
17279: PPUSH
17280: LD_VAR 0 3
17284: PPUSH
17285: CALL_OW 235
// end ;
17289: GO 17212
17291: POP
17292: POP
// end ;
17293: LD_VAR 0 1
17297: RET
// export function hHackFog ; begin
17298: LD_INT 0
17300: PPUSH
// FogOff ( true ) ;
17301: LD_INT 1
17303: PPUSH
17304: CALL_OW 344
// end ;
17308: LD_VAR 0 1
17312: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17313: LD_INT 0
17315: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17316: LD_VAR 0 1
17320: PPUSH
17321: LD_VAR 0 2
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: LD_INT 1
17333: PPUSH
17334: LD_INT 1
17336: PPUSH
17337: CALL_OW 483
// CenterOnXY ( x , y ) ;
17341: LD_VAR 0 2
17345: PPUSH
17346: LD_VAR 0 3
17350: PPUSH
17351: CALL_OW 84
// end ; end_of_file
17355: LD_VAR 0 4
17359: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17360: LD_INT 0
17362: PPUSH
17363: PPUSH
// if exist_mode then
17364: LD_VAR 0 2
17368: IFFALSE 17393
// unit := CreateCharacter ( prefix & ident ) else
17370: LD_ADDR_VAR 0 5
17374: PUSH
17375: LD_VAR 0 3
17379: PUSH
17380: LD_VAR 0 1
17384: STR
17385: PPUSH
17386: CALL_OW 34
17390: ST_TO_ADDR
17391: GO 17408
// unit := NewCharacter ( ident ) ;
17393: LD_ADDR_VAR 0 5
17397: PUSH
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL_OW 25
17407: ST_TO_ADDR
// result := unit ;
17408: LD_ADDR_VAR 0 4
17412: PUSH
17413: LD_VAR 0 5
17417: ST_TO_ADDR
// end ;
17418: LD_VAR 0 4
17422: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17423: LD_INT 0
17425: PPUSH
17426: PPUSH
// if not side or not nation then
17427: LD_VAR 0 1
17431: NOT
17432: PUSH
17433: LD_VAR 0 2
17437: NOT
17438: OR
17439: IFFALSE 17443
// exit ;
17441: GO 18211
// case nation of nation_american :
17443: LD_VAR 0 2
17447: PUSH
17448: LD_INT 1
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17670
17456: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17457: LD_ADDR_VAR 0 4
17461: PUSH
17462: LD_INT 35
17464: PUSH
17465: LD_INT 45
17467: PUSH
17468: LD_INT 46
17470: PUSH
17471: LD_INT 47
17473: PUSH
17474: LD_INT 82
17476: PUSH
17477: LD_INT 83
17479: PUSH
17480: LD_INT 84
17482: PUSH
17483: LD_INT 85
17485: PUSH
17486: LD_INT 86
17488: PUSH
17489: LD_INT 1
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: LD_INT 6
17497: PUSH
17498: LD_INT 15
17500: PUSH
17501: LD_INT 16
17503: PUSH
17504: LD_INT 7
17506: PUSH
17507: LD_INT 12
17509: PUSH
17510: LD_INT 13
17512: PUSH
17513: LD_INT 10
17515: PUSH
17516: LD_INT 14
17518: PUSH
17519: LD_INT 20
17521: PUSH
17522: LD_INT 21
17524: PUSH
17525: LD_INT 22
17527: PUSH
17528: LD_INT 25
17530: PUSH
17531: LD_INT 32
17533: PUSH
17534: LD_INT 27
17536: PUSH
17537: LD_INT 36
17539: PUSH
17540: LD_INT 69
17542: PUSH
17543: LD_INT 39
17545: PUSH
17546: LD_INT 34
17548: PUSH
17549: LD_INT 40
17551: PUSH
17552: LD_INT 48
17554: PUSH
17555: LD_INT 49
17557: PUSH
17558: LD_INT 50
17560: PUSH
17561: LD_INT 51
17563: PUSH
17564: LD_INT 52
17566: PUSH
17567: LD_INT 53
17569: PUSH
17570: LD_INT 54
17572: PUSH
17573: LD_INT 55
17575: PUSH
17576: LD_INT 56
17578: PUSH
17579: LD_INT 57
17581: PUSH
17582: LD_INT 58
17584: PUSH
17585: LD_INT 59
17587: PUSH
17588: LD_INT 60
17590: PUSH
17591: LD_INT 61
17593: PUSH
17594: LD_INT 62
17596: PUSH
17597: LD_INT 80
17599: PUSH
17600: LD_INT 82
17602: PUSH
17603: LD_INT 83
17605: PUSH
17606: LD_INT 84
17608: PUSH
17609: LD_INT 85
17611: PUSH
17612: LD_INT 86
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: ST_TO_ADDR
17668: GO 18135
17670: LD_INT 2
17672: DOUBLE
17673: EQUAL
17674: IFTRUE 17678
17676: GO 17904
17678: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17679: LD_ADDR_VAR 0 4
17683: PUSH
17684: LD_INT 35
17686: PUSH
17687: LD_INT 45
17689: PUSH
17690: LD_INT 46
17692: PUSH
17693: LD_INT 47
17695: PUSH
17696: LD_INT 82
17698: PUSH
17699: LD_INT 83
17701: PUSH
17702: LD_INT 84
17704: PUSH
17705: LD_INT 85
17707: PUSH
17708: LD_INT 87
17710: PUSH
17711: LD_INT 70
17713: PUSH
17714: LD_INT 1
17716: PUSH
17717: LD_INT 11
17719: PUSH
17720: LD_INT 3
17722: PUSH
17723: LD_INT 4
17725: PUSH
17726: LD_INT 5
17728: PUSH
17729: LD_INT 6
17731: PUSH
17732: LD_INT 15
17734: PUSH
17735: LD_INT 18
17737: PUSH
17738: LD_INT 7
17740: PUSH
17741: LD_INT 17
17743: PUSH
17744: LD_INT 8
17746: PUSH
17747: LD_INT 20
17749: PUSH
17750: LD_INT 21
17752: PUSH
17753: LD_INT 22
17755: PUSH
17756: LD_INT 72
17758: PUSH
17759: LD_INT 26
17761: PUSH
17762: LD_INT 69
17764: PUSH
17765: LD_INT 39
17767: PUSH
17768: LD_INT 40
17770: PUSH
17771: LD_INT 41
17773: PUSH
17774: LD_INT 42
17776: PUSH
17777: LD_INT 43
17779: PUSH
17780: LD_INT 48
17782: PUSH
17783: LD_INT 49
17785: PUSH
17786: LD_INT 50
17788: PUSH
17789: LD_INT 51
17791: PUSH
17792: LD_INT 52
17794: PUSH
17795: LD_INT 53
17797: PUSH
17798: LD_INT 54
17800: PUSH
17801: LD_INT 55
17803: PUSH
17804: LD_INT 56
17806: PUSH
17807: LD_INT 60
17809: PUSH
17810: LD_INT 61
17812: PUSH
17813: LD_INT 62
17815: PUSH
17816: LD_INT 66
17818: PUSH
17819: LD_INT 67
17821: PUSH
17822: LD_INT 68
17824: PUSH
17825: LD_INT 81
17827: PUSH
17828: LD_INT 82
17830: PUSH
17831: LD_INT 83
17833: PUSH
17834: LD_INT 84
17836: PUSH
17837: LD_INT 85
17839: PUSH
17840: LD_INT 87
17842: PUSH
17843: LD_INT 88
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: ST_TO_ADDR
17902: GO 18135
17904: LD_INT 3
17906: DOUBLE
17907: EQUAL
17908: IFTRUE 17912
17910: GO 18134
17912: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17913: LD_ADDR_VAR 0 4
17917: PUSH
17918: LD_INT 46
17920: PUSH
17921: LD_INT 47
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 82
17932: PUSH
17933: LD_INT 83
17935: PUSH
17936: LD_INT 84
17938: PUSH
17939: LD_INT 85
17941: PUSH
17942: LD_INT 86
17944: PUSH
17945: LD_INT 11
17947: PUSH
17948: LD_INT 9
17950: PUSH
17951: LD_INT 20
17953: PUSH
17954: LD_INT 19
17956: PUSH
17957: LD_INT 21
17959: PUSH
17960: LD_INT 24
17962: PUSH
17963: LD_INT 22
17965: PUSH
17966: LD_INT 25
17968: PUSH
17969: LD_INT 28
17971: PUSH
17972: LD_INT 29
17974: PUSH
17975: LD_INT 30
17977: PUSH
17978: LD_INT 31
17980: PUSH
17981: LD_INT 37
17983: PUSH
17984: LD_INT 38
17986: PUSH
17987: LD_INT 32
17989: PUSH
17990: LD_INT 27
17992: PUSH
17993: LD_INT 33
17995: PUSH
17996: LD_INT 69
17998: PUSH
17999: LD_INT 39
18001: PUSH
18002: LD_INT 34
18004: PUSH
18005: LD_INT 40
18007: PUSH
18008: LD_INT 71
18010: PUSH
18011: LD_INT 23
18013: PUSH
18014: LD_INT 44
18016: PUSH
18017: LD_INT 48
18019: PUSH
18020: LD_INT 49
18022: PUSH
18023: LD_INT 50
18025: PUSH
18026: LD_INT 51
18028: PUSH
18029: LD_INT 52
18031: PUSH
18032: LD_INT 53
18034: PUSH
18035: LD_INT 54
18037: PUSH
18038: LD_INT 55
18040: PUSH
18041: LD_INT 56
18043: PUSH
18044: LD_INT 57
18046: PUSH
18047: LD_INT 58
18049: PUSH
18050: LD_INT 59
18052: PUSH
18053: LD_INT 63
18055: PUSH
18056: LD_INT 64
18058: PUSH
18059: LD_INT 65
18061: PUSH
18062: LD_INT 82
18064: PUSH
18065: LD_INT 83
18067: PUSH
18068: LD_INT 84
18070: PUSH
18071: LD_INT 85
18073: PUSH
18074: LD_INT 86
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: ST_TO_ADDR
18132: GO 18135
18134: POP
// if state > - 1 and state < 3 then
18135: LD_VAR 0 3
18139: PUSH
18140: LD_INT 1
18142: NEG
18143: GREATER
18144: PUSH
18145: LD_VAR 0 3
18149: PUSH
18150: LD_INT 3
18152: LESS
18153: AND
18154: IFFALSE 18211
// for i in result do
18156: LD_ADDR_VAR 0 5
18160: PUSH
18161: LD_VAR 0 4
18165: PUSH
18166: FOR_IN
18167: IFFALSE 18209
// if GetTech ( i , side ) <> state then
18169: LD_VAR 0 5
18173: PPUSH
18174: LD_VAR 0 1
18178: PPUSH
18179: CALL_OW 321
18183: PUSH
18184: LD_VAR 0 3
18188: NONEQUAL
18189: IFFALSE 18207
// result := result diff i ;
18191: LD_ADDR_VAR 0 4
18195: PUSH
18196: LD_VAR 0 4
18200: PUSH
18201: LD_VAR 0 5
18205: DIFF
18206: ST_TO_ADDR
18207: GO 18166
18209: POP
18210: POP
// end ;
18211: LD_VAR 0 4
18215: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
18220: PPUSH
// result := true ;
18221: LD_ADDR_VAR 0 3
18225: PUSH
18226: LD_INT 1
18228: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18229: LD_ADDR_VAR 0 5
18233: PUSH
18234: LD_VAR 0 2
18238: PPUSH
18239: CALL_OW 480
18243: ST_TO_ADDR
// if not tmp then
18244: LD_VAR 0 5
18248: NOT
18249: IFFALSE 18253
// exit ;
18251: GO 18302
// for i in tmp do
18253: LD_ADDR_VAR 0 4
18257: PUSH
18258: LD_VAR 0 5
18262: PUSH
18263: FOR_IN
18264: IFFALSE 18300
// if GetTech ( i , side ) <> state_researched then
18266: LD_VAR 0 4
18270: PPUSH
18271: LD_VAR 0 1
18275: PPUSH
18276: CALL_OW 321
18280: PUSH
18281: LD_INT 2
18283: NONEQUAL
18284: IFFALSE 18298
// begin result := false ;
18286: LD_ADDR_VAR 0 3
18290: PUSH
18291: LD_INT 0
18293: ST_TO_ADDR
// exit ;
18294: POP
18295: POP
18296: GO 18302
// end ;
18298: GO 18263
18300: POP
18301: POP
// end ;
18302: LD_VAR 0 3
18306: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
18311: PPUSH
18312: PPUSH
18313: PPUSH
18314: PPUSH
18315: PPUSH
18316: PPUSH
18317: PPUSH
18318: PPUSH
18319: PPUSH
18320: PPUSH
18321: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18322: LD_VAR 0 1
18326: NOT
18327: PUSH
18328: LD_VAR 0 1
18332: PPUSH
18333: CALL_OW 257
18337: PUSH
18338: LD_INT 9
18340: NONEQUAL
18341: OR
18342: IFFALSE 18346
// exit ;
18344: GO 18919
// side := GetSide ( unit ) ;
18346: LD_ADDR_VAR 0 9
18350: PUSH
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 255
18360: ST_TO_ADDR
// tech_space := tech_spacanom ;
18361: LD_ADDR_VAR 0 12
18365: PUSH
18366: LD_INT 29
18368: ST_TO_ADDR
// tech_time := tech_taurad ;
18369: LD_ADDR_VAR 0 13
18373: PUSH
18374: LD_INT 28
18376: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18377: LD_ADDR_VAR 0 11
18381: PUSH
18382: LD_VAR 0 1
18386: PPUSH
18387: CALL_OW 310
18391: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18392: LD_VAR 0 11
18396: PPUSH
18397: CALL_OW 247
18401: PUSH
18402: LD_INT 2
18404: EQUAL
18405: IFFALSE 18409
// exit ;
18407: GO 18919
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18409: LD_ADDR_VAR 0 8
18413: PUSH
18414: LD_INT 81
18416: PUSH
18417: LD_VAR 0 9
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 3
18428: PUSH
18429: LD_INT 21
18431: PUSH
18432: LD_INT 3
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: ST_TO_ADDR
// if not tmp then
18452: LD_VAR 0 8
18456: NOT
18457: IFFALSE 18461
// exit ;
18459: GO 18919
// if in_unit then
18461: LD_VAR 0 11
18465: IFFALSE 18489
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18467: LD_ADDR_VAR 0 10
18471: PUSH
18472: LD_VAR 0 8
18476: PPUSH
18477: LD_VAR 0 11
18481: PPUSH
18482: CALL_OW 74
18486: ST_TO_ADDR
18487: GO 18509
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18489: LD_ADDR_VAR 0 10
18493: PUSH
18494: LD_VAR 0 8
18498: PPUSH
18499: LD_VAR 0 1
18503: PPUSH
18504: CALL_OW 74
18508: ST_TO_ADDR
// if not enemy then
18509: LD_VAR 0 10
18513: NOT
18514: IFFALSE 18518
// exit ;
18516: GO 18919
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18518: LD_VAR 0 11
18522: PUSH
18523: LD_VAR 0 11
18527: PPUSH
18528: LD_VAR 0 10
18532: PPUSH
18533: CALL_OW 296
18537: PUSH
18538: LD_INT 13
18540: GREATER
18541: AND
18542: PUSH
18543: LD_VAR 0 1
18547: PPUSH
18548: LD_VAR 0 10
18552: PPUSH
18553: CALL_OW 296
18557: PUSH
18558: LD_INT 12
18560: GREATER
18561: OR
18562: IFFALSE 18566
// exit ;
18564: GO 18919
// missile := [ 1 ] ;
18566: LD_ADDR_VAR 0 14
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18577: LD_VAR 0 9
18581: PPUSH
18582: LD_VAR 0 12
18586: PPUSH
18587: CALL_OW 325
18591: IFFALSE 18620
// missile := Insert ( missile , missile + 1 , 2 ) ;
18593: LD_ADDR_VAR 0 14
18597: PUSH
18598: LD_VAR 0 14
18602: PPUSH
18603: LD_VAR 0 14
18607: PUSH
18608: LD_INT 1
18610: PLUS
18611: PPUSH
18612: LD_INT 2
18614: PPUSH
18615: CALL_OW 2
18619: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18620: LD_VAR 0 9
18624: PPUSH
18625: LD_VAR 0 13
18629: PPUSH
18630: CALL_OW 325
18634: PUSH
18635: LD_VAR 0 10
18639: PPUSH
18640: CALL_OW 255
18644: PPUSH
18645: LD_VAR 0 13
18649: PPUSH
18650: CALL_OW 325
18654: NOT
18655: AND
18656: IFFALSE 18685
// missile := Insert ( missile , missile + 1 , 3 ) ;
18658: LD_ADDR_VAR 0 14
18662: PUSH
18663: LD_VAR 0 14
18667: PPUSH
18668: LD_VAR 0 14
18672: PUSH
18673: LD_INT 1
18675: PLUS
18676: PPUSH
18677: LD_INT 3
18679: PPUSH
18680: CALL_OW 2
18684: ST_TO_ADDR
// if missile < 2 then
18685: LD_VAR 0 14
18689: PUSH
18690: LD_INT 2
18692: LESS
18693: IFFALSE 18697
// exit ;
18695: GO 18919
// x := GetX ( enemy ) ;
18697: LD_ADDR_VAR 0 4
18701: PUSH
18702: LD_VAR 0 10
18706: PPUSH
18707: CALL_OW 250
18711: ST_TO_ADDR
// y := GetY ( enemy ) ;
18712: LD_ADDR_VAR 0 5
18716: PUSH
18717: LD_VAR 0 10
18721: PPUSH
18722: CALL_OW 251
18726: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18727: LD_ADDR_VAR 0 6
18731: PUSH
18732: LD_VAR 0 4
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PPUSH
18741: LD_INT 1
18743: PPUSH
18744: CALL_OW 12
18748: PLUS
18749: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18750: LD_ADDR_VAR 0 7
18754: PUSH
18755: LD_VAR 0 5
18759: PUSH
18760: LD_INT 1
18762: NEG
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL_OW 12
18771: PLUS
18772: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18773: LD_VAR 0 6
18777: PPUSH
18778: LD_VAR 0 7
18782: PPUSH
18783: CALL_OW 488
18787: NOT
18788: IFFALSE 18810
// begin _x := x ;
18790: LD_ADDR_VAR 0 6
18794: PUSH
18795: LD_VAR 0 4
18799: ST_TO_ADDR
// _y := y ;
18800: LD_ADDR_VAR 0 7
18804: PUSH
18805: LD_VAR 0 5
18809: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18810: LD_ADDR_VAR 0 3
18814: PUSH
18815: LD_INT 1
18817: PPUSH
18818: LD_VAR 0 14
18822: PPUSH
18823: CALL_OW 12
18827: ST_TO_ADDR
// case i of 1 :
18828: LD_VAR 0 3
18832: PUSH
18833: LD_INT 1
18835: DOUBLE
18836: EQUAL
18837: IFTRUE 18841
18839: GO 18858
18841: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18842: LD_VAR 0 1
18846: PPUSH
18847: LD_VAR 0 10
18851: PPUSH
18852: CALL_OW 115
18856: GO 18919
18858: LD_INT 2
18860: DOUBLE
18861: EQUAL
18862: IFTRUE 18866
18864: GO 18888
18866: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18867: LD_VAR 0 1
18871: PPUSH
18872: LD_VAR 0 6
18876: PPUSH
18877: LD_VAR 0 7
18881: PPUSH
18882: CALL_OW 153
18886: GO 18919
18888: LD_INT 3
18890: DOUBLE
18891: EQUAL
18892: IFTRUE 18896
18894: GO 18918
18896: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18897: LD_VAR 0 1
18901: PPUSH
18902: LD_VAR 0 6
18906: PPUSH
18907: LD_VAR 0 7
18911: PPUSH
18912: CALL_OW 154
18916: GO 18919
18918: POP
// end ;
18919: LD_VAR 0 2
18923: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18924: LD_INT 0
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
// if not unit or not building then
18932: LD_VAR 0 1
18936: NOT
18937: PUSH
18938: LD_VAR 0 2
18942: NOT
18943: OR
18944: IFFALSE 18948
// exit ;
18946: GO 19106
// x := GetX ( building ) ;
18948: LD_ADDR_VAR 0 5
18952: PUSH
18953: LD_VAR 0 2
18957: PPUSH
18958: CALL_OW 250
18962: ST_TO_ADDR
// y := GetY ( building ) ;
18963: LD_ADDR_VAR 0 6
18967: PUSH
18968: LD_VAR 0 2
18972: PPUSH
18973: CALL_OW 251
18977: ST_TO_ADDR
// for i = 0 to 5 do
18978: LD_ADDR_VAR 0 4
18982: PUSH
18983: DOUBLE
18984: LD_INT 0
18986: DEC
18987: ST_TO_ADDR
18988: LD_INT 5
18990: PUSH
18991: FOR_TO
18992: IFFALSE 19104
// begin _x := ShiftX ( x , i , 3 ) ;
18994: LD_ADDR_VAR 0 7
18998: PUSH
18999: LD_VAR 0 5
19003: PPUSH
19004: LD_VAR 0 4
19008: PPUSH
19009: LD_INT 3
19011: PPUSH
19012: CALL_OW 272
19016: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19017: LD_ADDR_VAR 0 8
19021: PUSH
19022: LD_VAR 0 6
19026: PPUSH
19027: LD_VAR 0 4
19031: PPUSH
19032: LD_INT 3
19034: PPUSH
19035: CALL_OW 273
19039: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19040: LD_VAR 0 7
19044: PPUSH
19045: LD_VAR 0 8
19049: PPUSH
19050: CALL_OW 488
19054: NOT
19055: IFFALSE 19059
// continue ;
19057: GO 18991
// if HexInfo ( _x , _y ) = 0 then
19059: LD_VAR 0 7
19063: PPUSH
19064: LD_VAR 0 8
19068: PPUSH
19069: CALL_OW 428
19073: PUSH
19074: LD_INT 0
19076: EQUAL
19077: IFFALSE 19102
// begin ComMoveXY ( unit , _x , _y ) ;
19079: LD_VAR 0 1
19083: PPUSH
19084: LD_VAR 0 7
19088: PPUSH
19089: LD_VAR 0 8
19093: PPUSH
19094: CALL_OW 111
// exit ;
19098: POP
19099: POP
19100: GO 19106
// end ; end ;
19102: GO 18991
19104: POP
19105: POP
// end ;
19106: LD_VAR 0 3
19110: RET
// export function ScanBase ( side , base_area ) ; begin
19111: LD_INT 0
19113: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19114: LD_ADDR_VAR 0 3
19118: PUSH
19119: LD_VAR 0 2
19123: PPUSH
19124: LD_INT 81
19126: PUSH
19127: LD_VAR 0 1
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PPUSH
19136: CALL_OW 70
19140: ST_TO_ADDR
// end ;
19141: LD_VAR 0 3
19145: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19146: LD_INT 0
19148: PPUSH
19149: PPUSH
19150: PPUSH
19151: PPUSH
// result := false ;
19152: LD_ADDR_VAR 0 2
19156: PUSH
19157: LD_INT 0
19159: ST_TO_ADDR
// side := GetSide ( unit ) ;
19160: LD_ADDR_VAR 0 3
19164: PUSH
19165: LD_VAR 0 1
19169: PPUSH
19170: CALL_OW 255
19174: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19175: LD_ADDR_VAR 0 4
19179: PUSH
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 248
19189: ST_TO_ADDR
// case nat of 1 :
19190: LD_VAR 0 4
19194: PUSH
19195: LD_INT 1
19197: DOUBLE
19198: EQUAL
19199: IFTRUE 19203
19201: GO 19214
19203: POP
// tech := tech_lassight ; 2 :
19204: LD_ADDR_VAR 0 5
19208: PUSH
19209: LD_INT 12
19211: ST_TO_ADDR
19212: GO 19253
19214: LD_INT 2
19216: DOUBLE
19217: EQUAL
19218: IFTRUE 19222
19220: GO 19233
19222: POP
// tech := tech_mortar ; 3 :
19223: LD_ADDR_VAR 0 5
19227: PUSH
19228: LD_INT 41
19230: ST_TO_ADDR
19231: GO 19253
19233: LD_INT 3
19235: DOUBLE
19236: EQUAL
19237: IFTRUE 19241
19239: GO 19252
19241: POP
// tech := tech_bazooka ; end ;
19242: LD_ADDR_VAR 0 5
19246: PUSH
19247: LD_INT 44
19249: ST_TO_ADDR
19250: GO 19253
19252: POP
// if Researched ( side , tech ) then
19253: LD_VAR 0 3
19257: PPUSH
19258: LD_VAR 0 5
19262: PPUSH
19263: CALL_OW 325
19267: IFFALSE 19294
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19269: LD_ADDR_VAR 0 2
19273: PUSH
19274: LD_INT 5
19276: PUSH
19277: LD_INT 8
19279: PUSH
19280: LD_INT 9
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: LIST
19287: PUSH
19288: LD_VAR 0 4
19292: ARRAY
19293: ST_TO_ADDR
// end ;
19294: LD_VAR 0 2
19298: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19299: LD_INT 0
19301: PPUSH
19302: PPUSH
19303: PPUSH
// if not mines then
19304: LD_VAR 0 2
19308: NOT
19309: IFFALSE 19313
// exit ;
19311: GO 19457
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19313: LD_ADDR_VAR 0 5
19317: PUSH
19318: LD_INT 81
19320: PUSH
19321: LD_VAR 0 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 3
19332: PUSH
19333: LD_INT 21
19335: PUSH
19336: LD_INT 3
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PPUSH
19351: CALL_OW 69
19355: ST_TO_ADDR
// for i in mines do
19356: LD_ADDR_VAR 0 4
19360: PUSH
19361: LD_VAR 0 2
19365: PUSH
19366: FOR_IN
19367: IFFALSE 19455
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19369: LD_VAR 0 4
19373: PUSH
19374: LD_INT 1
19376: ARRAY
19377: PPUSH
19378: LD_VAR 0 4
19382: PUSH
19383: LD_INT 2
19385: ARRAY
19386: PPUSH
19387: CALL_OW 458
19391: NOT
19392: IFFALSE 19396
// continue ;
19394: GO 19366
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19396: LD_VAR 0 4
19400: PUSH
19401: LD_INT 1
19403: ARRAY
19404: PPUSH
19405: LD_VAR 0 4
19409: PUSH
19410: LD_INT 2
19412: ARRAY
19413: PPUSH
19414: CALL_OW 428
19418: PUSH
19419: LD_VAR 0 5
19423: IN
19424: IFFALSE 19453
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19426: LD_VAR 0 4
19430: PUSH
19431: LD_INT 1
19433: ARRAY
19434: PPUSH
19435: LD_VAR 0 4
19439: PUSH
19440: LD_INT 2
19442: ARRAY
19443: PPUSH
19444: LD_VAR 0 1
19448: PPUSH
19449: CALL_OW 456
// end ;
19453: GO 19366
19455: POP
19456: POP
// end ;
19457: LD_VAR 0 3
19461: RET
// export function Count ( array ) ; var i ; begin
19462: LD_INT 0
19464: PPUSH
19465: PPUSH
// result := 0 ;
19466: LD_ADDR_VAR 0 2
19470: PUSH
19471: LD_INT 0
19473: ST_TO_ADDR
// for i in array do
19474: LD_ADDR_VAR 0 3
19478: PUSH
19479: LD_VAR 0 1
19483: PUSH
19484: FOR_IN
19485: IFFALSE 19509
// if i then
19487: LD_VAR 0 3
19491: IFFALSE 19507
// result := result + 1 ;
19493: LD_ADDR_VAR 0 2
19497: PUSH
19498: LD_VAR 0 2
19502: PUSH
19503: LD_INT 1
19505: PLUS
19506: ST_TO_ADDR
19507: GO 19484
19509: POP
19510: POP
// end ;
19511: LD_VAR 0 2
19515: RET
// export function IsEmpty ( building ) ; begin
19516: LD_INT 0
19518: PPUSH
// if not building then
19519: LD_VAR 0 1
19523: NOT
19524: IFFALSE 19528
// exit ;
19526: GO 19571
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19528: LD_ADDR_VAR 0 2
19532: PUSH
19533: LD_VAR 0 1
19537: PUSH
19538: LD_INT 22
19540: PUSH
19541: LD_VAR 0 1
19545: PPUSH
19546: CALL_OW 255
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 58
19557: PUSH
19558: EMPTY
19559: LIST
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PPUSH
19565: CALL_OW 69
19569: IN
19570: ST_TO_ADDR
// end ;
19571: LD_VAR 0 2
19575: RET
// export function IsNotFull ( building ) ; begin
19576: LD_INT 0
19578: PPUSH
// if not building then
19579: LD_VAR 0 1
19583: NOT
19584: IFFALSE 19588
// exit ;
19586: GO 19607
// result := UnitsInside ( building ) < 6 ;
19588: LD_ADDR_VAR 0 2
19592: PUSH
19593: LD_VAR 0 1
19597: PPUSH
19598: CALL_OW 313
19602: PUSH
19603: LD_INT 6
19605: LESS
19606: ST_TO_ADDR
// end ;
19607: LD_VAR 0 2
19611: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19612: LD_INT 0
19614: PPUSH
19615: PPUSH
19616: PPUSH
19617: PPUSH
// tmp := [ ] ;
19618: LD_ADDR_VAR 0 3
19622: PUSH
19623: EMPTY
19624: ST_TO_ADDR
// list := [ ] ;
19625: LD_ADDR_VAR 0 5
19629: PUSH
19630: EMPTY
19631: ST_TO_ADDR
// for i = 16 to 25 do
19632: LD_ADDR_VAR 0 4
19636: PUSH
19637: DOUBLE
19638: LD_INT 16
19640: DEC
19641: ST_TO_ADDR
19642: LD_INT 25
19644: PUSH
19645: FOR_TO
19646: IFFALSE 19719
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19648: LD_ADDR_VAR 0 3
19652: PUSH
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 22
19660: PUSH
19661: LD_VAR 0 1
19665: PPUSH
19666: CALL_OW 255
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 91
19677: PUSH
19678: LD_VAR 0 1
19682: PUSH
19683: LD_INT 6
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 30
19693: PUSH
19694: LD_VAR 0 4
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: LIST
19707: PUSH
19708: EMPTY
19709: LIST
19710: PPUSH
19711: CALL_OW 69
19715: ADD
19716: ST_TO_ADDR
19717: GO 19645
19719: POP
19720: POP
// for i = 1 to tmp do
19721: LD_ADDR_VAR 0 4
19725: PUSH
19726: DOUBLE
19727: LD_INT 1
19729: DEC
19730: ST_TO_ADDR
19731: LD_VAR 0 3
19735: PUSH
19736: FOR_TO
19737: IFFALSE 19825
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19739: LD_ADDR_VAR 0 5
19743: PUSH
19744: LD_VAR 0 5
19748: PUSH
19749: LD_VAR 0 3
19753: PUSH
19754: LD_VAR 0 4
19758: ARRAY
19759: PPUSH
19760: CALL_OW 266
19764: PUSH
19765: LD_VAR 0 3
19769: PUSH
19770: LD_VAR 0 4
19774: ARRAY
19775: PPUSH
19776: CALL_OW 250
19780: PUSH
19781: LD_VAR 0 3
19785: PUSH
19786: LD_VAR 0 4
19790: ARRAY
19791: PPUSH
19792: CALL_OW 251
19796: PUSH
19797: LD_VAR 0 3
19801: PUSH
19802: LD_VAR 0 4
19806: ARRAY
19807: PPUSH
19808: CALL_OW 254
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: PUSH
19819: EMPTY
19820: LIST
19821: ADD
19822: ST_TO_ADDR
19823: GO 19736
19825: POP
19826: POP
// result := list ;
19827: LD_ADDR_VAR 0 2
19831: PUSH
19832: LD_VAR 0 5
19836: ST_TO_ADDR
// end ;
19837: LD_VAR 0 2
19841: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
19846: PPUSH
19847: PPUSH
19848: PPUSH
19849: PPUSH
19850: PPUSH
// if not factory then
19851: LD_VAR 0 1
19855: NOT
19856: IFFALSE 19860
// exit ;
19858: GO 20453
// if control = control_apeman then
19860: LD_VAR 0 4
19864: PUSH
19865: LD_INT 5
19867: EQUAL
19868: IFFALSE 19977
// begin tmp := UnitsInside ( factory ) ;
19870: LD_ADDR_VAR 0 8
19874: PUSH
19875: LD_VAR 0 1
19879: PPUSH
19880: CALL_OW 313
19884: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19885: LD_VAR 0 8
19889: PPUSH
19890: LD_INT 25
19892: PUSH
19893: LD_INT 12
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PPUSH
19900: CALL_OW 72
19904: NOT
19905: IFFALSE 19915
// control := control_manual ;
19907: LD_ADDR_VAR 0 4
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19915: LD_ADDR_VAR 0 8
19919: PUSH
19920: LD_VAR 0 1
19924: PPUSH
19925: CALL 19612 0 1
19929: ST_TO_ADDR
// if tmp then
19930: LD_VAR 0 8
19934: IFFALSE 19977
// begin for i in tmp do
19936: LD_ADDR_VAR 0 7
19940: PUSH
19941: LD_VAR 0 8
19945: PUSH
19946: FOR_IN
19947: IFFALSE 19975
// if i [ 1 ] = b_ext_radio then
19949: LD_VAR 0 7
19953: PUSH
19954: LD_INT 1
19956: ARRAY
19957: PUSH
19958: LD_INT 22
19960: EQUAL
19961: IFFALSE 19973
// begin control := control_remote ;
19963: LD_ADDR_VAR 0 4
19967: PUSH
19968: LD_INT 2
19970: ST_TO_ADDR
// break ;
19971: GO 19975
// end ;
19973: GO 19946
19975: POP
19976: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19977: LD_VAR 0 1
19981: PPUSH
19982: LD_VAR 0 2
19986: PPUSH
19987: LD_VAR 0 3
19991: PPUSH
19992: LD_VAR 0 4
19996: PPUSH
19997: LD_VAR 0 5
20001: PPUSH
20002: CALL_OW 448
20006: IFFALSE 20041
// begin result := [ chassis , engine , control , weapon ] ;
20008: LD_ADDR_VAR 0 6
20012: PUSH
20013: LD_VAR 0 2
20017: PUSH
20018: LD_VAR 0 3
20022: PUSH
20023: LD_VAR 0 4
20027: PUSH
20028: LD_VAR 0 5
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: ST_TO_ADDR
// exit ;
20039: GO 20453
// end ; _chassis := AvailableChassisList ( factory ) ;
20041: LD_ADDR_VAR 0 9
20045: PUSH
20046: LD_VAR 0 1
20050: PPUSH
20051: CALL_OW 475
20055: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20056: LD_ADDR_VAR 0 11
20060: PUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL_OW 476
20070: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20071: LD_ADDR_VAR 0 12
20075: PUSH
20076: LD_VAR 0 1
20080: PPUSH
20081: CALL_OW 477
20085: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20086: LD_ADDR_VAR 0 10
20090: PUSH
20091: LD_VAR 0 1
20095: PPUSH
20096: CALL_OW 478
20100: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20101: LD_VAR 0 9
20105: NOT
20106: PUSH
20107: LD_VAR 0 11
20111: NOT
20112: OR
20113: PUSH
20114: LD_VAR 0 12
20118: NOT
20119: OR
20120: PUSH
20121: LD_VAR 0 10
20125: NOT
20126: OR
20127: IFFALSE 20162
// begin result := [ chassis , engine , control , weapon ] ;
20129: LD_ADDR_VAR 0 6
20133: PUSH
20134: LD_VAR 0 2
20138: PUSH
20139: LD_VAR 0 3
20143: PUSH
20144: LD_VAR 0 4
20148: PUSH
20149: LD_VAR 0 5
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: ST_TO_ADDR
// exit ;
20160: GO 20453
// end ; if not chassis in _chassis then
20162: LD_VAR 0 2
20166: PUSH
20167: LD_VAR 0 9
20171: IN
20172: NOT
20173: IFFALSE 20199
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20175: LD_ADDR_VAR 0 2
20179: PUSH
20180: LD_VAR 0 9
20184: PUSH
20185: LD_INT 1
20187: PPUSH
20188: LD_VAR 0 9
20192: PPUSH
20193: CALL_OW 12
20197: ARRAY
20198: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20199: LD_VAR 0 2
20203: PPUSH
20204: LD_VAR 0 3
20208: PPUSH
20209: CALL 20458 0 2
20213: NOT
20214: IFFALSE 20273
// repeat engine := _engine [ 1 ] ;
20216: LD_ADDR_VAR 0 3
20220: PUSH
20221: LD_VAR 0 11
20225: PUSH
20226: LD_INT 1
20228: ARRAY
20229: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20230: LD_ADDR_VAR 0 11
20234: PUSH
20235: LD_VAR 0 11
20239: PPUSH
20240: LD_INT 1
20242: PPUSH
20243: CALL_OW 3
20247: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20248: LD_VAR 0 2
20252: PPUSH
20253: LD_VAR 0 3
20257: PPUSH
20258: CALL 20458 0 2
20262: PUSH
20263: LD_VAR 0 11
20267: PUSH
20268: EMPTY
20269: EQUAL
20270: OR
20271: IFFALSE 20216
// if not control in _control then
20273: LD_VAR 0 4
20277: PUSH
20278: LD_VAR 0 12
20282: IN
20283: NOT
20284: IFFALSE 20310
// control := _control [ rand ( 1 , _control ) ] ;
20286: LD_ADDR_VAR 0 4
20290: PUSH
20291: LD_VAR 0 12
20295: PUSH
20296: LD_INT 1
20298: PPUSH
20299: LD_VAR 0 12
20303: PPUSH
20304: CALL_OW 12
20308: ARRAY
20309: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20310: LD_VAR 0 2
20314: PPUSH
20315: LD_VAR 0 5
20319: PPUSH
20320: CALL 20678 0 2
20324: NOT
20325: IFFALSE 20384
// repeat weapon := _weapon [ 1 ] ;
20327: LD_ADDR_VAR 0 5
20331: PUSH
20332: LD_VAR 0 10
20336: PUSH
20337: LD_INT 1
20339: ARRAY
20340: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20341: LD_ADDR_VAR 0 10
20345: PUSH
20346: LD_VAR 0 10
20350: PPUSH
20351: LD_INT 1
20353: PPUSH
20354: CALL_OW 3
20358: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20359: LD_VAR 0 2
20363: PPUSH
20364: LD_VAR 0 5
20368: PPUSH
20369: CALL 20678 0 2
20373: PUSH
20374: LD_VAR 0 10
20378: PUSH
20379: EMPTY
20380: EQUAL
20381: OR
20382: IFFALSE 20327
// result := [ ] ;
20384: LD_ADDR_VAR 0 6
20388: PUSH
20389: EMPTY
20390: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20391: LD_VAR 0 1
20395: PPUSH
20396: LD_VAR 0 2
20400: PPUSH
20401: LD_VAR 0 3
20405: PPUSH
20406: LD_VAR 0 4
20410: PPUSH
20411: LD_VAR 0 5
20415: PPUSH
20416: CALL_OW 448
20420: IFFALSE 20453
// result := [ chassis , engine , control , weapon ] ;
20422: LD_ADDR_VAR 0 6
20426: PUSH
20427: LD_VAR 0 2
20431: PUSH
20432: LD_VAR 0 3
20436: PUSH
20437: LD_VAR 0 4
20441: PUSH
20442: LD_VAR 0 5
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: ST_TO_ADDR
// end ;
20453: LD_VAR 0 6
20457: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20458: LD_INT 0
20460: PPUSH
// if not chassis or not engine then
20461: LD_VAR 0 1
20465: NOT
20466: PUSH
20467: LD_VAR 0 2
20471: NOT
20472: OR
20473: IFFALSE 20477
// exit ;
20475: GO 20673
// case engine of engine_solar :
20477: LD_VAR 0 2
20481: PUSH
20482: LD_INT 2
20484: DOUBLE
20485: EQUAL
20486: IFTRUE 20490
20488: GO 20528
20490: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20491: LD_ADDR_VAR 0 3
20495: PUSH
20496: LD_INT 11
20498: PUSH
20499: LD_INT 12
20501: PUSH
20502: LD_INT 13
20504: PUSH
20505: LD_INT 14
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: LD_INT 2
20513: PUSH
20514: LD_INT 3
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: ST_TO_ADDR
20526: GO 20657
20528: LD_INT 1
20530: DOUBLE
20531: EQUAL
20532: IFTRUE 20536
20534: GO 20598
20536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20537: LD_ADDR_VAR 0 3
20541: PUSH
20542: LD_INT 11
20544: PUSH
20545: LD_INT 12
20547: PUSH
20548: LD_INT 13
20550: PUSH
20551: LD_INT 14
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: LD_INT 3
20562: PUSH
20563: LD_INT 4
20565: PUSH
20566: LD_INT 5
20568: PUSH
20569: LD_INT 21
20571: PUSH
20572: LD_INT 23
20574: PUSH
20575: LD_INT 22
20577: PUSH
20578: LD_INT 24
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: ST_TO_ADDR
20596: GO 20657
20598: LD_INT 3
20600: DOUBLE
20601: EQUAL
20602: IFTRUE 20606
20604: GO 20656
20606: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20607: LD_ADDR_VAR 0 3
20611: PUSH
20612: LD_INT 13
20614: PUSH
20615: LD_INT 14
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: LD_INT 3
20623: PUSH
20624: LD_INT 4
20626: PUSH
20627: LD_INT 5
20629: PUSH
20630: LD_INT 21
20632: PUSH
20633: LD_INT 22
20635: PUSH
20636: LD_INT 23
20638: PUSH
20639: LD_INT 24
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: ST_TO_ADDR
20654: GO 20657
20656: POP
// result := ( chassis in result ) ;
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_VAR 0 1
20666: PUSH
20667: LD_VAR 0 3
20671: IN
20672: ST_TO_ADDR
// end ;
20673: LD_VAR 0 3
20677: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20678: LD_INT 0
20680: PPUSH
// if not chassis or not weapon then
20681: LD_VAR 0 1
20685: NOT
20686: PUSH
20687: LD_VAR 0 2
20691: NOT
20692: OR
20693: IFFALSE 20697
// exit ;
20695: GO 21759
// case weapon of us_machine_gun :
20697: LD_VAR 0 2
20701: PUSH
20702: LD_INT 2
20704: DOUBLE
20705: EQUAL
20706: IFTRUE 20710
20708: GO 20740
20710: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20711: LD_ADDR_VAR 0 3
20715: PUSH
20716: LD_INT 1
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: LD_INT 3
20724: PUSH
20725: LD_INT 4
20727: PUSH
20728: LD_INT 5
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: ST_TO_ADDR
20738: GO 21743
20740: LD_INT 3
20742: DOUBLE
20743: EQUAL
20744: IFTRUE 20748
20746: GO 20778
20748: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20749: LD_ADDR_VAR 0 3
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 3
20762: PUSH
20763: LD_INT 4
20765: PUSH
20766: LD_INT 5
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: ST_TO_ADDR
20776: GO 21743
20778: LD_INT 11
20780: DOUBLE
20781: EQUAL
20782: IFTRUE 20786
20784: GO 20816
20786: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20787: LD_ADDR_VAR 0 3
20791: PUSH
20792: LD_INT 1
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: LD_INT 3
20800: PUSH
20801: LD_INT 4
20803: PUSH
20804: LD_INT 5
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: ST_TO_ADDR
20814: GO 21743
20816: LD_INT 4
20818: DOUBLE
20819: EQUAL
20820: IFTRUE 20824
20822: GO 20850
20824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20825: LD_ADDR_VAR 0 3
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 3
20835: PUSH
20836: LD_INT 4
20838: PUSH
20839: LD_INT 5
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: ST_TO_ADDR
20848: GO 21743
20850: LD_INT 5
20852: DOUBLE
20853: EQUAL
20854: IFTRUE 20858
20856: GO 20884
20858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20859: LD_ADDR_VAR 0 3
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: LD_INT 3
20869: PUSH
20870: LD_INT 4
20872: PUSH
20873: LD_INT 5
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: ST_TO_ADDR
20882: GO 21743
20884: LD_INT 9
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20918
20892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20893: LD_ADDR_VAR 0 3
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 3
20903: PUSH
20904: LD_INT 4
20906: PUSH
20907: LD_INT 5
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: ST_TO_ADDR
20916: GO 21743
20918: LD_INT 7
20920: DOUBLE
20921: EQUAL
20922: IFTRUE 20926
20924: GO 20952
20926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20927: LD_ADDR_VAR 0 3
20931: PUSH
20932: LD_INT 2
20934: PUSH
20935: LD_INT 3
20937: PUSH
20938: LD_INT 4
20940: PUSH
20941: LD_INT 5
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: ST_TO_ADDR
20950: GO 21743
20952: LD_INT 12
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20986
20960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20961: LD_ADDR_VAR 0 3
20965: PUSH
20966: LD_INT 2
20968: PUSH
20969: LD_INT 3
20971: PUSH
20972: LD_INT 4
20974: PUSH
20975: LD_INT 5
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: ST_TO_ADDR
20984: GO 21743
20986: LD_INT 13
20988: DOUBLE
20989: EQUAL
20990: IFTRUE 20994
20992: GO 21020
20994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20995: LD_ADDR_VAR 0 3
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 3
21005: PUSH
21006: LD_INT 4
21008: PUSH
21009: LD_INT 5
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: ST_TO_ADDR
21018: GO 21743
21020: LD_INT 14
21022: DOUBLE
21023: EQUAL
21024: IFTRUE 21028
21026: GO 21046
21028: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21029: LD_ADDR_VAR 0 3
21033: PUSH
21034: LD_INT 4
21036: PUSH
21037: LD_INT 5
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: ST_TO_ADDR
21044: GO 21743
21046: LD_INT 6
21048: DOUBLE
21049: EQUAL
21050: IFTRUE 21054
21052: GO 21072
21054: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21055: LD_ADDR_VAR 0 3
21059: PUSH
21060: LD_INT 4
21062: PUSH
21063: LD_INT 5
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: ST_TO_ADDR
21070: GO 21743
21072: LD_INT 10
21074: DOUBLE
21075: EQUAL
21076: IFTRUE 21080
21078: GO 21098
21080: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21081: LD_ADDR_VAR 0 3
21085: PUSH
21086: LD_INT 4
21088: PUSH
21089: LD_INT 5
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: ST_TO_ADDR
21096: GO 21743
21098: LD_INT 22
21100: DOUBLE
21101: EQUAL
21102: IFTRUE 21106
21104: GO 21132
21106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21107: LD_ADDR_VAR 0 3
21111: PUSH
21112: LD_INT 11
21114: PUSH
21115: LD_INT 12
21117: PUSH
21118: LD_INT 13
21120: PUSH
21121: LD_INT 14
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: ST_TO_ADDR
21130: GO 21743
21132: LD_INT 23
21134: DOUBLE
21135: EQUAL
21136: IFTRUE 21140
21138: GO 21166
21140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21141: LD_ADDR_VAR 0 3
21145: PUSH
21146: LD_INT 11
21148: PUSH
21149: LD_INT 12
21151: PUSH
21152: LD_INT 13
21154: PUSH
21155: LD_INT 14
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: ST_TO_ADDR
21164: GO 21743
21166: LD_INT 24
21168: DOUBLE
21169: EQUAL
21170: IFTRUE 21174
21172: GO 21200
21174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21175: LD_ADDR_VAR 0 3
21179: PUSH
21180: LD_INT 11
21182: PUSH
21183: LD_INT 12
21185: PUSH
21186: LD_INT 13
21188: PUSH
21189: LD_INT 14
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: ST_TO_ADDR
21198: GO 21743
21200: LD_INT 30
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21234
21208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21209: LD_ADDR_VAR 0 3
21213: PUSH
21214: LD_INT 11
21216: PUSH
21217: LD_INT 12
21219: PUSH
21220: LD_INT 13
21222: PUSH
21223: LD_INT 14
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: ST_TO_ADDR
21232: GO 21743
21234: LD_INT 25
21236: DOUBLE
21237: EQUAL
21238: IFTRUE 21242
21240: GO 21260
21242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21243: LD_ADDR_VAR 0 3
21247: PUSH
21248: LD_INT 13
21250: PUSH
21251: LD_INT 14
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: ST_TO_ADDR
21258: GO 21743
21260: LD_INT 27
21262: DOUBLE
21263: EQUAL
21264: IFTRUE 21268
21266: GO 21286
21268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21269: LD_ADDR_VAR 0 3
21273: PUSH
21274: LD_INT 13
21276: PUSH
21277: LD_INT 14
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: ST_TO_ADDR
21284: GO 21743
21286: LD_EXP 18
21290: DOUBLE
21291: EQUAL
21292: IFTRUE 21296
21294: GO 21322
21296: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21297: LD_ADDR_VAR 0 3
21301: PUSH
21302: LD_INT 11
21304: PUSH
21305: LD_INT 12
21307: PUSH
21308: LD_INT 13
21310: PUSH
21311: LD_INT 14
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: ST_TO_ADDR
21320: GO 21743
21322: LD_INT 28
21324: DOUBLE
21325: EQUAL
21326: IFTRUE 21330
21328: GO 21348
21330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21331: LD_ADDR_VAR 0 3
21335: PUSH
21336: LD_INT 13
21338: PUSH
21339: LD_INT 14
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: ST_TO_ADDR
21346: GO 21743
21348: LD_INT 29
21350: DOUBLE
21351: EQUAL
21352: IFTRUE 21356
21354: GO 21374
21356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21357: LD_ADDR_VAR 0 3
21361: PUSH
21362: LD_INT 13
21364: PUSH
21365: LD_INT 14
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: ST_TO_ADDR
21372: GO 21743
21374: LD_INT 31
21376: DOUBLE
21377: EQUAL
21378: IFTRUE 21382
21380: GO 21400
21382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21383: LD_ADDR_VAR 0 3
21387: PUSH
21388: LD_INT 13
21390: PUSH
21391: LD_INT 14
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: ST_TO_ADDR
21398: GO 21743
21400: LD_INT 26
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 21426
21408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21409: LD_ADDR_VAR 0 3
21413: PUSH
21414: LD_INT 13
21416: PUSH
21417: LD_INT 14
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: ST_TO_ADDR
21424: GO 21743
21426: LD_INT 42
21428: DOUBLE
21429: EQUAL
21430: IFTRUE 21434
21432: GO 21460
21434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21435: LD_ADDR_VAR 0 3
21439: PUSH
21440: LD_INT 21
21442: PUSH
21443: LD_INT 22
21445: PUSH
21446: LD_INT 23
21448: PUSH
21449: LD_INT 24
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: ST_TO_ADDR
21458: GO 21743
21460: LD_INT 43
21462: DOUBLE
21463: EQUAL
21464: IFTRUE 21468
21466: GO 21494
21468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21469: LD_ADDR_VAR 0 3
21473: PUSH
21474: LD_INT 21
21476: PUSH
21477: LD_INT 22
21479: PUSH
21480: LD_INT 23
21482: PUSH
21483: LD_INT 24
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: ST_TO_ADDR
21492: GO 21743
21494: LD_INT 44
21496: DOUBLE
21497: EQUAL
21498: IFTRUE 21502
21500: GO 21528
21502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21503: LD_ADDR_VAR 0 3
21507: PUSH
21508: LD_INT 21
21510: PUSH
21511: LD_INT 22
21513: PUSH
21514: LD_INT 23
21516: PUSH
21517: LD_INT 24
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: ST_TO_ADDR
21526: GO 21743
21528: LD_INT 45
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21562
21536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21537: LD_ADDR_VAR 0 3
21541: PUSH
21542: LD_INT 21
21544: PUSH
21545: LD_INT 22
21547: PUSH
21548: LD_INT 23
21550: PUSH
21551: LD_INT 24
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: ST_TO_ADDR
21560: GO 21743
21562: LD_INT 49
21564: DOUBLE
21565: EQUAL
21566: IFTRUE 21570
21568: GO 21596
21570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21571: LD_ADDR_VAR 0 3
21575: PUSH
21576: LD_INT 21
21578: PUSH
21579: LD_INT 22
21581: PUSH
21582: LD_INT 23
21584: PUSH
21585: LD_INT 24
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: ST_TO_ADDR
21594: GO 21743
21596: LD_INT 51
21598: DOUBLE
21599: EQUAL
21600: IFTRUE 21604
21602: GO 21630
21604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21605: LD_ADDR_VAR 0 3
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 23
21618: PUSH
21619: LD_INT 24
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: ST_TO_ADDR
21628: GO 21743
21630: LD_INT 52
21632: DOUBLE
21633: EQUAL
21634: IFTRUE 21638
21636: GO 21664
21638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21639: LD_ADDR_VAR 0 3
21643: PUSH
21644: LD_INT 21
21646: PUSH
21647: LD_INT 22
21649: PUSH
21650: LD_INT 23
21652: PUSH
21653: LD_INT 24
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: ST_TO_ADDR
21662: GO 21743
21664: LD_INT 53
21666: DOUBLE
21667: EQUAL
21668: IFTRUE 21672
21670: GO 21690
21672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21673: LD_ADDR_VAR 0 3
21677: PUSH
21678: LD_INT 23
21680: PUSH
21681: LD_INT 24
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: ST_TO_ADDR
21688: GO 21743
21690: LD_INT 46
21692: DOUBLE
21693: EQUAL
21694: IFTRUE 21698
21696: GO 21716
21698: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21699: LD_ADDR_VAR 0 3
21703: PUSH
21704: LD_INT 23
21706: PUSH
21707: LD_INT 24
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: ST_TO_ADDR
21714: GO 21743
21716: LD_INT 47
21718: DOUBLE
21719: EQUAL
21720: IFTRUE 21724
21722: GO 21742
21724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21725: LD_ADDR_VAR 0 3
21729: PUSH
21730: LD_INT 23
21732: PUSH
21733: LD_INT 24
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: ST_TO_ADDR
21740: GO 21743
21742: POP
// result := ( chassis in result ) ;
21743: LD_ADDR_VAR 0 3
21747: PUSH
21748: LD_VAR 0 1
21752: PUSH
21753: LD_VAR 0 3
21757: IN
21758: ST_TO_ADDR
// end ;
21759: LD_VAR 0 3
21763: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21764: LD_INT 0
21766: PPUSH
21767: PPUSH
21768: PPUSH
21769: PPUSH
21770: PPUSH
21771: PPUSH
21772: PPUSH
// result := array ;
21773: LD_ADDR_VAR 0 5
21777: PUSH
21778: LD_VAR 0 1
21782: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21783: LD_VAR 0 1
21787: NOT
21788: PUSH
21789: LD_VAR 0 2
21793: NOT
21794: OR
21795: PUSH
21796: LD_VAR 0 3
21800: NOT
21801: OR
21802: PUSH
21803: LD_VAR 0 2
21807: PUSH
21808: LD_VAR 0 1
21812: GREATER
21813: OR
21814: PUSH
21815: LD_VAR 0 3
21819: PUSH
21820: LD_VAR 0 1
21824: GREATER
21825: OR
21826: IFFALSE 21830
// exit ;
21828: GO 22126
// if direction then
21830: LD_VAR 0 4
21834: IFFALSE 21898
// begin d := 1 ;
21836: LD_ADDR_VAR 0 9
21840: PUSH
21841: LD_INT 1
21843: ST_TO_ADDR
// if i_from > i_to then
21844: LD_VAR 0 2
21848: PUSH
21849: LD_VAR 0 3
21853: GREATER
21854: IFFALSE 21880
// length := ( array - i_from ) + i_to else
21856: LD_ADDR_VAR 0 11
21860: PUSH
21861: LD_VAR 0 1
21865: PUSH
21866: LD_VAR 0 2
21870: MINUS
21871: PUSH
21872: LD_VAR 0 3
21876: PLUS
21877: ST_TO_ADDR
21878: GO 21896
// length := i_to - i_from ;
21880: LD_ADDR_VAR 0 11
21884: PUSH
21885: LD_VAR 0 3
21889: PUSH
21890: LD_VAR 0 2
21894: MINUS
21895: ST_TO_ADDR
// end else
21896: GO 21959
// begin d := - 1 ;
21898: LD_ADDR_VAR 0 9
21902: PUSH
21903: LD_INT 1
21905: NEG
21906: ST_TO_ADDR
// if i_from > i_to then
21907: LD_VAR 0 2
21911: PUSH
21912: LD_VAR 0 3
21916: GREATER
21917: IFFALSE 21937
// length := i_from - i_to else
21919: LD_ADDR_VAR 0 11
21923: PUSH
21924: LD_VAR 0 2
21928: PUSH
21929: LD_VAR 0 3
21933: MINUS
21934: ST_TO_ADDR
21935: GO 21959
// length := ( array - i_to ) + i_from ;
21937: LD_ADDR_VAR 0 11
21941: PUSH
21942: LD_VAR 0 1
21946: PUSH
21947: LD_VAR 0 3
21951: MINUS
21952: PUSH
21953: LD_VAR 0 2
21957: PLUS
21958: ST_TO_ADDR
// end ; if not length then
21959: LD_VAR 0 11
21963: NOT
21964: IFFALSE 21968
// exit ;
21966: GO 22126
// tmp := array ;
21968: LD_ADDR_VAR 0 10
21972: PUSH
21973: LD_VAR 0 1
21977: ST_TO_ADDR
// for i = 1 to length do
21978: LD_ADDR_VAR 0 6
21982: PUSH
21983: DOUBLE
21984: LD_INT 1
21986: DEC
21987: ST_TO_ADDR
21988: LD_VAR 0 11
21992: PUSH
21993: FOR_TO
21994: IFFALSE 22114
// begin for j = 1 to array do
21996: LD_ADDR_VAR 0 7
22000: PUSH
22001: DOUBLE
22002: LD_INT 1
22004: DEC
22005: ST_TO_ADDR
22006: LD_VAR 0 1
22010: PUSH
22011: FOR_TO
22012: IFFALSE 22100
// begin k := j + d ;
22014: LD_ADDR_VAR 0 8
22018: PUSH
22019: LD_VAR 0 7
22023: PUSH
22024: LD_VAR 0 9
22028: PLUS
22029: ST_TO_ADDR
// if k > array then
22030: LD_VAR 0 8
22034: PUSH
22035: LD_VAR 0 1
22039: GREATER
22040: IFFALSE 22050
// k := 1 ;
22042: LD_ADDR_VAR 0 8
22046: PUSH
22047: LD_INT 1
22049: ST_TO_ADDR
// if not k then
22050: LD_VAR 0 8
22054: NOT
22055: IFFALSE 22067
// k := array ;
22057: LD_ADDR_VAR 0 8
22061: PUSH
22062: LD_VAR 0 1
22066: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22067: LD_ADDR_VAR 0 10
22071: PUSH
22072: LD_VAR 0 10
22076: PPUSH
22077: LD_VAR 0 8
22081: PPUSH
22082: LD_VAR 0 1
22086: PUSH
22087: LD_VAR 0 7
22091: ARRAY
22092: PPUSH
22093: CALL_OW 1
22097: ST_TO_ADDR
// end ;
22098: GO 22011
22100: POP
22101: POP
// array := tmp ;
22102: LD_ADDR_VAR 0 1
22106: PUSH
22107: LD_VAR 0 10
22111: ST_TO_ADDR
// end ;
22112: GO 21993
22114: POP
22115: POP
// result := array ;
22116: LD_ADDR_VAR 0 5
22120: PUSH
22121: LD_VAR 0 1
22125: ST_TO_ADDR
// end ;
22126: LD_VAR 0 5
22130: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22131: LD_INT 0
22133: PPUSH
22134: PPUSH
// result := 0 ;
22135: LD_ADDR_VAR 0 3
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// if not array or not value in array then
22143: LD_VAR 0 1
22147: NOT
22148: PUSH
22149: LD_VAR 0 2
22153: PUSH
22154: LD_VAR 0 1
22158: IN
22159: NOT
22160: OR
22161: IFFALSE 22165
// exit ;
22163: GO 22219
// for i = 1 to array do
22165: LD_ADDR_VAR 0 4
22169: PUSH
22170: DOUBLE
22171: LD_INT 1
22173: DEC
22174: ST_TO_ADDR
22175: LD_VAR 0 1
22179: PUSH
22180: FOR_TO
22181: IFFALSE 22217
// if value = array [ i ] then
22183: LD_VAR 0 2
22187: PUSH
22188: LD_VAR 0 1
22192: PUSH
22193: LD_VAR 0 4
22197: ARRAY
22198: EQUAL
22199: IFFALSE 22215
// begin result := i ;
22201: LD_ADDR_VAR 0 3
22205: PUSH
22206: LD_VAR 0 4
22210: ST_TO_ADDR
// exit ;
22211: POP
22212: POP
22213: GO 22219
// end ;
22215: GO 22180
22217: POP
22218: POP
// end ;
22219: LD_VAR 0 3
22223: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22224: LD_INT 0
22226: PPUSH
// vc_chassis := chassis ;
22227: LD_ADDR_OWVAR 37
22231: PUSH
22232: LD_VAR 0 1
22236: ST_TO_ADDR
// vc_engine := engine ;
22237: LD_ADDR_OWVAR 39
22241: PUSH
22242: LD_VAR 0 2
22246: ST_TO_ADDR
// vc_control := control ;
22247: LD_ADDR_OWVAR 38
22251: PUSH
22252: LD_VAR 0 3
22256: ST_TO_ADDR
// vc_weapon := weapon ;
22257: LD_ADDR_OWVAR 40
22261: PUSH
22262: LD_VAR 0 4
22266: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22267: LD_ADDR_OWVAR 41
22271: PUSH
22272: LD_VAR 0 5
22276: ST_TO_ADDR
// end ;
22277: LD_VAR 0 6
22281: RET
// export function WantPlant ( unit ) ; var task ; begin
22282: LD_INT 0
22284: PPUSH
22285: PPUSH
// result := false ;
22286: LD_ADDR_VAR 0 2
22290: PUSH
22291: LD_INT 0
22293: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22294: LD_ADDR_VAR 0 3
22298: PUSH
22299: LD_VAR 0 1
22303: PPUSH
22304: CALL_OW 437
22308: ST_TO_ADDR
// if task then
22309: LD_VAR 0 3
22313: IFFALSE 22341
// if task [ 1 ] [ 1 ] = p then
22315: LD_VAR 0 3
22319: PUSH
22320: LD_INT 1
22322: ARRAY
22323: PUSH
22324: LD_INT 1
22326: ARRAY
22327: PUSH
22328: LD_STRING p
22330: EQUAL
22331: IFFALSE 22341
// result := true ;
22333: LD_ADDR_VAR 0 2
22337: PUSH
22338: LD_INT 1
22340: ST_TO_ADDR
// end ;
22341: LD_VAR 0 2
22345: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22346: LD_INT 0
22348: PPUSH
22349: PPUSH
22350: PPUSH
22351: PPUSH
// if pos < 1 then
22352: LD_VAR 0 2
22356: PUSH
22357: LD_INT 1
22359: LESS
22360: IFFALSE 22364
// exit ;
22362: GO 22667
// if pos = 1 then
22364: LD_VAR 0 2
22368: PUSH
22369: LD_INT 1
22371: EQUAL
22372: IFFALSE 22405
// result := Replace ( arr , pos [ 1 ] , value ) else
22374: LD_ADDR_VAR 0 4
22378: PUSH
22379: LD_VAR 0 1
22383: PPUSH
22384: LD_VAR 0 2
22388: PUSH
22389: LD_INT 1
22391: ARRAY
22392: PPUSH
22393: LD_VAR 0 3
22397: PPUSH
22398: CALL_OW 1
22402: ST_TO_ADDR
22403: GO 22667
// begin tmp := arr ;
22405: LD_ADDR_VAR 0 6
22409: PUSH
22410: LD_VAR 0 1
22414: ST_TO_ADDR
// s_arr := [ tmp ] ;
22415: LD_ADDR_VAR 0 7
22419: PUSH
22420: LD_VAR 0 6
22424: PUSH
22425: EMPTY
22426: LIST
22427: ST_TO_ADDR
// for i = 1 to pos - 1 do
22428: LD_ADDR_VAR 0 5
22432: PUSH
22433: DOUBLE
22434: LD_INT 1
22436: DEC
22437: ST_TO_ADDR
22438: LD_VAR 0 2
22442: PUSH
22443: LD_INT 1
22445: MINUS
22446: PUSH
22447: FOR_TO
22448: IFFALSE 22493
// begin tmp := tmp [ pos [ i ] ] ;
22450: LD_ADDR_VAR 0 6
22454: PUSH
22455: LD_VAR 0 6
22459: PUSH
22460: LD_VAR 0 2
22464: PUSH
22465: LD_VAR 0 5
22469: ARRAY
22470: ARRAY
22471: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22472: LD_ADDR_VAR 0 7
22476: PUSH
22477: LD_VAR 0 7
22481: PUSH
22482: LD_VAR 0 6
22486: PUSH
22487: EMPTY
22488: LIST
22489: ADD
22490: ST_TO_ADDR
// end ;
22491: GO 22447
22493: POP
22494: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22495: LD_ADDR_VAR 0 6
22499: PUSH
22500: LD_VAR 0 6
22504: PPUSH
22505: LD_VAR 0 2
22509: PUSH
22510: LD_VAR 0 2
22514: ARRAY
22515: PPUSH
22516: LD_VAR 0 3
22520: PPUSH
22521: CALL_OW 1
22525: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22526: LD_ADDR_VAR 0 7
22530: PUSH
22531: LD_VAR 0 7
22535: PPUSH
22536: LD_VAR 0 7
22540: PPUSH
22541: LD_VAR 0 6
22545: PPUSH
22546: CALL_OW 1
22550: ST_TO_ADDR
// for i = s_arr downto 2 do
22551: LD_ADDR_VAR 0 5
22555: PUSH
22556: DOUBLE
22557: LD_VAR 0 7
22561: INC
22562: ST_TO_ADDR
22563: LD_INT 2
22565: PUSH
22566: FOR_DOWNTO
22567: IFFALSE 22651
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22569: LD_ADDR_VAR 0 6
22573: PUSH
22574: LD_VAR 0 7
22578: PUSH
22579: LD_VAR 0 5
22583: PUSH
22584: LD_INT 1
22586: MINUS
22587: ARRAY
22588: PPUSH
22589: LD_VAR 0 2
22593: PUSH
22594: LD_VAR 0 5
22598: PUSH
22599: LD_INT 1
22601: MINUS
22602: ARRAY
22603: PPUSH
22604: LD_VAR 0 7
22608: PUSH
22609: LD_VAR 0 5
22613: ARRAY
22614: PPUSH
22615: CALL_OW 1
22619: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22620: LD_ADDR_VAR 0 7
22624: PUSH
22625: LD_VAR 0 7
22629: PPUSH
22630: LD_VAR 0 5
22634: PUSH
22635: LD_INT 1
22637: MINUS
22638: PPUSH
22639: LD_VAR 0 6
22643: PPUSH
22644: CALL_OW 1
22648: ST_TO_ADDR
// end ;
22649: GO 22566
22651: POP
22652: POP
// result := s_arr [ 1 ] ;
22653: LD_ADDR_VAR 0 4
22657: PUSH
22658: LD_VAR 0 7
22662: PUSH
22663: LD_INT 1
22665: ARRAY
22666: ST_TO_ADDR
// end ; end ;
22667: LD_VAR 0 4
22671: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22672: LD_INT 0
22674: PPUSH
22675: PPUSH
// if not list then
22676: LD_VAR 0 1
22680: NOT
22681: IFFALSE 22685
// exit ;
22683: GO 22776
// i := list [ pos1 ] ;
22685: LD_ADDR_VAR 0 5
22689: PUSH
22690: LD_VAR 0 1
22694: PUSH
22695: LD_VAR 0 2
22699: ARRAY
22700: ST_TO_ADDR
// if not i then
22701: LD_VAR 0 5
22705: NOT
22706: IFFALSE 22710
// exit ;
22708: GO 22776
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22710: LD_ADDR_VAR 0 1
22714: PUSH
22715: LD_VAR 0 1
22719: PPUSH
22720: LD_VAR 0 2
22724: PPUSH
22725: LD_VAR 0 1
22729: PUSH
22730: LD_VAR 0 3
22734: ARRAY
22735: PPUSH
22736: CALL_OW 1
22740: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22741: LD_ADDR_VAR 0 1
22745: PUSH
22746: LD_VAR 0 1
22750: PPUSH
22751: LD_VAR 0 3
22755: PPUSH
22756: LD_VAR 0 5
22760: PPUSH
22761: CALL_OW 1
22765: ST_TO_ADDR
// result := list ;
22766: LD_ADDR_VAR 0 4
22770: PUSH
22771: LD_VAR 0 1
22775: ST_TO_ADDR
// end ;
22776: LD_VAR 0 4
22780: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22781: LD_INT 0
22783: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22784: LD_ADDR_VAR 0 5
22788: PUSH
22789: LD_VAR 0 1
22793: PPUSH
22794: CALL_OW 250
22798: PPUSH
22799: LD_VAR 0 1
22803: PPUSH
22804: CALL_OW 251
22808: PPUSH
22809: LD_VAR 0 2
22813: PPUSH
22814: LD_VAR 0 3
22818: PPUSH
22819: LD_VAR 0 4
22823: PPUSH
22824: CALL 22834 0 5
22828: ST_TO_ADDR
// end ;
22829: LD_VAR 0 5
22833: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22834: LD_INT 0
22836: PPUSH
22837: PPUSH
22838: PPUSH
22839: PPUSH
// if not list then
22840: LD_VAR 0 3
22844: NOT
22845: IFFALSE 22849
// exit ;
22847: GO 23237
// result := [ ] ;
22849: LD_ADDR_VAR 0 6
22853: PUSH
22854: EMPTY
22855: ST_TO_ADDR
// for i in list do
22856: LD_ADDR_VAR 0 7
22860: PUSH
22861: LD_VAR 0 3
22865: PUSH
22866: FOR_IN
22867: IFFALSE 23069
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22869: LD_ADDR_VAR 0 9
22873: PUSH
22874: LD_VAR 0 7
22878: PPUSH
22879: LD_VAR 0 1
22883: PPUSH
22884: LD_VAR 0 2
22888: PPUSH
22889: CALL_OW 297
22893: ST_TO_ADDR
// if not result then
22894: LD_VAR 0 6
22898: NOT
22899: IFFALSE 22925
// result := [ [ i , tmp ] ] else
22901: LD_ADDR_VAR 0 6
22905: PUSH
22906: LD_VAR 0 7
22910: PUSH
22911: LD_VAR 0 9
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: EMPTY
22921: LIST
22922: ST_TO_ADDR
22923: GO 23067
// begin if result [ result ] [ 2 ] < tmp then
22925: LD_VAR 0 6
22929: PUSH
22930: LD_VAR 0 6
22934: ARRAY
22935: PUSH
22936: LD_INT 2
22938: ARRAY
22939: PUSH
22940: LD_VAR 0 9
22944: LESS
22945: IFFALSE 22987
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22947: LD_ADDR_VAR 0 6
22951: PUSH
22952: LD_VAR 0 6
22956: PPUSH
22957: LD_VAR 0 6
22961: PUSH
22962: LD_INT 1
22964: PLUS
22965: PPUSH
22966: LD_VAR 0 7
22970: PUSH
22971: LD_VAR 0 9
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PPUSH
22980: CALL_OW 2
22984: ST_TO_ADDR
22985: GO 23067
// for j = 1 to result do
22987: LD_ADDR_VAR 0 8
22991: PUSH
22992: DOUBLE
22993: LD_INT 1
22995: DEC
22996: ST_TO_ADDR
22997: LD_VAR 0 6
23001: PUSH
23002: FOR_TO
23003: IFFALSE 23065
// begin if tmp < result [ j ] [ 2 ] then
23005: LD_VAR 0 9
23009: PUSH
23010: LD_VAR 0 6
23014: PUSH
23015: LD_VAR 0 8
23019: ARRAY
23020: PUSH
23021: LD_INT 2
23023: ARRAY
23024: LESS
23025: IFFALSE 23063
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23027: LD_ADDR_VAR 0 6
23031: PUSH
23032: LD_VAR 0 6
23036: PPUSH
23037: LD_VAR 0 8
23041: PPUSH
23042: LD_VAR 0 7
23046: PUSH
23047: LD_VAR 0 9
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PPUSH
23056: CALL_OW 2
23060: ST_TO_ADDR
// break ;
23061: GO 23065
// end ; end ;
23063: GO 23002
23065: POP
23066: POP
// end ; end ;
23067: GO 22866
23069: POP
23070: POP
// if result and not asc then
23071: LD_VAR 0 6
23075: PUSH
23076: LD_VAR 0 4
23080: NOT
23081: AND
23082: IFFALSE 23157
// begin tmp := result ;
23084: LD_ADDR_VAR 0 9
23088: PUSH
23089: LD_VAR 0 6
23093: ST_TO_ADDR
// for i = tmp downto 1 do
23094: LD_ADDR_VAR 0 7
23098: PUSH
23099: DOUBLE
23100: LD_VAR 0 9
23104: INC
23105: ST_TO_ADDR
23106: LD_INT 1
23108: PUSH
23109: FOR_DOWNTO
23110: IFFALSE 23155
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23112: LD_ADDR_VAR 0 6
23116: PUSH
23117: LD_VAR 0 6
23121: PPUSH
23122: LD_VAR 0 9
23126: PUSH
23127: LD_VAR 0 7
23131: MINUS
23132: PUSH
23133: LD_INT 1
23135: PLUS
23136: PPUSH
23137: LD_VAR 0 9
23141: PUSH
23142: LD_VAR 0 7
23146: ARRAY
23147: PPUSH
23148: CALL_OW 1
23152: ST_TO_ADDR
23153: GO 23109
23155: POP
23156: POP
// end ; tmp := [ ] ;
23157: LD_ADDR_VAR 0 9
23161: PUSH
23162: EMPTY
23163: ST_TO_ADDR
// if mode then
23164: LD_VAR 0 5
23168: IFFALSE 23237
// begin for i = 1 to result do
23170: LD_ADDR_VAR 0 7
23174: PUSH
23175: DOUBLE
23176: LD_INT 1
23178: DEC
23179: ST_TO_ADDR
23180: LD_VAR 0 6
23184: PUSH
23185: FOR_TO
23186: IFFALSE 23225
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23188: LD_ADDR_VAR 0 9
23192: PUSH
23193: LD_VAR 0 9
23197: PPUSH
23198: LD_VAR 0 7
23202: PPUSH
23203: LD_VAR 0 6
23207: PUSH
23208: LD_VAR 0 7
23212: ARRAY
23213: PUSH
23214: LD_INT 1
23216: ARRAY
23217: PPUSH
23218: CALL_OW 1
23222: ST_TO_ADDR
23223: GO 23185
23225: POP
23226: POP
// result := tmp ;
23227: LD_ADDR_VAR 0 6
23231: PUSH
23232: LD_VAR 0 9
23236: ST_TO_ADDR
// end ; end ;
23237: LD_VAR 0 6
23241: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23242: LD_INT 0
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23250: LD_ADDR_VAR 0 5
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: LD_INT 0
23263: PUSH
23264: EMPTY
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: ST_TO_ADDR
// if not x or not y then
23272: LD_VAR 0 2
23276: NOT
23277: PUSH
23278: LD_VAR 0 3
23282: NOT
23283: OR
23284: IFFALSE 23288
// exit ;
23286: GO 24940
// if not range then
23288: LD_VAR 0 4
23292: NOT
23293: IFFALSE 23303
// range := 10 ;
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: LD_INT 10
23302: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23303: LD_ADDR_VAR 0 8
23307: PUSH
23308: LD_INT 81
23310: PUSH
23311: LD_VAR 0 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 92
23322: PUSH
23323: LD_VAR 0 2
23327: PUSH
23328: LD_VAR 0 3
23332: PUSH
23333: LD_VAR 0 4
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 3
23346: PUSH
23347: LD_INT 21
23349: PUSH
23350: LD_INT 3
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: PPUSH
23366: CALL_OW 69
23370: ST_TO_ADDR
// if not tmp then
23371: LD_VAR 0 8
23375: NOT
23376: IFFALSE 23380
// exit ;
23378: GO 24940
// for i in tmp do
23380: LD_ADDR_VAR 0 6
23384: PUSH
23385: LD_VAR 0 8
23389: PUSH
23390: FOR_IN
23391: IFFALSE 24915
// begin points := [ 0 , 0 , 0 ] ;
23393: LD_ADDR_VAR 0 9
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: ST_TO_ADDR
// bpoints := 1 ;
23412: LD_ADDR_VAR 0 10
23416: PUSH
23417: LD_INT 1
23419: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23420: LD_VAR 0 6
23424: PPUSH
23425: CALL_OW 247
23429: PUSH
23430: LD_INT 1
23432: DOUBLE
23433: EQUAL
23434: IFTRUE 23438
23436: GO 24016
23438: POP
// begin if GetClass ( i ) = 1 then
23439: LD_VAR 0 6
23443: PPUSH
23444: CALL_OW 257
23448: PUSH
23449: LD_INT 1
23451: EQUAL
23452: IFFALSE 23473
// points := [ 10 , 5 , 3 ] ;
23454: LD_ADDR_VAR 0 9
23458: PUSH
23459: LD_INT 10
23461: PUSH
23462: LD_INT 5
23464: PUSH
23465: LD_INT 3
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23473: LD_VAR 0 6
23477: PPUSH
23478: CALL_OW 257
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: LD_INT 3
23488: PUSH
23489: LD_INT 4
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: LIST
23496: IN
23497: IFFALSE 23518
// points := [ 3 , 2 , 1 ] ;
23499: LD_ADDR_VAR 0 9
23503: PUSH
23504: LD_INT 3
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23518: LD_VAR 0 6
23522: PPUSH
23523: CALL_OW 257
23527: PUSH
23528: LD_INT 5
23530: EQUAL
23531: IFFALSE 23552
// points := [ 130 , 5 , 2 ] ;
23533: LD_ADDR_VAR 0 9
23537: PUSH
23538: LD_INT 130
23540: PUSH
23541: LD_INT 5
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23552: LD_VAR 0 6
23556: PPUSH
23557: CALL_OW 257
23561: PUSH
23562: LD_INT 8
23564: EQUAL
23565: IFFALSE 23586
// points := [ 35 , 35 , 30 ] ;
23567: LD_ADDR_VAR 0 9
23571: PUSH
23572: LD_INT 35
23574: PUSH
23575: LD_INT 35
23577: PUSH
23578: LD_INT 30
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: LIST
23585: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23586: LD_VAR 0 6
23590: PPUSH
23591: CALL_OW 257
23595: PUSH
23596: LD_INT 9
23598: EQUAL
23599: IFFALSE 23620
// points := [ 20 , 55 , 40 ] ;
23601: LD_ADDR_VAR 0 9
23605: PUSH
23606: LD_INT 20
23608: PUSH
23609: LD_INT 55
23611: PUSH
23612: LD_INT 40
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23620: LD_VAR 0 6
23624: PPUSH
23625: CALL_OW 257
23629: PUSH
23630: LD_INT 12
23632: PUSH
23633: LD_INT 16
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: IN
23640: IFFALSE 23661
// points := [ 5 , 3 , 2 ] ;
23642: LD_ADDR_VAR 0 9
23646: PUSH
23647: LD_INT 5
23649: PUSH
23650: LD_INT 3
23652: PUSH
23653: LD_INT 2
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: LIST
23660: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23661: LD_VAR 0 6
23665: PPUSH
23666: CALL_OW 257
23670: PUSH
23671: LD_INT 17
23673: EQUAL
23674: IFFALSE 23695
// points := [ 100 , 50 , 75 ] ;
23676: LD_ADDR_VAR 0 9
23680: PUSH
23681: LD_INT 100
23683: PUSH
23684: LD_INT 50
23686: PUSH
23687: LD_INT 75
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: LIST
23694: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23695: LD_VAR 0 6
23699: PPUSH
23700: CALL_OW 257
23704: PUSH
23705: LD_INT 15
23707: EQUAL
23708: IFFALSE 23729
// points := [ 10 , 5 , 3 ] ;
23710: LD_ADDR_VAR 0 9
23714: PUSH
23715: LD_INT 10
23717: PUSH
23718: LD_INT 5
23720: PUSH
23721: LD_INT 3
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23729: LD_VAR 0 6
23733: PPUSH
23734: CALL_OW 257
23738: PUSH
23739: LD_INT 14
23741: EQUAL
23742: IFFALSE 23763
// points := [ 10 , 0 , 0 ] ;
23744: LD_ADDR_VAR 0 9
23748: PUSH
23749: LD_INT 10
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23763: LD_VAR 0 6
23767: PPUSH
23768: CALL_OW 257
23772: PUSH
23773: LD_INT 11
23775: EQUAL
23776: IFFALSE 23797
// points := [ 30 , 10 , 5 ] ;
23778: LD_ADDR_VAR 0 9
23782: PUSH
23783: LD_INT 30
23785: PUSH
23786: LD_INT 10
23788: PUSH
23789: LD_INT 5
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23797: LD_VAR 0 1
23801: PPUSH
23802: LD_INT 5
23804: PPUSH
23805: CALL_OW 321
23809: PUSH
23810: LD_INT 2
23812: EQUAL
23813: IFFALSE 23830
// bpoints := bpoints * 1.8 ;
23815: LD_ADDR_VAR 0 10
23819: PUSH
23820: LD_VAR 0 10
23824: PUSH
23825: LD_REAL  1.80000000000000E+0000
23828: MUL
23829: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23830: LD_VAR 0 6
23834: PPUSH
23835: CALL_OW 257
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 3
23848: PUSH
23849: LD_INT 4
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: IN
23858: PUSH
23859: LD_VAR 0 1
23863: PPUSH
23864: LD_INT 51
23866: PPUSH
23867: CALL_OW 321
23871: PUSH
23872: LD_INT 2
23874: EQUAL
23875: AND
23876: IFFALSE 23893
// bpoints := bpoints * 1.2 ;
23878: LD_ADDR_VAR 0 10
23882: PUSH
23883: LD_VAR 0 10
23887: PUSH
23888: LD_REAL  1.20000000000000E+0000
23891: MUL
23892: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23893: LD_VAR 0 6
23897: PPUSH
23898: CALL_OW 257
23902: PUSH
23903: LD_INT 5
23905: PUSH
23906: LD_INT 7
23908: PUSH
23909: LD_INT 9
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: IN
23917: PUSH
23918: LD_VAR 0 1
23922: PPUSH
23923: LD_INT 52
23925: PPUSH
23926: CALL_OW 321
23930: PUSH
23931: LD_INT 2
23933: EQUAL
23934: AND
23935: IFFALSE 23952
// bpoints := bpoints * 1.5 ;
23937: LD_ADDR_VAR 0 10
23941: PUSH
23942: LD_VAR 0 10
23946: PUSH
23947: LD_REAL  1.50000000000000E+0000
23950: MUL
23951: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23952: LD_VAR 0 1
23956: PPUSH
23957: LD_INT 66
23959: PPUSH
23960: CALL_OW 321
23964: PUSH
23965: LD_INT 2
23967: EQUAL
23968: IFFALSE 23985
// bpoints := bpoints * 1.1 ;
23970: LD_ADDR_VAR 0 10
23974: PUSH
23975: LD_VAR 0 10
23979: PUSH
23980: LD_REAL  1.10000000000000E+0000
23983: MUL
23984: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23985: LD_ADDR_VAR 0 10
23989: PUSH
23990: LD_VAR 0 10
23994: PUSH
23995: LD_VAR 0 6
23999: PPUSH
24000: LD_INT 1
24002: PPUSH
24003: CALL_OW 259
24007: PUSH
24008: LD_REAL  1.15000000000000E+0000
24011: MUL
24012: MUL
24013: ST_TO_ADDR
// end ; unit_vehicle :
24014: GO 24844
24016: LD_INT 2
24018: DOUBLE
24019: EQUAL
24020: IFTRUE 24024
24022: GO 24832
24024: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24025: LD_VAR 0 6
24029: PPUSH
24030: CALL_OW 264
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: LD_INT 42
24040: PUSH
24041: LD_INT 24
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: IN
24049: IFFALSE 24070
// points := [ 25 , 5 , 3 ] ;
24051: LD_ADDR_VAR 0 9
24055: PUSH
24056: LD_INT 25
24058: PUSH
24059: LD_INT 5
24061: PUSH
24062: LD_INT 3
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24070: LD_VAR 0 6
24074: PPUSH
24075: CALL_OW 264
24079: PUSH
24080: LD_INT 4
24082: PUSH
24083: LD_INT 43
24085: PUSH
24086: LD_INT 25
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: IN
24094: IFFALSE 24115
// points := [ 40 , 15 , 5 ] ;
24096: LD_ADDR_VAR 0 9
24100: PUSH
24101: LD_INT 40
24103: PUSH
24104: LD_INT 15
24106: PUSH
24107: LD_INT 5
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24115: LD_VAR 0 6
24119: PPUSH
24120: CALL_OW 264
24124: PUSH
24125: LD_INT 3
24127: PUSH
24128: LD_INT 23
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: IN
24135: IFFALSE 24156
// points := [ 7 , 25 , 8 ] ;
24137: LD_ADDR_VAR 0 9
24141: PUSH
24142: LD_INT 7
24144: PUSH
24145: LD_INT 25
24147: PUSH
24148: LD_INT 8
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: LIST
24155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24156: LD_VAR 0 6
24160: PPUSH
24161: CALL_OW 264
24165: PUSH
24166: LD_INT 5
24168: PUSH
24169: LD_INT 27
24171: PUSH
24172: LD_INT 44
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: LIST
24179: IN
24180: IFFALSE 24201
// points := [ 14 , 50 , 16 ] ;
24182: LD_ADDR_VAR 0 9
24186: PUSH
24187: LD_INT 14
24189: PUSH
24190: LD_INT 50
24192: PUSH
24193: LD_INT 16
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: LIST
24200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24201: LD_VAR 0 6
24205: PPUSH
24206: CALL_OW 264
24210: PUSH
24211: LD_INT 6
24213: PUSH
24214: LD_INT 46
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: IN
24221: IFFALSE 24242
// points := [ 32 , 120 , 70 ] ;
24223: LD_ADDR_VAR 0 9
24227: PUSH
24228: LD_INT 32
24230: PUSH
24231: LD_INT 120
24233: PUSH
24234: LD_INT 70
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: LIST
24241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24242: LD_VAR 0 6
24246: PPUSH
24247: CALL_OW 264
24251: PUSH
24252: LD_INT 7
24254: PUSH
24255: LD_INT 28
24257: PUSH
24258: LD_INT 45
24260: PUSH
24261: LD_EXP 18
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: IN
24272: IFFALSE 24293
// points := [ 35 , 20 , 45 ] ;
24274: LD_ADDR_VAR 0 9
24278: PUSH
24279: LD_INT 35
24281: PUSH
24282: LD_INT 20
24284: PUSH
24285: LD_INT 45
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24293: LD_VAR 0 6
24297: PPUSH
24298: CALL_OW 264
24302: PUSH
24303: LD_INT 47
24305: PUSH
24306: EMPTY
24307: LIST
24308: IN
24309: IFFALSE 24330
// points := [ 67 , 45 , 75 ] ;
24311: LD_ADDR_VAR 0 9
24315: PUSH
24316: LD_INT 67
24318: PUSH
24319: LD_INT 45
24321: PUSH
24322: LD_INT 75
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: LIST
24329: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24330: LD_VAR 0 6
24334: PPUSH
24335: CALL_OW 264
24339: PUSH
24340: LD_INT 26
24342: PUSH
24343: EMPTY
24344: LIST
24345: IN
24346: IFFALSE 24367
// points := [ 120 , 30 , 80 ] ;
24348: LD_ADDR_VAR 0 9
24352: PUSH
24353: LD_INT 120
24355: PUSH
24356: LD_INT 30
24358: PUSH
24359: LD_INT 80
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: LIST
24366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24367: LD_VAR 0 6
24371: PPUSH
24372: CALL_OW 264
24376: PUSH
24377: LD_INT 22
24379: PUSH
24380: EMPTY
24381: LIST
24382: IN
24383: IFFALSE 24404
// points := [ 40 , 1 , 1 ] ;
24385: LD_ADDR_VAR 0 9
24389: PUSH
24390: LD_INT 40
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: LIST
24403: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24404: LD_VAR 0 6
24408: PPUSH
24409: CALL_OW 264
24413: PUSH
24414: LD_INT 29
24416: PUSH
24417: EMPTY
24418: LIST
24419: IN
24420: IFFALSE 24441
// points := [ 70 , 200 , 400 ] ;
24422: LD_ADDR_VAR 0 9
24426: PUSH
24427: LD_INT 70
24429: PUSH
24430: LD_INT 200
24432: PUSH
24433: LD_INT 400
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24441: LD_VAR 0 6
24445: PPUSH
24446: CALL_OW 264
24450: PUSH
24451: LD_INT 14
24453: PUSH
24454: LD_INT 53
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: IN
24461: IFFALSE 24482
// points := [ 40 , 10 , 20 ] ;
24463: LD_ADDR_VAR 0 9
24467: PUSH
24468: LD_INT 40
24470: PUSH
24471: LD_INT 10
24473: PUSH
24474: LD_INT 20
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: LIST
24481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24482: LD_VAR 0 6
24486: PPUSH
24487: CALL_OW 264
24491: PUSH
24492: LD_INT 9
24494: PUSH
24495: EMPTY
24496: LIST
24497: IN
24498: IFFALSE 24519
// points := [ 5 , 70 , 20 ] ;
24500: LD_ADDR_VAR 0 9
24504: PUSH
24505: LD_INT 5
24507: PUSH
24508: LD_INT 70
24510: PUSH
24511: LD_INT 20
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24519: LD_VAR 0 6
24523: PPUSH
24524: CALL_OW 264
24528: PUSH
24529: LD_INT 10
24531: PUSH
24532: EMPTY
24533: LIST
24534: IN
24535: IFFALSE 24556
// points := [ 35 , 110 , 70 ] ;
24537: LD_ADDR_VAR 0 9
24541: PUSH
24542: LD_INT 35
24544: PUSH
24545: LD_INT 110
24547: PUSH
24548: LD_INT 70
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24556: LD_VAR 0 6
24560: PPUSH
24561: CALL_OW 265
24565: PUSH
24566: LD_INT 25
24568: EQUAL
24569: IFFALSE 24590
// points := [ 80 , 65 , 100 ] ;
24571: LD_ADDR_VAR 0 9
24575: PUSH
24576: LD_INT 80
24578: PUSH
24579: LD_INT 65
24581: PUSH
24582: LD_INT 100
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24590: LD_VAR 0 6
24594: PPUSH
24595: CALL_OW 263
24599: PUSH
24600: LD_INT 1
24602: EQUAL
24603: IFFALSE 24638
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24605: LD_ADDR_VAR 0 10
24609: PUSH
24610: LD_VAR 0 10
24614: PUSH
24615: LD_VAR 0 6
24619: PPUSH
24620: CALL_OW 311
24624: PPUSH
24625: LD_INT 3
24627: PPUSH
24628: CALL_OW 259
24632: PUSH
24633: LD_INT 4
24635: MUL
24636: MUL
24637: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24638: LD_VAR 0 6
24642: PPUSH
24643: CALL_OW 263
24647: PUSH
24648: LD_INT 2
24650: EQUAL
24651: IFFALSE 24702
// begin j := IsControledBy ( i ) ;
24653: LD_ADDR_VAR 0 7
24657: PUSH
24658: LD_VAR 0 6
24662: PPUSH
24663: CALL_OW 312
24667: ST_TO_ADDR
// if j then
24668: LD_VAR 0 7
24672: IFFALSE 24702
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24674: LD_ADDR_VAR 0 10
24678: PUSH
24679: LD_VAR 0 10
24683: PUSH
24684: LD_VAR 0 7
24688: PPUSH
24689: LD_INT 3
24691: PPUSH
24692: CALL_OW 259
24696: PUSH
24697: LD_INT 3
24699: MUL
24700: MUL
24701: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24702: LD_VAR 0 6
24706: PPUSH
24707: CALL_OW 264
24711: PUSH
24712: LD_INT 5
24714: PUSH
24715: LD_INT 6
24717: PUSH
24718: LD_INT 46
24720: PUSH
24721: LD_INT 44
24723: PUSH
24724: LD_INT 47
24726: PUSH
24727: LD_INT 45
24729: PUSH
24730: LD_INT 28
24732: PUSH
24733: LD_INT 7
24735: PUSH
24736: LD_INT 27
24738: PUSH
24739: LD_INT 29
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: IN
24754: PUSH
24755: LD_VAR 0 1
24759: PPUSH
24760: LD_INT 52
24762: PPUSH
24763: CALL_OW 321
24767: PUSH
24768: LD_INT 2
24770: EQUAL
24771: AND
24772: IFFALSE 24789
// bpoints := bpoints * 1.2 ;
24774: LD_ADDR_VAR 0 10
24778: PUSH
24779: LD_VAR 0 10
24783: PUSH
24784: LD_REAL  1.20000000000000E+0000
24787: MUL
24788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24789: LD_VAR 0 6
24793: PPUSH
24794: CALL_OW 264
24798: PUSH
24799: LD_INT 6
24801: PUSH
24802: LD_INT 46
24804: PUSH
24805: LD_INT 47
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: LIST
24812: IN
24813: IFFALSE 24830
// bpoints := bpoints * 1.2 ;
24815: LD_ADDR_VAR 0 10
24819: PUSH
24820: LD_VAR 0 10
24824: PUSH
24825: LD_REAL  1.20000000000000E+0000
24828: MUL
24829: ST_TO_ADDR
// end ; unit_building :
24830: GO 24844
24832: LD_INT 3
24834: DOUBLE
24835: EQUAL
24836: IFTRUE 24840
24838: GO 24843
24840: POP
// ; end ;
24841: GO 24844
24843: POP
// for j = 1 to 3 do
24844: LD_ADDR_VAR 0 7
24848: PUSH
24849: DOUBLE
24850: LD_INT 1
24852: DEC
24853: ST_TO_ADDR
24854: LD_INT 3
24856: PUSH
24857: FOR_TO
24858: IFFALSE 24911
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24860: LD_ADDR_VAR 0 5
24864: PUSH
24865: LD_VAR 0 5
24869: PPUSH
24870: LD_VAR 0 7
24874: PPUSH
24875: LD_VAR 0 5
24879: PUSH
24880: LD_VAR 0 7
24884: ARRAY
24885: PUSH
24886: LD_VAR 0 9
24890: PUSH
24891: LD_VAR 0 7
24895: ARRAY
24896: PUSH
24897: LD_VAR 0 10
24901: MUL
24902: PLUS
24903: PPUSH
24904: CALL_OW 1
24908: ST_TO_ADDR
24909: GO 24857
24911: POP
24912: POP
// end ;
24913: GO 23390
24915: POP
24916: POP
// result := Replace ( result , 4 , tmp ) ;
24917: LD_ADDR_VAR 0 5
24921: PUSH
24922: LD_VAR 0 5
24926: PPUSH
24927: LD_INT 4
24929: PPUSH
24930: LD_VAR 0 8
24934: PPUSH
24935: CALL_OW 1
24939: ST_TO_ADDR
// end ;
24940: LD_VAR 0 5
24944: RET
// export function DangerAtRange ( unit , range ) ; begin
24945: LD_INT 0
24947: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24948: LD_ADDR_VAR 0 3
24952: PUSH
24953: LD_VAR 0 1
24957: PPUSH
24958: CALL_OW 255
24962: PPUSH
24963: LD_VAR 0 1
24967: PPUSH
24968: CALL_OW 250
24972: PPUSH
24973: LD_VAR 0 1
24977: PPUSH
24978: CALL_OW 251
24982: PPUSH
24983: LD_VAR 0 2
24987: PPUSH
24988: CALL 23242 0 4
24992: ST_TO_ADDR
// end ;
24993: LD_VAR 0 3
24997: RET
// export function DangerInArea ( side , area ) ; begin
24998: LD_INT 0
25000: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_VAR 0 2
25010: PPUSH
25011: LD_INT 81
25013: PUSH
25014: LD_VAR 0 1
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PPUSH
25023: CALL_OW 70
25027: ST_TO_ADDR
// end ;
25028: LD_VAR 0 3
25032: RET
// export function IsExtension ( b ) ; begin
25033: LD_INT 0
25035: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25036: LD_ADDR_VAR 0 2
25040: PUSH
25041: LD_VAR 0 1
25045: PUSH
25046: LD_INT 23
25048: PUSH
25049: LD_INT 20
25051: PUSH
25052: LD_INT 22
25054: PUSH
25055: LD_INT 17
25057: PUSH
25058: LD_INT 24
25060: PUSH
25061: LD_INT 21
25063: PUSH
25064: LD_INT 19
25066: PUSH
25067: LD_INT 16
25069: PUSH
25070: LD_INT 25
25072: PUSH
25073: LD_INT 18
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: IN
25088: ST_TO_ADDR
// end ;
25089: LD_VAR 0 2
25093: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25094: LD_INT 0
25096: PPUSH
25097: PPUSH
25098: PPUSH
// result := [ ] ;
25099: LD_ADDR_VAR 0 4
25103: PUSH
25104: EMPTY
25105: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25106: LD_ADDR_VAR 0 5
25110: PUSH
25111: LD_VAR 0 2
25115: PPUSH
25116: LD_INT 21
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PPUSH
25126: CALL_OW 70
25130: ST_TO_ADDR
// if not tmp then
25131: LD_VAR 0 5
25135: NOT
25136: IFFALSE 25140
// exit ;
25138: GO 25204
// if checkLink then
25140: LD_VAR 0 3
25144: IFFALSE 25194
// begin for i in tmp do
25146: LD_ADDR_VAR 0 6
25150: PUSH
25151: LD_VAR 0 5
25155: PUSH
25156: FOR_IN
25157: IFFALSE 25192
// if GetBase ( i ) <> base then
25159: LD_VAR 0 6
25163: PPUSH
25164: CALL_OW 274
25168: PUSH
25169: LD_VAR 0 1
25173: NONEQUAL
25174: IFFALSE 25190
// ComLinkToBase ( base , i ) ;
25176: LD_VAR 0 1
25180: PPUSH
25181: LD_VAR 0 6
25185: PPUSH
25186: CALL_OW 169
25190: GO 25156
25192: POP
25193: POP
// end ; result := tmp ;
25194: LD_ADDR_VAR 0 4
25198: PUSH
25199: LD_VAR 0 5
25203: ST_TO_ADDR
// end ;
25204: LD_VAR 0 4
25208: RET
// export function ComComplete ( units , b ) ; var i ; begin
25209: LD_INT 0
25211: PPUSH
25212: PPUSH
// if not units then
25213: LD_VAR 0 1
25217: NOT
25218: IFFALSE 25222
// exit ;
25220: GO 25312
// for i in units do
25222: LD_ADDR_VAR 0 4
25226: PUSH
25227: LD_VAR 0 1
25231: PUSH
25232: FOR_IN
25233: IFFALSE 25310
// if BuildingStatus ( b ) = bs_build then
25235: LD_VAR 0 2
25239: PPUSH
25240: CALL_OW 461
25244: PUSH
25245: LD_INT 1
25247: EQUAL
25248: IFFALSE 25308
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25250: LD_VAR 0 4
25254: PPUSH
25255: LD_STRING h
25257: PUSH
25258: LD_VAR 0 2
25262: PPUSH
25263: CALL_OW 250
25267: PUSH
25268: LD_VAR 0 2
25272: PPUSH
25273: CALL_OW 251
25277: PUSH
25278: LD_VAR 0 2
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: PUSH
25301: EMPTY
25302: LIST
25303: PPUSH
25304: CALL_OW 446
25308: GO 25232
25310: POP
25311: POP
// end ;
25312: LD_VAR 0 3
25316: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25317: LD_INT 0
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25325: LD_VAR 0 1
25329: NOT
25330: PUSH
25331: LD_VAR 0 1
25335: PPUSH
25336: CALL_OW 263
25340: PUSH
25341: LD_INT 2
25343: NONEQUAL
25344: OR
25345: IFFALSE 25349
// exit ;
25347: GO 25665
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25349: LD_ADDR_VAR 0 6
25353: PUSH
25354: LD_INT 22
25356: PUSH
25357: LD_VAR 0 1
25361: PPUSH
25362: CALL_OW 255
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 2
25373: PUSH
25374: LD_INT 30
25376: PUSH
25377: LD_INT 36
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 34
25386: PUSH
25387: LD_INT 31
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PPUSH
25403: CALL_OW 69
25407: ST_TO_ADDR
// if not tmp then
25408: LD_VAR 0 6
25412: NOT
25413: IFFALSE 25417
// exit ;
25415: GO 25665
// result := [ ] ;
25417: LD_ADDR_VAR 0 2
25421: PUSH
25422: EMPTY
25423: ST_TO_ADDR
// for i in tmp do
25424: LD_ADDR_VAR 0 3
25428: PUSH
25429: LD_VAR 0 6
25433: PUSH
25434: FOR_IN
25435: IFFALSE 25506
// begin t := UnitsInside ( i ) ;
25437: LD_ADDR_VAR 0 4
25441: PUSH
25442: LD_VAR 0 3
25446: PPUSH
25447: CALL_OW 313
25451: ST_TO_ADDR
// if t then
25452: LD_VAR 0 4
25456: IFFALSE 25504
// for j in t do
25458: LD_ADDR_VAR 0 7
25462: PUSH
25463: LD_VAR 0 4
25467: PUSH
25468: FOR_IN
25469: IFFALSE 25502
// result := Replace ( result , result + 1 , j ) ;
25471: LD_ADDR_VAR 0 2
25475: PUSH
25476: LD_VAR 0 2
25480: PPUSH
25481: LD_VAR 0 2
25485: PUSH
25486: LD_INT 1
25488: PLUS
25489: PPUSH
25490: LD_VAR 0 7
25494: PPUSH
25495: CALL_OW 1
25499: ST_TO_ADDR
25500: GO 25468
25502: POP
25503: POP
// end ;
25504: GO 25434
25506: POP
25507: POP
// if not result then
25508: LD_VAR 0 2
25512: NOT
25513: IFFALSE 25517
// exit ;
25515: GO 25665
// mech := result [ 1 ] ;
25517: LD_ADDR_VAR 0 5
25521: PUSH
25522: LD_VAR 0 2
25526: PUSH
25527: LD_INT 1
25529: ARRAY
25530: ST_TO_ADDR
// if result > 1 then
25531: LD_VAR 0 2
25535: PUSH
25536: LD_INT 1
25538: GREATER
25539: IFFALSE 25651
// begin for i = 2 to result do
25541: LD_ADDR_VAR 0 3
25545: PUSH
25546: DOUBLE
25547: LD_INT 2
25549: DEC
25550: ST_TO_ADDR
25551: LD_VAR 0 2
25555: PUSH
25556: FOR_TO
25557: IFFALSE 25649
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25559: LD_ADDR_VAR 0 4
25563: PUSH
25564: LD_VAR 0 2
25568: PUSH
25569: LD_VAR 0 3
25573: ARRAY
25574: PPUSH
25575: LD_INT 3
25577: PPUSH
25578: CALL_OW 259
25582: PUSH
25583: LD_VAR 0 2
25587: PUSH
25588: LD_VAR 0 3
25592: ARRAY
25593: PPUSH
25594: CALL_OW 432
25598: MINUS
25599: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25600: LD_VAR 0 4
25604: PUSH
25605: LD_VAR 0 5
25609: PPUSH
25610: LD_INT 3
25612: PPUSH
25613: CALL_OW 259
25617: PUSH
25618: LD_VAR 0 5
25622: PPUSH
25623: CALL_OW 432
25627: MINUS
25628: GREATEREQUAL
25629: IFFALSE 25647
// mech := result [ i ] ;
25631: LD_ADDR_VAR 0 5
25635: PUSH
25636: LD_VAR 0 2
25640: PUSH
25641: LD_VAR 0 3
25645: ARRAY
25646: ST_TO_ADDR
// end ;
25647: GO 25556
25649: POP
25650: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25651: LD_VAR 0 1
25655: PPUSH
25656: LD_VAR 0 5
25660: PPUSH
25661: CALL_OW 135
// end ;
25665: LD_VAR 0 2
25669: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25670: LD_INT 0
25672: PPUSH
25673: PPUSH
25674: PPUSH
25675: PPUSH
25676: PPUSH
25677: PPUSH
25678: PPUSH
25679: PPUSH
25680: PPUSH
25681: PPUSH
25682: PPUSH
25683: PPUSH
25684: PPUSH
// result := [ ] ;
25685: LD_ADDR_VAR 0 7
25689: PUSH
25690: EMPTY
25691: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25692: LD_VAR 0 1
25696: PPUSH
25697: CALL_OW 266
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: IN
25712: NOT
25713: IFFALSE 25717
// exit ;
25715: GO 27351
// if name then
25717: LD_VAR 0 3
25721: IFFALSE 25737
// SetBName ( base_dep , name ) ;
25723: LD_VAR 0 1
25727: PPUSH
25728: LD_VAR 0 3
25732: PPUSH
25733: CALL_OW 500
// base := GetBase ( base_dep ) ;
25737: LD_ADDR_VAR 0 15
25741: PUSH
25742: LD_VAR 0 1
25746: PPUSH
25747: CALL_OW 274
25751: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25752: LD_ADDR_VAR 0 16
25756: PUSH
25757: LD_VAR 0 1
25761: PPUSH
25762: CALL_OW 255
25766: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25767: LD_ADDR_VAR 0 17
25771: PUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: CALL_OW 248
25781: ST_TO_ADDR
// if sources then
25782: LD_VAR 0 5
25786: IFFALSE 25833
// for i = 1 to 3 do
25788: LD_ADDR_VAR 0 8
25792: PUSH
25793: DOUBLE
25794: LD_INT 1
25796: DEC
25797: ST_TO_ADDR
25798: LD_INT 3
25800: PUSH
25801: FOR_TO
25802: IFFALSE 25831
// AddResourceType ( base , i , sources [ i ] ) ;
25804: LD_VAR 0 15
25808: PPUSH
25809: LD_VAR 0 8
25813: PPUSH
25814: LD_VAR 0 5
25818: PUSH
25819: LD_VAR 0 8
25823: ARRAY
25824: PPUSH
25825: CALL_OW 276
25829: GO 25801
25831: POP
25832: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25833: LD_ADDR_VAR 0 18
25837: PUSH
25838: LD_VAR 0 15
25842: PPUSH
25843: LD_VAR 0 2
25847: PPUSH
25848: LD_INT 1
25850: PPUSH
25851: CALL 25094 0 3
25855: ST_TO_ADDR
// InitHc ;
25856: CALL_OW 19
// InitUc ;
25860: CALL_OW 18
// uc_side := side ;
25864: LD_ADDR_OWVAR 20
25868: PUSH
25869: LD_VAR 0 16
25873: ST_TO_ADDR
// uc_nation := nation ;
25874: LD_ADDR_OWVAR 21
25878: PUSH
25879: LD_VAR 0 17
25883: ST_TO_ADDR
// if buildings then
25884: LD_VAR 0 18
25888: IFFALSE 27210
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25890: LD_ADDR_VAR 0 19
25894: PUSH
25895: LD_VAR 0 18
25899: PPUSH
25900: LD_INT 2
25902: PUSH
25903: LD_INT 30
25905: PUSH
25906: LD_INT 29
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 30
25915: PUSH
25916: LD_INT 30
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: LIST
25927: PPUSH
25928: CALL_OW 72
25932: ST_TO_ADDR
// if tmp then
25933: LD_VAR 0 19
25937: IFFALSE 25985
// for i in tmp do
25939: LD_ADDR_VAR 0 8
25943: PUSH
25944: LD_VAR 0 19
25948: PUSH
25949: FOR_IN
25950: IFFALSE 25983
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25952: LD_VAR 0 8
25956: PPUSH
25957: CALL_OW 250
25961: PPUSH
25962: LD_VAR 0 8
25966: PPUSH
25967: CALL_OW 251
25971: PPUSH
25972: LD_VAR 0 16
25976: PPUSH
25977: CALL_OW 441
25981: GO 25949
25983: POP
25984: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25985: LD_VAR 0 18
25989: PPUSH
25990: LD_INT 2
25992: PUSH
25993: LD_INT 30
25995: PUSH
25996: LD_INT 32
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 30
26005: PUSH
26006: LD_INT 33
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: LIST
26017: PPUSH
26018: CALL_OW 72
26022: IFFALSE 26110
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26024: LD_ADDR_VAR 0 8
26028: PUSH
26029: LD_VAR 0 18
26033: PPUSH
26034: LD_INT 2
26036: PUSH
26037: LD_INT 30
26039: PUSH
26040: LD_INT 32
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 30
26049: PUSH
26050: LD_INT 33
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: LIST
26061: PPUSH
26062: CALL_OW 72
26066: PUSH
26067: FOR_IN
26068: IFFALSE 26108
// begin if not GetBWeapon ( i ) then
26070: LD_VAR 0 8
26074: PPUSH
26075: CALL_OW 269
26079: NOT
26080: IFFALSE 26106
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26082: LD_VAR 0 8
26086: PPUSH
26087: LD_VAR 0 8
26091: PPUSH
26092: LD_VAR 0 2
26096: PPUSH
26097: CALL 27356 0 2
26101: PPUSH
26102: CALL_OW 431
// end ;
26106: GO 26067
26108: POP
26109: POP
// end ; for i = 1 to personel do
26110: LD_ADDR_VAR 0 8
26114: PUSH
26115: DOUBLE
26116: LD_INT 1
26118: DEC
26119: ST_TO_ADDR
26120: LD_VAR 0 6
26124: PUSH
26125: FOR_TO
26126: IFFALSE 27190
// begin if i > 4 then
26128: LD_VAR 0 8
26132: PUSH
26133: LD_INT 4
26135: GREATER
26136: IFFALSE 26140
// break ;
26138: GO 27190
// case i of 1 :
26140: LD_VAR 0 8
26144: PUSH
26145: LD_INT 1
26147: DOUBLE
26148: EQUAL
26149: IFTRUE 26153
26151: GO 26233
26153: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26154: LD_ADDR_VAR 0 12
26158: PUSH
26159: LD_VAR 0 18
26163: PPUSH
26164: LD_INT 22
26166: PUSH
26167: LD_VAR 0 16
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 58
26178: PUSH
26179: EMPTY
26180: LIST
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: LD_INT 30
26187: PUSH
26188: LD_INT 32
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 30
26197: PUSH
26198: LD_INT 4
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 30
26207: PUSH
26208: LD_INT 5
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: LIST
26225: PPUSH
26226: CALL_OW 72
26230: ST_TO_ADDR
26231: GO 26455
26233: LD_INT 2
26235: DOUBLE
26236: EQUAL
26237: IFTRUE 26241
26239: GO 26303
26241: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26242: LD_ADDR_VAR 0 12
26246: PUSH
26247: LD_VAR 0 18
26251: PPUSH
26252: LD_INT 22
26254: PUSH
26255: LD_VAR 0 16
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: LD_INT 30
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 30
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: LIST
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PPUSH
26296: CALL_OW 72
26300: ST_TO_ADDR
26301: GO 26455
26303: LD_INT 3
26305: DOUBLE
26306: EQUAL
26307: IFTRUE 26311
26309: GO 26373
26311: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26312: LD_ADDR_VAR 0 12
26316: PUSH
26317: LD_VAR 0 18
26321: PPUSH
26322: LD_INT 22
26324: PUSH
26325: LD_VAR 0 16
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: LD_INT 30
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 30
26349: PUSH
26350: LD_INT 3
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PPUSH
26366: CALL_OW 72
26370: ST_TO_ADDR
26371: GO 26455
26373: LD_INT 4
26375: DOUBLE
26376: EQUAL
26377: IFTRUE 26381
26379: GO 26454
26381: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26382: LD_ADDR_VAR 0 12
26386: PUSH
26387: LD_VAR 0 18
26391: PPUSH
26392: LD_INT 22
26394: PUSH
26395: LD_VAR 0 16
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: LD_INT 30
26409: PUSH
26410: LD_INT 6
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 30
26419: PUSH
26420: LD_INT 7
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 30
26429: PUSH
26430: LD_INT 8
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PPUSH
26447: CALL_OW 72
26451: ST_TO_ADDR
26452: GO 26455
26454: POP
// if i = 1 then
26455: LD_VAR 0 8
26459: PUSH
26460: LD_INT 1
26462: EQUAL
26463: IFFALSE 26574
// begin tmp := [ ] ;
26465: LD_ADDR_VAR 0 19
26469: PUSH
26470: EMPTY
26471: ST_TO_ADDR
// for j in f do
26472: LD_ADDR_VAR 0 9
26476: PUSH
26477: LD_VAR 0 12
26481: PUSH
26482: FOR_IN
26483: IFFALSE 26556
// if GetBType ( j ) = b_bunker then
26485: LD_VAR 0 9
26489: PPUSH
26490: CALL_OW 266
26494: PUSH
26495: LD_INT 32
26497: EQUAL
26498: IFFALSE 26525
// tmp := Insert ( tmp , 1 , j ) else
26500: LD_ADDR_VAR 0 19
26504: PUSH
26505: LD_VAR 0 19
26509: PPUSH
26510: LD_INT 1
26512: PPUSH
26513: LD_VAR 0 9
26517: PPUSH
26518: CALL_OW 2
26522: ST_TO_ADDR
26523: GO 26554
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26525: LD_ADDR_VAR 0 19
26529: PUSH
26530: LD_VAR 0 19
26534: PPUSH
26535: LD_VAR 0 19
26539: PUSH
26540: LD_INT 1
26542: PLUS
26543: PPUSH
26544: LD_VAR 0 9
26548: PPUSH
26549: CALL_OW 2
26553: ST_TO_ADDR
26554: GO 26482
26556: POP
26557: POP
// if tmp then
26558: LD_VAR 0 19
26562: IFFALSE 26574
// f := tmp ;
26564: LD_ADDR_VAR 0 12
26568: PUSH
26569: LD_VAR 0 19
26573: ST_TO_ADDR
// end ; x := personel [ i ] ;
26574: LD_ADDR_VAR 0 13
26578: PUSH
26579: LD_VAR 0 6
26583: PUSH
26584: LD_VAR 0 8
26588: ARRAY
26589: ST_TO_ADDR
// if x = - 1 then
26590: LD_VAR 0 13
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: EQUAL
26599: IFFALSE 26808
// begin for j in f do
26601: LD_ADDR_VAR 0 9
26605: PUSH
26606: LD_VAR 0 12
26610: PUSH
26611: FOR_IN
26612: IFFALSE 26804
// repeat InitHc ;
26614: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26618: LD_VAR 0 9
26622: PPUSH
26623: CALL_OW 266
26627: PUSH
26628: LD_INT 5
26630: EQUAL
26631: IFFALSE 26701
// begin if UnitsInside ( j ) < 3 then
26633: LD_VAR 0 9
26637: PPUSH
26638: CALL_OW 313
26642: PUSH
26643: LD_INT 3
26645: LESS
26646: IFFALSE 26682
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26648: LD_INT 0
26650: PPUSH
26651: LD_INT 5
26653: PUSH
26654: LD_INT 8
26656: PUSH
26657: LD_INT 9
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: PUSH
26665: LD_VAR 0 17
26669: ARRAY
26670: PPUSH
26671: LD_VAR 0 4
26675: PPUSH
26676: CALL_OW 380
26680: GO 26699
// PrepareHuman ( false , i , skill ) ;
26682: LD_INT 0
26684: PPUSH
26685: LD_VAR 0 8
26689: PPUSH
26690: LD_VAR 0 4
26694: PPUSH
26695: CALL_OW 380
// end else
26699: GO 26718
// PrepareHuman ( false , i , skill ) ;
26701: LD_INT 0
26703: PPUSH
26704: LD_VAR 0 8
26708: PPUSH
26709: LD_VAR 0 4
26713: PPUSH
26714: CALL_OW 380
// un := CreateHuman ;
26718: LD_ADDR_VAR 0 14
26722: PUSH
26723: CALL_OW 44
26727: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26728: LD_ADDR_VAR 0 7
26732: PUSH
26733: LD_VAR 0 7
26737: PPUSH
26738: LD_INT 1
26740: PPUSH
26741: LD_VAR 0 14
26745: PPUSH
26746: CALL_OW 2
26750: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26751: LD_VAR 0 14
26755: PPUSH
26756: LD_VAR 0 9
26760: PPUSH
26761: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26765: LD_VAR 0 9
26769: PPUSH
26770: CALL_OW 313
26774: PUSH
26775: LD_INT 6
26777: EQUAL
26778: PUSH
26779: LD_VAR 0 9
26783: PPUSH
26784: CALL_OW 266
26788: PUSH
26789: LD_INT 32
26791: PUSH
26792: LD_INT 31
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: IN
26799: OR
26800: IFFALSE 26614
26802: GO 26611
26804: POP
26805: POP
// end else
26806: GO 27188
// for j = 1 to x do
26808: LD_ADDR_VAR 0 9
26812: PUSH
26813: DOUBLE
26814: LD_INT 1
26816: DEC
26817: ST_TO_ADDR
26818: LD_VAR 0 13
26822: PUSH
26823: FOR_TO
26824: IFFALSE 27186
// begin InitHc ;
26826: CALL_OW 19
// if not f then
26830: LD_VAR 0 12
26834: NOT
26835: IFFALSE 26924
// begin PrepareHuman ( false , i , skill ) ;
26837: LD_INT 0
26839: PPUSH
26840: LD_VAR 0 8
26844: PPUSH
26845: LD_VAR 0 4
26849: PPUSH
26850: CALL_OW 380
// un := CreateHuman ;
26854: LD_ADDR_VAR 0 14
26858: PUSH
26859: CALL_OW 44
26863: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26864: LD_ADDR_VAR 0 7
26868: PUSH
26869: LD_VAR 0 7
26873: PPUSH
26874: LD_INT 1
26876: PPUSH
26877: LD_VAR 0 14
26881: PPUSH
26882: CALL_OW 2
26886: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26887: LD_VAR 0 14
26891: PPUSH
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 250
26901: PPUSH
26902: LD_VAR 0 1
26906: PPUSH
26907: CALL_OW 251
26911: PPUSH
26912: LD_INT 10
26914: PPUSH
26915: LD_INT 0
26917: PPUSH
26918: CALL_OW 50
// continue ;
26922: GO 26823
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26924: LD_VAR 0 12
26928: PUSH
26929: LD_INT 1
26931: ARRAY
26932: PPUSH
26933: CALL_OW 313
26937: PUSH
26938: LD_VAR 0 12
26942: PUSH
26943: LD_INT 1
26945: ARRAY
26946: PPUSH
26947: CALL_OW 266
26951: PUSH
26952: LD_INT 32
26954: PUSH
26955: LD_INT 31
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: IN
26962: AND
26963: PUSH
26964: LD_VAR 0 12
26968: PUSH
26969: LD_INT 1
26971: ARRAY
26972: PPUSH
26973: CALL_OW 313
26977: PUSH
26978: LD_INT 6
26980: EQUAL
26981: OR
26982: IFFALSE 27002
// f := Delete ( f , 1 ) ;
26984: LD_ADDR_VAR 0 12
26988: PUSH
26989: LD_VAR 0 12
26993: PPUSH
26994: LD_INT 1
26996: PPUSH
26997: CALL_OW 3
27001: ST_TO_ADDR
// if not f then
27002: LD_VAR 0 12
27006: NOT
27007: IFFALSE 27025
// begin x := x + 2 ;
27009: LD_ADDR_VAR 0 13
27013: PUSH
27014: LD_VAR 0 13
27018: PUSH
27019: LD_INT 2
27021: PLUS
27022: ST_TO_ADDR
// continue ;
27023: GO 26823
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27025: LD_VAR 0 12
27029: PUSH
27030: LD_INT 1
27032: ARRAY
27033: PPUSH
27034: CALL_OW 266
27038: PUSH
27039: LD_INT 5
27041: EQUAL
27042: IFFALSE 27116
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27044: LD_VAR 0 12
27048: PUSH
27049: LD_INT 1
27051: ARRAY
27052: PPUSH
27053: CALL_OW 313
27057: PUSH
27058: LD_INT 3
27060: LESS
27061: IFFALSE 27097
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27063: LD_INT 0
27065: PPUSH
27066: LD_INT 5
27068: PUSH
27069: LD_INT 8
27071: PUSH
27072: LD_INT 9
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: LIST
27079: PUSH
27080: LD_VAR 0 17
27084: ARRAY
27085: PPUSH
27086: LD_VAR 0 4
27090: PPUSH
27091: CALL_OW 380
27095: GO 27114
// PrepareHuman ( false , i , skill ) ;
27097: LD_INT 0
27099: PPUSH
27100: LD_VAR 0 8
27104: PPUSH
27105: LD_VAR 0 4
27109: PPUSH
27110: CALL_OW 380
// end else
27114: GO 27133
// PrepareHuman ( false , i , skill ) ;
27116: LD_INT 0
27118: PPUSH
27119: LD_VAR 0 8
27123: PPUSH
27124: LD_VAR 0 4
27128: PPUSH
27129: CALL_OW 380
// un := CreateHuman ;
27133: LD_ADDR_VAR 0 14
27137: PUSH
27138: CALL_OW 44
27142: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27143: LD_ADDR_VAR 0 7
27147: PUSH
27148: LD_VAR 0 7
27152: PPUSH
27153: LD_INT 1
27155: PPUSH
27156: LD_VAR 0 14
27160: PPUSH
27161: CALL_OW 2
27165: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27166: LD_VAR 0 14
27170: PPUSH
27171: LD_VAR 0 12
27175: PUSH
27176: LD_INT 1
27178: ARRAY
27179: PPUSH
27180: CALL_OW 52
// end ;
27184: GO 26823
27186: POP
27187: POP
// end ;
27188: GO 26125
27190: POP
27191: POP
// result := result ^ buildings ;
27192: LD_ADDR_VAR 0 7
27196: PUSH
27197: LD_VAR 0 7
27201: PUSH
27202: LD_VAR 0 18
27206: ADD
27207: ST_TO_ADDR
// end else
27208: GO 27351
// begin for i = 1 to personel do
27210: LD_ADDR_VAR 0 8
27214: PUSH
27215: DOUBLE
27216: LD_INT 1
27218: DEC
27219: ST_TO_ADDR
27220: LD_VAR 0 6
27224: PUSH
27225: FOR_TO
27226: IFFALSE 27349
// begin if i > 4 then
27228: LD_VAR 0 8
27232: PUSH
27233: LD_INT 4
27235: GREATER
27236: IFFALSE 27240
// break ;
27238: GO 27349
// x := personel [ i ] ;
27240: LD_ADDR_VAR 0 13
27244: PUSH
27245: LD_VAR 0 6
27249: PUSH
27250: LD_VAR 0 8
27254: ARRAY
27255: ST_TO_ADDR
// if x = - 1 then
27256: LD_VAR 0 13
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: EQUAL
27265: IFFALSE 27269
// continue ;
27267: GO 27225
// PrepareHuman ( false , i , skill ) ;
27269: LD_INT 0
27271: PPUSH
27272: LD_VAR 0 8
27276: PPUSH
27277: LD_VAR 0 4
27281: PPUSH
27282: CALL_OW 380
// un := CreateHuman ;
27286: LD_ADDR_VAR 0 14
27290: PUSH
27291: CALL_OW 44
27295: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27296: LD_VAR 0 14
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 250
27310: PPUSH
27311: LD_VAR 0 1
27315: PPUSH
27316: CALL_OW 251
27320: PPUSH
27321: LD_INT 10
27323: PPUSH
27324: LD_INT 0
27326: PPUSH
27327: CALL_OW 50
// result := result ^ un ;
27331: LD_ADDR_VAR 0 7
27335: PUSH
27336: LD_VAR 0 7
27340: PUSH
27341: LD_VAR 0 14
27345: ADD
27346: ST_TO_ADDR
// end ;
27347: GO 27225
27349: POP
27350: POP
// end ; end ;
27351: LD_VAR 0 7
27355: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27356: LD_INT 0
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
27362: PPUSH
27363: PPUSH
27364: PPUSH
27365: PPUSH
27366: PPUSH
27367: PPUSH
27368: PPUSH
27369: PPUSH
27370: PPUSH
27371: PPUSH
27372: PPUSH
27373: PPUSH
// result := false ;
27374: LD_ADDR_VAR 0 3
27378: PUSH
27379: LD_INT 0
27381: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27382: LD_VAR 0 1
27386: NOT
27387: PUSH
27388: LD_VAR 0 1
27392: PPUSH
27393: CALL_OW 266
27397: PUSH
27398: LD_INT 32
27400: PUSH
27401: LD_INT 33
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: IN
27408: NOT
27409: OR
27410: IFFALSE 27414
// exit ;
27412: GO 28523
// nat := GetNation ( tower ) ;
27414: LD_ADDR_VAR 0 12
27418: PUSH
27419: LD_VAR 0 1
27423: PPUSH
27424: CALL_OW 248
27428: ST_TO_ADDR
// side := GetSide ( tower ) ;
27429: LD_ADDR_VAR 0 16
27433: PUSH
27434: LD_VAR 0 1
27438: PPUSH
27439: CALL_OW 255
27443: ST_TO_ADDR
// x := GetX ( tower ) ;
27444: LD_ADDR_VAR 0 10
27448: PUSH
27449: LD_VAR 0 1
27453: PPUSH
27454: CALL_OW 250
27458: ST_TO_ADDR
// y := GetY ( tower ) ;
27459: LD_ADDR_VAR 0 11
27463: PUSH
27464: LD_VAR 0 1
27468: PPUSH
27469: CALL_OW 251
27473: ST_TO_ADDR
// if not x or not y then
27474: LD_VAR 0 10
27478: NOT
27479: PUSH
27480: LD_VAR 0 11
27484: NOT
27485: OR
27486: IFFALSE 27490
// exit ;
27488: GO 28523
// weapon := 0 ;
27490: LD_ADDR_VAR 0 18
27494: PUSH
27495: LD_INT 0
27497: ST_TO_ADDR
// fac_list := [ ] ;
27498: LD_ADDR_VAR 0 17
27502: PUSH
27503: EMPTY
27504: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27505: LD_ADDR_VAR 0 6
27509: PUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL_OW 274
27519: PPUSH
27520: LD_VAR 0 2
27524: PPUSH
27525: LD_INT 0
27527: PPUSH
27528: CALL 25094 0 3
27532: PPUSH
27533: LD_INT 30
27535: PUSH
27536: LD_INT 3
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PPUSH
27543: CALL_OW 72
27547: ST_TO_ADDR
// if not factories then
27548: LD_VAR 0 6
27552: NOT
27553: IFFALSE 27557
// exit ;
27555: GO 28523
// for i in factories do
27557: LD_ADDR_VAR 0 8
27561: PUSH
27562: LD_VAR 0 6
27566: PUSH
27567: FOR_IN
27568: IFFALSE 27593
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27570: LD_ADDR_VAR 0 17
27574: PUSH
27575: LD_VAR 0 17
27579: PUSH
27580: LD_VAR 0 8
27584: PPUSH
27585: CALL_OW 478
27589: UNION
27590: ST_TO_ADDR
27591: GO 27567
27593: POP
27594: POP
// if not fac_list then
27595: LD_VAR 0 17
27599: NOT
27600: IFFALSE 27604
// exit ;
27602: GO 28523
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27604: LD_ADDR_VAR 0 5
27608: PUSH
27609: LD_INT 4
27611: PUSH
27612: LD_INT 5
27614: PUSH
27615: LD_INT 9
27617: PUSH
27618: LD_INT 10
27620: PUSH
27621: LD_INT 6
27623: PUSH
27624: LD_INT 7
27626: PUSH
27627: LD_INT 11
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 27
27641: PUSH
27642: LD_INT 28
27644: PUSH
27645: LD_INT 26
27647: PUSH
27648: LD_INT 30
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 43
27659: PUSH
27660: LD_INT 44
27662: PUSH
27663: LD_INT 46
27665: PUSH
27666: LD_INT 45
27668: PUSH
27669: LD_INT 47
27671: PUSH
27672: LD_INT 49
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: PUSH
27688: LD_VAR 0 12
27692: ARRAY
27693: ST_TO_ADDR
// list := list isect fac_list ;
27694: LD_ADDR_VAR 0 5
27698: PUSH
27699: LD_VAR 0 5
27703: PUSH
27704: LD_VAR 0 17
27708: ISECT
27709: ST_TO_ADDR
// if not list then
27710: LD_VAR 0 5
27714: NOT
27715: IFFALSE 27719
// exit ;
27717: GO 28523
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27719: LD_VAR 0 12
27723: PUSH
27724: LD_INT 3
27726: EQUAL
27727: PUSH
27728: LD_INT 49
27730: PUSH
27731: LD_VAR 0 5
27735: IN
27736: AND
27737: PUSH
27738: LD_INT 31
27740: PPUSH
27741: LD_VAR 0 16
27745: PPUSH
27746: CALL_OW 321
27750: PUSH
27751: LD_INT 2
27753: EQUAL
27754: AND
27755: IFFALSE 27815
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27757: LD_INT 22
27759: PUSH
27760: LD_VAR 0 16
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 35
27771: PUSH
27772: LD_INT 49
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 91
27781: PUSH
27782: LD_VAR 0 1
27786: PUSH
27787: LD_INT 10
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: LIST
27799: PPUSH
27800: CALL_OW 69
27804: NOT
27805: IFFALSE 27815
// weapon := ru_time_lapser ;
27807: LD_ADDR_VAR 0 18
27811: PUSH
27812: LD_INT 49
27814: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27815: LD_VAR 0 12
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: IN
27830: PUSH
27831: LD_INT 11
27833: PUSH
27834: LD_VAR 0 5
27838: IN
27839: PUSH
27840: LD_INT 30
27842: PUSH
27843: LD_VAR 0 5
27847: IN
27848: OR
27849: AND
27850: PUSH
27851: LD_INT 6
27853: PPUSH
27854: LD_VAR 0 16
27858: PPUSH
27859: CALL_OW 321
27863: PUSH
27864: LD_INT 2
27866: EQUAL
27867: AND
27868: IFFALSE 28033
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27870: LD_INT 22
27872: PUSH
27873: LD_VAR 0 16
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 35
27887: PUSH
27888: LD_INT 11
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 35
27897: PUSH
27898: LD_INT 30
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 91
27912: PUSH
27913: LD_VAR 0 1
27917: PUSH
27918: LD_INT 18
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: PPUSH
27931: CALL_OW 69
27935: NOT
27936: PUSH
27937: LD_INT 22
27939: PUSH
27940: LD_VAR 0 16
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 2
27951: PUSH
27952: LD_INT 30
27954: PUSH
27955: LD_INT 32
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 30
27964: PUSH
27965: LD_INT 33
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 91
27979: PUSH
27980: LD_VAR 0 1
27984: PUSH
27985: LD_INT 12
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: PUSH
27998: EMPTY
27999: LIST
28000: PPUSH
28001: CALL_OW 69
28005: PUSH
28006: LD_INT 2
28008: GREATER
28009: AND
28010: IFFALSE 28033
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28012: LD_ADDR_VAR 0 18
28016: PUSH
28017: LD_INT 11
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_VAR 0 12
28031: ARRAY
28032: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28033: LD_VAR 0 18
28037: NOT
28038: PUSH
28039: LD_INT 40
28041: PPUSH
28042: LD_VAR 0 16
28046: PPUSH
28047: CALL_OW 321
28051: PUSH
28052: LD_INT 2
28054: EQUAL
28055: AND
28056: PUSH
28057: LD_INT 7
28059: PUSH
28060: LD_VAR 0 5
28064: IN
28065: PUSH
28066: LD_INT 28
28068: PUSH
28069: LD_VAR 0 5
28073: IN
28074: OR
28075: PUSH
28076: LD_INT 45
28078: PUSH
28079: LD_VAR 0 5
28083: IN
28084: OR
28085: AND
28086: IFFALSE 28340
// begin hex := GetHexInfo ( x , y ) ;
28088: LD_ADDR_VAR 0 4
28092: PUSH
28093: LD_VAR 0 10
28097: PPUSH
28098: LD_VAR 0 11
28102: PPUSH
28103: CALL_OW 546
28107: ST_TO_ADDR
// if hex [ 1 ] then
28108: LD_VAR 0 4
28112: PUSH
28113: LD_INT 1
28115: ARRAY
28116: IFFALSE 28120
// exit ;
28118: GO 28523
// height := hex [ 2 ] ;
28120: LD_ADDR_VAR 0 15
28124: PUSH
28125: LD_VAR 0 4
28129: PUSH
28130: LD_INT 2
28132: ARRAY
28133: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28134: LD_ADDR_VAR 0 14
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: LD_INT 3
28147: PUSH
28148: LD_INT 5
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: ST_TO_ADDR
// for i in tmp do
28157: LD_ADDR_VAR 0 8
28161: PUSH
28162: LD_VAR 0 14
28166: PUSH
28167: FOR_IN
28168: IFFALSE 28338
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28170: LD_ADDR_VAR 0 9
28174: PUSH
28175: LD_VAR 0 10
28179: PPUSH
28180: LD_VAR 0 8
28184: PPUSH
28185: LD_INT 5
28187: PPUSH
28188: CALL_OW 272
28192: PUSH
28193: LD_VAR 0 11
28197: PPUSH
28198: LD_VAR 0 8
28202: PPUSH
28203: LD_INT 5
28205: PPUSH
28206: CALL_OW 273
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28215: LD_VAR 0 9
28219: PUSH
28220: LD_INT 1
28222: ARRAY
28223: PPUSH
28224: LD_VAR 0 9
28228: PUSH
28229: LD_INT 2
28231: ARRAY
28232: PPUSH
28233: CALL_OW 488
28237: IFFALSE 28336
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28239: LD_ADDR_VAR 0 4
28243: PUSH
28244: LD_VAR 0 9
28248: PUSH
28249: LD_INT 1
28251: ARRAY
28252: PPUSH
28253: LD_VAR 0 9
28257: PUSH
28258: LD_INT 2
28260: ARRAY
28261: PPUSH
28262: CALL_OW 546
28266: ST_TO_ADDR
// if hex [ 1 ] then
28267: LD_VAR 0 4
28271: PUSH
28272: LD_INT 1
28274: ARRAY
28275: IFFALSE 28279
// continue ;
28277: GO 28167
// h := hex [ 2 ] ;
28279: LD_ADDR_VAR 0 13
28283: PUSH
28284: LD_VAR 0 4
28288: PUSH
28289: LD_INT 2
28291: ARRAY
28292: ST_TO_ADDR
// if h + 7 < height then
28293: LD_VAR 0 13
28297: PUSH
28298: LD_INT 7
28300: PLUS
28301: PUSH
28302: LD_VAR 0 15
28306: LESS
28307: IFFALSE 28336
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28309: LD_ADDR_VAR 0 18
28313: PUSH
28314: LD_INT 7
28316: PUSH
28317: LD_INT 28
28319: PUSH
28320: LD_INT 45
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: LIST
28327: PUSH
28328: LD_VAR 0 12
28332: ARRAY
28333: ST_TO_ADDR
// break ;
28334: GO 28338
// end ; end ; end ;
28336: GO 28167
28338: POP
28339: POP
// end ; if not weapon then
28340: LD_VAR 0 18
28344: NOT
28345: IFFALSE 28405
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28347: LD_ADDR_VAR 0 5
28351: PUSH
28352: LD_VAR 0 5
28356: PUSH
28357: LD_INT 11
28359: PUSH
28360: LD_INT 30
28362: PUSH
28363: LD_INT 49
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: LIST
28370: DIFF
28371: ST_TO_ADDR
// if not list then
28372: LD_VAR 0 5
28376: NOT
28377: IFFALSE 28381
// exit ;
28379: GO 28523
// weapon := list [ rand ( 1 , list ) ] ;
28381: LD_ADDR_VAR 0 18
28385: PUSH
28386: LD_VAR 0 5
28390: PUSH
28391: LD_INT 1
28393: PPUSH
28394: LD_VAR 0 5
28398: PPUSH
28399: CALL_OW 12
28403: ARRAY
28404: ST_TO_ADDR
// end ; if weapon then
28405: LD_VAR 0 18
28409: IFFALSE 28523
// begin tmp := CostOfWeapon ( weapon ) ;
28411: LD_ADDR_VAR 0 14
28415: PUSH
28416: LD_VAR 0 18
28420: PPUSH
28421: CALL_OW 451
28425: ST_TO_ADDR
// j := GetBase ( tower ) ;
28426: LD_ADDR_VAR 0 9
28430: PUSH
28431: LD_VAR 0 1
28435: PPUSH
28436: CALL_OW 274
28440: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28441: LD_VAR 0 9
28445: PPUSH
28446: LD_INT 1
28448: PPUSH
28449: CALL_OW 275
28453: PUSH
28454: LD_VAR 0 14
28458: PUSH
28459: LD_INT 1
28461: ARRAY
28462: GREATEREQUAL
28463: PUSH
28464: LD_VAR 0 9
28468: PPUSH
28469: LD_INT 2
28471: PPUSH
28472: CALL_OW 275
28476: PUSH
28477: LD_VAR 0 14
28481: PUSH
28482: LD_INT 2
28484: ARRAY
28485: GREATEREQUAL
28486: AND
28487: PUSH
28488: LD_VAR 0 9
28492: PPUSH
28493: LD_INT 3
28495: PPUSH
28496: CALL_OW 275
28500: PUSH
28501: LD_VAR 0 14
28505: PUSH
28506: LD_INT 3
28508: ARRAY
28509: GREATEREQUAL
28510: AND
28511: IFFALSE 28523
// result := weapon ;
28513: LD_ADDR_VAR 0 3
28517: PUSH
28518: LD_VAR 0 18
28522: ST_TO_ADDR
// end ; end ;
28523: LD_VAR 0 3
28527: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
// result := true ;
28532: LD_ADDR_VAR 0 3
28536: PUSH
28537: LD_INT 1
28539: ST_TO_ADDR
// if array1 = array2 then
28540: LD_VAR 0 1
28544: PUSH
28545: LD_VAR 0 2
28549: EQUAL
28550: IFFALSE 28610
// begin for i = 1 to array1 do
28552: LD_ADDR_VAR 0 4
28556: PUSH
28557: DOUBLE
28558: LD_INT 1
28560: DEC
28561: ST_TO_ADDR
28562: LD_VAR 0 1
28566: PUSH
28567: FOR_TO
28568: IFFALSE 28606
// if array1 [ i ] <> array2 [ i ] then
28570: LD_VAR 0 1
28574: PUSH
28575: LD_VAR 0 4
28579: ARRAY
28580: PUSH
28581: LD_VAR 0 2
28585: PUSH
28586: LD_VAR 0 4
28590: ARRAY
28591: NONEQUAL
28592: IFFALSE 28604
// begin result := false ;
28594: LD_ADDR_VAR 0 3
28598: PUSH
28599: LD_INT 0
28601: ST_TO_ADDR
// break ;
28602: GO 28606
// end ;
28604: GO 28567
28606: POP
28607: POP
// end else
28608: GO 28618
// result := false ;
28610: LD_ADDR_VAR 0 3
28614: PUSH
28615: LD_INT 0
28617: ST_TO_ADDR
// end ;
28618: LD_VAR 0 3
28622: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28623: LD_INT 0
28625: PPUSH
28626: PPUSH
// if not array1 or not array2 then
28627: LD_VAR 0 1
28631: NOT
28632: PUSH
28633: LD_VAR 0 2
28637: NOT
28638: OR
28639: IFFALSE 28643
// exit ;
28641: GO 28707
// result := true ;
28643: LD_ADDR_VAR 0 3
28647: PUSH
28648: LD_INT 1
28650: ST_TO_ADDR
// for i = 1 to array1 do
28651: LD_ADDR_VAR 0 4
28655: PUSH
28656: DOUBLE
28657: LD_INT 1
28659: DEC
28660: ST_TO_ADDR
28661: LD_VAR 0 1
28665: PUSH
28666: FOR_TO
28667: IFFALSE 28705
// if array1 [ i ] <> array2 [ i ] then
28669: LD_VAR 0 1
28673: PUSH
28674: LD_VAR 0 4
28678: ARRAY
28679: PUSH
28680: LD_VAR 0 2
28684: PUSH
28685: LD_VAR 0 4
28689: ARRAY
28690: NONEQUAL
28691: IFFALSE 28703
// begin result := false ;
28693: LD_ADDR_VAR 0 3
28697: PUSH
28698: LD_INT 0
28700: ST_TO_ADDR
// break ;
28701: GO 28705
// end ;
28703: GO 28666
28705: POP
28706: POP
// end ;
28707: LD_VAR 0 3
28711: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28712: LD_INT 0
28714: PPUSH
28715: PPUSH
28716: PPUSH
// pom := GetBase ( fac ) ;
28717: LD_ADDR_VAR 0 5
28721: PUSH
28722: LD_VAR 0 1
28726: PPUSH
28727: CALL_OW 274
28731: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28732: LD_ADDR_VAR 0 4
28736: PUSH
28737: LD_VAR 0 2
28741: PUSH
28742: LD_INT 1
28744: ARRAY
28745: PPUSH
28746: LD_VAR 0 2
28750: PUSH
28751: LD_INT 2
28753: ARRAY
28754: PPUSH
28755: LD_VAR 0 2
28759: PUSH
28760: LD_INT 3
28762: ARRAY
28763: PPUSH
28764: LD_VAR 0 2
28768: PUSH
28769: LD_INT 4
28771: ARRAY
28772: PPUSH
28773: CALL_OW 449
28777: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28778: LD_ADDR_VAR 0 3
28782: PUSH
28783: LD_VAR 0 5
28787: PPUSH
28788: LD_INT 1
28790: PPUSH
28791: CALL_OW 275
28795: PUSH
28796: LD_VAR 0 4
28800: PUSH
28801: LD_INT 1
28803: ARRAY
28804: GREATEREQUAL
28805: PUSH
28806: LD_VAR 0 5
28810: PPUSH
28811: LD_INT 2
28813: PPUSH
28814: CALL_OW 275
28818: PUSH
28819: LD_VAR 0 4
28823: PUSH
28824: LD_INT 2
28826: ARRAY
28827: GREATEREQUAL
28828: AND
28829: PUSH
28830: LD_VAR 0 5
28834: PPUSH
28835: LD_INT 3
28837: PPUSH
28838: CALL_OW 275
28842: PUSH
28843: LD_VAR 0 4
28847: PUSH
28848: LD_INT 3
28850: ARRAY
28851: GREATEREQUAL
28852: AND
28853: ST_TO_ADDR
// end ;
28854: LD_VAR 0 3
28858: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28859: LD_INT 0
28861: PPUSH
28862: PPUSH
28863: PPUSH
28864: PPUSH
// pom := GetBase ( building ) ;
28865: LD_ADDR_VAR 0 3
28869: PUSH
28870: LD_VAR 0 1
28874: PPUSH
28875: CALL_OW 274
28879: ST_TO_ADDR
// if not pom then
28880: LD_VAR 0 3
28884: NOT
28885: IFFALSE 28889
// exit ;
28887: GO 29059
// btype := GetBType ( building ) ;
28889: LD_ADDR_VAR 0 5
28893: PUSH
28894: LD_VAR 0 1
28898: PPUSH
28899: CALL_OW 266
28903: ST_TO_ADDR
// if btype = b_armoury then
28904: LD_VAR 0 5
28908: PUSH
28909: LD_INT 4
28911: EQUAL
28912: IFFALSE 28922
// btype := b_barracks ;
28914: LD_ADDR_VAR 0 5
28918: PUSH
28919: LD_INT 5
28921: ST_TO_ADDR
// if btype = b_depot then
28922: LD_VAR 0 5
28926: PUSH
28927: LD_INT 0
28929: EQUAL
28930: IFFALSE 28940
// btype := b_warehouse ;
28932: LD_ADDR_VAR 0 5
28936: PUSH
28937: LD_INT 1
28939: ST_TO_ADDR
// if btype = b_workshop then
28940: LD_VAR 0 5
28944: PUSH
28945: LD_INT 2
28947: EQUAL
28948: IFFALSE 28958
// btype := b_factory ;
28950: LD_ADDR_VAR 0 5
28954: PUSH
28955: LD_INT 3
28957: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28958: LD_ADDR_VAR 0 4
28962: PUSH
28963: LD_VAR 0 5
28967: PPUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: CALL_OW 248
28977: PPUSH
28978: CALL_OW 450
28982: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28983: LD_ADDR_VAR 0 2
28987: PUSH
28988: LD_VAR 0 3
28992: PPUSH
28993: LD_INT 1
28995: PPUSH
28996: CALL_OW 275
29000: PUSH
29001: LD_VAR 0 4
29005: PUSH
29006: LD_INT 1
29008: ARRAY
29009: GREATEREQUAL
29010: PUSH
29011: LD_VAR 0 3
29015: PPUSH
29016: LD_INT 2
29018: PPUSH
29019: CALL_OW 275
29023: PUSH
29024: LD_VAR 0 4
29028: PUSH
29029: LD_INT 2
29031: ARRAY
29032: GREATEREQUAL
29033: AND
29034: PUSH
29035: LD_VAR 0 3
29039: PPUSH
29040: LD_INT 3
29042: PPUSH
29043: CALL_OW 275
29047: PUSH
29048: LD_VAR 0 4
29052: PUSH
29053: LD_INT 3
29055: ARRAY
29056: GREATEREQUAL
29057: AND
29058: ST_TO_ADDR
// end ;
29059: LD_VAR 0 2
29063: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29064: LD_INT 0
29066: PPUSH
29067: PPUSH
29068: PPUSH
// pom := GetBase ( building ) ;
29069: LD_ADDR_VAR 0 4
29073: PUSH
29074: LD_VAR 0 1
29078: PPUSH
29079: CALL_OW 274
29083: ST_TO_ADDR
// if not pom then
29084: LD_VAR 0 4
29088: NOT
29089: IFFALSE 29093
// exit ;
29091: GO 29194
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29093: LD_ADDR_VAR 0 5
29097: PUSH
29098: LD_VAR 0 2
29102: PPUSH
29103: LD_VAR 0 1
29107: PPUSH
29108: CALL_OW 248
29112: PPUSH
29113: CALL_OW 450
29117: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29118: LD_ADDR_VAR 0 3
29122: PUSH
29123: LD_VAR 0 4
29127: PPUSH
29128: LD_INT 1
29130: PPUSH
29131: CALL_OW 275
29135: PUSH
29136: LD_VAR 0 5
29140: PUSH
29141: LD_INT 1
29143: ARRAY
29144: GREATEREQUAL
29145: PUSH
29146: LD_VAR 0 4
29150: PPUSH
29151: LD_INT 2
29153: PPUSH
29154: CALL_OW 275
29158: PUSH
29159: LD_VAR 0 5
29163: PUSH
29164: LD_INT 2
29166: ARRAY
29167: GREATEREQUAL
29168: AND
29169: PUSH
29170: LD_VAR 0 4
29174: PPUSH
29175: LD_INT 3
29177: PPUSH
29178: CALL_OW 275
29182: PUSH
29183: LD_VAR 0 5
29187: PUSH
29188: LD_INT 3
29190: ARRAY
29191: GREATEREQUAL
29192: AND
29193: ST_TO_ADDR
// end ;
29194: LD_VAR 0 3
29198: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29199: LD_INT 0
29201: PPUSH
29202: PPUSH
29203: PPUSH
29204: PPUSH
29205: PPUSH
29206: PPUSH
29207: PPUSH
29208: PPUSH
29209: PPUSH
29210: PPUSH
29211: PPUSH
// result := false ;
29212: LD_ADDR_VAR 0 8
29216: PUSH
29217: LD_INT 0
29219: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29220: LD_VAR 0 5
29224: NOT
29225: PUSH
29226: LD_VAR 0 1
29230: NOT
29231: OR
29232: PUSH
29233: LD_VAR 0 2
29237: NOT
29238: OR
29239: PUSH
29240: LD_VAR 0 3
29244: NOT
29245: OR
29246: IFFALSE 29250
// exit ;
29248: GO 30064
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29250: LD_ADDR_VAR 0 14
29254: PUSH
29255: LD_VAR 0 1
29259: PPUSH
29260: LD_VAR 0 2
29264: PPUSH
29265: LD_VAR 0 3
29269: PPUSH
29270: LD_VAR 0 4
29274: PPUSH
29275: LD_VAR 0 5
29279: PUSH
29280: LD_INT 1
29282: ARRAY
29283: PPUSH
29284: CALL_OW 248
29288: PPUSH
29289: LD_INT 0
29291: PPUSH
29292: CALL 31301 0 6
29296: ST_TO_ADDR
// if not hexes then
29297: LD_VAR 0 14
29301: NOT
29302: IFFALSE 29306
// exit ;
29304: GO 30064
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29306: LD_ADDR_VAR 0 17
29310: PUSH
29311: LD_VAR 0 5
29315: PPUSH
29316: LD_INT 22
29318: PUSH
29319: LD_VAR 0 13
29323: PPUSH
29324: CALL_OW 255
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 30
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 30
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PPUSH
29365: CALL_OW 72
29369: ST_TO_ADDR
// for i = 1 to hexes do
29370: LD_ADDR_VAR 0 9
29374: PUSH
29375: DOUBLE
29376: LD_INT 1
29378: DEC
29379: ST_TO_ADDR
29380: LD_VAR 0 14
29384: PUSH
29385: FOR_TO
29386: IFFALSE 30062
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29388: LD_ADDR_VAR 0 13
29392: PUSH
29393: LD_VAR 0 14
29397: PUSH
29398: LD_VAR 0 9
29402: ARRAY
29403: PUSH
29404: LD_INT 1
29406: ARRAY
29407: PPUSH
29408: LD_VAR 0 14
29412: PUSH
29413: LD_VAR 0 9
29417: ARRAY
29418: PUSH
29419: LD_INT 2
29421: ARRAY
29422: PPUSH
29423: CALL_OW 428
29427: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29428: LD_VAR 0 14
29432: PUSH
29433: LD_VAR 0 9
29437: ARRAY
29438: PUSH
29439: LD_INT 1
29441: ARRAY
29442: PPUSH
29443: LD_VAR 0 14
29447: PUSH
29448: LD_VAR 0 9
29452: ARRAY
29453: PUSH
29454: LD_INT 2
29456: ARRAY
29457: PPUSH
29458: CALL_OW 351
29462: PUSH
29463: LD_VAR 0 14
29467: PUSH
29468: LD_VAR 0 9
29472: ARRAY
29473: PUSH
29474: LD_INT 1
29476: ARRAY
29477: PPUSH
29478: LD_VAR 0 14
29482: PUSH
29483: LD_VAR 0 9
29487: ARRAY
29488: PUSH
29489: LD_INT 2
29491: ARRAY
29492: PPUSH
29493: CALL_OW 488
29497: NOT
29498: OR
29499: PUSH
29500: LD_VAR 0 13
29504: PPUSH
29505: CALL_OW 247
29509: PUSH
29510: LD_INT 3
29512: EQUAL
29513: OR
29514: IFFALSE 29520
// exit ;
29516: POP
29517: POP
29518: GO 30064
// if not tmp then
29520: LD_VAR 0 13
29524: NOT
29525: IFFALSE 29529
// continue ;
29527: GO 29385
// result := true ;
29529: LD_ADDR_VAR 0 8
29533: PUSH
29534: LD_INT 1
29536: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29537: LD_VAR 0 6
29541: PUSH
29542: LD_VAR 0 13
29546: PPUSH
29547: CALL_OW 247
29551: PUSH
29552: LD_INT 2
29554: EQUAL
29555: AND
29556: PUSH
29557: LD_VAR 0 13
29561: PPUSH
29562: CALL_OW 263
29566: PUSH
29567: LD_INT 1
29569: EQUAL
29570: AND
29571: IFFALSE 29735
// begin if IsDrivenBy ( tmp ) then
29573: LD_VAR 0 13
29577: PPUSH
29578: CALL_OW 311
29582: IFFALSE 29586
// continue ;
29584: GO 29385
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29586: LD_VAR 0 6
29590: PPUSH
29591: LD_INT 3
29593: PUSH
29594: LD_INT 60
29596: PUSH
29597: EMPTY
29598: LIST
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: LD_INT 55
29609: PUSH
29610: EMPTY
29611: LIST
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PPUSH
29621: CALL_OW 72
29625: IFFALSE 29733
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29627: LD_ADDR_VAR 0 18
29631: PUSH
29632: LD_VAR 0 6
29636: PPUSH
29637: LD_INT 3
29639: PUSH
29640: LD_INT 60
29642: PUSH
29643: EMPTY
29644: LIST
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 3
29652: PUSH
29653: LD_INT 55
29655: PUSH
29656: EMPTY
29657: LIST
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 72
29671: PUSH
29672: LD_INT 1
29674: ARRAY
29675: ST_TO_ADDR
// if IsInUnit ( driver ) then
29676: LD_VAR 0 18
29680: PPUSH
29681: CALL_OW 310
29685: IFFALSE 29696
// ComExit ( driver ) ;
29687: LD_VAR 0 18
29691: PPUSH
29692: CALL 54485 0 1
// AddComEnterUnit ( driver , tmp ) ;
29696: LD_VAR 0 18
29700: PPUSH
29701: LD_VAR 0 13
29705: PPUSH
29706: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29710: LD_VAR 0 18
29714: PPUSH
29715: LD_VAR 0 7
29719: PPUSH
29720: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29724: LD_VAR 0 18
29728: PPUSH
29729: CALL_OW 181
// end ; continue ;
29733: GO 29385
// end ; if not cleaners or not tmp in cleaners then
29735: LD_VAR 0 6
29739: NOT
29740: PUSH
29741: LD_VAR 0 13
29745: PUSH
29746: LD_VAR 0 6
29750: IN
29751: NOT
29752: OR
29753: IFFALSE 30060
// begin if dep then
29755: LD_VAR 0 17
29759: IFFALSE 29895
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29761: LD_ADDR_VAR 0 16
29765: PUSH
29766: LD_VAR 0 17
29770: PUSH
29771: LD_INT 1
29773: ARRAY
29774: PPUSH
29775: CALL_OW 250
29779: PPUSH
29780: LD_VAR 0 17
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: CALL_OW 254
29793: PPUSH
29794: LD_INT 5
29796: PPUSH
29797: CALL_OW 272
29801: PUSH
29802: LD_VAR 0 17
29806: PUSH
29807: LD_INT 1
29809: ARRAY
29810: PPUSH
29811: CALL_OW 251
29815: PPUSH
29816: LD_VAR 0 17
29820: PUSH
29821: LD_INT 1
29823: ARRAY
29824: PPUSH
29825: CALL_OW 254
29829: PPUSH
29830: LD_INT 5
29832: PPUSH
29833: CALL_OW 273
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29842: LD_VAR 0 16
29846: PUSH
29847: LD_INT 1
29849: ARRAY
29850: PPUSH
29851: LD_VAR 0 16
29855: PUSH
29856: LD_INT 2
29858: ARRAY
29859: PPUSH
29860: CALL_OW 488
29864: IFFALSE 29895
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29866: LD_VAR 0 13
29870: PPUSH
29871: LD_VAR 0 16
29875: PUSH
29876: LD_INT 1
29878: ARRAY
29879: PPUSH
29880: LD_VAR 0 16
29884: PUSH
29885: LD_INT 2
29887: ARRAY
29888: PPUSH
29889: CALL_OW 111
// continue ;
29893: GO 29385
// end ; end ; r := GetDir ( tmp ) ;
29895: LD_ADDR_VAR 0 15
29899: PUSH
29900: LD_VAR 0 13
29904: PPUSH
29905: CALL_OW 254
29909: ST_TO_ADDR
// if r = 5 then
29910: LD_VAR 0 15
29914: PUSH
29915: LD_INT 5
29917: EQUAL
29918: IFFALSE 29928
// r := 0 ;
29920: LD_ADDR_VAR 0 15
29924: PUSH
29925: LD_INT 0
29927: ST_TO_ADDR
// for j = r to 5 do
29928: LD_ADDR_VAR 0 10
29932: PUSH
29933: DOUBLE
29934: LD_VAR 0 15
29938: DEC
29939: ST_TO_ADDR
29940: LD_INT 5
29942: PUSH
29943: FOR_TO
29944: IFFALSE 30058
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29946: LD_ADDR_VAR 0 11
29950: PUSH
29951: LD_VAR 0 13
29955: PPUSH
29956: CALL_OW 250
29960: PPUSH
29961: LD_VAR 0 10
29965: PPUSH
29966: LD_INT 2
29968: PPUSH
29969: CALL_OW 272
29973: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29974: LD_ADDR_VAR 0 12
29978: PUSH
29979: LD_VAR 0 13
29983: PPUSH
29984: CALL_OW 251
29988: PPUSH
29989: LD_VAR 0 10
29993: PPUSH
29994: LD_INT 2
29996: PPUSH
29997: CALL_OW 273
30001: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30002: LD_VAR 0 11
30006: PPUSH
30007: LD_VAR 0 12
30011: PPUSH
30012: CALL_OW 488
30016: PUSH
30017: LD_VAR 0 11
30021: PPUSH
30022: LD_VAR 0 12
30026: PPUSH
30027: CALL_OW 428
30031: NOT
30032: AND
30033: IFFALSE 30056
// begin ComMoveXY ( tmp , _x , _y ) ;
30035: LD_VAR 0 13
30039: PPUSH
30040: LD_VAR 0 11
30044: PPUSH
30045: LD_VAR 0 12
30049: PPUSH
30050: CALL_OW 111
// break ;
30054: GO 30058
// end ; end ;
30056: GO 29943
30058: POP
30059: POP
// end ; end ;
30060: GO 29385
30062: POP
30063: POP
// end ;
30064: LD_VAR 0 8
30068: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30069: LD_INT 0
30071: PPUSH
// result := true ;
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_INT 1
30079: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30080: LD_VAR 0 2
30084: PUSH
30085: LD_INT 24
30087: DOUBLE
30088: EQUAL
30089: IFTRUE 30099
30091: LD_INT 33
30093: DOUBLE
30094: EQUAL
30095: IFTRUE 30099
30097: GO 30124
30099: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30100: LD_ADDR_VAR 0 3
30104: PUSH
30105: LD_INT 32
30107: PPUSH
30108: LD_VAR 0 1
30112: PPUSH
30113: CALL_OW 321
30117: PUSH
30118: LD_INT 2
30120: EQUAL
30121: ST_TO_ADDR
30122: GO 30444
30124: LD_INT 20
30126: DOUBLE
30127: EQUAL
30128: IFTRUE 30132
30130: GO 30157
30132: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30133: LD_ADDR_VAR 0 3
30137: PUSH
30138: LD_INT 6
30140: PPUSH
30141: LD_VAR 0 1
30145: PPUSH
30146: CALL_OW 321
30150: PUSH
30151: LD_INT 2
30153: EQUAL
30154: ST_TO_ADDR
30155: GO 30444
30157: LD_INT 22
30159: DOUBLE
30160: EQUAL
30161: IFTRUE 30171
30163: LD_INT 36
30165: DOUBLE
30166: EQUAL
30167: IFTRUE 30171
30169: GO 30196
30171: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30172: LD_ADDR_VAR 0 3
30176: PUSH
30177: LD_INT 15
30179: PPUSH
30180: LD_VAR 0 1
30184: PPUSH
30185: CALL_OW 321
30189: PUSH
30190: LD_INT 2
30192: EQUAL
30193: ST_TO_ADDR
30194: GO 30444
30196: LD_INT 30
30198: DOUBLE
30199: EQUAL
30200: IFTRUE 30204
30202: GO 30229
30204: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30205: LD_ADDR_VAR 0 3
30209: PUSH
30210: LD_INT 20
30212: PPUSH
30213: LD_VAR 0 1
30217: PPUSH
30218: CALL_OW 321
30222: PUSH
30223: LD_INT 2
30225: EQUAL
30226: ST_TO_ADDR
30227: GO 30444
30229: LD_INT 28
30231: DOUBLE
30232: EQUAL
30233: IFTRUE 30243
30235: LD_INT 21
30237: DOUBLE
30238: EQUAL
30239: IFTRUE 30243
30241: GO 30268
30243: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30244: LD_ADDR_VAR 0 3
30248: PUSH
30249: LD_INT 21
30251: PPUSH
30252: LD_VAR 0 1
30256: PPUSH
30257: CALL_OW 321
30261: PUSH
30262: LD_INT 2
30264: EQUAL
30265: ST_TO_ADDR
30266: GO 30444
30268: LD_INT 16
30270: DOUBLE
30271: EQUAL
30272: IFTRUE 30276
30274: GO 30303
30276: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30277: LD_ADDR_VAR 0 3
30281: PUSH
30282: LD_EXP 25
30286: PPUSH
30287: LD_VAR 0 1
30291: PPUSH
30292: CALL_OW 321
30296: PUSH
30297: LD_INT 2
30299: EQUAL
30300: ST_TO_ADDR
30301: GO 30444
30303: LD_INT 19
30305: DOUBLE
30306: EQUAL
30307: IFTRUE 30317
30309: LD_INT 23
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30344
30317: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30318: LD_ADDR_VAR 0 3
30322: PUSH
30323: LD_EXP 24
30327: PPUSH
30328: LD_VAR 0 1
30332: PPUSH
30333: CALL_OW 321
30337: PUSH
30338: LD_INT 2
30340: EQUAL
30341: ST_TO_ADDR
30342: GO 30444
30344: LD_INT 17
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30377
30352: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30353: LD_ADDR_VAR 0 3
30357: PUSH
30358: LD_INT 39
30360: PPUSH
30361: LD_VAR 0 1
30365: PPUSH
30366: CALL_OW 321
30370: PUSH
30371: LD_INT 2
30373: EQUAL
30374: ST_TO_ADDR
30375: GO 30444
30377: LD_INT 18
30379: DOUBLE
30380: EQUAL
30381: IFTRUE 30385
30383: GO 30410
30385: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30386: LD_ADDR_VAR 0 3
30390: PUSH
30391: LD_INT 40
30393: PPUSH
30394: LD_VAR 0 1
30398: PPUSH
30399: CALL_OW 321
30403: PUSH
30404: LD_INT 2
30406: EQUAL
30407: ST_TO_ADDR
30408: GO 30444
30410: LD_INT 27
30412: DOUBLE
30413: EQUAL
30414: IFTRUE 30418
30416: GO 30443
30418: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30419: LD_ADDR_VAR 0 3
30423: PUSH
30424: LD_INT 35
30426: PPUSH
30427: LD_VAR 0 1
30431: PPUSH
30432: CALL_OW 321
30436: PUSH
30437: LD_INT 2
30439: EQUAL
30440: ST_TO_ADDR
30441: GO 30444
30443: POP
// end ;
30444: LD_VAR 0 3
30448: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30449: LD_INT 0
30451: PPUSH
30452: PPUSH
30453: PPUSH
30454: PPUSH
30455: PPUSH
30456: PPUSH
30457: PPUSH
30458: PPUSH
30459: PPUSH
30460: PPUSH
30461: PPUSH
// result := false ;
30462: LD_ADDR_VAR 0 6
30466: PUSH
30467: LD_INT 0
30469: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30470: LD_VAR 0 1
30474: NOT
30475: PUSH
30476: LD_VAR 0 1
30480: PPUSH
30481: CALL_OW 266
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: IN
30496: NOT
30497: OR
30498: PUSH
30499: LD_VAR 0 2
30503: NOT
30504: OR
30505: PUSH
30506: LD_VAR 0 5
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: LD_INT 4
30525: PUSH
30526: LD_INT 5
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: IN
30537: NOT
30538: OR
30539: PUSH
30540: LD_VAR 0 3
30544: PPUSH
30545: LD_VAR 0 4
30549: PPUSH
30550: CALL_OW 488
30554: NOT
30555: OR
30556: IFFALSE 30560
// exit ;
30558: GO 31296
// side := GetSide ( depot ) ;
30560: LD_ADDR_VAR 0 9
30564: PUSH
30565: LD_VAR 0 1
30569: PPUSH
30570: CALL_OW 255
30574: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30575: LD_VAR 0 9
30579: PPUSH
30580: LD_VAR 0 2
30584: PPUSH
30585: CALL 30069 0 2
30589: NOT
30590: IFFALSE 30594
// exit ;
30592: GO 31296
// pom := GetBase ( depot ) ;
30594: LD_ADDR_VAR 0 10
30598: PUSH
30599: LD_VAR 0 1
30603: PPUSH
30604: CALL_OW 274
30608: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30609: LD_ADDR_VAR 0 11
30613: PUSH
30614: LD_VAR 0 2
30618: PPUSH
30619: LD_VAR 0 1
30623: PPUSH
30624: CALL_OW 248
30628: PPUSH
30629: CALL_OW 450
30633: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30634: LD_VAR 0 10
30638: PPUSH
30639: LD_INT 1
30641: PPUSH
30642: CALL_OW 275
30646: PUSH
30647: LD_VAR 0 11
30651: PUSH
30652: LD_INT 1
30654: ARRAY
30655: GREATEREQUAL
30656: PUSH
30657: LD_VAR 0 10
30661: PPUSH
30662: LD_INT 2
30664: PPUSH
30665: CALL_OW 275
30669: PUSH
30670: LD_VAR 0 11
30674: PUSH
30675: LD_INT 2
30677: ARRAY
30678: GREATEREQUAL
30679: AND
30680: PUSH
30681: LD_VAR 0 10
30685: PPUSH
30686: LD_INT 3
30688: PPUSH
30689: CALL_OW 275
30693: PUSH
30694: LD_VAR 0 11
30698: PUSH
30699: LD_INT 3
30701: ARRAY
30702: GREATEREQUAL
30703: AND
30704: NOT
30705: IFFALSE 30709
// exit ;
30707: GO 31296
// if GetBType ( depot ) = b_depot then
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 266
30718: PUSH
30719: LD_INT 0
30721: EQUAL
30722: IFFALSE 30734
// dist := 28 else
30724: LD_ADDR_VAR 0 14
30728: PUSH
30729: LD_INT 28
30731: ST_TO_ADDR
30732: GO 30742
// dist := 36 ;
30734: LD_ADDR_VAR 0 14
30738: PUSH
30739: LD_INT 36
30741: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30742: LD_VAR 0 1
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: LD_VAR 0 4
30756: PPUSH
30757: CALL_OW 297
30761: PUSH
30762: LD_VAR 0 14
30766: GREATER
30767: IFFALSE 30771
// exit ;
30769: GO 31296
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30771: LD_ADDR_VAR 0 12
30775: PUSH
30776: LD_VAR 0 2
30780: PPUSH
30781: LD_VAR 0 3
30785: PPUSH
30786: LD_VAR 0 4
30790: PPUSH
30791: LD_VAR 0 5
30795: PPUSH
30796: LD_VAR 0 1
30800: PPUSH
30801: CALL_OW 248
30805: PPUSH
30806: LD_INT 0
30808: PPUSH
30809: CALL 31301 0 6
30813: ST_TO_ADDR
// if not hexes then
30814: LD_VAR 0 12
30818: NOT
30819: IFFALSE 30823
// exit ;
30821: GO 31296
// hex := GetHexInfo ( x , y ) ;
30823: LD_ADDR_VAR 0 15
30827: PUSH
30828: LD_VAR 0 3
30832: PPUSH
30833: LD_VAR 0 4
30837: PPUSH
30838: CALL_OW 546
30842: ST_TO_ADDR
// if hex [ 1 ] then
30843: LD_VAR 0 15
30847: PUSH
30848: LD_INT 1
30850: ARRAY
30851: IFFALSE 30855
// exit ;
30853: GO 31296
// height := hex [ 2 ] ;
30855: LD_ADDR_VAR 0 13
30859: PUSH
30860: LD_VAR 0 15
30864: PUSH
30865: LD_INT 2
30867: ARRAY
30868: ST_TO_ADDR
// for i = 1 to hexes do
30869: LD_ADDR_VAR 0 7
30873: PUSH
30874: DOUBLE
30875: LD_INT 1
30877: DEC
30878: ST_TO_ADDR
30879: LD_VAR 0 12
30883: PUSH
30884: FOR_TO
30885: IFFALSE 31215
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30887: LD_VAR 0 12
30891: PUSH
30892: LD_VAR 0 7
30896: ARRAY
30897: PUSH
30898: LD_INT 1
30900: ARRAY
30901: PPUSH
30902: LD_VAR 0 12
30906: PUSH
30907: LD_VAR 0 7
30911: ARRAY
30912: PUSH
30913: LD_INT 2
30915: ARRAY
30916: PPUSH
30917: CALL_OW 488
30921: NOT
30922: PUSH
30923: LD_VAR 0 12
30927: PUSH
30928: LD_VAR 0 7
30932: ARRAY
30933: PUSH
30934: LD_INT 1
30936: ARRAY
30937: PPUSH
30938: LD_VAR 0 12
30942: PUSH
30943: LD_VAR 0 7
30947: ARRAY
30948: PUSH
30949: LD_INT 2
30951: ARRAY
30952: PPUSH
30953: CALL_OW 428
30957: PUSH
30958: LD_INT 0
30960: GREATER
30961: OR
30962: PUSH
30963: LD_VAR 0 12
30967: PUSH
30968: LD_VAR 0 7
30972: ARRAY
30973: PUSH
30974: LD_INT 1
30976: ARRAY
30977: PPUSH
30978: LD_VAR 0 12
30982: PUSH
30983: LD_VAR 0 7
30987: ARRAY
30988: PUSH
30989: LD_INT 2
30991: ARRAY
30992: PPUSH
30993: CALL_OW 351
30997: OR
30998: IFFALSE 31004
// exit ;
31000: POP
31001: POP
31002: GO 31296
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31004: LD_ADDR_VAR 0 8
31008: PUSH
31009: LD_VAR 0 12
31013: PUSH
31014: LD_VAR 0 7
31018: ARRAY
31019: PUSH
31020: LD_INT 1
31022: ARRAY
31023: PPUSH
31024: LD_VAR 0 12
31028: PUSH
31029: LD_VAR 0 7
31033: ARRAY
31034: PUSH
31035: LD_INT 2
31037: ARRAY
31038: PPUSH
31039: CALL_OW 546
31043: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31044: LD_VAR 0 8
31048: PUSH
31049: LD_INT 1
31051: ARRAY
31052: PUSH
31053: LD_VAR 0 8
31057: PUSH
31058: LD_INT 2
31060: ARRAY
31061: PUSH
31062: LD_VAR 0 13
31066: PUSH
31067: LD_INT 2
31069: PLUS
31070: GREATER
31071: OR
31072: PUSH
31073: LD_VAR 0 8
31077: PUSH
31078: LD_INT 2
31080: ARRAY
31081: PUSH
31082: LD_VAR 0 13
31086: PUSH
31087: LD_INT 2
31089: MINUS
31090: LESS
31091: OR
31092: PUSH
31093: LD_VAR 0 8
31097: PUSH
31098: LD_INT 3
31100: ARRAY
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: LD_INT 8
31107: PUSH
31108: LD_INT 9
31110: PUSH
31111: LD_INT 10
31113: PUSH
31114: LD_INT 11
31116: PUSH
31117: LD_INT 12
31119: PUSH
31120: LD_INT 13
31122: PUSH
31123: LD_INT 16
31125: PUSH
31126: LD_INT 17
31128: PUSH
31129: LD_INT 18
31131: PUSH
31132: LD_INT 19
31134: PUSH
31135: LD_INT 20
31137: PUSH
31138: LD_INT 21
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: IN
31156: NOT
31157: OR
31158: PUSH
31159: LD_VAR 0 8
31163: PUSH
31164: LD_INT 5
31166: ARRAY
31167: NOT
31168: OR
31169: PUSH
31170: LD_VAR 0 8
31174: PUSH
31175: LD_INT 6
31177: ARRAY
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: LD_INT 2
31184: PUSH
31185: LD_INT 7
31187: PUSH
31188: LD_INT 9
31190: PUSH
31191: LD_INT 10
31193: PUSH
31194: LD_INT 11
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: IN
31205: NOT
31206: OR
31207: IFFALSE 31213
// exit ;
31209: POP
31210: POP
31211: GO 31296
// end ;
31213: GO 30884
31215: POP
31216: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31217: LD_VAR 0 9
31221: PPUSH
31222: LD_VAR 0 3
31226: PPUSH
31227: LD_VAR 0 4
31231: PPUSH
31232: LD_INT 20
31234: PPUSH
31235: CALL 23242 0 4
31239: PUSH
31240: LD_INT 4
31242: ARRAY
31243: IFFALSE 31247
// exit ;
31245: GO 31296
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31247: LD_VAR 0 2
31251: PUSH
31252: LD_INT 29
31254: PUSH
31255: LD_INT 30
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: IN
31262: PUSH
31263: LD_VAR 0 3
31267: PPUSH
31268: LD_VAR 0 4
31272: PPUSH
31273: LD_VAR 0 9
31277: PPUSH
31278: CALL_OW 440
31282: NOT
31283: AND
31284: IFFALSE 31288
// exit ;
31286: GO 31296
// result := true ;
31288: LD_ADDR_VAR 0 6
31292: PUSH
31293: LD_INT 1
31295: ST_TO_ADDR
// end ;
31296: LD_VAR 0 6
31300: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31301: LD_INT 0
31303: PPUSH
31304: PPUSH
31305: PPUSH
31306: PPUSH
31307: PPUSH
31308: PPUSH
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
31317: PPUSH
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
31336: PPUSH
31337: PPUSH
31338: PPUSH
31339: PPUSH
31340: PPUSH
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
31352: PPUSH
31353: PPUSH
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
31358: PPUSH
31359: PPUSH
31360: PPUSH
// result = [ ] ;
31361: LD_ADDR_VAR 0 7
31365: PUSH
31366: EMPTY
31367: ST_TO_ADDR
// temp_list = [ ] ;
31368: LD_ADDR_VAR 0 9
31372: PUSH
31373: EMPTY
31374: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31375: LD_VAR 0 4
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: LD_INT 4
31394: PUSH
31395: LD_INT 5
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: IN
31406: NOT
31407: PUSH
31408: LD_VAR 0 1
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: IN
31423: PUSH
31424: LD_VAR 0 5
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 3
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: IN
31443: NOT
31444: AND
31445: OR
31446: IFFALSE 31450
// exit ;
31448: GO 49841
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31450: LD_VAR 0 1
31454: PUSH
31455: LD_INT 6
31457: PUSH
31458: LD_INT 7
31460: PUSH
31461: LD_INT 8
31463: PUSH
31464: LD_INT 13
31466: PUSH
31467: LD_INT 12
31469: PUSH
31470: LD_INT 15
31472: PUSH
31473: LD_INT 11
31475: PUSH
31476: LD_INT 14
31478: PUSH
31479: LD_INT 10
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: IN
31493: IFFALSE 31503
// btype = b_lab ;
31495: LD_ADDR_VAR 0 1
31499: PUSH
31500: LD_INT 6
31502: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31503: LD_VAR 0 6
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: IN
31522: NOT
31523: PUSH
31524: LD_VAR 0 1
31528: PUSH
31529: LD_INT 0
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: LD_INT 3
31540: PUSH
31541: LD_INT 6
31543: PUSH
31544: LD_INT 36
31546: PUSH
31547: LD_INT 4
31549: PUSH
31550: LD_INT 5
31552: PUSH
31553: LD_INT 31
31555: PUSH
31556: LD_INT 32
31558: PUSH
31559: LD_INT 33
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: IN
31575: NOT
31576: PUSH
31577: LD_VAR 0 6
31581: PUSH
31582: LD_INT 1
31584: EQUAL
31585: AND
31586: OR
31587: PUSH
31588: LD_VAR 0 1
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: IN
31603: NOT
31604: PUSH
31605: LD_VAR 0 6
31609: PUSH
31610: LD_INT 2
31612: EQUAL
31613: AND
31614: OR
31615: IFFALSE 31625
// mode = 0 ;
31617: LD_ADDR_VAR 0 6
31621: PUSH
31622: LD_INT 0
31624: ST_TO_ADDR
// case mode of 0 :
31625: LD_VAR 0 6
31629: PUSH
31630: LD_INT 0
31632: DOUBLE
31633: EQUAL
31634: IFTRUE 31638
31636: GO 43091
31638: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31639: LD_ADDR_VAR 0 11
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: LD_INT 2
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: LD_INT 3
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31832: LD_ADDR_VAR 0 12
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 2
31978: NEG
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 3
31989: NEG
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 3
32000: NEG
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32028: LD_ADDR_VAR 0 13
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 0
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: LD_INT 2
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 2
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 2
32151: NEG
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: LD_INT 2
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: LD_INT 3
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 3
32187: NEG
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 3
32199: NEG
32200: PUSH
32201: LD_INT 3
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32227: LD_ADDR_VAR 0 14
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: LD_INT 1
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: LD_INT 2
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: LD_INT 2
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: LD_INT 2
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: LD_INT 3
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32423: LD_ADDR_VAR 0 15
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: LD_INT 1
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 3
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 3
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32616: LD_ADDR_VAR 0 16
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 2
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 2
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 2
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 2
32739: NEG
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: NEG
32752: PUSH
32753: LD_INT 2
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 3
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: LD_INT 3
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: LD_INT 3
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32809: LD_ADDR_VAR 0 17
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: LD_INT 1
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: NEG
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: NEG
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: LD_INT 2
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: LD_INT 2
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: LD_INT 2
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 2
32985: NEG
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 2
33008: NEG
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33039: LD_ADDR_VAR 0 18
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: NEG
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: LD_INT 2
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: LD_INT 0
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 2
33215: NEG
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 2
33226: NEG
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 2
33238: NEG
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33269: LD_ADDR_VAR 0 19
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: LD_INT 1
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: LD_INT 2
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 2
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: LD_INT 2
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 2
33456: NEG
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 2
33468: NEG
33469: PUSH
33470: LD_INT 2
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33499: LD_ADDR_VAR 0 20
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: LD_INT 2
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 2
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 2
33686: NEG
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 2
33698: NEG
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33729: LD_ADDR_VAR 0 21
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: NEG
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: LD_INT 2
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: LD_INT 2
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 2
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: NEG
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 2
33916: NEG
33917: PUSH
33918: LD_INT 1
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33959: LD_ADDR_VAR 0 22
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: LD_INT 2
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 2
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: NEG
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 2
34146: NEG
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 2
34158: NEG
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34189: LD_ADDR_VAR 0 23
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 2
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: NEG
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: NEG
34377: PUSH
34378: LD_INT 1
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: NEG
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: NEG
34401: PUSH
34402: LD_INT 3
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: LD_INT 3
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: LD_INT 1
34438: NEG
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34469: LD_ADDR_VAR 0 24
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 2
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: LD_INT 2
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 3
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34745: LD_ADDR_VAR 0 25
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: LD_INT 2
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: NEG
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 2
34932: NEG
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 2
34944: NEG
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 3
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 3
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35019: LD_ADDR_VAR 0 26
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: NEG
35101: PUSH
35102: LD_INT 2
35104: NEG
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 2
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 2
35195: NEG
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: NEG
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: LD_INT 3
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: LD_INT 3
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35295: LD_ADDR_VAR 0 27
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 2
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: LD_INT 0
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 2
35494: NEG
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 2
35517: NEG
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 3
35528: NEG
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 3
35540: NEG
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35575: LD_ADDR_VAR 0 28
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 2
35671: NEG
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 2
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 2
35710: PUSH
35711: LD_INT 2
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: NEG
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 2
35774: NEG
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 2
35786: NEG
35787: PUSH
35788: LD_INT 3
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: LD_INT 3
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 3
35810: NEG
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 3
35822: NEG
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35857: LD_ADDR_VAR 0 29
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 2
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: NEG
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: NEG
36036: PUSH
36037: LD_INT 2
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: NEG
36048: PUSH
36049: LD_INT 3
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: LD_INT 3
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 3
36101: NEG
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36136: LD_ADDR_VAR 0 30
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 2
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 2
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: LD_INT 2
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 2
36302: NEG
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: NEG
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: NEG
36326: PUSH
36327: LD_INT 3
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: LD_INT 2
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 3
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: LD_INT 3
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 3
36379: NEG
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36414: LD_ADDR_VAR 0 31
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: NEG
36592: PUSH
36593: LD_INT 2
36595: NEG
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: LD_INT 3
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 3
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 3
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 3
36657: NEG
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36692: LD_ADDR_VAR 0 32
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: LD_INT 2
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: NEG
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: LD_INT 3
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: PUSH
36915: LD_INT 3
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 2
36924: NEG
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 3
36935: NEG
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36970: LD_ADDR_VAR 0 33
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 1
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: NEG
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: LD_INT 2
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 2
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: NEG
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: NEG
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 2
37160: NEG
37161: PUSH
37162: LD_INT 3
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 1
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 3
37214: NEG
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37249: LD_ADDR_VAR 0 34
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 2
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: NEG
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: LD_INT 3
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 3
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: LD_INT 3
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 3
37494: NEG
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37529: LD_ADDR_VAR 0 35
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 2
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37641: LD_ADDR_VAR 0 36
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37753: LD_ADDR_VAR 0 37
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37865: LD_ADDR_VAR 0 38
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37977: LD_ADDR_VAR 0 39
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 1
38058: NEG
38059: PUSH
38060: LD_INT 2
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38089: LD_ADDR_VAR 0 40
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38201: LD_ADDR_VAR 0 41
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: NEG
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 2
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 2
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: LD_INT 2
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 2
38379: NEG
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 2
38391: NEG
38392: PUSH
38393: LD_INT 3
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 3
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: LD_INT 3
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: LD_INT 3
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 3
38475: NEG
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 3
38486: NEG
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 3
38498: NEG
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 3
38510: NEG
38511: PUSH
38512: LD_INT 3
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38551: LD_ADDR_VAR 0 42
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: LD_INT 1
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: LD_INT 2
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 2
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: NEG
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: NEG
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: NEG
38742: PUSH
38743: LD_INT 3
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: LD_INT 3
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: LD_INT 3
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 3
38797: PUSH
38798: LD_INT 3
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: PUSH
38808: LD_INT 3
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: LD_INT 3
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 3
38848: NEG
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: NEG
38861: PUSH
38862: LD_INT 3
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38901: LD_ADDR_VAR 0 43
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: LD_INT 3
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 3
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 3
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 3
39197: NEG
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 3
39208: NEG
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39249: LD_ADDR_VAR 0 44
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: LD_INT 2
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 3
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 3
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: NEG
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 3
39523: NEG
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 3
39534: NEG
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 3
39546: NEG
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 3
39558: NEG
39559: PUSH
39560: LD_INT 3
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39599: LD_ADDR_VAR 0 45
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 2
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: LD_INT 3
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 3
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 3
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 2
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 3
39845: PUSH
39846: LD_INT 3
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 3
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 3
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 3
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: LD_INT 3
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39949: LD_ADDR_VAR 0 46
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 2
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 3
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 3
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 3
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 3
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 3
40245: NEG
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 3
40256: NEG
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40297: LD_ADDR_VAR 0 47
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: LD_INT 2
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40448: LD_ADDR_VAR 0 48
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 2
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40595: LD_ADDR_VAR 0 49
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40739: LD_ADDR_VAR 0 50
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40883: LD_ADDR_VAR 0 51
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: NEG
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41030: LD_ADDR_VAR 0 52
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: NEG
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41181: LD_ADDR_VAR 0 53
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 2
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41411: LD_ADDR_VAR 0 54
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41641: LD_ADDR_VAR 0 55
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41871: LD_ADDR_VAR 0 56
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: NEG
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: NEG
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42101: LD_ADDR_VAR 0 57
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: NEG
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42331: LD_ADDR_VAR 0 58
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42561: LD_ADDR_VAR 0 59
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42649: LD_ADDR_VAR 0 60
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42737: LD_ADDR_VAR 0 61
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42825: LD_ADDR_VAR 0 62
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42913: LD_ADDR_VAR 0 63
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43001: LD_ADDR_VAR 0 64
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: ST_TO_ADDR
// end ; 1 :
43089: GO 48986
43091: LD_INT 1
43093: DOUBLE
43094: EQUAL
43095: IFTRUE 43099
43097: GO 45722
43099: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43100: LD_ADDR_VAR 0 11
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: LD_INT 3
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 3
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43144: LD_ADDR_VAR 0 12
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43185: LD_ADDR_VAR 0 13
43189: PUSH
43190: LD_INT 3
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 3
43202: PUSH
43203: LD_INT 3
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43225: LD_ADDR_VAR 0 14
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 3
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43266: LD_ADDR_VAR 0 15
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 3
43284: NEG
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 3
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43310: LD_ADDR_VAR 0 16
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 3
43329: NEG
43330: PUSH
43331: LD_INT 2
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: NEG
43342: PUSH
43343: LD_INT 3
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43356: LD_ADDR_VAR 0 17
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 3
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 3
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 2
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43400: LD_ADDR_VAR 0 18
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 3
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 3
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43441: LD_ADDR_VAR 0 19
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: LD_INT 3
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 3
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43481: LD_ADDR_VAR 0 20
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: LD_INT 3
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 3
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: LIST
43521: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43522: LD_ADDR_VAR 0 21
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 3
43540: NEG
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 3
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: LIST
43565: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43566: LD_ADDR_VAR 0 22
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 3
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 3
43585: NEG
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 3
43597: NEG
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: LIST
43611: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43612: LD_ADDR_VAR 0 23
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 3
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 4
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 3
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43656: LD_ADDR_VAR 0 24
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 4
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43697: LD_ADDR_VAR 0 25
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 4
43714: PUSH
43715: LD_INT 3
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 3
43724: PUSH
43725: LD_INT 4
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43737: LD_ADDR_VAR 0 26
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 4
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 3
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43778: LD_ADDR_VAR 0 27
43782: PUSH
43783: LD_INT 3
43785: NEG
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 4
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43822: LD_ADDR_VAR 0 28
43826: PUSH
43827: LD_INT 3
43829: NEG
43830: PUSH
43831: LD_INT 3
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 3
43841: NEG
43842: PUSH
43843: LD_INT 4
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 4
43853: NEG
43854: PUSH
43855: LD_INT 3
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43868: LD_ADDR_VAR 0 29
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 3
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 3
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: LD_INT 4
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 4
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 3
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 5
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 5
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 4
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 6
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 6
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 5
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44023: LD_ADDR_VAR 0 30
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 3
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 4
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 4
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 4
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 5
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 5
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 5
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 6
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 6
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44166: LD_ADDR_VAR 0 31
44170: PUSH
44171: LD_INT 3
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 3
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: LD_INT 3
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 4
44203: PUSH
44204: LD_INT 3
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 4
44213: PUSH
44214: LD_INT 4
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 4
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 5
44233: PUSH
44234: LD_INT 4
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 5
44243: PUSH
44244: LD_INT 5
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 4
44253: PUSH
44254: LD_INT 5
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 6
44263: PUSH
44264: LD_INT 5
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 6
44273: PUSH
44274: LD_INT 6
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 5
44283: PUSH
44284: LD_INT 6
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44305: LD_ADDR_VAR 0 32
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 4
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 4
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 5
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 5
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 4
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 6
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 6
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 5
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44448: LD_ADDR_VAR 0 33
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 3
44466: NEG
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 3
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 4
44500: NEG
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 4
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 4
44523: NEG
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 5
44534: NEG
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 5
44545: NEG
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 5
44557: NEG
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 6
44568: NEG
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 6
44579: NEG
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44603: LD_ADDR_VAR 0 34
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 3
44622: NEG
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 3
44634: NEG
44635: PUSH
44636: LD_INT 3
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 3
44646: NEG
44647: PUSH
44648: LD_INT 4
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 4
44658: NEG
44659: PUSH
44660: LD_INT 3
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 4
44670: NEG
44671: PUSH
44672: LD_INT 4
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 4
44682: NEG
44683: PUSH
44684: LD_INT 5
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 5
44694: NEG
44695: PUSH
44696: LD_INT 4
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 5
44706: NEG
44707: PUSH
44708: LD_INT 5
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 5
44718: NEG
44719: PUSH
44720: LD_INT 6
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 6
44730: NEG
44731: PUSH
44732: LD_INT 5
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 6
44742: NEG
44743: PUSH
44744: LD_INT 6
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44766: LD_ADDR_VAR 0 41
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 3
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44810: LD_ADDR_VAR 0 42
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 3
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44851: LD_ADDR_VAR 0 43
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44891: LD_ADDR_VAR 0 44
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 3
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44932: LD_ADDR_VAR 0 45
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: LIST
44975: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44976: LD_ADDR_VAR 0 46
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: LD_INT 3
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 3
45007: NEG
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45022: LD_ADDR_VAR 0 47
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 3
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45055: LD_ADDR_VAR 0 48
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45086: LD_ADDR_VAR 0 49
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45115: LD_ADDR_VAR 0 50
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: LD_INT 3
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 3
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45144: LD_ADDR_VAR 0 51
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45175: LD_ADDR_VAR 0 52
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 3
45194: NEG
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45208: LD_ADDR_VAR 0 53
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 3
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 3
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45252: LD_ADDR_VAR 0 54
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45293: LD_ADDR_VAR 0 55
45297: PUSH
45298: LD_INT 3
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: PUSH
45311: LD_INT 3
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: LD_INT 3
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45333: LD_ADDR_VAR 0 56
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45374: LD_ADDR_VAR 0 57
45378: PUSH
45379: LD_INT 2
45381: NEG
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 3
45392: NEG
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 3
45403: NEG
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45418: LD_ADDR_VAR 0 58
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 3
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 3
45437: NEG
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 3
45449: NEG
45450: PUSH
45451: LD_INT 3
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: LIST
45463: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45464: LD_ADDR_VAR 0 59
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45508: LD_ADDR_VAR 0 60
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45549: LD_ADDR_VAR 0 61
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45589: LD_ADDR_VAR 0 62
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45630: LD_ADDR_VAR 0 63
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45674: LD_ADDR_VAR 0 64
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: ST_TO_ADDR
// end ; 2 :
45720: GO 48986
45722: LD_INT 2
45724: DOUBLE
45725: EQUAL
45726: IFTRUE 45730
45728: GO 48985
45730: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45731: LD_ADDR_VAR 0 29
45735: PUSH
45736: LD_INT 4
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 4
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 5
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 5
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 4
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 3
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 3
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 5
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: LD_INT 3
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 4
45851: PUSH
45852: LD_INT 3
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 4
45861: PUSH
45862: LD_INT 4
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: LD_INT 4
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: LD_INT 3
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 4
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 4
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 4
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 3
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 4
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: LD_INT 5
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 5
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 4
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 3
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: LD_INT 5
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 3
46014: NEG
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 3
46025: NEG
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 2
46037: NEG
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 3
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 4
46070: NEG
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 4
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 4
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 4
46116: NEG
46117: PUSH
46118: LD_INT 4
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 4
46128: NEG
46129: PUSH
46130: LD_INT 5
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 3
46140: NEG
46141: PUSH
46142: LD_INT 4
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: LD_INT 3
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 4
46164: NEG
46165: PUSH
46166: LD_INT 3
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 5
46176: NEG
46177: PUSH
46178: LD_INT 4
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 5
46188: NEG
46189: PUSH
46190: LD_INT 5
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: NEG
46201: PUSH
46202: LD_INT 5
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 5
46212: NEG
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46269: LD_ADDR_VAR 0 30
46273: PUSH
46274: LD_INT 4
46276: PUSH
46277: LD_INT 4
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 4
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 5
46296: PUSH
46297: LD_INT 4
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 5
46306: PUSH
46307: LD_INT 5
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 4
46316: PUSH
46317: LD_INT 5
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 3
46326: PUSH
46327: LD_INT 4
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: LD_INT 3
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 5
46346: PUSH
46347: LD_INT 3
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: LD_INT 5
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 3
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 4
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 4
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 4
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 4
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 4
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 3
46482: NEG
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 3
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 4
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 5
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 5
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 5
46538: NEG
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 3
46550: NEG
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 3
46561: NEG
46562: PUSH
46563: LD_INT 3
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 3
46573: NEG
46574: PUSH
46575: LD_INT 4
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 3
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 3
46609: NEG
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 4
46621: NEG
46622: PUSH
46623: LD_INT 3
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 4
46633: NEG
46634: PUSH
46635: LD_INT 4
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 4
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 4
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 4
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 5
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 4
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 3
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 4
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 5
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: LD_INT 5
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46816: LD_ADDR_VAR 0 31
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 4
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 3
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 4
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 5
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 5
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 4
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 3
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 5
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 3
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 3
46927: NEG
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 4
46972: NEG
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 4
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 4
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 4
47018: NEG
47019: PUSH
47020: LD_INT 4
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 4
47030: NEG
47031: PUSH
47032: LD_INT 5
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: LD_INT 4
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: LD_INT 3
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 4
47066: NEG
47067: PUSH
47068: LD_INT 3
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 5
47078: NEG
47079: PUSH
47080: LD_INT 4
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 5
47090: NEG
47091: PUSH
47092: LD_INT 5
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: NEG
47103: PUSH
47104: LD_INT 5
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 5
47114: NEG
47115: PUSH
47116: LD_INT 3
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 3
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 4
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 3
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 3
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 4
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 4
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 4
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 4
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 5
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 5
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 4
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 3
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 3
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 5
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47366: LD_ADDR_VAR 0 32
47370: PUSH
47371: LD_INT 4
47373: NEG
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 4
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 3
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 4
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 5
47429: NEG
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 5
47440: NEG
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 5
47452: NEG
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 3
47475: NEG
47476: PUSH
47477: LD_INT 3
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: LD_INT 4
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 4
47535: NEG
47536: PUSH
47537: LD_INT 3
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 4
47547: NEG
47548: PUSH
47549: LD_INT 4
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: LD_INT 4
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 4
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 4
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: LD_INT 5
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 4
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 3
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 4
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 5
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: LD_INT 3
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 5
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 3
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 4
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 4
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 3
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 4
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 4
47778: PUSH
47779: LD_INT 4
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 4
47788: PUSH
47789: LD_INT 3
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 5
47798: PUSH
47799: LD_INT 4
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 5
47808: PUSH
47809: LD_INT 5
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 4
47818: PUSH
47819: LD_INT 5
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: LD_INT 4
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 3
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 5
47848: PUSH
47849: LD_INT 3
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: LD_INT 5
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47913: LD_ADDR_VAR 0 33
47917: PUSH
47918: LD_INT 4
47920: NEG
47921: PUSH
47922: LD_INT 4
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 4
47932: NEG
47933: PUSH
47934: LD_INT 5
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 3
47944: NEG
47945: PUSH
47946: LD_INT 4
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 3
47956: NEG
47957: PUSH
47958: LD_INT 3
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 4
47968: NEG
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 5
47980: NEG
47981: PUSH
47982: LD_INT 4
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 5
47992: NEG
47993: PUSH
47994: LD_INT 5
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 3
48004: NEG
48005: PUSH
48006: LD_INT 5
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 5
48016: NEG
48017: PUSH
48018: LD_INT 3
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 4
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 3
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 4
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: NEG
48119: PUSH
48120: LD_INT 4
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 4
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 5
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 5
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 4
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 3
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 5
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 4
48243: PUSH
48244: LD_INT 3
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 4
48253: PUSH
48254: LD_INT 4
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: LD_INT 4
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 3
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 4
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: LD_INT 4
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 4
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 3
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: LD_INT 4
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 5
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 5
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 4
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 3
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 5
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: LD_INT 3
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48451: LD_ADDR_VAR 0 34
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 4
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 5
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 4
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 3
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 4
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 5
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 5
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 3
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 4
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 4
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 2
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 4
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 4
48653: PUSH
48654: LD_INT 4
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 4
48663: PUSH
48664: LD_INT 3
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 5
48673: PUSH
48674: LD_INT 4
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 5
48683: PUSH
48684: LD_INT 5
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 4
48693: PUSH
48694: LD_INT 5
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 3
48703: PUSH
48704: LD_INT 4
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 3
48713: PUSH
48714: LD_INT 3
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 5
48723: PUSH
48724: LD_INT 3
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: LD_INT 5
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 3
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 4
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 4
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 3
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: LD_INT 4
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 4
48836: NEG
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 4
48847: NEG
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: NEG
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 4
48881: NEG
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 5
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 5
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 5
48915: NEG
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 3
48927: NEG
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: ST_TO_ADDR
// end ; end ;
48983: GO 48986
48985: POP
// case btype of b_depot , b_warehouse :
48986: LD_VAR 0 1
48990: PUSH
48991: LD_INT 0
48993: DOUBLE
48994: EQUAL
48995: IFTRUE 49005
48997: LD_INT 1
48999: DOUBLE
49000: EQUAL
49001: IFTRUE 49005
49003: GO 49206
49005: POP
// case nation of nation_american :
49006: LD_VAR 0 5
49010: PUSH
49011: LD_INT 1
49013: DOUBLE
49014: EQUAL
49015: IFTRUE 49019
49017: GO 49075
49019: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49020: LD_ADDR_VAR 0 9
49024: PUSH
49025: LD_VAR 0 11
49029: PUSH
49030: LD_VAR 0 12
49034: PUSH
49035: LD_VAR 0 13
49039: PUSH
49040: LD_VAR 0 14
49044: PUSH
49045: LD_VAR 0 15
49049: PUSH
49050: LD_VAR 0 16
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: PUSH
49063: LD_VAR 0 4
49067: PUSH
49068: LD_INT 1
49070: PLUS
49071: ARRAY
49072: ST_TO_ADDR
49073: GO 49204
49075: LD_INT 2
49077: DOUBLE
49078: EQUAL
49079: IFTRUE 49083
49081: GO 49139
49083: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49084: LD_ADDR_VAR 0 9
49088: PUSH
49089: LD_VAR 0 17
49093: PUSH
49094: LD_VAR 0 18
49098: PUSH
49099: LD_VAR 0 19
49103: PUSH
49104: LD_VAR 0 20
49108: PUSH
49109: LD_VAR 0 21
49113: PUSH
49114: LD_VAR 0 22
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: PUSH
49127: LD_VAR 0 4
49131: PUSH
49132: LD_INT 1
49134: PLUS
49135: ARRAY
49136: ST_TO_ADDR
49137: GO 49204
49139: LD_INT 3
49141: DOUBLE
49142: EQUAL
49143: IFTRUE 49147
49145: GO 49203
49147: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49148: LD_ADDR_VAR 0 9
49152: PUSH
49153: LD_VAR 0 23
49157: PUSH
49158: LD_VAR 0 24
49162: PUSH
49163: LD_VAR 0 25
49167: PUSH
49168: LD_VAR 0 26
49172: PUSH
49173: LD_VAR 0 27
49177: PUSH
49178: LD_VAR 0 28
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: PUSH
49191: LD_VAR 0 4
49195: PUSH
49196: LD_INT 1
49198: PLUS
49199: ARRAY
49200: ST_TO_ADDR
49201: GO 49204
49203: POP
49204: GO 49759
49206: LD_INT 2
49208: DOUBLE
49209: EQUAL
49210: IFTRUE 49220
49212: LD_INT 3
49214: DOUBLE
49215: EQUAL
49216: IFTRUE 49220
49218: GO 49276
49220: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49221: LD_ADDR_VAR 0 9
49225: PUSH
49226: LD_VAR 0 29
49230: PUSH
49231: LD_VAR 0 30
49235: PUSH
49236: LD_VAR 0 31
49240: PUSH
49241: LD_VAR 0 32
49245: PUSH
49246: LD_VAR 0 33
49250: PUSH
49251: LD_VAR 0 34
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: PUSH
49264: LD_VAR 0 4
49268: PUSH
49269: LD_INT 1
49271: PLUS
49272: ARRAY
49273: ST_TO_ADDR
49274: GO 49759
49276: LD_INT 16
49278: DOUBLE
49279: EQUAL
49280: IFTRUE 49338
49282: LD_INT 17
49284: DOUBLE
49285: EQUAL
49286: IFTRUE 49338
49288: LD_INT 18
49290: DOUBLE
49291: EQUAL
49292: IFTRUE 49338
49294: LD_INT 19
49296: DOUBLE
49297: EQUAL
49298: IFTRUE 49338
49300: LD_INT 22
49302: DOUBLE
49303: EQUAL
49304: IFTRUE 49338
49306: LD_INT 20
49308: DOUBLE
49309: EQUAL
49310: IFTRUE 49338
49312: LD_INT 21
49314: DOUBLE
49315: EQUAL
49316: IFTRUE 49338
49318: LD_INT 23
49320: DOUBLE
49321: EQUAL
49322: IFTRUE 49338
49324: LD_INT 24
49326: DOUBLE
49327: EQUAL
49328: IFTRUE 49338
49330: LD_INT 25
49332: DOUBLE
49333: EQUAL
49334: IFTRUE 49338
49336: GO 49394
49338: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49339: LD_ADDR_VAR 0 9
49343: PUSH
49344: LD_VAR 0 35
49348: PUSH
49349: LD_VAR 0 36
49353: PUSH
49354: LD_VAR 0 37
49358: PUSH
49359: LD_VAR 0 38
49363: PUSH
49364: LD_VAR 0 39
49368: PUSH
49369: LD_VAR 0 40
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: PUSH
49382: LD_VAR 0 4
49386: PUSH
49387: LD_INT 1
49389: PLUS
49390: ARRAY
49391: ST_TO_ADDR
49392: GO 49759
49394: LD_INT 6
49396: DOUBLE
49397: EQUAL
49398: IFTRUE 49450
49400: LD_INT 7
49402: DOUBLE
49403: EQUAL
49404: IFTRUE 49450
49406: LD_INT 8
49408: DOUBLE
49409: EQUAL
49410: IFTRUE 49450
49412: LD_INT 13
49414: DOUBLE
49415: EQUAL
49416: IFTRUE 49450
49418: LD_INT 12
49420: DOUBLE
49421: EQUAL
49422: IFTRUE 49450
49424: LD_INT 15
49426: DOUBLE
49427: EQUAL
49428: IFTRUE 49450
49430: LD_INT 11
49432: DOUBLE
49433: EQUAL
49434: IFTRUE 49450
49436: LD_INT 14
49438: DOUBLE
49439: EQUAL
49440: IFTRUE 49450
49442: LD_INT 10
49444: DOUBLE
49445: EQUAL
49446: IFTRUE 49450
49448: GO 49506
49450: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49451: LD_ADDR_VAR 0 9
49455: PUSH
49456: LD_VAR 0 41
49460: PUSH
49461: LD_VAR 0 42
49465: PUSH
49466: LD_VAR 0 43
49470: PUSH
49471: LD_VAR 0 44
49475: PUSH
49476: LD_VAR 0 45
49480: PUSH
49481: LD_VAR 0 46
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: PUSH
49494: LD_VAR 0 4
49498: PUSH
49499: LD_INT 1
49501: PLUS
49502: ARRAY
49503: ST_TO_ADDR
49504: GO 49759
49506: LD_INT 36
49508: DOUBLE
49509: EQUAL
49510: IFTRUE 49514
49512: GO 49570
49514: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49515: LD_ADDR_VAR 0 9
49519: PUSH
49520: LD_VAR 0 47
49524: PUSH
49525: LD_VAR 0 48
49529: PUSH
49530: LD_VAR 0 49
49534: PUSH
49535: LD_VAR 0 50
49539: PUSH
49540: LD_VAR 0 51
49544: PUSH
49545: LD_VAR 0 52
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: PUSH
49558: LD_VAR 0 4
49562: PUSH
49563: LD_INT 1
49565: PLUS
49566: ARRAY
49567: ST_TO_ADDR
49568: GO 49759
49570: LD_INT 4
49572: DOUBLE
49573: EQUAL
49574: IFTRUE 49596
49576: LD_INT 5
49578: DOUBLE
49579: EQUAL
49580: IFTRUE 49596
49582: LD_INT 34
49584: DOUBLE
49585: EQUAL
49586: IFTRUE 49596
49588: LD_INT 37
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49596
49594: GO 49652
49596: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49597: LD_ADDR_VAR 0 9
49601: PUSH
49602: LD_VAR 0 53
49606: PUSH
49607: LD_VAR 0 54
49611: PUSH
49612: LD_VAR 0 55
49616: PUSH
49617: LD_VAR 0 56
49621: PUSH
49622: LD_VAR 0 57
49626: PUSH
49627: LD_VAR 0 58
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: PUSH
49640: LD_VAR 0 4
49644: PUSH
49645: LD_INT 1
49647: PLUS
49648: ARRAY
49649: ST_TO_ADDR
49650: GO 49759
49652: LD_INT 31
49654: DOUBLE
49655: EQUAL
49656: IFTRUE 49702
49658: LD_INT 32
49660: DOUBLE
49661: EQUAL
49662: IFTRUE 49702
49664: LD_INT 33
49666: DOUBLE
49667: EQUAL
49668: IFTRUE 49702
49670: LD_INT 27
49672: DOUBLE
49673: EQUAL
49674: IFTRUE 49702
49676: LD_INT 26
49678: DOUBLE
49679: EQUAL
49680: IFTRUE 49702
49682: LD_INT 28
49684: DOUBLE
49685: EQUAL
49686: IFTRUE 49702
49688: LD_INT 29
49690: DOUBLE
49691: EQUAL
49692: IFTRUE 49702
49694: LD_INT 30
49696: DOUBLE
49697: EQUAL
49698: IFTRUE 49702
49700: GO 49758
49702: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49703: LD_ADDR_VAR 0 9
49707: PUSH
49708: LD_VAR 0 59
49712: PUSH
49713: LD_VAR 0 60
49717: PUSH
49718: LD_VAR 0 61
49722: PUSH
49723: LD_VAR 0 62
49727: PUSH
49728: LD_VAR 0 63
49732: PUSH
49733: LD_VAR 0 64
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: PUSH
49746: LD_VAR 0 4
49750: PUSH
49751: LD_INT 1
49753: PLUS
49754: ARRAY
49755: ST_TO_ADDR
49756: GO 49759
49758: POP
// temp_list2 = [ ] ;
49759: LD_ADDR_VAR 0 10
49763: PUSH
49764: EMPTY
49765: ST_TO_ADDR
// for i in temp_list do
49766: LD_ADDR_VAR 0 8
49770: PUSH
49771: LD_VAR 0 9
49775: PUSH
49776: FOR_IN
49777: IFFALSE 49829
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49779: LD_ADDR_VAR 0 10
49783: PUSH
49784: LD_VAR 0 10
49788: PUSH
49789: LD_VAR 0 8
49793: PUSH
49794: LD_INT 1
49796: ARRAY
49797: PUSH
49798: LD_VAR 0 2
49802: PLUS
49803: PUSH
49804: LD_VAR 0 8
49808: PUSH
49809: LD_INT 2
49811: ARRAY
49812: PUSH
49813: LD_VAR 0 3
49817: PLUS
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: EMPTY
49824: LIST
49825: ADD
49826: ST_TO_ADDR
49827: GO 49776
49829: POP
49830: POP
// result = temp_list2 ;
49831: LD_ADDR_VAR 0 7
49835: PUSH
49836: LD_VAR 0 10
49840: ST_TO_ADDR
// end ;
49841: LD_VAR 0 7
49845: RET
// export function EnemyInRange ( unit , dist ) ; begin
49846: LD_INT 0
49848: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49849: LD_ADDR_VAR 0 3
49853: PUSH
49854: LD_VAR 0 1
49858: PPUSH
49859: CALL_OW 255
49863: PPUSH
49864: LD_VAR 0 1
49868: PPUSH
49869: CALL_OW 250
49873: PPUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 251
49883: PPUSH
49884: LD_VAR 0 2
49888: PPUSH
49889: CALL 23242 0 4
49893: PUSH
49894: LD_INT 4
49896: ARRAY
49897: ST_TO_ADDR
// end ;
49898: LD_VAR 0 3
49902: RET
// export function PlayerSeeMe ( unit ) ; begin
49903: LD_INT 0
49905: PPUSH
// result := See ( your_side , unit ) ;
49906: LD_ADDR_VAR 0 2
49910: PUSH
49911: LD_OWVAR 2
49915: PPUSH
49916: LD_VAR 0 1
49920: PPUSH
49921: CALL_OW 292
49925: ST_TO_ADDR
// end ;
49926: LD_VAR 0 2
49930: RET
// export function ReverseDir ( unit ) ; begin
49931: LD_INT 0
49933: PPUSH
// if not unit then
49934: LD_VAR 0 1
49938: NOT
49939: IFFALSE 49943
// exit ;
49941: GO 49966
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49943: LD_ADDR_VAR 0 2
49947: PUSH
49948: LD_VAR 0 1
49952: PPUSH
49953: CALL_OW 254
49957: PUSH
49958: LD_INT 3
49960: PLUS
49961: PUSH
49962: LD_INT 6
49964: MOD
49965: ST_TO_ADDR
// end ;
49966: LD_VAR 0 2
49970: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49971: LD_INT 0
49973: PPUSH
49974: PPUSH
49975: PPUSH
49976: PPUSH
49977: PPUSH
// if not hexes then
49978: LD_VAR 0 2
49982: NOT
49983: IFFALSE 49987
// exit ;
49985: GO 50135
// dist := 9999 ;
49987: LD_ADDR_VAR 0 5
49991: PUSH
49992: LD_INT 9999
49994: ST_TO_ADDR
// for i = 1 to hexes do
49995: LD_ADDR_VAR 0 4
49999: PUSH
50000: DOUBLE
50001: LD_INT 1
50003: DEC
50004: ST_TO_ADDR
50005: LD_VAR 0 2
50009: PUSH
50010: FOR_TO
50011: IFFALSE 50123
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
50013: LD_VAR 0 1
50017: PPUSH
50018: LD_VAR 0 2
50022: PUSH
50023: LD_VAR 0 4
50027: ARRAY
50028: PUSH
50029: LD_INT 1
50031: ARRAY
50032: PPUSH
50033: LD_VAR 0 2
50037: PUSH
50038: LD_VAR 0 4
50042: ARRAY
50043: PUSH
50044: LD_INT 2
50046: ARRAY
50047: PPUSH
50048: CALL_OW 297
50052: PUSH
50053: LD_VAR 0 5
50057: LESS
50058: IFFALSE 50121
// begin hex := hexes [ i ] ;
50060: LD_ADDR_VAR 0 7
50064: PUSH
50065: LD_VAR 0 2
50069: PUSH
50070: LD_VAR 0 4
50074: ARRAY
50075: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50076: LD_ADDR_VAR 0 5
50080: PUSH
50081: LD_VAR 0 1
50085: PPUSH
50086: LD_VAR 0 2
50090: PUSH
50091: LD_VAR 0 4
50095: ARRAY
50096: PUSH
50097: LD_INT 1
50099: ARRAY
50100: PPUSH
50101: LD_VAR 0 2
50105: PUSH
50106: LD_VAR 0 4
50110: ARRAY
50111: PUSH
50112: LD_INT 2
50114: ARRAY
50115: PPUSH
50116: CALL_OW 297
50120: ST_TO_ADDR
// end ; end ;
50121: GO 50010
50123: POP
50124: POP
// result := hex ;
50125: LD_ADDR_VAR 0 3
50129: PUSH
50130: LD_VAR 0 7
50134: ST_TO_ADDR
// end ;
50135: LD_VAR 0 3
50139: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50140: LD_INT 0
50142: PPUSH
50143: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50144: LD_VAR 0 1
50148: NOT
50149: PUSH
50150: LD_VAR 0 1
50154: PUSH
50155: LD_INT 21
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 23
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PPUSH
50179: CALL_OW 69
50183: IN
50184: NOT
50185: OR
50186: IFFALSE 50190
// exit ;
50188: GO 50237
// for i = 1 to 3 do
50190: LD_ADDR_VAR 0 3
50194: PUSH
50195: DOUBLE
50196: LD_INT 1
50198: DEC
50199: ST_TO_ADDR
50200: LD_INT 3
50202: PUSH
50203: FOR_TO
50204: IFFALSE 50235
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50206: LD_VAR 0 1
50210: PPUSH
50211: CALL_OW 250
50215: PPUSH
50216: LD_VAR 0 1
50220: PPUSH
50221: CALL_OW 251
50225: PPUSH
50226: LD_INT 1
50228: PPUSH
50229: CALL_OW 453
50233: GO 50203
50235: POP
50236: POP
// end ;
50237: LD_VAR 0 2
50241: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50242: LD_INT 0
50244: PPUSH
50245: PPUSH
50246: PPUSH
50247: PPUSH
50248: PPUSH
50249: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50250: LD_VAR 0 1
50254: NOT
50255: PUSH
50256: LD_VAR 0 2
50260: NOT
50261: OR
50262: PUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: CALL_OW 314
50272: OR
50273: IFFALSE 50277
// exit ;
50275: GO 50718
// x := GetX ( enemy_unit ) ;
50277: LD_ADDR_VAR 0 7
50281: PUSH
50282: LD_VAR 0 2
50286: PPUSH
50287: CALL_OW 250
50291: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50292: LD_ADDR_VAR 0 8
50296: PUSH
50297: LD_VAR 0 2
50301: PPUSH
50302: CALL_OW 251
50306: ST_TO_ADDR
// if not x or not y then
50307: LD_VAR 0 7
50311: NOT
50312: PUSH
50313: LD_VAR 0 8
50317: NOT
50318: OR
50319: IFFALSE 50323
// exit ;
50321: GO 50718
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50323: LD_ADDR_VAR 0 6
50327: PUSH
50328: LD_VAR 0 7
50332: PPUSH
50333: LD_INT 0
50335: PPUSH
50336: LD_INT 4
50338: PPUSH
50339: CALL_OW 272
50343: PUSH
50344: LD_VAR 0 8
50348: PPUSH
50349: LD_INT 0
50351: PPUSH
50352: LD_INT 4
50354: PPUSH
50355: CALL_OW 273
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_VAR 0 7
50368: PPUSH
50369: LD_INT 1
50371: PPUSH
50372: LD_INT 4
50374: PPUSH
50375: CALL_OW 272
50379: PUSH
50380: LD_VAR 0 8
50384: PPUSH
50385: LD_INT 1
50387: PPUSH
50388: LD_INT 4
50390: PPUSH
50391: CALL_OW 273
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_VAR 0 7
50404: PPUSH
50405: LD_INT 2
50407: PPUSH
50408: LD_INT 4
50410: PPUSH
50411: CALL_OW 272
50415: PUSH
50416: LD_VAR 0 8
50420: PPUSH
50421: LD_INT 2
50423: PPUSH
50424: LD_INT 4
50426: PPUSH
50427: CALL_OW 273
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_VAR 0 7
50440: PPUSH
50441: LD_INT 3
50443: PPUSH
50444: LD_INT 4
50446: PPUSH
50447: CALL_OW 272
50451: PUSH
50452: LD_VAR 0 8
50456: PPUSH
50457: LD_INT 3
50459: PPUSH
50460: LD_INT 4
50462: PPUSH
50463: CALL_OW 273
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_VAR 0 7
50476: PPUSH
50477: LD_INT 4
50479: PPUSH
50480: LD_INT 4
50482: PPUSH
50483: CALL_OW 272
50487: PUSH
50488: LD_VAR 0 8
50492: PPUSH
50493: LD_INT 4
50495: PPUSH
50496: LD_INT 4
50498: PPUSH
50499: CALL_OW 273
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_VAR 0 7
50512: PPUSH
50513: LD_INT 5
50515: PPUSH
50516: LD_INT 4
50518: PPUSH
50519: CALL_OW 272
50523: PUSH
50524: LD_VAR 0 8
50528: PPUSH
50529: LD_INT 5
50531: PPUSH
50532: LD_INT 4
50534: PPUSH
50535: CALL_OW 273
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// for i = tmp downto 1 do
50552: LD_ADDR_VAR 0 4
50556: PUSH
50557: DOUBLE
50558: LD_VAR 0 6
50562: INC
50563: ST_TO_ADDR
50564: LD_INT 1
50566: PUSH
50567: FOR_DOWNTO
50568: IFFALSE 50669
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50570: LD_VAR 0 6
50574: PUSH
50575: LD_VAR 0 4
50579: ARRAY
50580: PUSH
50581: LD_INT 1
50583: ARRAY
50584: PPUSH
50585: LD_VAR 0 6
50589: PUSH
50590: LD_VAR 0 4
50594: ARRAY
50595: PUSH
50596: LD_INT 2
50598: ARRAY
50599: PPUSH
50600: CALL_OW 488
50604: NOT
50605: PUSH
50606: LD_VAR 0 6
50610: PUSH
50611: LD_VAR 0 4
50615: ARRAY
50616: PUSH
50617: LD_INT 1
50619: ARRAY
50620: PPUSH
50621: LD_VAR 0 6
50625: PUSH
50626: LD_VAR 0 4
50630: ARRAY
50631: PUSH
50632: LD_INT 2
50634: ARRAY
50635: PPUSH
50636: CALL_OW 428
50640: PUSH
50641: LD_INT 0
50643: NONEQUAL
50644: OR
50645: IFFALSE 50667
// tmp := Delete ( tmp , i ) ;
50647: LD_ADDR_VAR 0 6
50651: PUSH
50652: LD_VAR 0 6
50656: PPUSH
50657: LD_VAR 0 4
50661: PPUSH
50662: CALL_OW 3
50666: ST_TO_ADDR
50667: GO 50567
50669: POP
50670: POP
// j := GetClosestHex ( unit , tmp ) ;
50671: LD_ADDR_VAR 0 5
50675: PUSH
50676: LD_VAR 0 1
50680: PPUSH
50681: LD_VAR 0 6
50685: PPUSH
50686: CALL 49971 0 2
50690: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50691: LD_VAR 0 1
50695: PPUSH
50696: LD_VAR 0 5
50700: PUSH
50701: LD_INT 1
50703: ARRAY
50704: PPUSH
50705: LD_VAR 0 5
50709: PUSH
50710: LD_INT 2
50712: ARRAY
50713: PPUSH
50714: CALL_OW 111
// end ;
50718: LD_VAR 0 3
50722: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50723: LD_INT 0
50725: PPUSH
50726: PPUSH
50727: PPUSH
// uc_side = 0 ;
50728: LD_ADDR_OWVAR 20
50732: PUSH
50733: LD_INT 0
50735: ST_TO_ADDR
// uc_nation = 0 ;
50736: LD_ADDR_OWVAR 21
50740: PUSH
50741: LD_INT 0
50743: ST_TO_ADDR
// InitHc_All ( ) ;
50744: CALL_OW 584
// InitVc ;
50748: CALL_OW 20
// if mastodonts then
50752: LD_VAR 0 6
50756: IFFALSE 50823
// for i = 1 to mastodonts do
50758: LD_ADDR_VAR 0 11
50762: PUSH
50763: DOUBLE
50764: LD_INT 1
50766: DEC
50767: ST_TO_ADDR
50768: LD_VAR 0 6
50772: PUSH
50773: FOR_TO
50774: IFFALSE 50821
// begin vc_chassis := 31 ;
50776: LD_ADDR_OWVAR 37
50780: PUSH
50781: LD_INT 31
50783: ST_TO_ADDR
// vc_control := control_rider ;
50784: LD_ADDR_OWVAR 38
50788: PUSH
50789: LD_INT 4
50791: ST_TO_ADDR
// animal := CreateVehicle ;
50792: LD_ADDR_VAR 0 12
50796: PUSH
50797: CALL_OW 45
50801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50802: LD_VAR 0 12
50806: PPUSH
50807: LD_VAR 0 8
50811: PPUSH
50812: LD_INT 0
50814: PPUSH
50815: CALL 53011 0 3
// end ;
50819: GO 50773
50821: POP
50822: POP
// if horses then
50823: LD_VAR 0 5
50827: IFFALSE 50894
// for i = 1 to horses do
50829: LD_ADDR_VAR 0 11
50833: PUSH
50834: DOUBLE
50835: LD_INT 1
50837: DEC
50838: ST_TO_ADDR
50839: LD_VAR 0 5
50843: PUSH
50844: FOR_TO
50845: IFFALSE 50892
// begin hc_class := 21 ;
50847: LD_ADDR_OWVAR 28
50851: PUSH
50852: LD_INT 21
50854: ST_TO_ADDR
// hc_gallery :=  ;
50855: LD_ADDR_OWVAR 33
50859: PUSH
50860: LD_STRING 
50862: ST_TO_ADDR
// animal := CreateHuman ;
50863: LD_ADDR_VAR 0 12
50867: PUSH
50868: CALL_OW 44
50872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50873: LD_VAR 0 12
50877: PPUSH
50878: LD_VAR 0 8
50882: PPUSH
50883: LD_INT 0
50885: PPUSH
50886: CALL 53011 0 3
// end ;
50890: GO 50844
50892: POP
50893: POP
// if birds then
50894: LD_VAR 0 1
50898: IFFALSE 50965
// for i = 1 to birds do
50900: LD_ADDR_VAR 0 11
50904: PUSH
50905: DOUBLE
50906: LD_INT 1
50908: DEC
50909: ST_TO_ADDR
50910: LD_VAR 0 1
50914: PUSH
50915: FOR_TO
50916: IFFALSE 50963
// begin hc_class = 18 ;
50918: LD_ADDR_OWVAR 28
50922: PUSH
50923: LD_INT 18
50925: ST_TO_ADDR
// hc_gallery =  ;
50926: LD_ADDR_OWVAR 33
50930: PUSH
50931: LD_STRING 
50933: ST_TO_ADDR
// animal := CreateHuman ;
50934: LD_ADDR_VAR 0 12
50938: PUSH
50939: CALL_OW 44
50943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50944: LD_VAR 0 12
50948: PPUSH
50949: LD_VAR 0 8
50953: PPUSH
50954: LD_INT 0
50956: PPUSH
50957: CALL 53011 0 3
// end ;
50961: GO 50915
50963: POP
50964: POP
// if tigers then
50965: LD_VAR 0 2
50969: IFFALSE 51053
// for i = 1 to tigers do
50971: LD_ADDR_VAR 0 11
50975: PUSH
50976: DOUBLE
50977: LD_INT 1
50979: DEC
50980: ST_TO_ADDR
50981: LD_VAR 0 2
50985: PUSH
50986: FOR_TO
50987: IFFALSE 51051
// begin hc_class = class_tiger ;
50989: LD_ADDR_OWVAR 28
50993: PUSH
50994: LD_INT 14
50996: ST_TO_ADDR
// hc_gallery =  ;
50997: LD_ADDR_OWVAR 33
51001: PUSH
51002: LD_STRING 
51004: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51005: LD_ADDR_OWVAR 35
51009: PUSH
51010: LD_INT 7
51012: NEG
51013: PPUSH
51014: LD_INT 7
51016: PPUSH
51017: CALL_OW 12
51021: ST_TO_ADDR
// animal := CreateHuman ;
51022: LD_ADDR_VAR 0 12
51026: PUSH
51027: CALL_OW 44
51031: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51032: LD_VAR 0 12
51036: PPUSH
51037: LD_VAR 0 8
51041: PPUSH
51042: LD_INT 0
51044: PPUSH
51045: CALL 53011 0 3
// end ;
51049: GO 50986
51051: POP
51052: POP
// if apemans then
51053: LD_VAR 0 3
51057: IFFALSE 51180
// for i = 1 to apemans do
51059: LD_ADDR_VAR 0 11
51063: PUSH
51064: DOUBLE
51065: LD_INT 1
51067: DEC
51068: ST_TO_ADDR
51069: LD_VAR 0 3
51073: PUSH
51074: FOR_TO
51075: IFFALSE 51178
// begin hc_class = class_apeman ;
51077: LD_ADDR_OWVAR 28
51081: PUSH
51082: LD_INT 12
51084: ST_TO_ADDR
// hc_gallery =  ;
51085: LD_ADDR_OWVAR 33
51089: PUSH
51090: LD_STRING 
51092: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51093: LD_ADDR_OWVAR 35
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PPUSH
51102: LD_INT 2
51104: PPUSH
51105: CALL_OW 12
51109: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51110: LD_ADDR_OWVAR 31
51114: PUSH
51115: LD_INT 1
51117: PPUSH
51118: LD_INT 3
51120: PPUSH
51121: CALL_OW 12
51125: PUSH
51126: LD_INT 1
51128: PPUSH
51129: LD_INT 3
51131: PPUSH
51132: CALL_OW 12
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: ST_TO_ADDR
// animal := CreateHuman ;
51149: LD_ADDR_VAR 0 12
51153: PUSH
51154: CALL_OW 44
51158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51159: LD_VAR 0 12
51163: PPUSH
51164: LD_VAR 0 8
51168: PPUSH
51169: LD_INT 0
51171: PPUSH
51172: CALL 53011 0 3
// end ;
51176: GO 51074
51178: POP
51179: POP
// if enchidnas then
51180: LD_VAR 0 4
51184: IFFALSE 51251
// for i = 1 to enchidnas do
51186: LD_ADDR_VAR 0 11
51190: PUSH
51191: DOUBLE
51192: LD_INT 1
51194: DEC
51195: ST_TO_ADDR
51196: LD_VAR 0 4
51200: PUSH
51201: FOR_TO
51202: IFFALSE 51249
// begin hc_class = 13 ;
51204: LD_ADDR_OWVAR 28
51208: PUSH
51209: LD_INT 13
51211: ST_TO_ADDR
// hc_gallery =  ;
51212: LD_ADDR_OWVAR 33
51216: PUSH
51217: LD_STRING 
51219: ST_TO_ADDR
// animal := CreateHuman ;
51220: LD_ADDR_VAR 0 12
51224: PUSH
51225: CALL_OW 44
51229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51230: LD_VAR 0 12
51234: PPUSH
51235: LD_VAR 0 8
51239: PPUSH
51240: LD_INT 0
51242: PPUSH
51243: CALL 53011 0 3
// end ;
51247: GO 51201
51249: POP
51250: POP
// if fishes then
51251: LD_VAR 0 7
51255: IFFALSE 51322
// for i = 1 to fishes do
51257: LD_ADDR_VAR 0 11
51261: PUSH
51262: DOUBLE
51263: LD_INT 1
51265: DEC
51266: ST_TO_ADDR
51267: LD_VAR 0 7
51271: PUSH
51272: FOR_TO
51273: IFFALSE 51320
// begin hc_class = 20 ;
51275: LD_ADDR_OWVAR 28
51279: PUSH
51280: LD_INT 20
51282: ST_TO_ADDR
// hc_gallery =  ;
51283: LD_ADDR_OWVAR 33
51287: PUSH
51288: LD_STRING 
51290: ST_TO_ADDR
// animal := CreateHuman ;
51291: LD_ADDR_VAR 0 12
51295: PUSH
51296: CALL_OW 44
51300: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51301: LD_VAR 0 12
51305: PPUSH
51306: LD_VAR 0 9
51310: PPUSH
51311: LD_INT 0
51313: PPUSH
51314: CALL 53011 0 3
// end ;
51318: GO 51272
51320: POP
51321: POP
// end ;
51322: LD_VAR 0 10
51326: RET
// export function WantHeal ( sci , unit ) ; begin
51327: LD_INT 0
51329: PPUSH
// if GetTaskList ( sci ) > 0 then
51330: LD_VAR 0 1
51334: PPUSH
51335: CALL_OW 437
51339: PUSH
51340: LD_INT 0
51342: GREATER
51343: IFFALSE 51413
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51345: LD_VAR 0 1
51349: PPUSH
51350: CALL_OW 437
51354: PUSH
51355: LD_INT 1
51357: ARRAY
51358: PUSH
51359: LD_INT 1
51361: ARRAY
51362: PUSH
51363: LD_STRING l
51365: EQUAL
51366: PUSH
51367: LD_VAR 0 1
51371: PPUSH
51372: CALL_OW 437
51376: PUSH
51377: LD_INT 1
51379: ARRAY
51380: PUSH
51381: LD_INT 4
51383: ARRAY
51384: PUSH
51385: LD_VAR 0 2
51389: EQUAL
51390: AND
51391: IFFALSE 51403
// result := true else
51393: LD_ADDR_VAR 0 3
51397: PUSH
51398: LD_INT 1
51400: ST_TO_ADDR
51401: GO 51411
// result := false ;
51403: LD_ADDR_VAR 0 3
51407: PUSH
51408: LD_INT 0
51410: ST_TO_ADDR
// end else
51411: GO 51421
// result := false ;
51413: LD_ADDR_VAR 0 3
51417: PUSH
51418: LD_INT 0
51420: ST_TO_ADDR
// end ;
51421: LD_VAR 0 3
51425: RET
// export function HealTarget ( sci ) ; begin
51426: LD_INT 0
51428: PPUSH
// if not sci then
51429: LD_VAR 0 1
51433: NOT
51434: IFFALSE 51438
// exit ;
51436: GO 51503
// result := 0 ;
51438: LD_ADDR_VAR 0 2
51442: PUSH
51443: LD_INT 0
51445: ST_TO_ADDR
// if GetTaskList ( sci ) then
51446: LD_VAR 0 1
51450: PPUSH
51451: CALL_OW 437
51455: IFFALSE 51503
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51457: LD_VAR 0 1
51461: PPUSH
51462: CALL_OW 437
51466: PUSH
51467: LD_INT 1
51469: ARRAY
51470: PUSH
51471: LD_INT 1
51473: ARRAY
51474: PUSH
51475: LD_STRING l
51477: EQUAL
51478: IFFALSE 51503
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51480: LD_ADDR_VAR 0 2
51484: PUSH
51485: LD_VAR 0 1
51489: PPUSH
51490: CALL_OW 437
51494: PUSH
51495: LD_INT 1
51497: ARRAY
51498: PUSH
51499: LD_INT 4
51501: ARRAY
51502: ST_TO_ADDR
// end ;
51503: LD_VAR 0 2
51507: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51508: LD_INT 0
51510: PPUSH
51511: PPUSH
51512: PPUSH
51513: PPUSH
// if not base_units then
51514: LD_VAR 0 1
51518: NOT
51519: IFFALSE 51523
// exit ;
51521: GO 51610
// result := false ;
51523: LD_ADDR_VAR 0 2
51527: PUSH
51528: LD_INT 0
51530: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51531: LD_ADDR_VAR 0 5
51535: PUSH
51536: LD_VAR 0 1
51540: PPUSH
51541: LD_INT 21
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PPUSH
51551: CALL_OW 72
51555: ST_TO_ADDR
// if not tmp then
51556: LD_VAR 0 5
51560: NOT
51561: IFFALSE 51565
// exit ;
51563: GO 51610
// for i in tmp do
51565: LD_ADDR_VAR 0 3
51569: PUSH
51570: LD_VAR 0 5
51574: PUSH
51575: FOR_IN
51576: IFFALSE 51608
// begin result := EnemyInRange ( i , 22 ) ;
51578: LD_ADDR_VAR 0 2
51582: PUSH
51583: LD_VAR 0 3
51587: PPUSH
51588: LD_INT 22
51590: PPUSH
51591: CALL 49846 0 2
51595: ST_TO_ADDR
// if result then
51596: LD_VAR 0 2
51600: IFFALSE 51606
// exit ;
51602: POP
51603: POP
51604: GO 51610
// end ;
51606: GO 51575
51608: POP
51609: POP
// end ;
51610: LD_VAR 0 2
51614: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51615: LD_INT 0
51617: PPUSH
51618: PPUSH
// if not units then
51619: LD_VAR 0 1
51623: NOT
51624: IFFALSE 51628
// exit ;
51626: GO 51698
// result := [ ] ;
51628: LD_ADDR_VAR 0 3
51632: PUSH
51633: EMPTY
51634: ST_TO_ADDR
// for i in units do
51635: LD_ADDR_VAR 0 4
51639: PUSH
51640: LD_VAR 0 1
51644: PUSH
51645: FOR_IN
51646: IFFALSE 51696
// if GetTag ( i ) = tag then
51648: LD_VAR 0 4
51652: PPUSH
51653: CALL_OW 110
51657: PUSH
51658: LD_VAR 0 2
51662: EQUAL
51663: IFFALSE 51694
// result := Replace ( result , result + 1 , i ) ;
51665: LD_ADDR_VAR 0 3
51669: PUSH
51670: LD_VAR 0 3
51674: PPUSH
51675: LD_VAR 0 3
51679: PUSH
51680: LD_INT 1
51682: PLUS
51683: PPUSH
51684: LD_VAR 0 4
51688: PPUSH
51689: CALL_OW 1
51693: ST_TO_ADDR
51694: GO 51645
51696: POP
51697: POP
// end ;
51698: LD_VAR 0 3
51702: RET
// export function IsDriver ( un ) ; begin
51703: LD_INT 0
51705: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51706: LD_ADDR_VAR 0 2
51710: PUSH
51711: LD_VAR 0 1
51715: PUSH
51716: LD_INT 55
51718: PUSH
51719: EMPTY
51720: LIST
51721: PPUSH
51722: CALL_OW 69
51726: IN
51727: ST_TO_ADDR
// end ;
51728: LD_VAR 0 2
51732: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51733: LD_INT 0
51735: PPUSH
51736: PPUSH
// list := [ ] ;
51737: LD_ADDR_VAR 0 5
51741: PUSH
51742: EMPTY
51743: ST_TO_ADDR
// case d of 0 :
51744: LD_VAR 0 3
51748: PUSH
51749: LD_INT 0
51751: DOUBLE
51752: EQUAL
51753: IFTRUE 51757
51755: GO 51890
51757: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51758: LD_ADDR_VAR 0 5
51762: PUSH
51763: LD_VAR 0 1
51767: PUSH
51768: LD_INT 4
51770: MINUS
51771: PUSH
51772: LD_VAR 0 2
51776: PUSH
51777: LD_INT 4
51779: MINUS
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: PUSH
51789: LD_VAR 0 1
51793: PUSH
51794: LD_INT 3
51796: MINUS
51797: PUSH
51798: LD_VAR 0 2
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: LIST
51810: PUSH
51811: LD_VAR 0 1
51815: PUSH
51816: LD_INT 4
51818: PLUS
51819: PUSH
51820: LD_VAR 0 2
51824: PUSH
51825: LD_INT 4
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: PUSH
51833: LD_VAR 0 1
51837: PUSH
51838: LD_INT 3
51840: PLUS
51841: PUSH
51842: LD_VAR 0 2
51846: PUSH
51847: LD_INT 3
51849: PLUS
51850: PUSH
51851: LD_INT 5
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: PUSH
51859: LD_VAR 0 1
51863: PUSH
51864: LD_VAR 0 2
51868: PUSH
51869: LD_INT 4
51871: PLUS
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: ST_TO_ADDR
// end ; 1 :
51888: GO 52588
51890: LD_INT 1
51892: DOUBLE
51893: EQUAL
51894: IFTRUE 51898
51896: GO 52031
51898: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51899: LD_ADDR_VAR 0 5
51903: PUSH
51904: LD_VAR 0 1
51908: PUSH
51909: LD_VAR 0 2
51913: PUSH
51914: LD_INT 4
51916: MINUS
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: PUSH
51926: LD_VAR 0 1
51930: PUSH
51931: LD_INT 3
51933: MINUS
51934: PUSH
51935: LD_VAR 0 2
51939: PUSH
51940: LD_INT 3
51942: MINUS
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: PUSH
51952: LD_VAR 0 1
51956: PUSH
51957: LD_INT 4
51959: MINUS
51960: PUSH
51961: LD_VAR 0 2
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: PUSH
51974: LD_VAR 0 1
51978: PUSH
51979: LD_VAR 0 2
51983: PUSH
51984: LD_INT 3
51986: PLUS
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: PUSH
51996: LD_VAR 0 1
52000: PUSH
52001: LD_INT 4
52003: PLUS
52004: PUSH
52005: LD_VAR 0 2
52009: PUSH
52010: LD_INT 4
52012: PLUS
52013: PUSH
52014: LD_INT 5
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: ST_TO_ADDR
// end ; 2 :
52029: GO 52588
52031: LD_INT 2
52033: DOUBLE
52034: EQUAL
52035: IFTRUE 52039
52037: GO 52168
52039: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52040: LD_ADDR_VAR 0 5
52044: PUSH
52045: LD_VAR 0 1
52049: PUSH
52050: LD_VAR 0 2
52054: PUSH
52055: LD_INT 3
52057: MINUS
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: PUSH
52067: LD_VAR 0 1
52071: PUSH
52072: LD_INT 4
52074: PLUS
52075: PUSH
52076: LD_VAR 0 2
52080: PUSH
52081: LD_INT 4
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: PUSH
52089: LD_VAR 0 1
52093: PUSH
52094: LD_VAR 0 2
52098: PUSH
52099: LD_INT 4
52101: PLUS
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: LIST
52110: PUSH
52111: LD_VAR 0 1
52115: PUSH
52116: LD_INT 3
52118: MINUS
52119: PUSH
52120: LD_VAR 0 2
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: PUSH
52133: LD_VAR 0 1
52137: PUSH
52138: LD_INT 4
52140: MINUS
52141: PUSH
52142: LD_VAR 0 2
52146: PUSH
52147: LD_INT 4
52149: MINUS
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: ST_TO_ADDR
// end ; 3 :
52166: GO 52588
52168: LD_INT 3
52170: DOUBLE
52171: EQUAL
52172: IFTRUE 52176
52174: GO 52309
52176: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52177: LD_ADDR_VAR 0 5
52181: PUSH
52182: LD_VAR 0 1
52186: PUSH
52187: LD_INT 3
52189: PLUS
52190: PUSH
52191: LD_VAR 0 2
52195: PUSH
52196: LD_INT 4
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: PUSH
52204: LD_VAR 0 1
52208: PUSH
52209: LD_INT 4
52211: PLUS
52212: PUSH
52213: LD_VAR 0 2
52217: PUSH
52218: LD_INT 4
52220: PLUS
52221: PUSH
52222: LD_INT 5
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: LIST
52229: PUSH
52230: LD_VAR 0 1
52234: PUSH
52235: LD_INT 4
52237: MINUS
52238: PUSH
52239: LD_VAR 0 2
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: PUSH
52252: LD_VAR 0 1
52256: PUSH
52257: LD_VAR 0 2
52261: PUSH
52262: LD_INT 4
52264: MINUS
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: PUSH
52274: LD_VAR 0 1
52278: PUSH
52279: LD_INT 3
52281: MINUS
52282: PUSH
52283: LD_VAR 0 2
52287: PUSH
52288: LD_INT 3
52290: MINUS
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: LIST
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: ST_TO_ADDR
// end ; 4 :
52307: GO 52588
52309: LD_INT 4
52311: DOUBLE
52312: EQUAL
52313: IFTRUE 52317
52315: GO 52450
52317: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52318: LD_ADDR_VAR 0 5
52322: PUSH
52323: LD_VAR 0 1
52327: PUSH
52328: LD_VAR 0 2
52332: PUSH
52333: LD_INT 4
52335: PLUS
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: PUSH
52345: LD_VAR 0 1
52349: PUSH
52350: LD_INT 3
52352: PLUS
52353: PUSH
52354: LD_VAR 0 2
52358: PUSH
52359: LD_INT 3
52361: PLUS
52362: PUSH
52363: LD_INT 5
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: LIST
52370: PUSH
52371: LD_VAR 0 1
52375: PUSH
52376: LD_INT 4
52378: PLUS
52379: PUSH
52380: LD_VAR 0 2
52384: PUSH
52385: LD_INT 4
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: PUSH
52393: LD_VAR 0 1
52397: PUSH
52398: LD_VAR 0 2
52402: PUSH
52403: LD_INT 3
52405: MINUS
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: LIST
52414: PUSH
52415: LD_VAR 0 1
52419: PUSH
52420: LD_INT 4
52422: MINUS
52423: PUSH
52424: LD_VAR 0 2
52428: PUSH
52429: LD_INT 4
52431: MINUS
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: ST_TO_ADDR
// end ; 5 :
52448: GO 52588
52450: LD_INT 5
52452: DOUBLE
52453: EQUAL
52454: IFTRUE 52458
52456: GO 52587
52458: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52459: LD_ADDR_VAR 0 5
52463: PUSH
52464: LD_VAR 0 1
52468: PUSH
52469: LD_INT 4
52471: MINUS
52472: PUSH
52473: LD_VAR 0 2
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: LIST
52485: PUSH
52486: LD_VAR 0 1
52490: PUSH
52491: LD_VAR 0 2
52495: PUSH
52496: LD_INT 4
52498: MINUS
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: LIST
52507: PUSH
52508: LD_VAR 0 1
52512: PUSH
52513: LD_INT 4
52515: PLUS
52516: PUSH
52517: LD_VAR 0 2
52521: PUSH
52522: LD_INT 4
52524: PLUS
52525: PUSH
52526: LD_INT 5
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: PUSH
52534: LD_VAR 0 1
52538: PUSH
52539: LD_INT 3
52541: PLUS
52542: PUSH
52543: LD_VAR 0 2
52547: PUSH
52548: LD_INT 4
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: PUSH
52556: LD_VAR 0 1
52560: PUSH
52561: LD_VAR 0 2
52565: PUSH
52566: LD_INT 3
52568: PLUS
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// end ; end ;
52585: GO 52588
52587: POP
// result := list ;
52588: LD_ADDR_VAR 0 4
52592: PUSH
52593: LD_VAR 0 5
52597: ST_TO_ADDR
// end ;
52598: LD_VAR 0 4
52602: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52603: LD_INT 0
52605: PPUSH
52606: PPUSH
52607: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52608: LD_VAR 0 1
52612: NOT
52613: PUSH
52614: LD_VAR 0 2
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: LD_INT 4
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: IN
52637: NOT
52638: OR
52639: IFFALSE 52643
// exit ;
52641: GO 52735
// tmp := [ ] ;
52643: LD_ADDR_VAR 0 5
52647: PUSH
52648: EMPTY
52649: ST_TO_ADDR
// for i in units do
52650: LD_ADDR_VAR 0 4
52654: PUSH
52655: LD_VAR 0 1
52659: PUSH
52660: FOR_IN
52661: IFFALSE 52704
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52663: LD_ADDR_VAR 0 5
52667: PUSH
52668: LD_VAR 0 5
52672: PPUSH
52673: LD_VAR 0 5
52677: PUSH
52678: LD_INT 1
52680: PLUS
52681: PPUSH
52682: LD_VAR 0 4
52686: PPUSH
52687: LD_VAR 0 2
52691: PPUSH
52692: CALL_OW 259
52696: PPUSH
52697: CALL_OW 2
52701: ST_TO_ADDR
52702: GO 52660
52704: POP
52705: POP
// if not tmp then
52706: LD_VAR 0 5
52710: NOT
52711: IFFALSE 52715
// exit ;
52713: GO 52735
// result := SortListByListDesc ( units , tmp ) ;
52715: LD_ADDR_VAR 0 3
52719: PUSH
52720: LD_VAR 0 1
52724: PPUSH
52725: LD_VAR 0 5
52729: PPUSH
52730: CALL_OW 77
52734: ST_TO_ADDR
// end ;
52735: LD_VAR 0 3
52739: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52740: LD_INT 0
52742: PPUSH
52743: PPUSH
52744: PPUSH
// result := false ;
52745: LD_ADDR_VAR 0 3
52749: PUSH
52750: LD_INT 0
52752: ST_TO_ADDR
// x := GetX ( building ) ;
52753: LD_ADDR_VAR 0 4
52757: PUSH
52758: LD_VAR 0 2
52762: PPUSH
52763: CALL_OW 250
52767: ST_TO_ADDR
// y := GetY ( building ) ;
52768: LD_ADDR_VAR 0 5
52772: PUSH
52773: LD_VAR 0 2
52777: PPUSH
52778: CALL_OW 251
52782: ST_TO_ADDR
// if not building or not x or not y then
52783: LD_VAR 0 2
52787: NOT
52788: PUSH
52789: LD_VAR 0 4
52793: NOT
52794: OR
52795: PUSH
52796: LD_VAR 0 5
52800: NOT
52801: OR
52802: IFFALSE 52806
// exit ;
52804: GO 52898
// if GetTaskList ( unit ) then
52806: LD_VAR 0 1
52810: PPUSH
52811: CALL_OW 437
52815: IFFALSE 52898
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52817: LD_STRING e
52819: PUSH
52820: LD_VAR 0 1
52824: PPUSH
52825: CALL_OW 437
52829: PUSH
52830: LD_INT 1
52832: ARRAY
52833: PUSH
52834: LD_INT 1
52836: ARRAY
52837: EQUAL
52838: PUSH
52839: LD_VAR 0 4
52843: PUSH
52844: LD_VAR 0 1
52848: PPUSH
52849: CALL_OW 437
52853: PUSH
52854: LD_INT 1
52856: ARRAY
52857: PUSH
52858: LD_INT 2
52860: ARRAY
52861: EQUAL
52862: AND
52863: PUSH
52864: LD_VAR 0 5
52868: PUSH
52869: LD_VAR 0 1
52873: PPUSH
52874: CALL_OW 437
52878: PUSH
52879: LD_INT 1
52881: ARRAY
52882: PUSH
52883: LD_INT 3
52885: ARRAY
52886: EQUAL
52887: AND
52888: IFFALSE 52898
// result := true end ;
52890: LD_ADDR_VAR 0 3
52894: PUSH
52895: LD_INT 1
52897: ST_TO_ADDR
// end ;
52898: LD_VAR 0 3
52902: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52903: LD_INT 0
52905: PPUSH
// result := false ;
52906: LD_ADDR_VAR 0 4
52910: PUSH
52911: LD_INT 0
52913: ST_TO_ADDR
// if GetTaskList ( unit ) then
52914: LD_VAR 0 1
52918: PPUSH
52919: CALL_OW 437
52923: IFFALSE 53006
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52925: LD_STRING M
52927: PUSH
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL_OW 437
52937: PUSH
52938: LD_INT 1
52940: ARRAY
52941: PUSH
52942: LD_INT 1
52944: ARRAY
52945: EQUAL
52946: PUSH
52947: LD_VAR 0 2
52951: PUSH
52952: LD_VAR 0 1
52956: PPUSH
52957: CALL_OW 437
52961: PUSH
52962: LD_INT 1
52964: ARRAY
52965: PUSH
52966: LD_INT 2
52968: ARRAY
52969: EQUAL
52970: AND
52971: PUSH
52972: LD_VAR 0 3
52976: PUSH
52977: LD_VAR 0 1
52981: PPUSH
52982: CALL_OW 437
52986: PUSH
52987: LD_INT 1
52989: ARRAY
52990: PUSH
52991: LD_INT 3
52993: ARRAY
52994: EQUAL
52995: AND
52996: IFFALSE 53006
// result := true ;
52998: LD_ADDR_VAR 0 4
53002: PUSH
53003: LD_INT 1
53005: ST_TO_ADDR
// end ; end ;
53006: LD_VAR 0 4
53010: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53011: LD_INT 0
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
// if not unit or not area then
53017: LD_VAR 0 1
53021: NOT
53022: PUSH
53023: LD_VAR 0 2
53027: NOT
53028: OR
53029: IFFALSE 53033
// exit ;
53031: GO 53197
// tmp := AreaToList ( area , i ) ;
53033: LD_ADDR_VAR 0 6
53037: PUSH
53038: LD_VAR 0 2
53042: PPUSH
53043: LD_VAR 0 5
53047: PPUSH
53048: CALL_OW 517
53052: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53053: LD_ADDR_VAR 0 5
53057: PUSH
53058: DOUBLE
53059: LD_INT 1
53061: DEC
53062: ST_TO_ADDR
53063: LD_VAR 0 6
53067: PUSH
53068: LD_INT 1
53070: ARRAY
53071: PUSH
53072: FOR_TO
53073: IFFALSE 53195
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53075: LD_ADDR_VAR 0 7
53079: PUSH
53080: LD_VAR 0 6
53084: PUSH
53085: LD_INT 1
53087: ARRAY
53088: PUSH
53089: LD_VAR 0 5
53093: ARRAY
53094: PUSH
53095: LD_VAR 0 6
53099: PUSH
53100: LD_INT 2
53102: ARRAY
53103: PUSH
53104: LD_VAR 0 5
53108: ARRAY
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
53114: LD_VAR 0 7
53118: PUSH
53119: LD_INT 1
53121: ARRAY
53122: PPUSH
53123: LD_VAR 0 7
53127: PUSH
53128: LD_INT 2
53130: ARRAY
53131: PPUSH
53132: CALL_OW 428
53136: PUSH
53137: LD_INT 0
53139: EQUAL
53140: IFFALSE 53193
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53142: LD_VAR 0 1
53146: PPUSH
53147: LD_VAR 0 7
53151: PUSH
53152: LD_INT 1
53154: ARRAY
53155: PPUSH
53156: LD_VAR 0 7
53160: PUSH
53161: LD_INT 2
53163: ARRAY
53164: PPUSH
53165: LD_VAR 0 3
53169: PPUSH
53170: CALL_OW 48
// result := IsPlaced ( unit ) ;
53174: LD_ADDR_VAR 0 4
53178: PUSH
53179: LD_VAR 0 1
53183: PPUSH
53184: CALL_OW 305
53188: ST_TO_ADDR
// exit ;
53189: POP
53190: POP
53191: GO 53197
// end ; end ;
53193: GO 53072
53195: POP
53196: POP
// end ;
53197: LD_VAR 0 4
53201: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53202: LD_INT 0
53204: PPUSH
53205: PPUSH
53206: PPUSH
// if not side or side > 8 then
53207: LD_VAR 0 1
53211: NOT
53212: PUSH
53213: LD_VAR 0 1
53217: PUSH
53218: LD_INT 8
53220: GREATER
53221: OR
53222: IFFALSE 53226
// exit ;
53224: GO 53413
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53226: LD_ADDR_VAR 0 4
53230: PUSH
53231: LD_INT 22
53233: PUSH
53234: LD_VAR 0 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 21
53245: PUSH
53246: LD_INT 3
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PPUSH
53257: CALL_OW 69
53261: ST_TO_ADDR
// if not tmp then
53262: LD_VAR 0 4
53266: NOT
53267: IFFALSE 53271
// exit ;
53269: GO 53413
// enable_addtolog := true ;
53271: LD_ADDR_OWVAR 81
53275: PUSH
53276: LD_INT 1
53278: ST_TO_ADDR
// AddToLog ( [ ) ;
53279: LD_STRING [
53281: PPUSH
53282: CALL_OW 561
// for i in tmp do
53286: LD_ADDR_VAR 0 3
53290: PUSH
53291: LD_VAR 0 4
53295: PUSH
53296: FOR_IN
53297: IFFALSE 53404
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53299: LD_STRING [
53301: PUSH
53302: LD_VAR 0 3
53306: PPUSH
53307: CALL_OW 266
53311: STR
53312: PUSH
53313: LD_STRING , 
53315: STR
53316: PUSH
53317: LD_VAR 0 3
53321: PPUSH
53322: CALL_OW 250
53326: STR
53327: PUSH
53328: LD_STRING , 
53330: STR
53331: PUSH
53332: LD_VAR 0 3
53336: PPUSH
53337: CALL_OW 251
53341: STR
53342: PUSH
53343: LD_STRING , 
53345: STR
53346: PUSH
53347: LD_VAR 0 3
53351: PPUSH
53352: CALL_OW 254
53356: STR
53357: PUSH
53358: LD_STRING , 
53360: STR
53361: PUSH
53362: LD_VAR 0 3
53366: PPUSH
53367: LD_INT 1
53369: PPUSH
53370: CALL_OW 268
53374: STR
53375: PUSH
53376: LD_STRING , 
53378: STR
53379: PUSH
53380: LD_VAR 0 3
53384: PPUSH
53385: LD_INT 2
53387: PPUSH
53388: CALL_OW 268
53392: STR
53393: PUSH
53394: LD_STRING ],
53396: STR
53397: PPUSH
53398: CALL_OW 561
// end ;
53402: GO 53296
53404: POP
53405: POP
// AddToLog ( ]; ) ;
53406: LD_STRING ];
53408: PPUSH
53409: CALL_OW 561
// end ;
53413: LD_VAR 0 2
53417: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53418: LD_INT 0
53420: PPUSH
53421: PPUSH
53422: PPUSH
53423: PPUSH
53424: PPUSH
// if not area or not rate or not max then
53425: LD_VAR 0 1
53429: NOT
53430: PUSH
53431: LD_VAR 0 2
53435: NOT
53436: OR
53437: PUSH
53438: LD_VAR 0 4
53442: NOT
53443: OR
53444: IFFALSE 53448
// exit ;
53446: GO 53640
// while 1 do
53448: LD_INT 1
53450: IFFALSE 53640
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53452: LD_ADDR_VAR 0 9
53456: PUSH
53457: LD_VAR 0 1
53461: PPUSH
53462: LD_INT 1
53464: PPUSH
53465: CALL_OW 287
53469: PUSH
53470: LD_INT 10
53472: MUL
53473: ST_TO_ADDR
// r := rate / 10 ;
53474: LD_ADDR_VAR 0 7
53478: PUSH
53479: LD_VAR 0 2
53483: PUSH
53484: LD_INT 10
53486: DIVREAL
53487: ST_TO_ADDR
// time := 1 1$00 ;
53488: LD_ADDR_VAR 0 8
53492: PUSH
53493: LD_INT 2100
53495: ST_TO_ADDR
// if amount < min then
53496: LD_VAR 0 9
53500: PUSH
53501: LD_VAR 0 3
53505: LESS
53506: IFFALSE 53524
// r := r * 2 else
53508: LD_ADDR_VAR 0 7
53512: PUSH
53513: LD_VAR 0 7
53517: PUSH
53518: LD_INT 2
53520: MUL
53521: ST_TO_ADDR
53522: GO 53550
// if amount > max then
53524: LD_VAR 0 9
53528: PUSH
53529: LD_VAR 0 4
53533: GREATER
53534: IFFALSE 53550
// r := r / 2 ;
53536: LD_ADDR_VAR 0 7
53540: PUSH
53541: LD_VAR 0 7
53545: PUSH
53546: LD_INT 2
53548: DIVREAL
53549: ST_TO_ADDR
// time := time / r ;
53550: LD_ADDR_VAR 0 8
53554: PUSH
53555: LD_VAR 0 8
53559: PUSH
53560: LD_VAR 0 7
53564: DIVREAL
53565: ST_TO_ADDR
// if time < 0 then
53566: LD_VAR 0 8
53570: PUSH
53571: LD_INT 0
53573: LESS
53574: IFFALSE 53591
// time := time * - 1 ;
53576: LD_ADDR_VAR 0 8
53580: PUSH
53581: LD_VAR 0 8
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: MUL
53590: ST_TO_ADDR
// wait ( time ) ;
53591: LD_VAR 0 8
53595: PPUSH
53596: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53600: LD_INT 35
53602: PPUSH
53603: LD_INT 875
53605: PPUSH
53606: CALL_OW 12
53610: PPUSH
53611: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53615: LD_INT 1
53617: PPUSH
53618: LD_INT 5
53620: PPUSH
53621: CALL_OW 12
53625: PPUSH
53626: LD_VAR 0 1
53630: PPUSH
53631: LD_INT 1
53633: PPUSH
53634: CALL_OW 55
// end ;
53638: GO 53448
// end ;
53640: LD_VAR 0 5
53644: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53645: LD_INT 0
53647: PPUSH
53648: PPUSH
53649: PPUSH
53650: PPUSH
53651: PPUSH
53652: PPUSH
53653: PPUSH
53654: PPUSH
// if not turrets or not factories then
53655: LD_VAR 0 1
53659: NOT
53660: PUSH
53661: LD_VAR 0 2
53665: NOT
53666: OR
53667: IFFALSE 53671
// exit ;
53669: GO 53978
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53671: LD_ADDR_VAR 0 10
53675: PUSH
53676: LD_INT 5
53678: PUSH
53679: LD_INT 6
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 4
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: PUSH
53699: LD_INT 5
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 24
53713: PUSH
53714: LD_INT 25
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 23
53723: PUSH
53724: LD_INT 27
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 42
53737: PUSH
53738: LD_INT 43
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 44
53747: PUSH
53748: LD_INT 46
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 45
53757: PUSH
53758: LD_INT 47
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: ST_TO_ADDR
// result := [ ] ;
53775: LD_ADDR_VAR 0 3
53779: PUSH
53780: EMPTY
53781: ST_TO_ADDR
// for i in turrets do
53782: LD_ADDR_VAR 0 4
53786: PUSH
53787: LD_VAR 0 1
53791: PUSH
53792: FOR_IN
53793: IFFALSE 53976
// begin nat := GetNation ( i ) ;
53795: LD_ADDR_VAR 0 7
53799: PUSH
53800: LD_VAR 0 4
53804: PPUSH
53805: CALL_OW 248
53809: ST_TO_ADDR
// weapon := 0 ;
53810: LD_ADDR_VAR 0 8
53814: PUSH
53815: LD_INT 0
53817: ST_TO_ADDR
// if not nat then
53818: LD_VAR 0 7
53822: NOT
53823: IFFALSE 53827
// continue ;
53825: GO 53792
// for j in list [ nat ] do
53827: LD_ADDR_VAR 0 5
53831: PUSH
53832: LD_VAR 0 10
53836: PUSH
53837: LD_VAR 0 7
53841: ARRAY
53842: PUSH
53843: FOR_IN
53844: IFFALSE 53885
// if GetBWeapon ( i ) = j [ 1 ] then
53846: LD_VAR 0 4
53850: PPUSH
53851: CALL_OW 269
53855: PUSH
53856: LD_VAR 0 5
53860: PUSH
53861: LD_INT 1
53863: ARRAY
53864: EQUAL
53865: IFFALSE 53883
// begin weapon := j [ 2 ] ;
53867: LD_ADDR_VAR 0 8
53871: PUSH
53872: LD_VAR 0 5
53876: PUSH
53877: LD_INT 2
53879: ARRAY
53880: ST_TO_ADDR
// break ;
53881: GO 53885
// end ;
53883: GO 53843
53885: POP
53886: POP
// if not weapon then
53887: LD_VAR 0 8
53891: NOT
53892: IFFALSE 53896
// continue ;
53894: GO 53792
// for k in factories do
53896: LD_ADDR_VAR 0 6
53900: PUSH
53901: LD_VAR 0 2
53905: PUSH
53906: FOR_IN
53907: IFFALSE 53972
// begin weapons := AvailableWeaponList ( k ) ;
53909: LD_ADDR_VAR 0 9
53913: PUSH
53914: LD_VAR 0 6
53918: PPUSH
53919: CALL_OW 478
53923: ST_TO_ADDR
// if not weapons then
53924: LD_VAR 0 9
53928: NOT
53929: IFFALSE 53933
// continue ;
53931: GO 53906
// if weapon in weapons then
53933: LD_VAR 0 8
53937: PUSH
53938: LD_VAR 0 9
53942: IN
53943: IFFALSE 53970
// begin result := [ i , weapon ] ;
53945: LD_ADDR_VAR 0 3
53949: PUSH
53950: LD_VAR 0 4
53954: PUSH
53955: LD_VAR 0 8
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: ST_TO_ADDR
// exit ;
53964: POP
53965: POP
53966: POP
53967: POP
53968: GO 53978
// end ; end ;
53970: GO 53906
53972: POP
53973: POP
// end ;
53974: GO 53792
53976: POP
53977: POP
// end ;
53978: LD_VAR 0 3
53982: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53983: LD_INT 0
53985: PPUSH
// if not side or side > 8 then
53986: LD_VAR 0 3
53990: NOT
53991: PUSH
53992: LD_VAR 0 3
53996: PUSH
53997: LD_INT 8
53999: GREATER
54000: OR
54001: IFFALSE 54005
// exit ;
54003: GO 54064
// if not range then
54005: LD_VAR 0 4
54009: NOT
54010: IFFALSE 54021
// range := - 12 ;
54012: LD_ADDR_VAR 0 4
54016: PUSH
54017: LD_INT 12
54019: NEG
54020: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54021: LD_VAR 0 1
54025: PPUSH
54026: LD_VAR 0 2
54030: PPUSH
54031: LD_VAR 0 3
54035: PPUSH
54036: LD_VAR 0 4
54040: PPUSH
54041: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54045: LD_VAR 0 1
54049: PPUSH
54050: LD_VAR 0 2
54054: PPUSH
54055: LD_VAR 0 3
54059: PPUSH
54060: CALL_OW 331
// end ;
54064: LD_VAR 0 5
54068: RET
// export function Video ( mode ) ; begin
54069: LD_INT 0
54071: PPUSH
// ingame_video = mode ;
54072: LD_ADDR_OWVAR 52
54076: PUSH
54077: LD_VAR 0 1
54081: ST_TO_ADDR
// interface_hidden = mode ;
54082: LD_ADDR_OWVAR 54
54086: PUSH
54087: LD_VAR 0 1
54091: ST_TO_ADDR
// end ;
54092: LD_VAR 0 2
54096: RET
// export function Join ( array , element ) ; begin
54097: LD_INT 0
54099: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54100: LD_ADDR_VAR 0 3
54104: PUSH
54105: LD_VAR 0 1
54109: PPUSH
54110: LD_VAR 0 1
54114: PUSH
54115: LD_INT 1
54117: PLUS
54118: PPUSH
54119: LD_VAR 0 2
54123: PPUSH
54124: CALL_OW 1
54128: ST_TO_ADDR
// end ;
54129: LD_VAR 0 3
54133: RET
// export function JoinUnion ( array , element ) ; begin
54134: LD_INT 0
54136: PPUSH
// result := array union element ;
54137: LD_ADDR_VAR 0 3
54141: PUSH
54142: LD_VAR 0 1
54146: PUSH
54147: LD_VAR 0 2
54151: UNION
54152: ST_TO_ADDR
// end ;
54153: LD_VAR 0 3
54157: RET
// export function GetBehemoths ( side ) ; begin
54158: LD_INT 0
54160: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
54161: LD_ADDR_VAR 0 2
54165: PUSH
54166: LD_INT 22
54168: PUSH
54169: LD_VAR 0 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 31
54180: PUSH
54181: LD_INT 25
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PPUSH
54192: CALL_OW 69
54196: ST_TO_ADDR
// end ;
54197: LD_VAR 0 2
54201: RET
// export function Shuffle ( array ) ; var i , index ; begin
54202: LD_INT 0
54204: PPUSH
54205: PPUSH
54206: PPUSH
// result := [ ] ;
54207: LD_ADDR_VAR 0 2
54211: PUSH
54212: EMPTY
54213: ST_TO_ADDR
// if not array then
54214: LD_VAR 0 1
54218: NOT
54219: IFFALSE 54223
// exit ;
54221: GO 54322
// Randomize ;
54223: CALL_OW 10
// for i = array downto 1 do
54227: LD_ADDR_VAR 0 3
54231: PUSH
54232: DOUBLE
54233: LD_VAR 0 1
54237: INC
54238: ST_TO_ADDR
54239: LD_INT 1
54241: PUSH
54242: FOR_DOWNTO
54243: IFFALSE 54320
// begin index := rand ( 1 , array ) ;
54245: LD_ADDR_VAR 0 4
54249: PUSH
54250: LD_INT 1
54252: PPUSH
54253: LD_VAR 0 1
54257: PPUSH
54258: CALL_OW 12
54262: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54263: LD_ADDR_VAR 0 2
54267: PUSH
54268: LD_VAR 0 2
54272: PPUSH
54273: LD_VAR 0 2
54277: PUSH
54278: LD_INT 1
54280: PLUS
54281: PPUSH
54282: LD_VAR 0 1
54286: PUSH
54287: LD_VAR 0 4
54291: ARRAY
54292: PPUSH
54293: CALL_OW 2
54297: ST_TO_ADDR
// array := Delete ( array , index ) ;
54298: LD_ADDR_VAR 0 1
54302: PUSH
54303: LD_VAR 0 1
54307: PPUSH
54308: LD_VAR 0 4
54312: PPUSH
54313: CALL_OW 3
54317: ST_TO_ADDR
// end ;
54318: GO 54242
54320: POP
54321: POP
// end ;
54322: LD_VAR 0 2
54326: RET
// export function GetBaseMaterials ( base ) ; begin
54327: LD_INT 0
54329: PPUSH
// result := [ 0 , 0 , 0 ] ;
54330: LD_ADDR_VAR 0 2
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// if not base then
54349: LD_VAR 0 1
54353: NOT
54354: IFFALSE 54358
// exit ;
54356: GO 54407
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54358: LD_ADDR_VAR 0 2
54362: PUSH
54363: LD_VAR 0 1
54367: PPUSH
54368: LD_INT 1
54370: PPUSH
54371: CALL_OW 275
54375: PUSH
54376: LD_VAR 0 1
54380: PPUSH
54381: LD_INT 2
54383: PPUSH
54384: CALL_OW 275
54388: PUSH
54389: LD_VAR 0 1
54393: PPUSH
54394: LD_INT 3
54396: PPUSH
54397: CALL_OW 275
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// end ;
54407: LD_VAR 0 2
54411: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54412: LD_INT 0
54414: PPUSH
54415: PPUSH
// result := array ;
54416: LD_ADDR_VAR 0 3
54420: PUSH
54421: LD_VAR 0 1
54425: ST_TO_ADDR
// if size > 0 then
54426: LD_VAR 0 2
54430: PUSH
54431: LD_INT 0
54433: GREATER
54434: IFFALSE 54480
// for i := array downto size do
54436: LD_ADDR_VAR 0 4
54440: PUSH
54441: DOUBLE
54442: LD_VAR 0 1
54446: INC
54447: ST_TO_ADDR
54448: LD_VAR 0 2
54452: PUSH
54453: FOR_DOWNTO
54454: IFFALSE 54478
// result := Delete ( result , result ) ;
54456: LD_ADDR_VAR 0 3
54460: PUSH
54461: LD_VAR 0 3
54465: PPUSH
54466: LD_VAR 0 3
54470: PPUSH
54471: CALL_OW 3
54475: ST_TO_ADDR
54476: GO 54453
54478: POP
54479: POP
// end ;
54480: LD_VAR 0 3
54484: RET
// export function ComExit ( unit ) ; var tmp ; begin
54485: LD_INT 0
54487: PPUSH
54488: PPUSH
// if not IsInUnit ( unit ) then
54489: LD_VAR 0 1
54493: PPUSH
54494: CALL_OW 310
54498: NOT
54499: IFFALSE 54503
// exit ;
54501: GO 54563
// tmp := IsInUnit ( unit ) ;
54503: LD_ADDR_VAR 0 3
54507: PUSH
54508: LD_VAR 0 1
54512: PPUSH
54513: CALL_OW 310
54517: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54518: LD_VAR 0 3
54522: PPUSH
54523: CALL_OW 247
54527: PUSH
54528: LD_INT 2
54530: EQUAL
54531: IFFALSE 54544
// ComExitVehicle ( unit ) else
54533: LD_VAR 0 1
54537: PPUSH
54538: CALL_OW 121
54542: GO 54553
// ComExitBuilding ( unit ) ;
54544: LD_VAR 0 1
54548: PPUSH
54549: CALL_OW 122
// result := tmp ;
54553: LD_ADDR_VAR 0 2
54557: PUSH
54558: LD_VAR 0 3
54562: ST_TO_ADDR
// end ;
54563: LD_VAR 0 2
54567: RET
// export function ComExitAll ( units ) ; var i ; begin
54568: LD_INT 0
54570: PPUSH
54571: PPUSH
// if not units then
54572: LD_VAR 0 1
54576: NOT
54577: IFFALSE 54581
// exit ;
54579: GO 54607
// for i in units do
54581: LD_ADDR_VAR 0 3
54585: PUSH
54586: LD_VAR 0 1
54590: PUSH
54591: FOR_IN
54592: IFFALSE 54605
// ComExit ( i ) ;
54594: LD_VAR 0 3
54598: PPUSH
54599: CALL 54485 0 1
54603: GO 54591
54605: POP
54606: POP
// end ;
54607: LD_VAR 0 2
54611: RET
// export function ResetHc ; begin
54612: LD_INT 0
54614: PPUSH
// InitHc ;
54615: CALL_OW 19
// hc_importance := 0 ;
54619: LD_ADDR_OWVAR 32
54623: PUSH
54624: LD_INT 0
54626: ST_TO_ADDR
// end ;
54627: LD_VAR 0 1
54631: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54632: LD_INT 0
54634: PPUSH
54635: PPUSH
54636: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54637: LD_ADDR_VAR 0 6
54641: PUSH
54642: LD_VAR 0 1
54646: PUSH
54647: LD_VAR 0 3
54651: PLUS
54652: PUSH
54653: LD_INT 2
54655: DIV
54656: ST_TO_ADDR
// if _x < 0 then
54657: LD_VAR 0 6
54661: PUSH
54662: LD_INT 0
54664: LESS
54665: IFFALSE 54682
// _x := _x * - 1 ;
54667: LD_ADDR_VAR 0 6
54671: PUSH
54672: LD_VAR 0 6
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: MUL
54681: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54682: LD_ADDR_VAR 0 7
54686: PUSH
54687: LD_VAR 0 2
54691: PUSH
54692: LD_VAR 0 4
54696: PLUS
54697: PUSH
54698: LD_INT 2
54700: DIV
54701: ST_TO_ADDR
// if _y < 0 then
54702: LD_VAR 0 7
54706: PUSH
54707: LD_INT 0
54709: LESS
54710: IFFALSE 54727
// _y := _y * - 1 ;
54712: LD_ADDR_VAR 0 7
54716: PUSH
54717: LD_VAR 0 7
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: MUL
54726: ST_TO_ADDR
// result := [ _x , _y ] ;
54727: LD_ADDR_VAR 0 5
54731: PUSH
54732: LD_VAR 0 6
54736: PUSH
54737: LD_VAR 0 7
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// end ;
54746: LD_VAR 0 5
54750: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54751: LD_INT 0
54753: PPUSH
54754: PPUSH
54755: PPUSH
54756: PPUSH
// task := GetTaskList ( unit ) ;
54757: LD_ADDR_VAR 0 7
54761: PUSH
54762: LD_VAR 0 1
54766: PPUSH
54767: CALL_OW 437
54771: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54772: LD_VAR 0 7
54776: NOT
54777: PUSH
54778: LD_VAR 0 1
54782: PPUSH
54783: LD_VAR 0 2
54787: PPUSH
54788: CALL_OW 308
54792: NOT
54793: AND
54794: IFFALSE 54798
// exit ;
54796: GO 54916
// if IsInArea ( unit , area ) then
54798: LD_VAR 0 1
54802: PPUSH
54803: LD_VAR 0 2
54807: PPUSH
54808: CALL_OW 308
54812: IFFALSE 54830
// begin ComMoveToArea ( unit , goAway ) ;
54814: LD_VAR 0 1
54818: PPUSH
54819: LD_VAR 0 3
54823: PPUSH
54824: CALL_OW 113
// exit ;
54828: GO 54916
// end ; if task [ 1 ] [ 1 ] <> M then
54830: LD_VAR 0 7
54834: PUSH
54835: LD_INT 1
54837: ARRAY
54838: PUSH
54839: LD_INT 1
54841: ARRAY
54842: PUSH
54843: LD_STRING M
54845: NONEQUAL
54846: IFFALSE 54850
// exit ;
54848: GO 54916
// x := task [ 1 ] [ 2 ] ;
54850: LD_ADDR_VAR 0 5
54854: PUSH
54855: LD_VAR 0 7
54859: PUSH
54860: LD_INT 1
54862: ARRAY
54863: PUSH
54864: LD_INT 2
54866: ARRAY
54867: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54868: LD_ADDR_VAR 0 6
54872: PUSH
54873: LD_VAR 0 7
54877: PUSH
54878: LD_INT 1
54880: ARRAY
54881: PUSH
54882: LD_INT 3
54884: ARRAY
54885: ST_TO_ADDR
// if InArea ( x , y , area ) then
54886: LD_VAR 0 5
54890: PPUSH
54891: LD_VAR 0 6
54895: PPUSH
54896: LD_VAR 0 2
54900: PPUSH
54901: CALL_OW 309
54905: IFFALSE 54916
// ComStop ( unit ) ;
54907: LD_VAR 0 1
54911: PPUSH
54912: CALL_OW 141
// end ;
54916: LD_VAR 0 4
54920: RET
// export function Abs ( value ) ; begin
54921: LD_INT 0
54923: PPUSH
// result := value ;
54924: LD_ADDR_VAR 0 2
54928: PUSH
54929: LD_VAR 0 1
54933: ST_TO_ADDR
// if value < 0 then
54934: LD_VAR 0 1
54938: PUSH
54939: LD_INT 0
54941: LESS
54942: IFFALSE 54959
// result := value * - 1 ;
54944: LD_ADDR_VAR 0 2
54948: PUSH
54949: LD_VAR 0 1
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: MUL
54958: ST_TO_ADDR
// end ;
54959: LD_VAR 0 2
54963: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54964: LD_INT 0
54966: PPUSH
54967: PPUSH
54968: PPUSH
54969: PPUSH
54970: PPUSH
54971: PPUSH
54972: PPUSH
54973: PPUSH
// if not unit or not building then
54974: LD_VAR 0 1
54978: NOT
54979: PUSH
54980: LD_VAR 0 2
54984: NOT
54985: OR
54986: IFFALSE 54990
// exit ;
54988: GO 55216
// x := GetX ( building ) ;
54990: LD_ADDR_VAR 0 4
54994: PUSH
54995: LD_VAR 0 2
54999: PPUSH
55000: CALL_OW 250
55004: ST_TO_ADDR
// y := GetY ( building ) ;
55005: LD_ADDR_VAR 0 6
55009: PUSH
55010: LD_VAR 0 2
55014: PPUSH
55015: CALL_OW 251
55019: ST_TO_ADDR
// d := GetDir ( building ) ;
55020: LD_ADDR_VAR 0 8
55024: PUSH
55025: LD_VAR 0 2
55029: PPUSH
55030: CALL_OW 254
55034: ST_TO_ADDR
// r := 4 ;
55035: LD_ADDR_VAR 0 9
55039: PUSH
55040: LD_INT 4
55042: ST_TO_ADDR
// for i := 1 to 5 do
55043: LD_ADDR_VAR 0 10
55047: PUSH
55048: DOUBLE
55049: LD_INT 1
55051: DEC
55052: ST_TO_ADDR
55053: LD_INT 5
55055: PUSH
55056: FOR_TO
55057: IFFALSE 55214
// begin _x := ShiftX ( x , d , r + i ) ;
55059: LD_ADDR_VAR 0 5
55063: PUSH
55064: LD_VAR 0 4
55068: PPUSH
55069: LD_VAR 0 8
55073: PPUSH
55074: LD_VAR 0 9
55078: PUSH
55079: LD_VAR 0 10
55083: PLUS
55084: PPUSH
55085: CALL_OW 272
55089: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55090: LD_ADDR_VAR 0 7
55094: PUSH
55095: LD_VAR 0 6
55099: PPUSH
55100: LD_VAR 0 8
55104: PPUSH
55105: LD_VAR 0 9
55109: PUSH
55110: LD_VAR 0 10
55114: PLUS
55115: PPUSH
55116: CALL_OW 273
55120: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55121: LD_VAR 0 5
55125: PPUSH
55126: LD_VAR 0 7
55130: PPUSH
55131: CALL_OW 488
55135: PUSH
55136: LD_VAR 0 5
55140: PPUSH
55141: LD_VAR 0 7
55145: PPUSH
55146: CALL_OW 428
55150: PPUSH
55151: CALL_OW 247
55155: PUSH
55156: LD_INT 3
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: IN
55166: NOT
55167: AND
55168: IFFALSE 55212
// begin ComMoveXY ( unit , _x , _y ) ;
55170: LD_VAR 0 1
55174: PPUSH
55175: LD_VAR 0 5
55179: PPUSH
55180: LD_VAR 0 7
55184: PPUSH
55185: CALL_OW 111
// result := [ _x , _y ] ;
55189: LD_ADDR_VAR 0 3
55193: PUSH
55194: LD_VAR 0 5
55198: PUSH
55199: LD_VAR 0 7
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// exit ;
55208: POP
55209: POP
55210: GO 55216
// end ; end ;
55212: GO 55056
55214: POP
55215: POP
// end ;
55216: LD_VAR 0 3
55220: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55221: LD_INT 0
55223: PPUSH
55224: PPUSH
55225: PPUSH
// result := 0 ;
55226: LD_ADDR_VAR 0 3
55230: PUSH
55231: LD_INT 0
55233: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55234: LD_VAR 0 1
55238: PUSH
55239: LD_INT 0
55241: LESS
55242: PUSH
55243: LD_VAR 0 1
55247: PUSH
55248: LD_INT 8
55250: GREATER
55251: OR
55252: PUSH
55253: LD_VAR 0 2
55257: PUSH
55258: LD_INT 0
55260: LESS
55261: OR
55262: PUSH
55263: LD_VAR 0 2
55267: PUSH
55268: LD_INT 8
55270: GREATER
55271: OR
55272: IFFALSE 55276
// exit ;
55274: GO 55351
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55276: LD_ADDR_VAR 0 4
55280: PUSH
55281: LD_INT 22
55283: PUSH
55284: LD_VAR 0 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PPUSH
55293: CALL_OW 69
55297: PUSH
55298: FOR_IN
55299: IFFALSE 55349
// begin un := UnitShoot ( i ) ;
55301: LD_ADDR_VAR 0 5
55305: PUSH
55306: LD_VAR 0 4
55310: PPUSH
55311: CALL_OW 504
55315: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55316: LD_VAR 0 5
55320: PPUSH
55321: CALL_OW 255
55325: PUSH
55326: LD_VAR 0 1
55330: EQUAL
55331: IFFALSE 55347
// begin result := un ;
55333: LD_ADDR_VAR 0 3
55337: PUSH
55338: LD_VAR 0 5
55342: ST_TO_ADDR
// exit ;
55343: POP
55344: POP
55345: GO 55351
// end ; end ;
55347: GO 55298
55349: POP
55350: POP
// end ;
55351: LD_VAR 0 3
55355: RET
// export function GetCargoBay ( units ) ; begin
55356: LD_INT 0
55358: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55359: LD_ADDR_VAR 0 2
55363: PUSH
55364: LD_VAR 0 1
55368: PPUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 34
55374: PUSH
55375: LD_INT 12
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 34
55384: PUSH
55385: LD_INT 51
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 34
55394: PUSH
55395: LD_INT 32
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 34
55404: PUSH
55405: LD_EXP 14
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: PPUSH
55421: CALL_OW 72
55425: ST_TO_ADDR
// end ;
55426: LD_VAR 0 2
55430: RET
// export function Negate ( value ) ; begin
55431: LD_INT 0
55433: PPUSH
// result := not value ;
55434: LD_ADDR_VAR 0 2
55438: PUSH
55439: LD_VAR 0 1
55443: NOT
55444: ST_TO_ADDR
// end ;
55445: LD_VAR 0 2
55449: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
55450: LD_INT 0
55452: PPUSH
// if x1 = x2 then
55453: LD_VAR 0 1
55457: PUSH
55458: LD_VAR 0 3
55462: EQUAL
55463: IFFALSE 55497
// begin if y1 > y2 then
55465: LD_VAR 0 2
55469: PUSH
55470: LD_VAR 0 4
55474: GREATER
55475: IFFALSE 55487
// result := 0 else
55477: LD_ADDR_VAR 0 5
55481: PUSH
55482: LD_INT 0
55484: ST_TO_ADDR
55485: GO 55495
// result := 3 ;
55487: LD_ADDR_VAR 0 5
55491: PUSH
55492: LD_INT 3
55494: ST_TO_ADDR
// exit ;
55495: GO 55583
// end ; if y1 = y2 then
55497: LD_VAR 0 2
55501: PUSH
55502: LD_VAR 0 4
55506: EQUAL
55507: IFFALSE 55541
// begin if x1 > x2 then
55509: LD_VAR 0 1
55513: PUSH
55514: LD_VAR 0 3
55518: GREATER
55519: IFFALSE 55531
// result := 1 else
55521: LD_ADDR_VAR 0 5
55525: PUSH
55526: LD_INT 1
55528: ST_TO_ADDR
55529: GO 55539
// result := 4 ;
55531: LD_ADDR_VAR 0 5
55535: PUSH
55536: LD_INT 4
55538: ST_TO_ADDR
// exit ;
55539: GO 55583
// end ; if x1 > x2 and y1 > y2 then
55541: LD_VAR 0 1
55545: PUSH
55546: LD_VAR 0 3
55550: GREATER
55551: PUSH
55552: LD_VAR 0 2
55556: PUSH
55557: LD_VAR 0 4
55561: GREATER
55562: AND
55563: IFFALSE 55575
// result := 2 else
55565: LD_ADDR_VAR 0 5
55569: PUSH
55570: LD_INT 2
55572: ST_TO_ADDR
55573: GO 55583
// result := 5 ;
55575: LD_ADDR_VAR 0 5
55579: PUSH
55580: LD_INT 5
55582: ST_TO_ADDR
// end ;
55583: LD_VAR 0 5
55587: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55588: LD_INT 0
55590: PPUSH
55591: PPUSH
// if not driver or not IsInUnit ( driver ) then
55592: LD_VAR 0 1
55596: NOT
55597: PUSH
55598: LD_VAR 0 1
55602: PPUSH
55603: CALL_OW 310
55607: NOT
55608: OR
55609: IFFALSE 55613
// exit ;
55611: GO 55703
// vehicle := IsInUnit ( driver ) ;
55613: LD_ADDR_VAR 0 3
55617: PUSH
55618: LD_VAR 0 1
55622: PPUSH
55623: CALL_OW 310
55627: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55628: LD_VAR 0 1
55632: PPUSH
55633: LD_STRING \
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: PUSH
55663: LD_STRING E
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_VAR 0 3
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PPUSH
55699: CALL_OW 446
// end ;
55703: LD_VAR 0 2
55707: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55708: LD_INT 0
55710: PPUSH
55711: PPUSH
// if not driver or not IsInUnit ( driver ) then
55712: LD_VAR 0 1
55716: NOT
55717: PUSH
55718: LD_VAR 0 1
55722: PPUSH
55723: CALL_OW 310
55727: NOT
55728: OR
55729: IFFALSE 55733
// exit ;
55731: GO 55823
// vehicle := IsInUnit ( driver ) ;
55733: LD_ADDR_VAR 0 3
55737: PUSH
55738: LD_VAR 0 1
55742: PPUSH
55743: CALL_OW 310
55747: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55748: LD_VAR 0 1
55752: PPUSH
55753: LD_STRING \
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: PUSH
55783: LD_STRING E
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_VAR 0 3
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PPUSH
55819: CALL_OW 447
// end ;
55823: LD_VAR 0 2
55827: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55828: LD_INT 0
55830: PPUSH
55831: PPUSH
55832: PPUSH
// tmp := [ ] ;
55833: LD_ADDR_VAR 0 5
55837: PUSH
55838: EMPTY
55839: ST_TO_ADDR
// for i in units do
55840: LD_ADDR_VAR 0 4
55844: PUSH
55845: LD_VAR 0 1
55849: PUSH
55850: FOR_IN
55851: IFFALSE 55889
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55853: LD_ADDR_VAR 0 5
55857: PUSH
55858: LD_VAR 0 5
55862: PPUSH
55863: LD_VAR 0 5
55867: PUSH
55868: LD_INT 1
55870: PLUS
55871: PPUSH
55872: LD_VAR 0 4
55876: PPUSH
55877: CALL_OW 256
55881: PPUSH
55882: CALL_OW 2
55886: ST_TO_ADDR
55887: GO 55850
55889: POP
55890: POP
// if not tmp then
55891: LD_VAR 0 5
55895: NOT
55896: IFFALSE 55900
// exit ;
55898: GO 55948
// if asc then
55900: LD_VAR 0 2
55904: IFFALSE 55928
// result := SortListByListAsc ( units , tmp ) else
55906: LD_ADDR_VAR 0 3
55910: PUSH
55911: LD_VAR 0 1
55915: PPUSH
55916: LD_VAR 0 5
55920: PPUSH
55921: CALL_OW 76
55925: ST_TO_ADDR
55926: GO 55948
// result := SortListByListDesc ( units , tmp ) ;
55928: LD_ADDR_VAR 0 3
55932: PUSH
55933: LD_VAR 0 1
55937: PPUSH
55938: LD_VAR 0 5
55942: PPUSH
55943: CALL_OW 77
55947: ST_TO_ADDR
// end ;
55948: LD_VAR 0 3
55952: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55953: LD_INT 0
55955: PPUSH
55956: PPUSH
// task := GetTaskList ( mech ) ;
55957: LD_ADDR_VAR 0 4
55961: PUSH
55962: LD_VAR 0 1
55966: PPUSH
55967: CALL_OW 437
55971: ST_TO_ADDR
// if not task then
55972: LD_VAR 0 4
55976: NOT
55977: IFFALSE 55981
// exit ;
55979: GO 56023
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55981: LD_ADDR_VAR 0 3
55985: PUSH
55986: LD_VAR 0 4
55990: PUSH
55991: LD_INT 1
55993: ARRAY
55994: PUSH
55995: LD_INT 1
55997: ARRAY
55998: PUSH
55999: LD_STRING r
56001: EQUAL
56002: PUSH
56003: LD_VAR 0 4
56007: PUSH
56008: LD_INT 1
56010: ARRAY
56011: PUSH
56012: LD_INT 4
56014: ARRAY
56015: PUSH
56016: LD_VAR 0 2
56020: EQUAL
56021: AND
56022: ST_TO_ADDR
// end ;
56023: LD_VAR 0 3
56027: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56028: LD_INT 0
56030: PPUSH
// SetDir ( unit , d ) ;
56031: LD_VAR 0 1
56035: PPUSH
56036: LD_VAR 0 4
56040: PPUSH
56041: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56045: LD_VAR 0 1
56049: PPUSH
56050: LD_VAR 0 2
56054: PPUSH
56055: LD_VAR 0 3
56059: PPUSH
56060: LD_VAR 0 5
56064: PPUSH
56065: CALL_OW 48
// end ;
56069: LD_VAR 0 6
56073: RET
// export function ToNaturalNumber ( number ) ; begin
56074: LD_INT 0
56076: PPUSH
// result := number div 1 ;
56077: LD_ADDR_VAR 0 2
56081: PUSH
56082: LD_VAR 0 1
56086: PUSH
56087: LD_INT 1
56089: DIV
56090: ST_TO_ADDR
// if number < 0 then
56091: LD_VAR 0 1
56095: PUSH
56096: LD_INT 0
56098: LESS
56099: IFFALSE 56109
// result := 0 ;
56101: LD_ADDR_VAR 0 2
56105: PUSH
56106: LD_INT 0
56108: ST_TO_ADDR
// end ;
56109: LD_VAR 0 2
56113: RET
// export function SortByClass ( units , class ) ; var un ; begin
56114: LD_INT 0
56116: PPUSH
56117: PPUSH
// if not units or not class then
56118: LD_VAR 0 1
56122: NOT
56123: PUSH
56124: LD_VAR 0 2
56128: NOT
56129: OR
56130: IFFALSE 56134
// exit ;
56132: GO 56229
// result := [ ] ;
56134: LD_ADDR_VAR 0 3
56138: PUSH
56139: EMPTY
56140: ST_TO_ADDR
// for un in units do
56141: LD_ADDR_VAR 0 4
56145: PUSH
56146: LD_VAR 0 1
56150: PUSH
56151: FOR_IN
56152: IFFALSE 56227
// if GetClass ( un ) = class then
56154: LD_VAR 0 4
56158: PPUSH
56159: CALL_OW 257
56163: PUSH
56164: LD_VAR 0 2
56168: EQUAL
56169: IFFALSE 56196
// result := Insert ( result , 1 , un ) else
56171: LD_ADDR_VAR 0 3
56175: PUSH
56176: LD_VAR 0 3
56180: PPUSH
56181: LD_INT 1
56183: PPUSH
56184: LD_VAR 0 4
56188: PPUSH
56189: CALL_OW 2
56193: ST_TO_ADDR
56194: GO 56225
// result := Replace ( result , result + 1 , un ) ;
56196: LD_ADDR_VAR 0 3
56200: PUSH
56201: LD_VAR 0 3
56205: PPUSH
56206: LD_VAR 0 3
56210: PUSH
56211: LD_INT 1
56213: PLUS
56214: PPUSH
56215: LD_VAR 0 4
56219: PPUSH
56220: CALL_OW 1
56224: ST_TO_ADDR
56225: GO 56151
56227: POP
56228: POP
// end ;
56229: LD_VAR 0 3
56233: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56234: LD_INT 0
56236: PPUSH
56237: PPUSH
56238: PPUSH
56239: PPUSH
56240: PPUSH
56241: PPUSH
56242: PPUSH
// result := [ ] ;
56243: LD_ADDR_VAR 0 4
56247: PUSH
56248: EMPTY
56249: ST_TO_ADDR
// if x - r < 0 then
56250: LD_VAR 0 1
56254: PUSH
56255: LD_VAR 0 3
56259: MINUS
56260: PUSH
56261: LD_INT 0
56263: LESS
56264: IFFALSE 56276
// min_x := 0 else
56266: LD_ADDR_VAR 0 8
56270: PUSH
56271: LD_INT 0
56273: ST_TO_ADDR
56274: GO 56292
// min_x := x - r ;
56276: LD_ADDR_VAR 0 8
56280: PUSH
56281: LD_VAR 0 1
56285: PUSH
56286: LD_VAR 0 3
56290: MINUS
56291: ST_TO_ADDR
// if y - r < 0 then
56292: LD_VAR 0 2
56296: PUSH
56297: LD_VAR 0 3
56301: MINUS
56302: PUSH
56303: LD_INT 0
56305: LESS
56306: IFFALSE 56318
// min_y := 0 else
56308: LD_ADDR_VAR 0 7
56312: PUSH
56313: LD_INT 0
56315: ST_TO_ADDR
56316: GO 56334
// min_y := y - r ;
56318: LD_ADDR_VAR 0 7
56322: PUSH
56323: LD_VAR 0 2
56327: PUSH
56328: LD_VAR 0 3
56332: MINUS
56333: ST_TO_ADDR
// max_x := x + r ;
56334: LD_ADDR_VAR 0 9
56338: PUSH
56339: LD_VAR 0 1
56343: PUSH
56344: LD_VAR 0 3
56348: PLUS
56349: ST_TO_ADDR
// max_y := y + r ;
56350: LD_ADDR_VAR 0 10
56354: PUSH
56355: LD_VAR 0 2
56359: PUSH
56360: LD_VAR 0 3
56364: PLUS
56365: ST_TO_ADDR
// for _x = min_x to max_x do
56366: LD_ADDR_VAR 0 5
56370: PUSH
56371: DOUBLE
56372: LD_VAR 0 8
56376: DEC
56377: ST_TO_ADDR
56378: LD_VAR 0 9
56382: PUSH
56383: FOR_TO
56384: IFFALSE 56485
// for _y = min_y to max_y do
56386: LD_ADDR_VAR 0 6
56390: PUSH
56391: DOUBLE
56392: LD_VAR 0 7
56396: DEC
56397: ST_TO_ADDR
56398: LD_VAR 0 10
56402: PUSH
56403: FOR_TO
56404: IFFALSE 56481
// begin if not ValidHex ( _x , _y ) then
56406: LD_VAR 0 5
56410: PPUSH
56411: LD_VAR 0 6
56415: PPUSH
56416: CALL_OW 488
56420: NOT
56421: IFFALSE 56425
// continue ;
56423: GO 56403
// if GetResourceTypeXY ( _x , _y ) then
56425: LD_VAR 0 5
56429: PPUSH
56430: LD_VAR 0 6
56434: PPUSH
56435: CALL_OW 283
56439: IFFALSE 56479
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56441: LD_ADDR_VAR 0 4
56445: PUSH
56446: LD_VAR 0 4
56450: PPUSH
56451: LD_VAR 0 4
56455: PUSH
56456: LD_INT 1
56458: PLUS
56459: PPUSH
56460: LD_VAR 0 5
56464: PUSH
56465: LD_VAR 0 6
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PPUSH
56474: CALL_OW 1
56478: ST_TO_ADDR
// end ;
56479: GO 56403
56481: POP
56482: POP
56483: GO 56383
56485: POP
56486: POP
// end ;
56487: LD_VAR 0 4
56491: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
56492: LD_INT 0
56494: PPUSH
56495: PPUSH
56496: PPUSH
56497: PPUSH
56498: PPUSH
56499: PPUSH
// if not units then
56500: LD_VAR 0 1
56504: NOT
56505: IFFALSE 56509
// exit ;
56507: GO 56910
// result := UnitFilter ( units , [ f_ok ] ) ;
56509: LD_ADDR_VAR 0 3
56513: PUSH
56514: LD_VAR 0 1
56518: PPUSH
56519: LD_INT 50
56521: PUSH
56522: EMPTY
56523: LIST
56524: PPUSH
56525: CALL_OW 72
56529: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56530: LD_ADDR_VAR 0 7
56534: PUSH
56535: LD_VAR 0 1
56539: PUSH
56540: LD_INT 1
56542: ARRAY
56543: PPUSH
56544: CALL_OW 255
56548: ST_TO_ADDR
// if not result then
56549: LD_VAR 0 3
56553: NOT
56554: IFFALSE 56558
// exit ;
56556: GO 56910
// for i in result do
56558: LD_ADDR_VAR 0 4
56562: PUSH
56563: LD_VAR 0 3
56567: PUSH
56568: FOR_IN
56569: IFFALSE 56908
// begin tag := GetTag ( i ) + 1 ;
56571: LD_ADDR_VAR 0 8
56575: PUSH
56576: LD_VAR 0 4
56580: PPUSH
56581: CALL_OW 110
56585: PUSH
56586: LD_INT 1
56588: PLUS
56589: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56590: LD_ADDR_VAR 0 6
56594: PUSH
56595: LD_VAR 0 4
56599: PPUSH
56600: CALL_OW 250
56604: PPUSH
56605: LD_VAR 0 4
56609: PPUSH
56610: CALL_OW 251
56614: PPUSH
56615: LD_INT 6
56617: PPUSH
56618: CALL 56234 0 3
56622: ST_TO_ADDR
// if cr then
56623: LD_VAR 0 6
56627: IFFALSE 56666
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56629: LD_VAR 0 4
56633: PPUSH
56634: LD_VAR 0 6
56638: PUSH
56639: LD_INT 1
56641: ARRAY
56642: PUSH
56643: LD_INT 1
56645: ARRAY
56646: PPUSH
56647: LD_VAR 0 6
56651: PUSH
56652: LD_INT 1
56654: ARRAY
56655: PUSH
56656: LD_INT 2
56658: ARRAY
56659: PPUSH
56660: CALL_OW 116
56664: GO 56906
// if path > tag then
56666: LD_VAR 0 2
56670: PUSH
56671: LD_VAR 0 8
56675: GREATER
56676: IFFALSE 56854
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
56678: LD_ADDR_VAR 0 5
56682: PUSH
56683: LD_INT 81
56685: PUSH
56686: LD_VAR 0 7
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 91
56697: PUSH
56698: LD_VAR 0 4
56702: PUSH
56703: LD_INT 12
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PPUSH
56715: CALL_OW 69
56719: ST_TO_ADDR
// if enemy then
56720: LD_VAR 0 5
56724: IFFALSE 56752
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56726: LD_VAR 0 4
56730: PPUSH
56731: LD_VAR 0 5
56735: PPUSH
56736: LD_VAR 0 4
56740: PPUSH
56741: CALL_OW 74
56745: PPUSH
56746: CALL_OW 115
56750: GO 56852
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56752: LD_VAR 0 4
56756: PPUSH
56757: LD_VAR 0 2
56761: PUSH
56762: LD_VAR 0 8
56766: ARRAY
56767: PUSH
56768: LD_INT 1
56770: ARRAY
56771: PPUSH
56772: LD_VAR 0 2
56776: PUSH
56777: LD_VAR 0 8
56781: ARRAY
56782: PUSH
56783: LD_INT 2
56785: ARRAY
56786: PPUSH
56787: CALL_OW 297
56791: PUSH
56792: LD_INT 6
56794: GREATER
56795: IFFALSE 56838
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56797: LD_VAR 0 4
56801: PPUSH
56802: LD_VAR 0 2
56806: PUSH
56807: LD_VAR 0 8
56811: ARRAY
56812: PUSH
56813: LD_INT 1
56815: ARRAY
56816: PPUSH
56817: LD_VAR 0 2
56821: PUSH
56822: LD_VAR 0 8
56826: ARRAY
56827: PUSH
56828: LD_INT 2
56830: ARRAY
56831: PPUSH
56832: CALL_OW 114
56836: GO 56852
// SetTag ( i , tag ) ;
56838: LD_VAR 0 4
56842: PPUSH
56843: LD_VAR 0 8
56847: PPUSH
56848: CALL_OW 109
// end else
56852: GO 56906
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56854: LD_ADDR_VAR 0 5
56858: PUSH
56859: LD_INT 81
56861: PUSH
56862: LD_VAR 0 7
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PPUSH
56871: CALL_OW 69
56875: ST_TO_ADDR
// if enemy then
56876: LD_VAR 0 5
56880: IFFALSE 56906
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56882: LD_VAR 0 4
56886: PPUSH
56887: LD_VAR 0 5
56891: PPUSH
56892: LD_VAR 0 4
56896: PPUSH
56897: CALL_OW 74
56901: PPUSH
56902: CALL_OW 115
// end ; end ;
56906: GO 56568
56908: POP
56909: POP
// end ;
56910: LD_VAR 0 3
56914: RET
