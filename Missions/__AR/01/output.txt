// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// ComAttackPlace ( a1 , 99 , 81 ) ;
  11: LD_INT 23
  13: PPUSH
  14: LD_INT 99
  16: PPUSH
  17: LD_INT 81
  19: PPUSH
  20: CALL_OW 116
// end ; end_of_file
  24: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
  25: LD_INT 0
  27: PPUSH
  28: PPUSH
  29: PPUSH
  30: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  31: LD_VAR 0 1
  35: PPUSH
  36: CALL_OW 264
  40: PUSH
  41: LD_EXP 5
  45: EQUAL
  46: IFFALSE 118
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  48: LD_INT 68
  50: PPUSH
  51: LD_VAR 0 1
  55: PPUSH
  56: CALL_OW 255
  60: PPUSH
  61: CALL_OW 321
  65: PUSH
  66: LD_INT 2
  68: EQUAL
  69: IFFALSE 81
// eff := 70 else
  71: LD_ADDR_VAR 0 4
  75: PUSH
  76: LD_INT 70
  78: ST_TO_ADDR
  79: GO 89
// eff := 30 ;
  81: LD_ADDR_VAR 0 4
  85: PUSH
  86: LD_INT 30
  88: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  89: LD_VAR 0 1
  93: PPUSH
  94: CALL_OW 250
  98: PPUSH
  99: LD_VAR 0 1
 103: PPUSH
 104: CALL_OW 251
 108: PPUSH
 109: LD_VAR 0 4
 113: PPUSH
 114: CALL_OW 495
// end ; end ;
 118: LD_VAR 0 2
 122: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 123: LD_INT 0
 125: PPUSH
// end ;
 126: LD_VAR 0 4
 130: RET
// export function SOS_Command ( cmd ) ; begin
 131: LD_INT 0
 133: PPUSH
// end ;
 134: LD_VAR 0 2
 138: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 139: LD_VAR 0 1
 143: PUSH
 144: LD_INT 255
 146: EQUAL
 147: PUSH
 148: LD_VAR 0 2
 152: PPUSH
 153: CALL_OW 264
 157: PUSH
 158: LD_INT 14
 160: PUSH
 161: LD_INT 53
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: IN
 168: AND
 169: PUSH
 170: LD_VAR 0 4
 174: PPUSH
 175: LD_VAR 0 5
 179: PPUSH
 180: CALL_OW 488
 184: AND
 185: IFFALSE 209
// CutTreeXYR ( unit , x , y , 12 ) ;
 187: LD_VAR 0 2
 191: PPUSH
 192: LD_VAR 0 4
 196: PPUSH
 197: LD_VAR 0 5
 201: PPUSH
 202: LD_INT 12
 204: PPUSH
 205: CALL 212 0 4
// end ;
 209: PPOPN 5
 211: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 212: LD_INT 0
 214: PPUSH
 215: PPUSH
 216: PPUSH
 217: PPUSH
 218: PPUSH
 219: PPUSH
 220: PPUSH
 221: PPUSH
 222: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 223: LD_VAR 0 1
 227: NOT
 228: PUSH
 229: LD_VAR 0 2
 233: PPUSH
 234: LD_VAR 0 3
 238: PPUSH
 239: CALL_OW 488
 243: NOT
 244: OR
 245: PUSH
 246: LD_VAR 0 4
 250: NOT
 251: OR
 252: IFFALSE 256
// exit ;
 254: GO 596
// list := [ ] ;
 256: LD_ADDR_VAR 0 13
 260: PUSH
 261: EMPTY
 262: ST_TO_ADDR
// if x - r < 0 then
 263: LD_VAR 0 2
 267: PUSH
 268: LD_VAR 0 4
 272: MINUS
 273: PUSH
 274: LD_INT 0
 276: LESS
 277: IFFALSE 289
// min_x := 0 else
 279: LD_ADDR_VAR 0 7
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
 287: GO 305
// min_x := x - r ;
 289: LD_ADDR_VAR 0 7
 293: PUSH
 294: LD_VAR 0 2
 298: PUSH
 299: LD_VAR 0 4
 303: MINUS
 304: ST_TO_ADDR
// if y - r < 0 then
 305: LD_VAR 0 3
 309: PUSH
 310: LD_VAR 0 4
 314: MINUS
 315: PUSH
 316: LD_INT 0
 318: LESS
 319: IFFALSE 331
// min_y := 0 else
 321: LD_ADDR_VAR 0 8
 325: PUSH
 326: LD_INT 0
 328: ST_TO_ADDR
 329: GO 347
// min_y := y - r ;
 331: LD_ADDR_VAR 0 8
 335: PUSH
 336: LD_VAR 0 3
 340: PUSH
 341: LD_VAR 0 4
 345: MINUS
 346: ST_TO_ADDR
// max_x := x + r ;
 347: LD_ADDR_VAR 0 9
 351: PUSH
 352: LD_VAR 0 2
 356: PUSH
 357: LD_VAR 0 4
 361: PLUS
 362: ST_TO_ADDR
// max_y := y + r ;
 363: LD_ADDR_VAR 0 10
 367: PUSH
 368: LD_VAR 0 3
 372: PUSH
 373: LD_VAR 0 4
 377: PLUS
 378: ST_TO_ADDR
// for _x = min_x to max_x do
 379: LD_ADDR_VAR 0 11
 383: PUSH
 384: DOUBLE
 385: LD_VAR 0 7
 389: DEC
 390: ST_TO_ADDR
 391: LD_VAR 0 9
 395: PUSH
 396: FOR_TO
 397: IFFALSE 514
// for _y = min_y to max_y do
 399: LD_ADDR_VAR 0 12
 403: PUSH
 404: DOUBLE
 405: LD_VAR 0 8
 409: DEC
 410: ST_TO_ADDR
 411: LD_VAR 0 10
 415: PUSH
 416: FOR_TO
 417: IFFALSE 510
// begin if not ValidHex ( _x , _y ) then
 419: LD_VAR 0 11
 423: PPUSH
 424: LD_VAR 0 12
 428: PPUSH
 429: CALL_OW 488
 433: NOT
 434: IFFALSE 438
// continue ;
 436: GO 416
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 438: LD_VAR 0 11
 442: PPUSH
 443: LD_VAR 0 12
 447: PPUSH
 448: CALL_OW 351
 452: PUSH
 453: LD_VAR 0 11
 457: PPUSH
 458: LD_VAR 0 12
 462: PPUSH
 463: CALL_OW 554
 467: AND
 468: IFFALSE 508
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
 470: LD_ADDR_VAR 0 13
 474: PUSH
 475: LD_VAR 0 13
 479: PPUSH
 480: LD_VAR 0 13
 484: PUSH
 485: LD_INT 1
 487: PLUS
 488: PPUSH
 489: LD_VAR 0 11
 493: PUSH
 494: LD_VAR 0 12
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PPUSH
 503: CALL_OW 2
 507: ST_TO_ADDR
// end ;
 508: GO 416
 510: POP
 511: POP
 512: GO 396
 514: POP
 515: POP
// if not list then
 516: LD_VAR 0 13
 520: NOT
 521: IFFALSE 525
// exit ;
 523: GO 596
// for i in list do
 525: LD_ADDR_VAR 0 6
 529: PUSH
 530: LD_VAR 0 13
 534: PUSH
 535: FOR_IN
 536: IFFALSE 594
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
 538: LD_VAR 0 1
 542: PPUSH
 543: LD_STRING M
 545: PUSH
 546: LD_VAR 0 6
 550: PUSH
 551: LD_INT 1
 553: ARRAY
 554: PUSH
 555: LD_VAR 0 6
 559: PUSH
 560: LD_INT 2
 562: ARRAY
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: LD_INT 0
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: PPUSH
 588: CALL_OW 447
 592: GO 535
 594: POP
 595: POP
// end ; end_of_file
 596: LD_VAR 0 5
 600: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
 601: GO 603
 603: DISABLE
// begin ru_radar := 98 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 98
 611: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 89
 619: ST_TO_ADDR
// us_hack := 99 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 99
 627: ST_TO_ADDR
// us_artillery := 97 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 97
 635: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 91
 643: ST_TO_ADDR
// end ;
 644: END
