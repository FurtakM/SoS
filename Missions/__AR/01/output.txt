// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_INT 91
  23: EQUAL
  24: IFFALSE 96
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  26: LD_INT 68
  28: PPUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: CALL_OW 255
  38: PPUSH
  39: CALL_OW 321
  43: PUSH
  44: LD_INT 2
  46: EQUAL
  47: IFFALSE 59
// eff := 70 else
  49: LD_ADDR_VAR 0 4
  53: PUSH
  54: LD_INT 70
  56: ST_TO_ADDR
  57: GO 67
// eff := 30 ;
  59: LD_ADDR_VAR 0 4
  63: PUSH
  64: LD_INT 30
  66: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: CALL_OW 250
  76: PPUSH
  77: LD_VAR 0 1
  81: PPUSH
  82: CALL_OW 251
  86: PPUSH
  87: LD_VAR 0 4
  91: PPUSH
  92: CALL_OW 495
// end ; end ;
  96: LD_VAR 0 2
 100: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 101: LD_INT 0
 103: PPUSH
// end ;
 104: LD_VAR 0 4
 108: RET
// export function SOS_Command ( cmd ) ; begin
 109: LD_INT 0
 111: PPUSH
// end ;
 112: LD_VAR 0 2
 116: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
 117: LD_INT 0
 119: PPUSH
// end ;
 120: LD_VAR 0 6
 124: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
// if not vehicle or not factory then
 129: LD_VAR 0 1
 133: NOT
 134: PUSH
 135: LD_VAR 0 2
 139: NOT
 140: OR
 141: IFFALSE 145
// exit ;
 143: GO 376
// if factoryWaypoints >= factory then
 145: LD_EXP 70
 149: PUSH
 150: LD_VAR 0 2
 154: GREATEREQUAL
 155: IFFALSE 376
// if factoryWaypoints [ factory ] then
 157: LD_EXP 70
 161: PUSH
 162: LD_VAR 0 2
 166: ARRAY
 167: IFFALSE 376
// begin if GetControl ( vehicle ) = control_manual then
 169: LD_VAR 0 1
 173: PPUSH
 174: CALL_OW 263
 178: PUSH
 179: LD_INT 1
 181: EQUAL
 182: IFFALSE 263
// begin driver := IsDrivenBy ( vehicle ) ;
 184: LD_ADDR_VAR 0 4
 188: PUSH
 189: LD_VAR 0 1
 193: PPUSH
 194: CALL_OW 311
 198: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 199: LD_VAR 0 4
 203: PPUSH
 204: LD_EXP 70
 208: PUSH
 209: LD_VAR 0 2
 213: ARRAY
 214: PUSH
 215: LD_INT 3
 217: ARRAY
 218: PPUSH
 219: LD_EXP 70
 223: PUSH
 224: LD_VAR 0 2
 228: ARRAY
 229: PUSH
 230: LD_INT 4
 232: ARRAY
 233: PPUSH
 234: CALL_OW 171
// AddComExitVehicle ( driver ) ;
 238: LD_VAR 0 4
 242: PPUSH
 243: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
 247: LD_VAR 0 4
 251: PPUSH
 252: LD_VAR 0 2
 256: PPUSH
 257: CALL_OW 180
// end else
 261: GO 376
// if GetControl ( vehicle ) = control_remote then
 263: LD_VAR 0 1
 267: PPUSH
 268: CALL_OW 263
 272: PUSH
 273: LD_INT 2
 275: EQUAL
 276: IFFALSE 337
// begin wait ( 0 0$2 ) ;
 278: LD_INT 70
 280: PPUSH
 281: CALL_OW 67
// if Connect ( vehicle ) then
 285: LD_VAR 0 1
 289: PPUSH
 290: CALL 28199 0 1
 294: IFFALSE 335
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 296: LD_VAR 0 1
 300: PPUSH
 301: LD_EXP 70
 305: PUSH
 306: LD_VAR 0 2
 310: ARRAY
 311: PUSH
 312: LD_INT 3
 314: ARRAY
 315: PPUSH
 316: LD_EXP 70
 320: PUSH
 321: LD_VAR 0 2
 325: ARRAY
 326: PUSH
 327: LD_INT 4
 329: ARRAY
 330: PPUSH
 331: CALL_OW 171
// end else
 335: GO 376
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
 337: LD_VAR 0 1
 341: PPUSH
 342: LD_EXP 70
 346: PUSH
 347: LD_VAR 0 2
 351: ARRAY
 352: PUSH
 353: LD_INT 3
 355: ARRAY
 356: PPUSH
 357: LD_EXP 70
 361: PUSH
 362: LD_VAR 0 2
 366: ARRAY
 367: PUSH
 368: LD_INT 4
 370: ARRAY
 371: PPUSH
 372: CALL_OW 171
// end ; end ;
 376: LD_VAR 0 3
 380: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 381: LD_INT 0
 383: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 384: LD_VAR 0 1
 388: PUSH
 389: LD_INT 250
 391: EQUAL
 392: PUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: CALL_OW 264
 402: PUSH
 403: LD_INT 81
 405: EQUAL
 406: AND
 407: IFFALSE 428
// MinerPlaceMine ( unit , x , y ) ;
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 5
 423: PPUSH
 424: CALL 2813 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 428: LD_VAR 0 1
 432: PUSH
 433: LD_INT 251
 435: EQUAL
 436: PUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 264
 446: PUSH
 447: LD_INT 81
 449: EQUAL
 450: AND
 451: IFFALSE 472
// MinerDetonateMine ( unit , x , y ) ;
 453: LD_VAR 0 2
 457: PPUSH
 458: LD_VAR 0 4
 462: PPUSH
 463: LD_VAR 0 5
 467: PPUSH
 468: CALL 3088 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 472: LD_VAR 0 1
 476: PUSH
 477: LD_INT 252
 479: EQUAL
 480: PUSH
 481: LD_VAR 0 2
 485: PPUSH
 486: CALL_OW 264
 490: PUSH
 491: LD_INT 81
 493: EQUAL
 494: AND
 495: IFFALSE 516
// MinerCreateMinefield ( unit , x , y ) ;
 497: LD_VAR 0 2
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_VAR 0 5
 511: PPUSH
 512: CALL 3505 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 516: LD_VAR 0 1
 520: PUSH
 521: LD_INT 253
 523: EQUAL
 524: PUSH
 525: LD_VAR 0 2
 529: PPUSH
 530: CALL_OW 257
 534: PUSH
 535: LD_INT 5
 537: EQUAL
 538: AND
 539: IFFALSE 560
// ComBinocular ( unit , x , y ) ;
 541: LD_VAR 0 2
 545: PPUSH
 546: LD_VAR 0 4
 550: PPUSH
 551: LD_VAR 0 5
 555: PPUSH
 556: CALL 3874 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 560: LD_VAR 0 1
 564: PUSH
 565: LD_INT 254
 567: EQUAL
 568: PUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 264
 578: PUSH
 579: LD_INT 99
 581: EQUAL
 582: AND
 583: PUSH
 584: LD_VAR 0 3
 588: PPUSH
 589: CALL_OW 263
 593: PUSH
 594: LD_INT 3
 596: EQUAL
 597: AND
 598: IFFALSE 614
// HackDestroyVehicle ( unit , selectedUnit ) ;
 600: LD_VAR 0 2
 604: PPUSH
 605: LD_VAR 0 3
 609: PPUSH
 610: CALL 2177 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 614: LD_VAR 0 1
 618: PUSH
 619: LD_INT 255
 621: EQUAL
 622: PUSH
 623: LD_VAR 0 2
 627: PPUSH
 628: CALL_OW 264
 632: PUSH
 633: LD_INT 14
 635: PUSH
 636: LD_INT 53
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: IN
 643: AND
 644: PUSH
 645: LD_VAR 0 4
 649: PPUSH
 650: LD_VAR 0 5
 654: PPUSH
 655: CALL_OW 488
 659: AND
 660: IFFALSE 684
// CutTreeXYR ( unit , x , y , 12 ) ;
 662: LD_VAR 0 2
 666: PPUSH
 667: LD_VAR 0 4
 671: PPUSH
 672: LD_VAR 0 5
 676: PPUSH
 677: LD_INT 12
 679: PPUSH
 680: CALL 747 0 4
// if cmd = 256 then
 684: LD_VAR 0 1
 688: PUSH
 689: LD_INT 256
 691: EQUAL
 692: IFFALSE 713
// SetFactoryWaypoint ( unit , x , y ) ;
 694: LD_VAR 0 2
 698: PPUSH
 699: LD_VAR 0 4
 703: PPUSH
 704: LD_VAR 0 5
 708: PPUSH
 709: CALL 18782 0 3
// if cmd = 257 then
 713: LD_VAR 0 1
 717: PUSH
 718: LD_INT 257
 720: EQUAL
 721: IFFALSE 742
// SetWarehouseGatheringPoint ( unit , x , y ) ;
 723: LD_VAR 0 2
 727: PPUSH
 728: LD_VAR 0 4
 732: PPUSH
 733: LD_VAR 0 5
 737: PPUSH
 738: CALL 19144 0 3
// end ;
 742: LD_VAR 0 6
 746: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 747: LD_INT 0
 749: PPUSH
 750: PPUSH
 751: PPUSH
 752: PPUSH
 753: PPUSH
 754: PPUSH
 755: PPUSH
 756: PPUSH
 757: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 758: LD_VAR 0 1
 762: NOT
 763: PUSH
 764: LD_VAR 0 2
 768: PPUSH
 769: LD_VAR 0 3
 773: PPUSH
 774: CALL_OW 488
 778: NOT
 779: OR
 780: PUSH
 781: LD_VAR 0 4
 785: NOT
 786: OR
 787: IFFALSE 791
// exit ;
 789: GO 1131
// list := [ ] ;
 791: LD_ADDR_VAR 0 13
 795: PUSH
 796: EMPTY
 797: ST_TO_ADDR
// if x - r < 0 then
 798: LD_VAR 0 2
 802: PUSH
 803: LD_VAR 0 4
 807: MINUS
 808: PUSH
 809: LD_INT 0
 811: LESS
 812: IFFALSE 824
// min_x := 0 else
 814: LD_ADDR_VAR 0 7
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
 822: GO 840
// min_x := x - r ;
 824: LD_ADDR_VAR 0 7
 828: PUSH
 829: LD_VAR 0 2
 833: PUSH
 834: LD_VAR 0 4
 838: MINUS
 839: ST_TO_ADDR
// if y - r < 0 then
 840: LD_VAR 0 3
 844: PUSH
 845: LD_VAR 0 4
 849: MINUS
 850: PUSH
 851: LD_INT 0
 853: LESS
 854: IFFALSE 866
// min_y := 0 else
 856: LD_ADDR_VAR 0 8
 860: PUSH
 861: LD_INT 0
 863: ST_TO_ADDR
 864: GO 882
// min_y := y - r ;
 866: LD_ADDR_VAR 0 8
 870: PUSH
 871: LD_VAR 0 3
 875: PUSH
 876: LD_VAR 0 4
 880: MINUS
 881: ST_TO_ADDR
// max_x := x + r ;
 882: LD_ADDR_VAR 0 9
 886: PUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_VAR 0 4
 896: PLUS
 897: ST_TO_ADDR
// max_y := y + r ;
 898: LD_ADDR_VAR 0 10
 902: PUSH
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 4
 912: PLUS
 913: ST_TO_ADDR
// for _x = min_x to max_x do
 914: LD_ADDR_VAR 0 11
 918: PUSH
 919: DOUBLE
 920: LD_VAR 0 7
 924: DEC
 925: ST_TO_ADDR
 926: LD_VAR 0 9
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1049
// for _y = min_y to max_y do
 934: LD_ADDR_VAR 0 12
 938: PUSH
 939: DOUBLE
 940: LD_VAR 0 8
 944: DEC
 945: ST_TO_ADDR
 946: LD_VAR 0 10
 950: PUSH
 951: FOR_TO
 952: IFFALSE 1045
// begin if not ValidHex ( _x , _y ) then
 954: LD_VAR 0 11
 958: PPUSH
 959: LD_VAR 0 12
 963: PPUSH
 964: CALL_OW 488
 968: NOT
 969: IFFALSE 973
// continue ;
 971: GO 951
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 973: LD_VAR 0 11
 977: PPUSH
 978: LD_VAR 0 12
 982: PPUSH
 983: CALL_OW 351
 987: PUSH
 988: LD_VAR 0 11
 992: PPUSH
 993: LD_VAR 0 12
 997: PPUSH
 998: CALL_OW 554
1002: AND
1003: IFFALSE 1043
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
1005: LD_ADDR_VAR 0 13
1009: PUSH
1010: LD_VAR 0 13
1014: PPUSH
1015: LD_VAR 0 13
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: PPUSH
1024: LD_VAR 0 11
1028: PUSH
1029: LD_VAR 0 12
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 2
1042: ST_TO_ADDR
// end ;
1043: GO 951
1045: POP
1046: POP
1047: GO 931
1049: POP
1050: POP
// if not list then
1051: LD_VAR 0 13
1055: NOT
1056: IFFALSE 1060
// exit ;
1058: GO 1131
// for i in list do
1060: LD_ADDR_VAR 0 6
1064: PUSH
1065: LD_VAR 0 13
1069: PUSH
1070: FOR_IN
1071: IFFALSE 1129
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
1073: LD_VAR 0 1
1077: PPUSH
1078: LD_STRING M
1080: PUSH
1081: LD_VAR 0 6
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PUSH
1090: LD_VAR 0 6
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PUSH
1099: LD_INT 0
1101: PUSH
1102: LD_INT 0
1104: PUSH
1105: LD_INT 0
1107: PUSH
1108: LD_INT 0
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: PPUSH
1123: CALL_OW 447
1127: GO 1070
1129: POP
1130: POP
// end ;
1131: LD_VAR 0 5
1135: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
1136: LD_EXP 1
1140: NOT
1141: IFFALSE 1191
1143: GO 1145
1145: DISABLE
// begin initHack := true ;
1146: LD_ADDR_EXP 1
1150: PUSH
1151: LD_INT 1
1153: ST_TO_ADDR
// hackTanks := [ ] ;
1154: LD_ADDR_EXP 2
1158: PUSH
1159: EMPTY
1160: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
1161: LD_ADDR_EXP 3
1165: PUSH
1166: EMPTY
1167: ST_TO_ADDR
// hackLimit := 3 ;
1168: LD_ADDR_EXP 4
1172: PUSH
1173: LD_INT 3
1175: ST_TO_ADDR
// hackDist := 12 ;
1176: LD_ADDR_EXP 5
1180: PUSH
1181: LD_INT 12
1183: ST_TO_ADDR
// hackCounter := [ ] ;
1184: LD_ADDR_EXP 6
1188: PUSH
1189: EMPTY
1190: ST_TO_ADDR
// end ;
1191: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
1192: LD_EXP 1
1196: PUSH
1197: LD_INT 34
1199: PUSH
1200: LD_INT 99
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PPUSH
1207: CALL_OW 69
1211: AND
1212: IFFALSE 1465
1214: GO 1216
1216: DISABLE
1217: LD_INT 0
1219: PPUSH
1220: PPUSH
// begin enable ;
1221: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
1222: LD_ADDR_VAR 0 1
1226: PUSH
1227: LD_INT 34
1229: PUSH
1230: LD_INT 99
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 69
1241: PUSH
1242: FOR_IN
1243: IFFALSE 1463
// begin if not i in hackTanks then
1245: LD_VAR 0 1
1249: PUSH
1250: LD_EXP 2
1254: IN
1255: NOT
1256: IFFALSE 1339
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
1258: LD_ADDR_EXP 2
1262: PUSH
1263: LD_EXP 2
1267: PPUSH
1268: LD_EXP 2
1272: PUSH
1273: LD_INT 1
1275: PLUS
1276: PPUSH
1277: LD_VAR 0 1
1281: PPUSH
1282: CALL_OW 1
1286: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_EXP 3
1296: PPUSH
1297: LD_EXP 3
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: PPUSH
1306: EMPTY
1307: PPUSH
1308: CALL_OW 1
1312: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1313: LD_ADDR_EXP 6
1317: PUSH
1318: LD_EXP 6
1322: PPUSH
1323: LD_EXP 6
1327: PUSH
1328: LD_INT 1
1330: PLUS
1331: PPUSH
1332: EMPTY
1333: PPUSH
1334: CALL_OW 1
1338: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1339: LD_VAR 0 1
1343: PPUSH
1344: CALL_OW 302
1348: NOT
1349: IFFALSE 1362
// begin HackUnlinkAll ( i ) ;
1351: LD_VAR 0 1
1355: PPUSH
1356: CALL 1468 0 1
// continue ;
1360: GO 1242
// end ; HackCheckCapturedStatus ( i ) ;
1362: LD_VAR 0 1
1366: PPUSH
1367: CALL 1911 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1371: LD_ADDR_VAR 0 2
1375: PUSH
1376: LD_INT 81
1378: PUSH
1379: LD_VAR 0 1
1383: PPUSH
1384: CALL_OW 255
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 33
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 91
1405: PUSH
1406: LD_VAR 0 1
1410: PUSH
1411: LD_EXP 5
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 50
1423: PUSH
1424: EMPTY
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: PPUSH
1433: CALL_OW 69
1437: ST_TO_ADDR
// if not tmp then
1438: LD_VAR 0 2
1442: NOT
1443: IFFALSE 1447
// continue ;
1445: GO 1242
// HackLink ( i , tmp ) ;
1447: LD_VAR 0 1
1451: PPUSH
1452: LD_VAR 0 2
1456: PPUSH
1457: CALL 1604 0 2
// end ;
1461: GO 1242
1463: POP
1464: POP
// end ;
1465: PPOPN 2
1467: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
// if not hack in hackTanks then
1473: LD_VAR 0 1
1477: PUSH
1478: LD_EXP 2
1482: IN
1483: NOT
1484: IFFALSE 1488
// exit ;
1486: GO 1599
// index := GetElementIndex ( hackTanks , hack ) ;
1488: LD_ADDR_VAR 0 4
1492: PUSH
1493: LD_EXP 2
1497: PPUSH
1498: LD_VAR 0 1
1502: PPUSH
1503: CALL 25015 0 2
1507: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1508: LD_EXP 3
1512: PUSH
1513: LD_VAR 0 4
1517: ARRAY
1518: IFFALSE 1599
// begin for i in hackTanksCaptured [ index ] do
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: LD_EXP 3
1529: PUSH
1530: LD_VAR 0 4
1534: ARRAY
1535: PUSH
1536: FOR_IN
1537: IFFALSE 1563
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1539: LD_VAR 0 3
1543: PUSH
1544: LD_INT 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 3
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PPUSH
1557: CALL_OW 235
1561: GO 1536
1563: POP
1564: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1565: LD_ADDR_EXP 3
1569: PUSH
1570: LD_EXP 3
1574: PPUSH
1575: LD_VAR 0 4
1579: PPUSH
1580: EMPTY
1581: PPUSH
1582: CALL_OW 1
1586: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1587: LD_VAR 0 1
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 505
// end ; end ;
1599: LD_VAR 0 2
1603: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
// if not hack in hackTanks or not vehicles then
1609: LD_VAR 0 1
1613: PUSH
1614: LD_EXP 2
1618: IN
1619: NOT
1620: PUSH
1621: LD_VAR 0 2
1625: NOT
1626: OR
1627: IFFALSE 1631
// exit ;
1629: GO 1906
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1631: LD_ADDR_VAR 0 2
1635: PUSH
1636: LD_VAR 0 1
1640: PPUSH
1641: LD_VAR 0 2
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: LD_INT 1
1651: PPUSH
1652: CALL 25665 0 4
1656: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_EXP 2
1666: PPUSH
1667: LD_VAR 0 1
1671: PPUSH
1672: CALL 25015 0 2
1676: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1677: LD_EXP 3
1681: PUSH
1682: LD_VAR 0 5
1686: ARRAY
1687: PUSH
1688: LD_EXP 4
1692: LESS
1693: IFFALSE 1882
// begin for i := 1 to vehicles do
1695: LD_ADDR_VAR 0 4
1699: PUSH
1700: DOUBLE
1701: LD_INT 1
1703: DEC
1704: ST_TO_ADDR
1705: LD_VAR 0 2
1709: PUSH
1710: FOR_TO
1711: IFFALSE 1880
// begin if hackTanksCaptured [ index ] = hackLimit then
1713: LD_EXP 3
1717: PUSH
1718: LD_VAR 0 5
1722: ARRAY
1723: PUSH
1724: LD_EXP 4
1728: EQUAL
1729: IFFALSE 1733
// break ;
1731: GO 1880
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1733: LD_ADDR_EXP 6
1737: PUSH
1738: LD_EXP 6
1742: PPUSH
1743: LD_VAR 0 5
1747: PPUSH
1748: LD_EXP 6
1752: PUSH
1753: LD_VAR 0 5
1757: ARRAY
1758: PUSH
1759: LD_INT 1
1761: PLUS
1762: PPUSH
1763: CALL_OW 1
1767: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1768: LD_ADDR_EXP 3
1772: PUSH
1773: LD_EXP 3
1777: PPUSH
1778: LD_VAR 0 5
1782: PUSH
1783: LD_EXP 3
1787: PUSH
1788: LD_VAR 0 5
1792: ARRAY
1793: PUSH
1794: LD_INT 1
1796: PLUS
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: LD_VAR 0 2
1806: PUSH
1807: LD_VAR 0 4
1811: ARRAY
1812: PUSH
1813: LD_VAR 0 2
1817: PUSH
1818: LD_VAR 0 4
1822: ARRAY
1823: PPUSH
1824: CALL_OW 255
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PPUSH
1833: CALL 25230 0 3
1837: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1838: LD_VAR 0 2
1842: PUSH
1843: LD_VAR 0 4
1847: ARRAY
1848: PPUSH
1849: LD_VAR 0 1
1853: PPUSH
1854: CALL_OW 255
1858: PPUSH
1859: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1863: LD_VAR 0 2
1867: PUSH
1868: LD_VAR 0 4
1872: ARRAY
1873: PPUSH
1874: CALL_OW 141
// end ;
1878: GO 1710
1880: POP
1881: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1882: LD_VAR 0 1
1886: PPUSH
1887: LD_EXP 3
1891: PUSH
1892: LD_VAR 0 5
1896: ARRAY
1897: PUSH
1898: LD_INT 0
1900: PLUS
1901: PPUSH
1902: CALL_OW 505
// end ;
1906: LD_VAR 0 3
1910: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
// if not hack in hackTanks then
1917: LD_VAR 0 1
1921: PUSH
1922: LD_EXP 2
1926: IN
1927: NOT
1928: IFFALSE 1932
// exit ;
1930: GO 2172
// index := GetElementIndex ( hackTanks , hack ) ;
1932: LD_ADDR_VAR 0 4
1936: PUSH
1937: LD_EXP 2
1941: PPUSH
1942: LD_VAR 0 1
1946: PPUSH
1947: CALL 25015 0 2
1951: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: DOUBLE
1958: LD_EXP 3
1962: PUSH
1963: LD_VAR 0 4
1967: ARRAY
1968: INC
1969: ST_TO_ADDR
1970: LD_INT 1
1972: PUSH
1973: FOR_DOWNTO
1974: IFFALSE 2146
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1976: LD_ADDR_VAR 0 5
1980: PUSH
1981: LD_EXP 3
1985: PUSH
1986: LD_VAR 0 4
1990: ARRAY
1991: PUSH
1992: LD_VAR 0 3
1996: ARRAY
1997: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1998: LD_VAR 0 5
2002: PUSH
2003: LD_INT 1
2005: ARRAY
2006: PPUSH
2007: CALL_OW 302
2011: NOT
2012: PUSH
2013: LD_VAR 0 5
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: CALL_OW 255
2026: PUSH
2027: LD_VAR 0 1
2031: PPUSH
2032: CALL_OW 255
2036: NONEQUAL
2037: OR
2038: IFFALSE 2144
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
2040: LD_VAR 0 5
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PPUSH
2049: CALL_OW 305
2053: PUSH
2054: LD_VAR 0 5
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PPUSH
2063: CALL_OW 255
2067: PUSH
2068: LD_VAR 0 1
2072: PPUSH
2073: CALL_OW 255
2077: EQUAL
2078: AND
2079: IFFALSE 2103
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
2081: LD_VAR 0 5
2085: PUSH
2086: LD_INT 1
2088: ARRAY
2089: PPUSH
2090: LD_VAR 0 5
2094: PUSH
2095: LD_INT 2
2097: ARRAY
2098: PPUSH
2099: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
2103: LD_ADDR_EXP 3
2107: PUSH
2108: LD_EXP 3
2112: PPUSH
2113: LD_VAR 0 4
2117: PPUSH
2118: LD_EXP 3
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 3
2133: PPUSH
2134: CALL_OW 3
2138: PPUSH
2139: CALL_OW 1
2143: ST_TO_ADDR
// end ; end ;
2144: GO 1973
2146: POP
2147: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
2148: LD_VAR 0 1
2152: PPUSH
2153: LD_EXP 3
2157: PUSH
2158: LD_VAR 0 4
2162: ARRAY
2163: PUSH
2164: LD_INT 0
2166: PLUS
2167: PPUSH
2168: CALL_OW 505
// end ;
2172: LD_VAR 0 2
2176: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
2177: LD_INT 0
2179: PPUSH
2180: PPUSH
2181: PPUSH
2182: PPUSH
// if not hack in hackTanks then
2183: LD_VAR 0 1
2187: PUSH
2188: LD_EXP 2
2192: IN
2193: NOT
2194: IFFALSE 2198
// exit ;
2196: GO 2283
// index := GetElementIndex ( hackTanks , hack ) ;
2198: LD_ADDR_VAR 0 5
2202: PUSH
2203: LD_EXP 2
2207: PPUSH
2208: LD_VAR 0 1
2212: PPUSH
2213: CALL 25015 0 2
2217: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_EXP 3
2232: PUSH
2233: LD_VAR 0 5
2237: ARRAY
2238: PUSH
2239: FOR_TO
2240: IFFALSE 2281
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
2242: LD_EXP 3
2246: PUSH
2247: LD_VAR 0 5
2251: ARRAY
2252: PUSH
2253: LD_VAR 0 4
2257: ARRAY
2258: PUSH
2259: LD_INT 1
2261: ARRAY
2262: PUSH
2263: LD_VAR 0 2
2267: EQUAL
2268: IFFALSE 2279
// KillUnit ( vehicle ) ;
2270: LD_VAR 0 2
2274: PPUSH
2275: CALL_OW 66
2279: GO 2239
2281: POP
2282: POP
// end ;
2283: LD_VAR 0 3
2287: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
2288: LD_EXP 7
2292: NOT
2293: IFFALSE 2328
2295: GO 2297
2297: DISABLE
// begin initMiner := true ;
2298: LD_ADDR_EXP 7
2302: PUSH
2303: LD_INT 1
2305: ST_TO_ADDR
// minersList := [ ] ;
2306: LD_ADDR_EXP 8
2310: PUSH
2311: EMPTY
2312: ST_TO_ADDR
// minerMinesList := [ ] ;
2313: LD_ADDR_EXP 9
2317: PUSH
2318: EMPTY
2319: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2320: LD_ADDR_EXP 10
2324: PUSH
2325: LD_INT 5
2327: ST_TO_ADDR
// end ;
2328: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2329: LD_EXP 7
2333: PUSH
2334: LD_INT 34
2336: PUSH
2337: LD_INT 81
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PPUSH
2344: CALL_OW 69
2348: AND
2349: IFFALSE 2810
2351: GO 2353
2353: DISABLE
2354: LD_INT 0
2356: PPUSH
2357: PPUSH
2358: PPUSH
2359: PPUSH
// begin enable ;
2360: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2361: LD_ADDR_VAR 0 1
2365: PUSH
2366: LD_INT 34
2368: PUSH
2369: LD_INT 81
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: FOR_IN
2382: IFFALSE 2454
// begin if not i in minersList then
2384: LD_VAR 0 1
2388: PUSH
2389: LD_EXP 8
2393: IN
2394: NOT
2395: IFFALSE 2452
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2397: LD_ADDR_EXP 8
2401: PUSH
2402: LD_EXP 8
2406: PPUSH
2407: LD_EXP 8
2411: PUSH
2412: LD_INT 1
2414: PLUS
2415: PPUSH
2416: LD_VAR 0 1
2420: PPUSH
2421: CALL_OW 1
2425: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2426: LD_ADDR_EXP 9
2430: PUSH
2431: LD_EXP 9
2435: PPUSH
2436: LD_EXP 9
2440: PUSH
2441: LD_INT 1
2443: PLUS
2444: PPUSH
2445: EMPTY
2446: PPUSH
2447: CALL_OW 1
2451: ST_TO_ADDR
// end end ;
2452: GO 2381
2454: POP
2455: POP
// for i := minerMinesList downto 1 do
2456: LD_ADDR_VAR 0 1
2460: PUSH
2461: DOUBLE
2462: LD_EXP 9
2466: INC
2467: ST_TO_ADDR
2468: LD_INT 1
2470: PUSH
2471: FOR_DOWNTO
2472: IFFALSE 2808
// begin if IsLive ( minersList [ i ] ) then
2474: LD_EXP 8
2478: PUSH
2479: LD_VAR 0 1
2483: ARRAY
2484: PPUSH
2485: CALL_OW 300
2489: IFFALSE 2517
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2491: LD_EXP 8
2495: PUSH
2496: LD_VAR 0 1
2500: ARRAY
2501: PPUSH
2502: LD_EXP 9
2506: PUSH
2507: LD_VAR 0 1
2511: ARRAY
2512: PPUSH
2513: CALL_OW 505
// if not minerMinesList [ i ] then
2517: LD_EXP 9
2521: PUSH
2522: LD_VAR 0 1
2526: ARRAY
2527: NOT
2528: IFFALSE 2532
// continue ;
2530: GO 2471
// for j := minerMinesList [ i ] downto 1 do
2532: LD_ADDR_VAR 0 2
2536: PUSH
2537: DOUBLE
2538: LD_EXP 9
2542: PUSH
2543: LD_VAR 0 1
2547: ARRAY
2548: INC
2549: ST_TO_ADDR
2550: LD_INT 1
2552: PUSH
2553: FOR_DOWNTO
2554: IFFALSE 2804
// begin side := GetSide ( minersList [ i ] ) ;
2556: LD_ADDR_VAR 0 3
2560: PUSH
2561: LD_EXP 8
2565: PUSH
2566: LD_VAR 0 1
2570: ARRAY
2571: PPUSH
2572: CALL_OW 255
2576: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: LD_EXP 9
2586: PUSH
2587: LD_VAR 0 1
2591: ARRAY
2592: PUSH
2593: LD_VAR 0 2
2597: ARRAY
2598: PUSH
2599: LD_INT 1
2601: ARRAY
2602: PPUSH
2603: LD_EXP 9
2607: PUSH
2608: LD_VAR 0 1
2612: ARRAY
2613: PUSH
2614: LD_VAR 0 2
2618: ARRAY
2619: PUSH
2620: LD_INT 2
2622: ARRAY
2623: PPUSH
2624: CALL_OW 428
2628: ST_TO_ADDR
// if not tmp then
2629: LD_VAR 0 4
2633: NOT
2634: IFFALSE 2638
// continue ;
2636: GO 2553
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2638: LD_VAR 0 4
2642: PUSH
2643: LD_INT 81
2645: PUSH
2646: LD_VAR 0 3
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PPUSH
2655: CALL_OW 69
2659: IN
2660: PUSH
2661: LD_EXP 9
2665: PUSH
2666: LD_VAR 0 1
2670: ARRAY
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_INT 1
2680: ARRAY
2681: PPUSH
2682: LD_EXP 9
2686: PUSH
2687: LD_VAR 0 1
2691: ARRAY
2692: PUSH
2693: LD_VAR 0 2
2697: ARRAY
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PPUSH
2703: CALL_OW 458
2707: AND
2708: IFFALSE 2802
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
2710: LD_EXP 9
2714: PUSH
2715: LD_VAR 0 1
2719: ARRAY
2720: PUSH
2721: LD_VAR 0 2
2725: ARRAY
2726: PUSH
2727: LD_INT 1
2729: ARRAY
2730: PPUSH
2731: LD_EXP 9
2735: PUSH
2736: LD_VAR 0 1
2740: ARRAY
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 3
2756: PPUSH
2757: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
2761: LD_ADDR_EXP 9
2765: PUSH
2766: LD_EXP 9
2770: PPUSH
2771: LD_VAR 0 1
2775: PPUSH
2776: LD_EXP 9
2780: PUSH
2781: LD_VAR 0 1
2785: ARRAY
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: CALL_OW 3
2796: PPUSH
2797: CALL_OW 1
2801: ST_TO_ADDR
// end ; end ;
2802: GO 2553
2804: POP
2805: POP
// end ;
2806: GO 2471
2808: POP
2809: POP
// end ;
2810: PPOPN 4
2812: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
2813: LD_INT 0
2815: PPUSH
2816: PPUSH
// result := false ;
2817: LD_ADDR_VAR 0 4
2821: PUSH
2822: LD_INT 0
2824: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
2825: LD_VAR 0 1
2829: PPUSH
2830: CALL_OW 264
2834: PUSH
2835: LD_INT 81
2837: EQUAL
2838: NOT
2839: IFFALSE 2843
// exit ;
2841: GO 3083
// index := GetElementIndex ( minersList , unit ) ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_EXP 8
2852: PPUSH
2853: LD_VAR 0 1
2857: PPUSH
2858: CALL 25015 0 2
2862: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
2863: LD_EXP 9
2867: PUSH
2868: LD_VAR 0 5
2872: ARRAY
2873: PUSH
2874: LD_EXP 10
2878: GREATEREQUAL
2879: IFFALSE 2883
// exit ;
2881: GO 3083
// ComMoveXY ( unit , x , y ) ;
2883: LD_VAR 0 1
2887: PPUSH
2888: LD_VAR 0 2
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2902: LD_INT 35
2904: PPUSH
2905: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
2909: LD_VAR 0 1
2913: PPUSH
2914: LD_VAR 0 2
2918: PPUSH
2919: LD_VAR 0 3
2923: PPUSH
2924: CALL 56370 0 3
2928: NOT
2929: PUSH
2930: LD_VAR 0 1
2934: PPUSH
2935: CALL_OW 314
2939: AND
2940: IFFALSE 2944
// exit ;
2942: GO 3083
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_VAR 0 3
2953: PPUSH
2954: CALL_OW 428
2958: PUSH
2959: LD_VAR 0 1
2963: EQUAL
2964: PUSH
2965: LD_VAR 0 1
2969: PPUSH
2970: CALL_OW 314
2974: NOT
2975: AND
2976: IFFALSE 2902
// PlaySoundXY ( x , y , PlantMine ) ;
2978: LD_VAR 0 2
2982: PPUSH
2983: LD_VAR 0 3
2987: PPUSH
2988: LD_STRING PlantMine
2990: PPUSH
2991: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_VAR 0 1
3009: PPUSH
3010: CALL_OW 255
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
3022: LD_ADDR_EXP 9
3026: PUSH
3027: LD_EXP 9
3031: PPUSH
3032: LD_VAR 0 5
3036: PUSH
3037: LD_EXP 9
3041: PUSH
3042: LD_VAR 0 5
3046: ARRAY
3047: PUSH
3048: LD_INT 1
3050: PLUS
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PPUSH
3056: LD_VAR 0 2
3060: PUSH
3061: LD_VAR 0 3
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PPUSH
3070: CALL 25230 0 3
3074: ST_TO_ADDR
// result := true ;
3075: LD_ADDR_VAR 0 4
3079: PUSH
3080: LD_INT 1
3082: ST_TO_ADDR
// end ;
3083: LD_VAR 0 4
3087: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
// if not unit in minersList then
3093: LD_VAR 0 1
3097: PUSH
3098: LD_EXP 8
3102: IN
3103: NOT
3104: IFFALSE 3108
// exit ;
3106: GO 3500
// index := GetElementIndex ( minersList , unit ) ;
3108: LD_ADDR_VAR 0 6
3112: PUSH
3113: LD_EXP 8
3117: PPUSH
3118: LD_VAR 0 1
3122: PPUSH
3123: CALL 25015 0 2
3127: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
3128: LD_ADDR_VAR 0 5
3132: PUSH
3133: DOUBLE
3134: LD_EXP 9
3138: PUSH
3139: LD_VAR 0 6
3143: ARRAY
3144: INC
3145: ST_TO_ADDR
3146: LD_INT 1
3148: PUSH
3149: FOR_DOWNTO
3150: IFFALSE 3311
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
3152: LD_EXP 9
3156: PUSH
3157: LD_VAR 0 6
3161: ARRAY
3162: PUSH
3163: LD_VAR 0 5
3167: ARRAY
3168: PUSH
3169: LD_INT 1
3171: ARRAY
3172: PUSH
3173: LD_VAR 0 2
3177: EQUAL
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_VAR 0 6
3188: ARRAY
3189: PUSH
3190: LD_VAR 0 5
3194: ARRAY
3195: PUSH
3196: LD_INT 2
3198: ARRAY
3199: PUSH
3200: LD_VAR 0 3
3204: EQUAL
3205: AND
3206: IFFALSE 3309
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3208: LD_EXP 9
3212: PUSH
3213: LD_VAR 0 6
3217: ARRAY
3218: PUSH
3219: LD_VAR 0 5
3223: ARRAY
3224: PUSH
3225: LD_INT 1
3227: ARRAY
3228: PPUSH
3229: LD_EXP 9
3233: PUSH
3234: LD_VAR 0 6
3238: ARRAY
3239: PUSH
3240: LD_VAR 0 5
3244: ARRAY
3245: PUSH
3246: LD_INT 2
3248: ARRAY
3249: PPUSH
3250: LD_VAR 0 1
3254: PPUSH
3255: CALL_OW 255
3259: PPUSH
3260: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3264: LD_ADDR_EXP 9
3268: PUSH
3269: LD_EXP 9
3273: PPUSH
3274: LD_VAR 0 6
3278: PPUSH
3279: LD_EXP 9
3283: PUSH
3284: LD_VAR 0 6
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 5
3294: PPUSH
3295: CALL_OW 3
3299: PPUSH
3300: CALL_OW 1
3304: ST_TO_ADDR
// exit ;
3305: POP
3306: POP
3307: GO 3500
// end ; end ;
3309: GO 3149
3311: POP
3312: POP
// for i := minerMinesList [ index ] downto 1 do
3313: LD_ADDR_VAR 0 5
3317: PUSH
3318: DOUBLE
3319: LD_EXP 9
3323: PUSH
3324: LD_VAR 0 6
3328: ARRAY
3329: INC
3330: ST_TO_ADDR
3331: LD_INT 1
3333: PUSH
3334: FOR_DOWNTO
3335: IFFALSE 3498
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3337: LD_EXP 9
3341: PUSH
3342: LD_VAR 0 6
3346: ARRAY
3347: PUSH
3348: LD_VAR 0 5
3352: ARRAY
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: PPUSH
3358: LD_EXP 9
3362: PUSH
3363: LD_VAR 0 6
3367: ARRAY
3368: PUSH
3369: LD_VAR 0 5
3373: ARRAY
3374: PUSH
3375: LD_INT 2
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 2
3383: PPUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL_OW 298
3393: PUSH
3394: LD_INT 6
3396: LESS
3397: IFFALSE 3496
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3399: LD_EXP 9
3403: PUSH
3404: LD_VAR 0 6
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 5
3414: ARRAY
3415: PUSH
3416: LD_INT 1
3418: ARRAY
3419: PPUSH
3420: LD_EXP 9
3424: PUSH
3425: LD_VAR 0 6
3429: ARRAY
3430: PUSH
3431: LD_VAR 0 5
3435: ARRAY
3436: PUSH
3437: LD_INT 2
3439: ARRAY
3440: PPUSH
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 255
3450: PPUSH
3451: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3455: LD_ADDR_EXP 9
3459: PUSH
3460: LD_EXP 9
3464: PPUSH
3465: LD_VAR 0 6
3469: PPUSH
3470: LD_EXP 9
3474: PUSH
3475: LD_VAR 0 6
3479: ARRAY
3480: PPUSH
3481: LD_VAR 0 5
3485: PPUSH
3486: CALL_OW 3
3490: PPUSH
3491: CALL_OW 1
3495: ST_TO_ADDR
// end ; end ;
3496: GO 3334
3498: POP
3499: POP
// end ;
3500: LD_VAR 0 4
3504: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3505: LD_INT 0
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
3515: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3516: LD_VAR 0 1
3520: PPUSH
3521: CALL_OW 264
3525: PUSH
3526: LD_INT 81
3528: EQUAL
3529: NOT
3530: PUSH
3531: LD_VAR 0 1
3535: PUSH
3536: LD_EXP 8
3540: IN
3541: NOT
3542: OR
3543: IFFALSE 3547
// exit ;
3545: GO 3869
// index := GetElementIndex ( minersList , unit ) ;
3547: LD_ADDR_VAR 0 6
3551: PUSH
3552: LD_EXP 8
3556: PPUSH
3557: LD_VAR 0 1
3561: PPUSH
3562: CALL 25015 0 2
3566: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3567: LD_ADDR_VAR 0 8
3571: PUSH
3572: LD_EXP 10
3576: PUSH
3577: LD_EXP 9
3581: PUSH
3582: LD_VAR 0 6
3586: ARRAY
3587: MINUS
3588: ST_TO_ADDR
// if not minesFreeAmount then
3589: LD_VAR 0 8
3593: NOT
3594: IFFALSE 3598
// exit ;
3596: GO 3869
// tmp := [ ] ;
3598: LD_ADDR_VAR 0 7
3602: PUSH
3603: EMPTY
3604: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: DOUBLE
3611: LD_INT 1
3613: DEC
3614: ST_TO_ADDR
3615: LD_VAR 0 8
3619: PUSH
3620: FOR_TO
3621: IFFALSE 3816
// begin _d := rand ( 0 , 5 ) ;
3623: LD_ADDR_VAR 0 11
3627: PUSH
3628: LD_INT 0
3630: PPUSH
3631: LD_INT 5
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3639: LD_ADDR_VAR 0 12
3643: PUSH
3644: LD_INT 2
3646: PPUSH
3647: LD_INT 6
3649: PPUSH
3650: CALL_OW 12
3654: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
3655: LD_ADDR_VAR 0 9
3659: PUSH
3660: LD_VAR 0 2
3664: PPUSH
3665: LD_VAR 0 11
3669: PPUSH
3670: LD_VAR 0 12
3674: PPUSH
3675: CALL_OW 272
3679: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
3680: LD_ADDR_VAR 0 10
3684: PUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_VAR 0 11
3694: PPUSH
3695: LD_VAR 0 12
3699: PPUSH
3700: CALL_OW 273
3704: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
3705: LD_VAR 0 9
3709: PPUSH
3710: LD_VAR 0 10
3714: PPUSH
3715: CALL_OW 488
3719: PUSH
3720: LD_VAR 0 9
3724: PUSH
3725: LD_VAR 0 10
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PUSH
3734: LD_VAR 0 7
3738: IN
3739: NOT
3740: AND
3741: PUSH
3742: LD_VAR 0 9
3746: PPUSH
3747: LD_VAR 0 10
3751: PPUSH
3752: CALL_OW 458
3756: NOT
3757: AND
3758: IFFALSE 3800
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
3760: LD_ADDR_VAR 0 7
3764: PUSH
3765: LD_VAR 0 7
3769: PPUSH
3770: LD_VAR 0 7
3774: PUSH
3775: LD_INT 1
3777: PLUS
3778: PPUSH
3779: LD_VAR 0 9
3783: PUSH
3784: LD_VAR 0 10
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: PPUSH
3793: CALL_OW 1
3797: ST_TO_ADDR
3798: GO 3814
// i := i - 1 ;
3800: LD_ADDR_VAR 0 5
3804: PUSH
3805: LD_VAR 0 5
3809: PUSH
3810: LD_INT 1
3812: MINUS
3813: ST_TO_ADDR
// end ;
3814: GO 3620
3816: POP
3817: POP
// for i in tmp do
3818: LD_ADDR_VAR 0 5
3822: PUSH
3823: LD_VAR 0 7
3827: PUSH
3828: FOR_IN
3829: IFFALSE 3867
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
3831: LD_VAR 0 1
3835: PPUSH
3836: LD_VAR 0 5
3840: PUSH
3841: LD_INT 1
3843: ARRAY
3844: PPUSH
3845: LD_VAR 0 5
3849: PUSH
3850: LD_INT 2
3852: ARRAY
3853: PPUSH
3854: CALL 2813 0 3
3858: NOT
3859: IFFALSE 3865
// exit ;
3861: POP
3862: POP
3863: GO 3869
3865: GO 3828
3867: POP
3868: POP
// end ;
3869: LD_VAR 0 4
3873: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
3874: LD_INT 0
3876: PPUSH
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
3881: PPUSH
3882: PPUSH
// if not GetClass ( unit ) = class_sniper then
3883: LD_VAR 0 1
3887: PPUSH
3888: CALL_OW 257
3892: PUSH
3893: LD_INT 5
3895: EQUAL
3896: NOT
3897: IFFALSE 3901
// exit ;
3899: GO 4289
// dist := 8 ;
3901: LD_ADDR_VAR 0 5
3905: PUSH
3906: LD_INT 8
3908: ST_TO_ADDR
// viewRange := 12 ;
3909: LD_ADDR_VAR 0 7
3913: PUSH
3914: LD_INT 12
3916: ST_TO_ADDR
// side := GetSide ( unit ) ;
3917: LD_ADDR_VAR 0 6
3921: PUSH
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 255
3931: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
3932: LD_INT 61
3934: PPUSH
3935: LD_VAR 0 6
3939: PPUSH
3940: CALL_OW 321
3944: PUSH
3945: LD_INT 2
3947: EQUAL
3948: IFFALSE 3958
// viewRange := 16 ;
3950: LD_ADDR_VAR 0 7
3954: PUSH
3955: LD_INT 16
3957: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_VAR 0 2
3967: PPUSH
3968: LD_VAR 0 3
3972: PPUSH
3973: CALL_OW 297
3977: PUSH
3978: LD_VAR 0 5
3982: GREATER
3983: IFFALSE 4062
// begin ComMoveXY ( unit , x , y ) ;
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_VAR 0 2
3994: PPUSH
3995: LD_VAR 0 3
3999: PPUSH
4000: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4004: LD_INT 35
4006: PPUSH
4007: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
4011: LD_VAR 0 1
4015: PPUSH
4016: LD_VAR 0 2
4020: PPUSH
4021: LD_VAR 0 3
4025: PPUSH
4026: CALL 56370 0 3
4030: NOT
4031: IFFALSE 4035
// exit ;
4033: GO 4289
// until GetDistUnitXY ( unit , x , y ) < dist ;
4035: LD_VAR 0 1
4039: PPUSH
4040: LD_VAR 0 2
4044: PPUSH
4045: LD_VAR 0 3
4049: PPUSH
4050: CALL_OW 297
4054: PUSH
4055: LD_VAR 0 5
4059: LESS
4060: IFFALSE 4004
// end ; ComTurnXY ( unit , x , y ) ;
4062: LD_VAR 0 1
4066: PPUSH
4067: LD_VAR 0 2
4071: PPUSH
4072: LD_VAR 0 3
4076: PPUSH
4077: CALL_OW 118
// wait ( 5 ) ;
4081: LD_INT 5
4083: PPUSH
4084: CALL_OW 67
// _d := GetDir ( unit ) ;
4088: LD_ADDR_VAR 0 10
4092: PUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 254
4102: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
4103: LD_ADDR_VAR 0 8
4107: PUSH
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 250
4117: PPUSH
4118: LD_VAR 0 10
4122: PPUSH
4123: LD_VAR 0 5
4127: PPUSH
4128: CALL_OW 272
4132: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
4133: LD_ADDR_VAR 0 9
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: CALL_OW 251
4147: PPUSH
4148: LD_VAR 0 10
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: CALL_OW 273
4162: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4163: LD_VAR 0 8
4167: PPUSH
4168: LD_VAR 0 9
4172: PPUSH
4173: CALL_OW 488
4177: NOT
4178: IFFALSE 4182
// exit ;
4180: GO 4289
// ComAnimCustom ( unit , 1 ) ;
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
4194: LD_VAR 0 8
4198: PPUSH
4199: LD_VAR 0 9
4203: PPUSH
4204: LD_VAR 0 6
4208: PPUSH
4209: LD_VAR 0 7
4213: PPUSH
4214: CALL_OW 330
// repeat wait ( 1 ) ;
4218: LD_INT 1
4220: PPUSH
4221: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
4225: LD_VAR 0 1
4229: PPUSH
4230: CALL_OW 316
4234: PUSH
4235: LD_VAR 0 1
4239: PPUSH
4240: CALL_OW 314
4244: OR
4245: PUSH
4246: LD_VAR 0 1
4250: PPUSH
4251: CALL_OW 302
4255: NOT
4256: OR
4257: PUSH
4258: LD_VAR 0 1
4262: PPUSH
4263: CALL_OW 301
4267: OR
4268: IFFALSE 4218
// RemoveSeeing ( _x , _y , side ) ;
4270: LD_VAR 0 8
4274: PPUSH
4275: LD_VAR 0 9
4279: PPUSH
4280: LD_VAR 0 6
4284: PPUSH
4285: CALL_OW 331
// end ; end_of_file
4289: LD_VAR 0 4
4293: RET
// export ru_radar every 0 0$1 do
4294: GO 4296
4296: DISABLE
// begin enable ;
4297: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4298: LD_STRING updateTimer(
4300: PUSH
4301: LD_OWVAR 1
4305: STR
4306: PUSH
4307: LD_STRING );
4309: STR
4310: PPUSH
4311: CALL_OW 559
// end ;
4315: END
// export function SOS_MapStart ( ) ; begin
4316: LD_INT 0
4318: PPUSH
// if streamModeActive then
4319: LD_EXP 12
4323: IFFALSE 4332
// DefineStreamItems ( true ) ;
4325: LD_INT 1
4327: PPUSH
4328: CALL 6136 0 1
// UpdateLuaVariables ( ) ;
4332: CALL 4349 0 0
// UpdateFactoryWaypoints ( ) ;
4336: CALL 18997 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4340: CALL 19254 0 0
// end ;
4344: LD_VAR 0 1
4348: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
4349: LD_INT 0
4351: PPUSH
// if not globalGameSaveCounter then
4352: LD_EXP 11
4356: NOT
4357: IFFALSE 4368
// ToLua ( setGameSaveCounter(0) ) else
4359: LD_STRING setGameSaveCounter(0)
4361: PPUSH
4362: CALL_OW 559
4366: GO 4400
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4368: LD_ADDR_EXP 11
4372: PUSH
4373: LD_EXP 11
4377: PPUSH
4378: CALL 58922 0 1
4382: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4383: LD_STRING setGameSaveCounter(
4385: PUSH
4386: LD_EXP 11
4390: STR
4391: PUSH
4392: LD_STRING )
4394: STR
4395: PPUSH
4396: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4400: LD_STRING setGameDifficulty(
4402: PUSH
4403: LD_OWVAR 67
4407: STR
4408: PUSH
4409: LD_STRING )
4411: STR
4412: PPUSH
4413: CALL_OW 559
// end ;
4417: LD_VAR 0 1
4421: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4422: LD_INT 0
4424: PPUSH
// if p2 = stream_mode then
4425: LD_VAR 0 2
4429: PUSH
4430: LD_INT 100
4432: EQUAL
4433: IFFALSE 5436
// begin if not StreamModeActive then
4435: LD_EXP 12
4439: NOT
4440: IFFALSE 4450
// StreamModeActive := true ;
4442: LD_ADDR_EXP 12
4446: PUSH
4447: LD_INT 1
4449: ST_TO_ADDR
// if p3 = 0 then
4450: LD_VAR 0 3
4454: PUSH
4455: LD_INT 0
4457: EQUAL
4458: IFFALSE 4464
// InitStreamMode ;
4460: CALL 5672 0 0
// if p3 = 1 then
4464: LD_VAR 0 3
4468: PUSH
4469: LD_INT 1
4471: EQUAL
4472: IFFALSE 4482
// sRocket := true ;
4474: LD_ADDR_EXP 17
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// if p3 = 2 then
4482: LD_VAR 0 3
4486: PUSH
4487: LD_INT 2
4489: EQUAL
4490: IFFALSE 4500
// sSpeed := true ;
4492: LD_ADDR_EXP 16
4496: PUSH
4497: LD_INT 1
4499: ST_TO_ADDR
// if p3 = 3 then
4500: LD_VAR 0 3
4504: PUSH
4505: LD_INT 3
4507: EQUAL
4508: IFFALSE 4518
// sEngine := true ;
4510: LD_ADDR_EXP 18
4514: PUSH
4515: LD_INT 1
4517: ST_TO_ADDR
// if p3 = 4 then
4518: LD_VAR 0 3
4522: PUSH
4523: LD_INT 4
4525: EQUAL
4526: IFFALSE 4536
// sSpec := true ;
4528: LD_ADDR_EXP 15
4532: PUSH
4533: LD_INT 1
4535: ST_TO_ADDR
// if p3 = 5 then
4536: LD_VAR 0 3
4540: PUSH
4541: LD_INT 5
4543: EQUAL
4544: IFFALSE 4554
// sLevel := true ;
4546: LD_ADDR_EXP 19
4550: PUSH
4551: LD_INT 1
4553: ST_TO_ADDR
// if p3 = 6 then
4554: LD_VAR 0 3
4558: PUSH
4559: LD_INT 6
4561: EQUAL
4562: IFFALSE 4572
// sArmoury := true ;
4564: LD_ADDR_EXP 20
4568: PUSH
4569: LD_INT 1
4571: ST_TO_ADDR
// if p3 = 7 then
4572: LD_VAR 0 3
4576: PUSH
4577: LD_INT 7
4579: EQUAL
4580: IFFALSE 4590
// sRadar := true ;
4582: LD_ADDR_EXP 21
4586: PUSH
4587: LD_INT 1
4589: ST_TO_ADDR
// if p3 = 8 then
4590: LD_VAR 0 3
4594: PUSH
4595: LD_INT 8
4597: EQUAL
4598: IFFALSE 4608
// sBunker := true ;
4600: LD_ADDR_EXP 22
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// if p3 = 9 then
4608: LD_VAR 0 3
4612: PUSH
4613: LD_INT 9
4615: EQUAL
4616: IFFALSE 4626
// sHack := true ;
4618: LD_ADDR_EXP 23
4622: PUSH
4623: LD_INT 1
4625: ST_TO_ADDR
// if p3 = 10 then
4626: LD_VAR 0 3
4630: PUSH
4631: LD_INT 10
4633: EQUAL
4634: IFFALSE 4644
// sFire := true ;
4636: LD_ADDR_EXP 24
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// if p3 = 11 then
4644: LD_VAR 0 3
4648: PUSH
4649: LD_INT 11
4651: EQUAL
4652: IFFALSE 4662
// sRefresh := true ;
4654: LD_ADDR_EXP 25
4658: PUSH
4659: LD_INT 1
4661: ST_TO_ADDR
// if p3 = 12 then
4662: LD_VAR 0 3
4666: PUSH
4667: LD_INT 12
4669: EQUAL
4670: IFFALSE 4680
// sExp := true ;
4672: LD_ADDR_EXP 26
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// if p3 = 13 then
4680: LD_VAR 0 3
4684: PUSH
4685: LD_INT 13
4687: EQUAL
4688: IFFALSE 4698
// sDepot := true ;
4690: LD_ADDR_EXP 27
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// if p3 = 14 then
4698: LD_VAR 0 3
4702: PUSH
4703: LD_INT 14
4705: EQUAL
4706: IFFALSE 4716
// sFlag := true ;
4708: LD_ADDR_EXP 28
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// if p3 = 15 then
4716: LD_VAR 0 3
4720: PUSH
4721: LD_INT 15
4723: EQUAL
4724: IFFALSE 4734
// sKamikadze := true ;
4726: LD_ADDR_EXP 36
4730: PUSH
4731: LD_INT 1
4733: ST_TO_ADDR
// if p3 = 16 then
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 16
4741: EQUAL
4742: IFFALSE 4752
// sTroll := true ;
4744: LD_ADDR_EXP 37
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// if p3 = 17 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 17
4759: EQUAL
4760: IFFALSE 4770
// sSlow := true ;
4762: LD_ADDR_EXP 38
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 18 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 18
4777: EQUAL
4778: IFFALSE 4788
// sLack := true ;
4780: LD_ADDR_EXP 39
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 19 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 19
4795: EQUAL
4796: IFFALSE 4806
// sTank := true ;
4798: LD_ADDR_EXP 41
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 20 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 20
4813: EQUAL
4814: IFFALSE 4824
// sRemote := true ;
4816: LD_ADDR_EXP 42
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 21 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 21
4831: EQUAL
4832: IFFALSE 4842
// sPowell := true ;
4834: LD_ADDR_EXP 43
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 22 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 22
4849: EQUAL
4850: IFFALSE 4860
// sTeleport := true ;
4852: LD_ADDR_EXP 46
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 23 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 23
4867: EQUAL
4868: IFFALSE 4878
// sOilTower := true ;
4870: LD_ADDR_EXP 48
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 24 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 24
4885: EQUAL
4886: IFFALSE 4896
// sShovel := true ;
4888: LD_ADDR_EXP 49
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 25 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 25
4903: EQUAL
4904: IFFALSE 4914
// sSheik := true ;
4906: LD_ADDR_EXP 50
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 26 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 26
4921: EQUAL
4922: IFFALSE 4932
// sEarthquake := true ;
4924: LD_ADDR_EXP 52
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 27 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 27
4939: EQUAL
4940: IFFALSE 4950
// sAI := true ;
4942: LD_ADDR_EXP 53
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 28 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 28
4957: EQUAL
4958: IFFALSE 4968
// sCargo := true ;
4960: LD_ADDR_EXP 56
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 29 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 29
4975: EQUAL
4976: IFFALSE 4986
// sDLaser := true ;
4978: LD_ADDR_EXP 57
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 30 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 30
4993: EQUAL
4994: IFFALSE 5004
// sExchange := true ;
4996: LD_ADDR_EXP 58
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 31 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 31
5011: EQUAL
5012: IFFALSE 5022
// sFac := true ;
5014: LD_ADDR_EXP 59
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 32 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 32
5029: EQUAL
5030: IFFALSE 5040
// sPower := true ;
5032: LD_ADDR_EXP 60
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 33 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 33
5047: EQUAL
5048: IFFALSE 5058
// sRandom := true ;
5050: LD_ADDR_EXP 61
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 34 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 34
5065: EQUAL
5066: IFFALSE 5076
// sShield := true ;
5068: LD_ADDR_EXP 62
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 35 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 35
5083: EQUAL
5084: IFFALSE 5094
// sTime := true ;
5086: LD_ADDR_EXP 63
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 36 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 36
5101: EQUAL
5102: IFFALSE 5112
// sTools := true ;
5104: LD_ADDR_EXP 64
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 101 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 101
5119: EQUAL
5120: IFFALSE 5130
// sSold := true ;
5122: LD_ADDR_EXP 29
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 102 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 102
5137: EQUAL
5138: IFFALSE 5148
// sDiff := true ;
5140: LD_ADDR_EXP 30
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 103 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 103
5155: EQUAL
5156: IFFALSE 5166
// sFog := true ;
5158: LD_ADDR_EXP 33
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 104 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 104
5173: EQUAL
5174: IFFALSE 5184
// sReset := true ;
5176: LD_ADDR_EXP 34
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 105 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 105
5191: EQUAL
5192: IFFALSE 5202
// sSun := true ;
5194: LD_ADDR_EXP 35
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 106 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 106
5209: EQUAL
5210: IFFALSE 5220
// sTiger := true ;
5212: LD_ADDR_EXP 31
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// if p3 = 107 then
5220: LD_VAR 0 3
5224: PUSH
5225: LD_INT 107
5227: EQUAL
5228: IFFALSE 5238
// sBomb := true ;
5230: LD_ADDR_EXP 32
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// if p3 = 108 then
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 108
5245: EQUAL
5246: IFFALSE 5256
// sWound := true ;
5248: LD_ADDR_EXP 40
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// if p3 = 109 then
5256: LD_VAR 0 3
5260: PUSH
5261: LD_INT 109
5263: EQUAL
5264: IFFALSE 5274
// sBetray := true ;
5266: LD_ADDR_EXP 44
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// if p3 = 110 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 110
5281: EQUAL
5282: IFFALSE 5292
// sContamin := true ;
5284: LD_ADDR_EXP 45
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// if p3 = 111 then
5292: LD_VAR 0 3
5296: PUSH
5297: LD_INT 111
5299: EQUAL
5300: IFFALSE 5310
// sOil := true ;
5302: LD_ADDR_EXP 47
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// if p3 = 112 then
5310: LD_VAR 0 3
5314: PUSH
5315: LD_INT 112
5317: EQUAL
5318: IFFALSE 5328
// sStu := true ;
5320: LD_ADDR_EXP 51
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// if p3 = 113 then
5328: LD_VAR 0 3
5332: PUSH
5333: LD_INT 113
5335: EQUAL
5336: IFFALSE 5346
// sBazooka := true ;
5338: LD_ADDR_EXP 54
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// if p3 = 114 then
5346: LD_VAR 0 3
5350: PUSH
5351: LD_INT 114
5353: EQUAL
5354: IFFALSE 5364
// sMortar := true ;
5356: LD_ADDR_EXP 55
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// if p3 = 115 then
5364: LD_VAR 0 3
5368: PUSH
5369: LD_INT 115
5371: EQUAL
5372: IFFALSE 5382
// sRanger := true ;
5374: LD_ADDR_EXP 65
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// if p3 = 116 then
5382: LD_VAR 0 3
5386: PUSH
5387: LD_INT 116
5389: EQUAL
5390: IFFALSE 5400
// sComputer := true ;
5392: LD_ADDR_EXP 66
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if p3 = 117 then
5400: LD_VAR 0 3
5404: PUSH
5405: LD_INT 117
5407: EQUAL
5408: IFFALSE 5418
// s30 := true ;
5410: LD_ADDR_EXP 67
5414: PUSH
5415: LD_INT 1
5417: ST_TO_ADDR
// if p3 = 118 then
5418: LD_VAR 0 3
5422: PUSH
5423: LD_INT 118
5425: EQUAL
5426: IFFALSE 5436
// s60 := true ;
5428: LD_ADDR_EXP 68
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// end ; if p2 = hack_mode then
5436: LD_VAR 0 2
5440: PUSH
5441: LD_INT 101
5443: EQUAL
5444: IFFALSE 5572
// begin case p3 of 1 :
5446: LD_VAR 0 3
5450: PUSH
5451: LD_INT 1
5453: DOUBLE
5454: EQUAL
5455: IFTRUE 5459
5457: GO 5466
5459: POP
// hHackUnlimitedResources ; 2 :
5460: CALL 17743 0 0
5464: GO 5572
5466: LD_INT 2
5468: DOUBLE
5469: EQUAL
5470: IFTRUE 5474
5472: GO 5481
5474: POP
// hHackSetLevel10 ; 3 :
5475: CALL 17876 0 0
5479: GO 5572
5481: LD_INT 3
5483: DOUBLE
5484: EQUAL
5485: IFTRUE 5489
5487: GO 5496
5489: POP
// hHackSetLevel10YourUnits ; 4 :
5490: CALL 17961 0 0
5494: GO 5572
5496: LD_INT 4
5498: DOUBLE
5499: EQUAL
5500: IFTRUE 5504
5502: GO 5511
5504: POP
// hHackInvincible ; 5 :
5505: CALL 18409 0 0
5509: GO 5572
5511: LD_INT 5
5513: DOUBLE
5514: EQUAL
5515: IFTRUE 5519
5517: GO 5526
5519: POP
// hHackInvisible ; 6 :
5520: CALL 18520 0 0
5524: GO 5572
5526: LD_INT 6
5528: DOUBLE
5529: EQUAL
5530: IFTRUE 5534
5532: GO 5541
5534: POP
// hHackChangeYourSide ; 7 :
5535: CALL 18577 0 0
5539: GO 5572
5541: LD_INT 7
5543: DOUBLE
5544: EQUAL
5545: IFTRUE 5549
5547: GO 5556
5549: POP
// hHackChangeUnitSide ; 8 :
5550: CALL 18619 0 0
5554: GO 5572
5556: LD_INT 8
5558: DOUBLE
5559: EQUAL
5560: IFTRUE 5564
5562: GO 5571
5564: POP
// hHackFog ; end ;
5565: CALL 18720 0 0
5569: GO 5572
5571: POP
// end ; if p2 = game_save_mode then
5572: LD_VAR 0 2
5576: PUSH
5577: LD_INT 102
5579: EQUAL
5580: IFFALSE 5645
// begin if p3 = 1 then
5582: LD_VAR 0 3
5586: PUSH
5587: LD_INT 1
5589: EQUAL
5590: IFFALSE 5602
// globalGameSaveCounter := p4 ;
5592: LD_ADDR_EXP 11
5596: PUSH
5597: LD_VAR 0 4
5601: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5602: LD_VAR 0 3
5606: PUSH
5607: LD_INT 2
5609: EQUAL
5610: PUSH
5611: LD_EXP 11
5615: AND
5616: IFFALSE 5635
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5618: LD_STRING setGameSaveCounter(
5620: PUSH
5621: LD_EXP 11
5625: STR
5626: PUSH
5627: LD_STRING )
5629: STR
5630: PPUSH
5631: CALL_OW 559
// display_strings := globalGameSaveCounter ;
5635: LD_ADDR_OWVAR 47
5639: PUSH
5640: LD_EXP 11
5644: ST_TO_ADDR
// end ; end ;
5645: LD_VAR 0 7
5649: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5650: GO 5652
5652: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5653: LD_STRING initStreamRollete();
5655: PPUSH
5656: CALL_OW 559
// InitStreamMode ;
5660: CALL 5672 0 0
// DefineStreamItems ( false ) ;
5664: LD_INT 0
5666: PPUSH
5667: CALL 6136 0 1
// end ;
5671: END
// function InitStreamMode ; begin
5672: LD_INT 0
5674: PPUSH
// streamModeActive := false ;
5675: LD_ADDR_EXP 12
5679: PUSH
5680: LD_INT 0
5682: ST_TO_ADDR
// normalCounter := 36 ;
5683: LD_ADDR_EXP 13
5687: PUSH
5688: LD_INT 36
5690: ST_TO_ADDR
// hardcoreCounter := 18 ;
5691: LD_ADDR_EXP 14
5695: PUSH
5696: LD_INT 18
5698: ST_TO_ADDR
// sRocket := false ;
5699: LD_ADDR_EXP 17
5703: PUSH
5704: LD_INT 0
5706: ST_TO_ADDR
// sSpeed := false ;
5707: LD_ADDR_EXP 16
5711: PUSH
5712: LD_INT 0
5714: ST_TO_ADDR
// sEngine := false ;
5715: LD_ADDR_EXP 18
5719: PUSH
5720: LD_INT 0
5722: ST_TO_ADDR
// sSpec := false ;
5723: LD_ADDR_EXP 15
5727: PUSH
5728: LD_INT 0
5730: ST_TO_ADDR
// sLevel := false ;
5731: LD_ADDR_EXP 19
5735: PUSH
5736: LD_INT 0
5738: ST_TO_ADDR
// sArmoury := false ;
5739: LD_ADDR_EXP 20
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// sRadar := false ;
5747: LD_ADDR_EXP 21
5751: PUSH
5752: LD_INT 0
5754: ST_TO_ADDR
// sBunker := false ;
5755: LD_ADDR_EXP 22
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// sHack := false ;
5763: LD_ADDR_EXP 23
5767: PUSH
5768: LD_INT 0
5770: ST_TO_ADDR
// sFire := false ;
5771: LD_ADDR_EXP 24
5775: PUSH
5776: LD_INT 0
5778: ST_TO_ADDR
// sRefresh := false ;
5779: LD_ADDR_EXP 25
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// sExp := false ;
5787: LD_ADDR_EXP 26
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// sDepot := false ;
5795: LD_ADDR_EXP 27
5799: PUSH
5800: LD_INT 0
5802: ST_TO_ADDR
// sFlag := false ;
5803: LD_ADDR_EXP 28
5807: PUSH
5808: LD_INT 0
5810: ST_TO_ADDR
// sKamikadze := false ;
5811: LD_ADDR_EXP 36
5815: PUSH
5816: LD_INT 0
5818: ST_TO_ADDR
// sTroll := false ;
5819: LD_ADDR_EXP 37
5823: PUSH
5824: LD_INT 0
5826: ST_TO_ADDR
// sSlow := false ;
5827: LD_ADDR_EXP 38
5831: PUSH
5832: LD_INT 0
5834: ST_TO_ADDR
// sLack := false ;
5835: LD_ADDR_EXP 39
5839: PUSH
5840: LD_INT 0
5842: ST_TO_ADDR
// sTank := false ;
5843: LD_ADDR_EXP 41
5847: PUSH
5848: LD_INT 0
5850: ST_TO_ADDR
// sRemote := false ;
5851: LD_ADDR_EXP 42
5855: PUSH
5856: LD_INT 0
5858: ST_TO_ADDR
// sPowell := false ;
5859: LD_ADDR_EXP 43
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// sTeleport := false ;
5867: LD_ADDR_EXP 46
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// sOilTower := false ;
5875: LD_ADDR_EXP 48
5879: PUSH
5880: LD_INT 0
5882: ST_TO_ADDR
// sShovel := false ;
5883: LD_ADDR_EXP 49
5887: PUSH
5888: LD_INT 0
5890: ST_TO_ADDR
// sSheik := false ;
5891: LD_ADDR_EXP 50
5895: PUSH
5896: LD_INT 0
5898: ST_TO_ADDR
// sEarthquake := false ;
5899: LD_ADDR_EXP 52
5903: PUSH
5904: LD_INT 0
5906: ST_TO_ADDR
// sAI := false ;
5907: LD_ADDR_EXP 53
5911: PUSH
5912: LD_INT 0
5914: ST_TO_ADDR
// sCargo := false ;
5915: LD_ADDR_EXP 56
5919: PUSH
5920: LD_INT 0
5922: ST_TO_ADDR
// sDLaser := false ;
5923: LD_ADDR_EXP 57
5927: PUSH
5928: LD_INT 0
5930: ST_TO_ADDR
// sExchange := false ;
5931: LD_ADDR_EXP 58
5935: PUSH
5936: LD_INT 0
5938: ST_TO_ADDR
// sFac := false ;
5939: LD_ADDR_EXP 59
5943: PUSH
5944: LD_INT 0
5946: ST_TO_ADDR
// sPower := false ;
5947: LD_ADDR_EXP 60
5951: PUSH
5952: LD_INT 0
5954: ST_TO_ADDR
// sRandom := false ;
5955: LD_ADDR_EXP 61
5959: PUSH
5960: LD_INT 0
5962: ST_TO_ADDR
// sShield := false ;
5963: LD_ADDR_EXP 62
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// sTime := false ;
5971: LD_ADDR_EXP 63
5975: PUSH
5976: LD_INT 0
5978: ST_TO_ADDR
// sTools := false ;
5979: LD_ADDR_EXP 64
5983: PUSH
5984: LD_INT 0
5986: ST_TO_ADDR
// sSold := false ;
5987: LD_ADDR_EXP 29
5991: PUSH
5992: LD_INT 0
5994: ST_TO_ADDR
// sDiff := false ;
5995: LD_ADDR_EXP 30
5999: PUSH
6000: LD_INT 0
6002: ST_TO_ADDR
// sFog := false ;
6003: LD_ADDR_EXP 33
6007: PUSH
6008: LD_INT 0
6010: ST_TO_ADDR
// sReset := false ;
6011: LD_ADDR_EXP 34
6015: PUSH
6016: LD_INT 0
6018: ST_TO_ADDR
// sSun := false ;
6019: LD_ADDR_EXP 35
6023: PUSH
6024: LD_INT 0
6026: ST_TO_ADDR
// sTiger := false ;
6027: LD_ADDR_EXP 31
6031: PUSH
6032: LD_INT 0
6034: ST_TO_ADDR
// sBomb := false ;
6035: LD_ADDR_EXP 32
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// sWound := false ;
6043: LD_ADDR_EXP 40
6047: PUSH
6048: LD_INT 0
6050: ST_TO_ADDR
// sBetray := false ;
6051: LD_ADDR_EXP 44
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// sContamin := false ;
6059: LD_ADDR_EXP 45
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// sOil := false ;
6067: LD_ADDR_EXP 47
6071: PUSH
6072: LD_INT 0
6074: ST_TO_ADDR
// sStu := false ;
6075: LD_ADDR_EXP 51
6079: PUSH
6080: LD_INT 0
6082: ST_TO_ADDR
// sBazooka := false ;
6083: LD_ADDR_EXP 54
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// sMortar := false ;
6091: LD_ADDR_EXP 55
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// sRanger := false ;
6099: LD_ADDR_EXP 65
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// sComputer := false ;
6107: LD_ADDR_EXP 66
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// s30 := false ;
6115: LD_ADDR_EXP 67
6119: PUSH
6120: LD_INT 0
6122: ST_TO_ADDR
// s60 := false ;
6123: LD_ADDR_EXP 68
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// end ;
6131: LD_VAR 0 1
6135: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6136: LD_INT 0
6138: PPUSH
6139: PPUSH
6140: PPUSH
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
// result := [ ] ;
6145: LD_ADDR_VAR 0 2
6149: PUSH
6150: EMPTY
6151: ST_TO_ADDR
// if campaign_id = 1 then
6152: LD_OWVAR 69
6156: PUSH
6157: LD_INT 1
6159: EQUAL
6160: IFFALSE 9326
// begin case mission_number of 1 :
6162: LD_OWVAR 70
6166: PUSH
6167: LD_INT 1
6169: DOUBLE
6170: EQUAL
6171: IFTRUE 6175
6173: GO 6251
6175: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6176: LD_ADDR_VAR 0 2
6180: PUSH
6181: LD_INT 2
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: LD_INT 11
6189: PUSH
6190: LD_INT 12
6192: PUSH
6193: LD_INT 15
6195: PUSH
6196: LD_INT 16
6198: PUSH
6199: LD_INT 22
6201: PUSH
6202: LD_INT 23
6204: PUSH
6205: LD_INT 26
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 101
6221: PUSH
6222: LD_INT 102
6224: PUSH
6225: LD_INT 106
6227: PUSH
6228: LD_INT 116
6230: PUSH
6231: LD_INT 117
6233: PUSH
6234: LD_INT 118
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: ST_TO_ADDR
6249: GO 9324
6251: LD_INT 2
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6343
6259: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6260: LD_ADDR_VAR 0 2
6264: PUSH
6265: LD_INT 2
6267: PUSH
6268: LD_INT 4
6270: PUSH
6271: LD_INT 11
6273: PUSH
6274: LD_INT 12
6276: PUSH
6277: LD_INT 15
6279: PUSH
6280: LD_INT 16
6282: PUSH
6283: LD_INT 22
6285: PUSH
6286: LD_INT 23
6288: PUSH
6289: LD_INT 26
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 101
6305: PUSH
6306: LD_INT 102
6308: PUSH
6309: LD_INT 105
6311: PUSH
6312: LD_INT 106
6314: PUSH
6315: LD_INT 108
6317: PUSH
6318: LD_INT 116
6320: PUSH
6321: LD_INT 117
6323: PUSH
6324: LD_INT 118
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: ST_TO_ADDR
6341: GO 9324
6343: LD_INT 3
6345: DOUBLE
6346: EQUAL
6347: IFTRUE 6351
6349: GO 6439
6351: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6352: LD_ADDR_VAR 0 2
6356: PUSH
6357: LD_INT 2
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: LD_INT 5
6365: PUSH
6366: LD_INT 11
6368: PUSH
6369: LD_INT 12
6371: PUSH
6372: LD_INT 15
6374: PUSH
6375: LD_INT 16
6377: PUSH
6378: LD_INT 22
6380: PUSH
6381: LD_INT 26
6383: PUSH
6384: LD_INT 36
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 101
6401: PUSH
6402: LD_INT 102
6404: PUSH
6405: LD_INT 105
6407: PUSH
6408: LD_INT 106
6410: PUSH
6411: LD_INT 108
6413: PUSH
6414: LD_INT 116
6416: PUSH
6417: LD_INT 117
6419: PUSH
6420: LD_INT 118
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: ST_TO_ADDR
6437: GO 9324
6439: LD_INT 4
6441: DOUBLE
6442: EQUAL
6443: IFTRUE 6447
6445: GO 6543
6447: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6448: LD_ADDR_VAR 0 2
6452: PUSH
6453: LD_INT 2
6455: PUSH
6456: LD_INT 4
6458: PUSH
6459: LD_INT 5
6461: PUSH
6462: LD_INT 8
6464: PUSH
6465: LD_INT 11
6467: PUSH
6468: LD_INT 12
6470: PUSH
6471: LD_INT 15
6473: PUSH
6474: LD_INT 16
6476: PUSH
6477: LD_INT 22
6479: PUSH
6480: LD_INT 23
6482: PUSH
6483: LD_INT 26
6485: PUSH
6486: LD_INT 36
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 101
6505: PUSH
6506: LD_INT 102
6508: PUSH
6509: LD_INT 105
6511: PUSH
6512: LD_INT 106
6514: PUSH
6515: LD_INT 108
6517: PUSH
6518: LD_INT 116
6520: PUSH
6521: LD_INT 117
6523: PUSH
6524: LD_INT 118
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: ST_TO_ADDR
6541: GO 9324
6543: LD_INT 5
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6551
6549: GO 6663
6551: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: LD_INT 2
6559: PUSH
6560: LD_INT 4
6562: PUSH
6563: LD_INT 5
6565: PUSH
6566: LD_INT 6
6568: PUSH
6569: LD_INT 8
6571: PUSH
6572: LD_INT 11
6574: PUSH
6575: LD_INT 12
6577: PUSH
6578: LD_INT 15
6580: PUSH
6581: LD_INT 16
6583: PUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 23
6589: PUSH
6590: LD_INT 25
6592: PUSH
6593: LD_INT 26
6595: PUSH
6596: LD_INT 36
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 101
6617: PUSH
6618: LD_INT 102
6620: PUSH
6621: LD_INT 105
6623: PUSH
6624: LD_INT 106
6626: PUSH
6627: LD_INT 108
6629: PUSH
6630: LD_INT 109
6632: PUSH
6633: LD_INT 112
6635: PUSH
6636: LD_INT 116
6638: PUSH
6639: LD_INT 117
6641: PUSH
6642: LD_INT 118
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: ST_TO_ADDR
6661: GO 9324
6663: LD_INT 6
6665: DOUBLE
6666: EQUAL
6667: IFTRUE 6671
6669: GO 6803
6671: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6672: LD_ADDR_VAR 0 2
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: LD_INT 5
6685: PUSH
6686: LD_INT 6
6688: PUSH
6689: LD_INT 8
6691: PUSH
6692: LD_INT 11
6694: PUSH
6695: LD_INT 12
6697: PUSH
6698: LD_INT 15
6700: PUSH
6701: LD_INT 16
6703: PUSH
6704: LD_INT 20
6706: PUSH
6707: LD_INT 21
6709: PUSH
6710: LD_INT 22
6712: PUSH
6713: LD_INT 23
6715: PUSH
6716: LD_INT 25
6718: PUSH
6719: LD_INT 26
6721: PUSH
6722: LD_INT 30
6724: PUSH
6725: LD_INT 31
6727: PUSH
6728: LD_INT 32
6730: PUSH
6731: LD_INT 36
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 101
6757: PUSH
6758: LD_INT 102
6760: PUSH
6761: LD_INT 105
6763: PUSH
6764: LD_INT 106
6766: PUSH
6767: LD_INT 108
6769: PUSH
6770: LD_INT 109
6772: PUSH
6773: LD_INT 112
6775: PUSH
6776: LD_INT 116
6778: PUSH
6779: LD_INT 117
6781: PUSH
6782: LD_INT 118
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: ST_TO_ADDR
6801: GO 9324
6803: LD_INT 7
6805: DOUBLE
6806: EQUAL
6807: IFTRUE 6811
6809: GO 6923
6811: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6812: LD_ADDR_VAR 0 2
6816: PUSH
6817: LD_INT 2
6819: PUSH
6820: LD_INT 4
6822: PUSH
6823: LD_INT 5
6825: PUSH
6826: LD_INT 7
6828: PUSH
6829: LD_INT 11
6831: PUSH
6832: LD_INT 12
6834: PUSH
6835: LD_INT 15
6837: PUSH
6838: LD_INT 16
6840: PUSH
6841: LD_INT 20
6843: PUSH
6844: LD_INT 21
6846: PUSH
6847: LD_INT 22
6849: PUSH
6850: LD_INT 23
6852: PUSH
6853: LD_INT 25
6855: PUSH
6856: LD_INT 26
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 101
6877: PUSH
6878: LD_INT 102
6880: PUSH
6881: LD_INT 103
6883: PUSH
6884: LD_INT 105
6886: PUSH
6887: LD_INT 106
6889: PUSH
6890: LD_INT 108
6892: PUSH
6893: LD_INT 112
6895: PUSH
6896: LD_INT 116
6898: PUSH
6899: LD_INT 117
6901: PUSH
6902: LD_INT 118
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: ST_TO_ADDR
6921: GO 9324
6923: LD_INT 8
6925: DOUBLE
6926: EQUAL
6927: IFTRUE 6931
6929: GO 7071
6931: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6932: LD_ADDR_VAR 0 2
6936: PUSH
6937: LD_INT 2
6939: PUSH
6940: LD_INT 4
6942: PUSH
6943: LD_INT 5
6945: PUSH
6946: LD_INT 6
6948: PUSH
6949: LD_INT 7
6951: PUSH
6952: LD_INT 8
6954: PUSH
6955: LD_INT 11
6957: PUSH
6958: LD_INT 12
6960: PUSH
6961: LD_INT 15
6963: PUSH
6964: LD_INT 16
6966: PUSH
6967: LD_INT 20
6969: PUSH
6970: LD_INT 21
6972: PUSH
6973: LD_INT 22
6975: PUSH
6976: LD_INT 23
6978: PUSH
6979: LD_INT 25
6981: PUSH
6982: LD_INT 26
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 31
6990: PUSH
6991: LD_INT 32
6993: PUSH
6994: LD_INT 36
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 101
7021: PUSH
7022: LD_INT 102
7024: PUSH
7025: LD_INT 103
7027: PUSH
7028: LD_INT 105
7030: PUSH
7031: LD_INT 106
7033: PUSH
7034: LD_INT 108
7036: PUSH
7037: LD_INT 109
7039: PUSH
7040: LD_INT 112
7042: PUSH
7043: LD_INT 116
7045: PUSH
7046: LD_INT 117
7048: PUSH
7049: LD_INT 118
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: ST_TO_ADDR
7069: GO 9324
7071: LD_INT 9
7073: DOUBLE
7074: EQUAL
7075: IFTRUE 7079
7077: GO 7227
7079: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7080: LD_ADDR_VAR 0 2
7084: PUSH
7085: LD_INT 2
7087: PUSH
7088: LD_INT 4
7090: PUSH
7091: LD_INT 5
7093: PUSH
7094: LD_INT 6
7096: PUSH
7097: LD_INT 7
7099: PUSH
7100: LD_INT 8
7102: PUSH
7103: LD_INT 11
7105: PUSH
7106: LD_INT 12
7108: PUSH
7109: LD_INT 15
7111: PUSH
7112: LD_INT 16
7114: PUSH
7115: LD_INT 20
7117: PUSH
7118: LD_INT 21
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 23
7126: PUSH
7127: LD_INT 25
7129: PUSH
7130: LD_INT 26
7132: PUSH
7133: LD_INT 28
7135: PUSH
7136: LD_INT 30
7138: PUSH
7139: LD_INT 31
7141: PUSH
7142: LD_INT 32
7144: PUSH
7145: LD_INT 36
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 101
7173: PUSH
7174: LD_INT 102
7176: PUSH
7177: LD_INT 103
7179: PUSH
7180: LD_INT 105
7182: PUSH
7183: LD_INT 106
7185: PUSH
7186: LD_INT 108
7188: PUSH
7189: LD_INT 109
7191: PUSH
7192: LD_INT 112
7194: PUSH
7195: LD_INT 114
7197: PUSH
7198: LD_INT 116
7200: PUSH
7201: LD_INT 117
7203: PUSH
7204: LD_INT 118
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: ST_TO_ADDR
7225: GO 9324
7227: LD_INT 10
7229: DOUBLE
7230: EQUAL
7231: IFTRUE 7235
7233: GO 7431
7235: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7236: LD_ADDR_VAR 0 2
7240: PUSH
7241: LD_INT 2
7243: PUSH
7244: LD_INT 4
7246: PUSH
7247: LD_INT 5
7249: PUSH
7250: LD_INT 6
7252: PUSH
7253: LD_INT 7
7255: PUSH
7256: LD_INT 8
7258: PUSH
7259: LD_INT 9
7261: PUSH
7262: LD_INT 10
7264: PUSH
7265: LD_INT 11
7267: PUSH
7268: LD_INT 12
7270: PUSH
7271: LD_INT 13
7273: PUSH
7274: LD_INT 14
7276: PUSH
7277: LD_INT 15
7279: PUSH
7280: LD_INT 16
7282: PUSH
7283: LD_INT 17
7285: PUSH
7286: LD_INT 18
7288: PUSH
7289: LD_INT 19
7291: PUSH
7292: LD_INT 20
7294: PUSH
7295: LD_INT 21
7297: PUSH
7298: LD_INT 22
7300: PUSH
7301: LD_INT 23
7303: PUSH
7304: LD_INT 24
7306: PUSH
7307: LD_INT 25
7309: PUSH
7310: LD_INT 26
7312: PUSH
7313: LD_INT 28
7315: PUSH
7316: LD_INT 30
7318: PUSH
7319: LD_INT 31
7321: PUSH
7322: LD_INT 32
7324: PUSH
7325: LD_INT 36
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 101
7361: PUSH
7362: LD_INT 102
7364: PUSH
7365: LD_INT 103
7367: PUSH
7368: LD_INT 104
7370: PUSH
7371: LD_INT 105
7373: PUSH
7374: LD_INT 106
7376: PUSH
7377: LD_INT 107
7379: PUSH
7380: LD_INT 108
7382: PUSH
7383: LD_INT 109
7385: PUSH
7386: LD_INT 110
7388: PUSH
7389: LD_INT 111
7391: PUSH
7392: LD_INT 112
7394: PUSH
7395: LD_INT 114
7397: PUSH
7398: LD_INT 116
7400: PUSH
7401: LD_INT 117
7403: PUSH
7404: LD_INT 118
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: ST_TO_ADDR
7429: GO 9324
7431: LD_INT 11
7433: DOUBLE
7434: EQUAL
7435: IFTRUE 7439
7437: GO 7643
7439: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7440: LD_ADDR_VAR 0 2
7444: PUSH
7445: LD_INT 2
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: LD_INT 7
7462: PUSH
7463: LD_INT 8
7465: PUSH
7466: LD_INT 9
7468: PUSH
7469: LD_INT 10
7471: PUSH
7472: LD_INT 11
7474: PUSH
7475: LD_INT 12
7477: PUSH
7478: LD_INT 13
7480: PUSH
7481: LD_INT 14
7483: PUSH
7484: LD_INT 15
7486: PUSH
7487: LD_INT 16
7489: PUSH
7490: LD_INT 17
7492: PUSH
7493: LD_INT 18
7495: PUSH
7496: LD_INT 19
7498: PUSH
7499: LD_INT 20
7501: PUSH
7502: LD_INT 21
7504: PUSH
7505: LD_INT 22
7507: PUSH
7508: LD_INT 23
7510: PUSH
7511: LD_INT 24
7513: PUSH
7514: LD_INT 25
7516: PUSH
7517: LD_INT 26
7519: PUSH
7520: LD_INT 28
7522: PUSH
7523: LD_INT 30
7525: PUSH
7526: LD_INT 31
7528: PUSH
7529: LD_INT 32
7531: PUSH
7532: LD_INT 34
7534: PUSH
7535: LD_INT 36
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 101
7573: PUSH
7574: LD_INT 102
7576: PUSH
7577: LD_INT 103
7579: PUSH
7580: LD_INT 104
7582: PUSH
7583: LD_INT 105
7585: PUSH
7586: LD_INT 106
7588: PUSH
7589: LD_INT 107
7591: PUSH
7592: LD_INT 108
7594: PUSH
7595: LD_INT 109
7597: PUSH
7598: LD_INT 110
7600: PUSH
7601: LD_INT 111
7603: PUSH
7604: LD_INT 112
7606: PUSH
7607: LD_INT 114
7609: PUSH
7610: LD_INT 116
7612: PUSH
7613: LD_INT 117
7615: PUSH
7616: LD_INT 118
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: ST_TO_ADDR
7641: GO 9324
7643: LD_INT 12
7645: DOUBLE
7646: EQUAL
7647: IFTRUE 7651
7649: GO 7871
7651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7652: LD_ADDR_VAR 0 2
7656: PUSH
7657: LD_INT 1
7659: PUSH
7660: LD_INT 2
7662: PUSH
7663: LD_INT 3
7665: PUSH
7666: LD_INT 4
7668: PUSH
7669: LD_INT 5
7671: PUSH
7672: LD_INT 6
7674: PUSH
7675: LD_INT 7
7677: PUSH
7678: LD_INT 8
7680: PUSH
7681: LD_INT 9
7683: PUSH
7684: LD_INT 10
7686: PUSH
7687: LD_INT 11
7689: PUSH
7690: LD_INT 12
7692: PUSH
7693: LD_INT 13
7695: PUSH
7696: LD_INT 14
7698: PUSH
7699: LD_INT 15
7701: PUSH
7702: LD_INT 16
7704: PUSH
7705: LD_INT 17
7707: PUSH
7708: LD_INT 18
7710: PUSH
7711: LD_INT 19
7713: PUSH
7714: LD_INT 20
7716: PUSH
7717: LD_INT 21
7719: PUSH
7720: LD_INT 22
7722: PUSH
7723: LD_INT 23
7725: PUSH
7726: LD_INT 24
7728: PUSH
7729: LD_INT 25
7731: PUSH
7732: LD_INT 26
7734: PUSH
7735: LD_INT 27
7737: PUSH
7738: LD_INT 28
7740: PUSH
7741: LD_INT 30
7743: PUSH
7744: LD_INT 31
7746: PUSH
7747: LD_INT 32
7749: PUSH
7750: LD_INT 33
7752: PUSH
7753: LD_INT 34
7755: PUSH
7756: LD_INT 36
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 101
7797: PUSH
7798: LD_INT 102
7800: PUSH
7801: LD_INT 103
7803: PUSH
7804: LD_INT 104
7806: PUSH
7807: LD_INT 105
7809: PUSH
7810: LD_INT 106
7812: PUSH
7813: LD_INT 107
7815: PUSH
7816: LD_INT 108
7818: PUSH
7819: LD_INT 109
7821: PUSH
7822: LD_INT 110
7824: PUSH
7825: LD_INT 111
7827: PUSH
7828: LD_INT 112
7830: PUSH
7831: LD_INT 113
7833: PUSH
7834: LD_INT 114
7836: PUSH
7837: LD_INT 116
7839: PUSH
7840: LD_INT 117
7842: PUSH
7843: LD_INT 118
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: ST_TO_ADDR
7869: GO 9324
7871: LD_INT 13
7873: DOUBLE
7874: EQUAL
7875: IFTRUE 7879
7877: GO 8087
7879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7880: LD_ADDR_VAR 0 2
7884: PUSH
7885: LD_INT 1
7887: PUSH
7888: LD_INT 2
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 4
7896: PUSH
7897: LD_INT 5
7899: PUSH
7900: LD_INT 8
7902: PUSH
7903: LD_INT 9
7905: PUSH
7906: LD_INT 10
7908: PUSH
7909: LD_INT 11
7911: PUSH
7912: LD_INT 12
7914: PUSH
7915: LD_INT 14
7917: PUSH
7918: LD_INT 15
7920: PUSH
7921: LD_INT 16
7923: PUSH
7924: LD_INT 17
7926: PUSH
7927: LD_INT 18
7929: PUSH
7930: LD_INT 19
7932: PUSH
7933: LD_INT 20
7935: PUSH
7936: LD_INT 21
7938: PUSH
7939: LD_INT 22
7941: PUSH
7942: LD_INT 23
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 25
7950: PUSH
7951: LD_INT 26
7953: PUSH
7954: LD_INT 27
7956: PUSH
7957: LD_INT 28
7959: PUSH
7960: LD_INT 30
7962: PUSH
7963: LD_INT 31
7965: PUSH
7966: LD_INT 32
7968: PUSH
7969: LD_INT 33
7971: PUSH
7972: LD_INT 34
7974: PUSH
7975: LD_INT 36
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: PUSH
8011: LD_INT 101
8013: PUSH
8014: LD_INT 102
8016: PUSH
8017: LD_INT 103
8019: PUSH
8020: LD_INT 104
8022: PUSH
8023: LD_INT 105
8025: PUSH
8026: LD_INT 106
8028: PUSH
8029: LD_INT 107
8031: PUSH
8032: LD_INT 108
8034: PUSH
8035: LD_INT 109
8037: PUSH
8038: LD_INT 110
8040: PUSH
8041: LD_INT 111
8043: PUSH
8044: LD_INT 112
8046: PUSH
8047: LD_INT 113
8049: PUSH
8050: LD_INT 114
8052: PUSH
8053: LD_INT 116
8055: PUSH
8056: LD_INT 117
8058: PUSH
8059: LD_INT 118
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: ST_TO_ADDR
8085: GO 9324
8087: LD_INT 14
8089: DOUBLE
8090: EQUAL
8091: IFTRUE 8095
8093: GO 8319
8095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8096: LD_ADDR_VAR 0 2
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: LD_INT 2
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: LD_INT 4
8112: PUSH
8113: LD_INT 5
8115: PUSH
8116: LD_INT 6
8118: PUSH
8119: LD_INT 7
8121: PUSH
8122: LD_INT 8
8124: PUSH
8125: LD_INT 9
8127: PUSH
8128: LD_INT 10
8130: PUSH
8131: LD_INT 11
8133: PUSH
8134: LD_INT 12
8136: PUSH
8137: LD_INT 13
8139: PUSH
8140: LD_INT 14
8142: PUSH
8143: LD_INT 15
8145: PUSH
8146: LD_INT 16
8148: PUSH
8149: LD_INT 17
8151: PUSH
8152: LD_INT 18
8154: PUSH
8155: LD_INT 19
8157: PUSH
8158: LD_INT 20
8160: PUSH
8161: LD_INT 21
8163: PUSH
8164: LD_INT 22
8166: PUSH
8167: LD_INT 23
8169: PUSH
8170: LD_INT 24
8172: PUSH
8173: LD_INT 25
8175: PUSH
8176: LD_INT 26
8178: PUSH
8179: LD_INT 27
8181: PUSH
8182: LD_INT 28
8184: PUSH
8185: LD_INT 29
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 31
8193: PUSH
8194: LD_INT 32
8196: PUSH
8197: LD_INT 33
8199: PUSH
8200: LD_INT 34
8202: PUSH
8203: LD_INT 36
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: PUSH
8243: LD_INT 101
8245: PUSH
8246: LD_INT 102
8248: PUSH
8249: LD_INT 103
8251: PUSH
8252: LD_INT 104
8254: PUSH
8255: LD_INT 105
8257: PUSH
8258: LD_INT 106
8260: PUSH
8261: LD_INT 107
8263: PUSH
8264: LD_INT 108
8266: PUSH
8267: LD_INT 109
8269: PUSH
8270: LD_INT 110
8272: PUSH
8273: LD_INT 111
8275: PUSH
8276: LD_INT 112
8278: PUSH
8279: LD_INT 113
8281: PUSH
8282: LD_INT 114
8284: PUSH
8285: LD_INT 116
8287: PUSH
8288: LD_INT 117
8290: PUSH
8291: LD_INT 118
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: ST_TO_ADDR
8317: GO 9324
8319: LD_INT 15
8321: DOUBLE
8322: EQUAL
8323: IFTRUE 8327
8325: GO 8551
8327: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8328: LD_ADDR_VAR 0 2
8332: PUSH
8333: LD_INT 1
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: LD_INT 5
8347: PUSH
8348: LD_INT 6
8350: PUSH
8351: LD_INT 7
8353: PUSH
8354: LD_INT 8
8356: PUSH
8357: LD_INT 9
8359: PUSH
8360: LD_INT 10
8362: PUSH
8363: LD_INT 11
8365: PUSH
8366: LD_INT 12
8368: PUSH
8369: LD_INT 13
8371: PUSH
8372: LD_INT 14
8374: PUSH
8375: LD_INT 15
8377: PUSH
8378: LD_INT 16
8380: PUSH
8381: LD_INT 17
8383: PUSH
8384: LD_INT 18
8386: PUSH
8387: LD_INT 19
8389: PUSH
8390: LD_INT 20
8392: PUSH
8393: LD_INT 21
8395: PUSH
8396: LD_INT 22
8398: PUSH
8399: LD_INT 23
8401: PUSH
8402: LD_INT 24
8404: PUSH
8405: LD_INT 25
8407: PUSH
8408: LD_INT 26
8410: PUSH
8411: LD_INT 27
8413: PUSH
8414: LD_INT 28
8416: PUSH
8417: LD_INT 29
8419: PUSH
8420: LD_INT 30
8422: PUSH
8423: LD_INT 31
8425: PUSH
8426: LD_INT 32
8428: PUSH
8429: LD_INT 33
8431: PUSH
8432: LD_INT 34
8434: PUSH
8435: LD_INT 36
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 101
8477: PUSH
8478: LD_INT 102
8480: PUSH
8481: LD_INT 103
8483: PUSH
8484: LD_INT 104
8486: PUSH
8487: LD_INT 105
8489: PUSH
8490: LD_INT 106
8492: PUSH
8493: LD_INT 107
8495: PUSH
8496: LD_INT 108
8498: PUSH
8499: LD_INT 109
8501: PUSH
8502: LD_INT 110
8504: PUSH
8505: LD_INT 111
8507: PUSH
8508: LD_INT 112
8510: PUSH
8511: LD_INT 113
8513: PUSH
8514: LD_INT 114
8516: PUSH
8517: LD_INT 116
8519: PUSH
8520: LD_INT 117
8522: PUSH
8523: LD_INT 118
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: ST_TO_ADDR
8549: GO 9324
8551: LD_INT 16
8553: DOUBLE
8554: EQUAL
8555: IFTRUE 8559
8557: GO 8695
8559: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8560: LD_ADDR_VAR 0 2
8564: PUSH
8565: LD_INT 2
8567: PUSH
8568: LD_INT 4
8570: PUSH
8571: LD_INT 5
8573: PUSH
8574: LD_INT 7
8576: PUSH
8577: LD_INT 11
8579: PUSH
8580: LD_INT 12
8582: PUSH
8583: LD_INT 15
8585: PUSH
8586: LD_INT 16
8588: PUSH
8589: LD_INT 20
8591: PUSH
8592: LD_INT 21
8594: PUSH
8595: LD_INT 22
8597: PUSH
8598: LD_INT 23
8600: PUSH
8601: LD_INT 25
8603: PUSH
8604: LD_INT 26
8606: PUSH
8607: LD_INT 30
8609: PUSH
8610: LD_INT 31
8612: PUSH
8613: LD_INT 32
8615: PUSH
8616: LD_INT 33
8618: PUSH
8619: LD_INT 34
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 101
8645: PUSH
8646: LD_INT 102
8648: PUSH
8649: LD_INT 103
8651: PUSH
8652: LD_INT 106
8654: PUSH
8655: LD_INT 108
8657: PUSH
8658: LD_INT 112
8660: PUSH
8661: LD_INT 113
8663: PUSH
8664: LD_INT 114
8666: PUSH
8667: LD_INT 116
8669: PUSH
8670: LD_INT 117
8672: PUSH
8673: LD_INT 118
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: ST_TO_ADDR
8693: GO 9324
8695: LD_INT 17
8697: DOUBLE
8698: EQUAL
8699: IFTRUE 8703
8701: GO 8927
8703: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8704: LD_ADDR_VAR 0 2
8708: PUSH
8709: LD_INT 1
8711: PUSH
8712: LD_INT 2
8714: PUSH
8715: LD_INT 3
8717: PUSH
8718: LD_INT 4
8720: PUSH
8721: LD_INT 5
8723: PUSH
8724: LD_INT 6
8726: PUSH
8727: LD_INT 7
8729: PUSH
8730: LD_INT 8
8732: PUSH
8733: LD_INT 9
8735: PUSH
8736: LD_INT 10
8738: PUSH
8739: LD_INT 11
8741: PUSH
8742: LD_INT 12
8744: PUSH
8745: LD_INT 13
8747: PUSH
8748: LD_INT 14
8750: PUSH
8751: LD_INT 15
8753: PUSH
8754: LD_INT 16
8756: PUSH
8757: LD_INT 17
8759: PUSH
8760: LD_INT 18
8762: PUSH
8763: LD_INT 19
8765: PUSH
8766: LD_INT 20
8768: PUSH
8769: LD_INT 21
8771: PUSH
8772: LD_INT 22
8774: PUSH
8775: LD_INT 23
8777: PUSH
8778: LD_INT 24
8780: PUSH
8781: LD_INT 25
8783: PUSH
8784: LD_INT 26
8786: PUSH
8787: LD_INT 27
8789: PUSH
8790: LD_INT 28
8792: PUSH
8793: LD_INT 29
8795: PUSH
8796: LD_INT 30
8798: PUSH
8799: LD_INT 31
8801: PUSH
8802: LD_INT 32
8804: PUSH
8805: LD_INT 33
8807: PUSH
8808: LD_INT 34
8810: PUSH
8811: LD_INT 36
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 101
8853: PUSH
8854: LD_INT 102
8856: PUSH
8857: LD_INT 103
8859: PUSH
8860: LD_INT 104
8862: PUSH
8863: LD_INT 105
8865: PUSH
8866: LD_INT 106
8868: PUSH
8869: LD_INT 107
8871: PUSH
8872: LD_INT 108
8874: PUSH
8875: LD_INT 109
8877: PUSH
8878: LD_INT 110
8880: PUSH
8881: LD_INT 111
8883: PUSH
8884: LD_INT 112
8886: PUSH
8887: LD_INT 113
8889: PUSH
8890: LD_INT 114
8892: PUSH
8893: LD_INT 116
8895: PUSH
8896: LD_INT 117
8898: PUSH
8899: LD_INT 118
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: ST_TO_ADDR
8925: GO 9324
8927: LD_INT 18
8929: DOUBLE
8930: EQUAL
8931: IFTRUE 8935
8933: GO 9083
8935: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: LD_INT 4
8946: PUSH
8947: LD_INT 5
8949: PUSH
8950: LD_INT 7
8952: PUSH
8953: LD_INT 11
8955: PUSH
8956: LD_INT 12
8958: PUSH
8959: LD_INT 15
8961: PUSH
8962: LD_INT 16
8964: PUSH
8965: LD_INT 20
8967: PUSH
8968: LD_INT 21
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_INT 23
8976: PUSH
8977: LD_INT 25
8979: PUSH
8980: LD_INT 26
8982: PUSH
8983: LD_INT 30
8985: PUSH
8986: LD_INT 31
8988: PUSH
8989: LD_INT 32
8991: PUSH
8992: LD_INT 33
8994: PUSH
8995: LD_INT 34
8997: PUSH
8998: LD_INT 35
9000: PUSH
9001: LD_INT 36
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 101
9029: PUSH
9030: LD_INT 102
9032: PUSH
9033: LD_INT 103
9035: PUSH
9036: LD_INT 106
9038: PUSH
9039: LD_INT 108
9041: PUSH
9042: LD_INT 112
9044: PUSH
9045: LD_INT 113
9047: PUSH
9048: LD_INT 114
9050: PUSH
9051: LD_INT 115
9053: PUSH
9054: LD_INT 116
9056: PUSH
9057: LD_INT 117
9059: PUSH
9060: LD_INT 118
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: ST_TO_ADDR
9081: GO 9324
9083: LD_INT 19
9085: DOUBLE
9086: EQUAL
9087: IFTRUE 9091
9089: GO 9323
9091: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9092: LD_ADDR_VAR 0 2
9096: PUSH
9097: LD_INT 1
9099: PUSH
9100: LD_INT 2
9102: PUSH
9103: LD_INT 3
9105: PUSH
9106: LD_INT 4
9108: PUSH
9109: LD_INT 5
9111: PUSH
9112: LD_INT 6
9114: PUSH
9115: LD_INT 7
9117: PUSH
9118: LD_INT 8
9120: PUSH
9121: LD_INT 9
9123: PUSH
9124: LD_INT 10
9126: PUSH
9127: LD_INT 11
9129: PUSH
9130: LD_INT 12
9132: PUSH
9133: LD_INT 13
9135: PUSH
9136: LD_INT 14
9138: PUSH
9139: LD_INT 15
9141: PUSH
9142: LD_INT 16
9144: PUSH
9145: LD_INT 17
9147: PUSH
9148: LD_INT 18
9150: PUSH
9151: LD_INT 19
9153: PUSH
9154: LD_INT 20
9156: PUSH
9157: LD_INT 21
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 23
9165: PUSH
9166: LD_INT 24
9168: PUSH
9169: LD_INT 25
9171: PUSH
9172: LD_INT 26
9174: PUSH
9175: LD_INT 27
9177: PUSH
9178: LD_INT 28
9180: PUSH
9181: LD_INT 29
9183: PUSH
9184: LD_INT 30
9186: PUSH
9187: LD_INT 31
9189: PUSH
9190: LD_INT 32
9192: PUSH
9193: LD_INT 33
9195: PUSH
9196: LD_INT 34
9198: PUSH
9199: LD_INT 35
9201: PUSH
9202: LD_INT 36
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: PUSH
9243: LD_INT 101
9245: PUSH
9246: LD_INT 102
9248: PUSH
9249: LD_INT 103
9251: PUSH
9252: LD_INT 104
9254: PUSH
9255: LD_INT 105
9257: PUSH
9258: LD_INT 106
9260: PUSH
9261: LD_INT 107
9263: PUSH
9264: LD_INT 108
9266: PUSH
9267: LD_INT 109
9269: PUSH
9270: LD_INT 110
9272: PUSH
9273: LD_INT 111
9275: PUSH
9276: LD_INT 112
9278: PUSH
9279: LD_INT 113
9281: PUSH
9282: LD_INT 114
9284: PUSH
9285: LD_INT 115
9287: PUSH
9288: LD_INT 116
9290: PUSH
9291: LD_INT 117
9293: PUSH
9294: LD_INT 118
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: ST_TO_ADDR
9321: GO 9324
9323: POP
// end else
9324: GO 9555
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9326: LD_ADDR_VAR 0 2
9330: PUSH
9331: LD_INT 1
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: LD_INT 4
9342: PUSH
9343: LD_INT 5
9345: PUSH
9346: LD_INT 6
9348: PUSH
9349: LD_INT 7
9351: PUSH
9352: LD_INT 8
9354: PUSH
9355: LD_INT 9
9357: PUSH
9358: LD_INT 10
9360: PUSH
9361: LD_INT 11
9363: PUSH
9364: LD_INT 12
9366: PUSH
9367: LD_INT 13
9369: PUSH
9370: LD_INT 14
9372: PUSH
9373: LD_INT 15
9375: PUSH
9376: LD_INT 16
9378: PUSH
9379: LD_INT 17
9381: PUSH
9382: LD_INT 18
9384: PUSH
9385: LD_INT 19
9387: PUSH
9388: LD_INT 20
9390: PUSH
9391: LD_INT 21
9393: PUSH
9394: LD_INT 22
9396: PUSH
9397: LD_INT 23
9399: PUSH
9400: LD_INT 24
9402: PUSH
9403: LD_INT 25
9405: PUSH
9406: LD_INT 26
9408: PUSH
9409: LD_INT 27
9411: PUSH
9412: LD_INT 28
9414: PUSH
9415: LD_INT 29
9417: PUSH
9418: LD_INT 30
9420: PUSH
9421: LD_INT 31
9423: PUSH
9424: LD_INT 32
9426: PUSH
9427: LD_INT 33
9429: PUSH
9430: LD_INT 34
9432: PUSH
9433: LD_INT 35
9435: PUSH
9436: LD_INT 36
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 101
9479: PUSH
9480: LD_INT 102
9482: PUSH
9483: LD_INT 103
9485: PUSH
9486: LD_INT 104
9488: PUSH
9489: LD_INT 105
9491: PUSH
9492: LD_INT 106
9494: PUSH
9495: LD_INT 107
9497: PUSH
9498: LD_INT 108
9500: PUSH
9501: LD_INT 109
9503: PUSH
9504: LD_INT 110
9506: PUSH
9507: LD_INT 111
9509: PUSH
9510: LD_INT 112
9512: PUSH
9513: LD_INT 113
9515: PUSH
9516: LD_INT 114
9518: PUSH
9519: LD_INT 115
9521: PUSH
9522: LD_INT 116
9524: PUSH
9525: LD_INT 117
9527: PUSH
9528: LD_INT 118
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: ST_TO_ADDR
// if result then
9555: LD_VAR 0 2
9559: IFFALSE 10345
// begin normal :=  ;
9561: LD_ADDR_VAR 0 5
9565: PUSH
9566: LD_STRING 
9568: ST_TO_ADDR
// hardcore :=  ;
9569: LD_ADDR_VAR 0 6
9573: PUSH
9574: LD_STRING 
9576: ST_TO_ADDR
// active :=  ;
9577: LD_ADDR_VAR 0 7
9581: PUSH
9582: LD_STRING 
9584: ST_TO_ADDR
// for i = 1 to normalCounter do
9585: LD_ADDR_VAR 0 8
9589: PUSH
9590: DOUBLE
9591: LD_INT 1
9593: DEC
9594: ST_TO_ADDR
9595: LD_EXP 13
9599: PUSH
9600: FOR_TO
9601: IFFALSE 9702
// begin tmp := 0 ;
9603: LD_ADDR_VAR 0 3
9607: PUSH
9608: LD_STRING 0
9610: ST_TO_ADDR
// if result [ 1 ] then
9611: LD_VAR 0 2
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: IFFALSE 9684
// if result [ 1 ] [ 1 ] = i then
9621: LD_VAR 0 2
9625: PUSH
9626: LD_INT 1
9628: ARRAY
9629: PUSH
9630: LD_INT 1
9632: ARRAY
9633: PUSH
9634: LD_VAR 0 8
9638: EQUAL
9639: IFFALSE 9684
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: LD_VAR 0 2
9650: PPUSH
9651: LD_INT 1
9653: PPUSH
9654: LD_VAR 0 2
9658: PUSH
9659: LD_INT 1
9661: ARRAY
9662: PPUSH
9663: LD_INT 1
9665: PPUSH
9666: CALL_OW 3
9670: PPUSH
9671: CALL_OW 1
9675: ST_TO_ADDR
// tmp := 1 ;
9676: LD_ADDR_VAR 0 3
9680: PUSH
9681: LD_STRING 1
9683: ST_TO_ADDR
// end ; normal := normal & tmp ;
9684: LD_ADDR_VAR 0 5
9688: PUSH
9689: LD_VAR 0 5
9693: PUSH
9694: LD_VAR 0 3
9698: STR
9699: ST_TO_ADDR
// end ;
9700: GO 9600
9702: POP
9703: POP
// for i = 1 to hardcoreCounter do
9704: LD_ADDR_VAR 0 8
9708: PUSH
9709: DOUBLE
9710: LD_INT 1
9712: DEC
9713: ST_TO_ADDR
9714: LD_EXP 14
9718: PUSH
9719: FOR_TO
9720: IFFALSE 9825
// begin tmp := 0 ;
9722: LD_ADDR_VAR 0 3
9726: PUSH
9727: LD_STRING 0
9729: ST_TO_ADDR
// if result [ 2 ] then
9730: LD_VAR 0 2
9734: PUSH
9735: LD_INT 2
9737: ARRAY
9738: IFFALSE 9807
// if result [ 2 ] [ 1 ] = 100 + i then
9740: LD_VAR 0 2
9744: PUSH
9745: LD_INT 2
9747: ARRAY
9748: PUSH
9749: LD_INT 1
9751: ARRAY
9752: PUSH
9753: LD_INT 100
9755: PUSH
9756: LD_VAR 0 8
9760: PLUS
9761: EQUAL
9762: IFFALSE 9807
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9764: LD_ADDR_VAR 0 2
9768: PUSH
9769: LD_VAR 0 2
9773: PPUSH
9774: LD_INT 2
9776: PPUSH
9777: LD_VAR 0 2
9781: PUSH
9782: LD_INT 2
9784: ARRAY
9785: PPUSH
9786: LD_INT 1
9788: PPUSH
9789: CALL_OW 3
9793: PPUSH
9794: CALL_OW 1
9798: ST_TO_ADDR
// tmp := 1 ;
9799: LD_ADDR_VAR 0 3
9803: PUSH
9804: LD_STRING 1
9806: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9807: LD_ADDR_VAR 0 6
9811: PUSH
9812: LD_VAR 0 6
9816: PUSH
9817: LD_VAR 0 3
9821: STR
9822: ST_TO_ADDR
// end ;
9823: GO 9719
9825: POP
9826: POP
// if isGameLoad then
9827: LD_VAR 0 1
9831: IFFALSE 10306
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9833: LD_ADDR_VAR 0 4
9837: PUSH
9838: LD_EXP 17
9842: PUSH
9843: LD_EXP 16
9847: PUSH
9848: LD_EXP 18
9852: PUSH
9853: LD_EXP 15
9857: PUSH
9858: LD_EXP 19
9862: PUSH
9863: LD_EXP 20
9867: PUSH
9868: LD_EXP 21
9872: PUSH
9873: LD_EXP 22
9877: PUSH
9878: LD_EXP 23
9882: PUSH
9883: LD_EXP 24
9887: PUSH
9888: LD_EXP 25
9892: PUSH
9893: LD_EXP 26
9897: PUSH
9898: LD_EXP 27
9902: PUSH
9903: LD_EXP 28
9907: PUSH
9908: LD_EXP 36
9912: PUSH
9913: LD_EXP 37
9917: PUSH
9918: LD_EXP 38
9922: PUSH
9923: LD_EXP 39
9927: PUSH
9928: LD_EXP 41
9932: PUSH
9933: LD_EXP 42
9937: PUSH
9938: LD_EXP 43
9942: PUSH
9943: LD_EXP 46
9947: PUSH
9948: LD_EXP 48
9952: PUSH
9953: LD_EXP 49
9957: PUSH
9958: LD_EXP 50
9962: PUSH
9963: LD_EXP 52
9967: PUSH
9968: LD_EXP 53
9972: PUSH
9973: LD_EXP 56
9977: PUSH
9978: LD_EXP 57
9982: PUSH
9983: LD_EXP 58
9987: PUSH
9988: LD_EXP 59
9992: PUSH
9993: LD_EXP 60
9997: PUSH
9998: LD_EXP 61
10002: PUSH
10003: LD_EXP 62
10007: PUSH
10008: LD_EXP 63
10012: PUSH
10013: LD_EXP 64
10017: PUSH
10018: LD_EXP 29
10022: PUSH
10023: LD_EXP 30
10027: PUSH
10028: LD_EXP 33
10032: PUSH
10033: LD_EXP 34
10037: PUSH
10038: LD_EXP 35
10042: PUSH
10043: LD_EXP 31
10047: PUSH
10048: LD_EXP 32
10052: PUSH
10053: LD_EXP 40
10057: PUSH
10058: LD_EXP 44
10062: PUSH
10063: LD_EXP 45
10067: PUSH
10068: LD_EXP 47
10072: PUSH
10073: LD_EXP 51
10077: PUSH
10078: LD_EXP 54
10082: PUSH
10083: LD_EXP 55
10087: PUSH
10088: LD_EXP 65
10092: PUSH
10093: LD_EXP 66
10097: PUSH
10098: LD_EXP 67
10102: PUSH
10103: LD_EXP 68
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: ST_TO_ADDR
// tmp :=  ;
10164: LD_ADDR_VAR 0 3
10168: PUSH
10169: LD_STRING 
10171: ST_TO_ADDR
// for i = 1 to normalCounter do
10172: LD_ADDR_VAR 0 8
10176: PUSH
10177: DOUBLE
10178: LD_INT 1
10180: DEC
10181: ST_TO_ADDR
10182: LD_EXP 13
10186: PUSH
10187: FOR_TO
10188: IFFALSE 10224
// begin if flags [ i ] then
10190: LD_VAR 0 4
10194: PUSH
10195: LD_VAR 0 8
10199: ARRAY
10200: IFFALSE 10222
// tmp := tmp & i & ; ;
10202: LD_ADDR_VAR 0 3
10206: PUSH
10207: LD_VAR 0 3
10211: PUSH
10212: LD_VAR 0 8
10216: STR
10217: PUSH
10218: LD_STRING ;
10220: STR
10221: ST_TO_ADDR
// end ;
10222: GO 10187
10224: POP
10225: POP
// for i = 1 to hardcoreCounter do
10226: LD_ADDR_VAR 0 8
10230: PUSH
10231: DOUBLE
10232: LD_INT 1
10234: DEC
10235: ST_TO_ADDR
10236: LD_EXP 14
10240: PUSH
10241: FOR_TO
10242: IFFALSE 10288
// begin if flags [ normalCounter + i ] then
10244: LD_VAR 0 4
10248: PUSH
10249: LD_EXP 13
10253: PUSH
10254: LD_VAR 0 8
10258: PLUS
10259: ARRAY
10260: IFFALSE 10286
// tmp := tmp & ( 100 + i ) & ; ;
10262: LD_ADDR_VAR 0 3
10266: PUSH
10267: LD_VAR 0 3
10271: PUSH
10272: LD_INT 100
10274: PUSH
10275: LD_VAR 0 8
10279: PLUS
10280: STR
10281: PUSH
10282: LD_STRING ;
10284: STR
10285: ST_TO_ADDR
// end ;
10286: GO 10241
10288: POP
10289: POP
// if tmp then
10290: LD_VAR 0 3
10294: IFFALSE 10306
// active := tmp ;
10296: LD_ADDR_VAR 0 7
10300: PUSH
10301: LD_VAR 0 3
10305: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10306: LD_STRING getStreamItemsFromMission("
10308: PUSH
10309: LD_VAR 0 5
10313: STR
10314: PUSH
10315: LD_STRING ","
10317: STR
10318: PUSH
10319: LD_VAR 0 6
10323: STR
10324: PUSH
10325: LD_STRING ","
10327: STR
10328: PUSH
10329: LD_VAR 0 7
10333: STR
10334: PUSH
10335: LD_STRING ")
10337: STR
10338: PPUSH
10339: CALL_OW 559
// end else
10343: GO 10352
// ToLua ( getStreamItemsFromMission("","","") ) ;
10345: LD_STRING getStreamItemsFromMission("","","")
10347: PPUSH
10348: CALL_OW 559
// end ;
10352: LD_VAR 0 2
10356: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10357: LD_EXP 12
10361: PUSH
10362: LD_EXP 17
10366: AND
10367: IFFALSE 10491
10369: GO 10371
10371: DISABLE
10372: LD_INT 0
10374: PPUSH
10375: PPUSH
// begin enable ;
10376: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10377: LD_ADDR_VAR 0 2
10381: PUSH
10382: LD_INT 22
10384: PUSH
10385: LD_OWVAR 2
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 2
10396: PUSH
10397: LD_INT 34
10399: PUSH
10400: LD_INT 7
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 45
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 34
10419: PUSH
10420: LD_INT 28
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 34
10429: PUSH
10430: LD_INT 47
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: ST_TO_ADDR
// if not tmp then
10453: LD_VAR 0 2
10457: NOT
10458: IFFALSE 10462
// exit ;
10460: GO 10491
// for i in tmp do
10462: LD_ADDR_VAR 0 1
10466: PUSH
10467: LD_VAR 0 2
10471: PUSH
10472: FOR_IN
10473: IFFALSE 10489
// begin SetLives ( i , 0 ) ;
10475: LD_VAR 0 1
10479: PPUSH
10480: LD_INT 0
10482: PPUSH
10483: CALL_OW 234
// end ;
10487: GO 10472
10489: POP
10490: POP
// end ;
10491: PPOPN 2
10493: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10494: LD_EXP 12
10498: PUSH
10499: LD_EXP 18
10503: AND
10504: IFFALSE 10588
10506: GO 10508
10508: DISABLE
10509: LD_INT 0
10511: PPUSH
10512: PPUSH
// begin enable ;
10513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10514: LD_ADDR_VAR 0 2
10518: PUSH
10519: LD_INT 22
10521: PUSH
10522: LD_OWVAR 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 32
10533: PUSH
10534: LD_INT 3
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL_OW 69
10549: ST_TO_ADDR
// if not tmp then
10550: LD_VAR 0 2
10554: NOT
10555: IFFALSE 10559
// exit ;
10557: GO 10588
// for i in tmp do
10559: LD_ADDR_VAR 0 1
10563: PUSH
10564: LD_VAR 0 2
10568: PUSH
10569: FOR_IN
10570: IFFALSE 10586
// begin SetLives ( i , 0 ) ;
10572: LD_VAR 0 1
10576: PPUSH
10577: LD_INT 0
10579: PPUSH
10580: CALL_OW 234
// end ;
10584: GO 10569
10586: POP
10587: POP
// end ;
10588: PPOPN 2
10590: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10591: LD_EXP 12
10595: PUSH
10596: LD_EXP 15
10600: AND
10601: IFFALSE 10694
10603: GO 10605
10605: DISABLE
10606: LD_INT 0
10608: PPUSH
// begin enable ;
10609: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10610: LD_ADDR_VAR 0 1
10614: PUSH
10615: LD_INT 22
10617: PUSH
10618: LD_OWVAR 2
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 2
10629: PUSH
10630: LD_INT 25
10632: PUSH
10633: LD_INT 5
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 25
10642: PUSH
10643: LD_INT 9
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 25
10652: PUSH
10653: LD_INT 8
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PUSH
10675: FOR_IN
10676: IFFALSE 10692
// begin SetClass ( i , 1 ) ;
10678: LD_VAR 0 1
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 336
// end ;
10690: GO 10675
10692: POP
10693: POP
// end ;
10694: PPOPN 1
10696: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10697: LD_EXP 12
10701: PUSH
10702: LD_EXP 16
10706: AND
10707: PUSH
10708: LD_OWVAR 65
10712: PUSH
10713: LD_INT 7
10715: LESS
10716: AND
10717: IFFALSE 10731
10719: GO 10721
10721: DISABLE
// begin enable ;
10722: ENABLE
// game_speed := 7 ;
10723: LD_ADDR_OWVAR 65
10727: PUSH
10728: LD_INT 7
10730: ST_TO_ADDR
// end ;
10731: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10732: LD_EXP 12
10736: PUSH
10737: LD_EXP 19
10741: AND
10742: IFFALSE 10944
10744: GO 10746
10746: DISABLE
10747: LD_INT 0
10749: PPUSH
10750: PPUSH
10751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10752: LD_ADDR_VAR 0 3
10756: PUSH
10757: LD_INT 81
10759: PUSH
10760: LD_OWVAR 2
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PPUSH
10783: CALL_OW 69
10787: ST_TO_ADDR
// if not tmp then
10788: LD_VAR 0 3
10792: NOT
10793: IFFALSE 10797
// exit ;
10795: GO 10944
// if tmp > 5 then
10797: LD_VAR 0 3
10801: PUSH
10802: LD_INT 5
10804: GREATER
10805: IFFALSE 10817
// k := 5 else
10807: LD_ADDR_VAR 0 2
10811: PUSH
10812: LD_INT 5
10814: ST_TO_ADDR
10815: GO 10827
// k := tmp ;
10817: LD_ADDR_VAR 0 2
10821: PUSH
10822: LD_VAR 0 3
10826: ST_TO_ADDR
// for i := 1 to k do
10827: LD_ADDR_VAR 0 1
10831: PUSH
10832: DOUBLE
10833: LD_INT 1
10835: DEC
10836: ST_TO_ADDR
10837: LD_VAR 0 2
10841: PUSH
10842: FOR_TO
10843: IFFALSE 10942
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10845: LD_VAR 0 3
10849: PUSH
10850: LD_VAR 0 1
10854: ARRAY
10855: PPUSH
10856: LD_VAR 0 1
10860: PUSH
10861: LD_INT 4
10863: MOD
10864: PUSH
10865: LD_INT 1
10867: PLUS
10868: PPUSH
10869: CALL_OW 259
10873: PUSH
10874: LD_INT 10
10876: LESS
10877: IFFALSE 10940
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10879: LD_VAR 0 3
10883: PUSH
10884: LD_VAR 0 1
10888: ARRAY
10889: PPUSH
10890: LD_VAR 0 1
10894: PUSH
10895: LD_INT 4
10897: MOD
10898: PUSH
10899: LD_INT 1
10901: PLUS
10902: PPUSH
10903: LD_VAR 0 3
10907: PUSH
10908: LD_VAR 0 1
10912: ARRAY
10913: PPUSH
10914: LD_VAR 0 1
10918: PUSH
10919: LD_INT 4
10921: MOD
10922: PUSH
10923: LD_INT 1
10925: PLUS
10926: PPUSH
10927: CALL_OW 259
10931: PUSH
10932: LD_INT 1
10934: PLUS
10935: PPUSH
10936: CALL_OW 237
10940: GO 10842
10942: POP
10943: POP
// end ;
10944: PPOPN 3
10946: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10947: LD_EXP 12
10951: PUSH
10952: LD_EXP 20
10956: AND
10957: IFFALSE 10977
10959: GO 10961
10961: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10962: LD_INT 4
10964: PPUSH
10965: LD_OWVAR 2
10969: PPUSH
10970: LD_INT 0
10972: PPUSH
10973: CALL_OW 324
10977: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10978: LD_EXP 12
10982: PUSH
10983: LD_EXP 49
10987: AND
10988: IFFALSE 11008
10990: GO 10992
10992: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10993: LD_INT 19
10995: PPUSH
10996: LD_OWVAR 2
11000: PPUSH
11001: LD_INT 0
11003: PPUSH
11004: CALL_OW 324
11008: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11009: LD_EXP 12
11013: PUSH
11014: LD_EXP 21
11018: AND
11019: IFFALSE 11121
11021: GO 11023
11023: DISABLE
11024: LD_INT 0
11026: PPUSH
11027: PPUSH
// begin enable ;
11028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11029: LD_ADDR_VAR 0 2
11033: PUSH
11034: LD_INT 22
11036: PUSH
11037: LD_OWVAR 2
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 2
11048: PUSH
11049: LD_INT 34
11051: PUSH
11052: LD_INT 11
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 34
11061: PUSH
11062: LD_INT 30
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: ST_TO_ADDR
// if not tmp then
11083: LD_VAR 0 2
11087: NOT
11088: IFFALSE 11092
// exit ;
11090: GO 11121
// for i in tmp do
11092: LD_ADDR_VAR 0 1
11096: PUSH
11097: LD_VAR 0 2
11101: PUSH
11102: FOR_IN
11103: IFFALSE 11119
// begin SetLives ( i , 0 ) ;
11105: LD_VAR 0 1
11109: PPUSH
11110: LD_INT 0
11112: PPUSH
11113: CALL_OW 234
// end ;
11117: GO 11102
11119: POP
11120: POP
// end ;
11121: PPOPN 2
11123: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11124: LD_EXP 12
11128: PUSH
11129: LD_EXP 22
11133: AND
11134: IFFALSE 11154
11136: GO 11138
11138: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11139: LD_INT 32
11141: PPUSH
11142: LD_OWVAR 2
11146: PPUSH
11147: LD_INT 0
11149: PPUSH
11150: CALL_OW 324
11154: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11155: LD_EXP 12
11159: PUSH
11160: LD_EXP 23
11164: AND
11165: IFFALSE 11346
11167: GO 11169
11169: DISABLE
11170: LD_INT 0
11172: PPUSH
11173: PPUSH
11174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11175: LD_ADDR_VAR 0 2
11179: PUSH
11180: LD_INT 22
11182: PUSH
11183: LD_OWVAR 2
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 33
11194: PUSH
11195: LD_INT 3
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PPUSH
11206: CALL_OW 69
11210: ST_TO_ADDR
// if not tmp then
11211: LD_VAR 0 2
11215: NOT
11216: IFFALSE 11220
// exit ;
11218: GO 11346
// side := 0 ;
11220: LD_ADDR_VAR 0 3
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// for i := 1 to 8 do
11228: LD_ADDR_VAR 0 1
11232: PUSH
11233: DOUBLE
11234: LD_INT 1
11236: DEC
11237: ST_TO_ADDR
11238: LD_INT 8
11240: PUSH
11241: FOR_TO
11242: IFFALSE 11290
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11244: LD_OWVAR 2
11248: PUSH
11249: LD_VAR 0 1
11253: NONEQUAL
11254: PUSH
11255: LD_OWVAR 2
11259: PPUSH
11260: LD_VAR 0 1
11264: PPUSH
11265: CALL_OW 81
11269: PUSH
11270: LD_INT 2
11272: EQUAL
11273: AND
11274: IFFALSE 11288
// begin side := i ;
11276: LD_ADDR_VAR 0 3
11280: PUSH
11281: LD_VAR 0 1
11285: ST_TO_ADDR
// break ;
11286: GO 11290
// end ;
11288: GO 11241
11290: POP
11291: POP
// if not side then
11292: LD_VAR 0 3
11296: NOT
11297: IFFALSE 11301
// exit ;
11299: GO 11346
// for i := 1 to tmp do
11301: LD_ADDR_VAR 0 1
11305: PUSH
11306: DOUBLE
11307: LD_INT 1
11309: DEC
11310: ST_TO_ADDR
11311: LD_VAR 0 2
11315: PUSH
11316: FOR_TO
11317: IFFALSE 11344
// if Prob ( 60 ) then
11319: LD_INT 60
11321: PPUSH
11322: CALL_OW 13
11326: IFFALSE 11342
// SetSide ( i , side ) ;
11328: LD_VAR 0 1
11332: PPUSH
11333: LD_VAR 0 3
11337: PPUSH
11338: CALL_OW 235
11342: GO 11316
11344: POP
11345: POP
// end ;
11346: PPOPN 3
11348: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11349: LD_EXP 12
11353: PUSH
11354: LD_EXP 25
11358: AND
11359: IFFALSE 11478
11361: GO 11363
11363: DISABLE
11364: LD_INT 0
11366: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11367: LD_ADDR_VAR 0 1
11371: PUSH
11372: LD_INT 22
11374: PUSH
11375: LD_OWVAR 2
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 21
11386: PUSH
11387: LD_INT 1
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 3
11396: PUSH
11397: LD_INT 23
11399: PUSH
11400: LD_INT 0
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: PPUSH
11416: CALL_OW 69
11420: PUSH
11421: FOR_IN
11422: IFFALSE 11476
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 257
11433: PUSH
11434: LD_INT 1
11436: PUSH
11437: LD_INT 2
11439: PUSH
11440: LD_INT 3
11442: PUSH
11443: LD_INT 4
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: IN
11452: IFFALSE 11474
// SetClass ( un , rand ( 1 , 4 ) ) ;
11454: LD_VAR 0 1
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: LD_INT 4
11464: PPUSH
11465: CALL_OW 12
11469: PPUSH
11470: CALL_OW 336
11474: GO 11421
11476: POP
11477: POP
// end ;
11478: PPOPN 1
11480: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11481: LD_EXP 12
11485: PUSH
11486: LD_EXP 24
11490: AND
11491: IFFALSE 11570
11493: GO 11495
11495: DISABLE
11496: LD_INT 0
11498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11499: LD_ADDR_VAR 0 1
11503: PUSH
11504: LD_INT 22
11506: PUSH
11507: LD_OWVAR 2
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 21
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: ST_TO_ADDR
// if not tmp then
11535: LD_VAR 0 1
11539: NOT
11540: IFFALSE 11544
// exit ;
11542: GO 11570
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11544: LD_VAR 0 1
11548: PUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_VAR 0 1
11556: PPUSH
11557: CALL_OW 12
11561: ARRAY
11562: PPUSH
11563: LD_INT 100
11565: PPUSH
11566: CALL_OW 234
// end ;
11570: PPOPN 1
11572: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11573: LD_EXP 12
11577: PUSH
11578: LD_EXP 26
11582: AND
11583: IFFALSE 11681
11585: GO 11587
11587: DISABLE
11588: LD_INT 0
11590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11591: LD_ADDR_VAR 0 1
11595: PUSH
11596: LD_INT 22
11598: PUSH
11599: LD_OWVAR 2
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 21
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PPUSH
11622: CALL_OW 69
11626: ST_TO_ADDR
// if not tmp then
11627: LD_VAR 0 1
11631: NOT
11632: IFFALSE 11636
// exit ;
11634: GO 11681
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11636: LD_VAR 0 1
11640: PUSH
11641: LD_INT 1
11643: PPUSH
11644: LD_VAR 0 1
11648: PPUSH
11649: CALL_OW 12
11653: ARRAY
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: LD_INT 4
11660: PPUSH
11661: CALL_OW 12
11665: PPUSH
11666: LD_INT 3000
11668: PPUSH
11669: LD_INT 9000
11671: PPUSH
11672: CALL_OW 12
11676: PPUSH
11677: CALL_OW 492
// end ;
11681: PPOPN 1
11683: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11684: LD_EXP 12
11688: PUSH
11689: LD_EXP 27
11693: AND
11694: IFFALSE 11714
11696: GO 11698
11698: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11699: LD_INT 1
11701: PPUSH
11702: LD_OWVAR 2
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: CALL_OW 324
11714: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11715: LD_EXP 12
11719: PUSH
11720: LD_EXP 28
11724: AND
11725: IFFALSE 11808
11727: GO 11729
11729: DISABLE
11730: LD_INT 0
11732: PPUSH
11733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11734: LD_ADDR_VAR 0 2
11738: PUSH
11739: LD_INT 22
11741: PUSH
11742: LD_OWVAR 2
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 21
11753: PUSH
11754: LD_INT 3
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PPUSH
11765: CALL_OW 69
11769: ST_TO_ADDR
// if not tmp then
11770: LD_VAR 0 2
11774: NOT
11775: IFFALSE 11779
// exit ;
11777: GO 11808
// for i in tmp do
11779: LD_ADDR_VAR 0 1
11783: PUSH
11784: LD_VAR 0 2
11788: PUSH
11789: FOR_IN
11790: IFFALSE 11806
// SetBLevel ( i , 10 ) ;
11792: LD_VAR 0 1
11796: PPUSH
11797: LD_INT 10
11799: PPUSH
11800: CALL_OW 241
11804: GO 11789
11806: POP
11807: POP
// end ;
11808: PPOPN 2
11810: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11811: LD_EXP 12
11815: PUSH
11816: LD_EXP 29
11820: AND
11821: IFFALSE 11932
11823: GO 11825
11825: DISABLE
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11831: LD_ADDR_VAR 0 3
11835: PUSH
11836: LD_INT 22
11838: PUSH
11839: LD_OWVAR 2
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 25
11850: PUSH
11851: LD_INT 1
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PPUSH
11862: CALL_OW 69
11866: ST_TO_ADDR
// if not tmp then
11867: LD_VAR 0 3
11871: NOT
11872: IFFALSE 11876
// exit ;
11874: GO 11932
// un := tmp [ rand ( 1 , tmp ) ] ;
11876: LD_ADDR_VAR 0 2
11880: PUSH
11881: LD_VAR 0 3
11885: PUSH
11886: LD_INT 1
11888: PPUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: CALL_OW 12
11898: ARRAY
11899: ST_TO_ADDR
// if Crawls ( un ) then
11900: LD_VAR 0 2
11904: PPUSH
11905: CALL_OW 318
11909: IFFALSE 11920
// ComWalk ( un ) ;
11911: LD_VAR 0 2
11915: PPUSH
11916: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11920: LD_VAR 0 2
11924: PPUSH
11925: LD_INT 5
11927: PPUSH
11928: CALL_OW 336
// end ;
11932: PPOPN 3
11934: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11935: LD_EXP 12
11939: PUSH
11940: LD_EXP 30
11944: AND
11945: PUSH
11946: LD_OWVAR 67
11950: PUSH
11951: LD_INT 4
11953: LESS
11954: AND
11955: IFFALSE 11974
11957: GO 11959
11959: DISABLE
// begin Difficulty := Difficulty + 1 ;
11960: LD_ADDR_OWVAR 67
11964: PUSH
11965: LD_OWVAR 67
11969: PUSH
11970: LD_INT 1
11972: PLUS
11973: ST_TO_ADDR
// end ;
11974: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11975: LD_EXP 12
11979: PUSH
11980: LD_EXP 31
11984: AND
11985: IFFALSE 12088
11987: GO 11989
11989: DISABLE
11990: LD_INT 0
11992: PPUSH
// begin for i := 1 to 5 do
11993: LD_ADDR_VAR 0 1
11997: PUSH
11998: DOUBLE
11999: LD_INT 1
12001: DEC
12002: ST_TO_ADDR
12003: LD_INT 5
12005: PUSH
12006: FOR_TO
12007: IFFALSE 12086
// begin uc_nation := nation_nature ;
12009: LD_ADDR_OWVAR 21
12013: PUSH
12014: LD_INT 0
12016: ST_TO_ADDR
// uc_side := 0 ;
12017: LD_ADDR_OWVAR 20
12021: PUSH
12022: LD_INT 0
12024: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12025: LD_ADDR_OWVAR 29
12029: PUSH
12030: LD_INT 12
12032: PUSH
12033: LD_INT 12
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: ST_TO_ADDR
// hc_agressivity := 20 ;
12040: LD_ADDR_OWVAR 35
12044: PUSH
12045: LD_INT 20
12047: ST_TO_ADDR
// hc_class := class_tiger ;
12048: LD_ADDR_OWVAR 28
12052: PUSH
12053: LD_INT 14
12055: ST_TO_ADDR
// hc_gallery :=  ;
12056: LD_ADDR_OWVAR 33
12060: PUSH
12061: LD_STRING 
12063: ST_TO_ADDR
// hc_name :=  ;
12064: LD_ADDR_OWVAR 26
12068: PUSH
12069: LD_STRING 
12071: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12072: CALL_OW 44
12076: PPUSH
12077: LD_INT 0
12079: PPUSH
12080: CALL_OW 51
// end ;
12084: GO 12006
12086: POP
12087: POP
// end ;
12088: PPOPN 1
12090: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12091: LD_EXP 12
12095: PUSH
12096: LD_EXP 32
12100: AND
12101: IFFALSE 12110
12103: GO 12105
12105: DISABLE
// StreamSibBomb ;
12106: CALL 12111 0 0
12110: END
// export function StreamSibBomb ; var i , x , y ; begin
12111: LD_INT 0
12113: PPUSH
12114: PPUSH
12115: PPUSH
12116: PPUSH
// result := false ;
12117: LD_ADDR_VAR 0 1
12121: PUSH
12122: LD_INT 0
12124: ST_TO_ADDR
// for i := 1 to 16 do
12125: LD_ADDR_VAR 0 2
12129: PUSH
12130: DOUBLE
12131: LD_INT 1
12133: DEC
12134: ST_TO_ADDR
12135: LD_INT 16
12137: PUSH
12138: FOR_TO
12139: IFFALSE 12338
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12141: LD_ADDR_VAR 0 3
12145: PUSH
12146: LD_INT 10
12148: PUSH
12149: LD_INT 20
12151: PUSH
12152: LD_INT 30
12154: PUSH
12155: LD_INT 40
12157: PUSH
12158: LD_INT 50
12160: PUSH
12161: LD_INT 60
12163: PUSH
12164: LD_INT 70
12166: PUSH
12167: LD_INT 80
12169: PUSH
12170: LD_INT 90
12172: PUSH
12173: LD_INT 100
12175: PUSH
12176: LD_INT 110
12178: PUSH
12179: LD_INT 120
12181: PUSH
12182: LD_INT 130
12184: PUSH
12185: LD_INT 140
12187: PUSH
12188: LD_INT 150
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_INT 15
12213: PPUSH
12214: CALL_OW 12
12218: ARRAY
12219: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12220: LD_ADDR_VAR 0 4
12224: PUSH
12225: LD_INT 10
12227: PUSH
12228: LD_INT 20
12230: PUSH
12231: LD_INT 30
12233: PUSH
12234: LD_INT 40
12236: PUSH
12237: LD_INT 50
12239: PUSH
12240: LD_INT 60
12242: PUSH
12243: LD_INT 70
12245: PUSH
12246: LD_INT 80
12248: PUSH
12249: LD_INT 90
12251: PUSH
12252: LD_INT 100
12254: PUSH
12255: LD_INT 110
12257: PUSH
12258: LD_INT 120
12260: PUSH
12261: LD_INT 130
12263: PUSH
12264: LD_INT 140
12266: PUSH
12267: LD_INT 150
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 1
12289: PPUSH
12290: LD_INT 15
12292: PPUSH
12293: CALL_OW 12
12297: ARRAY
12298: ST_TO_ADDR
// if ValidHex ( x , y ) then
12299: LD_VAR 0 3
12303: PPUSH
12304: LD_VAR 0 4
12308: PPUSH
12309: CALL_OW 488
12313: IFFALSE 12336
// begin result := [ x , y ] ;
12315: LD_ADDR_VAR 0 1
12319: PUSH
12320: LD_VAR 0 3
12324: PUSH
12325: LD_VAR 0 4
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: ST_TO_ADDR
// break ;
12334: GO 12338
// end ; end ;
12336: GO 12138
12338: POP
12339: POP
// if result then
12340: LD_VAR 0 1
12344: IFFALSE 12404
// begin ToLua ( playSibBomb() ) ;
12346: LD_STRING playSibBomb()
12348: PPUSH
12349: CALL_OW 559
// wait ( 0 0$14 ) ;
12353: LD_INT 490
12355: PPUSH
12356: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12360: LD_VAR 0 1
12364: PUSH
12365: LD_INT 1
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 1
12373: PUSH
12374: LD_INT 2
12376: ARRAY
12377: PPUSH
12378: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12382: LD_VAR 0 1
12386: PUSH
12387: LD_INT 1
12389: ARRAY
12390: PPUSH
12391: LD_VAR 0 1
12395: PUSH
12396: LD_INT 2
12398: ARRAY
12399: PPUSH
12400: CALL_OW 429
// end ; end ;
12404: LD_VAR 0 1
12408: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12409: LD_EXP 12
12413: PUSH
12414: LD_EXP 34
12418: AND
12419: IFFALSE 12431
12421: GO 12423
12423: DISABLE
// YouLost (  ) ;
12424: LD_STRING 
12426: PPUSH
12427: CALL_OW 104
12431: END
// every 0 0$1 trigger StreamModeActive and sFog do
12432: LD_EXP 12
12436: PUSH
12437: LD_EXP 33
12441: AND
12442: IFFALSE 12456
12444: GO 12446
12446: DISABLE
// FogOff ( your_side ) ;
12447: LD_OWVAR 2
12451: PPUSH
12452: CALL_OW 344
12456: END
// every 0 0$1 trigger StreamModeActive and sSun do
12457: LD_EXP 12
12461: PUSH
12462: LD_EXP 35
12466: AND
12467: IFFALSE 12495
12469: GO 12471
12471: DISABLE
// begin solar_recharge_percent := 0 ;
12472: LD_ADDR_OWVAR 79
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12480: LD_INT 10500
12482: PPUSH
12483: CALL_OW 67
// solar_recharge_percent := 100 ;
12487: LD_ADDR_OWVAR 79
12491: PUSH
12492: LD_INT 100
12494: ST_TO_ADDR
// end ;
12495: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12496: LD_EXP 12
12500: PUSH
12501: LD_EXP 36
12505: AND
12506: IFFALSE 12745
12508: GO 12510
12510: DISABLE
12511: LD_INT 0
12513: PPUSH
12514: PPUSH
12515: PPUSH
// begin tmp := [ ] ;
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: EMPTY
12522: ST_TO_ADDR
// for i := 1 to 6 do
12523: LD_ADDR_VAR 0 1
12527: PUSH
12528: DOUBLE
12529: LD_INT 1
12531: DEC
12532: ST_TO_ADDR
12533: LD_INT 6
12535: PUSH
12536: FOR_TO
12537: IFFALSE 12642
// begin uc_nation := nation_nature ;
12539: LD_ADDR_OWVAR 21
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// uc_side := 0 ;
12547: LD_ADDR_OWVAR 20
12551: PUSH
12552: LD_INT 0
12554: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12555: LD_ADDR_OWVAR 29
12559: PUSH
12560: LD_INT 12
12562: PUSH
12563: LD_INT 12
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: ST_TO_ADDR
// hc_agressivity := 20 ;
12570: LD_ADDR_OWVAR 35
12574: PUSH
12575: LD_INT 20
12577: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12578: LD_ADDR_OWVAR 28
12582: PUSH
12583: LD_INT 17
12585: ST_TO_ADDR
// hc_gallery :=  ;
12586: LD_ADDR_OWVAR 33
12590: PUSH
12591: LD_STRING 
12593: ST_TO_ADDR
// hc_name :=  ;
12594: LD_ADDR_OWVAR 26
12598: PUSH
12599: LD_STRING 
12601: ST_TO_ADDR
// un := CreateHuman ;
12602: LD_ADDR_VAR 0 2
12606: PUSH
12607: CALL_OW 44
12611: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12612: LD_VAR 0 2
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: CALL_OW 51
// tmp := tmp ^ un ;
12624: LD_ADDR_VAR 0 3
12628: PUSH
12629: LD_VAR 0 3
12633: PUSH
12634: LD_VAR 0 2
12638: ADD
12639: ST_TO_ADDR
// end ;
12640: GO 12536
12642: POP
12643: POP
// repeat wait ( 0 0$1 ) ;
12644: LD_INT 35
12646: PPUSH
12647: CALL_OW 67
// for un in tmp do
12651: LD_ADDR_VAR 0 2
12655: PUSH
12656: LD_VAR 0 3
12660: PUSH
12661: FOR_IN
12662: IFFALSE 12736
// begin if IsDead ( un ) then
12664: LD_VAR 0 2
12668: PPUSH
12669: CALL_OW 301
12673: IFFALSE 12693
// begin tmp := tmp diff un ;
12675: LD_ADDR_VAR 0 3
12679: PUSH
12680: LD_VAR 0 3
12684: PUSH
12685: LD_VAR 0 2
12689: DIFF
12690: ST_TO_ADDR
// continue ;
12691: GO 12661
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12693: LD_VAR 0 2
12697: PPUSH
12698: LD_INT 3
12700: PUSH
12701: LD_INT 22
12703: PUSH
12704: LD_INT 0
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 69
12719: PPUSH
12720: LD_VAR 0 2
12724: PPUSH
12725: CALL_OW 74
12729: PPUSH
12730: CALL_OW 115
// end ;
12734: GO 12661
12736: POP
12737: POP
// until not tmp ;
12738: LD_VAR 0 3
12742: NOT
12743: IFFALSE 12644
// end ;
12745: PPOPN 3
12747: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12748: LD_EXP 12
12752: PUSH
12753: LD_EXP 37
12757: AND
12758: IFFALSE 12812
12760: GO 12762
12762: DISABLE
// begin ToLua ( displayTroll(); ) ;
12763: LD_STRING displayTroll();
12765: PPUSH
12766: CALL_OW 559
// wait ( 3 3$00 ) ;
12770: LD_INT 6300
12772: PPUSH
12773: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12777: LD_STRING hideTroll();
12779: PPUSH
12780: CALL_OW 559
// wait ( 1 1$00 ) ;
12784: LD_INT 2100
12786: PPUSH
12787: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12791: LD_STRING displayTroll();
12793: PPUSH
12794: CALL_OW 559
// wait ( 1 1$00 ) ;
12798: LD_INT 2100
12800: PPUSH
12801: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12805: LD_STRING hideTroll();
12807: PPUSH
12808: CALL_OW 559
// end ;
12812: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12813: LD_EXP 12
12817: PUSH
12818: LD_EXP 38
12822: AND
12823: IFFALSE 12886
12825: GO 12827
12827: DISABLE
12828: LD_INT 0
12830: PPUSH
// begin p := 0 ;
12831: LD_ADDR_VAR 0 1
12835: PUSH
12836: LD_INT 0
12838: ST_TO_ADDR
// repeat game_speed := 1 ;
12839: LD_ADDR_OWVAR 65
12843: PUSH
12844: LD_INT 1
12846: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12847: LD_INT 35
12849: PPUSH
12850: CALL_OW 67
// p := p + 1 ;
12854: LD_ADDR_VAR 0 1
12858: PUSH
12859: LD_VAR 0 1
12863: PUSH
12864: LD_INT 1
12866: PLUS
12867: ST_TO_ADDR
// until p >= 60 ;
12868: LD_VAR 0 1
12872: PUSH
12873: LD_INT 60
12875: GREATEREQUAL
12876: IFFALSE 12839
// game_speed := 4 ;
12878: LD_ADDR_OWVAR 65
12882: PUSH
12883: LD_INT 4
12885: ST_TO_ADDR
// end ;
12886: PPOPN 1
12888: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12889: LD_EXP 12
12893: PUSH
12894: LD_EXP 39
12898: AND
12899: IFFALSE 13045
12901: GO 12903
12903: DISABLE
12904: LD_INT 0
12906: PPUSH
12907: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12908: LD_ADDR_VAR 0 1
12912: PUSH
12913: LD_INT 22
12915: PUSH
12916: LD_OWVAR 2
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 2
12927: PUSH
12928: LD_INT 30
12930: PUSH
12931: LD_INT 0
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 30
12940: PUSH
12941: LD_INT 1
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PPUSH
12957: CALL_OW 69
12961: ST_TO_ADDR
// if not depot then
12962: LD_VAR 0 1
12966: NOT
12967: IFFALSE 12971
// exit ;
12969: GO 13045
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12971: LD_ADDR_VAR 0 2
12975: PUSH
12976: LD_VAR 0 1
12980: PUSH
12981: LD_INT 1
12983: PPUSH
12984: LD_VAR 0 1
12988: PPUSH
12989: CALL_OW 12
12993: ARRAY
12994: PPUSH
12995: CALL_OW 274
12999: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13000: LD_VAR 0 2
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: LD_INT 0
13010: PPUSH
13011: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13015: LD_VAR 0 2
13019: PPUSH
13020: LD_INT 2
13022: PPUSH
13023: LD_INT 0
13025: PPUSH
13026: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13030: LD_VAR 0 2
13034: PPUSH
13035: LD_INT 3
13037: PPUSH
13038: LD_INT 0
13040: PPUSH
13041: CALL_OW 277
// end ;
13045: PPOPN 2
13047: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13048: LD_EXP 12
13052: PUSH
13053: LD_EXP 40
13057: AND
13058: IFFALSE 13155
13060: GO 13062
13062: DISABLE
13063: LD_INT 0
13065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13066: LD_ADDR_VAR 0 1
13070: PUSH
13071: LD_INT 22
13073: PUSH
13074: LD_OWVAR 2
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 21
13085: PUSH
13086: LD_INT 1
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: LD_INT 3
13095: PUSH
13096: LD_INT 23
13098: PUSH
13099: LD_INT 0
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: PPUSH
13115: CALL_OW 69
13119: ST_TO_ADDR
// if not tmp then
13120: LD_VAR 0 1
13124: NOT
13125: IFFALSE 13129
// exit ;
13127: GO 13155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13129: LD_VAR 0 1
13133: PUSH
13134: LD_INT 1
13136: PPUSH
13137: LD_VAR 0 1
13141: PPUSH
13142: CALL_OW 12
13146: ARRAY
13147: PPUSH
13148: LD_INT 200
13150: PPUSH
13151: CALL_OW 234
// end ;
13155: PPOPN 1
13157: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13158: LD_EXP 12
13162: PUSH
13163: LD_EXP 41
13167: AND
13168: IFFALSE 13247
13170: GO 13172
13172: DISABLE
13173: LD_INT 0
13175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13176: LD_ADDR_VAR 0 1
13180: PUSH
13181: LD_INT 22
13183: PUSH
13184: LD_OWVAR 2
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 21
13195: PUSH
13196: LD_INT 2
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 69
13211: ST_TO_ADDR
// if not tmp then
13212: LD_VAR 0 1
13216: NOT
13217: IFFALSE 13221
// exit ;
13219: GO 13247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13221: LD_VAR 0 1
13225: PUSH
13226: LD_INT 1
13228: PPUSH
13229: LD_VAR 0 1
13233: PPUSH
13234: CALL_OW 12
13238: ARRAY
13239: PPUSH
13240: LD_INT 60
13242: PPUSH
13243: CALL_OW 234
// end ;
13247: PPOPN 1
13249: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13250: LD_EXP 12
13254: PUSH
13255: LD_EXP 42
13259: AND
13260: IFFALSE 13359
13262: GO 13264
13264: DISABLE
13265: LD_INT 0
13267: PPUSH
13268: PPUSH
// begin enable ;
13269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13270: LD_ADDR_VAR 0 1
13274: PUSH
13275: LD_INT 22
13277: PUSH
13278: LD_OWVAR 2
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 61
13289: PUSH
13290: EMPTY
13291: LIST
13292: PUSH
13293: LD_INT 33
13295: PUSH
13296: LD_INT 2
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: LIST
13307: PPUSH
13308: CALL_OW 69
13312: ST_TO_ADDR
// if not tmp then
13313: LD_VAR 0 1
13317: NOT
13318: IFFALSE 13322
// exit ;
13320: GO 13359
// for i in tmp do
13322: LD_ADDR_VAR 0 2
13326: PUSH
13327: LD_VAR 0 1
13331: PUSH
13332: FOR_IN
13333: IFFALSE 13357
// if IsControledBy ( i ) then
13335: LD_VAR 0 2
13339: PPUSH
13340: CALL_OW 312
13344: IFFALSE 13355
// ComUnlink ( i ) ;
13346: LD_VAR 0 2
13350: PPUSH
13351: CALL_OW 136
13355: GO 13332
13357: POP
13358: POP
// end ;
13359: PPOPN 2
13361: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13362: LD_EXP 12
13366: PUSH
13367: LD_EXP 43
13371: AND
13372: IFFALSE 13512
13374: GO 13376
13376: DISABLE
13377: LD_INT 0
13379: PPUSH
13380: PPUSH
// begin ToLua ( displayPowell(); ) ;
13381: LD_STRING displayPowell();
13383: PPUSH
13384: CALL_OW 559
// uc_side := 0 ;
13388: LD_ADDR_OWVAR 20
13392: PUSH
13393: LD_INT 0
13395: ST_TO_ADDR
// uc_nation := 2 ;
13396: LD_ADDR_OWVAR 21
13400: PUSH
13401: LD_INT 2
13403: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13404: LD_ADDR_OWVAR 37
13408: PUSH
13409: LD_INT 14
13411: ST_TO_ADDR
// vc_engine := engine_siberite ;
13412: LD_ADDR_OWVAR 39
13416: PUSH
13417: LD_INT 3
13419: ST_TO_ADDR
// vc_control := control_apeman ;
13420: LD_ADDR_OWVAR 38
13424: PUSH
13425: LD_INT 5
13427: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13428: LD_ADDR_OWVAR 40
13432: PUSH
13433: LD_INT 29
13435: ST_TO_ADDR
// un := CreateVehicle ;
13436: LD_ADDR_VAR 0 2
13440: PUSH
13441: CALL_OW 45
13445: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13446: LD_VAR 0 2
13450: PPUSH
13451: LD_INT 1
13453: PPUSH
13454: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13458: LD_INT 35
13460: PPUSH
13461: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13465: LD_VAR 0 2
13469: PPUSH
13470: LD_INT 22
13472: PUSH
13473: LD_OWVAR 2
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 69
13486: PPUSH
13487: LD_VAR 0 2
13491: PPUSH
13492: CALL_OW 74
13496: PPUSH
13497: CALL_OW 115
// until IsDead ( un ) ;
13501: LD_VAR 0 2
13505: PPUSH
13506: CALL_OW 301
13510: IFFALSE 13458
// end ;
13512: PPOPN 2
13514: END
// every 0 0$1 trigger StreamModeActive and sStu do
13515: LD_EXP 12
13519: PUSH
13520: LD_EXP 51
13524: AND
13525: IFFALSE 13541
13527: GO 13529
13529: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13530: LD_STRING displayStucuk();
13532: PPUSH
13533: CALL_OW 559
// ResetFog ;
13537: CALL_OW 335
// end ;
13541: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13542: LD_EXP 12
13546: PUSH
13547: LD_EXP 44
13551: AND
13552: IFFALSE 13693
13554: GO 13556
13556: DISABLE
13557: LD_INT 0
13559: PPUSH
13560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13561: LD_ADDR_VAR 0 2
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_OWVAR 2
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 21
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PPUSH
13592: CALL_OW 69
13596: ST_TO_ADDR
// if not tmp then
13597: LD_VAR 0 2
13601: NOT
13602: IFFALSE 13606
// exit ;
13604: GO 13693
// un := tmp [ rand ( 1 , tmp ) ] ;
13606: LD_ADDR_VAR 0 1
13610: PUSH
13611: LD_VAR 0 2
13615: PUSH
13616: LD_INT 1
13618: PPUSH
13619: LD_VAR 0 2
13623: PPUSH
13624: CALL_OW 12
13628: ARRAY
13629: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13630: LD_VAR 0 1
13634: PPUSH
13635: LD_INT 0
13637: PPUSH
13638: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13642: LD_VAR 0 1
13646: PPUSH
13647: LD_OWVAR 3
13651: PUSH
13652: LD_VAR 0 1
13656: DIFF
13657: PPUSH
13658: LD_VAR 0 1
13662: PPUSH
13663: CALL_OW 74
13667: PPUSH
13668: CALL_OW 115
// wait ( 0 0$20 ) ;
13672: LD_INT 700
13674: PPUSH
13675: CALL_OW 67
// SetSide ( un , your_side ) ;
13679: LD_VAR 0 1
13683: PPUSH
13684: LD_OWVAR 2
13688: PPUSH
13689: CALL_OW 235
// end ;
13693: PPOPN 2
13695: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13696: LD_EXP 12
13700: PUSH
13701: LD_EXP 45
13705: AND
13706: IFFALSE 13812
13708: GO 13710
13710: DISABLE
13711: LD_INT 0
13713: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13714: LD_ADDR_VAR 0 1
13718: PUSH
13719: LD_INT 22
13721: PUSH
13722: LD_OWVAR 2
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: LD_INT 30
13736: PUSH
13737: LD_INT 0
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 30
13746: PUSH
13747: LD_INT 1
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 69
13767: ST_TO_ADDR
// if not depot then
13768: LD_VAR 0 1
13772: NOT
13773: IFFALSE 13777
// exit ;
13775: GO 13812
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13777: LD_VAR 0 1
13781: PUSH
13782: LD_INT 1
13784: ARRAY
13785: PPUSH
13786: CALL_OW 250
13790: PPUSH
13791: LD_VAR 0 1
13795: PUSH
13796: LD_INT 1
13798: ARRAY
13799: PPUSH
13800: CALL_OW 251
13804: PPUSH
13805: LD_INT 70
13807: PPUSH
13808: CALL_OW 495
// end ;
13812: PPOPN 1
13814: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13815: LD_EXP 12
13819: PUSH
13820: LD_EXP 46
13824: AND
13825: IFFALSE 14036
13827: GO 13829
13829: DISABLE
13830: LD_INT 0
13832: PPUSH
13833: PPUSH
13834: PPUSH
13835: PPUSH
13836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13837: LD_ADDR_VAR 0 5
13841: PUSH
13842: LD_INT 22
13844: PUSH
13845: LD_OWVAR 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 21
13856: PUSH
13857: LD_INT 1
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PPUSH
13868: CALL_OW 69
13872: ST_TO_ADDR
// if not tmp then
13873: LD_VAR 0 5
13877: NOT
13878: IFFALSE 13882
// exit ;
13880: GO 14036
// for i in tmp do
13882: LD_ADDR_VAR 0 1
13886: PUSH
13887: LD_VAR 0 5
13891: PUSH
13892: FOR_IN
13893: IFFALSE 14034
// begin d := rand ( 0 , 5 ) ;
13895: LD_ADDR_VAR 0 4
13899: PUSH
13900: LD_INT 0
13902: PPUSH
13903: LD_INT 5
13905: PPUSH
13906: CALL_OW 12
13910: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13911: LD_ADDR_VAR 0 2
13915: PUSH
13916: LD_VAR 0 1
13920: PPUSH
13921: CALL_OW 250
13925: PPUSH
13926: LD_VAR 0 4
13930: PPUSH
13931: LD_INT 3
13933: PPUSH
13934: LD_INT 12
13936: PPUSH
13937: CALL_OW 12
13941: PPUSH
13942: CALL_OW 272
13946: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13947: LD_ADDR_VAR 0 3
13951: PUSH
13952: LD_VAR 0 1
13956: PPUSH
13957: CALL_OW 251
13961: PPUSH
13962: LD_VAR 0 4
13966: PPUSH
13967: LD_INT 3
13969: PPUSH
13970: LD_INT 12
13972: PPUSH
13973: CALL_OW 12
13977: PPUSH
13978: CALL_OW 273
13982: ST_TO_ADDR
// if ValidHex ( x , y ) then
13983: LD_VAR 0 2
13987: PPUSH
13988: LD_VAR 0 3
13992: PPUSH
13993: CALL_OW 488
13997: IFFALSE 14032
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13999: LD_VAR 0 1
14003: PPUSH
14004: LD_VAR 0 2
14008: PPUSH
14009: LD_VAR 0 3
14013: PPUSH
14014: LD_INT 3
14016: PPUSH
14017: LD_INT 6
14019: PPUSH
14020: CALL_OW 12
14024: PPUSH
14025: LD_INT 1
14027: PPUSH
14028: CALL_OW 483
// end ;
14032: GO 13892
14034: POP
14035: POP
// end ;
14036: PPOPN 5
14038: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14039: LD_EXP 12
14043: PUSH
14044: LD_EXP 47
14048: AND
14049: IFFALSE 14143
14051: GO 14053
14053: DISABLE
14054: LD_INT 0
14056: PPUSH
14057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14058: LD_ADDR_VAR 0 2
14062: PUSH
14063: LD_INT 22
14065: PUSH
14066: LD_OWVAR 2
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 32
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 21
14087: PUSH
14088: LD_INT 2
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 69
14104: ST_TO_ADDR
// if not tmp then
14105: LD_VAR 0 2
14109: NOT
14110: IFFALSE 14114
// exit ;
14112: GO 14143
// for i in tmp do
14114: LD_ADDR_VAR 0 1
14118: PUSH
14119: LD_VAR 0 2
14123: PUSH
14124: FOR_IN
14125: IFFALSE 14141
// SetFuel ( i , 0 ) ;
14127: LD_VAR 0 1
14131: PPUSH
14132: LD_INT 0
14134: PPUSH
14135: CALL_OW 240
14139: GO 14124
14141: POP
14142: POP
// end ;
14143: PPOPN 2
14145: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14146: LD_EXP 12
14150: PUSH
14151: LD_EXP 48
14155: AND
14156: IFFALSE 14222
14158: GO 14160
14160: DISABLE
14161: LD_INT 0
14163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14164: LD_ADDR_VAR 0 1
14168: PUSH
14169: LD_INT 22
14171: PUSH
14172: LD_OWVAR 2
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 30
14183: PUSH
14184: LD_INT 29
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PPUSH
14195: CALL_OW 69
14199: ST_TO_ADDR
// if not tmp then
14200: LD_VAR 0 1
14204: NOT
14205: IFFALSE 14209
// exit ;
14207: GO 14222
// DestroyUnit ( tmp [ 1 ] ) ;
14209: LD_VAR 0 1
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: PPUSH
14218: CALL_OW 65
// end ;
14222: PPOPN 1
14224: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14225: LD_EXP 12
14229: PUSH
14230: LD_EXP 50
14234: AND
14235: IFFALSE 14364
14237: GO 14239
14239: DISABLE
14240: LD_INT 0
14242: PPUSH
// begin uc_side := 0 ;
14243: LD_ADDR_OWVAR 20
14247: PUSH
14248: LD_INT 0
14250: ST_TO_ADDR
// uc_nation := nation_arabian ;
14251: LD_ADDR_OWVAR 21
14255: PUSH
14256: LD_INT 2
14258: ST_TO_ADDR
// hc_gallery :=  ;
14259: LD_ADDR_OWVAR 33
14263: PUSH
14264: LD_STRING 
14266: ST_TO_ADDR
// hc_name :=  ;
14267: LD_ADDR_OWVAR 26
14271: PUSH
14272: LD_STRING 
14274: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14275: LD_INT 1
14277: PPUSH
14278: LD_INT 11
14280: PPUSH
14281: LD_INT 10
14283: PPUSH
14284: CALL_OW 380
// un := CreateHuman ;
14288: LD_ADDR_VAR 0 1
14292: PUSH
14293: CALL_OW 44
14297: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14298: LD_VAR 0 1
14302: PPUSH
14303: LD_INT 1
14305: PPUSH
14306: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14310: LD_INT 35
14312: PPUSH
14313: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14317: LD_VAR 0 1
14321: PPUSH
14322: LD_INT 22
14324: PUSH
14325: LD_OWVAR 2
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PPUSH
14334: CALL_OW 69
14338: PPUSH
14339: LD_VAR 0 1
14343: PPUSH
14344: CALL_OW 74
14348: PPUSH
14349: CALL_OW 115
// until IsDead ( un ) ;
14353: LD_VAR 0 1
14357: PPUSH
14358: CALL_OW 301
14362: IFFALSE 14310
// end ;
14364: PPOPN 1
14366: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14367: LD_EXP 12
14371: PUSH
14372: LD_EXP 52
14376: AND
14377: IFFALSE 14389
14379: GO 14381
14381: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14382: LD_STRING earthquake(getX(game), 0, 32)
14384: PPUSH
14385: CALL_OW 559
14389: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14390: LD_EXP 12
14394: PUSH
14395: LD_EXP 53
14399: AND
14400: IFFALSE 14491
14402: GO 14404
14404: DISABLE
14405: LD_INT 0
14407: PPUSH
// begin enable ;
14408: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14409: LD_ADDR_VAR 0 1
14413: PUSH
14414: LD_INT 22
14416: PUSH
14417: LD_OWVAR 2
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 21
14428: PUSH
14429: LD_INT 2
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 33
14438: PUSH
14439: LD_INT 3
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: LIST
14450: PPUSH
14451: CALL_OW 69
14455: ST_TO_ADDR
// if not tmp then
14456: LD_VAR 0 1
14460: NOT
14461: IFFALSE 14465
// exit ;
14463: GO 14491
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14465: LD_VAR 0 1
14469: PUSH
14470: LD_INT 1
14472: PPUSH
14473: LD_VAR 0 1
14477: PPUSH
14478: CALL_OW 12
14482: ARRAY
14483: PPUSH
14484: LD_INT 1
14486: PPUSH
14487: CALL_OW 234
// end ;
14491: PPOPN 1
14493: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14494: LD_EXP 12
14498: PUSH
14499: LD_EXP 54
14503: AND
14504: IFFALSE 14645
14506: GO 14508
14508: DISABLE
14509: LD_INT 0
14511: PPUSH
14512: PPUSH
14513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14514: LD_ADDR_VAR 0 3
14518: PUSH
14519: LD_INT 22
14521: PUSH
14522: LD_OWVAR 2
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 25
14533: PUSH
14534: LD_INT 1
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PPUSH
14545: CALL_OW 69
14549: ST_TO_ADDR
// if not tmp then
14550: LD_VAR 0 3
14554: NOT
14555: IFFALSE 14559
// exit ;
14557: GO 14645
// un := tmp [ rand ( 1 , tmp ) ] ;
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_VAR 0 3
14568: PUSH
14569: LD_INT 1
14571: PPUSH
14572: LD_VAR 0 3
14576: PPUSH
14577: CALL_OW 12
14581: ARRAY
14582: ST_TO_ADDR
// if Crawls ( un ) then
14583: LD_VAR 0 2
14587: PPUSH
14588: CALL_OW 318
14592: IFFALSE 14603
// ComWalk ( un ) ;
14594: LD_VAR 0 2
14598: PPUSH
14599: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14603: LD_VAR 0 2
14607: PPUSH
14608: LD_INT 9
14610: PPUSH
14611: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14615: LD_INT 28
14617: PPUSH
14618: LD_OWVAR 2
14622: PPUSH
14623: LD_INT 2
14625: PPUSH
14626: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14630: LD_INT 29
14632: PPUSH
14633: LD_OWVAR 2
14637: PPUSH
14638: LD_INT 2
14640: PPUSH
14641: CALL_OW 322
// end ;
14645: PPOPN 3
14647: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14648: LD_EXP 12
14652: PUSH
14653: LD_EXP 55
14657: AND
14658: IFFALSE 14769
14660: GO 14662
14662: DISABLE
14663: LD_INT 0
14665: PPUSH
14666: PPUSH
14667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14668: LD_ADDR_VAR 0 3
14672: PUSH
14673: LD_INT 22
14675: PUSH
14676: LD_OWVAR 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 25
14687: PUSH
14688: LD_INT 1
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 69
14703: ST_TO_ADDR
// if not tmp then
14704: LD_VAR 0 3
14708: NOT
14709: IFFALSE 14713
// exit ;
14711: GO 14769
// un := tmp [ rand ( 1 , tmp ) ] ;
14713: LD_ADDR_VAR 0 2
14717: PUSH
14718: LD_VAR 0 3
14722: PUSH
14723: LD_INT 1
14725: PPUSH
14726: LD_VAR 0 3
14730: PPUSH
14731: CALL_OW 12
14735: ARRAY
14736: ST_TO_ADDR
// if Crawls ( un ) then
14737: LD_VAR 0 2
14741: PPUSH
14742: CALL_OW 318
14746: IFFALSE 14757
// ComWalk ( un ) ;
14748: LD_VAR 0 2
14752: PPUSH
14753: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14757: LD_VAR 0 2
14761: PPUSH
14762: LD_INT 8
14764: PPUSH
14765: CALL_OW 336
// end ;
14769: PPOPN 3
14771: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14772: LD_EXP 12
14776: PUSH
14777: LD_EXP 56
14781: AND
14782: IFFALSE 14926
14784: GO 14786
14786: DISABLE
14787: LD_INT 0
14789: PPUSH
14790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14791: LD_ADDR_VAR 0 2
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_OWVAR 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 2
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: LD_INT 34
14823: PUSH
14824: LD_INT 12
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 34
14833: PUSH
14834: LD_INT 51
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 34
14843: PUSH
14844: LD_INT 32
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: PPUSH
14862: CALL_OW 69
14866: ST_TO_ADDR
// if not tmp then
14867: LD_VAR 0 2
14871: NOT
14872: IFFALSE 14876
// exit ;
14874: GO 14926
// for i in tmp do
14876: LD_ADDR_VAR 0 1
14880: PUSH
14881: LD_VAR 0 2
14885: PUSH
14886: FOR_IN
14887: IFFALSE 14924
// if GetCargo ( i , mat_artifact ) = 0 then
14889: LD_VAR 0 1
14893: PPUSH
14894: LD_INT 4
14896: PPUSH
14897: CALL_OW 289
14901: PUSH
14902: LD_INT 0
14904: EQUAL
14905: IFFALSE 14922
// SetCargo ( i , mat_siberit , 100 ) ;
14907: LD_VAR 0 1
14911: PPUSH
14912: LD_INT 3
14914: PPUSH
14915: LD_INT 100
14917: PPUSH
14918: CALL_OW 290
14922: GO 14886
14924: POP
14925: POP
// end ;
14926: PPOPN 2
14928: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14929: LD_EXP 12
14933: PUSH
14934: LD_EXP 57
14938: AND
14939: IFFALSE 15122
14941: GO 14943
14943: DISABLE
14944: LD_INT 0
14946: PPUSH
14947: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_OWVAR 2
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: CALL_OW 69
14969: ST_TO_ADDR
// if not tmp then
14970: LD_VAR 0 2
14974: NOT
14975: IFFALSE 14979
// exit ;
14977: GO 15122
// for i := 1 to 2 do
14979: LD_ADDR_VAR 0 1
14983: PUSH
14984: DOUBLE
14985: LD_INT 1
14987: DEC
14988: ST_TO_ADDR
14989: LD_INT 2
14991: PUSH
14992: FOR_TO
14993: IFFALSE 15120
// begin uc_side := your_side ;
14995: LD_ADDR_OWVAR 20
14999: PUSH
15000: LD_OWVAR 2
15004: ST_TO_ADDR
// uc_nation := nation_american ;
15005: LD_ADDR_OWVAR 21
15009: PUSH
15010: LD_INT 1
15012: ST_TO_ADDR
// vc_chassis := us_morphling ;
15013: LD_ADDR_OWVAR 37
15017: PUSH
15018: LD_INT 5
15020: ST_TO_ADDR
// vc_engine := engine_siberite ;
15021: LD_ADDR_OWVAR 39
15025: PUSH
15026: LD_INT 3
15028: ST_TO_ADDR
// vc_control := control_computer ;
15029: LD_ADDR_OWVAR 38
15033: PUSH
15034: LD_INT 3
15036: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15037: LD_ADDR_OWVAR 40
15041: PUSH
15042: LD_INT 10
15044: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15045: LD_VAR 0 2
15049: PUSH
15050: LD_INT 1
15052: ARRAY
15053: PPUSH
15054: CALL_OW 310
15058: NOT
15059: IFFALSE 15106
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15061: CALL_OW 45
15065: PPUSH
15066: LD_VAR 0 2
15070: PUSH
15071: LD_INT 1
15073: ARRAY
15074: PPUSH
15075: CALL_OW 250
15079: PPUSH
15080: LD_VAR 0 2
15084: PUSH
15085: LD_INT 1
15087: ARRAY
15088: PPUSH
15089: CALL_OW 251
15093: PPUSH
15094: LD_INT 12
15096: PPUSH
15097: LD_INT 1
15099: PPUSH
15100: CALL_OW 50
15104: GO 15118
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15106: CALL_OW 45
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 51
// end ;
15118: GO 14992
15120: POP
15121: POP
// end ;
15122: PPOPN 2
15124: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15125: LD_EXP 12
15129: PUSH
15130: LD_EXP 58
15134: AND
15135: IFFALSE 15357
15137: GO 15139
15139: DISABLE
15140: LD_INT 0
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15148: LD_ADDR_VAR 0 6
15152: PUSH
15153: LD_INT 22
15155: PUSH
15156: LD_OWVAR 2
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 21
15167: PUSH
15168: LD_INT 1
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 3
15177: PUSH
15178: LD_INT 23
15180: PUSH
15181: LD_INT 0
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: PPUSH
15197: CALL_OW 69
15201: ST_TO_ADDR
// if not tmp then
15202: LD_VAR 0 6
15206: NOT
15207: IFFALSE 15211
// exit ;
15209: GO 15357
// s1 := rand ( 1 , 4 ) ;
15211: LD_ADDR_VAR 0 2
15215: PUSH
15216: LD_INT 1
15218: PPUSH
15219: LD_INT 4
15221: PPUSH
15222: CALL_OW 12
15226: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15227: LD_ADDR_VAR 0 4
15231: PUSH
15232: LD_VAR 0 6
15236: PUSH
15237: LD_INT 1
15239: ARRAY
15240: PPUSH
15241: LD_VAR 0 2
15245: PPUSH
15246: CALL_OW 259
15250: ST_TO_ADDR
// if s1 = 1 then
15251: LD_VAR 0 2
15255: PUSH
15256: LD_INT 1
15258: EQUAL
15259: IFFALSE 15279
// s2 := rand ( 2 , 4 ) else
15261: LD_ADDR_VAR 0 3
15265: PUSH
15266: LD_INT 2
15268: PPUSH
15269: LD_INT 4
15271: PPUSH
15272: CALL_OW 12
15276: ST_TO_ADDR
15277: GO 15287
// s2 := 1 ;
15279: LD_ADDR_VAR 0 3
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15287: LD_ADDR_VAR 0 5
15291: PUSH
15292: LD_VAR 0 6
15296: PUSH
15297: LD_INT 1
15299: ARRAY
15300: PPUSH
15301: LD_VAR 0 3
15305: PPUSH
15306: CALL_OW 259
15310: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15311: LD_VAR 0 6
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: PPUSH
15320: LD_VAR 0 2
15324: PPUSH
15325: LD_VAR 0 5
15329: PPUSH
15330: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15334: LD_VAR 0 6
15338: PUSH
15339: LD_INT 1
15341: ARRAY
15342: PPUSH
15343: LD_VAR 0 3
15347: PPUSH
15348: LD_VAR 0 4
15352: PPUSH
15353: CALL_OW 237
// end ;
15357: PPOPN 6
15359: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15360: LD_EXP 12
15364: PUSH
15365: LD_EXP 59
15369: AND
15370: IFFALSE 15449
15372: GO 15374
15374: DISABLE
15375: LD_INT 0
15377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15378: LD_ADDR_VAR 0 1
15382: PUSH
15383: LD_INT 22
15385: PUSH
15386: LD_OWVAR 2
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 30
15397: PUSH
15398: LD_INT 3
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PPUSH
15409: CALL_OW 69
15413: ST_TO_ADDR
// if not tmp then
15414: LD_VAR 0 1
15418: NOT
15419: IFFALSE 15423
// exit ;
15421: GO 15449
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15423: LD_VAR 0 1
15427: PUSH
15428: LD_INT 1
15430: PPUSH
15431: LD_VAR 0 1
15435: PPUSH
15436: CALL_OW 12
15440: ARRAY
15441: PPUSH
15442: LD_INT 1
15444: PPUSH
15445: CALL_OW 234
// end ;
15449: PPOPN 1
15451: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15452: LD_EXP 12
15456: PUSH
15457: LD_EXP 60
15461: AND
15462: IFFALSE 15574
15464: GO 15466
15466: DISABLE
15467: LD_INT 0
15469: PPUSH
15470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_OWVAR 2
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: LD_INT 30
15493: PUSH
15494: LD_INT 27
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 30
15503: PUSH
15504: LD_INT 26
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 30
15513: PUSH
15514: LD_INT 28
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PPUSH
15531: CALL_OW 69
15535: ST_TO_ADDR
// if not tmp then
15536: LD_VAR 0 2
15540: NOT
15541: IFFALSE 15545
// exit ;
15543: GO 15574
// for i in tmp do
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: LD_VAR 0 2
15554: PUSH
15555: FOR_IN
15556: IFFALSE 15572
// SetLives ( i , 1 ) ;
15558: LD_VAR 0 1
15562: PPUSH
15563: LD_INT 1
15565: PPUSH
15566: CALL_OW 234
15570: GO 15555
15572: POP
15573: POP
// end ;
15574: PPOPN 2
15576: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15577: LD_EXP 12
15581: PUSH
15582: LD_EXP 61
15586: AND
15587: IFFALSE 15874
15589: GO 15591
15591: DISABLE
15592: LD_INT 0
15594: PPUSH
15595: PPUSH
15596: PPUSH
// begin i := rand ( 1 , 7 ) ;
15597: LD_ADDR_VAR 0 1
15601: PUSH
15602: LD_INT 1
15604: PPUSH
15605: LD_INT 7
15607: PPUSH
15608: CALL_OW 12
15612: ST_TO_ADDR
// case i of 1 :
15613: LD_VAR 0 1
15617: PUSH
15618: LD_INT 1
15620: DOUBLE
15621: EQUAL
15622: IFTRUE 15626
15624: GO 15636
15626: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15627: LD_STRING earthquake(getX(game), 0, 32)
15629: PPUSH
15630: CALL_OW 559
15634: GO 15874
15636: LD_INT 2
15638: DOUBLE
15639: EQUAL
15640: IFTRUE 15644
15642: GO 15658
15644: POP
// begin ToLua ( displayStucuk(); ) ;
15645: LD_STRING displayStucuk();
15647: PPUSH
15648: CALL_OW 559
// ResetFog ;
15652: CALL_OW 335
// end ; 3 :
15656: GO 15874
15658: LD_INT 3
15660: DOUBLE
15661: EQUAL
15662: IFTRUE 15666
15664: GO 15770
15666: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: LD_INT 22
15674: PUSH
15675: LD_OWVAR 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 25
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: ST_TO_ADDR
// if not tmp then
15703: LD_VAR 0 2
15707: NOT
15708: IFFALSE 15712
// exit ;
15710: GO 15874
// un := tmp [ rand ( 1 , tmp ) ] ;
15712: LD_ADDR_VAR 0 3
15716: PUSH
15717: LD_VAR 0 2
15721: PUSH
15722: LD_INT 1
15724: PPUSH
15725: LD_VAR 0 2
15729: PPUSH
15730: CALL_OW 12
15734: ARRAY
15735: ST_TO_ADDR
// if Crawls ( un ) then
15736: LD_VAR 0 3
15740: PPUSH
15741: CALL_OW 318
15745: IFFALSE 15756
// ComWalk ( un ) ;
15747: LD_VAR 0 3
15751: PPUSH
15752: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15756: LD_VAR 0 3
15760: PPUSH
15761: LD_INT 8
15763: PPUSH
15764: CALL_OW 336
// end ; 4 :
15768: GO 15874
15770: LD_INT 4
15772: DOUBLE
15773: EQUAL
15774: IFTRUE 15778
15776: GO 15852
15778: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15779: LD_ADDR_VAR 0 2
15783: PUSH
15784: LD_INT 22
15786: PUSH
15787: LD_OWVAR 2
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 30
15798: PUSH
15799: LD_INT 29
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PPUSH
15810: CALL_OW 69
15814: ST_TO_ADDR
// if not tmp then
15815: LD_VAR 0 2
15819: NOT
15820: IFFALSE 15824
// exit ;
15822: GO 15874
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15824: LD_VAR 0 2
15828: PUSH
15829: LD_INT 1
15831: ARRAY
15832: PPUSH
15833: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15837: LD_VAR 0 2
15841: PUSH
15842: LD_INT 1
15844: ARRAY
15845: PPUSH
15846: CALL_OW 65
// end ; 5 .. 7 :
15850: GO 15874
15852: LD_INT 5
15854: DOUBLE
15855: GREATEREQUAL
15856: IFFALSE 15864
15858: LD_INT 7
15860: DOUBLE
15861: LESSEQUAL
15862: IFTRUE 15866
15864: GO 15873
15866: POP
// StreamSibBomb ; end ;
15867: CALL 12111 0 0
15871: GO 15874
15873: POP
// end ;
15874: PPOPN 3
15876: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15877: LD_EXP 12
15881: PUSH
15882: LD_EXP 62
15886: AND
15887: IFFALSE 16043
15889: GO 15891
15891: DISABLE
15892: LD_INT 0
15894: PPUSH
15895: PPUSH
15896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15897: LD_ADDR_VAR 0 2
15901: PUSH
15902: LD_INT 81
15904: PUSH
15905: LD_OWVAR 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 21
15919: PUSH
15920: LD_INT 1
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 21
15929: PUSH
15930: LD_INT 2
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PPUSH
15946: CALL_OW 69
15950: ST_TO_ADDR
// if not tmp then
15951: LD_VAR 0 2
15955: NOT
15956: IFFALSE 15960
// exit ;
15958: GO 16043
// p := 0 ;
15960: LD_ADDR_VAR 0 3
15964: PUSH
15965: LD_INT 0
15967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15968: LD_INT 35
15970: PPUSH
15971: CALL_OW 67
// p := p + 1 ;
15975: LD_ADDR_VAR 0 3
15979: PUSH
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 1
15987: PLUS
15988: ST_TO_ADDR
// for i in tmp do
15989: LD_ADDR_VAR 0 1
15993: PUSH
15994: LD_VAR 0 2
15998: PUSH
15999: FOR_IN
16000: IFFALSE 16031
// if GetLives ( i ) < 1000 then
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 256
16011: PUSH
16012: LD_INT 1000
16014: LESS
16015: IFFALSE 16029
// SetLives ( i , 1000 ) ;
16017: LD_VAR 0 1
16021: PPUSH
16022: LD_INT 1000
16024: PPUSH
16025: CALL_OW 234
16029: GO 15999
16031: POP
16032: POP
// until p > 20 ;
16033: LD_VAR 0 3
16037: PUSH
16038: LD_INT 20
16040: GREATER
16041: IFFALSE 15968
// end ;
16043: PPOPN 3
16045: END
// every 0 0$1 trigger StreamModeActive and sTime do
16046: LD_EXP 12
16050: PUSH
16051: LD_EXP 63
16055: AND
16056: IFFALSE 16091
16058: GO 16060
16060: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16061: LD_INT 28
16063: PPUSH
16064: LD_OWVAR 2
16068: PPUSH
16069: LD_INT 2
16071: PPUSH
16072: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16076: LD_INT 30
16078: PPUSH
16079: LD_OWVAR 2
16083: PPUSH
16084: LD_INT 2
16086: PPUSH
16087: CALL_OW 322
// end ;
16091: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16092: LD_EXP 12
16096: PUSH
16097: LD_EXP 64
16101: AND
16102: IFFALSE 16223
16104: GO 16106
16106: DISABLE
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16111: LD_ADDR_VAR 0 2
16115: PUSH
16116: LD_INT 22
16118: PUSH
16119: LD_OWVAR 2
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 21
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 3
16140: PUSH
16141: LD_INT 23
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: LIST
16159: PPUSH
16160: CALL_OW 69
16164: ST_TO_ADDR
// if not tmp then
16165: LD_VAR 0 2
16169: NOT
16170: IFFALSE 16174
// exit ;
16172: GO 16223
// for i in tmp do
16174: LD_ADDR_VAR 0 1
16178: PUSH
16179: LD_VAR 0 2
16183: PUSH
16184: FOR_IN
16185: IFFALSE 16221
// begin if Crawls ( i ) then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 318
16196: IFFALSE 16207
// ComWalk ( i ) ;
16198: LD_VAR 0 1
16202: PPUSH
16203: CALL_OW 138
// SetClass ( i , 2 ) ;
16207: LD_VAR 0 1
16211: PPUSH
16212: LD_INT 2
16214: PPUSH
16215: CALL_OW 336
// end ;
16219: GO 16184
16221: POP
16222: POP
// end ;
16223: PPOPN 2
16225: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16226: LD_EXP 12
16230: PUSH
16231: LD_EXP 65
16235: AND
16236: IFFALSE 16524
16238: GO 16240
16240: DISABLE
16241: LD_INT 0
16243: PPUSH
16244: PPUSH
16245: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16246: LD_OWVAR 2
16250: PPUSH
16251: LD_INT 9
16253: PPUSH
16254: LD_INT 1
16256: PPUSH
16257: LD_INT 1
16259: PPUSH
16260: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16264: LD_INT 9
16266: PPUSH
16267: LD_OWVAR 2
16271: PPUSH
16272: CALL_OW 343
// uc_side := 9 ;
16276: LD_ADDR_OWVAR 20
16280: PUSH
16281: LD_INT 9
16283: ST_TO_ADDR
// uc_nation := 2 ;
16284: LD_ADDR_OWVAR 21
16288: PUSH
16289: LD_INT 2
16291: ST_TO_ADDR
// hc_name := Dark Warrior ;
16292: LD_ADDR_OWVAR 26
16296: PUSH
16297: LD_STRING Dark Warrior
16299: ST_TO_ADDR
// hc_gallery :=  ;
16300: LD_ADDR_OWVAR 33
16304: PUSH
16305: LD_STRING 
16307: ST_TO_ADDR
// hc_noskilllimit := true ;
16308: LD_ADDR_OWVAR 76
16312: PUSH
16313: LD_INT 1
16315: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16316: LD_ADDR_OWVAR 31
16320: PUSH
16321: LD_INT 30
16323: PUSH
16324: LD_INT 30
16326: PUSH
16327: LD_INT 30
16329: PUSH
16330: LD_INT 30
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: ST_TO_ADDR
// un := CreateHuman ;
16339: LD_ADDR_VAR 0 3
16343: PUSH
16344: CALL_OW 44
16348: ST_TO_ADDR
// hc_noskilllimit := false ;
16349: LD_ADDR_OWVAR 76
16353: PUSH
16354: LD_INT 0
16356: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16357: LD_VAR 0 3
16361: PPUSH
16362: LD_INT 1
16364: PPUSH
16365: CALL_OW 51
// ToLua ( playRanger() ) ;
16369: LD_STRING playRanger()
16371: PPUSH
16372: CALL_OW 559
// p := 0 ;
16376: LD_ADDR_VAR 0 2
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16384: LD_INT 35
16386: PPUSH
16387: CALL_OW 67
// p := p + 1 ;
16391: LD_ADDR_VAR 0 2
16395: PUSH
16396: LD_VAR 0 2
16400: PUSH
16401: LD_INT 1
16403: PLUS
16404: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16405: LD_VAR 0 3
16409: PPUSH
16410: CALL_OW 256
16414: PUSH
16415: LD_INT 1000
16417: LESS
16418: IFFALSE 16432
// SetLives ( un , 1000 ) ;
16420: LD_VAR 0 3
16424: PPUSH
16425: LD_INT 1000
16427: PPUSH
16428: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16432: LD_VAR 0 3
16436: PPUSH
16437: LD_INT 81
16439: PUSH
16440: LD_OWVAR 2
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 91
16451: PUSH
16452: LD_VAR 0 3
16456: PUSH
16457: LD_INT 30
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: PPUSH
16474: LD_VAR 0 3
16478: PPUSH
16479: CALL_OW 74
16483: PPUSH
16484: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16488: LD_VAR 0 2
16492: PUSH
16493: LD_INT 80
16495: GREATER
16496: PUSH
16497: LD_VAR 0 3
16501: PPUSH
16502: CALL_OW 301
16506: OR
16507: IFFALSE 16384
// if un then
16509: LD_VAR 0 3
16513: IFFALSE 16524
// RemoveUnit ( un ) ;
16515: LD_VAR 0 3
16519: PPUSH
16520: CALL_OW 64
// end ;
16524: PPOPN 3
16526: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16527: LD_EXP 66
16531: IFFALSE 16647
16533: GO 16535
16535: DISABLE
16536: LD_INT 0
16538: PPUSH
16539: PPUSH
16540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16541: LD_ADDR_VAR 0 2
16545: PUSH
16546: LD_INT 81
16548: PUSH
16549: LD_OWVAR 2
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 21
16560: PUSH
16561: LD_INT 1
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 69
16576: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16577: LD_STRING playComputer()
16579: PPUSH
16580: CALL_OW 559
// if not tmp then
16584: LD_VAR 0 2
16588: NOT
16589: IFFALSE 16593
// exit ;
16591: GO 16647
// for i in tmp do
16593: LD_ADDR_VAR 0 1
16597: PUSH
16598: LD_VAR 0 2
16602: PUSH
16603: FOR_IN
16604: IFFALSE 16645
// for j := 1 to 4 do
16606: LD_ADDR_VAR 0 3
16610: PUSH
16611: DOUBLE
16612: LD_INT 1
16614: DEC
16615: ST_TO_ADDR
16616: LD_INT 4
16618: PUSH
16619: FOR_TO
16620: IFFALSE 16641
// SetSkill ( i , j , 10 ) ;
16622: LD_VAR 0 1
16626: PPUSH
16627: LD_VAR 0 3
16631: PPUSH
16632: LD_INT 10
16634: PPUSH
16635: CALL_OW 237
16639: GO 16619
16641: POP
16642: POP
16643: GO 16603
16645: POP
16646: POP
// end ;
16647: PPOPN 3
16649: END
// every 0 0$1 trigger s30 do var i , tmp ;
16650: LD_EXP 67
16654: IFFALSE 16723
16656: GO 16658
16658: DISABLE
16659: LD_INT 0
16661: PPUSH
16662: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16663: LD_ADDR_VAR 0 2
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_OWVAR 2
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PPUSH
16680: CALL_OW 69
16684: ST_TO_ADDR
// if not tmp then
16685: LD_VAR 0 2
16689: NOT
16690: IFFALSE 16694
// exit ;
16692: GO 16723
// for i in tmp do
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_VAR 0 2
16703: PUSH
16704: FOR_IN
16705: IFFALSE 16721
// SetLives ( i , 300 ) ;
16707: LD_VAR 0 1
16711: PPUSH
16712: LD_INT 300
16714: PPUSH
16715: CALL_OW 234
16719: GO 16704
16721: POP
16722: POP
// end ;
16723: PPOPN 2
16725: END
// every 0 0$1 trigger s60 do var i , tmp ;
16726: LD_EXP 68
16730: IFFALSE 16799
16732: GO 16734
16734: DISABLE
16735: LD_INT 0
16737: PPUSH
16738: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16739: LD_ADDR_VAR 0 2
16743: PUSH
16744: LD_INT 22
16746: PUSH
16747: LD_OWVAR 2
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PPUSH
16756: CALL_OW 69
16760: ST_TO_ADDR
// if not tmp then
16761: LD_VAR 0 2
16765: NOT
16766: IFFALSE 16770
// exit ;
16768: GO 16799
// for i in tmp do
16770: LD_ADDR_VAR 0 1
16774: PUSH
16775: LD_VAR 0 2
16779: PUSH
16780: FOR_IN
16781: IFFALSE 16797
// SetLives ( i , 600 ) ;
16783: LD_VAR 0 1
16787: PPUSH
16788: LD_INT 600
16790: PPUSH
16791: CALL_OW 234
16795: GO 16780
16797: POP
16798: POP
// end ;
16799: PPOPN 2
16801: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16802: LD_INT 0
16804: PPUSH
// case cmd of 301 :
16805: LD_VAR 0 1
16809: PUSH
16810: LD_INT 301
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 16850
16818: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16819: LD_VAR 0 6
16823: PPUSH
16824: LD_VAR 0 7
16828: PPUSH
16829: LD_VAR 0 8
16833: PPUSH
16834: LD_VAR 0 4
16838: PPUSH
16839: LD_VAR 0 5
16843: PPUSH
16844: CALL 18051 0 5
16848: GO 16971
16850: LD_INT 302
16852: DOUBLE
16853: EQUAL
16854: IFTRUE 16858
16856: GO 16895
16858: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16859: LD_VAR 0 6
16863: PPUSH
16864: LD_VAR 0 7
16868: PPUSH
16869: LD_VAR 0 8
16873: PPUSH
16874: LD_VAR 0 9
16878: PPUSH
16879: LD_VAR 0 4
16883: PPUSH
16884: LD_VAR 0 5
16888: PPUSH
16889: CALL 18142 0 6
16893: GO 16971
16895: LD_INT 303
16897: DOUBLE
16898: EQUAL
16899: IFTRUE 16903
16901: GO 16940
16903: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16904: LD_VAR 0 6
16908: PPUSH
16909: LD_VAR 0 7
16913: PPUSH
16914: LD_VAR 0 8
16918: PPUSH
16919: LD_VAR 0 9
16923: PPUSH
16924: LD_VAR 0 4
16928: PPUSH
16929: LD_VAR 0 5
16933: PPUSH
16934: CALL 16976 0 6
16938: GO 16971
16940: LD_INT 304
16942: DOUBLE
16943: EQUAL
16944: IFTRUE 16948
16946: GO 16970
16948: POP
// hHackTeleport ( unit , x , y ) ; end ;
16949: LD_VAR 0 2
16953: PPUSH
16954: LD_VAR 0 4
16958: PPUSH
16959: LD_VAR 0 5
16963: PPUSH
16964: CALL 18735 0 3
16968: GO 16971
16970: POP
// end ;
16971: LD_VAR 0 12
16975: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16976: LD_INT 0
16978: PPUSH
16979: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16980: LD_VAR 0 1
16984: PUSH
16985: LD_INT 1
16987: LESS
16988: PUSH
16989: LD_VAR 0 1
16993: PUSH
16994: LD_INT 3
16996: GREATER
16997: OR
16998: PUSH
16999: LD_VAR 0 5
17003: PPUSH
17004: LD_VAR 0 6
17008: PPUSH
17009: CALL_OW 428
17013: OR
17014: IFFALSE 17018
// exit ;
17016: GO 17738
// uc_side := your_side ;
17018: LD_ADDR_OWVAR 20
17022: PUSH
17023: LD_OWVAR 2
17027: ST_TO_ADDR
// uc_nation := nation ;
17028: LD_ADDR_OWVAR 21
17032: PUSH
17033: LD_VAR 0 1
17037: ST_TO_ADDR
// bc_level = 1 ;
17038: LD_ADDR_OWVAR 43
17042: PUSH
17043: LD_INT 1
17045: ST_TO_ADDR
// case btype of 1 :
17046: LD_VAR 0 2
17050: PUSH
17051: LD_INT 1
17053: DOUBLE
17054: EQUAL
17055: IFTRUE 17059
17057: GO 17070
17059: POP
// bc_type := b_depot ; 2 :
17060: LD_ADDR_OWVAR 42
17064: PUSH
17065: LD_INT 0
17067: ST_TO_ADDR
17068: GO 17682
17070: LD_INT 2
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17089
17078: POP
// bc_type := b_warehouse ; 3 :
17079: LD_ADDR_OWVAR 42
17083: PUSH
17084: LD_INT 1
17086: ST_TO_ADDR
17087: GO 17682
17089: LD_INT 3
17091: DOUBLE
17092: EQUAL
17093: IFTRUE 17097
17095: GO 17108
17097: POP
// bc_type := b_lab ; 4 .. 9 :
17098: LD_ADDR_OWVAR 42
17102: PUSH
17103: LD_INT 6
17105: ST_TO_ADDR
17106: GO 17682
17108: LD_INT 4
17110: DOUBLE
17111: GREATEREQUAL
17112: IFFALSE 17120
17114: LD_INT 9
17116: DOUBLE
17117: LESSEQUAL
17118: IFTRUE 17122
17120: GO 17174
17122: POP
// begin bc_type := b_lab_half ;
17123: LD_ADDR_OWVAR 42
17127: PUSH
17128: LD_INT 7
17130: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17131: LD_ADDR_OWVAR 44
17135: PUSH
17136: LD_INT 10
17138: PUSH
17139: LD_INT 11
17141: PUSH
17142: LD_INT 12
17144: PUSH
17145: LD_INT 15
17147: PUSH
17148: LD_INT 14
17150: PUSH
17151: LD_INT 13
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: PUSH
17162: LD_VAR 0 2
17166: PUSH
17167: LD_INT 3
17169: MINUS
17170: ARRAY
17171: ST_TO_ADDR
// end ; 10 .. 13 :
17172: GO 17682
17174: LD_INT 10
17176: DOUBLE
17177: GREATEREQUAL
17178: IFFALSE 17186
17180: LD_INT 13
17182: DOUBLE
17183: LESSEQUAL
17184: IFTRUE 17188
17186: GO 17265
17188: POP
// begin bc_type := b_lab_full ;
17189: LD_ADDR_OWVAR 42
17193: PUSH
17194: LD_INT 8
17196: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17197: LD_ADDR_OWVAR 44
17201: PUSH
17202: LD_INT 10
17204: PUSH
17205: LD_INT 12
17207: PUSH
17208: LD_INT 14
17210: PUSH
17211: LD_INT 13
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: PUSH
17220: LD_VAR 0 2
17224: PUSH
17225: LD_INT 9
17227: MINUS
17228: ARRAY
17229: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17230: LD_ADDR_OWVAR 45
17234: PUSH
17235: LD_INT 11
17237: PUSH
17238: LD_INT 15
17240: PUSH
17241: LD_INT 12
17243: PUSH
17244: LD_INT 15
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: PUSH
17253: LD_VAR 0 2
17257: PUSH
17258: LD_INT 9
17260: MINUS
17261: ARRAY
17262: ST_TO_ADDR
// end ; 14 :
17263: GO 17682
17265: LD_INT 14
17267: DOUBLE
17268: EQUAL
17269: IFTRUE 17273
17271: GO 17284
17273: POP
// bc_type := b_workshop ; 15 :
17274: LD_ADDR_OWVAR 42
17278: PUSH
17279: LD_INT 2
17281: ST_TO_ADDR
17282: GO 17682
17284: LD_INT 15
17286: DOUBLE
17287: EQUAL
17288: IFTRUE 17292
17290: GO 17303
17292: POP
// bc_type := b_factory ; 16 :
17293: LD_ADDR_OWVAR 42
17297: PUSH
17298: LD_INT 3
17300: ST_TO_ADDR
17301: GO 17682
17303: LD_INT 16
17305: DOUBLE
17306: EQUAL
17307: IFTRUE 17311
17309: GO 17322
17311: POP
// bc_type := b_ext_gun ; 17 :
17312: LD_ADDR_OWVAR 42
17316: PUSH
17317: LD_INT 17
17319: ST_TO_ADDR
17320: GO 17682
17322: LD_INT 17
17324: DOUBLE
17325: EQUAL
17326: IFTRUE 17330
17328: GO 17358
17330: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17331: LD_ADDR_OWVAR 42
17335: PUSH
17336: LD_INT 19
17338: PUSH
17339: LD_INT 23
17341: PUSH
17342: LD_INT 19
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: LIST
17349: PUSH
17350: LD_VAR 0 1
17354: ARRAY
17355: ST_TO_ADDR
17356: GO 17682
17358: LD_INT 18
17360: DOUBLE
17361: EQUAL
17362: IFTRUE 17366
17364: GO 17377
17366: POP
// bc_type := b_ext_radar ; 19 :
17367: LD_ADDR_OWVAR 42
17371: PUSH
17372: LD_INT 20
17374: ST_TO_ADDR
17375: GO 17682
17377: LD_INT 19
17379: DOUBLE
17380: EQUAL
17381: IFTRUE 17385
17383: GO 17396
17385: POP
// bc_type := b_ext_radio ; 20 :
17386: LD_ADDR_OWVAR 42
17390: PUSH
17391: LD_INT 22
17393: ST_TO_ADDR
17394: GO 17682
17396: LD_INT 20
17398: DOUBLE
17399: EQUAL
17400: IFTRUE 17404
17402: GO 17415
17404: POP
// bc_type := b_ext_siberium ; 21 :
17405: LD_ADDR_OWVAR 42
17409: PUSH
17410: LD_INT 21
17412: ST_TO_ADDR
17413: GO 17682
17415: LD_INT 21
17417: DOUBLE
17418: EQUAL
17419: IFTRUE 17423
17421: GO 17434
17423: POP
// bc_type := b_ext_computer ; 22 :
17424: LD_ADDR_OWVAR 42
17428: PUSH
17429: LD_INT 24
17431: ST_TO_ADDR
17432: GO 17682
17434: LD_INT 22
17436: DOUBLE
17437: EQUAL
17438: IFTRUE 17442
17440: GO 17453
17442: POP
// bc_type := b_ext_track ; 23 :
17443: LD_ADDR_OWVAR 42
17447: PUSH
17448: LD_INT 16
17450: ST_TO_ADDR
17451: GO 17682
17453: LD_INT 23
17455: DOUBLE
17456: EQUAL
17457: IFTRUE 17461
17459: GO 17472
17461: POP
// bc_type := b_ext_laser ; 24 :
17462: LD_ADDR_OWVAR 42
17466: PUSH
17467: LD_INT 25
17469: ST_TO_ADDR
17470: GO 17682
17472: LD_INT 24
17474: DOUBLE
17475: EQUAL
17476: IFTRUE 17480
17478: GO 17491
17480: POP
// bc_type := b_control_tower ; 25 :
17481: LD_ADDR_OWVAR 42
17485: PUSH
17486: LD_INT 36
17488: ST_TO_ADDR
17489: GO 17682
17491: LD_INT 25
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17510
17499: POP
// bc_type := b_breastwork ; 26 :
17500: LD_ADDR_OWVAR 42
17504: PUSH
17505: LD_INT 31
17507: ST_TO_ADDR
17508: GO 17682
17510: LD_INT 26
17512: DOUBLE
17513: EQUAL
17514: IFTRUE 17518
17516: GO 17529
17518: POP
// bc_type := b_bunker ; 27 :
17519: LD_ADDR_OWVAR 42
17523: PUSH
17524: LD_INT 32
17526: ST_TO_ADDR
17527: GO 17682
17529: LD_INT 27
17531: DOUBLE
17532: EQUAL
17533: IFTRUE 17537
17535: GO 17548
17537: POP
// bc_type := b_turret ; 28 :
17538: LD_ADDR_OWVAR 42
17542: PUSH
17543: LD_INT 33
17545: ST_TO_ADDR
17546: GO 17682
17548: LD_INT 28
17550: DOUBLE
17551: EQUAL
17552: IFTRUE 17556
17554: GO 17567
17556: POP
// bc_type := b_armoury ; 29 :
17557: LD_ADDR_OWVAR 42
17561: PUSH
17562: LD_INT 4
17564: ST_TO_ADDR
17565: GO 17682
17567: LD_INT 29
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17586
17575: POP
// bc_type := b_barracks ; 30 :
17576: LD_ADDR_OWVAR 42
17580: PUSH
17581: LD_INT 5
17583: ST_TO_ADDR
17584: GO 17682
17586: LD_INT 30
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17605
17594: POP
// bc_type := b_solar_power ; 31 :
17595: LD_ADDR_OWVAR 42
17599: PUSH
17600: LD_INT 27
17602: ST_TO_ADDR
17603: GO 17682
17605: LD_INT 31
17607: DOUBLE
17608: EQUAL
17609: IFTRUE 17613
17611: GO 17624
17613: POP
// bc_type := b_oil_power ; 32 :
17614: LD_ADDR_OWVAR 42
17618: PUSH
17619: LD_INT 26
17621: ST_TO_ADDR
17622: GO 17682
17624: LD_INT 32
17626: DOUBLE
17627: EQUAL
17628: IFTRUE 17632
17630: GO 17643
17632: POP
// bc_type := b_siberite_power ; 33 :
17633: LD_ADDR_OWVAR 42
17637: PUSH
17638: LD_INT 28
17640: ST_TO_ADDR
17641: GO 17682
17643: LD_INT 33
17645: DOUBLE
17646: EQUAL
17647: IFTRUE 17651
17649: GO 17662
17651: POP
// bc_type := b_oil_mine ; 34 :
17652: LD_ADDR_OWVAR 42
17656: PUSH
17657: LD_INT 29
17659: ST_TO_ADDR
17660: GO 17682
17662: LD_INT 34
17664: DOUBLE
17665: EQUAL
17666: IFTRUE 17670
17668: GO 17681
17670: POP
// bc_type := b_siberite_mine ; end ;
17671: LD_ADDR_OWVAR 42
17675: PUSH
17676: LD_INT 30
17678: ST_TO_ADDR
17679: GO 17682
17681: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17682: LD_ADDR_VAR 0 8
17686: PUSH
17687: LD_VAR 0 5
17691: PPUSH
17692: LD_VAR 0 6
17696: PPUSH
17697: LD_VAR 0 3
17701: PPUSH
17702: CALL_OW 47
17706: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17707: LD_OWVAR 42
17711: PUSH
17712: LD_INT 32
17714: PUSH
17715: LD_INT 33
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: IN
17722: IFFALSE 17738
// PlaceWeaponTurret ( b , weapon ) ;
17724: LD_VAR 0 8
17728: PPUSH
17729: LD_VAR 0 4
17733: PPUSH
17734: CALL_OW 431
// end ;
17738: LD_VAR 0 7
17742: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17743: LD_INT 0
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17749: LD_ADDR_VAR 0 4
17753: PUSH
17754: LD_INT 22
17756: PUSH
17757: LD_OWVAR 2
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 2
17768: PUSH
17769: LD_INT 30
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 30
17781: PUSH
17782: LD_INT 1
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PPUSH
17798: CALL_OW 69
17802: ST_TO_ADDR
// if not tmp then
17803: LD_VAR 0 4
17807: NOT
17808: IFFALSE 17812
// exit ;
17810: GO 17871
// for i in tmp do
17812: LD_ADDR_VAR 0 2
17816: PUSH
17817: LD_VAR 0 4
17821: PUSH
17822: FOR_IN
17823: IFFALSE 17869
// for j = 1 to 3 do
17825: LD_ADDR_VAR 0 3
17829: PUSH
17830: DOUBLE
17831: LD_INT 1
17833: DEC
17834: ST_TO_ADDR
17835: LD_INT 3
17837: PUSH
17838: FOR_TO
17839: IFFALSE 17865
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17841: LD_VAR 0 2
17845: PPUSH
17846: CALL_OW 274
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_INT 99999
17858: PPUSH
17859: CALL_OW 277
17863: GO 17838
17865: POP
17866: POP
17867: GO 17822
17869: POP
17870: POP
// end ;
17871: LD_VAR 0 1
17875: RET
// export function hHackSetLevel10 ; var i , j ; begin
17876: LD_INT 0
17878: PPUSH
17879: PPUSH
17880: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17881: LD_ADDR_VAR 0 2
17885: PUSH
17886: LD_INT 21
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: PUSH
17901: FOR_IN
17902: IFFALSE 17954
// if IsSelected ( i ) then
17904: LD_VAR 0 2
17908: PPUSH
17909: CALL_OW 306
17913: IFFALSE 17952
// begin for j := 1 to 4 do
17915: LD_ADDR_VAR 0 3
17919: PUSH
17920: DOUBLE
17921: LD_INT 1
17923: DEC
17924: ST_TO_ADDR
17925: LD_INT 4
17927: PUSH
17928: FOR_TO
17929: IFFALSE 17950
// SetSkill ( i , j , 10 ) ;
17931: LD_VAR 0 2
17935: PPUSH
17936: LD_VAR 0 3
17940: PPUSH
17941: LD_INT 10
17943: PPUSH
17944: CALL_OW 237
17948: GO 17928
17950: POP
17951: POP
// end ;
17952: GO 17901
17954: POP
17955: POP
// end ;
17956: LD_VAR 0 1
17960: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17961: LD_INT 0
17963: PPUSH
17964: PPUSH
17965: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17966: LD_ADDR_VAR 0 2
17970: PUSH
17971: LD_INT 22
17973: PUSH
17974: LD_OWVAR 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 21
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PPUSH
17997: CALL_OW 69
18001: PUSH
18002: FOR_IN
18003: IFFALSE 18044
// begin for j := 1 to 4 do
18005: LD_ADDR_VAR 0 3
18009: PUSH
18010: DOUBLE
18011: LD_INT 1
18013: DEC
18014: ST_TO_ADDR
18015: LD_INT 4
18017: PUSH
18018: FOR_TO
18019: IFFALSE 18040
// SetSkill ( i , j , 10 ) ;
18021: LD_VAR 0 2
18025: PPUSH
18026: LD_VAR 0 3
18030: PPUSH
18031: LD_INT 10
18033: PPUSH
18034: CALL_OW 237
18038: GO 18018
18040: POP
18041: POP
// end ;
18042: GO 18002
18044: POP
18045: POP
// end ;
18046: LD_VAR 0 1
18050: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18051: LD_INT 0
18053: PPUSH
// uc_side := your_side ;
18054: LD_ADDR_OWVAR 20
18058: PUSH
18059: LD_OWVAR 2
18063: ST_TO_ADDR
// uc_nation := nation ;
18064: LD_ADDR_OWVAR 21
18068: PUSH
18069: LD_VAR 0 1
18073: ST_TO_ADDR
// InitHc ;
18074: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18078: LD_INT 0
18080: PPUSH
18081: LD_VAR 0 2
18085: PPUSH
18086: LD_VAR 0 3
18090: PPUSH
18091: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18095: LD_VAR 0 4
18099: PPUSH
18100: LD_VAR 0 5
18104: PPUSH
18105: CALL_OW 428
18109: PUSH
18110: LD_INT 0
18112: EQUAL
18113: IFFALSE 18137
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18115: CALL_OW 44
18119: PPUSH
18120: LD_VAR 0 4
18124: PPUSH
18125: LD_VAR 0 5
18129: PPUSH
18130: LD_INT 1
18132: PPUSH
18133: CALL_OW 48
// end ;
18137: LD_VAR 0 6
18141: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18142: LD_INT 0
18144: PPUSH
18145: PPUSH
// uc_side := your_side ;
18146: LD_ADDR_OWVAR 20
18150: PUSH
18151: LD_OWVAR 2
18155: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18156: LD_VAR 0 1
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: LD_INT 3
18169: PUSH
18170: LD_INT 4
18172: PUSH
18173: LD_INT 5
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: IN
18183: IFFALSE 18195
// uc_nation := nation_american else
18185: LD_ADDR_OWVAR 21
18189: PUSH
18190: LD_INT 1
18192: ST_TO_ADDR
18193: GO 18238
// if chassis in [ 11 , 12 , 13 , 14 ] then
18195: LD_VAR 0 1
18199: PUSH
18200: LD_INT 11
18202: PUSH
18203: LD_INT 12
18205: PUSH
18206: LD_INT 13
18208: PUSH
18209: LD_INT 14
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: IN
18218: IFFALSE 18230
// uc_nation := nation_arabian else
18220: LD_ADDR_OWVAR 21
18224: PUSH
18225: LD_INT 2
18227: ST_TO_ADDR
18228: GO 18238
// uc_nation := nation_russian ;
18230: LD_ADDR_OWVAR 21
18234: PUSH
18235: LD_INT 3
18237: ST_TO_ADDR
// vc_chassis := chassis ;
18238: LD_ADDR_OWVAR 37
18242: PUSH
18243: LD_VAR 0 1
18247: ST_TO_ADDR
// vc_engine := engine ;
18248: LD_ADDR_OWVAR 39
18252: PUSH
18253: LD_VAR 0 2
18257: ST_TO_ADDR
// vc_control := control ;
18258: LD_ADDR_OWVAR 38
18262: PUSH
18263: LD_VAR 0 3
18267: ST_TO_ADDR
// vc_weapon := weapon ;
18268: LD_ADDR_OWVAR 40
18272: PUSH
18273: LD_VAR 0 4
18277: ST_TO_ADDR
// un := CreateVehicle ;
18278: LD_ADDR_VAR 0 8
18282: PUSH
18283: CALL_OW 45
18287: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18288: LD_VAR 0 8
18292: PPUSH
18293: LD_INT 0
18295: PPUSH
18296: LD_INT 5
18298: PPUSH
18299: CALL_OW 12
18303: PPUSH
18304: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18308: LD_VAR 0 8
18312: PPUSH
18313: LD_VAR 0 5
18317: PPUSH
18318: LD_VAR 0 6
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: CALL_OW 48
// end ;
18330: LD_VAR 0 7
18334: RET
// export hInvincible ; every 1 do
18335: GO 18337
18337: DISABLE
// hInvincible := [ ] ;
18338: LD_ADDR_EXP 69
18342: PUSH
18343: EMPTY
18344: ST_TO_ADDR
18345: END
// every 10 do var i ;
18346: GO 18348
18348: DISABLE
18349: LD_INT 0
18351: PPUSH
// begin enable ;
18352: ENABLE
// if not hInvincible then
18353: LD_EXP 69
18357: NOT
18358: IFFALSE 18362
// exit ;
18360: GO 18406
// for i in hInvincible do
18362: LD_ADDR_VAR 0 1
18366: PUSH
18367: LD_EXP 69
18371: PUSH
18372: FOR_IN
18373: IFFALSE 18404
// if GetLives ( i ) < 1000 then
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 256
18384: PUSH
18385: LD_INT 1000
18387: LESS
18388: IFFALSE 18402
// SetLives ( i , 1000 ) ;
18390: LD_VAR 0 1
18394: PPUSH
18395: LD_INT 1000
18397: PPUSH
18398: CALL_OW 234
18402: GO 18372
18404: POP
18405: POP
// end ;
18406: PPOPN 1
18408: END
// export function hHackInvincible ; var i ; begin
18409: LD_INT 0
18411: PPUSH
18412: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18413: LD_ADDR_VAR 0 2
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: LD_INT 21
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 21
18433: PUSH
18434: LD_INT 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: PPUSH
18446: CALL_OW 69
18450: PUSH
18451: FOR_IN
18452: IFFALSE 18513
// if IsSelected ( i ) then
18454: LD_VAR 0 2
18458: PPUSH
18459: CALL_OW 306
18463: IFFALSE 18511
// begin if i in hInvincible then
18465: LD_VAR 0 2
18469: PUSH
18470: LD_EXP 69
18474: IN
18475: IFFALSE 18495
// hInvincible := hInvincible diff i else
18477: LD_ADDR_EXP 69
18481: PUSH
18482: LD_EXP 69
18486: PUSH
18487: LD_VAR 0 2
18491: DIFF
18492: ST_TO_ADDR
18493: GO 18511
// hInvincible := hInvincible union i ;
18495: LD_ADDR_EXP 69
18499: PUSH
18500: LD_EXP 69
18504: PUSH
18505: LD_VAR 0 2
18509: UNION
18510: ST_TO_ADDR
// end ;
18511: GO 18451
18513: POP
18514: POP
// end ;
18515: LD_VAR 0 1
18519: RET
// export function hHackInvisible ; var i , j ; begin
18520: LD_INT 0
18522: PPUSH
18523: PPUSH
18524: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18525: LD_ADDR_VAR 0 2
18529: PUSH
18530: LD_INT 21
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PPUSH
18540: CALL_OW 69
18544: PUSH
18545: FOR_IN
18546: IFFALSE 18570
// if IsSelected ( i ) then
18548: LD_VAR 0 2
18552: PPUSH
18553: CALL_OW 306
18557: IFFALSE 18568
// ComForceInvisible ( i ) ;
18559: LD_VAR 0 2
18563: PPUSH
18564: CALL_OW 496
18568: GO 18545
18570: POP
18571: POP
// end ;
18572: LD_VAR 0 1
18576: RET
// export function hHackChangeYourSide ; begin
18577: LD_INT 0
18579: PPUSH
// if your_side = 8 then
18580: LD_OWVAR 2
18584: PUSH
18585: LD_INT 8
18587: EQUAL
18588: IFFALSE 18600
// your_side := 0 else
18590: LD_ADDR_OWVAR 2
18594: PUSH
18595: LD_INT 0
18597: ST_TO_ADDR
18598: GO 18614
// your_side := your_side + 1 ;
18600: LD_ADDR_OWVAR 2
18604: PUSH
18605: LD_OWVAR 2
18609: PUSH
18610: LD_INT 1
18612: PLUS
18613: ST_TO_ADDR
// end ;
18614: LD_VAR 0 1
18618: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18619: LD_INT 0
18621: PPUSH
18622: PPUSH
18623: PPUSH
// for i in all_units do
18624: LD_ADDR_VAR 0 2
18628: PUSH
18629: LD_OWVAR 3
18633: PUSH
18634: FOR_IN
18635: IFFALSE 18713
// if IsSelected ( i ) then
18637: LD_VAR 0 2
18641: PPUSH
18642: CALL_OW 306
18646: IFFALSE 18711
// begin j := GetSide ( i ) ;
18648: LD_ADDR_VAR 0 3
18652: PUSH
18653: LD_VAR 0 2
18657: PPUSH
18658: CALL_OW 255
18662: ST_TO_ADDR
// if j = 8 then
18663: LD_VAR 0 3
18667: PUSH
18668: LD_INT 8
18670: EQUAL
18671: IFFALSE 18683
// j := 0 else
18673: LD_ADDR_VAR 0 3
18677: PUSH
18678: LD_INT 0
18680: ST_TO_ADDR
18681: GO 18697
// j := j + 1 ;
18683: LD_ADDR_VAR 0 3
18687: PUSH
18688: LD_VAR 0 3
18692: PUSH
18693: LD_INT 1
18695: PLUS
18696: ST_TO_ADDR
// SetSide ( i , j ) ;
18697: LD_VAR 0 2
18701: PPUSH
18702: LD_VAR 0 3
18706: PPUSH
18707: CALL_OW 235
// end ;
18711: GO 18634
18713: POP
18714: POP
// end ;
18715: LD_VAR 0 1
18719: RET
// export function hHackFog ; begin
18720: LD_INT 0
18722: PPUSH
// FogOff ( true ) ;
18723: LD_INT 1
18725: PPUSH
18726: CALL_OW 344
// end ;
18730: LD_VAR 0 1
18734: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18735: LD_INT 0
18737: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18738: LD_VAR 0 1
18742: PPUSH
18743: LD_VAR 0 2
18747: PPUSH
18748: LD_VAR 0 3
18752: PPUSH
18753: LD_INT 1
18755: PPUSH
18756: LD_INT 1
18758: PPUSH
18759: CALL_OW 483
// CenterOnXY ( x , y ) ;
18763: LD_VAR 0 2
18767: PPUSH
18768: LD_VAR 0 3
18772: PPUSH
18773: CALL_OW 84
// end ;
18777: LD_VAR 0 4
18781: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18782: LD_INT 0
18784: PPUSH
18785: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18786: LD_VAR 0 1
18790: NOT
18791: PUSH
18792: LD_VAR 0 2
18796: PPUSH
18797: LD_VAR 0 3
18801: PPUSH
18802: CALL_OW 488
18806: NOT
18807: OR
18808: PUSH
18809: LD_VAR 0 1
18813: PPUSH
18814: CALL_OW 266
18818: PUSH
18819: LD_INT 3
18821: NONEQUAL
18822: PUSH
18823: LD_VAR 0 1
18827: PPUSH
18828: CALL_OW 247
18832: PUSH
18833: LD_INT 1
18835: EQUAL
18836: NOT
18837: AND
18838: OR
18839: IFFALSE 18843
// exit ;
18841: GO 18992
// if GetType ( factory ) = unit_human then
18843: LD_VAR 0 1
18847: PPUSH
18848: CALL_OW 247
18852: PUSH
18853: LD_INT 1
18855: EQUAL
18856: IFFALSE 18873
// factory := IsInUnit ( factory ) ;
18858: LD_ADDR_VAR 0 1
18862: PUSH
18863: LD_VAR 0 1
18867: PPUSH
18868: CALL_OW 310
18872: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18873: LD_VAR 0 1
18877: PPUSH
18878: CALL_OW 266
18882: PUSH
18883: LD_INT 3
18885: NONEQUAL
18886: IFFALSE 18890
// exit ;
18888: GO 18992
// if HexInfo ( x , y ) = factory then
18890: LD_VAR 0 2
18894: PPUSH
18895: LD_VAR 0 3
18899: PPUSH
18900: CALL_OW 428
18904: PUSH
18905: LD_VAR 0 1
18909: EQUAL
18910: IFFALSE 18937
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18912: LD_ADDR_EXP 70
18916: PUSH
18917: LD_EXP 70
18921: PPUSH
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_INT 0
18929: PPUSH
18930: CALL_OW 1
18934: ST_TO_ADDR
18935: GO 18988
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18937: LD_ADDR_EXP 70
18941: PUSH
18942: LD_EXP 70
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: LD_VAR 0 1
18956: PPUSH
18957: CALL_OW 255
18961: PUSH
18962: LD_VAR 0 1
18966: PUSH
18967: LD_VAR 0 2
18971: PUSH
18972: LD_VAR 0 3
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: PPUSH
18983: CALL_OW 1
18987: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18988: CALL 18997 0 0
// end ;
18992: LD_VAR 0 4
18996: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19002: LD_STRING resetFactoryWaypoint();
19004: PPUSH
19005: CALL_OW 559
// if factoryWaypoints then
19009: LD_EXP 70
19013: IFFALSE 19139
// begin list := PrepareArray ( factoryWaypoints ) ;
19015: LD_ADDR_VAR 0 3
19019: PUSH
19020: LD_EXP 70
19024: PPUSH
19025: CALL 61319 0 1
19029: ST_TO_ADDR
// for i := 1 to list do
19030: LD_ADDR_VAR 0 2
19034: PUSH
19035: DOUBLE
19036: LD_INT 1
19038: DEC
19039: ST_TO_ADDR
19040: LD_VAR 0 3
19044: PUSH
19045: FOR_TO
19046: IFFALSE 19137
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19048: LD_STRING setFactoryWaypointXY(
19050: PUSH
19051: LD_VAR 0 3
19055: PUSH
19056: LD_VAR 0 2
19060: ARRAY
19061: PUSH
19062: LD_INT 1
19064: ARRAY
19065: STR
19066: PUSH
19067: LD_STRING ,
19069: STR
19070: PUSH
19071: LD_VAR 0 3
19075: PUSH
19076: LD_VAR 0 2
19080: ARRAY
19081: PUSH
19082: LD_INT 2
19084: ARRAY
19085: STR
19086: PUSH
19087: LD_STRING ,
19089: STR
19090: PUSH
19091: LD_VAR 0 3
19095: PUSH
19096: LD_VAR 0 2
19100: ARRAY
19101: PUSH
19102: LD_INT 3
19104: ARRAY
19105: STR
19106: PUSH
19107: LD_STRING ,
19109: STR
19110: PUSH
19111: LD_VAR 0 3
19115: PUSH
19116: LD_VAR 0 2
19120: ARRAY
19121: PUSH
19122: LD_INT 4
19124: ARRAY
19125: STR
19126: PUSH
19127: LD_STRING )
19129: STR
19130: PPUSH
19131: CALL_OW 559
19135: GO 19045
19137: POP
19138: POP
// end ; end ;
19139: LD_VAR 0 1
19143: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19144: LD_INT 0
19146: PPUSH
// if HexInfo ( x , y ) = warehouse then
19147: LD_VAR 0 2
19151: PPUSH
19152: LD_VAR 0 3
19156: PPUSH
19157: CALL_OW 428
19161: PUSH
19162: LD_VAR 0 1
19166: EQUAL
19167: IFFALSE 19194
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19169: LD_ADDR_EXP 71
19173: PUSH
19174: LD_EXP 71
19178: PPUSH
19179: LD_VAR 0 1
19183: PPUSH
19184: LD_INT 0
19186: PPUSH
19187: CALL_OW 1
19191: ST_TO_ADDR
19192: GO 19245
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19194: LD_ADDR_EXP 71
19198: PUSH
19199: LD_EXP 71
19203: PPUSH
19204: LD_VAR 0 1
19208: PPUSH
19209: LD_VAR 0 1
19213: PPUSH
19214: CALL_OW 255
19218: PUSH
19219: LD_VAR 0 1
19223: PUSH
19224: LD_VAR 0 2
19228: PUSH
19229: LD_VAR 0 3
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 1
19244: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19245: CALL 19254 0 0
// end ;
19249: LD_VAR 0 4
19253: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19254: LD_INT 0
19256: PPUSH
19257: PPUSH
19258: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19259: LD_STRING resetWarehouseGatheringPoints();
19261: PPUSH
19262: CALL_OW 559
// if warehouseGatheringPoints then
19266: LD_EXP 71
19270: IFFALSE 19396
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19272: LD_ADDR_VAR 0 3
19276: PUSH
19277: LD_EXP 71
19281: PPUSH
19282: CALL 61319 0 1
19286: ST_TO_ADDR
// for i := 1 to list do
19287: LD_ADDR_VAR 0 2
19291: PUSH
19292: DOUBLE
19293: LD_INT 1
19295: DEC
19296: ST_TO_ADDR
19297: LD_VAR 0 3
19301: PUSH
19302: FOR_TO
19303: IFFALSE 19394
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19305: LD_STRING setWarehouseGatheringPointXY(
19307: PUSH
19308: LD_VAR 0 3
19312: PUSH
19313: LD_VAR 0 2
19317: ARRAY
19318: PUSH
19319: LD_INT 1
19321: ARRAY
19322: STR
19323: PUSH
19324: LD_STRING ,
19326: STR
19327: PUSH
19328: LD_VAR 0 3
19332: PUSH
19333: LD_VAR 0 2
19337: ARRAY
19338: PUSH
19339: LD_INT 2
19341: ARRAY
19342: STR
19343: PUSH
19344: LD_STRING ,
19346: STR
19347: PUSH
19348: LD_VAR 0 3
19352: PUSH
19353: LD_VAR 0 2
19357: ARRAY
19358: PUSH
19359: LD_INT 3
19361: ARRAY
19362: STR
19363: PUSH
19364: LD_STRING ,
19366: STR
19367: PUSH
19368: LD_VAR 0 3
19372: PUSH
19373: LD_VAR 0 2
19377: ARRAY
19378: PUSH
19379: LD_INT 4
19381: ARRAY
19382: STR
19383: PUSH
19384: LD_STRING )
19386: STR
19387: PPUSH
19388: CALL_OW 559
19392: GO 19302
19394: POP
19395: POP
// end ; end ;
19396: LD_VAR 0 1
19400: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19401: LD_EXP 71
19405: IFFALSE 20090
19407: GO 19409
19409: DISABLE
19410: LD_INT 0
19412: PPUSH
19413: PPUSH
19414: PPUSH
19415: PPUSH
19416: PPUSH
19417: PPUSH
19418: PPUSH
19419: PPUSH
19420: PPUSH
// begin enable ;
19421: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19422: LD_ADDR_VAR 0 3
19426: PUSH
19427: LD_EXP 71
19431: PPUSH
19432: CALL 61319 0 1
19436: ST_TO_ADDR
// if not list then
19437: LD_VAR 0 3
19441: NOT
19442: IFFALSE 19446
// exit ;
19444: GO 20090
// for i := 1 to list do
19446: LD_ADDR_VAR 0 1
19450: PUSH
19451: DOUBLE
19452: LD_INT 1
19454: DEC
19455: ST_TO_ADDR
19456: LD_VAR 0 3
19460: PUSH
19461: FOR_TO
19462: IFFALSE 20088
// begin depot := list [ i ] [ 2 ] ;
19464: LD_ADDR_VAR 0 8
19468: PUSH
19469: LD_VAR 0 3
19473: PUSH
19474: LD_VAR 0 1
19478: ARRAY
19479: PUSH
19480: LD_INT 2
19482: ARRAY
19483: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19484: LD_ADDR_VAR 0 5
19488: PUSH
19489: LD_VAR 0 3
19493: PUSH
19494: LD_VAR 0 1
19498: ARRAY
19499: PUSH
19500: LD_INT 1
19502: ARRAY
19503: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19504: LD_VAR 0 8
19508: PPUSH
19509: CALL_OW 301
19513: PUSH
19514: LD_VAR 0 5
19518: PUSH
19519: LD_VAR 0 8
19523: PPUSH
19524: CALL_OW 255
19528: NONEQUAL
19529: OR
19530: IFFALSE 19559
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19532: LD_ADDR_EXP 71
19536: PUSH
19537: LD_EXP 71
19541: PPUSH
19542: LD_VAR 0 8
19546: PPUSH
19547: LD_INT 0
19549: PPUSH
19550: CALL_OW 1
19554: ST_TO_ADDR
// exit ;
19555: POP
19556: POP
19557: GO 20090
// end ; x := list [ i ] [ 3 ] ;
19559: LD_ADDR_VAR 0 6
19563: PUSH
19564: LD_VAR 0 3
19568: PUSH
19569: LD_VAR 0 1
19573: ARRAY
19574: PUSH
19575: LD_INT 3
19577: ARRAY
19578: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19579: LD_ADDR_VAR 0 7
19583: PUSH
19584: LD_VAR 0 3
19588: PUSH
19589: LD_VAR 0 1
19593: ARRAY
19594: PUSH
19595: LD_INT 4
19597: ARRAY
19598: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19599: LD_ADDR_VAR 0 9
19603: PUSH
19604: LD_VAR 0 6
19608: PPUSH
19609: LD_VAR 0 7
19613: PPUSH
19614: LD_INT 16
19616: PPUSH
19617: CALL 59907 0 3
19621: ST_TO_ADDR
// if not cratesNearbyPoint then
19622: LD_VAR 0 9
19626: NOT
19627: IFFALSE 19633
// exit ;
19629: POP
19630: POP
19631: GO 20090
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19633: LD_ADDR_VAR 0 4
19637: PUSH
19638: LD_INT 22
19640: PUSH
19641: LD_VAR 0 5
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 3
19652: PUSH
19653: LD_INT 60
19655: PUSH
19656: EMPTY
19657: LIST
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 91
19665: PUSH
19666: LD_VAR 0 8
19670: PUSH
19671: LD_INT 6
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: LD_INT 25
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 25
19694: PUSH
19695: LD_INT 16
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: PPUSH
19713: CALL_OW 69
19717: PUSH
19718: LD_VAR 0 8
19722: PPUSH
19723: CALL_OW 313
19727: PPUSH
19728: LD_INT 3
19730: PUSH
19731: LD_INT 60
19733: PUSH
19734: EMPTY
19735: LIST
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 2
19743: PUSH
19744: LD_INT 25
19746: PUSH
19747: LD_INT 2
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 25
19756: PUSH
19757: LD_INT 16
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PPUSH
19773: CALL_OW 72
19777: UNION
19778: ST_TO_ADDR
// if tmp then
19779: LD_VAR 0 4
19783: IFFALSE 19863
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19785: LD_ADDR_VAR 0 4
19789: PUSH
19790: LD_VAR 0 4
19794: PPUSH
19795: LD_INT 3
19797: PPUSH
19798: CALL 57876 0 2
19802: ST_TO_ADDR
// for j in tmp do
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_VAR 0 4
19812: PUSH
19813: FOR_IN
19814: IFFALSE 19857
// begin if IsInUnit ( j ) then
19816: LD_VAR 0 2
19820: PPUSH
19821: CALL_OW 310
19825: IFFALSE 19836
// ComExit ( j ) ;
19827: LD_VAR 0 2
19831: PPUSH
19832: CALL 57959 0 1
// AddComCollect ( j , x , y ) ;
19836: LD_VAR 0 2
19840: PPUSH
19841: LD_VAR 0 6
19845: PPUSH
19846: LD_VAR 0 7
19850: PPUSH
19851: CALL_OW 177
// end ;
19855: GO 19813
19857: POP
19858: POP
// exit ;
19859: POP
19860: POP
19861: GO 20090
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19863: LD_ADDR_VAR 0 4
19867: PUSH
19868: LD_INT 22
19870: PUSH
19871: LD_VAR 0 5
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 91
19882: PUSH
19883: LD_VAR 0 8
19887: PUSH
19888: LD_INT 8
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: LD_INT 34
19901: PUSH
19902: LD_INT 12
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 34
19911: PUSH
19912: LD_INT 51
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 34
19921: PUSH
19922: LD_INT 32
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 34
19931: PUSH
19932: LD_INT 89
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: PPUSH
19951: CALL_OW 69
19955: ST_TO_ADDR
// if tmp then
19956: LD_VAR 0 4
19960: IFFALSE 20086
// begin for j in tmp do
19962: LD_ADDR_VAR 0 2
19966: PUSH
19967: LD_VAR 0 4
19971: PUSH
19972: FOR_IN
19973: IFFALSE 20084
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19975: LD_VAR 0 2
19979: PPUSH
19980: CALL_OW 262
19984: PUSH
19985: LD_INT 3
19987: EQUAL
19988: PUSH
19989: LD_VAR 0 2
19993: PPUSH
19994: CALL_OW 261
19998: PUSH
19999: LD_INT 20
20001: GREATER
20002: OR
20003: PUSH
20004: LD_VAR 0 2
20008: PPUSH
20009: CALL_OW 314
20013: NOT
20014: AND
20015: PUSH
20016: LD_VAR 0 2
20020: PPUSH
20021: CALL_OW 263
20025: PUSH
20026: LD_INT 1
20028: NONEQUAL
20029: PUSH
20030: LD_VAR 0 2
20034: PPUSH
20035: CALL_OW 311
20039: OR
20040: AND
20041: IFFALSE 20082
// begin ComCollect ( j , x , y ) ;
20043: LD_VAR 0 2
20047: PPUSH
20048: LD_VAR 0 6
20052: PPUSH
20053: LD_VAR 0 7
20057: PPUSH
20058: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20062: LD_VAR 0 2
20066: PPUSH
20067: LD_VAR 0 8
20071: PPUSH
20072: CALL_OW 172
// exit ;
20076: POP
20077: POP
20078: POP
20079: POP
20080: GO 20090
// end ;
20082: GO 19972
20084: POP
20085: POP
// end ; end ;
20086: GO 19461
20088: POP
20089: POP
// end ; end_of_file
20090: PPOPN 9
20092: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20093: LD_INT 0
20095: PPUSH
20096: PPUSH
// if exist_mode then
20097: LD_VAR 0 2
20101: IFFALSE 20126
// unit := CreateCharacter ( prefix & ident ) else
20103: LD_ADDR_VAR 0 5
20107: PUSH
20108: LD_VAR 0 3
20112: PUSH
20113: LD_VAR 0 1
20117: STR
20118: PPUSH
20119: CALL_OW 34
20123: ST_TO_ADDR
20124: GO 20141
// unit := NewCharacter ( ident ) ;
20126: LD_ADDR_VAR 0 5
20130: PUSH
20131: LD_VAR 0 1
20135: PPUSH
20136: CALL_OW 25
20140: ST_TO_ADDR
// result := unit ;
20141: LD_ADDR_VAR 0 4
20145: PUSH
20146: LD_VAR 0 5
20150: ST_TO_ADDR
// end ;
20151: LD_VAR 0 4
20155: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20156: LD_INT 0
20158: PPUSH
20159: PPUSH
// if not side or not nation then
20160: LD_VAR 0 1
20164: NOT
20165: PUSH
20166: LD_VAR 0 2
20170: NOT
20171: OR
20172: IFFALSE 20176
// exit ;
20174: GO 20944
// case nation of nation_american :
20176: LD_VAR 0 2
20180: PUSH
20181: LD_INT 1
20183: DOUBLE
20184: EQUAL
20185: IFTRUE 20189
20187: GO 20403
20189: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20190: LD_ADDR_VAR 0 4
20194: PUSH
20195: LD_INT 35
20197: PUSH
20198: LD_INT 45
20200: PUSH
20201: LD_INT 46
20203: PUSH
20204: LD_INT 47
20206: PUSH
20207: LD_INT 82
20209: PUSH
20210: LD_INT 83
20212: PUSH
20213: LD_INT 84
20215: PUSH
20216: LD_INT 85
20218: PUSH
20219: LD_INT 86
20221: PUSH
20222: LD_INT 1
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: LD_INT 6
20230: PUSH
20231: LD_INT 15
20233: PUSH
20234: LD_INT 16
20236: PUSH
20237: LD_INT 7
20239: PUSH
20240: LD_INT 12
20242: PUSH
20243: LD_INT 13
20245: PUSH
20246: LD_INT 10
20248: PUSH
20249: LD_INT 14
20251: PUSH
20252: LD_INT 20
20254: PUSH
20255: LD_INT 21
20257: PUSH
20258: LD_INT 22
20260: PUSH
20261: LD_INT 25
20263: PUSH
20264: LD_INT 32
20266: PUSH
20267: LD_INT 27
20269: PUSH
20270: LD_INT 36
20272: PUSH
20273: LD_INT 69
20275: PUSH
20276: LD_INT 39
20278: PUSH
20279: LD_INT 34
20281: PUSH
20282: LD_INT 40
20284: PUSH
20285: LD_INT 48
20287: PUSH
20288: LD_INT 49
20290: PUSH
20291: LD_INT 50
20293: PUSH
20294: LD_INT 51
20296: PUSH
20297: LD_INT 52
20299: PUSH
20300: LD_INT 53
20302: PUSH
20303: LD_INT 54
20305: PUSH
20306: LD_INT 55
20308: PUSH
20309: LD_INT 56
20311: PUSH
20312: LD_INT 57
20314: PUSH
20315: LD_INT 58
20317: PUSH
20318: LD_INT 59
20320: PUSH
20321: LD_INT 60
20323: PUSH
20324: LD_INT 61
20326: PUSH
20327: LD_INT 62
20329: PUSH
20330: LD_INT 80
20332: PUSH
20333: LD_INT 82
20335: PUSH
20336: LD_INT 83
20338: PUSH
20339: LD_INT 84
20341: PUSH
20342: LD_INT 85
20344: PUSH
20345: LD_INT 86
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: ST_TO_ADDR
20401: GO 20868
20403: LD_INT 2
20405: DOUBLE
20406: EQUAL
20407: IFTRUE 20411
20409: GO 20637
20411: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20412: LD_ADDR_VAR 0 4
20416: PUSH
20417: LD_INT 35
20419: PUSH
20420: LD_INT 45
20422: PUSH
20423: LD_INT 46
20425: PUSH
20426: LD_INT 47
20428: PUSH
20429: LD_INT 82
20431: PUSH
20432: LD_INT 83
20434: PUSH
20435: LD_INT 84
20437: PUSH
20438: LD_INT 85
20440: PUSH
20441: LD_INT 87
20443: PUSH
20444: LD_INT 70
20446: PUSH
20447: LD_INT 1
20449: PUSH
20450: LD_INT 11
20452: PUSH
20453: LD_INT 3
20455: PUSH
20456: LD_INT 4
20458: PUSH
20459: LD_INT 5
20461: PUSH
20462: LD_INT 6
20464: PUSH
20465: LD_INT 15
20467: PUSH
20468: LD_INT 18
20470: PUSH
20471: LD_INT 7
20473: PUSH
20474: LD_INT 17
20476: PUSH
20477: LD_INT 8
20479: PUSH
20480: LD_INT 20
20482: PUSH
20483: LD_INT 21
20485: PUSH
20486: LD_INT 22
20488: PUSH
20489: LD_INT 72
20491: PUSH
20492: LD_INT 26
20494: PUSH
20495: LD_INT 69
20497: PUSH
20498: LD_INT 39
20500: PUSH
20501: LD_INT 40
20503: PUSH
20504: LD_INT 41
20506: PUSH
20507: LD_INT 42
20509: PUSH
20510: LD_INT 43
20512: PUSH
20513: LD_INT 48
20515: PUSH
20516: LD_INT 49
20518: PUSH
20519: LD_INT 50
20521: PUSH
20522: LD_INT 51
20524: PUSH
20525: LD_INT 52
20527: PUSH
20528: LD_INT 53
20530: PUSH
20531: LD_INT 54
20533: PUSH
20534: LD_INT 55
20536: PUSH
20537: LD_INT 56
20539: PUSH
20540: LD_INT 60
20542: PUSH
20543: LD_INT 61
20545: PUSH
20546: LD_INT 62
20548: PUSH
20549: LD_INT 66
20551: PUSH
20552: LD_INT 67
20554: PUSH
20555: LD_INT 68
20557: PUSH
20558: LD_INT 81
20560: PUSH
20561: LD_INT 82
20563: PUSH
20564: LD_INT 83
20566: PUSH
20567: LD_INT 84
20569: PUSH
20570: LD_INT 85
20572: PUSH
20573: LD_INT 87
20575: PUSH
20576: LD_INT 88
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: ST_TO_ADDR
20635: GO 20868
20637: LD_INT 3
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20867
20645: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20646: LD_ADDR_VAR 0 4
20650: PUSH
20651: LD_INT 46
20653: PUSH
20654: LD_INT 47
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: LD_INT 2
20662: PUSH
20663: LD_INT 82
20665: PUSH
20666: LD_INT 83
20668: PUSH
20669: LD_INT 84
20671: PUSH
20672: LD_INT 85
20674: PUSH
20675: LD_INT 86
20677: PUSH
20678: LD_INT 11
20680: PUSH
20681: LD_INT 9
20683: PUSH
20684: LD_INT 20
20686: PUSH
20687: LD_INT 19
20689: PUSH
20690: LD_INT 21
20692: PUSH
20693: LD_INT 24
20695: PUSH
20696: LD_INT 22
20698: PUSH
20699: LD_INT 25
20701: PUSH
20702: LD_INT 28
20704: PUSH
20705: LD_INT 29
20707: PUSH
20708: LD_INT 30
20710: PUSH
20711: LD_INT 31
20713: PUSH
20714: LD_INT 37
20716: PUSH
20717: LD_INT 38
20719: PUSH
20720: LD_INT 32
20722: PUSH
20723: LD_INT 27
20725: PUSH
20726: LD_INT 33
20728: PUSH
20729: LD_INT 69
20731: PUSH
20732: LD_INT 39
20734: PUSH
20735: LD_INT 34
20737: PUSH
20738: LD_INT 40
20740: PUSH
20741: LD_INT 71
20743: PUSH
20744: LD_INT 23
20746: PUSH
20747: LD_INT 44
20749: PUSH
20750: LD_INT 48
20752: PUSH
20753: LD_INT 49
20755: PUSH
20756: LD_INT 50
20758: PUSH
20759: LD_INT 51
20761: PUSH
20762: LD_INT 52
20764: PUSH
20765: LD_INT 53
20767: PUSH
20768: LD_INT 54
20770: PUSH
20771: LD_INT 55
20773: PUSH
20774: LD_INT 56
20776: PUSH
20777: LD_INT 57
20779: PUSH
20780: LD_INT 58
20782: PUSH
20783: LD_INT 59
20785: PUSH
20786: LD_INT 63
20788: PUSH
20789: LD_INT 64
20791: PUSH
20792: LD_INT 65
20794: PUSH
20795: LD_INT 82
20797: PUSH
20798: LD_INT 83
20800: PUSH
20801: LD_INT 84
20803: PUSH
20804: LD_INT 85
20806: PUSH
20807: LD_INT 86
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: ST_TO_ADDR
20865: GO 20868
20867: POP
// if state > - 1 and state < 3 then
20868: LD_VAR 0 3
20872: PUSH
20873: LD_INT 1
20875: NEG
20876: GREATER
20877: PUSH
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 3
20885: LESS
20886: AND
20887: IFFALSE 20944
// for i in result do
20889: LD_ADDR_VAR 0 5
20893: PUSH
20894: LD_VAR 0 4
20898: PUSH
20899: FOR_IN
20900: IFFALSE 20942
// if GetTech ( i , side ) <> state then
20902: LD_VAR 0 5
20906: PPUSH
20907: LD_VAR 0 1
20911: PPUSH
20912: CALL_OW 321
20916: PUSH
20917: LD_VAR 0 3
20921: NONEQUAL
20922: IFFALSE 20940
// result := result diff i ;
20924: LD_ADDR_VAR 0 4
20928: PUSH
20929: LD_VAR 0 4
20933: PUSH
20934: LD_VAR 0 5
20938: DIFF
20939: ST_TO_ADDR
20940: GO 20899
20942: POP
20943: POP
// end ;
20944: LD_VAR 0 4
20948: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20949: LD_INT 0
20951: PPUSH
20952: PPUSH
20953: PPUSH
// result := true ;
20954: LD_ADDR_VAR 0 3
20958: PUSH
20959: LD_INT 1
20961: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20962: LD_ADDR_VAR 0 5
20966: PUSH
20967: LD_VAR 0 2
20971: PPUSH
20972: CALL_OW 480
20976: ST_TO_ADDR
// if not tmp then
20977: LD_VAR 0 5
20981: NOT
20982: IFFALSE 20986
// exit ;
20984: GO 21035
// for i in tmp do
20986: LD_ADDR_VAR 0 4
20990: PUSH
20991: LD_VAR 0 5
20995: PUSH
20996: FOR_IN
20997: IFFALSE 21033
// if GetTech ( i , side ) <> state_researched then
20999: LD_VAR 0 4
21003: PPUSH
21004: LD_VAR 0 1
21008: PPUSH
21009: CALL_OW 321
21013: PUSH
21014: LD_INT 2
21016: NONEQUAL
21017: IFFALSE 21031
// begin result := false ;
21019: LD_ADDR_VAR 0 3
21023: PUSH
21024: LD_INT 0
21026: ST_TO_ADDR
// exit ;
21027: POP
21028: POP
21029: GO 21035
// end ;
21031: GO 20996
21033: POP
21034: POP
// end ;
21035: LD_VAR 0 3
21039: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21040: LD_INT 0
21042: PPUSH
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21055: LD_VAR 0 1
21059: NOT
21060: PUSH
21061: LD_VAR 0 1
21065: PPUSH
21066: CALL_OW 257
21070: PUSH
21071: LD_INT 9
21073: NONEQUAL
21074: OR
21075: IFFALSE 21079
// exit ;
21077: GO 21652
// side := GetSide ( unit ) ;
21079: LD_ADDR_VAR 0 9
21083: PUSH
21084: LD_VAR 0 1
21088: PPUSH
21089: CALL_OW 255
21093: ST_TO_ADDR
// tech_space := tech_spacanom ;
21094: LD_ADDR_VAR 0 12
21098: PUSH
21099: LD_INT 29
21101: ST_TO_ADDR
// tech_time := tech_taurad ;
21102: LD_ADDR_VAR 0 13
21106: PUSH
21107: LD_INT 28
21109: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21110: LD_ADDR_VAR 0 11
21114: PUSH
21115: LD_VAR 0 1
21119: PPUSH
21120: CALL_OW 310
21124: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21125: LD_VAR 0 11
21129: PPUSH
21130: CALL_OW 247
21134: PUSH
21135: LD_INT 2
21137: EQUAL
21138: IFFALSE 21142
// exit ;
21140: GO 21652
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21142: LD_ADDR_VAR 0 8
21146: PUSH
21147: LD_INT 81
21149: PUSH
21150: LD_VAR 0 9
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 3
21161: PUSH
21162: LD_INT 21
21164: PUSH
21165: LD_INT 3
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PPUSH
21180: CALL_OW 69
21184: ST_TO_ADDR
// if not tmp then
21185: LD_VAR 0 8
21189: NOT
21190: IFFALSE 21194
// exit ;
21192: GO 21652
// if in_unit then
21194: LD_VAR 0 11
21198: IFFALSE 21222
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21200: LD_ADDR_VAR 0 10
21204: PUSH
21205: LD_VAR 0 8
21209: PPUSH
21210: LD_VAR 0 11
21214: PPUSH
21215: CALL_OW 74
21219: ST_TO_ADDR
21220: GO 21242
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21222: LD_ADDR_VAR 0 10
21226: PUSH
21227: LD_VAR 0 8
21231: PPUSH
21232: LD_VAR 0 1
21236: PPUSH
21237: CALL_OW 74
21241: ST_TO_ADDR
// if not enemy then
21242: LD_VAR 0 10
21246: NOT
21247: IFFALSE 21251
// exit ;
21249: GO 21652
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21251: LD_VAR 0 11
21255: PUSH
21256: LD_VAR 0 11
21260: PPUSH
21261: LD_VAR 0 10
21265: PPUSH
21266: CALL_OW 296
21270: PUSH
21271: LD_INT 13
21273: GREATER
21274: AND
21275: PUSH
21276: LD_VAR 0 1
21280: PPUSH
21281: LD_VAR 0 10
21285: PPUSH
21286: CALL_OW 296
21290: PUSH
21291: LD_INT 12
21293: GREATER
21294: OR
21295: IFFALSE 21299
// exit ;
21297: GO 21652
// missile := [ 1 ] ;
21299: LD_ADDR_VAR 0 14
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: EMPTY
21308: LIST
21309: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21310: LD_VAR 0 9
21314: PPUSH
21315: LD_VAR 0 12
21319: PPUSH
21320: CALL_OW 325
21324: IFFALSE 21353
// missile := Replace ( missile , missile + 1 , 2 ) ;
21326: LD_ADDR_VAR 0 14
21330: PUSH
21331: LD_VAR 0 14
21335: PPUSH
21336: LD_VAR 0 14
21340: PUSH
21341: LD_INT 1
21343: PLUS
21344: PPUSH
21345: LD_INT 2
21347: PPUSH
21348: CALL_OW 1
21352: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21353: LD_VAR 0 9
21357: PPUSH
21358: LD_VAR 0 13
21362: PPUSH
21363: CALL_OW 325
21367: PUSH
21368: LD_VAR 0 10
21372: PPUSH
21373: CALL_OW 255
21377: PPUSH
21378: LD_VAR 0 13
21382: PPUSH
21383: CALL_OW 325
21387: NOT
21388: AND
21389: IFFALSE 21418
// missile := Replace ( missile , missile + 1 , 3 ) ;
21391: LD_ADDR_VAR 0 14
21395: PUSH
21396: LD_VAR 0 14
21400: PPUSH
21401: LD_VAR 0 14
21405: PUSH
21406: LD_INT 1
21408: PLUS
21409: PPUSH
21410: LD_INT 3
21412: PPUSH
21413: CALL_OW 1
21417: ST_TO_ADDR
// if missile < 2 then
21418: LD_VAR 0 14
21422: PUSH
21423: LD_INT 2
21425: LESS
21426: IFFALSE 21430
// exit ;
21428: GO 21652
// x := GetX ( enemy ) ;
21430: LD_ADDR_VAR 0 4
21434: PUSH
21435: LD_VAR 0 10
21439: PPUSH
21440: CALL_OW 250
21444: ST_TO_ADDR
// y := GetY ( enemy ) ;
21445: LD_ADDR_VAR 0 5
21449: PUSH
21450: LD_VAR 0 10
21454: PPUSH
21455: CALL_OW 251
21459: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21460: LD_ADDR_VAR 0 6
21464: PUSH
21465: LD_VAR 0 4
21469: PUSH
21470: LD_INT 1
21472: NEG
21473: PPUSH
21474: LD_INT 1
21476: PPUSH
21477: CALL_OW 12
21481: PLUS
21482: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21483: LD_ADDR_VAR 0 7
21487: PUSH
21488: LD_VAR 0 5
21492: PUSH
21493: LD_INT 1
21495: NEG
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 12
21504: PLUS
21505: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21506: LD_VAR 0 6
21510: PPUSH
21511: LD_VAR 0 7
21515: PPUSH
21516: CALL_OW 488
21520: NOT
21521: IFFALSE 21543
// begin _x := x ;
21523: LD_ADDR_VAR 0 6
21527: PUSH
21528: LD_VAR 0 4
21532: ST_TO_ADDR
// _y := y ;
21533: LD_ADDR_VAR 0 7
21537: PUSH
21538: LD_VAR 0 5
21542: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21543: LD_ADDR_VAR 0 3
21547: PUSH
21548: LD_INT 1
21550: PPUSH
21551: LD_VAR 0 14
21555: PPUSH
21556: CALL_OW 12
21560: ST_TO_ADDR
// case i of 1 :
21561: LD_VAR 0 3
21565: PUSH
21566: LD_INT 1
21568: DOUBLE
21569: EQUAL
21570: IFTRUE 21574
21572: GO 21591
21574: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21575: LD_VAR 0 1
21579: PPUSH
21580: LD_VAR 0 10
21584: PPUSH
21585: CALL_OW 115
21589: GO 21652
21591: LD_INT 2
21593: DOUBLE
21594: EQUAL
21595: IFTRUE 21599
21597: GO 21621
21599: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21600: LD_VAR 0 1
21604: PPUSH
21605: LD_VAR 0 6
21609: PPUSH
21610: LD_VAR 0 7
21614: PPUSH
21615: CALL_OW 153
21619: GO 21652
21621: LD_INT 3
21623: DOUBLE
21624: EQUAL
21625: IFTRUE 21629
21627: GO 21651
21629: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21630: LD_VAR 0 1
21634: PPUSH
21635: LD_VAR 0 6
21639: PPUSH
21640: LD_VAR 0 7
21644: PPUSH
21645: CALL_OW 154
21649: GO 21652
21651: POP
// end ;
21652: LD_VAR 0 2
21656: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21657: LD_INT 0
21659: PPUSH
21660: PPUSH
21661: PPUSH
21662: PPUSH
21663: PPUSH
21664: PPUSH
// if not unit or not building then
21665: LD_VAR 0 1
21669: NOT
21670: PUSH
21671: LD_VAR 0 2
21675: NOT
21676: OR
21677: IFFALSE 21681
// exit ;
21679: GO 21839
// x := GetX ( building ) ;
21681: LD_ADDR_VAR 0 5
21685: PUSH
21686: LD_VAR 0 2
21690: PPUSH
21691: CALL_OW 250
21695: ST_TO_ADDR
// y := GetY ( building ) ;
21696: LD_ADDR_VAR 0 6
21700: PUSH
21701: LD_VAR 0 2
21705: PPUSH
21706: CALL_OW 251
21710: ST_TO_ADDR
// for i = 0 to 5 do
21711: LD_ADDR_VAR 0 4
21715: PUSH
21716: DOUBLE
21717: LD_INT 0
21719: DEC
21720: ST_TO_ADDR
21721: LD_INT 5
21723: PUSH
21724: FOR_TO
21725: IFFALSE 21837
// begin _x := ShiftX ( x , i , 3 ) ;
21727: LD_ADDR_VAR 0 7
21731: PUSH
21732: LD_VAR 0 5
21736: PPUSH
21737: LD_VAR 0 4
21741: PPUSH
21742: LD_INT 3
21744: PPUSH
21745: CALL_OW 272
21749: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21750: LD_ADDR_VAR 0 8
21754: PUSH
21755: LD_VAR 0 6
21759: PPUSH
21760: LD_VAR 0 4
21764: PPUSH
21765: LD_INT 3
21767: PPUSH
21768: CALL_OW 273
21772: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21773: LD_VAR 0 7
21777: PPUSH
21778: LD_VAR 0 8
21782: PPUSH
21783: CALL_OW 488
21787: NOT
21788: IFFALSE 21792
// continue ;
21790: GO 21724
// if HexInfo ( _x , _y ) = 0 then
21792: LD_VAR 0 7
21796: PPUSH
21797: LD_VAR 0 8
21801: PPUSH
21802: CALL_OW 428
21806: PUSH
21807: LD_INT 0
21809: EQUAL
21810: IFFALSE 21835
// begin ComMoveXY ( unit , _x , _y ) ;
21812: LD_VAR 0 1
21816: PPUSH
21817: LD_VAR 0 7
21821: PPUSH
21822: LD_VAR 0 8
21826: PPUSH
21827: CALL_OW 111
// exit ;
21831: POP
21832: POP
21833: GO 21839
// end ; end ;
21835: GO 21724
21837: POP
21838: POP
// end ;
21839: LD_VAR 0 3
21843: RET
// export function ScanBase ( side , base_area ) ; begin
21844: LD_INT 0
21846: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21847: LD_ADDR_VAR 0 3
21851: PUSH
21852: LD_VAR 0 2
21856: PPUSH
21857: LD_INT 81
21859: PUSH
21860: LD_VAR 0 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PPUSH
21869: CALL_OW 70
21873: ST_TO_ADDR
// end ;
21874: LD_VAR 0 3
21878: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21879: LD_INT 0
21881: PPUSH
21882: PPUSH
21883: PPUSH
21884: PPUSH
// result := false ;
21885: LD_ADDR_VAR 0 2
21889: PUSH
21890: LD_INT 0
21892: ST_TO_ADDR
// side := GetSide ( unit ) ;
21893: LD_ADDR_VAR 0 3
21897: PUSH
21898: LD_VAR 0 1
21902: PPUSH
21903: CALL_OW 255
21907: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21908: LD_ADDR_VAR 0 4
21912: PUSH
21913: LD_VAR 0 1
21917: PPUSH
21918: CALL_OW 248
21922: ST_TO_ADDR
// case nat of 1 :
21923: LD_VAR 0 4
21927: PUSH
21928: LD_INT 1
21930: DOUBLE
21931: EQUAL
21932: IFTRUE 21936
21934: GO 21947
21936: POP
// tech := tech_lassight ; 2 :
21937: LD_ADDR_VAR 0 5
21941: PUSH
21942: LD_INT 12
21944: ST_TO_ADDR
21945: GO 21986
21947: LD_INT 2
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 21966
21955: POP
// tech := tech_mortar ; 3 :
21956: LD_ADDR_VAR 0 5
21960: PUSH
21961: LD_INT 41
21963: ST_TO_ADDR
21964: GO 21986
21966: LD_INT 3
21968: DOUBLE
21969: EQUAL
21970: IFTRUE 21974
21972: GO 21985
21974: POP
// tech := tech_bazooka ; end ;
21975: LD_ADDR_VAR 0 5
21979: PUSH
21980: LD_INT 44
21982: ST_TO_ADDR
21983: GO 21986
21985: POP
// if Researched ( side , tech ) then
21986: LD_VAR 0 3
21990: PPUSH
21991: LD_VAR 0 5
21995: PPUSH
21996: CALL_OW 325
22000: IFFALSE 22027
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22002: LD_ADDR_VAR 0 2
22006: PUSH
22007: LD_INT 5
22009: PUSH
22010: LD_INT 8
22012: PUSH
22013: LD_INT 9
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: PUSH
22021: LD_VAR 0 4
22025: ARRAY
22026: ST_TO_ADDR
// end ;
22027: LD_VAR 0 2
22031: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22032: LD_INT 0
22034: PPUSH
22035: PPUSH
22036: PPUSH
// if not mines then
22037: LD_VAR 0 2
22041: NOT
22042: IFFALSE 22046
// exit ;
22044: GO 22190
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22046: LD_ADDR_VAR 0 5
22050: PUSH
22051: LD_INT 81
22053: PUSH
22054: LD_VAR 0 1
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 3
22065: PUSH
22066: LD_INT 21
22068: PUSH
22069: LD_INT 3
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PPUSH
22084: CALL_OW 69
22088: ST_TO_ADDR
// for i in mines do
22089: LD_ADDR_VAR 0 4
22093: PUSH
22094: LD_VAR 0 2
22098: PUSH
22099: FOR_IN
22100: IFFALSE 22188
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22102: LD_VAR 0 4
22106: PUSH
22107: LD_INT 1
22109: ARRAY
22110: PPUSH
22111: LD_VAR 0 4
22115: PUSH
22116: LD_INT 2
22118: ARRAY
22119: PPUSH
22120: CALL_OW 458
22124: NOT
22125: IFFALSE 22129
// continue ;
22127: GO 22099
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22129: LD_VAR 0 4
22133: PUSH
22134: LD_INT 1
22136: ARRAY
22137: PPUSH
22138: LD_VAR 0 4
22142: PUSH
22143: LD_INT 2
22145: ARRAY
22146: PPUSH
22147: CALL_OW 428
22151: PUSH
22152: LD_VAR 0 5
22156: IN
22157: IFFALSE 22186
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22159: LD_VAR 0 4
22163: PUSH
22164: LD_INT 1
22166: ARRAY
22167: PPUSH
22168: LD_VAR 0 4
22172: PUSH
22173: LD_INT 2
22175: ARRAY
22176: PPUSH
22177: LD_VAR 0 1
22181: PPUSH
22182: CALL_OW 456
// end ;
22186: GO 22099
22188: POP
22189: POP
// end ;
22190: LD_VAR 0 3
22194: RET
// export function Count ( array ) ; var i ; begin
22195: LD_INT 0
22197: PPUSH
22198: PPUSH
// result := 0 ;
22199: LD_ADDR_VAR 0 2
22203: PUSH
22204: LD_INT 0
22206: ST_TO_ADDR
// for i in array do
22207: LD_ADDR_VAR 0 3
22211: PUSH
22212: LD_VAR 0 1
22216: PUSH
22217: FOR_IN
22218: IFFALSE 22242
// if i then
22220: LD_VAR 0 3
22224: IFFALSE 22240
// result := result + 1 ;
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_VAR 0 2
22235: PUSH
22236: LD_INT 1
22238: PLUS
22239: ST_TO_ADDR
22240: GO 22217
22242: POP
22243: POP
// end ;
22244: LD_VAR 0 2
22248: RET
// export function IsEmpty ( building ) ; begin
22249: LD_INT 0
22251: PPUSH
// if not building then
22252: LD_VAR 0 1
22256: NOT
22257: IFFALSE 22261
// exit ;
22259: GO 22304
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22261: LD_ADDR_VAR 0 2
22265: PUSH
22266: LD_VAR 0 1
22270: PUSH
22271: LD_INT 22
22273: PUSH
22274: LD_VAR 0 1
22278: PPUSH
22279: CALL_OW 255
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 58
22290: PUSH
22291: EMPTY
22292: LIST
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PPUSH
22298: CALL_OW 69
22302: IN
22303: ST_TO_ADDR
// end ;
22304: LD_VAR 0 2
22308: RET
// export function IsNotFull ( building ) ; var places ; begin
22309: LD_INT 0
22311: PPUSH
22312: PPUSH
// if not building then
22313: LD_VAR 0 1
22317: NOT
22318: IFFALSE 22322
// exit ;
22320: GO 22493
// result := false ;
22322: LD_ADDR_VAR 0 2
22326: PUSH
22327: LD_INT 0
22329: ST_TO_ADDR
// places := 0 ;
22330: LD_ADDR_VAR 0 3
22334: PUSH
22335: LD_INT 0
22337: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 266
22347: PUSH
22348: LD_INT 0
22350: DOUBLE
22351: EQUAL
22352: IFTRUE 22410
22354: LD_INT 1
22356: DOUBLE
22357: EQUAL
22358: IFTRUE 22410
22360: LD_INT 6
22362: DOUBLE
22363: EQUAL
22364: IFTRUE 22410
22366: LD_INT 7
22368: DOUBLE
22369: EQUAL
22370: IFTRUE 22410
22372: LD_INT 8
22374: DOUBLE
22375: EQUAL
22376: IFTRUE 22410
22378: LD_INT 4
22380: DOUBLE
22381: EQUAL
22382: IFTRUE 22410
22384: LD_INT 5
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22410
22390: LD_INT 2
22392: DOUBLE
22393: EQUAL
22394: IFTRUE 22410
22396: LD_INT 3
22398: DOUBLE
22399: EQUAL
22400: IFTRUE 22410
22402: LD_INT 35
22404: DOUBLE
22405: EQUAL
22406: IFTRUE 22410
22408: GO 22421
22410: POP
// places := 6 ; b_bunker , b_breastwork :
22411: LD_ADDR_VAR 0 3
22415: PUSH
22416: LD_INT 6
22418: ST_TO_ADDR
22419: GO 22466
22421: LD_INT 32
22423: DOUBLE
22424: EQUAL
22425: IFTRUE 22435
22427: LD_INT 31
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22446
22435: POP
// places := 1 ; b_control_tower :
22436: LD_ADDR_VAR 0 3
22440: PUSH
22441: LD_INT 1
22443: ST_TO_ADDR
22444: GO 22466
22446: LD_INT 36
22448: DOUBLE
22449: EQUAL
22450: IFTRUE 22454
22452: GO 22465
22454: POP
// places := 3 ; end ;
22455: LD_ADDR_VAR 0 3
22459: PUSH
22460: LD_INT 3
22462: ST_TO_ADDR
22463: GO 22466
22465: POP
// if places then
22466: LD_VAR 0 3
22470: IFFALSE 22493
// result := UnitsInside ( building ) < places ;
22472: LD_ADDR_VAR 0 2
22476: PUSH
22477: LD_VAR 0 1
22481: PPUSH
22482: CALL_OW 313
22486: PUSH
22487: LD_VAR 0 3
22491: LESS
22492: ST_TO_ADDR
// end ;
22493: LD_VAR 0 2
22497: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22498: LD_INT 0
22500: PPUSH
22501: PPUSH
22502: PPUSH
22503: PPUSH
// tmp := [ ] ;
22504: LD_ADDR_VAR 0 3
22508: PUSH
22509: EMPTY
22510: ST_TO_ADDR
// list := [ ] ;
22511: LD_ADDR_VAR 0 5
22515: PUSH
22516: EMPTY
22517: ST_TO_ADDR
// for i = 16 to 25 do
22518: LD_ADDR_VAR 0 4
22522: PUSH
22523: DOUBLE
22524: LD_INT 16
22526: DEC
22527: ST_TO_ADDR
22528: LD_INT 25
22530: PUSH
22531: FOR_TO
22532: IFFALSE 22605
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22534: LD_ADDR_VAR 0 3
22538: PUSH
22539: LD_VAR 0 3
22543: PUSH
22544: LD_INT 22
22546: PUSH
22547: LD_VAR 0 1
22551: PPUSH
22552: CALL_OW 255
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 91
22563: PUSH
22564: LD_VAR 0 1
22568: PUSH
22569: LD_INT 6
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 30
22579: PUSH
22580: LD_VAR 0 4
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: PUSH
22594: EMPTY
22595: LIST
22596: PPUSH
22597: CALL_OW 69
22601: ADD
22602: ST_TO_ADDR
22603: GO 22531
22605: POP
22606: POP
// for i = 1 to tmp do
22607: LD_ADDR_VAR 0 4
22611: PUSH
22612: DOUBLE
22613: LD_INT 1
22615: DEC
22616: ST_TO_ADDR
22617: LD_VAR 0 3
22621: PUSH
22622: FOR_TO
22623: IFFALSE 22711
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22625: LD_ADDR_VAR 0 5
22629: PUSH
22630: LD_VAR 0 5
22634: PUSH
22635: LD_VAR 0 3
22639: PUSH
22640: LD_VAR 0 4
22644: ARRAY
22645: PPUSH
22646: CALL_OW 266
22650: PUSH
22651: LD_VAR 0 3
22655: PUSH
22656: LD_VAR 0 4
22660: ARRAY
22661: PPUSH
22662: CALL_OW 250
22666: PUSH
22667: LD_VAR 0 3
22671: PUSH
22672: LD_VAR 0 4
22676: ARRAY
22677: PPUSH
22678: CALL_OW 251
22682: PUSH
22683: LD_VAR 0 3
22687: PUSH
22688: LD_VAR 0 4
22692: ARRAY
22693: PPUSH
22694: CALL_OW 254
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: PUSH
22705: EMPTY
22706: LIST
22707: ADD
22708: ST_TO_ADDR
22709: GO 22622
22711: POP
22712: POP
// result := list ;
22713: LD_ADDR_VAR 0 2
22717: PUSH
22718: LD_VAR 0 5
22722: ST_TO_ADDR
// end ;
22723: LD_VAR 0 2
22727: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22728: LD_INT 0
22730: PPUSH
22731: PPUSH
22732: PPUSH
22733: PPUSH
22734: PPUSH
22735: PPUSH
22736: PPUSH
// if not factory then
22737: LD_VAR 0 1
22741: NOT
22742: IFFALSE 22746
// exit ;
22744: GO 23339
// if control = control_apeman then
22746: LD_VAR 0 4
22750: PUSH
22751: LD_INT 5
22753: EQUAL
22754: IFFALSE 22863
// begin tmp := UnitsInside ( factory ) ;
22756: LD_ADDR_VAR 0 8
22760: PUSH
22761: LD_VAR 0 1
22765: PPUSH
22766: CALL_OW 313
22770: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22771: LD_VAR 0 8
22775: PPUSH
22776: LD_INT 25
22778: PUSH
22779: LD_INT 12
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PPUSH
22786: CALL_OW 72
22790: NOT
22791: IFFALSE 22801
// control := control_manual ;
22793: LD_ADDR_VAR 0 4
22797: PUSH
22798: LD_INT 1
22800: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22801: LD_ADDR_VAR 0 8
22805: PUSH
22806: LD_VAR 0 1
22810: PPUSH
22811: CALL 22498 0 1
22815: ST_TO_ADDR
// if tmp then
22816: LD_VAR 0 8
22820: IFFALSE 22863
// begin for i in tmp do
22822: LD_ADDR_VAR 0 7
22826: PUSH
22827: LD_VAR 0 8
22831: PUSH
22832: FOR_IN
22833: IFFALSE 22861
// if i [ 1 ] = b_ext_radio then
22835: LD_VAR 0 7
22839: PUSH
22840: LD_INT 1
22842: ARRAY
22843: PUSH
22844: LD_INT 22
22846: EQUAL
22847: IFFALSE 22859
// begin control := control_remote ;
22849: LD_ADDR_VAR 0 4
22853: PUSH
22854: LD_INT 2
22856: ST_TO_ADDR
// break ;
22857: GO 22861
// end ;
22859: GO 22832
22861: POP
22862: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22863: LD_VAR 0 1
22867: PPUSH
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_VAR 0 3
22877: PPUSH
22878: LD_VAR 0 4
22882: PPUSH
22883: LD_VAR 0 5
22887: PPUSH
22888: CALL_OW 448
22892: IFFALSE 22927
// begin result := [ chassis , engine , control , weapon ] ;
22894: LD_ADDR_VAR 0 6
22898: PUSH
22899: LD_VAR 0 2
22903: PUSH
22904: LD_VAR 0 3
22908: PUSH
22909: LD_VAR 0 4
22913: PUSH
22914: LD_VAR 0 5
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: ST_TO_ADDR
// exit ;
22925: GO 23339
// end ; _chassis := AvailableChassisList ( factory ) ;
22927: LD_ADDR_VAR 0 9
22931: PUSH
22932: LD_VAR 0 1
22936: PPUSH
22937: CALL_OW 475
22941: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22942: LD_ADDR_VAR 0 11
22946: PUSH
22947: LD_VAR 0 1
22951: PPUSH
22952: CALL_OW 476
22956: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22957: LD_ADDR_VAR 0 12
22961: PUSH
22962: LD_VAR 0 1
22966: PPUSH
22967: CALL_OW 477
22971: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22972: LD_ADDR_VAR 0 10
22976: PUSH
22977: LD_VAR 0 1
22981: PPUSH
22982: CALL_OW 478
22986: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22987: LD_VAR 0 9
22991: NOT
22992: PUSH
22993: LD_VAR 0 11
22997: NOT
22998: OR
22999: PUSH
23000: LD_VAR 0 12
23004: NOT
23005: OR
23006: PUSH
23007: LD_VAR 0 10
23011: NOT
23012: OR
23013: IFFALSE 23048
// begin result := [ chassis , engine , control , weapon ] ;
23015: LD_ADDR_VAR 0 6
23019: PUSH
23020: LD_VAR 0 2
23024: PUSH
23025: LD_VAR 0 3
23029: PUSH
23030: LD_VAR 0 4
23034: PUSH
23035: LD_VAR 0 5
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: ST_TO_ADDR
// exit ;
23046: GO 23339
// end ; if not chassis in _chassis then
23048: LD_VAR 0 2
23052: PUSH
23053: LD_VAR 0 9
23057: IN
23058: NOT
23059: IFFALSE 23085
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23061: LD_ADDR_VAR 0 2
23065: PUSH
23066: LD_VAR 0 9
23070: PUSH
23071: LD_INT 1
23073: PPUSH
23074: LD_VAR 0 9
23078: PPUSH
23079: CALL_OW 12
23083: ARRAY
23084: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23085: LD_VAR 0 2
23089: PPUSH
23090: LD_VAR 0 3
23094: PPUSH
23095: CALL 23344 0 2
23099: NOT
23100: IFFALSE 23159
// repeat engine := _engine [ 1 ] ;
23102: LD_ADDR_VAR 0 3
23106: PUSH
23107: LD_VAR 0 11
23111: PUSH
23112: LD_INT 1
23114: ARRAY
23115: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23116: LD_ADDR_VAR 0 11
23120: PUSH
23121: LD_VAR 0 11
23125: PPUSH
23126: LD_INT 1
23128: PPUSH
23129: CALL_OW 3
23133: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23134: LD_VAR 0 2
23138: PPUSH
23139: LD_VAR 0 3
23143: PPUSH
23144: CALL 23344 0 2
23148: PUSH
23149: LD_VAR 0 11
23153: PUSH
23154: EMPTY
23155: EQUAL
23156: OR
23157: IFFALSE 23102
// if not control in _control then
23159: LD_VAR 0 4
23163: PUSH
23164: LD_VAR 0 12
23168: IN
23169: NOT
23170: IFFALSE 23196
// control := _control [ rand ( 1 , _control ) ] ;
23172: LD_ADDR_VAR 0 4
23176: PUSH
23177: LD_VAR 0 12
23181: PUSH
23182: LD_INT 1
23184: PPUSH
23185: LD_VAR 0 12
23189: PPUSH
23190: CALL_OW 12
23194: ARRAY
23195: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23196: LD_VAR 0 2
23200: PPUSH
23201: LD_VAR 0 5
23205: PPUSH
23206: CALL 23564 0 2
23210: NOT
23211: IFFALSE 23270
// repeat weapon := _weapon [ 1 ] ;
23213: LD_ADDR_VAR 0 5
23217: PUSH
23218: LD_VAR 0 10
23222: PUSH
23223: LD_INT 1
23225: ARRAY
23226: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23227: LD_ADDR_VAR 0 10
23231: PUSH
23232: LD_VAR 0 10
23236: PPUSH
23237: LD_INT 1
23239: PPUSH
23240: CALL_OW 3
23244: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23245: LD_VAR 0 2
23249: PPUSH
23250: LD_VAR 0 5
23254: PPUSH
23255: CALL 23564 0 2
23259: PUSH
23260: LD_VAR 0 10
23264: PUSH
23265: EMPTY
23266: EQUAL
23267: OR
23268: IFFALSE 23213
// result := [ ] ;
23270: LD_ADDR_VAR 0 6
23274: PUSH
23275: EMPTY
23276: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23277: LD_VAR 0 1
23281: PPUSH
23282: LD_VAR 0 2
23286: PPUSH
23287: LD_VAR 0 3
23291: PPUSH
23292: LD_VAR 0 4
23296: PPUSH
23297: LD_VAR 0 5
23301: PPUSH
23302: CALL_OW 448
23306: IFFALSE 23339
// result := [ chassis , engine , control , weapon ] ;
23308: LD_ADDR_VAR 0 6
23312: PUSH
23313: LD_VAR 0 2
23317: PUSH
23318: LD_VAR 0 3
23322: PUSH
23323: LD_VAR 0 4
23327: PUSH
23328: LD_VAR 0 5
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: ST_TO_ADDR
// end ;
23339: LD_VAR 0 6
23343: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23344: LD_INT 0
23346: PPUSH
// if not chassis or not engine then
23347: LD_VAR 0 1
23351: NOT
23352: PUSH
23353: LD_VAR 0 2
23357: NOT
23358: OR
23359: IFFALSE 23363
// exit ;
23361: GO 23559
// case engine of engine_solar :
23363: LD_VAR 0 2
23367: PUSH
23368: LD_INT 2
23370: DOUBLE
23371: EQUAL
23372: IFTRUE 23376
23374: GO 23414
23376: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23377: LD_ADDR_VAR 0 3
23381: PUSH
23382: LD_INT 11
23384: PUSH
23385: LD_INT 12
23387: PUSH
23388: LD_INT 13
23390: PUSH
23391: LD_INT 14
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: LD_INT 3
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: ST_TO_ADDR
23412: GO 23543
23414: LD_INT 1
23416: DOUBLE
23417: EQUAL
23418: IFTRUE 23422
23420: GO 23484
23422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23423: LD_ADDR_VAR 0 3
23427: PUSH
23428: LD_INT 11
23430: PUSH
23431: LD_INT 12
23433: PUSH
23434: LD_INT 13
23436: PUSH
23437: LD_INT 14
23439: PUSH
23440: LD_INT 1
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 3
23448: PUSH
23449: LD_INT 4
23451: PUSH
23452: LD_INT 5
23454: PUSH
23455: LD_INT 21
23457: PUSH
23458: LD_INT 23
23460: PUSH
23461: LD_INT 22
23463: PUSH
23464: LD_INT 24
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: ST_TO_ADDR
23482: GO 23543
23484: LD_INT 3
23486: DOUBLE
23487: EQUAL
23488: IFTRUE 23492
23490: GO 23542
23492: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23493: LD_ADDR_VAR 0 3
23497: PUSH
23498: LD_INT 13
23500: PUSH
23501: LD_INT 14
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 3
23509: PUSH
23510: LD_INT 4
23512: PUSH
23513: LD_INT 5
23515: PUSH
23516: LD_INT 21
23518: PUSH
23519: LD_INT 22
23521: PUSH
23522: LD_INT 23
23524: PUSH
23525: LD_INT 24
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: ST_TO_ADDR
23540: GO 23543
23542: POP
// result := ( chassis in result ) ;
23543: LD_ADDR_VAR 0 3
23547: PUSH
23548: LD_VAR 0 1
23552: PUSH
23553: LD_VAR 0 3
23557: IN
23558: ST_TO_ADDR
// end ;
23559: LD_VAR 0 3
23563: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23564: LD_INT 0
23566: PPUSH
// if not chassis or not weapon then
23567: LD_VAR 0 1
23571: NOT
23572: PUSH
23573: LD_VAR 0 2
23577: NOT
23578: OR
23579: IFFALSE 23583
// exit ;
23581: GO 24643
// case weapon of us_machine_gun :
23583: LD_VAR 0 2
23587: PUSH
23588: LD_INT 2
23590: DOUBLE
23591: EQUAL
23592: IFTRUE 23596
23594: GO 23626
23596: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23597: LD_ADDR_VAR 0 3
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: LD_INT 2
23607: PUSH
23608: LD_INT 3
23610: PUSH
23611: LD_INT 4
23613: PUSH
23614: LD_INT 5
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: ST_TO_ADDR
23624: GO 24627
23626: LD_INT 3
23628: DOUBLE
23629: EQUAL
23630: IFTRUE 23634
23632: GO 23664
23634: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23635: LD_ADDR_VAR 0 3
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 2
23645: PUSH
23646: LD_INT 3
23648: PUSH
23649: LD_INT 4
23651: PUSH
23652: LD_INT 5
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: ST_TO_ADDR
23662: GO 24627
23664: LD_INT 11
23666: DOUBLE
23667: EQUAL
23668: IFTRUE 23672
23670: GO 23702
23672: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23673: LD_ADDR_VAR 0 3
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: LD_INT 3
23686: PUSH
23687: LD_INT 4
23689: PUSH
23690: LD_INT 5
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: ST_TO_ADDR
23700: GO 24627
23702: LD_INT 4
23704: DOUBLE
23705: EQUAL
23706: IFTRUE 23710
23708: GO 23736
23710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23711: LD_ADDR_VAR 0 3
23715: PUSH
23716: LD_INT 2
23718: PUSH
23719: LD_INT 3
23721: PUSH
23722: LD_INT 4
23724: PUSH
23725: LD_INT 5
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: ST_TO_ADDR
23734: GO 24627
23736: LD_INT 5
23738: DOUBLE
23739: EQUAL
23740: IFTRUE 23744
23742: GO 23770
23744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23745: LD_ADDR_VAR 0 3
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 3
23755: PUSH
23756: LD_INT 4
23758: PUSH
23759: LD_INT 5
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: ST_TO_ADDR
23768: GO 24627
23770: LD_INT 9
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 23804
23778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23779: LD_ADDR_VAR 0 3
23783: PUSH
23784: LD_INT 2
23786: PUSH
23787: LD_INT 3
23789: PUSH
23790: LD_INT 4
23792: PUSH
23793: LD_INT 5
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: ST_TO_ADDR
23802: GO 24627
23804: LD_INT 7
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 23838
23812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23813: LD_ADDR_VAR 0 3
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: LD_INT 3
23823: PUSH
23824: LD_INT 4
23826: PUSH
23827: LD_INT 5
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: ST_TO_ADDR
23836: GO 24627
23838: LD_INT 12
23840: DOUBLE
23841: EQUAL
23842: IFTRUE 23846
23844: GO 23872
23846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23847: LD_ADDR_VAR 0 3
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: LD_INT 3
23857: PUSH
23858: LD_INT 4
23860: PUSH
23861: LD_INT 5
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: ST_TO_ADDR
23870: GO 24627
23872: LD_INT 13
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23906
23880: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23881: LD_ADDR_VAR 0 3
23885: PUSH
23886: LD_INT 2
23888: PUSH
23889: LD_INT 3
23891: PUSH
23892: LD_INT 4
23894: PUSH
23895: LD_INT 5
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: ST_TO_ADDR
23904: GO 24627
23906: LD_INT 14
23908: DOUBLE
23909: EQUAL
23910: IFTRUE 23914
23912: GO 23932
23914: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 4
23922: PUSH
23923: LD_INT 5
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: ST_TO_ADDR
23930: GO 24627
23932: LD_INT 6
23934: DOUBLE
23935: EQUAL
23936: IFTRUE 23940
23938: GO 23958
23940: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23941: LD_ADDR_VAR 0 3
23945: PUSH
23946: LD_INT 4
23948: PUSH
23949: LD_INT 5
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: ST_TO_ADDR
23956: GO 24627
23958: LD_INT 10
23960: DOUBLE
23961: EQUAL
23962: IFTRUE 23966
23964: GO 23984
23966: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23967: LD_ADDR_VAR 0 3
23971: PUSH
23972: LD_INT 4
23974: PUSH
23975: LD_INT 5
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: ST_TO_ADDR
23982: GO 24627
23984: LD_INT 22
23986: DOUBLE
23987: EQUAL
23988: IFTRUE 23992
23990: GO 24018
23992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23993: LD_ADDR_VAR 0 3
23997: PUSH
23998: LD_INT 11
24000: PUSH
24001: LD_INT 12
24003: PUSH
24004: LD_INT 13
24006: PUSH
24007: LD_INT 14
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: ST_TO_ADDR
24016: GO 24627
24018: LD_INT 23
24020: DOUBLE
24021: EQUAL
24022: IFTRUE 24026
24024: GO 24052
24026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24027: LD_ADDR_VAR 0 3
24031: PUSH
24032: LD_INT 11
24034: PUSH
24035: LD_INT 12
24037: PUSH
24038: LD_INT 13
24040: PUSH
24041: LD_INT 14
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: ST_TO_ADDR
24050: GO 24627
24052: LD_INT 24
24054: DOUBLE
24055: EQUAL
24056: IFTRUE 24060
24058: GO 24086
24060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24061: LD_ADDR_VAR 0 3
24065: PUSH
24066: LD_INT 11
24068: PUSH
24069: LD_INT 12
24071: PUSH
24072: LD_INT 13
24074: PUSH
24075: LD_INT 14
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: ST_TO_ADDR
24084: GO 24627
24086: LD_INT 30
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24120
24094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_INT 11
24102: PUSH
24103: LD_INT 12
24105: PUSH
24106: LD_INT 13
24108: PUSH
24109: LD_INT 14
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: ST_TO_ADDR
24118: GO 24627
24120: LD_INT 25
24122: DOUBLE
24123: EQUAL
24124: IFTRUE 24128
24126: GO 24146
24128: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24129: LD_ADDR_VAR 0 3
24133: PUSH
24134: LD_INT 13
24136: PUSH
24137: LD_INT 14
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: ST_TO_ADDR
24144: GO 24627
24146: LD_INT 27
24148: DOUBLE
24149: EQUAL
24150: IFTRUE 24154
24152: GO 24172
24154: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24155: LD_ADDR_VAR 0 3
24159: PUSH
24160: LD_INT 13
24162: PUSH
24163: LD_INT 14
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: ST_TO_ADDR
24170: GO 24627
24172: LD_INT 92
24174: DOUBLE
24175: EQUAL
24176: IFTRUE 24180
24178: GO 24206
24180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24181: LD_ADDR_VAR 0 3
24185: PUSH
24186: LD_INT 11
24188: PUSH
24189: LD_INT 12
24191: PUSH
24192: LD_INT 13
24194: PUSH
24195: LD_INT 14
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: ST_TO_ADDR
24204: GO 24627
24206: LD_INT 28
24208: DOUBLE
24209: EQUAL
24210: IFTRUE 24214
24212: GO 24232
24214: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24215: LD_ADDR_VAR 0 3
24219: PUSH
24220: LD_INT 13
24222: PUSH
24223: LD_INT 14
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: ST_TO_ADDR
24230: GO 24627
24232: LD_INT 29
24234: DOUBLE
24235: EQUAL
24236: IFTRUE 24240
24238: GO 24258
24240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24241: LD_ADDR_VAR 0 3
24245: PUSH
24246: LD_INT 13
24248: PUSH
24249: LD_INT 14
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: ST_TO_ADDR
24256: GO 24627
24258: LD_INT 31
24260: DOUBLE
24261: EQUAL
24262: IFTRUE 24266
24264: GO 24284
24266: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_INT 13
24274: PUSH
24275: LD_INT 14
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: ST_TO_ADDR
24282: GO 24627
24284: LD_INT 26
24286: DOUBLE
24287: EQUAL
24288: IFTRUE 24292
24290: GO 24310
24292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24293: LD_ADDR_VAR 0 3
24297: PUSH
24298: LD_INT 13
24300: PUSH
24301: LD_INT 14
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: ST_TO_ADDR
24308: GO 24627
24310: LD_INT 42
24312: DOUBLE
24313: EQUAL
24314: IFTRUE 24318
24316: GO 24344
24318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24319: LD_ADDR_VAR 0 3
24323: PUSH
24324: LD_INT 21
24326: PUSH
24327: LD_INT 22
24329: PUSH
24330: LD_INT 23
24332: PUSH
24333: LD_INT 24
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: ST_TO_ADDR
24342: GO 24627
24344: LD_INT 43
24346: DOUBLE
24347: EQUAL
24348: IFTRUE 24352
24350: GO 24378
24352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24353: LD_ADDR_VAR 0 3
24357: PUSH
24358: LD_INT 21
24360: PUSH
24361: LD_INT 22
24363: PUSH
24364: LD_INT 23
24366: PUSH
24367: LD_INT 24
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: ST_TO_ADDR
24376: GO 24627
24378: LD_INT 44
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24386
24384: GO 24412
24386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24387: LD_ADDR_VAR 0 3
24391: PUSH
24392: LD_INT 21
24394: PUSH
24395: LD_INT 22
24397: PUSH
24398: LD_INT 23
24400: PUSH
24401: LD_INT 24
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: ST_TO_ADDR
24410: GO 24627
24412: LD_INT 45
24414: DOUBLE
24415: EQUAL
24416: IFTRUE 24420
24418: GO 24446
24420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24421: LD_ADDR_VAR 0 3
24425: PUSH
24426: LD_INT 21
24428: PUSH
24429: LD_INT 22
24431: PUSH
24432: LD_INT 23
24434: PUSH
24435: LD_INT 24
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: ST_TO_ADDR
24444: GO 24627
24446: LD_INT 49
24448: DOUBLE
24449: EQUAL
24450: IFTRUE 24454
24452: GO 24480
24454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24455: LD_ADDR_VAR 0 3
24459: PUSH
24460: LD_INT 21
24462: PUSH
24463: LD_INT 22
24465: PUSH
24466: LD_INT 23
24468: PUSH
24469: LD_INT 24
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: ST_TO_ADDR
24478: GO 24627
24480: LD_INT 51
24482: DOUBLE
24483: EQUAL
24484: IFTRUE 24488
24486: GO 24514
24488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24489: LD_ADDR_VAR 0 3
24493: PUSH
24494: LD_INT 21
24496: PUSH
24497: LD_INT 22
24499: PUSH
24500: LD_INT 23
24502: PUSH
24503: LD_INT 24
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: ST_TO_ADDR
24512: GO 24627
24514: LD_INT 52
24516: DOUBLE
24517: EQUAL
24518: IFTRUE 24522
24520: GO 24548
24522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24523: LD_ADDR_VAR 0 3
24527: PUSH
24528: LD_INT 21
24530: PUSH
24531: LD_INT 22
24533: PUSH
24534: LD_INT 23
24536: PUSH
24537: LD_INT 24
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: ST_TO_ADDR
24546: GO 24627
24548: LD_INT 53
24550: DOUBLE
24551: EQUAL
24552: IFTRUE 24556
24554: GO 24574
24556: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24557: LD_ADDR_VAR 0 3
24561: PUSH
24562: LD_INT 23
24564: PUSH
24565: LD_INT 24
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: ST_TO_ADDR
24572: GO 24627
24574: LD_INT 46
24576: DOUBLE
24577: EQUAL
24578: IFTRUE 24582
24580: GO 24600
24582: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24583: LD_ADDR_VAR 0 3
24587: PUSH
24588: LD_INT 23
24590: PUSH
24591: LD_INT 24
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: ST_TO_ADDR
24598: GO 24627
24600: LD_INT 47
24602: DOUBLE
24603: EQUAL
24604: IFTRUE 24608
24606: GO 24626
24608: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24609: LD_ADDR_VAR 0 3
24613: PUSH
24614: LD_INT 23
24616: PUSH
24617: LD_INT 24
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: ST_TO_ADDR
24624: GO 24627
24626: POP
// result := ( chassis in result ) ;
24627: LD_ADDR_VAR 0 3
24631: PUSH
24632: LD_VAR 0 1
24636: PUSH
24637: LD_VAR 0 3
24641: IN
24642: ST_TO_ADDR
// end ;
24643: LD_VAR 0 3
24647: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24648: LD_INT 0
24650: PPUSH
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
24655: PPUSH
24656: PPUSH
// result := array ;
24657: LD_ADDR_VAR 0 5
24661: PUSH
24662: LD_VAR 0 1
24666: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24667: LD_VAR 0 1
24671: NOT
24672: PUSH
24673: LD_VAR 0 2
24677: NOT
24678: OR
24679: PUSH
24680: LD_VAR 0 3
24684: NOT
24685: OR
24686: PUSH
24687: LD_VAR 0 2
24691: PUSH
24692: LD_VAR 0 1
24696: GREATER
24697: OR
24698: PUSH
24699: LD_VAR 0 3
24703: PUSH
24704: LD_VAR 0 1
24708: GREATER
24709: OR
24710: IFFALSE 24714
// exit ;
24712: GO 25010
// if direction then
24714: LD_VAR 0 4
24718: IFFALSE 24782
// begin d := 1 ;
24720: LD_ADDR_VAR 0 9
24724: PUSH
24725: LD_INT 1
24727: ST_TO_ADDR
// if i_from > i_to then
24728: LD_VAR 0 2
24732: PUSH
24733: LD_VAR 0 3
24737: GREATER
24738: IFFALSE 24764
// length := ( array - i_from ) + i_to else
24740: LD_ADDR_VAR 0 11
24744: PUSH
24745: LD_VAR 0 1
24749: PUSH
24750: LD_VAR 0 2
24754: MINUS
24755: PUSH
24756: LD_VAR 0 3
24760: PLUS
24761: ST_TO_ADDR
24762: GO 24780
// length := i_to - i_from ;
24764: LD_ADDR_VAR 0 11
24768: PUSH
24769: LD_VAR 0 3
24773: PUSH
24774: LD_VAR 0 2
24778: MINUS
24779: ST_TO_ADDR
// end else
24780: GO 24843
// begin d := - 1 ;
24782: LD_ADDR_VAR 0 9
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: ST_TO_ADDR
// if i_from > i_to then
24791: LD_VAR 0 2
24795: PUSH
24796: LD_VAR 0 3
24800: GREATER
24801: IFFALSE 24821
// length := i_from - i_to else
24803: LD_ADDR_VAR 0 11
24807: PUSH
24808: LD_VAR 0 2
24812: PUSH
24813: LD_VAR 0 3
24817: MINUS
24818: ST_TO_ADDR
24819: GO 24843
// length := ( array - i_to ) + i_from ;
24821: LD_ADDR_VAR 0 11
24825: PUSH
24826: LD_VAR 0 1
24830: PUSH
24831: LD_VAR 0 3
24835: MINUS
24836: PUSH
24837: LD_VAR 0 2
24841: PLUS
24842: ST_TO_ADDR
// end ; if not length then
24843: LD_VAR 0 11
24847: NOT
24848: IFFALSE 24852
// exit ;
24850: GO 25010
// tmp := array ;
24852: LD_ADDR_VAR 0 10
24856: PUSH
24857: LD_VAR 0 1
24861: ST_TO_ADDR
// for i = 1 to length do
24862: LD_ADDR_VAR 0 6
24866: PUSH
24867: DOUBLE
24868: LD_INT 1
24870: DEC
24871: ST_TO_ADDR
24872: LD_VAR 0 11
24876: PUSH
24877: FOR_TO
24878: IFFALSE 24998
// begin for j = 1 to array do
24880: LD_ADDR_VAR 0 7
24884: PUSH
24885: DOUBLE
24886: LD_INT 1
24888: DEC
24889: ST_TO_ADDR
24890: LD_VAR 0 1
24894: PUSH
24895: FOR_TO
24896: IFFALSE 24984
// begin k := j + d ;
24898: LD_ADDR_VAR 0 8
24902: PUSH
24903: LD_VAR 0 7
24907: PUSH
24908: LD_VAR 0 9
24912: PLUS
24913: ST_TO_ADDR
// if k > array then
24914: LD_VAR 0 8
24918: PUSH
24919: LD_VAR 0 1
24923: GREATER
24924: IFFALSE 24934
// k := 1 ;
24926: LD_ADDR_VAR 0 8
24930: PUSH
24931: LD_INT 1
24933: ST_TO_ADDR
// if not k then
24934: LD_VAR 0 8
24938: NOT
24939: IFFALSE 24951
// k := array ;
24941: LD_ADDR_VAR 0 8
24945: PUSH
24946: LD_VAR 0 1
24950: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24951: LD_ADDR_VAR 0 10
24955: PUSH
24956: LD_VAR 0 10
24960: PPUSH
24961: LD_VAR 0 8
24965: PPUSH
24966: LD_VAR 0 1
24970: PUSH
24971: LD_VAR 0 7
24975: ARRAY
24976: PPUSH
24977: CALL_OW 1
24981: ST_TO_ADDR
// end ;
24982: GO 24895
24984: POP
24985: POP
// array := tmp ;
24986: LD_ADDR_VAR 0 1
24990: PUSH
24991: LD_VAR 0 10
24995: ST_TO_ADDR
// end ;
24996: GO 24877
24998: POP
24999: POP
// result := array ;
25000: LD_ADDR_VAR 0 5
25004: PUSH
25005: LD_VAR 0 1
25009: ST_TO_ADDR
// end ;
25010: LD_VAR 0 5
25014: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25015: LD_INT 0
25017: PPUSH
25018: PPUSH
// result := 0 ;
25019: LD_ADDR_VAR 0 3
25023: PUSH
25024: LD_INT 0
25026: ST_TO_ADDR
// if not array or not value in array then
25027: LD_VAR 0 1
25031: NOT
25032: PUSH
25033: LD_VAR 0 2
25037: PUSH
25038: LD_VAR 0 1
25042: IN
25043: NOT
25044: OR
25045: IFFALSE 25049
// exit ;
25047: GO 25103
// for i = 1 to array do
25049: LD_ADDR_VAR 0 4
25053: PUSH
25054: DOUBLE
25055: LD_INT 1
25057: DEC
25058: ST_TO_ADDR
25059: LD_VAR 0 1
25063: PUSH
25064: FOR_TO
25065: IFFALSE 25101
// if value = array [ i ] then
25067: LD_VAR 0 2
25071: PUSH
25072: LD_VAR 0 1
25076: PUSH
25077: LD_VAR 0 4
25081: ARRAY
25082: EQUAL
25083: IFFALSE 25099
// begin result := i ;
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: LD_VAR 0 4
25094: ST_TO_ADDR
// exit ;
25095: POP
25096: POP
25097: GO 25103
// end ;
25099: GO 25064
25101: POP
25102: POP
// end ;
25103: LD_VAR 0 3
25107: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25108: LD_INT 0
25110: PPUSH
// vc_chassis := chassis ;
25111: LD_ADDR_OWVAR 37
25115: PUSH
25116: LD_VAR 0 1
25120: ST_TO_ADDR
// vc_engine := engine ;
25121: LD_ADDR_OWVAR 39
25125: PUSH
25126: LD_VAR 0 2
25130: ST_TO_ADDR
// vc_control := control ;
25131: LD_ADDR_OWVAR 38
25135: PUSH
25136: LD_VAR 0 3
25140: ST_TO_ADDR
// vc_weapon := weapon ;
25141: LD_ADDR_OWVAR 40
25145: PUSH
25146: LD_VAR 0 4
25150: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25151: LD_ADDR_OWVAR 41
25155: PUSH
25156: LD_VAR 0 5
25160: ST_TO_ADDR
// end ;
25161: LD_VAR 0 6
25165: RET
// export function WantPlant ( unit ) ; var task ; begin
25166: LD_INT 0
25168: PPUSH
25169: PPUSH
// result := false ;
25170: LD_ADDR_VAR 0 2
25174: PUSH
25175: LD_INT 0
25177: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25178: LD_ADDR_VAR 0 3
25182: PUSH
25183: LD_VAR 0 1
25187: PPUSH
25188: CALL_OW 437
25192: ST_TO_ADDR
// if task then
25193: LD_VAR 0 3
25197: IFFALSE 25225
// if task [ 1 ] [ 1 ] = p then
25199: LD_VAR 0 3
25203: PUSH
25204: LD_INT 1
25206: ARRAY
25207: PUSH
25208: LD_INT 1
25210: ARRAY
25211: PUSH
25212: LD_STRING p
25214: EQUAL
25215: IFFALSE 25225
// result := true ;
25217: LD_ADDR_VAR 0 2
25221: PUSH
25222: LD_INT 1
25224: ST_TO_ADDR
// end ;
25225: LD_VAR 0 2
25229: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
// if pos < 1 then
25236: LD_VAR 0 2
25240: PUSH
25241: LD_INT 1
25243: LESS
25244: IFFALSE 25248
// exit ;
25246: GO 25551
// if pos = 1 then
25248: LD_VAR 0 2
25252: PUSH
25253: LD_INT 1
25255: EQUAL
25256: IFFALSE 25289
// result := Replace ( arr , pos [ 1 ] , value ) else
25258: LD_ADDR_VAR 0 4
25262: PUSH
25263: LD_VAR 0 1
25267: PPUSH
25268: LD_VAR 0 2
25272: PUSH
25273: LD_INT 1
25275: ARRAY
25276: PPUSH
25277: LD_VAR 0 3
25281: PPUSH
25282: CALL_OW 1
25286: ST_TO_ADDR
25287: GO 25551
// begin tmp := arr ;
25289: LD_ADDR_VAR 0 6
25293: PUSH
25294: LD_VAR 0 1
25298: ST_TO_ADDR
// s_arr := [ tmp ] ;
25299: LD_ADDR_VAR 0 7
25303: PUSH
25304: LD_VAR 0 6
25308: PUSH
25309: EMPTY
25310: LIST
25311: ST_TO_ADDR
// for i = 1 to pos - 1 do
25312: LD_ADDR_VAR 0 5
25316: PUSH
25317: DOUBLE
25318: LD_INT 1
25320: DEC
25321: ST_TO_ADDR
25322: LD_VAR 0 2
25326: PUSH
25327: LD_INT 1
25329: MINUS
25330: PUSH
25331: FOR_TO
25332: IFFALSE 25377
// begin tmp := tmp [ pos [ i ] ] ;
25334: LD_ADDR_VAR 0 6
25338: PUSH
25339: LD_VAR 0 6
25343: PUSH
25344: LD_VAR 0 2
25348: PUSH
25349: LD_VAR 0 5
25353: ARRAY
25354: ARRAY
25355: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25356: LD_ADDR_VAR 0 7
25360: PUSH
25361: LD_VAR 0 7
25365: PUSH
25366: LD_VAR 0 6
25370: PUSH
25371: EMPTY
25372: LIST
25373: ADD
25374: ST_TO_ADDR
// end ;
25375: GO 25331
25377: POP
25378: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25379: LD_ADDR_VAR 0 6
25383: PUSH
25384: LD_VAR 0 6
25388: PPUSH
25389: LD_VAR 0 2
25393: PUSH
25394: LD_VAR 0 2
25398: ARRAY
25399: PPUSH
25400: LD_VAR 0 3
25404: PPUSH
25405: CALL_OW 1
25409: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25410: LD_ADDR_VAR 0 7
25414: PUSH
25415: LD_VAR 0 7
25419: PPUSH
25420: LD_VAR 0 7
25424: PPUSH
25425: LD_VAR 0 6
25429: PPUSH
25430: CALL_OW 1
25434: ST_TO_ADDR
// for i = s_arr downto 2 do
25435: LD_ADDR_VAR 0 5
25439: PUSH
25440: DOUBLE
25441: LD_VAR 0 7
25445: INC
25446: ST_TO_ADDR
25447: LD_INT 2
25449: PUSH
25450: FOR_DOWNTO
25451: IFFALSE 25535
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25453: LD_ADDR_VAR 0 6
25457: PUSH
25458: LD_VAR 0 7
25462: PUSH
25463: LD_VAR 0 5
25467: PUSH
25468: LD_INT 1
25470: MINUS
25471: ARRAY
25472: PPUSH
25473: LD_VAR 0 2
25477: PUSH
25478: LD_VAR 0 5
25482: PUSH
25483: LD_INT 1
25485: MINUS
25486: ARRAY
25487: PPUSH
25488: LD_VAR 0 7
25492: PUSH
25493: LD_VAR 0 5
25497: ARRAY
25498: PPUSH
25499: CALL_OW 1
25503: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25504: LD_ADDR_VAR 0 7
25508: PUSH
25509: LD_VAR 0 7
25513: PPUSH
25514: LD_VAR 0 5
25518: PUSH
25519: LD_INT 1
25521: MINUS
25522: PPUSH
25523: LD_VAR 0 6
25527: PPUSH
25528: CALL_OW 1
25532: ST_TO_ADDR
// end ;
25533: GO 25450
25535: POP
25536: POP
// result := s_arr [ 1 ] ;
25537: LD_ADDR_VAR 0 4
25541: PUSH
25542: LD_VAR 0 7
25546: PUSH
25547: LD_INT 1
25549: ARRAY
25550: ST_TO_ADDR
// end ; end ;
25551: LD_VAR 0 4
25555: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25556: LD_INT 0
25558: PPUSH
25559: PPUSH
// if not list then
25560: LD_VAR 0 1
25564: NOT
25565: IFFALSE 25569
// exit ;
25567: GO 25660
// i := list [ pos1 ] ;
25569: LD_ADDR_VAR 0 5
25573: PUSH
25574: LD_VAR 0 1
25578: PUSH
25579: LD_VAR 0 2
25583: ARRAY
25584: ST_TO_ADDR
// if not i then
25585: LD_VAR 0 5
25589: NOT
25590: IFFALSE 25594
// exit ;
25592: GO 25660
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25594: LD_ADDR_VAR 0 1
25598: PUSH
25599: LD_VAR 0 1
25603: PPUSH
25604: LD_VAR 0 2
25608: PPUSH
25609: LD_VAR 0 1
25613: PUSH
25614: LD_VAR 0 3
25618: ARRAY
25619: PPUSH
25620: CALL_OW 1
25624: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25625: LD_ADDR_VAR 0 1
25629: PUSH
25630: LD_VAR 0 1
25634: PPUSH
25635: LD_VAR 0 3
25639: PPUSH
25640: LD_VAR 0 5
25644: PPUSH
25645: CALL_OW 1
25649: ST_TO_ADDR
// result := list ;
25650: LD_ADDR_VAR 0 4
25654: PUSH
25655: LD_VAR 0 1
25659: ST_TO_ADDR
// end ;
25660: LD_VAR 0 4
25664: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25665: LD_INT 0
25667: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25668: LD_ADDR_VAR 0 5
25672: PUSH
25673: LD_VAR 0 1
25677: PPUSH
25678: CALL_OW 250
25682: PPUSH
25683: LD_VAR 0 1
25687: PPUSH
25688: CALL_OW 251
25692: PPUSH
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_VAR 0 3
25702: PPUSH
25703: LD_VAR 0 4
25707: PPUSH
25708: CALL 25718 0 5
25712: ST_TO_ADDR
// end ;
25713: LD_VAR 0 5
25717: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25718: LD_INT 0
25720: PPUSH
25721: PPUSH
25722: PPUSH
25723: PPUSH
// if not list then
25724: LD_VAR 0 3
25728: NOT
25729: IFFALSE 25733
// exit ;
25731: GO 26121
// result := [ ] ;
25733: LD_ADDR_VAR 0 6
25737: PUSH
25738: EMPTY
25739: ST_TO_ADDR
// for i in list do
25740: LD_ADDR_VAR 0 7
25744: PUSH
25745: LD_VAR 0 3
25749: PUSH
25750: FOR_IN
25751: IFFALSE 25953
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25753: LD_ADDR_VAR 0 9
25757: PUSH
25758: LD_VAR 0 7
25762: PPUSH
25763: LD_VAR 0 1
25767: PPUSH
25768: LD_VAR 0 2
25772: PPUSH
25773: CALL_OW 297
25777: ST_TO_ADDR
// if not result then
25778: LD_VAR 0 6
25782: NOT
25783: IFFALSE 25809
// result := [ [ i , tmp ] ] else
25785: LD_ADDR_VAR 0 6
25789: PUSH
25790: LD_VAR 0 7
25794: PUSH
25795: LD_VAR 0 9
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: ST_TO_ADDR
25807: GO 25951
// begin if result [ result ] [ 2 ] < tmp then
25809: LD_VAR 0 6
25813: PUSH
25814: LD_VAR 0 6
25818: ARRAY
25819: PUSH
25820: LD_INT 2
25822: ARRAY
25823: PUSH
25824: LD_VAR 0 9
25828: LESS
25829: IFFALSE 25871
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25831: LD_ADDR_VAR 0 6
25835: PUSH
25836: LD_VAR 0 6
25840: PPUSH
25841: LD_VAR 0 6
25845: PUSH
25846: LD_INT 1
25848: PLUS
25849: PPUSH
25850: LD_VAR 0 7
25854: PUSH
25855: LD_VAR 0 9
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PPUSH
25864: CALL_OW 2
25868: ST_TO_ADDR
25869: GO 25951
// for j = 1 to result do
25871: LD_ADDR_VAR 0 8
25875: PUSH
25876: DOUBLE
25877: LD_INT 1
25879: DEC
25880: ST_TO_ADDR
25881: LD_VAR 0 6
25885: PUSH
25886: FOR_TO
25887: IFFALSE 25949
// begin if tmp < result [ j ] [ 2 ] then
25889: LD_VAR 0 9
25893: PUSH
25894: LD_VAR 0 6
25898: PUSH
25899: LD_VAR 0 8
25903: ARRAY
25904: PUSH
25905: LD_INT 2
25907: ARRAY
25908: LESS
25909: IFFALSE 25947
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25911: LD_ADDR_VAR 0 6
25915: PUSH
25916: LD_VAR 0 6
25920: PPUSH
25921: LD_VAR 0 8
25925: PPUSH
25926: LD_VAR 0 7
25930: PUSH
25931: LD_VAR 0 9
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PPUSH
25940: CALL_OW 2
25944: ST_TO_ADDR
// break ;
25945: GO 25949
// end ; end ;
25947: GO 25886
25949: POP
25950: POP
// end ; end ;
25951: GO 25750
25953: POP
25954: POP
// if result and not asc then
25955: LD_VAR 0 6
25959: PUSH
25960: LD_VAR 0 4
25964: NOT
25965: AND
25966: IFFALSE 26041
// begin tmp := result ;
25968: LD_ADDR_VAR 0 9
25972: PUSH
25973: LD_VAR 0 6
25977: ST_TO_ADDR
// for i = tmp downto 1 do
25978: LD_ADDR_VAR 0 7
25982: PUSH
25983: DOUBLE
25984: LD_VAR 0 9
25988: INC
25989: ST_TO_ADDR
25990: LD_INT 1
25992: PUSH
25993: FOR_DOWNTO
25994: IFFALSE 26039
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25996: LD_ADDR_VAR 0 6
26000: PUSH
26001: LD_VAR 0 6
26005: PPUSH
26006: LD_VAR 0 9
26010: PUSH
26011: LD_VAR 0 7
26015: MINUS
26016: PUSH
26017: LD_INT 1
26019: PLUS
26020: PPUSH
26021: LD_VAR 0 9
26025: PUSH
26026: LD_VAR 0 7
26030: ARRAY
26031: PPUSH
26032: CALL_OW 1
26036: ST_TO_ADDR
26037: GO 25993
26039: POP
26040: POP
// end ; tmp := [ ] ;
26041: LD_ADDR_VAR 0 9
26045: PUSH
26046: EMPTY
26047: ST_TO_ADDR
// if mode then
26048: LD_VAR 0 5
26052: IFFALSE 26121
// begin for i = 1 to result do
26054: LD_ADDR_VAR 0 7
26058: PUSH
26059: DOUBLE
26060: LD_INT 1
26062: DEC
26063: ST_TO_ADDR
26064: LD_VAR 0 6
26068: PUSH
26069: FOR_TO
26070: IFFALSE 26109
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26072: LD_ADDR_VAR 0 9
26076: PUSH
26077: LD_VAR 0 9
26081: PPUSH
26082: LD_VAR 0 7
26086: PPUSH
26087: LD_VAR 0 6
26091: PUSH
26092: LD_VAR 0 7
26096: ARRAY
26097: PUSH
26098: LD_INT 1
26100: ARRAY
26101: PPUSH
26102: CALL_OW 1
26106: ST_TO_ADDR
26107: GO 26069
26109: POP
26110: POP
// result := tmp ;
26111: LD_ADDR_VAR 0 6
26115: PUSH
26116: LD_VAR 0 9
26120: ST_TO_ADDR
// end ; end ;
26121: LD_VAR 0 6
26125: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26126: LD_INT 0
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
26132: PPUSH
26133: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26134: LD_ADDR_VAR 0 5
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: EMPTY
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: ST_TO_ADDR
// if not x or not y then
26156: LD_VAR 0 2
26160: NOT
26161: PUSH
26162: LD_VAR 0 3
26166: NOT
26167: OR
26168: IFFALSE 26172
// exit ;
26170: GO 27822
// if not range then
26172: LD_VAR 0 4
26176: NOT
26177: IFFALSE 26187
// range := 10 ;
26179: LD_ADDR_VAR 0 4
26183: PUSH
26184: LD_INT 10
26186: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26187: LD_ADDR_VAR 0 8
26191: PUSH
26192: LD_INT 81
26194: PUSH
26195: LD_VAR 0 1
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 92
26206: PUSH
26207: LD_VAR 0 2
26211: PUSH
26212: LD_VAR 0 3
26216: PUSH
26217: LD_VAR 0 4
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 3
26230: PUSH
26231: LD_INT 21
26233: PUSH
26234: LD_INT 3
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 69
26254: ST_TO_ADDR
// if not tmp then
26255: LD_VAR 0 8
26259: NOT
26260: IFFALSE 26264
// exit ;
26262: GO 27822
// for i in tmp do
26264: LD_ADDR_VAR 0 6
26268: PUSH
26269: LD_VAR 0 8
26273: PUSH
26274: FOR_IN
26275: IFFALSE 27797
// begin points := [ 0 , 0 , 0 ] ;
26277: LD_ADDR_VAR 0 9
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: LIST
26295: ST_TO_ADDR
// bpoints := 1 ;
26296: LD_ADDR_VAR 0 10
26300: PUSH
26301: LD_INT 1
26303: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26304: LD_VAR 0 6
26308: PPUSH
26309: CALL_OW 247
26313: PUSH
26314: LD_INT 1
26316: DOUBLE
26317: EQUAL
26318: IFTRUE 26322
26320: GO 26900
26322: POP
// begin if GetClass ( i ) = 1 then
26323: LD_VAR 0 6
26327: PPUSH
26328: CALL_OW 257
26332: PUSH
26333: LD_INT 1
26335: EQUAL
26336: IFFALSE 26357
// points := [ 10 , 5 , 3 ] ;
26338: LD_ADDR_VAR 0 9
26342: PUSH
26343: LD_INT 10
26345: PUSH
26346: LD_INT 5
26348: PUSH
26349: LD_INT 3
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: LIST
26356: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26357: LD_VAR 0 6
26361: PPUSH
26362: CALL_OW 257
26366: PUSH
26367: LD_INT 2
26369: PUSH
26370: LD_INT 3
26372: PUSH
26373: LD_INT 4
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: IN
26381: IFFALSE 26402
// points := [ 3 , 2 , 1 ] ;
26383: LD_ADDR_VAR 0 9
26387: PUSH
26388: LD_INT 3
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26402: LD_VAR 0 6
26406: PPUSH
26407: CALL_OW 257
26411: PUSH
26412: LD_INT 5
26414: EQUAL
26415: IFFALSE 26436
// points := [ 130 , 5 , 2 ] ;
26417: LD_ADDR_VAR 0 9
26421: PUSH
26422: LD_INT 130
26424: PUSH
26425: LD_INT 5
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26436: LD_VAR 0 6
26440: PPUSH
26441: CALL_OW 257
26445: PUSH
26446: LD_INT 8
26448: EQUAL
26449: IFFALSE 26470
// points := [ 35 , 35 , 30 ] ;
26451: LD_ADDR_VAR 0 9
26455: PUSH
26456: LD_INT 35
26458: PUSH
26459: LD_INT 35
26461: PUSH
26462: LD_INT 30
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26470: LD_VAR 0 6
26474: PPUSH
26475: CALL_OW 257
26479: PUSH
26480: LD_INT 9
26482: EQUAL
26483: IFFALSE 26504
// points := [ 20 , 55 , 40 ] ;
26485: LD_ADDR_VAR 0 9
26489: PUSH
26490: LD_INT 20
26492: PUSH
26493: LD_INT 55
26495: PUSH
26496: LD_INT 40
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: LIST
26503: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26504: LD_VAR 0 6
26508: PPUSH
26509: CALL_OW 257
26513: PUSH
26514: LD_INT 12
26516: PUSH
26517: LD_INT 16
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: IN
26524: IFFALSE 26545
// points := [ 5 , 3 , 2 ] ;
26526: LD_ADDR_VAR 0 9
26530: PUSH
26531: LD_INT 5
26533: PUSH
26534: LD_INT 3
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26545: LD_VAR 0 6
26549: PPUSH
26550: CALL_OW 257
26554: PUSH
26555: LD_INT 17
26557: EQUAL
26558: IFFALSE 26579
// points := [ 100 , 50 , 75 ] ;
26560: LD_ADDR_VAR 0 9
26564: PUSH
26565: LD_INT 100
26567: PUSH
26568: LD_INT 50
26570: PUSH
26571: LD_INT 75
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: LIST
26578: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26579: LD_VAR 0 6
26583: PPUSH
26584: CALL_OW 257
26588: PUSH
26589: LD_INT 15
26591: EQUAL
26592: IFFALSE 26613
// points := [ 10 , 5 , 3 ] ;
26594: LD_ADDR_VAR 0 9
26598: PUSH
26599: LD_INT 10
26601: PUSH
26602: LD_INT 5
26604: PUSH
26605: LD_INT 3
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26613: LD_VAR 0 6
26617: PPUSH
26618: CALL_OW 257
26622: PUSH
26623: LD_INT 14
26625: EQUAL
26626: IFFALSE 26647
// points := [ 10 , 0 , 0 ] ;
26628: LD_ADDR_VAR 0 9
26632: PUSH
26633: LD_INT 10
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26647: LD_VAR 0 6
26651: PPUSH
26652: CALL_OW 257
26656: PUSH
26657: LD_INT 11
26659: EQUAL
26660: IFFALSE 26681
// points := [ 30 , 10 , 5 ] ;
26662: LD_ADDR_VAR 0 9
26666: PUSH
26667: LD_INT 30
26669: PUSH
26670: LD_INT 10
26672: PUSH
26673: LD_INT 5
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: LIST
26680: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26681: LD_VAR 0 1
26685: PPUSH
26686: LD_INT 5
26688: PPUSH
26689: CALL_OW 321
26693: PUSH
26694: LD_INT 2
26696: EQUAL
26697: IFFALSE 26714
// bpoints := bpoints * 1.8 ;
26699: LD_ADDR_VAR 0 10
26703: PUSH
26704: LD_VAR 0 10
26708: PUSH
26709: LD_REAL  1.80000000000000E+0000
26712: MUL
26713: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26714: LD_VAR 0 6
26718: PPUSH
26719: CALL_OW 257
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: LD_INT 3
26732: PUSH
26733: LD_INT 4
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: IN
26742: PUSH
26743: LD_VAR 0 1
26747: PPUSH
26748: LD_INT 51
26750: PPUSH
26751: CALL_OW 321
26755: PUSH
26756: LD_INT 2
26758: EQUAL
26759: AND
26760: IFFALSE 26777
// bpoints := bpoints * 1.2 ;
26762: LD_ADDR_VAR 0 10
26766: PUSH
26767: LD_VAR 0 10
26771: PUSH
26772: LD_REAL  1.20000000000000E+0000
26775: MUL
26776: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26777: LD_VAR 0 6
26781: PPUSH
26782: CALL_OW 257
26786: PUSH
26787: LD_INT 5
26789: PUSH
26790: LD_INT 7
26792: PUSH
26793: LD_INT 9
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: IN
26801: PUSH
26802: LD_VAR 0 1
26806: PPUSH
26807: LD_INT 52
26809: PPUSH
26810: CALL_OW 321
26814: PUSH
26815: LD_INT 2
26817: EQUAL
26818: AND
26819: IFFALSE 26836
// bpoints := bpoints * 1.5 ;
26821: LD_ADDR_VAR 0 10
26825: PUSH
26826: LD_VAR 0 10
26830: PUSH
26831: LD_REAL  1.50000000000000E+0000
26834: MUL
26835: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26836: LD_VAR 0 1
26840: PPUSH
26841: LD_INT 66
26843: PPUSH
26844: CALL_OW 321
26848: PUSH
26849: LD_INT 2
26851: EQUAL
26852: IFFALSE 26869
// bpoints := bpoints * 1.1 ;
26854: LD_ADDR_VAR 0 10
26858: PUSH
26859: LD_VAR 0 10
26863: PUSH
26864: LD_REAL  1.10000000000000E+0000
26867: MUL
26868: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26869: LD_ADDR_VAR 0 10
26873: PUSH
26874: LD_VAR 0 10
26878: PUSH
26879: LD_VAR 0 6
26883: PPUSH
26884: LD_INT 1
26886: PPUSH
26887: CALL_OW 259
26891: PUSH
26892: LD_REAL  1.15000000000000E+0000
26895: MUL
26896: MUL
26897: ST_TO_ADDR
// end ; unit_vehicle :
26898: GO 27726
26900: LD_INT 2
26902: DOUBLE
26903: EQUAL
26904: IFTRUE 26908
26906: GO 27714
26908: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26909: LD_VAR 0 6
26913: PPUSH
26914: CALL_OW 264
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: LD_INT 42
26924: PUSH
26925: LD_INT 24
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: IN
26933: IFFALSE 26954
// points := [ 25 , 5 , 3 ] ;
26935: LD_ADDR_VAR 0 9
26939: PUSH
26940: LD_INT 25
26942: PUSH
26943: LD_INT 5
26945: PUSH
26946: LD_INT 3
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26954: LD_VAR 0 6
26958: PPUSH
26959: CALL_OW 264
26963: PUSH
26964: LD_INT 4
26966: PUSH
26967: LD_INT 43
26969: PUSH
26970: LD_INT 25
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: LIST
26977: IN
26978: IFFALSE 26999
// points := [ 40 , 15 , 5 ] ;
26980: LD_ADDR_VAR 0 9
26984: PUSH
26985: LD_INT 40
26987: PUSH
26988: LD_INT 15
26990: PUSH
26991: LD_INT 5
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: LIST
26998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26999: LD_VAR 0 6
27003: PPUSH
27004: CALL_OW 264
27008: PUSH
27009: LD_INT 3
27011: PUSH
27012: LD_INT 23
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: IN
27019: IFFALSE 27040
// points := [ 7 , 25 , 8 ] ;
27021: LD_ADDR_VAR 0 9
27025: PUSH
27026: LD_INT 7
27028: PUSH
27029: LD_INT 25
27031: PUSH
27032: LD_INT 8
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27040: LD_VAR 0 6
27044: PPUSH
27045: CALL_OW 264
27049: PUSH
27050: LD_INT 5
27052: PUSH
27053: LD_INT 27
27055: PUSH
27056: LD_INT 44
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: LIST
27063: IN
27064: IFFALSE 27085
// points := [ 14 , 50 , 16 ] ;
27066: LD_ADDR_VAR 0 9
27070: PUSH
27071: LD_INT 14
27073: PUSH
27074: LD_INT 50
27076: PUSH
27077: LD_INT 16
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: LIST
27084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27085: LD_VAR 0 6
27089: PPUSH
27090: CALL_OW 264
27094: PUSH
27095: LD_INT 6
27097: PUSH
27098: LD_INT 46
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: IN
27105: IFFALSE 27126
// points := [ 32 , 120 , 70 ] ;
27107: LD_ADDR_VAR 0 9
27111: PUSH
27112: LD_INT 32
27114: PUSH
27115: LD_INT 120
27117: PUSH
27118: LD_INT 70
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27126: LD_VAR 0 6
27130: PPUSH
27131: CALL_OW 264
27135: PUSH
27136: LD_INT 7
27138: PUSH
27139: LD_INT 28
27141: PUSH
27142: LD_INT 45
27144: PUSH
27145: LD_INT 92
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: IN
27154: IFFALSE 27175
// points := [ 35 , 20 , 45 ] ;
27156: LD_ADDR_VAR 0 9
27160: PUSH
27161: LD_INT 35
27163: PUSH
27164: LD_INT 20
27166: PUSH
27167: LD_INT 45
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27175: LD_VAR 0 6
27179: PPUSH
27180: CALL_OW 264
27184: PUSH
27185: LD_INT 47
27187: PUSH
27188: EMPTY
27189: LIST
27190: IN
27191: IFFALSE 27212
// points := [ 67 , 45 , 75 ] ;
27193: LD_ADDR_VAR 0 9
27197: PUSH
27198: LD_INT 67
27200: PUSH
27201: LD_INT 45
27203: PUSH
27204: LD_INT 75
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: LIST
27211: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27212: LD_VAR 0 6
27216: PPUSH
27217: CALL_OW 264
27221: PUSH
27222: LD_INT 26
27224: PUSH
27225: EMPTY
27226: LIST
27227: IN
27228: IFFALSE 27249
// points := [ 120 , 30 , 80 ] ;
27230: LD_ADDR_VAR 0 9
27234: PUSH
27235: LD_INT 120
27237: PUSH
27238: LD_INT 30
27240: PUSH
27241: LD_INT 80
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27249: LD_VAR 0 6
27253: PPUSH
27254: CALL_OW 264
27258: PUSH
27259: LD_INT 22
27261: PUSH
27262: EMPTY
27263: LIST
27264: IN
27265: IFFALSE 27286
// points := [ 40 , 1 , 1 ] ;
27267: LD_ADDR_VAR 0 9
27271: PUSH
27272: LD_INT 40
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27286: LD_VAR 0 6
27290: PPUSH
27291: CALL_OW 264
27295: PUSH
27296: LD_INT 29
27298: PUSH
27299: EMPTY
27300: LIST
27301: IN
27302: IFFALSE 27323
// points := [ 70 , 200 , 400 ] ;
27304: LD_ADDR_VAR 0 9
27308: PUSH
27309: LD_INT 70
27311: PUSH
27312: LD_INT 200
27314: PUSH
27315: LD_INT 400
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27323: LD_VAR 0 6
27327: PPUSH
27328: CALL_OW 264
27332: PUSH
27333: LD_INT 14
27335: PUSH
27336: LD_INT 53
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: IN
27343: IFFALSE 27364
// points := [ 40 , 10 , 20 ] ;
27345: LD_ADDR_VAR 0 9
27349: PUSH
27350: LD_INT 40
27352: PUSH
27353: LD_INT 10
27355: PUSH
27356: LD_INT 20
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27364: LD_VAR 0 6
27368: PPUSH
27369: CALL_OW 264
27373: PUSH
27374: LD_INT 9
27376: PUSH
27377: EMPTY
27378: LIST
27379: IN
27380: IFFALSE 27401
// points := [ 5 , 70 , 20 ] ;
27382: LD_ADDR_VAR 0 9
27386: PUSH
27387: LD_INT 5
27389: PUSH
27390: LD_INT 70
27392: PUSH
27393: LD_INT 20
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27401: LD_VAR 0 6
27405: PPUSH
27406: CALL_OW 264
27410: PUSH
27411: LD_INT 10
27413: PUSH
27414: EMPTY
27415: LIST
27416: IN
27417: IFFALSE 27438
// points := [ 35 , 110 , 70 ] ;
27419: LD_ADDR_VAR 0 9
27423: PUSH
27424: LD_INT 35
27426: PUSH
27427: LD_INT 110
27429: PUSH
27430: LD_INT 70
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: LIST
27437: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27438: LD_VAR 0 6
27442: PPUSH
27443: CALL_OW 265
27447: PUSH
27448: LD_INT 25
27450: EQUAL
27451: IFFALSE 27472
// points := [ 80 , 65 , 100 ] ;
27453: LD_ADDR_VAR 0 9
27457: PUSH
27458: LD_INT 80
27460: PUSH
27461: LD_INT 65
27463: PUSH
27464: LD_INT 100
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: LIST
27471: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27472: LD_VAR 0 6
27476: PPUSH
27477: CALL_OW 263
27481: PUSH
27482: LD_INT 1
27484: EQUAL
27485: IFFALSE 27520
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27487: LD_ADDR_VAR 0 10
27491: PUSH
27492: LD_VAR 0 10
27496: PUSH
27497: LD_VAR 0 6
27501: PPUSH
27502: CALL_OW 311
27506: PPUSH
27507: LD_INT 3
27509: PPUSH
27510: CALL_OW 259
27514: PUSH
27515: LD_INT 4
27517: MUL
27518: MUL
27519: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27520: LD_VAR 0 6
27524: PPUSH
27525: CALL_OW 263
27529: PUSH
27530: LD_INT 2
27532: EQUAL
27533: IFFALSE 27584
// begin j := IsControledBy ( i ) ;
27535: LD_ADDR_VAR 0 7
27539: PUSH
27540: LD_VAR 0 6
27544: PPUSH
27545: CALL_OW 312
27549: ST_TO_ADDR
// if j then
27550: LD_VAR 0 7
27554: IFFALSE 27584
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27556: LD_ADDR_VAR 0 10
27560: PUSH
27561: LD_VAR 0 10
27565: PUSH
27566: LD_VAR 0 7
27570: PPUSH
27571: LD_INT 3
27573: PPUSH
27574: CALL_OW 259
27578: PUSH
27579: LD_INT 3
27581: MUL
27582: MUL
27583: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27584: LD_VAR 0 6
27588: PPUSH
27589: CALL_OW 264
27593: PUSH
27594: LD_INT 5
27596: PUSH
27597: LD_INT 6
27599: PUSH
27600: LD_INT 46
27602: PUSH
27603: LD_INT 44
27605: PUSH
27606: LD_INT 47
27608: PUSH
27609: LD_INT 45
27611: PUSH
27612: LD_INT 28
27614: PUSH
27615: LD_INT 7
27617: PUSH
27618: LD_INT 27
27620: PUSH
27621: LD_INT 29
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: IN
27636: PUSH
27637: LD_VAR 0 1
27641: PPUSH
27642: LD_INT 52
27644: PPUSH
27645: CALL_OW 321
27649: PUSH
27650: LD_INT 2
27652: EQUAL
27653: AND
27654: IFFALSE 27671
// bpoints := bpoints * 1.2 ;
27656: LD_ADDR_VAR 0 10
27660: PUSH
27661: LD_VAR 0 10
27665: PUSH
27666: LD_REAL  1.20000000000000E+0000
27669: MUL
27670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27671: LD_VAR 0 6
27675: PPUSH
27676: CALL_OW 264
27680: PUSH
27681: LD_INT 6
27683: PUSH
27684: LD_INT 46
27686: PUSH
27687: LD_INT 47
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: IN
27695: IFFALSE 27712
// bpoints := bpoints * 1.2 ;
27697: LD_ADDR_VAR 0 10
27701: PUSH
27702: LD_VAR 0 10
27706: PUSH
27707: LD_REAL  1.20000000000000E+0000
27710: MUL
27711: ST_TO_ADDR
// end ; unit_building :
27712: GO 27726
27714: LD_INT 3
27716: DOUBLE
27717: EQUAL
27718: IFTRUE 27722
27720: GO 27725
27722: POP
// ; end ;
27723: GO 27726
27725: POP
// for j = 1 to 3 do
27726: LD_ADDR_VAR 0 7
27730: PUSH
27731: DOUBLE
27732: LD_INT 1
27734: DEC
27735: ST_TO_ADDR
27736: LD_INT 3
27738: PUSH
27739: FOR_TO
27740: IFFALSE 27793
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27742: LD_ADDR_VAR 0 5
27746: PUSH
27747: LD_VAR 0 5
27751: PPUSH
27752: LD_VAR 0 7
27756: PPUSH
27757: LD_VAR 0 5
27761: PUSH
27762: LD_VAR 0 7
27766: ARRAY
27767: PUSH
27768: LD_VAR 0 9
27772: PUSH
27773: LD_VAR 0 7
27777: ARRAY
27778: PUSH
27779: LD_VAR 0 10
27783: MUL
27784: PLUS
27785: PPUSH
27786: CALL_OW 1
27790: ST_TO_ADDR
27791: GO 27739
27793: POP
27794: POP
// end ;
27795: GO 26274
27797: POP
27798: POP
// result := Replace ( result , 4 , tmp ) ;
27799: LD_ADDR_VAR 0 5
27803: PUSH
27804: LD_VAR 0 5
27808: PPUSH
27809: LD_INT 4
27811: PPUSH
27812: LD_VAR 0 8
27816: PPUSH
27817: CALL_OW 1
27821: ST_TO_ADDR
// end ;
27822: LD_VAR 0 5
27826: RET
// export function DangerAtRange ( unit , range ) ; begin
27827: LD_INT 0
27829: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL_OW 255
27844: PPUSH
27845: LD_VAR 0 1
27849: PPUSH
27850: CALL_OW 250
27854: PPUSH
27855: LD_VAR 0 1
27859: PPUSH
27860: CALL_OW 251
27864: PPUSH
27865: LD_VAR 0 2
27869: PPUSH
27870: CALL 26126 0 4
27874: ST_TO_ADDR
// end ;
27875: LD_VAR 0 3
27879: RET
// export function DangerInArea ( side , area ) ; begin
27880: LD_INT 0
27882: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_VAR 0 2
27892: PPUSH
27893: LD_INT 81
27895: PUSH
27896: LD_VAR 0 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PPUSH
27905: CALL_OW 70
27909: ST_TO_ADDR
// end ;
27910: LD_VAR 0 3
27914: RET
// export function IsExtension ( b ) ; begin
27915: LD_INT 0
27917: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27918: LD_ADDR_VAR 0 2
27922: PUSH
27923: LD_VAR 0 1
27927: PUSH
27928: LD_INT 23
27930: PUSH
27931: LD_INT 20
27933: PUSH
27934: LD_INT 22
27936: PUSH
27937: LD_INT 17
27939: PUSH
27940: LD_INT 24
27942: PUSH
27943: LD_INT 21
27945: PUSH
27946: LD_INT 19
27948: PUSH
27949: LD_INT 16
27951: PUSH
27952: LD_INT 25
27954: PUSH
27955: LD_INT 18
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: IN
27970: ST_TO_ADDR
// end ;
27971: LD_VAR 0 2
27975: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27976: LD_INT 0
27978: PPUSH
27979: PPUSH
27980: PPUSH
// result := [ ] ;
27981: LD_ADDR_VAR 0 4
27985: PUSH
27986: EMPTY
27987: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27988: LD_ADDR_VAR 0 5
27992: PUSH
27993: LD_VAR 0 2
27997: PPUSH
27998: LD_INT 21
28000: PUSH
28001: LD_INT 3
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PPUSH
28008: CALL_OW 70
28012: ST_TO_ADDR
// if not tmp then
28013: LD_VAR 0 5
28017: NOT
28018: IFFALSE 28022
// exit ;
28020: GO 28086
// if checkLink then
28022: LD_VAR 0 3
28026: IFFALSE 28076
// begin for i in tmp do
28028: LD_ADDR_VAR 0 6
28032: PUSH
28033: LD_VAR 0 5
28037: PUSH
28038: FOR_IN
28039: IFFALSE 28074
// if GetBase ( i ) <> base then
28041: LD_VAR 0 6
28045: PPUSH
28046: CALL_OW 274
28050: PUSH
28051: LD_VAR 0 1
28055: NONEQUAL
28056: IFFALSE 28072
// ComLinkToBase ( base , i ) ;
28058: LD_VAR 0 1
28062: PPUSH
28063: LD_VAR 0 6
28067: PPUSH
28068: CALL_OW 169
28072: GO 28038
28074: POP
28075: POP
// end ; result := tmp ;
28076: LD_ADDR_VAR 0 4
28080: PUSH
28081: LD_VAR 0 5
28085: ST_TO_ADDR
// end ;
28086: LD_VAR 0 4
28090: RET
// export function ComComplete ( units , b ) ; var i ; begin
28091: LD_INT 0
28093: PPUSH
28094: PPUSH
// if not units then
28095: LD_VAR 0 1
28099: NOT
28100: IFFALSE 28104
// exit ;
28102: GO 28194
// for i in units do
28104: LD_ADDR_VAR 0 4
28108: PUSH
28109: LD_VAR 0 1
28113: PUSH
28114: FOR_IN
28115: IFFALSE 28192
// if BuildingStatus ( b ) = bs_build then
28117: LD_VAR 0 2
28121: PPUSH
28122: CALL_OW 461
28126: PUSH
28127: LD_INT 1
28129: EQUAL
28130: IFFALSE 28190
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28132: LD_VAR 0 4
28136: PPUSH
28137: LD_STRING h
28139: PUSH
28140: LD_VAR 0 2
28144: PPUSH
28145: CALL_OW 250
28149: PUSH
28150: LD_VAR 0 2
28154: PPUSH
28155: CALL_OW 251
28159: PUSH
28160: LD_VAR 0 2
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: PPUSH
28186: CALL_OW 446
28190: GO 28114
28192: POP
28193: POP
// end ;
28194: LD_VAR 0 3
28198: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28199: LD_INT 0
28201: PPUSH
28202: PPUSH
28203: PPUSH
28204: PPUSH
28205: PPUSH
28206: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28207: LD_VAR 0 1
28211: NOT
28212: PUSH
28213: LD_VAR 0 1
28217: PPUSH
28218: CALL_OW 263
28222: PUSH
28223: LD_INT 2
28225: NONEQUAL
28226: OR
28227: IFFALSE 28231
// exit ;
28229: GO 28547
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28231: LD_ADDR_VAR 0 6
28235: PUSH
28236: LD_INT 22
28238: PUSH
28239: LD_VAR 0 1
28243: PPUSH
28244: CALL_OW 255
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: PUSH
28256: LD_INT 30
28258: PUSH
28259: LD_INT 36
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 34
28268: PUSH
28269: LD_INT 31
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PPUSH
28285: CALL_OW 69
28289: ST_TO_ADDR
// if not tmp then
28290: LD_VAR 0 6
28294: NOT
28295: IFFALSE 28299
// exit ;
28297: GO 28547
// result := [ ] ;
28299: LD_ADDR_VAR 0 2
28303: PUSH
28304: EMPTY
28305: ST_TO_ADDR
// for i in tmp do
28306: LD_ADDR_VAR 0 3
28310: PUSH
28311: LD_VAR 0 6
28315: PUSH
28316: FOR_IN
28317: IFFALSE 28388
// begin t := UnitsInside ( i ) ;
28319: LD_ADDR_VAR 0 4
28323: PUSH
28324: LD_VAR 0 3
28328: PPUSH
28329: CALL_OW 313
28333: ST_TO_ADDR
// if t then
28334: LD_VAR 0 4
28338: IFFALSE 28386
// for j in t do
28340: LD_ADDR_VAR 0 7
28344: PUSH
28345: LD_VAR 0 4
28349: PUSH
28350: FOR_IN
28351: IFFALSE 28384
// result := Replace ( result , result + 1 , j ) ;
28353: LD_ADDR_VAR 0 2
28357: PUSH
28358: LD_VAR 0 2
28362: PPUSH
28363: LD_VAR 0 2
28367: PUSH
28368: LD_INT 1
28370: PLUS
28371: PPUSH
28372: LD_VAR 0 7
28376: PPUSH
28377: CALL_OW 1
28381: ST_TO_ADDR
28382: GO 28350
28384: POP
28385: POP
// end ;
28386: GO 28316
28388: POP
28389: POP
// if not result then
28390: LD_VAR 0 2
28394: NOT
28395: IFFALSE 28399
// exit ;
28397: GO 28547
// mech := result [ 1 ] ;
28399: LD_ADDR_VAR 0 5
28403: PUSH
28404: LD_VAR 0 2
28408: PUSH
28409: LD_INT 1
28411: ARRAY
28412: ST_TO_ADDR
// if result > 1 then
28413: LD_VAR 0 2
28417: PUSH
28418: LD_INT 1
28420: GREATER
28421: IFFALSE 28533
// begin for i = 2 to result do
28423: LD_ADDR_VAR 0 3
28427: PUSH
28428: DOUBLE
28429: LD_INT 2
28431: DEC
28432: ST_TO_ADDR
28433: LD_VAR 0 2
28437: PUSH
28438: FOR_TO
28439: IFFALSE 28531
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28441: LD_ADDR_VAR 0 4
28445: PUSH
28446: LD_VAR 0 2
28450: PUSH
28451: LD_VAR 0 3
28455: ARRAY
28456: PPUSH
28457: LD_INT 3
28459: PPUSH
28460: CALL_OW 259
28464: PUSH
28465: LD_VAR 0 2
28469: PUSH
28470: LD_VAR 0 3
28474: ARRAY
28475: PPUSH
28476: CALL_OW 432
28480: MINUS
28481: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28482: LD_VAR 0 4
28486: PUSH
28487: LD_VAR 0 5
28491: PPUSH
28492: LD_INT 3
28494: PPUSH
28495: CALL_OW 259
28499: PUSH
28500: LD_VAR 0 5
28504: PPUSH
28505: CALL_OW 432
28509: MINUS
28510: GREATEREQUAL
28511: IFFALSE 28529
// mech := result [ i ] ;
28513: LD_ADDR_VAR 0 5
28517: PUSH
28518: LD_VAR 0 2
28522: PUSH
28523: LD_VAR 0 3
28527: ARRAY
28528: ST_TO_ADDR
// end ;
28529: GO 28438
28531: POP
28532: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28533: LD_VAR 0 1
28537: PPUSH
28538: LD_VAR 0 5
28542: PPUSH
28543: CALL_OW 135
// end ;
28547: LD_VAR 0 2
28551: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28552: LD_INT 0
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
28565: PPUSH
28566: PPUSH
// result := [ ] ;
28567: LD_ADDR_VAR 0 7
28571: PUSH
28572: EMPTY
28573: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28574: LD_VAR 0 1
28578: PPUSH
28579: CALL_OW 266
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: IN
28594: NOT
28595: IFFALSE 28599
// exit ;
28597: GO 30233
// if name then
28599: LD_VAR 0 3
28603: IFFALSE 28619
// SetBName ( base_dep , name ) ;
28605: LD_VAR 0 1
28609: PPUSH
28610: LD_VAR 0 3
28614: PPUSH
28615: CALL_OW 500
// base := GetBase ( base_dep ) ;
28619: LD_ADDR_VAR 0 15
28623: PUSH
28624: LD_VAR 0 1
28628: PPUSH
28629: CALL_OW 274
28633: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28634: LD_ADDR_VAR 0 16
28638: PUSH
28639: LD_VAR 0 1
28643: PPUSH
28644: CALL_OW 255
28648: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28649: LD_ADDR_VAR 0 17
28653: PUSH
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 248
28663: ST_TO_ADDR
// if sources then
28664: LD_VAR 0 5
28668: IFFALSE 28715
// for i = 1 to 3 do
28670: LD_ADDR_VAR 0 8
28674: PUSH
28675: DOUBLE
28676: LD_INT 1
28678: DEC
28679: ST_TO_ADDR
28680: LD_INT 3
28682: PUSH
28683: FOR_TO
28684: IFFALSE 28713
// AddResourceType ( base , i , sources [ i ] ) ;
28686: LD_VAR 0 15
28690: PPUSH
28691: LD_VAR 0 8
28695: PPUSH
28696: LD_VAR 0 5
28700: PUSH
28701: LD_VAR 0 8
28705: ARRAY
28706: PPUSH
28707: CALL_OW 276
28711: GO 28683
28713: POP
28714: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28715: LD_ADDR_VAR 0 18
28719: PUSH
28720: LD_VAR 0 15
28724: PPUSH
28725: LD_VAR 0 2
28729: PPUSH
28730: LD_INT 1
28732: PPUSH
28733: CALL 27976 0 3
28737: ST_TO_ADDR
// InitHc ;
28738: CALL_OW 19
// InitUc ;
28742: CALL_OW 18
// uc_side := side ;
28746: LD_ADDR_OWVAR 20
28750: PUSH
28751: LD_VAR 0 16
28755: ST_TO_ADDR
// uc_nation := nation ;
28756: LD_ADDR_OWVAR 21
28760: PUSH
28761: LD_VAR 0 17
28765: ST_TO_ADDR
// if buildings then
28766: LD_VAR 0 18
28770: IFFALSE 30092
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28772: LD_ADDR_VAR 0 19
28776: PUSH
28777: LD_VAR 0 18
28781: PPUSH
28782: LD_INT 2
28784: PUSH
28785: LD_INT 30
28787: PUSH
28788: LD_INT 29
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 30
28797: PUSH
28798: LD_INT 30
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: PPUSH
28810: CALL_OW 72
28814: ST_TO_ADDR
// if tmp then
28815: LD_VAR 0 19
28819: IFFALSE 28867
// for i in tmp do
28821: LD_ADDR_VAR 0 8
28825: PUSH
28826: LD_VAR 0 19
28830: PUSH
28831: FOR_IN
28832: IFFALSE 28865
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28834: LD_VAR 0 8
28838: PPUSH
28839: CALL_OW 250
28843: PPUSH
28844: LD_VAR 0 8
28848: PPUSH
28849: CALL_OW 251
28853: PPUSH
28854: LD_VAR 0 16
28858: PPUSH
28859: CALL_OW 441
28863: GO 28831
28865: POP
28866: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28867: LD_VAR 0 18
28871: PPUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 30
28877: PUSH
28878: LD_INT 32
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 30
28887: PUSH
28888: LD_INT 33
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 72
28904: IFFALSE 28992
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28906: LD_ADDR_VAR 0 8
28910: PUSH
28911: LD_VAR 0 18
28915: PPUSH
28916: LD_INT 2
28918: PUSH
28919: LD_INT 30
28921: PUSH
28922: LD_INT 32
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 30
28931: PUSH
28932: LD_INT 33
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: PPUSH
28944: CALL_OW 72
28948: PUSH
28949: FOR_IN
28950: IFFALSE 28990
// begin if not GetBWeapon ( i ) then
28952: LD_VAR 0 8
28956: PPUSH
28957: CALL_OW 269
28961: NOT
28962: IFFALSE 28988
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28964: LD_VAR 0 8
28968: PPUSH
28969: LD_VAR 0 8
28973: PPUSH
28974: LD_VAR 0 2
28978: PPUSH
28979: CALL 30238 0 2
28983: PPUSH
28984: CALL_OW 431
// end ;
28988: GO 28949
28990: POP
28991: POP
// end ; for i = 1 to personel do
28992: LD_ADDR_VAR 0 8
28996: PUSH
28997: DOUBLE
28998: LD_INT 1
29000: DEC
29001: ST_TO_ADDR
29002: LD_VAR 0 6
29006: PUSH
29007: FOR_TO
29008: IFFALSE 30072
// begin if i > 4 then
29010: LD_VAR 0 8
29014: PUSH
29015: LD_INT 4
29017: GREATER
29018: IFFALSE 29022
// break ;
29020: GO 30072
// case i of 1 :
29022: LD_VAR 0 8
29026: PUSH
29027: LD_INT 1
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29115
29035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29036: LD_ADDR_VAR 0 12
29040: PUSH
29041: LD_VAR 0 18
29045: PPUSH
29046: LD_INT 22
29048: PUSH
29049: LD_VAR 0 16
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 58
29060: PUSH
29061: EMPTY
29062: LIST
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: LD_INT 30
29069: PUSH
29070: LD_INT 32
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 30
29079: PUSH
29080: LD_INT 4
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 30
29089: PUSH
29090: LD_INT 5
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: LIST
29107: PPUSH
29108: CALL_OW 72
29112: ST_TO_ADDR
29113: GO 29337
29115: LD_INT 2
29117: DOUBLE
29118: EQUAL
29119: IFTRUE 29123
29121: GO 29185
29123: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29124: LD_ADDR_VAR 0 12
29128: PUSH
29129: LD_VAR 0 18
29133: PPUSH
29134: LD_INT 22
29136: PUSH
29137: LD_VAR 0 16
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 2
29148: PUSH
29149: LD_INT 30
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 30
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PPUSH
29178: CALL_OW 72
29182: ST_TO_ADDR
29183: GO 29337
29185: LD_INT 3
29187: DOUBLE
29188: EQUAL
29189: IFTRUE 29193
29191: GO 29255
29193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29194: LD_ADDR_VAR 0 12
29198: PUSH
29199: LD_VAR 0 18
29203: PPUSH
29204: LD_INT 22
29206: PUSH
29207: LD_VAR 0 16
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 30
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 30
29231: PUSH
29232: LD_INT 3
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PPUSH
29248: CALL_OW 72
29252: ST_TO_ADDR
29253: GO 29337
29255: LD_INT 4
29257: DOUBLE
29258: EQUAL
29259: IFTRUE 29263
29261: GO 29336
29263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29264: LD_ADDR_VAR 0 12
29268: PUSH
29269: LD_VAR 0 18
29273: PPUSH
29274: LD_INT 22
29276: PUSH
29277: LD_VAR 0 16
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: LD_INT 30
29291: PUSH
29292: LD_INT 6
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 30
29301: PUSH
29302: LD_INT 7
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 30
29311: PUSH
29312: LD_INT 8
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PPUSH
29329: CALL_OW 72
29333: ST_TO_ADDR
29334: GO 29337
29336: POP
// if i = 1 then
29337: LD_VAR 0 8
29341: PUSH
29342: LD_INT 1
29344: EQUAL
29345: IFFALSE 29456
// begin tmp := [ ] ;
29347: LD_ADDR_VAR 0 19
29351: PUSH
29352: EMPTY
29353: ST_TO_ADDR
// for j in f do
29354: LD_ADDR_VAR 0 9
29358: PUSH
29359: LD_VAR 0 12
29363: PUSH
29364: FOR_IN
29365: IFFALSE 29438
// if GetBType ( j ) = b_bunker then
29367: LD_VAR 0 9
29371: PPUSH
29372: CALL_OW 266
29376: PUSH
29377: LD_INT 32
29379: EQUAL
29380: IFFALSE 29407
// tmp := Insert ( tmp , 1 , j ) else
29382: LD_ADDR_VAR 0 19
29386: PUSH
29387: LD_VAR 0 19
29391: PPUSH
29392: LD_INT 1
29394: PPUSH
29395: LD_VAR 0 9
29399: PPUSH
29400: CALL_OW 2
29404: ST_TO_ADDR
29405: GO 29436
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29407: LD_ADDR_VAR 0 19
29411: PUSH
29412: LD_VAR 0 19
29416: PPUSH
29417: LD_VAR 0 19
29421: PUSH
29422: LD_INT 1
29424: PLUS
29425: PPUSH
29426: LD_VAR 0 9
29430: PPUSH
29431: CALL_OW 2
29435: ST_TO_ADDR
29436: GO 29364
29438: POP
29439: POP
// if tmp then
29440: LD_VAR 0 19
29444: IFFALSE 29456
// f := tmp ;
29446: LD_ADDR_VAR 0 12
29450: PUSH
29451: LD_VAR 0 19
29455: ST_TO_ADDR
// end ; x := personel [ i ] ;
29456: LD_ADDR_VAR 0 13
29460: PUSH
29461: LD_VAR 0 6
29465: PUSH
29466: LD_VAR 0 8
29470: ARRAY
29471: ST_TO_ADDR
// if x = - 1 then
29472: LD_VAR 0 13
29476: PUSH
29477: LD_INT 1
29479: NEG
29480: EQUAL
29481: IFFALSE 29690
// begin for j in f do
29483: LD_ADDR_VAR 0 9
29487: PUSH
29488: LD_VAR 0 12
29492: PUSH
29493: FOR_IN
29494: IFFALSE 29686
// repeat InitHc ;
29496: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29500: LD_VAR 0 9
29504: PPUSH
29505: CALL_OW 266
29509: PUSH
29510: LD_INT 5
29512: EQUAL
29513: IFFALSE 29583
// begin if UnitsInside ( j ) < 3 then
29515: LD_VAR 0 9
29519: PPUSH
29520: CALL_OW 313
29524: PUSH
29525: LD_INT 3
29527: LESS
29528: IFFALSE 29564
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29530: LD_INT 0
29532: PPUSH
29533: LD_INT 5
29535: PUSH
29536: LD_INT 8
29538: PUSH
29539: LD_INT 9
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: PUSH
29547: LD_VAR 0 17
29551: ARRAY
29552: PPUSH
29553: LD_VAR 0 4
29557: PPUSH
29558: CALL_OW 380
29562: GO 29581
// PrepareHuman ( false , i , skill ) ;
29564: LD_INT 0
29566: PPUSH
29567: LD_VAR 0 8
29571: PPUSH
29572: LD_VAR 0 4
29576: PPUSH
29577: CALL_OW 380
// end else
29581: GO 29600
// PrepareHuman ( false , i , skill ) ;
29583: LD_INT 0
29585: PPUSH
29586: LD_VAR 0 8
29590: PPUSH
29591: LD_VAR 0 4
29595: PPUSH
29596: CALL_OW 380
// un := CreateHuman ;
29600: LD_ADDR_VAR 0 14
29604: PUSH
29605: CALL_OW 44
29609: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29610: LD_ADDR_VAR 0 7
29614: PUSH
29615: LD_VAR 0 7
29619: PPUSH
29620: LD_INT 1
29622: PPUSH
29623: LD_VAR 0 14
29627: PPUSH
29628: CALL_OW 2
29632: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29633: LD_VAR 0 14
29637: PPUSH
29638: LD_VAR 0 9
29642: PPUSH
29643: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29647: LD_VAR 0 9
29651: PPUSH
29652: CALL_OW 313
29656: PUSH
29657: LD_INT 6
29659: EQUAL
29660: PUSH
29661: LD_VAR 0 9
29665: PPUSH
29666: CALL_OW 266
29670: PUSH
29671: LD_INT 32
29673: PUSH
29674: LD_INT 31
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: IN
29681: OR
29682: IFFALSE 29496
29684: GO 29493
29686: POP
29687: POP
// end else
29688: GO 30070
// for j = 1 to x do
29690: LD_ADDR_VAR 0 9
29694: PUSH
29695: DOUBLE
29696: LD_INT 1
29698: DEC
29699: ST_TO_ADDR
29700: LD_VAR 0 13
29704: PUSH
29705: FOR_TO
29706: IFFALSE 30068
// begin InitHc ;
29708: CALL_OW 19
// if not f then
29712: LD_VAR 0 12
29716: NOT
29717: IFFALSE 29806
// begin PrepareHuman ( false , i , skill ) ;
29719: LD_INT 0
29721: PPUSH
29722: LD_VAR 0 8
29726: PPUSH
29727: LD_VAR 0 4
29731: PPUSH
29732: CALL_OW 380
// un := CreateHuman ;
29736: LD_ADDR_VAR 0 14
29740: PUSH
29741: CALL_OW 44
29745: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29746: LD_ADDR_VAR 0 7
29750: PUSH
29751: LD_VAR 0 7
29755: PPUSH
29756: LD_INT 1
29758: PPUSH
29759: LD_VAR 0 14
29763: PPUSH
29764: CALL_OW 2
29768: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29769: LD_VAR 0 14
29773: PPUSH
29774: LD_VAR 0 1
29778: PPUSH
29779: CALL_OW 250
29783: PPUSH
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL_OW 251
29793: PPUSH
29794: LD_INT 10
29796: PPUSH
29797: LD_INT 0
29799: PPUSH
29800: CALL_OW 50
// continue ;
29804: GO 29705
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29806: LD_VAR 0 12
29810: PUSH
29811: LD_INT 1
29813: ARRAY
29814: PPUSH
29815: CALL_OW 313
29819: PUSH
29820: LD_VAR 0 12
29824: PUSH
29825: LD_INT 1
29827: ARRAY
29828: PPUSH
29829: CALL_OW 266
29833: PUSH
29834: LD_INT 32
29836: PUSH
29837: LD_INT 31
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: IN
29844: AND
29845: PUSH
29846: LD_VAR 0 12
29850: PUSH
29851: LD_INT 1
29853: ARRAY
29854: PPUSH
29855: CALL_OW 313
29859: PUSH
29860: LD_INT 6
29862: EQUAL
29863: OR
29864: IFFALSE 29884
// f := Delete ( f , 1 ) ;
29866: LD_ADDR_VAR 0 12
29870: PUSH
29871: LD_VAR 0 12
29875: PPUSH
29876: LD_INT 1
29878: PPUSH
29879: CALL_OW 3
29883: ST_TO_ADDR
// if not f then
29884: LD_VAR 0 12
29888: NOT
29889: IFFALSE 29907
// begin x := x + 2 ;
29891: LD_ADDR_VAR 0 13
29895: PUSH
29896: LD_VAR 0 13
29900: PUSH
29901: LD_INT 2
29903: PLUS
29904: ST_TO_ADDR
// continue ;
29905: GO 29705
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29907: LD_VAR 0 12
29911: PUSH
29912: LD_INT 1
29914: ARRAY
29915: PPUSH
29916: CALL_OW 266
29920: PUSH
29921: LD_INT 5
29923: EQUAL
29924: IFFALSE 29998
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29926: LD_VAR 0 12
29930: PUSH
29931: LD_INT 1
29933: ARRAY
29934: PPUSH
29935: CALL_OW 313
29939: PUSH
29940: LD_INT 3
29942: LESS
29943: IFFALSE 29979
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29945: LD_INT 0
29947: PPUSH
29948: LD_INT 5
29950: PUSH
29951: LD_INT 8
29953: PUSH
29954: LD_INT 9
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: PUSH
29962: LD_VAR 0 17
29966: ARRAY
29967: PPUSH
29968: LD_VAR 0 4
29972: PPUSH
29973: CALL_OW 380
29977: GO 29996
// PrepareHuman ( false , i , skill ) ;
29979: LD_INT 0
29981: PPUSH
29982: LD_VAR 0 8
29986: PPUSH
29987: LD_VAR 0 4
29991: PPUSH
29992: CALL_OW 380
// end else
29996: GO 30015
// PrepareHuman ( false , i , skill ) ;
29998: LD_INT 0
30000: PPUSH
30001: LD_VAR 0 8
30005: PPUSH
30006: LD_VAR 0 4
30010: PPUSH
30011: CALL_OW 380
// un := CreateHuman ;
30015: LD_ADDR_VAR 0 14
30019: PUSH
30020: CALL_OW 44
30024: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30025: LD_ADDR_VAR 0 7
30029: PUSH
30030: LD_VAR 0 7
30034: PPUSH
30035: LD_INT 1
30037: PPUSH
30038: LD_VAR 0 14
30042: PPUSH
30043: CALL_OW 2
30047: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30048: LD_VAR 0 14
30052: PPUSH
30053: LD_VAR 0 12
30057: PUSH
30058: LD_INT 1
30060: ARRAY
30061: PPUSH
30062: CALL_OW 52
// end ;
30066: GO 29705
30068: POP
30069: POP
// end ;
30070: GO 29007
30072: POP
30073: POP
// result := result ^ buildings ;
30074: LD_ADDR_VAR 0 7
30078: PUSH
30079: LD_VAR 0 7
30083: PUSH
30084: LD_VAR 0 18
30088: ADD
30089: ST_TO_ADDR
// end else
30090: GO 30233
// begin for i = 1 to personel do
30092: LD_ADDR_VAR 0 8
30096: PUSH
30097: DOUBLE
30098: LD_INT 1
30100: DEC
30101: ST_TO_ADDR
30102: LD_VAR 0 6
30106: PUSH
30107: FOR_TO
30108: IFFALSE 30231
// begin if i > 4 then
30110: LD_VAR 0 8
30114: PUSH
30115: LD_INT 4
30117: GREATER
30118: IFFALSE 30122
// break ;
30120: GO 30231
// x := personel [ i ] ;
30122: LD_ADDR_VAR 0 13
30126: PUSH
30127: LD_VAR 0 6
30131: PUSH
30132: LD_VAR 0 8
30136: ARRAY
30137: ST_TO_ADDR
// if x = - 1 then
30138: LD_VAR 0 13
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: EQUAL
30147: IFFALSE 30151
// continue ;
30149: GO 30107
// PrepareHuman ( false , i , skill ) ;
30151: LD_INT 0
30153: PPUSH
30154: LD_VAR 0 8
30158: PPUSH
30159: LD_VAR 0 4
30163: PPUSH
30164: CALL_OW 380
// un := CreateHuman ;
30168: LD_ADDR_VAR 0 14
30172: PUSH
30173: CALL_OW 44
30177: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30178: LD_VAR 0 14
30182: PPUSH
30183: LD_VAR 0 1
30187: PPUSH
30188: CALL_OW 250
30192: PPUSH
30193: LD_VAR 0 1
30197: PPUSH
30198: CALL_OW 251
30202: PPUSH
30203: LD_INT 10
30205: PPUSH
30206: LD_INT 0
30208: PPUSH
30209: CALL_OW 50
// result := result ^ un ;
30213: LD_ADDR_VAR 0 7
30217: PUSH
30218: LD_VAR 0 7
30222: PUSH
30223: LD_VAR 0 14
30227: ADD
30228: ST_TO_ADDR
// end ;
30229: GO 30107
30231: POP
30232: POP
// end ; end ;
30233: LD_VAR 0 7
30237: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30238: LD_INT 0
30240: PPUSH
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
30245: PPUSH
30246: PPUSH
30247: PPUSH
30248: PPUSH
30249: PPUSH
30250: PPUSH
30251: PPUSH
30252: PPUSH
30253: PPUSH
30254: PPUSH
30255: PPUSH
// result := false ;
30256: LD_ADDR_VAR 0 3
30260: PUSH
30261: LD_INT 0
30263: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30264: LD_VAR 0 1
30268: NOT
30269: PUSH
30270: LD_VAR 0 1
30274: PPUSH
30275: CALL_OW 266
30279: PUSH
30280: LD_INT 32
30282: PUSH
30283: LD_INT 33
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: IN
30290: NOT
30291: OR
30292: IFFALSE 30296
// exit ;
30294: GO 31405
// nat := GetNation ( tower ) ;
30296: LD_ADDR_VAR 0 12
30300: PUSH
30301: LD_VAR 0 1
30305: PPUSH
30306: CALL_OW 248
30310: ST_TO_ADDR
// side := GetSide ( tower ) ;
30311: LD_ADDR_VAR 0 16
30315: PUSH
30316: LD_VAR 0 1
30320: PPUSH
30321: CALL_OW 255
30325: ST_TO_ADDR
// x := GetX ( tower ) ;
30326: LD_ADDR_VAR 0 10
30330: PUSH
30331: LD_VAR 0 1
30335: PPUSH
30336: CALL_OW 250
30340: ST_TO_ADDR
// y := GetY ( tower ) ;
30341: LD_ADDR_VAR 0 11
30345: PUSH
30346: LD_VAR 0 1
30350: PPUSH
30351: CALL_OW 251
30355: ST_TO_ADDR
// if not x or not y then
30356: LD_VAR 0 10
30360: NOT
30361: PUSH
30362: LD_VAR 0 11
30366: NOT
30367: OR
30368: IFFALSE 30372
// exit ;
30370: GO 31405
// weapon := 0 ;
30372: LD_ADDR_VAR 0 18
30376: PUSH
30377: LD_INT 0
30379: ST_TO_ADDR
// fac_list := [ ] ;
30380: LD_ADDR_VAR 0 17
30384: PUSH
30385: EMPTY
30386: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30387: LD_ADDR_VAR 0 6
30391: PUSH
30392: LD_VAR 0 1
30396: PPUSH
30397: CALL_OW 274
30401: PPUSH
30402: LD_VAR 0 2
30406: PPUSH
30407: LD_INT 0
30409: PPUSH
30410: CALL 27976 0 3
30414: PPUSH
30415: LD_INT 30
30417: PUSH
30418: LD_INT 3
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PPUSH
30425: CALL_OW 72
30429: ST_TO_ADDR
// if not factories then
30430: LD_VAR 0 6
30434: NOT
30435: IFFALSE 30439
// exit ;
30437: GO 31405
// for i in factories do
30439: LD_ADDR_VAR 0 8
30443: PUSH
30444: LD_VAR 0 6
30448: PUSH
30449: FOR_IN
30450: IFFALSE 30475
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30452: LD_ADDR_VAR 0 17
30456: PUSH
30457: LD_VAR 0 17
30461: PUSH
30462: LD_VAR 0 8
30466: PPUSH
30467: CALL_OW 478
30471: UNION
30472: ST_TO_ADDR
30473: GO 30449
30475: POP
30476: POP
// if not fac_list then
30477: LD_VAR 0 17
30481: NOT
30482: IFFALSE 30486
// exit ;
30484: GO 31405
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30486: LD_ADDR_VAR 0 5
30490: PUSH
30491: LD_INT 4
30493: PUSH
30494: LD_INT 5
30496: PUSH
30497: LD_INT 9
30499: PUSH
30500: LD_INT 10
30502: PUSH
30503: LD_INT 6
30505: PUSH
30506: LD_INT 7
30508: PUSH
30509: LD_INT 11
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 27
30523: PUSH
30524: LD_INT 28
30526: PUSH
30527: LD_INT 26
30529: PUSH
30530: LD_INT 30
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 43
30541: PUSH
30542: LD_INT 44
30544: PUSH
30545: LD_INT 46
30547: PUSH
30548: LD_INT 45
30550: PUSH
30551: LD_INT 47
30553: PUSH
30554: LD_INT 49
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: LIST
30569: PUSH
30570: LD_VAR 0 12
30574: ARRAY
30575: ST_TO_ADDR
// list := list isect fac_list ;
30576: LD_ADDR_VAR 0 5
30580: PUSH
30581: LD_VAR 0 5
30585: PUSH
30586: LD_VAR 0 17
30590: ISECT
30591: ST_TO_ADDR
// if not list then
30592: LD_VAR 0 5
30596: NOT
30597: IFFALSE 30601
// exit ;
30599: GO 31405
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30601: LD_VAR 0 12
30605: PUSH
30606: LD_INT 3
30608: EQUAL
30609: PUSH
30610: LD_INT 49
30612: PUSH
30613: LD_VAR 0 5
30617: IN
30618: AND
30619: PUSH
30620: LD_INT 31
30622: PPUSH
30623: LD_VAR 0 16
30627: PPUSH
30628: CALL_OW 321
30632: PUSH
30633: LD_INT 2
30635: EQUAL
30636: AND
30637: IFFALSE 30697
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30639: LD_INT 22
30641: PUSH
30642: LD_VAR 0 16
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 35
30653: PUSH
30654: LD_INT 49
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 91
30663: PUSH
30664: LD_VAR 0 1
30668: PUSH
30669: LD_INT 10
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: PPUSH
30682: CALL_OW 69
30686: NOT
30687: IFFALSE 30697
// weapon := ru_time_lapser ;
30689: LD_ADDR_VAR 0 18
30693: PUSH
30694: LD_INT 49
30696: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30697: LD_VAR 0 12
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: LD_INT 2
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: IN
30712: PUSH
30713: LD_INT 11
30715: PUSH
30716: LD_VAR 0 5
30720: IN
30721: PUSH
30722: LD_INT 30
30724: PUSH
30725: LD_VAR 0 5
30729: IN
30730: OR
30731: AND
30732: PUSH
30733: LD_INT 6
30735: PPUSH
30736: LD_VAR 0 16
30740: PPUSH
30741: CALL_OW 321
30745: PUSH
30746: LD_INT 2
30748: EQUAL
30749: AND
30750: IFFALSE 30915
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30752: LD_INT 22
30754: PUSH
30755: LD_VAR 0 16
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: LD_INT 35
30769: PUSH
30770: LD_INT 11
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 35
30779: PUSH
30780: LD_INT 30
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 91
30794: PUSH
30795: LD_VAR 0 1
30799: PUSH
30800: LD_INT 18
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: PPUSH
30813: CALL_OW 69
30817: NOT
30818: PUSH
30819: LD_INT 22
30821: PUSH
30822: LD_VAR 0 16
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 2
30833: PUSH
30834: LD_INT 30
30836: PUSH
30837: LD_INT 32
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 30
30846: PUSH
30847: LD_INT 33
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 91
30861: PUSH
30862: LD_VAR 0 1
30866: PUSH
30867: LD_INT 12
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: PPUSH
30883: CALL_OW 69
30887: PUSH
30888: LD_INT 2
30890: GREATER
30891: AND
30892: IFFALSE 30915
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30894: LD_ADDR_VAR 0 18
30898: PUSH
30899: LD_INT 11
30901: PUSH
30902: LD_INT 30
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_VAR 0 12
30913: ARRAY
30914: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30915: LD_VAR 0 18
30919: NOT
30920: PUSH
30921: LD_INT 40
30923: PPUSH
30924: LD_VAR 0 16
30928: PPUSH
30929: CALL_OW 321
30933: PUSH
30934: LD_INT 2
30936: EQUAL
30937: AND
30938: PUSH
30939: LD_INT 7
30941: PUSH
30942: LD_VAR 0 5
30946: IN
30947: PUSH
30948: LD_INT 28
30950: PUSH
30951: LD_VAR 0 5
30955: IN
30956: OR
30957: PUSH
30958: LD_INT 45
30960: PUSH
30961: LD_VAR 0 5
30965: IN
30966: OR
30967: AND
30968: IFFALSE 31222
// begin hex := GetHexInfo ( x , y ) ;
30970: LD_ADDR_VAR 0 4
30974: PUSH
30975: LD_VAR 0 10
30979: PPUSH
30980: LD_VAR 0 11
30984: PPUSH
30985: CALL_OW 546
30989: ST_TO_ADDR
// if hex [ 1 ] then
30990: LD_VAR 0 4
30994: PUSH
30995: LD_INT 1
30997: ARRAY
30998: IFFALSE 31002
// exit ;
31000: GO 31405
// height := hex [ 2 ] ;
31002: LD_ADDR_VAR 0 15
31006: PUSH
31007: LD_VAR 0 4
31011: PUSH
31012: LD_INT 2
31014: ARRAY
31015: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31016: LD_ADDR_VAR 0 14
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: LD_INT 2
31026: PUSH
31027: LD_INT 3
31029: PUSH
31030: LD_INT 5
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: ST_TO_ADDR
// for i in tmp do
31039: LD_ADDR_VAR 0 8
31043: PUSH
31044: LD_VAR 0 14
31048: PUSH
31049: FOR_IN
31050: IFFALSE 31220
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31052: LD_ADDR_VAR 0 9
31056: PUSH
31057: LD_VAR 0 10
31061: PPUSH
31062: LD_VAR 0 8
31066: PPUSH
31067: LD_INT 5
31069: PPUSH
31070: CALL_OW 272
31074: PUSH
31075: LD_VAR 0 11
31079: PPUSH
31080: LD_VAR 0 8
31084: PPUSH
31085: LD_INT 5
31087: PPUSH
31088: CALL_OW 273
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31097: LD_VAR 0 9
31101: PUSH
31102: LD_INT 1
31104: ARRAY
31105: PPUSH
31106: LD_VAR 0 9
31110: PUSH
31111: LD_INT 2
31113: ARRAY
31114: PPUSH
31115: CALL_OW 488
31119: IFFALSE 31218
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31121: LD_ADDR_VAR 0 4
31125: PUSH
31126: LD_VAR 0 9
31130: PUSH
31131: LD_INT 1
31133: ARRAY
31134: PPUSH
31135: LD_VAR 0 9
31139: PUSH
31140: LD_INT 2
31142: ARRAY
31143: PPUSH
31144: CALL_OW 546
31148: ST_TO_ADDR
// if hex [ 1 ] then
31149: LD_VAR 0 4
31153: PUSH
31154: LD_INT 1
31156: ARRAY
31157: IFFALSE 31161
// continue ;
31159: GO 31049
// h := hex [ 2 ] ;
31161: LD_ADDR_VAR 0 13
31165: PUSH
31166: LD_VAR 0 4
31170: PUSH
31171: LD_INT 2
31173: ARRAY
31174: ST_TO_ADDR
// if h + 7 < height then
31175: LD_VAR 0 13
31179: PUSH
31180: LD_INT 7
31182: PLUS
31183: PUSH
31184: LD_VAR 0 15
31188: LESS
31189: IFFALSE 31218
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31191: LD_ADDR_VAR 0 18
31195: PUSH
31196: LD_INT 7
31198: PUSH
31199: LD_INT 28
31201: PUSH
31202: LD_INT 45
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: PUSH
31210: LD_VAR 0 12
31214: ARRAY
31215: ST_TO_ADDR
// break ;
31216: GO 31220
// end ; end ; end ;
31218: GO 31049
31220: POP
31221: POP
// end ; if not weapon then
31222: LD_VAR 0 18
31226: NOT
31227: IFFALSE 31287
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31229: LD_ADDR_VAR 0 5
31233: PUSH
31234: LD_VAR 0 5
31238: PUSH
31239: LD_INT 11
31241: PUSH
31242: LD_INT 30
31244: PUSH
31245: LD_INT 49
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: DIFF
31253: ST_TO_ADDR
// if not list then
31254: LD_VAR 0 5
31258: NOT
31259: IFFALSE 31263
// exit ;
31261: GO 31405
// weapon := list [ rand ( 1 , list ) ] ;
31263: LD_ADDR_VAR 0 18
31267: PUSH
31268: LD_VAR 0 5
31272: PUSH
31273: LD_INT 1
31275: PPUSH
31276: LD_VAR 0 5
31280: PPUSH
31281: CALL_OW 12
31285: ARRAY
31286: ST_TO_ADDR
// end ; if weapon then
31287: LD_VAR 0 18
31291: IFFALSE 31405
// begin tmp := CostOfWeapon ( weapon ) ;
31293: LD_ADDR_VAR 0 14
31297: PUSH
31298: LD_VAR 0 18
31302: PPUSH
31303: CALL_OW 451
31307: ST_TO_ADDR
// j := GetBase ( tower ) ;
31308: LD_ADDR_VAR 0 9
31312: PUSH
31313: LD_VAR 0 1
31317: PPUSH
31318: CALL_OW 274
31322: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31323: LD_VAR 0 9
31327: PPUSH
31328: LD_INT 1
31330: PPUSH
31331: CALL_OW 275
31335: PUSH
31336: LD_VAR 0 14
31340: PUSH
31341: LD_INT 1
31343: ARRAY
31344: GREATEREQUAL
31345: PUSH
31346: LD_VAR 0 9
31350: PPUSH
31351: LD_INT 2
31353: PPUSH
31354: CALL_OW 275
31358: PUSH
31359: LD_VAR 0 14
31363: PUSH
31364: LD_INT 2
31366: ARRAY
31367: GREATEREQUAL
31368: AND
31369: PUSH
31370: LD_VAR 0 9
31374: PPUSH
31375: LD_INT 3
31377: PPUSH
31378: CALL_OW 275
31382: PUSH
31383: LD_VAR 0 14
31387: PUSH
31388: LD_INT 3
31390: ARRAY
31391: GREATEREQUAL
31392: AND
31393: IFFALSE 31405
// result := weapon ;
31395: LD_ADDR_VAR 0 3
31399: PUSH
31400: LD_VAR 0 18
31404: ST_TO_ADDR
// end ; end ;
31405: LD_VAR 0 3
31409: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31410: LD_INT 0
31412: PPUSH
31413: PPUSH
// result := true ;
31414: LD_ADDR_VAR 0 3
31418: PUSH
31419: LD_INT 1
31421: ST_TO_ADDR
// if array1 = array2 then
31422: LD_VAR 0 1
31426: PUSH
31427: LD_VAR 0 2
31431: EQUAL
31432: IFFALSE 31492
// begin for i = 1 to array1 do
31434: LD_ADDR_VAR 0 4
31438: PUSH
31439: DOUBLE
31440: LD_INT 1
31442: DEC
31443: ST_TO_ADDR
31444: LD_VAR 0 1
31448: PUSH
31449: FOR_TO
31450: IFFALSE 31488
// if array1 [ i ] <> array2 [ i ] then
31452: LD_VAR 0 1
31456: PUSH
31457: LD_VAR 0 4
31461: ARRAY
31462: PUSH
31463: LD_VAR 0 2
31467: PUSH
31468: LD_VAR 0 4
31472: ARRAY
31473: NONEQUAL
31474: IFFALSE 31486
// begin result := false ;
31476: LD_ADDR_VAR 0 3
31480: PUSH
31481: LD_INT 0
31483: ST_TO_ADDR
// break ;
31484: GO 31488
// end ;
31486: GO 31449
31488: POP
31489: POP
// end else
31490: GO 31500
// result := false ;
31492: LD_ADDR_VAR 0 3
31496: PUSH
31497: LD_INT 0
31499: ST_TO_ADDR
// end ;
31500: LD_VAR 0 3
31504: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31505: LD_INT 0
31507: PPUSH
31508: PPUSH
// if not array1 or not array2 then
31509: LD_VAR 0 1
31513: NOT
31514: PUSH
31515: LD_VAR 0 2
31519: NOT
31520: OR
31521: IFFALSE 31525
// exit ;
31523: GO 31589
// result := true ;
31525: LD_ADDR_VAR 0 3
31529: PUSH
31530: LD_INT 1
31532: ST_TO_ADDR
// for i = 1 to array1 do
31533: LD_ADDR_VAR 0 4
31537: PUSH
31538: DOUBLE
31539: LD_INT 1
31541: DEC
31542: ST_TO_ADDR
31543: LD_VAR 0 1
31547: PUSH
31548: FOR_TO
31549: IFFALSE 31587
// if array1 [ i ] <> array2 [ i ] then
31551: LD_VAR 0 1
31555: PUSH
31556: LD_VAR 0 4
31560: ARRAY
31561: PUSH
31562: LD_VAR 0 2
31566: PUSH
31567: LD_VAR 0 4
31571: ARRAY
31572: NONEQUAL
31573: IFFALSE 31585
// begin result := false ;
31575: LD_ADDR_VAR 0 3
31579: PUSH
31580: LD_INT 0
31582: ST_TO_ADDR
// break ;
31583: GO 31587
// end ;
31585: GO 31548
31587: POP
31588: POP
// end ;
31589: LD_VAR 0 3
31593: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31594: LD_INT 0
31596: PPUSH
31597: PPUSH
31598: PPUSH
// pom := GetBase ( fac ) ;
31599: LD_ADDR_VAR 0 5
31603: PUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL_OW 274
31613: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31614: LD_ADDR_VAR 0 4
31618: PUSH
31619: LD_VAR 0 2
31623: PUSH
31624: LD_INT 1
31626: ARRAY
31627: PPUSH
31628: LD_VAR 0 2
31632: PUSH
31633: LD_INT 2
31635: ARRAY
31636: PPUSH
31637: LD_VAR 0 2
31641: PUSH
31642: LD_INT 3
31644: ARRAY
31645: PPUSH
31646: LD_VAR 0 2
31650: PUSH
31651: LD_INT 4
31653: ARRAY
31654: PPUSH
31655: CALL_OW 449
31659: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31660: LD_ADDR_VAR 0 3
31664: PUSH
31665: LD_VAR 0 5
31669: PPUSH
31670: LD_INT 1
31672: PPUSH
31673: CALL_OW 275
31677: PUSH
31678: LD_VAR 0 4
31682: PUSH
31683: LD_INT 1
31685: ARRAY
31686: GREATEREQUAL
31687: PUSH
31688: LD_VAR 0 5
31692: PPUSH
31693: LD_INT 2
31695: PPUSH
31696: CALL_OW 275
31700: PUSH
31701: LD_VAR 0 4
31705: PUSH
31706: LD_INT 2
31708: ARRAY
31709: GREATEREQUAL
31710: AND
31711: PUSH
31712: LD_VAR 0 5
31716: PPUSH
31717: LD_INT 3
31719: PPUSH
31720: CALL_OW 275
31724: PUSH
31725: LD_VAR 0 4
31729: PUSH
31730: LD_INT 3
31732: ARRAY
31733: GREATEREQUAL
31734: AND
31735: ST_TO_ADDR
// end ;
31736: LD_VAR 0 3
31740: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31741: LD_INT 0
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
// pom := GetBase ( building ) ;
31747: LD_ADDR_VAR 0 3
31751: PUSH
31752: LD_VAR 0 1
31756: PPUSH
31757: CALL_OW 274
31761: ST_TO_ADDR
// if not pom then
31762: LD_VAR 0 3
31766: NOT
31767: IFFALSE 31771
// exit ;
31769: GO 31941
// btype := GetBType ( building ) ;
31771: LD_ADDR_VAR 0 5
31775: PUSH
31776: LD_VAR 0 1
31780: PPUSH
31781: CALL_OW 266
31785: ST_TO_ADDR
// if btype = b_armoury then
31786: LD_VAR 0 5
31790: PUSH
31791: LD_INT 4
31793: EQUAL
31794: IFFALSE 31804
// btype := b_barracks ;
31796: LD_ADDR_VAR 0 5
31800: PUSH
31801: LD_INT 5
31803: ST_TO_ADDR
// if btype = b_depot then
31804: LD_VAR 0 5
31808: PUSH
31809: LD_INT 0
31811: EQUAL
31812: IFFALSE 31822
// btype := b_warehouse ;
31814: LD_ADDR_VAR 0 5
31818: PUSH
31819: LD_INT 1
31821: ST_TO_ADDR
// if btype = b_workshop then
31822: LD_VAR 0 5
31826: PUSH
31827: LD_INT 2
31829: EQUAL
31830: IFFALSE 31840
// btype := b_factory ;
31832: LD_ADDR_VAR 0 5
31836: PUSH
31837: LD_INT 3
31839: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31840: LD_ADDR_VAR 0 4
31844: PUSH
31845: LD_VAR 0 5
31849: PPUSH
31850: LD_VAR 0 1
31854: PPUSH
31855: CALL_OW 248
31859: PPUSH
31860: CALL_OW 450
31864: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31865: LD_ADDR_VAR 0 2
31869: PUSH
31870: LD_VAR 0 3
31874: PPUSH
31875: LD_INT 1
31877: PPUSH
31878: CALL_OW 275
31882: PUSH
31883: LD_VAR 0 4
31887: PUSH
31888: LD_INT 1
31890: ARRAY
31891: GREATEREQUAL
31892: PUSH
31893: LD_VAR 0 3
31897: PPUSH
31898: LD_INT 2
31900: PPUSH
31901: CALL_OW 275
31905: PUSH
31906: LD_VAR 0 4
31910: PUSH
31911: LD_INT 2
31913: ARRAY
31914: GREATEREQUAL
31915: AND
31916: PUSH
31917: LD_VAR 0 3
31921: PPUSH
31922: LD_INT 3
31924: PPUSH
31925: CALL_OW 275
31929: PUSH
31930: LD_VAR 0 4
31934: PUSH
31935: LD_INT 3
31937: ARRAY
31938: GREATEREQUAL
31939: AND
31940: ST_TO_ADDR
// end ;
31941: LD_VAR 0 2
31945: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31946: LD_INT 0
31948: PPUSH
31949: PPUSH
31950: PPUSH
// pom := GetBase ( building ) ;
31951: LD_ADDR_VAR 0 4
31955: PUSH
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 274
31965: ST_TO_ADDR
// if not pom then
31966: LD_VAR 0 4
31970: NOT
31971: IFFALSE 31975
// exit ;
31973: GO 32076
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31975: LD_ADDR_VAR 0 5
31979: PUSH
31980: LD_VAR 0 2
31984: PPUSH
31985: LD_VAR 0 1
31989: PPUSH
31990: CALL_OW 248
31994: PPUSH
31995: CALL_OW 450
31999: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32000: LD_ADDR_VAR 0 3
32004: PUSH
32005: LD_VAR 0 4
32009: PPUSH
32010: LD_INT 1
32012: PPUSH
32013: CALL_OW 275
32017: PUSH
32018: LD_VAR 0 5
32022: PUSH
32023: LD_INT 1
32025: ARRAY
32026: GREATEREQUAL
32027: PUSH
32028: LD_VAR 0 4
32032: PPUSH
32033: LD_INT 2
32035: PPUSH
32036: CALL_OW 275
32040: PUSH
32041: LD_VAR 0 5
32045: PUSH
32046: LD_INT 2
32048: ARRAY
32049: GREATEREQUAL
32050: AND
32051: PUSH
32052: LD_VAR 0 4
32056: PPUSH
32057: LD_INT 3
32059: PPUSH
32060: CALL_OW 275
32064: PUSH
32065: LD_VAR 0 5
32069: PUSH
32070: LD_INT 3
32072: ARRAY
32073: GREATEREQUAL
32074: AND
32075: ST_TO_ADDR
// end ;
32076: LD_VAR 0 3
32080: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32081: LD_INT 0
32083: PPUSH
32084: PPUSH
32085: PPUSH
32086: PPUSH
32087: PPUSH
32088: PPUSH
32089: PPUSH
32090: PPUSH
32091: PPUSH
32092: PPUSH
32093: PPUSH
// result := false ;
32094: LD_ADDR_VAR 0 8
32098: PUSH
32099: LD_INT 0
32101: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32102: LD_VAR 0 5
32106: NOT
32107: PUSH
32108: LD_VAR 0 1
32112: NOT
32113: OR
32114: PUSH
32115: LD_VAR 0 2
32119: NOT
32120: OR
32121: PUSH
32122: LD_VAR 0 3
32126: NOT
32127: OR
32128: IFFALSE 32132
// exit ;
32130: GO 32946
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32132: LD_ADDR_VAR 0 14
32136: PUSH
32137: LD_VAR 0 1
32141: PPUSH
32142: LD_VAR 0 2
32146: PPUSH
32147: LD_VAR 0 3
32151: PPUSH
32152: LD_VAR 0 4
32156: PPUSH
32157: LD_VAR 0 5
32161: PUSH
32162: LD_INT 1
32164: ARRAY
32165: PPUSH
32166: CALL_OW 248
32170: PPUSH
32171: LD_INT 0
32173: PPUSH
32174: CALL 34179 0 6
32178: ST_TO_ADDR
// if not hexes then
32179: LD_VAR 0 14
32183: NOT
32184: IFFALSE 32188
// exit ;
32186: GO 32946
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32188: LD_ADDR_VAR 0 17
32192: PUSH
32193: LD_VAR 0 5
32197: PPUSH
32198: LD_INT 22
32200: PUSH
32201: LD_VAR 0 13
32205: PPUSH
32206: CALL_OW 255
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: LD_INT 30
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 30
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PPUSH
32247: CALL_OW 72
32251: ST_TO_ADDR
// for i = 1 to hexes do
32252: LD_ADDR_VAR 0 9
32256: PUSH
32257: DOUBLE
32258: LD_INT 1
32260: DEC
32261: ST_TO_ADDR
32262: LD_VAR 0 14
32266: PUSH
32267: FOR_TO
32268: IFFALSE 32944
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32270: LD_ADDR_VAR 0 13
32274: PUSH
32275: LD_VAR 0 14
32279: PUSH
32280: LD_VAR 0 9
32284: ARRAY
32285: PUSH
32286: LD_INT 1
32288: ARRAY
32289: PPUSH
32290: LD_VAR 0 14
32294: PUSH
32295: LD_VAR 0 9
32299: ARRAY
32300: PUSH
32301: LD_INT 2
32303: ARRAY
32304: PPUSH
32305: CALL_OW 428
32309: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32310: LD_VAR 0 14
32314: PUSH
32315: LD_VAR 0 9
32319: ARRAY
32320: PUSH
32321: LD_INT 1
32323: ARRAY
32324: PPUSH
32325: LD_VAR 0 14
32329: PUSH
32330: LD_VAR 0 9
32334: ARRAY
32335: PUSH
32336: LD_INT 2
32338: ARRAY
32339: PPUSH
32340: CALL_OW 351
32344: PUSH
32345: LD_VAR 0 14
32349: PUSH
32350: LD_VAR 0 9
32354: ARRAY
32355: PUSH
32356: LD_INT 1
32358: ARRAY
32359: PPUSH
32360: LD_VAR 0 14
32364: PUSH
32365: LD_VAR 0 9
32369: ARRAY
32370: PUSH
32371: LD_INT 2
32373: ARRAY
32374: PPUSH
32375: CALL_OW 488
32379: NOT
32380: OR
32381: PUSH
32382: LD_VAR 0 13
32386: PPUSH
32387: CALL_OW 247
32391: PUSH
32392: LD_INT 3
32394: EQUAL
32395: OR
32396: IFFALSE 32402
// exit ;
32398: POP
32399: POP
32400: GO 32946
// if not tmp then
32402: LD_VAR 0 13
32406: NOT
32407: IFFALSE 32411
// continue ;
32409: GO 32267
// result := true ;
32411: LD_ADDR_VAR 0 8
32415: PUSH
32416: LD_INT 1
32418: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32419: LD_VAR 0 6
32423: PUSH
32424: LD_VAR 0 13
32428: PPUSH
32429: CALL_OW 247
32433: PUSH
32434: LD_INT 2
32436: EQUAL
32437: AND
32438: PUSH
32439: LD_VAR 0 13
32443: PPUSH
32444: CALL_OW 263
32448: PUSH
32449: LD_INT 1
32451: EQUAL
32452: AND
32453: IFFALSE 32617
// begin if IsDrivenBy ( tmp ) then
32455: LD_VAR 0 13
32459: PPUSH
32460: CALL_OW 311
32464: IFFALSE 32468
// continue ;
32466: GO 32267
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32468: LD_VAR 0 6
32472: PPUSH
32473: LD_INT 3
32475: PUSH
32476: LD_INT 60
32478: PUSH
32479: EMPTY
32480: LIST
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 55
32491: PUSH
32492: EMPTY
32493: LIST
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PPUSH
32503: CALL_OW 72
32507: IFFALSE 32615
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32509: LD_ADDR_VAR 0 18
32513: PUSH
32514: LD_VAR 0 6
32518: PPUSH
32519: LD_INT 3
32521: PUSH
32522: LD_INT 60
32524: PUSH
32525: EMPTY
32526: LIST
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 3
32534: PUSH
32535: LD_INT 55
32537: PUSH
32538: EMPTY
32539: LIST
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PPUSH
32549: CALL_OW 72
32553: PUSH
32554: LD_INT 1
32556: ARRAY
32557: ST_TO_ADDR
// if IsInUnit ( driver ) then
32558: LD_VAR 0 18
32562: PPUSH
32563: CALL_OW 310
32567: IFFALSE 32578
// ComExit ( driver ) ;
32569: LD_VAR 0 18
32573: PPUSH
32574: CALL 57959 0 1
// AddComEnterUnit ( driver , tmp ) ;
32578: LD_VAR 0 18
32582: PPUSH
32583: LD_VAR 0 13
32587: PPUSH
32588: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32592: LD_VAR 0 18
32596: PPUSH
32597: LD_VAR 0 7
32601: PPUSH
32602: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32606: LD_VAR 0 18
32610: PPUSH
32611: CALL_OW 181
// end ; continue ;
32615: GO 32267
// end ; if not cleaners or not tmp in cleaners then
32617: LD_VAR 0 6
32621: NOT
32622: PUSH
32623: LD_VAR 0 13
32627: PUSH
32628: LD_VAR 0 6
32632: IN
32633: NOT
32634: OR
32635: IFFALSE 32942
// begin if dep then
32637: LD_VAR 0 17
32641: IFFALSE 32777
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32643: LD_ADDR_VAR 0 16
32647: PUSH
32648: LD_VAR 0 17
32652: PUSH
32653: LD_INT 1
32655: ARRAY
32656: PPUSH
32657: CALL_OW 250
32661: PPUSH
32662: LD_VAR 0 17
32666: PUSH
32667: LD_INT 1
32669: ARRAY
32670: PPUSH
32671: CALL_OW 254
32675: PPUSH
32676: LD_INT 5
32678: PPUSH
32679: CALL_OW 272
32683: PUSH
32684: LD_VAR 0 17
32688: PUSH
32689: LD_INT 1
32691: ARRAY
32692: PPUSH
32693: CALL_OW 251
32697: PPUSH
32698: LD_VAR 0 17
32702: PUSH
32703: LD_INT 1
32705: ARRAY
32706: PPUSH
32707: CALL_OW 254
32711: PPUSH
32712: LD_INT 5
32714: PPUSH
32715: CALL_OW 273
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32724: LD_VAR 0 16
32728: PUSH
32729: LD_INT 1
32731: ARRAY
32732: PPUSH
32733: LD_VAR 0 16
32737: PUSH
32738: LD_INT 2
32740: ARRAY
32741: PPUSH
32742: CALL_OW 488
32746: IFFALSE 32777
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32748: LD_VAR 0 13
32752: PPUSH
32753: LD_VAR 0 16
32757: PUSH
32758: LD_INT 1
32760: ARRAY
32761: PPUSH
32762: LD_VAR 0 16
32766: PUSH
32767: LD_INT 2
32769: ARRAY
32770: PPUSH
32771: CALL_OW 111
// continue ;
32775: GO 32267
// end ; end ; r := GetDir ( tmp ) ;
32777: LD_ADDR_VAR 0 15
32781: PUSH
32782: LD_VAR 0 13
32786: PPUSH
32787: CALL_OW 254
32791: ST_TO_ADDR
// if r = 5 then
32792: LD_VAR 0 15
32796: PUSH
32797: LD_INT 5
32799: EQUAL
32800: IFFALSE 32810
// r := 0 ;
32802: LD_ADDR_VAR 0 15
32806: PUSH
32807: LD_INT 0
32809: ST_TO_ADDR
// for j = r to 5 do
32810: LD_ADDR_VAR 0 10
32814: PUSH
32815: DOUBLE
32816: LD_VAR 0 15
32820: DEC
32821: ST_TO_ADDR
32822: LD_INT 5
32824: PUSH
32825: FOR_TO
32826: IFFALSE 32940
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32828: LD_ADDR_VAR 0 11
32832: PUSH
32833: LD_VAR 0 13
32837: PPUSH
32838: CALL_OW 250
32842: PPUSH
32843: LD_VAR 0 10
32847: PPUSH
32848: LD_INT 2
32850: PPUSH
32851: CALL_OW 272
32855: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32856: LD_ADDR_VAR 0 12
32860: PUSH
32861: LD_VAR 0 13
32865: PPUSH
32866: CALL_OW 251
32870: PPUSH
32871: LD_VAR 0 10
32875: PPUSH
32876: LD_INT 2
32878: PPUSH
32879: CALL_OW 273
32883: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32884: LD_VAR 0 11
32888: PPUSH
32889: LD_VAR 0 12
32893: PPUSH
32894: CALL_OW 488
32898: PUSH
32899: LD_VAR 0 11
32903: PPUSH
32904: LD_VAR 0 12
32908: PPUSH
32909: CALL_OW 428
32913: NOT
32914: AND
32915: IFFALSE 32938
// begin ComMoveXY ( tmp , _x , _y ) ;
32917: LD_VAR 0 13
32921: PPUSH
32922: LD_VAR 0 11
32926: PPUSH
32927: LD_VAR 0 12
32931: PPUSH
32932: CALL_OW 111
// break ;
32936: GO 32940
// end ; end ;
32938: GO 32825
32940: POP
32941: POP
// end ; end ;
32942: GO 32267
32944: POP
32945: POP
// end ;
32946: LD_VAR 0 8
32950: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32951: LD_INT 0
32953: PPUSH
// result := true ;
32954: LD_ADDR_VAR 0 3
32958: PUSH
32959: LD_INT 1
32961: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32962: LD_VAR 0 2
32966: PUSH
32967: LD_INT 24
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32981
32973: LD_INT 33
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 33006
32981: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: LD_INT 32
32989: PPUSH
32990: LD_VAR 0 1
32994: PPUSH
32995: CALL_OW 321
32999: PUSH
33000: LD_INT 2
33002: EQUAL
33003: ST_TO_ADDR
33004: GO 33322
33006: LD_INT 20
33008: DOUBLE
33009: EQUAL
33010: IFTRUE 33014
33012: GO 33039
33014: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33015: LD_ADDR_VAR 0 3
33019: PUSH
33020: LD_INT 6
33022: PPUSH
33023: LD_VAR 0 1
33027: PPUSH
33028: CALL_OW 321
33032: PUSH
33033: LD_INT 2
33035: EQUAL
33036: ST_TO_ADDR
33037: GO 33322
33039: LD_INT 22
33041: DOUBLE
33042: EQUAL
33043: IFTRUE 33053
33045: LD_INT 36
33047: DOUBLE
33048: EQUAL
33049: IFTRUE 33053
33051: GO 33078
33053: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33054: LD_ADDR_VAR 0 3
33058: PUSH
33059: LD_INT 15
33061: PPUSH
33062: LD_VAR 0 1
33066: PPUSH
33067: CALL_OW 321
33071: PUSH
33072: LD_INT 2
33074: EQUAL
33075: ST_TO_ADDR
33076: GO 33322
33078: LD_INT 30
33080: DOUBLE
33081: EQUAL
33082: IFTRUE 33086
33084: GO 33111
33086: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33087: LD_ADDR_VAR 0 3
33091: PUSH
33092: LD_INT 20
33094: PPUSH
33095: LD_VAR 0 1
33099: PPUSH
33100: CALL_OW 321
33104: PUSH
33105: LD_INT 2
33107: EQUAL
33108: ST_TO_ADDR
33109: GO 33322
33111: LD_INT 28
33113: DOUBLE
33114: EQUAL
33115: IFTRUE 33125
33117: LD_INT 21
33119: DOUBLE
33120: EQUAL
33121: IFTRUE 33125
33123: GO 33150
33125: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33126: LD_ADDR_VAR 0 3
33130: PUSH
33131: LD_INT 21
33133: PPUSH
33134: LD_VAR 0 1
33138: PPUSH
33139: CALL_OW 321
33143: PUSH
33144: LD_INT 2
33146: EQUAL
33147: ST_TO_ADDR
33148: GO 33322
33150: LD_INT 16
33152: DOUBLE
33153: EQUAL
33154: IFTRUE 33158
33156: GO 33183
33158: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_INT 84
33166: PPUSH
33167: LD_VAR 0 1
33171: PPUSH
33172: CALL_OW 321
33176: PUSH
33177: LD_INT 2
33179: EQUAL
33180: ST_TO_ADDR
33181: GO 33322
33183: LD_INT 19
33185: DOUBLE
33186: EQUAL
33187: IFTRUE 33197
33189: LD_INT 23
33191: DOUBLE
33192: EQUAL
33193: IFTRUE 33197
33195: GO 33222
33197: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_INT 83
33205: PPUSH
33206: LD_VAR 0 1
33210: PPUSH
33211: CALL_OW 321
33215: PUSH
33216: LD_INT 2
33218: EQUAL
33219: ST_TO_ADDR
33220: GO 33322
33222: LD_INT 17
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33255
33230: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33231: LD_ADDR_VAR 0 3
33235: PUSH
33236: LD_INT 39
33238: PPUSH
33239: LD_VAR 0 1
33243: PPUSH
33244: CALL_OW 321
33248: PUSH
33249: LD_INT 2
33251: EQUAL
33252: ST_TO_ADDR
33253: GO 33322
33255: LD_INT 18
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33288
33263: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33264: LD_ADDR_VAR 0 3
33268: PUSH
33269: LD_INT 40
33271: PPUSH
33272: LD_VAR 0 1
33276: PPUSH
33277: CALL_OW 321
33281: PUSH
33282: LD_INT 2
33284: EQUAL
33285: ST_TO_ADDR
33286: GO 33322
33288: LD_INT 27
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33321
33296: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33297: LD_ADDR_VAR 0 3
33301: PUSH
33302: LD_INT 35
33304: PPUSH
33305: LD_VAR 0 1
33309: PPUSH
33310: CALL_OW 321
33314: PUSH
33315: LD_INT 2
33317: EQUAL
33318: ST_TO_ADDR
33319: GO 33322
33321: POP
// end ;
33322: LD_VAR 0 3
33326: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33327: LD_INT 0
33329: PPUSH
33330: PPUSH
33331: PPUSH
33332: PPUSH
33333: PPUSH
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
// result := false ;
33340: LD_ADDR_VAR 0 6
33344: PUSH
33345: LD_INT 0
33347: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33348: LD_VAR 0 1
33352: NOT
33353: PUSH
33354: LD_VAR 0 1
33358: PPUSH
33359: CALL_OW 266
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: IN
33374: NOT
33375: OR
33376: PUSH
33377: LD_VAR 0 2
33381: NOT
33382: OR
33383: PUSH
33384: LD_VAR 0 5
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: LD_INT 2
33397: PUSH
33398: LD_INT 3
33400: PUSH
33401: LD_INT 4
33403: PUSH
33404: LD_INT 5
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: IN
33415: NOT
33416: OR
33417: PUSH
33418: LD_VAR 0 3
33422: PPUSH
33423: LD_VAR 0 4
33427: PPUSH
33428: CALL_OW 488
33432: NOT
33433: OR
33434: IFFALSE 33438
// exit ;
33436: GO 34174
// side := GetSide ( depot ) ;
33438: LD_ADDR_VAR 0 9
33442: PUSH
33443: LD_VAR 0 1
33447: PPUSH
33448: CALL_OW 255
33452: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33453: LD_VAR 0 9
33457: PPUSH
33458: LD_VAR 0 2
33462: PPUSH
33463: CALL 32951 0 2
33467: NOT
33468: IFFALSE 33472
// exit ;
33470: GO 34174
// pom := GetBase ( depot ) ;
33472: LD_ADDR_VAR 0 10
33476: PUSH
33477: LD_VAR 0 1
33481: PPUSH
33482: CALL_OW 274
33486: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33487: LD_ADDR_VAR 0 11
33491: PUSH
33492: LD_VAR 0 2
33496: PPUSH
33497: LD_VAR 0 1
33501: PPUSH
33502: CALL_OW 248
33506: PPUSH
33507: CALL_OW 450
33511: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33512: LD_VAR 0 10
33516: PPUSH
33517: LD_INT 1
33519: PPUSH
33520: CALL_OW 275
33524: PUSH
33525: LD_VAR 0 11
33529: PUSH
33530: LD_INT 1
33532: ARRAY
33533: GREATEREQUAL
33534: PUSH
33535: LD_VAR 0 10
33539: PPUSH
33540: LD_INT 2
33542: PPUSH
33543: CALL_OW 275
33547: PUSH
33548: LD_VAR 0 11
33552: PUSH
33553: LD_INT 2
33555: ARRAY
33556: GREATEREQUAL
33557: AND
33558: PUSH
33559: LD_VAR 0 10
33563: PPUSH
33564: LD_INT 3
33566: PPUSH
33567: CALL_OW 275
33571: PUSH
33572: LD_VAR 0 11
33576: PUSH
33577: LD_INT 3
33579: ARRAY
33580: GREATEREQUAL
33581: AND
33582: NOT
33583: IFFALSE 33587
// exit ;
33585: GO 34174
// if GetBType ( depot ) = b_depot then
33587: LD_VAR 0 1
33591: PPUSH
33592: CALL_OW 266
33596: PUSH
33597: LD_INT 0
33599: EQUAL
33600: IFFALSE 33612
// dist := 28 else
33602: LD_ADDR_VAR 0 14
33606: PUSH
33607: LD_INT 28
33609: ST_TO_ADDR
33610: GO 33620
// dist := 36 ;
33612: LD_ADDR_VAR 0 14
33616: PUSH
33617: LD_INT 36
33619: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33620: LD_VAR 0 1
33624: PPUSH
33625: LD_VAR 0 3
33629: PPUSH
33630: LD_VAR 0 4
33634: PPUSH
33635: CALL_OW 297
33639: PUSH
33640: LD_VAR 0 14
33644: GREATER
33645: IFFALSE 33649
// exit ;
33647: GO 34174
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33649: LD_ADDR_VAR 0 12
33653: PUSH
33654: LD_VAR 0 2
33658: PPUSH
33659: LD_VAR 0 3
33663: PPUSH
33664: LD_VAR 0 4
33668: PPUSH
33669: LD_VAR 0 5
33673: PPUSH
33674: LD_VAR 0 1
33678: PPUSH
33679: CALL_OW 248
33683: PPUSH
33684: LD_INT 0
33686: PPUSH
33687: CALL 34179 0 6
33691: ST_TO_ADDR
// if not hexes then
33692: LD_VAR 0 12
33696: NOT
33697: IFFALSE 33701
// exit ;
33699: GO 34174
// hex := GetHexInfo ( x , y ) ;
33701: LD_ADDR_VAR 0 15
33705: PUSH
33706: LD_VAR 0 3
33710: PPUSH
33711: LD_VAR 0 4
33715: PPUSH
33716: CALL_OW 546
33720: ST_TO_ADDR
// if hex [ 1 ] then
33721: LD_VAR 0 15
33725: PUSH
33726: LD_INT 1
33728: ARRAY
33729: IFFALSE 33733
// exit ;
33731: GO 34174
// height := hex [ 2 ] ;
33733: LD_ADDR_VAR 0 13
33737: PUSH
33738: LD_VAR 0 15
33742: PUSH
33743: LD_INT 2
33745: ARRAY
33746: ST_TO_ADDR
// for i = 1 to hexes do
33747: LD_ADDR_VAR 0 7
33751: PUSH
33752: DOUBLE
33753: LD_INT 1
33755: DEC
33756: ST_TO_ADDR
33757: LD_VAR 0 12
33761: PUSH
33762: FOR_TO
33763: IFFALSE 34093
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33765: LD_VAR 0 12
33769: PUSH
33770: LD_VAR 0 7
33774: ARRAY
33775: PUSH
33776: LD_INT 1
33778: ARRAY
33779: PPUSH
33780: LD_VAR 0 12
33784: PUSH
33785: LD_VAR 0 7
33789: ARRAY
33790: PUSH
33791: LD_INT 2
33793: ARRAY
33794: PPUSH
33795: CALL_OW 488
33799: NOT
33800: PUSH
33801: LD_VAR 0 12
33805: PUSH
33806: LD_VAR 0 7
33810: ARRAY
33811: PUSH
33812: LD_INT 1
33814: ARRAY
33815: PPUSH
33816: LD_VAR 0 12
33820: PUSH
33821: LD_VAR 0 7
33825: ARRAY
33826: PUSH
33827: LD_INT 2
33829: ARRAY
33830: PPUSH
33831: CALL_OW 428
33835: PUSH
33836: LD_INT 0
33838: GREATER
33839: OR
33840: PUSH
33841: LD_VAR 0 12
33845: PUSH
33846: LD_VAR 0 7
33850: ARRAY
33851: PUSH
33852: LD_INT 1
33854: ARRAY
33855: PPUSH
33856: LD_VAR 0 12
33860: PUSH
33861: LD_VAR 0 7
33865: ARRAY
33866: PUSH
33867: LD_INT 2
33869: ARRAY
33870: PPUSH
33871: CALL_OW 351
33875: OR
33876: IFFALSE 33882
// exit ;
33878: POP
33879: POP
33880: GO 34174
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33882: LD_ADDR_VAR 0 8
33886: PUSH
33887: LD_VAR 0 12
33891: PUSH
33892: LD_VAR 0 7
33896: ARRAY
33897: PUSH
33898: LD_INT 1
33900: ARRAY
33901: PPUSH
33902: LD_VAR 0 12
33906: PUSH
33907: LD_VAR 0 7
33911: ARRAY
33912: PUSH
33913: LD_INT 2
33915: ARRAY
33916: PPUSH
33917: CALL_OW 546
33921: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33922: LD_VAR 0 8
33926: PUSH
33927: LD_INT 1
33929: ARRAY
33930: PUSH
33931: LD_VAR 0 8
33935: PUSH
33936: LD_INT 2
33938: ARRAY
33939: PUSH
33940: LD_VAR 0 13
33944: PUSH
33945: LD_INT 2
33947: PLUS
33948: GREATER
33949: OR
33950: PUSH
33951: LD_VAR 0 8
33955: PUSH
33956: LD_INT 2
33958: ARRAY
33959: PUSH
33960: LD_VAR 0 13
33964: PUSH
33965: LD_INT 2
33967: MINUS
33968: LESS
33969: OR
33970: PUSH
33971: LD_VAR 0 8
33975: PUSH
33976: LD_INT 3
33978: ARRAY
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 8
33985: PUSH
33986: LD_INT 9
33988: PUSH
33989: LD_INT 10
33991: PUSH
33992: LD_INT 11
33994: PUSH
33995: LD_INT 12
33997: PUSH
33998: LD_INT 13
34000: PUSH
34001: LD_INT 16
34003: PUSH
34004: LD_INT 17
34006: PUSH
34007: LD_INT 18
34009: PUSH
34010: LD_INT 19
34012: PUSH
34013: LD_INT 20
34015: PUSH
34016: LD_INT 21
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: IN
34034: NOT
34035: OR
34036: PUSH
34037: LD_VAR 0 8
34041: PUSH
34042: LD_INT 5
34044: ARRAY
34045: NOT
34046: OR
34047: PUSH
34048: LD_VAR 0 8
34052: PUSH
34053: LD_INT 6
34055: ARRAY
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: LD_INT 7
34065: PUSH
34066: LD_INT 9
34068: PUSH
34069: LD_INT 10
34071: PUSH
34072: LD_INT 11
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: IN
34083: NOT
34084: OR
34085: IFFALSE 34091
// exit ;
34087: POP
34088: POP
34089: GO 34174
// end ;
34091: GO 33762
34093: POP
34094: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34095: LD_VAR 0 9
34099: PPUSH
34100: LD_VAR 0 3
34104: PPUSH
34105: LD_VAR 0 4
34109: PPUSH
34110: LD_INT 20
34112: PPUSH
34113: CALL 26126 0 4
34117: PUSH
34118: LD_INT 4
34120: ARRAY
34121: IFFALSE 34125
// exit ;
34123: GO 34174
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34125: LD_VAR 0 2
34129: PUSH
34130: LD_INT 29
34132: PUSH
34133: LD_INT 30
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: IN
34140: PUSH
34141: LD_VAR 0 3
34145: PPUSH
34146: LD_VAR 0 4
34150: PPUSH
34151: LD_VAR 0 9
34155: PPUSH
34156: CALL_OW 440
34160: NOT
34161: AND
34162: IFFALSE 34166
// exit ;
34164: GO 34174
// result := true ;
34166: LD_ADDR_VAR 0 6
34170: PUSH
34171: LD_INT 1
34173: ST_TO_ADDR
// end ;
34174: LD_VAR 0 6
34178: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34179: LD_INT 0
34181: PPUSH
34182: PPUSH
34183: PPUSH
34184: PPUSH
34185: PPUSH
34186: PPUSH
34187: PPUSH
34188: PPUSH
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
34194: PPUSH
34195: PPUSH
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
34202: PPUSH
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
34207: PPUSH
34208: PPUSH
34209: PPUSH
34210: PPUSH
34211: PPUSH
34212: PPUSH
34213: PPUSH
34214: PPUSH
34215: PPUSH
34216: PPUSH
34217: PPUSH
34218: PPUSH
34219: PPUSH
34220: PPUSH
34221: PPUSH
34222: PPUSH
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
// result = [ ] ;
34239: LD_ADDR_VAR 0 7
34243: PUSH
34244: EMPTY
34245: ST_TO_ADDR
// temp_list = [ ] ;
34246: LD_ADDR_VAR 0 9
34250: PUSH
34251: EMPTY
34252: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34253: LD_VAR 0 4
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: LD_INT 1
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: LD_INT 3
34269: PUSH
34270: LD_INT 4
34272: PUSH
34273: LD_INT 5
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: IN
34284: NOT
34285: PUSH
34286: LD_VAR 0 1
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: IN
34301: PUSH
34302: LD_VAR 0 5
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: LD_INT 3
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: IN
34321: NOT
34322: AND
34323: OR
34324: IFFALSE 34328
// exit ;
34326: GO 52719
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34328: LD_VAR 0 1
34332: PUSH
34333: LD_INT 6
34335: PUSH
34336: LD_INT 7
34338: PUSH
34339: LD_INT 8
34341: PUSH
34342: LD_INT 13
34344: PUSH
34345: LD_INT 12
34347: PUSH
34348: LD_INT 15
34350: PUSH
34351: LD_INT 11
34353: PUSH
34354: LD_INT 14
34356: PUSH
34357: LD_INT 10
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: IN
34371: IFFALSE 34381
// btype = b_lab ;
34373: LD_ADDR_VAR 0 1
34377: PUSH
34378: LD_INT 6
34380: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34381: LD_VAR 0 6
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: IN
34400: NOT
34401: PUSH
34402: LD_VAR 0 1
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: LD_INT 3
34418: PUSH
34419: LD_INT 6
34421: PUSH
34422: LD_INT 36
34424: PUSH
34425: LD_INT 4
34427: PUSH
34428: LD_INT 5
34430: PUSH
34431: LD_INT 31
34433: PUSH
34434: LD_INT 32
34436: PUSH
34437: LD_INT 33
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: IN
34453: NOT
34454: PUSH
34455: LD_VAR 0 6
34459: PUSH
34460: LD_INT 1
34462: EQUAL
34463: AND
34464: OR
34465: PUSH
34466: LD_VAR 0 1
34470: PUSH
34471: LD_INT 2
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: IN
34481: NOT
34482: PUSH
34483: LD_VAR 0 6
34487: PUSH
34488: LD_INT 2
34490: EQUAL
34491: AND
34492: OR
34493: IFFALSE 34503
// mode = 0 ;
34495: LD_ADDR_VAR 0 6
34499: PUSH
34500: LD_INT 0
34502: ST_TO_ADDR
// case mode of 0 :
34503: LD_VAR 0 6
34507: PUSH
34508: LD_INT 0
34510: DOUBLE
34511: EQUAL
34512: IFTRUE 34516
34514: GO 45969
34516: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34517: LD_ADDR_VAR 0 11
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 1
34586: NEG
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: LD_INT 2
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: LD_INT 3
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: LD_INT 2
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34710: LD_ADDR_VAR 0 12
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: NEG
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 2
34844: NEG
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 3
34867: NEG
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 3
34878: NEG
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34906: LD_ADDR_VAR 0 13
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 1
34975: NEG
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: LD_INT 2
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 2
35029: NEG
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: LD_INT 3
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 3
35065: NEG
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 3
35077: NEG
35078: PUSH
35079: LD_INT 3
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35105: LD_ADDR_VAR 0 14
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: LD_INT 2
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 3
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35301: LD_ADDR_VAR 0 15
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 2
35424: NEG
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 2
35435: NEG
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 3
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 3
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35494: LD_ADDR_VAR 0 16
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 0
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 2
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: LD_INT 2
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 2
35617: NEG
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: LD_INT 2
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 3
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35687: LD_ADDR_VAR 0 17
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 2
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: NEG
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: LD_INT 2
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35917: LD_ADDR_VAR 0 18
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: LD_INT 2
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 2
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 2
36104: NEG
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 2
36116: NEG
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36147: LD_ADDR_VAR 0 19
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: NEG
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: NEG
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: LD_INT 2
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36377: LD_ADDR_VAR 0 20
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 1
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 1
36458: NEG
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 2
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: NEG
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 2
36553: NEG
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 2
36564: NEG
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: LD_INT 2
36580: NEG
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36607: LD_ADDR_VAR 0 21
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: LD_INT 2
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 2
36783: NEG
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 2
36806: NEG
36807: PUSH
36808: LD_INT 2
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36837: LD_ADDR_VAR 0 22
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: LD_INT 2
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: LD_INT 2
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 2
37013: NEG
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: NEG
37025: PUSH
37026: LD_INT 1
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 2
37036: NEG
37037: PUSH
37038: LD_INT 2
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37067: LD_ADDR_VAR 0 23
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 2
37254: NEG
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: NEG
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 2
37278: NEG
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: NEG
37291: PUSH
37292: LD_INT 3
37294: NEG
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 2
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37347: LD_ADDR_VAR 0 24
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: LD_INT 2
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: NEG
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: LD_INT 2
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 3
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 3
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37623: LD_ADDR_VAR 0 25
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 2
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: NEG
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: LD_INT 3
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37897: LD_ADDR_VAR 0 26
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: LD_INT 2
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 2
38108: PUSH
38109: LD_INT 3
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 2
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38173: LD_ADDR_VAR 0 27
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: LD_INT 2
38269: NEG
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 1
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 3
38406: NEG
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 3
38418: NEG
38419: PUSH
38420: LD_INT 2
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38453: LD_ADDR_VAR 0 28
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: NEG
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: LD_INT 2
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 2
38588: PUSH
38589: LD_INT 2
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: LD_INT 3
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: LD_INT 3
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 3
38688: NEG
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 3
38700: NEG
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38735: LD_ADDR_VAR 0 29
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: LD_INT 2
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 2
38901: NEG
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: NEG
38914: PUSH
38915: LD_INT 2
38917: NEG
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: LD_INT 3
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 3
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 3
38979: NEG
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39014: LD_ADDR_VAR 0 30
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: NEG
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: NEG
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: LD_INT 3
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: NEG
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 3
39257: NEG
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39292: LD_ADDR_VAR 0 31
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: NEG
39482: PUSH
39483: LD_INT 3
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 3
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 3
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 3
39535: NEG
39536: PUSH
39537: LD_INT 2
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39570: LD_ADDR_VAR 0 32
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: LD_INT 3
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: LD_INT 2
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 3
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: LD_INT 3
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 3
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39848: LD_ADDR_VAR 0 33
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 2
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 0
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: LD_INT 3
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: LD_INT 3
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 3
40092: NEG
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40127: LD_ADDR_VAR 0 34
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: LD_INT 3
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 3
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 3
40372: NEG
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40407: LD_ADDR_VAR 0 35
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40519: LD_ADDR_VAR 0 36
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40631: LD_ADDR_VAR 0 37
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40743: LD_ADDR_VAR 0 38
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40855: LD_ADDR_VAR 0 39
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40967: LD_ADDR_VAR 0 40
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41079: LD_ADDR_VAR 0 41
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 2
41257: NEG
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: LD_INT 3
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 3
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: LD_INT 3
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 3
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 3
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 3
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 3
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: LD_INT 3
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41429: LD_ADDR_VAR 0 42
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 2
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 2
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: LD_INT 2
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: NEG
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: LD_INT 3
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 3
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 3
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 3
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 3
41675: PUSH
41676: LD_INT 3
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: LD_INT 3
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 3
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 3
41726: NEG
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 3
41738: NEG
41739: PUSH
41740: LD_INT 3
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41779: LD_ADDR_VAR 0 43
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 3
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 3
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: LD_INT 3
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 3
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 3
42075: NEG
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 3
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42127: LD_ADDR_VAR 0 44
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: LD_INT 3
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 3
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 3
42401: NEG
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 3
42424: NEG
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 3
42436: NEG
42437: PUSH
42438: LD_INT 3
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42477: LD_ADDR_VAR 0 45
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 3
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 3
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 3
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: LD_INT 3
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 3
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 3
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 3
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 2
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 3
42774: NEG
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 3
42786: NEG
42787: PUSH
42788: LD_INT 3
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42827: LD_ADDR_VAR 0 46
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 3
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 3
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 3
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 3
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: NEG
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 3
43134: NEG
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43175: LD_ADDR_VAR 0 47
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43326: LD_ADDR_VAR 0 48
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43473: LD_ADDR_VAR 0 49
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43617: LD_ADDR_VAR 0 50
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43761: LD_ADDR_VAR 0 51
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43908: LD_ADDR_VAR 0 52
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44059: LD_ADDR_VAR 0 53
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 0
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: NEG
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: LD_INT 2
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44289: LD_ADDR_VAR 0 54
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 2
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44519: LD_ADDR_VAR 0 55
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44749: LD_ADDR_VAR 0 56
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44979: LD_ADDR_VAR 0 57
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45209: LD_ADDR_VAR 0 58
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 2
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45439: LD_ADDR_VAR 0 59
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45527: LD_ADDR_VAR 0 60
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45615: LD_ADDR_VAR 0 61
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45703: LD_ADDR_VAR 0 62
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45791: LD_ADDR_VAR 0 63
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45879: LD_ADDR_VAR 0 64
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// end ; 1 :
45967: GO 51864
45969: LD_INT 1
45971: DOUBLE
45972: EQUAL
45973: IFTRUE 45977
45975: GO 48600
45977: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45978: LD_ADDR_VAR 0 11
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 3
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46022: LD_ADDR_VAR 0 12
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46063: LD_ADDR_VAR 0 13
46067: PUSH
46068: LD_INT 3
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 3
46080: PUSH
46081: LD_INT 3
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46103: LD_ADDR_VAR 0 14
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46144: LD_ADDR_VAR 0 15
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 3
46162: NEG
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 3
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46188: LD_ADDR_VAR 0 16
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: LD_INT 3
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 3
46207: NEG
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 3
46219: NEG
46220: PUSH
46221: LD_INT 3
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46234: LD_ADDR_VAR 0 17
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 3
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 3
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46278: LD_ADDR_VAR 0 18
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46319: LD_ADDR_VAR 0 19
46323: PUSH
46324: LD_INT 3
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 3
46336: PUSH
46337: LD_INT 3
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: LD_INT 3
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46359: LD_ADDR_VAR 0 20
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: LD_INT 3
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46400: LD_ADDR_VAR 0 21
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 3
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: LIST
46443: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46444: LD_ADDR_VAR 0 22
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 3
46463: NEG
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 3
46475: NEG
46476: PUSH
46477: LD_INT 3
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46490: LD_ADDR_VAR 0 23
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 3
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 4
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: LIST
46533: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46534: LD_ADDR_VAR 0 24
46538: PUSH
46539: LD_INT 3
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 3
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 4
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46575: LD_ADDR_VAR 0 25
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 4
46592: PUSH
46593: LD_INT 3
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: LD_INT 4
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46615: LD_ADDR_VAR 0 26
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 3
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 4
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 3
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: LIST
46655: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46656: LD_ADDR_VAR 0 27
46660: PUSH
46661: LD_INT 3
46663: NEG
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 4
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46700: LD_ADDR_VAR 0 28
46704: PUSH
46705: LD_INT 3
46707: NEG
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 3
46719: NEG
46720: PUSH
46721: LD_INT 4
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 4
46731: NEG
46732: PUSH
46733: LD_INT 3
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46746: LD_ADDR_VAR 0 29
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 4
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 4
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 5
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 5
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 4
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: LD_INT 6
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 6
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 5
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46901: LD_ADDR_VAR 0 30
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 3
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 4
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 4
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 4
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 5
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 5
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 5
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 6
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 6
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47044: LD_ADDR_VAR 0 31
47048: PUSH
47049: LD_INT 3
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 3
47061: PUSH
47062: LD_INT 3
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 4
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 4
47091: PUSH
47092: LD_INT 4
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 3
47101: PUSH
47102: LD_INT 4
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 5
47111: PUSH
47112: LD_INT 4
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 5
47121: PUSH
47122: LD_INT 5
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 4
47131: PUSH
47132: LD_INT 5
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 6
47141: PUSH
47142: LD_INT 5
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 6
47151: PUSH
47152: LD_INT 6
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 5
47161: PUSH
47162: LD_INT 6
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47183: LD_ADDR_VAR 0 32
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 3
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 4
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 4
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 3
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 5
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 5
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 4
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 6
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 6
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 5
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47326: LD_ADDR_VAR 0 33
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 3
47344: NEG
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 3
47355: NEG
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 3
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 4
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 4
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 4
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 5
47412: NEG
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 5
47423: NEG
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 5
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 6
47446: NEG
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 6
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47481: LD_ADDR_VAR 0 34
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: LD_INT 3
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 3
47500: NEG
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: LD_INT 3
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 3
47524: NEG
47525: PUSH
47526: LD_INT 4
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 4
47536: NEG
47537: PUSH
47538: LD_INT 3
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 4
47548: NEG
47549: PUSH
47550: LD_INT 4
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 4
47560: NEG
47561: PUSH
47562: LD_INT 5
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 5
47572: NEG
47573: PUSH
47574: LD_INT 4
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 5
47584: NEG
47585: PUSH
47586: LD_INT 5
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 5
47596: NEG
47597: PUSH
47598: LD_INT 6
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 6
47608: NEG
47609: PUSH
47610: LD_INT 5
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 6
47620: NEG
47621: PUSH
47622: LD_INT 6
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47644: LD_ADDR_VAR 0 41
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 3
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47688: LD_ADDR_VAR 0 42
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 3
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47729: LD_ADDR_VAR 0 43
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 3
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47769: LD_ADDR_VAR 0 44
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: LIST
47809: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47810: LD_ADDR_VAR 0 45
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 3
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: LIST
47853: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47854: LD_ADDR_VAR 0 46
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: NEG
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47900: LD_ADDR_VAR 0 47
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: LD_INT 3
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 3
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47933: LD_ADDR_VAR 0 48
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47964: LD_ADDR_VAR 0 49
47968: PUSH
47969: LD_INT 3
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 3
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47993: LD_ADDR_VAR 0 50
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48022: LD_ADDR_VAR 0 51
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48053: LD_ADDR_VAR 0 52
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48086: LD_ADDR_VAR 0 53
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 3
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48130: LD_ADDR_VAR 0 54
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 3
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48171: LD_ADDR_VAR 0 55
48175: PUSH
48176: LD_INT 3
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 3
48188: PUSH
48189: LD_INT 3
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: LD_INT 3
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48211: LD_ADDR_VAR 0 56
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48252: LD_ADDR_VAR 0 57
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 3
48270: NEG
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48296: LD_ADDR_VAR 0 58
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 3
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 3
48327: NEG
48328: PUSH
48329: LD_INT 3
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: LIST
48341: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48342: LD_ADDR_VAR 0 59
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48386: LD_ADDR_VAR 0 60
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48427: LD_ADDR_VAR 0 61
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48467: LD_ADDR_VAR 0 62
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48508: LD_ADDR_VAR 0 63
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48552: LD_ADDR_VAR 0 64
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: ST_TO_ADDR
// end ; 2 :
48598: GO 51864
48600: LD_INT 2
48602: DOUBLE
48603: EQUAL
48604: IFTRUE 48608
48606: GO 51863
48608: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48609: LD_ADDR_VAR 0 29
48613: PUSH
48614: LD_INT 4
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 4
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 5
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 5
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 4
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 3
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 3
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 3
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 5
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 3
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 4
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 4
48739: PUSH
48740: LD_INT 4
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: PUSH
48750: LD_INT 4
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: LD_INT 3
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 4
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 4
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: LD_INT 4
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 4
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: LD_INT 5
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 5
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: LD_INT 4
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 3
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 5
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 3
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 3
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 3
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 4
48948: NEG
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 4
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 4
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 4
48994: NEG
48995: PUSH
48996: LD_INT 4
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 4
49006: NEG
49007: PUSH
49008: LD_INT 5
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 3
49018: NEG
49019: PUSH
49020: LD_INT 4
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 3
49030: NEG
49031: PUSH
49032: LD_INT 3
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 4
49042: NEG
49043: PUSH
49044: LD_INT 3
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 5
49054: NEG
49055: PUSH
49056: LD_INT 4
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 5
49066: NEG
49067: PUSH
49068: LD_INT 5
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: LD_INT 5
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 5
49090: NEG
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49147: LD_ADDR_VAR 0 30
49151: PUSH
49152: LD_INT 4
49154: PUSH
49155: LD_INT 4
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 4
49164: PUSH
49165: LD_INT 3
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 5
49174: PUSH
49175: LD_INT 4
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 5
49184: PUSH
49185: LD_INT 5
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 4
49194: PUSH
49195: LD_INT 5
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 3
49204: PUSH
49205: LD_INT 4
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: LD_INT 3
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 5
49224: PUSH
49225: LD_INT 3
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: LD_INT 5
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 3
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 3
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 4
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 4
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 3
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 4
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 4
49337: NEG
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 4
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 4
49382: NEG
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 5
49393: NEG
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 5
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 5
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 3
49439: NEG
49440: PUSH
49441: LD_INT 3
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: LD_INT 4
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: LD_INT 3
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 4
49499: NEG
49500: PUSH
49501: LD_INT 3
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 4
49511: NEG
49512: PUSH
49513: LD_INT 4
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 4
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 4
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 4
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 5
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 4
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 3
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 3
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 4
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 5
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 3
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 5
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49694: LD_ADDR_VAR 0 31
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 4
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 3
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 4
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 5
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 5
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 4
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 3
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 5
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: LD_INT 3
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 3
49794: NEG
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 4
49850: NEG
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 4
49861: NEG
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 4
49873: NEG
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 4
49896: NEG
49897: PUSH
49898: LD_INT 4
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 4
49908: NEG
49909: PUSH
49910: LD_INT 5
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: LD_INT 4
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 3
49932: NEG
49933: PUSH
49934: LD_INT 3
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 4
49944: NEG
49945: PUSH
49946: LD_INT 3
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 5
49956: NEG
49957: PUSH
49958: LD_INT 4
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 5
49968: NEG
49969: PUSH
49970: LD_INT 5
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: NEG
49981: PUSH
49982: LD_INT 5
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 5
49992: NEG
49993: PUSH
49994: LD_INT 3
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 3
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 4
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 3
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 3
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 4
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 4
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 4
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 4
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 5
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 5
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 4
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 3
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 3
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 5
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50244: LD_ADDR_VAR 0 32
50248: PUSH
50249: LD_INT 4
50251: NEG
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 4
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 3
50274: NEG
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 4
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 5
50307: NEG
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 5
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 5
50330: NEG
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 3
50342: NEG
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 3
50353: NEG
50354: PUSH
50355: LD_INT 3
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: LD_INT 4
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: LD_INT 3
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: LD_INT 2
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 4
50413: NEG
50414: PUSH
50415: LD_INT 3
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 4
50425: NEG
50426: PUSH
50427: LD_INT 4
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: LD_INT 4
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 4
50449: NEG
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: LD_INT 4
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 5
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: LD_INT 4
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 3
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 4
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: LD_INT 5
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: LD_INT 5
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 4
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 4
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 4
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 4
50656: PUSH
50657: LD_INT 4
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 4
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 5
50676: PUSH
50677: LD_INT 4
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 5
50686: PUSH
50687: LD_INT 5
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 4
50696: PUSH
50697: LD_INT 5
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: LD_INT 4
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 5
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: LD_INT 5
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50791: LD_ADDR_VAR 0 33
50795: PUSH
50796: LD_INT 4
50798: NEG
50799: PUSH
50800: LD_INT 4
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 4
50810: NEG
50811: PUSH
50812: LD_INT 5
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: LD_INT 4
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 3
50834: NEG
50835: PUSH
50836: LD_INT 3
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 4
50846: NEG
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 5
50858: NEG
50859: PUSH
50860: LD_INT 4
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 5
50870: NEG
50871: PUSH
50872: LD_INT 5
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 3
50882: NEG
50883: PUSH
50884: LD_INT 5
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 5
50894: NEG
50895: PUSH
50896: LD_INT 3
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 3
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: LD_INT 4
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 3
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 3
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 4
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 2
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: LD_INT 4
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 4
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 4
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 5
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 5
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 4
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 3
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 5
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: LD_INT 2
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 4
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 4
51131: PUSH
51132: LD_INT 4
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 3
51141: PUSH
51142: LD_INT 4
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 3
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 4
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: LD_INT 4
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 4
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 4
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 5
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 5
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 4
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 5
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51329: LD_ADDR_VAR 0 34
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 4
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 5
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 4
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 4
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 5
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: LD_INT 3
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: LD_INT 5
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 4
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 4
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 3
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 4
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 4
51531: PUSH
51532: LD_INT 4
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 4
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 5
51551: PUSH
51552: LD_INT 4
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 5
51561: PUSH
51562: LD_INT 5
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 4
51571: PUSH
51572: LD_INT 5
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 3
51581: PUSH
51582: LD_INT 4
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 5
51601: PUSH
51602: LD_INT 3
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 3
51611: PUSH
51612: LD_INT 5
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 4
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 4
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 3
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: PUSH
51694: LD_INT 4
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 4
51714: NEG
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 4
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 4
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 5
51770: NEG
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 5
51781: NEG
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 5
51793: NEG
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: ST_TO_ADDR
// end ; end ;
51861: GO 51864
51863: POP
// case btype of b_depot , b_warehouse :
51864: LD_VAR 0 1
51868: PUSH
51869: LD_INT 0
51871: DOUBLE
51872: EQUAL
51873: IFTRUE 51883
51875: LD_INT 1
51877: DOUBLE
51878: EQUAL
51879: IFTRUE 51883
51881: GO 52084
51883: POP
// case nation of nation_american :
51884: LD_VAR 0 5
51888: PUSH
51889: LD_INT 1
51891: DOUBLE
51892: EQUAL
51893: IFTRUE 51897
51895: GO 51953
51897: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51898: LD_ADDR_VAR 0 9
51902: PUSH
51903: LD_VAR 0 11
51907: PUSH
51908: LD_VAR 0 12
51912: PUSH
51913: LD_VAR 0 13
51917: PUSH
51918: LD_VAR 0 14
51922: PUSH
51923: LD_VAR 0 15
51927: PUSH
51928: LD_VAR 0 16
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: PUSH
51941: LD_VAR 0 4
51945: PUSH
51946: LD_INT 1
51948: PLUS
51949: ARRAY
51950: ST_TO_ADDR
51951: GO 52082
51953: LD_INT 2
51955: DOUBLE
51956: EQUAL
51957: IFTRUE 51961
51959: GO 52017
51961: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51962: LD_ADDR_VAR 0 9
51966: PUSH
51967: LD_VAR 0 17
51971: PUSH
51972: LD_VAR 0 18
51976: PUSH
51977: LD_VAR 0 19
51981: PUSH
51982: LD_VAR 0 20
51986: PUSH
51987: LD_VAR 0 21
51991: PUSH
51992: LD_VAR 0 22
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: PUSH
52005: LD_VAR 0 4
52009: PUSH
52010: LD_INT 1
52012: PLUS
52013: ARRAY
52014: ST_TO_ADDR
52015: GO 52082
52017: LD_INT 3
52019: DOUBLE
52020: EQUAL
52021: IFTRUE 52025
52023: GO 52081
52025: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52026: LD_ADDR_VAR 0 9
52030: PUSH
52031: LD_VAR 0 23
52035: PUSH
52036: LD_VAR 0 24
52040: PUSH
52041: LD_VAR 0 25
52045: PUSH
52046: LD_VAR 0 26
52050: PUSH
52051: LD_VAR 0 27
52055: PUSH
52056: LD_VAR 0 28
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: PUSH
52069: LD_VAR 0 4
52073: PUSH
52074: LD_INT 1
52076: PLUS
52077: ARRAY
52078: ST_TO_ADDR
52079: GO 52082
52081: POP
52082: GO 52637
52084: LD_INT 2
52086: DOUBLE
52087: EQUAL
52088: IFTRUE 52098
52090: LD_INT 3
52092: DOUBLE
52093: EQUAL
52094: IFTRUE 52098
52096: GO 52154
52098: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52099: LD_ADDR_VAR 0 9
52103: PUSH
52104: LD_VAR 0 29
52108: PUSH
52109: LD_VAR 0 30
52113: PUSH
52114: LD_VAR 0 31
52118: PUSH
52119: LD_VAR 0 32
52123: PUSH
52124: LD_VAR 0 33
52128: PUSH
52129: LD_VAR 0 34
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: PUSH
52142: LD_VAR 0 4
52146: PUSH
52147: LD_INT 1
52149: PLUS
52150: ARRAY
52151: ST_TO_ADDR
52152: GO 52637
52154: LD_INT 16
52156: DOUBLE
52157: EQUAL
52158: IFTRUE 52216
52160: LD_INT 17
52162: DOUBLE
52163: EQUAL
52164: IFTRUE 52216
52166: LD_INT 18
52168: DOUBLE
52169: EQUAL
52170: IFTRUE 52216
52172: LD_INT 19
52174: DOUBLE
52175: EQUAL
52176: IFTRUE 52216
52178: LD_INT 22
52180: DOUBLE
52181: EQUAL
52182: IFTRUE 52216
52184: LD_INT 20
52186: DOUBLE
52187: EQUAL
52188: IFTRUE 52216
52190: LD_INT 21
52192: DOUBLE
52193: EQUAL
52194: IFTRUE 52216
52196: LD_INT 23
52198: DOUBLE
52199: EQUAL
52200: IFTRUE 52216
52202: LD_INT 24
52204: DOUBLE
52205: EQUAL
52206: IFTRUE 52216
52208: LD_INT 25
52210: DOUBLE
52211: EQUAL
52212: IFTRUE 52216
52214: GO 52272
52216: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52217: LD_ADDR_VAR 0 9
52221: PUSH
52222: LD_VAR 0 35
52226: PUSH
52227: LD_VAR 0 36
52231: PUSH
52232: LD_VAR 0 37
52236: PUSH
52237: LD_VAR 0 38
52241: PUSH
52242: LD_VAR 0 39
52246: PUSH
52247: LD_VAR 0 40
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: PUSH
52260: LD_VAR 0 4
52264: PUSH
52265: LD_INT 1
52267: PLUS
52268: ARRAY
52269: ST_TO_ADDR
52270: GO 52637
52272: LD_INT 6
52274: DOUBLE
52275: EQUAL
52276: IFTRUE 52328
52278: LD_INT 7
52280: DOUBLE
52281: EQUAL
52282: IFTRUE 52328
52284: LD_INT 8
52286: DOUBLE
52287: EQUAL
52288: IFTRUE 52328
52290: LD_INT 13
52292: DOUBLE
52293: EQUAL
52294: IFTRUE 52328
52296: LD_INT 12
52298: DOUBLE
52299: EQUAL
52300: IFTRUE 52328
52302: LD_INT 15
52304: DOUBLE
52305: EQUAL
52306: IFTRUE 52328
52308: LD_INT 11
52310: DOUBLE
52311: EQUAL
52312: IFTRUE 52328
52314: LD_INT 14
52316: DOUBLE
52317: EQUAL
52318: IFTRUE 52328
52320: LD_INT 10
52322: DOUBLE
52323: EQUAL
52324: IFTRUE 52328
52326: GO 52384
52328: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52329: LD_ADDR_VAR 0 9
52333: PUSH
52334: LD_VAR 0 41
52338: PUSH
52339: LD_VAR 0 42
52343: PUSH
52344: LD_VAR 0 43
52348: PUSH
52349: LD_VAR 0 44
52353: PUSH
52354: LD_VAR 0 45
52358: PUSH
52359: LD_VAR 0 46
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: PUSH
52372: LD_VAR 0 4
52376: PUSH
52377: LD_INT 1
52379: PLUS
52380: ARRAY
52381: ST_TO_ADDR
52382: GO 52637
52384: LD_INT 36
52386: DOUBLE
52387: EQUAL
52388: IFTRUE 52392
52390: GO 52448
52392: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52393: LD_ADDR_VAR 0 9
52397: PUSH
52398: LD_VAR 0 47
52402: PUSH
52403: LD_VAR 0 48
52407: PUSH
52408: LD_VAR 0 49
52412: PUSH
52413: LD_VAR 0 50
52417: PUSH
52418: LD_VAR 0 51
52422: PUSH
52423: LD_VAR 0 52
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: PUSH
52436: LD_VAR 0 4
52440: PUSH
52441: LD_INT 1
52443: PLUS
52444: ARRAY
52445: ST_TO_ADDR
52446: GO 52637
52448: LD_INT 4
52450: DOUBLE
52451: EQUAL
52452: IFTRUE 52474
52454: LD_INT 5
52456: DOUBLE
52457: EQUAL
52458: IFTRUE 52474
52460: LD_INT 34
52462: DOUBLE
52463: EQUAL
52464: IFTRUE 52474
52466: LD_INT 37
52468: DOUBLE
52469: EQUAL
52470: IFTRUE 52474
52472: GO 52530
52474: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52475: LD_ADDR_VAR 0 9
52479: PUSH
52480: LD_VAR 0 53
52484: PUSH
52485: LD_VAR 0 54
52489: PUSH
52490: LD_VAR 0 55
52494: PUSH
52495: LD_VAR 0 56
52499: PUSH
52500: LD_VAR 0 57
52504: PUSH
52505: LD_VAR 0 58
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: PUSH
52518: LD_VAR 0 4
52522: PUSH
52523: LD_INT 1
52525: PLUS
52526: ARRAY
52527: ST_TO_ADDR
52528: GO 52637
52530: LD_INT 31
52532: DOUBLE
52533: EQUAL
52534: IFTRUE 52580
52536: LD_INT 32
52538: DOUBLE
52539: EQUAL
52540: IFTRUE 52580
52542: LD_INT 33
52544: DOUBLE
52545: EQUAL
52546: IFTRUE 52580
52548: LD_INT 27
52550: DOUBLE
52551: EQUAL
52552: IFTRUE 52580
52554: LD_INT 26
52556: DOUBLE
52557: EQUAL
52558: IFTRUE 52580
52560: LD_INT 28
52562: DOUBLE
52563: EQUAL
52564: IFTRUE 52580
52566: LD_INT 29
52568: DOUBLE
52569: EQUAL
52570: IFTRUE 52580
52572: LD_INT 30
52574: DOUBLE
52575: EQUAL
52576: IFTRUE 52580
52578: GO 52636
52580: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52581: LD_ADDR_VAR 0 9
52585: PUSH
52586: LD_VAR 0 59
52590: PUSH
52591: LD_VAR 0 60
52595: PUSH
52596: LD_VAR 0 61
52600: PUSH
52601: LD_VAR 0 62
52605: PUSH
52606: LD_VAR 0 63
52610: PUSH
52611: LD_VAR 0 64
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: PUSH
52624: LD_VAR 0 4
52628: PUSH
52629: LD_INT 1
52631: PLUS
52632: ARRAY
52633: ST_TO_ADDR
52634: GO 52637
52636: POP
// temp_list2 = [ ] ;
52637: LD_ADDR_VAR 0 10
52641: PUSH
52642: EMPTY
52643: ST_TO_ADDR
// for i in temp_list do
52644: LD_ADDR_VAR 0 8
52648: PUSH
52649: LD_VAR 0 9
52653: PUSH
52654: FOR_IN
52655: IFFALSE 52707
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52657: LD_ADDR_VAR 0 10
52661: PUSH
52662: LD_VAR 0 10
52666: PUSH
52667: LD_VAR 0 8
52671: PUSH
52672: LD_INT 1
52674: ARRAY
52675: PUSH
52676: LD_VAR 0 2
52680: PLUS
52681: PUSH
52682: LD_VAR 0 8
52686: PUSH
52687: LD_INT 2
52689: ARRAY
52690: PUSH
52691: LD_VAR 0 3
52695: PLUS
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: EMPTY
52702: LIST
52703: ADD
52704: ST_TO_ADDR
52705: GO 52654
52707: POP
52708: POP
// result = temp_list2 ;
52709: LD_ADDR_VAR 0 7
52713: PUSH
52714: LD_VAR 0 10
52718: ST_TO_ADDR
// end ;
52719: LD_VAR 0 7
52723: RET
// export function EnemyInRange ( unit , dist ) ; begin
52724: LD_INT 0
52726: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52727: LD_ADDR_VAR 0 3
52731: PUSH
52732: LD_VAR 0 1
52736: PPUSH
52737: CALL_OW 255
52741: PPUSH
52742: LD_VAR 0 1
52746: PPUSH
52747: CALL_OW 250
52751: PPUSH
52752: LD_VAR 0 1
52756: PPUSH
52757: CALL_OW 251
52761: PPUSH
52762: LD_VAR 0 2
52766: PPUSH
52767: CALL 26126 0 4
52771: PUSH
52772: LD_INT 4
52774: ARRAY
52775: ST_TO_ADDR
// end ;
52776: LD_VAR 0 3
52780: RET
// export function PlayerSeeMe ( unit ) ; begin
52781: LD_INT 0
52783: PPUSH
// result := See ( your_side , unit ) ;
52784: LD_ADDR_VAR 0 2
52788: PUSH
52789: LD_OWVAR 2
52793: PPUSH
52794: LD_VAR 0 1
52798: PPUSH
52799: CALL_OW 292
52803: ST_TO_ADDR
// end ;
52804: LD_VAR 0 2
52808: RET
// export function ReverseDir ( unit ) ; begin
52809: LD_INT 0
52811: PPUSH
// if not unit then
52812: LD_VAR 0 1
52816: NOT
52817: IFFALSE 52821
// exit ;
52819: GO 52844
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52821: LD_ADDR_VAR 0 2
52825: PUSH
52826: LD_VAR 0 1
52830: PPUSH
52831: CALL_OW 254
52835: PUSH
52836: LD_INT 3
52838: PLUS
52839: PUSH
52840: LD_INT 6
52842: MOD
52843: ST_TO_ADDR
// end ;
52844: LD_VAR 0 2
52848: RET
// export function ReverseArray ( array ) ; var i ; begin
52849: LD_INT 0
52851: PPUSH
52852: PPUSH
// if not array then
52853: LD_VAR 0 1
52857: NOT
52858: IFFALSE 52862
// exit ;
52860: GO 52917
// result := [ ] ;
52862: LD_ADDR_VAR 0 2
52866: PUSH
52867: EMPTY
52868: ST_TO_ADDR
// for i := array downto 1 do
52869: LD_ADDR_VAR 0 3
52873: PUSH
52874: DOUBLE
52875: LD_VAR 0 1
52879: INC
52880: ST_TO_ADDR
52881: LD_INT 1
52883: PUSH
52884: FOR_DOWNTO
52885: IFFALSE 52915
// result := Join ( result , array [ i ] ) ;
52887: LD_ADDR_VAR 0 2
52891: PUSH
52892: LD_VAR 0 2
52896: PPUSH
52897: LD_VAR 0 1
52901: PUSH
52902: LD_VAR 0 3
52906: ARRAY
52907: PPUSH
52908: CALL 57561 0 2
52912: ST_TO_ADDR
52913: GO 52884
52915: POP
52916: POP
// end ;
52917: LD_VAR 0 2
52921: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
52922: LD_INT 0
52924: PPUSH
52925: PPUSH
52926: PPUSH
52927: PPUSH
52928: PPUSH
52929: PPUSH
// if not unit or not hexes then
52930: LD_VAR 0 1
52934: NOT
52935: PUSH
52936: LD_VAR 0 2
52940: NOT
52941: OR
52942: IFFALSE 52946
// exit ;
52944: GO 53069
// dist := 9999 ;
52946: LD_ADDR_VAR 0 5
52950: PUSH
52951: LD_INT 9999
52953: ST_TO_ADDR
// for i = 1 to hexes do
52954: LD_ADDR_VAR 0 4
52958: PUSH
52959: DOUBLE
52960: LD_INT 1
52962: DEC
52963: ST_TO_ADDR
52964: LD_VAR 0 2
52968: PUSH
52969: FOR_TO
52970: IFFALSE 53057
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52972: LD_ADDR_VAR 0 6
52976: PUSH
52977: LD_VAR 0 1
52981: PPUSH
52982: LD_VAR 0 2
52986: PUSH
52987: LD_VAR 0 4
52991: ARRAY
52992: PUSH
52993: LD_INT 1
52995: ARRAY
52996: PPUSH
52997: LD_VAR 0 2
53001: PUSH
53002: LD_VAR 0 4
53006: ARRAY
53007: PUSH
53008: LD_INT 2
53010: ARRAY
53011: PPUSH
53012: CALL_OW 297
53016: ST_TO_ADDR
// if tdist < dist then
53017: LD_VAR 0 6
53021: PUSH
53022: LD_VAR 0 5
53026: LESS
53027: IFFALSE 53055
// begin hex := hexes [ i ] ;
53029: LD_ADDR_VAR 0 8
53033: PUSH
53034: LD_VAR 0 2
53038: PUSH
53039: LD_VAR 0 4
53043: ARRAY
53044: ST_TO_ADDR
// dist := tdist ;
53045: LD_ADDR_VAR 0 5
53049: PUSH
53050: LD_VAR 0 6
53054: ST_TO_ADDR
// end ; end ;
53055: GO 52969
53057: POP
53058: POP
// result := hex ;
53059: LD_ADDR_VAR 0 3
53063: PUSH
53064: LD_VAR 0 8
53068: ST_TO_ADDR
// end ;
53069: LD_VAR 0 3
53073: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53074: LD_INT 0
53076: PPUSH
53077: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53078: LD_VAR 0 1
53082: NOT
53083: PUSH
53084: LD_VAR 0 1
53088: PUSH
53089: LD_INT 21
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 23
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PPUSH
53113: CALL_OW 69
53117: IN
53118: NOT
53119: OR
53120: IFFALSE 53124
// exit ;
53122: GO 53171
// for i = 1 to 3 do
53124: LD_ADDR_VAR 0 3
53128: PUSH
53129: DOUBLE
53130: LD_INT 1
53132: DEC
53133: ST_TO_ADDR
53134: LD_INT 3
53136: PUSH
53137: FOR_TO
53138: IFFALSE 53169
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53140: LD_VAR 0 1
53144: PPUSH
53145: CALL_OW 250
53149: PPUSH
53150: LD_VAR 0 1
53154: PPUSH
53155: CALL_OW 251
53159: PPUSH
53160: LD_INT 1
53162: PPUSH
53163: CALL_OW 453
53167: GO 53137
53169: POP
53170: POP
// end ;
53171: LD_VAR 0 2
53175: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53176: LD_INT 0
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53184: LD_VAR 0 1
53188: NOT
53189: PUSH
53190: LD_VAR 0 2
53194: NOT
53195: OR
53196: PUSH
53197: LD_VAR 0 1
53201: PPUSH
53202: CALL_OW 314
53206: OR
53207: IFFALSE 53211
// exit ;
53209: GO 53678
// if GetLives ( i ) < 250 then
53211: LD_VAR 0 4
53215: PPUSH
53216: CALL_OW 256
53220: PUSH
53221: LD_INT 250
53223: LESS
53224: IFFALSE 53237
// begin ComAutodestruct ( i ) ;
53226: LD_VAR 0 4
53230: PPUSH
53231: CALL 53074 0 1
// exit ;
53235: GO 53678
// end ; x := GetX ( enemy_unit ) ;
53237: LD_ADDR_VAR 0 7
53241: PUSH
53242: LD_VAR 0 2
53246: PPUSH
53247: CALL_OW 250
53251: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53252: LD_ADDR_VAR 0 8
53256: PUSH
53257: LD_VAR 0 2
53261: PPUSH
53262: CALL_OW 251
53266: ST_TO_ADDR
// if not x or not y then
53267: LD_VAR 0 7
53271: NOT
53272: PUSH
53273: LD_VAR 0 8
53277: NOT
53278: OR
53279: IFFALSE 53283
// exit ;
53281: GO 53678
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53283: LD_ADDR_VAR 0 6
53287: PUSH
53288: LD_VAR 0 7
53292: PPUSH
53293: LD_INT 0
53295: PPUSH
53296: LD_INT 4
53298: PPUSH
53299: CALL_OW 272
53303: PUSH
53304: LD_VAR 0 8
53308: PPUSH
53309: LD_INT 0
53311: PPUSH
53312: LD_INT 4
53314: PPUSH
53315: CALL_OW 273
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_VAR 0 7
53328: PPUSH
53329: LD_INT 1
53331: PPUSH
53332: LD_INT 4
53334: PPUSH
53335: CALL_OW 272
53339: PUSH
53340: LD_VAR 0 8
53344: PPUSH
53345: LD_INT 1
53347: PPUSH
53348: LD_INT 4
53350: PPUSH
53351: CALL_OW 273
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_VAR 0 7
53364: PPUSH
53365: LD_INT 2
53367: PPUSH
53368: LD_INT 4
53370: PPUSH
53371: CALL_OW 272
53375: PUSH
53376: LD_VAR 0 8
53380: PPUSH
53381: LD_INT 2
53383: PPUSH
53384: LD_INT 4
53386: PPUSH
53387: CALL_OW 273
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_VAR 0 7
53400: PPUSH
53401: LD_INT 3
53403: PPUSH
53404: LD_INT 4
53406: PPUSH
53407: CALL_OW 272
53411: PUSH
53412: LD_VAR 0 8
53416: PPUSH
53417: LD_INT 3
53419: PPUSH
53420: LD_INT 4
53422: PPUSH
53423: CALL_OW 273
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_VAR 0 7
53436: PPUSH
53437: LD_INT 4
53439: PPUSH
53440: LD_INT 4
53442: PPUSH
53443: CALL_OW 272
53447: PUSH
53448: LD_VAR 0 8
53452: PPUSH
53453: LD_INT 4
53455: PPUSH
53456: LD_INT 4
53458: PPUSH
53459: CALL_OW 273
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_VAR 0 7
53472: PPUSH
53473: LD_INT 5
53475: PPUSH
53476: LD_INT 4
53478: PPUSH
53479: CALL_OW 272
53483: PUSH
53484: LD_VAR 0 8
53488: PPUSH
53489: LD_INT 5
53491: PPUSH
53492: LD_INT 4
53494: PPUSH
53495: CALL_OW 273
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: ST_TO_ADDR
// for i = tmp downto 1 do
53512: LD_ADDR_VAR 0 4
53516: PUSH
53517: DOUBLE
53518: LD_VAR 0 6
53522: INC
53523: ST_TO_ADDR
53524: LD_INT 1
53526: PUSH
53527: FOR_DOWNTO
53528: IFFALSE 53629
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53530: LD_VAR 0 6
53534: PUSH
53535: LD_VAR 0 4
53539: ARRAY
53540: PUSH
53541: LD_INT 1
53543: ARRAY
53544: PPUSH
53545: LD_VAR 0 6
53549: PUSH
53550: LD_VAR 0 4
53554: ARRAY
53555: PUSH
53556: LD_INT 2
53558: ARRAY
53559: PPUSH
53560: CALL_OW 488
53564: NOT
53565: PUSH
53566: LD_VAR 0 6
53570: PUSH
53571: LD_VAR 0 4
53575: ARRAY
53576: PUSH
53577: LD_INT 1
53579: ARRAY
53580: PPUSH
53581: LD_VAR 0 6
53585: PUSH
53586: LD_VAR 0 4
53590: ARRAY
53591: PUSH
53592: LD_INT 2
53594: ARRAY
53595: PPUSH
53596: CALL_OW 428
53600: PUSH
53601: LD_INT 0
53603: NONEQUAL
53604: OR
53605: IFFALSE 53627
// tmp := Delete ( tmp , i ) ;
53607: LD_ADDR_VAR 0 6
53611: PUSH
53612: LD_VAR 0 6
53616: PPUSH
53617: LD_VAR 0 4
53621: PPUSH
53622: CALL_OW 3
53626: ST_TO_ADDR
53627: GO 53527
53629: POP
53630: POP
// j := GetClosestHex ( unit , tmp ) ;
53631: LD_ADDR_VAR 0 5
53635: PUSH
53636: LD_VAR 0 1
53640: PPUSH
53641: LD_VAR 0 6
53645: PPUSH
53646: CALL 52922 0 2
53650: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53651: LD_VAR 0 1
53655: PPUSH
53656: LD_VAR 0 5
53660: PUSH
53661: LD_INT 1
53663: ARRAY
53664: PPUSH
53665: LD_VAR 0 5
53669: PUSH
53670: LD_INT 2
53672: ARRAY
53673: PPUSH
53674: CALL_OW 111
// end ;
53678: LD_VAR 0 3
53682: RET
// export function PrepareApemanSoldier ( ) ; begin
53683: LD_INT 0
53685: PPUSH
// uc_nation := 0 ;
53686: LD_ADDR_OWVAR 21
53690: PUSH
53691: LD_INT 0
53693: ST_TO_ADDR
// hc_sex := sex_male ;
53694: LD_ADDR_OWVAR 27
53698: PUSH
53699: LD_INT 1
53701: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
53702: LD_ADDR_OWVAR 28
53706: PUSH
53707: LD_INT 15
53709: ST_TO_ADDR
// hc_gallery :=  ;
53710: LD_ADDR_OWVAR 33
53714: PUSH
53715: LD_STRING 
53717: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53718: LD_ADDR_OWVAR 31
53722: PUSH
53723: LD_INT 0
53725: PPUSH
53726: LD_INT 3
53728: PPUSH
53729: CALL_OW 12
53733: PUSH
53734: LD_INT 0
53736: PPUSH
53737: LD_INT 3
53739: PPUSH
53740: CALL_OW 12
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: ST_TO_ADDR
// end ;
53757: LD_VAR 0 1
53761: RET
// export function PrepareApemanEngineer ( ) ; begin
53762: LD_INT 0
53764: PPUSH
// uc_nation := 0 ;
53765: LD_ADDR_OWVAR 21
53769: PUSH
53770: LD_INT 0
53772: ST_TO_ADDR
// hc_sex := sex_male ;
53773: LD_ADDR_OWVAR 27
53777: PUSH
53778: LD_INT 1
53780: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53781: LD_ADDR_OWVAR 28
53785: PUSH
53786: LD_INT 16
53788: ST_TO_ADDR
// hc_gallery :=  ;
53789: LD_ADDR_OWVAR 33
53793: PUSH
53794: LD_STRING 
53796: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53797: LD_ADDR_OWVAR 31
53801: PUSH
53802: LD_INT 0
53804: PPUSH
53805: LD_INT 3
53807: PPUSH
53808: CALL_OW 12
53812: PUSH
53813: LD_INT 0
53815: PPUSH
53816: LD_INT 3
53818: PPUSH
53819: CALL_OW 12
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: ST_TO_ADDR
// end ;
53836: LD_VAR 0 1
53840: RET
// export function PrepareApeman ( agressivity ) ; begin
53841: LD_INT 0
53843: PPUSH
// uc_side := 0 ;
53844: LD_ADDR_OWVAR 20
53848: PUSH
53849: LD_INT 0
53851: ST_TO_ADDR
// uc_nation := 0 ;
53852: LD_ADDR_OWVAR 21
53856: PUSH
53857: LD_INT 0
53859: ST_TO_ADDR
// hc_sex := sex_male ;
53860: LD_ADDR_OWVAR 27
53864: PUSH
53865: LD_INT 1
53867: ST_TO_ADDR
// hc_class := class_apeman ;
53868: LD_ADDR_OWVAR 28
53872: PUSH
53873: LD_INT 12
53875: ST_TO_ADDR
// hc_gallery :=  ;
53876: LD_ADDR_OWVAR 33
53880: PUSH
53881: LD_STRING 
53883: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53884: LD_ADDR_OWVAR 35
53888: PUSH
53889: LD_VAR 0 1
53893: NEG
53894: PPUSH
53895: LD_VAR 0 1
53899: PPUSH
53900: CALL_OW 12
53904: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53905: LD_ADDR_OWVAR 31
53909: PUSH
53910: LD_INT 0
53912: PPUSH
53913: LD_INT 3
53915: PPUSH
53916: CALL_OW 12
53920: PUSH
53921: LD_INT 0
53923: PPUSH
53924: LD_INT 3
53926: PPUSH
53927: CALL_OW 12
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: ST_TO_ADDR
// end ;
53944: LD_VAR 0 2
53948: RET
// export function PrepareTiger ( agressivity ) ; begin
53949: LD_INT 0
53951: PPUSH
// uc_side := 0 ;
53952: LD_ADDR_OWVAR 20
53956: PUSH
53957: LD_INT 0
53959: ST_TO_ADDR
// uc_nation := 0 ;
53960: LD_ADDR_OWVAR 21
53964: PUSH
53965: LD_INT 0
53967: ST_TO_ADDR
// hc_class := class_tiger ;
53968: LD_ADDR_OWVAR 28
53972: PUSH
53973: LD_INT 14
53975: ST_TO_ADDR
// hc_gallery :=  ;
53976: LD_ADDR_OWVAR 33
53980: PUSH
53981: LD_STRING 
53983: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53984: LD_ADDR_OWVAR 35
53988: PUSH
53989: LD_VAR 0 1
53993: NEG
53994: PPUSH
53995: LD_VAR 0 1
53999: PPUSH
54000: CALL_OW 12
54004: ST_TO_ADDR
// end ;
54005: LD_VAR 0 2
54009: RET
// export function PrepareEnchidna ( ) ; begin
54010: LD_INT 0
54012: PPUSH
// uc_side := 0 ;
54013: LD_ADDR_OWVAR 20
54017: PUSH
54018: LD_INT 0
54020: ST_TO_ADDR
// uc_nation := 0 ;
54021: LD_ADDR_OWVAR 21
54025: PUSH
54026: LD_INT 0
54028: ST_TO_ADDR
// hc_class := class_baggie ;
54029: LD_ADDR_OWVAR 28
54033: PUSH
54034: LD_INT 13
54036: ST_TO_ADDR
// hc_gallery :=  ;
54037: LD_ADDR_OWVAR 33
54041: PUSH
54042: LD_STRING 
54044: ST_TO_ADDR
// end ;
54045: LD_VAR 0 1
54049: RET
// export function PrepareFrog ( ) ; begin
54050: LD_INT 0
54052: PPUSH
// uc_side := 0 ;
54053: LD_ADDR_OWVAR 20
54057: PUSH
54058: LD_INT 0
54060: ST_TO_ADDR
// uc_nation := 0 ;
54061: LD_ADDR_OWVAR 21
54065: PUSH
54066: LD_INT 0
54068: ST_TO_ADDR
// hc_class := class_frog ;
54069: LD_ADDR_OWVAR 28
54073: PUSH
54074: LD_INT 19
54076: ST_TO_ADDR
// hc_gallery :=  ;
54077: LD_ADDR_OWVAR 33
54081: PUSH
54082: LD_STRING 
54084: ST_TO_ADDR
// end ;
54085: LD_VAR 0 1
54089: RET
// export function PrepareFish ( ) ; begin
54090: LD_INT 0
54092: PPUSH
// uc_side := 0 ;
54093: LD_ADDR_OWVAR 20
54097: PUSH
54098: LD_INT 0
54100: ST_TO_ADDR
// uc_nation := 0 ;
54101: LD_ADDR_OWVAR 21
54105: PUSH
54106: LD_INT 0
54108: ST_TO_ADDR
// hc_class := class_fish ;
54109: LD_ADDR_OWVAR 28
54113: PUSH
54114: LD_INT 20
54116: ST_TO_ADDR
// hc_gallery :=  ;
54117: LD_ADDR_OWVAR 33
54121: PUSH
54122: LD_STRING 
54124: ST_TO_ADDR
// end ;
54125: LD_VAR 0 1
54129: RET
// export function PrepareBird ( ) ; begin
54130: LD_INT 0
54132: PPUSH
// uc_side := 0 ;
54133: LD_ADDR_OWVAR 20
54137: PUSH
54138: LD_INT 0
54140: ST_TO_ADDR
// uc_nation := 0 ;
54141: LD_ADDR_OWVAR 21
54145: PUSH
54146: LD_INT 0
54148: ST_TO_ADDR
// hc_class := class_phororhacos ;
54149: LD_ADDR_OWVAR 28
54153: PUSH
54154: LD_INT 18
54156: ST_TO_ADDR
// hc_gallery :=  ;
54157: LD_ADDR_OWVAR 33
54161: PUSH
54162: LD_STRING 
54164: ST_TO_ADDR
// end ;
54165: LD_VAR 0 1
54169: RET
// export function PrepareHorse ( ) ; begin
54170: LD_INT 0
54172: PPUSH
// uc_side := 0 ;
54173: LD_ADDR_OWVAR 20
54177: PUSH
54178: LD_INT 0
54180: ST_TO_ADDR
// uc_nation := 0 ;
54181: LD_ADDR_OWVAR 21
54185: PUSH
54186: LD_INT 0
54188: ST_TO_ADDR
// hc_class := class_horse ;
54189: LD_ADDR_OWVAR 28
54193: PUSH
54194: LD_INT 21
54196: ST_TO_ADDR
// hc_gallery :=  ;
54197: LD_ADDR_OWVAR 33
54201: PUSH
54202: LD_STRING 
54204: ST_TO_ADDR
// end ;
54205: LD_VAR 0 1
54209: RET
// export function PrepareMastodont ( ) ; begin
54210: LD_INT 0
54212: PPUSH
// uc_side := 0 ;
54213: LD_ADDR_OWVAR 20
54217: PUSH
54218: LD_INT 0
54220: ST_TO_ADDR
// uc_nation := 0 ;
54221: LD_ADDR_OWVAR 21
54225: PUSH
54226: LD_INT 0
54228: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54229: LD_ADDR_OWVAR 37
54233: PUSH
54234: LD_INT 31
54236: ST_TO_ADDR
// vc_control := control_rider ;
54237: LD_ADDR_OWVAR 38
54241: PUSH
54242: LD_INT 4
54244: ST_TO_ADDR
// end ;
54245: LD_VAR 0 1
54249: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54250: LD_INT 0
54252: PPUSH
54253: PPUSH
54254: PPUSH
// uc_side = 0 ;
54255: LD_ADDR_OWVAR 20
54259: PUSH
54260: LD_INT 0
54262: ST_TO_ADDR
// uc_nation = 0 ;
54263: LD_ADDR_OWVAR 21
54267: PUSH
54268: LD_INT 0
54270: ST_TO_ADDR
// InitHc_All ( ) ;
54271: CALL_OW 584
// InitVc ;
54275: CALL_OW 20
// if mastodonts then
54279: LD_VAR 0 6
54283: IFFALSE 54350
// for i = 1 to mastodonts do
54285: LD_ADDR_VAR 0 11
54289: PUSH
54290: DOUBLE
54291: LD_INT 1
54293: DEC
54294: ST_TO_ADDR
54295: LD_VAR 0 6
54299: PUSH
54300: FOR_TO
54301: IFFALSE 54348
// begin vc_chassis := 31 ;
54303: LD_ADDR_OWVAR 37
54307: PUSH
54308: LD_INT 31
54310: ST_TO_ADDR
// vc_control := control_rider ;
54311: LD_ADDR_OWVAR 38
54315: PUSH
54316: LD_INT 4
54318: ST_TO_ADDR
// animal := CreateVehicle ;
54319: LD_ADDR_VAR 0 12
54323: PUSH
54324: CALL_OW 45
54328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54329: LD_VAR 0 12
54333: PPUSH
54334: LD_VAR 0 8
54338: PPUSH
54339: LD_INT 0
54341: PPUSH
54342: CALL 56478 0 3
// end ;
54346: GO 54300
54348: POP
54349: POP
// if horses then
54350: LD_VAR 0 5
54354: IFFALSE 54421
// for i = 1 to horses do
54356: LD_ADDR_VAR 0 11
54360: PUSH
54361: DOUBLE
54362: LD_INT 1
54364: DEC
54365: ST_TO_ADDR
54366: LD_VAR 0 5
54370: PUSH
54371: FOR_TO
54372: IFFALSE 54419
// begin hc_class := 21 ;
54374: LD_ADDR_OWVAR 28
54378: PUSH
54379: LD_INT 21
54381: ST_TO_ADDR
// hc_gallery :=  ;
54382: LD_ADDR_OWVAR 33
54386: PUSH
54387: LD_STRING 
54389: ST_TO_ADDR
// animal := CreateHuman ;
54390: LD_ADDR_VAR 0 12
54394: PUSH
54395: CALL_OW 44
54399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54400: LD_VAR 0 12
54404: PPUSH
54405: LD_VAR 0 8
54409: PPUSH
54410: LD_INT 0
54412: PPUSH
54413: CALL 56478 0 3
// end ;
54417: GO 54371
54419: POP
54420: POP
// if birds then
54421: LD_VAR 0 1
54425: IFFALSE 54492
// for i = 1 to birds do
54427: LD_ADDR_VAR 0 11
54431: PUSH
54432: DOUBLE
54433: LD_INT 1
54435: DEC
54436: ST_TO_ADDR
54437: LD_VAR 0 1
54441: PUSH
54442: FOR_TO
54443: IFFALSE 54490
// begin hc_class = 18 ;
54445: LD_ADDR_OWVAR 28
54449: PUSH
54450: LD_INT 18
54452: ST_TO_ADDR
// hc_gallery =  ;
54453: LD_ADDR_OWVAR 33
54457: PUSH
54458: LD_STRING 
54460: ST_TO_ADDR
// animal := CreateHuman ;
54461: LD_ADDR_VAR 0 12
54465: PUSH
54466: CALL_OW 44
54470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54471: LD_VAR 0 12
54475: PPUSH
54476: LD_VAR 0 8
54480: PPUSH
54481: LD_INT 0
54483: PPUSH
54484: CALL 56478 0 3
// end ;
54488: GO 54442
54490: POP
54491: POP
// if tigers then
54492: LD_VAR 0 2
54496: IFFALSE 54580
// for i = 1 to tigers do
54498: LD_ADDR_VAR 0 11
54502: PUSH
54503: DOUBLE
54504: LD_INT 1
54506: DEC
54507: ST_TO_ADDR
54508: LD_VAR 0 2
54512: PUSH
54513: FOR_TO
54514: IFFALSE 54578
// begin hc_class = class_tiger ;
54516: LD_ADDR_OWVAR 28
54520: PUSH
54521: LD_INT 14
54523: ST_TO_ADDR
// hc_gallery =  ;
54524: LD_ADDR_OWVAR 33
54528: PUSH
54529: LD_STRING 
54531: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54532: LD_ADDR_OWVAR 35
54536: PUSH
54537: LD_INT 7
54539: NEG
54540: PPUSH
54541: LD_INT 7
54543: PPUSH
54544: CALL_OW 12
54548: ST_TO_ADDR
// animal := CreateHuman ;
54549: LD_ADDR_VAR 0 12
54553: PUSH
54554: CALL_OW 44
54558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54559: LD_VAR 0 12
54563: PPUSH
54564: LD_VAR 0 8
54568: PPUSH
54569: LD_INT 0
54571: PPUSH
54572: CALL 56478 0 3
// end ;
54576: GO 54513
54578: POP
54579: POP
// if apemans then
54580: LD_VAR 0 3
54584: IFFALSE 54707
// for i = 1 to apemans do
54586: LD_ADDR_VAR 0 11
54590: PUSH
54591: DOUBLE
54592: LD_INT 1
54594: DEC
54595: ST_TO_ADDR
54596: LD_VAR 0 3
54600: PUSH
54601: FOR_TO
54602: IFFALSE 54705
// begin hc_class = class_apeman ;
54604: LD_ADDR_OWVAR 28
54608: PUSH
54609: LD_INT 12
54611: ST_TO_ADDR
// hc_gallery =  ;
54612: LD_ADDR_OWVAR 33
54616: PUSH
54617: LD_STRING 
54619: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54620: LD_ADDR_OWVAR 35
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PPUSH
54629: LD_INT 2
54631: PPUSH
54632: CALL_OW 12
54636: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54637: LD_ADDR_OWVAR 31
54641: PUSH
54642: LD_INT 1
54644: PPUSH
54645: LD_INT 3
54647: PPUSH
54648: CALL_OW 12
54652: PUSH
54653: LD_INT 1
54655: PPUSH
54656: LD_INT 3
54658: PPUSH
54659: CALL_OW 12
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: ST_TO_ADDR
// animal := CreateHuman ;
54676: LD_ADDR_VAR 0 12
54680: PUSH
54681: CALL_OW 44
54685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54686: LD_VAR 0 12
54690: PPUSH
54691: LD_VAR 0 8
54695: PPUSH
54696: LD_INT 0
54698: PPUSH
54699: CALL 56478 0 3
// end ;
54703: GO 54601
54705: POP
54706: POP
// if enchidnas then
54707: LD_VAR 0 4
54711: IFFALSE 54778
// for i = 1 to enchidnas do
54713: LD_ADDR_VAR 0 11
54717: PUSH
54718: DOUBLE
54719: LD_INT 1
54721: DEC
54722: ST_TO_ADDR
54723: LD_VAR 0 4
54727: PUSH
54728: FOR_TO
54729: IFFALSE 54776
// begin hc_class = 13 ;
54731: LD_ADDR_OWVAR 28
54735: PUSH
54736: LD_INT 13
54738: ST_TO_ADDR
// hc_gallery =  ;
54739: LD_ADDR_OWVAR 33
54743: PUSH
54744: LD_STRING 
54746: ST_TO_ADDR
// animal := CreateHuman ;
54747: LD_ADDR_VAR 0 12
54751: PUSH
54752: CALL_OW 44
54756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54757: LD_VAR 0 12
54761: PPUSH
54762: LD_VAR 0 8
54766: PPUSH
54767: LD_INT 0
54769: PPUSH
54770: CALL 56478 0 3
// end ;
54774: GO 54728
54776: POP
54777: POP
// if fishes then
54778: LD_VAR 0 7
54782: IFFALSE 54849
// for i = 1 to fishes do
54784: LD_ADDR_VAR 0 11
54788: PUSH
54789: DOUBLE
54790: LD_INT 1
54792: DEC
54793: ST_TO_ADDR
54794: LD_VAR 0 7
54798: PUSH
54799: FOR_TO
54800: IFFALSE 54847
// begin hc_class = 20 ;
54802: LD_ADDR_OWVAR 28
54806: PUSH
54807: LD_INT 20
54809: ST_TO_ADDR
// hc_gallery =  ;
54810: LD_ADDR_OWVAR 33
54814: PUSH
54815: LD_STRING 
54817: ST_TO_ADDR
// animal := CreateHuman ;
54818: LD_ADDR_VAR 0 12
54822: PUSH
54823: CALL_OW 44
54827: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54828: LD_VAR 0 12
54832: PPUSH
54833: LD_VAR 0 9
54837: PPUSH
54838: LD_INT 0
54840: PPUSH
54841: CALL 56478 0 3
// end ;
54845: GO 54799
54847: POP
54848: POP
// end ;
54849: LD_VAR 0 10
54853: RET
// export function WantHeal ( sci , unit ) ; begin
54854: LD_INT 0
54856: PPUSH
// if GetTaskList ( sci ) > 0 then
54857: LD_VAR 0 1
54861: PPUSH
54862: CALL_OW 437
54866: PUSH
54867: LD_INT 0
54869: GREATER
54870: IFFALSE 54940
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54872: LD_VAR 0 1
54876: PPUSH
54877: CALL_OW 437
54881: PUSH
54882: LD_INT 1
54884: ARRAY
54885: PUSH
54886: LD_INT 1
54888: ARRAY
54889: PUSH
54890: LD_STRING l
54892: EQUAL
54893: PUSH
54894: LD_VAR 0 1
54898: PPUSH
54899: CALL_OW 437
54903: PUSH
54904: LD_INT 1
54906: ARRAY
54907: PUSH
54908: LD_INT 4
54910: ARRAY
54911: PUSH
54912: LD_VAR 0 2
54916: EQUAL
54917: AND
54918: IFFALSE 54930
// result := true else
54920: LD_ADDR_VAR 0 3
54924: PUSH
54925: LD_INT 1
54927: ST_TO_ADDR
54928: GO 54938
// result := false ;
54930: LD_ADDR_VAR 0 3
54934: PUSH
54935: LD_INT 0
54937: ST_TO_ADDR
// end else
54938: GO 54948
// result := false ;
54940: LD_ADDR_VAR 0 3
54944: PUSH
54945: LD_INT 0
54947: ST_TO_ADDR
// end ;
54948: LD_VAR 0 3
54952: RET
// export function HealTarget ( sci ) ; begin
54953: LD_INT 0
54955: PPUSH
// if not sci then
54956: LD_VAR 0 1
54960: NOT
54961: IFFALSE 54965
// exit ;
54963: GO 55030
// result := 0 ;
54965: LD_ADDR_VAR 0 2
54969: PUSH
54970: LD_INT 0
54972: ST_TO_ADDR
// if GetTaskList ( sci ) then
54973: LD_VAR 0 1
54977: PPUSH
54978: CALL_OW 437
54982: IFFALSE 55030
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54984: LD_VAR 0 1
54988: PPUSH
54989: CALL_OW 437
54993: PUSH
54994: LD_INT 1
54996: ARRAY
54997: PUSH
54998: LD_INT 1
55000: ARRAY
55001: PUSH
55002: LD_STRING l
55004: EQUAL
55005: IFFALSE 55030
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55007: LD_ADDR_VAR 0 2
55011: PUSH
55012: LD_VAR 0 1
55016: PPUSH
55017: CALL_OW 437
55021: PUSH
55022: LD_INT 1
55024: ARRAY
55025: PUSH
55026: LD_INT 4
55028: ARRAY
55029: ST_TO_ADDR
// end ;
55030: LD_VAR 0 2
55034: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55035: LD_INT 0
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
// if not base_units then
55041: LD_VAR 0 1
55045: NOT
55046: IFFALSE 55050
// exit ;
55048: GO 55137
// result := false ;
55050: LD_ADDR_VAR 0 2
55054: PUSH
55055: LD_INT 0
55057: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55058: LD_ADDR_VAR 0 5
55062: PUSH
55063: LD_VAR 0 1
55067: PPUSH
55068: LD_INT 21
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PPUSH
55078: CALL_OW 72
55082: ST_TO_ADDR
// if not tmp then
55083: LD_VAR 0 5
55087: NOT
55088: IFFALSE 55092
// exit ;
55090: GO 55137
// for i in tmp do
55092: LD_ADDR_VAR 0 3
55096: PUSH
55097: LD_VAR 0 5
55101: PUSH
55102: FOR_IN
55103: IFFALSE 55135
// begin result := EnemyInRange ( i , 22 ) ;
55105: LD_ADDR_VAR 0 2
55109: PUSH
55110: LD_VAR 0 3
55114: PPUSH
55115: LD_INT 22
55117: PPUSH
55118: CALL 52724 0 2
55122: ST_TO_ADDR
// if result then
55123: LD_VAR 0 2
55127: IFFALSE 55133
// exit ;
55129: POP
55130: POP
55131: GO 55137
// end ;
55133: GO 55102
55135: POP
55136: POP
// end ;
55137: LD_VAR 0 2
55141: RET
// export function FilterByTag ( units , tag ) ; begin
55142: LD_INT 0
55144: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55145: LD_ADDR_VAR 0 3
55149: PUSH
55150: LD_VAR 0 1
55154: PPUSH
55155: LD_INT 120
55157: PUSH
55158: LD_VAR 0 2
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PPUSH
55167: CALL_OW 72
55171: ST_TO_ADDR
// end ;
55172: LD_VAR 0 3
55176: RET
// export function IsDriver ( un ) ; begin
55177: LD_INT 0
55179: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55180: LD_ADDR_VAR 0 2
55184: PUSH
55185: LD_VAR 0 1
55189: PUSH
55190: LD_INT 55
55192: PUSH
55193: EMPTY
55194: LIST
55195: PPUSH
55196: CALL_OW 69
55200: IN
55201: ST_TO_ADDR
// end ;
55202: LD_VAR 0 2
55206: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55207: LD_INT 0
55209: PPUSH
55210: PPUSH
// list := [ ] ;
55211: LD_ADDR_VAR 0 5
55215: PUSH
55216: EMPTY
55217: ST_TO_ADDR
// case d of 0 :
55218: LD_VAR 0 3
55222: PUSH
55223: LD_INT 0
55225: DOUBLE
55226: EQUAL
55227: IFTRUE 55231
55229: GO 55364
55231: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55232: LD_ADDR_VAR 0 5
55236: PUSH
55237: LD_VAR 0 1
55241: PUSH
55242: LD_INT 4
55244: MINUS
55245: PUSH
55246: LD_VAR 0 2
55250: PUSH
55251: LD_INT 4
55253: MINUS
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: LIST
55262: PUSH
55263: LD_VAR 0 1
55267: PUSH
55268: LD_INT 3
55270: MINUS
55271: PUSH
55272: LD_VAR 0 2
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: LIST
55284: PUSH
55285: LD_VAR 0 1
55289: PUSH
55290: LD_INT 4
55292: PLUS
55293: PUSH
55294: LD_VAR 0 2
55298: PUSH
55299: LD_INT 4
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: PUSH
55307: LD_VAR 0 1
55311: PUSH
55312: LD_INT 3
55314: PLUS
55315: PUSH
55316: LD_VAR 0 2
55320: PUSH
55321: LD_INT 3
55323: PLUS
55324: PUSH
55325: LD_INT 5
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: PUSH
55333: LD_VAR 0 1
55337: PUSH
55338: LD_VAR 0 2
55342: PUSH
55343: LD_INT 4
55345: PLUS
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// end ; 1 :
55362: GO 56062
55364: LD_INT 1
55366: DOUBLE
55367: EQUAL
55368: IFTRUE 55372
55370: GO 55505
55372: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55373: LD_ADDR_VAR 0 5
55377: PUSH
55378: LD_VAR 0 1
55382: PUSH
55383: LD_VAR 0 2
55387: PUSH
55388: LD_INT 4
55390: MINUS
55391: PUSH
55392: LD_INT 3
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: LIST
55399: PUSH
55400: LD_VAR 0 1
55404: PUSH
55405: LD_INT 3
55407: MINUS
55408: PUSH
55409: LD_VAR 0 2
55413: PUSH
55414: LD_INT 3
55416: MINUS
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: LIST
55425: PUSH
55426: LD_VAR 0 1
55430: PUSH
55431: LD_INT 4
55433: MINUS
55434: PUSH
55435: LD_VAR 0 2
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: LIST
55447: PUSH
55448: LD_VAR 0 1
55452: PUSH
55453: LD_VAR 0 2
55457: PUSH
55458: LD_INT 3
55460: PLUS
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: PUSH
55470: LD_VAR 0 1
55474: PUSH
55475: LD_INT 4
55477: PLUS
55478: PUSH
55479: LD_VAR 0 2
55483: PUSH
55484: LD_INT 4
55486: PLUS
55487: PUSH
55488: LD_INT 5
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// end ; 2 :
55503: GO 56062
55505: LD_INT 2
55507: DOUBLE
55508: EQUAL
55509: IFTRUE 55513
55511: GO 55642
55513: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55514: LD_ADDR_VAR 0 5
55518: PUSH
55519: LD_VAR 0 1
55523: PUSH
55524: LD_VAR 0 2
55528: PUSH
55529: LD_INT 3
55531: MINUS
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: LIST
55540: PUSH
55541: LD_VAR 0 1
55545: PUSH
55546: LD_INT 4
55548: PLUS
55549: PUSH
55550: LD_VAR 0 2
55554: PUSH
55555: LD_INT 4
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: PUSH
55563: LD_VAR 0 1
55567: PUSH
55568: LD_VAR 0 2
55572: PUSH
55573: LD_INT 4
55575: PLUS
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: PUSH
55585: LD_VAR 0 1
55589: PUSH
55590: LD_INT 3
55592: MINUS
55593: PUSH
55594: LD_VAR 0 2
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: LIST
55606: PUSH
55607: LD_VAR 0 1
55611: PUSH
55612: LD_INT 4
55614: MINUS
55615: PUSH
55616: LD_VAR 0 2
55620: PUSH
55621: LD_INT 4
55623: MINUS
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// end ; 3 :
55640: GO 56062
55642: LD_INT 3
55644: DOUBLE
55645: EQUAL
55646: IFTRUE 55650
55648: GO 55783
55650: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55651: LD_ADDR_VAR 0 5
55655: PUSH
55656: LD_VAR 0 1
55660: PUSH
55661: LD_INT 3
55663: PLUS
55664: PUSH
55665: LD_VAR 0 2
55669: PUSH
55670: LD_INT 4
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: PUSH
55678: LD_VAR 0 1
55682: PUSH
55683: LD_INT 4
55685: PLUS
55686: PUSH
55687: LD_VAR 0 2
55691: PUSH
55692: LD_INT 4
55694: PLUS
55695: PUSH
55696: LD_INT 5
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: LIST
55703: PUSH
55704: LD_VAR 0 1
55708: PUSH
55709: LD_INT 4
55711: MINUS
55712: PUSH
55713: LD_VAR 0 2
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: LIST
55725: PUSH
55726: LD_VAR 0 1
55730: PUSH
55731: LD_VAR 0 2
55735: PUSH
55736: LD_INT 4
55738: MINUS
55739: PUSH
55740: LD_INT 3
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: LIST
55747: PUSH
55748: LD_VAR 0 1
55752: PUSH
55753: LD_INT 3
55755: MINUS
55756: PUSH
55757: LD_VAR 0 2
55761: PUSH
55762: LD_INT 3
55764: MINUS
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// end ; 4 :
55781: GO 56062
55783: LD_INT 4
55785: DOUBLE
55786: EQUAL
55787: IFTRUE 55791
55789: GO 55924
55791: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55792: LD_ADDR_VAR 0 5
55796: PUSH
55797: LD_VAR 0 1
55801: PUSH
55802: LD_VAR 0 2
55806: PUSH
55807: LD_INT 4
55809: PLUS
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: LIST
55818: PUSH
55819: LD_VAR 0 1
55823: PUSH
55824: LD_INT 3
55826: PLUS
55827: PUSH
55828: LD_VAR 0 2
55832: PUSH
55833: LD_INT 3
55835: PLUS
55836: PUSH
55837: LD_INT 5
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: PUSH
55845: LD_VAR 0 1
55849: PUSH
55850: LD_INT 4
55852: PLUS
55853: PUSH
55854: LD_VAR 0 2
55858: PUSH
55859: LD_INT 4
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: PUSH
55867: LD_VAR 0 1
55871: PUSH
55872: LD_VAR 0 2
55876: PUSH
55877: LD_INT 3
55879: MINUS
55880: PUSH
55881: LD_INT 3
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: PUSH
55889: LD_VAR 0 1
55893: PUSH
55894: LD_INT 4
55896: MINUS
55897: PUSH
55898: LD_VAR 0 2
55902: PUSH
55903: LD_INT 4
55905: MINUS
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: ST_TO_ADDR
// end ; 5 :
55922: GO 56062
55924: LD_INT 5
55926: DOUBLE
55927: EQUAL
55928: IFTRUE 55932
55930: GO 56061
55932: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55933: LD_ADDR_VAR 0 5
55937: PUSH
55938: LD_VAR 0 1
55942: PUSH
55943: LD_INT 4
55945: MINUS
55946: PUSH
55947: LD_VAR 0 2
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: PUSH
55960: LD_VAR 0 1
55964: PUSH
55965: LD_VAR 0 2
55969: PUSH
55970: LD_INT 4
55972: MINUS
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: LIST
55981: PUSH
55982: LD_VAR 0 1
55986: PUSH
55987: LD_INT 4
55989: PLUS
55990: PUSH
55991: LD_VAR 0 2
55995: PUSH
55996: LD_INT 4
55998: PLUS
55999: PUSH
56000: LD_INT 5
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: PUSH
56008: LD_VAR 0 1
56012: PUSH
56013: LD_INT 3
56015: PLUS
56016: PUSH
56017: LD_VAR 0 2
56021: PUSH
56022: LD_INT 4
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: LIST
56029: PUSH
56030: LD_VAR 0 1
56034: PUSH
56035: LD_VAR 0 2
56039: PUSH
56040: LD_INT 3
56042: PLUS
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// end ; end ;
56059: GO 56062
56061: POP
// result := list ;
56062: LD_ADDR_VAR 0 4
56066: PUSH
56067: LD_VAR 0 5
56071: ST_TO_ADDR
// end ;
56072: LD_VAR 0 4
56076: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56077: LD_INT 0
56079: PPUSH
56080: PPUSH
56081: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56082: LD_VAR 0 1
56086: NOT
56087: PUSH
56088: LD_VAR 0 2
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 3
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: IN
56111: NOT
56112: OR
56113: IFFALSE 56117
// exit ;
56115: GO 56200
// tmp := [ ] ;
56117: LD_ADDR_VAR 0 5
56121: PUSH
56122: EMPTY
56123: ST_TO_ADDR
// for i in units do
56124: LD_ADDR_VAR 0 4
56128: PUSH
56129: LD_VAR 0 1
56133: PUSH
56134: FOR_IN
56135: IFFALSE 56169
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56137: LD_ADDR_VAR 0 5
56141: PUSH
56142: LD_VAR 0 5
56146: PPUSH
56147: LD_VAR 0 4
56151: PPUSH
56152: LD_VAR 0 2
56156: PPUSH
56157: CALL_OW 259
56161: PPUSH
56162: CALL 57561 0 2
56166: ST_TO_ADDR
56167: GO 56134
56169: POP
56170: POP
// if not tmp then
56171: LD_VAR 0 5
56175: NOT
56176: IFFALSE 56180
// exit ;
56178: GO 56200
// result := SortListByListDesc ( units , tmp ) ;
56180: LD_ADDR_VAR 0 3
56184: PUSH
56185: LD_VAR 0 1
56189: PPUSH
56190: LD_VAR 0 5
56194: PPUSH
56195: CALL_OW 77
56199: ST_TO_ADDR
// end ;
56200: LD_VAR 0 3
56204: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56205: LD_INT 0
56207: PPUSH
56208: PPUSH
56209: PPUSH
// result := false ;
56210: LD_ADDR_VAR 0 3
56214: PUSH
56215: LD_INT 0
56217: ST_TO_ADDR
// if not building then
56218: LD_VAR 0 2
56222: NOT
56223: IFFALSE 56227
// exit ;
56225: GO 56365
// x := GetX ( building ) ;
56227: LD_ADDR_VAR 0 4
56231: PUSH
56232: LD_VAR 0 2
56236: PPUSH
56237: CALL_OW 250
56241: ST_TO_ADDR
// y := GetY ( building ) ;
56242: LD_ADDR_VAR 0 5
56246: PUSH
56247: LD_VAR 0 2
56251: PPUSH
56252: CALL_OW 251
56256: ST_TO_ADDR
// if not x or not y then
56257: LD_VAR 0 4
56261: NOT
56262: PUSH
56263: LD_VAR 0 5
56267: NOT
56268: OR
56269: IFFALSE 56273
// exit ;
56271: GO 56365
// if GetTaskList ( unit ) then
56273: LD_VAR 0 1
56277: PPUSH
56278: CALL_OW 437
56282: IFFALSE 56365
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56284: LD_STRING e
56286: PUSH
56287: LD_VAR 0 1
56291: PPUSH
56292: CALL_OW 437
56296: PUSH
56297: LD_INT 1
56299: ARRAY
56300: PUSH
56301: LD_INT 1
56303: ARRAY
56304: EQUAL
56305: PUSH
56306: LD_VAR 0 4
56310: PUSH
56311: LD_VAR 0 1
56315: PPUSH
56316: CALL_OW 437
56320: PUSH
56321: LD_INT 1
56323: ARRAY
56324: PUSH
56325: LD_INT 2
56327: ARRAY
56328: EQUAL
56329: AND
56330: PUSH
56331: LD_VAR 0 5
56335: PUSH
56336: LD_VAR 0 1
56340: PPUSH
56341: CALL_OW 437
56345: PUSH
56346: LD_INT 1
56348: ARRAY
56349: PUSH
56350: LD_INT 3
56352: ARRAY
56353: EQUAL
56354: AND
56355: IFFALSE 56365
// result := true end ;
56357: LD_ADDR_VAR 0 3
56361: PUSH
56362: LD_INT 1
56364: ST_TO_ADDR
// end ;
56365: LD_VAR 0 3
56369: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56370: LD_INT 0
56372: PPUSH
// result := false ;
56373: LD_ADDR_VAR 0 4
56377: PUSH
56378: LD_INT 0
56380: ST_TO_ADDR
// if GetTaskList ( unit ) then
56381: LD_VAR 0 1
56385: PPUSH
56386: CALL_OW 437
56390: IFFALSE 56473
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56392: LD_STRING M
56394: PUSH
56395: LD_VAR 0 1
56399: PPUSH
56400: CALL_OW 437
56404: PUSH
56405: LD_INT 1
56407: ARRAY
56408: PUSH
56409: LD_INT 1
56411: ARRAY
56412: EQUAL
56413: PUSH
56414: LD_VAR 0 2
56418: PUSH
56419: LD_VAR 0 1
56423: PPUSH
56424: CALL_OW 437
56428: PUSH
56429: LD_INT 1
56431: ARRAY
56432: PUSH
56433: LD_INT 2
56435: ARRAY
56436: EQUAL
56437: AND
56438: PUSH
56439: LD_VAR 0 3
56443: PUSH
56444: LD_VAR 0 1
56448: PPUSH
56449: CALL_OW 437
56453: PUSH
56454: LD_INT 1
56456: ARRAY
56457: PUSH
56458: LD_INT 3
56460: ARRAY
56461: EQUAL
56462: AND
56463: IFFALSE 56473
// result := true ;
56465: LD_ADDR_VAR 0 4
56469: PUSH
56470: LD_INT 1
56472: ST_TO_ADDR
// end ; end ;
56473: LD_VAR 0 4
56477: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56478: LD_INT 0
56480: PPUSH
56481: PPUSH
56482: PPUSH
56483: PPUSH
// if not unit or not area then
56484: LD_VAR 0 1
56488: NOT
56489: PUSH
56490: LD_VAR 0 2
56494: NOT
56495: OR
56496: IFFALSE 56500
// exit ;
56498: GO 56664
// tmp := AreaToList ( area , i ) ;
56500: LD_ADDR_VAR 0 6
56504: PUSH
56505: LD_VAR 0 2
56509: PPUSH
56510: LD_VAR 0 5
56514: PPUSH
56515: CALL_OW 517
56519: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56520: LD_ADDR_VAR 0 5
56524: PUSH
56525: DOUBLE
56526: LD_INT 1
56528: DEC
56529: ST_TO_ADDR
56530: LD_VAR 0 6
56534: PUSH
56535: LD_INT 1
56537: ARRAY
56538: PUSH
56539: FOR_TO
56540: IFFALSE 56662
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56542: LD_ADDR_VAR 0 7
56546: PUSH
56547: LD_VAR 0 6
56551: PUSH
56552: LD_INT 1
56554: ARRAY
56555: PUSH
56556: LD_VAR 0 5
56560: ARRAY
56561: PUSH
56562: LD_VAR 0 6
56566: PUSH
56567: LD_INT 2
56569: ARRAY
56570: PUSH
56571: LD_VAR 0 5
56575: ARRAY
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56581: LD_VAR 0 7
56585: PUSH
56586: LD_INT 1
56588: ARRAY
56589: PPUSH
56590: LD_VAR 0 7
56594: PUSH
56595: LD_INT 2
56597: ARRAY
56598: PPUSH
56599: CALL_OW 428
56603: PUSH
56604: LD_INT 0
56606: EQUAL
56607: IFFALSE 56660
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56609: LD_VAR 0 1
56613: PPUSH
56614: LD_VAR 0 7
56618: PUSH
56619: LD_INT 1
56621: ARRAY
56622: PPUSH
56623: LD_VAR 0 7
56627: PUSH
56628: LD_INT 2
56630: ARRAY
56631: PPUSH
56632: LD_VAR 0 3
56636: PPUSH
56637: CALL_OW 48
// result := IsPlaced ( unit ) ;
56641: LD_ADDR_VAR 0 4
56645: PUSH
56646: LD_VAR 0 1
56650: PPUSH
56651: CALL_OW 305
56655: ST_TO_ADDR
// exit ;
56656: POP
56657: POP
56658: GO 56664
// end ; end ;
56660: GO 56539
56662: POP
56663: POP
// end ;
56664: LD_VAR 0 4
56668: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56669: LD_INT 0
56671: PPUSH
56672: PPUSH
56673: PPUSH
// if not side or side > 8 then
56674: LD_VAR 0 1
56678: NOT
56679: PUSH
56680: LD_VAR 0 1
56684: PUSH
56685: LD_INT 8
56687: GREATER
56688: OR
56689: IFFALSE 56693
// exit ;
56691: GO 56880
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56693: LD_ADDR_VAR 0 4
56697: PUSH
56698: LD_INT 22
56700: PUSH
56701: LD_VAR 0 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 21
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PPUSH
56724: CALL_OW 69
56728: ST_TO_ADDR
// if not tmp then
56729: LD_VAR 0 4
56733: NOT
56734: IFFALSE 56738
// exit ;
56736: GO 56880
// enable_addtolog := true ;
56738: LD_ADDR_OWVAR 81
56742: PUSH
56743: LD_INT 1
56745: ST_TO_ADDR
// AddToLog ( [ ) ;
56746: LD_STRING [
56748: PPUSH
56749: CALL_OW 561
// for i in tmp do
56753: LD_ADDR_VAR 0 3
56757: PUSH
56758: LD_VAR 0 4
56762: PUSH
56763: FOR_IN
56764: IFFALSE 56871
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56766: LD_STRING [
56768: PUSH
56769: LD_VAR 0 3
56773: PPUSH
56774: CALL_OW 266
56778: STR
56779: PUSH
56780: LD_STRING , 
56782: STR
56783: PUSH
56784: LD_VAR 0 3
56788: PPUSH
56789: CALL_OW 250
56793: STR
56794: PUSH
56795: LD_STRING , 
56797: STR
56798: PUSH
56799: LD_VAR 0 3
56803: PPUSH
56804: CALL_OW 251
56808: STR
56809: PUSH
56810: LD_STRING , 
56812: STR
56813: PUSH
56814: LD_VAR 0 3
56818: PPUSH
56819: CALL_OW 254
56823: STR
56824: PUSH
56825: LD_STRING , 
56827: STR
56828: PUSH
56829: LD_VAR 0 3
56833: PPUSH
56834: LD_INT 1
56836: PPUSH
56837: CALL_OW 268
56841: STR
56842: PUSH
56843: LD_STRING , 
56845: STR
56846: PUSH
56847: LD_VAR 0 3
56851: PPUSH
56852: LD_INT 2
56854: PPUSH
56855: CALL_OW 268
56859: STR
56860: PUSH
56861: LD_STRING ],
56863: STR
56864: PPUSH
56865: CALL_OW 561
// end ;
56869: GO 56763
56871: POP
56872: POP
// AddToLog ( ]; ) ;
56873: LD_STRING ];
56875: PPUSH
56876: CALL_OW 561
// end ;
56880: LD_VAR 0 2
56884: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56885: LD_INT 0
56887: PPUSH
56888: PPUSH
56889: PPUSH
56890: PPUSH
56891: PPUSH
// if not area or not rate or not max then
56892: LD_VAR 0 1
56896: NOT
56897: PUSH
56898: LD_VAR 0 2
56902: NOT
56903: OR
56904: PUSH
56905: LD_VAR 0 4
56909: NOT
56910: OR
56911: IFFALSE 56915
// exit ;
56913: GO 57104
// while 1 do
56915: LD_INT 1
56917: IFFALSE 57104
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56919: LD_ADDR_VAR 0 9
56923: PUSH
56924: LD_VAR 0 1
56928: PPUSH
56929: LD_INT 1
56931: PPUSH
56932: CALL_OW 287
56936: PUSH
56937: LD_INT 10
56939: MUL
56940: ST_TO_ADDR
// r := rate / 10 ;
56941: LD_ADDR_VAR 0 7
56945: PUSH
56946: LD_VAR 0 2
56950: PUSH
56951: LD_INT 10
56953: DIVREAL
56954: ST_TO_ADDR
// time := 1 1$00 ;
56955: LD_ADDR_VAR 0 8
56959: PUSH
56960: LD_INT 2100
56962: ST_TO_ADDR
// if amount < min then
56963: LD_VAR 0 9
56967: PUSH
56968: LD_VAR 0 3
56972: LESS
56973: IFFALSE 56991
// r := r * 2 else
56975: LD_ADDR_VAR 0 7
56979: PUSH
56980: LD_VAR 0 7
56984: PUSH
56985: LD_INT 2
56987: MUL
56988: ST_TO_ADDR
56989: GO 57017
// if amount > max then
56991: LD_VAR 0 9
56995: PUSH
56996: LD_VAR 0 4
57000: GREATER
57001: IFFALSE 57017
// r := r / 2 ;
57003: LD_ADDR_VAR 0 7
57007: PUSH
57008: LD_VAR 0 7
57012: PUSH
57013: LD_INT 2
57015: DIVREAL
57016: ST_TO_ADDR
// time := time / r ;
57017: LD_ADDR_VAR 0 8
57021: PUSH
57022: LD_VAR 0 8
57026: PUSH
57027: LD_VAR 0 7
57031: DIVREAL
57032: ST_TO_ADDR
// if time < 0 then
57033: LD_VAR 0 8
57037: PUSH
57038: LD_INT 0
57040: LESS
57041: IFFALSE 57058
// time := time * - 1 ;
57043: LD_ADDR_VAR 0 8
57047: PUSH
57048: LD_VAR 0 8
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: MUL
57057: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57058: LD_VAR 0 8
57062: PUSH
57063: LD_INT 35
57065: PPUSH
57066: LD_INT 875
57068: PPUSH
57069: CALL_OW 12
57073: PLUS
57074: PPUSH
57075: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57079: LD_INT 1
57081: PPUSH
57082: LD_INT 5
57084: PPUSH
57085: CALL_OW 12
57089: PPUSH
57090: LD_VAR 0 1
57094: PPUSH
57095: LD_INT 1
57097: PPUSH
57098: CALL_OW 55
// end ;
57102: GO 56915
// end ;
57104: LD_VAR 0 5
57108: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57109: LD_INT 0
57111: PPUSH
57112: PPUSH
57113: PPUSH
57114: PPUSH
57115: PPUSH
57116: PPUSH
57117: PPUSH
57118: PPUSH
// if not turrets or not factories then
57119: LD_VAR 0 1
57123: NOT
57124: PUSH
57125: LD_VAR 0 2
57129: NOT
57130: OR
57131: IFFALSE 57135
// exit ;
57133: GO 57442
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57135: LD_ADDR_VAR 0 10
57139: PUSH
57140: LD_INT 5
57142: PUSH
57143: LD_INT 6
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: LD_INT 4
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 3
57162: PUSH
57163: LD_INT 5
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 24
57177: PUSH
57178: LD_INT 25
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 23
57187: PUSH
57188: LD_INT 27
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 42
57201: PUSH
57202: LD_INT 43
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 44
57211: PUSH
57212: LD_INT 46
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 45
57221: PUSH
57222: LD_INT 47
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: ST_TO_ADDR
// result := [ ] ;
57239: LD_ADDR_VAR 0 3
57243: PUSH
57244: EMPTY
57245: ST_TO_ADDR
// for i in turrets do
57246: LD_ADDR_VAR 0 4
57250: PUSH
57251: LD_VAR 0 1
57255: PUSH
57256: FOR_IN
57257: IFFALSE 57440
// begin nat := GetNation ( i ) ;
57259: LD_ADDR_VAR 0 7
57263: PUSH
57264: LD_VAR 0 4
57268: PPUSH
57269: CALL_OW 248
57273: ST_TO_ADDR
// weapon := 0 ;
57274: LD_ADDR_VAR 0 8
57278: PUSH
57279: LD_INT 0
57281: ST_TO_ADDR
// if not nat then
57282: LD_VAR 0 7
57286: NOT
57287: IFFALSE 57291
// continue ;
57289: GO 57256
// for j in list [ nat ] do
57291: LD_ADDR_VAR 0 5
57295: PUSH
57296: LD_VAR 0 10
57300: PUSH
57301: LD_VAR 0 7
57305: ARRAY
57306: PUSH
57307: FOR_IN
57308: IFFALSE 57349
// if GetBWeapon ( i ) = j [ 1 ] then
57310: LD_VAR 0 4
57314: PPUSH
57315: CALL_OW 269
57319: PUSH
57320: LD_VAR 0 5
57324: PUSH
57325: LD_INT 1
57327: ARRAY
57328: EQUAL
57329: IFFALSE 57347
// begin weapon := j [ 2 ] ;
57331: LD_ADDR_VAR 0 8
57335: PUSH
57336: LD_VAR 0 5
57340: PUSH
57341: LD_INT 2
57343: ARRAY
57344: ST_TO_ADDR
// break ;
57345: GO 57349
// end ;
57347: GO 57307
57349: POP
57350: POP
// if not weapon then
57351: LD_VAR 0 8
57355: NOT
57356: IFFALSE 57360
// continue ;
57358: GO 57256
// for k in factories do
57360: LD_ADDR_VAR 0 6
57364: PUSH
57365: LD_VAR 0 2
57369: PUSH
57370: FOR_IN
57371: IFFALSE 57436
// begin weapons := AvailableWeaponList ( k ) ;
57373: LD_ADDR_VAR 0 9
57377: PUSH
57378: LD_VAR 0 6
57382: PPUSH
57383: CALL_OW 478
57387: ST_TO_ADDR
// if not weapons then
57388: LD_VAR 0 9
57392: NOT
57393: IFFALSE 57397
// continue ;
57395: GO 57370
// if weapon in weapons then
57397: LD_VAR 0 8
57401: PUSH
57402: LD_VAR 0 9
57406: IN
57407: IFFALSE 57434
// begin result := [ i , weapon ] ;
57409: LD_ADDR_VAR 0 3
57413: PUSH
57414: LD_VAR 0 4
57418: PUSH
57419: LD_VAR 0 8
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: ST_TO_ADDR
// exit ;
57428: POP
57429: POP
57430: POP
57431: POP
57432: GO 57442
// end ; end ;
57434: GO 57370
57436: POP
57437: POP
// end ;
57438: GO 57256
57440: POP
57441: POP
// end ;
57442: LD_VAR 0 3
57446: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57447: LD_INT 0
57449: PPUSH
// if not side or side > 8 then
57450: LD_VAR 0 3
57454: NOT
57455: PUSH
57456: LD_VAR 0 3
57460: PUSH
57461: LD_INT 8
57463: GREATER
57464: OR
57465: IFFALSE 57469
// exit ;
57467: GO 57528
// if not range then
57469: LD_VAR 0 4
57473: NOT
57474: IFFALSE 57485
// range := - 12 ;
57476: LD_ADDR_VAR 0 4
57480: PUSH
57481: LD_INT 12
57483: NEG
57484: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57485: LD_VAR 0 1
57489: PPUSH
57490: LD_VAR 0 2
57494: PPUSH
57495: LD_VAR 0 3
57499: PPUSH
57500: LD_VAR 0 4
57504: PPUSH
57505: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57509: LD_VAR 0 1
57513: PPUSH
57514: LD_VAR 0 2
57518: PPUSH
57519: LD_VAR 0 3
57523: PPUSH
57524: CALL_OW 331
// end ;
57528: LD_VAR 0 5
57532: RET
// export function Video ( mode ) ; begin
57533: LD_INT 0
57535: PPUSH
// ingame_video = mode ;
57536: LD_ADDR_OWVAR 52
57540: PUSH
57541: LD_VAR 0 1
57545: ST_TO_ADDR
// interface_hidden = mode ;
57546: LD_ADDR_OWVAR 54
57550: PUSH
57551: LD_VAR 0 1
57555: ST_TO_ADDR
// end ;
57556: LD_VAR 0 2
57560: RET
// export function Join ( array , element ) ; begin
57561: LD_INT 0
57563: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57564: LD_ADDR_VAR 0 3
57568: PUSH
57569: LD_VAR 0 1
57573: PPUSH
57574: LD_VAR 0 1
57578: PUSH
57579: LD_INT 1
57581: PLUS
57582: PPUSH
57583: LD_VAR 0 2
57587: PPUSH
57588: CALL_OW 1
57592: ST_TO_ADDR
// end ;
57593: LD_VAR 0 3
57597: RET
// export function JoinUnion ( array , element ) ; begin
57598: LD_INT 0
57600: PPUSH
// result := array union element ;
57601: LD_ADDR_VAR 0 3
57605: PUSH
57606: LD_VAR 0 1
57610: PUSH
57611: LD_VAR 0 2
57615: UNION
57616: ST_TO_ADDR
// end ;
57617: LD_VAR 0 3
57621: RET
// export function GetBehemoths ( side ) ; begin
57622: LD_INT 0
57624: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
57625: LD_ADDR_VAR 0 2
57629: PUSH
57630: LD_INT 22
57632: PUSH
57633: LD_VAR 0 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 31
57644: PUSH
57645: LD_INT 25
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PPUSH
57656: CALL_OW 69
57660: ST_TO_ADDR
// end ;
57661: LD_VAR 0 2
57665: RET
// export function Shuffle ( array ) ; var i , index ; begin
57666: LD_INT 0
57668: PPUSH
57669: PPUSH
57670: PPUSH
// result := [ ] ;
57671: LD_ADDR_VAR 0 2
57675: PUSH
57676: EMPTY
57677: ST_TO_ADDR
// if not array then
57678: LD_VAR 0 1
57682: NOT
57683: IFFALSE 57687
// exit ;
57685: GO 57786
// Randomize ;
57687: CALL_OW 10
// for i = array downto 1 do
57691: LD_ADDR_VAR 0 3
57695: PUSH
57696: DOUBLE
57697: LD_VAR 0 1
57701: INC
57702: ST_TO_ADDR
57703: LD_INT 1
57705: PUSH
57706: FOR_DOWNTO
57707: IFFALSE 57784
// begin index := rand ( 1 , array ) ;
57709: LD_ADDR_VAR 0 4
57713: PUSH
57714: LD_INT 1
57716: PPUSH
57717: LD_VAR 0 1
57721: PPUSH
57722: CALL_OW 12
57726: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57727: LD_ADDR_VAR 0 2
57731: PUSH
57732: LD_VAR 0 2
57736: PPUSH
57737: LD_VAR 0 2
57741: PUSH
57742: LD_INT 1
57744: PLUS
57745: PPUSH
57746: LD_VAR 0 1
57750: PUSH
57751: LD_VAR 0 4
57755: ARRAY
57756: PPUSH
57757: CALL_OW 2
57761: ST_TO_ADDR
// array := Delete ( array , index ) ;
57762: LD_ADDR_VAR 0 1
57766: PUSH
57767: LD_VAR 0 1
57771: PPUSH
57772: LD_VAR 0 4
57776: PPUSH
57777: CALL_OW 3
57781: ST_TO_ADDR
// end ;
57782: GO 57706
57784: POP
57785: POP
// end ;
57786: LD_VAR 0 2
57790: RET
// export function GetBaseMaterials ( base ) ; begin
57791: LD_INT 0
57793: PPUSH
// result := [ 0 , 0 , 0 ] ;
57794: LD_ADDR_VAR 0 2
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: LIST
57812: ST_TO_ADDR
// if not base then
57813: LD_VAR 0 1
57817: NOT
57818: IFFALSE 57822
// exit ;
57820: GO 57871
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57822: LD_ADDR_VAR 0 2
57826: PUSH
57827: LD_VAR 0 1
57831: PPUSH
57832: LD_INT 1
57834: PPUSH
57835: CALL_OW 275
57839: PUSH
57840: LD_VAR 0 1
57844: PPUSH
57845: LD_INT 2
57847: PPUSH
57848: CALL_OW 275
57852: PUSH
57853: LD_VAR 0 1
57857: PPUSH
57858: LD_INT 3
57860: PPUSH
57861: CALL_OW 275
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: LIST
57870: ST_TO_ADDR
// end ;
57871: LD_VAR 0 2
57875: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57876: LD_INT 0
57878: PPUSH
57879: PPUSH
// result := array ;
57880: LD_ADDR_VAR 0 3
57884: PUSH
57885: LD_VAR 0 1
57889: ST_TO_ADDR
// if size >= result then
57890: LD_VAR 0 2
57894: PUSH
57895: LD_VAR 0 3
57899: GREATEREQUAL
57900: IFFALSE 57904
// exit ;
57902: GO 57954
// if size then
57904: LD_VAR 0 2
57908: IFFALSE 57954
// for i := array downto size do
57910: LD_ADDR_VAR 0 4
57914: PUSH
57915: DOUBLE
57916: LD_VAR 0 1
57920: INC
57921: ST_TO_ADDR
57922: LD_VAR 0 2
57926: PUSH
57927: FOR_DOWNTO
57928: IFFALSE 57952
// result := Delete ( result , result ) ;
57930: LD_ADDR_VAR 0 3
57934: PUSH
57935: LD_VAR 0 3
57939: PPUSH
57940: LD_VAR 0 3
57944: PPUSH
57945: CALL_OW 3
57949: ST_TO_ADDR
57950: GO 57927
57952: POP
57953: POP
// end ;
57954: LD_VAR 0 3
57958: RET
// export function ComExit ( unit ) ; var tmp ; begin
57959: LD_INT 0
57961: PPUSH
57962: PPUSH
// if not IsInUnit ( unit ) then
57963: LD_VAR 0 1
57967: PPUSH
57968: CALL_OW 310
57972: NOT
57973: IFFALSE 57977
// exit ;
57975: GO 58037
// tmp := IsInUnit ( unit ) ;
57977: LD_ADDR_VAR 0 3
57981: PUSH
57982: LD_VAR 0 1
57986: PPUSH
57987: CALL_OW 310
57991: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57992: LD_VAR 0 3
57996: PPUSH
57997: CALL_OW 247
58001: PUSH
58002: LD_INT 2
58004: EQUAL
58005: IFFALSE 58018
// ComExitVehicle ( unit ) else
58007: LD_VAR 0 1
58011: PPUSH
58012: CALL_OW 121
58016: GO 58027
// ComExitBuilding ( unit ) ;
58018: LD_VAR 0 1
58022: PPUSH
58023: CALL_OW 122
// result := tmp ;
58027: LD_ADDR_VAR 0 2
58031: PUSH
58032: LD_VAR 0 3
58036: ST_TO_ADDR
// end ;
58037: LD_VAR 0 2
58041: RET
// export function ComExitAll ( units ) ; var i ; begin
58042: LD_INT 0
58044: PPUSH
58045: PPUSH
// if not units then
58046: LD_VAR 0 1
58050: NOT
58051: IFFALSE 58055
// exit ;
58053: GO 58081
// for i in units do
58055: LD_ADDR_VAR 0 3
58059: PUSH
58060: LD_VAR 0 1
58064: PUSH
58065: FOR_IN
58066: IFFALSE 58079
// ComExit ( i ) ;
58068: LD_VAR 0 3
58072: PPUSH
58073: CALL 57959 0 1
58077: GO 58065
58079: POP
58080: POP
// end ;
58081: LD_VAR 0 2
58085: RET
// export function ResetHc ; begin
58086: LD_INT 0
58088: PPUSH
// InitHc ;
58089: CALL_OW 19
// hc_importance := 0 ;
58093: LD_ADDR_OWVAR 32
58097: PUSH
58098: LD_INT 0
58100: ST_TO_ADDR
// end ;
58101: LD_VAR 0 1
58105: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58106: LD_INT 0
58108: PPUSH
58109: PPUSH
58110: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58111: LD_ADDR_VAR 0 6
58115: PUSH
58116: LD_VAR 0 1
58120: PUSH
58121: LD_VAR 0 3
58125: PLUS
58126: PUSH
58127: LD_INT 2
58129: DIV
58130: ST_TO_ADDR
// if _x < 0 then
58131: LD_VAR 0 6
58135: PUSH
58136: LD_INT 0
58138: LESS
58139: IFFALSE 58156
// _x := _x * - 1 ;
58141: LD_ADDR_VAR 0 6
58145: PUSH
58146: LD_VAR 0 6
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: MUL
58155: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58156: LD_ADDR_VAR 0 7
58160: PUSH
58161: LD_VAR 0 2
58165: PUSH
58166: LD_VAR 0 4
58170: PLUS
58171: PUSH
58172: LD_INT 2
58174: DIV
58175: ST_TO_ADDR
// if _y < 0 then
58176: LD_VAR 0 7
58180: PUSH
58181: LD_INT 0
58183: LESS
58184: IFFALSE 58201
// _y := _y * - 1 ;
58186: LD_ADDR_VAR 0 7
58190: PUSH
58191: LD_VAR 0 7
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: MUL
58200: ST_TO_ADDR
// result := [ _x , _y ] ;
58201: LD_ADDR_VAR 0 5
58205: PUSH
58206: LD_VAR 0 6
58210: PUSH
58211: LD_VAR 0 7
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// end ;
58220: LD_VAR 0 5
58224: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58225: LD_INT 0
58227: PPUSH
58228: PPUSH
58229: PPUSH
58230: PPUSH
// task := GetTaskList ( unit ) ;
58231: LD_ADDR_VAR 0 7
58235: PUSH
58236: LD_VAR 0 1
58240: PPUSH
58241: CALL_OW 437
58245: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58246: LD_VAR 0 7
58250: NOT
58251: PUSH
58252: LD_VAR 0 1
58256: PPUSH
58257: LD_VAR 0 2
58261: PPUSH
58262: CALL_OW 308
58266: NOT
58267: AND
58268: IFFALSE 58272
// exit ;
58270: GO 58390
// if IsInArea ( unit , area ) then
58272: LD_VAR 0 1
58276: PPUSH
58277: LD_VAR 0 2
58281: PPUSH
58282: CALL_OW 308
58286: IFFALSE 58304
// begin ComMoveToArea ( unit , goAway ) ;
58288: LD_VAR 0 1
58292: PPUSH
58293: LD_VAR 0 3
58297: PPUSH
58298: CALL_OW 113
// exit ;
58302: GO 58390
// end ; if task [ 1 ] [ 1 ] <> M then
58304: LD_VAR 0 7
58308: PUSH
58309: LD_INT 1
58311: ARRAY
58312: PUSH
58313: LD_INT 1
58315: ARRAY
58316: PUSH
58317: LD_STRING M
58319: NONEQUAL
58320: IFFALSE 58324
// exit ;
58322: GO 58390
// x := task [ 1 ] [ 2 ] ;
58324: LD_ADDR_VAR 0 5
58328: PUSH
58329: LD_VAR 0 7
58333: PUSH
58334: LD_INT 1
58336: ARRAY
58337: PUSH
58338: LD_INT 2
58340: ARRAY
58341: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58342: LD_ADDR_VAR 0 6
58346: PUSH
58347: LD_VAR 0 7
58351: PUSH
58352: LD_INT 1
58354: ARRAY
58355: PUSH
58356: LD_INT 3
58358: ARRAY
58359: ST_TO_ADDR
// if InArea ( x , y , area ) then
58360: LD_VAR 0 5
58364: PPUSH
58365: LD_VAR 0 6
58369: PPUSH
58370: LD_VAR 0 2
58374: PPUSH
58375: CALL_OW 309
58379: IFFALSE 58390
// ComStop ( unit ) ;
58381: LD_VAR 0 1
58385: PPUSH
58386: CALL_OW 141
// end ;
58390: LD_VAR 0 4
58394: RET
// export function Abs ( value ) ; begin
58395: LD_INT 0
58397: PPUSH
// result := value ;
58398: LD_ADDR_VAR 0 2
58402: PUSH
58403: LD_VAR 0 1
58407: ST_TO_ADDR
// if value < 0 then
58408: LD_VAR 0 1
58412: PUSH
58413: LD_INT 0
58415: LESS
58416: IFFALSE 58433
// result := value * - 1 ;
58418: LD_ADDR_VAR 0 2
58422: PUSH
58423: LD_VAR 0 1
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: MUL
58432: ST_TO_ADDR
// end ;
58433: LD_VAR 0 2
58437: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58438: LD_INT 0
58440: PPUSH
58441: PPUSH
58442: PPUSH
58443: PPUSH
58444: PPUSH
58445: PPUSH
58446: PPUSH
58447: PPUSH
// if not unit or not building then
58448: LD_VAR 0 1
58452: NOT
58453: PUSH
58454: LD_VAR 0 2
58458: NOT
58459: OR
58460: IFFALSE 58464
// exit ;
58462: GO 58690
// x := GetX ( building ) ;
58464: LD_ADDR_VAR 0 4
58468: PUSH
58469: LD_VAR 0 2
58473: PPUSH
58474: CALL_OW 250
58478: ST_TO_ADDR
// y := GetY ( building ) ;
58479: LD_ADDR_VAR 0 6
58483: PUSH
58484: LD_VAR 0 2
58488: PPUSH
58489: CALL_OW 251
58493: ST_TO_ADDR
// d := GetDir ( building ) ;
58494: LD_ADDR_VAR 0 8
58498: PUSH
58499: LD_VAR 0 2
58503: PPUSH
58504: CALL_OW 254
58508: ST_TO_ADDR
// r := 4 ;
58509: LD_ADDR_VAR 0 9
58513: PUSH
58514: LD_INT 4
58516: ST_TO_ADDR
// for i := 1 to 5 do
58517: LD_ADDR_VAR 0 10
58521: PUSH
58522: DOUBLE
58523: LD_INT 1
58525: DEC
58526: ST_TO_ADDR
58527: LD_INT 5
58529: PUSH
58530: FOR_TO
58531: IFFALSE 58688
// begin _x := ShiftX ( x , d , r + i ) ;
58533: LD_ADDR_VAR 0 5
58537: PUSH
58538: LD_VAR 0 4
58542: PPUSH
58543: LD_VAR 0 8
58547: PPUSH
58548: LD_VAR 0 9
58552: PUSH
58553: LD_VAR 0 10
58557: PLUS
58558: PPUSH
58559: CALL_OW 272
58563: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58564: LD_ADDR_VAR 0 7
58568: PUSH
58569: LD_VAR 0 6
58573: PPUSH
58574: LD_VAR 0 8
58578: PPUSH
58579: LD_VAR 0 9
58583: PUSH
58584: LD_VAR 0 10
58588: PLUS
58589: PPUSH
58590: CALL_OW 273
58594: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58595: LD_VAR 0 5
58599: PPUSH
58600: LD_VAR 0 7
58604: PPUSH
58605: CALL_OW 488
58609: PUSH
58610: LD_VAR 0 5
58614: PPUSH
58615: LD_VAR 0 7
58619: PPUSH
58620: CALL_OW 428
58624: PPUSH
58625: CALL_OW 247
58629: PUSH
58630: LD_INT 3
58632: PUSH
58633: LD_INT 2
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: IN
58640: NOT
58641: AND
58642: IFFALSE 58686
// begin ComMoveXY ( unit , _x , _y ) ;
58644: LD_VAR 0 1
58648: PPUSH
58649: LD_VAR 0 5
58653: PPUSH
58654: LD_VAR 0 7
58658: PPUSH
58659: CALL_OW 111
// result := [ _x , _y ] ;
58663: LD_ADDR_VAR 0 3
58667: PUSH
58668: LD_VAR 0 5
58672: PUSH
58673: LD_VAR 0 7
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: ST_TO_ADDR
// exit ;
58682: POP
58683: POP
58684: GO 58690
// end ; end ;
58686: GO 58530
58688: POP
58689: POP
// end ;
58690: LD_VAR 0 3
58694: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58695: LD_INT 0
58697: PPUSH
58698: PPUSH
58699: PPUSH
// result := 0 ;
58700: LD_ADDR_VAR 0 3
58704: PUSH
58705: LD_INT 0
58707: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58708: LD_VAR 0 1
58712: PUSH
58713: LD_INT 0
58715: LESS
58716: PUSH
58717: LD_VAR 0 1
58721: PUSH
58722: LD_INT 8
58724: GREATER
58725: OR
58726: PUSH
58727: LD_VAR 0 2
58731: PUSH
58732: LD_INT 0
58734: LESS
58735: OR
58736: PUSH
58737: LD_VAR 0 2
58741: PUSH
58742: LD_INT 8
58744: GREATER
58745: OR
58746: IFFALSE 58750
// exit ;
58748: GO 58825
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58750: LD_ADDR_VAR 0 4
58754: PUSH
58755: LD_INT 22
58757: PUSH
58758: LD_VAR 0 2
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PPUSH
58767: CALL_OW 69
58771: PUSH
58772: FOR_IN
58773: IFFALSE 58823
// begin un := UnitShoot ( i ) ;
58775: LD_ADDR_VAR 0 5
58779: PUSH
58780: LD_VAR 0 4
58784: PPUSH
58785: CALL_OW 504
58789: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58790: LD_VAR 0 5
58794: PPUSH
58795: CALL_OW 255
58799: PUSH
58800: LD_VAR 0 1
58804: EQUAL
58805: IFFALSE 58821
// begin result := un ;
58807: LD_ADDR_VAR 0 3
58811: PUSH
58812: LD_VAR 0 5
58816: ST_TO_ADDR
// exit ;
58817: POP
58818: POP
58819: GO 58825
// end ; end ;
58821: GO 58772
58823: POP
58824: POP
// end ;
58825: LD_VAR 0 3
58829: RET
// export function GetCargoBay ( units ) ; begin
58830: LD_INT 0
58832: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58833: LD_ADDR_VAR 0 2
58837: PUSH
58838: LD_VAR 0 1
58842: PPUSH
58843: LD_INT 2
58845: PUSH
58846: LD_INT 34
58848: PUSH
58849: LD_INT 12
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 34
58858: PUSH
58859: LD_INT 51
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 34
58868: PUSH
58869: LD_INT 32
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 34
58878: PUSH
58879: LD_INT 89
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: PPUSH
58893: CALL_OW 72
58897: ST_TO_ADDR
// end ;
58898: LD_VAR 0 2
58902: RET
// export function Negate ( value ) ; begin
58903: LD_INT 0
58905: PPUSH
// result := not value ;
58906: LD_ADDR_VAR 0 2
58910: PUSH
58911: LD_VAR 0 1
58915: NOT
58916: ST_TO_ADDR
// end ;
58917: LD_VAR 0 2
58921: RET
// export function Inc ( value ) ; begin
58922: LD_INT 0
58924: PPUSH
// result := value + 1 ;
58925: LD_ADDR_VAR 0 2
58929: PUSH
58930: LD_VAR 0 1
58934: PUSH
58935: LD_INT 1
58937: PLUS
58938: ST_TO_ADDR
// end ;
58939: LD_VAR 0 2
58943: RET
// export function Dec ( value ) ; begin
58944: LD_INT 0
58946: PPUSH
// result := value - 1 ;
58947: LD_ADDR_VAR 0 2
58951: PUSH
58952: LD_VAR 0 1
58956: PUSH
58957: LD_INT 1
58959: MINUS
58960: ST_TO_ADDR
// end ;
58961: LD_VAR 0 2
58965: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58966: LD_INT 0
58968: PPUSH
58969: PPUSH
58970: PPUSH
58971: PPUSH
58972: PPUSH
58973: PPUSH
58974: PPUSH
58975: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58976: LD_VAR 0 1
58980: PPUSH
58981: LD_VAR 0 2
58985: PPUSH
58986: CALL_OW 488
58990: NOT
58991: PUSH
58992: LD_VAR 0 3
58996: PPUSH
58997: LD_VAR 0 4
59001: PPUSH
59002: CALL_OW 488
59006: NOT
59007: OR
59008: IFFALSE 59021
// begin result := - 1 ;
59010: LD_ADDR_VAR 0 5
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: ST_TO_ADDR
// exit ;
59019: GO 59256
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59021: LD_ADDR_VAR 0 12
59025: PUSH
59026: LD_VAR 0 1
59030: PPUSH
59031: LD_VAR 0 2
59035: PPUSH
59036: LD_VAR 0 3
59040: PPUSH
59041: LD_VAR 0 4
59045: PPUSH
59046: CALL 58106 0 4
59050: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59051: LD_ADDR_VAR 0 11
59055: PUSH
59056: LD_VAR 0 1
59060: PPUSH
59061: LD_VAR 0 2
59065: PPUSH
59066: LD_VAR 0 12
59070: PUSH
59071: LD_INT 1
59073: ARRAY
59074: PPUSH
59075: LD_VAR 0 12
59079: PUSH
59080: LD_INT 2
59082: ARRAY
59083: PPUSH
59084: CALL_OW 298
59088: ST_TO_ADDR
// distance := 9999 ;
59089: LD_ADDR_VAR 0 10
59093: PUSH
59094: LD_INT 9999
59096: ST_TO_ADDR
// for i := 0 to 5 do
59097: LD_ADDR_VAR 0 6
59101: PUSH
59102: DOUBLE
59103: LD_INT 0
59105: DEC
59106: ST_TO_ADDR
59107: LD_INT 5
59109: PUSH
59110: FOR_TO
59111: IFFALSE 59254
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59113: LD_ADDR_VAR 0 7
59117: PUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: LD_VAR 0 6
59127: PPUSH
59128: LD_VAR 0 11
59132: PPUSH
59133: CALL_OW 272
59137: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59138: LD_ADDR_VAR 0 8
59142: PUSH
59143: LD_VAR 0 2
59147: PPUSH
59148: LD_VAR 0 6
59152: PPUSH
59153: LD_VAR 0 11
59157: PPUSH
59158: CALL_OW 273
59162: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59163: LD_VAR 0 7
59167: PPUSH
59168: LD_VAR 0 8
59172: PPUSH
59173: CALL_OW 488
59177: NOT
59178: IFFALSE 59182
// continue ;
59180: GO 59110
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59182: LD_ADDR_VAR 0 9
59186: PUSH
59187: LD_VAR 0 12
59191: PUSH
59192: LD_INT 1
59194: ARRAY
59195: PPUSH
59196: LD_VAR 0 12
59200: PUSH
59201: LD_INT 2
59203: ARRAY
59204: PPUSH
59205: LD_VAR 0 7
59209: PPUSH
59210: LD_VAR 0 8
59214: PPUSH
59215: CALL_OW 298
59219: ST_TO_ADDR
// if tmp < distance then
59220: LD_VAR 0 9
59224: PUSH
59225: LD_VAR 0 10
59229: LESS
59230: IFFALSE 59252
// begin result := i ;
59232: LD_ADDR_VAR 0 5
59236: PUSH
59237: LD_VAR 0 6
59241: ST_TO_ADDR
// distance := tmp ;
59242: LD_ADDR_VAR 0 10
59246: PUSH
59247: LD_VAR 0 9
59251: ST_TO_ADDR
// end ; end ;
59252: GO 59110
59254: POP
59255: POP
// end ;
59256: LD_VAR 0 5
59260: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59261: LD_INT 0
59263: PPUSH
59264: PPUSH
// if not driver or not IsInUnit ( driver ) then
59265: LD_VAR 0 1
59269: NOT
59270: PUSH
59271: LD_VAR 0 1
59275: PPUSH
59276: CALL_OW 310
59280: NOT
59281: OR
59282: IFFALSE 59286
// exit ;
59284: GO 59376
// vehicle := IsInUnit ( driver ) ;
59286: LD_ADDR_VAR 0 3
59290: PUSH
59291: LD_VAR 0 1
59295: PPUSH
59296: CALL_OW 310
59300: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59301: LD_VAR 0 1
59305: PPUSH
59306: LD_STRING \
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: PUSH
59336: LD_STRING E
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_VAR 0 3
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PPUSH
59372: CALL_OW 446
// end ;
59376: LD_VAR 0 2
59380: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59381: LD_INT 0
59383: PPUSH
59384: PPUSH
// if not driver or not IsInUnit ( driver ) then
59385: LD_VAR 0 1
59389: NOT
59390: PUSH
59391: LD_VAR 0 1
59395: PPUSH
59396: CALL_OW 310
59400: NOT
59401: OR
59402: IFFALSE 59406
// exit ;
59404: GO 59496
// vehicle := IsInUnit ( driver ) ;
59406: LD_ADDR_VAR 0 3
59410: PUSH
59411: LD_VAR 0 1
59415: PPUSH
59416: CALL_OW 310
59420: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59421: LD_VAR 0 1
59425: PPUSH
59426: LD_STRING \
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: PUSH
59456: LD_STRING E
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_VAR 0 3
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PPUSH
59492: CALL_OW 447
// end ;
59496: LD_VAR 0 2
59500: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59501: LD_INT 0
59503: PPUSH
59504: PPUSH
59505: PPUSH
// tmp := [ ] ;
59506: LD_ADDR_VAR 0 5
59510: PUSH
59511: EMPTY
59512: ST_TO_ADDR
// for i in units do
59513: LD_ADDR_VAR 0 4
59517: PUSH
59518: LD_VAR 0 1
59522: PUSH
59523: FOR_IN
59524: IFFALSE 59562
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59526: LD_ADDR_VAR 0 5
59530: PUSH
59531: LD_VAR 0 5
59535: PPUSH
59536: LD_VAR 0 5
59540: PUSH
59541: LD_INT 1
59543: PLUS
59544: PPUSH
59545: LD_VAR 0 4
59549: PPUSH
59550: CALL_OW 256
59554: PPUSH
59555: CALL_OW 2
59559: ST_TO_ADDR
59560: GO 59523
59562: POP
59563: POP
// if not tmp then
59564: LD_VAR 0 5
59568: NOT
59569: IFFALSE 59573
// exit ;
59571: GO 59621
// if asc then
59573: LD_VAR 0 2
59577: IFFALSE 59601
// result := SortListByListAsc ( units , tmp ) else
59579: LD_ADDR_VAR 0 3
59583: PUSH
59584: LD_VAR 0 1
59588: PPUSH
59589: LD_VAR 0 5
59593: PPUSH
59594: CALL_OW 76
59598: ST_TO_ADDR
59599: GO 59621
// result := SortListByListDesc ( units , tmp ) ;
59601: LD_ADDR_VAR 0 3
59605: PUSH
59606: LD_VAR 0 1
59610: PPUSH
59611: LD_VAR 0 5
59615: PPUSH
59616: CALL_OW 77
59620: ST_TO_ADDR
// end ;
59621: LD_VAR 0 3
59625: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59626: LD_INT 0
59628: PPUSH
59629: PPUSH
// task := GetTaskList ( mech ) ;
59630: LD_ADDR_VAR 0 4
59634: PUSH
59635: LD_VAR 0 1
59639: PPUSH
59640: CALL_OW 437
59644: ST_TO_ADDR
// if not task then
59645: LD_VAR 0 4
59649: NOT
59650: IFFALSE 59654
// exit ;
59652: GO 59696
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59654: LD_ADDR_VAR 0 3
59658: PUSH
59659: LD_VAR 0 4
59663: PUSH
59664: LD_INT 1
59666: ARRAY
59667: PUSH
59668: LD_INT 1
59670: ARRAY
59671: PUSH
59672: LD_STRING r
59674: EQUAL
59675: PUSH
59676: LD_VAR 0 4
59680: PUSH
59681: LD_INT 1
59683: ARRAY
59684: PUSH
59685: LD_INT 4
59687: ARRAY
59688: PUSH
59689: LD_VAR 0 2
59693: EQUAL
59694: AND
59695: ST_TO_ADDR
// end ;
59696: LD_VAR 0 3
59700: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59701: LD_INT 0
59703: PPUSH
// SetDir ( unit , d ) ;
59704: LD_VAR 0 1
59708: PPUSH
59709: LD_VAR 0 4
59713: PPUSH
59714: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59718: LD_VAR 0 1
59722: PPUSH
59723: LD_VAR 0 2
59727: PPUSH
59728: LD_VAR 0 3
59732: PPUSH
59733: LD_VAR 0 5
59737: PPUSH
59738: CALL_OW 48
// end ;
59742: LD_VAR 0 6
59746: RET
// export function ToNaturalNumber ( number ) ; begin
59747: LD_INT 0
59749: PPUSH
// result := number div 1 ;
59750: LD_ADDR_VAR 0 2
59754: PUSH
59755: LD_VAR 0 1
59759: PUSH
59760: LD_INT 1
59762: DIV
59763: ST_TO_ADDR
// if number < 0 then
59764: LD_VAR 0 1
59768: PUSH
59769: LD_INT 0
59771: LESS
59772: IFFALSE 59782
// result := 0 ;
59774: LD_ADDR_VAR 0 2
59778: PUSH
59779: LD_INT 0
59781: ST_TO_ADDR
// end ;
59782: LD_VAR 0 2
59786: RET
// export function SortByClass ( units , class ) ; var un ; begin
59787: LD_INT 0
59789: PPUSH
59790: PPUSH
// if not units or not class then
59791: LD_VAR 0 1
59795: NOT
59796: PUSH
59797: LD_VAR 0 2
59801: NOT
59802: OR
59803: IFFALSE 59807
// exit ;
59805: GO 59902
// result := [ ] ;
59807: LD_ADDR_VAR 0 3
59811: PUSH
59812: EMPTY
59813: ST_TO_ADDR
// for un in units do
59814: LD_ADDR_VAR 0 4
59818: PUSH
59819: LD_VAR 0 1
59823: PUSH
59824: FOR_IN
59825: IFFALSE 59900
// if GetClass ( un ) = class then
59827: LD_VAR 0 4
59831: PPUSH
59832: CALL_OW 257
59836: PUSH
59837: LD_VAR 0 2
59841: EQUAL
59842: IFFALSE 59869
// result := Insert ( result , 1 , un ) else
59844: LD_ADDR_VAR 0 3
59848: PUSH
59849: LD_VAR 0 3
59853: PPUSH
59854: LD_INT 1
59856: PPUSH
59857: LD_VAR 0 4
59861: PPUSH
59862: CALL_OW 2
59866: ST_TO_ADDR
59867: GO 59898
// result := Replace ( result , result + 1 , un ) ;
59869: LD_ADDR_VAR 0 3
59873: PUSH
59874: LD_VAR 0 3
59878: PPUSH
59879: LD_VAR 0 3
59883: PUSH
59884: LD_INT 1
59886: PLUS
59887: PPUSH
59888: LD_VAR 0 4
59892: PPUSH
59893: CALL_OW 1
59897: ST_TO_ADDR
59898: GO 59824
59900: POP
59901: POP
// end ;
59902: LD_VAR 0 3
59906: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59907: LD_INT 0
59909: PPUSH
59910: PPUSH
59911: PPUSH
59912: PPUSH
59913: PPUSH
59914: PPUSH
59915: PPUSH
// result := [ ] ;
59916: LD_ADDR_VAR 0 4
59920: PUSH
59921: EMPTY
59922: ST_TO_ADDR
// if x - r < 0 then
59923: LD_VAR 0 1
59927: PUSH
59928: LD_VAR 0 3
59932: MINUS
59933: PUSH
59934: LD_INT 0
59936: LESS
59937: IFFALSE 59949
// min_x := 0 else
59939: LD_ADDR_VAR 0 8
59943: PUSH
59944: LD_INT 0
59946: ST_TO_ADDR
59947: GO 59965
// min_x := x - r ;
59949: LD_ADDR_VAR 0 8
59953: PUSH
59954: LD_VAR 0 1
59958: PUSH
59959: LD_VAR 0 3
59963: MINUS
59964: ST_TO_ADDR
// if y - r < 0 then
59965: LD_VAR 0 2
59969: PUSH
59970: LD_VAR 0 3
59974: MINUS
59975: PUSH
59976: LD_INT 0
59978: LESS
59979: IFFALSE 59991
// min_y := 0 else
59981: LD_ADDR_VAR 0 7
59985: PUSH
59986: LD_INT 0
59988: ST_TO_ADDR
59989: GO 60007
// min_y := y - r ;
59991: LD_ADDR_VAR 0 7
59995: PUSH
59996: LD_VAR 0 2
60000: PUSH
60001: LD_VAR 0 3
60005: MINUS
60006: ST_TO_ADDR
// max_x := x + r ;
60007: LD_ADDR_VAR 0 9
60011: PUSH
60012: LD_VAR 0 1
60016: PUSH
60017: LD_VAR 0 3
60021: PLUS
60022: ST_TO_ADDR
// max_y := y + r ;
60023: LD_ADDR_VAR 0 10
60027: PUSH
60028: LD_VAR 0 2
60032: PUSH
60033: LD_VAR 0 3
60037: PLUS
60038: ST_TO_ADDR
// for _x = min_x to max_x do
60039: LD_ADDR_VAR 0 5
60043: PUSH
60044: DOUBLE
60045: LD_VAR 0 8
60049: DEC
60050: ST_TO_ADDR
60051: LD_VAR 0 9
60055: PUSH
60056: FOR_TO
60057: IFFALSE 60158
// for _y = min_y to max_y do
60059: LD_ADDR_VAR 0 6
60063: PUSH
60064: DOUBLE
60065: LD_VAR 0 7
60069: DEC
60070: ST_TO_ADDR
60071: LD_VAR 0 10
60075: PUSH
60076: FOR_TO
60077: IFFALSE 60154
// begin if not ValidHex ( _x , _y ) then
60079: LD_VAR 0 5
60083: PPUSH
60084: LD_VAR 0 6
60088: PPUSH
60089: CALL_OW 488
60093: NOT
60094: IFFALSE 60098
// continue ;
60096: GO 60076
// if GetResourceTypeXY ( _x , _y ) then
60098: LD_VAR 0 5
60102: PPUSH
60103: LD_VAR 0 6
60107: PPUSH
60108: CALL_OW 283
60112: IFFALSE 60152
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60114: LD_ADDR_VAR 0 4
60118: PUSH
60119: LD_VAR 0 4
60123: PPUSH
60124: LD_VAR 0 4
60128: PUSH
60129: LD_INT 1
60131: PLUS
60132: PPUSH
60133: LD_VAR 0 5
60137: PUSH
60138: LD_VAR 0 6
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PPUSH
60147: CALL_OW 1
60151: ST_TO_ADDR
// end ;
60152: GO 60076
60154: POP
60155: POP
60156: GO 60056
60158: POP
60159: POP
// end ;
60160: LD_VAR 0 4
60164: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60165: LD_INT 0
60167: PPUSH
60168: PPUSH
60169: PPUSH
60170: PPUSH
60171: PPUSH
60172: PPUSH
60173: PPUSH
60174: PPUSH
// if not units then
60175: LD_VAR 0 1
60179: NOT
60180: IFFALSE 60184
// exit ;
60182: GO 60708
// result := UnitFilter ( units , [ f_ok ] ) ;
60184: LD_ADDR_VAR 0 3
60188: PUSH
60189: LD_VAR 0 1
60193: PPUSH
60194: LD_INT 50
60196: PUSH
60197: EMPTY
60198: LIST
60199: PPUSH
60200: CALL_OW 72
60204: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60205: LD_ADDR_VAR 0 8
60209: PUSH
60210: LD_VAR 0 1
60214: PUSH
60215: LD_INT 1
60217: ARRAY
60218: PPUSH
60219: CALL_OW 255
60223: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60224: LD_ADDR_VAR 0 10
60228: PUSH
60229: LD_INT 29
60231: PUSH
60232: LD_INT 91
60234: PUSH
60235: LD_INT 49
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: LIST
60242: ST_TO_ADDR
// if not result then
60243: LD_VAR 0 3
60247: NOT
60248: IFFALSE 60252
// exit ;
60250: GO 60708
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60252: LD_ADDR_VAR 0 5
60256: PUSH
60257: LD_INT 81
60259: PUSH
60260: LD_VAR 0 8
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PPUSH
60269: CALL_OW 69
60273: ST_TO_ADDR
// for i in result do
60274: LD_ADDR_VAR 0 4
60278: PUSH
60279: LD_VAR 0 3
60283: PUSH
60284: FOR_IN
60285: IFFALSE 60706
// begin tag := GetTag ( i ) + 1 ;
60287: LD_ADDR_VAR 0 9
60291: PUSH
60292: LD_VAR 0 4
60296: PPUSH
60297: CALL_OW 110
60301: PUSH
60302: LD_INT 1
60304: PLUS
60305: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60306: LD_ADDR_VAR 0 7
60310: PUSH
60311: LD_VAR 0 4
60315: PPUSH
60316: CALL_OW 250
60320: PPUSH
60321: LD_VAR 0 4
60325: PPUSH
60326: CALL_OW 251
60330: PPUSH
60331: LD_INT 6
60333: PPUSH
60334: CALL 59907 0 3
60338: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60339: LD_VAR 0 4
60343: PPUSH
60344: CALL_OW 247
60348: PUSH
60349: LD_INT 2
60351: EQUAL
60352: PUSH
60353: LD_VAR 0 7
60357: AND
60358: PUSH
60359: LD_VAR 0 4
60363: PPUSH
60364: CALL_OW 264
60368: PUSH
60369: LD_VAR 0 10
60373: IN
60374: NOT
60375: AND
60376: IFFALSE 60415
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60378: LD_VAR 0 4
60382: PPUSH
60383: LD_VAR 0 7
60387: PUSH
60388: LD_INT 1
60390: ARRAY
60391: PUSH
60392: LD_INT 1
60394: ARRAY
60395: PPUSH
60396: LD_VAR 0 7
60400: PUSH
60401: LD_INT 1
60403: ARRAY
60404: PUSH
60405: LD_INT 2
60407: ARRAY
60408: PPUSH
60409: CALL_OW 116
60413: GO 60704
// if path > tag then
60415: LD_VAR 0 2
60419: PUSH
60420: LD_VAR 0 9
60424: GREATER
60425: IFFALSE 60633
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60427: LD_ADDR_VAR 0 6
60431: PUSH
60432: LD_VAR 0 5
60436: PPUSH
60437: LD_INT 91
60439: PUSH
60440: LD_VAR 0 4
60444: PUSH
60445: LD_INT 8
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: LIST
60452: PPUSH
60453: CALL_OW 72
60457: ST_TO_ADDR
// if nearEnemy then
60458: LD_VAR 0 6
60462: IFFALSE 60531
// begin if GetWeapon ( i ) = ru_time_lapser then
60464: LD_VAR 0 4
60468: PPUSH
60469: CALL_OW 264
60473: PUSH
60474: LD_INT 49
60476: EQUAL
60477: IFFALSE 60505
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60479: LD_VAR 0 4
60483: PPUSH
60484: LD_VAR 0 6
60488: PPUSH
60489: LD_VAR 0 4
60493: PPUSH
60494: CALL_OW 74
60498: PPUSH
60499: CALL_OW 112
60503: GO 60529
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60505: LD_VAR 0 4
60509: PPUSH
60510: LD_VAR 0 6
60514: PPUSH
60515: LD_VAR 0 4
60519: PPUSH
60520: CALL_OW 74
60524: PPUSH
60525: CALL_OW 115
// end else
60529: GO 60631
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60531: LD_VAR 0 4
60535: PPUSH
60536: LD_VAR 0 2
60540: PUSH
60541: LD_VAR 0 9
60545: ARRAY
60546: PUSH
60547: LD_INT 1
60549: ARRAY
60550: PPUSH
60551: LD_VAR 0 2
60555: PUSH
60556: LD_VAR 0 9
60560: ARRAY
60561: PUSH
60562: LD_INT 2
60564: ARRAY
60565: PPUSH
60566: CALL_OW 297
60570: PUSH
60571: LD_INT 6
60573: GREATER
60574: IFFALSE 60617
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60576: LD_VAR 0 4
60580: PPUSH
60581: LD_VAR 0 2
60585: PUSH
60586: LD_VAR 0 9
60590: ARRAY
60591: PUSH
60592: LD_INT 1
60594: ARRAY
60595: PPUSH
60596: LD_VAR 0 2
60600: PUSH
60601: LD_VAR 0 9
60605: ARRAY
60606: PUSH
60607: LD_INT 2
60609: ARRAY
60610: PPUSH
60611: CALL_OW 114
60615: GO 60631
// SetTag ( i , tag ) ;
60617: LD_VAR 0 4
60621: PPUSH
60622: LD_VAR 0 9
60626: PPUSH
60627: CALL_OW 109
// end else
60631: GO 60704
// if enemy then
60633: LD_VAR 0 5
60637: IFFALSE 60704
// begin if GetWeapon ( i ) = ru_time_lapser then
60639: LD_VAR 0 4
60643: PPUSH
60644: CALL_OW 264
60648: PUSH
60649: LD_INT 49
60651: EQUAL
60652: IFFALSE 60680
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60654: LD_VAR 0 4
60658: PPUSH
60659: LD_VAR 0 5
60663: PPUSH
60664: LD_VAR 0 4
60668: PPUSH
60669: CALL_OW 74
60673: PPUSH
60674: CALL_OW 112
60678: GO 60704
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60680: LD_VAR 0 4
60684: PPUSH
60685: LD_VAR 0 5
60689: PPUSH
60690: LD_VAR 0 4
60694: PPUSH
60695: CALL_OW 74
60699: PPUSH
60700: CALL_OW 115
// end ; end ;
60704: GO 60284
60706: POP
60707: POP
// end ;
60708: LD_VAR 0 3
60712: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60713: LD_INT 0
60715: PPUSH
60716: PPUSH
60717: PPUSH
// if not unit or IsInUnit ( unit ) then
60718: LD_VAR 0 1
60722: NOT
60723: PUSH
60724: LD_VAR 0 1
60728: PPUSH
60729: CALL_OW 310
60733: OR
60734: IFFALSE 60738
// exit ;
60736: GO 60829
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60738: LD_ADDR_VAR 0 4
60742: PUSH
60743: LD_VAR 0 1
60747: PPUSH
60748: CALL_OW 250
60752: PPUSH
60753: LD_VAR 0 2
60757: PPUSH
60758: LD_INT 1
60760: PPUSH
60761: CALL_OW 272
60765: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60766: LD_ADDR_VAR 0 5
60770: PUSH
60771: LD_VAR 0 1
60775: PPUSH
60776: CALL_OW 251
60780: PPUSH
60781: LD_VAR 0 2
60785: PPUSH
60786: LD_INT 1
60788: PPUSH
60789: CALL_OW 273
60793: ST_TO_ADDR
// if ValidHex ( x , y ) then
60794: LD_VAR 0 4
60798: PPUSH
60799: LD_VAR 0 5
60803: PPUSH
60804: CALL_OW 488
60808: IFFALSE 60829
// ComTurnXY ( unit , x , y ) ;
60810: LD_VAR 0 1
60814: PPUSH
60815: LD_VAR 0 4
60819: PPUSH
60820: LD_VAR 0 5
60824: PPUSH
60825: CALL_OW 118
// end ;
60829: LD_VAR 0 3
60833: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60834: LD_INT 0
60836: PPUSH
60837: PPUSH
// result := false ;
60838: LD_ADDR_VAR 0 3
60842: PUSH
60843: LD_INT 0
60845: ST_TO_ADDR
// if not units then
60846: LD_VAR 0 2
60850: NOT
60851: IFFALSE 60855
// exit ;
60853: GO 60900
// for i in units do
60855: LD_ADDR_VAR 0 4
60859: PUSH
60860: LD_VAR 0 2
60864: PUSH
60865: FOR_IN
60866: IFFALSE 60898
// if See ( side , i ) then
60868: LD_VAR 0 1
60872: PPUSH
60873: LD_VAR 0 4
60877: PPUSH
60878: CALL_OW 292
60882: IFFALSE 60896
// begin result := true ;
60884: LD_ADDR_VAR 0 3
60888: PUSH
60889: LD_INT 1
60891: ST_TO_ADDR
// exit ;
60892: POP
60893: POP
60894: GO 60900
// end ;
60896: GO 60865
60898: POP
60899: POP
// end ;
60900: LD_VAR 0 3
60904: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60905: LD_INT 0
60907: PPUSH
60908: PPUSH
60909: PPUSH
60910: PPUSH
// if not unit or not points then
60911: LD_VAR 0 1
60915: NOT
60916: PUSH
60917: LD_VAR 0 2
60921: NOT
60922: OR
60923: IFFALSE 60927
// exit ;
60925: GO 61017
// dist := 99999 ;
60927: LD_ADDR_VAR 0 5
60931: PUSH
60932: LD_INT 99999
60934: ST_TO_ADDR
// for i in points do
60935: LD_ADDR_VAR 0 4
60939: PUSH
60940: LD_VAR 0 2
60944: PUSH
60945: FOR_IN
60946: IFFALSE 61015
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60948: LD_ADDR_VAR 0 6
60952: PUSH
60953: LD_VAR 0 1
60957: PPUSH
60958: LD_VAR 0 4
60962: PUSH
60963: LD_INT 1
60965: ARRAY
60966: PPUSH
60967: LD_VAR 0 4
60971: PUSH
60972: LD_INT 2
60974: ARRAY
60975: PPUSH
60976: CALL_OW 297
60980: ST_TO_ADDR
// if tmpDist < dist then
60981: LD_VAR 0 6
60985: PUSH
60986: LD_VAR 0 5
60990: LESS
60991: IFFALSE 61013
// begin result := i ;
60993: LD_ADDR_VAR 0 3
60997: PUSH
60998: LD_VAR 0 4
61002: ST_TO_ADDR
// dist := tmpDist ;
61003: LD_ADDR_VAR 0 5
61007: PUSH
61008: LD_VAR 0 6
61012: ST_TO_ADDR
// end ; end ;
61013: GO 60945
61015: POP
61016: POP
// end ;
61017: LD_VAR 0 3
61021: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61022: LD_INT 0
61024: PPUSH
// uc_side := side ;
61025: LD_ADDR_OWVAR 20
61029: PUSH
61030: LD_VAR 0 1
61034: ST_TO_ADDR
// uc_nation := 3 ;
61035: LD_ADDR_OWVAR 21
61039: PUSH
61040: LD_INT 3
61042: ST_TO_ADDR
// vc_chassis := 25 ;
61043: LD_ADDR_OWVAR 37
61047: PUSH
61048: LD_INT 25
61050: ST_TO_ADDR
// vc_engine := engine_siberite ;
61051: LD_ADDR_OWVAR 39
61055: PUSH
61056: LD_INT 3
61058: ST_TO_ADDR
// vc_control := control_computer ;
61059: LD_ADDR_OWVAR 38
61063: PUSH
61064: LD_INT 3
61066: ST_TO_ADDR
// vc_weapon := 59 ;
61067: LD_ADDR_OWVAR 40
61071: PUSH
61072: LD_INT 59
61074: ST_TO_ADDR
// result := CreateVehicle ;
61075: LD_ADDR_VAR 0 5
61079: PUSH
61080: CALL_OW 45
61084: ST_TO_ADDR
// SetDir ( result , d ) ;
61085: LD_VAR 0 5
61089: PPUSH
61090: LD_VAR 0 4
61094: PPUSH
61095: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61099: LD_VAR 0 5
61103: PPUSH
61104: LD_VAR 0 2
61108: PPUSH
61109: LD_VAR 0 3
61113: PPUSH
61114: LD_INT 0
61116: PPUSH
61117: CALL_OW 48
// end ;
61121: LD_VAR 0 5
61125: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61126: LD_INT 0
61128: PPUSH
61129: PPUSH
61130: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61131: LD_ADDR_VAR 0 2
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61154: LD_VAR 0 1
61158: NOT
61159: PUSH
61160: LD_VAR 0 1
61164: PPUSH
61165: CALL_OW 264
61169: PUSH
61170: LD_INT 12
61172: PUSH
61173: LD_INT 51
61175: PUSH
61176: LD_INT 32
61178: PUSH
61179: LD_INT 89
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: IN
61188: NOT
61189: OR
61190: IFFALSE 61194
// exit ;
61192: GO 61292
// for i := 1 to 3 do
61194: LD_ADDR_VAR 0 3
61198: PUSH
61199: DOUBLE
61200: LD_INT 1
61202: DEC
61203: ST_TO_ADDR
61204: LD_INT 3
61206: PUSH
61207: FOR_TO
61208: IFFALSE 61290
// begin tmp := GetCargo ( cargo , i ) ;
61210: LD_ADDR_VAR 0 4
61214: PUSH
61215: LD_VAR 0 1
61219: PPUSH
61220: LD_VAR 0 3
61224: PPUSH
61225: CALL_OW 289
61229: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61230: LD_ADDR_VAR 0 2
61234: PUSH
61235: LD_VAR 0 2
61239: PPUSH
61240: LD_VAR 0 3
61244: PPUSH
61245: LD_VAR 0 4
61249: PPUSH
61250: CALL_OW 1
61254: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61255: LD_ADDR_VAR 0 2
61259: PUSH
61260: LD_VAR 0 2
61264: PPUSH
61265: LD_INT 4
61267: PPUSH
61268: LD_VAR 0 2
61272: PUSH
61273: LD_INT 4
61275: ARRAY
61276: PUSH
61277: LD_VAR 0 4
61281: PLUS
61282: PPUSH
61283: CALL_OW 1
61287: ST_TO_ADDR
// end ;
61288: GO 61207
61290: POP
61291: POP
// end ;
61292: LD_VAR 0 2
61296: RET
// export function Length ( array ) ; begin
61297: LD_INT 0
61299: PPUSH
// result := array + 0 ;
61300: LD_ADDR_VAR 0 2
61304: PUSH
61305: LD_VAR 0 1
61309: PUSH
61310: LD_INT 0
61312: PLUS
61313: ST_TO_ADDR
// end ;
61314: LD_VAR 0 2
61318: RET
// export function PrepareArray ( array ) ; begin
61319: LD_INT 0
61321: PPUSH
// result := array diff 0 ;
61322: LD_ADDR_VAR 0 2
61326: PUSH
61327: LD_VAR 0 1
61331: PUSH
61332: LD_INT 0
61334: DIFF
61335: ST_TO_ADDR
// if not result [ 1 ] then
61336: LD_VAR 0 2
61340: PUSH
61341: LD_INT 1
61343: ARRAY
61344: NOT
61345: IFFALSE 61365
// result := Delete ( result , 1 ) ;
61347: LD_ADDR_VAR 0 2
61351: PUSH
61352: LD_VAR 0 2
61356: PPUSH
61357: LD_INT 1
61359: PPUSH
61360: CALL_OW 3
61364: ST_TO_ADDR
// end ;
61365: LD_VAR 0 2
61369: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61370: LD_INT 0
61372: PPUSH
61373: PPUSH
61374: PPUSH
61375: PPUSH
// sibRocketRange := 25 ;
61376: LD_ADDR_VAR 0 6
61380: PUSH
61381: LD_INT 25
61383: ST_TO_ADDR
// result := false ;
61384: LD_ADDR_VAR 0 4
61388: PUSH
61389: LD_INT 0
61391: ST_TO_ADDR
// for i := 0 to 5 do
61392: LD_ADDR_VAR 0 5
61396: PUSH
61397: DOUBLE
61398: LD_INT 0
61400: DEC
61401: ST_TO_ADDR
61402: LD_INT 5
61404: PUSH
61405: FOR_TO
61406: IFFALSE 61473
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61408: LD_VAR 0 1
61412: PPUSH
61413: LD_VAR 0 5
61417: PPUSH
61418: LD_VAR 0 6
61422: PPUSH
61423: CALL_OW 272
61427: PPUSH
61428: LD_VAR 0 2
61432: PPUSH
61433: LD_VAR 0 5
61437: PPUSH
61438: LD_VAR 0 6
61442: PPUSH
61443: CALL_OW 273
61447: PPUSH
61448: LD_VAR 0 3
61452: PPUSH
61453: CALL_OW 309
61457: IFFALSE 61471
// begin result := true ;
61459: LD_ADDR_VAR 0 4
61463: PUSH
61464: LD_INT 1
61466: ST_TO_ADDR
// exit ;
61467: POP
61468: POP
61469: GO 61475
// end ;
61471: GO 61405
61473: POP
61474: POP
// end ;
61475: LD_VAR 0 4
61479: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
61480: LD_INT 0
61482: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
61483: LD_VAR 0 1
61487: PPUSH
61488: LD_VAR 0 2
61492: PPUSH
61493: LD_INT 0
61495: PPUSH
61496: LD_INT 0
61498: PPUSH
61499: LD_INT 1
61501: PPUSH
61502: LD_INT 0
61504: PPUSH
61505: CALL_OW 587
// end ;
61509: LD_VAR 0 3
61513: RET
