// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// end ; end_of_file
  11: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
  12: LD_INT 0
  14: PPUSH
  15: PPUSH
  16: PPUSH
  17: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  18: LD_VAR 0 1
  22: PPUSH
  23: CALL_OW 264
  27: PUSH
  28: LD_EXP 5
  32: EQUAL
  33: IFFALSE 105
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  35: LD_INT 68
  37: PPUSH
  38: LD_VAR 0 1
  42: PPUSH
  43: CALL_OW 255
  47: PPUSH
  48: CALL_OW 321
  52: PUSH
  53: LD_INT 2
  55: EQUAL
  56: IFFALSE 68
// eff := 70 else
  58: LD_ADDR_VAR 0 4
  62: PUSH
  63: LD_INT 70
  65: ST_TO_ADDR
  66: GO 76
// eff := 30 ;
  68: LD_ADDR_VAR 0 4
  72: PUSH
  73: LD_INT 30
  75: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  76: LD_VAR 0 1
  80: PPUSH
  81: CALL_OW 250
  85: PPUSH
  86: LD_VAR 0 1
  90: PPUSH
  91: CALL_OW 251
  95: PPUSH
  96: LD_VAR 0 4
 100: PPUSH
 101: CALL_OW 495
// end ; end ;
 105: LD_VAR 0 2
 109: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 110: LD_INT 0
 112: PPUSH
// end ;
 113: LD_VAR 0 4
 117: RET
// export function SOS_Command ( cmd ) ; begin
 118: LD_INT 0
 120: PPUSH
// end ;
 121: LD_VAR 0 2
 125: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 126: LD_VAR 0 1
 130: PUSH
 131: LD_INT 255
 133: EQUAL
 134: PUSH
 135: LD_VAR 0 2
 139: PPUSH
 140: CALL_OW 264
 144: PUSH
 145: LD_INT 14
 147: PUSH
 148: LD_INT 53
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: IN
 155: AND
 156: PUSH
 157: LD_VAR 0 4
 161: PPUSH
 162: LD_VAR 0 5
 166: PPUSH
 167: CALL_OW 488
 171: AND
 172: IFFALSE 196
// CutTreeXYR ( unit , x , y , 12 ) ;
 174: LD_VAR 0 2
 178: PPUSH
 179: LD_VAR 0 4
 183: PPUSH
 184: LD_VAR 0 5
 188: PPUSH
 189: LD_INT 12
 191: PPUSH
 192: CALL 199 0 4
// end ;
 196: PPOPN 5
 198: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 199: LD_INT 0
 201: PPUSH
 202: PPUSH
 203: PPUSH
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
 208: PPUSH
 209: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 210: LD_VAR 0 1
 214: NOT
 215: PUSH
 216: LD_VAR 0 2
 220: PPUSH
 221: LD_VAR 0 3
 225: PPUSH
 226: CALL_OW 488
 230: NOT
 231: OR
 232: PUSH
 233: LD_VAR 0 4
 237: NOT
 238: OR
 239: IFFALSE 243
// exit ;
 241: GO 583
// list := [ ] ;
 243: LD_ADDR_VAR 0 13
 247: PUSH
 248: EMPTY
 249: ST_TO_ADDR
// if x - r < 0 then
 250: LD_VAR 0 2
 254: PUSH
 255: LD_VAR 0 4
 259: MINUS
 260: PUSH
 261: LD_INT 0
 263: LESS
 264: IFFALSE 276
// min_x := 0 else
 266: LD_ADDR_VAR 0 7
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
 274: GO 292
// min_x := x - r ;
 276: LD_ADDR_VAR 0 7
 280: PUSH
 281: LD_VAR 0 2
 285: PUSH
 286: LD_VAR 0 4
 290: MINUS
 291: ST_TO_ADDR
// if y - r < 0 then
 292: LD_VAR 0 3
 296: PUSH
 297: LD_VAR 0 4
 301: MINUS
 302: PUSH
 303: LD_INT 0
 305: LESS
 306: IFFALSE 318
// min_y := 0 else
 308: LD_ADDR_VAR 0 8
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
 316: GO 334
// min_y := y - r ;
 318: LD_ADDR_VAR 0 8
 322: PUSH
 323: LD_VAR 0 3
 327: PUSH
 328: LD_VAR 0 4
 332: MINUS
 333: ST_TO_ADDR
// max_x := x + r ;
 334: LD_ADDR_VAR 0 9
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_VAR 0 4
 348: PLUS
 349: ST_TO_ADDR
// max_y := y + r ;
 350: LD_ADDR_VAR 0 10
 354: PUSH
 355: LD_VAR 0 3
 359: PUSH
 360: LD_VAR 0 4
 364: PLUS
 365: ST_TO_ADDR
// for _x = min_x to max_x do
 366: LD_ADDR_VAR 0 11
 370: PUSH
 371: DOUBLE
 372: LD_VAR 0 7
 376: DEC
 377: ST_TO_ADDR
 378: LD_VAR 0 9
 382: PUSH
 383: FOR_TO
 384: IFFALSE 501
// for _y = min_y to max_y do
 386: LD_ADDR_VAR 0 12
 390: PUSH
 391: DOUBLE
 392: LD_VAR 0 8
 396: DEC
 397: ST_TO_ADDR
 398: LD_VAR 0 10
 402: PUSH
 403: FOR_TO
 404: IFFALSE 497
// begin if not ValidHex ( _x , _y ) then
 406: LD_VAR 0 11
 410: PPUSH
 411: LD_VAR 0 12
 415: PPUSH
 416: CALL_OW 488
 420: NOT
 421: IFFALSE 425
// continue ;
 423: GO 403
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 425: LD_VAR 0 11
 429: PPUSH
 430: LD_VAR 0 12
 434: PPUSH
 435: CALL_OW 351
 439: PUSH
 440: LD_VAR 0 11
 444: PPUSH
 445: LD_VAR 0 12
 449: PPUSH
 450: CALL_OW 554
 454: AND
 455: IFFALSE 495
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
 457: LD_ADDR_VAR 0 13
 461: PUSH
 462: LD_VAR 0 13
 466: PPUSH
 467: LD_VAR 0 13
 471: PUSH
 472: LD_INT 1
 474: PLUS
 475: PPUSH
 476: LD_VAR 0 11
 480: PUSH
 481: LD_VAR 0 12
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PPUSH
 490: CALL_OW 2
 494: ST_TO_ADDR
// end ;
 495: GO 403
 497: POP
 498: POP
 499: GO 383
 501: POP
 502: POP
// if not list then
 503: LD_VAR 0 13
 507: NOT
 508: IFFALSE 512
// exit ;
 510: GO 583
// for i in list do
 512: LD_ADDR_VAR 0 6
 516: PUSH
 517: LD_VAR 0 13
 521: PUSH
 522: FOR_IN
 523: IFFALSE 581
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
 525: LD_VAR 0 1
 529: PPUSH
 530: LD_STRING M
 532: PUSH
 533: LD_VAR 0 6
 537: PUSH
 538: LD_INT 1
 540: ARRAY
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 2
 549: ARRAY
 550: PUSH
 551: LD_INT 0
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 0
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: EMPTY
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: PUSH
 572: EMPTY
 573: LIST
 574: PPUSH
 575: CALL_OW 447
 579: GO 522
 581: POP
 582: POP
// end ; end_of_file
 583: LD_VAR 0 5
 587: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
 588: GO 590
 590: DISABLE
// begin ru_radar := 98 ;
 591: LD_ADDR_EXP 1
 595: PUSH
 596: LD_INT 98
 598: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 599: LD_ADDR_EXP 2
 603: PUSH
 604: LD_INT 89
 606: ST_TO_ADDR
// us_hack := 99 ;
 607: LD_ADDR_EXP 3
 611: PUSH
 612: LD_INT 99
 614: ST_TO_ADDR
// us_artillery := 97 ;
 615: LD_ADDR_EXP 4
 619: PUSH
 620: LD_INT 97
 622: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 623: LD_ADDR_EXP 5
 627: PUSH
 628: LD_INT 91
 630: ST_TO_ADDR
// tech_Artillery := 80 ;
 631: LD_ADDR_EXP 6
 635: PUSH
 636: LD_INT 80
 638: ST_TO_ADDR
// tech_RadMat := 81 ;
 639: LD_ADDR_EXP 7
 643: PUSH
 644: LD_INT 81
 646: ST_TO_ADDR
// tech_BasicTools := 82 ;
 647: LD_ADDR_EXP 8
 651: PUSH
 652: LD_INT 82
 654: ST_TO_ADDR
// tech_Cargo := 83 ;
 655: LD_ADDR_EXP 9
 659: PUSH
 660: LD_INT 83
 662: ST_TO_ADDR
// tech_Track := 84 ;
 663: LD_ADDR_EXP 10
 667: PUSH
 668: LD_INT 84
 670: ST_TO_ADDR
// tech_Crane := 85 ;
 671: LD_ADDR_EXP 11
 675: PUSH
 676: LD_INT 85
 678: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 679: LD_ADDR_EXP 12
 683: PUSH
 684: LD_INT 86
 686: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 687: LD_ADDR_EXP 13
 691: PUSH
 692: LD_INT 87
 694: ST_TO_ADDR
// end ;
 695: END
