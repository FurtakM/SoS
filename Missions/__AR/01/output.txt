// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_EXP 17
  25: EQUAL
  26: IFFALSE 98
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  28: LD_INT 68
  30: PPUSH
  31: LD_VAR 0 1
  35: PPUSH
  36: CALL_OW 255
  40: PPUSH
  41: CALL_OW 321
  45: PUSH
  46: LD_INT 2
  48: EQUAL
  49: IFFALSE 61
// eff := 70 else
  51: LD_ADDR_VAR 0 4
  55: PUSH
  56: LD_INT 70
  58: ST_TO_ADDR
  59: GO 69
// eff := 30 ;
  61: LD_ADDR_VAR 0 4
  65: PUSH
  66: LD_INT 30
  68: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  69: LD_VAR 0 1
  73: PPUSH
  74: CALL_OW 250
  78: PPUSH
  79: LD_VAR 0 1
  83: PPUSH
  84: CALL_OW 251
  88: PPUSH
  89: LD_VAR 0 4
  93: PPUSH
  94: CALL_OW 495
// end ; end ;
  98: LD_VAR 0 2
 102: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 103: LD_INT 0
 105: PPUSH
// end ;
 106: LD_VAR 0 4
 110: RET
// export function SOS_Command ( cmd ) ; begin
 111: LD_INT 0
 113: PPUSH
// end ;
 114: LD_VAR 0 2
 118: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
 119: LD_INT 0
 121: PPUSH
// if cmd = 121 then
 122: LD_VAR 0 1
 126: PUSH
 127: LD_INT 121
 129: EQUAL
 130: IFFALSE 132
// end ;
 132: LD_VAR 0 6
 136: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 137: LD_INT 0
 139: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 140: LD_VAR 0 1
 144: PUSH
 145: LD_INT 250
 147: EQUAL
 148: PUSH
 149: LD_VAR 0 2
 153: PPUSH
 154: CALL_OW 264
 158: PUSH
 159: LD_EXP 20
 163: EQUAL
 164: AND
 165: IFFALSE 186
// MinerPlaceMine ( unit , x , y ) ;
 167: LD_VAR 0 2
 171: PPUSH
 172: LD_VAR 0 4
 176: PPUSH
 177: LD_VAR 0 5
 181: PPUSH
 182: CALL 2535 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 186: LD_VAR 0 1
 190: PUSH
 191: LD_INT 251
 193: EQUAL
 194: PUSH
 195: LD_VAR 0 2
 199: PPUSH
 200: CALL_OW 264
 204: PUSH
 205: LD_EXP 20
 209: EQUAL
 210: AND
 211: IFFALSE 232
// MinerDetonateMine ( unit , x , y ) ;
 213: LD_VAR 0 2
 217: PPUSH
 218: LD_VAR 0 4
 222: PPUSH
 223: LD_VAR 0 5
 227: PPUSH
 228: CALL 2812 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 232: LD_VAR 0 1
 236: PUSH
 237: LD_INT 252
 239: EQUAL
 240: PUSH
 241: LD_VAR 0 2
 245: PPUSH
 246: CALL_OW 264
 250: PUSH
 251: LD_EXP 20
 255: EQUAL
 256: AND
 257: IFFALSE 278
// MinerCreateMinefield ( unit , x , y ) ;
 259: LD_VAR 0 2
 263: PPUSH
 264: LD_VAR 0 4
 268: PPUSH
 269: LD_VAR 0 5
 273: PPUSH
 274: CALL 3229 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 278: LD_VAR 0 1
 282: PUSH
 283: LD_INT 253
 285: EQUAL
 286: PUSH
 287: LD_VAR 0 2
 291: PPUSH
 292: CALL_OW 257
 296: PUSH
 297: LD_INT 5
 299: EQUAL
 300: AND
 301: IFFALSE 322
// ComBinocular ( unit , x , y ) ;
 303: LD_VAR 0 2
 307: PPUSH
 308: LD_VAR 0 4
 312: PPUSH
 313: LD_VAR 0 5
 317: PPUSH
 318: CALL 3600 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 322: LD_VAR 0 1
 326: PUSH
 327: LD_INT 254
 329: EQUAL
 330: PUSH
 331: LD_VAR 0 2
 335: PPUSH
 336: CALL_OW 264
 340: PUSH
 341: LD_EXP 15
 345: EQUAL
 346: AND
 347: PUSH
 348: LD_VAR 0 3
 352: PPUSH
 353: CALL_OW 263
 357: PUSH
 358: LD_INT 3
 360: EQUAL
 361: AND
 362: IFFALSE 378
// HackDestroyVehicle ( unit , selectedUnit ) ;
 364: LD_VAR 0 2
 368: PPUSH
 369: LD_VAR 0 3
 373: PPUSH
 374: CALL 1895 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 378: LD_VAR 0 1
 382: PUSH
 383: LD_INT 255
 385: EQUAL
 386: PUSH
 387: LD_VAR 0 2
 391: PPUSH
 392: CALL_OW 264
 396: PUSH
 397: LD_INT 14
 399: PUSH
 400: LD_INT 53
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: IN
 407: AND
 408: PUSH
 409: LD_VAR 0 4
 413: PPUSH
 414: LD_VAR 0 5
 418: PPUSH
 419: CALL_OW 488
 423: AND
 424: IFFALSE 448
// CutTreeXYR ( unit , x , y , 12 ) ;
 426: LD_VAR 0 2
 430: PPUSH
 431: LD_VAR 0 4
 435: PPUSH
 436: LD_VAR 0 5
 440: PPUSH
 441: LD_INT 12
 443: PPUSH
 444: CALL 461 0 4
// end ;
 448: LD_VAR 0 6
 452: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
 453: LD_INT 0
 455: PPUSH
// end ;
 456: LD_VAR 0 4
 460: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 461: LD_INT 0
 463: PPUSH
 464: PPUSH
 465: PPUSH
 466: PPUSH
 467: PPUSH
 468: PPUSH
 469: PPUSH
 470: PPUSH
 471: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 472: LD_VAR 0 1
 476: NOT
 477: PUSH
 478: LD_VAR 0 2
 482: PPUSH
 483: LD_VAR 0 3
 487: PPUSH
 488: CALL_OW 488
 492: NOT
 493: OR
 494: PUSH
 495: LD_VAR 0 4
 499: NOT
 500: OR
 501: IFFALSE 505
// exit ;
 503: GO 845
// list := [ ] ;
 505: LD_ADDR_VAR 0 13
 509: PUSH
 510: EMPTY
 511: ST_TO_ADDR
// if x - r < 0 then
 512: LD_VAR 0 2
 516: PUSH
 517: LD_VAR 0 4
 521: MINUS
 522: PUSH
 523: LD_INT 0
 525: LESS
 526: IFFALSE 538
// min_x := 0 else
 528: LD_ADDR_VAR 0 7
 532: PUSH
 533: LD_INT 0
 535: ST_TO_ADDR
 536: GO 554
// min_x := x - r ;
 538: LD_ADDR_VAR 0 7
 542: PUSH
 543: LD_VAR 0 2
 547: PUSH
 548: LD_VAR 0 4
 552: MINUS
 553: ST_TO_ADDR
// if y - r < 0 then
 554: LD_VAR 0 3
 558: PUSH
 559: LD_VAR 0 4
 563: MINUS
 564: PUSH
 565: LD_INT 0
 567: LESS
 568: IFFALSE 580
// min_y := 0 else
 570: LD_ADDR_VAR 0 8
 574: PUSH
 575: LD_INT 0
 577: ST_TO_ADDR
 578: GO 596
// min_y := y - r ;
 580: LD_ADDR_VAR 0 8
 584: PUSH
 585: LD_VAR 0 3
 589: PUSH
 590: LD_VAR 0 4
 594: MINUS
 595: ST_TO_ADDR
// max_x := x + r ;
 596: LD_ADDR_VAR 0 9
 600: PUSH
 601: LD_VAR 0 2
 605: PUSH
 606: LD_VAR 0 4
 610: PLUS
 611: ST_TO_ADDR
// max_y := y + r ;
 612: LD_ADDR_VAR 0 10
 616: PUSH
 617: LD_VAR 0 3
 621: PUSH
 622: LD_VAR 0 4
 626: PLUS
 627: ST_TO_ADDR
// for _x = min_x to max_x do
 628: LD_ADDR_VAR 0 11
 632: PUSH
 633: DOUBLE
 634: LD_VAR 0 7
 638: DEC
 639: ST_TO_ADDR
 640: LD_VAR 0 9
 644: PUSH
 645: FOR_TO
 646: IFFALSE 763
// for _y = min_y to max_y do
 648: LD_ADDR_VAR 0 12
 652: PUSH
 653: DOUBLE
 654: LD_VAR 0 8
 658: DEC
 659: ST_TO_ADDR
 660: LD_VAR 0 10
 664: PUSH
 665: FOR_TO
 666: IFFALSE 759
// begin if not ValidHex ( _x , _y ) then
 668: LD_VAR 0 11
 672: PPUSH
 673: LD_VAR 0 12
 677: PPUSH
 678: CALL_OW 488
 682: NOT
 683: IFFALSE 687
// continue ;
 685: GO 665
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 687: LD_VAR 0 11
 691: PPUSH
 692: LD_VAR 0 12
 696: PPUSH
 697: CALL_OW 351
 701: PUSH
 702: LD_VAR 0 11
 706: PPUSH
 707: LD_VAR 0 12
 711: PPUSH
 712: CALL_OW 554
 716: AND
 717: IFFALSE 757
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
 719: LD_ADDR_VAR 0 13
 723: PUSH
 724: LD_VAR 0 13
 728: PPUSH
 729: LD_VAR 0 13
 733: PUSH
 734: LD_INT 1
 736: PLUS
 737: PPUSH
 738: LD_VAR 0 11
 742: PUSH
 743: LD_VAR 0 12
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PPUSH
 752: CALL_OW 2
 756: ST_TO_ADDR
// end ;
 757: GO 665
 759: POP
 760: POP
 761: GO 645
 763: POP
 764: POP
// if not list then
 765: LD_VAR 0 13
 769: NOT
 770: IFFALSE 774
// exit ;
 772: GO 845
// for i in list do
 774: LD_ADDR_VAR 0 6
 778: PUSH
 779: LD_VAR 0 13
 783: PUSH
 784: FOR_IN
 785: IFFALSE 843
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: LD_STRING M
 794: PUSH
 795: LD_VAR 0 6
 799: PUSH
 800: LD_INT 1
 802: ARRAY
 803: PUSH
 804: LD_VAR 0 6
 808: PUSH
 809: LD_INT 2
 811: ARRAY
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: LD_INT 0
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: PUSH
 834: EMPTY
 835: LIST
 836: PPUSH
 837: CALL_OW 447
 841: GO 784
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 5
 849: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
 850: LD_EXP 3
 854: NOT
 855: IFFALSE 905
 857: GO 859
 859: DISABLE
// begin initHack := true ;
 860: LD_ADDR_EXP 3
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// hackTanks := [ ] ;
 868: LD_ADDR_EXP 4
 872: PUSH
 873: EMPTY
 874: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
 875: LD_ADDR_EXP 5
 879: PUSH
 880: EMPTY
 881: ST_TO_ADDR
// hackLimit := 3 ;
 882: LD_ADDR_EXP 6
 886: PUSH
 887: LD_INT 3
 889: ST_TO_ADDR
// hackDist := 12 ;
 890: LD_ADDR_EXP 7
 894: PUSH
 895: LD_INT 12
 897: ST_TO_ADDR
// hackCounter := [ ] ;
 898: LD_ADDR_EXP 8
 902: PUSH
 903: EMPTY
 904: ST_TO_ADDR
// end ;
 905: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
 906: LD_EXP 3
 910: PUSH
 911: LD_INT 34
 913: PUSH
 914: LD_EXP 15
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: PPUSH
 923: CALL_OW 69
 927: AND
 928: IFFALSE 1183
 930: GO 932
 932: DISABLE
 933: LD_INT 0
 935: PPUSH
 936: PPUSH
// begin enable ;
 937: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
 938: LD_ADDR_VAR 0 1
 942: PUSH
 943: LD_INT 34
 945: PUSH
 946: LD_EXP 15
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: PUSH
 960: FOR_IN
 961: IFFALSE 1181
// begin if not i in hackTanks then
 963: LD_VAR 0 1
 967: PUSH
 968: LD_EXP 4
 972: IN
 973: NOT
 974: IFFALSE 1057
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
 976: LD_ADDR_EXP 4
 980: PUSH
 981: LD_EXP 4
 985: PPUSH
 986: LD_EXP 4
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: PPUSH
 995: LD_VAR 0 1
 999: PPUSH
1000: CALL_OW 1
1004: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
1005: LD_ADDR_EXP 5
1009: PUSH
1010: LD_EXP 5
1014: PPUSH
1015: LD_EXP 5
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: PPUSH
1024: EMPTY
1025: PPUSH
1026: CALL_OW 1
1030: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1031: LD_ADDR_EXP 8
1035: PUSH
1036: LD_EXP 8
1040: PPUSH
1041: LD_EXP 8
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: PPUSH
1050: EMPTY
1051: PPUSH
1052: CALL_OW 1
1056: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1057: LD_VAR 0 1
1061: PPUSH
1062: CALL_OW 302
1066: NOT
1067: IFFALSE 1080
// begin HackUnlinkAll ( i ) ;
1069: LD_VAR 0 1
1073: PPUSH
1074: CALL 1186 0 1
// continue ;
1078: GO 960
// end ; HackCheckCapturedStatus ( i ) ;
1080: LD_VAR 0 1
1084: PPUSH
1085: CALL 1629 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1089: LD_ADDR_VAR 0 2
1093: PUSH
1094: LD_INT 81
1096: PUSH
1097: LD_VAR 0 1
1101: PPUSH
1102: CALL_OW 255
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 33
1113: PUSH
1114: LD_INT 3
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 91
1123: PUSH
1124: LD_VAR 0 1
1128: PUSH
1129: LD_EXP 7
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_INT 50
1141: PUSH
1142: EMPTY
1143: LIST
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 69
1155: ST_TO_ADDR
// if not tmp then
1156: LD_VAR 0 2
1160: NOT
1161: IFFALSE 1165
// continue ;
1163: GO 960
// HackLink ( i , tmp ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 2
1174: PPUSH
1175: CALL 1322 0 2
// end ;
1179: GO 960
1181: POP
1182: POP
// end ;
1183: PPOPN 2
1185: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1186: LD_INT 0
1188: PPUSH
1189: PPUSH
1190: PPUSH
// if not hack in hackTanks then
1191: LD_VAR 0 1
1195: PUSH
1196: LD_EXP 4
1200: IN
1201: NOT
1202: IFFALSE 1206
// exit ;
1204: GO 1317
// index := GetElementIndex ( hackTanks , hack ) ;
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_EXP 4
1215: PPUSH
1216: LD_VAR 0 1
1220: PPUSH
1221: CALL 22062 0 2
1225: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1226: LD_EXP 5
1230: PUSH
1231: LD_VAR 0 4
1235: ARRAY
1236: IFFALSE 1317
// begin for i in hackTanksCaptured [ index ] do
1238: LD_ADDR_VAR 0 3
1242: PUSH
1243: LD_EXP 5
1247: PUSH
1248: LD_VAR 0 4
1252: ARRAY
1253: PUSH
1254: FOR_IN
1255: IFFALSE 1281
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1257: LD_VAR 0 3
1261: PUSH
1262: LD_INT 1
1264: ARRAY
1265: PPUSH
1266: LD_VAR 0 3
1270: PUSH
1271: LD_INT 2
1273: ARRAY
1274: PPUSH
1275: CALL_OW 235
1279: GO 1254
1281: POP
1282: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1283: LD_ADDR_EXP 5
1287: PUSH
1288: LD_EXP 5
1292: PPUSH
1293: LD_VAR 0 4
1297: PPUSH
1298: EMPTY
1299: PPUSH
1300: CALL_OW 1
1304: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1305: LD_VAR 0 1
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 505
// end ; end ;
1317: LD_VAR 0 2
1321: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1322: LD_INT 0
1324: PPUSH
1325: PPUSH
1326: PPUSH
// if not hack in hackTanks or not vehicles then
1327: LD_VAR 0 1
1331: PUSH
1332: LD_EXP 4
1336: IN
1337: NOT
1338: PUSH
1339: LD_VAR 0 2
1343: NOT
1344: OR
1345: IFFALSE 1349
// exit ;
1347: GO 1624
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: LD_VAR 0 1
1358: PPUSH
1359: LD_VAR 0 2
1363: PPUSH
1364: LD_INT 1
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL 22712 0 4
1374: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1375: LD_ADDR_VAR 0 5
1379: PUSH
1380: LD_EXP 4
1384: PPUSH
1385: LD_VAR 0 1
1389: PPUSH
1390: CALL 22062 0 2
1394: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1395: LD_EXP 5
1399: PUSH
1400: LD_VAR 0 5
1404: ARRAY
1405: PUSH
1406: LD_EXP 6
1410: LESS
1411: IFFALSE 1600
// begin for i := 1 to vehicles do
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: DOUBLE
1419: LD_INT 1
1421: DEC
1422: ST_TO_ADDR
1423: LD_VAR 0 2
1427: PUSH
1428: FOR_TO
1429: IFFALSE 1598
// begin if hackTanksCaptured [ index ] = hackLimit then
1431: LD_EXP 5
1435: PUSH
1436: LD_VAR 0 5
1440: ARRAY
1441: PUSH
1442: LD_EXP 6
1446: EQUAL
1447: IFFALSE 1451
// break ;
1449: GO 1598
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1451: LD_ADDR_EXP 8
1455: PUSH
1456: LD_EXP 8
1460: PPUSH
1461: LD_VAR 0 5
1465: PPUSH
1466: LD_EXP 8
1470: PUSH
1471: LD_VAR 0 5
1475: ARRAY
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: PPUSH
1481: CALL_OW 1
1485: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1486: LD_ADDR_EXP 5
1490: PUSH
1491: LD_EXP 5
1495: PPUSH
1496: LD_VAR 0 5
1500: PUSH
1501: LD_EXP 5
1505: PUSH
1506: LD_VAR 0 5
1510: ARRAY
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: LD_VAR 0 2
1524: PUSH
1525: LD_VAR 0 4
1529: ARRAY
1530: PUSH
1531: LD_VAR 0 2
1535: PUSH
1536: LD_VAR 0 4
1540: ARRAY
1541: PPUSH
1542: CALL_OW 255
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PPUSH
1551: CALL 22277 0 3
1555: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1556: LD_VAR 0 2
1560: PUSH
1561: LD_VAR 0 4
1565: ARRAY
1566: PPUSH
1567: LD_VAR 0 1
1571: PPUSH
1572: CALL_OW 255
1576: PPUSH
1577: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1581: LD_VAR 0 2
1585: PUSH
1586: LD_VAR 0 4
1590: ARRAY
1591: PPUSH
1592: CALL_OW 141
// end ;
1596: GO 1428
1598: POP
1599: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1600: LD_VAR 0 1
1604: PPUSH
1605: LD_EXP 5
1609: PUSH
1610: LD_VAR 0 5
1614: ARRAY
1615: PUSH
1616: LD_INT 0
1618: PLUS
1619: PPUSH
1620: CALL_OW 505
// end ;
1624: LD_VAR 0 3
1628: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
// if not hack in hackTanks then
1635: LD_VAR 0 1
1639: PUSH
1640: LD_EXP 4
1644: IN
1645: NOT
1646: IFFALSE 1650
// exit ;
1648: GO 1890
// index := GetElementIndex ( hackTanks , hack ) ;
1650: LD_ADDR_VAR 0 4
1654: PUSH
1655: LD_EXP 4
1659: PPUSH
1660: LD_VAR 0 1
1664: PPUSH
1665: CALL 22062 0 2
1669: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1670: LD_ADDR_VAR 0 3
1674: PUSH
1675: DOUBLE
1676: LD_EXP 5
1680: PUSH
1681: LD_VAR 0 4
1685: ARRAY
1686: INC
1687: ST_TO_ADDR
1688: LD_INT 1
1690: PUSH
1691: FOR_DOWNTO
1692: IFFALSE 1864
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1694: LD_ADDR_VAR 0 5
1698: PUSH
1699: LD_EXP 5
1703: PUSH
1704: LD_VAR 0 4
1708: ARRAY
1709: PUSH
1710: LD_VAR 0 3
1714: ARRAY
1715: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1716: LD_VAR 0 5
1720: PUSH
1721: LD_INT 1
1723: ARRAY
1724: PPUSH
1725: CALL_OW 302
1729: NOT
1730: PUSH
1731: LD_VAR 0 5
1735: PUSH
1736: LD_INT 1
1738: ARRAY
1739: PPUSH
1740: CALL_OW 255
1744: PUSH
1745: LD_VAR 0 1
1749: PPUSH
1750: CALL_OW 255
1754: NONEQUAL
1755: OR
1756: IFFALSE 1862
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
1758: LD_VAR 0 5
1762: PUSH
1763: LD_INT 1
1765: ARRAY
1766: PPUSH
1767: CALL_OW 305
1771: PUSH
1772: LD_VAR 0 5
1776: PUSH
1777: LD_INT 1
1779: ARRAY
1780: PPUSH
1781: CALL_OW 255
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: CALL_OW 255
1795: EQUAL
1796: AND
1797: IFFALSE 1821
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
1799: LD_VAR 0 5
1803: PUSH
1804: LD_INT 1
1806: ARRAY
1807: PPUSH
1808: LD_VAR 0 5
1812: PUSH
1813: LD_INT 2
1815: ARRAY
1816: PPUSH
1817: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
1821: LD_ADDR_EXP 5
1825: PUSH
1826: LD_EXP 5
1830: PPUSH
1831: LD_VAR 0 4
1835: PPUSH
1836: LD_EXP 5
1840: PUSH
1841: LD_VAR 0 4
1845: ARRAY
1846: PPUSH
1847: LD_VAR 0 3
1851: PPUSH
1852: CALL_OW 3
1856: PPUSH
1857: CALL_OW 1
1861: ST_TO_ADDR
// end ; end ;
1862: GO 1691
1864: POP
1865: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1866: LD_VAR 0 1
1870: PPUSH
1871: LD_EXP 5
1875: PUSH
1876: LD_VAR 0 4
1880: ARRAY
1881: PUSH
1882: LD_INT 0
1884: PLUS
1885: PPUSH
1886: CALL_OW 505
// end ;
1890: LD_VAR 0 2
1894: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
1895: LD_INT 0
1897: PPUSH
1898: PPUSH
1899: PPUSH
1900: PPUSH
// if not hack in hackTanks then
1901: LD_VAR 0 1
1905: PUSH
1906: LD_EXP 4
1910: IN
1911: NOT
1912: IFFALSE 1916
// exit ;
1914: GO 2001
// index := GetElementIndex ( hackTanks , hack ) ;
1916: LD_ADDR_VAR 0 5
1920: PUSH
1921: LD_EXP 4
1925: PPUSH
1926: LD_VAR 0 1
1930: PPUSH
1931: CALL 22062 0 2
1935: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
1936: LD_ADDR_VAR 0 4
1940: PUSH
1941: DOUBLE
1942: LD_INT 1
1944: DEC
1945: ST_TO_ADDR
1946: LD_EXP 5
1950: PUSH
1951: LD_VAR 0 5
1955: ARRAY
1956: PUSH
1957: FOR_TO
1958: IFFALSE 1999
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
1960: LD_EXP 5
1964: PUSH
1965: LD_VAR 0 5
1969: ARRAY
1970: PUSH
1971: LD_VAR 0 4
1975: ARRAY
1976: PUSH
1977: LD_INT 1
1979: ARRAY
1980: PUSH
1981: LD_VAR 0 2
1985: EQUAL
1986: IFFALSE 1997
// KillUnit ( vehicle ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: CALL_OW 66
1997: GO 1957
1999: POP
2000: POP
// end ;
2001: LD_VAR 0 3
2005: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
2006: LD_EXP 9
2010: NOT
2011: IFFALSE 2046
2013: GO 2015
2015: DISABLE
// begin initMiner := true ;
2016: LD_ADDR_EXP 9
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// minersList := [ ] ;
2024: LD_ADDR_EXP 10
2028: PUSH
2029: EMPTY
2030: ST_TO_ADDR
// minerMinesList := [ ] ;
2031: LD_ADDR_EXP 11
2035: PUSH
2036: EMPTY
2037: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2038: LD_ADDR_EXP 12
2042: PUSH
2043: LD_INT 5
2045: ST_TO_ADDR
// end ;
2046: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2047: LD_EXP 9
2051: PUSH
2052: LD_INT 34
2054: PUSH
2055: LD_EXP 20
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: AND
2069: IFFALSE 2532
2071: GO 2073
2073: DISABLE
2074: LD_INT 0
2076: PPUSH
2077: PPUSH
2078: PPUSH
2079: PPUSH
// begin enable ;
2080: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2081: LD_ADDR_VAR 0 1
2085: PUSH
2086: LD_INT 34
2088: PUSH
2089: LD_EXP 20
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PPUSH
2098: CALL_OW 69
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2176
// begin if not i in minersList then
2106: LD_VAR 0 1
2110: PUSH
2111: LD_EXP 10
2115: IN
2116: NOT
2117: IFFALSE 2174
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2119: LD_ADDR_EXP 10
2123: PUSH
2124: LD_EXP 10
2128: PPUSH
2129: LD_EXP 10
2133: PUSH
2134: LD_INT 1
2136: PLUS
2137: PPUSH
2138: LD_VAR 0 1
2142: PPUSH
2143: CALL_OW 1
2147: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2148: LD_ADDR_EXP 11
2152: PUSH
2153: LD_EXP 11
2157: PPUSH
2158: LD_EXP 11
2162: PUSH
2163: LD_INT 1
2165: PLUS
2166: PPUSH
2167: EMPTY
2168: PPUSH
2169: CALL_OW 1
2173: ST_TO_ADDR
// end end ;
2174: GO 2103
2176: POP
2177: POP
// for i := minerMinesList downto 1 do
2178: LD_ADDR_VAR 0 1
2182: PUSH
2183: DOUBLE
2184: LD_EXP 11
2188: INC
2189: ST_TO_ADDR
2190: LD_INT 1
2192: PUSH
2193: FOR_DOWNTO
2194: IFFALSE 2530
// begin if IsLive ( minersList [ i ] ) then
2196: LD_EXP 10
2200: PUSH
2201: LD_VAR 0 1
2205: ARRAY
2206: PPUSH
2207: CALL_OW 300
2211: IFFALSE 2239
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2213: LD_EXP 10
2217: PUSH
2218: LD_VAR 0 1
2222: ARRAY
2223: PPUSH
2224: LD_EXP 11
2228: PUSH
2229: LD_VAR 0 1
2233: ARRAY
2234: PPUSH
2235: CALL_OW 505
// if not minerMinesList [ i ] then
2239: LD_EXP 11
2243: PUSH
2244: LD_VAR 0 1
2248: ARRAY
2249: NOT
2250: IFFALSE 2254
// continue ;
2252: GO 2193
// for j := minerMinesList [ i ] downto 1 do
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: DOUBLE
2260: LD_EXP 11
2264: PUSH
2265: LD_VAR 0 1
2269: ARRAY
2270: INC
2271: ST_TO_ADDR
2272: LD_INT 1
2274: PUSH
2275: FOR_DOWNTO
2276: IFFALSE 2526
// begin side := GetSide ( minersList [ i ] ) ;
2278: LD_ADDR_VAR 0 3
2282: PUSH
2283: LD_EXP 10
2287: PUSH
2288: LD_VAR 0 1
2292: ARRAY
2293: PPUSH
2294: CALL_OW 255
2298: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: LD_EXP 11
2308: PUSH
2309: LD_VAR 0 1
2313: ARRAY
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 11
2329: PUSH
2330: LD_VAR 0 1
2334: ARRAY
2335: PUSH
2336: LD_VAR 0 2
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: CALL_OW 428
2350: ST_TO_ADDR
// if not tmp then
2351: LD_VAR 0 4
2355: NOT
2356: IFFALSE 2360
// continue ;
2358: GO 2275
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2360: LD_VAR 0 4
2364: PUSH
2365: LD_INT 81
2367: PUSH
2368: LD_VAR 0 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PPUSH
2377: CALL_OW 69
2381: IN
2382: PUSH
2383: LD_EXP 11
2387: PUSH
2388: LD_VAR 0 1
2392: ARRAY
2393: PUSH
2394: LD_VAR 0 2
2398: ARRAY
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_EXP 11
2408: PUSH
2409: LD_VAR 0 1
2413: ARRAY
2414: PUSH
2415: LD_VAR 0 2
2419: ARRAY
2420: PUSH
2421: LD_INT 2
2423: ARRAY
2424: PPUSH
2425: CALL_OW 458
2429: AND
2430: IFFALSE 2524
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
2432: LD_EXP 11
2436: PUSH
2437: LD_VAR 0 1
2441: ARRAY
2442: PUSH
2443: LD_VAR 0 2
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_EXP 11
2457: PUSH
2458: LD_VAR 0 1
2462: ARRAY
2463: PUSH
2464: LD_VAR 0 2
2468: ARRAY
2469: PUSH
2470: LD_INT 2
2472: ARRAY
2473: PPUSH
2474: LD_VAR 0 3
2478: PPUSH
2479: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
2483: LD_ADDR_EXP 11
2487: PUSH
2488: LD_EXP 11
2492: PPUSH
2493: LD_VAR 0 1
2497: PPUSH
2498: LD_EXP 11
2502: PUSH
2503: LD_VAR 0 1
2507: ARRAY
2508: PPUSH
2509: LD_VAR 0 2
2513: PPUSH
2514: CALL_OW 3
2518: PPUSH
2519: CALL_OW 1
2523: ST_TO_ADDR
// end ; end ;
2524: GO 2275
2526: POP
2527: POP
// end ;
2528: GO 2193
2530: POP
2531: POP
// end ;
2532: PPOPN 4
2534: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
// result := false ;
2539: LD_ADDR_VAR 0 4
2543: PUSH
2544: LD_INT 0
2546: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
2547: LD_VAR 0 1
2551: PPUSH
2552: CALL_OW 264
2556: PUSH
2557: LD_EXP 20
2561: EQUAL
2562: NOT
2563: IFFALSE 2567
// exit ;
2565: GO 2807
// index := GetElementIndex ( minersList , unit ) ;
2567: LD_ADDR_VAR 0 5
2571: PUSH
2572: LD_EXP 10
2576: PPUSH
2577: LD_VAR 0 1
2581: PPUSH
2582: CALL 22062 0 2
2586: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
2587: LD_EXP 11
2591: PUSH
2592: LD_VAR 0 5
2596: ARRAY
2597: PUSH
2598: LD_EXP 12
2602: GREATEREQUAL
2603: IFFALSE 2607
// exit ;
2605: GO 2807
// ComMoveXY ( unit , x , y ) ;
2607: LD_VAR 0 1
2611: PPUSH
2612: LD_VAR 0 2
2616: PPUSH
2617: LD_VAR 0 3
2621: PPUSH
2622: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2626: LD_INT 35
2628: PPUSH
2629: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
2633: LD_VAR 0 1
2637: PPUSH
2638: LD_VAR 0 2
2642: PPUSH
2643: LD_VAR 0 3
2647: PPUSH
2648: CALL 52459 0 3
2652: NOT
2653: PUSH
2654: LD_VAR 0 1
2658: PPUSH
2659: CALL_OW 314
2663: AND
2664: IFFALSE 2668
// exit ;
2666: GO 2807
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
2668: LD_VAR 0 2
2672: PPUSH
2673: LD_VAR 0 3
2677: PPUSH
2678: CALL_OW 428
2682: PUSH
2683: LD_VAR 0 1
2687: EQUAL
2688: PUSH
2689: LD_VAR 0 1
2693: PPUSH
2694: CALL_OW 314
2698: NOT
2699: AND
2700: IFFALSE 2626
// PlaySoundXY ( x , y , PlantMine ) ;
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_VAR 0 3
2711: PPUSH
2712: LD_STRING PlantMine
2714: PPUSH
2715: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
2719: LD_VAR 0 2
2723: PPUSH
2724: LD_VAR 0 3
2728: PPUSH
2729: LD_VAR 0 1
2733: PPUSH
2734: CALL_OW 255
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
2746: LD_ADDR_EXP 11
2750: PUSH
2751: LD_EXP 11
2755: PPUSH
2756: LD_VAR 0 5
2760: PUSH
2761: LD_EXP 11
2765: PUSH
2766: LD_VAR 0 5
2770: ARRAY
2771: PUSH
2772: LD_INT 1
2774: PLUS
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PPUSH
2780: LD_VAR 0 2
2784: PUSH
2785: LD_VAR 0 3
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL 22277 0 3
2798: ST_TO_ADDR
// result := true ;
2799: LD_ADDR_VAR 0 4
2803: PUSH
2804: LD_INT 1
2806: ST_TO_ADDR
// end ;
2807: LD_VAR 0 4
2811: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
2812: LD_INT 0
2814: PPUSH
2815: PPUSH
2816: PPUSH
// if not unit in minersList then
2817: LD_VAR 0 1
2821: PUSH
2822: LD_EXP 10
2826: IN
2827: NOT
2828: IFFALSE 2832
// exit ;
2830: GO 3224
// index := GetElementIndex ( minersList , unit ) ;
2832: LD_ADDR_VAR 0 6
2836: PUSH
2837: LD_EXP 10
2841: PPUSH
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 22062 0 2
2851: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
2852: LD_ADDR_VAR 0 5
2856: PUSH
2857: DOUBLE
2858: LD_EXP 11
2862: PUSH
2863: LD_VAR 0 6
2867: ARRAY
2868: INC
2869: ST_TO_ADDR
2870: LD_INT 1
2872: PUSH
2873: FOR_DOWNTO
2874: IFFALSE 3035
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
2876: LD_EXP 11
2880: PUSH
2881: LD_VAR 0 6
2885: ARRAY
2886: PUSH
2887: LD_VAR 0 5
2891: ARRAY
2892: PUSH
2893: LD_INT 1
2895: ARRAY
2896: PUSH
2897: LD_VAR 0 2
2901: EQUAL
2902: PUSH
2903: LD_EXP 11
2907: PUSH
2908: LD_VAR 0 6
2912: ARRAY
2913: PUSH
2914: LD_VAR 0 5
2918: ARRAY
2919: PUSH
2920: LD_INT 2
2922: ARRAY
2923: PUSH
2924: LD_VAR 0 3
2928: EQUAL
2929: AND
2930: IFFALSE 3033
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
2932: LD_EXP 11
2936: PUSH
2937: LD_VAR 0 6
2941: ARRAY
2942: PUSH
2943: LD_VAR 0 5
2947: ARRAY
2948: PUSH
2949: LD_INT 1
2951: ARRAY
2952: PPUSH
2953: LD_EXP 11
2957: PUSH
2958: LD_VAR 0 6
2962: ARRAY
2963: PUSH
2964: LD_VAR 0 5
2968: ARRAY
2969: PUSH
2970: LD_INT 2
2972: ARRAY
2973: PPUSH
2974: LD_VAR 0 1
2978: PPUSH
2979: CALL_OW 255
2983: PPUSH
2984: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
2988: LD_ADDR_EXP 11
2992: PUSH
2993: LD_EXP 11
2997: PPUSH
2998: LD_VAR 0 6
3002: PPUSH
3003: LD_EXP 11
3007: PUSH
3008: LD_VAR 0 6
3012: ARRAY
3013: PPUSH
3014: LD_VAR 0 5
3018: PPUSH
3019: CALL_OW 3
3023: PPUSH
3024: CALL_OW 1
3028: ST_TO_ADDR
// exit ;
3029: POP
3030: POP
3031: GO 3224
// end ; end ;
3033: GO 2873
3035: POP
3036: POP
// for i := minerMinesList [ index ] downto 1 do
3037: LD_ADDR_VAR 0 5
3041: PUSH
3042: DOUBLE
3043: LD_EXP 11
3047: PUSH
3048: LD_VAR 0 6
3052: ARRAY
3053: INC
3054: ST_TO_ADDR
3055: LD_INT 1
3057: PUSH
3058: FOR_DOWNTO
3059: IFFALSE 3222
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3061: LD_EXP 11
3065: PUSH
3066: LD_VAR 0 6
3070: ARRAY
3071: PUSH
3072: LD_VAR 0 5
3076: ARRAY
3077: PUSH
3078: LD_INT 1
3080: ARRAY
3081: PPUSH
3082: LD_EXP 11
3086: PUSH
3087: LD_VAR 0 6
3091: ARRAY
3092: PUSH
3093: LD_VAR 0 5
3097: ARRAY
3098: PUSH
3099: LD_INT 2
3101: ARRAY
3102: PPUSH
3103: LD_VAR 0 2
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: CALL_OW 298
3117: PUSH
3118: LD_INT 6
3120: LESS
3121: IFFALSE 3220
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3123: LD_EXP 11
3127: PUSH
3128: LD_VAR 0 6
3132: ARRAY
3133: PUSH
3134: LD_VAR 0 5
3138: ARRAY
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: LD_EXP 11
3148: PUSH
3149: LD_VAR 0 6
3153: ARRAY
3154: PUSH
3155: LD_VAR 0 5
3159: ARRAY
3160: PUSH
3161: LD_INT 2
3163: ARRAY
3164: PPUSH
3165: LD_VAR 0 1
3169: PPUSH
3170: CALL_OW 255
3174: PPUSH
3175: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3179: LD_ADDR_EXP 11
3183: PUSH
3184: LD_EXP 11
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: LD_EXP 11
3198: PUSH
3199: LD_VAR 0 6
3203: ARRAY
3204: PPUSH
3205: LD_VAR 0 5
3209: PPUSH
3210: CALL_OW 3
3214: PPUSH
3215: CALL_OW 1
3219: ST_TO_ADDR
// end ; end ;
3220: GO 3058
3222: POP
3223: POP
// end ;
3224: LD_VAR 0 4
3228: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
3233: PPUSH
3234: PPUSH
3235: PPUSH
3236: PPUSH
3237: PPUSH
3238: PPUSH
3239: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3240: LD_VAR 0 1
3244: PPUSH
3245: CALL_OW 264
3249: PUSH
3250: LD_EXP 20
3254: EQUAL
3255: NOT
3256: PUSH
3257: LD_VAR 0 1
3261: PUSH
3262: LD_EXP 10
3266: IN
3267: NOT
3268: OR
3269: IFFALSE 3273
// exit ;
3271: GO 3595
// index := GetElementIndex ( minersList , unit ) ;
3273: LD_ADDR_VAR 0 6
3277: PUSH
3278: LD_EXP 10
3282: PPUSH
3283: LD_VAR 0 1
3287: PPUSH
3288: CALL 22062 0 2
3292: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3293: LD_ADDR_VAR 0 8
3297: PUSH
3298: LD_EXP 12
3302: PUSH
3303: LD_EXP 11
3307: PUSH
3308: LD_VAR 0 6
3312: ARRAY
3313: MINUS
3314: ST_TO_ADDR
// if not minesFreeAmount then
3315: LD_VAR 0 8
3319: NOT
3320: IFFALSE 3324
// exit ;
3322: GO 3595
// tmp := [ ] ;
3324: LD_ADDR_VAR 0 7
3328: PUSH
3329: EMPTY
3330: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3331: LD_ADDR_VAR 0 5
3335: PUSH
3336: DOUBLE
3337: LD_INT 1
3339: DEC
3340: ST_TO_ADDR
3341: LD_VAR 0 8
3345: PUSH
3346: FOR_TO
3347: IFFALSE 3542
// begin _d := rand ( 0 , 5 ) ;
3349: LD_ADDR_VAR 0 11
3353: PUSH
3354: LD_INT 0
3356: PPUSH
3357: LD_INT 5
3359: PPUSH
3360: CALL_OW 12
3364: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3365: LD_ADDR_VAR 0 12
3369: PUSH
3370: LD_INT 2
3372: PPUSH
3373: LD_INT 6
3375: PPUSH
3376: CALL_OW 12
3380: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
3381: LD_ADDR_VAR 0 9
3385: PUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: LD_VAR 0 11
3395: PPUSH
3396: LD_VAR 0 12
3400: PPUSH
3401: CALL_OW 272
3405: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
3406: LD_ADDR_VAR 0 10
3410: PUSH
3411: LD_VAR 0 3
3415: PPUSH
3416: LD_VAR 0 11
3420: PPUSH
3421: LD_VAR 0 12
3425: PPUSH
3426: CALL_OW 273
3430: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
3431: LD_VAR 0 9
3435: PPUSH
3436: LD_VAR 0 10
3440: PPUSH
3441: CALL_OW 488
3445: PUSH
3446: LD_VAR 0 9
3450: PUSH
3451: LD_VAR 0 10
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: LD_VAR 0 7
3464: IN
3465: NOT
3466: AND
3467: PUSH
3468: LD_VAR 0 9
3472: PPUSH
3473: LD_VAR 0 10
3477: PPUSH
3478: CALL_OW 458
3482: NOT
3483: AND
3484: IFFALSE 3526
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
3486: LD_ADDR_VAR 0 7
3490: PUSH
3491: LD_VAR 0 7
3495: PPUSH
3496: LD_VAR 0 7
3500: PUSH
3501: LD_INT 1
3503: PLUS
3504: PPUSH
3505: LD_VAR 0 9
3509: PUSH
3510: LD_VAR 0 10
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PPUSH
3519: CALL_OW 1
3523: ST_TO_ADDR
3524: GO 3540
// i := i - 1 ;
3526: LD_ADDR_VAR 0 5
3530: PUSH
3531: LD_VAR 0 5
3535: PUSH
3536: LD_INT 1
3538: MINUS
3539: ST_TO_ADDR
// end ;
3540: GO 3346
3542: POP
3543: POP
// for i in tmp do
3544: LD_ADDR_VAR 0 5
3548: PUSH
3549: LD_VAR 0 7
3553: PUSH
3554: FOR_IN
3555: IFFALSE 3593
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
3557: LD_VAR 0 1
3561: PPUSH
3562: LD_VAR 0 5
3566: PUSH
3567: LD_INT 1
3569: ARRAY
3570: PPUSH
3571: LD_VAR 0 5
3575: PUSH
3576: LD_INT 2
3578: ARRAY
3579: PPUSH
3580: CALL 2535 0 3
3584: NOT
3585: IFFALSE 3591
// exit ;
3587: POP
3588: POP
3589: GO 3595
3591: GO 3554
3593: POP
3594: POP
// end ;
3595: LD_VAR 0 4
3599: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
3600: LD_INT 0
3602: PPUSH
3603: PPUSH
3604: PPUSH
3605: PPUSH
3606: PPUSH
3607: PPUSH
3608: PPUSH
// if not GetClass ( unit ) = class_sniper then
3609: LD_VAR 0 1
3613: PPUSH
3614: CALL_OW 257
3618: PUSH
3619: LD_INT 5
3621: EQUAL
3622: NOT
3623: IFFALSE 3627
// exit ;
3625: GO 4015
// dist := 8 ;
3627: LD_ADDR_VAR 0 5
3631: PUSH
3632: LD_INT 8
3634: ST_TO_ADDR
// viewRange := 12 ;
3635: LD_ADDR_VAR 0 7
3639: PUSH
3640: LD_INT 12
3642: ST_TO_ADDR
// side := GetSide ( unit ) ;
3643: LD_ADDR_VAR 0 6
3647: PUSH
3648: LD_VAR 0 1
3652: PPUSH
3653: CALL_OW 255
3657: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
3658: LD_INT 61
3660: PPUSH
3661: LD_VAR 0 6
3665: PPUSH
3666: CALL_OW 321
3670: PUSH
3671: LD_INT 2
3673: EQUAL
3674: IFFALSE 3684
// viewRange := 16 ;
3676: LD_ADDR_VAR 0 7
3680: PUSH
3681: LD_INT 16
3683: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
3684: LD_VAR 0 1
3688: PPUSH
3689: LD_VAR 0 2
3693: PPUSH
3694: LD_VAR 0 3
3698: PPUSH
3699: CALL_OW 297
3703: PUSH
3704: LD_VAR 0 5
3708: GREATER
3709: IFFALSE 3788
// begin ComMoveXY ( unit , x , y ) ;
3711: LD_VAR 0 1
3715: PPUSH
3716: LD_VAR 0 2
3720: PPUSH
3721: LD_VAR 0 3
3725: PPUSH
3726: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3730: LD_INT 35
3732: PPUSH
3733: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
3737: LD_VAR 0 1
3741: PPUSH
3742: LD_VAR 0 2
3746: PPUSH
3747: LD_VAR 0 3
3751: PPUSH
3752: CALL 52459 0 3
3756: NOT
3757: IFFALSE 3761
// exit ;
3759: GO 4015
// until GetDistUnitXY ( unit , x , y ) < dist ;
3761: LD_VAR 0 1
3765: PPUSH
3766: LD_VAR 0 2
3770: PPUSH
3771: LD_VAR 0 3
3775: PPUSH
3776: CALL_OW 297
3780: PUSH
3781: LD_VAR 0 5
3785: LESS
3786: IFFALSE 3730
// end ; ComTurnXY ( unit , x , y ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_VAR 0 2
3797: PPUSH
3798: LD_VAR 0 3
3802: PPUSH
3803: CALL_OW 118
// wait ( 5 ) ;
3807: LD_INT 5
3809: PPUSH
3810: CALL_OW 67
// _d := GetDir ( unit ) ;
3814: LD_ADDR_VAR 0 10
3818: PUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 254
3828: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
3829: LD_ADDR_VAR 0 8
3833: PUSH
3834: LD_VAR 0 1
3838: PPUSH
3839: CALL_OW 250
3843: PPUSH
3844: LD_VAR 0 10
3848: PPUSH
3849: LD_VAR 0 5
3853: PPUSH
3854: CALL_OW 272
3858: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
3859: LD_ADDR_VAR 0 9
3863: PUSH
3864: LD_VAR 0 1
3868: PPUSH
3869: CALL_OW 251
3873: PPUSH
3874: LD_VAR 0 10
3878: PPUSH
3879: LD_VAR 0 5
3883: PPUSH
3884: CALL_OW 273
3888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3889: LD_VAR 0 8
3893: PPUSH
3894: LD_VAR 0 9
3898: PPUSH
3899: CALL_OW 488
3903: NOT
3904: IFFALSE 3908
// exit ;
3906: GO 4015
// ComAnimCustom ( unit , 1 ) ;
3908: LD_VAR 0 1
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
3920: LD_VAR 0 8
3924: PPUSH
3925: LD_VAR 0 9
3929: PPUSH
3930: LD_VAR 0 6
3934: PPUSH
3935: LD_VAR 0 7
3939: PPUSH
3940: CALL_OW 330
// repeat wait ( 1 ) ;
3944: LD_INT 1
3946: PPUSH
3947: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
3951: LD_VAR 0 1
3955: PPUSH
3956: CALL_OW 316
3960: PUSH
3961: LD_VAR 0 1
3965: PPUSH
3966: CALL_OW 314
3970: OR
3971: PUSH
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 302
3981: NOT
3982: OR
3983: PUSH
3984: LD_VAR 0 1
3988: PPUSH
3989: CALL_OW 301
3993: OR
3994: IFFALSE 3944
// RemoveSeeing ( _x , _y , side ) ;
3996: LD_VAR 0 8
4000: PPUSH
4001: LD_VAR 0 9
4005: PPUSH
4006: LD_VAR 0 6
4010: PPUSH
4011: CALL_OW 331
// end ; end_of_file
4015: LD_VAR 0 4
4019: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
4020: LD_INT 0
4022: PPUSH
// ar_miner := 81 ;
4023: LD_ADDR_EXP 20
4027: PUSH
4028: LD_INT 81
4030: ST_TO_ADDR
// ar_crane := 88 ;
4031: LD_ADDR_EXP 19
4035: PUSH
4036: LD_INT 88
4038: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4039: LD_ADDR_EXP 14
4043: PUSH
4044: LD_INT 89
4046: ST_TO_ADDR
// us_hack := 99 ;
4047: LD_ADDR_EXP 15
4051: PUSH
4052: LD_INT 99
4054: ST_TO_ADDR
// us_artillery := 97 ;
4055: LD_ADDR_EXP 16
4059: PUSH
4060: LD_INT 97
4062: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4063: LD_ADDR_EXP 17
4067: PUSH
4068: LD_INT 91
4070: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4071: LD_ADDR_EXP 18
4075: PUSH
4076: LD_INT 92
4078: ST_TO_ADDR
// ru_radar := 98 ;
4079: LD_ADDR_EXP 13
4083: PUSH
4084: LD_INT 98
4086: ST_TO_ADDR
// tech_Artillery := 80 ;
4087: LD_ADDR_EXP 21
4091: PUSH
4092: LD_INT 80
4094: ST_TO_ADDR
// tech_RadMat := 81 ;
4095: LD_ADDR_EXP 22
4099: PUSH
4100: LD_INT 81
4102: ST_TO_ADDR
// tech_BasicTools := 82 ;
4103: LD_ADDR_EXP 23
4107: PUSH
4108: LD_INT 82
4110: ST_TO_ADDR
// tech_Cargo := 83 ;
4111: LD_ADDR_EXP 24
4115: PUSH
4116: LD_INT 83
4118: ST_TO_ADDR
// tech_Track := 84 ;
4119: LD_ADDR_EXP 25
4123: PUSH
4124: LD_INT 84
4126: ST_TO_ADDR
// tech_Crane := 85 ;
4127: LD_ADDR_EXP 26
4131: PUSH
4132: LD_INT 85
4134: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4135: LD_ADDR_EXP 27
4139: PUSH
4140: LD_INT 86
4142: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4143: LD_ADDR_EXP 28
4147: PUSH
4148: LD_INT 87
4150: ST_TO_ADDR
// end ;
4151: LD_VAR 0 1
4155: RET
// every 1 do
4156: GO 4158
4158: DISABLE
// InitGlobalVariables ; end_of_file
4159: CALL 4020 0 0
4163: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4164: LD_VAR 0 2
4168: PUSH
4169: LD_INT 100
4171: EQUAL
4172: IFFALSE 5121
// begin if not StreamModeActive then
4174: LD_EXP 29
4178: NOT
4179: IFFALSE 4189
// StreamModeActive := true ;
4181: LD_ADDR_EXP 29
4185: PUSH
4186: LD_INT 1
4188: ST_TO_ADDR
// if p3 = 0 then
4189: LD_VAR 0 3
4193: PUSH
4194: LD_INT 0
4196: EQUAL
4197: IFFALSE 4203
// InitStreamMode ;
4199: CALL 5279 0 0
// if p3 = 1 then
4203: LD_VAR 0 3
4207: PUSH
4208: LD_INT 1
4210: EQUAL
4211: IFFALSE 4221
// sRocket := true ;
4213: LD_ADDR_EXP 34
4217: PUSH
4218: LD_INT 1
4220: ST_TO_ADDR
// if p3 = 2 then
4221: LD_VAR 0 3
4225: PUSH
4226: LD_INT 2
4228: EQUAL
4229: IFFALSE 4239
// sSpeed := true ;
4231: LD_ADDR_EXP 33
4235: PUSH
4236: LD_INT 1
4238: ST_TO_ADDR
// if p3 = 3 then
4239: LD_VAR 0 3
4243: PUSH
4244: LD_INT 3
4246: EQUAL
4247: IFFALSE 4257
// sEngine := true ;
4249: LD_ADDR_EXP 35
4253: PUSH
4254: LD_INT 1
4256: ST_TO_ADDR
// if p3 = 4 then
4257: LD_VAR 0 3
4261: PUSH
4262: LD_INT 4
4264: EQUAL
4265: IFFALSE 4275
// sSpec := true ;
4267: LD_ADDR_EXP 32
4271: PUSH
4272: LD_INT 1
4274: ST_TO_ADDR
// if p3 = 5 then
4275: LD_VAR 0 3
4279: PUSH
4280: LD_INT 5
4282: EQUAL
4283: IFFALSE 4293
// sLevel := true ;
4285: LD_ADDR_EXP 36
4289: PUSH
4290: LD_INT 1
4292: ST_TO_ADDR
// if p3 = 6 then
4293: LD_VAR 0 3
4297: PUSH
4298: LD_INT 6
4300: EQUAL
4301: IFFALSE 4311
// sArmoury := true ;
4303: LD_ADDR_EXP 37
4307: PUSH
4308: LD_INT 1
4310: ST_TO_ADDR
// if p3 = 7 then
4311: LD_VAR 0 3
4315: PUSH
4316: LD_INT 7
4318: EQUAL
4319: IFFALSE 4329
// sRadar := true ;
4321: LD_ADDR_EXP 38
4325: PUSH
4326: LD_INT 1
4328: ST_TO_ADDR
// if p3 = 8 then
4329: LD_VAR 0 3
4333: PUSH
4334: LD_INT 8
4336: EQUAL
4337: IFFALSE 4347
// sBunker := true ;
4339: LD_ADDR_EXP 39
4343: PUSH
4344: LD_INT 1
4346: ST_TO_ADDR
// if p3 = 9 then
4347: LD_VAR 0 3
4351: PUSH
4352: LD_INT 9
4354: EQUAL
4355: IFFALSE 4365
// sHack := true ;
4357: LD_ADDR_EXP 40
4361: PUSH
4362: LD_INT 1
4364: ST_TO_ADDR
// if p3 = 10 then
4365: LD_VAR 0 3
4369: PUSH
4370: LD_INT 10
4372: EQUAL
4373: IFFALSE 4383
// sFire := true ;
4375: LD_ADDR_EXP 41
4379: PUSH
4380: LD_INT 1
4382: ST_TO_ADDR
// if p3 = 11 then
4383: LD_VAR 0 3
4387: PUSH
4388: LD_INT 11
4390: EQUAL
4391: IFFALSE 4401
// sRefresh := true ;
4393: LD_ADDR_EXP 42
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// if p3 = 12 then
4401: LD_VAR 0 3
4405: PUSH
4406: LD_INT 12
4408: EQUAL
4409: IFFALSE 4419
// sExp := true ;
4411: LD_ADDR_EXP 43
4415: PUSH
4416: LD_INT 1
4418: ST_TO_ADDR
// if p3 = 13 then
4419: LD_VAR 0 3
4423: PUSH
4424: LD_INT 13
4426: EQUAL
4427: IFFALSE 4437
// sDepot := true ;
4429: LD_ADDR_EXP 44
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// if p3 = 14 then
4437: LD_VAR 0 3
4441: PUSH
4442: LD_INT 14
4444: EQUAL
4445: IFFALSE 4455
// sFlag := true ;
4447: LD_ADDR_EXP 45
4451: PUSH
4452: LD_INT 1
4454: ST_TO_ADDR
// if p3 = 15 then
4455: LD_VAR 0 3
4459: PUSH
4460: LD_INT 15
4462: EQUAL
4463: IFFALSE 4473
// sKamikadze := true ;
4465: LD_ADDR_EXP 53
4469: PUSH
4470: LD_INT 1
4472: ST_TO_ADDR
// if p3 = 16 then
4473: LD_VAR 0 3
4477: PUSH
4478: LD_INT 16
4480: EQUAL
4481: IFFALSE 4491
// sTroll := true ;
4483: LD_ADDR_EXP 54
4487: PUSH
4488: LD_INT 1
4490: ST_TO_ADDR
// if p3 = 17 then
4491: LD_VAR 0 3
4495: PUSH
4496: LD_INT 17
4498: EQUAL
4499: IFFALSE 4509
// sSlow := true ;
4501: LD_ADDR_EXP 55
4505: PUSH
4506: LD_INT 1
4508: ST_TO_ADDR
// if p3 = 18 then
4509: LD_VAR 0 3
4513: PUSH
4514: LD_INT 18
4516: EQUAL
4517: IFFALSE 4527
// sLack := true ;
4519: LD_ADDR_EXP 56
4523: PUSH
4524: LD_INT 1
4526: ST_TO_ADDR
// if p3 = 19 then
4527: LD_VAR 0 3
4531: PUSH
4532: LD_INT 19
4534: EQUAL
4535: IFFALSE 4545
// sTank := true ;
4537: LD_ADDR_EXP 58
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// if p3 = 20 then
4545: LD_VAR 0 3
4549: PUSH
4550: LD_INT 20
4552: EQUAL
4553: IFFALSE 4563
// sRemote := true ;
4555: LD_ADDR_EXP 59
4559: PUSH
4560: LD_INT 1
4562: ST_TO_ADDR
// if p3 = 21 then
4563: LD_VAR 0 3
4567: PUSH
4568: LD_INT 21
4570: EQUAL
4571: IFFALSE 4581
// sPowell := true ;
4573: LD_ADDR_EXP 60
4577: PUSH
4578: LD_INT 1
4580: ST_TO_ADDR
// if p3 = 22 then
4581: LD_VAR 0 3
4585: PUSH
4586: LD_INT 22
4588: EQUAL
4589: IFFALSE 4599
// sTeleport := true ;
4591: LD_ADDR_EXP 63
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// if p3 = 23 then
4599: LD_VAR 0 3
4603: PUSH
4604: LD_INT 23
4606: EQUAL
4607: IFFALSE 4617
// sOilTower := true ;
4609: LD_ADDR_EXP 65
4613: PUSH
4614: LD_INT 1
4616: ST_TO_ADDR
// if p3 = 24 then
4617: LD_VAR 0 3
4621: PUSH
4622: LD_INT 24
4624: EQUAL
4625: IFFALSE 4635
// sShovel := true ;
4627: LD_ADDR_EXP 66
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// if p3 = 25 then
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 25
4642: EQUAL
4643: IFFALSE 4653
// sSheik := true ;
4645: LD_ADDR_EXP 67
4649: PUSH
4650: LD_INT 1
4652: ST_TO_ADDR
// if p3 = 26 then
4653: LD_VAR 0 3
4657: PUSH
4658: LD_INT 26
4660: EQUAL
4661: IFFALSE 4671
// sEarthquake := true ;
4663: LD_ADDR_EXP 69
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// if p3 = 27 then
4671: LD_VAR 0 3
4675: PUSH
4676: LD_INT 27
4678: EQUAL
4679: IFFALSE 4689
// sAI := true ;
4681: LD_ADDR_EXP 70
4685: PUSH
4686: LD_INT 1
4688: ST_TO_ADDR
// if p3 = 28 then
4689: LD_VAR 0 3
4693: PUSH
4694: LD_INT 28
4696: EQUAL
4697: IFFALSE 4707
// sCargo := true ;
4699: LD_ADDR_EXP 73
4703: PUSH
4704: LD_INT 1
4706: ST_TO_ADDR
// if p3 = 29 then
4707: LD_VAR 0 3
4711: PUSH
4712: LD_INT 29
4714: EQUAL
4715: IFFALSE 4725
// sDLaser := true ;
4717: LD_ADDR_EXP 74
4721: PUSH
4722: LD_INT 1
4724: ST_TO_ADDR
// if p3 = 30 then
4725: LD_VAR 0 3
4729: PUSH
4730: LD_INT 30
4732: EQUAL
4733: IFFALSE 4743
// sExchange := true ;
4735: LD_ADDR_EXP 75
4739: PUSH
4740: LD_INT 1
4742: ST_TO_ADDR
// if p3 = 31 then
4743: LD_VAR 0 3
4747: PUSH
4748: LD_INT 31
4750: EQUAL
4751: IFFALSE 4761
// sFac := true ;
4753: LD_ADDR_EXP 76
4757: PUSH
4758: LD_INT 1
4760: ST_TO_ADDR
// if p3 = 32 then
4761: LD_VAR 0 3
4765: PUSH
4766: LD_INT 32
4768: EQUAL
4769: IFFALSE 4779
// sPower := true ;
4771: LD_ADDR_EXP 77
4775: PUSH
4776: LD_INT 1
4778: ST_TO_ADDR
// if p3 = 33 then
4779: LD_VAR 0 3
4783: PUSH
4784: LD_INT 33
4786: EQUAL
4787: IFFALSE 4797
// sRandom := true ;
4789: LD_ADDR_EXP 78
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if p3 = 34 then
4797: LD_VAR 0 3
4801: PUSH
4802: LD_INT 34
4804: EQUAL
4805: IFFALSE 4815
// sShield := true ;
4807: LD_ADDR_EXP 79
4811: PUSH
4812: LD_INT 1
4814: ST_TO_ADDR
// if p3 = 35 then
4815: LD_VAR 0 3
4819: PUSH
4820: LD_INT 35
4822: EQUAL
4823: IFFALSE 4833
// sTime := true ;
4825: LD_ADDR_EXP 80
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// if p3 = 36 then
4833: LD_VAR 0 3
4837: PUSH
4838: LD_INT 36
4840: EQUAL
4841: IFFALSE 4851
// sTools := true ;
4843: LD_ADDR_EXP 81
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
// if p3 = 101 then
4851: LD_VAR 0 3
4855: PUSH
4856: LD_INT 101
4858: EQUAL
4859: IFFALSE 4869
// sSold := true ;
4861: LD_ADDR_EXP 46
4865: PUSH
4866: LD_INT 1
4868: ST_TO_ADDR
// if p3 = 102 then
4869: LD_VAR 0 3
4873: PUSH
4874: LD_INT 102
4876: EQUAL
4877: IFFALSE 4887
// sDiff := true ;
4879: LD_ADDR_EXP 47
4883: PUSH
4884: LD_INT 1
4886: ST_TO_ADDR
// if p3 = 103 then
4887: LD_VAR 0 3
4891: PUSH
4892: LD_INT 103
4894: EQUAL
4895: IFFALSE 4905
// sFog := true ;
4897: LD_ADDR_EXP 50
4901: PUSH
4902: LD_INT 1
4904: ST_TO_ADDR
// if p3 = 104 then
4905: LD_VAR 0 3
4909: PUSH
4910: LD_INT 104
4912: EQUAL
4913: IFFALSE 4923
// sReset := true ;
4915: LD_ADDR_EXP 51
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// if p3 = 105 then
4923: LD_VAR 0 3
4927: PUSH
4928: LD_INT 105
4930: EQUAL
4931: IFFALSE 4941
// sSun := true ;
4933: LD_ADDR_EXP 52
4937: PUSH
4938: LD_INT 1
4940: ST_TO_ADDR
// if p3 = 106 then
4941: LD_VAR 0 3
4945: PUSH
4946: LD_INT 106
4948: EQUAL
4949: IFFALSE 4959
// sTiger := true ;
4951: LD_ADDR_EXP 48
4955: PUSH
4956: LD_INT 1
4958: ST_TO_ADDR
// if p3 = 107 then
4959: LD_VAR 0 3
4963: PUSH
4964: LD_INT 107
4966: EQUAL
4967: IFFALSE 4977
// sBomb := true ;
4969: LD_ADDR_EXP 49
4973: PUSH
4974: LD_INT 1
4976: ST_TO_ADDR
// if p3 = 108 then
4977: LD_VAR 0 3
4981: PUSH
4982: LD_INT 108
4984: EQUAL
4985: IFFALSE 4995
// sWound := true ;
4987: LD_ADDR_EXP 57
4991: PUSH
4992: LD_INT 1
4994: ST_TO_ADDR
// if p3 = 109 then
4995: LD_VAR 0 3
4999: PUSH
5000: LD_INT 109
5002: EQUAL
5003: IFFALSE 5013
// sBetray := true ;
5005: LD_ADDR_EXP 61
5009: PUSH
5010: LD_INT 1
5012: ST_TO_ADDR
// if p3 = 110 then
5013: LD_VAR 0 3
5017: PUSH
5018: LD_INT 110
5020: EQUAL
5021: IFFALSE 5031
// sContamin := true ;
5023: LD_ADDR_EXP 62
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// if p3 = 111 then
5031: LD_VAR 0 3
5035: PUSH
5036: LD_INT 111
5038: EQUAL
5039: IFFALSE 5049
// sOil := true ;
5041: LD_ADDR_EXP 64
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if p3 = 112 then
5049: LD_VAR 0 3
5053: PUSH
5054: LD_INT 112
5056: EQUAL
5057: IFFALSE 5067
// sStu := true ;
5059: LD_ADDR_EXP 68
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// if p3 = 113 then
5067: LD_VAR 0 3
5071: PUSH
5072: LD_INT 113
5074: EQUAL
5075: IFFALSE 5085
// sBazooka := true ;
5077: LD_ADDR_EXP 71
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// if p3 = 114 then
5085: LD_VAR 0 3
5089: PUSH
5090: LD_INT 114
5092: EQUAL
5093: IFFALSE 5103
// sMortar := true ;
5095: LD_ADDR_EXP 72
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// if p3 = 115 then
5103: LD_VAR 0 3
5107: PUSH
5108: LD_INT 115
5110: EQUAL
5111: IFFALSE 5121
// sRanger := true ;
5113: LD_ADDR_EXP 82
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// end ; if p2 = 101 then
5121: LD_VAR 0 2
5125: PUSH
5126: LD_INT 101
5128: EQUAL
5129: IFFALSE 5257
// begin case p3 of 1 :
5131: LD_VAR 0 3
5135: PUSH
5136: LD_INT 1
5138: DOUBLE
5139: EQUAL
5140: IFTRUE 5144
5142: GO 5151
5144: POP
// hHackUnlimitedResources ; 2 :
5145: CALL 16292 0 0
5149: GO 5257
5151: LD_INT 2
5153: DOUBLE
5154: EQUAL
5155: IFTRUE 5159
5157: GO 5166
5159: POP
// hHackSetLevel10 ; 3 :
5160: CALL 16425 0 0
5164: GO 5257
5166: LD_INT 3
5168: DOUBLE
5169: EQUAL
5170: IFTRUE 5174
5172: GO 5181
5174: POP
// hHackSetLevel10YourUnits ; 4 :
5175: CALL 16510 0 0
5179: GO 5257
5181: LD_INT 4
5183: DOUBLE
5184: EQUAL
5185: IFTRUE 5189
5187: GO 5196
5189: POP
// hHackInvincible ; 5 :
5190: CALL 16958 0 0
5194: GO 5257
5196: LD_INT 5
5198: DOUBLE
5199: EQUAL
5200: IFTRUE 5204
5202: GO 5211
5204: POP
// hHackInvisible ; 6 :
5205: CALL 17069 0 0
5209: GO 5257
5211: LD_INT 6
5213: DOUBLE
5214: EQUAL
5215: IFTRUE 5219
5217: GO 5226
5219: POP
// hHackChangeYourSide ; 7 :
5220: CALL 17126 0 0
5224: GO 5257
5226: LD_INT 7
5228: DOUBLE
5229: EQUAL
5230: IFTRUE 5234
5232: GO 5241
5234: POP
// hHackChangeUnitSide ; 8 :
5235: CALL 17168 0 0
5239: GO 5257
5241: LD_INT 8
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5256
5249: POP
// hHackFog ; end ;
5250: CALL 17269 0 0
5254: GO 5257
5256: POP
// end ; end ;
5257: PPOPN 6
5259: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5260: GO 5262
5262: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5263: LD_STRING initStreamRollete();
5265: PPUSH
5266: CALL_OW 559
// InitStreamMode ;
5270: CALL 5279 0 0
// DefineStreamItems ( ) ;
5274: CALL 5719 0 0
// end ;
5278: END
// function InitStreamMode ; begin
5279: LD_INT 0
5281: PPUSH
// streamModeActive := false ;
5282: LD_ADDR_EXP 29
5286: PUSH
5287: LD_INT 0
5289: ST_TO_ADDR
// normalCounter := 36 ;
5290: LD_ADDR_EXP 30
5294: PUSH
5295: LD_INT 36
5297: ST_TO_ADDR
// hardcoreCounter := 16 ;
5298: LD_ADDR_EXP 31
5302: PUSH
5303: LD_INT 16
5305: ST_TO_ADDR
// sRocket := false ;
5306: LD_ADDR_EXP 34
5310: PUSH
5311: LD_INT 0
5313: ST_TO_ADDR
// sSpeed := false ;
5314: LD_ADDR_EXP 33
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// sEngine := false ;
5322: LD_ADDR_EXP 35
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// sSpec := false ;
5330: LD_ADDR_EXP 32
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// sLevel := false ;
5338: LD_ADDR_EXP 36
5342: PUSH
5343: LD_INT 0
5345: ST_TO_ADDR
// sArmoury := false ;
5346: LD_ADDR_EXP 37
5350: PUSH
5351: LD_INT 0
5353: ST_TO_ADDR
// sRadar := false ;
5354: LD_ADDR_EXP 38
5358: PUSH
5359: LD_INT 0
5361: ST_TO_ADDR
// sBunker := false ;
5362: LD_ADDR_EXP 39
5366: PUSH
5367: LD_INT 0
5369: ST_TO_ADDR
// sHack := false ;
5370: LD_ADDR_EXP 40
5374: PUSH
5375: LD_INT 0
5377: ST_TO_ADDR
// sFire := false ;
5378: LD_ADDR_EXP 41
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// sRefresh := false ;
5386: LD_ADDR_EXP 42
5390: PUSH
5391: LD_INT 0
5393: ST_TO_ADDR
// sExp := false ;
5394: LD_ADDR_EXP 43
5398: PUSH
5399: LD_INT 0
5401: ST_TO_ADDR
// sDepot := false ;
5402: LD_ADDR_EXP 44
5406: PUSH
5407: LD_INT 0
5409: ST_TO_ADDR
// sFlag := false ;
5410: LD_ADDR_EXP 45
5414: PUSH
5415: LD_INT 0
5417: ST_TO_ADDR
// sKamikadze := false ;
5418: LD_ADDR_EXP 53
5422: PUSH
5423: LD_INT 0
5425: ST_TO_ADDR
// sTroll := false ;
5426: LD_ADDR_EXP 54
5430: PUSH
5431: LD_INT 0
5433: ST_TO_ADDR
// sSlow := false ;
5434: LD_ADDR_EXP 55
5438: PUSH
5439: LD_INT 0
5441: ST_TO_ADDR
// sLack := false ;
5442: LD_ADDR_EXP 56
5446: PUSH
5447: LD_INT 0
5449: ST_TO_ADDR
// sTank := false ;
5450: LD_ADDR_EXP 58
5454: PUSH
5455: LD_INT 0
5457: ST_TO_ADDR
// sRemote := false ;
5458: LD_ADDR_EXP 59
5462: PUSH
5463: LD_INT 0
5465: ST_TO_ADDR
// sPowell := false ;
5466: LD_ADDR_EXP 60
5470: PUSH
5471: LD_INT 0
5473: ST_TO_ADDR
// sTeleport := false ;
5474: LD_ADDR_EXP 63
5478: PUSH
5479: LD_INT 0
5481: ST_TO_ADDR
// sOilTower := false ;
5482: LD_ADDR_EXP 65
5486: PUSH
5487: LD_INT 0
5489: ST_TO_ADDR
// sShovel := false ;
5490: LD_ADDR_EXP 66
5494: PUSH
5495: LD_INT 0
5497: ST_TO_ADDR
// sSheik := false ;
5498: LD_ADDR_EXP 67
5502: PUSH
5503: LD_INT 0
5505: ST_TO_ADDR
// sEarthquake := false ;
5506: LD_ADDR_EXP 69
5510: PUSH
5511: LD_INT 0
5513: ST_TO_ADDR
// sAI := false ;
5514: LD_ADDR_EXP 70
5518: PUSH
5519: LD_INT 0
5521: ST_TO_ADDR
// sCargo := false ;
5522: LD_ADDR_EXP 73
5526: PUSH
5527: LD_INT 0
5529: ST_TO_ADDR
// sDLaser := false ;
5530: LD_ADDR_EXP 74
5534: PUSH
5535: LD_INT 0
5537: ST_TO_ADDR
// sExchange := false ;
5538: LD_ADDR_EXP 75
5542: PUSH
5543: LD_INT 0
5545: ST_TO_ADDR
// sFac := false ;
5546: LD_ADDR_EXP 76
5550: PUSH
5551: LD_INT 0
5553: ST_TO_ADDR
// sPower := false ;
5554: LD_ADDR_EXP 77
5558: PUSH
5559: LD_INT 0
5561: ST_TO_ADDR
// sRandom := false ;
5562: LD_ADDR_EXP 78
5566: PUSH
5567: LD_INT 0
5569: ST_TO_ADDR
// sShield := false ;
5570: LD_ADDR_EXP 79
5574: PUSH
5575: LD_INT 0
5577: ST_TO_ADDR
// sTime := false ;
5578: LD_ADDR_EXP 80
5582: PUSH
5583: LD_INT 0
5585: ST_TO_ADDR
// sTools := false ;
5586: LD_ADDR_EXP 81
5590: PUSH
5591: LD_INT 0
5593: ST_TO_ADDR
// sSold := false ;
5594: LD_ADDR_EXP 46
5598: PUSH
5599: LD_INT 0
5601: ST_TO_ADDR
// sDiff := false ;
5602: LD_ADDR_EXP 47
5606: PUSH
5607: LD_INT 0
5609: ST_TO_ADDR
// sFog := false ;
5610: LD_ADDR_EXP 50
5614: PUSH
5615: LD_INT 0
5617: ST_TO_ADDR
// sReset := false ;
5618: LD_ADDR_EXP 51
5622: PUSH
5623: LD_INT 0
5625: ST_TO_ADDR
// sSun := false ;
5626: LD_ADDR_EXP 52
5630: PUSH
5631: LD_INT 0
5633: ST_TO_ADDR
// sTiger := false ;
5634: LD_ADDR_EXP 48
5638: PUSH
5639: LD_INT 0
5641: ST_TO_ADDR
// sBomb := false ;
5642: LD_ADDR_EXP 49
5646: PUSH
5647: LD_INT 0
5649: ST_TO_ADDR
// sWound := false ;
5650: LD_ADDR_EXP 57
5654: PUSH
5655: LD_INT 0
5657: ST_TO_ADDR
// sBetray := false ;
5658: LD_ADDR_EXP 61
5662: PUSH
5663: LD_INT 0
5665: ST_TO_ADDR
// sContamin := false ;
5666: LD_ADDR_EXP 62
5670: PUSH
5671: LD_INT 0
5673: ST_TO_ADDR
// sOil := false ;
5674: LD_ADDR_EXP 64
5678: PUSH
5679: LD_INT 0
5681: ST_TO_ADDR
// sStu := false ;
5682: LD_ADDR_EXP 68
5686: PUSH
5687: LD_INT 0
5689: ST_TO_ADDR
// sBazooka := false ;
5690: LD_ADDR_EXP 71
5694: PUSH
5695: LD_INT 0
5697: ST_TO_ADDR
// sMortar := false ;
5698: LD_ADDR_EXP 72
5702: PUSH
5703: LD_INT 0
5705: ST_TO_ADDR
// sRanger := false ;
5706: LD_ADDR_EXP 82
5710: PUSH
5711: LD_INT 0
5713: ST_TO_ADDR
// end ;
5714: LD_VAR 0 1
5718: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5719: LD_INT 0
5721: PPUSH
5722: PPUSH
5723: PPUSH
5724: PPUSH
5725: PPUSH
// result := [ ] ;
5726: LD_ADDR_VAR 0 1
5730: PUSH
5731: EMPTY
5732: ST_TO_ADDR
// if campaign_id = 1 then
5733: LD_OWVAR 69
5737: PUSH
5738: LD_INT 1
5740: EQUAL
5741: IFFALSE 8679
// begin case mission_number of 1 :
5743: LD_OWVAR 70
5747: PUSH
5748: LD_INT 1
5750: DOUBLE
5751: EQUAL
5752: IFTRUE 5756
5754: GO 5820
5756: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5757: LD_ADDR_VAR 0 1
5761: PUSH
5762: LD_INT 2
5764: PUSH
5765: LD_INT 4
5767: PUSH
5768: LD_INT 11
5770: PUSH
5771: LD_INT 12
5773: PUSH
5774: LD_INT 15
5776: PUSH
5777: LD_INT 16
5779: PUSH
5780: LD_INT 22
5782: PUSH
5783: LD_INT 23
5785: PUSH
5786: LD_INT 26
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_INT 101
5802: PUSH
5803: LD_INT 102
5805: PUSH
5806: LD_INT 106
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: ST_TO_ADDR
5818: GO 8677
5820: LD_INT 2
5822: DOUBLE
5823: EQUAL
5824: IFTRUE 5828
5826: GO 5900
5828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5829: LD_ADDR_VAR 0 1
5833: PUSH
5834: LD_INT 2
5836: PUSH
5837: LD_INT 4
5839: PUSH
5840: LD_INT 11
5842: PUSH
5843: LD_INT 12
5845: PUSH
5846: LD_INT 15
5848: PUSH
5849: LD_INT 16
5851: PUSH
5852: LD_INT 22
5854: PUSH
5855: LD_INT 23
5857: PUSH
5858: LD_INT 26
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 101
5874: PUSH
5875: LD_INT 102
5877: PUSH
5878: LD_INT 105
5880: PUSH
5881: LD_INT 106
5883: PUSH
5884: LD_INT 108
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: ST_TO_ADDR
5898: GO 8677
5900: LD_INT 3
5902: DOUBLE
5903: EQUAL
5904: IFTRUE 5908
5906: GO 5984
5908: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5909: LD_ADDR_VAR 0 1
5913: PUSH
5914: LD_INT 2
5916: PUSH
5917: LD_INT 4
5919: PUSH
5920: LD_INT 5
5922: PUSH
5923: LD_INT 11
5925: PUSH
5926: LD_INT 12
5928: PUSH
5929: LD_INT 15
5931: PUSH
5932: LD_INT 16
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_INT 26
5940: PUSH
5941: LD_INT 36
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 101
5958: PUSH
5959: LD_INT 102
5961: PUSH
5962: LD_INT 105
5964: PUSH
5965: LD_INT 106
5967: PUSH
5968: LD_INT 108
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: ST_TO_ADDR
5982: GO 8677
5984: LD_INT 4
5986: DOUBLE
5987: EQUAL
5988: IFTRUE 5992
5990: GO 6076
5992: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5993: LD_ADDR_VAR 0 1
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: LD_INT 8
6009: PUSH
6010: LD_INT 11
6012: PUSH
6013: LD_INT 12
6015: PUSH
6016: LD_INT 15
6018: PUSH
6019: LD_INT 16
6021: PUSH
6022: LD_INT 22
6024: PUSH
6025: LD_INT 23
6027: PUSH
6028: LD_INT 26
6030: PUSH
6031: LD_INT 36
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 101
6050: PUSH
6051: LD_INT 102
6053: PUSH
6054: LD_INT 105
6056: PUSH
6057: LD_INT 106
6059: PUSH
6060: LD_INT 108
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: ST_TO_ADDR
6074: GO 8677
6076: LD_INT 5
6078: DOUBLE
6079: EQUAL
6080: IFTRUE 6084
6082: GO 6184
6084: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6085: LD_ADDR_VAR 0 1
6089: PUSH
6090: LD_INT 2
6092: PUSH
6093: LD_INT 4
6095: PUSH
6096: LD_INT 5
6098: PUSH
6099: LD_INT 6
6101: PUSH
6102: LD_INT 8
6104: PUSH
6105: LD_INT 11
6107: PUSH
6108: LD_INT 12
6110: PUSH
6111: LD_INT 15
6113: PUSH
6114: LD_INT 16
6116: PUSH
6117: LD_INT 22
6119: PUSH
6120: LD_INT 23
6122: PUSH
6123: LD_INT 25
6125: PUSH
6126: LD_INT 26
6128: PUSH
6129: LD_INT 36
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 101
6150: PUSH
6151: LD_INT 102
6153: PUSH
6154: LD_INT 105
6156: PUSH
6157: LD_INT 106
6159: PUSH
6160: LD_INT 108
6162: PUSH
6163: LD_INT 109
6165: PUSH
6166: LD_INT 112
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: ST_TO_ADDR
6182: GO 8677
6184: LD_INT 6
6186: DOUBLE
6187: EQUAL
6188: IFTRUE 6192
6190: GO 6312
6192: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6193: LD_ADDR_VAR 0 1
6197: PUSH
6198: LD_INT 2
6200: PUSH
6201: LD_INT 4
6203: PUSH
6204: LD_INT 5
6206: PUSH
6207: LD_INT 6
6209: PUSH
6210: LD_INT 8
6212: PUSH
6213: LD_INT 11
6215: PUSH
6216: LD_INT 12
6218: PUSH
6219: LD_INT 15
6221: PUSH
6222: LD_INT 16
6224: PUSH
6225: LD_INT 20
6227: PUSH
6228: LD_INT 21
6230: PUSH
6231: LD_INT 22
6233: PUSH
6234: LD_INT 23
6236: PUSH
6237: LD_INT 25
6239: PUSH
6240: LD_INT 26
6242: PUSH
6243: LD_INT 30
6245: PUSH
6246: LD_INT 31
6248: PUSH
6249: LD_INT 32
6251: PUSH
6252: LD_INT 36
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 101
6278: PUSH
6279: LD_INT 102
6281: PUSH
6282: LD_INT 105
6284: PUSH
6285: LD_INT 106
6287: PUSH
6288: LD_INT 108
6290: PUSH
6291: LD_INT 109
6293: PUSH
6294: LD_INT 112
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: ST_TO_ADDR
6310: GO 8677
6312: LD_INT 7
6314: DOUBLE
6315: EQUAL
6316: IFTRUE 6320
6318: GO 6420
6320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6321: LD_ADDR_VAR 0 1
6325: PUSH
6326: LD_INT 2
6328: PUSH
6329: LD_INT 4
6331: PUSH
6332: LD_INT 5
6334: PUSH
6335: LD_INT 7
6337: PUSH
6338: LD_INT 11
6340: PUSH
6341: LD_INT 12
6343: PUSH
6344: LD_INT 15
6346: PUSH
6347: LD_INT 16
6349: PUSH
6350: LD_INT 20
6352: PUSH
6353: LD_INT 21
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_INT 23
6361: PUSH
6362: LD_INT 25
6364: PUSH
6365: LD_INT 26
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 101
6386: PUSH
6387: LD_INT 102
6389: PUSH
6390: LD_INT 103
6392: PUSH
6393: LD_INT 105
6395: PUSH
6396: LD_INT 106
6398: PUSH
6399: LD_INT 108
6401: PUSH
6402: LD_INT 112
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: ST_TO_ADDR
6418: GO 8677
6420: LD_INT 8
6422: DOUBLE
6423: EQUAL
6424: IFTRUE 6428
6426: GO 6556
6428: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6429: LD_ADDR_VAR 0 1
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: LD_INT 4
6439: PUSH
6440: LD_INT 5
6442: PUSH
6443: LD_INT 6
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: LD_INT 8
6451: PUSH
6452: LD_INT 11
6454: PUSH
6455: LD_INT 12
6457: PUSH
6458: LD_INT 15
6460: PUSH
6461: LD_INT 16
6463: PUSH
6464: LD_INT 20
6466: PUSH
6467: LD_INT 21
6469: PUSH
6470: LD_INT 22
6472: PUSH
6473: LD_INT 23
6475: PUSH
6476: LD_INT 25
6478: PUSH
6479: LD_INT 26
6481: PUSH
6482: LD_INT 30
6484: PUSH
6485: LD_INT 31
6487: PUSH
6488: LD_INT 32
6490: PUSH
6491: LD_INT 36
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 101
6518: PUSH
6519: LD_INT 102
6521: PUSH
6522: LD_INT 103
6524: PUSH
6525: LD_INT 105
6527: PUSH
6528: LD_INT 106
6530: PUSH
6531: LD_INT 108
6533: PUSH
6534: LD_INT 109
6536: PUSH
6537: LD_INT 112
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: ST_TO_ADDR
6554: GO 8677
6556: LD_INT 9
6558: DOUBLE
6559: EQUAL
6560: IFTRUE 6564
6562: GO 6700
6564: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6565: LD_ADDR_VAR 0 1
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 4
6575: PUSH
6576: LD_INT 5
6578: PUSH
6579: LD_INT 6
6581: PUSH
6582: LD_INT 7
6584: PUSH
6585: LD_INT 8
6587: PUSH
6588: LD_INT 11
6590: PUSH
6591: LD_INT 12
6593: PUSH
6594: LD_INT 15
6596: PUSH
6597: LD_INT 16
6599: PUSH
6600: LD_INT 20
6602: PUSH
6603: LD_INT 21
6605: PUSH
6606: LD_INT 22
6608: PUSH
6609: LD_INT 23
6611: PUSH
6612: LD_INT 25
6614: PUSH
6615: LD_INT 26
6617: PUSH
6618: LD_INT 28
6620: PUSH
6621: LD_INT 30
6623: PUSH
6624: LD_INT 31
6626: PUSH
6627: LD_INT 32
6629: PUSH
6630: LD_INT 36
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 101
6658: PUSH
6659: LD_INT 102
6661: PUSH
6662: LD_INT 103
6664: PUSH
6665: LD_INT 105
6667: PUSH
6668: LD_INT 106
6670: PUSH
6671: LD_INT 108
6673: PUSH
6674: LD_INT 109
6676: PUSH
6677: LD_INT 112
6679: PUSH
6680: LD_INT 114
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: ST_TO_ADDR
6698: GO 8677
6700: LD_INT 10
6702: DOUBLE
6703: EQUAL
6704: IFTRUE 6708
6706: GO 6892
6708: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6709: LD_ADDR_VAR 0 1
6713: PUSH
6714: LD_INT 2
6716: PUSH
6717: LD_INT 4
6719: PUSH
6720: LD_INT 5
6722: PUSH
6723: LD_INT 6
6725: PUSH
6726: LD_INT 7
6728: PUSH
6729: LD_INT 8
6731: PUSH
6732: LD_INT 9
6734: PUSH
6735: LD_INT 10
6737: PUSH
6738: LD_INT 11
6740: PUSH
6741: LD_INT 12
6743: PUSH
6744: LD_INT 13
6746: PUSH
6747: LD_INT 14
6749: PUSH
6750: LD_INT 15
6752: PUSH
6753: LD_INT 16
6755: PUSH
6756: LD_INT 17
6758: PUSH
6759: LD_INT 18
6761: PUSH
6762: LD_INT 19
6764: PUSH
6765: LD_INT 20
6767: PUSH
6768: LD_INT 21
6770: PUSH
6771: LD_INT 22
6773: PUSH
6774: LD_INT 23
6776: PUSH
6777: LD_INT 24
6779: PUSH
6780: LD_INT 25
6782: PUSH
6783: LD_INT 26
6785: PUSH
6786: LD_INT 28
6788: PUSH
6789: LD_INT 30
6791: PUSH
6792: LD_INT 31
6794: PUSH
6795: LD_INT 32
6797: PUSH
6798: LD_INT 36
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 101
6834: PUSH
6835: LD_INT 102
6837: PUSH
6838: LD_INT 103
6840: PUSH
6841: LD_INT 104
6843: PUSH
6844: LD_INT 105
6846: PUSH
6847: LD_INT 106
6849: PUSH
6850: LD_INT 107
6852: PUSH
6853: LD_INT 108
6855: PUSH
6856: LD_INT 109
6858: PUSH
6859: LD_INT 110
6861: PUSH
6862: LD_INT 111
6864: PUSH
6865: LD_INT 112
6867: PUSH
6868: LD_INT 114
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: ST_TO_ADDR
6890: GO 8677
6892: LD_INT 11
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 7092
6900: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6901: LD_ADDR_VAR 0 1
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: LD_INT 3
6911: PUSH
6912: LD_INT 4
6914: PUSH
6915: LD_INT 5
6917: PUSH
6918: LD_INT 6
6920: PUSH
6921: LD_INT 7
6923: PUSH
6924: LD_INT 8
6926: PUSH
6927: LD_INT 9
6929: PUSH
6930: LD_INT 10
6932: PUSH
6933: LD_INT 11
6935: PUSH
6936: LD_INT 12
6938: PUSH
6939: LD_INT 13
6941: PUSH
6942: LD_INT 14
6944: PUSH
6945: LD_INT 15
6947: PUSH
6948: LD_INT 16
6950: PUSH
6951: LD_INT 17
6953: PUSH
6954: LD_INT 18
6956: PUSH
6957: LD_INT 19
6959: PUSH
6960: LD_INT 20
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 23
6971: PUSH
6972: LD_INT 24
6974: PUSH
6975: LD_INT 25
6977: PUSH
6978: LD_INT 26
6980: PUSH
6981: LD_INT 28
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 31
6989: PUSH
6990: LD_INT 32
6992: PUSH
6993: LD_INT 34
6995: PUSH
6996: LD_INT 36
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 101
7034: PUSH
7035: LD_INT 102
7037: PUSH
7038: LD_INT 103
7040: PUSH
7041: LD_INT 104
7043: PUSH
7044: LD_INT 105
7046: PUSH
7047: LD_INT 106
7049: PUSH
7050: LD_INT 107
7052: PUSH
7053: LD_INT 108
7055: PUSH
7056: LD_INT 109
7058: PUSH
7059: LD_INT 110
7061: PUSH
7062: LD_INT 111
7064: PUSH
7065: LD_INT 112
7067: PUSH
7068: LD_INT 114
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 8677
7092: LD_INT 12
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7308
7100: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7101: LD_ADDR_VAR 0 1
7105: PUSH
7106: LD_INT 1
7108: PUSH
7109: LD_INT 2
7111: PUSH
7112: LD_INT 3
7114: PUSH
7115: LD_INT 4
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 6
7123: PUSH
7124: LD_INT 7
7126: PUSH
7127: LD_INT 8
7129: PUSH
7130: LD_INT 9
7132: PUSH
7133: LD_INT 10
7135: PUSH
7136: LD_INT 11
7138: PUSH
7139: LD_INT 12
7141: PUSH
7142: LD_INT 13
7144: PUSH
7145: LD_INT 14
7147: PUSH
7148: LD_INT 15
7150: PUSH
7151: LD_INT 16
7153: PUSH
7154: LD_INT 17
7156: PUSH
7157: LD_INT 18
7159: PUSH
7160: LD_INT 19
7162: PUSH
7163: LD_INT 20
7165: PUSH
7166: LD_INT 21
7168: PUSH
7169: LD_INT 22
7171: PUSH
7172: LD_INT 23
7174: PUSH
7175: LD_INT 24
7177: PUSH
7178: LD_INT 25
7180: PUSH
7181: LD_INT 26
7183: PUSH
7184: LD_INT 27
7186: PUSH
7187: LD_INT 28
7189: PUSH
7190: LD_INT 30
7192: PUSH
7193: LD_INT 31
7195: PUSH
7196: LD_INT 32
7198: PUSH
7199: LD_INT 33
7201: PUSH
7202: LD_INT 34
7204: PUSH
7205: LD_INT 36
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 101
7246: PUSH
7247: LD_INT 102
7249: PUSH
7250: LD_INT 103
7252: PUSH
7253: LD_INT 104
7255: PUSH
7256: LD_INT 105
7258: PUSH
7259: LD_INT 106
7261: PUSH
7262: LD_INT 107
7264: PUSH
7265: LD_INT 108
7267: PUSH
7268: LD_INT 109
7270: PUSH
7271: LD_INT 110
7273: PUSH
7274: LD_INT 111
7276: PUSH
7277: LD_INT 112
7279: PUSH
7280: LD_INT 113
7282: PUSH
7283: LD_INT 114
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: ST_TO_ADDR
7306: GO 8677
7308: LD_INT 13
7310: DOUBLE
7311: EQUAL
7312: IFTRUE 7316
7314: GO 7512
7316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: LD_INT 1
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: LD_INT 3
7330: PUSH
7331: LD_INT 4
7333: PUSH
7334: LD_INT 5
7336: PUSH
7337: LD_INT 8
7339: PUSH
7340: LD_INT 9
7342: PUSH
7343: LD_INT 10
7345: PUSH
7346: LD_INT 11
7348: PUSH
7349: LD_INT 12
7351: PUSH
7352: LD_INT 14
7354: PUSH
7355: LD_INT 15
7357: PUSH
7358: LD_INT 16
7360: PUSH
7361: LD_INT 17
7363: PUSH
7364: LD_INT 18
7366: PUSH
7367: LD_INT 19
7369: PUSH
7370: LD_INT 20
7372: PUSH
7373: LD_INT 21
7375: PUSH
7376: LD_INT 22
7378: PUSH
7379: LD_INT 23
7381: PUSH
7382: LD_INT 24
7384: PUSH
7385: LD_INT 25
7387: PUSH
7388: LD_INT 26
7390: PUSH
7391: LD_INT 27
7393: PUSH
7394: LD_INT 28
7396: PUSH
7397: LD_INT 30
7399: PUSH
7400: LD_INT 31
7402: PUSH
7403: LD_INT 32
7405: PUSH
7406: LD_INT 33
7408: PUSH
7409: LD_INT 34
7411: PUSH
7412: LD_INT 36
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 101
7450: PUSH
7451: LD_INT 102
7453: PUSH
7454: LD_INT 103
7456: PUSH
7457: LD_INT 104
7459: PUSH
7460: LD_INT 105
7462: PUSH
7463: LD_INT 106
7465: PUSH
7466: LD_INT 107
7468: PUSH
7469: LD_INT 108
7471: PUSH
7472: LD_INT 109
7474: PUSH
7475: LD_INT 110
7477: PUSH
7478: LD_INT 111
7480: PUSH
7481: LD_INT 112
7483: PUSH
7484: LD_INT 113
7486: PUSH
7487: LD_INT 114
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: ST_TO_ADDR
7510: GO 8677
7512: LD_INT 14
7514: DOUBLE
7515: EQUAL
7516: IFTRUE 7520
7518: GO 7732
7520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7521: LD_ADDR_VAR 0 1
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: LD_INT 2
7531: PUSH
7532: LD_INT 3
7534: PUSH
7535: LD_INT 4
7537: PUSH
7538: LD_INT 5
7540: PUSH
7541: LD_INT 6
7543: PUSH
7544: LD_INT 7
7546: PUSH
7547: LD_INT 8
7549: PUSH
7550: LD_INT 9
7552: PUSH
7553: LD_INT 10
7555: PUSH
7556: LD_INT 11
7558: PUSH
7559: LD_INT 12
7561: PUSH
7562: LD_INT 13
7564: PUSH
7565: LD_INT 14
7567: PUSH
7568: LD_INT 15
7570: PUSH
7571: LD_INT 16
7573: PUSH
7574: LD_INT 17
7576: PUSH
7577: LD_INT 18
7579: PUSH
7580: LD_INT 19
7582: PUSH
7583: LD_INT 20
7585: PUSH
7586: LD_INT 21
7588: PUSH
7589: LD_INT 22
7591: PUSH
7592: LD_INT 23
7594: PUSH
7595: LD_INT 24
7597: PUSH
7598: LD_INT 25
7600: PUSH
7601: LD_INT 26
7603: PUSH
7604: LD_INT 27
7606: PUSH
7607: LD_INT 28
7609: PUSH
7610: LD_INT 29
7612: PUSH
7613: LD_INT 30
7615: PUSH
7616: LD_INT 31
7618: PUSH
7619: LD_INT 32
7621: PUSH
7622: LD_INT 33
7624: PUSH
7625: LD_INT 34
7627: PUSH
7628: LD_INT 36
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 101
7670: PUSH
7671: LD_INT 102
7673: PUSH
7674: LD_INT 103
7676: PUSH
7677: LD_INT 104
7679: PUSH
7680: LD_INT 105
7682: PUSH
7683: LD_INT 106
7685: PUSH
7686: LD_INT 107
7688: PUSH
7689: LD_INT 108
7691: PUSH
7692: LD_INT 109
7694: PUSH
7695: LD_INT 110
7697: PUSH
7698: LD_INT 111
7700: PUSH
7701: LD_INT 112
7703: PUSH
7704: LD_INT 113
7706: PUSH
7707: LD_INT 114
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: ST_TO_ADDR
7730: GO 8677
7732: LD_INT 15
7734: DOUBLE
7735: EQUAL
7736: IFTRUE 7740
7738: GO 7952
7740: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7741: LD_ADDR_VAR 0 1
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: LD_INT 2
7751: PUSH
7752: LD_INT 3
7754: PUSH
7755: LD_INT 4
7757: PUSH
7758: LD_INT 5
7760: PUSH
7761: LD_INT 6
7763: PUSH
7764: LD_INT 7
7766: PUSH
7767: LD_INT 8
7769: PUSH
7770: LD_INT 9
7772: PUSH
7773: LD_INT 10
7775: PUSH
7776: LD_INT 11
7778: PUSH
7779: LD_INT 12
7781: PUSH
7782: LD_INT 13
7784: PUSH
7785: LD_INT 14
7787: PUSH
7788: LD_INT 15
7790: PUSH
7791: LD_INT 16
7793: PUSH
7794: LD_INT 17
7796: PUSH
7797: LD_INT 18
7799: PUSH
7800: LD_INT 19
7802: PUSH
7803: LD_INT 20
7805: PUSH
7806: LD_INT 21
7808: PUSH
7809: LD_INT 22
7811: PUSH
7812: LD_INT 23
7814: PUSH
7815: LD_INT 24
7817: PUSH
7818: LD_INT 25
7820: PUSH
7821: LD_INT 26
7823: PUSH
7824: LD_INT 27
7826: PUSH
7827: LD_INT 28
7829: PUSH
7830: LD_INT 29
7832: PUSH
7833: LD_INT 30
7835: PUSH
7836: LD_INT 31
7838: PUSH
7839: LD_INT 32
7841: PUSH
7842: LD_INT 33
7844: PUSH
7845: LD_INT 34
7847: PUSH
7848: LD_INT 36
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 101
7890: PUSH
7891: LD_INT 102
7893: PUSH
7894: LD_INT 103
7896: PUSH
7897: LD_INT 104
7899: PUSH
7900: LD_INT 105
7902: PUSH
7903: LD_INT 106
7905: PUSH
7906: LD_INT 107
7908: PUSH
7909: LD_INT 108
7911: PUSH
7912: LD_INT 109
7914: PUSH
7915: LD_INT 110
7917: PUSH
7918: LD_INT 111
7920: PUSH
7921: LD_INT 112
7923: PUSH
7924: LD_INT 113
7926: PUSH
7927: LD_INT 114
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: ST_TO_ADDR
7950: GO 8677
7952: LD_INT 16
7954: DOUBLE
7955: EQUAL
7956: IFTRUE 7960
7958: GO 8084
7960: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7961: LD_ADDR_VAR 0 1
7965: PUSH
7966: LD_INT 2
7968: PUSH
7969: LD_INT 4
7971: PUSH
7972: LD_INT 5
7974: PUSH
7975: LD_INT 7
7977: PUSH
7978: LD_INT 11
7980: PUSH
7981: LD_INT 12
7983: PUSH
7984: LD_INT 15
7986: PUSH
7987: LD_INT 16
7989: PUSH
7990: LD_INT 20
7992: PUSH
7993: LD_INT 21
7995: PUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 23
8001: PUSH
8002: LD_INT 25
8004: PUSH
8005: LD_INT 26
8007: PUSH
8008: LD_INT 30
8010: PUSH
8011: LD_INT 31
8013: PUSH
8014: LD_INT 32
8016: PUSH
8017: LD_INT 33
8019: PUSH
8020: LD_INT 34
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: PUSH
8044: LD_INT 101
8046: PUSH
8047: LD_INT 102
8049: PUSH
8050: LD_INT 103
8052: PUSH
8053: LD_INT 106
8055: PUSH
8056: LD_INT 108
8058: PUSH
8059: LD_INT 112
8061: PUSH
8062: LD_INT 113
8064: PUSH
8065: LD_INT 114
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: ST_TO_ADDR
8082: GO 8677
8084: LD_INT 17
8086: DOUBLE
8087: EQUAL
8088: IFTRUE 8092
8090: GO 8304
8092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8093: LD_ADDR_VAR 0 1
8097: PUSH
8098: LD_INT 1
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: LD_INT 4
8109: PUSH
8110: LD_INT 5
8112: PUSH
8113: LD_INT 6
8115: PUSH
8116: LD_INT 7
8118: PUSH
8119: LD_INT 8
8121: PUSH
8122: LD_INT 9
8124: PUSH
8125: LD_INT 10
8127: PUSH
8128: LD_INT 11
8130: PUSH
8131: LD_INT 12
8133: PUSH
8134: LD_INT 13
8136: PUSH
8137: LD_INT 14
8139: PUSH
8140: LD_INT 15
8142: PUSH
8143: LD_INT 16
8145: PUSH
8146: LD_INT 17
8148: PUSH
8149: LD_INT 18
8151: PUSH
8152: LD_INT 19
8154: PUSH
8155: LD_INT 20
8157: PUSH
8158: LD_INT 21
8160: PUSH
8161: LD_INT 22
8163: PUSH
8164: LD_INT 23
8166: PUSH
8167: LD_INT 24
8169: PUSH
8170: LD_INT 25
8172: PUSH
8173: LD_INT 26
8175: PUSH
8176: LD_INT 27
8178: PUSH
8179: LD_INT 28
8181: PUSH
8182: LD_INT 29
8184: PUSH
8185: LD_INT 30
8187: PUSH
8188: LD_INT 31
8190: PUSH
8191: LD_INT 32
8193: PUSH
8194: LD_INT 33
8196: PUSH
8197: LD_INT 34
8199: PUSH
8200: LD_INT 36
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: PUSH
8240: LD_INT 101
8242: PUSH
8243: LD_INT 102
8245: PUSH
8246: LD_INT 103
8248: PUSH
8249: LD_INT 104
8251: PUSH
8252: LD_INT 105
8254: PUSH
8255: LD_INT 106
8257: PUSH
8258: LD_INT 107
8260: PUSH
8261: LD_INT 108
8263: PUSH
8264: LD_INT 109
8266: PUSH
8267: LD_INT 110
8269: PUSH
8270: LD_INT 111
8272: PUSH
8273: LD_INT 112
8275: PUSH
8276: LD_INT 113
8278: PUSH
8279: LD_INT 114
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: ST_TO_ADDR
8302: GO 8677
8304: LD_INT 18
8306: DOUBLE
8307: EQUAL
8308: IFTRUE 8312
8310: GO 8448
8312: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8313: LD_ADDR_VAR 0 1
8317: PUSH
8318: LD_INT 2
8320: PUSH
8321: LD_INT 4
8323: PUSH
8324: LD_INT 5
8326: PUSH
8327: LD_INT 7
8329: PUSH
8330: LD_INT 11
8332: PUSH
8333: LD_INT 12
8335: PUSH
8336: LD_INT 15
8338: PUSH
8339: LD_INT 16
8341: PUSH
8342: LD_INT 20
8344: PUSH
8345: LD_INT 21
8347: PUSH
8348: LD_INT 22
8350: PUSH
8351: LD_INT 23
8353: PUSH
8354: LD_INT 25
8356: PUSH
8357: LD_INT 26
8359: PUSH
8360: LD_INT 30
8362: PUSH
8363: LD_INT 31
8365: PUSH
8366: LD_INT 32
8368: PUSH
8369: LD_INT 33
8371: PUSH
8372: LD_INT 34
8374: PUSH
8375: LD_INT 35
8377: PUSH
8378: LD_INT 36
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: PUSH
8404: LD_INT 101
8406: PUSH
8407: LD_INT 102
8409: PUSH
8410: LD_INT 103
8412: PUSH
8413: LD_INT 106
8415: PUSH
8416: LD_INT 108
8418: PUSH
8419: LD_INT 112
8421: PUSH
8422: LD_INT 113
8424: PUSH
8425: LD_INT 114
8427: PUSH
8428: LD_INT 115
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: ST_TO_ADDR
8446: GO 8677
8448: LD_INT 19
8450: DOUBLE
8451: EQUAL
8452: IFTRUE 8456
8454: GO 8676
8456: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8457: LD_ADDR_VAR 0 1
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: LD_INT 2
8467: PUSH
8468: LD_INT 3
8470: PUSH
8471: LD_INT 4
8473: PUSH
8474: LD_INT 5
8476: PUSH
8477: LD_INT 6
8479: PUSH
8480: LD_INT 7
8482: PUSH
8483: LD_INT 8
8485: PUSH
8486: LD_INT 9
8488: PUSH
8489: LD_INT 10
8491: PUSH
8492: LD_INT 11
8494: PUSH
8495: LD_INT 12
8497: PUSH
8498: LD_INT 13
8500: PUSH
8501: LD_INT 14
8503: PUSH
8504: LD_INT 15
8506: PUSH
8507: LD_INT 16
8509: PUSH
8510: LD_INT 17
8512: PUSH
8513: LD_INT 18
8515: PUSH
8516: LD_INT 19
8518: PUSH
8519: LD_INT 20
8521: PUSH
8522: LD_INT 21
8524: PUSH
8525: LD_INT 22
8527: PUSH
8528: LD_INT 23
8530: PUSH
8531: LD_INT 24
8533: PUSH
8534: LD_INT 25
8536: PUSH
8537: LD_INT 26
8539: PUSH
8540: LD_INT 27
8542: PUSH
8543: LD_INT 28
8545: PUSH
8546: LD_INT 29
8548: PUSH
8549: LD_INT 30
8551: PUSH
8552: LD_INT 31
8554: PUSH
8555: LD_INT 32
8557: PUSH
8558: LD_INT 33
8560: PUSH
8561: LD_INT 34
8563: PUSH
8564: LD_INT 35
8566: PUSH
8567: LD_INT 36
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 101
8610: PUSH
8611: LD_INT 102
8613: PUSH
8614: LD_INT 103
8616: PUSH
8617: LD_INT 104
8619: PUSH
8620: LD_INT 105
8622: PUSH
8623: LD_INT 106
8625: PUSH
8626: LD_INT 107
8628: PUSH
8629: LD_INT 108
8631: PUSH
8632: LD_INT 109
8634: PUSH
8635: LD_INT 110
8637: PUSH
8638: LD_INT 111
8640: PUSH
8641: LD_INT 112
8643: PUSH
8644: LD_INT 113
8646: PUSH
8647: LD_INT 114
8649: PUSH
8650: LD_INT 115
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: ST_TO_ADDR
8674: GO 8677
8676: POP
// end else
8677: GO 8896
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8679: LD_ADDR_VAR 0 1
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: LD_INT 2
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: LD_INT 4
8695: PUSH
8696: LD_INT 5
8698: PUSH
8699: LD_INT 6
8701: PUSH
8702: LD_INT 7
8704: PUSH
8705: LD_INT 8
8707: PUSH
8708: LD_INT 9
8710: PUSH
8711: LD_INT 10
8713: PUSH
8714: LD_INT 11
8716: PUSH
8717: LD_INT 12
8719: PUSH
8720: LD_INT 13
8722: PUSH
8723: LD_INT 14
8725: PUSH
8726: LD_INT 15
8728: PUSH
8729: LD_INT 16
8731: PUSH
8732: LD_INT 17
8734: PUSH
8735: LD_INT 18
8737: PUSH
8738: LD_INT 19
8740: PUSH
8741: LD_INT 20
8743: PUSH
8744: LD_INT 21
8746: PUSH
8747: LD_INT 22
8749: PUSH
8750: LD_INT 23
8752: PUSH
8753: LD_INT 24
8755: PUSH
8756: LD_INT 25
8758: PUSH
8759: LD_INT 26
8761: PUSH
8762: LD_INT 27
8764: PUSH
8765: LD_INT 28
8767: PUSH
8768: LD_INT 29
8770: PUSH
8771: LD_INT 30
8773: PUSH
8774: LD_INT 31
8776: PUSH
8777: LD_INT 32
8779: PUSH
8780: LD_INT 33
8782: PUSH
8783: LD_INT 34
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: LD_INT 36
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 101
8832: PUSH
8833: LD_INT 102
8835: PUSH
8836: LD_INT 103
8838: PUSH
8839: LD_INT 104
8841: PUSH
8842: LD_INT 105
8844: PUSH
8845: LD_INT 106
8847: PUSH
8848: LD_INT 107
8850: PUSH
8851: LD_INT 108
8853: PUSH
8854: LD_INT 109
8856: PUSH
8857: LD_INT 110
8859: PUSH
8860: LD_INT 111
8862: PUSH
8863: LD_INT 112
8865: PUSH
8866: LD_INT 113
8868: PUSH
8869: LD_INT 114
8871: PUSH
8872: LD_INT 115
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: ST_TO_ADDR
// if result then
8896: LD_VAR 0 1
8900: IFFALSE 9189
// begin normal :=  ;
8902: LD_ADDR_VAR 0 3
8906: PUSH
8907: LD_STRING 
8909: ST_TO_ADDR
// hardcore :=  ;
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: LD_STRING 
8917: ST_TO_ADDR
// for i = 1 to normalCounter do
8918: LD_ADDR_VAR 0 5
8922: PUSH
8923: DOUBLE
8924: LD_INT 1
8926: DEC
8927: ST_TO_ADDR
8928: LD_EXP 30
8932: PUSH
8933: FOR_TO
8934: IFFALSE 9035
// begin tmp := 0 ;
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: LD_STRING 0
8943: ST_TO_ADDR
// if result [ 1 ] then
8944: LD_VAR 0 1
8948: PUSH
8949: LD_INT 1
8951: ARRAY
8952: IFFALSE 9017
// if result [ 1 ] [ 1 ] = i then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 1
8961: ARRAY
8962: PUSH
8963: LD_INT 1
8965: ARRAY
8966: PUSH
8967: LD_VAR 0 5
8971: EQUAL
8972: IFFALSE 9017
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8974: LD_ADDR_VAR 0 1
8978: PUSH
8979: LD_VAR 0 1
8983: PPUSH
8984: LD_INT 1
8986: PPUSH
8987: LD_VAR 0 1
8991: PUSH
8992: LD_INT 1
8994: ARRAY
8995: PPUSH
8996: LD_INT 1
8998: PPUSH
8999: CALL_OW 3
9003: PPUSH
9004: CALL_OW 1
9008: ST_TO_ADDR
// tmp := 1 ;
9009: LD_ADDR_VAR 0 2
9013: PUSH
9014: LD_STRING 1
9016: ST_TO_ADDR
// end ; normal := normal & tmp ;
9017: LD_ADDR_VAR 0 3
9021: PUSH
9022: LD_VAR 0 3
9026: PUSH
9027: LD_VAR 0 2
9031: STR
9032: ST_TO_ADDR
// end ;
9033: GO 8933
9035: POP
9036: POP
// for i = 1 to hardcoreCounter do
9037: LD_ADDR_VAR 0 5
9041: PUSH
9042: DOUBLE
9043: LD_INT 1
9045: DEC
9046: ST_TO_ADDR
9047: LD_EXP 31
9051: PUSH
9052: FOR_TO
9053: IFFALSE 9158
// begin tmp := 0 ;
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_STRING 0
9062: ST_TO_ADDR
// if result [ 2 ] then
9063: LD_VAR 0 1
9067: PUSH
9068: LD_INT 2
9070: ARRAY
9071: IFFALSE 9140
// if result [ 2 ] [ 1 ] = 100 + i then
9073: LD_VAR 0 1
9077: PUSH
9078: LD_INT 2
9080: ARRAY
9081: PUSH
9082: LD_INT 1
9084: ARRAY
9085: PUSH
9086: LD_INT 100
9088: PUSH
9089: LD_VAR 0 5
9093: PLUS
9094: EQUAL
9095: IFFALSE 9140
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9097: LD_ADDR_VAR 0 1
9101: PUSH
9102: LD_VAR 0 1
9106: PPUSH
9107: LD_INT 2
9109: PPUSH
9110: LD_VAR 0 1
9114: PUSH
9115: LD_INT 2
9117: ARRAY
9118: PPUSH
9119: LD_INT 1
9121: PPUSH
9122: CALL_OW 3
9126: PPUSH
9127: CALL_OW 1
9131: ST_TO_ADDR
// tmp := 1 ;
9132: LD_ADDR_VAR 0 2
9136: PUSH
9137: LD_STRING 1
9139: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9140: LD_ADDR_VAR 0 4
9144: PUSH
9145: LD_VAR 0 4
9149: PUSH
9150: LD_VAR 0 2
9154: STR
9155: ST_TO_ADDR
// end ;
9156: GO 9052
9158: POP
9159: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9160: LD_STRING getStreamItemsFromMission("
9162: PUSH
9163: LD_VAR 0 3
9167: STR
9168: PUSH
9169: LD_STRING ","
9171: STR
9172: PUSH
9173: LD_VAR 0 4
9177: STR
9178: PUSH
9179: LD_STRING ")
9181: STR
9182: PPUSH
9183: CALL_OW 559
// end else
9187: GO 9196
// ToLua ( getStreamItemsFromMission("","") ) ;
9189: LD_STRING getStreamItemsFromMission("","")
9191: PPUSH
9192: CALL_OW 559
// end ;
9196: LD_VAR 0 1
9200: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9201: LD_EXP 29
9205: PUSH
9206: LD_EXP 34
9210: AND
9211: IFFALSE 9335
9213: GO 9215
9215: DISABLE
9216: LD_INT 0
9218: PPUSH
9219: PPUSH
// begin enable ;
9220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: LD_INT 22
9228: PUSH
9229: LD_OWVAR 2
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 2
9240: PUSH
9241: LD_INT 34
9243: PUSH
9244: LD_INT 7
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PUSH
9251: LD_INT 34
9253: PUSH
9254: LD_INT 45
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PUSH
9261: LD_INT 34
9263: PUSH
9264: LD_INT 28
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 34
9273: PUSH
9274: LD_INT 47
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PPUSH
9292: CALL_OW 69
9296: ST_TO_ADDR
// if not tmp then
9297: LD_VAR 0 2
9301: NOT
9302: IFFALSE 9306
// exit ;
9304: GO 9335
// for i in tmp do
9306: LD_ADDR_VAR 0 1
9310: PUSH
9311: LD_VAR 0 2
9315: PUSH
9316: FOR_IN
9317: IFFALSE 9333
// begin SetLives ( i , 0 ) ;
9319: LD_VAR 0 1
9323: PPUSH
9324: LD_INT 0
9326: PPUSH
9327: CALL_OW 234
// end ;
9331: GO 9316
9333: POP
9334: POP
// end ;
9335: PPOPN 2
9337: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9338: LD_EXP 29
9342: PUSH
9343: LD_EXP 35
9347: AND
9348: IFFALSE 9432
9350: GO 9352
9352: DISABLE
9353: LD_INT 0
9355: PPUSH
9356: PPUSH
// begin enable ;
9357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9358: LD_ADDR_VAR 0 2
9362: PUSH
9363: LD_INT 22
9365: PUSH
9366: LD_OWVAR 2
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 32
9377: PUSH
9378: LD_INT 3
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PPUSH
9389: CALL_OW 69
9393: ST_TO_ADDR
// if not tmp then
9394: LD_VAR 0 2
9398: NOT
9399: IFFALSE 9403
// exit ;
9401: GO 9432
// for i in tmp do
9403: LD_ADDR_VAR 0 1
9407: PUSH
9408: LD_VAR 0 2
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9430
// begin SetLives ( i , 0 ) ;
9416: LD_VAR 0 1
9420: PPUSH
9421: LD_INT 0
9423: PPUSH
9424: CALL_OW 234
// end ;
9428: GO 9413
9430: POP
9431: POP
// end ;
9432: PPOPN 2
9434: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9435: LD_EXP 29
9439: PUSH
9440: LD_EXP 32
9444: AND
9445: IFFALSE 9538
9447: GO 9449
9449: DISABLE
9450: LD_INT 0
9452: PPUSH
// begin enable ;
9453: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_INT 22
9461: PUSH
9462: LD_OWVAR 2
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 2
9473: PUSH
9474: LD_INT 25
9476: PUSH
9477: LD_INT 5
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 25
9486: PUSH
9487: LD_INT 9
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 25
9496: PUSH
9497: LD_INT 8
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PPUSH
9514: CALL_OW 69
9518: PUSH
9519: FOR_IN
9520: IFFALSE 9536
// begin SetClass ( i , 1 ) ;
9522: LD_VAR 0 1
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: CALL_OW 336
// end ;
9534: GO 9519
9536: POP
9537: POP
// end ;
9538: PPOPN 1
9540: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9541: LD_EXP 29
9545: PUSH
9546: LD_EXP 33
9550: AND
9551: PUSH
9552: LD_OWVAR 65
9556: PUSH
9557: LD_INT 7
9559: LESS
9560: AND
9561: IFFALSE 9575
9563: GO 9565
9565: DISABLE
// begin enable ;
9566: ENABLE
// game_speed := 7 ;
9567: LD_ADDR_OWVAR 65
9571: PUSH
9572: LD_INT 7
9574: ST_TO_ADDR
// end ;
9575: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9576: LD_EXP 29
9580: PUSH
9581: LD_EXP 36
9585: AND
9586: IFFALSE 9788
9588: GO 9590
9590: DISABLE
9591: LD_INT 0
9593: PPUSH
9594: PPUSH
9595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_INT 81
9603: PUSH
9604: LD_OWVAR 2
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 21
9615: PUSH
9616: LD_INT 1
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PPUSH
9627: CALL_OW 69
9631: ST_TO_ADDR
// if not tmp then
9632: LD_VAR 0 3
9636: NOT
9637: IFFALSE 9641
// exit ;
9639: GO 9788
// if tmp > 5 then
9641: LD_VAR 0 3
9645: PUSH
9646: LD_INT 5
9648: GREATER
9649: IFFALSE 9661
// k := 5 else
9651: LD_ADDR_VAR 0 2
9655: PUSH
9656: LD_INT 5
9658: ST_TO_ADDR
9659: GO 9671
// k := tmp ;
9661: LD_ADDR_VAR 0 2
9665: PUSH
9666: LD_VAR 0 3
9670: ST_TO_ADDR
// for i := 1 to k do
9671: LD_ADDR_VAR 0 1
9675: PUSH
9676: DOUBLE
9677: LD_INT 1
9679: DEC
9680: ST_TO_ADDR
9681: LD_VAR 0 2
9685: PUSH
9686: FOR_TO
9687: IFFALSE 9786
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9689: LD_VAR 0 3
9693: PUSH
9694: LD_VAR 0 1
9698: ARRAY
9699: PPUSH
9700: LD_VAR 0 1
9704: PUSH
9705: LD_INT 4
9707: MOD
9708: PUSH
9709: LD_INT 1
9711: PLUS
9712: PPUSH
9713: CALL_OW 259
9717: PUSH
9718: LD_INT 10
9720: LESS
9721: IFFALSE 9784
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9723: LD_VAR 0 3
9727: PUSH
9728: LD_VAR 0 1
9732: ARRAY
9733: PPUSH
9734: LD_VAR 0 1
9738: PUSH
9739: LD_INT 4
9741: MOD
9742: PUSH
9743: LD_INT 1
9745: PLUS
9746: PPUSH
9747: LD_VAR 0 3
9751: PUSH
9752: LD_VAR 0 1
9756: ARRAY
9757: PPUSH
9758: LD_VAR 0 1
9762: PUSH
9763: LD_INT 4
9765: MOD
9766: PUSH
9767: LD_INT 1
9769: PLUS
9770: PPUSH
9771: CALL_OW 259
9775: PUSH
9776: LD_INT 1
9778: PLUS
9779: PPUSH
9780: CALL_OW 237
9784: GO 9686
9786: POP
9787: POP
// end ;
9788: PPOPN 3
9790: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9791: LD_EXP 29
9795: PUSH
9796: LD_EXP 37
9800: AND
9801: IFFALSE 9821
9803: GO 9805
9805: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9806: LD_INT 4
9808: PPUSH
9809: LD_OWVAR 2
9813: PPUSH
9814: LD_INT 0
9816: PPUSH
9817: CALL_OW 324
9821: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9822: LD_EXP 29
9826: PUSH
9827: LD_EXP 66
9831: AND
9832: IFFALSE 9852
9834: GO 9836
9836: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9837: LD_INT 19
9839: PPUSH
9840: LD_OWVAR 2
9844: PPUSH
9845: LD_INT 0
9847: PPUSH
9848: CALL_OW 324
9852: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9853: LD_EXP 29
9857: PUSH
9858: LD_EXP 38
9862: AND
9863: IFFALSE 9965
9865: GO 9867
9867: DISABLE
9868: LD_INT 0
9870: PPUSH
9871: PPUSH
// begin enable ;
9872: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9873: LD_ADDR_VAR 0 2
9877: PUSH
9878: LD_INT 22
9880: PUSH
9881: LD_OWVAR 2
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 2
9892: PUSH
9893: LD_INT 34
9895: PUSH
9896: LD_INT 11
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 34
9905: PUSH
9906: LD_INT 30
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PPUSH
9922: CALL_OW 69
9926: ST_TO_ADDR
// if not tmp then
9927: LD_VAR 0 2
9931: NOT
9932: IFFALSE 9936
// exit ;
9934: GO 9965
// for i in tmp do
9936: LD_ADDR_VAR 0 1
9940: PUSH
9941: LD_VAR 0 2
9945: PUSH
9946: FOR_IN
9947: IFFALSE 9963
// begin SetLives ( i , 0 ) ;
9949: LD_VAR 0 1
9953: PPUSH
9954: LD_INT 0
9956: PPUSH
9957: CALL_OW 234
// end ;
9961: GO 9946
9963: POP
9964: POP
// end ;
9965: PPOPN 2
9967: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9968: LD_EXP 29
9972: PUSH
9973: LD_EXP 39
9977: AND
9978: IFFALSE 9998
9980: GO 9982
9982: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9983: LD_INT 32
9985: PPUSH
9986: LD_OWVAR 2
9990: PPUSH
9991: LD_INT 0
9993: PPUSH
9994: CALL_OW 324
9998: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9999: LD_EXP 29
10003: PUSH
10004: LD_EXP 40
10008: AND
10009: IFFALSE 10190
10011: GO 10013
10013: DISABLE
10014: LD_INT 0
10016: PPUSH
10017: PPUSH
10018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10019: LD_ADDR_VAR 0 2
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_OWVAR 2
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 33
10038: PUSH
10039: LD_INT 3
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PPUSH
10050: CALL_OW 69
10054: ST_TO_ADDR
// if not tmp then
10055: LD_VAR 0 2
10059: NOT
10060: IFFALSE 10064
// exit ;
10062: GO 10190
// side := 0 ;
10064: LD_ADDR_VAR 0 3
10068: PUSH
10069: LD_INT 0
10071: ST_TO_ADDR
// for i := 1 to 8 do
10072: LD_ADDR_VAR 0 1
10076: PUSH
10077: DOUBLE
10078: LD_INT 1
10080: DEC
10081: ST_TO_ADDR
10082: LD_INT 8
10084: PUSH
10085: FOR_TO
10086: IFFALSE 10134
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10088: LD_OWVAR 2
10092: PUSH
10093: LD_VAR 0 1
10097: NONEQUAL
10098: PUSH
10099: LD_OWVAR 2
10103: PPUSH
10104: LD_VAR 0 1
10108: PPUSH
10109: CALL_OW 81
10113: PUSH
10114: LD_INT 2
10116: EQUAL
10117: AND
10118: IFFALSE 10132
// begin side := i ;
10120: LD_ADDR_VAR 0 3
10124: PUSH
10125: LD_VAR 0 1
10129: ST_TO_ADDR
// break ;
10130: GO 10134
// end ;
10132: GO 10085
10134: POP
10135: POP
// if not side then
10136: LD_VAR 0 3
10140: NOT
10141: IFFALSE 10145
// exit ;
10143: GO 10190
// for i := 1 to tmp do
10145: LD_ADDR_VAR 0 1
10149: PUSH
10150: DOUBLE
10151: LD_INT 1
10153: DEC
10154: ST_TO_ADDR
10155: LD_VAR 0 2
10159: PUSH
10160: FOR_TO
10161: IFFALSE 10188
// if Prob ( 60 ) then
10163: LD_INT 60
10165: PPUSH
10166: CALL_OW 13
10170: IFFALSE 10186
// SetSide ( i , side ) ;
10172: LD_VAR 0 1
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: CALL_OW 235
10186: GO 10160
10188: POP
10189: POP
// end ;
10190: PPOPN 3
10192: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10193: LD_EXP 29
10197: PUSH
10198: LD_EXP 42
10202: AND
10203: IFFALSE 10322
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10211: LD_ADDR_VAR 0 1
10215: PUSH
10216: LD_INT 22
10218: PUSH
10219: LD_OWVAR 2
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 21
10230: PUSH
10231: LD_INT 1
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 3
10240: PUSH
10241: LD_INT 23
10243: PUSH
10244: LD_INT 0
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: PPUSH
10260: CALL_OW 69
10264: PUSH
10265: FOR_IN
10266: IFFALSE 10320
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10268: LD_VAR 0 1
10272: PPUSH
10273: CALL_OW 257
10277: PUSH
10278: LD_INT 1
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: LD_INT 3
10286: PUSH
10287: LD_INT 4
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: IN
10296: IFFALSE 10318
// SetClass ( un , rand ( 1 , 4 ) ) ;
10298: LD_VAR 0 1
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: LD_INT 4
10308: PPUSH
10309: CALL_OW 12
10313: PPUSH
10314: CALL_OW 336
10318: GO 10265
10320: POP
10321: POP
// end ;
10322: PPOPN 1
10324: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10325: LD_EXP 29
10329: PUSH
10330: LD_EXP 41
10334: AND
10335: IFFALSE 10414
10337: GO 10339
10339: DISABLE
10340: LD_INT 0
10342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10343: LD_ADDR_VAR 0 1
10347: PUSH
10348: LD_INT 22
10350: PUSH
10351: LD_OWVAR 2
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 21
10362: PUSH
10363: LD_INT 3
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PPUSH
10374: CALL_OW 69
10378: ST_TO_ADDR
// if not tmp then
10379: LD_VAR 0 1
10383: NOT
10384: IFFALSE 10388
// exit ;
10386: GO 10414
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10388: LD_VAR 0 1
10392: PUSH
10393: LD_INT 1
10395: PPUSH
10396: LD_VAR 0 1
10400: PPUSH
10401: CALL_OW 12
10405: ARRAY
10406: PPUSH
10407: LD_INT 100
10409: PPUSH
10410: CALL_OW 234
// end ;
10414: PPOPN 1
10416: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10417: LD_EXP 29
10421: PUSH
10422: LD_EXP 43
10426: AND
10427: IFFALSE 10525
10429: GO 10431
10431: DISABLE
10432: LD_INT 0
10434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10435: LD_ADDR_VAR 0 1
10439: PUSH
10440: LD_INT 22
10442: PUSH
10443: LD_OWVAR 2
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 21
10454: PUSH
10455: LD_INT 1
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: ST_TO_ADDR
// if not tmp then
10471: LD_VAR 0 1
10475: NOT
10476: IFFALSE 10480
// exit ;
10478: GO 10525
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10480: LD_VAR 0 1
10484: PUSH
10485: LD_INT 1
10487: PPUSH
10488: LD_VAR 0 1
10492: PPUSH
10493: CALL_OW 12
10497: ARRAY
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: LD_INT 4
10504: PPUSH
10505: CALL_OW 12
10509: PPUSH
10510: LD_INT 3000
10512: PPUSH
10513: LD_INT 9000
10515: PPUSH
10516: CALL_OW 12
10520: PPUSH
10521: CALL_OW 492
// end ;
10525: PPOPN 1
10527: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10528: LD_EXP 29
10532: PUSH
10533: LD_EXP 44
10537: AND
10538: IFFALSE 10558
10540: GO 10542
10542: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10543: LD_INT 1
10545: PPUSH
10546: LD_OWVAR 2
10550: PPUSH
10551: LD_INT 0
10553: PPUSH
10554: CALL_OW 324
10558: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10559: LD_EXP 29
10563: PUSH
10564: LD_EXP 45
10568: AND
10569: IFFALSE 10652
10571: GO 10573
10573: DISABLE
10574: LD_INT 0
10576: PPUSH
10577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10578: LD_ADDR_VAR 0 2
10582: PUSH
10583: LD_INT 22
10585: PUSH
10586: LD_OWVAR 2
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 21
10597: PUSH
10598: LD_INT 3
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PPUSH
10609: CALL_OW 69
10613: ST_TO_ADDR
// if not tmp then
10614: LD_VAR 0 2
10618: NOT
10619: IFFALSE 10623
// exit ;
10621: GO 10652
// for i in tmp do
10623: LD_ADDR_VAR 0 1
10627: PUSH
10628: LD_VAR 0 2
10632: PUSH
10633: FOR_IN
10634: IFFALSE 10650
// SetBLevel ( i , 10 ) ;
10636: LD_VAR 0 1
10640: PPUSH
10641: LD_INT 10
10643: PPUSH
10644: CALL_OW 241
10648: GO 10633
10650: POP
10651: POP
// end ;
10652: PPOPN 2
10654: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10655: LD_EXP 29
10659: PUSH
10660: LD_EXP 46
10664: AND
10665: IFFALSE 10776
10667: GO 10669
10669: DISABLE
10670: LD_INT 0
10672: PPUSH
10673: PPUSH
10674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10675: LD_ADDR_VAR 0 3
10679: PUSH
10680: LD_INT 22
10682: PUSH
10683: LD_OWVAR 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 25
10694: PUSH
10695: LD_INT 1
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 69
10710: ST_TO_ADDR
// if not tmp then
10711: LD_VAR 0 3
10715: NOT
10716: IFFALSE 10720
// exit ;
10718: GO 10776
// un := tmp [ rand ( 1 , tmp ) ] ;
10720: LD_ADDR_VAR 0 2
10724: PUSH
10725: LD_VAR 0 3
10729: PUSH
10730: LD_INT 1
10732: PPUSH
10733: LD_VAR 0 3
10737: PPUSH
10738: CALL_OW 12
10742: ARRAY
10743: ST_TO_ADDR
// if Crawls ( un ) then
10744: LD_VAR 0 2
10748: PPUSH
10749: CALL_OW 318
10753: IFFALSE 10764
// ComWalk ( un ) ;
10755: LD_VAR 0 2
10759: PPUSH
10760: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10764: LD_VAR 0 2
10768: PPUSH
10769: LD_INT 5
10771: PPUSH
10772: CALL_OW 336
// end ;
10776: PPOPN 3
10778: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10779: LD_EXP 29
10783: PUSH
10784: LD_EXP 47
10788: AND
10789: PUSH
10790: LD_OWVAR 67
10794: PUSH
10795: LD_INT 3
10797: LESS
10798: AND
10799: IFFALSE 10818
10801: GO 10803
10803: DISABLE
// Difficulty := Difficulty + 1 ;
10804: LD_ADDR_OWVAR 67
10808: PUSH
10809: LD_OWVAR 67
10813: PUSH
10814: LD_INT 1
10816: PLUS
10817: ST_TO_ADDR
10818: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10819: LD_EXP 29
10823: PUSH
10824: LD_EXP 48
10828: AND
10829: IFFALSE 10932
10831: GO 10833
10833: DISABLE
10834: LD_INT 0
10836: PPUSH
// begin for i := 1 to 5 do
10837: LD_ADDR_VAR 0 1
10841: PUSH
10842: DOUBLE
10843: LD_INT 1
10845: DEC
10846: ST_TO_ADDR
10847: LD_INT 5
10849: PUSH
10850: FOR_TO
10851: IFFALSE 10930
// begin uc_nation := nation_nature ;
10853: LD_ADDR_OWVAR 21
10857: PUSH
10858: LD_INT 0
10860: ST_TO_ADDR
// uc_side := 0 ;
10861: LD_ADDR_OWVAR 20
10865: PUSH
10866: LD_INT 0
10868: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10869: LD_ADDR_OWVAR 29
10873: PUSH
10874: LD_INT 12
10876: PUSH
10877: LD_INT 12
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: ST_TO_ADDR
// hc_agressivity := 20 ;
10884: LD_ADDR_OWVAR 35
10888: PUSH
10889: LD_INT 20
10891: ST_TO_ADDR
// hc_class := class_tiger ;
10892: LD_ADDR_OWVAR 28
10896: PUSH
10897: LD_INT 14
10899: ST_TO_ADDR
// hc_gallery :=  ;
10900: LD_ADDR_OWVAR 33
10904: PUSH
10905: LD_STRING 
10907: ST_TO_ADDR
// hc_name :=  ;
10908: LD_ADDR_OWVAR 26
10912: PUSH
10913: LD_STRING 
10915: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10916: CALL_OW 44
10920: PPUSH
10921: LD_INT 0
10923: PPUSH
10924: CALL_OW 51
// end ;
10928: GO 10850
10930: POP
10931: POP
// end ;
10932: PPOPN 1
10934: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10935: LD_EXP 29
10939: PUSH
10940: LD_EXP 49
10944: AND
10945: IFFALSE 10954
10947: GO 10949
10949: DISABLE
// StreamSibBomb ;
10950: CALL 10955 0 0
10954: END
// export function StreamSibBomb ; var i , x , y ; begin
10955: LD_INT 0
10957: PPUSH
10958: PPUSH
10959: PPUSH
10960: PPUSH
// result := false ;
10961: LD_ADDR_VAR 0 1
10965: PUSH
10966: LD_INT 0
10968: ST_TO_ADDR
// for i := 1 to 16 do
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: DOUBLE
10975: LD_INT 1
10977: DEC
10978: ST_TO_ADDR
10979: LD_INT 16
10981: PUSH
10982: FOR_TO
10983: IFFALSE 11182
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10985: LD_ADDR_VAR 0 3
10989: PUSH
10990: LD_INT 10
10992: PUSH
10993: LD_INT 20
10995: PUSH
10996: LD_INT 30
10998: PUSH
10999: LD_INT 40
11001: PUSH
11002: LD_INT 50
11004: PUSH
11005: LD_INT 60
11007: PUSH
11008: LD_INT 70
11010: PUSH
11011: LD_INT 80
11013: PUSH
11014: LD_INT 90
11016: PUSH
11017: LD_INT 100
11019: PUSH
11020: LD_INT 110
11022: PUSH
11023: LD_INT 120
11025: PUSH
11026: LD_INT 130
11028: PUSH
11029: LD_INT 140
11031: PUSH
11032: LD_INT 150
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 1
11054: PPUSH
11055: LD_INT 15
11057: PPUSH
11058: CALL_OW 12
11062: ARRAY
11063: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11064: LD_ADDR_VAR 0 4
11068: PUSH
11069: LD_INT 10
11071: PUSH
11072: LD_INT 20
11074: PUSH
11075: LD_INT 30
11077: PUSH
11078: LD_INT 40
11080: PUSH
11081: LD_INT 50
11083: PUSH
11084: LD_INT 60
11086: PUSH
11087: LD_INT 70
11089: PUSH
11090: LD_INT 80
11092: PUSH
11093: LD_INT 90
11095: PUSH
11096: LD_INT 100
11098: PUSH
11099: LD_INT 110
11101: PUSH
11102: LD_INT 120
11104: PUSH
11105: LD_INT 130
11107: PUSH
11108: LD_INT 140
11110: PUSH
11111: LD_INT 150
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 1
11133: PPUSH
11134: LD_INT 15
11136: PPUSH
11137: CALL_OW 12
11141: ARRAY
11142: ST_TO_ADDR
// if ValidHex ( x , y ) then
11143: LD_VAR 0 3
11147: PPUSH
11148: LD_VAR 0 4
11152: PPUSH
11153: CALL_OW 488
11157: IFFALSE 11180
// begin result := [ x , y ] ;
11159: LD_ADDR_VAR 0 1
11163: PUSH
11164: LD_VAR 0 3
11168: PUSH
11169: LD_VAR 0 4
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: ST_TO_ADDR
// break ;
11178: GO 11182
// end ; end ;
11180: GO 10982
11182: POP
11183: POP
// if result then
11184: LD_VAR 0 1
11188: IFFALSE 11248
// begin ToLua ( playSibBomb() ) ;
11190: LD_STRING playSibBomb()
11192: PPUSH
11193: CALL_OW 559
// wait ( 0 0$14 ) ;
11197: LD_INT 490
11199: PPUSH
11200: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11204: LD_VAR 0 1
11208: PUSH
11209: LD_INT 1
11211: ARRAY
11212: PPUSH
11213: LD_VAR 0 1
11217: PUSH
11218: LD_INT 2
11220: ARRAY
11221: PPUSH
11222: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11226: LD_VAR 0 1
11230: PUSH
11231: LD_INT 1
11233: ARRAY
11234: PPUSH
11235: LD_VAR 0 1
11239: PUSH
11240: LD_INT 2
11242: ARRAY
11243: PPUSH
11244: CALL_OW 429
// end ; end ;
11248: LD_VAR 0 1
11252: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11253: LD_EXP 29
11257: PUSH
11258: LD_EXP 51
11262: AND
11263: IFFALSE 11275
11265: GO 11267
11267: DISABLE
// YouLost (  ) ;
11268: LD_STRING 
11270: PPUSH
11271: CALL_OW 104
11275: END
// every 0 0$1 trigger StreamModeActive and sFog do
11276: LD_EXP 29
11280: PUSH
11281: LD_EXP 50
11285: AND
11286: IFFALSE 11300
11288: GO 11290
11290: DISABLE
// FogOff ( your_side ) ;
11291: LD_OWVAR 2
11295: PPUSH
11296: CALL_OW 344
11300: END
// every 0 0$1 trigger StreamModeActive and sSun do
11301: LD_EXP 29
11305: PUSH
11306: LD_EXP 52
11310: AND
11311: IFFALSE 11339
11313: GO 11315
11315: DISABLE
// begin solar_recharge_percent := 0 ;
11316: LD_ADDR_OWVAR 79
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11324: LD_INT 10500
11326: PPUSH
11327: CALL_OW 67
// solar_recharge_percent := 100 ;
11331: LD_ADDR_OWVAR 79
11335: PUSH
11336: LD_INT 100
11338: ST_TO_ADDR
// end ;
11339: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11340: LD_EXP 29
11344: PUSH
11345: LD_EXP 53
11349: AND
11350: IFFALSE 11589
11352: GO 11354
11354: DISABLE
11355: LD_INT 0
11357: PPUSH
11358: PPUSH
11359: PPUSH
// begin tmp := [ ] ;
11360: LD_ADDR_VAR 0 3
11364: PUSH
11365: EMPTY
11366: ST_TO_ADDR
// for i := 1 to 6 do
11367: LD_ADDR_VAR 0 1
11371: PUSH
11372: DOUBLE
11373: LD_INT 1
11375: DEC
11376: ST_TO_ADDR
11377: LD_INT 6
11379: PUSH
11380: FOR_TO
11381: IFFALSE 11486
// begin uc_nation := nation_nature ;
11383: LD_ADDR_OWVAR 21
11387: PUSH
11388: LD_INT 0
11390: ST_TO_ADDR
// uc_side := 0 ;
11391: LD_ADDR_OWVAR 20
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11399: LD_ADDR_OWVAR 29
11403: PUSH
11404: LD_INT 12
11406: PUSH
11407: LD_INT 12
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: ST_TO_ADDR
// hc_agressivity := 20 ;
11414: LD_ADDR_OWVAR 35
11418: PUSH
11419: LD_INT 20
11421: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11422: LD_ADDR_OWVAR 28
11426: PUSH
11427: LD_INT 17
11429: ST_TO_ADDR
// hc_gallery :=  ;
11430: LD_ADDR_OWVAR 33
11434: PUSH
11435: LD_STRING 
11437: ST_TO_ADDR
// hc_name :=  ;
11438: LD_ADDR_OWVAR 26
11442: PUSH
11443: LD_STRING 
11445: ST_TO_ADDR
// un := CreateHuman ;
11446: LD_ADDR_VAR 0 2
11450: PUSH
11451: CALL_OW 44
11455: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11456: LD_VAR 0 2
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL_OW 51
// tmp := tmp ^ un ;
11468: LD_ADDR_VAR 0 3
11472: PUSH
11473: LD_VAR 0 3
11477: PUSH
11478: LD_VAR 0 2
11482: ADD
11483: ST_TO_ADDR
// end ;
11484: GO 11380
11486: POP
11487: POP
// repeat wait ( 0 0$1 ) ;
11488: LD_INT 35
11490: PPUSH
11491: CALL_OW 67
// for un in tmp do
11495: LD_ADDR_VAR 0 2
11499: PUSH
11500: LD_VAR 0 3
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11580
// begin if IsDead ( un ) then
11508: LD_VAR 0 2
11512: PPUSH
11513: CALL_OW 301
11517: IFFALSE 11537
// begin tmp := tmp diff un ;
11519: LD_ADDR_VAR 0 3
11523: PUSH
11524: LD_VAR 0 3
11528: PUSH
11529: LD_VAR 0 2
11533: DIFF
11534: ST_TO_ADDR
// continue ;
11535: GO 11505
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11537: LD_VAR 0 2
11541: PPUSH
11542: LD_INT 3
11544: PUSH
11545: LD_INT 22
11547: PUSH
11548: LD_INT 0
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PPUSH
11559: CALL_OW 69
11563: PPUSH
11564: LD_VAR 0 2
11568: PPUSH
11569: CALL_OW 74
11573: PPUSH
11574: CALL_OW 115
// end ;
11578: GO 11505
11580: POP
11581: POP
// until not tmp ;
11582: LD_VAR 0 3
11586: NOT
11587: IFFALSE 11488
// end ;
11589: PPOPN 3
11591: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11592: LD_EXP 29
11596: PUSH
11597: LD_EXP 54
11601: AND
11602: IFFALSE 11656
11604: GO 11606
11606: DISABLE
// begin ToLua ( displayTroll(); ) ;
11607: LD_STRING displayTroll();
11609: PPUSH
11610: CALL_OW 559
// wait ( 3 3$00 ) ;
11614: LD_INT 6300
11616: PPUSH
11617: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11621: LD_STRING hideTroll();
11623: PPUSH
11624: CALL_OW 559
// wait ( 1 1$00 ) ;
11628: LD_INT 2100
11630: PPUSH
11631: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11635: LD_STRING displayTroll();
11637: PPUSH
11638: CALL_OW 559
// wait ( 1 1$00 ) ;
11642: LD_INT 2100
11644: PPUSH
11645: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11649: LD_STRING hideTroll();
11651: PPUSH
11652: CALL_OW 559
// end ;
11656: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11657: LD_EXP 29
11661: PUSH
11662: LD_EXP 55
11666: AND
11667: IFFALSE 11730
11669: GO 11671
11671: DISABLE
11672: LD_INT 0
11674: PPUSH
// begin p := 0 ;
11675: LD_ADDR_VAR 0 1
11679: PUSH
11680: LD_INT 0
11682: ST_TO_ADDR
// repeat game_speed := 1 ;
11683: LD_ADDR_OWVAR 65
11687: PUSH
11688: LD_INT 1
11690: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11691: LD_INT 35
11693: PPUSH
11694: CALL_OW 67
// p := p + 1 ;
11698: LD_ADDR_VAR 0 1
11702: PUSH
11703: LD_VAR 0 1
11707: PUSH
11708: LD_INT 1
11710: PLUS
11711: ST_TO_ADDR
// until p >= 60 ;
11712: LD_VAR 0 1
11716: PUSH
11717: LD_INT 60
11719: GREATEREQUAL
11720: IFFALSE 11683
// game_speed := 4 ;
11722: LD_ADDR_OWVAR 65
11726: PUSH
11727: LD_INT 4
11729: ST_TO_ADDR
// end ;
11730: PPOPN 1
11732: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11733: LD_EXP 29
11737: PUSH
11738: LD_EXP 56
11742: AND
11743: IFFALSE 11889
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11752: LD_ADDR_VAR 0 1
11756: PUSH
11757: LD_INT 22
11759: PUSH
11760: LD_OWVAR 2
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 2
11771: PUSH
11772: LD_INT 30
11774: PUSH
11775: LD_INT 0
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 30
11784: PUSH
11785: LD_INT 1
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PPUSH
11801: CALL_OW 69
11805: ST_TO_ADDR
// if not depot then
11806: LD_VAR 0 1
11810: NOT
11811: IFFALSE 11815
// exit ;
11813: GO 11889
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11815: LD_ADDR_VAR 0 2
11819: PUSH
11820: LD_VAR 0 1
11824: PUSH
11825: LD_INT 1
11827: PPUSH
11828: LD_VAR 0 1
11832: PPUSH
11833: CALL_OW 12
11837: ARRAY
11838: PPUSH
11839: CALL_OW 274
11843: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11844: LD_VAR 0 2
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: LD_INT 0
11854: PPUSH
11855: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11859: LD_VAR 0 2
11863: PPUSH
11864: LD_INT 2
11866: PPUSH
11867: LD_INT 0
11869: PPUSH
11870: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11874: LD_VAR 0 2
11878: PPUSH
11879: LD_INT 3
11881: PPUSH
11882: LD_INT 0
11884: PPUSH
11885: CALL_OW 277
// end ;
11889: PPOPN 2
11891: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11892: LD_EXP 29
11896: PUSH
11897: LD_EXP 57
11901: AND
11902: IFFALSE 11999
11904: GO 11906
11906: DISABLE
11907: LD_INT 0
11909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11910: LD_ADDR_VAR 0 1
11914: PUSH
11915: LD_INT 22
11917: PUSH
11918: LD_OWVAR 2
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 21
11929: PUSH
11930: LD_INT 1
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 3
11939: PUSH
11940: LD_INT 23
11942: PUSH
11943: LD_INT 0
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PPUSH
11959: CALL_OW 69
11963: ST_TO_ADDR
// if not tmp then
11964: LD_VAR 0 1
11968: NOT
11969: IFFALSE 11973
// exit ;
11971: GO 11999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11973: LD_VAR 0 1
11977: PUSH
11978: LD_INT 1
11980: PPUSH
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 12
11990: ARRAY
11991: PPUSH
11992: LD_INT 200
11994: PPUSH
11995: CALL_OW 234
// end ;
11999: PPOPN 1
12001: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12002: LD_EXP 29
12006: PUSH
12007: LD_EXP 58
12011: AND
12012: IFFALSE 12091
12014: GO 12016
12016: DISABLE
12017: LD_INT 0
12019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12020: LD_ADDR_VAR 0 1
12024: PUSH
12025: LD_INT 22
12027: PUSH
12028: LD_OWVAR 2
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 21
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: ST_TO_ADDR
// if not tmp then
12056: LD_VAR 0 1
12060: NOT
12061: IFFALSE 12065
// exit ;
12063: GO 12091
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12065: LD_VAR 0 1
12069: PUSH
12070: LD_INT 1
12072: PPUSH
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 12
12082: ARRAY
12083: PPUSH
12084: LD_INT 60
12086: PPUSH
12087: CALL_OW 234
// end ;
12091: PPOPN 1
12093: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12094: LD_EXP 29
12098: PUSH
12099: LD_EXP 59
12103: AND
12104: IFFALSE 12203
12106: GO 12108
12108: DISABLE
12109: LD_INT 0
12111: PPUSH
12112: PPUSH
// begin enable ;
12113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12114: LD_ADDR_VAR 0 1
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_OWVAR 2
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 61
12133: PUSH
12134: EMPTY
12135: LIST
12136: PUSH
12137: LD_INT 33
12139: PUSH
12140: LD_INT 2
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: PPUSH
12152: CALL_OW 69
12156: ST_TO_ADDR
// if not tmp then
12157: LD_VAR 0 1
12161: NOT
12162: IFFALSE 12166
// exit ;
12164: GO 12203
// for i in tmp do
12166: LD_ADDR_VAR 0 2
12170: PUSH
12171: LD_VAR 0 1
12175: PUSH
12176: FOR_IN
12177: IFFALSE 12201
// if IsControledBy ( i ) then
12179: LD_VAR 0 2
12183: PPUSH
12184: CALL_OW 312
12188: IFFALSE 12199
// ComUnlink ( i ) ;
12190: LD_VAR 0 2
12194: PPUSH
12195: CALL_OW 136
12199: GO 12176
12201: POP
12202: POP
// end ;
12203: PPOPN 2
12205: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12206: LD_EXP 29
12210: PUSH
12211: LD_EXP 60
12215: AND
12216: IFFALSE 12356
12218: GO 12220
12220: DISABLE
12221: LD_INT 0
12223: PPUSH
12224: PPUSH
// begin ToLua ( displayPowell(); ) ;
12225: LD_STRING displayPowell();
12227: PPUSH
12228: CALL_OW 559
// uc_side := 0 ;
12232: LD_ADDR_OWVAR 20
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// uc_nation := 2 ;
12240: LD_ADDR_OWVAR 21
12244: PUSH
12245: LD_INT 2
12247: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12248: LD_ADDR_OWVAR 37
12252: PUSH
12253: LD_INT 14
12255: ST_TO_ADDR
// vc_engine := engine_siberite ;
12256: LD_ADDR_OWVAR 39
12260: PUSH
12261: LD_INT 3
12263: ST_TO_ADDR
// vc_control := control_apeman ;
12264: LD_ADDR_OWVAR 38
12268: PUSH
12269: LD_INT 5
12271: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12272: LD_ADDR_OWVAR 40
12276: PUSH
12277: LD_INT 29
12279: ST_TO_ADDR
// un := CreateVehicle ;
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: CALL_OW 45
12289: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12290: LD_VAR 0 2
12294: PPUSH
12295: LD_INT 1
12297: PPUSH
12298: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12302: LD_INT 35
12304: PPUSH
12305: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12309: LD_VAR 0 2
12313: PPUSH
12314: LD_INT 22
12316: PUSH
12317: LD_OWVAR 2
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 69
12330: PPUSH
12331: LD_VAR 0 2
12335: PPUSH
12336: CALL_OW 74
12340: PPUSH
12341: CALL_OW 115
// until IsDead ( un ) ;
12345: LD_VAR 0 2
12349: PPUSH
12350: CALL_OW 301
12354: IFFALSE 12302
// end ;
12356: PPOPN 2
12358: END
// every 0 0$1 trigger StreamModeActive and sStu do
12359: LD_EXP 29
12363: PUSH
12364: LD_EXP 68
12368: AND
12369: IFFALSE 12385
12371: GO 12373
12373: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12374: LD_STRING displayStucuk();
12376: PPUSH
12377: CALL_OW 559
// ResetFog ;
12381: CALL_OW 335
// end ;
12385: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12386: LD_EXP 29
12390: PUSH
12391: LD_EXP 61
12395: AND
12396: IFFALSE 12537
12398: GO 12400
12400: DISABLE
12401: LD_INT 0
12403: PPUSH
12404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12405: LD_ADDR_VAR 0 2
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: LD_OWVAR 2
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 21
12424: PUSH
12425: LD_INT 1
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PPUSH
12436: CALL_OW 69
12440: ST_TO_ADDR
// if not tmp then
12441: LD_VAR 0 2
12445: NOT
12446: IFFALSE 12450
// exit ;
12448: GO 12537
// un := tmp [ rand ( 1 , tmp ) ] ;
12450: LD_ADDR_VAR 0 1
12454: PUSH
12455: LD_VAR 0 2
12459: PUSH
12460: LD_INT 1
12462: PPUSH
12463: LD_VAR 0 2
12467: PPUSH
12468: CALL_OW 12
12472: ARRAY
12473: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12474: LD_VAR 0 1
12478: PPUSH
12479: LD_INT 0
12481: PPUSH
12482: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12486: LD_VAR 0 1
12490: PPUSH
12491: LD_OWVAR 3
12495: PUSH
12496: LD_VAR 0 1
12500: DIFF
12501: PPUSH
12502: LD_VAR 0 1
12506: PPUSH
12507: CALL_OW 74
12511: PPUSH
12512: CALL_OW 115
// wait ( 0 0$20 ) ;
12516: LD_INT 700
12518: PPUSH
12519: CALL_OW 67
// SetSide ( un , your_side ) ;
12523: LD_VAR 0 1
12527: PPUSH
12528: LD_OWVAR 2
12532: PPUSH
12533: CALL_OW 235
// end ;
12537: PPOPN 2
12539: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12540: LD_EXP 29
12544: PUSH
12545: LD_EXP 62
12549: AND
12550: IFFALSE 12656
12552: GO 12554
12554: DISABLE
12555: LD_INT 0
12557: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12558: LD_ADDR_VAR 0 1
12562: PUSH
12563: LD_INT 22
12565: PUSH
12566: LD_OWVAR 2
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: LD_INT 30
12580: PUSH
12581: LD_INT 0
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 30
12590: PUSH
12591: LD_INT 1
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 69
12611: ST_TO_ADDR
// if not depot then
12612: LD_VAR 0 1
12616: NOT
12617: IFFALSE 12621
// exit ;
12619: GO 12656
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12621: LD_VAR 0 1
12625: PUSH
12626: LD_INT 1
12628: ARRAY
12629: PPUSH
12630: CALL_OW 250
12634: PPUSH
12635: LD_VAR 0 1
12639: PUSH
12640: LD_INT 1
12642: ARRAY
12643: PPUSH
12644: CALL_OW 251
12648: PPUSH
12649: LD_INT 70
12651: PPUSH
12652: CALL_OW 495
// end ;
12656: PPOPN 1
12658: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12659: LD_EXP 29
12663: PUSH
12664: LD_EXP 63
12668: AND
12669: IFFALSE 12880
12671: GO 12673
12673: DISABLE
12674: LD_INT 0
12676: PPUSH
12677: PPUSH
12678: PPUSH
12679: PPUSH
12680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12681: LD_ADDR_VAR 0 5
12685: PUSH
12686: LD_INT 22
12688: PUSH
12689: LD_OWVAR 2
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 21
12700: PUSH
12701: LD_INT 1
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PPUSH
12712: CALL_OW 69
12716: ST_TO_ADDR
// if not tmp then
12717: LD_VAR 0 5
12721: NOT
12722: IFFALSE 12726
// exit ;
12724: GO 12880
// for i in tmp do
12726: LD_ADDR_VAR 0 1
12730: PUSH
12731: LD_VAR 0 5
12735: PUSH
12736: FOR_IN
12737: IFFALSE 12878
// begin d := rand ( 0 , 5 ) ;
12739: LD_ADDR_VAR 0 4
12743: PUSH
12744: LD_INT 0
12746: PPUSH
12747: LD_INT 5
12749: PPUSH
12750: CALL_OW 12
12754: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12755: LD_ADDR_VAR 0 2
12759: PUSH
12760: LD_VAR 0 1
12764: PPUSH
12765: CALL_OW 250
12769: PPUSH
12770: LD_VAR 0 4
12774: PPUSH
12775: LD_INT 3
12777: PPUSH
12778: LD_INT 12
12780: PPUSH
12781: CALL_OW 12
12785: PPUSH
12786: CALL_OW 272
12790: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12791: LD_ADDR_VAR 0 3
12795: PUSH
12796: LD_VAR 0 1
12800: PPUSH
12801: CALL_OW 251
12805: PPUSH
12806: LD_VAR 0 4
12810: PPUSH
12811: LD_INT 3
12813: PPUSH
12814: LD_INT 12
12816: PPUSH
12817: CALL_OW 12
12821: PPUSH
12822: CALL_OW 273
12826: ST_TO_ADDR
// if ValidHex ( x , y ) then
12827: LD_VAR 0 2
12831: PPUSH
12832: LD_VAR 0 3
12836: PPUSH
12837: CALL_OW 488
12841: IFFALSE 12876
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12843: LD_VAR 0 1
12847: PPUSH
12848: LD_VAR 0 2
12852: PPUSH
12853: LD_VAR 0 3
12857: PPUSH
12858: LD_INT 3
12860: PPUSH
12861: LD_INT 6
12863: PPUSH
12864: CALL_OW 12
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 483
// end ;
12876: GO 12736
12878: POP
12879: POP
// end ;
12880: PPOPN 5
12882: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12883: LD_EXP 29
12887: PUSH
12888: LD_EXP 64
12892: AND
12893: IFFALSE 12987
12895: GO 12897
12897: DISABLE
12898: LD_INT 0
12900: PPUSH
12901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12902: LD_ADDR_VAR 0 2
12906: PUSH
12907: LD_INT 22
12909: PUSH
12910: LD_OWVAR 2
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 32
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 21
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: ST_TO_ADDR
// if not tmp then
12949: LD_VAR 0 2
12953: NOT
12954: IFFALSE 12958
// exit ;
12956: GO 12987
// for i in tmp do
12958: LD_ADDR_VAR 0 1
12962: PUSH
12963: LD_VAR 0 2
12967: PUSH
12968: FOR_IN
12969: IFFALSE 12985
// SetFuel ( i , 0 ) ;
12971: LD_VAR 0 1
12975: PPUSH
12976: LD_INT 0
12978: PPUSH
12979: CALL_OW 240
12983: GO 12968
12985: POP
12986: POP
// end ;
12987: PPOPN 2
12989: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12990: LD_EXP 29
12994: PUSH
12995: LD_EXP 65
12999: AND
13000: IFFALSE 13066
13002: GO 13004
13004: DISABLE
13005: LD_INT 0
13007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13008: LD_ADDR_VAR 0 1
13012: PUSH
13013: LD_INT 22
13015: PUSH
13016: LD_OWVAR 2
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 30
13027: PUSH
13028: LD_INT 29
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PPUSH
13039: CALL_OW 69
13043: ST_TO_ADDR
// if not tmp then
13044: LD_VAR 0 1
13048: NOT
13049: IFFALSE 13053
// exit ;
13051: GO 13066
// DestroyUnit ( tmp [ 1 ] ) ;
13053: LD_VAR 0 1
13057: PUSH
13058: LD_INT 1
13060: ARRAY
13061: PPUSH
13062: CALL_OW 65
// end ;
13066: PPOPN 1
13068: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13069: LD_EXP 29
13073: PUSH
13074: LD_EXP 67
13078: AND
13079: IFFALSE 13208
13081: GO 13083
13083: DISABLE
13084: LD_INT 0
13086: PPUSH
// begin uc_side := 0 ;
13087: LD_ADDR_OWVAR 20
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// uc_nation := nation_arabian ;
13095: LD_ADDR_OWVAR 21
13099: PUSH
13100: LD_INT 2
13102: ST_TO_ADDR
// hc_gallery :=  ;
13103: LD_ADDR_OWVAR 33
13107: PUSH
13108: LD_STRING 
13110: ST_TO_ADDR
// hc_name :=  ;
13111: LD_ADDR_OWVAR 26
13115: PUSH
13116: LD_STRING 
13118: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13119: LD_INT 1
13121: PPUSH
13122: LD_INT 11
13124: PPUSH
13125: LD_INT 10
13127: PPUSH
13128: CALL_OW 380
// un := CreateHuman ;
13132: LD_ADDR_VAR 0 1
13136: PUSH
13137: CALL_OW 44
13141: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13142: LD_VAR 0 1
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13154: LD_INT 35
13156: PPUSH
13157: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13161: LD_VAR 0 1
13165: PPUSH
13166: LD_INT 22
13168: PUSH
13169: LD_OWVAR 2
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PPUSH
13178: CALL_OW 69
13182: PPUSH
13183: LD_VAR 0 1
13187: PPUSH
13188: CALL_OW 74
13192: PPUSH
13193: CALL_OW 115
// until IsDead ( un ) ;
13197: LD_VAR 0 1
13201: PPUSH
13202: CALL_OW 301
13206: IFFALSE 13154
// end ;
13208: PPOPN 1
13210: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13211: LD_EXP 29
13215: PUSH
13216: LD_EXP 69
13220: AND
13221: IFFALSE 13233
13223: GO 13225
13225: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13226: LD_STRING earthquake(getX(game), 0, 32)
13228: PPUSH
13229: CALL_OW 559
13233: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13234: LD_EXP 29
13238: PUSH
13239: LD_EXP 70
13243: AND
13244: IFFALSE 13335
13246: GO 13248
13248: DISABLE
13249: LD_INT 0
13251: PPUSH
// begin enable ;
13252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13253: LD_ADDR_VAR 0 1
13257: PUSH
13258: LD_INT 22
13260: PUSH
13261: LD_OWVAR 2
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 2
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 33
13282: PUSH
13283: LD_INT 3
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: LIST
13294: PPUSH
13295: CALL_OW 69
13299: ST_TO_ADDR
// if not tmp then
13300: LD_VAR 0 1
13304: NOT
13305: IFFALSE 13309
// exit ;
13307: GO 13335
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13309: LD_VAR 0 1
13313: PUSH
13314: LD_INT 1
13316: PPUSH
13317: LD_VAR 0 1
13321: PPUSH
13322: CALL_OW 12
13326: ARRAY
13327: PPUSH
13328: LD_INT 1
13330: PPUSH
13331: CALL_OW 234
// end ;
13335: PPOPN 1
13337: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13338: LD_EXP 29
13342: PUSH
13343: LD_EXP 71
13347: AND
13348: IFFALSE 13489
13350: GO 13352
13352: DISABLE
13353: LD_INT 0
13355: PPUSH
13356: PPUSH
13357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13358: LD_ADDR_VAR 0 3
13362: PUSH
13363: LD_INT 22
13365: PUSH
13366: LD_OWVAR 2
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: ST_TO_ADDR
// if not tmp then
13394: LD_VAR 0 3
13398: NOT
13399: IFFALSE 13403
// exit ;
13401: GO 13489
// un := tmp [ rand ( 1 , tmp ) ] ;
13403: LD_ADDR_VAR 0 2
13407: PUSH
13408: LD_VAR 0 3
13412: PUSH
13413: LD_INT 1
13415: PPUSH
13416: LD_VAR 0 3
13420: PPUSH
13421: CALL_OW 12
13425: ARRAY
13426: ST_TO_ADDR
// if Crawls ( un ) then
13427: LD_VAR 0 2
13431: PPUSH
13432: CALL_OW 318
13436: IFFALSE 13447
// ComWalk ( un ) ;
13438: LD_VAR 0 2
13442: PPUSH
13443: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13447: LD_VAR 0 2
13451: PPUSH
13452: LD_INT 9
13454: PPUSH
13455: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13459: LD_INT 28
13461: PPUSH
13462: LD_OWVAR 2
13466: PPUSH
13467: LD_INT 2
13469: PPUSH
13470: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13474: LD_INT 29
13476: PPUSH
13477: LD_OWVAR 2
13481: PPUSH
13482: LD_INT 2
13484: PPUSH
13485: CALL_OW 322
// end ;
13489: PPOPN 3
13491: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13492: LD_EXP 29
13496: PUSH
13497: LD_EXP 72
13501: AND
13502: IFFALSE 13613
13504: GO 13506
13506: DISABLE
13507: LD_INT 0
13509: PPUSH
13510: PPUSH
13511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13512: LD_ADDR_VAR 0 3
13516: PUSH
13517: LD_INT 22
13519: PUSH
13520: LD_OWVAR 2
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 25
13531: PUSH
13532: LD_INT 1
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 69
13547: ST_TO_ADDR
// if not tmp then
13548: LD_VAR 0 3
13552: NOT
13553: IFFALSE 13557
// exit ;
13555: GO 13613
// un := tmp [ rand ( 1 , tmp ) ] ;
13557: LD_ADDR_VAR 0 2
13561: PUSH
13562: LD_VAR 0 3
13566: PUSH
13567: LD_INT 1
13569: PPUSH
13570: LD_VAR 0 3
13574: PPUSH
13575: CALL_OW 12
13579: ARRAY
13580: ST_TO_ADDR
// if Crawls ( un ) then
13581: LD_VAR 0 2
13585: PPUSH
13586: CALL_OW 318
13590: IFFALSE 13601
// ComWalk ( un ) ;
13592: LD_VAR 0 2
13596: PPUSH
13597: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13601: LD_VAR 0 2
13605: PPUSH
13606: LD_INT 8
13608: PPUSH
13609: CALL_OW 336
// end ;
13613: PPOPN 3
13615: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13616: LD_EXP 29
13620: PUSH
13621: LD_EXP 73
13625: AND
13626: IFFALSE 13770
13628: GO 13630
13630: DISABLE
13631: LD_INT 0
13633: PPUSH
13634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13635: LD_ADDR_VAR 0 2
13639: PUSH
13640: LD_INT 22
13642: PUSH
13643: LD_OWVAR 2
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 21
13654: PUSH
13655: LD_INT 2
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 2
13664: PUSH
13665: LD_INT 34
13667: PUSH
13668: LD_INT 12
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 34
13677: PUSH
13678: LD_INT 51
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 34
13687: PUSH
13688: LD_INT 32
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: ST_TO_ADDR
// if not tmp then
13711: LD_VAR 0 2
13715: NOT
13716: IFFALSE 13720
// exit ;
13718: GO 13770
// for i in tmp do
13720: LD_ADDR_VAR 0 1
13724: PUSH
13725: LD_VAR 0 2
13729: PUSH
13730: FOR_IN
13731: IFFALSE 13768
// if GetCargo ( i , mat_artifact ) = 0 then
13733: LD_VAR 0 1
13737: PPUSH
13738: LD_INT 4
13740: PPUSH
13741: CALL_OW 289
13745: PUSH
13746: LD_INT 0
13748: EQUAL
13749: IFFALSE 13766
// SetCargo ( i , mat_siberit , 100 ) ;
13751: LD_VAR 0 1
13755: PPUSH
13756: LD_INT 3
13758: PPUSH
13759: LD_INT 100
13761: PPUSH
13762: CALL_OW 290
13766: GO 13730
13768: POP
13769: POP
// end ;
13770: PPOPN 2
13772: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13773: LD_EXP 29
13777: PUSH
13778: LD_EXP 74
13782: AND
13783: IFFALSE 13966
13785: GO 13787
13787: DISABLE
13788: LD_INT 0
13790: PPUSH
13791: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13792: LD_ADDR_VAR 0 2
13796: PUSH
13797: LD_INT 22
13799: PUSH
13800: LD_OWVAR 2
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PPUSH
13809: CALL_OW 69
13813: ST_TO_ADDR
// if not tmp then
13814: LD_VAR 0 2
13818: NOT
13819: IFFALSE 13823
// exit ;
13821: GO 13966
// for i := 1 to 2 do
13823: LD_ADDR_VAR 0 1
13827: PUSH
13828: DOUBLE
13829: LD_INT 1
13831: DEC
13832: ST_TO_ADDR
13833: LD_INT 2
13835: PUSH
13836: FOR_TO
13837: IFFALSE 13964
// begin uc_side := your_side ;
13839: LD_ADDR_OWVAR 20
13843: PUSH
13844: LD_OWVAR 2
13848: ST_TO_ADDR
// uc_nation := nation_american ;
13849: LD_ADDR_OWVAR 21
13853: PUSH
13854: LD_INT 1
13856: ST_TO_ADDR
// vc_chassis := us_morphling ;
13857: LD_ADDR_OWVAR 37
13861: PUSH
13862: LD_INT 5
13864: ST_TO_ADDR
// vc_engine := engine_siberite ;
13865: LD_ADDR_OWVAR 39
13869: PUSH
13870: LD_INT 3
13872: ST_TO_ADDR
// vc_control := control_computer ;
13873: LD_ADDR_OWVAR 38
13877: PUSH
13878: LD_INT 3
13880: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13881: LD_ADDR_OWVAR 40
13885: PUSH
13886: LD_INT 10
13888: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13889: LD_VAR 0 2
13893: PUSH
13894: LD_INT 1
13896: ARRAY
13897: PPUSH
13898: CALL_OW 310
13902: NOT
13903: IFFALSE 13950
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
13905: CALL_OW 45
13909: PPUSH
13910: LD_VAR 0 2
13914: PUSH
13915: LD_INT 1
13917: ARRAY
13918: PPUSH
13919: CALL_OW 250
13923: PPUSH
13924: LD_VAR 0 2
13928: PUSH
13929: LD_INT 1
13931: ARRAY
13932: PPUSH
13933: CALL_OW 251
13937: PPUSH
13938: LD_INT 12
13940: PPUSH
13941: LD_INT 1
13943: PPUSH
13944: CALL_OW 50
13948: GO 13962
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
13950: CALL_OW 45
13954: PPUSH
13955: LD_INT 1
13957: PPUSH
13958: CALL_OW 51
// end ;
13962: GO 13836
13964: POP
13965: POP
// end ;
13966: PPOPN 2
13968: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13969: LD_EXP 29
13973: PUSH
13974: LD_EXP 75
13978: AND
13979: IFFALSE 14201
13981: GO 13983
13983: DISABLE
13984: LD_INT 0
13986: PPUSH
13987: PPUSH
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13992: LD_ADDR_VAR 0 6
13996: PUSH
13997: LD_INT 22
13999: PUSH
14000: LD_OWVAR 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 21
14011: PUSH
14012: LD_INT 1
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 3
14021: PUSH
14022: LD_INT 23
14024: PUSH
14025: LD_INT 0
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 69
14045: ST_TO_ADDR
// if not tmp then
14046: LD_VAR 0 6
14050: NOT
14051: IFFALSE 14055
// exit ;
14053: GO 14201
// s1 := rand ( 1 , 4 ) ;
14055: LD_ADDR_VAR 0 2
14059: PUSH
14060: LD_INT 1
14062: PPUSH
14063: LD_INT 4
14065: PPUSH
14066: CALL_OW 12
14070: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14071: LD_ADDR_VAR 0 4
14075: PUSH
14076: LD_VAR 0 6
14080: PUSH
14081: LD_INT 1
14083: ARRAY
14084: PPUSH
14085: LD_VAR 0 2
14089: PPUSH
14090: CALL_OW 259
14094: ST_TO_ADDR
// if s1 = 1 then
14095: LD_VAR 0 2
14099: PUSH
14100: LD_INT 1
14102: EQUAL
14103: IFFALSE 14123
// s2 := rand ( 2 , 4 ) else
14105: LD_ADDR_VAR 0 3
14109: PUSH
14110: LD_INT 2
14112: PPUSH
14113: LD_INT 4
14115: PPUSH
14116: CALL_OW 12
14120: ST_TO_ADDR
14121: GO 14131
// s2 := 1 ;
14123: LD_ADDR_VAR 0 3
14127: PUSH
14128: LD_INT 1
14130: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14131: LD_ADDR_VAR 0 5
14135: PUSH
14136: LD_VAR 0 6
14140: PUSH
14141: LD_INT 1
14143: ARRAY
14144: PPUSH
14145: LD_VAR 0 3
14149: PPUSH
14150: CALL_OW 259
14154: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14155: LD_VAR 0 6
14159: PUSH
14160: LD_INT 1
14162: ARRAY
14163: PPUSH
14164: LD_VAR 0 2
14168: PPUSH
14169: LD_VAR 0 5
14173: PPUSH
14174: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14178: LD_VAR 0 6
14182: PUSH
14183: LD_INT 1
14185: ARRAY
14186: PPUSH
14187: LD_VAR 0 3
14191: PPUSH
14192: LD_VAR 0 4
14196: PPUSH
14197: CALL_OW 237
// end ;
14201: PPOPN 6
14203: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14204: LD_EXP 29
14208: PUSH
14209: LD_EXP 76
14213: AND
14214: IFFALSE 14293
14216: GO 14218
14218: DISABLE
14219: LD_INT 0
14221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14222: LD_ADDR_VAR 0 1
14226: PUSH
14227: LD_INT 22
14229: PUSH
14230: LD_OWVAR 2
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 30
14241: PUSH
14242: LD_INT 3
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: CALL_OW 69
14257: ST_TO_ADDR
// if not tmp then
14258: LD_VAR 0 1
14262: NOT
14263: IFFALSE 14267
// exit ;
14265: GO 14293
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14267: LD_VAR 0 1
14271: PUSH
14272: LD_INT 1
14274: PPUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 12
14284: ARRAY
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 234
// end ;
14293: PPOPN 1
14295: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14296: LD_EXP 29
14300: PUSH
14301: LD_EXP 77
14305: AND
14306: IFFALSE 14418
14308: GO 14310
14310: DISABLE
14311: LD_INT 0
14313: PPUSH
14314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_INT 22
14322: PUSH
14323: LD_OWVAR 2
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 2
14334: PUSH
14335: LD_INT 30
14337: PUSH
14338: LD_INT 27
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 30
14347: PUSH
14348: LD_INT 26
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 30
14357: PUSH
14358: LD_INT 28
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PPUSH
14375: CALL_OW 69
14379: ST_TO_ADDR
// if not tmp then
14380: LD_VAR 0 2
14384: NOT
14385: IFFALSE 14389
// exit ;
14387: GO 14418
// for i in tmp do
14389: LD_ADDR_VAR 0 1
14393: PUSH
14394: LD_VAR 0 2
14398: PUSH
14399: FOR_IN
14400: IFFALSE 14416
// SetLives ( i , 1 ) ;
14402: LD_VAR 0 1
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: CALL_OW 234
14414: GO 14399
14416: POP
14417: POP
// end ;
14418: PPOPN 2
14420: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14421: LD_EXP 29
14425: PUSH
14426: LD_EXP 78
14430: AND
14431: IFFALSE 14705
14433: GO 14435
14435: DISABLE
14436: LD_INT 0
14438: PPUSH
14439: PPUSH
14440: PPUSH
// begin i := rand ( 1 , 7 ) ;
14441: LD_ADDR_VAR 0 1
14445: PUSH
14446: LD_INT 1
14448: PPUSH
14449: LD_INT 7
14451: PPUSH
14452: CALL_OW 12
14456: ST_TO_ADDR
// case i of 1 :
14457: LD_VAR 0 1
14461: PUSH
14462: LD_INT 1
14464: DOUBLE
14465: EQUAL
14466: IFTRUE 14470
14468: GO 14480
14470: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14471: LD_STRING earthquake(getX(game), 0, 32)
14473: PPUSH
14474: CALL_OW 559
14478: GO 14705
14480: LD_INT 2
14482: DOUBLE
14483: EQUAL
14484: IFTRUE 14488
14486: GO 14502
14488: POP
// begin ToLua ( displayStucuk(); ) ;
14489: LD_STRING displayStucuk();
14491: PPUSH
14492: CALL_OW 559
// ResetFog ;
14496: CALL_OW 335
// end ; 3 :
14500: GO 14705
14502: LD_INT 3
14504: DOUBLE
14505: EQUAL
14506: IFTRUE 14510
14508: GO 14614
14510: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: LD_INT 22
14518: PUSH
14519: LD_OWVAR 2
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 25
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: CALL_OW 69
14546: ST_TO_ADDR
// if not tmp then
14547: LD_VAR 0 2
14551: NOT
14552: IFFALSE 14556
// exit ;
14554: GO 14705
// un := tmp [ rand ( 1 , tmp ) ] ;
14556: LD_ADDR_VAR 0 3
14560: PUSH
14561: LD_VAR 0 2
14565: PUSH
14566: LD_INT 1
14568: PPUSH
14569: LD_VAR 0 2
14573: PPUSH
14574: CALL_OW 12
14578: ARRAY
14579: ST_TO_ADDR
// if Crawls ( un ) then
14580: LD_VAR 0 3
14584: PPUSH
14585: CALL_OW 318
14589: IFFALSE 14600
// ComWalk ( un ) ;
14591: LD_VAR 0 3
14595: PPUSH
14596: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14600: LD_VAR 0 3
14604: PPUSH
14605: LD_INT 8
14607: PPUSH
14608: CALL_OW 336
// end ; 4 :
14612: GO 14705
14614: LD_INT 4
14616: DOUBLE
14617: EQUAL
14618: IFTRUE 14622
14620: GO 14683
14622: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14623: LD_ADDR_VAR 0 2
14627: PUSH
14628: LD_INT 22
14630: PUSH
14631: LD_OWVAR 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 30
14642: PUSH
14643: LD_INT 29
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PPUSH
14654: CALL_OW 69
14658: ST_TO_ADDR
// if not tmp then
14659: LD_VAR 0 2
14663: NOT
14664: IFFALSE 14668
// exit ;
14666: GO 14705
// DestroyUnit ( tmp [ 1 ] ) ;
14668: LD_VAR 0 2
14672: PUSH
14673: LD_INT 1
14675: ARRAY
14676: PPUSH
14677: CALL_OW 65
// end ; 5 .. 7 :
14681: GO 14705
14683: LD_INT 5
14685: DOUBLE
14686: GREATEREQUAL
14687: IFFALSE 14695
14689: LD_INT 7
14691: DOUBLE
14692: LESSEQUAL
14693: IFTRUE 14697
14695: GO 14704
14697: POP
// StreamSibBomb ; end ;
14698: CALL 10955 0 0
14702: GO 14705
14704: POP
// end ;
14705: PPOPN 3
14707: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14708: LD_EXP 29
14712: PUSH
14713: LD_EXP 79
14717: AND
14718: IFFALSE 14874
14720: GO 14722
14722: DISABLE
14723: LD_INT 0
14725: PPUSH
14726: PPUSH
14727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14728: LD_ADDR_VAR 0 2
14732: PUSH
14733: LD_INT 81
14735: PUSH
14736: LD_OWVAR 2
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 21
14760: PUSH
14761: LD_INT 2
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PPUSH
14777: CALL_OW 69
14781: ST_TO_ADDR
// if not tmp then
14782: LD_VAR 0 2
14786: NOT
14787: IFFALSE 14791
// exit ;
14789: GO 14874
// p := 0 ;
14791: LD_ADDR_VAR 0 3
14795: PUSH
14796: LD_INT 0
14798: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14799: LD_INT 35
14801: PPUSH
14802: CALL_OW 67
// p := p + 1 ;
14806: LD_ADDR_VAR 0 3
14810: PUSH
14811: LD_VAR 0 3
14815: PUSH
14816: LD_INT 1
14818: PLUS
14819: ST_TO_ADDR
// for i in tmp do
14820: LD_ADDR_VAR 0 1
14824: PUSH
14825: LD_VAR 0 2
14829: PUSH
14830: FOR_IN
14831: IFFALSE 14862
// if GetLives ( i ) < 1000 then
14833: LD_VAR 0 1
14837: PPUSH
14838: CALL_OW 256
14842: PUSH
14843: LD_INT 1000
14845: LESS
14846: IFFALSE 14860
// SetLives ( i , 1000 ) ;
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_INT 1000
14855: PPUSH
14856: CALL_OW 234
14860: GO 14830
14862: POP
14863: POP
// until p > 20 ;
14864: LD_VAR 0 3
14868: PUSH
14869: LD_INT 20
14871: GREATER
14872: IFFALSE 14799
// end ;
14874: PPOPN 3
14876: END
// every 0 0$1 trigger StreamModeActive and sTime do
14877: LD_EXP 29
14881: PUSH
14882: LD_EXP 80
14886: AND
14887: IFFALSE 14922
14889: GO 14891
14891: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14892: LD_INT 28
14894: PPUSH
14895: LD_OWVAR 2
14899: PPUSH
14900: LD_INT 2
14902: PPUSH
14903: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14907: LD_INT 30
14909: PPUSH
14910: LD_OWVAR 2
14914: PPUSH
14915: LD_INT 2
14917: PPUSH
14918: CALL_OW 322
// end ;
14922: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14923: LD_EXP 29
14927: PUSH
14928: LD_EXP 81
14932: AND
14933: IFFALSE 15054
14935: GO 14937
14937: DISABLE
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14942: LD_ADDR_VAR 0 2
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_OWVAR 2
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 21
14961: PUSH
14962: LD_INT 1
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 3
14971: PUSH
14972: LD_INT 23
14974: PUSH
14975: LD_INT 0
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: PPUSH
14991: CALL_OW 69
14995: ST_TO_ADDR
// if not tmp then
14996: LD_VAR 0 2
15000: NOT
15001: IFFALSE 15005
// exit ;
15003: GO 15054
// for i in tmp do
15005: LD_ADDR_VAR 0 1
15009: PUSH
15010: LD_VAR 0 2
15014: PUSH
15015: FOR_IN
15016: IFFALSE 15052
// begin if Crawls ( i ) then
15018: LD_VAR 0 1
15022: PPUSH
15023: CALL_OW 318
15027: IFFALSE 15038
// ComWalk ( i ) ;
15029: LD_VAR 0 1
15033: PPUSH
15034: CALL_OW 138
// SetClass ( i , 2 ) ;
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_INT 2
15045: PPUSH
15046: CALL_OW 336
// end ;
15050: GO 15015
15052: POP
15053: POP
// end ;
15054: PPOPN 2
15056: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15057: LD_EXP 29
15061: PUSH
15062: LD_EXP 82
15066: AND
15067: IFFALSE 15348
15069: GO 15071
15071: DISABLE
15072: LD_INT 0
15074: PPUSH
15075: PPUSH
15076: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15077: LD_OWVAR 2
15081: PPUSH
15082: LD_INT 9
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: LD_INT 1
15090: PPUSH
15091: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15095: LD_INT 9
15097: PPUSH
15098: LD_OWVAR 2
15102: PPUSH
15103: CALL_OW 343
// uc_side := 9 ;
15107: LD_ADDR_OWVAR 20
15111: PUSH
15112: LD_INT 9
15114: ST_TO_ADDR
// uc_nation := 2 ;
15115: LD_ADDR_OWVAR 21
15119: PUSH
15120: LD_INT 2
15122: ST_TO_ADDR
// hc_name := Dark Warrior ;
15123: LD_ADDR_OWVAR 26
15127: PUSH
15128: LD_STRING Dark Warrior
15130: ST_TO_ADDR
// hc_gallery :=  ;
15131: LD_ADDR_OWVAR 33
15135: PUSH
15136: LD_STRING 
15138: ST_TO_ADDR
// hc_noskilllimit := true ;
15139: LD_ADDR_OWVAR 76
15143: PUSH
15144: LD_INT 1
15146: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15147: LD_ADDR_OWVAR 31
15151: PUSH
15152: LD_INT 30
15154: PUSH
15155: LD_INT 30
15157: PUSH
15158: LD_INT 30
15160: PUSH
15161: LD_INT 30
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// un := CreateHuman ;
15170: LD_ADDR_VAR 0 3
15174: PUSH
15175: CALL_OW 44
15179: ST_TO_ADDR
// hc_noskilllimit := false ;
15180: LD_ADDR_OWVAR 76
15184: PUSH
15185: LD_INT 0
15187: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15188: LD_VAR 0 3
15192: PPUSH
15193: LD_INT 1
15195: PPUSH
15196: CALL_OW 51
// p := 0 ;
15200: LD_ADDR_VAR 0 2
15204: PUSH
15205: LD_INT 0
15207: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15208: LD_INT 35
15210: PPUSH
15211: CALL_OW 67
// p := p + 1 ;
15215: LD_ADDR_VAR 0 2
15219: PUSH
15220: LD_VAR 0 2
15224: PUSH
15225: LD_INT 1
15227: PLUS
15228: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15229: LD_VAR 0 3
15233: PPUSH
15234: CALL_OW 256
15238: PUSH
15239: LD_INT 1000
15241: LESS
15242: IFFALSE 15256
// SetLives ( un , 1000 ) ;
15244: LD_VAR 0 3
15248: PPUSH
15249: LD_INT 1000
15251: PPUSH
15252: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15256: LD_VAR 0 3
15260: PPUSH
15261: LD_INT 81
15263: PUSH
15264: LD_OWVAR 2
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 91
15275: PUSH
15276: LD_VAR 0 3
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PPUSH
15293: CALL_OW 69
15297: PPUSH
15298: LD_VAR 0 3
15302: PPUSH
15303: CALL_OW 74
15307: PPUSH
15308: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15312: LD_VAR 0 2
15316: PUSH
15317: LD_INT 60
15319: GREATER
15320: PUSH
15321: LD_VAR 0 3
15325: PPUSH
15326: CALL_OW 301
15330: OR
15331: IFFALSE 15208
// if un then
15333: LD_VAR 0 3
15337: IFFALSE 15348
// RemoveUnit ( un ) ;
15339: LD_VAR 0 3
15343: PPUSH
15344: CALL_OW 64
// end ;
15348: PPOPN 3
15350: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15351: LD_INT 0
15353: PPUSH
// case cmd of 301 :
15354: LD_VAR 0 1
15358: PUSH
15359: LD_INT 301
15361: DOUBLE
15362: EQUAL
15363: IFTRUE 15367
15365: GO 15399
15367: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15368: LD_VAR 0 6
15372: PPUSH
15373: LD_VAR 0 7
15377: PPUSH
15378: LD_VAR 0 8
15382: PPUSH
15383: LD_VAR 0 4
15387: PPUSH
15388: LD_VAR 0 5
15392: PPUSH
15393: CALL 16600 0 5
15397: GO 15520
15399: LD_INT 302
15401: DOUBLE
15402: EQUAL
15403: IFTRUE 15407
15405: GO 15444
15407: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15408: LD_VAR 0 6
15412: PPUSH
15413: LD_VAR 0 7
15417: PPUSH
15418: LD_VAR 0 8
15422: PPUSH
15423: LD_VAR 0 9
15427: PPUSH
15428: LD_VAR 0 4
15432: PPUSH
15433: LD_VAR 0 5
15437: PPUSH
15438: CALL 16691 0 6
15442: GO 15520
15444: LD_INT 303
15446: DOUBLE
15447: EQUAL
15448: IFTRUE 15452
15450: GO 15489
15452: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15453: LD_VAR 0 6
15457: PPUSH
15458: LD_VAR 0 7
15462: PPUSH
15463: LD_VAR 0 8
15467: PPUSH
15468: LD_VAR 0 9
15472: PPUSH
15473: LD_VAR 0 4
15477: PPUSH
15478: LD_VAR 0 5
15482: PPUSH
15483: CALL 15525 0 6
15487: GO 15520
15489: LD_INT 304
15491: DOUBLE
15492: EQUAL
15493: IFTRUE 15497
15495: GO 15519
15497: POP
// hHackTeleport ( unit , x , y ) ; end ;
15498: LD_VAR 0 2
15502: PPUSH
15503: LD_VAR 0 4
15507: PPUSH
15508: LD_VAR 0 5
15512: PPUSH
15513: CALL 17284 0 3
15517: GO 15520
15519: POP
// end ;
15520: LD_VAR 0 12
15524: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15525: LD_INT 0
15527: PPUSH
15528: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15529: LD_VAR 0 1
15533: PUSH
15534: LD_INT 1
15536: LESS
15537: PUSH
15538: LD_VAR 0 1
15542: PUSH
15543: LD_INT 3
15545: GREATER
15546: OR
15547: PUSH
15548: LD_VAR 0 5
15552: PPUSH
15553: LD_VAR 0 6
15557: PPUSH
15558: CALL_OW 428
15562: OR
15563: IFFALSE 15567
// exit ;
15565: GO 16287
// uc_side := your_side ;
15567: LD_ADDR_OWVAR 20
15571: PUSH
15572: LD_OWVAR 2
15576: ST_TO_ADDR
// uc_nation := nation ;
15577: LD_ADDR_OWVAR 21
15581: PUSH
15582: LD_VAR 0 1
15586: ST_TO_ADDR
// bc_level = 1 ;
15587: LD_ADDR_OWVAR 43
15591: PUSH
15592: LD_INT 1
15594: ST_TO_ADDR
// case btype of 1 :
15595: LD_VAR 0 2
15599: PUSH
15600: LD_INT 1
15602: DOUBLE
15603: EQUAL
15604: IFTRUE 15608
15606: GO 15619
15608: POP
// bc_type := b_depot ; 2 :
15609: LD_ADDR_OWVAR 42
15613: PUSH
15614: LD_INT 0
15616: ST_TO_ADDR
15617: GO 16231
15619: LD_INT 2
15621: DOUBLE
15622: EQUAL
15623: IFTRUE 15627
15625: GO 15638
15627: POP
// bc_type := b_warehouse ; 3 :
15628: LD_ADDR_OWVAR 42
15632: PUSH
15633: LD_INT 1
15635: ST_TO_ADDR
15636: GO 16231
15638: LD_INT 3
15640: DOUBLE
15641: EQUAL
15642: IFTRUE 15646
15644: GO 15657
15646: POP
// bc_type := b_lab ; 4 .. 9 :
15647: LD_ADDR_OWVAR 42
15651: PUSH
15652: LD_INT 6
15654: ST_TO_ADDR
15655: GO 16231
15657: LD_INT 4
15659: DOUBLE
15660: GREATEREQUAL
15661: IFFALSE 15669
15663: LD_INT 9
15665: DOUBLE
15666: LESSEQUAL
15667: IFTRUE 15671
15669: GO 15723
15671: POP
// begin bc_type := b_lab_half ;
15672: LD_ADDR_OWVAR 42
15676: PUSH
15677: LD_INT 7
15679: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15680: LD_ADDR_OWVAR 44
15684: PUSH
15685: LD_INT 10
15687: PUSH
15688: LD_INT 11
15690: PUSH
15691: LD_INT 12
15693: PUSH
15694: LD_INT 15
15696: PUSH
15697: LD_INT 14
15699: PUSH
15700: LD_INT 13
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: PUSH
15711: LD_VAR 0 2
15715: PUSH
15716: LD_INT 3
15718: MINUS
15719: ARRAY
15720: ST_TO_ADDR
// end ; 10 .. 13 :
15721: GO 16231
15723: LD_INT 10
15725: DOUBLE
15726: GREATEREQUAL
15727: IFFALSE 15735
15729: LD_INT 13
15731: DOUBLE
15732: LESSEQUAL
15733: IFTRUE 15737
15735: GO 15814
15737: POP
// begin bc_type := b_lab_full ;
15738: LD_ADDR_OWVAR 42
15742: PUSH
15743: LD_INT 8
15745: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15746: LD_ADDR_OWVAR 44
15750: PUSH
15751: LD_INT 10
15753: PUSH
15754: LD_INT 12
15756: PUSH
15757: LD_INT 14
15759: PUSH
15760: LD_INT 13
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: LD_VAR 0 2
15773: PUSH
15774: LD_INT 9
15776: MINUS
15777: ARRAY
15778: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15779: LD_ADDR_OWVAR 45
15783: PUSH
15784: LD_INT 11
15786: PUSH
15787: LD_INT 15
15789: PUSH
15790: LD_INT 12
15792: PUSH
15793: LD_INT 15
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: PUSH
15802: LD_VAR 0 2
15806: PUSH
15807: LD_INT 9
15809: MINUS
15810: ARRAY
15811: ST_TO_ADDR
// end ; 14 :
15812: GO 16231
15814: LD_INT 14
15816: DOUBLE
15817: EQUAL
15818: IFTRUE 15822
15820: GO 15833
15822: POP
// bc_type := b_workshop ; 15 :
15823: LD_ADDR_OWVAR 42
15827: PUSH
15828: LD_INT 2
15830: ST_TO_ADDR
15831: GO 16231
15833: LD_INT 15
15835: DOUBLE
15836: EQUAL
15837: IFTRUE 15841
15839: GO 15852
15841: POP
// bc_type := b_factory ; 16 :
15842: LD_ADDR_OWVAR 42
15846: PUSH
15847: LD_INT 3
15849: ST_TO_ADDR
15850: GO 16231
15852: LD_INT 16
15854: DOUBLE
15855: EQUAL
15856: IFTRUE 15860
15858: GO 15871
15860: POP
// bc_type := b_ext_gun ; 17 :
15861: LD_ADDR_OWVAR 42
15865: PUSH
15866: LD_INT 17
15868: ST_TO_ADDR
15869: GO 16231
15871: LD_INT 17
15873: DOUBLE
15874: EQUAL
15875: IFTRUE 15879
15877: GO 15907
15879: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15880: LD_ADDR_OWVAR 42
15884: PUSH
15885: LD_INT 19
15887: PUSH
15888: LD_INT 23
15890: PUSH
15891: LD_INT 19
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: PUSH
15899: LD_VAR 0 1
15903: ARRAY
15904: ST_TO_ADDR
15905: GO 16231
15907: LD_INT 18
15909: DOUBLE
15910: EQUAL
15911: IFTRUE 15915
15913: GO 15926
15915: POP
// bc_type := b_ext_radar ; 19 :
15916: LD_ADDR_OWVAR 42
15920: PUSH
15921: LD_INT 20
15923: ST_TO_ADDR
15924: GO 16231
15926: LD_INT 19
15928: DOUBLE
15929: EQUAL
15930: IFTRUE 15934
15932: GO 15945
15934: POP
// bc_type := b_ext_radio ; 20 :
15935: LD_ADDR_OWVAR 42
15939: PUSH
15940: LD_INT 22
15942: ST_TO_ADDR
15943: GO 16231
15945: LD_INT 20
15947: DOUBLE
15948: EQUAL
15949: IFTRUE 15953
15951: GO 15964
15953: POP
// bc_type := b_ext_siberium ; 21 :
15954: LD_ADDR_OWVAR 42
15958: PUSH
15959: LD_INT 21
15961: ST_TO_ADDR
15962: GO 16231
15964: LD_INT 21
15966: DOUBLE
15967: EQUAL
15968: IFTRUE 15972
15970: GO 15983
15972: POP
// bc_type := b_ext_computer ; 22 :
15973: LD_ADDR_OWVAR 42
15977: PUSH
15978: LD_INT 24
15980: ST_TO_ADDR
15981: GO 16231
15983: LD_INT 22
15985: DOUBLE
15986: EQUAL
15987: IFTRUE 15991
15989: GO 16002
15991: POP
// bc_type := b_ext_track ; 23 :
15992: LD_ADDR_OWVAR 42
15996: PUSH
15997: LD_INT 16
15999: ST_TO_ADDR
16000: GO 16231
16002: LD_INT 23
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 16021
16010: POP
// bc_type := b_ext_laser ; 24 :
16011: LD_ADDR_OWVAR 42
16015: PUSH
16016: LD_INT 25
16018: ST_TO_ADDR
16019: GO 16231
16021: LD_INT 24
16023: DOUBLE
16024: EQUAL
16025: IFTRUE 16029
16027: GO 16040
16029: POP
// bc_type := b_control_tower ; 25 :
16030: LD_ADDR_OWVAR 42
16034: PUSH
16035: LD_INT 36
16037: ST_TO_ADDR
16038: GO 16231
16040: LD_INT 25
16042: DOUBLE
16043: EQUAL
16044: IFTRUE 16048
16046: GO 16059
16048: POP
// bc_type := b_breastwork ; 26 :
16049: LD_ADDR_OWVAR 42
16053: PUSH
16054: LD_INT 31
16056: ST_TO_ADDR
16057: GO 16231
16059: LD_INT 26
16061: DOUBLE
16062: EQUAL
16063: IFTRUE 16067
16065: GO 16078
16067: POP
// bc_type := b_bunker ; 27 :
16068: LD_ADDR_OWVAR 42
16072: PUSH
16073: LD_INT 32
16075: ST_TO_ADDR
16076: GO 16231
16078: LD_INT 27
16080: DOUBLE
16081: EQUAL
16082: IFTRUE 16086
16084: GO 16097
16086: POP
// bc_type := b_turret ; 28 :
16087: LD_ADDR_OWVAR 42
16091: PUSH
16092: LD_INT 33
16094: ST_TO_ADDR
16095: GO 16231
16097: LD_INT 28
16099: DOUBLE
16100: EQUAL
16101: IFTRUE 16105
16103: GO 16116
16105: POP
// bc_type := b_armoury ; 29 :
16106: LD_ADDR_OWVAR 42
16110: PUSH
16111: LD_INT 4
16113: ST_TO_ADDR
16114: GO 16231
16116: LD_INT 29
16118: DOUBLE
16119: EQUAL
16120: IFTRUE 16124
16122: GO 16135
16124: POP
// bc_type := b_barracks ; 30 :
16125: LD_ADDR_OWVAR 42
16129: PUSH
16130: LD_INT 5
16132: ST_TO_ADDR
16133: GO 16231
16135: LD_INT 30
16137: DOUBLE
16138: EQUAL
16139: IFTRUE 16143
16141: GO 16154
16143: POP
// bc_type := b_solar_power ; 31 :
16144: LD_ADDR_OWVAR 42
16148: PUSH
16149: LD_INT 27
16151: ST_TO_ADDR
16152: GO 16231
16154: LD_INT 31
16156: DOUBLE
16157: EQUAL
16158: IFTRUE 16162
16160: GO 16173
16162: POP
// bc_type := b_oil_power ; 32 :
16163: LD_ADDR_OWVAR 42
16167: PUSH
16168: LD_INT 26
16170: ST_TO_ADDR
16171: GO 16231
16173: LD_INT 32
16175: DOUBLE
16176: EQUAL
16177: IFTRUE 16181
16179: GO 16192
16181: POP
// bc_type := b_siberite_power ; 33 :
16182: LD_ADDR_OWVAR 42
16186: PUSH
16187: LD_INT 28
16189: ST_TO_ADDR
16190: GO 16231
16192: LD_INT 33
16194: DOUBLE
16195: EQUAL
16196: IFTRUE 16200
16198: GO 16211
16200: POP
// bc_type := b_oil_mine ; 34 :
16201: LD_ADDR_OWVAR 42
16205: PUSH
16206: LD_INT 29
16208: ST_TO_ADDR
16209: GO 16231
16211: LD_INT 34
16213: DOUBLE
16214: EQUAL
16215: IFTRUE 16219
16217: GO 16230
16219: POP
// bc_type := b_siberite_mine ; end ;
16220: LD_ADDR_OWVAR 42
16224: PUSH
16225: LD_INT 30
16227: ST_TO_ADDR
16228: GO 16231
16230: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16231: LD_ADDR_VAR 0 8
16235: PUSH
16236: LD_VAR 0 5
16240: PPUSH
16241: LD_VAR 0 6
16245: PPUSH
16246: LD_VAR 0 3
16250: PPUSH
16251: CALL_OW 47
16255: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16256: LD_OWVAR 42
16260: PUSH
16261: LD_INT 32
16263: PUSH
16264: LD_INT 33
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: IN
16271: IFFALSE 16287
// PlaceWeaponTurret ( b , weapon ) ;
16273: LD_VAR 0 8
16277: PPUSH
16278: LD_VAR 0 4
16282: PPUSH
16283: CALL_OW 431
// end ;
16287: LD_VAR 0 7
16291: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16292: LD_INT 0
16294: PPUSH
16295: PPUSH
16296: PPUSH
16297: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16298: LD_ADDR_VAR 0 4
16302: PUSH
16303: LD_INT 22
16305: PUSH
16306: LD_OWVAR 2
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 2
16317: PUSH
16318: LD_INT 30
16320: PUSH
16321: LD_INT 0
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 30
16330: PUSH
16331: LD_INT 1
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: ST_TO_ADDR
// if not tmp then
16352: LD_VAR 0 4
16356: NOT
16357: IFFALSE 16361
// exit ;
16359: GO 16420
// for i in tmp do
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: LD_VAR 0 4
16370: PUSH
16371: FOR_IN
16372: IFFALSE 16418
// for j = 1 to 3 do
16374: LD_ADDR_VAR 0 3
16378: PUSH
16379: DOUBLE
16380: LD_INT 1
16382: DEC
16383: ST_TO_ADDR
16384: LD_INT 3
16386: PUSH
16387: FOR_TO
16388: IFFALSE 16414
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16390: LD_VAR 0 2
16394: PPUSH
16395: CALL_OW 274
16399: PPUSH
16400: LD_VAR 0 3
16404: PPUSH
16405: LD_INT 99999
16407: PPUSH
16408: CALL_OW 277
16412: GO 16387
16414: POP
16415: POP
16416: GO 16371
16418: POP
16419: POP
// end ;
16420: LD_VAR 0 1
16424: RET
// export function hHackSetLevel10 ; var i , j ; begin
16425: LD_INT 0
16427: PPUSH
16428: PPUSH
16429: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16430: LD_ADDR_VAR 0 2
16434: PUSH
16435: LD_INT 21
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PPUSH
16445: CALL_OW 69
16449: PUSH
16450: FOR_IN
16451: IFFALSE 16503
// if IsSelected ( i ) then
16453: LD_VAR 0 2
16457: PPUSH
16458: CALL_OW 306
16462: IFFALSE 16501
// begin for j := 1 to 4 do
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: DOUBLE
16470: LD_INT 1
16472: DEC
16473: ST_TO_ADDR
16474: LD_INT 4
16476: PUSH
16477: FOR_TO
16478: IFFALSE 16499
// SetSkill ( i , j , 10 ) ;
16480: LD_VAR 0 2
16484: PPUSH
16485: LD_VAR 0 3
16489: PPUSH
16490: LD_INT 10
16492: PPUSH
16493: CALL_OW 237
16497: GO 16477
16499: POP
16500: POP
// end ;
16501: GO 16450
16503: POP
16504: POP
// end ;
16505: LD_VAR 0 1
16509: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16510: LD_INT 0
16512: PPUSH
16513: PPUSH
16514: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16515: LD_ADDR_VAR 0 2
16519: PUSH
16520: LD_INT 22
16522: PUSH
16523: LD_OWVAR 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PPUSH
16546: CALL_OW 69
16550: PUSH
16551: FOR_IN
16552: IFFALSE 16593
// begin for j := 1 to 4 do
16554: LD_ADDR_VAR 0 3
16558: PUSH
16559: DOUBLE
16560: LD_INT 1
16562: DEC
16563: ST_TO_ADDR
16564: LD_INT 4
16566: PUSH
16567: FOR_TO
16568: IFFALSE 16589
// SetSkill ( i , j , 10 ) ;
16570: LD_VAR 0 2
16574: PPUSH
16575: LD_VAR 0 3
16579: PPUSH
16580: LD_INT 10
16582: PPUSH
16583: CALL_OW 237
16587: GO 16567
16589: POP
16590: POP
// end ;
16591: GO 16551
16593: POP
16594: POP
// end ;
16595: LD_VAR 0 1
16599: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16600: LD_INT 0
16602: PPUSH
// uc_side := your_side ;
16603: LD_ADDR_OWVAR 20
16607: PUSH
16608: LD_OWVAR 2
16612: ST_TO_ADDR
// uc_nation := nation ;
16613: LD_ADDR_OWVAR 21
16617: PUSH
16618: LD_VAR 0 1
16622: ST_TO_ADDR
// InitHc ;
16623: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16627: LD_INT 0
16629: PPUSH
16630: LD_VAR 0 2
16634: PPUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16644: LD_VAR 0 4
16648: PPUSH
16649: LD_VAR 0 5
16653: PPUSH
16654: CALL_OW 428
16658: PUSH
16659: LD_INT 0
16661: EQUAL
16662: IFFALSE 16686
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16664: CALL_OW 44
16668: PPUSH
16669: LD_VAR 0 4
16673: PPUSH
16674: LD_VAR 0 5
16678: PPUSH
16679: LD_INT 1
16681: PPUSH
16682: CALL_OW 48
// end ;
16686: LD_VAR 0 6
16690: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16691: LD_INT 0
16693: PPUSH
16694: PPUSH
// uc_side := your_side ;
16695: LD_ADDR_OWVAR 20
16699: PUSH
16700: LD_OWVAR 2
16704: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16705: LD_VAR 0 1
16709: PUSH
16710: LD_INT 1
16712: PUSH
16713: LD_INT 2
16715: PUSH
16716: LD_INT 3
16718: PUSH
16719: LD_INT 4
16721: PUSH
16722: LD_INT 5
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: IN
16732: IFFALSE 16744
// uc_nation := nation_american else
16734: LD_ADDR_OWVAR 21
16738: PUSH
16739: LD_INT 1
16741: ST_TO_ADDR
16742: GO 16787
// if chassis in [ 11 , 12 , 13 , 14 ] then
16744: LD_VAR 0 1
16748: PUSH
16749: LD_INT 11
16751: PUSH
16752: LD_INT 12
16754: PUSH
16755: LD_INT 13
16757: PUSH
16758: LD_INT 14
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: IN
16767: IFFALSE 16779
// uc_nation := nation_arabian else
16769: LD_ADDR_OWVAR 21
16773: PUSH
16774: LD_INT 2
16776: ST_TO_ADDR
16777: GO 16787
// uc_nation := nation_russian ;
16779: LD_ADDR_OWVAR 21
16783: PUSH
16784: LD_INT 3
16786: ST_TO_ADDR
// vc_chassis := chassis ;
16787: LD_ADDR_OWVAR 37
16791: PUSH
16792: LD_VAR 0 1
16796: ST_TO_ADDR
// vc_engine := engine ;
16797: LD_ADDR_OWVAR 39
16801: PUSH
16802: LD_VAR 0 2
16806: ST_TO_ADDR
// vc_control := control ;
16807: LD_ADDR_OWVAR 38
16811: PUSH
16812: LD_VAR 0 3
16816: ST_TO_ADDR
// vc_weapon := weapon ;
16817: LD_ADDR_OWVAR 40
16821: PUSH
16822: LD_VAR 0 4
16826: ST_TO_ADDR
// un := CreateVehicle ;
16827: LD_ADDR_VAR 0 8
16831: PUSH
16832: CALL_OW 45
16836: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16837: LD_VAR 0 8
16841: PPUSH
16842: LD_INT 0
16844: PPUSH
16845: LD_INT 5
16847: PPUSH
16848: CALL_OW 12
16852: PPUSH
16853: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16857: LD_VAR 0 8
16861: PPUSH
16862: LD_VAR 0 5
16866: PPUSH
16867: LD_VAR 0 6
16871: PPUSH
16872: LD_INT 1
16874: PPUSH
16875: CALL_OW 48
// end ;
16879: LD_VAR 0 7
16883: RET
// export hInvincible ; every 1 do
16884: GO 16886
16886: DISABLE
// hInvincible := [ ] ;
16887: LD_ADDR_EXP 83
16891: PUSH
16892: EMPTY
16893: ST_TO_ADDR
16894: END
// every 10 do var i ;
16895: GO 16897
16897: DISABLE
16898: LD_INT 0
16900: PPUSH
// begin enable ;
16901: ENABLE
// if not hInvincible then
16902: LD_EXP 83
16906: NOT
16907: IFFALSE 16911
// exit ;
16909: GO 16955
// for i in hInvincible do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_EXP 83
16920: PUSH
16921: FOR_IN
16922: IFFALSE 16953
// if GetLives ( i ) < 1000 then
16924: LD_VAR 0 1
16928: PPUSH
16929: CALL_OW 256
16933: PUSH
16934: LD_INT 1000
16936: LESS
16937: IFFALSE 16951
// SetLives ( i , 1000 ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: LD_INT 1000
16946: PPUSH
16947: CALL_OW 234
16951: GO 16921
16953: POP
16954: POP
// end ;
16955: PPOPN 1
16957: END
// export function hHackInvincible ; var i ; begin
16958: LD_INT 0
16960: PPUSH
16961: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16962: LD_ADDR_VAR 0 2
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: LD_INT 21
16972: PUSH
16973: LD_INT 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: LD_INT 21
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: LIST
16994: PPUSH
16995: CALL_OW 69
16999: PUSH
17000: FOR_IN
17001: IFFALSE 17062
// if IsSelected ( i ) then
17003: LD_VAR 0 2
17007: PPUSH
17008: CALL_OW 306
17012: IFFALSE 17060
// begin if i in hInvincible then
17014: LD_VAR 0 2
17018: PUSH
17019: LD_EXP 83
17023: IN
17024: IFFALSE 17044
// hInvincible := hInvincible diff i else
17026: LD_ADDR_EXP 83
17030: PUSH
17031: LD_EXP 83
17035: PUSH
17036: LD_VAR 0 2
17040: DIFF
17041: ST_TO_ADDR
17042: GO 17060
// hInvincible := hInvincible union i ;
17044: LD_ADDR_EXP 83
17048: PUSH
17049: LD_EXP 83
17053: PUSH
17054: LD_VAR 0 2
17058: UNION
17059: ST_TO_ADDR
// end ;
17060: GO 17000
17062: POP
17063: POP
// end ;
17064: LD_VAR 0 1
17068: RET
// export function hHackInvisible ; var i , j ; begin
17069: LD_INT 0
17071: PPUSH
17072: PPUSH
17073: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17074: LD_ADDR_VAR 0 2
17078: PUSH
17079: LD_INT 21
17081: PUSH
17082: LD_INT 1
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 69
17093: PUSH
17094: FOR_IN
17095: IFFALSE 17119
// if IsSelected ( i ) then
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL_OW 306
17106: IFFALSE 17117
// ComForceInvisible ( i ) ;
17108: LD_VAR 0 2
17112: PPUSH
17113: CALL_OW 496
17117: GO 17094
17119: POP
17120: POP
// end ;
17121: LD_VAR 0 1
17125: RET
// export function hHackChangeYourSide ; begin
17126: LD_INT 0
17128: PPUSH
// if your_side = 8 then
17129: LD_OWVAR 2
17133: PUSH
17134: LD_INT 8
17136: EQUAL
17137: IFFALSE 17149
// your_side := 0 else
17139: LD_ADDR_OWVAR 2
17143: PUSH
17144: LD_INT 0
17146: ST_TO_ADDR
17147: GO 17163
// your_side := your_side + 1 ;
17149: LD_ADDR_OWVAR 2
17153: PUSH
17154: LD_OWVAR 2
17158: PUSH
17159: LD_INT 1
17161: PLUS
17162: ST_TO_ADDR
// end ;
17163: LD_VAR 0 1
17167: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17168: LD_INT 0
17170: PPUSH
17171: PPUSH
17172: PPUSH
// for i in all_units do
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: LD_OWVAR 3
17182: PUSH
17183: FOR_IN
17184: IFFALSE 17262
// if IsSelected ( i ) then
17186: LD_VAR 0 2
17190: PPUSH
17191: CALL_OW 306
17195: IFFALSE 17260
// begin j := GetSide ( i ) ;
17197: LD_ADDR_VAR 0 3
17201: PUSH
17202: LD_VAR 0 2
17206: PPUSH
17207: CALL_OW 255
17211: ST_TO_ADDR
// if j = 8 then
17212: LD_VAR 0 3
17216: PUSH
17217: LD_INT 8
17219: EQUAL
17220: IFFALSE 17232
// j := 0 else
17222: LD_ADDR_VAR 0 3
17226: PUSH
17227: LD_INT 0
17229: ST_TO_ADDR
17230: GO 17246
// j := j + 1 ;
17232: LD_ADDR_VAR 0 3
17236: PUSH
17237: LD_VAR 0 3
17241: PUSH
17242: LD_INT 1
17244: PLUS
17245: ST_TO_ADDR
// SetSide ( i , j ) ;
17246: LD_VAR 0 2
17250: PPUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: CALL_OW 235
// end ;
17260: GO 17183
17262: POP
17263: POP
// end ;
17264: LD_VAR 0 1
17268: RET
// export function hHackFog ; begin
17269: LD_INT 0
17271: PPUSH
// FogOff ( true ) ;
17272: LD_INT 1
17274: PPUSH
17275: CALL_OW 344
// end ;
17279: LD_VAR 0 1
17283: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17284: LD_INT 0
17286: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17287: LD_VAR 0 1
17291: PPUSH
17292: LD_VAR 0 2
17296: PPUSH
17297: LD_VAR 0 3
17301: PPUSH
17302: LD_INT 1
17304: PPUSH
17305: LD_INT 1
17307: PPUSH
17308: CALL_OW 483
// CenterOnXY ( x , y ) ;
17312: LD_VAR 0 2
17316: PPUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: CALL_OW 84
// end ; end_of_file
17326: LD_VAR 0 4
17330: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17331: LD_INT 0
17333: PPUSH
17334: PPUSH
// if exist_mode then
17335: LD_VAR 0 2
17339: IFFALSE 17364
// unit := CreateCharacter ( prefix & ident ) else
17341: LD_ADDR_VAR 0 5
17345: PUSH
17346: LD_VAR 0 3
17350: PUSH
17351: LD_VAR 0 1
17355: STR
17356: PPUSH
17357: CALL_OW 34
17361: ST_TO_ADDR
17362: GO 17379
// unit := NewCharacter ( ident ) ;
17364: LD_ADDR_VAR 0 5
17368: PUSH
17369: LD_VAR 0 1
17373: PPUSH
17374: CALL_OW 25
17378: ST_TO_ADDR
// result := unit ;
17379: LD_ADDR_VAR 0 4
17383: PUSH
17384: LD_VAR 0 5
17388: ST_TO_ADDR
// end ;
17389: LD_VAR 0 4
17393: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17394: LD_INT 0
17396: PPUSH
17397: PPUSH
// if not side or not nation then
17398: LD_VAR 0 1
17402: NOT
17403: PUSH
17404: LD_VAR 0 2
17408: NOT
17409: OR
17410: IFFALSE 17414
// exit ;
17412: GO 18178
// case nation of nation_american :
17414: LD_VAR 0 2
17418: PUSH
17419: LD_INT 1
17421: DOUBLE
17422: EQUAL
17423: IFTRUE 17427
17425: GO 17641
17427: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17428: LD_ADDR_VAR 0 4
17432: PUSH
17433: LD_INT 35
17435: PUSH
17436: LD_INT 45
17438: PUSH
17439: LD_INT 46
17441: PUSH
17442: LD_INT 47
17444: PUSH
17445: LD_INT 82
17447: PUSH
17448: LD_INT 83
17450: PUSH
17451: LD_INT 84
17453: PUSH
17454: LD_INT 85
17456: PUSH
17457: LD_INT 86
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: LD_INT 6
17468: PUSH
17469: LD_INT 15
17471: PUSH
17472: LD_INT 16
17474: PUSH
17475: LD_INT 7
17477: PUSH
17478: LD_INT 12
17480: PUSH
17481: LD_INT 13
17483: PUSH
17484: LD_INT 10
17486: PUSH
17487: LD_INT 14
17489: PUSH
17490: LD_INT 20
17492: PUSH
17493: LD_INT 21
17495: PUSH
17496: LD_INT 22
17498: PUSH
17499: LD_INT 25
17501: PUSH
17502: LD_INT 32
17504: PUSH
17505: LD_INT 27
17507: PUSH
17508: LD_INT 36
17510: PUSH
17511: LD_INT 69
17513: PUSH
17514: LD_INT 39
17516: PUSH
17517: LD_INT 34
17519: PUSH
17520: LD_INT 40
17522: PUSH
17523: LD_INT 48
17525: PUSH
17526: LD_INT 49
17528: PUSH
17529: LD_INT 50
17531: PUSH
17532: LD_INT 51
17534: PUSH
17535: LD_INT 52
17537: PUSH
17538: LD_INT 53
17540: PUSH
17541: LD_INT 54
17543: PUSH
17544: LD_INT 55
17546: PUSH
17547: LD_INT 56
17549: PUSH
17550: LD_INT 57
17552: PUSH
17553: LD_INT 58
17555: PUSH
17556: LD_INT 59
17558: PUSH
17559: LD_INT 60
17561: PUSH
17562: LD_INT 61
17564: PUSH
17565: LD_INT 62
17567: PUSH
17568: LD_INT 80
17570: PUSH
17571: LD_INT 82
17573: PUSH
17574: LD_INT 83
17576: PUSH
17577: LD_INT 84
17579: PUSH
17580: LD_INT 85
17582: PUSH
17583: LD_INT 86
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: ST_TO_ADDR
17639: GO 18102
17641: LD_INT 2
17643: DOUBLE
17644: EQUAL
17645: IFTRUE 17649
17647: GO 17871
17649: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
17650: LD_ADDR_VAR 0 4
17654: PUSH
17655: LD_INT 35
17657: PUSH
17658: LD_INT 45
17660: PUSH
17661: LD_INT 46
17663: PUSH
17664: LD_INT 47
17666: PUSH
17667: LD_INT 82
17669: PUSH
17670: LD_INT 83
17672: PUSH
17673: LD_INT 84
17675: PUSH
17676: LD_INT 85
17678: PUSH
17679: LD_INT 87
17681: PUSH
17682: LD_INT 70
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: LD_INT 11
17690: PUSH
17691: LD_INT 3
17693: PUSH
17694: LD_INT 4
17696: PUSH
17697: LD_INT 5
17699: PUSH
17700: LD_INT 6
17702: PUSH
17703: LD_INT 15
17705: PUSH
17706: LD_INT 18
17708: PUSH
17709: LD_INT 7
17711: PUSH
17712: LD_INT 17
17714: PUSH
17715: LD_INT 8
17717: PUSH
17718: LD_INT 20
17720: PUSH
17721: LD_INT 21
17723: PUSH
17724: LD_INT 22
17726: PUSH
17727: LD_INT 72
17729: PUSH
17730: LD_INT 26
17732: PUSH
17733: LD_INT 69
17735: PUSH
17736: LD_INT 39
17738: PUSH
17739: LD_INT 40
17741: PUSH
17742: LD_INT 41
17744: PUSH
17745: LD_INT 42
17747: PUSH
17748: LD_INT 43
17750: PUSH
17751: LD_INT 48
17753: PUSH
17754: LD_INT 49
17756: PUSH
17757: LD_INT 50
17759: PUSH
17760: LD_INT 51
17762: PUSH
17763: LD_INT 52
17765: PUSH
17766: LD_INT 53
17768: PUSH
17769: LD_INT 54
17771: PUSH
17772: LD_INT 55
17774: PUSH
17775: LD_INT 56
17777: PUSH
17778: LD_INT 60
17780: PUSH
17781: LD_INT 61
17783: PUSH
17784: LD_INT 62
17786: PUSH
17787: LD_INT 66
17789: PUSH
17790: LD_INT 67
17792: PUSH
17793: LD_INT 68
17795: PUSH
17796: LD_INT 81
17798: PUSH
17799: LD_INT 82
17801: PUSH
17802: LD_INT 83
17804: PUSH
17805: LD_INT 84
17807: PUSH
17808: LD_INT 85
17810: PUSH
17811: LD_INT 87
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: ST_TO_ADDR
17869: GO 18102
17871: LD_INT 3
17873: DOUBLE
17874: EQUAL
17875: IFTRUE 17879
17877: GO 18101
17879: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17880: LD_ADDR_VAR 0 4
17884: PUSH
17885: LD_INT 46
17887: PUSH
17888: LD_INT 47
17890: PUSH
17891: LD_INT 1
17893: PUSH
17894: LD_INT 2
17896: PUSH
17897: LD_INT 82
17899: PUSH
17900: LD_INT 83
17902: PUSH
17903: LD_INT 84
17905: PUSH
17906: LD_INT 85
17908: PUSH
17909: LD_INT 86
17911: PUSH
17912: LD_INT 11
17914: PUSH
17915: LD_INT 9
17917: PUSH
17918: LD_INT 20
17920: PUSH
17921: LD_INT 19
17923: PUSH
17924: LD_INT 21
17926: PUSH
17927: LD_INT 24
17929: PUSH
17930: LD_INT 22
17932: PUSH
17933: LD_INT 25
17935: PUSH
17936: LD_INT 28
17938: PUSH
17939: LD_INT 29
17941: PUSH
17942: LD_INT 30
17944: PUSH
17945: LD_INT 31
17947: PUSH
17948: LD_INT 37
17950: PUSH
17951: LD_INT 38
17953: PUSH
17954: LD_INT 32
17956: PUSH
17957: LD_INT 27
17959: PUSH
17960: LD_INT 33
17962: PUSH
17963: LD_INT 69
17965: PUSH
17966: LD_INT 39
17968: PUSH
17969: LD_INT 34
17971: PUSH
17972: LD_INT 40
17974: PUSH
17975: LD_INT 71
17977: PUSH
17978: LD_INT 23
17980: PUSH
17981: LD_INT 44
17983: PUSH
17984: LD_INT 48
17986: PUSH
17987: LD_INT 49
17989: PUSH
17990: LD_INT 50
17992: PUSH
17993: LD_INT 51
17995: PUSH
17996: LD_INT 52
17998: PUSH
17999: LD_INT 53
18001: PUSH
18002: LD_INT 54
18004: PUSH
18005: LD_INT 55
18007: PUSH
18008: LD_INT 56
18010: PUSH
18011: LD_INT 57
18013: PUSH
18014: LD_INT 58
18016: PUSH
18017: LD_INT 59
18019: PUSH
18020: LD_INT 63
18022: PUSH
18023: LD_INT 64
18025: PUSH
18026: LD_INT 65
18028: PUSH
18029: LD_INT 82
18031: PUSH
18032: LD_INT 83
18034: PUSH
18035: LD_INT 84
18037: PUSH
18038: LD_INT 85
18040: PUSH
18041: LD_INT 86
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: ST_TO_ADDR
18099: GO 18102
18101: POP
// if state > - 1 and state < 3 then
18102: LD_VAR 0 3
18106: PUSH
18107: LD_INT 1
18109: NEG
18110: GREATER
18111: PUSH
18112: LD_VAR 0 3
18116: PUSH
18117: LD_INT 3
18119: LESS
18120: AND
18121: IFFALSE 18178
// for i in result do
18123: LD_ADDR_VAR 0 5
18127: PUSH
18128: LD_VAR 0 4
18132: PUSH
18133: FOR_IN
18134: IFFALSE 18176
// if GetTech ( i , side ) <> state then
18136: LD_VAR 0 5
18140: PPUSH
18141: LD_VAR 0 1
18145: PPUSH
18146: CALL_OW 321
18150: PUSH
18151: LD_VAR 0 3
18155: NONEQUAL
18156: IFFALSE 18174
// result := result diff i ;
18158: LD_ADDR_VAR 0 4
18162: PUSH
18163: LD_VAR 0 4
18167: PUSH
18168: LD_VAR 0 5
18172: DIFF
18173: ST_TO_ADDR
18174: GO 18133
18176: POP
18177: POP
// end ;
18178: LD_VAR 0 4
18182: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18183: LD_INT 0
18185: PPUSH
18186: PPUSH
18187: PPUSH
// result := true ;
18188: LD_ADDR_VAR 0 3
18192: PUSH
18193: LD_INT 1
18195: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18196: LD_ADDR_VAR 0 5
18200: PUSH
18201: LD_VAR 0 2
18205: PPUSH
18206: CALL_OW 480
18210: ST_TO_ADDR
// if not tmp then
18211: LD_VAR 0 5
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 18269
// for i in tmp do
18220: LD_ADDR_VAR 0 4
18224: PUSH
18225: LD_VAR 0 5
18229: PUSH
18230: FOR_IN
18231: IFFALSE 18267
// if GetTech ( i , side ) <> state_researched then
18233: LD_VAR 0 4
18237: PPUSH
18238: LD_VAR 0 1
18242: PPUSH
18243: CALL_OW 321
18247: PUSH
18248: LD_INT 2
18250: NONEQUAL
18251: IFFALSE 18265
// begin result := false ;
18253: LD_ADDR_VAR 0 3
18257: PUSH
18258: LD_INT 0
18260: ST_TO_ADDR
// exit ;
18261: POP
18262: POP
18263: GO 18269
// end ;
18265: GO 18230
18267: POP
18268: POP
// end ;
18269: LD_VAR 0 3
18273: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18274: LD_INT 0
18276: PPUSH
18277: PPUSH
18278: PPUSH
18279: PPUSH
18280: PPUSH
18281: PPUSH
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
18287: PPUSH
18288: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18289: LD_VAR 0 1
18293: NOT
18294: PUSH
18295: LD_VAR 0 1
18299: PPUSH
18300: CALL_OW 257
18304: PUSH
18305: LD_INT 9
18307: NONEQUAL
18308: OR
18309: IFFALSE 18313
// exit ;
18311: GO 18886
// side := GetSide ( unit ) ;
18313: LD_ADDR_VAR 0 9
18317: PUSH
18318: LD_VAR 0 1
18322: PPUSH
18323: CALL_OW 255
18327: ST_TO_ADDR
// tech_space := tech_spacanom ;
18328: LD_ADDR_VAR 0 12
18332: PUSH
18333: LD_INT 29
18335: ST_TO_ADDR
// tech_time := tech_taurad ;
18336: LD_ADDR_VAR 0 13
18340: PUSH
18341: LD_INT 28
18343: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18344: LD_ADDR_VAR 0 11
18348: PUSH
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 310
18358: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18359: LD_VAR 0 11
18363: PPUSH
18364: CALL_OW 247
18368: PUSH
18369: LD_INT 2
18371: EQUAL
18372: IFFALSE 18376
// exit ;
18374: GO 18886
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18376: LD_ADDR_VAR 0 8
18380: PUSH
18381: LD_INT 81
18383: PUSH
18384: LD_VAR 0 9
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 3
18395: PUSH
18396: LD_INT 21
18398: PUSH
18399: LD_INT 3
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PPUSH
18414: CALL_OW 69
18418: ST_TO_ADDR
// if not tmp then
18419: LD_VAR 0 8
18423: NOT
18424: IFFALSE 18428
// exit ;
18426: GO 18886
// if in_unit then
18428: LD_VAR 0 11
18432: IFFALSE 18456
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18434: LD_ADDR_VAR 0 10
18438: PUSH
18439: LD_VAR 0 8
18443: PPUSH
18444: LD_VAR 0 11
18448: PPUSH
18449: CALL_OW 74
18453: ST_TO_ADDR
18454: GO 18476
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18456: LD_ADDR_VAR 0 10
18460: PUSH
18461: LD_VAR 0 8
18465: PPUSH
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 74
18475: ST_TO_ADDR
// if not enemy then
18476: LD_VAR 0 10
18480: NOT
18481: IFFALSE 18485
// exit ;
18483: GO 18886
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18485: LD_VAR 0 11
18489: PUSH
18490: LD_VAR 0 11
18494: PPUSH
18495: LD_VAR 0 10
18499: PPUSH
18500: CALL_OW 296
18504: PUSH
18505: LD_INT 13
18507: GREATER
18508: AND
18509: PUSH
18510: LD_VAR 0 1
18514: PPUSH
18515: LD_VAR 0 10
18519: PPUSH
18520: CALL_OW 296
18524: PUSH
18525: LD_INT 12
18527: GREATER
18528: OR
18529: IFFALSE 18533
// exit ;
18531: GO 18886
// missile := [ 1 ] ;
18533: LD_ADDR_VAR 0 14
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: EMPTY
18542: LIST
18543: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18544: LD_VAR 0 9
18548: PPUSH
18549: LD_VAR 0 12
18553: PPUSH
18554: CALL_OW 325
18558: IFFALSE 18587
// missile := Insert ( missile , missile + 1 , 2 ) ;
18560: LD_ADDR_VAR 0 14
18564: PUSH
18565: LD_VAR 0 14
18569: PPUSH
18570: LD_VAR 0 14
18574: PUSH
18575: LD_INT 1
18577: PLUS
18578: PPUSH
18579: LD_INT 2
18581: PPUSH
18582: CALL_OW 2
18586: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18587: LD_VAR 0 9
18591: PPUSH
18592: LD_VAR 0 13
18596: PPUSH
18597: CALL_OW 325
18601: PUSH
18602: LD_VAR 0 10
18606: PPUSH
18607: CALL_OW 255
18611: PPUSH
18612: LD_VAR 0 13
18616: PPUSH
18617: CALL_OW 325
18621: NOT
18622: AND
18623: IFFALSE 18652
// missile := Insert ( missile , missile + 1 , 3 ) ;
18625: LD_ADDR_VAR 0 14
18629: PUSH
18630: LD_VAR 0 14
18634: PPUSH
18635: LD_VAR 0 14
18639: PUSH
18640: LD_INT 1
18642: PLUS
18643: PPUSH
18644: LD_INT 3
18646: PPUSH
18647: CALL_OW 2
18651: ST_TO_ADDR
// if missile < 2 then
18652: LD_VAR 0 14
18656: PUSH
18657: LD_INT 2
18659: LESS
18660: IFFALSE 18664
// exit ;
18662: GO 18886
// x := GetX ( enemy ) ;
18664: LD_ADDR_VAR 0 4
18668: PUSH
18669: LD_VAR 0 10
18673: PPUSH
18674: CALL_OW 250
18678: ST_TO_ADDR
// y := GetY ( enemy ) ;
18679: LD_ADDR_VAR 0 5
18683: PUSH
18684: LD_VAR 0 10
18688: PPUSH
18689: CALL_OW 251
18693: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18694: LD_ADDR_VAR 0 6
18698: PUSH
18699: LD_VAR 0 4
18703: PUSH
18704: LD_INT 1
18706: NEG
18707: PPUSH
18708: LD_INT 1
18710: PPUSH
18711: CALL_OW 12
18715: PLUS
18716: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18717: LD_ADDR_VAR 0 7
18721: PUSH
18722: LD_VAR 0 5
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PPUSH
18731: LD_INT 1
18733: PPUSH
18734: CALL_OW 12
18738: PLUS
18739: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18740: LD_VAR 0 6
18744: PPUSH
18745: LD_VAR 0 7
18749: PPUSH
18750: CALL_OW 488
18754: NOT
18755: IFFALSE 18777
// begin _x := x ;
18757: LD_ADDR_VAR 0 6
18761: PUSH
18762: LD_VAR 0 4
18766: ST_TO_ADDR
// _y := y ;
18767: LD_ADDR_VAR 0 7
18771: PUSH
18772: LD_VAR 0 5
18776: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18777: LD_ADDR_VAR 0 3
18781: PUSH
18782: LD_INT 1
18784: PPUSH
18785: LD_VAR 0 14
18789: PPUSH
18790: CALL_OW 12
18794: ST_TO_ADDR
// case i of 1 :
18795: LD_VAR 0 3
18799: PUSH
18800: LD_INT 1
18802: DOUBLE
18803: EQUAL
18804: IFTRUE 18808
18806: GO 18825
18808: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18809: LD_VAR 0 1
18813: PPUSH
18814: LD_VAR 0 10
18818: PPUSH
18819: CALL_OW 115
18823: GO 18886
18825: LD_INT 2
18827: DOUBLE
18828: EQUAL
18829: IFTRUE 18833
18831: GO 18855
18833: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18834: LD_VAR 0 1
18838: PPUSH
18839: LD_VAR 0 6
18843: PPUSH
18844: LD_VAR 0 7
18848: PPUSH
18849: CALL_OW 153
18853: GO 18886
18855: LD_INT 3
18857: DOUBLE
18858: EQUAL
18859: IFTRUE 18863
18861: GO 18885
18863: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18864: LD_VAR 0 1
18868: PPUSH
18869: LD_VAR 0 6
18873: PPUSH
18874: LD_VAR 0 7
18878: PPUSH
18879: CALL_OW 154
18883: GO 18886
18885: POP
// end ;
18886: LD_VAR 0 2
18890: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18891: LD_INT 0
18893: PPUSH
18894: PPUSH
18895: PPUSH
18896: PPUSH
18897: PPUSH
18898: PPUSH
// if not unit or not building then
18899: LD_VAR 0 1
18903: NOT
18904: PUSH
18905: LD_VAR 0 2
18909: NOT
18910: OR
18911: IFFALSE 18915
// exit ;
18913: GO 19073
// x := GetX ( building ) ;
18915: LD_ADDR_VAR 0 5
18919: PUSH
18920: LD_VAR 0 2
18924: PPUSH
18925: CALL_OW 250
18929: ST_TO_ADDR
// y := GetY ( building ) ;
18930: LD_ADDR_VAR 0 6
18934: PUSH
18935: LD_VAR 0 2
18939: PPUSH
18940: CALL_OW 251
18944: ST_TO_ADDR
// for i = 0 to 5 do
18945: LD_ADDR_VAR 0 4
18949: PUSH
18950: DOUBLE
18951: LD_INT 0
18953: DEC
18954: ST_TO_ADDR
18955: LD_INT 5
18957: PUSH
18958: FOR_TO
18959: IFFALSE 19071
// begin _x := ShiftX ( x , i , 3 ) ;
18961: LD_ADDR_VAR 0 7
18965: PUSH
18966: LD_VAR 0 5
18970: PPUSH
18971: LD_VAR 0 4
18975: PPUSH
18976: LD_INT 3
18978: PPUSH
18979: CALL_OW 272
18983: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18984: LD_ADDR_VAR 0 8
18988: PUSH
18989: LD_VAR 0 6
18993: PPUSH
18994: LD_VAR 0 4
18998: PPUSH
18999: LD_INT 3
19001: PPUSH
19002: CALL_OW 273
19006: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19007: LD_VAR 0 7
19011: PPUSH
19012: LD_VAR 0 8
19016: PPUSH
19017: CALL_OW 488
19021: NOT
19022: IFFALSE 19026
// continue ;
19024: GO 18958
// if HexInfo ( _x , _y ) = 0 then
19026: LD_VAR 0 7
19030: PPUSH
19031: LD_VAR 0 8
19035: PPUSH
19036: CALL_OW 428
19040: PUSH
19041: LD_INT 0
19043: EQUAL
19044: IFFALSE 19069
// begin ComMoveXY ( unit , _x , _y ) ;
19046: LD_VAR 0 1
19050: PPUSH
19051: LD_VAR 0 7
19055: PPUSH
19056: LD_VAR 0 8
19060: PPUSH
19061: CALL_OW 111
// exit ;
19065: POP
19066: POP
19067: GO 19073
// end ; end ;
19069: GO 18958
19071: POP
19072: POP
// end ;
19073: LD_VAR 0 3
19077: RET
// export function ScanBase ( side , base_area ) ; begin
19078: LD_INT 0
19080: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19081: LD_ADDR_VAR 0 3
19085: PUSH
19086: LD_VAR 0 2
19090: PPUSH
19091: LD_INT 81
19093: PUSH
19094: LD_VAR 0 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PPUSH
19103: CALL_OW 70
19107: ST_TO_ADDR
// end ;
19108: LD_VAR 0 3
19112: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19113: LD_INT 0
19115: PPUSH
19116: PPUSH
19117: PPUSH
19118: PPUSH
// result := false ;
19119: LD_ADDR_VAR 0 2
19123: PUSH
19124: LD_INT 0
19126: ST_TO_ADDR
// side := GetSide ( unit ) ;
19127: LD_ADDR_VAR 0 3
19131: PUSH
19132: LD_VAR 0 1
19136: PPUSH
19137: CALL_OW 255
19141: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19142: LD_ADDR_VAR 0 4
19146: PUSH
19147: LD_VAR 0 1
19151: PPUSH
19152: CALL_OW 248
19156: ST_TO_ADDR
// case nat of 1 :
19157: LD_VAR 0 4
19161: PUSH
19162: LD_INT 1
19164: DOUBLE
19165: EQUAL
19166: IFTRUE 19170
19168: GO 19181
19170: POP
// tech := tech_lassight ; 2 :
19171: LD_ADDR_VAR 0 5
19175: PUSH
19176: LD_INT 12
19178: ST_TO_ADDR
19179: GO 19220
19181: LD_INT 2
19183: DOUBLE
19184: EQUAL
19185: IFTRUE 19189
19187: GO 19200
19189: POP
// tech := tech_mortar ; 3 :
19190: LD_ADDR_VAR 0 5
19194: PUSH
19195: LD_INT 41
19197: ST_TO_ADDR
19198: GO 19220
19200: LD_INT 3
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19208
19206: GO 19219
19208: POP
// tech := tech_bazooka ; end ;
19209: LD_ADDR_VAR 0 5
19213: PUSH
19214: LD_INT 44
19216: ST_TO_ADDR
19217: GO 19220
19219: POP
// if Researched ( side , tech ) then
19220: LD_VAR 0 3
19224: PPUSH
19225: LD_VAR 0 5
19229: PPUSH
19230: CALL_OW 325
19234: IFFALSE 19261
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19236: LD_ADDR_VAR 0 2
19240: PUSH
19241: LD_INT 5
19243: PUSH
19244: LD_INT 8
19246: PUSH
19247: LD_INT 9
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: LD_VAR 0 4
19259: ARRAY
19260: ST_TO_ADDR
// end ;
19261: LD_VAR 0 2
19265: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19266: LD_INT 0
19268: PPUSH
19269: PPUSH
19270: PPUSH
// if not mines then
19271: LD_VAR 0 2
19275: NOT
19276: IFFALSE 19280
// exit ;
19278: GO 19424
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19280: LD_ADDR_VAR 0 5
19284: PUSH
19285: LD_INT 81
19287: PUSH
19288: LD_VAR 0 1
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 3
19299: PUSH
19300: LD_INT 21
19302: PUSH
19303: LD_INT 3
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PPUSH
19318: CALL_OW 69
19322: ST_TO_ADDR
// for i in mines do
19323: LD_ADDR_VAR 0 4
19327: PUSH
19328: LD_VAR 0 2
19332: PUSH
19333: FOR_IN
19334: IFFALSE 19422
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19336: LD_VAR 0 4
19340: PUSH
19341: LD_INT 1
19343: ARRAY
19344: PPUSH
19345: LD_VAR 0 4
19349: PUSH
19350: LD_INT 2
19352: ARRAY
19353: PPUSH
19354: CALL_OW 458
19358: NOT
19359: IFFALSE 19363
// continue ;
19361: GO 19333
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19363: LD_VAR 0 4
19367: PUSH
19368: LD_INT 1
19370: ARRAY
19371: PPUSH
19372: LD_VAR 0 4
19376: PUSH
19377: LD_INT 2
19379: ARRAY
19380: PPUSH
19381: CALL_OW 428
19385: PUSH
19386: LD_VAR 0 5
19390: IN
19391: IFFALSE 19420
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19393: LD_VAR 0 4
19397: PUSH
19398: LD_INT 1
19400: ARRAY
19401: PPUSH
19402: LD_VAR 0 4
19406: PUSH
19407: LD_INT 2
19409: ARRAY
19410: PPUSH
19411: LD_VAR 0 1
19415: PPUSH
19416: CALL_OW 456
// end ;
19420: GO 19333
19422: POP
19423: POP
// end ;
19424: LD_VAR 0 3
19428: RET
// export function Count ( array ) ; var i ; begin
19429: LD_INT 0
19431: PPUSH
19432: PPUSH
// result := 0 ;
19433: LD_ADDR_VAR 0 2
19437: PUSH
19438: LD_INT 0
19440: ST_TO_ADDR
// for i in array do
19441: LD_ADDR_VAR 0 3
19445: PUSH
19446: LD_VAR 0 1
19450: PUSH
19451: FOR_IN
19452: IFFALSE 19476
// if i then
19454: LD_VAR 0 3
19458: IFFALSE 19474
// result := result + 1 ;
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: LD_VAR 0 2
19469: PUSH
19470: LD_INT 1
19472: PLUS
19473: ST_TO_ADDR
19474: GO 19451
19476: POP
19477: POP
// end ;
19478: LD_VAR 0 2
19482: RET
// export function IsEmpty ( building ) ; begin
19483: LD_INT 0
19485: PPUSH
// if not building then
19486: LD_VAR 0 1
19490: NOT
19491: IFFALSE 19495
// exit ;
19493: GO 19538
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: LD_VAR 0 1
19504: PUSH
19505: LD_INT 22
19507: PUSH
19508: LD_VAR 0 1
19512: PPUSH
19513: CALL_OW 255
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 58
19524: PUSH
19525: EMPTY
19526: LIST
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PPUSH
19532: CALL_OW 69
19536: IN
19537: ST_TO_ADDR
// end ;
19538: LD_VAR 0 2
19542: RET
// export function IsNotFull ( building ) ; begin
19543: LD_INT 0
19545: PPUSH
// if not building then
19546: LD_VAR 0 1
19550: NOT
19551: IFFALSE 19555
// exit ;
19553: GO 19574
// result := UnitsInside ( building ) < 6 ;
19555: LD_ADDR_VAR 0 2
19559: PUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 313
19569: PUSH
19570: LD_INT 6
19572: LESS
19573: ST_TO_ADDR
// end ;
19574: LD_VAR 0 2
19578: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19579: LD_INT 0
19581: PPUSH
19582: PPUSH
19583: PPUSH
19584: PPUSH
// tmp := [ ] ;
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: EMPTY
19591: ST_TO_ADDR
// list := [ ] ;
19592: LD_ADDR_VAR 0 5
19596: PUSH
19597: EMPTY
19598: ST_TO_ADDR
// for i = 16 to 25 do
19599: LD_ADDR_VAR 0 4
19603: PUSH
19604: DOUBLE
19605: LD_INT 16
19607: DEC
19608: ST_TO_ADDR
19609: LD_INT 25
19611: PUSH
19612: FOR_TO
19613: IFFALSE 19686
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19615: LD_ADDR_VAR 0 3
19619: PUSH
19620: LD_VAR 0 3
19624: PUSH
19625: LD_INT 22
19627: PUSH
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 255
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 91
19644: PUSH
19645: LD_VAR 0 1
19649: PUSH
19650: LD_INT 6
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 30
19660: PUSH
19661: LD_VAR 0 4
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: PUSH
19675: EMPTY
19676: LIST
19677: PPUSH
19678: CALL_OW 69
19682: ADD
19683: ST_TO_ADDR
19684: GO 19612
19686: POP
19687: POP
// for i = 1 to tmp do
19688: LD_ADDR_VAR 0 4
19692: PUSH
19693: DOUBLE
19694: LD_INT 1
19696: DEC
19697: ST_TO_ADDR
19698: LD_VAR 0 3
19702: PUSH
19703: FOR_TO
19704: IFFALSE 19792
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19706: LD_ADDR_VAR 0 5
19710: PUSH
19711: LD_VAR 0 5
19715: PUSH
19716: LD_VAR 0 3
19720: PUSH
19721: LD_VAR 0 4
19725: ARRAY
19726: PPUSH
19727: CALL_OW 266
19731: PUSH
19732: LD_VAR 0 3
19736: PUSH
19737: LD_VAR 0 4
19741: ARRAY
19742: PPUSH
19743: CALL_OW 250
19747: PUSH
19748: LD_VAR 0 3
19752: PUSH
19753: LD_VAR 0 4
19757: ARRAY
19758: PPUSH
19759: CALL_OW 251
19763: PUSH
19764: LD_VAR 0 3
19768: PUSH
19769: LD_VAR 0 4
19773: ARRAY
19774: PPUSH
19775: CALL_OW 254
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: PUSH
19786: EMPTY
19787: LIST
19788: ADD
19789: ST_TO_ADDR
19790: GO 19703
19792: POP
19793: POP
// result := list ;
19794: LD_ADDR_VAR 0 2
19798: PUSH
19799: LD_VAR 0 5
19803: ST_TO_ADDR
// end ;
19804: LD_VAR 0 2
19808: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19809: LD_INT 0
19811: PPUSH
19812: PPUSH
19813: PPUSH
19814: PPUSH
19815: PPUSH
19816: PPUSH
19817: PPUSH
// if not factory then
19818: LD_VAR 0 1
19822: NOT
19823: IFFALSE 19827
// exit ;
19825: GO 20420
// if control = control_apeman then
19827: LD_VAR 0 4
19831: PUSH
19832: LD_INT 5
19834: EQUAL
19835: IFFALSE 19944
// begin tmp := UnitsInside ( factory ) ;
19837: LD_ADDR_VAR 0 8
19841: PUSH
19842: LD_VAR 0 1
19846: PPUSH
19847: CALL_OW 313
19851: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19852: LD_VAR 0 8
19856: PPUSH
19857: LD_INT 25
19859: PUSH
19860: LD_INT 12
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PPUSH
19867: CALL_OW 72
19871: NOT
19872: IFFALSE 19882
// control := control_manual ;
19874: LD_ADDR_VAR 0 4
19878: PUSH
19879: LD_INT 1
19881: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19882: LD_ADDR_VAR 0 8
19886: PUSH
19887: LD_VAR 0 1
19891: PPUSH
19892: CALL 19579 0 1
19896: ST_TO_ADDR
// if tmp then
19897: LD_VAR 0 8
19901: IFFALSE 19944
// begin for i in tmp do
19903: LD_ADDR_VAR 0 7
19907: PUSH
19908: LD_VAR 0 8
19912: PUSH
19913: FOR_IN
19914: IFFALSE 19942
// if i [ 1 ] = b_ext_radio then
19916: LD_VAR 0 7
19920: PUSH
19921: LD_INT 1
19923: ARRAY
19924: PUSH
19925: LD_INT 22
19927: EQUAL
19928: IFFALSE 19940
// begin control := control_remote ;
19930: LD_ADDR_VAR 0 4
19934: PUSH
19935: LD_INT 2
19937: ST_TO_ADDR
// break ;
19938: GO 19942
// end ;
19940: GO 19913
19942: POP
19943: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19944: LD_VAR 0 1
19948: PPUSH
19949: LD_VAR 0 2
19953: PPUSH
19954: LD_VAR 0 3
19958: PPUSH
19959: LD_VAR 0 4
19963: PPUSH
19964: LD_VAR 0 5
19968: PPUSH
19969: CALL_OW 448
19973: IFFALSE 20008
// begin result := [ chassis , engine , control , weapon ] ;
19975: LD_ADDR_VAR 0 6
19979: PUSH
19980: LD_VAR 0 2
19984: PUSH
19985: LD_VAR 0 3
19989: PUSH
19990: LD_VAR 0 4
19994: PUSH
19995: LD_VAR 0 5
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: ST_TO_ADDR
// exit ;
20006: GO 20420
// end ; _chassis := AvailableChassisList ( factory ) ;
20008: LD_ADDR_VAR 0 9
20012: PUSH
20013: LD_VAR 0 1
20017: PPUSH
20018: CALL_OW 475
20022: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20023: LD_ADDR_VAR 0 11
20027: PUSH
20028: LD_VAR 0 1
20032: PPUSH
20033: CALL_OW 476
20037: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20038: LD_ADDR_VAR 0 12
20042: PUSH
20043: LD_VAR 0 1
20047: PPUSH
20048: CALL_OW 477
20052: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20053: LD_ADDR_VAR 0 10
20057: PUSH
20058: LD_VAR 0 1
20062: PPUSH
20063: CALL_OW 478
20067: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20068: LD_VAR 0 9
20072: NOT
20073: PUSH
20074: LD_VAR 0 11
20078: NOT
20079: OR
20080: PUSH
20081: LD_VAR 0 12
20085: NOT
20086: OR
20087: PUSH
20088: LD_VAR 0 10
20092: NOT
20093: OR
20094: IFFALSE 20129
// begin result := [ chassis , engine , control , weapon ] ;
20096: LD_ADDR_VAR 0 6
20100: PUSH
20101: LD_VAR 0 2
20105: PUSH
20106: LD_VAR 0 3
20110: PUSH
20111: LD_VAR 0 4
20115: PUSH
20116: LD_VAR 0 5
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: ST_TO_ADDR
// exit ;
20127: GO 20420
// end ; if not chassis in _chassis then
20129: LD_VAR 0 2
20133: PUSH
20134: LD_VAR 0 9
20138: IN
20139: NOT
20140: IFFALSE 20166
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20142: LD_ADDR_VAR 0 2
20146: PUSH
20147: LD_VAR 0 9
20151: PUSH
20152: LD_INT 1
20154: PPUSH
20155: LD_VAR 0 9
20159: PPUSH
20160: CALL_OW 12
20164: ARRAY
20165: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20166: LD_VAR 0 2
20170: PPUSH
20171: LD_VAR 0 3
20175: PPUSH
20176: CALL 20425 0 2
20180: NOT
20181: IFFALSE 20240
// repeat engine := _engine [ 1 ] ;
20183: LD_ADDR_VAR 0 3
20187: PUSH
20188: LD_VAR 0 11
20192: PUSH
20193: LD_INT 1
20195: ARRAY
20196: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20197: LD_ADDR_VAR 0 11
20201: PUSH
20202: LD_VAR 0 11
20206: PPUSH
20207: LD_INT 1
20209: PPUSH
20210: CALL_OW 3
20214: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20215: LD_VAR 0 2
20219: PPUSH
20220: LD_VAR 0 3
20224: PPUSH
20225: CALL 20425 0 2
20229: PUSH
20230: LD_VAR 0 11
20234: PUSH
20235: EMPTY
20236: EQUAL
20237: OR
20238: IFFALSE 20183
// if not control in _control then
20240: LD_VAR 0 4
20244: PUSH
20245: LD_VAR 0 12
20249: IN
20250: NOT
20251: IFFALSE 20277
// control := _control [ rand ( 1 , _control ) ] ;
20253: LD_ADDR_VAR 0 4
20257: PUSH
20258: LD_VAR 0 12
20262: PUSH
20263: LD_INT 1
20265: PPUSH
20266: LD_VAR 0 12
20270: PPUSH
20271: CALL_OW 12
20275: ARRAY
20276: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20277: LD_VAR 0 2
20281: PPUSH
20282: LD_VAR 0 5
20286: PPUSH
20287: CALL 20645 0 2
20291: NOT
20292: IFFALSE 20351
// repeat weapon := _weapon [ 1 ] ;
20294: LD_ADDR_VAR 0 5
20298: PUSH
20299: LD_VAR 0 10
20303: PUSH
20304: LD_INT 1
20306: ARRAY
20307: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20308: LD_ADDR_VAR 0 10
20312: PUSH
20313: LD_VAR 0 10
20317: PPUSH
20318: LD_INT 1
20320: PPUSH
20321: CALL_OW 3
20325: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20326: LD_VAR 0 2
20330: PPUSH
20331: LD_VAR 0 5
20335: PPUSH
20336: CALL 20645 0 2
20340: PUSH
20341: LD_VAR 0 10
20345: PUSH
20346: EMPTY
20347: EQUAL
20348: OR
20349: IFFALSE 20294
// result := [ ] ;
20351: LD_ADDR_VAR 0 6
20355: PUSH
20356: EMPTY
20357: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20358: LD_VAR 0 1
20362: PPUSH
20363: LD_VAR 0 2
20367: PPUSH
20368: LD_VAR 0 3
20372: PPUSH
20373: LD_VAR 0 4
20377: PPUSH
20378: LD_VAR 0 5
20382: PPUSH
20383: CALL_OW 448
20387: IFFALSE 20420
// result := [ chassis , engine , control , weapon ] ;
20389: LD_ADDR_VAR 0 6
20393: PUSH
20394: LD_VAR 0 2
20398: PUSH
20399: LD_VAR 0 3
20403: PUSH
20404: LD_VAR 0 4
20408: PUSH
20409: LD_VAR 0 5
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: ST_TO_ADDR
// end ;
20420: LD_VAR 0 6
20424: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20425: LD_INT 0
20427: PPUSH
// if not chassis or not engine then
20428: LD_VAR 0 1
20432: NOT
20433: PUSH
20434: LD_VAR 0 2
20438: NOT
20439: OR
20440: IFFALSE 20444
// exit ;
20442: GO 20640
// case engine of engine_solar :
20444: LD_VAR 0 2
20448: PUSH
20449: LD_INT 2
20451: DOUBLE
20452: EQUAL
20453: IFTRUE 20457
20455: GO 20495
20457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20458: LD_ADDR_VAR 0 3
20462: PUSH
20463: LD_INT 11
20465: PUSH
20466: LD_INT 12
20468: PUSH
20469: LD_INT 13
20471: PUSH
20472: LD_INT 14
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 3
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: ST_TO_ADDR
20493: GO 20624
20495: LD_INT 1
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20565
20503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20504: LD_ADDR_VAR 0 3
20508: PUSH
20509: LD_INT 11
20511: PUSH
20512: LD_INT 12
20514: PUSH
20515: LD_INT 13
20517: PUSH
20518: LD_INT 14
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: LD_INT 2
20526: PUSH
20527: LD_INT 3
20529: PUSH
20530: LD_INT 4
20532: PUSH
20533: LD_INT 5
20535: PUSH
20536: LD_INT 21
20538: PUSH
20539: LD_INT 23
20541: PUSH
20542: LD_INT 22
20544: PUSH
20545: LD_INT 24
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: ST_TO_ADDR
20563: GO 20624
20565: LD_INT 3
20567: DOUBLE
20568: EQUAL
20569: IFTRUE 20573
20571: GO 20623
20573: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20574: LD_ADDR_VAR 0 3
20578: PUSH
20579: LD_INT 13
20581: PUSH
20582: LD_INT 14
20584: PUSH
20585: LD_INT 2
20587: PUSH
20588: LD_INT 3
20590: PUSH
20591: LD_INT 4
20593: PUSH
20594: LD_INT 5
20596: PUSH
20597: LD_INT 21
20599: PUSH
20600: LD_INT 22
20602: PUSH
20603: LD_INT 23
20605: PUSH
20606: LD_INT 24
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: ST_TO_ADDR
20621: GO 20624
20623: POP
// result := ( chassis in result ) ;
20624: LD_ADDR_VAR 0 3
20628: PUSH
20629: LD_VAR 0 1
20633: PUSH
20634: LD_VAR 0 3
20638: IN
20639: ST_TO_ADDR
// end ;
20640: LD_VAR 0 3
20644: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20645: LD_INT 0
20647: PPUSH
// if not chassis or not weapon then
20648: LD_VAR 0 1
20652: NOT
20653: PUSH
20654: LD_VAR 0 2
20658: NOT
20659: OR
20660: IFFALSE 20664
// exit ;
20662: GO 21690
// case weapon of us_machine_gun :
20664: LD_VAR 0 2
20668: PUSH
20669: LD_INT 2
20671: DOUBLE
20672: EQUAL
20673: IFTRUE 20677
20675: GO 20707
20677: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20678: LD_ADDR_VAR 0 3
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 3
20691: PUSH
20692: LD_INT 4
20694: PUSH
20695: LD_INT 5
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: ST_TO_ADDR
20705: GO 21674
20707: LD_INT 3
20709: DOUBLE
20710: EQUAL
20711: IFTRUE 20715
20713: GO 20745
20715: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20716: LD_ADDR_VAR 0 3
20720: PUSH
20721: LD_INT 1
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: LD_INT 3
20729: PUSH
20730: LD_INT 4
20732: PUSH
20733: LD_INT 5
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: ST_TO_ADDR
20743: GO 21674
20745: LD_INT 11
20747: DOUBLE
20748: EQUAL
20749: IFTRUE 20753
20751: GO 20783
20753: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20754: LD_ADDR_VAR 0 3
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: LD_INT 3
20767: PUSH
20768: LD_INT 4
20770: PUSH
20771: LD_INT 5
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: ST_TO_ADDR
20781: GO 21674
20783: LD_INT 4
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20791
20789: GO 20817
20791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 3
20802: PUSH
20803: LD_INT 4
20805: PUSH
20806: LD_INT 5
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: ST_TO_ADDR
20815: GO 21674
20817: LD_INT 5
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20851
20825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20826: LD_ADDR_VAR 0 3
20830: PUSH
20831: LD_INT 2
20833: PUSH
20834: LD_INT 3
20836: PUSH
20837: LD_INT 4
20839: PUSH
20840: LD_INT 5
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: ST_TO_ADDR
20849: GO 21674
20851: LD_INT 9
20853: DOUBLE
20854: EQUAL
20855: IFTRUE 20859
20857: GO 20885
20859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20860: LD_ADDR_VAR 0 3
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: LD_INT 3
20870: PUSH
20871: LD_INT 4
20873: PUSH
20874: LD_INT 5
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: ST_TO_ADDR
20883: GO 21674
20885: LD_INT 7
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20919
20893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20894: LD_ADDR_VAR 0 3
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 3
20904: PUSH
20905: LD_INT 4
20907: PUSH
20908: LD_INT 5
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: ST_TO_ADDR
20917: GO 21674
20919: LD_INT 12
20921: DOUBLE
20922: EQUAL
20923: IFTRUE 20927
20925: GO 20953
20927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20928: LD_ADDR_VAR 0 3
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: LD_INT 3
20938: PUSH
20939: LD_INT 4
20941: PUSH
20942: LD_INT 5
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: ST_TO_ADDR
20951: GO 21674
20953: LD_INT 13
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 20987
20961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20962: LD_ADDR_VAR 0 3
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: LD_INT 3
20972: PUSH
20973: LD_INT 4
20975: PUSH
20976: LD_INT 5
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: ST_TO_ADDR
20985: GO 21674
20987: LD_INT 14
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21013
20995: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20996: LD_ADDR_VAR 0 3
21000: PUSH
21001: LD_INT 4
21003: PUSH
21004: LD_INT 5
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: ST_TO_ADDR
21011: GO 21674
21013: LD_INT 6
21015: DOUBLE
21016: EQUAL
21017: IFTRUE 21021
21019: GO 21039
21021: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21022: LD_ADDR_VAR 0 3
21026: PUSH
21027: LD_INT 4
21029: PUSH
21030: LD_INT 5
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: ST_TO_ADDR
21037: GO 21674
21039: LD_INT 10
21041: DOUBLE
21042: EQUAL
21043: IFTRUE 21047
21045: GO 21065
21047: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21048: LD_ADDR_VAR 0 3
21052: PUSH
21053: LD_INT 4
21055: PUSH
21056: LD_INT 5
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: ST_TO_ADDR
21063: GO 21674
21065: LD_INT 22
21067: DOUBLE
21068: EQUAL
21069: IFTRUE 21073
21071: GO 21099
21073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21074: LD_ADDR_VAR 0 3
21078: PUSH
21079: LD_INT 11
21081: PUSH
21082: LD_INT 12
21084: PUSH
21085: LD_INT 13
21087: PUSH
21088: LD_INT 14
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: ST_TO_ADDR
21097: GO 21674
21099: LD_INT 23
21101: DOUBLE
21102: EQUAL
21103: IFTRUE 21107
21105: GO 21133
21107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21108: LD_ADDR_VAR 0 3
21112: PUSH
21113: LD_INT 11
21115: PUSH
21116: LD_INT 12
21118: PUSH
21119: LD_INT 13
21121: PUSH
21122: LD_INT 14
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: ST_TO_ADDR
21131: GO 21674
21133: LD_INT 24
21135: DOUBLE
21136: EQUAL
21137: IFTRUE 21141
21139: GO 21167
21141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21142: LD_ADDR_VAR 0 3
21146: PUSH
21147: LD_INT 11
21149: PUSH
21150: LD_INT 12
21152: PUSH
21153: LD_INT 13
21155: PUSH
21156: LD_INT 14
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: ST_TO_ADDR
21165: GO 21674
21167: LD_INT 30
21169: DOUBLE
21170: EQUAL
21171: IFTRUE 21175
21173: GO 21201
21175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21176: LD_ADDR_VAR 0 3
21180: PUSH
21181: LD_INT 11
21183: PUSH
21184: LD_INT 12
21186: PUSH
21187: LD_INT 13
21189: PUSH
21190: LD_INT 14
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: ST_TO_ADDR
21199: GO 21674
21201: LD_INT 25
21203: DOUBLE
21204: EQUAL
21205: IFTRUE 21209
21207: GO 21227
21209: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21210: LD_ADDR_VAR 0 3
21214: PUSH
21215: LD_INT 13
21217: PUSH
21218: LD_INT 14
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: ST_TO_ADDR
21225: GO 21674
21227: LD_INT 27
21229: DOUBLE
21230: EQUAL
21231: IFTRUE 21235
21233: GO 21253
21235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21236: LD_ADDR_VAR 0 3
21240: PUSH
21241: LD_INT 13
21243: PUSH
21244: LD_INT 14
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: ST_TO_ADDR
21251: GO 21674
21253: LD_INT 28
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21279
21261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21262: LD_ADDR_VAR 0 3
21266: PUSH
21267: LD_INT 13
21269: PUSH
21270: LD_INT 14
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: ST_TO_ADDR
21277: GO 21674
21279: LD_INT 29
21281: DOUBLE
21282: EQUAL
21283: IFTRUE 21287
21285: GO 21305
21287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21288: LD_ADDR_VAR 0 3
21292: PUSH
21293: LD_INT 13
21295: PUSH
21296: LD_INT 14
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: ST_TO_ADDR
21303: GO 21674
21305: LD_INT 31
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21331
21313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_INT 13
21321: PUSH
21322: LD_INT 14
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: ST_TO_ADDR
21329: GO 21674
21331: LD_INT 26
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21357
21339: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21340: LD_ADDR_VAR 0 3
21344: PUSH
21345: LD_INT 13
21347: PUSH
21348: LD_INT 14
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: ST_TO_ADDR
21355: GO 21674
21357: LD_INT 42
21359: DOUBLE
21360: EQUAL
21361: IFTRUE 21365
21363: GO 21391
21365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21366: LD_ADDR_VAR 0 3
21370: PUSH
21371: LD_INT 21
21373: PUSH
21374: LD_INT 22
21376: PUSH
21377: LD_INT 23
21379: PUSH
21380: LD_INT 24
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: ST_TO_ADDR
21389: GO 21674
21391: LD_INT 43
21393: DOUBLE
21394: EQUAL
21395: IFTRUE 21399
21397: GO 21425
21399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21400: LD_ADDR_VAR 0 3
21404: PUSH
21405: LD_INT 21
21407: PUSH
21408: LD_INT 22
21410: PUSH
21411: LD_INT 23
21413: PUSH
21414: LD_INT 24
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: ST_TO_ADDR
21423: GO 21674
21425: LD_INT 44
21427: DOUBLE
21428: EQUAL
21429: IFTRUE 21433
21431: GO 21459
21433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: LD_INT 21
21441: PUSH
21442: LD_INT 22
21444: PUSH
21445: LD_INT 23
21447: PUSH
21448: LD_INT 24
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: ST_TO_ADDR
21457: GO 21674
21459: LD_INT 45
21461: DOUBLE
21462: EQUAL
21463: IFTRUE 21467
21465: GO 21493
21467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21468: LD_ADDR_VAR 0 3
21472: PUSH
21473: LD_INT 21
21475: PUSH
21476: LD_INT 22
21478: PUSH
21479: LD_INT 23
21481: PUSH
21482: LD_INT 24
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: ST_TO_ADDR
21491: GO 21674
21493: LD_INT 49
21495: DOUBLE
21496: EQUAL
21497: IFTRUE 21501
21499: GO 21527
21501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21502: LD_ADDR_VAR 0 3
21506: PUSH
21507: LD_INT 21
21509: PUSH
21510: LD_INT 22
21512: PUSH
21513: LD_INT 23
21515: PUSH
21516: LD_INT 24
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: ST_TO_ADDR
21525: GO 21674
21527: LD_INT 51
21529: DOUBLE
21530: EQUAL
21531: IFTRUE 21535
21533: GO 21561
21535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21536: LD_ADDR_VAR 0 3
21540: PUSH
21541: LD_INT 21
21543: PUSH
21544: LD_INT 22
21546: PUSH
21547: LD_INT 23
21549: PUSH
21550: LD_INT 24
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: ST_TO_ADDR
21559: GO 21674
21561: LD_INT 52
21563: DOUBLE
21564: EQUAL
21565: IFTRUE 21569
21567: GO 21595
21569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21570: LD_ADDR_VAR 0 3
21574: PUSH
21575: LD_INT 21
21577: PUSH
21578: LD_INT 22
21580: PUSH
21581: LD_INT 23
21583: PUSH
21584: LD_INT 24
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: ST_TO_ADDR
21593: GO 21674
21595: LD_INT 53
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21621
21603: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21604: LD_ADDR_VAR 0 3
21608: PUSH
21609: LD_INT 23
21611: PUSH
21612: LD_INT 24
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: ST_TO_ADDR
21619: GO 21674
21621: LD_INT 46
21623: DOUBLE
21624: EQUAL
21625: IFTRUE 21629
21627: GO 21647
21629: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21630: LD_ADDR_VAR 0 3
21634: PUSH
21635: LD_INT 23
21637: PUSH
21638: LD_INT 24
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: ST_TO_ADDR
21645: GO 21674
21647: LD_INT 47
21649: DOUBLE
21650: EQUAL
21651: IFTRUE 21655
21653: GO 21673
21655: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21656: LD_ADDR_VAR 0 3
21660: PUSH
21661: LD_INT 23
21663: PUSH
21664: LD_INT 24
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: ST_TO_ADDR
21671: GO 21674
21673: POP
// result := ( chassis in result ) ;
21674: LD_ADDR_VAR 0 3
21678: PUSH
21679: LD_VAR 0 1
21683: PUSH
21684: LD_VAR 0 3
21688: IN
21689: ST_TO_ADDR
// end ;
21690: LD_VAR 0 3
21694: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21695: LD_INT 0
21697: PPUSH
21698: PPUSH
21699: PPUSH
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
// result := array ;
21704: LD_ADDR_VAR 0 5
21708: PUSH
21709: LD_VAR 0 1
21713: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21714: LD_VAR 0 1
21718: NOT
21719: PUSH
21720: LD_VAR 0 2
21724: NOT
21725: OR
21726: PUSH
21727: LD_VAR 0 3
21731: NOT
21732: OR
21733: PUSH
21734: LD_VAR 0 2
21738: PUSH
21739: LD_VAR 0 1
21743: GREATER
21744: OR
21745: PUSH
21746: LD_VAR 0 3
21750: PUSH
21751: LD_VAR 0 1
21755: GREATER
21756: OR
21757: IFFALSE 21761
// exit ;
21759: GO 22057
// if direction then
21761: LD_VAR 0 4
21765: IFFALSE 21829
// begin d := 1 ;
21767: LD_ADDR_VAR 0 9
21771: PUSH
21772: LD_INT 1
21774: ST_TO_ADDR
// if i_from > i_to then
21775: LD_VAR 0 2
21779: PUSH
21780: LD_VAR 0 3
21784: GREATER
21785: IFFALSE 21811
// length := ( array - i_from ) + i_to else
21787: LD_ADDR_VAR 0 11
21791: PUSH
21792: LD_VAR 0 1
21796: PUSH
21797: LD_VAR 0 2
21801: MINUS
21802: PUSH
21803: LD_VAR 0 3
21807: PLUS
21808: ST_TO_ADDR
21809: GO 21827
// length := i_to - i_from ;
21811: LD_ADDR_VAR 0 11
21815: PUSH
21816: LD_VAR 0 3
21820: PUSH
21821: LD_VAR 0 2
21825: MINUS
21826: ST_TO_ADDR
// end else
21827: GO 21890
// begin d := - 1 ;
21829: LD_ADDR_VAR 0 9
21833: PUSH
21834: LD_INT 1
21836: NEG
21837: ST_TO_ADDR
// if i_from > i_to then
21838: LD_VAR 0 2
21842: PUSH
21843: LD_VAR 0 3
21847: GREATER
21848: IFFALSE 21868
// length := i_from - i_to else
21850: LD_ADDR_VAR 0 11
21854: PUSH
21855: LD_VAR 0 2
21859: PUSH
21860: LD_VAR 0 3
21864: MINUS
21865: ST_TO_ADDR
21866: GO 21890
// length := ( array - i_to ) + i_from ;
21868: LD_ADDR_VAR 0 11
21872: PUSH
21873: LD_VAR 0 1
21877: PUSH
21878: LD_VAR 0 3
21882: MINUS
21883: PUSH
21884: LD_VAR 0 2
21888: PLUS
21889: ST_TO_ADDR
// end ; if not length then
21890: LD_VAR 0 11
21894: NOT
21895: IFFALSE 21899
// exit ;
21897: GO 22057
// tmp := array ;
21899: LD_ADDR_VAR 0 10
21903: PUSH
21904: LD_VAR 0 1
21908: ST_TO_ADDR
// for i = 1 to length do
21909: LD_ADDR_VAR 0 6
21913: PUSH
21914: DOUBLE
21915: LD_INT 1
21917: DEC
21918: ST_TO_ADDR
21919: LD_VAR 0 11
21923: PUSH
21924: FOR_TO
21925: IFFALSE 22045
// begin for j = 1 to array do
21927: LD_ADDR_VAR 0 7
21931: PUSH
21932: DOUBLE
21933: LD_INT 1
21935: DEC
21936: ST_TO_ADDR
21937: LD_VAR 0 1
21941: PUSH
21942: FOR_TO
21943: IFFALSE 22031
// begin k := j + d ;
21945: LD_ADDR_VAR 0 8
21949: PUSH
21950: LD_VAR 0 7
21954: PUSH
21955: LD_VAR 0 9
21959: PLUS
21960: ST_TO_ADDR
// if k > array then
21961: LD_VAR 0 8
21965: PUSH
21966: LD_VAR 0 1
21970: GREATER
21971: IFFALSE 21981
// k := 1 ;
21973: LD_ADDR_VAR 0 8
21977: PUSH
21978: LD_INT 1
21980: ST_TO_ADDR
// if not k then
21981: LD_VAR 0 8
21985: NOT
21986: IFFALSE 21998
// k := array ;
21988: LD_ADDR_VAR 0 8
21992: PUSH
21993: LD_VAR 0 1
21997: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21998: LD_ADDR_VAR 0 10
22002: PUSH
22003: LD_VAR 0 10
22007: PPUSH
22008: LD_VAR 0 8
22012: PPUSH
22013: LD_VAR 0 1
22017: PUSH
22018: LD_VAR 0 7
22022: ARRAY
22023: PPUSH
22024: CALL_OW 1
22028: ST_TO_ADDR
// end ;
22029: GO 21942
22031: POP
22032: POP
// array := tmp ;
22033: LD_ADDR_VAR 0 1
22037: PUSH
22038: LD_VAR 0 10
22042: ST_TO_ADDR
// end ;
22043: GO 21924
22045: POP
22046: POP
// result := array ;
22047: LD_ADDR_VAR 0 5
22051: PUSH
22052: LD_VAR 0 1
22056: ST_TO_ADDR
// end ;
22057: LD_VAR 0 5
22061: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22062: LD_INT 0
22064: PPUSH
22065: PPUSH
// result := 0 ;
22066: LD_ADDR_VAR 0 3
22070: PUSH
22071: LD_INT 0
22073: ST_TO_ADDR
// if not array or not value in array then
22074: LD_VAR 0 1
22078: NOT
22079: PUSH
22080: LD_VAR 0 2
22084: PUSH
22085: LD_VAR 0 1
22089: IN
22090: NOT
22091: OR
22092: IFFALSE 22096
// exit ;
22094: GO 22150
// for i = 1 to array do
22096: LD_ADDR_VAR 0 4
22100: PUSH
22101: DOUBLE
22102: LD_INT 1
22104: DEC
22105: ST_TO_ADDR
22106: LD_VAR 0 1
22110: PUSH
22111: FOR_TO
22112: IFFALSE 22148
// if value = array [ i ] then
22114: LD_VAR 0 2
22118: PUSH
22119: LD_VAR 0 1
22123: PUSH
22124: LD_VAR 0 4
22128: ARRAY
22129: EQUAL
22130: IFFALSE 22146
// begin result := i ;
22132: LD_ADDR_VAR 0 3
22136: PUSH
22137: LD_VAR 0 4
22141: ST_TO_ADDR
// exit ;
22142: POP
22143: POP
22144: GO 22150
// end ;
22146: GO 22111
22148: POP
22149: POP
// end ;
22150: LD_VAR 0 3
22154: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22155: LD_INT 0
22157: PPUSH
// vc_chassis := chassis ;
22158: LD_ADDR_OWVAR 37
22162: PUSH
22163: LD_VAR 0 1
22167: ST_TO_ADDR
// vc_engine := engine ;
22168: LD_ADDR_OWVAR 39
22172: PUSH
22173: LD_VAR 0 2
22177: ST_TO_ADDR
// vc_control := control ;
22178: LD_ADDR_OWVAR 38
22182: PUSH
22183: LD_VAR 0 3
22187: ST_TO_ADDR
// vc_weapon := weapon ;
22188: LD_ADDR_OWVAR 40
22192: PUSH
22193: LD_VAR 0 4
22197: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22198: LD_ADDR_OWVAR 41
22202: PUSH
22203: LD_VAR 0 5
22207: ST_TO_ADDR
// end ;
22208: LD_VAR 0 6
22212: RET
// export function WantPlant ( unit ) ; var task ; begin
22213: LD_INT 0
22215: PPUSH
22216: PPUSH
// result := false ;
22217: LD_ADDR_VAR 0 2
22221: PUSH
22222: LD_INT 0
22224: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22225: LD_ADDR_VAR 0 3
22229: PUSH
22230: LD_VAR 0 1
22234: PPUSH
22235: CALL_OW 437
22239: ST_TO_ADDR
// if task then
22240: LD_VAR 0 3
22244: IFFALSE 22272
// if task [ 1 ] [ 1 ] = p then
22246: LD_VAR 0 3
22250: PUSH
22251: LD_INT 1
22253: ARRAY
22254: PUSH
22255: LD_INT 1
22257: ARRAY
22258: PUSH
22259: LD_STRING p
22261: EQUAL
22262: IFFALSE 22272
// result := true ;
22264: LD_ADDR_VAR 0 2
22268: PUSH
22269: LD_INT 1
22271: ST_TO_ADDR
// end ;
22272: LD_VAR 0 2
22276: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
22281: PPUSH
22282: PPUSH
// if pos < 1 then
22283: LD_VAR 0 2
22287: PUSH
22288: LD_INT 1
22290: LESS
22291: IFFALSE 22295
// exit ;
22293: GO 22598
// if pos = 1 then
22295: LD_VAR 0 2
22299: PUSH
22300: LD_INT 1
22302: EQUAL
22303: IFFALSE 22336
// result := Replace ( arr , pos [ 1 ] , value ) else
22305: LD_ADDR_VAR 0 4
22309: PUSH
22310: LD_VAR 0 1
22314: PPUSH
22315: LD_VAR 0 2
22319: PUSH
22320: LD_INT 1
22322: ARRAY
22323: PPUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: CALL_OW 1
22333: ST_TO_ADDR
22334: GO 22598
// begin tmp := arr ;
22336: LD_ADDR_VAR 0 6
22340: PUSH
22341: LD_VAR 0 1
22345: ST_TO_ADDR
// s_arr := [ tmp ] ;
22346: LD_ADDR_VAR 0 7
22350: PUSH
22351: LD_VAR 0 6
22355: PUSH
22356: EMPTY
22357: LIST
22358: ST_TO_ADDR
// for i = 1 to pos - 1 do
22359: LD_ADDR_VAR 0 5
22363: PUSH
22364: DOUBLE
22365: LD_INT 1
22367: DEC
22368: ST_TO_ADDR
22369: LD_VAR 0 2
22373: PUSH
22374: LD_INT 1
22376: MINUS
22377: PUSH
22378: FOR_TO
22379: IFFALSE 22424
// begin tmp := tmp [ pos [ i ] ] ;
22381: LD_ADDR_VAR 0 6
22385: PUSH
22386: LD_VAR 0 6
22390: PUSH
22391: LD_VAR 0 2
22395: PUSH
22396: LD_VAR 0 5
22400: ARRAY
22401: ARRAY
22402: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22403: LD_ADDR_VAR 0 7
22407: PUSH
22408: LD_VAR 0 7
22412: PUSH
22413: LD_VAR 0 6
22417: PUSH
22418: EMPTY
22419: LIST
22420: ADD
22421: ST_TO_ADDR
// end ;
22422: GO 22378
22424: POP
22425: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22426: LD_ADDR_VAR 0 6
22430: PUSH
22431: LD_VAR 0 6
22435: PPUSH
22436: LD_VAR 0 2
22440: PUSH
22441: LD_VAR 0 2
22445: ARRAY
22446: PPUSH
22447: LD_VAR 0 3
22451: PPUSH
22452: CALL_OW 1
22456: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22457: LD_ADDR_VAR 0 7
22461: PUSH
22462: LD_VAR 0 7
22466: PPUSH
22467: LD_VAR 0 7
22471: PPUSH
22472: LD_VAR 0 6
22476: PPUSH
22477: CALL_OW 1
22481: ST_TO_ADDR
// for i = s_arr downto 2 do
22482: LD_ADDR_VAR 0 5
22486: PUSH
22487: DOUBLE
22488: LD_VAR 0 7
22492: INC
22493: ST_TO_ADDR
22494: LD_INT 2
22496: PUSH
22497: FOR_DOWNTO
22498: IFFALSE 22582
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22500: LD_ADDR_VAR 0 6
22504: PUSH
22505: LD_VAR 0 7
22509: PUSH
22510: LD_VAR 0 5
22514: PUSH
22515: LD_INT 1
22517: MINUS
22518: ARRAY
22519: PPUSH
22520: LD_VAR 0 2
22524: PUSH
22525: LD_VAR 0 5
22529: PUSH
22530: LD_INT 1
22532: MINUS
22533: ARRAY
22534: PPUSH
22535: LD_VAR 0 7
22539: PUSH
22540: LD_VAR 0 5
22544: ARRAY
22545: PPUSH
22546: CALL_OW 1
22550: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22551: LD_ADDR_VAR 0 7
22555: PUSH
22556: LD_VAR 0 7
22560: PPUSH
22561: LD_VAR 0 5
22565: PUSH
22566: LD_INT 1
22568: MINUS
22569: PPUSH
22570: LD_VAR 0 6
22574: PPUSH
22575: CALL_OW 1
22579: ST_TO_ADDR
// end ;
22580: GO 22497
22582: POP
22583: POP
// result := s_arr [ 1 ] ;
22584: LD_ADDR_VAR 0 4
22588: PUSH
22589: LD_VAR 0 7
22593: PUSH
22594: LD_INT 1
22596: ARRAY
22597: ST_TO_ADDR
// end ; end ;
22598: LD_VAR 0 4
22602: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22603: LD_INT 0
22605: PPUSH
22606: PPUSH
// if not list then
22607: LD_VAR 0 1
22611: NOT
22612: IFFALSE 22616
// exit ;
22614: GO 22707
// i := list [ pos1 ] ;
22616: LD_ADDR_VAR 0 5
22620: PUSH
22621: LD_VAR 0 1
22625: PUSH
22626: LD_VAR 0 2
22630: ARRAY
22631: ST_TO_ADDR
// if not i then
22632: LD_VAR 0 5
22636: NOT
22637: IFFALSE 22641
// exit ;
22639: GO 22707
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22641: LD_ADDR_VAR 0 1
22645: PUSH
22646: LD_VAR 0 1
22650: PPUSH
22651: LD_VAR 0 2
22655: PPUSH
22656: LD_VAR 0 1
22660: PUSH
22661: LD_VAR 0 3
22665: ARRAY
22666: PPUSH
22667: CALL_OW 1
22671: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22672: LD_ADDR_VAR 0 1
22676: PUSH
22677: LD_VAR 0 1
22681: PPUSH
22682: LD_VAR 0 3
22686: PPUSH
22687: LD_VAR 0 5
22691: PPUSH
22692: CALL_OW 1
22696: ST_TO_ADDR
// result := list ;
22697: LD_ADDR_VAR 0 4
22701: PUSH
22702: LD_VAR 0 1
22706: ST_TO_ADDR
// end ;
22707: LD_VAR 0 4
22711: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22712: LD_INT 0
22714: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22715: LD_ADDR_VAR 0 5
22719: PUSH
22720: LD_VAR 0 1
22724: PPUSH
22725: CALL_OW 250
22729: PPUSH
22730: LD_VAR 0 1
22734: PPUSH
22735: CALL_OW 251
22739: PPUSH
22740: LD_VAR 0 2
22744: PPUSH
22745: LD_VAR 0 3
22749: PPUSH
22750: LD_VAR 0 4
22754: PPUSH
22755: CALL 22765 0 5
22759: ST_TO_ADDR
// end ;
22760: LD_VAR 0 5
22764: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22765: LD_INT 0
22767: PPUSH
22768: PPUSH
22769: PPUSH
22770: PPUSH
// if not list then
22771: LD_VAR 0 3
22775: NOT
22776: IFFALSE 22780
// exit ;
22778: GO 23168
// result := [ ] ;
22780: LD_ADDR_VAR 0 6
22784: PUSH
22785: EMPTY
22786: ST_TO_ADDR
// for i in list do
22787: LD_ADDR_VAR 0 7
22791: PUSH
22792: LD_VAR 0 3
22796: PUSH
22797: FOR_IN
22798: IFFALSE 23000
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22800: LD_ADDR_VAR 0 9
22804: PUSH
22805: LD_VAR 0 7
22809: PPUSH
22810: LD_VAR 0 1
22814: PPUSH
22815: LD_VAR 0 2
22819: PPUSH
22820: CALL_OW 297
22824: ST_TO_ADDR
// if not result then
22825: LD_VAR 0 6
22829: NOT
22830: IFFALSE 22856
// result := [ [ i , tmp ] ] else
22832: LD_ADDR_VAR 0 6
22836: PUSH
22837: LD_VAR 0 7
22841: PUSH
22842: LD_VAR 0 9
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: EMPTY
22852: LIST
22853: ST_TO_ADDR
22854: GO 22998
// begin if result [ result ] [ 2 ] < tmp then
22856: LD_VAR 0 6
22860: PUSH
22861: LD_VAR 0 6
22865: ARRAY
22866: PUSH
22867: LD_INT 2
22869: ARRAY
22870: PUSH
22871: LD_VAR 0 9
22875: LESS
22876: IFFALSE 22918
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22878: LD_ADDR_VAR 0 6
22882: PUSH
22883: LD_VAR 0 6
22887: PPUSH
22888: LD_VAR 0 6
22892: PUSH
22893: LD_INT 1
22895: PLUS
22896: PPUSH
22897: LD_VAR 0 7
22901: PUSH
22902: LD_VAR 0 9
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PPUSH
22911: CALL_OW 2
22915: ST_TO_ADDR
22916: GO 22998
// for j = 1 to result do
22918: LD_ADDR_VAR 0 8
22922: PUSH
22923: DOUBLE
22924: LD_INT 1
22926: DEC
22927: ST_TO_ADDR
22928: LD_VAR 0 6
22932: PUSH
22933: FOR_TO
22934: IFFALSE 22996
// begin if tmp < result [ j ] [ 2 ] then
22936: LD_VAR 0 9
22940: PUSH
22941: LD_VAR 0 6
22945: PUSH
22946: LD_VAR 0 8
22950: ARRAY
22951: PUSH
22952: LD_INT 2
22954: ARRAY
22955: LESS
22956: IFFALSE 22994
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22958: LD_ADDR_VAR 0 6
22962: PUSH
22963: LD_VAR 0 6
22967: PPUSH
22968: LD_VAR 0 8
22972: PPUSH
22973: LD_VAR 0 7
22977: PUSH
22978: LD_VAR 0 9
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PPUSH
22987: CALL_OW 2
22991: ST_TO_ADDR
// break ;
22992: GO 22996
// end ; end ;
22994: GO 22933
22996: POP
22997: POP
// end ; end ;
22998: GO 22797
23000: POP
23001: POP
// if result and not asc then
23002: LD_VAR 0 6
23006: PUSH
23007: LD_VAR 0 4
23011: NOT
23012: AND
23013: IFFALSE 23088
// begin tmp := result ;
23015: LD_ADDR_VAR 0 9
23019: PUSH
23020: LD_VAR 0 6
23024: ST_TO_ADDR
// for i = tmp downto 1 do
23025: LD_ADDR_VAR 0 7
23029: PUSH
23030: DOUBLE
23031: LD_VAR 0 9
23035: INC
23036: ST_TO_ADDR
23037: LD_INT 1
23039: PUSH
23040: FOR_DOWNTO
23041: IFFALSE 23086
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23043: LD_ADDR_VAR 0 6
23047: PUSH
23048: LD_VAR 0 6
23052: PPUSH
23053: LD_VAR 0 9
23057: PUSH
23058: LD_VAR 0 7
23062: MINUS
23063: PUSH
23064: LD_INT 1
23066: PLUS
23067: PPUSH
23068: LD_VAR 0 9
23072: PUSH
23073: LD_VAR 0 7
23077: ARRAY
23078: PPUSH
23079: CALL_OW 1
23083: ST_TO_ADDR
23084: GO 23040
23086: POP
23087: POP
// end ; tmp := [ ] ;
23088: LD_ADDR_VAR 0 9
23092: PUSH
23093: EMPTY
23094: ST_TO_ADDR
// if mode then
23095: LD_VAR 0 5
23099: IFFALSE 23168
// begin for i = 1 to result do
23101: LD_ADDR_VAR 0 7
23105: PUSH
23106: DOUBLE
23107: LD_INT 1
23109: DEC
23110: ST_TO_ADDR
23111: LD_VAR 0 6
23115: PUSH
23116: FOR_TO
23117: IFFALSE 23156
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23119: LD_ADDR_VAR 0 9
23123: PUSH
23124: LD_VAR 0 9
23128: PPUSH
23129: LD_VAR 0 7
23133: PPUSH
23134: LD_VAR 0 6
23138: PUSH
23139: LD_VAR 0 7
23143: ARRAY
23144: PUSH
23145: LD_INT 1
23147: ARRAY
23148: PPUSH
23149: CALL_OW 1
23153: ST_TO_ADDR
23154: GO 23116
23156: POP
23157: POP
// result := tmp ;
23158: LD_ADDR_VAR 0 6
23162: PUSH
23163: LD_VAR 0 9
23167: ST_TO_ADDR
// end ; end ;
23168: LD_VAR 0 6
23172: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23173: LD_INT 0
23175: PPUSH
23176: PPUSH
23177: PPUSH
23178: PPUSH
23179: PPUSH
23180: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23181: LD_ADDR_VAR 0 5
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: EMPTY
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: ST_TO_ADDR
// if not x or not y then
23203: LD_VAR 0 2
23207: NOT
23208: PUSH
23209: LD_VAR 0 3
23213: NOT
23214: OR
23215: IFFALSE 23219
// exit ;
23217: GO 24865
// if not range then
23219: LD_VAR 0 4
23223: NOT
23224: IFFALSE 23234
// range := 10 ;
23226: LD_ADDR_VAR 0 4
23230: PUSH
23231: LD_INT 10
23233: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23234: LD_ADDR_VAR 0 8
23238: PUSH
23239: LD_INT 81
23241: PUSH
23242: LD_VAR 0 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 92
23253: PUSH
23254: LD_VAR 0 2
23258: PUSH
23259: LD_VAR 0 3
23263: PUSH
23264: LD_VAR 0 4
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 3
23277: PUSH
23278: LD_INT 21
23280: PUSH
23281: LD_INT 3
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: PPUSH
23297: CALL_OW 69
23301: ST_TO_ADDR
// if not tmp then
23302: LD_VAR 0 8
23306: NOT
23307: IFFALSE 23311
// exit ;
23309: GO 24865
// for i in tmp do
23311: LD_ADDR_VAR 0 6
23315: PUSH
23316: LD_VAR 0 8
23320: PUSH
23321: FOR_IN
23322: IFFALSE 24840
// begin points := [ 0 , 0 , 0 ] ;
23324: LD_ADDR_VAR 0 9
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: LD_INT 0
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: LIST
23342: ST_TO_ADDR
// bpoints := 1 ;
23343: LD_ADDR_VAR 0 10
23347: PUSH
23348: LD_INT 1
23350: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23351: LD_VAR 0 6
23355: PPUSH
23356: CALL_OW 247
23360: PUSH
23361: LD_INT 1
23363: DOUBLE
23364: EQUAL
23365: IFTRUE 23369
23367: GO 23947
23369: POP
// begin if GetClass ( i ) = 1 then
23370: LD_VAR 0 6
23374: PPUSH
23375: CALL_OW 257
23379: PUSH
23380: LD_INT 1
23382: EQUAL
23383: IFFALSE 23404
// points := [ 10 , 5 , 3 ] ;
23385: LD_ADDR_VAR 0 9
23389: PUSH
23390: LD_INT 10
23392: PUSH
23393: LD_INT 5
23395: PUSH
23396: LD_INT 3
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23404: LD_VAR 0 6
23408: PPUSH
23409: CALL_OW 257
23413: PUSH
23414: LD_INT 2
23416: PUSH
23417: LD_INT 3
23419: PUSH
23420: LD_INT 4
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: IN
23428: IFFALSE 23449
// points := [ 3 , 2 , 1 ] ;
23430: LD_ADDR_VAR 0 9
23434: PUSH
23435: LD_INT 3
23437: PUSH
23438: LD_INT 2
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: LIST
23448: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23449: LD_VAR 0 6
23453: PPUSH
23454: CALL_OW 257
23458: PUSH
23459: LD_INT 5
23461: EQUAL
23462: IFFALSE 23483
// points := [ 130 , 5 , 2 ] ;
23464: LD_ADDR_VAR 0 9
23468: PUSH
23469: LD_INT 130
23471: PUSH
23472: LD_INT 5
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: LIST
23482: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23483: LD_VAR 0 6
23487: PPUSH
23488: CALL_OW 257
23492: PUSH
23493: LD_INT 8
23495: EQUAL
23496: IFFALSE 23517
// points := [ 35 , 35 , 30 ] ;
23498: LD_ADDR_VAR 0 9
23502: PUSH
23503: LD_INT 35
23505: PUSH
23506: LD_INT 35
23508: PUSH
23509: LD_INT 30
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: LIST
23516: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23517: LD_VAR 0 6
23521: PPUSH
23522: CALL_OW 257
23526: PUSH
23527: LD_INT 9
23529: EQUAL
23530: IFFALSE 23551
// points := [ 20 , 55 , 40 ] ;
23532: LD_ADDR_VAR 0 9
23536: PUSH
23537: LD_INT 20
23539: PUSH
23540: LD_INT 55
23542: PUSH
23543: LD_INT 40
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23551: LD_VAR 0 6
23555: PPUSH
23556: CALL_OW 257
23560: PUSH
23561: LD_INT 12
23563: PUSH
23564: LD_INT 16
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: IN
23571: IFFALSE 23592
// points := [ 5 , 3 , 2 ] ;
23573: LD_ADDR_VAR 0 9
23577: PUSH
23578: LD_INT 5
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23592: LD_VAR 0 6
23596: PPUSH
23597: CALL_OW 257
23601: PUSH
23602: LD_INT 17
23604: EQUAL
23605: IFFALSE 23626
// points := [ 100 , 50 , 75 ] ;
23607: LD_ADDR_VAR 0 9
23611: PUSH
23612: LD_INT 100
23614: PUSH
23615: LD_INT 50
23617: PUSH
23618: LD_INT 75
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: LIST
23625: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23626: LD_VAR 0 6
23630: PPUSH
23631: CALL_OW 257
23635: PUSH
23636: LD_INT 15
23638: EQUAL
23639: IFFALSE 23660
// points := [ 10 , 5 , 3 ] ;
23641: LD_ADDR_VAR 0 9
23645: PUSH
23646: LD_INT 10
23648: PUSH
23649: LD_INT 5
23651: PUSH
23652: LD_INT 3
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: LIST
23659: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23660: LD_VAR 0 6
23664: PPUSH
23665: CALL_OW 257
23669: PUSH
23670: LD_INT 14
23672: EQUAL
23673: IFFALSE 23694
// points := [ 10 , 0 , 0 ] ;
23675: LD_ADDR_VAR 0 9
23679: PUSH
23680: LD_INT 10
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: LD_INT 0
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23694: LD_VAR 0 6
23698: PPUSH
23699: CALL_OW 257
23703: PUSH
23704: LD_INT 11
23706: EQUAL
23707: IFFALSE 23728
// points := [ 30 , 10 , 5 ] ;
23709: LD_ADDR_VAR 0 9
23713: PUSH
23714: LD_INT 30
23716: PUSH
23717: LD_INT 10
23719: PUSH
23720: LD_INT 5
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23728: LD_VAR 0 1
23732: PPUSH
23733: LD_INT 5
23735: PPUSH
23736: CALL_OW 321
23740: PUSH
23741: LD_INT 2
23743: EQUAL
23744: IFFALSE 23761
// bpoints := bpoints * 1.8 ;
23746: LD_ADDR_VAR 0 10
23750: PUSH
23751: LD_VAR 0 10
23755: PUSH
23756: LD_REAL  1.80000000000000E+0000
23759: MUL
23760: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23761: LD_VAR 0 6
23765: PPUSH
23766: CALL_OW 257
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: LD_INT 2
23776: PUSH
23777: LD_INT 3
23779: PUSH
23780: LD_INT 4
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: IN
23789: PUSH
23790: LD_VAR 0 1
23794: PPUSH
23795: LD_INT 51
23797: PPUSH
23798: CALL_OW 321
23802: PUSH
23803: LD_INT 2
23805: EQUAL
23806: AND
23807: IFFALSE 23824
// bpoints := bpoints * 1.2 ;
23809: LD_ADDR_VAR 0 10
23813: PUSH
23814: LD_VAR 0 10
23818: PUSH
23819: LD_REAL  1.20000000000000E+0000
23822: MUL
23823: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23824: LD_VAR 0 6
23828: PPUSH
23829: CALL_OW 257
23833: PUSH
23834: LD_INT 5
23836: PUSH
23837: LD_INT 7
23839: PUSH
23840: LD_INT 9
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: IN
23848: PUSH
23849: LD_VAR 0 1
23853: PPUSH
23854: LD_INT 52
23856: PPUSH
23857: CALL_OW 321
23861: PUSH
23862: LD_INT 2
23864: EQUAL
23865: AND
23866: IFFALSE 23883
// bpoints := bpoints * 1.5 ;
23868: LD_ADDR_VAR 0 10
23872: PUSH
23873: LD_VAR 0 10
23877: PUSH
23878: LD_REAL  1.50000000000000E+0000
23881: MUL
23882: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23883: LD_VAR 0 1
23887: PPUSH
23888: LD_INT 66
23890: PPUSH
23891: CALL_OW 321
23895: PUSH
23896: LD_INT 2
23898: EQUAL
23899: IFFALSE 23916
// bpoints := bpoints * 1.1 ;
23901: LD_ADDR_VAR 0 10
23905: PUSH
23906: LD_VAR 0 10
23910: PUSH
23911: LD_REAL  1.10000000000000E+0000
23914: MUL
23915: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23916: LD_ADDR_VAR 0 10
23920: PUSH
23921: LD_VAR 0 10
23925: PUSH
23926: LD_VAR 0 6
23930: PPUSH
23931: LD_INT 1
23933: PPUSH
23934: CALL_OW 259
23938: PUSH
23939: LD_REAL  1.15000000000000E+0000
23942: MUL
23943: MUL
23944: ST_TO_ADDR
// end ; unit_vehicle :
23945: GO 24769
23947: LD_INT 2
23949: DOUBLE
23950: EQUAL
23951: IFTRUE 23955
23953: GO 24757
23955: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23956: LD_VAR 0 6
23960: PPUSH
23961: CALL_OW 264
23965: PUSH
23966: LD_INT 2
23968: PUSH
23969: LD_INT 42
23971: PUSH
23972: LD_INT 24
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: LIST
23979: IN
23980: IFFALSE 24001
// points := [ 25 , 5 , 3 ] ;
23982: LD_ADDR_VAR 0 9
23986: PUSH
23987: LD_INT 25
23989: PUSH
23990: LD_INT 5
23992: PUSH
23993: LD_INT 3
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24001: LD_VAR 0 6
24005: PPUSH
24006: CALL_OW 264
24010: PUSH
24011: LD_INT 4
24013: PUSH
24014: LD_INT 43
24016: PUSH
24017: LD_INT 25
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: LIST
24024: IN
24025: IFFALSE 24046
// points := [ 40 , 15 , 5 ] ;
24027: LD_ADDR_VAR 0 9
24031: PUSH
24032: LD_INT 40
24034: PUSH
24035: LD_INT 15
24037: PUSH
24038: LD_INT 5
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24046: LD_VAR 0 6
24050: PPUSH
24051: CALL_OW 264
24055: PUSH
24056: LD_INT 3
24058: PUSH
24059: LD_INT 23
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: IN
24066: IFFALSE 24087
// points := [ 7 , 25 , 8 ] ;
24068: LD_ADDR_VAR 0 9
24072: PUSH
24073: LD_INT 7
24075: PUSH
24076: LD_INT 25
24078: PUSH
24079: LD_INT 8
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24087: LD_VAR 0 6
24091: PPUSH
24092: CALL_OW 264
24096: PUSH
24097: LD_INT 5
24099: PUSH
24100: LD_INT 27
24102: PUSH
24103: LD_INT 44
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: LIST
24110: IN
24111: IFFALSE 24132
// points := [ 14 , 50 , 16 ] ;
24113: LD_ADDR_VAR 0 9
24117: PUSH
24118: LD_INT 14
24120: PUSH
24121: LD_INT 50
24123: PUSH
24124: LD_INT 16
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: LIST
24131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24132: LD_VAR 0 6
24136: PPUSH
24137: CALL_OW 264
24141: PUSH
24142: LD_INT 6
24144: PUSH
24145: LD_INT 46
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: IN
24152: IFFALSE 24173
// points := [ 32 , 120 , 70 ] ;
24154: LD_ADDR_VAR 0 9
24158: PUSH
24159: LD_INT 32
24161: PUSH
24162: LD_INT 120
24164: PUSH
24165: LD_INT 70
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
24173: LD_VAR 0 6
24177: PPUSH
24178: CALL_OW 264
24182: PUSH
24183: LD_INT 7
24185: PUSH
24186: LD_INT 28
24188: PUSH
24189: LD_INT 45
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: IN
24197: IFFALSE 24218
// points := [ 35 , 20 , 45 ] ;
24199: LD_ADDR_VAR 0 9
24203: PUSH
24204: LD_INT 35
24206: PUSH
24207: LD_INT 20
24209: PUSH
24210: LD_INT 45
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24218: LD_VAR 0 6
24222: PPUSH
24223: CALL_OW 264
24227: PUSH
24228: LD_INT 47
24230: PUSH
24231: EMPTY
24232: LIST
24233: IN
24234: IFFALSE 24255
// points := [ 67 , 45 , 75 ] ;
24236: LD_ADDR_VAR 0 9
24240: PUSH
24241: LD_INT 67
24243: PUSH
24244: LD_INT 45
24246: PUSH
24247: LD_INT 75
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24255: LD_VAR 0 6
24259: PPUSH
24260: CALL_OW 264
24264: PUSH
24265: LD_INT 26
24267: PUSH
24268: EMPTY
24269: LIST
24270: IN
24271: IFFALSE 24292
// points := [ 120 , 30 , 80 ] ;
24273: LD_ADDR_VAR 0 9
24277: PUSH
24278: LD_INT 120
24280: PUSH
24281: LD_INT 30
24283: PUSH
24284: LD_INT 80
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24292: LD_VAR 0 6
24296: PPUSH
24297: CALL_OW 264
24301: PUSH
24302: LD_INT 22
24304: PUSH
24305: EMPTY
24306: LIST
24307: IN
24308: IFFALSE 24329
// points := [ 40 , 1 , 1 ] ;
24310: LD_ADDR_VAR 0 9
24314: PUSH
24315: LD_INT 40
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24329: LD_VAR 0 6
24333: PPUSH
24334: CALL_OW 264
24338: PUSH
24339: LD_INT 29
24341: PUSH
24342: EMPTY
24343: LIST
24344: IN
24345: IFFALSE 24366
// points := [ 70 , 200 , 400 ] ;
24347: LD_ADDR_VAR 0 9
24351: PUSH
24352: LD_INT 70
24354: PUSH
24355: LD_INT 200
24357: PUSH
24358: LD_INT 400
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24366: LD_VAR 0 6
24370: PPUSH
24371: CALL_OW 264
24375: PUSH
24376: LD_INT 14
24378: PUSH
24379: LD_INT 53
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: IN
24386: IFFALSE 24407
// points := [ 40 , 10 , 20 ] ;
24388: LD_ADDR_VAR 0 9
24392: PUSH
24393: LD_INT 40
24395: PUSH
24396: LD_INT 10
24398: PUSH
24399: LD_INT 20
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24407: LD_VAR 0 6
24411: PPUSH
24412: CALL_OW 264
24416: PUSH
24417: LD_INT 9
24419: PUSH
24420: EMPTY
24421: LIST
24422: IN
24423: IFFALSE 24444
// points := [ 5 , 70 , 20 ] ;
24425: LD_ADDR_VAR 0 9
24429: PUSH
24430: LD_INT 5
24432: PUSH
24433: LD_INT 70
24435: PUSH
24436: LD_INT 20
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: LIST
24443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24444: LD_VAR 0 6
24448: PPUSH
24449: CALL_OW 264
24453: PUSH
24454: LD_INT 10
24456: PUSH
24457: EMPTY
24458: LIST
24459: IN
24460: IFFALSE 24481
// points := [ 35 , 110 , 70 ] ;
24462: LD_ADDR_VAR 0 9
24466: PUSH
24467: LD_INT 35
24469: PUSH
24470: LD_INT 110
24472: PUSH
24473: LD_INT 70
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: LIST
24480: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24481: LD_VAR 0 6
24485: PPUSH
24486: CALL_OW 265
24490: PUSH
24491: LD_INT 25
24493: EQUAL
24494: IFFALSE 24515
// points := [ 80 , 65 , 100 ] ;
24496: LD_ADDR_VAR 0 9
24500: PUSH
24501: LD_INT 80
24503: PUSH
24504: LD_INT 65
24506: PUSH
24507: LD_INT 100
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: LIST
24514: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24515: LD_VAR 0 6
24519: PPUSH
24520: CALL_OW 263
24524: PUSH
24525: LD_INT 1
24527: EQUAL
24528: IFFALSE 24563
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24530: LD_ADDR_VAR 0 10
24534: PUSH
24535: LD_VAR 0 10
24539: PUSH
24540: LD_VAR 0 6
24544: PPUSH
24545: CALL_OW 311
24549: PPUSH
24550: LD_INT 3
24552: PPUSH
24553: CALL_OW 259
24557: PUSH
24558: LD_INT 4
24560: MUL
24561: MUL
24562: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24563: LD_VAR 0 6
24567: PPUSH
24568: CALL_OW 263
24572: PUSH
24573: LD_INT 2
24575: EQUAL
24576: IFFALSE 24627
// begin j := IsControledBy ( i ) ;
24578: LD_ADDR_VAR 0 7
24582: PUSH
24583: LD_VAR 0 6
24587: PPUSH
24588: CALL_OW 312
24592: ST_TO_ADDR
// if j then
24593: LD_VAR 0 7
24597: IFFALSE 24627
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24599: LD_ADDR_VAR 0 10
24603: PUSH
24604: LD_VAR 0 10
24608: PUSH
24609: LD_VAR 0 7
24613: PPUSH
24614: LD_INT 3
24616: PPUSH
24617: CALL_OW 259
24621: PUSH
24622: LD_INT 3
24624: MUL
24625: MUL
24626: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24627: LD_VAR 0 6
24631: PPUSH
24632: CALL_OW 264
24636: PUSH
24637: LD_INT 5
24639: PUSH
24640: LD_INT 6
24642: PUSH
24643: LD_INT 46
24645: PUSH
24646: LD_INT 44
24648: PUSH
24649: LD_INT 47
24651: PUSH
24652: LD_INT 45
24654: PUSH
24655: LD_INT 28
24657: PUSH
24658: LD_INT 7
24660: PUSH
24661: LD_INT 27
24663: PUSH
24664: LD_INT 29
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: IN
24679: PUSH
24680: LD_VAR 0 1
24684: PPUSH
24685: LD_INT 52
24687: PPUSH
24688: CALL_OW 321
24692: PUSH
24693: LD_INT 2
24695: EQUAL
24696: AND
24697: IFFALSE 24714
// bpoints := bpoints * 1.2 ;
24699: LD_ADDR_VAR 0 10
24703: PUSH
24704: LD_VAR 0 10
24708: PUSH
24709: LD_REAL  1.20000000000000E+0000
24712: MUL
24713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24714: LD_VAR 0 6
24718: PPUSH
24719: CALL_OW 264
24723: PUSH
24724: LD_INT 6
24726: PUSH
24727: LD_INT 46
24729: PUSH
24730: LD_INT 47
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: IN
24738: IFFALSE 24755
// bpoints := bpoints * 1.2 ;
24740: LD_ADDR_VAR 0 10
24744: PUSH
24745: LD_VAR 0 10
24749: PUSH
24750: LD_REAL  1.20000000000000E+0000
24753: MUL
24754: ST_TO_ADDR
// end ; unit_building :
24755: GO 24769
24757: LD_INT 3
24759: DOUBLE
24760: EQUAL
24761: IFTRUE 24765
24763: GO 24768
24765: POP
// ; end ;
24766: GO 24769
24768: POP
// for j = 1 to 3 do
24769: LD_ADDR_VAR 0 7
24773: PUSH
24774: DOUBLE
24775: LD_INT 1
24777: DEC
24778: ST_TO_ADDR
24779: LD_INT 3
24781: PUSH
24782: FOR_TO
24783: IFFALSE 24836
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24785: LD_ADDR_VAR 0 5
24789: PUSH
24790: LD_VAR 0 5
24794: PPUSH
24795: LD_VAR 0 7
24799: PPUSH
24800: LD_VAR 0 5
24804: PUSH
24805: LD_VAR 0 7
24809: ARRAY
24810: PUSH
24811: LD_VAR 0 9
24815: PUSH
24816: LD_VAR 0 7
24820: ARRAY
24821: PUSH
24822: LD_VAR 0 10
24826: MUL
24827: PLUS
24828: PPUSH
24829: CALL_OW 1
24833: ST_TO_ADDR
24834: GO 24782
24836: POP
24837: POP
// end ;
24838: GO 23321
24840: POP
24841: POP
// result := Replace ( result , 4 , tmp ) ;
24842: LD_ADDR_VAR 0 5
24846: PUSH
24847: LD_VAR 0 5
24851: PPUSH
24852: LD_INT 4
24854: PPUSH
24855: LD_VAR 0 8
24859: PPUSH
24860: CALL_OW 1
24864: ST_TO_ADDR
// end ;
24865: LD_VAR 0 5
24869: RET
// export function DangerAtRange ( unit , range ) ; begin
24870: LD_INT 0
24872: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24873: LD_ADDR_VAR 0 3
24877: PUSH
24878: LD_VAR 0 1
24882: PPUSH
24883: CALL_OW 255
24887: PPUSH
24888: LD_VAR 0 1
24892: PPUSH
24893: CALL_OW 250
24897: PPUSH
24898: LD_VAR 0 1
24902: PPUSH
24903: CALL_OW 251
24907: PPUSH
24908: LD_VAR 0 2
24912: PPUSH
24913: CALL 23173 0 4
24917: ST_TO_ADDR
// end ;
24918: LD_VAR 0 3
24922: RET
// export function DangerInArea ( side , area ) ; begin
24923: LD_INT 0
24925: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24926: LD_ADDR_VAR 0 3
24930: PUSH
24931: LD_VAR 0 2
24935: PPUSH
24936: LD_INT 81
24938: PUSH
24939: LD_VAR 0 1
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PPUSH
24948: CALL_OW 70
24952: ST_TO_ADDR
// end ;
24953: LD_VAR 0 3
24957: RET
// export function IsExtension ( b ) ; begin
24958: LD_INT 0
24960: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24961: LD_ADDR_VAR 0 2
24965: PUSH
24966: LD_VAR 0 1
24970: PUSH
24971: LD_INT 23
24973: PUSH
24974: LD_INT 20
24976: PUSH
24977: LD_INT 22
24979: PUSH
24980: LD_INT 17
24982: PUSH
24983: LD_INT 24
24985: PUSH
24986: LD_INT 21
24988: PUSH
24989: LD_INT 19
24991: PUSH
24992: LD_INT 16
24994: PUSH
24995: LD_INT 25
24997: PUSH
24998: LD_INT 18
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: IN
25013: ST_TO_ADDR
// end ;
25014: LD_VAR 0 2
25018: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25019: LD_INT 0
25021: PPUSH
25022: PPUSH
25023: PPUSH
// result := [ ] ;
25024: LD_ADDR_VAR 0 4
25028: PUSH
25029: EMPTY
25030: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25031: LD_ADDR_VAR 0 5
25035: PUSH
25036: LD_VAR 0 2
25040: PPUSH
25041: LD_INT 21
25043: PUSH
25044: LD_INT 3
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PPUSH
25051: CALL_OW 70
25055: ST_TO_ADDR
// if not tmp then
25056: LD_VAR 0 5
25060: NOT
25061: IFFALSE 25065
// exit ;
25063: GO 25129
// if checkLink then
25065: LD_VAR 0 3
25069: IFFALSE 25119
// begin for i in tmp do
25071: LD_ADDR_VAR 0 6
25075: PUSH
25076: LD_VAR 0 5
25080: PUSH
25081: FOR_IN
25082: IFFALSE 25117
// if GetBase ( i ) <> base then
25084: LD_VAR 0 6
25088: PPUSH
25089: CALL_OW 274
25093: PUSH
25094: LD_VAR 0 1
25098: NONEQUAL
25099: IFFALSE 25115
// ComLinkToBase ( base , i ) ;
25101: LD_VAR 0 1
25105: PPUSH
25106: LD_VAR 0 6
25110: PPUSH
25111: CALL_OW 169
25115: GO 25081
25117: POP
25118: POP
// end ; result := tmp ;
25119: LD_ADDR_VAR 0 4
25123: PUSH
25124: LD_VAR 0 5
25128: ST_TO_ADDR
// end ;
25129: LD_VAR 0 4
25133: RET
// export function ComComplete ( units , b ) ; var i ; begin
25134: LD_INT 0
25136: PPUSH
25137: PPUSH
// if not units then
25138: LD_VAR 0 1
25142: NOT
25143: IFFALSE 25147
// exit ;
25145: GO 25237
// for i in units do
25147: LD_ADDR_VAR 0 4
25151: PUSH
25152: LD_VAR 0 1
25156: PUSH
25157: FOR_IN
25158: IFFALSE 25235
// if BuildingStatus ( b ) = bs_build then
25160: LD_VAR 0 2
25164: PPUSH
25165: CALL_OW 461
25169: PUSH
25170: LD_INT 1
25172: EQUAL
25173: IFFALSE 25233
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25175: LD_VAR 0 4
25179: PPUSH
25180: LD_STRING h
25182: PUSH
25183: LD_VAR 0 2
25187: PPUSH
25188: CALL_OW 250
25192: PUSH
25193: LD_VAR 0 2
25197: PPUSH
25198: CALL_OW 251
25202: PUSH
25203: LD_VAR 0 2
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: PPUSH
25229: CALL_OW 446
25233: GO 25157
25235: POP
25236: POP
// end ;
25237: LD_VAR 0 3
25241: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25242: LD_INT 0
25244: PPUSH
25245: PPUSH
25246: PPUSH
25247: PPUSH
25248: PPUSH
25249: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
25250: LD_VAR 0 1
25254: NOT
25255: PUSH
25256: LD_VAR 0 1
25260: PPUSH
25261: CALL_OW 263
25265: PUSH
25266: LD_INT 2
25268: EQUAL
25269: NOT
25270: OR
25271: IFFALSE 25275
// exit ;
25273: GO 25591
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25275: LD_ADDR_VAR 0 6
25279: PUSH
25280: LD_INT 22
25282: PUSH
25283: LD_VAR 0 1
25287: PPUSH
25288: CALL_OW 255
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 30
25302: PUSH
25303: LD_INT 36
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 34
25312: PUSH
25313: LD_INT 31
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PPUSH
25329: CALL_OW 69
25333: ST_TO_ADDR
// if not tmp then
25334: LD_VAR 0 6
25338: NOT
25339: IFFALSE 25343
// exit ;
25341: GO 25591
// result := [ ] ;
25343: LD_ADDR_VAR 0 2
25347: PUSH
25348: EMPTY
25349: ST_TO_ADDR
// for i in tmp do
25350: LD_ADDR_VAR 0 3
25354: PUSH
25355: LD_VAR 0 6
25359: PUSH
25360: FOR_IN
25361: IFFALSE 25432
// begin t := UnitsInside ( i ) ;
25363: LD_ADDR_VAR 0 4
25367: PUSH
25368: LD_VAR 0 3
25372: PPUSH
25373: CALL_OW 313
25377: ST_TO_ADDR
// if t then
25378: LD_VAR 0 4
25382: IFFALSE 25430
// for j in t do
25384: LD_ADDR_VAR 0 7
25388: PUSH
25389: LD_VAR 0 4
25393: PUSH
25394: FOR_IN
25395: IFFALSE 25428
// result := Insert ( result , result + 1 , j ) ;
25397: LD_ADDR_VAR 0 2
25401: PUSH
25402: LD_VAR 0 2
25406: PPUSH
25407: LD_VAR 0 2
25411: PUSH
25412: LD_INT 1
25414: PLUS
25415: PPUSH
25416: LD_VAR 0 7
25420: PPUSH
25421: CALL_OW 2
25425: ST_TO_ADDR
25426: GO 25394
25428: POP
25429: POP
// end ;
25430: GO 25360
25432: POP
25433: POP
// if not result then
25434: LD_VAR 0 2
25438: NOT
25439: IFFALSE 25443
// exit ;
25441: GO 25591
// mech := result [ 1 ] ;
25443: LD_ADDR_VAR 0 5
25447: PUSH
25448: LD_VAR 0 2
25452: PUSH
25453: LD_INT 1
25455: ARRAY
25456: ST_TO_ADDR
// if result > 1 then
25457: LD_VAR 0 2
25461: PUSH
25462: LD_INT 1
25464: GREATER
25465: IFFALSE 25577
// for i = 2 to result do
25467: LD_ADDR_VAR 0 3
25471: PUSH
25472: DOUBLE
25473: LD_INT 2
25475: DEC
25476: ST_TO_ADDR
25477: LD_VAR 0 2
25481: PUSH
25482: FOR_TO
25483: IFFALSE 25575
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25485: LD_ADDR_VAR 0 4
25489: PUSH
25490: LD_VAR 0 2
25494: PUSH
25495: LD_VAR 0 3
25499: ARRAY
25500: PPUSH
25501: LD_INT 3
25503: PPUSH
25504: CALL_OW 259
25508: PUSH
25509: LD_VAR 0 2
25513: PUSH
25514: LD_VAR 0 3
25518: ARRAY
25519: PPUSH
25520: CALL_OW 432
25524: MINUS
25525: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25526: LD_VAR 0 4
25530: PUSH
25531: LD_VAR 0 5
25535: PPUSH
25536: LD_INT 3
25538: PPUSH
25539: CALL_OW 259
25543: PUSH
25544: LD_VAR 0 5
25548: PPUSH
25549: CALL_OW 432
25553: MINUS
25554: GREATEREQUAL
25555: IFFALSE 25573
// mech := result [ i ] ;
25557: LD_ADDR_VAR 0 5
25561: PUSH
25562: LD_VAR 0 2
25566: PUSH
25567: LD_VAR 0 3
25571: ARRAY
25572: ST_TO_ADDR
// end ;
25573: GO 25482
25575: POP
25576: POP
// ComLinkTo ( vehicle , mech ) ;
25577: LD_VAR 0 1
25581: PPUSH
25582: LD_VAR 0 5
25586: PPUSH
25587: CALL_OW 135
// end ;
25591: LD_VAR 0 2
25595: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25596: LD_INT 0
25598: PPUSH
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
25603: PPUSH
25604: PPUSH
25605: PPUSH
25606: PPUSH
25607: PPUSH
25608: PPUSH
25609: PPUSH
25610: PPUSH
// result := [ ] ;
25611: LD_ADDR_VAR 0 7
25615: PUSH
25616: EMPTY
25617: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25618: LD_VAR 0 1
25622: PPUSH
25623: CALL_OW 266
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: IN
25638: NOT
25639: IFFALSE 25643
// exit ;
25641: GO 27277
// if name then
25643: LD_VAR 0 3
25647: IFFALSE 25663
// SetBName ( base_dep , name ) ;
25649: LD_VAR 0 1
25653: PPUSH
25654: LD_VAR 0 3
25658: PPUSH
25659: CALL_OW 500
// base := GetBase ( base_dep ) ;
25663: LD_ADDR_VAR 0 15
25667: PUSH
25668: LD_VAR 0 1
25672: PPUSH
25673: CALL_OW 274
25677: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25678: LD_ADDR_VAR 0 16
25682: PUSH
25683: LD_VAR 0 1
25687: PPUSH
25688: CALL_OW 255
25692: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25693: LD_ADDR_VAR 0 17
25697: PUSH
25698: LD_VAR 0 1
25702: PPUSH
25703: CALL_OW 248
25707: ST_TO_ADDR
// if sources then
25708: LD_VAR 0 5
25712: IFFALSE 25759
// for i = 1 to 3 do
25714: LD_ADDR_VAR 0 8
25718: PUSH
25719: DOUBLE
25720: LD_INT 1
25722: DEC
25723: ST_TO_ADDR
25724: LD_INT 3
25726: PUSH
25727: FOR_TO
25728: IFFALSE 25757
// AddResourceType ( base , i , sources [ i ] ) ;
25730: LD_VAR 0 15
25734: PPUSH
25735: LD_VAR 0 8
25739: PPUSH
25740: LD_VAR 0 5
25744: PUSH
25745: LD_VAR 0 8
25749: ARRAY
25750: PPUSH
25751: CALL_OW 276
25755: GO 25727
25757: POP
25758: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25759: LD_ADDR_VAR 0 18
25763: PUSH
25764: LD_VAR 0 15
25768: PPUSH
25769: LD_VAR 0 2
25773: PPUSH
25774: LD_INT 1
25776: PPUSH
25777: CALL 25019 0 3
25781: ST_TO_ADDR
// InitHc ;
25782: CALL_OW 19
// InitUc ;
25786: CALL_OW 18
// uc_side := side ;
25790: LD_ADDR_OWVAR 20
25794: PUSH
25795: LD_VAR 0 16
25799: ST_TO_ADDR
// uc_nation := nation ;
25800: LD_ADDR_OWVAR 21
25804: PUSH
25805: LD_VAR 0 17
25809: ST_TO_ADDR
// if buildings then
25810: LD_VAR 0 18
25814: IFFALSE 27136
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25816: LD_ADDR_VAR 0 19
25820: PUSH
25821: LD_VAR 0 18
25825: PPUSH
25826: LD_INT 2
25828: PUSH
25829: LD_INT 30
25831: PUSH
25832: LD_INT 29
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 30
25841: PUSH
25842: LD_INT 30
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: PPUSH
25854: CALL_OW 72
25858: ST_TO_ADDR
// if tmp then
25859: LD_VAR 0 19
25863: IFFALSE 25911
// for i in tmp do
25865: LD_ADDR_VAR 0 8
25869: PUSH
25870: LD_VAR 0 19
25874: PUSH
25875: FOR_IN
25876: IFFALSE 25909
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25878: LD_VAR 0 8
25882: PPUSH
25883: CALL_OW 250
25887: PPUSH
25888: LD_VAR 0 8
25892: PPUSH
25893: CALL_OW 251
25897: PPUSH
25898: LD_VAR 0 16
25902: PPUSH
25903: CALL_OW 441
25907: GO 25875
25909: POP
25910: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25911: LD_VAR 0 18
25915: PPUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 30
25921: PUSH
25922: LD_INT 32
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 30
25931: PUSH
25932: LD_INT 33
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: LIST
25943: PPUSH
25944: CALL_OW 72
25948: IFFALSE 26036
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25950: LD_ADDR_VAR 0 8
25954: PUSH
25955: LD_VAR 0 18
25959: PPUSH
25960: LD_INT 2
25962: PUSH
25963: LD_INT 30
25965: PUSH
25966: LD_INT 32
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 30
25975: PUSH
25976: LD_INT 33
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: LIST
25987: PPUSH
25988: CALL_OW 72
25992: PUSH
25993: FOR_IN
25994: IFFALSE 26034
// begin if not GetBWeapon ( i ) then
25996: LD_VAR 0 8
26000: PPUSH
26001: CALL_OW 269
26005: NOT
26006: IFFALSE 26032
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26008: LD_VAR 0 8
26012: PPUSH
26013: LD_VAR 0 8
26017: PPUSH
26018: LD_VAR 0 2
26022: PPUSH
26023: CALL 27282 0 2
26027: PPUSH
26028: CALL_OW 431
// end ;
26032: GO 25993
26034: POP
26035: POP
// end ; for i = 1 to personel do
26036: LD_ADDR_VAR 0 8
26040: PUSH
26041: DOUBLE
26042: LD_INT 1
26044: DEC
26045: ST_TO_ADDR
26046: LD_VAR 0 6
26050: PUSH
26051: FOR_TO
26052: IFFALSE 27116
// begin if i > 4 then
26054: LD_VAR 0 8
26058: PUSH
26059: LD_INT 4
26061: GREATER
26062: IFFALSE 26066
// break ;
26064: GO 27116
// case i of 1 :
26066: LD_VAR 0 8
26070: PUSH
26071: LD_INT 1
26073: DOUBLE
26074: EQUAL
26075: IFTRUE 26079
26077: GO 26159
26079: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26080: LD_ADDR_VAR 0 12
26084: PUSH
26085: LD_VAR 0 18
26089: PPUSH
26090: LD_INT 22
26092: PUSH
26093: LD_VAR 0 16
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 58
26104: PUSH
26105: EMPTY
26106: LIST
26107: PUSH
26108: LD_INT 2
26110: PUSH
26111: LD_INT 30
26113: PUSH
26114: LD_INT 32
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 30
26123: PUSH
26124: LD_INT 4
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 30
26133: PUSH
26134: LD_INT 5
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: LIST
26151: PPUSH
26152: CALL_OW 72
26156: ST_TO_ADDR
26157: GO 26381
26159: LD_INT 2
26161: DOUBLE
26162: EQUAL
26163: IFTRUE 26167
26165: GO 26229
26167: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26168: LD_ADDR_VAR 0 12
26172: PUSH
26173: LD_VAR 0 18
26177: PPUSH
26178: LD_INT 22
26180: PUSH
26181: LD_VAR 0 16
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 30
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 30
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: LIST
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PPUSH
26222: CALL_OW 72
26226: ST_TO_ADDR
26227: GO 26381
26229: LD_INT 3
26231: DOUBLE
26232: EQUAL
26233: IFTRUE 26237
26235: GO 26299
26237: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26238: LD_ADDR_VAR 0 12
26242: PUSH
26243: LD_VAR 0 18
26247: PPUSH
26248: LD_INT 22
26250: PUSH
26251: LD_VAR 0 16
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: LD_INT 30
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 30
26275: PUSH
26276: LD_INT 3
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: LIST
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PPUSH
26292: CALL_OW 72
26296: ST_TO_ADDR
26297: GO 26381
26299: LD_INT 4
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26380
26307: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26308: LD_ADDR_VAR 0 12
26312: PUSH
26313: LD_VAR 0 18
26317: PPUSH
26318: LD_INT 22
26320: PUSH
26321: LD_VAR 0 16
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: LD_INT 30
26335: PUSH
26336: LD_INT 6
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 30
26345: PUSH
26346: LD_INT 7
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 30
26355: PUSH
26356: LD_INT 8
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PPUSH
26373: CALL_OW 72
26377: ST_TO_ADDR
26378: GO 26381
26380: POP
// if i = 1 then
26381: LD_VAR 0 8
26385: PUSH
26386: LD_INT 1
26388: EQUAL
26389: IFFALSE 26500
// begin tmp := [ ] ;
26391: LD_ADDR_VAR 0 19
26395: PUSH
26396: EMPTY
26397: ST_TO_ADDR
// for j in f do
26398: LD_ADDR_VAR 0 9
26402: PUSH
26403: LD_VAR 0 12
26407: PUSH
26408: FOR_IN
26409: IFFALSE 26482
// if GetBType ( j ) = b_bunker then
26411: LD_VAR 0 9
26415: PPUSH
26416: CALL_OW 266
26420: PUSH
26421: LD_INT 32
26423: EQUAL
26424: IFFALSE 26451
// tmp := Insert ( tmp , 1 , j ) else
26426: LD_ADDR_VAR 0 19
26430: PUSH
26431: LD_VAR 0 19
26435: PPUSH
26436: LD_INT 1
26438: PPUSH
26439: LD_VAR 0 9
26443: PPUSH
26444: CALL_OW 2
26448: ST_TO_ADDR
26449: GO 26480
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26451: LD_ADDR_VAR 0 19
26455: PUSH
26456: LD_VAR 0 19
26460: PPUSH
26461: LD_VAR 0 19
26465: PUSH
26466: LD_INT 1
26468: PLUS
26469: PPUSH
26470: LD_VAR 0 9
26474: PPUSH
26475: CALL_OW 2
26479: ST_TO_ADDR
26480: GO 26408
26482: POP
26483: POP
// if tmp then
26484: LD_VAR 0 19
26488: IFFALSE 26500
// f := tmp ;
26490: LD_ADDR_VAR 0 12
26494: PUSH
26495: LD_VAR 0 19
26499: ST_TO_ADDR
// end ; x := personel [ i ] ;
26500: LD_ADDR_VAR 0 13
26504: PUSH
26505: LD_VAR 0 6
26509: PUSH
26510: LD_VAR 0 8
26514: ARRAY
26515: ST_TO_ADDR
// if x = - 1 then
26516: LD_VAR 0 13
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: EQUAL
26525: IFFALSE 26734
// begin for j in f do
26527: LD_ADDR_VAR 0 9
26531: PUSH
26532: LD_VAR 0 12
26536: PUSH
26537: FOR_IN
26538: IFFALSE 26730
// repeat InitHc ;
26540: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26544: LD_VAR 0 9
26548: PPUSH
26549: CALL_OW 266
26553: PUSH
26554: LD_INT 5
26556: EQUAL
26557: IFFALSE 26627
// begin if UnitsInside ( j ) < 3 then
26559: LD_VAR 0 9
26563: PPUSH
26564: CALL_OW 313
26568: PUSH
26569: LD_INT 3
26571: LESS
26572: IFFALSE 26608
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26574: LD_INT 0
26576: PPUSH
26577: LD_INT 5
26579: PUSH
26580: LD_INT 8
26582: PUSH
26583: LD_INT 9
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: LIST
26590: PUSH
26591: LD_VAR 0 17
26595: ARRAY
26596: PPUSH
26597: LD_VAR 0 4
26601: PPUSH
26602: CALL_OW 380
26606: GO 26625
// PrepareHuman ( false , i , skill ) ;
26608: LD_INT 0
26610: PPUSH
26611: LD_VAR 0 8
26615: PPUSH
26616: LD_VAR 0 4
26620: PPUSH
26621: CALL_OW 380
// end else
26625: GO 26644
// PrepareHuman ( false , i , skill ) ;
26627: LD_INT 0
26629: PPUSH
26630: LD_VAR 0 8
26634: PPUSH
26635: LD_VAR 0 4
26639: PPUSH
26640: CALL_OW 380
// un := CreateHuman ;
26644: LD_ADDR_VAR 0 14
26648: PUSH
26649: CALL_OW 44
26653: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26654: LD_ADDR_VAR 0 7
26658: PUSH
26659: LD_VAR 0 7
26663: PPUSH
26664: LD_INT 1
26666: PPUSH
26667: LD_VAR 0 14
26671: PPUSH
26672: CALL_OW 2
26676: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26677: LD_VAR 0 14
26681: PPUSH
26682: LD_VAR 0 9
26686: PPUSH
26687: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26691: LD_VAR 0 9
26695: PPUSH
26696: CALL_OW 313
26700: PUSH
26701: LD_INT 6
26703: EQUAL
26704: PUSH
26705: LD_VAR 0 9
26709: PPUSH
26710: CALL_OW 266
26714: PUSH
26715: LD_INT 32
26717: PUSH
26718: LD_INT 31
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: IN
26725: OR
26726: IFFALSE 26540
26728: GO 26537
26730: POP
26731: POP
// end else
26732: GO 27114
// for j = 1 to x do
26734: LD_ADDR_VAR 0 9
26738: PUSH
26739: DOUBLE
26740: LD_INT 1
26742: DEC
26743: ST_TO_ADDR
26744: LD_VAR 0 13
26748: PUSH
26749: FOR_TO
26750: IFFALSE 27112
// begin InitHc ;
26752: CALL_OW 19
// if not f then
26756: LD_VAR 0 12
26760: NOT
26761: IFFALSE 26850
// begin PrepareHuman ( false , i , skill ) ;
26763: LD_INT 0
26765: PPUSH
26766: LD_VAR 0 8
26770: PPUSH
26771: LD_VAR 0 4
26775: PPUSH
26776: CALL_OW 380
// un := CreateHuman ;
26780: LD_ADDR_VAR 0 14
26784: PUSH
26785: CALL_OW 44
26789: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26790: LD_ADDR_VAR 0 7
26794: PUSH
26795: LD_VAR 0 7
26799: PPUSH
26800: LD_INT 1
26802: PPUSH
26803: LD_VAR 0 14
26807: PPUSH
26808: CALL_OW 2
26812: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26813: LD_VAR 0 14
26817: PPUSH
26818: LD_VAR 0 1
26822: PPUSH
26823: CALL_OW 250
26827: PPUSH
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 251
26837: PPUSH
26838: LD_INT 10
26840: PPUSH
26841: LD_INT 0
26843: PPUSH
26844: CALL_OW 50
// continue ;
26848: GO 26749
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26850: LD_VAR 0 12
26854: PUSH
26855: LD_INT 1
26857: ARRAY
26858: PPUSH
26859: CALL_OW 313
26863: PUSH
26864: LD_VAR 0 12
26868: PUSH
26869: LD_INT 1
26871: ARRAY
26872: PPUSH
26873: CALL_OW 266
26877: PUSH
26878: LD_INT 32
26880: PUSH
26881: LD_INT 31
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: IN
26888: AND
26889: PUSH
26890: LD_VAR 0 12
26894: PUSH
26895: LD_INT 1
26897: ARRAY
26898: PPUSH
26899: CALL_OW 313
26903: PUSH
26904: LD_INT 6
26906: EQUAL
26907: OR
26908: IFFALSE 26928
// f := Delete ( f , 1 ) ;
26910: LD_ADDR_VAR 0 12
26914: PUSH
26915: LD_VAR 0 12
26919: PPUSH
26920: LD_INT 1
26922: PPUSH
26923: CALL_OW 3
26927: ST_TO_ADDR
// if not f then
26928: LD_VAR 0 12
26932: NOT
26933: IFFALSE 26951
// begin x := x + 2 ;
26935: LD_ADDR_VAR 0 13
26939: PUSH
26940: LD_VAR 0 13
26944: PUSH
26945: LD_INT 2
26947: PLUS
26948: ST_TO_ADDR
// continue ;
26949: GO 26749
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26951: LD_VAR 0 12
26955: PUSH
26956: LD_INT 1
26958: ARRAY
26959: PPUSH
26960: CALL_OW 266
26964: PUSH
26965: LD_INT 5
26967: EQUAL
26968: IFFALSE 27042
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26970: LD_VAR 0 12
26974: PUSH
26975: LD_INT 1
26977: ARRAY
26978: PPUSH
26979: CALL_OW 313
26983: PUSH
26984: LD_INT 3
26986: LESS
26987: IFFALSE 27023
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26989: LD_INT 0
26991: PPUSH
26992: LD_INT 5
26994: PUSH
26995: LD_INT 8
26997: PUSH
26998: LD_INT 9
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: PUSH
27006: LD_VAR 0 17
27010: ARRAY
27011: PPUSH
27012: LD_VAR 0 4
27016: PPUSH
27017: CALL_OW 380
27021: GO 27040
// PrepareHuman ( false , i , skill ) ;
27023: LD_INT 0
27025: PPUSH
27026: LD_VAR 0 8
27030: PPUSH
27031: LD_VAR 0 4
27035: PPUSH
27036: CALL_OW 380
// end else
27040: GO 27059
// PrepareHuman ( false , i , skill ) ;
27042: LD_INT 0
27044: PPUSH
27045: LD_VAR 0 8
27049: PPUSH
27050: LD_VAR 0 4
27054: PPUSH
27055: CALL_OW 380
// un := CreateHuman ;
27059: LD_ADDR_VAR 0 14
27063: PUSH
27064: CALL_OW 44
27068: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27069: LD_ADDR_VAR 0 7
27073: PUSH
27074: LD_VAR 0 7
27078: PPUSH
27079: LD_INT 1
27081: PPUSH
27082: LD_VAR 0 14
27086: PPUSH
27087: CALL_OW 2
27091: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27092: LD_VAR 0 14
27096: PPUSH
27097: LD_VAR 0 12
27101: PUSH
27102: LD_INT 1
27104: ARRAY
27105: PPUSH
27106: CALL_OW 52
// end ;
27110: GO 26749
27112: POP
27113: POP
// end ;
27114: GO 26051
27116: POP
27117: POP
// result := result ^ buildings ;
27118: LD_ADDR_VAR 0 7
27122: PUSH
27123: LD_VAR 0 7
27127: PUSH
27128: LD_VAR 0 18
27132: ADD
27133: ST_TO_ADDR
// end else
27134: GO 27277
// begin for i = 1 to personel do
27136: LD_ADDR_VAR 0 8
27140: PUSH
27141: DOUBLE
27142: LD_INT 1
27144: DEC
27145: ST_TO_ADDR
27146: LD_VAR 0 6
27150: PUSH
27151: FOR_TO
27152: IFFALSE 27275
// begin if i > 4 then
27154: LD_VAR 0 8
27158: PUSH
27159: LD_INT 4
27161: GREATER
27162: IFFALSE 27166
// break ;
27164: GO 27275
// x := personel [ i ] ;
27166: LD_ADDR_VAR 0 13
27170: PUSH
27171: LD_VAR 0 6
27175: PUSH
27176: LD_VAR 0 8
27180: ARRAY
27181: ST_TO_ADDR
// if x = - 1 then
27182: LD_VAR 0 13
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: EQUAL
27191: IFFALSE 27195
// continue ;
27193: GO 27151
// PrepareHuman ( false , i , skill ) ;
27195: LD_INT 0
27197: PPUSH
27198: LD_VAR 0 8
27202: PPUSH
27203: LD_VAR 0 4
27207: PPUSH
27208: CALL_OW 380
// un := CreateHuman ;
27212: LD_ADDR_VAR 0 14
27216: PUSH
27217: CALL_OW 44
27221: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27222: LD_VAR 0 14
27226: PPUSH
27227: LD_VAR 0 1
27231: PPUSH
27232: CALL_OW 250
27236: PPUSH
27237: LD_VAR 0 1
27241: PPUSH
27242: CALL_OW 251
27246: PPUSH
27247: LD_INT 10
27249: PPUSH
27250: LD_INT 0
27252: PPUSH
27253: CALL_OW 50
// result := result ^ un ;
27257: LD_ADDR_VAR 0 7
27261: PUSH
27262: LD_VAR 0 7
27266: PUSH
27267: LD_VAR 0 14
27271: ADD
27272: ST_TO_ADDR
// end ;
27273: GO 27151
27275: POP
27276: POP
// end ; end ;
27277: LD_VAR 0 7
27281: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27282: LD_INT 0
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
27288: PPUSH
27289: PPUSH
27290: PPUSH
27291: PPUSH
27292: PPUSH
27293: PPUSH
27294: PPUSH
27295: PPUSH
27296: PPUSH
27297: PPUSH
27298: PPUSH
27299: PPUSH
// result := false ;
27300: LD_ADDR_VAR 0 3
27304: PUSH
27305: LD_INT 0
27307: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27308: LD_VAR 0 1
27312: NOT
27313: PUSH
27314: LD_VAR 0 1
27318: PPUSH
27319: CALL_OW 266
27323: PUSH
27324: LD_INT 32
27326: PUSH
27327: LD_INT 33
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: IN
27334: NOT
27335: OR
27336: IFFALSE 27340
// exit ;
27338: GO 28479
// nat := GetNation ( tower ) ;
27340: LD_ADDR_VAR 0 12
27344: PUSH
27345: LD_VAR 0 1
27349: PPUSH
27350: CALL_OW 248
27354: ST_TO_ADDR
// side := GetSide ( tower ) ;
27355: LD_ADDR_VAR 0 16
27359: PUSH
27360: LD_VAR 0 1
27364: PPUSH
27365: CALL_OW 255
27369: ST_TO_ADDR
// x := GetX ( tower ) ;
27370: LD_ADDR_VAR 0 10
27374: PUSH
27375: LD_VAR 0 1
27379: PPUSH
27380: CALL_OW 250
27384: ST_TO_ADDR
// y := GetY ( tower ) ;
27385: LD_ADDR_VAR 0 11
27389: PUSH
27390: LD_VAR 0 1
27394: PPUSH
27395: CALL_OW 251
27399: ST_TO_ADDR
// if not x or not y then
27400: LD_VAR 0 10
27404: NOT
27405: PUSH
27406: LD_VAR 0 11
27410: NOT
27411: OR
27412: IFFALSE 27416
// exit ;
27414: GO 28479
// weapon := 0 ;
27416: LD_ADDR_VAR 0 18
27420: PUSH
27421: LD_INT 0
27423: ST_TO_ADDR
// fac_list := [ ] ;
27424: LD_ADDR_VAR 0 17
27428: PUSH
27429: EMPTY
27430: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27431: LD_ADDR_VAR 0 6
27435: PUSH
27436: LD_VAR 0 1
27440: PPUSH
27441: CALL_OW 274
27445: PPUSH
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_INT 0
27453: PPUSH
27454: CALL 25019 0 3
27458: PPUSH
27459: LD_INT 30
27461: PUSH
27462: LD_INT 3
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PPUSH
27469: CALL_OW 72
27473: ST_TO_ADDR
// if not factories then
27474: LD_VAR 0 6
27478: NOT
27479: IFFALSE 27483
// exit ;
27481: GO 28479
// for i in factories do
27483: LD_ADDR_VAR 0 8
27487: PUSH
27488: LD_VAR 0 6
27492: PUSH
27493: FOR_IN
27494: IFFALSE 27519
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27496: LD_ADDR_VAR 0 17
27500: PUSH
27501: LD_VAR 0 17
27505: PUSH
27506: LD_VAR 0 8
27510: PPUSH
27511: CALL_OW 478
27515: UNION
27516: ST_TO_ADDR
27517: GO 27493
27519: POP
27520: POP
// if not fac_list then
27521: LD_VAR 0 17
27525: NOT
27526: IFFALSE 27530
// exit ;
27528: GO 28479
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27530: LD_ADDR_VAR 0 5
27534: PUSH
27535: LD_INT 4
27537: PUSH
27538: LD_INT 5
27540: PUSH
27541: LD_INT 9
27543: PUSH
27544: LD_INT 10
27546: PUSH
27547: LD_INT 6
27549: PUSH
27550: LD_INT 7
27552: PUSH
27553: LD_INT 11
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 27
27567: PUSH
27568: LD_INT 28
27570: PUSH
27571: LD_INT 26
27573: PUSH
27574: LD_INT 30
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 43
27585: PUSH
27586: LD_INT 44
27588: PUSH
27589: LD_INT 46
27591: PUSH
27592: LD_INT 45
27594: PUSH
27595: LD_INT 47
27597: PUSH
27598: LD_INT 49
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: PUSH
27614: LD_VAR 0 12
27618: ARRAY
27619: ST_TO_ADDR
// for i in list do
27620: LD_ADDR_VAR 0 8
27624: PUSH
27625: LD_VAR 0 5
27629: PUSH
27630: FOR_IN
27631: IFFALSE 27664
// if not i in fac_list then
27633: LD_VAR 0 8
27637: PUSH
27638: LD_VAR 0 17
27642: IN
27643: NOT
27644: IFFALSE 27662
// list := list diff i ;
27646: LD_ADDR_VAR 0 5
27650: PUSH
27651: LD_VAR 0 5
27655: PUSH
27656: LD_VAR 0 8
27660: DIFF
27661: ST_TO_ADDR
27662: GO 27630
27664: POP
27665: POP
// if not list then
27666: LD_VAR 0 5
27670: NOT
27671: IFFALSE 27675
// exit ;
27673: GO 28479
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27675: LD_VAR 0 12
27679: PUSH
27680: LD_INT 3
27682: EQUAL
27683: PUSH
27684: LD_INT 49
27686: PUSH
27687: LD_VAR 0 5
27691: IN
27692: AND
27693: PUSH
27694: LD_INT 31
27696: PPUSH
27697: LD_VAR 0 16
27701: PPUSH
27702: CALL_OW 321
27706: PUSH
27707: LD_INT 2
27709: EQUAL
27710: AND
27711: IFFALSE 27771
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27713: LD_INT 22
27715: PUSH
27716: LD_VAR 0 16
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 35
27727: PUSH
27728: LD_INT 49
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 91
27737: PUSH
27738: LD_VAR 0 1
27742: PUSH
27743: LD_INT 10
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: LIST
27755: PPUSH
27756: CALL_OW 69
27760: NOT
27761: IFFALSE 27771
// weapon := ru_time_lapser ;
27763: LD_ADDR_VAR 0 18
27767: PUSH
27768: LD_INT 49
27770: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27771: LD_VAR 0 12
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: IN
27786: PUSH
27787: LD_INT 11
27789: PUSH
27790: LD_VAR 0 5
27794: IN
27795: PUSH
27796: LD_INT 30
27798: PUSH
27799: LD_VAR 0 5
27803: IN
27804: OR
27805: AND
27806: PUSH
27807: LD_INT 6
27809: PPUSH
27810: LD_VAR 0 16
27814: PPUSH
27815: CALL_OW 321
27819: PUSH
27820: LD_INT 2
27822: EQUAL
27823: AND
27824: IFFALSE 27989
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27826: LD_INT 22
27828: PUSH
27829: LD_VAR 0 16
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: LD_INT 35
27843: PUSH
27844: LD_INT 11
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 35
27853: PUSH
27854: LD_INT 30
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 91
27868: PUSH
27869: LD_VAR 0 1
27873: PUSH
27874: LD_INT 18
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: PPUSH
27887: CALL_OW 69
27891: NOT
27892: PUSH
27893: LD_INT 22
27895: PUSH
27896: LD_VAR 0 16
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 30
27910: PUSH
27911: LD_INT 32
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 30
27920: PUSH
27921: LD_INT 33
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 91
27935: PUSH
27936: LD_VAR 0 1
27940: PUSH
27941: LD_INT 12
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: PUSH
27954: EMPTY
27955: LIST
27956: PPUSH
27957: CALL_OW 69
27961: PUSH
27962: LD_INT 2
27964: GREATER
27965: AND
27966: IFFALSE 27989
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27968: LD_ADDR_VAR 0 18
27972: PUSH
27973: LD_INT 11
27975: PUSH
27976: LD_INT 30
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_VAR 0 12
27987: ARRAY
27988: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27989: LD_VAR 0 18
27993: NOT
27994: PUSH
27995: LD_INT 40
27997: PPUSH
27998: LD_VAR 0 16
28002: PPUSH
28003: CALL_OW 321
28007: PUSH
28008: LD_INT 2
28010: EQUAL
28011: AND
28012: PUSH
28013: LD_INT 7
28015: PUSH
28016: LD_VAR 0 5
28020: IN
28021: PUSH
28022: LD_INT 28
28024: PUSH
28025: LD_VAR 0 5
28029: IN
28030: OR
28031: PUSH
28032: LD_INT 45
28034: PUSH
28035: LD_VAR 0 5
28039: IN
28040: OR
28041: AND
28042: IFFALSE 28296
// begin hex := GetHexInfo ( x , y ) ;
28044: LD_ADDR_VAR 0 4
28048: PUSH
28049: LD_VAR 0 10
28053: PPUSH
28054: LD_VAR 0 11
28058: PPUSH
28059: CALL_OW 546
28063: ST_TO_ADDR
// if hex [ 1 ] then
28064: LD_VAR 0 4
28068: PUSH
28069: LD_INT 1
28071: ARRAY
28072: IFFALSE 28076
// exit ;
28074: GO 28479
// height := hex [ 2 ] ;
28076: LD_ADDR_VAR 0 15
28080: PUSH
28081: LD_VAR 0 4
28085: PUSH
28086: LD_INT 2
28088: ARRAY
28089: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28090: LD_ADDR_VAR 0 14
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: LD_INT 3
28103: PUSH
28104: LD_INT 5
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
// for i in tmp do
28113: LD_ADDR_VAR 0 8
28117: PUSH
28118: LD_VAR 0 14
28122: PUSH
28123: FOR_IN
28124: IFFALSE 28294
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28126: LD_ADDR_VAR 0 9
28130: PUSH
28131: LD_VAR 0 10
28135: PPUSH
28136: LD_VAR 0 8
28140: PPUSH
28141: LD_INT 5
28143: PPUSH
28144: CALL_OW 272
28148: PUSH
28149: LD_VAR 0 11
28153: PPUSH
28154: LD_VAR 0 8
28158: PPUSH
28159: LD_INT 5
28161: PPUSH
28162: CALL_OW 273
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28171: LD_VAR 0 9
28175: PUSH
28176: LD_INT 1
28178: ARRAY
28179: PPUSH
28180: LD_VAR 0 9
28184: PUSH
28185: LD_INT 2
28187: ARRAY
28188: PPUSH
28189: CALL_OW 488
28193: IFFALSE 28292
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28195: LD_ADDR_VAR 0 4
28199: PUSH
28200: LD_VAR 0 9
28204: PUSH
28205: LD_INT 1
28207: ARRAY
28208: PPUSH
28209: LD_VAR 0 9
28213: PUSH
28214: LD_INT 2
28216: ARRAY
28217: PPUSH
28218: CALL_OW 546
28222: ST_TO_ADDR
// if hex [ 1 ] then
28223: LD_VAR 0 4
28227: PUSH
28228: LD_INT 1
28230: ARRAY
28231: IFFALSE 28235
// continue ;
28233: GO 28123
// h := hex [ 2 ] ;
28235: LD_ADDR_VAR 0 13
28239: PUSH
28240: LD_VAR 0 4
28244: PUSH
28245: LD_INT 2
28247: ARRAY
28248: ST_TO_ADDR
// if h + 7 < height then
28249: LD_VAR 0 13
28253: PUSH
28254: LD_INT 7
28256: PLUS
28257: PUSH
28258: LD_VAR 0 15
28262: LESS
28263: IFFALSE 28292
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28265: LD_ADDR_VAR 0 18
28269: PUSH
28270: LD_INT 7
28272: PUSH
28273: LD_INT 28
28275: PUSH
28276: LD_INT 45
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: PUSH
28284: LD_VAR 0 12
28288: ARRAY
28289: ST_TO_ADDR
// break ;
28290: GO 28294
// end ; end ; end ;
28292: GO 28123
28294: POP
28295: POP
// end ; if not weapon then
28296: LD_VAR 0 18
28300: NOT
28301: IFFALSE 28361
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28303: LD_ADDR_VAR 0 5
28307: PUSH
28308: LD_VAR 0 5
28312: PUSH
28313: LD_INT 11
28315: PUSH
28316: LD_INT 30
28318: PUSH
28319: LD_INT 49
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: DIFF
28327: ST_TO_ADDR
// if not list then
28328: LD_VAR 0 5
28332: NOT
28333: IFFALSE 28337
// exit ;
28335: GO 28479
// weapon := list [ rand ( 1 , list ) ] ;
28337: LD_ADDR_VAR 0 18
28341: PUSH
28342: LD_VAR 0 5
28346: PUSH
28347: LD_INT 1
28349: PPUSH
28350: LD_VAR 0 5
28354: PPUSH
28355: CALL_OW 12
28359: ARRAY
28360: ST_TO_ADDR
// end ; if weapon then
28361: LD_VAR 0 18
28365: IFFALSE 28479
// begin tmp := CostOfWeapon ( weapon ) ;
28367: LD_ADDR_VAR 0 14
28371: PUSH
28372: LD_VAR 0 18
28376: PPUSH
28377: CALL_OW 451
28381: ST_TO_ADDR
// j := GetBase ( tower ) ;
28382: LD_ADDR_VAR 0 9
28386: PUSH
28387: LD_VAR 0 1
28391: PPUSH
28392: CALL_OW 274
28396: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28397: LD_VAR 0 9
28401: PPUSH
28402: LD_INT 1
28404: PPUSH
28405: CALL_OW 275
28409: PUSH
28410: LD_VAR 0 14
28414: PUSH
28415: LD_INT 1
28417: ARRAY
28418: GREATEREQUAL
28419: PUSH
28420: LD_VAR 0 9
28424: PPUSH
28425: LD_INT 2
28427: PPUSH
28428: CALL_OW 275
28432: PUSH
28433: LD_VAR 0 14
28437: PUSH
28438: LD_INT 2
28440: ARRAY
28441: GREATEREQUAL
28442: AND
28443: PUSH
28444: LD_VAR 0 9
28448: PPUSH
28449: LD_INT 3
28451: PPUSH
28452: CALL_OW 275
28456: PUSH
28457: LD_VAR 0 14
28461: PUSH
28462: LD_INT 3
28464: ARRAY
28465: GREATEREQUAL
28466: AND
28467: IFFALSE 28479
// result := weapon ;
28469: LD_ADDR_VAR 0 3
28473: PUSH
28474: LD_VAR 0 18
28478: ST_TO_ADDR
// end ; end ;
28479: LD_VAR 0 3
28483: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28484: LD_INT 0
28486: PPUSH
28487: PPUSH
// result := true ;
28488: LD_ADDR_VAR 0 3
28492: PUSH
28493: LD_INT 1
28495: ST_TO_ADDR
// if array1 = array2 then
28496: LD_VAR 0 1
28500: PUSH
28501: LD_VAR 0 2
28505: EQUAL
28506: IFFALSE 28566
// begin for i = 1 to array1 do
28508: LD_ADDR_VAR 0 4
28512: PUSH
28513: DOUBLE
28514: LD_INT 1
28516: DEC
28517: ST_TO_ADDR
28518: LD_VAR 0 1
28522: PUSH
28523: FOR_TO
28524: IFFALSE 28562
// if array1 [ i ] <> array2 [ i ] then
28526: LD_VAR 0 1
28530: PUSH
28531: LD_VAR 0 4
28535: ARRAY
28536: PUSH
28537: LD_VAR 0 2
28541: PUSH
28542: LD_VAR 0 4
28546: ARRAY
28547: NONEQUAL
28548: IFFALSE 28560
// begin result := false ;
28550: LD_ADDR_VAR 0 3
28554: PUSH
28555: LD_INT 0
28557: ST_TO_ADDR
// break ;
28558: GO 28562
// end ;
28560: GO 28523
28562: POP
28563: POP
// end else
28564: GO 28574
// result := false ;
28566: LD_ADDR_VAR 0 3
28570: PUSH
28571: LD_INT 0
28573: ST_TO_ADDR
// end ;
28574: LD_VAR 0 3
28578: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28579: LD_INT 0
28581: PPUSH
28582: PPUSH
// if not array1 or not array2 then
28583: LD_VAR 0 1
28587: NOT
28588: PUSH
28589: LD_VAR 0 2
28593: NOT
28594: OR
28595: IFFALSE 28599
// exit ;
28597: GO 28663
// result := true ;
28599: LD_ADDR_VAR 0 3
28603: PUSH
28604: LD_INT 1
28606: ST_TO_ADDR
// for i = 1 to array1 do
28607: LD_ADDR_VAR 0 4
28611: PUSH
28612: DOUBLE
28613: LD_INT 1
28615: DEC
28616: ST_TO_ADDR
28617: LD_VAR 0 1
28621: PUSH
28622: FOR_TO
28623: IFFALSE 28661
// if array1 [ i ] <> array2 [ i ] then
28625: LD_VAR 0 1
28629: PUSH
28630: LD_VAR 0 4
28634: ARRAY
28635: PUSH
28636: LD_VAR 0 2
28640: PUSH
28641: LD_VAR 0 4
28645: ARRAY
28646: NONEQUAL
28647: IFFALSE 28659
// begin result := false ;
28649: LD_ADDR_VAR 0 3
28653: PUSH
28654: LD_INT 0
28656: ST_TO_ADDR
// break ;
28657: GO 28661
// end ;
28659: GO 28622
28661: POP
28662: POP
// end ;
28663: LD_VAR 0 3
28667: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28668: LD_INT 0
28670: PPUSH
28671: PPUSH
28672: PPUSH
// pom := GetBase ( fac ) ;
28673: LD_ADDR_VAR 0 5
28677: PUSH
28678: LD_VAR 0 1
28682: PPUSH
28683: CALL_OW 274
28687: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28688: LD_ADDR_VAR 0 4
28692: PUSH
28693: LD_VAR 0 2
28697: PUSH
28698: LD_INT 1
28700: ARRAY
28701: PPUSH
28702: LD_VAR 0 2
28706: PUSH
28707: LD_INT 2
28709: ARRAY
28710: PPUSH
28711: LD_VAR 0 2
28715: PUSH
28716: LD_INT 3
28718: ARRAY
28719: PPUSH
28720: LD_VAR 0 2
28724: PUSH
28725: LD_INT 4
28727: ARRAY
28728: PPUSH
28729: CALL_OW 449
28733: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28734: LD_ADDR_VAR 0 3
28738: PUSH
28739: LD_VAR 0 5
28743: PPUSH
28744: LD_INT 1
28746: PPUSH
28747: CALL_OW 275
28751: PUSH
28752: LD_VAR 0 4
28756: PUSH
28757: LD_INT 1
28759: ARRAY
28760: GREATEREQUAL
28761: PUSH
28762: LD_VAR 0 5
28766: PPUSH
28767: LD_INT 2
28769: PPUSH
28770: CALL_OW 275
28774: PUSH
28775: LD_VAR 0 4
28779: PUSH
28780: LD_INT 2
28782: ARRAY
28783: GREATEREQUAL
28784: AND
28785: PUSH
28786: LD_VAR 0 5
28790: PPUSH
28791: LD_INT 3
28793: PPUSH
28794: CALL_OW 275
28798: PUSH
28799: LD_VAR 0 4
28803: PUSH
28804: LD_INT 3
28806: ARRAY
28807: GREATEREQUAL
28808: AND
28809: ST_TO_ADDR
// end ;
28810: LD_VAR 0 3
28814: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
28819: PPUSH
28820: PPUSH
// pom := GetBase ( building ) ;
28821: LD_ADDR_VAR 0 3
28825: PUSH
28826: LD_VAR 0 1
28830: PPUSH
28831: CALL_OW 274
28835: ST_TO_ADDR
// if not pom then
28836: LD_VAR 0 3
28840: NOT
28841: IFFALSE 28845
// exit ;
28843: GO 29015
// btype := GetBType ( building ) ;
28845: LD_ADDR_VAR 0 5
28849: PUSH
28850: LD_VAR 0 1
28854: PPUSH
28855: CALL_OW 266
28859: ST_TO_ADDR
// if btype = b_armoury then
28860: LD_VAR 0 5
28864: PUSH
28865: LD_INT 4
28867: EQUAL
28868: IFFALSE 28878
// btype := b_barracks ;
28870: LD_ADDR_VAR 0 5
28874: PUSH
28875: LD_INT 5
28877: ST_TO_ADDR
// if btype = b_depot then
28878: LD_VAR 0 5
28882: PUSH
28883: LD_INT 0
28885: EQUAL
28886: IFFALSE 28896
// btype := b_warehouse ;
28888: LD_ADDR_VAR 0 5
28892: PUSH
28893: LD_INT 1
28895: ST_TO_ADDR
// if btype = b_workshop then
28896: LD_VAR 0 5
28900: PUSH
28901: LD_INT 2
28903: EQUAL
28904: IFFALSE 28914
// btype := b_factory ;
28906: LD_ADDR_VAR 0 5
28910: PUSH
28911: LD_INT 3
28913: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28914: LD_ADDR_VAR 0 4
28918: PUSH
28919: LD_VAR 0 5
28923: PPUSH
28924: LD_VAR 0 1
28928: PPUSH
28929: CALL_OW 248
28933: PPUSH
28934: CALL_OW 450
28938: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28939: LD_ADDR_VAR 0 2
28943: PUSH
28944: LD_VAR 0 3
28948: PPUSH
28949: LD_INT 1
28951: PPUSH
28952: CALL_OW 275
28956: PUSH
28957: LD_VAR 0 4
28961: PUSH
28962: LD_INT 1
28964: ARRAY
28965: GREATEREQUAL
28966: PUSH
28967: LD_VAR 0 3
28971: PPUSH
28972: LD_INT 2
28974: PPUSH
28975: CALL_OW 275
28979: PUSH
28980: LD_VAR 0 4
28984: PUSH
28985: LD_INT 2
28987: ARRAY
28988: GREATEREQUAL
28989: AND
28990: PUSH
28991: LD_VAR 0 3
28995: PPUSH
28996: LD_INT 3
28998: PPUSH
28999: CALL_OW 275
29003: PUSH
29004: LD_VAR 0 4
29008: PUSH
29009: LD_INT 3
29011: ARRAY
29012: GREATEREQUAL
29013: AND
29014: ST_TO_ADDR
// end ;
29015: LD_VAR 0 2
29019: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29020: LD_INT 0
29022: PPUSH
29023: PPUSH
29024: PPUSH
// pom := GetBase ( building ) ;
29025: LD_ADDR_VAR 0 4
29029: PUSH
29030: LD_VAR 0 1
29034: PPUSH
29035: CALL_OW 274
29039: ST_TO_ADDR
// if not pom then
29040: LD_VAR 0 4
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29150
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29049: LD_ADDR_VAR 0 5
29053: PUSH
29054: LD_VAR 0 2
29058: PPUSH
29059: LD_VAR 0 1
29063: PPUSH
29064: CALL_OW 248
29068: PPUSH
29069: CALL_OW 450
29073: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29074: LD_ADDR_VAR 0 3
29078: PUSH
29079: LD_VAR 0 4
29083: PPUSH
29084: LD_INT 1
29086: PPUSH
29087: CALL_OW 275
29091: PUSH
29092: LD_VAR 0 5
29096: PUSH
29097: LD_INT 1
29099: ARRAY
29100: GREATEREQUAL
29101: PUSH
29102: LD_VAR 0 4
29106: PPUSH
29107: LD_INT 2
29109: PPUSH
29110: CALL_OW 275
29114: PUSH
29115: LD_VAR 0 5
29119: PUSH
29120: LD_INT 2
29122: ARRAY
29123: GREATEREQUAL
29124: AND
29125: PUSH
29126: LD_VAR 0 4
29130: PPUSH
29131: LD_INT 3
29133: PPUSH
29134: CALL_OW 275
29138: PUSH
29139: LD_VAR 0 5
29143: PUSH
29144: LD_INT 3
29146: ARRAY
29147: GREATEREQUAL
29148: AND
29149: ST_TO_ADDR
// end ;
29150: LD_VAR 0 3
29154: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29155: LD_INT 0
29157: PPUSH
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
29163: PPUSH
29164: PPUSH
29165: PPUSH
29166: PPUSH
29167: PPUSH
// result := false ;
29168: LD_ADDR_VAR 0 8
29172: PUSH
29173: LD_INT 0
29175: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29176: LD_VAR 0 5
29180: NOT
29181: PUSH
29182: LD_VAR 0 1
29186: NOT
29187: OR
29188: PUSH
29189: LD_VAR 0 2
29193: NOT
29194: OR
29195: PUSH
29196: LD_VAR 0 3
29200: NOT
29201: OR
29202: IFFALSE 29206
// exit ;
29204: GO 30020
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29206: LD_ADDR_VAR 0 14
29210: PUSH
29211: LD_VAR 0 1
29215: PPUSH
29216: LD_VAR 0 2
29220: PPUSH
29221: LD_VAR 0 3
29225: PPUSH
29226: LD_VAR 0 4
29230: PPUSH
29231: LD_VAR 0 5
29235: PUSH
29236: LD_INT 1
29238: ARRAY
29239: PPUSH
29240: CALL_OW 248
29244: PPUSH
29245: LD_INT 0
29247: PPUSH
29248: CALL 30857 0 6
29252: ST_TO_ADDR
// if not hexes then
29253: LD_VAR 0 14
29257: NOT
29258: IFFALSE 29262
// exit ;
29260: GO 30020
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29262: LD_ADDR_VAR 0 17
29266: PUSH
29267: LD_VAR 0 5
29271: PPUSH
29272: LD_INT 22
29274: PUSH
29275: LD_VAR 0 13
29279: PPUSH
29280: CALL_OW 255
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: LD_INT 30
29294: PUSH
29295: LD_INT 0
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 30
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PPUSH
29321: CALL_OW 72
29325: ST_TO_ADDR
// for i = 1 to hexes do
29326: LD_ADDR_VAR 0 9
29330: PUSH
29331: DOUBLE
29332: LD_INT 1
29334: DEC
29335: ST_TO_ADDR
29336: LD_VAR 0 14
29340: PUSH
29341: FOR_TO
29342: IFFALSE 30018
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29344: LD_ADDR_VAR 0 13
29348: PUSH
29349: LD_VAR 0 14
29353: PUSH
29354: LD_VAR 0 9
29358: ARRAY
29359: PUSH
29360: LD_INT 1
29362: ARRAY
29363: PPUSH
29364: LD_VAR 0 14
29368: PUSH
29369: LD_VAR 0 9
29373: ARRAY
29374: PUSH
29375: LD_INT 2
29377: ARRAY
29378: PPUSH
29379: CALL_OW 428
29383: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29384: LD_VAR 0 14
29388: PUSH
29389: LD_VAR 0 9
29393: ARRAY
29394: PUSH
29395: LD_INT 1
29397: ARRAY
29398: PPUSH
29399: LD_VAR 0 14
29403: PUSH
29404: LD_VAR 0 9
29408: ARRAY
29409: PUSH
29410: LD_INT 2
29412: ARRAY
29413: PPUSH
29414: CALL_OW 351
29418: PUSH
29419: LD_VAR 0 14
29423: PUSH
29424: LD_VAR 0 9
29428: ARRAY
29429: PUSH
29430: LD_INT 1
29432: ARRAY
29433: PPUSH
29434: LD_VAR 0 14
29438: PUSH
29439: LD_VAR 0 9
29443: ARRAY
29444: PUSH
29445: LD_INT 2
29447: ARRAY
29448: PPUSH
29449: CALL_OW 488
29453: NOT
29454: OR
29455: PUSH
29456: LD_VAR 0 13
29460: PPUSH
29461: CALL_OW 247
29465: PUSH
29466: LD_INT 3
29468: EQUAL
29469: OR
29470: IFFALSE 29476
// exit ;
29472: POP
29473: POP
29474: GO 30020
// if not tmp then
29476: LD_VAR 0 13
29480: NOT
29481: IFFALSE 29485
// continue ;
29483: GO 29341
// result := true ;
29485: LD_ADDR_VAR 0 8
29489: PUSH
29490: LD_INT 1
29492: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29493: LD_VAR 0 6
29497: PUSH
29498: LD_VAR 0 13
29502: PPUSH
29503: CALL_OW 247
29507: PUSH
29508: LD_INT 2
29510: EQUAL
29511: AND
29512: PUSH
29513: LD_VAR 0 13
29517: PPUSH
29518: CALL_OW 263
29522: PUSH
29523: LD_INT 1
29525: EQUAL
29526: AND
29527: IFFALSE 29691
// begin if IsDrivenBy ( tmp ) then
29529: LD_VAR 0 13
29533: PPUSH
29534: CALL_OW 311
29538: IFFALSE 29542
// continue ;
29540: GO 29341
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29542: LD_VAR 0 6
29546: PPUSH
29547: LD_INT 3
29549: PUSH
29550: LD_INT 60
29552: PUSH
29553: EMPTY
29554: LIST
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 55
29565: PUSH
29566: EMPTY
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PPUSH
29577: CALL_OW 72
29581: IFFALSE 29689
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29583: LD_ADDR_VAR 0 18
29587: PUSH
29588: LD_VAR 0 6
29592: PPUSH
29593: LD_INT 3
29595: PUSH
29596: LD_INT 60
29598: PUSH
29599: EMPTY
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 3
29608: PUSH
29609: LD_INT 55
29611: PUSH
29612: EMPTY
29613: LIST
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PPUSH
29623: CALL_OW 72
29627: PUSH
29628: LD_INT 1
29630: ARRAY
29631: ST_TO_ADDR
// if IsInUnit ( driver ) then
29632: LD_VAR 0 18
29636: PPUSH
29637: CALL_OW 310
29641: IFFALSE 29652
// ComExit ( driver ) ;
29643: LD_VAR 0 18
29647: PPUSH
29648: CALL 54041 0 1
// AddComEnterUnit ( driver , tmp ) ;
29652: LD_VAR 0 18
29656: PPUSH
29657: LD_VAR 0 13
29661: PPUSH
29662: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29666: LD_VAR 0 18
29670: PPUSH
29671: LD_VAR 0 7
29675: PPUSH
29676: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29680: LD_VAR 0 18
29684: PPUSH
29685: CALL_OW 181
// end ; continue ;
29689: GO 29341
// end ; if not cleaners or not tmp in cleaners then
29691: LD_VAR 0 6
29695: NOT
29696: PUSH
29697: LD_VAR 0 13
29701: PUSH
29702: LD_VAR 0 6
29706: IN
29707: NOT
29708: OR
29709: IFFALSE 30016
// begin if dep then
29711: LD_VAR 0 17
29715: IFFALSE 29851
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29717: LD_ADDR_VAR 0 16
29721: PUSH
29722: LD_VAR 0 17
29726: PUSH
29727: LD_INT 1
29729: ARRAY
29730: PPUSH
29731: CALL_OW 250
29735: PPUSH
29736: LD_VAR 0 17
29740: PUSH
29741: LD_INT 1
29743: ARRAY
29744: PPUSH
29745: CALL_OW 254
29749: PPUSH
29750: LD_INT 5
29752: PPUSH
29753: CALL_OW 272
29757: PUSH
29758: LD_VAR 0 17
29762: PUSH
29763: LD_INT 1
29765: ARRAY
29766: PPUSH
29767: CALL_OW 251
29771: PPUSH
29772: LD_VAR 0 17
29776: PUSH
29777: LD_INT 1
29779: ARRAY
29780: PPUSH
29781: CALL_OW 254
29785: PPUSH
29786: LD_INT 5
29788: PPUSH
29789: CALL_OW 273
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29798: LD_VAR 0 16
29802: PUSH
29803: LD_INT 1
29805: ARRAY
29806: PPUSH
29807: LD_VAR 0 16
29811: PUSH
29812: LD_INT 2
29814: ARRAY
29815: PPUSH
29816: CALL_OW 488
29820: IFFALSE 29851
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29822: LD_VAR 0 13
29826: PPUSH
29827: LD_VAR 0 16
29831: PUSH
29832: LD_INT 1
29834: ARRAY
29835: PPUSH
29836: LD_VAR 0 16
29840: PUSH
29841: LD_INT 2
29843: ARRAY
29844: PPUSH
29845: CALL_OW 111
// continue ;
29849: GO 29341
// end ; end ; r := GetDir ( tmp ) ;
29851: LD_ADDR_VAR 0 15
29855: PUSH
29856: LD_VAR 0 13
29860: PPUSH
29861: CALL_OW 254
29865: ST_TO_ADDR
// if r = 5 then
29866: LD_VAR 0 15
29870: PUSH
29871: LD_INT 5
29873: EQUAL
29874: IFFALSE 29884
// r := 0 ;
29876: LD_ADDR_VAR 0 15
29880: PUSH
29881: LD_INT 0
29883: ST_TO_ADDR
// for j = r to 5 do
29884: LD_ADDR_VAR 0 10
29888: PUSH
29889: DOUBLE
29890: LD_VAR 0 15
29894: DEC
29895: ST_TO_ADDR
29896: LD_INT 5
29898: PUSH
29899: FOR_TO
29900: IFFALSE 30014
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29902: LD_ADDR_VAR 0 11
29906: PUSH
29907: LD_VAR 0 13
29911: PPUSH
29912: CALL_OW 250
29916: PPUSH
29917: LD_VAR 0 10
29921: PPUSH
29922: LD_INT 2
29924: PPUSH
29925: CALL_OW 272
29929: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29930: LD_ADDR_VAR 0 12
29934: PUSH
29935: LD_VAR 0 13
29939: PPUSH
29940: CALL_OW 251
29944: PPUSH
29945: LD_VAR 0 10
29949: PPUSH
29950: LD_INT 2
29952: PPUSH
29953: CALL_OW 273
29957: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29958: LD_VAR 0 11
29962: PPUSH
29963: LD_VAR 0 12
29967: PPUSH
29968: CALL_OW 488
29972: PUSH
29973: LD_VAR 0 11
29977: PPUSH
29978: LD_VAR 0 12
29982: PPUSH
29983: CALL_OW 428
29987: NOT
29988: AND
29989: IFFALSE 30012
// begin ComMoveXY ( tmp , _x , _y ) ;
29991: LD_VAR 0 13
29995: PPUSH
29996: LD_VAR 0 11
30000: PPUSH
30001: LD_VAR 0 12
30005: PPUSH
30006: CALL_OW 111
// break ;
30010: GO 30014
// end ; end ;
30012: GO 29899
30014: POP
30015: POP
// end ; end ;
30016: GO 29341
30018: POP
30019: POP
// end ;
30020: LD_VAR 0 8
30024: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
30025: LD_INT 0
30027: PPUSH
30028: PPUSH
30029: PPUSH
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
// result := false ;
30037: LD_ADDR_VAR 0 6
30041: PUSH
30042: LD_INT 0
30044: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30045: LD_VAR 0 1
30049: NOT
30050: PUSH
30051: LD_VAR 0 1
30055: PPUSH
30056: CALL_OW 266
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: IN
30071: NOT
30072: OR
30073: PUSH
30074: LD_VAR 0 2
30078: NOT
30079: OR
30080: PUSH
30081: LD_VAR 0 5
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: LD_INT 2
30094: PUSH
30095: LD_INT 3
30097: PUSH
30098: LD_INT 4
30100: PUSH
30101: LD_INT 5
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: IN
30112: NOT
30113: OR
30114: PUSH
30115: LD_VAR 0 3
30119: PPUSH
30120: LD_VAR 0 4
30124: PPUSH
30125: CALL_OW 488
30129: NOT
30130: OR
30131: IFFALSE 30135
// exit ;
30133: GO 30852
// pom := GetBase ( depot ) ;
30135: LD_ADDR_VAR 0 10
30139: PUSH
30140: LD_VAR 0 1
30144: PPUSH
30145: CALL_OW 274
30149: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30150: LD_ADDR_VAR 0 11
30154: PUSH
30155: LD_VAR 0 2
30159: PPUSH
30160: LD_VAR 0 1
30164: PPUSH
30165: CALL_OW 248
30169: PPUSH
30170: CALL_OW 450
30174: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30175: LD_VAR 0 10
30179: PPUSH
30180: LD_INT 1
30182: PPUSH
30183: CALL_OW 275
30187: PUSH
30188: LD_VAR 0 11
30192: PUSH
30193: LD_INT 1
30195: ARRAY
30196: GREATEREQUAL
30197: PUSH
30198: LD_VAR 0 10
30202: PPUSH
30203: LD_INT 2
30205: PPUSH
30206: CALL_OW 275
30210: PUSH
30211: LD_VAR 0 11
30215: PUSH
30216: LD_INT 2
30218: ARRAY
30219: GREATEREQUAL
30220: AND
30221: PUSH
30222: LD_VAR 0 10
30226: PPUSH
30227: LD_INT 3
30229: PPUSH
30230: CALL_OW 275
30234: PUSH
30235: LD_VAR 0 11
30239: PUSH
30240: LD_INT 3
30242: ARRAY
30243: GREATEREQUAL
30244: AND
30245: NOT
30246: IFFALSE 30250
// exit ;
30248: GO 30852
// if GetBType ( depot ) = b_depot then
30250: LD_VAR 0 1
30254: PPUSH
30255: CALL_OW 266
30259: PUSH
30260: LD_INT 0
30262: EQUAL
30263: IFFALSE 30275
// dist := 28 else
30265: LD_ADDR_VAR 0 14
30269: PUSH
30270: LD_INT 28
30272: ST_TO_ADDR
30273: GO 30283
// dist := 36 ;
30275: LD_ADDR_VAR 0 14
30279: PUSH
30280: LD_INT 36
30282: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30283: LD_VAR 0 1
30287: PPUSH
30288: LD_VAR 0 3
30292: PPUSH
30293: LD_VAR 0 4
30297: PPUSH
30298: CALL_OW 297
30302: PUSH
30303: LD_VAR 0 14
30307: GREATER
30308: IFFALSE 30312
// exit ;
30310: GO 30852
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30312: LD_ADDR_VAR 0 12
30316: PUSH
30317: LD_VAR 0 2
30321: PPUSH
30322: LD_VAR 0 3
30326: PPUSH
30327: LD_VAR 0 4
30331: PPUSH
30332: LD_VAR 0 5
30336: PPUSH
30337: LD_VAR 0 1
30341: PPUSH
30342: CALL_OW 248
30346: PPUSH
30347: LD_INT 0
30349: PPUSH
30350: CALL 30857 0 6
30354: ST_TO_ADDR
// if not hexes then
30355: LD_VAR 0 12
30359: NOT
30360: IFFALSE 30364
// exit ;
30362: GO 30852
// hex := GetHexInfo ( x , y ) ;
30364: LD_ADDR_VAR 0 15
30368: PUSH
30369: LD_VAR 0 3
30373: PPUSH
30374: LD_VAR 0 4
30378: PPUSH
30379: CALL_OW 546
30383: ST_TO_ADDR
// if hex [ 1 ] then
30384: LD_VAR 0 15
30388: PUSH
30389: LD_INT 1
30391: ARRAY
30392: IFFALSE 30396
// exit ;
30394: GO 30852
// height := hex [ 2 ] ;
30396: LD_ADDR_VAR 0 13
30400: PUSH
30401: LD_VAR 0 15
30405: PUSH
30406: LD_INT 2
30408: ARRAY
30409: ST_TO_ADDR
// for i = 1 to hexes do
30410: LD_ADDR_VAR 0 7
30414: PUSH
30415: DOUBLE
30416: LD_INT 1
30418: DEC
30419: ST_TO_ADDR
30420: LD_VAR 0 12
30424: PUSH
30425: FOR_TO
30426: IFFALSE 30756
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30428: LD_VAR 0 12
30432: PUSH
30433: LD_VAR 0 7
30437: ARRAY
30438: PUSH
30439: LD_INT 1
30441: ARRAY
30442: PPUSH
30443: LD_VAR 0 12
30447: PUSH
30448: LD_VAR 0 7
30452: ARRAY
30453: PUSH
30454: LD_INT 2
30456: ARRAY
30457: PPUSH
30458: CALL_OW 488
30462: NOT
30463: PUSH
30464: LD_VAR 0 12
30468: PUSH
30469: LD_VAR 0 7
30473: ARRAY
30474: PUSH
30475: LD_INT 1
30477: ARRAY
30478: PPUSH
30479: LD_VAR 0 12
30483: PUSH
30484: LD_VAR 0 7
30488: ARRAY
30489: PUSH
30490: LD_INT 2
30492: ARRAY
30493: PPUSH
30494: CALL_OW 428
30498: PUSH
30499: LD_INT 0
30501: GREATER
30502: OR
30503: PUSH
30504: LD_VAR 0 12
30508: PUSH
30509: LD_VAR 0 7
30513: ARRAY
30514: PUSH
30515: LD_INT 1
30517: ARRAY
30518: PPUSH
30519: LD_VAR 0 12
30523: PUSH
30524: LD_VAR 0 7
30528: ARRAY
30529: PUSH
30530: LD_INT 2
30532: ARRAY
30533: PPUSH
30534: CALL_OW 351
30538: OR
30539: IFFALSE 30545
// exit ;
30541: POP
30542: POP
30543: GO 30852
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30545: LD_ADDR_VAR 0 8
30549: PUSH
30550: LD_VAR 0 12
30554: PUSH
30555: LD_VAR 0 7
30559: ARRAY
30560: PUSH
30561: LD_INT 1
30563: ARRAY
30564: PPUSH
30565: LD_VAR 0 12
30569: PUSH
30570: LD_VAR 0 7
30574: ARRAY
30575: PUSH
30576: LD_INT 2
30578: ARRAY
30579: PPUSH
30580: CALL_OW 546
30584: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30585: LD_VAR 0 8
30589: PUSH
30590: LD_INT 1
30592: ARRAY
30593: PUSH
30594: LD_VAR 0 8
30598: PUSH
30599: LD_INT 2
30601: ARRAY
30602: PUSH
30603: LD_VAR 0 13
30607: PUSH
30608: LD_INT 2
30610: PLUS
30611: GREATER
30612: OR
30613: PUSH
30614: LD_VAR 0 8
30618: PUSH
30619: LD_INT 2
30621: ARRAY
30622: PUSH
30623: LD_VAR 0 13
30627: PUSH
30628: LD_INT 2
30630: MINUS
30631: LESS
30632: OR
30633: PUSH
30634: LD_VAR 0 8
30638: PUSH
30639: LD_INT 3
30641: ARRAY
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: LD_INT 8
30648: PUSH
30649: LD_INT 9
30651: PUSH
30652: LD_INT 10
30654: PUSH
30655: LD_INT 11
30657: PUSH
30658: LD_INT 12
30660: PUSH
30661: LD_INT 13
30663: PUSH
30664: LD_INT 16
30666: PUSH
30667: LD_INT 17
30669: PUSH
30670: LD_INT 18
30672: PUSH
30673: LD_INT 19
30675: PUSH
30676: LD_INT 20
30678: PUSH
30679: LD_INT 21
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: IN
30697: NOT
30698: OR
30699: PUSH
30700: LD_VAR 0 8
30704: PUSH
30705: LD_INT 5
30707: ARRAY
30708: NOT
30709: OR
30710: PUSH
30711: LD_VAR 0 8
30715: PUSH
30716: LD_INT 6
30718: ARRAY
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: LD_INT 7
30728: PUSH
30729: LD_INT 9
30731: PUSH
30732: LD_INT 10
30734: PUSH
30735: LD_INT 11
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: IN
30746: NOT
30747: OR
30748: IFFALSE 30754
// exit ;
30750: POP
30751: POP
30752: GO 30852
// end ;
30754: GO 30425
30756: POP
30757: POP
// side := GetSide ( depot ) ;
30758: LD_ADDR_VAR 0 9
30762: PUSH
30763: LD_VAR 0 1
30767: PPUSH
30768: CALL_OW 255
30772: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30773: LD_VAR 0 9
30777: PPUSH
30778: LD_VAR 0 3
30782: PPUSH
30783: LD_VAR 0 4
30787: PPUSH
30788: LD_INT 20
30790: PPUSH
30791: CALL 23173 0 4
30795: PUSH
30796: LD_INT 4
30798: ARRAY
30799: IFFALSE 30803
// exit ;
30801: GO 30852
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30803: LD_VAR 0 2
30807: PUSH
30808: LD_INT 29
30810: PUSH
30811: LD_INT 30
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: IN
30818: PUSH
30819: LD_VAR 0 3
30823: PPUSH
30824: LD_VAR 0 4
30828: PPUSH
30829: LD_VAR 0 9
30833: PPUSH
30834: CALL_OW 440
30838: NOT
30839: AND
30840: IFFALSE 30844
// exit ;
30842: GO 30852
// result := true ;
30844: LD_ADDR_VAR 0 6
30848: PUSH
30849: LD_INT 1
30851: ST_TO_ADDR
// end ;
30852: LD_VAR 0 6
30856: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
// result = [ ] ;
30917: LD_ADDR_VAR 0 7
30921: PUSH
30922: EMPTY
30923: ST_TO_ADDR
// temp_list = [ ] ;
30924: LD_ADDR_VAR 0 9
30928: PUSH
30929: EMPTY
30930: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30931: LD_VAR 0 4
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 2
30944: PUSH
30945: LD_INT 3
30947: PUSH
30948: LD_INT 4
30950: PUSH
30951: LD_INT 5
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: IN
30962: NOT
30963: PUSH
30964: LD_VAR 0 1
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: IN
30979: PUSH
30980: LD_VAR 0 5
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: LD_INT 2
30990: PUSH
30991: LD_INT 3
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: IN
30999: NOT
31000: AND
31001: OR
31002: IFFALSE 31006
// exit ;
31004: GO 49397
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31006: LD_VAR 0 1
31010: PUSH
31011: LD_INT 6
31013: PUSH
31014: LD_INT 7
31016: PUSH
31017: LD_INT 8
31019: PUSH
31020: LD_INT 13
31022: PUSH
31023: LD_INT 12
31025: PUSH
31026: LD_INT 15
31028: PUSH
31029: LD_INT 11
31031: PUSH
31032: LD_INT 14
31034: PUSH
31035: LD_INT 10
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: IN
31049: IFFALSE 31059
// btype = b_lab ;
31051: LD_ADDR_VAR 0 1
31055: PUSH
31056: LD_INT 6
31058: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31059: LD_VAR 0 6
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: LIST
31077: IN
31078: NOT
31079: PUSH
31080: LD_VAR 0 1
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: LD_INT 3
31096: PUSH
31097: LD_INT 6
31099: PUSH
31100: LD_INT 36
31102: PUSH
31103: LD_INT 4
31105: PUSH
31106: LD_INT 5
31108: PUSH
31109: LD_INT 31
31111: PUSH
31112: LD_INT 32
31114: PUSH
31115: LD_INT 33
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: IN
31131: NOT
31132: PUSH
31133: LD_VAR 0 6
31137: PUSH
31138: LD_INT 1
31140: EQUAL
31141: AND
31142: OR
31143: PUSH
31144: LD_VAR 0 1
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: LD_INT 3
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: IN
31159: NOT
31160: PUSH
31161: LD_VAR 0 6
31165: PUSH
31166: LD_INT 2
31168: EQUAL
31169: AND
31170: OR
31171: IFFALSE 31181
// mode = 0 ;
31173: LD_ADDR_VAR 0 6
31177: PUSH
31178: LD_INT 0
31180: ST_TO_ADDR
// case mode of 0 :
31181: LD_VAR 0 6
31185: PUSH
31186: LD_INT 0
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 42647
31194: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31195: LD_ADDR_VAR 0 11
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: LD_INT 2
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: LD_INT 2
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: LD_INT 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: LD_INT 3
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31388: LD_ADDR_VAR 0 12
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 0
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 2
31511: NEG
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 3
31545: NEG
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 3
31556: NEG
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31584: LD_ADDR_VAR 0 13
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: LD_INT 2
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: NEG
31732: PUSH
31733: LD_INT 3
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: NEG
31744: PUSH
31745: LD_INT 2
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: LD_INT 3
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31783: LD_ADDR_VAR 0 14
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 0
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: LD_INT 1
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 3
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 3
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31979: LD_ADDR_VAR 0 15
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 2
32113: NEG
32114: PUSH
32115: LD_INT 1
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 2
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 3
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: LD_INT 1
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32172: LD_ADDR_VAR 0 16
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: LD_INT 1
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 2
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 2
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 2
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 2
32295: NEG
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 2
32307: NEG
32308: PUSH
32309: LD_INT 2
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: PUSH
32330: LD_INT 3
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32365: LD_ADDR_VAR 0 17
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 1
32434: NEG
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: LD_INT 2
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: LD_INT 2
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 1
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 2
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 2
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: LD_INT 2
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: NEG
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 2
32564: NEG
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32595: LD_ADDR_VAR 0 18
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 1
32668: NEG
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 2
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: NEG
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: NEG
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: LD_INT 2
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32825: LD_ADDR_VAR 0 19
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 1
32883: NEG
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: LD_INT 2
32910: NEG
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 2
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: NEG
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33055: LD_ADDR_VAR 0 20
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 2
33231: NEG
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: NEG
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33285: LD_ADDR_VAR 0 21
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: LD_INT 2
33370: NEG
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: LD_INT 2
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 2
33461: NEG
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: NEG
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: LD_INT 2
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33515: LD_ADDR_VAR 0 22
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33745: LD_ADDR_VAR 0 23
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: LD_INT 1
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 2
33944: NEG
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: LD_INT 3
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 3
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34025: LD_ADDR_VAR 0 24
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: NEG
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 2
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: LD_INT 0
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 1
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 0
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 1
34190: NEG
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 2
34201: NEG
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: LD_INT 2
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 2
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: LD_INT 1
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 3
34268: PUSH
34269: LD_INT 2
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34301: LD_ADDR_VAR 0 25
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: LD_INT 2
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: LD_INT 2
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 3
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 3
34522: PUSH
34523: LD_INT 2
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: LD_INT 3
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 3
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34575: LD_ADDR_VAR 0 26
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 1
34633: NEG
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 2
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 1
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 2
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 2
34751: NEG
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: LD_INT 2
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: PUSH
34787: LD_INT 3
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: LD_INT 3
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: LD_INT 2
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34851: LD_ADDR_VAR 0 27
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 2
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 2
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 3
35096: NEG
35097: PUSH
35098: LD_INT 2
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35131: LD_ADDR_VAR 0 28
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: LD_INT 2
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 2
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: NEG
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 2
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: NEG
35343: PUSH
35344: LD_INT 3
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 3
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 3
35366: NEG
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 3
35378: NEG
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35413: LD_ADDR_VAR 0 29
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 2
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: LD_INT 2
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 1
35520: NEG
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 2
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: LD_INT 2
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 2
35603: NEG
35604: PUSH
35605: LD_INT 3
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 2
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 3
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 3
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 3
35657: NEG
35658: PUSH
35659: LD_INT 2
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35692: LD_ADDR_VAR 0 30
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: LD_INT 1
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: LD_INT 2
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: LD_INT 2
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 2
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: LD_INT 2
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 3
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 3
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 2
35914: PUSH
35915: LD_INT 3
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 2
35924: NEG
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 3
35935: NEG
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35970: LD_ADDR_VAR 0 31
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: LD_INT 1
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 2
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 2
36135: NEG
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 2
36147: NEG
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 2
36159: NEG
36160: PUSH
36161: LD_INT 3
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 3
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: LD_INT 3
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 3
36213: NEG
36214: PUSH
36215: LD_INT 2
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36248: LD_ADDR_VAR 0 32
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: LD_INT 2
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: LD_INT 2
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: NEG
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 3
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 2
36480: NEG
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 3
36491: NEG
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36526: LD_ADDR_VAR 0 33
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 2
36716: NEG
36717: PUSH
36718: LD_INT 3
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 3
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: LD_INT 3
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 3
36770: NEG
36771: PUSH
36772: LD_INT 2
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36805: LD_ADDR_VAR 0 34
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: LD_INT 1
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 2
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: NEG
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: LD_INT 2
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 3
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 3
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 2
37029: PUSH
37030: LD_INT 3
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 3
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37085: LD_ADDR_VAR 0 35
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37197: LD_ADDR_VAR 0 36
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: LD_INT 1
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37309: LD_ADDR_VAR 0 37
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37421: LD_ADDR_VAR 0 38
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: NEG
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37533: LD_ADDR_VAR 0 39
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: LD_INT 1
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: NEG
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: LD_INT 2
37618: NEG
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37645: LD_ADDR_VAR 0 40
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37757: LD_ADDR_VAR 0 41
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: NEG
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 2
37923: NEG
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: LD_INT 3
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 3
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 3
38000: PUSH
38001: LD_INT 3
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 2
38010: PUSH
38011: LD_INT 3
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 3
38031: NEG
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 3
38042: NEG
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 3
38054: NEG
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 3
38066: NEG
38067: PUSH
38068: LD_INT 3
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38107: LD_ADDR_VAR 0 42
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 1
38127: NEG
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: NEG
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: LD_INT 2
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: NEG
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: LD_INT 3
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: LD_INT 3
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 3
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 2
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 3
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: LD_INT 3
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 3
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 3
38404: NEG
38405: PUSH
38406: LD_INT 2
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 3
38416: NEG
38417: PUSH
38418: LD_INT 3
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38457: LD_ADDR_VAR 0 43
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 2
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: NEG
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: NEG
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: LD_INT 3
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 3
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 3
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: LD_INT 3
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 3
38753: NEG
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 3
38764: NEG
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38805: LD_ADDR_VAR 0 44
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: LD_INT 2
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: NEG
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 2
38971: NEG
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 3
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 3
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 3
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 3
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 3
39048: PUSH
39049: LD_INT 3
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: LD_INT 3
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 3
39079: NEG
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: NEG
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 3
39102: NEG
39103: PUSH
39104: LD_INT 2
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 3
39114: NEG
39115: PUSH
39116: LD_INT 3
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39155: LD_ADDR_VAR 0 45
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 2
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: NEG
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: NEG
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: LD_INT 3
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: LD_INT 3
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 3
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 3
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 3
39401: PUSH
39402: LD_INT 3
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: LD_INT 3
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 3
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 3
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 3
39452: NEG
39453: PUSH
39454: LD_INT 2
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 3
39464: NEG
39465: PUSH
39466: LD_INT 3
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39505: LD_ADDR_VAR 0 46
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: NEG
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: LD_INT 3
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: LD_INT 3
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 2
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 3
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 3
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 3
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 3
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 2
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 3
39801: NEG
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 3
39812: NEG
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39853: LD_ADDR_VAR 0 47
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40004: LD_ADDR_VAR 0 48
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40151: LD_ADDR_VAR 0 49
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40295: LD_ADDR_VAR 0 50
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40439: LD_ADDR_VAR 0 51
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40586: LD_ADDR_VAR 0 52
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40737: LD_ADDR_VAR 0 53
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 2
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 2
40913: NEG
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40967: LD_ADDR_VAR 0 54
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: LD_INT 2
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: NEG
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: NEG
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41197: LD_ADDR_VAR 0 55
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 2
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: NEG
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41427: LD_ADDR_VAR 0 56
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 2
41603: NEG
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 2
41626: NEG
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41657: LD_ADDR_VAR 0 57
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41887: LD_ADDR_VAR 0 58
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42117: LD_ADDR_VAR 0 59
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42205: LD_ADDR_VAR 0 60
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42293: LD_ADDR_VAR 0 61
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42381: LD_ADDR_VAR 0 62
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42469: LD_ADDR_VAR 0 63
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42557: LD_ADDR_VAR 0 64
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: ST_TO_ADDR
// end ; 1 :
42645: GO 48542
42647: LD_INT 1
42649: DOUBLE
42650: EQUAL
42651: IFTRUE 42655
42653: GO 45278
42655: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42656: LD_ADDR_VAR 0 11
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 3
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42700: LD_ADDR_VAR 0 12
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42741: LD_ADDR_VAR 0 13
42745: PUSH
42746: LD_INT 3
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 3
42758: PUSH
42759: LD_INT 3
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42781: LD_ADDR_VAR 0 14
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: LIST
42821: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42822: LD_ADDR_VAR 0 15
42826: PUSH
42827: LD_INT 2
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42866: LD_ADDR_VAR 0 16
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: LD_INT 3
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 3
42885: NEG
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: LD_INT 3
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42912: LD_ADDR_VAR 0 17
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 3
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 3
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42956: LD_ADDR_VAR 0 18
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 3
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 3
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42997: LD_ADDR_VAR 0 19
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: LD_INT 3
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43037: LD_ADDR_VAR 0 20
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 3
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43078: LD_ADDR_VAR 0 21
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 3
43096: NEG
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 3
43107: NEG
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: LIST
43121: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43122: LD_ADDR_VAR 0 22
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 3
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: NEG
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 3
43153: NEG
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43168: LD_ADDR_VAR 0 23
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: LD_INT 3
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 4
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 3
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43212: LD_ADDR_VAR 0 24
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 4
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43253: LD_ADDR_VAR 0 25
43257: PUSH
43258: LD_INT 3
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 4
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: LD_INT 4
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: LIST
43292: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43293: LD_ADDR_VAR 0 26
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: LD_INT 3
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 4
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 3
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43334: LD_ADDR_VAR 0 27
43338: PUSH
43339: LD_INT 3
43341: NEG
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 3
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 4
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43378: LD_ADDR_VAR 0 28
43382: PUSH
43383: LD_INT 3
43385: NEG
43386: PUSH
43387: LD_INT 3
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 3
43397: NEG
43398: PUSH
43399: LD_INT 4
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 4
43409: NEG
43410: PUSH
43411: LD_INT 3
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: LIST
43423: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43424: LD_ADDR_VAR 0 29
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 3
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: LD_INT 2
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: LD_INT 4
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 4
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: LD_INT 3
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: LD_INT 5
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 5
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: LD_INT 4
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: LD_INT 6
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 6
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 5
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43579: LD_ADDR_VAR 0 30
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 3
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 4
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 4
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 4
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 5
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 5
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 5
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 6
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 6
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43722: LD_ADDR_VAR 0 31
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: LD_INT 3
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 4
43759: PUSH
43760: LD_INT 3
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 4
43769: PUSH
43770: LD_INT 4
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 3
43779: PUSH
43780: LD_INT 4
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 5
43789: PUSH
43790: LD_INT 4
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 5
43799: PUSH
43800: LD_INT 5
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 4
43809: PUSH
43810: LD_INT 5
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 6
43819: PUSH
43820: LD_INT 5
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 6
43829: PUSH
43830: LD_INT 6
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 5
43839: PUSH
43840: LD_INT 6
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43861: LD_ADDR_VAR 0 32
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 3
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: LD_INT 3
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: LD_INT 4
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 4
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 3
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 5
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 5
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 4
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 6
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 6
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 5
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44004: LD_ADDR_VAR 0 33
44008: PUSH
44009: LD_INT 2
44011: NEG
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 3
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 3
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 3
44045: NEG
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 4
44056: NEG
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 4
44067: NEG
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 4
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 5
44090: NEG
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 5
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 5
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 6
44124: NEG
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 6
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44159: LD_ADDR_VAR 0 34
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: LD_INT 3
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 3
44178: NEG
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 3
44190: NEG
44191: PUSH
44192: LD_INT 3
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 3
44202: NEG
44203: PUSH
44204: LD_INT 4
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 4
44214: NEG
44215: PUSH
44216: LD_INT 3
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 4
44226: NEG
44227: PUSH
44228: LD_INT 4
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 4
44238: NEG
44239: PUSH
44240: LD_INT 5
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 5
44250: NEG
44251: PUSH
44252: LD_INT 4
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 5
44262: NEG
44263: PUSH
44264: LD_INT 5
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 5
44274: NEG
44275: PUSH
44276: LD_INT 6
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 6
44286: NEG
44287: PUSH
44288: LD_INT 5
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 6
44298: NEG
44299: PUSH
44300: LD_INT 6
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44322: LD_ADDR_VAR 0 41
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 3
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: LIST
44365: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44366: LD_ADDR_VAR 0 42
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 3
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: LIST
44406: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44407: LD_ADDR_VAR 0 43
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: LD_INT 3
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44447: LD_ADDR_VAR 0 44
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: LIST
44487: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44488: LD_ADDR_VAR 0 45
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 3
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44532: LD_ADDR_VAR 0 46
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: LD_INT 3
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 3
44563: NEG
44564: PUSH
44565: LD_INT 2
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44578: LD_ADDR_VAR 0 47
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: LD_INT 3
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: LD_INT 3
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44611: LD_ADDR_VAR 0 48
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44642: LD_ADDR_VAR 0 49
44646: PUSH
44647: LD_INT 3
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 3
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44671: LD_ADDR_VAR 0 50
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: LD_INT 3
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: LD_INT 3
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44700: LD_ADDR_VAR 0 51
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44731: LD_ADDR_VAR 0 52
44735: PUSH
44736: LD_INT 3
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44764: LD_ADDR_VAR 0 53
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 3
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 3
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: LIST
44807: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44808: LD_ADDR_VAR 0 54
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 3
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 3
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44849: LD_ADDR_VAR 0 55
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44889: LD_ADDR_VAR 0 56
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 3
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44930: LD_ADDR_VAR 0 57
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 3
44948: NEG
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 3
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44974: LD_ADDR_VAR 0 58
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: LD_INT 3
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 3
44993: NEG
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 3
45005: NEG
45006: PUSH
45007: LD_INT 3
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: LIST
45019: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45020: LD_ADDR_VAR 0 59
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45064: LD_ADDR_VAR 0 60
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45105: LD_ADDR_VAR 0 61
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: LIST
45144: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45145: LD_ADDR_VAR 0 62
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45186: LD_ADDR_VAR 0 63
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45230: LD_ADDR_VAR 0 64
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
// end ; 2 :
45276: GO 48542
45278: LD_INT 2
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45286
45284: GO 48541
45286: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45287: LD_ADDR_VAR 0 29
45291: PUSH
45292: LD_INT 4
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 4
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 5
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 5
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 4
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 3
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 3
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 5
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 3
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 4
45407: PUSH
45408: LD_INT 3
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 4
45417: PUSH
45418: LD_INT 4
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 3
45427: PUSH
45428: LD_INT 4
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: LD_INT 3
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 4
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 4
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 4
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 4
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 5
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 5
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 4
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 3
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: LD_INT 5
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 3
45570: NEG
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 3
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 4
45626: NEG
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 4
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 4
45649: NEG
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 4
45672: NEG
45673: PUSH
45674: LD_INT 4
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 4
45684: NEG
45685: PUSH
45686: LD_INT 5
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 4
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: LD_INT 3
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 4
45720: NEG
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 5
45732: NEG
45733: PUSH
45734: LD_INT 4
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 5
45744: NEG
45745: PUSH
45746: LD_INT 5
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 3
45756: NEG
45757: PUSH
45758: LD_INT 5
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 5
45768: NEG
45769: PUSH
45770: LD_INT 3
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45825: LD_ADDR_VAR 0 30
45829: PUSH
45830: LD_INT 4
45832: PUSH
45833: LD_INT 4
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 4
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 5
45852: PUSH
45853: LD_INT 4
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 5
45862: PUSH
45863: LD_INT 5
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 4
45872: PUSH
45873: LD_INT 5
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 3
45882: PUSH
45883: LD_INT 4
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 3
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 5
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: PUSH
45913: LD_INT 5
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 3
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 4
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 4
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 3
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 4
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 4
46015: NEG
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 4
46026: NEG
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 3
46038: NEG
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 4
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 5
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 5
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 5
46094: NEG
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 3
46106: NEG
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 3
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: LD_INT 4
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: LD_INT 3
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 4
46177: NEG
46178: PUSH
46179: LD_INT 3
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 4
46189: NEG
46190: PUSH
46191: LD_INT 4
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: LD_INT 4
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 4
46213: NEG
46214: PUSH
46215: LD_INT 2
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 4
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 5
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 4
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 3
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 4
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 5
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 3
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: LD_INT 5
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46372: LD_ADDR_VAR 0 31
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 4
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 4
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 5
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 5
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 4
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 3
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: LD_INT 5
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: NEG
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 4
46528: NEG
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 4
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 4
46551: NEG
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 4
46574: NEG
46575: PUSH
46576: LD_INT 4
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 4
46586: NEG
46587: PUSH
46588: LD_INT 5
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 3
46598: NEG
46599: PUSH
46600: LD_INT 4
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: LD_INT 3
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 4
46622: NEG
46623: PUSH
46624: LD_INT 3
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 5
46634: NEG
46635: PUSH
46636: LD_INT 4
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 5
46646: NEG
46647: PUSH
46648: LD_INT 5
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 3
46658: NEG
46659: PUSH
46660: LD_INT 5
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 5
46670: NEG
46671: PUSH
46672: LD_INT 3
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: LD_INT 4
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 3
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 4
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 4
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 4
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 4
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 5
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 5
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 4
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 3
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 3
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 5
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46922: LD_ADDR_VAR 0 32
46926: PUSH
46927: LD_INT 4
46929: NEG
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 4
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 4
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 5
46985: NEG
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 5
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 5
47008: NEG
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 3
47020: NEG
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 3
47031: NEG
47032: PUSH
47033: LD_INT 3
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: LD_INT 4
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: LD_INT 3
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 3
47079: NEG
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 4
47091: NEG
47092: PUSH
47093: LD_INT 3
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 4
47103: NEG
47104: PUSH
47105: LD_INT 4
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: LD_INT 4
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 4
47127: NEG
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 4
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 5
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 4
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 3
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 3
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 4
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: LD_INT 5
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 3
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: LD_INT 5
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 3
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 3
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 4
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 4
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 4
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 4
47334: PUSH
47335: LD_INT 4
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 4
47344: PUSH
47345: LD_INT 3
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 5
47354: PUSH
47355: LD_INT 4
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 5
47364: PUSH
47365: LD_INT 5
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 4
47374: PUSH
47375: LD_INT 5
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: LD_INT 4
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 3
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 5
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 3
47414: PUSH
47415: LD_INT 5
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47469: LD_ADDR_VAR 0 33
47473: PUSH
47474: LD_INT 4
47476: NEG
47477: PUSH
47478: LD_INT 4
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 4
47488: NEG
47489: PUSH
47490: LD_INT 5
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 3
47500: NEG
47501: PUSH
47502: LD_INT 4
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: LD_INT 3
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 4
47524: NEG
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 5
47536: NEG
47537: PUSH
47538: LD_INT 4
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 5
47548: NEG
47549: PUSH
47550: LD_INT 5
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 3
47560: NEG
47561: PUSH
47562: LD_INT 5
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 5
47572: NEG
47573: PUSH
47574: LD_INT 3
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 4
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: LD_INT 3
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 4
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 4
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 4
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 4
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 5
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 5
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 4
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 3
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 3
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 5
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 3
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 4
47799: PUSH
47800: LD_INT 3
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 4
47809: PUSH
47810: LD_INT 4
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 3
47819: PUSH
47820: LD_INT 4
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 4
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 4
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 4
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: LD_INT 4
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 5
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 5
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 4
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 5
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: LD_INT 3
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48007: LD_ADDR_VAR 0 34
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 4
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 5
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 4
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 4
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 5
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 3
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: LD_INT 5
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 3
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 4
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 4
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 4
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 4
48209: PUSH
48210: LD_INT 4
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 4
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 5
48229: PUSH
48230: LD_INT 4
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 5
48239: PUSH
48240: LD_INT 5
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 4
48249: PUSH
48250: LD_INT 5
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: LD_INT 4
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: LD_INT 3
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 5
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: LD_INT 5
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 3
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 4
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 4
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: LD_INT 4
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 4
48392: NEG
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 4
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: NEG
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 4
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 5
48448: NEG
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 5
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 5
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: ST_TO_ADDR
// end ; end ;
48539: GO 48542
48541: POP
// case btype of b_depot , b_warehouse :
48542: LD_VAR 0 1
48546: PUSH
48547: LD_INT 0
48549: DOUBLE
48550: EQUAL
48551: IFTRUE 48561
48553: LD_INT 1
48555: DOUBLE
48556: EQUAL
48557: IFTRUE 48561
48559: GO 48762
48561: POP
// case nation of nation_american :
48562: LD_VAR 0 5
48566: PUSH
48567: LD_INT 1
48569: DOUBLE
48570: EQUAL
48571: IFTRUE 48575
48573: GO 48631
48575: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48576: LD_ADDR_VAR 0 9
48580: PUSH
48581: LD_VAR 0 11
48585: PUSH
48586: LD_VAR 0 12
48590: PUSH
48591: LD_VAR 0 13
48595: PUSH
48596: LD_VAR 0 14
48600: PUSH
48601: LD_VAR 0 15
48605: PUSH
48606: LD_VAR 0 16
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: PUSH
48619: LD_VAR 0 4
48623: PUSH
48624: LD_INT 1
48626: PLUS
48627: ARRAY
48628: ST_TO_ADDR
48629: GO 48760
48631: LD_INT 2
48633: DOUBLE
48634: EQUAL
48635: IFTRUE 48639
48637: GO 48695
48639: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48640: LD_ADDR_VAR 0 9
48644: PUSH
48645: LD_VAR 0 17
48649: PUSH
48650: LD_VAR 0 18
48654: PUSH
48655: LD_VAR 0 19
48659: PUSH
48660: LD_VAR 0 20
48664: PUSH
48665: LD_VAR 0 21
48669: PUSH
48670: LD_VAR 0 22
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: PUSH
48683: LD_VAR 0 4
48687: PUSH
48688: LD_INT 1
48690: PLUS
48691: ARRAY
48692: ST_TO_ADDR
48693: GO 48760
48695: LD_INT 3
48697: DOUBLE
48698: EQUAL
48699: IFTRUE 48703
48701: GO 48759
48703: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48704: LD_ADDR_VAR 0 9
48708: PUSH
48709: LD_VAR 0 23
48713: PUSH
48714: LD_VAR 0 24
48718: PUSH
48719: LD_VAR 0 25
48723: PUSH
48724: LD_VAR 0 26
48728: PUSH
48729: LD_VAR 0 27
48733: PUSH
48734: LD_VAR 0 28
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: PUSH
48747: LD_VAR 0 4
48751: PUSH
48752: LD_INT 1
48754: PLUS
48755: ARRAY
48756: ST_TO_ADDR
48757: GO 48760
48759: POP
48760: GO 49315
48762: LD_INT 2
48764: DOUBLE
48765: EQUAL
48766: IFTRUE 48776
48768: LD_INT 3
48770: DOUBLE
48771: EQUAL
48772: IFTRUE 48776
48774: GO 48832
48776: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48777: LD_ADDR_VAR 0 9
48781: PUSH
48782: LD_VAR 0 29
48786: PUSH
48787: LD_VAR 0 30
48791: PUSH
48792: LD_VAR 0 31
48796: PUSH
48797: LD_VAR 0 32
48801: PUSH
48802: LD_VAR 0 33
48806: PUSH
48807: LD_VAR 0 34
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: PUSH
48820: LD_VAR 0 4
48824: PUSH
48825: LD_INT 1
48827: PLUS
48828: ARRAY
48829: ST_TO_ADDR
48830: GO 49315
48832: LD_INT 16
48834: DOUBLE
48835: EQUAL
48836: IFTRUE 48894
48838: LD_INT 17
48840: DOUBLE
48841: EQUAL
48842: IFTRUE 48894
48844: LD_INT 18
48846: DOUBLE
48847: EQUAL
48848: IFTRUE 48894
48850: LD_INT 19
48852: DOUBLE
48853: EQUAL
48854: IFTRUE 48894
48856: LD_INT 22
48858: DOUBLE
48859: EQUAL
48860: IFTRUE 48894
48862: LD_INT 20
48864: DOUBLE
48865: EQUAL
48866: IFTRUE 48894
48868: LD_INT 21
48870: DOUBLE
48871: EQUAL
48872: IFTRUE 48894
48874: LD_INT 23
48876: DOUBLE
48877: EQUAL
48878: IFTRUE 48894
48880: LD_INT 24
48882: DOUBLE
48883: EQUAL
48884: IFTRUE 48894
48886: LD_INT 25
48888: DOUBLE
48889: EQUAL
48890: IFTRUE 48894
48892: GO 48950
48894: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48895: LD_ADDR_VAR 0 9
48899: PUSH
48900: LD_VAR 0 35
48904: PUSH
48905: LD_VAR 0 36
48909: PUSH
48910: LD_VAR 0 37
48914: PUSH
48915: LD_VAR 0 38
48919: PUSH
48920: LD_VAR 0 39
48924: PUSH
48925: LD_VAR 0 40
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: PUSH
48938: LD_VAR 0 4
48942: PUSH
48943: LD_INT 1
48945: PLUS
48946: ARRAY
48947: ST_TO_ADDR
48948: GO 49315
48950: LD_INT 6
48952: DOUBLE
48953: EQUAL
48954: IFTRUE 49006
48956: LD_INT 7
48958: DOUBLE
48959: EQUAL
48960: IFTRUE 49006
48962: LD_INT 8
48964: DOUBLE
48965: EQUAL
48966: IFTRUE 49006
48968: LD_INT 13
48970: DOUBLE
48971: EQUAL
48972: IFTRUE 49006
48974: LD_INT 12
48976: DOUBLE
48977: EQUAL
48978: IFTRUE 49006
48980: LD_INT 15
48982: DOUBLE
48983: EQUAL
48984: IFTRUE 49006
48986: LD_INT 11
48988: DOUBLE
48989: EQUAL
48990: IFTRUE 49006
48992: LD_INT 14
48994: DOUBLE
48995: EQUAL
48996: IFTRUE 49006
48998: LD_INT 10
49000: DOUBLE
49001: EQUAL
49002: IFTRUE 49006
49004: GO 49062
49006: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49007: LD_ADDR_VAR 0 9
49011: PUSH
49012: LD_VAR 0 41
49016: PUSH
49017: LD_VAR 0 42
49021: PUSH
49022: LD_VAR 0 43
49026: PUSH
49027: LD_VAR 0 44
49031: PUSH
49032: LD_VAR 0 45
49036: PUSH
49037: LD_VAR 0 46
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: PUSH
49050: LD_VAR 0 4
49054: PUSH
49055: LD_INT 1
49057: PLUS
49058: ARRAY
49059: ST_TO_ADDR
49060: GO 49315
49062: LD_INT 36
49064: DOUBLE
49065: EQUAL
49066: IFTRUE 49070
49068: GO 49126
49070: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49071: LD_ADDR_VAR 0 9
49075: PUSH
49076: LD_VAR 0 47
49080: PUSH
49081: LD_VAR 0 48
49085: PUSH
49086: LD_VAR 0 49
49090: PUSH
49091: LD_VAR 0 50
49095: PUSH
49096: LD_VAR 0 51
49100: PUSH
49101: LD_VAR 0 52
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: PUSH
49114: LD_VAR 0 4
49118: PUSH
49119: LD_INT 1
49121: PLUS
49122: ARRAY
49123: ST_TO_ADDR
49124: GO 49315
49126: LD_INT 4
49128: DOUBLE
49129: EQUAL
49130: IFTRUE 49152
49132: LD_INT 5
49134: DOUBLE
49135: EQUAL
49136: IFTRUE 49152
49138: LD_INT 34
49140: DOUBLE
49141: EQUAL
49142: IFTRUE 49152
49144: LD_INT 37
49146: DOUBLE
49147: EQUAL
49148: IFTRUE 49152
49150: GO 49208
49152: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49153: LD_ADDR_VAR 0 9
49157: PUSH
49158: LD_VAR 0 53
49162: PUSH
49163: LD_VAR 0 54
49167: PUSH
49168: LD_VAR 0 55
49172: PUSH
49173: LD_VAR 0 56
49177: PUSH
49178: LD_VAR 0 57
49182: PUSH
49183: LD_VAR 0 58
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: PUSH
49196: LD_VAR 0 4
49200: PUSH
49201: LD_INT 1
49203: PLUS
49204: ARRAY
49205: ST_TO_ADDR
49206: GO 49315
49208: LD_INT 31
49210: DOUBLE
49211: EQUAL
49212: IFTRUE 49258
49214: LD_INT 32
49216: DOUBLE
49217: EQUAL
49218: IFTRUE 49258
49220: LD_INT 33
49222: DOUBLE
49223: EQUAL
49224: IFTRUE 49258
49226: LD_INT 27
49228: DOUBLE
49229: EQUAL
49230: IFTRUE 49258
49232: LD_INT 26
49234: DOUBLE
49235: EQUAL
49236: IFTRUE 49258
49238: LD_INT 28
49240: DOUBLE
49241: EQUAL
49242: IFTRUE 49258
49244: LD_INT 29
49246: DOUBLE
49247: EQUAL
49248: IFTRUE 49258
49250: LD_INT 30
49252: DOUBLE
49253: EQUAL
49254: IFTRUE 49258
49256: GO 49314
49258: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49259: LD_ADDR_VAR 0 9
49263: PUSH
49264: LD_VAR 0 59
49268: PUSH
49269: LD_VAR 0 60
49273: PUSH
49274: LD_VAR 0 61
49278: PUSH
49279: LD_VAR 0 62
49283: PUSH
49284: LD_VAR 0 63
49288: PUSH
49289: LD_VAR 0 64
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: PUSH
49302: LD_VAR 0 4
49306: PUSH
49307: LD_INT 1
49309: PLUS
49310: ARRAY
49311: ST_TO_ADDR
49312: GO 49315
49314: POP
// temp_list2 = [ ] ;
49315: LD_ADDR_VAR 0 10
49319: PUSH
49320: EMPTY
49321: ST_TO_ADDR
// for i in temp_list do
49322: LD_ADDR_VAR 0 8
49326: PUSH
49327: LD_VAR 0 9
49331: PUSH
49332: FOR_IN
49333: IFFALSE 49385
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49335: LD_ADDR_VAR 0 10
49339: PUSH
49340: LD_VAR 0 10
49344: PUSH
49345: LD_VAR 0 8
49349: PUSH
49350: LD_INT 1
49352: ARRAY
49353: PUSH
49354: LD_VAR 0 2
49358: PLUS
49359: PUSH
49360: LD_VAR 0 8
49364: PUSH
49365: LD_INT 2
49367: ARRAY
49368: PUSH
49369: LD_VAR 0 3
49373: PLUS
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: EMPTY
49380: LIST
49381: ADD
49382: ST_TO_ADDR
49383: GO 49332
49385: POP
49386: POP
// result = temp_list2 ;
49387: LD_ADDR_VAR 0 7
49391: PUSH
49392: LD_VAR 0 10
49396: ST_TO_ADDR
// end ;
49397: LD_VAR 0 7
49401: RET
// export function EnemyInRange ( unit , dist ) ; begin
49402: LD_INT 0
49404: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49405: LD_ADDR_VAR 0 3
49409: PUSH
49410: LD_VAR 0 1
49414: PPUSH
49415: CALL_OW 255
49419: PPUSH
49420: LD_VAR 0 1
49424: PPUSH
49425: CALL_OW 250
49429: PPUSH
49430: LD_VAR 0 1
49434: PPUSH
49435: CALL_OW 251
49439: PPUSH
49440: LD_VAR 0 2
49444: PPUSH
49445: CALL 23173 0 4
49449: PUSH
49450: LD_INT 4
49452: ARRAY
49453: ST_TO_ADDR
// end ;
49454: LD_VAR 0 3
49458: RET
// export function PlayerSeeMe ( unit ) ; begin
49459: LD_INT 0
49461: PPUSH
// result := See ( your_side , unit ) ;
49462: LD_ADDR_VAR 0 2
49466: PUSH
49467: LD_OWVAR 2
49471: PPUSH
49472: LD_VAR 0 1
49476: PPUSH
49477: CALL_OW 292
49481: ST_TO_ADDR
// end ;
49482: LD_VAR 0 2
49486: RET
// export function ReverseDir ( unit ) ; begin
49487: LD_INT 0
49489: PPUSH
// if not unit then
49490: LD_VAR 0 1
49494: NOT
49495: IFFALSE 49499
// exit ;
49497: GO 49522
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49499: LD_ADDR_VAR 0 2
49503: PUSH
49504: LD_VAR 0 1
49508: PPUSH
49509: CALL_OW 254
49513: PUSH
49514: LD_INT 3
49516: PLUS
49517: PUSH
49518: LD_INT 6
49520: MOD
49521: ST_TO_ADDR
// end ;
49522: LD_VAR 0 2
49526: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49527: LD_INT 0
49529: PPUSH
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
// if not hexes then
49534: LD_VAR 0 2
49538: NOT
49539: IFFALSE 49543
// exit ;
49541: GO 49691
// dist := 9999 ;
49543: LD_ADDR_VAR 0 5
49547: PUSH
49548: LD_INT 9999
49550: ST_TO_ADDR
// for i = 1 to hexes do
49551: LD_ADDR_VAR 0 4
49555: PUSH
49556: DOUBLE
49557: LD_INT 1
49559: DEC
49560: ST_TO_ADDR
49561: LD_VAR 0 2
49565: PUSH
49566: FOR_TO
49567: IFFALSE 49679
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49569: LD_VAR 0 1
49573: PPUSH
49574: LD_VAR 0 2
49578: PUSH
49579: LD_VAR 0 4
49583: ARRAY
49584: PUSH
49585: LD_INT 1
49587: ARRAY
49588: PPUSH
49589: LD_VAR 0 2
49593: PUSH
49594: LD_VAR 0 4
49598: ARRAY
49599: PUSH
49600: LD_INT 2
49602: ARRAY
49603: PPUSH
49604: CALL_OW 297
49608: PUSH
49609: LD_VAR 0 5
49613: LESS
49614: IFFALSE 49677
// begin hex := hexes [ i ] ;
49616: LD_ADDR_VAR 0 7
49620: PUSH
49621: LD_VAR 0 2
49625: PUSH
49626: LD_VAR 0 4
49630: ARRAY
49631: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49632: LD_ADDR_VAR 0 5
49636: PUSH
49637: LD_VAR 0 1
49641: PPUSH
49642: LD_VAR 0 2
49646: PUSH
49647: LD_VAR 0 4
49651: ARRAY
49652: PUSH
49653: LD_INT 1
49655: ARRAY
49656: PPUSH
49657: LD_VAR 0 2
49661: PUSH
49662: LD_VAR 0 4
49666: ARRAY
49667: PUSH
49668: LD_INT 2
49670: ARRAY
49671: PPUSH
49672: CALL_OW 297
49676: ST_TO_ADDR
// end ; end ;
49677: GO 49566
49679: POP
49680: POP
// result := hex ;
49681: LD_ADDR_VAR 0 3
49685: PUSH
49686: LD_VAR 0 7
49690: ST_TO_ADDR
// end ;
49691: LD_VAR 0 3
49695: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49696: LD_INT 0
49698: PPUSH
49699: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49700: LD_VAR 0 1
49704: NOT
49705: PUSH
49706: LD_VAR 0 1
49710: PUSH
49711: LD_INT 21
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 23
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PPUSH
49735: CALL_OW 69
49739: IN
49740: NOT
49741: OR
49742: IFFALSE 49746
// exit ;
49744: GO 49793
// for i = 1 to 3 do
49746: LD_ADDR_VAR 0 3
49750: PUSH
49751: DOUBLE
49752: LD_INT 1
49754: DEC
49755: ST_TO_ADDR
49756: LD_INT 3
49758: PUSH
49759: FOR_TO
49760: IFFALSE 49791
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49762: LD_VAR 0 1
49766: PPUSH
49767: CALL_OW 250
49771: PPUSH
49772: LD_VAR 0 1
49776: PPUSH
49777: CALL_OW 251
49781: PPUSH
49782: LD_INT 1
49784: PPUSH
49785: CALL_OW 453
49789: GO 49759
49791: POP
49792: POP
// end ;
49793: LD_VAR 0 2
49797: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49798: LD_INT 0
49800: PPUSH
49801: PPUSH
49802: PPUSH
49803: PPUSH
49804: PPUSH
49805: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49806: LD_VAR 0 1
49810: NOT
49811: PUSH
49812: LD_VAR 0 2
49816: NOT
49817: OR
49818: PUSH
49819: LD_VAR 0 1
49823: PPUSH
49824: CALL_OW 314
49828: OR
49829: IFFALSE 49833
// exit ;
49831: GO 50274
// x := GetX ( enemy_unit ) ;
49833: LD_ADDR_VAR 0 7
49837: PUSH
49838: LD_VAR 0 2
49842: PPUSH
49843: CALL_OW 250
49847: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49848: LD_ADDR_VAR 0 8
49852: PUSH
49853: LD_VAR 0 2
49857: PPUSH
49858: CALL_OW 251
49862: ST_TO_ADDR
// if not x or not y then
49863: LD_VAR 0 7
49867: NOT
49868: PUSH
49869: LD_VAR 0 8
49873: NOT
49874: OR
49875: IFFALSE 49879
// exit ;
49877: GO 50274
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49879: LD_ADDR_VAR 0 6
49883: PUSH
49884: LD_VAR 0 7
49888: PPUSH
49889: LD_INT 0
49891: PPUSH
49892: LD_INT 4
49894: PPUSH
49895: CALL_OW 272
49899: PUSH
49900: LD_VAR 0 8
49904: PPUSH
49905: LD_INT 0
49907: PPUSH
49908: LD_INT 4
49910: PPUSH
49911: CALL_OW 273
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_VAR 0 7
49924: PPUSH
49925: LD_INT 1
49927: PPUSH
49928: LD_INT 4
49930: PPUSH
49931: CALL_OW 272
49935: PUSH
49936: LD_VAR 0 8
49940: PPUSH
49941: LD_INT 1
49943: PPUSH
49944: LD_INT 4
49946: PPUSH
49947: CALL_OW 273
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_VAR 0 7
49960: PPUSH
49961: LD_INT 2
49963: PPUSH
49964: LD_INT 4
49966: PPUSH
49967: CALL_OW 272
49971: PUSH
49972: LD_VAR 0 8
49976: PPUSH
49977: LD_INT 2
49979: PPUSH
49980: LD_INT 4
49982: PPUSH
49983: CALL_OW 273
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_VAR 0 7
49996: PPUSH
49997: LD_INT 3
49999: PPUSH
50000: LD_INT 4
50002: PPUSH
50003: CALL_OW 272
50007: PUSH
50008: LD_VAR 0 8
50012: PPUSH
50013: LD_INT 3
50015: PPUSH
50016: LD_INT 4
50018: PPUSH
50019: CALL_OW 273
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_VAR 0 7
50032: PPUSH
50033: LD_INT 4
50035: PPUSH
50036: LD_INT 4
50038: PPUSH
50039: CALL_OW 272
50043: PUSH
50044: LD_VAR 0 8
50048: PPUSH
50049: LD_INT 4
50051: PPUSH
50052: LD_INT 4
50054: PPUSH
50055: CALL_OW 273
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_VAR 0 7
50068: PPUSH
50069: LD_INT 5
50071: PPUSH
50072: LD_INT 4
50074: PPUSH
50075: CALL_OW 272
50079: PUSH
50080: LD_VAR 0 8
50084: PPUSH
50085: LD_INT 5
50087: PPUSH
50088: LD_INT 4
50090: PPUSH
50091: CALL_OW 273
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: ST_TO_ADDR
// for i = tmp downto 1 do
50108: LD_ADDR_VAR 0 4
50112: PUSH
50113: DOUBLE
50114: LD_VAR 0 6
50118: INC
50119: ST_TO_ADDR
50120: LD_INT 1
50122: PUSH
50123: FOR_DOWNTO
50124: IFFALSE 50225
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50126: LD_VAR 0 6
50130: PUSH
50131: LD_VAR 0 4
50135: ARRAY
50136: PUSH
50137: LD_INT 1
50139: ARRAY
50140: PPUSH
50141: LD_VAR 0 6
50145: PUSH
50146: LD_VAR 0 4
50150: ARRAY
50151: PUSH
50152: LD_INT 2
50154: ARRAY
50155: PPUSH
50156: CALL_OW 488
50160: NOT
50161: PUSH
50162: LD_VAR 0 6
50166: PUSH
50167: LD_VAR 0 4
50171: ARRAY
50172: PUSH
50173: LD_INT 1
50175: ARRAY
50176: PPUSH
50177: LD_VAR 0 6
50181: PUSH
50182: LD_VAR 0 4
50186: ARRAY
50187: PUSH
50188: LD_INT 2
50190: ARRAY
50191: PPUSH
50192: CALL_OW 428
50196: PUSH
50197: LD_INT 0
50199: NONEQUAL
50200: OR
50201: IFFALSE 50223
// tmp := Delete ( tmp , i ) ;
50203: LD_ADDR_VAR 0 6
50207: PUSH
50208: LD_VAR 0 6
50212: PPUSH
50213: LD_VAR 0 4
50217: PPUSH
50218: CALL_OW 3
50222: ST_TO_ADDR
50223: GO 50123
50225: POP
50226: POP
// j := GetClosestHex ( unit , tmp ) ;
50227: LD_ADDR_VAR 0 5
50231: PUSH
50232: LD_VAR 0 1
50236: PPUSH
50237: LD_VAR 0 6
50241: PPUSH
50242: CALL 49527 0 2
50246: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50247: LD_VAR 0 1
50251: PPUSH
50252: LD_VAR 0 5
50256: PUSH
50257: LD_INT 1
50259: ARRAY
50260: PPUSH
50261: LD_VAR 0 5
50265: PUSH
50266: LD_INT 2
50268: ARRAY
50269: PPUSH
50270: CALL_OW 111
// end ;
50274: LD_VAR 0 3
50278: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50279: LD_INT 0
50281: PPUSH
50282: PPUSH
50283: PPUSH
// uc_side = 0 ;
50284: LD_ADDR_OWVAR 20
50288: PUSH
50289: LD_INT 0
50291: ST_TO_ADDR
// uc_nation = 0 ;
50292: LD_ADDR_OWVAR 21
50296: PUSH
50297: LD_INT 0
50299: ST_TO_ADDR
// InitHc_All ( ) ;
50300: CALL_OW 584
// InitVc ;
50304: CALL_OW 20
// if mastodonts then
50308: LD_VAR 0 6
50312: IFFALSE 50379
// for i = 1 to mastodonts do
50314: LD_ADDR_VAR 0 11
50318: PUSH
50319: DOUBLE
50320: LD_INT 1
50322: DEC
50323: ST_TO_ADDR
50324: LD_VAR 0 6
50328: PUSH
50329: FOR_TO
50330: IFFALSE 50377
// begin vc_chassis := 31 ;
50332: LD_ADDR_OWVAR 37
50336: PUSH
50337: LD_INT 31
50339: ST_TO_ADDR
// vc_control := control_rider ;
50340: LD_ADDR_OWVAR 38
50344: PUSH
50345: LD_INT 4
50347: ST_TO_ADDR
// animal := CreateVehicle ;
50348: LD_ADDR_VAR 0 12
50352: PUSH
50353: CALL_OW 45
50357: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50358: LD_VAR 0 12
50362: PPUSH
50363: LD_VAR 0 8
50367: PPUSH
50368: LD_INT 0
50370: PPUSH
50371: CALL 52567 0 3
// end ;
50375: GO 50329
50377: POP
50378: POP
// if horses then
50379: LD_VAR 0 5
50383: IFFALSE 50450
// for i = 1 to horses do
50385: LD_ADDR_VAR 0 11
50389: PUSH
50390: DOUBLE
50391: LD_INT 1
50393: DEC
50394: ST_TO_ADDR
50395: LD_VAR 0 5
50399: PUSH
50400: FOR_TO
50401: IFFALSE 50448
// begin hc_class := 21 ;
50403: LD_ADDR_OWVAR 28
50407: PUSH
50408: LD_INT 21
50410: ST_TO_ADDR
// hc_gallery :=  ;
50411: LD_ADDR_OWVAR 33
50415: PUSH
50416: LD_STRING 
50418: ST_TO_ADDR
// animal := CreateHuman ;
50419: LD_ADDR_VAR 0 12
50423: PUSH
50424: CALL_OW 44
50428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50429: LD_VAR 0 12
50433: PPUSH
50434: LD_VAR 0 8
50438: PPUSH
50439: LD_INT 0
50441: PPUSH
50442: CALL 52567 0 3
// end ;
50446: GO 50400
50448: POP
50449: POP
// if birds then
50450: LD_VAR 0 1
50454: IFFALSE 50521
// for i = 1 to birds do
50456: LD_ADDR_VAR 0 11
50460: PUSH
50461: DOUBLE
50462: LD_INT 1
50464: DEC
50465: ST_TO_ADDR
50466: LD_VAR 0 1
50470: PUSH
50471: FOR_TO
50472: IFFALSE 50519
// begin hc_class = 18 ;
50474: LD_ADDR_OWVAR 28
50478: PUSH
50479: LD_INT 18
50481: ST_TO_ADDR
// hc_gallery =  ;
50482: LD_ADDR_OWVAR 33
50486: PUSH
50487: LD_STRING 
50489: ST_TO_ADDR
// animal := CreateHuman ;
50490: LD_ADDR_VAR 0 12
50494: PUSH
50495: CALL_OW 44
50499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50500: LD_VAR 0 12
50504: PPUSH
50505: LD_VAR 0 8
50509: PPUSH
50510: LD_INT 0
50512: PPUSH
50513: CALL 52567 0 3
// end ;
50517: GO 50471
50519: POP
50520: POP
// if tigers then
50521: LD_VAR 0 2
50525: IFFALSE 50609
// for i = 1 to tigers do
50527: LD_ADDR_VAR 0 11
50531: PUSH
50532: DOUBLE
50533: LD_INT 1
50535: DEC
50536: ST_TO_ADDR
50537: LD_VAR 0 2
50541: PUSH
50542: FOR_TO
50543: IFFALSE 50607
// begin hc_class = class_tiger ;
50545: LD_ADDR_OWVAR 28
50549: PUSH
50550: LD_INT 14
50552: ST_TO_ADDR
// hc_gallery =  ;
50553: LD_ADDR_OWVAR 33
50557: PUSH
50558: LD_STRING 
50560: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50561: LD_ADDR_OWVAR 35
50565: PUSH
50566: LD_INT 7
50568: NEG
50569: PPUSH
50570: LD_INT 7
50572: PPUSH
50573: CALL_OW 12
50577: ST_TO_ADDR
// animal := CreateHuman ;
50578: LD_ADDR_VAR 0 12
50582: PUSH
50583: CALL_OW 44
50587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50588: LD_VAR 0 12
50592: PPUSH
50593: LD_VAR 0 8
50597: PPUSH
50598: LD_INT 0
50600: PPUSH
50601: CALL 52567 0 3
// end ;
50605: GO 50542
50607: POP
50608: POP
// if apemans then
50609: LD_VAR 0 3
50613: IFFALSE 50736
// for i = 1 to apemans do
50615: LD_ADDR_VAR 0 11
50619: PUSH
50620: DOUBLE
50621: LD_INT 1
50623: DEC
50624: ST_TO_ADDR
50625: LD_VAR 0 3
50629: PUSH
50630: FOR_TO
50631: IFFALSE 50734
// begin hc_class = class_apeman ;
50633: LD_ADDR_OWVAR 28
50637: PUSH
50638: LD_INT 12
50640: ST_TO_ADDR
// hc_gallery =  ;
50641: LD_ADDR_OWVAR 33
50645: PUSH
50646: LD_STRING 
50648: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
50649: LD_ADDR_OWVAR 35
50653: PUSH
50654: LD_INT 5
50656: NEG
50657: PPUSH
50658: LD_INT 5
50660: PPUSH
50661: CALL_OW 12
50665: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50666: LD_ADDR_OWVAR 31
50670: PUSH
50671: LD_INT 1
50673: PPUSH
50674: LD_INT 3
50676: PPUSH
50677: CALL_OW 12
50681: PUSH
50682: LD_INT 1
50684: PPUSH
50685: LD_INT 3
50687: PPUSH
50688: CALL_OW 12
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// animal := CreateHuman ;
50705: LD_ADDR_VAR 0 12
50709: PUSH
50710: CALL_OW 44
50714: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50715: LD_VAR 0 12
50719: PPUSH
50720: LD_VAR 0 8
50724: PPUSH
50725: LD_INT 0
50727: PPUSH
50728: CALL 52567 0 3
// end ;
50732: GO 50630
50734: POP
50735: POP
// if enchidnas then
50736: LD_VAR 0 4
50740: IFFALSE 50807
// for i = 1 to enchidnas do
50742: LD_ADDR_VAR 0 11
50746: PUSH
50747: DOUBLE
50748: LD_INT 1
50750: DEC
50751: ST_TO_ADDR
50752: LD_VAR 0 4
50756: PUSH
50757: FOR_TO
50758: IFFALSE 50805
// begin hc_class = 13 ;
50760: LD_ADDR_OWVAR 28
50764: PUSH
50765: LD_INT 13
50767: ST_TO_ADDR
// hc_gallery =  ;
50768: LD_ADDR_OWVAR 33
50772: PUSH
50773: LD_STRING 
50775: ST_TO_ADDR
// animal := CreateHuman ;
50776: LD_ADDR_VAR 0 12
50780: PUSH
50781: CALL_OW 44
50785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50786: LD_VAR 0 12
50790: PPUSH
50791: LD_VAR 0 8
50795: PPUSH
50796: LD_INT 0
50798: PPUSH
50799: CALL 52567 0 3
// end ;
50803: GO 50757
50805: POP
50806: POP
// if fishes then
50807: LD_VAR 0 7
50811: IFFALSE 50878
// for i = 1 to fishes do
50813: LD_ADDR_VAR 0 11
50817: PUSH
50818: DOUBLE
50819: LD_INT 1
50821: DEC
50822: ST_TO_ADDR
50823: LD_VAR 0 7
50827: PUSH
50828: FOR_TO
50829: IFFALSE 50876
// begin hc_class = 20 ;
50831: LD_ADDR_OWVAR 28
50835: PUSH
50836: LD_INT 20
50838: ST_TO_ADDR
// hc_gallery =  ;
50839: LD_ADDR_OWVAR 33
50843: PUSH
50844: LD_STRING 
50846: ST_TO_ADDR
// animal := CreateHuman ;
50847: LD_ADDR_VAR 0 12
50851: PUSH
50852: CALL_OW 44
50856: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50857: LD_VAR 0 12
50861: PPUSH
50862: LD_VAR 0 9
50866: PPUSH
50867: LD_INT 0
50869: PPUSH
50870: CALL 52567 0 3
// end ;
50874: GO 50828
50876: POP
50877: POP
// end ;
50878: LD_VAR 0 10
50882: RET
// export function WantHeal ( sci , unit ) ; begin
50883: LD_INT 0
50885: PPUSH
// if GetTaskList ( sci ) > 0 then
50886: LD_VAR 0 1
50890: PPUSH
50891: CALL_OW 437
50895: PUSH
50896: LD_INT 0
50898: GREATER
50899: IFFALSE 50969
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50901: LD_VAR 0 1
50905: PPUSH
50906: CALL_OW 437
50910: PUSH
50911: LD_INT 1
50913: ARRAY
50914: PUSH
50915: LD_INT 1
50917: ARRAY
50918: PUSH
50919: LD_STRING l
50921: EQUAL
50922: PUSH
50923: LD_VAR 0 1
50927: PPUSH
50928: CALL_OW 437
50932: PUSH
50933: LD_INT 1
50935: ARRAY
50936: PUSH
50937: LD_INT 4
50939: ARRAY
50940: PUSH
50941: LD_VAR 0 2
50945: EQUAL
50946: AND
50947: IFFALSE 50959
// result := true else
50949: LD_ADDR_VAR 0 3
50953: PUSH
50954: LD_INT 1
50956: ST_TO_ADDR
50957: GO 50967
// result := false ;
50959: LD_ADDR_VAR 0 3
50963: PUSH
50964: LD_INT 0
50966: ST_TO_ADDR
// end else
50967: GO 50977
// result := false ;
50969: LD_ADDR_VAR 0 3
50973: PUSH
50974: LD_INT 0
50976: ST_TO_ADDR
// end ;
50977: LD_VAR 0 3
50981: RET
// export function HealTarget ( sci ) ; begin
50982: LD_INT 0
50984: PPUSH
// if not sci then
50985: LD_VAR 0 1
50989: NOT
50990: IFFALSE 50994
// exit ;
50992: GO 51059
// result := 0 ;
50994: LD_ADDR_VAR 0 2
50998: PUSH
50999: LD_INT 0
51001: ST_TO_ADDR
// if GetTaskList ( sci ) then
51002: LD_VAR 0 1
51006: PPUSH
51007: CALL_OW 437
51011: IFFALSE 51059
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51013: LD_VAR 0 1
51017: PPUSH
51018: CALL_OW 437
51022: PUSH
51023: LD_INT 1
51025: ARRAY
51026: PUSH
51027: LD_INT 1
51029: ARRAY
51030: PUSH
51031: LD_STRING l
51033: EQUAL
51034: IFFALSE 51059
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51036: LD_ADDR_VAR 0 2
51040: PUSH
51041: LD_VAR 0 1
51045: PPUSH
51046: CALL_OW 437
51050: PUSH
51051: LD_INT 1
51053: ARRAY
51054: PUSH
51055: LD_INT 4
51057: ARRAY
51058: ST_TO_ADDR
// end ;
51059: LD_VAR 0 2
51063: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51064: LD_INT 0
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
// if not base_units then
51070: LD_VAR 0 1
51074: NOT
51075: IFFALSE 51079
// exit ;
51077: GO 51166
// result := false ;
51079: LD_ADDR_VAR 0 2
51083: PUSH
51084: LD_INT 0
51086: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51087: LD_ADDR_VAR 0 5
51091: PUSH
51092: LD_VAR 0 1
51096: PPUSH
51097: LD_INT 21
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PPUSH
51107: CALL_OW 72
51111: ST_TO_ADDR
// if not tmp then
51112: LD_VAR 0 5
51116: NOT
51117: IFFALSE 51121
// exit ;
51119: GO 51166
// for i in tmp do
51121: LD_ADDR_VAR 0 3
51125: PUSH
51126: LD_VAR 0 5
51130: PUSH
51131: FOR_IN
51132: IFFALSE 51164
// begin result := EnemyInRange ( i , 22 ) ;
51134: LD_ADDR_VAR 0 2
51138: PUSH
51139: LD_VAR 0 3
51143: PPUSH
51144: LD_INT 22
51146: PPUSH
51147: CALL 49402 0 2
51151: ST_TO_ADDR
// if result then
51152: LD_VAR 0 2
51156: IFFALSE 51162
// exit ;
51158: POP
51159: POP
51160: GO 51166
// end ;
51162: GO 51131
51164: POP
51165: POP
// end ;
51166: LD_VAR 0 2
51170: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51171: LD_INT 0
51173: PPUSH
51174: PPUSH
// if not units then
51175: LD_VAR 0 1
51179: NOT
51180: IFFALSE 51184
// exit ;
51182: GO 51254
// result := [ ] ;
51184: LD_ADDR_VAR 0 3
51188: PUSH
51189: EMPTY
51190: ST_TO_ADDR
// for i in units do
51191: LD_ADDR_VAR 0 4
51195: PUSH
51196: LD_VAR 0 1
51200: PUSH
51201: FOR_IN
51202: IFFALSE 51252
// if GetTag ( i ) = tag then
51204: LD_VAR 0 4
51208: PPUSH
51209: CALL_OW 110
51213: PUSH
51214: LD_VAR 0 2
51218: EQUAL
51219: IFFALSE 51250
// result := Insert ( result , result + 1 , i ) ;
51221: LD_ADDR_VAR 0 3
51225: PUSH
51226: LD_VAR 0 3
51230: PPUSH
51231: LD_VAR 0 3
51235: PUSH
51236: LD_INT 1
51238: PLUS
51239: PPUSH
51240: LD_VAR 0 4
51244: PPUSH
51245: CALL_OW 2
51249: ST_TO_ADDR
51250: GO 51201
51252: POP
51253: POP
// end ;
51254: LD_VAR 0 3
51258: RET
// export function IsDriver ( un ) ; begin
51259: LD_INT 0
51261: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51262: LD_ADDR_VAR 0 2
51266: PUSH
51267: LD_VAR 0 1
51271: PUSH
51272: LD_INT 55
51274: PUSH
51275: EMPTY
51276: LIST
51277: PPUSH
51278: CALL_OW 69
51282: IN
51283: ST_TO_ADDR
// end ;
51284: LD_VAR 0 2
51288: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51289: LD_INT 0
51291: PPUSH
51292: PPUSH
// list := [ ] ;
51293: LD_ADDR_VAR 0 5
51297: PUSH
51298: EMPTY
51299: ST_TO_ADDR
// case d of 0 :
51300: LD_VAR 0 3
51304: PUSH
51305: LD_INT 0
51307: DOUBLE
51308: EQUAL
51309: IFTRUE 51313
51311: GO 51446
51313: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51314: LD_ADDR_VAR 0 5
51318: PUSH
51319: LD_VAR 0 1
51323: PUSH
51324: LD_INT 4
51326: MINUS
51327: PUSH
51328: LD_VAR 0 2
51332: PUSH
51333: LD_INT 4
51335: MINUS
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: LIST
51344: PUSH
51345: LD_VAR 0 1
51349: PUSH
51350: LD_INT 3
51352: MINUS
51353: PUSH
51354: LD_VAR 0 2
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: PUSH
51367: LD_VAR 0 1
51371: PUSH
51372: LD_INT 4
51374: PLUS
51375: PUSH
51376: LD_VAR 0 2
51380: PUSH
51381: LD_INT 4
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: LIST
51388: PUSH
51389: LD_VAR 0 1
51393: PUSH
51394: LD_INT 3
51396: PLUS
51397: PUSH
51398: LD_VAR 0 2
51402: PUSH
51403: LD_INT 3
51405: PLUS
51406: PUSH
51407: LD_INT 5
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: PUSH
51415: LD_VAR 0 1
51419: PUSH
51420: LD_VAR 0 2
51424: PUSH
51425: LD_INT 4
51427: PLUS
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: ST_TO_ADDR
// end ; 1 :
51444: GO 52144
51446: LD_INT 1
51448: DOUBLE
51449: EQUAL
51450: IFTRUE 51454
51452: GO 51587
51454: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51455: LD_ADDR_VAR 0 5
51459: PUSH
51460: LD_VAR 0 1
51464: PUSH
51465: LD_VAR 0 2
51469: PUSH
51470: LD_INT 4
51472: MINUS
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: PUSH
51482: LD_VAR 0 1
51486: PUSH
51487: LD_INT 3
51489: MINUS
51490: PUSH
51491: LD_VAR 0 2
51495: PUSH
51496: LD_INT 3
51498: MINUS
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: PUSH
51508: LD_VAR 0 1
51512: PUSH
51513: LD_INT 4
51515: MINUS
51516: PUSH
51517: LD_VAR 0 2
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: LIST
51529: PUSH
51530: LD_VAR 0 1
51534: PUSH
51535: LD_VAR 0 2
51539: PUSH
51540: LD_INT 3
51542: PLUS
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: LIST
51551: PUSH
51552: LD_VAR 0 1
51556: PUSH
51557: LD_INT 4
51559: PLUS
51560: PUSH
51561: LD_VAR 0 2
51565: PUSH
51566: LD_INT 4
51568: PLUS
51569: PUSH
51570: LD_INT 5
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: ST_TO_ADDR
// end ; 2 :
51585: GO 52144
51587: LD_INT 2
51589: DOUBLE
51590: EQUAL
51591: IFTRUE 51595
51593: GO 51724
51595: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51596: LD_ADDR_VAR 0 5
51600: PUSH
51601: LD_VAR 0 1
51605: PUSH
51606: LD_VAR 0 2
51610: PUSH
51611: LD_INT 3
51613: MINUS
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: PUSH
51623: LD_VAR 0 1
51627: PUSH
51628: LD_INT 4
51630: PLUS
51631: PUSH
51632: LD_VAR 0 2
51636: PUSH
51637: LD_INT 4
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: LIST
51644: PUSH
51645: LD_VAR 0 1
51649: PUSH
51650: LD_VAR 0 2
51654: PUSH
51655: LD_INT 4
51657: PLUS
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: PUSH
51667: LD_VAR 0 1
51671: PUSH
51672: LD_INT 3
51674: MINUS
51675: PUSH
51676: LD_VAR 0 2
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: LIST
51688: PUSH
51689: LD_VAR 0 1
51693: PUSH
51694: LD_INT 4
51696: MINUS
51697: PUSH
51698: LD_VAR 0 2
51702: PUSH
51703: LD_INT 4
51705: MINUS
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: LIST
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// end ; 3 :
51722: GO 52144
51724: LD_INT 3
51726: DOUBLE
51727: EQUAL
51728: IFTRUE 51732
51730: GO 51865
51732: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51733: LD_ADDR_VAR 0 5
51737: PUSH
51738: LD_VAR 0 1
51742: PUSH
51743: LD_INT 3
51745: PLUS
51746: PUSH
51747: LD_VAR 0 2
51751: PUSH
51752: LD_INT 4
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: PUSH
51760: LD_VAR 0 1
51764: PUSH
51765: LD_INT 4
51767: PLUS
51768: PUSH
51769: LD_VAR 0 2
51773: PUSH
51774: LD_INT 4
51776: PLUS
51777: PUSH
51778: LD_INT 5
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: PUSH
51786: LD_VAR 0 1
51790: PUSH
51791: LD_INT 4
51793: MINUS
51794: PUSH
51795: LD_VAR 0 2
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: LIST
51807: PUSH
51808: LD_VAR 0 1
51812: PUSH
51813: LD_VAR 0 2
51817: PUSH
51818: LD_INT 4
51820: MINUS
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: LIST
51829: PUSH
51830: LD_VAR 0 1
51834: PUSH
51835: LD_INT 3
51837: MINUS
51838: PUSH
51839: LD_VAR 0 2
51843: PUSH
51844: LD_INT 3
51846: MINUS
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: ST_TO_ADDR
// end ; 4 :
51863: GO 52144
51865: LD_INT 4
51867: DOUBLE
51868: EQUAL
51869: IFTRUE 51873
51871: GO 52006
51873: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51874: LD_ADDR_VAR 0 5
51878: PUSH
51879: LD_VAR 0 1
51883: PUSH
51884: LD_VAR 0 2
51888: PUSH
51889: LD_INT 4
51891: PLUS
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: PUSH
51901: LD_VAR 0 1
51905: PUSH
51906: LD_INT 3
51908: PLUS
51909: PUSH
51910: LD_VAR 0 2
51914: PUSH
51915: LD_INT 3
51917: PLUS
51918: PUSH
51919: LD_INT 5
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: PUSH
51927: LD_VAR 0 1
51931: PUSH
51932: LD_INT 4
51934: PLUS
51935: PUSH
51936: LD_VAR 0 2
51940: PUSH
51941: LD_INT 4
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: PUSH
51949: LD_VAR 0 1
51953: PUSH
51954: LD_VAR 0 2
51958: PUSH
51959: LD_INT 3
51961: MINUS
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: PUSH
51971: LD_VAR 0 1
51975: PUSH
51976: LD_INT 4
51978: MINUS
51979: PUSH
51980: LD_VAR 0 2
51984: PUSH
51985: LD_INT 4
51987: MINUS
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: ST_TO_ADDR
// end ; 5 :
52004: GO 52144
52006: LD_INT 5
52008: DOUBLE
52009: EQUAL
52010: IFTRUE 52014
52012: GO 52143
52014: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52015: LD_ADDR_VAR 0 5
52019: PUSH
52020: LD_VAR 0 1
52024: PUSH
52025: LD_INT 4
52027: MINUS
52028: PUSH
52029: LD_VAR 0 2
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: PUSH
52042: LD_VAR 0 1
52046: PUSH
52047: LD_VAR 0 2
52051: PUSH
52052: LD_INT 4
52054: MINUS
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: LIST
52063: PUSH
52064: LD_VAR 0 1
52068: PUSH
52069: LD_INT 4
52071: PLUS
52072: PUSH
52073: LD_VAR 0 2
52077: PUSH
52078: LD_INT 4
52080: PLUS
52081: PUSH
52082: LD_INT 5
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: LIST
52089: PUSH
52090: LD_VAR 0 1
52094: PUSH
52095: LD_INT 3
52097: PLUS
52098: PUSH
52099: LD_VAR 0 2
52103: PUSH
52104: LD_INT 4
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: LIST
52111: PUSH
52112: LD_VAR 0 1
52116: PUSH
52117: LD_VAR 0 2
52121: PUSH
52122: LD_INT 3
52124: PLUS
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: ST_TO_ADDR
// end ; end ;
52141: GO 52144
52143: POP
// result := list ;
52144: LD_ADDR_VAR 0 4
52148: PUSH
52149: LD_VAR 0 5
52153: ST_TO_ADDR
// end ;
52154: LD_VAR 0 4
52158: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52159: LD_INT 0
52161: PPUSH
52162: PPUSH
52163: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52164: LD_VAR 0 1
52168: NOT
52169: PUSH
52170: LD_VAR 0 2
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: LD_INT 4
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: IN
52193: NOT
52194: OR
52195: IFFALSE 52199
// exit ;
52197: GO 52291
// tmp := [ ] ;
52199: LD_ADDR_VAR 0 5
52203: PUSH
52204: EMPTY
52205: ST_TO_ADDR
// for i in units do
52206: LD_ADDR_VAR 0 4
52210: PUSH
52211: LD_VAR 0 1
52215: PUSH
52216: FOR_IN
52217: IFFALSE 52260
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52219: LD_ADDR_VAR 0 5
52223: PUSH
52224: LD_VAR 0 5
52228: PPUSH
52229: LD_VAR 0 5
52233: PUSH
52234: LD_INT 1
52236: PLUS
52237: PPUSH
52238: LD_VAR 0 4
52242: PPUSH
52243: LD_VAR 0 2
52247: PPUSH
52248: CALL_OW 259
52252: PPUSH
52253: CALL_OW 2
52257: ST_TO_ADDR
52258: GO 52216
52260: POP
52261: POP
// if not tmp then
52262: LD_VAR 0 5
52266: NOT
52267: IFFALSE 52271
// exit ;
52269: GO 52291
// result := SortListByListDesc ( units , tmp ) ;
52271: LD_ADDR_VAR 0 3
52275: PUSH
52276: LD_VAR 0 1
52280: PPUSH
52281: LD_VAR 0 5
52285: PPUSH
52286: CALL_OW 77
52290: ST_TO_ADDR
// end ;
52291: LD_VAR 0 3
52295: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52296: LD_INT 0
52298: PPUSH
52299: PPUSH
52300: PPUSH
// result := false ;
52301: LD_ADDR_VAR 0 3
52305: PUSH
52306: LD_INT 0
52308: ST_TO_ADDR
// x := GetX ( building ) ;
52309: LD_ADDR_VAR 0 4
52313: PUSH
52314: LD_VAR 0 2
52318: PPUSH
52319: CALL_OW 250
52323: ST_TO_ADDR
// y := GetY ( building ) ;
52324: LD_ADDR_VAR 0 5
52328: PUSH
52329: LD_VAR 0 2
52333: PPUSH
52334: CALL_OW 251
52338: ST_TO_ADDR
// if not building or not x or not y then
52339: LD_VAR 0 2
52343: NOT
52344: PUSH
52345: LD_VAR 0 4
52349: NOT
52350: OR
52351: PUSH
52352: LD_VAR 0 5
52356: NOT
52357: OR
52358: IFFALSE 52362
// exit ;
52360: GO 52454
// if GetTaskList ( unit ) then
52362: LD_VAR 0 1
52366: PPUSH
52367: CALL_OW 437
52371: IFFALSE 52454
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52373: LD_STRING e
52375: PUSH
52376: LD_VAR 0 1
52380: PPUSH
52381: CALL_OW 437
52385: PUSH
52386: LD_INT 1
52388: ARRAY
52389: PUSH
52390: LD_INT 1
52392: ARRAY
52393: EQUAL
52394: PUSH
52395: LD_VAR 0 4
52399: PUSH
52400: LD_VAR 0 1
52404: PPUSH
52405: CALL_OW 437
52409: PUSH
52410: LD_INT 1
52412: ARRAY
52413: PUSH
52414: LD_INT 2
52416: ARRAY
52417: EQUAL
52418: AND
52419: PUSH
52420: LD_VAR 0 5
52424: PUSH
52425: LD_VAR 0 1
52429: PPUSH
52430: CALL_OW 437
52434: PUSH
52435: LD_INT 1
52437: ARRAY
52438: PUSH
52439: LD_INT 3
52441: ARRAY
52442: EQUAL
52443: AND
52444: IFFALSE 52454
// result := true end ;
52446: LD_ADDR_VAR 0 3
52450: PUSH
52451: LD_INT 1
52453: ST_TO_ADDR
// end ;
52454: LD_VAR 0 3
52458: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52459: LD_INT 0
52461: PPUSH
// result := false ;
52462: LD_ADDR_VAR 0 4
52466: PUSH
52467: LD_INT 0
52469: ST_TO_ADDR
// if GetTaskList ( unit ) then
52470: LD_VAR 0 1
52474: PPUSH
52475: CALL_OW 437
52479: IFFALSE 52562
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52481: LD_STRING M
52483: PUSH
52484: LD_VAR 0 1
52488: PPUSH
52489: CALL_OW 437
52493: PUSH
52494: LD_INT 1
52496: ARRAY
52497: PUSH
52498: LD_INT 1
52500: ARRAY
52501: EQUAL
52502: PUSH
52503: LD_VAR 0 2
52507: PUSH
52508: LD_VAR 0 1
52512: PPUSH
52513: CALL_OW 437
52517: PUSH
52518: LD_INT 1
52520: ARRAY
52521: PUSH
52522: LD_INT 2
52524: ARRAY
52525: EQUAL
52526: AND
52527: PUSH
52528: LD_VAR 0 3
52532: PUSH
52533: LD_VAR 0 1
52537: PPUSH
52538: CALL_OW 437
52542: PUSH
52543: LD_INT 1
52545: ARRAY
52546: PUSH
52547: LD_INT 3
52549: ARRAY
52550: EQUAL
52551: AND
52552: IFFALSE 52562
// result := true ;
52554: LD_ADDR_VAR 0 4
52558: PUSH
52559: LD_INT 1
52561: ST_TO_ADDR
// end ; end ;
52562: LD_VAR 0 4
52566: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52567: LD_INT 0
52569: PPUSH
52570: PPUSH
52571: PPUSH
52572: PPUSH
// if not unit or not area then
52573: LD_VAR 0 1
52577: NOT
52578: PUSH
52579: LD_VAR 0 2
52583: NOT
52584: OR
52585: IFFALSE 52589
// exit ;
52587: GO 52753
// tmp := AreaToList ( area , i ) ;
52589: LD_ADDR_VAR 0 6
52593: PUSH
52594: LD_VAR 0 2
52598: PPUSH
52599: LD_VAR 0 5
52603: PPUSH
52604: CALL_OW 517
52608: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52609: LD_ADDR_VAR 0 5
52613: PUSH
52614: DOUBLE
52615: LD_INT 1
52617: DEC
52618: ST_TO_ADDR
52619: LD_VAR 0 6
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PUSH
52628: FOR_TO
52629: IFFALSE 52751
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52631: LD_ADDR_VAR 0 7
52635: PUSH
52636: LD_VAR 0 6
52640: PUSH
52641: LD_INT 1
52643: ARRAY
52644: PUSH
52645: LD_VAR 0 5
52649: ARRAY
52650: PUSH
52651: LD_VAR 0 6
52655: PUSH
52656: LD_INT 2
52658: ARRAY
52659: PUSH
52660: LD_VAR 0 5
52664: ARRAY
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52670: LD_VAR 0 7
52674: PUSH
52675: LD_INT 1
52677: ARRAY
52678: PPUSH
52679: LD_VAR 0 7
52683: PUSH
52684: LD_INT 2
52686: ARRAY
52687: PPUSH
52688: CALL_OW 428
52692: PUSH
52693: LD_INT 0
52695: EQUAL
52696: IFFALSE 52749
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52698: LD_VAR 0 1
52702: PPUSH
52703: LD_VAR 0 7
52707: PUSH
52708: LD_INT 1
52710: ARRAY
52711: PPUSH
52712: LD_VAR 0 7
52716: PUSH
52717: LD_INT 2
52719: ARRAY
52720: PPUSH
52721: LD_VAR 0 3
52725: PPUSH
52726: CALL_OW 48
// result := IsPlaced ( unit ) ;
52730: LD_ADDR_VAR 0 4
52734: PUSH
52735: LD_VAR 0 1
52739: PPUSH
52740: CALL_OW 305
52744: ST_TO_ADDR
// exit ;
52745: POP
52746: POP
52747: GO 52753
// end ; end ;
52749: GO 52628
52751: POP
52752: POP
// end ;
52753: LD_VAR 0 4
52757: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52758: LD_INT 0
52760: PPUSH
52761: PPUSH
52762: PPUSH
// if not side or side > 8 then
52763: LD_VAR 0 1
52767: NOT
52768: PUSH
52769: LD_VAR 0 1
52773: PUSH
52774: LD_INT 8
52776: GREATER
52777: OR
52778: IFFALSE 52782
// exit ;
52780: GO 52969
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52782: LD_ADDR_VAR 0 4
52786: PUSH
52787: LD_INT 22
52789: PUSH
52790: LD_VAR 0 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 21
52801: PUSH
52802: LD_INT 3
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PPUSH
52813: CALL_OW 69
52817: ST_TO_ADDR
// if not tmp then
52818: LD_VAR 0 4
52822: NOT
52823: IFFALSE 52827
// exit ;
52825: GO 52969
// enable_addtolog := true ;
52827: LD_ADDR_OWVAR 81
52831: PUSH
52832: LD_INT 1
52834: ST_TO_ADDR
// AddToLog ( [ ) ;
52835: LD_STRING [
52837: PPUSH
52838: CALL_OW 561
// for i in tmp do
52842: LD_ADDR_VAR 0 3
52846: PUSH
52847: LD_VAR 0 4
52851: PUSH
52852: FOR_IN
52853: IFFALSE 52960
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52855: LD_STRING [
52857: PUSH
52858: LD_VAR 0 3
52862: PPUSH
52863: CALL_OW 266
52867: STR
52868: PUSH
52869: LD_STRING , 
52871: STR
52872: PUSH
52873: LD_VAR 0 3
52877: PPUSH
52878: CALL_OW 250
52882: STR
52883: PUSH
52884: LD_STRING , 
52886: STR
52887: PUSH
52888: LD_VAR 0 3
52892: PPUSH
52893: CALL_OW 251
52897: STR
52898: PUSH
52899: LD_STRING , 
52901: STR
52902: PUSH
52903: LD_VAR 0 3
52907: PPUSH
52908: CALL_OW 254
52912: STR
52913: PUSH
52914: LD_STRING , 
52916: STR
52917: PUSH
52918: LD_VAR 0 3
52922: PPUSH
52923: LD_INT 1
52925: PPUSH
52926: CALL_OW 268
52930: STR
52931: PUSH
52932: LD_STRING , 
52934: STR
52935: PUSH
52936: LD_VAR 0 3
52940: PPUSH
52941: LD_INT 2
52943: PPUSH
52944: CALL_OW 268
52948: STR
52949: PUSH
52950: LD_STRING ],
52952: STR
52953: PPUSH
52954: CALL_OW 561
// end ;
52958: GO 52852
52960: POP
52961: POP
// AddToLog ( ]; ) ;
52962: LD_STRING ];
52964: PPUSH
52965: CALL_OW 561
// end ;
52969: LD_VAR 0 2
52973: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52974: LD_INT 0
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
// if not area or not rate or not max then
52981: LD_VAR 0 1
52985: NOT
52986: PUSH
52987: LD_VAR 0 2
52991: NOT
52992: OR
52993: PUSH
52994: LD_VAR 0 4
52998: NOT
52999: OR
53000: IFFALSE 53004
// exit ;
53002: GO 53196
// while 1 do
53004: LD_INT 1
53006: IFFALSE 53196
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53008: LD_ADDR_VAR 0 9
53012: PUSH
53013: LD_VAR 0 1
53017: PPUSH
53018: LD_INT 1
53020: PPUSH
53021: CALL_OW 287
53025: PUSH
53026: LD_INT 10
53028: MUL
53029: ST_TO_ADDR
// r := rate / 10 ;
53030: LD_ADDR_VAR 0 7
53034: PUSH
53035: LD_VAR 0 2
53039: PUSH
53040: LD_INT 10
53042: DIVREAL
53043: ST_TO_ADDR
// time := 1 1$00 ;
53044: LD_ADDR_VAR 0 8
53048: PUSH
53049: LD_INT 2100
53051: ST_TO_ADDR
// if amount < min then
53052: LD_VAR 0 9
53056: PUSH
53057: LD_VAR 0 3
53061: LESS
53062: IFFALSE 53080
// r := r * 2 else
53064: LD_ADDR_VAR 0 7
53068: PUSH
53069: LD_VAR 0 7
53073: PUSH
53074: LD_INT 2
53076: MUL
53077: ST_TO_ADDR
53078: GO 53106
// if amount > max then
53080: LD_VAR 0 9
53084: PUSH
53085: LD_VAR 0 4
53089: GREATER
53090: IFFALSE 53106
// r := r / 2 ;
53092: LD_ADDR_VAR 0 7
53096: PUSH
53097: LD_VAR 0 7
53101: PUSH
53102: LD_INT 2
53104: DIVREAL
53105: ST_TO_ADDR
// time := time / r ;
53106: LD_ADDR_VAR 0 8
53110: PUSH
53111: LD_VAR 0 8
53115: PUSH
53116: LD_VAR 0 7
53120: DIVREAL
53121: ST_TO_ADDR
// if time < 0 then
53122: LD_VAR 0 8
53126: PUSH
53127: LD_INT 0
53129: LESS
53130: IFFALSE 53147
// time := time * - 1 ;
53132: LD_ADDR_VAR 0 8
53136: PUSH
53137: LD_VAR 0 8
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: MUL
53146: ST_TO_ADDR
// wait ( time ) ;
53147: LD_VAR 0 8
53151: PPUSH
53152: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53156: LD_INT 35
53158: PPUSH
53159: LD_INT 875
53161: PPUSH
53162: CALL_OW 12
53166: PPUSH
53167: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53171: LD_INT 1
53173: PPUSH
53174: LD_INT 5
53176: PPUSH
53177: CALL_OW 12
53181: PPUSH
53182: LD_VAR 0 1
53186: PPUSH
53187: LD_INT 1
53189: PPUSH
53190: CALL_OW 55
// end ;
53194: GO 53004
// end ;
53196: LD_VAR 0 5
53200: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53201: LD_INT 0
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
// if not turrets or not factories then
53211: LD_VAR 0 1
53215: NOT
53216: PUSH
53217: LD_VAR 0 2
53221: NOT
53222: OR
53223: IFFALSE 53227
// exit ;
53225: GO 53534
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53227: LD_ADDR_VAR 0 10
53231: PUSH
53232: LD_INT 5
53234: PUSH
53235: LD_INT 6
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: LD_INT 4
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 5
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 24
53269: PUSH
53270: LD_INT 25
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 23
53279: PUSH
53280: LD_INT 27
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 42
53293: PUSH
53294: LD_INT 43
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 44
53303: PUSH
53304: LD_INT 46
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 45
53313: PUSH
53314: LD_INT 47
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: LIST
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// result := [ ] ;
53331: LD_ADDR_VAR 0 3
53335: PUSH
53336: EMPTY
53337: ST_TO_ADDR
// for i in turrets do
53338: LD_ADDR_VAR 0 4
53342: PUSH
53343: LD_VAR 0 1
53347: PUSH
53348: FOR_IN
53349: IFFALSE 53532
// begin nat := GetNation ( i ) ;
53351: LD_ADDR_VAR 0 7
53355: PUSH
53356: LD_VAR 0 4
53360: PPUSH
53361: CALL_OW 248
53365: ST_TO_ADDR
// weapon := 0 ;
53366: LD_ADDR_VAR 0 8
53370: PUSH
53371: LD_INT 0
53373: ST_TO_ADDR
// if not nat then
53374: LD_VAR 0 7
53378: NOT
53379: IFFALSE 53383
// continue ;
53381: GO 53348
// for j in list [ nat ] do
53383: LD_ADDR_VAR 0 5
53387: PUSH
53388: LD_VAR 0 10
53392: PUSH
53393: LD_VAR 0 7
53397: ARRAY
53398: PUSH
53399: FOR_IN
53400: IFFALSE 53441
// if GetBWeapon ( i ) = j [ 1 ] then
53402: LD_VAR 0 4
53406: PPUSH
53407: CALL_OW 269
53411: PUSH
53412: LD_VAR 0 5
53416: PUSH
53417: LD_INT 1
53419: ARRAY
53420: EQUAL
53421: IFFALSE 53439
// begin weapon := j [ 2 ] ;
53423: LD_ADDR_VAR 0 8
53427: PUSH
53428: LD_VAR 0 5
53432: PUSH
53433: LD_INT 2
53435: ARRAY
53436: ST_TO_ADDR
// break ;
53437: GO 53441
// end ;
53439: GO 53399
53441: POP
53442: POP
// if not weapon then
53443: LD_VAR 0 8
53447: NOT
53448: IFFALSE 53452
// continue ;
53450: GO 53348
// for k in factories do
53452: LD_ADDR_VAR 0 6
53456: PUSH
53457: LD_VAR 0 2
53461: PUSH
53462: FOR_IN
53463: IFFALSE 53528
// begin weapons := AvailableWeaponList ( k ) ;
53465: LD_ADDR_VAR 0 9
53469: PUSH
53470: LD_VAR 0 6
53474: PPUSH
53475: CALL_OW 478
53479: ST_TO_ADDR
// if not weapons then
53480: LD_VAR 0 9
53484: NOT
53485: IFFALSE 53489
// continue ;
53487: GO 53462
// if weapon in weapons then
53489: LD_VAR 0 8
53493: PUSH
53494: LD_VAR 0 9
53498: IN
53499: IFFALSE 53526
// begin result := [ i , weapon ] ;
53501: LD_ADDR_VAR 0 3
53505: PUSH
53506: LD_VAR 0 4
53510: PUSH
53511: LD_VAR 0 8
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: ST_TO_ADDR
// exit ;
53520: POP
53521: POP
53522: POP
53523: POP
53524: GO 53534
// end ; end ;
53526: GO 53462
53528: POP
53529: POP
// end ;
53530: GO 53348
53532: POP
53533: POP
// end ;
53534: LD_VAR 0 3
53538: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53539: LD_INT 0
53541: PPUSH
// if not side or side > 8 then
53542: LD_VAR 0 3
53546: NOT
53547: PUSH
53548: LD_VAR 0 3
53552: PUSH
53553: LD_INT 8
53555: GREATER
53556: OR
53557: IFFALSE 53561
// exit ;
53559: GO 53620
// if not range then
53561: LD_VAR 0 4
53565: NOT
53566: IFFALSE 53577
// range := - 12 ;
53568: LD_ADDR_VAR 0 4
53572: PUSH
53573: LD_INT 12
53575: NEG
53576: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53577: LD_VAR 0 1
53581: PPUSH
53582: LD_VAR 0 2
53586: PPUSH
53587: LD_VAR 0 3
53591: PPUSH
53592: LD_VAR 0 4
53596: PPUSH
53597: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53601: LD_VAR 0 1
53605: PPUSH
53606: LD_VAR 0 2
53610: PPUSH
53611: LD_VAR 0 3
53615: PPUSH
53616: CALL_OW 331
// end ;
53620: LD_VAR 0 5
53624: RET
// export function Video ( mode ) ; begin
53625: LD_INT 0
53627: PPUSH
// ingame_video = mode ;
53628: LD_ADDR_OWVAR 52
53632: PUSH
53633: LD_VAR 0 1
53637: ST_TO_ADDR
// interface_hidden = mode ;
53638: LD_ADDR_OWVAR 54
53642: PUSH
53643: LD_VAR 0 1
53647: ST_TO_ADDR
// end ;
53648: LD_VAR 0 2
53652: RET
// export function Join ( array , element ) ; begin
53653: LD_INT 0
53655: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53656: LD_ADDR_VAR 0 3
53660: PUSH
53661: LD_VAR 0 1
53665: PPUSH
53666: LD_VAR 0 1
53670: PUSH
53671: LD_INT 1
53673: PLUS
53674: PPUSH
53675: LD_VAR 0 2
53679: PPUSH
53680: CALL_OW 1
53684: ST_TO_ADDR
// end ;
53685: LD_VAR 0 3
53689: RET
// export function JoinUnion ( array , element ) ; begin
53690: LD_INT 0
53692: PPUSH
// result := array union element ;
53693: LD_ADDR_VAR 0 3
53697: PUSH
53698: LD_VAR 0 1
53702: PUSH
53703: LD_VAR 0 2
53707: UNION
53708: ST_TO_ADDR
// end ;
53709: LD_VAR 0 3
53713: RET
// export function GetBehemoths ( side ) ; begin
53714: LD_INT 0
53716: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53717: LD_ADDR_VAR 0 2
53721: PUSH
53722: LD_INT 22
53724: PUSH
53725: LD_VAR 0 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 31
53736: PUSH
53737: LD_INT 25
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PPUSH
53748: CALL_OW 69
53752: ST_TO_ADDR
// end ;
53753: LD_VAR 0 2
53757: RET
// export function Shuffle ( array ) ; var i , index ; begin
53758: LD_INT 0
53760: PPUSH
53761: PPUSH
53762: PPUSH
// result := [ ] ;
53763: LD_ADDR_VAR 0 2
53767: PUSH
53768: EMPTY
53769: ST_TO_ADDR
// if not array then
53770: LD_VAR 0 1
53774: NOT
53775: IFFALSE 53779
// exit ;
53777: GO 53878
// Randomize ;
53779: CALL_OW 10
// for i = array downto 1 do
53783: LD_ADDR_VAR 0 3
53787: PUSH
53788: DOUBLE
53789: LD_VAR 0 1
53793: INC
53794: ST_TO_ADDR
53795: LD_INT 1
53797: PUSH
53798: FOR_DOWNTO
53799: IFFALSE 53876
// begin index := rand ( 1 , array ) ;
53801: LD_ADDR_VAR 0 4
53805: PUSH
53806: LD_INT 1
53808: PPUSH
53809: LD_VAR 0 1
53813: PPUSH
53814: CALL_OW 12
53818: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53819: LD_ADDR_VAR 0 2
53823: PUSH
53824: LD_VAR 0 2
53828: PPUSH
53829: LD_VAR 0 2
53833: PUSH
53834: LD_INT 1
53836: PLUS
53837: PPUSH
53838: LD_VAR 0 1
53842: PUSH
53843: LD_VAR 0 4
53847: ARRAY
53848: PPUSH
53849: CALL_OW 2
53853: ST_TO_ADDR
// array := Delete ( array , index ) ;
53854: LD_ADDR_VAR 0 1
53858: PUSH
53859: LD_VAR 0 1
53863: PPUSH
53864: LD_VAR 0 4
53868: PPUSH
53869: CALL_OW 3
53873: ST_TO_ADDR
// end ;
53874: GO 53798
53876: POP
53877: POP
// end ;
53878: LD_VAR 0 2
53882: RET
// export function GetBaseMaterials ( base ) ; begin
53883: LD_INT 0
53885: PPUSH
// result := [ 0 , 0 , 0 ] ;
53886: LD_ADDR_VAR 0 2
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
// if not base then
53905: LD_VAR 0 1
53909: NOT
53910: IFFALSE 53914
// exit ;
53912: GO 53963
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53914: LD_ADDR_VAR 0 2
53918: PUSH
53919: LD_VAR 0 1
53923: PPUSH
53924: LD_INT 1
53926: PPUSH
53927: CALL_OW 275
53931: PUSH
53932: LD_VAR 0 1
53936: PPUSH
53937: LD_INT 2
53939: PPUSH
53940: CALL_OW 275
53944: PUSH
53945: LD_VAR 0 1
53949: PPUSH
53950: LD_INT 3
53952: PPUSH
53953: CALL_OW 275
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: ST_TO_ADDR
// end ;
53963: LD_VAR 0 2
53967: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53968: LD_INT 0
53970: PPUSH
53971: PPUSH
// result := array ;
53972: LD_ADDR_VAR 0 3
53976: PUSH
53977: LD_VAR 0 1
53981: ST_TO_ADDR
// if size > 0 then
53982: LD_VAR 0 2
53986: PUSH
53987: LD_INT 0
53989: GREATER
53990: IFFALSE 54036
// for i := array downto size do
53992: LD_ADDR_VAR 0 4
53996: PUSH
53997: DOUBLE
53998: LD_VAR 0 1
54002: INC
54003: ST_TO_ADDR
54004: LD_VAR 0 2
54008: PUSH
54009: FOR_DOWNTO
54010: IFFALSE 54034
// result := Delete ( result , result ) ;
54012: LD_ADDR_VAR 0 3
54016: PUSH
54017: LD_VAR 0 3
54021: PPUSH
54022: LD_VAR 0 3
54026: PPUSH
54027: CALL_OW 3
54031: ST_TO_ADDR
54032: GO 54009
54034: POP
54035: POP
// end ;
54036: LD_VAR 0 3
54040: RET
// export function ComExit ( unit ) ; var tmp ; begin
54041: LD_INT 0
54043: PPUSH
54044: PPUSH
// if not IsInUnit ( unit ) then
54045: LD_VAR 0 1
54049: PPUSH
54050: CALL_OW 310
54054: NOT
54055: IFFALSE 54059
// exit ;
54057: GO 54119
// tmp := IsInUnit ( unit ) ;
54059: LD_ADDR_VAR 0 3
54063: PUSH
54064: LD_VAR 0 1
54068: PPUSH
54069: CALL_OW 310
54073: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54074: LD_VAR 0 3
54078: PPUSH
54079: CALL_OW 247
54083: PUSH
54084: LD_INT 2
54086: EQUAL
54087: IFFALSE 54100
// ComExitVehicle ( unit ) else
54089: LD_VAR 0 1
54093: PPUSH
54094: CALL_OW 121
54098: GO 54109
// ComExitBuilding ( unit ) ;
54100: LD_VAR 0 1
54104: PPUSH
54105: CALL_OW 122
// result := tmp ;
54109: LD_ADDR_VAR 0 2
54113: PUSH
54114: LD_VAR 0 3
54118: ST_TO_ADDR
// end ;
54119: LD_VAR 0 2
54123: RET
// export function ComExitAll ( units ) ; var i ; begin
54124: LD_INT 0
54126: PPUSH
54127: PPUSH
// if not units then
54128: LD_VAR 0 1
54132: NOT
54133: IFFALSE 54137
// exit ;
54135: GO 54163
// for i in units do
54137: LD_ADDR_VAR 0 3
54141: PUSH
54142: LD_VAR 0 1
54146: PUSH
54147: FOR_IN
54148: IFFALSE 54161
// ComExit ( i ) ;
54150: LD_VAR 0 3
54154: PPUSH
54155: CALL 54041 0 1
54159: GO 54147
54161: POP
54162: POP
// end ;
54163: LD_VAR 0 2
54167: RET
// export function ResetHc ; begin
54168: LD_INT 0
54170: PPUSH
// InitHc ;
54171: CALL_OW 19
// hc_importance := 0 ;
54175: LD_ADDR_OWVAR 32
54179: PUSH
54180: LD_INT 0
54182: ST_TO_ADDR
// end ;
54183: LD_VAR 0 1
54187: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54188: LD_INT 0
54190: PPUSH
54191: PPUSH
54192: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54193: LD_ADDR_VAR 0 6
54197: PUSH
54198: LD_VAR 0 1
54202: PUSH
54203: LD_VAR 0 3
54207: PLUS
54208: PUSH
54209: LD_INT 2
54211: DIV
54212: ST_TO_ADDR
// if _x < 0 then
54213: LD_VAR 0 6
54217: PUSH
54218: LD_INT 0
54220: LESS
54221: IFFALSE 54238
// _x := _x * - 1 ;
54223: LD_ADDR_VAR 0 6
54227: PUSH
54228: LD_VAR 0 6
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: MUL
54237: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54238: LD_ADDR_VAR 0 7
54242: PUSH
54243: LD_VAR 0 2
54247: PUSH
54248: LD_VAR 0 4
54252: PLUS
54253: PUSH
54254: LD_INT 2
54256: DIV
54257: ST_TO_ADDR
// if _y < 0 then
54258: LD_VAR 0 7
54262: PUSH
54263: LD_INT 0
54265: LESS
54266: IFFALSE 54283
// _y := _y * - 1 ;
54268: LD_ADDR_VAR 0 7
54272: PUSH
54273: LD_VAR 0 7
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: MUL
54282: ST_TO_ADDR
// result := [ _x , _y ] ;
54283: LD_ADDR_VAR 0 5
54287: PUSH
54288: LD_VAR 0 6
54292: PUSH
54293: LD_VAR 0 7
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// end ;
54302: LD_VAR 0 5
54306: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54307: LD_INT 0
54309: PPUSH
54310: PPUSH
54311: PPUSH
54312: PPUSH
// task := GetTaskList ( unit ) ;
54313: LD_ADDR_VAR 0 7
54317: PUSH
54318: LD_VAR 0 1
54322: PPUSH
54323: CALL_OW 437
54327: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54328: LD_VAR 0 7
54332: NOT
54333: PUSH
54334: LD_VAR 0 1
54338: PPUSH
54339: LD_VAR 0 2
54343: PPUSH
54344: CALL_OW 308
54348: NOT
54349: AND
54350: IFFALSE 54354
// exit ;
54352: GO 54472
// if IsInArea ( unit , area ) then
54354: LD_VAR 0 1
54358: PPUSH
54359: LD_VAR 0 2
54363: PPUSH
54364: CALL_OW 308
54368: IFFALSE 54386
// begin ComMoveToArea ( unit , goAway ) ;
54370: LD_VAR 0 1
54374: PPUSH
54375: LD_VAR 0 3
54379: PPUSH
54380: CALL_OW 113
// exit ;
54384: GO 54472
// end ; if task [ 1 ] [ 1 ] <> M then
54386: LD_VAR 0 7
54390: PUSH
54391: LD_INT 1
54393: ARRAY
54394: PUSH
54395: LD_INT 1
54397: ARRAY
54398: PUSH
54399: LD_STRING M
54401: NONEQUAL
54402: IFFALSE 54406
// exit ;
54404: GO 54472
// x := task [ 1 ] [ 2 ] ;
54406: LD_ADDR_VAR 0 5
54410: PUSH
54411: LD_VAR 0 7
54415: PUSH
54416: LD_INT 1
54418: ARRAY
54419: PUSH
54420: LD_INT 2
54422: ARRAY
54423: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54424: LD_ADDR_VAR 0 6
54428: PUSH
54429: LD_VAR 0 7
54433: PUSH
54434: LD_INT 1
54436: ARRAY
54437: PUSH
54438: LD_INT 3
54440: ARRAY
54441: ST_TO_ADDR
// if InArea ( x , y , area ) then
54442: LD_VAR 0 5
54446: PPUSH
54447: LD_VAR 0 6
54451: PPUSH
54452: LD_VAR 0 2
54456: PPUSH
54457: CALL_OW 309
54461: IFFALSE 54472
// ComStop ( unit ) ;
54463: LD_VAR 0 1
54467: PPUSH
54468: CALL_OW 141
// end ;
54472: LD_VAR 0 4
54476: RET
// export function Abs ( value ) ; begin
54477: LD_INT 0
54479: PPUSH
// result := value ;
54480: LD_ADDR_VAR 0 2
54484: PUSH
54485: LD_VAR 0 1
54489: ST_TO_ADDR
// if value < 0 then
54490: LD_VAR 0 1
54494: PUSH
54495: LD_INT 0
54497: LESS
54498: IFFALSE 54515
// result := value * - 1 ;
54500: LD_ADDR_VAR 0 2
54504: PUSH
54505: LD_VAR 0 1
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: MUL
54514: ST_TO_ADDR
// end ;
54515: LD_VAR 0 2
54519: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54520: LD_INT 0
54522: PPUSH
54523: PPUSH
54524: PPUSH
54525: PPUSH
54526: PPUSH
54527: PPUSH
54528: PPUSH
54529: PPUSH
// if not unit or not building then
54530: LD_VAR 0 1
54534: NOT
54535: PUSH
54536: LD_VAR 0 2
54540: NOT
54541: OR
54542: IFFALSE 54546
// exit ;
54544: GO 54772
// x := GetX ( building ) ;
54546: LD_ADDR_VAR 0 4
54550: PUSH
54551: LD_VAR 0 2
54555: PPUSH
54556: CALL_OW 250
54560: ST_TO_ADDR
// y := GetY ( building ) ;
54561: LD_ADDR_VAR 0 6
54565: PUSH
54566: LD_VAR 0 2
54570: PPUSH
54571: CALL_OW 251
54575: ST_TO_ADDR
// d := GetDir ( building ) ;
54576: LD_ADDR_VAR 0 8
54580: PUSH
54581: LD_VAR 0 2
54585: PPUSH
54586: CALL_OW 254
54590: ST_TO_ADDR
// r := 4 ;
54591: LD_ADDR_VAR 0 9
54595: PUSH
54596: LD_INT 4
54598: ST_TO_ADDR
// for i := 1 to 5 do
54599: LD_ADDR_VAR 0 10
54603: PUSH
54604: DOUBLE
54605: LD_INT 1
54607: DEC
54608: ST_TO_ADDR
54609: LD_INT 5
54611: PUSH
54612: FOR_TO
54613: IFFALSE 54770
// begin _x := ShiftX ( x , d , r + i ) ;
54615: LD_ADDR_VAR 0 5
54619: PUSH
54620: LD_VAR 0 4
54624: PPUSH
54625: LD_VAR 0 8
54629: PPUSH
54630: LD_VAR 0 9
54634: PUSH
54635: LD_VAR 0 10
54639: PLUS
54640: PPUSH
54641: CALL_OW 272
54645: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54646: LD_ADDR_VAR 0 7
54650: PUSH
54651: LD_VAR 0 6
54655: PPUSH
54656: LD_VAR 0 8
54660: PPUSH
54661: LD_VAR 0 9
54665: PUSH
54666: LD_VAR 0 10
54670: PLUS
54671: PPUSH
54672: CALL_OW 273
54676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54677: LD_VAR 0 5
54681: PPUSH
54682: LD_VAR 0 7
54686: PPUSH
54687: CALL_OW 488
54691: PUSH
54692: LD_VAR 0 5
54696: PPUSH
54697: LD_VAR 0 7
54701: PPUSH
54702: CALL_OW 428
54706: PPUSH
54707: CALL_OW 247
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: IN
54722: NOT
54723: AND
54724: IFFALSE 54768
// begin ComMoveXY ( unit , _x , _y ) ;
54726: LD_VAR 0 1
54730: PPUSH
54731: LD_VAR 0 5
54735: PPUSH
54736: LD_VAR 0 7
54740: PPUSH
54741: CALL_OW 111
// result := [ _x , _y ] ;
54745: LD_ADDR_VAR 0 3
54749: PUSH
54750: LD_VAR 0 5
54754: PUSH
54755: LD_VAR 0 7
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: ST_TO_ADDR
// exit ;
54764: POP
54765: POP
54766: GO 54772
// end ; end ;
54768: GO 54612
54770: POP
54771: POP
// end ;
54772: LD_VAR 0 3
54776: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54777: LD_INT 0
54779: PPUSH
54780: PPUSH
54781: PPUSH
// result := 0 ;
54782: LD_ADDR_VAR 0 3
54786: PUSH
54787: LD_INT 0
54789: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54790: LD_VAR 0 1
54794: PUSH
54795: LD_INT 0
54797: LESS
54798: PUSH
54799: LD_VAR 0 1
54803: PUSH
54804: LD_INT 8
54806: GREATER
54807: OR
54808: PUSH
54809: LD_VAR 0 2
54813: PUSH
54814: LD_INT 0
54816: LESS
54817: OR
54818: PUSH
54819: LD_VAR 0 2
54823: PUSH
54824: LD_INT 8
54826: GREATER
54827: OR
54828: IFFALSE 54832
// exit ;
54830: GO 54907
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54832: LD_ADDR_VAR 0 4
54836: PUSH
54837: LD_INT 22
54839: PUSH
54840: LD_VAR 0 2
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PPUSH
54849: CALL_OW 69
54853: PUSH
54854: FOR_IN
54855: IFFALSE 54905
// begin un := UnitShoot ( i ) ;
54857: LD_ADDR_VAR 0 5
54861: PUSH
54862: LD_VAR 0 4
54866: PPUSH
54867: CALL_OW 504
54871: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54872: LD_VAR 0 5
54876: PPUSH
54877: CALL_OW 255
54881: PUSH
54882: LD_VAR 0 1
54886: EQUAL
54887: IFFALSE 54903
// begin result := un ;
54889: LD_ADDR_VAR 0 3
54893: PUSH
54894: LD_VAR 0 5
54898: ST_TO_ADDR
// exit ;
54899: POP
54900: POP
54901: GO 54907
// end ; end ;
54903: GO 54854
54905: POP
54906: POP
// end ;
54907: LD_VAR 0 3
54911: RET
// export function GetCargoBay ( units ) ; begin
54912: LD_INT 0
54914: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54915: LD_ADDR_VAR 0 2
54919: PUSH
54920: LD_VAR 0 1
54924: PPUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 34
54930: PUSH
54931: LD_INT 12
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 34
54940: PUSH
54941: LD_INT 51
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 34
54950: PUSH
54951: LD_INT 32
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 34
54960: PUSH
54961: LD_EXP 14
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: PPUSH
54977: CALL_OW 72
54981: ST_TO_ADDR
// end ;
54982: LD_VAR 0 2
54986: RET
