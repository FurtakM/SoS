// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_EXP 11
  25: EQUAL
  26: IFFALSE 98
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  28: LD_INT 68
  30: PPUSH
  31: LD_VAR 0 1
  35: PPUSH
  36: CALL_OW 255
  40: PPUSH
  41: CALL_OW 321
  45: PUSH
  46: LD_INT 2
  48: EQUAL
  49: IFFALSE 61
// eff := 70 else
  51: LD_ADDR_VAR 0 4
  55: PUSH
  56: LD_INT 70
  58: ST_TO_ADDR
  59: GO 69
// eff := 30 ;
  61: LD_ADDR_VAR 0 4
  65: PUSH
  66: LD_INT 30
  68: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  69: LD_VAR 0 1
  73: PPUSH
  74: CALL_OW 250
  78: PPUSH
  79: LD_VAR 0 1
  83: PPUSH
  84: CALL_OW 251
  88: PPUSH
  89: LD_VAR 0 4
  93: PPUSH
  94: CALL_OW 495
// end ; end ;
  98: LD_VAR 0 2
 102: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 103: LD_INT 0
 105: PPUSH
// end ;
 106: LD_VAR 0 4
 110: RET
// export function SOS_Command ( cmd ) ; begin
 111: LD_INT 0
 113: PPUSH
// end ;
 114: LD_VAR 0 2
 118: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 119: LD_INT 0
 121: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 122: LD_VAR 0 1
 126: PUSH
 127: LD_INT 254
 129: EQUAL
 130: PUSH
 131: LD_VAR 0 2
 135: PPUSH
 136: CALL_OW 264
 140: PUSH
 141: LD_EXP 9
 145: EQUAL
 146: AND
 147: PUSH
 148: LD_VAR 0 3
 152: PPUSH
 153: CALL_OW 263
 157: PUSH
 158: LD_INT 3
 160: EQUAL
 161: AND
 162: IFFALSE 178
// HackDestroyVehicle ( unit , selectedUnit ) ;
 164: LD_VAR 0 2
 168: PPUSH
 169: LD_VAR 0 3
 173: PPUSH
 174: CALL 1687 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 178: LD_VAR 0 1
 182: PUSH
 183: LD_INT 255
 185: EQUAL
 186: PUSH
 187: LD_VAR 0 2
 191: PPUSH
 192: CALL_OW 264
 196: PUSH
 197: LD_INT 14
 199: PUSH
 200: LD_INT 53
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: IN
 207: AND
 208: PUSH
 209: LD_VAR 0 4
 213: PPUSH
 214: LD_VAR 0 5
 218: PPUSH
 219: CALL_OW 488
 223: AND
 224: IFFALSE 248
// CutTreeXYR ( unit , x , y , 12 ) ;
 226: LD_VAR 0 2
 230: PPUSH
 231: LD_VAR 0 4
 235: PPUSH
 236: LD_VAR 0 5
 240: PPUSH
 241: LD_INT 12
 243: PPUSH
 244: CALL 253 0 4
// end ;
 248: LD_VAR 0 6
 252: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
 257: PPUSH
 258: PPUSH
 259: PPUSH
 260: PPUSH
 261: PPUSH
 262: PPUSH
 263: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 264: LD_VAR 0 1
 268: NOT
 269: PUSH
 270: LD_VAR 0 2
 274: PPUSH
 275: LD_VAR 0 3
 279: PPUSH
 280: CALL_OW 488
 284: NOT
 285: OR
 286: PUSH
 287: LD_VAR 0 4
 291: NOT
 292: OR
 293: IFFALSE 297
// exit ;
 295: GO 637
// list := [ ] ;
 297: LD_ADDR_VAR 0 13
 301: PUSH
 302: EMPTY
 303: ST_TO_ADDR
// if x - r < 0 then
 304: LD_VAR 0 2
 308: PUSH
 309: LD_VAR 0 4
 313: MINUS
 314: PUSH
 315: LD_INT 0
 317: LESS
 318: IFFALSE 330
// min_x := 0 else
 320: LD_ADDR_VAR 0 7
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
 328: GO 346
// min_x := x - r ;
 330: LD_ADDR_VAR 0 7
 334: PUSH
 335: LD_VAR 0 2
 339: PUSH
 340: LD_VAR 0 4
 344: MINUS
 345: ST_TO_ADDR
// if y - r < 0 then
 346: LD_VAR 0 3
 350: PUSH
 351: LD_VAR 0 4
 355: MINUS
 356: PUSH
 357: LD_INT 0
 359: LESS
 360: IFFALSE 372
// min_y := 0 else
 362: LD_ADDR_VAR 0 8
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
 370: GO 388
// min_y := y - r ;
 372: LD_ADDR_VAR 0 8
 376: PUSH
 377: LD_VAR 0 3
 381: PUSH
 382: LD_VAR 0 4
 386: MINUS
 387: ST_TO_ADDR
// max_x := x + r ;
 388: LD_ADDR_VAR 0 9
 392: PUSH
 393: LD_VAR 0 2
 397: PUSH
 398: LD_VAR 0 4
 402: PLUS
 403: ST_TO_ADDR
// max_y := y + r ;
 404: LD_ADDR_VAR 0 10
 408: PUSH
 409: LD_VAR 0 3
 413: PUSH
 414: LD_VAR 0 4
 418: PLUS
 419: ST_TO_ADDR
// for _x = min_x to max_x do
 420: LD_ADDR_VAR 0 11
 424: PUSH
 425: DOUBLE
 426: LD_VAR 0 7
 430: DEC
 431: ST_TO_ADDR
 432: LD_VAR 0 9
 436: PUSH
 437: FOR_TO
 438: IFFALSE 555
// for _y = min_y to max_y do
 440: LD_ADDR_VAR 0 12
 444: PUSH
 445: DOUBLE
 446: LD_VAR 0 8
 450: DEC
 451: ST_TO_ADDR
 452: LD_VAR 0 10
 456: PUSH
 457: FOR_TO
 458: IFFALSE 551
// begin if not ValidHex ( _x , _y ) then
 460: LD_VAR 0 11
 464: PPUSH
 465: LD_VAR 0 12
 469: PPUSH
 470: CALL_OW 488
 474: NOT
 475: IFFALSE 479
// continue ;
 477: GO 457
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 479: LD_VAR 0 11
 483: PPUSH
 484: LD_VAR 0 12
 488: PPUSH
 489: CALL_OW 351
 493: PUSH
 494: LD_VAR 0 11
 498: PPUSH
 499: LD_VAR 0 12
 503: PPUSH
 504: CALL_OW 554
 508: AND
 509: IFFALSE 549
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
 511: LD_ADDR_VAR 0 13
 515: PUSH
 516: LD_VAR 0 13
 520: PPUSH
 521: LD_VAR 0 13
 525: PUSH
 526: LD_INT 1
 528: PLUS
 529: PPUSH
 530: LD_VAR 0 11
 534: PUSH
 535: LD_VAR 0 12
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 2
 548: ST_TO_ADDR
// end ;
 549: GO 457
 551: POP
 552: POP
 553: GO 437
 555: POP
 556: POP
// if not list then
 557: LD_VAR 0 13
 561: NOT
 562: IFFALSE 566
// exit ;
 564: GO 637
// for i in list do
 566: LD_ADDR_VAR 0 6
 570: PUSH
 571: LD_VAR 0 13
 575: PUSH
 576: FOR_IN
 577: IFFALSE 635
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
 579: LD_VAR 0 1
 583: PPUSH
 584: LD_STRING M
 586: PUSH
 587: LD_VAR 0 6
 591: PUSH
 592: LD_INT 1
 594: ARRAY
 595: PUSH
 596: LD_VAR 0 6
 600: PUSH
 601: LD_INT 2
 603: ARRAY
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: PUSH
 626: EMPTY
 627: LIST
 628: PPUSH
 629: CALL_OW 447
 633: GO 576
 635: POP
 636: POP
// end ;
 637: LD_VAR 0 5
 641: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
 642: LD_EXP 1
 646: NOT
 647: IFFALSE 697
 649: GO 651
 651: DISABLE
// begin initHack := true ;
 652: LD_ADDR_EXP 1
 656: PUSH
 657: LD_INT 1
 659: ST_TO_ADDR
// hackTanks := [ ] ;
 660: LD_ADDR_EXP 2
 664: PUSH
 665: EMPTY
 666: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
 667: LD_ADDR_EXP 3
 671: PUSH
 672: EMPTY
 673: ST_TO_ADDR
// hackLimit := 3 ;
 674: LD_ADDR_EXP 4
 678: PUSH
 679: LD_INT 3
 681: ST_TO_ADDR
// hackDist := 12 ;
 682: LD_ADDR_EXP 5
 686: PUSH
 687: LD_INT 12
 689: ST_TO_ADDR
// hackCounter := [ ] ;
 690: LD_ADDR_EXP 6
 694: PUSH
 695: EMPTY
 696: ST_TO_ADDR
// end ;
 697: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
 698: LD_EXP 1
 702: PUSH
 703: LD_INT 34
 705: PUSH
 706: LD_EXP 9
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: PPUSH
 715: CALL_OW 69
 719: AND
 720: IFFALSE 975
 722: GO 724
 724: DISABLE
 725: LD_INT 0
 727: PPUSH
 728: PPUSH
// begin enable ;
 729: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 34
 737: PUSH
 738: LD_EXP 9
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PPUSH
 747: CALL_OW 69
 751: PUSH
 752: FOR_IN
 753: IFFALSE 973
// begin if not i in hackTanks then
 755: LD_VAR 0 1
 759: PUSH
 760: LD_EXP 2
 764: IN
 765: NOT
 766: IFFALSE 849
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
 768: LD_ADDR_EXP 2
 772: PUSH
 773: LD_EXP 2
 777: PPUSH
 778: LD_EXP 2
 782: PUSH
 783: LD_INT 1
 785: PLUS
 786: PPUSH
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 1
 796: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
 797: LD_ADDR_EXP 3
 801: PUSH
 802: LD_EXP 3
 806: PPUSH
 807: LD_EXP 3
 811: PUSH
 812: LD_INT 1
 814: PLUS
 815: PPUSH
 816: EMPTY
 817: PPUSH
 818: CALL_OW 1
 822: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
 823: LD_ADDR_EXP 6
 827: PUSH
 828: LD_EXP 6
 832: PPUSH
 833: LD_EXP 6
 837: PUSH
 838: LD_INT 1
 840: PLUS
 841: PPUSH
 842: EMPTY
 843: PPUSH
 844: CALL_OW 1
 848: ST_TO_ADDR
// end ; if not IsOk ( i ) then
 849: LD_VAR 0 1
 853: PPUSH
 854: CALL_OW 302
 858: NOT
 859: IFFALSE 872
// begin HackUnlinkAll ( i ) ;
 861: LD_VAR 0 1
 865: PPUSH
 866: CALL 978 0 1
// continue ;
 870: GO 752
// end ; HackCheckCapturedStatus ( i ) ;
 872: LD_VAR 0 1
 876: PPUSH
 877: CALL 1421 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
 881: LD_ADDR_VAR 0 2
 885: PUSH
 886: LD_INT 81
 888: PUSH
 889: LD_VAR 0 1
 893: PPUSH
 894: CALL_OW 255
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 33
 905: PUSH
 906: LD_INT 3
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 91
 915: PUSH
 916: LD_VAR 0 1
 920: PUSH
 921: LD_EXP 5
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 50
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: PPUSH
 943: CALL_OW 69
 947: ST_TO_ADDR
// if not tmp then
 948: LD_VAR 0 2
 952: NOT
 953: IFFALSE 957
// continue ;
 955: GO 752
// HackLink ( i , tmp ) ;
 957: LD_VAR 0 1
 961: PPUSH
 962: LD_VAR 0 2
 966: PPUSH
 967: CALL 1114 0 2
// end ;
 971: GO 752
 973: POP
 974: POP
// end ;
 975: PPOPN 2
 977: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
 978: LD_INT 0
 980: PPUSH
 981: PPUSH
 982: PPUSH
// if not hack in hackTanks then
 983: LD_VAR 0 1
 987: PUSH
 988: LD_EXP 2
 992: IN
 993: NOT
 994: IFFALSE 998
// exit ;
 996: GO 1109
// index := GetElementIndex ( hackTanks , hack ) ;
 998: LD_ADDR_VAR 0 4
1002: PUSH
1003: LD_EXP 2
1007: PPUSH
1008: LD_VAR 0 1
1012: PPUSH
1013: CALL 19832 0 2
1017: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1018: LD_EXP 3
1022: PUSH
1023: LD_VAR 0 4
1027: ARRAY
1028: IFFALSE 1109
// begin for i in hackTanksCaptured [ index ] do
1030: LD_ADDR_VAR 0 3
1034: PUSH
1035: LD_EXP 3
1039: PUSH
1040: LD_VAR 0 4
1044: ARRAY
1045: PUSH
1046: FOR_IN
1047: IFFALSE 1073
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1049: LD_VAR 0 3
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 3
1062: PUSH
1063: LD_INT 2
1065: ARRAY
1066: PPUSH
1067: CALL_OW 235
1071: GO 1046
1073: POP
1074: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1075: LD_ADDR_EXP 3
1079: PUSH
1080: LD_EXP 3
1084: PPUSH
1085: LD_VAR 0 4
1089: PPUSH
1090: EMPTY
1091: PPUSH
1092: CALL_OW 1
1096: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1097: LD_VAR 0 1
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL_OW 505
// end ; end ;
1109: LD_VAR 0 2
1113: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1114: LD_INT 0
1116: PPUSH
1117: PPUSH
1118: PPUSH
// if not hack in hackTanks or not vehicles then
1119: LD_VAR 0 1
1123: PUSH
1124: LD_EXP 2
1128: IN
1129: NOT
1130: PUSH
1131: LD_VAR 0 2
1135: NOT
1136: OR
1137: IFFALSE 1141
// exit ;
1139: GO 1416
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1141: LD_ADDR_VAR 0 2
1145: PUSH
1146: LD_VAR 0 1
1150: PPUSH
1151: LD_VAR 0 2
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: LD_INT 1
1161: PPUSH
1162: CALL 20482 0 4
1166: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1167: LD_ADDR_VAR 0 5
1171: PUSH
1172: LD_EXP 2
1176: PPUSH
1177: LD_VAR 0 1
1181: PPUSH
1182: CALL 19832 0 2
1186: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1187: LD_EXP 3
1191: PUSH
1192: LD_VAR 0 5
1196: ARRAY
1197: PUSH
1198: LD_EXP 4
1202: LESS
1203: IFFALSE 1392
// begin for i := 1 to vehicles do
1205: LD_ADDR_VAR 0 4
1209: PUSH
1210: DOUBLE
1211: LD_INT 1
1213: DEC
1214: ST_TO_ADDR
1215: LD_VAR 0 2
1219: PUSH
1220: FOR_TO
1221: IFFALSE 1390
// begin if hackTanksCaptured [ index ] = hackLimit then
1223: LD_EXP 3
1227: PUSH
1228: LD_VAR 0 5
1232: ARRAY
1233: PUSH
1234: LD_EXP 4
1238: EQUAL
1239: IFFALSE 1243
// break ;
1241: GO 1390
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1243: LD_ADDR_EXP 6
1247: PUSH
1248: LD_EXP 6
1252: PPUSH
1253: LD_VAR 0 5
1257: PPUSH
1258: LD_EXP 6
1262: PUSH
1263: LD_VAR 0 5
1267: ARRAY
1268: PUSH
1269: LD_INT 1
1271: PLUS
1272: PPUSH
1273: CALL_OW 1
1277: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1278: LD_ADDR_EXP 3
1282: PUSH
1283: LD_EXP 3
1287: PPUSH
1288: LD_VAR 0 5
1292: PUSH
1293: LD_EXP 3
1297: PUSH
1298: LD_VAR 0 5
1302: ARRAY
1303: PUSH
1304: LD_INT 1
1306: PLUS
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PPUSH
1312: LD_VAR 0 2
1316: PUSH
1317: LD_VAR 0 4
1321: ARRAY
1322: PUSH
1323: LD_VAR 0 2
1327: PUSH
1328: LD_VAR 0 4
1332: ARRAY
1333: PPUSH
1334: CALL_OW 255
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PPUSH
1343: CALL 20047 0 3
1347: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1348: LD_VAR 0 2
1352: PUSH
1353: LD_VAR 0 4
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 1
1363: PPUSH
1364: CALL_OW 255
1368: PPUSH
1369: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1373: LD_VAR 0 2
1377: PUSH
1378: LD_VAR 0 4
1382: ARRAY
1383: PPUSH
1384: CALL_OW 141
// end ;
1388: GO 1220
1390: POP
1391: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1392: LD_VAR 0 1
1396: PPUSH
1397: LD_EXP 3
1401: PUSH
1402: LD_VAR 0 5
1406: ARRAY
1407: PUSH
1408: LD_INT 0
1410: PLUS
1411: PPUSH
1412: CALL_OW 505
// end ;
1416: LD_VAR 0 3
1420: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1421: LD_INT 0
1423: PPUSH
1424: PPUSH
1425: PPUSH
1426: PPUSH
// if not hack in hackTanks then
1427: LD_VAR 0 1
1431: PUSH
1432: LD_EXP 2
1436: IN
1437: NOT
1438: IFFALSE 1442
// exit ;
1440: GO 1682
// index := GetElementIndex ( hackTanks , hack ) ;
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_EXP 2
1451: PPUSH
1452: LD_VAR 0 1
1456: PPUSH
1457: CALL 19832 0 2
1461: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1462: LD_ADDR_VAR 0 3
1466: PUSH
1467: DOUBLE
1468: LD_EXP 3
1472: PUSH
1473: LD_VAR 0 4
1477: ARRAY
1478: INC
1479: ST_TO_ADDR
1480: LD_INT 1
1482: PUSH
1483: FOR_DOWNTO
1484: IFFALSE 1656
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1486: LD_ADDR_VAR 0 5
1490: PUSH
1491: LD_EXP 3
1495: PUSH
1496: LD_VAR 0 4
1500: ARRAY
1501: PUSH
1502: LD_VAR 0 3
1506: ARRAY
1507: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1508: LD_VAR 0 5
1512: PUSH
1513: LD_INT 1
1515: ARRAY
1516: PPUSH
1517: CALL_OW 302
1521: NOT
1522: PUSH
1523: LD_VAR 0 5
1527: PUSH
1528: LD_INT 1
1530: ARRAY
1531: PPUSH
1532: CALL_OW 255
1536: PUSH
1537: LD_VAR 0 1
1541: PPUSH
1542: CALL_OW 255
1546: NONEQUAL
1547: OR
1548: IFFALSE 1654
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
1550: LD_VAR 0 5
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 305
1563: PUSH
1564: LD_VAR 0 5
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: CALL_OW 255
1577: PUSH
1578: LD_VAR 0 1
1582: PPUSH
1583: CALL_OW 255
1587: EQUAL
1588: AND
1589: IFFALSE 1613
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
1591: LD_VAR 0 5
1595: PUSH
1596: LD_INT 1
1598: ARRAY
1599: PPUSH
1600: LD_VAR 0 5
1604: PUSH
1605: LD_INT 2
1607: ARRAY
1608: PPUSH
1609: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
1613: LD_ADDR_EXP 3
1617: PUSH
1618: LD_EXP 3
1622: PPUSH
1623: LD_VAR 0 4
1627: PPUSH
1628: LD_EXP 3
1632: PUSH
1633: LD_VAR 0 4
1637: ARRAY
1638: PPUSH
1639: LD_VAR 0 3
1643: PPUSH
1644: CALL_OW 3
1648: PPUSH
1649: CALL_OW 1
1653: ST_TO_ADDR
// end ; end ;
1654: GO 1483
1656: POP
1657: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1658: LD_VAR 0 1
1662: PPUSH
1663: LD_EXP 3
1667: PUSH
1668: LD_VAR 0 4
1672: ARRAY
1673: PUSH
1674: LD_INT 0
1676: PLUS
1677: PPUSH
1678: CALL_OW 505
// end ;
1682: LD_VAR 0 2
1686: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
1687: LD_INT 0
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
// if not hack in hackTanks then
1693: LD_VAR 0 1
1697: PUSH
1698: LD_EXP 2
1702: IN
1703: NOT
1704: IFFALSE 1708
// exit ;
1706: GO 1793
// index := GetElementIndex ( hackTanks , hack ) ;
1708: LD_ADDR_VAR 0 5
1712: PUSH
1713: LD_EXP 2
1717: PPUSH
1718: LD_VAR 0 1
1722: PPUSH
1723: CALL 19832 0 2
1727: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
1728: LD_ADDR_VAR 0 4
1732: PUSH
1733: DOUBLE
1734: LD_INT 1
1736: DEC
1737: ST_TO_ADDR
1738: LD_EXP 3
1742: PUSH
1743: LD_VAR 0 5
1747: ARRAY
1748: PUSH
1749: FOR_TO
1750: IFFALSE 1791
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
1752: LD_EXP 3
1756: PUSH
1757: LD_VAR 0 5
1761: ARRAY
1762: PUSH
1763: LD_VAR 0 4
1767: ARRAY
1768: PUSH
1769: LD_INT 1
1771: ARRAY
1772: PUSH
1773: LD_VAR 0 2
1777: EQUAL
1778: IFFALSE 1789
// KillUnit ( vehicle ) ;
1780: LD_VAR 0 2
1784: PPUSH
1785: CALL_OW 66
1789: GO 1749
1791: POP
1792: POP
// end ; end_of_file
1793: LD_VAR 0 3
1797: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
1798: LD_INT 0
1800: PPUSH
// ar_crane := 88 ;
1801: LD_ADDR_EXP 13
1805: PUSH
1806: LD_INT 88
1808: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
1809: LD_ADDR_EXP 8
1813: PUSH
1814: LD_INT 89
1816: ST_TO_ADDR
// us_hack := 99 ;
1817: LD_ADDR_EXP 9
1821: PUSH
1822: LD_INT 99
1824: ST_TO_ADDR
// us_artillery := 97 ;
1825: LD_ADDR_EXP 10
1829: PUSH
1830: LD_INT 97
1832: ST_TO_ADDR
// ar_bio_bomb := 91 ;
1833: LD_ADDR_EXP 11
1837: PUSH
1838: LD_INT 91
1840: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
1841: LD_ADDR_EXP 12
1845: PUSH
1846: LD_INT 92
1848: ST_TO_ADDR
// ru_radar := 98 ;
1849: LD_ADDR_EXP 7
1853: PUSH
1854: LD_INT 98
1856: ST_TO_ADDR
// tech_Artillery := 80 ;
1857: LD_ADDR_EXP 14
1861: PUSH
1862: LD_INT 80
1864: ST_TO_ADDR
// tech_RadMat := 81 ;
1865: LD_ADDR_EXP 15
1869: PUSH
1870: LD_INT 81
1872: ST_TO_ADDR
// tech_BasicTools := 82 ;
1873: LD_ADDR_EXP 16
1877: PUSH
1878: LD_INT 82
1880: ST_TO_ADDR
// tech_Cargo := 83 ;
1881: LD_ADDR_EXP 17
1885: PUSH
1886: LD_INT 83
1888: ST_TO_ADDR
// tech_Track := 84 ;
1889: LD_ADDR_EXP 18
1893: PUSH
1894: LD_INT 84
1896: ST_TO_ADDR
// tech_Crane := 85 ;
1897: LD_ADDR_EXP 19
1901: PUSH
1902: LD_INT 85
1904: ST_TO_ADDR
// tech_Bulldozer := 86 ;
1905: LD_ADDR_EXP 20
1909: PUSH
1910: LD_INT 86
1912: ST_TO_ADDR
// tech_Hovercraft := 87 ;
1913: LD_ADDR_EXP 21
1917: PUSH
1918: LD_INT 87
1920: ST_TO_ADDR
// end ;
1921: LD_VAR 0 1
1925: RET
// every 1 do
1926: GO 1928
1928: DISABLE
// InitGlobalVariables ; end_of_file
1929: CALL 1798 0 0
1933: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
1934: LD_VAR 0 2
1938: PUSH
1939: LD_INT 100
1941: EQUAL
1942: IFFALSE 2891
// begin if not StreamModeActive then
1944: LD_EXP 22
1948: NOT
1949: IFFALSE 1959
// StreamModeActive := true ;
1951: LD_ADDR_EXP 22
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// if p3 = 0 then
1959: LD_VAR 0 3
1963: PUSH
1964: LD_INT 0
1966: EQUAL
1967: IFFALSE 1973
// InitStreamMode ;
1969: CALL 3049 0 0
// if p3 = 1 then
1973: LD_VAR 0 3
1977: PUSH
1978: LD_INT 1
1980: EQUAL
1981: IFFALSE 1991
// sRocket := true ;
1983: LD_ADDR_EXP 27
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if p3 = 2 then
1991: LD_VAR 0 3
1995: PUSH
1996: LD_INT 2
1998: EQUAL
1999: IFFALSE 2009
// sSpeed := true ;
2001: LD_ADDR_EXP 26
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// if p3 = 3 then
2009: LD_VAR 0 3
2013: PUSH
2014: LD_INT 3
2016: EQUAL
2017: IFFALSE 2027
// sEngine := true ;
2019: LD_ADDR_EXP 28
2023: PUSH
2024: LD_INT 1
2026: ST_TO_ADDR
// if p3 = 4 then
2027: LD_VAR 0 3
2031: PUSH
2032: LD_INT 4
2034: EQUAL
2035: IFFALSE 2045
// sSpec := true ;
2037: LD_ADDR_EXP 25
2041: PUSH
2042: LD_INT 1
2044: ST_TO_ADDR
// if p3 = 5 then
2045: LD_VAR 0 3
2049: PUSH
2050: LD_INT 5
2052: EQUAL
2053: IFFALSE 2063
// sLevel := true ;
2055: LD_ADDR_EXP 29
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// if p3 = 6 then
2063: LD_VAR 0 3
2067: PUSH
2068: LD_INT 6
2070: EQUAL
2071: IFFALSE 2081
// sArmoury := true ;
2073: LD_ADDR_EXP 30
2077: PUSH
2078: LD_INT 1
2080: ST_TO_ADDR
// if p3 = 7 then
2081: LD_VAR 0 3
2085: PUSH
2086: LD_INT 7
2088: EQUAL
2089: IFFALSE 2099
// sRadar := true ;
2091: LD_ADDR_EXP 31
2095: PUSH
2096: LD_INT 1
2098: ST_TO_ADDR
// if p3 = 8 then
2099: LD_VAR 0 3
2103: PUSH
2104: LD_INT 8
2106: EQUAL
2107: IFFALSE 2117
// sBunker := true ;
2109: LD_ADDR_EXP 32
2113: PUSH
2114: LD_INT 1
2116: ST_TO_ADDR
// if p3 = 9 then
2117: LD_VAR 0 3
2121: PUSH
2122: LD_INT 9
2124: EQUAL
2125: IFFALSE 2135
// sHack := true ;
2127: LD_ADDR_EXP 33
2131: PUSH
2132: LD_INT 1
2134: ST_TO_ADDR
// if p3 = 10 then
2135: LD_VAR 0 3
2139: PUSH
2140: LD_INT 10
2142: EQUAL
2143: IFFALSE 2153
// sFire := true ;
2145: LD_ADDR_EXP 34
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// if p3 = 11 then
2153: LD_VAR 0 3
2157: PUSH
2158: LD_INT 11
2160: EQUAL
2161: IFFALSE 2171
// sRefresh := true ;
2163: LD_ADDR_EXP 35
2167: PUSH
2168: LD_INT 1
2170: ST_TO_ADDR
// if p3 = 12 then
2171: LD_VAR 0 3
2175: PUSH
2176: LD_INT 12
2178: EQUAL
2179: IFFALSE 2189
// sExp := true ;
2181: LD_ADDR_EXP 36
2185: PUSH
2186: LD_INT 1
2188: ST_TO_ADDR
// if p3 = 13 then
2189: LD_VAR 0 3
2193: PUSH
2194: LD_INT 13
2196: EQUAL
2197: IFFALSE 2207
// sDepot := true ;
2199: LD_ADDR_EXP 37
2203: PUSH
2204: LD_INT 1
2206: ST_TO_ADDR
// if p3 = 14 then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 14
2214: EQUAL
2215: IFFALSE 2225
// sFlag := true ;
2217: LD_ADDR_EXP 38
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// if p3 = 15 then
2225: LD_VAR 0 3
2229: PUSH
2230: LD_INT 15
2232: EQUAL
2233: IFFALSE 2243
// sKamikadze := true ;
2235: LD_ADDR_EXP 46
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// if p3 = 16 then
2243: LD_VAR 0 3
2247: PUSH
2248: LD_INT 16
2250: EQUAL
2251: IFFALSE 2261
// sTroll := true ;
2253: LD_ADDR_EXP 47
2257: PUSH
2258: LD_INT 1
2260: ST_TO_ADDR
// if p3 = 17 then
2261: LD_VAR 0 3
2265: PUSH
2266: LD_INT 17
2268: EQUAL
2269: IFFALSE 2279
// sSlow := true ;
2271: LD_ADDR_EXP 48
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// if p3 = 18 then
2279: LD_VAR 0 3
2283: PUSH
2284: LD_INT 18
2286: EQUAL
2287: IFFALSE 2297
// sLack := true ;
2289: LD_ADDR_EXP 49
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// if p3 = 19 then
2297: LD_VAR 0 3
2301: PUSH
2302: LD_INT 19
2304: EQUAL
2305: IFFALSE 2315
// sTank := true ;
2307: LD_ADDR_EXP 51
2311: PUSH
2312: LD_INT 1
2314: ST_TO_ADDR
// if p3 = 20 then
2315: LD_VAR 0 3
2319: PUSH
2320: LD_INT 20
2322: EQUAL
2323: IFFALSE 2333
// sRemote := true ;
2325: LD_ADDR_EXP 52
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// if p3 = 21 then
2333: LD_VAR 0 3
2337: PUSH
2338: LD_INT 21
2340: EQUAL
2341: IFFALSE 2351
// sPowell := true ;
2343: LD_ADDR_EXP 53
2347: PUSH
2348: LD_INT 1
2350: ST_TO_ADDR
// if p3 = 22 then
2351: LD_VAR 0 3
2355: PUSH
2356: LD_INT 22
2358: EQUAL
2359: IFFALSE 2369
// sTeleport := true ;
2361: LD_ADDR_EXP 56
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// if p3 = 23 then
2369: LD_VAR 0 3
2373: PUSH
2374: LD_INT 23
2376: EQUAL
2377: IFFALSE 2387
// sOilTower := true ;
2379: LD_ADDR_EXP 58
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// if p3 = 24 then
2387: LD_VAR 0 3
2391: PUSH
2392: LD_INT 24
2394: EQUAL
2395: IFFALSE 2405
// sShovel := true ;
2397: LD_ADDR_EXP 59
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// if p3 = 25 then
2405: LD_VAR 0 3
2409: PUSH
2410: LD_INT 25
2412: EQUAL
2413: IFFALSE 2423
// sSheik := true ;
2415: LD_ADDR_EXP 60
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
// if p3 = 26 then
2423: LD_VAR 0 3
2427: PUSH
2428: LD_INT 26
2430: EQUAL
2431: IFFALSE 2441
// sEarthquake := true ;
2433: LD_ADDR_EXP 62
2437: PUSH
2438: LD_INT 1
2440: ST_TO_ADDR
// if p3 = 27 then
2441: LD_VAR 0 3
2445: PUSH
2446: LD_INT 27
2448: EQUAL
2449: IFFALSE 2459
// sAI := true ;
2451: LD_ADDR_EXP 63
2455: PUSH
2456: LD_INT 1
2458: ST_TO_ADDR
// if p3 = 28 then
2459: LD_VAR 0 3
2463: PUSH
2464: LD_INT 28
2466: EQUAL
2467: IFFALSE 2477
// sCargo := true ;
2469: LD_ADDR_EXP 66
2473: PUSH
2474: LD_INT 1
2476: ST_TO_ADDR
// if p3 = 29 then
2477: LD_VAR 0 3
2481: PUSH
2482: LD_INT 29
2484: EQUAL
2485: IFFALSE 2495
// sDLaser := true ;
2487: LD_ADDR_EXP 67
2491: PUSH
2492: LD_INT 1
2494: ST_TO_ADDR
// if p3 = 30 then
2495: LD_VAR 0 3
2499: PUSH
2500: LD_INT 30
2502: EQUAL
2503: IFFALSE 2513
// sExchange := true ;
2505: LD_ADDR_EXP 68
2509: PUSH
2510: LD_INT 1
2512: ST_TO_ADDR
// if p3 = 31 then
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 31
2520: EQUAL
2521: IFFALSE 2531
// sFac := true ;
2523: LD_ADDR_EXP 69
2527: PUSH
2528: LD_INT 1
2530: ST_TO_ADDR
// if p3 = 32 then
2531: LD_VAR 0 3
2535: PUSH
2536: LD_INT 32
2538: EQUAL
2539: IFFALSE 2549
// sPower := true ;
2541: LD_ADDR_EXP 70
2545: PUSH
2546: LD_INT 1
2548: ST_TO_ADDR
// if p3 = 33 then
2549: LD_VAR 0 3
2553: PUSH
2554: LD_INT 33
2556: EQUAL
2557: IFFALSE 2567
// sRandom := true ;
2559: LD_ADDR_EXP 71
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// if p3 = 34 then
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 34
2574: EQUAL
2575: IFFALSE 2585
// sShield := true ;
2577: LD_ADDR_EXP 72
2581: PUSH
2582: LD_INT 1
2584: ST_TO_ADDR
// if p3 = 35 then
2585: LD_VAR 0 3
2589: PUSH
2590: LD_INT 35
2592: EQUAL
2593: IFFALSE 2603
// sTime := true ;
2595: LD_ADDR_EXP 73
2599: PUSH
2600: LD_INT 1
2602: ST_TO_ADDR
// if p3 = 36 then
2603: LD_VAR 0 3
2607: PUSH
2608: LD_INT 36
2610: EQUAL
2611: IFFALSE 2621
// sTools := true ;
2613: LD_ADDR_EXP 74
2617: PUSH
2618: LD_INT 1
2620: ST_TO_ADDR
// if p3 = 101 then
2621: LD_VAR 0 3
2625: PUSH
2626: LD_INT 101
2628: EQUAL
2629: IFFALSE 2639
// sSold := true ;
2631: LD_ADDR_EXP 39
2635: PUSH
2636: LD_INT 1
2638: ST_TO_ADDR
// if p3 = 102 then
2639: LD_VAR 0 3
2643: PUSH
2644: LD_INT 102
2646: EQUAL
2647: IFFALSE 2657
// sDiff := true ;
2649: LD_ADDR_EXP 40
2653: PUSH
2654: LD_INT 1
2656: ST_TO_ADDR
// if p3 = 103 then
2657: LD_VAR 0 3
2661: PUSH
2662: LD_INT 103
2664: EQUAL
2665: IFFALSE 2675
// sFog := true ;
2667: LD_ADDR_EXP 43
2671: PUSH
2672: LD_INT 1
2674: ST_TO_ADDR
// if p3 = 104 then
2675: LD_VAR 0 3
2679: PUSH
2680: LD_INT 104
2682: EQUAL
2683: IFFALSE 2693
// sReset := true ;
2685: LD_ADDR_EXP 44
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// if p3 = 105 then
2693: LD_VAR 0 3
2697: PUSH
2698: LD_INT 105
2700: EQUAL
2701: IFFALSE 2711
// sSun := true ;
2703: LD_ADDR_EXP 45
2707: PUSH
2708: LD_INT 1
2710: ST_TO_ADDR
// if p3 = 106 then
2711: LD_VAR 0 3
2715: PUSH
2716: LD_INT 106
2718: EQUAL
2719: IFFALSE 2729
// sTiger := true ;
2721: LD_ADDR_EXP 41
2725: PUSH
2726: LD_INT 1
2728: ST_TO_ADDR
// if p3 = 107 then
2729: LD_VAR 0 3
2733: PUSH
2734: LD_INT 107
2736: EQUAL
2737: IFFALSE 2747
// sBomb := true ;
2739: LD_ADDR_EXP 42
2743: PUSH
2744: LD_INT 1
2746: ST_TO_ADDR
// if p3 = 108 then
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 108
2754: EQUAL
2755: IFFALSE 2765
// sWound := true ;
2757: LD_ADDR_EXP 50
2761: PUSH
2762: LD_INT 1
2764: ST_TO_ADDR
// if p3 = 109 then
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 109
2772: EQUAL
2773: IFFALSE 2783
// sBetray := true ;
2775: LD_ADDR_EXP 54
2779: PUSH
2780: LD_INT 1
2782: ST_TO_ADDR
// if p3 = 110 then
2783: LD_VAR 0 3
2787: PUSH
2788: LD_INT 110
2790: EQUAL
2791: IFFALSE 2801
// sContamin := true ;
2793: LD_ADDR_EXP 55
2797: PUSH
2798: LD_INT 1
2800: ST_TO_ADDR
// if p3 = 111 then
2801: LD_VAR 0 3
2805: PUSH
2806: LD_INT 111
2808: EQUAL
2809: IFFALSE 2819
// sOil := true ;
2811: LD_ADDR_EXP 57
2815: PUSH
2816: LD_INT 1
2818: ST_TO_ADDR
// if p3 = 112 then
2819: LD_VAR 0 3
2823: PUSH
2824: LD_INT 112
2826: EQUAL
2827: IFFALSE 2837
// sStu := true ;
2829: LD_ADDR_EXP 61
2833: PUSH
2834: LD_INT 1
2836: ST_TO_ADDR
// if p3 = 113 then
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 113
2844: EQUAL
2845: IFFALSE 2855
// sBazooka := true ;
2847: LD_ADDR_EXP 64
2851: PUSH
2852: LD_INT 1
2854: ST_TO_ADDR
// if p3 = 114 then
2855: LD_VAR 0 3
2859: PUSH
2860: LD_INT 114
2862: EQUAL
2863: IFFALSE 2873
// sMortar := true ;
2865: LD_ADDR_EXP 65
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// if p3 = 115 then
2873: LD_VAR 0 3
2877: PUSH
2878: LD_INT 115
2880: EQUAL
2881: IFFALSE 2891
// sRanger := true ;
2883: LD_ADDR_EXP 75
2887: PUSH
2888: LD_INT 1
2890: ST_TO_ADDR
// end ; if p2 = 101 then
2891: LD_VAR 0 2
2895: PUSH
2896: LD_INT 101
2898: EQUAL
2899: IFFALSE 3027
// begin case p3 of 1 :
2901: LD_VAR 0 3
2905: PUSH
2906: LD_INT 1
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2921
2914: POP
// hHackUnlimitedResources ; 2 :
2915: CALL 14062 0 0
2919: GO 3027
2921: LD_INT 2
2923: DOUBLE
2924: EQUAL
2925: IFTRUE 2929
2927: GO 2936
2929: POP
// hHackSetLevel10 ; 3 :
2930: CALL 14195 0 0
2934: GO 3027
2936: LD_INT 3
2938: DOUBLE
2939: EQUAL
2940: IFTRUE 2944
2942: GO 2951
2944: POP
// hHackSetLevel10YourUnits ; 4 :
2945: CALL 14280 0 0
2949: GO 3027
2951: LD_INT 4
2953: DOUBLE
2954: EQUAL
2955: IFTRUE 2959
2957: GO 2966
2959: POP
// hHackInvincible ; 5 :
2960: CALL 14728 0 0
2964: GO 3027
2966: LD_INT 5
2968: DOUBLE
2969: EQUAL
2970: IFTRUE 2974
2972: GO 2981
2974: POP
// hHackInvisible ; 6 :
2975: CALL 14839 0 0
2979: GO 3027
2981: LD_INT 6
2983: DOUBLE
2984: EQUAL
2985: IFTRUE 2989
2987: GO 2996
2989: POP
// hHackChangeYourSide ; 7 :
2990: CALL 14896 0 0
2994: GO 3027
2996: LD_INT 7
2998: DOUBLE
2999: EQUAL
3000: IFTRUE 3004
3002: GO 3011
3004: POP
// hHackChangeUnitSide ; 8 :
3005: CALL 14938 0 0
3009: GO 3027
3011: LD_INT 8
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3026
3019: POP
// hHackFog ; end ;
3020: CALL 15039 0 0
3024: GO 3027
3026: POP
// end ; end ;
3027: PPOPN 6
3029: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3030: GO 3032
3032: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3033: LD_STRING initStreamRollete();
3035: PPUSH
3036: CALL_OW 559
// InitStreamMode ;
3040: CALL 3049 0 0
// DefineStreamItems ( ) ;
3044: CALL 3489 0 0
// end ;
3048: END
// function InitStreamMode ; begin
3049: LD_INT 0
3051: PPUSH
// streamModeActive := false ;
3052: LD_ADDR_EXP 22
3056: PUSH
3057: LD_INT 0
3059: ST_TO_ADDR
// normalCounter := 36 ;
3060: LD_ADDR_EXP 23
3064: PUSH
3065: LD_INT 36
3067: ST_TO_ADDR
// hardcoreCounter := 16 ;
3068: LD_ADDR_EXP 24
3072: PUSH
3073: LD_INT 16
3075: ST_TO_ADDR
// sRocket := false ;
3076: LD_ADDR_EXP 27
3080: PUSH
3081: LD_INT 0
3083: ST_TO_ADDR
// sSpeed := false ;
3084: LD_ADDR_EXP 26
3088: PUSH
3089: LD_INT 0
3091: ST_TO_ADDR
// sEngine := false ;
3092: LD_ADDR_EXP 28
3096: PUSH
3097: LD_INT 0
3099: ST_TO_ADDR
// sSpec := false ;
3100: LD_ADDR_EXP 25
3104: PUSH
3105: LD_INT 0
3107: ST_TO_ADDR
// sLevel := false ;
3108: LD_ADDR_EXP 29
3112: PUSH
3113: LD_INT 0
3115: ST_TO_ADDR
// sArmoury := false ;
3116: LD_ADDR_EXP 30
3120: PUSH
3121: LD_INT 0
3123: ST_TO_ADDR
// sRadar := false ;
3124: LD_ADDR_EXP 31
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// sBunker := false ;
3132: LD_ADDR_EXP 32
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// sHack := false ;
3140: LD_ADDR_EXP 33
3144: PUSH
3145: LD_INT 0
3147: ST_TO_ADDR
// sFire := false ;
3148: LD_ADDR_EXP 34
3152: PUSH
3153: LD_INT 0
3155: ST_TO_ADDR
// sRefresh := false ;
3156: LD_ADDR_EXP 35
3160: PUSH
3161: LD_INT 0
3163: ST_TO_ADDR
// sExp := false ;
3164: LD_ADDR_EXP 36
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// sDepot := false ;
3172: LD_ADDR_EXP 37
3176: PUSH
3177: LD_INT 0
3179: ST_TO_ADDR
// sFlag := false ;
3180: LD_ADDR_EXP 38
3184: PUSH
3185: LD_INT 0
3187: ST_TO_ADDR
// sKamikadze := false ;
3188: LD_ADDR_EXP 46
3192: PUSH
3193: LD_INT 0
3195: ST_TO_ADDR
// sTroll := false ;
3196: LD_ADDR_EXP 47
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// sSlow := false ;
3204: LD_ADDR_EXP 48
3208: PUSH
3209: LD_INT 0
3211: ST_TO_ADDR
// sLack := false ;
3212: LD_ADDR_EXP 49
3216: PUSH
3217: LD_INT 0
3219: ST_TO_ADDR
// sTank := false ;
3220: LD_ADDR_EXP 51
3224: PUSH
3225: LD_INT 0
3227: ST_TO_ADDR
// sRemote := false ;
3228: LD_ADDR_EXP 52
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// sPowell := false ;
3236: LD_ADDR_EXP 53
3240: PUSH
3241: LD_INT 0
3243: ST_TO_ADDR
// sTeleport := false ;
3244: LD_ADDR_EXP 56
3248: PUSH
3249: LD_INT 0
3251: ST_TO_ADDR
// sOilTower := false ;
3252: LD_ADDR_EXP 58
3256: PUSH
3257: LD_INT 0
3259: ST_TO_ADDR
// sShovel := false ;
3260: LD_ADDR_EXP 59
3264: PUSH
3265: LD_INT 0
3267: ST_TO_ADDR
// sSheik := false ;
3268: LD_ADDR_EXP 60
3272: PUSH
3273: LD_INT 0
3275: ST_TO_ADDR
// sEarthquake := false ;
3276: LD_ADDR_EXP 62
3280: PUSH
3281: LD_INT 0
3283: ST_TO_ADDR
// sAI := false ;
3284: LD_ADDR_EXP 63
3288: PUSH
3289: LD_INT 0
3291: ST_TO_ADDR
// sCargo := false ;
3292: LD_ADDR_EXP 66
3296: PUSH
3297: LD_INT 0
3299: ST_TO_ADDR
// sDLaser := false ;
3300: LD_ADDR_EXP 67
3304: PUSH
3305: LD_INT 0
3307: ST_TO_ADDR
// sExchange := false ;
3308: LD_ADDR_EXP 68
3312: PUSH
3313: LD_INT 0
3315: ST_TO_ADDR
// sFac := false ;
3316: LD_ADDR_EXP 69
3320: PUSH
3321: LD_INT 0
3323: ST_TO_ADDR
// sPower := false ;
3324: LD_ADDR_EXP 70
3328: PUSH
3329: LD_INT 0
3331: ST_TO_ADDR
// sRandom := false ;
3332: LD_ADDR_EXP 71
3336: PUSH
3337: LD_INT 0
3339: ST_TO_ADDR
// sShield := false ;
3340: LD_ADDR_EXP 72
3344: PUSH
3345: LD_INT 0
3347: ST_TO_ADDR
// sTime := false ;
3348: LD_ADDR_EXP 73
3352: PUSH
3353: LD_INT 0
3355: ST_TO_ADDR
// sTools := false ;
3356: LD_ADDR_EXP 74
3360: PUSH
3361: LD_INT 0
3363: ST_TO_ADDR
// sSold := false ;
3364: LD_ADDR_EXP 39
3368: PUSH
3369: LD_INT 0
3371: ST_TO_ADDR
// sDiff := false ;
3372: LD_ADDR_EXP 40
3376: PUSH
3377: LD_INT 0
3379: ST_TO_ADDR
// sFog := false ;
3380: LD_ADDR_EXP 43
3384: PUSH
3385: LD_INT 0
3387: ST_TO_ADDR
// sReset := false ;
3388: LD_ADDR_EXP 44
3392: PUSH
3393: LD_INT 0
3395: ST_TO_ADDR
// sSun := false ;
3396: LD_ADDR_EXP 45
3400: PUSH
3401: LD_INT 0
3403: ST_TO_ADDR
// sTiger := false ;
3404: LD_ADDR_EXP 41
3408: PUSH
3409: LD_INT 0
3411: ST_TO_ADDR
// sBomb := false ;
3412: LD_ADDR_EXP 42
3416: PUSH
3417: LD_INT 0
3419: ST_TO_ADDR
// sWound := false ;
3420: LD_ADDR_EXP 50
3424: PUSH
3425: LD_INT 0
3427: ST_TO_ADDR
// sBetray := false ;
3428: LD_ADDR_EXP 54
3432: PUSH
3433: LD_INT 0
3435: ST_TO_ADDR
// sContamin := false ;
3436: LD_ADDR_EXP 55
3440: PUSH
3441: LD_INT 0
3443: ST_TO_ADDR
// sOil := false ;
3444: LD_ADDR_EXP 57
3448: PUSH
3449: LD_INT 0
3451: ST_TO_ADDR
// sStu := false ;
3452: LD_ADDR_EXP 61
3456: PUSH
3457: LD_INT 0
3459: ST_TO_ADDR
// sBazooka := false ;
3460: LD_ADDR_EXP 64
3464: PUSH
3465: LD_INT 0
3467: ST_TO_ADDR
// sMortar := false ;
3468: LD_ADDR_EXP 65
3472: PUSH
3473: LD_INT 0
3475: ST_TO_ADDR
// sRanger := false ;
3476: LD_ADDR_EXP 75
3480: PUSH
3481: LD_INT 0
3483: ST_TO_ADDR
// end ;
3484: LD_VAR 0 1
3488: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
3489: LD_INT 0
3491: PPUSH
3492: PPUSH
3493: PPUSH
3494: PPUSH
3495: PPUSH
// result := [ ] ;
3496: LD_ADDR_VAR 0 1
3500: PUSH
3501: EMPTY
3502: ST_TO_ADDR
// if campaign_id = 1 then
3503: LD_OWVAR 69
3507: PUSH
3508: LD_INT 1
3510: EQUAL
3511: IFFALSE 6449
// begin case mission_number of 1 :
3513: LD_OWVAR 70
3517: PUSH
3518: LD_INT 1
3520: DOUBLE
3521: EQUAL
3522: IFTRUE 3526
3524: GO 3590
3526: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_INT 2
3534: PUSH
3535: LD_INT 4
3537: PUSH
3538: LD_INT 11
3540: PUSH
3541: LD_INT 12
3543: PUSH
3544: LD_INT 15
3546: PUSH
3547: LD_INT 16
3549: PUSH
3550: LD_INT 22
3552: PUSH
3553: LD_INT 23
3555: PUSH
3556: LD_INT 26
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 101
3572: PUSH
3573: LD_INT 102
3575: PUSH
3576: LD_INT 106
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: ST_TO_ADDR
3588: GO 6447
3590: LD_INT 2
3592: DOUBLE
3593: EQUAL
3594: IFTRUE 3598
3596: GO 3670
3598: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
3599: LD_ADDR_VAR 0 1
3603: PUSH
3604: LD_INT 2
3606: PUSH
3607: LD_INT 4
3609: PUSH
3610: LD_INT 11
3612: PUSH
3613: LD_INT 12
3615: PUSH
3616: LD_INT 15
3618: PUSH
3619: LD_INT 16
3621: PUSH
3622: LD_INT 22
3624: PUSH
3625: LD_INT 23
3627: PUSH
3628: LD_INT 26
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: PUSH
3642: LD_INT 101
3644: PUSH
3645: LD_INT 102
3647: PUSH
3648: LD_INT 105
3650: PUSH
3651: LD_INT 106
3653: PUSH
3654: LD_INT 108
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: ST_TO_ADDR
3668: GO 6447
3670: LD_INT 3
3672: DOUBLE
3673: EQUAL
3674: IFTRUE 3678
3676: GO 3754
3678: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
3679: LD_ADDR_VAR 0 1
3683: PUSH
3684: LD_INT 2
3686: PUSH
3687: LD_INT 4
3689: PUSH
3690: LD_INT 5
3692: PUSH
3693: LD_INT 11
3695: PUSH
3696: LD_INT 12
3698: PUSH
3699: LD_INT 15
3701: PUSH
3702: LD_INT 16
3704: PUSH
3705: LD_INT 22
3707: PUSH
3708: LD_INT 26
3710: PUSH
3711: LD_INT 36
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: PUSH
3726: LD_INT 101
3728: PUSH
3729: LD_INT 102
3731: PUSH
3732: LD_INT 105
3734: PUSH
3735: LD_INT 106
3737: PUSH
3738: LD_INT 108
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: ST_TO_ADDR
3752: GO 6447
3754: LD_INT 4
3756: DOUBLE
3757: EQUAL
3758: IFTRUE 3762
3760: GO 3846
3762: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
3763: LD_ADDR_VAR 0 1
3767: PUSH
3768: LD_INT 2
3770: PUSH
3771: LD_INT 4
3773: PUSH
3774: LD_INT 5
3776: PUSH
3777: LD_INT 8
3779: PUSH
3780: LD_INT 11
3782: PUSH
3783: LD_INT 12
3785: PUSH
3786: LD_INT 15
3788: PUSH
3789: LD_INT 16
3791: PUSH
3792: LD_INT 22
3794: PUSH
3795: LD_INT 23
3797: PUSH
3798: LD_INT 26
3800: PUSH
3801: LD_INT 36
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: PUSH
3818: LD_INT 101
3820: PUSH
3821: LD_INT 102
3823: PUSH
3824: LD_INT 105
3826: PUSH
3827: LD_INT 106
3829: PUSH
3830: LD_INT 108
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: ST_TO_ADDR
3844: GO 6447
3846: LD_INT 5
3848: DOUBLE
3849: EQUAL
3850: IFTRUE 3854
3852: GO 3954
3854: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
3855: LD_ADDR_VAR 0 1
3859: PUSH
3860: LD_INT 2
3862: PUSH
3863: LD_INT 4
3865: PUSH
3866: LD_INT 5
3868: PUSH
3869: LD_INT 6
3871: PUSH
3872: LD_INT 8
3874: PUSH
3875: LD_INT 11
3877: PUSH
3878: LD_INT 12
3880: PUSH
3881: LD_INT 15
3883: PUSH
3884: LD_INT 16
3886: PUSH
3887: LD_INT 22
3889: PUSH
3890: LD_INT 23
3892: PUSH
3893: LD_INT 25
3895: PUSH
3896: LD_INT 26
3898: PUSH
3899: LD_INT 36
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: LD_INT 101
3920: PUSH
3921: LD_INT 102
3923: PUSH
3924: LD_INT 105
3926: PUSH
3927: LD_INT 106
3929: PUSH
3930: LD_INT 108
3932: PUSH
3933: LD_INT 109
3935: PUSH
3936: LD_INT 112
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: ST_TO_ADDR
3952: GO 6447
3954: LD_INT 6
3956: DOUBLE
3957: EQUAL
3958: IFTRUE 3962
3960: GO 4082
3962: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
3963: LD_ADDR_VAR 0 1
3967: PUSH
3968: LD_INT 2
3970: PUSH
3971: LD_INT 4
3973: PUSH
3974: LD_INT 5
3976: PUSH
3977: LD_INT 6
3979: PUSH
3980: LD_INT 8
3982: PUSH
3983: LD_INT 11
3985: PUSH
3986: LD_INT 12
3988: PUSH
3989: LD_INT 15
3991: PUSH
3992: LD_INT 16
3994: PUSH
3995: LD_INT 20
3997: PUSH
3998: LD_INT 21
4000: PUSH
4001: LD_INT 22
4003: PUSH
4004: LD_INT 23
4006: PUSH
4007: LD_INT 25
4009: PUSH
4010: LD_INT 26
4012: PUSH
4013: LD_INT 30
4015: PUSH
4016: LD_INT 31
4018: PUSH
4019: LD_INT 32
4021: PUSH
4022: LD_INT 36
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 101
4048: PUSH
4049: LD_INT 102
4051: PUSH
4052: LD_INT 105
4054: PUSH
4055: LD_INT 106
4057: PUSH
4058: LD_INT 108
4060: PUSH
4061: LD_INT 109
4063: PUSH
4064: LD_INT 112
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: ST_TO_ADDR
4080: GO 6447
4082: LD_INT 7
4084: DOUBLE
4085: EQUAL
4086: IFTRUE 4090
4088: GO 4190
4090: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4091: LD_ADDR_VAR 0 1
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: LD_INT 4
4101: PUSH
4102: LD_INT 5
4104: PUSH
4105: LD_INT 7
4107: PUSH
4108: LD_INT 11
4110: PUSH
4111: LD_INT 12
4113: PUSH
4114: LD_INT 15
4116: PUSH
4117: LD_INT 16
4119: PUSH
4120: LD_INT 20
4122: PUSH
4123: LD_INT 21
4125: PUSH
4126: LD_INT 22
4128: PUSH
4129: LD_INT 23
4131: PUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 26
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 101
4156: PUSH
4157: LD_INT 102
4159: PUSH
4160: LD_INT 103
4162: PUSH
4163: LD_INT 105
4165: PUSH
4166: LD_INT 106
4168: PUSH
4169: LD_INT 108
4171: PUSH
4172: LD_INT 112
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: ST_TO_ADDR
4188: GO 6447
4190: LD_INT 8
4192: DOUBLE
4193: EQUAL
4194: IFTRUE 4198
4196: GO 4326
4198: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
4199: LD_ADDR_VAR 0 1
4203: PUSH
4204: LD_INT 2
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: LD_INT 5
4212: PUSH
4213: LD_INT 6
4215: PUSH
4216: LD_INT 7
4218: PUSH
4219: LD_INT 8
4221: PUSH
4222: LD_INT 11
4224: PUSH
4225: LD_INT 12
4227: PUSH
4228: LD_INT 15
4230: PUSH
4231: LD_INT 16
4233: PUSH
4234: LD_INT 20
4236: PUSH
4237: LD_INT 21
4239: PUSH
4240: LD_INT 22
4242: PUSH
4243: LD_INT 23
4245: PUSH
4246: LD_INT 25
4248: PUSH
4249: LD_INT 26
4251: PUSH
4252: LD_INT 30
4254: PUSH
4255: LD_INT 31
4257: PUSH
4258: LD_INT 32
4260: PUSH
4261: LD_INT 36
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: PUSH
4286: LD_INT 101
4288: PUSH
4289: LD_INT 102
4291: PUSH
4292: LD_INT 103
4294: PUSH
4295: LD_INT 105
4297: PUSH
4298: LD_INT 106
4300: PUSH
4301: LD_INT 108
4303: PUSH
4304: LD_INT 109
4306: PUSH
4307: LD_INT 112
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: ST_TO_ADDR
4324: GO 6447
4326: LD_INT 9
4328: DOUBLE
4329: EQUAL
4330: IFTRUE 4334
4332: GO 4470
4334: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
4335: LD_ADDR_VAR 0 1
4339: PUSH
4340: LD_INT 2
4342: PUSH
4343: LD_INT 4
4345: PUSH
4346: LD_INT 5
4348: PUSH
4349: LD_INT 6
4351: PUSH
4352: LD_INT 7
4354: PUSH
4355: LD_INT 8
4357: PUSH
4358: LD_INT 11
4360: PUSH
4361: LD_INT 12
4363: PUSH
4364: LD_INT 15
4366: PUSH
4367: LD_INT 16
4369: PUSH
4370: LD_INT 20
4372: PUSH
4373: LD_INT 21
4375: PUSH
4376: LD_INT 22
4378: PUSH
4379: LD_INT 23
4381: PUSH
4382: LD_INT 25
4384: PUSH
4385: LD_INT 26
4387: PUSH
4388: LD_INT 28
4390: PUSH
4391: LD_INT 30
4393: PUSH
4394: LD_INT 31
4396: PUSH
4397: LD_INT 32
4399: PUSH
4400: LD_INT 36
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 101
4428: PUSH
4429: LD_INT 102
4431: PUSH
4432: LD_INT 103
4434: PUSH
4435: LD_INT 105
4437: PUSH
4438: LD_INT 106
4440: PUSH
4441: LD_INT 108
4443: PUSH
4444: LD_INT 109
4446: PUSH
4447: LD_INT 112
4449: PUSH
4450: LD_INT 114
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: ST_TO_ADDR
4468: GO 6447
4470: LD_INT 10
4472: DOUBLE
4473: EQUAL
4474: IFTRUE 4478
4476: GO 4662
4478: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
4479: LD_ADDR_VAR 0 1
4483: PUSH
4484: LD_INT 2
4486: PUSH
4487: LD_INT 4
4489: PUSH
4490: LD_INT 5
4492: PUSH
4493: LD_INT 6
4495: PUSH
4496: LD_INT 7
4498: PUSH
4499: LD_INT 8
4501: PUSH
4502: LD_INT 9
4504: PUSH
4505: LD_INT 10
4507: PUSH
4508: LD_INT 11
4510: PUSH
4511: LD_INT 12
4513: PUSH
4514: LD_INT 13
4516: PUSH
4517: LD_INT 14
4519: PUSH
4520: LD_INT 15
4522: PUSH
4523: LD_INT 16
4525: PUSH
4526: LD_INT 17
4528: PUSH
4529: LD_INT 18
4531: PUSH
4532: LD_INT 19
4534: PUSH
4535: LD_INT 20
4537: PUSH
4538: LD_INT 21
4540: PUSH
4541: LD_INT 22
4543: PUSH
4544: LD_INT 23
4546: PUSH
4547: LD_INT 24
4549: PUSH
4550: LD_INT 25
4552: PUSH
4553: LD_INT 26
4555: PUSH
4556: LD_INT 28
4558: PUSH
4559: LD_INT 30
4561: PUSH
4562: LD_INT 31
4564: PUSH
4565: LD_INT 32
4567: PUSH
4568: LD_INT 36
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 101
4604: PUSH
4605: LD_INT 102
4607: PUSH
4608: LD_INT 103
4610: PUSH
4611: LD_INT 104
4613: PUSH
4614: LD_INT 105
4616: PUSH
4617: LD_INT 106
4619: PUSH
4620: LD_INT 107
4622: PUSH
4623: LD_INT 108
4625: PUSH
4626: LD_INT 109
4628: PUSH
4629: LD_INT 110
4631: PUSH
4632: LD_INT 111
4634: PUSH
4635: LD_INT 112
4637: PUSH
4638: LD_INT 114
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: ST_TO_ADDR
4660: GO 6447
4662: LD_INT 11
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4862
4670: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: LD_INT 2
4678: PUSH
4679: LD_INT 3
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: LD_INT 5
4687: PUSH
4688: LD_INT 6
4690: PUSH
4691: LD_INT 7
4693: PUSH
4694: LD_INT 8
4696: PUSH
4697: LD_INT 9
4699: PUSH
4700: LD_INT 10
4702: PUSH
4703: LD_INT 11
4705: PUSH
4706: LD_INT 12
4708: PUSH
4709: LD_INT 13
4711: PUSH
4712: LD_INT 14
4714: PUSH
4715: LD_INT 15
4717: PUSH
4718: LD_INT 16
4720: PUSH
4721: LD_INT 17
4723: PUSH
4724: LD_INT 18
4726: PUSH
4727: LD_INT 19
4729: PUSH
4730: LD_INT 20
4732: PUSH
4733: LD_INT 21
4735: PUSH
4736: LD_INT 22
4738: PUSH
4739: LD_INT 23
4741: PUSH
4742: LD_INT 24
4744: PUSH
4745: LD_INT 25
4747: PUSH
4748: LD_INT 26
4750: PUSH
4751: LD_INT 28
4753: PUSH
4754: LD_INT 30
4756: PUSH
4757: LD_INT 31
4759: PUSH
4760: LD_INT 32
4762: PUSH
4763: LD_INT 34
4765: PUSH
4766: LD_INT 36
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 101
4804: PUSH
4805: LD_INT 102
4807: PUSH
4808: LD_INT 103
4810: PUSH
4811: LD_INT 104
4813: PUSH
4814: LD_INT 105
4816: PUSH
4817: LD_INT 106
4819: PUSH
4820: LD_INT 107
4822: PUSH
4823: LD_INT 108
4825: PUSH
4826: LD_INT 109
4828: PUSH
4829: LD_INT 110
4831: PUSH
4832: LD_INT 111
4834: PUSH
4835: LD_INT 112
4837: PUSH
4838: LD_INT 114
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: ST_TO_ADDR
4860: GO 6447
4862: LD_INT 12
4864: DOUBLE
4865: EQUAL
4866: IFTRUE 4870
4868: GO 5078
4870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_INT 1
4878: PUSH
4879: LD_INT 2
4881: PUSH
4882: LD_INT 3
4884: PUSH
4885: LD_INT 4
4887: PUSH
4888: LD_INT 5
4890: PUSH
4891: LD_INT 6
4893: PUSH
4894: LD_INT 7
4896: PUSH
4897: LD_INT 8
4899: PUSH
4900: LD_INT 9
4902: PUSH
4903: LD_INT 10
4905: PUSH
4906: LD_INT 11
4908: PUSH
4909: LD_INT 12
4911: PUSH
4912: LD_INT 13
4914: PUSH
4915: LD_INT 14
4917: PUSH
4918: LD_INT 15
4920: PUSH
4921: LD_INT 16
4923: PUSH
4924: LD_INT 17
4926: PUSH
4927: LD_INT 18
4929: PUSH
4930: LD_INT 19
4932: PUSH
4933: LD_INT 20
4935: PUSH
4936: LD_INT 21
4938: PUSH
4939: LD_INT 22
4941: PUSH
4942: LD_INT 23
4944: PUSH
4945: LD_INT 24
4947: PUSH
4948: LD_INT 25
4950: PUSH
4951: LD_INT 26
4953: PUSH
4954: LD_INT 27
4956: PUSH
4957: LD_INT 28
4959: PUSH
4960: LD_INT 30
4962: PUSH
4963: LD_INT 31
4965: PUSH
4966: LD_INT 32
4968: PUSH
4969: LD_INT 33
4971: PUSH
4972: LD_INT 34
4974: PUSH
4975: LD_INT 36
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 101
5016: PUSH
5017: LD_INT 102
5019: PUSH
5020: LD_INT 103
5022: PUSH
5023: LD_INT 104
5025: PUSH
5026: LD_INT 105
5028: PUSH
5029: LD_INT 106
5031: PUSH
5032: LD_INT 107
5034: PUSH
5035: LD_INT 108
5037: PUSH
5038: LD_INT 109
5040: PUSH
5041: LD_INT 110
5043: PUSH
5044: LD_INT 111
5046: PUSH
5047: LD_INT 112
5049: PUSH
5050: LD_INT 113
5052: PUSH
5053: LD_INT 114
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: ST_TO_ADDR
5076: GO 6447
5078: LD_INT 13
5080: DOUBLE
5081: EQUAL
5082: IFTRUE 5086
5084: GO 5282
5086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5087: LD_ADDR_VAR 0 1
5091: PUSH
5092: LD_INT 1
5094: PUSH
5095: LD_INT 2
5097: PUSH
5098: LD_INT 3
5100: PUSH
5101: LD_INT 4
5103: PUSH
5104: LD_INT 5
5106: PUSH
5107: LD_INT 8
5109: PUSH
5110: LD_INT 9
5112: PUSH
5113: LD_INT 10
5115: PUSH
5116: LD_INT 11
5118: PUSH
5119: LD_INT 12
5121: PUSH
5122: LD_INT 14
5124: PUSH
5125: LD_INT 15
5127: PUSH
5128: LD_INT 16
5130: PUSH
5131: LD_INT 17
5133: PUSH
5134: LD_INT 18
5136: PUSH
5137: LD_INT 19
5139: PUSH
5140: LD_INT 20
5142: PUSH
5143: LD_INT 21
5145: PUSH
5146: LD_INT 22
5148: PUSH
5149: LD_INT 23
5151: PUSH
5152: LD_INT 24
5154: PUSH
5155: LD_INT 25
5157: PUSH
5158: LD_INT 26
5160: PUSH
5161: LD_INT 27
5163: PUSH
5164: LD_INT 28
5166: PUSH
5167: LD_INT 30
5169: PUSH
5170: LD_INT 31
5172: PUSH
5173: LD_INT 32
5175: PUSH
5176: LD_INT 33
5178: PUSH
5179: LD_INT 34
5181: PUSH
5182: LD_INT 36
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 101
5220: PUSH
5221: LD_INT 102
5223: PUSH
5224: LD_INT 103
5226: PUSH
5227: LD_INT 104
5229: PUSH
5230: LD_INT 105
5232: PUSH
5233: LD_INT 106
5235: PUSH
5236: LD_INT 107
5238: PUSH
5239: LD_INT 108
5241: PUSH
5242: LD_INT 109
5244: PUSH
5245: LD_INT 110
5247: PUSH
5248: LD_INT 111
5250: PUSH
5251: LD_INT 112
5253: PUSH
5254: LD_INT 113
5256: PUSH
5257: LD_INT 114
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: ST_TO_ADDR
5280: GO 6447
5282: LD_INT 14
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5502
5290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
5291: LD_ADDR_VAR 0 1
5295: PUSH
5296: LD_INT 1
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: LD_INT 4
5307: PUSH
5308: LD_INT 5
5310: PUSH
5311: LD_INT 6
5313: PUSH
5314: LD_INT 7
5316: PUSH
5317: LD_INT 8
5319: PUSH
5320: LD_INT 9
5322: PUSH
5323: LD_INT 10
5325: PUSH
5326: LD_INT 11
5328: PUSH
5329: LD_INT 12
5331: PUSH
5332: LD_INT 13
5334: PUSH
5335: LD_INT 14
5337: PUSH
5338: LD_INT 15
5340: PUSH
5341: LD_INT 16
5343: PUSH
5344: LD_INT 17
5346: PUSH
5347: LD_INT 18
5349: PUSH
5350: LD_INT 19
5352: PUSH
5353: LD_INT 20
5355: PUSH
5356: LD_INT 21
5358: PUSH
5359: LD_INT 22
5361: PUSH
5362: LD_INT 23
5364: PUSH
5365: LD_INT 24
5367: PUSH
5368: LD_INT 25
5370: PUSH
5371: LD_INT 26
5373: PUSH
5374: LD_INT 27
5376: PUSH
5377: LD_INT 28
5379: PUSH
5380: LD_INT 29
5382: PUSH
5383: LD_INT 30
5385: PUSH
5386: LD_INT 31
5388: PUSH
5389: LD_INT 32
5391: PUSH
5392: LD_INT 33
5394: PUSH
5395: LD_INT 34
5397: PUSH
5398: LD_INT 36
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 101
5440: PUSH
5441: LD_INT 102
5443: PUSH
5444: LD_INT 103
5446: PUSH
5447: LD_INT 104
5449: PUSH
5450: LD_INT 105
5452: PUSH
5453: LD_INT 106
5455: PUSH
5456: LD_INT 107
5458: PUSH
5459: LD_INT 108
5461: PUSH
5462: LD_INT 109
5464: PUSH
5465: LD_INT 110
5467: PUSH
5468: LD_INT 111
5470: PUSH
5471: LD_INT 112
5473: PUSH
5474: LD_INT 113
5476: PUSH
5477: LD_INT 114
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: ST_TO_ADDR
5500: GO 6447
5502: LD_INT 15
5504: DOUBLE
5505: EQUAL
5506: IFTRUE 5510
5508: GO 5722
5510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: LD_INT 2
5521: PUSH
5522: LD_INT 3
5524: PUSH
5525: LD_INT 4
5527: PUSH
5528: LD_INT 5
5530: PUSH
5531: LD_INT 6
5533: PUSH
5534: LD_INT 7
5536: PUSH
5537: LD_INT 8
5539: PUSH
5540: LD_INT 9
5542: PUSH
5543: LD_INT 10
5545: PUSH
5546: LD_INT 11
5548: PUSH
5549: LD_INT 12
5551: PUSH
5552: LD_INT 13
5554: PUSH
5555: LD_INT 14
5557: PUSH
5558: LD_INT 15
5560: PUSH
5561: LD_INT 16
5563: PUSH
5564: LD_INT 17
5566: PUSH
5567: LD_INT 18
5569: PUSH
5570: LD_INT 19
5572: PUSH
5573: LD_INT 20
5575: PUSH
5576: LD_INT 21
5578: PUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 23
5584: PUSH
5585: LD_INT 24
5587: PUSH
5588: LD_INT 25
5590: PUSH
5591: LD_INT 26
5593: PUSH
5594: LD_INT 27
5596: PUSH
5597: LD_INT 28
5599: PUSH
5600: LD_INT 29
5602: PUSH
5603: LD_INT 30
5605: PUSH
5606: LD_INT 31
5608: PUSH
5609: LD_INT 32
5611: PUSH
5612: LD_INT 33
5614: PUSH
5615: LD_INT 34
5617: PUSH
5618: LD_INT 36
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: LD_INT 101
5660: PUSH
5661: LD_INT 102
5663: PUSH
5664: LD_INT 103
5666: PUSH
5667: LD_INT 104
5669: PUSH
5670: LD_INT 105
5672: PUSH
5673: LD_INT 106
5675: PUSH
5676: LD_INT 107
5678: PUSH
5679: LD_INT 108
5681: PUSH
5682: LD_INT 109
5684: PUSH
5685: LD_INT 110
5687: PUSH
5688: LD_INT 111
5690: PUSH
5691: LD_INT 112
5693: PUSH
5694: LD_INT 113
5696: PUSH
5697: LD_INT 114
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: ST_TO_ADDR
5720: GO 6447
5722: LD_INT 16
5724: DOUBLE
5725: EQUAL
5726: IFTRUE 5730
5728: GO 5854
5730: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
5731: LD_ADDR_VAR 0 1
5735: PUSH
5736: LD_INT 2
5738: PUSH
5739: LD_INT 4
5741: PUSH
5742: LD_INT 5
5744: PUSH
5745: LD_INT 7
5747: PUSH
5748: LD_INT 11
5750: PUSH
5751: LD_INT 12
5753: PUSH
5754: LD_INT 15
5756: PUSH
5757: LD_INT 16
5759: PUSH
5760: LD_INT 20
5762: PUSH
5763: LD_INT 21
5765: PUSH
5766: LD_INT 22
5768: PUSH
5769: LD_INT 23
5771: PUSH
5772: LD_INT 25
5774: PUSH
5775: LD_INT 26
5777: PUSH
5778: LD_INT 30
5780: PUSH
5781: LD_INT 31
5783: PUSH
5784: LD_INT 32
5786: PUSH
5787: LD_INT 33
5789: PUSH
5790: LD_INT 34
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 101
5816: PUSH
5817: LD_INT 102
5819: PUSH
5820: LD_INT 103
5822: PUSH
5823: LD_INT 106
5825: PUSH
5826: LD_INT 108
5828: PUSH
5829: LD_INT 112
5831: PUSH
5832: LD_INT 113
5834: PUSH
5835: LD_INT 114
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: ST_TO_ADDR
5852: GO 6447
5854: LD_INT 17
5856: DOUBLE
5857: EQUAL
5858: IFTRUE 5862
5860: GO 6074
5862: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
5863: LD_ADDR_VAR 0 1
5867: PUSH
5868: LD_INT 1
5870: PUSH
5871: LD_INT 2
5873: PUSH
5874: LD_INT 3
5876: PUSH
5877: LD_INT 4
5879: PUSH
5880: LD_INT 5
5882: PUSH
5883: LD_INT 6
5885: PUSH
5886: LD_INT 7
5888: PUSH
5889: LD_INT 8
5891: PUSH
5892: LD_INT 9
5894: PUSH
5895: LD_INT 10
5897: PUSH
5898: LD_INT 11
5900: PUSH
5901: LD_INT 12
5903: PUSH
5904: LD_INT 13
5906: PUSH
5907: LD_INT 14
5909: PUSH
5910: LD_INT 15
5912: PUSH
5913: LD_INT 16
5915: PUSH
5916: LD_INT 17
5918: PUSH
5919: LD_INT 18
5921: PUSH
5922: LD_INT 19
5924: PUSH
5925: LD_INT 20
5927: PUSH
5928: LD_INT 21
5930: PUSH
5931: LD_INT 22
5933: PUSH
5934: LD_INT 23
5936: PUSH
5937: LD_INT 24
5939: PUSH
5940: LD_INT 25
5942: PUSH
5943: LD_INT 26
5945: PUSH
5946: LD_INT 27
5948: PUSH
5949: LD_INT 28
5951: PUSH
5952: LD_INT 29
5954: PUSH
5955: LD_INT 30
5957: PUSH
5958: LD_INT 31
5960: PUSH
5961: LD_INT 32
5963: PUSH
5964: LD_INT 33
5966: PUSH
5967: LD_INT 34
5969: PUSH
5970: LD_INT 36
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: PUSH
6010: LD_INT 101
6012: PUSH
6013: LD_INT 102
6015: PUSH
6016: LD_INT 103
6018: PUSH
6019: LD_INT 104
6021: PUSH
6022: LD_INT 105
6024: PUSH
6025: LD_INT 106
6027: PUSH
6028: LD_INT 107
6030: PUSH
6031: LD_INT 108
6033: PUSH
6034: LD_INT 109
6036: PUSH
6037: LD_INT 110
6039: PUSH
6040: LD_INT 111
6042: PUSH
6043: LD_INT 112
6045: PUSH
6046: LD_INT 113
6048: PUSH
6049: LD_INT 114
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: ST_TO_ADDR
6072: GO 6447
6074: LD_INT 18
6076: DOUBLE
6077: EQUAL
6078: IFTRUE 6082
6080: GO 6218
6082: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6083: LD_ADDR_VAR 0 1
6087: PUSH
6088: LD_INT 2
6090: PUSH
6091: LD_INT 4
6093: PUSH
6094: LD_INT 5
6096: PUSH
6097: LD_INT 7
6099: PUSH
6100: LD_INT 11
6102: PUSH
6103: LD_INT 12
6105: PUSH
6106: LD_INT 15
6108: PUSH
6109: LD_INT 16
6111: PUSH
6112: LD_INT 20
6114: PUSH
6115: LD_INT 21
6117: PUSH
6118: LD_INT 22
6120: PUSH
6121: LD_INT 23
6123: PUSH
6124: LD_INT 25
6126: PUSH
6127: LD_INT 26
6129: PUSH
6130: LD_INT 30
6132: PUSH
6133: LD_INT 31
6135: PUSH
6136: LD_INT 32
6138: PUSH
6139: LD_INT 33
6141: PUSH
6142: LD_INT 34
6144: PUSH
6145: LD_INT 35
6147: PUSH
6148: LD_INT 36
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 101
6176: PUSH
6177: LD_INT 102
6179: PUSH
6180: LD_INT 103
6182: PUSH
6183: LD_INT 106
6185: PUSH
6186: LD_INT 108
6188: PUSH
6189: LD_INT 112
6191: PUSH
6192: LD_INT 113
6194: PUSH
6195: LD_INT 114
6197: PUSH
6198: LD_INT 115
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: ST_TO_ADDR
6216: GO 6447
6218: LD_INT 19
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6446
6226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
6227: LD_ADDR_VAR 0 1
6231: PUSH
6232: LD_INT 1
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: LD_INT 3
6240: PUSH
6241: LD_INT 4
6243: PUSH
6244: LD_INT 5
6246: PUSH
6247: LD_INT 6
6249: PUSH
6250: LD_INT 7
6252: PUSH
6253: LD_INT 8
6255: PUSH
6256: LD_INT 9
6258: PUSH
6259: LD_INT 10
6261: PUSH
6262: LD_INT 11
6264: PUSH
6265: LD_INT 12
6267: PUSH
6268: LD_INT 13
6270: PUSH
6271: LD_INT 14
6273: PUSH
6274: LD_INT 15
6276: PUSH
6277: LD_INT 16
6279: PUSH
6280: LD_INT 17
6282: PUSH
6283: LD_INT 18
6285: PUSH
6286: LD_INT 19
6288: PUSH
6289: LD_INT 20
6291: PUSH
6292: LD_INT 21
6294: PUSH
6295: LD_INT 22
6297: PUSH
6298: LD_INT 23
6300: PUSH
6301: LD_INT 24
6303: PUSH
6304: LD_INT 25
6306: PUSH
6307: LD_INT 26
6309: PUSH
6310: LD_INT 27
6312: PUSH
6313: LD_INT 28
6315: PUSH
6316: LD_INT 29
6318: PUSH
6319: LD_INT 30
6321: PUSH
6322: LD_INT 31
6324: PUSH
6325: LD_INT 32
6327: PUSH
6328: LD_INT 33
6330: PUSH
6331: LD_INT 34
6333: PUSH
6334: LD_INT 35
6336: PUSH
6337: LD_INT 36
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 101
6380: PUSH
6381: LD_INT 102
6383: PUSH
6384: LD_INT 103
6386: PUSH
6387: LD_INT 104
6389: PUSH
6390: LD_INT 105
6392: PUSH
6393: LD_INT 106
6395: PUSH
6396: LD_INT 107
6398: PUSH
6399: LD_INT 108
6401: PUSH
6402: LD_INT 109
6404: PUSH
6405: LD_INT 110
6407: PUSH
6408: LD_INT 111
6410: PUSH
6411: LD_INT 112
6413: PUSH
6414: LD_INT 113
6416: PUSH
6417: LD_INT 114
6419: PUSH
6420: LD_INT 115
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: ST_TO_ADDR
6444: GO 6447
6446: POP
// end else
6447: GO 6666
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
6449: LD_ADDR_VAR 0 1
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: LD_INT 2
6459: PUSH
6460: LD_INT 3
6462: PUSH
6463: LD_INT 4
6465: PUSH
6466: LD_INT 5
6468: PUSH
6469: LD_INT 6
6471: PUSH
6472: LD_INT 7
6474: PUSH
6475: LD_INT 8
6477: PUSH
6478: LD_INT 9
6480: PUSH
6481: LD_INT 10
6483: PUSH
6484: LD_INT 11
6486: PUSH
6487: LD_INT 12
6489: PUSH
6490: LD_INT 13
6492: PUSH
6493: LD_INT 14
6495: PUSH
6496: LD_INT 15
6498: PUSH
6499: LD_INT 16
6501: PUSH
6502: LD_INT 17
6504: PUSH
6505: LD_INT 18
6507: PUSH
6508: LD_INT 19
6510: PUSH
6511: LD_INT 20
6513: PUSH
6514: LD_INT 21
6516: PUSH
6517: LD_INT 22
6519: PUSH
6520: LD_INT 23
6522: PUSH
6523: LD_INT 24
6525: PUSH
6526: LD_INT 25
6528: PUSH
6529: LD_INT 26
6531: PUSH
6532: LD_INT 27
6534: PUSH
6535: LD_INT 28
6537: PUSH
6538: LD_INT 29
6540: PUSH
6541: LD_INT 30
6543: PUSH
6544: LD_INT 31
6546: PUSH
6547: LD_INT 32
6549: PUSH
6550: LD_INT 33
6552: PUSH
6553: LD_INT 34
6555: PUSH
6556: LD_INT 35
6558: PUSH
6559: LD_INT 36
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 101
6602: PUSH
6603: LD_INT 102
6605: PUSH
6606: LD_INT 103
6608: PUSH
6609: LD_INT 104
6611: PUSH
6612: LD_INT 105
6614: PUSH
6615: LD_INT 106
6617: PUSH
6618: LD_INT 107
6620: PUSH
6621: LD_INT 108
6623: PUSH
6624: LD_INT 109
6626: PUSH
6627: LD_INT 110
6629: PUSH
6630: LD_INT 111
6632: PUSH
6633: LD_INT 112
6635: PUSH
6636: LD_INT 113
6638: PUSH
6639: LD_INT 114
6641: PUSH
6642: LD_INT 115
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: ST_TO_ADDR
// if result then
6666: LD_VAR 0 1
6670: IFFALSE 6959
// begin normal :=  ;
6672: LD_ADDR_VAR 0 3
6676: PUSH
6677: LD_STRING 
6679: ST_TO_ADDR
// hardcore :=  ;
6680: LD_ADDR_VAR 0 4
6684: PUSH
6685: LD_STRING 
6687: ST_TO_ADDR
// for i = 1 to normalCounter do
6688: LD_ADDR_VAR 0 5
6692: PUSH
6693: DOUBLE
6694: LD_INT 1
6696: DEC
6697: ST_TO_ADDR
6698: LD_EXP 23
6702: PUSH
6703: FOR_TO
6704: IFFALSE 6805
// begin tmp := 0 ;
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: LD_STRING 0
6713: ST_TO_ADDR
// if result [ 1 ] then
6714: LD_VAR 0 1
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: IFFALSE 6787
// if result [ 1 ] [ 1 ] = i then
6724: LD_VAR 0 1
6728: PUSH
6729: LD_INT 1
6731: ARRAY
6732: PUSH
6733: LD_INT 1
6735: ARRAY
6736: PUSH
6737: LD_VAR 0 5
6741: EQUAL
6742: IFFALSE 6787
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6744: LD_ADDR_VAR 0 1
6748: PUSH
6749: LD_VAR 0 1
6753: PPUSH
6754: LD_INT 1
6756: PPUSH
6757: LD_VAR 0 1
6761: PUSH
6762: LD_INT 1
6764: ARRAY
6765: PPUSH
6766: LD_INT 1
6768: PPUSH
6769: CALL_OW 3
6773: PPUSH
6774: CALL_OW 1
6778: ST_TO_ADDR
// tmp := 1 ;
6779: LD_ADDR_VAR 0 2
6783: PUSH
6784: LD_STRING 1
6786: ST_TO_ADDR
// end ; normal := normal & tmp ;
6787: LD_ADDR_VAR 0 3
6791: PUSH
6792: LD_VAR 0 3
6796: PUSH
6797: LD_VAR 0 2
6801: STR
6802: ST_TO_ADDR
// end ;
6803: GO 6703
6805: POP
6806: POP
// for i = 1 to hardcoreCounter do
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: DOUBLE
6813: LD_INT 1
6815: DEC
6816: ST_TO_ADDR
6817: LD_EXP 24
6821: PUSH
6822: FOR_TO
6823: IFFALSE 6928
// begin tmp := 0 ;
6825: LD_ADDR_VAR 0 2
6829: PUSH
6830: LD_STRING 0
6832: ST_TO_ADDR
// if result [ 2 ] then
6833: LD_VAR 0 1
6837: PUSH
6838: LD_INT 2
6840: ARRAY
6841: IFFALSE 6910
// if result [ 2 ] [ 1 ] = 100 + i then
6843: LD_VAR 0 1
6847: PUSH
6848: LD_INT 2
6850: ARRAY
6851: PUSH
6852: LD_INT 1
6854: ARRAY
6855: PUSH
6856: LD_INT 100
6858: PUSH
6859: LD_VAR 0 5
6863: PLUS
6864: EQUAL
6865: IFFALSE 6910
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6867: LD_ADDR_VAR 0 1
6871: PUSH
6872: LD_VAR 0 1
6876: PPUSH
6877: LD_INT 2
6879: PPUSH
6880: LD_VAR 0 1
6884: PUSH
6885: LD_INT 2
6887: ARRAY
6888: PPUSH
6889: LD_INT 1
6891: PPUSH
6892: CALL_OW 3
6896: PPUSH
6897: CALL_OW 1
6901: ST_TO_ADDR
// tmp := 1 ;
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: LD_STRING 1
6909: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6910: LD_ADDR_VAR 0 4
6914: PUSH
6915: LD_VAR 0 4
6919: PUSH
6920: LD_VAR 0 2
6924: STR
6925: ST_TO_ADDR
// end ;
6926: GO 6822
6928: POP
6929: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
6930: LD_STRING getStreamItemsFromMission("
6932: PUSH
6933: LD_VAR 0 3
6937: STR
6938: PUSH
6939: LD_STRING ","
6941: STR
6942: PUSH
6943: LD_VAR 0 4
6947: STR
6948: PUSH
6949: LD_STRING ")
6951: STR
6952: PPUSH
6953: CALL_OW 559
// end else
6957: GO 6966
// ToLua ( getStreamItemsFromMission("","") ) ;
6959: LD_STRING getStreamItemsFromMission("","")
6961: PPUSH
6962: CALL_OW 559
// end ;
6966: LD_VAR 0 1
6970: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6971: LD_EXP 22
6975: PUSH
6976: LD_EXP 27
6980: AND
6981: IFFALSE 7105
6983: GO 6985
6985: DISABLE
6986: LD_INT 0
6988: PPUSH
6989: PPUSH
// begin enable ;
6990: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6991: LD_ADDR_VAR 0 2
6995: PUSH
6996: LD_INT 22
6998: PUSH
6999: LD_OWVAR 2
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 2
7010: PUSH
7011: LD_INT 34
7013: PUSH
7014: LD_INT 7
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: LD_INT 34
7023: PUSH
7024: LD_INT 45
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 34
7033: PUSH
7034: LD_INT 28
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 34
7043: PUSH
7044: LD_INT 47
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PPUSH
7062: CALL_OW 69
7066: ST_TO_ADDR
// if not tmp then
7067: LD_VAR 0 2
7071: NOT
7072: IFFALSE 7076
// exit ;
7074: GO 7105
// for i in tmp do
7076: LD_ADDR_VAR 0 1
7080: PUSH
7081: LD_VAR 0 2
7085: PUSH
7086: FOR_IN
7087: IFFALSE 7103
// begin SetLives ( i , 0 ) ;
7089: LD_VAR 0 1
7093: PPUSH
7094: LD_INT 0
7096: PPUSH
7097: CALL_OW 234
// end ;
7101: GO 7086
7103: POP
7104: POP
// end ;
7105: PPOPN 2
7107: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7108: LD_EXP 22
7112: PUSH
7113: LD_EXP 28
7117: AND
7118: IFFALSE 7202
7120: GO 7122
7122: DISABLE
7123: LD_INT 0
7125: PPUSH
7126: PPUSH
// begin enable ;
7127: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7128: LD_ADDR_VAR 0 2
7132: PUSH
7133: LD_INT 22
7135: PUSH
7136: LD_OWVAR 2
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 32
7147: PUSH
7148: LD_INT 3
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 69
7163: ST_TO_ADDR
// if not tmp then
7164: LD_VAR 0 2
7168: NOT
7169: IFFALSE 7173
// exit ;
7171: GO 7202
// for i in tmp do
7173: LD_ADDR_VAR 0 1
7177: PUSH
7178: LD_VAR 0 2
7182: PUSH
7183: FOR_IN
7184: IFFALSE 7200
// begin SetLives ( i , 0 ) ;
7186: LD_VAR 0 1
7190: PPUSH
7191: LD_INT 0
7193: PPUSH
7194: CALL_OW 234
// end ;
7198: GO 7183
7200: POP
7201: POP
// end ;
7202: PPOPN 2
7204: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7205: LD_EXP 22
7209: PUSH
7210: LD_EXP 25
7214: AND
7215: IFFALSE 7308
7217: GO 7219
7219: DISABLE
7220: LD_INT 0
7222: PPUSH
// begin enable ;
7223: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7224: LD_ADDR_VAR 0 1
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_OWVAR 2
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 2
7243: PUSH
7244: LD_INT 25
7246: PUSH
7247: LD_INT 5
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 9
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 25
7266: PUSH
7267: LD_INT 8
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PPUSH
7284: CALL_OW 69
7288: PUSH
7289: FOR_IN
7290: IFFALSE 7306
// begin SetClass ( i , 1 ) ;
7292: LD_VAR 0 1
7296: PPUSH
7297: LD_INT 1
7299: PPUSH
7300: CALL_OW 336
// end ;
7304: GO 7289
7306: POP
7307: POP
// end ;
7308: PPOPN 1
7310: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7311: LD_EXP 22
7315: PUSH
7316: LD_EXP 26
7320: AND
7321: PUSH
7322: LD_OWVAR 65
7326: PUSH
7327: LD_INT 7
7329: LESS
7330: AND
7331: IFFALSE 7345
7333: GO 7335
7335: DISABLE
// begin enable ;
7336: ENABLE
// game_speed := 7 ;
7337: LD_ADDR_OWVAR 65
7341: PUSH
7342: LD_INT 7
7344: ST_TO_ADDR
// end ;
7345: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7346: LD_EXP 22
7350: PUSH
7351: LD_EXP 29
7355: AND
7356: IFFALSE 7558
7358: GO 7360
7360: DISABLE
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
7365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 81
7373: PUSH
7374: LD_OWVAR 2
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 21
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PPUSH
7397: CALL_OW 69
7401: ST_TO_ADDR
// if not tmp then
7402: LD_VAR 0 3
7406: NOT
7407: IFFALSE 7411
// exit ;
7409: GO 7558
// if tmp > 5 then
7411: LD_VAR 0 3
7415: PUSH
7416: LD_INT 5
7418: GREATER
7419: IFFALSE 7431
// k := 5 else
7421: LD_ADDR_VAR 0 2
7425: PUSH
7426: LD_INT 5
7428: ST_TO_ADDR
7429: GO 7441
// k := tmp ;
7431: LD_ADDR_VAR 0 2
7435: PUSH
7436: LD_VAR 0 3
7440: ST_TO_ADDR
// for i := 1 to k do
7441: LD_ADDR_VAR 0 1
7445: PUSH
7446: DOUBLE
7447: LD_INT 1
7449: DEC
7450: ST_TO_ADDR
7451: LD_VAR 0 2
7455: PUSH
7456: FOR_TO
7457: IFFALSE 7556
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7459: LD_VAR 0 3
7463: PUSH
7464: LD_VAR 0 1
7468: ARRAY
7469: PPUSH
7470: LD_VAR 0 1
7474: PUSH
7475: LD_INT 4
7477: MOD
7478: PUSH
7479: LD_INT 1
7481: PLUS
7482: PPUSH
7483: CALL_OW 259
7487: PUSH
7488: LD_INT 10
7490: LESS
7491: IFFALSE 7554
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7493: LD_VAR 0 3
7497: PUSH
7498: LD_VAR 0 1
7502: ARRAY
7503: PPUSH
7504: LD_VAR 0 1
7508: PUSH
7509: LD_INT 4
7511: MOD
7512: PUSH
7513: LD_INT 1
7515: PLUS
7516: PPUSH
7517: LD_VAR 0 3
7521: PUSH
7522: LD_VAR 0 1
7526: ARRAY
7527: PPUSH
7528: LD_VAR 0 1
7532: PUSH
7533: LD_INT 4
7535: MOD
7536: PUSH
7537: LD_INT 1
7539: PLUS
7540: PPUSH
7541: CALL_OW 259
7545: PUSH
7546: LD_INT 1
7548: PLUS
7549: PPUSH
7550: CALL_OW 237
7554: GO 7456
7556: POP
7557: POP
// end ;
7558: PPOPN 3
7560: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7561: LD_EXP 22
7565: PUSH
7566: LD_EXP 30
7570: AND
7571: IFFALSE 7591
7573: GO 7575
7575: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7576: LD_INT 4
7578: PPUSH
7579: LD_OWVAR 2
7583: PPUSH
7584: LD_INT 0
7586: PPUSH
7587: CALL_OW 324
7591: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7592: LD_EXP 22
7596: PUSH
7597: LD_EXP 59
7601: AND
7602: IFFALSE 7622
7604: GO 7606
7606: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7607: LD_INT 19
7609: PPUSH
7610: LD_OWVAR 2
7614: PPUSH
7615: LD_INT 0
7617: PPUSH
7618: CALL_OW 324
7622: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7623: LD_EXP 22
7627: PUSH
7628: LD_EXP 31
7632: AND
7633: IFFALSE 7735
7635: GO 7637
7637: DISABLE
7638: LD_INT 0
7640: PPUSH
7641: PPUSH
// begin enable ;
7642: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7643: LD_ADDR_VAR 0 2
7647: PUSH
7648: LD_INT 22
7650: PUSH
7651: LD_OWVAR 2
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: LD_INT 2
7662: PUSH
7663: LD_INT 34
7665: PUSH
7666: LD_INT 11
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: LD_INT 34
7675: PUSH
7676: LD_INT 30
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: LIST
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 69
7696: ST_TO_ADDR
// if not tmp then
7697: LD_VAR 0 2
7701: NOT
7702: IFFALSE 7706
// exit ;
7704: GO 7735
// for i in tmp do
7706: LD_ADDR_VAR 0 1
7710: PUSH
7711: LD_VAR 0 2
7715: PUSH
7716: FOR_IN
7717: IFFALSE 7733
// begin SetLives ( i , 0 ) ;
7719: LD_VAR 0 1
7723: PPUSH
7724: LD_INT 0
7726: PPUSH
7727: CALL_OW 234
// end ;
7731: GO 7716
7733: POP
7734: POP
// end ;
7735: PPOPN 2
7737: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7738: LD_EXP 22
7742: PUSH
7743: LD_EXP 32
7747: AND
7748: IFFALSE 7768
7750: GO 7752
7752: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7753: LD_INT 32
7755: PPUSH
7756: LD_OWVAR 2
7760: PPUSH
7761: LD_INT 0
7763: PPUSH
7764: CALL_OW 324
7768: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7769: LD_EXP 22
7773: PUSH
7774: LD_EXP 33
7778: AND
7779: IFFALSE 7960
7781: GO 7783
7783: DISABLE
7784: LD_INT 0
7786: PPUSH
7787: PPUSH
7788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7789: LD_ADDR_VAR 0 2
7793: PUSH
7794: LD_INT 22
7796: PUSH
7797: LD_OWVAR 2
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: LD_INT 33
7808: PUSH
7809: LD_INT 3
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PPUSH
7820: CALL_OW 69
7824: ST_TO_ADDR
// if not tmp then
7825: LD_VAR 0 2
7829: NOT
7830: IFFALSE 7834
// exit ;
7832: GO 7960
// side := 0 ;
7834: LD_ADDR_VAR 0 3
7838: PUSH
7839: LD_INT 0
7841: ST_TO_ADDR
// for i := 1 to 8 do
7842: LD_ADDR_VAR 0 1
7846: PUSH
7847: DOUBLE
7848: LD_INT 1
7850: DEC
7851: ST_TO_ADDR
7852: LD_INT 8
7854: PUSH
7855: FOR_TO
7856: IFFALSE 7904
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7858: LD_OWVAR 2
7862: PUSH
7863: LD_VAR 0 1
7867: NONEQUAL
7868: PUSH
7869: LD_OWVAR 2
7873: PPUSH
7874: LD_VAR 0 1
7878: PPUSH
7879: CALL_OW 81
7883: PUSH
7884: LD_INT 2
7886: EQUAL
7887: AND
7888: IFFALSE 7902
// begin side := i ;
7890: LD_ADDR_VAR 0 3
7894: PUSH
7895: LD_VAR 0 1
7899: ST_TO_ADDR
// break ;
7900: GO 7904
// end ;
7902: GO 7855
7904: POP
7905: POP
// if not side then
7906: LD_VAR 0 3
7910: NOT
7911: IFFALSE 7915
// exit ;
7913: GO 7960
// for i := 1 to tmp do
7915: LD_ADDR_VAR 0 1
7919: PUSH
7920: DOUBLE
7921: LD_INT 1
7923: DEC
7924: ST_TO_ADDR
7925: LD_VAR 0 2
7929: PUSH
7930: FOR_TO
7931: IFFALSE 7958
// if Prob ( 60 ) then
7933: LD_INT 60
7935: PPUSH
7936: CALL_OW 13
7940: IFFALSE 7956
// SetSide ( i , side ) ;
7942: LD_VAR 0 1
7946: PPUSH
7947: LD_VAR 0 3
7951: PPUSH
7952: CALL_OW 235
7956: GO 7930
7958: POP
7959: POP
// end ;
7960: PPOPN 3
7962: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7963: LD_EXP 22
7967: PUSH
7968: LD_EXP 35
7972: AND
7973: IFFALSE 8092
7975: GO 7977
7977: DISABLE
7978: LD_INT 0
7980: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7981: LD_ADDR_VAR 0 1
7985: PUSH
7986: LD_INT 22
7988: PUSH
7989: LD_OWVAR 2
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 21
8000: PUSH
8001: LD_INT 1
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 3
8010: PUSH
8011: LD_INT 23
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: LIST
8029: PPUSH
8030: CALL_OW 69
8034: PUSH
8035: FOR_IN
8036: IFFALSE 8090
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8038: LD_VAR 0 1
8042: PPUSH
8043: CALL_OW 257
8047: PUSH
8048: LD_INT 1
8050: PUSH
8051: LD_INT 2
8053: PUSH
8054: LD_INT 3
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: IN
8066: IFFALSE 8088
// SetClass ( un , rand ( 1 , 4 ) ) ;
8068: LD_VAR 0 1
8072: PPUSH
8073: LD_INT 1
8075: PPUSH
8076: LD_INT 4
8078: PPUSH
8079: CALL_OW 12
8083: PPUSH
8084: CALL_OW 336
8088: GO 8035
8090: POP
8091: POP
// end ;
8092: PPOPN 1
8094: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8095: LD_EXP 22
8099: PUSH
8100: LD_EXP 34
8104: AND
8105: IFFALSE 8184
8107: GO 8109
8109: DISABLE
8110: LD_INT 0
8112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_INT 22
8120: PUSH
8121: LD_OWVAR 2
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 21
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: ST_TO_ADDR
// if not tmp then
8149: LD_VAR 0 1
8153: NOT
8154: IFFALSE 8158
// exit ;
8156: GO 8184
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8158: LD_VAR 0 1
8162: PUSH
8163: LD_INT 1
8165: PPUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 12
8175: ARRAY
8176: PPUSH
8177: LD_INT 100
8179: PPUSH
8180: CALL_OW 234
// end ;
8184: PPOPN 1
8186: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8187: LD_EXP 22
8191: PUSH
8192: LD_EXP 36
8196: AND
8197: IFFALSE 8295
8199: GO 8201
8201: DISABLE
8202: LD_INT 0
8204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8205: LD_ADDR_VAR 0 1
8209: PUSH
8210: LD_INT 22
8212: PUSH
8213: LD_OWVAR 2
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 21
8224: PUSH
8225: LD_INT 1
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PPUSH
8236: CALL_OW 69
8240: ST_TO_ADDR
// if not tmp then
8241: LD_VAR 0 1
8245: NOT
8246: IFFALSE 8250
// exit ;
8248: GO 8295
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8250: LD_VAR 0 1
8254: PUSH
8255: LD_INT 1
8257: PPUSH
8258: LD_VAR 0 1
8262: PPUSH
8263: CALL_OW 12
8267: ARRAY
8268: PPUSH
8269: LD_INT 1
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 12
8279: PPUSH
8280: LD_INT 3000
8282: PPUSH
8283: LD_INT 9000
8285: PPUSH
8286: CALL_OW 12
8290: PPUSH
8291: CALL_OW 492
// end ;
8295: PPOPN 1
8297: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8298: LD_EXP 22
8302: PUSH
8303: LD_EXP 37
8307: AND
8308: IFFALSE 8328
8310: GO 8312
8312: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8313: LD_INT 1
8315: PPUSH
8316: LD_OWVAR 2
8320: PPUSH
8321: LD_INT 0
8323: PPUSH
8324: CALL_OW 324
8328: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8329: LD_EXP 22
8333: PUSH
8334: LD_EXP 38
8338: AND
8339: IFFALSE 8422
8341: GO 8343
8343: DISABLE
8344: LD_INT 0
8346: PPUSH
8347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8348: LD_ADDR_VAR 0 2
8352: PUSH
8353: LD_INT 22
8355: PUSH
8356: LD_OWVAR 2
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 21
8367: PUSH
8368: LD_INT 3
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 69
8383: ST_TO_ADDR
// if not tmp then
8384: LD_VAR 0 2
8388: NOT
8389: IFFALSE 8393
// exit ;
8391: GO 8422
// for i in tmp do
8393: LD_ADDR_VAR 0 1
8397: PUSH
8398: LD_VAR 0 2
8402: PUSH
8403: FOR_IN
8404: IFFALSE 8420
// SetBLevel ( i , 10 ) ;
8406: LD_VAR 0 1
8410: PPUSH
8411: LD_INT 10
8413: PPUSH
8414: CALL_OW 241
8418: GO 8403
8420: POP
8421: POP
// end ;
8422: PPOPN 2
8424: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8425: LD_EXP 22
8429: PUSH
8430: LD_EXP 39
8434: AND
8435: IFFALSE 8546
8437: GO 8439
8439: DISABLE
8440: LD_INT 0
8442: PPUSH
8443: PPUSH
8444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8445: LD_ADDR_VAR 0 3
8449: PUSH
8450: LD_INT 22
8452: PUSH
8453: LD_OWVAR 2
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 25
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PPUSH
8476: CALL_OW 69
8480: ST_TO_ADDR
// if not tmp then
8481: LD_VAR 0 3
8485: NOT
8486: IFFALSE 8490
// exit ;
8488: GO 8546
// un := tmp [ rand ( 1 , tmp ) ] ;
8490: LD_ADDR_VAR 0 2
8494: PUSH
8495: LD_VAR 0 3
8499: PUSH
8500: LD_INT 1
8502: PPUSH
8503: LD_VAR 0 3
8507: PPUSH
8508: CALL_OW 12
8512: ARRAY
8513: ST_TO_ADDR
// if Crawls ( un ) then
8514: LD_VAR 0 2
8518: PPUSH
8519: CALL_OW 318
8523: IFFALSE 8534
// ComWalk ( un ) ;
8525: LD_VAR 0 2
8529: PPUSH
8530: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8534: LD_VAR 0 2
8538: PPUSH
8539: LD_INT 5
8541: PPUSH
8542: CALL_OW 336
// end ;
8546: PPOPN 3
8548: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
8549: LD_EXP 22
8553: PUSH
8554: LD_EXP 40
8558: AND
8559: PUSH
8560: LD_OWVAR 67
8564: PUSH
8565: LD_INT 3
8567: LESS
8568: AND
8569: IFFALSE 8588
8571: GO 8573
8573: DISABLE
// Difficulty := Difficulty + 1 ;
8574: LD_ADDR_OWVAR 67
8578: PUSH
8579: LD_OWVAR 67
8583: PUSH
8584: LD_INT 1
8586: PLUS
8587: ST_TO_ADDR
8588: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8589: LD_EXP 22
8593: PUSH
8594: LD_EXP 41
8598: AND
8599: IFFALSE 8702
8601: GO 8603
8603: DISABLE
8604: LD_INT 0
8606: PPUSH
// begin for i := 1 to 5 do
8607: LD_ADDR_VAR 0 1
8611: PUSH
8612: DOUBLE
8613: LD_INT 1
8615: DEC
8616: ST_TO_ADDR
8617: LD_INT 5
8619: PUSH
8620: FOR_TO
8621: IFFALSE 8700
// begin uc_nation := nation_nature ;
8623: LD_ADDR_OWVAR 21
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// uc_side := 0 ;
8631: LD_ADDR_OWVAR 20
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8639: LD_ADDR_OWVAR 29
8643: PUSH
8644: LD_INT 12
8646: PUSH
8647: LD_INT 12
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: ST_TO_ADDR
// hc_agressivity := 20 ;
8654: LD_ADDR_OWVAR 35
8658: PUSH
8659: LD_INT 20
8661: ST_TO_ADDR
// hc_class := class_tiger ;
8662: LD_ADDR_OWVAR 28
8666: PUSH
8667: LD_INT 14
8669: ST_TO_ADDR
// hc_gallery :=  ;
8670: LD_ADDR_OWVAR 33
8674: PUSH
8675: LD_STRING 
8677: ST_TO_ADDR
// hc_name :=  ;
8678: LD_ADDR_OWVAR 26
8682: PUSH
8683: LD_STRING 
8685: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8686: CALL_OW 44
8690: PPUSH
8691: LD_INT 0
8693: PPUSH
8694: CALL_OW 51
// end ;
8698: GO 8620
8700: POP
8701: POP
// end ;
8702: PPOPN 1
8704: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8705: LD_EXP 22
8709: PUSH
8710: LD_EXP 42
8714: AND
8715: IFFALSE 8724
8717: GO 8719
8719: DISABLE
// StreamSibBomb ;
8720: CALL 8725 0 0
8724: END
// export function StreamSibBomb ; var i , x , y ; begin
8725: LD_INT 0
8727: PPUSH
8728: PPUSH
8729: PPUSH
8730: PPUSH
// result := false ;
8731: LD_ADDR_VAR 0 1
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// for i := 1 to 16 do
8739: LD_ADDR_VAR 0 2
8743: PUSH
8744: DOUBLE
8745: LD_INT 1
8747: DEC
8748: ST_TO_ADDR
8749: LD_INT 16
8751: PUSH
8752: FOR_TO
8753: IFFALSE 8952
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8755: LD_ADDR_VAR 0 3
8759: PUSH
8760: LD_INT 10
8762: PUSH
8763: LD_INT 20
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: LD_INT 40
8771: PUSH
8772: LD_INT 50
8774: PUSH
8775: LD_INT 60
8777: PUSH
8778: LD_INT 70
8780: PUSH
8781: LD_INT 80
8783: PUSH
8784: LD_INT 90
8786: PUSH
8787: LD_INT 100
8789: PUSH
8790: LD_INT 110
8792: PUSH
8793: LD_INT 120
8795: PUSH
8796: LD_INT 130
8798: PUSH
8799: LD_INT 140
8801: PUSH
8802: LD_INT 150
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 1
8824: PPUSH
8825: LD_INT 15
8827: PPUSH
8828: CALL_OW 12
8832: ARRAY
8833: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8834: LD_ADDR_VAR 0 4
8838: PUSH
8839: LD_INT 10
8841: PUSH
8842: LD_INT 20
8844: PUSH
8845: LD_INT 30
8847: PUSH
8848: LD_INT 40
8850: PUSH
8851: LD_INT 50
8853: PUSH
8854: LD_INT 60
8856: PUSH
8857: LD_INT 70
8859: PUSH
8860: LD_INT 80
8862: PUSH
8863: LD_INT 90
8865: PUSH
8866: LD_INT 100
8868: PUSH
8869: LD_INT 110
8871: PUSH
8872: LD_INT 120
8874: PUSH
8875: LD_INT 130
8877: PUSH
8878: LD_INT 140
8880: PUSH
8881: LD_INT 150
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: PUSH
8901: LD_INT 1
8903: PPUSH
8904: LD_INT 15
8906: PPUSH
8907: CALL_OW 12
8911: ARRAY
8912: ST_TO_ADDR
// if ValidHex ( x , y ) then
8913: LD_VAR 0 3
8917: PPUSH
8918: LD_VAR 0 4
8922: PPUSH
8923: CALL_OW 488
8927: IFFALSE 8950
// begin result := [ x , y ] ;
8929: LD_ADDR_VAR 0 1
8933: PUSH
8934: LD_VAR 0 3
8938: PUSH
8939: LD_VAR 0 4
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: ST_TO_ADDR
// break ;
8948: GO 8952
// end ; end ;
8950: GO 8752
8952: POP
8953: POP
// if result then
8954: LD_VAR 0 1
8958: IFFALSE 9018
// begin ToLua ( playSibBomb() ) ;
8960: LD_STRING playSibBomb()
8962: PPUSH
8963: CALL_OW 559
// wait ( 0 0$14 ) ;
8967: LD_INT 490
8969: PPUSH
8970: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8974: LD_VAR 0 1
8978: PUSH
8979: LD_INT 1
8981: ARRAY
8982: PPUSH
8983: LD_VAR 0 1
8987: PUSH
8988: LD_INT 2
8990: ARRAY
8991: PPUSH
8992: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8996: LD_VAR 0 1
9000: PUSH
9001: LD_INT 1
9003: ARRAY
9004: PPUSH
9005: LD_VAR 0 1
9009: PUSH
9010: LD_INT 2
9012: ARRAY
9013: PPUSH
9014: CALL_OW 429
// end ; end ;
9018: LD_VAR 0 1
9022: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9023: LD_EXP 22
9027: PUSH
9028: LD_EXP 44
9032: AND
9033: IFFALSE 9045
9035: GO 9037
9037: DISABLE
// YouLost (  ) ;
9038: LD_STRING 
9040: PPUSH
9041: CALL_OW 104
9045: END
// every 0 0$1 trigger StreamModeActive and sFog do
9046: LD_EXP 22
9050: PUSH
9051: LD_EXP 43
9055: AND
9056: IFFALSE 9070
9058: GO 9060
9060: DISABLE
// FogOff ( your_side ) ;
9061: LD_OWVAR 2
9065: PPUSH
9066: CALL_OW 344
9070: END
// every 0 0$1 trigger StreamModeActive and sSun do
9071: LD_EXP 22
9075: PUSH
9076: LD_EXP 45
9080: AND
9081: IFFALSE 9109
9083: GO 9085
9085: DISABLE
// begin solar_recharge_percent := 0 ;
9086: LD_ADDR_OWVAR 79
9090: PUSH
9091: LD_INT 0
9093: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9094: LD_INT 10500
9096: PPUSH
9097: CALL_OW 67
// solar_recharge_percent := 100 ;
9101: LD_ADDR_OWVAR 79
9105: PUSH
9106: LD_INT 100
9108: ST_TO_ADDR
// end ;
9109: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9110: LD_EXP 22
9114: PUSH
9115: LD_EXP 46
9119: AND
9120: IFFALSE 9359
9122: GO 9124
9124: DISABLE
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
// begin tmp := [ ] ;
9130: LD_ADDR_VAR 0 3
9134: PUSH
9135: EMPTY
9136: ST_TO_ADDR
// for i := 1 to 6 do
9137: LD_ADDR_VAR 0 1
9141: PUSH
9142: DOUBLE
9143: LD_INT 1
9145: DEC
9146: ST_TO_ADDR
9147: LD_INT 6
9149: PUSH
9150: FOR_TO
9151: IFFALSE 9256
// begin uc_nation := nation_nature ;
9153: LD_ADDR_OWVAR 21
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// uc_side := 0 ;
9161: LD_ADDR_OWVAR 20
9165: PUSH
9166: LD_INT 0
9168: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9169: LD_ADDR_OWVAR 29
9173: PUSH
9174: LD_INT 12
9176: PUSH
9177: LD_INT 12
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: ST_TO_ADDR
// hc_agressivity := 20 ;
9184: LD_ADDR_OWVAR 35
9188: PUSH
9189: LD_INT 20
9191: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9192: LD_ADDR_OWVAR 28
9196: PUSH
9197: LD_INT 17
9199: ST_TO_ADDR
// hc_gallery :=  ;
9200: LD_ADDR_OWVAR 33
9204: PUSH
9205: LD_STRING 
9207: ST_TO_ADDR
// hc_name :=  ;
9208: LD_ADDR_OWVAR 26
9212: PUSH
9213: LD_STRING 
9215: ST_TO_ADDR
// un := CreateHuman ;
9216: LD_ADDR_VAR 0 2
9220: PUSH
9221: CALL_OW 44
9225: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9226: LD_VAR 0 2
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: CALL_OW 51
// tmp := tmp ^ un ;
9238: LD_ADDR_VAR 0 3
9242: PUSH
9243: LD_VAR 0 3
9247: PUSH
9248: LD_VAR 0 2
9252: ADD
9253: ST_TO_ADDR
// end ;
9254: GO 9150
9256: POP
9257: POP
// repeat wait ( 0 0$1 ) ;
9258: LD_INT 35
9260: PPUSH
9261: CALL_OW 67
// for un in tmp do
9265: LD_ADDR_VAR 0 2
9269: PUSH
9270: LD_VAR 0 3
9274: PUSH
9275: FOR_IN
9276: IFFALSE 9350
// begin if IsDead ( un ) then
9278: LD_VAR 0 2
9282: PPUSH
9283: CALL_OW 301
9287: IFFALSE 9307
// begin tmp := tmp diff un ;
9289: LD_ADDR_VAR 0 3
9293: PUSH
9294: LD_VAR 0 3
9298: PUSH
9299: LD_VAR 0 2
9303: DIFF
9304: ST_TO_ADDR
// continue ;
9305: GO 9275
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9307: LD_VAR 0 2
9311: PPUSH
9312: LD_INT 3
9314: PUSH
9315: LD_INT 22
9317: PUSH
9318: LD_INT 0
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PPUSH
9329: CALL_OW 69
9333: PPUSH
9334: LD_VAR 0 2
9338: PPUSH
9339: CALL_OW 74
9343: PPUSH
9344: CALL_OW 115
// end ;
9348: GO 9275
9350: POP
9351: POP
// until not tmp ;
9352: LD_VAR 0 3
9356: NOT
9357: IFFALSE 9258
// end ;
9359: PPOPN 3
9361: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9362: LD_EXP 22
9366: PUSH
9367: LD_EXP 47
9371: AND
9372: IFFALSE 9426
9374: GO 9376
9376: DISABLE
// begin ToLua ( displayTroll(); ) ;
9377: LD_STRING displayTroll();
9379: PPUSH
9380: CALL_OW 559
// wait ( 3 3$00 ) ;
9384: LD_INT 6300
9386: PPUSH
9387: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9391: LD_STRING hideTroll();
9393: PPUSH
9394: CALL_OW 559
// wait ( 1 1$00 ) ;
9398: LD_INT 2100
9400: PPUSH
9401: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9405: LD_STRING displayTroll();
9407: PPUSH
9408: CALL_OW 559
// wait ( 1 1$00 ) ;
9412: LD_INT 2100
9414: PPUSH
9415: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9419: LD_STRING hideTroll();
9421: PPUSH
9422: CALL_OW 559
// end ;
9426: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9427: LD_EXP 22
9431: PUSH
9432: LD_EXP 48
9436: AND
9437: IFFALSE 9500
9439: GO 9441
9441: DISABLE
9442: LD_INT 0
9444: PPUSH
// begin p := 0 ;
9445: LD_ADDR_VAR 0 1
9449: PUSH
9450: LD_INT 0
9452: ST_TO_ADDR
// repeat game_speed := 1 ;
9453: LD_ADDR_OWVAR 65
9457: PUSH
9458: LD_INT 1
9460: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9461: LD_INT 35
9463: PPUSH
9464: CALL_OW 67
// p := p + 1 ;
9468: LD_ADDR_VAR 0 1
9472: PUSH
9473: LD_VAR 0 1
9477: PUSH
9478: LD_INT 1
9480: PLUS
9481: ST_TO_ADDR
// until p >= 60 ;
9482: LD_VAR 0 1
9486: PUSH
9487: LD_INT 60
9489: GREATEREQUAL
9490: IFFALSE 9453
// game_speed := 4 ;
9492: LD_ADDR_OWVAR 65
9496: PUSH
9497: LD_INT 4
9499: ST_TO_ADDR
// end ;
9500: PPOPN 1
9502: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9503: LD_EXP 22
9507: PUSH
9508: LD_EXP 49
9512: AND
9513: IFFALSE 9659
9515: GO 9517
9517: DISABLE
9518: LD_INT 0
9520: PPUSH
9521: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9522: LD_ADDR_VAR 0 1
9526: PUSH
9527: LD_INT 22
9529: PUSH
9530: LD_OWVAR 2
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 30
9544: PUSH
9545: LD_INT 0
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 30
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: PPUSH
9571: CALL_OW 69
9575: ST_TO_ADDR
// if not depot then
9576: LD_VAR 0 1
9580: NOT
9581: IFFALSE 9585
// exit ;
9583: GO 9659
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9585: LD_ADDR_VAR 0 2
9589: PUSH
9590: LD_VAR 0 1
9594: PUSH
9595: LD_INT 1
9597: PPUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: CALL_OW 12
9607: ARRAY
9608: PPUSH
9609: CALL_OW 274
9613: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9614: LD_VAR 0 2
9618: PPUSH
9619: LD_INT 1
9621: PPUSH
9622: LD_INT 0
9624: PPUSH
9625: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9629: LD_VAR 0 2
9633: PPUSH
9634: LD_INT 2
9636: PPUSH
9637: LD_INT 0
9639: PPUSH
9640: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9644: LD_VAR 0 2
9648: PPUSH
9649: LD_INT 3
9651: PPUSH
9652: LD_INT 0
9654: PPUSH
9655: CALL_OW 277
// end ;
9659: PPOPN 2
9661: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9662: LD_EXP 22
9666: PUSH
9667: LD_EXP 50
9671: AND
9672: IFFALSE 9769
9674: GO 9676
9676: DISABLE
9677: LD_INT 0
9679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9680: LD_ADDR_VAR 0 1
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: LD_OWVAR 2
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 21
9699: PUSH
9700: LD_INT 1
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: LD_INT 3
9709: PUSH
9710: LD_INT 23
9712: PUSH
9713: LD_INT 0
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: PPUSH
9729: CALL_OW 69
9733: ST_TO_ADDR
// if not tmp then
9734: LD_VAR 0 1
9738: NOT
9739: IFFALSE 9743
// exit ;
9741: GO 9769
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 1
9750: PPUSH
9751: LD_VAR 0 1
9755: PPUSH
9756: CALL_OW 12
9760: ARRAY
9761: PPUSH
9762: LD_INT 200
9764: PPUSH
9765: CALL_OW 234
// end ;
9769: PPOPN 1
9771: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9772: LD_EXP 22
9776: PUSH
9777: LD_EXP 51
9781: AND
9782: IFFALSE 9861
9784: GO 9786
9786: DISABLE
9787: LD_INT 0
9789: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9790: LD_ADDR_VAR 0 1
9794: PUSH
9795: LD_INT 22
9797: PUSH
9798: LD_OWVAR 2
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 21
9809: PUSH
9810: LD_INT 2
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: ST_TO_ADDR
// if not tmp then
9826: LD_VAR 0 1
9830: NOT
9831: IFFALSE 9835
// exit ;
9833: GO 9861
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9835: LD_VAR 0 1
9839: PUSH
9840: LD_INT 1
9842: PPUSH
9843: LD_VAR 0 1
9847: PPUSH
9848: CALL_OW 12
9852: ARRAY
9853: PPUSH
9854: LD_INT 60
9856: PPUSH
9857: CALL_OW 234
// end ;
9861: PPOPN 1
9863: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9864: LD_EXP 22
9868: PUSH
9869: LD_EXP 52
9873: AND
9874: IFFALSE 9973
9876: GO 9878
9878: DISABLE
9879: LD_INT 0
9881: PPUSH
9882: PPUSH
// begin enable ;
9883: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9884: LD_ADDR_VAR 0 1
9888: PUSH
9889: LD_INT 22
9891: PUSH
9892: LD_OWVAR 2
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 61
9903: PUSH
9904: EMPTY
9905: LIST
9906: PUSH
9907: LD_INT 33
9909: PUSH
9910: LD_INT 2
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: PPUSH
9922: CALL_OW 69
9926: ST_TO_ADDR
// if not tmp then
9927: LD_VAR 0 1
9931: NOT
9932: IFFALSE 9936
// exit ;
9934: GO 9973
// for i in tmp do
9936: LD_ADDR_VAR 0 2
9940: PUSH
9941: LD_VAR 0 1
9945: PUSH
9946: FOR_IN
9947: IFFALSE 9971
// if IsControledBy ( i ) then
9949: LD_VAR 0 2
9953: PPUSH
9954: CALL_OW 312
9958: IFFALSE 9969
// ComUnlink ( i ) ;
9960: LD_VAR 0 2
9964: PPUSH
9965: CALL_OW 136
9969: GO 9946
9971: POP
9972: POP
// end ;
9973: PPOPN 2
9975: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9976: LD_EXP 22
9980: PUSH
9981: LD_EXP 53
9985: AND
9986: IFFALSE 10126
9988: GO 9990
9990: DISABLE
9991: LD_INT 0
9993: PPUSH
9994: PPUSH
// begin ToLua ( displayPowell(); ) ;
9995: LD_STRING displayPowell();
9997: PPUSH
9998: CALL_OW 559
// uc_side := 0 ;
10002: LD_ADDR_OWVAR 20
10006: PUSH
10007: LD_INT 0
10009: ST_TO_ADDR
// uc_nation := 2 ;
10010: LD_ADDR_OWVAR 21
10014: PUSH
10015: LD_INT 2
10017: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10018: LD_ADDR_OWVAR 37
10022: PUSH
10023: LD_INT 14
10025: ST_TO_ADDR
// vc_engine := engine_siberite ;
10026: LD_ADDR_OWVAR 39
10030: PUSH
10031: LD_INT 3
10033: ST_TO_ADDR
// vc_control := control_apeman ;
10034: LD_ADDR_OWVAR 38
10038: PUSH
10039: LD_INT 5
10041: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10042: LD_ADDR_OWVAR 40
10046: PUSH
10047: LD_INT 29
10049: ST_TO_ADDR
// un := CreateVehicle ;
10050: LD_ADDR_VAR 0 2
10054: PUSH
10055: CALL_OW 45
10059: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10060: LD_VAR 0 2
10064: PPUSH
10065: LD_INT 1
10067: PPUSH
10068: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10072: LD_INT 35
10074: PPUSH
10075: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10079: LD_VAR 0 2
10083: PPUSH
10084: LD_INT 22
10086: PUSH
10087: LD_OWVAR 2
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 69
10100: PPUSH
10101: LD_VAR 0 2
10105: PPUSH
10106: CALL_OW 74
10110: PPUSH
10111: CALL_OW 115
// until IsDead ( un ) ;
10115: LD_VAR 0 2
10119: PPUSH
10120: CALL_OW 301
10124: IFFALSE 10072
// end ;
10126: PPOPN 2
10128: END
// every 0 0$1 trigger StreamModeActive and sStu do
10129: LD_EXP 22
10133: PUSH
10134: LD_EXP 61
10138: AND
10139: IFFALSE 10155
10141: GO 10143
10143: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10144: LD_STRING displayStucuk();
10146: PPUSH
10147: CALL_OW 559
// ResetFog ;
10151: CALL_OW 335
// end ;
10155: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10156: LD_EXP 22
10160: PUSH
10161: LD_EXP 54
10165: AND
10166: IFFALSE 10307
10168: GO 10170
10170: DISABLE
10171: LD_INT 0
10173: PPUSH
10174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10175: LD_ADDR_VAR 0 2
10179: PUSH
10180: LD_INT 22
10182: PUSH
10183: LD_OWVAR 2
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 21
10194: PUSH
10195: LD_INT 1
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PPUSH
10206: CALL_OW 69
10210: ST_TO_ADDR
// if not tmp then
10211: LD_VAR 0 2
10215: NOT
10216: IFFALSE 10220
// exit ;
10218: GO 10307
// un := tmp [ rand ( 1 , tmp ) ] ;
10220: LD_ADDR_VAR 0 1
10224: PUSH
10225: LD_VAR 0 2
10229: PUSH
10230: LD_INT 1
10232: PPUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: CALL_OW 12
10242: ARRAY
10243: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10244: LD_VAR 0 1
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10256: LD_VAR 0 1
10260: PPUSH
10261: LD_OWVAR 3
10265: PUSH
10266: LD_VAR 0 1
10270: DIFF
10271: PPUSH
10272: LD_VAR 0 1
10276: PPUSH
10277: CALL_OW 74
10281: PPUSH
10282: CALL_OW 115
// wait ( 0 0$20 ) ;
10286: LD_INT 700
10288: PPUSH
10289: CALL_OW 67
// SetSide ( un , your_side ) ;
10293: LD_VAR 0 1
10297: PPUSH
10298: LD_OWVAR 2
10302: PPUSH
10303: CALL_OW 235
// end ;
10307: PPOPN 2
10309: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10310: LD_EXP 22
10314: PUSH
10315: LD_EXP 55
10319: AND
10320: IFFALSE 10426
10322: GO 10324
10324: DISABLE
10325: LD_INT 0
10327: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10328: LD_ADDR_VAR 0 1
10332: PUSH
10333: LD_INT 22
10335: PUSH
10336: LD_OWVAR 2
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 2
10347: PUSH
10348: LD_INT 30
10350: PUSH
10351: LD_INT 0
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 30
10360: PUSH
10361: LD_INT 1
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PPUSH
10377: CALL_OW 69
10381: ST_TO_ADDR
// if not depot then
10382: LD_VAR 0 1
10386: NOT
10387: IFFALSE 10391
// exit ;
10389: GO 10426
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10391: LD_VAR 0 1
10395: PUSH
10396: LD_INT 1
10398: ARRAY
10399: PPUSH
10400: CALL_OW 250
10404: PPUSH
10405: LD_VAR 0 1
10409: PUSH
10410: LD_INT 1
10412: ARRAY
10413: PPUSH
10414: CALL_OW 251
10418: PPUSH
10419: LD_INT 70
10421: PPUSH
10422: CALL_OW 495
// end ;
10426: PPOPN 1
10428: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10429: LD_EXP 22
10433: PUSH
10434: LD_EXP 56
10438: AND
10439: IFFALSE 10650
10441: GO 10443
10443: DISABLE
10444: LD_INT 0
10446: PPUSH
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10451: LD_ADDR_VAR 0 5
10455: PUSH
10456: LD_INT 22
10458: PUSH
10459: LD_OWVAR 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 21
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PPUSH
10482: CALL_OW 69
10486: ST_TO_ADDR
// if not tmp then
10487: LD_VAR 0 5
10491: NOT
10492: IFFALSE 10496
// exit ;
10494: GO 10650
// for i in tmp do
10496: LD_ADDR_VAR 0 1
10500: PUSH
10501: LD_VAR 0 5
10505: PUSH
10506: FOR_IN
10507: IFFALSE 10648
// begin d := rand ( 0 , 5 ) ;
10509: LD_ADDR_VAR 0 4
10513: PUSH
10514: LD_INT 0
10516: PPUSH
10517: LD_INT 5
10519: PPUSH
10520: CALL_OW 12
10524: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10525: LD_ADDR_VAR 0 2
10529: PUSH
10530: LD_VAR 0 1
10534: PPUSH
10535: CALL_OW 250
10539: PPUSH
10540: LD_VAR 0 4
10544: PPUSH
10545: LD_INT 3
10547: PPUSH
10548: LD_INT 12
10550: PPUSH
10551: CALL_OW 12
10555: PPUSH
10556: CALL_OW 272
10560: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10561: LD_ADDR_VAR 0 3
10565: PUSH
10566: LD_VAR 0 1
10570: PPUSH
10571: CALL_OW 251
10575: PPUSH
10576: LD_VAR 0 4
10580: PPUSH
10581: LD_INT 3
10583: PPUSH
10584: LD_INT 12
10586: PPUSH
10587: CALL_OW 12
10591: PPUSH
10592: CALL_OW 273
10596: ST_TO_ADDR
// if ValidHex ( x , y ) then
10597: LD_VAR 0 2
10601: PPUSH
10602: LD_VAR 0 3
10606: PPUSH
10607: CALL_OW 488
10611: IFFALSE 10646
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10613: LD_VAR 0 1
10617: PPUSH
10618: LD_VAR 0 2
10622: PPUSH
10623: LD_VAR 0 3
10627: PPUSH
10628: LD_INT 3
10630: PPUSH
10631: LD_INT 6
10633: PPUSH
10634: CALL_OW 12
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: CALL_OW 483
// end ;
10646: GO 10506
10648: POP
10649: POP
// end ;
10650: PPOPN 5
10652: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10653: LD_EXP 22
10657: PUSH
10658: LD_EXP 57
10662: AND
10663: IFFALSE 10757
10665: GO 10667
10667: DISABLE
10668: LD_INT 0
10670: PPUSH
10671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10672: LD_ADDR_VAR 0 2
10676: PUSH
10677: LD_INT 22
10679: PUSH
10680: LD_OWVAR 2
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 32
10691: PUSH
10692: LD_INT 1
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 21
10701: PUSH
10702: LD_INT 2
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 69
10718: ST_TO_ADDR
// if not tmp then
10719: LD_VAR 0 2
10723: NOT
10724: IFFALSE 10728
// exit ;
10726: GO 10757
// for i in tmp do
10728: LD_ADDR_VAR 0 1
10732: PUSH
10733: LD_VAR 0 2
10737: PUSH
10738: FOR_IN
10739: IFFALSE 10755
// SetFuel ( i , 0 ) ;
10741: LD_VAR 0 1
10745: PPUSH
10746: LD_INT 0
10748: PPUSH
10749: CALL_OW 240
10753: GO 10738
10755: POP
10756: POP
// end ;
10757: PPOPN 2
10759: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10760: LD_EXP 22
10764: PUSH
10765: LD_EXP 58
10769: AND
10770: IFFALSE 10836
10772: GO 10774
10774: DISABLE
10775: LD_INT 0
10777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10778: LD_ADDR_VAR 0 1
10782: PUSH
10783: LD_INT 22
10785: PUSH
10786: LD_OWVAR 2
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 29
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PPUSH
10809: CALL_OW 69
10813: ST_TO_ADDR
// if not tmp then
10814: LD_VAR 0 1
10818: NOT
10819: IFFALSE 10823
// exit ;
10821: GO 10836
// DestroyUnit ( tmp [ 1 ] ) ;
10823: LD_VAR 0 1
10827: PUSH
10828: LD_INT 1
10830: ARRAY
10831: PPUSH
10832: CALL_OW 65
// end ;
10836: PPOPN 1
10838: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10839: LD_EXP 22
10843: PUSH
10844: LD_EXP 60
10848: AND
10849: IFFALSE 10978
10851: GO 10853
10853: DISABLE
10854: LD_INT 0
10856: PPUSH
// begin uc_side := 0 ;
10857: LD_ADDR_OWVAR 20
10861: PUSH
10862: LD_INT 0
10864: ST_TO_ADDR
// uc_nation := nation_arabian ;
10865: LD_ADDR_OWVAR 21
10869: PUSH
10870: LD_INT 2
10872: ST_TO_ADDR
// hc_gallery :=  ;
10873: LD_ADDR_OWVAR 33
10877: PUSH
10878: LD_STRING 
10880: ST_TO_ADDR
// hc_name :=  ;
10881: LD_ADDR_OWVAR 26
10885: PUSH
10886: LD_STRING 
10888: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10889: LD_INT 1
10891: PPUSH
10892: LD_INT 11
10894: PPUSH
10895: LD_INT 10
10897: PPUSH
10898: CALL_OW 380
// un := CreateHuman ;
10902: LD_ADDR_VAR 0 1
10906: PUSH
10907: CALL_OW 44
10911: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10912: LD_VAR 0 1
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10924: LD_INT 35
10926: PPUSH
10927: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10931: LD_VAR 0 1
10935: PPUSH
10936: LD_INT 22
10938: PUSH
10939: LD_OWVAR 2
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PPUSH
10948: CALL_OW 69
10952: PPUSH
10953: LD_VAR 0 1
10957: PPUSH
10958: CALL_OW 74
10962: PPUSH
10963: CALL_OW 115
// until IsDead ( un ) ;
10967: LD_VAR 0 1
10971: PPUSH
10972: CALL_OW 301
10976: IFFALSE 10924
// end ;
10978: PPOPN 1
10980: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10981: LD_EXP 22
10985: PUSH
10986: LD_EXP 62
10990: AND
10991: IFFALSE 11003
10993: GO 10995
10995: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10996: LD_STRING earthquake(getX(game), 0, 32)
10998: PPUSH
10999: CALL_OW 559
11003: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11004: LD_EXP 22
11008: PUSH
11009: LD_EXP 63
11013: AND
11014: IFFALSE 11105
11016: GO 11018
11018: DISABLE
11019: LD_INT 0
11021: PPUSH
// begin enable ;
11022: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11023: LD_ADDR_VAR 0 1
11027: PUSH
11028: LD_INT 22
11030: PUSH
11031: LD_OWVAR 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 21
11042: PUSH
11043: LD_INT 2
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 33
11052: PUSH
11053: LD_INT 3
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL_OW 69
11069: ST_TO_ADDR
// if not tmp then
11070: LD_VAR 0 1
11074: NOT
11075: IFFALSE 11079
// exit ;
11077: GO 11105
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11079: LD_VAR 0 1
11083: PUSH
11084: LD_INT 1
11086: PPUSH
11087: LD_VAR 0 1
11091: PPUSH
11092: CALL_OW 12
11096: ARRAY
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 234
// end ;
11105: PPOPN 1
11107: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11108: LD_EXP 22
11112: PUSH
11113: LD_EXP 64
11117: AND
11118: IFFALSE 11259
11120: GO 11122
11122: DISABLE
11123: LD_INT 0
11125: PPUSH
11126: PPUSH
11127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11128: LD_ADDR_VAR 0 3
11132: PUSH
11133: LD_INT 22
11135: PUSH
11136: LD_OWVAR 2
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 25
11147: PUSH
11148: LD_INT 1
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PPUSH
11159: CALL_OW 69
11163: ST_TO_ADDR
// if not tmp then
11164: LD_VAR 0 3
11168: NOT
11169: IFFALSE 11173
// exit ;
11171: GO 11259
// un := tmp [ rand ( 1 , tmp ) ] ;
11173: LD_ADDR_VAR 0 2
11177: PUSH
11178: LD_VAR 0 3
11182: PUSH
11183: LD_INT 1
11185: PPUSH
11186: LD_VAR 0 3
11190: PPUSH
11191: CALL_OW 12
11195: ARRAY
11196: ST_TO_ADDR
// if Crawls ( un ) then
11197: LD_VAR 0 2
11201: PPUSH
11202: CALL_OW 318
11206: IFFALSE 11217
// ComWalk ( un ) ;
11208: LD_VAR 0 2
11212: PPUSH
11213: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11217: LD_VAR 0 2
11221: PPUSH
11222: LD_INT 9
11224: PPUSH
11225: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11229: LD_INT 28
11231: PPUSH
11232: LD_OWVAR 2
11236: PPUSH
11237: LD_INT 2
11239: PPUSH
11240: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11244: LD_INT 29
11246: PPUSH
11247: LD_OWVAR 2
11251: PPUSH
11252: LD_INT 2
11254: PPUSH
11255: CALL_OW 322
// end ;
11259: PPOPN 3
11261: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11262: LD_EXP 22
11266: PUSH
11267: LD_EXP 65
11271: AND
11272: IFFALSE 11383
11274: GO 11276
11276: DISABLE
11277: LD_INT 0
11279: PPUSH
11280: PPUSH
11281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11282: LD_ADDR_VAR 0 3
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_OWVAR 2
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 25
11301: PUSH
11302: LD_INT 1
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PPUSH
11313: CALL_OW 69
11317: ST_TO_ADDR
// if not tmp then
11318: LD_VAR 0 3
11322: NOT
11323: IFFALSE 11327
// exit ;
11325: GO 11383
// un := tmp [ rand ( 1 , tmp ) ] ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_VAR 0 3
11336: PUSH
11337: LD_INT 1
11339: PPUSH
11340: LD_VAR 0 3
11344: PPUSH
11345: CALL_OW 12
11349: ARRAY
11350: ST_TO_ADDR
// if Crawls ( un ) then
11351: LD_VAR 0 2
11355: PPUSH
11356: CALL_OW 318
11360: IFFALSE 11371
// ComWalk ( un ) ;
11362: LD_VAR 0 2
11366: PPUSH
11367: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11371: LD_VAR 0 2
11375: PPUSH
11376: LD_INT 8
11378: PPUSH
11379: CALL_OW 336
// end ;
11383: PPOPN 3
11385: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11386: LD_EXP 22
11390: PUSH
11391: LD_EXP 66
11395: AND
11396: IFFALSE 11540
11398: GO 11400
11400: DISABLE
11401: LD_INT 0
11403: PPUSH
11404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11405: LD_ADDR_VAR 0 2
11409: PUSH
11410: LD_INT 22
11412: PUSH
11413: LD_OWVAR 2
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 21
11424: PUSH
11425: LD_INT 2
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 2
11434: PUSH
11435: LD_INT 34
11437: PUSH
11438: LD_INT 12
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 34
11447: PUSH
11448: LD_INT 51
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 34
11457: PUSH
11458: LD_INT 32
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: PPUSH
11476: CALL_OW 69
11480: ST_TO_ADDR
// if not tmp then
11481: LD_VAR 0 2
11485: NOT
11486: IFFALSE 11490
// exit ;
11488: GO 11540
// for i in tmp do
11490: LD_ADDR_VAR 0 1
11494: PUSH
11495: LD_VAR 0 2
11499: PUSH
11500: FOR_IN
11501: IFFALSE 11538
// if GetCargo ( i , mat_artifact ) = 0 then
11503: LD_VAR 0 1
11507: PPUSH
11508: LD_INT 4
11510: PPUSH
11511: CALL_OW 289
11515: PUSH
11516: LD_INT 0
11518: EQUAL
11519: IFFALSE 11536
// SetCargo ( i , mat_siberit , 100 ) ;
11521: LD_VAR 0 1
11525: PPUSH
11526: LD_INT 3
11528: PPUSH
11529: LD_INT 100
11531: PPUSH
11532: CALL_OW 290
11536: GO 11500
11538: POP
11539: POP
// end ;
11540: PPOPN 2
11542: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11543: LD_EXP 22
11547: PUSH
11548: LD_EXP 67
11552: AND
11553: IFFALSE 11736
11555: GO 11557
11557: DISABLE
11558: LD_INT 0
11560: PPUSH
11561: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11562: LD_ADDR_VAR 0 2
11566: PUSH
11567: LD_INT 22
11569: PUSH
11570: LD_OWVAR 2
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PPUSH
11579: CALL_OW 69
11583: ST_TO_ADDR
// if not tmp then
11584: LD_VAR 0 2
11588: NOT
11589: IFFALSE 11593
// exit ;
11591: GO 11736
// for i := 1 to 2 do
11593: LD_ADDR_VAR 0 1
11597: PUSH
11598: DOUBLE
11599: LD_INT 1
11601: DEC
11602: ST_TO_ADDR
11603: LD_INT 2
11605: PUSH
11606: FOR_TO
11607: IFFALSE 11734
// begin uc_side := your_side ;
11609: LD_ADDR_OWVAR 20
11613: PUSH
11614: LD_OWVAR 2
11618: ST_TO_ADDR
// uc_nation := nation_american ;
11619: LD_ADDR_OWVAR 21
11623: PUSH
11624: LD_INT 1
11626: ST_TO_ADDR
// vc_chassis := us_morphling ;
11627: LD_ADDR_OWVAR 37
11631: PUSH
11632: LD_INT 5
11634: ST_TO_ADDR
// vc_engine := engine_siberite ;
11635: LD_ADDR_OWVAR 39
11639: PUSH
11640: LD_INT 3
11642: ST_TO_ADDR
// vc_control := control_computer ;
11643: LD_ADDR_OWVAR 38
11647: PUSH
11648: LD_INT 3
11650: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11651: LD_ADDR_OWVAR 40
11655: PUSH
11656: LD_INT 10
11658: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11659: LD_VAR 0 2
11663: PUSH
11664: LD_INT 1
11666: ARRAY
11667: PPUSH
11668: CALL_OW 310
11672: NOT
11673: IFFALSE 11720
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11675: CALL_OW 45
11679: PPUSH
11680: LD_VAR 0 2
11684: PUSH
11685: LD_INT 1
11687: ARRAY
11688: PPUSH
11689: CALL_OW 250
11693: PPUSH
11694: LD_VAR 0 2
11698: PUSH
11699: LD_INT 1
11701: ARRAY
11702: PPUSH
11703: CALL_OW 251
11707: PPUSH
11708: LD_INT 12
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: CALL_OW 50
11718: GO 11732
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11720: CALL_OW 45
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 51
// end ;
11732: GO 11606
11734: POP
11735: POP
// end ;
11736: PPOPN 2
11738: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11739: LD_EXP 22
11743: PUSH
11744: LD_EXP 68
11748: AND
11749: IFFALSE 11971
11751: GO 11753
11753: DISABLE
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
11760: PPUSH
11761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11762: LD_ADDR_VAR 0 6
11766: PUSH
11767: LD_INT 22
11769: PUSH
11770: LD_OWVAR 2
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 21
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 3
11791: PUSH
11792: LD_INT 23
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 69
11815: ST_TO_ADDR
// if not tmp then
11816: LD_VAR 0 6
11820: NOT
11821: IFFALSE 11825
// exit ;
11823: GO 11971
// s1 := rand ( 1 , 4 ) ;
11825: LD_ADDR_VAR 0 2
11829: PUSH
11830: LD_INT 1
11832: PPUSH
11833: LD_INT 4
11835: PPUSH
11836: CALL_OW 12
11840: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11841: LD_ADDR_VAR 0 4
11845: PUSH
11846: LD_VAR 0 6
11850: PUSH
11851: LD_INT 1
11853: ARRAY
11854: PPUSH
11855: LD_VAR 0 2
11859: PPUSH
11860: CALL_OW 259
11864: ST_TO_ADDR
// if s1 = 1 then
11865: LD_VAR 0 2
11869: PUSH
11870: LD_INT 1
11872: EQUAL
11873: IFFALSE 11893
// s2 := rand ( 2 , 4 ) else
11875: LD_ADDR_VAR 0 3
11879: PUSH
11880: LD_INT 2
11882: PPUSH
11883: LD_INT 4
11885: PPUSH
11886: CALL_OW 12
11890: ST_TO_ADDR
11891: GO 11901
// s2 := 1 ;
11893: LD_ADDR_VAR 0 3
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11901: LD_ADDR_VAR 0 5
11905: PUSH
11906: LD_VAR 0 6
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: LD_VAR 0 3
11919: PPUSH
11920: CALL_OW 259
11924: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11925: LD_VAR 0 6
11929: PUSH
11930: LD_INT 1
11932: ARRAY
11933: PPUSH
11934: LD_VAR 0 2
11938: PPUSH
11939: LD_VAR 0 5
11943: PPUSH
11944: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11948: LD_VAR 0 6
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: PPUSH
11957: LD_VAR 0 3
11961: PPUSH
11962: LD_VAR 0 4
11966: PPUSH
11967: CALL_OW 237
// end ;
11971: PPOPN 6
11973: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11974: LD_EXP 22
11978: PUSH
11979: LD_EXP 69
11983: AND
11984: IFFALSE 12063
11986: GO 11988
11988: DISABLE
11989: LD_INT 0
11991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11992: LD_ADDR_VAR 0 1
11996: PUSH
11997: LD_INT 22
11999: PUSH
12000: LD_OWVAR 2
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 30
12011: PUSH
12012: LD_INT 3
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PPUSH
12023: CALL_OW 69
12027: ST_TO_ADDR
// if not tmp then
12028: LD_VAR 0 1
12032: NOT
12033: IFFALSE 12037
// exit ;
12035: GO 12063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12037: LD_VAR 0 1
12041: PUSH
12042: LD_INT 1
12044: PPUSH
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 12
12054: ARRAY
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: CALL_OW 234
// end ;
12063: PPOPN 1
12065: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12066: LD_EXP 22
12070: PUSH
12071: LD_EXP 70
12075: AND
12076: IFFALSE 12188
12078: GO 12080
12080: DISABLE
12081: LD_INT 0
12083: PPUSH
12084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12085: LD_ADDR_VAR 0 2
12089: PUSH
12090: LD_INT 22
12092: PUSH
12093: LD_OWVAR 2
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: LD_INT 30
12107: PUSH
12108: LD_INT 27
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 30
12117: PUSH
12118: LD_INT 26
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 30
12127: PUSH
12128: LD_INT 28
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PPUSH
12145: CALL_OW 69
12149: ST_TO_ADDR
// if not tmp then
12150: LD_VAR 0 2
12154: NOT
12155: IFFALSE 12159
// exit ;
12157: GO 12188
// for i in tmp do
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: LD_VAR 0 2
12168: PUSH
12169: FOR_IN
12170: IFFALSE 12186
// SetLives ( i , 1 ) ;
12172: LD_VAR 0 1
12176: PPUSH
12177: LD_INT 1
12179: PPUSH
12180: CALL_OW 234
12184: GO 12169
12186: POP
12187: POP
// end ;
12188: PPOPN 2
12190: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12191: LD_EXP 22
12195: PUSH
12196: LD_EXP 71
12200: AND
12201: IFFALSE 12475
12203: GO 12205
12205: DISABLE
12206: LD_INT 0
12208: PPUSH
12209: PPUSH
12210: PPUSH
// begin i := rand ( 1 , 7 ) ;
12211: LD_ADDR_VAR 0 1
12215: PUSH
12216: LD_INT 1
12218: PPUSH
12219: LD_INT 7
12221: PPUSH
12222: CALL_OW 12
12226: ST_TO_ADDR
// case i of 1 :
12227: LD_VAR 0 1
12231: PUSH
12232: LD_INT 1
12234: DOUBLE
12235: EQUAL
12236: IFTRUE 12240
12238: GO 12250
12240: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12241: LD_STRING earthquake(getX(game), 0, 32)
12243: PPUSH
12244: CALL_OW 559
12248: GO 12475
12250: LD_INT 2
12252: DOUBLE
12253: EQUAL
12254: IFTRUE 12258
12256: GO 12272
12258: POP
// begin ToLua ( displayStucuk(); ) ;
12259: LD_STRING displayStucuk();
12261: PPUSH
12262: CALL_OW 559
// ResetFog ;
12266: CALL_OW 335
// end ; 3 :
12270: GO 12475
12272: LD_INT 3
12274: DOUBLE
12275: EQUAL
12276: IFTRUE 12280
12278: GO 12384
12280: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12281: LD_ADDR_VAR 0 2
12285: PUSH
12286: LD_INT 22
12288: PUSH
12289: LD_OWVAR 2
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 25
12300: PUSH
12301: LD_INT 1
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 69
12316: ST_TO_ADDR
// if not tmp then
12317: LD_VAR 0 2
12321: NOT
12322: IFFALSE 12326
// exit ;
12324: GO 12475
// un := tmp [ rand ( 1 , tmp ) ] ;
12326: LD_ADDR_VAR 0 3
12330: PUSH
12331: LD_VAR 0 2
12335: PUSH
12336: LD_INT 1
12338: PPUSH
12339: LD_VAR 0 2
12343: PPUSH
12344: CALL_OW 12
12348: ARRAY
12349: ST_TO_ADDR
// if Crawls ( un ) then
12350: LD_VAR 0 3
12354: PPUSH
12355: CALL_OW 318
12359: IFFALSE 12370
// ComWalk ( un ) ;
12361: LD_VAR 0 3
12365: PPUSH
12366: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12370: LD_VAR 0 3
12374: PPUSH
12375: LD_INT 8
12377: PPUSH
12378: CALL_OW 336
// end ; 4 :
12382: GO 12475
12384: LD_INT 4
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12453
12392: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12393: LD_ADDR_VAR 0 2
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: LD_OWVAR 2
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 29
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PPUSH
12424: CALL_OW 69
12428: ST_TO_ADDR
// if not tmp then
12429: LD_VAR 0 2
12433: NOT
12434: IFFALSE 12438
// exit ;
12436: GO 12475
// DestroyUnit ( tmp [ 1 ] ) ;
12438: LD_VAR 0 2
12442: PUSH
12443: LD_INT 1
12445: ARRAY
12446: PPUSH
12447: CALL_OW 65
// end ; 5 .. 7 :
12451: GO 12475
12453: LD_INT 5
12455: DOUBLE
12456: GREATEREQUAL
12457: IFFALSE 12465
12459: LD_INT 7
12461: DOUBLE
12462: LESSEQUAL
12463: IFTRUE 12467
12465: GO 12474
12467: POP
// StreamSibBomb ; end ;
12468: CALL 8725 0 0
12472: GO 12475
12474: POP
// end ;
12475: PPOPN 3
12477: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12478: LD_EXP 22
12482: PUSH
12483: LD_EXP 72
12487: AND
12488: IFFALSE 12644
12490: GO 12492
12492: DISABLE
12493: LD_INT 0
12495: PPUSH
12496: PPUSH
12497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12498: LD_ADDR_VAR 0 2
12502: PUSH
12503: LD_INT 81
12505: PUSH
12506: LD_OWVAR 2
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: LD_INT 2
12517: PUSH
12518: LD_INT 21
12520: PUSH
12521: LD_INT 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 21
12530: PUSH
12531: LD_INT 2
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// if not tmp then
12552: LD_VAR 0 2
12556: NOT
12557: IFFALSE 12561
// exit ;
12559: GO 12644
// p := 0 ;
12561: LD_ADDR_VAR 0 3
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12569: LD_INT 35
12571: PPUSH
12572: CALL_OW 67
// p := p + 1 ;
12576: LD_ADDR_VAR 0 3
12580: PUSH
12581: LD_VAR 0 3
12585: PUSH
12586: LD_INT 1
12588: PLUS
12589: ST_TO_ADDR
// for i in tmp do
12590: LD_ADDR_VAR 0 1
12594: PUSH
12595: LD_VAR 0 2
12599: PUSH
12600: FOR_IN
12601: IFFALSE 12632
// if GetLives ( i ) < 1000 then
12603: LD_VAR 0 1
12607: PPUSH
12608: CALL_OW 256
12612: PUSH
12613: LD_INT 1000
12615: LESS
12616: IFFALSE 12630
// SetLives ( i , 1000 ) ;
12618: LD_VAR 0 1
12622: PPUSH
12623: LD_INT 1000
12625: PPUSH
12626: CALL_OW 234
12630: GO 12600
12632: POP
12633: POP
// until p > 20 ;
12634: LD_VAR 0 3
12638: PUSH
12639: LD_INT 20
12641: GREATER
12642: IFFALSE 12569
// end ;
12644: PPOPN 3
12646: END
// every 0 0$1 trigger StreamModeActive and sTime do
12647: LD_EXP 22
12651: PUSH
12652: LD_EXP 73
12656: AND
12657: IFFALSE 12692
12659: GO 12661
12661: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12662: LD_INT 28
12664: PPUSH
12665: LD_OWVAR 2
12669: PPUSH
12670: LD_INT 2
12672: PPUSH
12673: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12677: LD_INT 30
12679: PPUSH
12680: LD_OWVAR 2
12684: PPUSH
12685: LD_INT 2
12687: PPUSH
12688: CALL_OW 322
// end ;
12692: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12693: LD_EXP 22
12697: PUSH
12698: LD_EXP 74
12702: AND
12703: IFFALSE 12824
12705: GO 12707
12707: DISABLE
12708: LD_INT 0
12710: PPUSH
12711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12712: LD_ADDR_VAR 0 2
12716: PUSH
12717: LD_INT 22
12719: PUSH
12720: LD_OWVAR 2
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 21
12731: PUSH
12732: LD_INT 1
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: LD_INT 23
12744: PUSH
12745: LD_INT 0
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: LIST
12760: PPUSH
12761: CALL_OW 69
12765: ST_TO_ADDR
// if not tmp then
12766: LD_VAR 0 2
12770: NOT
12771: IFFALSE 12775
// exit ;
12773: GO 12824
// for i in tmp do
12775: LD_ADDR_VAR 0 1
12779: PUSH
12780: LD_VAR 0 2
12784: PUSH
12785: FOR_IN
12786: IFFALSE 12822
// begin if Crawls ( i ) then
12788: LD_VAR 0 1
12792: PPUSH
12793: CALL_OW 318
12797: IFFALSE 12808
// ComWalk ( i ) ;
12799: LD_VAR 0 1
12803: PPUSH
12804: CALL_OW 138
// SetClass ( i , 2 ) ;
12808: LD_VAR 0 1
12812: PPUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 336
// end ;
12820: GO 12785
12822: POP
12823: POP
// end ;
12824: PPOPN 2
12826: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12827: LD_EXP 22
12831: PUSH
12832: LD_EXP 75
12836: AND
12837: IFFALSE 13118
12839: GO 12841
12841: DISABLE
12842: LD_INT 0
12844: PPUSH
12845: PPUSH
12846: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12847: LD_OWVAR 2
12851: PPUSH
12852: LD_INT 9
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12865: LD_INT 9
12867: PPUSH
12868: LD_OWVAR 2
12872: PPUSH
12873: CALL_OW 343
// uc_side := 9 ;
12877: LD_ADDR_OWVAR 20
12881: PUSH
12882: LD_INT 9
12884: ST_TO_ADDR
// uc_nation := 2 ;
12885: LD_ADDR_OWVAR 21
12889: PUSH
12890: LD_INT 2
12892: ST_TO_ADDR
// hc_name := Dark Warrior ;
12893: LD_ADDR_OWVAR 26
12897: PUSH
12898: LD_STRING Dark Warrior
12900: ST_TO_ADDR
// hc_gallery :=  ;
12901: LD_ADDR_OWVAR 33
12905: PUSH
12906: LD_STRING 
12908: ST_TO_ADDR
// hc_noskilllimit := true ;
12909: LD_ADDR_OWVAR 76
12913: PUSH
12914: LD_INT 1
12916: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12917: LD_ADDR_OWVAR 31
12921: PUSH
12922: LD_INT 30
12924: PUSH
12925: LD_INT 30
12927: PUSH
12928: LD_INT 30
12930: PUSH
12931: LD_INT 30
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: ST_TO_ADDR
// un := CreateHuman ;
12940: LD_ADDR_VAR 0 3
12944: PUSH
12945: CALL_OW 44
12949: ST_TO_ADDR
// hc_noskilllimit := false ;
12950: LD_ADDR_OWVAR 76
12954: PUSH
12955: LD_INT 0
12957: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12958: LD_VAR 0 3
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: CALL_OW 51
// p := 0 ;
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12978: LD_INT 35
12980: PPUSH
12981: CALL_OW 67
// p := p + 1 ;
12985: LD_ADDR_VAR 0 2
12989: PUSH
12990: LD_VAR 0 2
12994: PUSH
12995: LD_INT 1
12997: PLUS
12998: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12999: LD_VAR 0 3
13003: PPUSH
13004: CALL_OW 256
13008: PUSH
13009: LD_INT 1000
13011: LESS
13012: IFFALSE 13026
// SetLives ( un , 1000 ) ;
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1000
13021: PPUSH
13022: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13026: LD_VAR 0 3
13030: PPUSH
13031: LD_INT 81
13033: PUSH
13034: LD_OWVAR 2
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 91
13045: PUSH
13046: LD_VAR 0 3
13050: PUSH
13051: LD_INT 30
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PPUSH
13063: CALL_OW 69
13067: PPUSH
13068: LD_VAR 0 3
13072: PPUSH
13073: CALL_OW 74
13077: PPUSH
13078: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
13082: LD_VAR 0 2
13086: PUSH
13087: LD_INT 60
13089: GREATER
13090: PUSH
13091: LD_VAR 0 3
13095: PPUSH
13096: CALL_OW 301
13100: OR
13101: IFFALSE 12978
// if un then
13103: LD_VAR 0 3
13107: IFFALSE 13118
// RemoveUnit ( un ) ;
13109: LD_VAR 0 3
13113: PPUSH
13114: CALL_OW 64
// end ;
13118: PPOPN 3
13120: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13121: LD_INT 0
13123: PPUSH
// case cmd of 301 :
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 301
13131: DOUBLE
13132: EQUAL
13133: IFTRUE 13137
13135: GO 13169
13137: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13138: LD_VAR 0 6
13142: PPUSH
13143: LD_VAR 0 7
13147: PPUSH
13148: LD_VAR 0 8
13152: PPUSH
13153: LD_VAR 0 4
13157: PPUSH
13158: LD_VAR 0 5
13162: PPUSH
13163: CALL 14370 0 5
13167: GO 13290
13169: LD_INT 302
13171: DOUBLE
13172: EQUAL
13173: IFTRUE 13177
13175: GO 13214
13177: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13178: LD_VAR 0 6
13182: PPUSH
13183: LD_VAR 0 7
13187: PPUSH
13188: LD_VAR 0 8
13192: PPUSH
13193: LD_VAR 0 9
13197: PPUSH
13198: LD_VAR 0 4
13202: PPUSH
13203: LD_VAR 0 5
13207: PPUSH
13208: CALL 14461 0 6
13212: GO 13290
13214: LD_INT 303
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13259
13222: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13223: LD_VAR 0 6
13227: PPUSH
13228: LD_VAR 0 7
13232: PPUSH
13233: LD_VAR 0 8
13237: PPUSH
13238: LD_VAR 0 9
13242: PPUSH
13243: LD_VAR 0 4
13247: PPUSH
13248: LD_VAR 0 5
13252: PPUSH
13253: CALL 13295 0 6
13257: GO 13290
13259: LD_INT 304
13261: DOUBLE
13262: EQUAL
13263: IFTRUE 13267
13265: GO 13289
13267: POP
// hHackTeleport ( unit , x , y ) ; end ;
13268: LD_VAR 0 2
13272: PPUSH
13273: LD_VAR 0 4
13277: PPUSH
13278: LD_VAR 0 5
13282: PPUSH
13283: CALL 15054 0 3
13287: GO 13290
13289: POP
// end ;
13290: LD_VAR 0 12
13294: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13295: LD_INT 0
13297: PPUSH
13298: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13299: LD_VAR 0 1
13303: PUSH
13304: LD_INT 1
13306: LESS
13307: PUSH
13308: LD_VAR 0 1
13312: PUSH
13313: LD_INT 3
13315: GREATER
13316: OR
13317: PUSH
13318: LD_VAR 0 5
13322: PPUSH
13323: LD_VAR 0 6
13327: PPUSH
13328: CALL_OW 428
13332: OR
13333: IFFALSE 13337
// exit ;
13335: GO 14057
// uc_side := your_side ;
13337: LD_ADDR_OWVAR 20
13341: PUSH
13342: LD_OWVAR 2
13346: ST_TO_ADDR
// uc_nation := nation ;
13347: LD_ADDR_OWVAR 21
13351: PUSH
13352: LD_VAR 0 1
13356: ST_TO_ADDR
// bc_level = 1 ;
13357: LD_ADDR_OWVAR 43
13361: PUSH
13362: LD_INT 1
13364: ST_TO_ADDR
// case btype of 1 :
13365: LD_VAR 0 2
13369: PUSH
13370: LD_INT 1
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13389
13378: POP
// bc_type := b_depot ; 2 :
13379: LD_ADDR_OWVAR 42
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
13387: GO 14001
13389: LD_INT 2
13391: DOUBLE
13392: EQUAL
13393: IFTRUE 13397
13395: GO 13408
13397: POP
// bc_type := b_warehouse ; 3 :
13398: LD_ADDR_OWVAR 42
13402: PUSH
13403: LD_INT 1
13405: ST_TO_ADDR
13406: GO 14001
13408: LD_INT 3
13410: DOUBLE
13411: EQUAL
13412: IFTRUE 13416
13414: GO 13427
13416: POP
// bc_type := b_lab ; 4 .. 9 :
13417: LD_ADDR_OWVAR 42
13421: PUSH
13422: LD_INT 6
13424: ST_TO_ADDR
13425: GO 14001
13427: LD_INT 4
13429: DOUBLE
13430: GREATEREQUAL
13431: IFFALSE 13439
13433: LD_INT 9
13435: DOUBLE
13436: LESSEQUAL
13437: IFTRUE 13441
13439: GO 13493
13441: POP
// begin bc_type := b_lab_half ;
13442: LD_ADDR_OWVAR 42
13446: PUSH
13447: LD_INT 7
13449: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13450: LD_ADDR_OWVAR 44
13454: PUSH
13455: LD_INT 10
13457: PUSH
13458: LD_INT 11
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: LD_INT 15
13466: PUSH
13467: LD_INT 14
13469: PUSH
13470: LD_INT 13
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: PUSH
13481: LD_VAR 0 2
13485: PUSH
13486: LD_INT 3
13488: MINUS
13489: ARRAY
13490: ST_TO_ADDR
// end ; 10 .. 13 :
13491: GO 14001
13493: LD_INT 10
13495: DOUBLE
13496: GREATEREQUAL
13497: IFFALSE 13505
13499: LD_INT 13
13501: DOUBLE
13502: LESSEQUAL
13503: IFTRUE 13507
13505: GO 13584
13507: POP
// begin bc_type := b_lab_full ;
13508: LD_ADDR_OWVAR 42
13512: PUSH
13513: LD_INT 8
13515: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13516: LD_ADDR_OWVAR 44
13520: PUSH
13521: LD_INT 10
13523: PUSH
13524: LD_INT 12
13526: PUSH
13527: LD_INT 14
13529: PUSH
13530: LD_INT 13
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: PUSH
13539: LD_VAR 0 2
13543: PUSH
13544: LD_INT 9
13546: MINUS
13547: ARRAY
13548: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13549: LD_ADDR_OWVAR 45
13553: PUSH
13554: LD_INT 11
13556: PUSH
13557: LD_INT 15
13559: PUSH
13560: LD_INT 12
13562: PUSH
13563: LD_INT 15
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_VAR 0 2
13576: PUSH
13577: LD_INT 9
13579: MINUS
13580: ARRAY
13581: ST_TO_ADDR
// end ; 14 :
13582: GO 14001
13584: LD_INT 14
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 13603
13592: POP
// bc_type := b_workshop ; 15 :
13593: LD_ADDR_OWVAR 42
13597: PUSH
13598: LD_INT 2
13600: ST_TO_ADDR
13601: GO 14001
13603: LD_INT 15
13605: DOUBLE
13606: EQUAL
13607: IFTRUE 13611
13609: GO 13622
13611: POP
// bc_type := b_factory ; 16 :
13612: LD_ADDR_OWVAR 42
13616: PUSH
13617: LD_INT 3
13619: ST_TO_ADDR
13620: GO 14001
13622: LD_INT 16
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13641
13630: POP
// bc_type := b_ext_gun ; 17 :
13631: LD_ADDR_OWVAR 42
13635: PUSH
13636: LD_INT 17
13638: ST_TO_ADDR
13639: GO 14001
13641: LD_INT 17
13643: DOUBLE
13644: EQUAL
13645: IFTRUE 13649
13647: GO 13677
13649: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13650: LD_ADDR_OWVAR 42
13654: PUSH
13655: LD_INT 19
13657: PUSH
13658: LD_INT 23
13660: PUSH
13661: LD_INT 19
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: PUSH
13669: LD_VAR 0 1
13673: ARRAY
13674: ST_TO_ADDR
13675: GO 14001
13677: LD_INT 18
13679: DOUBLE
13680: EQUAL
13681: IFTRUE 13685
13683: GO 13696
13685: POP
// bc_type := b_ext_radar ; 19 :
13686: LD_ADDR_OWVAR 42
13690: PUSH
13691: LD_INT 20
13693: ST_TO_ADDR
13694: GO 14001
13696: LD_INT 19
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 13715
13704: POP
// bc_type := b_ext_radio ; 20 :
13705: LD_ADDR_OWVAR 42
13709: PUSH
13710: LD_INT 22
13712: ST_TO_ADDR
13713: GO 14001
13715: LD_INT 20
13717: DOUBLE
13718: EQUAL
13719: IFTRUE 13723
13721: GO 13734
13723: POP
// bc_type := b_ext_siberium ; 21 :
13724: LD_ADDR_OWVAR 42
13728: PUSH
13729: LD_INT 21
13731: ST_TO_ADDR
13732: GO 14001
13734: LD_INT 21
13736: DOUBLE
13737: EQUAL
13738: IFTRUE 13742
13740: GO 13753
13742: POP
// bc_type := b_ext_computer ; 22 :
13743: LD_ADDR_OWVAR 42
13747: PUSH
13748: LD_INT 24
13750: ST_TO_ADDR
13751: GO 14001
13753: LD_INT 22
13755: DOUBLE
13756: EQUAL
13757: IFTRUE 13761
13759: GO 13772
13761: POP
// bc_type := b_ext_track ; 23 :
13762: LD_ADDR_OWVAR 42
13766: PUSH
13767: LD_INT 16
13769: ST_TO_ADDR
13770: GO 14001
13772: LD_INT 23
13774: DOUBLE
13775: EQUAL
13776: IFTRUE 13780
13778: GO 13791
13780: POP
// bc_type := b_ext_laser ; 24 :
13781: LD_ADDR_OWVAR 42
13785: PUSH
13786: LD_INT 25
13788: ST_TO_ADDR
13789: GO 14001
13791: LD_INT 24
13793: DOUBLE
13794: EQUAL
13795: IFTRUE 13799
13797: GO 13810
13799: POP
// bc_type := b_control_tower ; 25 :
13800: LD_ADDR_OWVAR 42
13804: PUSH
13805: LD_INT 36
13807: ST_TO_ADDR
13808: GO 14001
13810: LD_INT 25
13812: DOUBLE
13813: EQUAL
13814: IFTRUE 13818
13816: GO 13829
13818: POP
// bc_type := b_breastwork ; 26 :
13819: LD_ADDR_OWVAR 42
13823: PUSH
13824: LD_INT 31
13826: ST_TO_ADDR
13827: GO 14001
13829: LD_INT 26
13831: DOUBLE
13832: EQUAL
13833: IFTRUE 13837
13835: GO 13848
13837: POP
// bc_type := b_bunker ; 27 :
13838: LD_ADDR_OWVAR 42
13842: PUSH
13843: LD_INT 32
13845: ST_TO_ADDR
13846: GO 14001
13848: LD_INT 27
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13856
13854: GO 13867
13856: POP
// bc_type := b_turret ; 28 :
13857: LD_ADDR_OWVAR 42
13861: PUSH
13862: LD_INT 33
13864: ST_TO_ADDR
13865: GO 14001
13867: LD_INT 28
13869: DOUBLE
13870: EQUAL
13871: IFTRUE 13875
13873: GO 13886
13875: POP
// bc_type := b_armoury ; 29 :
13876: LD_ADDR_OWVAR 42
13880: PUSH
13881: LD_INT 4
13883: ST_TO_ADDR
13884: GO 14001
13886: LD_INT 29
13888: DOUBLE
13889: EQUAL
13890: IFTRUE 13894
13892: GO 13905
13894: POP
// bc_type := b_barracks ; 30 :
13895: LD_ADDR_OWVAR 42
13899: PUSH
13900: LD_INT 5
13902: ST_TO_ADDR
13903: GO 14001
13905: LD_INT 30
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 13924
13913: POP
// bc_type := b_solar_power ; 31 :
13914: LD_ADDR_OWVAR 42
13918: PUSH
13919: LD_INT 27
13921: ST_TO_ADDR
13922: GO 14001
13924: LD_INT 31
13926: DOUBLE
13927: EQUAL
13928: IFTRUE 13932
13930: GO 13943
13932: POP
// bc_type := b_oil_power ; 32 :
13933: LD_ADDR_OWVAR 42
13937: PUSH
13938: LD_INT 26
13940: ST_TO_ADDR
13941: GO 14001
13943: LD_INT 32
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 13962
13951: POP
// bc_type := b_siberite_power ; 33 :
13952: LD_ADDR_OWVAR 42
13956: PUSH
13957: LD_INT 28
13959: ST_TO_ADDR
13960: GO 14001
13962: LD_INT 33
13964: DOUBLE
13965: EQUAL
13966: IFTRUE 13970
13968: GO 13981
13970: POP
// bc_type := b_oil_mine ; 34 :
13971: LD_ADDR_OWVAR 42
13975: PUSH
13976: LD_INT 29
13978: ST_TO_ADDR
13979: GO 14001
13981: LD_INT 34
13983: DOUBLE
13984: EQUAL
13985: IFTRUE 13989
13987: GO 14000
13989: POP
// bc_type := b_siberite_mine ; end ;
13990: LD_ADDR_OWVAR 42
13994: PUSH
13995: LD_INT 30
13997: ST_TO_ADDR
13998: GO 14001
14000: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14001: LD_ADDR_VAR 0 8
14005: PUSH
14006: LD_VAR 0 5
14010: PPUSH
14011: LD_VAR 0 6
14015: PPUSH
14016: LD_VAR 0 3
14020: PPUSH
14021: CALL_OW 47
14025: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14026: LD_OWVAR 42
14030: PUSH
14031: LD_INT 32
14033: PUSH
14034: LD_INT 33
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: IN
14041: IFFALSE 14057
// PlaceWeaponTurret ( b , weapon ) ;
14043: LD_VAR 0 8
14047: PPUSH
14048: LD_VAR 0 4
14052: PPUSH
14053: CALL_OW 431
// end ;
14057: LD_VAR 0 7
14061: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14062: LD_INT 0
14064: PPUSH
14065: PPUSH
14066: PPUSH
14067: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14068: LD_ADDR_VAR 0 4
14072: PUSH
14073: LD_INT 22
14075: PUSH
14076: LD_OWVAR 2
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 2
14087: PUSH
14088: LD_INT 30
14090: PUSH
14091: LD_INT 0
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 30
14100: PUSH
14101: LD_INT 1
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PPUSH
14117: CALL_OW 69
14121: ST_TO_ADDR
// if not tmp then
14122: LD_VAR 0 4
14126: NOT
14127: IFFALSE 14131
// exit ;
14129: GO 14190
// for i in tmp do
14131: LD_ADDR_VAR 0 2
14135: PUSH
14136: LD_VAR 0 4
14140: PUSH
14141: FOR_IN
14142: IFFALSE 14188
// for j = 1 to 3 do
14144: LD_ADDR_VAR 0 3
14148: PUSH
14149: DOUBLE
14150: LD_INT 1
14152: DEC
14153: ST_TO_ADDR
14154: LD_INT 3
14156: PUSH
14157: FOR_TO
14158: IFFALSE 14184
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14160: LD_VAR 0 2
14164: PPUSH
14165: CALL_OW 274
14169: PPUSH
14170: LD_VAR 0 3
14174: PPUSH
14175: LD_INT 99999
14177: PPUSH
14178: CALL_OW 277
14182: GO 14157
14184: POP
14185: POP
14186: GO 14141
14188: POP
14189: POP
// end ;
14190: LD_VAR 0 1
14194: RET
// export function hHackSetLevel10 ; var i , j ; begin
14195: LD_INT 0
14197: PPUSH
14198: PPUSH
14199: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 1
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL_OW 69
14219: PUSH
14220: FOR_IN
14221: IFFALSE 14273
// if IsSelected ( i ) then
14223: LD_VAR 0 2
14227: PPUSH
14228: CALL_OW 306
14232: IFFALSE 14271
// begin for j := 1 to 4 do
14234: LD_ADDR_VAR 0 3
14238: PUSH
14239: DOUBLE
14240: LD_INT 1
14242: DEC
14243: ST_TO_ADDR
14244: LD_INT 4
14246: PUSH
14247: FOR_TO
14248: IFFALSE 14269
// SetSkill ( i , j , 10 ) ;
14250: LD_VAR 0 2
14254: PPUSH
14255: LD_VAR 0 3
14259: PPUSH
14260: LD_INT 10
14262: PPUSH
14263: CALL_OW 237
14267: GO 14247
14269: POP
14270: POP
// end ;
14271: GO 14220
14273: POP
14274: POP
// end ;
14275: LD_VAR 0 1
14279: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14280: LD_INT 0
14282: PPUSH
14283: PPUSH
14284: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14285: LD_ADDR_VAR 0 2
14289: PUSH
14290: LD_INT 22
14292: PUSH
14293: LD_OWVAR 2
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 1
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PPUSH
14316: CALL_OW 69
14320: PUSH
14321: FOR_IN
14322: IFFALSE 14363
// begin for j := 1 to 4 do
14324: LD_ADDR_VAR 0 3
14328: PUSH
14329: DOUBLE
14330: LD_INT 1
14332: DEC
14333: ST_TO_ADDR
14334: LD_INT 4
14336: PUSH
14337: FOR_TO
14338: IFFALSE 14359
// SetSkill ( i , j , 10 ) ;
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_VAR 0 3
14349: PPUSH
14350: LD_INT 10
14352: PPUSH
14353: CALL_OW 237
14357: GO 14337
14359: POP
14360: POP
// end ;
14361: GO 14321
14363: POP
14364: POP
// end ;
14365: LD_VAR 0 1
14369: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14370: LD_INT 0
14372: PPUSH
// uc_side := your_side ;
14373: LD_ADDR_OWVAR 20
14377: PUSH
14378: LD_OWVAR 2
14382: ST_TO_ADDR
// uc_nation := nation ;
14383: LD_ADDR_OWVAR 21
14387: PUSH
14388: LD_VAR 0 1
14392: ST_TO_ADDR
// InitHc ;
14393: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14397: LD_INT 0
14399: PPUSH
14400: LD_VAR 0 2
14404: PPUSH
14405: LD_VAR 0 3
14409: PPUSH
14410: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14414: LD_VAR 0 4
14418: PPUSH
14419: LD_VAR 0 5
14423: PPUSH
14424: CALL_OW 428
14428: PUSH
14429: LD_INT 0
14431: EQUAL
14432: IFFALSE 14456
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14434: CALL_OW 44
14438: PPUSH
14439: LD_VAR 0 4
14443: PPUSH
14444: LD_VAR 0 5
14448: PPUSH
14449: LD_INT 1
14451: PPUSH
14452: CALL_OW 48
// end ;
14456: LD_VAR 0 6
14460: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14461: LD_INT 0
14463: PPUSH
14464: PPUSH
// uc_side := your_side ;
14465: LD_ADDR_OWVAR 20
14469: PUSH
14470: LD_OWVAR 2
14474: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14475: LD_VAR 0 1
14479: PUSH
14480: LD_INT 1
14482: PUSH
14483: LD_INT 2
14485: PUSH
14486: LD_INT 3
14488: PUSH
14489: LD_INT 4
14491: PUSH
14492: LD_INT 5
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: IN
14502: IFFALSE 14514
// uc_nation := nation_american else
14504: LD_ADDR_OWVAR 21
14508: PUSH
14509: LD_INT 1
14511: ST_TO_ADDR
14512: GO 14557
// if chassis in [ 11 , 12 , 13 , 14 ] then
14514: LD_VAR 0 1
14518: PUSH
14519: LD_INT 11
14521: PUSH
14522: LD_INT 12
14524: PUSH
14525: LD_INT 13
14527: PUSH
14528: LD_INT 14
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: IN
14537: IFFALSE 14549
// uc_nation := nation_arabian else
14539: LD_ADDR_OWVAR 21
14543: PUSH
14544: LD_INT 2
14546: ST_TO_ADDR
14547: GO 14557
// uc_nation := nation_russian ;
14549: LD_ADDR_OWVAR 21
14553: PUSH
14554: LD_INT 3
14556: ST_TO_ADDR
// vc_chassis := chassis ;
14557: LD_ADDR_OWVAR 37
14561: PUSH
14562: LD_VAR 0 1
14566: ST_TO_ADDR
// vc_engine := engine ;
14567: LD_ADDR_OWVAR 39
14571: PUSH
14572: LD_VAR 0 2
14576: ST_TO_ADDR
// vc_control := control ;
14577: LD_ADDR_OWVAR 38
14581: PUSH
14582: LD_VAR 0 3
14586: ST_TO_ADDR
// vc_weapon := weapon ;
14587: LD_ADDR_OWVAR 40
14591: PUSH
14592: LD_VAR 0 4
14596: ST_TO_ADDR
// un := CreateVehicle ;
14597: LD_ADDR_VAR 0 8
14601: PUSH
14602: CALL_OW 45
14606: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14607: LD_VAR 0 8
14611: PPUSH
14612: LD_INT 0
14614: PPUSH
14615: LD_INT 5
14617: PPUSH
14618: CALL_OW 12
14622: PPUSH
14623: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14627: LD_VAR 0 8
14631: PPUSH
14632: LD_VAR 0 5
14636: PPUSH
14637: LD_VAR 0 6
14641: PPUSH
14642: LD_INT 1
14644: PPUSH
14645: CALL_OW 48
// end ;
14649: LD_VAR 0 7
14653: RET
// export hInvincible ; every 1 do
14654: GO 14656
14656: DISABLE
// hInvincible := [ ] ;
14657: LD_ADDR_EXP 76
14661: PUSH
14662: EMPTY
14663: ST_TO_ADDR
14664: END
// every 10 do var i ;
14665: GO 14667
14667: DISABLE
14668: LD_INT 0
14670: PPUSH
// begin enable ;
14671: ENABLE
// if not hInvincible then
14672: LD_EXP 76
14676: NOT
14677: IFFALSE 14681
// exit ;
14679: GO 14725
// for i in hInvincible do
14681: LD_ADDR_VAR 0 1
14685: PUSH
14686: LD_EXP 76
14690: PUSH
14691: FOR_IN
14692: IFFALSE 14723
// if GetLives ( i ) < 1000 then
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 256
14703: PUSH
14704: LD_INT 1000
14706: LESS
14707: IFFALSE 14721
// SetLives ( i , 1000 ) ;
14709: LD_VAR 0 1
14713: PPUSH
14714: LD_INT 1000
14716: PPUSH
14717: CALL_OW 234
14721: GO 14691
14723: POP
14724: POP
// end ;
14725: PPOPN 1
14727: END
// export function hHackInvincible ; var i ; begin
14728: LD_INT 0
14730: PPUSH
14731: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_INT 2
14739: PUSH
14740: LD_INT 21
14742: PUSH
14743: LD_INT 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 21
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 69
14769: PUSH
14770: FOR_IN
14771: IFFALSE 14832
// if IsSelected ( i ) then
14773: LD_VAR 0 2
14777: PPUSH
14778: CALL_OW 306
14782: IFFALSE 14830
// begin if i in hInvincible then
14784: LD_VAR 0 2
14788: PUSH
14789: LD_EXP 76
14793: IN
14794: IFFALSE 14814
// hInvincible := hInvincible diff i else
14796: LD_ADDR_EXP 76
14800: PUSH
14801: LD_EXP 76
14805: PUSH
14806: LD_VAR 0 2
14810: DIFF
14811: ST_TO_ADDR
14812: GO 14830
// hInvincible := hInvincible union i ;
14814: LD_ADDR_EXP 76
14818: PUSH
14819: LD_EXP 76
14823: PUSH
14824: LD_VAR 0 2
14828: UNION
14829: ST_TO_ADDR
// end ;
14830: GO 14770
14832: POP
14833: POP
// end ;
14834: LD_VAR 0 1
14838: RET
// export function hHackInvisible ; var i , j ; begin
14839: LD_INT 0
14841: PPUSH
14842: PPUSH
14843: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14844: LD_ADDR_VAR 0 2
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 1
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: PUSH
14864: FOR_IN
14865: IFFALSE 14889
// if IsSelected ( i ) then
14867: LD_VAR 0 2
14871: PPUSH
14872: CALL_OW 306
14876: IFFALSE 14887
// ComForceInvisible ( i ) ;
14878: LD_VAR 0 2
14882: PPUSH
14883: CALL_OW 496
14887: GO 14864
14889: POP
14890: POP
// end ;
14891: LD_VAR 0 1
14895: RET
// export function hHackChangeYourSide ; begin
14896: LD_INT 0
14898: PPUSH
// if your_side = 8 then
14899: LD_OWVAR 2
14903: PUSH
14904: LD_INT 8
14906: EQUAL
14907: IFFALSE 14919
// your_side := 0 else
14909: LD_ADDR_OWVAR 2
14913: PUSH
14914: LD_INT 0
14916: ST_TO_ADDR
14917: GO 14933
// your_side := your_side + 1 ;
14919: LD_ADDR_OWVAR 2
14923: PUSH
14924: LD_OWVAR 2
14928: PUSH
14929: LD_INT 1
14931: PLUS
14932: ST_TO_ADDR
// end ;
14933: LD_VAR 0 1
14937: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
// for i in all_units do
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_OWVAR 3
14952: PUSH
14953: FOR_IN
14954: IFFALSE 15032
// if IsSelected ( i ) then
14956: LD_VAR 0 2
14960: PPUSH
14961: CALL_OW 306
14965: IFFALSE 15030
// begin j := GetSide ( i ) ;
14967: LD_ADDR_VAR 0 3
14971: PUSH
14972: LD_VAR 0 2
14976: PPUSH
14977: CALL_OW 255
14981: ST_TO_ADDR
// if j = 8 then
14982: LD_VAR 0 3
14986: PUSH
14987: LD_INT 8
14989: EQUAL
14990: IFFALSE 15002
// j := 0 else
14992: LD_ADDR_VAR 0 3
14996: PUSH
14997: LD_INT 0
14999: ST_TO_ADDR
15000: GO 15016
// j := j + 1 ;
15002: LD_ADDR_VAR 0 3
15006: PUSH
15007: LD_VAR 0 3
15011: PUSH
15012: LD_INT 1
15014: PLUS
15015: ST_TO_ADDR
// SetSide ( i , j ) ;
15016: LD_VAR 0 2
15020: PPUSH
15021: LD_VAR 0 3
15025: PPUSH
15026: CALL_OW 235
// end ;
15030: GO 14953
15032: POP
15033: POP
// end ;
15034: LD_VAR 0 1
15038: RET
// export function hHackFog ; begin
15039: LD_INT 0
15041: PPUSH
// FogOff ( true ) ;
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 344
// end ;
15049: LD_VAR 0 1
15053: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15054: LD_INT 0
15056: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15057: LD_VAR 0 1
15061: PPUSH
15062: LD_VAR 0 2
15066: PPUSH
15067: LD_VAR 0 3
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: LD_INT 1
15077: PPUSH
15078: CALL_OW 483
// CenterOnXY ( x , y ) ;
15082: LD_VAR 0 2
15086: PPUSH
15087: LD_VAR 0 3
15091: PPUSH
15092: CALL_OW 84
// end ; end_of_file
15096: LD_VAR 0 4
15100: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15101: LD_INT 0
15103: PPUSH
15104: PPUSH
// if exist_mode then
15105: LD_VAR 0 2
15109: IFFALSE 15134
// unit := CreateCharacter ( prefix & ident ) else
15111: LD_ADDR_VAR 0 5
15115: PUSH
15116: LD_VAR 0 3
15120: PUSH
15121: LD_VAR 0 1
15125: STR
15126: PPUSH
15127: CALL_OW 34
15131: ST_TO_ADDR
15132: GO 15149
// unit := NewCharacter ( ident ) ;
15134: LD_ADDR_VAR 0 5
15138: PUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 25
15148: ST_TO_ADDR
// result := unit ;
15149: LD_ADDR_VAR 0 4
15153: PUSH
15154: LD_VAR 0 5
15158: ST_TO_ADDR
// end ;
15159: LD_VAR 0 4
15163: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15164: LD_INT 0
15166: PPUSH
15167: PPUSH
// if not side or not nation then
15168: LD_VAR 0 1
15172: NOT
15173: PUSH
15174: LD_VAR 0 2
15178: NOT
15179: OR
15180: IFFALSE 15184
// exit ;
15182: GO 15948
// case nation of nation_american :
15184: LD_VAR 0 2
15188: PUSH
15189: LD_INT 1
15191: DOUBLE
15192: EQUAL
15193: IFTRUE 15197
15195: GO 15411
15197: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15198: LD_ADDR_VAR 0 4
15202: PUSH
15203: LD_INT 35
15205: PUSH
15206: LD_INT 45
15208: PUSH
15209: LD_INT 46
15211: PUSH
15212: LD_INT 47
15214: PUSH
15215: LD_INT 82
15217: PUSH
15218: LD_INT 83
15220: PUSH
15221: LD_INT 84
15223: PUSH
15224: LD_INT 85
15226: PUSH
15227: LD_INT 86
15229: PUSH
15230: LD_INT 1
15232: PUSH
15233: LD_INT 2
15235: PUSH
15236: LD_INT 6
15238: PUSH
15239: LD_INT 15
15241: PUSH
15242: LD_INT 16
15244: PUSH
15245: LD_INT 7
15247: PUSH
15248: LD_INT 12
15250: PUSH
15251: LD_INT 13
15253: PUSH
15254: LD_INT 10
15256: PUSH
15257: LD_INT 14
15259: PUSH
15260: LD_INT 20
15262: PUSH
15263: LD_INT 21
15265: PUSH
15266: LD_INT 22
15268: PUSH
15269: LD_INT 25
15271: PUSH
15272: LD_INT 32
15274: PUSH
15275: LD_INT 27
15277: PUSH
15278: LD_INT 36
15280: PUSH
15281: LD_INT 69
15283: PUSH
15284: LD_INT 39
15286: PUSH
15287: LD_INT 34
15289: PUSH
15290: LD_INT 40
15292: PUSH
15293: LD_INT 48
15295: PUSH
15296: LD_INT 49
15298: PUSH
15299: LD_INT 50
15301: PUSH
15302: LD_INT 51
15304: PUSH
15305: LD_INT 52
15307: PUSH
15308: LD_INT 53
15310: PUSH
15311: LD_INT 54
15313: PUSH
15314: LD_INT 55
15316: PUSH
15317: LD_INT 56
15319: PUSH
15320: LD_INT 57
15322: PUSH
15323: LD_INT 58
15325: PUSH
15326: LD_INT 59
15328: PUSH
15329: LD_INT 60
15331: PUSH
15332: LD_INT 61
15334: PUSH
15335: LD_INT 62
15337: PUSH
15338: LD_INT 80
15340: PUSH
15341: LD_INT 82
15343: PUSH
15344: LD_INT 83
15346: PUSH
15347: LD_INT 84
15349: PUSH
15350: LD_INT 85
15352: PUSH
15353: LD_INT 86
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: ST_TO_ADDR
15409: GO 15872
15411: LD_INT 2
15413: DOUBLE
15414: EQUAL
15415: IFTRUE 15419
15417: GO 15641
15419: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
15420: LD_ADDR_VAR 0 4
15424: PUSH
15425: LD_INT 35
15427: PUSH
15428: LD_INT 45
15430: PUSH
15431: LD_INT 46
15433: PUSH
15434: LD_INT 47
15436: PUSH
15437: LD_INT 82
15439: PUSH
15440: LD_INT 83
15442: PUSH
15443: LD_INT 84
15445: PUSH
15446: LD_INT 85
15448: PUSH
15449: LD_INT 87
15451: PUSH
15452: LD_INT 70
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: LD_INT 11
15460: PUSH
15461: LD_INT 3
15463: PUSH
15464: LD_INT 4
15466: PUSH
15467: LD_INT 5
15469: PUSH
15470: LD_INT 6
15472: PUSH
15473: LD_INT 15
15475: PUSH
15476: LD_INT 18
15478: PUSH
15479: LD_INT 7
15481: PUSH
15482: LD_INT 17
15484: PUSH
15485: LD_INT 8
15487: PUSH
15488: LD_INT 20
15490: PUSH
15491: LD_INT 21
15493: PUSH
15494: LD_INT 22
15496: PUSH
15497: LD_INT 72
15499: PUSH
15500: LD_INT 26
15502: PUSH
15503: LD_INT 69
15505: PUSH
15506: LD_INT 39
15508: PUSH
15509: LD_INT 40
15511: PUSH
15512: LD_INT 41
15514: PUSH
15515: LD_INT 42
15517: PUSH
15518: LD_INT 43
15520: PUSH
15521: LD_INT 48
15523: PUSH
15524: LD_INT 49
15526: PUSH
15527: LD_INT 50
15529: PUSH
15530: LD_INT 51
15532: PUSH
15533: LD_INT 52
15535: PUSH
15536: LD_INT 53
15538: PUSH
15539: LD_INT 54
15541: PUSH
15542: LD_INT 55
15544: PUSH
15545: LD_INT 56
15547: PUSH
15548: LD_INT 60
15550: PUSH
15551: LD_INT 61
15553: PUSH
15554: LD_INT 62
15556: PUSH
15557: LD_INT 66
15559: PUSH
15560: LD_INT 67
15562: PUSH
15563: LD_INT 68
15565: PUSH
15566: LD_INT 81
15568: PUSH
15569: LD_INT 82
15571: PUSH
15572: LD_INT 83
15574: PUSH
15575: LD_INT 84
15577: PUSH
15578: LD_INT 85
15580: PUSH
15581: LD_INT 87
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: ST_TO_ADDR
15639: GO 15872
15641: LD_INT 3
15643: DOUBLE
15644: EQUAL
15645: IFTRUE 15649
15647: GO 15871
15649: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15650: LD_ADDR_VAR 0 4
15654: PUSH
15655: LD_INT 46
15657: PUSH
15658: LD_INT 47
15660: PUSH
15661: LD_INT 1
15663: PUSH
15664: LD_INT 2
15666: PUSH
15667: LD_INT 82
15669: PUSH
15670: LD_INT 83
15672: PUSH
15673: LD_INT 84
15675: PUSH
15676: LD_INT 85
15678: PUSH
15679: LD_INT 86
15681: PUSH
15682: LD_INT 11
15684: PUSH
15685: LD_INT 9
15687: PUSH
15688: LD_INT 20
15690: PUSH
15691: LD_INT 19
15693: PUSH
15694: LD_INT 21
15696: PUSH
15697: LD_INT 24
15699: PUSH
15700: LD_INT 22
15702: PUSH
15703: LD_INT 25
15705: PUSH
15706: LD_INT 28
15708: PUSH
15709: LD_INT 29
15711: PUSH
15712: LD_INT 30
15714: PUSH
15715: LD_INT 31
15717: PUSH
15718: LD_INT 37
15720: PUSH
15721: LD_INT 38
15723: PUSH
15724: LD_INT 32
15726: PUSH
15727: LD_INT 27
15729: PUSH
15730: LD_INT 33
15732: PUSH
15733: LD_INT 69
15735: PUSH
15736: LD_INT 39
15738: PUSH
15739: LD_INT 34
15741: PUSH
15742: LD_INT 40
15744: PUSH
15745: LD_INT 71
15747: PUSH
15748: LD_INT 23
15750: PUSH
15751: LD_INT 44
15753: PUSH
15754: LD_INT 48
15756: PUSH
15757: LD_INT 49
15759: PUSH
15760: LD_INT 50
15762: PUSH
15763: LD_INT 51
15765: PUSH
15766: LD_INT 52
15768: PUSH
15769: LD_INT 53
15771: PUSH
15772: LD_INT 54
15774: PUSH
15775: LD_INT 55
15777: PUSH
15778: LD_INT 56
15780: PUSH
15781: LD_INT 57
15783: PUSH
15784: LD_INT 58
15786: PUSH
15787: LD_INT 59
15789: PUSH
15790: LD_INT 63
15792: PUSH
15793: LD_INT 64
15795: PUSH
15796: LD_INT 65
15798: PUSH
15799: LD_INT 82
15801: PUSH
15802: LD_INT 83
15804: PUSH
15805: LD_INT 84
15807: PUSH
15808: LD_INT 85
15810: PUSH
15811: LD_INT 86
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: ST_TO_ADDR
15869: GO 15872
15871: POP
// if state > - 1 and state < 3 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 1
15879: NEG
15880: GREATER
15881: PUSH
15882: LD_VAR 0 3
15886: PUSH
15887: LD_INT 3
15889: LESS
15890: AND
15891: IFFALSE 15948
// for i in result do
15893: LD_ADDR_VAR 0 5
15897: PUSH
15898: LD_VAR 0 4
15902: PUSH
15903: FOR_IN
15904: IFFALSE 15946
// if GetTech ( i , side ) <> state then
15906: LD_VAR 0 5
15910: PPUSH
15911: LD_VAR 0 1
15915: PPUSH
15916: CALL_OW 321
15920: PUSH
15921: LD_VAR 0 3
15925: NONEQUAL
15926: IFFALSE 15944
// result := result diff i ;
15928: LD_ADDR_VAR 0 4
15932: PUSH
15933: LD_VAR 0 4
15937: PUSH
15938: LD_VAR 0 5
15942: DIFF
15943: ST_TO_ADDR
15944: GO 15903
15946: POP
15947: POP
// end ;
15948: LD_VAR 0 4
15952: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15953: LD_INT 0
15955: PPUSH
15956: PPUSH
15957: PPUSH
// result := true ;
15958: LD_ADDR_VAR 0 3
15962: PUSH
15963: LD_INT 1
15965: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15966: LD_ADDR_VAR 0 5
15970: PUSH
15971: LD_VAR 0 2
15975: PPUSH
15976: CALL_OW 480
15980: ST_TO_ADDR
// if not tmp then
15981: LD_VAR 0 5
15985: NOT
15986: IFFALSE 15990
// exit ;
15988: GO 16039
// for i in tmp do
15990: LD_ADDR_VAR 0 4
15994: PUSH
15995: LD_VAR 0 5
15999: PUSH
16000: FOR_IN
16001: IFFALSE 16037
// if GetTech ( i , side ) <> state_researched then
16003: LD_VAR 0 4
16007: PPUSH
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL_OW 321
16017: PUSH
16018: LD_INT 2
16020: NONEQUAL
16021: IFFALSE 16035
// begin result := false ;
16023: LD_ADDR_VAR 0 3
16027: PUSH
16028: LD_INT 0
16030: ST_TO_ADDR
// exit ;
16031: POP
16032: POP
16033: GO 16039
// end ;
16035: GO 16000
16037: POP
16038: POP
// end ;
16039: LD_VAR 0 3
16043: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16044: LD_INT 0
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16059: LD_VAR 0 1
16063: NOT
16064: PUSH
16065: LD_VAR 0 1
16069: PPUSH
16070: CALL_OW 257
16074: PUSH
16075: LD_INT 9
16077: NONEQUAL
16078: OR
16079: IFFALSE 16083
// exit ;
16081: GO 16656
// side := GetSide ( unit ) ;
16083: LD_ADDR_VAR 0 9
16087: PUSH
16088: LD_VAR 0 1
16092: PPUSH
16093: CALL_OW 255
16097: ST_TO_ADDR
// tech_space := tech_spacanom ;
16098: LD_ADDR_VAR 0 12
16102: PUSH
16103: LD_INT 29
16105: ST_TO_ADDR
// tech_time := tech_taurad ;
16106: LD_ADDR_VAR 0 13
16110: PUSH
16111: LD_INT 28
16113: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16114: LD_ADDR_VAR 0 11
16118: PUSH
16119: LD_VAR 0 1
16123: PPUSH
16124: CALL_OW 310
16128: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16129: LD_VAR 0 11
16133: PPUSH
16134: CALL_OW 247
16138: PUSH
16139: LD_INT 2
16141: EQUAL
16142: IFFALSE 16146
// exit ;
16144: GO 16656
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16146: LD_ADDR_VAR 0 8
16150: PUSH
16151: LD_INT 81
16153: PUSH
16154: LD_VAR 0 9
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 3
16165: PUSH
16166: LD_INT 21
16168: PUSH
16169: LD_INT 3
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PPUSH
16184: CALL_OW 69
16188: ST_TO_ADDR
// if not tmp then
16189: LD_VAR 0 8
16193: NOT
16194: IFFALSE 16198
// exit ;
16196: GO 16656
// if in_unit then
16198: LD_VAR 0 11
16202: IFFALSE 16226
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16204: LD_ADDR_VAR 0 10
16208: PUSH
16209: LD_VAR 0 8
16213: PPUSH
16214: LD_VAR 0 11
16218: PPUSH
16219: CALL_OW 74
16223: ST_TO_ADDR
16224: GO 16246
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16226: LD_ADDR_VAR 0 10
16230: PUSH
16231: LD_VAR 0 8
16235: PPUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 74
16245: ST_TO_ADDR
// if not enemy then
16246: LD_VAR 0 10
16250: NOT
16251: IFFALSE 16255
// exit ;
16253: GO 16656
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16255: LD_VAR 0 11
16259: PUSH
16260: LD_VAR 0 11
16264: PPUSH
16265: LD_VAR 0 10
16269: PPUSH
16270: CALL_OW 296
16274: PUSH
16275: LD_INT 13
16277: GREATER
16278: AND
16279: PUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_VAR 0 10
16289: PPUSH
16290: CALL_OW 296
16294: PUSH
16295: LD_INT 12
16297: GREATER
16298: OR
16299: IFFALSE 16303
// exit ;
16301: GO 16656
// missile := [ 1 ] ;
16303: LD_ADDR_VAR 0 14
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16314: LD_VAR 0 9
16318: PPUSH
16319: LD_VAR 0 12
16323: PPUSH
16324: CALL_OW 325
16328: IFFALSE 16357
// missile := Insert ( missile , missile + 1 , 2 ) ;
16330: LD_ADDR_VAR 0 14
16334: PUSH
16335: LD_VAR 0 14
16339: PPUSH
16340: LD_VAR 0 14
16344: PUSH
16345: LD_INT 1
16347: PLUS
16348: PPUSH
16349: LD_INT 2
16351: PPUSH
16352: CALL_OW 2
16356: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16357: LD_VAR 0 9
16361: PPUSH
16362: LD_VAR 0 13
16366: PPUSH
16367: CALL_OW 325
16371: PUSH
16372: LD_VAR 0 10
16376: PPUSH
16377: CALL_OW 255
16381: PPUSH
16382: LD_VAR 0 13
16386: PPUSH
16387: CALL_OW 325
16391: NOT
16392: AND
16393: IFFALSE 16422
// missile := Insert ( missile , missile + 1 , 3 ) ;
16395: LD_ADDR_VAR 0 14
16399: PUSH
16400: LD_VAR 0 14
16404: PPUSH
16405: LD_VAR 0 14
16409: PUSH
16410: LD_INT 1
16412: PLUS
16413: PPUSH
16414: LD_INT 3
16416: PPUSH
16417: CALL_OW 2
16421: ST_TO_ADDR
// if missile < 2 then
16422: LD_VAR 0 14
16426: PUSH
16427: LD_INT 2
16429: LESS
16430: IFFALSE 16434
// exit ;
16432: GO 16656
// x := GetX ( enemy ) ;
16434: LD_ADDR_VAR 0 4
16438: PUSH
16439: LD_VAR 0 10
16443: PPUSH
16444: CALL_OW 250
16448: ST_TO_ADDR
// y := GetY ( enemy ) ;
16449: LD_ADDR_VAR 0 5
16453: PUSH
16454: LD_VAR 0 10
16458: PPUSH
16459: CALL_OW 251
16463: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16464: LD_ADDR_VAR 0 6
16468: PUSH
16469: LD_VAR 0 4
16473: PUSH
16474: LD_INT 1
16476: NEG
16477: PPUSH
16478: LD_INT 1
16480: PPUSH
16481: CALL_OW 12
16485: PLUS
16486: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16487: LD_ADDR_VAR 0 7
16491: PUSH
16492: LD_VAR 0 5
16496: PUSH
16497: LD_INT 1
16499: NEG
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: CALL_OW 12
16508: PLUS
16509: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16510: LD_VAR 0 6
16514: PPUSH
16515: LD_VAR 0 7
16519: PPUSH
16520: CALL_OW 488
16524: NOT
16525: IFFALSE 16547
// begin _x := x ;
16527: LD_ADDR_VAR 0 6
16531: PUSH
16532: LD_VAR 0 4
16536: ST_TO_ADDR
// _y := y ;
16537: LD_ADDR_VAR 0 7
16541: PUSH
16542: LD_VAR 0 5
16546: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16547: LD_ADDR_VAR 0 3
16551: PUSH
16552: LD_INT 1
16554: PPUSH
16555: LD_VAR 0 14
16559: PPUSH
16560: CALL_OW 12
16564: ST_TO_ADDR
// case i of 1 :
16565: LD_VAR 0 3
16569: PUSH
16570: LD_INT 1
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16578
16576: GO 16595
16578: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16579: LD_VAR 0 1
16583: PPUSH
16584: LD_VAR 0 10
16588: PPUSH
16589: CALL_OW 115
16593: GO 16656
16595: LD_INT 2
16597: DOUBLE
16598: EQUAL
16599: IFTRUE 16603
16601: GO 16625
16603: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16604: LD_VAR 0 1
16608: PPUSH
16609: LD_VAR 0 6
16613: PPUSH
16614: LD_VAR 0 7
16618: PPUSH
16619: CALL_OW 153
16623: GO 16656
16625: LD_INT 3
16627: DOUBLE
16628: EQUAL
16629: IFTRUE 16633
16631: GO 16655
16633: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16634: LD_VAR 0 1
16638: PPUSH
16639: LD_VAR 0 6
16643: PPUSH
16644: LD_VAR 0 7
16648: PPUSH
16649: CALL_OW 154
16653: GO 16656
16655: POP
// end ;
16656: LD_VAR 0 2
16660: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16661: LD_INT 0
16663: PPUSH
16664: PPUSH
16665: PPUSH
16666: PPUSH
16667: PPUSH
16668: PPUSH
// if not unit or not building then
16669: LD_VAR 0 1
16673: NOT
16674: PUSH
16675: LD_VAR 0 2
16679: NOT
16680: OR
16681: IFFALSE 16685
// exit ;
16683: GO 16843
// x := GetX ( building ) ;
16685: LD_ADDR_VAR 0 5
16689: PUSH
16690: LD_VAR 0 2
16694: PPUSH
16695: CALL_OW 250
16699: ST_TO_ADDR
// y := GetY ( building ) ;
16700: LD_ADDR_VAR 0 6
16704: PUSH
16705: LD_VAR 0 2
16709: PPUSH
16710: CALL_OW 251
16714: ST_TO_ADDR
// for i = 0 to 5 do
16715: LD_ADDR_VAR 0 4
16719: PUSH
16720: DOUBLE
16721: LD_INT 0
16723: DEC
16724: ST_TO_ADDR
16725: LD_INT 5
16727: PUSH
16728: FOR_TO
16729: IFFALSE 16841
// begin _x := ShiftX ( x , i , 3 ) ;
16731: LD_ADDR_VAR 0 7
16735: PUSH
16736: LD_VAR 0 5
16740: PPUSH
16741: LD_VAR 0 4
16745: PPUSH
16746: LD_INT 3
16748: PPUSH
16749: CALL_OW 272
16753: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16754: LD_ADDR_VAR 0 8
16758: PUSH
16759: LD_VAR 0 6
16763: PPUSH
16764: LD_VAR 0 4
16768: PPUSH
16769: LD_INT 3
16771: PPUSH
16772: CALL_OW 273
16776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16777: LD_VAR 0 7
16781: PPUSH
16782: LD_VAR 0 8
16786: PPUSH
16787: CALL_OW 488
16791: NOT
16792: IFFALSE 16796
// continue ;
16794: GO 16728
// if HexInfo ( _x , _y ) = 0 then
16796: LD_VAR 0 7
16800: PPUSH
16801: LD_VAR 0 8
16805: PPUSH
16806: CALL_OW 428
16810: PUSH
16811: LD_INT 0
16813: EQUAL
16814: IFFALSE 16839
// begin ComMoveXY ( unit , _x , _y ) ;
16816: LD_VAR 0 1
16820: PPUSH
16821: LD_VAR 0 7
16825: PPUSH
16826: LD_VAR 0 8
16830: PPUSH
16831: CALL_OW 111
// exit ;
16835: POP
16836: POP
16837: GO 16843
// end ; end ;
16839: GO 16728
16841: POP
16842: POP
// end ;
16843: LD_VAR 0 3
16847: RET
// export function ScanBase ( side , base_area ) ; begin
16848: LD_INT 0
16850: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16851: LD_ADDR_VAR 0 3
16855: PUSH
16856: LD_VAR 0 2
16860: PPUSH
16861: LD_INT 81
16863: PUSH
16864: LD_VAR 0 1
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PPUSH
16873: CALL_OW 70
16877: ST_TO_ADDR
// end ;
16878: LD_VAR 0 3
16882: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16883: LD_INT 0
16885: PPUSH
16886: PPUSH
16887: PPUSH
16888: PPUSH
// result := false ;
16889: LD_ADDR_VAR 0 2
16893: PUSH
16894: LD_INT 0
16896: ST_TO_ADDR
// side := GetSide ( unit ) ;
16897: LD_ADDR_VAR 0 3
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 255
16911: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16912: LD_ADDR_VAR 0 4
16916: PUSH
16917: LD_VAR 0 1
16921: PPUSH
16922: CALL_OW 248
16926: ST_TO_ADDR
// case nat of 1 :
16927: LD_VAR 0 4
16931: PUSH
16932: LD_INT 1
16934: DOUBLE
16935: EQUAL
16936: IFTRUE 16940
16938: GO 16951
16940: POP
// tech := tech_lassight ; 2 :
16941: LD_ADDR_VAR 0 5
16945: PUSH
16946: LD_INT 12
16948: ST_TO_ADDR
16949: GO 16990
16951: LD_INT 2
16953: DOUBLE
16954: EQUAL
16955: IFTRUE 16959
16957: GO 16970
16959: POP
// tech := tech_mortar ; 3 :
16960: LD_ADDR_VAR 0 5
16964: PUSH
16965: LD_INT 41
16967: ST_TO_ADDR
16968: GO 16990
16970: LD_INT 3
16972: DOUBLE
16973: EQUAL
16974: IFTRUE 16978
16976: GO 16989
16978: POP
// tech := tech_bazooka ; end ;
16979: LD_ADDR_VAR 0 5
16983: PUSH
16984: LD_INT 44
16986: ST_TO_ADDR
16987: GO 16990
16989: POP
// if Researched ( side , tech ) then
16990: LD_VAR 0 3
16994: PPUSH
16995: LD_VAR 0 5
16999: PPUSH
17000: CALL_OW 325
17004: IFFALSE 17031
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17006: LD_ADDR_VAR 0 2
17010: PUSH
17011: LD_INT 5
17013: PUSH
17014: LD_INT 8
17016: PUSH
17017: LD_INT 9
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: PUSH
17025: LD_VAR 0 4
17029: ARRAY
17030: ST_TO_ADDR
// end ;
17031: LD_VAR 0 2
17035: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17036: LD_INT 0
17038: PPUSH
17039: PPUSH
17040: PPUSH
// if not mines then
17041: LD_VAR 0 2
17045: NOT
17046: IFFALSE 17050
// exit ;
17048: GO 17194
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17050: LD_ADDR_VAR 0 5
17054: PUSH
17055: LD_INT 81
17057: PUSH
17058: LD_VAR 0 1
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 3
17069: PUSH
17070: LD_INT 21
17072: PUSH
17073: LD_INT 3
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: ST_TO_ADDR
// for i in mines do
17093: LD_ADDR_VAR 0 4
17097: PUSH
17098: LD_VAR 0 2
17102: PUSH
17103: FOR_IN
17104: IFFALSE 17192
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17106: LD_VAR 0 4
17110: PUSH
17111: LD_INT 1
17113: ARRAY
17114: PPUSH
17115: LD_VAR 0 4
17119: PUSH
17120: LD_INT 2
17122: ARRAY
17123: PPUSH
17124: CALL_OW 458
17128: NOT
17129: IFFALSE 17133
// continue ;
17131: GO 17103
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17133: LD_VAR 0 4
17137: PUSH
17138: LD_INT 1
17140: ARRAY
17141: PPUSH
17142: LD_VAR 0 4
17146: PUSH
17147: LD_INT 2
17149: ARRAY
17150: PPUSH
17151: CALL_OW 428
17155: PUSH
17156: LD_VAR 0 5
17160: IN
17161: IFFALSE 17190
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17163: LD_VAR 0 4
17167: PUSH
17168: LD_INT 1
17170: ARRAY
17171: PPUSH
17172: LD_VAR 0 4
17176: PUSH
17177: LD_INT 2
17179: ARRAY
17180: PPUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 456
// end ;
17190: GO 17103
17192: POP
17193: POP
// end ;
17194: LD_VAR 0 3
17198: RET
// export function Count ( array ) ; var i ; begin
17199: LD_INT 0
17201: PPUSH
17202: PPUSH
// result := 0 ;
17203: LD_ADDR_VAR 0 2
17207: PUSH
17208: LD_INT 0
17210: ST_TO_ADDR
// for i in array do
17211: LD_ADDR_VAR 0 3
17215: PUSH
17216: LD_VAR 0 1
17220: PUSH
17221: FOR_IN
17222: IFFALSE 17246
// if i then
17224: LD_VAR 0 3
17228: IFFALSE 17244
// result := result + 1 ;
17230: LD_ADDR_VAR 0 2
17234: PUSH
17235: LD_VAR 0 2
17239: PUSH
17240: LD_INT 1
17242: PLUS
17243: ST_TO_ADDR
17244: GO 17221
17246: POP
17247: POP
// end ;
17248: LD_VAR 0 2
17252: RET
// export function IsEmpty ( building ) ; begin
17253: LD_INT 0
17255: PPUSH
// if not building then
17256: LD_VAR 0 1
17260: NOT
17261: IFFALSE 17265
// exit ;
17263: GO 17308
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17265: LD_ADDR_VAR 0 2
17269: PUSH
17270: LD_VAR 0 1
17274: PUSH
17275: LD_INT 22
17277: PUSH
17278: LD_VAR 0 1
17282: PPUSH
17283: CALL_OW 255
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 58
17294: PUSH
17295: EMPTY
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PPUSH
17302: CALL_OW 69
17306: IN
17307: ST_TO_ADDR
// end ;
17308: LD_VAR 0 2
17312: RET
// export function IsNotFull ( building ) ; begin
17313: LD_INT 0
17315: PPUSH
// if not building then
17316: LD_VAR 0 1
17320: NOT
17321: IFFALSE 17325
// exit ;
17323: GO 17344
// result := UnitsInside ( building ) < 6 ;
17325: LD_ADDR_VAR 0 2
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 313
17339: PUSH
17340: LD_INT 6
17342: LESS
17343: ST_TO_ADDR
// end ;
17344: LD_VAR 0 2
17348: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17349: LD_INT 0
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
// tmp := [ ] ;
17355: LD_ADDR_VAR 0 3
17359: PUSH
17360: EMPTY
17361: ST_TO_ADDR
// list := [ ] ;
17362: LD_ADDR_VAR 0 5
17366: PUSH
17367: EMPTY
17368: ST_TO_ADDR
// for i = 16 to 25 do
17369: LD_ADDR_VAR 0 4
17373: PUSH
17374: DOUBLE
17375: LD_INT 16
17377: DEC
17378: ST_TO_ADDR
17379: LD_INT 25
17381: PUSH
17382: FOR_TO
17383: IFFALSE 17456
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17385: LD_ADDR_VAR 0 3
17389: PUSH
17390: LD_VAR 0 3
17394: PUSH
17395: LD_INT 22
17397: PUSH
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL_OW 255
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 91
17414: PUSH
17415: LD_VAR 0 1
17419: PUSH
17420: LD_INT 6
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 30
17430: PUSH
17431: LD_VAR 0 4
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: PUSH
17445: EMPTY
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ADD
17453: ST_TO_ADDR
17454: GO 17382
17456: POP
17457: POP
// for i = 1 to tmp do
17458: LD_ADDR_VAR 0 4
17462: PUSH
17463: DOUBLE
17464: LD_INT 1
17466: DEC
17467: ST_TO_ADDR
17468: LD_VAR 0 3
17472: PUSH
17473: FOR_TO
17474: IFFALSE 17562
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17476: LD_ADDR_VAR 0 5
17480: PUSH
17481: LD_VAR 0 5
17485: PUSH
17486: LD_VAR 0 3
17490: PUSH
17491: LD_VAR 0 4
17495: ARRAY
17496: PPUSH
17497: CALL_OW 266
17501: PUSH
17502: LD_VAR 0 3
17506: PUSH
17507: LD_VAR 0 4
17511: ARRAY
17512: PPUSH
17513: CALL_OW 250
17517: PUSH
17518: LD_VAR 0 3
17522: PUSH
17523: LD_VAR 0 4
17527: ARRAY
17528: PPUSH
17529: CALL_OW 251
17533: PUSH
17534: LD_VAR 0 3
17538: PUSH
17539: LD_VAR 0 4
17543: ARRAY
17544: PPUSH
17545: CALL_OW 254
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: ADD
17559: ST_TO_ADDR
17560: GO 17473
17562: POP
17563: POP
// result := list ;
17564: LD_ADDR_VAR 0 2
17568: PUSH
17569: LD_VAR 0 5
17573: ST_TO_ADDR
// end ;
17574: LD_VAR 0 2
17578: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17579: LD_INT 0
17581: PPUSH
17582: PPUSH
17583: PPUSH
17584: PPUSH
17585: PPUSH
17586: PPUSH
17587: PPUSH
// if not factory then
17588: LD_VAR 0 1
17592: NOT
17593: IFFALSE 17597
// exit ;
17595: GO 18190
// if control = control_apeman then
17597: LD_VAR 0 4
17601: PUSH
17602: LD_INT 5
17604: EQUAL
17605: IFFALSE 17714
// begin tmp := UnitsInside ( factory ) ;
17607: LD_ADDR_VAR 0 8
17611: PUSH
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 313
17621: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17622: LD_VAR 0 8
17626: PPUSH
17627: LD_INT 25
17629: PUSH
17630: LD_INT 12
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PPUSH
17637: CALL_OW 72
17641: NOT
17642: IFFALSE 17652
// control := control_manual ;
17644: LD_ADDR_VAR 0 4
17648: PUSH
17649: LD_INT 1
17651: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17652: LD_ADDR_VAR 0 8
17656: PUSH
17657: LD_VAR 0 1
17661: PPUSH
17662: CALL 17349 0 1
17666: ST_TO_ADDR
// if tmp then
17667: LD_VAR 0 8
17671: IFFALSE 17714
// begin for i in tmp do
17673: LD_ADDR_VAR 0 7
17677: PUSH
17678: LD_VAR 0 8
17682: PUSH
17683: FOR_IN
17684: IFFALSE 17712
// if i [ 1 ] = b_ext_radio then
17686: LD_VAR 0 7
17690: PUSH
17691: LD_INT 1
17693: ARRAY
17694: PUSH
17695: LD_INT 22
17697: EQUAL
17698: IFFALSE 17710
// begin control := control_remote ;
17700: LD_ADDR_VAR 0 4
17704: PUSH
17705: LD_INT 2
17707: ST_TO_ADDR
// break ;
17708: GO 17712
// end ;
17710: GO 17683
17712: POP
17713: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17714: LD_VAR 0 1
17718: PPUSH
17719: LD_VAR 0 2
17723: PPUSH
17724: LD_VAR 0 3
17728: PPUSH
17729: LD_VAR 0 4
17733: PPUSH
17734: LD_VAR 0 5
17738: PPUSH
17739: CALL_OW 448
17743: IFFALSE 17778
// begin result := [ chassis , engine , control , weapon ] ;
17745: LD_ADDR_VAR 0 6
17749: PUSH
17750: LD_VAR 0 2
17754: PUSH
17755: LD_VAR 0 3
17759: PUSH
17760: LD_VAR 0 4
17764: PUSH
17765: LD_VAR 0 5
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: ST_TO_ADDR
// exit ;
17776: GO 18190
// end ; _chassis := AvailableChassisList ( factory ) ;
17778: LD_ADDR_VAR 0 9
17782: PUSH
17783: LD_VAR 0 1
17787: PPUSH
17788: CALL_OW 475
17792: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17793: LD_ADDR_VAR 0 11
17797: PUSH
17798: LD_VAR 0 1
17802: PPUSH
17803: CALL_OW 476
17807: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17808: LD_ADDR_VAR 0 12
17812: PUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 477
17822: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17823: LD_ADDR_VAR 0 10
17827: PUSH
17828: LD_VAR 0 1
17832: PPUSH
17833: CALL_OW 478
17837: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17838: LD_VAR 0 9
17842: NOT
17843: PUSH
17844: LD_VAR 0 11
17848: NOT
17849: OR
17850: PUSH
17851: LD_VAR 0 12
17855: NOT
17856: OR
17857: PUSH
17858: LD_VAR 0 10
17862: NOT
17863: OR
17864: IFFALSE 17899
// begin result := [ chassis , engine , control , weapon ] ;
17866: LD_ADDR_VAR 0 6
17870: PUSH
17871: LD_VAR 0 2
17875: PUSH
17876: LD_VAR 0 3
17880: PUSH
17881: LD_VAR 0 4
17885: PUSH
17886: LD_VAR 0 5
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: ST_TO_ADDR
// exit ;
17897: GO 18190
// end ; if not chassis in _chassis then
17899: LD_VAR 0 2
17903: PUSH
17904: LD_VAR 0 9
17908: IN
17909: NOT
17910: IFFALSE 17936
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17912: LD_ADDR_VAR 0 2
17916: PUSH
17917: LD_VAR 0 9
17921: PUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_VAR 0 9
17929: PPUSH
17930: CALL_OW 12
17934: ARRAY
17935: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17936: LD_VAR 0 2
17940: PPUSH
17941: LD_VAR 0 3
17945: PPUSH
17946: CALL 18195 0 2
17950: NOT
17951: IFFALSE 18010
// repeat engine := _engine [ 1 ] ;
17953: LD_ADDR_VAR 0 3
17957: PUSH
17958: LD_VAR 0 11
17962: PUSH
17963: LD_INT 1
17965: ARRAY
17966: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17967: LD_ADDR_VAR 0 11
17971: PUSH
17972: LD_VAR 0 11
17976: PPUSH
17977: LD_INT 1
17979: PPUSH
17980: CALL_OW 3
17984: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17985: LD_VAR 0 2
17989: PPUSH
17990: LD_VAR 0 3
17994: PPUSH
17995: CALL 18195 0 2
17999: PUSH
18000: LD_VAR 0 11
18004: PUSH
18005: EMPTY
18006: EQUAL
18007: OR
18008: IFFALSE 17953
// if not control in _control then
18010: LD_VAR 0 4
18014: PUSH
18015: LD_VAR 0 12
18019: IN
18020: NOT
18021: IFFALSE 18047
// control := _control [ rand ( 1 , _control ) ] ;
18023: LD_ADDR_VAR 0 4
18027: PUSH
18028: LD_VAR 0 12
18032: PUSH
18033: LD_INT 1
18035: PPUSH
18036: LD_VAR 0 12
18040: PPUSH
18041: CALL_OW 12
18045: ARRAY
18046: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18047: LD_VAR 0 2
18051: PPUSH
18052: LD_VAR 0 5
18056: PPUSH
18057: CALL 18415 0 2
18061: NOT
18062: IFFALSE 18121
// repeat weapon := _weapon [ 1 ] ;
18064: LD_ADDR_VAR 0 5
18068: PUSH
18069: LD_VAR 0 10
18073: PUSH
18074: LD_INT 1
18076: ARRAY
18077: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18078: LD_ADDR_VAR 0 10
18082: PUSH
18083: LD_VAR 0 10
18087: PPUSH
18088: LD_INT 1
18090: PPUSH
18091: CALL_OW 3
18095: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18096: LD_VAR 0 2
18100: PPUSH
18101: LD_VAR 0 5
18105: PPUSH
18106: CALL 18415 0 2
18110: PUSH
18111: LD_VAR 0 10
18115: PUSH
18116: EMPTY
18117: EQUAL
18118: OR
18119: IFFALSE 18064
// result := [ ] ;
18121: LD_ADDR_VAR 0 6
18125: PUSH
18126: EMPTY
18127: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18128: LD_VAR 0 1
18132: PPUSH
18133: LD_VAR 0 2
18137: PPUSH
18138: LD_VAR 0 3
18142: PPUSH
18143: LD_VAR 0 4
18147: PPUSH
18148: LD_VAR 0 5
18152: PPUSH
18153: CALL_OW 448
18157: IFFALSE 18190
// result := [ chassis , engine , control , weapon ] ;
18159: LD_ADDR_VAR 0 6
18163: PUSH
18164: LD_VAR 0 2
18168: PUSH
18169: LD_VAR 0 3
18173: PUSH
18174: LD_VAR 0 4
18178: PUSH
18179: LD_VAR 0 5
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: ST_TO_ADDR
// end ;
18190: LD_VAR 0 6
18194: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18195: LD_INT 0
18197: PPUSH
// if not chassis or not engine then
18198: LD_VAR 0 1
18202: NOT
18203: PUSH
18204: LD_VAR 0 2
18208: NOT
18209: OR
18210: IFFALSE 18214
// exit ;
18212: GO 18410
// case engine of engine_solar :
18214: LD_VAR 0 2
18218: PUSH
18219: LD_INT 2
18221: DOUBLE
18222: EQUAL
18223: IFTRUE 18227
18225: GO 18265
18227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18228: LD_ADDR_VAR 0 3
18232: PUSH
18233: LD_INT 11
18235: PUSH
18236: LD_INT 12
18238: PUSH
18239: LD_INT 13
18241: PUSH
18242: LD_INT 14
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: LD_INT 2
18250: PUSH
18251: LD_INT 3
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: ST_TO_ADDR
18263: GO 18394
18265: LD_INT 1
18267: DOUBLE
18268: EQUAL
18269: IFTRUE 18273
18271: GO 18335
18273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18274: LD_ADDR_VAR 0 3
18278: PUSH
18279: LD_INT 11
18281: PUSH
18282: LD_INT 12
18284: PUSH
18285: LD_INT 13
18287: PUSH
18288: LD_INT 14
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: LD_INT 2
18296: PUSH
18297: LD_INT 3
18299: PUSH
18300: LD_INT 4
18302: PUSH
18303: LD_INT 5
18305: PUSH
18306: LD_INT 21
18308: PUSH
18309: LD_INT 23
18311: PUSH
18312: LD_INT 22
18314: PUSH
18315: LD_INT 24
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: ST_TO_ADDR
18333: GO 18394
18335: LD_INT 3
18337: DOUBLE
18338: EQUAL
18339: IFTRUE 18343
18341: GO 18393
18343: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18344: LD_ADDR_VAR 0 3
18348: PUSH
18349: LD_INT 13
18351: PUSH
18352: LD_INT 14
18354: PUSH
18355: LD_INT 2
18357: PUSH
18358: LD_INT 3
18360: PUSH
18361: LD_INT 4
18363: PUSH
18364: LD_INT 5
18366: PUSH
18367: LD_INT 21
18369: PUSH
18370: LD_INT 22
18372: PUSH
18373: LD_INT 23
18375: PUSH
18376: LD_INT 24
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: ST_TO_ADDR
18391: GO 18394
18393: POP
// result := ( chassis in result ) ;
18394: LD_ADDR_VAR 0 3
18398: PUSH
18399: LD_VAR 0 1
18403: PUSH
18404: LD_VAR 0 3
18408: IN
18409: ST_TO_ADDR
// end ;
18410: LD_VAR 0 3
18414: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18415: LD_INT 0
18417: PPUSH
// if not chassis or not weapon then
18418: LD_VAR 0 1
18422: NOT
18423: PUSH
18424: LD_VAR 0 2
18428: NOT
18429: OR
18430: IFFALSE 18434
// exit ;
18432: GO 19460
// case weapon of us_machine_gun :
18434: LD_VAR 0 2
18438: PUSH
18439: LD_INT 2
18441: DOUBLE
18442: EQUAL
18443: IFTRUE 18447
18445: GO 18477
18447: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18448: LD_ADDR_VAR 0 3
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 3
18461: PUSH
18462: LD_INT 4
18464: PUSH
18465: LD_INT 5
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: ST_TO_ADDR
18475: GO 19444
18477: LD_INT 3
18479: DOUBLE
18480: EQUAL
18481: IFTRUE 18485
18483: GO 18515
18485: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18486: LD_ADDR_VAR 0 3
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: LD_INT 3
18499: PUSH
18500: LD_INT 4
18502: PUSH
18503: LD_INT 5
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: ST_TO_ADDR
18513: GO 19444
18515: LD_INT 11
18517: DOUBLE
18518: EQUAL
18519: IFTRUE 18523
18521: GO 18553
18523: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18524: LD_ADDR_VAR 0 3
18528: PUSH
18529: LD_INT 1
18531: PUSH
18532: LD_INT 2
18534: PUSH
18535: LD_INT 3
18537: PUSH
18538: LD_INT 4
18540: PUSH
18541: LD_INT 5
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: ST_TO_ADDR
18551: GO 19444
18553: LD_INT 4
18555: DOUBLE
18556: EQUAL
18557: IFTRUE 18561
18559: GO 18587
18561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18562: LD_ADDR_VAR 0 3
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: LD_INT 3
18572: PUSH
18573: LD_INT 4
18575: PUSH
18576: LD_INT 5
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: ST_TO_ADDR
18585: GO 19444
18587: LD_INT 5
18589: DOUBLE
18590: EQUAL
18591: IFTRUE 18595
18593: GO 18621
18595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18596: LD_ADDR_VAR 0 3
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: LD_INT 3
18606: PUSH
18607: LD_INT 4
18609: PUSH
18610: LD_INT 5
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: ST_TO_ADDR
18619: GO 19444
18621: LD_INT 9
18623: DOUBLE
18624: EQUAL
18625: IFTRUE 18629
18627: GO 18655
18629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18630: LD_ADDR_VAR 0 3
18634: PUSH
18635: LD_INT 2
18637: PUSH
18638: LD_INT 3
18640: PUSH
18641: LD_INT 4
18643: PUSH
18644: LD_INT 5
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: ST_TO_ADDR
18653: GO 19444
18655: LD_INT 7
18657: DOUBLE
18658: EQUAL
18659: IFTRUE 18663
18661: GO 18689
18663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18664: LD_ADDR_VAR 0 3
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: LD_INT 3
18674: PUSH
18675: LD_INT 4
18677: PUSH
18678: LD_INT 5
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: ST_TO_ADDR
18687: GO 19444
18689: LD_INT 12
18691: DOUBLE
18692: EQUAL
18693: IFTRUE 18697
18695: GO 18723
18697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18698: LD_ADDR_VAR 0 3
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: LD_INT 3
18708: PUSH
18709: LD_INT 4
18711: PUSH
18712: LD_INT 5
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: ST_TO_ADDR
18721: GO 19444
18723: LD_INT 13
18725: DOUBLE
18726: EQUAL
18727: IFTRUE 18731
18729: GO 18757
18731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 3
18742: PUSH
18743: LD_INT 4
18745: PUSH
18746: LD_INT 5
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: ST_TO_ADDR
18755: GO 19444
18757: LD_INT 14
18759: DOUBLE
18760: EQUAL
18761: IFTRUE 18765
18763: GO 18783
18765: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18766: LD_ADDR_VAR 0 3
18770: PUSH
18771: LD_INT 4
18773: PUSH
18774: LD_INT 5
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: ST_TO_ADDR
18781: GO 19444
18783: LD_INT 6
18785: DOUBLE
18786: EQUAL
18787: IFTRUE 18791
18789: GO 18809
18791: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18792: LD_ADDR_VAR 0 3
18796: PUSH
18797: LD_INT 4
18799: PUSH
18800: LD_INT 5
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: ST_TO_ADDR
18807: GO 19444
18809: LD_INT 10
18811: DOUBLE
18812: EQUAL
18813: IFTRUE 18817
18815: GO 18835
18817: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18818: LD_ADDR_VAR 0 3
18822: PUSH
18823: LD_INT 4
18825: PUSH
18826: LD_INT 5
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: ST_TO_ADDR
18833: GO 19444
18835: LD_INT 22
18837: DOUBLE
18838: EQUAL
18839: IFTRUE 18843
18841: GO 18869
18843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18844: LD_ADDR_VAR 0 3
18848: PUSH
18849: LD_INT 11
18851: PUSH
18852: LD_INT 12
18854: PUSH
18855: LD_INT 13
18857: PUSH
18858: LD_INT 14
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: ST_TO_ADDR
18867: GO 19444
18869: LD_INT 23
18871: DOUBLE
18872: EQUAL
18873: IFTRUE 18877
18875: GO 18903
18877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18878: LD_ADDR_VAR 0 3
18882: PUSH
18883: LD_INT 11
18885: PUSH
18886: LD_INT 12
18888: PUSH
18889: LD_INT 13
18891: PUSH
18892: LD_INT 14
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: ST_TO_ADDR
18901: GO 19444
18903: LD_INT 24
18905: DOUBLE
18906: EQUAL
18907: IFTRUE 18911
18909: GO 18937
18911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18912: LD_ADDR_VAR 0 3
18916: PUSH
18917: LD_INT 11
18919: PUSH
18920: LD_INT 12
18922: PUSH
18923: LD_INT 13
18925: PUSH
18926: LD_INT 14
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: ST_TO_ADDR
18935: GO 19444
18937: LD_INT 30
18939: DOUBLE
18940: EQUAL
18941: IFTRUE 18945
18943: GO 18971
18945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18946: LD_ADDR_VAR 0 3
18950: PUSH
18951: LD_INT 11
18953: PUSH
18954: LD_INT 12
18956: PUSH
18957: LD_INT 13
18959: PUSH
18960: LD_INT 14
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: ST_TO_ADDR
18969: GO 19444
18971: LD_INT 25
18973: DOUBLE
18974: EQUAL
18975: IFTRUE 18979
18977: GO 18997
18979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18980: LD_ADDR_VAR 0 3
18984: PUSH
18985: LD_INT 13
18987: PUSH
18988: LD_INT 14
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: ST_TO_ADDR
18995: GO 19444
18997: LD_INT 27
18999: DOUBLE
19000: EQUAL
19001: IFTRUE 19005
19003: GO 19023
19005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19006: LD_ADDR_VAR 0 3
19010: PUSH
19011: LD_INT 13
19013: PUSH
19014: LD_INT 14
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: ST_TO_ADDR
19021: GO 19444
19023: LD_INT 28
19025: DOUBLE
19026: EQUAL
19027: IFTRUE 19031
19029: GO 19049
19031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19032: LD_ADDR_VAR 0 3
19036: PUSH
19037: LD_INT 13
19039: PUSH
19040: LD_INT 14
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: ST_TO_ADDR
19047: GO 19444
19049: LD_INT 29
19051: DOUBLE
19052: EQUAL
19053: IFTRUE 19057
19055: GO 19075
19057: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19058: LD_ADDR_VAR 0 3
19062: PUSH
19063: LD_INT 13
19065: PUSH
19066: LD_INT 14
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: ST_TO_ADDR
19073: GO 19444
19075: LD_INT 31
19077: DOUBLE
19078: EQUAL
19079: IFTRUE 19083
19081: GO 19101
19083: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19084: LD_ADDR_VAR 0 3
19088: PUSH
19089: LD_INT 13
19091: PUSH
19092: LD_INT 14
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: ST_TO_ADDR
19099: GO 19444
19101: LD_INT 26
19103: DOUBLE
19104: EQUAL
19105: IFTRUE 19109
19107: GO 19127
19109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19110: LD_ADDR_VAR 0 3
19114: PUSH
19115: LD_INT 13
19117: PUSH
19118: LD_INT 14
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: ST_TO_ADDR
19125: GO 19444
19127: LD_INT 42
19129: DOUBLE
19130: EQUAL
19131: IFTRUE 19135
19133: GO 19161
19135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_INT 21
19143: PUSH
19144: LD_INT 22
19146: PUSH
19147: LD_INT 23
19149: PUSH
19150: LD_INT 24
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: ST_TO_ADDR
19159: GO 19444
19161: LD_INT 43
19163: DOUBLE
19164: EQUAL
19165: IFTRUE 19169
19167: GO 19195
19169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19170: LD_ADDR_VAR 0 3
19174: PUSH
19175: LD_INT 21
19177: PUSH
19178: LD_INT 22
19180: PUSH
19181: LD_INT 23
19183: PUSH
19184: LD_INT 24
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: ST_TO_ADDR
19193: GO 19444
19195: LD_INT 44
19197: DOUBLE
19198: EQUAL
19199: IFTRUE 19203
19201: GO 19229
19203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19204: LD_ADDR_VAR 0 3
19208: PUSH
19209: LD_INT 21
19211: PUSH
19212: LD_INT 22
19214: PUSH
19215: LD_INT 23
19217: PUSH
19218: LD_INT 24
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: ST_TO_ADDR
19227: GO 19444
19229: LD_INT 45
19231: DOUBLE
19232: EQUAL
19233: IFTRUE 19237
19235: GO 19263
19237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19238: LD_ADDR_VAR 0 3
19242: PUSH
19243: LD_INT 21
19245: PUSH
19246: LD_INT 22
19248: PUSH
19249: LD_INT 23
19251: PUSH
19252: LD_INT 24
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: ST_TO_ADDR
19261: GO 19444
19263: LD_INT 49
19265: DOUBLE
19266: EQUAL
19267: IFTRUE 19271
19269: GO 19297
19271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19272: LD_ADDR_VAR 0 3
19276: PUSH
19277: LD_INT 21
19279: PUSH
19280: LD_INT 22
19282: PUSH
19283: LD_INT 23
19285: PUSH
19286: LD_INT 24
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: ST_TO_ADDR
19295: GO 19444
19297: LD_INT 51
19299: DOUBLE
19300: EQUAL
19301: IFTRUE 19305
19303: GO 19331
19305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19306: LD_ADDR_VAR 0 3
19310: PUSH
19311: LD_INT 21
19313: PUSH
19314: LD_INT 22
19316: PUSH
19317: LD_INT 23
19319: PUSH
19320: LD_INT 24
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: ST_TO_ADDR
19329: GO 19444
19331: LD_INT 52
19333: DOUBLE
19334: EQUAL
19335: IFTRUE 19339
19337: GO 19365
19339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19340: LD_ADDR_VAR 0 3
19344: PUSH
19345: LD_INT 21
19347: PUSH
19348: LD_INT 22
19350: PUSH
19351: LD_INT 23
19353: PUSH
19354: LD_INT 24
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: ST_TO_ADDR
19363: GO 19444
19365: LD_INT 53
19367: DOUBLE
19368: EQUAL
19369: IFTRUE 19373
19371: GO 19391
19373: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19374: LD_ADDR_VAR 0 3
19378: PUSH
19379: LD_INT 23
19381: PUSH
19382: LD_INT 24
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: ST_TO_ADDR
19389: GO 19444
19391: LD_INT 46
19393: DOUBLE
19394: EQUAL
19395: IFTRUE 19399
19397: GO 19417
19399: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19400: LD_ADDR_VAR 0 3
19404: PUSH
19405: LD_INT 23
19407: PUSH
19408: LD_INT 24
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: ST_TO_ADDR
19415: GO 19444
19417: LD_INT 47
19419: DOUBLE
19420: EQUAL
19421: IFTRUE 19425
19423: GO 19443
19425: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19426: LD_ADDR_VAR 0 3
19430: PUSH
19431: LD_INT 23
19433: PUSH
19434: LD_INT 24
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: ST_TO_ADDR
19441: GO 19444
19443: POP
// result := ( chassis in result ) ;
19444: LD_ADDR_VAR 0 3
19448: PUSH
19449: LD_VAR 0 1
19453: PUSH
19454: LD_VAR 0 3
19458: IN
19459: ST_TO_ADDR
// end ;
19460: LD_VAR 0 3
19464: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19465: LD_INT 0
19467: PPUSH
19468: PPUSH
19469: PPUSH
19470: PPUSH
19471: PPUSH
19472: PPUSH
19473: PPUSH
// result := array ;
19474: LD_ADDR_VAR 0 5
19478: PUSH
19479: LD_VAR 0 1
19483: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19484: LD_VAR 0 1
19488: NOT
19489: PUSH
19490: LD_VAR 0 2
19494: NOT
19495: OR
19496: PUSH
19497: LD_VAR 0 3
19501: NOT
19502: OR
19503: PUSH
19504: LD_VAR 0 2
19508: PUSH
19509: LD_VAR 0 1
19513: GREATER
19514: OR
19515: PUSH
19516: LD_VAR 0 3
19520: PUSH
19521: LD_VAR 0 1
19525: GREATER
19526: OR
19527: IFFALSE 19531
// exit ;
19529: GO 19827
// if direction then
19531: LD_VAR 0 4
19535: IFFALSE 19599
// begin d := 1 ;
19537: LD_ADDR_VAR 0 9
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if i_from > i_to then
19545: LD_VAR 0 2
19549: PUSH
19550: LD_VAR 0 3
19554: GREATER
19555: IFFALSE 19581
// length := ( array - i_from ) + i_to else
19557: LD_ADDR_VAR 0 11
19561: PUSH
19562: LD_VAR 0 1
19566: PUSH
19567: LD_VAR 0 2
19571: MINUS
19572: PUSH
19573: LD_VAR 0 3
19577: PLUS
19578: ST_TO_ADDR
19579: GO 19597
// length := i_to - i_from ;
19581: LD_ADDR_VAR 0 11
19585: PUSH
19586: LD_VAR 0 3
19590: PUSH
19591: LD_VAR 0 2
19595: MINUS
19596: ST_TO_ADDR
// end else
19597: GO 19660
// begin d := - 1 ;
19599: LD_ADDR_VAR 0 9
19603: PUSH
19604: LD_INT 1
19606: NEG
19607: ST_TO_ADDR
// if i_from > i_to then
19608: LD_VAR 0 2
19612: PUSH
19613: LD_VAR 0 3
19617: GREATER
19618: IFFALSE 19638
// length := i_from - i_to else
19620: LD_ADDR_VAR 0 11
19624: PUSH
19625: LD_VAR 0 2
19629: PUSH
19630: LD_VAR 0 3
19634: MINUS
19635: ST_TO_ADDR
19636: GO 19660
// length := ( array - i_to ) + i_from ;
19638: LD_ADDR_VAR 0 11
19642: PUSH
19643: LD_VAR 0 1
19647: PUSH
19648: LD_VAR 0 3
19652: MINUS
19653: PUSH
19654: LD_VAR 0 2
19658: PLUS
19659: ST_TO_ADDR
// end ; if not length then
19660: LD_VAR 0 11
19664: NOT
19665: IFFALSE 19669
// exit ;
19667: GO 19827
// tmp := array ;
19669: LD_ADDR_VAR 0 10
19673: PUSH
19674: LD_VAR 0 1
19678: ST_TO_ADDR
// for i = 1 to length do
19679: LD_ADDR_VAR 0 6
19683: PUSH
19684: DOUBLE
19685: LD_INT 1
19687: DEC
19688: ST_TO_ADDR
19689: LD_VAR 0 11
19693: PUSH
19694: FOR_TO
19695: IFFALSE 19815
// begin for j = 1 to array do
19697: LD_ADDR_VAR 0 7
19701: PUSH
19702: DOUBLE
19703: LD_INT 1
19705: DEC
19706: ST_TO_ADDR
19707: LD_VAR 0 1
19711: PUSH
19712: FOR_TO
19713: IFFALSE 19801
// begin k := j + d ;
19715: LD_ADDR_VAR 0 8
19719: PUSH
19720: LD_VAR 0 7
19724: PUSH
19725: LD_VAR 0 9
19729: PLUS
19730: ST_TO_ADDR
// if k > array then
19731: LD_VAR 0 8
19735: PUSH
19736: LD_VAR 0 1
19740: GREATER
19741: IFFALSE 19751
// k := 1 ;
19743: LD_ADDR_VAR 0 8
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if not k then
19751: LD_VAR 0 8
19755: NOT
19756: IFFALSE 19768
// k := array ;
19758: LD_ADDR_VAR 0 8
19762: PUSH
19763: LD_VAR 0 1
19767: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19768: LD_ADDR_VAR 0 10
19772: PUSH
19773: LD_VAR 0 10
19777: PPUSH
19778: LD_VAR 0 8
19782: PPUSH
19783: LD_VAR 0 1
19787: PUSH
19788: LD_VAR 0 7
19792: ARRAY
19793: PPUSH
19794: CALL_OW 1
19798: ST_TO_ADDR
// end ;
19799: GO 19712
19801: POP
19802: POP
// array := tmp ;
19803: LD_ADDR_VAR 0 1
19807: PUSH
19808: LD_VAR 0 10
19812: ST_TO_ADDR
// end ;
19813: GO 19694
19815: POP
19816: POP
// result := array ;
19817: LD_ADDR_VAR 0 5
19821: PUSH
19822: LD_VAR 0 1
19826: ST_TO_ADDR
// end ;
19827: LD_VAR 0 5
19831: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19832: LD_INT 0
19834: PPUSH
19835: PPUSH
// result := 0 ;
19836: LD_ADDR_VAR 0 3
19840: PUSH
19841: LD_INT 0
19843: ST_TO_ADDR
// if not array or not value in array then
19844: LD_VAR 0 1
19848: NOT
19849: PUSH
19850: LD_VAR 0 2
19854: PUSH
19855: LD_VAR 0 1
19859: IN
19860: NOT
19861: OR
19862: IFFALSE 19866
// exit ;
19864: GO 19920
// for i = 1 to array do
19866: LD_ADDR_VAR 0 4
19870: PUSH
19871: DOUBLE
19872: LD_INT 1
19874: DEC
19875: ST_TO_ADDR
19876: LD_VAR 0 1
19880: PUSH
19881: FOR_TO
19882: IFFALSE 19918
// if value = array [ i ] then
19884: LD_VAR 0 2
19888: PUSH
19889: LD_VAR 0 1
19893: PUSH
19894: LD_VAR 0 4
19898: ARRAY
19899: EQUAL
19900: IFFALSE 19916
// begin result := i ;
19902: LD_ADDR_VAR 0 3
19906: PUSH
19907: LD_VAR 0 4
19911: ST_TO_ADDR
// exit ;
19912: POP
19913: POP
19914: GO 19920
// end ;
19916: GO 19881
19918: POP
19919: POP
// end ;
19920: LD_VAR 0 3
19924: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19925: LD_INT 0
19927: PPUSH
// vc_chassis := chassis ;
19928: LD_ADDR_OWVAR 37
19932: PUSH
19933: LD_VAR 0 1
19937: ST_TO_ADDR
// vc_engine := engine ;
19938: LD_ADDR_OWVAR 39
19942: PUSH
19943: LD_VAR 0 2
19947: ST_TO_ADDR
// vc_control := control ;
19948: LD_ADDR_OWVAR 38
19952: PUSH
19953: LD_VAR 0 3
19957: ST_TO_ADDR
// vc_weapon := weapon ;
19958: LD_ADDR_OWVAR 40
19962: PUSH
19963: LD_VAR 0 4
19967: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19968: LD_ADDR_OWVAR 41
19972: PUSH
19973: LD_VAR 0 5
19977: ST_TO_ADDR
// end ;
19978: LD_VAR 0 6
19982: RET
// export function WantPlant ( unit ) ; var task ; begin
19983: LD_INT 0
19985: PPUSH
19986: PPUSH
// result := false ;
19987: LD_ADDR_VAR 0 2
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19995: LD_ADDR_VAR 0 3
19999: PUSH
20000: LD_VAR 0 1
20004: PPUSH
20005: CALL_OW 437
20009: ST_TO_ADDR
// if task then
20010: LD_VAR 0 3
20014: IFFALSE 20042
// if task [ 1 ] [ 1 ] = p then
20016: LD_VAR 0 3
20020: PUSH
20021: LD_INT 1
20023: ARRAY
20024: PUSH
20025: LD_INT 1
20027: ARRAY
20028: PUSH
20029: LD_STRING p
20031: EQUAL
20032: IFFALSE 20042
// result := true ;
20034: LD_ADDR_VAR 0 2
20038: PUSH
20039: LD_INT 1
20041: ST_TO_ADDR
// end ;
20042: LD_VAR 0 2
20046: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20047: LD_INT 0
20049: PPUSH
20050: PPUSH
20051: PPUSH
20052: PPUSH
// if pos < 1 then
20053: LD_VAR 0 2
20057: PUSH
20058: LD_INT 1
20060: LESS
20061: IFFALSE 20065
// exit ;
20063: GO 20368
// if pos = 1 then
20065: LD_VAR 0 2
20069: PUSH
20070: LD_INT 1
20072: EQUAL
20073: IFFALSE 20106
// result := Replace ( arr , pos [ 1 ] , value ) else
20075: LD_ADDR_VAR 0 4
20079: PUSH
20080: LD_VAR 0 1
20084: PPUSH
20085: LD_VAR 0 2
20089: PUSH
20090: LD_INT 1
20092: ARRAY
20093: PPUSH
20094: LD_VAR 0 3
20098: PPUSH
20099: CALL_OW 1
20103: ST_TO_ADDR
20104: GO 20368
// begin tmp := arr ;
20106: LD_ADDR_VAR 0 6
20110: PUSH
20111: LD_VAR 0 1
20115: ST_TO_ADDR
// s_arr := [ tmp ] ;
20116: LD_ADDR_VAR 0 7
20120: PUSH
20121: LD_VAR 0 6
20125: PUSH
20126: EMPTY
20127: LIST
20128: ST_TO_ADDR
// for i = 1 to pos - 1 do
20129: LD_ADDR_VAR 0 5
20133: PUSH
20134: DOUBLE
20135: LD_INT 1
20137: DEC
20138: ST_TO_ADDR
20139: LD_VAR 0 2
20143: PUSH
20144: LD_INT 1
20146: MINUS
20147: PUSH
20148: FOR_TO
20149: IFFALSE 20194
// begin tmp := tmp [ pos [ i ] ] ;
20151: LD_ADDR_VAR 0 6
20155: PUSH
20156: LD_VAR 0 6
20160: PUSH
20161: LD_VAR 0 2
20165: PUSH
20166: LD_VAR 0 5
20170: ARRAY
20171: ARRAY
20172: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20173: LD_ADDR_VAR 0 7
20177: PUSH
20178: LD_VAR 0 7
20182: PUSH
20183: LD_VAR 0 6
20187: PUSH
20188: EMPTY
20189: LIST
20190: ADD
20191: ST_TO_ADDR
// end ;
20192: GO 20148
20194: POP
20195: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20196: LD_ADDR_VAR 0 6
20200: PUSH
20201: LD_VAR 0 6
20205: PPUSH
20206: LD_VAR 0 2
20210: PUSH
20211: LD_VAR 0 2
20215: ARRAY
20216: PPUSH
20217: LD_VAR 0 3
20221: PPUSH
20222: CALL_OW 1
20226: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20227: LD_ADDR_VAR 0 7
20231: PUSH
20232: LD_VAR 0 7
20236: PPUSH
20237: LD_VAR 0 7
20241: PPUSH
20242: LD_VAR 0 6
20246: PPUSH
20247: CALL_OW 1
20251: ST_TO_ADDR
// for i = s_arr downto 2 do
20252: LD_ADDR_VAR 0 5
20256: PUSH
20257: DOUBLE
20258: LD_VAR 0 7
20262: INC
20263: ST_TO_ADDR
20264: LD_INT 2
20266: PUSH
20267: FOR_DOWNTO
20268: IFFALSE 20352
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20270: LD_ADDR_VAR 0 6
20274: PUSH
20275: LD_VAR 0 7
20279: PUSH
20280: LD_VAR 0 5
20284: PUSH
20285: LD_INT 1
20287: MINUS
20288: ARRAY
20289: PPUSH
20290: LD_VAR 0 2
20294: PUSH
20295: LD_VAR 0 5
20299: PUSH
20300: LD_INT 1
20302: MINUS
20303: ARRAY
20304: PPUSH
20305: LD_VAR 0 7
20309: PUSH
20310: LD_VAR 0 5
20314: ARRAY
20315: PPUSH
20316: CALL_OW 1
20320: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20321: LD_ADDR_VAR 0 7
20325: PUSH
20326: LD_VAR 0 7
20330: PPUSH
20331: LD_VAR 0 5
20335: PUSH
20336: LD_INT 1
20338: MINUS
20339: PPUSH
20340: LD_VAR 0 6
20344: PPUSH
20345: CALL_OW 1
20349: ST_TO_ADDR
// end ;
20350: GO 20267
20352: POP
20353: POP
// result := s_arr [ 1 ] ;
20354: LD_ADDR_VAR 0 4
20358: PUSH
20359: LD_VAR 0 7
20363: PUSH
20364: LD_INT 1
20366: ARRAY
20367: ST_TO_ADDR
// end ; end ;
20368: LD_VAR 0 4
20372: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20373: LD_INT 0
20375: PPUSH
20376: PPUSH
// if not list then
20377: LD_VAR 0 1
20381: NOT
20382: IFFALSE 20386
// exit ;
20384: GO 20477
// i := list [ pos1 ] ;
20386: LD_ADDR_VAR 0 5
20390: PUSH
20391: LD_VAR 0 1
20395: PUSH
20396: LD_VAR 0 2
20400: ARRAY
20401: ST_TO_ADDR
// if not i then
20402: LD_VAR 0 5
20406: NOT
20407: IFFALSE 20411
// exit ;
20409: GO 20477
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20411: LD_ADDR_VAR 0 1
20415: PUSH
20416: LD_VAR 0 1
20420: PPUSH
20421: LD_VAR 0 2
20425: PPUSH
20426: LD_VAR 0 1
20430: PUSH
20431: LD_VAR 0 3
20435: ARRAY
20436: PPUSH
20437: CALL_OW 1
20441: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20442: LD_ADDR_VAR 0 1
20446: PUSH
20447: LD_VAR 0 1
20451: PPUSH
20452: LD_VAR 0 3
20456: PPUSH
20457: LD_VAR 0 5
20461: PPUSH
20462: CALL_OW 1
20466: ST_TO_ADDR
// result := list ;
20467: LD_ADDR_VAR 0 4
20471: PUSH
20472: LD_VAR 0 1
20476: ST_TO_ADDR
// end ;
20477: LD_VAR 0 4
20481: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20482: LD_INT 0
20484: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20485: LD_ADDR_VAR 0 5
20489: PUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 250
20499: PPUSH
20500: LD_VAR 0 1
20504: PPUSH
20505: CALL_OW 251
20509: PPUSH
20510: LD_VAR 0 2
20514: PPUSH
20515: LD_VAR 0 3
20519: PPUSH
20520: LD_VAR 0 4
20524: PPUSH
20525: CALL 20535 0 5
20529: ST_TO_ADDR
// end ;
20530: LD_VAR 0 5
20534: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20535: LD_INT 0
20537: PPUSH
20538: PPUSH
20539: PPUSH
20540: PPUSH
// if not list then
20541: LD_VAR 0 3
20545: NOT
20546: IFFALSE 20550
// exit ;
20548: GO 20938
// result := [ ] ;
20550: LD_ADDR_VAR 0 6
20554: PUSH
20555: EMPTY
20556: ST_TO_ADDR
// for i in list do
20557: LD_ADDR_VAR 0 7
20561: PUSH
20562: LD_VAR 0 3
20566: PUSH
20567: FOR_IN
20568: IFFALSE 20770
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20570: LD_ADDR_VAR 0 9
20574: PUSH
20575: LD_VAR 0 7
20579: PPUSH
20580: LD_VAR 0 1
20584: PPUSH
20585: LD_VAR 0 2
20589: PPUSH
20590: CALL_OW 297
20594: ST_TO_ADDR
// if not result then
20595: LD_VAR 0 6
20599: NOT
20600: IFFALSE 20626
// result := [ [ i , tmp ] ] else
20602: LD_ADDR_VAR 0 6
20606: PUSH
20607: LD_VAR 0 7
20611: PUSH
20612: LD_VAR 0 9
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: ST_TO_ADDR
20624: GO 20768
// begin if result [ result ] [ 2 ] < tmp then
20626: LD_VAR 0 6
20630: PUSH
20631: LD_VAR 0 6
20635: ARRAY
20636: PUSH
20637: LD_INT 2
20639: ARRAY
20640: PUSH
20641: LD_VAR 0 9
20645: LESS
20646: IFFALSE 20688
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20648: LD_ADDR_VAR 0 6
20652: PUSH
20653: LD_VAR 0 6
20657: PPUSH
20658: LD_VAR 0 6
20662: PUSH
20663: LD_INT 1
20665: PLUS
20666: PPUSH
20667: LD_VAR 0 7
20671: PUSH
20672: LD_VAR 0 9
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 2
20685: ST_TO_ADDR
20686: GO 20768
// for j = 1 to result do
20688: LD_ADDR_VAR 0 8
20692: PUSH
20693: DOUBLE
20694: LD_INT 1
20696: DEC
20697: ST_TO_ADDR
20698: LD_VAR 0 6
20702: PUSH
20703: FOR_TO
20704: IFFALSE 20766
// begin if tmp < result [ j ] [ 2 ] then
20706: LD_VAR 0 9
20710: PUSH
20711: LD_VAR 0 6
20715: PUSH
20716: LD_VAR 0 8
20720: ARRAY
20721: PUSH
20722: LD_INT 2
20724: ARRAY
20725: LESS
20726: IFFALSE 20764
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20728: LD_ADDR_VAR 0 6
20732: PUSH
20733: LD_VAR 0 6
20737: PPUSH
20738: LD_VAR 0 8
20742: PPUSH
20743: LD_VAR 0 7
20747: PUSH
20748: LD_VAR 0 9
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PPUSH
20757: CALL_OW 2
20761: ST_TO_ADDR
// break ;
20762: GO 20766
// end ; end ;
20764: GO 20703
20766: POP
20767: POP
// end ; end ;
20768: GO 20567
20770: POP
20771: POP
// if result and not asc then
20772: LD_VAR 0 6
20776: PUSH
20777: LD_VAR 0 4
20781: NOT
20782: AND
20783: IFFALSE 20858
// begin tmp := result ;
20785: LD_ADDR_VAR 0 9
20789: PUSH
20790: LD_VAR 0 6
20794: ST_TO_ADDR
// for i = tmp downto 1 do
20795: LD_ADDR_VAR 0 7
20799: PUSH
20800: DOUBLE
20801: LD_VAR 0 9
20805: INC
20806: ST_TO_ADDR
20807: LD_INT 1
20809: PUSH
20810: FOR_DOWNTO
20811: IFFALSE 20856
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20813: LD_ADDR_VAR 0 6
20817: PUSH
20818: LD_VAR 0 6
20822: PPUSH
20823: LD_VAR 0 9
20827: PUSH
20828: LD_VAR 0 7
20832: MINUS
20833: PUSH
20834: LD_INT 1
20836: PLUS
20837: PPUSH
20838: LD_VAR 0 9
20842: PUSH
20843: LD_VAR 0 7
20847: ARRAY
20848: PPUSH
20849: CALL_OW 1
20853: ST_TO_ADDR
20854: GO 20810
20856: POP
20857: POP
// end ; tmp := [ ] ;
20858: LD_ADDR_VAR 0 9
20862: PUSH
20863: EMPTY
20864: ST_TO_ADDR
// if mode then
20865: LD_VAR 0 5
20869: IFFALSE 20938
// begin for i = 1 to result do
20871: LD_ADDR_VAR 0 7
20875: PUSH
20876: DOUBLE
20877: LD_INT 1
20879: DEC
20880: ST_TO_ADDR
20881: LD_VAR 0 6
20885: PUSH
20886: FOR_TO
20887: IFFALSE 20926
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20889: LD_ADDR_VAR 0 9
20893: PUSH
20894: LD_VAR 0 9
20898: PPUSH
20899: LD_VAR 0 7
20903: PPUSH
20904: LD_VAR 0 6
20908: PUSH
20909: LD_VAR 0 7
20913: ARRAY
20914: PUSH
20915: LD_INT 1
20917: ARRAY
20918: PPUSH
20919: CALL_OW 1
20923: ST_TO_ADDR
20924: GO 20886
20926: POP
20927: POP
// result := tmp ;
20928: LD_ADDR_VAR 0 6
20932: PUSH
20933: LD_VAR 0 9
20937: ST_TO_ADDR
// end ; end ;
20938: LD_VAR 0 6
20942: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20943: LD_INT 0
20945: PPUSH
20946: PPUSH
20947: PPUSH
20948: PPUSH
20949: PPUSH
20950: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20951: LD_ADDR_VAR 0 5
20955: PUSH
20956: LD_INT 0
20958: PUSH
20959: LD_INT 0
20961: PUSH
20962: LD_INT 0
20964: PUSH
20965: EMPTY
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: ST_TO_ADDR
// if not x or not y then
20973: LD_VAR 0 2
20977: NOT
20978: PUSH
20979: LD_VAR 0 3
20983: NOT
20984: OR
20985: IFFALSE 20989
// exit ;
20987: GO 22635
// if not range then
20989: LD_VAR 0 4
20993: NOT
20994: IFFALSE 21004
// range := 10 ;
20996: LD_ADDR_VAR 0 4
21000: PUSH
21001: LD_INT 10
21003: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21004: LD_ADDR_VAR 0 8
21008: PUSH
21009: LD_INT 81
21011: PUSH
21012: LD_VAR 0 1
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 92
21023: PUSH
21024: LD_VAR 0 2
21028: PUSH
21029: LD_VAR 0 3
21033: PUSH
21034: LD_VAR 0 4
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 3
21047: PUSH
21048: LD_INT 21
21050: PUSH
21051: LD_INT 3
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: PPUSH
21067: CALL_OW 69
21071: ST_TO_ADDR
// if not tmp then
21072: LD_VAR 0 8
21076: NOT
21077: IFFALSE 21081
// exit ;
21079: GO 22635
// for i in tmp do
21081: LD_ADDR_VAR 0 6
21085: PUSH
21086: LD_VAR 0 8
21090: PUSH
21091: FOR_IN
21092: IFFALSE 22610
// begin points := [ 0 , 0 , 0 ] ;
21094: LD_ADDR_VAR 0 9
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: ST_TO_ADDR
// bpoints := 1 ;
21113: LD_ADDR_VAR 0 10
21117: PUSH
21118: LD_INT 1
21120: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21121: LD_VAR 0 6
21125: PPUSH
21126: CALL_OW 247
21130: PUSH
21131: LD_INT 1
21133: DOUBLE
21134: EQUAL
21135: IFTRUE 21139
21137: GO 21717
21139: POP
// begin if GetClass ( i ) = 1 then
21140: LD_VAR 0 6
21144: PPUSH
21145: CALL_OW 257
21149: PUSH
21150: LD_INT 1
21152: EQUAL
21153: IFFALSE 21174
// points := [ 10 , 5 , 3 ] ;
21155: LD_ADDR_VAR 0 9
21159: PUSH
21160: LD_INT 10
21162: PUSH
21163: LD_INT 5
21165: PUSH
21166: LD_INT 3
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: LIST
21173: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21174: LD_VAR 0 6
21178: PPUSH
21179: CALL_OW 257
21183: PUSH
21184: LD_INT 2
21186: PUSH
21187: LD_INT 3
21189: PUSH
21190: LD_INT 4
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: IN
21198: IFFALSE 21219
// points := [ 3 , 2 , 1 ] ;
21200: LD_ADDR_VAR 0 9
21204: PUSH
21205: LD_INT 3
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: LIST
21218: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21219: LD_VAR 0 6
21223: PPUSH
21224: CALL_OW 257
21228: PUSH
21229: LD_INT 5
21231: EQUAL
21232: IFFALSE 21253
// points := [ 130 , 5 , 2 ] ;
21234: LD_ADDR_VAR 0 9
21238: PUSH
21239: LD_INT 130
21241: PUSH
21242: LD_INT 5
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: LIST
21252: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21253: LD_VAR 0 6
21257: PPUSH
21258: CALL_OW 257
21262: PUSH
21263: LD_INT 8
21265: EQUAL
21266: IFFALSE 21287
// points := [ 35 , 35 , 30 ] ;
21268: LD_ADDR_VAR 0 9
21272: PUSH
21273: LD_INT 35
21275: PUSH
21276: LD_INT 35
21278: PUSH
21279: LD_INT 30
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: LIST
21286: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21287: LD_VAR 0 6
21291: PPUSH
21292: CALL_OW 257
21296: PUSH
21297: LD_INT 9
21299: EQUAL
21300: IFFALSE 21321
// points := [ 20 , 55 , 40 ] ;
21302: LD_ADDR_VAR 0 9
21306: PUSH
21307: LD_INT 20
21309: PUSH
21310: LD_INT 55
21312: PUSH
21313: LD_INT 40
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21321: LD_VAR 0 6
21325: PPUSH
21326: CALL_OW 257
21330: PUSH
21331: LD_INT 12
21333: PUSH
21334: LD_INT 16
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: IN
21341: IFFALSE 21362
// points := [ 5 , 3 , 2 ] ;
21343: LD_ADDR_VAR 0 9
21347: PUSH
21348: LD_INT 5
21350: PUSH
21351: LD_INT 3
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21362: LD_VAR 0 6
21366: PPUSH
21367: CALL_OW 257
21371: PUSH
21372: LD_INT 17
21374: EQUAL
21375: IFFALSE 21396
// points := [ 100 , 50 , 75 ] ;
21377: LD_ADDR_VAR 0 9
21381: PUSH
21382: LD_INT 100
21384: PUSH
21385: LD_INT 50
21387: PUSH
21388: LD_INT 75
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21396: LD_VAR 0 6
21400: PPUSH
21401: CALL_OW 257
21405: PUSH
21406: LD_INT 15
21408: EQUAL
21409: IFFALSE 21430
// points := [ 10 , 5 , 3 ] ;
21411: LD_ADDR_VAR 0 9
21415: PUSH
21416: LD_INT 10
21418: PUSH
21419: LD_INT 5
21421: PUSH
21422: LD_INT 3
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21430: LD_VAR 0 6
21434: PPUSH
21435: CALL_OW 257
21439: PUSH
21440: LD_INT 14
21442: EQUAL
21443: IFFALSE 21464
// points := [ 10 , 0 , 0 ] ;
21445: LD_ADDR_VAR 0 9
21449: PUSH
21450: LD_INT 10
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: LD_INT 0
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21464: LD_VAR 0 6
21468: PPUSH
21469: CALL_OW 257
21473: PUSH
21474: LD_INT 11
21476: EQUAL
21477: IFFALSE 21498
// points := [ 30 , 10 , 5 ] ;
21479: LD_ADDR_VAR 0 9
21483: PUSH
21484: LD_INT 30
21486: PUSH
21487: LD_INT 10
21489: PUSH
21490: LD_INT 5
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21498: LD_VAR 0 1
21502: PPUSH
21503: LD_INT 5
21505: PPUSH
21506: CALL_OW 321
21510: PUSH
21511: LD_INT 2
21513: EQUAL
21514: IFFALSE 21531
// bpoints := bpoints * 1.8 ;
21516: LD_ADDR_VAR 0 10
21520: PUSH
21521: LD_VAR 0 10
21525: PUSH
21526: LD_REAL  1.80000000000000E+0000
21529: MUL
21530: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21531: LD_VAR 0 6
21535: PPUSH
21536: CALL_OW 257
21540: PUSH
21541: LD_INT 1
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: LD_INT 3
21549: PUSH
21550: LD_INT 4
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: IN
21559: PUSH
21560: LD_VAR 0 1
21564: PPUSH
21565: LD_INT 51
21567: PPUSH
21568: CALL_OW 321
21572: PUSH
21573: LD_INT 2
21575: EQUAL
21576: AND
21577: IFFALSE 21594
// bpoints := bpoints * 1.2 ;
21579: LD_ADDR_VAR 0 10
21583: PUSH
21584: LD_VAR 0 10
21588: PUSH
21589: LD_REAL  1.20000000000000E+0000
21592: MUL
21593: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21594: LD_VAR 0 6
21598: PPUSH
21599: CALL_OW 257
21603: PUSH
21604: LD_INT 5
21606: PUSH
21607: LD_INT 7
21609: PUSH
21610: LD_INT 9
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: IN
21618: PUSH
21619: LD_VAR 0 1
21623: PPUSH
21624: LD_INT 52
21626: PPUSH
21627: CALL_OW 321
21631: PUSH
21632: LD_INT 2
21634: EQUAL
21635: AND
21636: IFFALSE 21653
// bpoints := bpoints * 1.5 ;
21638: LD_ADDR_VAR 0 10
21642: PUSH
21643: LD_VAR 0 10
21647: PUSH
21648: LD_REAL  1.50000000000000E+0000
21651: MUL
21652: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21653: LD_VAR 0 1
21657: PPUSH
21658: LD_INT 66
21660: PPUSH
21661: CALL_OW 321
21665: PUSH
21666: LD_INT 2
21668: EQUAL
21669: IFFALSE 21686
// bpoints := bpoints * 1.1 ;
21671: LD_ADDR_VAR 0 10
21675: PUSH
21676: LD_VAR 0 10
21680: PUSH
21681: LD_REAL  1.10000000000000E+0000
21684: MUL
21685: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21686: LD_ADDR_VAR 0 10
21690: PUSH
21691: LD_VAR 0 10
21695: PUSH
21696: LD_VAR 0 6
21700: PPUSH
21701: LD_INT 1
21703: PPUSH
21704: CALL_OW 259
21708: PUSH
21709: LD_REAL  1.15000000000000E+0000
21712: MUL
21713: MUL
21714: ST_TO_ADDR
// end ; unit_vehicle :
21715: GO 22539
21717: LD_INT 2
21719: DOUBLE
21720: EQUAL
21721: IFTRUE 21725
21723: GO 22527
21725: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21726: LD_VAR 0 6
21730: PPUSH
21731: CALL_OW 264
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 42
21741: PUSH
21742: LD_INT 24
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: LIST
21749: IN
21750: IFFALSE 21771
// points := [ 25 , 5 , 3 ] ;
21752: LD_ADDR_VAR 0 9
21756: PUSH
21757: LD_INT 25
21759: PUSH
21760: LD_INT 5
21762: PUSH
21763: LD_INT 3
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21771: LD_VAR 0 6
21775: PPUSH
21776: CALL_OW 264
21780: PUSH
21781: LD_INT 4
21783: PUSH
21784: LD_INT 43
21786: PUSH
21787: LD_INT 25
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: IN
21795: IFFALSE 21816
// points := [ 40 , 15 , 5 ] ;
21797: LD_ADDR_VAR 0 9
21801: PUSH
21802: LD_INT 40
21804: PUSH
21805: LD_INT 15
21807: PUSH
21808: LD_INT 5
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21816: LD_VAR 0 6
21820: PPUSH
21821: CALL_OW 264
21825: PUSH
21826: LD_INT 3
21828: PUSH
21829: LD_INT 23
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: IN
21836: IFFALSE 21857
// points := [ 7 , 25 , 8 ] ;
21838: LD_ADDR_VAR 0 9
21842: PUSH
21843: LD_INT 7
21845: PUSH
21846: LD_INT 25
21848: PUSH
21849: LD_INT 8
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21857: LD_VAR 0 6
21861: PPUSH
21862: CALL_OW 264
21866: PUSH
21867: LD_INT 5
21869: PUSH
21870: LD_INT 27
21872: PUSH
21873: LD_INT 44
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: IN
21881: IFFALSE 21902
// points := [ 14 , 50 , 16 ] ;
21883: LD_ADDR_VAR 0 9
21887: PUSH
21888: LD_INT 14
21890: PUSH
21891: LD_INT 50
21893: PUSH
21894: LD_INT 16
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21902: LD_VAR 0 6
21906: PPUSH
21907: CALL_OW 264
21911: PUSH
21912: LD_INT 6
21914: PUSH
21915: LD_INT 46
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: IN
21922: IFFALSE 21943
// points := [ 32 , 120 , 70 ] ;
21924: LD_ADDR_VAR 0 9
21928: PUSH
21929: LD_INT 32
21931: PUSH
21932: LD_INT 120
21934: PUSH
21935: LD_INT 70
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
21943: LD_VAR 0 6
21947: PPUSH
21948: CALL_OW 264
21952: PUSH
21953: LD_INT 7
21955: PUSH
21956: LD_INT 28
21958: PUSH
21959: LD_INT 45
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: IN
21967: IFFALSE 21988
// points := [ 35 , 20 , 45 ] ;
21969: LD_ADDR_VAR 0 9
21973: PUSH
21974: LD_INT 35
21976: PUSH
21977: LD_INT 20
21979: PUSH
21980: LD_INT 45
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: LIST
21987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21988: LD_VAR 0 6
21992: PPUSH
21993: CALL_OW 264
21997: PUSH
21998: LD_INT 47
22000: PUSH
22001: EMPTY
22002: LIST
22003: IN
22004: IFFALSE 22025
// points := [ 67 , 45 , 75 ] ;
22006: LD_ADDR_VAR 0 9
22010: PUSH
22011: LD_INT 67
22013: PUSH
22014: LD_INT 45
22016: PUSH
22017: LD_INT 75
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22025: LD_VAR 0 6
22029: PPUSH
22030: CALL_OW 264
22034: PUSH
22035: LD_INT 26
22037: PUSH
22038: EMPTY
22039: LIST
22040: IN
22041: IFFALSE 22062
// points := [ 120 , 30 , 80 ] ;
22043: LD_ADDR_VAR 0 9
22047: PUSH
22048: LD_INT 120
22050: PUSH
22051: LD_INT 30
22053: PUSH
22054: LD_INT 80
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: LIST
22061: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22062: LD_VAR 0 6
22066: PPUSH
22067: CALL_OW 264
22071: PUSH
22072: LD_INT 22
22074: PUSH
22075: EMPTY
22076: LIST
22077: IN
22078: IFFALSE 22099
// points := [ 40 , 1 , 1 ] ;
22080: LD_ADDR_VAR 0 9
22084: PUSH
22085: LD_INT 40
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: LIST
22098: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22099: LD_VAR 0 6
22103: PPUSH
22104: CALL_OW 264
22108: PUSH
22109: LD_INT 29
22111: PUSH
22112: EMPTY
22113: LIST
22114: IN
22115: IFFALSE 22136
// points := [ 70 , 200 , 400 ] ;
22117: LD_ADDR_VAR 0 9
22121: PUSH
22122: LD_INT 70
22124: PUSH
22125: LD_INT 200
22127: PUSH
22128: LD_INT 400
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22136: LD_VAR 0 6
22140: PPUSH
22141: CALL_OW 264
22145: PUSH
22146: LD_INT 14
22148: PUSH
22149: LD_INT 53
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: IN
22156: IFFALSE 22177
// points := [ 40 , 10 , 20 ] ;
22158: LD_ADDR_VAR 0 9
22162: PUSH
22163: LD_INT 40
22165: PUSH
22166: LD_INT 10
22168: PUSH
22169: LD_INT 20
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: LIST
22176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22177: LD_VAR 0 6
22181: PPUSH
22182: CALL_OW 264
22186: PUSH
22187: LD_INT 9
22189: PUSH
22190: EMPTY
22191: LIST
22192: IN
22193: IFFALSE 22214
// points := [ 5 , 70 , 20 ] ;
22195: LD_ADDR_VAR 0 9
22199: PUSH
22200: LD_INT 5
22202: PUSH
22203: LD_INT 70
22205: PUSH
22206: LD_INT 20
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: LIST
22213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22214: LD_VAR 0 6
22218: PPUSH
22219: CALL_OW 264
22223: PUSH
22224: LD_INT 10
22226: PUSH
22227: EMPTY
22228: LIST
22229: IN
22230: IFFALSE 22251
// points := [ 35 , 110 , 70 ] ;
22232: LD_ADDR_VAR 0 9
22236: PUSH
22237: LD_INT 35
22239: PUSH
22240: LD_INT 110
22242: PUSH
22243: LD_INT 70
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: LIST
22250: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22251: LD_VAR 0 6
22255: PPUSH
22256: CALL_OW 265
22260: PUSH
22261: LD_INT 25
22263: EQUAL
22264: IFFALSE 22285
// points := [ 80 , 65 , 100 ] ;
22266: LD_ADDR_VAR 0 9
22270: PUSH
22271: LD_INT 80
22273: PUSH
22274: LD_INT 65
22276: PUSH
22277: LD_INT 100
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: LIST
22284: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22285: LD_VAR 0 6
22289: PPUSH
22290: CALL_OW 263
22294: PUSH
22295: LD_INT 1
22297: EQUAL
22298: IFFALSE 22333
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22300: LD_ADDR_VAR 0 10
22304: PUSH
22305: LD_VAR 0 10
22309: PUSH
22310: LD_VAR 0 6
22314: PPUSH
22315: CALL_OW 311
22319: PPUSH
22320: LD_INT 3
22322: PPUSH
22323: CALL_OW 259
22327: PUSH
22328: LD_INT 4
22330: MUL
22331: MUL
22332: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22333: LD_VAR 0 6
22337: PPUSH
22338: CALL_OW 263
22342: PUSH
22343: LD_INT 2
22345: EQUAL
22346: IFFALSE 22397
// begin j := IsControledBy ( i ) ;
22348: LD_ADDR_VAR 0 7
22352: PUSH
22353: LD_VAR 0 6
22357: PPUSH
22358: CALL_OW 312
22362: ST_TO_ADDR
// if j then
22363: LD_VAR 0 7
22367: IFFALSE 22397
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22369: LD_ADDR_VAR 0 10
22373: PUSH
22374: LD_VAR 0 10
22378: PUSH
22379: LD_VAR 0 7
22383: PPUSH
22384: LD_INT 3
22386: PPUSH
22387: CALL_OW 259
22391: PUSH
22392: LD_INT 3
22394: MUL
22395: MUL
22396: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22397: LD_VAR 0 6
22401: PPUSH
22402: CALL_OW 264
22406: PUSH
22407: LD_INT 5
22409: PUSH
22410: LD_INT 6
22412: PUSH
22413: LD_INT 46
22415: PUSH
22416: LD_INT 44
22418: PUSH
22419: LD_INT 47
22421: PUSH
22422: LD_INT 45
22424: PUSH
22425: LD_INT 28
22427: PUSH
22428: LD_INT 7
22430: PUSH
22431: LD_INT 27
22433: PUSH
22434: LD_INT 29
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: IN
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: LD_INT 52
22457: PPUSH
22458: CALL_OW 321
22462: PUSH
22463: LD_INT 2
22465: EQUAL
22466: AND
22467: IFFALSE 22484
// bpoints := bpoints * 1.2 ;
22469: LD_ADDR_VAR 0 10
22473: PUSH
22474: LD_VAR 0 10
22478: PUSH
22479: LD_REAL  1.20000000000000E+0000
22482: MUL
22483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22484: LD_VAR 0 6
22488: PPUSH
22489: CALL_OW 264
22493: PUSH
22494: LD_INT 6
22496: PUSH
22497: LD_INT 46
22499: PUSH
22500: LD_INT 47
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: IN
22508: IFFALSE 22525
// bpoints := bpoints * 1.2 ;
22510: LD_ADDR_VAR 0 10
22514: PUSH
22515: LD_VAR 0 10
22519: PUSH
22520: LD_REAL  1.20000000000000E+0000
22523: MUL
22524: ST_TO_ADDR
// end ; unit_building :
22525: GO 22539
22527: LD_INT 3
22529: DOUBLE
22530: EQUAL
22531: IFTRUE 22535
22533: GO 22538
22535: POP
// ; end ;
22536: GO 22539
22538: POP
// for j = 1 to 3 do
22539: LD_ADDR_VAR 0 7
22543: PUSH
22544: DOUBLE
22545: LD_INT 1
22547: DEC
22548: ST_TO_ADDR
22549: LD_INT 3
22551: PUSH
22552: FOR_TO
22553: IFFALSE 22606
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22555: LD_ADDR_VAR 0 5
22559: PUSH
22560: LD_VAR 0 5
22564: PPUSH
22565: LD_VAR 0 7
22569: PPUSH
22570: LD_VAR 0 5
22574: PUSH
22575: LD_VAR 0 7
22579: ARRAY
22580: PUSH
22581: LD_VAR 0 9
22585: PUSH
22586: LD_VAR 0 7
22590: ARRAY
22591: PUSH
22592: LD_VAR 0 10
22596: MUL
22597: PLUS
22598: PPUSH
22599: CALL_OW 1
22603: ST_TO_ADDR
22604: GO 22552
22606: POP
22607: POP
// end ;
22608: GO 21091
22610: POP
22611: POP
// result := Replace ( result , 4 , tmp ) ;
22612: LD_ADDR_VAR 0 5
22616: PUSH
22617: LD_VAR 0 5
22621: PPUSH
22622: LD_INT 4
22624: PPUSH
22625: LD_VAR 0 8
22629: PPUSH
22630: CALL_OW 1
22634: ST_TO_ADDR
// end ;
22635: LD_VAR 0 5
22639: RET
// export function DangerAtRange ( unit , range ) ; begin
22640: LD_INT 0
22642: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22643: LD_ADDR_VAR 0 3
22647: PUSH
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 255
22657: PPUSH
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL_OW 250
22667: PPUSH
22668: LD_VAR 0 1
22672: PPUSH
22673: CALL_OW 251
22677: PPUSH
22678: LD_VAR 0 2
22682: PPUSH
22683: CALL 20943 0 4
22687: ST_TO_ADDR
// end ;
22688: LD_VAR 0 3
22692: RET
// export function DangerInArea ( side , area ) ; begin
22693: LD_INT 0
22695: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22696: LD_ADDR_VAR 0 3
22700: PUSH
22701: LD_VAR 0 2
22705: PPUSH
22706: LD_INT 81
22708: PUSH
22709: LD_VAR 0 1
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PPUSH
22718: CALL_OW 70
22722: ST_TO_ADDR
// end ;
22723: LD_VAR 0 3
22727: RET
// export function IsExtension ( b ) ; begin
22728: LD_INT 0
22730: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22731: LD_ADDR_VAR 0 2
22735: PUSH
22736: LD_VAR 0 1
22740: PUSH
22741: LD_INT 23
22743: PUSH
22744: LD_INT 20
22746: PUSH
22747: LD_INT 22
22749: PUSH
22750: LD_INT 17
22752: PUSH
22753: LD_INT 24
22755: PUSH
22756: LD_INT 21
22758: PUSH
22759: LD_INT 19
22761: PUSH
22762: LD_INT 16
22764: PUSH
22765: LD_INT 25
22767: PUSH
22768: LD_INT 18
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: IN
22783: ST_TO_ADDR
// end ;
22784: LD_VAR 0 2
22788: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
22789: LD_INT 0
22791: PPUSH
22792: PPUSH
22793: PPUSH
// result := [ ] ;
22794: LD_ADDR_VAR 0 3
22798: PUSH
22799: EMPTY
22800: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22801: LD_ADDR_VAR 0 4
22805: PUSH
22806: LD_VAR 0 2
22810: PPUSH
22811: LD_INT 21
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PPUSH
22821: CALL_OW 70
22825: ST_TO_ADDR
// if not tmp then
22826: LD_VAR 0 4
22830: NOT
22831: IFFALSE 22835
// exit ;
22833: GO 22893
// for i in tmp do
22835: LD_ADDR_VAR 0 5
22839: PUSH
22840: LD_VAR 0 4
22844: PUSH
22845: FOR_IN
22846: IFFALSE 22881
// if GetBase ( i ) <> base then
22848: LD_VAR 0 5
22852: PPUSH
22853: CALL_OW 274
22857: PUSH
22858: LD_VAR 0 1
22862: NONEQUAL
22863: IFFALSE 22879
// ComLinkToBase ( base , i ) ;
22865: LD_VAR 0 1
22869: PPUSH
22870: LD_VAR 0 5
22874: PPUSH
22875: CALL_OW 169
22879: GO 22845
22881: POP
22882: POP
// result := tmp ;
22883: LD_ADDR_VAR 0 3
22887: PUSH
22888: LD_VAR 0 4
22892: ST_TO_ADDR
// end ;
22893: LD_VAR 0 3
22897: RET
// export function ComComplete ( unit , b ) ; var i ; begin
22898: LD_INT 0
22900: PPUSH
22901: PPUSH
// if BuildingStatus ( b ) = bs_build then
22902: LD_VAR 0 2
22906: PPUSH
22907: CALL_OW 461
22911: PUSH
22912: LD_INT 1
22914: EQUAL
22915: IFFALSE 22975
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22917: LD_VAR 0 1
22921: PPUSH
22922: LD_STRING h
22924: PUSH
22925: LD_VAR 0 2
22929: PPUSH
22930: CALL_OW 250
22934: PUSH
22935: LD_VAR 0 2
22939: PPUSH
22940: CALL_OW 251
22944: PUSH
22945: LD_VAR 0 2
22949: PUSH
22950: LD_INT 0
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: PPUSH
22971: CALL_OW 446
// end ;
22975: LD_VAR 0 3
22979: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22980: LD_INT 0
22982: PPUSH
22983: PPUSH
22984: PPUSH
22985: PPUSH
22986: PPUSH
22987: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
22988: LD_VAR 0 1
22992: NOT
22993: PUSH
22994: LD_VAR 0 1
22998: PPUSH
22999: CALL_OW 263
23003: PUSH
23004: LD_INT 2
23006: EQUAL
23007: NOT
23008: OR
23009: IFFALSE 23013
// exit ;
23011: GO 23329
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23013: LD_ADDR_VAR 0 6
23017: PUSH
23018: LD_INT 22
23020: PUSH
23021: LD_VAR 0 1
23025: PPUSH
23026: CALL_OW 255
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: PUSH
23038: LD_INT 30
23040: PUSH
23041: LD_INT 36
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 34
23050: PUSH
23051: LD_INT 31
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: ST_TO_ADDR
// if not tmp then
23072: LD_VAR 0 6
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23329
// result := [ ] ;
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: EMPTY
23087: ST_TO_ADDR
// for i in tmp do
23088: LD_ADDR_VAR 0 3
23092: PUSH
23093: LD_VAR 0 6
23097: PUSH
23098: FOR_IN
23099: IFFALSE 23170
// begin t := UnitsInside ( i ) ;
23101: LD_ADDR_VAR 0 4
23105: PUSH
23106: LD_VAR 0 3
23110: PPUSH
23111: CALL_OW 313
23115: ST_TO_ADDR
// if t then
23116: LD_VAR 0 4
23120: IFFALSE 23168
// for j in t do
23122: LD_ADDR_VAR 0 7
23126: PUSH
23127: LD_VAR 0 4
23131: PUSH
23132: FOR_IN
23133: IFFALSE 23166
// result := Insert ( result , result + 1 , j ) ;
23135: LD_ADDR_VAR 0 2
23139: PUSH
23140: LD_VAR 0 2
23144: PPUSH
23145: LD_VAR 0 2
23149: PUSH
23150: LD_INT 1
23152: PLUS
23153: PPUSH
23154: LD_VAR 0 7
23158: PPUSH
23159: CALL_OW 2
23163: ST_TO_ADDR
23164: GO 23132
23166: POP
23167: POP
// end ;
23168: GO 23098
23170: POP
23171: POP
// if not result then
23172: LD_VAR 0 2
23176: NOT
23177: IFFALSE 23181
// exit ;
23179: GO 23329
// mech := result [ 1 ] ;
23181: LD_ADDR_VAR 0 5
23185: PUSH
23186: LD_VAR 0 2
23190: PUSH
23191: LD_INT 1
23193: ARRAY
23194: ST_TO_ADDR
// if result > 1 then
23195: LD_VAR 0 2
23199: PUSH
23200: LD_INT 1
23202: GREATER
23203: IFFALSE 23315
// for i = 2 to result do
23205: LD_ADDR_VAR 0 3
23209: PUSH
23210: DOUBLE
23211: LD_INT 2
23213: DEC
23214: ST_TO_ADDR
23215: LD_VAR 0 2
23219: PUSH
23220: FOR_TO
23221: IFFALSE 23313
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23223: LD_ADDR_VAR 0 4
23227: PUSH
23228: LD_VAR 0 2
23232: PUSH
23233: LD_VAR 0 3
23237: ARRAY
23238: PPUSH
23239: LD_INT 3
23241: PPUSH
23242: CALL_OW 259
23246: PUSH
23247: LD_VAR 0 2
23251: PUSH
23252: LD_VAR 0 3
23256: ARRAY
23257: PPUSH
23258: CALL_OW 432
23262: MINUS
23263: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23264: LD_VAR 0 4
23268: PUSH
23269: LD_VAR 0 5
23273: PPUSH
23274: LD_INT 3
23276: PPUSH
23277: CALL_OW 259
23281: PUSH
23282: LD_VAR 0 5
23286: PPUSH
23287: CALL_OW 432
23291: MINUS
23292: GREATEREQUAL
23293: IFFALSE 23311
// mech := result [ i ] ;
23295: LD_ADDR_VAR 0 5
23299: PUSH
23300: LD_VAR 0 2
23304: PUSH
23305: LD_VAR 0 3
23309: ARRAY
23310: ST_TO_ADDR
// end ;
23311: GO 23220
23313: POP
23314: POP
// ComLinkTo ( vehicle , mech ) ;
23315: LD_VAR 0 1
23319: PPUSH
23320: LD_VAR 0 5
23324: PPUSH
23325: CALL_OW 135
// end ;
23329: LD_VAR 0 2
23333: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23334: LD_INT 0
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
23342: PPUSH
23343: PPUSH
23344: PPUSH
23345: PPUSH
23346: PPUSH
23347: PPUSH
23348: PPUSH
// result := [ ] ;
23349: LD_ADDR_VAR 0 7
23353: PUSH
23354: EMPTY
23355: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 266
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: IN
23376: NOT
23377: IFFALSE 23381
// exit ;
23379: GO 25012
// if name then
23381: LD_VAR 0 3
23385: IFFALSE 23401
// SetBName ( base_dep , name ) ;
23387: LD_VAR 0 1
23391: PPUSH
23392: LD_VAR 0 3
23396: PPUSH
23397: CALL_OW 500
// base := GetBase ( base_dep ) ;
23401: LD_ADDR_VAR 0 15
23405: PUSH
23406: LD_VAR 0 1
23410: PPUSH
23411: CALL_OW 274
23415: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23416: LD_ADDR_VAR 0 16
23420: PUSH
23421: LD_VAR 0 1
23425: PPUSH
23426: CALL_OW 255
23430: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23431: LD_ADDR_VAR 0 17
23435: PUSH
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 248
23445: ST_TO_ADDR
// if sources then
23446: LD_VAR 0 5
23450: IFFALSE 23497
// for i = 1 to 3 do
23452: LD_ADDR_VAR 0 8
23456: PUSH
23457: DOUBLE
23458: LD_INT 1
23460: DEC
23461: ST_TO_ADDR
23462: LD_INT 3
23464: PUSH
23465: FOR_TO
23466: IFFALSE 23495
// AddResourceType ( base , i , sources [ i ] ) ;
23468: LD_VAR 0 15
23472: PPUSH
23473: LD_VAR 0 8
23477: PPUSH
23478: LD_VAR 0 5
23482: PUSH
23483: LD_VAR 0 8
23487: ARRAY
23488: PPUSH
23489: CALL_OW 276
23493: GO 23465
23495: POP
23496: POP
// buildings := GetBaseBuildings ( base , area ) ;
23497: LD_ADDR_VAR 0 18
23501: PUSH
23502: LD_VAR 0 15
23506: PPUSH
23507: LD_VAR 0 2
23511: PPUSH
23512: CALL 22789 0 2
23516: ST_TO_ADDR
// InitHc ;
23517: CALL_OW 19
// InitUc ;
23521: CALL_OW 18
// uc_side := side ;
23525: LD_ADDR_OWVAR 20
23529: PUSH
23530: LD_VAR 0 16
23534: ST_TO_ADDR
// uc_nation := nation ;
23535: LD_ADDR_OWVAR 21
23539: PUSH
23540: LD_VAR 0 17
23544: ST_TO_ADDR
// if buildings then
23545: LD_VAR 0 18
23549: IFFALSE 24871
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23551: LD_ADDR_VAR 0 19
23555: PUSH
23556: LD_VAR 0 18
23560: PPUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 30
23566: PUSH
23567: LD_INT 29
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 30
23576: PUSH
23577: LD_INT 30
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: PPUSH
23589: CALL_OW 72
23593: ST_TO_ADDR
// if tmp then
23594: LD_VAR 0 19
23598: IFFALSE 23646
// for i in tmp do
23600: LD_ADDR_VAR 0 8
23604: PUSH
23605: LD_VAR 0 19
23609: PUSH
23610: FOR_IN
23611: IFFALSE 23644
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23613: LD_VAR 0 8
23617: PPUSH
23618: CALL_OW 250
23622: PPUSH
23623: LD_VAR 0 8
23627: PPUSH
23628: CALL_OW 251
23632: PPUSH
23633: LD_VAR 0 16
23637: PPUSH
23638: CALL_OW 441
23642: GO 23610
23644: POP
23645: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23646: LD_VAR 0 18
23650: PPUSH
23651: LD_INT 2
23653: PUSH
23654: LD_INT 30
23656: PUSH
23657: LD_INT 32
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 30
23666: PUSH
23667: LD_INT 33
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: PPUSH
23679: CALL_OW 72
23683: IFFALSE 23771
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23685: LD_ADDR_VAR 0 8
23689: PUSH
23690: LD_VAR 0 18
23694: PPUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 30
23700: PUSH
23701: LD_INT 32
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 30
23710: PUSH
23711: LD_INT 33
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: LIST
23722: PPUSH
23723: CALL_OW 72
23727: PUSH
23728: FOR_IN
23729: IFFALSE 23769
// begin if not GetBWeapon ( i ) then
23731: LD_VAR 0 8
23735: PPUSH
23736: CALL_OW 269
23740: NOT
23741: IFFALSE 23767
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23743: LD_VAR 0 8
23747: PPUSH
23748: LD_VAR 0 8
23752: PPUSH
23753: LD_VAR 0 2
23757: PPUSH
23758: CALL 25017 0 2
23762: PPUSH
23763: CALL_OW 431
// end ;
23767: GO 23728
23769: POP
23770: POP
// end ; for i = 1 to personel do
23771: LD_ADDR_VAR 0 8
23775: PUSH
23776: DOUBLE
23777: LD_INT 1
23779: DEC
23780: ST_TO_ADDR
23781: LD_VAR 0 6
23785: PUSH
23786: FOR_TO
23787: IFFALSE 24851
// begin if i > 4 then
23789: LD_VAR 0 8
23793: PUSH
23794: LD_INT 4
23796: GREATER
23797: IFFALSE 23801
// break ;
23799: GO 24851
// case i of 1 :
23801: LD_VAR 0 8
23805: PUSH
23806: LD_INT 1
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23894
23814: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23815: LD_ADDR_VAR 0 12
23819: PUSH
23820: LD_VAR 0 18
23824: PPUSH
23825: LD_INT 22
23827: PUSH
23828: LD_VAR 0 16
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 58
23839: PUSH
23840: EMPTY
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 30
23848: PUSH
23849: LD_INT 32
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 30
23858: PUSH
23859: LD_INT 4
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 30
23868: PUSH
23869: LD_INT 5
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: PPUSH
23887: CALL_OW 72
23891: ST_TO_ADDR
23892: GO 24116
23894: LD_INT 2
23896: DOUBLE
23897: EQUAL
23898: IFTRUE 23902
23900: GO 23964
23902: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23903: LD_ADDR_VAR 0 12
23907: PUSH
23908: LD_VAR 0 18
23912: PPUSH
23913: LD_INT 22
23915: PUSH
23916: LD_VAR 0 16
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 2
23927: PUSH
23928: LD_INT 30
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 30
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PPUSH
23957: CALL_OW 72
23961: ST_TO_ADDR
23962: GO 24116
23964: LD_INT 3
23966: DOUBLE
23967: EQUAL
23968: IFTRUE 23972
23970: GO 24034
23972: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23973: LD_ADDR_VAR 0 12
23977: PUSH
23978: LD_VAR 0 18
23982: PPUSH
23983: LD_INT 22
23985: PUSH
23986: LD_VAR 0 16
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: LD_INT 30
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 30
24010: PUSH
24011: LD_INT 3
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PPUSH
24027: CALL_OW 72
24031: ST_TO_ADDR
24032: GO 24116
24034: LD_INT 4
24036: DOUBLE
24037: EQUAL
24038: IFTRUE 24042
24040: GO 24115
24042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24043: LD_ADDR_VAR 0 12
24047: PUSH
24048: LD_VAR 0 18
24052: PPUSH
24053: LD_INT 22
24055: PUSH
24056: LD_VAR 0 16
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: PUSH
24068: LD_INT 30
24070: PUSH
24071: LD_INT 6
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 30
24080: PUSH
24081: LD_INT 7
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 30
24090: PUSH
24091: LD_INT 8
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PPUSH
24108: CALL_OW 72
24112: ST_TO_ADDR
24113: GO 24116
24115: POP
// if i = 1 then
24116: LD_VAR 0 8
24120: PUSH
24121: LD_INT 1
24123: EQUAL
24124: IFFALSE 24235
// begin tmp := [ ] ;
24126: LD_ADDR_VAR 0 19
24130: PUSH
24131: EMPTY
24132: ST_TO_ADDR
// for j in f do
24133: LD_ADDR_VAR 0 9
24137: PUSH
24138: LD_VAR 0 12
24142: PUSH
24143: FOR_IN
24144: IFFALSE 24217
// if GetBType ( j ) = b_bunker then
24146: LD_VAR 0 9
24150: PPUSH
24151: CALL_OW 266
24155: PUSH
24156: LD_INT 32
24158: EQUAL
24159: IFFALSE 24186
// tmp := Insert ( tmp , 1 , j ) else
24161: LD_ADDR_VAR 0 19
24165: PUSH
24166: LD_VAR 0 19
24170: PPUSH
24171: LD_INT 1
24173: PPUSH
24174: LD_VAR 0 9
24178: PPUSH
24179: CALL_OW 2
24183: ST_TO_ADDR
24184: GO 24215
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24186: LD_ADDR_VAR 0 19
24190: PUSH
24191: LD_VAR 0 19
24195: PPUSH
24196: LD_VAR 0 19
24200: PUSH
24201: LD_INT 1
24203: PLUS
24204: PPUSH
24205: LD_VAR 0 9
24209: PPUSH
24210: CALL_OW 2
24214: ST_TO_ADDR
24215: GO 24143
24217: POP
24218: POP
// if tmp then
24219: LD_VAR 0 19
24223: IFFALSE 24235
// f := tmp ;
24225: LD_ADDR_VAR 0 12
24229: PUSH
24230: LD_VAR 0 19
24234: ST_TO_ADDR
// end ; x := personel [ i ] ;
24235: LD_ADDR_VAR 0 13
24239: PUSH
24240: LD_VAR 0 6
24244: PUSH
24245: LD_VAR 0 8
24249: ARRAY
24250: ST_TO_ADDR
// if x = - 1 then
24251: LD_VAR 0 13
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: EQUAL
24260: IFFALSE 24469
// begin for j in f do
24262: LD_ADDR_VAR 0 9
24266: PUSH
24267: LD_VAR 0 12
24271: PUSH
24272: FOR_IN
24273: IFFALSE 24465
// repeat InitHc ;
24275: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24279: LD_VAR 0 9
24283: PPUSH
24284: CALL_OW 266
24288: PUSH
24289: LD_INT 5
24291: EQUAL
24292: IFFALSE 24362
// begin if UnitsInside ( j ) < 3 then
24294: LD_VAR 0 9
24298: PPUSH
24299: CALL_OW 313
24303: PUSH
24304: LD_INT 3
24306: LESS
24307: IFFALSE 24343
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24309: LD_INT 0
24311: PPUSH
24312: LD_INT 5
24314: PUSH
24315: LD_INT 8
24317: PUSH
24318: LD_INT 9
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: LIST
24325: PUSH
24326: LD_VAR 0 17
24330: ARRAY
24331: PPUSH
24332: LD_VAR 0 4
24336: PPUSH
24337: CALL_OW 380
24341: GO 24360
// PrepareHuman ( false , i , skill ) ;
24343: LD_INT 0
24345: PPUSH
24346: LD_VAR 0 8
24350: PPUSH
24351: LD_VAR 0 4
24355: PPUSH
24356: CALL_OW 380
// end else
24360: GO 24379
// PrepareHuman ( false , i , skill ) ;
24362: LD_INT 0
24364: PPUSH
24365: LD_VAR 0 8
24369: PPUSH
24370: LD_VAR 0 4
24374: PPUSH
24375: CALL_OW 380
// un := CreateHuman ;
24379: LD_ADDR_VAR 0 14
24383: PUSH
24384: CALL_OW 44
24388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24389: LD_ADDR_VAR 0 7
24393: PUSH
24394: LD_VAR 0 7
24398: PPUSH
24399: LD_INT 1
24401: PPUSH
24402: LD_VAR 0 14
24406: PPUSH
24407: CALL_OW 2
24411: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24412: LD_VAR 0 14
24416: PPUSH
24417: LD_VAR 0 9
24421: PPUSH
24422: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24426: LD_VAR 0 9
24430: PPUSH
24431: CALL_OW 313
24435: PUSH
24436: LD_INT 6
24438: EQUAL
24439: PUSH
24440: LD_VAR 0 9
24444: PPUSH
24445: CALL_OW 266
24449: PUSH
24450: LD_INT 32
24452: PUSH
24453: LD_INT 31
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: IN
24460: OR
24461: IFFALSE 24275
24463: GO 24272
24465: POP
24466: POP
// end else
24467: GO 24849
// for j = 1 to x do
24469: LD_ADDR_VAR 0 9
24473: PUSH
24474: DOUBLE
24475: LD_INT 1
24477: DEC
24478: ST_TO_ADDR
24479: LD_VAR 0 13
24483: PUSH
24484: FOR_TO
24485: IFFALSE 24847
// begin InitHc ;
24487: CALL_OW 19
// if not f then
24491: LD_VAR 0 12
24495: NOT
24496: IFFALSE 24585
// begin PrepareHuman ( false , i , skill ) ;
24498: LD_INT 0
24500: PPUSH
24501: LD_VAR 0 8
24505: PPUSH
24506: LD_VAR 0 4
24510: PPUSH
24511: CALL_OW 380
// un := CreateHuman ;
24515: LD_ADDR_VAR 0 14
24519: PUSH
24520: CALL_OW 44
24524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24525: LD_ADDR_VAR 0 7
24529: PUSH
24530: LD_VAR 0 7
24534: PPUSH
24535: LD_INT 1
24537: PPUSH
24538: LD_VAR 0 14
24542: PPUSH
24543: CALL_OW 2
24547: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24548: LD_VAR 0 14
24552: PPUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: CALL_OW 250
24562: PPUSH
24563: LD_VAR 0 1
24567: PPUSH
24568: CALL_OW 251
24572: PPUSH
24573: LD_INT 10
24575: PPUSH
24576: LD_INT 0
24578: PPUSH
24579: CALL_OW 50
// continue ;
24583: GO 24484
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24585: LD_VAR 0 12
24589: PUSH
24590: LD_INT 1
24592: ARRAY
24593: PPUSH
24594: CALL_OW 313
24598: PUSH
24599: LD_VAR 0 12
24603: PUSH
24604: LD_INT 1
24606: ARRAY
24607: PPUSH
24608: CALL_OW 266
24612: PUSH
24613: LD_INT 32
24615: PUSH
24616: LD_INT 31
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: IN
24623: AND
24624: PUSH
24625: LD_VAR 0 12
24629: PUSH
24630: LD_INT 1
24632: ARRAY
24633: PPUSH
24634: CALL_OW 313
24638: PUSH
24639: LD_INT 6
24641: EQUAL
24642: OR
24643: IFFALSE 24663
// f := Delete ( f , 1 ) ;
24645: LD_ADDR_VAR 0 12
24649: PUSH
24650: LD_VAR 0 12
24654: PPUSH
24655: LD_INT 1
24657: PPUSH
24658: CALL_OW 3
24662: ST_TO_ADDR
// if not f then
24663: LD_VAR 0 12
24667: NOT
24668: IFFALSE 24686
// begin x := x + 2 ;
24670: LD_ADDR_VAR 0 13
24674: PUSH
24675: LD_VAR 0 13
24679: PUSH
24680: LD_INT 2
24682: PLUS
24683: ST_TO_ADDR
// continue ;
24684: GO 24484
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24686: LD_VAR 0 12
24690: PUSH
24691: LD_INT 1
24693: ARRAY
24694: PPUSH
24695: CALL_OW 266
24699: PUSH
24700: LD_INT 5
24702: EQUAL
24703: IFFALSE 24777
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24705: LD_VAR 0 12
24709: PUSH
24710: LD_INT 1
24712: ARRAY
24713: PPUSH
24714: CALL_OW 313
24718: PUSH
24719: LD_INT 3
24721: LESS
24722: IFFALSE 24758
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24724: LD_INT 0
24726: PPUSH
24727: LD_INT 5
24729: PUSH
24730: LD_INT 8
24732: PUSH
24733: LD_INT 9
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: PUSH
24741: LD_VAR 0 17
24745: ARRAY
24746: PPUSH
24747: LD_VAR 0 4
24751: PPUSH
24752: CALL_OW 380
24756: GO 24775
// PrepareHuman ( false , i , skill ) ;
24758: LD_INT 0
24760: PPUSH
24761: LD_VAR 0 8
24765: PPUSH
24766: LD_VAR 0 4
24770: PPUSH
24771: CALL_OW 380
// end else
24775: GO 24794
// PrepareHuman ( false , i , skill ) ;
24777: LD_INT 0
24779: PPUSH
24780: LD_VAR 0 8
24784: PPUSH
24785: LD_VAR 0 4
24789: PPUSH
24790: CALL_OW 380
// un := CreateHuman ;
24794: LD_ADDR_VAR 0 14
24798: PUSH
24799: CALL_OW 44
24803: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24804: LD_ADDR_VAR 0 7
24808: PUSH
24809: LD_VAR 0 7
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: LD_VAR 0 14
24821: PPUSH
24822: CALL_OW 2
24826: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24827: LD_VAR 0 14
24831: PPUSH
24832: LD_VAR 0 12
24836: PUSH
24837: LD_INT 1
24839: ARRAY
24840: PPUSH
24841: CALL_OW 52
// end ;
24845: GO 24484
24847: POP
24848: POP
// end ;
24849: GO 23786
24851: POP
24852: POP
// result := result ^ buildings ;
24853: LD_ADDR_VAR 0 7
24857: PUSH
24858: LD_VAR 0 7
24862: PUSH
24863: LD_VAR 0 18
24867: ADD
24868: ST_TO_ADDR
// end else
24869: GO 25012
// begin for i = 1 to personel do
24871: LD_ADDR_VAR 0 8
24875: PUSH
24876: DOUBLE
24877: LD_INT 1
24879: DEC
24880: ST_TO_ADDR
24881: LD_VAR 0 6
24885: PUSH
24886: FOR_TO
24887: IFFALSE 25010
// begin if i > 4 then
24889: LD_VAR 0 8
24893: PUSH
24894: LD_INT 4
24896: GREATER
24897: IFFALSE 24901
// break ;
24899: GO 25010
// x := personel [ i ] ;
24901: LD_ADDR_VAR 0 13
24905: PUSH
24906: LD_VAR 0 6
24910: PUSH
24911: LD_VAR 0 8
24915: ARRAY
24916: ST_TO_ADDR
// if x = - 1 then
24917: LD_VAR 0 13
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: EQUAL
24926: IFFALSE 24930
// continue ;
24928: GO 24886
// PrepareHuman ( false , i , skill ) ;
24930: LD_INT 0
24932: PPUSH
24933: LD_VAR 0 8
24937: PPUSH
24938: LD_VAR 0 4
24942: PPUSH
24943: CALL_OW 380
// un := CreateHuman ;
24947: LD_ADDR_VAR 0 14
24951: PUSH
24952: CALL_OW 44
24956: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24957: LD_VAR 0 14
24961: PPUSH
24962: LD_VAR 0 1
24966: PPUSH
24967: CALL_OW 250
24971: PPUSH
24972: LD_VAR 0 1
24976: PPUSH
24977: CALL_OW 251
24981: PPUSH
24982: LD_INT 10
24984: PPUSH
24985: LD_INT 0
24987: PPUSH
24988: CALL_OW 50
// result := result ^ un ;
24992: LD_ADDR_VAR 0 7
24996: PUSH
24997: LD_VAR 0 7
25001: PUSH
25002: LD_VAR 0 14
25006: ADD
25007: ST_TO_ADDR
// end ;
25008: GO 24886
25010: POP
25011: POP
// end ; end ;
25012: LD_VAR 0 7
25016: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25017: LD_INT 0
25019: PPUSH
25020: PPUSH
25021: PPUSH
25022: PPUSH
25023: PPUSH
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
25029: PPUSH
25030: PPUSH
25031: PPUSH
25032: PPUSH
25033: PPUSH
25034: PPUSH
// result := false ;
25035: LD_ADDR_VAR 0 3
25039: PUSH
25040: LD_INT 0
25042: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25043: LD_VAR 0 1
25047: NOT
25048: PUSH
25049: LD_VAR 0 1
25053: PPUSH
25054: CALL_OW 266
25058: PUSH
25059: LD_INT 32
25061: PUSH
25062: LD_INT 33
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: IN
25069: NOT
25070: OR
25071: IFFALSE 25075
// exit ;
25073: GO 26211
// nat := GetNation ( tower ) ;
25075: LD_ADDR_VAR 0 12
25079: PUSH
25080: LD_VAR 0 1
25084: PPUSH
25085: CALL_OW 248
25089: ST_TO_ADDR
// side := GetSide ( tower ) ;
25090: LD_ADDR_VAR 0 16
25094: PUSH
25095: LD_VAR 0 1
25099: PPUSH
25100: CALL_OW 255
25104: ST_TO_ADDR
// x := GetX ( tower ) ;
25105: LD_ADDR_VAR 0 10
25109: PUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 250
25119: ST_TO_ADDR
// y := GetY ( tower ) ;
25120: LD_ADDR_VAR 0 11
25124: PUSH
25125: LD_VAR 0 1
25129: PPUSH
25130: CALL_OW 251
25134: ST_TO_ADDR
// if not x or not y then
25135: LD_VAR 0 10
25139: NOT
25140: PUSH
25141: LD_VAR 0 11
25145: NOT
25146: OR
25147: IFFALSE 25151
// exit ;
25149: GO 26211
// weapon := 0 ;
25151: LD_ADDR_VAR 0 18
25155: PUSH
25156: LD_INT 0
25158: ST_TO_ADDR
// fac_list := [ ] ;
25159: LD_ADDR_VAR 0 17
25163: PUSH
25164: EMPTY
25165: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
25166: LD_ADDR_VAR 0 6
25170: PUSH
25171: LD_VAR 0 1
25175: PPUSH
25176: CALL_OW 274
25180: PPUSH
25181: LD_VAR 0 2
25185: PPUSH
25186: CALL 22789 0 2
25190: PPUSH
25191: LD_INT 30
25193: PUSH
25194: LD_INT 3
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PPUSH
25201: CALL_OW 72
25205: ST_TO_ADDR
// if not factories then
25206: LD_VAR 0 6
25210: NOT
25211: IFFALSE 25215
// exit ;
25213: GO 26211
// for i in factories do
25215: LD_ADDR_VAR 0 8
25219: PUSH
25220: LD_VAR 0 6
25224: PUSH
25225: FOR_IN
25226: IFFALSE 25251
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25228: LD_ADDR_VAR 0 17
25232: PUSH
25233: LD_VAR 0 17
25237: PUSH
25238: LD_VAR 0 8
25242: PPUSH
25243: CALL_OW 478
25247: UNION
25248: ST_TO_ADDR
25249: GO 25225
25251: POP
25252: POP
// if not fac_list then
25253: LD_VAR 0 17
25257: NOT
25258: IFFALSE 25262
// exit ;
25260: GO 26211
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25262: LD_ADDR_VAR 0 5
25266: PUSH
25267: LD_INT 4
25269: PUSH
25270: LD_INT 5
25272: PUSH
25273: LD_INT 9
25275: PUSH
25276: LD_INT 10
25278: PUSH
25279: LD_INT 6
25281: PUSH
25282: LD_INT 7
25284: PUSH
25285: LD_INT 11
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 27
25299: PUSH
25300: LD_INT 28
25302: PUSH
25303: LD_INT 26
25305: PUSH
25306: LD_INT 30
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 43
25317: PUSH
25318: LD_INT 44
25320: PUSH
25321: LD_INT 46
25323: PUSH
25324: LD_INT 45
25326: PUSH
25327: LD_INT 47
25329: PUSH
25330: LD_INT 49
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: LIST
25345: PUSH
25346: LD_VAR 0 12
25350: ARRAY
25351: ST_TO_ADDR
// for i in list do
25352: LD_ADDR_VAR 0 8
25356: PUSH
25357: LD_VAR 0 5
25361: PUSH
25362: FOR_IN
25363: IFFALSE 25396
// if not i in fac_list then
25365: LD_VAR 0 8
25369: PUSH
25370: LD_VAR 0 17
25374: IN
25375: NOT
25376: IFFALSE 25394
// list := list diff i ;
25378: LD_ADDR_VAR 0 5
25382: PUSH
25383: LD_VAR 0 5
25387: PUSH
25388: LD_VAR 0 8
25392: DIFF
25393: ST_TO_ADDR
25394: GO 25362
25396: POP
25397: POP
// if not list then
25398: LD_VAR 0 5
25402: NOT
25403: IFFALSE 25407
// exit ;
25405: GO 26211
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25407: LD_VAR 0 12
25411: PUSH
25412: LD_INT 3
25414: EQUAL
25415: PUSH
25416: LD_INT 49
25418: PUSH
25419: LD_VAR 0 5
25423: IN
25424: AND
25425: PUSH
25426: LD_INT 31
25428: PPUSH
25429: LD_VAR 0 16
25433: PPUSH
25434: CALL_OW 321
25438: PUSH
25439: LD_INT 2
25441: EQUAL
25442: AND
25443: IFFALSE 25503
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25445: LD_INT 22
25447: PUSH
25448: LD_VAR 0 16
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 35
25459: PUSH
25460: LD_INT 49
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 91
25469: PUSH
25470: LD_VAR 0 1
25474: PUSH
25475: LD_INT 10
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: LIST
25487: PPUSH
25488: CALL_OW 69
25492: NOT
25493: IFFALSE 25503
// weapon := ru_time_lapser ;
25495: LD_ADDR_VAR 0 18
25499: PUSH
25500: LD_INT 49
25502: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25503: LD_VAR 0 12
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 2
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: IN
25518: PUSH
25519: LD_INT 11
25521: PUSH
25522: LD_VAR 0 5
25526: IN
25527: PUSH
25528: LD_INT 30
25530: PUSH
25531: LD_VAR 0 5
25535: IN
25536: OR
25537: AND
25538: PUSH
25539: LD_INT 6
25541: PPUSH
25542: LD_VAR 0 16
25546: PPUSH
25547: CALL_OW 321
25551: PUSH
25552: LD_INT 2
25554: EQUAL
25555: AND
25556: IFFALSE 25721
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25558: LD_INT 22
25560: PUSH
25561: LD_VAR 0 16
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: LD_INT 35
25575: PUSH
25576: LD_INT 11
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 35
25585: PUSH
25586: LD_INT 30
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 91
25600: PUSH
25601: LD_VAR 0 1
25605: PUSH
25606: LD_INT 18
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: LIST
25618: PPUSH
25619: CALL_OW 69
25623: NOT
25624: PUSH
25625: LD_INT 22
25627: PUSH
25628: LD_VAR 0 16
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 2
25639: PUSH
25640: LD_INT 30
25642: PUSH
25643: LD_INT 32
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 30
25652: PUSH
25653: LD_INT 33
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 91
25667: PUSH
25668: LD_VAR 0 1
25672: PUSH
25673: LD_INT 12
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: PUSH
25686: EMPTY
25687: LIST
25688: PPUSH
25689: CALL_OW 69
25693: PUSH
25694: LD_INT 2
25696: GREATER
25697: AND
25698: IFFALSE 25721
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25700: LD_ADDR_VAR 0 18
25704: PUSH
25705: LD_INT 11
25707: PUSH
25708: LD_INT 30
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_VAR 0 12
25719: ARRAY
25720: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25721: LD_VAR 0 18
25725: NOT
25726: PUSH
25727: LD_INT 40
25729: PPUSH
25730: LD_VAR 0 16
25734: PPUSH
25735: CALL_OW 321
25739: PUSH
25740: LD_INT 2
25742: EQUAL
25743: AND
25744: PUSH
25745: LD_INT 7
25747: PUSH
25748: LD_VAR 0 5
25752: IN
25753: PUSH
25754: LD_INT 28
25756: PUSH
25757: LD_VAR 0 5
25761: IN
25762: OR
25763: PUSH
25764: LD_INT 45
25766: PUSH
25767: LD_VAR 0 5
25771: IN
25772: OR
25773: AND
25774: IFFALSE 26028
// begin hex := GetHexInfo ( x , y ) ;
25776: LD_ADDR_VAR 0 4
25780: PUSH
25781: LD_VAR 0 10
25785: PPUSH
25786: LD_VAR 0 11
25790: PPUSH
25791: CALL_OW 546
25795: ST_TO_ADDR
// if hex [ 1 ] then
25796: LD_VAR 0 4
25800: PUSH
25801: LD_INT 1
25803: ARRAY
25804: IFFALSE 25808
// exit ;
25806: GO 26211
// height := hex [ 2 ] ;
25808: LD_ADDR_VAR 0 15
25812: PUSH
25813: LD_VAR 0 4
25817: PUSH
25818: LD_INT 2
25820: ARRAY
25821: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25822: LD_ADDR_VAR 0 14
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: LD_INT 3
25835: PUSH
25836: LD_INT 5
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: ST_TO_ADDR
// for i in tmp do
25845: LD_ADDR_VAR 0 8
25849: PUSH
25850: LD_VAR 0 14
25854: PUSH
25855: FOR_IN
25856: IFFALSE 26026
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25858: LD_ADDR_VAR 0 9
25862: PUSH
25863: LD_VAR 0 10
25867: PPUSH
25868: LD_VAR 0 8
25872: PPUSH
25873: LD_INT 5
25875: PPUSH
25876: CALL_OW 272
25880: PUSH
25881: LD_VAR 0 11
25885: PPUSH
25886: LD_VAR 0 8
25890: PPUSH
25891: LD_INT 5
25893: PPUSH
25894: CALL_OW 273
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25903: LD_VAR 0 9
25907: PUSH
25908: LD_INT 1
25910: ARRAY
25911: PPUSH
25912: LD_VAR 0 9
25916: PUSH
25917: LD_INT 2
25919: ARRAY
25920: PPUSH
25921: CALL_OW 488
25925: IFFALSE 26024
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25927: LD_ADDR_VAR 0 4
25931: PUSH
25932: LD_VAR 0 9
25936: PUSH
25937: LD_INT 1
25939: ARRAY
25940: PPUSH
25941: LD_VAR 0 9
25945: PUSH
25946: LD_INT 2
25948: ARRAY
25949: PPUSH
25950: CALL_OW 546
25954: ST_TO_ADDR
// if hex [ 1 ] then
25955: LD_VAR 0 4
25959: PUSH
25960: LD_INT 1
25962: ARRAY
25963: IFFALSE 25967
// continue ;
25965: GO 25855
// h := hex [ 2 ] ;
25967: LD_ADDR_VAR 0 13
25971: PUSH
25972: LD_VAR 0 4
25976: PUSH
25977: LD_INT 2
25979: ARRAY
25980: ST_TO_ADDR
// if h + 7 < height then
25981: LD_VAR 0 13
25985: PUSH
25986: LD_INT 7
25988: PLUS
25989: PUSH
25990: LD_VAR 0 15
25994: LESS
25995: IFFALSE 26024
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25997: LD_ADDR_VAR 0 18
26001: PUSH
26002: LD_INT 7
26004: PUSH
26005: LD_INT 28
26007: PUSH
26008: LD_INT 45
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: LIST
26015: PUSH
26016: LD_VAR 0 12
26020: ARRAY
26021: ST_TO_ADDR
// break ;
26022: GO 26026
// end ; end ; end ;
26024: GO 25855
26026: POP
26027: POP
// end ; if not weapon then
26028: LD_VAR 0 18
26032: NOT
26033: IFFALSE 26093
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26035: LD_ADDR_VAR 0 5
26039: PUSH
26040: LD_VAR 0 5
26044: PUSH
26045: LD_INT 11
26047: PUSH
26048: LD_INT 30
26050: PUSH
26051: LD_INT 49
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: DIFF
26059: ST_TO_ADDR
// if not list then
26060: LD_VAR 0 5
26064: NOT
26065: IFFALSE 26069
// exit ;
26067: GO 26211
// weapon := list [ rand ( 1 , list ) ] ;
26069: LD_ADDR_VAR 0 18
26073: PUSH
26074: LD_VAR 0 5
26078: PUSH
26079: LD_INT 1
26081: PPUSH
26082: LD_VAR 0 5
26086: PPUSH
26087: CALL_OW 12
26091: ARRAY
26092: ST_TO_ADDR
// end ; if weapon then
26093: LD_VAR 0 18
26097: IFFALSE 26211
// begin tmp := CostOfWeapon ( weapon ) ;
26099: LD_ADDR_VAR 0 14
26103: PUSH
26104: LD_VAR 0 18
26108: PPUSH
26109: CALL_OW 451
26113: ST_TO_ADDR
// j := GetBase ( tower ) ;
26114: LD_ADDR_VAR 0 9
26118: PUSH
26119: LD_VAR 0 1
26123: PPUSH
26124: CALL_OW 274
26128: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26129: LD_VAR 0 9
26133: PPUSH
26134: LD_INT 1
26136: PPUSH
26137: CALL_OW 275
26141: PUSH
26142: LD_VAR 0 14
26146: PUSH
26147: LD_INT 1
26149: ARRAY
26150: GREATEREQUAL
26151: PUSH
26152: LD_VAR 0 9
26156: PPUSH
26157: LD_INT 2
26159: PPUSH
26160: CALL_OW 275
26164: PUSH
26165: LD_VAR 0 14
26169: PUSH
26170: LD_INT 2
26172: ARRAY
26173: GREATEREQUAL
26174: AND
26175: PUSH
26176: LD_VAR 0 9
26180: PPUSH
26181: LD_INT 3
26183: PPUSH
26184: CALL_OW 275
26188: PUSH
26189: LD_VAR 0 14
26193: PUSH
26194: LD_INT 3
26196: ARRAY
26197: GREATEREQUAL
26198: AND
26199: IFFALSE 26211
// result := weapon ;
26201: LD_ADDR_VAR 0 3
26205: PUSH
26206: LD_VAR 0 18
26210: ST_TO_ADDR
// end ; end ;
26211: LD_VAR 0 3
26215: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26216: LD_INT 0
26218: PPUSH
26219: PPUSH
// result := true ;
26220: LD_ADDR_VAR 0 3
26224: PUSH
26225: LD_INT 1
26227: ST_TO_ADDR
// if array1 = array2 then
26228: LD_VAR 0 1
26232: PUSH
26233: LD_VAR 0 2
26237: EQUAL
26238: IFFALSE 26298
// begin for i = 1 to array1 do
26240: LD_ADDR_VAR 0 4
26244: PUSH
26245: DOUBLE
26246: LD_INT 1
26248: DEC
26249: ST_TO_ADDR
26250: LD_VAR 0 1
26254: PUSH
26255: FOR_TO
26256: IFFALSE 26294
// if array1 [ i ] <> array2 [ i ] then
26258: LD_VAR 0 1
26262: PUSH
26263: LD_VAR 0 4
26267: ARRAY
26268: PUSH
26269: LD_VAR 0 2
26273: PUSH
26274: LD_VAR 0 4
26278: ARRAY
26279: NONEQUAL
26280: IFFALSE 26292
// begin result := false ;
26282: LD_ADDR_VAR 0 3
26286: PUSH
26287: LD_INT 0
26289: ST_TO_ADDR
// break ;
26290: GO 26294
// end ;
26292: GO 26255
26294: POP
26295: POP
// end else
26296: GO 26306
// result := false ;
26298: LD_ADDR_VAR 0 3
26302: PUSH
26303: LD_INT 0
26305: ST_TO_ADDR
// end ;
26306: LD_VAR 0 3
26310: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26311: LD_INT 0
26313: PPUSH
26314: PPUSH
26315: PPUSH
// pom := GetBase ( fac ) ;
26316: LD_ADDR_VAR 0 5
26320: PUSH
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 274
26330: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26331: LD_ADDR_VAR 0 4
26335: PUSH
26336: LD_VAR 0 2
26340: PUSH
26341: LD_INT 1
26343: ARRAY
26344: PPUSH
26345: LD_VAR 0 2
26349: PUSH
26350: LD_INT 2
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 2
26358: PUSH
26359: LD_INT 3
26361: ARRAY
26362: PPUSH
26363: LD_VAR 0 2
26367: PUSH
26368: LD_INT 4
26370: ARRAY
26371: PPUSH
26372: CALL_OW 449
26376: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26377: LD_ADDR_VAR 0 3
26381: PUSH
26382: LD_VAR 0 5
26386: PPUSH
26387: LD_INT 1
26389: PPUSH
26390: CALL_OW 275
26394: PUSH
26395: LD_VAR 0 4
26399: PUSH
26400: LD_INT 1
26402: ARRAY
26403: GREATEREQUAL
26404: PUSH
26405: LD_VAR 0 5
26409: PPUSH
26410: LD_INT 2
26412: PPUSH
26413: CALL_OW 275
26417: PUSH
26418: LD_VAR 0 4
26422: PUSH
26423: LD_INT 2
26425: ARRAY
26426: GREATEREQUAL
26427: AND
26428: PUSH
26429: LD_VAR 0 5
26433: PPUSH
26434: LD_INT 3
26436: PPUSH
26437: CALL_OW 275
26441: PUSH
26442: LD_VAR 0 4
26446: PUSH
26447: LD_INT 3
26449: ARRAY
26450: GREATEREQUAL
26451: AND
26452: ST_TO_ADDR
// end ;
26453: LD_VAR 0 3
26457: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
26462: PPUSH
26463: PPUSH
// pom := GetBase ( building ) ;
26464: LD_ADDR_VAR 0 3
26468: PUSH
26469: LD_VAR 0 1
26473: PPUSH
26474: CALL_OW 274
26478: ST_TO_ADDR
// if not pom then
26479: LD_VAR 0 3
26483: NOT
26484: IFFALSE 26488
// exit ;
26486: GO 26658
// btype := GetBType ( building ) ;
26488: LD_ADDR_VAR 0 5
26492: PUSH
26493: LD_VAR 0 1
26497: PPUSH
26498: CALL_OW 266
26502: ST_TO_ADDR
// if btype = b_armoury then
26503: LD_VAR 0 5
26507: PUSH
26508: LD_INT 4
26510: EQUAL
26511: IFFALSE 26521
// btype := b_barracks ;
26513: LD_ADDR_VAR 0 5
26517: PUSH
26518: LD_INT 5
26520: ST_TO_ADDR
// if btype = b_depot then
26521: LD_VAR 0 5
26525: PUSH
26526: LD_INT 0
26528: EQUAL
26529: IFFALSE 26539
// btype := b_warehouse ;
26531: LD_ADDR_VAR 0 5
26535: PUSH
26536: LD_INT 1
26538: ST_TO_ADDR
// if btype = b_workshop then
26539: LD_VAR 0 5
26543: PUSH
26544: LD_INT 2
26546: EQUAL
26547: IFFALSE 26557
// btype := b_factory ;
26549: LD_ADDR_VAR 0 5
26553: PUSH
26554: LD_INT 3
26556: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26557: LD_ADDR_VAR 0 4
26561: PUSH
26562: LD_VAR 0 5
26566: PPUSH
26567: LD_VAR 0 1
26571: PPUSH
26572: CALL_OW 248
26576: PPUSH
26577: CALL_OW 450
26581: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26582: LD_ADDR_VAR 0 2
26586: PUSH
26587: LD_VAR 0 3
26591: PPUSH
26592: LD_INT 1
26594: PPUSH
26595: CALL_OW 275
26599: PUSH
26600: LD_VAR 0 4
26604: PUSH
26605: LD_INT 1
26607: ARRAY
26608: GREATEREQUAL
26609: PUSH
26610: LD_VAR 0 3
26614: PPUSH
26615: LD_INT 2
26617: PPUSH
26618: CALL_OW 275
26622: PUSH
26623: LD_VAR 0 4
26627: PUSH
26628: LD_INT 2
26630: ARRAY
26631: GREATEREQUAL
26632: AND
26633: PUSH
26634: LD_VAR 0 3
26638: PPUSH
26639: LD_INT 3
26641: PPUSH
26642: CALL_OW 275
26646: PUSH
26647: LD_VAR 0 4
26651: PUSH
26652: LD_INT 3
26654: ARRAY
26655: GREATEREQUAL
26656: AND
26657: ST_TO_ADDR
// end ;
26658: LD_VAR 0 2
26662: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26663: LD_INT 0
26665: PPUSH
26666: PPUSH
26667: PPUSH
// pom := GetBase ( building ) ;
26668: LD_ADDR_VAR 0 4
26672: PUSH
26673: LD_VAR 0 1
26677: PPUSH
26678: CALL_OW 274
26682: ST_TO_ADDR
// if not pom then
26683: LD_VAR 0 4
26687: NOT
26688: IFFALSE 26692
// exit ;
26690: GO 26793
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26692: LD_ADDR_VAR 0 5
26696: PUSH
26697: LD_VAR 0 2
26701: PPUSH
26702: LD_VAR 0 1
26706: PPUSH
26707: CALL_OW 248
26711: PPUSH
26712: CALL_OW 450
26716: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26717: LD_ADDR_VAR 0 3
26721: PUSH
26722: LD_VAR 0 4
26726: PPUSH
26727: LD_INT 1
26729: PPUSH
26730: CALL_OW 275
26734: PUSH
26735: LD_VAR 0 5
26739: PUSH
26740: LD_INT 1
26742: ARRAY
26743: GREATEREQUAL
26744: PUSH
26745: LD_VAR 0 4
26749: PPUSH
26750: LD_INT 2
26752: PPUSH
26753: CALL_OW 275
26757: PUSH
26758: LD_VAR 0 5
26762: PUSH
26763: LD_INT 2
26765: ARRAY
26766: GREATEREQUAL
26767: AND
26768: PUSH
26769: LD_VAR 0 4
26773: PPUSH
26774: LD_INT 3
26776: PPUSH
26777: CALL_OW 275
26781: PUSH
26782: LD_VAR 0 5
26786: PUSH
26787: LD_INT 3
26789: ARRAY
26790: GREATEREQUAL
26791: AND
26792: ST_TO_ADDR
// end ;
26793: LD_VAR 0 3
26797: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
26798: LD_INT 0
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
26804: PPUSH
26805: PPUSH
26806: PPUSH
26807: PPUSH
26808: PPUSH
26809: PPUSH
// result := false ;
26810: LD_ADDR_VAR 0 6
26814: PUSH
26815: LD_INT 0
26817: ST_TO_ADDR
// if not base or not btype or not x or not y then
26818: LD_VAR 0 1
26822: NOT
26823: PUSH
26824: LD_VAR 0 2
26828: NOT
26829: OR
26830: PUSH
26831: LD_VAR 0 3
26835: NOT
26836: OR
26837: PUSH
26838: LD_VAR 0 4
26842: NOT
26843: OR
26844: IFFALSE 26848
// exit ;
26846: GO 27457
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
26848: LD_ADDR_VAR 0 12
26852: PUSH
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_VAR 0 3
26862: PPUSH
26863: LD_VAR 0 4
26867: PPUSH
26868: LD_VAR 0 5
26872: PPUSH
26873: LD_VAR 0 1
26877: PUSH
26878: LD_INT 1
26880: ARRAY
26881: PPUSH
26882: CALL_OW 248
26886: PPUSH
26887: LD_INT 0
26889: PPUSH
26890: CALL 28294 0 6
26894: ST_TO_ADDR
// if not hexes then
26895: LD_VAR 0 12
26899: NOT
26900: IFFALSE 26904
// exit ;
26902: GO 27457
// for i = 1 to hexes do
26904: LD_ADDR_VAR 0 7
26908: PUSH
26909: DOUBLE
26910: LD_INT 1
26912: DEC
26913: ST_TO_ADDR
26914: LD_VAR 0 12
26918: PUSH
26919: FOR_TO
26920: IFFALSE 27455
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26922: LD_ADDR_VAR 0 11
26926: PUSH
26927: LD_VAR 0 12
26931: PUSH
26932: LD_VAR 0 7
26936: ARRAY
26937: PUSH
26938: LD_INT 1
26940: ARRAY
26941: PPUSH
26942: LD_VAR 0 12
26946: PUSH
26947: LD_VAR 0 7
26951: ARRAY
26952: PUSH
26953: LD_INT 2
26955: ARRAY
26956: PPUSH
26957: CALL_OW 428
26961: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
26962: LD_VAR 0 12
26966: PUSH
26967: LD_VAR 0 7
26971: ARRAY
26972: PUSH
26973: LD_INT 1
26975: ARRAY
26976: PPUSH
26977: LD_VAR 0 12
26981: PUSH
26982: LD_VAR 0 7
26986: ARRAY
26987: PUSH
26988: LD_INT 2
26990: ARRAY
26991: PPUSH
26992: CALL_OW 351
26996: PUSH
26997: LD_VAR 0 12
27001: PUSH
27002: LD_VAR 0 7
27006: ARRAY
27007: PUSH
27008: LD_INT 1
27010: ARRAY
27011: PPUSH
27012: LD_VAR 0 12
27016: PUSH
27017: LD_VAR 0 7
27021: ARRAY
27022: PUSH
27023: LD_INT 2
27025: ARRAY
27026: PPUSH
27027: CALL_OW 488
27031: NOT
27032: OR
27033: PUSH
27034: LD_VAR 0 11
27038: PPUSH
27039: CALL_OW 247
27043: PUSH
27044: LD_INT 3
27046: EQUAL
27047: OR
27048: IFFALSE 27054
// exit ;
27050: POP
27051: POP
27052: GO 27457
// if not tmp or not tmp in base then
27054: LD_VAR 0 11
27058: NOT
27059: PUSH
27060: LD_VAR 0 11
27064: PUSH
27065: LD_VAR 0 1
27069: IN
27070: NOT
27071: OR
27072: IFFALSE 27076
// continue ;
27074: GO 26919
// result := true ;
27076: LD_ADDR_VAR 0 6
27080: PUSH
27081: LD_INT 1
27083: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27084: LD_ADDR_VAR 0 15
27088: PUSH
27089: LD_VAR 0 1
27093: PPUSH
27094: LD_INT 22
27096: PUSH
27097: LD_VAR 0 11
27101: PPUSH
27102: CALL_OW 255
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: LD_INT 30
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 30
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PPUSH
27143: CALL_OW 72
27147: ST_TO_ADDR
// if dep then
27148: LD_VAR 0 15
27152: IFFALSE 27288
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27154: LD_ADDR_VAR 0 14
27158: PUSH
27159: LD_VAR 0 15
27163: PUSH
27164: LD_INT 1
27166: ARRAY
27167: PPUSH
27168: CALL_OW 250
27172: PPUSH
27173: LD_VAR 0 15
27177: PUSH
27178: LD_INT 1
27180: ARRAY
27181: PPUSH
27182: CALL_OW 254
27186: PPUSH
27187: LD_INT 5
27189: PPUSH
27190: CALL_OW 272
27194: PUSH
27195: LD_VAR 0 15
27199: PUSH
27200: LD_INT 1
27202: ARRAY
27203: PPUSH
27204: CALL_OW 251
27208: PPUSH
27209: LD_VAR 0 15
27213: PUSH
27214: LD_INT 1
27216: ARRAY
27217: PPUSH
27218: CALL_OW 254
27222: PPUSH
27223: LD_INT 5
27225: PPUSH
27226: CALL_OW 273
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27235: LD_VAR 0 14
27239: PUSH
27240: LD_INT 1
27242: ARRAY
27243: PPUSH
27244: LD_VAR 0 14
27248: PUSH
27249: LD_INT 2
27251: ARRAY
27252: PPUSH
27253: CALL_OW 488
27257: IFFALSE 27288
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27259: LD_VAR 0 11
27263: PPUSH
27264: LD_VAR 0 14
27268: PUSH
27269: LD_INT 1
27271: ARRAY
27272: PPUSH
27273: LD_VAR 0 14
27277: PUSH
27278: LD_INT 2
27280: ARRAY
27281: PPUSH
27282: CALL_OW 111
// continue ;
27286: GO 26919
// end ; end ; r := GetDir ( tmp ) ;
27288: LD_ADDR_VAR 0 13
27292: PUSH
27293: LD_VAR 0 11
27297: PPUSH
27298: CALL_OW 254
27302: ST_TO_ADDR
// if r = 5 then
27303: LD_VAR 0 13
27307: PUSH
27308: LD_INT 5
27310: EQUAL
27311: IFFALSE 27321
// r := 0 ;
27313: LD_ADDR_VAR 0 13
27317: PUSH
27318: LD_INT 0
27320: ST_TO_ADDR
// for j = r to 5 do
27321: LD_ADDR_VAR 0 8
27325: PUSH
27326: DOUBLE
27327: LD_VAR 0 13
27331: DEC
27332: ST_TO_ADDR
27333: LD_INT 5
27335: PUSH
27336: FOR_TO
27337: IFFALSE 27451
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27339: LD_ADDR_VAR 0 9
27343: PUSH
27344: LD_VAR 0 11
27348: PPUSH
27349: CALL_OW 250
27353: PPUSH
27354: LD_VAR 0 8
27358: PPUSH
27359: LD_INT 2
27361: PPUSH
27362: CALL_OW 272
27366: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27367: LD_ADDR_VAR 0 10
27371: PUSH
27372: LD_VAR 0 11
27376: PPUSH
27377: CALL_OW 251
27381: PPUSH
27382: LD_VAR 0 8
27386: PPUSH
27387: LD_INT 2
27389: PPUSH
27390: CALL_OW 273
27394: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27395: LD_VAR 0 9
27399: PPUSH
27400: LD_VAR 0 10
27404: PPUSH
27405: CALL_OW 488
27409: PUSH
27410: LD_VAR 0 9
27414: PPUSH
27415: LD_VAR 0 10
27419: PPUSH
27420: CALL_OW 428
27424: NOT
27425: AND
27426: IFFALSE 27449
// begin ComMoveXY ( tmp , _x , _y ) ;
27428: LD_VAR 0 11
27432: PPUSH
27433: LD_VAR 0 9
27437: PPUSH
27438: LD_VAR 0 10
27442: PPUSH
27443: CALL_OW 111
// break ;
27447: GO 27451
// end ; end ;
27449: GO 27336
27451: POP
27452: POP
// end ;
27453: GO 26919
27455: POP
27456: POP
// end ;
27457: LD_VAR 0 6
27461: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
27462: LD_INT 0
27464: PPUSH
27465: PPUSH
27466: PPUSH
27467: PPUSH
27468: PPUSH
27469: PPUSH
27470: PPUSH
27471: PPUSH
27472: PPUSH
27473: PPUSH
// result := false ;
27474: LD_ADDR_VAR 0 6
27478: PUSH
27479: LD_INT 0
27481: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
27482: LD_VAR 0 1
27486: NOT
27487: PUSH
27488: LD_VAR 0 1
27492: PPUSH
27493: CALL_OW 266
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: IN
27508: NOT
27509: OR
27510: PUSH
27511: LD_VAR 0 2
27515: NOT
27516: OR
27517: PUSH
27518: LD_VAR 0 5
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: LD_INT 2
27531: PUSH
27532: LD_INT 3
27534: PUSH
27535: LD_INT 4
27537: PUSH
27538: LD_INT 5
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: IN
27549: NOT
27550: OR
27551: PUSH
27552: LD_VAR 0 3
27556: PPUSH
27557: LD_VAR 0 4
27561: PPUSH
27562: CALL_OW 488
27566: NOT
27567: OR
27568: IFFALSE 27572
// exit ;
27570: GO 28289
// pom := GetBase ( depot ) ;
27572: LD_ADDR_VAR 0 10
27576: PUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 274
27586: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27587: LD_ADDR_VAR 0 11
27591: PUSH
27592: LD_VAR 0 2
27596: PPUSH
27597: LD_VAR 0 1
27601: PPUSH
27602: CALL_OW 248
27606: PPUSH
27607: CALL_OW 450
27611: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27612: LD_VAR 0 10
27616: PPUSH
27617: LD_INT 1
27619: PPUSH
27620: CALL_OW 275
27624: PUSH
27625: LD_VAR 0 11
27629: PUSH
27630: LD_INT 1
27632: ARRAY
27633: GREATEREQUAL
27634: PUSH
27635: LD_VAR 0 10
27639: PPUSH
27640: LD_INT 2
27642: PPUSH
27643: CALL_OW 275
27647: PUSH
27648: LD_VAR 0 11
27652: PUSH
27653: LD_INT 2
27655: ARRAY
27656: GREATEREQUAL
27657: AND
27658: PUSH
27659: LD_VAR 0 10
27663: PPUSH
27664: LD_INT 3
27666: PPUSH
27667: CALL_OW 275
27671: PUSH
27672: LD_VAR 0 11
27676: PUSH
27677: LD_INT 3
27679: ARRAY
27680: GREATEREQUAL
27681: AND
27682: NOT
27683: IFFALSE 27687
// exit ;
27685: GO 28289
// if GetBType ( depot ) = b_depot then
27687: LD_VAR 0 1
27691: PPUSH
27692: CALL_OW 266
27696: PUSH
27697: LD_INT 0
27699: EQUAL
27700: IFFALSE 27712
// dist := 28 else
27702: LD_ADDR_VAR 0 14
27706: PUSH
27707: LD_INT 28
27709: ST_TO_ADDR
27710: GO 27720
// dist := 36 ;
27712: LD_ADDR_VAR 0 14
27716: PUSH
27717: LD_INT 36
27719: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27720: LD_VAR 0 1
27724: PPUSH
27725: LD_VAR 0 3
27729: PPUSH
27730: LD_VAR 0 4
27734: PPUSH
27735: CALL_OW 297
27739: PUSH
27740: LD_VAR 0 14
27744: GREATER
27745: IFFALSE 27749
// exit ;
27747: GO 28289
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27749: LD_ADDR_VAR 0 12
27753: PUSH
27754: LD_VAR 0 2
27758: PPUSH
27759: LD_VAR 0 3
27763: PPUSH
27764: LD_VAR 0 4
27768: PPUSH
27769: LD_VAR 0 5
27773: PPUSH
27774: LD_VAR 0 1
27778: PPUSH
27779: CALL_OW 248
27783: PPUSH
27784: LD_INT 0
27786: PPUSH
27787: CALL 28294 0 6
27791: ST_TO_ADDR
// if not hexes then
27792: LD_VAR 0 12
27796: NOT
27797: IFFALSE 27801
// exit ;
27799: GO 28289
// hex := GetHexInfo ( x , y ) ;
27801: LD_ADDR_VAR 0 15
27805: PUSH
27806: LD_VAR 0 3
27810: PPUSH
27811: LD_VAR 0 4
27815: PPUSH
27816: CALL_OW 546
27820: ST_TO_ADDR
// if hex [ 1 ] then
27821: LD_VAR 0 15
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: IFFALSE 27833
// exit ;
27831: GO 28289
// height := hex [ 2 ] ;
27833: LD_ADDR_VAR 0 13
27837: PUSH
27838: LD_VAR 0 15
27842: PUSH
27843: LD_INT 2
27845: ARRAY
27846: ST_TO_ADDR
// for i = 1 to hexes do
27847: LD_ADDR_VAR 0 7
27851: PUSH
27852: DOUBLE
27853: LD_INT 1
27855: DEC
27856: ST_TO_ADDR
27857: LD_VAR 0 12
27861: PUSH
27862: FOR_TO
27863: IFFALSE 28193
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27865: LD_VAR 0 12
27869: PUSH
27870: LD_VAR 0 7
27874: ARRAY
27875: PUSH
27876: LD_INT 1
27878: ARRAY
27879: PPUSH
27880: LD_VAR 0 12
27884: PUSH
27885: LD_VAR 0 7
27889: ARRAY
27890: PUSH
27891: LD_INT 2
27893: ARRAY
27894: PPUSH
27895: CALL_OW 488
27899: NOT
27900: PUSH
27901: LD_VAR 0 12
27905: PUSH
27906: LD_VAR 0 7
27910: ARRAY
27911: PUSH
27912: LD_INT 1
27914: ARRAY
27915: PPUSH
27916: LD_VAR 0 12
27920: PUSH
27921: LD_VAR 0 7
27925: ARRAY
27926: PUSH
27927: LD_INT 2
27929: ARRAY
27930: PPUSH
27931: CALL_OW 428
27935: PUSH
27936: LD_INT 0
27938: GREATER
27939: OR
27940: PUSH
27941: LD_VAR 0 12
27945: PUSH
27946: LD_VAR 0 7
27950: ARRAY
27951: PUSH
27952: LD_INT 1
27954: ARRAY
27955: PPUSH
27956: LD_VAR 0 12
27960: PUSH
27961: LD_VAR 0 7
27965: ARRAY
27966: PUSH
27967: LD_INT 2
27969: ARRAY
27970: PPUSH
27971: CALL_OW 351
27975: OR
27976: IFFALSE 27982
// exit ;
27978: POP
27979: POP
27980: GO 28289
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27982: LD_ADDR_VAR 0 8
27986: PUSH
27987: LD_VAR 0 12
27991: PUSH
27992: LD_VAR 0 7
27996: ARRAY
27997: PUSH
27998: LD_INT 1
28000: ARRAY
28001: PPUSH
28002: LD_VAR 0 12
28006: PUSH
28007: LD_VAR 0 7
28011: ARRAY
28012: PUSH
28013: LD_INT 2
28015: ARRAY
28016: PPUSH
28017: CALL_OW 546
28021: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28022: LD_VAR 0 8
28026: PUSH
28027: LD_INT 1
28029: ARRAY
28030: PUSH
28031: LD_VAR 0 8
28035: PUSH
28036: LD_INT 2
28038: ARRAY
28039: PUSH
28040: LD_VAR 0 13
28044: PUSH
28045: LD_INT 2
28047: PLUS
28048: GREATER
28049: OR
28050: PUSH
28051: LD_VAR 0 8
28055: PUSH
28056: LD_INT 2
28058: ARRAY
28059: PUSH
28060: LD_VAR 0 13
28064: PUSH
28065: LD_INT 2
28067: MINUS
28068: LESS
28069: OR
28070: PUSH
28071: LD_VAR 0 8
28075: PUSH
28076: LD_INT 3
28078: ARRAY
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 8
28085: PUSH
28086: LD_INT 9
28088: PUSH
28089: LD_INT 10
28091: PUSH
28092: LD_INT 11
28094: PUSH
28095: LD_INT 12
28097: PUSH
28098: LD_INT 13
28100: PUSH
28101: LD_INT 16
28103: PUSH
28104: LD_INT 17
28106: PUSH
28107: LD_INT 18
28109: PUSH
28110: LD_INT 19
28112: PUSH
28113: LD_INT 20
28115: PUSH
28116: LD_INT 21
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: IN
28134: NOT
28135: OR
28136: PUSH
28137: LD_VAR 0 8
28141: PUSH
28142: LD_INT 5
28144: ARRAY
28145: NOT
28146: OR
28147: PUSH
28148: LD_VAR 0 8
28152: PUSH
28153: LD_INT 6
28155: ARRAY
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: LD_INT 7
28165: PUSH
28166: LD_INT 9
28168: PUSH
28169: LD_INT 10
28171: PUSH
28172: LD_INT 11
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: IN
28183: NOT
28184: OR
28185: IFFALSE 28191
// exit ;
28187: POP
28188: POP
28189: GO 28289
// end ;
28191: GO 27862
28193: POP
28194: POP
// side := GetSide ( depot ) ;
28195: LD_ADDR_VAR 0 9
28199: PUSH
28200: LD_VAR 0 1
28204: PPUSH
28205: CALL_OW 255
28209: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28210: LD_VAR 0 9
28214: PPUSH
28215: LD_VAR 0 3
28219: PPUSH
28220: LD_VAR 0 4
28224: PPUSH
28225: LD_INT 20
28227: PPUSH
28228: CALL 20943 0 4
28232: PUSH
28233: LD_INT 4
28235: ARRAY
28236: IFFALSE 28240
// exit ;
28238: GO 28289
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28240: LD_VAR 0 2
28244: PUSH
28245: LD_INT 29
28247: PUSH
28248: LD_INT 30
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: IN
28255: PUSH
28256: LD_VAR 0 3
28260: PPUSH
28261: LD_VAR 0 4
28265: PPUSH
28266: LD_VAR 0 9
28270: PPUSH
28271: CALL_OW 440
28275: NOT
28276: AND
28277: IFFALSE 28281
// exit ;
28279: GO 28289
// result := true ;
28281: LD_ADDR_VAR 0 6
28285: PUSH
28286: LD_INT 1
28288: ST_TO_ADDR
// end ;
28289: LD_VAR 0 6
28293: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
28294: LD_INT 0
28296: PPUSH
28297: PPUSH
28298: PPUSH
28299: PPUSH
28300: PPUSH
28301: PPUSH
28302: PPUSH
28303: PPUSH
28304: PPUSH
28305: PPUSH
28306: PPUSH
28307: PPUSH
28308: PPUSH
28309: PPUSH
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
28314: PPUSH
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
28319: PPUSH
28320: PPUSH
28321: PPUSH
28322: PPUSH
28323: PPUSH
28324: PPUSH
28325: PPUSH
28326: PPUSH
28327: PPUSH
28328: PPUSH
28329: PPUSH
28330: PPUSH
28331: PPUSH
28332: PPUSH
28333: PPUSH
28334: PPUSH
28335: PPUSH
28336: PPUSH
28337: PPUSH
28338: PPUSH
28339: PPUSH
28340: PPUSH
28341: PPUSH
28342: PPUSH
28343: PPUSH
28344: PPUSH
28345: PPUSH
28346: PPUSH
28347: PPUSH
28348: PPUSH
28349: PPUSH
28350: PPUSH
28351: PPUSH
28352: PPUSH
28353: PPUSH
// result = [ ] ;
28354: LD_ADDR_VAR 0 7
28358: PUSH
28359: EMPTY
28360: ST_TO_ADDR
// temp_list = [ ] ;
28361: LD_ADDR_VAR 0 9
28365: PUSH
28366: EMPTY
28367: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
28368: LD_VAR 0 4
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 3
28384: PUSH
28385: LD_INT 4
28387: PUSH
28388: LD_INT 5
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: IN
28399: NOT
28400: PUSH
28401: LD_VAR 0 1
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: IN
28416: PUSH
28417: LD_VAR 0 5
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: LD_INT 3
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: IN
28436: NOT
28437: AND
28438: OR
28439: IFFALSE 28443
// exit ;
28441: GO 46834
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
28443: LD_VAR 0 1
28447: PUSH
28448: LD_INT 6
28450: PUSH
28451: LD_INT 7
28453: PUSH
28454: LD_INT 8
28456: PUSH
28457: LD_INT 13
28459: PUSH
28460: LD_INT 12
28462: PUSH
28463: LD_INT 15
28465: PUSH
28466: LD_INT 11
28468: PUSH
28469: LD_INT 14
28471: PUSH
28472: LD_INT 10
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: IN
28486: IFFALSE 28496
// btype = b_lab ;
28488: LD_ADDR_VAR 0 1
28492: PUSH
28493: LD_INT 6
28495: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
28496: LD_VAR 0 6
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 2
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: IN
28515: NOT
28516: PUSH
28517: LD_VAR 0 1
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: LD_INT 3
28533: PUSH
28534: LD_INT 6
28536: PUSH
28537: LD_INT 36
28539: PUSH
28540: LD_INT 4
28542: PUSH
28543: LD_INT 5
28545: PUSH
28546: LD_INT 31
28548: PUSH
28549: LD_INT 32
28551: PUSH
28552: LD_INT 33
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: IN
28568: NOT
28569: PUSH
28570: LD_VAR 0 6
28574: PUSH
28575: LD_INT 1
28577: EQUAL
28578: AND
28579: OR
28580: PUSH
28581: LD_VAR 0 1
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 3
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: IN
28596: NOT
28597: PUSH
28598: LD_VAR 0 6
28602: PUSH
28603: LD_INT 2
28605: EQUAL
28606: AND
28607: OR
28608: IFFALSE 28618
// mode = 0 ;
28610: LD_ADDR_VAR 0 6
28614: PUSH
28615: LD_INT 0
28617: ST_TO_ADDR
// case mode of 0 :
28618: LD_VAR 0 6
28622: PUSH
28623: LD_INT 0
28625: DOUBLE
28626: EQUAL
28627: IFTRUE 28631
28629: GO 40084
28631: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28632: LD_ADDR_VAR 0 11
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 2
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: LD_INT 3
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: LD_INT 3
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28825: LD_ADDR_VAR 0 12
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 2
28948: NEG
28949: PUSH
28950: LD_INT 0
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: NEG
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: NEG
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 3
28982: NEG
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 3
28993: NEG
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29021: LD_ADDR_VAR 0 13
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: NEG
29103: PUSH
29104: LD_INT 2
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 2
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 2
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: LD_INT 2
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 2
29156: NEG
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: LD_INT 3
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 3
29180: NEG
29181: PUSH
29182: LD_INT 2
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 3
29192: NEG
29193: PUSH
29194: LD_INT 3
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29220: LD_ADDR_VAR 0 14
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: LD_INT 2
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 2
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 2
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: LD_INT 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: NEG
29367: PUSH
29368: LD_INT 3
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: LD_INT 3
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29416: LD_ADDR_VAR 0 15
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: LD_INT 1
29436: NEG
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 2
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: NEG
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 2
29550: NEG
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 2
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 3
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29609: LD_ADDR_VAR 0 16
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: LD_INT 0
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 0
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: LD_INT 2
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: LD_INT 1
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 2
29744: NEG
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: LD_INT 2
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: LD_INT 3
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 2
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29802: LD_ADDR_VAR 0 17
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 0
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: LD_INT 2
29887: NEG
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 2
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 2
29937: PUSH
29938: LD_INT 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 2
29978: NEG
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 2
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: NEG
30002: PUSH
30003: LD_INT 2
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30032: LD_ADDR_VAR 0 18
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: NEG
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: NEG
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: LD_INT 2
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: LD_INT 2
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 2
30208: NEG
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 2
30219: NEG
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: NEG
30232: PUSH
30233: LD_INT 2
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30262: LD_ADDR_VAR 0 19
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: LD_INT 2
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: LD_INT 2
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: LD_INT 1
30369: NEG
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 2
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 2
30449: NEG
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 2
30461: NEG
30462: PUSH
30463: LD_INT 2
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30492: LD_ADDR_VAR 0 20
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: LD_INT 1
30512: NEG
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: NEG
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: LD_INT 1
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: LD_INT 2
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: LD_INT 2
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: NEG
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: LD_INT 1
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30722: LD_ADDR_VAR 0 21
30726: PUSH
30727: LD_INT 0
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: NEG
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: LD_INT 2
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 2
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: PUSH
30868: LD_INT 2
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 2
30898: NEG
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: LD_INT 1
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: LD_INT 2
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30952: LD_ADDR_VAR 0 22
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: LD_INT 2
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 2
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 2
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: LD_INT 1
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31182: LD_ADDR_VAR 0 23
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 1
31202: NEG
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 1
31251: NEG
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: LD_INT 2
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 2
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: NEG
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 2
31369: NEG
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: LD_INT 2
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: LD_INT 3
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 2
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
31462: LD_ADDR_VAR 0 24
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 1
31482: NEG
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: LD_INT 2
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: NEG
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 2
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 3
31695: PUSH
31696: LD_INT 1
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 3
31705: PUSH
31706: LD_INT 2
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31738: LD_ADDR_VAR 0 25
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: LD_INT 2
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 3
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: LD_INT 3
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32012: LD_ADDR_VAR 0 26
32016: PUSH
32017: LD_INT 0
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 2
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: LD_INT 2
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: NEG
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: NEG
32212: PUSH
32213: LD_INT 2
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 1
32243: NEG
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: NEG
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32288: LD_ADDR_VAR 0 27
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: NEG
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: LD_INT 2
32384: NEG
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 2
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: LD_INT 2
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 2
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: NEG
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 2
32487: NEG
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 3
32533: NEG
32534: PUSH
32535: LD_INT 2
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32568: LD_ADDR_VAR 0 28
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: LD_INT 2
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 2
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 2
32703: PUSH
32704: LD_INT 2
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: LD_INT 2
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: LD_INT 2
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 1
32733: NEG
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 2
32744: NEG
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 2
32755: NEG
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: LD_INT 2
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: NEG
32780: PUSH
32781: LD_INT 3
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: LD_INT 3
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 3
32815: NEG
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32850: LD_ADDR_VAR 0 29
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 2
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: NEG
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 2
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 3
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 3
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: LD_INT 3
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 2
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 3
33094: NEG
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33129: LD_ADDR_VAR 0 30
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 2
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 2
33295: NEG
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: LD_INT 1
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: LD_INT 3
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 2
33351: PUSH
33352: LD_INT 3
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 3
33372: NEG
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33407: LD_ADDR_VAR 0 31
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: LD_INT 1
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: LD_INT 2
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 2
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 2
33584: NEG
33585: PUSH
33586: LD_INT 2
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 2
33596: NEG
33597: PUSH
33598: LD_INT 3
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 3
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 3
33650: NEG
33651: PUSH
33652: LD_INT 2
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33685: LD_ADDR_VAR 0 32
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: LD_INT 2
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 2
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: NEG
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: NEG
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: LD_INT 3
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: LD_INT 2
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 3
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 3
33928: NEG
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33963: LD_ADDR_VAR 0 33
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 2
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: LD_INT 0
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: NEG
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: NEG
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 2
34153: NEG
34154: PUSH
34155: LD_INT 3
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 3
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: LD_INT 2
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 3
34207: NEG
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34242: LD_ADDR_VAR 0 34
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: NEG
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 2
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: LD_INT 2
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: LD_INT 1
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 2
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 3
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34522: LD_ADDR_VAR 0 35
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: NEG
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: NEG
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34634: LD_ADDR_VAR 0 36
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34746: LD_ADDR_VAR 0 37
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34858: LD_ADDR_VAR 0 38
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34970: LD_ADDR_VAR 0 39
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: LD_INT 1
34990: NEG
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: LD_INT 1
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: LD_INT 2
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35082: LD_ADDR_VAR 0 40
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 1
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35194: LD_ADDR_VAR 0 41
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: LD_INT 2
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 2
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 2
35349: NEG
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 2
35360: NEG
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 2
35372: NEG
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 2
35384: NEG
35385: PUSH
35386: LD_INT 3
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: LD_INT 1
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 3
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 3
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 3
35437: PUSH
35438: LD_INT 3
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: LD_INT 3
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 3
35468: NEG
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 3
35479: NEG
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 3
35491: NEG
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 3
35503: NEG
35504: PUSH
35505: LD_INT 3
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35544: LD_ADDR_VAR 0 42
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 2
35710: NEG
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: NEG
35723: PUSH
35724: LD_INT 2
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 2
35734: NEG
35735: PUSH
35736: LD_INT 3
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 3
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 3
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 3
35780: PUSH
35781: LD_INT 2
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: LD_INT 3
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: LD_INT 3
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 3
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: NEG
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 3
35841: NEG
35842: PUSH
35843: LD_INT 2
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 3
35853: NEG
35854: PUSH
35855: LD_INT 3
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35894: LD_ADDR_VAR 0 43
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: NEG
35976: PUSH
35977: LD_INT 2
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: LD_INT 2
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 2
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 2
36060: NEG
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: NEG
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: LD_INT 3
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: LD_INT 3
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 3
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 3
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: LD_INT 3
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 3
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: LD_INT 2
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 3
36190: NEG
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 3
36201: NEG
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36242: LD_ADDR_VAR 0 44
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 2
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: NEG
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: LD_INT 1
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 2
36420: NEG
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: LD_INT 3
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 3
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 3
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 3
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: LD_INT 3
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 3
36516: NEG
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 3
36527: NEG
36528: PUSH
36529: LD_INT 1
36531: NEG
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 3
36539: NEG
36540: PUSH
36541: LD_INT 2
36543: NEG
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 3
36551: NEG
36552: PUSH
36553: LD_INT 3
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36592: LD_ADDR_VAR 0 45
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 2
36758: NEG
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 2
36770: NEG
36771: PUSH
36772: LD_INT 2
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: NEG
36783: PUSH
36784: LD_INT 3
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: LD_INT 3
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 3
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: LD_INT 2
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 3
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: LD_INT 3
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: LD_INT 3
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: LD_INT 3
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: LD_INT 3
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: LD_INT 2
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 3
36889: NEG
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 3
36901: NEG
36902: PUSH
36903: LD_INT 3
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36942: LD_ADDR_VAR 0 46
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: LD_INT 2
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 2
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 2
37108: NEG
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: LD_INT 3
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: LD_INT 3
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 3
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 3
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: LD_INT 3
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 3
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 2
37227: NEG
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 3
37238: NEG
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 3
37249: NEG
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37290: LD_ADDR_VAR 0 47
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 2
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: NEG
37418: PUSH
37419: LD_INT 2
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37441: LD_ADDR_VAR 0 48
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 2
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37588: LD_ADDR_VAR 0 49
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37732: LD_ADDR_VAR 0 50
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 2
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 2
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: LD_INT 2
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37876: LD_ADDR_VAR 0 51
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: LD_INT 1
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: NEG
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38023: LD_ADDR_VAR 0 52
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: NEG
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: NEG
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: LD_INT 2
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38174: LD_ADDR_VAR 0 53
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 1
38243: NEG
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: LD_INT 2
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 1
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 2
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38404: LD_ADDR_VAR 0 54
38408: PUSH
38409: LD_INT 0
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: LD_INT 2
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: LD_INT 1
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: LD_INT 2
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38634: LD_ADDR_VAR 0 55
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 2
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: NEG
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 2
38833: NEG
38834: PUSH
38835: LD_INT 2
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38864: LD_ADDR_VAR 0 56
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 2
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 2
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 2
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 2
39051: NEG
39052: PUSH
39053: LD_INT 1
39055: NEG
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39094: LD_ADDR_VAR 0 57
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: NEG
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: NEG
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39324: LD_ADDR_VAR 0 58
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39554: LD_ADDR_VAR 0 59
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39642: LD_ADDR_VAR 0 60
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39730: LD_ADDR_VAR 0 61
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39818: LD_ADDR_VAR 0 62
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39906: LD_ADDR_VAR 0 63
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39994: LD_ADDR_VAR 0 64
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 0
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: ST_TO_ADDR
// end ; 1 :
40082: GO 45979
40084: LD_INT 1
40086: DOUBLE
40087: EQUAL
40088: IFTRUE 40092
40090: GO 42715
40092: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40093: LD_ADDR_VAR 0 11
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 3
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40137: LD_ADDR_VAR 0 12
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 3
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40178: LD_ADDR_VAR 0 13
40182: PUSH
40183: LD_INT 3
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 3
40195: PUSH
40196: LD_INT 3
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: LD_INT 3
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40218: LD_ADDR_VAR 0 14
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 3
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40259: LD_ADDR_VAR 0 15
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 3
40277: NEG
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 3
40288: NEG
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40303: LD_ADDR_VAR 0 16
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: LD_INT 3
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 3
40322: NEG
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 3
40334: NEG
40335: PUSH
40336: LD_INT 3
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: LIST
40348: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40349: LD_ADDR_VAR 0 17
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 3
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: LD_INT 3
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: LIST
40392: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40393: LD_ADDR_VAR 0 18
40397: PUSH
40398: LD_INT 2
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 3
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 3
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40434: LD_ADDR_VAR 0 19
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: LD_INT 3
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: LIST
40473: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40474: LD_ADDR_VAR 0 20
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 3
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 3
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 2
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: LIST
40514: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40515: LD_ADDR_VAR 0 21
40519: PUSH
40520: LD_INT 2
40522: NEG
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: NEG
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 3
40544: NEG
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40559: LD_ADDR_VAR 0 22
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 3
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 3
40578: NEG
40579: PUSH
40580: LD_INT 2
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: NEG
40591: PUSH
40592: LD_INT 3
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: LIST
40604: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40605: LD_ADDR_VAR 0 23
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 3
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: LD_INT 4
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 3
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40649: LD_ADDR_VAR 0 24
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 4
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: LIST
40689: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40690: LD_ADDR_VAR 0 25
40694: PUSH
40695: LD_INT 3
40697: PUSH
40698: LD_INT 3
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 4
40707: PUSH
40708: LD_INT 3
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 3
40717: PUSH
40718: LD_INT 4
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40730: LD_ADDR_VAR 0 26
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 3
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: LD_INT 4
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: LD_INT 3
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40771: LD_ADDR_VAR 0 27
40775: PUSH
40776: LD_INT 3
40778: NEG
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 3
40789: NEG
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 4
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40815: LD_ADDR_VAR 0 28
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: NEG
40835: PUSH
40836: LD_INT 4
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 4
40846: NEG
40847: PUSH
40848: LD_INT 3
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40861: LD_ADDR_VAR 0 29
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: LD_INT 3
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 3
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 4
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 4
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: LD_INT 3
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 5
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 5
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 4
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 6
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 6
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 5
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41016: LD_ADDR_VAR 0 30
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 3
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 3
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 3
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 4
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 4
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 4
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 5
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 5
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 5
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 6
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 6
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41159: LD_ADDR_VAR 0 31
41163: PUSH
41164: LD_INT 3
41166: PUSH
41167: LD_INT 2
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 3
41176: PUSH
41177: LD_INT 3
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: LD_INT 3
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 4
41196: PUSH
41197: LD_INT 3
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 4
41206: PUSH
41207: LD_INT 4
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 3
41216: PUSH
41217: LD_INT 4
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 5
41226: PUSH
41227: LD_INT 4
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 5
41236: PUSH
41237: LD_INT 5
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 4
41246: PUSH
41247: LD_INT 5
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 6
41256: PUSH
41257: LD_INT 5
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 6
41266: PUSH
41267: LD_INT 6
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 5
41276: PUSH
41277: LD_INT 6
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
41298: LD_ADDR_VAR 0 32
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: LD_INT 3
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 3
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 4
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: LD_INT 4
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 3
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: LD_INT 5
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 5
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: LD_INT 4
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 6
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 6
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 5
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
41441: LD_ADDR_VAR 0 33
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 3
41459: NEG
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 3
41470: NEG
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 3
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 4
41493: NEG
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 4
41504: NEG
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 4
41516: NEG
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 5
41527: NEG
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 5
41538: NEG
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 5
41550: NEG
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 6
41561: NEG
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 6
41572: NEG
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41596: LD_ADDR_VAR 0 34
41600: PUSH
41601: LD_INT 2
41603: NEG
41604: PUSH
41605: LD_INT 3
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 3
41615: NEG
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: NEG
41628: PUSH
41629: LD_INT 3
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: NEG
41640: PUSH
41641: LD_INT 4
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 4
41651: NEG
41652: PUSH
41653: LD_INT 3
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 4
41663: NEG
41664: PUSH
41665: LD_INT 4
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 4
41675: NEG
41676: PUSH
41677: LD_INT 5
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 5
41687: NEG
41688: PUSH
41689: LD_INT 4
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 5
41699: NEG
41700: PUSH
41701: LD_INT 5
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 5
41711: NEG
41712: PUSH
41713: LD_INT 6
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 6
41723: NEG
41724: PUSH
41725: LD_INT 5
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 6
41735: NEG
41736: PUSH
41737: LD_INT 6
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41759: LD_ADDR_VAR 0 41
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 3
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: LIST
41802: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41803: LD_ADDR_VAR 0 42
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41844: LD_ADDR_VAR 0 43
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 3
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: LIST
41883: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41884: LD_ADDR_VAR 0 44
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: LIST
41924: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41925: LD_ADDR_VAR 0 45
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 3
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41969: LD_ADDR_VAR 0 46
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: LD_INT 3
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 3
42000: NEG
42001: PUSH
42002: LD_INT 2
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42015: LD_ADDR_VAR 0 47
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 3
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 3
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42048: LD_ADDR_VAR 0 48
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 2
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42079: LD_ADDR_VAR 0 49
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 3
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
42108: LD_ADDR_VAR 0 50
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: LD_INT 3
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42137: LD_ADDR_VAR 0 51
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42168: LD_ADDR_VAR 0 52
42172: PUSH
42173: LD_INT 3
42175: NEG
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 3
42187: NEG
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42201: LD_ADDR_VAR 0 53
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: LD_INT 3
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 3
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: LIST
42244: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42245: LD_ADDR_VAR 0 54
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 3
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42286: LD_ADDR_VAR 0 55
42290: PUSH
42291: LD_INT 3
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: LD_INT 3
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42326: LD_ADDR_VAR 0 56
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 3
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 3
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42367: LD_ADDR_VAR 0 57
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 3
42385: NEG
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 3
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: LIST
42410: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42411: LD_ADDR_VAR 0 58
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 3
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 3
42430: NEG
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 3
42442: NEG
42443: PUSH
42444: LD_INT 3
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
42457: LD_ADDR_VAR 0 59
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: LIST
42500: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42501: LD_ADDR_VAR 0 60
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: LIST
42541: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42542: LD_ADDR_VAR 0 61
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42582: LD_ADDR_VAR 0 62
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: LIST
42622: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42623: LD_ADDR_VAR 0 63
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42667: LD_ADDR_VAR 0 64
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: ST_TO_ADDR
// end ; 2 :
42713: GO 45979
42715: LD_INT 2
42717: DOUBLE
42718: EQUAL
42719: IFTRUE 42723
42721: GO 45978
42723: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42724: LD_ADDR_VAR 0 29
42728: PUSH
42729: LD_INT 4
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 4
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 5
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 5
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 4
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 5
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 3
42824: PUSH
42825: LD_INT 3
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 3
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 4
42844: PUSH
42845: LD_INT 3
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 4
42854: PUSH
42855: LD_INT 4
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 3
42864: PUSH
42865: LD_INT 4
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 4
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 4
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 4
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 3
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: LD_INT 4
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 5
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 5
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: LD_INT 4
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: LD_INT 5
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 3
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 3
43007: NEG
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 3
43018: NEG
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 3
43052: NEG
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 4
43063: NEG
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 4
43074: NEG
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 4
43086: NEG
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 4
43109: NEG
43110: PUSH
43111: LD_INT 4
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 4
43121: NEG
43122: PUSH
43123: LD_INT 5
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 3
43133: NEG
43134: PUSH
43135: LD_INT 4
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 3
43145: NEG
43146: PUSH
43147: LD_INT 3
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 4
43157: NEG
43158: PUSH
43159: LD_INT 3
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 5
43169: NEG
43170: PUSH
43171: LD_INT 4
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 5
43181: NEG
43182: PUSH
43183: LD_INT 5
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: LD_INT 5
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 5
43205: NEG
43206: PUSH
43207: LD_INT 3
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43262: LD_ADDR_VAR 0 30
43266: PUSH
43267: LD_INT 4
43269: PUSH
43270: LD_INT 4
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 4
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 5
43289: PUSH
43290: LD_INT 4
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 5
43299: PUSH
43300: LD_INT 5
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 4
43309: PUSH
43310: LD_INT 5
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: LD_INT 4
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: LD_INT 3
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 5
43339: PUSH
43340: LD_INT 3
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 3
43349: PUSH
43350: LD_INT 5
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 3
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 3
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 4
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 4
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: LD_INT 4
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 4
43452: NEG
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 4
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 3
43475: NEG
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 3
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 4
43497: NEG
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 5
43508: NEG
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 5
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 5
43531: NEG
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 3
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 3
43554: NEG
43555: PUSH
43556: LD_INT 3
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 3
43566: NEG
43567: PUSH
43568: LD_INT 4
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: LD_INT 3
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 3
43602: NEG
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 4
43614: NEG
43615: PUSH
43616: LD_INT 3
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 4
43626: NEG
43627: PUSH
43628: LD_INT 4
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: LD_INT 4
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 4
43650: NEG
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 4
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 5
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 4
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 3
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 3
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: LD_INT 4
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 5
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: LD_INT 3
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: LD_INT 5
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43809: LD_ADDR_VAR 0 31
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 4
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 4
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 5
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 5
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 4
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 3
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: PUSH
43889: LD_INT 5
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: LD_INT 3
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 3
43909: NEG
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 3
43954: NEG
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 4
43965: NEG
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 4
43976: NEG
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 4
43988: NEG
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 4
44011: NEG
44012: PUSH
44013: LD_INT 4
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 4
44023: NEG
44024: PUSH
44025: LD_INT 5
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 3
44035: NEG
44036: PUSH
44037: LD_INT 4
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 3
44047: NEG
44048: PUSH
44049: LD_INT 3
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 4
44059: NEG
44060: PUSH
44061: LD_INT 3
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 5
44071: NEG
44072: PUSH
44073: LD_INT 4
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 5
44083: NEG
44084: PUSH
44085: LD_INT 5
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: LD_INT 5
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 5
44107: NEG
44108: PUSH
44109: LD_INT 3
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 3
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 4
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 3
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 3
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 4
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: NEG
44210: PUSH
44211: LD_INT 4
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 4
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 4
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 5
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 5
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 4
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 3
44293: PUSH
44294: LD_INT 2
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 5
44304: PUSH
44305: LD_INT 2
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
44359: LD_ADDR_VAR 0 32
44363: PUSH
44364: LD_INT 4
44366: NEG
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 4
44377: NEG
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 3
44389: NEG
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 3
44400: NEG
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 4
44411: NEG
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 5
44422: NEG
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 5
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 5
44445: NEG
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 3
44468: NEG
44469: PUSH
44470: LD_INT 3
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 3
44480: NEG
44481: PUSH
44482: LD_INT 4
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: LD_INT 3
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 3
44516: NEG
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 4
44528: NEG
44529: PUSH
44530: LD_INT 3
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 4
44540: NEG
44541: PUSH
44542: LD_INT 4
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: LD_INT 4
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 4
44564: NEG
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 4
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 5
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: LD_INT 4
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 3
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 3
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 4
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 5
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 3
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: LD_INT 5
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 4
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 4
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 3
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 4
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 4
44771: PUSH
44772: LD_INT 4
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 4
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 5
44791: PUSH
44792: LD_INT 4
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 5
44801: PUSH
44802: LD_INT 5
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 4
44811: PUSH
44812: LD_INT 5
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: LD_INT 4
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: LD_INT 3
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 5
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 3
44851: PUSH
44852: LD_INT 5
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44906: LD_ADDR_VAR 0 33
44910: PUSH
44911: LD_INT 4
44913: NEG
44914: PUSH
44915: LD_INT 4
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 4
44925: NEG
44926: PUSH
44927: LD_INT 5
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 3
44937: NEG
44938: PUSH
44939: LD_INT 4
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: NEG
44950: PUSH
44951: LD_INT 3
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 4
44961: NEG
44962: PUSH
44963: LD_INT 3
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 5
44973: NEG
44974: PUSH
44975: LD_INT 4
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 5
44985: NEG
44986: PUSH
44987: LD_INT 5
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 3
44997: NEG
44998: PUSH
44999: LD_INT 5
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 5
45009: NEG
45010: PUSH
45011: LD_INT 3
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 4
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: LD_INT 4
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 2
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: LD_INT 4
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 4
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 4
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 5
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 5
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 4
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 3
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 3
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 5
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 3
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 3
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 4
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 4
45246: PUSH
45247: LD_INT 4
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 3
45256: PUSH
45257: LD_INT 4
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 4
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 4
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 4
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 4
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 5
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 5
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 4
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 5
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: LD_INT 3
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
45444: LD_ADDR_VAR 0 34
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 4
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: LD_INT 5
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 4
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 3
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 4
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 5
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 3
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: LD_INT 5
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 4
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 4
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 3
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 4
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 4
45646: PUSH
45647: LD_INT 4
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 4
45656: PUSH
45657: LD_INT 3
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 5
45666: PUSH
45667: LD_INT 4
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 5
45676: PUSH
45677: LD_INT 5
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 4
45686: PUSH
45687: LD_INT 5
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: LD_INT 4
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 5
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 3
45726: PUSH
45727: LD_INT 5
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 3
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 3
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: LD_INT 4
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 4
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 4
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 4
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 4
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: NEG
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 3
45863: NEG
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 4
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 5
45885: NEG
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 5
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 5
45908: NEG
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: ST_TO_ADDR
// end ; end ;
45976: GO 45979
45978: POP
// case btype of b_depot , b_warehouse :
45979: LD_VAR 0 1
45983: PUSH
45984: LD_INT 0
45986: DOUBLE
45987: EQUAL
45988: IFTRUE 45998
45990: LD_INT 1
45992: DOUBLE
45993: EQUAL
45994: IFTRUE 45998
45996: GO 46199
45998: POP
// case nation of nation_american :
45999: LD_VAR 0 5
46003: PUSH
46004: LD_INT 1
46006: DOUBLE
46007: EQUAL
46008: IFTRUE 46012
46010: GO 46068
46012: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46013: LD_ADDR_VAR 0 9
46017: PUSH
46018: LD_VAR 0 11
46022: PUSH
46023: LD_VAR 0 12
46027: PUSH
46028: LD_VAR 0 13
46032: PUSH
46033: LD_VAR 0 14
46037: PUSH
46038: LD_VAR 0 15
46042: PUSH
46043: LD_VAR 0 16
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: PUSH
46056: LD_VAR 0 4
46060: PUSH
46061: LD_INT 1
46063: PLUS
46064: ARRAY
46065: ST_TO_ADDR
46066: GO 46197
46068: LD_INT 2
46070: DOUBLE
46071: EQUAL
46072: IFTRUE 46076
46074: GO 46132
46076: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46077: LD_ADDR_VAR 0 9
46081: PUSH
46082: LD_VAR 0 17
46086: PUSH
46087: LD_VAR 0 18
46091: PUSH
46092: LD_VAR 0 19
46096: PUSH
46097: LD_VAR 0 20
46101: PUSH
46102: LD_VAR 0 21
46106: PUSH
46107: LD_VAR 0 22
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: PUSH
46120: LD_VAR 0 4
46124: PUSH
46125: LD_INT 1
46127: PLUS
46128: ARRAY
46129: ST_TO_ADDR
46130: GO 46197
46132: LD_INT 3
46134: DOUBLE
46135: EQUAL
46136: IFTRUE 46140
46138: GO 46196
46140: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
46141: LD_ADDR_VAR 0 9
46145: PUSH
46146: LD_VAR 0 23
46150: PUSH
46151: LD_VAR 0 24
46155: PUSH
46156: LD_VAR 0 25
46160: PUSH
46161: LD_VAR 0 26
46165: PUSH
46166: LD_VAR 0 27
46170: PUSH
46171: LD_VAR 0 28
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: PUSH
46184: LD_VAR 0 4
46188: PUSH
46189: LD_INT 1
46191: PLUS
46192: ARRAY
46193: ST_TO_ADDR
46194: GO 46197
46196: POP
46197: GO 46752
46199: LD_INT 2
46201: DOUBLE
46202: EQUAL
46203: IFTRUE 46213
46205: LD_INT 3
46207: DOUBLE
46208: EQUAL
46209: IFTRUE 46213
46211: GO 46269
46213: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46214: LD_ADDR_VAR 0 9
46218: PUSH
46219: LD_VAR 0 29
46223: PUSH
46224: LD_VAR 0 30
46228: PUSH
46229: LD_VAR 0 31
46233: PUSH
46234: LD_VAR 0 32
46238: PUSH
46239: LD_VAR 0 33
46243: PUSH
46244: LD_VAR 0 34
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: PUSH
46257: LD_VAR 0 4
46261: PUSH
46262: LD_INT 1
46264: PLUS
46265: ARRAY
46266: ST_TO_ADDR
46267: GO 46752
46269: LD_INT 16
46271: DOUBLE
46272: EQUAL
46273: IFTRUE 46331
46275: LD_INT 17
46277: DOUBLE
46278: EQUAL
46279: IFTRUE 46331
46281: LD_INT 18
46283: DOUBLE
46284: EQUAL
46285: IFTRUE 46331
46287: LD_INT 19
46289: DOUBLE
46290: EQUAL
46291: IFTRUE 46331
46293: LD_INT 22
46295: DOUBLE
46296: EQUAL
46297: IFTRUE 46331
46299: LD_INT 20
46301: DOUBLE
46302: EQUAL
46303: IFTRUE 46331
46305: LD_INT 21
46307: DOUBLE
46308: EQUAL
46309: IFTRUE 46331
46311: LD_INT 23
46313: DOUBLE
46314: EQUAL
46315: IFTRUE 46331
46317: LD_INT 24
46319: DOUBLE
46320: EQUAL
46321: IFTRUE 46331
46323: LD_INT 25
46325: DOUBLE
46326: EQUAL
46327: IFTRUE 46331
46329: GO 46387
46331: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
46332: LD_ADDR_VAR 0 9
46336: PUSH
46337: LD_VAR 0 35
46341: PUSH
46342: LD_VAR 0 36
46346: PUSH
46347: LD_VAR 0 37
46351: PUSH
46352: LD_VAR 0 38
46356: PUSH
46357: LD_VAR 0 39
46361: PUSH
46362: LD_VAR 0 40
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: PUSH
46375: LD_VAR 0 4
46379: PUSH
46380: LD_INT 1
46382: PLUS
46383: ARRAY
46384: ST_TO_ADDR
46385: GO 46752
46387: LD_INT 6
46389: DOUBLE
46390: EQUAL
46391: IFTRUE 46443
46393: LD_INT 7
46395: DOUBLE
46396: EQUAL
46397: IFTRUE 46443
46399: LD_INT 8
46401: DOUBLE
46402: EQUAL
46403: IFTRUE 46443
46405: LD_INT 13
46407: DOUBLE
46408: EQUAL
46409: IFTRUE 46443
46411: LD_INT 12
46413: DOUBLE
46414: EQUAL
46415: IFTRUE 46443
46417: LD_INT 15
46419: DOUBLE
46420: EQUAL
46421: IFTRUE 46443
46423: LD_INT 11
46425: DOUBLE
46426: EQUAL
46427: IFTRUE 46443
46429: LD_INT 14
46431: DOUBLE
46432: EQUAL
46433: IFTRUE 46443
46435: LD_INT 10
46437: DOUBLE
46438: EQUAL
46439: IFTRUE 46443
46441: GO 46499
46443: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
46444: LD_ADDR_VAR 0 9
46448: PUSH
46449: LD_VAR 0 41
46453: PUSH
46454: LD_VAR 0 42
46458: PUSH
46459: LD_VAR 0 43
46463: PUSH
46464: LD_VAR 0 44
46468: PUSH
46469: LD_VAR 0 45
46473: PUSH
46474: LD_VAR 0 46
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: PUSH
46487: LD_VAR 0 4
46491: PUSH
46492: LD_INT 1
46494: PLUS
46495: ARRAY
46496: ST_TO_ADDR
46497: GO 46752
46499: LD_INT 36
46501: DOUBLE
46502: EQUAL
46503: IFTRUE 46507
46505: GO 46563
46507: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
46508: LD_ADDR_VAR 0 9
46512: PUSH
46513: LD_VAR 0 47
46517: PUSH
46518: LD_VAR 0 48
46522: PUSH
46523: LD_VAR 0 49
46527: PUSH
46528: LD_VAR 0 50
46532: PUSH
46533: LD_VAR 0 51
46537: PUSH
46538: LD_VAR 0 52
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: PUSH
46551: LD_VAR 0 4
46555: PUSH
46556: LD_INT 1
46558: PLUS
46559: ARRAY
46560: ST_TO_ADDR
46561: GO 46752
46563: LD_INT 4
46565: DOUBLE
46566: EQUAL
46567: IFTRUE 46589
46569: LD_INT 5
46571: DOUBLE
46572: EQUAL
46573: IFTRUE 46589
46575: LD_INT 34
46577: DOUBLE
46578: EQUAL
46579: IFTRUE 46589
46581: LD_INT 37
46583: DOUBLE
46584: EQUAL
46585: IFTRUE 46589
46587: GO 46645
46589: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46590: LD_ADDR_VAR 0 9
46594: PUSH
46595: LD_VAR 0 53
46599: PUSH
46600: LD_VAR 0 54
46604: PUSH
46605: LD_VAR 0 55
46609: PUSH
46610: LD_VAR 0 56
46614: PUSH
46615: LD_VAR 0 57
46619: PUSH
46620: LD_VAR 0 58
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: PUSH
46633: LD_VAR 0 4
46637: PUSH
46638: LD_INT 1
46640: PLUS
46641: ARRAY
46642: ST_TO_ADDR
46643: GO 46752
46645: LD_INT 31
46647: DOUBLE
46648: EQUAL
46649: IFTRUE 46695
46651: LD_INT 32
46653: DOUBLE
46654: EQUAL
46655: IFTRUE 46695
46657: LD_INT 33
46659: DOUBLE
46660: EQUAL
46661: IFTRUE 46695
46663: LD_INT 27
46665: DOUBLE
46666: EQUAL
46667: IFTRUE 46695
46669: LD_INT 26
46671: DOUBLE
46672: EQUAL
46673: IFTRUE 46695
46675: LD_INT 28
46677: DOUBLE
46678: EQUAL
46679: IFTRUE 46695
46681: LD_INT 29
46683: DOUBLE
46684: EQUAL
46685: IFTRUE 46695
46687: LD_INT 30
46689: DOUBLE
46690: EQUAL
46691: IFTRUE 46695
46693: GO 46751
46695: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
46696: LD_ADDR_VAR 0 9
46700: PUSH
46701: LD_VAR 0 59
46705: PUSH
46706: LD_VAR 0 60
46710: PUSH
46711: LD_VAR 0 61
46715: PUSH
46716: LD_VAR 0 62
46720: PUSH
46721: LD_VAR 0 63
46725: PUSH
46726: LD_VAR 0 64
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: PUSH
46739: LD_VAR 0 4
46743: PUSH
46744: LD_INT 1
46746: PLUS
46747: ARRAY
46748: ST_TO_ADDR
46749: GO 46752
46751: POP
// temp_list2 = [ ] ;
46752: LD_ADDR_VAR 0 10
46756: PUSH
46757: EMPTY
46758: ST_TO_ADDR
// for i in temp_list do
46759: LD_ADDR_VAR 0 8
46763: PUSH
46764: LD_VAR 0 9
46768: PUSH
46769: FOR_IN
46770: IFFALSE 46822
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46772: LD_ADDR_VAR 0 10
46776: PUSH
46777: LD_VAR 0 10
46781: PUSH
46782: LD_VAR 0 8
46786: PUSH
46787: LD_INT 1
46789: ARRAY
46790: PUSH
46791: LD_VAR 0 2
46795: PLUS
46796: PUSH
46797: LD_VAR 0 8
46801: PUSH
46802: LD_INT 2
46804: ARRAY
46805: PUSH
46806: LD_VAR 0 3
46810: PLUS
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: EMPTY
46817: LIST
46818: ADD
46819: ST_TO_ADDR
46820: GO 46769
46822: POP
46823: POP
// result = temp_list2 ;
46824: LD_ADDR_VAR 0 7
46828: PUSH
46829: LD_VAR 0 10
46833: ST_TO_ADDR
// end ;
46834: LD_VAR 0 7
46838: RET
// export function EnemyInRange ( unit , dist ) ; begin
46839: LD_INT 0
46841: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46842: LD_ADDR_VAR 0 3
46846: PUSH
46847: LD_VAR 0 1
46851: PPUSH
46852: CALL_OW 255
46856: PPUSH
46857: LD_VAR 0 1
46861: PPUSH
46862: CALL_OW 250
46866: PPUSH
46867: LD_VAR 0 1
46871: PPUSH
46872: CALL_OW 251
46876: PPUSH
46877: LD_VAR 0 2
46881: PPUSH
46882: CALL 20943 0 4
46886: PUSH
46887: LD_INT 4
46889: ARRAY
46890: ST_TO_ADDR
// end ;
46891: LD_VAR 0 3
46895: RET
// export function PlayerSeeMe ( unit ) ; begin
46896: LD_INT 0
46898: PPUSH
// result := See ( your_side , unit ) ;
46899: LD_ADDR_VAR 0 2
46903: PUSH
46904: LD_OWVAR 2
46908: PPUSH
46909: LD_VAR 0 1
46913: PPUSH
46914: CALL_OW 292
46918: ST_TO_ADDR
// end ;
46919: LD_VAR 0 2
46923: RET
// export function ReverseDir ( unit ) ; begin
46924: LD_INT 0
46926: PPUSH
// if not unit then
46927: LD_VAR 0 1
46931: NOT
46932: IFFALSE 46936
// exit ;
46934: GO 46959
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46936: LD_ADDR_VAR 0 2
46940: PUSH
46941: LD_VAR 0 1
46945: PPUSH
46946: CALL_OW 254
46950: PUSH
46951: LD_INT 3
46953: PLUS
46954: PUSH
46955: LD_INT 6
46957: MOD
46958: ST_TO_ADDR
// end ;
46959: LD_VAR 0 2
46963: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
46964: LD_INT 0
46966: PPUSH
46967: PPUSH
46968: PPUSH
46969: PPUSH
46970: PPUSH
// if not hexes then
46971: LD_VAR 0 2
46975: NOT
46976: IFFALSE 46980
// exit ;
46978: GO 47128
// dist := 9999 ;
46980: LD_ADDR_VAR 0 5
46984: PUSH
46985: LD_INT 9999
46987: ST_TO_ADDR
// for i = 1 to hexes do
46988: LD_ADDR_VAR 0 4
46992: PUSH
46993: DOUBLE
46994: LD_INT 1
46996: DEC
46997: ST_TO_ADDR
46998: LD_VAR 0 2
47002: PUSH
47003: FOR_TO
47004: IFFALSE 47116
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
47006: LD_VAR 0 1
47010: PPUSH
47011: LD_VAR 0 2
47015: PUSH
47016: LD_VAR 0 4
47020: ARRAY
47021: PUSH
47022: LD_INT 1
47024: ARRAY
47025: PPUSH
47026: LD_VAR 0 2
47030: PUSH
47031: LD_VAR 0 4
47035: ARRAY
47036: PUSH
47037: LD_INT 2
47039: ARRAY
47040: PPUSH
47041: CALL_OW 297
47045: PUSH
47046: LD_VAR 0 5
47050: LESS
47051: IFFALSE 47114
// begin hex := hexes [ i ] ;
47053: LD_ADDR_VAR 0 7
47057: PUSH
47058: LD_VAR 0 2
47062: PUSH
47063: LD_VAR 0 4
47067: ARRAY
47068: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47069: LD_ADDR_VAR 0 5
47073: PUSH
47074: LD_VAR 0 1
47078: PPUSH
47079: LD_VAR 0 2
47083: PUSH
47084: LD_VAR 0 4
47088: ARRAY
47089: PUSH
47090: LD_INT 1
47092: ARRAY
47093: PPUSH
47094: LD_VAR 0 2
47098: PUSH
47099: LD_VAR 0 4
47103: ARRAY
47104: PUSH
47105: LD_INT 2
47107: ARRAY
47108: PPUSH
47109: CALL_OW 297
47113: ST_TO_ADDR
// end ; end ;
47114: GO 47003
47116: POP
47117: POP
// result := hex ;
47118: LD_ADDR_VAR 0 3
47122: PUSH
47123: LD_VAR 0 7
47127: ST_TO_ADDR
// end ;
47128: LD_VAR 0 3
47132: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47133: LD_INT 0
47135: PPUSH
47136: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47137: LD_VAR 0 1
47141: NOT
47142: PUSH
47143: LD_VAR 0 1
47147: PUSH
47148: LD_INT 21
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 23
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PPUSH
47172: CALL_OW 69
47176: IN
47177: NOT
47178: OR
47179: IFFALSE 47183
// exit ;
47181: GO 47230
// for i = 1 to 3 do
47183: LD_ADDR_VAR 0 3
47187: PUSH
47188: DOUBLE
47189: LD_INT 1
47191: DEC
47192: ST_TO_ADDR
47193: LD_INT 3
47195: PUSH
47196: FOR_TO
47197: IFFALSE 47228
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47199: LD_VAR 0 1
47203: PPUSH
47204: CALL_OW 250
47208: PPUSH
47209: LD_VAR 0 1
47213: PPUSH
47214: CALL_OW 251
47218: PPUSH
47219: LD_INT 1
47221: PPUSH
47222: CALL_OW 453
47226: GO 47196
47228: POP
47229: POP
// end ;
47230: LD_VAR 0 2
47234: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47235: LD_INT 0
47237: PPUSH
47238: PPUSH
47239: PPUSH
47240: PPUSH
47241: PPUSH
47242: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
47243: LD_VAR 0 1
47247: NOT
47248: PUSH
47249: LD_VAR 0 2
47253: NOT
47254: OR
47255: PUSH
47256: LD_VAR 0 1
47260: PPUSH
47261: CALL_OW 314
47265: OR
47266: IFFALSE 47270
// exit ;
47268: GO 47711
// x := GetX ( enemy_unit ) ;
47270: LD_ADDR_VAR 0 7
47274: PUSH
47275: LD_VAR 0 2
47279: PPUSH
47280: CALL_OW 250
47284: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47285: LD_ADDR_VAR 0 8
47289: PUSH
47290: LD_VAR 0 2
47294: PPUSH
47295: CALL_OW 251
47299: ST_TO_ADDR
// if not x or not y then
47300: LD_VAR 0 7
47304: NOT
47305: PUSH
47306: LD_VAR 0 8
47310: NOT
47311: OR
47312: IFFALSE 47316
// exit ;
47314: GO 47711
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
47316: LD_ADDR_VAR 0 6
47320: PUSH
47321: LD_VAR 0 7
47325: PPUSH
47326: LD_INT 0
47328: PPUSH
47329: LD_INT 4
47331: PPUSH
47332: CALL_OW 272
47336: PUSH
47337: LD_VAR 0 8
47341: PPUSH
47342: LD_INT 0
47344: PPUSH
47345: LD_INT 4
47347: PPUSH
47348: CALL_OW 273
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_VAR 0 7
47361: PPUSH
47362: LD_INT 1
47364: PPUSH
47365: LD_INT 4
47367: PPUSH
47368: CALL_OW 272
47372: PUSH
47373: LD_VAR 0 8
47377: PPUSH
47378: LD_INT 1
47380: PPUSH
47381: LD_INT 4
47383: PPUSH
47384: CALL_OW 273
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_VAR 0 7
47397: PPUSH
47398: LD_INT 2
47400: PPUSH
47401: LD_INT 4
47403: PPUSH
47404: CALL_OW 272
47408: PUSH
47409: LD_VAR 0 8
47413: PPUSH
47414: LD_INT 2
47416: PPUSH
47417: LD_INT 4
47419: PPUSH
47420: CALL_OW 273
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_VAR 0 7
47433: PPUSH
47434: LD_INT 3
47436: PPUSH
47437: LD_INT 4
47439: PPUSH
47440: CALL_OW 272
47444: PUSH
47445: LD_VAR 0 8
47449: PPUSH
47450: LD_INT 3
47452: PPUSH
47453: LD_INT 4
47455: PPUSH
47456: CALL_OW 273
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_VAR 0 7
47469: PPUSH
47470: LD_INT 4
47472: PPUSH
47473: LD_INT 4
47475: PPUSH
47476: CALL_OW 272
47480: PUSH
47481: LD_VAR 0 8
47485: PPUSH
47486: LD_INT 4
47488: PPUSH
47489: LD_INT 4
47491: PPUSH
47492: CALL_OW 273
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_VAR 0 7
47505: PPUSH
47506: LD_INT 5
47508: PPUSH
47509: LD_INT 4
47511: PPUSH
47512: CALL_OW 272
47516: PUSH
47517: LD_VAR 0 8
47521: PPUSH
47522: LD_INT 5
47524: PPUSH
47525: LD_INT 4
47527: PPUSH
47528: CALL_OW 273
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: ST_TO_ADDR
// for i = tmp downto 1 do
47545: LD_ADDR_VAR 0 4
47549: PUSH
47550: DOUBLE
47551: LD_VAR 0 6
47555: INC
47556: ST_TO_ADDR
47557: LD_INT 1
47559: PUSH
47560: FOR_DOWNTO
47561: IFFALSE 47662
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47563: LD_VAR 0 6
47567: PUSH
47568: LD_VAR 0 4
47572: ARRAY
47573: PUSH
47574: LD_INT 1
47576: ARRAY
47577: PPUSH
47578: LD_VAR 0 6
47582: PUSH
47583: LD_VAR 0 4
47587: ARRAY
47588: PUSH
47589: LD_INT 2
47591: ARRAY
47592: PPUSH
47593: CALL_OW 488
47597: NOT
47598: PUSH
47599: LD_VAR 0 6
47603: PUSH
47604: LD_VAR 0 4
47608: ARRAY
47609: PUSH
47610: LD_INT 1
47612: ARRAY
47613: PPUSH
47614: LD_VAR 0 6
47618: PUSH
47619: LD_VAR 0 4
47623: ARRAY
47624: PUSH
47625: LD_INT 2
47627: ARRAY
47628: PPUSH
47629: CALL_OW 428
47633: PUSH
47634: LD_INT 0
47636: NONEQUAL
47637: OR
47638: IFFALSE 47660
// tmp := Delete ( tmp , i ) ;
47640: LD_ADDR_VAR 0 6
47644: PUSH
47645: LD_VAR 0 6
47649: PPUSH
47650: LD_VAR 0 4
47654: PPUSH
47655: CALL_OW 3
47659: ST_TO_ADDR
47660: GO 47560
47662: POP
47663: POP
// j := GetClosestHex ( unit , tmp ) ;
47664: LD_ADDR_VAR 0 5
47668: PUSH
47669: LD_VAR 0 1
47673: PPUSH
47674: LD_VAR 0 6
47678: PPUSH
47679: CALL 46964 0 2
47683: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47684: LD_VAR 0 1
47688: PPUSH
47689: LD_VAR 0 5
47693: PUSH
47694: LD_INT 1
47696: ARRAY
47697: PPUSH
47698: LD_VAR 0 5
47702: PUSH
47703: LD_INT 2
47705: ARRAY
47706: PPUSH
47707: CALL_OW 111
// end ;
47711: LD_VAR 0 3
47715: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47716: LD_INT 0
47718: PPUSH
47719: PPUSH
47720: PPUSH
// uc_side = 0 ;
47721: LD_ADDR_OWVAR 20
47725: PUSH
47726: LD_INT 0
47728: ST_TO_ADDR
// uc_nation = 0 ;
47729: LD_ADDR_OWVAR 21
47733: PUSH
47734: LD_INT 0
47736: ST_TO_ADDR
// InitHc ;
47737: CALL_OW 19
// InitVc ;
47741: CALL_OW 20
// if mastodonts then
47745: LD_VAR 0 6
47749: IFFALSE 47816
// for i = 1 to mastodonts do
47751: LD_ADDR_VAR 0 11
47755: PUSH
47756: DOUBLE
47757: LD_INT 1
47759: DEC
47760: ST_TO_ADDR
47761: LD_VAR 0 6
47765: PUSH
47766: FOR_TO
47767: IFFALSE 47814
// begin vc_chassis := 31 ;
47769: LD_ADDR_OWVAR 37
47773: PUSH
47774: LD_INT 31
47776: ST_TO_ADDR
// vc_control := control_rider ;
47777: LD_ADDR_OWVAR 38
47781: PUSH
47782: LD_INT 4
47784: ST_TO_ADDR
// animal := CreateVehicle ;
47785: LD_ADDR_VAR 0 12
47789: PUSH
47790: CALL_OW 45
47794: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47795: LD_VAR 0 12
47799: PPUSH
47800: LD_VAR 0 8
47804: PPUSH
47805: LD_INT 0
47807: PPUSH
47808: CALL 49885 0 3
// end ;
47812: GO 47766
47814: POP
47815: POP
// if horses then
47816: LD_VAR 0 5
47820: IFFALSE 47887
// for i = 1 to horses do
47822: LD_ADDR_VAR 0 11
47826: PUSH
47827: DOUBLE
47828: LD_INT 1
47830: DEC
47831: ST_TO_ADDR
47832: LD_VAR 0 5
47836: PUSH
47837: FOR_TO
47838: IFFALSE 47885
// begin hc_class := 21 ;
47840: LD_ADDR_OWVAR 28
47844: PUSH
47845: LD_INT 21
47847: ST_TO_ADDR
// hc_gallery :=  ;
47848: LD_ADDR_OWVAR 33
47852: PUSH
47853: LD_STRING 
47855: ST_TO_ADDR
// animal := CreateHuman ;
47856: LD_ADDR_VAR 0 12
47860: PUSH
47861: CALL_OW 44
47865: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47866: LD_VAR 0 12
47870: PPUSH
47871: LD_VAR 0 8
47875: PPUSH
47876: LD_INT 0
47878: PPUSH
47879: CALL 49885 0 3
// end ;
47883: GO 47837
47885: POP
47886: POP
// if birds then
47887: LD_VAR 0 1
47891: IFFALSE 47958
// for i = 1 to birds do
47893: LD_ADDR_VAR 0 11
47897: PUSH
47898: DOUBLE
47899: LD_INT 1
47901: DEC
47902: ST_TO_ADDR
47903: LD_VAR 0 1
47907: PUSH
47908: FOR_TO
47909: IFFALSE 47956
// begin hc_class = 18 ;
47911: LD_ADDR_OWVAR 28
47915: PUSH
47916: LD_INT 18
47918: ST_TO_ADDR
// hc_gallery =  ;
47919: LD_ADDR_OWVAR 33
47923: PUSH
47924: LD_STRING 
47926: ST_TO_ADDR
// animal := CreateHuman ;
47927: LD_ADDR_VAR 0 12
47931: PUSH
47932: CALL_OW 44
47936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47937: LD_VAR 0 12
47941: PPUSH
47942: LD_VAR 0 8
47946: PPUSH
47947: LD_INT 0
47949: PPUSH
47950: CALL 49885 0 3
// end ;
47954: GO 47908
47956: POP
47957: POP
// if tigers then
47958: LD_VAR 0 2
47962: IFFALSE 48046
// for i = 1 to tigers do
47964: LD_ADDR_VAR 0 11
47968: PUSH
47969: DOUBLE
47970: LD_INT 1
47972: DEC
47973: ST_TO_ADDR
47974: LD_VAR 0 2
47978: PUSH
47979: FOR_TO
47980: IFFALSE 48044
// begin hc_class = class_tiger ;
47982: LD_ADDR_OWVAR 28
47986: PUSH
47987: LD_INT 14
47989: ST_TO_ADDR
// hc_gallery =  ;
47990: LD_ADDR_OWVAR 33
47994: PUSH
47995: LD_STRING 
47997: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47998: LD_ADDR_OWVAR 35
48002: PUSH
48003: LD_INT 7
48005: NEG
48006: PPUSH
48007: LD_INT 7
48009: PPUSH
48010: CALL_OW 12
48014: ST_TO_ADDR
// animal := CreateHuman ;
48015: LD_ADDR_VAR 0 12
48019: PUSH
48020: CALL_OW 44
48024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48025: LD_VAR 0 12
48029: PPUSH
48030: LD_VAR 0 8
48034: PPUSH
48035: LD_INT 0
48037: PPUSH
48038: CALL 49885 0 3
// end ;
48042: GO 47979
48044: POP
48045: POP
// if apemans then
48046: LD_VAR 0 3
48050: IFFALSE 48173
// for i = 1 to apemans do
48052: LD_ADDR_VAR 0 11
48056: PUSH
48057: DOUBLE
48058: LD_INT 1
48060: DEC
48061: ST_TO_ADDR
48062: LD_VAR 0 3
48066: PUSH
48067: FOR_TO
48068: IFFALSE 48171
// begin hc_class = class_apeman ;
48070: LD_ADDR_OWVAR 28
48074: PUSH
48075: LD_INT 12
48077: ST_TO_ADDR
// hc_gallery =  ;
48078: LD_ADDR_OWVAR 33
48082: PUSH
48083: LD_STRING 
48085: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
48086: LD_ADDR_OWVAR 35
48090: PUSH
48091: LD_INT 5
48093: NEG
48094: PPUSH
48095: LD_INT 5
48097: PPUSH
48098: CALL_OW 12
48102: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48103: LD_ADDR_OWVAR 31
48107: PUSH
48108: LD_INT 1
48110: PPUSH
48111: LD_INT 3
48113: PPUSH
48114: CALL_OW 12
48118: PUSH
48119: LD_INT 1
48121: PPUSH
48122: LD_INT 3
48124: PPUSH
48125: CALL_OW 12
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// animal := CreateHuman ;
48142: LD_ADDR_VAR 0 12
48146: PUSH
48147: CALL_OW 44
48151: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48152: LD_VAR 0 12
48156: PPUSH
48157: LD_VAR 0 8
48161: PPUSH
48162: LD_INT 0
48164: PPUSH
48165: CALL 49885 0 3
// end ;
48169: GO 48067
48171: POP
48172: POP
// if enchidnas then
48173: LD_VAR 0 4
48177: IFFALSE 48244
// for i = 1 to enchidnas do
48179: LD_ADDR_VAR 0 11
48183: PUSH
48184: DOUBLE
48185: LD_INT 1
48187: DEC
48188: ST_TO_ADDR
48189: LD_VAR 0 4
48193: PUSH
48194: FOR_TO
48195: IFFALSE 48242
// begin hc_class = 13 ;
48197: LD_ADDR_OWVAR 28
48201: PUSH
48202: LD_INT 13
48204: ST_TO_ADDR
// hc_gallery =  ;
48205: LD_ADDR_OWVAR 33
48209: PUSH
48210: LD_STRING 
48212: ST_TO_ADDR
// animal := CreateHuman ;
48213: LD_ADDR_VAR 0 12
48217: PUSH
48218: CALL_OW 44
48222: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48223: LD_VAR 0 12
48227: PPUSH
48228: LD_VAR 0 8
48232: PPUSH
48233: LD_INT 0
48235: PPUSH
48236: CALL 49885 0 3
// end ;
48240: GO 48194
48242: POP
48243: POP
// if fishes then
48244: LD_VAR 0 7
48248: IFFALSE 48315
// for i = 1 to fishes do
48250: LD_ADDR_VAR 0 11
48254: PUSH
48255: DOUBLE
48256: LD_INT 1
48258: DEC
48259: ST_TO_ADDR
48260: LD_VAR 0 7
48264: PUSH
48265: FOR_TO
48266: IFFALSE 48313
// begin hc_class = 20 ;
48268: LD_ADDR_OWVAR 28
48272: PUSH
48273: LD_INT 20
48275: ST_TO_ADDR
// hc_gallery =  ;
48276: LD_ADDR_OWVAR 33
48280: PUSH
48281: LD_STRING 
48283: ST_TO_ADDR
// animal := CreateHuman ;
48284: LD_ADDR_VAR 0 12
48288: PUSH
48289: CALL_OW 44
48293: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
48294: LD_VAR 0 12
48298: PPUSH
48299: LD_VAR 0 9
48303: PPUSH
48304: LD_INT 0
48306: PPUSH
48307: CALL 49885 0 3
// end ;
48311: GO 48265
48313: POP
48314: POP
// end ;
48315: LD_VAR 0 10
48319: RET
// export function WantHeal ( sci , unit ) ; begin
48320: LD_INT 0
48322: PPUSH
// if GetTaskList ( sci ) > 0 then
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 437
48332: PUSH
48333: LD_INT 0
48335: GREATER
48336: IFFALSE 48406
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
48338: LD_VAR 0 1
48342: PPUSH
48343: CALL_OW 437
48347: PUSH
48348: LD_INT 1
48350: ARRAY
48351: PUSH
48352: LD_INT 1
48354: ARRAY
48355: PUSH
48356: LD_STRING l
48358: EQUAL
48359: PUSH
48360: LD_VAR 0 1
48364: PPUSH
48365: CALL_OW 437
48369: PUSH
48370: LD_INT 1
48372: ARRAY
48373: PUSH
48374: LD_INT 4
48376: ARRAY
48377: PUSH
48378: LD_VAR 0 2
48382: EQUAL
48383: AND
48384: IFFALSE 48396
// result := true else
48386: LD_ADDR_VAR 0 3
48390: PUSH
48391: LD_INT 1
48393: ST_TO_ADDR
48394: GO 48404
// result := false ;
48396: LD_ADDR_VAR 0 3
48400: PUSH
48401: LD_INT 0
48403: ST_TO_ADDR
// end else
48404: GO 48414
// result := false ;
48406: LD_ADDR_VAR 0 3
48410: PUSH
48411: LD_INT 0
48413: ST_TO_ADDR
// end ;
48414: LD_VAR 0 3
48418: RET
// export function HealTarget ( sci ) ; begin
48419: LD_INT 0
48421: PPUSH
// if not sci then
48422: LD_VAR 0 1
48426: NOT
48427: IFFALSE 48431
// exit ;
48429: GO 48496
// result := 0 ;
48431: LD_ADDR_VAR 0 2
48435: PUSH
48436: LD_INT 0
48438: ST_TO_ADDR
// if GetTaskList ( sci ) then
48439: LD_VAR 0 1
48443: PPUSH
48444: CALL_OW 437
48448: IFFALSE 48496
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
48450: LD_VAR 0 1
48454: PPUSH
48455: CALL_OW 437
48459: PUSH
48460: LD_INT 1
48462: ARRAY
48463: PUSH
48464: LD_INT 1
48466: ARRAY
48467: PUSH
48468: LD_STRING l
48470: EQUAL
48471: IFFALSE 48496
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
48473: LD_ADDR_VAR 0 2
48477: PUSH
48478: LD_VAR 0 1
48482: PPUSH
48483: CALL_OW 437
48487: PUSH
48488: LD_INT 1
48490: ARRAY
48491: PUSH
48492: LD_INT 4
48494: ARRAY
48495: ST_TO_ADDR
// end ;
48496: LD_VAR 0 2
48500: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
48501: LD_INT 0
48503: PPUSH
48504: PPUSH
48505: PPUSH
48506: PPUSH
// if not base_units then
48507: LD_VAR 0 1
48511: NOT
48512: IFFALSE 48516
// exit ;
48514: GO 48603
// result := false ;
48516: LD_ADDR_VAR 0 2
48520: PUSH
48521: LD_INT 0
48523: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
48524: LD_ADDR_VAR 0 5
48528: PUSH
48529: LD_VAR 0 1
48533: PPUSH
48534: LD_INT 21
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PPUSH
48544: CALL_OW 72
48548: ST_TO_ADDR
// if not tmp then
48549: LD_VAR 0 5
48553: NOT
48554: IFFALSE 48558
// exit ;
48556: GO 48603
// for i in tmp do
48558: LD_ADDR_VAR 0 3
48562: PUSH
48563: LD_VAR 0 5
48567: PUSH
48568: FOR_IN
48569: IFFALSE 48601
// begin result := EnemyInRange ( i , 22 ) ;
48571: LD_ADDR_VAR 0 2
48575: PUSH
48576: LD_VAR 0 3
48580: PPUSH
48581: LD_INT 22
48583: PPUSH
48584: CALL 46839 0 2
48588: ST_TO_ADDR
// if result then
48589: LD_VAR 0 2
48593: IFFALSE 48599
// exit ;
48595: POP
48596: POP
48597: GO 48603
// end ;
48599: GO 48568
48601: POP
48602: POP
// end ;
48603: LD_VAR 0 2
48607: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
48608: LD_INT 0
48610: PPUSH
48611: PPUSH
// if not units then
48612: LD_VAR 0 1
48616: NOT
48617: IFFALSE 48621
// exit ;
48619: GO 48691
// result := [ ] ;
48621: LD_ADDR_VAR 0 3
48625: PUSH
48626: EMPTY
48627: ST_TO_ADDR
// for i in units do
48628: LD_ADDR_VAR 0 4
48632: PUSH
48633: LD_VAR 0 1
48637: PUSH
48638: FOR_IN
48639: IFFALSE 48689
// if GetTag ( i ) = tag then
48641: LD_VAR 0 4
48645: PPUSH
48646: CALL_OW 110
48650: PUSH
48651: LD_VAR 0 2
48655: EQUAL
48656: IFFALSE 48687
// result := Insert ( result , result + 1 , i ) ;
48658: LD_ADDR_VAR 0 3
48662: PUSH
48663: LD_VAR 0 3
48667: PPUSH
48668: LD_VAR 0 3
48672: PUSH
48673: LD_INT 1
48675: PLUS
48676: PPUSH
48677: LD_VAR 0 4
48681: PPUSH
48682: CALL_OW 2
48686: ST_TO_ADDR
48687: GO 48638
48689: POP
48690: POP
// end ;
48691: LD_VAR 0 3
48695: RET
// export function IsDriver ( un ) ; begin
48696: LD_INT 0
48698: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
48699: LD_ADDR_VAR 0 2
48703: PUSH
48704: LD_VAR 0 1
48708: PUSH
48709: LD_INT 55
48711: PUSH
48712: EMPTY
48713: LIST
48714: PPUSH
48715: CALL_OW 69
48719: IN
48720: ST_TO_ADDR
// end ;
48721: LD_VAR 0 2
48725: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
48726: LD_INT 0
48728: PPUSH
48729: PPUSH
// list := [ ] ;
48730: LD_ADDR_VAR 0 5
48734: PUSH
48735: EMPTY
48736: ST_TO_ADDR
// case d of 0 :
48737: LD_VAR 0 3
48741: PUSH
48742: LD_INT 0
48744: DOUBLE
48745: EQUAL
48746: IFTRUE 48750
48748: GO 48883
48750: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
48751: LD_ADDR_VAR 0 5
48755: PUSH
48756: LD_VAR 0 1
48760: PUSH
48761: LD_INT 4
48763: MINUS
48764: PUSH
48765: LD_VAR 0 2
48769: PUSH
48770: LD_INT 4
48772: MINUS
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: PUSH
48782: LD_VAR 0 1
48786: PUSH
48787: LD_INT 3
48789: MINUS
48790: PUSH
48791: LD_VAR 0 2
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: PUSH
48804: LD_VAR 0 1
48808: PUSH
48809: LD_INT 4
48811: PLUS
48812: PUSH
48813: LD_VAR 0 2
48817: PUSH
48818: LD_INT 4
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: LIST
48825: PUSH
48826: LD_VAR 0 1
48830: PUSH
48831: LD_INT 3
48833: PLUS
48834: PUSH
48835: LD_VAR 0 2
48839: PUSH
48840: LD_INT 3
48842: PLUS
48843: PUSH
48844: LD_INT 5
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: PUSH
48852: LD_VAR 0 1
48856: PUSH
48857: LD_VAR 0 2
48861: PUSH
48862: LD_INT 4
48864: PLUS
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: ST_TO_ADDR
// end ; 1 :
48881: GO 49581
48883: LD_INT 1
48885: DOUBLE
48886: EQUAL
48887: IFTRUE 48891
48889: GO 49024
48891: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
48892: LD_ADDR_VAR 0 5
48896: PUSH
48897: LD_VAR 0 1
48901: PUSH
48902: LD_VAR 0 2
48906: PUSH
48907: LD_INT 4
48909: MINUS
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: LIST
48918: PUSH
48919: LD_VAR 0 1
48923: PUSH
48924: LD_INT 3
48926: MINUS
48927: PUSH
48928: LD_VAR 0 2
48932: PUSH
48933: LD_INT 3
48935: MINUS
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: PUSH
48945: LD_VAR 0 1
48949: PUSH
48950: LD_INT 4
48952: MINUS
48953: PUSH
48954: LD_VAR 0 2
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: PUSH
48967: LD_VAR 0 1
48971: PUSH
48972: LD_VAR 0 2
48976: PUSH
48977: LD_INT 3
48979: PLUS
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: PUSH
48989: LD_VAR 0 1
48993: PUSH
48994: LD_INT 4
48996: PLUS
48997: PUSH
48998: LD_VAR 0 2
49002: PUSH
49003: LD_INT 4
49005: PLUS
49006: PUSH
49007: LD_INT 5
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: ST_TO_ADDR
// end ; 2 :
49022: GO 49581
49024: LD_INT 2
49026: DOUBLE
49027: EQUAL
49028: IFTRUE 49032
49030: GO 49161
49032: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49033: LD_ADDR_VAR 0 5
49037: PUSH
49038: LD_VAR 0 1
49042: PUSH
49043: LD_VAR 0 2
49047: PUSH
49048: LD_INT 3
49050: MINUS
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: PUSH
49060: LD_VAR 0 1
49064: PUSH
49065: LD_INT 4
49067: PLUS
49068: PUSH
49069: LD_VAR 0 2
49073: PUSH
49074: LD_INT 4
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: LIST
49081: PUSH
49082: LD_VAR 0 1
49086: PUSH
49087: LD_VAR 0 2
49091: PUSH
49092: LD_INT 4
49094: PLUS
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: LIST
49103: PUSH
49104: LD_VAR 0 1
49108: PUSH
49109: LD_INT 3
49111: MINUS
49112: PUSH
49113: LD_VAR 0 2
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: PUSH
49126: LD_VAR 0 1
49130: PUSH
49131: LD_INT 4
49133: MINUS
49134: PUSH
49135: LD_VAR 0 2
49139: PUSH
49140: LD_INT 4
49142: MINUS
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// end ; 3 :
49159: GO 49581
49161: LD_INT 3
49163: DOUBLE
49164: EQUAL
49165: IFTRUE 49169
49167: GO 49302
49169: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49170: LD_ADDR_VAR 0 5
49174: PUSH
49175: LD_VAR 0 1
49179: PUSH
49180: LD_INT 3
49182: PLUS
49183: PUSH
49184: LD_VAR 0 2
49188: PUSH
49189: LD_INT 4
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: PUSH
49197: LD_VAR 0 1
49201: PUSH
49202: LD_INT 4
49204: PLUS
49205: PUSH
49206: LD_VAR 0 2
49210: PUSH
49211: LD_INT 4
49213: PLUS
49214: PUSH
49215: LD_INT 5
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: LIST
49222: PUSH
49223: LD_VAR 0 1
49227: PUSH
49228: LD_INT 4
49230: MINUS
49231: PUSH
49232: LD_VAR 0 2
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: PUSH
49245: LD_VAR 0 1
49249: PUSH
49250: LD_VAR 0 2
49254: PUSH
49255: LD_INT 4
49257: MINUS
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: PUSH
49267: LD_VAR 0 1
49271: PUSH
49272: LD_INT 3
49274: MINUS
49275: PUSH
49276: LD_VAR 0 2
49280: PUSH
49281: LD_INT 3
49283: MINUS
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// end ; 4 :
49300: GO 49581
49302: LD_INT 4
49304: DOUBLE
49305: EQUAL
49306: IFTRUE 49310
49308: GO 49443
49310: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
49311: LD_ADDR_VAR 0 5
49315: PUSH
49316: LD_VAR 0 1
49320: PUSH
49321: LD_VAR 0 2
49325: PUSH
49326: LD_INT 4
49328: PLUS
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: PUSH
49338: LD_VAR 0 1
49342: PUSH
49343: LD_INT 3
49345: PLUS
49346: PUSH
49347: LD_VAR 0 2
49351: PUSH
49352: LD_INT 3
49354: PLUS
49355: PUSH
49356: LD_INT 5
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: PUSH
49364: LD_VAR 0 1
49368: PUSH
49369: LD_INT 4
49371: PLUS
49372: PUSH
49373: LD_VAR 0 2
49377: PUSH
49378: LD_INT 4
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: PUSH
49386: LD_VAR 0 1
49390: PUSH
49391: LD_VAR 0 2
49395: PUSH
49396: LD_INT 3
49398: MINUS
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: LIST
49407: PUSH
49408: LD_VAR 0 1
49412: PUSH
49413: LD_INT 4
49415: MINUS
49416: PUSH
49417: LD_VAR 0 2
49421: PUSH
49422: LD_INT 4
49424: MINUS
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// end ; 5 :
49441: GO 49581
49443: LD_INT 5
49445: DOUBLE
49446: EQUAL
49447: IFTRUE 49451
49449: GO 49580
49451: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
49452: LD_ADDR_VAR 0 5
49456: PUSH
49457: LD_VAR 0 1
49461: PUSH
49462: LD_INT 4
49464: MINUS
49465: PUSH
49466: LD_VAR 0 2
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: PUSH
49479: LD_VAR 0 1
49483: PUSH
49484: LD_VAR 0 2
49488: PUSH
49489: LD_INT 4
49491: MINUS
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: PUSH
49501: LD_VAR 0 1
49505: PUSH
49506: LD_INT 4
49508: PLUS
49509: PUSH
49510: LD_VAR 0 2
49514: PUSH
49515: LD_INT 4
49517: PLUS
49518: PUSH
49519: LD_INT 5
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: LIST
49526: PUSH
49527: LD_VAR 0 1
49531: PUSH
49532: LD_INT 3
49534: PLUS
49535: PUSH
49536: LD_VAR 0 2
49540: PUSH
49541: LD_INT 4
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: PUSH
49549: LD_VAR 0 1
49553: PUSH
49554: LD_VAR 0 2
49558: PUSH
49559: LD_INT 3
49561: PLUS
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: ST_TO_ADDR
// end ; end ;
49578: GO 49581
49580: POP
// result := list ;
49581: LD_ADDR_VAR 0 4
49585: PUSH
49586: LD_VAR 0 5
49590: ST_TO_ADDR
// end ;
49591: LD_VAR 0 4
49595: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
49596: LD_INT 0
49598: PPUSH
49599: PPUSH
49600: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
49601: LD_VAR 0 1
49605: NOT
49606: PUSH
49607: LD_VAR 0 2
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: LD_INT 4
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: IN
49630: NOT
49631: OR
49632: IFFALSE 49636
// exit ;
49634: GO 49728
// tmp := [ ] ;
49636: LD_ADDR_VAR 0 5
49640: PUSH
49641: EMPTY
49642: ST_TO_ADDR
// for i in units do
49643: LD_ADDR_VAR 0 4
49647: PUSH
49648: LD_VAR 0 1
49652: PUSH
49653: FOR_IN
49654: IFFALSE 49697
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
49656: LD_ADDR_VAR 0 5
49660: PUSH
49661: LD_VAR 0 5
49665: PPUSH
49666: LD_VAR 0 5
49670: PUSH
49671: LD_INT 1
49673: PLUS
49674: PPUSH
49675: LD_VAR 0 4
49679: PPUSH
49680: LD_VAR 0 2
49684: PPUSH
49685: CALL_OW 259
49689: PPUSH
49690: CALL_OW 2
49694: ST_TO_ADDR
49695: GO 49653
49697: POP
49698: POP
// if not tmp then
49699: LD_VAR 0 5
49703: NOT
49704: IFFALSE 49708
// exit ;
49706: GO 49728
// result := SortListByListDesc ( units , tmp ) ;
49708: LD_ADDR_VAR 0 3
49712: PUSH
49713: LD_VAR 0 1
49717: PPUSH
49718: LD_VAR 0 5
49722: PPUSH
49723: CALL_OW 77
49727: ST_TO_ADDR
// end ;
49728: LD_VAR 0 3
49732: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
49733: LD_INT 0
49735: PPUSH
49736: PPUSH
49737: PPUSH
// x := GetX ( building ) ;
49738: LD_ADDR_VAR 0 4
49742: PUSH
49743: LD_VAR 0 2
49747: PPUSH
49748: CALL_OW 250
49752: ST_TO_ADDR
// y := GetY ( building ) ;
49753: LD_ADDR_VAR 0 5
49757: PUSH
49758: LD_VAR 0 2
49762: PPUSH
49763: CALL_OW 251
49767: ST_TO_ADDR
// if GetTaskList ( unit ) then
49768: LD_VAR 0 1
49772: PPUSH
49773: CALL_OW 437
49777: IFFALSE 49872
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49779: LD_STRING e
49781: PUSH
49782: LD_VAR 0 1
49786: PPUSH
49787: CALL_OW 437
49791: PUSH
49792: LD_INT 1
49794: ARRAY
49795: PUSH
49796: LD_INT 1
49798: ARRAY
49799: EQUAL
49800: PUSH
49801: LD_VAR 0 4
49805: PUSH
49806: LD_VAR 0 1
49810: PPUSH
49811: CALL_OW 437
49815: PUSH
49816: LD_INT 1
49818: ARRAY
49819: PUSH
49820: LD_INT 2
49822: ARRAY
49823: EQUAL
49824: AND
49825: PUSH
49826: LD_VAR 0 5
49830: PUSH
49831: LD_VAR 0 1
49835: PPUSH
49836: CALL_OW 437
49840: PUSH
49841: LD_INT 1
49843: ARRAY
49844: PUSH
49845: LD_INT 3
49847: ARRAY
49848: EQUAL
49849: AND
49850: IFFALSE 49862
// result := true else
49852: LD_ADDR_VAR 0 3
49856: PUSH
49857: LD_INT 1
49859: ST_TO_ADDR
49860: GO 49870
// result := false ;
49862: LD_ADDR_VAR 0 3
49866: PUSH
49867: LD_INT 0
49869: ST_TO_ADDR
// end else
49870: GO 49880
// result := false ;
49872: LD_ADDR_VAR 0 3
49876: PUSH
49877: LD_INT 0
49879: ST_TO_ADDR
// end ;
49880: LD_VAR 0 3
49884: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
49885: LD_INT 0
49887: PPUSH
49888: PPUSH
49889: PPUSH
49890: PPUSH
// if not unit or not area then
49891: LD_VAR 0 1
49895: NOT
49896: PUSH
49897: LD_VAR 0 2
49901: NOT
49902: OR
49903: IFFALSE 49907
// exit ;
49905: GO 50071
// tmp := AreaToList ( area , i ) ;
49907: LD_ADDR_VAR 0 6
49911: PUSH
49912: LD_VAR 0 2
49916: PPUSH
49917: LD_VAR 0 5
49921: PPUSH
49922: CALL_OW 517
49926: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49927: LD_ADDR_VAR 0 5
49931: PUSH
49932: DOUBLE
49933: LD_INT 1
49935: DEC
49936: ST_TO_ADDR
49937: LD_VAR 0 6
49941: PUSH
49942: LD_INT 1
49944: ARRAY
49945: PUSH
49946: FOR_TO
49947: IFFALSE 50069
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49949: LD_ADDR_VAR 0 7
49953: PUSH
49954: LD_VAR 0 6
49958: PUSH
49959: LD_INT 1
49961: ARRAY
49962: PUSH
49963: LD_VAR 0 5
49967: ARRAY
49968: PUSH
49969: LD_VAR 0 6
49973: PUSH
49974: LD_INT 2
49976: ARRAY
49977: PUSH
49978: LD_VAR 0 5
49982: ARRAY
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
49988: LD_VAR 0 7
49992: PUSH
49993: LD_INT 1
49995: ARRAY
49996: PPUSH
49997: LD_VAR 0 7
50001: PUSH
50002: LD_INT 2
50004: ARRAY
50005: PPUSH
50006: CALL_OW 428
50010: PUSH
50011: LD_INT 0
50013: EQUAL
50014: IFFALSE 50067
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50016: LD_VAR 0 1
50020: PPUSH
50021: LD_VAR 0 7
50025: PUSH
50026: LD_INT 1
50028: ARRAY
50029: PPUSH
50030: LD_VAR 0 7
50034: PUSH
50035: LD_INT 2
50037: ARRAY
50038: PPUSH
50039: LD_VAR 0 3
50043: PPUSH
50044: CALL_OW 48
// result := IsPlaced ( unit ) ;
50048: LD_ADDR_VAR 0 4
50052: PUSH
50053: LD_VAR 0 1
50057: PPUSH
50058: CALL_OW 305
50062: ST_TO_ADDR
// exit ;
50063: POP
50064: POP
50065: GO 50071
// end ; end ;
50067: GO 49946
50069: POP
50070: POP
// end ;
50071: LD_VAR 0 4
50075: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50076: LD_INT 0
50078: PPUSH
50079: PPUSH
50080: PPUSH
// if not side or side > 8 then
50081: LD_VAR 0 1
50085: NOT
50086: PUSH
50087: LD_VAR 0 1
50091: PUSH
50092: LD_INT 8
50094: GREATER
50095: OR
50096: IFFALSE 50100
// exit ;
50098: GO 50287
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50100: LD_ADDR_VAR 0 4
50104: PUSH
50105: LD_INT 22
50107: PUSH
50108: LD_VAR 0 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 21
50119: PUSH
50120: LD_INT 3
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PPUSH
50131: CALL_OW 69
50135: ST_TO_ADDR
// if not tmp then
50136: LD_VAR 0 4
50140: NOT
50141: IFFALSE 50145
// exit ;
50143: GO 50287
// enable_addtolog := true ;
50145: LD_ADDR_OWVAR 81
50149: PUSH
50150: LD_INT 1
50152: ST_TO_ADDR
// AddToLog ( [ ) ;
50153: LD_STRING [
50155: PPUSH
50156: CALL_OW 561
// for i in tmp do
50160: LD_ADDR_VAR 0 3
50164: PUSH
50165: LD_VAR 0 4
50169: PUSH
50170: FOR_IN
50171: IFFALSE 50278
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50173: LD_STRING [
50175: PUSH
50176: LD_VAR 0 3
50180: PPUSH
50181: CALL_OW 266
50185: STR
50186: PUSH
50187: LD_STRING , 
50189: STR
50190: PUSH
50191: LD_VAR 0 3
50195: PPUSH
50196: CALL_OW 250
50200: STR
50201: PUSH
50202: LD_STRING , 
50204: STR
50205: PUSH
50206: LD_VAR 0 3
50210: PPUSH
50211: CALL_OW 251
50215: STR
50216: PUSH
50217: LD_STRING , 
50219: STR
50220: PUSH
50221: LD_VAR 0 3
50225: PPUSH
50226: CALL_OW 254
50230: STR
50231: PUSH
50232: LD_STRING , 
50234: STR
50235: PUSH
50236: LD_VAR 0 3
50240: PPUSH
50241: LD_INT 1
50243: PPUSH
50244: CALL_OW 268
50248: STR
50249: PUSH
50250: LD_STRING , 
50252: STR
50253: PUSH
50254: LD_VAR 0 3
50258: PPUSH
50259: LD_INT 2
50261: PPUSH
50262: CALL_OW 268
50266: STR
50267: PUSH
50268: LD_STRING ],
50270: STR
50271: PPUSH
50272: CALL_OW 561
// end ;
50276: GO 50170
50278: POP
50279: POP
// AddToLog ( ]; ) ;
50280: LD_STRING ];
50282: PPUSH
50283: CALL_OW 561
// end ;
50287: LD_VAR 0 2
50291: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
50292: LD_INT 0
50294: PPUSH
50295: PPUSH
50296: PPUSH
50297: PPUSH
50298: PPUSH
// if not area or not rate or not max then
50299: LD_VAR 0 1
50303: NOT
50304: PUSH
50305: LD_VAR 0 2
50309: NOT
50310: OR
50311: PUSH
50312: LD_VAR 0 4
50316: NOT
50317: OR
50318: IFFALSE 50322
// exit ;
50320: GO 50514
// while 1 do
50322: LD_INT 1
50324: IFFALSE 50514
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
50326: LD_ADDR_VAR 0 9
50330: PUSH
50331: LD_VAR 0 1
50335: PPUSH
50336: LD_INT 1
50338: PPUSH
50339: CALL_OW 287
50343: PUSH
50344: LD_INT 10
50346: MUL
50347: ST_TO_ADDR
// r := rate / 10 ;
50348: LD_ADDR_VAR 0 7
50352: PUSH
50353: LD_VAR 0 2
50357: PUSH
50358: LD_INT 10
50360: DIVREAL
50361: ST_TO_ADDR
// time := 1 1$00 ;
50362: LD_ADDR_VAR 0 8
50366: PUSH
50367: LD_INT 2100
50369: ST_TO_ADDR
// if amount < min then
50370: LD_VAR 0 9
50374: PUSH
50375: LD_VAR 0 3
50379: LESS
50380: IFFALSE 50398
// r := r * 2 else
50382: LD_ADDR_VAR 0 7
50386: PUSH
50387: LD_VAR 0 7
50391: PUSH
50392: LD_INT 2
50394: MUL
50395: ST_TO_ADDR
50396: GO 50424
// if amount > max then
50398: LD_VAR 0 9
50402: PUSH
50403: LD_VAR 0 4
50407: GREATER
50408: IFFALSE 50424
// r := r / 2 ;
50410: LD_ADDR_VAR 0 7
50414: PUSH
50415: LD_VAR 0 7
50419: PUSH
50420: LD_INT 2
50422: DIVREAL
50423: ST_TO_ADDR
// time := time / r ;
50424: LD_ADDR_VAR 0 8
50428: PUSH
50429: LD_VAR 0 8
50433: PUSH
50434: LD_VAR 0 7
50438: DIVREAL
50439: ST_TO_ADDR
// if time < 0 then
50440: LD_VAR 0 8
50444: PUSH
50445: LD_INT 0
50447: LESS
50448: IFFALSE 50465
// time := time * - 1 ;
50450: LD_ADDR_VAR 0 8
50454: PUSH
50455: LD_VAR 0 8
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: MUL
50464: ST_TO_ADDR
// wait ( time ) ;
50465: LD_VAR 0 8
50469: PPUSH
50470: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
50474: LD_INT 35
50476: PPUSH
50477: LD_INT 875
50479: PPUSH
50480: CALL_OW 12
50484: PPUSH
50485: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
50489: LD_INT 1
50491: PPUSH
50492: LD_INT 5
50494: PPUSH
50495: CALL_OW 12
50499: PPUSH
50500: LD_VAR 0 1
50504: PPUSH
50505: LD_INT 1
50507: PPUSH
50508: CALL_OW 55
// end ;
50512: GO 50322
// end ;
50514: LD_VAR 0 5
50518: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
50519: LD_INT 0
50521: PPUSH
50522: PPUSH
50523: PPUSH
50524: PPUSH
50525: PPUSH
50526: PPUSH
50527: PPUSH
50528: PPUSH
// if not turrets or not factories then
50529: LD_VAR 0 1
50533: NOT
50534: PUSH
50535: LD_VAR 0 2
50539: NOT
50540: OR
50541: IFFALSE 50545
// exit ;
50543: GO 50852
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
50545: LD_ADDR_VAR 0 10
50549: PUSH
50550: LD_INT 5
50552: PUSH
50553: LD_INT 6
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 4
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: LD_INT 5
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 24
50587: PUSH
50588: LD_INT 25
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 23
50597: PUSH
50598: LD_INT 27
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 42
50611: PUSH
50612: LD_INT 43
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 44
50621: PUSH
50622: LD_INT 46
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 45
50631: PUSH
50632: LD_INT 47
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: ST_TO_ADDR
// result := [ ] ;
50649: LD_ADDR_VAR 0 3
50653: PUSH
50654: EMPTY
50655: ST_TO_ADDR
// for i in turrets do
50656: LD_ADDR_VAR 0 4
50660: PUSH
50661: LD_VAR 0 1
50665: PUSH
50666: FOR_IN
50667: IFFALSE 50850
// begin nat := GetNation ( i ) ;
50669: LD_ADDR_VAR 0 7
50673: PUSH
50674: LD_VAR 0 4
50678: PPUSH
50679: CALL_OW 248
50683: ST_TO_ADDR
// weapon := 0 ;
50684: LD_ADDR_VAR 0 8
50688: PUSH
50689: LD_INT 0
50691: ST_TO_ADDR
// if not nat then
50692: LD_VAR 0 7
50696: NOT
50697: IFFALSE 50701
// continue ;
50699: GO 50666
// for j in list [ nat ] do
50701: LD_ADDR_VAR 0 5
50705: PUSH
50706: LD_VAR 0 10
50710: PUSH
50711: LD_VAR 0 7
50715: ARRAY
50716: PUSH
50717: FOR_IN
50718: IFFALSE 50759
// if GetBWeapon ( i ) = j [ 1 ] then
50720: LD_VAR 0 4
50724: PPUSH
50725: CALL_OW 269
50729: PUSH
50730: LD_VAR 0 5
50734: PUSH
50735: LD_INT 1
50737: ARRAY
50738: EQUAL
50739: IFFALSE 50757
// begin weapon := j [ 2 ] ;
50741: LD_ADDR_VAR 0 8
50745: PUSH
50746: LD_VAR 0 5
50750: PUSH
50751: LD_INT 2
50753: ARRAY
50754: ST_TO_ADDR
// break ;
50755: GO 50759
// end ;
50757: GO 50717
50759: POP
50760: POP
// if not weapon then
50761: LD_VAR 0 8
50765: NOT
50766: IFFALSE 50770
// continue ;
50768: GO 50666
// for k in factories do
50770: LD_ADDR_VAR 0 6
50774: PUSH
50775: LD_VAR 0 2
50779: PUSH
50780: FOR_IN
50781: IFFALSE 50846
// begin weapons := AvailableWeaponList ( k ) ;
50783: LD_ADDR_VAR 0 9
50787: PUSH
50788: LD_VAR 0 6
50792: PPUSH
50793: CALL_OW 478
50797: ST_TO_ADDR
// if not weapons then
50798: LD_VAR 0 9
50802: NOT
50803: IFFALSE 50807
// continue ;
50805: GO 50780
// if weapon in weapons then
50807: LD_VAR 0 8
50811: PUSH
50812: LD_VAR 0 9
50816: IN
50817: IFFALSE 50844
// begin result := [ i , weapon ] ;
50819: LD_ADDR_VAR 0 3
50823: PUSH
50824: LD_VAR 0 4
50828: PUSH
50829: LD_VAR 0 8
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// exit ;
50838: POP
50839: POP
50840: POP
50841: POP
50842: GO 50852
// end ; end ;
50844: GO 50780
50846: POP
50847: POP
// end ;
50848: GO 50666
50850: POP
50851: POP
// end ;
50852: LD_VAR 0 3
50856: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
50857: LD_INT 0
50859: PPUSH
// if not side or side > 8 then
50860: LD_VAR 0 3
50864: NOT
50865: PUSH
50866: LD_VAR 0 3
50870: PUSH
50871: LD_INT 8
50873: GREATER
50874: OR
50875: IFFALSE 50879
// exit ;
50877: GO 50938
// if not range then
50879: LD_VAR 0 4
50883: NOT
50884: IFFALSE 50895
// range := - 12 ;
50886: LD_ADDR_VAR 0 4
50890: PUSH
50891: LD_INT 12
50893: NEG
50894: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
50895: LD_VAR 0 1
50899: PPUSH
50900: LD_VAR 0 2
50904: PPUSH
50905: LD_VAR 0 3
50909: PPUSH
50910: LD_VAR 0 4
50914: PPUSH
50915: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50919: LD_VAR 0 1
50923: PPUSH
50924: LD_VAR 0 2
50928: PPUSH
50929: LD_VAR 0 3
50933: PPUSH
50934: CALL_OW 331
// end ;
50938: LD_VAR 0 5
50942: RET
// export function Video ( mode ) ; begin
50943: LD_INT 0
50945: PPUSH
// ingame_video = mode ;
50946: LD_ADDR_OWVAR 52
50950: PUSH
50951: LD_VAR 0 1
50955: ST_TO_ADDR
// interface_hidden = mode ;
50956: LD_ADDR_OWVAR 54
50960: PUSH
50961: LD_VAR 0 1
50965: ST_TO_ADDR
// end ;
50966: LD_VAR 0 2
50970: RET
// export function Join ( array , element ) ; begin
50971: LD_INT 0
50973: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50974: LD_ADDR_VAR 0 3
50978: PUSH
50979: LD_VAR 0 1
50983: PPUSH
50984: LD_VAR 0 1
50988: PUSH
50989: LD_INT 1
50991: PLUS
50992: PPUSH
50993: LD_VAR 0 2
50997: PPUSH
50998: CALL_OW 1
51002: ST_TO_ADDR
// end ;
51003: LD_VAR 0 3
51007: RET
// export function JoinUnion ( array , element ) ; begin
51008: LD_INT 0
51010: PPUSH
// result := array union element ;
51011: LD_ADDR_VAR 0 3
51015: PUSH
51016: LD_VAR 0 1
51020: PUSH
51021: LD_VAR 0 2
51025: UNION
51026: ST_TO_ADDR
// end ;
51027: LD_VAR 0 3
51031: RET
// export function GetBehemoths ( side ) ; begin
51032: LD_INT 0
51034: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
51035: LD_ADDR_VAR 0 2
51039: PUSH
51040: LD_INT 22
51042: PUSH
51043: LD_VAR 0 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 31
51054: PUSH
51055: LD_INT 25
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PPUSH
51066: CALL_OW 69
51070: ST_TO_ADDR
// end ;
51071: LD_VAR 0 2
51075: RET
// export function Shuffle ( array ) ; var i , index ; begin
51076: LD_INT 0
51078: PPUSH
51079: PPUSH
51080: PPUSH
// result := [ ] ;
51081: LD_ADDR_VAR 0 2
51085: PUSH
51086: EMPTY
51087: ST_TO_ADDR
// if not array then
51088: LD_VAR 0 1
51092: NOT
51093: IFFALSE 51097
// exit ;
51095: GO 51196
// Randomize ;
51097: CALL_OW 10
// for i = array downto 1 do
51101: LD_ADDR_VAR 0 3
51105: PUSH
51106: DOUBLE
51107: LD_VAR 0 1
51111: INC
51112: ST_TO_ADDR
51113: LD_INT 1
51115: PUSH
51116: FOR_DOWNTO
51117: IFFALSE 51194
// begin index := rand ( 1 , array ) ;
51119: LD_ADDR_VAR 0 4
51123: PUSH
51124: LD_INT 1
51126: PPUSH
51127: LD_VAR 0 1
51131: PPUSH
51132: CALL_OW 12
51136: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51137: LD_ADDR_VAR 0 2
51141: PUSH
51142: LD_VAR 0 2
51146: PPUSH
51147: LD_VAR 0 2
51151: PUSH
51152: LD_INT 1
51154: PLUS
51155: PPUSH
51156: LD_VAR 0 1
51160: PUSH
51161: LD_VAR 0 4
51165: ARRAY
51166: PPUSH
51167: CALL_OW 2
51171: ST_TO_ADDR
// array := Delete ( array , index ) ;
51172: LD_ADDR_VAR 0 1
51176: PUSH
51177: LD_VAR 0 1
51181: PPUSH
51182: LD_VAR 0 4
51186: PPUSH
51187: CALL_OW 3
51191: ST_TO_ADDR
// end ;
51192: GO 51116
51194: POP
51195: POP
// end ;
51196: LD_VAR 0 2
51200: RET
// export function GetBaseMaterials ( base ) ; begin
51201: LD_INT 0
51203: PPUSH
// result := [ 0 , 0 , 0 ] ;
51204: LD_ADDR_VAR 0 2
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: LIST
51222: ST_TO_ADDR
// if not base then
51223: LD_VAR 0 1
51227: NOT
51228: IFFALSE 51232
// exit ;
51230: GO 51281
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
51232: LD_ADDR_VAR 0 2
51236: PUSH
51237: LD_VAR 0 1
51241: PPUSH
51242: LD_INT 1
51244: PPUSH
51245: CALL_OW 275
51249: PUSH
51250: LD_VAR 0 1
51254: PPUSH
51255: LD_INT 2
51257: PPUSH
51258: CALL_OW 275
51262: PUSH
51263: LD_VAR 0 1
51267: PPUSH
51268: LD_INT 3
51270: PPUSH
51271: CALL_OW 275
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: LIST
51280: ST_TO_ADDR
// end ;
51281: LD_VAR 0 2
51285: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
51286: LD_INT 0
51288: PPUSH
51289: PPUSH
// result := array ;
51290: LD_ADDR_VAR 0 3
51294: PUSH
51295: LD_VAR 0 1
51299: ST_TO_ADDR
// if size > 0 then
51300: LD_VAR 0 2
51304: PUSH
51305: LD_INT 0
51307: GREATER
51308: IFFALSE 51354
// for i := array downto size do
51310: LD_ADDR_VAR 0 4
51314: PUSH
51315: DOUBLE
51316: LD_VAR 0 1
51320: INC
51321: ST_TO_ADDR
51322: LD_VAR 0 2
51326: PUSH
51327: FOR_DOWNTO
51328: IFFALSE 51352
// result := Delete ( result , result ) ;
51330: LD_ADDR_VAR 0 3
51334: PUSH
51335: LD_VAR 0 3
51339: PPUSH
51340: LD_VAR 0 3
51344: PPUSH
51345: CALL_OW 3
51349: ST_TO_ADDR
51350: GO 51327
51352: POP
51353: POP
// end ;
51354: LD_VAR 0 3
51358: RET
// export function ComExit ( unit ) ; var tmp ; begin
51359: LD_INT 0
51361: PPUSH
51362: PPUSH
// if not IsInUnit ( unit ) then
51363: LD_VAR 0 1
51367: PPUSH
51368: CALL_OW 310
51372: NOT
51373: IFFALSE 51377
// exit ;
51375: GO 51437
// tmp := IsInUnit ( unit ) ;
51377: LD_ADDR_VAR 0 3
51381: PUSH
51382: LD_VAR 0 1
51386: PPUSH
51387: CALL_OW 310
51391: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
51392: LD_VAR 0 3
51396: PPUSH
51397: CALL_OW 247
51401: PUSH
51402: LD_INT 2
51404: EQUAL
51405: IFFALSE 51418
// ComExitVehicle ( unit ) else
51407: LD_VAR 0 1
51411: PPUSH
51412: CALL_OW 121
51416: GO 51427
// ComExitBuilding ( unit ) ;
51418: LD_VAR 0 1
51422: PPUSH
51423: CALL_OW 122
// result := tmp ;
51427: LD_ADDR_VAR 0 2
51431: PUSH
51432: LD_VAR 0 3
51436: ST_TO_ADDR
// end ;
51437: LD_VAR 0 2
51441: RET
// export function ResetHc ; begin
51442: LD_INT 0
51444: PPUSH
// InitHc ;
51445: CALL_OW 19
// hc_importance := 0 ;
51449: LD_ADDR_OWVAR 32
51453: PUSH
51454: LD_INT 0
51456: ST_TO_ADDR
// end ;
51457: LD_VAR 0 1
51461: RET
