// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_EXP 15
  25: EQUAL
  26: IFFALSE 98
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  28: LD_INT 68
  30: PPUSH
  31: LD_VAR 0 1
  35: PPUSH
  36: CALL_OW 255
  40: PPUSH
  41: CALL_OW 321
  45: PUSH
  46: LD_INT 2
  48: EQUAL
  49: IFFALSE 61
// eff := 70 else
  51: LD_ADDR_VAR 0 4
  55: PUSH
  56: LD_INT 70
  58: ST_TO_ADDR
  59: GO 69
// eff := 30 ;
  61: LD_ADDR_VAR 0 4
  65: PUSH
  66: LD_INT 30
  68: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  69: LD_VAR 0 1
  73: PPUSH
  74: CALL_OW 250
  78: PPUSH
  79: LD_VAR 0 1
  83: PPUSH
  84: CALL_OW 251
  88: PPUSH
  89: LD_VAR 0 4
  93: PPUSH
  94: CALL_OW 495
// end ; end ;
  98: LD_VAR 0 2
 102: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 103: LD_INT 0
 105: PPUSH
// end ;
 106: LD_VAR 0 4
 110: RET
// export function SOS_Command ( cmd ) ; begin
 111: LD_INT 0
 113: PPUSH
// end ;
 114: LD_VAR 0 2
 118: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 119: LD_INT 0
 121: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 122: LD_VAR 0 1
 126: PUSH
 127: LD_INT 250
 129: EQUAL
 130: PUSH
 131: LD_VAR 0 2
 135: PPUSH
 136: CALL_OW 264
 140: PUSH
 141: LD_EXP 18
 145: EQUAL
 146: AND
 147: IFFALSE 168
// MinerPlaceMine ( unit , x , y ) ;
 149: LD_VAR 0 2
 153: PPUSH
 154: LD_VAR 0 4
 158: PPUSH
 159: LD_VAR 0 5
 163: PPUSH
 164: CALL 2509 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 168: LD_VAR 0 1
 172: PUSH
 173: LD_INT 251
 175: EQUAL
 176: PUSH
 177: LD_VAR 0 2
 181: PPUSH
 182: CALL_OW 264
 186: PUSH
 187: LD_EXP 18
 191: EQUAL
 192: AND
 193: IFFALSE 214
// MinerDetonateMine ( unit , x , y ) ;
 195: LD_VAR 0 2
 199: PPUSH
 200: LD_VAR 0 4
 204: PPUSH
 205: LD_VAR 0 5
 209: PPUSH
 210: CALL 2786 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 214: LD_VAR 0 1
 218: PUSH
 219: LD_INT 252
 221: EQUAL
 222: PUSH
 223: LD_VAR 0 2
 227: PPUSH
 228: CALL_OW 264
 232: PUSH
 233: LD_EXP 18
 237: EQUAL
 238: AND
 239: IFFALSE 260
// MinerCreateMinefield ( unit , x , y ) ;
 241: LD_VAR 0 2
 245: PPUSH
 246: LD_VAR 0 4
 250: PPUSH
 251: LD_VAR 0 5
 255: PPUSH
 256: CALL 3203 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 260: LD_VAR 0 1
 264: PUSH
 265: LD_INT 253
 267: EQUAL
 268: PUSH
 269: LD_VAR 0 2
 273: PPUSH
 274: CALL_OW 257
 278: PUSH
 279: LD_INT 5
 281: EQUAL
 282: AND
 283: IFFALSE 304
// ComBinocular ( unit , x , y ) ;
 285: LD_VAR 0 2
 289: PPUSH
 290: LD_VAR 0 4
 294: PPUSH
 295: LD_VAR 0 5
 299: PPUSH
 300: CALL 3574 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 304: LD_VAR 0 1
 308: PUSH
 309: LD_INT 254
 311: EQUAL
 312: PUSH
 313: LD_VAR 0 2
 317: PPUSH
 318: CALL_OW 264
 322: PUSH
 323: LD_EXP 13
 327: EQUAL
 328: AND
 329: PUSH
 330: LD_VAR 0 3
 334: PPUSH
 335: CALL_OW 263
 339: PUSH
 340: LD_INT 3
 342: EQUAL
 343: AND
 344: IFFALSE 360
// HackDestroyVehicle ( unit , selectedUnit ) ;
 346: LD_VAR 0 2
 350: PPUSH
 351: LD_VAR 0 3
 355: PPUSH
 356: CALL 1869 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 360: LD_VAR 0 1
 364: PUSH
 365: LD_INT 255
 367: EQUAL
 368: PUSH
 369: LD_VAR 0 2
 373: PPUSH
 374: CALL_OW 264
 378: PUSH
 379: LD_INT 14
 381: PUSH
 382: LD_INT 53
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: IN
 389: AND
 390: PUSH
 391: LD_VAR 0 4
 395: PPUSH
 396: LD_VAR 0 5
 400: PPUSH
 401: CALL_OW 488
 405: AND
 406: IFFALSE 430
// CutTreeXYR ( unit , x , y , 12 ) ;
 408: LD_VAR 0 2
 412: PPUSH
 413: LD_VAR 0 4
 417: PPUSH
 418: LD_VAR 0 5
 422: PPUSH
 423: LD_INT 12
 425: PPUSH
 426: CALL 435 0 4
// end ;
 430: LD_VAR 0 6
 434: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
 435: LD_INT 0
 437: PPUSH
 438: PPUSH
 439: PPUSH
 440: PPUSH
 441: PPUSH
 442: PPUSH
 443: PPUSH
 444: PPUSH
 445: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
 446: LD_VAR 0 1
 450: NOT
 451: PUSH
 452: LD_VAR 0 2
 456: PPUSH
 457: LD_VAR 0 3
 461: PPUSH
 462: CALL_OW 488
 466: NOT
 467: OR
 468: PUSH
 469: LD_VAR 0 4
 473: NOT
 474: OR
 475: IFFALSE 479
// exit ;
 477: GO 819
// list := [ ] ;
 479: LD_ADDR_VAR 0 13
 483: PUSH
 484: EMPTY
 485: ST_TO_ADDR
// if x - r < 0 then
 486: LD_VAR 0 2
 490: PUSH
 491: LD_VAR 0 4
 495: MINUS
 496: PUSH
 497: LD_INT 0
 499: LESS
 500: IFFALSE 512
// min_x := 0 else
 502: LD_ADDR_VAR 0 7
 506: PUSH
 507: LD_INT 0
 509: ST_TO_ADDR
 510: GO 528
// min_x := x - r ;
 512: LD_ADDR_VAR 0 7
 516: PUSH
 517: LD_VAR 0 2
 521: PUSH
 522: LD_VAR 0 4
 526: MINUS
 527: ST_TO_ADDR
// if y - r < 0 then
 528: LD_VAR 0 3
 532: PUSH
 533: LD_VAR 0 4
 537: MINUS
 538: PUSH
 539: LD_INT 0
 541: LESS
 542: IFFALSE 554
// min_y := 0 else
 544: LD_ADDR_VAR 0 8
 548: PUSH
 549: LD_INT 0
 551: ST_TO_ADDR
 552: GO 570
// min_y := y - r ;
 554: LD_ADDR_VAR 0 8
 558: PUSH
 559: LD_VAR 0 3
 563: PUSH
 564: LD_VAR 0 4
 568: MINUS
 569: ST_TO_ADDR
// max_x := x + r ;
 570: LD_ADDR_VAR 0 9
 574: PUSH
 575: LD_VAR 0 2
 579: PUSH
 580: LD_VAR 0 4
 584: PLUS
 585: ST_TO_ADDR
// max_y := y + r ;
 586: LD_ADDR_VAR 0 10
 590: PUSH
 591: LD_VAR 0 3
 595: PUSH
 596: LD_VAR 0 4
 600: PLUS
 601: ST_TO_ADDR
// for _x = min_x to max_x do
 602: LD_ADDR_VAR 0 11
 606: PUSH
 607: DOUBLE
 608: LD_VAR 0 7
 612: DEC
 613: ST_TO_ADDR
 614: LD_VAR 0 9
 618: PUSH
 619: FOR_TO
 620: IFFALSE 737
// for _y = min_y to max_y do
 622: LD_ADDR_VAR 0 12
 626: PUSH
 627: DOUBLE
 628: LD_VAR 0 8
 632: DEC
 633: ST_TO_ADDR
 634: LD_VAR 0 10
 638: PUSH
 639: FOR_TO
 640: IFFALSE 733
// begin if not ValidHex ( _x , _y ) then
 642: LD_VAR 0 11
 646: PPUSH
 647: LD_VAR 0 12
 651: PPUSH
 652: CALL_OW 488
 656: NOT
 657: IFFALSE 661
// continue ;
 659: GO 639
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
 661: LD_VAR 0 11
 665: PPUSH
 666: LD_VAR 0 12
 670: PPUSH
 671: CALL_OW 351
 675: PUSH
 676: LD_VAR 0 11
 680: PPUSH
 681: LD_VAR 0 12
 685: PPUSH
 686: CALL_OW 554
 690: AND
 691: IFFALSE 731
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
 693: LD_ADDR_VAR 0 13
 697: PUSH
 698: LD_VAR 0 13
 702: PPUSH
 703: LD_VAR 0 13
 707: PUSH
 708: LD_INT 1
 710: PLUS
 711: PPUSH
 712: LD_VAR 0 11
 716: PUSH
 717: LD_VAR 0 12
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PPUSH
 726: CALL_OW 2
 730: ST_TO_ADDR
// end ;
 731: GO 639
 733: POP
 734: POP
 735: GO 619
 737: POP
 738: POP
// if not list then
 739: LD_VAR 0 13
 743: NOT
 744: IFFALSE 748
// exit ;
 746: GO 819
// for i in list do
 748: LD_ADDR_VAR 0 6
 752: PUSH
 753: LD_VAR 0 13
 757: PUSH
 758: FOR_IN
 759: IFFALSE 817
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
 761: LD_VAR 0 1
 765: PPUSH
 766: LD_STRING M
 768: PUSH
 769: LD_VAR 0 6
 773: PUSH
 774: LD_INT 1
 776: ARRAY
 777: PUSH
 778: LD_VAR 0 6
 782: PUSH
 783: LD_INT 2
 785: ARRAY
 786: PUSH
 787: LD_INT 0
 789: PUSH
 790: LD_INT 0
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: LD_INT 0
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: PUSH
 808: EMPTY
 809: LIST
 810: PPUSH
 811: CALL_OW 447
 815: GO 758
 817: POP
 818: POP
// end ;
 819: LD_VAR 0 5
 823: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
 824: LD_EXP 1
 828: NOT
 829: IFFALSE 879
 831: GO 833
 833: DISABLE
// begin initHack := true ;
 834: LD_ADDR_EXP 1
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// hackTanks := [ ] ;
 842: LD_ADDR_EXP 2
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// hackLimit := 3 ;
 856: LD_ADDR_EXP 4
 860: PUSH
 861: LD_INT 3
 863: ST_TO_ADDR
// hackDist := 12 ;
 864: LD_ADDR_EXP 5
 868: PUSH
 869: LD_INT 12
 871: ST_TO_ADDR
// hackCounter := [ ] ;
 872: LD_ADDR_EXP 6
 876: PUSH
 877: EMPTY
 878: ST_TO_ADDR
// end ;
 879: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
 880: LD_EXP 1
 884: PUSH
 885: LD_INT 34
 887: PUSH
 888: LD_EXP 13
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PPUSH
 897: CALL_OW 69
 901: AND
 902: IFFALSE 1157
 904: GO 906
 906: DISABLE
 907: LD_INT 0
 909: PPUSH
 910: PPUSH
// begin enable ;
 911: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
 912: LD_ADDR_VAR 0 1
 916: PUSH
 917: LD_INT 34
 919: PUSH
 920: LD_EXP 13
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PPUSH
 929: CALL_OW 69
 933: PUSH
 934: FOR_IN
 935: IFFALSE 1155
// begin if not i in hackTanks then
 937: LD_VAR 0 1
 941: PUSH
 942: LD_EXP 2
 946: IN
 947: NOT
 948: IFFALSE 1031
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
 950: LD_ADDR_EXP 2
 954: PUSH
 955: LD_EXP 2
 959: PPUSH
 960: LD_EXP 2
 964: PUSH
 965: LD_INT 1
 967: PLUS
 968: PPUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: CALL_OW 1
 978: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
 979: LD_ADDR_EXP 3
 983: PUSH
 984: LD_EXP 3
 988: PPUSH
 989: LD_EXP 3
 993: PUSH
 994: LD_INT 1
 996: PLUS
 997: PPUSH
 998: EMPTY
 999: PPUSH
1000: CALL_OW 1
1004: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1005: LD_ADDR_EXP 6
1009: PUSH
1010: LD_EXP 6
1014: PPUSH
1015: LD_EXP 6
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: PPUSH
1024: EMPTY
1025: PPUSH
1026: CALL_OW 1
1030: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1031: LD_VAR 0 1
1035: PPUSH
1036: CALL_OW 302
1040: NOT
1041: IFFALSE 1054
// begin HackUnlinkAll ( i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: CALL 1160 0 1
// continue ;
1052: GO 934
// end ; HackCheckCapturedStatus ( i ) ;
1054: LD_VAR 0 1
1058: PPUSH
1059: CALL 1603 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1063: LD_ADDR_VAR 0 2
1067: PUSH
1068: LD_INT 81
1070: PUSH
1071: LD_VAR 0 1
1075: PPUSH
1076: CALL_OW 255
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: PUSH
1085: LD_INT 33
1087: PUSH
1088: LD_INT 3
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PUSH
1095: LD_INT 91
1097: PUSH
1098: LD_VAR 0 1
1102: PUSH
1103: LD_EXP 5
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 50
1115: PUSH
1116: EMPTY
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PPUSH
1125: CALL_OW 69
1129: ST_TO_ADDR
// if not tmp then
1130: LD_VAR 0 2
1134: NOT
1135: IFFALSE 1139
// continue ;
1137: GO 934
// HackLink ( i , tmp ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_VAR 0 2
1148: PPUSH
1149: CALL 1296 0 2
// end ;
1153: GO 934
1155: POP
1156: POP
// end ;
1157: PPOPN 2
1159: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1160: LD_INT 0
1162: PPUSH
1163: PPUSH
1164: PPUSH
// if not hack in hackTanks then
1165: LD_VAR 0 1
1169: PUSH
1170: LD_EXP 2
1174: IN
1175: NOT
1176: IFFALSE 1180
// exit ;
1178: GO 1291
// index := GetElementIndex ( hackTanks , hack ) ;
1180: LD_ADDR_VAR 0 4
1184: PUSH
1185: LD_EXP 2
1189: PPUSH
1190: LD_VAR 0 1
1194: PPUSH
1195: CALL 22036 0 2
1199: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1200: LD_EXP 3
1204: PUSH
1205: LD_VAR 0 4
1209: ARRAY
1210: IFFALSE 1291
// begin for i in hackTanksCaptured [ index ] do
1212: LD_ADDR_VAR 0 3
1216: PUSH
1217: LD_EXP 3
1221: PUSH
1222: LD_VAR 0 4
1226: ARRAY
1227: PUSH
1228: FOR_IN
1229: IFFALSE 1255
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1231: LD_VAR 0 3
1235: PUSH
1236: LD_INT 1
1238: ARRAY
1239: PPUSH
1240: LD_VAR 0 3
1244: PUSH
1245: LD_INT 2
1247: ARRAY
1248: PPUSH
1249: CALL_OW 235
1253: GO 1228
1255: POP
1256: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1257: LD_ADDR_EXP 3
1261: PUSH
1262: LD_EXP 3
1266: PPUSH
1267: LD_VAR 0 4
1271: PPUSH
1272: EMPTY
1273: PPUSH
1274: CALL_OW 1
1278: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1279: LD_VAR 0 1
1283: PPUSH
1284: LD_INT 0
1286: PPUSH
1287: CALL_OW 505
// end ; end ;
1291: LD_VAR 0 2
1295: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1296: LD_INT 0
1298: PPUSH
1299: PPUSH
1300: PPUSH
// if not hack in hackTanks or not vehicles then
1301: LD_VAR 0 1
1305: PUSH
1306: LD_EXP 2
1310: IN
1311: NOT
1312: PUSH
1313: LD_VAR 0 2
1317: NOT
1318: OR
1319: IFFALSE 1323
// exit ;
1321: GO 1598
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: LD_VAR 0 1
1332: PPUSH
1333: LD_VAR 0 2
1337: PPUSH
1338: LD_INT 1
1340: PPUSH
1341: LD_INT 1
1343: PPUSH
1344: CALL 22686 0 4
1348: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
1349: LD_ADDR_VAR 0 5
1353: PUSH
1354: LD_EXP 2
1358: PPUSH
1359: LD_VAR 0 1
1363: PPUSH
1364: CALL 22036 0 2
1368: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
1369: LD_EXP 3
1373: PUSH
1374: LD_VAR 0 5
1378: ARRAY
1379: PUSH
1380: LD_EXP 4
1384: LESS
1385: IFFALSE 1574
// begin for i := 1 to vehicles do
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: DOUBLE
1393: LD_INT 1
1395: DEC
1396: ST_TO_ADDR
1397: LD_VAR 0 2
1401: PUSH
1402: FOR_TO
1403: IFFALSE 1572
// begin if hackTanksCaptured [ index ] = hackLimit then
1405: LD_EXP 3
1409: PUSH
1410: LD_VAR 0 5
1414: ARRAY
1415: PUSH
1416: LD_EXP 4
1420: EQUAL
1421: IFFALSE 1425
// break ;
1423: GO 1572
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
1425: LD_ADDR_EXP 6
1429: PUSH
1430: LD_EXP 6
1434: PPUSH
1435: LD_VAR 0 5
1439: PPUSH
1440: LD_EXP 6
1444: PUSH
1445: LD_VAR 0 5
1449: ARRAY
1450: PUSH
1451: LD_INT 1
1453: PLUS
1454: PPUSH
1455: CALL_OW 1
1459: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
1460: LD_ADDR_EXP 3
1464: PUSH
1465: LD_EXP 3
1469: PPUSH
1470: LD_VAR 0 5
1474: PUSH
1475: LD_EXP 3
1479: PUSH
1480: LD_VAR 0 5
1484: ARRAY
1485: PUSH
1486: LD_INT 1
1488: PLUS
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PPUSH
1494: LD_VAR 0 2
1498: PUSH
1499: LD_VAR 0 4
1503: ARRAY
1504: PUSH
1505: LD_VAR 0 2
1509: PUSH
1510: LD_VAR 0 4
1514: ARRAY
1515: PPUSH
1516: CALL_OW 255
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PPUSH
1525: CALL 22251 0 3
1529: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
1530: LD_VAR 0 2
1534: PUSH
1535: LD_VAR 0 4
1539: ARRAY
1540: PPUSH
1541: LD_VAR 0 1
1545: PPUSH
1546: CALL_OW 255
1550: PPUSH
1551: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
1555: LD_VAR 0 2
1559: PUSH
1560: LD_VAR 0 4
1564: ARRAY
1565: PPUSH
1566: CALL_OW 141
// end ;
1570: GO 1402
1572: POP
1573: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1574: LD_VAR 0 1
1578: PPUSH
1579: LD_EXP 3
1583: PUSH
1584: LD_VAR 0 5
1588: ARRAY
1589: PUSH
1590: LD_INT 0
1592: PLUS
1593: PPUSH
1594: CALL_OW 505
// end ;
1598: LD_VAR 0 3
1602: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
1603: LD_INT 0
1605: PPUSH
1606: PPUSH
1607: PPUSH
1608: PPUSH
// if not hack in hackTanks then
1609: LD_VAR 0 1
1613: PUSH
1614: LD_EXP 2
1618: IN
1619: NOT
1620: IFFALSE 1624
// exit ;
1622: GO 1864
// index := GetElementIndex ( hackTanks , hack ) ;
1624: LD_ADDR_VAR 0 4
1628: PUSH
1629: LD_EXP 2
1633: PPUSH
1634: LD_VAR 0 1
1638: PPUSH
1639: CALL 22036 0 2
1643: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
1644: LD_ADDR_VAR 0 3
1648: PUSH
1649: DOUBLE
1650: LD_EXP 3
1654: PUSH
1655: LD_VAR 0 4
1659: ARRAY
1660: INC
1661: ST_TO_ADDR
1662: LD_INT 1
1664: PUSH
1665: FOR_DOWNTO
1666: IFFALSE 1838
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
1668: LD_ADDR_VAR 0 5
1672: PUSH
1673: LD_EXP 3
1677: PUSH
1678: LD_VAR 0 4
1682: ARRAY
1683: PUSH
1684: LD_VAR 0 3
1688: ARRAY
1689: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
1690: LD_VAR 0 5
1694: PUSH
1695: LD_INT 1
1697: ARRAY
1698: PPUSH
1699: CALL_OW 302
1703: NOT
1704: PUSH
1705: LD_VAR 0 5
1709: PUSH
1710: LD_INT 1
1712: ARRAY
1713: PPUSH
1714: CALL_OW 255
1718: PUSH
1719: LD_VAR 0 1
1723: PPUSH
1724: CALL_OW 255
1728: NONEQUAL
1729: OR
1730: IFFALSE 1836
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
1732: LD_VAR 0 5
1736: PUSH
1737: LD_INT 1
1739: ARRAY
1740: PPUSH
1741: CALL_OW 305
1745: PUSH
1746: LD_VAR 0 5
1750: PUSH
1751: LD_INT 1
1753: ARRAY
1754: PPUSH
1755: CALL_OW 255
1759: PUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: CALL_OW 255
1769: EQUAL
1770: AND
1771: IFFALSE 1795
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
1773: LD_VAR 0 5
1777: PUSH
1778: LD_INT 1
1780: ARRAY
1781: PPUSH
1782: LD_VAR 0 5
1786: PUSH
1787: LD_INT 2
1789: ARRAY
1790: PPUSH
1791: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
1795: LD_ADDR_EXP 3
1799: PUSH
1800: LD_EXP 3
1804: PPUSH
1805: LD_VAR 0 4
1809: PPUSH
1810: LD_EXP 3
1814: PUSH
1815: LD_VAR 0 4
1819: ARRAY
1820: PPUSH
1821: LD_VAR 0 3
1825: PPUSH
1826: CALL_OW 3
1830: PPUSH
1831: CALL_OW 1
1835: ST_TO_ADDR
// end ; end ;
1836: GO 1665
1838: POP
1839: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
1840: LD_VAR 0 1
1844: PPUSH
1845: LD_EXP 3
1849: PUSH
1850: LD_VAR 0 4
1854: ARRAY
1855: PUSH
1856: LD_INT 0
1858: PLUS
1859: PPUSH
1860: CALL_OW 505
// end ;
1864: LD_VAR 0 2
1868: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
1869: LD_INT 0
1871: PPUSH
1872: PPUSH
1873: PPUSH
1874: PPUSH
// if not hack in hackTanks then
1875: LD_VAR 0 1
1879: PUSH
1880: LD_EXP 2
1884: IN
1885: NOT
1886: IFFALSE 1890
// exit ;
1888: GO 1975
// index := GetElementIndex ( hackTanks , hack ) ;
1890: LD_ADDR_VAR 0 5
1894: PUSH
1895: LD_EXP 2
1899: PPUSH
1900: LD_VAR 0 1
1904: PPUSH
1905: CALL 22036 0 2
1909: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
1910: LD_ADDR_VAR 0 4
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_EXP 3
1924: PUSH
1925: LD_VAR 0 5
1929: ARRAY
1930: PUSH
1931: FOR_TO
1932: IFFALSE 1973
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
1934: LD_EXP 3
1938: PUSH
1939: LD_VAR 0 5
1943: ARRAY
1944: PUSH
1945: LD_VAR 0 4
1949: ARRAY
1950: PUSH
1951: LD_INT 1
1953: ARRAY
1954: PUSH
1955: LD_VAR 0 2
1959: EQUAL
1960: IFFALSE 1971
// KillUnit ( vehicle ) ;
1962: LD_VAR 0 2
1966: PPUSH
1967: CALL_OW 66
1971: GO 1931
1973: POP
1974: POP
// end ;
1975: LD_VAR 0 3
1979: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
1980: LD_EXP 7
1984: NOT
1985: IFFALSE 2020
1987: GO 1989
1989: DISABLE
// begin initMiner := true ;
1990: LD_ADDR_EXP 7
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// minersList := [ ] ;
1998: LD_ADDR_EXP 8
2002: PUSH
2003: EMPTY
2004: ST_TO_ADDR
// minerMinesList := [ ] ;
2005: LD_ADDR_EXP 9
2009: PUSH
2010: EMPTY
2011: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2012: LD_ADDR_EXP 10
2016: PUSH
2017: LD_INT 5
2019: ST_TO_ADDR
// end ;
2020: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2021: LD_EXP 7
2025: PUSH
2026: LD_INT 34
2028: PUSH
2029: LD_EXP 18
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL_OW 69
2042: AND
2043: IFFALSE 2506
2045: GO 2047
2047: DISABLE
2048: LD_INT 0
2050: PPUSH
2051: PPUSH
2052: PPUSH
2053: PPUSH
// begin enable ;
2054: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2055: LD_ADDR_VAR 0 1
2059: PUSH
2060: LD_INT 34
2062: PUSH
2063: LD_EXP 18
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PPUSH
2072: CALL_OW 69
2076: PUSH
2077: FOR_IN
2078: IFFALSE 2150
// begin if not i in minersList then
2080: LD_VAR 0 1
2084: PUSH
2085: LD_EXP 8
2089: IN
2090: NOT
2091: IFFALSE 2148
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2093: LD_ADDR_EXP 8
2097: PUSH
2098: LD_EXP 8
2102: PPUSH
2103: LD_EXP 8
2107: PUSH
2108: LD_INT 1
2110: PLUS
2111: PPUSH
2112: LD_VAR 0 1
2116: PPUSH
2117: CALL_OW 1
2121: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2122: LD_ADDR_EXP 9
2126: PUSH
2127: LD_EXP 9
2131: PPUSH
2132: LD_EXP 9
2136: PUSH
2137: LD_INT 1
2139: PLUS
2140: PPUSH
2141: EMPTY
2142: PPUSH
2143: CALL_OW 1
2147: ST_TO_ADDR
// end end ;
2148: GO 2077
2150: POP
2151: POP
// for i := minerMinesList downto 1 do
2152: LD_ADDR_VAR 0 1
2156: PUSH
2157: DOUBLE
2158: LD_EXP 9
2162: INC
2163: ST_TO_ADDR
2164: LD_INT 1
2166: PUSH
2167: FOR_DOWNTO
2168: IFFALSE 2504
// begin if IsLive ( minersList [ i ] ) then
2170: LD_EXP 8
2174: PUSH
2175: LD_VAR 0 1
2179: ARRAY
2180: PPUSH
2181: CALL_OW 300
2185: IFFALSE 2213
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2187: LD_EXP 8
2191: PUSH
2192: LD_VAR 0 1
2196: ARRAY
2197: PPUSH
2198: LD_EXP 9
2202: PUSH
2203: LD_VAR 0 1
2207: ARRAY
2208: PPUSH
2209: CALL_OW 505
// if not minerMinesList [ i ] then
2213: LD_EXP 9
2217: PUSH
2218: LD_VAR 0 1
2222: ARRAY
2223: NOT
2224: IFFALSE 2228
// continue ;
2226: GO 2167
// for j := minerMinesList [ i ] downto 1 do
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: DOUBLE
2234: LD_EXP 9
2238: PUSH
2239: LD_VAR 0 1
2243: ARRAY
2244: INC
2245: ST_TO_ADDR
2246: LD_INT 1
2248: PUSH
2249: FOR_DOWNTO
2250: IFFALSE 2500
// begin side := GetSide ( minersList [ i ] ) ;
2252: LD_ADDR_VAR 0 3
2256: PUSH
2257: LD_EXP 8
2261: PUSH
2262: LD_VAR 0 1
2266: ARRAY
2267: PPUSH
2268: CALL_OW 255
2272: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2273: LD_ADDR_VAR 0 4
2277: PUSH
2278: LD_EXP 9
2282: PUSH
2283: LD_VAR 0 1
2287: ARRAY
2288: PUSH
2289: LD_VAR 0 2
2293: ARRAY
2294: PUSH
2295: LD_INT 1
2297: ARRAY
2298: PPUSH
2299: LD_EXP 9
2303: PUSH
2304: LD_VAR 0 1
2308: ARRAY
2309: PUSH
2310: LD_VAR 0 2
2314: ARRAY
2315: PUSH
2316: LD_INT 2
2318: ARRAY
2319: PPUSH
2320: CALL_OW 428
2324: ST_TO_ADDR
// if not tmp then
2325: LD_VAR 0 4
2329: NOT
2330: IFFALSE 2334
// continue ;
2332: GO 2249
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2334: LD_VAR 0 4
2338: PUSH
2339: LD_INT 81
2341: PUSH
2342: LD_VAR 0 3
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: PPUSH
2351: CALL_OW 69
2355: IN
2356: PUSH
2357: LD_EXP 9
2361: PUSH
2362: LD_VAR 0 1
2366: ARRAY
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 1
2376: ARRAY
2377: PPUSH
2378: LD_EXP 9
2382: PUSH
2383: LD_VAR 0 1
2387: ARRAY
2388: PUSH
2389: LD_VAR 0 2
2393: ARRAY
2394: PUSH
2395: LD_INT 2
2397: ARRAY
2398: PPUSH
2399: CALL_OW 458
2403: AND
2404: IFFALSE 2498
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
2406: LD_EXP 9
2410: PUSH
2411: LD_VAR 0 1
2415: ARRAY
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: PUSH
2423: LD_INT 1
2425: ARRAY
2426: PPUSH
2427: LD_EXP 9
2431: PUSH
2432: LD_VAR 0 1
2436: ARRAY
2437: PUSH
2438: LD_VAR 0 2
2442: ARRAY
2443: PUSH
2444: LD_INT 2
2446: ARRAY
2447: PPUSH
2448: LD_VAR 0 3
2452: PPUSH
2453: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
2457: LD_ADDR_EXP 9
2461: PUSH
2462: LD_EXP 9
2466: PPUSH
2467: LD_VAR 0 1
2471: PPUSH
2472: LD_EXP 9
2476: PUSH
2477: LD_VAR 0 1
2481: ARRAY
2482: PPUSH
2483: LD_VAR 0 2
2487: PPUSH
2488: CALL_OW 3
2492: PPUSH
2493: CALL_OW 1
2497: ST_TO_ADDR
// end ; end ;
2498: GO 2249
2500: POP
2501: POP
// end ;
2502: GO 2167
2504: POP
2505: POP
// end ;
2506: PPOPN 4
2508: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
2509: LD_INT 0
2511: PPUSH
2512: PPUSH
// result := false ;
2513: LD_ADDR_VAR 0 4
2517: PUSH
2518: LD_INT 0
2520: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
2521: LD_VAR 0 1
2525: PPUSH
2526: CALL_OW 264
2530: PUSH
2531: LD_EXP 18
2535: EQUAL
2536: NOT
2537: IFFALSE 2541
// exit ;
2539: GO 2781
// index := GetElementIndex ( minersList , unit ) ;
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_EXP 8
2550: PPUSH
2551: LD_VAR 0 1
2555: PPUSH
2556: CALL 22036 0 2
2560: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
2561: LD_EXP 9
2565: PUSH
2566: LD_VAR 0 5
2570: ARRAY
2571: PUSH
2572: LD_EXP 10
2576: GREATEREQUAL
2577: IFFALSE 2581
// exit ;
2579: GO 2781
// ComMoveXY ( unit , x , y ) ;
2581: LD_VAR 0 1
2585: PPUSH
2586: LD_VAR 0 2
2590: PPUSH
2591: LD_VAR 0 3
2595: PPUSH
2596: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2600: LD_INT 35
2602: PPUSH
2603: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
2607: LD_VAR 0 1
2611: PPUSH
2612: LD_VAR 0 2
2616: PPUSH
2617: LD_VAR 0 3
2621: PPUSH
2622: CALL 52100 0 3
2626: NOT
2627: PUSH
2628: LD_VAR 0 1
2632: PPUSH
2633: CALL_OW 314
2637: AND
2638: IFFALSE 2642
// exit ;
2640: GO 2781
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
2642: LD_VAR 0 2
2646: PPUSH
2647: LD_VAR 0 3
2651: PPUSH
2652: CALL_OW 428
2656: PUSH
2657: LD_VAR 0 1
2661: EQUAL
2662: PUSH
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL_OW 314
2672: NOT
2673: AND
2674: IFFALSE 2600
// PlaySoundXY ( x , y , PlantMine ) ;
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_VAR 0 3
2685: PPUSH
2686: LD_STRING PlantMine
2688: PPUSH
2689: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
2693: LD_VAR 0 2
2697: PPUSH
2698: LD_VAR 0 3
2702: PPUSH
2703: LD_VAR 0 1
2707: PPUSH
2708: CALL_OW 255
2712: PPUSH
2713: LD_INT 0
2715: PPUSH
2716: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
2720: LD_ADDR_EXP 9
2724: PUSH
2725: LD_EXP 9
2729: PPUSH
2730: LD_VAR 0 5
2734: PUSH
2735: LD_EXP 9
2739: PUSH
2740: LD_VAR 0 5
2744: ARRAY
2745: PUSH
2746: LD_INT 1
2748: PLUS
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PPUSH
2754: LD_VAR 0 2
2758: PUSH
2759: LD_VAR 0 3
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PPUSH
2768: CALL 22251 0 3
2772: ST_TO_ADDR
// result := true ;
2773: LD_ADDR_VAR 0 4
2777: PUSH
2778: LD_INT 1
2780: ST_TO_ADDR
// end ;
2781: LD_VAR 0 4
2785: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
2786: LD_INT 0
2788: PPUSH
2789: PPUSH
2790: PPUSH
// if not unit in minersList then
2791: LD_VAR 0 1
2795: PUSH
2796: LD_EXP 8
2800: IN
2801: NOT
2802: IFFALSE 2806
// exit ;
2804: GO 3198
// index := GetElementIndex ( minersList , unit ) ;
2806: LD_ADDR_VAR 0 6
2810: PUSH
2811: LD_EXP 8
2815: PPUSH
2816: LD_VAR 0 1
2820: PPUSH
2821: CALL 22036 0 2
2825: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
2826: LD_ADDR_VAR 0 5
2830: PUSH
2831: DOUBLE
2832: LD_EXP 9
2836: PUSH
2837: LD_VAR 0 6
2841: ARRAY
2842: INC
2843: ST_TO_ADDR
2844: LD_INT 1
2846: PUSH
2847: FOR_DOWNTO
2848: IFFALSE 3009
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
2850: LD_EXP 9
2854: PUSH
2855: LD_VAR 0 6
2859: ARRAY
2860: PUSH
2861: LD_VAR 0 5
2865: ARRAY
2866: PUSH
2867: LD_INT 1
2869: ARRAY
2870: PUSH
2871: LD_VAR 0 2
2875: EQUAL
2876: PUSH
2877: LD_EXP 9
2881: PUSH
2882: LD_VAR 0 6
2886: ARRAY
2887: PUSH
2888: LD_VAR 0 5
2892: ARRAY
2893: PUSH
2894: LD_INT 2
2896: ARRAY
2897: PUSH
2898: LD_VAR 0 3
2902: EQUAL
2903: AND
2904: IFFALSE 3007
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
2906: LD_EXP 9
2910: PUSH
2911: LD_VAR 0 6
2915: ARRAY
2916: PUSH
2917: LD_VAR 0 5
2921: ARRAY
2922: PUSH
2923: LD_INT 1
2925: ARRAY
2926: PPUSH
2927: LD_EXP 9
2931: PUSH
2932: LD_VAR 0 6
2936: ARRAY
2937: PUSH
2938: LD_VAR 0 5
2942: ARRAY
2943: PUSH
2944: LD_INT 2
2946: ARRAY
2947: PPUSH
2948: LD_VAR 0 1
2952: PPUSH
2953: CALL_OW 255
2957: PPUSH
2958: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
2962: LD_ADDR_EXP 9
2966: PUSH
2967: LD_EXP 9
2971: PPUSH
2972: LD_VAR 0 6
2976: PPUSH
2977: LD_EXP 9
2981: PUSH
2982: LD_VAR 0 6
2986: ARRAY
2987: PPUSH
2988: LD_VAR 0 5
2992: PPUSH
2993: CALL_OW 3
2997: PPUSH
2998: CALL_OW 1
3002: ST_TO_ADDR
// exit ;
3003: POP
3004: POP
3005: GO 3198
// end ; end ;
3007: GO 2847
3009: POP
3010: POP
// for i := minerMinesList [ index ] downto 1 do
3011: LD_ADDR_VAR 0 5
3015: PUSH
3016: DOUBLE
3017: LD_EXP 9
3021: PUSH
3022: LD_VAR 0 6
3026: ARRAY
3027: INC
3028: ST_TO_ADDR
3029: LD_INT 1
3031: PUSH
3032: FOR_DOWNTO
3033: IFFALSE 3196
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3035: LD_EXP 9
3039: PUSH
3040: LD_VAR 0 6
3044: ARRAY
3045: PUSH
3046: LD_VAR 0 5
3050: ARRAY
3051: PUSH
3052: LD_INT 1
3054: ARRAY
3055: PPUSH
3056: LD_EXP 9
3060: PUSH
3061: LD_VAR 0 6
3065: ARRAY
3066: PUSH
3067: LD_VAR 0 5
3071: ARRAY
3072: PUSH
3073: LD_INT 2
3075: ARRAY
3076: PPUSH
3077: LD_VAR 0 2
3081: PPUSH
3082: LD_VAR 0 3
3086: PPUSH
3087: CALL_OW 298
3091: PUSH
3092: LD_INT 6
3094: LESS
3095: IFFALSE 3194
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3097: LD_EXP 9
3101: PUSH
3102: LD_VAR 0 6
3106: ARRAY
3107: PUSH
3108: LD_VAR 0 5
3112: ARRAY
3113: PUSH
3114: LD_INT 1
3116: ARRAY
3117: PPUSH
3118: LD_EXP 9
3122: PUSH
3123: LD_VAR 0 6
3127: ARRAY
3128: PUSH
3129: LD_VAR 0 5
3133: ARRAY
3134: PUSH
3135: LD_INT 2
3137: ARRAY
3138: PPUSH
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 255
3148: PPUSH
3149: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3153: LD_ADDR_EXP 9
3157: PUSH
3158: LD_EXP 9
3162: PPUSH
3163: LD_VAR 0 6
3167: PPUSH
3168: LD_EXP 9
3172: PUSH
3173: LD_VAR 0 6
3177: ARRAY
3178: PPUSH
3179: LD_VAR 0 5
3183: PPUSH
3184: CALL_OW 3
3188: PPUSH
3189: CALL_OW 1
3193: ST_TO_ADDR
// end ; end ;
3194: GO 3032
3196: POP
3197: POP
// end ;
3198: LD_VAR 0 4
3202: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3203: LD_INT 0
3205: PPUSH
3206: PPUSH
3207: PPUSH
3208: PPUSH
3209: PPUSH
3210: PPUSH
3211: PPUSH
3212: PPUSH
3213: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 264
3223: PUSH
3224: LD_EXP 18
3228: EQUAL
3229: NOT
3230: PUSH
3231: LD_VAR 0 1
3235: PUSH
3236: LD_EXP 8
3240: IN
3241: NOT
3242: OR
3243: IFFALSE 3247
// exit ;
3245: GO 3569
// index := GetElementIndex ( minersList , unit ) ;
3247: LD_ADDR_VAR 0 6
3251: PUSH
3252: LD_EXP 8
3256: PPUSH
3257: LD_VAR 0 1
3261: PPUSH
3262: CALL 22036 0 2
3266: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3267: LD_ADDR_VAR 0 8
3271: PUSH
3272: LD_EXP 10
3276: PUSH
3277: LD_EXP 9
3281: PUSH
3282: LD_VAR 0 6
3286: ARRAY
3287: MINUS
3288: ST_TO_ADDR
// if not minesFreeAmount then
3289: LD_VAR 0 8
3293: NOT
3294: IFFALSE 3298
// exit ;
3296: GO 3569
// tmp := [ ] ;
3298: LD_ADDR_VAR 0 7
3302: PUSH
3303: EMPTY
3304: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3305: LD_ADDR_VAR 0 5
3309: PUSH
3310: DOUBLE
3311: LD_INT 1
3313: DEC
3314: ST_TO_ADDR
3315: LD_VAR 0 8
3319: PUSH
3320: FOR_TO
3321: IFFALSE 3516
// begin _d := rand ( 0 , 5 ) ;
3323: LD_ADDR_VAR 0 11
3327: PUSH
3328: LD_INT 0
3330: PPUSH
3331: LD_INT 5
3333: PPUSH
3334: CALL_OW 12
3338: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3339: LD_ADDR_VAR 0 12
3343: PUSH
3344: LD_INT 2
3346: PPUSH
3347: LD_INT 6
3349: PPUSH
3350: CALL_OW 12
3354: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
3355: LD_ADDR_VAR 0 9
3359: PUSH
3360: LD_VAR 0 2
3364: PPUSH
3365: LD_VAR 0 11
3369: PPUSH
3370: LD_VAR 0 12
3374: PPUSH
3375: CALL_OW 272
3379: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
3380: LD_ADDR_VAR 0 10
3384: PUSH
3385: LD_VAR 0 3
3389: PPUSH
3390: LD_VAR 0 11
3394: PPUSH
3395: LD_VAR 0 12
3399: PPUSH
3400: CALL_OW 273
3404: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
3405: LD_VAR 0 9
3409: PPUSH
3410: LD_VAR 0 10
3414: PPUSH
3415: CALL_OW 488
3419: PUSH
3420: LD_VAR 0 9
3424: PUSH
3425: LD_VAR 0 10
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: PUSH
3434: LD_VAR 0 7
3438: IN
3439: NOT
3440: AND
3441: PUSH
3442: LD_VAR 0 9
3446: PPUSH
3447: LD_VAR 0 10
3451: PPUSH
3452: CALL_OW 458
3456: NOT
3457: AND
3458: IFFALSE 3500
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
3460: LD_ADDR_VAR 0 7
3464: PUSH
3465: LD_VAR 0 7
3469: PPUSH
3470: LD_VAR 0 7
3474: PUSH
3475: LD_INT 1
3477: PLUS
3478: PPUSH
3479: LD_VAR 0 9
3483: PUSH
3484: LD_VAR 0 10
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PPUSH
3493: CALL_OW 1
3497: ST_TO_ADDR
3498: GO 3514
// i := i - 1 ;
3500: LD_ADDR_VAR 0 5
3504: PUSH
3505: LD_VAR 0 5
3509: PUSH
3510: LD_INT 1
3512: MINUS
3513: ST_TO_ADDR
// end ;
3514: GO 3320
3516: POP
3517: POP
// for i in tmp do
3518: LD_ADDR_VAR 0 5
3522: PUSH
3523: LD_VAR 0 7
3527: PUSH
3528: FOR_IN
3529: IFFALSE 3567
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
3531: LD_VAR 0 1
3535: PPUSH
3536: LD_VAR 0 5
3540: PUSH
3541: LD_INT 1
3543: ARRAY
3544: PPUSH
3545: LD_VAR 0 5
3549: PUSH
3550: LD_INT 2
3552: ARRAY
3553: PPUSH
3554: CALL 2509 0 3
3558: NOT
3559: IFFALSE 3565
// exit ;
3561: POP
3562: POP
3563: GO 3569
3565: GO 3528
3567: POP
3568: POP
// end ;
3569: LD_VAR 0 4
3573: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
3574: LD_INT 0
3576: PPUSH
3577: PPUSH
3578: PPUSH
3579: PPUSH
3580: PPUSH
3581: PPUSH
3582: PPUSH
// if not GetClass ( unit ) = class_sniper then
3583: LD_VAR 0 1
3587: PPUSH
3588: CALL_OW 257
3592: PUSH
3593: LD_INT 5
3595: EQUAL
3596: NOT
3597: IFFALSE 3601
// exit ;
3599: GO 3989
// dist := 8 ;
3601: LD_ADDR_VAR 0 5
3605: PUSH
3606: LD_INT 8
3608: ST_TO_ADDR
// viewRange := 12 ;
3609: LD_ADDR_VAR 0 7
3613: PUSH
3614: LD_INT 12
3616: ST_TO_ADDR
// side := GetSide ( unit ) ;
3617: LD_ADDR_VAR 0 6
3621: PUSH
3622: LD_VAR 0 1
3626: PPUSH
3627: CALL_OW 255
3631: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
3632: LD_INT 61
3634: PPUSH
3635: LD_VAR 0 6
3639: PPUSH
3640: CALL_OW 321
3644: PUSH
3645: LD_INT 2
3647: EQUAL
3648: IFFALSE 3658
// viewRange := 16 ;
3650: LD_ADDR_VAR 0 7
3654: PUSH
3655: LD_INT 16
3657: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
3658: LD_VAR 0 1
3662: PPUSH
3663: LD_VAR 0 2
3667: PPUSH
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 297
3677: PUSH
3678: LD_VAR 0 5
3682: GREATER
3683: IFFALSE 3762
// begin ComMoveXY ( unit , x , y ) ;
3685: LD_VAR 0 1
3689: PPUSH
3690: LD_VAR 0 2
3694: PPUSH
3695: LD_VAR 0 3
3699: PPUSH
3700: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3704: LD_INT 35
3706: PPUSH
3707: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
3711: LD_VAR 0 1
3715: PPUSH
3716: LD_VAR 0 2
3720: PPUSH
3721: LD_VAR 0 3
3725: PPUSH
3726: CALL 52100 0 3
3730: NOT
3731: IFFALSE 3735
// exit ;
3733: GO 3989
// until GetDistUnitXY ( unit , x , y ) < dist ;
3735: LD_VAR 0 1
3739: PPUSH
3740: LD_VAR 0 2
3744: PPUSH
3745: LD_VAR 0 3
3749: PPUSH
3750: CALL_OW 297
3754: PUSH
3755: LD_VAR 0 5
3759: LESS
3760: IFFALSE 3704
// end ; ComTurnXY ( unit , x , y ) ;
3762: LD_VAR 0 1
3766: PPUSH
3767: LD_VAR 0 2
3771: PPUSH
3772: LD_VAR 0 3
3776: PPUSH
3777: CALL_OW 118
// wait ( 5 ) ;
3781: LD_INT 5
3783: PPUSH
3784: CALL_OW 67
// _d := GetDir ( unit ) ;
3788: LD_ADDR_VAR 0 10
3792: PUSH
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 254
3802: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
3803: LD_ADDR_VAR 0 8
3807: PUSH
3808: LD_VAR 0 1
3812: PPUSH
3813: CALL_OW 250
3817: PPUSH
3818: LD_VAR 0 10
3822: PPUSH
3823: LD_VAR 0 5
3827: PPUSH
3828: CALL_OW 272
3832: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
3833: LD_ADDR_VAR 0 9
3837: PUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 251
3847: PPUSH
3848: LD_VAR 0 10
3852: PPUSH
3853: LD_VAR 0 5
3857: PPUSH
3858: CALL_OW 273
3862: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3863: LD_VAR 0 8
3867: PPUSH
3868: LD_VAR 0 9
3872: PPUSH
3873: CALL_OW 488
3877: NOT
3878: IFFALSE 3882
// exit ;
3880: GO 3989
// ComAnimCustom ( unit , 1 ) ;
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 1
3889: PPUSH
3890: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
3894: LD_VAR 0 8
3898: PPUSH
3899: LD_VAR 0 9
3903: PPUSH
3904: LD_VAR 0 6
3908: PPUSH
3909: LD_VAR 0 7
3913: PPUSH
3914: CALL_OW 330
// repeat wait ( 1 ) ;
3918: LD_INT 1
3920: PPUSH
3921: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
3925: LD_VAR 0 1
3929: PPUSH
3930: CALL_OW 316
3934: PUSH
3935: LD_VAR 0 1
3939: PPUSH
3940: CALL_OW 314
3944: OR
3945: PUSH
3946: LD_VAR 0 1
3950: PPUSH
3951: CALL_OW 302
3955: NOT
3956: OR
3957: PUSH
3958: LD_VAR 0 1
3962: PPUSH
3963: CALL_OW 301
3967: OR
3968: IFFALSE 3918
// RemoveSeeing ( _x , _y , side ) ;
3970: LD_VAR 0 8
3974: PPUSH
3975: LD_VAR 0 9
3979: PPUSH
3980: LD_VAR 0 6
3984: PPUSH
3985: CALL_OW 331
// end ; end_of_file
3989: LD_VAR 0 4
3993: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
3994: LD_INT 0
3996: PPUSH
// ar_miner := 81 ;
3997: LD_ADDR_EXP 18
4001: PUSH
4002: LD_INT 81
4004: ST_TO_ADDR
// ar_crane := 88 ;
4005: LD_ADDR_EXP 17
4009: PUSH
4010: LD_INT 88
4012: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4013: LD_ADDR_EXP 12
4017: PUSH
4018: LD_INT 89
4020: ST_TO_ADDR
// us_hack := 99 ;
4021: LD_ADDR_EXP 13
4025: PUSH
4026: LD_INT 99
4028: ST_TO_ADDR
// us_artillery := 97 ;
4029: LD_ADDR_EXP 14
4033: PUSH
4034: LD_INT 97
4036: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_INT 91
4044: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4045: LD_ADDR_EXP 16
4049: PUSH
4050: LD_INT 92
4052: ST_TO_ADDR
// ru_radar := 98 ;
4053: LD_ADDR_EXP 11
4057: PUSH
4058: LD_INT 98
4060: ST_TO_ADDR
// tech_Artillery := 80 ;
4061: LD_ADDR_EXP 19
4065: PUSH
4066: LD_INT 80
4068: ST_TO_ADDR
// tech_RadMat := 81 ;
4069: LD_ADDR_EXP 20
4073: PUSH
4074: LD_INT 81
4076: ST_TO_ADDR
// tech_BasicTools := 82 ;
4077: LD_ADDR_EXP 21
4081: PUSH
4082: LD_INT 82
4084: ST_TO_ADDR
// tech_Cargo := 83 ;
4085: LD_ADDR_EXP 22
4089: PUSH
4090: LD_INT 83
4092: ST_TO_ADDR
// tech_Track := 84 ;
4093: LD_ADDR_EXP 23
4097: PUSH
4098: LD_INT 84
4100: ST_TO_ADDR
// tech_Crane := 85 ;
4101: LD_ADDR_EXP 24
4105: PUSH
4106: LD_INT 85
4108: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4109: LD_ADDR_EXP 25
4113: PUSH
4114: LD_INT 86
4116: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4117: LD_ADDR_EXP 26
4121: PUSH
4122: LD_INT 87
4124: ST_TO_ADDR
// end ;
4125: LD_VAR 0 1
4129: RET
// every 1 do
4130: GO 4132
4132: DISABLE
// InitGlobalVariables ; end_of_file
4133: CALL 3994 0 0
4137: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4138: LD_VAR 0 2
4142: PUSH
4143: LD_INT 100
4145: EQUAL
4146: IFFALSE 5095
// begin if not StreamModeActive then
4148: LD_EXP 27
4152: NOT
4153: IFFALSE 4163
// StreamModeActive := true ;
4155: LD_ADDR_EXP 27
4159: PUSH
4160: LD_INT 1
4162: ST_TO_ADDR
// if p3 = 0 then
4163: LD_VAR 0 3
4167: PUSH
4168: LD_INT 0
4170: EQUAL
4171: IFFALSE 4177
// InitStreamMode ;
4173: CALL 5253 0 0
// if p3 = 1 then
4177: LD_VAR 0 3
4181: PUSH
4182: LD_INT 1
4184: EQUAL
4185: IFFALSE 4195
// sRocket := true ;
4187: LD_ADDR_EXP 32
4191: PUSH
4192: LD_INT 1
4194: ST_TO_ADDR
// if p3 = 2 then
4195: LD_VAR 0 3
4199: PUSH
4200: LD_INT 2
4202: EQUAL
4203: IFFALSE 4213
// sSpeed := true ;
4205: LD_ADDR_EXP 31
4209: PUSH
4210: LD_INT 1
4212: ST_TO_ADDR
// if p3 = 3 then
4213: LD_VAR 0 3
4217: PUSH
4218: LD_INT 3
4220: EQUAL
4221: IFFALSE 4231
// sEngine := true ;
4223: LD_ADDR_EXP 33
4227: PUSH
4228: LD_INT 1
4230: ST_TO_ADDR
// if p3 = 4 then
4231: LD_VAR 0 3
4235: PUSH
4236: LD_INT 4
4238: EQUAL
4239: IFFALSE 4249
// sSpec := true ;
4241: LD_ADDR_EXP 30
4245: PUSH
4246: LD_INT 1
4248: ST_TO_ADDR
// if p3 = 5 then
4249: LD_VAR 0 3
4253: PUSH
4254: LD_INT 5
4256: EQUAL
4257: IFFALSE 4267
// sLevel := true ;
4259: LD_ADDR_EXP 34
4263: PUSH
4264: LD_INT 1
4266: ST_TO_ADDR
// if p3 = 6 then
4267: LD_VAR 0 3
4271: PUSH
4272: LD_INT 6
4274: EQUAL
4275: IFFALSE 4285
// sArmoury := true ;
4277: LD_ADDR_EXP 35
4281: PUSH
4282: LD_INT 1
4284: ST_TO_ADDR
// if p3 = 7 then
4285: LD_VAR 0 3
4289: PUSH
4290: LD_INT 7
4292: EQUAL
4293: IFFALSE 4303
// sRadar := true ;
4295: LD_ADDR_EXP 36
4299: PUSH
4300: LD_INT 1
4302: ST_TO_ADDR
// if p3 = 8 then
4303: LD_VAR 0 3
4307: PUSH
4308: LD_INT 8
4310: EQUAL
4311: IFFALSE 4321
// sBunker := true ;
4313: LD_ADDR_EXP 37
4317: PUSH
4318: LD_INT 1
4320: ST_TO_ADDR
// if p3 = 9 then
4321: LD_VAR 0 3
4325: PUSH
4326: LD_INT 9
4328: EQUAL
4329: IFFALSE 4339
// sHack := true ;
4331: LD_ADDR_EXP 38
4335: PUSH
4336: LD_INT 1
4338: ST_TO_ADDR
// if p3 = 10 then
4339: LD_VAR 0 3
4343: PUSH
4344: LD_INT 10
4346: EQUAL
4347: IFFALSE 4357
// sFire := true ;
4349: LD_ADDR_EXP 39
4353: PUSH
4354: LD_INT 1
4356: ST_TO_ADDR
// if p3 = 11 then
4357: LD_VAR 0 3
4361: PUSH
4362: LD_INT 11
4364: EQUAL
4365: IFFALSE 4375
// sRefresh := true ;
4367: LD_ADDR_EXP 40
4371: PUSH
4372: LD_INT 1
4374: ST_TO_ADDR
// if p3 = 12 then
4375: LD_VAR 0 3
4379: PUSH
4380: LD_INT 12
4382: EQUAL
4383: IFFALSE 4393
// sExp := true ;
4385: LD_ADDR_EXP 41
4389: PUSH
4390: LD_INT 1
4392: ST_TO_ADDR
// if p3 = 13 then
4393: LD_VAR 0 3
4397: PUSH
4398: LD_INT 13
4400: EQUAL
4401: IFFALSE 4411
// sDepot := true ;
4403: LD_ADDR_EXP 42
4407: PUSH
4408: LD_INT 1
4410: ST_TO_ADDR
// if p3 = 14 then
4411: LD_VAR 0 3
4415: PUSH
4416: LD_INT 14
4418: EQUAL
4419: IFFALSE 4429
// sFlag := true ;
4421: LD_ADDR_EXP 43
4425: PUSH
4426: LD_INT 1
4428: ST_TO_ADDR
// if p3 = 15 then
4429: LD_VAR 0 3
4433: PUSH
4434: LD_INT 15
4436: EQUAL
4437: IFFALSE 4447
// sKamikadze := true ;
4439: LD_ADDR_EXP 51
4443: PUSH
4444: LD_INT 1
4446: ST_TO_ADDR
// if p3 = 16 then
4447: LD_VAR 0 3
4451: PUSH
4452: LD_INT 16
4454: EQUAL
4455: IFFALSE 4465
// sTroll := true ;
4457: LD_ADDR_EXP 52
4461: PUSH
4462: LD_INT 1
4464: ST_TO_ADDR
// if p3 = 17 then
4465: LD_VAR 0 3
4469: PUSH
4470: LD_INT 17
4472: EQUAL
4473: IFFALSE 4483
// sSlow := true ;
4475: LD_ADDR_EXP 53
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// if p3 = 18 then
4483: LD_VAR 0 3
4487: PUSH
4488: LD_INT 18
4490: EQUAL
4491: IFFALSE 4501
// sLack := true ;
4493: LD_ADDR_EXP 54
4497: PUSH
4498: LD_INT 1
4500: ST_TO_ADDR
// if p3 = 19 then
4501: LD_VAR 0 3
4505: PUSH
4506: LD_INT 19
4508: EQUAL
4509: IFFALSE 4519
// sTank := true ;
4511: LD_ADDR_EXP 56
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// if p3 = 20 then
4519: LD_VAR 0 3
4523: PUSH
4524: LD_INT 20
4526: EQUAL
4527: IFFALSE 4537
// sRemote := true ;
4529: LD_ADDR_EXP 57
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// if p3 = 21 then
4537: LD_VAR 0 3
4541: PUSH
4542: LD_INT 21
4544: EQUAL
4545: IFFALSE 4555
// sPowell := true ;
4547: LD_ADDR_EXP 58
4551: PUSH
4552: LD_INT 1
4554: ST_TO_ADDR
// if p3 = 22 then
4555: LD_VAR 0 3
4559: PUSH
4560: LD_INT 22
4562: EQUAL
4563: IFFALSE 4573
// sTeleport := true ;
4565: LD_ADDR_EXP 61
4569: PUSH
4570: LD_INT 1
4572: ST_TO_ADDR
// if p3 = 23 then
4573: LD_VAR 0 3
4577: PUSH
4578: LD_INT 23
4580: EQUAL
4581: IFFALSE 4591
// sOilTower := true ;
4583: LD_ADDR_EXP 63
4587: PUSH
4588: LD_INT 1
4590: ST_TO_ADDR
// if p3 = 24 then
4591: LD_VAR 0 3
4595: PUSH
4596: LD_INT 24
4598: EQUAL
4599: IFFALSE 4609
// sShovel := true ;
4601: LD_ADDR_EXP 64
4605: PUSH
4606: LD_INT 1
4608: ST_TO_ADDR
// if p3 = 25 then
4609: LD_VAR 0 3
4613: PUSH
4614: LD_INT 25
4616: EQUAL
4617: IFFALSE 4627
// sSheik := true ;
4619: LD_ADDR_EXP 65
4623: PUSH
4624: LD_INT 1
4626: ST_TO_ADDR
// if p3 = 26 then
4627: LD_VAR 0 3
4631: PUSH
4632: LD_INT 26
4634: EQUAL
4635: IFFALSE 4645
// sEarthquake := true ;
4637: LD_ADDR_EXP 67
4641: PUSH
4642: LD_INT 1
4644: ST_TO_ADDR
// if p3 = 27 then
4645: LD_VAR 0 3
4649: PUSH
4650: LD_INT 27
4652: EQUAL
4653: IFFALSE 4663
// sAI := true ;
4655: LD_ADDR_EXP 68
4659: PUSH
4660: LD_INT 1
4662: ST_TO_ADDR
// if p3 = 28 then
4663: LD_VAR 0 3
4667: PUSH
4668: LD_INT 28
4670: EQUAL
4671: IFFALSE 4681
// sCargo := true ;
4673: LD_ADDR_EXP 71
4677: PUSH
4678: LD_INT 1
4680: ST_TO_ADDR
// if p3 = 29 then
4681: LD_VAR 0 3
4685: PUSH
4686: LD_INT 29
4688: EQUAL
4689: IFFALSE 4699
// sDLaser := true ;
4691: LD_ADDR_EXP 72
4695: PUSH
4696: LD_INT 1
4698: ST_TO_ADDR
// if p3 = 30 then
4699: LD_VAR 0 3
4703: PUSH
4704: LD_INT 30
4706: EQUAL
4707: IFFALSE 4717
// sExchange := true ;
4709: LD_ADDR_EXP 73
4713: PUSH
4714: LD_INT 1
4716: ST_TO_ADDR
// if p3 = 31 then
4717: LD_VAR 0 3
4721: PUSH
4722: LD_INT 31
4724: EQUAL
4725: IFFALSE 4735
// sFac := true ;
4727: LD_ADDR_EXP 74
4731: PUSH
4732: LD_INT 1
4734: ST_TO_ADDR
// if p3 = 32 then
4735: LD_VAR 0 3
4739: PUSH
4740: LD_INT 32
4742: EQUAL
4743: IFFALSE 4753
// sPower := true ;
4745: LD_ADDR_EXP 75
4749: PUSH
4750: LD_INT 1
4752: ST_TO_ADDR
// if p3 = 33 then
4753: LD_VAR 0 3
4757: PUSH
4758: LD_INT 33
4760: EQUAL
4761: IFFALSE 4771
// sRandom := true ;
4763: LD_ADDR_EXP 76
4767: PUSH
4768: LD_INT 1
4770: ST_TO_ADDR
// if p3 = 34 then
4771: LD_VAR 0 3
4775: PUSH
4776: LD_INT 34
4778: EQUAL
4779: IFFALSE 4789
// sShield := true ;
4781: LD_ADDR_EXP 77
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// if p3 = 35 then
4789: LD_VAR 0 3
4793: PUSH
4794: LD_INT 35
4796: EQUAL
4797: IFFALSE 4807
// sTime := true ;
4799: LD_ADDR_EXP 78
4803: PUSH
4804: LD_INT 1
4806: ST_TO_ADDR
// if p3 = 36 then
4807: LD_VAR 0 3
4811: PUSH
4812: LD_INT 36
4814: EQUAL
4815: IFFALSE 4825
// sTools := true ;
4817: LD_ADDR_EXP 79
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// if p3 = 101 then
4825: LD_VAR 0 3
4829: PUSH
4830: LD_INT 101
4832: EQUAL
4833: IFFALSE 4843
// sSold := true ;
4835: LD_ADDR_EXP 44
4839: PUSH
4840: LD_INT 1
4842: ST_TO_ADDR
// if p3 = 102 then
4843: LD_VAR 0 3
4847: PUSH
4848: LD_INT 102
4850: EQUAL
4851: IFFALSE 4861
// sDiff := true ;
4853: LD_ADDR_EXP 45
4857: PUSH
4858: LD_INT 1
4860: ST_TO_ADDR
// if p3 = 103 then
4861: LD_VAR 0 3
4865: PUSH
4866: LD_INT 103
4868: EQUAL
4869: IFFALSE 4879
// sFog := true ;
4871: LD_ADDR_EXP 48
4875: PUSH
4876: LD_INT 1
4878: ST_TO_ADDR
// if p3 = 104 then
4879: LD_VAR 0 3
4883: PUSH
4884: LD_INT 104
4886: EQUAL
4887: IFFALSE 4897
// sReset := true ;
4889: LD_ADDR_EXP 49
4893: PUSH
4894: LD_INT 1
4896: ST_TO_ADDR
// if p3 = 105 then
4897: LD_VAR 0 3
4901: PUSH
4902: LD_INT 105
4904: EQUAL
4905: IFFALSE 4915
// sSun := true ;
4907: LD_ADDR_EXP 50
4911: PUSH
4912: LD_INT 1
4914: ST_TO_ADDR
// if p3 = 106 then
4915: LD_VAR 0 3
4919: PUSH
4920: LD_INT 106
4922: EQUAL
4923: IFFALSE 4933
// sTiger := true ;
4925: LD_ADDR_EXP 46
4929: PUSH
4930: LD_INT 1
4932: ST_TO_ADDR
// if p3 = 107 then
4933: LD_VAR 0 3
4937: PUSH
4938: LD_INT 107
4940: EQUAL
4941: IFFALSE 4951
// sBomb := true ;
4943: LD_ADDR_EXP 47
4947: PUSH
4948: LD_INT 1
4950: ST_TO_ADDR
// if p3 = 108 then
4951: LD_VAR 0 3
4955: PUSH
4956: LD_INT 108
4958: EQUAL
4959: IFFALSE 4969
// sWound := true ;
4961: LD_ADDR_EXP 55
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// if p3 = 109 then
4969: LD_VAR 0 3
4973: PUSH
4974: LD_INT 109
4976: EQUAL
4977: IFFALSE 4987
// sBetray := true ;
4979: LD_ADDR_EXP 59
4983: PUSH
4984: LD_INT 1
4986: ST_TO_ADDR
// if p3 = 110 then
4987: LD_VAR 0 3
4991: PUSH
4992: LD_INT 110
4994: EQUAL
4995: IFFALSE 5005
// sContamin := true ;
4997: LD_ADDR_EXP 60
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// if p3 = 111 then
5005: LD_VAR 0 3
5009: PUSH
5010: LD_INT 111
5012: EQUAL
5013: IFFALSE 5023
// sOil := true ;
5015: LD_ADDR_EXP 62
5019: PUSH
5020: LD_INT 1
5022: ST_TO_ADDR
// if p3 = 112 then
5023: LD_VAR 0 3
5027: PUSH
5028: LD_INT 112
5030: EQUAL
5031: IFFALSE 5041
// sStu := true ;
5033: LD_ADDR_EXP 66
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// if p3 = 113 then
5041: LD_VAR 0 3
5045: PUSH
5046: LD_INT 113
5048: EQUAL
5049: IFFALSE 5059
// sBazooka := true ;
5051: LD_ADDR_EXP 69
5055: PUSH
5056: LD_INT 1
5058: ST_TO_ADDR
// if p3 = 114 then
5059: LD_VAR 0 3
5063: PUSH
5064: LD_INT 114
5066: EQUAL
5067: IFFALSE 5077
// sMortar := true ;
5069: LD_ADDR_EXP 70
5073: PUSH
5074: LD_INT 1
5076: ST_TO_ADDR
// if p3 = 115 then
5077: LD_VAR 0 3
5081: PUSH
5082: LD_INT 115
5084: EQUAL
5085: IFFALSE 5095
// sRanger := true ;
5087: LD_ADDR_EXP 80
5091: PUSH
5092: LD_INT 1
5094: ST_TO_ADDR
// end ; if p2 = 101 then
5095: LD_VAR 0 2
5099: PUSH
5100: LD_INT 101
5102: EQUAL
5103: IFFALSE 5231
// begin case p3 of 1 :
5105: LD_VAR 0 3
5109: PUSH
5110: LD_INT 1
5112: DOUBLE
5113: EQUAL
5114: IFTRUE 5118
5116: GO 5125
5118: POP
// hHackUnlimitedResources ; 2 :
5119: CALL 16266 0 0
5123: GO 5231
5125: LD_INT 2
5127: DOUBLE
5128: EQUAL
5129: IFTRUE 5133
5131: GO 5140
5133: POP
// hHackSetLevel10 ; 3 :
5134: CALL 16399 0 0
5138: GO 5231
5140: LD_INT 3
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5148
5146: GO 5155
5148: POP
// hHackSetLevel10YourUnits ; 4 :
5149: CALL 16484 0 0
5153: GO 5231
5155: LD_INT 4
5157: DOUBLE
5158: EQUAL
5159: IFTRUE 5163
5161: GO 5170
5163: POP
// hHackInvincible ; 5 :
5164: CALL 16932 0 0
5168: GO 5231
5170: LD_INT 5
5172: DOUBLE
5173: EQUAL
5174: IFTRUE 5178
5176: GO 5185
5178: POP
// hHackInvisible ; 6 :
5179: CALL 17043 0 0
5183: GO 5231
5185: LD_INT 6
5187: DOUBLE
5188: EQUAL
5189: IFTRUE 5193
5191: GO 5200
5193: POP
// hHackChangeYourSide ; 7 :
5194: CALL 17100 0 0
5198: GO 5231
5200: LD_INT 7
5202: DOUBLE
5203: EQUAL
5204: IFTRUE 5208
5206: GO 5215
5208: POP
// hHackChangeUnitSide ; 8 :
5209: CALL 17142 0 0
5213: GO 5231
5215: LD_INT 8
5217: DOUBLE
5218: EQUAL
5219: IFTRUE 5223
5221: GO 5230
5223: POP
// hHackFog ; end ;
5224: CALL 17243 0 0
5228: GO 5231
5230: POP
// end ; end ;
5231: PPOPN 6
5233: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5234: GO 5236
5236: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5237: LD_STRING initStreamRollete();
5239: PPUSH
5240: CALL_OW 559
// InitStreamMode ;
5244: CALL 5253 0 0
// DefineStreamItems ( ) ;
5248: CALL 5693 0 0
// end ;
5252: END
// function InitStreamMode ; begin
5253: LD_INT 0
5255: PPUSH
// streamModeActive := false ;
5256: LD_ADDR_EXP 27
5260: PUSH
5261: LD_INT 0
5263: ST_TO_ADDR
// normalCounter := 36 ;
5264: LD_ADDR_EXP 28
5268: PUSH
5269: LD_INT 36
5271: ST_TO_ADDR
// hardcoreCounter := 16 ;
5272: LD_ADDR_EXP 29
5276: PUSH
5277: LD_INT 16
5279: ST_TO_ADDR
// sRocket := false ;
5280: LD_ADDR_EXP 32
5284: PUSH
5285: LD_INT 0
5287: ST_TO_ADDR
// sSpeed := false ;
5288: LD_ADDR_EXP 31
5292: PUSH
5293: LD_INT 0
5295: ST_TO_ADDR
// sEngine := false ;
5296: LD_ADDR_EXP 33
5300: PUSH
5301: LD_INT 0
5303: ST_TO_ADDR
// sSpec := false ;
5304: LD_ADDR_EXP 30
5308: PUSH
5309: LD_INT 0
5311: ST_TO_ADDR
// sLevel := false ;
5312: LD_ADDR_EXP 34
5316: PUSH
5317: LD_INT 0
5319: ST_TO_ADDR
// sArmoury := false ;
5320: LD_ADDR_EXP 35
5324: PUSH
5325: LD_INT 0
5327: ST_TO_ADDR
// sRadar := false ;
5328: LD_ADDR_EXP 36
5332: PUSH
5333: LD_INT 0
5335: ST_TO_ADDR
// sBunker := false ;
5336: LD_ADDR_EXP 37
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// sHack := false ;
5344: LD_ADDR_EXP 38
5348: PUSH
5349: LD_INT 0
5351: ST_TO_ADDR
// sFire := false ;
5352: LD_ADDR_EXP 39
5356: PUSH
5357: LD_INT 0
5359: ST_TO_ADDR
// sRefresh := false ;
5360: LD_ADDR_EXP 40
5364: PUSH
5365: LD_INT 0
5367: ST_TO_ADDR
// sExp := false ;
5368: LD_ADDR_EXP 41
5372: PUSH
5373: LD_INT 0
5375: ST_TO_ADDR
// sDepot := false ;
5376: LD_ADDR_EXP 42
5380: PUSH
5381: LD_INT 0
5383: ST_TO_ADDR
// sFlag := false ;
5384: LD_ADDR_EXP 43
5388: PUSH
5389: LD_INT 0
5391: ST_TO_ADDR
// sKamikadze := false ;
5392: LD_ADDR_EXP 51
5396: PUSH
5397: LD_INT 0
5399: ST_TO_ADDR
// sTroll := false ;
5400: LD_ADDR_EXP 52
5404: PUSH
5405: LD_INT 0
5407: ST_TO_ADDR
// sSlow := false ;
5408: LD_ADDR_EXP 53
5412: PUSH
5413: LD_INT 0
5415: ST_TO_ADDR
// sLack := false ;
5416: LD_ADDR_EXP 54
5420: PUSH
5421: LD_INT 0
5423: ST_TO_ADDR
// sTank := false ;
5424: LD_ADDR_EXP 56
5428: PUSH
5429: LD_INT 0
5431: ST_TO_ADDR
// sRemote := false ;
5432: LD_ADDR_EXP 57
5436: PUSH
5437: LD_INT 0
5439: ST_TO_ADDR
// sPowell := false ;
5440: LD_ADDR_EXP 58
5444: PUSH
5445: LD_INT 0
5447: ST_TO_ADDR
// sTeleport := false ;
5448: LD_ADDR_EXP 61
5452: PUSH
5453: LD_INT 0
5455: ST_TO_ADDR
// sOilTower := false ;
5456: LD_ADDR_EXP 63
5460: PUSH
5461: LD_INT 0
5463: ST_TO_ADDR
// sShovel := false ;
5464: LD_ADDR_EXP 64
5468: PUSH
5469: LD_INT 0
5471: ST_TO_ADDR
// sSheik := false ;
5472: LD_ADDR_EXP 65
5476: PUSH
5477: LD_INT 0
5479: ST_TO_ADDR
// sEarthquake := false ;
5480: LD_ADDR_EXP 67
5484: PUSH
5485: LD_INT 0
5487: ST_TO_ADDR
// sAI := false ;
5488: LD_ADDR_EXP 68
5492: PUSH
5493: LD_INT 0
5495: ST_TO_ADDR
// sCargo := false ;
5496: LD_ADDR_EXP 71
5500: PUSH
5501: LD_INT 0
5503: ST_TO_ADDR
// sDLaser := false ;
5504: LD_ADDR_EXP 72
5508: PUSH
5509: LD_INT 0
5511: ST_TO_ADDR
// sExchange := false ;
5512: LD_ADDR_EXP 73
5516: PUSH
5517: LD_INT 0
5519: ST_TO_ADDR
// sFac := false ;
5520: LD_ADDR_EXP 74
5524: PUSH
5525: LD_INT 0
5527: ST_TO_ADDR
// sPower := false ;
5528: LD_ADDR_EXP 75
5532: PUSH
5533: LD_INT 0
5535: ST_TO_ADDR
// sRandom := false ;
5536: LD_ADDR_EXP 76
5540: PUSH
5541: LD_INT 0
5543: ST_TO_ADDR
// sShield := false ;
5544: LD_ADDR_EXP 77
5548: PUSH
5549: LD_INT 0
5551: ST_TO_ADDR
// sTime := false ;
5552: LD_ADDR_EXP 78
5556: PUSH
5557: LD_INT 0
5559: ST_TO_ADDR
// sTools := false ;
5560: LD_ADDR_EXP 79
5564: PUSH
5565: LD_INT 0
5567: ST_TO_ADDR
// sSold := false ;
5568: LD_ADDR_EXP 44
5572: PUSH
5573: LD_INT 0
5575: ST_TO_ADDR
// sDiff := false ;
5576: LD_ADDR_EXP 45
5580: PUSH
5581: LD_INT 0
5583: ST_TO_ADDR
// sFog := false ;
5584: LD_ADDR_EXP 48
5588: PUSH
5589: LD_INT 0
5591: ST_TO_ADDR
// sReset := false ;
5592: LD_ADDR_EXP 49
5596: PUSH
5597: LD_INT 0
5599: ST_TO_ADDR
// sSun := false ;
5600: LD_ADDR_EXP 50
5604: PUSH
5605: LD_INT 0
5607: ST_TO_ADDR
// sTiger := false ;
5608: LD_ADDR_EXP 46
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// sBomb := false ;
5616: LD_ADDR_EXP 47
5620: PUSH
5621: LD_INT 0
5623: ST_TO_ADDR
// sWound := false ;
5624: LD_ADDR_EXP 55
5628: PUSH
5629: LD_INT 0
5631: ST_TO_ADDR
// sBetray := false ;
5632: LD_ADDR_EXP 59
5636: PUSH
5637: LD_INT 0
5639: ST_TO_ADDR
// sContamin := false ;
5640: LD_ADDR_EXP 60
5644: PUSH
5645: LD_INT 0
5647: ST_TO_ADDR
// sOil := false ;
5648: LD_ADDR_EXP 62
5652: PUSH
5653: LD_INT 0
5655: ST_TO_ADDR
// sStu := false ;
5656: LD_ADDR_EXP 66
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// sBazooka := false ;
5664: LD_ADDR_EXP 69
5668: PUSH
5669: LD_INT 0
5671: ST_TO_ADDR
// sMortar := false ;
5672: LD_ADDR_EXP 70
5676: PUSH
5677: LD_INT 0
5679: ST_TO_ADDR
// sRanger := false ;
5680: LD_ADDR_EXP 80
5684: PUSH
5685: LD_INT 0
5687: ST_TO_ADDR
// end ;
5688: LD_VAR 0 1
5692: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5693: LD_INT 0
5695: PPUSH
5696: PPUSH
5697: PPUSH
5698: PPUSH
5699: PPUSH
// result := [ ] ;
5700: LD_ADDR_VAR 0 1
5704: PUSH
5705: EMPTY
5706: ST_TO_ADDR
// if campaign_id = 1 then
5707: LD_OWVAR 69
5711: PUSH
5712: LD_INT 1
5714: EQUAL
5715: IFFALSE 8653
// begin case mission_number of 1 :
5717: LD_OWVAR 70
5721: PUSH
5722: LD_INT 1
5724: DOUBLE
5725: EQUAL
5726: IFTRUE 5730
5728: GO 5794
5730: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5731: LD_ADDR_VAR 0 1
5735: PUSH
5736: LD_INT 2
5738: PUSH
5739: LD_INT 4
5741: PUSH
5742: LD_INT 11
5744: PUSH
5745: LD_INT 12
5747: PUSH
5748: LD_INT 15
5750: PUSH
5751: LD_INT 16
5753: PUSH
5754: LD_INT 22
5756: PUSH
5757: LD_INT 23
5759: PUSH
5760: LD_INT 26
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 101
5776: PUSH
5777: LD_INT 102
5779: PUSH
5780: LD_INT 106
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: ST_TO_ADDR
5792: GO 8651
5794: LD_INT 2
5796: DOUBLE
5797: EQUAL
5798: IFTRUE 5802
5800: GO 5874
5802: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5803: LD_ADDR_VAR 0 1
5807: PUSH
5808: LD_INT 2
5810: PUSH
5811: LD_INT 4
5813: PUSH
5814: LD_INT 11
5816: PUSH
5817: LD_INT 12
5819: PUSH
5820: LD_INT 15
5822: PUSH
5823: LD_INT 16
5825: PUSH
5826: LD_INT 22
5828: PUSH
5829: LD_INT 23
5831: PUSH
5832: LD_INT 26
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 101
5848: PUSH
5849: LD_INT 102
5851: PUSH
5852: LD_INT 105
5854: PUSH
5855: LD_INT 106
5857: PUSH
5858: LD_INT 108
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: ST_TO_ADDR
5872: GO 8651
5874: LD_INT 3
5876: DOUBLE
5877: EQUAL
5878: IFTRUE 5882
5880: GO 5958
5882: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5883: LD_ADDR_VAR 0 1
5887: PUSH
5888: LD_INT 2
5890: PUSH
5891: LD_INT 4
5893: PUSH
5894: LD_INT 5
5896: PUSH
5897: LD_INT 11
5899: PUSH
5900: LD_INT 12
5902: PUSH
5903: LD_INT 15
5905: PUSH
5906: LD_INT 16
5908: PUSH
5909: LD_INT 22
5911: PUSH
5912: LD_INT 26
5914: PUSH
5915: LD_INT 36
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 101
5932: PUSH
5933: LD_INT 102
5935: PUSH
5936: LD_INT 105
5938: PUSH
5939: LD_INT 106
5941: PUSH
5942: LD_INT 108
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: ST_TO_ADDR
5956: GO 8651
5958: LD_INT 4
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5966
5964: GO 6050
5966: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5967: LD_ADDR_VAR 0 1
5971: PUSH
5972: LD_INT 2
5974: PUSH
5975: LD_INT 4
5977: PUSH
5978: LD_INT 5
5980: PUSH
5981: LD_INT 8
5983: PUSH
5984: LD_INT 11
5986: PUSH
5987: LD_INT 12
5989: PUSH
5990: LD_INT 15
5992: PUSH
5993: LD_INT 16
5995: PUSH
5996: LD_INT 22
5998: PUSH
5999: LD_INT 23
6001: PUSH
6002: LD_INT 26
6004: PUSH
6005: LD_INT 36
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 101
6024: PUSH
6025: LD_INT 102
6027: PUSH
6028: LD_INT 105
6030: PUSH
6031: LD_INT 106
6033: PUSH
6034: LD_INT 108
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: ST_TO_ADDR
6048: GO 8651
6050: LD_INT 5
6052: DOUBLE
6053: EQUAL
6054: IFTRUE 6058
6056: GO 6158
6058: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6059: LD_ADDR_VAR 0 1
6063: PUSH
6064: LD_INT 2
6066: PUSH
6067: LD_INT 4
6069: PUSH
6070: LD_INT 5
6072: PUSH
6073: LD_INT 6
6075: PUSH
6076: LD_INT 8
6078: PUSH
6079: LD_INT 11
6081: PUSH
6082: LD_INT 12
6084: PUSH
6085: LD_INT 15
6087: PUSH
6088: LD_INT 16
6090: PUSH
6091: LD_INT 22
6093: PUSH
6094: LD_INT 23
6096: PUSH
6097: LD_INT 25
6099: PUSH
6100: LD_INT 26
6102: PUSH
6103: LD_INT 36
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 101
6124: PUSH
6125: LD_INT 102
6127: PUSH
6128: LD_INT 105
6130: PUSH
6131: LD_INT 106
6133: PUSH
6134: LD_INT 108
6136: PUSH
6137: LD_INT 109
6139: PUSH
6140: LD_INT 112
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: ST_TO_ADDR
6156: GO 8651
6158: LD_INT 6
6160: DOUBLE
6161: EQUAL
6162: IFTRUE 6166
6164: GO 6286
6166: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6167: LD_ADDR_VAR 0 1
6171: PUSH
6172: LD_INT 2
6174: PUSH
6175: LD_INT 4
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 6
6183: PUSH
6184: LD_INT 8
6186: PUSH
6187: LD_INT 11
6189: PUSH
6190: LD_INT 12
6192: PUSH
6193: LD_INT 15
6195: PUSH
6196: LD_INT 16
6198: PUSH
6199: LD_INT 20
6201: PUSH
6202: LD_INT 21
6204: PUSH
6205: LD_INT 22
6207: PUSH
6208: LD_INT 23
6210: PUSH
6211: LD_INT 25
6213: PUSH
6214: LD_INT 26
6216: PUSH
6217: LD_INT 30
6219: PUSH
6220: LD_INT 31
6222: PUSH
6223: LD_INT 32
6225: PUSH
6226: LD_INT 36
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 101
6252: PUSH
6253: LD_INT 102
6255: PUSH
6256: LD_INT 105
6258: PUSH
6259: LD_INT 106
6261: PUSH
6262: LD_INT 108
6264: PUSH
6265: LD_INT 109
6267: PUSH
6268: LD_INT 112
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: ST_TO_ADDR
6284: GO 8651
6286: LD_INT 7
6288: DOUBLE
6289: EQUAL
6290: IFTRUE 6294
6292: GO 6394
6294: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6295: LD_ADDR_VAR 0 1
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: LD_INT 4
6305: PUSH
6306: LD_INT 5
6308: PUSH
6309: LD_INT 7
6311: PUSH
6312: LD_INT 11
6314: PUSH
6315: LD_INT 12
6317: PUSH
6318: LD_INT 15
6320: PUSH
6321: LD_INT 16
6323: PUSH
6324: LD_INT 20
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 22
6332: PUSH
6333: LD_INT 23
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 26
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 101
6360: PUSH
6361: LD_INT 102
6363: PUSH
6364: LD_INT 103
6366: PUSH
6367: LD_INT 105
6369: PUSH
6370: LD_INT 106
6372: PUSH
6373: LD_INT 108
6375: PUSH
6376: LD_INT 112
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: ST_TO_ADDR
6392: GO 8651
6394: LD_INT 8
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6530
6402: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6403: LD_ADDR_VAR 0 1
6407: PUSH
6408: LD_INT 2
6410: PUSH
6411: LD_INT 4
6413: PUSH
6414: LD_INT 5
6416: PUSH
6417: LD_INT 6
6419: PUSH
6420: LD_INT 7
6422: PUSH
6423: LD_INT 8
6425: PUSH
6426: LD_INT 11
6428: PUSH
6429: LD_INT 12
6431: PUSH
6432: LD_INT 15
6434: PUSH
6435: LD_INT 16
6437: PUSH
6438: LD_INT 20
6440: PUSH
6441: LD_INT 21
6443: PUSH
6444: LD_INT 22
6446: PUSH
6447: LD_INT 23
6449: PUSH
6450: LD_INT 25
6452: PUSH
6453: LD_INT 26
6455: PUSH
6456: LD_INT 30
6458: PUSH
6459: LD_INT 31
6461: PUSH
6462: LD_INT 32
6464: PUSH
6465: LD_INT 36
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 101
6492: PUSH
6493: LD_INT 102
6495: PUSH
6496: LD_INT 103
6498: PUSH
6499: LD_INT 105
6501: PUSH
6502: LD_INT 106
6504: PUSH
6505: LD_INT 108
6507: PUSH
6508: LD_INT 109
6510: PUSH
6511: LD_INT 112
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: ST_TO_ADDR
6528: GO 8651
6530: LD_INT 9
6532: DOUBLE
6533: EQUAL
6534: IFTRUE 6538
6536: GO 6674
6538: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6539: LD_ADDR_VAR 0 1
6543: PUSH
6544: LD_INT 2
6546: PUSH
6547: LD_INT 4
6549: PUSH
6550: LD_INT 5
6552: PUSH
6553: LD_INT 6
6555: PUSH
6556: LD_INT 7
6558: PUSH
6559: LD_INT 8
6561: PUSH
6562: LD_INT 11
6564: PUSH
6565: LD_INT 12
6567: PUSH
6568: LD_INT 15
6570: PUSH
6571: LD_INT 16
6573: PUSH
6574: LD_INT 20
6576: PUSH
6577: LD_INT 21
6579: PUSH
6580: LD_INT 22
6582: PUSH
6583: LD_INT 23
6585: PUSH
6586: LD_INT 25
6588: PUSH
6589: LD_INT 26
6591: PUSH
6592: LD_INT 28
6594: PUSH
6595: LD_INT 30
6597: PUSH
6598: LD_INT 31
6600: PUSH
6601: LD_INT 32
6603: PUSH
6604: LD_INT 36
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 101
6632: PUSH
6633: LD_INT 102
6635: PUSH
6636: LD_INT 103
6638: PUSH
6639: LD_INT 105
6641: PUSH
6642: LD_INT 106
6644: PUSH
6645: LD_INT 108
6647: PUSH
6648: LD_INT 109
6650: PUSH
6651: LD_INT 112
6653: PUSH
6654: LD_INT 114
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: ST_TO_ADDR
6672: GO 8651
6674: LD_INT 10
6676: DOUBLE
6677: EQUAL
6678: IFTRUE 6682
6680: GO 6866
6682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6683: LD_ADDR_VAR 0 1
6687: PUSH
6688: LD_INT 2
6690: PUSH
6691: LD_INT 4
6693: PUSH
6694: LD_INT 5
6696: PUSH
6697: LD_INT 6
6699: PUSH
6700: LD_INT 7
6702: PUSH
6703: LD_INT 8
6705: PUSH
6706: LD_INT 9
6708: PUSH
6709: LD_INT 10
6711: PUSH
6712: LD_INT 11
6714: PUSH
6715: LD_INT 12
6717: PUSH
6718: LD_INT 13
6720: PUSH
6721: LD_INT 14
6723: PUSH
6724: LD_INT 15
6726: PUSH
6727: LD_INT 16
6729: PUSH
6730: LD_INT 17
6732: PUSH
6733: LD_INT 18
6735: PUSH
6736: LD_INT 19
6738: PUSH
6739: LD_INT 20
6741: PUSH
6742: LD_INT 21
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_INT 23
6750: PUSH
6751: LD_INT 24
6753: PUSH
6754: LD_INT 25
6756: PUSH
6757: LD_INT 26
6759: PUSH
6760: LD_INT 28
6762: PUSH
6763: LD_INT 30
6765: PUSH
6766: LD_INT 31
6768: PUSH
6769: LD_INT 32
6771: PUSH
6772: LD_INT 36
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 101
6808: PUSH
6809: LD_INT 102
6811: PUSH
6812: LD_INT 103
6814: PUSH
6815: LD_INT 104
6817: PUSH
6818: LD_INT 105
6820: PUSH
6821: LD_INT 106
6823: PUSH
6824: LD_INT 107
6826: PUSH
6827: LD_INT 108
6829: PUSH
6830: LD_INT 109
6832: PUSH
6833: LD_INT 110
6835: PUSH
6836: LD_INT 111
6838: PUSH
6839: LD_INT 112
6841: PUSH
6842: LD_INT 114
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: ST_TO_ADDR
6864: GO 8651
6866: LD_INT 11
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 7066
6874: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6875: LD_ADDR_VAR 0 1
6879: PUSH
6880: LD_INT 2
6882: PUSH
6883: LD_INT 3
6885: PUSH
6886: LD_INT 4
6888: PUSH
6889: LD_INT 5
6891: PUSH
6892: LD_INT 6
6894: PUSH
6895: LD_INT 7
6897: PUSH
6898: LD_INT 8
6900: PUSH
6901: LD_INT 9
6903: PUSH
6904: LD_INT 10
6906: PUSH
6907: LD_INT 11
6909: PUSH
6910: LD_INT 12
6912: PUSH
6913: LD_INT 13
6915: PUSH
6916: LD_INT 14
6918: PUSH
6919: LD_INT 15
6921: PUSH
6922: LD_INT 16
6924: PUSH
6925: LD_INT 17
6927: PUSH
6928: LD_INT 18
6930: PUSH
6931: LD_INT 19
6933: PUSH
6934: LD_INT 20
6936: PUSH
6937: LD_INT 21
6939: PUSH
6940: LD_INT 22
6942: PUSH
6943: LD_INT 23
6945: PUSH
6946: LD_INT 24
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 26
6954: PUSH
6955: LD_INT 28
6957: PUSH
6958: LD_INT 30
6960: PUSH
6961: LD_INT 31
6963: PUSH
6964: LD_INT 32
6966: PUSH
6967: LD_INT 34
6969: PUSH
6970: LD_INT 36
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 101
7008: PUSH
7009: LD_INT 102
7011: PUSH
7012: LD_INT 103
7014: PUSH
7015: LD_INT 104
7017: PUSH
7018: LD_INT 105
7020: PUSH
7021: LD_INT 106
7023: PUSH
7024: LD_INT 107
7026: PUSH
7027: LD_INT 108
7029: PUSH
7030: LD_INT 109
7032: PUSH
7033: LD_INT 110
7035: PUSH
7036: LD_INT 111
7038: PUSH
7039: LD_INT 112
7041: PUSH
7042: LD_INT 114
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 8651
7066: LD_INT 12
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7282
7074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7075: LD_ADDR_VAR 0 1
7079: PUSH
7080: LD_INT 1
7082: PUSH
7083: LD_INT 2
7085: PUSH
7086: LD_INT 3
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: LD_INT 5
7094: PUSH
7095: LD_INT 6
7097: PUSH
7098: LD_INT 7
7100: PUSH
7101: LD_INT 8
7103: PUSH
7104: LD_INT 9
7106: PUSH
7107: LD_INT 10
7109: PUSH
7110: LD_INT 11
7112: PUSH
7113: LD_INT 12
7115: PUSH
7116: LD_INT 13
7118: PUSH
7119: LD_INT 14
7121: PUSH
7122: LD_INT 15
7124: PUSH
7125: LD_INT 16
7127: PUSH
7128: LD_INT 17
7130: PUSH
7131: LD_INT 18
7133: PUSH
7134: LD_INT 19
7136: PUSH
7137: LD_INT 20
7139: PUSH
7140: LD_INT 21
7142: PUSH
7143: LD_INT 22
7145: PUSH
7146: LD_INT 23
7148: PUSH
7149: LD_INT 24
7151: PUSH
7152: LD_INT 25
7154: PUSH
7155: LD_INT 26
7157: PUSH
7158: LD_INT 27
7160: PUSH
7161: LD_INT 28
7163: PUSH
7164: LD_INT 30
7166: PUSH
7167: LD_INT 31
7169: PUSH
7170: LD_INT 32
7172: PUSH
7173: LD_INT 33
7175: PUSH
7176: LD_INT 34
7178: PUSH
7179: LD_INT 36
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 101
7220: PUSH
7221: LD_INT 102
7223: PUSH
7224: LD_INT 103
7226: PUSH
7227: LD_INT 104
7229: PUSH
7230: LD_INT 105
7232: PUSH
7233: LD_INT 106
7235: PUSH
7236: LD_INT 107
7238: PUSH
7239: LD_INT 108
7241: PUSH
7242: LD_INT 109
7244: PUSH
7245: LD_INT 110
7247: PUSH
7248: LD_INT 111
7250: PUSH
7251: LD_INT 112
7253: PUSH
7254: LD_INT 113
7256: PUSH
7257: LD_INT 114
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 8651
7282: LD_INT 13
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7486
7290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7291: LD_ADDR_VAR 0 1
7295: PUSH
7296: LD_INT 1
7298: PUSH
7299: LD_INT 2
7301: PUSH
7302: LD_INT 3
7304: PUSH
7305: LD_INT 4
7307: PUSH
7308: LD_INT 5
7310: PUSH
7311: LD_INT 8
7313: PUSH
7314: LD_INT 9
7316: PUSH
7317: LD_INT 10
7319: PUSH
7320: LD_INT 11
7322: PUSH
7323: LD_INT 12
7325: PUSH
7326: LD_INT 14
7328: PUSH
7329: LD_INT 15
7331: PUSH
7332: LD_INT 16
7334: PUSH
7335: LD_INT 17
7337: PUSH
7338: LD_INT 18
7340: PUSH
7341: LD_INT 19
7343: PUSH
7344: LD_INT 20
7346: PUSH
7347: LD_INT 21
7349: PUSH
7350: LD_INT 22
7352: PUSH
7353: LD_INT 23
7355: PUSH
7356: LD_INT 24
7358: PUSH
7359: LD_INT 25
7361: PUSH
7362: LD_INT 26
7364: PUSH
7365: LD_INT 27
7367: PUSH
7368: LD_INT 28
7370: PUSH
7371: LD_INT 30
7373: PUSH
7374: LD_INT 31
7376: PUSH
7377: LD_INT 32
7379: PUSH
7380: LD_INT 33
7382: PUSH
7383: LD_INT 34
7385: PUSH
7386: LD_INT 36
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 101
7424: PUSH
7425: LD_INT 102
7427: PUSH
7428: LD_INT 103
7430: PUSH
7431: LD_INT 104
7433: PUSH
7434: LD_INT 105
7436: PUSH
7437: LD_INT 106
7439: PUSH
7440: LD_INT 107
7442: PUSH
7443: LD_INT 108
7445: PUSH
7446: LD_INT 109
7448: PUSH
7449: LD_INT 110
7451: PUSH
7452: LD_INT 111
7454: PUSH
7455: LD_INT 112
7457: PUSH
7458: LD_INT 113
7460: PUSH
7461: LD_INT 114
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: ST_TO_ADDR
7484: GO 8651
7486: LD_INT 14
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7706
7494: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7495: LD_ADDR_VAR 0 1
7499: PUSH
7500: LD_INT 1
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 3
7508: PUSH
7509: LD_INT 4
7511: PUSH
7512: LD_INT 5
7514: PUSH
7515: LD_INT 6
7517: PUSH
7518: LD_INT 7
7520: PUSH
7521: LD_INT 8
7523: PUSH
7524: LD_INT 9
7526: PUSH
7527: LD_INT 10
7529: PUSH
7530: LD_INT 11
7532: PUSH
7533: LD_INT 12
7535: PUSH
7536: LD_INT 13
7538: PUSH
7539: LD_INT 14
7541: PUSH
7542: LD_INT 15
7544: PUSH
7545: LD_INT 16
7547: PUSH
7548: LD_INT 17
7550: PUSH
7551: LD_INT 18
7553: PUSH
7554: LD_INT 19
7556: PUSH
7557: LD_INT 20
7559: PUSH
7560: LD_INT 21
7562: PUSH
7563: LD_INT 22
7565: PUSH
7566: LD_INT 23
7568: PUSH
7569: LD_INT 24
7571: PUSH
7572: LD_INT 25
7574: PUSH
7575: LD_INT 26
7577: PUSH
7578: LD_INT 27
7580: PUSH
7581: LD_INT 28
7583: PUSH
7584: LD_INT 29
7586: PUSH
7587: LD_INT 30
7589: PUSH
7590: LD_INT 31
7592: PUSH
7593: LD_INT 32
7595: PUSH
7596: LD_INT 33
7598: PUSH
7599: LD_INT 34
7601: PUSH
7602: LD_INT 36
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 101
7644: PUSH
7645: LD_INT 102
7647: PUSH
7648: LD_INT 103
7650: PUSH
7651: LD_INT 104
7653: PUSH
7654: LD_INT 105
7656: PUSH
7657: LD_INT 106
7659: PUSH
7660: LD_INT 107
7662: PUSH
7663: LD_INT 108
7665: PUSH
7666: LD_INT 109
7668: PUSH
7669: LD_INT 110
7671: PUSH
7672: LD_INT 111
7674: PUSH
7675: LD_INT 112
7677: PUSH
7678: LD_INT 113
7680: PUSH
7681: LD_INT 114
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: ST_TO_ADDR
7704: GO 8651
7706: LD_INT 15
7708: DOUBLE
7709: EQUAL
7710: IFTRUE 7714
7712: GO 7926
7714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7715: LD_ADDR_VAR 0 1
7719: PUSH
7720: LD_INT 1
7722: PUSH
7723: LD_INT 2
7725: PUSH
7726: LD_INT 3
7728: PUSH
7729: LD_INT 4
7731: PUSH
7732: LD_INT 5
7734: PUSH
7735: LD_INT 6
7737: PUSH
7738: LD_INT 7
7740: PUSH
7741: LD_INT 8
7743: PUSH
7744: LD_INT 9
7746: PUSH
7747: LD_INT 10
7749: PUSH
7750: LD_INT 11
7752: PUSH
7753: LD_INT 12
7755: PUSH
7756: LD_INT 13
7758: PUSH
7759: LD_INT 14
7761: PUSH
7762: LD_INT 15
7764: PUSH
7765: LD_INT 16
7767: PUSH
7768: LD_INT 17
7770: PUSH
7771: LD_INT 18
7773: PUSH
7774: LD_INT 19
7776: PUSH
7777: LD_INT 20
7779: PUSH
7780: LD_INT 21
7782: PUSH
7783: LD_INT 22
7785: PUSH
7786: LD_INT 23
7788: PUSH
7789: LD_INT 24
7791: PUSH
7792: LD_INT 25
7794: PUSH
7795: LD_INT 26
7797: PUSH
7798: LD_INT 27
7800: PUSH
7801: LD_INT 28
7803: PUSH
7804: LD_INT 29
7806: PUSH
7807: LD_INT 30
7809: PUSH
7810: LD_INT 31
7812: PUSH
7813: LD_INT 32
7815: PUSH
7816: LD_INT 33
7818: PUSH
7819: LD_INT 34
7821: PUSH
7822: LD_INT 36
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 101
7864: PUSH
7865: LD_INT 102
7867: PUSH
7868: LD_INT 103
7870: PUSH
7871: LD_INT 104
7873: PUSH
7874: LD_INT 105
7876: PUSH
7877: LD_INT 106
7879: PUSH
7880: LD_INT 107
7882: PUSH
7883: LD_INT 108
7885: PUSH
7886: LD_INT 109
7888: PUSH
7889: LD_INT 110
7891: PUSH
7892: LD_INT 111
7894: PUSH
7895: LD_INT 112
7897: PUSH
7898: LD_INT 113
7900: PUSH
7901: LD_INT 114
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: ST_TO_ADDR
7924: GO 8651
7926: LD_INT 16
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 8058
7934: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7935: LD_ADDR_VAR 0 1
7939: PUSH
7940: LD_INT 2
7942: PUSH
7943: LD_INT 4
7945: PUSH
7946: LD_INT 5
7948: PUSH
7949: LD_INT 7
7951: PUSH
7952: LD_INT 11
7954: PUSH
7955: LD_INT 12
7957: PUSH
7958: LD_INT 15
7960: PUSH
7961: LD_INT 16
7963: PUSH
7964: LD_INT 20
7966: PUSH
7967: LD_INT 21
7969: PUSH
7970: LD_INT 22
7972: PUSH
7973: LD_INT 23
7975: PUSH
7976: LD_INT 25
7978: PUSH
7979: LD_INT 26
7981: PUSH
7982: LD_INT 30
7984: PUSH
7985: LD_INT 31
7987: PUSH
7988: LD_INT 32
7990: PUSH
7991: LD_INT 33
7993: PUSH
7994: LD_INT 34
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 101
8020: PUSH
8021: LD_INT 102
8023: PUSH
8024: LD_INT 103
8026: PUSH
8027: LD_INT 106
8029: PUSH
8030: LD_INT 108
8032: PUSH
8033: LD_INT 112
8035: PUSH
8036: LD_INT 113
8038: PUSH
8039: LD_INT 114
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: ST_TO_ADDR
8056: GO 8651
8058: LD_INT 17
8060: DOUBLE
8061: EQUAL
8062: IFTRUE 8066
8064: GO 8278
8066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8067: LD_ADDR_VAR 0 1
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: LD_INT 2
8077: PUSH
8078: LD_INT 3
8080: PUSH
8081: LD_INT 4
8083: PUSH
8084: LD_INT 5
8086: PUSH
8087: LD_INT 6
8089: PUSH
8090: LD_INT 7
8092: PUSH
8093: LD_INT 8
8095: PUSH
8096: LD_INT 9
8098: PUSH
8099: LD_INT 10
8101: PUSH
8102: LD_INT 11
8104: PUSH
8105: LD_INT 12
8107: PUSH
8108: LD_INT 13
8110: PUSH
8111: LD_INT 14
8113: PUSH
8114: LD_INT 15
8116: PUSH
8117: LD_INT 16
8119: PUSH
8120: LD_INT 17
8122: PUSH
8123: LD_INT 18
8125: PUSH
8126: LD_INT 19
8128: PUSH
8129: LD_INT 20
8131: PUSH
8132: LD_INT 21
8134: PUSH
8135: LD_INT 22
8137: PUSH
8138: LD_INT 23
8140: PUSH
8141: LD_INT 24
8143: PUSH
8144: LD_INT 25
8146: PUSH
8147: LD_INT 26
8149: PUSH
8150: LD_INT 27
8152: PUSH
8153: LD_INT 28
8155: PUSH
8156: LD_INT 29
8158: PUSH
8159: LD_INT 30
8161: PUSH
8162: LD_INT 31
8164: PUSH
8165: LD_INT 32
8167: PUSH
8168: LD_INT 33
8170: PUSH
8171: LD_INT 34
8173: PUSH
8174: LD_INT 36
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 101
8216: PUSH
8217: LD_INT 102
8219: PUSH
8220: LD_INT 103
8222: PUSH
8223: LD_INT 104
8225: PUSH
8226: LD_INT 105
8228: PUSH
8229: LD_INT 106
8231: PUSH
8232: LD_INT 107
8234: PUSH
8235: LD_INT 108
8237: PUSH
8238: LD_INT 109
8240: PUSH
8241: LD_INT 110
8243: PUSH
8244: LD_INT 111
8246: PUSH
8247: LD_INT 112
8249: PUSH
8250: LD_INT 113
8252: PUSH
8253: LD_INT 114
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: ST_TO_ADDR
8276: GO 8651
8278: LD_INT 18
8280: DOUBLE
8281: EQUAL
8282: IFTRUE 8286
8284: GO 8422
8286: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 4
8297: PUSH
8298: LD_INT 5
8300: PUSH
8301: LD_INT 7
8303: PUSH
8304: LD_INT 11
8306: PUSH
8307: LD_INT 12
8309: PUSH
8310: LD_INT 15
8312: PUSH
8313: LD_INT 16
8315: PUSH
8316: LD_INT 20
8318: PUSH
8319: LD_INT 21
8321: PUSH
8322: LD_INT 22
8324: PUSH
8325: LD_INT 23
8327: PUSH
8328: LD_INT 25
8330: PUSH
8331: LD_INT 26
8333: PUSH
8334: LD_INT 30
8336: PUSH
8337: LD_INT 31
8339: PUSH
8340: LD_INT 32
8342: PUSH
8343: LD_INT 33
8345: PUSH
8346: LD_INT 34
8348: PUSH
8349: LD_INT 35
8351: PUSH
8352: LD_INT 36
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 101
8380: PUSH
8381: LD_INT 102
8383: PUSH
8384: LD_INT 103
8386: PUSH
8387: LD_INT 106
8389: PUSH
8390: LD_INT 108
8392: PUSH
8393: LD_INT 112
8395: PUSH
8396: LD_INT 113
8398: PUSH
8399: LD_INT 114
8401: PUSH
8402: LD_INT 115
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: ST_TO_ADDR
8420: GO 8651
8422: LD_INT 19
8424: DOUBLE
8425: EQUAL
8426: IFTRUE 8430
8428: GO 8650
8430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8431: LD_ADDR_VAR 0 1
8435: PUSH
8436: LD_INT 1
8438: PUSH
8439: LD_INT 2
8441: PUSH
8442: LD_INT 3
8444: PUSH
8445: LD_INT 4
8447: PUSH
8448: LD_INT 5
8450: PUSH
8451: LD_INT 6
8453: PUSH
8454: LD_INT 7
8456: PUSH
8457: LD_INT 8
8459: PUSH
8460: LD_INT 9
8462: PUSH
8463: LD_INT 10
8465: PUSH
8466: LD_INT 11
8468: PUSH
8469: LD_INT 12
8471: PUSH
8472: LD_INT 13
8474: PUSH
8475: LD_INT 14
8477: PUSH
8478: LD_INT 15
8480: PUSH
8481: LD_INT 16
8483: PUSH
8484: LD_INT 17
8486: PUSH
8487: LD_INT 18
8489: PUSH
8490: LD_INT 19
8492: PUSH
8493: LD_INT 20
8495: PUSH
8496: LD_INT 21
8498: PUSH
8499: LD_INT 22
8501: PUSH
8502: LD_INT 23
8504: PUSH
8505: LD_INT 24
8507: PUSH
8508: LD_INT 25
8510: PUSH
8511: LD_INT 26
8513: PUSH
8514: LD_INT 27
8516: PUSH
8517: LD_INT 28
8519: PUSH
8520: LD_INT 29
8522: PUSH
8523: LD_INT 30
8525: PUSH
8526: LD_INT 31
8528: PUSH
8529: LD_INT 32
8531: PUSH
8532: LD_INT 33
8534: PUSH
8535: LD_INT 34
8537: PUSH
8538: LD_INT 35
8540: PUSH
8541: LD_INT 36
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 101
8584: PUSH
8585: LD_INT 102
8587: PUSH
8588: LD_INT 103
8590: PUSH
8591: LD_INT 104
8593: PUSH
8594: LD_INT 105
8596: PUSH
8597: LD_INT 106
8599: PUSH
8600: LD_INT 107
8602: PUSH
8603: LD_INT 108
8605: PUSH
8606: LD_INT 109
8608: PUSH
8609: LD_INT 110
8611: PUSH
8612: LD_INT 111
8614: PUSH
8615: LD_INT 112
8617: PUSH
8618: LD_INT 113
8620: PUSH
8621: LD_INT 114
8623: PUSH
8624: LD_INT 115
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: ST_TO_ADDR
8648: GO 8651
8650: POP
// end else
8651: GO 8870
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8653: LD_ADDR_VAR 0 1
8657: PUSH
8658: LD_INT 1
8660: PUSH
8661: LD_INT 2
8663: PUSH
8664: LD_INT 3
8666: PUSH
8667: LD_INT 4
8669: PUSH
8670: LD_INT 5
8672: PUSH
8673: LD_INT 6
8675: PUSH
8676: LD_INT 7
8678: PUSH
8679: LD_INT 8
8681: PUSH
8682: LD_INT 9
8684: PUSH
8685: LD_INT 10
8687: PUSH
8688: LD_INT 11
8690: PUSH
8691: LD_INT 12
8693: PUSH
8694: LD_INT 13
8696: PUSH
8697: LD_INT 14
8699: PUSH
8700: LD_INT 15
8702: PUSH
8703: LD_INT 16
8705: PUSH
8706: LD_INT 17
8708: PUSH
8709: LD_INT 18
8711: PUSH
8712: LD_INT 19
8714: PUSH
8715: LD_INT 20
8717: PUSH
8718: LD_INT 21
8720: PUSH
8721: LD_INT 22
8723: PUSH
8724: LD_INT 23
8726: PUSH
8727: LD_INT 24
8729: PUSH
8730: LD_INT 25
8732: PUSH
8733: LD_INT 26
8735: PUSH
8736: LD_INT 27
8738: PUSH
8739: LD_INT 28
8741: PUSH
8742: LD_INT 29
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 31
8750: PUSH
8751: LD_INT 32
8753: PUSH
8754: LD_INT 33
8756: PUSH
8757: LD_INT 34
8759: PUSH
8760: LD_INT 35
8762: PUSH
8763: LD_INT 36
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 101
8806: PUSH
8807: LD_INT 102
8809: PUSH
8810: LD_INT 103
8812: PUSH
8813: LD_INT 104
8815: PUSH
8816: LD_INT 105
8818: PUSH
8819: LD_INT 106
8821: PUSH
8822: LD_INT 107
8824: PUSH
8825: LD_INT 108
8827: PUSH
8828: LD_INT 109
8830: PUSH
8831: LD_INT 110
8833: PUSH
8834: LD_INT 111
8836: PUSH
8837: LD_INT 112
8839: PUSH
8840: LD_INT 113
8842: PUSH
8843: LD_INT 114
8845: PUSH
8846: LD_INT 115
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: ST_TO_ADDR
// if result then
8870: LD_VAR 0 1
8874: IFFALSE 9163
// begin normal :=  ;
8876: LD_ADDR_VAR 0 3
8880: PUSH
8881: LD_STRING 
8883: ST_TO_ADDR
// hardcore :=  ;
8884: LD_ADDR_VAR 0 4
8888: PUSH
8889: LD_STRING 
8891: ST_TO_ADDR
// for i = 1 to normalCounter do
8892: LD_ADDR_VAR 0 5
8896: PUSH
8897: DOUBLE
8898: LD_INT 1
8900: DEC
8901: ST_TO_ADDR
8902: LD_EXP 28
8906: PUSH
8907: FOR_TO
8908: IFFALSE 9009
// begin tmp := 0 ;
8910: LD_ADDR_VAR 0 2
8914: PUSH
8915: LD_STRING 0
8917: ST_TO_ADDR
// if result [ 1 ] then
8918: LD_VAR 0 1
8922: PUSH
8923: LD_INT 1
8925: ARRAY
8926: IFFALSE 8991
// if result [ 1 ] [ 1 ] = i then
8928: LD_VAR 0 1
8932: PUSH
8933: LD_INT 1
8935: ARRAY
8936: PUSH
8937: LD_INT 1
8939: ARRAY
8940: PUSH
8941: LD_VAR 0 5
8945: EQUAL
8946: IFFALSE 8991
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8948: LD_ADDR_VAR 0 1
8952: PUSH
8953: LD_VAR 0 1
8957: PPUSH
8958: LD_INT 1
8960: PPUSH
8961: LD_VAR 0 1
8965: PUSH
8966: LD_INT 1
8968: ARRAY
8969: PPUSH
8970: LD_INT 1
8972: PPUSH
8973: CALL_OW 3
8977: PPUSH
8978: CALL_OW 1
8982: ST_TO_ADDR
// tmp := 1 ;
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_STRING 1
8990: ST_TO_ADDR
// end ; normal := normal & tmp ;
8991: LD_ADDR_VAR 0 3
8995: PUSH
8996: LD_VAR 0 3
9000: PUSH
9001: LD_VAR 0 2
9005: STR
9006: ST_TO_ADDR
// end ;
9007: GO 8907
9009: POP
9010: POP
// for i = 1 to hardcoreCounter do
9011: LD_ADDR_VAR 0 5
9015: PUSH
9016: DOUBLE
9017: LD_INT 1
9019: DEC
9020: ST_TO_ADDR
9021: LD_EXP 29
9025: PUSH
9026: FOR_TO
9027: IFFALSE 9132
// begin tmp := 0 ;
9029: LD_ADDR_VAR 0 2
9033: PUSH
9034: LD_STRING 0
9036: ST_TO_ADDR
// if result [ 2 ] then
9037: LD_VAR 0 1
9041: PUSH
9042: LD_INT 2
9044: ARRAY
9045: IFFALSE 9114
// if result [ 2 ] [ 1 ] = 100 + i then
9047: LD_VAR 0 1
9051: PUSH
9052: LD_INT 2
9054: ARRAY
9055: PUSH
9056: LD_INT 1
9058: ARRAY
9059: PUSH
9060: LD_INT 100
9062: PUSH
9063: LD_VAR 0 5
9067: PLUS
9068: EQUAL
9069: IFFALSE 9114
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9071: LD_ADDR_VAR 0 1
9075: PUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_INT 2
9083: PPUSH
9084: LD_VAR 0 1
9088: PUSH
9089: LD_INT 2
9091: ARRAY
9092: PPUSH
9093: LD_INT 1
9095: PPUSH
9096: CALL_OW 3
9100: PPUSH
9101: CALL_OW 1
9105: ST_TO_ADDR
// tmp := 1 ;
9106: LD_ADDR_VAR 0 2
9110: PUSH
9111: LD_STRING 1
9113: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9114: LD_ADDR_VAR 0 4
9118: PUSH
9119: LD_VAR 0 4
9123: PUSH
9124: LD_VAR 0 2
9128: STR
9129: ST_TO_ADDR
// end ;
9130: GO 9026
9132: POP
9133: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9134: LD_STRING getStreamItemsFromMission("
9136: PUSH
9137: LD_VAR 0 3
9141: STR
9142: PUSH
9143: LD_STRING ","
9145: STR
9146: PUSH
9147: LD_VAR 0 4
9151: STR
9152: PUSH
9153: LD_STRING ")
9155: STR
9156: PPUSH
9157: CALL_OW 559
// end else
9161: GO 9170
// ToLua ( getStreamItemsFromMission("","") ) ;
9163: LD_STRING getStreamItemsFromMission("","")
9165: PPUSH
9166: CALL_OW 559
// end ;
9170: LD_VAR 0 1
9174: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9175: LD_EXP 27
9179: PUSH
9180: LD_EXP 32
9184: AND
9185: IFFALSE 9309
9187: GO 9189
9189: DISABLE
9190: LD_INT 0
9192: PPUSH
9193: PPUSH
// begin enable ;
9194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9195: LD_ADDR_VAR 0 2
9199: PUSH
9200: LD_INT 22
9202: PUSH
9203: LD_OWVAR 2
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 2
9214: PUSH
9215: LD_INT 34
9217: PUSH
9218: LD_INT 7
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: LD_INT 34
9227: PUSH
9228: LD_INT 45
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 34
9237: PUSH
9238: LD_INT 28
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 34
9247: PUSH
9248: LD_INT 47
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PPUSH
9266: CALL_OW 69
9270: ST_TO_ADDR
// if not tmp then
9271: LD_VAR 0 2
9275: NOT
9276: IFFALSE 9280
// exit ;
9278: GO 9309
// for i in tmp do
9280: LD_ADDR_VAR 0 1
9284: PUSH
9285: LD_VAR 0 2
9289: PUSH
9290: FOR_IN
9291: IFFALSE 9307
// begin SetLives ( i , 0 ) ;
9293: LD_VAR 0 1
9297: PPUSH
9298: LD_INT 0
9300: PPUSH
9301: CALL_OW 234
// end ;
9305: GO 9290
9307: POP
9308: POP
// end ;
9309: PPOPN 2
9311: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9312: LD_EXP 27
9316: PUSH
9317: LD_EXP 33
9321: AND
9322: IFFALSE 9406
9324: GO 9326
9326: DISABLE
9327: LD_INT 0
9329: PPUSH
9330: PPUSH
// begin enable ;
9331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9332: LD_ADDR_VAR 0 2
9336: PUSH
9337: LD_INT 22
9339: PUSH
9340: LD_OWVAR 2
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 32
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: ST_TO_ADDR
// if not tmp then
9368: LD_VAR 0 2
9372: NOT
9373: IFFALSE 9377
// exit ;
9375: GO 9406
// for i in tmp do
9377: LD_ADDR_VAR 0 1
9381: PUSH
9382: LD_VAR 0 2
9386: PUSH
9387: FOR_IN
9388: IFFALSE 9404
// begin SetLives ( i , 0 ) ;
9390: LD_VAR 0 1
9394: PPUSH
9395: LD_INT 0
9397: PPUSH
9398: CALL_OW 234
// end ;
9402: GO 9387
9404: POP
9405: POP
// end ;
9406: PPOPN 2
9408: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9409: LD_EXP 27
9413: PUSH
9414: LD_EXP 30
9418: AND
9419: IFFALSE 9512
9421: GO 9423
9423: DISABLE
9424: LD_INT 0
9426: PPUSH
// begin enable ;
9427: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9428: LD_ADDR_VAR 0 1
9432: PUSH
9433: LD_INT 22
9435: PUSH
9436: LD_OWVAR 2
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: LD_INT 25
9450: PUSH
9451: LD_INT 5
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 25
9460: PUSH
9461: LD_INT 9
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 25
9470: PUSH
9471: LD_INT 8
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PPUSH
9488: CALL_OW 69
9492: PUSH
9493: FOR_IN
9494: IFFALSE 9510
// begin SetClass ( i , 1 ) ;
9496: LD_VAR 0 1
9500: PPUSH
9501: LD_INT 1
9503: PPUSH
9504: CALL_OW 336
// end ;
9508: GO 9493
9510: POP
9511: POP
// end ;
9512: PPOPN 1
9514: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9515: LD_EXP 27
9519: PUSH
9520: LD_EXP 31
9524: AND
9525: PUSH
9526: LD_OWVAR 65
9530: PUSH
9531: LD_INT 7
9533: LESS
9534: AND
9535: IFFALSE 9549
9537: GO 9539
9539: DISABLE
// begin enable ;
9540: ENABLE
// game_speed := 7 ;
9541: LD_ADDR_OWVAR 65
9545: PUSH
9546: LD_INT 7
9548: ST_TO_ADDR
// end ;
9549: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9550: LD_EXP 27
9554: PUSH
9555: LD_EXP 34
9559: AND
9560: IFFALSE 9762
9562: GO 9564
9564: DISABLE
9565: LD_INT 0
9567: PPUSH
9568: PPUSH
9569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9570: LD_ADDR_VAR 0 3
9574: PUSH
9575: LD_INT 81
9577: PUSH
9578: LD_OWVAR 2
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 21
9589: PUSH
9590: LD_INT 1
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PPUSH
9601: CALL_OW 69
9605: ST_TO_ADDR
// if not tmp then
9606: LD_VAR 0 3
9610: NOT
9611: IFFALSE 9615
// exit ;
9613: GO 9762
// if tmp > 5 then
9615: LD_VAR 0 3
9619: PUSH
9620: LD_INT 5
9622: GREATER
9623: IFFALSE 9635
// k := 5 else
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: LD_INT 5
9632: ST_TO_ADDR
9633: GO 9645
// k := tmp ;
9635: LD_ADDR_VAR 0 2
9639: PUSH
9640: LD_VAR 0 3
9644: ST_TO_ADDR
// for i := 1 to k do
9645: LD_ADDR_VAR 0 1
9649: PUSH
9650: DOUBLE
9651: LD_INT 1
9653: DEC
9654: ST_TO_ADDR
9655: LD_VAR 0 2
9659: PUSH
9660: FOR_TO
9661: IFFALSE 9760
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9663: LD_VAR 0 3
9667: PUSH
9668: LD_VAR 0 1
9672: ARRAY
9673: PPUSH
9674: LD_VAR 0 1
9678: PUSH
9679: LD_INT 4
9681: MOD
9682: PUSH
9683: LD_INT 1
9685: PLUS
9686: PPUSH
9687: CALL_OW 259
9691: PUSH
9692: LD_INT 10
9694: LESS
9695: IFFALSE 9758
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9697: LD_VAR 0 3
9701: PUSH
9702: LD_VAR 0 1
9706: ARRAY
9707: PPUSH
9708: LD_VAR 0 1
9712: PUSH
9713: LD_INT 4
9715: MOD
9716: PUSH
9717: LD_INT 1
9719: PLUS
9720: PPUSH
9721: LD_VAR 0 3
9725: PUSH
9726: LD_VAR 0 1
9730: ARRAY
9731: PPUSH
9732: LD_VAR 0 1
9736: PUSH
9737: LD_INT 4
9739: MOD
9740: PUSH
9741: LD_INT 1
9743: PLUS
9744: PPUSH
9745: CALL_OW 259
9749: PUSH
9750: LD_INT 1
9752: PLUS
9753: PPUSH
9754: CALL_OW 237
9758: GO 9660
9760: POP
9761: POP
// end ;
9762: PPOPN 3
9764: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9765: LD_EXP 27
9769: PUSH
9770: LD_EXP 35
9774: AND
9775: IFFALSE 9795
9777: GO 9779
9779: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9780: LD_INT 4
9782: PPUSH
9783: LD_OWVAR 2
9787: PPUSH
9788: LD_INT 0
9790: PPUSH
9791: CALL_OW 324
9795: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9796: LD_EXP 27
9800: PUSH
9801: LD_EXP 64
9805: AND
9806: IFFALSE 9826
9808: GO 9810
9810: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9811: LD_INT 19
9813: PPUSH
9814: LD_OWVAR 2
9818: PPUSH
9819: LD_INT 0
9821: PPUSH
9822: CALL_OW 324
9826: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9827: LD_EXP 27
9831: PUSH
9832: LD_EXP 36
9836: AND
9837: IFFALSE 9939
9839: GO 9841
9841: DISABLE
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
// begin enable ;
9846: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9847: LD_ADDR_VAR 0 2
9851: PUSH
9852: LD_INT 22
9854: PUSH
9855: LD_OWVAR 2
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 2
9866: PUSH
9867: LD_INT 34
9869: PUSH
9870: LD_INT 11
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 34
9879: PUSH
9880: LD_INT 30
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: ST_TO_ADDR
// if not tmp then
9901: LD_VAR 0 2
9905: NOT
9906: IFFALSE 9910
// exit ;
9908: GO 9939
// for i in tmp do
9910: LD_ADDR_VAR 0 1
9914: PUSH
9915: LD_VAR 0 2
9919: PUSH
9920: FOR_IN
9921: IFFALSE 9937
// begin SetLives ( i , 0 ) ;
9923: LD_VAR 0 1
9927: PPUSH
9928: LD_INT 0
9930: PPUSH
9931: CALL_OW 234
// end ;
9935: GO 9920
9937: POP
9938: POP
// end ;
9939: PPOPN 2
9941: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9942: LD_EXP 27
9946: PUSH
9947: LD_EXP 37
9951: AND
9952: IFFALSE 9972
9954: GO 9956
9956: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9957: LD_INT 32
9959: PPUSH
9960: LD_OWVAR 2
9964: PPUSH
9965: LD_INT 0
9967: PPUSH
9968: CALL_OW 324
9972: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9973: LD_EXP 27
9977: PUSH
9978: LD_EXP 38
9982: AND
9983: IFFALSE 10164
9985: GO 9987
9987: DISABLE
9988: LD_INT 0
9990: PPUSH
9991: PPUSH
9992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9993: LD_ADDR_VAR 0 2
9997: PUSH
9998: LD_INT 22
10000: PUSH
10001: LD_OWVAR 2
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 33
10012: PUSH
10013: LD_INT 3
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PPUSH
10024: CALL_OW 69
10028: ST_TO_ADDR
// if not tmp then
10029: LD_VAR 0 2
10033: NOT
10034: IFFALSE 10038
// exit ;
10036: GO 10164
// side := 0 ;
10038: LD_ADDR_VAR 0 3
10042: PUSH
10043: LD_INT 0
10045: ST_TO_ADDR
// for i := 1 to 8 do
10046: LD_ADDR_VAR 0 1
10050: PUSH
10051: DOUBLE
10052: LD_INT 1
10054: DEC
10055: ST_TO_ADDR
10056: LD_INT 8
10058: PUSH
10059: FOR_TO
10060: IFFALSE 10108
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10062: LD_OWVAR 2
10066: PUSH
10067: LD_VAR 0 1
10071: NONEQUAL
10072: PUSH
10073: LD_OWVAR 2
10077: PPUSH
10078: LD_VAR 0 1
10082: PPUSH
10083: CALL_OW 81
10087: PUSH
10088: LD_INT 2
10090: EQUAL
10091: AND
10092: IFFALSE 10106
// begin side := i ;
10094: LD_ADDR_VAR 0 3
10098: PUSH
10099: LD_VAR 0 1
10103: ST_TO_ADDR
// break ;
10104: GO 10108
// end ;
10106: GO 10059
10108: POP
10109: POP
// if not side then
10110: LD_VAR 0 3
10114: NOT
10115: IFFALSE 10119
// exit ;
10117: GO 10164
// for i := 1 to tmp do
10119: LD_ADDR_VAR 0 1
10123: PUSH
10124: DOUBLE
10125: LD_INT 1
10127: DEC
10128: ST_TO_ADDR
10129: LD_VAR 0 2
10133: PUSH
10134: FOR_TO
10135: IFFALSE 10162
// if Prob ( 60 ) then
10137: LD_INT 60
10139: PPUSH
10140: CALL_OW 13
10144: IFFALSE 10160
// SetSide ( i , side ) ;
10146: LD_VAR 0 1
10150: PPUSH
10151: LD_VAR 0 3
10155: PPUSH
10156: CALL_OW 235
10160: GO 10134
10162: POP
10163: POP
// end ;
10164: PPOPN 3
10166: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10167: LD_EXP 27
10171: PUSH
10172: LD_EXP 40
10176: AND
10177: IFFALSE 10296
10179: GO 10181
10181: DISABLE
10182: LD_INT 0
10184: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10185: LD_ADDR_VAR 0 1
10189: PUSH
10190: LD_INT 22
10192: PUSH
10193: LD_OWVAR 2
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 21
10204: PUSH
10205: LD_INT 1
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 3
10214: PUSH
10215: LD_INT 23
10217: PUSH
10218: LD_INT 0
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: PUSH
10239: FOR_IN
10240: IFFALSE 10294
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10242: LD_VAR 0 1
10246: PPUSH
10247: CALL_OW 257
10251: PUSH
10252: LD_INT 1
10254: PUSH
10255: LD_INT 2
10257: PUSH
10258: LD_INT 3
10260: PUSH
10261: LD_INT 4
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: IN
10270: IFFALSE 10292
// SetClass ( un , rand ( 1 , 4 ) ) ;
10272: LD_VAR 0 1
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: LD_INT 4
10282: PPUSH
10283: CALL_OW 12
10287: PPUSH
10288: CALL_OW 336
10292: GO 10239
10294: POP
10295: POP
// end ;
10296: PPOPN 1
10298: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10299: LD_EXP 27
10303: PUSH
10304: LD_EXP 39
10308: AND
10309: IFFALSE 10388
10311: GO 10313
10313: DISABLE
10314: LD_INT 0
10316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10317: LD_ADDR_VAR 0 1
10321: PUSH
10322: LD_INT 22
10324: PUSH
10325: LD_OWVAR 2
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 21
10336: PUSH
10337: LD_INT 3
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: ST_TO_ADDR
// if not tmp then
10353: LD_VAR 0 1
10357: NOT
10358: IFFALSE 10362
// exit ;
10360: GO 10388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10362: LD_VAR 0 1
10366: PUSH
10367: LD_INT 1
10369: PPUSH
10370: LD_VAR 0 1
10374: PPUSH
10375: CALL_OW 12
10379: ARRAY
10380: PPUSH
10381: LD_INT 100
10383: PPUSH
10384: CALL_OW 234
// end ;
10388: PPOPN 1
10390: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10391: LD_EXP 27
10395: PUSH
10396: LD_EXP 41
10400: AND
10401: IFFALSE 10499
10403: GO 10405
10405: DISABLE
10406: LD_INT 0
10408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10409: LD_ADDR_VAR 0 1
10413: PUSH
10414: LD_INT 22
10416: PUSH
10417: LD_OWVAR 2
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 21
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PPUSH
10440: CALL_OW 69
10444: ST_TO_ADDR
// if not tmp then
10445: LD_VAR 0 1
10449: NOT
10450: IFFALSE 10454
// exit ;
10452: GO 10499
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10454: LD_VAR 0 1
10458: PUSH
10459: LD_INT 1
10461: PPUSH
10462: LD_VAR 0 1
10466: PPUSH
10467: CALL_OW 12
10471: ARRAY
10472: PPUSH
10473: LD_INT 1
10475: PPUSH
10476: LD_INT 4
10478: PPUSH
10479: CALL_OW 12
10483: PPUSH
10484: LD_INT 3000
10486: PPUSH
10487: LD_INT 9000
10489: PPUSH
10490: CALL_OW 12
10494: PPUSH
10495: CALL_OW 492
// end ;
10499: PPOPN 1
10501: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10502: LD_EXP 27
10506: PUSH
10507: LD_EXP 42
10511: AND
10512: IFFALSE 10532
10514: GO 10516
10516: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10517: LD_INT 1
10519: PPUSH
10520: LD_OWVAR 2
10524: PPUSH
10525: LD_INT 0
10527: PPUSH
10528: CALL_OW 324
10532: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10533: LD_EXP 27
10537: PUSH
10538: LD_EXP 43
10542: AND
10543: IFFALSE 10626
10545: GO 10547
10547: DISABLE
10548: LD_INT 0
10550: PPUSH
10551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10552: LD_ADDR_VAR 0 2
10556: PUSH
10557: LD_INT 22
10559: PUSH
10560: LD_OWVAR 2
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: LD_INT 21
10571: PUSH
10572: LD_INT 3
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PPUSH
10583: CALL_OW 69
10587: ST_TO_ADDR
// if not tmp then
10588: LD_VAR 0 2
10592: NOT
10593: IFFALSE 10597
// exit ;
10595: GO 10626
// for i in tmp do
10597: LD_ADDR_VAR 0 1
10601: PUSH
10602: LD_VAR 0 2
10606: PUSH
10607: FOR_IN
10608: IFFALSE 10624
// SetBLevel ( i , 10 ) ;
10610: LD_VAR 0 1
10614: PPUSH
10615: LD_INT 10
10617: PPUSH
10618: CALL_OW 241
10622: GO 10607
10624: POP
10625: POP
// end ;
10626: PPOPN 2
10628: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10629: LD_EXP 27
10633: PUSH
10634: LD_EXP 44
10638: AND
10639: IFFALSE 10750
10641: GO 10643
10643: DISABLE
10644: LD_INT 0
10646: PPUSH
10647: PPUSH
10648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10649: LD_ADDR_VAR 0 3
10653: PUSH
10654: LD_INT 22
10656: PUSH
10657: LD_OWVAR 2
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 25
10668: PUSH
10669: LD_INT 1
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: ST_TO_ADDR
// if not tmp then
10685: LD_VAR 0 3
10689: NOT
10690: IFFALSE 10694
// exit ;
10692: GO 10750
// un := tmp [ rand ( 1 , tmp ) ] ;
10694: LD_ADDR_VAR 0 2
10698: PUSH
10699: LD_VAR 0 3
10703: PUSH
10704: LD_INT 1
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: CALL_OW 12
10716: ARRAY
10717: ST_TO_ADDR
// if Crawls ( un ) then
10718: LD_VAR 0 2
10722: PPUSH
10723: CALL_OW 318
10727: IFFALSE 10738
// ComWalk ( un ) ;
10729: LD_VAR 0 2
10733: PPUSH
10734: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10738: LD_VAR 0 2
10742: PPUSH
10743: LD_INT 5
10745: PPUSH
10746: CALL_OW 336
// end ;
10750: PPOPN 3
10752: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10753: LD_EXP 27
10757: PUSH
10758: LD_EXP 45
10762: AND
10763: PUSH
10764: LD_OWVAR 67
10768: PUSH
10769: LD_INT 3
10771: LESS
10772: AND
10773: IFFALSE 10792
10775: GO 10777
10777: DISABLE
// Difficulty := Difficulty + 1 ;
10778: LD_ADDR_OWVAR 67
10782: PUSH
10783: LD_OWVAR 67
10787: PUSH
10788: LD_INT 1
10790: PLUS
10791: ST_TO_ADDR
10792: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10793: LD_EXP 27
10797: PUSH
10798: LD_EXP 46
10802: AND
10803: IFFALSE 10906
10805: GO 10807
10807: DISABLE
10808: LD_INT 0
10810: PPUSH
// begin for i := 1 to 5 do
10811: LD_ADDR_VAR 0 1
10815: PUSH
10816: DOUBLE
10817: LD_INT 1
10819: DEC
10820: ST_TO_ADDR
10821: LD_INT 5
10823: PUSH
10824: FOR_TO
10825: IFFALSE 10904
// begin uc_nation := nation_nature ;
10827: LD_ADDR_OWVAR 21
10831: PUSH
10832: LD_INT 0
10834: ST_TO_ADDR
// uc_side := 0 ;
10835: LD_ADDR_OWVAR 20
10839: PUSH
10840: LD_INT 0
10842: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10843: LD_ADDR_OWVAR 29
10847: PUSH
10848: LD_INT 12
10850: PUSH
10851: LD_INT 12
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: ST_TO_ADDR
// hc_agressivity := 20 ;
10858: LD_ADDR_OWVAR 35
10862: PUSH
10863: LD_INT 20
10865: ST_TO_ADDR
// hc_class := class_tiger ;
10866: LD_ADDR_OWVAR 28
10870: PUSH
10871: LD_INT 14
10873: ST_TO_ADDR
// hc_gallery :=  ;
10874: LD_ADDR_OWVAR 33
10878: PUSH
10879: LD_STRING 
10881: ST_TO_ADDR
// hc_name :=  ;
10882: LD_ADDR_OWVAR 26
10886: PUSH
10887: LD_STRING 
10889: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10890: CALL_OW 44
10894: PPUSH
10895: LD_INT 0
10897: PPUSH
10898: CALL_OW 51
// end ;
10902: GO 10824
10904: POP
10905: POP
// end ;
10906: PPOPN 1
10908: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10909: LD_EXP 27
10913: PUSH
10914: LD_EXP 47
10918: AND
10919: IFFALSE 10928
10921: GO 10923
10923: DISABLE
// StreamSibBomb ;
10924: CALL 10929 0 0
10928: END
// export function StreamSibBomb ; var i , x , y ; begin
10929: LD_INT 0
10931: PPUSH
10932: PPUSH
10933: PPUSH
10934: PPUSH
// result := false ;
10935: LD_ADDR_VAR 0 1
10939: PUSH
10940: LD_INT 0
10942: ST_TO_ADDR
// for i := 1 to 16 do
10943: LD_ADDR_VAR 0 2
10947: PUSH
10948: DOUBLE
10949: LD_INT 1
10951: DEC
10952: ST_TO_ADDR
10953: LD_INT 16
10955: PUSH
10956: FOR_TO
10957: IFFALSE 11156
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10959: LD_ADDR_VAR 0 3
10963: PUSH
10964: LD_INT 10
10966: PUSH
10967: LD_INT 20
10969: PUSH
10970: LD_INT 30
10972: PUSH
10973: LD_INT 40
10975: PUSH
10976: LD_INT 50
10978: PUSH
10979: LD_INT 60
10981: PUSH
10982: LD_INT 70
10984: PUSH
10985: LD_INT 80
10987: PUSH
10988: LD_INT 90
10990: PUSH
10991: LD_INT 100
10993: PUSH
10994: LD_INT 110
10996: PUSH
10997: LD_INT 120
10999: PUSH
11000: LD_INT 130
11002: PUSH
11003: LD_INT 140
11005: PUSH
11006: LD_INT 150
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 1
11028: PPUSH
11029: LD_INT 15
11031: PPUSH
11032: CALL_OW 12
11036: ARRAY
11037: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11038: LD_ADDR_VAR 0 4
11042: PUSH
11043: LD_INT 10
11045: PUSH
11046: LD_INT 20
11048: PUSH
11049: LD_INT 30
11051: PUSH
11052: LD_INT 40
11054: PUSH
11055: LD_INT 50
11057: PUSH
11058: LD_INT 60
11060: PUSH
11061: LD_INT 70
11063: PUSH
11064: LD_INT 80
11066: PUSH
11067: LD_INT 90
11069: PUSH
11070: LD_INT 100
11072: PUSH
11073: LD_INT 110
11075: PUSH
11076: LD_INT 120
11078: PUSH
11079: LD_INT 130
11081: PUSH
11082: LD_INT 140
11084: PUSH
11085: LD_INT 150
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 1
11107: PPUSH
11108: LD_INT 15
11110: PPUSH
11111: CALL_OW 12
11115: ARRAY
11116: ST_TO_ADDR
// if ValidHex ( x , y ) then
11117: LD_VAR 0 3
11121: PPUSH
11122: LD_VAR 0 4
11126: PPUSH
11127: CALL_OW 488
11131: IFFALSE 11154
// begin result := [ x , y ] ;
11133: LD_ADDR_VAR 0 1
11137: PUSH
11138: LD_VAR 0 3
11142: PUSH
11143: LD_VAR 0 4
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: ST_TO_ADDR
// break ;
11152: GO 11156
// end ; end ;
11154: GO 10956
11156: POP
11157: POP
// if result then
11158: LD_VAR 0 1
11162: IFFALSE 11222
// begin ToLua ( playSibBomb() ) ;
11164: LD_STRING playSibBomb()
11166: PPUSH
11167: CALL_OW 559
// wait ( 0 0$14 ) ;
11171: LD_INT 490
11173: PPUSH
11174: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11178: LD_VAR 0 1
11182: PUSH
11183: LD_INT 1
11185: ARRAY
11186: PPUSH
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 2
11194: ARRAY
11195: PPUSH
11196: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11200: LD_VAR 0 1
11204: PUSH
11205: LD_INT 1
11207: ARRAY
11208: PPUSH
11209: LD_VAR 0 1
11213: PUSH
11214: LD_INT 2
11216: ARRAY
11217: PPUSH
11218: CALL_OW 429
// end ; end ;
11222: LD_VAR 0 1
11226: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11227: LD_EXP 27
11231: PUSH
11232: LD_EXP 49
11236: AND
11237: IFFALSE 11249
11239: GO 11241
11241: DISABLE
// YouLost (  ) ;
11242: LD_STRING 
11244: PPUSH
11245: CALL_OW 104
11249: END
// every 0 0$1 trigger StreamModeActive and sFog do
11250: LD_EXP 27
11254: PUSH
11255: LD_EXP 48
11259: AND
11260: IFFALSE 11274
11262: GO 11264
11264: DISABLE
// FogOff ( your_side ) ;
11265: LD_OWVAR 2
11269: PPUSH
11270: CALL_OW 344
11274: END
// every 0 0$1 trigger StreamModeActive and sSun do
11275: LD_EXP 27
11279: PUSH
11280: LD_EXP 50
11284: AND
11285: IFFALSE 11313
11287: GO 11289
11289: DISABLE
// begin solar_recharge_percent := 0 ;
11290: LD_ADDR_OWVAR 79
11294: PUSH
11295: LD_INT 0
11297: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11298: LD_INT 10500
11300: PPUSH
11301: CALL_OW 67
// solar_recharge_percent := 100 ;
11305: LD_ADDR_OWVAR 79
11309: PUSH
11310: LD_INT 100
11312: ST_TO_ADDR
// end ;
11313: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11314: LD_EXP 27
11318: PUSH
11319: LD_EXP 51
11323: AND
11324: IFFALSE 11563
11326: GO 11328
11328: DISABLE
11329: LD_INT 0
11331: PPUSH
11332: PPUSH
11333: PPUSH
// begin tmp := [ ] ;
11334: LD_ADDR_VAR 0 3
11338: PUSH
11339: EMPTY
11340: ST_TO_ADDR
// for i := 1 to 6 do
11341: LD_ADDR_VAR 0 1
11345: PUSH
11346: DOUBLE
11347: LD_INT 1
11349: DEC
11350: ST_TO_ADDR
11351: LD_INT 6
11353: PUSH
11354: FOR_TO
11355: IFFALSE 11460
// begin uc_nation := nation_nature ;
11357: LD_ADDR_OWVAR 21
11361: PUSH
11362: LD_INT 0
11364: ST_TO_ADDR
// uc_side := 0 ;
11365: LD_ADDR_OWVAR 20
11369: PUSH
11370: LD_INT 0
11372: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11373: LD_ADDR_OWVAR 29
11377: PUSH
11378: LD_INT 12
11380: PUSH
11381: LD_INT 12
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: ST_TO_ADDR
// hc_agressivity := 20 ;
11388: LD_ADDR_OWVAR 35
11392: PUSH
11393: LD_INT 20
11395: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11396: LD_ADDR_OWVAR 28
11400: PUSH
11401: LD_INT 17
11403: ST_TO_ADDR
// hc_gallery :=  ;
11404: LD_ADDR_OWVAR 33
11408: PUSH
11409: LD_STRING 
11411: ST_TO_ADDR
// hc_name :=  ;
11412: LD_ADDR_OWVAR 26
11416: PUSH
11417: LD_STRING 
11419: ST_TO_ADDR
// un := CreateHuman ;
11420: LD_ADDR_VAR 0 2
11424: PUSH
11425: CALL_OW 44
11429: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11430: LD_VAR 0 2
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: CALL_OW 51
// tmp := tmp ^ un ;
11442: LD_ADDR_VAR 0 3
11446: PUSH
11447: LD_VAR 0 3
11451: PUSH
11452: LD_VAR 0 2
11456: ADD
11457: ST_TO_ADDR
// end ;
11458: GO 11354
11460: POP
11461: POP
// repeat wait ( 0 0$1 ) ;
11462: LD_INT 35
11464: PPUSH
11465: CALL_OW 67
// for un in tmp do
11469: LD_ADDR_VAR 0 2
11473: PUSH
11474: LD_VAR 0 3
11478: PUSH
11479: FOR_IN
11480: IFFALSE 11554
// begin if IsDead ( un ) then
11482: LD_VAR 0 2
11486: PPUSH
11487: CALL_OW 301
11491: IFFALSE 11511
// begin tmp := tmp diff un ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_VAR 0 3
11502: PUSH
11503: LD_VAR 0 2
11507: DIFF
11508: ST_TO_ADDR
// continue ;
11509: GO 11479
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11511: LD_VAR 0 2
11515: PPUSH
11516: LD_INT 3
11518: PUSH
11519: LD_INT 22
11521: PUSH
11522: LD_INT 0
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: PPUSH
11538: LD_VAR 0 2
11542: PPUSH
11543: CALL_OW 74
11547: PPUSH
11548: CALL_OW 115
// end ;
11552: GO 11479
11554: POP
11555: POP
// until not tmp ;
11556: LD_VAR 0 3
11560: NOT
11561: IFFALSE 11462
// end ;
11563: PPOPN 3
11565: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11566: LD_EXP 27
11570: PUSH
11571: LD_EXP 52
11575: AND
11576: IFFALSE 11630
11578: GO 11580
11580: DISABLE
// begin ToLua ( displayTroll(); ) ;
11581: LD_STRING displayTroll();
11583: PPUSH
11584: CALL_OW 559
// wait ( 3 3$00 ) ;
11588: LD_INT 6300
11590: PPUSH
11591: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11595: LD_STRING hideTroll();
11597: PPUSH
11598: CALL_OW 559
// wait ( 1 1$00 ) ;
11602: LD_INT 2100
11604: PPUSH
11605: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11609: LD_STRING displayTroll();
11611: PPUSH
11612: CALL_OW 559
// wait ( 1 1$00 ) ;
11616: LD_INT 2100
11618: PPUSH
11619: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11623: LD_STRING hideTroll();
11625: PPUSH
11626: CALL_OW 559
// end ;
11630: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11631: LD_EXP 27
11635: PUSH
11636: LD_EXP 53
11640: AND
11641: IFFALSE 11704
11643: GO 11645
11645: DISABLE
11646: LD_INT 0
11648: PPUSH
// begin p := 0 ;
11649: LD_ADDR_VAR 0 1
11653: PUSH
11654: LD_INT 0
11656: ST_TO_ADDR
// repeat game_speed := 1 ;
11657: LD_ADDR_OWVAR 65
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11665: LD_INT 35
11667: PPUSH
11668: CALL_OW 67
// p := p + 1 ;
11672: LD_ADDR_VAR 0 1
11676: PUSH
11677: LD_VAR 0 1
11681: PUSH
11682: LD_INT 1
11684: PLUS
11685: ST_TO_ADDR
// until p >= 60 ;
11686: LD_VAR 0 1
11690: PUSH
11691: LD_INT 60
11693: GREATEREQUAL
11694: IFFALSE 11657
// game_speed := 4 ;
11696: LD_ADDR_OWVAR 65
11700: PUSH
11701: LD_INT 4
11703: ST_TO_ADDR
// end ;
11704: PPOPN 1
11706: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11707: LD_EXP 27
11711: PUSH
11712: LD_EXP 54
11716: AND
11717: IFFALSE 11863
11719: GO 11721
11721: DISABLE
11722: LD_INT 0
11724: PPUSH
11725: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11726: LD_ADDR_VAR 0 1
11730: PUSH
11731: LD_INT 22
11733: PUSH
11734: LD_OWVAR 2
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 2
11745: PUSH
11746: LD_INT 30
11748: PUSH
11749: LD_INT 0
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 30
11758: PUSH
11759: LD_INT 1
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: LIST
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PPUSH
11775: CALL_OW 69
11779: ST_TO_ADDR
// if not depot then
11780: LD_VAR 0 1
11784: NOT
11785: IFFALSE 11789
// exit ;
11787: GO 11863
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11789: LD_ADDR_VAR 0 2
11793: PUSH
11794: LD_VAR 0 1
11798: PUSH
11799: LD_INT 1
11801: PPUSH
11802: LD_VAR 0 1
11806: PPUSH
11807: CALL_OW 12
11811: ARRAY
11812: PPUSH
11813: CALL_OW 274
11817: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11818: LD_VAR 0 2
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: LD_INT 0
11828: PPUSH
11829: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 2
11840: PPUSH
11841: LD_INT 0
11843: PPUSH
11844: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11848: LD_VAR 0 2
11852: PPUSH
11853: LD_INT 3
11855: PPUSH
11856: LD_INT 0
11858: PPUSH
11859: CALL_OW 277
// end ;
11863: PPOPN 2
11865: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11866: LD_EXP 27
11870: PUSH
11871: LD_EXP 55
11875: AND
11876: IFFALSE 11973
11878: GO 11880
11880: DISABLE
11881: LD_INT 0
11883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11884: LD_ADDR_VAR 0 1
11888: PUSH
11889: LD_INT 22
11891: PUSH
11892: LD_OWVAR 2
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 21
11903: PUSH
11904: LD_INT 1
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: LD_INT 23
11916: PUSH
11917: LD_INT 0
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: PPUSH
11933: CALL_OW 69
11937: ST_TO_ADDR
// if not tmp then
11938: LD_VAR 0 1
11942: NOT
11943: IFFALSE 11947
// exit ;
11945: GO 11973
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11947: LD_VAR 0 1
11951: PUSH
11952: LD_INT 1
11954: PPUSH
11955: LD_VAR 0 1
11959: PPUSH
11960: CALL_OW 12
11964: ARRAY
11965: PPUSH
11966: LD_INT 200
11968: PPUSH
11969: CALL_OW 234
// end ;
11973: PPOPN 1
11975: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11976: LD_EXP 27
11980: PUSH
11981: LD_EXP 56
11985: AND
11986: IFFALSE 12065
11988: GO 11990
11990: DISABLE
11991: LD_INT 0
11993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11994: LD_ADDR_VAR 0 1
11998: PUSH
11999: LD_INT 22
12001: PUSH
12002: LD_OWVAR 2
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 21
12013: PUSH
12014: LD_INT 2
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PPUSH
12025: CALL_OW 69
12029: ST_TO_ADDR
// if not tmp then
12030: LD_VAR 0 1
12034: NOT
12035: IFFALSE 12039
// exit ;
12037: GO 12065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12039: LD_VAR 0 1
12043: PUSH
12044: LD_INT 1
12046: PPUSH
12047: LD_VAR 0 1
12051: PPUSH
12052: CALL_OW 12
12056: ARRAY
12057: PPUSH
12058: LD_INT 60
12060: PPUSH
12061: CALL_OW 234
// end ;
12065: PPOPN 1
12067: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12068: LD_EXP 27
12072: PUSH
12073: LD_EXP 57
12077: AND
12078: IFFALSE 12177
12080: GO 12082
12082: DISABLE
12083: LD_INT 0
12085: PPUSH
12086: PPUSH
// begin enable ;
12087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_OWVAR 2
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 61
12107: PUSH
12108: EMPTY
12109: LIST
12110: PUSH
12111: LD_INT 33
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: LIST
12125: PPUSH
12126: CALL_OW 69
12130: ST_TO_ADDR
// if not tmp then
12131: LD_VAR 0 1
12135: NOT
12136: IFFALSE 12140
// exit ;
12138: GO 12177
// for i in tmp do
12140: LD_ADDR_VAR 0 2
12144: PUSH
12145: LD_VAR 0 1
12149: PUSH
12150: FOR_IN
12151: IFFALSE 12175
// if IsControledBy ( i ) then
12153: LD_VAR 0 2
12157: PPUSH
12158: CALL_OW 312
12162: IFFALSE 12173
// ComUnlink ( i ) ;
12164: LD_VAR 0 2
12168: PPUSH
12169: CALL_OW 136
12173: GO 12150
12175: POP
12176: POP
// end ;
12177: PPOPN 2
12179: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12180: LD_EXP 27
12184: PUSH
12185: LD_EXP 58
12189: AND
12190: IFFALSE 12330
12192: GO 12194
12194: DISABLE
12195: LD_INT 0
12197: PPUSH
12198: PPUSH
// begin ToLua ( displayPowell(); ) ;
12199: LD_STRING displayPowell();
12201: PPUSH
12202: CALL_OW 559
// uc_side := 0 ;
12206: LD_ADDR_OWVAR 20
12210: PUSH
12211: LD_INT 0
12213: ST_TO_ADDR
// uc_nation := 2 ;
12214: LD_ADDR_OWVAR 21
12218: PUSH
12219: LD_INT 2
12221: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12222: LD_ADDR_OWVAR 37
12226: PUSH
12227: LD_INT 14
12229: ST_TO_ADDR
// vc_engine := engine_siberite ;
12230: LD_ADDR_OWVAR 39
12234: PUSH
12235: LD_INT 3
12237: ST_TO_ADDR
// vc_control := control_apeman ;
12238: LD_ADDR_OWVAR 38
12242: PUSH
12243: LD_INT 5
12245: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12246: LD_ADDR_OWVAR 40
12250: PUSH
12251: LD_INT 29
12253: ST_TO_ADDR
// un := CreateVehicle ;
12254: LD_ADDR_VAR 0 2
12258: PUSH
12259: CALL_OW 45
12263: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12264: LD_VAR 0 2
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12276: LD_INT 35
12278: PPUSH
12279: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12283: LD_VAR 0 2
12287: PPUSH
12288: LD_INT 22
12290: PUSH
12291: LD_OWVAR 2
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PPUSH
12300: CALL_OW 69
12304: PPUSH
12305: LD_VAR 0 2
12309: PPUSH
12310: CALL_OW 74
12314: PPUSH
12315: CALL_OW 115
// until IsDead ( un ) ;
12319: LD_VAR 0 2
12323: PPUSH
12324: CALL_OW 301
12328: IFFALSE 12276
// end ;
12330: PPOPN 2
12332: END
// every 0 0$1 trigger StreamModeActive and sStu do
12333: LD_EXP 27
12337: PUSH
12338: LD_EXP 66
12342: AND
12343: IFFALSE 12359
12345: GO 12347
12347: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12348: LD_STRING displayStucuk();
12350: PPUSH
12351: CALL_OW 559
// ResetFog ;
12355: CALL_OW 335
// end ;
12359: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12360: LD_EXP 27
12364: PUSH
12365: LD_EXP 59
12369: AND
12370: IFFALSE 12511
12372: GO 12374
12374: DISABLE
12375: LD_INT 0
12377: PPUSH
12378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: LD_INT 22
12386: PUSH
12387: LD_OWVAR 2
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 21
12398: PUSH
12399: LD_INT 1
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 69
12414: ST_TO_ADDR
// if not tmp then
12415: LD_VAR 0 2
12419: NOT
12420: IFFALSE 12424
// exit ;
12422: GO 12511
// un := tmp [ rand ( 1 , tmp ) ] ;
12424: LD_ADDR_VAR 0 1
12428: PUSH
12429: LD_VAR 0 2
12433: PUSH
12434: LD_INT 1
12436: PPUSH
12437: LD_VAR 0 2
12441: PPUSH
12442: CALL_OW 12
12446: ARRAY
12447: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12448: LD_VAR 0 1
12452: PPUSH
12453: LD_INT 0
12455: PPUSH
12456: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12460: LD_VAR 0 1
12464: PPUSH
12465: LD_OWVAR 3
12469: PUSH
12470: LD_VAR 0 1
12474: DIFF
12475: PPUSH
12476: LD_VAR 0 1
12480: PPUSH
12481: CALL_OW 74
12485: PPUSH
12486: CALL_OW 115
// wait ( 0 0$20 ) ;
12490: LD_INT 700
12492: PPUSH
12493: CALL_OW 67
// SetSide ( un , your_side ) ;
12497: LD_VAR 0 1
12501: PPUSH
12502: LD_OWVAR 2
12506: PPUSH
12507: CALL_OW 235
// end ;
12511: PPOPN 2
12513: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12514: LD_EXP 27
12518: PUSH
12519: LD_EXP 60
12523: AND
12524: IFFALSE 12630
12526: GO 12528
12528: DISABLE
12529: LD_INT 0
12531: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12532: LD_ADDR_VAR 0 1
12536: PUSH
12537: LD_INT 22
12539: PUSH
12540: LD_OWVAR 2
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 2
12551: PUSH
12552: LD_INT 30
12554: PUSH
12555: LD_INT 0
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 30
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 69
12585: ST_TO_ADDR
// if not depot then
12586: LD_VAR 0 1
12590: NOT
12591: IFFALSE 12595
// exit ;
12593: GO 12630
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12595: LD_VAR 0 1
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: CALL_OW 250
12608: PPUSH
12609: LD_VAR 0 1
12613: PUSH
12614: LD_INT 1
12616: ARRAY
12617: PPUSH
12618: CALL_OW 251
12622: PPUSH
12623: LD_INT 70
12625: PPUSH
12626: CALL_OW 495
// end ;
12630: PPOPN 1
12632: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12633: LD_EXP 27
12637: PUSH
12638: LD_EXP 61
12642: AND
12643: IFFALSE 12854
12645: GO 12647
12647: DISABLE
12648: LD_INT 0
12650: PPUSH
12651: PPUSH
12652: PPUSH
12653: PPUSH
12654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12655: LD_ADDR_VAR 0 5
12659: PUSH
12660: LD_INT 22
12662: PUSH
12663: LD_OWVAR 2
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 21
12674: PUSH
12675: LD_INT 1
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PPUSH
12686: CALL_OW 69
12690: ST_TO_ADDR
// if not tmp then
12691: LD_VAR 0 5
12695: NOT
12696: IFFALSE 12700
// exit ;
12698: GO 12854
// for i in tmp do
12700: LD_ADDR_VAR 0 1
12704: PUSH
12705: LD_VAR 0 5
12709: PUSH
12710: FOR_IN
12711: IFFALSE 12852
// begin d := rand ( 0 , 5 ) ;
12713: LD_ADDR_VAR 0 4
12717: PUSH
12718: LD_INT 0
12720: PPUSH
12721: LD_INT 5
12723: PPUSH
12724: CALL_OW 12
12728: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12729: LD_ADDR_VAR 0 2
12733: PUSH
12734: LD_VAR 0 1
12738: PPUSH
12739: CALL_OW 250
12743: PPUSH
12744: LD_VAR 0 4
12748: PPUSH
12749: LD_INT 3
12751: PPUSH
12752: LD_INT 12
12754: PPUSH
12755: CALL_OW 12
12759: PPUSH
12760: CALL_OW 272
12764: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12765: LD_ADDR_VAR 0 3
12769: PUSH
12770: LD_VAR 0 1
12774: PPUSH
12775: CALL_OW 251
12779: PPUSH
12780: LD_VAR 0 4
12784: PPUSH
12785: LD_INT 3
12787: PPUSH
12788: LD_INT 12
12790: PPUSH
12791: CALL_OW 12
12795: PPUSH
12796: CALL_OW 273
12800: ST_TO_ADDR
// if ValidHex ( x , y ) then
12801: LD_VAR 0 2
12805: PPUSH
12806: LD_VAR 0 3
12810: PPUSH
12811: CALL_OW 488
12815: IFFALSE 12850
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12817: LD_VAR 0 1
12821: PPUSH
12822: LD_VAR 0 2
12826: PPUSH
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 3
12834: PPUSH
12835: LD_INT 6
12837: PPUSH
12838: CALL_OW 12
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: CALL_OW 483
// end ;
12850: GO 12710
12852: POP
12853: POP
// end ;
12854: PPOPN 5
12856: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12857: LD_EXP 27
12861: PUSH
12862: LD_EXP 62
12866: AND
12867: IFFALSE 12961
12869: GO 12871
12871: DISABLE
12872: LD_INT 0
12874: PPUSH
12875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12876: LD_ADDR_VAR 0 2
12880: PUSH
12881: LD_INT 22
12883: PUSH
12884: LD_OWVAR 2
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 32
12895: PUSH
12896: LD_INT 1
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 21
12905: PUSH
12906: LD_INT 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: PPUSH
12918: CALL_OW 69
12922: ST_TO_ADDR
// if not tmp then
12923: LD_VAR 0 2
12927: NOT
12928: IFFALSE 12932
// exit ;
12930: GO 12961
// for i in tmp do
12932: LD_ADDR_VAR 0 1
12936: PUSH
12937: LD_VAR 0 2
12941: PUSH
12942: FOR_IN
12943: IFFALSE 12959
// SetFuel ( i , 0 ) ;
12945: LD_VAR 0 1
12949: PPUSH
12950: LD_INT 0
12952: PPUSH
12953: CALL_OW 240
12957: GO 12942
12959: POP
12960: POP
// end ;
12961: PPOPN 2
12963: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12964: LD_EXP 27
12968: PUSH
12969: LD_EXP 63
12973: AND
12974: IFFALSE 13040
12976: GO 12978
12978: DISABLE
12979: LD_INT 0
12981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12982: LD_ADDR_VAR 0 1
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_OWVAR 2
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 30
13001: PUSH
13002: LD_INT 29
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PPUSH
13013: CALL_OW 69
13017: ST_TO_ADDR
// if not tmp then
13018: LD_VAR 0 1
13022: NOT
13023: IFFALSE 13027
// exit ;
13025: GO 13040
// DestroyUnit ( tmp [ 1 ] ) ;
13027: LD_VAR 0 1
13031: PUSH
13032: LD_INT 1
13034: ARRAY
13035: PPUSH
13036: CALL_OW 65
// end ;
13040: PPOPN 1
13042: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13043: LD_EXP 27
13047: PUSH
13048: LD_EXP 65
13052: AND
13053: IFFALSE 13182
13055: GO 13057
13057: DISABLE
13058: LD_INT 0
13060: PPUSH
// begin uc_side := 0 ;
13061: LD_ADDR_OWVAR 20
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// uc_nation := nation_arabian ;
13069: LD_ADDR_OWVAR 21
13073: PUSH
13074: LD_INT 2
13076: ST_TO_ADDR
// hc_gallery :=  ;
13077: LD_ADDR_OWVAR 33
13081: PUSH
13082: LD_STRING 
13084: ST_TO_ADDR
// hc_name :=  ;
13085: LD_ADDR_OWVAR 26
13089: PUSH
13090: LD_STRING 
13092: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13093: LD_INT 1
13095: PPUSH
13096: LD_INT 11
13098: PPUSH
13099: LD_INT 10
13101: PPUSH
13102: CALL_OW 380
// un := CreateHuman ;
13106: LD_ADDR_VAR 0 1
13110: PUSH
13111: CALL_OW 44
13115: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13116: LD_VAR 0 1
13120: PPUSH
13121: LD_INT 1
13123: PPUSH
13124: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13128: LD_INT 35
13130: PPUSH
13131: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13135: LD_VAR 0 1
13139: PPUSH
13140: LD_INT 22
13142: PUSH
13143: LD_OWVAR 2
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: PPUSH
13157: LD_VAR 0 1
13161: PPUSH
13162: CALL_OW 74
13166: PPUSH
13167: CALL_OW 115
// until IsDead ( un ) ;
13171: LD_VAR 0 1
13175: PPUSH
13176: CALL_OW 301
13180: IFFALSE 13128
// end ;
13182: PPOPN 1
13184: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13185: LD_EXP 27
13189: PUSH
13190: LD_EXP 67
13194: AND
13195: IFFALSE 13207
13197: GO 13199
13199: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13200: LD_STRING earthquake(getX(game), 0, 32)
13202: PPUSH
13203: CALL_OW 559
13207: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13208: LD_EXP 27
13212: PUSH
13213: LD_EXP 68
13217: AND
13218: IFFALSE 13309
13220: GO 13222
13222: DISABLE
13223: LD_INT 0
13225: PPUSH
// begin enable ;
13226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13227: LD_ADDR_VAR 0 1
13231: PUSH
13232: LD_INT 22
13234: PUSH
13235: LD_OWVAR 2
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 21
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 33
13256: PUSH
13257: LD_INT 3
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: PPUSH
13269: CALL_OW 69
13273: ST_TO_ADDR
// if not tmp then
13274: LD_VAR 0 1
13278: NOT
13279: IFFALSE 13283
// exit ;
13281: GO 13309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13283: LD_VAR 0 1
13287: PUSH
13288: LD_INT 1
13290: PPUSH
13291: LD_VAR 0 1
13295: PPUSH
13296: CALL_OW 12
13300: ARRAY
13301: PPUSH
13302: LD_INT 1
13304: PPUSH
13305: CALL_OW 234
// end ;
13309: PPOPN 1
13311: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13312: LD_EXP 27
13316: PUSH
13317: LD_EXP 69
13321: AND
13322: IFFALSE 13463
13324: GO 13326
13326: DISABLE
13327: LD_INT 0
13329: PPUSH
13330: PPUSH
13331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13332: LD_ADDR_VAR 0 3
13336: PUSH
13337: LD_INT 22
13339: PUSH
13340: LD_OWVAR 2
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: LD_INT 1
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 69
13367: ST_TO_ADDR
// if not tmp then
13368: LD_VAR 0 3
13372: NOT
13373: IFFALSE 13377
// exit ;
13375: GO 13463
// un := tmp [ rand ( 1 , tmp ) ] ;
13377: LD_ADDR_VAR 0 2
13381: PUSH
13382: LD_VAR 0 3
13386: PUSH
13387: LD_INT 1
13389: PPUSH
13390: LD_VAR 0 3
13394: PPUSH
13395: CALL_OW 12
13399: ARRAY
13400: ST_TO_ADDR
// if Crawls ( un ) then
13401: LD_VAR 0 2
13405: PPUSH
13406: CALL_OW 318
13410: IFFALSE 13421
// ComWalk ( un ) ;
13412: LD_VAR 0 2
13416: PPUSH
13417: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13421: LD_VAR 0 2
13425: PPUSH
13426: LD_INT 9
13428: PPUSH
13429: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13433: LD_INT 28
13435: PPUSH
13436: LD_OWVAR 2
13440: PPUSH
13441: LD_INT 2
13443: PPUSH
13444: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13448: LD_INT 29
13450: PPUSH
13451: LD_OWVAR 2
13455: PPUSH
13456: LD_INT 2
13458: PPUSH
13459: CALL_OW 322
// end ;
13463: PPOPN 3
13465: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13466: LD_EXP 27
13470: PUSH
13471: LD_EXP 70
13475: AND
13476: IFFALSE 13587
13478: GO 13480
13480: DISABLE
13481: LD_INT 0
13483: PPUSH
13484: PPUSH
13485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13486: LD_ADDR_VAR 0 3
13490: PUSH
13491: LD_INT 22
13493: PUSH
13494: LD_OWVAR 2
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 25
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 69
13521: ST_TO_ADDR
// if not tmp then
13522: LD_VAR 0 3
13526: NOT
13527: IFFALSE 13531
// exit ;
13529: GO 13587
// un := tmp [ rand ( 1 , tmp ) ] ;
13531: LD_ADDR_VAR 0 2
13535: PUSH
13536: LD_VAR 0 3
13540: PUSH
13541: LD_INT 1
13543: PPUSH
13544: LD_VAR 0 3
13548: PPUSH
13549: CALL_OW 12
13553: ARRAY
13554: ST_TO_ADDR
// if Crawls ( un ) then
13555: LD_VAR 0 2
13559: PPUSH
13560: CALL_OW 318
13564: IFFALSE 13575
// ComWalk ( un ) ;
13566: LD_VAR 0 2
13570: PPUSH
13571: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13575: LD_VAR 0 2
13579: PPUSH
13580: LD_INT 8
13582: PPUSH
13583: CALL_OW 336
// end ;
13587: PPOPN 3
13589: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13590: LD_EXP 27
13594: PUSH
13595: LD_EXP 71
13599: AND
13600: IFFALSE 13744
13602: GO 13604
13604: DISABLE
13605: LD_INT 0
13607: PPUSH
13608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_OWVAR 2
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 21
13628: PUSH
13629: LD_INT 2
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 2
13638: PUSH
13639: LD_INT 34
13641: PUSH
13642: LD_INT 12
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 34
13651: PUSH
13652: LD_INT 51
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 34
13661: PUSH
13662: LD_INT 32
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 69
13684: ST_TO_ADDR
// if not tmp then
13685: LD_VAR 0 2
13689: NOT
13690: IFFALSE 13694
// exit ;
13692: GO 13744
// for i in tmp do
13694: LD_ADDR_VAR 0 1
13698: PUSH
13699: LD_VAR 0 2
13703: PUSH
13704: FOR_IN
13705: IFFALSE 13742
// if GetCargo ( i , mat_artifact ) = 0 then
13707: LD_VAR 0 1
13711: PPUSH
13712: LD_INT 4
13714: PPUSH
13715: CALL_OW 289
13719: PUSH
13720: LD_INT 0
13722: EQUAL
13723: IFFALSE 13740
// SetCargo ( i , mat_siberit , 100 ) ;
13725: LD_VAR 0 1
13729: PPUSH
13730: LD_INT 3
13732: PPUSH
13733: LD_INT 100
13735: PPUSH
13736: CALL_OW 290
13740: GO 13704
13742: POP
13743: POP
// end ;
13744: PPOPN 2
13746: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13747: LD_EXP 27
13751: PUSH
13752: LD_EXP 72
13756: AND
13757: IFFALSE 13940
13759: GO 13761
13761: DISABLE
13762: LD_INT 0
13764: PPUSH
13765: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13766: LD_ADDR_VAR 0 2
13770: PUSH
13771: LD_INT 22
13773: PUSH
13774: LD_OWVAR 2
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PPUSH
13783: CALL_OW 69
13787: ST_TO_ADDR
// if not tmp then
13788: LD_VAR 0 2
13792: NOT
13793: IFFALSE 13797
// exit ;
13795: GO 13940
// for i := 1 to 2 do
13797: LD_ADDR_VAR 0 1
13801: PUSH
13802: DOUBLE
13803: LD_INT 1
13805: DEC
13806: ST_TO_ADDR
13807: LD_INT 2
13809: PUSH
13810: FOR_TO
13811: IFFALSE 13938
// begin uc_side := your_side ;
13813: LD_ADDR_OWVAR 20
13817: PUSH
13818: LD_OWVAR 2
13822: ST_TO_ADDR
// uc_nation := nation_american ;
13823: LD_ADDR_OWVAR 21
13827: PUSH
13828: LD_INT 1
13830: ST_TO_ADDR
// vc_chassis := us_morphling ;
13831: LD_ADDR_OWVAR 37
13835: PUSH
13836: LD_INT 5
13838: ST_TO_ADDR
// vc_engine := engine_siberite ;
13839: LD_ADDR_OWVAR 39
13843: PUSH
13844: LD_INT 3
13846: ST_TO_ADDR
// vc_control := control_computer ;
13847: LD_ADDR_OWVAR 38
13851: PUSH
13852: LD_INT 3
13854: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13855: LD_ADDR_OWVAR 40
13859: PUSH
13860: LD_INT 10
13862: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13863: LD_VAR 0 2
13867: PUSH
13868: LD_INT 1
13870: ARRAY
13871: PPUSH
13872: CALL_OW 310
13876: NOT
13877: IFFALSE 13924
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
13879: CALL_OW 45
13883: PPUSH
13884: LD_VAR 0 2
13888: PUSH
13889: LD_INT 1
13891: ARRAY
13892: PPUSH
13893: CALL_OW 250
13897: PPUSH
13898: LD_VAR 0 2
13902: PUSH
13903: LD_INT 1
13905: ARRAY
13906: PPUSH
13907: CALL_OW 251
13911: PPUSH
13912: LD_INT 12
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 50
13922: GO 13936
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
13924: CALL_OW 45
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: CALL_OW 51
// end ;
13936: GO 13810
13938: POP
13939: POP
// end ;
13940: PPOPN 2
13942: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13943: LD_EXP 27
13947: PUSH
13948: LD_EXP 73
13952: AND
13953: IFFALSE 14175
13955: GO 13957
13957: DISABLE
13958: LD_INT 0
13960: PPUSH
13961: PPUSH
13962: PPUSH
13963: PPUSH
13964: PPUSH
13965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_OWVAR 2
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 21
13985: PUSH
13986: LD_INT 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 3
13995: PUSH
13996: LD_INT 23
13998: PUSH
13999: LD_INT 0
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 69
14019: ST_TO_ADDR
// if not tmp then
14020: LD_VAR 0 6
14024: NOT
14025: IFFALSE 14029
// exit ;
14027: GO 14175
// s1 := rand ( 1 , 4 ) ;
14029: LD_ADDR_VAR 0 2
14033: PUSH
14034: LD_INT 1
14036: PPUSH
14037: LD_INT 4
14039: PPUSH
14040: CALL_OW 12
14044: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14045: LD_ADDR_VAR 0 4
14049: PUSH
14050: LD_VAR 0 6
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: LD_VAR 0 2
14063: PPUSH
14064: CALL_OW 259
14068: ST_TO_ADDR
// if s1 = 1 then
14069: LD_VAR 0 2
14073: PUSH
14074: LD_INT 1
14076: EQUAL
14077: IFFALSE 14097
// s2 := rand ( 2 , 4 ) else
14079: LD_ADDR_VAR 0 3
14083: PUSH
14084: LD_INT 2
14086: PPUSH
14087: LD_INT 4
14089: PPUSH
14090: CALL_OW 12
14094: ST_TO_ADDR
14095: GO 14105
// s2 := 1 ;
14097: LD_ADDR_VAR 0 3
14101: PUSH
14102: LD_INT 1
14104: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14105: LD_ADDR_VAR 0 5
14109: PUSH
14110: LD_VAR 0 6
14114: PUSH
14115: LD_INT 1
14117: ARRAY
14118: PPUSH
14119: LD_VAR 0 3
14123: PPUSH
14124: CALL_OW 259
14128: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14129: LD_VAR 0 6
14133: PUSH
14134: LD_INT 1
14136: ARRAY
14137: PPUSH
14138: LD_VAR 0 2
14142: PPUSH
14143: LD_VAR 0 5
14147: PPUSH
14148: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14152: LD_VAR 0 6
14156: PUSH
14157: LD_INT 1
14159: ARRAY
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: LD_VAR 0 4
14170: PPUSH
14171: CALL_OW 237
// end ;
14175: PPOPN 6
14177: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14178: LD_EXP 27
14182: PUSH
14183: LD_EXP 74
14187: AND
14188: IFFALSE 14267
14190: GO 14192
14192: DISABLE
14193: LD_INT 0
14195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14196: LD_ADDR_VAR 0 1
14200: PUSH
14201: LD_INT 22
14203: PUSH
14204: LD_OWVAR 2
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 30
14215: PUSH
14216: LD_INT 3
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: CALL_OW 69
14231: ST_TO_ADDR
// if not tmp then
14232: LD_VAR 0 1
14236: NOT
14237: IFFALSE 14241
// exit ;
14239: GO 14267
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14241: LD_VAR 0 1
14245: PUSH
14246: LD_INT 1
14248: PPUSH
14249: LD_VAR 0 1
14253: PPUSH
14254: CALL_OW 12
14258: ARRAY
14259: PPUSH
14260: LD_INT 1
14262: PPUSH
14263: CALL_OW 234
// end ;
14267: PPOPN 1
14269: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14270: LD_EXP 27
14274: PUSH
14275: LD_EXP 75
14279: AND
14280: IFFALSE 14392
14282: GO 14284
14284: DISABLE
14285: LD_INT 0
14287: PPUSH
14288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14289: LD_ADDR_VAR 0 2
14293: PUSH
14294: LD_INT 22
14296: PUSH
14297: LD_OWVAR 2
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 2
14308: PUSH
14309: LD_INT 30
14311: PUSH
14312: LD_INT 27
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 30
14321: PUSH
14322: LD_INT 26
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 30
14331: PUSH
14332: LD_INT 28
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PPUSH
14349: CALL_OW 69
14353: ST_TO_ADDR
// if not tmp then
14354: LD_VAR 0 2
14358: NOT
14359: IFFALSE 14363
// exit ;
14361: GO 14392
// for i in tmp do
14363: LD_ADDR_VAR 0 1
14367: PUSH
14368: LD_VAR 0 2
14372: PUSH
14373: FOR_IN
14374: IFFALSE 14390
// SetLives ( i , 1 ) ;
14376: LD_VAR 0 1
14380: PPUSH
14381: LD_INT 1
14383: PPUSH
14384: CALL_OW 234
14388: GO 14373
14390: POP
14391: POP
// end ;
14392: PPOPN 2
14394: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14395: LD_EXP 27
14399: PUSH
14400: LD_EXP 76
14404: AND
14405: IFFALSE 14679
14407: GO 14409
14409: DISABLE
14410: LD_INT 0
14412: PPUSH
14413: PPUSH
14414: PPUSH
// begin i := rand ( 1 , 7 ) ;
14415: LD_ADDR_VAR 0 1
14419: PUSH
14420: LD_INT 1
14422: PPUSH
14423: LD_INT 7
14425: PPUSH
14426: CALL_OW 12
14430: ST_TO_ADDR
// case i of 1 :
14431: LD_VAR 0 1
14435: PUSH
14436: LD_INT 1
14438: DOUBLE
14439: EQUAL
14440: IFTRUE 14444
14442: GO 14454
14444: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14445: LD_STRING earthquake(getX(game), 0, 32)
14447: PPUSH
14448: CALL_OW 559
14452: GO 14679
14454: LD_INT 2
14456: DOUBLE
14457: EQUAL
14458: IFTRUE 14462
14460: GO 14476
14462: POP
// begin ToLua ( displayStucuk(); ) ;
14463: LD_STRING displayStucuk();
14465: PPUSH
14466: CALL_OW 559
// ResetFog ;
14470: CALL_OW 335
// end ; 3 :
14474: GO 14679
14476: LD_INT 3
14478: DOUBLE
14479: EQUAL
14480: IFTRUE 14484
14482: GO 14588
14484: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14485: LD_ADDR_VAR 0 2
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_OWVAR 2
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 25
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PPUSH
14516: CALL_OW 69
14520: ST_TO_ADDR
// if not tmp then
14521: LD_VAR 0 2
14525: NOT
14526: IFFALSE 14530
// exit ;
14528: GO 14679
// un := tmp [ rand ( 1 , tmp ) ] ;
14530: LD_ADDR_VAR 0 3
14534: PUSH
14535: LD_VAR 0 2
14539: PUSH
14540: LD_INT 1
14542: PPUSH
14543: LD_VAR 0 2
14547: PPUSH
14548: CALL_OW 12
14552: ARRAY
14553: ST_TO_ADDR
// if Crawls ( un ) then
14554: LD_VAR 0 3
14558: PPUSH
14559: CALL_OW 318
14563: IFFALSE 14574
// ComWalk ( un ) ;
14565: LD_VAR 0 3
14569: PPUSH
14570: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14574: LD_VAR 0 3
14578: PPUSH
14579: LD_INT 8
14581: PPUSH
14582: CALL_OW 336
// end ; 4 :
14586: GO 14679
14588: LD_INT 4
14590: DOUBLE
14591: EQUAL
14592: IFTRUE 14596
14594: GO 14657
14596: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14597: LD_ADDR_VAR 0 2
14601: PUSH
14602: LD_INT 22
14604: PUSH
14605: LD_OWVAR 2
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 30
14616: PUSH
14617: LD_INT 29
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: ST_TO_ADDR
// if not tmp then
14633: LD_VAR 0 2
14637: NOT
14638: IFFALSE 14642
// exit ;
14640: GO 14679
// DestroyUnit ( tmp [ 1 ] ) ;
14642: LD_VAR 0 2
14646: PUSH
14647: LD_INT 1
14649: ARRAY
14650: PPUSH
14651: CALL_OW 65
// end ; 5 .. 7 :
14655: GO 14679
14657: LD_INT 5
14659: DOUBLE
14660: GREATEREQUAL
14661: IFFALSE 14669
14663: LD_INT 7
14665: DOUBLE
14666: LESSEQUAL
14667: IFTRUE 14671
14669: GO 14678
14671: POP
// StreamSibBomb ; end ;
14672: CALL 10929 0 0
14676: GO 14679
14678: POP
// end ;
14679: PPOPN 3
14681: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14682: LD_EXP 27
14686: PUSH
14687: LD_EXP 77
14691: AND
14692: IFFALSE 14848
14694: GO 14696
14696: DISABLE
14697: LD_INT 0
14699: PPUSH
14700: PPUSH
14701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14702: LD_ADDR_VAR 0 2
14706: PUSH
14707: LD_INT 81
14709: PUSH
14710: LD_OWVAR 2
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 2
14721: PUSH
14722: LD_INT 21
14724: PUSH
14725: LD_INT 1
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 2
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PPUSH
14751: CALL_OW 69
14755: ST_TO_ADDR
// if not tmp then
14756: LD_VAR 0 2
14760: NOT
14761: IFFALSE 14765
// exit ;
14763: GO 14848
// p := 0 ;
14765: LD_ADDR_VAR 0 3
14769: PUSH
14770: LD_INT 0
14772: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14773: LD_INT 35
14775: PPUSH
14776: CALL_OW 67
// p := p + 1 ;
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_VAR 0 3
14789: PUSH
14790: LD_INT 1
14792: PLUS
14793: ST_TO_ADDR
// for i in tmp do
14794: LD_ADDR_VAR 0 1
14798: PUSH
14799: LD_VAR 0 2
14803: PUSH
14804: FOR_IN
14805: IFFALSE 14836
// if GetLives ( i ) < 1000 then
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 256
14816: PUSH
14817: LD_INT 1000
14819: LESS
14820: IFFALSE 14834
// SetLives ( i , 1000 ) ;
14822: LD_VAR 0 1
14826: PPUSH
14827: LD_INT 1000
14829: PPUSH
14830: CALL_OW 234
14834: GO 14804
14836: POP
14837: POP
// until p > 20 ;
14838: LD_VAR 0 3
14842: PUSH
14843: LD_INT 20
14845: GREATER
14846: IFFALSE 14773
// end ;
14848: PPOPN 3
14850: END
// every 0 0$1 trigger StreamModeActive and sTime do
14851: LD_EXP 27
14855: PUSH
14856: LD_EXP 78
14860: AND
14861: IFFALSE 14896
14863: GO 14865
14865: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14866: LD_INT 28
14868: PPUSH
14869: LD_OWVAR 2
14873: PPUSH
14874: LD_INT 2
14876: PPUSH
14877: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14881: LD_INT 30
14883: PPUSH
14884: LD_OWVAR 2
14888: PPUSH
14889: LD_INT 2
14891: PPUSH
14892: CALL_OW 322
// end ;
14896: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14897: LD_EXP 27
14901: PUSH
14902: LD_EXP 79
14906: AND
14907: IFFALSE 15028
14909: GO 14911
14911: DISABLE
14912: LD_INT 0
14914: PPUSH
14915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14916: LD_ADDR_VAR 0 2
14920: PUSH
14921: LD_INT 22
14923: PUSH
14924: LD_OWVAR 2
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 21
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 3
14945: PUSH
14946: LD_INT 23
14948: PUSH
14949: LD_INT 0
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: LIST
14964: PPUSH
14965: CALL_OW 69
14969: ST_TO_ADDR
// if not tmp then
14970: LD_VAR 0 2
14974: NOT
14975: IFFALSE 14979
// exit ;
14977: GO 15028
// for i in tmp do
14979: LD_ADDR_VAR 0 1
14983: PUSH
14984: LD_VAR 0 2
14988: PUSH
14989: FOR_IN
14990: IFFALSE 15026
// begin if Crawls ( i ) then
14992: LD_VAR 0 1
14996: PPUSH
14997: CALL_OW 318
15001: IFFALSE 15012
// ComWalk ( i ) ;
15003: LD_VAR 0 1
15007: PPUSH
15008: CALL_OW 138
// SetClass ( i , 2 ) ;
15012: LD_VAR 0 1
15016: PPUSH
15017: LD_INT 2
15019: PPUSH
15020: CALL_OW 336
// end ;
15024: GO 14989
15026: POP
15027: POP
// end ;
15028: PPOPN 2
15030: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15031: LD_EXP 27
15035: PUSH
15036: LD_EXP 80
15040: AND
15041: IFFALSE 15322
15043: GO 15045
15045: DISABLE
15046: LD_INT 0
15048: PPUSH
15049: PPUSH
15050: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15051: LD_OWVAR 2
15055: PPUSH
15056: LD_INT 9
15058: PPUSH
15059: LD_INT 1
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15069: LD_INT 9
15071: PPUSH
15072: LD_OWVAR 2
15076: PPUSH
15077: CALL_OW 343
// uc_side := 9 ;
15081: LD_ADDR_OWVAR 20
15085: PUSH
15086: LD_INT 9
15088: ST_TO_ADDR
// uc_nation := 2 ;
15089: LD_ADDR_OWVAR 21
15093: PUSH
15094: LD_INT 2
15096: ST_TO_ADDR
// hc_name := Dark Warrior ;
15097: LD_ADDR_OWVAR 26
15101: PUSH
15102: LD_STRING Dark Warrior
15104: ST_TO_ADDR
// hc_gallery :=  ;
15105: LD_ADDR_OWVAR 33
15109: PUSH
15110: LD_STRING 
15112: ST_TO_ADDR
// hc_noskilllimit := true ;
15113: LD_ADDR_OWVAR 76
15117: PUSH
15118: LD_INT 1
15120: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15121: LD_ADDR_OWVAR 31
15125: PUSH
15126: LD_INT 30
15128: PUSH
15129: LD_INT 30
15131: PUSH
15132: LD_INT 30
15134: PUSH
15135: LD_INT 30
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: ST_TO_ADDR
// un := CreateHuman ;
15144: LD_ADDR_VAR 0 3
15148: PUSH
15149: CALL_OW 44
15153: ST_TO_ADDR
// hc_noskilllimit := false ;
15154: LD_ADDR_OWVAR 76
15158: PUSH
15159: LD_INT 0
15161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15162: LD_VAR 0 3
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 51
// p := 0 ;
15174: LD_ADDR_VAR 0 2
15178: PUSH
15179: LD_INT 0
15181: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15182: LD_INT 35
15184: PPUSH
15185: CALL_OW 67
// p := p + 1 ;
15189: LD_ADDR_VAR 0 2
15193: PUSH
15194: LD_VAR 0 2
15198: PUSH
15199: LD_INT 1
15201: PLUS
15202: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15203: LD_VAR 0 3
15207: PPUSH
15208: CALL_OW 256
15212: PUSH
15213: LD_INT 1000
15215: LESS
15216: IFFALSE 15230
// SetLives ( un , 1000 ) ;
15218: LD_VAR 0 3
15222: PPUSH
15223: LD_INT 1000
15225: PPUSH
15226: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15230: LD_VAR 0 3
15234: PPUSH
15235: LD_INT 81
15237: PUSH
15238: LD_OWVAR 2
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 91
15249: PUSH
15250: LD_VAR 0 3
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PPUSH
15267: CALL_OW 69
15271: PPUSH
15272: LD_VAR 0 3
15276: PPUSH
15277: CALL_OW 74
15281: PPUSH
15282: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15286: LD_VAR 0 2
15290: PUSH
15291: LD_INT 60
15293: GREATER
15294: PUSH
15295: LD_VAR 0 3
15299: PPUSH
15300: CALL_OW 301
15304: OR
15305: IFFALSE 15182
// if un then
15307: LD_VAR 0 3
15311: IFFALSE 15322
// RemoveUnit ( un ) ;
15313: LD_VAR 0 3
15317: PPUSH
15318: CALL_OW 64
// end ;
15322: PPOPN 3
15324: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15325: LD_INT 0
15327: PPUSH
// case cmd of 301 :
15328: LD_VAR 0 1
15332: PUSH
15333: LD_INT 301
15335: DOUBLE
15336: EQUAL
15337: IFTRUE 15341
15339: GO 15373
15341: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15342: LD_VAR 0 6
15346: PPUSH
15347: LD_VAR 0 7
15351: PPUSH
15352: LD_VAR 0 8
15356: PPUSH
15357: LD_VAR 0 4
15361: PPUSH
15362: LD_VAR 0 5
15366: PPUSH
15367: CALL 16574 0 5
15371: GO 15494
15373: LD_INT 302
15375: DOUBLE
15376: EQUAL
15377: IFTRUE 15381
15379: GO 15418
15381: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15382: LD_VAR 0 6
15386: PPUSH
15387: LD_VAR 0 7
15391: PPUSH
15392: LD_VAR 0 8
15396: PPUSH
15397: LD_VAR 0 9
15401: PPUSH
15402: LD_VAR 0 4
15406: PPUSH
15407: LD_VAR 0 5
15411: PPUSH
15412: CALL 16665 0 6
15416: GO 15494
15418: LD_INT 303
15420: DOUBLE
15421: EQUAL
15422: IFTRUE 15426
15424: GO 15463
15426: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15427: LD_VAR 0 6
15431: PPUSH
15432: LD_VAR 0 7
15436: PPUSH
15437: LD_VAR 0 8
15441: PPUSH
15442: LD_VAR 0 9
15446: PPUSH
15447: LD_VAR 0 4
15451: PPUSH
15452: LD_VAR 0 5
15456: PPUSH
15457: CALL 15499 0 6
15461: GO 15494
15463: LD_INT 304
15465: DOUBLE
15466: EQUAL
15467: IFTRUE 15471
15469: GO 15493
15471: POP
// hHackTeleport ( unit , x , y ) ; end ;
15472: LD_VAR 0 2
15476: PPUSH
15477: LD_VAR 0 4
15481: PPUSH
15482: LD_VAR 0 5
15486: PPUSH
15487: CALL 17258 0 3
15491: GO 15494
15493: POP
// end ;
15494: LD_VAR 0 12
15498: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15499: LD_INT 0
15501: PPUSH
15502: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15503: LD_VAR 0 1
15507: PUSH
15508: LD_INT 1
15510: LESS
15511: PUSH
15512: LD_VAR 0 1
15516: PUSH
15517: LD_INT 3
15519: GREATER
15520: OR
15521: PUSH
15522: LD_VAR 0 5
15526: PPUSH
15527: LD_VAR 0 6
15531: PPUSH
15532: CALL_OW 428
15536: OR
15537: IFFALSE 15541
// exit ;
15539: GO 16261
// uc_side := your_side ;
15541: LD_ADDR_OWVAR 20
15545: PUSH
15546: LD_OWVAR 2
15550: ST_TO_ADDR
// uc_nation := nation ;
15551: LD_ADDR_OWVAR 21
15555: PUSH
15556: LD_VAR 0 1
15560: ST_TO_ADDR
// bc_level = 1 ;
15561: LD_ADDR_OWVAR 43
15565: PUSH
15566: LD_INT 1
15568: ST_TO_ADDR
// case btype of 1 :
15569: LD_VAR 0 2
15573: PUSH
15574: LD_INT 1
15576: DOUBLE
15577: EQUAL
15578: IFTRUE 15582
15580: GO 15593
15582: POP
// bc_type := b_depot ; 2 :
15583: LD_ADDR_OWVAR 42
15587: PUSH
15588: LD_INT 0
15590: ST_TO_ADDR
15591: GO 16205
15593: LD_INT 2
15595: DOUBLE
15596: EQUAL
15597: IFTRUE 15601
15599: GO 15612
15601: POP
// bc_type := b_warehouse ; 3 :
15602: LD_ADDR_OWVAR 42
15606: PUSH
15607: LD_INT 1
15609: ST_TO_ADDR
15610: GO 16205
15612: LD_INT 3
15614: DOUBLE
15615: EQUAL
15616: IFTRUE 15620
15618: GO 15631
15620: POP
// bc_type := b_lab ; 4 .. 9 :
15621: LD_ADDR_OWVAR 42
15625: PUSH
15626: LD_INT 6
15628: ST_TO_ADDR
15629: GO 16205
15631: LD_INT 4
15633: DOUBLE
15634: GREATEREQUAL
15635: IFFALSE 15643
15637: LD_INT 9
15639: DOUBLE
15640: LESSEQUAL
15641: IFTRUE 15645
15643: GO 15697
15645: POP
// begin bc_type := b_lab_half ;
15646: LD_ADDR_OWVAR 42
15650: PUSH
15651: LD_INT 7
15653: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15654: LD_ADDR_OWVAR 44
15658: PUSH
15659: LD_INT 10
15661: PUSH
15662: LD_INT 11
15664: PUSH
15665: LD_INT 12
15667: PUSH
15668: LD_INT 15
15670: PUSH
15671: LD_INT 14
15673: PUSH
15674: LD_INT 13
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 3
15692: MINUS
15693: ARRAY
15694: ST_TO_ADDR
// end ; 10 .. 13 :
15695: GO 16205
15697: LD_INT 10
15699: DOUBLE
15700: GREATEREQUAL
15701: IFFALSE 15709
15703: LD_INT 13
15705: DOUBLE
15706: LESSEQUAL
15707: IFTRUE 15711
15709: GO 15788
15711: POP
// begin bc_type := b_lab_full ;
15712: LD_ADDR_OWVAR 42
15716: PUSH
15717: LD_INT 8
15719: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15720: LD_ADDR_OWVAR 44
15724: PUSH
15725: LD_INT 10
15727: PUSH
15728: LD_INT 12
15730: PUSH
15731: LD_INT 14
15733: PUSH
15734: LD_INT 13
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: PUSH
15743: LD_VAR 0 2
15747: PUSH
15748: LD_INT 9
15750: MINUS
15751: ARRAY
15752: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15753: LD_ADDR_OWVAR 45
15757: PUSH
15758: LD_INT 11
15760: PUSH
15761: LD_INT 15
15763: PUSH
15764: LD_INT 12
15766: PUSH
15767: LD_INT 15
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: PUSH
15776: LD_VAR 0 2
15780: PUSH
15781: LD_INT 9
15783: MINUS
15784: ARRAY
15785: ST_TO_ADDR
// end ; 14 :
15786: GO 16205
15788: LD_INT 14
15790: DOUBLE
15791: EQUAL
15792: IFTRUE 15796
15794: GO 15807
15796: POP
// bc_type := b_workshop ; 15 :
15797: LD_ADDR_OWVAR 42
15801: PUSH
15802: LD_INT 2
15804: ST_TO_ADDR
15805: GO 16205
15807: LD_INT 15
15809: DOUBLE
15810: EQUAL
15811: IFTRUE 15815
15813: GO 15826
15815: POP
// bc_type := b_factory ; 16 :
15816: LD_ADDR_OWVAR 42
15820: PUSH
15821: LD_INT 3
15823: ST_TO_ADDR
15824: GO 16205
15826: LD_INT 16
15828: DOUBLE
15829: EQUAL
15830: IFTRUE 15834
15832: GO 15845
15834: POP
// bc_type := b_ext_gun ; 17 :
15835: LD_ADDR_OWVAR 42
15839: PUSH
15840: LD_INT 17
15842: ST_TO_ADDR
15843: GO 16205
15845: LD_INT 17
15847: DOUBLE
15848: EQUAL
15849: IFTRUE 15853
15851: GO 15881
15853: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15854: LD_ADDR_OWVAR 42
15858: PUSH
15859: LD_INT 19
15861: PUSH
15862: LD_INT 23
15864: PUSH
15865: LD_INT 19
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: LIST
15872: PUSH
15873: LD_VAR 0 1
15877: ARRAY
15878: ST_TO_ADDR
15879: GO 16205
15881: LD_INT 18
15883: DOUBLE
15884: EQUAL
15885: IFTRUE 15889
15887: GO 15900
15889: POP
// bc_type := b_ext_radar ; 19 :
15890: LD_ADDR_OWVAR 42
15894: PUSH
15895: LD_INT 20
15897: ST_TO_ADDR
15898: GO 16205
15900: LD_INT 19
15902: DOUBLE
15903: EQUAL
15904: IFTRUE 15908
15906: GO 15919
15908: POP
// bc_type := b_ext_radio ; 20 :
15909: LD_ADDR_OWVAR 42
15913: PUSH
15914: LD_INT 22
15916: ST_TO_ADDR
15917: GO 16205
15919: LD_INT 20
15921: DOUBLE
15922: EQUAL
15923: IFTRUE 15927
15925: GO 15938
15927: POP
// bc_type := b_ext_siberium ; 21 :
15928: LD_ADDR_OWVAR 42
15932: PUSH
15933: LD_INT 21
15935: ST_TO_ADDR
15936: GO 16205
15938: LD_INT 21
15940: DOUBLE
15941: EQUAL
15942: IFTRUE 15946
15944: GO 15957
15946: POP
// bc_type := b_ext_computer ; 22 :
15947: LD_ADDR_OWVAR 42
15951: PUSH
15952: LD_INT 24
15954: ST_TO_ADDR
15955: GO 16205
15957: LD_INT 22
15959: DOUBLE
15960: EQUAL
15961: IFTRUE 15965
15963: GO 15976
15965: POP
// bc_type := b_ext_track ; 23 :
15966: LD_ADDR_OWVAR 42
15970: PUSH
15971: LD_INT 16
15973: ST_TO_ADDR
15974: GO 16205
15976: LD_INT 23
15978: DOUBLE
15979: EQUAL
15980: IFTRUE 15984
15982: GO 15995
15984: POP
// bc_type := b_ext_laser ; 24 :
15985: LD_ADDR_OWVAR 42
15989: PUSH
15990: LD_INT 25
15992: ST_TO_ADDR
15993: GO 16205
15995: LD_INT 24
15997: DOUBLE
15998: EQUAL
15999: IFTRUE 16003
16001: GO 16014
16003: POP
// bc_type := b_control_tower ; 25 :
16004: LD_ADDR_OWVAR 42
16008: PUSH
16009: LD_INT 36
16011: ST_TO_ADDR
16012: GO 16205
16014: LD_INT 25
16016: DOUBLE
16017: EQUAL
16018: IFTRUE 16022
16020: GO 16033
16022: POP
// bc_type := b_breastwork ; 26 :
16023: LD_ADDR_OWVAR 42
16027: PUSH
16028: LD_INT 31
16030: ST_TO_ADDR
16031: GO 16205
16033: LD_INT 26
16035: DOUBLE
16036: EQUAL
16037: IFTRUE 16041
16039: GO 16052
16041: POP
// bc_type := b_bunker ; 27 :
16042: LD_ADDR_OWVAR 42
16046: PUSH
16047: LD_INT 32
16049: ST_TO_ADDR
16050: GO 16205
16052: LD_INT 27
16054: DOUBLE
16055: EQUAL
16056: IFTRUE 16060
16058: GO 16071
16060: POP
// bc_type := b_turret ; 28 :
16061: LD_ADDR_OWVAR 42
16065: PUSH
16066: LD_INT 33
16068: ST_TO_ADDR
16069: GO 16205
16071: LD_INT 28
16073: DOUBLE
16074: EQUAL
16075: IFTRUE 16079
16077: GO 16090
16079: POP
// bc_type := b_armoury ; 29 :
16080: LD_ADDR_OWVAR 42
16084: PUSH
16085: LD_INT 4
16087: ST_TO_ADDR
16088: GO 16205
16090: LD_INT 29
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16098
16096: GO 16109
16098: POP
// bc_type := b_barracks ; 30 :
16099: LD_ADDR_OWVAR 42
16103: PUSH
16104: LD_INT 5
16106: ST_TO_ADDR
16107: GO 16205
16109: LD_INT 30
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16128
16117: POP
// bc_type := b_solar_power ; 31 :
16118: LD_ADDR_OWVAR 42
16122: PUSH
16123: LD_INT 27
16125: ST_TO_ADDR
16126: GO 16205
16128: LD_INT 31
16130: DOUBLE
16131: EQUAL
16132: IFTRUE 16136
16134: GO 16147
16136: POP
// bc_type := b_oil_power ; 32 :
16137: LD_ADDR_OWVAR 42
16141: PUSH
16142: LD_INT 26
16144: ST_TO_ADDR
16145: GO 16205
16147: LD_INT 32
16149: DOUBLE
16150: EQUAL
16151: IFTRUE 16155
16153: GO 16166
16155: POP
// bc_type := b_siberite_power ; 33 :
16156: LD_ADDR_OWVAR 42
16160: PUSH
16161: LD_INT 28
16163: ST_TO_ADDR
16164: GO 16205
16166: LD_INT 33
16168: DOUBLE
16169: EQUAL
16170: IFTRUE 16174
16172: GO 16185
16174: POP
// bc_type := b_oil_mine ; 34 :
16175: LD_ADDR_OWVAR 42
16179: PUSH
16180: LD_INT 29
16182: ST_TO_ADDR
16183: GO 16205
16185: LD_INT 34
16187: DOUBLE
16188: EQUAL
16189: IFTRUE 16193
16191: GO 16204
16193: POP
// bc_type := b_siberite_mine ; end ;
16194: LD_ADDR_OWVAR 42
16198: PUSH
16199: LD_INT 30
16201: ST_TO_ADDR
16202: GO 16205
16204: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16205: LD_ADDR_VAR 0 8
16209: PUSH
16210: LD_VAR 0 5
16214: PPUSH
16215: LD_VAR 0 6
16219: PPUSH
16220: LD_VAR 0 3
16224: PPUSH
16225: CALL_OW 47
16229: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16230: LD_OWVAR 42
16234: PUSH
16235: LD_INT 32
16237: PUSH
16238: LD_INT 33
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: IN
16245: IFFALSE 16261
// PlaceWeaponTurret ( b , weapon ) ;
16247: LD_VAR 0 8
16251: PPUSH
16252: LD_VAR 0 4
16256: PPUSH
16257: CALL_OW 431
// end ;
16261: LD_VAR 0 7
16265: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16266: LD_INT 0
16268: PPUSH
16269: PPUSH
16270: PPUSH
16271: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16272: LD_ADDR_VAR 0 4
16276: PUSH
16277: LD_INT 22
16279: PUSH
16280: LD_OWVAR 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: LD_INT 30
16294: PUSH
16295: LD_INT 0
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 30
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: ST_TO_ADDR
// if not tmp then
16326: LD_VAR 0 4
16330: NOT
16331: IFFALSE 16335
// exit ;
16333: GO 16394
// for i in tmp do
16335: LD_ADDR_VAR 0 2
16339: PUSH
16340: LD_VAR 0 4
16344: PUSH
16345: FOR_IN
16346: IFFALSE 16392
// for j = 1 to 3 do
16348: LD_ADDR_VAR 0 3
16352: PUSH
16353: DOUBLE
16354: LD_INT 1
16356: DEC
16357: ST_TO_ADDR
16358: LD_INT 3
16360: PUSH
16361: FOR_TO
16362: IFFALSE 16388
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16364: LD_VAR 0 2
16368: PPUSH
16369: CALL_OW 274
16373: PPUSH
16374: LD_VAR 0 3
16378: PPUSH
16379: LD_INT 99999
16381: PPUSH
16382: CALL_OW 277
16386: GO 16361
16388: POP
16389: POP
16390: GO 16345
16392: POP
16393: POP
// end ;
16394: LD_VAR 0 1
16398: RET
// export function hHackSetLevel10 ; var i , j ; begin
16399: LD_INT 0
16401: PPUSH
16402: PPUSH
16403: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16404: LD_ADDR_VAR 0 2
16408: PUSH
16409: LD_INT 21
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PPUSH
16419: CALL_OW 69
16423: PUSH
16424: FOR_IN
16425: IFFALSE 16477
// if IsSelected ( i ) then
16427: LD_VAR 0 2
16431: PPUSH
16432: CALL_OW 306
16436: IFFALSE 16475
// begin for j := 1 to 4 do
16438: LD_ADDR_VAR 0 3
16442: PUSH
16443: DOUBLE
16444: LD_INT 1
16446: DEC
16447: ST_TO_ADDR
16448: LD_INT 4
16450: PUSH
16451: FOR_TO
16452: IFFALSE 16473
// SetSkill ( i , j , 10 ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: LD_INT 10
16466: PPUSH
16467: CALL_OW 237
16471: GO 16451
16473: POP
16474: POP
// end ;
16475: GO 16424
16477: POP
16478: POP
// end ;
16479: LD_VAR 0 1
16483: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16484: LD_INT 0
16486: PPUSH
16487: PPUSH
16488: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16489: LD_ADDR_VAR 0 2
16493: PUSH
16494: LD_INT 22
16496: PUSH
16497: LD_OWVAR 2
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 21
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: PUSH
16525: FOR_IN
16526: IFFALSE 16567
// begin for j := 1 to 4 do
16528: LD_ADDR_VAR 0 3
16532: PUSH
16533: DOUBLE
16534: LD_INT 1
16536: DEC
16537: ST_TO_ADDR
16538: LD_INT 4
16540: PUSH
16541: FOR_TO
16542: IFFALSE 16563
// SetSkill ( i , j , 10 ) ;
16544: LD_VAR 0 2
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 10
16556: PPUSH
16557: CALL_OW 237
16561: GO 16541
16563: POP
16564: POP
// end ;
16565: GO 16525
16567: POP
16568: POP
// end ;
16569: LD_VAR 0 1
16573: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16574: LD_INT 0
16576: PPUSH
// uc_side := your_side ;
16577: LD_ADDR_OWVAR 20
16581: PUSH
16582: LD_OWVAR 2
16586: ST_TO_ADDR
// uc_nation := nation ;
16587: LD_ADDR_OWVAR 21
16591: PUSH
16592: LD_VAR 0 1
16596: ST_TO_ADDR
// InitHc ;
16597: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16601: LD_INT 0
16603: PPUSH
16604: LD_VAR 0 2
16608: PPUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16618: LD_VAR 0 4
16622: PPUSH
16623: LD_VAR 0 5
16627: PPUSH
16628: CALL_OW 428
16632: PUSH
16633: LD_INT 0
16635: EQUAL
16636: IFFALSE 16660
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16638: CALL_OW 44
16642: PPUSH
16643: LD_VAR 0 4
16647: PPUSH
16648: LD_VAR 0 5
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 48
// end ;
16660: LD_VAR 0 6
16664: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16665: LD_INT 0
16667: PPUSH
16668: PPUSH
// uc_side := your_side ;
16669: LD_ADDR_OWVAR 20
16673: PUSH
16674: LD_OWVAR 2
16678: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16679: LD_VAR 0 1
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: LD_INT 2
16689: PUSH
16690: LD_INT 3
16692: PUSH
16693: LD_INT 4
16695: PUSH
16696: LD_INT 5
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: IN
16706: IFFALSE 16718
// uc_nation := nation_american else
16708: LD_ADDR_OWVAR 21
16712: PUSH
16713: LD_INT 1
16715: ST_TO_ADDR
16716: GO 16761
// if chassis in [ 11 , 12 , 13 , 14 ] then
16718: LD_VAR 0 1
16722: PUSH
16723: LD_INT 11
16725: PUSH
16726: LD_INT 12
16728: PUSH
16729: LD_INT 13
16731: PUSH
16732: LD_INT 14
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: IN
16741: IFFALSE 16753
// uc_nation := nation_arabian else
16743: LD_ADDR_OWVAR 21
16747: PUSH
16748: LD_INT 2
16750: ST_TO_ADDR
16751: GO 16761
// uc_nation := nation_russian ;
16753: LD_ADDR_OWVAR 21
16757: PUSH
16758: LD_INT 3
16760: ST_TO_ADDR
// vc_chassis := chassis ;
16761: LD_ADDR_OWVAR 37
16765: PUSH
16766: LD_VAR 0 1
16770: ST_TO_ADDR
// vc_engine := engine ;
16771: LD_ADDR_OWVAR 39
16775: PUSH
16776: LD_VAR 0 2
16780: ST_TO_ADDR
// vc_control := control ;
16781: LD_ADDR_OWVAR 38
16785: PUSH
16786: LD_VAR 0 3
16790: ST_TO_ADDR
// vc_weapon := weapon ;
16791: LD_ADDR_OWVAR 40
16795: PUSH
16796: LD_VAR 0 4
16800: ST_TO_ADDR
// un := CreateVehicle ;
16801: LD_ADDR_VAR 0 8
16805: PUSH
16806: CALL_OW 45
16810: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16811: LD_VAR 0 8
16815: PPUSH
16816: LD_INT 0
16818: PPUSH
16819: LD_INT 5
16821: PPUSH
16822: CALL_OW 12
16826: PPUSH
16827: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16831: LD_VAR 0 8
16835: PPUSH
16836: LD_VAR 0 5
16840: PPUSH
16841: LD_VAR 0 6
16845: PPUSH
16846: LD_INT 1
16848: PPUSH
16849: CALL_OW 48
// end ;
16853: LD_VAR 0 7
16857: RET
// export hInvincible ; every 1 do
16858: GO 16860
16860: DISABLE
// hInvincible := [ ] ;
16861: LD_ADDR_EXP 81
16865: PUSH
16866: EMPTY
16867: ST_TO_ADDR
16868: END
// every 10 do var i ;
16869: GO 16871
16871: DISABLE
16872: LD_INT 0
16874: PPUSH
// begin enable ;
16875: ENABLE
// if not hInvincible then
16876: LD_EXP 81
16880: NOT
16881: IFFALSE 16885
// exit ;
16883: GO 16929
// for i in hInvincible do
16885: LD_ADDR_VAR 0 1
16889: PUSH
16890: LD_EXP 81
16894: PUSH
16895: FOR_IN
16896: IFFALSE 16927
// if GetLives ( i ) < 1000 then
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL_OW 256
16907: PUSH
16908: LD_INT 1000
16910: LESS
16911: IFFALSE 16925
// SetLives ( i , 1000 ) ;
16913: LD_VAR 0 1
16917: PPUSH
16918: LD_INT 1000
16920: PPUSH
16921: CALL_OW 234
16925: GO 16895
16927: POP
16928: POP
// end ;
16929: PPOPN 1
16931: END
// export function hHackInvincible ; var i ; begin
16932: LD_INT 0
16934: PPUSH
16935: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16936: LD_ADDR_VAR 0 2
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 21
16946: PUSH
16947: LD_INT 1
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 21
16956: PUSH
16957: LD_INT 2
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: PPUSH
16969: CALL_OW 69
16973: PUSH
16974: FOR_IN
16975: IFFALSE 17036
// if IsSelected ( i ) then
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL_OW 306
16986: IFFALSE 17034
// begin if i in hInvincible then
16988: LD_VAR 0 2
16992: PUSH
16993: LD_EXP 81
16997: IN
16998: IFFALSE 17018
// hInvincible := hInvincible diff i else
17000: LD_ADDR_EXP 81
17004: PUSH
17005: LD_EXP 81
17009: PUSH
17010: LD_VAR 0 2
17014: DIFF
17015: ST_TO_ADDR
17016: GO 17034
// hInvincible := hInvincible union i ;
17018: LD_ADDR_EXP 81
17022: PUSH
17023: LD_EXP 81
17027: PUSH
17028: LD_VAR 0 2
17032: UNION
17033: ST_TO_ADDR
// end ;
17034: GO 16974
17036: POP
17037: POP
// end ;
17038: LD_VAR 0 1
17042: RET
// export function hHackInvisible ; var i , j ; begin
17043: LD_INT 0
17045: PPUSH
17046: PPUSH
17047: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17048: LD_ADDR_VAR 0 2
17052: PUSH
17053: LD_INT 21
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PPUSH
17063: CALL_OW 69
17067: PUSH
17068: FOR_IN
17069: IFFALSE 17093
// if IsSelected ( i ) then
17071: LD_VAR 0 2
17075: PPUSH
17076: CALL_OW 306
17080: IFFALSE 17091
// ComForceInvisible ( i ) ;
17082: LD_VAR 0 2
17086: PPUSH
17087: CALL_OW 496
17091: GO 17068
17093: POP
17094: POP
// end ;
17095: LD_VAR 0 1
17099: RET
// export function hHackChangeYourSide ; begin
17100: LD_INT 0
17102: PPUSH
// if your_side = 8 then
17103: LD_OWVAR 2
17107: PUSH
17108: LD_INT 8
17110: EQUAL
17111: IFFALSE 17123
// your_side := 0 else
17113: LD_ADDR_OWVAR 2
17117: PUSH
17118: LD_INT 0
17120: ST_TO_ADDR
17121: GO 17137
// your_side := your_side + 1 ;
17123: LD_ADDR_OWVAR 2
17127: PUSH
17128: LD_OWVAR 2
17132: PUSH
17133: LD_INT 1
17135: PLUS
17136: ST_TO_ADDR
// end ;
17137: LD_VAR 0 1
17141: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
17146: PPUSH
// for i in all_units do
17147: LD_ADDR_VAR 0 2
17151: PUSH
17152: LD_OWVAR 3
17156: PUSH
17157: FOR_IN
17158: IFFALSE 17236
// if IsSelected ( i ) then
17160: LD_VAR 0 2
17164: PPUSH
17165: CALL_OW 306
17169: IFFALSE 17234
// begin j := GetSide ( i ) ;
17171: LD_ADDR_VAR 0 3
17175: PUSH
17176: LD_VAR 0 2
17180: PPUSH
17181: CALL_OW 255
17185: ST_TO_ADDR
// if j = 8 then
17186: LD_VAR 0 3
17190: PUSH
17191: LD_INT 8
17193: EQUAL
17194: IFFALSE 17206
// j := 0 else
17196: LD_ADDR_VAR 0 3
17200: PUSH
17201: LD_INT 0
17203: ST_TO_ADDR
17204: GO 17220
// j := j + 1 ;
17206: LD_ADDR_VAR 0 3
17210: PUSH
17211: LD_VAR 0 3
17215: PUSH
17216: LD_INT 1
17218: PLUS
17219: ST_TO_ADDR
// SetSide ( i , j ) ;
17220: LD_VAR 0 2
17224: PPUSH
17225: LD_VAR 0 3
17229: PPUSH
17230: CALL_OW 235
// end ;
17234: GO 17157
17236: POP
17237: POP
// end ;
17238: LD_VAR 0 1
17242: RET
// export function hHackFog ; begin
17243: LD_INT 0
17245: PPUSH
// FogOff ( true ) ;
17246: LD_INT 1
17248: PPUSH
17249: CALL_OW 344
// end ;
17253: LD_VAR 0 1
17257: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17258: LD_INT 0
17260: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17261: LD_VAR 0 1
17265: PPUSH
17266: LD_VAR 0 2
17270: PPUSH
17271: LD_VAR 0 3
17275: PPUSH
17276: LD_INT 1
17278: PPUSH
17279: LD_INT 1
17281: PPUSH
17282: CALL_OW 483
// CenterOnXY ( x , y ) ;
17286: LD_VAR 0 2
17290: PPUSH
17291: LD_VAR 0 3
17295: PPUSH
17296: CALL_OW 84
// end ; end_of_file
17300: LD_VAR 0 4
17304: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17305: LD_INT 0
17307: PPUSH
17308: PPUSH
// if exist_mode then
17309: LD_VAR 0 2
17313: IFFALSE 17338
// unit := CreateCharacter ( prefix & ident ) else
17315: LD_ADDR_VAR 0 5
17319: PUSH
17320: LD_VAR 0 3
17324: PUSH
17325: LD_VAR 0 1
17329: STR
17330: PPUSH
17331: CALL_OW 34
17335: ST_TO_ADDR
17336: GO 17353
// unit := NewCharacter ( ident ) ;
17338: LD_ADDR_VAR 0 5
17342: PUSH
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 25
17352: ST_TO_ADDR
// result := unit ;
17353: LD_ADDR_VAR 0 4
17357: PUSH
17358: LD_VAR 0 5
17362: ST_TO_ADDR
// end ;
17363: LD_VAR 0 4
17367: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17368: LD_INT 0
17370: PPUSH
17371: PPUSH
// if not side or not nation then
17372: LD_VAR 0 1
17376: NOT
17377: PUSH
17378: LD_VAR 0 2
17382: NOT
17383: OR
17384: IFFALSE 17388
// exit ;
17386: GO 18152
// case nation of nation_american :
17388: LD_VAR 0 2
17392: PUSH
17393: LD_INT 1
17395: DOUBLE
17396: EQUAL
17397: IFTRUE 17401
17399: GO 17615
17401: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17402: LD_ADDR_VAR 0 4
17406: PUSH
17407: LD_INT 35
17409: PUSH
17410: LD_INT 45
17412: PUSH
17413: LD_INT 46
17415: PUSH
17416: LD_INT 47
17418: PUSH
17419: LD_INT 82
17421: PUSH
17422: LD_INT 83
17424: PUSH
17425: LD_INT 84
17427: PUSH
17428: LD_INT 85
17430: PUSH
17431: LD_INT 86
17433: PUSH
17434: LD_INT 1
17436: PUSH
17437: LD_INT 2
17439: PUSH
17440: LD_INT 6
17442: PUSH
17443: LD_INT 15
17445: PUSH
17446: LD_INT 16
17448: PUSH
17449: LD_INT 7
17451: PUSH
17452: LD_INT 12
17454: PUSH
17455: LD_INT 13
17457: PUSH
17458: LD_INT 10
17460: PUSH
17461: LD_INT 14
17463: PUSH
17464: LD_INT 20
17466: PUSH
17467: LD_INT 21
17469: PUSH
17470: LD_INT 22
17472: PUSH
17473: LD_INT 25
17475: PUSH
17476: LD_INT 32
17478: PUSH
17479: LD_INT 27
17481: PUSH
17482: LD_INT 36
17484: PUSH
17485: LD_INT 69
17487: PUSH
17488: LD_INT 39
17490: PUSH
17491: LD_INT 34
17493: PUSH
17494: LD_INT 40
17496: PUSH
17497: LD_INT 48
17499: PUSH
17500: LD_INT 49
17502: PUSH
17503: LD_INT 50
17505: PUSH
17506: LD_INT 51
17508: PUSH
17509: LD_INT 52
17511: PUSH
17512: LD_INT 53
17514: PUSH
17515: LD_INT 54
17517: PUSH
17518: LD_INT 55
17520: PUSH
17521: LD_INT 56
17523: PUSH
17524: LD_INT 57
17526: PUSH
17527: LD_INT 58
17529: PUSH
17530: LD_INT 59
17532: PUSH
17533: LD_INT 60
17535: PUSH
17536: LD_INT 61
17538: PUSH
17539: LD_INT 62
17541: PUSH
17542: LD_INT 80
17544: PUSH
17545: LD_INT 82
17547: PUSH
17548: LD_INT 83
17550: PUSH
17551: LD_INT 84
17553: PUSH
17554: LD_INT 85
17556: PUSH
17557: LD_INT 86
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: ST_TO_ADDR
17613: GO 18076
17615: LD_INT 2
17617: DOUBLE
17618: EQUAL
17619: IFTRUE 17623
17621: GO 17845
17623: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
17624: LD_ADDR_VAR 0 4
17628: PUSH
17629: LD_INT 35
17631: PUSH
17632: LD_INT 45
17634: PUSH
17635: LD_INT 46
17637: PUSH
17638: LD_INT 47
17640: PUSH
17641: LD_INT 82
17643: PUSH
17644: LD_INT 83
17646: PUSH
17647: LD_INT 84
17649: PUSH
17650: LD_INT 85
17652: PUSH
17653: LD_INT 87
17655: PUSH
17656: LD_INT 70
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: LD_INT 11
17664: PUSH
17665: LD_INT 3
17667: PUSH
17668: LD_INT 4
17670: PUSH
17671: LD_INT 5
17673: PUSH
17674: LD_INT 6
17676: PUSH
17677: LD_INT 15
17679: PUSH
17680: LD_INT 18
17682: PUSH
17683: LD_INT 7
17685: PUSH
17686: LD_INT 17
17688: PUSH
17689: LD_INT 8
17691: PUSH
17692: LD_INT 20
17694: PUSH
17695: LD_INT 21
17697: PUSH
17698: LD_INT 22
17700: PUSH
17701: LD_INT 72
17703: PUSH
17704: LD_INT 26
17706: PUSH
17707: LD_INT 69
17709: PUSH
17710: LD_INT 39
17712: PUSH
17713: LD_INT 40
17715: PUSH
17716: LD_INT 41
17718: PUSH
17719: LD_INT 42
17721: PUSH
17722: LD_INT 43
17724: PUSH
17725: LD_INT 48
17727: PUSH
17728: LD_INT 49
17730: PUSH
17731: LD_INT 50
17733: PUSH
17734: LD_INT 51
17736: PUSH
17737: LD_INT 52
17739: PUSH
17740: LD_INT 53
17742: PUSH
17743: LD_INT 54
17745: PUSH
17746: LD_INT 55
17748: PUSH
17749: LD_INT 56
17751: PUSH
17752: LD_INT 60
17754: PUSH
17755: LD_INT 61
17757: PUSH
17758: LD_INT 62
17760: PUSH
17761: LD_INT 66
17763: PUSH
17764: LD_INT 67
17766: PUSH
17767: LD_INT 68
17769: PUSH
17770: LD_INT 81
17772: PUSH
17773: LD_INT 82
17775: PUSH
17776: LD_INT 83
17778: PUSH
17779: LD_INT 84
17781: PUSH
17782: LD_INT 85
17784: PUSH
17785: LD_INT 87
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: ST_TO_ADDR
17843: GO 18076
17845: LD_INT 3
17847: DOUBLE
17848: EQUAL
17849: IFTRUE 17853
17851: GO 18075
17853: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17854: LD_ADDR_VAR 0 4
17858: PUSH
17859: LD_INT 46
17861: PUSH
17862: LD_INT 47
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 82
17873: PUSH
17874: LD_INT 83
17876: PUSH
17877: LD_INT 84
17879: PUSH
17880: LD_INT 85
17882: PUSH
17883: LD_INT 86
17885: PUSH
17886: LD_INT 11
17888: PUSH
17889: LD_INT 9
17891: PUSH
17892: LD_INT 20
17894: PUSH
17895: LD_INT 19
17897: PUSH
17898: LD_INT 21
17900: PUSH
17901: LD_INT 24
17903: PUSH
17904: LD_INT 22
17906: PUSH
17907: LD_INT 25
17909: PUSH
17910: LD_INT 28
17912: PUSH
17913: LD_INT 29
17915: PUSH
17916: LD_INT 30
17918: PUSH
17919: LD_INT 31
17921: PUSH
17922: LD_INT 37
17924: PUSH
17925: LD_INT 38
17927: PUSH
17928: LD_INT 32
17930: PUSH
17931: LD_INT 27
17933: PUSH
17934: LD_INT 33
17936: PUSH
17937: LD_INT 69
17939: PUSH
17940: LD_INT 39
17942: PUSH
17943: LD_INT 34
17945: PUSH
17946: LD_INT 40
17948: PUSH
17949: LD_INT 71
17951: PUSH
17952: LD_INT 23
17954: PUSH
17955: LD_INT 44
17957: PUSH
17958: LD_INT 48
17960: PUSH
17961: LD_INT 49
17963: PUSH
17964: LD_INT 50
17966: PUSH
17967: LD_INT 51
17969: PUSH
17970: LD_INT 52
17972: PUSH
17973: LD_INT 53
17975: PUSH
17976: LD_INT 54
17978: PUSH
17979: LD_INT 55
17981: PUSH
17982: LD_INT 56
17984: PUSH
17985: LD_INT 57
17987: PUSH
17988: LD_INT 58
17990: PUSH
17991: LD_INT 59
17993: PUSH
17994: LD_INT 63
17996: PUSH
17997: LD_INT 64
17999: PUSH
18000: LD_INT 65
18002: PUSH
18003: LD_INT 82
18005: PUSH
18006: LD_INT 83
18008: PUSH
18009: LD_INT 84
18011: PUSH
18012: LD_INT 85
18014: PUSH
18015: LD_INT 86
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: ST_TO_ADDR
18073: GO 18076
18075: POP
// if state > - 1 and state < 3 then
18076: LD_VAR 0 3
18080: PUSH
18081: LD_INT 1
18083: NEG
18084: GREATER
18085: PUSH
18086: LD_VAR 0 3
18090: PUSH
18091: LD_INT 3
18093: LESS
18094: AND
18095: IFFALSE 18152
// for i in result do
18097: LD_ADDR_VAR 0 5
18101: PUSH
18102: LD_VAR 0 4
18106: PUSH
18107: FOR_IN
18108: IFFALSE 18150
// if GetTech ( i , side ) <> state then
18110: LD_VAR 0 5
18114: PPUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: CALL_OW 321
18124: PUSH
18125: LD_VAR 0 3
18129: NONEQUAL
18130: IFFALSE 18148
// result := result diff i ;
18132: LD_ADDR_VAR 0 4
18136: PUSH
18137: LD_VAR 0 4
18141: PUSH
18142: LD_VAR 0 5
18146: DIFF
18147: ST_TO_ADDR
18148: GO 18107
18150: POP
18151: POP
// end ;
18152: LD_VAR 0 4
18156: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18157: LD_INT 0
18159: PPUSH
18160: PPUSH
18161: PPUSH
// result := true ;
18162: LD_ADDR_VAR 0 3
18166: PUSH
18167: LD_INT 1
18169: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18170: LD_ADDR_VAR 0 5
18174: PUSH
18175: LD_VAR 0 2
18179: PPUSH
18180: CALL_OW 480
18184: ST_TO_ADDR
// if not tmp then
18185: LD_VAR 0 5
18189: NOT
18190: IFFALSE 18194
// exit ;
18192: GO 18243
// for i in tmp do
18194: LD_ADDR_VAR 0 4
18198: PUSH
18199: LD_VAR 0 5
18203: PUSH
18204: FOR_IN
18205: IFFALSE 18241
// if GetTech ( i , side ) <> state_researched then
18207: LD_VAR 0 4
18211: PPUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 321
18221: PUSH
18222: LD_INT 2
18224: NONEQUAL
18225: IFFALSE 18239
// begin result := false ;
18227: LD_ADDR_VAR 0 3
18231: PUSH
18232: LD_INT 0
18234: ST_TO_ADDR
// exit ;
18235: POP
18236: POP
18237: GO 18243
// end ;
18239: GO 18204
18241: POP
18242: POP
// end ;
18243: LD_VAR 0 3
18247: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18248: LD_INT 0
18250: PPUSH
18251: PPUSH
18252: PPUSH
18253: PPUSH
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
18258: PPUSH
18259: PPUSH
18260: PPUSH
18261: PPUSH
18262: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18263: LD_VAR 0 1
18267: NOT
18268: PUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: CALL_OW 257
18278: PUSH
18279: LD_INT 9
18281: NONEQUAL
18282: OR
18283: IFFALSE 18287
// exit ;
18285: GO 18860
// side := GetSide ( unit ) ;
18287: LD_ADDR_VAR 0 9
18291: PUSH
18292: LD_VAR 0 1
18296: PPUSH
18297: CALL_OW 255
18301: ST_TO_ADDR
// tech_space := tech_spacanom ;
18302: LD_ADDR_VAR 0 12
18306: PUSH
18307: LD_INT 29
18309: ST_TO_ADDR
// tech_time := tech_taurad ;
18310: LD_ADDR_VAR 0 13
18314: PUSH
18315: LD_INT 28
18317: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18318: LD_ADDR_VAR 0 11
18322: PUSH
18323: LD_VAR 0 1
18327: PPUSH
18328: CALL_OW 310
18332: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18333: LD_VAR 0 11
18337: PPUSH
18338: CALL_OW 247
18342: PUSH
18343: LD_INT 2
18345: EQUAL
18346: IFFALSE 18350
// exit ;
18348: GO 18860
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18350: LD_ADDR_VAR 0 8
18354: PUSH
18355: LD_INT 81
18357: PUSH
18358: LD_VAR 0 9
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 3
18369: PUSH
18370: LD_INT 21
18372: PUSH
18373: LD_INT 3
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PPUSH
18388: CALL_OW 69
18392: ST_TO_ADDR
// if not tmp then
18393: LD_VAR 0 8
18397: NOT
18398: IFFALSE 18402
// exit ;
18400: GO 18860
// if in_unit then
18402: LD_VAR 0 11
18406: IFFALSE 18430
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18408: LD_ADDR_VAR 0 10
18412: PUSH
18413: LD_VAR 0 8
18417: PPUSH
18418: LD_VAR 0 11
18422: PPUSH
18423: CALL_OW 74
18427: ST_TO_ADDR
18428: GO 18450
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18430: LD_ADDR_VAR 0 10
18434: PUSH
18435: LD_VAR 0 8
18439: PPUSH
18440: LD_VAR 0 1
18444: PPUSH
18445: CALL_OW 74
18449: ST_TO_ADDR
// if not enemy then
18450: LD_VAR 0 10
18454: NOT
18455: IFFALSE 18459
// exit ;
18457: GO 18860
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18459: LD_VAR 0 11
18463: PUSH
18464: LD_VAR 0 11
18468: PPUSH
18469: LD_VAR 0 10
18473: PPUSH
18474: CALL_OW 296
18478: PUSH
18479: LD_INT 13
18481: GREATER
18482: AND
18483: PUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: LD_VAR 0 10
18493: PPUSH
18494: CALL_OW 296
18498: PUSH
18499: LD_INT 12
18501: GREATER
18502: OR
18503: IFFALSE 18507
// exit ;
18505: GO 18860
// missile := [ 1 ] ;
18507: LD_ADDR_VAR 0 14
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18518: LD_VAR 0 9
18522: PPUSH
18523: LD_VAR 0 12
18527: PPUSH
18528: CALL_OW 325
18532: IFFALSE 18561
// missile := Insert ( missile , missile + 1 , 2 ) ;
18534: LD_ADDR_VAR 0 14
18538: PUSH
18539: LD_VAR 0 14
18543: PPUSH
18544: LD_VAR 0 14
18548: PUSH
18549: LD_INT 1
18551: PLUS
18552: PPUSH
18553: LD_INT 2
18555: PPUSH
18556: CALL_OW 2
18560: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18561: LD_VAR 0 9
18565: PPUSH
18566: LD_VAR 0 13
18570: PPUSH
18571: CALL_OW 325
18575: PUSH
18576: LD_VAR 0 10
18580: PPUSH
18581: CALL_OW 255
18585: PPUSH
18586: LD_VAR 0 13
18590: PPUSH
18591: CALL_OW 325
18595: NOT
18596: AND
18597: IFFALSE 18626
// missile := Insert ( missile , missile + 1 , 3 ) ;
18599: LD_ADDR_VAR 0 14
18603: PUSH
18604: LD_VAR 0 14
18608: PPUSH
18609: LD_VAR 0 14
18613: PUSH
18614: LD_INT 1
18616: PLUS
18617: PPUSH
18618: LD_INT 3
18620: PPUSH
18621: CALL_OW 2
18625: ST_TO_ADDR
// if missile < 2 then
18626: LD_VAR 0 14
18630: PUSH
18631: LD_INT 2
18633: LESS
18634: IFFALSE 18638
// exit ;
18636: GO 18860
// x := GetX ( enemy ) ;
18638: LD_ADDR_VAR 0 4
18642: PUSH
18643: LD_VAR 0 10
18647: PPUSH
18648: CALL_OW 250
18652: ST_TO_ADDR
// y := GetY ( enemy ) ;
18653: LD_ADDR_VAR 0 5
18657: PUSH
18658: LD_VAR 0 10
18662: PPUSH
18663: CALL_OW 251
18667: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18668: LD_ADDR_VAR 0 6
18672: PUSH
18673: LD_VAR 0 4
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL_OW 12
18689: PLUS
18690: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18691: LD_ADDR_VAR 0 7
18695: PUSH
18696: LD_VAR 0 5
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: CALL_OW 12
18712: PLUS
18713: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18714: LD_VAR 0 6
18718: PPUSH
18719: LD_VAR 0 7
18723: PPUSH
18724: CALL_OW 488
18728: NOT
18729: IFFALSE 18751
// begin _x := x ;
18731: LD_ADDR_VAR 0 6
18735: PUSH
18736: LD_VAR 0 4
18740: ST_TO_ADDR
// _y := y ;
18741: LD_ADDR_VAR 0 7
18745: PUSH
18746: LD_VAR 0 5
18750: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18751: LD_ADDR_VAR 0 3
18755: PUSH
18756: LD_INT 1
18758: PPUSH
18759: LD_VAR 0 14
18763: PPUSH
18764: CALL_OW 12
18768: ST_TO_ADDR
// case i of 1 :
18769: LD_VAR 0 3
18773: PUSH
18774: LD_INT 1
18776: DOUBLE
18777: EQUAL
18778: IFTRUE 18782
18780: GO 18799
18782: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18783: LD_VAR 0 1
18787: PPUSH
18788: LD_VAR 0 10
18792: PPUSH
18793: CALL_OW 115
18797: GO 18860
18799: LD_INT 2
18801: DOUBLE
18802: EQUAL
18803: IFTRUE 18807
18805: GO 18829
18807: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18808: LD_VAR 0 1
18812: PPUSH
18813: LD_VAR 0 6
18817: PPUSH
18818: LD_VAR 0 7
18822: PPUSH
18823: CALL_OW 153
18827: GO 18860
18829: LD_INT 3
18831: DOUBLE
18832: EQUAL
18833: IFTRUE 18837
18835: GO 18859
18837: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18838: LD_VAR 0 1
18842: PPUSH
18843: LD_VAR 0 6
18847: PPUSH
18848: LD_VAR 0 7
18852: PPUSH
18853: CALL_OW 154
18857: GO 18860
18859: POP
// end ;
18860: LD_VAR 0 2
18864: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18865: LD_INT 0
18867: PPUSH
18868: PPUSH
18869: PPUSH
18870: PPUSH
18871: PPUSH
18872: PPUSH
// if not unit or not building then
18873: LD_VAR 0 1
18877: NOT
18878: PUSH
18879: LD_VAR 0 2
18883: NOT
18884: OR
18885: IFFALSE 18889
// exit ;
18887: GO 19047
// x := GetX ( building ) ;
18889: LD_ADDR_VAR 0 5
18893: PUSH
18894: LD_VAR 0 2
18898: PPUSH
18899: CALL_OW 250
18903: ST_TO_ADDR
// y := GetY ( building ) ;
18904: LD_ADDR_VAR 0 6
18908: PUSH
18909: LD_VAR 0 2
18913: PPUSH
18914: CALL_OW 251
18918: ST_TO_ADDR
// for i = 0 to 5 do
18919: LD_ADDR_VAR 0 4
18923: PUSH
18924: DOUBLE
18925: LD_INT 0
18927: DEC
18928: ST_TO_ADDR
18929: LD_INT 5
18931: PUSH
18932: FOR_TO
18933: IFFALSE 19045
// begin _x := ShiftX ( x , i , 3 ) ;
18935: LD_ADDR_VAR 0 7
18939: PUSH
18940: LD_VAR 0 5
18944: PPUSH
18945: LD_VAR 0 4
18949: PPUSH
18950: LD_INT 3
18952: PPUSH
18953: CALL_OW 272
18957: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18958: LD_ADDR_VAR 0 8
18962: PUSH
18963: LD_VAR 0 6
18967: PPUSH
18968: LD_VAR 0 4
18972: PPUSH
18973: LD_INT 3
18975: PPUSH
18976: CALL_OW 273
18980: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18981: LD_VAR 0 7
18985: PPUSH
18986: LD_VAR 0 8
18990: PPUSH
18991: CALL_OW 488
18995: NOT
18996: IFFALSE 19000
// continue ;
18998: GO 18932
// if HexInfo ( _x , _y ) = 0 then
19000: LD_VAR 0 7
19004: PPUSH
19005: LD_VAR 0 8
19009: PPUSH
19010: CALL_OW 428
19014: PUSH
19015: LD_INT 0
19017: EQUAL
19018: IFFALSE 19043
// begin ComMoveXY ( unit , _x , _y ) ;
19020: LD_VAR 0 1
19024: PPUSH
19025: LD_VAR 0 7
19029: PPUSH
19030: LD_VAR 0 8
19034: PPUSH
19035: CALL_OW 111
// exit ;
19039: POP
19040: POP
19041: GO 19047
// end ; end ;
19043: GO 18932
19045: POP
19046: POP
// end ;
19047: LD_VAR 0 3
19051: RET
// export function ScanBase ( side , base_area ) ; begin
19052: LD_INT 0
19054: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19055: LD_ADDR_VAR 0 3
19059: PUSH
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_INT 81
19067: PUSH
19068: LD_VAR 0 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PPUSH
19077: CALL_OW 70
19081: ST_TO_ADDR
// end ;
19082: LD_VAR 0 3
19086: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
// result := false ;
19093: LD_ADDR_VAR 0 2
19097: PUSH
19098: LD_INT 0
19100: ST_TO_ADDR
// side := GetSide ( unit ) ;
19101: LD_ADDR_VAR 0 3
19105: PUSH
19106: LD_VAR 0 1
19110: PPUSH
19111: CALL_OW 255
19115: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19116: LD_ADDR_VAR 0 4
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL_OW 248
19130: ST_TO_ADDR
// case nat of 1 :
19131: LD_VAR 0 4
19135: PUSH
19136: LD_INT 1
19138: DOUBLE
19139: EQUAL
19140: IFTRUE 19144
19142: GO 19155
19144: POP
// tech := tech_lassight ; 2 :
19145: LD_ADDR_VAR 0 5
19149: PUSH
19150: LD_INT 12
19152: ST_TO_ADDR
19153: GO 19194
19155: LD_INT 2
19157: DOUBLE
19158: EQUAL
19159: IFTRUE 19163
19161: GO 19174
19163: POP
// tech := tech_mortar ; 3 :
19164: LD_ADDR_VAR 0 5
19168: PUSH
19169: LD_INT 41
19171: ST_TO_ADDR
19172: GO 19194
19174: LD_INT 3
19176: DOUBLE
19177: EQUAL
19178: IFTRUE 19182
19180: GO 19193
19182: POP
// tech := tech_bazooka ; end ;
19183: LD_ADDR_VAR 0 5
19187: PUSH
19188: LD_INT 44
19190: ST_TO_ADDR
19191: GO 19194
19193: POP
// if Researched ( side , tech ) then
19194: LD_VAR 0 3
19198: PPUSH
19199: LD_VAR 0 5
19203: PPUSH
19204: CALL_OW 325
19208: IFFALSE 19235
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19210: LD_ADDR_VAR 0 2
19214: PUSH
19215: LD_INT 5
19217: PUSH
19218: LD_INT 8
19220: PUSH
19221: LD_INT 9
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: LIST
19228: PUSH
19229: LD_VAR 0 4
19233: ARRAY
19234: ST_TO_ADDR
// end ;
19235: LD_VAR 0 2
19239: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19240: LD_INT 0
19242: PPUSH
19243: PPUSH
19244: PPUSH
// if not mines then
19245: LD_VAR 0 2
19249: NOT
19250: IFFALSE 19254
// exit ;
19252: GO 19398
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19254: LD_ADDR_VAR 0 5
19258: PUSH
19259: LD_INT 81
19261: PUSH
19262: LD_VAR 0 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 3
19273: PUSH
19274: LD_INT 21
19276: PUSH
19277: LD_INT 3
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PPUSH
19292: CALL_OW 69
19296: ST_TO_ADDR
// for i in mines do
19297: LD_ADDR_VAR 0 4
19301: PUSH
19302: LD_VAR 0 2
19306: PUSH
19307: FOR_IN
19308: IFFALSE 19396
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19310: LD_VAR 0 4
19314: PUSH
19315: LD_INT 1
19317: ARRAY
19318: PPUSH
19319: LD_VAR 0 4
19323: PUSH
19324: LD_INT 2
19326: ARRAY
19327: PPUSH
19328: CALL_OW 458
19332: NOT
19333: IFFALSE 19337
// continue ;
19335: GO 19307
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19337: LD_VAR 0 4
19341: PUSH
19342: LD_INT 1
19344: ARRAY
19345: PPUSH
19346: LD_VAR 0 4
19350: PUSH
19351: LD_INT 2
19353: ARRAY
19354: PPUSH
19355: CALL_OW 428
19359: PUSH
19360: LD_VAR 0 5
19364: IN
19365: IFFALSE 19394
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19367: LD_VAR 0 4
19371: PUSH
19372: LD_INT 1
19374: ARRAY
19375: PPUSH
19376: LD_VAR 0 4
19380: PUSH
19381: LD_INT 2
19383: ARRAY
19384: PPUSH
19385: LD_VAR 0 1
19389: PPUSH
19390: CALL_OW 456
// end ;
19394: GO 19307
19396: POP
19397: POP
// end ;
19398: LD_VAR 0 3
19402: RET
// export function Count ( array ) ; var i ; begin
19403: LD_INT 0
19405: PPUSH
19406: PPUSH
// result := 0 ;
19407: LD_ADDR_VAR 0 2
19411: PUSH
19412: LD_INT 0
19414: ST_TO_ADDR
// for i in array do
19415: LD_ADDR_VAR 0 3
19419: PUSH
19420: LD_VAR 0 1
19424: PUSH
19425: FOR_IN
19426: IFFALSE 19450
// if i then
19428: LD_VAR 0 3
19432: IFFALSE 19448
// result := result + 1 ;
19434: LD_ADDR_VAR 0 2
19438: PUSH
19439: LD_VAR 0 2
19443: PUSH
19444: LD_INT 1
19446: PLUS
19447: ST_TO_ADDR
19448: GO 19425
19450: POP
19451: POP
// end ;
19452: LD_VAR 0 2
19456: RET
// export function IsEmpty ( building ) ; begin
19457: LD_INT 0
19459: PPUSH
// if not building then
19460: LD_VAR 0 1
19464: NOT
19465: IFFALSE 19469
// exit ;
19467: GO 19512
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19469: LD_ADDR_VAR 0 2
19473: PUSH
19474: LD_VAR 0 1
19478: PUSH
19479: LD_INT 22
19481: PUSH
19482: LD_VAR 0 1
19486: PPUSH
19487: CALL_OW 255
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 58
19498: PUSH
19499: EMPTY
19500: LIST
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PPUSH
19506: CALL_OW 69
19510: IN
19511: ST_TO_ADDR
// end ;
19512: LD_VAR 0 2
19516: RET
// export function IsNotFull ( building ) ; begin
19517: LD_INT 0
19519: PPUSH
// if not building then
19520: LD_VAR 0 1
19524: NOT
19525: IFFALSE 19529
// exit ;
19527: GO 19548
// result := UnitsInside ( building ) < 6 ;
19529: LD_ADDR_VAR 0 2
19533: PUSH
19534: LD_VAR 0 1
19538: PPUSH
19539: CALL_OW 313
19543: PUSH
19544: LD_INT 6
19546: LESS
19547: ST_TO_ADDR
// end ;
19548: LD_VAR 0 2
19552: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19553: LD_INT 0
19555: PPUSH
19556: PPUSH
19557: PPUSH
19558: PPUSH
// tmp := [ ] ;
19559: LD_ADDR_VAR 0 3
19563: PUSH
19564: EMPTY
19565: ST_TO_ADDR
// list := [ ] ;
19566: LD_ADDR_VAR 0 5
19570: PUSH
19571: EMPTY
19572: ST_TO_ADDR
// for i = 16 to 25 do
19573: LD_ADDR_VAR 0 4
19577: PUSH
19578: DOUBLE
19579: LD_INT 16
19581: DEC
19582: ST_TO_ADDR
19583: LD_INT 25
19585: PUSH
19586: FOR_TO
19587: IFFALSE 19660
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19589: LD_ADDR_VAR 0 3
19593: PUSH
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 22
19601: PUSH
19602: LD_VAR 0 1
19606: PPUSH
19607: CALL_OW 255
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 91
19618: PUSH
19619: LD_VAR 0 1
19623: PUSH
19624: LD_INT 6
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 30
19634: PUSH
19635: LD_VAR 0 4
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: PPUSH
19652: CALL_OW 69
19656: ADD
19657: ST_TO_ADDR
19658: GO 19586
19660: POP
19661: POP
// for i = 1 to tmp do
19662: LD_ADDR_VAR 0 4
19666: PUSH
19667: DOUBLE
19668: LD_INT 1
19670: DEC
19671: ST_TO_ADDR
19672: LD_VAR 0 3
19676: PUSH
19677: FOR_TO
19678: IFFALSE 19766
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19680: LD_ADDR_VAR 0 5
19684: PUSH
19685: LD_VAR 0 5
19689: PUSH
19690: LD_VAR 0 3
19694: PUSH
19695: LD_VAR 0 4
19699: ARRAY
19700: PPUSH
19701: CALL_OW 266
19705: PUSH
19706: LD_VAR 0 3
19710: PUSH
19711: LD_VAR 0 4
19715: ARRAY
19716: PPUSH
19717: CALL_OW 250
19721: PUSH
19722: LD_VAR 0 3
19726: PUSH
19727: LD_VAR 0 4
19731: ARRAY
19732: PPUSH
19733: CALL_OW 251
19737: PUSH
19738: LD_VAR 0 3
19742: PUSH
19743: LD_VAR 0 4
19747: ARRAY
19748: PPUSH
19749: CALL_OW 254
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: ADD
19763: ST_TO_ADDR
19764: GO 19677
19766: POP
19767: POP
// result := list ;
19768: LD_ADDR_VAR 0 2
19772: PUSH
19773: LD_VAR 0 5
19777: ST_TO_ADDR
// end ;
19778: LD_VAR 0 2
19782: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19783: LD_INT 0
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
19789: PPUSH
19790: PPUSH
19791: PPUSH
// if not factory then
19792: LD_VAR 0 1
19796: NOT
19797: IFFALSE 19801
// exit ;
19799: GO 20394
// if control = control_apeman then
19801: LD_VAR 0 4
19805: PUSH
19806: LD_INT 5
19808: EQUAL
19809: IFFALSE 19918
// begin tmp := UnitsInside ( factory ) ;
19811: LD_ADDR_VAR 0 8
19815: PUSH
19816: LD_VAR 0 1
19820: PPUSH
19821: CALL_OW 313
19825: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19826: LD_VAR 0 8
19830: PPUSH
19831: LD_INT 25
19833: PUSH
19834: LD_INT 12
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 72
19845: NOT
19846: IFFALSE 19856
// control := control_manual ;
19848: LD_ADDR_VAR 0 4
19852: PUSH
19853: LD_INT 1
19855: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19856: LD_ADDR_VAR 0 8
19860: PUSH
19861: LD_VAR 0 1
19865: PPUSH
19866: CALL 19553 0 1
19870: ST_TO_ADDR
// if tmp then
19871: LD_VAR 0 8
19875: IFFALSE 19918
// begin for i in tmp do
19877: LD_ADDR_VAR 0 7
19881: PUSH
19882: LD_VAR 0 8
19886: PUSH
19887: FOR_IN
19888: IFFALSE 19916
// if i [ 1 ] = b_ext_radio then
19890: LD_VAR 0 7
19894: PUSH
19895: LD_INT 1
19897: ARRAY
19898: PUSH
19899: LD_INT 22
19901: EQUAL
19902: IFFALSE 19914
// begin control := control_remote ;
19904: LD_ADDR_VAR 0 4
19908: PUSH
19909: LD_INT 2
19911: ST_TO_ADDR
// break ;
19912: GO 19916
// end ;
19914: GO 19887
19916: POP
19917: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19918: LD_VAR 0 1
19922: PPUSH
19923: LD_VAR 0 2
19927: PPUSH
19928: LD_VAR 0 3
19932: PPUSH
19933: LD_VAR 0 4
19937: PPUSH
19938: LD_VAR 0 5
19942: PPUSH
19943: CALL_OW 448
19947: IFFALSE 19982
// begin result := [ chassis , engine , control , weapon ] ;
19949: LD_ADDR_VAR 0 6
19953: PUSH
19954: LD_VAR 0 2
19958: PUSH
19959: LD_VAR 0 3
19963: PUSH
19964: LD_VAR 0 4
19968: PUSH
19969: LD_VAR 0 5
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: ST_TO_ADDR
// exit ;
19980: GO 20394
// end ; _chassis := AvailableChassisList ( factory ) ;
19982: LD_ADDR_VAR 0 9
19986: PUSH
19987: LD_VAR 0 1
19991: PPUSH
19992: CALL_OW 475
19996: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19997: LD_ADDR_VAR 0 11
20001: PUSH
20002: LD_VAR 0 1
20006: PPUSH
20007: CALL_OW 476
20011: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20012: LD_ADDR_VAR 0 12
20016: PUSH
20017: LD_VAR 0 1
20021: PPUSH
20022: CALL_OW 477
20026: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20027: LD_ADDR_VAR 0 10
20031: PUSH
20032: LD_VAR 0 1
20036: PPUSH
20037: CALL_OW 478
20041: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20042: LD_VAR 0 9
20046: NOT
20047: PUSH
20048: LD_VAR 0 11
20052: NOT
20053: OR
20054: PUSH
20055: LD_VAR 0 12
20059: NOT
20060: OR
20061: PUSH
20062: LD_VAR 0 10
20066: NOT
20067: OR
20068: IFFALSE 20103
// begin result := [ chassis , engine , control , weapon ] ;
20070: LD_ADDR_VAR 0 6
20074: PUSH
20075: LD_VAR 0 2
20079: PUSH
20080: LD_VAR 0 3
20084: PUSH
20085: LD_VAR 0 4
20089: PUSH
20090: LD_VAR 0 5
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: ST_TO_ADDR
// exit ;
20101: GO 20394
// end ; if not chassis in _chassis then
20103: LD_VAR 0 2
20107: PUSH
20108: LD_VAR 0 9
20112: IN
20113: NOT
20114: IFFALSE 20140
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20116: LD_ADDR_VAR 0 2
20120: PUSH
20121: LD_VAR 0 9
20125: PUSH
20126: LD_INT 1
20128: PPUSH
20129: LD_VAR 0 9
20133: PPUSH
20134: CALL_OW 12
20138: ARRAY
20139: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20140: LD_VAR 0 2
20144: PPUSH
20145: LD_VAR 0 3
20149: PPUSH
20150: CALL 20399 0 2
20154: NOT
20155: IFFALSE 20214
// repeat engine := _engine [ 1 ] ;
20157: LD_ADDR_VAR 0 3
20161: PUSH
20162: LD_VAR 0 11
20166: PUSH
20167: LD_INT 1
20169: ARRAY
20170: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20171: LD_ADDR_VAR 0 11
20175: PUSH
20176: LD_VAR 0 11
20180: PPUSH
20181: LD_INT 1
20183: PPUSH
20184: CALL_OW 3
20188: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20189: LD_VAR 0 2
20193: PPUSH
20194: LD_VAR 0 3
20198: PPUSH
20199: CALL 20399 0 2
20203: PUSH
20204: LD_VAR 0 11
20208: PUSH
20209: EMPTY
20210: EQUAL
20211: OR
20212: IFFALSE 20157
// if not control in _control then
20214: LD_VAR 0 4
20218: PUSH
20219: LD_VAR 0 12
20223: IN
20224: NOT
20225: IFFALSE 20251
// control := _control [ rand ( 1 , _control ) ] ;
20227: LD_ADDR_VAR 0 4
20231: PUSH
20232: LD_VAR 0 12
20236: PUSH
20237: LD_INT 1
20239: PPUSH
20240: LD_VAR 0 12
20244: PPUSH
20245: CALL_OW 12
20249: ARRAY
20250: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20251: LD_VAR 0 2
20255: PPUSH
20256: LD_VAR 0 5
20260: PPUSH
20261: CALL 20619 0 2
20265: NOT
20266: IFFALSE 20325
// repeat weapon := _weapon [ 1 ] ;
20268: LD_ADDR_VAR 0 5
20272: PUSH
20273: LD_VAR 0 10
20277: PUSH
20278: LD_INT 1
20280: ARRAY
20281: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20282: LD_ADDR_VAR 0 10
20286: PUSH
20287: LD_VAR 0 10
20291: PPUSH
20292: LD_INT 1
20294: PPUSH
20295: CALL_OW 3
20299: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20300: LD_VAR 0 2
20304: PPUSH
20305: LD_VAR 0 5
20309: PPUSH
20310: CALL 20619 0 2
20314: PUSH
20315: LD_VAR 0 10
20319: PUSH
20320: EMPTY
20321: EQUAL
20322: OR
20323: IFFALSE 20268
// result := [ ] ;
20325: LD_ADDR_VAR 0 6
20329: PUSH
20330: EMPTY
20331: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_VAR 0 2
20341: PPUSH
20342: LD_VAR 0 3
20346: PPUSH
20347: LD_VAR 0 4
20351: PPUSH
20352: LD_VAR 0 5
20356: PPUSH
20357: CALL_OW 448
20361: IFFALSE 20394
// result := [ chassis , engine , control , weapon ] ;
20363: LD_ADDR_VAR 0 6
20367: PUSH
20368: LD_VAR 0 2
20372: PUSH
20373: LD_VAR 0 3
20377: PUSH
20378: LD_VAR 0 4
20382: PUSH
20383: LD_VAR 0 5
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: ST_TO_ADDR
// end ;
20394: LD_VAR 0 6
20398: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20399: LD_INT 0
20401: PPUSH
// if not chassis or not engine then
20402: LD_VAR 0 1
20406: NOT
20407: PUSH
20408: LD_VAR 0 2
20412: NOT
20413: OR
20414: IFFALSE 20418
// exit ;
20416: GO 20614
// case engine of engine_solar :
20418: LD_VAR 0 2
20422: PUSH
20423: LD_INT 2
20425: DOUBLE
20426: EQUAL
20427: IFTRUE 20431
20429: GO 20469
20431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20432: LD_ADDR_VAR 0 3
20436: PUSH
20437: LD_INT 11
20439: PUSH
20440: LD_INT 12
20442: PUSH
20443: LD_INT 13
20445: PUSH
20446: LD_INT 14
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: LD_INT 3
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: ST_TO_ADDR
20467: GO 20598
20469: LD_INT 1
20471: DOUBLE
20472: EQUAL
20473: IFTRUE 20477
20475: GO 20539
20477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20478: LD_ADDR_VAR 0 3
20482: PUSH
20483: LD_INT 11
20485: PUSH
20486: LD_INT 12
20488: PUSH
20489: LD_INT 13
20491: PUSH
20492: LD_INT 14
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: LD_INT 3
20503: PUSH
20504: LD_INT 4
20506: PUSH
20507: LD_INT 5
20509: PUSH
20510: LD_INT 21
20512: PUSH
20513: LD_INT 23
20515: PUSH
20516: LD_INT 22
20518: PUSH
20519: LD_INT 24
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: ST_TO_ADDR
20537: GO 20598
20539: LD_INT 3
20541: DOUBLE
20542: EQUAL
20543: IFTRUE 20547
20545: GO 20597
20547: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20548: LD_ADDR_VAR 0 3
20552: PUSH
20553: LD_INT 13
20555: PUSH
20556: LD_INT 14
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: LD_INT 3
20564: PUSH
20565: LD_INT 4
20567: PUSH
20568: LD_INT 5
20570: PUSH
20571: LD_INT 21
20573: PUSH
20574: LD_INT 22
20576: PUSH
20577: LD_INT 23
20579: PUSH
20580: LD_INT 24
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: ST_TO_ADDR
20595: GO 20598
20597: POP
// result := ( chassis in result ) ;
20598: LD_ADDR_VAR 0 3
20602: PUSH
20603: LD_VAR 0 1
20607: PUSH
20608: LD_VAR 0 3
20612: IN
20613: ST_TO_ADDR
// end ;
20614: LD_VAR 0 3
20618: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20619: LD_INT 0
20621: PPUSH
// if not chassis or not weapon then
20622: LD_VAR 0 1
20626: NOT
20627: PUSH
20628: LD_VAR 0 2
20632: NOT
20633: OR
20634: IFFALSE 20638
// exit ;
20636: GO 21664
// case weapon of us_machine_gun :
20638: LD_VAR 0 2
20642: PUSH
20643: LD_INT 2
20645: DOUBLE
20646: EQUAL
20647: IFTRUE 20651
20649: GO 20681
20651: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20652: LD_ADDR_VAR 0 3
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: LD_INT 2
20662: PUSH
20663: LD_INT 3
20665: PUSH
20666: LD_INT 4
20668: PUSH
20669: LD_INT 5
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: ST_TO_ADDR
20679: GO 21648
20681: LD_INT 3
20683: DOUBLE
20684: EQUAL
20685: IFTRUE 20689
20687: GO 20719
20689: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20690: LD_ADDR_VAR 0 3
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: LD_INT 3
20703: PUSH
20704: LD_INT 4
20706: PUSH
20707: LD_INT 5
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: ST_TO_ADDR
20717: GO 21648
20719: LD_INT 11
20721: DOUBLE
20722: EQUAL
20723: IFTRUE 20727
20725: GO 20757
20727: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20728: LD_ADDR_VAR 0 3
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: LD_INT 2
20738: PUSH
20739: LD_INT 3
20741: PUSH
20742: LD_INT 4
20744: PUSH
20745: LD_INT 5
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: ST_TO_ADDR
20755: GO 21648
20757: LD_INT 4
20759: DOUBLE
20760: EQUAL
20761: IFTRUE 20765
20763: GO 20791
20765: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20766: LD_ADDR_VAR 0 3
20770: PUSH
20771: LD_INT 2
20773: PUSH
20774: LD_INT 3
20776: PUSH
20777: LD_INT 4
20779: PUSH
20780: LD_INT 5
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: ST_TO_ADDR
20789: GO 21648
20791: LD_INT 5
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20825
20799: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20800: LD_ADDR_VAR 0 3
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: LD_INT 3
20810: PUSH
20811: LD_INT 4
20813: PUSH
20814: LD_INT 5
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: ST_TO_ADDR
20823: GO 21648
20825: LD_INT 9
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20859
20833: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20834: LD_ADDR_VAR 0 3
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 3
20844: PUSH
20845: LD_INT 4
20847: PUSH
20848: LD_INT 5
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: ST_TO_ADDR
20857: GO 21648
20859: LD_INT 7
20861: DOUBLE
20862: EQUAL
20863: IFTRUE 20867
20865: GO 20893
20867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20868: LD_ADDR_VAR 0 3
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: LD_INT 3
20878: PUSH
20879: LD_INT 4
20881: PUSH
20882: LD_INT 5
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: ST_TO_ADDR
20891: GO 21648
20893: LD_INT 12
20895: DOUBLE
20896: EQUAL
20897: IFTRUE 20901
20899: GO 20927
20901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20902: LD_ADDR_VAR 0 3
20906: PUSH
20907: LD_INT 2
20909: PUSH
20910: LD_INT 3
20912: PUSH
20913: LD_INT 4
20915: PUSH
20916: LD_INT 5
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: ST_TO_ADDR
20925: GO 21648
20927: LD_INT 13
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 20961
20935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20936: LD_ADDR_VAR 0 3
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: LD_INT 4
20949: PUSH
20950: LD_INT 5
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: ST_TO_ADDR
20959: GO 21648
20961: LD_INT 14
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 20987
20969: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20970: LD_ADDR_VAR 0 3
20974: PUSH
20975: LD_INT 4
20977: PUSH
20978: LD_INT 5
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: ST_TO_ADDR
20985: GO 21648
20987: LD_INT 6
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21013
20995: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20996: LD_ADDR_VAR 0 3
21000: PUSH
21001: LD_INT 4
21003: PUSH
21004: LD_INT 5
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: ST_TO_ADDR
21011: GO 21648
21013: LD_INT 10
21015: DOUBLE
21016: EQUAL
21017: IFTRUE 21021
21019: GO 21039
21021: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21022: LD_ADDR_VAR 0 3
21026: PUSH
21027: LD_INT 4
21029: PUSH
21030: LD_INT 5
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: ST_TO_ADDR
21037: GO 21648
21039: LD_INT 22
21041: DOUBLE
21042: EQUAL
21043: IFTRUE 21047
21045: GO 21073
21047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21048: LD_ADDR_VAR 0 3
21052: PUSH
21053: LD_INT 11
21055: PUSH
21056: LD_INT 12
21058: PUSH
21059: LD_INT 13
21061: PUSH
21062: LD_INT 14
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: ST_TO_ADDR
21071: GO 21648
21073: LD_INT 23
21075: DOUBLE
21076: EQUAL
21077: IFTRUE 21081
21079: GO 21107
21081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21082: LD_ADDR_VAR 0 3
21086: PUSH
21087: LD_INT 11
21089: PUSH
21090: LD_INT 12
21092: PUSH
21093: LD_INT 13
21095: PUSH
21096: LD_INT 14
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: ST_TO_ADDR
21105: GO 21648
21107: LD_INT 24
21109: DOUBLE
21110: EQUAL
21111: IFTRUE 21115
21113: GO 21141
21115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21116: LD_ADDR_VAR 0 3
21120: PUSH
21121: LD_INT 11
21123: PUSH
21124: LD_INT 12
21126: PUSH
21127: LD_INT 13
21129: PUSH
21130: LD_INT 14
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: ST_TO_ADDR
21139: GO 21648
21141: LD_INT 30
21143: DOUBLE
21144: EQUAL
21145: IFTRUE 21149
21147: GO 21175
21149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21150: LD_ADDR_VAR 0 3
21154: PUSH
21155: LD_INT 11
21157: PUSH
21158: LD_INT 12
21160: PUSH
21161: LD_INT 13
21163: PUSH
21164: LD_INT 14
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: ST_TO_ADDR
21173: GO 21648
21175: LD_INT 25
21177: DOUBLE
21178: EQUAL
21179: IFTRUE 21183
21181: GO 21201
21183: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21184: LD_ADDR_VAR 0 3
21188: PUSH
21189: LD_INT 13
21191: PUSH
21192: LD_INT 14
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: ST_TO_ADDR
21199: GO 21648
21201: LD_INT 27
21203: DOUBLE
21204: EQUAL
21205: IFTRUE 21209
21207: GO 21227
21209: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21210: LD_ADDR_VAR 0 3
21214: PUSH
21215: LD_INT 13
21217: PUSH
21218: LD_INT 14
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: ST_TO_ADDR
21225: GO 21648
21227: LD_INT 28
21229: DOUBLE
21230: EQUAL
21231: IFTRUE 21235
21233: GO 21253
21235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21236: LD_ADDR_VAR 0 3
21240: PUSH
21241: LD_INT 13
21243: PUSH
21244: LD_INT 14
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: ST_TO_ADDR
21251: GO 21648
21253: LD_INT 29
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21279
21261: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21262: LD_ADDR_VAR 0 3
21266: PUSH
21267: LD_INT 13
21269: PUSH
21270: LD_INT 14
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: ST_TO_ADDR
21277: GO 21648
21279: LD_INT 31
21281: DOUBLE
21282: EQUAL
21283: IFTRUE 21287
21285: GO 21305
21287: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21288: LD_ADDR_VAR 0 3
21292: PUSH
21293: LD_INT 13
21295: PUSH
21296: LD_INT 14
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: ST_TO_ADDR
21303: GO 21648
21305: LD_INT 26
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21331
21313: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_INT 13
21321: PUSH
21322: LD_INT 14
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: ST_TO_ADDR
21329: GO 21648
21331: LD_INT 42
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21365
21339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21340: LD_ADDR_VAR 0 3
21344: PUSH
21345: LD_INT 21
21347: PUSH
21348: LD_INT 22
21350: PUSH
21351: LD_INT 23
21353: PUSH
21354: LD_INT 24
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: ST_TO_ADDR
21363: GO 21648
21365: LD_INT 43
21367: DOUBLE
21368: EQUAL
21369: IFTRUE 21373
21371: GO 21399
21373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21374: LD_ADDR_VAR 0 3
21378: PUSH
21379: LD_INT 21
21381: PUSH
21382: LD_INT 22
21384: PUSH
21385: LD_INT 23
21387: PUSH
21388: LD_INT 24
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: ST_TO_ADDR
21397: GO 21648
21399: LD_INT 44
21401: DOUBLE
21402: EQUAL
21403: IFTRUE 21407
21405: GO 21433
21407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21408: LD_ADDR_VAR 0 3
21412: PUSH
21413: LD_INT 21
21415: PUSH
21416: LD_INT 22
21418: PUSH
21419: LD_INT 23
21421: PUSH
21422: LD_INT 24
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: ST_TO_ADDR
21431: GO 21648
21433: LD_INT 45
21435: DOUBLE
21436: EQUAL
21437: IFTRUE 21441
21439: GO 21467
21441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21442: LD_ADDR_VAR 0 3
21446: PUSH
21447: LD_INT 21
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_INT 23
21455: PUSH
21456: LD_INT 24
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: ST_TO_ADDR
21465: GO 21648
21467: LD_INT 49
21469: DOUBLE
21470: EQUAL
21471: IFTRUE 21475
21473: GO 21501
21475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21476: LD_ADDR_VAR 0 3
21480: PUSH
21481: LD_INT 21
21483: PUSH
21484: LD_INT 22
21486: PUSH
21487: LD_INT 23
21489: PUSH
21490: LD_INT 24
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: ST_TO_ADDR
21499: GO 21648
21501: LD_INT 51
21503: DOUBLE
21504: EQUAL
21505: IFTRUE 21509
21507: GO 21535
21509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21510: LD_ADDR_VAR 0 3
21514: PUSH
21515: LD_INT 21
21517: PUSH
21518: LD_INT 22
21520: PUSH
21521: LD_INT 23
21523: PUSH
21524: LD_INT 24
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: ST_TO_ADDR
21533: GO 21648
21535: LD_INT 52
21537: DOUBLE
21538: EQUAL
21539: IFTRUE 21543
21541: GO 21569
21543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21544: LD_ADDR_VAR 0 3
21548: PUSH
21549: LD_INT 21
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_INT 23
21557: PUSH
21558: LD_INT 24
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: ST_TO_ADDR
21567: GO 21648
21569: LD_INT 53
21571: DOUBLE
21572: EQUAL
21573: IFTRUE 21577
21575: GO 21595
21577: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21578: LD_ADDR_VAR 0 3
21582: PUSH
21583: LD_INT 23
21585: PUSH
21586: LD_INT 24
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: ST_TO_ADDR
21593: GO 21648
21595: LD_INT 46
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21621
21603: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21604: LD_ADDR_VAR 0 3
21608: PUSH
21609: LD_INT 23
21611: PUSH
21612: LD_INT 24
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: ST_TO_ADDR
21619: GO 21648
21621: LD_INT 47
21623: DOUBLE
21624: EQUAL
21625: IFTRUE 21629
21627: GO 21647
21629: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21630: LD_ADDR_VAR 0 3
21634: PUSH
21635: LD_INT 23
21637: PUSH
21638: LD_INT 24
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: ST_TO_ADDR
21645: GO 21648
21647: POP
// result := ( chassis in result ) ;
21648: LD_ADDR_VAR 0 3
21652: PUSH
21653: LD_VAR 0 1
21657: PUSH
21658: LD_VAR 0 3
21662: IN
21663: ST_TO_ADDR
// end ;
21664: LD_VAR 0 3
21668: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21669: LD_INT 0
21671: PPUSH
21672: PPUSH
21673: PPUSH
21674: PPUSH
21675: PPUSH
21676: PPUSH
21677: PPUSH
// result := array ;
21678: LD_ADDR_VAR 0 5
21682: PUSH
21683: LD_VAR 0 1
21687: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21688: LD_VAR 0 1
21692: NOT
21693: PUSH
21694: LD_VAR 0 2
21698: NOT
21699: OR
21700: PUSH
21701: LD_VAR 0 3
21705: NOT
21706: OR
21707: PUSH
21708: LD_VAR 0 2
21712: PUSH
21713: LD_VAR 0 1
21717: GREATER
21718: OR
21719: PUSH
21720: LD_VAR 0 3
21724: PUSH
21725: LD_VAR 0 1
21729: GREATER
21730: OR
21731: IFFALSE 21735
// exit ;
21733: GO 22031
// if direction then
21735: LD_VAR 0 4
21739: IFFALSE 21803
// begin d := 1 ;
21741: LD_ADDR_VAR 0 9
21745: PUSH
21746: LD_INT 1
21748: ST_TO_ADDR
// if i_from > i_to then
21749: LD_VAR 0 2
21753: PUSH
21754: LD_VAR 0 3
21758: GREATER
21759: IFFALSE 21785
// length := ( array - i_from ) + i_to else
21761: LD_ADDR_VAR 0 11
21765: PUSH
21766: LD_VAR 0 1
21770: PUSH
21771: LD_VAR 0 2
21775: MINUS
21776: PUSH
21777: LD_VAR 0 3
21781: PLUS
21782: ST_TO_ADDR
21783: GO 21801
// length := i_to - i_from ;
21785: LD_ADDR_VAR 0 11
21789: PUSH
21790: LD_VAR 0 3
21794: PUSH
21795: LD_VAR 0 2
21799: MINUS
21800: ST_TO_ADDR
// end else
21801: GO 21864
// begin d := - 1 ;
21803: LD_ADDR_VAR 0 9
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: ST_TO_ADDR
// if i_from > i_to then
21812: LD_VAR 0 2
21816: PUSH
21817: LD_VAR 0 3
21821: GREATER
21822: IFFALSE 21842
// length := i_from - i_to else
21824: LD_ADDR_VAR 0 11
21828: PUSH
21829: LD_VAR 0 2
21833: PUSH
21834: LD_VAR 0 3
21838: MINUS
21839: ST_TO_ADDR
21840: GO 21864
// length := ( array - i_to ) + i_from ;
21842: LD_ADDR_VAR 0 11
21846: PUSH
21847: LD_VAR 0 1
21851: PUSH
21852: LD_VAR 0 3
21856: MINUS
21857: PUSH
21858: LD_VAR 0 2
21862: PLUS
21863: ST_TO_ADDR
// end ; if not length then
21864: LD_VAR 0 11
21868: NOT
21869: IFFALSE 21873
// exit ;
21871: GO 22031
// tmp := array ;
21873: LD_ADDR_VAR 0 10
21877: PUSH
21878: LD_VAR 0 1
21882: ST_TO_ADDR
// for i = 1 to length do
21883: LD_ADDR_VAR 0 6
21887: PUSH
21888: DOUBLE
21889: LD_INT 1
21891: DEC
21892: ST_TO_ADDR
21893: LD_VAR 0 11
21897: PUSH
21898: FOR_TO
21899: IFFALSE 22019
// begin for j = 1 to array do
21901: LD_ADDR_VAR 0 7
21905: PUSH
21906: DOUBLE
21907: LD_INT 1
21909: DEC
21910: ST_TO_ADDR
21911: LD_VAR 0 1
21915: PUSH
21916: FOR_TO
21917: IFFALSE 22005
// begin k := j + d ;
21919: LD_ADDR_VAR 0 8
21923: PUSH
21924: LD_VAR 0 7
21928: PUSH
21929: LD_VAR 0 9
21933: PLUS
21934: ST_TO_ADDR
// if k > array then
21935: LD_VAR 0 8
21939: PUSH
21940: LD_VAR 0 1
21944: GREATER
21945: IFFALSE 21955
// k := 1 ;
21947: LD_ADDR_VAR 0 8
21951: PUSH
21952: LD_INT 1
21954: ST_TO_ADDR
// if not k then
21955: LD_VAR 0 8
21959: NOT
21960: IFFALSE 21972
// k := array ;
21962: LD_ADDR_VAR 0 8
21966: PUSH
21967: LD_VAR 0 1
21971: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21972: LD_ADDR_VAR 0 10
21976: PUSH
21977: LD_VAR 0 10
21981: PPUSH
21982: LD_VAR 0 8
21986: PPUSH
21987: LD_VAR 0 1
21991: PUSH
21992: LD_VAR 0 7
21996: ARRAY
21997: PPUSH
21998: CALL_OW 1
22002: ST_TO_ADDR
// end ;
22003: GO 21916
22005: POP
22006: POP
// array := tmp ;
22007: LD_ADDR_VAR 0 1
22011: PUSH
22012: LD_VAR 0 10
22016: ST_TO_ADDR
// end ;
22017: GO 21898
22019: POP
22020: POP
// result := array ;
22021: LD_ADDR_VAR 0 5
22025: PUSH
22026: LD_VAR 0 1
22030: ST_TO_ADDR
// end ;
22031: LD_VAR 0 5
22035: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22036: LD_INT 0
22038: PPUSH
22039: PPUSH
// result := 0 ;
22040: LD_ADDR_VAR 0 3
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// if not array or not value in array then
22048: LD_VAR 0 1
22052: NOT
22053: PUSH
22054: LD_VAR 0 2
22058: PUSH
22059: LD_VAR 0 1
22063: IN
22064: NOT
22065: OR
22066: IFFALSE 22070
// exit ;
22068: GO 22124
// for i = 1 to array do
22070: LD_ADDR_VAR 0 4
22074: PUSH
22075: DOUBLE
22076: LD_INT 1
22078: DEC
22079: ST_TO_ADDR
22080: LD_VAR 0 1
22084: PUSH
22085: FOR_TO
22086: IFFALSE 22122
// if value = array [ i ] then
22088: LD_VAR 0 2
22092: PUSH
22093: LD_VAR 0 1
22097: PUSH
22098: LD_VAR 0 4
22102: ARRAY
22103: EQUAL
22104: IFFALSE 22120
// begin result := i ;
22106: LD_ADDR_VAR 0 3
22110: PUSH
22111: LD_VAR 0 4
22115: ST_TO_ADDR
// exit ;
22116: POP
22117: POP
22118: GO 22124
// end ;
22120: GO 22085
22122: POP
22123: POP
// end ;
22124: LD_VAR 0 3
22128: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22129: LD_INT 0
22131: PPUSH
// vc_chassis := chassis ;
22132: LD_ADDR_OWVAR 37
22136: PUSH
22137: LD_VAR 0 1
22141: ST_TO_ADDR
// vc_engine := engine ;
22142: LD_ADDR_OWVAR 39
22146: PUSH
22147: LD_VAR 0 2
22151: ST_TO_ADDR
// vc_control := control ;
22152: LD_ADDR_OWVAR 38
22156: PUSH
22157: LD_VAR 0 3
22161: ST_TO_ADDR
// vc_weapon := weapon ;
22162: LD_ADDR_OWVAR 40
22166: PUSH
22167: LD_VAR 0 4
22171: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22172: LD_ADDR_OWVAR 41
22176: PUSH
22177: LD_VAR 0 5
22181: ST_TO_ADDR
// end ;
22182: LD_VAR 0 6
22186: RET
// export function WantPlant ( unit ) ; var task ; begin
22187: LD_INT 0
22189: PPUSH
22190: PPUSH
// result := false ;
22191: LD_ADDR_VAR 0 2
22195: PUSH
22196: LD_INT 0
22198: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22199: LD_ADDR_VAR 0 3
22203: PUSH
22204: LD_VAR 0 1
22208: PPUSH
22209: CALL_OW 437
22213: ST_TO_ADDR
// if task then
22214: LD_VAR 0 3
22218: IFFALSE 22246
// if task [ 1 ] [ 1 ] = p then
22220: LD_VAR 0 3
22224: PUSH
22225: LD_INT 1
22227: ARRAY
22228: PUSH
22229: LD_INT 1
22231: ARRAY
22232: PUSH
22233: LD_STRING p
22235: EQUAL
22236: IFFALSE 22246
// result := true ;
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: LD_INT 1
22245: ST_TO_ADDR
// end ;
22246: LD_VAR 0 2
22250: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22251: LD_INT 0
22253: PPUSH
22254: PPUSH
22255: PPUSH
22256: PPUSH
// if pos < 1 then
22257: LD_VAR 0 2
22261: PUSH
22262: LD_INT 1
22264: LESS
22265: IFFALSE 22269
// exit ;
22267: GO 22572
// if pos = 1 then
22269: LD_VAR 0 2
22273: PUSH
22274: LD_INT 1
22276: EQUAL
22277: IFFALSE 22310
// result := Replace ( arr , pos [ 1 ] , value ) else
22279: LD_ADDR_VAR 0 4
22283: PUSH
22284: LD_VAR 0 1
22288: PPUSH
22289: LD_VAR 0 2
22293: PUSH
22294: LD_INT 1
22296: ARRAY
22297: PPUSH
22298: LD_VAR 0 3
22302: PPUSH
22303: CALL_OW 1
22307: ST_TO_ADDR
22308: GO 22572
// begin tmp := arr ;
22310: LD_ADDR_VAR 0 6
22314: PUSH
22315: LD_VAR 0 1
22319: ST_TO_ADDR
// s_arr := [ tmp ] ;
22320: LD_ADDR_VAR 0 7
22324: PUSH
22325: LD_VAR 0 6
22329: PUSH
22330: EMPTY
22331: LIST
22332: ST_TO_ADDR
// for i = 1 to pos - 1 do
22333: LD_ADDR_VAR 0 5
22337: PUSH
22338: DOUBLE
22339: LD_INT 1
22341: DEC
22342: ST_TO_ADDR
22343: LD_VAR 0 2
22347: PUSH
22348: LD_INT 1
22350: MINUS
22351: PUSH
22352: FOR_TO
22353: IFFALSE 22398
// begin tmp := tmp [ pos [ i ] ] ;
22355: LD_ADDR_VAR 0 6
22359: PUSH
22360: LD_VAR 0 6
22364: PUSH
22365: LD_VAR 0 2
22369: PUSH
22370: LD_VAR 0 5
22374: ARRAY
22375: ARRAY
22376: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22377: LD_ADDR_VAR 0 7
22381: PUSH
22382: LD_VAR 0 7
22386: PUSH
22387: LD_VAR 0 6
22391: PUSH
22392: EMPTY
22393: LIST
22394: ADD
22395: ST_TO_ADDR
// end ;
22396: GO 22352
22398: POP
22399: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22400: LD_ADDR_VAR 0 6
22404: PUSH
22405: LD_VAR 0 6
22409: PPUSH
22410: LD_VAR 0 2
22414: PUSH
22415: LD_VAR 0 2
22419: ARRAY
22420: PPUSH
22421: LD_VAR 0 3
22425: PPUSH
22426: CALL_OW 1
22430: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22431: LD_ADDR_VAR 0 7
22435: PUSH
22436: LD_VAR 0 7
22440: PPUSH
22441: LD_VAR 0 7
22445: PPUSH
22446: LD_VAR 0 6
22450: PPUSH
22451: CALL_OW 1
22455: ST_TO_ADDR
// for i = s_arr downto 2 do
22456: LD_ADDR_VAR 0 5
22460: PUSH
22461: DOUBLE
22462: LD_VAR 0 7
22466: INC
22467: ST_TO_ADDR
22468: LD_INT 2
22470: PUSH
22471: FOR_DOWNTO
22472: IFFALSE 22556
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22474: LD_ADDR_VAR 0 6
22478: PUSH
22479: LD_VAR 0 7
22483: PUSH
22484: LD_VAR 0 5
22488: PUSH
22489: LD_INT 1
22491: MINUS
22492: ARRAY
22493: PPUSH
22494: LD_VAR 0 2
22498: PUSH
22499: LD_VAR 0 5
22503: PUSH
22504: LD_INT 1
22506: MINUS
22507: ARRAY
22508: PPUSH
22509: LD_VAR 0 7
22513: PUSH
22514: LD_VAR 0 5
22518: ARRAY
22519: PPUSH
22520: CALL_OW 1
22524: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22525: LD_ADDR_VAR 0 7
22529: PUSH
22530: LD_VAR 0 7
22534: PPUSH
22535: LD_VAR 0 5
22539: PUSH
22540: LD_INT 1
22542: MINUS
22543: PPUSH
22544: LD_VAR 0 6
22548: PPUSH
22549: CALL_OW 1
22553: ST_TO_ADDR
// end ;
22554: GO 22471
22556: POP
22557: POP
// result := s_arr [ 1 ] ;
22558: LD_ADDR_VAR 0 4
22562: PUSH
22563: LD_VAR 0 7
22567: PUSH
22568: LD_INT 1
22570: ARRAY
22571: ST_TO_ADDR
// end ; end ;
22572: LD_VAR 0 4
22576: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22577: LD_INT 0
22579: PPUSH
22580: PPUSH
// if not list then
22581: LD_VAR 0 1
22585: NOT
22586: IFFALSE 22590
// exit ;
22588: GO 22681
// i := list [ pos1 ] ;
22590: LD_ADDR_VAR 0 5
22594: PUSH
22595: LD_VAR 0 1
22599: PUSH
22600: LD_VAR 0 2
22604: ARRAY
22605: ST_TO_ADDR
// if not i then
22606: LD_VAR 0 5
22610: NOT
22611: IFFALSE 22615
// exit ;
22613: GO 22681
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22615: LD_ADDR_VAR 0 1
22619: PUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: LD_VAR 0 2
22629: PPUSH
22630: LD_VAR 0 1
22634: PUSH
22635: LD_VAR 0 3
22639: ARRAY
22640: PPUSH
22641: CALL_OW 1
22645: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22646: LD_ADDR_VAR 0 1
22650: PUSH
22651: LD_VAR 0 1
22655: PPUSH
22656: LD_VAR 0 3
22660: PPUSH
22661: LD_VAR 0 5
22665: PPUSH
22666: CALL_OW 1
22670: ST_TO_ADDR
// result := list ;
22671: LD_ADDR_VAR 0 4
22675: PUSH
22676: LD_VAR 0 1
22680: ST_TO_ADDR
// end ;
22681: LD_VAR 0 4
22685: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22686: LD_INT 0
22688: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22689: LD_ADDR_VAR 0 5
22693: PUSH
22694: LD_VAR 0 1
22698: PPUSH
22699: CALL_OW 250
22703: PPUSH
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 251
22713: PPUSH
22714: LD_VAR 0 2
22718: PPUSH
22719: LD_VAR 0 3
22723: PPUSH
22724: LD_VAR 0 4
22728: PPUSH
22729: CALL 22739 0 5
22733: ST_TO_ADDR
// end ;
22734: LD_VAR 0 5
22738: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22739: LD_INT 0
22741: PPUSH
22742: PPUSH
22743: PPUSH
22744: PPUSH
// if not list then
22745: LD_VAR 0 3
22749: NOT
22750: IFFALSE 22754
// exit ;
22752: GO 23142
// result := [ ] ;
22754: LD_ADDR_VAR 0 6
22758: PUSH
22759: EMPTY
22760: ST_TO_ADDR
// for i in list do
22761: LD_ADDR_VAR 0 7
22765: PUSH
22766: LD_VAR 0 3
22770: PUSH
22771: FOR_IN
22772: IFFALSE 22974
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22774: LD_ADDR_VAR 0 9
22778: PUSH
22779: LD_VAR 0 7
22783: PPUSH
22784: LD_VAR 0 1
22788: PPUSH
22789: LD_VAR 0 2
22793: PPUSH
22794: CALL_OW 297
22798: ST_TO_ADDR
// if not result then
22799: LD_VAR 0 6
22803: NOT
22804: IFFALSE 22830
// result := [ [ i , tmp ] ] else
22806: LD_ADDR_VAR 0 6
22810: PUSH
22811: LD_VAR 0 7
22815: PUSH
22816: LD_VAR 0 9
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: ST_TO_ADDR
22828: GO 22972
// begin if result [ result ] [ 2 ] < tmp then
22830: LD_VAR 0 6
22834: PUSH
22835: LD_VAR 0 6
22839: ARRAY
22840: PUSH
22841: LD_INT 2
22843: ARRAY
22844: PUSH
22845: LD_VAR 0 9
22849: LESS
22850: IFFALSE 22892
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22852: LD_ADDR_VAR 0 6
22856: PUSH
22857: LD_VAR 0 6
22861: PPUSH
22862: LD_VAR 0 6
22866: PUSH
22867: LD_INT 1
22869: PLUS
22870: PPUSH
22871: LD_VAR 0 7
22875: PUSH
22876: LD_VAR 0 9
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PPUSH
22885: CALL_OW 2
22889: ST_TO_ADDR
22890: GO 22972
// for j = 1 to result do
22892: LD_ADDR_VAR 0 8
22896: PUSH
22897: DOUBLE
22898: LD_INT 1
22900: DEC
22901: ST_TO_ADDR
22902: LD_VAR 0 6
22906: PUSH
22907: FOR_TO
22908: IFFALSE 22970
// begin if tmp < result [ j ] [ 2 ] then
22910: LD_VAR 0 9
22914: PUSH
22915: LD_VAR 0 6
22919: PUSH
22920: LD_VAR 0 8
22924: ARRAY
22925: PUSH
22926: LD_INT 2
22928: ARRAY
22929: LESS
22930: IFFALSE 22968
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22932: LD_ADDR_VAR 0 6
22936: PUSH
22937: LD_VAR 0 6
22941: PPUSH
22942: LD_VAR 0 8
22946: PPUSH
22947: LD_VAR 0 7
22951: PUSH
22952: LD_VAR 0 9
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PPUSH
22961: CALL_OW 2
22965: ST_TO_ADDR
// break ;
22966: GO 22970
// end ; end ;
22968: GO 22907
22970: POP
22971: POP
// end ; end ;
22972: GO 22771
22974: POP
22975: POP
// if result and not asc then
22976: LD_VAR 0 6
22980: PUSH
22981: LD_VAR 0 4
22985: NOT
22986: AND
22987: IFFALSE 23062
// begin tmp := result ;
22989: LD_ADDR_VAR 0 9
22993: PUSH
22994: LD_VAR 0 6
22998: ST_TO_ADDR
// for i = tmp downto 1 do
22999: LD_ADDR_VAR 0 7
23003: PUSH
23004: DOUBLE
23005: LD_VAR 0 9
23009: INC
23010: ST_TO_ADDR
23011: LD_INT 1
23013: PUSH
23014: FOR_DOWNTO
23015: IFFALSE 23060
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23017: LD_ADDR_VAR 0 6
23021: PUSH
23022: LD_VAR 0 6
23026: PPUSH
23027: LD_VAR 0 9
23031: PUSH
23032: LD_VAR 0 7
23036: MINUS
23037: PUSH
23038: LD_INT 1
23040: PLUS
23041: PPUSH
23042: LD_VAR 0 9
23046: PUSH
23047: LD_VAR 0 7
23051: ARRAY
23052: PPUSH
23053: CALL_OW 1
23057: ST_TO_ADDR
23058: GO 23014
23060: POP
23061: POP
// end ; tmp := [ ] ;
23062: LD_ADDR_VAR 0 9
23066: PUSH
23067: EMPTY
23068: ST_TO_ADDR
// if mode then
23069: LD_VAR 0 5
23073: IFFALSE 23142
// begin for i = 1 to result do
23075: LD_ADDR_VAR 0 7
23079: PUSH
23080: DOUBLE
23081: LD_INT 1
23083: DEC
23084: ST_TO_ADDR
23085: LD_VAR 0 6
23089: PUSH
23090: FOR_TO
23091: IFFALSE 23130
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23093: LD_ADDR_VAR 0 9
23097: PUSH
23098: LD_VAR 0 9
23102: PPUSH
23103: LD_VAR 0 7
23107: PPUSH
23108: LD_VAR 0 6
23112: PUSH
23113: LD_VAR 0 7
23117: ARRAY
23118: PUSH
23119: LD_INT 1
23121: ARRAY
23122: PPUSH
23123: CALL_OW 1
23127: ST_TO_ADDR
23128: GO 23090
23130: POP
23131: POP
// result := tmp ;
23132: LD_ADDR_VAR 0 6
23136: PUSH
23137: LD_VAR 0 9
23141: ST_TO_ADDR
// end ; end ;
23142: LD_VAR 0 6
23146: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23147: LD_INT 0
23149: PPUSH
23150: PPUSH
23151: PPUSH
23152: PPUSH
23153: PPUSH
23154: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23155: LD_ADDR_VAR 0 5
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: LD_INT 0
23168: PUSH
23169: EMPTY
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: ST_TO_ADDR
// if not x or not y then
23177: LD_VAR 0 2
23181: NOT
23182: PUSH
23183: LD_VAR 0 3
23187: NOT
23188: OR
23189: IFFALSE 23193
// exit ;
23191: GO 24839
// if not range then
23193: LD_VAR 0 4
23197: NOT
23198: IFFALSE 23208
// range := 10 ;
23200: LD_ADDR_VAR 0 4
23204: PUSH
23205: LD_INT 10
23207: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23208: LD_ADDR_VAR 0 8
23212: PUSH
23213: LD_INT 81
23215: PUSH
23216: LD_VAR 0 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 92
23227: PUSH
23228: LD_VAR 0 2
23232: PUSH
23233: LD_VAR 0 3
23237: PUSH
23238: LD_VAR 0 4
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 3
23251: PUSH
23252: LD_INT 21
23254: PUSH
23255: LD_INT 3
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: PPUSH
23271: CALL_OW 69
23275: ST_TO_ADDR
// if not tmp then
23276: LD_VAR 0 8
23280: NOT
23281: IFFALSE 23285
// exit ;
23283: GO 24839
// for i in tmp do
23285: LD_ADDR_VAR 0 6
23289: PUSH
23290: LD_VAR 0 8
23294: PUSH
23295: FOR_IN
23296: IFFALSE 24814
// begin points := [ 0 , 0 , 0 ] ;
23298: LD_ADDR_VAR 0 9
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: LD_INT 0
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: ST_TO_ADDR
// bpoints := 1 ;
23317: LD_ADDR_VAR 0 10
23321: PUSH
23322: LD_INT 1
23324: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23325: LD_VAR 0 6
23329: PPUSH
23330: CALL_OW 247
23334: PUSH
23335: LD_INT 1
23337: DOUBLE
23338: EQUAL
23339: IFTRUE 23343
23341: GO 23921
23343: POP
// begin if GetClass ( i ) = 1 then
23344: LD_VAR 0 6
23348: PPUSH
23349: CALL_OW 257
23353: PUSH
23354: LD_INT 1
23356: EQUAL
23357: IFFALSE 23378
// points := [ 10 , 5 , 3 ] ;
23359: LD_ADDR_VAR 0 9
23363: PUSH
23364: LD_INT 10
23366: PUSH
23367: LD_INT 5
23369: PUSH
23370: LD_INT 3
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23378: LD_VAR 0 6
23382: PPUSH
23383: CALL_OW 257
23387: PUSH
23388: LD_INT 2
23390: PUSH
23391: LD_INT 3
23393: PUSH
23394: LD_INT 4
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: IN
23402: IFFALSE 23423
// points := [ 3 , 2 , 1 ] ;
23404: LD_ADDR_VAR 0 9
23408: PUSH
23409: LD_INT 3
23411: PUSH
23412: LD_INT 2
23414: PUSH
23415: LD_INT 1
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: LIST
23422: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23423: LD_VAR 0 6
23427: PPUSH
23428: CALL_OW 257
23432: PUSH
23433: LD_INT 5
23435: EQUAL
23436: IFFALSE 23457
// points := [ 130 , 5 , 2 ] ;
23438: LD_ADDR_VAR 0 9
23442: PUSH
23443: LD_INT 130
23445: PUSH
23446: LD_INT 5
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23457: LD_VAR 0 6
23461: PPUSH
23462: CALL_OW 257
23466: PUSH
23467: LD_INT 8
23469: EQUAL
23470: IFFALSE 23491
// points := [ 35 , 35 , 30 ] ;
23472: LD_ADDR_VAR 0 9
23476: PUSH
23477: LD_INT 35
23479: PUSH
23480: LD_INT 35
23482: PUSH
23483: LD_INT 30
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: LIST
23490: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23491: LD_VAR 0 6
23495: PPUSH
23496: CALL_OW 257
23500: PUSH
23501: LD_INT 9
23503: EQUAL
23504: IFFALSE 23525
// points := [ 20 , 55 , 40 ] ;
23506: LD_ADDR_VAR 0 9
23510: PUSH
23511: LD_INT 20
23513: PUSH
23514: LD_INT 55
23516: PUSH
23517: LD_INT 40
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: LIST
23524: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23525: LD_VAR 0 6
23529: PPUSH
23530: CALL_OW 257
23534: PUSH
23535: LD_INT 12
23537: PUSH
23538: LD_INT 16
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: IN
23545: IFFALSE 23566
// points := [ 5 , 3 , 2 ] ;
23547: LD_ADDR_VAR 0 9
23551: PUSH
23552: LD_INT 5
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23566: LD_VAR 0 6
23570: PPUSH
23571: CALL_OW 257
23575: PUSH
23576: LD_INT 17
23578: EQUAL
23579: IFFALSE 23600
// points := [ 100 , 50 , 75 ] ;
23581: LD_ADDR_VAR 0 9
23585: PUSH
23586: LD_INT 100
23588: PUSH
23589: LD_INT 50
23591: PUSH
23592: LD_INT 75
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23600: LD_VAR 0 6
23604: PPUSH
23605: CALL_OW 257
23609: PUSH
23610: LD_INT 15
23612: EQUAL
23613: IFFALSE 23634
// points := [ 10 , 5 , 3 ] ;
23615: LD_ADDR_VAR 0 9
23619: PUSH
23620: LD_INT 10
23622: PUSH
23623: LD_INT 5
23625: PUSH
23626: LD_INT 3
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23634: LD_VAR 0 6
23638: PPUSH
23639: CALL_OW 257
23643: PUSH
23644: LD_INT 14
23646: EQUAL
23647: IFFALSE 23668
// points := [ 10 , 0 , 0 ] ;
23649: LD_ADDR_VAR 0 9
23653: PUSH
23654: LD_INT 10
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 0
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23668: LD_VAR 0 6
23672: PPUSH
23673: CALL_OW 257
23677: PUSH
23678: LD_INT 11
23680: EQUAL
23681: IFFALSE 23702
// points := [ 30 , 10 , 5 ] ;
23683: LD_ADDR_VAR 0 9
23687: PUSH
23688: LD_INT 30
23690: PUSH
23691: LD_INT 10
23693: PUSH
23694: LD_INT 5
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23702: LD_VAR 0 1
23706: PPUSH
23707: LD_INT 5
23709: PPUSH
23710: CALL_OW 321
23714: PUSH
23715: LD_INT 2
23717: EQUAL
23718: IFFALSE 23735
// bpoints := bpoints * 1.8 ;
23720: LD_ADDR_VAR 0 10
23724: PUSH
23725: LD_VAR 0 10
23729: PUSH
23730: LD_REAL  1.80000000000000E+0000
23733: MUL
23734: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23735: LD_VAR 0 6
23739: PPUSH
23740: CALL_OW 257
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: LD_INT 3
23753: PUSH
23754: LD_INT 4
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: IN
23763: PUSH
23764: LD_VAR 0 1
23768: PPUSH
23769: LD_INT 51
23771: PPUSH
23772: CALL_OW 321
23776: PUSH
23777: LD_INT 2
23779: EQUAL
23780: AND
23781: IFFALSE 23798
// bpoints := bpoints * 1.2 ;
23783: LD_ADDR_VAR 0 10
23787: PUSH
23788: LD_VAR 0 10
23792: PUSH
23793: LD_REAL  1.20000000000000E+0000
23796: MUL
23797: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23798: LD_VAR 0 6
23802: PPUSH
23803: CALL_OW 257
23807: PUSH
23808: LD_INT 5
23810: PUSH
23811: LD_INT 7
23813: PUSH
23814: LD_INT 9
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: LIST
23821: IN
23822: PUSH
23823: LD_VAR 0 1
23827: PPUSH
23828: LD_INT 52
23830: PPUSH
23831: CALL_OW 321
23835: PUSH
23836: LD_INT 2
23838: EQUAL
23839: AND
23840: IFFALSE 23857
// bpoints := bpoints * 1.5 ;
23842: LD_ADDR_VAR 0 10
23846: PUSH
23847: LD_VAR 0 10
23851: PUSH
23852: LD_REAL  1.50000000000000E+0000
23855: MUL
23856: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23857: LD_VAR 0 1
23861: PPUSH
23862: LD_INT 66
23864: PPUSH
23865: CALL_OW 321
23869: PUSH
23870: LD_INT 2
23872: EQUAL
23873: IFFALSE 23890
// bpoints := bpoints * 1.1 ;
23875: LD_ADDR_VAR 0 10
23879: PUSH
23880: LD_VAR 0 10
23884: PUSH
23885: LD_REAL  1.10000000000000E+0000
23888: MUL
23889: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23890: LD_ADDR_VAR 0 10
23894: PUSH
23895: LD_VAR 0 10
23899: PUSH
23900: LD_VAR 0 6
23904: PPUSH
23905: LD_INT 1
23907: PPUSH
23908: CALL_OW 259
23912: PUSH
23913: LD_REAL  1.15000000000000E+0000
23916: MUL
23917: MUL
23918: ST_TO_ADDR
// end ; unit_vehicle :
23919: GO 24743
23921: LD_INT 2
23923: DOUBLE
23924: EQUAL
23925: IFTRUE 23929
23927: GO 24731
23929: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23930: LD_VAR 0 6
23934: PPUSH
23935: CALL_OW 264
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: LD_INT 42
23945: PUSH
23946: LD_INT 24
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: LIST
23953: IN
23954: IFFALSE 23975
// points := [ 25 , 5 , 3 ] ;
23956: LD_ADDR_VAR 0 9
23960: PUSH
23961: LD_INT 25
23963: PUSH
23964: LD_INT 5
23966: PUSH
23967: LD_INT 3
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: LIST
23974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23975: LD_VAR 0 6
23979: PPUSH
23980: CALL_OW 264
23984: PUSH
23985: LD_INT 4
23987: PUSH
23988: LD_INT 43
23990: PUSH
23991: LD_INT 25
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: LIST
23998: IN
23999: IFFALSE 24020
// points := [ 40 , 15 , 5 ] ;
24001: LD_ADDR_VAR 0 9
24005: PUSH
24006: LD_INT 40
24008: PUSH
24009: LD_INT 15
24011: PUSH
24012: LD_INT 5
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: LIST
24019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24020: LD_VAR 0 6
24024: PPUSH
24025: CALL_OW 264
24029: PUSH
24030: LD_INT 3
24032: PUSH
24033: LD_INT 23
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: IN
24040: IFFALSE 24061
// points := [ 7 , 25 , 8 ] ;
24042: LD_ADDR_VAR 0 9
24046: PUSH
24047: LD_INT 7
24049: PUSH
24050: LD_INT 25
24052: PUSH
24053: LD_INT 8
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24061: LD_VAR 0 6
24065: PPUSH
24066: CALL_OW 264
24070: PUSH
24071: LD_INT 5
24073: PUSH
24074: LD_INT 27
24076: PUSH
24077: LD_INT 44
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: IN
24085: IFFALSE 24106
// points := [ 14 , 50 , 16 ] ;
24087: LD_ADDR_VAR 0 9
24091: PUSH
24092: LD_INT 14
24094: PUSH
24095: LD_INT 50
24097: PUSH
24098: LD_INT 16
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: LIST
24105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24106: LD_VAR 0 6
24110: PPUSH
24111: CALL_OW 264
24115: PUSH
24116: LD_INT 6
24118: PUSH
24119: LD_INT 46
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: IN
24126: IFFALSE 24147
// points := [ 32 , 120 , 70 ] ;
24128: LD_ADDR_VAR 0 9
24132: PUSH
24133: LD_INT 32
24135: PUSH
24136: LD_INT 120
24138: PUSH
24139: LD_INT 70
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
24147: LD_VAR 0 6
24151: PPUSH
24152: CALL_OW 264
24156: PUSH
24157: LD_INT 7
24159: PUSH
24160: LD_INT 28
24162: PUSH
24163: LD_INT 45
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: IN
24171: IFFALSE 24192
// points := [ 35 , 20 , 45 ] ;
24173: LD_ADDR_VAR 0 9
24177: PUSH
24178: LD_INT 35
24180: PUSH
24181: LD_INT 20
24183: PUSH
24184: LD_INT 45
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24192: LD_VAR 0 6
24196: PPUSH
24197: CALL_OW 264
24201: PUSH
24202: LD_INT 47
24204: PUSH
24205: EMPTY
24206: LIST
24207: IN
24208: IFFALSE 24229
// points := [ 67 , 45 , 75 ] ;
24210: LD_ADDR_VAR 0 9
24214: PUSH
24215: LD_INT 67
24217: PUSH
24218: LD_INT 45
24220: PUSH
24221: LD_INT 75
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24229: LD_VAR 0 6
24233: PPUSH
24234: CALL_OW 264
24238: PUSH
24239: LD_INT 26
24241: PUSH
24242: EMPTY
24243: LIST
24244: IN
24245: IFFALSE 24266
// points := [ 120 , 30 , 80 ] ;
24247: LD_ADDR_VAR 0 9
24251: PUSH
24252: LD_INT 120
24254: PUSH
24255: LD_INT 30
24257: PUSH
24258: LD_INT 80
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24266: LD_VAR 0 6
24270: PPUSH
24271: CALL_OW 264
24275: PUSH
24276: LD_INT 22
24278: PUSH
24279: EMPTY
24280: LIST
24281: IN
24282: IFFALSE 24303
// points := [ 40 , 1 , 1 ] ;
24284: LD_ADDR_VAR 0 9
24288: PUSH
24289: LD_INT 40
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24303: LD_VAR 0 6
24307: PPUSH
24308: CALL_OW 264
24312: PUSH
24313: LD_INT 29
24315: PUSH
24316: EMPTY
24317: LIST
24318: IN
24319: IFFALSE 24340
// points := [ 70 , 200 , 400 ] ;
24321: LD_ADDR_VAR 0 9
24325: PUSH
24326: LD_INT 70
24328: PUSH
24329: LD_INT 200
24331: PUSH
24332: LD_INT 400
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24340: LD_VAR 0 6
24344: PPUSH
24345: CALL_OW 264
24349: PUSH
24350: LD_INT 14
24352: PUSH
24353: LD_INT 53
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: IN
24360: IFFALSE 24381
// points := [ 40 , 10 , 20 ] ;
24362: LD_ADDR_VAR 0 9
24366: PUSH
24367: LD_INT 40
24369: PUSH
24370: LD_INT 10
24372: PUSH
24373: LD_INT 20
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24381: LD_VAR 0 6
24385: PPUSH
24386: CALL_OW 264
24390: PUSH
24391: LD_INT 9
24393: PUSH
24394: EMPTY
24395: LIST
24396: IN
24397: IFFALSE 24418
// points := [ 5 , 70 , 20 ] ;
24399: LD_ADDR_VAR 0 9
24403: PUSH
24404: LD_INT 5
24406: PUSH
24407: LD_INT 70
24409: PUSH
24410: LD_INT 20
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24418: LD_VAR 0 6
24422: PPUSH
24423: CALL_OW 264
24427: PUSH
24428: LD_INT 10
24430: PUSH
24431: EMPTY
24432: LIST
24433: IN
24434: IFFALSE 24455
// points := [ 35 , 110 , 70 ] ;
24436: LD_ADDR_VAR 0 9
24440: PUSH
24441: LD_INT 35
24443: PUSH
24444: LD_INT 110
24446: PUSH
24447: LD_INT 70
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24455: LD_VAR 0 6
24459: PPUSH
24460: CALL_OW 265
24464: PUSH
24465: LD_INT 25
24467: EQUAL
24468: IFFALSE 24489
// points := [ 80 , 65 , 100 ] ;
24470: LD_ADDR_VAR 0 9
24474: PUSH
24475: LD_INT 80
24477: PUSH
24478: LD_INT 65
24480: PUSH
24481: LD_INT 100
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24489: LD_VAR 0 6
24493: PPUSH
24494: CALL_OW 263
24498: PUSH
24499: LD_INT 1
24501: EQUAL
24502: IFFALSE 24537
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24504: LD_ADDR_VAR 0 10
24508: PUSH
24509: LD_VAR 0 10
24513: PUSH
24514: LD_VAR 0 6
24518: PPUSH
24519: CALL_OW 311
24523: PPUSH
24524: LD_INT 3
24526: PPUSH
24527: CALL_OW 259
24531: PUSH
24532: LD_INT 4
24534: MUL
24535: MUL
24536: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24537: LD_VAR 0 6
24541: PPUSH
24542: CALL_OW 263
24546: PUSH
24547: LD_INT 2
24549: EQUAL
24550: IFFALSE 24601
// begin j := IsControledBy ( i ) ;
24552: LD_ADDR_VAR 0 7
24556: PUSH
24557: LD_VAR 0 6
24561: PPUSH
24562: CALL_OW 312
24566: ST_TO_ADDR
// if j then
24567: LD_VAR 0 7
24571: IFFALSE 24601
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24573: LD_ADDR_VAR 0 10
24577: PUSH
24578: LD_VAR 0 10
24582: PUSH
24583: LD_VAR 0 7
24587: PPUSH
24588: LD_INT 3
24590: PPUSH
24591: CALL_OW 259
24595: PUSH
24596: LD_INT 3
24598: MUL
24599: MUL
24600: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24601: LD_VAR 0 6
24605: PPUSH
24606: CALL_OW 264
24610: PUSH
24611: LD_INT 5
24613: PUSH
24614: LD_INT 6
24616: PUSH
24617: LD_INT 46
24619: PUSH
24620: LD_INT 44
24622: PUSH
24623: LD_INT 47
24625: PUSH
24626: LD_INT 45
24628: PUSH
24629: LD_INT 28
24631: PUSH
24632: LD_INT 7
24634: PUSH
24635: LD_INT 27
24637: PUSH
24638: LD_INT 29
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: IN
24653: PUSH
24654: LD_VAR 0 1
24658: PPUSH
24659: LD_INT 52
24661: PPUSH
24662: CALL_OW 321
24666: PUSH
24667: LD_INT 2
24669: EQUAL
24670: AND
24671: IFFALSE 24688
// bpoints := bpoints * 1.2 ;
24673: LD_ADDR_VAR 0 10
24677: PUSH
24678: LD_VAR 0 10
24682: PUSH
24683: LD_REAL  1.20000000000000E+0000
24686: MUL
24687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24688: LD_VAR 0 6
24692: PPUSH
24693: CALL_OW 264
24697: PUSH
24698: LD_INT 6
24700: PUSH
24701: LD_INT 46
24703: PUSH
24704: LD_INT 47
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: IN
24712: IFFALSE 24729
// bpoints := bpoints * 1.2 ;
24714: LD_ADDR_VAR 0 10
24718: PUSH
24719: LD_VAR 0 10
24723: PUSH
24724: LD_REAL  1.20000000000000E+0000
24727: MUL
24728: ST_TO_ADDR
// end ; unit_building :
24729: GO 24743
24731: LD_INT 3
24733: DOUBLE
24734: EQUAL
24735: IFTRUE 24739
24737: GO 24742
24739: POP
// ; end ;
24740: GO 24743
24742: POP
// for j = 1 to 3 do
24743: LD_ADDR_VAR 0 7
24747: PUSH
24748: DOUBLE
24749: LD_INT 1
24751: DEC
24752: ST_TO_ADDR
24753: LD_INT 3
24755: PUSH
24756: FOR_TO
24757: IFFALSE 24810
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24759: LD_ADDR_VAR 0 5
24763: PUSH
24764: LD_VAR 0 5
24768: PPUSH
24769: LD_VAR 0 7
24773: PPUSH
24774: LD_VAR 0 5
24778: PUSH
24779: LD_VAR 0 7
24783: ARRAY
24784: PUSH
24785: LD_VAR 0 9
24789: PUSH
24790: LD_VAR 0 7
24794: ARRAY
24795: PUSH
24796: LD_VAR 0 10
24800: MUL
24801: PLUS
24802: PPUSH
24803: CALL_OW 1
24807: ST_TO_ADDR
24808: GO 24756
24810: POP
24811: POP
// end ;
24812: GO 23295
24814: POP
24815: POP
// result := Replace ( result , 4 , tmp ) ;
24816: LD_ADDR_VAR 0 5
24820: PUSH
24821: LD_VAR 0 5
24825: PPUSH
24826: LD_INT 4
24828: PPUSH
24829: LD_VAR 0 8
24833: PPUSH
24834: CALL_OW 1
24838: ST_TO_ADDR
// end ;
24839: LD_VAR 0 5
24843: RET
// export function DangerAtRange ( unit , range ) ; begin
24844: LD_INT 0
24846: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: LD_VAR 0 1
24856: PPUSH
24857: CALL_OW 255
24861: PPUSH
24862: LD_VAR 0 1
24866: PPUSH
24867: CALL_OW 250
24871: PPUSH
24872: LD_VAR 0 1
24876: PPUSH
24877: CALL_OW 251
24881: PPUSH
24882: LD_VAR 0 2
24886: PPUSH
24887: CALL 23147 0 4
24891: ST_TO_ADDR
// end ;
24892: LD_VAR 0 3
24896: RET
// export function DangerInArea ( side , area ) ; begin
24897: LD_INT 0
24899: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24900: LD_ADDR_VAR 0 3
24904: PUSH
24905: LD_VAR 0 2
24909: PPUSH
24910: LD_INT 81
24912: PUSH
24913: LD_VAR 0 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PPUSH
24922: CALL_OW 70
24926: ST_TO_ADDR
// end ;
24927: LD_VAR 0 3
24931: RET
// export function IsExtension ( b ) ; begin
24932: LD_INT 0
24934: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24935: LD_ADDR_VAR 0 2
24939: PUSH
24940: LD_VAR 0 1
24944: PUSH
24945: LD_INT 23
24947: PUSH
24948: LD_INT 20
24950: PUSH
24951: LD_INT 22
24953: PUSH
24954: LD_INT 17
24956: PUSH
24957: LD_INT 24
24959: PUSH
24960: LD_INT 21
24962: PUSH
24963: LD_INT 19
24965: PUSH
24966: LD_INT 16
24968: PUSH
24969: LD_INT 25
24971: PUSH
24972: LD_INT 18
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: IN
24987: ST_TO_ADDR
// end ;
24988: LD_VAR 0 2
24992: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
24993: LD_INT 0
24995: PPUSH
24996: PPUSH
24997: PPUSH
// result := [ ] ;
24998: LD_ADDR_VAR 0 3
25002: PUSH
25003: EMPTY
25004: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25005: LD_ADDR_VAR 0 4
25009: PUSH
25010: LD_VAR 0 2
25014: PPUSH
25015: LD_INT 21
25017: PUSH
25018: LD_INT 3
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PPUSH
25025: CALL_OW 70
25029: ST_TO_ADDR
// if not tmp then
25030: LD_VAR 0 4
25034: NOT
25035: IFFALSE 25039
// exit ;
25037: GO 25097
// for i in tmp do
25039: LD_ADDR_VAR 0 5
25043: PUSH
25044: LD_VAR 0 4
25048: PUSH
25049: FOR_IN
25050: IFFALSE 25085
// if GetBase ( i ) <> base then
25052: LD_VAR 0 5
25056: PPUSH
25057: CALL_OW 274
25061: PUSH
25062: LD_VAR 0 1
25066: NONEQUAL
25067: IFFALSE 25083
// ComLinkToBase ( base , i ) ;
25069: LD_VAR 0 1
25073: PPUSH
25074: LD_VAR 0 5
25078: PPUSH
25079: CALL_OW 169
25083: GO 25049
25085: POP
25086: POP
// result := tmp ;
25087: LD_ADDR_VAR 0 3
25091: PUSH
25092: LD_VAR 0 4
25096: ST_TO_ADDR
// end ;
25097: LD_VAR 0 3
25101: RET
// export function ComComplete ( unit , b ) ; var i ; begin
25102: LD_INT 0
25104: PPUSH
25105: PPUSH
// if BuildingStatus ( b ) = bs_build then
25106: LD_VAR 0 2
25110: PPUSH
25111: CALL_OW 461
25115: PUSH
25116: LD_INT 1
25118: EQUAL
25119: IFFALSE 25179
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25121: LD_VAR 0 1
25125: PPUSH
25126: LD_STRING h
25128: PUSH
25129: LD_VAR 0 2
25133: PPUSH
25134: CALL_OW 250
25138: PUSH
25139: LD_VAR 0 2
25143: PPUSH
25144: CALL_OW 251
25148: PUSH
25149: LD_VAR 0 2
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: PUSH
25172: EMPTY
25173: LIST
25174: PPUSH
25175: CALL_OW 446
// end ;
25179: LD_VAR 0 3
25183: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25184: LD_INT 0
25186: PPUSH
25187: PPUSH
25188: PPUSH
25189: PPUSH
25190: PPUSH
25191: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
25192: LD_VAR 0 1
25196: NOT
25197: PUSH
25198: LD_VAR 0 1
25202: PPUSH
25203: CALL_OW 263
25207: PUSH
25208: LD_INT 2
25210: EQUAL
25211: NOT
25212: OR
25213: IFFALSE 25217
// exit ;
25215: GO 25533
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25217: LD_ADDR_VAR 0 6
25221: PUSH
25222: LD_INT 22
25224: PUSH
25225: LD_VAR 0 1
25229: PPUSH
25230: CALL_OW 255
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 30
25244: PUSH
25245: LD_INT 36
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 34
25254: PUSH
25255: LD_INT 31
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: LIST
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PPUSH
25271: CALL_OW 69
25275: ST_TO_ADDR
// if not tmp then
25276: LD_VAR 0 6
25280: NOT
25281: IFFALSE 25285
// exit ;
25283: GO 25533
// result := [ ] ;
25285: LD_ADDR_VAR 0 2
25289: PUSH
25290: EMPTY
25291: ST_TO_ADDR
// for i in tmp do
25292: LD_ADDR_VAR 0 3
25296: PUSH
25297: LD_VAR 0 6
25301: PUSH
25302: FOR_IN
25303: IFFALSE 25374
// begin t := UnitsInside ( i ) ;
25305: LD_ADDR_VAR 0 4
25309: PUSH
25310: LD_VAR 0 3
25314: PPUSH
25315: CALL_OW 313
25319: ST_TO_ADDR
// if t then
25320: LD_VAR 0 4
25324: IFFALSE 25372
// for j in t do
25326: LD_ADDR_VAR 0 7
25330: PUSH
25331: LD_VAR 0 4
25335: PUSH
25336: FOR_IN
25337: IFFALSE 25370
// result := Insert ( result , result + 1 , j ) ;
25339: LD_ADDR_VAR 0 2
25343: PUSH
25344: LD_VAR 0 2
25348: PPUSH
25349: LD_VAR 0 2
25353: PUSH
25354: LD_INT 1
25356: PLUS
25357: PPUSH
25358: LD_VAR 0 7
25362: PPUSH
25363: CALL_OW 2
25367: ST_TO_ADDR
25368: GO 25336
25370: POP
25371: POP
// end ;
25372: GO 25302
25374: POP
25375: POP
// if not result then
25376: LD_VAR 0 2
25380: NOT
25381: IFFALSE 25385
// exit ;
25383: GO 25533
// mech := result [ 1 ] ;
25385: LD_ADDR_VAR 0 5
25389: PUSH
25390: LD_VAR 0 2
25394: PUSH
25395: LD_INT 1
25397: ARRAY
25398: ST_TO_ADDR
// if result > 1 then
25399: LD_VAR 0 2
25403: PUSH
25404: LD_INT 1
25406: GREATER
25407: IFFALSE 25519
// for i = 2 to result do
25409: LD_ADDR_VAR 0 3
25413: PUSH
25414: DOUBLE
25415: LD_INT 2
25417: DEC
25418: ST_TO_ADDR
25419: LD_VAR 0 2
25423: PUSH
25424: FOR_TO
25425: IFFALSE 25517
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25427: LD_ADDR_VAR 0 4
25431: PUSH
25432: LD_VAR 0 2
25436: PUSH
25437: LD_VAR 0 3
25441: ARRAY
25442: PPUSH
25443: LD_INT 3
25445: PPUSH
25446: CALL_OW 259
25450: PUSH
25451: LD_VAR 0 2
25455: PUSH
25456: LD_VAR 0 3
25460: ARRAY
25461: PPUSH
25462: CALL_OW 432
25466: MINUS
25467: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25468: LD_VAR 0 4
25472: PUSH
25473: LD_VAR 0 5
25477: PPUSH
25478: LD_INT 3
25480: PPUSH
25481: CALL_OW 259
25485: PUSH
25486: LD_VAR 0 5
25490: PPUSH
25491: CALL_OW 432
25495: MINUS
25496: GREATEREQUAL
25497: IFFALSE 25515
// mech := result [ i ] ;
25499: LD_ADDR_VAR 0 5
25503: PUSH
25504: LD_VAR 0 2
25508: PUSH
25509: LD_VAR 0 3
25513: ARRAY
25514: ST_TO_ADDR
// end ;
25515: GO 25424
25517: POP
25518: POP
// ComLinkTo ( vehicle , mech ) ;
25519: LD_VAR 0 1
25523: PPUSH
25524: LD_VAR 0 5
25528: PPUSH
25529: CALL_OW 135
// end ;
25533: LD_VAR 0 2
25537: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25538: LD_INT 0
25540: PPUSH
25541: PPUSH
25542: PPUSH
25543: PPUSH
25544: PPUSH
25545: PPUSH
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
25550: PPUSH
25551: PPUSH
25552: PPUSH
// result := [ ] ;
25553: LD_ADDR_VAR 0 7
25557: PUSH
25558: EMPTY
25559: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25560: LD_VAR 0 1
25564: PPUSH
25565: CALL_OW 266
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: IN
25580: NOT
25581: IFFALSE 25585
// exit ;
25583: GO 27216
// if name then
25585: LD_VAR 0 3
25589: IFFALSE 25605
// SetBName ( base_dep , name ) ;
25591: LD_VAR 0 1
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: CALL_OW 500
// base := GetBase ( base_dep ) ;
25605: LD_ADDR_VAR 0 15
25609: PUSH
25610: LD_VAR 0 1
25614: PPUSH
25615: CALL_OW 274
25619: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25620: LD_ADDR_VAR 0 16
25624: PUSH
25625: LD_VAR 0 1
25629: PPUSH
25630: CALL_OW 255
25634: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25635: LD_ADDR_VAR 0 17
25639: PUSH
25640: LD_VAR 0 1
25644: PPUSH
25645: CALL_OW 248
25649: ST_TO_ADDR
// if sources then
25650: LD_VAR 0 5
25654: IFFALSE 25701
// for i = 1 to 3 do
25656: LD_ADDR_VAR 0 8
25660: PUSH
25661: DOUBLE
25662: LD_INT 1
25664: DEC
25665: ST_TO_ADDR
25666: LD_INT 3
25668: PUSH
25669: FOR_TO
25670: IFFALSE 25699
// AddResourceType ( base , i , sources [ i ] ) ;
25672: LD_VAR 0 15
25676: PPUSH
25677: LD_VAR 0 8
25681: PPUSH
25682: LD_VAR 0 5
25686: PUSH
25687: LD_VAR 0 8
25691: ARRAY
25692: PPUSH
25693: CALL_OW 276
25697: GO 25669
25699: POP
25700: POP
// buildings := GetBaseBuildings ( base , area ) ;
25701: LD_ADDR_VAR 0 18
25705: PUSH
25706: LD_VAR 0 15
25710: PPUSH
25711: LD_VAR 0 2
25715: PPUSH
25716: CALL 24993 0 2
25720: ST_TO_ADDR
// InitHc ;
25721: CALL_OW 19
// InitUc ;
25725: CALL_OW 18
// uc_side := side ;
25729: LD_ADDR_OWVAR 20
25733: PUSH
25734: LD_VAR 0 16
25738: ST_TO_ADDR
// uc_nation := nation ;
25739: LD_ADDR_OWVAR 21
25743: PUSH
25744: LD_VAR 0 17
25748: ST_TO_ADDR
// if buildings then
25749: LD_VAR 0 18
25753: IFFALSE 27075
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25755: LD_ADDR_VAR 0 19
25759: PUSH
25760: LD_VAR 0 18
25764: PPUSH
25765: LD_INT 2
25767: PUSH
25768: LD_INT 30
25770: PUSH
25771: LD_INT 29
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 30
25780: PUSH
25781: LD_INT 30
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: PPUSH
25793: CALL_OW 72
25797: ST_TO_ADDR
// if tmp then
25798: LD_VAR 0 19
25802: IFFALSE 25850
// for i in tmp do
25804: LD_ADDR_VAR 0 8
25808: PUSH
25809: LD_VAR 0 19
25813: PUSH
25814: FOR_IN
25815: IFFALSE 25848
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25817: LD_VAR 0 8
25821: PPUSH
25822: CALL_OW 250
25826: PPUSH
25827: LD_VAR 0 8
25831: PPUSH
25832: CALL_OW 251
25836: PPUSH
25837: LD_VAR 0 16
25841: PPUSH
25842: CALL_OW 441
25846: GO 25814
25848: POP
25849: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25850: LD_VAR 0 18
25854: PPUSH
25855: LD_INT 2
25857: PUSH
25858: LD_INT 30
25860: PUSH
25861: LD_INT 32
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 30
25870: PUSH
25871: LD_INT 33
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: PPUSH
25883: CALL_OW 72
25887: IFFALSE 25975
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25889: LD_ADDR_VAR 0 8
25893: PUSH
25894: LD_VAR 0 18
25898: PPUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 30
25904: PUSH
25905: LD_INT 32
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 30
25914: PUSH
25915: LD_INT 33
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: LIST
25926: PPUSH
25927: CALL_OW 72
25931: PUSH
25932: FOR_IN
25933: IFFALSE 25973
// begin if not GetBWeapon ( i ) then
25935: LD_VAR 0 8
25939: PPUSH
25940: CALL_OW 269
25944: NOT
25945: IFFALSE 25971
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25947: LD_VAR 0 8
25951: PPUSH
25952: LD_VAR 0 8
25956: PPUSH
25957: LD_VAR 0 2
25961: PPUSH
25962: CALL 27221 0 2
25966: PPUSH
25967: CALL_OW 431
// end ;
25971: GO 25932
25973: POP
25974: POP
// end ; for i = 1 to personel do
25975: LD_ADDR_VAR 0 8
25979: PUSH
25980: DOUBLE
25981: LD_INT 1
25983: DEC
25984: ST_TO_ADDR
25985: LD_VAR 0 6
25989: PUSH
25990: FOR_TO
25991: IFFALSE 27055
// begin if i > 4 then
25993: LD_VAR 0 8
25997: PUSH
25998: LD_INT 4
26000: GREATER
26001: IFFALSE 26005
// break ;
26003: GO 27055
// case i of 1 :
26005: LD_VAR 0 8
26009: PUSH
26010: LD_INT 1
26012: DOUBLE
26013: EQUAL
26014: IFTRUE 26018
26016: GO 26098
26018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26019: LD_ADDR_VAR 0 12
26023: PUSH
26024: LD_VAR 0 18
26028: PPUSH
26029: LD_INT 22
26031: PUSH
26032: LD_VAR 0 16
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 58
26043: PUSH
26044: EMPTY
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 30
26052: PUSH
26053: LD_INT 32
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 30
26062: PUSH
26063: LD_INT 4
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 30
26072: PUSH
26073: LD_INT 5
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: PPUSH
26091: CALL_OW 72
26095: ST_TO_ADDR
26096: GO 26320
26098: LD_INT 2
26100: DOUBLE
26101: EQUAL
26102: IFTRUE 26106
26104: GO 26168
26106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26107: LD_ADDR_VAR 0 12
26111: PUSH
26112: LD_VAR 0 18
26116: PPUSH
26117: LD_INT 22
26119: PUSH
26120: LD_VAR 0 16
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: LD_INT 30
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 30
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: LIST
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PPUSH
26161: CALL_OW 72
26165: ST_TO_ADDR
26166: GO 26320
26168: LD_INT 3
26170: DOUBLE
26171: EQUAL
26172: IFTRUE 26176
26174: GO 26238
26176: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26177: LD_ADDR_VAR 0 12
26181: PUSH
26182: LD_VAR 0 18
26186: PPUSH
26187: LD_INT 22
26189: PUSH
26190: LD_VAR 0 16
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 2
26201: PUSH
26202: LD_INT 30
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 30
26214: PUSH
26215: LD_INT 3
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PPUSH
26231: CALL_OW 72
26235: ST_TO_ADDR
26236: GO 26320
26238: LD_INT 4
26240: DOUBLE
26241: EQUAL
26242: IFTRUE 26246
26244: GO 26319
26246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26247: LD_ADDR_VAR 0 12
26251: PUSH
26252: LD_VAR 0 18
26256: PPUSH
26257: LD_INT 22
26259: PUSH
26260: LD_VAR 0 16
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: LD_INT 30
26274: PUSH
26275: LD_INT 6
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 30
26284: PUSH
26285: LD_INT 7
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 30
26294: PUSH
26295: LD_INT 8
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PPUSH
26312: CALL_OW 72
26316: ST_TO_ADDR
26317: GO 26320
26319: POP
// if i = 1 then
26320: LD_VAR 0 8
26324: PUSH
26325: LD_INT 1
26327: EQUAL
26328: IFFALSE 26439
// begin tmp := [ ] ;
26330: LD_ADDR_VAR 0 19
26334: PUSH
26335: EMPTY
26336: ST_TO_ADDR
// for j in f do
26337: LD_ADDR_VAR 0 9
26341: PUSH
26342: LD_VAR 0 12
26346: PUSH
26347: FOR_IN
26348: IFFALSE 26421
// if GetBType ( j ) = b_bunker then
26350: LD_VAR 0 9
26354: PPUSH
26355: CALL_OW 266
26359: PUSH
26360: LD_INT 32
26362: EQUAL
26363: IFFALSE 26390
// tmp := Insert ( tmp , 1 , j ) else
26365: LD_ADDR_VAR 0 19
26369: PUSH
26370: LD_VAR 0 19
26374: PPUSH
26375: LD_INT 1
26377: PPUSH
26378: LD_VAR 0 9
26382: PPUSH
26383: CALL_OW 2
26387: ST_TO_ADDR
26388: GO 26419
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26390: LD_ADDR_VAR 0 19
26394: PUSH
26395: LD_VAR 0 19
26399: PPUSH
26400: LD_VAR 0 19
26404: PUSH
26405: LD_INT 1
26407: PLUS
26408: PPUSH
26409: LD_VAR 0 9
26413: PPUSH
26414: CALL_OW 2
26418: ST_TO_ADDR
26419: GO 26347
26421: POP
26422: POP
// if tmp then
26423: LD_VAR 0 19
26427: IFFALSE 26439
// f := tmp ;
26429: LD_ADDR_VAR 0 12
26433: PUSH
26434: LD_VAR 0 19
26438: ST_TO_ADDR
// end ; x := personel [ i ] ;
26439: LD_ADDR_VAR 0 13
26443: PUSH
26444: LD_VAR 0 6
26448: PUSH
26449: LD_VAR 0 8
26453: ARRAY
26454: ST_TO_ADDR
// if x = - 1 then
26455: LD_VAR 0 13
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: EQUAL
26464: IFFALSE 26673
// begin for j in f do
26466: LD_ADDR_VAR 0 9
26470: PUSH
26471: LD_VAR 0 12
26475: PUSH
26476: FOR_IN
26477: IFFALSE 26669
// repeat InitHc ;
26479: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26483: LD_VAR 0 9
26487: PPUSH
26488: CALL_OW 266
26492: PUSH
26493: LD_INT 5
26495: EQUAL
26496: IFFALSE 26566
// begin if UnitsInside ( j ) < 3 then
26498: LD_VAR 0 9
26502: PPUSH
26503: CALL_OW 313
26507: PUSH
26508: LD_INT 3
26510: LESS
26511: IFFALSE 26547
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26513: LD_INT 0
26515: PPUSH
26516: LD_INT 5
26518: PUSH
26519: LD_INT 8
26521: PUSH
26522: LD_INT 9
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: PUSH
26530: LD_VAR 0 17
26534: ARRAY
26535: PPUSH
26536: LD_VAR 0 4
26540: PPUSH
26541: CALL_OW 380
26545: GO 26564
// PrepareHuman ( false , i , skill ) ;
26547: LD_INT 0
26549: PPUSH
26550: LD_VAR 0 8
26554: PPUSH
26555: LD_VAR 0 4
26559: PPUSH
26560: CALL_OW 380
// end else
26564: GO 26583
// PrepareHuman ( false , i , skill ) ;
26566: LD_INT 0
26568: PPUSH
26569: LD_VAR 0 8
26573: PPUSH
26574: LD_VAR 0 4
26578: PPUSH
26579: CALL_OW 380
// un := CreateHuman ;
26583: LD_ADDR_VAR 0 14
26587: PUSH
26588: CALL_OW 44
26592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26593: LD_ADDR_VAR 0 7
26597: PUSH
26598: LD_VAR 0 7
26602: PPUSH
26603: LD_INT 1
26605: PPUSH
26606: LD_VAR 0 14
26610: PPUSH
26611: CALL_OW 2
26615: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26616: LD_VAR 0 14
26620: PPUSH
26621: LD_VAR 0 9
26625: PPUSH
26626: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26630: LD_VAR 0 9
26634: PPUSH
26635: CALL_OW 313
26639: PUSH
26640: LD_INT 6
26642: EQUAL
26643: PUSH
26644: LD_VAR 0 9
26648: PPUSH
26649: CALL_OW 266
26653: PUSH
26654: LD_INT 32
26656: PUSH
26657: LD_INT 31
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: IN
26664: OR
26665: IFFALSE 26479
26667: GO 26476
26669: POP
26670: POP
// end else
26671: GO 27053
// for j = 1 to x do
26673: LD_ADDR_VAR 0 9
26677: PUSH
26678: DOUBLE
26679: LD_INT 1
26681: DEC
26682: ST_TO_ADDR
26683: LD_VAR 0 13
26687: PUSH
26688: FOR_TO
26689: IFFALSE 27051
// begin InitHc ;
26691: CALL_OW 19
// if not f then
26695: LD_VAR 0 12
26699: NOT
26700: IFFALSE 26789
// begin PrepareHuman ( false , i , skill ) ;
26702: LD_INT 0
26704: PPUSH
26705: LD_VAR 0 8
26709: PPUSH
26710: LD_VAR 0 4
26714: PPUSH
26715: CALL_OW 380
// un := CreateHuman ;
26719: LD_ADDR_VAR 0 14
26723: PUSH
26724: CALL_OW 44
26728: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26729: LD_ADDR_VAR 0 7
26733: PUSH
26734: LD_VAR 0 7
26738: PPUSH
26739: LD_INT 1
26741: PPUSH
26742: LD_VAR 0 14
26746: PPUSH
26747: CALL_OW 2
26751: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26752: LD_VAR 0 14
26756: PPUSH
26757: LD_VAR 0 1
26761: PPUSH
26762: CALL_OW 250
26766: PPUSH
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 251
26776: PPUSH
26777: LD_INT 10
26779: PPUSH
26780: LD_INT 0
26782: PPUSH
26783: CALL_OW 50
// continue ;
26787: GO 26688
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26789: LD_VAR 0 12
26793: PUSH
26794: LD_INT 1
26796: ARRAY
26797: PPUSH
26798: CALL_OW 313
26802: PUSH
26803: LD_VAR 0 12
26807: PUSH
26808: LD_INT 1
26810: ARRAY
26811: PPUSH
26812: CALL_OW 266
26816: PUSH
26817: LD_INT 32
26819: PUSH
26820: LD_INT 31
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: IN
26827: AND
26828: PUSH
26829: LD_VAR 0 12
26833: PUSH
26834: LD_INT 1
26836: ARRAY
26837: PPUSH
26838: CALL_OW 313
26842: PUSH
26843: LD_INT 6
26845: EQUAL
26846: OR
26847: IFFALSE 26867
// f := Delete ( f , 1 ) ;
26849: LD_ADDR_VAR 0 12
26853: PUSH
26854: LD_VAR 0 12
26858: PPUSH
26859: LD_INT 1
26861: PPUSH
26862: CALL_OW 3
26866: ST_TO_ADDR
// if not f then
26867: LD_VAR 0 12
26871: NOT
26872: IFFALSE 26890
// begin x := x + 2 ;
26874: LD_ADDR_VAR 0 13
26878: PUSH
26879: LD_VAR 0 13
26883: PUSH
26884: LD_INT 2
26886: PLUS
26887: ST_TO_ADDR
// continue ;
26888: GO 26688
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26890: LD_VAR 0 12
26894: PUSH
26895: LD_INT 1
26897: ARRAY
26898: PPUSH
26899: CALL_OW 266
26903: PUSH
26904: LD_INT 5
26906: EQUAL
26907: IFFALSE 26981
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26909: LD_VAR 0 12
26913: PUSH
26914: LD_INT 1
26916: ARRAY
26917: PPUSH
26918: CALL_OW 313
26922: PUSH
26923: LD_INT 3
26925: LESS
26926: IFFALSE 26962
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26928: LD_INT 0
26930: PPUSH
26931: LD_INT 5
26933: PUSH
26934: LD_INT 8
26936: PUSH
26937: LD_INT 9
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: PUSH
26945: LD_VAR 0 17
26949: ARRAY
26950: PPUSH
26951: LD_VAR 0 4
26955: PPUSH
26956: CALL_OW 380
26960: GO 26979
// PrepareHuman ( false , i , skill ) ;
26962: LD_INT 0
26964: PPUSH
26965: LD_VAR 0 8
26969: PPUSH
26970: LD_VAR 0 4
26974: PPUSH
26975: CALL_OW 380
// end else
26979: GO 26998
// PrepareHuman ( false , i , skill ) ;
26981: LD_INT 0
26983: PPUSH
26984: LD_VAR 0 8
26988: PPUSH
26989: LD_VAR 0 4
26993: PPUSH
26994: CALL_OW 380
// un := CreateHuman ;
26998: LD_ADDR_VAR 0 14
27002: PUSH
27003: CALL_OW 44
27007: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27008: LD_ADDR_VAR 0 7
27012: PUSH
27013: LD_VAR 0 7
27017: PPUSH
27018: LD_INT 1
27020: PPUSH
27021: LD_VAR 0 14
27025: PPUSH
27026: CALL_OW 2
27030: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27031: LD_VAR 0 14
27035: PPUSH
27036: LD_VAR 0 12
27040: PUSH
27041: LD_INT 1
27043: ARRAY
27044: PPUSH
27045: CALL_OW 52
// end ;
27049: GO 26688
27051: POP
27052: POP
// end ;
27053: GO 25990
27055: POP
27056: POP
// result := result ^ buildings ;
27057: LD_ADDR_VAR 0 7
27061: PUSH
27062: LD_VAR 0 7
27066: PUSH
27067: LD_VAR 0 18
27071: ADD
27072: ST_TO_ADDR
// end else
27073: GO 27216
// begin for i = 1 to personel do
27075: LD_ADDR_VAR 0 8
27079: PUSH
27080: DOUBLE
27081: LD_INT 1
27083: DEC
27084: ST_TO_ADDR
27085: LD_VAR 0 6
27089: PUSH
27090: FOR_TO
27091: IFFALSE 27214
// begin if i > 4 then
27093: LD_VAR 0 8
27097: PUSH
27098: LD_INT 4
27100: GREATER
27101: IFFALSE 27105
// break ;
27103: GO 27214
// x := personel [ i ] ;
27105: LD_ADDR_VAR 0 13
27109: PUSH
27110: LD_VAR 0 6
27114: PUSH
27115: LD_VAR 0 8
27119: ARRAY
27120: ST_TO_ADDR
// if x = - 1 then
27121: LD_VAR 0 13
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: EQUAL
27130: IFFALSE 27134
// continue ;
27132: GO 27090
// PrepareHuman ( false , i , skill ) ;
27134: LD_INT 0
27136: PPUSH
27137: LD_VAR 0 8
27141: PPUSH
27142: LD_VAR 0 4
27146: PPUSH
27147: CALL_OW 380
// un := CreateHuman ;
27151: LD_ADDR_VAR 0 14
27155: PUSH
27156: CALL_OW 44
27160: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27161: LD_VAR 0 14
27165: PPUSH
27166: LD_VAR 0 1
27170: PPUSH
27171: CALL_OW 250
27175: PPUSH
27176: LD_VAR 0 1
27180: PPUSH
27181: CALL_OW 251
27185: PPUSH
27186: LD_INT 10
27188: PPUSH
27189: LD_INT 0
27191: PPUSH
27192: CALL_OW 50
// result := result ^ un ;
27196: LD_ADDR_VAR 0 7
27200: PUSH
27201: LD_VAR 0 7
27205: PUSH
27206: LD_VAR 0 14
27210: ADD
27211: ST_TO_ADDR
// end ;
27212: GO 27090
27214: POP
27215: POP
// end ; end ;
27216: LD_VAR 0 7
27220: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27221: LD_INT 0
27223: PPUSH
27224: PPUSH
27225: PPUSH
27226: PPUSH
27227: PPUSH
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
27235: PPUSH
27236: PPUSH
27237: PPUSH
27238: PPUSH
// result := false ;
27239: LD_ADDR_VAR 0 3
27243: PUSH
27244: LD_INT 0
27246: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27247: LD_VAR 0 1
27251: NOT
27252: PUSH
27253: LD_VAR 0 1
27257: PPUSH
27258: CALL_OW 266
27262: PUSH
27263: LD_INT 32
27265: PUSH
27266: LD_INT 33
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: IN
27273: NOT
27274: OR
27275: IFFALSE 27279
// exit ;
27277: GO 28415
// nat := GetNation ( tower ) ;
27279: LD_ADDR_VAR 0 12
27283: PUSH
27284: LD_VAR 0 1
27288: PPUSH
27289: CALL_OW 248
27293: ST_TO_ADDR
// side := GetSide ( tower ) ;
27294: LD_ADDR_VAR 0 16
27298: PUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 255
27308: ST_TO_ADDR
// x := GetX ( tower ) ;
27309: LD_ADDR_VAR 0 10
27313: PUSH
27314: LD_VAR 0 1
27318: PPUSH
27319: CALL_OW 250
27323: ST_TO_ADDR
// y := GetY ( tower ) ;
27324: LD_ADDR_VAR 0 11
27328: PUSH
27329: LD_VAR 0 1
27333: PPUSH
27334: CALL_OW 251
27338: ST_TO_ADDR
// if not x or not y then
27339: LD_VAR 0 10
27343: NOT
27344: PUSH
27345: LD_VAR 0 11
27349: NOT
27350: OR
27351: IFFALSE 27355
// exit ;
27353: GO 28415
// weapon := 0 ;
27355: LD_ADDR_VAR 0 18
27359: PUSH
27360: LD_INT 0
27362: ST_TO_ADDR
// fac_list := [ ] ;
27363: LD_ADDR_VAR 0 17
27367: PUSH
27368: EMPTY
27369: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
27370: LD_ADDR_VAR 0 6
27374: PUSH
27375: LD_VAR 0 1
27379: PPUSH
27380: CALL_OW 274
27384: PPUSH
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL 24993 0 2
27394: PPUSH
27395: LD_INT 30
27397: PUSH
27398: LD_INT 3
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PPUSH
27405: CALL_OW 72
27409: ST_TO_ADDR
// if not factories then
27410: LD_VAR 0 6
27414: NOT
27415: IFFALSE 27419
// exit ;
27417: GO 28415
// for i in factories do
27419: LD_ADDR_VAR 0 8
27423: PUSH
27424: LD_VAR 0 6
27428: PUSH
27429: FOR_IN
27430: IFFALSE 27455
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27432: LD_ADDR_VAR 0 17
27436: PUSH
27437: LD_VAR 0 17
27441: PUSH
27442: LD_VAR 0 8
27446: PPUSH
27447: CALL_OW 478
27451: UNION
27452: ST_TO_ADDR
27453: GO 27429
27455: POP
27456: POP
// if not fac_list then
27457: LD_VAR 0 17
27461: NOT
27462: IFFALSE 27466
// exit ;
27464: GO 28415
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27466: LD_ADDR_VAR 0 5
27470: PUSH
27471: LD_INT 4
27473: PUSH
27474: LD_INT 5
27476: PUSH
27477: LD_INT 9
27479: PUSH
27480: LD_INT 10
27482: PUSH
27483: LD_INT 6
27485: PUSH
27486: LD_INT 7
27488: PUSH
27489: LD_INT 11
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 27
27503: PUSH
27504: LD_INT 28
27506: PUSH
27507: LD_INT 26
27509: PUSH
27510: LD_INT 30
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 43
27521: PUSH
27522: LD_INT 44
27524: PUSH
27525: LD_INT 46
27527: PUSH
27528: LD_INT 45
27530: PUSH
27531: LD_INT 47
27533: PUSH
27534: LD_INT 49
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: PUSH
27550: LD_VAR 0 12
27554: ARRAY
27555: ST_TO_ADDR
// for i in list do
27556: LD_ADDR_VAR 0 8
27560: PUSH
27561: LD_VAR 0 5
27565: PUSH
27566: FOR_IN
27567: IFFALSE 27600
// if not i in fac_list then
27569: LD_VAR 0 8
27573: PUSH
27574: LD_VAR 0 17
27578: IN
27579: NOT
27580: IFFALSE 27598
// list := list diff i ;
27582: LD_ADDR_VAR 0 5
27586: PUSH
27587: LD_VAR 0 5
27591: PUSH
27592: LD_VAR 0 8
27596: DIFF
27597: ST_TO_ADDR
27598: GO 27566
27600: POP
27601: POP
// if not list then
27602: LD_VAR 0 5
27606: NOT
27607: IFFALSE 27611
// exit ;
27609: GO 28415
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27611: LD_VAR 0 12
27615: PUSH
27616: LD_INT 3
27618: EQUAL
27619: PUSH
27620: LD_INT 49
27622: PUSH
27623: LD_VAR 0 5
27627: IN
27628: AND
27629: PUSH
27630: LD_INT 31
27632: PPUSH
27633: LD_VAR 0 16
27637: PPUSH
27638: CALL_OW 321
27642: PUSH
27643: LD_INT 2
27645: EQUAL
27646: AND
27647: IFFALSE 27707
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27649: LD_INT 22
27651: PUSH
27652: LD_VAR 0 16
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 35
27663: PUSH
27664: LD_INT 49
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 91
27673: PUSH
27674: LD_VAR 0 1
27678: PUSH
27679: LD_INT 10
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: PPUSH
27692: CALL_OW 69
27696: NOT
27697: IFFALSE 27707
// weapon := ru_time_lapser ;
27699: LD_ADDR_VAR 0 18
27703: PUSH
27704: LD_INT 49
27706: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27707: LD_VAR 0 12
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 2
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: IN
27722: PUSH
27723: LD_INT 11
27725: PUSH
27726: LD_VAR 0 5
27730: IN
27731: PUSH
27732: LD_INT 30
27734: PUSH
27735: LD_VAR 0 5
27739: IN
27740: OR
27741: AND
27742: PUSH
27743: LD_INT 6
27745: PPUSH
27746: LD_VAR 0 16
27750: PPUSH
27751: CALL_OW 321
27755: PUSH
27756: LD_INT 2
27758: EQUAL
27759: AND
27760: IFFALSE 27925
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27762: LD_INT 22
27764: PUSH
27765: LD_VAR 0 16
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 35
27779: PUSH
27780: LD_INT 11
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 35
27789: PUSH
27790: LD_INT 30
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 91
27804: PUSH
27805: LD_VAR 0 1
27809: PUSH
27810: LD_INT 18
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: PPUSH
27823: CALL_OW 69
27827: NOT
27828: PUSH
27829: LD_INT 22
27831: PUSH
27832: LD_VAR 0 16
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 30
27846: PUSH
27847: LD_INT 32
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 30
27856: PUSH
27857: LD_INT 33
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 91
27871: PUSH
27872: LD_VAR 0 1
27876: PUSH
27877: LD_INT 12
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: LIST
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: LIST
27889: PUSH
27890: EMPTY
27891: LIST
27892: PPUSH
27893: CALL_OW 69
27897: PUSH
27898: LD_INT 2
27900: GREATER
27901: AND
27902: IFFALSE 27925
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27904: LD_ADDR_VAR 0 18
27908: PUSH
27909: LD_INT 11
27911: PUSH
27912: LD_INT 30
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_VAR 0 12
27923: ARRAY
27924: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27925: LD_VAR 0 18
27929: NOT
27930: PUSH
27931: LD_INT 40
27933: PPUSH
27934: LD_VAR 0 16
27938: PPUSH
27939: CALL_OW 321
27943: PUSH
27944: LD_INT 2
27946: EQUAL
27947: AND
27948: PUSH
27949: LD_INT 7
27951: PUSH
27952: LD_VAR 0 5
27956: IN
27957: PUSH
27958: LD_INT 28
27960: PUSH
27961: LD_VAR 0 5
27965: IN
27966: OR
27967: PUSH
27968: LD_INT 45
27970: PUSH
27971: LD_VAR 0 5
27975: IN
27976: OR
27977: AND
27978: IFFALSE 28232
// begin hex := GetHexInfo ( x , y ) ;
27980: LD_ADDR_VAR 0 4
27984: PUSH
27985: LD_VAR 0 10
27989: PPUSH
27990: LD_VAR 0 11
27994: PPUSH
27995: CALL_OW 546
27999: ST_TO_ADDR
// if hex [ 1 ] then
28000: LD_VAR 0 4
28004: PUSH
28005: LD_INT 1
28007: ARRAY
28008: IFFALSE 28012
// exit ;
28010: GO 28415
// height := hex [ 2 ] ;
28012: LD_ADDR_VAR 0 15
28016: PUSH
28017: LD_VAR 0 4
28021: PUSH
28022: LD_INT 2
28024: ARRAY
28025: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28026: LD_ADDR_VAR 0 14
28030: PUSH
28031: LD_INT 0
28033: PUSH
28034: LD_INT 2
28036: PUSH
28037: LD_INT 3
28039: PUSH
28040: LD_INT 5
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
// for i in tmp do
28049: LD_ADDR_VAR 0 8
28053: PUSH
28054: LD_VAR 0 14
28058: PUSH
28059: FOR_IN
28060: IFFALSE 28230
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28062: LD_ADDR_VAR 0 9
28066: PUSH
28067: LD_VAR 0 10
28071: PPUSH
28072: LD_VAR 0 8
28076: PPUSH
28077: LD_INT 5
28079: PPUSH
28080: CALL_OW 272
28084: PUSH
28085: LD_VAR 0 11
28089: PPUSH
28090: LD_VAR 0 8
28094: PPUSH
28095: LD_INT 5
28097: PPUSH
28098: CALL_OW 273
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28107: LD_VAR 0 9
28111: PUSH
28112: LD_INT 1
28114: ARRAY
28115: PPUSH
28116: LD_VAR 0 9
28120: PUSH
28121: LD_INT 2
28123: ARRAY
28124: PPUSH
28125: CALL_OW 488
28129: IFFALSE 28228
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28131: LD_ADDR_VAR 0 4
28135: PUSH
28136: LD_VAR 0 9
28140: PUSH
28141: LD_INT 1
28143: ARRAY
28144: PPUSH
28145: LD_VAR 0 9
28149: PUSH
28150: LD_INT 2
28152: ARRAY
28153: PPUSH
28154: CALL_OW 546
28158: ST_TO_ADDR
// if hex [ 1 ] then
28159: LD_VAR 0 4
28163: PUSH
28164: LD_INT 1
28166: ARRAY
28167: IFFALSE 28171
// continue ;
28169: GO 28059
// h := hex [ 2 ] ;
28171: LD_ADDR_VAR 0 13
28175: PUSH
28176: LD_VAR 0 4
28180: PUSH
28181: LD_INT 2
28183: ARRAY
28184: ST_TO_ADDR
// if h + 7 < height then
28185: LD_VAR 0 13
28189: PUSH
28190: LD_INT 7
28192: PLUS
28193: PUSH
28194: LD_VAR 0 15
28198: LESS
28199: IFFALSE 28228
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28201: LD_ADDR_VAR 0 18
28205: PUSH
28206: LD_INT 7
28208: PUSH
28209: LD_INT 28
28211: PUSH
28212: LD_INT 45
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: PUSH
28220: LD_VAR 0 12
28224: ARRAY
28225: ST_TO_ADDR
// break ;
28226: GO 28230
// end ; end ; end ;
28228: GO 28059
28230: POP
28231: POP
// end ; if not weapon then
28232: LD_VAR 0 18
28236: NOT
28237: IFFALSE 28297
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28239: LD_ADDR_VAR 0 5
28243: PUSH
28244: LD_VAR 0 5
28248: PUSH
28249: LD_INT 11
28251: PUSH
28252: LD_INT 30
28254: PUSH
28255: LD_INT 49
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: DIFF
28263: ST_TO_ADDR
// if not list then
28264: LD_VAR 0 5
28268: NOT
28269: IFFALSE 28273
// exit ;
28271: GO 28415
// weapon := list [ rand ( 1 , list ) ] ;
28273: LD_ADDR_VAR 0 18
28277: PUSH
28278: LD_VAR 0 5
28282: PUSH
28283: LD_INT 1
28285: PPUSH
28286: LD_VAR 0 5
28290: PPUSH
28291: CALL_OW 12
28295: ARRAY
28296: ST_TO_ADDR
// end ; if weapon then
28297: LD_VAR 0 18
28301: IFFALSE 28415
// begin tmp := CostOfWeapon ( weapon ) ;
28303: LD_ADDR_VAR 0 14
28307: PUSH
28308: LD_VAR 0 18
28312: PPUSH
28313: CALL_OW 451
28317: ST_TO_ADDR
// j := GetBase ( tower ) ;
28318: LD_ADDR_VAR 0 9
28322: PUSH
28323: LD_VAR 0 1
28327: PPUSH
28328: CALL_OW 274
28332: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28333: LD_VAR 0 9
28337: PPUSH
28338: LD_INT 1
28340: PPUSH
28341: CALL_OW 275
28345: PUSH
28346: LD_VAR 0 14
28350: PUSH
28351: LD_INT 1
28353: ARRAY
28354: GREATEREQUAL
28355: PUSH
28356: LD_VAR 0 9
28360: PPUSH
28361: LD_INT 2
28363: PPUSH
28364: CALL_OW 275
28368: PUSH
28369: LD_VAR 0 14
28373: PUSH
28374: LD_INT 2
28376: ARRAY
28377: GREATEREQUAL
28378: AND
28379: PUSH
28380: LD_VAR 0 9
28384: PPUSH
28385: LD_INT 3
28387: PPUSH
28388: CALL_OW 275
28392: PUSH
28393: LD_VAR 0 14
28397: PUSH
28398: LD_INT 3
28400: ARRAY
28401: GREATEREQUAL
28402: AND
28403: IFFALSE 28415
// result := weapon ;
28405: LD_ADDR_VAR 0 3
28409: PUSH
28410: LD_VAR 0 18
28414: ST_TO_ADDR
// end ; end ;
28415: LD_VAR 0 3
28419: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28420: LD_INT 0
28422: PPUSH
28423: PPUSH
// result := true ;
28424: LD_ADDR_VAR 0 3
28428: PUSH
28429: LD_INT 1
28431: ST_TO_ADDR
// if array1 = array2 then
28432: LD_VAR 0 1
28436: PUSH
28437: LD_VAR 0 2
28441: EQUAL
28442: IFFALSE 28502
// begin for i = 1 to array1 do
28444: LD_ADDR_VAR 0 4
28448: PUSH
28449: DOUBLE
28450: LD_INT 1
28452: DEC
28453: ST_TO_ADDR
28454: LD_VAR 0 1
28458: PUSH
28459: FOR_TO
28460: IFFALSE 28498
// if array1 [ i ] <> array2 [ i ] then
28462: LD_VAR 0 1
28466: PUSH
28467: LD_VAR 0 4
28471: ARRAY
28472: PUSH
28473: LD_VAR 0 2
28477: PUSH
28478: LD_VAR 0 4
28482: ARRAY
28483: NONEQUAL
28484: IFFALSE 28496
// begin result := false ;
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_INT 0
28493: ST_TO_ADDR
// break ;
28494: GO 28498
// end ;
28496: GO 28459
28498: POP
28499: POP
// end else
28500: GO 28510
// result := false ;
28502: LD_ADDR_VAR 0 3
28506: PUSH
28507: LD_INT 0
28509: ST_TO_ADDR
// end ;
28510: LD_VAR 0 3
28514: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28515: LD_INT 0
28517: PPUSH
28518: PPUSH
28519: PPUSH
// pom := GetBase ( fac ) ;
28520: LD_ADDR_VAR 0 5
28524: PUSH
28525: LD_VAR 0 1
28529: PPUSH
28530: CALL_OW 274
28534: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28535: LD_ADDR_VAR 0 4
28539: PUSH
28540: LD_VAR 0 2
28544: PUSH
28545: LD_INT 1
28547: ARRAY
28548: PPUSH
28549: LD_VAR 0 2
28553: PUSH
28554: LD_INT 2
28556: ARRAY
28557: PPUSH
28558: LD_VAR 0 2
28562: PUSH
28563: LD_INT 3
28565: ARRAY
28566: PPUSH
28567: LD_VAR 0 2
28571: PUSH
28572: LD_INT 4
28574: ARRAY
28575: PPUSH
28576: CALL_OW 449
28580: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28581: LD_ADDR_VAR 0 3
28585: PUSH
28586: LD_VAR 0 5
28590: PPUSH
28591: LD_INT 1
28593: PPUSH
28594: CALL_OW 275
28598: PUSH
28599: LD_VAR 0 4
28603: PUSH
28604: LD_INT 1
28606: ARRAY
28607: GREATEREQUAL
28608: PUSH
28609: LD_VAR 0 5
28613: PPUSH
28614: LD_INT 2
28616: PPUSH
28617: CALL_OW 275
28621: PUSH
28622: LD_VAR 0 4
28626: PUSH
28627: LD_INT 2
28629: ARRAY
28630: GREATEREQUAL
28631: AND
28632: PUSH
28633: LD_VAR 0 5
28637: PPUSH
28638: LD_INT 3
28640: PPUSH
28641: CALL_OW 275
28645: PUSH
28646: LD_VAR 0 4
28650: PUSH
28651: LD_INT 3
28653: ARRAY
28654: GREATEREQUAL
28655: AND
28656: ST_TO_ADDR
// end ;
28657: LD_VAR 0 3
28661: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28662: LD_INT 0
28664: PPUSH
28665: PPUSH
28666: PPUSH
28667: PPUSH
// pom := GetBase ( building ) ;
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_VAR 0 1
28677: PPUSH
28678: CALL_OW 274
28682: ST_TO_ADDR
// if not pom then
28683: LD_VAR 0 3
28687: NOT
28688: IFFALSE 28692
// exit ;
28690: GO 28862
// btype := GetBType ( building ) ;
28692: LD_ADDR_VAR 0 5
28696: PUSH
28697: LD_VAR 0 1
28701: PPUSH
28702: CALL_OW 266
28706: ST_TO_ADDR
// if btype = b_armoury then
28707: LD_VAR 0 5
28711: PUSH
28712: LD_INT 4
28714: EQUAL
28715: IFFALSE 28725
// btype := b_barracks ;
28717: LD_ADDR_VAR 0 5
28721: PUSH
28722: LD_INT 5
28724: ST_TO_ADDR
// if btype = b_depot then
28725: LD_VAR 0 5
28729: PUSH
28730: LD_INT 0
28732: EQUAL
28733: IFFALSE 28743
// btype := b_warehouse ;
28735: LD_ADDR_VAR 0 5
28739: PUSH
28740: LD_INT 1
28742: ST_TO_ADDR
// if btype = b_workshop then
28743: LD_VAR 0 5
28747: PUSH
28748: LD_INT 2
28750: EQUAL
28751: IFFALSE 28761
// btype := b_factory ;
28753: LD_ADDR_VAR 0 5
28757: PUSH
28758: LD_INT 3
28760: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28761: LD_ADDR_VAR 0 4
28765: PUSH
28766: LD_VAR 0 5
28770: PPUSH
28771: LD_VAR 0 1
28775: PPUSH
28776: CALL_OW 248
28780: PPUSH
28781: CALL_OW 450
28785: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28786: LD_ADDR_VAR 0 2
28790: PUSH
28791: LD_VAR 0 3
28795: PPUSH
28796: LD_INT 1
28798: PPUSH
28799: CALL_OW 275
28803: PUSH
28804: LD_VAR 0 4
28808: PUSH
28809: LD_INT 1
28811: ARRAY
28812: GREATEREQUAL
28813: PUSH
28814: LD_VAR 0 3
28818: PPUSH
28819: LD_INT 2
28821: PPUSH
28822: CALL_OW 275
28826: PUSH
28827: LD_VAR 0 4
28831: PUSH
28832: LD_INT 2
28834: ARRAY
28835: GREATEREQUAL
28836: AND
28837: PUSH
28838: LD_VAR 0 3
28842: PPUSH
28843: LD_INT 3
28845: PPUSH
28846: CALL_OW 275
28850: PUSH
28851: LD_VAR 0 4
28855: PUSH
28856: LD_INT 3
28858: ARRAY
28859: GREATEREQUAL
28860: AND
28861: ST_TO_ADDR
// end ;
28862: LD_VAR 0 2
28866: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28867: LD_INT 0
28869: PPUSH
28870: PPUSH
28871: PPUSH
// pom := GetBase ( building ) ;
28872: LD_ADDR_VAR 0 4
28876: PUSH
28877: LD_VAR 0 1
28881: PPUSH
28882: CALL_OW 274
28886: ST_TO_ADDR
// if not pom then
28887: LD_VAR 0 4
28891: NOT
28892: IFFALSE 28896
// exit ;
28894: GO 28997
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28896: LD_ADDR_VAR 0 5
28900: PUSH
28901: LD_VAR 0 2
28905: PPUSH
28906: LD_VAR 0 1
28910: PPUSH
28911: CALL_OW 248
28915: PPUSH
28916: CALL_OW 450
28920: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28921: LD_ADDR_VAR 0 3
28925: PUSH
28926: LD_VAR 0 4
28930: PPUSH
28931: LD_INT 1
28933: PPUSH
28934: CALL_OW 275
28938: PUSH
28939: LD_VAR 0 5
28943: PUSH
28944: LD_INT 1
28946: ARRAY
28947: GREATEREQUAL
28948: PUSH
28949: LD_VAR 0 4
28953: PPUSH
28954: LD_INT 2
28956: PPUSH
28957: CALL_OW 275
28961: PUSH
28962: LD_VAR 0 5
28966: PUSH
28967: LD_INT 2
28969: ARRAY
28970: GREATEREQUAL
28971: AND
28972: PUSH
28973: LD_VAR 0 4
28977: PPUSH
28978: LD_INT 3
28980: PPUSH
28981: CALL_OW 275
28985: PUSH
28986: LD_VAR 0 5
28990: PUSH
28991: LD_INT 3
28993: ARRAY
28994: GREATEREQUAL
28995: AND
28996: ST_TO_ADDR
// end ;
28997: LD_VAR 0 3
29001: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
29002: LD_INT 0
29004: PPUSH
29005: PPUSH
29006: PPUSH
29007: PPUSH
29008: PPUSH
29009: PPUSH
29010: PPUSH
29011: PPUSH
29012: PPUSH
29013: PPUSH
// result := false ;
29014: LD_ADDR_VAR 0 6
29018: PUSH
29019: LD_INT 0
29021: ST_TO_ADDR
// if not base or not btype or not x or not y then
29022: LD_VAR 0 1
29026: NOT
29027: PUSH
29028: LD_VAR 0 2
29032: NOT
29033: OR
29034: PUSH
29035: LD_VAR 0 3
29039: NOT
29040: OR
29041: PUSH
29042: LD_VAR 0 4
29046: NOT
29047: OR
29048: IFFALSE 29052
// exit ;
29050: GO 29661
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
29052: LD_ADDR_VAR 0 12
29056: PUSH
29057: LD_VAR 0 2
29061: PPUSH
29062: LD_VAR 0 3
29066: PPUSH
29067: LD_VAR 0 4
29071: PPUSH
29072: LD_VAR 0 5
29076: PPUSH
29077: LD_VAR 0 1
29081: PUSH
29082: LD_INT 1
29084: ARRAY
29085: PPUSH
29086: CALL_OW 248
29090: PPUSH
29091: LD_INT 0
29093: PPUSH
29094: CALL 30498 0 6
29098: ST_TO_ADDR
// if not hexes then
29099: LD_VAR 0 12
29103: NOT
29104: IFFALSE 29108
// exit ;
29106: GO 29661
// for i = 1 to hexes do
29108: LD_ADDR_VAR 0 7
29112: PUSH
29113: DOUBLE
29114: LD_INT 1
29116: DEC
29117: ST_TO_ADDR
29118: LD_VAR 0 12
29122: PUSH
29123: FOR_TO
29124: IFFALSE 29659
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29126: LD_ADDR_VAR 0 11
29130: PUSH
29131: LD_VAR 0 12
29135: PUSH
29136: LD_VAR 0 7
29140: ARRAY
29141: PUSH
29142: LD_INT 1
29144: ARRAY
29145: PPUSH
29146: LD_VAR 0 12
29150: PUSH
29151: LD_VAR 0 7
29155: ARRAY
29156: PUSH
29157: LD_INT 2
29159: ARRAY
29160: PPUSH
29161: CALL_OW 428
29165: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29166: LD_VAR 0 12
29170: PUSH
29171: LD_VAR 0 7
29175: ARRAY
29176: PUSH
29177: LD_INT 1
29179: ARRAY
29180: PPUSH
29181: LD_VAR 0 12
29185: PUSH
29186: LD_VAR 0 7
29190: ARRAY
29191: PUSH
29192: LD_INT 2
29194: ARRAY
29195: PPUSH
29196: CALL_OW 351
29200: PUSH
29201: LD_VAR 0 12
29205: PUSH
29206: LD_VAR 0 7
29210: ARRAY
29211: PUSH
29212: LD_INT 1
29214: ARRAY
29215: PPUSH
29216: LD_VAR 0 12
29220: PUSH
29221: LD_VAR 0 7
29225: ARRAY
29226: PUSH
29227: LD_INT 2
29229: ARRAY
29230: PPUSH
29231: CALL_OW 488
29235: NOT
29236: OR
29237: PUSH
29238: LD_VAR 0 11
29242: PPUSH
29243: CALL_OW 247
29247: PUSH
29248: LD_INT 3
29250: EQUAL
29251: OR
29252: IFFALSE 29258
// exit ;
29254: POP
29255: POP
29256: GO 29661
// if not tmp or not tmp in base then
29258: LD_VAR 0 11
29262: NOT
29263: PUSH
29264: LD_VAR 0 11
29268: PUSH
29269: LD_VAR 0 1
29273: IN
29274: NOT
29275: OR
29276: IFFALSE 29280
// continue ;
29278: GO 29123
// result := true ;
29280: LD_ADDR_VAR 0 6
29284: PUSH
29285: LD_INT 1
29287: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29288: LD_ADDR_VAR 0 15
29292: PUSH
29293: LD_VAR 0 1
29297: PPUSH
29298: LD_INT 22
29300: PUSH
29301: LD_VAR 0 11
29305: PPUSH
29306: CALL_OW 255
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 2
29317: PUSH
29318: LD_INT 30
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 30
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PPUSH
29347: CALL_OW 72
29351: ST_TO_ADDR
// if dep then
29352: LD_VAR 0 15
29356: IFFALSE 29492
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29358: LD_ADDR_VAR 0 14
29362: PUSH
29363: LD_VAR 0 15
29367: PUSH
29368: LD_INT 1
29370: ARRAY
29371: PPUSH
29372: CALL_OW 250
29376: PPUSH
29377: LD_VAR 0 15
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: PPUSH
29386: CALL_OW 254
29390: PPUSH
29391: LD_INT 5
29393: PPUSH
29394: CALL_OW 272
29398: PUSH
29399: LD_VAR 0 15
29403: PUSH
29404: LD_INT 1
29406: ARRAY
29407: PPUSH
29408: CALL_OW 251
29412: PPUSH
29413: LD_VAR 0 15
29417: PUSH
29418: LD_INT 1
29420: ARRAY
29421: PPUSH
29422: CALL_OW 254
29426: PPUSH
29427: LD_INT 5
29429: PPUSH
29430: CALL_OW 273
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29439: LD_VAR 0 14
29443: PUSH
29444: LD_INT 1
29446: ARRAY
29447: PPUSH
29448: LD_VAR 0 14
29452: PUSH
29453: LD_INT 2
29455: ARRAY
29456: PPUSH
29457: CALL_OW 488
29461: IFFALSE 29492
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29463: LD_VAR 0 11
29467: PPUSH
29468: LD_VAR 0 14
29472: PUSH
29473: LD_INT 1
29475: ARRAY
29476: PPUSH
29477: LD_VAR 0 14
29481: PUSH
29482: LD_INT 2
29484: ARRAY
29485: PPUSH
29486: CALL_OW 111
// continue ;
29490: GO 29123
// end ; end ; r := GetDir ( tmp ) ;
29492: LD_ADDR_VAR 0 13
29496: PUSH
29497: LD_VAR 0 11
29501: PPUSH
29502: CALL_OW 254
29506: ST_TO_ADDR
// if r = 5 then
29507: LD_VAR 0 13
29511: PUSH
29512: LD_INT 5
29514: EQUAL
29515: IFFALSE 29525
// r := 0 ;
29517: LD_ADDR_VAR 0 13
29521: PUSH
29522: LD_INT 0
29524: ST_TO_ADDR
// for j = r to 5 do
29525: LD_ADDR_VAR 0 8
29529: PUSH
29530: DOUBLE
29531: LD_VAR 0 13
29535: DEC
29536: ST_TO_ADDR
29537: LD_INT 5
29539: PUSH
29540: FOR_TO
29541: IFFALSE 29655
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29543: LD_ADDR_VAR 0 9
29547: PUSH
29548: LD_VAR 0 11
29552: PPUSH
29553: CALL_OW 250
29557: PPUSH
29558: LD_VAR 0 8
29562: PPUSH
29563: LD_INT 2
29565: PPUSH
29566: CALL_OW 272
29570: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29571: LD_ADDR_VAR 0 10
29575: PUSH
29576: LD_VAR 0 11
29580: PPUSH
29581: CALL_OW 251
29585: PPUSH
29586: LD_VAR 0 8
29590: PPUSH
29591: LD_INT 2
29593: PPUSH
29594: CALL_OW 273
29598: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29599: LD_VAR 0 9
29603: PPUSH
29604: LD_VAR 0 10
29608: PPUSH
29609: CALL_OW 488
29613: PUSH
29614: LD_VAR 0 9
29618: PPUSH
29619: LD_VAR 0 10
29623: PPUSH
29624: CALL_OW 428
29628: NOT
29629: AND
29630: IFFALSE 29653
// begin ComMoveXY ( tmp , _x , _y ) ;
29632: LD_VAR 0 11
29636: PPUSH
29637: LD_VAR 0 9
29641: PPUSH
29642: LD_VAR 0 10
29646: PPUSH
29647: CALL_OW 111
// break ;
29651: GO 29655
// end ; end ;
29653: GO 29540
29655: POP
29656: POP
// end ;
29657: GO 29123
29659: POP
29660: POP
// end ;
29661: LD_VAR 0 6
29665: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
29666: LD_INT 0
29668: PPUSH
29669: PPUSH
29670: PPUSH
29671: PPUSH
29672: PPUSH
29673: PPUSH
29674: PPUSH
29675: PPUSH
29676: PPUSH
29677: PPUSH
// result := false ;
29678: LD_ADDR_VAR 0 6
29682: PUSH
29683: LD_INT 0
29685: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29686: LD_VAR 0 1
29690: NOT
29691: PUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 266
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: IN
29712: NOT
29713: OR
29714: PUSH
29715: LD_VAR 0 2
29719: NOT
29720: OR
29721: PUSH
29722: LD_VAR 0 5
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: LD_INT 4
29741: PUSH
29742: LD_INT 5
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: IN
29753: NOT
29754: OR
29755: PUSH
29756: LD_VAR 0 3
29760: PPUSH
29761: LD_VAR 0 4
29765: PPUSH
29766: CALL_OW 488
29770: NOT
29771: OR
29772: IFFALSE 29776
// exit ;
29774: GO 30493
// pom := GetBase ( depot ) ;
29776: LD_ADDR_VAR 0 10
29780: PUSH
29781: LD_VAR 0 1
29785: PPUSH
29786: CALL_OW 274
29790: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29791: LD_ADDR_VAR 0 11
29795: PUSH
29796: LD_VAR 0 2
29800: PPUSH
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 248
29810: PPUSH
29811: CALL_OW 450
29815: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29816: LD_VAR 0 10
29820: PPUSH
29821: LD_INT 1
29823: PPUSH
29824: CALL_OW 275
29828: PUSH
29829: LD_VAR 0 11
29833: PUSH
29834: LD_INT 1
29836: ARRAY
29837: GREATEREQUAL
29838: PUSH
29839: LD_VAR 0 10
29843: PPUSH
29844: LD_INT 2
29846: PPUSH
29847: CALL_OW 275
29851: PUSH
29852: LD_VAR 0 11
29856: PUSH
29857: LD_INT 2
29859: ARRAY
29860: GREATEREQUAL
29861: AND
29862: PUSH
29863: LD_VAR 0 10
29867: PPUSH
29868: LD_INT 3
29870: PPUSH
29871: CALL_OW 275
29875: PUSH
29876: LD_VAR 0 11
29880: PUSH
29881: LD_INT 3
29883: ARRAY
29884: GREATEREQUAL
29885: AND
29886: NOT
29887: IFFALSE 29891
// exit ;
29889: GO 30493
// if GetBType ( depot ) = b_depot then
29891: LD_VAR 0 1
29895: PPUSH
29896: CALL_OW 266
29900: PUSH
29901: LD_INT 0
29903: EQUAL
29904: IFFALSE 29916
// dist := 28 else
29906: LD_ADDR_VAR 0 14
29910: PUSH
29911: LD_INT 28
29913: ST_TO_ADDR
29914: GO 29924
// dist := 36 ;
29916: LD_ADDR_VAR 0 14
29920: PUSH
29921: LD_INT 36
29923: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29924: LD_VAR 0 1
29928: PPUSH
29929: LD_VAR 0 3
29933: PPUSH
29934: LD_VAR 0 4
29938: PPUSH
29939: CALL_OW 297
29943: PUSH
29944: LD_VAR 0 14
29948: GREATER
29949: IFFALSE 29953
// exit ;
29951: GO 30493
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29953: LD_ADDR_VAR 0 12
29957: PUSH
29958: LD_VAR 0 2
29962: PPUSH
29963: LD_VAR 0 3
29967: PPUSH
29968: LD_VAR 0 4
29972: PPUSH
29973: LD_VAR 0 5
29977: PPUSH
29978: LD_VAR 0 1
29982: PPUSH
29983: CALL_OW 248
29987: PPUSH
29988: LD_INT 0
29990: PPUSH
29991: CALL 30498 0 6
29995: ST_TO_ADDR
// if not hexes then
29996: LD_VAR 0 12
30000: NOT
30001: IFFALSE 30005
// exit ;
30003: GO 30493
// hex := GetHexInfo ( x , y ) ;
30005: LD_ADDR_VAR 0 15
30009: PUSH
30010: LD_VAR 0 3
30014: PPUSH
30015: LD_VAR 0 4
30019: PPUSH
30020: CALL_OW 546
30024: ST_TO_ADDR
// if hex [ 1 ] then
30025: LD_VAR 0 15
30029: PUSH
30030: LD_INT 1
30032: ARRAY
30033: IFFALSE 30037
// exit ;
30035: GO 30493
// height := hex [ 2 ] ;
30037: LD_ADDR_VAR 0 13
30041: PUSH
30042: LD_VAR 0 15
30046: PUSH
30047: LD_INT 2
30049: ARRAY
30050: ST_TO_ADDR
// for i = 1 to hexes do
30051: LD_ADDR_VAR 0 7
30055: PUSH
30056: DOUBLE
30057: LD_INT 1
30059: DEC
30060: ST_TO_ADDR
30061: LD_VAR 0 12
30065: PUSH
30066: FOR_TO
30067: IFFALSE 30397
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30069: LD_VAR 0 12
30073: PUSH
30074: LD_VAR 0 7
30078: ARRAY
30079: PUSH
30080: LD_INT 1
30082: ARRAY
30083: PPUSH
30084: LD_VAR 0 12
30088: PUSH
30089: LD_VAR 0 7
30093: ARRAY
30094: PUSH
30095: LD_INT 2
30097: ARRAY
30098: PPUSH
30099: CALL_OW 488
30103: NOT
30104: PUSH
30105: LD_VAR 0 12
30109: PUSH
30110: LD_VAR 0 7
30114: ARRAY
30115: PUSH
30116: LD_INT 1
30118: ARRAY
30119: PPUSH
30120: LD_VAR 0 12
30124: PUSH
30125: LD_VAR 0 7
30129: ARRAY
30130: PUSH
30131: LD_INT 2
30133: ARRAY
30134: PPUSH
30135: CALL_OW 428
30139: PUSH
30140: LD_INT 0
30142: GREATER
30143: OR
30144: PUSH
30145: LD_VAR 0 12
30149: PUSH
30150: LD_VAR 0 7
30154: ARRAY
30155: PUSH
30156: LD_INT 1
30158: ARRAY
30159: PPUSH
30160: LD_VAR 0 12
30164: PUSH
30165: LD_VAR 0 7
30169: ARRAY
30170: PUSH
30171: LD_INT 2
30173: ARRAY
30174: PPUSH
30175: CALL_OW 351
30179: OR
30180: IFFALSE 30186
// exit ;
30182: POP
30183: POP
30184: GO 30493
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30186: LD_ADDR_VAR 0 8
30190: PUSH
30191: LD_VAR 0 12
30195: PUSH
30196: LD_VAR 0 7
30200: ARRAY
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: PPUSH
30206: LD_VAR 0 12
30210: PUSH
30211: LD_VAR 0 7
30215: ARRAY
30216: PUSH
30217: LD_INT 2
30219: ARRAY
30220: PPUSH
30221: CALL_OW 546
30225: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30226: LD_VAR 0 8
30230: PUSH
30231: LD_INT 1
30233: ARRAY
30234: PUSH
30235: LD_VAR 0 8
30239: PUSH
30240: LD_INT 2
30242: ARRAY
30243: PUSH
30244: LD_VAR 0 13
30248: PUSH
30249: LD_INT 2
30251: PLUS
30252: GREATER
30253: OR
30254: PUSH
30255: LD_VAR 0 8
30259: PUSH
30260: LD_INT 2
30262: ARRAY
30263: PUSH
30264: LD_VAR 0 13
30268: PUSH
30269: LD_INT 2
30271: MINUS
30272: LESS
30273: OR
30274: PUSH
30275: LD_VAR 0 8
30279: PUSH
30280: LD_INT 3
30282: ARRAY
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 8
30289: PUSH
30290: LD_INT 9
30292: PUSH
30293: LD_INT 10
30295: PUSH
30296: LD_INT 11
30298: PUSH
30299: LD_INT 12
30301: PUSH
30302: LD_INT 13
30304: PUSH
30305: LD_INT 16
30307: PUSH
30308: LD_INT 17
30310: PUSH
30311: LD_INT 18
30313: PUSH
30314: LD_INT 19
30316: PUSH
30317: LD_INT 20
30319: PUSH
30320: LD_INT 21
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: IN
30338: NOT
30339: OR
30340: PUSH
30341: LD_VAR 0 8
30345: PUSH
30346: LD_INT 5
30348: ARRAY
30349: NOT
30350: OR
30351: PUSH
30352: LD_VAR 0 8
30356: PUSH
30357: LD_INT 6
30359: ARRAY
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: LD_INT 2
30366: PUSH
30367: LD_INT 7
30369: PUSH
30370: LD_INT 9
30372: PUSH
30373: LD_INT 10
30375: PUSH
30376: LD_INT 11
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: IN
30387: NOT
30388: OR
30389: IFFALSE 30395
// exit ;
30391: POP
30392: POP
30393: GO 30493
// end ;
30395: GO 30066
30397: POP
30398: POP
// side := GetSide ( depot ) ;
30399: LD_ADDR_VAR 0 9
30403: PUSH
30404: LD_VAR 0 1
30408: PPUSH
30409: CALL_OW 255
30413: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30414: LD_VAR 0 9
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: LD_VAR 0 4
30428: PPUSH
30429: LD_INT 20
30431: PPUSH
30432: CALL 23147 0 4
30436: PUSH
30437: LD_INT 4
30439: ARRAY
30440: IFFALSE 30444
// exit ;
30442: GO 30493
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30444: LD_VAR 0 2
30448: PUSH
30449: LD_INT 29
30451: PUSH
30452: LD_INT 30
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: IN
30459: PUSH
30460: LD_VAR 0 3
30464: PPUSH
30465: LD_VAR 0 4
30469: PPUSH
30470: LD_VAR 0 9
30474: PPUSH
30475: CALL_OW 440
30479: NOT
30480: AND
30481: IFFALSE 30485
// exit ;
30483: GO 30493
// result := true ;
30485: LD_ADDR_VAR 0 6
30489: PUSH
30490: LD_INT 1
30492: ST_TO_ADDR
// end ;
30493: LD_VAR 0 6
30497: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30498: LD_INT 0
30500: PPUSH
30501: PPUSH
30502: PPUSH
30503: PPUSH
30504: PPUSH
30505: PPUSH
30506: PPUSH
30507: PPUSH
30508: PPUSH
30509: PPUSH
30510: PPUSH
30511: PPUSH
30512: PPUSH
30513: PPUSH
30514: PPUSH
30515: PPUSH
30516: PPUSH
30517: PPUSH
30518: PPUSH
30519: PPUSH
30520: PPUSH
30521: PPUSH
30522: PPUSH
30523: PPUSH
30524: PPUSH
30525: PPUSH
30526: PPUSH
30527: PPUSH
30528: PPUSH
30529: PPUSH
30530: PPUSH
30531: PPUSH
30532: PPUSH
30533: PPUSH
30534: PPUSH
30535: PPUSH
30536: PPUSH
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
30550: PPUSH
30551: PPUSH
30552: PPUSH
30553: PPUSH
30554: PPUSH
30555: PPUSH
30556: PPUSH
30557: PPUSH
// result = [ ] ;
30558: LD_ADDR_VAR 0 7
30562: PUSH
30563: EMPTY
30564: ST_TO_ADDR
// temp_list = [ ] ;
30565: LD_ADDR_VAR 0 9
30569: PUSH
30570: EMPTY
30571: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30572: LD_VAR 0 4
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: LD_INT 3
30588: PUSH
30589: LD_INT 4
30591: PUSH
30592: LD_INT 5
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: IN
30603: NOT
30604: PUSH
30605: LD_VAR 0 1
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: IN
30620: PUSH
30621: LD_VAR 0 5
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: IN
30640: NOT
30641: AND
30642: OR
30643: IFFALSE 30647
// exit ;
30645: GO 49038
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30647: LD_VAR 0 1
30651: PUSH
30652: LD_INT 6
30654: PUSH
30655: LD_INT 7
30657: PUSH
30658: LD_INT 8
30660: PUSH
30661: LD_INT 13
30663: PUSH
30664: LD_INT 12
30666: PUSH
30667: LD_INT 15
30669: PUSH
30670: LD_INT 11
30672: PUSH
30673: LD_INT 14
30675: PUSH
30676: LD_INT 10
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: IN
30690: IFFALSE 30700
// btype = b_lab ;
30692: LD_ADDR_VAR 0 1
30696: PUSH
30697: LD_INT 6
30699: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30700: LD_VAR 0 6
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: LD_INT 2
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: IN
30719: NOT
30720: PUSH
30721: LD_VAR 0 1
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: LD_INT 2
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: LD_INT 6
30740: PUSH
30741: LD_INT 36
30743: PUSH
30744: LD_INT 4
30746: PUSH
30747: LD_INT 5
30749: PUSH
30750: LD_INT 31
30752: PUSH
30753: LD_INT 32
30755: PUSH
30756: LD_INT 33
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: IN
30772: NOT
30773: PUSH
30774: LD_VAR 0 6
30778: PUSH
30779: LD_INT 1
30781: EQUAL
30782: AND
30783: OR
30784: PUSH
30785: LD_VAR 0 1
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: IN
30800: NOT
30801: PUSH
30802: LD_VAR 0 6
30806: PUSH
30807: LD_INT 2
30809: EQUAL
30810: AND
30811: OR
30812: IFFALSE 30822
// mode = 0 ;
30814: LD_ADDR_VAR 0 6
30818: PUSH
30819: LD_INT 0
30821: ST_TO_ADDR
// case mode of 0 :
30822: LD_VAR 0 6
30826: PUSH
30827: LD_INT 0
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 42288
30835: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30836: LD_ADDR_VAR 0 11
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: LD_INT 0
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 1
30917: NEG
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: PUSH
30952: LD_INT 2
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31029: LD_ADDR_VAR 0 12
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: LD_INT 1
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: PUSH
31058: LD_INT 0
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: LD_INT 1
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 0
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 2
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 2
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 3
31186: NEG
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 3
31197: NEG
31198: PUSH
31199: LD_INT 1
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31225: LD_ADDR_VAR 0 13
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: LD_INT 0
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: NEG
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: LD_INT 2
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 2
31372: NEG
31373: PUSH
31374: LD_INT 3
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 3
31384: NEG
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 3
31396: NEG
31397: PUSH
31398: LD_INT 3
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31424: LD_ADDR_VAR 0 14
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 1
31482: NEG
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 3
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 3
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31620: LD_ADDR_VAR 0 15
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: NEG
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: LD_INT 1
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 3
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31813: LD_ADDR_VAR 0 16
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 0
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: NEG
31895: PUSH
31896: LD_INT 2
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: NEG
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: LD_INT 2
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 3
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 3
31970: PUSH
31971: LD_INT 3
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 2
31980: PUSH
31981: LD_INT 3
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32006: LD_ADDR_VAR 0 17
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: LD_INT 1
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 1
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: LD_INT 1
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: LD_INT 1
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: LD_INT 2
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 2
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 2
32193: NEG
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 2
32205: NEG
32206: PUSH
32207: LD_INT 2
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32236: LD_ADDR_VAR 0 18
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 1
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: NEG
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: LD_INT 2
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: LD_INT 2
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 2
32412: NEG
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32466: LD_ADDR_VAR 0 19
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: LD_INT 1
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 0
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: LD_INT 0
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: LD_INT 2
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 2
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 2
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 2
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 2
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 2
32642: NEG
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: LD_INT 1
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 2
32665: NEG
32666: PUSH
32667: LD_INT 2
32669: NEG
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32696: LD_ADDR_VAR 0 20
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: LD_INT 0
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 1
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32926: LD_ADDR_VAR 0 21
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PUSH
33009: LD_INT 2
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 2
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 2
33102: NEG
33103: PUSH
33104: LD_INT 0
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: NEG
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 2
33125: NEG
33126: PUSH
33127: LD_INT 2
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33156: LD_ADDR_VAR 0 22
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 2
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 2
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 2
33332: NEG
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: NEG
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33386: LD_ADDR_VAR 0 23
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 1
33444: NEG
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: LD_INT 1
33459: NEG
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: LD_INT 2
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: LD_INT 2
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 2
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 2
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: NEG
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 2
33585: NEG
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 2
33597: NEG
33598: PUSH
33599: LD_INT 3
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 3
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 2
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33666: LD_ADDR_VAR 0 24
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 2
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: LD_INT 1
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 2
33801: PUSH
33802: LD_INT 2
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 2
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: NEG
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 2
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 3
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: PUSH
33910: LD_INT 2
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33942: LD_ADDR_VAR 0 25
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: LD_INT 0
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: LD_INT 2
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 2
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: NEG
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: NEG
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 3
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 3
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34216: LD_ADDR_VAR 0 26
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 0
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: LD_INT 2
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: LD_INT 2
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: LD_INT 3
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: LD_INT 3
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: LD_INT 2
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: LD_INT 1
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34492: LD_ADDR_VAR 0 27
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 2
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: LD_INT 2
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 2
34714: NEG
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 3
34725: NEG
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 3
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34772: LD_ADDR_VAR 0 28
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 0
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 2
34971: NEG
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: LD_INT 3
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: LD_INT 3
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 3
35007: NEG
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 3
35019: NEG
35020: PUSH
35021: LD_INT 2
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35054: LD_ADDR_VAR 0 29
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 2
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: LD_INT 2
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: LD_INT 3
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 3
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 3
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 3
35298: NEG
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35333: LD_ADDR_VAR 0 30
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 2
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: NEG
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: LD_INT 3
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 3
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: LD_INT 3
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 2
35565: NEG
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 3
35576: NEG
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35611: LD_ADDR_VAR 0 31
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: LD_INT 1
35631: NEG
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: LD_INT 2
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: LD_INT 2
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: NEG
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 2
35776: NEG
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 2
35788: NEG
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: LD_INT 3
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 3
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 3
35854: NEG
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35889: LD_ADDR_VAR 0 32
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: LD_INT 2
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: LD_INT 2
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 2
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 2
36055: NEG
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: LD_INT 1
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: LD_INT 3
36082: NEG
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 3
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 3
36132: NEG
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36167: LD_ADDR_VAR 0 33
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: NEG
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 1
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 2
36322: NEG
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 2
36333: NEG
36334: PUSH
36335: LD_INT 1
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: LD_INT 2
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: NEG
36358: PUSH
36359: LD_INT 3
36361: NEG
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 3
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 3
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 3
36411: NEG
36412: PUSH
36413: LD_INT 2
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36446: LD_ADDR_VAR 0 34
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: LD_INT 2
36531: NEG
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 2
36542: NEG
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 1
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 2
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 3
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 3
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 3
36691: NEG
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36726: LD_ADDR_VAR 0 35
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36838: LD_ADDR_VAR 0 36
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: LD_INT 1
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: LD_INT 2
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36950: LD_ADDR_VAR 0 37
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37062: LD_ADDR_VAR 0 38
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 2
37153: NEG
37154: PUSH
37155: LD_INT 1
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37174: LD_ADDR_VAR 0 39
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37286: LD_ADDR_VAR 0 40
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: NEG
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37398: LD_ADDR_VAR 0 41
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: LD_INT 3
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 3
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 3
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 3
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 3
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 2
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 3
37672: NEG
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 3
37683: NEG
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: NEG
37696: PUSH
37697: LD_INT 2
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 3
37707: NEG
37708: PUSH
37709: LD_INT 3
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37748: LD_ADDR_VAR 0 42
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 2
37914: NEG
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: NEG
37939: PUSH
37940: LD_INT 3
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: LD_INT 3
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: LD_INT 3
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: LD_INT 2
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 3
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: LD_INT 3
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 3
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 3
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 3
38045: NEG
38046: PUSH
38047: LD_INT 2
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 3
38057: NEG
38058: PUSH
38059: LD_INT 3
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38098: LD_ADDR_VAR 0 43
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: LD_INT 3
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 3
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 3
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 3
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 3
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: LD_INT 3
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 3
38394: NEG
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 3
38405: NEG
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38446: LD_ADDR_VAR 0 44
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: LD_INT 2
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: NEG
38637: PUSH
38638: LD_INT 3
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 3
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 3
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 3
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: LD_INT 3
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 3
38720: NEG
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 3
38731: NEG
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 3
38743: NEG
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 3
38755: NEG
38756: PUSH
38757: LD_INT 3
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38796: LD_ADDR_VAR 0 45
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 2
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: LD_INT 3
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: LD_INT 3
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 3
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: LD_INT 3
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 3
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 3
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: NEG
39094: PUSH
39095: LD_INT 2
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: LD_INT 3
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39146: LD_ADDR_VAR 0 46
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 3
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 3
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 3
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 3
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: LD_INT 3
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 3
39442: NEG
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 3
39453: NEG
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39494: LD_ADDR_VAR 0 47
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: LD_INT 2
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: LD_INT 2
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39645: LD_ADDR_VAR 0 48
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: LD_INT 2
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 2
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39792: LD_ADDR_VAR 0 49
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39936: LD_ADDR_VAR 0 50
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 2
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40080: LD_ADDR_VAR 0 51
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40227: LD_ADDR_VAR 0 52
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: LD_INT 2
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 2
40331: NEG
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: LD_INT 2
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40378: LD_ADDR_VAR 0 53
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 2
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40608: LD_ADDR_VAR 0 54
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 2
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 2
40784: NEG
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: NEG
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40838: LD_ADDR_VAR 0 55
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 2
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: LD_INT 2
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41068: LD_ADDR_VAR 0 56
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: LD_INT 2
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 2
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: NEG
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 2
41267: NEG
41268: PUSH
41269: LD_INT 2
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41298: LD_ADDR_VAR 0 57
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: LD_INT 2
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41528: LD_ADDR_VAR 0 58
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: LD_INT 0
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: NEG
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41758: LD_ADDR_VAR 0 59
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41846: LD_ADDR_VAR 0 60
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41934: LD_ADDR_VAR 0 61
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42022: LD_ADDR_VAR 0 62
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42110: LD_ADDR_VAR 0 63
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42198: LD_ADDR_VAR 0 64
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: ST_TO_ADDR
// end ; 1 :
42286: GO 48183
42288: LD_INT 1
42290: DOUBLE
42291: EQUAL
42292: IFTRUE 42296
42294: GO 44919
42296: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42297: LD_ADDR_VAR 0 11
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 3
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42341: LD_ADDR_VAR 0 12
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 3
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42382: LD_ADDR_VAR 0 13
42386: PUSH
42387: LD_INT 3
42389: PUSH
42390: LD_INT 2
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: LD_INT 3
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 3
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42422: LD_ADDR_VAR 0 14
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42463: LD_ADDR_VAR 0 15
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 3
42481: NEG
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: NEG
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42507: LD_ADDR_VAR 0 16
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 3
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 3
42526: NEG
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: NEG
42539: PUSH
42540: LD_INT 3
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: LIST
42552: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42553: LD_ADDR_VAR 0 17
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: LD_INT 3
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 3
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: LIST
42596: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42597: LD_ADDR_VAR 0 18
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 3
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 3
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42638: LD_ADDR_VAR 0 19
42642: PUSH
42643: LD_INT 3
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 3
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42678: LD_ADDR_VAR 0 20
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: LD_INT 3
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 3
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42719: LD_ADDR_VAR 0 21
42723: PUSH
42724: LD_INT 2
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 3
42737: NEG
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 3
42748: NEG
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42763: LD_ADDR_VAR 0 22
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: LD_INT 3
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 3
42782: NEG
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 3
42794: NEG
42795: PUSH
42796: LD_INT 3
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42809: LD_ADDR_VAR 0 23
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 4
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: LIST
42852: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42853: LD_ADDR_VAR 0 24
42857: PUSH
42858: LD_INT 3
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 4
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42894: LD_ADDR_VAR 0 25
42898: PUSH
42899: LD_INT 3
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 4
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 3
42921: PUSH
42922: LD_INT 4
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42934: LD_ADDR_VAR 0 26
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 3
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 4
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: LD_INT 3
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: LIST
42974: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42975: LD_ADDR_VAR 0 27
42979: PUSH
42980: LD_INT 3
42982: NEG
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 3
42993: NEG
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 4
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43019: LD_ADDR_VAR 0 28
43023: PUSH
43024: LD_INT 3
43026: NEG
43027: PUSH
43028: LD_INT 3
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 3
43038: NEG
43039: PUSH
43040: LD_INT 4
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 4
43050: NEG
43051: PUSH
43052: LD_INT 3
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43065: LD_ADDR_VAR 0 29
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 3
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: LD_INT 4
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 4
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: LD_INT 5
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 5
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 4
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 6
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 6
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 5
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43220: LD_ADDR_VAR 0 30
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 3
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 3
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 4
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 4
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 4
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 5
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 5
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 5
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 6
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 6
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43363: LD_ADDR_VAR 0 31
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 3
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 4
43400: PUSH
43401: LD_INT 3
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 4
43410: PUSH
43411: LD_INT 4
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 3
43420: PUSH
43421: LD_INT 4
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 5
43430: PUSH
43431: LD_INT 4
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 5
43440: PUSH
43441: LD_INT 5
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 4
43450: PUSH
43451: LD_INT 5
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 6
43460: PUSH
43461: LD_INT 5
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 6
43470: PUSH
43471: LD_INT 6
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 5
43480: PUSH
43481: LD_INT 6
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43502: LD_ADDR_VAR 0 32
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 4
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 4
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 3
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 5
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 5
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: LD_INT 4
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 6
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: LD_INT 6
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: LD_INT 5
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43645: LD_ADDR_VAR 0 33
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 3
43663: NEG
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 3
43674: NEG
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 3
43686: NEG
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 4
43697: NEG
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 4
43708: NEG
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 4
43720: NEG
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 5
43731: NEG
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 5
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 5
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 6
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 6
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43800: LD_ADDR_VAR 0 34
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: LD_INT 3
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 3
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 3
43831: NEG
43832: PUSH
43833: LD_INT 3
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 3
43843: NEG
43844: PUSH
43845: LD_INT 4
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 4
43855: NEG
43856: PUSH
43857: LD_INT 3
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 4
43867: NEG
43868: PUSH
43869: LD_INT 4
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 4
43879: NEG
43880: PUSH
43881: LD_INT 5
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 5
43891: NEG
43892: PUSH
43893: LD_INT 4
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 5
43903: NEG
43904: PUSH
43905: LD_INT 5
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 5
43915: NEG
43916: PUSH
43917: LD_INT 6
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 6
43927: NEG
43928: PUSH
43929: LD_INT 5
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 6
43939: NEG
43940: PUSH
43941: LD_INT 6
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43963: LD_ADDR_VAR 0 41
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 3
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44007: LD_ADDR_VAR 0 42
44011: PUSH
44012: LD_INT 2
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 3
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: LIST
44047: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44048: LD_ADDR_VAR 0 43
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 3
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: LD_INT 3
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44088: LD_ADDR_VAR 0 44
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44129: LD_ADDR_VAR 0 45
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 3
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44173: LD_ADDR_VAR 0 46
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: LD_INT 3
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 3
44204: NEG
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44219: LD_ADDR_VAR 0 47
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: LD_INT 3
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 3
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44252: LD_ADDR_VAR 0 48
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 2
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44283: LD_ADDR_VAR 0 49
44287: PUSH
44288: LD_INT 3
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44312: LD_ADDR_VAR 0 50
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 3
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44341: LD_ADDR_VAR 0 51
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44372: LD_ADDR_VAR 0 52
44376: PUSH
44377: LD_INT 3
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 3
44391: NEG
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44405: LD_ADDR_VAR 0 53
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 3
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 3
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44449: LD_ADDR_VAR 0 54
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44490: LD_ADDR_VAR 0 55
44494: PUSH
44495: LD_INT 3
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 3
44507: PUSH
44508: LD_INT 3
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: LD_INT 3
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44530: LD_ADDR_VAR 0 56
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 3
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 3
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44571: LD_ADDR_VAR 0 57
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 3
44589: NEG
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 3
44600: NEG
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44615: LD_ADDR_VAR 0 58
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: LD_INT 3
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 3
44634: NEG
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 3
44646: NEG
44647: PUSH
44648: LD_INT 3
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44661: LD_ADDR_VAR 0 59
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44705: LD_ADDR_VAR 0 60
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44746: LD_ADDR_VAR 0 61
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44786: LD_ADDR_VAR 0 62
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44827: LD_ADDR_VAR 0 63
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44871: LD_ADDR_VAR 0 64
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: ST_TO_ADDR
// end ; 2 :
44917: GO 48183
44919: LD_INT 2
44921: DOUBLE
44922: EQUAL
44923: IFTRUE 44927
44925: GO 48182
44927: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44928: LD_ADDR_VAR 0 29
44932: PUSH
44933: LD_INT 4
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 4
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 5
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 5
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 4
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 3
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 5
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 3
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 3
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 4
45048: PUSH
45049: LD_INT 3
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 4
45058: PUSH
45059: LD_INT 4
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 3
45068: PUSH
45069: LD_INT 4
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 3
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 4
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 4
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 4
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 3
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 4
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 5
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: LD_INT 5
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 4
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 3
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 5
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 3
45211: NEG
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 3
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 3
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 4
45267: NEG
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 4
45278: NEG
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 4
45290: NEG
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 4
45313: NEG
45314: PUSH
45315: LD_INT 4
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 4
45325: NEG
45326: PUSH
45327: LD_INT 5
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 3
45337: NEG
45338: PUSH
45339: LD_INT 4
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 3
45349: NEG
45350: PUSH
45351: LD_INT 3
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 4
45361: NEG
45362: PUSH
45363: LD_INT 3
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 5
45373: NEG
45374: PUSH
45375: LD_INT 4
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 5
45385: NEG
45386: PUSH
45387: LD_INT 5
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: NEG
45398: PUSH
45399: LD_INT 5
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 5
45409: NEG
45410: PUSH
45411: LD_INT 3
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45466: LD_ADDR_VAR 0 30
45470: PUSH
45471: LD_INT 4
45473: PUSH
45474: LD_INT 4
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 4
45483: PUSH
45484: LD_INT 3
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 5
45493: PUSH
45494: LD_INT 4
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 5
45503: PUSH
45504: LD_INT 5
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 4
45513: PUSH
45514: LD_INT 5
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 3
45523: PUSH
45524: LD_INT 4
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 3
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 5
45543: PUSH
45544: LD_INT 3
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 5
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 4
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 4
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 3
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 4
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 4
45656: NEG
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 4
45667: NEG
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 3
45679: NEG
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 3
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 4
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 5
45712: NEG
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 5
45723: NEG
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 5
45735: NEG
45736: PUSH
45737: LD_INT 2
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: NEG
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: NEG
45759: PUSH
45760: LD_INT 3
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 3
45770: NEG
45771: PUSH
45772: LD_INT 4
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 3
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 4
45818: NEG
45819: PUSH
45820: LD_INT 3
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 4
45830: NEG
45831: PUSH
45832: LD_INT 4
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: LD_INT 4
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 4
45854: NEG
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 4
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 5
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 4
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 3
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 4
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 5
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 3
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: LD_INT 5
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46013: LD_ADDR_VAR 0 31
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 4
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 4
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 5
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 5
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 4
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 3
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 5
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: LD_INT 3
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 3
46158: NEG
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 4
46169: NEG
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 4
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 4
46192: NEG
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 4
46215: NEG
46216: PUSH
46217: LD_INT 4
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 4
46227: NEG
46228: PUSH
46229: LD_INT 5
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: LD_INT 4
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: NEG
46252: PUSH
46253: LD_INT 3
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 4
46263: NEG
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 5
46275: NEG
46276: PUSH
46277: LD_INT 4
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 5
46287: NEG
46288: PUSH
46289: LD_INT 5
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: LD_INT 5
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 5
46311: NEG
46312: PUSH
46313: LD_INT 3
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 3
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 4
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 4
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: LD_INT 4
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 4
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 4
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 5
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 5
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 4
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 3
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 5
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46563: LD_ADDR_VAR 0 32
46567: PUSH
46568: LD_INT 4
46570: NEG
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 4
46581: NEG
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 3
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 4
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 5
46626: NEG
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 5
46637: NEG
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 5
46649: NEG
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 3
46672: NEG
46673: PUSH
46674: LD_INT 3
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: NEG
46685: PUSH
46686: LD_INT 4
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: NEG
46697: PUSH
46698: LD_INT 3
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: LD_INT 2
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 4
46732: NEG
46733: PUSH
46734: LD_INT 3
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 4
46744: NEG
46745: PUSH
46746: LD_INT 4
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 4
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 4
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 4
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 5
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 4
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 3
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 3
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 4
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 5
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: NEG
46871: PUSH
46872: LD_INT 5
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 3
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 4
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 4
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 3
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 4
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 4
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 4
46985: PUSH
46986: LD_INT 3
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 5
46995: PUSH
46996: LD_INT 4
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 5
47005: PUSH
47006: LD_INT 5
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 4
47015: PUSH
47016: LD_INT 5
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 3
47025: PUSH
47026: LD_INT 4
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 5
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: LD_INT 5
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47110: LD_ADDR_VAR 0 33
47114: PUSH
47115: LD_INT 4
47117: NEG
47118: PUSH
47119: LD_INT 4
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 4
47129: NEG
47130: PUSH
47131: LD_INT 5
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 3
47141: NEG
47142: PUSH
47143: LD_INT 4
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 3
47153: NEG
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 4
47165: NEG
47166: PUSH
47167: LD_INT 3
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 5
47177: NEG
47178: PUSH
47179: LD_INT 4
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 5
47189: NEG
47190: PUSH
47191: LD_INT 5
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 3
47201: NEG
47202: PUSH
47203: LD_INT 5
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 5
47213: NEG
47214: PUSH
47215: LD_INT 3
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 4
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 3
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 4
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: LD_INT 4
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 4
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 4
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 5
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 5
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 4
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 5
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 3
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 4
47440: PUSH
47441: LD_INT 3
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 4
47450: PUSH
47451: LD_INT 4
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: PUSH
47461: LD_INT 4
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 4
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 4
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 4
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 4
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 5
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 5
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 4
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 5
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47648: LD_ADDR_VAR 0 34
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 4
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 5
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 4
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 3
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 3
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 4
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 5
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 3
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 5
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 3
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 4
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 4
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 4
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 4
47850: PUSH
47851: LD_INT 4
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 4
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 5
47870: PUSH
47871: LD_INT 4
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 5
47880: PUSH
47881: LD_INT 5
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 4
47890: PUSH
47891: LD_INT 5
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 3
47900: PUSH
47901: LD_INT 4
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 3
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 5
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: LD_INT 5
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 4
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 4
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: LD_INT 4
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 4
48033: NEG
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 4
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 4
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 5
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 5
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 5
48112: NEG
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 3
48124: NEG
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// end ; end ;
48180: GO 48183
48182: POP
// case btype of b_depot , b_warehouse :
48183: LD_VAR 0 1
48187: PUSH
48188: LD_INT 0
48190: DOUBLE
48191: EQUAL
48192: IFTRUE 48202
48194: LD_INT 1
48196: DOUBLE
48197: EQUAL
48198: IFTRUE 48202
48200: GO 48403
48202: POP
// case nation of nation_american :
48203: LD_VAR 0 5
48207: PUSH
48208: LD_INT 1
48210: DOUBLE
48211: EQUAL
48212: IFTRUE 48216
48214: GO 48272
48216: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48217: LD_ADDR_VAR 0 9
48221: PUSH
48222: LD_VAR 0 11
48226: PUSH
48227: LD_VAR 0 12
48231: PUSH
48232: LD_VAR 0 13
48236: PUSH
48237: LD_VAR 0 14
48241: PUSH
48242: LD_VAR 0 15
48246: PUSH
48247: LD_VAR 0 16
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: PUSH
48260: LD_VAR 0 4
48264: PUSH
48265: LD_INT 1
48267: PLUS
48268: ARRAY
48269: ST_TO_ADDR
48270: GO 48401
48272: LD_INT 2
48274: DOUBLE
48275: EQUAL
48276: IFTRUE 48280
48278: GO 48336
48280: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48281: LD_ADDR_VAR 0 9
48285: PUSH
48286: LD_VAR 0 17
48290: PUSH
48291: LD_VAR 0 18
48295: PUSH
48296: LD_VAR 0 19
48300: PUSH
48301: LD_VAR 0 20
48305: PUSH
48306: LD_VAR 0 21
48310: PUSH
48311: LD_VAR 0 22
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: PUSH
48324: LD_VAR 0 4
48328: PUSH
48329: LD_INT 1
48331: PLUS
48332: ARRAY
48333: ST_TO_ADDR
48334: GO 48401
48336: LD_INT 3
48338: DOUBLE
48339: EQUAL
48340: IFTRUE 48344
48342: GO 48400
48344: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48345: LD_ADDR_VAR 0 9
48349: PUSH
48350: LD_VAR 0 23
48354: PUSH
48355: LD_VAR 0 24
48359: PUSH
48360: LD_VAR 0 25
48364: PUSH
48365: LD_VAR 0 26
48369: PUSH
48370: LD_VAR 0 27
48374: PUSH
48375: LD_VAR 0 28
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: PUSH
48388: LD_VAR 0 4
48392: PUSH
48393: LD_INT 1
48395: PLUS
48396: ARRAY
48397: ST_TO_ADDR
48398: GO 48401
48400: POP
48401: GO 48956
48403: LD_INT 2
48405: DOUBLE
48406: EQUAL
48407: IFTRUE 48417
48409: LD_INT 3
48411: DOUBLE
48412: EQUAL
48413: IFTRUE 48417
48415: GO 48473
48417: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48418: LD_ADDR_VAR 0 9
48422: PUSH
48423: LD_VAR 0 29
48427: PUSH
48428: LD_VAR 0 30
48432: PUSH
48433: LD_VAR 0 31
48437: PUSH
48438: LD_VAR 0 32
48442: PUSH
48443: LD_VAR 0 33
48447: PUSH
48448: LD_VAR 0 34
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: PUSH
48461: LD_VAR 0 4
48465: PUSH
48466: LD_INT 1
48468: PLUS
48469: ARRAY
48470: ST_TO_ADDR
48471: GO 48956
48473: LD_INT 16
48475: DOUBLE
48476: EQUAL
48477: IFTRUE 48535
48479: LD_INT 17
48481: DOUBLE
48482: EQUAL
48483: IFTRUE 48535
48485: LD_INT 18
48487: DOUBLE
48488: EQUAL
48489: IFTRUE 48535
48491: LD_INT 19
48493: DOUBLE
48494: EQUAL
48495: IFTRUE 48535
48497: LD_INT 22
48499: DOUBLE
48500: EQUAL
48501: IFTRUE 48535
48503: LD_INT 20
48505: DOUBLE
48506: EQUAL
48507: IFTRUE 48535
48509: LD_INT 21
48511: DOUBLE
48512: EQUAL
48513: IFTRUE 48535
48515: LD_INT 23
48517: DOUBLE
48518: EQUAL
48519: IFTRUE 48535
48521: LD_INT 24
48523: DOUBLE
48524: EQUAL
48525: IFTRUE 48535
48527: LD_INT 25
48529: DOUBLE
48530: EQUAL
48531: IFTRUE 48535
48533: GO 48591
48535: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48536: LD_ADDR_VAR 0 9
48540: PUSH
48541: LD_VAR 0 35
48545: PUSH
48546: LD_VAR 0 36
48550: PUSH
48551: LD_VAR 0 37
48555: PUSH
48556: LD_VAR 0 38
48560: PUSH
48561: LD_VAR 0 39
48565: PUSH
48566: LD_VAR 0 40
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: PUSH
48579: LD_VAR 0 4
48583: PUSH
48584: LD_INT 1
48586: PLUS
48587: ARRAY
48588: ST_TO_ADDR
48589: GO 48956
48591: LD_INT 6
48593: DOUBLE
48594: EQUAL
48595: IFTRUE 48647
48597: LD_INT 7
48599: DOUBLE
48600: EQUAL
48601: IFTRUE 48647
48603: LD_INT 8
48605: DOUBLE
48606: EQUAL
48607: IFTRUE 48647
48609: LD_INT 13
48611: DOUBLE
48612: EQUAL
48613: IFTRUE 48647
48615: LD_INT 12
48617: DOUBLE
48618: EQUAL
48619: IFTRUE 48647
48621: LD_INT 15
48623: DOUBLE
48624: EQUAL
48625: IFTRUE 48647
48627: LD_INT 11
48629: DOUBLE
48630: EQUAL
48631: IFTRUE 48647
48633: LD_INT 14
48635: DOUBLE
48636: EQUAL
48637: IFTRUE 48647
48639: LD_INT 10
48641: DOUBLE
48642: EQUAL
48643: IFTRUE 48647
48645: GO 48703
48647: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48648: LD_ADDR_VAR 0 9
48652: PUSH
48653: LD_VAR 0 41
48657: PUSH
48658: LD_VAR 0 42
48662: PUSH
48663: LD_VAR 0 43
48667: PUSH
48668: LD_VAR 0 44
48672: PUSH
48673: LD_VAR 0 45
48677: PUSH
48678: LD_VAR 0 46
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: PUSH
48691: LD_VAR 0 4
48695: PUSH
48696: LD_INT 1
48698: PLUS
48699: ARRAY
48700: ST_TO_ADDR
48701: GO 48956
48703: LD_INT 36
48705: DOUBLE
48706: EQUAL
48707: IFTRUE 48711
48709: GO 48767
48711: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48712: LD_ADDR_VAR 0 9
48716: PUSH
48717: LD_VAR 0 47
48721: PUSH
48722: LD_VAR 0 48
48726: PUSH
48727: LD_VAR 0 49
48731: PUSH
48732: LD_VAR 0 50
48736: PUSH
48737: LD_VAR 0 51
48741: PUSH
48742: LD_VAR 0 52
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: PUSH
48755: LD_VAR 0 4
48759: PUSH
48760: LD_INT 1
48762: PLUS
48763: ARRAY
48764: ST_TO_ADDR
48765: GO 48956
48767: LD_INT 4
48769: DOUBLE
48770: EQUAL
48771: IFTRUE 48793
48773: LD_INT 5
48775: DOUBLE
48776: EQUAL
48777: IFTRUE 48793
48779: LD_INT 34
48781: DOUBLE
48782: EQUAL
48783: IFTRUE 48793
48785: LD_INT 37
48787: DOUBLE
48788: EQUAL
48789: IFTRUE 48793
48791: GO 48849
48793: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48794: LD_ADDR_VAR 0 9
48798: PUSH
48799: LD_VAR 0 53
48803: PUSH
48804: LD_VAR 0 54
48808: PUSH
48809: LD_VAR 0 55
48813: PUSH
48814: LD_VAR 0 56
48818: PUSH
48819: LD_VAR 0 57
48823: PUSH
48824: LD_VAR 0 58
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: PUSH
48837: LD_VAR 0 4
48841: PUSH
48842: LD_INT 1
48844: PLUS
48845: ARRAY
48846: ST_TO_ADDR
48847: GO 48956
48849: LD_INT 31
48851: DOUBLE
48852: EQUAL
48853: IFTRUE 48899
48855: LD_INT 32
48857: DOUBLE
48858: EQUAL
48859: IFTRUE 48899
48861: LD_INT 33
48863: DOUBLE
48864: EQUAL
48865: IFTRUE 48899
48867: LD_INT 27
48869: DOUBLE
48870: EQUAL
48871: IFTRUE 48899
48873: LD_INT 26
48875: DOUBLE
48876: EQUAL
48877: IFTRUE 48899
48879: LD_INT 28
48881: DOUBLE
48882: EQUAL
48883: IFTRUE 48899
48885: LD_INT 29
48887: DOUBLE
48888: EQUAL
48889: IFTRUE 48899
48891: LD_INT 30
48893: DOUBLE
48894: EQUAL
48895: IFTRUE 48899
48897: GO 48955
48899: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48900: LD_ADDR_VAR 0 9
48904: PUSH
48905: LD_VAR 0 59
48909: PUSH
48910: LD_VAR 0 60
48914: PUSH
48915: LD_VAR 0 61
48919: PUSH
48920: LD_VAR 0 62
48924: PUSH
48925: LD_VAR 0 63
48929: PUSH
48930: LD_VAR 0 64
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: PUSH
48943: LD_VAR 0 4
48947: PUSH
48948: LD_INT 1
48950: PLUS
48951: ARRAY
48952: ST_TO_ADDR
48953: GO 48956
48955: POP
// temp_list2 = [ ] ;
48956: LD_ADDR_VAR 0 10
48960: PUSH
48961: EMPTY
48962: ST_TO_ADDR
// for i in temp_list do
48963: LD_ADDR_VAR 0 8
48967: PUSH
48968: LD_VAR 0 9
48972: PUSH
48973: FOR_IN
48974: IFFALSE 49026
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48976: LD_ADDR_VAR 0 10
48980: PUSH
48981: LD_VAR 0 10
48985: PUSH
48986: LD_VAR 0 8
48990: PUSH
48991: LD_INT 1
48993: ARRAY
48994: PUSH
48995: LD_VAR 0 2
48999: PLUS
49000: PUSH
49001: LD_VAR 0 8
49005: PUSH
49006: LD_INT 2
49008: ARRAY
49009: PUSH
49010: LD_VAR 0 3
49014: PLUS
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: EMPTY
49021: LIST
49022: ADD
49023: ST_TO_ADDR
49024: GO 48973
49026: POP
49027: POP
// result = temp_list2 ;
49028: LD_ADDR_VAR 0 7
49032: PUSH
49033: LD_VAR 0 10
49037: ST_TO_ADDR
// end ;
49038: LD_VAR 0 7
49042: RET
// export function EnemyInRange ( unit , dist ) ; begin
49043: LD_INT 0
49045: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49046: LD_ADDR_VAR 0 3
49050: PUSH
49051: LD_VAR 0 1
49055: PPUSH
49056: CALL_OW 255
49060: PPUSH
49061: LD_VAR 0 1
49065: PPUSH
49066: CALL_OW 250
49070: PPUSH
49071: LD_VAR 0 1
49075: PPUSH
49076: CALL_OW 251
49080: PPUSH
49081: LD_VAR 0 2
49085: PPUSH
49086: CALL 23147 0 4
49090: PUSH
49091: LD_INT 4
49093: ARRAY
49094: ST_TO_ADDR
// end ;
49095: LD_VAR 0 3
49099: RET
// export function PlayerSeeMe ( unit ) ; begin
49100: LD_INT 0
49102: PPUSH
// result := See ( your_side , unit ) ;
49103: LD_ADDR_VAR 0 2
49107: PUSH
49108: LD_OWVAR 2
49112: PPUSH
49113: LD_VAR 0 1
49117: PPUSH
49118: CALL_OW 292
49122: ST_TO_ADDR
// end ;
49123: LD_VAR 0 2
49127: RET
// export function ReverseDir ( unit ) ; begin
49128: LD_INT 0
49130: PPUSH
// if not unit then
49131: LD_VAR 0 1
49135: NOT
49136: IFFALSE 49140
// exit ;
49138: GO 49163
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49140: LD_ADDR_VAR 0 2
49144: PUSH
49145: LD_VAR 0 1
49149: PPUSH
49150: CALL_OW 254
49154: PUSH
49155: LD_INT 3
49157: PLUS
49158: PUSH
49159: LD_INT 6
49161: MOD
49162: ST_TO_ADDR
// end ;
49163: LD_VAR 0 2
49167: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49168: LD_INT 0
49170: PPUSH
49171: PPUSH
49172: PPUSH
49173: PPUSH
49174: PPUSH
// if not hexes then
49175: LD_VAR 0 2
49179: NOT
49180: IFFALSE 49184
// exit ;
49182: GO 49332
// dist := 9999 ;
49184: LD_ADDR_VAR 0 5
49188: PUSH
49189: LD_INT 9999
49191: ST_TO_ADDR
// for i = 1 to hexes do
49192: LD_ADDR_VAR 0 4
49196: PUSH
49197: DOUBLE
49198: LD_INT 1
49200: DEC
49201: ST_TO_ADDR
49202: LD_VAR 0 2
49206: PUSH
49207: FOR_TO
49208: IFFALSE 49320
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49210: LD_VAR 0 1
49214: PPUSH
49215: LD_VAR 0 2
49219: PUSH
49220: LD_VAR 0 4
49224: ARRAY
49225: PUSH
49226: LD_INT 1
49228: ARRAY
49229: PPUSH
49230: LD_VAR 0 2
49234: PUSH
49235: LD_VAR 0 4
49239: ARRAY
49240: PUSH
49241: LD_INT 2
49243: ARRAY
49244: PPUSH
49245: CALL_OW 297
49249: PUSH
49250: LD_VAR 0 5
49254: LESS
49255: IFFALSE 49318
// begin hex := hexes [ i ] ;
49257: LD_ADDR_VAR 0 7
49261: PUSH
49262: LD_VAR 0 2
49266: PUSH
49267: LD_VAR 0 4
49271: ARRAY
49272: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49273: LD_ADDR_VAR 0 5
49277: PUSH
49278: LD_VAR 0 1
49282: PPUSH
49283: LD_VAR 0 2
49287: PUSH
49288: LD_VAR 0 4
49292: ARRAY
49293: PUSH
49294: LD_INT 1
49296: ARRAY
49297: PPUSH
49298: LD_VAR 0 2
49302: PUSH
49303: LD_VAR 0 4
49307: ARRAY
49308: PUSH
49309: LD_INT 2
49311: ARRAY
49312: PPUSH
49313: CALL_OW 297
49317: ST_TO_ADDR
// end ; end ;
49318: GO 49207
49320: POP
49321: POP
// result := hex ;
49322: LD_ADDR_VAR 0 3
49326: PUSH
49327: LD_VAR 0 7
49331: ST_TO_ADDR
// end ;
49332: LD_VAR 0 3
49336: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49337: LD_INT 0
49339: PPUSH
49340: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49341: LD_VAR 0 1
49345: NOT
49346: PUSH
49347: LD_VAR 0 1
49351: PUSH
49352: LD_INT 21
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 23
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PPUSH
49376: CALL_OW 69
49380: IN
49381: NOT
49382: OR
49383: IFFALSE 49387
// exit ;
49385: GO 49434
// for i = 1 to 3 do
49387: LD_ADDR_VAR 0 3
49391: PUSH
49392: DOUBLE
49393: LD_INT 1
49395: DEC
49396: ST_TO_ADDR
49397: LD_INT 3
49399: PUSH
49400: FOR_TO
49401: IFFALSE 49432
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49403: LD_VAR 0 1
49407: PPUSH
49408: CALL_OW 250
49412: PPUSH
49413: LD_VAR 0 1
49417: PPUSH
49418: CALL_OW 251
49422: PPUSH
49423: LD_INT 1
49425: PPUSH
49426: CALL_OW 453
49430: GO 49400
49432: POP
49433: POP
// end ;
49434: LD_VAR 0 2
49438: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49439: LD_INT 0
49441: PPUSH
49442: PPUSH
49443: PPUSH
49444: PPUSH
49445: PPUSH
49446: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49447: LD_VAR 0 1
49451: NOT
49452: PUSH
49453: LD_VAR 0 2
49457: NOT
49458: OR
49459: PUSH
49460: LD_VAR 0 1
49464: PPUSH
49465: CALL_OW 314
49469: OR
49470: IFFALSE 49474
// exit ;
49472: GO 49915
// x := GetX ( enemy_unit ) ;
49474: LD_ADDR_VAR 0 7
49478: PUSH
49479: LD_VAR 0 2
49483: PPUSH
49484: CALL_OW 250
49488: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49489: LD_ADDR_VAR 0 8
49493: PUSH
49494: LD_VAR 0 2
49498: PPUSH
49499: CALL_OW 251
49503: ST_TO_ADDR
// if not x or not y then
49504: LD_VAR 0 7
49508: NOT
49509: PUSH
49510: LD_VAR 0 8
49514: NOT
49515: OR
49516: IFFALSE 49520
// exit ;
49518: GO 49915
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49520: LD_ADDR_VAR 0 6
49524: PUSH
49525: LD_VAR 0 7
49529: PPUSH
49530: LD_INT 0
49532: PPUSH
49533: LD_INT 4
49535: PPUSH
49536: CALL_OW 272
49540: PUSH
49541: LD_VAR 0 8
49545: PPUSH
49546: LD_INT 0
49548: PPUSH
49549: LD_INT 4
49551: PPUSH
49552: CALL_OW 273
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_VAR 0 7
49565: PPUSH
49566: LD_INT 1
49568: PPUSH
49569: LD_INT 4
49571: PPUSH
49572: CALL_OW 272
49576: PUSH
49577: LD_VAR 0 8
49581: PPUSH
49582: LD_INT 1
49584: PPUSH
49585: LD_INT 4
49587: PPUSH
49588: CALL_OW 273
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_VAR 0 7
49601: PPUSH
49602: LD_INT 2
49604: PPUSH
49605: LD_INT 4
49607: PPUSH
49608: CALL_OW 272
49612: PUSH
49613: LD_VAR 0 8
49617: PPUSH
49618: LD_INT 2
49620: PPUSH
49621: LD_INT 4
49623: PPUSH
49624: CALL_OW 273
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_VAR 0 7
49637: PPUSH
49638: LD_INT 3
49640: PPUSH
49641: LD_INT 4
49643: PPUSH
49644: CALL_OW 272
49648: PUSH
49649: LD_VAR 0 8
49653: PPUSH
49654: LD_INT 3
49656: PPUSH
49657: LD_INT 4
49659: PPUSH
49660: CALL_OW 273
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_VAR 0 7
49673: PPUSH
49674: LD_INT 4
49676: PPUSH
49677: LD_INT 4
49679: PPUSH
49680: CALL_OW 272
49684: PUSH
49685: LD_VAR 0 8
49689: PPUSH
49690: LD_INT 4
49692: PPUSH
49693: LD_INT 4
49695: PPUSH
49696: CALL_OW 273
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_VAR 0 7
49709: PPUSH
49710: LD_INT 5
49712: PPUSH
49713: LD_INT 4
49715: PPUSH
49716: CALL_OW 272
49720: PUSH
49721: LD_VAR 0 8
49725: PPUSH
49726: LD_INT 5
49728: PPUSH
49729: LD_INT 4
49731: PPUSH
49732: CALL_OW 273
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: ST_TO_ADDR
// for i = tmp downto 1 do
49749: LD_ADDR_VAR 0 4
49753: PUSH
49754: DOUBLE
49755: LD_VAR 0 6
49759: INC
49760: ST_TO_ADDR
49761: LD_INT 1
49763: PUSH
49764: FOR_DOWNTO
49765: IFFALSE 49866
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49767: LD_VAR 0 6
49771: PUSH
49772: LD_VAR 0 4
49776: ARRAY
49777: PUSH
49778: LD_INT 1
49780: ARRAY
49781: PPUSH
49782: LD_VAR 0 6
49786: PUSH
49787: LD_VAR 0 4
49791: ARRAY
49792: PUSH
49793: LD_INT 2
49795: ARRAY
49796: PPUSH
49797: CALL_OW 488
49801: NOT
49802: PUSH
49803: LD_VAR 0 6
49807: PUSH
49808: LD_VAR 0 4
49812: ARRAY
49813: PUSH
49814: LD_INT 1
49816: ARRAY
49817: PPUSH
49818: LD_VAR 0 6
49822: PUSH
49823: LD_VAR 0 4
49827: ARRAY
49828: PUSH
49829: LD_INT 2
49831: ARRAY
49832: PPUSH
49833: CALL_OW 428
49837: PUSH
49838: LD_INT 0
49840: NONEQUAL
49841: OR
49842: IFFALSE 49864
// tmp := Delete ( tmp , i ) ;
49844: LD_ADDR_VAR 0 6
49848: PUSH
49849: LD_VAR 0 6
49853: PPUSH
49854: LD_VAR 0 4
49858: PPUSH
49859: CALL_OW 3
49863: ST_TO_ADDR
49864: GO 49764
49866: POP
49867: POP
// j := GetClosestHex ( unit , tmp ) ;
49868: LD_ADDR_VAR 0 5
49872: PUSH
49873: LD_VAR 0 1
49877: PPUSH
49878: LD_VAR 0 6
49882: PPUSH
49883: CALL 49168 0 2
49887: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49888: LD_VAR 0 1
49892: PPUSH
49893: LD_VAR 0 5
49897: PUSH
49898: LD_INT 1
49900: ARRAY
49901: PPUSH
49902: LD_VAR 0 5
49906: PUSH
49907: LD_INT 2
49909: ARRAY
49910: PPUSH
49911: CALL_OW 111
// end ;
49915: LD_VAR 0 3
49919: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49920: LD_INT 0
49922: PPUSH
49923: PPUSH
49924: PPUSH
// uc_side = 0 ;
49925: LD_ADDR_OWVAR 20
49929: PUSH
49930: LD_INT 0
49932: ST_TO_ADDR
// uc_nation = 0 ;
49933: LD_ADDR_OWVAR 21
49937: PUSH
49938: LD_INT 0
49940: ST_TO_ADDR
// InitHc_All ( ) ;
49941: CALL_OW 584
// InitVc ;
49945: CALL_OW 20
// if mastodonts then
49949: LD_VAR 0 6
49953: IFFALSE 50020
// for i = 1 to mastodonts do
49955: LD_ADDR_VAR 0 11
49959: PUSH
49960: DOUBLE
49961: LD_INT 1
49963: DEC
49964: ST_TO_ADDR
49965: LD_VAR 0 6
49969: PUSH
49970: FOR_TO
49971: IFFALSE 50018
// begin vc_chassis := 31 ;
49973: LD_ADDR_OWVAR 37
49977: PUSH
49978: LD_INT 31
49980: ST_TO_ADDR
// vc_control := control_rider ;
49981: LD_ADDR_OWVAR 38
49985: PUSH
49986: LD_INT 4
49988: ST_TO_ADDR
// animal := CreateVehicle ;
49989: LD_ADDR_VAR 0 12
49993: PUSH
49994: CALL_OW 45
49998: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49999: LD_VAR 0 12
50003: PPUSH
50004: LD_VAR 0 8
50008: PPUSH
50009: LD_INT 0
50011: PPUSH
50012: CALL 52208 0 3
// end ;
50016: GO 49970
50018: POP
50019: POP
// if horses then
50020: LD_VAR 0 5
50024: IFFALSE 50091
// for i = 1 to horses do
50026: LD_ADDR_VAR 0 11
50030: PUSH
50031: DOUBLE
50032: LD_INT 1
50034: DEC
50035: ST_TO_ADDR
50036: LD_VAR 0 5
50040: PUSH
50041: FOR_TO
50042: IFFALSE 50089
// begin hc_class := 21 ;
50044: LD_ADDR_OWVAR 28
50048: PUSH
50049: LD_INT 21
50051: ST_TO_ADDR
// hc_gallery :=  ;
50052: LD_ADDR_OWVAR 33
50056: PUSH
50057: LD_STRING 
50059: ST_TO_ADDR
// animal := CreateHuman ;
50060: LD_ADDR_VAR 0 12
50064: PUSH
50065: CALL_OW 44
50069: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50070: LD_VAR 0 12
50074: PPUSH
50075: LD_VAR 0 8
50079: PPUSH
50080: LD_INT 0
50082: PPUSH
50083: CALL 52208 0 3
// end ;
50087: GO 50041
50089: POP
50090: POP
// if birds then
50091: LD_VAR 0 1
50095: IFFALSE 50162
// for i = 1 to birds do
50097: LD_ADDR_VAR 0 11
50101: PUSH
50102: DOUBLE
50103: LD_INT 1
50105: DEC
50106: ST_TO_ADDR
50107: LD_VAR 0 1
50111: PUSH
50112: FOR_TO
50113: IFFALSE 50160
// begin hc_class = 18 ;
50115: LD_ADDR_OWVAR 28
50119: PUSH
50120: LD_INT 18
50122: ST_TO_ADDR
// hc_gallery =  ;
50123: LD_ADDR_OWVAR 33
50127: PUSH
50128: LD_STRING 
50130: ST_TO_ADDR
// animal := CreateHuman ;
50131: LD_ADDR_VAR 0 12
50135: PUSH
50136: CALL_OW 44
50140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50141: LD_VAR 0 12
50145: PPUSH
50146: LD_VAR 0 8
50150: PPUSH
50151: LD_INT 0
50153: PPUSH
50154: CALL 52208 0 3
// end ;
50158: GO 50112
50160: POP
50161: POP
// if tigers then
50162: LD_VAR 0 2
50166: IFFALSE 50250
// for i = 1 to tigers do
50168: LD_ADDR_VAR 0 11
50172: PUSH
50173: DOUBLE
50174: LD_INT 1
50176: DEC
50177: ST_TO_ADDR
50178: LD_VAR 0 2
50182: PUSH
50183: FOR_TO
50184: IFFALSE 50248
// begin hc_class = class_tiger ;
50186: LD_ADDR_OWVAR 28
50190: PUSH
50191: LD_INT 14
50193: ST_TO_ADDR
// hc_gallery =  ;
50194: LD_ADDR_OWVAR 33
50198: PUSH
50199: LD_STRING 
50201: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50202: LD_ADDR_OWVAR 35
50206: PUSH
50207: LD_INT 7
50209: NEG
50210: PPUSH
50211: LD_INT 7
50213: PPUSH
50214: CALL_OW 12
50218: ST_TO_ADDR
// animal := CreateHuman ;
50219: LD_ADDR_VAR 0 12
50223: PUSH
50224: CALL_OW 44
50228: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50229: LD_VAR 0 12
50233: PPUSH
50234: LD_VAR 0 8
50238: PPUSH
50239: LD_INT 0
50241: PPUSH
50242: CALL 52208 0 3
// end ;
50246: GO 50183
50248: POP
50249: POP
// if apemans then
50250: LD_VAR 0 3
50254: IFFALSE 50377
// for i = 1 to apemans do
50256: LD_ADDR_VAR 0 11
50260: PUSH
50261: DOUBLE
50262: LD_INT 1
50264: DEC
50265: ST_TO_ADDR
50266: LD_VAR 0 3
50270: PUSH
50271: FOR_TO
50272: IFFALSE 50375
// begin hc_class = class_apeman ;
50274: LD_ADDR_OWVAR 28
50278: PUSH
50279: LD_INT 12
50281: ST_TO_ADDR
// hc_gallery =  ;
50282: LD_ADDR_OWVAR 33
50286: PUSH
50287: LD_STRING 
50289: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
50290: LD_ADDR_OWVAR 35
50294: PUSH
50295: LD_INT 5
50297: NEG
50298: PPUSH
50299: LD_INT 5
50301: PPUSH
50302: CALL_OW 12
50306: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50307: LD_ADDR_OWVAR 31
50311: PUSH
50312: LD_INT 1
50314: PPUSH
50315: LD_INT 3
50317: PPUSH
50318: CALL_OW 12
50322: PUSH
50323: LD_INT 1
50325: PPUSH
50326: LD_INT 3
50328: PPUSH
50329: CALL_OW 12
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: ST_TO_ADDR
// animal := CreateHuman ;
50346: LD_ADDR_VAR 0 12
50350: PUSH
50351: CALL_OW 44
50355: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50356: LD_VAR 0 12
50360: PPUSH
50361: LD_VAR 0 8
50365: PPUSH
50366: LD_INT 0
50368: PPUSH
50369: CALL 52208 0 3
// end ;
50373: GO 50271
50375: POP
50376: POP
// if enchidnas then
50377: LD_VAR 0 4
50381: IFFALSE 50448
// for i = 1 to enchidnas do
50383: LD_ADDR_VAR 0 11
50387: PUSH
50388: DOUBLE
50389: LD_INT 1
50391: DEC
50392: ST_TO_ADDR
50393: LD_VAR 0 4
50397: PUSH
50398: FOR_TO
50399: IFFALSE 50446
// begin hc_class = 13 ;
50401: LD_ADDR_OWVAR 28
50405: PUSH
50406: LD_INT 13
50408: ST_TO_ADDR
// hc_gallery =  ;
50409: LD_ADDR_OWVAR 33
50413: PUSH
50414: LD_STRING 
50416: ST_TO_ADDR
// animal := CreateHuman ;
50417: LD_ADDR_VAR 0 12
50421: PUSH
50422: CALL_OW 44
50426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50427: LD_VAR 0 12
50431: PPUSH
50432: LD_VAR 0 8
50436: PPUSH
50437: LD_INT 0
50439: PPUSH
50440: CALL 52208 0 3
// end ;
50444: GO 50398
50446: POP
50447: POP
// if fishes then
50448: LD_VAR 0 7
50452: IFFALSE 50519
// for i = 1 to fishes do
50454: LD_ADDR_VAR 0 11
50458: PUSH
50459: DOUBLE
50460: LD_INT 1
50462: DEC
50463: ST_TO_ADDR
50464: LD_VAR 0 7
50468: PUSH
50469: FOR_TO
50470: IFFALSE 50517
// begin hc_class = 20 ;
50472: LD_ADDR_OWVAR 28
50476: PUSH
50477: LD_INT 20
50479: ST_TO_ADDR
// hc_gallery =  ;
50480: LD_ADDR_OWVAR 33
50484: PUSH
50485: LD_STRING 
50487: ST_TO_ADDR
// animal := CreateHuman ;
50488: LD_ADDR_VAR 0 12
50492: PUSH
50493: CALL_OW 44
50497: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50498: LD_VAR 0 12
50502: PPUSH
50503: LD_VAR 0 9
50507: PPUSH
50508: LD_INT 0
50510: PPUSH
50511: CALL 52208 0 3
// end ;
50515: GO 50469
50517: POP
50518: POP
// end ;
50519: LD_VAR 0 10
50523: RET
// export function WantHeal ( sci , unit ) ; begin
50524: LD_INT 0
50526: PPUSH
// if GetTaskList ( sci ) > 0 then
50527: LD_VAR 0 1
50531: PPUSH
50532: CALL_OW 437
50536: PUSH
50537: LD_INT 0
50539: GREATER
50540: IFFALSE 50610
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50542: LD_VAR 0 1
50546: PPUSH
50547: CALL_OW 437
50551: PUSH
50552: LD_INT 1
50554: ARRAY
50555: PUSH
50556: LD_INT 1
50558: ARRAY
50559: PUSH
50560: LD_STRING l
50562: EQUAL
50563: PUSH
50564: LD_VAR 0 1
50568: PPUSH
50569: CALL_OW 437
50573: PUSH
50574: LD_INT 1
50576: ARRAY
50577: PUSH
50578: LD_INT 4
50580: ARRAY
50581: PUSH
50582: LD_VAR 0 2
50586: EQUAL
50587: AND
50588: IFFALSE 50600
// result := true else
50590: LD_ADDR_VAR 0 3
50594: PUSH
50595: LD_INT 1
50597: ST_TO_ADDR
50598: GO 50608
// result := false ;
50600: LD_ADDR_VAR 0 3
50604: PUSH
50605: LD_INT 0
50607: ST_TO_ADDR
// end else
50608: GO 50618
// result := false ;
50610: LD_ADDR_VAR 0 3
50614: PUSH
50615: LD_INT 0
50617: ST_TO_ADDR
// end ;
50618: LD_VAR 0 3
50622: RET
// export function HealTarget ( sci ) ; begin
50623: LD_INT 0
50625: PPUSH
// if not sci then
50626: LD_VAR 0 1
50630: NOT
50631: IFFALSE 50635
// exit ;
50633: GO 50700
// result := 0 ;
50635: LD_ADDR_VAR 0 2
50639: PUSH
50640: LD_INT 0
50642: ST_TO_ADDR
// if GetTaskList ( sci ) then
50643: LD_VAR 0 1
50647: PPUSH
50648: CALL_OW 437
50652: IFFALSE 50700
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50654: LD_VAR 0 1
50658: PPUSH
50659: CALL_OW 437
50663: PUSH
50664: LD_INT 1
50666: ARRAY
50667: PUSH
50668: LD_INT 1
50670: ARRAY
50671: PUSH
50672: LD_STRING l
50674: EQUAL
50675: IFFALSE 50700
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50677: LD_ADDR_VAR 0 2
50681: PUSH
50682: LD_VAR 0 1
50686: PPUSH
50687: CALL_OW 437
50691: PUSH
50692: LD_INT 1
50694: ARRAY
50695: PUSH
50696: LD_INT 4
50698: ARRAY
50699: ST_TO_ADDR
// end ;
50700: LD_VAR 0 2
50704: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50705: LD_INT 0
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
// if not base_units then
50711: LD_VAR 0 1
50715: NOT
50716: IFFALSE 50720
// exit ;
50718: GO 50807
// result := false ;
50720: LD_ADDR_VAR 0 2
50724: PUSH
50725: LD_INT 0
50727: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50728: LD_ADDR_VAR 0 5
50732: PUSH
50733: LD_VAR 0 1
50737: PPUSH
50738: LD_INT 21
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PPUSH
50748: CALL_OW 72
50752: ST_TO_ADDR
// if not tmp then
50753: LD_VAR 0 5
50757: NOT
50758: IFFALSE 50762
// exit ;
50760: GO 50807
// for i in tmp do
50762: LD_ADDR_VAR 0 3
50766: PUSH
50767: LD_VAR 0 5
50771: PUSH
50772: FOR_IN
50773: IFFALSE 50805
// begin result := EnemyInRange ( i , 22 ) ;
50775: LD_ADDR_VAR 0 2
50779: PUSH
50780: LD_VAR 0 3
50784: PPUSH
50785: LD_INT 22
50787: PPUSH
50788: CALL 49043 0 2
50792: ST_TO_ADDR
// if result then
50793: LD_VAR 0 2
50797: IFFALSE 50803
// exit ;
50799: POP
50800: POP
50801: GO 50807
// end ;
50803: GO 50772
50805: POP
50806: POP
// end ;
50807: LD_VAR 0 2
50811: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50812: LD_INT 0
50814: PPUSH
50815: PPUSH
// if not units then
50816: LD_VAR 0 1
50820: NOT
50821: IFFALSE 50825
// exit ;
50823: GO 50895
// result := [ ] ;
50825: LD_ADDR_VAR 0 3
50829: PUSH
50830: EMPTY
50831: ST_TO_ADDR
// for i in units do
50832: LD_ADDR_VAR 0 4
50836: PUSH
50837: LD_VAR 0 1
50841: PUSH
50842: FOR_IN
50843: IFFALSE 50893
// if GetTag ( i ) = tag then
50845: LD_VAR 0 4
50849: PPUSH
50850: CALL_OW 110
50854: PUSH
50855: LD_VAR 0 2
50859: EQUAL
50860: IFFALSE 50891
// result := Insert ( result , result + 1 , i ) ;
50862: LD_ADDR_VAR 0 3
50866: PUSH
50867: LD_VAR 0 3
50871: PPUSH
50872: LD_VAR 0 3
50876: PUSH
50877: LD_INT 1
50879: PLUS
50880: PPUSH
50881: LD_VAR 0 4
50885: PPUSH
50886: CALL_OW 2
50890: ST_TO_ADDR
50891: GO 50842
50893: POP
50894: POP
// end ;
50895: LD_VAR 0 3
50899: RET
// export function IsDriver ( un ) ; begin
50900: LD_INT 0
50902: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50903: LD_ADDR_VAR 0 2
50907: PUSH
50908: LD_VAR 0 1
50912: PUSH
50913: LD_INT 55
50915: PUSH
50916: EMPTY
50917: LIST
50918: PPUSH
50919: CALL_OW 69
50923: IN
50924: ST_TO_ADDR
// end ;
50925: LD_VAR 0 2
50929: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50930: LD_INT 0
50932: PPUSH
50933: PPUSH
// list := [ ] ;
50934: LD_ADDR_VAR 0 5
50938: PUSH
50939: EMPTY
50940: ST_TO_ADDR
// case d of 0 :
50941: LD_VAR 0 3
50945: PUSH
50946: LD_INT 0
50948: DOUBLE
50949: EQUAL
50950: IFTRUE 50954
50952: GO 51087
50954: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50955: LD_ADDR_VAR 0 5
50959: PUSH
50960: LD_VAR 0 1
50964: PUSH
50965: LD_INT 4
50967: MINUS
50968: PUSH
50969: LD_VAR 0 2
50973: PUSH
50974: LD_INT 4
50976: MINUS
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: PUSH
50986: LD_VAR 0 1
50990: PUSH
50991: LD_INT 3
50993: MINUS
50994: PUSH
50995: LD_VAR 0 2
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: PUSH
51008: LD_VAR 0 1
51012: PUSH
51013: LD_INT 4
51015: PLUS
51016: PUSH
51017: LD_VAR 0 2
51021: PUSH
51022: LD_INT 4
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: PUSH
51030: LD_VAR 0 1
51034: PUSH
51035: LD_INT 3
51037: PLUS
51038: PUSH
51039: LD_VAR 0 2
51043: PUSH
51044: LD_INT 3
51046: PLUS
51047: PUSH
51048: LD_INT 5
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: PUSH
51056: LD_VAR 0 1
51060: PUSH
51061: LD_VAR 0 2
51065: PUSH
51066: LD_INT 4
51068: PLUS
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: LIST
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: ST_TO_ADDR
// end ; 1 :
51085: GO 51785
51087: LD_INT 1
51089: DOUBLE
51090: EQUAL
51091: IFTRUE 51095
51093: GO 51228
51095: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51096: LD_ADDR_VAR 0 5
51100: PUSH
51101: LD_VAR 0 1
51105: PUSH
51106: LD_VAR 0 2
51110: PUSH
51111: LD_INT 4
51113: MINUS
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: PUSH
51123: LD_VAR 0 1
51127: PUSH
51128: LD_INT 3
51130: MINUS
51131: PUSH
51132: LD_VAR 0 2
51136: PUSH
51137: LD_INT 3
51139: MINUS
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: LIST
51148: PUSH
51149: LD_VAR 0 1
51153: PUSH
51154: LD_INT 4
51156: MINUS
51157: PUSH
51158: LD_VAR 0 2
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: PUSH
51171: LD_VAR 0 1
51175: PUSH
51176: LD_VAR 0 2
51180: PUSH
51181: LD_INT 3
51183: PLUS
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: LIST
51192: PUSH
51193: LD_VAR 0 1
51197: PUSH
51198: LD_INT 4
51200: PLUS
51201: PUSH
51202: LD_VAR 0 2
51206: PUSH
51207: LD_INT 4
51209: PLUS
51210: PUSH
51211: LD_INT 5
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: ST_TO_ADDR
// end ; 2 :
51226: GO 51785
51228: LD_INT 2
51230: DOUBLE
51231: EQUAL
51232: IFTRUE 51236
51234: GO 51365
51236: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51237: LD_ADDR_VAR 0 5
51241: PUSH
51242: LD_VAR 0 1
51246: PUSH
51247: LD_VAR 0 2
51251: PUSH
51252: LD_INT 3
51254: MINUS
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: LIST
51263: PUSH
51264: LD_VAR 0 1
51268: PUSH
51269: LD_INT 4
51271: PLUS
51272: PUSH
51273: LD_VAR 0 2
51277: PUSH
51278: LD_INT 4
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: PUSH
51286: LD_VAR 0 1
51290: PUSH
51291: LD_VAR 0 2
51295: PUSH
51296: LD_INT 4
51298: PLUS
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: PUSH
51308: LD_VAR 0 1
51312: PUSH
51313: LD_INT 3
51315: MINUS
51316: PUSH
51317: LD_VAR 0 2
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: PUSH
51330: LD_VAR 0 1
51334: PUSH
51335: LD_INT 4
51337: MINUS
51338: PUSH
51339: LD_VAR 0 2
51343: PUSH
51344: LD_INT 4
51346: MINUS
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: ST_TO_ADDR
// end ; 3 :
51363: GO 51785
51365: LD_INT 3
51367: DOUBLE
51368: EQUAL
51369: IFTRUE 51373
51371: GO 51506
51373: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51374: LD_ADDR_VAR 0 5
51378: PUSH
51379: LD_VAR 0 1
51383: PUSH
51384: LD_INT 3
51386: PLUS
51387: PUSH
51388: LD_VAR 0 2
51392: PUSH
51393: LD_INT 4
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: PUSH
51401: LD_VAR 0 1
51405: PUSH
51406: LD_INT 4
51408: PLUS
51409: PUSH
51410: LD_VAR 0 2
51414: PUSH
51415: LD_INT 4
51417: PLUS
51418: PUSH
51419: LD_INT 5
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: LIST
51426: PUSH
51427: LD_VAR 0 1
51431: PUSH
51432: LD_INT 4
51434: MINUS
51435: PUSH
51436: LD_VAR 0 2
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: LIST
51448: PUSH
51449: LD_VAR 0 1
51453: PUSH
51454: LD_VAR 0 2
51458: PUSH
51459: LD_INT 4
51461: MINUS
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: PUSH
51471: LD_VAR 0 1
51475: PUSH
51476: LD_INT 3
51478: MINUS
51479: PUSH
51480: LD_VAR 0 2
51484: PUSH
51485: LD_INT 3
51487: MINUS
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: ST_TO_ADDR
// end ; 4 :
51504: GO 51785
51506: LD_INT 4
51508: DOUBLE
51509: EQUAL
51510: IFTRUE 51514
51512: GO 51647
51514: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51515: LD_ADDR_VAR 0 5
51519: PUSH
51520: LD_VAR 0 1
51524: PUSH
51525: LD_VAR 0 2
51529: PUSH
51530: LD_INT 4
51532: PLUS
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: LIST
51541: PUSH
51542: LD_VAR 0 1
51546: PUSH
51547: LD_INT 3
51549: PLUS
51550: PUSH
51551: LD_VAR 0 2
51555: PUSH
51556: LD_INT 3
51558: PLUS
51559: PUSH
51560: LD_INT 5
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: PUSH
51568: LD_VAR 0 1
51572: PUSH
51573: LD_INT 4
51575: PLUS
51576: PUSH
51577: LD_VAR 0 2
51581: PUSH
51582: LD_INT 4
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: LIST
51589: PUSH
51590: LD_VAR 0 1
51594: PUSH
51595: LD_VAR 0 2
51599: PUSH
51600: LD_INT 3
51602: MINUS
51603: PUSH
51604: LD_INT 3
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: PUSH
51612: LD_VAR 0 1
51616: PUSH
51617: LD_INT 4
51619: MINUS
51620: PUSH
51621: LD_VAR 0 2
51625: PUSH
51626: LD_INT 4
51628: MINUS
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: LIST
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: ST_TO_ADDR
// end ; 5 :
51645: GO 51785
51647: LD_INT 5
51649: DOUBLE
51650: EQUAL
51651: IFTRUE 51655
51653: GO 51784
51655: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51656: LD_ADDR_VAR 0 5
51660: PUSH
51661: LD_VAR 0 1
51665: PUSH
51666: LD_INT 4
51668: MINUS
51669: PUSH
51670: LD_VAR 0 2
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: LIST
51682: PUSH
51683: LD_VAR 0 1
51687: PUSH
51688: LD_VAR 0 2
51692: PUSH
51693: LD_INT 4
51695: MINUS
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: PUSH
51705: LD_VAR 0 1
51709: PUSH
51710: LD_INT 4
51712: PLUS
51713: PUSH
51714: LD_VAR 0 2
51718: PUSH
51719: LD_INT 4
51721: PLUS
51722: PUSH
51723: LD_INT 5
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: LIST
51730: PUSH
51731: LD_VAR 0 1
51735: PUSH
51736: LD_INT 3
51738: PLUS
51739: PUSH
51740: LD_VAR 0 2
51744: PUSH
51745: LD_INT 4
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: PUSH
51753: LD_VAR 0 1
51757: PUSH
51758: LD_VAR 0 2
51762: PUSH
51763: LD_INT 3
51765: PLUS
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: ST_TO_ADDR
// end ; end ;
51782: GO 51785
51784: POP
// result := list ;
51785: LD_ADDR_VAR 0 4
51789: PUSH
51790: LD_VAR 0 5
51794: ST_TO_ADDR
// end ;
51795: LD_VAR 0 4
51799: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51800: LD_INT 0
51802: PPUSH
51803: PPUSH
51804: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51805: LD_VAR 0 1
51809: NOT
51810: PUSH
51811: LD_VAR 0 2
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 4
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: IN
51834: NOT
51835: OR
51836: IFFALSE 51840
// exit ;
51838: GO 51932
// tmp := [ ] ;
51840: LD_ADDR_VAR 0 5
51844: PUSH
51845: EMPTY
51846: ST_TO_ADDR
// for i in units do
51847: LD_ADDR_VAR 0 4
51851: PUSH
51852: LD_VAR 0 1
51856: PUSH
51857: FOR_IN
51858: IFFALSE 51901
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51860: LD_ADDR_VAR 0 5
51864: PUSH
51865: LD_VAR 0 5
51869: PPUSH
51870: LD_VAR 0 5
51874: PUSH
51875: LD_INT 1
51877: PLUS
51878: PPUSH
51879: LD_VAR 0 4
51883: PPUSH
51884: LD_VAR 0 2
51888: PPUSH
51889: CALL_OW 259
51893: PPUSH
51894: CALL_OW 2
51898: ST_TO_ADDR
51899: GO 51857
51901: POP
51902: POP
// if not tmp then
51903: LD_VAR 0 5
51907: NOT
51908: IFFALSE 51912
// exit ;
51910: GO 51932
// result := SortListByListDesc ( units , tmp ) ;
51912: LD_ADDR_VAR 0 3
51916: PUSH
51917: LD_VAR 0 1
51921: PPUSH
51922: LD_VAR 0 5
51926: PPUSH
51927: CALL_OW 77
51931: ST_TO_ADDR
// end ;
51932: LD_VAR 0 3
51936: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51937: LD_INT 0
51939: PPUSH
51940: PPUSH
51941: PPUSH
// result := false ;
51942: LD_ADDR_VAR 0 3
51946: PUSH
51947: LD_INT 0
51949: ST_TO_ADDR
// x := GetX ( building ) ;
51950: LD_ADDR_VAR 0 4
51954: PUSH
51955: LD_VAR 0 2
51959: PPUSH
51960: CALL_OW 250
51964: ST_TO_ADDR
// y := GetY ( building ) ;
51965: LD_ADDR_VAR 0 5
51969: PUSH
51970: LD_VAR 0 2
51974: PPUSH
51975: CALL_OW 251
51979: ST_TO_ADDR
// if not building or not x or not y then
51980: LD_VAR 0 2
51984: NOT
51985: PUSH
51986: LD_VAR 0 4
51990: NOT
51991: OR
51992: PUSH
51993: LD_VAR 0 5
51997: NOT
51998: OR
51999: IFFALSE 52003
// exit ;
52001: GO 52095
// if GetTaskList ( unit ) then
52003: LD_VAR 0 1
52007: PPUSH
52008: CALL_OW 437
52012: IFFALSE 52095
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52014: LD_STRING e
52016: PUSH
52017: LD_VAR 0 1
52021: PPUSH
52022: CALL_OW 437
52026: PUSH
52027: LD_INT 1
52029: ARRAY
52030: PUSH
52031: LD_INT 1
52033: ARRAY
52034: EQUAL
52035: PUSH
52036: LD_VAR 0 4
52040: PUSH
52041: LD_VAR 0 1
52045: PPUSH
52046: CALL_OW 437
52050: PUSH
52051: LD_INT 1
52053: ARRAY
52054: PUSH
52055: LD_INT 2
52057: ARRAY
52058: EQUAL
52059: AND
52060: PUSH
52061: LD_VAR 0 5
52065: PUSH
52066: LD_VAR 0 1
52070: PPUSH
52071: CALL_OW 437
52075: PUSH
52076: LD_INT 1
52078: ARRAY
52079: PUSH
52080: LD_INT 3
52082: ARRAY
52083: EQUAL
52084: AND
52085: IFFALSE 52095
// result := true end ;
52087: LD_ADDR_VAR 0 3
52091: PUSH
52092: LD_INT 1
52094: ST_TO_ADDR
// end ;
52095: LD_VAR 0 3
52099: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52100: LD_INT 0
52102: PPUSH
// result := false ;
52103: LD_ADDR_VAR 0 4
52107: PUSH
52108: LD_INT 0
52110: ST_TO_ADDR
// if GetTaskList ( unit ) then
52111: LD_VAR 0 1
52115: PPUSH
52116: CALL_OW 437
52120: IFFALSE 52203
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52122: LD_STRING M
52124: PUSH
52125: LD_VAR 0 1
52129: PPUSH
52130: CALL_OW 437
52134: PUSH
52135: LD_INT 1
52137: ARRAY
52138: PUSH
52139: LD_INT 1
52141: ARRAY
52142: EQUAL
52143: PUSH
52144: LD_VAR 0 2
52148: PUSH
52149: LD_VAR 0 1
52153: PPUSH
52154: CALL_OW 437
52158: PUSH
52159: LD_INT 1
52161: ARRAY
52162: PUSH
52163: LD_INT 2
52165: ARRAY
52166: EQUAL
52167: AND
52168: PUSH
52169: LD_VAR 0 3
52173: PUSH
52174: LD_VAR 0 1
52178: PPUSH
52179: CALL_OW 437
52183: PUSH
52184: LD_INT 1
52186: ARRAY
52187: PUSH
52188: LD_INT 3
52190: ARRAY
52191: EQUAL
52192: AND
52193: IFFALSE 52203
// result := true ;
52195: LD_ADDR_VAR 0 4
52199: PUSH
52200: LD_INT 1
52202: ST_TO_ADDR
// end ; end ;
52203: LD_VAR 0 4
52207: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52208: LD_INT 0
52210: PPUSH
52211: PPUSH
52212: PPUSH
52213: PPUSH
// if not unit or not area then
52214: LD_VAR 0 1
52218: NOT
52219: PUSH
52220: LD_VAR 0 2
52224: NOT
52225: OR
52226: IFFALSE 52230
// exit ;
52228: GO 52394
// tmp := AreaToList ( area , i ) ;
52230: LD_ADDR_VAR 0 6
52234: PUSH
52235: LD_VAR 0 2
52239: PPUSH
52240: LD_VAR 0 5
52244: PPUSH
52245: CALL_OW 517
52249: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52250: LD_ADDR_VAR 0 5
52254: PUSH
52255: DOUBLE
52256: LD_INT 1
52258: DEC
52259: ST_TO_ADDR
52260: LD_VAR 0 6
52264: PUSH
52265: LD_INT 1
52267: ARRAY
52268: PUSH
52269: FOR_TO
52270: IFFALSE 52392
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52272: LD_ADDR_VAR 0 7
52276: PUSH
52277: LD_VAR 0 6
52281: PUSH
52282: LD_INT 1
52284: ARRAY
52285: PUSH
52286: LD_VAR 0 5
52290: ARRAY
52291: PUSH
52292: LD_VAR 0 6
52296: PUSH
52297: LD_INT 2
52299: ARRAY
52300: PUSH
52301: LD_VAR 0 5
52305: ARRAY
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52311: LD_VAR 0 7
52315: PUSH
52316: LD_INT 1
52318: ARRAY
52319: PPUSH
52320: LD_VAR 0 7
52324: PUSH
52325: LD_INT 2
52327: ARRAY
52328: PPUSH
52329: CALL_OW 428
52333: PUSH
52334: LD_INT 0
52336: EQUAL
52337: IFFALSE 52390
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52339: LD_VAR 0 1
52343: PPUSH
52344: LD_VAR 0 7
52348: PUSH
52349: LD_INT 1
52351: ARRAY
52352: PPUSH
52353: LD_VAR 0 7
52357: PUSH
52358: LD_INT 2
52360: ARRAY
52361: PPUSH
52362: LD_VAR 0 3
52366: PPUSH
52367: CALL_OW 48
// result := IsPlaced ( unit ) ;
52371: LD_ADDR_VAR 0 4
52375: PUSH
52376: LD_VAR 0 1
52380: PPUSH
52381: CALL_OW 305
52385: ST_TO_ADDR
// exit ;
52386: POP
52387: POP
52388: GO 52394
// end ; end ;
52390: GO 52269
52392: POP
52393: POP
// end ;
52394: LD_VAR 0 4
52398: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52399: LD_INT 0
52401: PPUSH
52402: PPUSH
52403: PPUSH
// if not side or side > 8 then
52404: LD_VAR 0 1
52408: NOT
52409: PUSH
52410: LD_VAR 0 1
52414: PUSH
52415: LD_INT 8
52417: GREATER
52418: OR
52419: IFFALSE 52423
// exit ;
52421: GO 52610
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52423: LD_ADDR_VAR 0 4
52427: PUSH
52428: LD_INT 22
52430: PUSH
52431: LD_VAR 0 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 21
52442: PUSH
52443: LD_INT 3
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PPUSH
52454: CALL_OW 69
52458: ST_TO_ADDR
// if not tmp then
52459: LD_VAR 0 4
52463: NOT
52464: IFFALSE 52468
// exit ;
52466: GO 52610
// enable_addtolog := true ;
52468: LD_ADDR_OWVAR 81
52472: PUSH
52473: LD_INT 1
52475: ST_TO_ADDR
// AddToLog ( [ ) ;
52476: LD_STRING [
52478: PPUSH
52479: CALL_OW 561
// for i in tmp do
52483: LD_ADDR_VAR 0 3
52487: PUSH
52488: LD_VAR 0 4
52492: PUSH
52493: FOR_IN
52494: IFFALSE 52601
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52496: LD_STRING [
52498: PUSH
52499: LD_VAR 0 3
52503: PPUSH
52504: CALL_OW 266
52508: STR
52509: PUSH
52510: LD_STRING , 
52512: STR
52513: PUSH
52514: LD_VAR 0 3
52518: PPUSH
52519: CALL_OW 250
52523: STR
52524: PUSH
52525: LD_STRING , 
52527: STR
52528: PUSH
52529: LD_VAR 0 3
52533: PPUSH
52534: CALL_OW 251
52538: STR
52539: PUSH
52540: LD_STRING , 
52542: STR
52543: PUSH
52544: LD_VAR 0 3
52548: PPUSH
52549: CALL_OW 254
52553: STR
52554: PUSH
52555: LD_STRING , 
52557: STR
52558: PUSH
52559: LD_VAR 0 3
52563: PPUSH
52564: LD_INT 1
52566: PPUSH
52567: CALL_OW 268
52571: STR
52572: PUSH
52573: LD_STRING , 
52575: STR
52576: PUSH
52577: LD_VAR 0 3
52581: PPUSH
52582: LD_INT 2
52584: PPUSH
52585: CALL_OW 268
52589: STR
52590: PUSH
52591: LD_STRING ],
52593: STR
52594: PPUSH
52595: CALL_OW 561
// end ;
52599: GO 52493
52601: POP
52602: POP
// AddToLog ( ]; ) ;
52603: LD_STRING ];
52605: PPUSH
52606: CALL_OW 561
// end ;
52610: LD_VAR 0 2
52614: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52615: LD_INT 0
52617: PPUSH
52618: PPUSH
52619: PPUSH
52620: PPUSH
52621: PPUSH
// if not area or not rate or not max then
52622: LD_VAR 0 1
52626: NOT
52627: PUSH
52628: LD_VAR 0 2
52632: NOT
52633: OR
52634: PUSH
52635: LD_VAR 0 4
52639: NOT
52640: OR
52641: IFFALSE 52645
// exit ;
52643: GO 52837
// while 1 do
52645: LD_INT 1
52647: IFFALSE 52837
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52649: LD_ADDR_VAR 0 9
52653: PUSH
52654: LD_VAR 0 1
52658: PPUSH
52659: LD_INT 1
52661: PPUSH
52662: CALL_OW 287
52666: PUSH
52667: LD_INT 10
52669: MUL
52670: ST_TO_ADDR
// r := rate / 10 ;
52671: LD_ADDR_VAR 0 7
52675: PUSH
52676: LD_VAR 0 2
52680: PUSH
52681: LD_INT 10
52683: DIVREAL
52684: ST_TO_ADDR
// time := 1 1$00 ;
52685: LD_ADDR_VAR 0 8
52689: PUSH
52690: LD_INT 2100
52692: ST_TO_ADDR
// if amount < min then
52693: LD_VAR 0 9
52697: PUSH
52698: LD_VAR 0 3
52702: LESS
52703: IFFALSE 52721
// r := r * 2 else
52705: LD_ADDR_VAR 0 7
52709: PUSH
52710: LD_VAR 0 7
52714: PUSH
52715: LD_INT 2
52717: MUL
52718: ST_TO_ADDR
52719: GO 52747
// if amount > max then
52721: LD_VAR 0 9
52725: PUSH
52726: LD_VAR 0 4
52730: GREATER
52731: IFFALSE 52747
// r := r / 2 ;
52733: LD_ADDR_VAR 0 7
52737: PUSH
52738: LD_VAR 0 7
52742: PUSH
52743: LD_INT 2
52745: DIVREAL
52746: ST_TO_ADDR
// time := time / r ;
52747: LD_ADDR_VAR 0 8
52751: PUSH
52752: LD_VAR 0 8
52756: PUSH
52757: LD_VAR 0 7
52761: DIVREAL
52762: ST_TO_ADDR
// if time < 0 then
52763: LD_VAR 0 8
52767: PUSH
52768: LD_INT 0
52770: LESS
52771: IFFALSE 52788
// time := time * - 1 ;
52773: LD_ADDR_VAR 0 8
52777: PUSH
52778: LD_VAR 0 8
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: MUL
52787: ST_TO_ADDR
// wait ( time ) ;
52788: LD_VAR 0 8
52792: PPUSH
52793: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52797: LD_INT 35
52799: PPUSH
52800: LD_INT 875
52802: PPUSH
52803: CALL_OW 12
52807: PPUSH
52808: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52812: LD_INT 1
52814: PPUSH
52815: LD_INT 5
52817: PPUSH
52818: CALL_OW 12
52822: PPUSH
52823: LD_VAR 0 1
52827: PPUSH
52828: LD_INT 1
52830: PPUSH
52831: CALL_OW 55
// end ;
52835: GO 52645
// end ;
52837: LD_VAR 0 5
52841: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52842: LD_INT 0
52844: PPUSH
52845: PPUSH
52846: PPUSH
52847: PPUSH
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
// if not turrets or not factories then
52852: LD_VAR 0 1
52856: NOT
52857: PUSH
52858: LD_VAR 0 2
52862: NOT
52863: OR
52864: IFFALSE 52868
// exit ;
52866: GO 53175
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52868: LD_ADDR_VAR 0 10
52872: PUSH
52873: LD_INT 5
52875: PUSH
52876: LD_INT 6
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 4
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: PUSH
52896: LD_INT 5
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 24
52910: PUSH
52911: LD_INT 25
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 23
52920: PUSH
52921: LD_INT 27
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 42
52934: PUSH
52935: LD_INT 43
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 44
52944: PUSH
52945: LD_INT 46
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 45
52954: PUSH
52955: LD_INT 47
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: LIST
52971: ST_TO_ADDR
// result := [ ] ;
52972: LD_ADDR_VAR 0 3
52976: PUSH
52977: EMPTY
52978: ST_TO_ADDR
// for i in turrets do
52979: LD_ADDR_VAR 0 4
52983: PUSH
52984: LD_VAR 0 1
52988: PUSH
52989: FOR_IN
52990: IFFALSE 53173
// begin nat := GetNation ( i ) ;
52992: LD_ADDR_VAR 0 7
52996: PUSH
52997: LD_VAR 0 4
53001: PPUSH
53002: CALL_OW 248
53006: ST_TO_ADDR
// weapon := 0 ;
53007: LD_ADDR_VAR 0 8
53011: PUSH
53012: LD_INT 0
53014: ST_TO_ADDR
// if not nat then
53015: LD_VAR 0 7
53019: NOT
53020: IFFALSE 53024
// continue ;
53022: GO 52989
// for j in list [ nat ] do
53024: LD_ADDR_VAR 0 5
53028: PUSH
53029: LD_VAR 0 10
53033: PUSH
53034: LD_VAR 0 7
53038: ARRAY
53039: PUSH
53040: FOR_IN
53041: IFFALSE 53082
// if GetBWeapon ( i ) = j [ 1 ] then
53043: LD_VAR 0 4
53047: PPUSH
53048: CALL_OW 269
53052: PUSH
53053: LD_VAR 0 5
53057: PUSH
53058: LD_INT 1
53060: ARRAY
53061: EQUAL
53062: IFFALSE 53080
// begin weapon := j [ 2 ] ;
53064: LD_ADDR_VAR 0 8
53068: PUSH
53069: LD_VAR 0 5
53073: PUSH
53074: LD_INT 2
53076: ARRAY
53077: ST_TO_ADDR
// break ;
53078: GO 53082
// end ;
53080: GO 53040
53082: POP
53083: POP
// if not weapon then
53084: LD_VAR 0 8
53088: NOT
53089: IFFALSE 53093
// continue ;
53091: GO 52989
// for k in factories do
53093: LD_ADDR_VAR 0 6
53097: PUSH
53098: LD_VAR 0 2
53102: PUSH
53103: FOR_IN
53104: IFFALSE 53169
// begin weapons := AvailableWeaponList ( k ) ;
53106: LD_ADDR_VAR 0 9
53110: PUSH
53111: LD_VAR 0 6
53115: PPUSH
53116: CALL_OW 478
53120: ST_TO_ADDR
// if not weapons then
53121: LD_VAR 0 9
53125: NOT
53126: IFFALSE 53130
// continue ;
53128: GO 53103
// if weapon in weapons then
53130: LD_VAR 0 8
53134: PUSH
53135: LD_VAR 0 9
53139: IN
53140: IFFALSE 53167
// begin result := [ i , weapon ] ;
53142: LD_ADDR_VAR 0 3
53146: PUSH
53147: LD_VAR 0 4
53151: PUSH
53152: LD_VAR 0 8
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// exit ;
53161: POP
53162: POP
53163: POP
53164: POP
53165: GO 53175
// end ; end ;
53167: GO 53103
53169: POP
53170: POP
// end ;
53171: GO 52989
53173: POP
53174: POP
// end ;
53175: LD_VAR 0 3
53179: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53180: LD_INT 0
53182: PPUSH
// if not side or side > 8 then
53183: LD_VAR 0 3
53187: NOT
53188: PUSH
53189: LD_VAR 0 3
53193: PUSH
53194: LD_INT 8
53196: GREATER
53197: OR
53198: IFFALSE 53202
// exit ;
53200: GO 53261
// if not range then
53202: LD_VAR 0 4
53206: NOT
53207: IFFALSE 53218
// range := - 12 ;
53209: LD_ADDR_VAR 0 4
53213: PUSH
53214: LD_INT 12
53216: NEG
53217: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53218: LD_VAR 0 1
53222: PPUSH
53223: LD_VAR 0 2
53227: PPUSH
53228: LD_VAR 0 3
53232: PPUSH
53233: LD_VAR 0 4
53237: PPUSH
53238: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53242: LD_VAR 0 1
53246: PPUSH
53247: LD_VAR 0 2
53251: PPUSH
53252: LD_VAR 0 3
53256: PPUSH
53257: CALL_OW 331
// end ;
53261: LD_VAR 0 5
53265: RET
// export function Video ( mode ) ; begin
53266: LD_INT 0
53268: PPUSH
// ingame_video = mode ;
53269: LD_ADDR_OWVAR 52
53273: PUSH
53274: LD_VAR 0 1
53278: ST_TO_ADDR
// interface_hidden = mode ;
53279: LD_ADDR_OWVAR 54
53283: PUSH
53284: LD_VAR 0 1
53288: ST_TO_ADDR
// end ;
53289: LD_VAR 0 2
53293: RET
// export function Join ( array , element ) ; begin
53294: LD_INT 0
53296: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53297: LD_ADDR_VAR 0 3
53301: PUSH
53302: LD_VAR 0 1
53306: PPUSH
53307: LD_VAR 0 1
53311: PUSH
53312: LD_INT 1
53314: PLUS
53315: PPUSH
53316: LD_VAR 0 2
53320: PPUSH
53321: CALL_OW 1
53325: ST_TO_ADDR
// end ;
53326: LD_VAR 0 3
53330: RET
// export function JoinUnion ( array , element ) ; begin
53331: LD_INT 0
53333: PPUSH
// result := array union element ;
53334: LD_ADDR_VAR 0 3
53338: PUSH
53339: LD_VAR 0 1
53343: PUSH
53344: LD_VAR 0 2
53348: UNION
53349: ST_TO_ADDR
// end ;
53350: LD_VAR 0 3
53354: RET
// export function GetBehemoths ( side ) ; begin
53355: LD_INT 0
53357: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53358: LD_ADDR_VAR 0 2
53362: PUSH
53363: LD_INT 22
53365: PUSH
53366: LD_VAR 0 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 31
53377: PUSH
53378: LD_INT 25
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PPUSH
53389: CALL_OW 69
53393: ST_TO_ADDR
// end ;
53394: LD_VAR 0 2
53398: RET
// export function Shuffle ( array ) ; var i , index ; begin
53399: LD_INT 0
53401: PPUSH
53402: PPUSH
53403: PPUSH
// result := [ ] ;
53404: LD_ADDR_VAR 0 2
53408: PUSH
53409: EMPTY
53410: ST_TO_ADDR
// if not array then
53411: LD_VAR 0 1
53415: NOT
53416: IFFALSE 53420
// exit ;
53418: GO 53519
// Randomize ;
53420: CALL_OW 10
// for i = array downto 1 do
53424: LD_ADDR_VAR 0 3
53428: PUSH
53429: DOUBLE
53430: LD_VAR 0 1
53434: INC
53435: ST_TO_ADDR
53436: LD_INT 1
53438: PUSH
53439: FOR_DOWNTO
53440: IFFALSE 53517
// begin index := rand ( 1 , array ) ;
53442: LD_ADDR_VAR 0 4
53446: PUSH
53447: LD_INT 1
53449: PPUSH
53450: LD_VAR 0 1
53454: PPUSH
53455: CALL_OW 12
53459: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53460: LD_ADDR_VAR 0 2
53464: PUSH
53465: LD_VAR 0 2
53469: PPUSH
53470: LD_VAR 0 2
53474: PUSH
53475: LD_INT 1
53477: PLUS
53478: PPUSH
53479: LD_VAR 0 1
53483: PUSH
53484: LD_VAR 0 4
53488: ARRAY
53489: PPUSH
53490: CALL_OW 2
53494: ST_TO_ADDR
// array := Delete ( array , index ) ;
53495: LD_ADDR_VAR 0 1
53499: PUSH
53500: LD_VAR 0 1
53504: PPUSH
53505: LD_VAR 0 4
53509: PPUSH
53510: CALL_OW 3
53514: ST_TO_ADDR
// end ;
53515: GO 53439
53517: POP
53518: POP
// end ;
53519: LD_VAR 0 2
53523: RET
// export function GetBaseMaterials ( base ) ; begin
53524: LD_INT 0
53526: PPUSH
// result := [ 0 , 0 , 0 ] ;
53527: LD_ADDR_VAR 0 2
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: ST_TO_ADDR
// if not base then
53546: LD_VAR 0 1
53550: NOT
53551: IFFALSE 53555
// exit ;
53553: GO 53604
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53555: LD_ADDR_VAR 0 2
53559: PUSH
53560: LD_VAR 0 1
53564: PPUSH
53565: LD_INT 1
53567: PPUSH
53568: CALL_OW 275
53572: PUSH
53573: LD_VAR 0 1
53577: PPUSH
53578: LD_INT 2
53580: PPUSH
53581: CALL_OW 275
53585: PUSH
53586: LD_VAR 0 1
53590: PPUSH
53591: LD_INT 3
53593: PPUSH
53594: CALL_OW 275
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: LIST
53603: ST_TO_ADDR
// end ;
53604: LD_VAR 0 2
53608: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53609: LD_INT 0
53611: PPUSH
53612: PPUSH
// result := array ;
53613: LD_ADDR_VAR 0 3
53617: PUSH
53618: LD_VAR 0 1
53622: ST_TO_ADDR
// if size > 0 then
53623: LD_VAR 0 2
53627: PUSH
53628: LD_INT 0
53630: GREATER
53631: IFFALSE 53677
// for i := array downto size do
53633: LD_ADDR_VAR 0 4
53637: PUSH
53638: DOUBLE
53639: LD_VAR 0 1
53643: INC
53644: ST_TO_ADDR
53645: LD_VAR 0 2
53649: PUSH
53650: FOR_DOWNTO
53651: IFFALSE 53675
// result := Delete ( result , result ) ;
53653: LD_ADDR_VAR 0 3
53657: PUSH
53658: LD_VAR 0 3
53662: PPUSH
53663: LD_VAR 0 3
53667: PPUSH
53668: CALL_OW 3
53672: ST_TO_ADDR
53673: GO 53650
53675: POP
53676: POP
// end ;
53677: LD_VAR 0 3
53681: RET
// export function ComExit ( unit ) ; var tmp ; begin
53682: LD_INT 0
53684: PPUSH
53685: PPUSH
// if not IsInUnit ( unit ) then
53686: LD_VAR 0 1
53690: PPUSH
53691: CALL_OW 310
53695: NOT
53696: IFFALSE 53700
// exit ;
53698: GO 53760
// tmp := IsInUnit ( unit ) ;
53700: LD_ADDR_VAR 0 3
53704: PUSH
53705: LD_VAR 0 1
53709: PPUSH
53710: CALL_OW 310
53714: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53715: LD_VAR 0 3
53719: PPUSH
53720: CALL_OW 247
53724: PUSH
53725: LD_INT 2
53727: EQUAL
53728: IFFALSE 53741
// ComExitVehicle ( unit ) else
53730: LD_VAR 0 1
53734: PPUSH
53735: CALL_OW 121
53739: GO 53750
// ComExitBuilding ( unit ) ;
53741: LD_VAR 0 1
53745: PPUSH
53746: CALL_OW 122
// result := tmp ;
53750: LD_ADDR_VAR 0 2
53754: PUSH
53755: LD_VAR 0 3
53759: ST_TO_ADDR
// end ;
53760: LD_VAR 0 2
53764: RET
// export function ResetHc ; begin
53765: LD_INT 0
53767: PPUSH
// InitHc ;
53768: CALL_OW 19
// hc_importance := 0 ;
53772: LD_ADDR_OWVAR 32
53776: PUSH
53777: LD_INT 0
53779: ST_TO_ADDR
// end ;
53780: LD_VAR 0 1
53784: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53785: LD_INT 0
53787: PPUSH
53788: PPUSH
53789: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53790: LD_ADDR_VAR 0 6
53794: PUSH
53795: LD_VAR 0 1
53799: PUSH
53800: LD_VAR 0 3
53804: PLUS
53805: PUSH
53806: LD_INT 2
53808: DIV
53809: ST_TO_ADDR
// if _x < 0 then
53810: LD_VAR 0 6
53814: PUSH
53815: LD_INT 0
53817: LESS
53818: IFFALSE 53835
// _x := _x * - 1 ;
53820: LD_ADDR_VAR 0 6
53824: PUSH
53825: LD_VAR 0 6
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: MUL
53834: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53835: LD_ADDR_VAR 0 7
53839: PUSH
53840: LD_VAR 0 2
53844: PUSH
53845: LD_VAR 0 4
53849: PLUS
53850: PUSH
53851: LD_INT 2
53853: DIV
53854: ST_TO_ADDR
// if _y < 0 then
53855: LD_VAR 0 7
53859: PUSH
53860: LD_INT 0
53862: LESS
53863: IFFALSE 53880
// _y := _y * - 1 ;
53865: LD_ADDR_VAR 0 7
53869: PUSH
53870: LD_VAR 0 7
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: MUL
53879: ST_TO_ADDR
// result := [ _x , _y ] ;
53880: LD_ADDR_VAR 0 5
53884: PUSH
53885: LD_VAR 0 6
53889: PUSH
53890: LD_VAR 0 7
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// end ;
53899: LD_VAR 0 5
53903: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53904: LD_INT 0
53906: PPUSH
53907: PPUSH
53908: PPUSH
53909: PPUSH
// task := GetTaskList ( unit ) ;
53910: LD_ADDR_VAR 0 7
53914: PUSH
53915: LD_VAR 0 1
53919: PPUSH
53920: CALL_OW 437
53924: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53925: LD_VAR 0 7
53929: NOT
53930: PUSH
53931: LD_VAR 0 1
53935: PPUSH
53936: LD_VAR 0 2
53940: PPUSH
53941: CALL_OW 308
53945: NOT
53946: AND
53947: IFFALSE 53951
// exit ;
53949: GO 54069
// if IsInArea ( unit , area ) then
53951: LD_VAR 0 1
53955: PPUSH
53956: LD_VAR 0 2
53960: PPUSH
53961: CALL_OW 308
53965: IFFALSE 53983
// begin ComMoveToArea ( unit , goAway ) ;
53967: LD_VAR 0 1
53971: PPUSH
53972: LD_VAR 0 3
53976: PPUSH
53977: CALL_OW 113
// exit ;
53981: GO 54069
// end ; if task [ 1 ] [ 1 ] <> M then
53983: LD_VAR 0 7
53987: PUSH
53988: LD_INT 1
53990: ARRAY
53991: PUSH
53992: LD_INT 1
53994: ARRAY
53995: PUSH
53996: LD_STRING M
53998: NONEQUAL
53999: IFFALSE 54003
// exit ;
54001: GO 54069
// x := task [ 1 ] [ 2 ] ;
54003: LD_ADDR_VAR 0 5
54007: PUSH
54008: LD_VAR 0 7
54012: PUSH
54013: LD_INT 1
54015: ARRAY
54016: PUSH
54017: LD_INT 2
54019: ARRAY
54020: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54021: LD_ADDR_VAR 0 6
54025: PUSH
54026: LD_VAR 0 7
54030: PUSH
54031: LD_INT 1
54033: ARRAY
54034: PUSH
54035: LD_INT 3
54037: ARRAY
54038: ST_TO_ADDR
// if InArea ( x , y , area ) then
54039: LD_VAR 0 5
54043: PPUSH
54044: LD_VAR 0 6
54048: PPUSH
54049: LD_VAR 0 2
54053: PPUSH
54054: CALL_OW 309
54058: IFFALSE 54069
// ComStop ( unit ) ;
54060: LD_VAR 0 1
54064: PPUSH
54065: CALL_OW 141
// end ;
54069: LD_VAR 0 4
54073: RET
// export function Abs ( value ) ; begin
54074: LD_INT 0
54076: PPUSH
// result := value ;
54077: LD_ADDR_VAR 0 2
54081: PUSH
54082: LD_VAR 0 1
54086: ST_TO_ADDR
// if value < 0 then
54087: LD_VAR 0 1
54091: PUSH
54092: LD_INT 0
54094: LESS
54095: IFFALSE 54112
// result := value * - 1 ;
54097: LD_ADDR_VAR 0 2
54101: PUSH
54102: LD_VAR 0 1
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: MUL
54111: ST_TO_ADDR
// end ;
54112: LD_VAR 0 2
54116: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54117: LD_INT 0
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
// if not unit or not building then
54127: LD_VAR 0 1
54131: NOT
54132: PUSH
54133: LD_VAR 0 2
54137: NOT
54138: OR
54139: IFFALSE 54143
// exit ;
54141: GO 54369
// x := GetX ( building ) ;
54143: LD_ADDR_VAR 0 4
54147: PUSH
54148: LD_VAR 0 2
54152: PPUSH
54153: CALL_OW 250
54157: ST_TO_ADDR
// y := GetY ( building ) ;
54158: LD_ADDR_VAR 0 6
54162: PUSH
54163: LD_VAR 0 2
54167: PPUSH
54168: CALL_OW 251
54172: ST_TO_ADDR
// d := GetDir ( building ) ;
54173: LD_ADDR_VAR 0 8
54177: PUSH
54178: LD_VAR 0 2
54182: PPUSH
54183: CALL_OW 254
54187: ST_TO_ADDR
// r := 4 ;
54188: LD_ADDR_VAR 0 9
54192: PUSH
54193: LD_INT 4
54195: ST_TO_ADDR
// for i := 1 to 5 do
54196: LD_ADDR_VAR 0 10
54200: PUSH
54201: DOUBLE
54202: LD_INT 1
54204: DEC
54205: ST_TO_ADDR
54206: LD_INT 5
54208: PUSH
54209: FOR_TO
54210: IFFALSE 54367
// begin _x := ShiftX ( x , d , r + i ) ;
54212: LD_ADDR_VAR 0 5
54216: PUSH
54217: LD_VAR 0 4
54221: PPUSH
54222: LD_VAR 0 8
54226: PPUSH
54227: LD_VAR 0 9
54231: PUSH
54232: LD_VAR 0 10
54236: PLUS
54237: PPUSH
54238: CALL_OW 272
54242: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54243: LD_ADDR_VAR 0 7
54247: PUSH
54248: LD_VAR 0 6
54252: PPUSH
54253: LD_VAR 0 8
54257: PPUSH
54258: LD_VAR 0 9
54262: PUSH
54263: LD_VAR 0 10
54267: PLUS
54268: PPUSH
54269: CALL_OW 273
54273: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54274: LD_VAR 0 5
54278: PPUSH
54279: LD_VAR 0 7
54283: PPUSH
54284: CALL_OW 488
54288: PUSH
54289: LD_VAR 0 5
54293: PPUSH
54294: LD_VAR 0 7
54298: PPUSH
54299: CALL_OW 428
54303: PPUSH
54304: CALL_OW 247
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: IN
54319: NOT
54320: AND
54321: IFFALSE 54365
// begin ComMoveXY ( unit , _x , _y ) ;
54323: LD_VAR 0 1
54327: PPUSH
54328: LD_VAR 0 5
54332: PPUSH
54333: LD_VAR 0 7
54337: PPUSH
54338: CALL_OW 111
// result := [ _x , _y ] ;
54342: LD_ADDR_VAR 0 3
54346: PUSH
54347: LD_VAR 0 5
54351: PUSH
54352: LD_VAR 0 7
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// exit ;
54361: POP
54362: POP
54363: GO 54369
// end ; end ;
54365: GO 54209
54367: POP
54368: POP
// end ;
54369: LD_VAR 0 3
54373: RET
