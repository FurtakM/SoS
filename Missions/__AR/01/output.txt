// starting begin ResetFog ;
   0: CALL_OW 335
// end ; end_of_file
   4: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
  11: LD_VAR 0 1
  15: PPUSH
  16: CALL_OW 264
  20: PUSH
  21: LD_EXP 16
  25: EQUAL
  26: IFFALSE 98
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
  28: LD_INT 68
  30: PPUSH
  31: LD_VAR 0 1
  35: PPUSH
  36: CALL_OW 255
  40: PPUSH
  41: CALL_OW 321
  45: PUSH
  46: LD_INT 2
  48: EQUAL
  49: IFFALSE 61
// eff := 70 else
  51: LD_ADDR_VAR 0 4
  55: PUSH
  56: LD_INT 70
  58: ST_TO_ADDR
  59: GO 69
// eff := 30 ;
  61: LD_ADDR_VAR 0 4
  65: PUSH
  66: LD_INT 30
  68: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
  69: LD_VAR 0 1
  73: PPUSH
  74: CALL_OW 250
  78: PPUSH
  79: LD_VAR 0 1
  83: PPUSH
  84: CALL_OW 251
  88: PPUSH
  89: LD_VAR 0 4
  93: PPUSH
  94: CALL_OW 495
// end ; end ;
  98: LD_VAR 0 2
 102: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
 103: LD_INT 0
 105: PPUSH
// end ;
 106: LD_VAR 0 4
 110: RET
// export function SOS_Command ( cmd ) ; begin
 111: LD_INT 0
 113: PPUSH
// end ;
 114: LD_VAR 0 2
 118: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
 119: LD_INT 0
 121: PPUSH
// end ;
 122: LD_VAR 0 6
 126: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
 127: LD_INT 0
 129: PPUSH
 130: PPUSH
// if not vehicle or not factory then
 131: LD_VAR 0 1
 135: NOT
 136: PUSH
 137: LD_VAR 0 2
 141: NOT
 142: OR
 143: IFFALSE 147
// exit ;
 145: GO 378
// if factoryWaypoints >= factory then
 147: LD_EXP 1
 151: PUSH
 152: LD_VAR 0 2
 156: GREATEREQUAL
 157: IFFALSE 378
// if factoryWaypoints [ factory ] then
 159: LD_EXP 1
 163: PUSH
 164: LD_VAR 0 2
 168: ARRAY
 169: IFFALSE 378
// begin if GetControl ( vehicle ) = control_manual then
 171: LD_VAR 0 1
 175: PPUSH
 176: CALL_OW 263
 180: PUSH
 181: LD_INT 1
 183: EQUAL
 184: IFFALSE 265
// begin driver := IsDrivenBy ( vehicle ) ;
 186: LD_ADDR_VAR 0 4
 190: PUSH
 191: LD_VAR 0 1
 195: PPUSH
 196: CALL_OW 311
 200: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
 201: LD_VAR 0 4
 205: PPUSH
 206: LD_EXP 1
 210: PUSH
 211: LD_VAR 0 2
 215: ARRAY
 216: PUSH
 217: LD_INT 1
 219: ARRAY
 220: PPUSH
 221: LD_EXP 1
 225: PUSH
 226: LD_VAR 0 2
 230: ARRAY
 231: PUSH
 232: LD_INT 2
 234: ARRAY
 235: PPUSH
 236: CALL_OW 171
// AddComExitVehicle ( driver ) ;
 240: LD_VAR 0 4
 244: PPUSH
 245: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
 249: LD_VAR 0 4
 253: PPUSH
 254: LD_VAR 0 2
 258: PPUSH
 259: CALL_OW 180
// end else
 263: GO 378
// if GetControl ( vehicle ) = control_remote then
 265: LD_VAR 0 1
 269: PPUSH
 270: CALL_OW 263
 274: PUSH
 275: LD_INT 2
 277: EQUAL
 278: IFFALSE 339
// begin wait ( 0 0$2 ) ;
 280: LD_INT 70
 282: PPUSH
 283: CALL_OW 67
// if Connect ( vehicle ) then
 287: LD_VAR 0 1
 291: PPUSH
 292: CALL 27099 0 1
 296: IFFALSE 337
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
 298: LD_VAR 0 1
 302: PPUSH
 303: LD_EXP 1
 307: PUSH
 308: LD_VAR 0 2
 312: ARRAY
 313: PUSH
 314: LD_INT 1
 316: ARRAY
 317: PPUSH
 318: LD_EXP 1
 322: PUSH
 323: LD_VAR 0 2
 327: ARRAY
 328: PUSH
 329: LD_INT 2
 331: ARRAY
 332: PPUSH
 333: CALL_OW 171
// end else
 337: GO 378
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
 339: LD_VAR 0 1
 343: PPUSH
 344: LD_EXP 1
 348: PUSH
 349: LD_VAR 0 2
 353: ARRAY
 354: PUSH
 355: LD_INT 1
 357: ARRAY
 358: PPUSH
 359: LD_EXP 1
 363: PUSH
 364: LD_VAR 0 2
 368: ARRAY
 369: PUSH
 370: LD_INT 2
 372: ARRAY
 373: PPUSH
 374: CALL_OW 171
// end ; end ;
 378: LD_VAR 0 3
 382: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
 383: LD_INT 0
 385: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
 386: LD_VAR 0 1
 390: PUSH
 391: LD_INT 250
 393: EQUAL
 394: PUSH
 395: LD_VAR 0 2
 399: PPUSH
 400: CALL_OW 264
 404: PUSH
 405: LD_EXP 19
 409: EQUAL
 410: AND
 411: IFFALSE 432
// MinerPlaceMine ( unit , x , y ) ;
 413: LD_VAR 0 2
 417: PPUSH
 418: LD_VAR 0 4
 422: PPUSH
 423: LD_VAR 0 5
 427: PPUSH
 428: CALL 3160 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
 432: LD_VAR 0 1
 436: PUSH
 437: LD_INT 251
 439: EQUAL
 440: PUSH
 441: LD_VAR 0 2
 445: PPUSH
 446: CALL_OW 264
 450: PUSH
 451: LD_EXP 19
 455: EQUAL
 456: AND
 457: IFFALSE 478
// MinerDetonateMine ( unit , x , y ) ;
 459: LD_VAR 0 2
 463: PPUSH
 464: LD_VAR 0 4
 468: PPUSH
 469: LD_VAR 0 5
 473: PPUSH
 474: CALL 3437 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
 478: LD_VAR 0 1
 482: PUSH
 483: LD_INT 252
 485: EQUAL
 486: PUSH
 487: LD_VAR 0 2
 491: PPUSH
 492: CALL_OW 264
 496: PUSH
 497: LD_EXP 19
 501: EQUAL
 502: AND
 503: IFFALSE 524
// MinerCreateMinefield ( unit , x , y ) ;
 505: LD_VAR 0 2
 509: PPUSH
 510: LD_VAR 0 4
 514: PPUSH
 515: LD_VAR 0 5
 519: PPUSH
 520: CALL 3854 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
 524: LD_VAR 0 1
 528: PUSH
 529: LD_INT 253
 531: EQUAL
 532: PUSH
 533: LD_VAR 0 2
 537: PPUSH
 538: CALL_OW 257
 542: PUSH
 543: LD_INT 5
 545: EQUAL
 546: AND
 547: IFFALSE 568
// ComBinocular ( unit , x , y ) ;
 549: LD_VAR 0 2
 553: PPUSH
 554: LD_VAR 0 4
 558: PPUSH
 559: LD_VAR 0 5
 563: PPUSH
 564: CALL 4225 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
 568: LD_VAR 0 1
 572: PUSH
 573: LD_INT 254
 575: EQUAL
 576: PUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 264
 586: PUSH
 587: LD_EXP 14
 591: EQUAL
 592: AND
 593: PUSH
 594: LD_VAR 0 3
 598: PPUSH
 599: CALL_OW 263
 603: PUSH
 604: LD_INT 3
 606: EQUAL
 607: AND
 608: IFFALSE 624
// HackDestroyVehicle ( unit , selectedUnit ) ;
 610: LD_VAR 0 2
 614: PPUSH
 615: LD_VAR 0 3
 619: PPUSH
 620: CALL 2520 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
 624: LD_VAR 0 1
 628: PUSH
 629: LD_INT 255
 631: EQUAL
 632: PUSH
 633: LD_VAR 0 2
 637: PPUSH
 638: CALL_OW 264
 642: PUSH
 643: LD_INT 14
 645: PUSH
 646: LD_INT 53
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: IN
 653: AND
 654: PUSH
 655: LD_VAR 0 4
 659: PPUSH
 660: LD_VAR 0 5
 664: PPUSH
 665: CALL_OW 488
 669: AND
 670: IFFALSE 694
// CutTreeXYR ( unit , x , y , 12 ) ;
 672: LD_VAR 0 2
 676: PPUSH
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_VAR 0 5
 686: PPUSH
 687: LD_INT 12
 689: PPUSH
 690: CALL 1086 0 4
// if cmd = 256 then
 694: LD_VAR 0 1
 698: PUSH
 699: LD_INT 256
 701: EQUAL
 702: IFFALSE 723
// SetFactoryWaypoint ( unit , x , y ) ;
 704: LD_VAR 0 2
 708: PPUSH
 709: LD_VAR 0 4
 713: PPUSH
 714: LD_VAR 0 5
 718: PPUSH
 719: CALL 728 0 3
// end ;
 723: LD_VAR 0 6
 727: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
 728: LD_INT 0
 730: PPUSH
 731: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
 732: LD_VAR 0 1
 736: NOT
 737: PUSH
 738: LD_VAR 0 2
 742: PPUSH
 743: LD_VAR 0 3
 747: PPUSH
 748: CALL_OW 488
 752: NOT
 753: OR
 754: PUSH
 755: LD_VAR 0 1
 759: PPUSH
 760: CALL_OW 266
 764: PUSH
 765: LD_INT 3
 767: NONEQUAL
 768: PUSH
 769: LD_VAR 0 1
 773: PPUSH
 774: CALL_OW 247
 778: PUSH
 779: LD_INT 1
 781: EQUAL
 782: NOT
 783: AND
 784: OR
 785: IFFALSE 789
// exit ;
 787: GO 938
// if GetType ( factory ) = unit_human then
 789: LD_VAR 0 1
 793: PPUSH
 794: CALL_OW 247
 798: PUSH
 799: LD_INT 1
 801: EQUAL
 802: IFFALSE 819
// factory := IsInUnit ( factory ) ;
 804: LD_ADDR_VAR 0 1
 808: PUSH
 809: LD_VAR 0 1
 813: PPUSH
 814: CALL_OW 310
 818: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
 819: LD_VAR 0 1
 823: PPUSH
 824: CALL_OW 266
 828: PUSH
 829: LD_INT 3
 831: NONEQUAL
 832: IFFALSE 836
// exit ;
 834: GO 938
// if HexInfo ( x , y ) = factory then
 836: LD_VAR 0 2
 840: PPUSH
 841: LD_VAR 0 3
 845: PPUSH
 846: CALL_OW 428
 850: PUSH
 851: LD_VAR 0 1
 855: EQUAL
 856: IFFALSE 883
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
 858: LD_ADDR_EXP 1
 862: PUSH
 863: LD_EXP 1
 867: PPUSH
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 1
 880: ST_TO_ADDR
 881: GO 934
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
 883: LD_ADDR_EXP 1
 887: PUSH
 888: LD_EXP 1
 892: PPUSH
 893: LD_VAR 0 1
 897: PPUSH
 898: LD_VAR 0 1
 902: PPUSH
 903: CALL_OW 255
 907: PUSH
 908: LD_VAR 0 1
 912: PUSH
 913: LD_VAR 0 2
 917: PUSH
 918: LD_VAR 0 3
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PPUSH
 929: CALL_OW 1
 933: ST_TO_ADDR
// UpdateFactoryWaypoints ;
 934: CALL 943 0 0
// end ;
 938: LD_VAR 0 4
 942: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
 943: LD_INT 0
 945: PPUSH
 946: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
 947: LD_STRING resetFactoryWaypoint();
 949: PPUSH
 950: CALL_OW 559
// if factoryWaypoints then
 954: LD_EXP 1
 958: IFFALSE 1081
// begin for i := 1 to factoryWaypoints do
 960: LD_ADDR_VAR 0 2
 964: PUSH
 965: DOUBLE
 966: LD_INT 1
 968: DEC
 969: ST_TO_ADDR
 970: LD_EXP 1
 974: PUSH
 975: FOR_TO
 976: IFFALSE 1079
// if factoryWaypoints [ i ] then
 978: LD_EXP 1
 982: PUSH
 983: LD_VAR 0 2
 987: ARRAY
 988: IFFALSE 1077
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
 990: LD_STRING setFactoryWaypointXY(
 992: PUSH
 993: LD_EXP 1
 997: PUSH
 998: LD_VAR 0 2
1002: ARRAY
1003: PUSH
1004: LD_INT 1
1006: ARRAY
1007: STR
1008: PUSH
1009: LD_STRING ,
1011: STR
1012: PUSH
1013: LD_EXP 1
1017: PUSH
1018: LD_VAR 0 2
1022: ARRAY
1023: PUSH
1024: LD_INT 2
1026: ARRAY
1027: STR
1028: PUSH
1029: LD_STRING ,
1031: STR
1032: PUSH
1033: LD_EXP 1
1037: PUSH
1038: LD_VAR 0 2
1042: ARRAY
1043: PUSH
1044: LD_INT 3
1046: ARRAY
1047: STR
1048: PUSH
1049: LD_STRING ,
1051: STR
1052: PUSH
1053: LD_EXP 1
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PUSH
1064: LD_INT 4
1066: ARRAY
1067: STR
1068: PUSH
1069: LD_STRING )
1071: STR
1072: PPUSH
1073: CALL_OW 559
1077: GO 975
1079: POP
1080: POP
// end ; end ;
1081: LD_VAR 0 1
1085: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
1086: LD_INT 0
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
1093: PPUSH
1094: PPUSH
1095: PPUSH
1096: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
1097: LD_VAR 0 1
1101: NOT
1102: PUSH
1103: LD_VAR 0 2
1107: PPUSH
1108: LD_VAR 0 3
1112: PPUSH
1113: CALL_OW 488
1117: NOT
1118: OR
1119: PUSH
1120: LD_VAR 0 4
1124: NOT
1125: OR
1126: IFFALSE 1130
// exit ;
1128: GO 1470
// list := [ ] ;
1130: LD_ADDR_VAR 0 13
1134: PUSH
1135: EMPTY
1136: ST_TO_ADDR
// if x - r < 0 then
1137: LD_VAR 0 2
1141: PUSH
1142: LD_VAR 0 4
1146: MINUS
1147: PUSH
1148: LD_INT 0
1150: LESS
1151: IFFALSE 1163
// min_x := 0 else
1153: LD_ADDR_VAR 0 7
1157: PUSH
1158: LD_INT 0
1160: ST_TO_ADDR
1161: GO 1179
// min_x := x - r ;
1163: LD_ADDR_VAR 0 7
1167: PUSH
1168: LD_VAR 0 2
1172: PUSH
1173: LD_VAR 0 4
1177: MINUS
1178: ST_TO_ADDR
// if y - r < 0 then
1179: LD_VAR 0 3
1183: PUSH
1184: LD_VAR 0 4
1188: MINUS
1189: PUSH
1190: LD_INT 0
1192: LESS
1193: IFFALSE 1205
// min_y := 0 else
1195: LD_ADDR_VAR 0 8
1199: PUSH
1200: LD_INT 0
1202: ST_TO_ADDR
1203: GO 1221
// min_y := y - r ;
1205: LD_ADDR_VAR 0 8
1209: PUSH
1210: LD_VAR 0 3
1214: PUSH
1215: LD_VAR 0 4
1219: MINUS
1220: ST_TO_ADDR
// max_x := x + r ;
1221: LD_ADDR_VAR 0 9
1225: PUSH
1226: LD_VAR 0 2
1230: PUSH
1231: LD_VAR 0 4
1235: PLUS
1236: ST_TO_ADDR
// max_y := y + r ;
1237: LD_ADDR_VAR 0 10
1241: PUSH
1242: LD_VAR 0 3
1246: PUSH
1247: LD_VAR 0 4
1251: PLUS
1252: ST_TO_ADDR
// for _x = min_x to max_x do
1253: LD_ADDR_VAR 0 11
1257: PUSH
1258: DOUBLE
1259: LD_VAR 0 7
1263: DEC
1264: ST_TO_ADDR
1265: LD_VAR 0 9
1269: PUSH
1270: FOR_TO
1271: IFFALSE 1388
// for _y = min_y to max_y do
1273: LD_ADDR_VAR 0 12
1277: PUSH
1278: DOUBLE
1279: LD_VAR 0 8
1283: DEC
1284: ST_TO_ADDR
1285: LD_VAR 0 10
1289: PUSH
1290: FOR_TO
1291: IFFALSE 1384
// begin if not ValidHex ( _x , _y ) then
1293: LD_VAR 0 11
1297: PPUSH
1298: LD_VAR 0 12
1302: PPUSH
1303: CALL_OW 488
1307: NOT
1308: IFFALSE 1312
// continue ;
1310: GO 1290
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
1312: LD_VAR 0 11
1316: PPUSH
1317: LD_VAR 0 12
1321: PPUSH
1322: CALL_OW 351
1326: PUSH
1327: LD_VAR 0 11
1331: PPUSH
1332: LD_VAR 0 12
1336: PPUSH
1337: CALL_OW 554
1341: AND
1342: IFFALSE 1382
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
1344: LD_ADDR_VAR 0 13
1348: PUSH
1349: LD_VAR 0 13
1353: PPUSH
1354: LD_VAR 0 13
1358: PUSH
1359: LD_INT 1
1361: PLUS
1362: PPUSH
1363: LD_VAR 0 11
1367: PUSH
1368: LD_VAR 0 12
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 2
1381: ST_TO_ADDR
// end ;
1382: GO 1290
1384: POP
1385: POP
1386: GO 1270
1388: POP
1389: POP
// if not list then
1390: LD_VAR 0 13
1394: NOT
1395: IFFALSE 1399
// exit ;
1397: GO 1470
// for i in list do
1399: LD_ADDR_VAR 0 6
1403: PUSH
1404: LD_VAR 0 13
1408: PUSH
1409: FOR_IN
1410: IFFALSE 1468
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
1412: LD_VAR 0 1
1416: PPUSH
1417: LD_STRING M
1419: PUSH
1420: LD_VAR 0 6
1424: PUSH
1425: LD_INT 1
1427: ARRAY
1428: PUSH
1429: LD_VAR 0 6
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 0
1443: PUSH
1444: LD_INT 0
1446: PUSH
1447: LD_INT 0
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: PPUSH
1462: CALL_OW 447
1466: GO 1409
1468: POP
1469: POP
// end ;
1470: LD_VAR 0 5
1474: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
1475: LD_EXP 2
1479: NOT
1480: IFFALSE 1530
1482: GO 1484
1484: DISABLE
// begin initHack := true ;
1485: LD_ADDR_EXP 2
1489: PUSH
1490: LD_INT 1
1492: ST_TO_ADDR
// hackTanks := [ ] ;
1493: LD_ADDR_EXP 3
1497: PUSH
1498: EMPTY
1499: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
1500: LD_ADDR_EXP 4
1504: PUSH
1505: EMPTY
1506: ST_TO_ADDR
// hackLimit := 3 ;
1507: LD_ADDR_EXP 5
1511: PUSH
1512: LD_INT 3
1514: ST_TO_ADDR
// hackDist := 12 ;
1515: LD_ADDR_EXP 6
1519: PUSH
1520: LD_INT 12
1522: ST_TO_ADDR
// hackCounter := [ ] ;
1523: LD_ADDR_EXP 7
1527: PUSH
1528: EMPTY
1529: ST_TO_ADDR
// end ;
1530: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
1531: LD_EXP 2
1535: PUSH
1536: LD_INT 34
1538: PUSH
1539: LD_EXP 14
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 69
1552: AND
1553: IFFALSE 1808
1555: GO 1557
1557: DISABLE
1558: LD_INT 0
1560: PPUSH
1561: PPUSH
// begin enable ;
1562: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
1563: LD_ADDR_VAR 0 1
1567: PUSH
1568: LD_INT 34
1570: PUSH
1571: LD_EXP 14
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PPUSH
1580: CALL_OW 69
1584: PUSH
1585: FOR_IN
1586: IFFALSE 1806
// begin if not i in hackTanks then
1588: LD_VAR 0 1
1592: PUSH
1593: LD_EXP 3
1597: IN
1598: NOT
1599: IFFALSE 1682
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
1601: LD_ADDR_EXP 3
1605: PUSH
1606: LD_EXP 3
1610: PPUSH
1611: LD_EXP 3
1615: PUSH
1616: LD_INT 1
1618: PLUS
1619: PPUSH
1620: LD_VAR 0 1
1624: PPUSH
1625: CALL_OW 1
1629: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
1630: LD_ADDR_EXP 4
1634: PUSH
1635: LD_EXP 4
1639: PPUSH
1640: LD_EXP 4
1644: PUSH
1645: LD_INT 1
1647: PLUS
1648: PPUSH
1649: EMPTY
1650: PPUSH
1651: CALL_OW 1
1655: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
1656: LD_ADDR_EXP 7
1660: PUSH
1661: LD_EXP 7
1665: PPUSH
1666: LD_EXP 7
1670: PUSH
1671: LD_INT 1
1673: PLUS
1674: PPUSH
1675: EMPTY
1676: PPUSH
1677: CALL_OW 1
1681: ST_TO_ADDR
// end ; if not IsOk ( i ) then
1682: LD_VAR 0 1
1686: PPUSH
1687: CALL_OW 302
1691: NOT
1692: IFFALSE 1705
// begin HackUnlinkAll ( i ) ;
1694: LD_VAR 0 1
1698: PPUSH
1699: CALL 1811 0 1
// continue ;
1703: GO 1585
// end ; HackCheckCapturedStatus ( i ) ;
1705: LD_VAR 0 1
1709: PPUSH
1710: CALL 2254 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
1714: LD_ADDR_VAR 0 2
1718: PUSH
1719: LD_INT 81
1721: PUSH
1722: LD_VAR 0 1
1726: PPUSH
1727: CALL_OW 255
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 33
1738: PUSH
1739: LD_INT 3
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 91
1748: PUSH
1749: LD_VAR 0 1
1753: PUSH
1754: LD_EXP 6
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 50
1766: PUSH
1767: EMPTY
1768: LIST
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: PPUSH
1776: CALL_OW 69
1780: ST_TO_ADDR
// if not tmp then
1781: LD_VAR 0 2
1785: NOT
1786: IFFALSE 1790
// continue ;
1788: GO 1585
// HackLink ( i , tmp ) ;
1790: LD_VAR 0 1
1794: PPUSH
1795: LD_VAR 0 2
1799: PPUSH
1800: CALL 1947 0 2
// end ;
1804: GO 1585
1806: POP
1807: POP
// end ;
1808: PPOPN 2
1810: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
1811: LD_INT 0
1813: PPUSH
1814: PPUSH
1815: PPUSH
// if not hack in hackTanks then
1816: LD_VAR 0 1
1820: PUSH
1821: LD_EXP 3
1825: IN
1826: NOT
1827: IFFALSE 1831
// exit ;
1829: GO 1942
// index := GetElementIndex ( hackTanks , hack ) ;
1831: LD_ADDR_VAR 0 4
1835: PUSH
1836: LD_EXP 3
1840: PPUSH
1841: LD_VAR 0 1
1845: PPUSH
1846: CALL 23913 0 2
1850: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
1851: LD_EXP 4
1855: PUSH
1856: LD_VAR 0 4
1860: ARRAY
1861: IFFALSE 1942
// begin for i in hackTanksCaptured [ index ] do
1863: LD_ADDR_VAR 0 3
1867: PUSH
1868: LD_EXP 4
1872: PUSH
1873: LD_VAR 0 4
1877: ARRAY
1878: PUSH
1879: FOR_IN
1880: IFFALSE 1906
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
1882: LD_VAR 0 3
1886: PUSH
1887: LD_INT 1
1889: ARRAY
1890: PPUSH
1891: LD_VAR 0 3
1895: PUSH
1896: LD_INT 2
1898: ARRAY
1899: PPUSH
1900: CALL_OW 235
1904: GO 1879
1906: POP
1907: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
1908: LD_ADDR_EXP 4
1912: PUSH
1913: LD_EXP 4
1917: PPUSH
1918: LD_VAR 0 4
1922: PPUSH
1923: EMPTY
1924: PPUSH
1925: CALL_OW 1
1929: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
1930: LD_VAR 0 1
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: CALL_OW 505
// end ; end ;
1942: LD_VAR 0 2
1946: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
1947: LD_INT 0
1949: PPUSH
1950: PPUSH
1951: PPUSH
// if not hack in hackTanks or not vehicles then
1952: LD_VAR 0 1
1956: PUSH
1957: LD_EXP 3
1961: IN
1962: NOT
1963: PUSH
1964: LD_VAR 0 2
1968: NOT
1969: OR
1970: IFFALSE 1974
// exit ;
1972: GO 2249
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: LD_VAR 0 1
1983: PPUSH
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_INT 1
1991: PPUSH
1992: LD_INT 1
1994: PPUSH
1995: CALL 24563 0 4
1999: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
2000: LD_ADDR_VAR 0 5
2004: PUSH
2005: LD_EXP 3
2009: PPUSH
2010: LD_VAR 0 1
2014: PPUSH
2015: CALL 23913 0 2
2019: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
2020: LD_EXP 4
2024: PUSH
2025: LD_VAR 0 5
2029: ARRAY
2030: PUSH
2031: LD_EXP 5
2035: LESS
2036: IFFALSE 2225
// begin for i := 1 to vehicles do
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: DOUBLE
2044: LD_INT 1
2046: DEC
2047: ST_TO_ADDR
2048: LD_VAR 0 2
2052: PUSH
2053: FOR_TO
2054: IFFALSE 2223
// begin if hackTanksCaptured [ index ] = hackLimit then
2056: LD_EXP 4
2060: PUSH
2061: LD_VAR 0 5
2065: ARRAY
2066: PUSH
2067: LD_EXP 5
2071: EQUAL
2072: IFFALSE 2076
// break ;
2074: GO 2223
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
2076: LD_ADDR_EXP 7
2080: PUSH
2081: LD_EXP 7
2085: PPUSH
2086: LD_VAR 0 5
2090: PPUSH
2091: LD_EXP 7
2095: PUSH
2096: LD_VAR 0 5
2100: ARRAY
2101: PUSH
2102: LD_INT 1
2104: PLUS
2105: PPUSH
2106: CALL_OW 1
2110: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
2111: LD_ADDR_EXP 4
2115: PUSH
2116: LD_EXP 4
2120: PPUSH
2121: LD_VAR 0 5
2125: PUSH
2126: LD_EXP 4
2130: PUSH
2131: LD_VAR 0 5
2135: ARRAY
2136: PUSH
2137: LD_INT 1
2139: PLUS
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PPUSH
2145: LD_VAR 0 2
2149: PUSH
2150: LD_VAR 0 4
2154: ARRAY
2155: PUSH
2156: LD_VAR 0 2
2160: PUSH
2161: LD_VAR 0 4
2165: ARRAY
2166: PPUSH
2167: CALL_OW 255
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: PPUSH
2176: CALL 24128 0 3
2180: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
2181: LD_VAR 0 2
2185: PUSH
2186: LD_VAR 0 4
2190: ARRAY
2191: PPUSH
2192: LD_VAR 0 1
2196: PPUSH
2197: CALL_OW 255
2201: PPUSH
2202: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
2206: LD_VAR 0 2
2210: PUSH
2211: LD_VAR 0 4
2215: ARRAY
2216: PPUSH
2217: CALL_OW 141
// end ;
2221: GO 2053
2223: POP
2224: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
2225: LD_VAR 0 1
2229: PPUSH
2230: LD_EXP 4
2234: PUSH
2235: LD_VAR 0 5
2239: ARRAY
2240: PUSH
2241: LD_INT 0
2243: PLUS
2244: PPUSH
2245: CALL_OW 505
// end ;
2249: LD_VAR 0 3
2253: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
2254: LD_INT 0
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
// if not hack in hackTanks then
2260: LD_VAR 0 1
2264: PUSH
2265: LD_EXP 3
2269: IN
2270: NOT
2271: IFFALSE 2275
// exit ;
2273: GO 2515
// index := GetElementIndex ( hackTanks , hack ) ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: LD_EXP 3
2284: PPUSH
2285: LD_VAR 0 1
2289: PPUSH
2290: CALL 23913 0 2
2294: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
2295: LD_ADDR_VAR 0 3
2299: PUSH
2300: DOUBLE
2301: LD_EXP 4
2305: PUSH
2306: LD_VAR 0 4
2310: ARRAY
2311: INC
2312: ST_TO_ADDR
2313: LD_INT 1
2315: PUSH
2316: FOR_DOWNTO
2317: IFFALSE 2489
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
2319: LD_ADDR_VAR 0 5
2323: PUSH
2324: LD_EXP 4
2328: PUSH
2329: LD_VAR 0 4
2333: ARRAY
2334: PUSH
2335: LD_VAR 0 3
2339: ARRAY
2340: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
2341: LD_VAR 0 5
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: PPUSH
2350: CALL_OW 302
2354: NOT
2355: PUSH
2356: LD_VAR 0 5
2360: PUSH
2361: LD_INT 1
2363: ARRAY
2364: PPUSH
2365: CALL_OW 255
2369: PUSH
2370: LD_VAR 0 1
2374: PPUSH
2375: CALL_OW 255
2379: NONEQUAL
2380: OR
2381: IFFALSE 2487
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
2383: LD_VAR 0 5
2387: PUSH
2388: LD_INT 1
2390: ARRAY
2391: PPUSH
2392: CALL_OW 305
2396: PUSH
2397: LD_VAR 0 5
2401: PUSH
2402: LD_INT 1
2404: ARRAY
2405: PPUSH
2406: CALL_OW 255
2410: PUSH
2411: LD_VAR 0 1
2415: PPUSH
2416: CALL_OW 255
2420: EQUAL
2421: AND
2422: IFFALSE 2446
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
2424: LD_VAR 0 5
2428: PUSH
2429: LD_INT 1
2431: ARRAY
2432: PPUSH
2433: LD_VAR 0 5
2437: PUSH
2438: LD_INT 2
2440: ARRAY
2441: PPUSH
2442: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
2446: LD_ADDR_EXP 4
2450: PUSH
2451: LD_EXP 4
2455: PPUSH
2456: LD_VAR 0 4
2460: PPUSH
2461: LD_EXP 4
2465: PUSH
2466: LD_VAR 0 4
2470: ARRAY
2471: PPUSH
2472: LD_VAR 0 3
2476: PPUSH
2477: CALL_OW 3
2481: PPUSH
2482: CALL_OW 1
2486: ST_TO_ADDR
// end ; end ;
2487: GO 2316
2489: POP
2490: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
2491: LD_VAR 0 1
2495: PPUSH
2496: LD_EXP 4
2500: PUSH
2501: LD_VAR 0 4
2505: ARRAY
2506: PUSH
2507: LD_INT 0
2509: PLUS
2510: PPUSH
2511: CALL_OW 505
// end ;
2515: LD_VAR 0 2
2519: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
2520: LD_INT 0
2522: PPUSH
2523: PPUSH
2524: PPUSH
2525: PPUSH
// if not hack in hackTanks then
2526: LD_VAR 0 1
2530: PUSH
2531: LD_EXP 3
2535: IN
2536: NOT
2537: IFFALSE 2541
// exit ;
2539: GO 2626
// index := GetElementIndex ( hackTanks , hack ) ;
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_EXP 3
2550: PPUSH
2551: LD_VAR 0 1
2555: PPUSH
2556: CALL 23913 0 2
2560: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
2561: LD_ADDR_VAR 0 4
2565: PUSH
2566: DOUBLE
2567: LD_INT 1
2569: DEC
2570: ST_TO_ADDR
2571: LD_EXP 4
2575: PUSH
2576: LD_VAR 0 5
2580: ARRAY
2581: PUSH
2582: FOR_TO
2583: IFFALSE 2624
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
2585: LD_EXP 4
2589: PUSH
2590: LD_VAR 0 5
2594: ARRAY
2595: PUSH
2596: LD_VAR 0 4
2600: ARRAY
2601: PUSH
2602: LD_INT 1
2604: ARRAY
2605: PUSH
2606: LD_VAR 0 2
2610: EQUAL
2611: IFFALSE 2622
// KillUnit ( vehicle ) ;
2613: LD_VAR 0 2
2617: PPUSH
2618: CALL_OW 66
2622: GO 2582
2624: POP
2625: POP
// end ;
2626: LD_VAR 0 3
2630: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
2631: LD_EXP 8
2635: NOT
2636: IFFALSE 2671
2638: GO 2640
2640: DISABLE
// begin initMiner := true ;
2641: LD_ADDR_EXP 8
2645: PUSH
2646: LD_INT 1
2648: ST_TO_ADDR
// minersList := [ ] ;
2649: LD_ADDR_EXP 9
2653: PUSH
2654: EMPTY
2655: ST_TO_ADDR
// minerMinesList := [ ] ;
2656: LD_ADDR_EXP 10
2660: PUSH
2661: EMPTY
2662: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
2663: LD_ADDR_EXP 11
2667: PUSH
2668: LD_INT 5
2670: ST_TO_ADDR
// end ;
2671: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
2672: LD_EXP 8
2676: PUSH
2677: LD_INT 34
2679: PUSH
2680: LD_EXP 19
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: PPUSH
2689: CALL_OW 69
2693: AND
2694: IFFALSE 3157
2696: GO 2698
2698: DISABLE
2699: LD_INT 0
2701: PPUSH
2702: PPUSH
2703: PPUSH
2704: PPUSH
// begin enable ;
2705: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
2706: LD_ADDR_VAR 0 1
2710: PUSH
2711: LD_INT 34
2713: PUSH
2714: LD_EXP 19
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PPUSH
2723: CALL_OW 69
2727: PUSH
2728: FOR_IN
2729: IFFALSE 2801
// begin if not i in minersList then
2731: LD_VAR 0 1
2735: PUSH
2736: LD_EXP 9
2740: IN
2741: NOT
2742: IFFALSE 2799
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
2744: LD_ADDR_EXP 9
2748: PUSH
2749: LD_EXP 9
2753: PPUSH
2754: LD_EXP 9
2758: PUSH
2759: LD_INT 1
2761: PLUS
2762: PPUSH
2763: LD_VAR 0 1
2767: PPUSH
2768: CALL_OW 1
2772: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
2773: LD_ADDR_EXP 10
2777: PUSH
2778: LD_EXP 10
2782: PPUSH
2783: LD_EXP 10
2787: PUSH
2788: LD_INT 1
2790: PLUS
2791: PPUSH
2792: EMPTY
2793: PPUSH
2794: CALL_OW 1
2798: ST_TO_ADDR
// end end ;
2799: GO 2728
2801: POP
2802: POP
// for i := minerMinesList downto 1 do
2803: LD_ADDR_VAR 0 1
2807: PUSH
2808: DOUBLE
2809: LD_EXP 10
2813: INC
2814: ST_TO_ADDR
2815: LD_INT 1
2817: PUSH
2818: FOR_DOWNTO
2819: IFFALSE 3155
// begin if IsLive ( minersList [ i ] ) then
2821: LD_EXP 9
2825: PUSH
2826: LD_VAR 0 1
2830: ARRAY
2831: PPUSH
2832: CALL_OW 300
2836: IFFALSE 2864
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
2838: LD_EXP 9
2842: PUSH
2843: LD_VAR 0 1
2847: ARRAY
2848: PPUSH
2849: LD_EXP 10
2853: PUSH
2854: LD_VAR 0 1
2858: ARRAY
2859: PPUSH
2860: CALL_OW 505
// if not minerMinesList [ i ] then
2864: LD_EXP 10
2868: PUSH
2869: LD_VAR 0 1
2873: ARRAY
2874: NOT
2875: IFFALSE 2879
// continue ;
2877: GO 2818
// for j := minerMinesList [ i ] downto 1 do
2879: LD_ADDR_VAR 0 2
2883: PUSH
2884: DOUBLE
2885: LD_EXP 10
2889: PUSH
2890: LD_VAR 0 1
2894: ARRAY
2895: INC
2896: ST_TO_ADDR
2897: LD_INT 1
2899: PUSH
2900: FOR_DOWNTO
2901: IFFALSE 3151
// begin side := GetSide ( minersList [ i ] ) ;
2903: LD_ADDR_VAR 0 3
2907: PUSH
2908: LD_EXP 9
2912: PUSH
2913: LD_VAR 0 1
2917: ARRAY
2918: PPUSH
2919: CALL_OW 255
2923: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
2924: LD_ADDR_VAR 0 4
2928: PUSH
2929: LD_EXP 10
2933: PUSH
2934: LD_VAR 0 1
2938: ARRAY
2939: PUSH
2940: LD_VAR 0 2
2944: ARRAY
2945: PUSH
2946: LD_INT 1
2948: ARRAY
2949: PPUSH
2950: LD_EXP 10
2954: PUSH
2955: LD_VAR 0 1
2959: ARRAY
2960: PUSH
2961: LD_VAR 0 2
2965: ARRAY
2966: PUSH
2967: LD_INT 2
2969: ARRAY
2970: PPUSH
2971: CALL_OW 428
2975: ST_TO_ADDR
// if not tmp then
2976: LD_VAR 0 4
2980: NOT
2981: IFFALSE 2985
// continue ;
2983: GO 2900
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
2985: LD_VAR 0 4
2989: PUSH
2990: LD_INT 81
2992: PUSH
2993: LD_VAR 0 3
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PPUSH
3002: CALL_OW 69
3006: IN
3007: PUSH
3008: LD_EXP 10
3012: PUSH
3013: LD_VAR 0 1
3017: ARRAY
3018: PUSH
3019: LD_VAR 0 2
3023: ARRAY
3024: PUSH
3025: LD_INT 1
3027: ARRAY
3028: PPUSH
3029: LD_EXP 10
3033: PUSH
3034: LD_VAR 0 1
3038: ARRAY
3039: PUSH
3040: LD_VAR 0 2
3044: ARRAY
3045: PUSH
3046: LD_INT 2
3048: ARRAY
3049: PPUSH
3050: CALL_OW 458
3054: AND
3055: IFFALSE 3149
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
3057: LD_EXP 10
3061: PUSH
3062: LD_VAR 0 1
3066: ARRAY
3067: PUSH
3068: LD_VAR 0 2
3072: ARRAY
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_EXP 10
3082: PUSH
3083: LD_VAR 0 1
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 2
3093: ARRAY
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_VAR 0 3
3103: PPUSH
3104: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
3108: LD_ADDR_EXP 10
3112: PUSH
3113: LD_EXP 10
3117: PPUSH
3118: LD_VAR 0 1
3122: PPUSH
3123: LD_EXP 10
3127: PUSH
3128: LD_VAR 0 1
3132: ARRAY
3133: PPUSH
3134: LD_VAR 0 2
3138: PPUSH
3139: CALL_OW 3
3143: PPUSH
3144: CALL_OW 1
3148: ST_TO_ADDR
// end ; end ;
3149: GO 2900
3151: POP
3152: POP
// end ;
3153: GO 2818
3155: POP
3156: POP
// end ;
3157: PPOPN 4
3159: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
3160: LD_INT 0
3162: PPUSH
3163: PPUSH
// result := false ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
3172: LD_VAR 0 1
3176: PPUSH
3177: CALL_OW 264
3181: PUSH
3182: LD_EXP 19
3186: EQUAL
3187: NOT
3188: IFFALSE 3192
// exit ;
3190: GO 3432
// index := GetElementIndex ( minersList , unit ) ;
3192: LD_ADDR_VAR 0 5
3196: PUSH
3197: LD_EXP 9
3201: PPUSH
3202: LD_VAR 0 1
3206: PPUSH
3207: CALL 23913 0 2
3211: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
3212: LD_EXP 10
3216: PUSH
3217: LD_VAR 0 5
3221: ARRAY
3222: PUSH
3223: LD_EXP 11
3227: GREATEREQUAL
3228: IFFALSE 3232
// exit ;
3230: GO 3432
// ComMoveXY ( unit , x , y ) ;
3232: LD_VAR 0 1
3236: PPUSH
3237: LD_VAR 0 2
3241: PPUSH
3242: LD_VAR 0 3
3246: PPUSH
3247: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3251: LD_INT 35
3253: PPUSH
3254: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
3258: LD_VAR 0 1
3262: PPUSH
3263: LD_VAR 0 2
3267: PPUSH
3268: LD_VAR 0 3
3272: PPUSH
3273: CALL 54685 0 3
3277: NOT
3278: PUSH
3279: LD_VAR 0 1
3283: PPUSH
3284: CALL_OW 314
3288: AND
3289: IFFALSE 3293
// exit ;
3291: GO 3432
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
3293: LD_VAR 0 2
3297: PPUSH
3298: LD_VAR 0 3
3302: PPUSH
3303: CALL_OW 428
3307: PUSH
3308: LD_VAR 0 1
3312: EQUAL
3313: PUSH
3314: LD_VAR 0 1
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: AND
3325: IFFALSE 3251
// PlaySoundXY ( x , y , PlantMine ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_VAR 0 3
3336: PPUSH
3337: LD_STRING PlantMine
3339: PPUSH
3340: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
3344: LD_VAR 0 2
3348: PPUSH
3349: LD_VAR 0 3
3353: PPUSH
3354: LD_VAR 0 1
3358: PPUSH
3359: CALL_OW 255
3363: PPUSH
3364: LD_INT 0
3366: PPUSH
3367: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
3371: LD_ADDR_EXP 10
3375: PUSH
3376: LD_EXP 10
3380: PPUSH
3381: LD_VAR 0 5
3385: PUSH
3386: LD_EXP 10
3390: PUSH
3391: LD_VAR 0 5
3395: ARRAY
3396: PUSH
3397: LD_INT 1
3399: PLUS
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PPUSH
3405: LD_VAR 0 2
3409: PUSH
3410: LD_VAR 0 3
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PPUSH
3419: CALL 24128 0 3
3423: ST_TO_ADDR
// result := true ;
3424: LD_ADDR_VAR 0 4
3428: PUSH
3429: LD_INT 1
3431: ST_TO_ADDR
// end ;
3432: LD_VAR 0 4
3436: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
3437: LD_INT 0
3439: PPUSH
3440: PPUSH
3441: PPUSH
// if not unit in minersList then
3442: LD_VAR 0 1
3446: PUSH
3447: LD_EXP 9
3451: IN
3452: NOT
3453: IFFALSE 3457
// exit ;
3455: GO 3849
// index := GetElementIndex ( minersList , unit ) ;
3457: LD_ADDR_VAR 0 6
3461: PUSH
3462: LD_EXP 9
3466: PPUSH
3467: LD_VAR 0 1
3471: PPUSH
3472: CALL 23913 0 2
3476: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
3477: LD_ADDR_VAR 0 5
3481: PUSH
3482: DOUBLE
3483: LD_EXP 10
3487: PUSH
3488: LD_VAR 0 6
3492: ARRAY
3493: INC
3494: ST_TO_ADDR
3495: LD_INT 1
3497: PUSH
3498: FOR_DOWNTO
3499: IFFALSE 3660
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
3501: LD_EXP 10
3505: PUSH
3506: LD_VAR 0 6
3510: ARRAY
3511: PUSH
3512: LD_VAR 0 5
3516: ARRAY
3517: PUSH
3518: LD_INT 1
3520: ARRAY
3521: PUSH
3522: LD_VAR 0 2
3526: EQUAL
3527: PUSH
3528: LD_EXP 10
3532: PUSH
3533: LD_VAR 0 6
3537: ARRAY
3538: PUSH
3539: LD_VAR 0 5
3543: ARRAY
3544: PUSH
3545: LD_INT 2
3547: ARRAY
3548: PUSH
3549: LD_VAR 0 3
3553: EQUAL
3554: AND
3555: IFFALSE 3658
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3557: LD_EXP 10
3561: PUSH
3562: LD_VAR 0 6
3566: ARRAY
3567: PUSH
3568: LD_VAR 0 5
3572: ARRAY
3573: PUSH
3574: LD_INT 1
3576: ARRAY
3577: PPUSH
3578: LD_EXP 10
3582: PUSH
3583: LD_VAR 0 6
3587: ARRAY
3588: PUSH
3589: LD_VAR 0 5
3593: ARRAY
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: PPUSH
3599: LD_VAR 0 1
3603: PPUSH
3604: CALL_OW 255
3608: PPUSH
3609: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3613: LD_ADDR_EXP 10
3617: PUSH
3618: LD_EXP 10
3622: PPUSH
3623: LD_VAR 0 6
3627: PPUSH
3628: LD_EXP 10
3632: PUSH
3633: LD_VAR 0 6
3637: ARRAY
3638: PPUSH
3639: LD_VAR 0 5
3643: PPUSH
3644: CALL_OW 3
3648: PPUSH
3649: CALL_OW 1
3653: ST_TO_ADDR
// exit ;
3654: POP
3655: POP
3656: GO 3849
// end ; end ;
3658: GO 3498
3660: POP
3661: POP
// for i := minerMinesList [ index ] downto 1 do
3662: LD_ADDR_VAR 0 5
3666: PUSH
3667: DOUBLE
3668: LD_EXP 10
3672: PUSH
3673: LD_VAR 0 6
3677: ARRAY
3678: INC
3679: ST_TO_ADDR
3680: LD_INT 1
3682: PUSH
3683: FOR_DOWNTO
3684: IFFALSE 3847
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
3686: LD_EXP 10
3690: PUSH
3691: LD_VAR 0 6
3695: ARRAY
3696: PUSH
3697: LD_VAR 0 5
3701: ARRAY
3702: PUSH
3703: LD_INT 1
3705: ARRAY
3706: PPUSH
3707: LD_EXP 10
3711: PUSH
3712: LD_VAR 0 6
3716: ARRAY
3717: PUSH
3718: LD_VAR 0 5
3722: ARRAY
3723: PUSH
3724: LD_INT 2
3726: ARRAY
3727: PPUSH
3728: LD_VAR 0 2
3732: PPUSH
3733: LD_VAR 0 3
3737: PPUSH
3738: CALL_OW 298
3742: PUSH
3743: LD_INT 6
3745: LESS
3746: IFFALSE 3845
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
3748: LD_EXP 10
3752: PUSH
3753: LD_VAR 0 6
3757: ARRAY
3758: PUSH
3759: LD_VAR 0 5
3763: ARRAY
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PPUSH
3769: LD_EXP 10
3773: PUSH
3774: LD_VAR 0 6
3778: ARRAY
3779: PUSH
3780: LD_VAR 0 5
3784: ARRAY
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_VAR 0 1
3794: PPUSH
3795: CALL_OW 255
3799: PPUSH
3800: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
3804: LD_ADDR_EXP 10
3808: PUSH
3809: LD_EXP 10
3813: PPUSH
3814: LD_VAR 0 6
3818: PPUSH
3819: LD_EXP 10
3823: PUSH
3824: LD_VAR 0 6
3828: ARRAY
3829: PPUSH
3830: LD_VAR 0 5
3834: PPUSH
3835: CALL_OW 3
3839: PPUSH
3840: CALL_OW 1
3844: ST_TO_ADDR
// end ; end ;
3845: GO 3683
3847: POP
3848: POP
// end ;
3849: LD_VAR 0 4
3853: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
3854: LD_INT 0
3856: PPUSH
3857: PPUSH
3858: PPUSH
3859: PPUSH
3860: PPUSH
3861: PPUSH
3862: PPUSH
3863: PPUSH
3864: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
3865: LD_VAR 0 1
3869: PPUSH
3870: CALL_OW 264
3874: PUSH
3875: LD_EXP 19
3879: EQUAL
3880: NOT
3881: PUSH
3882: LD_VAR 0 1
3886: PUSH
3887: LD_EXP 9
3891: IN
3892: NOT
3893: OR
3894: IFFALSE 3898
// exit ;
3896: GO 4220
// index := GetElementIndex ( minersList , unit ) ;
3898: LD_ADDR_VAR 0 6
3902: PUSH
3903: LD_EXP 9
3907: PPUSH
3908: LD_VAR 0 1
3912: PPUSH
3913: CALL 23913 0 2
3917: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
3918: LD_ADDR_VAR 0 8
3922: PUSH
3923: LD_EXP 11
3927: PUSH
3928: LD_EXP 10
3932: PUSH
3933: LD_VAR 0 6
3937: ARRAY
3938: MINUS
3939: ST_TO_ADDR
// if not minesFreeAmount then
3940: LD_VAR 0 8
3944: NOT
3945: IFFALSE 3949
// exit ;
3947: GO 4220
// tmp := [ ] ;
3949: LD_ADDR_VAR 0 7
3953: PUSH
3954: EMPTY
3955: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
3956: LD_ADDR_VAR 0 5
3960: PUSH
3961: DOUBLE
3962: LD_INT 1
3964: DEC
3965: ST_TO_ADDR
3966: LD_VAR 0 8
3970: PUSH
3971: FOR_TO
3972: IFFALSE 4167
// begin _d := rand ( 0 , 5 ) ;
3974: LD_ADDR_VAR 0 11
3978: PUSH
3979: LD_INT 0
3981: PPUSH
3982: LD_INT 5
3984: PPUSH
3985: CALL_OW 12
3989: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
3990: LD_ADDR_VAR 0 12
3994: PUSH
3995: LD_INT 2
3997: PPUSH
3998: LD_INT 6
4000: PPUSH
4001: CALL_OW 12
4005: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
4006: LD_ADDR_VAR 0 9
4010: PUSH
4011: LD_VAR 0 2
4015: PPUSH
4016: LD_VAR 0 11
4020: PPUSH
4021: LD_VAR 0 12
4025: PPUSH
4026: CALL_OW 272
4030: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
4031: LD_ADDR_VAR 0 10
4035: PUSH
4036: LD_VAR 0 3
4040: PPUSH
4041: LD_VAR 0 11
4045: PPUSH
4046: LD_VAR 0 12
4050: PPUSH
4051: CALL_OW 273
4055: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
4056: LD_VAR 0 9
4060: PPUSH
4061: LD_VAR 0 10
4065: PPUSH
4066: CALL_OW 488
4070: PUSH
4071: LD_VAR 0 9
4075: PUSH
4076: LD_VAR 0 10
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PUSH
4085: LD_VAR 0 7
4089: IN
4090: NOT
4091: AND
4092: PUSH
4093: LD_VAR 0 9
4097: PPUSH
4098: LD_VAR 0 10
4102: PPUSH
4103: CALL_OW 458
4107: NOT
4108: AND
4109: IFFALSE 4151
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
4111: LD_ADDR_VAR 0 7
4115: PUSH
4116: LD_VAR 0 7
4120: PPUSH
4121: LD_VAR 0 7
4125: PUSH
4126: LD_INT 1
4128: PLUS
4129: PPUSH
4130: LD_VAR 0 9
4134: PUSH
4135: LD_VAR 0 10
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PPUSH
4144: CALL_OW 1
4148: ST_TO_ADDR
4149: GO 4165
// i := i - 1 ;
4151: LD_ADDR_VAR 0 5
4155: PUSH
4156: LD_VAR 0 5
4160: PUSH
4161: LD_INT 1
4163: MINUS
4164: ST_TO_ADDR
// end ;
4165: GO 3971
4167: POP
4168: POP
// for i in tmp do
4169: LD_ADDR_VAR 0 5
4173: PUSH
4174: LD_VAR 0 7
4178: PUSH
4179: FOR_IN
4180: IFFALSE 4218
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
4182: LD_VAR 0 1
4186: PPUSH
4187: LD_VAR 0 5
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: LD_VAR 0 5
4200: PUSH
4201: LD_INT 2
4203: ARRAY
4204: PPUSH
4205: CALL 3160 0 3
4209: NOT
4210: IFFALSE 4216
// exit ;
4212: POP
4213: POP
4214: GO 4220
4216: GO 4179
4218: POP
4219: POP
// end ;
4220: LD_VAR 0 4
4224: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
4225: LD_INT 0
4227: PPUSH
4228: PPUSH
4229: PPUSH
4230: PPUSH
4231: PPUSH
4232: PPUSH
4233: PPUSH
// if not GetClass ( unit ) = class_sniper then
4234: LD_VAR 0 1
4238: PPUSH
4239: CALL_OW 257
4243: PUSH
4244: LD_INT 5
4246: EQUAL
4247: NOT
4248: IFFALSE 4252
// exit ;
4250: GO 4640
// dist := 8 ;
4252: LD_ADDR_VAR 0 5
4256: PUSH
4257: LD_INT 8
4259: ST_TO_ADDR
// viewRange := 12 ;
4260: LD_ADDR_VAR 0 7
4264: PUSH
4265: LD_INT 12
4267: ST_TO_ADDR
// side := GetSide ( unit ) ;
4268: LD_ADDR_VAR 0 6
4272: PUSH
4273: LD_VAR 0 1
4277: PPUSH
4278: CALL_OW 255
4282: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
4283: LD_INT 61
4285: PPUSH
4286: LD_VAR 0 6
4290: PPUSH
4291: CALL_OW 321
4295: PUSH
4296: LD_INT 2
4298: EQUAL
4299: IFFALSE 4309
// viewRange := 16 ;
4301: LD_ADDR_VAR 0 7
4305: PUSH
4306: LD_INT 16
4308: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
4309: LD_VAR 0 1
4313: PPUSH
4314: LD_VAR 0 2
4318: PPUSH
4319: LD_VAR 0 3
4323: PPUSH
4324: CALL_OW 297
4328: PUSH
4329: LD_VAR 0 5
4333: GREATER
4334: IFFALSE 4413
// begin ComMoveXY ( unit , x , y ) ;
4336: LD_VAR 0 1
4340: PPUSH
4341: LD_VAR 0 2
4345: PPUSH
4346: LD_VAR 0 3
4350: PPUSH
4351: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4355: LD_INT 35
4357: PPUSH
4358: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_VAR 0 2
4371: PPUSH
4372: LD_VAR 0 3
4376: PPUSH
4377: CALL 54685 0 3
4381: NOT
4382: IFFALSE 4386
// exit ;
4384: GO 4640
// until GetDistUnitXY ( unit , x , y ) < dist ;
4386: LD_VAR 0 1
4390: PPUSH
4391: LD_VAR 0 2
4395: PPUSH
4396: LD_VAR 0 3
4400: PPUSH
4401: CALL_OW 297
4405: PUSH
4406: LD_VAR 0 5
4410: LESS
4411: IFFALSE 4355
// end ; ComTurnXY ( unit , x , y ) ;
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_VAR 0 2
4422: PPUSH
4423: LD_VAR 0 3
4427: PPUSH
4428: CALL_OW 118
// wait ( 5 ) ;
4432: LD_INT 5
4434: PPUSH
4435: CALL_OW 67
// _d := GetDir ( unit ) ;
4439: LD_ADDR_VAR 0 10
4443: PUSH
4444: LD_VAR 0 1
4448: PPUSH
4449: CALL_OW 254
4453: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
4454: LD_ADDR_VAR 0 8
4458: PUSH
4459: LD_VAR 0 1
4463: PPUSH
4464: CALL_OW 250
4468: PPUSH
4469: LD_VAR 0 10
4473: PPUSH
4474: LD_VAR 0 5
4478: PPUSH
4479: CALL_OW 272
4483: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
4484: LD_ADDR_VAR 0 9
4488: PUSH
4489: LD_VAR 0 1
4493: PPUSH
4494: CALL_OW 251
4498: PPUSH
4499: LD_VAR 0 10
4503: PPUSH
4504: LD_VAR 0 5
4508: PPUSH
4509: CALL_OW 273
4513: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4514: LD_VAR 0 8
4518: PPUSH
4519: LD_VAR 0 9
4523: PPUSH
4524: CALL_OW 488
4528: NOT
4529: IFFALSE 4533
// exit ;
4531: GO 4640
// ComAnimCustom ( unit , 1 ) ;
4533: LD_VAR 0 1
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
4545: LD_VAR 0 8
4549: PPUSH
4550: LD_VAR 0 9
4554: PPUSH
4555: LD_VAR 0 6
4559: PPUSH
4560: LD_VAR 0 7
4564: PPUSH
4565: CALL_OW 330
// repeat wait ( 1 ) ;
4569: LD_INT 1
4571: PPUSH
4572: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
4576: LD_VAR 0 1
4580: PPUSH
4581: CALL_OW 316
4585: PUSH
4586: LD_VAR 0 1
4590: PPUSH
4591: CALL_OW 314
4595: OR
4596: PUSH
4597: LD_VAR 0 1
4601: PPUSH
4602: CALL_OW 302
4606: NOT
4607: OR
4608: PUSH
4609: LD_VAR 0 1
4613: PPUSH
4614: CALL_OW 301
4618: OR
4619: IFFALSE 4569
// RemoveSeeing ( _x , _y , side ) ;
4621: LD_VAR 0 8
4625: PPUSH
4626: LD_VAR 0 9
4630: PPUSH
4631: LD_VAR 0 6
4635: PPUSH
4636: CALL_OW 331
// end ; end_of_file
4640: LD_VAR 0 4
4644: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4645: LD_INT 0
4647: PPUSH
// ar_miner := 81 ;
4648: LD_ADDR_EXP 19
4652: PUSH
4653: LD_INT 81
4655: ST_TO_ADDR
// ar_crane := 88 ;
4656: LD_ADDR_EXP 18
4660: PUSH
4661: LD_INT 88
4663: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4664: LD_ADDR_EXP 13
4668: PUSH
4669: LD_INT 89
4671: ST_TO_ADDR
// us_hack := 99 ;
4672: LD_ADDR_EXP 14
4676: PUSH
4677: LD_INT 99
4679: ST_TO_ADDR
// us_artillery := 97 ;
4680: LD_ADDR_EXP 15
4684: PUSH
4685: LD_INT 97
4687: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4688: LD_ADDR_EXP 16
4692: PUSH
4693: LD_INT 91
4695: ST_TO_ADDR
// ar_mortar := 92 ;
4696: LD_ADDR_EXP 17
4700: PUSH
4701: LD_INT 92
4703: ST_TO_ADDR
// ru_radar := 98 ;
4704: LD_ADDR_EXP 12
4708: PUSH
4709: LD_INT 98
4711: ST_TO_ADDR
// tech_Artillery := 80 ;
4712: LD_ADDR_EXP 20
4716: PUSH
4717: LD_INT 80
4719: ST_TO_ADDR
// tech_RadMat := 81 ;
4720: LD_ADDR_EXP 21
4724: PUSH
4725: LD_INT 81
4727: ST_TO_ADDR
// tech_BasicTools := 82 ;
4728: LD_ADDR_EXP 22
4732: PUSH
4733: LD_INT 82
4735: ST_TO_ADDR
// tech_Cargo := 83 ;
4736: LD_ADDR_EXP 23
4740: PUSH
4741: LD_INT 83
4743: ST_TO_ADDR
// tech_Track := 84 ;
4744: LD_ADDR_EXP 24
4748: PUSH
4749: LD_INT 84
4751: ST_TO_ADDR
// tech_Crane := 85 ;
4752: LD_ADDR_EXP 25
4756: PUSH
4757: LD_INT 85
4759: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4760: LD_ADDR_EXP 26
4764: PUSH
4765: LD_INT 86
4767: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4768: LD_ADDR_EXP 27
4772: PUSH
4773: LD_INT 87
4775: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4776: LD_ADDR_EXP 28
4780: PUSH
4781: LD_INT 88
4783: ST_TO_ADDR
// class_mastodont := 31 ;
4784: LD_ADDR_EXP 29
4788: PUSH
4789: LD_INT 31
4791: ST_TO_ADDR
// class_horse := 21 ;
4792: LD_ADDR_EXP 30
4796: PUSH
4797: LD_INT 21
4799: ST_TO_ADDR
// end ;
4800: LD_VAR 0 1
4804: RET
// every 1 do
4805: GO 4807
4807: DISABLE
// InitGlobalVariables ; end_of_file
4808: CALL 4645 0 0
4812: END
// every 0 0$1 do
4813: GO 4815
4815: DISABLE
// begin enable ;
4816: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4817: LD_STRING updateTimer(
4819: PUSH
4820: LD_OWVAR 1
4824: STR
4825: PUSH
4826: LD_STRING );
4828: STR
4829: PPUSH
4830: CALL_OW 559
// end ;
4834: END
// on MapStart ( p ) do begin if streamModeActive then
4835: LD_EXP 31
4839: IFFALSE 4848
// DefineStreamItems ( true ) ;
4841: LD_INT 1
4843: PPUSH
4844: CALL 6496 0 1
// UpdateFactoryWaypoints ( ) ;
4848: CALL 943 0 0
// end ;
4852: PPOPN 1
4854: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4855: LD_INT 0
4857: PPUSH
// if p2 = 100 then
4858: LD_VAR 0 2
4862: PUSH
4863: LD_INT 100
4865: EQUAL
4866: IFFALSE 5869
// begin if not StreamModeActive then
4868: LD_EXP 31
4872: NOT
4873: IFFALSE 4883
// StreamModeActive := true ;
4875: LD_ADDR_EXP 31
4879: PUSH
4880: LD_INT 1
4882: ST_TO_ADDR
// if p3 = 0 then
4883: LD_VAR 0 3
4887: PUSH
4888: LD_INT 0
4890: EQUAL
4891: IFFALSE 4897
// InitStreamMode ;
4893: CALL 6032 0 0
// if p3 = 1 then
4897: LD_VAR 0 3
4901: PUSH
4902: LD_INT 1
4904: EQUAL
4905: IFFALSE 4915
// sRocket := true ;
4907: LD_ADDR_EXP 36
4911: PUSH
4912: LD_INT 1
4914: ST_TO_ADDR
// if p3 = 2 then
4915: LD_VAR 0 3
4919: PUSH
4920: LD_INT 2
4922: EQUAL
4923: IFFALSE 4933
// sSpeed := true ;
4925: LD_ADDR_EXP 35
4929: PUSH
4930: LD_INT 1
4932: ST_TO_ADDR
// if p3 = 3 then
4933: LD_VAR 0 3
4937: PUSH
4938: LD_INT 3
4940: EQUAL
4941: IFFALSE 4951
// sEngine := true ;
4943: LD_ADDR_EXP 37
4947: PUSH
4948: LD_INT 1
4950: ST_TO_ADDR
// if p3 = 4 then
4951: LD_VAR 0 3
4955: PUSH
4956: LD_INT 4
4958: EQUAL
4959: IFFALSE 4969
// sSpec := true ;
4961: LD_ADDR_EXP 34
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// if p3 = 5 then
4969: LD_VAR 0 3
4973: PUSH
4974: LD_INT 5
4976: EQUAL
4977: IFFALSE 4987
// sLevel := true ;
4979: LD_ADDR_EXP 38
4983: PUSH
4984: LD_INT 1
4986: ST_TO_ADDR
// if p3 = 6 then
4987: LD_VAR 0 3
4991: PUSH
4992: LD_INT 6
4994: EQUAL
4995: IFFALSE 5005
// sArmoury := true ;
4997: LD_ADDR_EXP 39
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// if p3 = 7 then
5005: LD_VAR 0 3
5009: PUSH
5010: LD_INT 7
5012: EQUAL
5013: IFFALSE 5023
// sRadar := true ;
5015: LD_ADDR_EXP 40
5019: PUSH
5020: LD_INT 1
5022: ST_TO_ADDR
// if p3 = 8 then
5023: LD_VAR 0 3
5027: PUSH
5028: LD_INT 8
5030: EQUAL
5031: IFFALSE 5041
// sBunker := true ;
5033: LD_ADDR_EXP 41
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// if p3 = 9 then
5041: LD_VAR 0 3
5045: PUSH
5046: LD_INT 9
5048: EQUAL
5049: IFFALSE 5059
// sHack := true ;
5051: LD_ADDR_EXP 42
5055: PUSH
5056: LD_INT 1
5058: ST_TO_ADDR
// if p3 = 10 then
5059: LD_VAR 0 3
5063: PUSH
5064: LD_INT 10
5066: EQUAL
5067: IFFALSE 5077
// sFire := true ;
5069: LD_ADDR_EXP 43
5073: PUSH
5074: LD_INT 1
5076: ST_TO_ADDR
// if p3 = 11 then
5077: LD_VAR 0 3
5081: PUSH
5082: LD_INT 11
5084: EQUAL
5085: IFFALSE 5095
// sRefresh := true ;
5087: LD_ADDR_EXP 44
5091: PUSH
5092: LD_INT 1
5094: ST_TO_ADDR
// if p3 = 12 then
5095: LD_VAR 0 3
5099: PUSH
5100: LD_INT 12
5102: EQUAL
5103: IFFALSE 5113
// sExp := true ;
5105: LD_ADDR_EXP 45
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// if p3 = 13 then
5113: LD_VAR 0 3
5117: PUSH
5118: LD_INT 13
5120: EQUAL
5121: IFFALSE 5131
// sDepot := true ;
5123: LD_ADDR_EXP 46
5127: PUSH
5128: LD_INT 1
5130: ST_TO_ADDR
// if p3 = 14 then
5131: LD_VAR 0 3
5135: PUSH
5136: LD_INT 14
5138: EQUAL
5139: IFFALSE 5149
// sFlag := true ;
5141: LD_ADDR_EXP 47
5145: PUSH
5146: LD_INT 1
5148: ST_TO_ADDR
// if p3 = 15 then
5149: LD_VAR 0 3
5153: PUSH
5154: LD_INT 15
5156: EQUAL
5157: IFFALSE 5167
// sKamikadze := true ;
5159: LD_ADDR_EXP 55
5163: PUSH
5164: LD_INT 1
5166: ST_TO_ADDR
// if p3 = 16 then
5167: LD_VAR 0 3
5171: PUSH
5172: LD_INT 16
5174: EQUAL
5175: IFFALSE 5185
// sTroll := true ;
5177: LD_ADDR_EXP 56
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// if p3 = 17 then
5185: LD_VAR 0 3
5189: PUSH
5190: LD_INT 17
5192: EQUAL
5193: IFFALSE 5203
// sSlow := true ;
5195: LD_ADDR_EXP 57
5199: PUSH
5200: LD_INT 1
5202: ST_TO_ADDR
// if p3 = 18 then
5203: LD_VAR 0 3
5207: PUSH
5208: LD_INT 18
5210: EQUAL
5211: IFFALSE 5221
// sLack := true ;
5213: LD_ADDR_EXP 58
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// if p3 = 19 then
5221: LD_VAR 0 3
5225: PUSH
5226: LD_INT 19
5228: EQUAL
5229: IFFALSE 5239
// sTank := true ;
5231: LD_ADDR_EXP 60
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// if p3 = 20 then
5239: LD_VAR 0 3
5243: PUSH
5244: LD_INT 20
5246: EQUAL
5247: IFFALSE 5257
// sRemote := true ;
5249: LD_ADDR_EXP 61
5253: PUSH
5254: LD_INT 1
5256: ST_TO_ADDR
// if p3 = 21 then
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 21
5264: EQUAL
5265: IFFALSE 5275
// sPowell := true ;
5267: LD_ADDR_EXP 62
5271: PUSH
5272: LD_INT 1
5274: ST_TO_ADDR
// if p3 = 22 then
5275: LD_VAR 0 3
5279: PUSH
5280: LD_INT 22
5282: EQUAL
5283: IFFALSE 5293
// sTeleport := true ;
5285: LD_ADDR_EXP 65
5289: PUSH
5290: LD_INT 1
5292: ST_TO_ADDR
// if p3 = 23 then
5293: LD_VAR 0 3
5297: PUSH
5298: LD_INT 23
5300: EQUAL
5301: IFFALSE 5311
// sOilTower := true ;
5303: LD_ADDR_EXP 67
5307: PUSH
5308: LD_INT 1
5310: ST_TO_ADDR
// if p3 = 24 then
5311: LD_VAR 0 3
5315: PUSH
5316: LD_INT 24
5318: EQUAL
5319: IFFALSE 5329
// sShovel := true ;
5321: LD_ADDR_EXP 68
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// if p3 = 25 then
5329: LD_VAR 0 3
5333: PUSH
5334: LD_INT 25
5336: EQUAL
5337: IFFALSE 5347
// sSheik := true ;
5339: LD_ADDR_EXP 69
5343: PUSH
5344: LD_INT 1
5346: ST_TO_ADDR
// if p3 = 26 then
5347: LD_VAR 0 3
5351: PUSH
5352: LD_INT 26
5354: EQUAL
5355: IFFALSE 5365
// sEarthquake := true ;
5357: LD_ADDR_EXP 71
5361: PUSH
5362: LD_INT 1
5364: ST_TO_ADDR
// if p3 = 27 then
5365: LD_VAR 0 3
5369: PUSH
5370: LD_INT 27
5372: EQUAL
5373: IFFALSE 5383
// sAI := true ;
5375: LD_ADDR_EXP 72
5379: PUSH
5380: LD_INT 1
5382: ST_TO_ADDR
// if p3 = 28 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 28
5390: EQUAL
5391: IFFALSE 5401
// sCargo := true ;
5393: LD_ADDR_EXP 75
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// if p3 = 29 then
5401: LD_VAR 0 3
5405: PUSH
5406: LD_INT 29
5408: EQUAL
5409: IFFALSE 5419
// sDLaser := true ;
5411: LD_ADDR_EXP 76
5415: PUSH
5416: LD_INT 1
5418: ST_TO_ADDR
// if p3 = 30 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_INT 30
5426: EQUAL
5427: IFFALSE 5437
// sExchange := true ;
5429: LD_ADDR_EXP 77
5433: PUSH
5434: LD_INT 1
5436: ST_TO_ADDR
// if p3 = 31 then
5437: LD_VAR 0 3
5441: PUSH
5442: LD_INT 31
5444: EQUAL
5445: IFFALSE 5455
// sFac := true ;
5447: LD_ADDR_EXP 78
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// if p3 = 32 then
5455: LD_VAR 0 3
5459: PUSH
5460: LD_INT 32
5462: EQUAL
5463: IFFALSE 5473
// sPower := true ;
5465: LD_ADDR_EXP 79
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// if p3 = 33 then
5473: LD_VAR 0 3
5477: PUSH
5478: LD_INT 33
5480: EQUAL
5481: IFFALSE 5491
// sRandom := true ;
5483: LD_ADDR_EXP 80
5487: PUSH
5488: LD_INT 1
5490: ST_TO_ADDR
// if p3 = 34 then
5491: LD_VAR 0 3
5495: PUSH
5496: LD_INT 34
5498: EQUAL
5499: IFFALSE 5509
// sShield := true ;
5501: LD_ADDR_EXP 81
5505: PUSH
5506: LD_INT 1
5508: ST_TO_ADDR
// if p3 = 35 then
5509: LD_VAR 0 3
5513: PUSH
5514: LD_INT 35
5516: EQUAL
5517: IFFALSE 5527
// sTime := true ;
5519: LD_ADDR_EXP 82
5523: PUSH
5524: LD_INT 1
5526: ST_TO_ADDR
// if p3 = 36 then
5527: LD_VAR 0 3
5531: PUSH
5532: LD_INT 36
5534: EQUAL
5535: IFFALSE 5545
// sTools := true ;
5537: LD_ADDR_EXP 83
5541: PUSH
5542: LD_INT 1
5544: ST_TO_ADDR
// if p3 = 101 then
5545: LD_VAR 0 3
5549: PUSH
5550: LD_INT 101
5552: EQUAL
5553: IFFALSE 5563
// sSold := true ;
5555: LD_ADDR_EXP 48
5559: PUSH
5560: LD_INT 1
5562: ST_TO_ADDR
// if p3 = 102 then
5563: LD_VAR 0 3
5567: PUSH
5568: LD_INT 102
5570: EQUAL
5571: IFFALSE 5581
// sDiff := true ;
5573: LD_ADDR_EXP 49
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// if p3 = 103 then
5581: LD_VAR 0 3
5585: PUSH
5586: LD_INT 103
5588: EQUAL
5589: IFFALSE 5599
// sFog := true ;
5591: LD_ADDR_EXP 52
5595: PUSH
5596: LD_INT 1
5598: ST_TO_ADDR
// if p3 = 104 then
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 104
5606: EQUAL
5607: IFFALSE 5617
// sReset := true ;
5609: LD_ADDR_EXP 53
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// if p3 = 105 then
5617: LD_VAR 0 3
5621: PUSH
5622: LD_INT 105
5624: EQUAL
5625: IFFALSE 5635
// sSun := true ;
5627: LD_ADDR_EXP 54
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// if p3 = 106 then
5635: LD_VAR 0 3
5639: PUSH
5640: LD_INT 106
5642: EQUAL
5643: IFFALSE 5653
// sTiger := true ;
5645: LD_ADDR_EXP 50
5649: PUSH
5650: LD_INT 1
5652: ST_TO_ADDR
// if p3 = 107 then
5653: LD_VAR 0 3
5657: PUSH
5658: LD_INT 107
5660: EQUAL
5661: IFFALSE 5671
// sBomb := true ;
5663: LD_ADDR_EXP 51
5667: PUSH
5668: LD_INT 1
5670: ST_TO_ADDR
// if p3 = 108 then
5671: LD_VAR 0 3
5675: PUSH
5676: LD_INT 108
5678: EQUAL
5679: IFFALSE 5689
// sWound := true ;
5681: LD_ADDR_EXP 59
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// if p3 = 109 then
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 109
5696: EQUAL
5697: IFFALSE 5707
// sBetray := true ;
5699: LD_ADDR_EXP 63
5703: PUSH
5704: LD_INT 1
5706: ST_TO_ADDR
// if p3 = 110 then
5707: LD_VAR 0 3
5711: PUSH
5712: LD_INT 110
5714: EQUAL
5715: IFFALSE 5725
// sContamin := true ;
5717: LD_ADDR_EXP 64
5721: PUSH
5722: LD_INT 1
5724: ST_TO_ADDR
// if p3 = 111 then
5725: LD_VAR 0 3
5729: PUSH
5730: LD_INT 111
5732: EQUAL
5733: IFFALSE 5743
// sOil := true ;
5735: LD_ADDR_EXP 66
5739: PUSH
5740: LD_INT 1
5742: ST_TO_ADDR
// if p3 = 112 then
5743: LD_VAR 0 3
5747: PUSH
5748: LD_INT 112
5750: EQUAL
5751: IFFALSE 5761
// sStu := true ;
5753: LD_ADDR_EXP 70
5757: PUSH
5758: LD_INT 1
5760: ST_TO_ADDR
// if p3 = 113 then
5761: LD_VAR 0 3
5765: PUSH
5766: LD_INT 113
5768: EQUAL
5769: IFFALSE 5779
// sBazooka := true ;
5771: LD_ADDR_EXP 73
5775: PUSH
5776: LD_INT 1
5778: ST_TO_ADDR
// if p3 = 114 then
5779: LD_VAR 0 3
5783: PUSH
5784: LD_INT 114
5786: EQUAL
5787: IFFALSE 5797
// sMortar := true ;
5789: LD_ADDR_EXP 74
5793: PUSH
5794: LD_INT 1
5796: ST_TO_ADDR
// if p3 = 115 then
5797: LD_VAR 0 3
5801: PUSH
5802: LD_INT 115
5804: EQUAL
5805: IFFALSE 5815
// sRanger := true ;
5807: LD_ADDR_EXP 84
5811: PUSH
5812: LD_INT 1
5814: ST_TO_ADDR
// if p3 = 116 then
5815: LD_VAR 0 3
5819: PUSH
5820: LD_INT 116
5822: EQUAL
5823: IFFALSE 5833
// sComputer := true ;
5825: LD_ADDR_EXP 85
5829: PUSH
5830: LD_INT 1
5832: ST_TO_ADDR
// if p3 = 117 then
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 117
5840: EQUAL
5841: IFFALSE 5851
// s30 := true ;
5843: LD_ADDR_EXP 86
5847: PUSH
5848: LD_INT 1
5850: ST_TO_ADDR
// if p3 = 118 then
5851: LD_VAR 0 3
5855: PUSH
5856: LD_INT 118
5858: EQUAL
5859: IFFALSE 5869
// s60 := true ;
5861: LD_ADDR_EXP 87
5865: PUSH
5866: LD_INT 1
5868: ST_TO_ADDR
// end ; if p2 = 101 then
5869: LD_VAR 0 2
5873: PUSH
5874: LD_INT 101
5876: EQUAL
5877: IFFALSE 6005
// begin case p3 of 1 :
5879: LD_VAR 0 3
5883: PUSH
5884: LD_INT 1
5886: DOUBLE
5887: EQUAL
5888: IFTRUE 5892
5890: GO 5899
5892: POP
// hHackUnlimitedResources ; 2 :
5893: CALL 18103 0 0
5897: GO 6005
5899: LD_INT 2
5901: DOUBLE
5902: EQUAL
5903: IFTRUE 5907
5905: GO 5914
5907: POP
// hHackSetLevel10 ; 3 :
5908: CALL 18236 0 0
5912: GO 6005
5914: LD_INT 3
5916: DOUBLE
5917: EQUAL
5918: IFTRUE 5922
5920: GO 5929
5922: POP
// hHackSetLevel10YourUnits ; 4 :
5923: CALL 18321 0 0
5927: GO 6005
5929: LD_INT 4
5931: DOUBLE
5932: EQUAL
5933: IFTRUE 5937
5935: GO 5944
5937: POP
// hHackInvincible ; 5 :
5938: CALL 18769 0 0
5942: GO 6005
5944: LD_INT 5
5946: DOUBLE
5947: EQUAL
5948: IFTRUE 5952
5950: GO 5959
5952: POP
// hHackInvisible ; 6 :
5953: CALL 18880 0 0
5957: GO 6005
5959: LD_INT 6
5961: DOUBLE
5962: EQUAL
5963: IFTRUE 5967
5965: GO 5974
5967: POP
// hHackChangeYourSide ; 7 :
5968: CALL 18937 0 0
5972: GO 6005
5974: LD_INT 7
5976: DOUBLE
5977: EQUAL
5978: IFTRUE 5982
5980: GO 5989
5982: POP
// hHackChangeUnitSide ; 8 :
5983: CALL 18979 0 0
5987: GO 6005
5989: LD_INT 8
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6004
5997: POP
// hHackFog ; end ;
5998: CALL 19080 0 0
6002: GO 6005
6004: POP
// end ; end ;
6005: LD_VAR 0 7
6009: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6010: GO 6012
6012: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6013: LD_STRING initStreamRollete();
6015: PPUSH
6016: CALL_OW 559
// InitStreamMode ;
6020: CALL 6032 0 0
// DefineStreamItems ( false ) ;
6024: LD_INT 0
6026: PPUSH
6027: CALL 6496 0 1
// end ;
6031: END
// function InitStreamMode ; begin
6032: LD_INT 0
6034: PPUSH
// streamModeActive := false ;
6035: LD_ADDR_EXP 31
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// normalCounter := 36 ;
6043: LD_ADDR_EXP 32
6047: PUSH
6048: LD_INT 36
6050: ST_TO_ADDR
// hardcoreCounter := 18 ;
6051: LD_ADDR_EXP 33
6055: PUSH
6056: LD_INT 18
6058: ST_TO_ADDR
// sRocket := false ;
6059: LD_ADDR_EXP 36
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// sSpeed := false ;
6067: LD_ADDR_EXP 35
6071: PUSH
6072: LD_INT 0
6074: ST_TO_ADDR
// sEngine := false ;
6075: LD_ADDR_EXP 37
6079: PUSH
6080: LD_INT 0
6082: ST_TO_ADDR
// sSpec := false ;
6083: LD_ADDR_EXP 34
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// sLevel := false ;
6091: LD_ADDR_EXP 38
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// sArmoury := false ;
6099: LD_ADDR_EXP 39
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// sRadar := false ;
6107: LD_ADDR_EXP 40
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// sBunker := false ;
6115: LD_ADDR_EXP 41
6119: PUSH
6120: LD_INT 0
6122: ST_TO_ADDR
// sHack := false ;
6123: LD_ADDR_EXP 42
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// sFire := false ;
6131: LD_ADDR_EXP 43
6135: PUSH
6136: LD_INT 0
6138: ST_TO_ADDR
// sRefresh := false ;
6139: LD_ADDR_EXP 44
6143: PUSH
6144: LD_INT 0
6146: ST_TO_ADDR
// sExp := false ;
6147: LD_ADDR_EXP 45
6151: PUSH
6152: LD_INT 0
6154: ST_TO_ADDR
// sDepot := false ;
6155: LD_ADDR_EXP 46
6159: PUSH
6160: LD_INT 0
6162: ST_TO_ADDR
// sFlag := false ;
6163: LD_ADDR_EXP 47
6167: PUSH
6168: LD_INT 0
6170: ST_TO_ADDR
// sKamikadze := false ;
6171: LD_ADDR_EXP 55
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// sTroll := false ;
6179: LD_ADDR_EXP 56
6183: PUSH
6184: LD_INT 0
6186: ST_TO_ADDR
// sSlow := false ;
6187: LD_ADDR_EXP 57
6191: PUSH
6192: LD_INT 0
6194: ST_TO_ADDR
// sLack := false ;
6195: LD_ADDR_EXP 58
6199: PUSH
6200: LD_INT 0
6202: ST_TO_ADDR
// sTank := false ;
6203: LD_ADDR_EXP 60
6207: PUSH
6208: LD_INT 0
6210: ST_TO_ADDR
// sRemote := false ;
6211: LD_ADDR_EXP 61
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// sPowell := false ;
6219: LD_ADDR_EXP 62
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// sTeleport := false ;
6227: LD_ADDR_EXP 65
6231: PUSH
6232: LD_INT 0
6234: ST_TO_ADDR
// sOilTower := false ;
6235: LD_ADDR_EXP 67
6239: PUSH
6240: LD_INT 0
6242: ST_TO_ADDR
// sShovel := false ;
6243: LD_ADDR_EXP 68
6247: PUSH
6248: LD_INT 0
6250: ST_TO_ADDR
// sSheik := false ;
6251: LD_ADDR_EXP 69
6255: PUSH
6256: LD_INT 0
6258: ST_TO_ADDR
// sEarthquake := false ;
6259: LD_ADDR_EXP 71
6263: PUSH
6264: LD_INT 0
6266: ST_TO_ADDR
// sAI := false ;
6267: LD_ADDR_EXP 72
6271: PUSH
6272: LD_INT 0
6274: ST_TO_ADDR
// sCargo := false ;
6275: LD_ADDR_EXP 75
6279: PUSH
6280: LD_INT 0
6282: ST_TO_ADDR
// sDLaser := false ;
6283: LD_ADDR_EXP 76
6287: PUSH
6288: LD_INT 0
6290: ST_TO_ADDR
// sExchange := false ;
6291: LD_ADDR_EXP 77
6295: PUSH
6296: LD_INT 0
6298: ST_TO_ADDR
// sFac := false ;
6299: LD_ADDR_EXP 78
6303: PUSH
6304: LD_INT 0
6306: ST_TO_ADDR
// sPower := false ;
6307: LD_ADDR_EXP 79
6311: PUSH
6312: LD_INT 0
6314: ST_TO_ADDR
// sRandom := false ;
6315: LD_ADDR_EXP 80
6319: PUSH
6320: LD_INT 0
6322: ST_TO_ADDR
// sShield := false ;
6323: LD_ADDR_EXP 81
6327: PUSH
6328: LD_INT 0
6330: ST_TO_ADDR
// sTime := false ;
6331: LD_ADDR_EXP 82
6335: PUSH
6336: LD_INT 0
6338: ST_TO_ADDR
// sTools := false ;
6339: LD_ADDR_EXP 83
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// sSold := false ;
6347: LD_ADDR_EXP 48
6351: PUSH
6352: LD_INT 0
6354: ST_TO_ADDR
// sDiff := false ;
6355: LD_ADDR_EXP 49
6359: PUSH
6360: LD_INT 0
6362: ST_TO_ADDR
// sFog := false ;
6363: LD_ADDR_EXP 52
6367: PUSH
6368: LD_INT 0
6370: ST_TO_ADDR
// sReset := false ;
6371: LD_ADDR_EXP 53
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// sSun := false ;
6379: LD_ADDR_EXP 54
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// sTiger := false ;
6387: LD_ADDR_EXP 50
6391: PUSH
6392: LD_INT 0
6394: ST_TO_ADDR
// sBomb := false ;
6395: LD_ADDR_EXP 51
6399: PUSH
6400: LD_INT 0
6402: ST_TO_ADDR
// sWound := false ;
6403: LD_ADDR_EXP 59
6407: PUSH
6408: LD_INT 0
6410: ST_TO_ADDR
// sBetray := false ;
6411: LD_ADDR_EXP 63
6415: PUSH
6416: LD_INT 0
6418: ST_TO_ADDR
// sContamin := false ;
6419: LD_ADDR_EXP 64
6423: PUSH
6424: LD_INT 0
6426: ST_TO_ADDR
// sOil := false ;
6427: LD_ADDR_EXP 66
6431: PUSH
6432: LD_INT 0
6434: ST_TO_ADDR
// sStu := false ;
6435: LD_ADDR_EXP 70
6439: PUSH
6440: LD_INT 0
6442: ST_TO_ADDR
// sBazooka := false ;
6443: LD_ADDR_EXP 73
6447: PUSH
6448: LD_INT 0
6450: ST_TO_ADDR
// sMortar := false ;
6451: LD_ADDR_EXP 74
6455: PUSH
6456: LD_INT 0
6458: ST_TO_ADDR
// sRanger := false ;
6459: LD_ADDR_EXP 84
6463: PUSH
6464: LD_INT 0
6466: ST_TO_ADDR
// sComputer := false ;
6467: LD_ADDR_EXP 85
6471: PUSH
6472: LD_INT 0
6474: ST_TO_ADDR
// s30 := false ;
6475: LD_ADDR_EXP 86
6479: PUSH
6480: LD_INT 0
6482: ST_TO_ADDR
// s60 := false ;
6483: LD_ADDR_EXP 87
6487: PUSH
6488: LD_INT 0
6490: ST_TO_ADDR
// end ;
6491: LD_VAR 0 1
6495: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6496: LD_INT 0
6498: PPUSH
6499: PPUSH
6500: PPUSH
6501: PPUSH
6502: PPUSH
6503: PPUSH
6504: PPUSH
// result := [ ] ;
6505: LD_ADDR_VAR 0 2
6509: PUSH
6510: EMPTY
6511: ST_TO_ADDR
// if campaign_id = 1 then
6512: LD_OWVAR 69
6516: PUSH
6517: LD_INT 1
6519: EQUAL
6520: IFFALSE 9686
// begin case mission_number of 1 :
6522: LD_OWVAR 70
6526: PUSH
6527: LD_INT 1
6529: DOUBLE
6530: EQUAL
6531: IFTRUE 6535
6533: GO 6611
6535: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6536: LD_ADDR_VAR 0 2
6540: PUSH
6541: LD_INT 2
6543: PUSH
6544: LD_INT 4
6546: PUSH
6547: LD_INT 11
6549: PUSH
6550: LD_INT 12
6552: PUSH
6553: LD_INT 15
6555: PUSH
6556: LD_INT 16
6558: PUSH
6559: LD_INT 22
6561: PUSH
6562: LD_INT 23
6564: PUSH
6565: LD_INT 26
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 101
6581: PUSH
6582: LD_INT 102
6584: PUSH
6585: LD_INT 106
6587: PUSH
6588: LD_INT 116
6590: PUSH
6591: LD_INT 117
6593: PUSH
6594: LD_INT 118
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: ST_TO_ADDR
6609: GO 9684
6611: LD_INT 2
6613: DOUBLE
6614: EQUAL
6615: IFTRUE 6619
6617: GO 6703
6619: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6620: LD_ADDR_VAR 0 2
6624: PUSH
6625: LD_INT 2
6627: PUSH
6628: LD_INT 4
6630: PUSH
6631: LD_INT 11
6633: PUSH
6634: LD_INT 12
6636: PUSH
6637: LD_INT 15
6639: PUSH
6640: LD_INT 16
6642: PUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 23
6648: PUSH
6649: LD_INT 26
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 101
6665: PUSH
6666: LD_INT 102
6668: PUSH
6669: LD_INT 105
6671: PUSH
6672: LD_INT 106
6674: PUSH
6675: LD_INT 108
6677: PUSH
6678: LD_INT 116
6680: PUSH
6681: LD_INT 117
6683: PUSH
6684: LD_INT 118
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: ST_TO_ADDR
6701: GO 9684
6703: LD_INT 3
6705: DOUBLE
6706: EQUAL
6707: IFTRUE 6711
6709: GO 6799
6711: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6712: LD_ADDR_VAR 0 2
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: LD_INT 4
6722: PUSH
6723: LD_INT 5
6725: PUSH
6726: LD_INT 11
6728: PUSH
6729: LD_INT 12
6731: PUSH
6732: LD_INT 15
6734: PUSH
6735: LD_INT 16
6737: PUSH
6738: LD_INT 22
6740: PUSH
6741: LD_INT 26
6743: PUSH
6744: LD_INT 36
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 101
6761: PUSH
6762: LD_INT 102
6764: PUSH
6765: LD_INT 105
6767: PUSH
6768: LD_INT 106
6770: PUSH
6771: LD_INT 108
6773: PUSH
6774: LD_INT 116
6776: PUSH
6777: LD_INT 117
6779: PUSH
6780: LD_INT 118
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: ST_TO_ADDR
6797: GO 9684
6799: LD_INT 4
6801: DOUBLE
6802: EQUAL
6803: IFTRUE 6807
6805: GO 6903
6807: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6808: LD_ADDR_VAR 0 2
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 4
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: LD_INT 8
6824: PUSH
6825: LD_INT 11
6827: PUSH
6828: LD_INT 12
6830: PUSH
6831: LD_INT 15
6833: PUSH
6834: LD_INT 16
6836: PUSH
6837: LD_INT 22
6839: PUSH
6840: LD_INT 23
6842: PUSH
6843: LD_INT 26
6845: PUSH
6846: LD_INT 36
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 101
6865: PUSH
6866: LD_INT 102
6868: PUSH
6869: LD_INT 105
6871: PUSH
6872: LD_INT 106
6874: PUSH
6875: LD_INT 108
6877: PUSH
6878: LD_INT 116
6880: PUSH
6881: LD_INT 117
6883: PUSH
6884: LD_INT 118
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: ST_TO_ADDR
6901: GO 9684
6903: LD_INT 5
6905: DOUBLE
6906: EQUAL
6907: IFTRUE 6911
6909: GO 7023
6911: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6912: LD_ADDR_VAR 0 2
6916: PUSH
6917: LD_INT 2
6919: PUSH
6920: LD_INT 4
6922: PUSH
6923: LD_INT 5
6925: PUSH
6926: LD_INT 6
6928: PUSH
6929: LD_INT 8
6931: PUSH
6932: LD_INT 11
6934: PUSH
6935: LD_INT 12
6937: PUSH
6938: LD_INT 15
6940: PUSH
6941: LD_INT 16
6943: PUSH
6944: LD_INT 22
6946: PUSH
6947: LD_INT 23
6949: PUSH
6950: LD_INT 25
6952: PUSH
6953: LD_INT 26
6955: PUSH
6956: LD_INT 36
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 101
6977: PUSH
6978: LD_INT 102
6980: PUSH
6981: LD_INT 105
6983: PUSH
6984: LD_INT 106
6986: PUSH
6987: LD_INT 108
6989: PUSH
6990: LD_INT 109
6992: PUSH
6993: LD_INT 112
6995: PUSH
6996: LD_INT 116
6998: PUSH
6999: LD_INT 117
7001: PUSH
7002: LD_INT 118
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
7021: GO 9684
7023: LD_INT 6
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7163
7031: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7032: LD_ADDR_VAR 0 2
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: LD_INT 4
7042: PUSH
7043: LD_INT 5
7045: PUSH
7046: LD_INT 6
7048: PUSH
7049: LD_INT 8
7051: PUSH
7052: LD_INT 11
7054: PUSH
7055: LD_INT 12
7057: PUSH
7058: LD_INT 15
7060: PUSH
7061: LD_INT 16
7063: PUSH
7064: LD_INT 20
7066: PUSH
7067: LD_INT 21
7069: PUSH
7070: LD_INT 22
7072: PUSH
7073: LD_INT 23
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 26
7081: PUSH
7082: LD_INT 30
7084: PUSH
7085: LD_INT 31
7087: PUSH
7088: LD_INT 32
7090: PUSH
7091: LD_INT 36
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 101
7117: PUSH
7118: LD_INT 102
7120: PUSH
7121: LD_INT 105
7123: PUSH
7124: LD_INT 106
7126: PUSH
7127: LD_INT 108
7129: PUSH
7130: LD_INT 109
7132: PUSH
7133: LD_INT 112
7135: PUSH
7136: LD_INT 116
7138: PUSH
7139: LD_INT 117
7141: PUSH
7142: LD_INT 118
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: ST_TO_ADDR
7161: GO 9684
7163: LD_INT 7
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7283
7171: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7172: LD_ADDR_VAR 0 2
7176: PUSH
7177: LD_INT 2
7179: PUSH
7180: LD_INT 4
7182: PUSH
7183: LD_INT 5
7185: PUSH
7186: LD_INT 7
7188: PUSH
7189: LD_INT 11
7191: PUSH
7192: LD_INT 12
7194: PUSH
7195: LD_INT 15
7197: PUSH
7198: LD_INT 16
7200: PUSH
7201: LD_INT 20
7203: PUSH
7204: LD_INT 21
7206: PUSH
7207: LD_INT 22
7209: PUSH
7210: LD_INT 23
7212: PUSH
7213: LD_INT 25
7215: PUSH
7216: LD_INT 26
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 101
7237: PUSH
7238: LD_INT 102
7240: PUSH
7241: LD_INT 103
7243: PUSH
7244: LD_INT 105
7246: PUSH
7247: LD_INT 106
7249: PUSH
7250: LD_INT 108
7252: PUSH
7253: LD_INT 112
7255: PUSH
7256: LD_INT 116
7258: PUSH
7259: LD_INT 117
7261: PUSH
7262: LD_INT 118
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: ST_TO_ADDR
7281: GO 9684
7283: LD_INT 8
7285: DOUBLE
7286: EQUAL
7287: IFTRUE 7291
7289: GO 7431
7291: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7292: LD_ADDR_VAR 0 2
7296: PUSH
7297: LD_INT 2
7299: PUSH
7300: LD_INT 4
7302: PUSH
7303: LD_INT 5
7305: PUSH
7306: LD_INT 6
7308: PUSH
7309: LD_INT 7
7311: PUSH
7312: LD_INT 8
7314: PUSH
7315: LD_INT 11
7317: PUSH
7318: LD_INT 12
7320: PUSH
7321: LD_INT 15
7323: PUSH
7324: LD_INT 16
7326: PUSH
7327: LD_INT 20
7329: PUSH
7330: LD_INT 21
7332: PUSH
7333: LD_INT 22
7335: PUSH
7336: LD_INT 23
7338: PUSH
7339: LD_INT 25
7341: PUSH
7342: LD_INT 26
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 31
7350: PUSH
7351: LD_INT 32
7353: PUSH
7354: LD_INT 36
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 101
7381: PUSH
7382: LD_INT 102
7384: PUSH
7385: LD_INT 103
7387: PUSH
7388: LD_INT 105
7390: PUSH
7391: LD_INT 106
7393: PUSH
7394: LD_INT 108
7396: PUSH
7397: LD_INT 109
7399: PUSH
7400: LD_INT 112
7402: PUSH
7403: LD_INT 116
7405: PUSH
7406: LD_INT 117
7408: PUSH
7409: LD_INT 118
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: ST_TO_ADDR
7429: GO 9684
7431: LD_INT 9
7433: DOUBLE
7434: EQUAL
7435: IFTRUE 7439
7437: GO 7587
7439: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7440: LD_ADDR_VAR 0 2
7444: PUSH
7445: LD_INT 2
7447: PUSH
7448: LD_INT 4
7450: PUSH
7451: LD_INT 5
7453: PUSH
7454: LD_INT 6
7456: PUSH
7457: LD_INT 7
7459: PUSH
7460: LD_INT 8
7462: PUSH
7463: LD_INT 11
7465: PUSH
7466: LD_INT 12
7468: PUSH
7469: LD_INT 15
7471: PUSH
7472: LD_INT 16
7474: PUSH
7475: LD_INT 20
7477: PUSH
7478: LD_INT 21
7480: PUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 23
7486: PUSH
7487: LD_INT 25
7489: PUSH
7490: LD_INT 26
7492: PUSH
7493: LD_INT 28
7495: PUSH
7496: LD_INT 30
7498: PUSH
7499: LD_INT 31
7501: PUSH
7502: LD_INT 32
7504: PUSH
7505: LD_INT 36
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 101
7533: PUSH
7534: LD_INT 102
7536: PUSH
7537: LD_INT 103
7539: PUSH
7540: LD_INT 105
7542: PUSH
7543: LD_INT 106
7545: PUSH
7546: LD_INT 108
7548: PUSH
7549: LD_INT 109
7551: PUSH
7552: LD_INT 112
7554: PUSH
7555: LD_INT 114
7557: PUSH
7558: LD_INT 116
7560: PUSH
7561: LD_INT 117
7563: PUSH
7564: LD_INT 118
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: ST_TO_ADDR
7585: GO 9684
7587: LD_INT 10
7589: DOUBLE
7590: EQUAL
7591: IFTRUE 7595
7593: GO 7791
7595: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7596: LD_ADDR_VAR 0 2
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: LD_INT 4
7606: PUSH
7607: LD_INT 5
7609: PUSH
7610: LD_INT 6
7612: PUSH
7613: LD_INT 7
7615: PUSH
7616: LD_INT 8
7618: PUSH
7619: LD_INT 9
7621: PUSH
7622: LD_INT 10
7624: PUSH
7625: LD_INT 11
7627: PUSH
7628: LD_INT 12
7630: PUSH
7631: LD_INT 13
7633: PUSH
7634: LD_INT 14
7636: PUSH
7637: LD_INT 15
7639: PUSH
7640: LD_INT 16
7642: PUSH
7643: LD_INT 17
7645: PUSH
7646: LD_INT 18
7648: PUSH
7649: LD_INT 19
7651: PUSH
7652: LD_INT 20
7654: PUSH
7655: LD_INT 21
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 23
7663: PUSH
7664: LD_INT 24
7666: PUSH
7667: LD_INT 25
7669: PUSH
7670: LD_INT 26
7672: PUSH
7673: LD_INT 28
7675: PUSH
7676: LD_INT 30
7678: PUSH
7679: LD_INT 31
7681: PUSH
7682: LD_INT 32
7684: PUSH
7685: LD_INT 36
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: PUSH
7719: LD_INT 101
7721: PUSH
7722: LD_INT 102
7724: PUSH
7725: LD_INT 103
7727: PUSH
7728: LD_INT 104
7730: PUSH
7731: LD_INT 105
7733: PUSH
7734: LD_INT 106
7736: PUSH
7737: LD_INT 107
7739: PUSH
7740: LD_INT 108
7742: PUSH
7743: LD_INT 109
7745: PUSH
7746: LD_INT 110
7748: PUSH
7749: LD_INT 111
7751: PUSH
7752: LD_INT 112
7754: PUSH
7755: LD_INT 114
7757: PUSH
7758: LD_INT 116
7760: PUSH
7761: LD_INT 117
7763: PUSH
7764: LD_INT 118
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: ST_TO_ADDR
7789: GO 9684
7791: LD_INT 11
7793: DOUBLE
7794: EQUAL
7795: IFTRUE 7799
7797: GO 8003
7799: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7800: LD_ADDR_VAR 0 2
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: LD_INT 4
7813: PUSH
7814: LD_INT 5
7816: PUSH
7817: LD_INT 6
7819: PUSH
7820: LD_INT 7
7822: PUSH
7823: LD_INT 8
7825: PUSH
7826: LD_INT 9
7828: PUSH
7829: LD_INT 10
7831: PUSH
7832: LD_INT 11
7834: PUSH
7835: LD_INT 12
7837: PUSH
7838: LD_INT 13
7840: PUSH
7841: LD_INT 14
7843: PUSH
7844: LD_INT 15
7846: PUSH
7847: LD_INT 16
7849: PUSH
7850: LD_INT 17
7852: PUSH
7853: LD_INT 18
7855: PUSH
7856: LD_INT 19
7858: PUSH
7859: LD_INT 20
7861: PUSH
7862: LD_INT 21
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_INT 23
7870: PUSH
7871: LD_INT 24
7873: PUSH
7874: LD_INT 25
7876: PUSH
7877: LD_INT 26
7879: PUSH
7880: LD_INT 28
7882: PUSH
7883: LD_INT 30
7885: PUSH
7886: LD_INT 31
7888: PUSH
7889: LD_INT 32
7891: PUSH
7892: LD_INT 34
7894: PUSH
7895: LD_INT 36
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PUSH
7931: LD_INT 101
7933: PUSH
7934: LD_INT 102
7936: PUSH
7937: LD_INT 103
7939: PUSH
7940: LD_INT 104
7942: PUSH
7943: LD_INT 105
7945: PUSH
7946: LD_INT 106
7948: PUSH
7949: LD_INT 107
7951: PUSH
7952: LD_INT 108
7954: PUSH
7955: LD_INT 109
7957: PUSH
7958: LD_INT 110
7960: PUSH
7961: LD_INT 111
7963: PUSH
7964: LD_INT 112
7966: PUSH
7967: LD_INT 114
7969: PUSH
7970: LD_INT 116
7972: PUSH
7973: LD_INT 117
7975: PUSH
7976: LD_INT 118
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: ST_TO_ADDR
8001: GO 9684
8003: LD_INT 12
8005: DOUBLE
8006: EQUAL
8007: IFTRUE 8011
8009: GO 8231
8011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8012: LD_ADDR_VAR 0 2
8016: PUSH
8017: LD_INT 1
8019: PUSH
8020: LD_INT 2
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: LD_INT 4
8028: PUSH
8029: LD_INT 5
8031: PUSH
8032: LD_INT 6
8034: PUSH
8035: LD_INT 7
8037: PUSH
8038: LD_INT 8
8040: PUSH
8041: LD_INT 9
8043: PUSH
8044: LD_INT 10
8046: PUSH
8047: LD_INT 11
8049: PUSH
8050: LD_INT 12
8052: PUSH
8053: LD_INT 13
8055: PUSH
8056: LD_INT 14
8058: PUSH
8059: LD_INT 15
8061: PUSH
8062: LD_INT 16
8064: PUSH
8065: LD_INT 17
8067: PUSH
8068: LD_INT 18
8070: PUSH
8071: LD_INT 19
8073: PUSH
8074: LD_INT 20
8076: PUSH
8077: LD_INT 21
8079: PUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 23
8085: PUSH
8086: LD_INT 24
8088: PUSH
8089: LD_INT 25
8091: PUSH
8092: LD_INT 26
8094: PUSH
8095: LD_INT 27
8097: PUSH
8098: LD_INT 28
8100: PUSH
8101: LD_INT 30
8103: PUSH
8104: LD_INT 31
8106: PUSH
8107: LD_INT 32
8109: PUSH
8110: LD_INT 33
8112: PUSH
8113: LD_INT 34
8115: PUSH
8116: LD_INT 36
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 101
8157: PUSH
8158: LD_INT 102
8160: PUSH
8161: LD_INT 103
8163: PUSH
8164: LD_INT 104
8166: PUSH
8167: LD_INT 105
8169: PUSH
8170: LD_INT 106
8172: PUSH
8173: LD_INT 107
8175: PUSH
8176: LD_INT 108
8178: PUSH
8179: LD_INT 109
8181: PUSH
8182: LD_INT 110
8184: PUSH
8185: LD_INT 111
8187: PUSH
8188: LD_INT 112
8190: PUSH
8191: LD_INT 113
8193: PUSH
8194: LD_INT 114
8196: PUSH
8197: LD_INT 116
8199: PUSH
8200: LD_INT 117
8202: PUSH
8203: LD_INT 118
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: ST_TO_ADDR
8229: GO 9684
8231: LD_INT 13
8233: DOUBLE
8234: EQUAL
8235: IFTRUE 8239
8237: GO 8447
8239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8240: LD_ADDR_VAR 0 2
8244: PUSH
8245: LD_INT 1
8247: PUSH
8248: LD_INT 2
8250: PUSH
8251: LD_INT 3
8253: PUSH
8254: LD_INT 4
8256: PUSH
8257: LD_INT 5
8259: PUSH
8260: LD_INT 8
8262: PUSH
8263: LD_INT 9
8265: PUSH
8266: LD_INT 10
8268: PUSH
8269: LD_INT 11
8271: PUSH
8272: LD_INT 12
8274: PUSH
8275: LD_INT 14
8277: PUSH
8278: LD_INT 15
8280: PUSH
8281: LD_INT 16
8283: PUSH
8284: LD_INT 17
8286: PUSH
8287: LD_INT 18
8289: PUSH
8290: LD_INT 19
8292: PUSH
8293: LD_INT 20
8295: PUSH
8296: LD_INT 21
8298: PUSH
8299: LD_INT 22
8301: PUSH
8302: LD_INT 23
8304: PUSH
8305: LD_INT 24
8307: PUSH
8308: LD_INT 25
8310: PUSH
8311: LD_INT 26
8313: PUSH
8314: LD_INT 27
8316: PUSH
8317: LD_INT 28
8319: PUSH
8320: LD_INT 30
8322: PUSH
8323: LD_INT 31
8325: PUSH
8326: LD_INT 32
8328: PUSH
8329: LD_INT 33
8331: PUSH
8332: LD_INT 34
8334: PUSH
8335: LD_INT 36
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 101
8373: PUSH
8374: LD_INT 102
8376: PUSH
8377: LD_INT 103
8379: PUSH
8380: LD_INT 104
8382: PUSH
8383: LD_INT 105
8385: PUSH
8386: LD_INT 106
8388: PUSH
8389: LD_INT 107
8391: PUSH
8392: LD_INT 108
8394: PUSH
8395: LD_INT 109
8397: PUSH
8398: LD_INT 110
8400: PUSH
8401: LD_INT 111
8403: PUSH
8404: LD_INT 112
8406: PUSH
8407: LD_INT 113
8409: PUSH
8410: LD_INT 114
8412: PUSH
8413: LD_INT 116
8415: PUSH
8416: LD_INT 117
8418: PUSH
8419: LD_INT 118
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: ST_TO_ADDR
8445: GO 9684
8447: LD_INT 14
8449: DOUBLE
8450: EQUAL
8451: IFTRUE 8455
8453: GO 8679
8455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8456: LD_ADDR_VAR 0 2
8460: PUSH
8461: LD_INT 1
8463: PUSH
8464: LD_INT 2
8466: PUSH
8467: LD_INT 3
8469: PUSH
8470: LD_INT 4
8472: PUSH
8473: LD_INT 5
8475: PUSH
8476: LD_INT 6
8478: PUSH
8479: LD_INT 7
8481: PUSH
8482: LD_INT 8
8484: PUSH
8485: LD_INT 9
8487: PUSH
8488: LD_INT 10
8490: PUSH
8491: LD_INT 11
8493: PUSH
8494: LD_INT 12
8496: PUSH
8497: LD_INT 13
8499: PUSH
8500: LD_INT 14
8502: PUSH
8503: LD_INT 15
8505: PUSH
8506: LD_INT 16
8508: PUSH
8509: LD_INT 17
8511: PUSH
8512: LD_INT 18
8514: PUSH
8515: LD_INT 19
8517: PUSH
8518: LD_INT 20
8520: PUSH
8521: LD_INT 21
8523: PUSH
8524: LD_INT 22
8526: PUSH
8527: LD_INT 23
8529: PUSH
8530: LD_INT 24
8532: PUSH
8533: LD_INT 25
8535: PUSH
8536: LD_INT 26
8538: PUSH
8539: LD_INT 27
8541: PUSH
8542: LD_INT 28
8544: PUSH
8545: LD_INT 29
8547: PUSH
8548: LD_INT 30
8550: PUSH
8551: LD_INT 31
8553: PUSH
8554: LD_INT 32
8556: PUSH
8557: LD_INT 33
8559: PUSH
8560: LD_INT 34
8562: PUSH
8563: LD_INT 36
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: PUSH
8603: LD_INT 101
8605: PUSH
8606: LD_INT 102
8608: PUSH
8609: LD_INT 103
8611: PUSH
8612: LD_INT 104
8614: PUSH
8615: LD_INT 105
8617: PUSH
8618: LD_INT 106
8620: PUSH
8621: LD_INT 107
8623: PUSH
8624: LD_INT 108
8626: PUSH
8627: LD_INT 109
8629: PUSH
8630: LD_INT 110
8632: PUSH
8633: LD_INT 111
8635: PUSH
8636: LD_INT 112
8638: PUSH
8639: LD_INT 113
8641: PUSH
8642: LD_INT 114
8644: PUSH
8645: LD_INT 116
8647: PUSH
8648: LD_INT 117
8650: PUSH
8651: LD_INT 118
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: ST_TO_ADDR
8677: GO 9684
8679: LD_INT 15
8681: DOUBLE
8682: EQUAL
8683: IFTRUE 8687
8685: GO 8911
8687: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8688: LD_ADDR_VAR 0 2
8692: PUSH
8693: LD_INT 1
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 4
8704: PUSH
8705: LD_INT 5
8707: PUSH
8708: LD_INT 6
8710: PUSH
8711: LD_INT 7
8713: PUSH
8714: LD_INT 8
8716: PUSH
8717: LD_INT 9
8719: PUSH
8720: LD_INT 10
8722: PUSH
8723: LD_INT 11
8725: PUSH
8726: LD_INT 12
8728: PUSH
8729: LD_INT 13
8731: PUSH
8732: LD_INT 14
8734: PUSH
8735: LD_INT 15
8737: PUSH
8738: LD_INT 16
8740: PUSH
8741: LD_INT 17
8743: PUSH
8744: LD_INT 18
8746: PUSH
8747: LD_INT 19
8749: PUSH
8750: LD_INT 20
8752: PUSH
8753: LD_INT 21
8755: PUSH
8756: LD_INT 22
8758: PUSH
8759: LD_INT 23
8761: PUSH
8762: LD_INT 24
8764: PUSH
8765: LD_INT 25
8767: PUSH
8768: LD_INT 26
8770: PUSH
8771: LD_INT 27
8773: PUSH
8774: LD_INT 28
8776: PUSH
8777: LD_INT 29
8779: PUSH
8780: LD_INT 30
8782: PUSH
8783: LD_INT 31
8785: PUSH
8786: LD_INT 32
8788: PUSH
8789: LD_INT 33
8791: PUSH
8792: LD_INT 34
8794: PUSH
8795: LD_INT 36
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 101
8837: PUSH
8838: LD_INT 102
8840: PUSH
8841: LD_INT 103
8843: PUSH
8844: LD_INT 104
8846: PUSH
8847: LD_INT 105
8849: PUSH
8850: LD_INT 106
8852: PUSH
8853: LD_INT 107
8855: PUSH
8856: LD_INT 108
8858: PUSH
8859: LD_INT 109
8861: PUSH
8862: LD_INT 110
8864: PUSH
8865: LD_INT 111
8867: PUSH
8868: LD_INT 112
8870: PUSH
8871: LD_INT 113
8873: PUSH
8874: LD_INT 114
8876: PUSH
8877: LD_INT 116
8879: PUSH
8880: LD_INT 117
8882: PUSH
8883: LD_INT 118
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: ST_TO_ADDR
8909: GO 9684
8911: LD_INT 16
8913: DOUBLE
8914: EQUAL
8915: IFTRUE 8919
8917: GO 9055
8919: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8920: LD_ADDR_VAR 0 2
8924: PUSH
8925: LD_INT 2
8927: PUSH
8928: LD_INT 4
8930: PUSH
8931: LD_INT 5
8933: PUSH
8934: LD_INT 7
8936: PUSH
8937: LD_INT 11
8939: PUSH
8940: LD_INT 12
8942: PUSH
8943: LD_INT 15
8945: PUSH
8946: LD_INT 16
8948: PUSH
8949: LD_INT 20
8951: PUSH
8952: LD_INT 21
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 23
8960: PUSH
8961: LD_INT 25
8963: PUSH
8964: LD_INT 26
8966: PUSH
8967: LD_INT 30
8969: PUSH
8970: LD_INT 31
8972: PUSH
8973: LD_INT 32
8975: PUSH
8976: LD_INT 33
8978: PUSH
8979: LD_INT 34
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 101
9005: PUSH
9006: LD_INT 102
9008: PUSH
9009: LD_INT 103
9011: PUSH
9012: LD_INT 106
9014: PUSH
9015: LD_INT 108
9017: PUSH
9018: LD_INT 112
9020: PUSH
9021: LD_INT 113
9023: PUSH
9024: LD_INT 114
9026: PUSH
9027: LD_INT 116
9029: PUSH
9030: LD_INT 117
9032: PUSH
9033: LD_INT 118
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: ST_TO_ADDR
9053: GO 9684
9055: LD_INT 17
9057: DOUBLE
9058: EQUAL
9059: IFTRUE 9063
9061: GO 9287
9063: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9064: LD_ADDR_VAR 0 2
9068: PUSH
9069: LD_INT 1
9071: PUSH
9072: LD_INT 2
9074: PUSH
9075: LD_INT 3
9077: PUSH
9078: LD_INT 4
9080: PUSH
9081: LD_INT 5
9083: PUSH
9084: LD_INT 6
9086: PUSH
9087: LD_INT 7
9089: PUSH
9090: LD_INT 8
9092: PUSH
9093: LD_INT 9
9095: PUSH
9096: LD_INT 10
9098: PUSH
9099: LD_INT 11
9101: PUSH
9102: LD_INT 12
9104: PUSH
9105: LD_INT 13
9107: PUSH
9108: LD_INT 14
9110: PUSH
9111: LD_INT 15
9113: PUSH
9114: LD_INT 16
9116: PUSH
9117: LD_INT 17
9119: PUSH
9120: LD_INT 18
9122: PUSH
9123: LD_INT 19
9125: PUSH
9126: LD_INT 20
9128: PUSH
9129: LD_INT 21
9131: PUSH
9132: LD_INT 22
9134: PUSH
9135: LD_INT 23
9137: PUSH
9138: LD_INT 24
9140: PUSH
9141: LD_INT 25
9143: PUSH
9144: LD_INT 26
9146: PUSH
9147: LD_INT 27
9149: PUSH
9150: LD_INT 28
9152: PUSH
9153: LD_INT 29
9155: PUSH
9156: LD_INT 30
9158: PUSH
9159: LD_INT 31
9161: PUSH
9162: LD_INT 32
9164: PUSH
9165: LD_INT 33
9167: PUSH
9168: LD_INT 34
9170: PUSH
9171: LD_INT 36
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 101
9213: PUSH
9214: LD_INT 102
9216: PUSH
9217: LD_INT 103
9219: PUSH
9220: LD_INT 104
9222: PUSH
9223: LD_INT 105
9225: PUSH
9226: LD_INT 106
9228: PUSH
9229: LD_INT 107
9231: PUSH
9232: LD_INT 108
9234: PUSH
9235: LD_INT 109
9237: PUSH
9238: LD_INT 110
9240: PUSH
9241: LD_INT 111
9243: PUSH
9244: LD_INT 112
9246: PUSH
9247: LD_INT 113
9249: PUSH
9250: LD_INT 114
9252: PUSH
9253: LD_INT 116
9255: PUSH
9256: LD_INT 117
9258: PUSH
9259: LD_INT 118
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: ST_TO_ADDR
9285: GO 9684
9287: LD_INT 18
9289: DOUBLE
9290: EQUAL
9291: IFTRUE 9295
9293: GO 9443
9295: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9296: LD_ADDR_VAR 0 2
9300: PUSH
9301: LD_INT 2
9303: PUSH
9304: LD_INT 4
9306: PUSH
9307: LD_INT 5
9309: PUSH
9310: LD_INT 7
9312: PUSH
9313: LD_INT 11
9315: PUSH
9316: LD_INT 12
9318: PUSH
9319: LD_INT 15
9321: PUSH
9322: LD_INT 16
9324: PUSH
9325: LD_INT 20
9327: PUSH
9328: LD_INT 21
9330: PUSH
9331: LD_INT 22
9333: PUSH
9334: LD_INT 23
9336: PUSH
9337: LD_INT 25
9339: PUSH
9340: LD_INT 26
9342: PUSH
9343: LD_INT 30
9345: PUSH
9346: LD_INT 31
9348: PUSH
9349: LD_INT 32
9351: PUSH
9352: LD_INT 33
9354: PUSH
9355: LD_INT 34
9357: PUSH
9358: LD_INT 35
9360: PUSH
9361: LD_INT 36
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 101
9389: PUSH
9390: LD_INT 102
9392: PUSH
9393: LD_INT 103
9395: PUSH
9396: LD_INT 106
9398: PUSH
9399: LD_INT 108
9401: PUSH
9402: LD_INT 112
9404: PUSH
9405: LD_INT 113
9407: PUSH
9408: LD_INT 114
9410: PUSH
9411: LD_INT 115
9413: PUSH
9414: LD_INT 116
9416: PUSH
9417: LD_INT 117
9419: PUSH
9420: LD_INT 118
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: ST_TO_ADDR
9441: GO 9684
9443: LD_INT 19
9445: DOUBLE
9446: EQUAL
9447: IFTRUE 9451
9449: GO 9683
9451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9452: LD_ADDR_VAR 0 2
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: LD_INT 2
9462: PUSH
9463: LD_INT 3
9465: PUSH
9466: LD_INT 4
9468: PUSH
9469: LD_INT 5
9471: PUSH
9472: LD_INT 6
9474: PUSH
9475: LD_INT 7
9477: PUSH
9478: LD_INT 8
9480: PUSH
9481: LD_INT 9
9483: PUSH
9484: LD_INT 10
9486: PUSH
9487: LD_INT 11
9489: PUSH
9490: LD_INT 12
9492: PUSH
9493: LD_INT 13
9495: PUSH
9496: LD_INT 14
9498: PUSH
9499: LD_INT 15
9501: PUSH
9502: LD_INT 16
9504: PUSH
9505: LD_INT 17
9507: PUSH
9508: LD_INT 18
9510: PUSH
9511: LD_INT 19
9513: PUSH
9514: LD_INT 20
9516: PUSH
9517: LD_INT 21
9519: PUSH
9520: LD_INT 22
9522: PUSH
9523: LD_INT 23
9525: PUSH
9526: LD_INT 24
9528: PUSH
9529: LD_INT 25
9531: PUSH
9532: LD_INT 26
9534: PUSH
9535: LD_INT 27
9537: PUSH
9538: LD_INT 28
9540: PUSH
9541: LD_INT 29
9543: PUSH
9544: LD_INT 30
9546: PUSH
9547: LD_INT 31
9549: PUSH
9550: LD_INT 32
9552: PUSH
9553: LD_INT 33
9555: PUSH
9556: LD_INT 34
9558: PUSH
9559: LD_INT 35
9561: PUSH
9562: LD_INT 36
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 101
9605: PUSH
9606: LD_INT 102
9608: PUSH
9609: LD_INT 103
9611: PUSH
9612: LD_INT 104
9614: PUSH
9615: LD_INT 105
9617: PUSH
9618: LD_INT 106
9620: PUSH
9621: LD_INT 107
9623: PUSH
9624: LD_INT 108
9626: PUSH
9627: LD_INT 109
9629: PUSH
9630: LD_INT 110
9632: PUSH
9633: LD_INT 111
9635: PUSH
9636: LD_INT 112
9638: PUSH
9639: LD_INT 113
9641: PUSH
9642: LD_INT 114
9644: PUSH
9645: LD_INT 115
9647: PUSH
9648: LD_INT 116
9650: PUSH
9651: LD_INT 117
9653: PUSH
9654: LD_INT 118
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: ST_TO_ADDR
9681: GO 9684
9683: POP
// end else
9684: GO 9915
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9686: LD_ADDR_VAR 0 2
9690: PUSH
9691: LD_INT 1
9693: PUSH
9694: LD_INT 2
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: LD_INT 4
9702: PUSH
9703: LD_INT 5
9705: PUSH
9706: LD_INT 6
9708: PUSH
9709: LD_INT 7
9711: PUSH
9712: LD_INT 8
9714: PUSH
9715: LD_INT 9
9717: PUSH
9718: LD_INT 10
9720: PUSH
9721: LD_INT 11
9723: PUSH
9724: LD_INT 12
9726: PUSH
9727: LD_INT 13
9729: PUSH
9730: LD_INT 14
9732: PUSH
9733: LD_INT 15
9735: PUSH
9736: LD_INT 16
9738: PUSH
9739: LD_INT 17
9741: PUSH
9742: LD_INT 18
9744: PUSH
9745: LD_INT 19
9747: PUSH
9748: LD_INT 20
9750: PUSH
9751: LD_INT 21
9753: PUSH
9754: LD_INT 22
9756: PUSH
9757: LD_INT 23
9759: PUSH
9760: LD_INT 24
9762: PUSH
9763: LD_INT 25
9765: PUSH
9766: LD_INT 26
9768: PUSH
9769: LD_INT 27
9771: PUSH
9772: LD_INT 28
9774: PUSH
9775: LD_INT 29
9777: PUSH
9778: LD_INT 30
9780: PUSH
9781: LD_INT 31
9783: PUSH
9784: LD_INT 32
9786: PUSH
9787: LD_INT 33
9789: PUSH
9790: LD_INT 34
9792: PUSH
9793: LD_INT 35
9795: PUSH
9796: LD_INT 36
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 101
9839: PUSH
9840: LD_INT 102
9842: PUSH
9843: LD_INT 103
9845: PUSH
9846: LD_INT 104
9848: PUSH
9849: LD_INT 105
9851: PUSH
9852: LD_INT 106
9854: PUSH
9855: LD_INT 107
9857: PUSH
9858: LD_INT 108
9860: PUSH
9861: LD_INT 109
9863: PUSH
9864: LD_INT 110
9866: PUSH
9867: LD_INT 111
9869: PUSH
9870: LD_INT 112
9872: PUSH
9873: LD_INT 113
9875: PUSH
9876: LD_INT 114
9878: PUSH
9879: LD_INT 115
9881: PUSH
9882: LD_INT 116
9884: PUSH
9885: LD_INT 117
9887: PUSH
9888: LD_INT 118
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: ST_TO_ADDR
// if result then
9915: LD_VAR 0 2
9919: IFFALSE 10705
// begin normal :=  ;
9921: LD_ADDR_VAR 0 5
9925: PUSH
9926: LD_STRING 
9928: ST_TO_ADDR
// hardcore :=  ;
9929: LD_ADDR_VAR 0 6
9933: PUSH
9934: LD_STRING 
9936: ST_TO_ADDR
// active :=  ;
9937: LD_ADDR_VAR 0 7
9941: PUSH
9942: LD_STRING 
9944: ST_TO_ADDR
// for i = 1 to normalCounter do
9945: LD_ADDR_VAR 0 8
9949: PUSH
9950: DOUBLE
9951: LD_INT 1
9953: DEC
9954: ST_TO_ADDR
9955: LD_EXP 32
9959: PUSH
9960: FOR_TO
9961: IFFALSE 10062
// begin tmp := 0 ;
9963: LD_ADDR_VAR 0 3
9967: PUSH
9968: LD_STRING 0
9970: ST_TO_ADDR
// if result [ 1 ] then
9971: LD_VAR 0 2
9975: PUSH
9976: LD_INT 1
9978: ARRAY
9979: IFFALSE 10044
// if result [ 1 ] [ 1 ] = i then
9981: LD_VAR 0 2
9985: PUSH
9986: LD_INT 1
9988: ARRAY
9989: PUSH
9990: LD_INT 1
9992: ARRAY
9993: PUSH
9994: LD_VAR 0 8
9998: EQUAL
9999: IFFALSE 10044
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10001: LD_ADDR_VAR 0 2
10005: PUSH
10006: LD_VAR 0 2
10010: PPUSH
10011: LD_INT 1
10013: PPUSH
10014: LD_VAR 0 2
10018: PUSH
10019: LD_INT 1
10021: ARRAY
10022: PPUSH
10023: LD_INT 1
10025: PPUSH
10026: CALL_OW 3
10030: PPUSH
10031: CALL_OW 1
10035: ST_TO_ADDR
// tmp := 1 ;
10036: LD_ADDR_VAR 0 3
10040: PUSH
10041: LD_STRING 1
10043: ST_TO_ADDR
// end ; normal := normal & tmp ;
10044: LD_ADDR_VAR 0 5
10048: PUSH
10049: LD_VAR 0 5
10053: PUSH
10054: LD_VAR 0 3
10058: STR
10059: ST_TO_ADDR
// end ;
10060: GO 9960
10062: POP
10063: POP
// for i = 1 to hardcoreCounter do
10064: LD_ADDR_VAR 0 8
10068: PUSH
10069: DOUBLE
10070: LD_INT 1
10072: DEC
10073: ST_TO_ADDR
10074: LD_EXP 33
10078: PUSH
10079: FOR_TO
10080: IFFALSE 10185
// begin tmp := 0 ;
10082: LD_ADDR_VAR 0 3
10086: PUSH
10087: LD_STRING 0
10089: ST_TO_ADDR
// if result [ 2 ] then
10090: LD_VAR 0 2
10094: PUSH
10095: LD_INT 2
10097: ARRAY
10098: IFFALSE 10167
// if result [ 2 ] [ 1 ] = 100 + i then
10100: LD_VAR 0 2
10104: PUSH
10105: LD_INT 2
10107: ARRAY
10108: PUSH
10109: LD_INT 1
10111: ARRAY
10112: PUSH
10113: LD_INT 100
10115: PUSH
10116: LD_VAR 0 8
10120: PLUS
10121: EQUAL
10122: IFFALSE 10167
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10124: LD_ADDR_VAR 0 2
10128: PUSH
10129: LD_VAR 0 2
10133: PPUSH
10134: LD_INT 2
10136: PPUSH
10137: LD_VAR 0 2
10141: PUSH
10142: LD_INT 2
10144: ARRAY
10145: PPUSH
10146: LD_INT 1
10148: PPUSH
10149: CALL_OW 3
10153: PPUSH
10154: CALL_OW 1
10158: ST_TO_ADDR
// tmp := 1 ;
10159: LD_ADDR_VAR 0 3
10163: PUSH
10164: LD_STRING 1
10166: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10167: LD_ADDR_VAR 0 6
10171: PUSH
10172: LD_VAR 0 6
10176: PUSH
10177: LD_VAR 0 3
10181: STR
10182: ST_TO_ADDR
// end ;
10183: GO 10079
10185: POP
10186: POP
// if isGameLoad then
10187: LD_VAR 0 1
10191: IFFALSE 10666
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10193: LD_ADDR_VAR 0 4
10197: PUSH
10198: LD_EXP 36
10202: PUSH
10203: LD_EXP 35
10207: PUSH
10208: LD_EXP 37
10212: PUSH
10213: LD_EXP 34
10217: PUSH
10218: LD_EXP 38
10222: PUSH
10223: LD_EXP 39
10227: PUSH
10228: LD_EXP 40
10232: PUSH
10233: LD_EXP 41
10237: PUSH
10238: LD_EXP 42
10242: PUSH
10243: LD_EXP 43
10247: PUSH
10248: LD_EXP 44
10252: PUSH
10253: LD_EXP 45
10257: PUSH
10258: LD_EXP 46
10262: PUSH
10263: LD_EXP 47
10267: PUSH
10268: LD_EXP 55
10272: PUSH
10273: LD_EXP 56
10277: PUSH
10278: LD_EXP 57
10282: PUSH
10283: LD_EXP 58
10287: PUSH
10288: LD_EXP 60
10292: PUSH
10293: LD_EXP 61
10297: PUSH
10298: LD_EXP 62
10302: PUSH
10303: LD_EXP 65
10307: PUSH
10308: LD_EXP 67
10312: PUSH
10313: LD_EXP 68
10317: PUSH
10318: LD_EXP 69
10322: PUSH
10323: LD_EXP 71
10327: PUSH
10328: LD_EXP 72
10332: PUSH
10333: LD_EXP 75
10337: PUSH
10338: LD_EXP 76
10342: PUSH
10343: LD_EXP 77
10347: PUSH
10348: LD_EXP 78
10352: PUSH
10353: LD_EXP 79
10357: PUSH
10358: LD_EXP 80
10362: PUSH
10363: LD_EXP 81
10367: PUSH
10368: LD_EXP 82
10372: PUSH
10373: LD_EXP 83
10377: PUSH
10378: LD_EXP 48
10382: PUSH
10383: LD_EXP 49
10387: PUSH
10388: LD_EXP 52
10392: PUSH
10393: LD_EXP 53
10397: PUSH
10398: LD_EXP 54
10402: PUSH
10403: LD_EXP 50
10407: PUSH
10408: LD_EXP 51
10412: PUSH
10413: LD_EXP 59
10417: PUSH
10418: LD_EXP 63
10422: PUSH
10423: LD_EXP 64
10427: PUSH
10428: LD_EXP 66
10432: PUSH
10433: LD_EXP 70
10437: PUSH
10438: LD_EXP 73
10442: PUSH
10443: LD_EXP 74
10447: PUSH
10448: LD_EXP 84
10452: PUSH
10453: LD_EXP 85
10457: PUSH
10458: LD_EXP 86
10462: PUSH
10463: LD_EXP 87
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: ST_TO_ADDR
// tmp :=  ;
10524: LD_ADDR_VAR 0 3
10528: PUSH
10529: LD_STRING 
10531: ST_TO_ADDR
// for i = 1 to normalCounter do
10532: LD_ADDR_VAR 0 8
10536: PUSH
10537: DOUBLE
10538: LD_INT 1
10540: DEC
10541: ST_TO_ADDR
10542: LD_EXP 32
10546: PUSH
10547: FOR_TO
10548: IFFALSE 10584
// begin if flags [ i ] then
10550: LD_VAR 0 4
10554: PUSH
10555: LD_VAR 0 8
10559: ARRAY
10560: IFFALSE 10582
// tmp := tmp & i & ; ;
10562: LD_ADDR_VAR 0 3
10566: PUSH
10567: LD_VAR 0 3
10571: PUSH
10572: LD_VAR 0 8
10576: STR
10577: PUSH
10578: LD_STRING ;
10580: STR
10581: ST_TO_ADDR
// end ;
10582: GO 10547
10584: POP
10585: POP
// for i = 1 to hardcoreCounter do
10586: LD_ADDR_VAR 0 8
10590: PUSH
10591: DOUBLE
10592: LD_INT 1
10594: DEC
10595: ST_TO_ADDR
10596: LD_EXP 33
10600: PUSH
10601: FOR_TO
10602: IFFALSE 10648
// begin if flags [ normalCounter + i ] then
10604: LD_VAR 0 4
10608: PUSH
10609: LD_EXP 32
10613: PUSH
10614: LD_VAR 0 8
10618: PLUS
10619: ARRAY
10620: IFFALSE 10646
// tmp := tmp & ( 100 + i ) & ; ;
10622: LD_ADDR_VAR 0 3
10626: PUSH
10627: LD_VAR 0 3
10631: PUSH
10632: LD_INT 100
10634: PUSH
10635: LD_VAR 0 8
10639: PLUS
10640: STR
10641: PUSH
10642: LD_STRING ;
10644: STR
10645: ST_TO_ADDR
// end ;
10646: GO 10601
10648: POP
10649: POP
// if tmp then
10650: LD_VAR 0 3
10654: IFFALSE 10666
// active := tmp ;
10656: LD_ADDR_VAR 0 7
10660: PUSH
10661: LD_VAR 0 3
10665: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10666: LD_STRING getStreamItemsFromMission("
10668: PUSH
10669: LD_VAR 0 5
10673: STR
10674: PUSH
10675: LD_STRING ","
10677: STR
10678: PUSH
10679: LD_VAR 0 6
10683: STR
10684: PUSH
10685: LD_STRING ","
10687: STR
10688: PUSH
10689: LD_VAR 0 7
10693: STR
10694: PUSH
10695: LD_STRING ")
10697: STR
10698: PPUSH
10699: CALL_OW 559
// end else
10703: GO 10712
// ToLua ( getStreamItemsFromMission("","","") ) ;
10705: LD_STRING getStreamItemsFromMission("","","")
10707: PPUSH
10708: CALL_OW 559
// end ;
10712: LD_VAR 0 2
10716: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10717: LD_EXP 31
10721: PUSH
10722: LD_EXP 36
10726: AND
10727: IFFALSE 10851
10729: GO 10731
10731: DISABLE
10732: LD_INT 0
10734: PPUSH
10735: PPUSH
// begin enable ;
10736: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10737: LD_ADDR_VAR 0 2
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_OWVAR 2
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: LD_INT 34
10759: PUSH
10760: LD_INT 7
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 34
10769: PUSH
10770: LD_INT 45
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 34
10779: PUSH
10780: LD_INT 28
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 34
10789: PUSH
10790: LD_INT 47
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 69
10812: ST_TO_ADDR
// if not tmp then
10813: LD_VAR 0 2
10817: NOT
10818: IFFALSE 10822
// exit ;
10820: GO 10851
// for i in tmp do
10822: LD_ADDR_VAR 0 1
10826: PUSH
10827: LD_VAR 0 2
10831: PUSH
10832: FOR_IN
10833: IFFALSE 10849
// begin SetLives ( i , 0 ) ;
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 0
10842: PPUSH
10843: CALL_OW 234
// end ;
10847: GO 10832
10849: POP
10850: POP
// end ;
10851: PPOPN 2
10853: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10854: LD_EXP 31
10858: PUSH
10859: LD_EXP 37
10863: AND
10864: IFFALSE 10948
10866: GO 10868
10868: DISABLE
10869: LD_INT 0
10871: PPUSH
10872: PPUSH
// begin enable ;
10873: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10874: LD_ADDR_VAR 0 2
10878: PUSH
10879: LD_INT 22
10881: PUSH
10882: LD_OWVAR 2
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 32
10893: PUSH
10894: LD_INT 3
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PPUSH
10905: CALL_OW 69
10909: ST_TO_ADDR
// if not tmp then
10910: LD_VAR 0 2
10914: NOT
10915: IFFALSE 10919
// exit ;
10917: GO 10948
// for i in tmp do
10919: LD_ADDR_VAR 0 1
10923: PUSH
10924: LD_VAR 0 2
10928: PUSH
10929: FOR_IN
10930: IFFALSE 10946
// begin SetLives ( i , 0 ) ;
10932: LD_VAR 0 1
10936: PPUSH
10937: LD_INT 0
10939: PPUSH
10940: CALL_OW 234
// end ;
10944: GO 10929
10946: POP
10947: POP
// end ;
10948: PPOPN 2
10950: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10951: LD_EXP 31
10955: PUSH
10956: LD_EXP 34
10960: AND
10961: IFFALSE 11054
10963: GO 10965
10965: DISABLE
10966: LD_INT 0
10968: PPUSH
// begin enable ;
10969: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10970: LD_ADDR_VAR 0 1
10974: PUSH
10975: LD_INT 22
10977: PUSH
10978: LD_OWVAR 2
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 2
10989: PUSH
10990: LD_INT 25
10992: PUSH
10993: LD_INT 5
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 25
11002: PUSH
11003: LD_INT 9
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 25
11012: PUSH
11013: LD_INT 8
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PPUSH
11030: CALL_OW 69
11034: PUSH
11035: FOR_IN
11036: IFFALSE 11052
// begin SetClass ( i , 1 ) ;
11038: LD_VAR 0 1
11042: PPUSH
11043: LD_INT 1
11045: PPUSH
11046: CALL_OW 336
// end ;
11050: GO 11035
11052: POP
11053: POP
// end ;
11054: PPOPN 1
11056: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11057: LD_EXP 31
11061: PUSH
11062: LD_EXP 35
11066: AND
11067: PUSH
11068: LD_OWVAR 65
11072: PUSH
11073: LD_INT 7
11075: LESS
11076: AND
11077: IFFALSE 11091
11079: GO 11081
11081: DISABLE
// begin enable ;
11082: ENABLE
// game_speed := 7 ;
11083: LD_ADDR_OWVAR 65
11087: PUSH
11088: LD_INT 7
11090: ST_TO_ADDR
// end ;
11091: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11092: LD_EXP 31
11096: PUSH
11097: LD_EXP 38
11101: AND
11102: IFFALSE 11304
11104: GO 11106
11106: DISABLE
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
11111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11112: LD_ADDR_VAR 0 3
11116: PUSH
11117: LD_INT 81
11119: PUSH
11120: LD_OWVAR 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 21
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 69
11147: ST_TO_ADDR
// if not tmp then
11148: LD_VAR 0 3
11152: NOT
11153: IFFALSE 11157
// exit ;
11155: GO 11304
// if tmp > 5 then
11157: LD_VAR 0 3
11161: PUSH
11162: LD_INT 5
11164: GREATER
11165: IFFALSE 11177
// k := 5 else
11167: LD_ADDR_VAR 0 2
11171: PUSH
11172: LD_INT 5
11174: ST_TO_ADDR
11175: GO 11187
// k := tmp ;
11177: LD_ADDR_VAR 0 2
11181: PUSH
11182: LD_VAR 0 3
11186: ST_TO_ADDR
// for i := 1 to k do
11187: LD_ADDR_VAR 0 1
11191: PUSH
11192: DOUBLE
11193: LD_INT 1
11195: DEC
11196: ST_TO_ADDR
11197: LD_VAR 0 2
11201: PUSH
11202: FOR_TO
11203: IFFALSE 11302
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11205: LD_VAR 0 3
11209: PUSH
11210: LD_VAR 0 1
11214: ARRAY
11215: PPUSH
11216: LD_VAR 0 1
11220: PUSH
11221: LD_INT 4
11223: MOD
11224: PUSH
11225: LD_INT 1
11227: PLUS
11228: PPUSH
11229: CALL_OW 259
11233: PUSH
11234: LD_INT 10
11236: LESS
11237: IFFALSE 11300
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11239: LD_VAR 0 3
11243: PUSH
11244: LD_VAR 0 1
11248: ARRAY
11249: PPUSH
11250: LD_VAR 0 1
11254: PUSH
11255: LD_INT 4
11257: MOD
11258: PUSH
11259: LD_INT 1
11261: PLUS
11262: PPUSH
11263: LD_VAR 0 3
11267: PUSH
11268: LD_VAR 0 1
11272: ARRAY
11273: PPUSH
11274: LD_VAR 0 1
11278: PUSH
11279: LD_INT 4
11281: MOD
11282: PUSH
11283: LD_INT 1
11285: PLUS
11286: PPUSH
11287: CALL_OW 259
11291: PUSH
11292: LD_INT 1
11294: PLUS
11295: PPUSH
11296: CALL_OW 237
11300: GO 11202
11302: POP
11303: POP
// end ;
11304: PPOPN 3
11306: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11307: LD_EXP 31
11311: PUSH
11312: LD_EXP 39
11316: AND
11317: IFFALSE 11337
11319: GO 11321
11321: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11322: LD_INT 4
11324: PPUSH
11325: LD_OWVAR 2
11329: PPUSH
11330: LD_INT 0
11332: PPUSH
11333: CALL_OW 324
11337: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11338: LD_EXP 31
11342: PUSH
11343: LD_EXP 68
11347: AND
11348: IFFALSE 11368
11350: GO 11352
11352: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11353: LD_INT 19
11355: PPUSH
11356: LD_OWVAR 2
11360: PPUSH
11361: LD_INT 0
11363: PPUSH
11364: CALL_OW 324
11368: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11369: LD_EXP 31
11373: PUSH
11374: LD_EXP 40
11378: AND
11379: IFFALSE 11481
11381: GO 11383
11383: DISABLE
11384: LD_INT 0
11386: PPUSH
11387: PPUSH
// begin enable ;
11388: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11389: LD_ADDR_VAR 0 2
11393: PUSH
11394: LD_INT 22
11396: PUSH
11397: LD_OWVAR 2
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 2
11408: PUSH
11409: LD_INT 34
11411: PUSH
11412: LD_INT 11
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 34
11421: PUSH
11422: LD_INT 30
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: ST_TO_ADDR
// if not tmp then
11443: LD_VAR 0 2
11447: NOT
11448: IFFALSE 11452
// exit ;
11450: GO 11481
// for i in tmp do
11452: LD_ADDR_VAR 0 1
11456: PUSH
11457: LD_VAR 0 2
11461: PUSH
11462: FOR_IN
11463: IFFALSE 11479
// begin SetLives ( i , 0 ) ;
11465: LD_VAR 0 1
11469: PPUSH
11470: LD_INT 0
11472: PPUSH
11473: CALL_OW 234
// end ;
11477: GO 11462
11479: POP
11480: POP
// end ;
11481: PPOPN 2
11483: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11484: LD_EXP 31
11488: PUSH
11489: LD_EXP 41
11493: AND
11494: IFFALSE 11514
11496: GO 11498
11498: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11499: LD_INT 32
11501: PPUSH
11502: LD_OWVAR 2
11506: PPUSH
11507: LD_INT 0
11509: PPUSH
11510: CALL_OW 324
11514: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11515: LD_EXP 31
11519: PUSH
11520: LD_EXP 42
11524: AND
11525: IFFALSE 11706
11527: GO 11529
11529: DISABLE
11530: LD_INT 0
11532: PPUSH
11533: PPUSH
11534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11535: LD_ADDR_VAR 0 2
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_OWVAR 2
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 33
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: ST_TO_ADDR
// if not tmp then
11571: LD_VAR 0 2
11575: NOT
11576: IFFALSE 11580
// exit ;
11578: GO 11706
// side := 0 ;
11580: LD_ADDR_VAR 0 3
11584: PUSH
11585: LD_INT 0
11587: ST_TO_ADDR
// for i := 1 to 8 do
11588: LD_ADDR_VAR 0 1
11592: PUSH
11593: DOUBLE
11594: LD_INT 1
11596: DEC
11597: ST_TO_ADDR
11598: LD_INT 8
11600: PUSH
11601: FOR_TO
11602: IFFALSE 11650
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11604: LD_OWVAR 2
11608: PUSH
11609: LD_VAR 0 1
11613: NONEQUAL
11614: PUSH
11615: LD_OWVAR 2
11619: PPUSH
11620: LD_VAR 0 1
11624: PPUSH
11625: CALL_OW 81
11629: PUSH
11630: LD_INT 2
11632: EQUAL
11633: AND
11634: IFFALSE 11648
// begin side := i ;
11636: LD_ADDR_VAR 0 3
11640: PUSH
11641: LD_VAR 0 1
11645: ST_TO_ADDR
// break ;
11646: GO 11650
// end ;
11648: GO 11601
11650: POP
11651: POP
// if not side then
11652: LD_VAR 0 3
11656: NOT
11657: IFFALSE 11661
// exit ;
11659: GO 11706
// for i := 1 to tmp do
11661: LD_ADDR_VAR 0 1
11665: PUSH
11666: DOUBLE
11667: LD_INT 1
11669: DEC
11670: ST_TO_ADDR
11671: LD_VAR 0 2
11675: PUSH
11676: FOR_TO
11677: IFFALSE 11704
// if Prob ( 60 ) then
11679: LD_INT 60
11681: PPUSH
11682: CALL_OW 13
11686: IFFALSE 11702
// SetSide ( i , side ) ;
11688: LD_VAR 0 1
11692: PPUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: CALL_OW 235
11702: GO 11676
11704: POP
11705: POP
// end ;
11706: PPOPN 3
11708: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11709: LD_EXP 31
11713: PUSH
11714: LD_EXP 44
11718: AND
11719: IFFALSE 11838
11721: GO 11723
11723: DISABLE
11724: LD_INT 0
11726: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11727: LD_ADDR_VAR 0 1
11731: PUSH
11732: LD_INT 22
11734: PUSH
11735: LD_OWVAR 2
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 21
11746: PUSH
11747: LD_INT 1
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 3
11756: PUSH
11757: LD_INT 23
11759: PUSH
11760: LD_INT 0
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: PPUSH
11776: CALL_OW 69
11780: PUSH
11781: FOR_IN
11782: IFFALSE 11836
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11784: LD_VAR 0 1
11788: PPUSH
11789: CALL_OW 257
11793: PUSH
11794: LD_INT 1
11796: PUSH
11797: LD_INT 2
11799: PUSH
11800: LD_INT 3
11802: PUSH
11803: LD_INT 4
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: IN
11812: IFFALSE 11834
// SetClass ( un , rand ( 1 , 4 ) ) ;
11814: LD_VAR 0 1
11818: PPUSH
11819: LD_INT 1
11821: PPUSH
11822: LD_INT 4
11824: PPUSH
11825: CALL_OW 12
11829: PPUSH
11830: CALL_OW 336
11834: GO 11781
11836: POP
11837: POP
// end ;
11838: PPOPN 1
11840: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11841: LD_EXP 31
11845: PUSH
11846: LD_EXP 43
11850: AND
11851: IFFALSE 11930
11853: GO 11855
11855: DISABLE
11856: LD_INT 0
11858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11859: LD_ADDR_VAR 0 1
11863: PUSH
11864: LD_INT 22
11866: PUSH
11867: LD_OWVAR 2
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 3
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: ST_TO_ADDR
// if not tmp then
11895: LD_VAR 0 1
11899: NOT
11900: IFFALSE 11904
// exit ;
11902: GO 11930
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11904: LD_VAR 0 1
11908: PUSH
11909: LD_INT 1
11911: PPUSH
11912: LD_VAR 0 1
11916: PPUSH
11917: CALL_OW 12
11921: ARRAY
11922: PPUSH
11923: LD_INT 100
11925: PPUSH
11926: CALL_OW 234
// end ;
11930: PPOPN 1
11932: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11933: LD_EXP 31
11937: PUSH
11938: LD_EXP 45
11942: AND
11943: IFFALSE 12041
11945: GO 11947
11947: DISABLE
11948: LD_INT 0
11950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11951: LD_ADDR_VAR 0 1
11955: PUSH
11956: LD_INT 22
11958: PUSH
11959: LD_OWVAR 2
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 21
11970: PUSH
11971: LD_INT 1
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 69
11986: ST_TO_ADDR
// if not tmp then
11987: LD_VAR 0 1
11991: NOT
11992: IFFALSE 11996
// exit ;
11994: GO 12041
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11996: LD_VAR 0 1
12000: PUSH
12001: LD_INT 1
12003: PPUSH
12004: LD_VAR 0 1
12008: PPUSH
12009: CALL_OW 12
12013: ARRAY
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: LD_INT 4
12020: PPUSH
12021: CALL_OW 12
12025: PPUSH
12026: LD_INT 3000
12028: PPUSH
12029: LD_INT 9000
12031: PPUSH
12032: CALL_OW 12
12036: PPUSH
12037: CALL_OW 492
// end ;
12041: PPOPN 1
12043: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12044: LD_EXP 31
12048: PUSH
12049: LD_EXP 46
12053: AND
12054: IFFALSE 12074
12056: GO 12058
12058: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12059: LD_INT 1
12061: PPUSH
12062: LD_OWVAR 2
12066: PPUSH
12067: LD_INT 0
12069: PPUSH
12070: CALL_OW 324
12074: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12075: LD_EXP 31
12079: PUSH
12080: LD_EXP 47
12084: AND
12085: IFFALSE 12168
12087: GO 12089
12089: DISABLE
12090: LD_INT 0
12092: PPUSH
12093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12094: LD_ADDR_VAR 0 2
12098: PUSH
12099: LD_INT 22
12101: PUSH
12102: LD_OWVAR 2
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 21
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PPUSH
12125: CALL_OW 69
12129: ST_TO_ADDR
// if not tmp then
12130: LD_VAR 0 2
12134: NOT
12135: IFFALSE 12139
// exit ;
12137: GO 12168
// for i in tmp do
12139: LD_ADDR_VAR 0 1
12143: PUSH
12144: LD_VAR 0 2
12148: PUSH
12149: FOR_IN
12150: IFFALSE 12166
// SetBLevel ( i , 10 ) ;
12152: LD_VAR 0 1
12156: PPUSH
12157: LD_INT 10
12159: PPUSH
12160: CALL_OW 241
12164: GO 12149
12166: POP
12167: POP
// end ;
12168: PPOPN 2
12170: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12171: LD_EXP 31
12175: PUSH
12176: LD_EXP 48
12180: AND
12181: IFFALSE 12292
12183: GO 12185
12185: DISABLE
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
12190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12191: LD_ADDR_VAR 0 3
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_OWVAR 2
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 25
12210: PUSH
12211: LD_INT 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PPUSH
12222: CALL_OW 69
12226: ST_TO_ADDR
// if not tmp then
12227: LD_VAR 0 3
12231: NOT
12232: IFFALSE 12236
// exit ;
12234: GO 12292
// un := tmp [ rand ( 1 , tmp ) ] ;
12236: LD_ADDR_VAR 0 2
12240: PUSH
12241: LD_VAR 0 3
12245: PUSH
12246: LD_INT 1
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: CALL_OW 12
12258: ARRAY
12259: ST_TO_ADDR
// if Crawls ( un ) then
12260: LD_VAR 0 2
12264: PPUSH
12265: CALL_OW 318
12269: IFFALSE 12280
// ComWalk ( un ) ;
12271: LD_VAR 0 2
12275: PPUSH
12276: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12280: LD_VAR 0 2
12284: PPUSH
12285: LD_INT 5
12287: PPUSH
12288: CALL_OW 336
// end ;
12292: PPOPN 3
12294: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12295: LD_EXP 31
12299: PUSH
12300: LD_EXP 49
12304: AND
12305: PUSH
12306: LD_OWVAR 67
12310: PUSH
12311: LD_INT 4
12313: LESS
12314: AND
12315: IFFALSE 12334
12317: GO 12319
12319: DISABLE
// begin Difficulty := Difficulty + 1 ;
12320: LD_ADDR_OWVAR 67
12324: PUSH
12325: LD_OWVAR 67
12329: PUSH
12330: LD_INT 1
12332: PLUS
12333: ST_TO_ADDR
// end ;
12334: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12335: LD_EXP 31
12339: PUSH
12340: LD_EXP 50
12344: AND
12345: IFFALSE 12448
12347: GO 12349
12349: DISABLE
12350: LD_INT 0
12352: PPUSH
// begin for i := 1 to 5 do
12353: LD_ADDR_VAR 0 1
12357: PUSH
12358: DOUBLE
12359: LD_INT 1
12361: DEC
12362: ST_TO_ADDR
12363: LD_INT 5
12365: PUSH
12366: FOR_TO
12367: IFFALSE 12446
// begin uc_nation := nation_nature ;
12369: LD_ADDR_OWVAR 21
12373: PUSH
12374: LD_INT 0
12376: ST_TO_ADDR
// uc_side := 0 ;
12377: LD_ADDR_OWVAR 20
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12385: LD_ADDR_OWVAR 29
12389: PUSH
12390: LD_INT 12
12392: PUSH
12393: LD_INT 12
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: ST_TO_ADDR
// hc_agressivity := 20 ;
12400: LD_ADDR_OWVAR 35
12404: PUSH
12405: LD_INT 20
12407: ST_TO_ADDR
// hc_class := class_tiger ;
12408: LD_ADDR_OWVAR 28
12412: PUSH
12413: LD_INT 14
12415: ST_TO_ADDR
// hc_gallery :=  ;
12416: LD_ADDR_OWVAR 33
12420: PUSH
12421: LD_STRING 
12423: ST_TO_ADDR
// hc_name :=  ;
12424: LD_ADDR_OWVAR 26
12428: PUSH
12429: LD_STRING 
12431: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12432: CALL_OW 44
12436: PPUSH
12437: LD_INT 0
12439: PPUSH
12440: CALL_OW 51
// end ;
12444: GO 12366
12446: POP
12447: POP
// end ;
12448: PPOPN 1
12450: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12451: LD_EXP 31
12455: PUSH
12456: LD_EXP 51
12460: AND
12461: IFFALSE 12470
12463: GO 12465
12465: DISABLE
// StreamSibBomb ;
12466: CALL 12471 0 0
12470: END
// export function StreamSibBomb ; var i , x , y ; begin
12471: LD_INT 0
12473: PPUSH
12474: PPUSH
12475: PPUSH
12476: PPUSH
// result := false ;
12477: LD_ADDR_VAR 0 1
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// for i := 1 to 16 do
12485: LD_ADDR_VAR 0 2
12489: PUSH
12490: DOUBLE
12491: LD_INT 1
12493: DEC
12494: ST_TO_ADDR
12495: LD_INT 16
12497: PUSH
12498: FOR_TO
12499: IFFALSE 12698
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12501: LD_ADDR_VAR 0 3
12505: PUSH
12506: LD_INT 10
12508: PUSH
12509: LD_INT 20
12511: PUSH
12512: LD_INT 30
12514: PUSH
12515: LD_INT 40
12517: PUSH
12518: LD_INT 50
12520: PUSH
12521: LD_INT 60
12523: PUSH
12524: LD_INT 70
12526: PUSH
12527: LD_INT 80
12529: PUSH
12530: LD_INT 90
12532: PUSH
12533: LD_INT 100
12535: PUSH
12536: LD_INT 110
12538: PUSH
12539: LD_INT 120
12541: PUSH
12542: LD_INT 130
12544: PUSH
12545: LD_INT 140
12547: PUSH
12548: LD_INT 150
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 1
12570: PPUSH
12571: LD_INT 15
12573: PPUSH
12574: CALL_OW 12
12578: ARRAY
12579: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12580: LD_ADDR_VAR 0 4
12584: PUSH
12585: LD_INT 10
12587: PUSH
12588: LD_INT 20
12590: PUSH
12591: LD_INT 30
12593: PUSH
12594: LD_INT 40
12596: PUSH
12597: LD_INT 50
12599: PUSH
12600: LD_INT 60
12602: PUSH
12603: LD_INT 70
12605: PUSH
12606: LD_INT 80
12608: PUSH
12609: LD_INT 90
12611: PUSH
12612: LD_INT 100
12614: PUSH
12615: LD_INT 110
12617: PUSH
12618: LD_INT 120
12620: PUSH
12621: LD_INT 130
12623: PUSH
12624: LD_INT 140
12626: PUSH
12627: LD_INT 150
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 1
12649: PPUSH
12650: LD_INT 15
12652: PPUSH
12653: CALL_OW 12
12657: ARRAY
12658: ST_TO_ADDR
// if ValidHex ( x , y ) then
12659: LD_VAR 0 3
12663: PPUSH
12664: LD_VAR 0 4
12668: PPUSH
12669: CALL_OW 488
12673: IFFALSE 12696
// begin result := [ x , y ] ;
12675: LD_ADDR_VAR 0 1
12679: PUSH
12680: LD_VAR 0 3
12684: PUSH
12685: LD_VAR 0 4
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: ST_TO_ADDR
// break ;
12694: GO 12698
// end ; end ;
12696: GO 12498
12698: POP
12699: POP
// if result then
12700: LD_VAR 0 1
12704: IFFALSE 12764
// begin ToLua ( playSibBomb() ) ;
12706: LD_STRING playSibBomb()
12708: PPUSH
12709: CALL_OW 559
// wait ( 0 0$14 ) ;
12713: LD_INT 490
12715: PPUSH
12716: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12720: LD_VAR 0 1
12724: PUSH
12725: LD_INT 1
12727: ARRAY
12728: PPUSH
12729: LD_VAR 0 1
12733: PUSH
12734: LD_INT 2
12736: ARRAY
12737: PPUSH
12738: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12742: LD_VAR 0 1
12746: PUSH
12747: LD_INT 1
12749: ARRAY
12750: PPUSH
12751: LD_VAR 0 1
12755: PUSH
12756: LD_INT 2
12758: ARRAY
12759: PPUSH
12760: CALL_OW 429
// end ; end ;
12764: LD_VAR 0 1
12768: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12769: LD_EXP 31
12773: PUSH
12774: LD_EXP 53
12778: AND
12779: IFFALSE 12791
12781: GO 12783
12783: DISABLE
// YouLost (  ) ;
12784: LD_STRING 
12786: PPUSH
12787: CALL_OW 104
12791: END
// every 0 0$1 trigger StreamModeActive and sFog do
12792: LD_EXP 31
12796: PUSH
12797: LD_EXP 52
12801: AND
12802: IFFALSE 12816
12804: GO 12806
12806: DISABLE
// FogOff ( your_side ) ;
12807: LD_OWVAR 2
12811: PPUSH
12812: CALL_OW 344
12816: END
// every 0 0$1 trigger StreamModeActive and sSun do
12817: LD_EXP 31
12821: PUSH
12822: LD_EXP 54
12826: AND
12827: IFFALSE 12855
12829: GO 12831
12831: DISABLE
// begin solar_recharge_percent := 0 ;
12832: LD_ADDR_OWVAR 79
12836: PUSH
12837: LD_INT 0
12839: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12840: LD_INT 10500
12842: PPUSH
12843: CALL_OW 67
// solar_recharge_percent := 100 ;
12847: LD_ADDR_OWVAR 79
12851: PUSH
12852: LD_INT 100
12854: ST_TO_ADDR
// end ;
12855: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12856: LD_EXP 31
12860: PUSH
12861: LD_EXP 55
12865: AND
12866: IFFALSE 13105
12868: GO 12870
12870: DISABLE
12871: LD_INT 0
12873: PPUSH
12874: PPUSH
12875: PPUSH
// begin tmp := [ ] ;
12876: LD_ADDR_VAR 0 3
12880: PUSH
12881: EMPTY
12882: ST_TO_ADDR
// for i := 1 to 6 do
12883: LD_ADDR_VAR 0 1
12887: PUSH
12888: DOUBLE
12889: LD_INT 1
12891: DEC
12892: ST_TO_ADDR
12893: LD_INT 6
12895: PUSH
12896: FOR_TO
12897: IFFALSE 13002
// begin uc_nation := nation_nature ;
12899: LD_ADDR_OWVAR 21
12903: PUSH
12904: LD_INT 0
12906: ST_TO_ADDR
// uc_side := 0 ;
12907: LD_ADDR_OWVAR 20
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12915: LD_ADDR_OWVAR 29
12919: PUSH
12920: LD_INT 12
12922: PUSH
12923: LD_INT 12
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: ST_TO_ADDR
// hc_agressivity := 20 ;
12930: LD_ADDR_OWVAR 35
12934: PUSH
12935: LD_INT 20
12937: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12938: LD_ADDR_OWVAR 28
12942: PUSH
12943: LD_INT 17
12945: ST_TO_ADDR
// hc_gallery :=  ;
12946: LD_ADDR_OWVAR 33
12950: PUSH
12951: LD_STRING 
12953: ST_TO_ADDR
// hc_name :=  ;
12954: LD_ADDR_OWVAR 26
12958: PUSH
12959: LD_STRING 
12961: ST_TO_ADDR
// un := CreateHuman ;
12962: LD_ADDR_VAR 0 2
12966: PUSH
12967: CALL_OW 44
12971: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 51
// tmp := tmp ^ un ;
12984: LD_ADDR_VAR 0 3
12988: PUSH
12989: LD_VAR 0 3
12993: PUSH
12994: LD_VAR 0 2
12998: ADD
12999: ST_TO_ADDR
// end ;
13000: GO 12896
13002: POP
13003: POP
// repeat wait ( 0 0$1 ) ;
13004: LD_INT 35
13006: PPUSH
13007: CALL_OW 67
// for un in tmp do
13011: LD_ADDR_VAR 0 2
13015: PUSH
13016: LD_VAR 0 3
13020: PUSH
13021: FOR_IN
13022: IFFALSE 13096
// begin if IsDead ( un ) then
13024: LD_VAR 0 2
13028: PPUSH
13029: CALL_OW 301
13033: IFFALSE 13053
// begin tmp := tmp diff un ;
13035: LD_ADDR_VAR 0 3
13039: PUSH
13040: LD_VAR 0 3
13044: PUSH
13045: LD_VAR 0 2
13049: DIFF
13050: ST_TO_ADDR
// continue ;
13051: GO 13021
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13053: LD_VAR 0 2
13057: PPUSH
13058: LD_INT 3
13060: PUSH
13061: LD_INT 22
13063: PUSH
13064: LD_INT 0
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 69
13079: PPUSH
13080: LD_VAR 0 2
13084: PPUSH
13085: CALL_OW 74
13089: PPUSH
13090: CALL_OW 115
// end ;
13094: GO 13021
13096: POP
13097: POP
// until not tmp ;
13098: LD_VAR 0 3
13102: NOT
13103: IFFALSE 13004
// end ;
13105: PPOPN 3
13107: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13108: LD_EXP 31
13112: PUSH
13113: LD_EXP 56
13117: AND
13118: IFFALSE 13172
13120: GO 13122
13122: DISABLE
// begin ToLua ( displayTroll(); ) ;
13123: LD_STRING displayTroll();
13125: PPUSH
13126: CALL_OW 559
// wait ( 3 3$00 ) ;
13130: LD_INT 6300
13132: PPUSH
13133: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13137: LD_STRING hideTroll();
13139: PPUSH
13140: CALL_OW 559
// wait ( 1 1$00 ) ;
13144: LD_INT 2100
13146: PPUSH
13147: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13151: LD_STRING displayTroll();
13153: PPUSH
13154: CALL_OW 559
// wait ( 1 1$00 ) ;
13158: LD_INT 2100
13160: PPUSH
13161: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13165: LD_STRING hideTroll();
13167: PPUSH
13168: CALL_OW 559
// end ;
13172: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13173: LD_EXP 31
13177: PUSH
13178: LD_EXP 57
13182: AND
13183: IFFALSE 13246
13185: GO 13187
13187: DISABLE
13188: LD_INT 0
13190: PPUSH
// begin p := 0 ;
13191: LD_ADDR_VAR 0 1
13195: PUSH
13196: LD_INT 0
13198: ST_TO_ADDR
// repeat game_speed := 1 ;
13199: LD_ADDR_OWVAR 65
13203: PUSH
13204: LD_INT 1
13206: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13207: LD_INT 35
13209: PPUSH
13210: CALL_OW 67
// p := p + 1 ;
13214: LD_ADDR_VAR 0 1
13218: PUSH
13219: LD_VAR 0 1
13223: PUSH
13224: LD_INT 1
13226: PLUS
13227: ST_TO_ADDR
// until p >= 60 ;
13228: LD_VAR 0 1
13232: PUSH
13233: LD_INT 60
13235: GREATEREQUAL
13236: IFFALSE 13199
// game_speed := 4 ;
13238: LD_ADDR_OWVAR 65
13242: PUSH
13243: LD_INT 4
13245: ST_TO_ADDR
// end ;
13246: PPOPN 1
13248: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13249: LD_EXP 31
13253: PUSH
13254: LD_EXP 58
13258: AND
13259: IFFALSE 13405
13261: GO 13263
13263: DISABLE
13264: LD_INT 0
13266: PPUSH
13267: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13268: LD_ADDR_VAR 0 1
13272: PUSH
13273: LD_INT 22
13275: PUSH
13276: LD_OWVAR 2
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 2
13287: PUSH
13288: LD_INT 30
13290: PUSH
13291: LD_INT 0
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 30
13300: PUSH
13301: LD_INT 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PPUSH
13317: CALL_OW 69
13321: ST_TO_ADDR
// if not depot then
13322: LD_VAR 0 1
13326: NOT
13327: IFFALSE 13331
// exit ;
13329: GO 13405
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13331: LD_ADDR_VAR 0 2
13335: PUSH
13336: LD_VAR 0 1
13340: PUSH
13341: LD_INT 1
13343: PPUSH
13344: LD_VAR 0 1
13348: PPUSH
13349: CALL_OW 12
13353: ARRAY
13354: PPUSH
13355: CALL_OW 274
13359: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13360: LD_VAR 0 2
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: LD_INT 0
13370: PPUSH
13371: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13375: LD_VAR 0 2
13379: PPUSH
13380: LD_INT 2
13382: PPUSH
13383: LD_INT 0
13385: PPUSH
13386: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13390: LD_VAR 0 2
13394: PPUSH
13395: LD_INT 3
13397: PPUSH
13398: LD_INT 0
13400: PPUSH
13401: CALL_OW 277
// end ;
13405: PPOPN 2
13407: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13408: LD_EXP 31
13412: PUSH
13413: LD_EXP 59
13417: AND
13418: IFFALSE 13515
13420: GO 13422
13422: DISABLE
13423: LD_INT 0
13425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13426: LD_ADDR_VAR 0 1
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_OWVAR 2
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 21
13445: PUSH
13446: LD_INT 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 3
13455: PUSH
13456: LD_INT 23
13458: PUSH
13459: LD_INT 0
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: PPUSH
13475: CALL_OW 69
13479: ST_TO_ADDR
// if not tmp then
13480: LD_VAR 0 1
13484: NOT
13485: IFFALSE 13489
// exit ;
13487: GO 13515
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13489: LD_VAR 0 1
13493: PUSH
13494: LD_INT 1
13496: PPUSH
13497: LD_VAR 0 1
13501: PPUSH
13502: CALL_OW 12
13506: ARRAY
13507: PPUSH
13508: LD_INT 200
13510: PPUSH
13511: CALL_OW 234
// end ;
13515: PPOPN 1
13517: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13518: LD_EXP 31
13522: PUSH
13523: LD_EXP 60
13527: AND
13528: IFFALSE 13607
13530: GO 13532
13532: DISABLE
13533: LD_INT 0
13535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13536: LD_ADDR_VAR 0 1
13540: PUSH
13541: LD_INT 22
13543: PUSH
13544: LD_OWVAR 2
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 21
13555: PUSH
13556: LD_INT 2
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PPUSH
13567: CALL_OW 69
13571: ST_TO_ADDR
// if not tmp then
13572: LD_VAR 0 1
13576: NOT
13577: IFFALSE 13581
// exit ;
13579: GO 13607
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13581: LD_VAR 0 1
13585: PUSH
13586: LD_INT 1
13588: PPUSH
13589: LD_VAR 0 1
13593: PPUSH
13594: CALL_OW 12
13598: ARRAY
13599: PPUSH
13600: LD_INT 60
13602: PPUSH
13603: CALL_OW 234
// end ;
13607: PPOPN 1
13609: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13610: LD_EXP 31
13614: PUSH
13615: LD_EXP 61
13619: AND
13620: IFFALSE 13719
13622: GO 13624
13624: DISABLE
13625: LD_INT 0
13627: PPUSH
13628: PPUSH
// begin enable ;
13629: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13630: LD_ADDR_VAR 0 1
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_OWVAR 2
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 61
13649: PUSH
13650: EMPTY
13651: LIST
13652: PUSH
13653: LD_INT 33
13655: PUSH
13656: LD_INT 2
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: PPUSH
13668: CALL_OW 69
13672: ST_TO_ADDR
// if not tmp then
13673: LD_VAR 0 1
13677: NOT
13678: IFFALSE 13682
// exit ;
13680: GO 13719
// for i in tmp do
13682: LD_ADDR_VAR 0 2
13686: PUSH
13687: LD_VAR 0 1
13691: PUSH
13692: FOR_IN
13693: IFFALSE 13717
// if IsControledBy ( i ) then
13695: LD_VAR 0 2
13699: PPUSH
13700: CALL_OW 312
13704: IFFALSE 13715
// ComUnlink ( i ) ;
13706: LD_VAR 0 2
13710: PPUSH
13711: CALL_OW 136
13715: GO 13692
13717: POP
13718: POP
// end ;
13719: PPOPN 2
13721: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13722: LD_EXP 31
13726: PUSH
13727: LD_EXP 62
13731: AND
13732: IFFALSE 13872
13734: GO 13736
13736: DISABLE
13737: LD_INT 0
13739: PPUSH
13740: PPUSH
// begin ToLua ( displayPowell(); ) ;
13741: LD_STRING displayPowell();
13743: PPUSH
13744: CALL_OW 559
// uc_side := 0 ;
13748: LD_ADDR_OWVAR 20
13752: PUSH
13753: LD_INT 0
13755: ST_TO_ADDR
// uc_nation := 2 ;
13756: LD_ADDR_OWVAR 21
13760: PUSH
13761: LD_INT 2
13763: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13764: LD_ADDR_OWVAR 37
13768: PUSH
13769: LD_INT 14
13771: ST_TO_ADDR
// vc_engine := engine_siberite ;
13772: LD_ADDR_OWVAR 39
13776: PUSH
13777: LD_INT 3
13779: ST_TO_ADDR
// vc_control := control_apeman ;
13780: LD_ADDR_OWVAR 38
13784: PUSH
13785: LD_INT 5
13787: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13788: LD_ADDR_OWVAR 40
13792: PUSH
13793: LD_INT 29
13795: ST_TO_ADDR
// un := CreateVehicle ;
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: CALL_OW 45
13805: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13818: LD_INT 35
13820: PPUSH
13821: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13825: LD_VAR 0 2
13829: PPUSH
13830: LD_INT 22
13832: PUSH
13833: LD_OWVAR 2
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: PPUSH
13847: LD_VAR 0 2
13851: PPUSH
13852: CALL_OW 74
13856: PPUSH
13857: CALL_OW 115
// until IsDead ( un ) ;
13861: LD_VAR 0 2
13865: PPUSH
13866: CALL_OW 301
13870: IFFALSE 13818
// end ;
13872: PPOPN 2
13874: END
// every 0 0$1 trigger StreamModeActive and sStu do
13875: LD_EXP 31
13879: PUSH
13880: LD_EXP 70
13884: AND
13885: IFFALSE 13901
13887: GO 13889
13889: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13890: LD_STRING displayStucuk();
13892: PPUSH
13893: CALL_OW 559
// ResetFog ;
13897: CALL_OW 335
// end ;
13901: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13902: LD_EXP 31
13906: PUSH
13907: LD_EXP 63
13911: AND
13912: IFFALSE 14053
13914: GO 13916
13916: DISABLE
13917: LD_INT 0
13919: PPUSH
13920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13921: LD_ADDR_VAR 0 2
13925: PUSH
13926: LD_INT 22
13928: PUSH
13929: LD_OWVAR 2
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 21
13940: PUSH
13941: LD_INT 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PPUSH
13952: CALL_OW 69
13956: ST_TO_ADDR
// if not tmp then
13957: LD_VAR 0 2
13961: NOT
13962: IFFALSE 13966
// exit ;
13964: GO 14053
// un := tmp [ rand ( 1 , tmp ) ] ;
13966: LD_ADDR_VAR 0 1
13970: PUSH
13971: LD_VAR 0 2
13975: PUSH
13976: LD_INT 1
13978: PPUSH
13979: LD_VAR 0 2
13983: PPUSH
13984: CALL_OW 12
13988: ARRAY
13989: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: LD_INT 0
13997: PPUSH
13998: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14002: LD_VAR 0 1
14006: PPUSH
14007: LD_OWVAR 3
14011: PUSH
14012: LD_VAR 0 1
14016: DIFF
14017: PPUSH
14018: LD_VAR 0 1
14022: PPUSH
14023: CALL_OW 74
14027: PPUSH
14028: CALL_OW 115
// wait ( 0 0$20 ) ;
14032: LD_INT 700
14034: PPUSH
14035: CALL_OW 67
// SetSide ( un , your_side ) ;
14039: LD_VAR 0 1
14043: PPUSH
14044: LD_OWVAR 2
14048: PPUSH
14049: CALL_OW 235
// end ;
14053: PPOPN 2
14055: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14056: LD_EXP 31
14060: PUSH
14061: LD_EXP 64
14065: AND
14066: IFFALSE 14172
14068: GO 14070
14070: DISABLE
14071: LD_INT 0
14073: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14074: LD_ADDR_VAR 0 1
14078: PUSH
14079: LD_INT 22
14081: PUSH
14082: LD_OWVAR 2
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 2
14093: PUSH
14094: LD_INT 30
14096: PUSH
14097: LD_INT 0
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 30
14106: PUSH
14107: LD_INT 1
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PPUSH
14123: CALL_OW 69
14127: ST_TO_ADDR
// if not depot then
14128: LD_VAR 0 1
14132: NOT
14133: IFFALSE 14137
// exit ;
14135: GO 14172
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14137: LD_VAR 0 1
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: CALL_OW 250
14150: PPUSH
14151: LD_VAR 0 1
14155: PUSH
14156: LD_INT 1
14158: ARRAY
14159: PPUSH
14160: CALL_OW 251
14164: PPUSH
14165: LD_INT 70
14167: PPUSH
14168: CALL_OW 495
// end ;
14172: PPOPN 1
14174: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14175: LD_EXP 31
14179: PUSH
14180: LD_EXP 65
14184: AND
14185: IFFALSE 14396
14187: GO 14189
14189: DISABLE
14190: LD_INT 0
14192: PPUSH
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14197: LD_ADDR_VAR 0 5
14201: PUSH
14202: LD_INT 22
14204: PUSH
14205: LD_OWVAR 2
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 69
14232: ST_TO_ADDR
// if not tmp then
14233: LD_VAR 0 5
14237: NOT
14238: IFFALSE 14242
// exit ;
14240: GO 14396
// for i in tmp do
14242: LD_ADDR_VAR 0 1
14246: PUSH
14247: LD_VAR 0 5
14251: PUSH
14252: FOR_IN
14253: IFFALSE 14394
// begin d := rand ( 0 , 5 ) ;
14255: LD_ADDR_VAR 0 4
14259: PUSH
14260: LD_INT 0
14262: PPUSH
14263: LD_INT 5
14265: PPUSH
14266: CALL_OW 12
14270: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14271: LD_ADDR_VAR 0 2
14275: PUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 250
14285: PPUSH
14286: LD_VAR 0 4
14290: PPUSH
14291: LD_INT 3
14293: PPUSH
14294: LD_INT 12
14296: PPUSH
14297: CALL_OW 12
14301: PPUSH
14302: CALL_OW 272
14306: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14307: LD_ADDR_VAR 0 3
14311: PUSH
14312: LD_VAR 0 1
14316: PPUSH
14317: CALL_OW 251
14321: PPUSH
14322: LD_VAR 0 4
14326: PPUSH
14327: LD_INT 3
14329: PPUSH
14330: LD_INT 12
14332: PPUSH
14333: CALL_OW 12
14337: PPUSH
14338: CALL_OW 273
14342: ST_TO_ADDR
// if ValidHex ( x , y ) then
14343: LD_VAR 0 2
14347: PPUSH
14348: LD_VAR 0 3
14352: PPUSH
14353: CALL_OW 488
14357: IFFALSE 14392
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14359: LD_VAR 0 1
14363: PPUSH
14364: LD_VAR 0 2
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: LD_INT 3
14376: PPUSH
14377: LD_INT 6
14379: PPUSH
14380: CALL_OW 12
14384: PPUSH
14385: LD_INT 1
14387: PPUSH
14388: CALL_OW 483
// end ;
14392: GO 14252
14394: POP
14395: POP
// end ;
14396: PPOPN 5
14398: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14399: LD_EXP 31
14403: PUSH
14404: LD_EXP 66
14408: AND
14409: IFFALSE 14503
14411: GO 14413
14413: DISABLE
14414: LD_INT 0
14416: PPUSH
14417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14418: LD_ADDR_VAR 0 2
14422: PUSH
14423: LD_INT 22
14425: PUSH
14426: LD_OWVAR 2
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 32
14437: PUSH
14438: LD_INT 1
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 21
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 69
14464: ST_TO_ADDR
// if not tmp then
14465: LD_VAR 0 2
14469: NOT
14470: IFFALSE 14474
// exit ;
14472: GO 14503
// for i in tmp do
14474: LD_ADDR_VAR 0 1
14478: PUSH
14479: LD_VAR 0 2
14483: PUSH
14484: FOR_IN
14485: IFFALSE 14501
// SetFuel ( i , 0 ) ;
14487: LD_VAR 0 1
14491: PPUSH
14492: LD_INT 0
14494: PPUSH
14495: CALL_OW 240
14499: GO 14484
14501: POP
14502: POP
// end ;
14503: PPOPN 2
14505: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14506: LD_EXP 31
14510: PUSH
14511: LD_EXP 67
14515: AND
14516: IFFALSE 14582
14518: GO 14520
14520: DISABLE
14521: LD_INT 0
14523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14524: LD_ADDR_VAR 0 1
14528: PUSH
14529: LD_INT 22
14531: PUSH
14532: LD_OWVAR 2
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 30
14543: PUSH
14544: LD_INT 29
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PPUSH
14555: CALL_OW 69
14559: ST_TO_ADDR
// if not tmp then
14560: LD_VAR 0 1
14564: NOT
14565: IFFALSE 14569
// exit ;
14567: GO 14582
// DestroyUnit ( tmp [ 1 ] ) ;
14569: LD_VAR 0 1
14573: PUSH
14574: LD_INT 1
14576: ARRAY
14577: PPUSH
14578: CALL_OW 65
// end ;
14582: PPOPN 1
14584: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14585: LD_EXP 31
14589: PUSH
14590: LD_EXP 69
14594: AND
14595: IFFALSE 14724
14597: GO 14599
14599: DISABLE
14600: LD_INT 0
14602: PPUSH
// begin uc_side := 0 ;
14603: LD_ADDR_OWVAR 20
14607: PUSH
14608: LD_INT 0
14610: ST_TO_ADDR
// uc_nation := nation_arabian ;
14611: LD_ADDR_OWVAR 21
14615: PUSH
14616: LD_INT 2
14618: ST_TO_ADDR
// hc_gallery :=  ;
14619: LD_ADDR_OWVAR 33
14623: PUSH
14624: LD_STRING 
14626: ST_TO_ADDR
// hc_name :=  ;
14627: LD_ADDR_OWVAR 26
14631: PUSH
14632: LD_STRING 
14634: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14635: LD_INT 1
14637: PPUSH
14638: LD_INT 11
14640: PPUSH
14641: LD_INT 10
14643: PPUSH
14644: CALL_OW 380
// un := CreateHuman ;
14648: LD_ADDR_VAR 0 1
14652: PUSH
14653: CALL_OW 44
14657: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14658: LD_VAR 0 1
14662: PPUSH
14663: LD_INT 1
14665: PPUSH
14666: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14670: LD_INT 35
14672: PPUSH
14673: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14677: LD_VAR 0 1
14681: PPUSH
14682: LD_INT 22
14684: PUSH
14685: LD_OWVAR 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: PPUSH
14699: LD_VAR 0 1
14703: PPUSH
14704: CALL_OW 74
14708: PPUSH
14709: CALL_OW 115
// until IsDead ( un ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: CALL_OW 301
14722: IFFALSE 14670
// end ;
14724: PPOPN 1
14726: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14727: LD_EXP 31
14731: PUSH
14732: LD_EXP 71
14736: AND
14737: IFFALSE 14749
14739: GO 14741
14741: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14742: LD_STRING earthquake(getX(game), 0, 32)
14744: PPUSH
14745: CALL_OW 559
14749: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14750: LD_EXP 31
14754: PUSH
14755: LD_EXP 72
14759: AND
14760: IFFALSE 14851
14762: GO 14764
14764: DISABLE
14765: LD_INT 0
14767: PPUSH
// begin enable ;
14768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14769: LD_ADDR_VAR 0 1
14773: PUSH
14774: LD_INT 22
14776: PUSH
14777: LD_OWVAR 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 21
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 33
14798: PUSH
14799: LD_INT 3
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: ST_TO_ADDR
// if not tmp then
14816: LD_VAR 0 1
14820: NOT
14821: IFFALSE 14825
// exit ;
14823: GO 14851
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14825: LD_VAR 0 1
14829: PUSH
14830: LD_INT 1
14832: PPUSH
14833: LD_VAR 0 1
14837: PPUSH
14838: CALL_OW 12
14842: ARRAY
14843: PPUSH
14844: LD_INT 1
14846: PPUSH
14847: CALL_OW 234
// end ;
14851: PPOPN 1
14853: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14854: LD_EXP 31
14858: PUSH
14859: LD_EXP 73
14863: AND
14864: IFFALSE 15005
14866: GO 14868
14868: DISABLE
14869: LD_INT 0
14871: PPUSH
14872: PPUSH
14873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14874: LD_ADDR_VAR 0 3
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_OWVAR 2
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 25
14893: PUSH
14894: LD_INT 1
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 69
14909: ST_TO_ADDR
// if not tmp then
14910: LD_VAR 0 3
14914: NOT
14915: IFFALSE 14919
// exit ;
14917: GO 15005
// un := tmp [ rand ( 1 , tmp ) ] ;
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: LD_VAR 0 3
14928: PUSH
14929: LD_INT 1
14931: PPUSH
14932: LD_VAR 0 3
14936: PPUSH
14937: CALL_OW 12
14941: ARRAY
14942: ST_TO_ADDR
// if Crawls ( un ) then
14943: LD_VAR 0 2
14947: PPUSH
14948: CALL_OW 318
14952: IFFALSE 14963
// ComWalk ( un ) ;
14954: LD_VAR 0 2
14958: PPUSH
14959: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14963: LD_VAR 0 2
14967: PPUSH
14968: LD_INT 9
14970: PPUSH
14971: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14975: LD_INT 28
14977: PPUSH
14978: LD_OWVAR 2
14982: PPUSH
14983: LD_INT 2
14985: PPUSH
14986: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14990: LD_INT 29
14992: PPUSH
14993: LD_OWVAR 2
14997: PPUSH
14998: LD_INT 2
15000: PPUSH
15001: CALL_OW 322
// end ;
15005: PPOPN 3
15007: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15008: LD_EXP 31
15012: PUSH
15013: LD_EXP 74
15017: AND
15018: IFFALSE 15129
15020: GO 15022
15022: DISABLE
15023: LD_INT 0
15025: PPUSH
15026: PPUSH
15027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_INT 22
15035: PUSH
15036: LD_OWVAR 2
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 25
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: ST_TO_ADDR
// if not tmp then
15064: LD_VAR 0 3
15068: NOT
15069: IFFALSE 15073
// exit ;
15071: GO 15129
// un := tmp [ rand ( 1 , tmp ) ] ;
15073: LD_ADDR_VAR 0 2
15077: PUSH
15078: LD_VAR 0 3
15082: PUSH
15083: LD_INT 1
15085: PPUSH
15086: LD_VAR 0 3
15090: PPUSH
15091: CALL_OW 12
15095: ARRAY
15096: ST_TO_ADDR
// if Crawls ( un ) then
15097: LD_VAR 0 2
15101: PPUSH
15102: CALL_OW 318
15106: IFFALSE 15117
// ComWalk ( un ) ;
15108: LD_VAR 0 2
15112: PPUSH
15113: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15117: LD_VAR 0 2
15121: PPUSH
15122: LD_INT 8
15124: PPUSH
15125: CALL_OW 336
// end ;
15129: PPOPN 3
15131: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15132: LD_EXP 31
15136: PUSH
15137: LD_EXP 75
15141: AND
15142: IFFALSE 15286
15144: GO 15146
15146: DISABLE
15147: LD_INT 0
15149: PPUSH
15150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15151: LD_ADDR_VAR 0 2
15155: PUSH
15156: LD_INT 22
15158: PUSH
15159: LD_OWVAR 2
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: LD_INT 21
15170: PUSH
15171: LD_INT 2
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 2
15180: PUSH
15181: LD_INT 34
15183: PUSH
15184: LD_INT 12
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 34
15193: PUSH
15194: LD_INT 51
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 34
15203: PUSH
15204: LD_INT 32
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: PPUSH
15222: CALL_OW 69
15226: ST_TO_ADDR
// if not tmp then
15227: LD_VAR 0 2
15231: NOT
15232: IFFALSE 15236
// exit ;
15234: GO 15286
// for i in tmp do
15236: LD_ADDR_VAR 0 1
15240: PUSH
15241: LD_VAR 0 2
15245: PUSH
15246: FOR_IN
15247: IFFALSE 15284
// if GetCargo ( i , mat_artifact ) = 0 then
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_INT 4
15256: PPUSH
15257: CALL_OW 289
15261: PUSH
15262: LD_INT 0
15264: EQUAL
15265: IFFALSE 15282
// SetCargo ( i , mat_siberit , 100 ) ;
15267: LD_VAR 0 1
15271: PPUSH
15272: LD_INT 3
15274: PPUSH
15275: LD_INT 100
15277: PPUSH
15278: CALL_OW 290
15282: GO 15246
15284: POP
15285: POP
// end ;
15286: PPOPN 2
15288: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15289: LD_EXP 31
15293: PUSH
15294: LD_EXP 76
15298: AND
15299: IFFALSE 15482
15301: GO 15303
15303: DISABLE
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15308: LD_ADDR_VAR 0 2
15312: PUSH
15313: LD_INT 22
15315: PUSH
15316: LD_OWVAR 2
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PPUSH
15325: CALL_OW 69
15329: ST_TO_ADDR
// if not tmp then
15330: LD_VAR 0 2
15334: NOT
15335: IFFALSE 15339
// exit ;
15337: GO 15482
// for i := 1 to 2 do
15339: LD_ADDR_VAR 0 1
15343: PUSH
15344: DOUBLE
15345: LD_INT 1
15347: DEC
15348: ST_TO_ADDR
15349: LD_INT 2
15351: PUSH
15352: FOR_TO
15353: IFFALSE 15480
// begin uc_side := your_side ;
15355: LD_ADDR_OWVAR 20
15359: PUSH
15360: LD_OWVAR 2
15364: ST_TO_ADDR
// uc_nation := nation_american ;
15365: LD_ADDR_OWVAR 21
15369: PUSH
15370: LD_INT 1
15372: ST_TO_ADDR
// vc_chassis := us_morphling ;
15373: LD_ADDR_OWVAR 37
15377: PUSH
15378: LD_INT 5
15380: ST_TO_ADDR
// vc_engine := engine_siberite ;
15381: LD_ADDR_OWVAR 39
15385: PUSH
15386: LD_INT 3
15388: ST_TO_ADDR
// vc_control := control_computer ;
15389: LD_ADDR_OWVAR 38
15393: PUSH
15394: LD_INT 3
15396: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15397: LD_ADDR_OWVAR 40
15401: PUSH
15402: LD_INT 10
15404: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15405: LD_VAR 0 2
15409: PUSH
15410: LD_INT 1
15412: ARRAY
15413: PPUSH
15414: CALL_OW 310
15418: NOT
15419: IFFALSE 15466
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15421: CALL_OW 45
15425: PPUSH
15426: LD_VAR 0 2
15430: PUSH
15431: LD_INT 1
15433: ARRAY
15434: PPUSH
15435: CALL_OW 250
15439: PPUSH
15440: LD_VAR 0 2
15444: PUSH
15445: LD_INT 1
15447: ARRAY
15448: PPUSH
15449: CALL_OW 251
15453: PPUSH
15454: LD_INT 12
15456: PPUSH
15457: LD_INT 1
15459: PPUSH
15460: CALL_OW 50
15464: GO 15478
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15466: CALL_OW 45
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: CALL_OW 51
// end ;
15478: GO 15352
15480: POP
15481: POP
// end ;
15482: PPOPN 2
15484: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15485: LD_EXP 31
15489: PUSH
15490: LD_EXP 77
15494: AND
15495: IFFALSE 15717
15497: GO 15499
15499: DISABLE
15500: LD_INT 0
15502: PPUSH
15503: PPUSH
15504: PPUSH
15505: PPUSH
15506: PPUSH
15507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15508: LD_ADDR_VAR 0 6
15512: PUSH
15513: LD_INT 22
15515: PUSH
15516: LD_OWVAR 2
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: LD_INT 21
15527: PUSH
15528: LD_INT 1
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 3
15537: PUSH
15538: LD_INT 23
15540: PUSH
15541: LD_INT 0
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: PPUSH
15557: CALL_OW 69
15561: ST_TO_ADDR
// if not tmp then
15562: LD_VAR 0 6
15566: NOT
15567: IFFALSE 15571
// exit ;
15569: GO 15717
// s1 := rand ( 1 , 4 ) ;
15571: LD_ADDR_VAR 0 2
15575: PUSH
15576: LD_INT 1
15578: PPUSH
15579: LD_INT 4
15581: PPUSH
15582: CALL_OW 12
15586: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15587: LD_ADDR_VAR 0 4
15591: PUSH
15592: LD_VAR 0 6
15596: PUSH
15597: LD_INT 1
15599: ARRAY
15600: PPUSH
15601: LD_VAR 0 2
15605: PPUSH
15606: CALL_OW 259
15610: ST_TO_ADDR
// if s1 = 1 then
15611: LD_VAR 0 2
15615: PUSH
15616: LD_INT 1
15618: EQUAL
15619: IFFALSE 15639
// s2 := rand ( 2 , 4 ) else
15621: LD_ADDR_VAR 0 3
15625: PUSH
15626: LD_INT 2
15628: PPUSH
15629: LD_INT 4
15631: PPUSH
15632: CALL_OW 12
15636: ST_TO_ADDR
15637: GO 15647
// s2 := 1 ;
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_INT 1
15646: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15647: LD_ADDR_VAR 0 5
15651: PUSH
15652: LD_VAR 0 6
15656: PUSH
15657: LD_INT 1
15659: ARRAY
15660: PPUSH
15661: LD_VAR 0 3
15665: PPUSH
15666: CALL_OW 259
15670: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15671: LD_VAR 0 6
15675: PUSH
15676: LD_INT 1
15678: ARRAY
15679: PPUSH
15680: LD_VAR 0 2
15684: PPUSH
15685: LD_VAR 0 5
15689: PPUSH
15690: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15694: LD_VAR 0 6
15698: PUSH
15699: LD_INT 1
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 3
15707: PPUSH
15708: LD_VAR 0 4
15712: PPUSH
15713: CALL_OW 237
// end ;
15717: PPOPN 6
15719: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15720: LD_EXP 31
15724: PUSH
15725: LD_EXP 78
15729: AND
15730: IFFALSE 15809
15732: GO 15734
15734: DISABLE
15735: LD_INT 0
15737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15738: LD_ADDR_VAR 0 1
15742: PUSH
15743: LD_INT 22
15745: PUSH
15746: LD_OWVAR 2
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 30
15757: PUSH
15758: LD_INT 3
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PPUSH
15769: CALL_OW 69
15773: ST_TO_ADDR
// if not tmp then
15774: LD_VAR 0 1
15778: NOT
15779: IFFALSE 15783
// exit ;
15781: GO 15809
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15783: LD_VAR 0 1
15787: PUSH
15788: LD_INT 1
15790: PPUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 12
15800: ARRAY
15801: PPUSH
15802: LD_INT 1
15804: PPUSH
15805: CALL_OW 234
// end ;
15809: PPOPN 1
15811: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15812: LD_EXP 31
15816: PUSH
15817: LD_EXP 79
15821: AND
15822: IFFALSE 15934
15824: GO 15826
15826: DISABLE
15827: LD_INT 0
15829: PPUSH
15830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15831: LD_ADDR_VAR 0 2
15835: PUSH
15836: LD_INT 22
15838: PUSH
15839: LD_OWVAR 2
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 2
15850: PUSH
15851: LD_INT 30
15853: PUSH
15854: LD_INT 27
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 30
15863: PUSH
15864: LD_INT 26
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 30
15873: PUSH
15874: LD_INT 28
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PPUSH
15891: CALL_OW 69
15895: ST_TO_ADDR
// if not tmp then
15896: LD_VAR 0 2
15900: NOT
15901: IFFALSE 15905
// exit ;
15903: GO 15934
// for i in tmp do
15905: LD_ADDR_VAR 0 1
15909: PUSH
15910: LD_VAR 0 2
15914: PUSH
15915: FOR_IN
15916: IFFALSE 15932
// SetLives ( i , 1 ) ;
15918: LD_VAR 0 1
15922: PPUSH
15923: LD_INT 1
15925: PPUSH
15926: CALL_OW 234
15930: GO 15915
15932: POP
15933: POP
// end ;
15934: PPOPN 2
15936: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15937: LD_EXP 31
15941: PUSH
15942: LD_EXP 80
15946: AND
15947: IFFALSE 16234
15949: GO 15951
15951: DISABLE
15952: LD_INT 0
15954: PPUSH
15955: PPUSH
15956: PPUSH
// begin i := rand ( 1 , 7 ) ;
15957: LD_ADDR_VAR 0 1
15961: PUSH
15962: LD_INT 1
15964: PPUSH
15965: LD_INT 7
15967: PPUSH
15968: CALL_OW 12
15972: ST_TO_ADDR
// case i of 1 :
15973: LD_VAR 0 1
15977: PUSH
15978: LD_INT 1
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 15996
15986: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15987: LD_STRING earthquake(getX(game), 0, 32)
15989: PPUSH
15990: CALL_OW 559
15994: GO 16234
15996: LD_INT 2
15998: DOUBLE
15999: EQUAL
16000: IFTRUE 16004
16002: GO 16018
16004: POP
// begin ToLua ( displayStucuk(); ) ;
16005: LD_STRING displayStucuk();
16007: PPUSH
16008: CALL_OW 559
// ResetFog ;
16012: CALL_OW 335
// end ; 3 :
16016: GO 16234
16018: LD_INT 3
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16026
16024: GO 16130
16026: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16027: LD_ADDR_VAR 0 2
16031: PUSH
16032: LD_INT 22
16034: PUSH
16035: LD_OWVAR 2
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 25
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PPUSH
16058: CALL_OW 69
16062: ST_TO_ADDR
// if not tmp then
16063: LD_VAR 0 2
16067: NOT
16068: IFFALSE 16072
// exit ;
16070: GO 16234
// un := tmp [ rand ( 1 , tmp ) ] ;
16072: LD_ADDR_VAR 0 3
16076: PUSH
16077: LD_VAR 0 2
16081: PUSH
16082: LD_INT 1
16084: PPUSH
16085: LD_VAR 0 2
16089: PPUSH
16090: CALL_OW 12
16094: ARRAY
16095: ST_TO_ADDR
// if Crawls ( un ) then
16096: LD_VAR 0 3
16100: PPUSH
16101: CALL_OW 318
16105: IFFALSE 16116
// ComWalk ( un ) ;
16107: LD_VAR 0 3
16111: PPUSH
16112: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16116: LD_VAR 0 3
16120: PPUSH
16121: LD_INT 8
16123: PPUSH
16124: CALL_OW 336
// end ; 4 :
16128: GO 16234
16130: LD_INT 4
16132: DOUBLE
16133: EQUAL
16134: IFTRUE 16138
16136: GO 16212
16138: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16139: LD_ADDR_VAR 0 2
16143: PUSH
16144: LD_INT 22
16146: PUSH
16147: LD_OWVAR 2
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 30
16158: PUSH
16159: LD_INT 29
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PPUSH
16170: CALL_OW 69
16174: ST_TO_ADDR
// if not tmp then
16175: LD_VAR 0 2
16179: NOT
16180: IFFALSE 16184
// exit ;
16182: GO 16234
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16184: LD_VAR 0 2
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PPUSH
16193: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16197: LD_VAR 0 2
16201: PUSH
16202: LD_INT 1
16204: ARRAY
16205: PPUSH
16206: CALL_OW 65
// end ; 5 .. 7 :
16210: GO 16234
16212: LD_INT 5
16214: DOUBLE
16215: GREATEREQUAL
16216: IFFALSE 16224
16218: LD_INT 7
16220: DOUBLE
16221: LESSEQUAL
16222: IFTRUE 16226
16224: GO 16233
16226: POP
// StreamSibBomb ; end ;
16227: CALL 12471 0 0
16231: GO 16234
16233: POP
// end ;
16234: PPOPN 3
16236: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16237: LD_EXP 31
16241: PUSH
16242: LD_EXP 81
16246: AND
16247: IFFALSE 16403
16249: GO 16251
16251: DISABLE
16252: LD_INT 0
16254: PPUSH
16255: PPUSH
16256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16257: LD_ADDR_VAR 0 2
16261: PUSH
16262: LD_INT 81
16264: PUSH
16265: LD_OWVAR 2
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 21
16279: PUSH
16280: LD_INT 1
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 21
16289: PUSH
16290: LD_INT 2
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PPUSH
16306: CALL_OW 69
16310: ST_TO_ADDR
// if not tmp then
16311: LD_VAR 0 2
16315: NOT
16316: IFFALSE 16320
// exit ;
16318: GO 16403
// p := 0 ;
16320: LD_ADDR_VAR 0 3
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16328: LD_INT 35
16330: PPUSH
16331: CALL_OW 67
// p := p + 1 ;
16335: LD_ADDR_VAR 0 3
16339: PUSH
16340: LD_VAR 0 3
16344: PUSH
16345: LD_INT 1
16347: PLUS
16348: ST_TO_ADDR
// for i in tmp do
16349: LD_ADDR_VAR 0 1
16353: PUSH
16354: LD_VAR 0 2
16358: PUSH
16359: FOR_IN
16360: IFFALSE 16391
// if GetLives ( i ) < 1000 then
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 256
16371: PUSH
16372: LD_INT 1000
16374: LESS
16375: IFFALSE 16389
// SetLives ( i , 1000 ) ;
16377: LD_VAR 0 1
16381: PPUSH
16382: LD_INT 1000
16384: PPUSH
16385: CALL_OW 234
16389: GO 16359
16391: POP
16392: POP
// until p > 20 ;
16393: LD_VAR 0 3
16397: PUSH
16398: LD_INT 20
16400: GREATER
16401: IFFALSE 16328
// end ;
16403: PPOPN 3
16405: END
// every 0 0$1 trigger StreamModeActive and sTime do
16406: LD_EXP 31
16410: PUSH
16411: LD_EXP 82
16415: AND
16416: IFFALSE 16451
16418: GO 16420
16420: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16421: LD_INT 28
16423: PPUSH
16424: LD_OWVAR 2
16428: PPUSH
16429: LD_INT 2
16431: PPUSH
16432: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16436: LD_INT 30
16438: PPUSH
16439: LD_OWVAR 2
16443: PPUSH
16444: LD_INT 2
16446: PPUSH
16447: CALL_OW 322
// end ;
16451: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16452: LD_EXP 31
16456: PUSH
16457: LD_EXP 83
16461: AND
16462: IFFALSE 16583
16464: GO 16466
16466: DISABLE
16467: LD_INT 0
16469: PPUSH
16470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16471: LD_ADDR_VAR 0 2
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_OWVAR 2
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: LD_INT 21
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 3
16500: PUSH
16501: LD_INT 23
16503: PUSH
16504: LD_INT 0
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: ST_TO_ADDR
// if not tmp then
16525: LD_VAR 0 2
16529: NOT
16530: IFFALSE 16534
// exit ;
16532: GO 16583
// for i in tmp do
16534: LD_ADDR_VAR 0 1
16538: PUSH
16539: LD_VAR 0 2
16543: PUSH
16544: FOR_IN
16545: IFFALSE 16581
// begin if Crawls ( i ) then
16547: LD_VAR 0 1
16551: PPUSH
16552: CALL_OW 318
16556: IFFALSE 16567
// ComWalk ( i ) ;
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 138
// SetClass ( i , 2 ) ;
16567: LD_VAR 0 1
16571: PPUSH
16572: LD_INT 2
16574: PPUSH
16575: CALL_OW 336
// end ;
16579: GO 16544
16581: POP
16582: POP
// end ;
16583: PPOPN 2
16585: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16586: LD_EXP 31
16590: PUSH
16591: LD_EXP 84
16595: AND
16596: IFFALSE 16884
16598: GO 16600
16600: DISABLE
16601: LD_INT 0
16603: PPUSH
16604: PPUSH
16605: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16606: LD_OWVAR 2
16610: PPUSH
16611: LD_INT 9
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16624: LD_INT 9
16626: PPUSH
16627: LD_OWVAR 2
16631: PPUSH
16632: CALL_OW 343
// uc_side := 9 ;
16636: LD_ADDR_OWVAR 20
16640: PUSH
16641: LD_INT 9
16643: ST_TO_ADDR
// uc_nation := 2 ;
16644: LD_ADDR_OWVAR 21
16648: PUSH
16649: LD_INT 2
16651: ST_TO_ADDR
// hc_name := Dark Warrior ;
16652: LD_ADDR_OWVAR 26
16656: PUSH
16657: LD_STRING Dark Warrior
16659: ST_TO_ADDR
// hc_gallery :=  ;
16660: LD_ADDR_OWVAR 33
16664: PUSH
16665: LD_STRING 
16667: ST_TO_ADDR
// hc_noskilllimit := true ;
16668: LD_ADDR_OWVAR 76
16672: PUSH
16673: LD_INT 1
16675: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16676: LD_ADDR_OWVAR 31
16680: PUSH
16681: LD_INT 30
16683: PUSH
16684: LD_INT 30
16686: PUSH
16687: LD_INT 30
16689: PUSH
16690: LD_INT 30
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: ST_TO_ADDR
// un := CreateHuman ;
16699: LD_ADDR_VAR 0 3
16703: PUSH
16704: CALL_OW 44
16708: ST_TO_ADDR
// hc_noskilllimit := false ;
16709: LD_ADDR_OWVAR 76
16713: PUSH
16714: LD_INT 0
16716: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16717: LD_VAR 0 3
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: CALL_OW 51
// ToLua ( playRanger() ) ;
16729: LD_STRING playRanger()
16731: PPUSH
16732: CALL_OW 559
// p := 0 ;
16736: LD_ADDR_VAR 0 2
16740: PUSH
16741: LD_INT 0
16743: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16744: LD_INT 35
16746: PPUSH
16747: CALL_OW 67
// p := p + 1 ;
16751: LD_ADDR_VAR 0 2
16755: PUSH
16756: LD_VAR 0 2
16760: PUSH
16761: LD_INT 1
16763: PLUS
16764: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16765: LD_VAR 0 3
16769: PPUSH
16770: CALL_OW 256
16774: PUSH
16775: LD_INT 1000
16777: LESS
16778: IFFALSE 16792
// SetLives ( un , 1000 ) ;
16780: LD_VAR 0 3
16784: PPUSH
16785: LD_INT 1000
16787: PPUSH
16788: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16792: LD_VAR 0 3
16796: PPUSH
16797: LD_INT 81
16799: PUSH
16800: LD_OWVAR 2
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 91
16811: PUSH
16812: LD_VAR 0 3
16816: PUSH
16817: LD_INT 30
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PPUSH
16829: CALL_OW 69
16833: PPUSH
16834: LD_VAR 0 3
16838: PPUSH
16839: CALL_OW 74
16843: PPUSH
16844: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16848: LD_VAR 0 2
16852: PUSH
16853: LD_INT 80
16855: GREATER
16856: PUSH
16857: LD_VAR 0 3
16861: PPUSH
16862: CALL_OW 301
16866: OR
16867: IFFALSE 16744
// if un then
16869: LD_VAR 0 3
16873: IFFALSE 16884
// RemoveUnit ( un ) ;
16875: LD_VAR 0 3
16879: PPUSH
16880: CALL_OW 64
// end ;
16884: PPOPN 3
16886: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16887: LD_EXP 85
16891: IFFALSE 17007
16893: GO 16895
16895: DISABLE
16896: LD_INT 0
16898: PPUSH
16899: PPUSH
16900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16901: LD_ADDR_VAR 0 2
16905: PUSH
16906: LD_INT 81
16908: PUSH
16909: LD_OWVAR 2
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 21
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PPUSH
16932: CALL_OW 69
16936: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16937: LD_STRING playComputer()
16939: PPUSH
16940: CALL_OW 559
// if not tmp then
16944: LD_VAR 0 2
16948: NOT
16949: IFFALSE 16953
// exit ;
16951: GO 17007
// for i in tmp do
16953: LD_ADDR_VAR 0 1
16957: PUSH
16958: LD_VAR 0 2
16962: PUSH
16963: FOR_IN
16964: IFFALSE 17005
// for j := 1 to 4 do
16966: LD_ADDR_VAR 0 3
16970: PUSH
16971: DOUBLE
16972: LD_INT 1
16974: DEC
16975: ST_TO_ADDR
16976: LD_INT 4
16978: PUSH
16979: FOR_TO
16980: IFFALSE 17001
// SetSkill ( i , j , 10 ) ;
16982: LD_VAR 0 1
16986: PPUSH
16987: LD_VAR 0 3
16991: PPUSH
16992: LD_INT 10
16994: PPUSH
16995: CALL_OW 237
16999: GO 16979
17001: POP
17002: POP
17003: GO 16963
17005: POP
17006: POP
// end ;
17007: PPOPN 3
17009: END
// every 0 0$1 trigger s30 do var i , tmp ;
17010: LD_EXP 86
17014: IFFALSE 17083
17016: GO 17018
17018: DISABLE
17019: LD_INT 0
17021: PPUSH
17022: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17023: LD_ADDR_VAR 0 2
17027: PUSH
17028: LD_INT 22
17030: PUSH
17031: LD_OWVAR 2
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: ST_TO_ADDR
// if not tmp then
17045: LD_VAR 0 2
17049: NOT
17050: IFFALSE 17054
// exit ;
17052: GO 17083
// for i in tmp do
17054: LD_ADDR_VAR 0 1
17058: PUSH
17059: LD_VAR 0 2
17063: PUSH
17064: FOR_IN
17065: IFFALSE 17081
// SetLives ( i , 300 ) ;
17067: LD_VAR 0 1
17071: PPUSH
17072: LD_INT 300
17074: PPUSH
17075: CALL_OW 234
17079: GO 17064
17081: POP
17082: POP
// end ;
17083: PPOPN 2
17085: END
// every 0 0$1 trigger s60 do var i , tmp ;
17086: LD_EXP 87
17090: IFFALSE 17159
17092: GO 17094
17094: DISABLE
17095: LD_INT 0
17097: PPUSH
17098: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17099: LD_ADDR_VAR 0 2
17103: PUSH
17104: LD_INT 22
17106: PUSH
17107: LD_OWVAR 2
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: ST_TO_ADDR
// if not tmp then
17121: LD_VAR 0 2
17125: NOT
17126: IFFALSE 17130
// exit ;
17128: GO 17159
// for i in tmp do
17130: LD_ADDR_VAR 0 1
17134: PUSH
17135: LD_VAR 0 2
17139: PUSH
17140: FOR_IN
17141: IFFALSE 17157
// SetLives ( i , 600 ) ;
17143: LD_VAR 0 1
17147: PPUSH
17148: LD_INT 600
17150: PPUSH
17151: CALL_OW 234
17155: GO 17140
17157: POP
17158: POP
// end ;
17159: PPOPN 2
17161: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17162: LD_INT 0
17164: PPUSH
// case cmd of 301 :
17165: LD_VAR 0 1
17169: PUSH
17170: LD_INT 301
17172: DOUBLE
17173: EQUAL
17174: IFTRUE 17178
17176: GO 17210
17178: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17179: LD_VAR 0 6
17183: PPUSH
17184: LD_VAR 0 7
17188: PPUSH
17189: LD_VAR 0 8
17193: PPUSH
17194: LD_VAR 0 4
17198: PPUSH
17199: LD_VAR 0 5
17203: PPUSH
17204: CALL 18411 0 5
17208: GO 17331
17210: LD_INT 302
17212: DOUBLE
17213: EQUAL
17214: IFTRUE 17218
17216: GO 17255
17218: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17219: LD_VAR 0 6
17223: PPUSH
17224: LD_VAR 0 7
17228: PPUSH
17229: LD_VAR 0 8
17233: PPUSH
17234: LD_VAR 0 9
17238: PPUSH
17239: LD_VAR 0 4
17243: PPUSH
17244: LD_VAR 0 5
17248: PPUSH
17249: CALL 18502 0 6
17253: GO 17331
17255: LD_INT 303
17257: DOUBLE
17258: EQUAL
17259: IFTRUE 17263
17261: GO 17300
17263: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17264: LD_VAR 0 6
17268: PPUSH
17269: LD_VAR 0 7
17273: PPUSH
17274: LD_VAR 0 8
17278: PPUSH
17279: LD_VAR 0 9
17283: PPUSH
17284: LD_VAR 0 4
17288: PPUSH
17289: LD_VAR 0 5
17293: PPUSH
17294: CALL 17336 0 6
17298: GO 17331
17300: LD_INT 304
17302: DOUBLE
17303: EQUAL
17304: IFTRUE 17308
17306: GO 17330
17308: POP
// hHackTeleport ( unit , x , y ) ; end ;
17309: LD_VAR 0 2
17313: PPUSH
17314: LD_VAR 0 4
17318: PPUSH
17319: LD_VAR 0 5
17323: PPUSH
17324: CALL 19095 0 3
17328: GO 17331
17330: POP
// end ;
17331: LD_VAR 0 12
17335: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17336: LD_INT 0
17338: PPUSH
17339: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17340: LD_VAR 0 1
17344: PUSH
17345: LD_INT 1
17347: LESS
17348: PUSH
17349: LD_VAR 0 1
17353: PUSH
17354: LD_INT 3
17356: GREATER
17357: OR
17358: PUSH
17359: LD_VAR 0 5
17363: PPUSH
17364: LD_VAR 0 6
17368: PPUSH
17369: CALL_OW 428
17373: OR
17374: IFFALSE 17378
// exit ;
17376: GO 18098
// uc_side := your_side ;
17378: LD_ADDR_OWVAR 20
17382: PUSH
17383: LD_OWVAR 2
17387: ST_TO_ADDR
// uc_nation := nation ;
17388: LD_ADDR_OWVAR 21
17392: PUSH
17393: LD_VAR 0 1
17397: ST_TO_ADDR
// bc_level = 1 ;
17398: LD_ADDR_OWVAR 43
17402: PUSH
17403: LD_INT 1
17405: ST_TO_ADDR
// case btype of 1 :
17406: LD_VAR 0 2
17410: PUSH
17411: LD_INT 1
17413: DOUBLE
17414: EQUAL
17415: IFTRUE 17419
17417: GO 17430
17419: POP
// bc_type := b_depot ; 2 :
17420: LD_ADDR_OWVAR 42
17424: PUSH
17425: LD_INT 0
17427: ST_TO_ADDR
17428: GO 18042
17430: LD_INT 2
17432: DOUBLE
17433: EQUAL
17434: IFTRUE 17438
17436: GO 17449
17438: POP
// bc_type := b_warehouse ; 3 :
17439: LD_ADDR_OWVAR 42
17443: PUSH
17444: LD_INT 1
17446: ST_TO_ADDR
17447: GO 18042
17449: LD_INT 3
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17468
17457: POP
// bc_type := b_lab ; 4 .. 9 :
17458: LD_ADDR_OWVAR 42
17462: PUSH
17463: LD_INT 6
17465: ST_TO_ADDR
17466: GO 18042
17468: LD_INT 4
17470: DOUBLE
17471: GREATEREQUAL
17472: IFFALSE 17480
17474: LD_INT 9
17476: DOUBLE
17477: LESSEQUAL
17478: IFTRUE 17482
17480: GO 17534
17482: POP
// begin bc_type := b_lab_half ;
17483: LD_ADDR_OWVAR 42
17487: PUSH
17488: LD_INT 7
17490: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17491: LD_ADDR_OWVAR 44
17495: PUSH
17496: LD_INT 10
17498: PUSH
17499: LD_INT 11
17501: PUSH
17502: LD_INT 12
17504: PUSH
17505: LD_INT 15
17507: PUSH
17508: LD_INT 14
17510: PUSH
17511: LD_INT 13
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: LD_VAR 0 2
17526: PUSH
17527: LD_INT 3
17529: MINUS
17530: ARRAY
17531: ST_TO_ADDR
// end ; 10 .. 13 :
17532: GO 18042
17534: LD_INT 10
17536: DOUBLE
17537: GREATEREQUAL
17538: IFFALSE 17546
17540: LD_INT 13
17542: DOUBLE
17543: LESSEQUAL
17544: IFTRUE 17548
17546: GO 17625
17548: POP
// begin bc_type := b_lab_full ;
17549: LD_ADDR_OWVAR 42
17553: PUSH
17554: LD_INT 8
17556: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17557: LD_ADDR_OWVAR 44
17561: PUSH
17562: LD_INT 10
17564: PUSH
17565: LD_INT 12
17567: PUSH
17568: LD_INT 14
17570: PUSH
17571: LD_INT 13
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: PUSH
17580: LD_VAR 0 2
17584: PUSH
17585: LD_INT 9
17587: MINUS
17588: ARRAY
17589: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17590: LD_ADDR_OWVAR 45
17594: PUSH
17595: LD_INT 11
17597: PUSH
17598: LD_INT 15
17600: PUSH
17601: LD_INT 12
17603: PUSH
17604: LD_INT 15
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: PUSH
17613: LD_VAR 0 2
17617: PUSH
17618: LD_INT 9
17620: MINUS
17621: ARRAY
17622: ST_TO_ADDR
// end ; 14 :
17623: GO 18042
17625: LD_INT 14
17627: DOUBLE
17628: EQUAL
17629: IFTRUE 17633
17631: GO 17644
17633: POP
// bc_type := b_workshop ; 15 :
17634: LD_ADDR_OWVAR 42
17638: PUSH
17639: LD_INT 2
17641: ST_TO_ADDR
17642: GO 18042
17644: LD_INT 15
17646: DOUBLE
17647: EQUAL
17648: IFTRUE 17652
17650: GO 17663
17652: POP
// bc_type := b_factory ; 16 :
17653: LD_ADDR_OWVAR 42
17657: PUSH
17658: LD_INT 3
17660: ST_TO_ADDR
17661: GO 18042
17663: LD_INT 16
17665: DOUBLE
17666: EQUAL
17667: IFTRUE 17671
17669: GO 17682
17671: POP
// bc_type := b_ext_gun ; 17 :
17672: LD_ADDR_OWVAR 42
17676: PUSH
17677: LD_INT 17
17679: ST_TO_ADDR
17680: GO 18042
17682: LD_INT 17
17684: DOUBLE
17685: EQUAL
17686: IFTRUE 17690
17688: GO 17718
17690: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17691: LD_ADDR_OWVAR 42
17695: PUSH
17696: LD_INT 19
17698: PUSH
17699: LD_INT 23
17701: PUSH
17702: LD_INT 19
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: PUSH
17710: LD_VAR 0 1
17714: ARRAY
17715: ST_TO_ADDR
17716: GO 18042
17718: LD_INT 18
17720: DOUBLE
17721: EQUAL
17722: IFTRUE 17726
17724: GO 17737
17726: POP
// bc_type := b_ext_radar ; 19 :
17727: LD_ADDR_OWVAR 42
17731: PUSH
17732: LD_INT 20
17734: ST_TO_ADDR
17735: GO 18042
17737: LD_INT 19
17739: DOUBLE
17740: EQUAL
17741: IFTRUE 17745
17743: GO 17756
17745: POP
// bc_type := b_ext_radio ; 20 :
17746: LD_ADDR_OWVAR 42
17750: PUSH
17751: LD_INT 22
17753: ST_TO_ADDR
17754: GO 18042
17756: LD_INT 20
17758: DOUBLE
17759: EQUAL
17760: IFTRUE 17764
17762: GO 17775
17764: POP
// bc_type := b_ext_siberium ; 21 :
17765: LD_ADDR_OWVAR 42
17769: PUSH
17770: LD_INT 21
17772: ST_TO_ADDR
17773: GO 18042
17775: LD_INT 21
17777: DOUBLE
17778: EQUAL
17779: IFTRUE 17783
17781: GO 17794
17783: POP
// bc_type := b_ext_computer ; 22 :
17784: LD_ADDR_OWVAR 42
17788: PUSH
17789: LD_INT 24
17791: ST_TO_ADDR
17792: GO 18042
17794: LD_INT 22
17796: DOUBLE
17797: EQUAL
17798: IFTRUE 17802
17800: GO 17813
17802: POP
// bc_type := b_ext_track ; 23 :
17803: LD_ADDR_OWVAR 42
17807: PUSH
17808: LD_INT 16
17810: ST_TO_ADDR
17811: GO 18042
17813: LD_INT 23
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17832
17821: POP
// bc_type := b_ext_laser ; 24 :
17822: LD_ADDR_OWVAR 42
17826: PUSH
17827: LD_INT 25
17829: ST_TO_ADDR
17830: GO 18042
17832: LD_INT 24
17834: DOUBLE
17835: EQUAL
17836: IFTRUE 17840
17838: GO 17851
17840: POP
// bc_type := b_control_tower ; 25 :
17841: LD_ADDR_OWVAR 42
17845: PUSH
17846: LD_INT 36
17848: ST_TO_ADDR
17849: GO 18042
17851: LD_INT 25
17853: DOUBLE
17854: EQUAL
17855: IFTRUE 17859
17857: GO 17870
17859: POP
// bc_type := b_breastwork ; 26 :
17860: LD_ADDR_OWVAR 42
17864: PUSH
17865: LD_INT 31
17867: ST_TO_ADDR
17868: GO 18042
17870: LD_INT 26
17872: DOUBLE
17873: EQUAL
17874: IFTRUE 17878
17876: GO 17889
17878: POP
// bc_type := b_bunker ; 27 :
17879: LD_ADDR_OWVAR 42
17883: PUSH
17884: LD_INT 32
17886: ST_TO_ADDR
17887: GO 18042
17889: LD_INT 27
17891: DOUBLE
17892: EQUAL
17893: IFTRUE 17897
17895: GO 17908
17897: POP
// bc_type := b_turret ; 28 :
17898: LD_ADDR_OWVAR 42
17902: PUSH
17903: LD_INT 33
17905: ST_TO_ADDR
17906: GO 18042
17908: LD_INT 28
17910: DOUBLE
17911: EQUAL
17912: IFTRUE 17916
17914: GO 17927
17916: POP
// bc_type := b_armoury ; 29 :
17917: LD_ADDR_OWVAR 42
17921: PUSH
17922: LD_INT 4
17924: ST_TO_ADDR
17925: GO 18042
17927: LD_INT 29
17929: DOUBLE
17930: EQUAL
17931: IFTRUE 17935
17933: GO 17946
17935: POP
// bc_type := b_barracks ; 30 :
17936: LD_ADDR_OWVAR 42
17940: PUSH
17941: LD_INT 5
17943: ST_TO_ADDR
17944: GO 18042
17946: LD_INT 30
17948: DOUBLE
17949: EQUAL
17950: IFTRUE 17954
17952: GO 17965
17954: POP
// bc_type := b_solar_power ; 31 :
17955: LD_ADDR_OWVAR 42
17959: PUSH
17960: LD_INT 27
17962: ST_TO_ADDR
17963: GO 18042
17965: LD_INT 31
17967: DOUBLE
17968: EQUAL
17969: IFTRUE 17973
17971: GO 17984
17973: POP
// bc_type := b_oil_power ; 32 :
17974: LD_ADDR_OWVAR 42
17978: PUSH
17979: LD_INT 26
17981: ST_TO_ADDR
17982: GO 18042
17984: LD_INT 32
17986: DOUBLE
17987: EQUAL
17988: IFTRUE 17992
17990: GO 18003
17992: POP
// bc_type := b_siberite_power ; 33 :
17993: LD_ADDR_OWVAR 42
17997: PUSH
17998: LD_INT 28
18000: ST_TO_ADDR
18001: GO 18042
18003: LD_INT 33
18005: DOUBLE
18006: EQUAL
18007: IFTRUE 18011
18009: GO 18022
18011: POP
// bc_type := b_oil_mine ; 34 :
18012: LD_ADDR_OWVAR 42
18016: PUSH
18017: LD_INT 29
18019: ST_TO_ADDR
18020: GO 18042
18022: LD_INT 34
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18041
18030: POP
// bc_type := b_siberite_mine ; end ;
18031: LD_ADDR_OWVAR 42
18035: PUSH
18036: LD_INT 30
18038: ST_TO_ADDR
18039: GO 18042
18041: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18042: LD_ADDR_VAR 0 8
18046: PUSH
18047: LD_VAR 0 5
18051: PPUSH
18052: LD_VAR 0 6
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: CALL_OW 47
18066: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18067: LD_OWVAR 42
18071: PUSH
18072: LD_INT 32
18074: PUSH
18075: LD_INT 33
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: IN
18082: IFFALSE 18098
// PlaceWeaponTurret ( b , weapon ) ;
18084: LD_VAR 0 8
18088: PPUSH
18089: LD_VAR 0 4
18093: PPUSH
18094: CALL_OW 431
// end ;
18098: LD_VAR 0 7
18102: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18103: LD_INT 0
18105: PPUSH
18106: PPUSH
18107: PPUSH
18108: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18109: LD_ADDR_VAR 0 4
18113: PUSH
18114: LD_INT 22
18116: PUSH
18117: LD_OWVAR 2
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 2
18128: PUSH
18129: LD_INT 30
18131: PUSH
18132: LD_INT 0
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 30
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: LIST
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PPUSH
18158: CALL_OW 69
18162: ST_TO_ADDR
// if not tmp then
18163: LD_VAR 0 4
18167: NOT
18168: IFFALSE 18172
// exit ;
18170: GO 18231
// for i in tmp do
18172: LD_ADDR_VAR 0 2
18176: PUSH
18177: LD_VAR 0 4
18181: PUSH
18182: FOR_IN
18183: IFFALSE 18229
// for j = 1 to 3 do
18185: LD_ADDR_VAR 0 3
18189: PUSH
18190: DOUBLE
18191: LD_INT 1
18193: DEC
18194: ST_TO_ADDR
18195: LD_INT 3
18197: PUSH
18198: FOR_TO
18199: IFFALSE 18225
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18201: LD_VAR 0 2
18205: PPUSH
18206: CALL_OW 274
18210: PPUSH
18211: LD_VAR 0 3
18215: PPUSH
18216: LD_INT 99999
18218: PPUSH
18219: CALL_OW 277
18223: GO 18198
18225: POP
18226: POP
18227: GO 18182
18229: POP
18230: POP
// end ;
18231: LD_VAR 0 1
18235: RET
// export function hHackSetLevel10 ; var i , j ; begin
18236: LD_INT 0
18238: PPUSH
18239: PPUSH
18240: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18241: LD_ADDR_VAR 0 2
18245: PUSH
18246: LD_INT 21
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PPUSH
18256: CALL_OW 69
18260: PUSH
18261: FOR_IN
18262: IFFALSE 18314
// if IsSelected ( i ) then
18264: LD_VAR 0 2
18268: PPUSH
18269: CALL_OW 306
18273: IFFALSE 18312
// begin for j := 1 to 4 do
18275: LD_ADDR_VAR 0 3
18279: PUSH
18280: DOUBLE
18281: LD_INT 1
18283: DEC
18284: ST_TO_ADDR
18285: LD_INT 4
18287: PUSH
18288: FOR_TO
18289: IFFALSE 18310
// SetSkill ( i , j , 10 ) ;
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: LD_INT 10
18303: PPUSH
18304: CALL_OW 237
18308: GO 18288
18310: POP
18311: POP
// end ;
18312: GO 18261
18314: POP
18315: POP
// end ;
18316: LD_VAR 0 1
18320: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18321: LD_INT 0
18323: PPUSH
18324: PPUSH
18325: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18326: LD_ADDR_VAR 0 2
18330: PUSH
18331: LD_INT 22
18333: PUSH
18334: LD_OWVAR 2
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 21
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PPUSH
18357: CALL_OW 69
18361: PUSH
18362: FOR_IN
18363: IFFALSE 18404
// begin for j := 1 to 4 do
18365: LD_ADDR_VAR 0 3
18369: PUSH
18370: DOUBLE
18371: LD_INT 1
18373: DEC
18374: ST_TO_ADDR
18375: LD_INT 4
18377: PUSH
18378: FOR_TO
18379: IFFALSE 18400
// SetSkill ( i , j , 10 ) ;
18381: LD_VAR 0 2
18385: PPUSH
18386: LD_VAR 0 3
18390: PPUSH
18391: LD_INT 10
18393: PPUSH
18394: CALL_OW 237
18398: GO 18378
18400: POP
18401: POP
// end ;
18402: GO 18362
18404: POP
18405: POP
// end ;
18406: LD_VAR 0 1
18410: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18411: LD_INT 0
18413: PPUSH
// uc_side := your_side ;
18414: LD_ADDR_OWVAR 20
18418: PUSH
18419: LD_OWVAR 2
18423: ST_TO_ADDR
// uc_nation := nation ;
18424: LD_ADDR_OWVAR 21
18428: PUSH
18429: LD_VAR 0 1
18433: ST_TO_ADDR
// InitHc ;
18434: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18438: LD_INT 0
18440: PPUSH
18441: LD_VAR 0 2
18445: PPUSH
18446: LD_VAR 0 3
18450: PPUSH
18451: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18455: LD_VAR 0 4
18459: PPUSH
18460: LD_VAR 0 5
18464: PPUSH
18465: CALL_OW 428
18469: PUSH
18470: LD_INT 0
18472: EQUAL
18473: IFFALSE 18497
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18475: CALL_OW 44
18479: PPUSH
18480: LD_VAR 0 4
18484: PPUSH
18485: LD_VAR 0 5
18489: PPUSH
18490: LD_INT 1
18492: PPUSH
18493: CALL_OW 48
// end ;
18497: LD_VAR 0 6
18501: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18502: LD_INT 0
18504: PPUSH
18505: PPUSH
// uc_side := your_side ;
18506: LD_ADDR_OWVAR 20
18510: PUSH
18511: LD_OWVAR 2
18515: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18516: LD_VAR 0 1
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: LD_INT 2
18526: PUSH
18527: LD_INT 3
18529: PUSH
18530: LD_INT 4
18532: PUSH
18533: LD_INT 5
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: IN
18543: IFFALSE 18555
// uc_nation := nation_american else
18545: LD_ADDR_OWVAR 21
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
18553: GO 18598
// if chassis in [ 11 , 12 , 13 , 14 ] then
18555: LD_VAR 0 1
18559: PUSH
18560: LD_INT 11
18562: PUSH
18563: LD_INT 12
18565: PUSH
18566: LD_INT 13
18568: PUSH
18569: LD_INT 14
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: IN
18578: IFFALSE 18590
// uc_nation := nation_arabian else
18580: LD_ADDR_OWVAR 21
18584: PUSH
18585: LD_INT 2
18587: ST_TO_ADDR
18588: GO 18598
// uc_nation := nation_russian ;
18590: LD_ADDR_OWVAR 21
18594: PUSH
18595: LD_INT 3
18597: ST_TO_ADDR
// vc_chassis := chassis ;
18598: LD_ADDR_OWVAR 37
18602: PUSH
18603: LD_VAR 0 1
18607: ST_TO_ADDR
// vc_engine := engine ;
18608: LD_ADDR_OWVAR 39
18612: PUSH
18613: LD_VAR 0 2
18617: ST_TO_ADDR
// vc_control := control ;
18618: LD_ADDR_OWVAR 38
18622: PUSH
18623: LD_VAR 0 3
18627: ST_TO_ADDR
// vc_weapon := weapon ;
18628: LD_ADDR_OWVAR 40
18632: PUSH
18633: LD_VAR 0 4
18637: ST_TO_ADDR
// un := CreateVehicle ;
18638: LD_ADDR_VAR 0 8
18642: PUSH
18643: CALL_OW 45
18647: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18648: LD_VAR 0 8
18652: PPUSH
18653: LD_INT 0
18655: PPUSH
18656: LD_INT 5
18658: PPUSH
18659: CALL_OW 12
18663: PPUSH
18664: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18668: LD_VAR 0 8
18672: PPUSH
18673: LD_VAR 0 5
18677: PPUSH
18678: LD_VAR 0 6
18682: PPUSH
18683: LD_INT 1
18685: PPUSH
18686: CALL_OW 48
// end ;
18690: LD_VAR 0 7
18694: RET
// export hInvincible ; every 1 do
18695: GO 18697
18697: DISABLE
// hInvincible := [ ] ;
18698: LD_ADDR_EXP 88
18702: PUSH
18703: EMPTY
18704: ST_TO_ADDR
18705: END
// every 10 do var i ;
18706: GO 18708
18708: DISABLE
18709: LD_INT 0
18711: PPUSH
// begin enable ;
18712: ENABLE
// if not hInvincible then
18713: LD_EXP 88
18717: NOT
18718: IFFALSE 18722
// exit ;
18720: GO 18766
// for i in hInvincible do
18722: LD_ADDR_VAR 0 1
18726: PUSH
18727: LD_EXP 88
18731: PUSH
18732: FOR_IN
18733: IFFALSE 18764
// if GetLives ( i ) < 1000 then
18735: LD_VAR 0 1
18739: PPUSH
18740: CALL_OW 256
18744: PUSH
18745: LD_INT 1000
18747: LESS
18748: IFFALSE 18762
// SetLives ( i , 1000 ) ;
18750: LD_VAR 0 1
18754: PPUSH
18755: LD_INT 1000
18757: PPUSH
18758: CALL_OW 234
18762: GO 18732
18764: POP
18765: POP
// end ;
18766: PPOPN 1
18768: END
// export function hHackInvincible ; var i ; begin
18769: LD_INT 0
18771: PPUSH
18772: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18773: LD_ADDR_VAR 0 2
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: LD_INT 21
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 21
18793: PUSH
18794: LD_INT 2
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: LIST
18805: PPUSH
18806: CALL_OW 69
18810: PUSH
18811: FOR_IN
18812: IFFALSE 18873
// if IsSelected ( i ) then
18814: LD_VAR 0 2
18818: PPUSH
18819: CALL_OW 306
18823: IFFALSE 18871
// begin if i in hInvincible then
18825: LD_VAR 0 2
18829: PUSH
18830: LD_EXP 88
18834: IN
18835: IFFALSE 18855
// hInvincible := hInvincible diff i else
18837: LD_ADDR_EXP 88
18841: PUSH
18842: LD_EXP 88
18846: PUSH
18847: LD_VAR 0 2
18851: DIFF
18852: ST_TO_ADDR
18853: GO 18871
// hInvincible := hInvincible union i ;
18855: LD_ADDR_EXP 88
18859: PUSH
18860: LD_EXP 88
18864: PUSH
18865: LD_VAR 0 2
18869: UNION
18870: ST_TO_ADDR
// end ;
18871: GO 18811
18873: POP
18874: POP
// end ;
18875: LD_VAR 0 1
18879: RET
// export function hHackInvisible ; var i , j ; begin
18880: LD_INT 0
18882: PPUSH
18883: PPUSH
18884: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18885: LD_ADDR_VAR 0 2
18889: PUSH
18890: LD_INT 21
18892: PUSH
18893: LD_INT 1
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PPUSH
18900: CALL_OW 69
18904: PUSH
18905: FOR_IN
18906: IFFALSE 18930
// if IsSelected ( i ) then
18908: LD_VAR 0 2
18912: PPUSH
18913: CALL_OW 306
18917: IFFALSE 18928
// ComForceInvisible ( i ) ;
18919: LD_VAR 0 2
18923: PPUSH
18924: CALL_OW 496
18928: GO 18905
18930: POP
18931: POP
// end ;
18932: LD_VAR 0 1
18936: RET
// export function hHackChangeYourSide ; begin
18937: LD_INT 0
18939: PPUSH
// if your_side = 8 then
18940: LD_OWVAR 2
18944: PUSH
18945: LD_INT 8
18947: EQUAL
18948: IFFALSE 18960
// your_side := 0 else
18950: LD_ADDR_OWVAR 2
18954: PUSH
18955: LD_INT 0
18957: ST_TO_ADDR
18958: GO 18974
// your_side := your_side + 1 ;
18960: LD_ADDR_OWVAR 2
18964: PUSH
18965: LD_OWVAR 2
18969: PUSH
18970: LD_INT 1
18972: PLUS
18973: ST_TO_ADDR
// end ;
18974: LD_VAR 0 1
18978: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
18983: PPUSH
// for i in all_units do
18984: LD_ADDR_VAR 0 2
18988: PUSH
18989: LD_OWVAR 3
18993: PUSH
18994: FOR_IN
18995: IFFALSE 19073
// if IsSelected ( i ) then
18997: LD_VAR 0 2
19001: PPUSH
19002: CALL_OW 306
19006: IFFALSE 19071
// begin j := GetSide ( i ) ;
19008: LD_ADDR_VAR 0 3
19012: PUSH
19013: LD_VAR 0 2
19017: PPUSH
19018: CALL_OW 255
19022: ST_TO_ADDR
// if j = 8 then
19023: LD_VAR 0 3
19027: PUSH
19028: LD_INT 8
19030: EQUAL
19031: IFFALSE 19043
// j := 0 else
19033: LD_ADDR_VAR 0 3
19037: PUSH
19038: LD_INT 0
19040: ST_TO_ADDR
19041: GO 19057
// j := j + 1 ;
19043: LD_ADDR_VAR 0 3
19047: PUSH
19048: LD_VAR 0 3
19052: PUSH
19053: LD_INT 1
19055: PLUS
19056: ST_TO_ADDR
// SetSide ( i , j ) ;
19057: LD_VAR 0 2
19061: PPUSH
19062: LD_VAR 0 3
19066: PPUSH
19067: CALL_OW 235
// end ;
19071: GO 18994
19073: POP
19074: POP
// end ;
19075: LD_VAR 0 1
19079: RET
// export function hHackFog ; begin
19080: LD_INT 0
19082: PPUSH
// FogOff ( true ) ;
19083: LD_INT 1
19085: PPUSH
19086: CALL_OW 344
// end ;
19090: LD_VAR 0 1
19094: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19095: LD_INT 0
19097: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19098: LD_VAR 0 1
19102: PPUSH
19103: LD_VAR 0 2
19107: PPUSH
19108: LD_VAR 0 3
19112: PPUSH
19113: LD_INT 1
19115: PPUSH
19116: LD_INT 1
19118: PPUSH
19119: CALL_OW 483
// CenterOnXY ( x , y ) ;
19123: LD_VAR 0 2
19127: PPUSH
19128: LD_VAR 0 3
19132: PPUSH
19133: CALL_OW 84
// end ; end_of_file
19137: LD_VAR 0 4
19141: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19142: LD_INT 0
19144: PPUSH
19145: PPUSH
// if exist_mode then
19146: LD_VAR 0 2
19150: IFFALSE 19175
// unit := CreateCharacter ( prefix & ident ) else
19152: LD_ADDR_VAR 0 5
19156: PUSH
19157: LD_VAR 0 3
19161: PUSH
19162: LD_VAR 0 1
19166: STR
19167: PPUSH
19168: CALL_OW 34
19172: ST_TO_ADDR
19173: GO 19190
// unit := NewCharacter ( ident ) ;
19175: LD_ADDR_VAR 0 5
19179: PUSH
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 25
19189: ST_TO_ADDR
// result := unit ;
19190: LD_ADDR_VAR 0 4
19194: PUSH
19195: LD_VAR 0 5
19199: ST_TO_ADDR
// end ;
19200: LD_VAR 0 4
19204: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19205: LD_INT 0
19207: PPUSH
19208: PPUSH
// if not side or not nation then
19209: LD_VAR 0 1
19213: NOT
19214: PUSH
19215: LD_VAR 0 2
19219: NOT
19220: OR
19221: IFFALSE 19225
// exit ;
19223: GO 19993
// case nation of nation_american :
19225: LD_VAR 0 2
19229: PUSH
19230: LD_INT 1
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19238
19236: GO 19452
19238: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19239: LD_ADDR_VAR 0 4
19243: PUSH
19244: LD_INT 35
19246: PUSH
19247: LD_INT 45
19249: PUSH
19250: LD_INT 46
19252: PUSH
19253: LD_INT 47
19255: PUSH
19256: LD_INT 82
19258: PUSH
19259: LD_INT 83
19261: PUSH
19262: LD_INT 84
19264: PUSH
19265: LD_INT 85
19267: PUSH
19268: LD_INT 86
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 6
19279: PUSH
19280: LD_INT 15
19282: PUSH
19283: LD_INT 16
19285: PUSH
19286: LD_INT 7
19288: PUSH
19289: LD_INT 12
19291: PUSH
19292: LD_INT 13
19294: PUSH
19295: LD_INT 10
19297: PUSH
19298: LD_INT 14
19300: PUSH
19301: LD_INT 20
19303: PUSH
19304: LD_INT 21
19306: PUSH
19307: LD_INT 22
19309: PUSH
19310: LD_INT 25
19312: PUSH
19313: LD_INT 32
19315: PUSH
19316: LD_INT 27
19318: PUSH
19319: LD_INT 36
19321: PUSH
19322: LD_INT 69
19324: PUSH
19325: LD_INT 39
19327: PUSH
19328: LD_INT 34
19330: PUSH
19331: LD_INT 40
19333: PUSH
19334: LD_INT 48
19336: PUSH
19337: LD_INT 49
19339: PUSH
19340: LD_INT 50
19342: PUSH
19343: LD_INT 51
19345: PUSH
19346: LD_INT 52
19348: PUSH
19349: LD_INT 53
19351: PUSH
19352: LD_INT 54
19354: PUSH
19355: LD_INT 55
19357: PUSH
19358: LD_INT 56
19360: PUSH
19361: LD_INT 57
19363: PUSH
19364: LD_INT 58
19366: PUSH
19367: LD_INT 59
19369: PUSH
19370: LD_INT 60
19372: PUSH
19373: LD_INT 61
19375: PUSH
19376: LD_INT 62
19378: PUSH
19379: LD_INT 80
19381: PUSH
19382: LD_INT 82
19384: PUSH
19385: LD_INT 83
19387: PUSH
19388: LD_INT 84
19390: PUSH
19391: LD_INT 85
19393: PUSH
19394: LD_INT 86
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: ST_TO_ADDR
19450: GO 19917
19452: LD_INT 2
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19686
19460: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19461: LD_ADDR_VAR 0 4
19465: PUSH
19466: LD_INT 35
19468: PUSH
19469: LD_INT 45
19471: PUSH
19472: LD_INT 46
19474: PUSH
19475: LD_INT 47
19477: PUSH
19478: LD_INT 82
19480: PUSH
19481: LD_INT 83
19483: PUSH
19484: LD_INT 84
19486: PUSH
19487: LD_INT 85
19489: PUSH
19490: LD_INT 87
19492: PUSH
19493: LD_INT 70
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: LD_INT 11
19501: PUSH
19502: LD_INT 3
19504: PUSH
19505: LD_INT 4
19507: PUSH
19508: LD_INT 5
19510: PUSH
19511: LD_INT 6
19513: PUSH
19514: LD_INT 15
19516: PUSH
19517: LD_INT 18
19519: PUSH
19520: LD_INT 7
19522: PUSH
19523: LD_INT 17
19525: PUSH
19526: LD_INT 8
19528: PUSH
19529: LD_INT 20
19531: PUSH
19532: LD_INT 21
19534: PUSH
19535: LD_INT 22
19537: PUSH
19538: LD_INT 72
19540: PUSH
19541: LD_INT 26
19543: PUSH
19544: LD_INT 69
19546: PUSH
19547: LD_INT 39
19549: PUSH
19550: LD_INT 40
19552: PUSH
19553: LD_INT 41
19555: PUSH
19556: LD_INT 42
19558: PUSH
19559: LD_INT 43
19561: PUSH
19562: LD_INT 48
19564: PUSH
19565: LD_INT 49
19567: PUSH
19568: LD_INT 50
19570: PUSH
19571: LD_INT 51
19573: PUSH
19574: LD_INT 52
19576: PUSH
19577: LD_INT 53
19579: PUSH
19580: LD_INT 54
19582: PUSH
19583: LD_INT 55
19585: PUSH
19586: LD_INT 56
19588: PUSH
19589: LD_INT 60
19591: PUSH
19592: LD_INT 61
19594: PUSH
19595: LD_INT 62
19597: PUSH
19598: LD_INT 66
19600: PUSH
19601: LD_INT 67
19603: PUSH
19604: LD_INT 68
19606: PUSH
19607: LD_INT 81
19609: PUSH
19610: LD_INT 82
19612: PUSH
19613: LD_INT 83
19615: PUSH
19616: LD_INT 84
19618: PUSH
19619: LD_INT 85
19621: PUSH
19622: LD_INT 87
19624: PUSH
19625: LD_INT 88
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: ST_TO_ADDR
19684: GO 19917
19686: LD_INT 3
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19916
19694: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19695: LD_ADDR_VAR 0 4
19699: PUSH
19700: LD_INT 46
19702: PUSH
19703: LD_INT 47
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: LD_INT 2
19711: PUSH
19712: LD_INT 82
19714: PUSH
19715: LD_INT 83
19717: PUSH
19718: LD_INT 84
19720: PUSH
19721: LD_INT 85
19723: PUSH
19724: LD_INT 86
19726: PUSH
19727: LD_INT 11
19729: PUSH
19730: LD_INT 9
19732: PUSH
19733: LD_INT 20
19735: PUSH
19736: LD_INT 19
19738: PUSH
19739: LD_INT 21
19741: PUSH
19742: LD_INT 24
19744: PUSH
19745: LD_INT 22
19747: PUSH
19748: LD_INT 25
19750: PUSH
19751: LD_INT 28
19753: PUSH
19754: LD_INT 29
19756: PUSH
19757: LD_INT 30
19759: PUSH
19760: LD_INT 31
19762: PUSH
19763: LD_INT 37
19765: PUSH
19766: LD_INT 38
19768: PUSH
19769: LD_INT 32
19771: PUSH
19772: LD_INT 27
19774: PUSH
19775: LD_INT 33
19777: PUSH
19778: LD_INT 69
19780: PUSH
19781: LD_INT 39
19783: PUSH
19784: LD_INT 34
19786: PUSH
19787: LD_INT 40
19789: PUSH
19790: LD_INT 71
19792: PUSH
19793: LD_INT 23
19795: PUSH
19796: LD_INT 44
19798: PUSH
19799: LD_INT 48
19801: PUSH
19802: LD_INT 49
19804: PUSH
19805: LD_INT 50
19807: PUSH
19808: LD_INT 51
19810: PUSH
19811: LD_INT 52
19813: PUSH
19814: LD_INT 53
19816: PUSH
19817: LD_INT 54
19819: PUSH
19820: LD_INT 55
19822: PUSH
19823: LD_INT 56
19825: PUSH
19826: LD_INT 57
19828: PUSH
19829: LD_INT 58
19831: PUSH
19832: LD_INT 59
19834: PUSH
19835: LD_INT 63
19837: PUSH
19838: LD_INT 64
19840: PUSH
19841: LD_INT 65
19843: PUSH
19844: LD_INT 82
19846: PUSH
19847: LD_INT 83
19849: PUSH
19850: LD_INT 84
19852: PUSH
19853: LD_INT 85
19855: PUSH
19856: LD_INT 86
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: ST_TO_ADDR
19914: GO 19917
19916: POP
// if state > - 1 and state < 3 then
19917: LD_VAR 0 3
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: GREATER
19926: PUSH
19927: LD_VAR 0 3
19931: PUSH
19932: LD_INT 3
19934: LESS
19935: AND
19936: IFFALSE 19993
// for i in result do
19938: LD_ADDR_VAR 0 5
19942: PUSH
19943: LD_VAR 0 4
19947: PUSH
19948: FOR_IN
19949: IFFALSE 19991
// if GetTech ( i , side ) <> state then
19951: LD_VAR 0 5
19955: PPUSH
19956: LD_VAR 0 1
19960: PPUSH
19961: CALL_OW 321
19965: PUSH
19966: LD_VAR 0 3
19970: NONEQUAL
19971: IFFALSE 19989
// result := result diff i ;
19973: LD_ADDR_VAR 0 4
19977: PUSH
19978: LD_VAR 0 4
19982: PUSH
19983: LD_VAR 0 5
19987: DIFF
19988: ST_TO_ADDR
19989: GO 19948
19991: POP
19992: POP
// end ;
19993: LD_VAR 0 4
19997: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
19998: LD_INT 0
20000: PPUSH
20001: PPUSH
20002: PPUSH
// result := true ;
20003: LD_ADDR_VAR 0 3
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20011: LD_ADDR_VAR 0 5
20015: PUSH
20016: LD_VAR 0 2
20020: PPUSH
20021: CALL_OW 480
20025: ST_TO_ADDR
// if not tmp then
20026: LD_VAR 0 5
20030: NOT
20031: IFFALSE 20035
// exit ;
20033: GO 20084
// for i in tmp do
20035: LD_ADDR_VAR 0 4
20039: PUSH
20040: LD_VAR 0 5
20044: PUSH
20045: FOR_IN
20046: IFFALSE 20082
// if GetTech ( i , side ) <> state_researched then
20048: LD_VAR 0 4
20052: PPUSH
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL_OW 321
20062: PUSH
20063: LD_INT 2
20065: NONEQUAL
20066: IFFALSE 20080
// begin result := false ;
20068: LD_ADDR_VAR 0 3
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
// exit ;
20076: POP
20077: POP
20078: GO 20084
// end ;
20080: GO 20045
20082: POP
20083: POP
// end ;
20084: LD_VAR 0 3
20088: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20089: LD_INT 0
20091: PPUSH
20092: PPUSH
20093: PPUSH
20094: PPUSH
20095: PPUSH
20096: PPUSH
20097: PPUSH
20098: PPUSH
20099: PPUSH
20100: PPUSH
20101: PPUSH
20102: PPUSH
20103: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20104: LD_VAR 0 1
20108: NOT
20109: PUSH
20110: LD_VAR 0 1
20114: PPUSH
20115: CALL_OW 257
20119: PUSH
20120: LD_INT 9
20122: NONEQUAL
20123: OR
20124: IFFALSE 20128
// exit ;
20126: GO 20701
// side := GetSide ( unit ) ;
20128: LD_ADDR_VAR 0 9
20132: PUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 255
20142: ST_TO_ADDR
// tech_space := tech_spacanom ;
20143: LD_ADDR_VAR 0 12
20147: PUSH
20148: LD_INT 29
20150: ST_TO_ADDR
// tech_time := tech_taurad ;
20151: LD_ADDR_VAR 0 13
20155: PUSH
20156: LD_INT 28
20158: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20159: LD_ADDR_VAR 0 11
20163: PUSH
20164: LD_VAR 0 1
20168: PPUSH
20169: CALL_OW 310
20173: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20174: LD_VAR 0 11
20178: PPUSH
20179: CALL_OW 247
20183: PUSH
20184: LD_INT 2
20186: EQUAL
20187: IFFALSE 20191
// exit ;
20189: GO 20701
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20191: LD_ADDR_VAR 0 8
20195: PUSH
20196: LD_INT 81
20198: PUSH
20199: LD_VAR 0 9
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 3
20210: PUSH
20211: LD_INT 21
20213: PUSH
20214: LD_INT 3
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PPUSH
20229: CALL_OW 69
20233: ST_TO_ADDR
// if not tmp then
20234: LD_VAR 0 8
20238: NOT
20239: IFFALSE 20243
// exit ;
20241: GO 20701
// if in_unit then
20243: LD_VAR 0 11
20247: IFFALSE 20271
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20249: LD_ADDR_VAR 0 10
20253: PUSH
20254: LD_VAR 0 8
20258: PPUSH
20259: LD_VAR 0 11
20263: PPUSH
20264: CALL_OW 74
20268: ST_TO_ADDR
20269: GO 20291
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20271: LD_ADDR_VAR 0 10
20275: PUSH
20276: LD_VAR 0 8
20280: PPUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 74
20290: ST_TO_ADDR
// if not enemy then
20291: LD_VAR 0 10
20295: NOT
20296: IFFALSE 20300
// exit ;
20298: GO 20701
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20300: LD_VAR 0 11
20304: PUSH
20305: LD_VAR 0 11
20309: PPUSH
20310: LD_VAR 0 10
20314: PPUSH
20315: CALL_OW 296
20319: PUSH
20320: LD_INT 13
20322: GREATER
20323: AND
20324: PUSH
20325: LD_VAR 0 1
20329: PPUSH
20330: LD_VAR 0 10
20334: PPUSH
20335: CALL_OW 296
20339: PUSH
20340: LD_INT 12
20342: GREATER
20343: OR
20344: IFFALSE 20348
// exit ;
20346: GO 20701
// missile := [ 1 ] ;
20348: LD_ADDR_VAR 0 14
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: EMPTY
20357: LIST
20358: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20359: LD_VAR 0 9
20363: PPUSH
20364: LD_VAR 0 12
20368: PPUSH
20369: CALL_OW 325
20373: IFFALSE 20402
// missile := Insert ( missile , missile + 1 , 2 ) ;
20375: LD_ADDR_VAR 0 14
20379: PUSH
20380: LD_VAR 0 14
20384: PPUSH
20385: LD_VAR 0 14
20389: PUSH
20390: LD_INT 1
20392: PLUS
20393: PPUSH
20394: LD_INT 2
20396: PPUSH
20397: CALL_OW 2
20401: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20402: LD_VAR 0 9
20406: PPUSH
20407: LD_VAR 0 13
20411: PPUSH
20412: CALL_OW 325
20416: PUSH
20417: LD_VAR 0 10
20421: PPUSH
20422: CALL_OW 255
20426: PPUSH
20427: LD_VAR 0 13
20431: PPUSH
20432: CALL_OW 325
20436: NOT
20437: AND
20438: IFFALSE 20467
// missile := Insert ( missile , missile + 1 , 3 ) ;
20440: LD_ADDR_VAR 0 14
20444: PUSH
20445: LD_VAR 0 14
20449: PPUSH
20450: LD_VAR 0 14
20454: PUSH
20455: LD_INT 1
20457: PLUS
20458: PPUSH
20459: LD_INT 3
20461: PPUSH
20462: CALL_OW 2
20466: ST_TO_ADDR
// if missile < 2 then
20467: LD_VAR 0 14
20471: PUSH
20472: LD_INT 2
20474: LESS
20475: IFFALSE 20479
// exit ;
20477: GO 20701
// x := GetX ( enemy ) ;
20479: LD_ADDR_VAR 0 4
20483: PUSH
20484: LD_VAR 0 10
20488: PPUSH
20489: CALL_OW 250
20493: ST_TO_ADDR
// y := GetY ( enemy ) ;
20494: LD_ADDR_VAR 0 5
20498: PUSH
20499: LD_VAR 0 10
20503: PPUSH
20504: CALL_OW 251
20508: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20509: LD_ADDR_VAR 0 6
20513: PUSH
20514: LD_VAR 0 4
20518: PUSH
20519: LD_INT 1
20521: NEG
20522: PPUSH
20523: LD_INT 1
20525: PPUSH
20526: CALL_OW 12
20530: PLUS
20531: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20532: LD_ADDR_VAR 0 7
20536: PUSH
20537: LD_VAR 0 5
20541: PUSH
20542: LD_INT 1
20544: NEG
20545: PPUSH
20546: LD_INT 1
20548: PPUSH
20549: CALL_OW 12
20553: PLUS
20554: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20555: LD_VAR 0 6
20559: PPUSH
20560: LD_VAR 0 7
20564: PPUSH
20565: CALL_OW 488
20569: NOT
20570: IFFALSE 20592
// begin _x := x ;
20572: LD_ADDR_VAR 0 6
20576: PUSH
20577: LD_VAR 0 4
20581: ST_TO_ADDR
// _y := y ;
20582: LD_ADDR_VAR 0 7
20586: PUSH
20587: LD_VAR 0 5
20591: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20592: LD_ADDR_VAR 0 3
20596: PUSH
20597: LD_INT 1
20599: PPUSH
20600: LD_VAR 0 14
20604: PPUSH
20605: CALL_OW 12
20609: ST_TO_ADDR
// case i of 1 :
20610: LD_VAR 0 3
20614: PUSH
20615: LD_INT 1
20617: DOUBLE
20618: EQUAL
20619: IFTRUE 20623
20621: GO 20640
20623: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20624: LD_VAR 0 1
20628: PPUSH
20629: LD_VAR 0 10
20633: PPUSH
20634: CALL_OW 115
20638: GO 20701
20640: LD_INT 2
20642: DOUBLE
20643: EQUAL
20644: IFTRUE 20648
20646: GO 20670
20648: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20649: LD_VAR 0 1
20653: PPUSH
20654: LD_VAR 0 6
20658: PPUSH
20659: LD_VAR 0 7
20663: PPUSH
20664: CALL_OW 153
20668: GO 20701
20670: LD_INT 3
20672: DOUBLE
20673: EQUAL
20674: IFTRUE 20678
20676: GO 20700
20678: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20679: LD_VAR 0 1
20683: PPUSH
20684: LD_VAR 0 6
20688: PPUSH
20689: LD_VAR 0 7
20693: PPUSH
20694: CALL_OW 154
20698: GO 20701
20700: POP
// end ;
20701: LD_VAR 0 2
20705: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20706: LD_INT 0
20708: PPUSH
20709: PPUSH
20710: PPUSH
20711: PPUSH
20712: PPUSH
20713: PPUSH
// if not unit or not building then
20714: LD_VAR 0 1
20718: NOT
20719: PUSH
20720: LD_VAR 0 2
20724: NOT
20725: OR
20726: IFFALSE 20730
// exit ;
20728: GO 20888
// x := GetX ( building ) ;
20730: LD_ADDR_VAR 0 5
20734: PUSH
20735: LD_VAR 0 2
20739: PPUSH
20740: CALL_OW 250
20744: ST_TO_ADDR
// y := GetY ( building ) ;
20745: LD_ADDR_VAR 0 6
20749: PUSH
20750: LD_VAR 0 2
20754: PPUSH
20755: CALL_OW 251
20759: ST_TO_ADDR
// for i = 0 to 5 do
20760: LD_ADDR_VAR 0 4
20764: PUSH
20765: DOUBLE
20766: LD_INT 0
20768: DEC
20769: ST_TO_ADDR
20770: LD_INT 5
20772: PUSH
20773: FOR_TO
20774: IFFALSE 20886
// begin _x := ShiftX ( x , i , 3 ) ;
20776: LD_ADDR_VAR 0 7
20780: PUSH
20781: LD_VAR 0 5
20785: PPUSH
20786: LD_VAR 0 4
20790: PPUSH
20791: LD_INT 3
20793: PPUSH
20794: CALL_OW 272
20798: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20799: LD_ADDR_VAR 0 8
20803: PUSH
20804: LD_VAR 0 6
20808: PPUSH
20809: LD_VAR 0 4
20813: PPUSH
20814: LD_INT 3
20816: PPUSH
20817: CALL_OW 273
20821: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20822: LD_VAR 0 7
20826: PPUSH
20827: LD_VAR 0 8
20831: PPUSH
20832: CALL_OW 488
20836: NOT
20837: IFFALSE 20841
// continue ;
20839: GO 20773
// if HexInfo ( _x , _y ) = 0 then
20841: LD_VAR 0 7
20845: PPUSH
20846: LD_VAR 0 8
20850: PPUSH
20851: CALL_OW 428
20855: PUSH
20856: LD_INT 0
20858: EQUAL
20859: IFFALSE 20884
// begin ComMoveXY ( unit , _x , _y ) ;
20861: LD_VAR 0 1
20865: PPUSH
20866: LD_VAR 0 7
20870: PPUSH
20871: LD_VAR 0 8
20875: PPUSH
20876: CALL_OW 111
// exit ;
20880: POP
20881: POP
20882: GO 20888
// end ; end ;
20884: GO 20773
20886: POP
20887: POP
// end ;
20888: LD_VAR 0 3
20892: RET
// export function ScanBase ( side , base_area ) ; begin
20893: LD_INT 0
20895: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20896: LD_ADDR_VAR 0 3
20900: PUSH
20901: LD_VAR 0 2
20905: PPUSH
20906: LD_INT 81
20908: PUSH
20909: LD_VAR 0 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PPUSH
20918: CALL_OW 70
20922: ST_TO_ADDR
// end ;
20923: LD_VAR 0 3
20927: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
20928: LD_INT 0
20930: PPUSH
20931: PPUSH
20932: PPUSH
20933: PPUSH
// result := false ;
20934: LD_ADDR_VAR 0 2
20938: PUSH
20939: LD_INT 0
20941: ST_TO_ADDR
// side := GetSide ( unit ) ;
20942: LD_ADDR_VAR 0 3
20946: PUSH
20947: LD_VAR 0 1
20951: PPUSH
20952: CALL_OW 255
20956: ST_TO_ADDR
// nat := GetNation ( unit ) ;
20957: LD_ADDR_VAR 0 4
20961: PUSH
20962: LD_VAR 0 1
20966: PPUSH
20967: CALL_OW 248
20971: ST_TO_ADDR
// case nat of 1 :
20972: LD_VAR 0 4
20976: PUSH
20977: LD_INT 1
20979: DOUBLE
20980: EQUAL
20981: IFTRUE 20985
20983: GO 20996
20985: POP
// tech := tech_lassight ; 2 :
20986: LD_ADDR_VAR 0 5
20990: PUSH
20991: LD_INT 12
20993: ST_TO_ADDR
20994: GO 21035
20996: LD_INT 2
20998: DOUBLE
20999: EQUAL
21000: IFTRUE 21004
21002: GO 21015
21004: POP
// tech := tech_mortar ; 3 :
21005: LD_ADDR_VAR 0 5
21009: PUSH
21010: LD_INT 41
21012: ST_TO_ADDR
21013: GO 21035
21015: LD_INT 3
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21034
21023: POP
// tech := tech_bazooka ; end ;
21024: LD_ADDR_VAR 0 5
21028: PUSH
21029: LD_INT 44
21031: ST_TO_ADDR
21032: GO 21035
21034: POP
// if Researched ( side , tech ) then
21035: LD_VAR 0 3
21039: PPUSH
21040: LD_VAR 0 5
21044: PPUSH
21045: CALL_OW 325
21049: IFFALSE 21076
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21051: LD_ADDR_VAR 0 2
21055: PUSH
21056: LD_INT 5
21058: PUSH
21059: LD_INT 8
21061: PUSH
21062: LD_INT 9
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: PUSH
21070: LD_VAR 0 4
21074: ARRAY
21075: ST_TO_ADDR
// end ;
21076: LD_VAR 0 2
21080: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21081: LD_INT 0
21083: PPUSH
21084: PPUSH
21085: PPUSH
// if not mines then
21086: LD_VAR 0 2
21090: NOT
21091: IFFALSE 21095
// exit ;
21093: GO 21239
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21095: LD_ADDR_VAR 0 5
21099: PUSH
21100: LD_INT 81
21102: PUSH
21103: LD_VAR 0 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 3
21114: PUSH
21115: LD_INT 21
21117: PUSH
21118: LD_INT 3
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PPUSH
21133: CALL_OW 69
21137: ST_TO_ADDR
// for i in mines do
21138: LD_ADDR_VAR 0 4
21142: PUSH
21143: LD_VAR 0 2
21147: PUSH
21148: FOR_IN
21149: IFFALSE 21237
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21151: LD_VAR 0 4
21155: PUSH
21156: LD_INT 1
21158: ARRAY
21159: PPUSH
21160: LD_VAR 0 4
21164: PUSH
21165: LD_INT 2
21167: ARRAY
21168: PPUSH
21169: CALL_OW 458
21173: NOT
21174: IFFALSE 21178
// continue ;
21176: GO 21148
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21178: LD_VAR 0 4
21182: PUSH
21183: LD_INT 1
21185: ARRAY
21186: PPUSH
21187: LD_VAR 0 4
21191: PUSH
21192: LD_INT 2
21194: ARRAY
21195: PPUSH
21196: CALL_OW 428
21200: PUSH
21201: LD_VAR 0 5
21205: IN
21206: IFFALSE 21235
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21208: LD_VAR 0 4
21212: PUSH
21213: LD_INT 1
21215: ARRAY
21216: PPUSH
21217: LD_VAR 0 4
21221: PUSH
21222: LD_INT 2
21224: ARRAY
21225: PPUSH
21226: LD_VAR 0 1
21230: PPUSH
21231: CALL_OW 456
// end ;
21235: GO 21148
21237: POP
21238: POP
// end ;
21239: LD_VAR 0 3
21243: RET
// export function Count ( array ) ; var i ; begin
21244: LD_INT 0
21246: PPUSH
21247: PPUSH
// result := 0 ;
21248: LD_ADDR_VAR 0 2
21252: PUSH
21253: LD_INT 0
21255: ST_TO_ADDR
// for i in array do
21256: LD_ADDR_VAR 0 3
21260: PUSH
21261: LD_VAR 0 1
21265: PUSH
21266: FOR_IN
21267: IFFALSE 21291
// if i then
21269: LD_VAR 0 3
21273: IFFALSE 21289
// result := result + 1 ;
21275: LD_ADDR_VAR 0 2
21279: PUSH
21280: LD_VAR 0 2
21284: PUSH
21285: LD_INT 1
21287: PLUS
21288: ST_TO_ADDR
21289: GO 21266
21291: POP
21292: POP
// end ;
21293: LD_VAR 0 2
21297: RET
// export function IsEmpty ( building ) ; begin
21298: LD_INT 0
21300: PPUSH
// if not building then
21301: LD_VAR 0 1
21305: NOT
21306: IFFALSE 21310
// exit ;
21308: GO 21353
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21310: LD_ADDR_VAR 0 2
21314: PUSH
21315: LD_VAR 0 1
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_VAR 0 1
21327: PPUSH
21328: CALL_OW 255
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 58
21339: PUSH
21340: EMPTY
21341: LIST
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PPUSH
21347: CALL_OW 69
21351: IN
21352: ST_TO_ADDR
// end ;
21353: LD_VAR 0 2
21357: RET
// export function IsNotFull ( building ) ; begin
21358: LD_INT 0
21360: PPUSH
// if not building then
21361: LD_VAR 0 1
21365: NOT
21366: IFFALSE 21370
// exit ;
21368: GO 21389
// result := UnitsInside ( building ) < 6 ;
21370: LD_ADDR_VAR 0 2
21374: PUSH
21375: LD_VAR 0 1
21379: PPUSH
21380: CALL_OW 313
21384: PUSH
21385: LD_INT 6
21387: LESS
21388: ST_TO_ADDR
// end ;
21389: LD_VAR 0 2
21393: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21394: LD_INT 0
21396: PPUSH
21397: PPUSH
21398: PPUSH
21399: PPUSH
// tmp := [ ] ;
21400: LD_ADDR_VAR 0 3
21404: PUSH
21405: EMPTY
21406: ST_TO_ADDR
// list := [ ] ;
21407: LD_ADDR_VAR 0 5
21411: PUSH
21412: EMPTY
21413: ST_TO_ADDR
// for i = 16 to 25 do
21414: LD_ADDR_VAR 0 4
21418: PUSH
21419: DOUBLE
21420: LD_INT 16
21422: DEC
21423: ST_TO_ADDR
21424: LD_INT 25
21426: PUSH
21427: FOR_TO
21428: IFFALSE 21501
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21430: LD_ADDR_VAR 0 3
21434: PUSH
21435: LD_VAR 0 3
21439: PUSH
21440: LD_INT 22
21442: PUSH
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL_OW 255
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 91
21459: PUSH
21460: LD_VAR 0 1
21464: PUSH
21465: LD_INT 6
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 30
21475: PUSH
21476: LD_VAR 0 4
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: PPUSH
21493: CALL_OW 69
21497: ADD
21498: ST_TO_ADDR
21499: GO 21427
21501: POP
21502: POP
// for i = 1 to tmp do
21503: LD_ADDR_VAR 0 4
21507: PUSH
21508: DOUBLE
21509: LD_INT 1
21511: DEC
21512: ST_TO_ADDR
21513: LD_VAR 0 3
21517: PUSH
21518: FOR_TO
21519: IFFALSE 21607
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21521: LD_ADDR_VAR 0 5
21525: PUSH
21526: LD_VAR 0 5
21530: PUSH
21531: LD_VAR 0 3
21535: PUSH
21536: LD_VAR 0 4
21540: ARRAY
21541: PPUSH
21542: CALL_OW 266
21546: PUSH
21547: LD_VAR 0 3
21551: PUSH
21552: LD_VAR 0 4
21556: ARRAY
21557: PPUSH
21558: CALL_OW 250
21562: PUSH
21563: LD_VAR 0 3
21567: PUSH
21568: LD_VAR 0 4
21572: ARRAY
21573: PPUSH
21574: CALL_OW 251
21578: PUSH
21579: LD_VAR 0 3
21583: PUSH
21584: LD_VAR 0 4
21588: ARRAY
21589: PPUSH
21590: CALL_OW 254
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: ADD
21604: ST_TO_ADDR
21605: GO 21518
21607: POP
21608: POP
// result := list ;
21609: LD_ADDR_VAR 0 2
21613: PUSH
21614: LD_VAR 0 5
21618: ST_TO_ADDR
// end ;
21619: LD_VAR 0 2
21623: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21624: LD_INT 0
21626: PPUSH
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
// if not factory then
21633: LD_VAR 0 1
21637: NOT
21638: IFFALSE 21642
// exit ;
21640: GO 22235
// if control = control_apeman then
21642: LD_VAR 0 4
21646: PUSH
21647: LD_INT 5
21649: EQUAL
21650: IFFALSE 21759
// begin tmp := UnitsInside ( factory ) ;
21652: LD_ADDR_VAR 0 8
21656: PUSH
21657: LD_VAR 0 1
21661: PPUSH
21662: CALL_OW 313
21666: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21667: LD_VAR 0 8
21671: PPUSH
21672: LD_INT 25
21674: PUSH
21675: LD_INT 12
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PPUSH
21682: CALL_OW 72
21686: NOT
21687: IFFALSE 21697
// control := control_manual ;
21689: LD_ADDR_VAR 0 4
21693: PUSH
21694: LD_INT 1
21696: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21697: LD_ADDR_VAR 0 8
21701: PUSH
21702: LD_VAR 0 1
21706: PPUSH
21707: CALL 21394 0 1
21711: ST_TO_ADDR
// if tmp then
21712: LD_VAR 0 8
21716: IFFALSE 21759
// begin for i in tmp do
21718: LD_ADDR_VAR 0 7
21722: PUSH
21723: LD_VAR 0 8
21727: PUSH
21728: FOR_IN
21729: IFFALSE 21757
// if i [ 1 ] = b_ext_radio then
21731: LD_VAR 0 7
21735: PUSH
21736: LD_INT 1
21738: ARRAY
21739: PUSH
21740: LD_INT 22
21742: EQUAL
21743: IFFALSE 21755
// begin control := control_remote ;
21745: LD_ADDR_VAR 0 4
21749: PUSH
21750: LD_INT 2
21752: ST_TO_ADDR
// break ;
21753: GO 21757
// end ;
21755: GO 21728
21757: POP
21758: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21759: LD_VAR 0 1
21763: PPUSH
21764: LD_VAR 0 2
21768: PPUSH
21769: LD_VAR 0 3
21773: PPUSH
21774: LD_VAR 0 4
21778: PPUSH
21779: LD_VAR 0 5
21783: PPUSH
21784: CALL_OW 448
21788: IFFALSE 21823
// begin result := [ chassis , engine , control , weapon ] ;
21790: LD_ADDR_VAR 0 6
21794: PUSH
21795: LD_VAR 0 2
21799: PUSH
21800: LD_VAR 0 3
21804: PUSH
21805: LD_VAR 0 4
21809: PUSH
21810: LD_VAR 0 5
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: ST_TO_ADDR
// exit ;
21821: GO 22235
// end ; _chassis := AvailableChassisList ( factory ) ;
21823: LD_ADDR_VAR 0 9
21827: PUSH
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL_OW 475
21837: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21838: LD_ADDR_VAR 0 11
21842: PUSH
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL_OW 476
21852: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21853: LD_ADDR_VAR 0 12
21857: PUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL_OW 477
21867: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21868: LD_ADDR_VAR 0 10
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 478
21882: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21883: LD_VAR 0 9
21887: NOT
21888: PUSH
21889: LD_VAR 0 11
21893: NOT
21894: OR
21895: PUSH
21896: LD_VAR 0 12
21900: NOT
21901: OR
21902: PUSH
21903: LD_VAR 0 10
21907: NOT
21908: OR
21909: IFFALSE 21944
// begin result := [ chassis , engine , control , weapon ] ;
21911: LD_ADDR_VAR 0 6
21915: PUSH
21916: LD_VAR 0 2
21920: PUSH
21921: LD_VAR 0 3
21925: PUSH
21926: LD_VAR 0 4
21930: PUSH
21931: LD_VAR 0 5
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: ST_TO_ADDR
// exit ;
21942: GO 22235
// end ; if not chassis in _chassis then
21944: LD_VAR 0 2
21948: PUSH
21949: LD_VAR 0 9
21953: IN
21954: NOT
21955: IFFALSE 21981
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
21957: LD_ADDR_VAR 0 2
21961: PUSH
21962: LD_VAR 0 9
21966: PUSH
21967: LD_INT 1
21969: PPUSH
21970: LD_VAR 0 9
21974: PPUSH
21975: CALL_OW 12
21979: ARRAY
21980: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
21981: LD_VAR 0 2
21985: PPUSH
21986: LD_VAR 0 3
21990: PPUSH
21991: CALL 22240 0 2
21995: NOT
21996: IFFALSE 22055
// repeat engine := _engine [ 1 ] ;
21998: LD_ADDR_VAR 0 3
22002: PUSH
22003: LD_VAR 0 11
22007: PUSH
22008: LD_INT 1
22010: ARRAY
22011: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22012: LD_ADDR_VAR 0 11
22016: PUSH
22017: LD_VAR 0 11
22021: PPUSH
22022: LD_INT 1
22024: PPUSH
22025: CALL_OW 3
22029: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22030: LD_VAR 0 2
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: CALL 22240 0 2
22044: PUSH
22045: LD_VAR 0 11
22049: PUSH
22050: EMPTY
22051: EQUAL
22052: OR
22053: IFFALSE 21998
// if not control in _control then
22055: LD_VAR 0 4
22059: PUSH
22060: LD_VAR 0 12
22064: IN
22065: NOT
22066: IFFALSE 22092
// control := _control [ rand ( 1 , _control ) ] ;
22068: LD_ADDR_VAR 0 4
22072: PUSH
22073: LD_VAR 0 12
22077: PUSH
22078: LD_INT 1
22080: PPUSH
22081: LD_VAR 0 12
22085: PPUSH
22086: CALL_OW 12
22090: ARRAY
22091: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22092: LD_VAR 0 2
22096: PPUSH
22097: LD_VAR 0 5
22101: PPUSH
22102: CALL 22460 0 2
22106: NOT
22107: IFFALSE 22166
// repeat weapon := _weapon [ 1 ] ;
22109: LD_ADDR_VAR 0 5
22113: PUSH
22114: LD_VAR 0 10
22118: PUSH
22119: LD_INT 1
22121: ARRAY
22122: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22123: LD_ADDR_VAR 0 10
22127: PUSH
22128: LD_VAR 0 10
22132: PPUSH
22133: LD_INT 1
22135: PPUSH
22136: CALL_OW 3
22140: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22141: LD_VAR 0 2
22145: PPUSH
22146: LD_VAR 0 5
22150: PPUSH
22151: CALL 22460 0 2
22155: PUSH
22156: LD_VAR 0 10
22160: PUSH
22161: EMPTY
22162: EQUAL
22163: OR
22164: IFFALSE 22109
// result := [ ] ;
22166: LD_ADDR_VAR 0 6
22170: PUSH
22171: EMPTY
22172: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22173: LD_VAR 0 1
22177: PPUSH
22178: LD_VAR 0 2
22182: PPUSH
22183: LD_VAR 0 3
22187: PPUSH
22188: LD_VAR 0 4
22192: PPUSH
22193: LD_VAR 0 5
22197: PPUSH
22198: CALL_OW 448
22202: IFFALSE 22235
// result := [ chassis , engine , control , weapon ] ;
22204: LD_ADDR_VAR 0 6
22208: PUSH
22209: LD_VAR 0 2
22213: PUSH
22214: LD_VAR 0 3
22218: PUSH
22219: LD_VAR 0 4
22223: PUSH
22224: LD_VAR 0 5
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: ST_TO_ADDR
// end ;
22235: LD_VAR 0 6
22239: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22240: LD_INT 0
22242: PPUSH
// if not chassis or not engine then
22243: LD_VAR 0 1
22247: NOT
22248: PUSH
22249: LD_VAR 0 2
22253: NOT
22254: OR
22255: IFFALSE 22259
// exit ;
22257: GO 22455
// case engine of engine_solar :
22259: LD_VAR 0 2
22263: PUSH
22264: LD_INT 2
22266: DOUBLE
22267: EQUAL
22268: IFTRUE 22272
22270: GO 22310
22272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22273: LD_ADDR_VAR 0 3
22277: PUSH
22278: LD_INT 11
22280: PUSH
22281: LD_INT 12
22283: PUSH
22284: LD_INT 13
22286: PUSH
22287: LD_INT 14
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: LD_INT 2
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: ST_TO_ADDR
22308: GO 22439
22310: LD_INT 1
22312: DOUBLE
22313: EQUAL
22314: IFTRUE 22318
22316: GO 22380
22318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22319: LD_ADDR_VAR 0 3
22323: PUSH
22324: LD_INT 11
22326: PUSH
22327: LD_INT 12
22329: PUSH
22330: LD_INT 13
22332: PUSH
22333: LD_INT 14
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: LD_INT 3
22344: PUSH
22345: LD_INT 4
22347: PUSH
22348: LD_INT 5
22350: PUSH
22351: LD_INT 21
22353: PUSH
22354: LD_INT 23
22356: PUSH
22357: LD_INT 22
22359: PUSH
22360: LD_INT 24
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: ST_TO_ADDR
22378: GO 22439
22380: LD_INT 3
22382: DOUBLE
22383: EQUAL
22384: IFTRUE 22388
22386: GO 22438
22388: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22389: LD_ADDR_VAR 0 3
22393: PUSH
22394: LD_INT 13
22396: PUSH
22397: LD_INT 14
22399: PUSH
22400: LD_INT 2
22402: PUSH
22403: LD_INT 3
22405: PUSH
22406: LD_INT 4
22408: PUSH
22409: LD_INT 5
22411: PUSH
22412: LD_INT 21
22414: PUSH
22415: LD_INT 22
22417: PUSH
22418: LD_INT 23
22420: PUSH
22421: LD_INT 24
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: ST_TO_ADDR
22436: GO 22439
22438: POP
// result := ( chassis in result ) ;
22439: LD_ADDR_VAR 0 3
22443: PUSH
22444: LD_VAR 0 1
22448: PUSH
22449: LD_VAR 0 3
22453: IN
22454: ST_TO_ADDR
// end ;
22455: LD_VAR 0 3
22459: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22460: LD_INT 0
22462: PPUSH
// if not chassis or not weapon then
22463: LD_VAR 0 1
22467: NOT
22468: PUSH
22469: LD_VAR 0 2
22473: NOT
22474: OR
22475: IFFALSE 22479
// exit ;
22477: GO 23541
// case weapon of us_machine_gun :
22479: LD_VAR 0 2
22483: PUSH
22484: LD_INT 2
22486: DOUBLE
22487: EQUAL
22488: IFTRUE 22492
22490: GO 22522
22492: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22493: LD_ADDR_VAR 0 3
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 2
22503: PUSH
22504: LD_INT 3
22506: PUSH
22507: LD_INT 4
22509: PUSH
22510: LD_INT 5
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: ST_TO_ADDR
22520: GO 23525
22522: LD_INT 3
22524: DOUBLE
22525: EQUAL
22526: IFTRUE 22530
22528: GO 22560
22530: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22531: LD_ADDR_VAR 0 3
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: LD_INT 3
22544: PUSH
22545: LD_INT 4
22547: PUSH
22548: LD_INT 5
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: ST_TO_ADDR
22558: GO 23525
22560: LD_INT 11
22562: DOUBLE
22563: EQUAL
22564: IFTRUE 22568
22566: GO 22598
22568: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22569: LD_ADDR_VAR 0 3
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 2
22579: PUSH
22580: LD_INT 3
22582: PUSH
22583: LD_INT 4
22585: PUSH
22586: LD_INT 5
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: ST_TO_ADDR
22596: GO 23525
22598: LD_INT 4
22600: DOUBLE
22601: EQUAL
22602: IFTRUE 22606
22604: GO 22632
22606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22607: LD_ADDR_VAR 0 3
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: LD_INT 3
22617: PUSH
22618: LD_INT 4
22620: PUSH
22621: LD_INT 5
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: ST_TO_ADDR
22630: GO 23525
22632: LD_INT 5
22634: DOUBLE
22635: EQUAL
22636: IFTRUE 22640
22638: GO 22666
22640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22641: LD_ADDR_VAR 0 3
22645: PUSH
22646: LD_INT 2
22648: PUSH
22649: LD_INT 3
22651: PUSH
22652: LD_INT 4
22654: PUSH
22655: LD_INT 5
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: ST_TO_ADDR
22664: GO 23525
22666: LD_INT 9
22668: DOUBLE
22669: EQUAL
22670: IFTRUE 22674
22672: GO 22700
22674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22675: LD_ADDR_VAR 0 3
22679: PUSH
22680: LD_INT 2
22682: PUSH
22683: LD_INT 3
22685: PUSH
22686: LD_INT 4
22688: PUSH
22689: LD_INT 5
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: ST_TO_ADDR
22698: GO 23525
22700: LD_INT 7
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22734
22708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22709: LD_ADDR_VAR 0 3
22713: PUSH
22714: LD_INT 2
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: LD_INT 4
22722: PUSH
22723: LD_INT 5
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: ST_TO_ADDR
22732: GO 23525
22734: LD_INT 12
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 22768
22742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22743: LD_ADDR_VAR 0 3
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 4
22756: PUSH
22757: LD_INT 5
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: ST_TO_ADDR
22766: GO 23525
22768: LD_INT 13
22770: DOUBLE
22771: EQUAL
22772: IFTRUE 22776
22774: GO 22802
22776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22777: LD_ADDR_VAR 0 3
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 4
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: ST_TO_ADDR
22800: GO 23525
22802: LD_INT 14
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22828
22810: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22811: LD_ADDR_VAR 0 3
22815: PUSH
22816: LD_INT 4
22818: PUSH
22819: LD_INT 5
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: ST_TO_ADDR
22826: GO 23525
22828: LD_INT 6
22830: DOUBLE
22831: EQUAL
22832: IFTRUE 22836
22834: GO 22854
22836: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22837: LD_ADDR_VAR 0 3
22841: PUSH
22842: LD_INT 4
22844: PUSH
22845: LD_INT 5
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: ST_TO_ADDR
22852: GO 23525
22854: LD_INT 10
22856: DOUBLE
22857: EQUAL
22858: IFTRUE 22862
22860: GO 22880
22862: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22863: LD_ADDR_VAR 0 3
22867: PUSH
22868: LD_INT 4
22870: PUSH
22871: LD_INT 5
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: ST_TO_ADDR
22878: GO 23525
22880: LD_INT 22
22882: DOUBLE
22883: EQUAL
22884: IFTRUE 22888
22886: GO 22914
22888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22889: LD_ADDR_VAR 0 3
22893: PUSH
22894: LD_INT 11
22896: PUSH
22897: LD_INT 12
22899: PUSH
22900: LD_INT 13
22902: PUSH
22903: LD_INT 14
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: ST_TO_ADDR
22912: GO 23525
22914: LD_INT 23
22916: DOUBLE
22917: EQUAL
22918: IFTRUE 22922
22920: GO 22948
22922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
22923: LD_ADDR_VAR 0 3
22927: PUSH
22928: LD_INT 11
22930: PUSH
22931: LD_INT 12
22933: PUSH
22934: LD_INT 13
22936: PUSH
22937: LD_INT 14
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: ST_TO_ADDR
22946: GO 23525
22948: LD_INT 24
22950: DOUBLE
22951: EQUAL
22952: IFTRUE 22956
22954: GO 22982
22956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
22957: LD_ADDR_VAR 0 3
22961: PUSH
22962: LD_INT 11
22964: PUSH
22965: LD_INT 12
22967: PUSH
22968: LD_INT 13
22970: PUSH
22971: LD_INT 14
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: ST_TO_ADDR
22980: GO 23525
22982: LD_INT 30
22984: DOUBLE
22985: EQUAL
22986: IFTRUE 22990
22988: GO 23016
22990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
22991: LD_ADDR_VAR 0 3
22995: PUSH
22996: LD_INT 11
22998: PUSH
22999: LD_INT 12
23001: PUSH
23002: LD_INT 13
23004: PUSH
23005: LD_INT 14
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: ST_TO_ADDR
23014: GO 23525
23016: LD_INT 25
23018: DOUBLE
23019: EQUAL
23020: IFTRUE 23024
23022: GO 23042
23024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23025: LD_ADDR_VAR 0 3
23029: PUSH
23030: LD_INT 13
23032: PUSH
23033: LD_INT 14
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: ST_TO_ADDR
23040: GO 23525
23042: LD_INT 27
23044: DOUBLE
23045: EQUAL
23046: IFTRUE 23050
23048: GO 23068
23050: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23051: LD_ADDR_VAR 0 3
23055: PUSH
23056: LD_INT 13
23058: PUSH
23059: LD_INT 14
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: ST_TO_ADDR
23066: GO 23525
23068: LD_EXP 17
23072: DOUBLE
23073: EQUAL
23074: IFTRUE 23078
23076: GO 23104
23078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23079: LD_ADDR_VAR 0 3
23083: PUSH
23084: LD_INT 11
23086: PUSH
23087: LD_INT 12
23089: PUSH
23090: LD_INT 13
23092: PUSH
23093: LD_INT 14
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: ST_TO_ADDR
23102: GO 23525
23104: LD_INT 28
23106: DOUBLE
23107: EQUAL
23108: IFTRUE 23112
23110: GO 23130
23112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23113: LD_ADDR_VAR 0 3
23117: PUSH
23118: LD_INT 13
23120: PUSH
23121: LD_INT 14
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: ST_TO_ADDR
23128: GO 23525
23130: LD_INT 29
23132: DOUBLE
23133: EQUAL
23134: IFTRUE 23138
23136: GO 23156
23138: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23139: LD_ADDR_VAR 0 3
23143: PUSH
23144: LD_INT 13
23146: PUSH
23147: LD_INT 14
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: ST_TO_ADDR
23154: GO 23525
23156: LD_INT 31
23158: DOUBLE
23159: EQUAL
23160: IFTRUE 23164
23162: GO 23182
23164: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23165: LD_ADDR_VAR 0 3
23169: PUSH
23170: LD_INT 13
23172: PUSH
23173: LD_INT 14
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: ST_TO_ADDR
23180: GO 23525
23182: LD_INT 26
23184: DOUBLE
23185: EQUAL
23186: IFTRUE 23190
23188: GO 23208
23190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23191: LD_ADDR_VAR 0 3
23195: PUSH
23196: LD_INT 13
23198: PUSH
23199: LD_INT 14
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: ST_TO_ADDR
23206: GO 23525
23208: LD_INT 42
23210: DOUBLE
23211: EQUAL
23212: IFTRUE 23216
23214: GO 23242
23216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23217: LD_ADDR_VAR 0 3
23221: PUSH
23222: LD_INT 21
23224: PUSH
23225: LD_INT 22
23227: PUSH
23228: LD_INT 23
23230: PUSH
23231: LD_INT 24
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
23240: GO 23525
23242: LD_INT 43
23244: DOUBLE
23245: EQUAL
23246: IFTRUE 23250
23248: GO 23276
23250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23251: LD_ADDR_VAR 0 3
23255: PUSH
23256: LD_INT 21
23258: PUSH
23259: LD_INT 22
23261: PUSH
23262: LD_INT 23
23264: PUSH
23265: LD_INT 24
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: ST_TO_ADDR
23274: GO 23525
23276: LD_INT 44
23278: DOUBLE
23279: EQUAL
23280: IFTRUE 23284
23282: GO 23310
23284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23285: LD_ADDR_VAR 0 3
23289: PUSH
23290: LD_INT 21
23292: PUSH
23293: LD_INT 22
23295: PUSH
23296: LD_INT 23
23298: PUSH
23299: LD_INT 24
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: ST_TO_ADDR
23308: GO 23525
23310: LD_INT 45
23312: DOUBLE
23313: EQUAL
23314: IFTRUE 23318
23316: GO 23344
23318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23319: LD_ADDR_VAR 0 3
23323: PUSH
23324: LD_INT 21
23326: PUSH
23327: LD_INT 22
23329: PUSH
23330: LD_INT 23
23332: PUSH
23333: LD_INT 24
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: ST_TO_ADDR
23342: GO 23525
23344: LD_INT 49
23346: DOUBLE
23347: EQUAL
23348: IFTRUE 23352
23350: GO 23378
23352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23353: LD_ADDR_VAR 0 3
23357: PUSH
23358: LD_INT 21
23360: PUSH
23361: LD_INT 22
23363: PUSH
23364: LD_INT 23
23366: PUSH
23367: LD_INT 24
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: ST_TO_ADDR
23376: GO 23525
23378: LD_INT 51
23380: DOUBLE
23381: EQUAL
23382: IFTRUE 23386
23384: GO 23412
23386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23387: LD_ADDR_VAR 0 3
23391: PUSH
23392: LD_INT 21
23394: PUSH
23395: LD_INT 22
23397: PUSH
23398: LD_INT 23
23400: PUSH
23401: LD_INT 24
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: ST_TO_ADDR
23410: GO 23525
23412: LD_INT 52
23414: DOUBLE
23415: EQUAL
23416: IFTRUE 23420
23418: GO 23446
23420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23421: LD_ADDR_VAR 0 3
23425: PUSH
23426: LD_INT 21
23428: PUSH
23429: LD_INT 22
23431: PUSH
23432: LD_INT 23
23434: PUSH
23435: LD_INT 24
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: ST_TO_ADDR
23444: GO 23525
23446: LD_INT 53
23448: DOUBLE
23449: EQUAL
23450: IFTRUE 23454
23452: GO 23472
23454: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23455: LD_ADDR_VAR 0 3
23459: PUSH
23460: LD_INT 23
23462: PUSH
23463: LD_INT 24
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: ST_TO_ADDR
23470: GO 23525
23472: LD_INT 46
23474: DOUBLE
23475: EQUAL
23476: IFTRUE 23480
23478: GO 23498
23480: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23481: LD_ADDR_VAR 0 3
23485: PUSH
23486: LD_INT 23
23488: PUSH
23489: LD_INT 24
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: ST_TO_ADDR
23496: GO 23525
23498: LD_INT 47
23500: DOUBLE
23501: EQUAL
23502: IFTRUE 23506
23504: GO 23524
23506: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23507: LD_ADDR_VAR 0 3
23511: PUSH
23512: LD_INT 23
23514: PUSH
23515: LD_INT 24
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: ST_TO_ADDR
23522: GO 23525
23524: POP
// result := ( chassis in result ) ;
23525: LD_ADDR_VAR 0 3
23529: PUSH
23530: LD_VAR 0 1
23534: PUSH
23535: LD_VAR 0 3
23539: IN
23540: ST_TO_ADDR
// end ;
23541: LD_VAR 0 3
23545: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23546: LD_INT 0
23548: PPUSH
23549: PPUSH
23550: PPUSH
23551: PPUSH
23552: PPUSH
23553: PPUSH
23554: PPUSH
// result := array ;
23555: LD_ADDR_VAR 0 5
23559: PUSH
23560: LD_VAR 0 1
23564: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23565: LD_VAR 0 1
23569: NOT
23570: PUSH
23571: LD_VAR 0 2
23575: NOT
23576: OR
23577: PUSH
23578: LD_VAR 0 3
23582: NOT
23583: OR
23584: PUSH
23585: LD_VAR 0 2
23589: PUSH
23590: LD_VAR 0 1
23594: GREATER
23595: OR
23596: PUSH
23597: LD_VAR 0 3
23601: PUSH
23602: LD_VAR 0 1
23606: GREATER
23607: OR
23608: IFFALSE 23612
// exit ;
23610: GO 23908
// if direction then
23612: LD_VAR 0 4
23616: IFFALSE 23680
// begin d := 1 ;
23618: LD_ADDR_VAR 0 9
23622: PUSH
23623: LD_INT 1
23625: ST_TO_ADDR
// if i_from > i_to then
23626: LD_VAR 0 2
23630: PUSH
23631: LD_VAR 0 3
23635: GREATER
23636: IFFALSE 23662
// length := ( array - i_from ) + i_to else
23638: LD_ADDR_VAR 0 11
23642: PUSH
23643: LD_VAR 0 1
23647: PUSH
23648: LD_VAR 0 2
23652: MINUS
23653: PUSH
23654: LD_VAR 0 3
23658: PLUS
23659: ST_TO_ADDR
23660: GO 23678
// length := i_to - i_from ;
23662: LD_ADDR_VAR 0 11
23666: PUSH
23667: LD_VAR 0 3
23671: PUSH
23672: LD_VAR 0 2
23676: MINUS
23677: ST_TO_ADDR
// end else
23678: GO 23741
// begin d := - 1 ;
23680: LD_ADDR_VAR 0 9
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: ST_TO_ADDR
// if i_from > i_to then
23689: LD_VAR 0 2
23693: PUSH
23694: LD_VAR 0 3
23698: GREATER
23699: IFFALSE 23719
// length := i_from - i_to else
23701: LD_ADDR_VAR 0 11
23705: PUSH
23706: LD_VAR 0 2
23710: PUSH
23711: LD_VAR 0 3
23715: MINUS
23716: ST_TO_ADDR
23717: GO 23741
// length := ( array - i_to ) + i_from ;
23719: LD_ADDR_VAR 0 11
23723: PUSH
23724: LD_VAR 0 1
23728: PUSH
23729: LD_VAR 0 3
23733: MINUS
23734: PUSH
23735: LD_VAR 0 2
23739: PLUS
23740: ST_TO_ADDR
// end ; if not length then
23741: LD_VAR 0 11
23745: NOT
23746: IFFALSE 23750
// exit ;
23748: GO 23908
// tmp := array ;
23750: LD_ADDR_VAR 0 10
23754: PUSH
23755: LD_VAR 0 1
23759: ST_TO_ADDR
// for i = 1 to length do
23760: LD_ADDR_VAR 0 6
23764: PUSH
23765: DOUBLE
23766: LD_INT 1
23768: DEC
23769: ST_TO_ADDR
23770: LD_VAR 0 11
23774: PUSH
23775: FOR_TO
23776: IFFALSE 23896
// begin for j = 1 to array do
23778: LD_ADDR_VAR 0 7
23782: PUSH
23783: DOUBLE
23784: LD_INT 1
23786: DEC
23787: ST_TO_ADDR
23788: LD_VAR 0 1
23792: PUSH
23793: FOR_TO
23794: IFFALSE 23882
// begin k := j + d ;
23796: LD_ADDR_VAR 0 8
23800: PUSH
23801: LD_VAR 0 7
23805: PUSH
23806: LD_VAR 0 9
23810: PLUS
23811: ST_TO_ADDR
// if k > array then
23812: LD_VAR 0 8
23816: PUSH
23817: LD_VAR 0 1
23821: GREATER
23822: IFFALSE 23832
// k := 1 ;
23824: LD_ADDR_VAR 0 8
23828: PUSH
23829: LD_INT 1
23831: ST_TO_ADDR
// if not k then
23832: LD_VAR 0 8
23836: NOT
23837: IFFALSE 23849
// k := array ;
23839: LD_ADDR_VAR 0 8
23843: PUSH
23844: LD_VAR 0 1
23848: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23849: LD_ADDR_VAR 0 10
23853: PUSH
23854: LD_VAR 0 10
23858: PPUSH
23859: LD_VAR 0 8
23863: PPUSH
23864: LD_VAR 0 1
23868: PUSH
23869: LD_VAR 0 7
23873: ARRAY
23874: PPUSH
23875: CALL_OW 1
23879: ST_TO_ADDR
// end ;
23880: GO 23793
23882: POP
23883: POP
// array := tmp ;
23884: LD_ADDR_VAR 0 1
23888: PUSH
23889: LD_VAR 0 10
23893: ST_TO_ADDR
// end ;
23894: GO 23775
23896: POP
23897: POP
// result := array ;
23898: LD_ADDR_VAR 0 5
23902: PUSH
23903: LD_VAR 0 1
23907: ST_TO_ADDR
// end ;
23908: LD_VAR 0 5
23912: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23913: LD_INT 0
23915: PPUSH
23916: PPUSH
// result := 0 ;
23917: LD_ADDR_VAR 0 3
23921: PUSH
23922: LD_INT 0
23924: ST_TO_ADDR
// if not array or not value in array then
23925: LD_VAR 0 1
23929: NOT
23930: PUSH
23931: LD_VAR 0 2
23935: PUSH
23936: LD_VAR 0 1
23940: IN
23941: NOT
23942: OR
23943: IFFALSE 23947
// exit ;
23945: GO 24001
// for i = 1 to array do
23947: LD_ADDR_VAR 0 4
23951: PUSH
23952: DOUBLE
23953: LD_INT 1
23955: DEC
23956: ST_TO_ADDR
23957: LD_VAR 0 1
23961: PUSH
23962: FOR_TO
23963: IFFALSE 23999
// if value = array [ i ] then
23965: LD_VAR 0 2
23969: PUSH
23970: LD_VAR 0 1
23974: PUSH
23975: LD_VAR 0 4
23979: ARRAY
23980: EQUAL
23981: IFFALSE 23997
// begin result := i ;
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_VAR 0 4
23992: ST_TO_ADDR
// exit ;
23993: POP
23994: POP
23995: GO 24001
// end ;
23997: GO 23962
23999: POP
24000: POP
// end ;
24001: LD_VAR 0 3
24005: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24006: LD_INT 0
24008: PPUSH
// vc_chassis := chassis ;
24009: LD_ADDR_OWVAR 37
24013: PUSH
24014: LD_VAR 0 1
24018: ST_TO_ADDR
// vc_engine := engine ;
24019: LD_ADDR_OWVAR 39
24023: PUSH
24024: LD_VAR 0 2
24028: ST_TO_ADDR
// vc_control := control ;
24029: LD_ADDR_OWVAR 38
24033: PUSH
24034: LD_VAR 0 3
24038: ST_TO_ADDR
// vc_weapon := weapon ;
24039: LD_ADDR_OWVAR 40
24043: PUSH
24044: LD_VAR 0 4
24048: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24049: LD_ADDR_OWVAR 41
24053: PUSH
24054: LD_VAR 0 5
24058: ST_TO_ADDR
// end ;
24059: LD_VAR 0 6
24063: RET
// export function WantPlant ( unit ) ; var task ; begin
24064: LD_INT 0
24066: PPUSH
24067: PPUSH
// result := false ;
24068: LD_ADDR_VAR 0 2
24072: PUSH
24073: LD_INT 0
24075: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24076: LD_ADDR_VAR 0 3
24080: PUSH
24081: LD_VAR 0 1
24085: PPUSH
24086: CALL_OW 437
24090: ST_TO_ADDR
// if task then
24091: LD_VAR 0 3
24095: IFFALSE 24123
// if task [ 1 ] [ 1 ] = p then
24097: LD_VAR 0 3
24101: PUSH
24102: LD_INT 1
24104: ARRAY
24105: PUSH
24106: LD_INT 1
24108: ARRAY
24109: PUSH
24110: LD_STRING p
24112: EQUAL
24113: IFFALSE 24123
// result := true ;
24115: LD_ADDR_VAR 0 2
24119: PUSH
24120: LD_INT 1
24122: ST_TO_ADDR
// end ;
24123: LD_VAR 0 2
24127: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24128: LD_INT 0
24130: PPUSH
24131: PPUSH
24132: PPUSH
24133: PPUSH
// if pos < 1 then
24134: LD_VAR 0 2
24138: PUSH
24139: LD_INT 1
24141: LESS
24142: IFFALSE 24146
// exit ;
24144: GO 24449
// if pos = 1 then
24146: LD_VAR 0 2
24150: PUSH
24151: LD_INT 1
24153: EQUAL
24154: IFFALSE 24187
// result := Replace ( arr , pos [ 1 ] , value ) else
24156: LD_ADDR_VAR 0 4
24160: PUSH
24161: LD_VAR 0 1
24165: PPUSH
24166: LD_VAR 0 2
24170: PUSH
24171: LD_INT 1
24173: ARRAY
24174: PPUSH
24175: LD_VAR 0 3
24179: PPUSH
24180: CALL_OW 1
24184: ST_TO_ADDR
24185: GO 24449
// begin tmp := arr ;
24187: LD_ADDR_VAR 0 6
24191: PUSH
24192: LD_VAR 0 1
24196: ST_TO_ADDR
// s_arr := [ tmp ] ;
24197: LD_ADDR_VAR 0 7
24201: PUSH
24202: LD_VAR 0 6
24206: PUSH
24207: EMPTY
24208: LIST
24209: ST_TO_ADDR
// for i = 1 to pos - 1 do
24210: LD_ADDR_VAR 0 5
24214: PUSH
24215: DOUBLE
24216: LD_INT 1
24218: DEC
24219: ST_TO_ADDR
24220: LD_VAR 0 2
24224: PUSH
24225: LD_INT 1
24227: MINUS
24228: PUSH
24229: FOR_TO
24230: IFFALSE 24275
// begin tmp := tmp [ pos [ i ] ] ;
24232: LD_ADDR_VAR 0 6
24236: PUSH
24237: LD_VAR 0 6
24241: PUSH
24242: LD_VAR 0 2
24246: PUSH
24247: LD_VAR 0 5
24251: ARRAY
24252: ARRAY
24253: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24254: LD_ADDR_VAR 0 7
24258: PUSH
24259: LD_VAR 0 7
24263: PUSH
24264: LD_VAR 0 6
24268: PUSH
24269: EMPTY
24270: LIST
24271: ADD
24272: ST_TO_ADDR
// end ;
24273: GO 24229
24275: POP
24276: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24277: LD_ADDR_VAR 0 6
24281: PUSH
24282: LD_VAR 0 6
24286: PPUSH
24287: LD_VAR 0 2
24291: PUSH
24292: LD_VAR 0 2
24296: ARRAY
24297: PPUSH
24298: LD_VAR 0 3
24302: PPUSH
24303: CALL_OW 1
24307: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24308: LD_ADDR_VAR 0 7
24312: PUSH
24313: LD_VAR 0 7
24317: PPUSH
24318: LD_VAR 0 7
24322: PPUSH
24323: LD_VAR 0 6
24327: PPUSH
24328: CALL_OW 1
24332: ST_TO_ADDR
// for i = s_arr downto 2 do
24333: LD_ADDR_VAR 0 5
24337: PUSH
24338: DOUBLE
24339: LD_VAR 0 7
24343: INC
24344: ST_TO_ADDR
24345: LD_INT 2
24347: PUSH
24348: FOR_DOWNTO
24349: IFFALSE 24433
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24351: LD_ADDR_VAR 0 6
24355: PUSH
24356: LD_VAR 0 7
24360: PUSH
24361: LD_VAR 0 5
24365: PUSH
24366: LD_INT 1
24368: MINUS
24369: ARRAY
24370: PPUSH
24371: LD_VAR 0 2
24375: PUSH
24376: LD_VAR 0 5
24380: PUSH
24381: LD_INT 1
24383: MINUS
24384: ARRAY
24385: PPUSH
24386: LD_VAR 0 7
24390: PUSH
24391: LD_VAR 0 5
24395: ARRAY
24396: PPUSH
24397: CALL_OW 1
24401: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24402: LD_ADDR_VAR 0 7
24406: PUSH
24407: LD_VAR 0 7
24411: PPUSH
24412: LD_VAR 0 5
24416: PUSH
24417: LD_INT 1
24419: MINUS
24420: PPUSH
24421: LD_VAR 0 6
24425: PPUSH
24426: CALL_OW 1
24430: ST_TO_ADDR
// end ;
24431: GO 24348
24433: POP
24434: POP
// result := s_arr [ 1 ] ;
24435: LD_ADDR_VAR 0 4
24439: PUSH
24440: LD_VAR 0 7
24444: PUSH
24445: LD_INT 1
24447: ARRAY
24448: ST_TO_ADDR
// end ; end ;
24449: LD_VAR 0 4
24453: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24454: LD_INT 0
24456: PPUSH
24457: PPUSH
// if not list then
24458: LD_VAR 0 1
24462: NOT
24463: IFFALSE 24467
// exit ;
24465: GO 24558
// i := list [ pos1 ] ;
24467: LD_ADDR_VAR 0 5
24471: PUSH
24472: LD_VAR 0 1
24476: PUSH
24477: LD_VAR 0 2
24481: ARRAY
24482: ST_TO_ADDR
// if not i then
24483: LD_VAR 0 5
24487: NOT
24488: IFFALSE 24492
// exit ;
24490: GO 24558
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24492: LD_ADDR_VAR 0 1
24496: PUSH
24497: LD_VAR 0 1
24501: PPUSH
24502: LD_VAR 0 2
24506: PPUSH
24507: LD_VAR 0 1
24511: PUSH
24512: LD_VAR 0 3
24516: ARRAY
24517: PPUSH
24518: CALL_OW 1
24522: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24523: LD_ADDR_VAR 0 1
24527: PUSH
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_VAR 0 3
24537: PPUSH
24538: LD_VAR 0 5
24542: PPUSH
24543: CALL_OW 1
24547: ST_TO_ADDR
// result := list ;
24548: LD_ADDR_VAR 0 4
24552: PUSH
24553: LD_VAR 0 1
24557: ST_TO_ADDR
// end ;
24558: LD_VAR 0 4
24562: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24563: LD_INT 0
24565: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24566: LD_ADDR_VAR 0 5
24570: PUSH
24571: LD_VAR 0 1
24575: PPUSH
24576: CALL_OW 250
24580: PPUSH
24581: LD_VAR 0 1
24585: PPUSH
24586: CALL_OW 251
24590: PPUSH
24591: LD_VAR 0 2
24595: PPUSH
24596: LD_VAR 0 3
24600: PPUSH
24601: LD_VAR 0 4
24605: PPUSH
24606: CALL 24616 0 5
24610: ST_TO_ADDR
// end ;
24611: LD_VAR 0 5
24615: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24616: LD_INT 0
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
// if not list then
24622: LD_VAR 0 3
24626: NOT
24627: IFFALSE 24631
// exit ;
24629: GO 25019
// result := [ ] ;
24631: LD_ADDR_VAR 0 6
24635: PUSH
24636: EMPTY
24637: ST_TO_ADDR
// for i in list do
24638: LD_ADDR_VAR 0 7
24642: PUSH
24643: LD_VAR 0 3
24647: PUSH
24648: FOR_IN
24649: IFFALSE 24851
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24651: LD_ADDR_VAR 0 9
24655: PUSH
24656: LD_VAR 0 7
24660: PPUSH
24661: LD_VAR 0 1
24665: PPUSH
24666: LD_VAR 0 2
24670: PPUSH
24671: CALL_OW 297
24675: ST_TO_ADDR
// if not result then
24676: LD_VAR 0 6
24680: NOT
24681: IFFALSE 24707
// result := [ [ i , tmp ] ] else
24683: LD_ADDR_VAR 0 6
24687: PUSH
24688: LD_VAR 0 7
24692: PUSH
24693: LD_VAR 0 9
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: ST_TO_ADDR
24705: GO 24849
// begin if result [ result ] [ 2 ] < tmp then
24707: LD_VAR 0 6
24711: PUSH
24712: LD_VAR 0 6
24716: ARRAY
24717: PUSH
24718: LD_INT 2
24720: ARRAY
24721: PUSH
24722: LD_VAR 0 9
24726: LESS
24727: IFFALSE 24769
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24729: LD_ADDR_VAR 0 6
24733: PUSH
24734: LD_VAR 0 6
24738: PPUSH
24739: LD_VAR 0 6
24743: PUSH
24744: LD_INT 1
24746: PLUS
24747: PPUSH
24748: LD_VAR 0 7
24752: PUSH
24753: LD_VAR 0 9
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PPUSH
24762: CALL_OW 2
24766: ST_TO_ADDR
24767: GO 24849
// for j = 1 to result do
24769: LD_ADDR_VAR 0 8
24773: PUSH
24774: DOUBLE
24775: LD_INT 1
24777: DEC
24778: ST_TO_ADDR
24779: LD_VAR 0 6
24783: PUSH
24784: FOR_TO
24785: IFFALSE 24847
// begin if tmp < result [ j ] [ 2 ] then
24787: LD_VAR 0 9
24791: PUSH
24792: LD_VAR 0 6
24796: PUSH
24797: LD_VAR 0 8
24801: ARRAY
24802: PUSH
24803: LD_INT 2
24805: ARRAY
24806: LESS
24807: IFFALSE 24845
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24809: LD_ADDR_VAR 0 6
24813: PUSH
24814: LD_VAR 0 6
24818: PPUSH
24819: LD_VAR 0 8
24823: PPUSH
24824: LD_VAR 0 7
24828: PUSH
24829: LD_VAR 0 9
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PPUSH
24838: CALL_OW 2
24842: ST_TO_ADDR
// break ;
24843: GO 24847
// end ; end ;
24845: GO 24784
24847: POP
24848: POP
// end ; end ;
24849: GO 24648
24851: POP
24852: POP
// if result and not asc then
24853: LD_VAR 0 6
24857: PUSH
24858: LD_VAR 0 4
24862: NOT
24863: AND
24864: IFFALSE 24939
// begin tmp := result ;
24866: LD_ADDR_VAR 0 9
24870: PUSH
24871: LD_VAR 0 6
24875: ST_TO_ADDR
// for i = tmp downto 1 do
24876: LD_ADDR_VAR 0 7
24880: PUSH
24881: DOUBLE
24882: LD_VAR 0 9
24886: INC
24887: ST_TO_ADDR
24888: LD_INT 1
24890: PUSH
24891: FOR_DOWNTO
24892: IFFALSE 24937
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
24894: LD_ADDR_VAR 0 6
24898: PUSH
24899: LD_VAR 0 6
24903: PPUSH
24904: LD_VAR 0 9
24908: PUSH
24909: LD_VAR 0 7
24913: MINUS
24914: PUSH
24915: LD_INT 1
24917: PLUS
24918: PPUSH
24919: LD_VAR 0 9
24923: PUSH
24924: LD_VAR 0 7
24928: ARRAY
24929: PPUSH
24930: CALL_OW 1
24934: ST_TO_ADDR
24935: GO 24891
24937: POP
24938: POP
// end ; tmp := [ ] ;
24939: LD_ADDR_VAR 0 9
24943: PUSH
24944: EMPTY
24945: ST_TO_ADDR
// if mode then
24946: LD_VAR 0 5
24950: IFFALSE 25019
// begin for i = 1 to result do
24952: LD_ADDR_VAR 0 7
24956: PUSH
24957: DOUBLE
24958: LD_INT 1
24960: DEC
24961: ST_TO_ADDR
24962: LD_VAR 0 6
24966: PUSH
24967: FOR_TO
24968: IFFALSE 25007
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
24970: LD_ADDR_VAR 0 9
24974: PUSH
24975: LD_VAR 0 9
24979: PPUSH
24980: LD_VAR 0 7
24984: PPUSH
24985: LD_VAR 0 6
24989: PUSH
24990: LD_VAR 0 7
24994: ARRAY
24995: PUSH
24996: LD_INT 1
24998: ARRAY
24999: PPUSH
25000: CALL_OW 1
25004: ST_TO_ADDR
25005: GO 24967
25007: POP
25008: POP
// result := tmp ;
25009: LD_ADDR_VAR 0 6
25013: PUSH
25014: LD_VAR 0 9
25018: ST_TO_ADDR
// end ; end ;
25019: LD_VAR 0 6
25023: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25024: LD_INT 0
25026: PPUSH
25027: PPUSH
25028: PPUSH
25029: PPUSH
25030: PPUSH
25031: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25032: LD_ADDR_VAR 0 5
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: EMPTY
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: ST_TO_ADDR
// if not x or not y then
25054: LD_VAR 0 2
25058: NOT
25059: PUSH
25060: LD_VAR 0 3
25064: NOT
25065: OR
25066: IFFALSE 25070
// exit ;
25068: GO 26722
// if not range then
25070: LD_VAR 0 4
25074: NOT
25075: IFFALSE 25085
// range := 10 ;
25077: LD_ADDR_VAR 0 4
25081: PUSH
25082: LD_INT 10
25084: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25085: LD_ADDR_VAR 0 8
25089: PUSH
25090: LD_INT 81
25092: PUSH
25093: LD_VAR 0 1
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 92
25104: PUSH
25105: LD_VAR 0 2
25109: PUSH
25110: LD_VAR 0 3
25114: PUSH
25115: LD_VAR 0 4
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 3
25128: PUSH
25129: LD_INT 21
25131: PUSH
25132: LD_INT 3
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 69
25152: ST_TO_ADDR
// if not tmp then
25153: LD_VAR 0 8
25157: NOT
25158: IFFALSE 25162
// exit ;
25160: GO 26722
// for i in tmp do
25162: LD_ADDR_VAR 0 6
25166: PUSH
25167: LD_VAR 0 8
25171: PUSH
25172: FOR_IN
25173: IFFALSE 26697
// begin points := [ 0 , 0 , 0 ] ;
25175: LD_ADDR_VAR 0 9
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: ST_TO_ADDR
// bpoints := 1 ;
25194: LD_ADDR_VAR 0 10
25198: PUSH
25199: LD_INT 1
25201: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25202: LD_VAR 0 6
25206: PPUSH
25207: CALL_OW 247
25211: PUSH
25212: LD_INT 1
25214: DOUBLE
25215: EQUAL
25216: IFTRUE 25220
25218: GO 25798
25220: POP
// begin if GetClass ( i ) = 1 then
25221: LD_VAR 0 6
25225: PPUSH
25226: CALL_OW 257
25230: PUSH
25231: LD_INT 1
25233: EQUAL
25234: IFFALSE 25255
// points := [ 10 , 5 , 3 ] ;
25236: LD_ADDR_VAR 0 9
25240: PUSH
25241: LD_INT 10
25243: PUSH
25244: LD_INT 5
25246: PUSH
25247: LD_INT 3
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: LIST
25254: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25255: LD_VAR 0 6
25259: PPUSH
25260: CALL_OW 257
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: LD_INT 3
25270: PUSH
25271: LD_INT 4
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: IN
25279: IFFALSE 25300
// points := [ 3 , 2 , 1 ] ;
25281: LD_ADDR_VAR 0 9
25285: PUSH
25286: LD_INT 3
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25300: LD_VAR 0 6
25304: PPUSH
25305: CALL_OW 257
25309: PUSH
25310: LD_INT 5
25312: EQUAL
25313: IFFALSE 25334
// points := [ 130 , 5 , 2 ] ;
25315: LD_ADDR_VAR 0 9
25319: PUSH
25320: LD_INT 130
25322: PUSH
25323: LD_INT 5
25325: PUSH
25326: LD_INT 2
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25334: LD_VAR 0 6
25338: PPUSH
25339: CALL_OW 257
25343: PUSH
25344: LD_INT 8
25346: EQUAL
25347: IFFALSE 25368
// points := [ 35 , 35 , 30 ] ;
25349: LD_ADDR_VAR 0 9
25353: PUSH
25354: LD_INT 35
25356: PUSH
25357: LD_INT 35
25359: PUSH
25360: LD_INT 30
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25368: LD_VAR 0 6
25372: PPUSH
25373: CALL_OW 257
25377: PUSH
25378: LD_INT 9
25380: EQUAL
25381: IFFALSE 25402
// points := [ 20 , 55 , 40 ] ;
25383: LD_ADDR_VAR 0 9
25387: PUSH
25388: LD_INT 20
25390: PUSH
25391: LD_INT 55
25393: PUSH
25394: LD_INT 40
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25402: LD_VAR 0 6
25406: PPUSH
25407: CALL_OW 257
25411: PUSH
25412: LD_INT 12
25414: PUSH
25415: LD_INT 16
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: IN
25422: IFFALSE 25443
// points := [ 5 , 3 , 2 ] ;
25424: LD_ADDR_VAR 0 9
25428: PUSH
25429: LD_INT 5
25431: PUSH
25432: LD_INT 3
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: LIST
25442: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25443: LD_VAR 0 6
25447: PPUSH
25448: CALL_OW 257
25452: PUSH
25453: LD_INT 17
25455: EQUAL
25456: IFFALSE 25477
// points := [ 100 , 50 , 75 ] ;
25458: LD_ADDR_VAR 0 9
25462: PUSH
25463: LD_INT 100
25465: PUSH
25466: LD_INT 50
25468: PUSH
25469: LD_INT 75
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: LIST
25476: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25477: LD_VAR 0 6
25481: PPUSH
25482: CALL_OW 257
25486: PUSH
25487: LD_INT 15
25489: EQUAL
25490: IFFALSE 25511
// points := [ 10 , 5 , 3 ] ;
25492: LD_ADDR_VAR 0 9
25496: PUSH
25497: LD_INT 10
25499: PUSH
25500: LD_INT 5
25502: PUSH
25503: LD_INT 3
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25511: LD_VAR 0 6
25515: PPUSH
25516: CALL_OW 257
25520: PUSH
25521: LD_INT 14
25523: EQUAL
25524: IFFALSE 25545
// points := [ 10 , 0 , 0 ] ;
25526: LD_ADDR_VAR 0 9
25530: PUSH
25531: LD_INT 10
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25545: LD_VAR 0 6
25549: PPUSH
25550: CALL_OW 257
25554: PUSH
25555: LD_INT 11
25557: EQUAL
25558: IFFALSE 25579
// points := [ 30 , 10 , 5 ] ;
25560: LD_ADDR_VAR 0 9
25564: PUSH
25565: LD_INT 30
25567: PUSH
25568: LD_INT 10
25570: PUSH
25571: LD_INT 5
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25579: LD_VAR 0 1
25583: PPUSH
25584: LD_INT 5
25586: PPUSH
25587: CALL_OW 321
25591: PUSH
25592: LD_INT 2
25594: EQUAL
25595: IFFALSE 25612
// bpoints := bpoints * 1.8 ;
25597: LD_ADDR_VAR 0 10
25601: PUSH
25602: LD_VAR 0 10
25606: PUSH
25607: LD_REAL  1.80000000000000E+0000
25610: MUL
25611: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25612: LD_VAR 0 6
25616: PPUSH
25617: CALL_OW 257
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 3
25630: PUSH
25631: LD_INT 4
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: IN
25640: PUSH
25641: LD_VAR 0 1
25645: PPUSH
25646: LD_INT 51
25648: PPUSH
25649: CALL_OW 321
25653: PUSH
25654: LD_INT 2
25656: EQUAL
25657: AND
25658: IFFALSE 25675
// bpoints := bpoints * 1.2 ;
25660: LD_ADDR_VAR 0 10
25664: PUSH
25665: LD_VAR 0 10
25669: PUSH
25670: LD_REAL  1.20000000000000E+0000
25673: MUL
25674: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25675: LD_VAR 0 6
25679: PPUSH
25680: CALL_OW 257
25684: PUSH
25685: LD_INT 5
25687: PUSH
25688: LD_INT 7
25690: PUSH
25691: LD_INT 9
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: IN
25699: PUSH
25700: LD_VAR 0 1
25704: PPUSH
25705: LD_INT 52
25707: PPUSH
25708: CALL_OW 321
25712: PUSH
25713: LD_INT 2
25715: EQUAL
25716: AND
25717: IFFALSE 25734
// bpoints := bpoints * 1.5 ;
25719: LD_ADDR_VAR 0 10
25723: PUSH
25724: LD_VAR 0 10
25728: PUSH
25729: LD_REAL  1.50000000000000E+0000
25732: MUL
25733: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25734: LD_VAR 0 1
25738: PPUSH
25739: LD_INT 66
25741: PPUSH
25742: CALL_OW 321
25746: PUSH
25747: LD_INT 2
25749: EQUAL
25750: IFFALSE 25767
// bpoints := bpoints * 1.1 ;
25752: LD_ADDR_VAR 0 10
25756: PUSH
25757: LD_VAR 0 10
25761: PUSH
25762: LD_REAL  1.10000000000000E+0000
25765: MUL
25766: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25767: LD_ADDR_VAR 0 10
25771: PUSH
25772: LD_VAR 0 10
25776: PUSH
25777: LD_VAR 0 6
25781: PPUSH
25782: LD_INT 1
25784: PPUSH
25785: CALL_OW 259
25789: PUSH
25790: LD_REAL  1.15000000000000E+0000
25793: MUL
25794: MUL
25795: ST_TO_ADDR
// end ; unit_vehicle :
25796: GO 26626
25798: LD_INT 2
25800: DOUBLE
25801: EQUAL
25802: IFTRUE 25806
25804: GO 26614
25806: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25807: LD_VAR 0 6
25811: PPUSH
25812: CALL_OW 264
25816: PUSH
25817: LD_INT 2
25819: PUSH
25820: LD_INT 42
25822: PUSH
25823: LD_INT 24
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: IN
25831: IFFALSE 25852
// points := [ 25 , 5 , 3 ] ;
25833: LD_ADDR_VAR 0 9
25837: PUSH
25838: LD_INT 25
25840: PUSH
25841: LD_INT 5
25843: PUSH
25844: LD_INT 3
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25852: LD_VAR 0 6
25856: PPUSH
25857: CALL_OW 264
25861: PUSH
25862: LD_INT 4
25864: PUSH
25865: LD_INT 43
25867: PUSH
25868: LD_INT 25
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: LIST
25875: IN
25876: IFFALSE 25897
// points := [ 40 , 15 , 5 ] ;
25878: LD_ADDR_VAR 0 9
25882: PUSH
25883: LD_INT 40
25885: PUSH
25886: LD_INT 15
25888: PUSH
25889: LD_INT 5
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
25897: LD_VAR 0 6
25901: PPUSH
25902: CALL_OW 264
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: LD_INT 23
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: IN
25917: IFFALSE 25938
// points := [ 7 , 25 , 8 ] ;
25919: LD_ADDR_VAR 0 9
25923: PUSH
25924: LD_INT 7
25926: PUSH
25927: LD_INT 25
25929: PUSH
25930: LD_INT 8
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
25938: LD_VAR 0 6
25942: PPUSH
25943: CALL_OW 264
25947: PUSH
25948: LD_INT 5
25950: PUSH
25951: LD_INT 27
25953: PUSH
25954: LD_INT 44
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: LIST
25961: IN
25962: IFFALSE 25983
// points := [ 14 , 50 , 16 ] ;
25964: LD_ADDR_VAR 0 9
25968: PUSH
25969: LD_INT 14
25971: PUSH
25972: LD_INT 50
25974: PUSH
25975: LD_INT 16
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: LIST
25982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
25983: LD_VAR 0 6
25987: PPUSH
25988: CALL_OW 264
25992: PUSH
25993: LD_INT 6
25995: PUSH
25996: LD_INT 46
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: IN
26003: IFFALSE 26024
// points := [ 32 , 120 , 70 ] ;
26005: LD_ADDR_VAR 0 9
26009: PUSH
26010: LD_INT 32
26012: PUSH
26013: LD_INT 120
26015: PUSH
26016: LD_INT 70
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: LIST
26023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26024: LD_VAR 0 6
26028: PPUSH
26029: CALL_OW 264
26033: PUSH
26034: LD_INT 7
26036: PUSH
26037: LD_INT 28
26039: PUSH
26040: LD_INT 45
26042: PUSH
26043: LD_EXP 17
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: IN
26054: IFFALSE 26075
// points := [ 35 , 20 , 45 ] ;
26056: LD_ADDR_VAR 0 9
26060: PUSH
26061: LD_INT 35
26063: PUSH
26064: LD_INT 20
26066: PUSH
26067: LD_INT 45
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: LIST
26074: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26075: LD_VAR 0 6
26079: PPUSH
26080: CALL_OW 264
26084: PUSH
26085: LD_INT 47
26087: PUSH
26088: EMPTY
26089: LIST
26090: IN
26091: IFFALSE 26112
// points := [ 67 , 45 , 75 ] ;
26093: LD_ADDR_VAR 0 9
26097: PUSH
26098: LD_INT 67
26100: PUSH
26101: LD_INT 45
26103: PUSH
26104: LD_INT 75
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26112: LD_VAR 0 6
26116: PPUSH
26117: CALL_OW 264
26121: PUSH
26122: LD_INT 26
26124: PUSH
26125: EMPTY
26126: LIST
26127: IN
26128: IFFALSE 26149
// points := [ 120 , 30 , 80 ] ;
26130: LD_ADDR_VAR 0 9
26134: PUSH
26135: LD_INT 120
26137: PUSH
26138: LD_INT 30
26140: PUSH
26141: LD_INT 80
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26149: LD_VAR 0 6
26153: PPUSH
26154: CALL_OW 264
26158: PUSH
26159: LD_INT 22
26161: PUSH
26162: EMPTY
26163: LIST
26164: IN
26165: IFFALSE 26186
// points := [ 40 , 1 , 1 ] ;
26167: LD_ADDR_VAR 0 9
26171: PUSH
26172: LD_INT 40
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26186: LD_VAR 0 6
26190: PPUSH
26191: CALL_OW 264
26195: PUSH
26196: LD_INT 29
26198: PUSH
26199: EMPTY
26200: LIST
26201: IN
26202: IFFALSE 26223
// points := [ 70 , 200 , 400 ] ;
26204: LD_ADDR_VAR 0 9
26208: PUSH
26209: LD_INT 70
26211: PUSH
26212: LD_INT 200
26214: PUSH
26215: LD_INT 400
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: LIST
26222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26223: LD_VAR 0 6
26227: PPUSH
26228: CALL_OW 264
26232: PUSH
26233: LD_INT 14
26235: PUSH
26236: LD_INT 53
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: IN
26243: IFFALSE 26264
// points := [ 40 , 10 , 20 ] ;
26245: LD_ADDR_VAR 0 9
26249: PUSH
26250: LD_INT 40
26252: PUSH
26253: LD_INT 10
26255: PUSH
26256: LD_INT 20
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26264: LD_VAR 0 6
26268: PPUSH
26269: CALL_OW 264
26273: PUSH
26274: LD_INT 9
26276: PUSH
26277: EMPTY
26278: LIST
26279: IN
26280: IFFALSE 26301
// points := [ 5 , 70 , 20 ] ;
26282: LD_ADDR_VAR 0 9
26286: PUSH
26287: LD_INT 5
26289: PUSH
26290: LD_INT 70
26292: PUSH
26293: LD_INT 20
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: LIST
26300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26301: LD_VAR 0 6
26305: PPUSH
26306: CALL_OW 264
26310: PUSH
26311: LD_INT 10
26313: PUSH
26314: EMPTY
26315: LIST
26316: IN
26317: IFFALSE 26338
// points := [ 35 , 110 , 70 ] ;
26319: LD_ADDR_VAR 0 9
26323: PUSH
26324: LD_INT 35
26326: PUSH
26327: LD_INT 110
26329: PUSH
26330: LD_INT 70
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26338: LD_VAR 0 6
26342: PPUSH
26343: CALL_OW 265
26347: PUSH
26348: LD_INT 25
26350: EQUAL
26351: IFFALSE 26372
// points := [ 80 , 65 , 100 ] ;
26353: LD_ADDR_VAR 0 9
26357: PUSH
26358: LD_INT 80
26360: PUSH
26361: LD_INT 65
26363: PUSH
26364: LD_INT 100
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: LIST
26371: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26372: LD_VAR 0 6
26376: PPUSH
26377: CALL_OW 263
26381: PUSH
26382: LD_INT 1
26384: EQUAL
26385: IFFALSE 26420
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26387: LD_ADDR_VAR 0 10
26391: PUSH
26392: LD_VAR 0 10
26396: PUSH
26397: LD_VAR 0 6
26401: PPUSH
26402: CALL_OW 311
26406: PPUSH
26407: LD_INT 3
26409: PPUSH
26410: CALL_OW 259
26414: PUSH
26415: LD_INT 4
26417: MUL
26418: MUL
26419: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26420: LD_VAR 0 6
26424: PPUSH
26425: CALL_OW 263
26429: PUSH
26430: LD_INT 2
26432: EQUAL
26433: IFFALSE 26484
// begin j := IsControledBy ( i ) ;
26435: LD_ADDR_VAR 0 7
26439: PUSH
26440: LD_VAR 0 6
26444: PPUSH
26445: CALL_OW 312
26449: ST_TO_ADDR
// if j then
26450: LD_VAR 0 7
26454: IFFALSE 26484
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26456: LD_ADDR_VAR 0 10
26460: PUSH
26461: LD_VAR 0 10
26465: PUSH
26466: LD_VAR 0 7
26470: PPUSH
26471: LD_INT 3
26473: PPUSH
26474: CALL_OW 259
26478: PUSH
26479: LD_INT 3
26481: MUL
26482: MUL
26483: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26484: LD_VAR 0 6
26488: PPUSH
26489: CALL_OW 264
26493: PUSH
26494: LD_INT 5
26496: PUSH
26497: LD_INT 6
26499: PUSH
26500: LD_INT 46
26502: PUSH
26503: LD_INT 44
26505: PUSH
26506: LD_INT 47
26508: PUSH
26509: LD_INT 45
26511: PUSH
26512: LD_INT 28
26514: PUSH
26515: LD_INT 7
26517: PUSH
26518: LD_INT 27
26520: PUSH
26521: LD_INT 29
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: IN
26536: PUSH
26537: LD_VAR 0 1
26541: PPUSH
26542: LD_INT 52
26544: PPUSH
26545: CALL_OW 321
26549: PUSH
26550: LD_INT 2
26552: EQUAL
26553: AND
26554: IFFALSE 26571
// bpoints := bpoints * 1.2 ;
26556: LD_ADDR_VAR 0 10
26560: PUSH
26561: LD_VAR 0 10
26565: PUSH
26566: LD_REAL  1.20000000000000E+0000
26569: MUL
26570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26571: LD_VAR 0 6
26575: PPUSH
26576: CALL_OW 264
26580: PUSH
26581: LD_INT 6
26583: PUSH
26584: LD_INT 46
26586: PUSH
26587: LD_INT 47
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: IN
26595: IFFALSE 26612
// bpoints := bpoints * 1.2 ;
26597: LD_ADDR_VAR 0 10
26601: PUSH
26602: LD_VAR 0 10
26606: PUSH
26607: LD_REAL  1.20000000000000E+0000
26610: MUL
26611: ST_TO_ADDR
// end ; unit_building :
26612: GO 26626
26614: LD_INT 3
26616: DOUBLE
26617: EQUAL
26618: IFTRUE 26622
26620: GO 26625
26622: POP
// ; end ;
26623: GO 26626
26625: POP
// for j = 1 to 3 do
26626: LD_ADDR_VAR 0 7
26630: PUSH
26631: DOUBLE
26632: LD_INT 1
26634: DEC
26635: ST_TO_ADDR
26636: LD_INT 3
26638: PUSH
26639: FOR_TO
26640: IFFALSE 26693
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26642: LD_ADDR_VAR 0 5
26646: PUSH
26647: LD_VAR 0 5
26651: PPUSH
26652: LD_VAR 0 7
26656: PPUSH
26657: LD_VAR 0 5
26661: PUSH
26662: LD_VAR 0 7
26666: ARRAY
26667: PUSH
26668: LD_VAR 0 9
26672: PUSH
26673: LD_VAR 0 7
26677: ARRAY
26678: PUSH
26679: LD_VAR 0 10
26683: MUL
26684: PLUS
26685: PPUSH
26686: CALL_OW 1
26690: ST_TO_ADDR
26691: GO 26639
26693: POP
26694: POP
// end ;
26695: GO 25172
26697: POP
26698: POP
// result := Replace ( result , 4 , tmp ) ;
26699: LD_ADDR_VAR 0 5
26703: PUSH
26704: LD_VAR 0 5
26708: PPUSH
26709: LD_INT 4
26711: PPUSH
26712: LD_VAR 0 8
26716: PPUSH
26717: CALL_OW 1
26721: ST_TO_ADDR
// end ;
26722: LD_VAR 0 5
26726: RET
// export function DangerAtRange ( unit , range ) ; begin
26727: LD_INT 0
26729: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26730: LD_ADDR_VAR 0 3
26734: PUSH
26735: LD_VAR 0 1
26739: PPUSH
26740: CALL_OW 255
26744: PPUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 250
26754: PPUSH
26755: LD_VAR 0 1
26759: PPUSH
26760: CALL_OW 251
26764: PPUSH
26765: LD_VAR 0 2
26769: PPUSH
26770: CALL 25024 0 4
26774: ST_TO_ADDR
// end ;
26775: LD_VAR 0 3
26779: RET
// export function DangerInArea ( side , area ) ; begin
26780: LD_INT 0
26782: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26783: LD_ADDR_VAR 0 3
26787: PUSH
26788: LD_VAR 0 2
26792: PPUSH
26793: LD_INT 81
26795: PUSH
26796: LD_VAR 0 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PPUSH
26805: CALL_OW 70
26809: ST_TO_ADDR
// end ;
26810: LD_VAR 0 3
26814: RET
// export function IsExtension ( b ) ; begin
26815: LD_INT 0
26817: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26818: LD_ADDR_VAR 0 2
26822: PUSH
26823: LD_VAR 0 1
26827: PUSH
26828: LD_INT 23
26830: PUSH
26831: LD_INT 20
26833: PUSH
26834: LD_INT 22
26836: PUSH
26837: LD_INT 17
26839: PUSH
26840: LD_INT 24
26842: PUSH
26843: LD_INT 21
26845: PUSH
26846: LD_INT 19
26848: PUSH
26849: LD_INT 16
26851: PUSH
26852: LD_INT 25
26854: PUSH
26855: LD_INT 18
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: IN
26870: ST_TO_ADDR
// end ;
26871: LD_VAR 0 2
26875: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
26876: LD_INT 0
26878: PPUSH
26879: PPUSH
26880: PPUSH
// result := [ ] ;
26881: LD_ADDR_VAR 0 4
26885: PUSH
26886: EMPTY
26887: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
26888: LD_ADDR_VAR 0 5
26892: PUSH
26893: LD_VAR 0 2
26897: PPUSH
26898: LD_INT 21
26900: PUSH
26901: LD_INT 3
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PPUSH
26908: CALL_OW 70
26912: ST_TO_ADDR
// if not tmp then
26913: LD_VAR 0 5
26917: NOT
26918: IFFALSE 26922
// exit ;
26920: GO 26986
// if checkLink then
26922: LD_VAR 0 3
26926: IFFALSE 26976
// begin for i in tmp do
26928: LD_ADDR_VAR 0 6
26932: PUSH
26933: LD_VAR 0 5
26937: PUSH
26938: FOR_IN
26939: IFFALSE 26974
// if GetBase ( i ) <> base then
26941: LD_VAR 0 6
26945: PPUSH
26946: CALL_OW 274
26950: PUSH
26951: LD_VAR 0 1
26955: NONEQUAL
26956: IFFALSE 26972
// ComLinkToBase ( base , i ) ;
26958: LD_VAR 0 1
26962: PPUSH
26963: LD_VAR 0 6
26967: PPUSH
26968: CALL_OW 169
26972: GO 26938
26974: POP
26975: POP
// end ; result := tmp ;
26976: LD_ADDR_VAR 0 4
26980: PUSH
26981: LD_VAR 0 5
26985: ST_TO_ADDR
// end ;
26986: LD_VAR 0 4
26990: RET
// export function ComComplete ( units , b ) ; var i ; begin
26991: LD_INT 0
26993: PPUSH
26994: PPUSH
// if not units then
26995: LD_VAR 0 1
26999: NOT
27000: IFFALSE 27004
// exit ;
27002: GO 27094
// for i in units do
27004: LD_ADDR_VAR 0 4
27008: PUSH
27009: LD_VAR 0 1
27013: PUSH
27014: FOR_IN
27015: IFFALSE 27092
// if BuildingStatus ( b ) = bs_build then
27017: LD_VAR 0 2
27021: PPUSH
27022: CALL_OW 461
27026: PUSH
27027: LD_INT 1
27029: EQUAL
27030: IFFALSE 27090
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27032: LD_VAR 0 4
27036: PPUSH
27037: LD_STRING h
27039: PUSH
27040: LD_VAR 0 2
27044: PPUSH
27045: CALL_OW 250
27049: PUSH
27050: LD_VAR 0 2
27054: PPUSH
27055: CALL_OW 251
27059: PUSH
27060: LD_VAR 0 2
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: PPUSH
27086: CALL_OW 446
27090: GO 27014
27092: POP
27093: POP
// end ;
27094: LD_VAR 0 3
27098: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27099: LD_INT 0
27101: PPUSH
27102: PPUSH
27103: PPUSH
27104: PPUSH
27105: PPUSH
27106: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27107: LD_VAR 0 1
27111: NOT
27112: PUSH
27113: LD_VAR 0 1
27117: PPUSH
27118: CALL_OW 263
27122: PUSH
27123: LD_INT 2
27125: NONEQUAL
27126: OR
27127: IFFALSE 27131
// exit ;
27129: GO 27447
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27131: LD_ADDR_VAR 0 6
27135: PUSH
27136: LD_INT 22
27138: PUSH
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL_OW 255
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 30
27158: PUSH
27159: LD_INT 36
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 34
27168: PUSH
27169: LD_INT 31
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PPUSH
27185: CALL_OW 69
27189: ST_TO_ADDR
// if not tmp then
27190: LD_VAR 0 6
27194: NOT
27195: IFFALSE 27199
// exit ;
27197: GO 27447
// result := [ ] ;
27199: LD_ADDR_VAR 0 2
27203: PUSH
27204: EMPTY
27205: ST_TO_ADDR
// for i in tmp do
27206: LD_ADDR_VAR 0 3
27210: PUSH
27211: LD_VAR 0 6
27215: PUSH
27216: FOR_IN
27217: IFFALSE 27288
// begin t := UnitsInside ( i ) ;
27219: LD_ADDR_VAR 0 4
27223: PUSH
27224: LD_VAR 0 3
27228: PPUSH
27229: CALL_OW 313
27233: ST_TO_ADDR
// if t then
27234: LD_VAR 0 4
27238: IFFALSE 27286
// for j in t do
27240: LD_ADDR_VAR 0 7
27244: PUSH
27245: LD_VAR 0 4
27249: PUSH
27250: FOR_IN
27251: IFFALSE 27284
// result := Replace ( result , result + 1 , j ) ;
27253: LD_ADDR_VAR 0 2
27257: PUSH
27258: LD_VAR 0 2
27262: PPUSH
27263: LD_VAR 0 2
27267: PUSH
27268: LD_INT 1
27270: PLUS
27271: PPUSH
27272: LD_VAR 0 7
27276: PPUSH
27277: CALL_OW 1
27281: ST_TO_ADDR
27282: GO 27250
27284: POP
27285: POP
// end ;
27286: GO 27216
27288: POP
27289: POP
// if not result then
27290: LD_VAR 0 2
27294: NOT
27295: IFFALSE 27299
// exit ;
27297: GO 27447
// mech := result [ 1 ] ;
27299: LD_ADDR_VAR 0 5
27303: PUSH
27304: LD_VAR 0 2
27308: PUSH
27309: LD_INT 1
27311: ARRAY
27312: ST_TO_ADDR
// if result > 1 then
27313: LD_VAR 0 2
27317: PUSH
27318: LD_INT 1
27320: GREATER
27321: IFFALSE 27433
// begin for i = 2 to result do
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: DOUBLE
27329: LD_INT 2
27331: DEC
27332: ST_TO_ADDR
27333: LD_VAR 0 2
27337: PUSH
27338: FOR_TO
27339: IFFALSE 27431
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27341: LD_ADDR_VAR 0 4
27345: PUSH
27346: LD_VAR 0 2
27350: PUSH
27351: LD_VAR 0 3
27355: ARRAY
27356: PPUSH
27357: LD_INT 3
27359: PPUSH
27360: CALL_OW 259
27364: PUSH
27365: LD_VAR 0 2
27369: PUSH
27370: LD_VAR 0 3
27374: ARRAY
27375: PPUSH
27376: CALL_OW 432
27380: MINUS
27381: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27382: LD_VAR 0 4
27386: PUSH
27387: LD_VAR 0 5
27391: PPUSH
27392: LD_INT 3
27394: PPUSH
27395: CALL_OW 259
27399: PUSH
27400: LD_VAR 0 5
27404: PPUSH
27405: CALL_OW 432
27409: MINUS
27410: GREATEREQUAL
27411: IFFALSE 27429
// mech := result [ i ] ;
27413: LD_ADDR_VAR 0 5
27417: PUSH
27418: LD_VAR 0 2
27422: PUSH
27423: LD_VAR 0 3
27427: ARRAY
27428: ST_TO_ADDR
// end ;
27429: GO 27338
27431: POP
27432: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27433: LD_VAR 0 1
27437: PPUSH
27438: LD_VAR 0 5
27442: PPUSH
27443: CALL_OW 135
// end ;
27447: LD_VAR 0 2
27451: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27452: LD_INT 0
27454: PPUSH
27455: PPUSH
27456: PPUSH
27457: PPUSH
27458: PPUSH
27459: PPUSH
27460: PPUSH
27461: PPUSH
27462: PPUSH
27463: PPUSH
27464: PPUSH
27465: PPUSH
27466: PPUSH
// result := [ ] ;
27467: LD_ADDR_VAR 0 7
27471: PUSH
27472: EMPTY
27473: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 266
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: IN
27494: NOT
27495: IFFALSE 27499
// exit ;
27497: GO 29133
// if name then
27499: LD_VAR 0 3
27503: IFFALSE 27519
// SetBName ( base_dep , name ) ;
27505: LD_VAR 0 1
27509: PPUSH
27510: LD_VAR 0 3
27514: PPUSH
27515: CALL_OW 500
// base := GetBase ( base_dep ) ;
27519: LD_ADDR_VAR 0 15
27523: PUSH
27524: LD_VAR 0 1
27528: PPUSH
27529: CALL_OW 274
27533: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27534: LD_ADDR_VAR 0 16
27538: PUSH
27539: LD_VAR 0 1
27543: PPUSH
27544: CALL_OW 255
27548: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27549: LD_ADDR_VAR 0 17
27553: PUSH
27554: LD_VAR 0 1
27558: PPUSH
27559: CALL_OW 248
27563: ST_TO_ADDR
// if sources then
27564: LD_VAR 0 5
27568: IFFALSE 27615
// for i = 1 to 3 do
27570: LD_ADDR_VAR 0 8
27574: PUSH
27575: DOUBLE
27576: LD_INT 1
27578: DEC
27579: ST_TO_ADDR
27580: LD_INT 3
27582: PUSH
27583: FOR_TO
27584: IFFALSE 27613
// AddResourceType ( base , i , sources [ i ] ) ;
27586: LD_VAR 0 15
27590: PPUSH
27591: LD_VAR 0 8
27595: PPUSH
27596: LD_VAR 0 5
27600: PUSH
27601: LD_VAR 0 8
27605: ARRAY
27606: PPUSH
27607: CALL_OW 276
27611: GO 27583
27613: POP
27614: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27615: LD_ADDR_VAR 0 18
27619: PUSH
27620: LD_VAR 0 15
27624: PPUSH
27625: LD_VAR 0 2
27629: PPUSH
27630: LD_INT 1
27632: PPUSH
27633: CALL 26876 0 3
27637: ST_TO_ADDR
// InitHc ;
27638: CALL_OW 19
// InitUc ;
27642: CALL_OW 18
// uc_side := side ;
27646: LD_ADDR_OWVAR 20
27650: PUSH
27651: LD_VAR 0 16
27655: ST_TO_ADDR
// uc_nation := nation ;
27656: LD_ADDR_OWVAR 21
27660: PUSH
27661: LD_VAR 0 17
27665: ST_TO_ADDR
// if buildings then
27666: LD_VAR 0 18
27670: IFFALSE 28992
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27672: LD_ADDR_VAR 0 19
27676: PUSH
27677: LD_VAR 0 18
27681: PPUSH
27682: LD_INT 2
27684: PUSH
27685: LD_INT 30
27687: PUSH
27688: LD_INT 29
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 30
27697: PUSH
27698: LD_INT 30
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: PPUSH
27710: CALL_OW 72
27714: ST_TO_ADDR
// if tmp then
27715: LD_VAR 0 19
27719: IFFALSE 27767
// for i in tmp do
27721: LD_ADDR_VAR 0 8
27725: PUSH
27726: LD_VAR 0 19
27730: PUSH
27731: FOR_IN
27732: IFFALSE 27765
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27734: LD_VAR 0 8
27738: PPUSH
27739: CALL_OW 250
27743: PPUSH
27744: LD_VAR 0 8
27748: PPUSH
27749: CALL_OW 251
27753: PPUSH
27754: LD_VAR 0 16
27758: PPUSH
27759: CALL_OW 441
27763: GO 27731
27765: POP
27766: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27767: LD_VAR 0 18
27771: PPUSH
27772: LD_INT 2
27774: PUSH
27775: LD_INT 30
27777: PUSH
27778: LD_INT 32
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 30
27787: PUSH
27788: LD_INT 33
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: LIST
27799: PPUSH
27800: CALL_OW 72
27804: IFFALSE 27892
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27806: LD_ADDR_VAR 0 8
27810: PUSH
27811: LD_VAR 0 18
27815: PPUSH
27816: LD_INT 2
27818: PUSH
27819: LD_INT 30
27821: PUSH
27822: LD_INT 32
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 30
27831: PUSH
27832: LD_INT 33
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: LIST
27843: PPUSH
27844: CALL_OW 72
27848: PUSH
27849: FOR_IN
27850: IFFALSE 27890
// begin if not GetBWeapon ( i ) then
27852: LD_VAR 0 8
27856: PPUSH
27857: CALL_OW 269
27861: NOT
27862: IFFALSE 27888
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27864: LD_VAR 0 8
27868: PPUSH
27869: LD_VAR 0 8
27873: PPUSH
27874: LD_VAR 0 2
27878: PPUSH
27879: CALL 29138 0 2
27883: PPUSH
27884: CALL_OW 431
// end ;
27888: GO 27849
27890: POP
27891: POP
// end ; for i = 1 to personel do
27892: LD_ADDR_VAR 0 8
27896: PUSH
27897: DOUBLE
27898: LD_INT 1
27900: DEC
27901: ST_TO_ADDR
27902: LD_VAR 0 6
27906: PUSH
27907: FOR_TO
27908: IFFALSE 28972
// begin if i > 4 then
27910: LD_VAR 0 8
27914: PUSH
27915: LD_INT 4
27917: GREATER
27918: IFFALSE 27922
// break ;
27920: GO 28972
// case i of 1 :
27922: LD_VAR 0 8
27926: PUSH
27927: LD_INT 1
27929: DOUBLE
27930: EQUAL
27931: IFTRUE 27935
27933: GO 28015
27935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
27936: LD_ADDR_VAR 0 12
27940: PUSH
27941: LD_VAR 0 18
27945: PPUSH
27946: LD_INT 22
27948: PUSH
27949: LD_VAR 0 16
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 58
27960: PUSH
27961: EMPTY
27962: LIST
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: LD_INT 30
27969: PUSH
27970: LD_INT 32
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 30
27979: PUSH
27980: LD_INT 4
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 30
27989: PUSH
27990: LD_INT 5
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: PPUSH
28008: CALL_OW 72
28012: ST_TO_ADDR
28013: GO 28237
28015: LD_INT 2
28017: DOUBLE
28018: EQUAL
28019: IFTRUE 28023
28021: GO 28085
28023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28024: LD_ADDR_VAR 0 12
28028: PUSH
28029: LD_VAR 0 18
28033: PPUSH
28034: LD_INT 22
28036: PUSH
28037: LD_VAR 0 16
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: LD_INT 30
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 30
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PPUSH
28078: CALL_OW 72
28082: ST_TO_ADDR
28083: GO 28237
28085: LD_INT 3
28087: DOUBLE
28088: EQUAL
28089: IFTRUE 28093
28091: GO 28155
28093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28094: LD_ADDR_VAR 0 12
28098: PUSH
28099: LD_VAR 0 18
28103: PPUSH
28104: LD_INT 22
28106: PUSH
28107: LD_VAR 0 16
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: LD_INT 30
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 30
28131: PUSH
28132: LD_INT 3
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PPUSH
28148: CALL_OW 72
28152: ST_TO_ADDR
28153: GO 28237
28155: LD_INT 4
28157: DOUBLE
28158: EQUAL
28159: IFTRUE 28163
28161: GO 28236
28163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28164: LD_ADDR_VAR 0 12
28168: PUSH
28169: LD_VAR 0 18
28173: PPUSH
28174: LD_INT 22
28176: PUSH
28177: LD_VAR 0 16
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: LD_INT 30
28191: PUSH
28192: LD_INT 6
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 30
28201: PUSH
28202: LD_INT 7
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 30
28211: PUSH
28212: LD_INT 8
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PPUSH
28229: CALL_OW 72
28233: ST_TO_ADDR
28234: GO 28237
28236: POP
// if i = 1 then
28237: LD_VAR 0 8
28241: PUSH
28242: LD_INT 1
28244: EQUAL
28245: IFFALSE 28356
// begin tmp := [ ] ;
28247: LD_ADDR_VAR 0 19
28251: PUSH
28252: EMPTY
28253: ST_TO_ADDR
// for j in f do
28254: LD_ADDR_VAR 0 9
28258: PUSH
28259: LD_VAR 0 12
28263: PUSH
28264: FOR_IN
28265: IFFALSE 28338
// if GetBType ( j ) = b_bunker then
28267: LD_VAR 0 9
28271: PPUSH
28272: CALL_OW 266
28276: PUSH
28277: LD_INT 32
28279: EQUAL
28280: IFFALSE 28307
// tmp := Insert ( tmp , 1 , j ) else
28282: LD_ADDR_VAR 0 19
28286: PUSH
28287: LD_VAR 0 19
28291: PPUSH
28292: LD_INT 1
28294: PPUSH
28295: LD_VAR 0 9
28299: PPUSH
28300: CALL_OW 2
28304: ST_TO_ADDR
28305: GO 28336
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28307: LD_ADDR_VAR 0 19
28311: PUSH
28312: LD_VAR 0 19
28316: PPUSH
28317: LD_VAR 0 19
28321: PUSH
28322: LD_INT 1
28324: PLUS
28325: PPUSH
28326: LD_VAR 0 9
28330: PPUSH
28331: CALL_OW 2
28335: ST_TO_ADDR
28336: GO 28264
28338: POP
28339: POP
// if tmp then
28340: LD_VAR 0 19
28344: IFFALSE 28356
// f := tmp ;
28346: LD_ADDR_VAR 0 12
28350: PUSH
28351: LD_VAR 0 19
28355: ST_TO_ADDR
// end ; x := personel [ i ] ;
28356: LD_ADDR_VAR 0 13
28360: PUSH
28361: LD_VAR 0 6
28365: PUSH
28366: LD_VAR 0 8
28370: ARRAY
28371: ST_TO_ADDR
// if x = - 1 then
28372: LD_VAR 0 13
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: EQUAL
28381: IFFALSE 28590
// begin for j in f do
28383: LD_ADDR_VAR 0 9
28387: PUSH
28388: LD_VAR 0 12
28392: PUSH
28393: FOR_IN
28394: IFFALSE 28586
// repeat InitHc ;
28396: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28400: LD_VAR 0 9
28404: PPUSH
28405: CALL_OW 266
28409: PUSH
28410: LD_INT 5
28412: EQUAL
28413: IFFALSE 28483
// begin if UnitsInside ( j ) < 3 then
28415: LD_VAR 0 9
28419: PPUSH
28420: CALL_OW 313
28424: PUSH
28425: LD_INT 3
28427: LESS
28428: IFFALSE 28464
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28430: LD_INT 0
28432: PPUSH
28433: LD_INT 5
28435: PUSH
28436: LD_INT 8
28438: PUSH
28439: LD_INT 9
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: LIST
28446: PUSH
28447: LD_VAR 0 17
28451: ARRAY
28452: PPUSH
28453: LD_VAR 0 4
28457: PPUSH
28458: CALL_OW 380
28462: GO 28481
// PrepareHuman ( false , i , skill ) ;
28464: LD_INT 0
28466: PPUSH
28467: LD_VAR 0 8
28471: PPUSH
28472: LD_VAR 0 4
28476: PPUSH
28477: CALL_OW 380
// end else
28481: GO 28500
// PrepareHuman ( false , i , skill ) ;
28483: LD_INT 0
28485: PPUSH
28486: LD_VAR 0 8
28490: PPUSH
28491: LD_VAR 0 4
28495: PPUSH
28496: CALL_OW 380
// un := CreateHuman ;
28500: LD_ADDR_VAR 0 14
28504: PUSH
28505: CALL_OW 44
28509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28510: LD_ADDR_VAR 0 7
28514: PUSH
28515: LD_VAR 0 7
28519: PPUSH
28520: LD_INT 1
28522: PPUSH
28523: LD_VAR 0 14
28527: PPUSH
28528: CALL_OW 2
28532: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28533: LD_VAR 0 14
28537: PPUSH
28538: LD_VAR 0 9
28542: PPUSH
28543: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28547: LD_VAR 0 9
28551: PPUSH
28552: CALL_OW 313
28556: PUSH
28557: LD_INT 6
28559: EQUAL
28560: PUSH
28561: LD_VAR 0 9
28565: PPUSH
28566: CALL_OW 266
28570: PUSH
28571: LD_INT 32
28573: PUSH
28574: LD_INT 31
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: IN
28581: OR
28582: IFFALSE 28396
28584: GO 28393
28586: POP
28587: POP
// end else
28588: GO 28970
// for j = 1 to x do
28590: LD_ADDR_VAR 0 9
28594: PUSH
28595: DOUBLE
28596: LD_INT 1
28598: DEC
28599: ST_TO_ADDR
28600: LD_VAR 0 13
28604: PUSH
28605: FOR_TO
28606: IFFALSE 28968
// begin InitHc ;
28608: CALL_OW 19
// if not f then
28612: LD_VAR 0 12
28616: NOT
28617: IFFALSE 28706
// begin PrepareHuman ( false , i , skill ) ;
28619: LD_INT 0
28621: PPUSH
28622: LD_VAR 0 8
28626: PPUSH
28627: LD_VAR 0 4
28631: PPUSH
28632: CALL_OW 380
// un := CreateHuman ;
28636: LD_ADDR_VAR 0 14
28640: PUSH
28641: CALL_OW 44
28645: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28646: LD_ADDR_VAR 0 7
28650: PUSH
28651: LD_VAR 0 7
28655: PPUSH
28656: LD_INT 1
28658: PPUSH
28659: LD_VAR 0 14
28663: PPUSH
28664: CALL_OW 2
28668: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28669: LD_VAR 0 14
28673: PPUSH
28674: LD_VAR 0 1
28678: PPUSH
28679: CALL_OW 250
28683: PPUSH
28684: LD_VAR 0 1
28688: PPUSH
28689: CALL_OW 251
28693: PPUSH
28694: LD_INT 10
28696: PPUSH
28697: LD_INT 0
28699: PPUSH
28700: CALL_OW 50
// continue ;
28704: GO 28605
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28706: LD_VAR 0 12
28710: PUSH
28711: LD_INT 1
28713: ARRAY
28714: PPUSH
28715: CALL_OW 313
28719: PUSH
28720: LD_VAR 0 12
28724: PUSH
28725: LD_INT 1
28727: ARRAY
28728: PPUSH
28729: CALL_OW 266
28733: PUSH
28734: LD_INT 32
28736: PUSH
28737: LD_INT 31
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: IN
28744: AND
28745: PUSH
28746: LD_VAR 0 12
28750: PUSH
28751: LD_INT 1
28753: ARRAY
28754: PPUSH
28755: CALL_OW 313
28759: PUSH
28760: LD_INT 6
28762: EQUAL
28763: OR
28764: IFFALSE 28784
// f := Delete ( f , 1 ) ;
28766: LD_ADDR_VAR 0 12
28770: PUSH
28771: LD_VAR 0 12
28775: PPUSH
28776: LD_INT 1
28778: PPUSH
28779: CALL_OW 3
28783: ST_TO_ADDR
// if not f then
28784: LD_VAR 0 12
28788: NOT
28789: IFFALSE 28807
// begin x := x + 2 ;
28791: LD_ADDR_VAR 0 13
28795: PUSH
28796: LD_VAR 0 13
28800: PUSH
28801: LD_INT 2
28803: PLUS
28804: ST_TO_ADDR
// continue ;
28805: GO 28605
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28807: LD_VAR 0 12
28811: PUSH
28812: LD_INT 1
28814: ARRAY
28815: PPUSH
28816: CALL_OW 266
28820: PUSH
28821: LD_INT 5
28823: EQUAL
28824: IFFALSE 28898
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28826: LD_VAR 0 12
28830: PUSH
28831: LD_INT 1
28833: ARRAY
28834: PPUSH
28835: CALL_OW 313
28839: PUSH
28840: LD_INT 3
28842: LESS
28843: IFFALSE 28879
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28845: LD_INT 0
28847: PPUSH
28848: LD_INT 5
28850: PUSH
28851: LD_INT 8
28853: PUSH
28854: LD_INT 9
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: LIST
28861: PUSH
28862: LD_VAR 0 17
28866: ARRAY
28867: PPUSH
28868: LD_VAR 0 4
28872: PPUSH
28873: CALL_OW 380
28877: GO 28896
// PrepareHuman ( false , i , skill ) ;
28879: LD_INT 0
28881: PPUSH
28882: LD_VAR 0 8
28886: PPUSH
28887: LD_VAR 0 4
28891: PPUSH
28892: CALL_OW 380
// end else
28896: GO 28915
// PrepareHuman ( false , i , skill ) ;
28898: LD_INT 0
28900: PPUSH
28901: LD_VAR 0 8
28905: PPUSH
28906: LD_VAR 0 4
28910: PPUSH
28911: CALL_OW 380
// un := CreateHuman ;
28915: LD_ADDR_VAR 0 14
28919: PUSH
28920: CALL_OW 44
28924: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28925: LD_ADDR_VAR 0 7
28929: PUSH
28930: LD_VAR 0 7
28934: PPUSH
28935: LD_INT 1
28937: PPUSH
28938: LD_VAR 0 14
28942: PPUSH
28943: CALL_OW 2
28947: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28948: LD_VAR 0 14
28952: PPUSH
28953: LD_VAR 0 12
28957: PUSH
28958: LD_INT 1
28960: ARRAY
28961: PPUSH
28962: CALL_OW 52
// end ;
28966: GO 28605
28968: POP
28969: POP
// end ;
28970: GO 27907
28972: POP
28973: POP
// result := result ^ buildings ;
28974: LD_ADDR_VAR 0 7
28978: PUSH
28979: LD_VAR 0 7
28983: PUSH
28984: LD_VAR 0 18
28988: ADD
28989: ST_TO_ADDR
// end else
28990: GO 29133
// begin for i = 1 to personel do
28992: LD_ADDR_VAR 0 8
28996: PUSH
28997: DOUBLE
28998: LD_INT 1
29000: DEC
29001: ST_TO_ADDR
29002: LD_VAR 0 6
29006: PUSH
29007: FOR_TO
29008: IFFALSE 29131
// begin if i > 4 then
29010: LD_VAR 0 8
29014: PUSH
29015: LD_INT 4
29017: GREATER
29018: IFFALSE 29022
// break ;
29020: GO 29131
// x := personel [ i ] ;
29022: LD_ADDR_VAR 0 13
29026: PUSH
29027: LD_VAR 0 6
29031: PUSH
29032: LD_VAR 0 8
29036: ARRAY
29037: ST_TO_ADDR
// if x = - 1 then
29038: LD_VAR 0 13
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: EQUAL
29047: IFFALSE 29051
// continue ;
29049: GO 29007
// PrepareHuman ( false , i , skill ) ;
29051: LD_INT 0
29053: PPUSH
29054: LD_VAR 0 8
29058: PPUSH
29059: LD_VAR 0 4
29063: PPUSH
29064: CALL_OW 380
// un := CreateHuman ;
29068: LD_ADDR_VAR 0 14
29072: PUSH
29073: CALL_OW 44
29077: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29078: LD_VAR 0 14
29082: PPUSH
29083: LD_VAR 0 1
29087: PPUSH
29088: CALL_OW 250
29092: PPUSH
29093: LD_VAR 0 1
29097: PPUSH
29098: CALL_OW 251
29102: PPUSH
29103: LD_INT 10
29105: PPUSH
29106: LD_INT 0
29108: PPUSH
29109: CALL_OW 50
// result := result ^ un ;
29113: LD_ADDR_VAR 0 7
29117: PUSH
29118: LD_VAR 0 7
29122: PUSH
29123: LD_VAR 0 14
29127: ADD
29128: ST_TO_ADDR
// end ;
29129: GO 29007
29131: POP
29132: POP
// end ; end ;
29133: LD_VAR 0 7
29137: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29138: LD_INT 0
29140: PPUSH
29141: PPUSH
29142: PPUSH
29143: PPUSH
29144: PPUSH
29145: PPUSH
29146: PPUSH
29147: PPUSH
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
29152: PPUSH
29153: PPUSH
29154: PPUSH
29155: PPUSH
// result := false ;
29156: LD_ADDR_VAR 0 3
29160: PUSH
29161: LD_INT 0
29163: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29164: LD_VAR 0 1
29168: NOT
29169: PUSH
29170: LD_VAR 0 1
29174: PPUSH
29175: CALL_OW 266
29179: PUSH
29180: LD_INT 32
29182: PUSH
29183: LD_INT 33
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: IN
29190: NOT
29191: OR
29192: IFFALSE 29196
// exit ;
29194: GO 30305
// nat := GetNation ( tower ) ;
29196: LD_ADDR_VAR 0 12
29200: PUSH
29201: LD_VAR 0 1
29205: PPUSH
29206: CALL_OW 248
29210: ST_TO_ADDR
// side := GetSide ( tower ) ;
29211: LD_ADDR_VAR 0 16
29215: PUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 255
29225: ST_TO_ADDR
// x := GetX ( tower ) ;
29226: LD_ADDR_VAR 0 10
29230: PUSH
29231: LD_VAR 0 1
29235: PPUSH
29236: CALL_OW 250
29240: ST_TO_ADDR
// y := GetY ( tower ) ;
29241: LD_ADDR_VAR 0 11
29245: PUSH
29246: LD_VAR 0 1
29250: PPUSH
29251: CALL_OW 251
29255: ST_TO_ADDR
// if not x or not y then
29256: LD_VAR 0 10
29260: NOT
29261: PUSH
29262: LD_VAR 0 11
29266: NOT
29267: OR
29268: IFFALSE 29272
// exit ;
29270: GO 30305
// weapon := 0 ;
29272: LD_ADDR_VAR 0 18
29276: PUSH
29277: LD_INT 0
29279: ST_TO_ADDR
// fac_list := [ ] ;
29280: LD_ADDR_VAR 0 17
29284: PUSH
29285: EMPTY
29286: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29287: LD_ADDR_VAR 0 6
29291: PUSH
29292: LD_VAR 0 1
29296: PPUSH
29297: CALL_OW 274
29301: PPUSH
29302: LD_VAR 0 2
29306: PPUSH
29307: LD_INT 0
29309: PPUSH
29310: CALL 26876 0 3
29314: PPUSH
29315: LD_INT 30
29317: PUSH
29318: LD_INT 3
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PPUSH
29325: CALL_OW 72
29329: ST_TO_ADDR
// if not factories then
29330: LD_VAR 0 6
29334: NOT
29335: IFFALSE 29339
// exit ;
29337: GO 30305
// for i in factories do
29339: LD_ADDR_VAR 0 8
29343: PUSH
29344: LD_VAR 0 6
29348: PUSH
29349: FOR_IN
29350: IFFALSE 29375
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29352: LD_ADDR_VAR 0 17
29356: PUSH
29357: LD_VAR 0 17
29361: PUSH
29362: LD_VAR 0 8
29366: PPUSH
29367: CALL_OW 478
29371: UNION
29372: ST_TO_ADDR
29373: GO 29349
29375: POP
29376: POP
// if not fac_list then
29377: LD_VAR 0 17
29381: NOT
29382: IFFALSE 29386
// exit ;
29384: GO 30305
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29386: LD_ADDR_VAR 0 5
29390: PUSH
29391: LD_INT 4
29393: PUSH
29394: LD_INT 5
29396: PUSH
29397: LD_INT 9
29399: PUSH
29400: LD_INT 10
29402: PUSH
29403: LD_INT 6
29405: PUSH
29406: LD_INT 7
29408: PUSH
29409: LD_INT 11
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 27
29423: PUSH
29424: LD_INT 28
29426: PUSH
29427: LD_INT 26
29429: PUSH
29430: LD_INT 30
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 43
29441: PUSH
29442: LD_INT 44
29444: PUSH
29445: LD_INT 46
29447: PUSH
29448: LD_INT 45
29450: PUSH
29451: LD_INT 47
29453: PUSH
29454: LD_INT 49
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: PUSH
29470: LD_VAR 0 12
29474: ARRAY
29475: ST_TO_ADDR
// list := list isect fac_list ;
29476: LD_ADDR_VAR 0 5
29480: PUSH
29481: LD_VAR 0 5
29485: PUSH
29486: LD_VAR 0 17
29490: ISECT
29491: ST_TO_ADDR
// if not list then
29492: LD_VAR 0 5
29496: NOT
29497: IFFALSE 29501
// exit ;
29499: GO 30305
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29501: LD_VAR 0 12
29505: PUSH
29506: LD_INT 3
29508: EQUAL
29509: PUSH
29510: LD_INT 49
29512: PUSH
29513: LD_VAR 0 5
29517: IN
29518: AND
29519: PUSH
29520: LD_INT 31
29522: PPUSH
29523: LD_VAR 0 16
29527: PPUSH
29528: CALL_OW 321
29532: PUSH
29533: LD_INT 2
29535: EQUAL
29536: AND
29537: IFFALSE 29597
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29539: LD_INT 22
29541: PUSH
29542: LD_VAR 0 16
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 35
29553: PUSH
29554: LD_INT 49
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 91
29563: PUSH
29564: LD_VAR 0 1
29568: PUSH
29569: LD_INT 10
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: PPUSH
29582: CALL_OW 69
29586: NOT
29587: IFFALSE 29597
// weapon := ru_time_lapser ;
29589: LD_ADDR_VAR 0 18
29593: PUSH
29594: LD_INT 49
29596: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29597: LD_VAR 0 12
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: LD_INT 2
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: IN
29612: PUSH
29613: LD_INT 11
29615: PUSH
29616: LD_VAR 0 5
29620: IN
29621: PUSH
29622: LD_INT 30
29624: PUSH
29625: LD_VAR 0 5
29629: IN
29630: OR
29631: AND
29632: PUSH
29633: LD_INT 6
29635: PPUSH
29636: LD_VAR 0 16
29640: PPUSH
29641: CALL_OW 321
29645: PUSH
29646: LD_INT 2
29648: EQUAL
29649: AND
29650: IFFALSE 29815
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29652: LD_INT 22
29654: PUSH
29655: LD_VAR 0 16
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: LD_INT 35
29669: PUSH
29670: LD_INT 11
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 35
29679: PUSH
29680: LD_INT 30
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 91
29694: PUSH
29695: LD_VAR 0 1
29699: PUSH
29700: LD_INT 18
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: LIST
29712: PPUSH
29713: CALL_OW 69
29717: NOT
29718: PUSH
29719: LD_INT 22
29721: PUSH
29722: LD_VAR 0 16
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: LD_INT 30
29736: PUSH
29737: LD_INT 32
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 30
29746: PUSH
29747: LD_INT 33
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 91
29761: PUSH
29762: LD_VAR 0 1
29766: PUSH
29767: LD_INT 12
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: PPUSH
29783: CALL_OW 69
29787: PUSH
29788: LD_INT 2
29790: GREATER
29791: AND
29792: IFFALSE 29815
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29794: LD_ADDR_VAR 0 18
29798: PUSH
29799: LD_INT 11
29801: PUSH
29802: LD_INT 30
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_VAR 0 12
29813: ARRAY
29814: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29815: LD_VAR 0 18
29819: NOT
29820: PUSH
29821: LD_INT 40
29823: PPUSH
29824: LD_VAR 0 16
29828: PPUSH
29829: CALL_OW 321
29833: PUSH
29834: LD_INT 2
29836: EQUAL
29837: AND
29838: PUSH
29839: LD_INT 7
29841: PUSH
29842: LD_VAR 0 5
29846: IN
29847: PUSH
29848: LD_INT 28
29850: PUSH
29851: LD_VAR 0 5
29855: IN
29856: OR
29857: PUSH
29858: LD_INT 45
29860: PUSH
29861: LD_VAR 0 5
29865: IN
29866: OR
29867: AND
29868: IFFALSE 30122
// begin hex := GetHexInfo ( x , y ) ;
29870: LD_ADDR_VAR 0 4
29874: PUSH
29875: LD_VAR 0 10
29879: PPUSH
29880: LD_VAR 0 11
29884: PPUSH
29885: CALL_OW 546
29889: ST_TO_ADDR
// if hex [ 1 ] then
29890: LD_VAR 0 4
29894: PUSH
29895: LD_INT 1
29897: ARRAY
29898: IFFALSE 29902
// exit ;
29900: GO 30305
// height := hex [ 2 ] ;
29902: LD_ADDR_VAR 0 15
29906: PUSH
29907: LD_VAR 0 4
29911: PUSH
29912: LD_INT 2
29914: ARRAY
29915: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29916: LD_ADDR_VAR 0 14
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: LD_INT 3
29929: PUSH
29930: LD_INT 5
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// for i in tmp do
29939: LD_ADDR_VAR 0 8
29943: PUSH
29944: LD_VAR 0 14
29948: PUSH
29949: FOR_IN
29950: IFFALSE 30120
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
29952: LD_ADDR_VAR 0 9
29956: PUSH
29957: LD_VAR 0 10
29961: PPUSH
29962: LD_VAR 0 8
29966: PPUSH
29967: LD_INT 5
29969: PPUSH
29970: CALL_OW 272
29974: PUSH
29975: LD_VAR 0 11
29979: PPUSH
29980: LD_VAR 0 8
29984: PPUSH
29985: LD_INT 5
29987: PPUSH
29988: CALL_OW 273
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
29997: LD_VAR 0 9
30001: PUSH
30002: LD_INT 1
30004: ARRAY
30005: PPUSH
30006: LD_VAR 0 9
30010: PUSH
30011: LD_INT 2
30013: ARRAY
30014: PPUSH
30015: CALL_OW 488
30019: IFFALSE 30118
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30021: LD_ADDR_VAR 0 4
30025: PUSH
30026: LD_VAR 0 9
30030: PUSH
30031: LD_INT 1
30033: ARRAY
30034: PPUSH
30035: LD_VAR 0 9
30039: PUSH
30040: LD_INT 2
30042: ARRAY
30043: PPUSH
30044: CALL_OW 546
30048: ST_TO_ADDR
// if hex [ 1 ] then
30049: LD_VAR 0 4
30053: PUSH
30054: LD_INT 1
30056: ARRAY
30057: IFFALSE 30061
// continue ;
30059: GO 29949
// h := hex [ 2 ] ;
30061: LD_ADDR_VAR 0 13
30065: PUSH
30066: LD_VAR 0 4
30070: PUSH
30071: LD_INT 2
30073: ARRAY
30074: ST_TO_ADDR
// if h + 7 < height then
30075: LD_VAR 0 13
30079: PUSH
30080: LD_INT 7
30082: PLUS
30083: PUSH
30084: LD_VAR 0 15
30088: LESS
30089: IFFALSE 30118
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30091: LD_ADDR_VAR 0 18
30095: PUSH
30096: LD_INT 7
30098: PUSH
30099: LD_INT 28
30101: PUSH
30102: LD_INT 45
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: PUSH
30110: LD_VAR 0 12
30114: ARRAY
30115: ST_TO_ADDR
// break ;
30116: GO 30120
// end ; end ; end ;
30118: GO 29949
30120: POP
30121: POP
// end ; if not weapon then
30122: LD_VAR 0 18
30126: NOT
30127: IFFALSE 30187
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30129: LD_ADDR_VAR 0 5
30133: PUSH
30134: LD_VAR 0 5
30138: PUSH
30139: LD_INT 11
30141: PUSH
30142: LD_INT 30
30144: PUSH
30145: LD_INT 49
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: DIFF
30153: ST_TO_ADDR
// if not list then
30154: LD_VAR 0 5
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30305
// weapon := list [ rand ( 1 , list ) ] ;
30163: LD_ADDR_VAR 0 18
30167: PUSH
30168: LD_VAR 0 5
30172: PUSH
30173: LD_INT 1
30175: PPUSH
30176: LD_VAR 0 5
30180: PPUSH
30181: CALL_OW 12
30185: ARRAY
30186: ST_TO_ADDR
// end ; if weapon then
30187: LD_VAR 0 18
30191: IFFALSE 30305
// begin tmp := CostOfWeapon ( weapon ) ;
30193: LD_ADDR_VAR 0 14
30197: PUSH
30198: LD_VAR 0 18
30202: PPUSH
30203: CALL_OW 451
30207: ST_TO_ADDR
// j := GetBase ( tower ) ;
30208: LD_ADDR_VAR 0 9
30212: PUSH
30213: LD_VAR 0 1
30217: PPUSH
30218: CALL_OW 274
30222: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30223: LD_VAR 0 9
30227: PPUSH
30228: LD_INT 1
30230: PPUSH
30231: CALL_OW 275
30235: PUSH
30236: LD_VAR 0 14
30240: PUSH
30241: LD_INT 1
30243: ARRAY
30244: GREATEREQUAL
30245: PUSH
30246: LD_VAR 0 9
30250: PPUSH
30251: LD_INT 2
30253: PPUSH
30254: CALL_OW 275
30258: PUSH
30259: LD_VAR 0 14
30263: PUSH
30264: LD_INT 2
30266: ARRAY
30267: GREATEREQUAL
30268: AND
30269: PUSH
30270: LD_VAR 0 9
30274: PPUSH
30275: LD_INT 3
30277: PPUSH
30278: CALL_OW 275
30282: PUSH
30283: LD_VAR 0 14
30287: PUSH
30288: LD_INT 3
30290: ARRAY
30291: GREATEREQUAL
30292: AND
30293: IFFALSE 30305
// result := weapon ;
30295: LD_ADDR_VAR 0 3
30299: PUSH
30300: LD_VAR 0 18
30304: ST_TO_ADDR
// end ; end ;
30305: LD_VAR 0 3
30309: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30310: LD_INT 0
30312: PPUSH
30313: PPUSH
// result := true ;
30314: LD_ADDR_VAR 0 3
30318: PUSH
30319: LD_INT 1
30321: ST_TO_ADDR
// if array1 = array2 then
30322: LD_VAR 0 1
30326: PUSH
30327: LD_VAR 0 2
30331: EQUAL
30332: IFFALSE 30392
// begin for i = 1 to array1 do
30334: LD_ADDR_VAR 0 4
30338: PUSH
30339: DOUBLE
30340: LD_INT 1
30342: DEC
30343: ST_TO_ADDR
30344: LD_VAR 0 1
30348: PUSH
30349: FOR_TO
30350: IFFALSE 30388
// if array1 [ i ] <> array2 [ i ] then
30352: LD_VAR 0 1
30356: PUSH
30357: LD_VAR 0 4
30361: ARRAY
30362: PUSH
30363: LD_VAR 0 2
30367: PUSH
30368: LD_VAR 0 4
30372: ARRAY
30373: NONEQUAL
30374: IFFALSE 30386
// begin result := false ;
30376: LD_ADDR_VAR 0 3
30380: PUSH
30381: LD_INT 0
30383: ST_TO_ADDR
// break ;
30384: GO 30388
// end ;
30386: GO 30349
30388: POP
30389: POP
// end else
30390: GO 30400
// result := false ;
30392: LD_ADDR_VAR 0 3
30396: PUSH
30397: LD_INT 0
30399: ST_TO_ADDR
// end ;
30400: LD_VAR 0 3
30404: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30405: LD_INT 0
30407: PPUSH
30408: PPUSH
// if not array1 or not array2 then
30409: LD_VAR 0 1
30413: NOT
30414: PUSH
30415: LD_VAR 0 2
30419: NOT
30420: OR
30421: IFFALSE 30425
// exit ;
30423: GO 30489
// result := true ;
30425: LD_ADDR_VAR 0 3
30429: PUSH
30430: LD_INT 1
30432: ST_TO_ADDR
// for i = 1 to array1 do
30433: LD_ADDR_VAR 0 4
30437: PUSH
30438: DOUBLE
30439: LD_INT 1
30441: DEC
30442: ST_TO_ADDR
30443: LD_VAR 0 1
30447: PUSH
30448: FOR_TO
30449: IFFALSE 30487
// if array1 [ i ] <> array2 [ i ] then
30451: LD_VAR 0 1
30455: PUSH
30456: LD_VAR 0 4
30460: ARRAY
30461: PUSH
30462: LD_VAR 0 2
30466: PUSH
30467: LD_VAR 0 4
30471: ARRAY
30472: NONEQUAL
30473: IFFALSE 30485
// begin result := false ;
30475: LD_ADDR_VAR 0 3
30479: PUSH
30480: LD_INT 0
30482: ST_TO_ADDR
// break ;
30483: GO 30487
// end ;
30485: GO 30448
30487: POP
30488: POP
// end ;
30489: LD_VAR 0 3
30493: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30494: LD_INT 0
30496: PPUSH
30497: PPUSH
30498: PPUSH
// pom := GetBase ( fac ) ;
30499: LD_ADDR_VAR 0 5
30503: PUSH
30504: LD_VAR 0 1
30508: PPUSH
30509: CALL_OW 274
30513: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30514: LD_ADDR_VAR 0 4
30518: PUSH
30519: LD_VAR 0 2
30523: PUSH
30524: LD_INT 1
30526: ARRAY
30527: PPUSH
30528: LD_VAR 0 2
30532: PUSH
30533: LD_INT 2
30535: ARRAY
30536: PPUSH
30537: LD_VAR 0 2
30541: PUSH
30542: LD_INT 3
30544: ARRAY
30545: PPUSH
30546: LD_VAR 0 2
30550: PUSH
30551: LD_INT 4
30553: ARRAY
30554: PPUSH
30555: CALL_OW 449
30559: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30560: LD_ADDR_VAR 0 3
30564: PUSH
30565: LD_VAR 0 5
30569: PPUSH
30570: LD_INT 1
30572: PPUSH
30573: CALL_OW 275
30577: PUSH
30578: LD_VAR 0 4
30582: PUSH
30583: LD_INT 1
30585: ARRAY
30586: GREATEREQUAL
30587: PUSH
30588: LD_VAR 0 5
30592: PPUSH
30593: LD_INT 2
30595: PPUSH
30596: CALL_OW 275
30600: PUSH
30601: LD_VAR 0 4
30605: PUSH
30606: LD_INT 2
30608: ARRAY
30609: GREATEREQUAL
30610: AND
30611: PUSH
30612: LD_VAR 0 5
30616: PPUSH
30617: LD_INT 3
30619: PPUSH
30620: CALL_OW 275
30624: PUSH
30625: LD_VAR 0 4
30629: PUSH
30630: LD_INT 3
30632: ARRAY
30633: GREATEREQUAL
30634: AND
30635: ST_TO_ADDR
// end ;
30636: LD_VAR 0 3
30640: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30641: LD_INT 0
30643: PPUSH
30644: PPUSH
30645: PPUSH
30646: PPUSH
// pom := GetBase ( building ) ;
30647: LD_ADDR_VAR 0 3
30651: PUSH
30652: LD_VAR 0 1
30656: PPUSH
30657: CALL_OW 274
30661: ST_TO_ADDR
// if not pom then
30662: LD_VAR 0 3
30666: NOT
30667: IFFALSE 30671
// exit ;
30669: GO 30841
// btype := GetBType ( building ) ;
30671: LD_ADDR_VAR 0 5
30675: PUSH
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 266
30685: ST_TO_ADDR
// if btype = b_armoury then
30686: LD_VAR 0 5
30690: PUSH
30691: LD_INT 4
30693: EQUAL
30694: IFFALSE 30704
// btype := b_barracks ;
30696: LD_ADDR_VAR 0 5
30700: PUSH
30701: LD_INT 5
30703: ST_TO_ADDR
// if btype = b_depot then
30704: LD_VAR 0 5
30708: PUSH
30709: LD_INT 0
30711: EQUAL
30712: IFFALSE 30722
// btype := b_warehouse ;
30714: LD_ADDR_VAR 0 5
30718: PUSH
30719: LD_INT 1
30721: ST_TO_ADDR
// if btype = b_workshop then
30722: LD_VAR 0 5
30726: PUSH
30727: LD_INT 2
30729: EQUAL
30730: IFFALSE 30740
// btype := b_factory ;
30732: LD_ADDR_VAR 0 5
30736: PUSH
30737: LD_INT 3
30739: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30740: LD_ADDR_VAR 0 4
30744: PUSH
30745: LD_VAR 0 5
30749: PPUSH
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL_OW 248
30759: PPUSH
30760: CALL_OW 450
30764: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30765: LD_ADDR_VAR 0 2
30769: PUSH
30770: LD_VAR 0 3
30774: PPUSH
30775: LD_INT 1
30777: PPUSH
30778: CALL_OW 275
30782: PUSH
30783: LD_VAR 0 4
30787: PUSH
30788: LD_INT 1
30790: ARRAY
30791: GREATEREQUAL
30792: PUSH
30793: LD_VAR 0 3
30797: PPUSH
30798: LD_INT 2
30800: PPUSH
30801: CALL_OW 275
30805: PUSH
30806: LD_VAR 0 4
30810: PUSH
30811: LD_INT 2
30813: ARRAY
30814: GREATEREQUAL
30815: AND
30816: PUSH
30817: LD_VAR 0 3
30821: PPUSH
30822: LD_INT 3
30824: PPUSH
30825: CALL_OW 275
30829: PUSH
30830: LD_VAR 0 4
30834: PUSH
30835: LD_INT 3
30837: ARRAY
30838: GREATEREQUAL
30839: AND
30840: ST_TO_ADDR
// end ;
30841: LD_VAR 0 2
30845: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30846: LD_INT 0
30848: PPUSH
30849: PPUSH
30850: PPUSH
// pom := GetBase ( building ) ;
30851: LD_ADDR_VAR 0 4
30855: PUSH
30856: LD_VAR 0 1
30860: PPUSH
30861: CALL_OW 274
30865: ST_TO_ADDR
// if not pom then
30866: LD_VAR 0 4
30870: NOT
30871: IFFALSE 30875
// exit ;
30873: GO 30976
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30875: LD_ADDR_VAR 0 5
30879: PUSH
30880: LD_VAR 0 2
30884: PPUSH
30885: LD_VAR 0 1
30889: PPUSH
30890: CALL_OW 248
30894: PPUSH
30895: CALL_OW 450
30899: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30900: LD_ADDR_VAR 0 3
30904: PUSH
30905: LD_VAR 0 4
30909: PPUSH
30910: LD_INT 1
30912: PPUSH
30913: CALL_OW 275
30917: PUSH
30918: LD_VAR 0 5
30922: PUSH
30923: LD_INT 1
30925: ARRAY
30926: GREATEREQUAL
30927: PUSH
30928: LD_VAR 0 4
30932: PPUSH
30933: LD_INT 2
30935: PPUSH
30936: CALL_OW 275
30940: PUSH
30941: LD_VAR 0 5
30945: PUSH
30946: LD_INT 2
30948: ARRAY
30949: GREATEREQUAL
30950: AND
30951: PUSH
30952: LD_VAR 0 4
30956: PPUSH
30957: LD_INT 3
30959: PPUSH
30960: CALL_OW 275
30964: PUSH
30965: LD_VAR 0 5
30969: PUSH
30970: LD_INT 3
30972: ARRAY
30973: GREATEREQUAL
30974: AND
30975: ST_TO_ADDR
// end ;
30976: LD_VAR 0 3
30980: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
30981: LD_INT 0
30983: PPUSH
30984: PPUSH
30985: PPUSH
30986: PPUSH
30987: PPUSH
30988: PPUSH
30989: PPUSH
30990: PPUSH
30991: PPUSH
30992: PPUSH
30993: PPUSH
// result := false ;
30994: LD_ADDR_VAR 0 8
30998: PUSH
30999: LD_INT 0
31001: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31002: LD_VAR 0 5
31006: NOT
31007: PUSH
31008: LD_VAR 0 1
31012: NOT
31013: OR
31014: PUSH
31015: LD_VAR 0 2
31019: NOT
31020: OR
31021: PUSH
31022: LD_VAR 0 3
31026: NOT
31027: OR
31028: IFFALSE 31032
// exit ;
31030: GO 31846
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31032: LD_ADDR_VAR 0 14
31036: PUSH
31037: LD_VAR 0 1
31041: PPUSH
31042: LD_VAR 0 2
31046: PPUSH
31047: LD_VAR 0 3
31051: PPUSH
31052: LD_VAR 0 4
31056: PPUSH
31057: LD_VAR 0 5
31061: PUSH
31062: LD_INT 1
31064: ARRAY
31065: PPUSH
31066: CALL_OW 248
31070: PPUSH
31071: LD_INT 0
31073: PPUSH
31074: CALL 33083 0 6
31078: ST_TO_ADDR
// if not hexes then
31079: LD_VAR 0 14
31083: NOT
31084: IFFALSE 31088
// exit ;
31086: GO 31846
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31088: LD_ADDR_VAR 0 17
31092: PUSH
31093: LD_VAR 0 5
31097: PPUSH
31098: LD_INT 22
31100: PUSH
31101: LD_VAR 0 13
31105: PPUSH
31106: CALL_OW 255
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 30
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 30
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PPUSH
31147: CALL_OW 72
31151: ST_TO_ADDR
// for i = 1 to hexes do
31152: LD_ADDR_VAR 0 9
31156: PUSH
31157: DOUBLE
31158: LD_INT 1
31160: DEC
31161: ST_TO_ADDR
31162: LD_VAR 0 14
31166: PUSH
31167: FOR_TO
31168: IFFALSE 31844
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31170: LD_ADDR_VAR 0 13
31174: PUSH
31175: LD_VAR 0 14
31179: PUSH
31180: LD_VAR 0 9
31184: ARRAY
31185: PUSH
31186: LD_INT 1
31188: ARRAY
31189: PPUSH
31190: LD_VAR 0 14
31194: PUSH
31195: LD_VAR 0 9
31199: ARRAY
31200: PUSH
31201: LD_INT 2
31203: ARRAY
31204: PPUSH
31205: CALL_OW 428
31209: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31210: LD_VAR 0 14
31214: PUSH
31215: LD_VAR 0 9
31219: ARRAY
31220: PUSH
31221: LD_INT 1
31223: ARRAY
31224: PPUSH
31225: LD_VAR 0 14
31229: PUSH
31230: LD_VAR 0 9
31234: ARRAY
31235: PUSH
31236: LD_INT 2
31238: ARRAY
31239: PPUSH
31240: CALL_OW 351
31244: PUSH
31245: LD_VAR 0 14
31249: PUSH
31250: LD_VAR 0 9
31254: ARRAY
31255: PUSH
31256: LD_INT 1
31258: ARRAY
31259: PPUSH
31260: LD_VAR 0 14
31264: PUSH
31265: LD_VAR 0 9
31269: ARRAY
31270: PUSH
31271: LD_INT 2
31273: ARRAY
31274: PPUSH
31275: CALL_OW 488
31279: NOT
31280: OR
31281: PUSH
31282: LD_VAR 0 13
31286: PPUSH
31287: CALL_OW 247
31291: PUSH
31292: LD_INT 3
31294: EQUAL
31295: OR
31296: IFFALSE 31302
// exit ;
31298: POP
31299: POP
31300: GO 31846
// if not tmp then
31302: LD_VAR 0 13
31306: NOT
31307: IFFALSE 31311
// continue ;
31309: GO 31167
// result := true ;
31311: LD_ADDR_VAR 0 8
31315: PUSH
31316: LD_INT 1
31318: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31319: LD_VAR 0 6
31323: PUSH
31324: LD_VAR 0 13
31328: PPUSH
31329: CALL_OW 247
31333: PUSH
31334: LD_INT 2
31336: EQUAL
31337: AND
31338: PUSH
31339: LD_VAR 0 13
31343: PPUSH
31344: CALL_OW 263
31348: PUSH
31349: LD_INT 1
31351: EQUAL
31352: AND
31353: IFFALSE 31517
// begin if IsDrivenBy ( tmp ) then
31355: LD_VAR 0 13
31359: PPUSH
31360: CALL_OW 311
31364: IFFALSE 31368
// continue ;
31366: GO 31167
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31368: LD_VAR 0 6
31372: PPUSH
31373: LD_INT 3
31375: PUSH
31376: LD_INT 60
31378: PUSH
31379: EMPTY
31380: LIST
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 3
31388: PUSH
31389: LD_INT 55
31391: PUSH
31392: EMPTY
31393: LIST
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PPUSH
31403: CALL_OW 72
31407: IFFALSE 31515
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31409: LD_ADDR_VAR 0 18
31413: PUSH
31414: LD_VAR 0 6
31418: PPUSH
31419: LD_INT 3
31421: PUSH
31422: LD_INT 60
31424: PUSH
31425: EMPTY
31426: LIST
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 3
31434: PUSH
31435: LD_INT 55
31437: PUSH
31438: EMPTY
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PPUSH
31449: CALL_OW 72
31453: PUSH
31454: LD_INT 1
31456: ARRAY
31457: ST_TO_ADDR
// if IsInUnit ( driver ) then
31458: LD_VAR 0 18
31462: PPUSH
31463: CALL_OW 310
31467: IFFALSE 31478
// ComExit ( driver ) ;
31469: LD_VAR 0 18
31473: PPUSH
31474: CALL 56267 0 1
// AddComEnterUnit ( driver , tmp ) ;
31478: LD_VAR 0 18
31482: PPUSH
31483: LD_VAR 0 13
31487: PPUSH
31488: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31492: LD_VAR 0 18
31496: PPUSH
31497: LD_VAR 0 7
31501: PPUSH
31502: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31506: LD_VAR 0 18
31510: PPUSH
31511: CALL_OW 181
// end ; continue ;
31515: GO 31167
// end ; if not cleaners or not tmp in cleaners then
31517: LD_VAR 0 6
31521: NOT
31522: PUSH
31523: LD_VAR 0 13
31527: PUSH
31528: LD_VAR 0 6
31532: IN
31533: NOT
31534: OR
31535: IFFALSE 31842
// begin if dep then
31537: LD_VAR 0 17
31541: IFFALSE 31677
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31543: LD_ADDR_VAR 0 16
31547: PUSH
31548: LD_VAR 0 17
31552: PUSH
31553: LD_INT 1
31555: ARRAY
31556: PPUSH
31557: CALL_OW 250
31561: PPUSH
31562: LD_VAR 0 17
31566: PUSH
31567: LD_INT 1
31569: ARRAY
31570: PPUSH
31571: CALL_OW 254
31575: PPUSH
31576: LD_INT 5
31578: PPUSH
31579: CALL_OW 272
31583: PUSH
31584: LD_VAR 0 17
31588: PUSH
31589: LD_INT 1
31591: ARRAY
31592: PPUSH
31593: CALL_OW 251
31597: PPUSH
31598: LD_VAR 0 17
31602: PUSH
31603: LD_INT 1
31605: ARRAY
31606: PPUSH
31607: CALL_OW 254
31611: PPUSH
31612: LD_INT 5
31614: PPUSH
31615: CALL_OW 273
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31624: LD_VAR 0 16
31628: PUSH
31629: LD_INT 1
31631: ARRAY
31632: PPUSH
31633: LD_VAR 0 16
31637: PUSH
31638: LD_INT 2
31640: ARRAY
31641: PPUSH
31642: CALL_OW 488
31646: IFFALSE 31677
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31648: LD_VAR 0 13
31652: PPUSH
31653: LD_VAR 0 16
31657: PUSH
31658: LD_INT 1
31660: ARRAY
31661: PPUSH
31662: LD_VAR 0 16
31666: PUSH
31667: LD_INT 2
31669: ARRAY
31670: PPUSH
31671: CALL_OW 111
// continue ;
31675: GO 31167
// end ; end ; r := GetDir ( tmp ) ;
31677: LD_ADDR_VAR 0 15
31681: PUSH
31682: LD_VAR 0 13
31686: PPUSH
31687: CALL_OW 254
31691: ST_TO_ADDR
// if r = 5 then
31692: LD_VAR 0 15
31696: PUSH
31697: LD_INT 5
31699: EQUAL
31700: IFFALSE 31710
// r := 0 ;
31702: LD_ADDR_VAR 0 15
31706: PUSH
31707: LD_INT 0
31709: ST_TO_ADDR
// for j = r to 5 do
31710: LD_ADDR_VAR 0 10
31714: PUSH
31715: DOUBLE
31716: LD_VAR 0 15
31720: DEC
31721: ST_TO_ADDR
31722: LD_INT 5
31724: PUSH
31725: FOR_TO
31726: IFFALSE 31840
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31728: LD_ADDR_VAR 0 11
31732: PUSH
31733: LD_VAR 0 13
31737: PPUSH
31738: CALL_OW 250
31742: PPUSH
31743: LD_VAR 0 10
31747: PPUSH
31748: LD_INT 2
31750: PPUSH
31751: CALL_OW 272
31755: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31756: LD_ADDR_VAR 0 12
31760: PUSH
31761: LD_VAR 0 13
31765: PPUSH
31766: CALL_OW 251
31770: PPUSH
31771: LD_VAR 0 10
31775: PPUSH
31776: LD_INT 2
31778: PPUSH
31779: CALL_OW 273
31783: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31784: LD_VAR 0 11
31788: PPUSH
31789: LD_VAR 0 12
31793: PPUSH
31794: CALL_OW 488
31798: PUSH
31799: LD_VAR 0 11
31803: PPUSH
31804: LD_VAR 0 12
31808: PPUSH
31809: CALL_OW 428
31813: NOT
31814: AND
31815: IFFALSE 31838
// begin ComMoveXY ( tmp , _x , _y ) ;
31817: LD_VAR 0 13
31821: PPUSH
31822: LD_VAR 0 11
31826: PPUSH
31827: LD_VAR 0 12
31831: PPUSH
31832: CALL_OW 111
// break ;
31836: GO 31840
// end ; end ;
31838: GO 31725
31840: POP
31841: POP
// end ; end ;
31842: GO 31167
31844: POP
31845: POP
// end ;
31846: LD_VAR 0 8
31850: RET
// export function BuildingTechInvented ( side , btype ) ; begin
31851: LD_INT 0
31853: PPUSH
// result := true ;
31854: LD_ADDR_VAR 0 3
31858: PUSH
31859: LD_INT 1
31861: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
31862: LD_VAR 0 2
31866: PUSH
31867: LD_INT 24
31869: DOUBLE
31870: EQUAL
31871: IFTRUE 31881
31873: LD_INT 33
31875: DOUBLE
31876: EQUAL
31877: IFTRUE 31881
31879: GO 31906
31881: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
31882: LD_ADDR_VAR 0 3
31886: PUSH
31887: LD_INT 32
31889: PPUSH
31890: LD_VAR 0 1
31894: PPUSH
31895: CALL_OW 321
31899: PUSH
31900: LD_INT 2
31902: EQUAL
31903: ST_TO_ADDR
31904: GO 32226
31906: LD_INT 20
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 31939
31914: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
31915: LD_ADDR_VAR 0 3
31919: PUSH
31920: LD_INT 6
31922: PPUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 321
31932: PUSH
31933: LD_INT 2
31935: EQUAL
31936: ST_TO_ADDR
31937: GO 32226
31939: LD_INT 22
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31953
31945: LD_INT 36
31947: DOUBLE
31948: EQUAL
31949: IFTRUE 31953
31951: GO 31978
31953: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
31954: LD_ADDR_VAR 0 3
31958: PUSH
31959: LD_INT 15
31961: PPUSH
31962: LD_VAR 0 1
31966: PPUSH
31967: CALL_OW 321
31971: PUSH
31972: LD_INT 2
31974: EQUAL
31975: ST_TO_ADDR
31976: GO 32226
31978: LD_INT 30
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 32011
31986: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_INT 20
31994: PPUSH
31995: LD_VAR 0 1
31999: PPUSH
32000: CALL_OW 321
32004: PUSH
32005: LD_INT 2
32007: EQUAL
32008: ST_TO_ADDR
32009: GO 32226
32011: LD_INT 28
32013: DOUBLE
32014: EQUAL
32015: IFTRUE 32025
32017: LD_INT 21
32019: DOUBLE
32020: EQUAL
32021: IFTRUE 32025
32023: GO 32050
32025: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32026: LD_ADDR_VAR 0 3
32030: PUSH
32031: LD_INT 21
32033: PPUSH
32034: LD_VAR 0 1
32038: PPUSH
32039: CALL_OW 321
32043: PUSH
32044: LD_INT 2
32046: EQUAL
32047: ST_TO_ADDR
32048: GO 32226
32050: LD_INT 16
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32058
32056: GO 32085
32058: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32059: LD_ADDR_VAR 0 3
32063: PUSH
32064: LD_EXP 24
32068: PPUSH
32069: LD_VAR 0 1
32073: PPUSH
32074: CALL_OW 321
32078: PUSH
32079: LD_INT 2
32081: EQUAL
32082: ST_TO_ADDR
32083: GO 32226
32085: LD_INT 19
32087: DOUBLE
32088: EQUAL
32089: IFTRUE 32099
32091: LD_INT 23
32093: DOUBLE
32094: EQUAL
32095: IFTRUE 32099
32097: GO 32126
32099: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32100: LD_ADDR_VAR 0 3
32104: PUSH
32105: LD_EXP 23
32109: PPUSH
32110: LD_VAR 0 1
32114: PPUSH
32115: CALL_OW 321
32119: PUSH
32120: LD_INT 2
32122: EQUAL
32123: ST_TO_ADDR
32124: GO 32226
32126: LD_INT 17
32128: DOUBLE
32129: EQUAL
32130: IFTRUE 32134
32132: GO 32159
32134: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32135: LD_ADDR_VAR 0 3
32139: PUSH
32140: LD_INT 39
32142: PPUSH
32143: LD_VAR 0 1
32147: PPUSH
32148: CALL_OW 321
32152: PUSH
32153: LD_INT 2
32155: EQUAL
32156: ST_TO_ADDR
32157: GO 32226
32159: LD_INT 18
32161: DOUBLE
32162: EQUAL
32163: IFTRUE 32167
32165: GO 32192
32167: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32168: LD_ADDR_VAR 0 3
32172: PUSH
32173: LD_INT 40
32175: PPUSH
32176: LD_VAR 0 1
32180: PPUSH
32181: CALL_OW 321
32185: PUSH
32186: LD_INT 2
32188: EQUAL
32189: ST_TO_ADDR
32190: GO 32226
32192: LD_INT 27
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32225
32200: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32201: LD_ADDR_VAR 0 3
32205: PUSH
32206: LD_INT 35
32208: PPUSH
32209: LD_VAR 0 1
32213: PPUSH
32214: CALL_OW 321
32218: PUSH
32219: LD_INT 2
32221: EQUAL
32222: ST_TO_ADDR
32223: GO 32226
32225: POP
// end ;
32226: LD_VAR 0 3
32230: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32231: LD_INT 0
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
// result := false ;
32244: LD_ADDR_VAR 0 6
32248: PUSH
32249: LD_INT 0
32251: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32252: LD_VAR 0 1
32256: NOT
32257: PUSH
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 266
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: IN
32278: NOT
32279: OR
32280: PUSH
32281: LD_VAR 0 2
32285: NOT
32286: OR
32287: PUSH
32288: LD_VAR 0 5
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: LD_INT 2
32301: PUSH
32302: LD_INT 3
32304: PUSH
32305: LD_INT 4
32307: PUSH
32308: LD_INT 5
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: IN
32319: NOT
32320: OR
32321: PUSH
32322: LD_VAR 0 3
32326: PPUSH
32327: LD_VAR 0 4
32331: PPUSH
32332: CALL_OW 488
32336: NOT
32337: OR
32338: IFFALSE 32342
// exit ;
32340: GO 33078
// side := GetSide ( depot ) ;
32342: LD_ADDR_VAR 0 9
32346: PUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: CALL_OW 255
32356: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32357: LD_VAR 0 9
32361: PPUSH
32362: LD_VAR 0 2
32366: PPUSH
32367: CALL 31851 0 2
32371: NOT
32372: IFFALSE 32376
// exit ;
32374: GO 33078
// pom := GetBase ( depot ) ;
32376: LD_ADDR_VAR 0 10
32380: PUSH
32381: LD_VAR 0 1
32385: PPUSH
32386: CALL_OW 274
32390: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32391: LD_ADDR_VAR 0 11
32395: PUSH
32396: LD_VAR 0 2
32400: PPUSH
32401: LD_VAR 0 1
32405: PPUSH
32406: CALL_OW 248
32410: PPUSH
32411: CALL_OW 450
32415: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32416: LD_VAR 0 10
32420: PPUSH
32421: LD_INT 1
32423: PPUSH
32424: CALL_OW 275
32428: PUSH
32429: LD_VAR 0 11
32433: PUSH
32434: LD_INT 1
32436: ARRAY
32437: GREATEREQUAL
32438: PUSH
32439: LD_VAR 0 10
32443: PPUSH
32444: LD_INT 2
32446: PPUSH
32447: CALL_OW 275
32451: PUSH
32452: LD_VAR 0 11
32456: PUSH
32457: LD_INT 2
32459: ARRAY
32460: GREATEREQUAL
32461: AND
32462: PUSH
32463: LD_VAR 0 10
32467: PPUSH
32468: LD_INT 3
32470: PPUSH
32471: CALL_OW 275
32475: PUSH
32476: LD_VAR 0 11
32480: PUSH
32481: LD_INT 3
32483: ARRAY
32484: GREATEREQUAL
32485: AND
32486: NOT
32487: IFFALSE 32491
// exit ;
32489: GO 33078
// if GetBType ( depot ) = b_depot then
32491: LD_VAR 0 1
32495: PPUSH
32496: CALL_OW 266
32500: PUSH
32501: LD_INT 0
32503: EQUAL
32504: IFFALSE 32516
// dist := 28 else
32506: LD_ADDR_VAR 0 14
32510: PUSH
32511: LD_INT 28
32513: ST_TO_ADDR
32514: GO 32524
// dist := 36 ;
32516: LD_ADDR_VAR 0 14
32520: PUSH
32521: LD_INT 36
32523: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32524: LD_VAR 0 1
32528: PPUSH
32529: LD_VAR 0 3
32533: PPUSH
32534: LD_VAR 0 4
32538: PPUSH
32539: CALL_OW 297
32543: PUSH
32544: LD_VAR 0 14
32548: GREATER
32549: IFFALSE 32553
// exit ;
32551: GO 33078
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32553: LD_ADDR_VAR 0 12
32557: PUSH
32558: LD_VAR 0 2
32562: PPUSH
32563: LD_VAR 0 3
32567: PPUSH
32568: LD_VAR 0 4
32572: PPUSH
32573: LD_VAR 0 5
32577: PPUSH
32578: LD_VAR 0 1
32582: PPUSH
32583: CALL_OW 248
32587: PPUSH
32588: LD_INT 0
32590: PPUSH
32591: CALL 33083 0 6
32595: ST_TO_ADDR
// if not hexes then
32596: LD_VAR 0 12
32600: NOT
32601: IFFALSE 32605
// exit ;
32603: GO 33078
// hex := GetHexInfo ( x , y ) ;
32605: LD_ADDR_VAR 0 15
32609: PUSH
32610: LD_VAR 0 3
32614: PPUSH
32615: LD_VAR 0 4
32619: PPUSH
32620: CALL_OW 546
32624: ST_TO_ADDR
// if hex [ 1 ] then
32625: LD_VAR 0 15
32629: PUSH
32630: LD_INT 1
32632: ARRAY
32633: IFFALSE 32637
// exit ;
32635: GO 33078
// height := hex [ 2 ] ;
32637: LD_ADDR_VAR 0 13
32641: PUSH
32642: LD_VAR 0 15
32646: PUSH
32647: LD_INT 2
32649: ARRAY
32650: ST_TO_ADDR
// for i = 1 to hexes do
32651: LD_ADDR_VAR 0 7
32655: PUSH
32656: DOUBLE
32657: LD_INT 1
32659: DEC
32660: ST_TO_ADDR
32661: LD_VAR 0 12
32665: PUSH
32666: FOR_TO
32667: IFFALSE 32997
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32669: LD_VAR 0 12
32673: PUSH
32674: LD_VAR 0 7
32678: ARRAY
32679: PUSH
32680: LD_INT 1
32682: ARRAY
32683: PPUSH
32684: LD_VAR 0 12
32688: PUSH
32689: LD_VAR 0 7
32693: ARRAY
32694: PUSH
32695: LD_INT 2
32697: ARRAY
32698: PPUSH
32699: CALL_OW 488
32703: NOT
32704: PUSH
32705: LD_VAR 0 12
32709: PUSH
32710: LD_VAR 0 7
32714: ARRAY
32715: PUSH
32716: LD_INT 1
32718: ARRAY
32719: PPUSH
32720: LD_VAR 0 12
32724: PUSH
32725: LD_VAR 0 7
32729: ARRAY
32730: PUSH
32731: LD_INT 2
32733: ARRAY
32734: PPUSH
32735: CALL_OW 428
32739: PUSH
32740: LD_INT 0
32742: GREATER
32743: OR
32744: PUSH
32745: LD_VAR 0 12
32749: PUSH
32750: LD_VAR 0 7
32754: ARRAY
32755: PUSH
32756: LD_INT 1
32758: ARRAY
32759: PPUSH
32760: LD_VAR 0 12
32764: PUSH
32765: LD_VAR 0 7
32769: ARRAY
32770: PUSH
32771: LD_INT 2
32773: ARRAY
32774: PPUSH
32775: CALL_OW 351
32779: OR
32780: IFFALSE 32786
// exit ;
32782: POP
32783: POP
32784: GO 33078
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32786: LD_ADDR_VAR 0 8
32790: PUSH
32791: LD_VAR 0 12
32795: PUSH
32796: LD_VAR 0 7
32800: ARRAY
32801: PUSH
32802: LD_INT 1
32804: ARRAY
32805: PPUSH
32806: LD_VAR 0 12
32810: PUSH
32811: LD_VAR 0 7
32815: ARRAY
32816: PUSH
32817: LD_INT 2
32819: ARRAY
32820: PPUSH
32821: CALL_OW 546
32825: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32826: LD_VAR 0 8
32830: PUSH
32831: LD_INT 1
32833: ARRAY
32834: PUSH
32835: LD_VAR 0 8
32839: PUSH
32840: LD_INT 2
32842: ARRAY
32843: PUSH
32844: LD_VAR 0 13
32848: PUSH
32849: LD_INT 2
32851: PLUS
32852: GREATER
32853: OR
32854: PUSH
32855: LD_VAR 0 8
32859: PUSH
32860: LD_INT 2
32862: ARRAY
32863: PUSH
32864: LD_VAR 0 13
32868: PUSH
32869: LD_INT 2
32871: MINUS
32872: LESS
32873: OR
32874: PUSH
32875: LD_VAR 0 8
32879: PUSH
32880: LD_INT 3
32882: ARRAY
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 8
32889: PUSH
32890: LD_INT 9
32892: PUSH
32893: LD_INT 10
32895: PUSH
32896: LD_INT 11
32898: PUSH
32899: LD_INT 12
32901: PUSH
32902: LD_INT 13
32904: PUSH
32905: LD_INT 16
32907: PUSH
32908: LD_INT 17
32910: PUSH
32911: LD_INT 18
32913: PUSH
32914: LD_INT 19
32916: PUSH
32917: LD_INT 20
32919: PUSH
32920: LD_INT 21
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: IN
32938: NOT
32939: OR
32940: PUSH
32941: LD_VAR 0 8
32945: PUSH
32946: LD_INT 5
32948: ARRAY
32949: NOT
32950: OR
32951: PUSH
32952: LD_VAR 0 8
32956: PUSH
32957: LD_INT 6
32959: ARRAY
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 7
32969: PUSH
32970: LD_INT 9
32972: PUSH
32973: LD_INT 10
32975: PUSH
32976: LD_INT 11
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: IN
32987: NOT
32988: OR
32989: IFFALSE 32995
// exit ;
32991: POP
32992: POP
32993: GO 33078
// end ;
32995: GO 32666
32997: POP
32998: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32999: LD_VAR 0 9
33003: PPUSH
33004: LD_VAR 0 3
33008: PPUSH
33009: LD_VAR 0 4
33013: PPUSH
33014: LD_INT 20
33016: PPUSH
33017: CALL 25024 0 4
33021: PUSH
33022: LD_INT 4
33024: ARRAY
33025: IFFALSE 33029
// exit ;
33027: GO 33078
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33029: LD_VAR 0 2
33033: PUSH
33034: LD_INT 29
33036: PUSH
33037: LD_INT 30
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: IN
33044: PUSH
33045: LD_VAR 0 3
33049: PPUSH
33050: LD_VAR 0 4
33054: PPUSH
33055: LD_VAR 0 9
33059: PPUSH
33060: CALL_OW 440
33064: NOT
33065: AND
33066: IFFALSE 33070
// exit ;
33068: GO 33078
// result := true ;
33070: LD_ADDR_VAR 0 6
33074: PUSH
33075: LD_INT 1
33077: ST_TO_ADDR
// end ;
33078: LD_VAR 0 6
33082: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
33091: PPUSH
33092: PPUSH
33093: PPUSH
33094: PPUSH
33095: PPUSH
33096: PPUSH
33097: PPUSH
33098: PPUSH
33099: PPUSH
33100: PPUSH
33101: PPUSH
33102: PPUSH
33103: PPUSH
33104: PPUSH
33105: PPUSH
33106: PPUSH
33107: PPUSH
33108: PPUSH
33109: PPUSH
33110: PPUSH
33111: PPUSH
33112: PPUSH
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
33120: PPUSH
33121: PPUSH
33122: PPUSH
33123: PPUSH
33124: PPUSH
33125: PPUSH
33126: PPUSH
33127: PPUSH
33128: PPUSH
33129: PPUSH
33130: PPUSH
33131: PPUSH
33132: PPUSH
33133: PPUSH
33134: PPUSH
33135: PPUSH
33136: PPUSH
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
33141: PPUSH
33142: PPUSH
// result = [ ] ;
33143: LD_ADDR_VAR 0 7
33147: PUSH
33148: EMPTY
33149: ST_TO_ADDR
// temp_list = [ ] ;
33150: LD_ADDR_VAR 0 9
33154: PUSH
33155: EMPTY
33156: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33157: LD_VAR 0 4
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: LD_INT 3
33173: PUSH
33174: LD_INT 4
33176: PUSH
33177: LD_INT 5
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: IN
33188: NOT
33189: PUSH
33190: LD_VAR 0 1
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: IN
33205: PUSH
33206: LD_VAR 0 5
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: LIST
33224: IN
33225: NOT
33226: AND
33227: OR
33228: IFFALSE 33232
// exit ;
33230: GO 51623
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33232: LD_VAR 0 1
33236: PUSH
33237: LD_INT 6
33239: PUSH
33240: LD_INT 7
33242: PUSH
33243: LD_INT 8
33245: PUSH
33246: LD_INT 13
33248: PUSH
33249: LD_INT 12
33251: PUSH
33252: LD_INT 15
33254: PUSH
33255: LD_INT 11
33257: PUSH
33258: LD_INT 14
33260: PUSH
33261: LD_INT 10
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: IN
33275: IFFALSE 33285
// btype = b_lab ;
33277: LD_ADDR_VAR 0 1
33281: PUSH
33282: LD_INT 6
33284: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33285: LD_VAR 0 6
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: LD_INT 2
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: IN
33304: NOT
33305: PUSH
33306: LD_VAR 0 1
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: LD_INT 2
33319: PUSH
33320: LD_INT 3
33322: PUSH
33323: LD_INT 6
33325: PUSH
33326: LD_INT 36
33328: PUSH
33329: LD_INT 4
33331: PUSH
33332: LD_INT 5
33334: PUSH
33335: LD_INT 31
33337: PUSH
33338: LD_INT 32
33340: PUSH
33341: LD_INT 33
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: IN
33357: NOT
33358: PUSH
33359: LD_VAR 0 6
33363: PUSH
33364: LD_INT 1
33366: EQUAL
33367: AND
33368: OR
33369: PUSH
33370: LD_VAR 0 1
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: LD_INT 3
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: IN
33385: NOT
33386: PUSH
33387: LD_VAR 0 6
33391: PUSH
33392: LD_INT 2
33394: EQUAL
33395: AND
33396: OR
33397: IFFALSE 33407
// mode = 0 ;
33399: LD_ADDR_VAR 0 6
33403: PUSH
33404: LD_INT 0
33406: ST_TO_ADDR
// case mode of 0 :
33407: LD_VAR 0 6
33411: PUSH
33412: LD_INT 0
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 44873
33420: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33421: LD_ADDR_VAR 0 11
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 2
33506: NEG
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 2
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: LD_INT 2
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 1
33556: NEG
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: LD_INT 3
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 3
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33614: LD_ADDR_VAR 0 12
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 1
33634: NEG
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: NEG
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: LD_INT 1
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 2
33737: NEG
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: NEG
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 3
33771: NEG
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33810: LD_ADDR_VAR 0 13
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 1
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 2
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: NEG
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: LD_INT 3
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 3
33969: NEG
33970: PUSH
33971: LD_INT 2
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 3
33981: NEG
33982: PUSH
33983: LD_INT 3
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34009: LD_ADDR_VAR 0 14
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: NEG
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: LD_INT 3
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 3
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34205: LD_ADDR_VAR 0 15
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 2
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 3
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 3
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34398: LD_ADDR_VAR 0 16
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 2
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: LD_INT 2
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 2
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: NEG
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: NEG
34534: PUSH
34535: LD_INT 2
34537: NEG
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 3
34545: PUSH
34546: LD_INT 2
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: LD_INT 3
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: LD_INT 3
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34591: LD_ADDR_VAR 0 17
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: LD_INT 1
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: LD_INT 1
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 1
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 2
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 2
34767: NEG
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 2
34778: NEG
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 2
34790: NEG
34791: PUSH
34792: LD_INT 2
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34821: LD_ADDR_VAR 0 18
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 2
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 2
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 2
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 2
35008: NEG
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 2
35020: NEG
35021: PUSH
35022: LD_INT 2
35024: NEG
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35051: LD_ADDR_VAR 0 19
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: LD_INT 1
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: LD_INT 0
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: NEG
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 2
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 2
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 2
35238: NEG
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35281: LD_ADDR_VAR 0 20
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 2
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: LD_INT 2
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 2
35468: NEG
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35511: LD_ADDR_VAR 0 21
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: LD_INT 1
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 1
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: LD_INT 1
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: NEG
35593: PUSH
35594: LD_INT 2
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 2
35646: PUSH
35647: LD_INT 2
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 2
35710: NEG
35711: PUSH
35712: LD_INT 2
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35741: LD_ADDR_VAR 0 22
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: LD_INT 2
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 2
35917: NEG
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 2
35940: NEG
35941: PUSH
35942: LD_INT 2
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35971: LD_ADDR_VAR 0 23
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: NEG
36053: PUSH
36054: LD_INT 2
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: LD_INT 2
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 2
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 2
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 2
36147: NEG
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: NEG
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: LD_INT 2
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 2
36182: NEG
36183: PUSH
36184: LD_INT 3
36186: NEG
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 3
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 2
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36251: LD_ADDR_VAR 0 24
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: LD_INT 2
36336: NEG
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: LD_INT 2
36347: NEG
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 2
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: LD_INT 1
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 2
36427: NEG
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 2
36438: NEG
36439: PUSH
36440: LD_INT 1
36442: NEG
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: NEG
36451: PUSH
36452: LD_INT 2
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 3
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36527: LD_ADDR_VAR 0 25
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: LD_INT 1
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 2
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: LD_INT 2
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: LD_INT 2
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: LD_INT 2
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 3
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 3
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: LD_INT 3
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: LD_INT 3
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36801: LD_ADDR_VAR 0 26
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: NEG
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: LD_INT 2
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 2
36988: NEG
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 2
37000: NEG
37001: PUSH
37002: LD_INT 2
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: LD_INT 3
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: LD_INT 3
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37077: LD_ADDR_VAR 0 27
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 2
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 2
37253: NEG
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: LD_INT 2
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 3
37310: NEG
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 3
37322: NEG
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37357: LD_ADDR_VAR 0 28
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: LD_INT 3
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: LD_INT 3
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 3
37592: NEG
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 3
37604: NEG
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37639: LD_ADDR_VAR 0 29
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 2
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 2
37805: NEG
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: LD_INT 2
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 2
37829: NEG
37830: PUSH
37831: LD_INT 3
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 3
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 3
37883: NEG
37884: PUSH
37885: LD_INT 2
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37918: LD_ADDR_VAR 0 30
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: LD_INT 2
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: LD_INT 2
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 2
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: LD_INT 3
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: LD_INT 3
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 3
38161: NEG
38162: PUSH
38163: LD_INT 1
38165: NEG
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38196: LD_ADDR_VAR 0 31
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 2
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 2
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 2
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: LD_INT 3
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 3
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: LD_INT 2
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 3
38439: NEG
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38474: LD_ADDR_VAR 0 32
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 2
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: LD_INT 3
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 3
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 3
38717: NEG
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38752: LD_ADDR_VAR 0 33
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: LD_INT 2
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: LD_INT 2
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: LD_INT 3
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 3
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 3
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 3
38996: NEG
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39031: LD_ADDR_VAR 0 34
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 2
39210: NEG
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 3
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 3
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 3
39276: NEG
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39311: LD_ADDR_VAR 0 35
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39423: LD_ADDR_VAR 0 36
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: LD_INT 2
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39535: LD_ADDR_VAR 0 37
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39647: LD_ADDR_VAR 0 38
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 2
39738: NEG
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39759: LD_ADDR_VAR 0 39
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: LD_INT 2
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39871: LD_ADDR_VAR 0 40
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39983: LD_ADDR_VAR 0 41
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 2
40138: NEG
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: NEG
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: LD_INT 3
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 3
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 3
40226: PUSH
40227: LD_INT 3
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 3
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: NEG
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 3
40257: NEG
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 3
40268: NEG
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 3
40280: NEG
40281: PUSH
40282: LD_INT 2
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 3
40292: NEG
40293: PUSH
40294: LD_INT 3
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40333: LD_ADDR_VAR 0 42
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 2
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 2
40511: NEG
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: LD_INT 3
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 3
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 3
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 2
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 3
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 3
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 3
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 3
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 3
40630: NEG
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 3
40642: NEG
40643: PUSH
40644: LD_INT 3
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40683: LD_ADDR_VAR 0 43
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 3
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 3
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 3
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 3
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: LD_INT 3
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: LD_INT 3
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: NEG
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 3
40979: NEG
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 3
40990: NEG
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41031: LD_ADDR_VAR 0 44
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 2
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: LD_INT 2
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: LD_INT 3
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 3
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 3
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 3
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 3
41274: PUSH
41275: LD_INT 3
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 3
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 3
41305: NEG
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 3
41328: NEG
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 3
41340: NEG
41341: PUSH
41342: LD_INT 3
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41381: LD_ADDR_VAR 0 45
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 3
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 3
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: LD_INT 3
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 3
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: PUSH
41628: LD_INT 3
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 3
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 3
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 3
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: LD_INT 2
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 3
41690: NEG
41691: PUSH
41692: LD_INT 3
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41731: LD_ADDR_VAR 0 46
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 2
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: NEG
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 3
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 3
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 3
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 3
42027: NEG
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 3
42038: NEG
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42079: LD_ADDR_VAR 0 47
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 2
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: LD_INT 2
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42230: LD_ADDR_VAR 0 48
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: LD_INT 2
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42377: LD_ADDR_VAR 0 49
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42521: LD_ADDR_VAR 0 50
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42665: LD_ADDR_VAR 0 51
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: NEG
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42812: LD_ADDR_VAR 0 52
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 2
42916: NEG
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: NEG
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42963: LD_ADDR_VAR 0 53
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 2
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43193: LD_ADDR_VAR 0 54
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: LD_INT 2
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43423: LD_ADDR_VAR 0 55
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43653: LD_ADDR_VAR 0 56
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 2
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43883: LD_ADDR_VAR 0 57
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: LD_INT 2
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 2
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44113: LD_ADDR_VAR 0 58
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 2
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44343: LD_ADDR_VAR 0 59
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44431: LD_ADDR_VAR 0 60
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44519: LD_ADDR_VAR 0 61
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44607: LD_ADDR_VAR 0 62
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44695: LD_ADDR_VAR 0 63
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44783: LD_ADDR_VAR 0 64
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: ST_TO_ADDR
// end ; 1 :
44871: GO 50768
44873: LD_INT 1
44875: DOUBLE
44876: EQUAL
44877: IFTRUE 44881
44879: GO 47504
44881: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44882: LD_ADDR_VAR 0 11
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 3
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: LIST
44925: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44926: LD_ADDR_VAR 0 12
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44967: LD_ADDR_VAR 0 13
44971: PUSH
44972: LD_INT 3
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 3
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: LD_INT 3
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45007: LD_ADDR_VAR 0 14
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 2
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45048: LD_ADDR_VAR 0 15
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 3
45066: NEG
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 3
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45092: LD_ADDR_VAR 0 16
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: LD_INT 3
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 3
45111: NEG
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 3
45123: NEG
45124: PUSH
45125: LD_INT 3
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45138: LD_ADDR_VAR 0 17
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 3
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: LIST
45181: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45182: LD_ADDR_VAR 0 18
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 3
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45223: LD_ADDR_VAR 0 19
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 3
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 3
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45263: LD_ADDR_VAR 0 20
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 3
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45304: LD_ADDR_VAR 0 21
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 3
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 3
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45348: LD_ADDR_VAR 0 22
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: LD_INT 3
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 3
45367: NEG
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 3
45379: NEG
45380: PUSH
45381: LD_INT 3
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45394: LD_ADDR_VAR 0 23
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 3
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 4
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 3
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45438: LD_ADDR_VAR 0 24
45442: PUSH
45443: LD_INT 3
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 4
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: LIST
45478: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45479: LD_ADDR_VAR 0 25
45483: PUSH
45484: LD_INT 3
45486: PUSH
45487: LD_INT 3
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 4
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: LD_INT 4
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: LIST
45518: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45519: LD_ADDR_VAR 0 26
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 3
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 4
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 3
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45560: LD_ADDR_VAR 0 27
45564: PUSH
45565: LD_INT 3
45567: NEG
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 3
45578: NEG
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 4
45589: NEG
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: LIST
45603: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45604: LD_ADDR_VAR 0 28
45608: PUSH
45609: LD_INT 3
45611: NEG
45612: PUSH
45613: LD_INT 3
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 3
45623: NEG
45624: PUSH
45625: LD_INT 4
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 4
45635: NEG
45636: PUSH
45637: LD_INT 3
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45650: LD_ADDR_VAR 0 29
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 3
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 3
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 4
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 4
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 5
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 5
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 4
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 6
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 6
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 5
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45805: LD_ADDR_VAR 0 30
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 3
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 3
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 4
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 4
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 4
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 5
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 5
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 5
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 6
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 6
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45948: LD_ADDR_VAR 0 31
45952: PUSH
45953: LD_INT 3
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 3
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 4
45985: PUSH
45986: LD_INT 3
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 4
45995: PUSH
45996: LD_INT 4
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: LD_INT 4
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 5
46015: PUSH
46016: LD_INT 4
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 5
46025: PUSH
46026: LD_INT 5
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 4
46035: PUSH
46036: LD_INT 5
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 6
46045: PUSH
46046: LD_INT 5
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 6
46055: PUSH
46056: LD_INT 6
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 5
46065: PUSH
46066: LD_INT 6
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46087: LD_ADDR_VAR 0 32
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 3
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 4
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 4
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 3
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 5
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 5
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 4
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: LD_INT 6
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 6
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 5
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46230: LD_ADDR_VAR 0 33
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 3
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 3
46271: NEG
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 4
46282: NEG
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 4
46293: NEG
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 4
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 5
46316: NEG
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 5
46327: NEG
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 5
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 6
46350: NEG
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 6
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46385: LD_ADDR_VAR 0 34
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 3
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 3
46404: NEG
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: NEG
46417: PUSH
46418: LD_INT 3
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 3
46428: NEG
46429: PUSH
46430: LD_INT 4
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 4
46440: NEG
46441: PUSH
46442: LD_INT 3
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 4
46452: NEG
46453: PUSH
46454: LD_INT 4
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 4
46464: NEG
46465: PUSH
46466: LD_INT 5
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 5
46476: NEG
46477: PUSH
46478: LD_INT 4
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 5
46488: NEG
46489: PUSH
46490: LD_INT 5
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 5
46500: NEG
46501: PUSH
46502: LD_INT 6
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 6
46512: NEG
46513: PUSH
46514: LD_INT 5
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 6
46524: NEG
46525: PUSH
46526: LD_INT 6
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46548: LD_ADDR_VAR 0 41
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 3
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46592: LD_ADDR_VAR 0 42
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46633: LD_ADDR_VAR 0 43
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: LIST
46672: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46673: LD_ADDR_VAR 0 44
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46714: LD_ADDR_VAR 0 45
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 3
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: LIST
46757: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46758: LD_ADDR_VAR 0 46
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 3
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 3
46789: NEG
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46804: LD_ADDR_VAR 0 47
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 3
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 3
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46837: LD_ADDR_VAR 0 48
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46868: LD_ADDR_VAR 0 49
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46897: LD_ADDR_VAR 0 50
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: LD_INT 3
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46926: LD_ADDR_VAR 0 51
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46957: LD_ADDR_VAR 0 52
46961: PUSH
46962: LD_INT 3
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 3
46976: NEG
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46990: LD_ADDR_VAR 0 53
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 3
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: LIST
47033: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47034: LD_ADDR_VAR 0 54
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 3
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47075: LD_ADDR_VAR 0 55
47079: PUSH
47080: LD_INT 3
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 3
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 3
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47115: LD_ADDR_VAR 0 56
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 3
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 3
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: LIST
47155: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47156: LD_ADDR_VAR 0 57
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 3
47174: NEG
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 3
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47200: LD_ADDR_VAR 0 58
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: LD_INT 3
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 3
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 3
47231: NEG
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47246: LD_ADDR_VAR 0 59
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: LIST
47289: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47290: LD_ADDR_VAR 0 60
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: LIST
47330: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47331: LD_ADDR_VAR 0 61
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47371: LD_ADDR_VAR 0 62
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: LIST
47411: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47412: LD_ADDR_VAR 0 63
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47456: LD_ADDR_VAR 0 64
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: ST_TO_ADDR
// end ; 2 :
47502: GO 50768
47504: LD_INT 2
47506: DOUBLE
47507: EQUAL
47508: IFTRUE 47512
47510: GO 50767
47512: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47513: LD_ADDR_VAR 0 29
47517: PUSH
47518: LD_INT 4
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 4
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 5
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 5
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 4
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 3
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 3
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 5
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 3
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 3
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 4
47633: PUSH
47634: LD_INT 3
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 4
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 4
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 4
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 4
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 4
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 3
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: LD_INT 4
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: LD_INT 5
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 5
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 4
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: LD_INT 3
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 5
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 4
47852: NEG
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 4
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 4
47875: NEG
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 4
47898: NEG
47899: PUSH
47900: LD_INT 4
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 4
47910: NEG
47911: PUSH
47912: LD_INT 5
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 3
47922: NEG
47923: PUSH
47924: LD_INT 4
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 3
47934: NEG
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 4
47946: NEG
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 5
47958: NEG
47959: PUSH
47960: LD_INT 4
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 5
47970: NEG
47971: PUSH
47972: LD_INT 5
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: LD_INT 5
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 5
47994: NEG
47995: PUSH
47996: LD_INT 3
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48051: LD_ADDR_VAR 0 30
48055: PUSH
48056: LD_INT 4
48058: PUSH
48059: LD_INT 4
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 4
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 5
48078: PUSH
48079: LD_INT 4
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 5
48088: PUSH
48089: LD_INT 5
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 4
48098: PUSH
48099: LD_INT 5
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: LD_INT 4
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 5
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 3
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 3
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 4
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 4
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 4
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 4
48241: NEG
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 4
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 4
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 5
48297: NEG
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 5
48308: NEG
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 5
48320: NEG
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 3
48332: NEG
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 3
48343: NEG
48344: PUSH
48345: LD_INT 3
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: NEG
48356: PUSH
48357: LD_INT 4
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 3
48391: NEG
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 4
48403: NEG
48404: PUSH
48405: LD_INT 3
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 4
48415: NEG
48416: PUSH
48417: LD_INT 4
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: LD_INT 4
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 4
48439: NEG
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 4
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 5
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 4
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 3
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 3
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: LD_INT 4
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 5
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: LD_INT 3
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: LD_INT 5
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48598: LD_ADDR_VAR 0 31
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 4
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: LD_INT 4
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 5
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 5
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: LD_INT 4
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 3
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 5
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 3
48698: NEG
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 3
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 4
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 4
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 4
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 4
48800: NEG
48801: PUSH
48802: LD_INT 4
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 4
48812: NEG
48813: PUSH
48814: LD_INT 5
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: LD_INT 4
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 4
48848: NEG
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 5
48860: NEG
48861: PUSH
48862: LD_INT 4
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 5
48872: NEG
48873: PUSH
48874: LD_INT 5
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: NEG
48885: PUSH
48886: LD_INT 5
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 5
48896: NEG
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 3
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 4
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 3
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 4
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 4
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 4
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 4
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 5
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 5
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 4
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 3
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 5
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49148: LD_ADDR_VAR 0 32
49152: PUSH
49153: LD_INT 4
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 4
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 3
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 4
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 5
49211: NEG
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 5
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 5
49234: NEG
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 3
49257: NEG
49258: PUSH
49259: LD_INT 3
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 3
49269: NEG
49270: PUSH
49271: LD_INT 4
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: LD_INT 3
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 3
49305: NEG
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 4
49317: NEG
49318: PUSH
49319: LD_INT 3
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 4
49329: NEG
49330: PUSH
49331: LD_INT 4
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 4
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 4
49353: NEG
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 4
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 5
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 4
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 3
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 3
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 4
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 5
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 3
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 5
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 3
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 4
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 4
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 4
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 4
49560: PUSH
49561: LD_INT 4
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 4
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 5
49580: PUSH
49581: LD_INT 4
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 5
49590: PUSH
49591: LD_INT 5
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 4
49600: PUSH
49601: LD_INT 5
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 3
49610: PUSH
49611: LD_INT 4
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: LD_INT 3
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 5
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: PUSH
49641: LD_INT 5
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49695: LD_ADDR_VAR 0 33
49699: PUSH
49700: LD_INT 4
49702: NEG
49703: PUSH
49704: LD_INT 4
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 4
49714: NEG
49715: PUSH
49716: LD_INT 5
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 3
49726: NEG
49727: PUSH
49728: LD_INT 4
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 3
49738: NEG
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 4
49750: NEG
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 5
49762: NEG
49763: PUSH
49764: LD_INT 4
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 5
49774: NEG
49775: PUSH
49776: LD_INT 5
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: LD_INT 5
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 5
49798: NEG
49799: PUSH
49800: LD_INT 3
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 3
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 4
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 3
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 3
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 4
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: LD_INT 4
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 4
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 4
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 5
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 5
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 4
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 5
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 3
50005: PUSH
50006: LD_INT 3
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 4
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 4
50035: PUSH
50036: LD_INT 4
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 3
50045: PUSH
50046: LD_INT 4
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 3
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 4
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 4
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 4
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 3
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: LD_INT 4
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 5
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 5
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 4
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 3
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 5
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: NEG
50178: PUSH
50179: LD_INT 3
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50233: LD_ADDR_VAR 0 34
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 4
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 5
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 4
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 3
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 4
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 5
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 3
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: LD_INT 5
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 3
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 3
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 4
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 4
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 4
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 4
50435: PUSH
50436: LD_INT 4
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 4
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 5
50455: PUSH
50456: LD_INT 4
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 5
50465: PUSH
50466: LD_INT 5
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 4
50475: PUSH
50476: LD_INT 5
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: LD_INT 4
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: LD_INT 3
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 5
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: LD_INT 5
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 3
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 4
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 4
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 3
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 4
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: LD_INT 2
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 4
50618: NEG
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 4
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 3
50641: NEG
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 4
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 5
50674: NEG
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 5
50685: NEG
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 5
50697: NEG
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 3
50709: NEG
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: ST_TO_ADDR
// end ; end ;
50765: GO 50768
50767: POP
// case btype of b_depot , b_warehouse :
50768: LD_VAR 0 1
50772: PUSH
50773: LD_INT 0
50775: DOUBLE
50776: EQUAL
50777: IFTRUE 50787
50779: LD_INT 1
50781: DOUBLE
50782: EQUAL
50783: IFTRUE 50787
50785: GO 50988
50787: POP
// case nation of nation_american :
50788: LD_VAR 0 5
50792: PUSH
50793: LD_INT 1
50795: DOUBLE
50796: EQUAL
50797: IFTRUE 50801
50799: GO 50857
50801: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50802: LD_ADDR_VAR 0 9
50806: PUSH
50807: LD_VAR 0 11
50811: PUSH
50812: LD_VAR 0 12
50816: PUSH
50817: LD_VAR 0 13
50821: PUSH
50822: LD_VAR 0 14
50826: PUSH
50827: LD_VAR 0 15
50831: PUSH
50832: LD_VAR 0 16
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: PUSH
50845: LD_VAR 0 4
50849: PUSH
50850: LD_INT 1
50852: PLUS
50853: ARRAY
50854: ST_TO_ADDR
50855: GO 50986
50857: LD_INT 2
50859: DOUBLE
50860: EQUAL
50861: IFTRUE 50865
50863: GO 50921
50865: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50866: LD_ADDR_VAR 0 9
50870: PUSH
50871: LD_VAR 0 17
50875: PUSH
50876: LD_VAR 0 18
50880: PUSH
50881: LD_VAR 0 19
50885: PUSH
50886: LD_VAR 0 20
50890: PUSH
50891: LD_VAR 0 21
50895: PUSH
50896: LD_VAR 0 22
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: PUSH
50909: LD_VAR 0 4
50913: PUSH
50914: LD_INT 1
50916: PLUS
50917: ARRAY
50918: ST_TO_ADDR
50919: GO 50986
50921: LD_INT 3
50923: DOUBLE
50924: EQUAL
50925: IFTRUE 50929
50927: GO 50985
50929: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50930: LD_ADDR_VAR 0 9
50934: PUSH
50935: LD_VAR 0 23
50939: PUSH
50940: LD_VAR 0 24
50944: PUSH
50945: LD_VAR 0 25
50949: PUSH
50950: LD_VAR 0 26
50954: PUSH
50955: LD_VAR 0 27
50959: PUSH
50960: LD_VAR 0 28
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: PUSH
50973: LD_VAR 0 4
50977: PUSH
50978: LD_INT 1
50980: PLUS
50981: ARRAY
50982: ST_TO_ADDR
50983: GO 50986
50985: POP
50986: GO 51541
50988: LD_INT 2
50990: DOUBLE
50991: EQUAL
50992: IFTRUE 51002
50994: LD_INT 3
50996: DOUBLE
50997: EQUAL
50998: IFTRUE 51002
51000: GO 51058
51002: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51003: LD_ADDR_VAR 0 9
51007: PUSH
51008: LD_VAR 0 29
51012: PUSH
51013: LD_VAR 0 30
51017: PUSH
51018: LD_VAR 0 31
51022: PUSH
51023: LD_VAR 0 32
51027: PUSH
51028: LD_VAR 0 33
51032: PUSH
51033: LD_VAR 0 34
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: PUSH
51046: LD_VAR 0 4
51050: PUSH
51051: LD_INT 1
51053: PLUS
51054: ARRAY
51055: ST_TO_ADDR
51056: GO 51541
51058: LD_INT 16
51060: DOUBLE
51061: EQUAL
51062: IFTRUE 51120
51064: LD_INT 17
51066: DOUBLE
51067: EQUAL
51068: IFTRUE 51120
51070: LD_INT 18
51072: DOUBLE
51073: EQUAL
51074: IFTRUE 51120
51076: LD_INT 19
51078: DOUBLE
51079: EQUAL
51080: IFTRUE 51120
51082: LD_INT 22
51084: DOUBLE
51085: EQUAL
51086: IFTRUE 51120
51088: LD_INT 20
51090: DOUBLE
51091: EQUAL
51092: IFTRUE 51120
51094: LD_INT 21
51096: DOUBLE
51097: EQUAL
51098: IFTRUE 51120
51100: LD_INT 23
51102: DOUBLE
51103: EQUAL
51104: IFTRUE 51120
51106: LD_INT 24
51108: DOUBLE
51109: EQUAL
51110: IFTRUE 51120
51112: LD_INT 25
51114: DOUBLE
51115: EQUAL
51116: IFTRUE 51120
51118: GO 51176
51120: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51121: LD_ADDR_VAR 0 9
51125: PUSH
51126: LD_VAR 0 35
51130: PUSH
51131: LD_VAR 0 36
51135: PUSH
51136: LD_VAR 0 37
51140: PUSH
51141: LD_VAR 0 38
51145: PUSH
51146: LD_VAR 0 39
51150: PUSH
51151: LD_VAR 0 40
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: PUSH
51164: LD_VAR 0 4
51168: PUSH
51169: LD_INT 1
51171: PLUS
51172: ARRAY
51173: ST_TO_ADDR
51174: GO 51541
51176: LD_INT 6
51178: DOUBLE
51179: EQUAL
51180: IFTRUE 51232
51182: LD_INT 7
51184: DOUBLE
51185: EQUAL
51186: IFTRUE 51232
51188: LD_INT 8
51190: DOUBLE
51191: EQUAL
51192: IFTRUE 51232
51194: LD_INT 13
51196: DOUBLE
51197: EQUAL
51198: IFTRUE 51232
51200: LD_INT 12
51202: DOUBLE
51203: EQUAL
51204: IFTRUE 51232
51206: LD_INT 15
51208: DOUBLE
51209: EQUAL
51210: IFTRUE 51232
51212: LD_INT 11
51214: DOUBLE
51215: EQUAL
51216: IFTRUE 51232
51218: LD_INT 14
51220: DOUBLE
51221: EQUAL
51222: IFTRUE 51232
51224: LD_INT 10
51226: DOUBLE
51227: EQUAL
51228: IFTRUE 51232
51230: GO 51288
51232: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51233: LD_ADDR_VAR 0 9
51237: PUSH
51238: LD_VAR 0 41
51242: PUSH
51243: LD_VAR 0 42
51247: PUSH
51248: LD_VAR 0 43
51252: PUSH
51253: LD_VAR 0 44
51257: PUSH
51258: LD_VAR 0 45
51262: PUSH
51263: LD_VAR 0 46
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: PUSH
51276: LD_VAR 0 4
51280: PUSH
51281: LD_INT 1
51283: PLUS
51284: ARRAY
51285: ST_TO_ADDR
51286: GO 51541
51288: LD_INT 36
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51296
51294: GO 51352
51296: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51297: LD_ADDR_VAR 0 9
51301: PUSH
51302: LD_VAR 0 47
51306: PUSH
51307: LD_VAR 0 48
51311: PUSH
51312: LD_VAR 0 49
51316: PUSH
51317: LD_VAR 0 50
51321: PUSH
51322: LD_VAR 0 51
51326: PUSH
51327: LD_VAR 0 52
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: PUSH
51340: LD_VAR 0 4
51344: PUSH
51345: LD_INT 1
51347: PLUS
51348: ARRAY
51349: ST_TO_ADDR
51350: GO 51541
51352: LD_INT 4
51354: DOUBLE
51355: EQUAL
51356: IFTRUE 51378
51358: LD_INT 5
51360: DOUBLE
51361: EQUAL
51362: IFTRUE 51378
51364: LD_INT 34
51366: DOUBLE
51367: EQUAL
51368: IFTRUE 51378
51370: LD_INT 37
51372: DOUBLE
51373: EQUAL
51374: IFTRUE 51378
51376: GO 51434
51378: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51379: LD_ADDR_VAR 0 9
51383: PUSH
51384: LD_VAR 0 53
51388: PUSH
51389: LD_VAR 0 54
51393: PUSH
51394: LD_VAR 0 55
51398: PUSH
51399: LD_VAR 0 56
51403: PUSH
51404: LD_VAR 0 57
51408: PUSH
51409: LD_VAR 0 58
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: PUSH
51422: LD_VAR 0 4
51426: PUSH
51427: LD_INT 1
51429: PLUS
51430: ARRAY
51431: ST_TO_ADDR
51432: GO 51541
51434: LD_INT 31
51436: DOUBLE
51437: EQUAL
51438: IFTRUE 51484
51440: LD_INT 32
51442: DOUBLE
51443: EQUAL
51444: IFTRUE 51484
51446: LD_INT 33
51448: DOUBLE
51449: EQUAL
51450: IFTRUE 51484
51452: LD_INT 27
51454: DOUBLE
51455: EQUAL
51456: IFTRUE 51484
51458: LD_INT 26
51460: DOUBLE
51461: EQUAL
51462: IFTRUE 51484
51464: LD_INT 28
51466: DOUBLE
51467: EQUAL
51468: IFTRUE 51484
51470: LD_INT 29
51472: DOUBLE
51473: EQUAL
51474: IFTRUE 51484
51476: LD_INT 30
51478: DOUBLE
51479: EQUAL
51480: IFTRUE 51484
51482: GO 51540
51484: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51485: LD_ADDR_VAR 0 9
51489: PUSH
51490: LD_VAR 0 59
51494: PUSH
51495: LD_VAR 0 60
51499: PUSH
51500: LD_VAR 0 61
51504: PUSH
51505: LD_VAR 0 62
51509: PUSH
51510: LD_VAR 0 63
51514: PUSH
51515: LD_VAR 0 64
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: PUSH
51528: LD_VAR 0 4
51532: PUSH
51533: LD_INT 1
51535: PLUS
51536: ARRAY
51537: ST_TO_ADDR
51538: GO 51541
51540: POP
// temp_list2 = [ ] ;
51541: LD_ADDR_VAR 0 10
51545: PUSH
51546: EMPTY
51547: ST_TO_ADDR
// for i in temp_list do
51548: LD_ADDR_VAR 0 8
51552: PUSH
51553: LD_VAR 0 9
51557: PUSH
51558: FOR_IN
51559: IFFALSE 51611
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51561: LD_ADDR_VAR 0 10
51565: PUSH
51566: LD_VAR 0 10
51570: PUSH
51571: LD_VAR 0 8
51575: PUSH
51576: LD_INT 1
51578: ARRAY
51579: PUSH
51580: LD_VAR 0 2
51584: PLUS
51585: PUSH
51586: LD_VAR 0 8
51590: PUSH
51591: LD_INT 2
51593: ARRAY
51594: PUSH
51595: LD_VAR 0 3
51599: PLUS
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: EMPTY
51606: LIST
51607: ADD
51608: ST_TO_ADDR
51609: GO 51558
51611: POP
51612: POP
// result = temp_list2 ;
51613: LD_ADDR_VAR 0 7
51617: PUSH
51618: LD_VAR 0 10
51622: ST_TO_ADDR
// end ;
51623: LD_VAR 0 7
51627: RET
// export function EnemyInRange ( unit , dist ) ; begin
51628: LD_INT 0
51630: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51631: LD_ADDR_VAR 0 3
51635: PUSH
51636: LD_VAR 0 1
51640: PPUSH
51641: CALL_OW 255
51645: PPUSH
51646: LD_VAR 0 1
51650: PPUSH
51651: CALL_OW 250
51655: PPUSH
51656: LD_VAR 0 1
51660: PPUSH
51661: CALL_OW 251
51665: PPUSH
51666: LD_VAR 0 2
51670: PPUSH
51671: CALL 25024 0 4
51675: PUSH
51676: LD_INT 4
51678: ARRAY
51679: ST_TO_ADDR
// end ;
51680: LD_VAR 0 3
51684: RET
// export function PlayerSeeMe ( unit ) ; begin
51685: LD_INT 0
51687: PPUSH
// result := See ( your_side , unit ) ;
51688: LD_ADDR_VAR 0 2
51692: PUSH
51693: LD_OWVAR 2
51697: PPUSH
51698: LD_VAR 0 1
51702: PPUSH
51703: CALL_OW 292
51707: ST_TO_ADDR
// end ;
51708: LD_VAR 0 2
51712: RET
// export function ReverseDir ( unit ) ; begin
51713: LD_INT 0
51715: PPUSH
// if not unit then
51716: LD_VAR 0 1
51720: NOT
51721: IFFALSE 51725
// exit ;
51723: GO 51748
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51725: LD_ADDR_VAR 0 2
51729: PUSH
51730: LD_VAR 0 1
51734: PPUSH
51735: CALL_OW 254
51739: PUSH
51740: LD_INT 3
51742: PLUS
51743: PUSH
51744: LD_INT 6
51746: MOD
51747: ST_TO_ADDR
// end ;
51748: LD_VAR 0 2
51752: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51753: LD_INT 0
51755: PPUSH
51756: PPUSH
51757: PPUSH
51758: PPUSH
51759: PPUSH
// if not hexes then
51760: LD_VAR 0 2
51764: NOT
51765: IFFALSE 51769
// exit ;
51767: GO 51917
// dist := 9999 ;
51769: LD_ADDR_VAR 0 5
51773: PUSH
51774: LD_INT 9999
51776: ST_TO_ADDR
// for i = 1 to hexes do
51777: LD_ADDR_VAR 0 4
51781: PUSH
51782: DOUBLE
51783: LD_INT 1
51785: DEC
51786: ST_TO_ADDR
51787: LD_VAR 0 2
51791: PUSH
51792: FOR_TO
51793: IFFALSE 51905
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51795: LD_VAR 0 1
51799: PPUSH
51800: LD_VAR 0 2
51804: PUSH
51805: LD_VAR 0 4
51809: ARRAY
51810: PUSH
51811: LD_INT 1
51813: ARRAY
51814: PPUSH
51815: LD_VAR 0 2
51819: PUSH
51820: LD_VAR 0 4
51824: ARRAY
51825: PUSH
51826: LD_INT 2
51828: ARRAY
51829: PPUSH
51830: CALL_OW 297
51834: PUSH
51835: LD_VAR 0 5
51839: LESS
51840: IFFALSE 51903
// begin hex := hexes [ i ] ;
51842: LD_ADDR_VAR 0 7
51846: PUSH
51847: LD_VAR 0 2
51851: PUSH
51852: LD_VAR 0 4
51856: ARRAY
51857: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51858: LD_ADDR_VAR 0 5
51862: PUSH
51863: LD_VAR 0 1
51867: PPUSH
51868: LD_VAR 0 2
51872: PUSH
51873: LD_VAR 0 4
51877: ARRAY
51878: PUSH
51879: LD_INT 1
51881: ARRAY
51882: PPUSH
51883: LD_VAR 0 2
51887: PUSH
51888: LD_VAR 0 4
51892: ARRAY
51893: PUSH
51894: LD_INT 2
51896: ARRAY
51897: PPUSH
51898: CALL_OW 297
51902: ST_TO_ADDR
// end ; end ;
51903: GO 51792
51905: POP
51906: POP
// result := hex ;
51907: LD_ADDR_VAR 0 3
51911: PUSH
51912: LD_VAR 0 7
51916: ST_TO_ADDR
// end ;
51917: LD_VAR 0 3
51921: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51922: LD_INT 0
51924: PPUSH
51925: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51926: LD_VAR 0 1
51930: NOT
51931: PUSH
51932: LD_VAR 0 1
51936: PUSH
51937: LD_INT 21
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 23
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PPUSH
51961: CALL_OW 69
51965: IN
51966: NOT
51967: OR
51968: IFFALSE 51972
// exit ;
51970: GO 52019
// for i = 1 to 3 do
51972: LD_ADDR_VAR 0 3
51976: PUSH
51977: DOUBLE
51978: LD_INT 1
51980: DEC
51981: ST_TO_ADDR
51982: LD_INT 3
51984: PUSH
51985: FOR_TO
51986: IFFALSE 52017
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51988: LD_VAR 0 1
51992: PPUSH
51993: CALL_OW 250
51997: PPUSH
51998: LD_VAR 0 1
52002: PPUSH
52003: CALL_OW 251
52007: PPUSH
52008: LD_INT 1
52010: PPUSH
52011: CALL_OW 453
52015: GO 51985
52017: POP
52018: POP
// end ;
52019: LD_VAR 0 2
52023: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52024: LD_INT 0
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52032: LD_VAR 0 1
52036: NOT
52037: PUSH
52038: LD_VAR 0 2
52042: NOT
52043: OR
52044: PUSH
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 314
52054: OR
52055: IFFALSE 52059
// exit ;
52057: GO 52500
// x := GetX ( enemy_unit ) ;
52059: LD_ADDR_VAR 0 7
52063: PUSH
52064: LD_VAR 0 2
52068: PPUSH
52069: CALL_OW 250
52073: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52074: LD_ADDR_VAR 0 8
52078: PUSH
52079: LD_VAR 0 2
52083: PPUSH
52084: CALL_OW 251
52088: ST_TO_ADDR
// if not x or not y then
52089: LD_VAR 0 7
52093: NOT
52094: PUSH
52095: LD_VAR 0 8
52099: NOT
52100: OR
52101: IFFALSE 52105
// exit ;
52103: GO 52500
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52105: LD_ADDR_VAR 0 6
52109: PUSH
52110: LD_VAR 0 7
52114: PPUSH
52115: LD_INT 0
52117: PPUSH
52118: LD_INT 4
52120: PPUSH
52121: CALL_OW 272
52125: PUSH
52126: LD_VAR 0 8
52130: PPUSH
52131: LD_INT 0
52133: PPUSH
52134: LD_INT 4
52136: PPUSH
52137: CALL_OW 273
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_VAR 0 7
52150: PPUSH
52151: LD_INT 1
52153: PPUSH
52154: LD_INT 4
52156: PPUSH
52157: CALL_OW 272
52161: PUSH
52162: LD_VAR 0 8
52166: PPUSH
52167: LD_INT 1
52169: PPUSH
52170: LD_INT 4
52172: PPUSH
52173: CALL_OW 273
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_VAR 0 7
52186: PPUSH
52187: LD_INT 2
52189: PPUSH
52190: LD_INT 4
52192: PPUSH
52193: CALL_OW 272
52197: PUSH
52198: LD_VAR 0 8
52202: PPUSH
52203: LD_INT 2
52205: PPUSH
52206: LD_INT 4
52208: PPUSH
52209: CALL_OW 273
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_VAR 0 7
52222: PPUSH
52223: LD_INT 3
52225: PPUSH
52226: LD_INT 4
52228: PPUSH
52229: CALL_OW 272
52233: PUSH
52234: LD_VAR 0 8
52238: PPUSH
52239: LD_INT 3
52241: PPUSH
52242: LD_INT 4
52244: PPUSH
52245: CALL_OW 273
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_VAR 0 7
52258: PPUSH
52259: LD_INT 4
52261: PPUSH
52262: LD_INT 4
52264: PPUSH
52265: CALL_OW 272
52269: PUSH
52270: LD_VAR 0 8
52274: PPUSH
52275: LD_INT 4
52277: PPUSH
52278: LD_INT 4
52280: PPUSH
52281: CALL_OW 273
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_VAR 0 7
52294: PPUSH
52295: LD_INT 5
52297: PPUSH
52298: LD_INT 4
52300: PPUSH
52301: CALL_OW 272
52305: PUSH
52306: LD_VAR 0 8
52310: PPUSH
52311: LD_INT 5
52313: PPUSH
52314: LD_INT 4
52316: PPUSH
52317: CALL_OW 273
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: ST_TO_ADDR
// for i = tmp downto 1 do
52334: LD_ADDR_VAR 0 4
52338: PUSH
52339: DOUBLE
52340: LD_VAR 0 6
52344: INC
52345: ST_TO_ADDR
52346: LD_INT 1
52348: PUSH
52349: FOR_DOWNTO
52350: IFFALSE 52451
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52352: LD_VAR 0 6
52356: PUSH
52357: LD_VAR 0 4
52361: ARRAY
52362: PUSH
52363: LD_INT 1
52365: ARRAY
52366: PPUSH
52367: LD_VAR 0 6
52371: PUSH
52372: LD_VAR 0 4
52376: ARRAY
52377: PUSH
52378: LD_INT 2
52380: ARRAY
52381: PPUSH
52382: CALL_OW 488
52386: NOT
52387: PUSH
52388: LD_VAR 0 6
52392: PUSH
52393: LD_VAR 0 4
52397: ARRAY
52398: PUSH
52399: LD_INT 1
52401: ARRAY
52402: PPUSH
52403: LD_VAR 0 6
52407: PUSH
52408: LD_VAR 0 4
52412: ARRAY
52413: PUSH
52414: LD_INT 2
52416: ARRAY
52417: PPUSH
52418: CALL_OW 428
52422: PUSH
52423: LD_INT 0
52425: NONEQUAL
52426: OR
52427: IFFALSE 52449
// tmp := Delete ( tmp , i ) ;
52429: LD_ADDR_VAR 0 6
52433: PUSH
52434: LD_VAR 0 6
52438: PPUSH
52439: LD_VAR 0 4
52443: PPUSH
52444: CALL_OW 3
52448: ST_TO_ADDR
52449: GO 52349
52451: POP
52452: POP
// j := GetClosestHex ( unit , tmp ) ;
52453: LD_ADDR_VAR 0 5
52457: PUSH
52458: LD_VAR 0 1
52462: PPUSH
52463: LD_VAR 0 6
52467: PPUSH
52468: CALL 51753 0 2
52472: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52473: LD_VAR 0 1
52477: PPUSH
52478: LD_VAR 0 5
52482: PUSH
52483: LD_INT 1
52485: ARRAY
52486: PPUSH
52487: LD_VAR 0 5
52491: PUSH
52492: LD_INT 2
52494: ARRAY
52495: PPUSH
52496: CALL_OW 111
// end ;
52500: LD_VAR 0 3
52504: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52505: LD_INT 0
52507: PPUSH
52508: PPUSH
52509: PPUSH
// uc_side = 0 ;
52510: LD_ADDR_OWVAR 20
52514: PUSH
52515: LD_INT 0
52517: ST_TO_ADDR
// uc_nation = 0 ;
52518: LD_ADDR_OWVAR 21
52522: PUSH
52523: LD_INT 0
52525: ST_TO_ADDR
// InitHc_All ( ) ;
52526: CALL_OW 584
// InitVc ;
52530: CALL_OW 20
// if mastodonts then
52534: LD_VAR 0 6
52538: IFFALSE 52605
// for i = 1 to mastodonts do
52540: LD_ADDR_VAR 0 11
52544: PUSH
52545: DOUBLE
52546: LD_INT 1
52548: DEC
52549: ST_TO_ADDR
52550: LD_VAR 0 6
52554: PUSH
52555: FOR_TO
52556: IFFALSE 52603
// begin vc_chassis := 31 ;
52558: LD_ADDR_OWVAR 37
52562: PUSH
52563: LD_INT 31
52565: ST_TO_ADDR
// vc_control := control_rider ;
52566: LD_ADDR_OWVAR 38
52570: PUSH
52571: LD_INT 4
52573: ST_TO_ADDR
// animal := CreateVehicle ;
52574: LD_ADDR_VAR 0 12
52578: PUSH
52579: CALL_OW 45
52583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52584: LD_VAR 0 12
52588: PPUSH
52589: LD_VAR 0 8
52593: PPUSH
52594: LD_INT 0
52596: PPUSH
52597: CALL 54793 0 3
// end ;
52601: GO 52555
52603: POP
52604: POP
// if horses then
52605: LD_VAR 0 5
52609: IFFALSE 52676
// for i = 1 to horses do
52611: LD_ADDR_VAR 0 11
52615: PUSH
52616: DOUBLE
52617: LD_INT 1
52619: DEC
52620: ST_TO_ADDR
52621: LD_VAR 0 5
52625: PUSH
52626: FOR_TO
52627: IFFALSE 52674
// begin hc_class := 21 ;
52629: LD_ADDR_OWVAR 28
52633: PUSH
52634: LD_INT 21
52636: ST_TO_ADDR
// hc_gallery :=  ;
52637: LD_ADDR_OWVAR 33
52641: PUSH
52642: LD_STRING 
52644: ST_TO_ADDR
// animal := CreateHuman ;
52645: LD_ADDR_VAR 0 12
52649: PUSH
52650: CALL_OW 44
52654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52655: LD_VAR 0 12
52659: PPUSH
52660: LD_VAR 0 8
52664: PPUSH
52665: LD_INT 0
52667: PPUSH
52668: CALL 54793 0 3
// end ;
52672: GO 52626
52674: POP
52675: POP
// if birds then
52676: LD_VAR 0 1
52680: IFFALSE 52747
// for i = 1 to birds do
52682: LD_ADDR_VAR 0 11
52686: PUSH
52687: DOUBLE
52688: LD_INT 1
52690: DEC
52691: ST_TO_ADDR
52692: LD_VAR 0 1
52696: PUSH
52697: FOR_TO
52698: IFFALSE 52745
// begin hc_class = 18 ;
52700: LD_ADDR_OWVAR 28
52704: PUSH
52705: LD_INT 18
52707: ST_TO_ADDR
// hc_gallery =  ;
52708: LD_ADDR_OWVAR 33
52712: PUSH
52713: LD_STRING 
52715: ST_TO_ADDR
// animal := CreateHuman ;
52716: LD_ADDR_VAR 0 12
52720: PUSH
52721: CALL_OW 44
52725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52726: LD_VAR 0 12
52730: PPUSH
52731: LD_VAR 0 8
52735: PPUSH
52736: LD_INT 0
52738: PPUSH
52739: CALL 54793 0 3
// end ;
52743: GO 52697
52745: POP
52746: POP
// if tigers then
52747: LD_VAR 0 2
52751: IFFALSE 52835
// for i = 1 to tigers do
52753: LD_ADDR_VAR 0 11
52757: PUSH
52758: DOUBLE
52759: LD_INT 1
52761: DEC
52762: ST_TO_ADDR
52763: LD_VAR 0 2
52767: PUSH
52768: FOR_TO
52769: IFFALSE 52833
// begin hc_class = class_tiger ;
52771: LD_ADDR_OWVAR 28
52775: PUSH
52776: LD_INT 14
52778: ST_TO_ADDR
// hc_gallery =  ;
52779: LD_ADDR_OWVAR 33
52783: PUSH
52784: LD_STRING 
52786: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52787: LD_ADDR_OWVAR 35
52791: PUSH
52792: LD_INT 7
52794: NEG
52795: PPUSH
52796: LD_INT 7
52798: PPUSH
52799: CALL_OW 12
52803: ST_TO_ADDR
// animal := CreateHuman ;
52804: LD_ADDR_VAR 0 12
52808: PUSH
52809: CALL_OW 44
52813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52814: LD_VAR 0 12
52818: PPUSH
52819: LD_VAR 0 8
52823: PPUSH
52824: LD_INT 0
52826: PPUSH
52827: CALL 54793 0 3
// end ;
52831: GO 52768
52833: POP
52834: POP
// if apemans then
52835: LD_VAR 0 3
52839: IFFALSE 52962
// for i = 1 to apemans do
52841: LD_ADDR_VAR 0 11
52845: PUSH
52846: DOUBLE
52847: LD_INT 1
52849: DEC
52850: ST_TO_ADDR
52851: LD_VAR 0 3
52855: PUSH
52856: FOR_TO
52857: IFFALSE 52960
// begin hc_class = class_apeman ;
52859: LD_ADDR_OWVAR 28
52863: PUSH
52864: LD_INT 12
52866: ST_TO_ADDR
// hc_gallery =  ;
52867: LD_ADDR_OWVAR 33
52871: PUSH
52872: LD_STRING 
52874: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52875: LD_ADDR_OWVAR 35
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PPUSH
52884: LD_INT 2
52886: PPUSH
52887: CALL_OW 12
52891: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52892: LD_ADDR_OWVAR 31
52896: PUSH
52897: LD_INT 1
52899: PPUSH
52900: LD_INT 3
52902: PPUSH
52903: CALL_OW 12
52907: PUSH
52908: LD_INT 1
52910: PPUSH
52911: LD_INT 3
52913: PPUSH
52914: CALL_OW 12
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// animal := CreateHuman ;
52931: LD_ADDR_VAR 0 12
52935: PUSH
52936: CALL_OW 44
52940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52941: LD_VAR 0 12
52945: PPUSH
52946: LD_VAR 0 8
52950: PPUSH
52951: LD_INT 0
52953: PPUSH
52954: CALL 54793 0 3
// end ;
52958: GO 52856
52960: POP
52961: POP
// if enchidnas then
52962: LD_VAR 0 4
52966: IFFALSE 53033
// for i = 1 to enchidnas do
52968: LD_ADDR_VAR 0 11
52972: PUSH
52973: DOUBLE
52974: LD_INT 1
52976: DEC
52977: ST_TO_ADDR
52978: LD_VAR 0 4
52982: PUSH
52983: FOR_TO
52984: IFFALSE 53031
// begin hc_class = 13 ;
52986: LD_ADDR_OWVAR 28
52990: PUSH
52991: LD_INT 13
52993: ST_TO_ADDR
// hc_gallery =  ;
52994: LD_ADDR_OWVAR 33
52998: PUSH
52999: LD_STRING 
53001: ST_TO_ADDR
// animal := CreateHuman ;
53002: LD_ADDR_VAR 0 12
53006: PUSH
53007: CALL_OW 44
53011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53012: LD_VAR 0 12
53016: PPUSH
53017: LD_VAR 0 8
53021: PPUSH
53022: LD_INT 0
53024: PPUSH
53025: CALL 54793 0 3
// end ;
53029: GO 52983
53031: POP
53032: POP
// if fishes then
53033: LD_VAR 0 7
53037: IFFALSE 53104
// for i = 1 to fishes do
53039: LD_ADDR_VAR 0 11
53043: PUSH
53044: DOUBLE
53045: LD_INT 1
53047: DEC
53048: ST_TO_ADDR
53049: LD_VAR 0 7
53053: PUSH
53054: FOR_TO
53055: IFFALSE 53102
// begin hc_class = 20 ;
53057: LD_ADDR_OWVAR 28
53061: PUSH
53062: LD_INT 20
53064: ST_TO_ADDR
// hc_gallery =  ;
53065: LD_ADDR_OWVAR 33
53069: PUSH
53070: LD_STRING 
53072: ST_TO_ADDR
// animal := CreateHuman ;
53073: LD_ADDR_VAR 0 12
53077: PUSH
53078: CALL_OW 44
53082: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53083: LD_VAR 0 12
53087: PPUSH
53088: LD_VAR 0 9
53092: PPUSH
53093: LD_INT 0
53095: PPUSH
53096: CALL 54793 0 3
// end ;
53100: GO 53054
53102: POP
53103: POP
// end ;
53104: LD_VAR 0 10
53108: RET
// export function WantHeal ( sci , unit ) ; begin
53109: LD_INT 0
53111: PPUSH
// if GetTaskList ( sci ) > 0 then
53112: LD_VAR 0 1
53116: PPUSH
53117: CALL_OW 437
53121: PUSH
53122: LD_INT 0
53124: GREATER
53125: IFFALSE 53195
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53127: LD_VAR 0 1
53131: PPUSH
53132: CALL_OW 437
53136: PUSH
53137: LD_INT 1
53139: ARRAY
53140: PUSH
53141: LD_INT 1
53143: ARRAY
53144: PUSH
53145: LD_STRING l
53147: EQUAL
53148: PUSH
53149: LD_VAR 0 1
53153: PPUSH
53154: CALL_OW 437
53158: PUSH
53159: LD_INT 1
53161: ARRAY
53162: PUSH
53163: LD_INT 4
53165: ARRAY
53166: PUSH
53167: LD_VAR 0 2
53171: EQUAL
53172: AND
53173: IFFALSE 53185
// result := true else
53175: LD_ADDR_VAR 0 3
53179: PUSH
53180: LD_INT 1
53182: ST_TO_ADDR
53183: GO 53193
// result := false ;
53185: LD_ADDR_VAR 0 3
53189: PUSH
53190: LD_INT 0
53192: ST_TO_ADDR
// end else
53193: GO 53203
// result := false ;
53195: LD_ADDR_VAR 0 3
53199: PUSH
53200: LD_INT 0
53202: ST_TO_ADDR
// end ;
53203: LD_VAR 0 3
53207: RET
// export function HealTarget ( sci ) ; begin
53208: LD_INT 0
53210: PPUSH
// if not sci then
53211: LD_VAR 0 1
53215: NOT
53216: IFFALSE 53220
// exit ;
53218: GO 53285
// result := 0 ;
53220: LD_ADDR_VAR 0 2
53224: PUSH
53225: LD_INT 0
53227: ST_TO_ADDR
// if GetTaskList ( sci ) then
53228: LD_VAR 0 1
53232: PPUSH
53233: CALL_OW 437
53237: IFFALSE 53285
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53239: LD_VAR 0 1
53243: PPUSH
53244: CALL_OW 437
53248: PUSH
53249: LD_INT 1
53251: ARRAY
53252: PUSH
53253: LD_INT 1
53255: ARRAY
53256: PUSH
53257: LD_STRING l
53259: EQUAL
53260: IFFALSE 53285
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53262: LD_ADDR_VAR 0 2
53266: PUSH
53267: LD_VAR 0 1
53271: PPUSH
53272: CALL_OW 437
53276: PUSH
53277: LD_INT 1
53279: ARRAY
53280: PUSH
53281: LD_INT 4
53283: ARRAY
53284: ST_TO_ADDR
// end ;
53285: LD_VAR 0 2
53289: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53290: LD_INT 0
53292: PPUSH
53293: PPUSH
53294: PPUSH
53295: PPUSH
// if not base_units then
53296: LD_VAR 0 1
53300: NOT
53301: IFFALSE 53305
// exit ;
53303: GO 53392
// result := false ;
53305: LD_ADDR_VAR 0 2
53309: PUSH
53310: LD_INT 0
53312: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53313: LD_ADDR_VAR 0 5
53317: PUSH
53318: LD_VAR 0 1
53322: PPUSH
53323: LD_INT 21
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PPUSH
53333: CALL_OW 72
53337: ST_TO_ADDR
// if not tmp then
53338: LD_VAR 0 5
53342: NOT
53343: IFFALSE 53347
// exit ;
53345: GO 53392
// for i in tmp do
53347: LD_ADDR_VAR 0 3
53351: PUSH
53352: LD_VAR 0 5
53356: PUSH
53357: FOR_IN
53358: IFFALSE 53390
// begin result := EnemyInRange ( i , 22 ) ;
53360: LD_ADDR_VAR 0 2
53364: PUSH
53365: LD_VAR 0 3
53369: PPUSH
53370: LD_INT 22
53372: PPUSH
53373: CALL 51628 0 2
53377: ST_TO_ADDR
// if result then
53378: LD_VAR 0 2
53382: IFFALSE 53388
// exit ;
53384: POP
53385: POP
53386: GO 53392
// end ;
53388: GO 53357
53390: POP
53391: POP
// end ;
53392: LD_VAR 0 2
53396: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53397: LD_INT 0
53399: PPUSH
53400: PPUSH
// if not units then
53401: LD_VAR 0 1
53405: NOT
53406: IFFALSE 53410
// exit ;
53408: GO 53480
// result := [ ] ;
53410: LD_ADDR_VAR 0 3
53414: PUSH
53415: EMPTY
53416: ST_TO_ADDR
// for i in units do
53417: LD_ADDR_VAR 0 4
53421: PUSH
53422: LD_VAR 0 1
53426: PUSH
53427: FOR_IN
53428: IFFALSE 53478
// if GetTag ( i ) = tag then
53430: LD_VAR 0 4
53434: PPUSH
53435: CALL_OW 110
53439: PUSH
53440: LD_VAR 0 2
53444: EQUAL
53445: IFFALSE 53476
// result := Replace ( result , result + 1 , i ) ;
53447: LD_ADDR_VAR 0 3
53451: PUSH
53452: LD_VAR 0 3
53456: PPUSH
53457: LD_VAR 0 3
53461: PUSH
53462: LD_INT 1
53464: PLUS
53465: PPUSH
53466: LD_VAR 0 4
53470: PPUSH
53471: CALL_OW 1
53475: ST_TO_ADDR
53476: GO 53427
53478: POP
53479: POP
// end ;
53480: LD_VAR 0 3
53484: RET
// export function IsDriver ( un ) ; begin
53485: LD_INT 0
53487: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53488: LD_ADDR_VAR 0 2
53492: PUSH
53493: LD_VAR 0 1
53497: PUSH
53498: LD_INT 55
53500: PUSH
53501: EMPTY
53502: LIST
53503: PPUSH
53504: CALL_OW 69
53508: IN
53509: ST_TO_ADDR
// end ;
53510: LD_VAR 0 2
53514: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53515: LD_INT 0
53517: PPUSH
53518: PPUSH
// list := [ ] ;
53519: LD_ADDR_VAR 0 5
53523: PUSH
53524: EMPTY
53525: ST_TO_ADDR
// case d of 0 :
53526: LD_VAR 0 3
53530: PUSH
53531: LD_INT 0
53533: DOUBLE
53534: EQUAL
53535: IFTRUE 53539
53537: GO 53672
53539: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53540: LD_ADDR_VAR 0 5
53544: PUSH
53545: LD_VAR 0 1
53549: PUSH
53550: LD_INT 4
53552: MINUS
53553: PUSH
53554: LD_VAR 0 2
53558: PUSH
53559: LD_INT 4
53561: MINUS
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: LIST
53570: PUSH
53571: LD_VAR 0 1
53575: PUSH
53576: LD_INT 3
53578: MINUS
53579: PUSH
53580: LD_VAR 0 2
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: LIST
53592: PUSH
53593: LD_VAR 0 1
53597: PUSH
53598: LD_INT 4
53600: PLUS
53601: PUSH
53602: LD_VAR 0 2
53606: PUSH
53607: LD_INT 4
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: PUSH
53615: LD_VAR 0 1
53619: PUSH
53620: LD_INT 3
53622: PLUS
53623: PUSH
53624: LD_VAR 0 2
53628: PUSH
53629: LD_INT 3
53631: PLUS
53632: PUSH
53633: LD_INT 5
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: PUSH
53641: LD_VAR 0 1
53645: PUSH
53646: LD_VAR 0 2
53650: PUSH
53651: LD_INT 4
53653: PLUS
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: ST_TO_ADDR
// end ; 1 :
53670: GO 54370
53672: LD_INT 1
53674: DOUBLE
53675: EQUAL
53676: IFTRUE 53680
53678: GO 53813
53680: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53681: LD_ADDR_VAR 0 5
53685: PUSH
53686: LD_VAR 0 1
53690: PUSH
53691: LD_VAR 0 2
53695: PUSH
53696: LD_INT 4
53698: MINUS
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: PUSH
53708: LD_VAR 0 1
53712: PUSH
53713: LD_INT 3
53715: MINUS
53716: PUSH
53717: LD_VAR 0 2
53721: PUSH
53722: LD_INT 3
53724: MINUS
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: PUSH
53734: LD_VAR 0 1
53738: PUSH
53739: LD_INT 4
53741: MINUS
53742: PUSH
53743: LD_VAR 0 2
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: PUSH
53756: LD_VAR 0 1
53760: PUSH
53761: LD_VAR 0 2
53765: PUSH
53766: LD_INT 3
53768: PLUS
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: PUSH
53778: LD_VAR 0 1
53782: PUSH
53783: LD_INT 4
53785: PLUS
53786: PUSH
53787: LD_VAR 0 2
53791: PUSH
53792: LD_INT 4
53794: PLUS
53795: PUSH
53796: LD_INT 5
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: ST_TO_ADDR
// end ; 2 :
53811: GO 54370
53813: LD_INT 2
53815: DOUBLE
53816: EQUAL
53817: IFTRUE 53821
53819: GO 53950
53821: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53822: LD_ADDR_VAR 0 5
53826: PUSH
53827: LD_VAR 0 1
53831: PUSH
53832: LD_VAR 0 2
53836: PUSH
53837: LD_INT 3
53839: MINUS
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: LIST
53848: PUSH
53849: LD_VAR 0 1
53853: PUSH
53854: LD_INT 4
53856: PLUS
53857: PUSH
53858: LD_VAR 0 2
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: PUSH
53871: LD_VAR 0 1
53875: PUSH
53876: LD_VAR 0 2
53880: PUSH
53881: LD_INT 4
53883: PLUS
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: PUSH
53893: LD_VAR 0 1
53897: PUSH
53898: LD_INT 3
53900: MINUS
53901: PUSH
53902: LD_VAR 0 2
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: PUSH
53915: LD_VAR 0 1
53919: PUSH
53920: LD_INT 4
53922: MINUS
53923: PUSH
53924: LD_VAR 0 2
53928: PUSH
53929: LD_INT 4
53931: MINUS
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: LIST
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: ST_TO_ADDR
// end ; 3 :
53948: GO 54370
53950: LD_INT 3
53952: DOUBLE
53953: EQUAL
53954: IFTRUE 53958
53956: GO 54091
53958: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53959: LD_ADDR_VAR 0 5
53963: PUSH
53964: LD_VAR 0 1
53968: PUSH
53969: LD_INT 3
53971: PLUS
53972: PUSH
53973: LD_VAR 0 2
53977: PUSH
53978: LD_INT 4
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: PUSH
53986: LD_VAR 0 1
53990: PUSH
53991: LD_INT 4
53993: PLUS
53994: PUSH
53995: LD_VAR 0 2
53999: PUSH
54000: LD_INT 4
54002: PLUS
54003: PUSH
54004: LD_INT 5
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: PUSH
54012: LD_VAR 0 1
54016: PUSH
54017: LD_INT 4
54019: MINUS
54020: PUSH
54021: LD_VAR 0 2
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: PUSH
54034: LD_VAR 0 1
54038: PUSH
54039: LD_VAR 0 2
54043: PUSH
54044: LD_INT 4
54046: MINUS
54047: PUSH
54048: LD_INT 3
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: LIST
54055: PUSH
54056: LD_VAR 0 1
54060: PUSH
54061: LD_INT 3
54063: MINUS
54064: PUSH
54065: LD_VAR 0 2
54069: PUSH
54070: LD_INT 3
54072: MINUS
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: LIST
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: ST_TO_ADDR
// end ; 4 :
54089: GO 54370
54091: LD_INT 4
54093: DOUBLE
54094: EQUAL
54095: IFTRUE 54099
54097: GO 54232
54099: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54100: LD_ADDR_VAR 0 5
54104: PUSH
54105: LD_VAR 0 1
54109: PUSH
54110: LD_VAR 0 2
54114: PUSH
54115: LD_INT 4
54117: PLUS
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: LIST
54126: PUSH
54127: LD_VAR 0 1
54131: PUSH
54132: LD_INT 3
54134: PLUS
54135: PUSH
54136: LD_VAR 0 2
54140: PUSH
54141: LD_INT 3
54143: PLUS
54144: PUSH
54145: LD_INT 5
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: LIST
54152: PUSH
54153: LD_VAR 0 1
54157: PUSH
54158: LD_INT 4
54160: PLUS
54161: PUSH
54162: LD_VAR 0 2
54166: PUSH
54167: LD_INT 4
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: PUSH
54175: LD_VAR 0 1
54179: PUSH
54180: LD_VAR 0 2
54184: PUSH
54185: LD_INT 3
54187: MINUS
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: PUSH
54197: LD_VAR 0 1
54201: PUSH
54202: LD_INT 4
54204: MINUS
54205: PUSH
54206: LD_VAR 0 2
54210: PUSH
54211: LD_INT 4
54213: MINUS
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
// end ; 5 :
54230: GO 54370
54232: LD_INT 5
54234: DOUBLE
54235: EQUAL
54236: IFTRUE 54240
54238: GO 54369
54240: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54241: LD_ADDR_VAR 0 5
54245: PUSH
54246: LD_VAR 0 1
54250: PUSH
54251: LD_INT 4
54253: MINUS
54254: PUSH
54255: LD_VAR 0 2
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: LIST
54267: PUSH
54268: LD_VAR 0 1
54272: PUSH
54273: LD_VAR 0 2
54277: PUSH
54278: LD_INT 4
54280: MINUS
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: LIST
54289: PUSH
54290: LD_VAR 0 1
54294: PUSH
54295: LD_INT 4
54297: PLUS
54298: PUSH
54299: LD_VAR 0 2
54303: PUSH
54304: LD_INT 4
54306: PLUS
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: PUSH
54316: LD_VAR 0 1
54320: PUSH
54321: LD_INT 3
54323: PLUS
54324: PUSH
54325: LD_VAR 0 2
54329: PUSH
54330: LD_INT 4
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: PUSH
54338: LD_VAR 0 1
54342: PUSH
54343: LD_VAR 0 2
54347: PUSH
54348: LD_INT 3
54350: PLUS
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: ST_TO_ADDR
// end ; end ;
54367: GO 54370
54369: POP
// result := list ;
54370: LD_ADDR_VAR 0 4
54374: PUSH
54375: LD_VAR 0 5
54379: ST_TO_ADDR
// end ;
54380: LD_VAR 0 4
54384: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54385: LD_INT 0
54387: PPUSH
54388: PPUSH
54389: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54390: LD_VAR 0 1
54394: NOT
54395: PUSH
54396: LD_VAR 0 2
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: LD_INT 4
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: IN
54419: NOT
54420: OR
54421: IFFALSE 54425
// exit ;
54423: GO 54517
// tmp := [ ] ;
54425: LD_ADDR_VAR 0 5
54429: PUSH
54430: EMPTY
54431: ST_TO_ADDR
// for i in units do
54432: LD_ADDR_VAR 0 4
54436: PUSH
54437: LD_VAR 0 1
54441: PUSH
54442: FOR_IN
54443: IFFALSE 54486
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54445: LD_ADDR_VAR 0 5
54449: PUSH
54450: LD_VAR 0 5
54454: PPUSH
54455: LD_VAR 0 5
54459: PUSH
54460: LD_INT 1
54462: PLUS
54463: PPUSH
54464: LD_VAR 0 4
54468: PPUSH
54469: LD_VAR 0 2
54473: PPUSH
54474: CALL_OW 259
54478: PPUSH
54479: CALL_OW 2
54483: ST_TO_ADDR
54484: GO 54442
54486: POP
54487: POP
// if not tmp then
54488: LD_VAR 0 5
54492: NOT
54493: IFFALSE 54497
// exit ;
54495: GO 54517
// result := SortListByListDesc ( units , tmp ) ;
54497: LD_ADDR_VAR 0 3
54501: PUSH
54502: LD_VAR 0 1
54506: PPUSH
54507: LD_VAR 0 5
54511: PPUSH
54512: CALL_OW 77
54516: ST_TO_ADDR
// end ;
54517: LD_VAR 0 3
54521: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54522: LD_INT 0
54524: PPUSH
54525: PPUSH
54526: PPUSH
// result := false ;
54527: LD_ADDR_VAR 0 3
54531: PUSH
54532: LD_INT 0
54534: ST_TO_ADDR
// x := GetX ( building ) ;
54535: LD_ADDR_VAR 0 4
54539: PUSH
54540: LD_VAR 0 2
54544: PPUSH
54545: CALL_OW 250
54549: ST_TO_ADDR
// y := GetY ( building ) ;
54550: LD_ADDR_VAR 0 5
54554: PUSH
54555: LD_VAR 0 2
54559: PPUSH
54560: CALL_OW 251
54564: ST_TO_ADDR
// if not building or not x or not y then
54565: LD_VAR 0 2
54569: NOT
54570: PUSH
54571: LD_VAR 0 4
54575: NOT
54576: OR
54577: PUSH
54578: LD_VAR 0 5
54582: NOT
54583: OR
54584: IFFALSE 54588
// exit ;
54586: GO 54680
// if GetTaskList ( unit ) then
54588: LD_VAR 0 1
54592: PPUSH
54593: CALL_OW 437
54597: IFFALSE 54680
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54599: LD_STRING e
54601: PUSH
54602: LD_VAR 0 1
54606: PPUSH
54607: CALL_OW 437
54611: PUSH
54612: LD_INT 1
54614: ARRAY
54615: PUSH
54616: LD_INT 1
54618: ARRAY
54619: EQUAL
54620: PUSH
54621: LD_VAR 0 4
54625: PUSH
54626: LD_VAR 0 1
54630: PPUSH
54631: CALL_OW 437
54635: PUSH
54636: LD_INT 1
54638: ARRAY
54639: PUSH
54640: LD_INT 2
54642: ARRAY
54643: EQUAL
54644: AND
54645: PUSH
54646: LD_VAR 0 5
54650: PUSH
54651: LD_VAR 0 1
54655: PPUSH
54656: CALL_OW 437
54660: PUSH
54661: LD_INT 1
54663: ARRAY
54664: PUSH
54665: LD_INT 3
54667: ARRAY
54668: EQUAL
54669: AND
54670: IFFALSE 54680
// result := true end ;
54672: LD_ADDR_VAR 0 3
54676: PUSH
54677: LD_INT 1
54679: ST_TO_ADDR
// end ;
54680: LD_VAR 0 3
54684: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54685: LD_INT 0
54687: PPUSH
// result := false ;
54688: LD_ADDR_VAR 0 4
54692: PUSH
54693: LD_INT 0
54695: ST_TO_ADDR
// if GetTaskList ( unit ) then
54696: LD_VAR 0 1
54700: PPUSH
54701: CALL_OW 437
54705: IFFALSE 54788
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54707: LD_STRING M
54709: PUSH
54710: LD_VAR 0 1
54714: PPUSH
54715: CALL_OW 437
54719: PUSH
54720: LD_INT 1
54722: ARRAY
54723: PUSH
54724: LD_INT 1
54726: ARRAY
54727: EQUAL
54728: PUSH
54729: LD_VAR 0 2
54733: PUSH
54734: LD_VAR 0 1
54738: PPUSH
54739: CALL_OW 437
54743: PUSH
54744: LD_INT 1
54746: ARRAY
54747: PUSH
54748: LD_INT 2
54750: ARRAY
54751: EQUAL
54752: AND
54753: PUSH
54754: LD_VAR 0 3
54758: PUSH
54759: LD_VAR 0 1
54763: PPUSH
54764: CALL_OW 437
54768: PUSH
54769: LD_INT 1
54771: ARRAY
54772: PUSH
54773: LD_INT 3
54775: ARRAY
54776: EQUAL
54777: AND
54778: IFFALSE 54788
// result := true ;
54780: LD_ADDR_VAR 0 4
54784: PUSH
54785: LD_INT 1
54787: ST_TO_ADDR
// end ; end ;
54788: LD_VAR 0 4
54792: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54793: LD_INT 0
54795: PPUSH
54796: PPUSH
54797: PPUSH
54798: PPUSH
// if not unit or not area then
54799: LD_VAR 0 1
54803: NOT
54804: PUSH
54805: LD_VAR 0 2
54809: NOT
54810: OR
54811: IFFALSE 54815
// exit ;
54813: GO 54979
// tmp := AreaToList ( area , i ) ;
54815: LD_ADDR_VAR 0 6
54819: PUSH
54820: LD_VAR 0 2
54824: PPUSH
54825: LD_VAR 0 5
54829: PPUSH
54830: CALL_OW 517
54834: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54835: LD_ADDR_VAR 0 5
54839: PUSH
54840: DOUBLE
54841: LD_INT 1
54843: DEC
54844: ST_TO_ADDR
54845: LD_VAR 0 6
54849: PUSH
54850: LD_INT 1
54852: ARRAY
54853: PUSH
54854: FOR_TO
54855: IFFALSE 54977
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54857: LD_ADDR_VAR 0 7
54861: PUSH
54862: LD_VAR 0 6
54866: PUSH
54867: LD_INT 1
54869: ARRAY
54870: PUSH
54871: LD_VAR 0 5
54875: ARRAY
54876: PUSH
54877: LD_VAR 0 6
54881: PUSH
54882: LD_INT 2
54884: ARRAY
54885: PUSH
54886: LD_VAR 0 5
54890: ARRAY
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54896: LD_VAR 0 7
54900: PUSH
54901: LD_INT 1
54903: ARRAY
54904: PPUSH
54905: LD_VAR 0 7
54909: PUSH
54910: LD_INT 2
54912: ARRAY
54913: PPUSH
54914: CALL_OW 428
54918: PUSH
54919: LD_INT 0
54921: EQUAL
54922: IFFALSE 54975
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54924: LD_VAR 0 1
54928: PPUSH
54929: LD_VAR 0 7
54933: PUSH
54934: LD_INT 1
54936: ARRAY
54937: PPUSH
54938: LD_VAR 0 7
54942: PUSH
54943: LD_INT 2
54945: ARRAY
54946: PPUSH
54947: LD_VAR 0 3
54951: PPUSH
54952: CALL_OW 48
// result := IsPlaced ( unit ) ;
54956: LD_ADDR_VAR 0 4
54960: PUSH
54961: LD_VAR 0 1
54965: PPUSH
54966: CALL_OW 305
54970: ST_TO_ADDR
// exit ;
54971: POP
54972: POP
54973: GO 54979
// end ; end ;
54975: GO 54854
54977: POP
54978: POP
// end ;
54979: LD_VAR 0 4
54983: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54984: LD_INT 0
54986: PPUSH
54987: PPUSH
54988: PPUSH
// if not side or side > 8 then
54989: LD_VAR 0 1
54993: NOT
54994: PUSH
54995: LD_VAR 0 1
54999: PUSH
55000: LD_INT 8
55002: GREATER
55003: OR
55004: IFFALSE 55008
// exit ;
55006: GO 55195
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55008: LD_ADDR_VAR 0 4
55012: PUSH
55013: LD_INT 22
55015: PUSH
55016: LD_VAR 0 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 21
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PPUSH
55039: CALL_OW 69
55043: ST_TO_ADDR
// if not tmp then
55044: LD_VAR 0 4
55048: NOT
55049: IFFALSE 55053
// exit ;
55051: GO 55195
// enable_addtolog := true ;
55053: LD_ADDR_OWVAR 81
55057: PUSH
55058: LD_INT 1
55060: ST_TO_ADDR
// AddToLog ( [ ) ;
55061: LD_STRING [
55063: PPUSH
55064: CALL_OW 561
// for i in tmp do
55068: LD_ADDR_VAR 0 3
55072: PUSH
55073: LD_VAR 0 4
55077: PUSH
55078: FOR_IN
55079: IFFALSE 55186
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55081: LD_STRING [
55083: PUSH
55084: LD_VAR 0 3
55088: PPUSH
55089: CALL_OW 266
55093: STR
55094: PUSH
55095: LD_STRING , 
55097: STR
55098: PUSH
55099: LD_VAR 0 3
55103: PPUSH
55104: CALL_OW 250
55108: STR
55109: PUSH
55110: LD_STRING , 
55112: STR
55113: PUSH
55114: LD_VAR 0 3
55118: PPUSH
55119: CALL_OW 251
55123: STR
55124: PUSH
55125: LD_STRING , 
55127: STR
55128: PUSH
55129: LD_VAR 0 3
55133: PPUSH
55134: CALL_OW 254
55138: STR
55139: PUSH
55140: LD_STRING , 
55142: STR
55143: PUSH
55144: LD_VAR 0 3
55148: PPUSH
55149: LD_INT 1
55151: PPUSH
55152: CALL_OW 268
55156: STR
55157: PUSH
55158: LD_STRING , 
55160: STR
55161: PUSH
55162: LD_VAR 0 3
55166: PPUSH
55167: LD_INT 2
55169: PPUSH
55170: CALL_OW 268
55174: STR
55175: PUSH
55176: LD_STRING ],
55178: STR
55179: PPUSH
55180: CALL_OW 561
// end ;
55184: GO 55078
55186: POP
55187: POP
// AddToLog ( ]; ) ;
55188: LD_STRING ];
55190: PPUSH
55191: CALL_OW 561
// end ;
55195: LD_VAR 0 2
55199: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55200: LD_INT 0
55202: PPUSH
55203: PPUSH
55204: PPUSH
55205: PPUSH
55206: PPUSH
// if not area or not rate or not max then
55207: LD_VAR 0 1
55211: NOT
55212: PUSH
55213: LD_VAR 0 2
55217: NOT
55218: OR
55219: PUSH
55220: LD_VAR 0 4
55224: NOT
55225: OR
55226: IFFALSE 55230
// exit ;
55228: GO 55422
// while 1 do
55230: LD_INT 1
55232: IFFALSE 55422
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55234: LD_ADDR_VAR 0 9
55238: PUSH
55239: LD_VAR 0 1
55243: PPUSH
55244: LD_INT 1
55246: PPUSH
55247: CALL_OW 287
55251: PUSH
55252: LD_INT 10
55254: MUL
55255: ST_TO_ADDR
// r := rate / 10 ;
55256: LD_ADDR_VAR 0 7
55260: PUSH
55261: LD_VAR 0 2
55265: PUSH
55266: LD_INT 10
55268: DIVREAL
55269: ST_TO_ADDR
// time := 1 1$00 ;
55270: LD_ADDR_VAR 0 8
55274: PUSH
55275: LD_INT 2100
55277: ST_TO_ADDR
// if amount < min then
55278: LD_VAR 0 9
55282: PUSH
55283: LD_VAR 0 3
55287: LESS
55288: IFFALSE 55306
// r := r * 2 else
55290: LD_ADDR_VAR 0 7
55294: PUSH
55295: LD_VAR 0 7
55299: PUSH
55300: LD_INT 2
55302: MUL
55303: ST_TO_ADDR
55304: GO 55332
// if amount > max then
55306: LD_VAR 0 9
55310: PUSH
55311: LD_VAR 0 4
55315: GREATER
55316: IFFALSE 55332
// r := r / 2 ;
55318: LD_ADDR_VAR 0 7
55322: PUSH
55323: LD_VAR 0 7
55327: PUSH
55328: LD_INT 2
55330: DIVREAL
55331: ST_TO_ADDR
// time := time / r ;
55332: LD_ADDR_VAR 0 8
55336: PUSH
55337: LD_VAR 0 8
55341: PUSH
55342: LD_VAR 0 7
55346: DIVREAL
55347: ST_TO_ADDR
// if time < 0 then
55348: LD_VAR 0 8
55352: PUSH
55353: LD_INT 0
55355: LESS
55356: IFFALSE 55373
// time := time * - 1 ;
55358: LD_ADDR_VAR 0 8
55362: PUSH
55363: LD_VAR 0 8
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: MUL
55372: ST_TO_ADDR
// wait ( time ) ;
55373: LD_VAR 0 8
55377: PPUSH
55378: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55382: LD_INT 35
55384: PPUSH
55385: LD_INT 875
55387: PPUSH
55388: CALL_OW 12
55392: PPUSH
55393: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55397: LD_INT 1
55399: PPUSH
55400: LD_INT 5
55402: PPUSH
55403: CALL_OW 12
55407: PPUSH
55408: LD_VAR 0 1
55412: PPUSH
55413: LD_INT 1
55415: PPUSH
55416: CALL_OW 55
// end ;
55420: GO 55230
// end ;
55422: LD_VAR 0 5
55426: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55427: LD_INT 0
55429: PPUSH
55430: PPUSH
55431: PPUSH
55432: PPUSH
55433: PPUSH
55434: PPUSH
55435: PPUSH
55436: PPUSH
// if not turrets or not factories then
55437: LD_VAR 0 1
55441: NOT
55442: PUSH
55443: LD_VAR 0 2
55447: NOT
55448: OR
55449: IFFALSE 55453
// exit ;
55451: GO 55760
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55453: LD_ADDR_VAR 0 10
55457: PUSH
55458: LD_INT 5
55460: PUSH
55461: LD_INT 6
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: LD_INT 5
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 24
55495: PUSH
55496: LD_INT 25
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 23
55505: PUSH
55506: LD_INT 27
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 42
55519: PUSH
55520: LD_INT 43
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 44
55529: PUSH
55530: LD_INT 46
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 45
55539: PUSH
55540: LD_INT 47
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: ST_TO_ADDR
// result := [ ] ;
55557: LD_ADDR_VAR 0 3
55561: PUSH
55562: EMPTY
55563: ST_TO_ADDR
// for i in turrets do
55564: LD_ADDR_VAR 0 4
55568: PUSH
55569: LD_VAR 0 1
55573: PUSH
55574: FOR_IN
55575: IFFALSE 55758
// begin nat := GetNation ( i ) ;
55577: LD_ADDR_VAR 0 7
55581: PUSH
55582: LD_VAR 0 4
55586: PPUSH
55587: CALL_OW 248
55591: ST_TO_ADDR
// weapon := 0 ;
55592: LD_ADDR_VAR 0 8
55596: PUSH
55597: LD_INT 0
55599: ST_TO_ADDR
// if not nat then
55600: LD_VAR 0 7
55604: NOT
55605: IFFALSE 55609
// continue ;
55607: GO 55574
// for j in list [ nat ] do
55609: LD_ADDR_VAR 0 5
55613: PUSH
55614: LD_VAR 0 10
55618: PUSH
55619: LD_VAR 0 7
55623: ARRAY
55624: PUSH
55625: FOR_IN
55626: IFFALSE 55667
// if GetBWeapon ( i ) = j [ 1 ] then
55628: LD_VAR 0 4
55632: PPUSH
55633: CALL_OW 269
55637: PUSH
55638: LD_VAR 0 5
55642: PUSH
55643: LD_INT 1
55645: ARRAY
55646: EQUAL
55647: IFFALSE 55665
// begin weapon := j [ 2 ] ;
55649: LD_ADDR_VAR 0 8
55653: PUSH
55654: LD_VAR 0 5
55658: PUSH
55659: LD_INT 2
55661: ARRAY
55662: ST_TO_ADDR
// break ;
55663: GO 55667
// end ;
55665: GO 55625
55667: POP
55668: POP
// if not weapon then
55669: LD_VAR 0 8
55673: NOT
55674: IFFALSE 55678
// continue ;
55676: GO 55574
// for k in factories do
55678: LD_ADDR_VAR 0 6
55682: PUSH
55683: LD_VAR 0 2
55687: PUSH
55688: FOR_IN
55689: IFFALSE 55754
// begin weapons := AvailableWeaponList ( k ) ;
55691: LD_ADDR_VAR 0 9
55695: PUSH
55696: LD_VAR 0 6
55700: PPUSH
55701: CALL_OW 478
55705: ST_TO_ADDR
// if not weapons then
55706: LD_VAR 0 9
55710: NOT
55711: IFFALSE 55715
// continue ;
55713: GO 55688
// if weapon in weapons then
55715: LD_VAR 0 8
55719: PUSH
55720: LD_VAR 0 9
55724: IN
55725: IFFALSE 55752
// begin result := [ i , weapon ] ;
55727: LD_ADDR_VAR 0 3
55731: PUSH
55732: LD_VAR 0 4
55736: PUSH
55737: LD_VAR 0 8
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: ST_TO_ADDR
// exit ;
55746: POP
55747: POP
55748: POP
55749: POP
55750: GO 55760
// end ; end ;
55752: GO 55688
55754: POP
55755: POP
// end ;
55756: GO 55574
55758: POP
55759: POP
// end ;
55760: LD_VAR 0 3
55764: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55765: LD_INT 0
55767: PPUSH
// if not side or side > 8 then
55768: LD_VAR 0 3
55772: NOT
55773: PUSH
55774: LD_VAR 0 3
55778: PUSH
55779: LD_INT 8
55781: GREATER
55782: OR
55783: IFFALSE 55787
// exit ;
55785: GO 55846
// if not range then
55787: LD_VAR 0 4
55791: NOT
55792: IFFALSE 55803
// range := - 12 ;
55794: LD_ADDR_VAR 0 4
55798: PUSH
55799: LD_INT 12
55801: NEG
55802: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55803: LD_VAR 0 1
55807: PPUSH
55808: LD_VAR 0 2
55812: PPUSH
55813: LD_VAR 0 3
55817: PPUSH
55818: LD_VAR 0 4
55822: PPUSH
55823: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55827: LD_VAR 0 1
55831: PPUSH
55832: LD_VAR 0 2
55836: PPUSH
55837: LD_VAR 0 3
55841: PPUSH
55842: CALL_OW 331
// end ;
55846: LD_VAR 0 5
55850: RET
// export function Video ( mode ) ; begin
55851: LD_INT 0
55853: PPUSH
// ingame_video = mode ;
55854: LD_ADDR_OWVAR 52
55858: PUSH
55859: LD_VAR 0 1
55863: ST_TO_ADDR
// interface_hidden = mode ;
55864: LD_ADDR_OWVAR 54
55868: PUSH
55869: LD_VAR 0 1
55873: ST_TO_ADDR
// end ;
55874: LD_VAR 0 2
55878: RET
// export function Join ( array , element ) ; begin
55879: LD_INT 0
55881: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55882: LD_ADDR_VAR 0 3
55886: PUSH
55887: LD_VAR 0 1
55891: PPUSH
55892: LD_VAR 0 1
55896: PUSH
55897: LD_INT 1
55899: PLUS
55900: PPUSH
55901: LD_VAR 0 2
55905: PPUSH
55906: CALL_OW 1
55910: ST_TO_ADDR
// end ;
55911: LD_VAR 0 3
55915: RET
// export function JoinUnion ( array , element ) ; begin
55916: LD_INT 0
55918: PPUSH
// result := array union element ;
55919: LD_ADDR_VAR 0 3
55923: PUSH
55924: LD_VAR 0 1
55928: PUSH
55929: LD_VAR 0 2
55933: UNION
55934: ST_TO_ADDR
// end ;
55935: LD_VAR 0 3
55939: RET
// export function GetBehemoths ( side ) ; begin
55940: LD_INT 0
55942: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55943: LD_ADDR_VAR 0 2
55947: PUSH
55948: LD_INT 22
55950: PUSH
55951: LD_VAR 0 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 31
55962: PUSH
55963: LD_INT 25
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PPUSH
55974: CALL_OW 69
55978: ST_TO_ADDR
// end ;
55979: LD_VAR 0 2
55983: RET
// export function Shuffle ( array ) ; var i , index ; begin
55984: LD_INT 0
55986: PPUSH
55987: PPUSH
55988: PPUSH
// result := [ ] ;
55989: LD_ADDR_VAR 0 2
55993: PUSH
55994: EMPTY
55995: ST_TO_ADDR
// if not array then
55996: LD_VAR 0 1
56000: NOT
56001: IFFALSE 56005
// exit ;
56003: GO 56104
// Randomize ;
56005: CALL_OW 10
// for i = array downto 1 do
56009: LD_ADDR_VAR 0 3
56013: PUSH
56014: DOUBLE
56015: LD_VAR 0 1
56019: INC
56020: ST_TO_ADDR
56021: LD_INT 1
56023: PUSH
56024: FOR_DOWNTO
56025: IFFALSE 56102
// begin index := rand ( 1 , array ) ;
56027: LD_ADDR_VAR 0 4
56031: PUSH
56032: LD_INT 1
56034: PPUSH
56035: LD_VAR 0 1
56039: PPUSH
56040: CALL_OW 12
56044: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56045: LD_ADDR_VAR 0 2
56049: PUSH
56050: LD_VAR 0 2
56054: PPUSH
56055: LD_VAR 0 2
56059: PUSH
56060: LD_INT 1
56062: PLUS
56063: PPUSH
56064: LD_VAR 0 1
56068: PUSH
56069: LD_VAR 0 4
56073: ARRAY
56074: PPUSH
56075: CALL_OW 2
56079: ST_TO_ADDR
// array := Delete ( array , index ) ;
56080: LD_ADDR_VAR 0 1
56084: PUSH
56085: LD_VAR 0 1
56089: PPUSH
56090: LD_VAR 0 4
56094: PPUSH
56095: CALL_OW 3
56099: ST_TO_ADDR
// end ;
56100: GO 56024
56102: POP
56103: POP
// end ;
56104: LD_VAR 0 2
56108: RET
// export function GetBaseMaterials ( base ) ; begin
56109: LD_INT 0
56111: PPUSH
// result := [ 0 , 0 , 0 ] ;
56112: LD_ADDR_VAR 0 2
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: ST_TO_ADDR
// if not base then
56131: LD_VAR 0 1
56135: NOT
56136: IFFALSE 56140
// exit ;
56138: GO 56189
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56140: LD_ADDR_VAR 0 2
56144: PUSH
56145: LD_VAR 0 1
56149: PPUSH
56150: LD_INT 1
56152: PPUSH
56153: CALL_OW 275
56157: PUSH
56158: LD_VAR 0 1
56162: PPUSH
56163: LD_INT 2
56165: PPUSH
56166: CALL_OW 275
56170: PUSH
56171: LD_VAR 0 1
56175: PPUSH
56176: LD_INT 3
56178: PPUSH
56179: CALL_OW 275
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: ST_TO_ADDR
// end ;
56189: LD_VAR 0 2
56193: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56194: LD_INT 0
56196: PPUSH
56197: PPUSH
// result := array ;
56198: LD_ADDR_VAR 0 3
56202: PUSH
56203: LD_VAR 0 1
56207: ST_TO_ADDR
// if size > 0 then
56208: LD_VAR 0 2
56212: PUSH
56213: LD_INT 0
56215: GREATER
56216: IFFALSE 56262
// for i := array downto size do
56218: LD_ADDR_VAR 0 4
56222: PUSH
56223: DOUBLE
56224: LD_VAR 0 1
56228: INC
56229: ST_TO_ADDR
56230: LD_VAR 0 2
56234: PUSH
56235: FOR_DOWNTO
56236: IFFALSE 56260
// result := Delete ( result , result ) ;
56238: LD_ADDR_VAR 0 3
56242: PUSH
56243: LD_VAR 0 3
56247: PPUSH
56248: LD_VAR 0 3
56252: PPUSH
56253: CALL_OW 3
56257: ST_TO_ADDR
56258: GO 56235
56260: POP
56261: POP
// end ;
56262: LD_VAR 0 3
56266: RET
// export function ComExit ( unit ) ; var tmp ; begin
56267: LD_INT 0
56269: PPUSH
56270: PPUSH
// if not IsInUnit ( unit ) then
56271: LD_VAR 0 1
56275: PPUSH
56276: CALL_OW 310
56280: NOT
56281: IFFALSE 56285
// exit ;
56283: GO 56345
// tmp := IsInUnit ( unit ) ;
56285: LD_ADDR_VAR 0 3
56289: PUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: CALL_OW 310
56299: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56300: LD_VAR 0 3
56304: PPUSH
56305: CALL_OW 247
56309: PUSH
56310: LD_INT 2
56312: EQUAL
56313: IFFALSE 56326
// ComExitVehicle ( unit ) else
56315: LD_VAR 0 1
56319: PPUSH
56320: CALL_OW 121
56324: GO 56335
// ComExitBuilding ( unit ) ;
56326: LD_VAR 0 1
56330: PPUSH
56331: CALL_OW 122
// result := tmp ;
56335: LD_ADDR_VAR 0 2
56339: PUSH
56340: LD_VAR 0 3
56344: ST_TO_ADDR
// end ;
56345: LD_VAR 0 2
56349: RET
// export function ComExitAll ( units ) ; var i ; begin
56350: LD_INT 0
56352: PPUSH
56353: PPUSH
// if not units then
56354: LD_VAR 0 1
56358: NOT
56359: IFFALSE 56363
// exit ;
56361: GO 56389
// for i in units do
56363: LD_ADDR_VAR 0 3
56367: PUSH
56368: LD_VAR 0 1
56372: PUSH
56373: FOR_IN
56374: IFFALSE 56387
// ComExit ( i ) ;
56376: LD_VAR 0 3
56380: PPUSH
56381: CALL 56267 0 1
56385: GO 56373
56387: POP
56388: POP
// end ;
56389: LD_VAR 0 2
56393: RET
// export function ResetHc ; begin
56394: LD_INT 0
56396: PPUSH
// InitHc ;
56397: CALL_OW 19
// hc_importance := 0 ;
56401: LD_ADDR_OWVAR 32
56405: PUSH
56406: LD_INT 0
56408: ST_TO_ADDR
// end ;
56409: LD_VAR 0 1
56413: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56414: LD_INT 0
56416: PPUSH
56417: PPUSH
56418: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56419: LD_ADDR_VAR 0 6
56423: PUSH
56424: LD_VAR 0 1
56428: PUSH
56429: LD_VAR 0 3
56433: PLUS
56434: PUSH
56435: LD_INT 2
56437: DIV
56438: ST_TO_ADDR
// if _x < 0 then
56439: LD_VAR 0 6
56443: PUSH
56444: LD_INT 0
56446: LESS
56447: IFFALSE 56464
// _x := _x * - 1 ;
56449: LD_ADDR_VAR 0 6
56453: PUSH
56454: LD_VAR 0 6
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: MUL
56463: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56464: LD_ADDR_VAR 0 7
56468: PUSH
56469: LD_VAR 0 2
56473: PUSH
56474: LD_VAR 0 4
56478: PLUS
56479: PUSH
56480: LD_INT 2
56482: DIV
56483: ST_TO_ADDR
// if _y < 0 then
56484: LD_VAR 0 7
56488: PUSH
56489: LD_INT 0
56491: LESS
56492: IFFALSE 56509
// _y := _y * - 1 ;
56494: LD_ADDR_VAR 0 7
56498: PUSH
56499: LD_VAR 0 7
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: MUL
56508: ST_TO_ADDR
// result := [ _x , _y ] ;
56509: LD_ADDR_VAR 0 5
56513: PUSH
56514: LD_VAR 0 6
56518: PUSH
56519: LD_VAR 0 7
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: ST_TO_ADDR
// end ;
56528: LD_VAR 0 5
56532: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56533: LD_INT 0
56535: PPUSH
56536: PPUSH
56537: PPUSH
56538: PPUSH
// task := GetTaskList ( unit ) ;
56539: LD_ADDR_VAR 0 7
56543: PUSH
56544: LD_VAR 0 1
56548: PPUSH
56549: CALL_OW 437
56553: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56554: LD_VAR 0 7
56558: NOT
56559: PUSH
56560: LD_VAR 0 1
56564: PPUSH
56565: LD_VAR 0 2
56569: PPUSH
56570: CALL_OW 308
56574: NOT
56575: AND
56576: IFFALSE 56580
// exit ;
56578: GO 56698
// if IsInArea ( unit , area ) then
56580: LD_VAR 0 1
56584: PPUSH
56585: LD_VAR 0 2
56589: PPUSH
56590: CALL_OW 308
56594: IFFALSE 56612
// begin ComMoveToArea ( unit , goAway ) ;
56596: LD_VAR 0 1
56600: PPUSH
56601: LD_VAR 0 3
56605: PPUSH
56606: CALL_OW 113
// exit ;
56610: GO 56698
// end ; if task [ 1 ] [ 1 ] <> M then
56612: LD_VAR 0 7
56616: PUSH
56617: LD_INT 1
56619: ARRAY
56620: PUSH
56621: LD_INT 1
56623: ARRAY
56624: PUSH
56625: LD_STRING M
56627: NONEQUAL
56628: IFFALSE 56632
// exit ;
56630: GO 56698
// x := task [ 1 ] [ 2 ] ;
56632: LD_ADDR_VAR 0 5
56636: PUSH
56637: LD_VAR 0 7
56641: PUSH
56642: LD_INT 1
56644: ARRAY
56645: PUSH
56646: LD_INT 2
56648: ARRAY
56649: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56650: LD_ADDR_VAR 0 6
56654: PUSH
56655: LD_VAR 0 7
56659: PUSH
56660: LD_INT 1
56662: ARRAY
56663: PUSH
56664: LD_INT 3
56666: ARRAY
56667: ST_TO_ADDR
// if InArea ( x , y , area ) then
56668: LD_VAR 0 5
56672: PPUSH
56673: LD_VAR 0 6
56677: PPUSH
56678: LD_VAR 0 2
56682: PPUSH
56683: CALL_OW 309
56687: IFFALSE 56698
// ComStop ( unit ) ;
56689: LD_VAR 0 1
56693: PPUSH
56694: CALL_OW 141
// end ;
56698: LD_VAR 0 4
56702: RET
// export function Abs ( value ) ; begin
56703: LD_INT 0
56705: PPUSH
// result := value ;
56706: LD_ADDR_VAR 0 2
56710: PUSH
56711: LD_VAR 0 1
56715: ST_TO_ADDR
// if value < 0 then
56716: LD_VAR 0 1
56720: PUSH
56721: LD_INT 0
56723: LESS
56724: IFFALSE 56741
// result := value * - 1 ;
56726: LD_ADDR_VAR 0 2
56730: PUSH
56731: LD_VAR 0 1
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: MUL
56740: ST_TO_ADDR
// end ;
56741: LD_VAR 0 2
56745: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56746: LD_INT 0
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
56752: PPUSH
56753: PPUSH
56754: PPUSH
56755: PPUSH
// if not unit or not building then
56756: LD_VAR 0 1
56760: NOT
56761: PUSH
56762: LD_VAR 0 2
56766: NOT
56767: OR
56768: IFFALSE 56772
// exit ;
56770: GO 56998
// x := GetX ( building ) ;
56772: LD_ADDR_VAR 0 4
56776: PUSH
56777: LD_VAR 0 2
56781: PPUSH
56782: CALL_OW 250
56786: ST_TO_ADDR
// y := GetY ( building ) ;
56787: LD_ADDR_VAR 0 6
56791: PUSH
56792: LD_VAR 0 2
56796: PPUSH
56797: CALL_OW 251
56801: ST_TO_ADDR
// d := GetDir ( building ) ;
56802: LD_ADDR_VAR 0 8
56806: PUSH
56807: LD_VAR 0 2
56811: PPUSH
56812: CALL_OW 254
56816: ST_TO_ADDR
// r := 4 ;
56817: LD_ADDR_VAR 0 9
56821: PUSH
56822: LD_INT 4
56824: ST_TO_ADDR
// for i := 1 to 5 do
56825: LD_ADDR_VAR 0 10
56829: PUSH
56830: DOUBLE
56831: LD_INT 1
56833: DEC
56834: ST_TO_ADDR
56835: LD_INT 5
56837: PUSH
56838: FOR_TO
56839: IFFALSE 56996
// begin _x := ShiftX ( x , d , r + i ) ;
56841: LD_ADDR_VAR 0 5
56845: PUSH
56846: LD_VAR 0 4
56850: PPUSH
56851: LD_VAR 0 8
56855: PPUSH
56856: LD_VAR 0 9
56860: PUSH
56861: LD_VAR 0 10
56865: PLUS
56866: PPUSH
56867: CALL_OW 272
56871: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56872: LD_ADDR_VAR 0 7
56876: PUSH
56877: LD_VAR 0 6
56881: PPUSH
56882: LD_VAR 0 8
56886: PPUSH
56887: LD_VAR 0 9
56891: PUSH
56892: LD_VAR 0 10
56896: PLUS
56897: PPUSH
56898: CALL_OW 273
56902: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56903: LD_VAR 0 5
56907: PPUSH
56908: LD_VAR 0 7
56912: PPUSH
56913: CALL_OW 488
56917: PUSH
56918: LD_VAR 0 5
56922: PPUSH
56923: LD_VAR 0 7
56927: PPUSH
56928: CALL_OW 428
56932: PPUSH
56933: CALL_OW 247
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: IN
56948: NOT
56949: AND
56950: IFFALSE 56994
// begin ComMoveXY ( unit , _x , _y ) ;
56952: LD_VAR 0 1
56956: PPUSH
56957: LD_VAR 0 5
56961: PPUSH
56962: LD_VAR 0 7
56966: PPUSH
56967: CALL_OW 111
// result := [ _x , _y ] ;
56971: LD_ADDR_VAR 0 3
56975: PUSH
56976: LD_VAR 0 5
56980: PUSH
56981: LD_VAR 0 7
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: ST_TO_ADDR
// exit ;
56990: POP
56991: POP
56992: GO 56998
// end ; end ;
56994: GO 56838
56996: POP
56997: POP
// end ;
56998: LD_VAR 0 3
57002: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57003: LD_INT 0
57005: PPUSH
57006: PPUSH
57007: PPUSH
// result := 0 ;
57008: LD_ADDR_VAR 0 3
57012: PUSH
57013: LD_INT 0
57015: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57016: LD_VAR 0 1
57020: PUSH
57021: LD_INT 0
57023: LESS
57024: PUSH
57025: LD_VAR 0 1
57029: PUSH
57030: LD_INT 8
57032: GREATER
57033: OR
57034: PUSH
57035: LD_VAR 0 2
57039: PUSH
57040: LD_INT 0
57042: LESS
57043: OR
57044: PUSH
57045: LD_VAR 0 2
57049: PUSH
57050: LD_INT 8
57052: GREATER
57053: OR
57054: IFFALSE 57058
// exit ;
57056: GO 57133
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57058: LD_ADDR_VAR 0 4
57062: PUSH
57063: LD_INT 22
57065: PUSH
57066: LD_VAR 0 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PPUSH
57075: CALL_OW 69
57079: PUSH
57080: FOR_IN
57081: IFFALSE 57131
// begin un := UnitShoot ( i ) ;
57083: LD_ADDR_VAR 0 5
57087: PUSH
57088: LD_VAR 0 4
57092: PPUSH
57093: CALL_OW 504
57097: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57098: LD_VAR 0 5
57102: PPUSH
57103: CALL_OW 255
57107: PUSH
57108: LD_VAR 0 1
57112: EQUAL
57113: IFFALSE 57129
// begin result := un ;
57115: LD_ADDR_VAR 0 3
57119: PUSH
57120: LD_VAR 0 5
57124: ST_TO_ADDR
// exit ;
57125: POP
57126: POP
57127: GO 57133
// end ; end ;
57129: GO 57080
57131: POP
57132: POP
// end ;
57133: LD_VAR 0 3
57137: RET
// export function GetCargoBay ( units ) ; begin
57138: LD_INT 0
57140: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57141: LD_ADDR_VAR 0 2
57145: PUSH
57146: LD_VAR 0 1
57150: PPUSH
57151: LD_INT 2
57153: PUSH
57154: LD_INT 34
57156: PUSH
57157: LD_INT 12
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 34
57166: PUSH
57167: LD_INT 51
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 34
57176: PUSH
57177: LD_INT 32
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 34
57186: PUSH
57187: LD_EXP 13
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: PPUSH
57203: CALL_OW 72
57207: ST_TO_ADDR
// end ;
57208: LD_VAR 0 2
57212: RET
// export function Negate ( value ) ; begin
57213: LD_INT 0
57215: PPUSH
// result := not value ;
57216: LD_ADDR_VAR 0 2
57220: PUSH
57221: LD_VAR 0 1
57225: NOT
57226: ST_TO_ADDR
// end ;
57227: LD_VAR 0 2
57231: RET
// export function Inc ( value ) ; begin
57232: LD_INT 0
57234: PPUSH
// result := value + 1 ;
57235: LD_ADDR_VAR 0 2
57239: PUSH
57240: LD_VAR 0 1
57244: PUSH
57245: LD_INT 1
57247: PLUS
57248: ST_TO_ADDR
// end ;
57249: LD_VAR 0 2
57253: RET
// export function Dec ( value ) ; begin
57254: LD_INT 0
57256: PPUSH
// result := value - 1 ;
57257: LD_ADDR_VAR 0 2
57261: PUSH
57262: LD_VAR 0 1
57266: PUSH
57267: LD_INT 1
57269: MINUS
57270: ST_TO_ADDR
// end ;
57271: LD_VAR 0 2
57275: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57276: LD_INT 0
57278: PPUSH
57279: PPUSH
57280: PPUSH
57281: PPUSH
57282: PPUSH
57283: PPUSH
57284: PPUSH
57285: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57286: LD_VAR 0 1
57290: PPUSH
57291: LD_VAR 0 2
57295: PPUSH
57296: CALL_OW 488
57300: NOT
57301: PUSH
57302: LD_VAR 0 3
57306: PPUSH
57307: LD_VAR 0 4
57311: PPUSH
57312: CALL_OW 488
57316: NOT
57317: OR
57318: IFFALSE 57331
// begin result := - 1 ;
57320: LD_ADDR_VAR 0 5
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: ST_TO_ADDR
// exit ;
57329: GO 57566
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57331: LD_ADDR_VAR 0 12
57335: PUSH
57336: LD_VAR 0 1
57340: PPUSH
57341: LD_VAR 0 2
57345: PPUSH
57346: LD_VAR 0 3
57350: PPUSH
57351: LD_VAR 0 4
57355: PPUSH
57356: CALL 56414 0 4
57360: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57361: LD_ADDR_VAR 0 11
57365: PUSH
57366: LD_VAR 0 1
57370: PPUSH
57371: LD_VAR 0 2
57375: PPUSH
57376: LD_VAR 0 12
57380: PUSH
57381: LD_INT 1
57383: ARRAY
57384: PPUSH
57385: LD_VAR 0 12
57389: PUSH
57390: LD_INT 2
57392: ARRAY
57393: PPUSH
57394: CALL_OW 298
57398: ST_TO_ADDR
// distance := 9999 ;
57399: LD_ADDR_VAR 0 10
57403: PUSH
57404: LD_INT 9999
57406: ST_TO_ADDR
// for i := 0 to 5 do
57407: LD_ADDR_VAR 0 6
57411: PUSH
57412: DOUBLE
57413: LD_INT 0
57415: DEC
57416: ST_TO_ADDR
57417: LD_INT 5
57419: PUSH
57420: FOR_TO
57421: IFFALSE 57564
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57423: LD_ADDR_VAR 0 7
57427: PUSH
57428: LD_VAR 0 1
57432: PPUSH
57433: LD_VAR 0 6
57437: PPUSH
57438: LD_VAR 0 11
57442: PPUSH
57443: CALL_OW 272
57447: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57448: LD_ADDR_VAR 0 8
57452: PUSH
57453: LD_VAR 0 2
57457: PPUSH
57458: LD_VAR 0 6
57462: PPUSH
57463: LD_VAR 0 11
57467: PPUSH
57468: CALL_OW 273
57472: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57473: LD_VAR 0 7
57477: PPUSH
57478: LD_VAR 0 8
57482: PPUSH
57483: CALL_OW 488
57487: NOT
57488: IFFALSE 57492
// continue ;
57490: GO 57420
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57492: LD_ADDR_VAR 0 9
57496: PUSH
57497: LD_VAR 0 12
57501: PUSH
57502: LD_INT 1
57504: ARRAY
57505: PPUSH
57506: LD_VAR 0 12
57510: PUSH
57511: LD_INT 2
57513: ARRAY
57514: PPUSH
57515: LD_VAR 0 7
57519: PPUSH
57520: LD_VAR 0 8
57524: PPUSH
57525: CALL_OW 298
57529: ST_TO_ADDR
// if tmp < distance then
57530: LD_VAR 0 9
57534: PUSH
57535: LD_VAR 0 10
57539: LESS
57540: IFFALSE 57562
// begin result := i ;
57542: LD_ADDR_VAR 0 5
57546: PUSH
57547: LD_VAR 0 6
57551: ST_TO_ADDR
// distance := tmp ;
57552: LD_ADDR_VAR 0 10
57556: PUSH
57557: LD_VAR 0 9
57561: ST_TO_ADDR
// end ; end ;
57562: GO 57420
57564: POP
57565: POP
// end ;
57566: LD_VAR 0 5
57570: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57571: LD_INT 0
57573: PPUSH
57574: PPUSH
// if not driver or not IsInUnit ( driver ) then
57575: LD_VAR 0 1
57579: NOT
57580: PUSH
57581: LD_VAR 0 1
57585: PPUSH
57586: CALL_OW 310
57590: NOT
57591: OR
57592: IFFALSE 57596
// exit ;
57594: GO 57686
// vehicle := IsInUnit ( driver ) ;
57596: LD_ADDR_VAR 0 3
57600: PUSH
57601: LD_VAR 0 1
57605: PPUSH
57606: CALL_OW 310
57610: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57611: LD_VAR 0 1
57615: PPUSH
57616: LD_STRING \
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: PUSH
57646: LD_STRING E
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_VAR 0 3
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PPUSH
57682: CALL_OW 446
// end ;
57686: LD_VAR 0 2
57690: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57691: LD_INT 0
57693: PPUSH
57694: PPUSH
// if not driver or not IsInUnit ( driver ) then
57695: LD_VAR 0 1
57699: NOT
57700: PUSH
57701: LD_VAR 0 1
57705: PPUSH
57706: CALL_OW 310
57710: NOT
57711: OR
57712: IFFALSE 57716
// exit ;
57714: GO 57806
// vehicle := IsInUnit ( driver ) ;
57716: LD_ADDR_VAR 0 3
57720: PUSH
57721: LD_VAR 0 1
57725: PPUSH
57726: CALL_OW 310
57730: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57731: LD_VAR 0 1
57735: PPUSH
57736: LD_STRING \
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: PUSH
57766: LD_STRING E
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_VAR 0 3
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PPUSH
57802: CALL_OW 447
// end ;
57806: LD_VAR 0 2
57810: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57811: LD_INT 0
57813: PPUSH
57814: PPUSH
57815: PPUSH
// tmp := [ ] ;
57816: LD_ADDR_VAR 0 5
57820: PUSH
57821: EMPTY
57822: ST_TO_ADDR
// for i in units do
57823: LD_ADDR_VAR 0 4
57827: PUSH
57828: LD_VAR 0 1
57832: PUSH
57833: FOR_IN
57834: IFFALSE 57872
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57836: LD_ADDR_VAR 0 5
57840: PUSH
57841: LD_VAR 0 5
57845: PPUSH
57846: LD_VAR 0 5
57850: PUSH
57851: LD_INT 1
57853: PLUS
57854: PPUSH
57855: LD_VAR 0 4
57859: PPUSH
57860: CALL_OW 256
57864: PPUSH
57865: CALL_OW 2
57869: ST_TO_ADDR
57870: GO 57833
57872: POP
57873: POP
// if not tmp then
57874: LD_VAR 0 5
57878: NOT
57879: IFFALSE 57883
// exit ;
57881: GO 57931
// if asc then
57883: LD_VAR 0 2
57887: IFFALSE 57911
// result := SortListByListAsc ( units , tmp ) else
57889: LD_ADDR_VAR 0 3
57893: PUSH
57894: LD_VAR 0 1
57898: PPUSH
57899: LD_VAR 0 5
57903: PPUSH
57904: CALL_OW 76
57908: ST_TO_ADDR
57909: GO 57931
// result := SortListByListDesc ( units , tmp ) ;
57911: LD_ADDR_VAR 0 3
57915: PUSH
57916: LD_VAR 0 1
57920: PPUSH
57921: LD_VAR 0 5
57925: PPUSH
57926: CALL_OW 77
57930: ST_TO_ADDR
// end ;
57931: LD_VAR 0 3
57935: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57936: LD_INT 0
57938: PPUSH
57939: PPUSH
// task := GetTaskList ( mech ) ;
57940: LD_ADDR_VAR 0 4
57944: PUSH
57945: LD_VAR 0 1
57949: PPUSH
57950: CALL_OW 437
57954: ST_TO_ADDR
// if not task then
57955: LD_VAR 0 4
57959: NOT
57960: IFFALSE 57964
// exit ;
57962: GO 58006
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57964: LD_ADDR_VAR 0 3
57968: PUSH
57969: LD_VAR 0 4
57973: PUSH
57974: LD_INT 1
57976: ARRAY
57977: PUSH
57978: LD_INT 1
57980: ARRAY
57981: PUSH
57982: LD_STRING r
57984: EQUAL
57985: PUSH
57986: LD_VAR 0 4
57990: PUSH
57991: LD_INT 1
57993: ARRAY
57994: PUSH
57995: LD_INT 4
57997: ARRAY
57998: PUSH
57999: LD_VAR 0 2
58003: EQUAL
58004: AND
58005: ST_TO_ADDR
// end ;
58006: LD_VAR 0 3
58010: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58011: LD_INT 0
58013: PPUSH
// SetDir ( unit , d ) ;
58014: LD_VAR 0 1
58018: PPUSH
58019: LD_VAR 0 4
58023: PPUSH
58024: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58028: LD_VAR 0 1
58032: PPUSH
58033: LD_VAR 0 2
58037: PPUSH
58038: LD_VAR 0 3
58042: PPUSH
58043: LD_VAR 0 5
58047: PPUSH
58048: CALL_OW 48
// end ;
58052: LD_VAR 0 6
58056: RET
// export function ToNaturalNumber ( number ) ; begin
58057: LD_INT 0
58059: PPUSH
// result := number div 1 ;
58060: LD_ADDR_VAR 0 2
58064: PUSH
58065: LD_VAR 0 1
58069: PUSH
58070: LD_INT 1
58072: DIV
58073: ST_TO_ADDR
// if number < 0 then
58074: LD_VAR 0 1
58078: PUSH
58079: LD_INT 0
58081: LESS
58082: IFFALSE 58092
// result := 0 ;
58084: LD_ADDR_VAR 0 2
58088: PUSH
58089: LD_INT 0
58091: ST_TO_ADDR
// end ;
58092: LD_VAR 0 2
58096: RET
// export function SortByClass ( units , class ) ; var un ; begin
58097: LD_INT 0
58099: PPUSH
58100: PPUSH
// if not units or not class then
58101: LD_VAR 0 1
58105: NOT
58106: PUSH
58107: LD_VAR 0 2
58111: NOT
58112: OR
58113: IFFALSE 58117
// exit ;
58115: GO 58212
// result := [ ] ;
58117: LD_ADDR_VAR 0 3
58121: PUSH
58122: EMPTY
58123: ST_TO_ADDR
// for un in units do
58124: LD_ADDR_VAR 0 4
58128: PUSH
58129: LD_VAR 0 1
58133: PUSH
58134: FOR_IN
58135: IFFALSE 58210
// if GetClass ( un ) = class then
58137: LD_VAR 0 4
58141: PPUSH
58142: CALL_OW 257
58146: PUSH
58147: LD_VAR 0 2
58151: EQUAL
58152: IFFALSE 58179
// result := Insert ( result , 1 , un ) else
58154: LD_ADDR_VAR 0 3
58158: PUSH
58159: LD_VAR 0 3
58163: PPUSH
58164: LD_INT 1
58166: PPUSH
58167: LD_VAR 0 4
58171: PPUSH
58172: CALL_OW 2
58176: ST_TO_ADDR
58177: GO 58208
// result := Replace ( result , result + 1 , un ) ;
58179: LD_ADDR_VAR 0 3
58183: PUSH
58184: LD_VAR 0 3
58188: PPUSH
58189: LD_VAR 0 3
58193: PUSH
58194: LD_INT 1
58196: PLUS
58197: PPUSH
58198: LD_VAR 0 4
58202: PPUSH
58203: CALL_OW 1
58207: ST_TO_ADDR
58208: GO 58134
58210: POP
58211: POP
// end ;
58212: LD_VAR 0 3
58216: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58217: LD_INT 0
58219: PPUSH
58220: PPUSH
58221: PPUSH
58222: PPUSH
58223: PPUSH
58224: PPUSH
58225: PPUSH
// result := [ ] ;
58226: LD_ADDR_VAR 0 4
58230: PUSH
58231: EMPTY
58232: ST_TO_ADDR
// if x - r < 0 then
58233: LD_VAR 0 1
58237: PUSH
58238: LD_VAR 0 3
58242: MINUS
58243: PUSH
58244: LD_INT 0
58246: LESS
58247: IFFALSE 58259
// min_x := 0 else
58249: LD_ADDR_VAR 0 8
58253: PUSH
58254: LD_INT 0
58256: ST_TO_ADDR
58257: GO 58275
// min_x := x - r ;
58259: LD_ADDR_VAR 0 8
58263: PUSH
58264: LD_VAR 0 1
58268: PUSH
58269: LD_VAR 0 3
58273: MINUS
58274: ST_TO_ADDR
// if y - r < 0 then
58275: LD_VAR 0 2
58279: PUSH
58280: LD_VAR 0 3
58284: MINUS
58285: PUSH
58286: LD_INT 0
58288: LESS
58289: IFFALSE 58301
// min_y := 0 else
58291: LD_ADDR_VAR 0 7
58295: PUSH
58296: LD_INT 0
58298: ST_TO_ADDR
58299: GO 58317
// min_y := y - r ;
58301: LD_ADDR_VAR 0 7
58305: PUSH
58306: LD_VAR 0 2
58310: PUSH
58311: LD_VAR 0 3
58315: MINUS
58316: ST_TO_ADDR
// max_x := x + r ;
58317: LD_ADDR_VAR 0 9
58321: PUSH
58322: LD_VAR 0 1
58326: PUSH
58327: LD_VAR 0 3
58331: PLUS
58332: ST_TO_ADDR
// max_y := y + r ;
58333: LD_ADDR_VAR 0 10
58337: PUSH
58338: LD_VAR 0 2
58342: PUSH
58343: LD_VAR 0 3
58347: PLUS
58348: ST_TO_ADDR
// for _x = min_x to max_x do
58349: LD_ADDR_VAR 0 5
58353: PUSH
58354: DOUBLE
58355: LD_VAR 0 8
58359: DEC
58360: ST_TO_ADDR
58361: LD_VAR 0 9
58365: PUSH
58366: FOR_TO
58367: IFFALSE 58468
// for _y = min_y to max_y do
58369: LD_ADDR_VAR 0 6
58373: PUSH
58374: DOUBLE
58375: LD_VAR 0 7
58379: DEC
58380: ST_TO_ADDR
58381: LD_VAR 0 10
58385: PUSH
58386: FOR_TO
58387: IFFALSE 58464
// begin if not ValidHex ( _x , _y ) then
58389: LD_VAR 0 5
58393: PPUSH
58394: LD_VAR 0 6
58398: PPUSH
58399: CALL_OW 488
58403: NOT
58404: IFFALSE 58408
// continue ;
58406: GO 58386
// if GetResourceTypeXY ( _x , _y ) then
58408: LD_VAR 0 5
58412: PPUSH
58413: LD_VAR 0 6
58417: PPUSH
58418: CALL_OW 283
58422: IFFALSE 58462
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58424: LD_ADDR_VAR 0 4
58428: PUSH
58429: LD_VAR 0 4
58433: PPUSH
58434: LD_VAR 0 4
58438: PUSH
58439: LD_INT 1
58441: PLUS
58442: PPUSH
58443: LD_VAR 0 5
58447: PUSH
58448: LD_VAR 0 6
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PPUSH
58457: CALL_OW 1
58461: ST_TO_ADDR
// end ;
58462: GO 58386
58464: POP
58465: POP
58466: GO 58366
58468: POP
58469: POP
// end ;
58470: LD_VAR 0 4
58474: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58475: LD_INT 0
58477: PPUSH
58478: PPUSH
58479: PPUSH
58480: PPUSH
58481: PPUSH
58482: PPUSH
58483: PPUSH
58484: PPUSH
// if not units then
58485: LD_VAR 0 1
58489: NOT
58490: IFFALSE 58494
// exit ;
58492: GO 58919
// result := UnitFilter ( units , [ f_ok ] ) ;
58494: LD_ADDR_VAR 0 3
58498: PUSH
58499: LD_VAR 0 1
58503: PPUSH
58504: LD_INT 50
58506: PUSH
58507: EMPTY
58508: LIST
58509: PPUSH
58510: CALL_OW 72
58514: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58515: LD_ADDR_VAR 0 8
58519: PUSH
58520: LD_VAR 0 1
58524: PUSH
58525: LD_INT 1
58527: ARRAY
58528: PPUSH
58529: CALL_OW 255
58533: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
58534: LD_ADDR_VAR 0 10
58538: PUSH
58539: LD_INT 29
58541: PUSH
58542: LD_EXP 16
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// if not result then
58551: LD_VAR 0 3
58555: NOT
58556: IFFALSE 58560
// exit ;
58558: GO 58919
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58560: LD_ADDR_VAR 0 5
58564: PUSH
58565: LD_INT 81
58567: PUSH
58568: LD_VAR 0 8
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PPUSH
58577: CALL_OW 69
58581: ST_TO_ADDR
// for i in result do
58582: LD_ADDR_VAR 0 4
58586: PUSH
58587: LD_VAR 0 3
58591: PUSH
58592: FOR_IN
58593: IFFALSE 58917
// begin tag := GetTag ( i ) + 1 ;
58595: LD_ADDR_VAR 0 9
58599: PUSH
58600: LD_VAR 0 4
58604: PPUSH
58605: CALL_OW 110
58609: PUSH
58610: LD_INT 1
58612: PLUS
58613: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
58614: LD_ADDR_VAR 0 7
58618: PUSH
58619: LD_VAR 0 4
58623: PPUSH
58624: CALL_OW 250
58628: PPUSH
58629: LD_VAR 0 4
58633: PPUSH
58634: CALL_OW 251
58638: PPUSH
58639: LD_INT 6
58641: PPUSH
58642: CALL 58217 0 3
58646: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
58647: LD_VAR 0 7
58651: PUSH
58652: LD_VAR 0 4
58656: PPUSH
58657: CALL_OW 264
58661: PUSH
58662: LD_VAR 0 10
58666: IN
58667: NOT
58668: AND
58669: IFFALSE 58708
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58671: LD_VAR 0 4
58675: PPUSH
58676: LD_VAR 0 7
58680: PUSH
58681: LD_INT 1
58683: ARRAY
58684: PUSH
58685: LD_INT 1
58687: ARRAY
58688: PPUSH
58689: LD_VAR 0 7
58693: PUSH
58694: LD_INT 1
58696: ARRAY
58697: PUSH
58698: LD_INT 2
58700: ARRAY
58701: PPUSH
58702: CALL_OW 116
58706: GO 58915
// if path > tag then
58708: LD_VAR 0 2
58712: PUSH
58713: LD_VAR 0 9
58717: GREATER
58718: IFFALSE 58885
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
58720: LD_ADDR_VAR 0 6
58724: PUSH
58725: LD_VAR 0 5
58729: PPUSH
58730: LD_INT 91
58732: PUSH
58733: LD_VAR 0 4
58737: PUSH
58738: LD_INT 12
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: PPUSH
58746: CALL_OW 72
58750: ST_TO_ADDR
// if nearEnemy then
58751: LD_VAR 0 6
58755: IFFALSE 58783
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58757: LD_VAR 0 4
58761: PPUSH
58762: LD_VAR 0 6
58766: PPUSH
58767: LD_VAR 0 4
58771: PPUSH
58772: CALL_OW 74
58776: PPUSH
58777: CALL_OW 115
58781: GO 58883
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58783: LD_VAR 0 4
58787: PPUSH
58788: LD_VAR 0 2
58792: PUSH
58793: LD_VAR 0 9
58797: ARRAY
58798: PUSH
58799: LD_INT 1
58801: ARRAY
58802: PPUSH
58803: LD_VAR 0 2
58807: PUSH
58808: LD_VAR 0 9
58812: ARRAY
58813: PUSH
58814: LD_INT 2
58816: ARRAY
58817: PPUSH
58818: CALL_OW 297
58822: PUSH
58823: LD_INT 6
58825: GREATER
58826: IFFALSE 58869
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58828: LD_VAR 0 4
58832: PPUSH
58833: LD_VAR 0 2
58837: PUSH
58838: LD_VAR 0 9
58842: ARRAY
58843: PUSH
58844: LD_INT 1
58846: ARRAY
58847: PPUSH
58848: LD_VAR 0 2
58852: PUSH
58853: LD_VAR 0 9
58857: ARRAY
58858: PUSH
58859: LD_INT 2
58861: ARRAY
58862: PPUSH
58863: CALL_OW 114
58867: GO 58883
// SetTag ( i , tag ) ;
58869: LD_VAR 0 4
58873: PPUSH
58874: LD_VAR 0 9
58878: PPUSH
58879: CALL_OW 109
// end else
58883: GO 58915
// if enemy then
58885: LD_VAR 0 5
58889: IFFALSE 58915
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58891: LD_VAR 0 4
58895: PPUSH
58896: LD_VAR 0 5
58900: PPUSH
58901: LD_VAR 0 4
58905: PPUSH
58906: CALL_OW 74
58910: PPUSH
58911: CALL_OW 115
// end ;
58915: GO 58592
58917: POP
58918: POP
// end ;
58919: LD_VAR 0 3
58923: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
58924: LD_INT 0
58926: PPUSH
58927: PPUSH
58928: PPUSH
// if not unit or IsInUnit ( unit ) then
58929: LD_VAR 0 1
58933: NOT
58934: PUSH
58935: LD_VAR 0 1
58939: PPUSH
58940: CALL_OW 310
58944: OR
58945: IFFALSE 58949
// exit ;
58947: GO 59040
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
58949: LD_ADDR_VAR 0 4
58953: PUSH
58954: LD_VAR 0 1
58958: PPUSH
58959: CALL_OW 250
58963: PPUSH
58964: LD_VAR 0 2
58968: PPUSH
58969: LD_INT 1
58971: PPUSH
58972: CALL_OW 272
58976: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
58977: LD_ADDR_VAR 0 5
58981: PUSH
58982: LD_VAR 0 1
58986: PPUSH
58987: CALL_OW 251
58991: PPUSH
58992: LD_VAR 0 2
58996: PPUSH
58997: LD_INT 1
58999: PPUSH
59000: CALL_OW 273
59004: ST_TO_ADDR
// if ValidHex ( x , y ) then
59005: LD_VAR 0 4
59009: PPUSH
59010: LD_VAR 0 5
59014: PPUSH
59015: CALL_OW 488
59019: IFFALSE 59040
// ComTurnXY ( unit , x , y ) ;
59021: LD_VAR 0 1
59025: PPUSH
59026: LD_VAR 0 4
59030: PPUSH
59031: LD_VAR 0 5
59035: PPUSH
59036: CALL_OW 118
// end ;
59040: LD_VAR 0 3
59044: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59045: LD_INT 0
59047: PPUSH
59048: PPUSH
// result := false ;
59049: LD_ADDR_VAR 0 3
59053: PUSH
59054: LD_INT 0
59056: ST_TO_ADDR
// if not units then
59057: LD_VAR 0 2
59061: NOT
59062: IFFALSE 59066
// exit ;
59064: GO 59111
// for i in units do
59066: LD_ADDR_VAR 0 4
59070: PUSH
59071: LD_VAR 0 2
59075: PUSH
59076: FOR_IN
59077: IFFALSE 59109
// if See ( side , i ) then
59079: LD_VAR 0 1
59083: PPUSH
59084: LD_VAR 0 4
59088: PPUSH
59089: CALL_OW 292
59093: IFFALSE 59107
// begin result := true ;
59095: LD_ADDR_VAR 0 3
59099: PUSH
59100: LD_INT 1
59102: ST_TO_ADDR
// exit ;
59103: POP
59104: POP
59105: GO 59111
// end ;
59107: GO 59076
59109: POP
59110: POP
// end ;
59111: LD_VAR 0 3
59115: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59116: LD_INT 0
59118: PPUSH
59119: PPUSH
59120: PPUSH
59121: PPUSH
// if not unit or not points then
59122: LD_VAR 0 1
59126: NOT
59127: PUSH
59128: LD_VAR 0 2
59132: NOT
59133: OR
59134: IFFALSE 59138
// exit ;
59136: GO 59228
// dist := 99999 ;
59138: LD_ADDR_VAR 0 5
59142: PUSH
59143: LD_INT 99999
59145: ST_TO_ADDR
// for i in points do
59146: LD_ADDR_VAR 0 4
59150: PUSH
59151: LD_VAR 0 2
59155: PUSH
59156: FOR_IN
59157: IFFALSE 59226
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59159: LD_ADDR_VAR 0 6
59163: PUSH
59164: LD_VAR 0 1
59168: PPUSH
59169: LD_VAR 0 4
59173: PUSH
59174: LD_INT 1
59176: ARRAY
59177: PPUSH
59178: LD_VAR 0 4
59182: PUSH
59183: LD_INT 2
59185: ARRAY
59186: PPUSH
59187: CALL_OW 297
59191: ST_TO_ADDR
// if tmpDist < dist then
59192: LD_VAR 0 6
59196: PUSH
59197: LD_VAR 0 5
59201: LESS
59202: IFFALSE 59224
// begin result := i ;
59204: LD_ADDR_VAR 0 3
59208: PUSH
59209: LD_VAR 0 4
59213: ST_TO_ADDR
// dist := tmpDist ;
59214: LD_ADDR_VAR 0 5
59218: PUSH
59219: LD_VAR 0 6
59223: ST_TO_ADDR
// end ; end ;
59224: GO 59156
59226: POP
59227: POP
// end ;
59228: LD_VAR 0 3
59232: RET
